
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОбработкиАнализПотребностиВТовареОтчет_8da59c3f-4c79-4769-bc32-8d9744b1142b", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешняяОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеСезонное) тогда
		Предупреждение("Не заполнено Подразделение!");
		возврат;
	КонецЕсли;	
	
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
	
	//------заголовок таблицы - все
	Для i=4 по ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы Цикл
	обл1 = ЭлементыФормы.ПолеТабличногоДокумента.Область(4, i, 4, i);
	обл1.Текст = строка(i-3)+". "+разделитьНаСлова(СокрЛП(обл1.Текст));
	КонецЦикла;

	ЭлементыФормы.ПолеТабличногоДокумента.Область(4, 4, 4, ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4, 4, 4, ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы).АвтоВысотаСтроки = истина;
	
	ЭлементыФормы.ПолеТабличногоДокумента.Область(5, 4, ЭлементыФормы.ПолеТабличногоДокумента.ВысотаТаблицы, ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы).ШиринаКолонки = 19;
	
КонецПроцедуры

функция разделитьНаСлова(текст1)
	стрЗагл = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";  //ЯШТ исключены
	стрМал  = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";	
	СловоИсключение = "ЯШТ";    // перед ним - пробел
	
	N = стрДлина(текст1); 
	текст2=лев(текст1, 1);// первая буква может быть заглавной
	Для i=2 по N Цикл
	симв=сред(текст1,i,1); 
	j = Найти(стрЗагл, симв); k = Найти(СловоИсключение, симв);
	Слово = сред(текст1,i,стрДлина(СловоИсключение) ); 
		если j=0 или k >0 тогда
		  текст2 = текст2 + ?(Слово=СловоИсключение, " ","") + симв;
		иначе
		  текст2 = текст2 + " " +сред(стрМал,j,1);
	    КонецЕсли;  
	КонецЦикла;	
	
	возврат текст2;
КонецФункции	

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаНач", ?(ДатаНач='00010101','20130601',ДатаНач) );
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаКон", ?(ДатаКон='00010101',КонецДня(ТекущаяДата()),КонецДня(ДатаКон)) );
	ПостроительОтчетаОтчет.Параметры.Вставить("ПодразделениеСезонное", ПодразделениеСезонное);

	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры


//=========================ОСНОВНОЙ ЗАПРОС===============================
Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	СУММА(ВложенныйЗапрос.ЗначениеТочкиЗаказа) КАК МинимальныйОстаток,
	|	СУММА(ВложенныйЗапрос.Остаток) КАК ТекущийОстаток,
	|	СУММА(ВложенныйЗапрос.ЗаказаноИНеОтгружено) КАК ОстатокСезонныхЗаказов,
	|	СУММА(ВложенныйЗапрос.ЗакПостИНеПришло) КАК ОстатокЗапланированногоПрихода,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.НеобходимыйОбъемЗакупки) > 0
	|			ТОГДА СУММА(ВложенныйЗапрос.НеобходимыйОбъемЗакупки)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеобходимыйОбъемПеремещения,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос3.СвободныйОстаток, 0)) КАК СвободныйОстатокЯШТ
	|{ВЫБРАТЬ
	|	Код,
	|	Номенклатура.*,
	|	МинимальныйОстаток КАК МинимальныйОстаток,
	|	ТекущийОстаток КАК ТекущийОстаток,
	|	ОстатокСезонныхЗаказов КАК ОстатокСезонныхЗаказов,
	|	ОстатокЗапланированногоПрихода КАК ОстатокзапланированногоПрихода,
	|	НеобходимыйОбъемПеремещения КАК НеобходимыйОбъемПеремещения,
	|	СвободныйОстатокЯШТ КАК СвободныйОстатокЯШТ}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ВложенныйЗапрос.Номенклатура, ЕСТЬNULL(ВложенныйЗапрос1.Номенклатура, ВложенныйЗапрос2.Номенклатура)) КАК Номенклатура,
	|		ВложенныйЗапрос.ЗначениеТочкиЗаказа КАК ЗначениеТочкиЗаказа,
	|		ВложенныйЗапрос.Остаток КАК Остаток,
	|		ВложенныйЗапрос1.ЗаказаноПоСезонЗакПок - ВложенныйЗапрос1.Продано КАК ЗаказаноИНеОтгружено,
	|		ВложенныйЗапрос2.ЗаказаноСезонЗакПост - ВложенныйЗапрос2.УжеПришло КАК ЗакПостИНеПришло,
	|		ЕСТЬNULL(ВложенныйЗапрос.ЗначениеТочкиЗаказа, 0) - ВЫБОР
	|			КОГДА ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВложенныйЗапрос.Остаток, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ЕСТЬNULL(ВложенныйЗапрос1.ЗаказаноПоСезонЗакПок, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Продано, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВложенныйЗапрос1.ЗаказаноПоСезонЗакПок, 0) - ЕСТЬNULL(ВложенныйЗапрос1.Продано, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ЕСТЬNULL(ВложенныйЗапрос2.ЗаказаноСезонЗакПост, 0) - ЕСТЬNULL(ВложенныйЗапрос2.УжеПришло, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВложенныйЗапрос2.ЗаказаноСезонЗакПост, 0) - ЕСТЬNULL(ВложенныйЗапрос2.УжеПришло, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НеобходимыйОбъемЗакупки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЕСТЬNULL(ЗначенияТочкиЗаказа.Номенклатура, ТоварыНаСкладах.Номенклатура) КАК Номенклатура,
	|			СУММА(ЕСТЬNULL(ЗначенияТочкиЗаказа.ЗначениеТочкиЗаказа, 0)) КАК ЗначениеТочкиЗаказа,
	|			СУММА(ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0)) КАК Остаток
	|		ИЗ
	|			РегистрСведений.ЗначенияТочкиЗаказа.СрезПоследних(&ДатаКон, Подразделение = &ПодразделениеСезонное {(Подразделение).*, (Номенклатура).*}) КАК ЗначенияТочкиЗаказа
	|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|						&ДатаКон,
	|						Склад.Транзитный
	|							И (НЕ Склад.ЗапретитьИспользование)
	|							И Склад.Подразделение = &ПодразделениеСезонное {(Склад.Подразделение).* КАК Подразделение, (Номенклатура).*}) КАК ТоварыНаСкладах
	|				ПО (ТоварыНаСкладах.Номенклатура = ЗначенияТочкиЗаказа.Номенклатура)
	|					И (ТоварыНаСкладах.ХарактеристикаНоменклатуры = ЗначенияТочкиЗаказа.ХарактеристикаНоменклатуры)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЕСТЬNULL(ЗначенияТочкиЗаказа.Номенклатура, ТоварыНаСкладах.Номенклатура)) КАК ВложенныйЗапрос
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЗаказПокупателяСезонныйТовары.Номенклатура КАК Номенклатура,
	|				СУММА(ЕСТЬNULL(ЗаказПокупателяСезонныйТовары.Количество, 0)) КАК ЗаказаноПоСезонЗакПок,
	|				СУММА(ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)) КАК Продано
	|			ИЗ
	|				Документ.ЗаказПокупателяСезонный.Товары КАК ЗаказПокупателяСезонныйТовары
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Подразделение = &ПодразделениеСезонное) КАК ПродажиОбороты
	|					ПО ЗаказПокупателяСезонныйТовары.Номенклатура = ПродажиОбороты.Номенклатура
	|						И ЗаказПокупателяСезонныйТовары.Ссылка.Контрагент = ПродажиОбороты.ДоговорКонтрагента.Владелец
	|			ГДЕ
	|				ЗаказПокупателяСезонныйТовары.Ссылка.Подразделение = &ПодразделениеСезонное
	|				И ЗаказПокупателяСезонныйТовары.Ссылка.Проведен
	|				И ЗаказПокупателяСезонныйТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЗаказПокупателяСезонныйТовары.Номенклатура) КАК ВложенныйЗапрос1
	|			ПО ВложенныйЗапрос.Номенклатура = ВложенныйЗапрос1.Номенклатура
	|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПланЗакупок.Номенклатура КАК Номенклатура,
	|				МАКСИМУМ(ЕСТЬNULL(ПланЗакупок.КоличествоОборот, 0)) КАК ЗаказаноСезонЗакПост,
	|				СУММА(ЕСТЬNULL(ЗакупкиОбороты.КоличествоОборот, 0)) КАК УжеПришло
	|			ИЗ
	|				РегистрНакопления.ПланыЗакупок.Обороты(&ДатаНач, &ДатаКон, , Подразделение = &ПодразделениеСезонное {(Подразделение).*, (Номенклатура).*}) КАК ПланЗакупок
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&ДатаНач, &ДатаКон, , Подразделение = &ПодразделениеСезонное) КАК ЗакупкиОбороты
	|					ПО ПланЗакупок.Номенклатура = ЗакупкиОбороты.Номенклатура
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПланЗакупок.Номенклатура) КАК ВложенныйЗапрос2
	|			ПО ВложенныйЗапрос.Номенклатура = ВложенныйЗапрос2.Номенклатура) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) КАК СвободныйОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					&ДатаКон,
	|					(НЕ Склад.Транзитный)
	|						И (НЕ Склад.ЗапретитьИспользование)) КАК ТоварыНаСкладахОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаКон, (НЕ ЗаказПокупателя.Транзит)) КАК ЗаказыПокупателейОстатки
	|				ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыНаСкладахОстатки.Номенклатура) КАК ВложенныйЗапрос3
	|		ПО ВложенныйЗапрос.Номенклатура = ВложенныйЗапрос3.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.*}
	|ИТОГИ
	|	СУММА(МинимальныйОстаток),
	|	СУММА(ТекущийОстаток),
	|	СУММА(ОстатокСезонныхЗаказов),
	|	СУММА(ОстатокЗапланированногоПрихода),
	|	СУММА(НеобходимыйОбъемПеремещения),
	|	СУММА(СвободныйОстатокЯШТ)
	|ПО
	|	ОБЩИЕ
	|АВТОУПОРЯДОЧИВАНИЕ";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиАнализПотребностиВТовареОтчет_8da59c3f-4c79-4769-bc32-8d9744b1142b");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыСоздатьЗаказ(Кнопка)
	
	ФормаЗаказа = Документы.ЗаказПокупателя.ПолучитьФормуНовогоДокумента();
	ДокументОбъект=ФормаЗаказа.ДокументОбъект;
	
	//ДокументОбъект.ТипЦен=ТипЦен;
	
	ОтборПодразделение=ПодразделениеСезонное;
	
	ДокументОбъект.Подразделение = ПодразделениеСезонное;
	Если ОтборПодразделение.Код = "00106" тогда // это РнД
		Контрагент = справочники.Контрагенты.НайтиПоКоду("93187"); // 93187 = Филиал ЗАО ТК "Яршинторг" г. Ростов-на-Дону
	ИначеЕсли ОтборПодразделение.Код = "00112" тогда // это СПБ
		Контрагент = справочники.Контрагенты.НайтиПоКоду("П000835");
	ИначеЕсли ОтборПодразделение.Код = "00122" тогда // это ЕКТ
		Контрагент = справочники.Контрагенты.НайтиПоКоду("93801");
	иначе
		Контрагент = справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
	
	мВалютаРегламентированногоУчета = константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументОбъект.Контрагент 		  = Контрагент;
	ДокументОбъект.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
	
	ДокументОбъект.УчитыватьНДС    =Истина;
	ДокументОбъект.СуммаВключаетНДС=Истина;
   	ДокументОбъект.ВводитьТолькоПеремещение = Истина; //ФлагСезонныхЗаказов;
	// ДокументОбъект.транзит = ложь;  перемещение с ЯШТ на Филиал
	
   НомерКолонкиКод = 2;
   НомерКолонкиКоличество = 8; 
   НомерКолонкиСвОстаток  = 9; 
   
   таблДок = ЭлементыФормы.ПолеТабличногоДокумента;
   
   ПерваяСтрока 	= 5;
   ПоследняяСтрока  = таблДок.ВысотаТаблицы; // без итогов!
   
   Для сч=ПерваяСтрока по ПоследняяСтрока Цикл
	ЗначениеЯчейкиНоменклатура=таблДок.Область("R"+формат(сч,"ЧГ=0")+"C"+Строка(НомерКолонкиКод));		
	ЗначениеЯчейкиКоличество=таблДок.Область("R"+формат(сч,"ЧГ=0")+"C"+Строка(НомерКолонкиКоличество));		
	ЗначениеЯчейкиКСвОстаток=таблДок.Область("R"+формат(сч,"ЧГ=0")+"C"+Строка(НомерКолонкиСвОстаток));		
	
	Если ЗначениеЯчейкиНоменклатура.Текст="Итог" тогда
		прервать;
	КонецЕсли;	
		
	стрКоличество = СокрЛП(ЗначениеЯчейкиКоличество.Текст);
	Если стрКоличество="" тогда // не надо...
		продолжить;
	КонецЕсли;	
	стрСвОстаток = СокрЛП(ЗначениеЯчейкиКСвОстаток.Текст);
	Если стрСвОстаток="" тогда // не надо...
		продолжить;
	КонецЕсли;	
	
	строкаТовар=ДокументОбъект.Товары.Добавить();	
	Попытка
		КолЧисло1 = Число(ЗначениеЯчейкиКоличество.Текст);
		КолЧисло2 = Число(ЗначениеЯчейкиКСвОстаток.Текст);
		КолЧисло = мин(КолЧисло1, КолЧисло2);
		
		строкаТовар.Номенклатура= Справочники.Номенклатура.НайтиПоКоду(ЗначениеЯчейкиНоменклатура.Текст);
		строкаТовар.Количество	= КолЧисло;
		СтрокаТовар.Коэффициент = 1;
		// Заполняем реквизиты табличной части.
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТовар, ДокументОбъект, мВалютаРегламентированногоУчета); 
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТовар, ДокументОбъект); 
		СтрокаТовар.Сумма = СтрокаТовар.Количество * СтрокаТовар.Цена;
	Исключение
		Сообщить("Ошибка в строке № "+формат(сч,"ЧГ=0")+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
	КонецЦикла;	

	//ФормаЗаказа=Документы.ЗаказПоставщику.ПолучитьФормуНовогоДокумента();
	//ДокументОбъект=ФормаЗаказа.ДокументОбъект;
	//ДокументОбъект.УчитыватьНДС=Истина;
	//ДокументОбъект.СуммаВключаетНДС=Истина;
	//РезультатЗапроса = ОбщийОтчет.ПостроительОтчета.ПолучитьЗапрос().Выполнить();
	//ВыборкаОбщая = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ВыборкаОбщая.Следующий();
	//ВыборкаНоменклатура = ВыборкаОбщая.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаНоменклатура.Следующий() Цикл
	//	Если ВыборкаНоменклатура.НеобходимыйОбъемЗакупки>0 Тогда
	//	СтрокаТовар=ДокументОбъект.Товары.Добавить();
	//	СтрокаТовар.Номенклатура= ВыборкаНоменклатура.Номенклатура ;
	//	СтрокаТовар.Количество=ВыборкаНоменклатура.НеобходимыйОбъемЗакупки;
	//	СтрокаТовар.Коэффициент=1;
	//	СтрокаТовар.ЕдиницаИзмерения=ВыборкаНоменклатура.Номенклатура.ЕдиницаХраненияОстатков;
	//	//ПриИзмененииНоменклатурыТоваров(СтрокаТовар,ДокументОбъект);
	//	КонецЕсли;
	//КонецЦикла;	
       
	ФормаЗаказа.Открыть();
	
КонецПроцедуры






