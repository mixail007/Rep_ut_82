
Процедура ДействияФормыДействие(Кнопка)
	
	////срез последних для каждого контейнера
	//Запрос = Новый Запрос;
	////Запрос.Текст = "ВЫБРАТЬ
	////			   |	СрезПоследнихПоНомерамКонтейнеров.Номенклатура КАК Номенклатура,
	////			   |	СрезПоследнихПоНомерамКонтейнеров.ДатаПроверки КАК ДатаПроверки,
	////			   |	СрезПоследнихПоНомерамКонтейнеров.НомерКонтейнера КАК НомерКонтейнера,
	////			   |	ПровереннаяНагрузкаДисков.НомерПартии КАК НомерПартии,
	////			   |	ПровереннаяНагрузкаДисков.ТестПройден КАК ТестПройден,
	////			   |	ПровереннаяНагрузкаДисков.ПрошедшаяНагрузка КАК ПрошедшаяНагрузка
	////			   |ИЗ
	////			   |	(ВЫБРАТЬ
	////			   |		ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров.Номенклатура КАК Номенклатура,
	////			   |		МАКСИМУМ(ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров.Дата) КАК ДатаПроверки,
	////			   |		ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров.НомерКонтейнера КАК НомерКонтейнера
	////			   |	ИЗ
	////			   |		РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров
	////			   |	
	////			   |	СГРУППИРОВАТЬ ПО
	////			   |		ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров.Номенклатура,
	////			   |		ПровереннаяНагрузкаДисковСрезПоследнихДляРазличныхКонтейнеров.НомерКонтейнера) КАК СрезПоследнихПоНомерамКонтейнеров
	////			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
	////			   |		ПО СрезПоследнихПоНомерамКонтейнеров.Номенклатура = ПровереннаяНагрузкаДисков.Номенклатура
	////			   |			И СрезПоследнихПоНомерамКонтейнеров.ДатаПроверки = ПровереннаяНагрузкаДисков.Дата
	////			   |			И СрезПоследнихПоНомерамКонтейнеров.НомерКонтейнера = ПровереннаяНагрузкаДисков.НомерКонтейнера
	////			   |
	////			   |УПОРЯДОЧИТЬ ПО
	////			   |	Номенклатура,
	////			   |	ДатаПроверки
	////			   |ИТОГИ
	////			   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаПроверки),
	////			   |	МАКСИМУМ(НомерКонтейнера),
	////			   |	МАКСИМУМ(НомерПартии),
	////			   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТестПройден),
	////			   |	МАКСИМУМ(ПрошедшаяНагрузка)
	////			   |ПО
	////			   |	Номенклатура
	////			   |АВТОУПОРЯДОЧИВАНИЕ";
	////			   
	////ВыборкаНоменклатуры = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//			   |	ПровереннаяНагрузкаДисков.Номенклатура КАК Номенклатура
	//			   |ИЗ
	//			   |	РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
	//			   |ГДЕ
	//			   |	ПровереннаяНагрузкаДисков.ПрошедшаяНагрузка = 283
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	Номенклатура
	//			   |АВТОУПОРЯДОЧИВАНИЕ";
	//ТаблицаНоменклатурыДляВыводаОстатков	= Запрос.Выполнить().Выгрузить();		   
	//			   
	////ТаблицаНоменклатурыДляВыводаОстатков = Новый ТаблицаЗначений;
	////ТаблицаНоменклатурыДляВыводаОстатков.Колонки.Добавить("Номенклатура");
	////ТаблицаНоменклатурыДляВыводаОстатков.Колонки.Добавить("НомерКонтейнера");
	////
	////Пока ВыборкаНоменклатуры.Следующий() Цикл
	////	
	////	Если ВыборкаНоменклатуры.ДатаПроверки = 1 Тогда
	////		Если ВыборкаНоменклатуры.ПрошедшаяНагрузка <= 283 Тогда
	////			СтрТЗ = ТаблицаНоменклатурыДляВыводаОстатков.Добавить();
	////			СтрТЗ.Номенклатура = ВыборкаНоменклатуры.Номенклатура;
	////			СтрТЗ.НомерКонтейнера = ?(ВыборкаНоменклатуры.НомерКонтейнера = "", 0, ВыборкаНоменклатуры.НомерКонтейнера);
	////		КонецЕсли;	
	////	Иначе
	////		//часто не заполняют номер контейнера, поэтому сравниваем соседние првоерки по номеру партии
	////		ВыборкаДетали = ВыборкаНоменклатуры.Выбрать();
	////		Пока ВыборкаДетали.Следующий() Цикл
	////			Если ВыборкаДетали.ПрошедшаяНагрузка <= 283 Тогда
	////				Если НЕ ВыборкаДетали.НомерКонтейнера = "" Тогда
	////					СтрТЗ = ТаблицаНоменклатурыДляВыводаОстатков.Добавить();
	////					СтрТЗ.Номенклатура = ВыборкаДетали.Номенклатура;
	////					СтрТЗ.НомерКонтейнера = ВыборкаДетали.НомерКонтейнера;
	////				Иначе
	////					//такие не показываем в остатках, т.к. отчет не для внутреннего использования, а для клиентов
	////					Продолжить;
	////				КонецЕсли;
	////			КонецЕсли;
	////		КонецЦикла;
	////	КонецЕсли;
	////	
	////КонецЦикла;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаНоменклатурыДляВыводаОстатков.ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("СписокКонтейнеров", ТаблицаНоменклатурыДляВыводаОстатков.ВыгрузитьКолонку("НомерКонтейнера"));
	//Запрос.УстановитьПараметр("Пустая", Справочники.Подразделения.ПустаяСсылка());
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ВЫБОР
	//			   |		КОГДА ПартииТоваровНаСкладахОстатки.Склад.Подразделение = &Пустая
	//			   |			ТОГДА ""Ярославль""
	//			   |		ИНАЧЕ ПартииТоваровНаСкладахОстатки.Склад.Подразделение
	//			   |	КОНЕЦ КАК Подразделение,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Код КАК Код,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.Ширина КАК Ширина,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.Диаметр КАК Диаметр,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.КоличествоОтверстий КАК КоличествоОтверстий,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.PCD КАК PCD,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.Вылет КАК Вылет,
	//			   |	ПартииТоваровНаСкладахОстатки.Номенклатура.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы,
	//			   |	ПартииТоваровНаСкладахОстатки.КоличествоОстаток,
	//			   |	ПартииТоваровНаСкладахОстатки.ДокументОприходования.Сделка.НомерКонтейнера КАК НомерКонтейнера,
	//			   |	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / ПартииТоваровНаСкладахОстатки.КоличествоОстаток / ПартииТоваровНаСкладахОстатки.ДокументОприходования.КурсВзаиморасчетов КАК СебестоимостьЕдиницы
	//			   |ИЗ
	//			   |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	//			   |			,
	//			   |			Номенклатура В (&СписокНоменклатуры)
	//			   |				И ДокументОприходования.Сделка.НомерКонтейнера В (&СписокКонтейнеров)
	//			   |				И НЕ Склад.ЗапретитьИспользование) КАК ПартииТоваровНаСкладахОстатки
	//			   |ГДЕ
	//			   |	ПартииТоваровНаСкладахОстатки.КоличествоОстаток > 0";
	//ТабОстатков = Запрос.Выполнить().Выгрузить();	
	//
	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);	
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПроцессорВывода.НачатьВывод();
	Пока Истина Цикл
		ОбработкаПрерыванияПользователя();
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультата= Неопределено Тогда
			Прервать;
		Иначе
			Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда 
				
				ИмяПараметра_СсылкаНаФото = Неопределено;
								
				// Поскольку имена параметров зашиты как "П1, П2..." то нужно понять какой из них нам нужен
				// Для этого идем в макеты и ищем имя параметра в выражении к параметру
				Для каждого ПараметрМакета Из МакетКомпоновки.Макеты[ЭлементРезультата.Макет].Параметры Цикл
					
					Если ТипЗнч(ПараметрМакета) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
						
						Если Найти(ПараметрМакета.Выражение,"photo.yst.ru/allwheels") > 0 Тогда
							ИмяПараметра_СсылкаНаФото = ПараметрМакета.Имя;    
						КонецЕсли; 
												
					КонецЕсли;    
					
				КонецЦикла; 
				
				Если ИмяПараметра_СсылкаНаФото <> Неопределено Тогда
					
					// Заменяем значения поля на свои произвольные
					ЭлементРезультата.ЗначенияПараметров[ИмяПараметра_СсылкаНаФото].Значение = НРег(ЭлементРезультата.ЗначенияПараметров[ИмяПараметра_СсылкаНаФото].Значение);
											
				КонецЕсли; 
				
			КонецЕсли;
			
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры
