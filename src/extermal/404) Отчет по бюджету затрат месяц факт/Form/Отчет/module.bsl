Перем месяцдлявывода;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыОтчетПоБюджетуЗатратМесяцФактОтчет_32368574-c0b2-44fe-8096-f904eb4dbece", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести(ТДок=неопределено,ДатаНач=Неопределено,ДатаКон=Неопределено,Месяц=0) Экспорт 
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Если (ДатаНач<>Неопределено) и (ДатаКон<>Неопределено) Тогда 
		НачПериода = НачалоДня(ДатаНач);
		КонПериода = КонецДня(ДатаКон);		
	Иначе 
		Если (Полугодие=1) Тогда 
			НачПериода = НачалоГода(Дата(Формат(Год,"ЧГ=0")+"0101000000"));
			КонПериода = КонецМесяца(ДобавитьМесяц(НачПериода,5));
		Иначе 
			КонПериода = КонецГода(Дата(Формат(Год,"ЧГ=0")+"0101000000"));
			НачПериода = НачалоМесяца(ДобавитьМесяц(КонПериода,-6));
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("датакон", КонПериода);
	ПостроительОтчетаОтчет.Параметры.Вставить("датанач", НачПериода);
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц1",?(Полугодие=1,"Январь(руб.)","Июль(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц2",?(Полугодие=1,"Февраль(руб.)","Август(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц3",?(Полугодие=1,"Март(руб.)","Сентябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц4",?(Полугодие=1,"Апрель(руб.)","Октябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц5",?(Полугодие=1,"Май(руб.)","Ноябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц6",?(Полугодие=1,"Июнь(руб.)","Декабрь(руб.)"));
	
	Если Месяц<>0 Тогда 
		ПостроительОтчетаОтчет.Параметры.Вставить("Месяц",Месяц);	
	Иначе 
		ПостроительОтчетаОтчет.Параметры.Вставить("Месяц",месяцдлявывода);
	КонецЕсли;
	
	
	ПостроительОтчетаОтчет.ВыбранныеПоля.Очистить();
	ПостроительОтчетаОтчет.ВыбранныеПоля.Добавить("Ответственный");
	ПостроительОтчетаОтчет.ВыбранныеПоля.Добавить("Статья");
	ПостроительОтчетаОтчет.ВыбранныеПоля.Добавить("Сумма");
		
	ПостроительОтчетаОтчет.ИзмеренияСтроки.Очистить();
	ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Ответственный");
	ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Статья");	
		
	ПостроительОтчетаОтчет.Выполнить();
	//ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет по бюджету затрат за период с " + Формат(НачПериода,"ДЛФ=Д") + " по " + Формат(КонПериода,"ДЛФ=Д");
	ПостроительОтчетаОтчет.ВыводитьЗаголовокОтчета = ложь;
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Камень);
	Если ТДОК=неопределено  Тогда 
		ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
		РасчетШириныКолонок(ЭлементыФормы.ПолеТабличногоДокумента);
	Иначе 
		ПостроительОтчетаОтчет.Вывести(ТДок);
		РасчетШириныКолонок(ТДок);		
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация() ЭКспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
    	
	месяцдлявывода=1;
	
	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ЗатратыОбороты.СтатьяЗатрат.Ответственный как Ответственный,
	|	ЗатратыОбороты.СтатьяЗатрат как Статья,
	|	СУММА(ЗатратыОбороты.СуммаОборот) КАК Сумма
	|ИЗ
	|	РегистрНакопления.Затраты.Обороты(&Датанач, &Датакон, Регистратор, ) КАК ЗатратыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыОбороты.СтатьяЗатрат.Ответственный,
	|	ЗатратыОбороты.СтатьяЗатрат
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ,
	|	Ответственный,
	|	Статья";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыОтчетПоБюджетуЗатратМесяцФактОтчет_32368574-c0b2-44fe-8096-f904eb4dbece");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	Если не ЗначениеЗаполнено(Полугодие) Тогда 
		Если Месяц(ТекущаяДата())<6 Тогда 
			Полугодие = 1;
		Иначе 
			Полугодие = 2;
		Конецесли;
	КонецЕсли;
	
	Год = ГОД(текущаяДата());	
	
	Если ИзБюджета Тогда  
		ПостроительОтчетаОтчет.ИзмеренияСтроки.Очистить();
		ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Ответственный");
		ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Статья");

		ПостроительОтчетаОтчет.ИзмеренияКолонки.Очистить();
		ПостроительОтчетаОтчет.ИзмеренияКолонки.Добавить("Месяц");
	КонецЕсли;	
КонецПроцедуры

Процедура РасчетШириныКолонок(ТабличныйДокумент)
    
    Перем МаксимальноеКоличествоСтрок, МаксимальнаяШиринаКолонки;
    Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
    Перем ОбластьШапки, ОбластьПодвала;
    Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
    Перем КоличествоУровнейГруппировокСтрок, Отступ;
    Перем ШириныКолонок;
    
   // Максимальное количество строк отчета, которые будут использованы для расчета ширин колонок
 
    МаксимальноеКоличествоСтрок = 50;
   // Ограничение максимальной ширины колонки
 
    МаксимальнаяШиринаКолонки = 50;
   // Массив, в который будут помещаться ширины колонок
 
    ШириныКолонок = Новый Массив;
   // Получим количество уровней группировок в отчете для учета автоматического отступа
 
    КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
    
   // Инициализируем начальные строки
 
    НачальнаяСтрока = 0;
    НачалоДанных = 0;
    
   // Найдем в результирующем документе область шапки таблицы
 
    ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
    Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
        
       // Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
 
        НачальнаяСтрока = ОбластьШапки.Верх;
        НачалоДанных = ОбластьШапки.Низ + 1;
        
    Иначе
        
       // Если область шапки таблицы не найдена, найдем область шапки строк
 
        ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
        Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
            
           // Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
 
            НачальнаяСтрока = ОбластьШапки.Верх;
            НачалоДанных = ОбластьШапки.Низ + 1;
            
        КонецЕсли;
            
    КонецЕсли;
    
   // Получим область подвала отчета и вычислим конечную строку расчета
 
    ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
    Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
       // Область подвала найдена
 
        КонечнаяСтрока = ОбластьПодвала.Верх - 1;
        
        Если КонечнаяСтрока - НачальнаяСтрока > МаксимальноеКоличествоСтрок Тогда
            
            КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
            
        КонецЕсли;
        
    Иначе 
           // Область подвала не найдена
 
        КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
        
    КонецЕсли;
    
   // Ограничим конечную строку
 
    КонечнаяСтрока = Мин(КонечнаяСтрока, ТабличныйДокумент.ВысотаТаблицы);
    
   // Переберем все колонки отчета
 
    Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
        
        АвтоОтступ = 0;
        
       // Переберем строки, которые будут использованы для расчета ширин колонок
 
        Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
            
            ШиринаКолонки = 0;

           // Получим область текущей ячейки
 
            ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
            
            Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
                
               // Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
 
                Продолжить;
                
            КонецЕсли;
            
            Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
                
               // Для первой строки с данными получим значение автоотступа
 
                АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
                
            КонецЕсли;
            
           // Получим текст ячейки
 
            ТекстЯчейки = ОбластьЯчейки.Текст;
            
           // Для каждой строки из текста ячейки рассчитаем количество символов в строке
 
            Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
                
                ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
                
               // Если используется автоотступ, то прибавим к ширине ячейки его величину
 
                Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
                    
                    ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
                    
                КонецЕсли;
                
                ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);

            КонецЦикла;

            Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
                
               // Ограничим ширину колонки
 
                ШиринаКолонки = МаксимальнаяШиринаКолонки;
                
            КонецЕсли;
            
            Если ШиринаКолонки <> 0 Тогда
               // Ширина колонки рассчитана
 
                
               // Определим, сколько ячеек по ширине используется в области для текущей ячейки
 
                КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
                
               // Переберем все ячейки, расположенные в области
 
                Для НомерКолонки = 0 По КоличествоКолонок Цикл
                    
                    Если ШириныКолонок.ВГраница() > ТекущаяКолонка - 1 + НомерКолонки Тогда
                        
                       // В массиве ширин колонок уже был элемент для текущей колонки
 
                        
                        Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
                           // Значение ширины колонки еще не было установлено
 
                            
                            ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
                            
                        Иначе
                           // Значение ширины колонки уже было установлено
 
                           // Вычислим максимум ширины колонки
 
                            ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = 
                                Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
                            
                        КонецЕсли;
                        
                    Иначе
                        
                       // В массиве ширин колонок еще не было элемента для данной колонки
 
                       // Добавим элемент в массив ширин колонок
 
                        ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
                        
                    КонецЕсли;
                    
                КонецЦикла;
                
            КонецЕсли;
            
        КонецЦикла;   // Конец цикла перебора строк
 
        
    КонецЦикла;   // Конец цикла перебора колонок
 
    
   // Переберем все элементы в массиве вычисленных ширин колонок
 
    Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
        
        Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
           // Ширина колонок установлена
 
           // Установим ширину области ячеек
 
            ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
            
        КонецЕсли;
        
    КонецЦикла;

КонецПроцедуры

Процедура МесяцНажатие(Элемент)
	// Вставить содержимое обработчика.
	Месяцы = Новый СписокЗначений;
	Если Полугодие=1 Тогда 
		Месяцы.Очистить();
		Месяцы.Добавить("Январь");
		Месяцы.Добавить("Февраль");
		Месяцы.Добавить("Март");
		Месяцы.Добавить("Апрель");
		Месяцы.Добавить("Май");
		Месяцы.Добавить("Июнь");		
	Иначе
		Месяцы.Очистить();
		Месяцы.Добавить("Июль");
		Месяцы.Добавить("Август");
		Месяцы.Добавить("Сентябрь");
		Месяцы.Добавить("Октябрь");
		Месяцы.Добавить("Ноябрь");
		Месяцы.Добавить("Декабрь");				
	КонецЕсли;    
	МесяцВ= ВыбратьИзСписка(Месяцы,Элемент);					
	Если не (Строка(ТипЗнч(МесяцВ))=("Элемент списка значений")) Тогда 
		МесяцВ=Месяцы[0];
	КонецЕсли;
	
	Если (МесяцВ.Значение = "Январь") или (МесяцВ.Значение = "Июль") Тогда
		МесяцДляВывода= 1;
	ИначеЕсли (МесяцВ.Значение = "Февраль") или (МесяцВ.Значение = "Август") Тогда
		МесяцДляВывода= 2;
	ИначеЕсли (МесяцВ.Значение = "Март") или (МесяцВ.Значение = "Сентябрь") Тогда
		МесяцДляВывода= 3;
	ИначеЕсли (МесяцВ.Значение = "Апрель") или (МесяцВ.Значение = "Октябрь") Тогда
		МесяцДляВывода= 4;
	ИначеЕсли (МесяцВ.Значение = "Май") или (МесяцВ.Значение = "Ноябрь") Тогда
		МесяцДляВывода= 5;
	Иначе
		МесяцДляВывода= 6;			
	КонецЕсли;
	ЭлементыФормы.Месяц.Заголовок = МесяцВ;	
КонецПроцедуры

Процедура ОтчетВывестиИзвне() Экспорт 
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Если (Полугодие=1) Тогда 
		НачПериода = НачалоГода(Дата(Формат(Год,"ЧГ=0")+"0101000000"));
		КонПериода = КонецМесяца(ДобавитьМесяц(НачПериода,5));
	Иначе 
		КонПериода = КонецГода(Дата(Формат(Год,"ЧГ=0")+"0101000000"));
		НачПериода = НачалоМесяца(ДобавитьМесяц(КонПериода,-6));
	КонецЕсли;	
	
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("датакон", КонПериода);
	ПостроительОтчетаОтчет.Параметры.Вставить("датанач", НачПериода);
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц1",?(Полугодие=1,"Январь(руб.)","Июль(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц2",?(Полугодие=1,"Февраль(руб.)","Август(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц3",?(Полугодие=1,"Март(руб.)","Сентябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц4",?(Полугодие=1,"Апрель(руб.)","Октябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц5",?(Полугодие=1,"Май(руб.)","Ноябрь(руб.)"));
	ПостроительОтчетаОтчет.Параметры.Вставить("месяц6",?(Полугодие=1,"Июнь(руб.)","Декабрь(руб.)"));
	
	ПостроительОтчетаОтчет.Параметры.Вставить("Месяц",месяцдлявывода);
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет по бюджету затрат за период с " + Формат(НачПериода,"ДЛФ=Д") + " по " + Формат(КонПериода,"ДЛФ=Д");
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Камень);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
	
	
	
	РасчетШириныКолонок(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализацияИзвне() ЭКспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
    	
	месяцдлявывода=1;
	
	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	СЗ.Ответственный КАК Ответственный,
	|	СЗ.Ссылка КАК Статья,
	|	ВЫБОР
	|		КОГДА БюджетРасходов.месяц = 1
	|			ТОГДА &Месяц1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА БюджетРасходов.месяц = 2
	|					ТОГДА &Месяц2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА БюджетРасходов.месяц = 3
	|							ТОГДА &Месяц3
	|						ИНАЧЕ ВЫБОР
	|								КОГДА БюджетРасходов.месяц = 4
	|									ТОГДА &Месяц4
	|								ИНАЧЕ ВЫБОР
	|										КОГДА БюджетРасходов.месяц = 5
	|											ТОГДА &Месяц5
	|										ИНАЧЕ //ВЫБОР
	|												//КОГДА БюджетРасходов.месяц = 6
	|													&Месяц6
	|											//КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Месяц,
	|	БюджетРасходов.Подразделение КАК Подразделение,
	|	БюджетРасходов.Состояние КАК Состояние,
	|	СУММА(БюджетРасходов.Сумма) КАК Сумма
	|{ВЫБРАТЬ
	|	Ответственный.*,
	|	Статья.*,
	|	Месяц.*,
	|	Подразделение.*,
	|	Состояние.*,
	|	Сумма}
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			БюджетРасходов.Период КАК Период,
	|			БюджетРасходов.Регистратор КАК Регистратор,
	|			БюджетРасходов.НомерСтроки КАК НомерСтроки,
	|			БюджетРасходов.Месяц КАК месяц,
	|			БюджетРасходов.Активность КАК Активность,
	|			БюджетРасходов.Статья КАК Статья,
	|			БюджетРасходов.Подразделение КАК Подразделение,
	|			БюджетРасходов.Состояние КАК Состояние,
	|			БюджетРасходов.Сумма КАК Сумма
	|		ИЗ
	|			РегистрСведений.БюджетРасходовМесячный КАК БюджетРасходов
	|		ГДЕ
	|			БюджетРасходов.Регистратор.Дата МЕЖДУ &датанач И &датакон) КАК БюджетРасходов
	|		ПО СЗ.Ссылка = БюджетРасходов.Статья
	|ГДЕ
	|	НЕ СЗ.Ссылка.ПометкаУдаления  //{Где БюджетРасходов.месяц}
	|	И НЕ СЗ.ЭтоГруппа и БюджетРасходов.месяц=&Месяц
	|
	|СГРУППИРОВАТЬ ПО
	|	СЗ.Ответственный,
	|	СЗ.Ссылка,
	|	БюджетРасходов.месяц,
	|	БюджетРасходов.Подразделение,
	|	БюджетРасходов.Состояние
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ,
	|	Ответственный,
	|	Статья,
	|	месяц,
	|	Подразделение";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	//Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыОтчетПоБюджетуЗатратОтчет_32368574-c0b2-44fe-8096-f904eb4dbece");
	//Если Настройка <> Неопределено Тогда
	//	ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	//КонецЕсли;

	ПостроительОтчетаОтчет.ИзмеренияСтроки.Очистить();
	ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Ответственный");
	ПостроительОтчетаОтчет.ИзмеренияСтроки.Добавить("Статья");
	
	ПостроительОтчетаОтчет.ИзмеренияКолонки.Очистить();
	ПостроительОтчетаОтчет.ИзмеренияКолонки.Добавить("Месяц");
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры










