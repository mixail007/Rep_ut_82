перем нашиКоординаты, ТарифДоставки,ИмяПапки, ИмяФАЙЛАобр, ИмяЗаголовка, СписокПолейДляСохранения, ДатаФормирования;

перем фЕстьФлаги, флВыводитьСообщенияОЧастичнойОтгрузке, КолДнейНеважности;

перем мМассивПользователейКоторымРазрешеноСохранять, мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять;

перем мСписокОтгрузок, мСписокЗаказов;

//---------------------------Печать-------------------------------------

Процедура КнопкаВыполнитьНажатие(Кнопка)     // расчет кубатуры
    	Запрос = Новый Запрос;
Если неотгруженные Тогда		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	               |	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
	               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Артикул,
	               |	ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |			ТОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КолКамеры,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
	               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
	               |					ТОГДА ""нет""
	               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |			КОНЕЦ
	               |	КОНЕЦ КАК КоэффПересчета,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЕстьNull(НормыЗагрузки.НормаЗагрузки,0) = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |			КОНЕЦ
	               |	КОНЕЦ * ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КолПересчета,
	               |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	               |	ЕСТЬNULL(НормыЗагрузки.Ссылка, ""НЕТ"") КАК НормаЗагрузки,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Количество,
	               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Код,
	               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
	               |	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
		          |	ЕстьNull(ЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков.Объем,0) * ЗаказПокупателяТовары.Количество КАК Объем
       
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя В (&Заказы)) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
	               |			ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
	               |				И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
	               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
	               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка В(&Заказы)
	               |	И НЕ ЗаказПокупателяТовары.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки,
	               |	Контрагент,
	               |	Заказ
	               |ИТОГИ
	               |	СУММА(КолКамеры),
	               |	СУММА(КолПересчета),
	               |	СУММА(Количество),
	               |	СУММА(Объем)
	               |ПО
	               |	ОБЩИЕ,
	               |	Заказ
	               |АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("Дата", ЭлементыФормы.ДатаФормы.Значение);
иначе// все как было  - по всей табл.части
Запрос.Текст = "ВЫБРАТЬ
               |	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
               |	ЗаказПокупателяТовары.Ссылка КАК Заказ,
               |	ЗаказПокупателяТовары.Номенклатура,
               |	ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
               |	ВЫБОР
               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |			ТОГДА ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0)
               |		ИНАЧЕ 0
               |	КОНЕЦ КАК КолКамеры,
               |	ВЫБОР
               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
               |			ТОГДА 0
               |		ИНАЧЕ ВЫБОР
               |				КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
               |					ТОГДА ""нет""
               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
               |			КОНЕЦ
               |	КОНЕЦ КАК КоэффПересчета,
               |	ЕСТЬNULL(ВЫБОР
               |			КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |					ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
               |				ТОГДА 0
               |			ИНАЧЕ ВЫБОР
               |					КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
               |						ТОГДА 1
               |					ИНАЧЕ НормыЗагрузки.НормаЗагрузки
               |				КОНЕЦ
               |		КОНЕЦ * ЗаказПокупателяТовары.Количество, 0) КАК КолПересчета,
               |	ЗаказПокупателяТовары.Количество КАК Количество,
               |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Артикул,
               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
               |	ЕСТЬNULL(НормыЗагрузки.Ссылка, ""НЕТ"") КАК НормаЗагрузкиСсылка,
               |	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
               |	ЕстьNull(ЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков.Объем,0) * ЗаказПокупателяТовары.Количество КАК Объем
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
               |		ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
               |			И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка В(&Заказы)
               |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
               |
               |УПОРЯДОЧИТЬ ПО
               |	НомерСтроки,
               |	Контрагент,
               |	Заказ
               |ИТОГИ
               |	СУММА(КолКамеры),
               |	СУММА(КолПересчета),
               |	СУММА(Количество),
               |	СУММА(Объем)
               |ПО
               |	ОБЩИЕ,
               |	Заказ
               |АВТОУПОРЯДОЧИВАНИЕ";
КонецЕсли;				   
Запрос.УстановитьПараметр("Камеры", справочники.Номенклатура.НайтиПоКоду("0001127") ); //+++ 18.04.2012
Запрос.УстановитьПараметр("Крепеж", справочники.Номенклатура.НайтиПоКоду("0000701") ); //+++ 19.04.2012
				          
	//+++( Запрос.УстановитьПараметр("Заказы", Заказы.ВыгрузитьКолонку("Заказ") );
    Мас1 = новый массив;			   
	Для Каждого стр1 из Заказы Цикл
		Если стр1.Флаг или (не фЕстьФлаги) Тогда
			мас1.Добавить(стр1.Заказ);
		КонецЕсли;
	КонецЦикла;	
	Запрос.УстановитьПараметр("Заказы", мас1);
	//+++)
	
	Результат = Запрос.Выполнить(); //ИТОГИ
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ВнешняяОбработка_РасчетКубатуры";
	
	Макет = ПолучитьМакет("Макет");
	
	// Итоги 
 	Выборка.Следующий();
	ОбластьМакетаВсего = Макет.ПолучитьОбласть("ИтогоВсего");
	ОбластьМакетаВсего.Параметры.КолПересчета = Выборка.КолПересчета;
	ОбластьМакетаВсего.Параметры.Количество   = Выборка.Количество;
	ОбластьМакетаВсего.Параметры.Объем        = Выборка.Объем;
	
	ВыборкаЗаказ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
  	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗаказ");
	
	АдресаДоставки = Заказы.ВыгрузитьКолонку("АдресДоставки") ;
	ном=0; ВсегоВес = 0; 	ИтогСуммаДоставки = 0; 
	ИтогоКоличество=0;      ИтогоКолПересчета = 0;  ИтогоОбъем=0;
	
	пока ВыборкаЗаказ.Следующий() Цикл
    ОбластьМакета.Параметры.Контрагент =  ВыборкаЗаказ.Контрагент;
	ОбластьМакета.Параметры.НомерЗаказа = ВыборкаЗаказ.Заказ.Номер;
	
	//+++ 23.09.2013
	//ОбластьМакета.Параметры.ДатаОтгрузки = Формат( ?(ВыборкаЗаказ.Заказ.ДатаОтгрузки=Дата(1,1,1), ВыборкаЗаказ.Заказ.Дата + 30 * 86400, ВыборкаЗаказ.Заказ.ДатаОтгрузки), "ДЛФ=DD");
	ОбластьМакета.Параметры.ДатаОтгрузки = Формат( ?(ВыборкаЗаказ.Заказ.ДатаОтгрузки=Дата(1,1,1), КонецДня(ЭлементыФормы.ДатаФормы)+КолДнейНеважности*86400, ВыборкаЗаказ.Заказ.ДатаОтгрузки), "ДЛФ=DD");
	
	//Если СокрЛП(АдресаДоставки[ном])="" Тогда
	//	ОбластьМакета.Параметры.АдресДоставки = ВыборкаЗаказ.Заказ.АдресДоставки;
	//иначе
	//	ОбластьМакета.Параметры.АдресДоставки = АдресаДоставки[ном];
	//КонецЕсли;
	ном = ном+1;
	ТабДокумент.Вывести(ОбластьМакета);

	
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("ИтогоЗаказ");
	ОбластьМакетаИтого.Параметры.КолПересчета = ВыборкаЗаказ.КолПересчета;
	ОбластьМакетаИтого.Параметры.Количество   = ВыборкаЗаказ.Количество;
	ОбластьМакетаИтого.Параметры.Объем        = ВыборкаЗаказ.Объем;
		
  	 ПолныйВес = 0;  
	//тариф1 = ПолучитьТариф(ВыборкаЗаказ.Контрагент);
	// Если тариф1=0 Тогда
	//	 тариф1 = 0.00; //рублей
	// КонецЕсли;
	//Если тариф1>0 Тогда
	// СуммаДоставкиПоЗазазу =  тариф1 * ВыборкаЗаказ.КолПересчета;
	//иначе 
	// СуммаДоставкиПоЗазазу = -тариф1 * ВыборкаЗаказ.Количество;
	//КонецЕсли;

	//+++ добавка суммы достаки
	//стр2 = Заказы.Найти(ВыборкаЗаказ.Заказ, "Заказ");
	//Если стр2.СуммаДоставки > СуммаДоставкиПоЗазазу Тогда 
	//   delta = стр2.СуммаДоставки - СуммаДоставкиПоЗазазу;
	//   ОбластьМакетаИтого.Параметры.СуммаДоставки = строка(СуммаДоставкиПоЗазазу)+" + "+строка(delta);
	//Иначе
	//   delta = 0;
	//   ОбластьМакетаИтого.Параметры.СуммаДоставки = СуммаДоставкиПоЗазазу;
	//КонецЕсли;
		
	
	//----------------------------------------------------------------------------
		ВыборкаТовары = ВыборкаЗаказ.выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	    ОбластьМакетаСтр = Макет.ПолучитьОбласть("СтрокаТовар");
		пока ВыборкаТовары.Следующий() Цикл
			ОбластьМакетаСтр.Параметры.Заполнить(ВыборкаТовары);
			Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				Вес1 = ВыборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес * ВыборкаТовары.Количество;
			иначе
				Вес1 = 0;
			КонецЕсли;	
			ПолныйВес = ПолныйВес + Вес1;
			ОбластьМакетаСтр.Параметры.Вес = Формат(Вес1,"ЧДЦ=1");
		//	Если тариф1>0 Тогда  // тариф Для Заказа 1
		//		СуммаДоставки =  тариф1 * ВыборкаТовары.КолПересчета;
		//	иначе 
		//		СуммаДоставки = -тариф1 * ВыборкаТовары.Количество;
		//	КонецЕсли;
		//ОбластьМакетаСтр.Параметры.СуммаДоставки = СуммаДоставки;
	
 		ТабДокумент.Вывести(ОбластьМакетаСтр);
 		КонецЦикла;	
	//----------------------------------------------------------------------------
	  ОбластьМакетаИтого.Параметры.Вес = Формат(ПолныйВес,"ЧДЦ=1");
	  
	   ИтогоКоличество   = ИтогоКоличество   + ВыборкаЗаказ.Количество;
	   ИтогоОбъем		 = ИтогоОбъем		 + ВыборкаЗаказ.Объем;
	   попытка
		   ИтогоКолПересчета = ИтогоКолПересчета + ВыборкаЗаказ.КолПересчета;
	   исключение
	   КонецПопытки;
	//   ИтогСуммаДоставки = ИтогСуммаДоставки + СуммаДоставкиПоЗазазу + delta; // вцелом по заказам с учетом +++
	
       ВсегоВес = ВсегоВес + ПолныйВес;
	ТабДокумент.Вывести(ОбластьМакетаИтого);
		
	КонецЦикла;
	
	ОбластьМакетаВсего.Параметры.КолПересчета = ИтогоКолПересчета;
	ОбластьМакетаВсего.Параметры.Количество   = ИтогоКоличество;
	
	ОбластьМакетаВсего.Параметры.Вес = Формат(ВсегоВес, "ЧДЦ=0");
	ОбластьМакетаВсего.Параметры.Объем = ИтогоОбъем;
//	ОбластьМакетаВсего.Параметры.СуммаДоставки  = ИтогСуммаДоставки;
	ТабДокумент.Вывести(ОбластьМакетаВсего);
    ТабДокумент.ТолькоПросмотр      = Истина;
	ТабДокумент.Показать();
     	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечать2(Кнопка)
	//-----------------------------------------------------------------------------------
	ТабДокумент = новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ВнешняяОбработка_РасчетКубатуры_ИнформацияДляПоездки";

	Макет = ПолучитьМакет("МакетПроезд");
 	
	 Заказы2 = Заказы.Выгрузить(); 
	 
	 i=0;  N = Заказы2.Количество();
	пока i<N Цикл
		стр1 = Заказы2[i];
		Если (Не стр1.Флаг) Тогда //+++ 07.06.2012 по Флагу!!!  не фиксируем заказы без Флага!!!
	   		Заказы2.Удалить(i); N=N-1;
		иначе 
		    i=i+1;
		КонецЕсли;  
	КонецЦикла;
	
Заказы2.Свернуть("Точка, Контрагент, АдресДоставки, Ответственный, Флаг", "СуммаДоставки, Количество, Объем, Вес, Расстояние");
Заказы2.Сортировать("Точка, Контрагент");  // по точкам!

//---------Сборка номеров в 1 поле------
Заказы2.Колонки.Добавить("Номер");
Заказы2.Колонки.Добавить("Комментарий");//02.04.2014

       N = Заказы.Количество();
Для Каждого стр2 из Заказы2 Цикл
	
	СтрПоиска2 = Строка(стр2.Контрагент)+"-"+Строка(стр2.АдресДоставки)+"-"+Строка(стр2.Ответственный);
	номерНакл = "";
	коммент=""; //02.04.2014
	Кол = 0;
	Для i=0 по N-1 Цикл
		 стр1 = Заказы[i];
		Если (Не стр1.Флаг) Тогда
	   		продолжить;
		КонецЕсли;   
		
		СтрПоиска1 = Строка(стр1.Контрагент)+"-"+Строка(стр1.АдресДоставки)+"-"+Строка(стр1.Ответственный);
		Если СтрПоиска1 = СтрПоиска2 Тогда
			номерНакл = номерНакл  + Строка(стр1.Заказ.Номер)+", ";
			коммент = коммент + сокрЛП(стр1.Комментарий)+", "; //02.04.2014
			Кол = Кол + стр1.Количество;
		КонецЕсли;	
		
	КонецЦикла;	
	
	стр2.Номер = Лев(номерНакл, стрДлина(номерНакл) - 2);
	стр2.Комментарий = Лев(коммент, стрДлина(коммент) - 2); //02.04.2014
	стр2.Количество  = Кол;
КонецЦикла;	
 

//-------------Определение автомобиля---------------------------------
	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Автомобиль");
	ТаблЗнач1.Колонки.Добавить("ГосНомерАвтомобиля");
	ТаблЗнач1.Колонки.Добавить("Водитель");
	
	
	i=0;
	Для Каждого стр1 из Заказы Цикл
		Если фЕстьФлаги и (Не стр1.Флаг) Тогда  //+++
		  	продолжить;
		КонецЕсли; 
   
		Если ЗначениеЗаполнено(стр1.Заказ.МаркаАвтомобиля) или ЗначениеЗаполнено(стр1.Заказ.ГосНомерАвтомобиля) Тогда
		ТаблЗнач1.Добавить();
		стр2 = ТаблЗнач1[i];
		стр2.Автомобиль = стр1.Заказ.МаркаАвтомобиля;
		стр2.ГосНомерАвтомобиля = стр1.Заказ.ГосНомерАвтомобиля;
		i=i+1;
		иначеЕсли НЕ неотгруженные Тогда  // проверим по реализации
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслуг.Сделка,
			               |	РеализацияТоваровУслуг.Проведен,
			               |	РеализацияТоваровУслуг.ПометкаУдаления,
			               |	РеализацияТоваровУслуг.МаркаАвтомобиля,
			               |	РеализацияТоваровУслуг.ГосНомерАвтомобиля,
			               |	РеализацияТоваровУслуг.Водитель
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			               |ГДЕ
			               |	РеализацияТоваровУслуг.Сделка = &СсылкаЗаказ
			               |	И РеализацияТоваровУслуг.Проведен
			               |	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
			               |	И РеализацияТоваровУслуг.Сделка.ПометкаУдаления = ЛОЖЬ";
			Запрос.УстановитьПараметр("СсылкаЗаказ",стр1.Заказ);
	 		Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.МаркаАвтомобиля) или ЗначениеЗаполнено(Выборка.ГосНомерАвтомобиля) Тогда
				ТаблЗнач1.Добавить();
				стр2 = ТаблЗнач1[i];
				стр2.Автомобиль = СокрЛП(Выборка.МаркаАвтомобиля);
				стр2.ГосНомерАвтомобиля = СокрЛП(Выборка.ГосНомерАвтомобиля);
				  Если ЗначениеЗаполнено(Выборка.Водитель) Тогда
					Водитель1 = Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.Водитель);
					Если не (Водитель1 = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
					ЭтотОбъект.Водитель = Водитель1;	
					стр2.Водитель = Водитель1; 
					иначе 
					Сообщить("В реализации по Заказу "+Выборка.Сделка.Номер+" найден водитель: "+Выборка.Водитель);
					стр2.Водитель = ?(ЗначениеЗаполнено(ЭтотОбъект.Водитель), ЭтотОбъект.Водитель, Выборка.Водитель);
					конецЕсли;
				  иначе
					стр2.Водитель = ЭтотОбъект.Водитель;
				  конецЕсли;
				i=i+1;
				КонецЕсли;
			    КонецЦикла;
 			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Автомобиль, ГосНомерАвтомобиля, Водитель");//все телефоны вместе
	//------------------------
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	

    NNN = ТаблЗнач1.Количество();
	ОбластьМакета.Параметры.Водитель = "";
	ОбластьМакета.Параметры.ТелефонВодителя = "";
	Если NNN>0 Тогда // пустые тоже сворачиваются!
	ОбластьМакета.Параметры.Автомобиль = ТаблЗнач1[0].Автомобиль+"  "+ТаблЗнач1[0].ГосНомерАвтомобиля;
			  
		водитель111 = ЭтотОбъект.Водитель;  //физ.лицо уже обновлено...
		
		ОбластьМакета.Параметры.Водитель = ОбластьМакета.Параметры.Водитель + " "+водитель111;
		телВод = ПолучитьКонтактнуюИнформацию(водитель111); //телефон водителя!
		
		ОбластьМакета.Параметры.ТелефонВодителя = ОбластьМакета.Параметры.ТелефонВодителя + телВод;
		
		Если NNN>1 Тогда
		сообщить("В выбранных заказах найдено "+строка(NNN)+" автомобилей, но будет использован только 1-ый!", СтатусСообщения.Внимание);
        КонецЕсли;
	иначе
		ОбластьМакета.Параметры.Водитель = "Водитель: "+ СокрЛП(Водитель); 
		ОбластьМакета.Параметры.Автомобиль = СокрЛП(Автомобиль);
    	ОбластьМакета.Параметры.ТелефонВодителя = СокрЛП(ТелефонВодителя);
	КонецЕсли;
	
	//ОбластьМакета.Параметры.Дата = Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD"); по просьбе Неяскиной

	
	ТабДокумент.Вывести(ОбластьМакета);

	//------------------------
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаМенеджер");

	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Менеджер");
	i=0;
	Для Каждого стр1 из Заказы Цикл
		Если фЕстьФлаги и (Не стр1.Флаг) Тогда  //+++
		  	продолжить;
		КонецЕсли; 

		ТаблЗнач1.Добавить();
		стр2 = ТаблЗнач1[i];
		стр2.Менеджер = стр1.Заказ.Ответственный;
		i=i+1;
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Менеджер");//все телефоны вместе
	//---------------------------------------------------
		
	Для i=0 по ТаблЗнач1.Количество()-1 Цикл
		ОбластьМакета.Параметры.Менеджер = ТаблЗнач1[i].Менеджер;
		//-----------определение телефона-------------------------	
		Если ЗначениеЗаполнено(ТаблЗнач1[i].Менеджер.ФизЛицо) Тогда
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			значТел = "";
			Если рс<>неопределено Тогда
				значТел = рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
				
			//+++ сотовый	
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Сотовый") ); //22
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			Если рс<>неопределено Тогда
				значТел =значТел +"; "+рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			
			//+++ сотовый2	
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Сотовый 2") );//24
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			Если рс<>неопределено Тогда
				значТел =значТел +"; "+рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Телефон  = значТел;
		
		Иначе // по сотруднику
			сообщить("Для пользователя: "+ строка(ТаблЗнач1[i].Менеджер) +" - не установлено Физ.Лицо! Контактная информация - не доступна!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	конецЦикла;
	//----------------------------------------
    ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
    
	//------------------Основная таблица заказов----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");   НомерСтроки =1;
	СуммаВсего = 0; ИтогРасстояние = 0;   КолИтого = 0;  ОбъемИтого=0; ВесИтого = 0;
	Для i=0 по Заказы2.Количество()-1 Цикл
		
	Выборка = Заказы2[i];
	если НЕ выборка.Флаг тогда продолжить; КонецЕсли;
	ОбластьМакета.Параметры.Номер = Выборка.Номер;
	ОбластьМакета.Параметры.Контрагент = Выборка.Контрагент;
	ОбластьМакета.Параметры.Комментарий = СокрЛП(Выборка.Комментарий); //+++ 02.04.2014
	ОбластьМакета.Параметры.Менеджер   = Выборка.Ответственный;
	
	ОбластьМакета.Параметры.НомерСтроки = строка(Выборка.Точка)+" / "+строка(НомерСтроки);
	ОбластьМакета.Параметры.Количество = Выборка.Количество;  //+++
	ОбластьМакета.Параметры.Объем  = выборка.Объем;
	
	ОбластьМакета.Параметры.АдресТелефон = Выборка.АдресДоставки;//+" "+Выборка.Контрагент.ОсновноеКонтактноеЛицо;
	ОбластьМакета.Параметры.СуммаДоставки = Строка(Выборка.СуммаДоставки)+"р.";
    СуммаВсего = СуммаВсего + Выборка.СуммаДоставки;
	ИтогРасстояние = ИтогРасстояние + Выборка.Расстояние;
	КолИтого = КолИтого + Выборка.Количество; 
	ОбъемИтого = ОбъемИтого +  выборка.Объем;
	ВесИтого   = ВесИтого  + выборка.вес;	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = НомерСтроки+1;
	КонецЦикла;

	//------------------Конец----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	//СуммаВсего = Заказы2.Итог("СуммаДоставки"); // Сумма всего!
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию("руб.");
	ОбластьМакета.Параметры.СуммаДоставки = СуммаВсего;
	ОбластьМакета.Параметры.СуммаДоставкиПрописью = ЧислоПрописью(СуммаВсего, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	ОбластьМакета.Параметры.ИтогоКМ = Строка(ИтогРасстояние)+" км.";
	ОбластьМакета.Параметры.ОбъемИтого = ОбъемИтого;
	ОбластьМакета.Параметры.КолИтого = КолИтого;
	ОбластьМакета.Параметры.ВесИтого = формат(ВесИтого,"ЧДЦ=0");

	ОбластьМакета.Параметры.Комментарий = ЭтотОбъект.Комментарий;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.Показать();
КонецПроцедуры


//------------------------------------------------------------------

Процедура ЗаказыЗаказПриИзменении(Элемент)
	
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	
	ЗаполнитьСтроку(стр1);
	
КонецПроцедуры

Процедура ЗаказыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
		СтандартнаяОбработка = ЛОЖЬ;
	    дата0 = НачалоДня(ЭлементыФормы.ДатаФормы.Значение);
		
		список = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
		список.отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		список.отбор.Дата.ЗначениеС = дата0;
		список.отбор.Дата.ЗначениеПо = КонецДня(дата0);
		
		
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	Если стр1.Контрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
		//выборка = список.Выбрать(НачалоНедели(ТекущаяДата()),КонецНедели(ТекущаяДата()),новый структура("Контрагент",стр1.Контрагент));
		список.отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
		список.отбор.Контрагент.Значение = стр1.Контрагент;
		список.отбор.Контрагент.Использование = Истина; 
		
		Если ЗначениеЗаполнено(стр1.Заказ) Тогда
		список.НачальноеЗначениеВыбора = стр1.Заказ;
		
			Если стр1.Заказ.ДатаОтгрузки<>Дата(1,1,1) Тогда
				Если стр1.Заказ.ДатаОтгрузки<список.отбор.Дата.ЗначениеС Тогда
				список.отбор.Дата.ЗначениеС = началоДня(стр1.Заказ.Дата); 
				КонецЕсли;
				Если стр1.Заказ.ДатаОтгрузки>список.отбор.Дата.ЗначениеПо Тогда
				список.отбор.Дата.ЗначениеПо = КонецДня(стр1.Заказ.Дата); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		список.отбор.Дата.Использование = Истина;

	иначе	
		список.отбор.Дата.Использование = Истина;
	КонецЕсли;	

		стр1.Заказ = Список.ОткрытьМодально();
		ЗаказыЗаказПриИзменении(Элемент);
	
КонецПроцедуры

функция ДШвШД( Поле10 )
	запятая = найти(Поле10,",");
		если запятая>0 тогда
			Координаты2 = прав(Поле10, стрДлина(Поле10) - запятая)+","+ лев(Поле10, запятая-1);
        КонецЕсли;
	возврат Координаты2;
КонецФункции

Процедура КоманднаяПанель1Пересчет(Кнопка)
	
	Адрес0 = ДШвШД(НашиКоординаты);
	
	 //---------2-ое Заполнение значений строки------------------
	// Для Каждого стр1 из Заказы Цикл
	//	ЗаполнитьСтроку(стр1, ЛОЖЬ, неотгруженные); //адрес не трогаем
	//КонецЦикла;

	Если АдресИзИнтернета Тогда
		Контр = СписокПодразделений[0].Значение.Контрагент;
	
		Адрес1 = Адрес0;   Адрес2 = Адрес0;
		номТочки = 0;
		Заказы.Сортировать("Точка, Контрагент, Координаты");
		
		Для Каждого стр1 из Заказы Цикл
			если не стр1.Флаг тогда
				продолжить;
			КонецЕсли;
			
			если стр1.Точка>номТочки тогда
				номТочки = стр1.Точка;
				Адрес2 = ДШвШД(стр1.Координаты);
				
				рез = получитьМаршрут(Адрес1,Адрес2);
				стр1.Расстояние = рез.distance;
				Адрес1 = Адрес2;
			КонецЕсли;	
		КонецЦикла;
		
		Если Адрес2 = Адрес0 тогда
			Предупреждение("Проставьте номера точек и расположите их по возрастанию!", 30);
		иначе	
		рез = получитьМаршрут(Адрес2,Адрес0);
		резОбр = рез.distance;
		Сообщить("Обратный путь из последней точки (холостой пробег): "+строка(резОбр)+" км.");
		КонецЕсли;
	
	иначе	
		РассчитатьРасстояние();
	КонецЕсли;

    ПересчетКоличестваФлаг();
КонецПроцедуры

   
функция получитьМаршрут(Адрес1,Адрес2) экспорт
Соединение = Новый HTTPСоединение("maps.googleapis.com");
    //"http://maps.googleapis.com/maps/api/geocode/xml?address="+Адрес2
  //URL = "https://maps.yandex.ru/?origin="+стрЗаменить(к1, ",","%2C")+"&destination="+стрЗаменить(к2, ",","%2C")+"&rtt=auto&ll=45.902354%2C54.358468&z=5";
	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Ресурс = "/maps/api/directions/xml?origin="+Адрес1+"&destination="+Адрес2;
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	исключение
	КонецПопытки;	
	Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаXMLРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 
 i1 = найти(СтрокаXMLРезультат, "<status>");
 i2 = найти(СтрокаXMLРезультат, "</status>");
 Если i1>0 и i2>0 тогда
	 рез = сред(СтрокаXMLРезультат, i1+8, i2-i1-8);
	 сообщить("Результат: "+рез);
 КонецЕсли;	
 
 distance = 0;
 location = "";
 
// если рез<>"OK" тогда
 
 стр1 = СтрокаXMLРезультат;
  i = найти(стр1, "</step>");
  //... step... пропускаем
  пока i>0 цикл
  стр1 = прав(стр1, стрДлина(стр1)-i-6);	  
  i = найти(стр1, "</step>");
  КонецЦикла;

  i = найти(стр1, "<distance>");
  Если i>0 тогда
	  стр1 = прав(стр1, стрДлина(стр1)-i-9);	
	  i1 = найти(стр1, "<value>");
	  i2 = найти(стр1, "</value>");
	distanceText = сред(стр1, i1+7, i2-i1-7);  
	
	сообщить( "distance = "+distanceText+" м");
	
	попытка
		distance = ОКР( число(distanceText)/1000, 0);	 // округляем до КМ
//		сообщить(" = "+строка(distance)+" км.");
	исключение
		distance = 0;
	КонецПопытки;
	
//  <distance>
 //   <value>1355034</value>   //в метрах!
 //   <text>1,355 km</text>
//  </distance>
	
  КонецЕсли;

 i = найти(стр1, "<end_location>");
 Если i>0 тогда
	 стр1 = прав(стр1, стрДлина(стр1)-i-13);
	 
	  i1 = найти(стр1, "<lat>");
	  i2 = найти(стр1, "</lat>");
	ш = сред(стр1, i1+5, i2-i1-5);  
	  i1 = найти(стр1, "<lng>");
	  i2 = найти(стр1, "</lng>");
	д = сред(стр1, i1+5, i2-i1-5);  
	
	location = д+","+ш;
КонецЕсли;	
  
//КонецЕсли;//если ОК
 рез = новый Структура;
 рез.Вставить("distance", distance);
 рез.Вставить("location", location);
 
 возврат рез;
 
 КонецФункции



Процедура ЗаказыКоординатыОткрытие(Элемент, СтандартнаяОбработка)
	
Если АдресИзИнтернета Тогда
	СтандартнаяОбработка=Ложь;
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	
	Поле10 = стр1.Координаты;
	Если сокрлп(Поле10)<>"" тогда //13.04.2018
		запятая = найти(Поле10,",");
		если запятая>0 тогда
			Координаты2 = прав(Поле10, стрДлина(Поле10) - запятая)+","+ лев(Поле10, запятая-1);
			URL= "https://maps.yandex.ru/?ll="+Поле10+"&spn=2.124481,0.671008&z=16&l=map&pt="+Поле10+",pmrdm1";

			//URL="https://www.google.ru/maps/place/"+стр1.Заказ.АдресДляТТН+"/@"+Координаты2+",14z";   //14 - еще видны дома
		иначе
			URL="https://www.google.ru/maps/place/"+стр1.Заказ.АдресДляТТН;
		КонецЕсли;	
		ЗапуститьПриложение(URL);	
	
	Иначе//--------------------------------------------------------------	
			ОбработанныйАдрес = "";
			ОбработанныйАдрес = ОбработатьАдрес(стр1.АдресДоставки);

		попытка
			
		 IE=Новый COMОбъект("InternetExplorer.Application"); 
	     IE.Navigate("http://maps.google.com/maps?f=q&source=s_q&hl=ru&q=Russia,"+ОбработанныйАдрес);  //+стр1.АдресДоставки+
		//Если IE.LocationName<>"" Тогда
		    IE.Visible = Истина;
	 	 //КонецЕсли;
		 
	  	исключение
		  сообщить("Ошибка получения карты! Возможно у Вас нет доступа в Интернет!");
		КонецПопытки;	
	КонецЕсли;
	
 КонецЕсли;

КонецПроцедуры

   
//------------------------------------------------------------------

 Процедура ОсновныеДействияФормыМаршрут(Кнопка)
	 
 
	 //таблица точек меньше, чем заказов....
	 Заказы2 = новый ТаблицаЗначений;
	 Заказы2.Колонки.Добавить("Точка");
	 Заказы2.Колонки.Добавить("Контрагент");
	 Заказы2.Колонки.Добавить("АдресДоставки");
	 Заказы2.Колонки.Добавить("Координаты");
	 Для i=1 по Заказы.Количество() Цикл
		 Заказы2.Добавить();
	 КонецЦикла;	
	 Заказы2 = Заказы.Выгрузить();
	 
	 Если (фЕстьФлаги) Тогда
			j=0; N = Заказы2.Количество();  АД="";
			пока j<N Цикл
				Если не Заказы2[j].флаг 
					или АД=Заказы2[j].Координаты 
					или СокрЛП(Заказы2[j].Координаты)="" Тогда
				Заказы2.Удалить(j); N=N-1;
				Иначе 
				АД=Заказы2[j].Координаты;
				j=j+1; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
    Заказы2.Свернуть("Контрагент, АдресДоставки, Координаты, Точка");
	Заказы2.Сортировать("Точка");
	 
    i= найти(нашиКоординаты,",");
	Долгота = лев(нашиКоординаты,i-1);
	Широта  = прав(нашиКоординаты, стрДлина(нашиКоординаты)-i);
    rtext0 = Широта+"%2C"+Долгота;
	rtext   = rtext0;   
	срКоордД = Долгота;  срКоордШ = Широта; n=1;
	
	для каждого стр1 из Заказы2 цикл 
		если стр1.Координаты<>"" тогда
	        i= найти(стр1.Координаты,",");
			Долгота = лев(стр1.Координаты,i-1);
			Широта  = прав(стр1.Координаты, стрДлина(стр1.Координаты)-i);
			rtext =  rtext+"~"+Широта+"%2C"+Долгота; // наоборот! 
			попытка 
			срКоордД = ОКР( ( n*число(срКоордД)+число(Долгота) )/(n+1), 6);
		    срКоордШ = ОКР( ( n*число(срКоордШ)+число(Широта) )/(n+1) , 6);
			исключение
			сообщить("Невозможно преобразовать в число Широту или Долготу: "+стр1.Координаты);
			КонецПопытки;
			 n=n+1;
		КонецЕсли;  
    КонецЦикла; 
    rtext =  rtext+"~"+rtext0;
	срКоорд =формат(срКоордД,"ЧРД=.")+"%2C"+формат(срКоордШ,"ЧРД=."); //НАОБОРОТ!	
	URL = "https://maps.yandex.ru/?ll="+срКоорд+"&rtext=" +rtext+ "&rtt=auto&z=9&mode=routes";         
	ЗапуститьПриложение(URL);	
	 
		 
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		возврат "";
	КонецЕсли;	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтактнаяИнформация.Представление,
               |	КонтактнаяИнформация.Вид
               |ИЗ
               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
               |ГДЕ
               |	КонтактнаяИнформация.Объект = &Объект
               |	И КонтактнаяИнформация.Тип = &Тип";

Запрос.УстановитьПараметр("Объект", Об1);
Если тип="Телефон" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	Тип1="Тел: ";
иначеЕсли тип="Другое" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
	Тип1="Доп.инфо: ";
КонецЕсли;
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
рез = "";
Если Выборка.Следующий() Тогда
	Если Строка(Выборка.Вид) = "Автомобиль" Тогда
		Тип1="Автомобиль: ";
	КонецЕсли;	
рез = рез + выборка.Представление;
КонецЕсли;

ПОКА Выборка.Следующий() ЦИКЛ
рез = рез + ", "+выборка.Представление;
КонецЦикла;

возврат рез;

КонецФункции	


Процедура ЗаписатьМаршрутВТЧ()
	опМаршрут = ЭлементыФормы.Карта.Документ.getElementByID("directions_panel");
Если опМаршрут<>Неопределено Тогда
	Если опМаршрут.innerHTML <> "" Тогда
		ОтключитьОбработчикОжидания("ЗаписатьМаршрутВТЧ");
		Выполнить(опМаршрут.innerHTML);
	КонецЕсли;
КонецЕсли;
КонецПроцедуры

Процедура опЗаполнитьМаршрут(Точка,КонТочка,НачАдрес,КонАдрес,опРасстояние)
	
	Табл1 = Заказы.Выгрузить();
	Табл1.Свернуть("Контрагент, Координаты");
	i=1;
	Для Каждого Стр Из Табл1 Цикл
		Если Символ(64+i) = Точка Тогда
		Стр2 = Заказы.Найти(стр.Контрагент, "Контрагент");
		Стр2.Точка 	   = КодСимвола(Точка)-64;	
			Если i>1 и i<Табл1.Количество() Тогда
			опРасстояние = стрЗаменить(опРасстояние,",",".");
			опРасстояние = стрЗаменить(опРасстояние,"км","");
			Если Найти(опРасстояние,"м")>0 Тогда   //метры в километры!!!
				опРасстояние = опРасстояние;
				опРасстояние = СокрЛП(стрЗаменить(опРасстояние,"м",""));
				 опРасстояние = строка( число(опРасстояние)/1000 );
			КонецЕсли;	
			
			Стр2.Расстояние = Окр( ?(опРасстояние="",0, Число(опРасстояние)), 0); // до 1 КМ
			сообщить("Расстояние от "+Символ(64+i-1)+"("+Табл1[i-2].Контрагент+") до "+Символ(64+i)+"("+стр.Контрагент+") изменено с "+Стр2.Расстояние+" на "+опРасстояние, СтатусСообщения.Информация);
			
				Если Стр2.Расстояние>600 Тогда
				Сообщить("Расстояние от "+Символ(64+i-1)+"("+Табл1[i-2].Контрагент+") до "+Символ(64+i)+"("+стр.Контрагент+") - слишком велико ("+Строка(Стр2.Расстояние)+"км.)!!! Возможно неверно определены координаты...", СтатусСообщения.Внимание);
				иначеЕсли Стр2.Расстояние<0.5 Тогда
				Сообщить("Расстояние от "+Символ(64+i-1)+"("+Табл1[i-2].Контрагент+") до "+Символ(64+i)+"("+стр.Контрагент+") - очень мало ("+Строка(Стр2.Расстояние)+" км.)!", СтатусСообщения.Информация);
				Стр2.Расстояние = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	i=i+1;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1Кубатура(Кнопка)
		
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
               |	НормыЗагрузки.НормаЗагрузки,
               |	НормыЗагрузки.Ссылка
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
               |		ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
               |			И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка В (&Заказы)
               |	И НормыЗагрузки.ПометкаУдаления = ЛОЖЬ
               |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";

			   
мас = новый массив;
Для Каждого стр1 из Заказы Цикл
	Если стр1.Флаг Тогда
		мас.Добавить(стр1.Заказ);
	КонецЕсли;
КонецЦикла;	
   списЗак = новый СписокЗначений;
   списЗак.ЗагрузитьЗначения( мас );
Запрос.УстановитьПараметр("Заказы", списЗак );

Результат = Запрос.Выполнить();
Выборка = Результат.Выгрузить();

	Форма1 = ЭтотОбъект.ПолучитьФорму("ФормаНормы", ЭтаФорма);//Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	
	попытка
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.ВидСравнения = ВидСравнения.ВСписке;
	//
	//-----------------------свертка Видов----------------------
	нов1 = новый ТаблицаЗначений; // свернем
	нов1.Колонки.Добавить("ВидТовара");	
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.ЗагрузитьКолонку(Выборка.ВыгрузитьКолонку("ВидТовара") ,"ВидТовара");
	нов1.Свернуть("ВидТовара");
	Если нов1.Количество()>0 Тогда
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.ВидСравнения = ВидСравнения.ВСписке;
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.Значение.ЗагрузитьЗначения( нов1.ВыгрузитьКолонку("ВидТовара") );
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.Использование = Истина;
	КонецЕсли;
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.Значение = перечисления.ВидыТоваров.Шины;
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.Использование = Истина;
	
	нов1 = новый ТаблицаЗначений; // свернем
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.Колонки.Добавить("Типоразмер");	
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.ЗагрузитьКолонку(Выборка.ВыгрузитьКолонку("Типоразмер") ,"Типоразмер");
	нов1.Свернуть("Типоразмер");
	Если нов1.Количество()>0 Тогда
		Форма1.НормыЗагрузки.Отбор.Типоразмер.ВидСравнения = ВидСравнения.ВСписке;
		Форма1.НормыЗагрузки.Отбор.Типоразмер.Значение.ЗагрузитьЗначения( нов1.ВыгрузитьКолонку("Типоразмер") );
		Форма1.НормыЗагрузки.Отбор.Типоразмер.Использование = Истина;
	КонецЕсли;

	Форма1.НормыЗагрузки.Порядок.Установить("Типоразмер");
	
	исключение
	конецПопытки;
	
   	Форма1.Открыть();

КонецПроцедуры

Процедура ДатаФормыПриИзменении(Элемент)
	
	ДатаФормы = ТекущаяДата(); //+ КолДнейНеважности *86400;   //+++ 16.05.2012
	
	//	флВыводитьСообщенияОЧастичнойОтгрузке = Истина;

	ЭлементыФормы.ДатаФормы.Значение = КонецДня(ЭлементыФормы.ДатаФормы.Значение);
	Если Заказы.Количество()>0 Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Удалить текущую таблицу?", РежимДиалогаВопрос.ДаНет, 10, ответ,"Обновить таблицу заказов");
		Если (Ответ = КодВозвратаДиалога.да) Тогда
		Заказы.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение;
	 	 
	 Запрос = Новый Запрос;
	 
Если не неотгруженные Тогда//+++ 10.10.2011
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	РегСв.Объект,
	                |	РегСв.Значение
	                |ПОМЕСТИТЬ ВТ_Заказы
	                |ИЗ
	                |	РегистрСведений.ЗначенияСвойствОбъектов КАК РегСв
	                |ГДЕ
	                |	РегСв.Свойство = &Свойство
	                |	И РегСв.Значение В(&Значение)
	                |	И РегСв.Объект.Транзит
	                |	И РегСв.Объект.Проведен
	                |	И РегСв.Объект.ДатаОтгрузки МЕЖДУ &ДатаОтгрузки0 И &ДатаОтгрузки1
	                |	И РегСв.Объект.Подразделение В(&СписокПодразделений)
	                |	И РегСв.Объект ССЫЛКА Документ.ЗаказПокупателя
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                |	ЗаказПокупателя.Контрагент КАК Контрагент,
	                |	ЗаказПокупателя.Ссылка КАК Заказ,
	                |	ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК Ответственный,
	                |	ЗаказПокупателя.СуммаДокумента КАК Сумма,
	                |	ЗаказПокупателя.ДатаОтгрузки,
					|	выразить(ЗаказПокупателя.АдресДоставки как строка(500)) как АдресДоставки,
	                |	ЗначенияСвойствОбъектов.Значение
	                |ИЗ
	                |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ЗначенияСвойствОбъектов
	                |		ПО (ЗначенияСвойствОбъектов.Объект = ЗаказПокупателя.Ссылка)
	                |ГДЕ
	                |	ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаОтгрузки0 И &ДатаОтгрузки1
	                |	И ЗаказПокупателя.Транзит
	                |	И ЗаказПокупателя.Подразделение В(&СписокПодразделений)
	                |	И ЗаказПокупателя.Проведен
	                |	И ЗначенияСвойствОбъектов.Значение В(&Значение)";
иначе  //неотгруженные всегда!

		 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	РегСв.Объект,
		                |	РегСв.Значение
		                |ПОМЕСТИТЬ ВТ_Заказы
		                |ИЗ
		                |	РегистрСведений.ЗначенияСвойствОбъектов КАК РегСв
		                |ГДЕ
		                |	РегСв.Свойство = &Свойство
		                |	И РегСв.Значение В(&СписокИсключенийМожно)
		                |	И РегСв.Объект.Проведен
		                |	И РегСв.Объект.Транзит
		                |	И РегСв.Объект.Подразделение В(&СписокПодразделений)
		                |	И РегСв.Объект ССЫЛКА Документ.ЗаказПокупателя
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
		                |	ЗаказыПокупателейОстатки.Номенклатура,
		                |	ЗаказыПокупателейОстатки.КоличествоОстаток
		                |ПОМЕСТИТЬ ЗаказОСт
		                |ИЗ
		                |	РегистрНакопления.ЗаказыПокупателей.Остатки(
		                |			,
		                |			ЗаказПокупателя.Транзит
		                |				И ЗаказПокупателя.Подразделение В (&СписокПодразделений)) КАК ЗаказыПокупателейОстатки
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	ЗаказыМаршруты.ЗаказПокупателя КАК Объект,
		                |	ЗаказыМаршруты.Маршрут КАК Значение,
		                |	ЗаказыМаршруты.Дата
		                |ПОМЕСТИТЬ Маршруты
		                |ИЗ
		                |	РегистрСведений.ЗаказыМаршруты КАК ЗаказыМаршруты
		                |ГДЕ
		                |	ЗаказыМаршруты.ЗаказПокупателя В
		                |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		                |				зак.ЗаказПокупателя
		                |			ИЗ
		                |				ЗаказОСт КАК зак)
		                |	И НЕ ЗаказыМаршруты.ЗаказПокупателя В
		                |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		                |					Категории.Объект
		                |				ИЗ
		                |					РегистрСведений.значениясвойствОбъектов КАК Категории
		                |				ГДЕ
		                |					Категории.Значение В (&списокисключений))
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                |	ЗаказОСт.ЗаказПокупателя КАК Заказ,
		                |	ЗаказОСт.ЗаказПокупателя.Контрагент КАК Контрагент,
		                |	ЗаказОСт.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК Ответственный,
		                |	ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) КАК Количество,
		                |	ВЫБОР
		                |		КОГДА ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Камеры)
		                |			ТОГДА ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0)
		                |		ИНАЧЕ 0
		                |	КОНЕЦ КАК КолКамеры,
		                |	ВЫБОР
		                |		КОГДА ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Камеры)
		                |				ИЛИ ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Крепеж)
		                |			ТОГДА 0
		                |		ИНАЧЕ ВЫБОР
		                |				КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
		                |					ТОГДА ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Объем / 0.033
		                |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
		                |			КОНЕЦ
		                |	КОНЕЦ * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) КАК Кубатура,
		                |	ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Вес * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) КАК Вес,
		                |	ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Объем * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) КАК Объем,
		                |	ЗаказОСт.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		                |	ЗаказОСт.Номенклатура,
		                |	ЗначенияСвойствОбъектов.Значение,
		                |	ВложенныйЗапрос.Комментарий,
		                |	ЗаказОСт.ЗаказПокупателя.Дата КАК Дата,
		                |	ВЫРАЗИТЬ(ЗаказОСт.ЗаказПокупателя.АдресДоставки КАК СТРОКА(500)) КАК АдресДоставки
		                |ИЗ
		                |	ЗаказОСт КАК ЗаказОСт
		                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ЗначенияСвойствОбъектов
		                |		ПО ЗаказОСт.ЗаказПокупателя = ЗначенияСвойствОбъектов.Объект
		                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
		                |		ПО ЗаказОСт.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
		                |			И ЗаказОСт.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
		                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                |			ИнформацияПоПроезду.Заказ КАК Заказ,
		                |			ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(500)) КАК Комментарий
		                |		ИЗ
		                |			РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
		                |		ГДЕ
		                |			ИнформацияПоПроезду.Заказ.Подразделение В(&СписокПодразделений)
		                |			И ИнформацияПоПроезду.Заказ.Проведен
		                |			И ИнформацияПоПроезду.Заказ.Проверен) КАК ВложенныйЗапрос
		                |		ПО ЗаказОСт.ЗаказПокупателя = ВложенныйЗапрос.Заказ
		                |ГДЕ
		                |	ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) > 0
		                |	И ЗначенияСвойствОбъектов.Значение В(&СписокИсключенийМожно)
		                |
		                |ОБЪЕДИНИТЬ ВСЕ
		                |
		                |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                |	ЗаказОСт.ЗаказПокупателя,
		                |	ЗаказОСт.ЗаказПокупателя.Контрагент,
		                |	ЗаказОСт.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо,
		                |	ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0),
		                |	ВЫБОР
		                |		КОГДА ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Камеры)
		                |			ТОГДА ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0)
		                |		ИНАЧЕ 0
		                |	КОНЕЦ,
		                |	ВЫБОР
		                |		КОГДА ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Камеры)
		                |				ИЛИ ЗаказОСт.Номенклатура В ИЕРАРХИИ (&Крепеж)
		                |			ТОГДА 0
		                |		ИНАЧЕ ВЫБОР
		                |				КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
		                |					ТОГДА ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Объем / 0.033
		                |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
		                |			КОНЕЦ
		                |	КОНЕЦ * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0),
		                |	ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Вес * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0),
		                |	ЗаказОСт.Номенклатура.ЕдиницаХраненияОстатков.Объем * ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0),
		                |	ЗаказОСт.ЗаказПокупателя.ДатаОтгрузки,
		                |	ЗаказОСт.Номенклатура,
		                |	Маршруты.Значение,
		                |	ВложенныйЗапрос.Комментарий,
		                |	ЗаказОСт.ЗаказПокупателя.Дата,
		                |	ВЫРАЗИТЬ(ЗаказОСт.ЗаказПокупателя.АдресДоставки КАК СТРОКА(500)) как АдресДоставки
		                |ИЗ
		                |	ЗаказОСт КАК ЗаказОСт
		                |		ЛЕВОЕ СОЕДИНЕНИЕ Маршруты КАК Маршруты
		                |		ПО ЗаказОСт.ЗаказПокупателя = Маршруты.Объект
		                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
		                |		ПО ЗаказОСт.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
		                |			И ЗаказОСт.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
		                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                |			ИнформацияПоПроезду.Заказ КАК Заказ,
		                |			ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(500)) КАК Комментарий
		                |		ИЗ
		                |			РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
		                |		ГДЕ
		                |			ИнформацияПоПроезду.Заказ.Подразделение В(&СписокПодразделений)
		                |			И ИнформацияПоПроезду.Заказ.Проведен
		                |			И ИнформацияПоПроезду.Заказ.Проверен) КАК ВложенныйЗапрос
		                |		ПО ЗаказОСт.ЗаказПокупателя = ВложенныйЗапрос.Заказ
		                |ГДЕ
		                |	ЕСТЬNULL(ЗаказОСт.КоличествоОстаток, 0) > 0
		                |	И Маршруты.Значение В(&СписокМаршрутов)
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	Контрагент,
		                |	ДатаОтгрузки,
		                |	Дата,
		                |	Ответственный";
					  
Запрос.УстановитьПараметр("Камеры", справочники.Номенклатура.НайтиПоКоду("0001127") );	//+++ 18.04.2012					
Запрос.УстановитьПараметр("Крепеж", справочники.Номенклатура.НайтиПоКоду("0000701") );  //+++ 19.04.2012

КонецЕсли;

Список = Новый СписокЗначений;
	для каждого стрСп Из Маршруты Цикл
		если стрСп.Пометка Тогда
		    Список.Добавить(стрСп.Маршрут);
		КонецЕсли;
	КонецЦикла;
	
Запрос.УстановитьПараметр("СписокМаршрутов", Список);

СписокКатегорийИсключений = Новый СписокЗначений;     //Всегда исключаем из маршрутов те которые на дпд
СписокКатегорийМожно = Новый СписокЗначений;  //12.01.2018
    
если DPD Тогда         //Если галка DPD, то ищем по галке дпд
	СписокКатегорийМожно.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("Пу042"));	
	СписокКатегорийМожно.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("b0099"));
Иначе
	СписокКатегорийИсключений.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("Пу042"));	
	СписокКатегорийИсключений.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("b0099"));
КонецЕсли;

если флПВФилиал Тогда         //Если галка ПВ, то ищем по галке ПВ
	СписокКатегорийМожно.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("Пу117"));	
Иначе
	СписокКатегорийИсключений.Добавить(Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("Пу117"));	
КонецЕсли;



Запрос.УстановитьПараметр("СписокИсключенийМожно",СписокКатегорийМожно);
Запрос.УстановитьПараметр("СписокИсключений",СписокКатегорийИсключений);



//---------------Свойство!--------------------
Запрос.УстановитьПараметр("Свойство", НаправлениеПродаж );	// только 1	

если НЕ ЗначениеЗаполнено(НаправлениеОтгрузки) и не DPD и не флПВФилиал тогда
	Предупреждение("Выберите одно или несколько направлений из списка!", 10);
	возврат;
КонецЕсли;

Запрос.УстановитьПараметр("СписокИсключений", СписокКатегорийИсключений);  //можно сделать список...


//+++ 14.06.2012
Если СписокПодразделений.Количество()>0 Тогда //иначе по всем, с категорией или без!
//Запрос.Текст = Запрос.Текст + "  И ЗаказыПокупателей.Подразделение в (&СписокПодразделений)";
Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
КонецЕсли;

Если СписокПодразделений.Количество()=0 Тогда
	Предупреждение("Не выбрано ни одного подразделения!", 30);
	возврат;
КонецЕсли;	

//------------------------------------------------------------------------------
 	Если неотгруженные Тогда // за 3 месяца + текущий месяц
		//Запрос.Текст = Запрос.Текст +"
		//			|УПОРЯДОЧИТЬ ПО
		//			|	Контрагент,
		//			|	ДатаОтгрузки,
		//			|	ЗаказОСт.ЗаказПокупателя.Дата,
		//			|	Ответственный
		//			|АВТОУПОРЯДОЧИВАНИЕ";
		ДатаОтгрузки0 =  ДобавитьМесяц(НачалоМесяца(ЭлементыФормы.ДатаФормы.Значение),-3);
	    Запрос.УстановитьПараметр("ДатаОтгрузки0", ДатаОтгрузки0 );  
	иначе 
		Запрос.Текст = Запрос.Текст +"
					|УПОРЯДОЧИТЬ ПО
	                |	Контрагент,
					|	ДатаОтгрузки
	                |АВТОУПОРЯДОЧИВАНИЕ";
		ДатаОтгрузки0 =  НачалоДня(ЭлементыФормы.ДатаФормы.Значение);
	 	Запрос.УстановитьПараметр("ДатаОтгрузки0",ДатаОтгрузки0);
	КонецЕсли;                                 
	
	ДатаОтгрузки1 = КонецДня(ЭлементыФормы.ДатаФормы.Значение + КолДнейНеважности *86400 );
	 Запрос.УстановитьПараметр("ДатаОтгрузки1", ДатаОтгрузки1 ); //!!!
	 Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
	 
	Состояние("Идет поиск "+?(неотгруженные,"неотгруженных","")+" заказов с датой отгрузки* с "+Формат(ДатаОтгрузки0,"ДЛФ=DD")+" по "+Формат(ДатаОтгрузки1,"ДЛФ=DD")+"...");
	
	//+++   16.05.2012
	началоВр = ТекущаяДата();
		
	Результат = Запрос.Выполнить();
	
	КонецВр = ТекущаяДата();
	ВремяВыполнения = Число(КонецВр - началоВр);
	
 	//+++)   16.05.2012
	
	
	 Io = Заказы.Количество();   //количество уже введенных заказов
	 тз = Результат.Выгрузить();
	 
		 		
	Если  Io=0 Тогда
		Если неотгруженные Тогда//+++ 10.10.2011                                      //13.04.2018
			тз.Свернуть("ДатаОтгрузки, Заказ, Контрагент, Комментарий, Ответственный, АдресДоставки", "Количество, Кубатура, Вес, Объем, КолКамеры");  //+++ 18.04.2012
	       КонецЕсли;
			Состояние("Идет формирование списка из "+тз.Количество()+" заказов...");
			
			Заказы.Загрузить( тз );
			
	//+++ 23.09.2013 - переустановка даты отгрузки по регистру "ЖурналИзменений"
	 Для Сч=0 по Заказы.Количество()-1 Цикл
		ОбработкаПрерыванияПользователя();
		 стр1 = Заказы[Сч];
		 //стр1.ДатаОтгрузки = получитьПоследнююДатуУстановкиКатегории(стр1.Заказ); //14.04.2018
		 		 
		 //+++ 04.06.2015
		 если СокрЛП(стр1.АдресДоставки)="" тогда
			стр1.АдресДоставки = ОписаниеОрганизации(стр1.Заказ.Контрагент, "ФактическийАдрес,");
	    	если СокрЛП(стр1.АдресДоставки)="" тогда
		    стр1.АдресДоставки = ОписаниеОрганизации(стр1.Заказ.Контрагент, "ЮридическийАдрес,");
			КонецЕсли;
		КонецЕсли;
		
	 КонецЦикла;

			//------Заполнение значений строки с изменениями-----------
			Для Каждого стр1 из Заказы Цикл  
				ОбработкаПрерыванияПользователя();
		    	ЗаполнитьСтроку(стр1, Истина, неотгруженные);
			//	стр1.Срочность = ( ?(стр1.ДатаОтгрузки='00010101', НачалоДня(стр1.Заказ.Дата) + КолДнейНеважности * 86400,стр1.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
				стр1.Срочность = ( ?(стр1.ДатаОтгрузки='00010101', КонецДня(ЭлементыФормы.ДатаФормы.Значение) + КолДнейНеважности * 86400,стр1.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
				
				 //+++ 04.06.2015
				 если СокрЛП(стр1.АдресДоставки)="" тогда
					контрСтр = СведенияОЮрФизЛице(стр1.Заказ.Контрагент, стр1.Заказ.Дата);
					
					стр1.АдресДоставки = ОписаниеОрганизации(контрСтр, "АдресДоставки,");//14.04.2018
			    	если СокрЛП(стр1.АдресДоставки)="" тогда
				    стр1.АдресДоставки = ОписаниеОрганизации(контрСтр, "ФактическийАдрес,");
					КонецЕсли;
				
			    	если СокрЛП(стр1.АдресДоставки)="" тогда
				    стр1.АдресДоставки = ОписаниеОрганизации(контрСтр, "ЮридическийАдрес,");
					КонецЕсли;
				КонецЕсли;
               		 //+++ 04.06.2015
				 если стр1.СуммаДоставки=0 тогда
					 стр1.СуммаДоставки = стр1.Заказ.ТРБезНал +стр1.Заказ.ТРНал +стр1.Заказ.ТРВЦене;
					 стр1.СуммаДоставки = стр1.Заказ.ТРБезНал +стр1.Заказ.ТРНал +стр1.Заказ.ТРВЦене;
					 стр1.Тариф = ?(стр1.Кубатура=0, 0, стр1.СуммаДоставки / стр1.Кубатура);
				 КонецЕсли;	 
					  стр1.Сумма = стр1.Заказ.СуммаДокумента;  //19.11.2015
		 
            
			КонецЦикла;
               // заказы.Сортировать("Срочность");
		
	//----------сортировка по алфавиту!------------------------
	Заказы.Сортировать("Контрагент,АдресДоставки,Ответственный");
		
	Иначе //------------------------------уже есть заказы-------------------------------
		Состояние("Идет поиск заказов на отгрузку "+Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD")+"...");
		
	      Если неотгруженные Тогда//+++ 10.10.2011
		  	тз.Свернуть("ДатаОтгрузки, Заказ, Контрагент, Комментарий, Ответственный", "Количество, Кубатура, Вес, Объем, КолКамеры"); //+++ 18.04.2012
          КонецЕсли;

		i=1;
		Для i=1 по тз.Количество() Цикл
			ОбработкаПрерыванияПользователя();
			Выборка = тз[i-1]; 

		ОбработкаПрерыванияПользователя();
		    
		Если (i<=Io) и (Io>0) Тогда// обновление уже готовых строк
			стр222 = НайтиЗаказ(Выборка.Заказ);
			
			Если стр222 = Неопределено Тогда
				стр222 = Заказы.Добавить();
			иначе
				сообщить("Строка № "+строка(i)+" обновлена...");
			КонецЕсли;
	
			ЗаполнитьЗначенияСвойств(стр222, Выборка);
			ЗаполнитьСтроку(стр222, Истина, неотгруженные);// обновим старый заказ!
			
		 Если (i=Io) и (тз.Количество()>Io) Тогда
				стр222.Расстояние = 0; // уже не до ярославля 
			КонецЕсли;	
		иначе
			стр222 = НайтиЗаказ(Выборка.Заказ);
			Если стр222 = Неопределено Тогда
			стр222 = Заказы.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(стр222, Выборка);
			ЗаполнитьСтроку(стр222, Истина, неотгруженные);// только Новые строки!!!
		КонецЕсли;
		//i=i+1;	
		
		
		//+++ 23.09.2013 
		 стр222.ДатаОтгрузки = получитьПоследнююДатуУстановкиКатегории(стр222.Заказ);//+++ 23.09.2013
		 
		 //+++ 04.06.2015
		 если СокрЛП(стр222.АдресДоставки)="" тогда
			контрСтр = СведенияОЮрФизЛице(стр222.Заказ.Контрагент, стр222.Заказ.Дата);
			стр222.АдресДоставки = ОписаниеОрганизации(контрСтр, "ФактическийАдрес,");
	    	если СокрЛП(стр222.АдресДоставки)="" тогда
		    стр222.АдресДоставки = ОписаниеОрганизации(контрСтр, "ЮридическийАдрес,");
			КонецЕсли;
		КонецЕсли;
		 
		 //+++ 04.06.2015
		 если стр222.СуммаДоставки=0 тогда
			 стр222.СуммаДоставки = стр222.Заказ.ТРБезНал +стр222.Заказ.ТРНал +стр222.Заказ.ТРВЦене;
			 стр222.Тариф = ?(стр222.Кубатура=0, 0, стр222.СуммаДоставки / стр222.Кубатура);
		 КонецЕсли;	 
			  стр222.Сумма = стр222.Заказ.СуммаДокумента;  //19.11.2015
		
		 //стр222.Срочность = ( ?(стр222.ДатаОтгрузки='00010101', НачалоДня(стр222.Заказ.Дата)+ КолДнейНеважности * 86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
		  стр222.Срочность = ( ?(стр222.ДатаОтгрузки='00010101', КонецДня(ЭлементыФормы.ДатаФормы.Значение)	+ КолДнейНеважности * 86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
		КонецЦикла;

	КонецЕсли; // обновление таблицы
		заказы.Сортировать("Контрагент, Срочность");
		
 //----------------------Расстояние------------------
	Состояние("Идет расчет расстояний...");
 	Если АдресИзИнтернета Тогда
		Для Каждого стр1 из Заказы Цикл
			МенятьКоординаты(стр1);
		КонецЦикла;
		РассчитатьРасстояниеПоКоординатам(нашиКоординаты);
	иначе	
	    РассчитатьРасстояние();
 	КонецЕсли;

   ПересчетКоличестваФлаг();
   
   Состояние("Идет проверка отгрузок "+ Заказы.Количество()+" заказов");
   
   //---------------заново пересчитаем отгрузки по заказам-------------------------
     СписокЗаказов = новый массив;
	 минДатаЗаказов = ТекущаяДата();
	 Для Каждого стр1 из Заказы Цикл
		 ОбработкаПрерыванияПользователя();
	   СписокЗаказов.Добавить( стр1.Заказ );
	   Если минДатаЗаказов>стр1.Заказ.Дата Тогда //реализация по заказу не раньше самого заказа
		   минДатаЗаказов=стр1.Заказ.Дата;
	   КонецЕсли;	   
	 КонецЦикла;	  
	 мСписокЗаказов  = ПроверитьОтгрузкуПоЗаказу(СписокЗаказов, ДатаФормы + КолДнейНеважности * 86400);
	 мСписокОтгрузок = ПеречитатьСписокОтгрузок(СписокЗаказов, минДатаЗаказов, ДатаФормы + КолДнейНеважности * 86400);
	 
  Состояние("Список содержит "+ Заказы.Количество()+" заказов");
  
  //+Лукьяненков 28.09.2017 
  //Заполнение колонки Вн.Перемещение
  
  СписокЗаказов = Заказы.ВыгрузитьКолонку("Заказ");
  
  ЗапросПеремещений = Новый Запрос;
  ЗапросПеремещений.УстановитьПараметр("Заказов",СписокЗаказов);
  ЗапросПеремещений.Текст = 
  "ВЫБРАТЬ
  |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка КАК ЗаданиеНаПеремещение,
  |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя
  |ИЗ
  |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
  |ГДЕ
  |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя В(&Заказов)
  |	И НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления";
  ТЗПеремещений = ЗапросПеремещений.Выполнить().Выгрузить();
  
  Для каждого СтрокаЗаказы из Заказы Цикл
	  
	  СтрокаЗаказы.ВнПеремещение = ?(ТЗПеремещений.Найти(СтрокаЗаказы.Заказ, "ЗаказПокупателя")<>неопределено, ТЗПеремещений.Найти(СтрокаЗаказы.Заказ, "ЗаказПокупателя").ЗаданиеНаПеремещение, Документы.ЗаданиеНаПеремещение.ПустаяСсылка());	  
	  
  КонецЦикла;
  
  //-Лукьяненков 28.09.2017

  КоманднаяПанель1Пересчет(неопределено);
  
КонецПроцедуры

Функция НайтиЗаказ(заказ1)
	
	стр2 = Неопределено;
	
	Для Каждого стр1 из Заказы Цикл
	ОбработкаПрерыванияПользователя();
		Если стр1.Заказ = заказ1 Тогда
			стр2=стр1;
			прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	возврат стр2;
	
КонецФункции	

Процедура ПриОткрытии()
АдресИзИнтернета = истина; //06.04.2018

	Если ЭлементыФормы.ДатаФормы.Значение=Дата(1,1,1) Тогда
	ЭлементыФормы.ДатаФормы.Значение = КонецДня(ТекущаяДата()); //+ КолДнейНеважности*86400);  
	 // ДатаФормыПриИзменении(Неопределено);
	КонецЕсли;
	
	ЭлементыФормы.неотгруженные.Значение = Истина;
	//ЭлементыФормы.ДатаФормы.Доступность = ЛОЖЬ; 
	
СписокПодразделений.Очистить(); //+++ Это список подразделений  
 спис = получитьСписокРазрешенныхОбъектовПользователя(ПараметрыСеанса.ТекущийПользователь);
 если спис.Количество()=0 тогда
 	СписокПодразделений.Добавить( ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение );  // для Филиалов - у каждого своё
 иначе
	 СписокПодразделений.ЗагрузитьЗначения( спис.выгрузитьЗначения() );
 КонецЕсли;
нашиКоординаты = получитьНашиКоординатыПодр(); //+++ 08.05.2018 !!! ОБЯЗАЬТЕЛЬНО!

	 ЭтаФорма.Заголовок = ИмяЗаголовка+"Филиал";//основная
	//ПослеВосстановленияЗначений(Неопределено);
	
	//нельзя выключить оба флажка!!! 
	//Если (ЭлементыФормы.Юг.Значение=Ложь) и (ЭлементыФормы.Север.Значение=Ложь) Тогда
	//	ЭлементыФормы.Север.Значение=Истина;
	//КонецЕсли;
	ЭлементыФормы.Флажок1.Значение = Ложь;   //+++ 26.04.2012
	ЭлементыФормы.Флажок2.Значение = Истина; //+++ 02.10.2013
	
	//+++ ВСЕМ разрешено!
	//Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)<>неопределено 
	//	или мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.найти(глТекущийПользователь)<>неопределено Тогда
	    ЭлементыФормы.ДействияФормы.Кнопки.Восстановить.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.Сохранить.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.СохранитьКАК.Доступность = Истина;
	//КонецЕсли;	
	
	//+++ 09.11.2015	
	Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)<>неопределено  тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаданиеНаОтгрузку.Доступность = Истина;
	КонецЕсли;	
	
	
	//если пользователь НЕ филиальный - можно любые подразделения?
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		ЭлементыФормы.СписокПодразделений.Доступность = истина;
	КонецЕсли;	
	

Неотгруженные = Истина;

//+++ 04.06.2015
НаправлениеПродаж = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175");

ЗапонитьПеревозчиков();
КонецПроцедуры

Процедура ЗапонитьПеревозчиков() //02.04.2018
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Выразить(ЗначенияСвойствОбъектов.Объект как Справочник.Контрагенты).НаименованиеПолное КАК Контр
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	               |	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контр
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90332") ); // Перевозчик LOGISTIC.yst.ru
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();	
	ЭлементыФормы.Перевозчик.СписокВыбора.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Контр") );
КонецПроцедуры


Процедура ЗаказыКонтрагентПриИзменении(Элемент)
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	Если ЗначениеЗаполнено(стр1.Заказ) Тогда 
		Если стр1.Контрагент<>стр1.Заказ.Контрагент Тогда
			стр1.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
			стр1.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;	
		ЗаполнитьСтроку(стр1, Истина);
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель1Расстояния(Кнопка)
	
	регистрыСведений.Расстояния.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры


Процедура КоманднаяПанель1Адреса(Кнопка)
	
	//------------------Находим адреса--------------------------------------
	форма = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка();
		
		форма.отбор.Объект.ВидСравнения = ВидСравнения.ВСписке;
		форма.отбор.Объект.Значение.ЗагрузитьЗначения( Заказы.ВыгрузитьКолонку("Контрагент") );
		форма.отбор.Объект.Использование = Истина;
		
		форма.отбор.Тип.ВидСравнения = ВидСравнения.Равно;
		форма.отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Адрес;
		форма.отбор.Тип.Использование = Истина;
		
		форма.отбор.Вид.ВидСравнения = ВидСравнения.ВСписке;
		спис1 = новый массив;
		спис1.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки"));
		//спис1.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		//спис1.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		
		форма.отбор.Вид.Значение.ЗагрузитьЗначения( спис1 ); //ФактАдресКонтрагента;
		форма.отбор.Вид.Использование = Истина;
		
		форма.ЭлементыФормы.ДействияФормы.Кнопки.Действие19.доступность = Ложь;//отбор
		форма.ЭлементыФормы.ДействияФормы.Кнопки.Действие20.доступность = Ложь;// отбор по 1 полю
		форма.ЭлементыФормы.ДействияФормы.Кнопки.Действие21.доступность = Ложь;//отмена отбора
		
		форма.ЭлементыФормы.РегистрСведенийСписок.АвтоКонтекстноеМеню = ЛОЖЬ;

		форма.Открыть();
		
КонецПроцедуры

Процедура ЗаказыТарифНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	стр1  = ЭлементыФормы.Заказы.ТекущиеДанные;
	
	Если Заказы.Количество()>0 Тогда
	Обработка = Обработки.ЗначенияСвойствОбъекта.Создать();
	Обработка.НазначениеСвойств    = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ТарифДоставки).НазначениеСвойства;
	Обработка.ОбъектОтбораЗначений = ЭлементыФормы.Заказы.ТекущиеДанные.Контрагент; //Заказы.ВыгрузитьКолонку("Контрагент");
	Обработка.ОбъектОтбораНазначений = Справочники.Контрагенты.НайтиПоКоду("00031  ");
	
	Обработка.ПрочитатьЗаполнитьСвойстваИЗначения();
	Обработка.ПолучитьФорму().ОткрытьМОДАЛЬНО();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаказыТарифПриИзменении(Элемент)
	 стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
 //1) пересчет
 Если стр1.тариф>0 Тогда
 стр1.СуммаДоставки = стр1.Кубатура * стр1.тариф;
 иначе 
 стр1.СуммаДоставки = - стр1.Количество * стр1.тариф;
 КонецЕсли;

ТарифДоставки1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ТарифДоставки); 
 //2) найдем в регистре
 отбор1 = новый структура("Объект", стр1.Контрагент);
 отбор1.Вставить("Свойство", ТарифДоставки1 ); 
 рс = регистрыСведений.ЗначенияСвойствОбъектов.Получить(отбор1);
 
 значНов = стр1.тариф; //число
 
 Если рс<>неопределено Тогда
	 Если ТипЗнч(рс.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
	 	значСтар = Число(рс.Значение.Наименование);
 	 иначе
	 	значСтар = рс.Значение;
	 КонецЕсли;
	
	Если значСтар<>значНов Тогда	 
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = КодВозвратаДиалога.Да;
	Ответ = Вопрос("При записи - старое значение: "+Строка(значСтар)+" 
			   |будет заменено на новое: "+Строка(значНов)+"
			   |Продолжить выполнение операции?", Режим, 10, Ответ, "Запись нового значения");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;	

//3) запишем новое значение с замещением
Если значНов<>Цел(значНов) Тогда
	эл1 = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(значНов),Истина,,);
	Если эл1 = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
		эл1 = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		эл1.Владелец  = ТарифДоставки1;
		эл1.Наименование = Строка(значНов);
		эл1.Записать();
	КонецЕсли;
иначе
	эл1 = значНов;
КонецЕсли;

	регСвЗапись = регистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
 	регСвЗапись.Объект = стр1.Контрагент;
	регСвЗапись.Свойство = ТарифДоставки1;
 	регСвЗапись.Значение = эл1;
	попытка
	регСвЗапись.Записать(Истина);
 		сообщить("В свойства контрагента: "+стр1.Контрагент+" записан Тариф доставки: "+СокрЛП(эл1), СтатусСообщения.Информация);
	исключение
	    сообщить("Ошибка при записи свойства контрагента: "+стр1.Контрагент+" - Тариф доставки: "+СокрЛП(эл1), СтатусСообщения.Внимание);
	КонецПопытки;	 
	
КонецПроцедуры

Процедура ЗаказыАдресДоставкиПриИзменении(Элемент)
	
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	значНов = стр1.АдресДоставки;
	//------------------Находим адрес--------------------------------------
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	КонтактнаяИнформация.Представление
	                 |ИЗ
	                 |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                 |ГДЕ
	                 |	КонтактнаяИнформация.Объект = &Объект
	                 |	И КонтактнаяИнформация.Тип = &Тип
	                 |	И КонтактнаяИнформация.Вид = &Вид";
	//				 |	И КонтактнаяИнформация.Представление ПОДОБНО &Представление";
	  
	  Запрос.УстановитьПараметр("Объект", стр1.Контрагент  );
	  Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес );
	  Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки") );
  //	  Запрос.УстановитьПараметр("Представление", стр1.АдресДоставки );
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  Если Выборка.Следующий() Тогда
		  значСтар = выборка.Представление;
		  
		  	Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = КодВозвратаДиалога.Да;
			Ответ = Вопрос("При записи - старое значение: "+Строка(значСтар)+" 
			   |будет заменено на новое: "+Строка(значНов)+"
			   |Продолжить выполнение операции?", Режим, 10, Ответ, "Запись нового значения");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
    		Возврат;
			КонецЕсли;
	  КонецЕсли;
	//-------------------------------------------------------------------------------	
		рс = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		рс.Объект= стр1.Контрагент;
		рс.Тип   = Перечисления.ТипыКонтактнойИнформации.Адрес;
		рс.Вид   = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки");
		рс.Представление = СокрЛП(значНов);
		попытка
			рс.Записать(Истина); // перезапись
	    	сообщить("В контактные данные контрагента: "+стр1.Контрагент+" записан Адрес доставки: "+СокрЛП(значНов), СтатусСообщения.Информация);
		исключение
	    	сообщить("Ошибка при записи контактных данных контрагента: "+стр1.Контрагент+" - Адрес доставки: "+СокрЛП(значНов), СтатусСообщения.Внимание);
		КонецПопытки;	
КонецПроцедуры

Процедура ЗаказыРасстояниеПриИзменении(Элемент)
	//попробуем определить города и расстояние
	
КонецПроцедуры


Процедура АдресИзИнтернетаПриИзменении(Элемент)
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Маршрут.Доступность = АдресИзИнтернета;
	//	ЭлементыФормы.Комментарий.Видимость = НЕ АдресИзИнтернета;
	//	ЭлементыФормы.Карта.Видимость = АдресИзИнтернета;
КонецПроцедуры

 Процедура КоманднаяПанель1Контакты(Кнопка)
	форма1 = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка();
	форма1.отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	форма1.отбор.Объект.Значение = Водитель;
	форма1.отбор.Объект.Использование = Истина;
	
	форма1.отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	форма1.отбор.Тип.Значение.Добавить( Перечисления.ТипыКонтактнойИнформации.Телефон );
	форма1.отбор.Тип.Значение.Добавить( Перечисления.ТипыКонтактнойИнформации.Другое );
	форма1.отбор.Тип.Использование = Истина;
	
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие19.Доступность = ЛОЖЬ;
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие20.Доступность = ЛОЖЬ;
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие21.Доступность = ЛОЖЬ;
	
	форма1.ЭлементыФормы.РегистрСведенийСписок.АвтоКонтекстноеМеню = ЛОЖЬ;
	
	форма1.Открыть();
	
КонецПроцедуры

Процедура ВодительПриИзменении(Элемент)
	
	Если значениеЗаполнено(Водитель) Тогда
		ЭтотОбъектВодитель = справочники.ФизическиеЛица.НайтиПоНаименованию(Водитель);
		Если значениеЗаполнено(ЭтотОбъектВодитель) Тогда
		ТелефонВодителя = ПолучитьКонтактнуюИнформацию(ЭтотОбъектВодитель,"Телефон");
		Автомобиль = ПолучитьКонтактнуюИнформацию(ЭтотОбъектВодитель, "Другое");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъектВодитель) тогда
		
		Если ЭтотОбъектВодитель.ЗапретитьИнкассацию тогда //15.11.2016
			Предупреждение("   Внимание!
			|Водителю: "+строка(Водитель)+" - ЗАПРЕЩЕНА Инкассация!",30);
		КонецЕсли;	
		 
	    Запрос = Новый Запрос;
	    Запрос.УстановитьПараметр("наим",ФамилияИнициалыФизЛица(ЭтотОбъектВодитель));
		Запрос.УстановитьПараметр("ДатаТ",ТекущаяДата());
		Запрос.УстановитьПараметр("дата1",ТекущаяДата()-60*60*24*14);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаданиеНаОтгрузку.Ссылка
		               |ИЗ
		               |	Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
		               |ГДЕ
		               |	ЗаданиеНаОтгрузку.Водитель = &Наим
		               |	И ЗаданиеНаОтгрузку.Дата МЕЖДУ &дата1 И &ДатаТ
		               |	И ЗаданиеНаОтгрузку.ДатаВозвращения > &ДатаТ
		               |	И ЗаданиеНаОтгрузку.Проведен = истина";
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество()>0 Тогда     //Водитель должен быть еще на выезде, предупреждаем
			Ответ = Вопрос("Возможно данный водитель находится в рейсе, вы уверены, что хотите выбрать именно его?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
			если Отказ Тогда
				ЭтотОбъектВодитель = Справочники.ФизическиеЛица.ПустаяСсылка();
				Водитель = "";
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ЭтотОбъектВодитель) тогда
		Комментарий = "тел.водителя: "+ получитьТелефоны(ЭтотОбъектВодитель);
		АвтомобильГосНомерАвтомобиля = ПолучитьКонтактнуюИнформацию(ЭтотОбъектВодитель, "Другое");
		Комментарий = Комментарий +"
		|"+АвтомобильГосНомерАвтомобиля;   //автомобиль марка + госномер
		
//+++ попытаемся определить тип
		АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
		i= найти(АвтомобильГосНомерАвтомобиля, " ");
		если i>0 тогда
			МаркаАвтомобиля 	 = СокрЛП(Лев(АвтомобильГосНомерАвтомобиля, i-1));
			ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			ГосНомерАвтомобиля = стрЗаменить(ГосНомерАвтомобиля, " ",""); // р944кн76
			если стрДлина(ГосНомерАвтомобиля)>=8 тогда
			ГосНомерАвтомобиля = сред(ГосНомерАвтомобиля, 2,3);	
			КонецЕсли;
		//+++( найдём тип авто
		Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" тогда
        Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТипАвтомобиля.Ссылка,
		|	ТипАвтомобиля.Объем,
		|	ТипАвтомобиля.Вес
		|ИЗ
		|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
		|ГДЕ
		|	ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Марка)
		|	И ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Номер)";
		Запрос.УстановитьПараметр("Марка", "%"+МаркаАвтомобиля+"%" );
		Запрос.УстановитьПараметр("Номер", "%"+ГосНомерАвтомобиля+"%" );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
			Если Выборка.Следующий() тогда
				ТипАвтомобиля = выборка.ссылка;
				ВесМакс = выборка.Вес;
				ОбъемМакс = выборка.Объем;
				ТипАвтомобиляПриИзменении(неопределено);
			КонецЕсли;
		КонецЕсли;
		//+++)
	КонецЕсли;//i>0
	
	КонецЕсли;
	
КонецПроцедуры




//----------------------Сохранение-------------------
Процедура ПередСохранениемЗначений(Отказ)
	
Если фЕстьФлаги Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Будут Сохранены только выделенные строки.
	|Продолжить сохранение?", Режим, 30, ответ, "Сохранение ОБЩИХ настроек");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
КонецЕсли;

Если Найти(ЭтаФорма.Заголовок," - ")>0 Тогда 
	ИмяНастройки = Прав(ЭтаФорма.Заголовок, стрДлина(ЭтаФорма.Заголовок) - стрДлина(ИмяЗаголовка));
иначе	
	ИмяНастройки="Основная";
	ЭтаФорма.Заголовок = ИмяЗаголовка + ИмяНастройки;
КонецЕсли;

Если СокрЛП(ИмяНастройки = "Основная") Тогда
	       //777 Здесь месяц по дате формы!!!
	ИмяНастройки = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")+"("
	+строка(СписокПодразделений[0].Значение)+")" //?(ЭлементыФормы.Неотгруженные.Значение," Неотгруженные","")
	+?(ЗначениеЗаполнено(НаправлениеОтгрузки), "-"+строка(НаправлениеОтгрузки), "")
	+?(ЗначениеЗаполнено(ЭлементыФормы.Водитель.Значение)," - "+строка(ЭлементыФормы.Водитель.Значение),"");
     
	Если НЕ ВвестиСтроку(ИмяНастройки, "Введите название общей настройки", 200, ЛОЖЬ) Тогда
		возврат;
	КонецЕсли;	
КонецЕсли;

//ИмяНастройки = стрЗаменить(ИмяНастройки,"\","-");
ИмяНастройки = стрЗаменить(ИмяНастройки,"/","\");
ИмяНастройки = стрЗаменить(ИмяНастройки,":",";");
ИмяНастройки = стрЗаменить(ИмяНастройки,"?",".");
ИмяНастройки = стрЗаменить(ИмяНастройки,"!",".");


имяФайла1 = ИмяПапки+ИмяНастройки;
СоздатьКаталог(имяФайла1);

ЭтаФорма.Заголовок = "Обработка Расчет поездки - "+ИмяНастройки;

	i=0; нетОшибок = Истина;
	Для Каждого эл из СписокПолейДляСохранения Цикл
		
		попытка 
		//Если (i=1) или (i=2) или (i=8) или (i=9)или (i=10) Тогда
		//	продолжить;
		//КонецЕсли;	
		Если (i<4) или (i>=7) Тогда
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ЭлементыФормы[эл].Значение);
		иначеЕсли (i=4) или (i=5) Тогда
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ЭтотОбъект[эл]);
		иначеЕсли эл = "Заказы" Тогда  //4
		ТаблЗнач = ЭтотОбъект.Заказы.Выгрузить();
		
		
		//---------------------------------
		N=ТаблЗнач.Количество();

		Если (фЕстьФлаги) Тогда
			j=0;
			пока j<N Цикл
				Если не таблЗнач[j].флаг Тогда
				ТаблЗнач.Удалить(j); N=N-1;
				Иначе 
				j=j+1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТаблЗнач.Колонки.Удалить(1);//флаг
		
		//------------------------------------------------------------	
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ТаблЗнач);
		КонецЕсли;
		
	исключение
	Сообщить("Ошибка при сохранении "+строка(i)+"-го файла: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	нетОшибок = Ложь;
	конецПопытки;
 	i=i+1;
	КонецЦикла;	
	
	Если нетОшибок Тогда
		Если N<>Заказы.Количество() Тогда
		Сообщить("Выделенные "+Строка(N)+" строк - сохранены в настройку '"+ИмяНастройки+"' Для общего доступа...", СтатусСообщения.Информация);
    	иначе
		Сообщить("Все данные - сохранены в настройку '"+ИмяНастройки+"' Для общего доступа...", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранитьКАК(Кнопка)
	ИмяНастройки="";
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, стрДлина(ИмяЗаголовка) - 3);
	
	//Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	//ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//ДиалогОткрытияФайла.Каталог = ИмяПапки;

	//Если ДиалогОткрытияФайла.Выбрать() Тогда
	//	ИмяПапки1 = ДиалогОткрытияФайла.Каталог;
	//	i = найти(ИмяПапки1, "\"); L = стрДлина(ИмяПапки1);
	//	пока i>0 Цикл
	//		ИмяПапки1 = прав(ИмяПапки1, L-i);
	//		i = найти(ИмяПапки1, "\"); L = стрДлина(ИмяПапки1);
	//	КонецЦикла;	
	//	ЭтаФорма.Заголовок = ИмяЗаголовка + ИмяПапки1;
	//КонецЕсли;
		
	ПередСохранениемЗначений(ЛОЖЬ);
	
КонецПроцедуры


Процедура ПослеВосстановленияЗначений()
	//+++ записываем все настройки в общий файл
ИмяНастройки="Основная";
ИмяПапки1 = ИмяПапки+Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\";
ИмяФайла0 = ИмяПапки1 + ИмяНастройки; //777

флВыводитьСообщенияОЧастичнойОтгрузке = Истина;
 
	//ВвестиСтроку(ИмяНастройки, "Введите название настройки", 20, ЛОЖЬ);
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла0;
	ДиалогОткрытияФайла.Каталог = ИмяПапки1;  //+++ 23/05/2012
	//Фильтр = "Текст(*.txt)|*.1с|Все файлы(*.*)|*.*";
    //ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите общую настройку";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайла0 = ДиалогОткрытияФайла.Каталог;
	иначе
		возврат;	
	КонецЕсли;
ИмяНастройки = Прав(имяФайла0, стрДлина(имяФайла0) - стрДлина(ИмяПапки));

//имя настройки "хранится" в заголовке
ЭтаФорма.Заголовок = ИмяЗаголовка+ИмяНастройки;

	файл1 = Новый Файл(ИмяФайла0+ИмяФАЙЛАобр+"0.1с");
	Если НЕ файл1.Существует() Тогда
		Сообщить("Не найдены файлы общей настройки.");
		возврат;
	КонецЕсли;

    НетОшибок1=Истина;  
	старыйФорматКатегорий = Истина; 	
	i=0;  //        Восстановитьзначения	
	Для Каждого эл из СписокПолейДляСохранения Цикл
	  попытка
		//Если (i=1) или (i=2) или (i=8) или (i=9)или (i=10) Тогда
		//	продолжить;
		//КонецЕсли;	
		Если (i<4) или (i>=7) Тогда
			Если i=10 Тогда // новый реквизит формы - может отсутствовать!
				 ФайлНаДиске = Новый Файл(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
				 Если  ФайлНаДиске.Существует() Тогда
					 старыйФорматКатегорий = Ложь;
					 ЭлементыФормы[эл].Значение = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
				 КонецЕсли;	 
			иначе	
				ЭлементыФормы[эл].Значение = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
			КонецЕсли;
			
		иначеЕсли (i=4) или (i=5) Тогда
		  ЭтотОбъект[эл] = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
	    иначеЕсли эл = "Заказы" Тогда //6 табл.часть
			 ТаблЗнач = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
			 ЭтотОбъект.Заказы.Очистить();
			 ЭтотОбъект.Заказы.Загрузить(ТаблЗнач);
			 
			Для Каждого стр222 из Заказы Цикл //+++ 25.04.2012 актуализация по текущим заказам!
				//стр222.Срочность = ( ?(стр222.Заказ.ДатаОтгрузки='00010101', НачалоДня(стр222.Заказ.Дата)+КолДнейНеважности*86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
				стр222.Срочность = ( ?(стр222.ДатаОтгрузки='00010101', НачалоДня(ЭлементыФормы.ДатаФормы.Значение)+КолДнейНеважности*86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата()) )/86400; //+++ 23.09.2013
				
	        КонецЦикла;
			 
	 	КонецЕсли;
	   исключение
	    Сообщить("Не все общие значения восстановлены. Ошибка при загрузке поля №"+строка(i), СтатусСообщения.Внимание);
	    НетОшибок1=Ложь;
	   КонецПопытки;	 
		i=i+1;
	КонецЦикла;	
	
	ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение; // Для контроля обновления

	Если НетОшибок1 Тогда
		Сообщить("Восстановлены данные общей настройки "+ИмяНастройки, СтатусСообщения.Информация);	
    КонецЕсли;
	
	//фЕстьФлаги=Ложь;// а вдруг есть....
	//	Для Каждого стр1 из Заказы Цикл
	//		Если стр1.Флаг Тогда
	//		фЕстьФлаги = Истина;
	//		прервать;
	//		КонецЕсли;	
	//	КонецЦикла;
		фЕстьФлаги = Истина; //+++ 14.09.2011
		Для Каждого стр1 из Заказы Цикл
			стр1.Флаг = Истина;
		КонецЦикла;
		
	//+++ 24.04.2012 ЭлементыФормы.ДатаФормы.Доступность = не неотгруженные; 
	
	АдресИзИнтернетаПриИзменении(неопределено); //Для правильной видимости элементов
	ВодительПриИзменении(неопределено);
	
	Если фЕстьФлаги Тогда
		ПересчетКоличестваФлаг();
	КонецЕсли;
		
  Состояние("Идет проверка отгрузок "+ Заказы.Количество()+" заказов");
   
   //---------------заново пересчитаем отгрузки по заказам-------------------------
     СписокЗаказов = новый массив;
	 минДатаЗаказов = ТекущаяДата();
	 Для Каждого стр1 из Заказы Цикл
	   СписокЗаказов.Добавить( стр1.Заказ );
	   Если минДатаЗаказов>стр1.Заказ.Дата Тогда //реализация по заказу не раньше самого заказа
		   минДатаЗаказов=стр1.Заказ.Дата;
	   КонецЕсли;	   
	 КонецЦикла;	  
	 мСписокЗаказов  = ПроверитьОтгрузкуПоЗаказу(СписокЗаказов, ДатаФормы);
	 мСписокОтгрузок = ПеречитатьСписокОтгрузок(СписокЗаказов, минДатаЗаказов);
	 
  Состояние("Список содержит "+ Заказы.Количество()+" заказов");
  
КонецПроцедуры


//------------Флажки----------------------------------
Процедура КоманднаяПанель1Действие9(Кнопка)
	
	нетТочек = истина;
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг = Истина;
		Если стр1.Точка<>0 тогда
			нетТочек = ложь;
		КонецЕсли;	
	КонецЦикла;	
	фЕстьФлаги = Истина;
	ПересчетКоличестваФлаг();
	
//25.12.2015 - автоопределение точек!	
если нетТочек и Заказы.Количество()>0 тогда
	Если Вопрос("Определенить точки автоматически?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		Заказы.Сортировать("Точка, Контрагент, АдресДоставки, Ответственный, Заказ");
		стрОчередь0 = ""; номОчередь=0;
		Для Каждого стр из Заказы Цикл
			стрОчередь1 = строка(стр.Контрагент)+"-"+строка(стр.АдресДоставки)+"-"+строка(стр.Ответственный);
			Если стр.Точка=0 тогда
				Если стрОчередь1<>стрОчередь0 тогда
				номОчередь=номОчередь+1;
				стрОчередь0 = стрОчередь1;
				КонецЕсли;	
				стр.Точка = номОчередь;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель1Действие10(Кнопка)
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг  = Ложь;
	КонецЦикла;
	фЕстьФлаги = Ложь;
	ПересчетКоличестваФлаг();
КонецПроцедуры

Процедура КоманднаяПанель1Действие11(Кнопка)
	фЕстьФлаги = Ложь;
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг = не стр1.Флаг;
		Если стр1.Флаг Тогда
			фЕстьФлаги = Истина;
		КонецЕсли;	
	КонецЦикла;
	ПересчетКоличестваФлаг();
КонецПроцедуры

Процедура ЗаказыФлагПриИзменении(Элемент)
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	Если стр1.Флаг Тогда
		Если стр1.Контрагент.ЗапретОтгрузки тогда //+++ 22.08.2014
			Предупреждение("По клиенту: "+строка(стр1.Контрагент)+" - Запрещены ВСЕ отгрузки!");
			стр1.Флаг = ложь;
		Иначе
		фЕстьФлаги = Истина;
		КонецЕсли;	
	иначе
		фЕстьФлаги = Ложь;
		Для Каждого стр1 из Заказы Цикл
			Если стр1.Флаг Тогда
			фЕстьФлаги = Истина;
			прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	ПересчетКоличестваФлаг();
КонецПроцедуры


процедура ПересчетКоличестваФлаг()
Кол=0; Кол13=0; СумДоставки=0; Сумма=0; Расстояние=0; Вес = 0; Объем = 0; КолКамеры=0;

	 тзКонтр = Заказы.Выгрузить();
	 тзКонтр.Свернуть("Флаг, Контрагент, Заказ, Тариф", "Количество, Кубатура, КолКамеры, Вес, Объем, СуммаДоставки, Сумма, Расстояние");
	 i=0; N=тзКонтр.Количество();
 	 пока i<N Цикл //=========удалим то, что не отмечено флажками============
		 Если НЕ тзКонтр[i].флаг Тогда
			 тзКонтр.Удалить(i); 
			 N=N-1;
		 Иначе
			 i=i+1;
		 КонецЕсли;	 
	 КонецЦикла;	 

	ЭлементыФормы.Заказы.Колонки.Количество.ТекстПодвала = тзКонтр.Итог("Количество");
	ЭлементыФормы.Заказы.Колонки.Кубатура.ТекстПодвала = тзКонтр.Итог("Кубатура");
	ЭлементыФормы.Заказы.Колонки.КолКамеры.ТекстПодвала = тзКонтр.Итог("КолКамеры");
	ЭлементыФормы.Заказы.Колонки.СуммаДоставки.ТекстПодвала = тзКонтр.Итог("СуммаДоставки");
	ЭлементыФормы.Заказы.Колонки.Вес.ТекстПодвала = тзКонтр.Итог("Вес");
	
	ЭлементыФормы.Заказы.Колонки.Объем.ТекстПодвала = тзКонтр.Итог("Объем"); //+++ 
	
	ЭлементыФормы.Заказы.Колонки.Сумма.ТекстПодвала = тзКонтр.Итог("Сумма"); // уже не актуальна!
	ЭлементыФормы.Заказы.Колонки.Расстояние.ТекстПодвала = тзКонтр.Итог("Расстояние");

	ПрямойКм = тзКонтр.Итог("Расстояние");//+++ 02.04.2018
	
	Если ТарифПрямой=0 тогда
		ТарифПрямой = ?(ПрямойКм>0, Окр(СуммаПрямая /ПрямойКм,2), 0);
	Иначе
		СуммаПрямая = ПрямойКм*ТарифПрямой;
	КонецЕсли;	
	
КонецПроцедуры


Процедура неотгруженныеПриИзменении(Элемент)
	
	//спросим перед таблицу при обновлении
//+++	ЭлементыФормы.ДатаФормы.Доступность = не Неотгруженные;
		
	Если неотгруженные Тогда
	отбор1 = строка(СписокПодразделений[0].Значение);
		Предупреждение("Будет сформирован список Всех Неотгруженных заказов "+отбор1+"
		|за период с "+Формат(ДобавитьМесяц(НачалоМесяца(ЭлементыФормы.ДатаФормы.Значение),-6),"ДЛФ=D")+" по "+Формат(ЭлементыФормы.ДатаФормы.Значение + КолДнейНеважности *86400,"ДЛФ=D"),20);//!!!
	иначе
	//+++	 ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение + 1; // обязательно очистим таблицу
		Предупреждение("Будет сформирован список заказов 
					  |c Датой отгрузки - "+Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD"),10);
	КонецЕсли;	
	ДатаФормыПриИзменении(неопределено);

КонецПроцедуры


Функция ПроверитьЗакрытиеЗаказа(СсылкаЗаказ)
	Если мСписокЗаказов.Найти(СсылкаЗаказ)=Неопределено И (СсылкаЗаказ.Проведен или СсылкаЗаказ.ПометкаУдаления) Тогда//+++ 08.11.2011
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли	
КонецФункции
 
Функция ПроверитьОтгрузкуПо1Заказу(СсылкаЗаказ)
	
	попытка
		Если мСписокОтгрузок.Найти(СсылкаЗаказ)=Неопределено Тогда//+++ 08.12.2011 нет документов
		Возврат Ложь;
		Иначе
		Возврат Истина;
		КонецЕсли	
	исключение
		возврат Ложь;
	конецПопытки;
	
КонецФункции

//+++ 27.09.2013 
// проверим есть ли документ перемещения по заказу
// за период с даты отгрузки(даты) заказа - по конец текущего дня
// при условии, что товар прибыл на Буферный склад
//
Функция ПолучитьСтруктуруРезерваПоЗаказу(СсылкаЗаказ, ДатаНачПроверки='00010101') 
	
	Если ДатаНачПроверки='00010101' Тогда
		НачДата = НачалоДня( макс(СсылкаЗаказ.Дата, СсылкаЗаказ.ДатаОтгрузки) );   //Если несколько отгрузок - то дата отгрузки это дата последней!
	иначе
		НачДата = НачалоДня(ДатаНачПроверки);
	КонецЕсли;
	
	КонДата = КонецДня( ТекущаяДата() );
	
структура1 = новый Структура;
структура1.Вставить("ЕстьРезерв", Ложь);
структура1.Вставить("ЭтоРезервПеремещения", Ложь);
структура1.Вставить("ЭтоРезервОтгрузки", Ложь);
структура1.Вставить("ПеремещениеВыполнено",Ложь);
структура1.Вставить("ОтгрузкаВыполнена",Ложь);

 	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
	                |	ТоварыНаСкладахОбороты.Период КАК Период
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах.Обороты(&НачДата, &КонДата, Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ТоварыНаСкладахОбороты
	                |ГДЕ
	                |	(ТоварыНаСкладахОбороты.КоличествоПриход >= 0
	                |			ИЛИ ТоварыНаСкладахОбороты.КоличествоРасход >= 0)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	ТоварыНаСкладахОбороты.Период
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата
	                |ИЗ
	                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Период
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("НачДата", НачалоНедели(НачДата) ); //Задания и движение резерва - отслеживается за 2-3 дня (не более 7 дней)!
	 Запрос.УстановитьПараметр("КонДата", КонДата );
	 Запрос.УстановитьПараметр("ЗаказПокупателя", СсылкаЗаказ);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл // Если движение за период
		 
		 структура1.ЕстьРезерв = Выборка.Регистратор.Проведен;
		 
		 //Если несколько одинаковых документов - возьмется последний! 
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаПеремещение") Тогда
			 структура1.ЭтоРезервПеремещения = Истина;
			 структура1.ПеремещениеВыполнено = (Выборка.КоличествоПриход=Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаОтгрузку") Тогда
			 структура1.ЭтоРезервОтгрузки = Истина;
		     структура1.ОтгрузкаВыполнена    =(Выборка.КоличествоПриход = Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 КонецЕсли;
		 
	 КонецЦикла;	 
  
	 возврат структура1;	
	 
КонецФункции


Процедура ЗаказыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	флВыводитьСообщенияОЧастичнойОтгрузке = Ложь;
	
	//состояние("Идет вывод и расчет отгруженных заказов...");
	Для Каждого ОформлениеСтроки из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОбработкаПрерыванияПользователя();
				
		//Если ДанныеСтроки.Заказ.Проверен Тогда //проделен
		//	Болд = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		//	ОформлениеСтроки.Шрифт = БОЛД;
		//КонецЕсли;
		
	Если ЭлементыФормы.Флажок1.Значение Тогда //+++ 25.04.2012 - расцветка "неделька" К О Ж З Г С Ф!
		Если ДанныеСтроки.Срочность<=-14 Тогда      // 3 недели!
			ОформлениеСтроки.ЦветФона   = WebЦвета.Красный;
			//ОформлениеСтроки.Ячейки["Срочность"].ЦветТекст  = WebЦвета.Желтый;
			
		иначеЕсли ДанныеСтроки.Срочность<=0 Тогда  
			ОформлениеСтроки.ЦветФона   = WebЦвета.СветлоРозовый; // ярко красный!!!
			
		иначеЕсли ДанныеСтроки.Срочность<3 Тогда 
			ОформлениеСтроки.ЦветФона   = WebЦвета.Желтый;
			
		иначеЕсли ДанныеСтроки.Срочность<=7 Тогда 
			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
		КонецЕсли;
		
		продолжить;
		
	 ИначеЕсли ДанныеСтроки.Контрагент.ЗапретОтгрузки Тогда  
			ОформлениеСтроки.ЦветФона   = WebЦвета.СветлоРозовый; // ярко красный!!!
	 КонецЕсли;

	 
	 Если ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Заказ) и ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Заказ.ДоговорКонтрагента.ТипДоговора) тогда
		 ОформлениеСтроки.Ячейки.Организация.ОтображатьТекст = истина;
	 	ОформлениеСтроки.Ячейки.Организация.Текст = ?(ОформлениеСтроки.ДанныеСтроки.Заказ.ДоговорКонтрагента.ТипДоговора.Код = "Я0004", "ФА", 
					?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "92797", "ФА+",
						?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "П000382", "АЭ", 
							?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "93980","F",
								?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "92242","KV", "ЯШТ") ) ) ) );
	 КонецЕсли;

	
//-------------------------------------------------------------------------------
 Если ЭлементыФормы.Флажок2.Значение Тогда // цвет по отгрузке
 ЗаказЗакрыт = ПроверитьЗакрытиеЗаказа(ОформлениеСтроки.ДанныеСтроки.Заказ);
	 
	 	Если ЗаказЗакрыт Тогда //полностью снят или закрыт
			ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний; // отгруженные!
			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый; // отгруженные полностью!
			
		Иначе //НЕ ЗаказЗакрыт - надо отгружать
			
			ЕстьРеализации = ПроверитьОтгрузкуПо1Заказу(ОформлениеСтроки.ДанныеСтроки.Заказ); 
			Если ЕстьРеализации Тогда
				ОформлениеСтроки.ЦветТекста = WebЦвета.Синий; // Частично-отгруженные!
			КонецЕсли;
			
	//-------------------------------------------------------------------------------
		    Если ДанныеСтроки.флаг Тогда
				Болд = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
				ОформлениеСтроки.Шрифт = БОЛД;
				
				ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;  //просто выбран, нет отгрузок
		    КонецЕсли;
	
		ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(ОформлениеСтроки.ДанныеСтроки.Заказ, ДатаФормы);
			
			Если ЕстьРезервСтруктура.ЕстьРезерв Тогда   //есть резерв
				Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не ЕстьРезервСтруктура.ЭтоРезервОтгрузки) Тогда //идет перемещение!
					
				ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
					
				   Если ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
					 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
				   иначе	
					 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;  // ИдетПеремещение, отгрузка - невозможна!
				   КонецЕсли;
					
					
			    ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки Тогда//это резерв отгрузки
					
					Если НЕ ЕстьРезервСтруктура.ОтгрузкаВыполнена Тогда
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; // =>
						ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый; // ещё идет отгрузка!
					//иначе -фон белый или серый(закрыт заказ)
					КонецЕсли;	
					
					Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и не ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
						ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый; // ещё идет перемещение!
					КонецЕсли;
					
						
				Иначе // какой-то резерв.... смешанный или ручной
					ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  =>
					ОформлениеСтроки.ЦветФона = WebЦвета.Лосось; // !
				КонецЕсли;	
				
				
			Иначе  //нет резерва, но может быть ЗаданиеНаПеремещение 
				
				Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не ЕстьРезервСтруктура.ЭтоРезервОтгрузки) Тогда
					
					ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
 					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
					
				   Если ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
					 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
				   иначе	
					 ОформлениеСтроки.ЦветФона = WebЦвета.ТемноОранжевый; // СозданоПеремещение, но еще не распредедено по складам, ЯркоРозовый!
				   КонецЕсли;
			    ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки Тогда
					
					ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
 					ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  <=
					
				   Если не ЕстьРезервСтруктура.ОтгрузкаВыполнена Тогда
					 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
				   КонецЕсли;
				 
			    КонецЕсли;	
			КонецЕсли; //Проверкарезерва
			
		КонецЕсли; //проверка ЗаказЗакрыт
		
КонецЕсли;//Флаг2
	
	Если ДанныеСтроки.НомерСтроки = Заказы.Количество() Тогда // после вывода всех строк - выключаем
		  флВыводитьСообщенияОЧастичнойОтгрузке = Ложь;
    КонецЕсли;
	
КонецЦикла;

	ПересчетКоличестваФлаг();  //+++ 07.06.2012

    состояние(" ");
	 
КонецПроцедуры

Процедура ЗаказыСрочностьПриИзменении(Элемент)
	Сигнал();
	Предупреждение("Данная обработка - не редактирует срок отгрузки!
				   |Откройте Заказ покупателя и установите ""Дату отгрузки""!
				   |После этого нажмите [Обновить] не удаляя таблицы",30);
	
КонецПроцедуры


//+++ 23.09.2013
Функция получитьПоследнююДатуУстановкиКатегории(заказ1)
	
	ЧасОкончанияФормированияТекПоездки = 24; // +17 = до 17:00 текущего дня - на сегодня
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналИзмененийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ЖурналИзменений.СрезПоследних(&Дата
	|			,
	|			Объект = &Объект
	|				И Событие = &ТекстСобытия) КАК ЖурналИзмененийСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект", заказ1);
	Запрос.УстановитьПараметр("Дата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекстСобытия", "Изменена Категория документа.");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		датаУст = выборка.Период;
		
		Если выборка.Период >= началоДня(выборка.Период) + ЧасОкончанияФормированияТекПоездки*3600 Тогда
			датаУст = КонецДня(выборка.Период)+1;
		КонецЕсли;
		
		Если заказ1.ДатаОтгрузки < НачалоДня(датаУст) Тогда // до 12:00 текущего дня!
			сообщить("Заказ № "+строка(заказ1.Номер)+" -> дата отгрузки сдвинута с "+Формат(заказ1.ДатаОтгрузки,"ДЛФ=D")+" на: "+строка(выборка.Период), СтатусСообщения.Внимание); 
		КонецЕсли;
		
		возврат макс(заказ1.ДатаОтгрузки, датаУст); //Если дата отгрузки - будущей датой, то берется она!
		
	иначе
	//	сообщить("Для заказа: "+строка(заказ1)+" - флаг категории Установлен ранее 24.09.2013, дата отгрузки: "+Формат(заказ1.ДатаОтгрузки,"ДЛФ=D"), СтатусСообщения.Информация); 
		возврат  заказ1.ДатаОтгрузки;  //'00010101';   
	КонецЕсли;
	
КонецФункции	



//=========================================================================
 //Орлов++
Процедура ОсновныеДействияФормыЗаданиеНаОтгрузку(Кнопка)
	
	ТЗЗаказов = Заказы.Выгрузить(Новый Структура("Флаг", Истина), );
	Если ТЗЗаказов.Количество() = 0 Тогда
		Сообщить("Нет выбранных заказов");
		Возврат;
	Иначе
		
	
	Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)=неопределено Тогда
		Предупреждение("Недостаточно прав Для создания Задания на отгрузку!");
		возврат;
	КонецЕсли;
	
	 Если НЕ ЗначениеЗаполнено(Водитель) Тогда  //+++ 28.05.2013
		 Предупреждение("Заполните обязательное поле - Водитель!"); // всегда!!!
		возврат;
	КонецЕсли;
	
	Если СокрЛП(Перевозчик)="" тогда
		Предупреждение("Не заполнен Перевозчик!", 30);
		ВОЗВРАТ; //02.04.2018
	КонецЕсли;	
	Если ТипАвтомобиля.Пустая() тогда
		Предупреждение("Не заполнен ТипАвтомобиля!", 30);
		ВОЗВРАТ; //02.04.2018
	КонецЕсли;		
	
	Если СуммаПрямая=0 тогда
		Предупреждение("Не заполнена Сумма доставки!", 30);
		ВОЗВРАТ; //02.04.2018
	КонецЕсли;	
	
	Если ПрямойКм=0 тогда
		Предупреждение("Не заполнено поле Расстояния!", 30);
		ВОЗВРАТ; //02.04.2018
	КонецЕсли;	
	
	
//+++ 01.10.2013--------ограничечние на создание документа "Задание на отгрузку"-------------
флПрервать = Ложь;
	Для Каждого стр1 Из ТЗЗаказов Цикл
		ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(Стр1.Заказ, ДатаФормы);
		Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не  ЕстьРезервСтруктура.ПеремещениеВыполнено) Тогда
	    	Сообщить("Отгрузка невозможна, пока ещё выполняется ""Задание на перемещение"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
			флПрервать = Истина;	
		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки и (не  ЕстьРезервСтруктура.ОтгрузкаВыполнена) Тогда
	    	Сообщить("Уже есть ""Задание на отгрузку"" по заказу: "+строка(Стр1.Заказ));
		//	флПрервать = Истина;	только уведомление - так как может быть несколько заданий на разные регионы по 1 заказу
		КонецЕсли;	
	КонецЦикла;
	
	Если флПрервать Тогда
		возврат;
	КонецЕсли;	
//-------------------------------------------------------------------------------------------
		
		
		
		ЗаданиеСсылка = найтиЗаданиеНаОтгрузку(); 
		ЭтоИзменениеЗадания = ложь;	
		Если ЗаданиеСсылка = Документы.ЗаданиеНаОтгрузку.ПустаяСсылка() Тогда
			Задание = Документы.ЗаданиеНаОтгрузку.СоздатьДокумент();
			Задание.Дата = ДатаФормы;
			Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
			сообщить("Создано новое задание на отгрузку.");
		//	Задание.Записать();
		иначе
			Если ЗаданиеСсылка.Проведен или ЗаданиеСсылка.Выполнено Тогда
				Предупреждение( "Уже существует задание на отгрузку:
								|"+строка(ЗаданиеСсылка)+"
								|которое уже в работе или выполнено!
								|Перезаполнение задания - невозможно!");
				возврат;
			КонецЕсли;
			ЭтоИзменениеЗадания = истина;
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже существует задание на отгрузку:
			|"+строка(ЗаданиеСсылка)+"
			|Перезаполнить задание?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
			    Возврат;
			КонецЕсли;
			Задание = ЗаданиеСсылка.ПолучитьОбъект();
			Задание.ЗаказыПокупателей.Очистить();
		КонецЕсли;
		

	КонецЕсли;
	
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	
	Для Каждого СтрокаЗаказа Из ТЗЗаказов Цикл
		
		Если НЕ СтрокаЗаказа.Заказ.Проверен тогда //22.10.2013
			Сообщить("Нельзя грузить непроделенный заказ: "+строка(СтрокаЗаказа.Заказ), СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	
			
		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	//+++ 28.07.2014 Задание.Водитель              = ФамилияИнициалыФизЛица(Водитель);
	Задание.Водитель              = СокрЛП( Строка(Водитель) );
	
	если Автомобиль<>"" тогда
	 	Задание.ГосНомерАвтомобиля = Автомобиль;
	КонецЕсли;	 
	
	Если ТелефонВодителя<>"" тогда
		Задание.ТелефонВодителя       = ТелефонВодителя;
	Иначе
	Задание.ТелефонВодителя       = получитьТелефоны(Водитель);
      Если Автомобиль="" тогда
		АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
		Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 тогда
		   АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
		  i= найти(АвтомобильГосНомерАвтомобиля, " ");
			  если i>0 тогда
			  Задание.МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
			  Задание.ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			  КонецЕсли;
	      КонецЕсли;	
	  КонецЕсли;	
	КонецЕсли; 
	//+++)
	Задание.Ответственный         = глТекущийПользователь;
	Задание.Подразделение         = Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Подразделение; //24.02.2016
	//Задание.Подразделение        =  СписокПодразделений[0].Значение;
	
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	
	НадписьКатегорийВсе = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(СокрЛП(НаправлениеОтгрузки)="",""," "+СокрЛП(НаправлениеОтгрузки))+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");
	
	Задание.Контрагент  = "Отгрузка с "+СокрЛП(СписокПодразделений[0].Значение);
	Задание.Комментарий = НадписьКатегорийВсе+";
	|";
	
	//02.04.2018 ------------- новые поля ---------------
	Задание.Перевозчик = Перевозчик; 
	Задание.МаркаАвтомобиля = Строка(ТипАвтомобиля);
	Задание.Тариф      = СуммаПрямая;
	Задание.Километров = (ПрямойКм+резОбр); // 18.04.2018
	Задание.ВесМакс    = ВесМакс;
	Задание.ОбъемМакс  = ОбъемМакс;
	
	// Задание.Записать();
		
	Форма = Задание.ПолучитьФорму();
	
	//Запишем инфо о проезде в тз на форму
	ТЗЗаказов.Сортировать("Точка, Контрагент, АдресДоставки, Ответственный"); //+++ в нормальном порядке
	ЗаписатьИнфоПоПроезду(Форма, ТЗЗаказов);
	
	Если ЭтоИзменениеЗадания тогда
		ЗаписатьИнфоПоПроездуВРегистр(Задание.ссылка, ТЗЗаказов);
	Иначе
		ЗаписатьИнфоПоПроезду(Форма, ТЗЗаказов);  // только на форму!
	КонецЕсли;	

	Форма.Открыть();
КонецПроцедуры
//Орлов--


процедура ЗаписатьИнфоПоПроездуВРегистр(ЗаданиеСсылка, ТЗ)
	
	НаборЗаписей = РегистрыСведений.ИнформацияПоПроезду.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Задание.Установить(ЗаданиеСсылка); 
	НаборЗаписей.Записать();
	
 	стрОчередь0 = "";
	Для iii=0 по ТЗ.Количество()-1 Цикл
		Стр = ТЗ[iii];
		СтрокаТаб = НаборЗаписей.Добавить();
		
		СтрокаТаб.НомерОчереди = стр.Точка;
		СтрокаТаб.Контрагент   = стр.Контрагент;
		СтрокаТаб.Адрес        = стр.АдресДоставки;
		СтрокаТаб.Заказ        = стр.Заказ;
					
		Если СокрЛП(стр.Заказ.ДоговорКонтрагента.ТипДоговора.Код)="Я0004" тогда
			СтрокаТаб.Организация="Формула Авто";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92797" тогда  //ФА+
			СтрокаТаб.Организация= "Формула Авто Плюс";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "П000382" тогда
			СтрокаТаб.Организация= "АвтоЭксперт";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "93980" тогда
			СтрокаТаб.Организация= "Формула";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92242" тогда
			СтрокаТаб.Организация= "Корп.Волга";
		Иначе
			СтрокаТаб.Организация="Яршинторг";
		КонецЕсли;
		
		СтрокаТаб.Менеджер   = стр.Заказ.ДоговорКонтрагента.ОтветственноеЛицо; // стр.Ответственный;
		СтрокаТаб.Комментарий= СокрЛП(стр.Комментарий);
		
		СтрокаТаб.Задание   = ЗаданиеСсылка; 
	КонецЦикла; 
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры

Процедура ЗаписатьИнфоПоПроезду(Форм,тз)
	
	ТабНаФорме=Форм.ЭлементыФормы.ИнформацияПоПроезду.Значение;
	ТабНаФорме.Очистить(); //+++ 08.04.2015
 	Для iii=0 по ТЗ.Количество()-1 Цикл
		Стр = ТЗ[iii];

		СтрокаТаб = ТабНаФорме.Добавить(); // при перезаполнении - неправильно!  не добавляются строки, а берутся уже из регистра...
		СтрокаТаб.НомерОчереди = стр.Точка;
		СтрокаТаб.Контрагент = стр.Контрагент;
		СтрокаТаб.Адрес      = стр.АдресДоставки;
		СтрокаТаб.Заказ      = стр.Заказ;
		
		//+++ 20.04.2015
		суммаТр = стр.Заказ.ТРНал+стр.Заказ.ТРБезНал+стр.Заказ.ТРВЦене; 
		
		Если суммаТр>0 тогда
			Доля  = стр.СуммаДоставки / суммаТр;
			если Доля>1 тогда Доля=1; КонецЕсли; //НЕЛЬЗЯ делать больше!
			СтрокаТаб.ДоставкаНал   = стр.Заказ.ТРНал    * Доля;
			СтрокаТаб.ДоставкаБНал  = стр.Заказ.ТРБезНал * Доля;
			СтрокаТаб.ДоставкаВЦене = стр.Заказ.ТРВЦене  * Доля;
			Если стр.СуммаДоставки > суммаТр тогда // разность в цену
				СтрокаТаб.ДоставкаВЦене = СтрокаТаб.ДоставкаВЦене  + (стр.СуммаДоставки - суммаТр);
			КонецЕсли;
		Иначе
			СтрокаТаб.ДоставкаНал   = 0;
			СтрокаТаб.ДоставкаБНал  = 0;
			СтрокаТаб.ДоставкаВЦене = стр.СуммаДоставки;   //ВСЁ В ЦЕНЕ!
		КонецЕсли;	
		
			
		Если СокрЛП(стр.Заказ.ДоговорКонтрагента.ТипДоговора.Код)="Я0004" тогда
			СтрокаТаб.Организация="Формула Авто";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92797" тогда
			СтрокаТаб.Организация= "Формула Авто Плюс";
		//ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "П000382" тогда
		//	СтрокаТаб.Организация= "Автоэксперт";
		Иначе
			СтрокаТаб.Организация="Яршинторг";
		КонецЕсли;
		
		СтрокаТаб.Менеджер   = стр.Ответственный;
		СтрокаТаб.Комментарий= стр.Комментарий;
	КонецЦикла;
	
	Форм.РаспределитьТранспортныеРасходы(); //10.04.2018
	Форм.ЭлементыФормы.Километров.Значение = ПрямойКм;

КонецПроцедуры



функция получитьТелефоны(ВодительСсылка)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтактнаяИнформация.Представление
|ИЗ
|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
|ГДЕ
|	КонтактнаяИнформация.Объект = &Объект
|	И КонтактнаяИнформация.Тип = &Тип";
Запрос.УстановитьПараметр("Объект", ВодительСсылка);
Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
 рез = "";
Пока Выборка.Следующий() Цикл
	Если СокрЛП(Выборка.Представление)<>"" тогда
		рез = рез+СокрЛП(Выборка.Представление)+"; ";
	КонецЕсли;	
КонецЦикла;

возврат рез;
	
КонецФункции


		//+++
Функция найтиЗаданиеНаОтгрузку(этоОтгрузка=Истина)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузку.Ссылка
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
	                |ГДЕ
	                |	НАЧАЛОПЕРИОДА(ЗаданиеНаОтгрузку.Дата, ДЕНЬ) = &Дата
	                |	И (НЕ ЗаданиеНаОтгрузку.ПометкаУдаления)
	                |	И ЗаданиеНаОтгрузку.Контрагент = &Контрагент
	                |	И ЗаданиеНаОтгрузку.ВидОперации = &ВидОперации
	                |	И ЗаданиеНаОтгрузку.Комментарий ПОДОБНО &Комментарий";
					
Если не этоОтгрузка Тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст, "Документ.ЗаданиеНаОтгрузку", "Документ.ЗаданиеНаПеремещение");
	ПустойДокументСсылка = Документы.ЗаданиеНаПеремещение.пустаяСсылка();
Иначе
	ПустойДокументСсылка = Документы.ЗаданиеНаОтгрузку.пустаяСсылка();
КонецЕсли;	
	
	 Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыДвиженийПриходРасход.Расход);
	 Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаФормы) );
	 
	 Если ЗначениеЗаполнено(Водитель) Тогда  //+++ 28.05.2013
		 Запрос.УстановитьПараметр("Водитель", ФамилияИнициалыФизЛица(Водитель));
		  Запрос.Текст =  Запрос.Текст + "
		  |	И ЗаданиеНаОтгрузку.Водитель = &Водитель";
	 КонецЕсли; 
	 
	 Запрос.Текст =  Запрос.Текст + "
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаданиеНаОтгрузку.Дата УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
НаправлениеОтгрузкиТекст = "";

Для каждого стр из Маршруты Цикл
		Если стр.Пометка тогда
		  НаправлениеОтгрузкиТекст = НаправлениеОтгрузкиТекст + стр.маршрут.Наименование + "; ";
		КонецЕсли;
КонецЦикла;
//для i=0 по НаправлениеОтгрузки.Количество()-1 цикл					
//НаправлениеОтгрузкиТекст = НаправлениеОтгрузкиТекст + НаправлениеОтгрузки[i].Значение;
//КонецЦикла;
	 НадписьКатегорийВсе = 	Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(Маршруты.Количество()=0,""," "+НаправлениеОтгрузкиТекст)+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");


	 Запрос.УстановитьПараметр("Контрагент",  "Отгрузка с "+СокрЛП(СписокПодразделений[0].Значение));
	 Запрос.УстановитьПараметр("Комментарий", "%"+НадписьКатегорийВсе+"%");
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
	 	рез = Выборка.Ссылка; //первая
	иначе
		рез = ПустойДокументСсылка;
	КонецЕсли;
	
	Если Выборка.Количество()>1 Тогда
		Предупреждение("Найдено несколько документов ("+строка(Выборка.Количество())+") Для:
		|"+НадписьКатегорийВсе);
	КонецЕсли;	
		
Возврат рез;
КонецФункции


Процедура ОсновныеДействияФормыЗаданиеНаПеремещение(Кнопка)
	
	ТЗЗаказов = Заказы.Выгрузить(Новый Структура("Флаг", Истина), );
	Если ТЗЗаказов.Количество() = 0 Тогда
		Сообщить("Нет выбранных заказов");
		Возврат;
	Иначе
		
		Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)=неопределено Тогда
			Предупреждение("Недостаточно прав Для создания Задания на перемещение!");
			возврат;
		КонецЕсли;
		
		// Если НЕ ЗначениеЗаполнено(Водитель) Тогда  //+++ 28.05.2013
		// 	Предупреждение("Заполните обязательное поле - Водитель!"); // всегда!!!
		//	возврат;
		//КонецЕсли;
		
//+++ 01.10.2013--------ограничечние на создание документа "Задание на перемещение"-------------
флПрервать = Ложь;
	Для Каждого стр1 Из ТЗЗаказов Цикл
		ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(Стр1.Заказ, ДатаФормы - 86400 * 7); // проверяем резерв не более 7 дней от даты в Форме!
		
		Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не  ЕстьРезервСтруктура.ПеремещениеВыполнено) Тогда
	    	Сообщить("Будет создано новое задание на перемещение, хотя уже есть ""Задание на перемещение"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Обычное);
		//	флПрервать = Истина;	 //только уведомление - так как может быть несколько заданий на разные регионы по 1 заказу
		
		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки и (не  ЕстьРезервСтруктура.ОтгрузкаВыполнена) Тогда
	    	Сообщить("Уже есть ""Задание на отгрузку"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
			флПрервать = Истина;	 // нельзя делать перемещение, Если уже идет отгрузка!
			
		КонецЕсли;	
	КонецЦикла;
	
	Если флПрервать Тогда
		возврат;
	КонецЕсли;	
//-------------------------------------------------------------------------------------------
		
		ЗаданиеСсылка = найтиЗаданиеНаОтгрузку(Ложь); //поиск существующего задания
		
		Если ЗаданиеСсылка = Документы.ЗаданиеНаПеремещение.ПустаяСсылка() Тогда
			Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
			Задание.Дата = ДатаФормы;
			Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
			сообщить("Создано новое задание на перемещение.");
		//	Задание.Записать();
		иначе
					
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже существует задание на перемещение:
			|"+строка(ЗаданиеСсылка)+"
			|Перезаполнить задание(Да) или Создать новое(Нет)?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				Если ЗаданиеСсылка.Проведен или ЗаданиеСсылка.Выполнено Тогда
				Предупреждение( "Уже существует документ:
								|"+строка(ЗаданиеСсылка)+"
								|которое уже в работе или выполнено!
								|Перезаполнение задания - невозможно!");
				возврат;
				КонецЕсли;

				Задание = ЗаданиеСсылка.ПолучитьОбъект();
				Задание.ЗаказыПокупателей.Очистить();
			Иначе //нет
				Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
				Задание.Дата = ДатаФормы;
				Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
			КонецЕсли;
		КонецЕсли;
		

	КонецЕсли;
	
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	
	Для Каждого СтрокаЗаказа Из ТЗЗаказов Цикл
		
		Если НЕ СтрокаЗаказа.Заказ.Проверен тогда //22.10.2013
			Сообщить("Нельзя грузить непроделенный заказ: "+строка(СтрокаЗаказа.Заказ), СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	

		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	Задание.Водитель              = ФамилияИнициалыФизЛица(Водитель);
	Задание.Ответственный         = глТекущийПользователь;
	
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	
	НадписьКатегорийВсе = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(ЭлементыФормы.Север.Значение," Север","")+?(ЭлементыФормы.Юг.Значение," Юг","")+?(ЭлементыФормы.Иваново.Значение," Иваново","")+?(ЭлементыФормы.Владимир.Значение," Владимир","")
	+?(СокрЛП(СписокПодразделений[0].Значение)="",""," "+стрЗаменить(СокрЛП(СписокПодразделений[0].Значение),";"," ") )+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");

 	Задание.Контрагент  = Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Контрагент;
	Задание.Комментарий = СокрЛП(Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Номер)+" : "+НадписьКатегорийВсе+";
	|";
	
	// Задание.Записать();
		
	Форма = Задание.ПолучитьФорму();
	Форма.Открыть();

КонецПроцедуры

Процедура СписокПодразделенийПриИзменении(Элемент)
	нашиКоординаты = получитьНашиКоординатыПодр();
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	
	Если значениеЗаполнено(ЭтотОбъектВодитель) Тогда
		Водитель = ЭтотОбъектВодитель.Наименование;
		ВодительПриИзменении(неопределено);
	Иначе
		Водитель = ""; ТелефонВодителя=""; 	 Автомобиль="";
	КонецЕсли;

КонецПроцедуры

Процедура НаправлениеОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ЭтотОбъект.ПолучитьФорму("Форма2");
	Форма.ОткрытьМодально();
	
	СтрокаМаршрута = "";
	
	Для каждого стр из Маршруты Цикл
		Если стр.Пометка тогда
		  СтрокаМаршрута = СтрокаМаршрута + стр.маршрут.Наименование + "; ";
		КонецЕсли;
	КонецЦикла;
	
    Элемент.Значение = СтрокаМаршрута;
	
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, СтрДлина(ИмяЗаголовка)-3);

	
	
	ДатаФормыПриИзменении(неопределено);
	
	КоманднаяПанель1Действие9(Неопределено); // выбрать все
	
КонецПроцедуры

//27.02.2017
Процедура ОсновныеДействияФормыСоздатьЗаданиеНаПеремещение(Кнопка)
	
	ТЗЗаказов = Заказы.Выгрузить(Новый Структура("Флаг", Истина), );
	Если ТЗЗаказов.Количество() = 0 Тогда
		Предупреждение("Нет выбранных заказов",10);
		Возврат;
	КонецЕсли;
		
	Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)=неопределено Тогда
		Предупреждение("Недостаточно прав Для создания Задания на перемещение!");
		возврат;
	КонецЕсли;
		
//+++ --------ограничечние на создание документа "Задание на перемещение"-------------
флПрервать = Ложь;
	Для Каждого стр1 Из ТЗЗаказов Цикл
		ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(Стр1.Заказ, ДатаФормы);
		Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не  ЕстьРезервСтруктура.ПеремещениеВыполнено ) Тогда
	    	Сообщить("Уже выполняется ""Задание на перемещение"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
			флПрервать = Истина;	
		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки и (не  ЕстьРезервСтруктура.ОтгрузкаВыполнена) Тогда
	    	Сообщить("Уже есть ""Задание на отгрузку"" по заказу: "+строка(Стр1.Заказ));
			флПрервать = Истина;	
		КонецЕсли;	
	КонецЦикла;
	
	Если флПрервать Тогда
		возврат;
	КонецЕсли;	
	
//-------------------------------------------------------------------------------------------
		Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
		Задание.Дата = ДатаФормы;
		Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
		сообщить("Создано новое задание на перемещение.");
	
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	
	Для Каждого СтрокаЗаказа Из ТЗЗаказов Цикл
		
		Если НЕ СтрокаЗаказа.Заказ.Проверен тогда //22.10.2013
			Сообщить("Нельзя грузить непроделенный заказ: "+строка(СтрокаЗаказа.Заказ), СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	
			
		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	//+++ 28.07.2014 Задание.Водитель              = ФамилияИнициалыФизЛица(Водитель);
	Задание.Водитель              = СокрЛП( Строка(Водитель) );
	
	если Автомобиль<>"" тогда
	 	Задание.ГосНомерАвтомобиля = Автомобиль;
	КонецЕсли;	 
	
	Если ТелефонВодителя<>"" тогда
		Задание.ТелефонВодителя       = ТелефонВодителя;
	Иначе
	Задание.ТелефонВодителя       = получитьТелефоны(Водитель);
      Если Автомобиль="" тогда
		АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
		Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 тогда
		   АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
		  i= найти(АвтомобильГосНомерАвтомобиля, " ");
			  если i>0 тогда
			  Задание.МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
			  Задание.ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			  КонецЕсли;
	      КонецЕсли;	
	  КонецЕсли;	
	КонецЕсли; 
	//+++)
	Задание.Ответственный         = глТекущийПользователь;
	Задание.Подразделение         = Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Подразделение; //24.02.2016
	
	//27.02.2017
	//Если Задание.Подразделение<>справочники.Подразделения.НайтиПоКоду("00112") тогда
	//	Предупреждение("Система временно недоступна для вашего подразделения!",60);
	//	возврат;
	//КонецЕсли;	
	
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	
	НадписьКатегорийВсе = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(СокрЛП(НаправлениеОтгрузки)="",""," "+СокрЛП(НаправлениеОтгрузки))+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");
	
	Задание.Контрагент  = "Отгрузка с "+СокрЛП(СписокПодразделений[0].Значение);
	Задание.Комментарий = НадписьКатегорийВсе+";
	|";
		
	//+++ основной склад сборки
	Задание.СкладПолучатель = Задание.Подразделение.Склад;
	
	Форма = Задание.ПолучитьФорму();
	Форма.Открыть();
		
КонецПроцедуры

Процедура НаправлениеОтгрузкиОчистка(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	
	Для каждого стр из Маршруты Цикл
		
		стр.Пометка = Ложь;
		
	КонецЦикла;
	
	ЭлементыФормы.НаправлениеОтгрузки.Значение = "";
	//ПрочитатьЗаполнитьКатегорииОбъекта();
	//УстановитьНазваниеКатегорий();
КонецПроцедуры

Процедура ДействияФормыМаршруты(Кнопка)
	Форма1 = ЭтотОбъект.ПолучитьФорму("Форма1");
	Форма1.СписокПодразделений = ЭтотОбъект.СписокПодразделений;
	Форма1.Открыть();
КонецПроцедуры


 Процедура ПеревозчикНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	форма1 = Справочники.Контрагенты.ПолучитьФормуВыбора();
	Контр  = форма1.ОткрытьМодально();
	Перевозчик = Контр.НаименованиеПолное;
	Если ЭлементыФормы.Перевозчик.СписокВыбора.НайтиПоЗначению(Перевозчик)=неопределено тогда
		Предупреждение("ВНИМАНИЕ! Вы выбрали Контрагента, не являющегося Перевозчиком Яршинторга!!!", 30);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПеревозчикОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Предупреждение("Перевозчика нужно выбирать из списка!", 30);
	Перевозчик = "";
КонецПроцедуры

Процедура ТипАвтомобиляПриИзменении(Элемент)
	ВесМакс   = ТипАвтомобиля.Вес;
	ОбъемМакс = ТипАвтомобиля.Объем;
						
	рез = получитьТарифы(ВесМакс);
	ТарифПрямой     = рез.Тариф;
	//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
	//ТарифСебест     = рез.Себестоимость;
	СуммаПрямая = ТарифПрямой * ПрямойКм;
КонецПроцедуры	

функция получитьТарифы(ВесМакс=2)
	
	//Класс = ?(ВесМакс<=2,2,
	//			   ?(ВесМакс<=4,4,
	//					?(ВесМакс<=7, 7, 
	//						?(ВесМакс<=10, 10, 20))));
	//
	//табл = новый ТаблицаЗначений;
	//табл.Колонки.Добавить("Класс");
	//табл.Колонки.Добавить("Тариф");
	//табл.Колонки.Добавить("Себестоимость");
	//
	//стр1 = табл.Добавить();
	//стр1.Класс = 2;
	//стр1.Тариф = 15;
	//стр1.Себестоимость = 14; // 16 >> 14
	//
	//стр1 = табл.Добавить();
	//стр1.Класс = 4;
	//стр1.Тариф = 19;
	//стр1.Себестоимость = 16;
	//
	//стр1 = табл.Добавить();
	//стр1.Класс = 7;
	//стр1.Тариф = 21;
	//стр1.Себестоимость = 20;
	//
	//стр1 = табл.Добавить();
	//стр1.Класс = 10;
	//стр1.Тариф = 24;
	//стр1.Себестоимость = 20;

	//стр1 = табл.Добавить();
	//стр1.Класс = 20;
	////----------------------по зонам--------------------
	//стр1.Тариф = ?(ПрямойКм <=500,50, 
	//				?(ПрямойКм <=1000, 52,
	//					?(ПрямойКм <=2000,55, 56)));
	//стр1.Себестоимость = 35; // 38>>35


	//рез = табл.НайтиСтроки( новый Структура("Класс", Класс) );
	//
	//возврат рез[0];
	//================================================================
	
	//15.07.2016 г. добавили получение тарифов из регистра 
	
	Рез = новый Структура;
	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВесМакс",ВесМакс);
	Запрос.Параметры.Вставить("Прямой",ПрямойКм);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ТарифыНаПеревозкиСрезПоследних.Тоннаж) КАК ТоннажТариф
		|ПОМЕСТИТЬ ВТ_определение_тоннажа
		|ИЗ
		|	РегистрСведений.ТарифыНаПеревозки.СрезПоследних(
		|			,
		|			НЕ НаемныйТранспорт
		|				И Тоннаж >= &ВесМакс) КАК ТарифыНаПеревозкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_определение_тоннажа.ТоннажТариф,
		|	МИНИМУМ(ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража) КАК ЗонаКилометража
		|ПОМЕСТИТЬ ОпределениеКилометража
		|ИЗ
		|	ВТ_определение_тоннажа КАК ВТ_определение_тоннажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаПеревозки.СрезПоследних(
		|				,
		|				НЕ НаемныйТранспорт
		|					И ЗонаКилометража >= &Прямой) КАК ТарифыНаПеревозкиСрезПоследних
		|		ПО ВТ_определение_тоннажа.ТоннажТариф = ТарифыНаПеревозкиСрезПоследних.Тоннаж
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_определение_тоннажа.ТоннажТариф
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыНаПеревозкиСрезПоследних.ТарифЗаКм как Тариф,
		|	ТарифыНаПеревозкиСрезПоследних.СебестоимостьЗаКм как Себестоимость
		|ИЗ
		|	ОпределениеКилометража КАК ОпределениеКилометража
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозкиСрезПоследних
		|		ПО ОпределениеКилометража.ТоннажТариф = ТарифыНаПеревозкиСрезПоследних.Тоннаж
		|			И ОпределениеКилометража.ЗонаКилометража = ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража";

	Результат = Запрос.Выполнить();
 
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		 Рез.Вставить("Тариф", ВыборкаДетальныеЗаписи.Тариф);
		 Рез.Вставить("Себестоимость", ВыборкаДетальныеЗаписи.Себестоимость);		
	КонецЦикла;	

	Возврат ВыборкаДетальныеЗаписи;	
КонецФункции

Процедура ТарифПрямойПриИзменении(Элемент)
	СуммаПрямая = ТарифПрямой * (ПрямойКм+резОбр);
КонецПроцедуры

Процедура СуммаПрямаяПриИзменении(Элемент)
	
	Если ПрямойКм>0 тогда
		ТарифПрямой = Окр(СуммаПрямая / (ПрямойКм+резОбр) , 4);
	Иначе
		ТарифПрямой = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрямойКмПриИзменении(Элемент)
КонецПроцедуры

Процедура ВесМаксПриИзменении(Элемент)
	рез = получитьТарифы(ВесМакс);
  	ТарифПрямой     = рез.Тариф;
	//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
	//ТарифСебест     = рез.Себестоимость;
	СуммаПрямая = ТарифПрямой * ПрямойКм;
КонецПроцедуры
 

//============================================================

//	ИмяПапки = "\\alpha\Userdir\ALL\1C\ЯШТ_настройкиДляМенеджеров\"; 
//777 +Формат(ТекущаяДата(),"ДФ=MM")+" "+Формат(ТекущаяДата(),"ДФ=MMMM")+"\";

ИмяПапки = "\\terminal\Филиалы\ЯШТ_настройкиДляМенеджеров\2015\";

	ИмяФАЙЛАобр = "\ВнешняяОбработка_РасчетПоездкиФилиал_";
	
	ИмяЗаголовка = "Обработка  Расчет поездки - ";
	
	СписокПолейДляСохранения = новый Массив;
	СписокПолейДляСохранения.Добавить("ДатаФормы");//0
	СписокПолейДляСохранения.Добавить("НаправлениеОтгрузки");
	СписокПолейДляСохранения.Добавить("НаправлениеПродаж");
	СписокПолейДляСохранения.Добавить("неотгруженные");
	
	СписокПолейДляСохранения.Добавить("Водитель");  //4 реквизит 
	СписокПолейДляСохранения.Добавить("АдресИзИнтернета");
	
	СписокПолейДляСохранения.Добавить("Заказы");//6
 	
	СписокПолейДляСохранения.Добавить("Комментарий");
   	СписокПолейДляСохранения.Добавить("Флажок1");
   	СписокПолейДляСохранения.Добавить("Флажок2");//9

	СписокПолейДляСохранения.Добавить("СписокПодразделений");//10
//    СписокПолейДляСохранения.Добавить("Карта");

ДатаФормирования = ТекущаяДата();
ТарифДоставки = "Тариф доставки";

флВыводитьСообщенияОЧастичнойОтгрузке = ЛОЖЬ;

    //-- Москва -- 55.812340,37.664425 
	//             57.656500,39.838000
				   
мСписокЗаказов  = Новый Массив;
мСписокОтгрузок = Новый Массив;

	нашиКоординаты = "30.464081,59.838665"; //= Санкт-Петербург, Грузовой проезд, д. 14, корп., 2, лит. А
	фЕстьФлаги = Ложь;
	КолДнейНеважности = 65;  //66 дней = 3 мес вперед
	
	
//+++ 23.05.2012 - жестко заданный список Для сохранения и создания заданий на отгрузку
мМассивПользователейКоторымРазрешеноСохранять = новый массив;
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Серков"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бондаренко"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)"));

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Огородников"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Плотников"));

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Горустович Т.И"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Лигута А.С."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Гагай А.Н."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Атанов Д.Д."));  //08.08.2018

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Красюк Н.В."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Горустович Т.И.(Руководитель)"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Лигута А.С.(руководитель)"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Красюк Н.В.(руководитель)"));

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Киселева Е.Н."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Ходырева Ю.B."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Мишкин С.С."));       //12.12.2017
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Вербовская Е.В."));   //12.12.2017
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Никульников М.С."));

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Станкевич Руслан")); //28.02.2017
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Иванов Р.А.")); // 05,05,17 
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Иванов А. В.")); // 05,05,17 

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Жилин А.В."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Холодилова К. О."));

//ЕКТ
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Кравченко В.А."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Гасперт Е.А."));

//СПб - интернет-магазин
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Абрамова И.В."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Свежинин А.В."));

мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бармин В.В."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Стасев Е. А."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Щербаков А.И."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Кулажникова М.А."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Воронцова О. А."));




