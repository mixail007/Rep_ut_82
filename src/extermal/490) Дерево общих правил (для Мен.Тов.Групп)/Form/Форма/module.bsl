Перем тзОригинал, ШагДерева;

Перем ТипЦенБазовая,ТипЦенКрупныйОпт;
//Перем ТипЦенЯкорь,	ТипЦенРеккомендРозн;
Перем СписокПроизводителиШин, СписокПроизводителиДисков;
Перем СписокПапкиШин, СписокПапкиДисков;
Перем ОтборДляПроверкиДублей;
перем мас;

// ТаблицаКлиентов >> ТабличнаяЧастьКлиенты

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок ="Общие правила ценообразования ОБЩИЕ для всех клиентов";
		                                                                                                                         //новые поля (различия!!!)
	ОтборДляПроверкиДублей=новый структура("ВидТовара,Производитель,НоменклатурнаяГруппа,ВходитВПапку,Диаметр,Номенклатура,Подстрока,  ВидДефектаДляУценки, Категория");
	
	//ЗаполнитьПапки();
	
	КрасныйПорог = 1.0; //при превышении макс.процента на 3% - ярко-красные!
	Флажок2 = Истина;
	
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("Категория", "Категория");
//	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("СкидкаНаценка",   "% Скидки");
//	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("СкидкаПредоплаты","% Предоплата");
    ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("Отклонение", 	  "% Отклонение");
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ТрКлиента",		  "% Тр.Клиента");
 
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("НоменклатурнаяГруппа", "Ном.Группа");
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("Производитель", 	   "Производитель");
	
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ПодСтрока",    "ПодСтрока");
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ВходитВПапку", "Входит в папку");
	
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("Номенклатура", "Номенклатура");
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ВидДефектаДляУценки", "Вид Дефекта Для Уценки");
	
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("Бонус", "% Бонус");
	
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ВидТовара","Вид Товара");
	ЭлементыФормы.ПолеВыбора.СписокВыбора.Добавить("ТипЦен","Тип цен");

	Флажок3 = константы.ЦенообразованиеПоКатегориям.Получить();
	
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Категория.Доступность  = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Отклонение.Доступность = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Категория.Видимость  = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Отклонение.Видимость = Флажок3;
	
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Приоритет.Доступность = Флажок3;//07.03.2017

	ЭлементыФормы.ДеревоПравил.видимость = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьПравила.Видимость  = НЕ Флажок3;
	
	Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
		ЭлементыФОрмы.ОсновныеДействияФормы.Кнопки.Пересчет.доступность = истина;
	КонецЕсли;
	
	Если Флажок3 тогда
		ОбновитьДерево();
		
		для каждого стр1 из ДеревоПравил.Строки цикл
			ЭлементыФормы.ДеревоПравил.Свернуть(стр1);
    	КонецЦикла;

	иначе
		ЗаполнитьДанныеТаблицы();
		ЗаполнитьСпискиПроизводителей();
		ЭлементыФормы.ТабличнаяЧастьПравила.РежимВводаСтрок = РежимВводаСтрокТабличногоПоля.ПередТекущейСтрокой;
	КонецЕсли;

КонецПроцедуры

Процедура  ЗаполнитьДанныеТаблицы()
	ТабличнаяЧастьПравила.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	*,
	              |	Правила.НоменклатурнаяГруппа.Ответственный КАК Менеджер,
	              |	ВЫБОР
	              |		КОГДА Правила.Приоритет < 0
	              |			ТОГДА ИСТИНА
	              |		ИНАЧЕ ЛОЖЬ
	              |	КОНЕЦ КАК Исключительное
	              |ИЗ
	              |	РегистрСведений.ПравилаЦенообразованияОбщие КАК Правила
	              |ГДЕ  Правила.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
	              |УПОРЯДОЧИТЬ ПО
	              |	Правила.Приоритет";
	
	тзОригинал=Запрос.Выполнить().Выгрузить();
	Для каждого стрТЗ из тзОригинал Цикл
		ФлагЕстьЗаписи = Истина;
		НоваяСтрока=ТабличнаяЧастьПравила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, стрТЗ);
		
		Сортировка=0;  //+++ 27.01.2014  Сортировка "-1" действительно "-" приоритет!
		Если ЗначениеЗаполнено(НоваяСтрока["Номенклатура"]) или ЗначениеЗаполнено(НоваяСтрока["ПодСтрока"]) тогда
			Сортировка=-1;
		ИначеЕсли
			ЗначениеЗаполнено(НоваяСтрока["ВидТовара"])и
			не ЗначениеЗаполнено(НоваяСтрока["Производитель"])и
			не ЗначениеЗаполнено(НоваяСтрока["НоменклатурнаяГруппа"])и
			не ЗначениеЗаполнено(НоваяСтрока["ВходитВПапку"])и
			не ЗначениеЗаполнено(НоваяСтрока["Диаметр"])и
			не ЗначениеЗаполнено(НоваяСтрока["ПодСтрока"])тогда
			Сортировка=1;
		КонецЕсли;
		НоваяСтрока.Сортировка=Сортировка;
	КонецЦикла;
	ТабличнаяЧастьПравила.Сортировать("Сортировка Возр, Приоритет Возр");
	
	Если не Менеджер.Пустая() тогда//+++ 26.08.2015
		ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.Использование = Истина;
		ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.значение = Менеджер;
	Иначе
		ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.Использование = ЛОЖЬ;
    КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСпискиПроизводителей()
	Запрос =Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ  РАЗЛИЧНЫЕ
	|	Номенклатура.Производитель Производитель,
	|	Номенклатура.ВидТовара ВидТовара
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(	,
	|			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
	|				ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|				И Номенклатура.Производитель<>Значение(Справочник.Производители.ПустаяСсылка)	) 
	|УПОРЯДОЧИТЬ ПО Номенклатура.ВидТовара, Номенклатура.Производитель.Наименование	";
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	СписокПроизводителиШин.Очистить();
	СписокПроизводителиДисков.Очистить();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
			СписокПроизводителиШин.Добавить(Выборка.Производитель);	
		ИначеЕсли Выборка.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			СписокПроизводителиДисков.Добавить(Выборка.Производитель);	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТабличнаяЧастьПравилаПроизводительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПроизводителиДисков.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПроизводителиДисков[сч].Значение);
		КонецЦикла;	
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПроизводителиШин.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПроизводителиШин[сч].Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВидТовараПриИзменении(Элемент)
		ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		//Если ТекДанные.ВидТовара= Перечисления.ВидыТоваров.Диски Тогда
			ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен = ТипЦенБазовая;
		//ИначеЕсли  ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		//	ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен = ТипЦенБазовая;
		//КонецЕсли;	

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаТипЦенНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая);
	ИначеЕсли 	ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая); 
		//Элемент.СписокВыбора.Добавить(ТипЦенКрупныйОпт); 
		//Элемент.СписокВыбора.Добавить(ТипЦенЯкорь);
		//Элемент.СписокВыбора.Добавить(ТипЦенРеккомендРозн);
	КонецЕсли;	

КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	//н1=-1; н2=3;  // ВСЕ правила перезаписываются!
		
	Если Флажок3 тогда 
		н1=0; н2=3;  // без категории - уже прочитано... или (-1) пишем как по 3-ей категории!
		
		//06.02.2017	- 25.09.2018 - никто правильно не делает!	
		//Ответ = Вопрос("Выполнить пересчет перс.правил по Отклонению от всех изм. Общих правил?", РежимДиалогаВопрос.ДаНет, 0);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	 ОсновныеДействияФормыПересчет(неопределено, Истина);
		//КонецЕсли;		
		
	иначе 
		н1=-1; н2=-1; //!!! -1-1 ТОЛЬКО без категории!    или (-1 до +3) для переноса в категории >> 2=3 категории
	КонецЕсли;
	
	
	ФлагОтказ=ЛОЖЬ;

Если НЕ флажок3 тогда // проверки	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Перед сохраненением - восстановлена сортировка правил. Продолжить сохраненение?"";"
	     + " en = ""Do you want to continue?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
 
	
	//+++ 19.07.2016 отключить отбор!
	ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Сбросить();
	ТабличнаяЧастьПравила.Сортировать( "Приоритет"); //+++ обязательно еще раз!?   новые правила с 0 приоритетом!?
		
	ФлагОтказ = Ложь;
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаЧастьПравила=ТабличнаяЧастьПравила[сч];
	
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ВидТовара) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнено ОБЯЗАТЕЛЬНОЕ ПОЛЕ Вид товара! "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
		
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ТипЦен) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен тип цен! "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ОтборДляПроверкиДублей, СтрокаЧастьПравила);
		Если ТабличнаяЧастьПравила.НайтиСтроки(ОтборДляПроверкиДублей).Количество()>1 тогда
			СообщитьОбОшибке("Строка № "+СтрокаЧастьПравила.НомерСтроки+". Дубль строки! Запись: "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
	КонецЦикла;		
КонецЕсли;

Если Флажок3 тогда //------------дерево-------------------
	
	толькоИзм = ложь;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Сохранить Общие правила?"";"
	     + " en = ""Do you want to continue?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
	    Возврат;
	КонецЕсли;
	
	
	Если не Менеджер.Пустая() тогда //12.09.2016
		Предупреждение("Нельзя записывать правила, если выбран 1 менеджер!", 30);
		ВОЗВРАТ;
	КонецЕсли;
	
		номерСтроки=0;
		для каждого стр1 из ДеревоПравил.Строки цикл
			если стр1.Строки.Количество()=0 тогда
				Сообщить("Для 1 группы "+строка(стр1)+" - автоматически добавлена вложенная группа.");
				стр2 = стр1.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр2, стр1);
			КонецЕсли;	
				
			для каждого стр2 из стр1.Строки цикл
				если стр2.Строки.Количество()=0 тогда
				Сообщить("Для 2 группы "+строка(стр2)+" - автоматически добавлена такая же вложенная группа.");
				стр3 = стр2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр3, стр2);
				КонецЕсли;	

				для каждого стр3 из стр2.Строки цикл
					если стр3.Строки.Количество()=0 тогда
					Сообщить("Для 3 группы "+строка(стр3)+" - автоматически добавлена такая же вложенная группа.");
					стр4 = стр3.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр4, стр3);
					КонецЕсли;	

			        стр3.Строки.Сортировать("Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, НомерСтроки");
					//номерСтроки = номерСтроки + ШагДерева;
					  нн=0;
					
					для каждого СтрокаЧастьПравила из стр3.Строки цикл
						//нн=нн+1;
						номерСтроки = номерСтроки + 1;
	                    СтрокаЧастьПравила.НомерСтроки = номерСтроки;
						
						Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ВидТовара) Тогда
							СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен Вид товара!");
							ФлагОтказ = Истина;
						КонецЕсли;
						
						Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ТипЦен) Тогда
							СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен Тип цен!");
							ФлагОтказ = Истина;
						КонецЕсли;	
					КонецЦикла; //стр4
											
				КонецЦикла;//стр3
			КонецЦикла;//стр2
		КонецЦикла;//стр1
		
КонецЕсли;	

	Если ФлагОтказ Тогда
		Возврат;
	КонецЕсли;	
	
//============================================================================================
	НаборЗаписей = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
//	НаборЗаписей.Записать(); // ПОлная очистка!
	

	Запрос = Новый Запрос;   // загрузка 2-ой части правил...
	Если Флажок3 тогда
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
		|ГДЕ
		|	ПравилаЦенообразованияОбщие.Категория = &Категория";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
		|ГДЕ
		|	ПравилаЦенообразованияОбщие.Категория <> &Категория";
	КонецЕсли;	
	Запрос.УстановитьПараметр("Категория", перечисления.КатегорииСкидок.ПустаяСсылка() );
	Результат = Запрос.Выполнить();
	НаборЗаписей = Результат.Выгрузить(); // Таблица значений!!!
	
	
	
	
	Если НЕ Флажок3 тогда
		
//-----------сравниваем с предыдущими правилами--------------------			
	НаборЗаписей0 = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
	  НаборЗаписей0.Отбор.Категория.ВидСравнения = ВидСравнения.Равно;
	  НаборЗаписей0.Отбор.Категория.Значение     = перечисления.КатегорииСкидок.ПустаяСсылка();
	  НаборЗаписей0.Отбор.Категория.Использование = Истина;
	НаборЗаписей0.Прочитать();//17.07.2017 !!!
	
	таблНаборЗаписей0 = НаборЗаписей0.Выгрузить();
		
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаТабЧасти=ТабличнаяЧастьПравила[сч];
		//если НЕ СтрокаТабЧасти.Категория.Пустая() тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НоваяЗапись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТабЧасти);
		
//+++ 27.01.2014 ------отрицательный приоритет (<-1000) - это спецУсловие, перекрывающее все частные правила!----------------------------		
//28.09.2015 - НЕ сдвигаем на 1000, чтобы можно было у клиента назначать правило!

	    Если СтрокаТабЧасти.НомерСтроки = 1000 тогда // НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ТАКОЙ НОМЕР! 
			СтрокаТабЧасти.НомерСтроки = СтрокаТабЧасти.НомерСтроки + 1;
		КонецЕсли;	
			    
Если (СтрокаТабЧасти.Исключительное) тогда //ЦМК Импорт + Производитель!
	НоваяЗапись.Приоритет = -2000+СтрокаТабЧасти.НомерСтроки; //!!!
Иначе
	НоваяЗапись.Приоритет = СтрокаТабЧасти.НомерСтроки;
КонецЕсли;
   СтрокаТабЧасти.Приоритет = НоваяЗапись.Приоритет;
   
		//5 кодов   .Код=  
		НоваяЗапись.ID = ПолучитьНовыйIDo(НоваяЗапись);//21.12.2016
		
		НоваяЗапись.Категория = перечисления.КатегорииСкидок.ПустаяСсылка(); // ЯВНО УКАЖЕМ !
		
//------------------проверка на изменение другим менеджером----------------	17-18.07.2017	----------------
	  Если НЕ СтрокаТабЧасти.Изменен тогда
	    	строки1 = таблНаборЗаписей0.НайтиСтроки(новый Структура("ID", НоваяЗапись.ID));
	    	если строки1.Количество()>0 тогда
	    	ЗаполнитьЗначенияСвойств(НоваяЗапись, строки1[0]);
	    	НоваяЗапись.Приоритет = СтрокаТабЧасти.Приоритет;
	    	КонецЕсли;
	  КонецЕсли;
	
	КонецЦикла;
	КонецЕсли;//    Иначе // NEW	 
	
	Если Флажок3 тогда
    номерСтр = 0;
	для каждого стр1 из ДеревоПравил.Строки цикл
		для каждого стр2 из стр1.Строки цикл
			для каждого стр3 из стр2.Строки цикл
				для каждого стр4 из стр3.Строки цикл
					
				//Если толькоИзм тогда    //  17-25.07.2017 - грузим ВСЁ
				//	если не стр4.изм тогда
				//		продолжить;
				//	КонецЕсли;
				//КонецЕсли;
				
			//-------------с шагом 10... сдвигать?!-------------
				номерСтр = стр4.НомерСтроки;//02.12.2016
				//номерСтр = номерСтр + 1;		
		
			для i=н1 по н2 цикл
				НоваяЗапись=НаборЗаписей.Добавить(); //!!!
				ЗаполнитьЗначенияСвойств(НоваяЗапись, стр4 );  //ВСЕ ПОЛЯ как в Регистре!
				
				если i<0 тогда
				кат = перечисления.КатегорииСкидок.ПустаяСсылка();
					НоваяЗапись.СкидкаНаценка    = стр4["СкидкаНаценка3"];
					НоваяЗапись.СкидкаПредоплаты = стр4["СкидкаПредоплаты3"];
			 	иначе
				кат = перечисления.КатегорииСкидок.Получить(i); // от 0 до 4 => к3,2,1,VIP , B2B
					НоваяЗапись.СкидкаНаценка    = стр4["СкидкаНаценка"+строка(кат)];
					НоваяЗапись.СкидкаПредоплаты = стр4["СкидкаПредоплаты"+строка(кат)];
			    КонецЕсли;

//--------------------------------у всех правил пишем вот такое условие!!!-------------------------				
				НоваяЗапись.МаксСкидкаНаценкаРук    = стр4.СкидкаНаценка1;
				НоваяЗапись.МаксСкидкаПредоплатыРук = стр4.СкидкаПредоплаты1;
				
				НоваяЗапись.МаксСкидкаНаценка       = стр4.СкидкаНаценкаVIP;
				НоваяЗапись.МаксСкидкаПредоплаты    = стр4.СкидкаПредоплатыVIP;
				
				НоваяЗапись.Категория = кат;
				НоваяЗапись.ID = ПолучитьНовыйIDo(НоваяЗапись);  //у всех категорий - единый ID
			
				
				Если стр4.Искл и стр4.НомерСтроки>0 тогда
					НоваяЗапись.Приоритет = -2000+номерСтр; // Правил стало более 2000!
				Иначе
					НоваяЗапись.Приоритет = номерСтр;
				КонецЕсли;
				
				//30.09.2016
				НоваяЗапись.ИспользоватьТранспорт = стр4.ИспользоватьТранспорт;
						
			КонецЦикла;  //--------------------все категории с 1 номером!-----------------------
					//номерСтр = номерСтр+1;
		
				КонецЦикла;//4
			КонецЦикла;//3	
		КонецЦикла;//2	
	КонецЦикла;	//1

КонецЕсли;

	//============ Полная Очистка =======================================	
	НачатьТранзакцию();
	попытка
		НаборЗаписей1 = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
		НаборЗаписей1.Записать(); // ПОлная очистка!
		
		//для каждого стр1 из НаборЗаписей цикл  //17-18.07.2017
		//	регСв =  РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьМенеджерЗаписи();
		//	ЗаполнитьЗначенияСвойств(регСв, стр1);
		//	регСв.Записать(Истина);
		//КонецЦикла;	
		НаборЗаписей1.Загрузить( НаборЗаписей );
		НаборЗаписей1.Записать();
		ЭтаФорма.Модифицированность = ложь;	
		//Закрыть();
	ЗафиксироватьТранзакцию();	
		Предупреждение("Данные записаны!", 10);
		
	исключение
	ОтменитьТранзакцию();	
		Сообщить("ОШИБКА при записи: "+ ОписаниеОшибки(), СтатусСообщения.Внимание);
		Предупреждение("Данные НЕ изменились!", 10);
	КонецПопытки;	
	
	//после сохранения - обязательно надо перечитать!
	ОбновитьДерево();
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаНоменклатурнаяГруппаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если Не ЗначениеНеЗаполнено(ТекДанные.Производитель) Тогда
		Запрос =Новый Запрос;
		Запрос.Текст = "   ВЫБРАТЬ РАЗЛИЧНЫЕ
		|НоменклатурнаяГруппа ИЗ
		|Справочник.Номенклатура ГДЕ Производитель = &Производитель
		| И НоменклатурнаяГруппа<>Значение(Справочник.НоменклатурныеГруппы.ПустаяСсылка)" ;
		
		Запрос.УстановитьПараметр("Производитель",ТекДанные.Производитель);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.НоменклатурнаяГруппа);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВходитВПапкуНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	 ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиДисков.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиДисков[сч].Значение);
		КонецЦикла;	
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиШин.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиШин[сч].Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Сохранить изменения Правил?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КнопкаВыполнитьНажатие(неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПравилаПроверить(Кнопка)
	
	t = ТекущаяДата();
	попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Номенклатура
		|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,(НЕ Склад.Транзитный) И (НЕ Склад.ЗапретитьИспользование)) КАК ТоварыНаСкладахОстатки
		|ГДЕ ТоварыНаСкладахОстатки.КоличествоОстаток >= 4";
		Результат = Запрос.Выполнить();
		таблЗнач1 = Результат.Выгрузить();
		СписТов = новый СписокЗначений;
		СписТов.ЗагрузитьЗначения(таблЗнач1.ВыгрузитьКолонку("Номенклатура"));
		
		ТаблПравил = ТабличнаяЧастьПравила.Выгрузить();
		рез = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписТов, ЛОЖЬ, ТаблПравил);
			
		t = ТекущаяДата() - t;
		Предупреждение("Правила для "+строка(СписТов.Количество())+" товаров формируются "+строка(t)+" сек.");
		
	исключение
		Предупреждение("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;

	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
//	проверка на дубли
	ЗаполнитьЗначенияСвойств(ОтборДляПроверкиДублей,Элемент.ТекущаяСтрока);
	Если ТабличнаяЧастьПравила.НайтиСтроки(ОтборДляПроверкиДублей).Количество()>1 тогда
		Предупреждение("Такая запись уже есть!",10,"Внимание.");
	//	Отказ = истина;
		возврат;
	КонецЕсли;		
стр1 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
стр1.изменен = истина;

	//ЭтаФорма.Модифицированность = истина;
	//Сортировка=0;
	//Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Номенклатура"]) или ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ПодСтрока"]) тогда
	//	Сортировка=-1;
	//ИначеЕсли
	//	ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ВидТовара"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Производитель"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["НоменклатурнаяГруппа"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ВходитВПапку"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Диаметр"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ПодСтрока"])тогда
	//	Сортировка=1;
	//КонецЕсли;	
	//Элемент.ТекущаяСтрока.Сортировка = Сортировка;
	//ТабличнаяЧастьПравила.Сортировать("Сортировка, Приоритет");
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередУдалением(Элемент, Отказ)
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если НЕ текСтр.НоменклатурнаяГруппа.Пустая() тогда
		Если текСтр.НоменклатурнаяГруппа.Ответственный <> ПараметрыСеанса.ТекущийПользователь 
			и НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") тогда  //для админов - можно
			Предупреждение("Вы не имеете права удалять правило
							|для номенклатурной группы: "+строка(текСтр.НоменклатурнаяГруппа)+"
							|Это может делать только Ответственный за эту группу",30);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы уверены в необходимости удаления этого правила?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Отказ = Истина;
		КонецЕсли;
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = текСтр.Диаметр;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		текСтр.Диаметр = рез;
	КонецЕсли;	

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаНоменклатураПриИзменении(Элемент)
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ВидТовара = Элемент.Значение.ВидТовара;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.НоменклатурнаяГруппа = Элемент.Значение.НоменклатурнаяГруппа;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.Производитель = Элемент.Значение.Производитель;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен =  ТипЦенБазовая;
	 
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельПравилаДействие9(Кнопка)
//ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.	
ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.ВидТовара.Значение=Перечисления.ВидыТоваров.Диски;
ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.ВидТовара.Использование = Истина;

КонецПроцедуры

//================================================================
Процедура КоманднаяПанель1ОбновитьСписок(Кнопка)
	
	
	ТаблицаКлиентов.Очистить();
	ЭтаФорма.Обновить();
	ЭлементыФормы.КоманднаяПанель2.Кнопки.СоздатьОповещение.доступность = ЛОЖЬ; // после изменения - можно создать оповещение

	
	если флажок3 тогда
		стр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	иначе	
		стр1 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	КонецЕсли;

	//Если стр1.номерСтроки = 0 или стр1.Приоритет = Null тогда
	//	Предупреждение("Откройте иерархию до конца.",10);
	//КонецЕсли;	
		
	Если стр1=неопределено тогда
		Предупреждение("Выберите строку Общих правил!");
		возврат;
	КонецЕсли;
	
	Если стр1.Приоритет<= -1000 тогда // выделенное правило - вперед всех!
		ЭлементыФормы.НадписьСообщение.Заголовок = "Выбранное правило № "+строка(стр1.НомерСтроки)+" - имеет Приоритет ВЫШЕ всех клиентских!";
//		возврат;
	КонецЕсли;	
	
	Запрос = новый Запрос;
	
	если Флажок3 и ФлажокВсе тогда//07.03.2017
	Состояние("Идет поиск ВСЕХ клиентов (с персональными правилами и без) по выбранному Общему правилу...");
	
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЛОЖЬ КАК Флаг,
	                |	ПравилаЦенообразования.Контрагент,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойМенеджерКонтрагента КАК Менеджер,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение КАК Подразделение,
	                |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	                |	ЕстьNull(ПравилаЦенообразования.СкидкаНаценка,0) КАК СкидкаНаценка,
	                     |	ЕстьNull(ПравилаЦенообразования.СкидкаПредоплаты,0) КАК СкидкаПредоплаты,
	                 |	ЕстьNull(ПравилаЦенообразования.Отклонение,0) КАК Отклонение,
	               |	ПравилаЦенообразования.Диаметр,
	                |	ПравилаЦенообразования.ТипЦен КАК ТипЦен,
	                 |	ПравилаЦенообразования.Категория КАК Категория,
	                  |	ПравилаЦенообразования.ID,
	                |	ПравилаЦенообразования.Выключено,
					
	                |	&ВидТовара КАК ВидТовара,
					
				   |	&НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	&Производитель КАК Производитель,
	                |	&Номенклатура КАК Номенклатура,
	                |	&ВходитВПапку КАК ВходитВПапку,
	                |	&ПодСтрока КАК ПодСтрока,
    				|	&ВидДефектаДляУценки КАК ВидДефектаДляУценки,
					
	                |	ПравилаЦенообразования.ТрКлиента КАК ТрКлиента,
					|	ПравилаЦенообразования.Контрагент.КатегорияПокупателя КАК КатегорияПокупателя,
	                |	ПравилаЦенообразования.Бонус КАК Бонус,
					
					|  адреса.Поле2 как  РегионФактАдрес,
					|  адреса.Поле4 как  Город
		

					
	                |ИЗ
	                |	(ВЫБРАТЬ
	                |		ВсеПравила.Контрагент КАК Контрагент,
	                |		ЕСТЬNULL(персПравила.Категория, ВсеПравила.Категория) КАК Категория,
	                |		ЕСТЬNULL(персПравила.Приоритет, ВсеПравила.Приоритет +1000) КАК Приоритет,
	                |		ЕСТЬNULL(персПравила.СкидкаНаценка, ВсеПравила.СкидкаНаценка) КАК СкидкаНаценка,
	                |		ЕСТЬNULL(персПравила.СкидкаПредоплаты, ВсеПравила.СкидкаПредоплаты) КАК СкидкаПредоплаты,
	                |		ЕСТЬNULL(персПравила.Отклонение, 0) КАК Отклонение,
	                |		ВЫБОР
	                |			КОГДА ЕСТЬNULL(персПравила.ТрКлиента, 0) = 0
	                |				ТОГДА ВсеПравила.ТрКлиента
	                |			ИНАЧЕ ЕСТЬNULL(персПравила.ТрКлиента, 0)
	                |		КОНЕЦ КАК ТрКлиента,
	                |		ЕСТЬNULL(персПравила.Диаметр, ВсеПравила.Диаметр) КАК Диаметр,
	                |		ЕСТЬNULL(персПравила.ТипЦен, ВсеПравила.ТипЦен) КАК ТипЦен,
	                |		ЕСТЬNULL(персПравила.ID, ВсеПравила.ID) КАК ID,
	                |		ЕСТЬNULL(персПравила.Выключено, ЛОЖЬ) КАК Выключено,
					
	                |		ЕСТЬNULL(персПравила.Бонус, 0) КАК Бонус
					//|		, ЕСТЬNULL(персПравила.ОТК, 0) КАК ОТК,
					//|		ЕСТЬNULL(персПравила.Коэф, 0) КАК Коэф,
					//|		ЕСТЬNULL(персПравила.Бонус1, 0) КАК Бонус1
	                |	ИЗ
	                |		(ВЫБРАТЬ
	                |			Контр.Контрагент КАК Контрагент,
	                |			Контр.Категория КАК Категория,
	                |			Контр.ТрКлиента КАК ТрКлиента,
	                |			общиеПравила.Приоритет КАК Приоритет,
	                |			общиеПравила.СкидкаНаценка КАК СкидкаНаценка,
	                |			общиеПравила.СкидкаПредоплаты КАК СкидкаПредоплаты,
	                |			общиеПравила.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
	                |			общиеПравила.Диаметр КАК Диаметр,
	                |			общиеПравила.ТипЦен КАК ТипЦен,
	                |			общиеПравила.ID КАК ID
	                |		ИЗ
	                |			(ВЫБРАТЬ
	                |				ВложенныйЗапрос.Контрагент КАК Контрагент,
	                |				ЕСТЬNULL(КатегорииКлиента.Категория, ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к3)) КАК Категория,
	                |				ЕСТЬNULL(КатегорииКлиента.ТрКлиента, 0) КАК ТрКлиента
	                |			ИЗ
	                |				(ВЫБРАТЬ различные
	                |					ЗначенияСвойствОбъектов.Объект КАК Контрагент
	                |				ИЗ
	                |					РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                |				ГДЕ
				//	|				выразить (ЗначенияСвойствОбъектов.Объект как Справочник.Контрагенты).Покупатель
	                |					ЗначенияСвойствОбъектов.Свойство = &Свойство1
	                |					И ( выразить(ЗначенияСвойствОбъектов.Значение как Перечисление.КатегорииКонтрагентов)    = Значение(перечисление.КатегорииКонтрагентов.ВРазработке)
	                |					   ИЛИ выразить(ЗначенияСвойствОбъектов.Значение как Перечисление.КатегорииКонтрагентов) = Значение(перечисление.КатегорииКонтрагентов.Работающие) ) 
				  	|				)  КАК ВложенныйЗапрос
	                |					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |						КатегорииКлиента.Ссылка КАК Ссылка,
	                |						КатегорииКлиента.Категория КАК Категория,
	                |						КатегорииКлиента.ТрКлиента КАК ТрКлиента
	                |					ИЗ
	                |						Справочник.Контрагенты.КатегорияСкидок КАК КатегорииКлиента
	                |					ГДЕ
	                |						КатегорииКлиента.ВидТовара = &ВидТовара) КАК КатегорииКлиента
	                |					ПО ВложенныйЗапрос.Контрагент = КатегорииКлиента.Ссылка) КАК Контр
	                |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |					ОбщиеПр.Приоритет КАК Приоритет,
	                |					ОбщиеПр.Категория КАК Категория,
	                |					ОбщиеПр.Диаметр КАК Диаметр,
	                |					ОбщиеПр.ТипЦен КАК ТипЦен,
	                |					ОбщиеПр.СкидкаНаценка КАК СкидкаНаценка,
	                |					ОбщиеПр.СкидкаПредоплаты КАК СкидкаПредоплаты,
	                |					ОбщиеПр.ID КАК ID,
	                |					ОбщиеПр.ВидДефектаДляУценки КАК ВидДефектаДляУценки
	                |				ИЗ
	                |					РегистрСведений.ПравилаЦенообразованияОбщие КАК ОбщиеПр
	                |				ГДЕ
	                |					ОбщиеПр.ВидТовара = &ВидТовара
	                |					И ОбщиеПр.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                |					И ОбщиеПр.Производитель = &Производитель
	                |					И ОбщиеПр.Номенклатура = &Номенклатура
	                |					И ОбщиеПр.ВходитВПапку = &ВходитВПапку
	                |					И ОбщиеПр.ПодСтрока = &ПодСтрока
	                |					И ОбщиеПр.ВидДефектаДляУценки = &ВидДефектаДляУценки
	                |					И ОбщиеПр.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)) КАК общиеПравила
	                |				ПО Контр.Категория = общиеПравила.Категория) КАК ВсеПравила
	                |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |				Перс.Контрагент КАК Контрагент,
	                |				Перс.Приоритет КАК Приоритет,
	                |				Перс.Категория КАК Категория,
	                |				Перс.Отклонение КАК Отклонение,
	                |				Перс.ТрКлиента КАК ТрКлиента,
	                |				Перс.ВидТовара КАК ВидТовара,
	                |				Перс.Производитель КАК Производитель,
	                |				Перс.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |				Перс.ВходитВПапку КАК ВходитВПапку,
	                |				Перс.Диаметр КАК Диаметр,
	                |				Перс.Номенклатура КАК Номенклатура,
	                |				Перс.ТипЦен КАК ТипЦен,
	                |				Перс.ПодСтрока КАК ПодСтрока,
	                |				Перс.СкидкаНаценка КАК СкидкаНаценка,
	                |				Перс.ID КАК ID,
	                |				Перс.Выключено КАК Выключено,
	               |				Перс.СкидкаПредоплаты КАК СкидкаПредоплаты,
	                |				Перс.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
	    			 |				Перс.Бонус КАК Бонус
	                //|				,Перс.ОТК КАК ОТК,
	               // |				Перс.Коэф КАК Коэф,
	               // |				Перс.Бонус1 КАК Бонус1
            	                |			ИЗ
	                |				РегистрСведений.ПравилаЦенообразования КАК Перс
	                |			ГДЕ
	                |				Перс.ВидТовара = &ВидТовара
	                |				И Перс.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                |				И Перс.Производитель = &Производитель
	                |				И Перс.Номенклатура = &Номенклатура
	                |				И Перс.ВходитВПапку = &ВходитВПапку
	                |				И Перс.ПодСтрока = &ПодСтрока
	                |				И Перс.ВидДефектаДляУценки = &ВидДефектаДляУценки
	                |				И Перс.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)) КАК персПравила
	                |			ПО ВсеПравила.Контрагент = персПравила.Контрагент) КАК ПравилаЦенообразования
					
										//13.04.2017
					|	Левое соединение
					|(выбрать Объект, Поле2, Поле4
					|	из регистрСведений.КонтактнаяИнформация как адр 
					| Где адр.Тип = Значение(Перечисление.ТипыКонтактнойИнформации.Адрес)
					|	и адр.Вид = Значение(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
					|) как Адреса
					|	по ПравилаЦенообразования.Контрагент = Адреса.Объект
					|";
					
	Запрос.УстановитьПараметр("Свойство1", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218") ); //Категория контрагента
	
	
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	табл1 = новый ТаблицаЗначений;
	табл1.Колонки.Добавить("видТовара");
	табл1.Колонки.Добавить("Категория");
	для каждого вид1 из списокВидов цикл
			стрВид = табл1.Добавить();
			стрВид.видТовара = вид1.Значение;
			стрВид.Категория = перечисления.КатегорииСкидок.к3;
	КонецЦикла;				   
	Запрос.УстановитьПараметр("ТаблВидов", табл1);
			   
     Если стр1.Диаметр<>"" тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст, "//Диа", "");
	 Запрос.УстановитьПараметр("Диаметр", стр1.Диаметр );
	 КонецЕсли;


	КонецЕсли;
	
	Если не флажокВсе тогда
	Состояние("Идет поиск всех правил клиентов по выбранному Общему правилу...");
 
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЛОЖЬ КАК Флаг,
	                |	ПравилаЦенообразования.Выключено,
	                |	ПравилаЦенообразования.Контрагент,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
					
					|	ПравилаЦенообразования.Контрагент.КатегорияПокупателя,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение КАК Подразделение,
			   	
					|  адреса.Поле2 как  РегионФактАдрес,
					|  адреса.Поле4 как  Город,
		
	                |	ПравилаЦенообразования.Приоритет,
						
	                |	ПравилаЦенообразования.СкидкаНаценка,
	                 |	ПравилаЦенообразования.СкидкаПредоплаты,
	                 |	ПравилаЦенообразования.Бонус,
	                 |	ПравилаЦенообразования.ТипЦен,
	                 |	ПравилаЦенообразования.Производитель,
	                 |	ПравилаЦенообразования.НоменклатурнаяГруппа,
	                 |	ПравилаЦенообразования.Номенклатура,
	                |	ПравилаЦенообразования.ПодСтрока,
	                |	ПравилаЦенообразования.ВходитВПапку,
	            	//-----------------------------------------------------------
					 |	ПравилаЦенообразования.Категория,
						 |	ПравилаЦенообразования.Отклонение,
						 
					 |	ПравилаЦенообразования.ВидТовара,
					 |	ПравилаЦенообразования.ВидДефектаДляУценки,
					 |	ПравилаЦенообразования.Диаметр,
					 //25.01.2017
					 |	выбор когда ЕстьNull(ПравилаЦенообразования.ТрКлиента,0)=0 тогда
					 |		 ЕстьNull(Категории.ТрКлиента,0) иначе ЕстьNull(ПравилаЦенообразования.ТрКлиента,0) Конец 
					 |КАК ТрКлиента,
					 
					 |	ПравилаЦенообразования.ID
	         	
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
					
					//13.04.2017
					|	Левое соединение
					|(выбрать Объект, Поле2, Поле4
					|	из регистрСведений.КонтактнаяИнформация как адр 
					| Где адр.Тип = Значение(Перечисление.ТипыКонтактнойИнформации.Адрес)
					|	и адр.Вид = Значение(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
					|) как Адреса
					|	по ПравилаЦенообразования.Контрагент = Адреса.Объект
					
					 //25.01.2017
					|		ЛЕВОЕ СОЕДИНЕНИЕ ( выбрать таблКатегории.Ссылка, таблКатегории.ВидТовара, таблКатегории.ТрКлиента 
					|			из справочник.Контрагенты.КатегорияСкидок как таблКатегории
					|			ГДЕ таблКатегории.Ссылка.Покупатель и таблКатегории.Ссылка.ПометкаУдаления=ЛОЖЬ) как Категории
					|		ПО ПравилаЦенообразования.ВидТовара = Категории.ВидТовара
					|		 и ПравилаЦенообразования.Контрагент = Категории.Ссылка
					
	                |ГДЕ
	                |	ПравилаЦенообразования.ВидТовара = &ВидТовара
	                |	И ПравилаЦенообразования.Производитель = &Производитель
	                |	И ПравилаЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
					
					//+++ СТАРЫЕ/Новые!
					|	И ПравилаЦенообразования.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
				  
	                |	И ПравилаЦенообразования.Номенклатура = &Номенклатура
	                |	И ПравилаЦенообразования.ВходитВПапку = &ВходитВПапку
	                |	И ПравилаЦенообразования.ПодСтрока = &ПодСтрока
					
					|	И ПравилаЦенообразования.ВидДефектаДляУценки = &ВидДефектаДляУценки
					|//ИИИ  И ПравилаЦенообразования.Диаметр = &Диаметр
	                |Упорядочить по 
					|СкидкаНаценка убыв, Подразделение, Менеджер, Контрагент";
					
 Если не Флажок3 тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст , ".Категория <>", ".Категория =");
 КонецЕсли;
 Если стр1.Диаметр<>"" тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст,"//ИИИ", "");
	 Запрос.УстановитьПараметр("Диаметр", стр1.Диаметр );
 КонецЕсли;

 КонецЕсли;//все или не все...
 
 
 Запрос.УстановитьПараметр("Свойство",     ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90184") );
	 Запрос.УстановитьПараметр("ТипЦен", 	    стр1.ТипЦен );     // должен быть "Базовая" (код = "00008")! 
	 
	 Запрос.УстановитьПараметр("ВидТовара",     стр1.ВидТовара );
	 Запрос.УстановитьПараметр("Производитель", стр1.Производитель );
	 Запрос.УстановитьПараметр("НоменклатурнаяГруппа", стр1.НоменклатурнаяГруппа );
	 
	 
	 Запрос.УстановитьПараметр("Номенклатура", стр1.Номенклатура );
	 Запрос.УстановитьПараметр("ВходитВПапку", стр1.ВходитВПапку );
	 Запрос.УстановитьПараметр("ПодСтрока",    стр1.ПодСтрока );
	 
	 Запрос.УстановитьПараметр("ВидДефектаДляУценки", стр1.ВидДефектаДляУценки);

	  Результат = Запрос.Выполнить();
	 Если не результат.Пустой() тогда
	 	ТаблицаКлиентов.Загрузить(  Результат.Выгрузить() ); //!!!
	 КонецЕсли;
	 
	//+++ 08.12.2015 - пересчет СкидкаНаценкаКрОпт
	колПересчет = 0;
	скидкаПересчета = ?(стр1.СкидкаНаценкаКрОпт=0, 0, стр1.СкидкаНаценкаКрОпт);
	// Если скидкаПересчета<>0 тогда	
	   Для каждого стр2 из ТаблицаКлиентов цикл	
		   если стр2.ТипЦен<>стр1.ТипЦен тогда
			   Если скидкаПересчета=0 тогда	
					сообщить("По правилу № "+строка(стр2.Приоритет)+" у Клиента: "+строка(стр2.Контрагент)+" - Тип цен '"+строка(стр2.ТипЦен)+"'отличается от типа цен Общих правил! Пересчет невозможен!", СтатусСообщения.Внимание);
				    продолжить;
			   КонецЕсли;
				
				если стр1.ТипЦен<>справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005")   //из Базовой в Кр.Опт
					и стр2.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
				стр2.СкидкаНаценка   =-(1 - (1+стр2.СкидкаНаценка/100)*(1+скидкаПересчета/100))*100; 
				стр2.ТипЦен =стр1.ТипЦен;
				стр2.Флаг = истина;
				сообщить("=> Тип цен по правилу № "+строка(стр2.Приоритет)+" у Клиента: "+строка(стр2.Контрагент)+" автоматически изменен на "+строка(стр2.ТипЦен)+" Скидка: "+строка(стр2.СкидкаНаценка)+" пересчитана по скидке: "+строка(скидкаПересчета), СтатусСообщения.Информация);
				колПересчет = колПересчет +1;
				иначеЕсли стр2.ТипЦен<>справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005")
						и стр1.ТипЦен=справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005") тогда
				стр2.СкидкаНаценка   = стр2.СкидкаНаценка - скидкаПересчета;
				стр2.ТипЦен =стр1.ТипЦен;
				стр2.Флаг = истина;
				сообщить("=> Тип цен по правилу № "+строка(стр2.Приоритет)+" у Клиента: "+строка(стр2.Контрагент)+" автоматически изменен на "+строка(стр2.ТипЦен)+" Скидка: "+строка(стр2.СкидкаНаценка)+" пересчитана по скидке: "+строка(скидкаПересчета), СтатусСообщения.Информация);
				колПересчет = колПересчет +1;
				Иначе
					сообщить("По правилу № "+строка(стр2.Приоритет)+" у Клиента: "+строка(стр2.Контрагент)+" - Тип цен '"+строка(стр2.ТипЦен)+"'отличается от типа цен Общих правил!", СтатусСообщения.Внимание);
			    конецЕсли;
			КонецЕсли;
		КонецЦикла;
	//КонецЕсли;	
	//+++)
 
	 ЭлементыФормы.НадписьСообщение.Заголовок = "Для правила № "+строка(стр1.НомерСтроки)+" - найдено "+строка(ТаблицаКлиентов.Количество())+" зависимых правил клиентов. "
	 +?(колПересчет>0," Автоматически пересчитано "+строка(колПересчет)+" правил по проценту пересчета: "+строка(скидкаПересчета), "");
	 
	 
	 Состояние("Найдено "+строка(ТаблицаКлиентов.Количество())+" правил клиентов.");

КонецПроцедуры

//================================================================
Процедура КоманднаяПанель1ПересчитатьСкидкуКлиентов(Кнопка)
	
	// после пересчета, но еще не записали ничего... нельзя создать оповещение
	ЭлементыФормы.КоманднаяПанель2.Кнопки.СоздатьОповещение.доступность = истина; 

	Если Флажок3 тогда
		стр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	иначе
		стр1 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	КонецЕсли;

	Если стр1 =неопределено тогда
		Предупреждение("Выберите строку Общих правил!");
		возврат;
	КонецЕсли;	
	
	стр0СкидкаНаценкаОбщие = получитьОбщееПравило(стр1.Приоритет);
	Если стр0СкидкаНаценкаОбщие=неопределено тогда
		Предупреждение("Не найдено Общее правило №"+строка(стр1.Приоритет));
		возврат;
	КонецЕсли;	
	
	Коэфф = 1;
	Если Флажок3 тогда
		максСкидки     =стр1.СкидкаНаценкаVIP;					   
    	максПредоплаты =стр1.СкидкаПредоплатыVIP;					
	иначе
		максСкидки     =стр1.МаксСкидкаНаценка;					   
	    максПредоплаты =стр1.МаксСкидкаПредоплаты;					
	КонецЕсли;
 //--------------------------Ручное изменение--------------------------	
	Проц=-1;
	Если коэфф=1 тогда
		 Режим = РежимДиалогаВопрос.ДаНетОтмена;
		Ответ = Вопрос("Выберите вариант изменения "+?(Переключатель1=0,"Скидки","Предоплаты")+": 
						|на фиксированный Процент  - нажмите 'Да'
						|на Процент Каскадом       - нажмите 'Нет'", Режим, 30);
						
		ПроцЧ = формат(Проц,"ЧДЦ=2");//25.01.2017 устранение ,						
		Если Ответ = КодВозвратаДиалога.да Тогда
			ВвестиЗначение(ПроцЧ,"Фикс.процент");
				попытка//25.01.2017 
					Проц = число(ПроцЧ);
				исключение
					Предупреждение("'"+ПроцЧ+"' содержит недопустимые символы!
					|Изменение не выполнены!", 30);
				Возврат;
				КонецПопытки;
		ИначеЕсли Ответ = КодВозвратаДиалога.нет Тогда
			Если ВвестиЗначение(ПроцЧ,"Относительный процент") тогда
				попытка//25.01.2017 
					Проц = число(ПроцЧ);
				исключение
					Предупреждение("'"+ПроцЧ+"' содержит недопустимые символы!
					|Изменение не выполнены!", 30);
				Возврат;
				КонецПопытки;
		
			Коэфф =  (1+Проц/100);
			
			КонецЕсли;
		Иначе  // отмена
			ВОЗВРАТ;
		КонецЕсли;
	КонецЕсли;
	
	колИзм=0;
	Для каждого стр2 из ТаблицаКлиентов цикл
		Если НЕ стр2.Флаг тогда	продолжить; 
		КонецЕсли;
		
	колИзм=колИзм+1;
			
		Если Переключатель1=0 тогда		  
		    стр2.СкидкаНаценка =  ?(Коэфф=1, стр2.СкидкаНаценка + проц, 
													Окр( ((1+ стр2.СкидкаНаценка/100)*(1+Проц/100) - 1)*100 , 2) );
			если Флажок3 тогда
			ПроверитьПереходКатегории(стр2, стр1);
			КонецЕсли;	
		
		ИначеЕсли Переключатель1=1 тогда //Предоплата
			   стр2.СкидкаПредоплаты = ?(Коэфф=1, стр2.СкидкаПредоплаты + проц, 
			                                        Окр( ((1+ стр2.СкидкаНаценка/100)*(1+Проц/100) - 1)*100 , 2) );
			   Если  стр2.СкидкаПредоплаты>0 тогда //+++ 04.02.2016 - Скидка предоплаты всегда "-"!
				    стр2.СкидкаПредоплаты = 0;
				КонецЕсли;	
				
		ИначеЕсли Переключатель1=2 и ПолеВыбора="Отклонение" тогда //Отклонение
			стр2.Отклонение = ?(Коэфф=1, стр2.Отклонение + проц, 
			                                        Окр( ((1+ стр2.Отклонение/100)*(1+Проц/100) - 1)*100 , 2) );
													
			если Флажок3 тогда
				Если стр2.Категория = перечисления.КатегорииСкидок.B2B тогда  //29.05.2017
					Если стр2.ВидТовара <> перечисления.ВидыТоваров.Шины тогда
						Предупреждение("Категорию B2B можно назначать только для шин!", 10);
			            прервать;
					КонецЕсли;	
				стр2.СкидкаНаценка    = 0;
				иначе
				стр2.СкидкаНаценка    = стр1["СкидкаНаценка"+мас.Получить(стр2.Категория)] + стр2.Отклонение;
				КонецЕсли;
			ПроверитьПереходКатегории(стр2, стр1);
			КонецЕсли;	
		
		КонецЕсли;		 
		
	КонецЦикла;
	 Предупреждение("Изменено "+строка(колИзм)+" строк.", 10);
	//ТаблицаКлиентов.Сортировать("СкидкаНаценка, СкидкаНаценка");
	
КонецПроцедуры


Процедура КоманднаяПанель2Действие(Кнопка)
	
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	i=0;
Если Переключатель1 < 2 тогда	
	если текСтр<>неопределено тогда
		ФиксЗнач = ?(Переключатель1 = 0,  текСтр.СкидкаНаценка, текСтр.СкидкаПредоплаты);
	КонецЕсли;
	
	ФиксЗначЧ = формат(ФиксЗнач,"ЧДЦ=2"); //25.01.2017 чтобы , не сносилась
	Если не ВвестиЗначение(ФиксЗначЧ, "Введите фикс.% скидки") тогда
		Предупреждение("Изменение отменено!", 10);
		возврат;
	КонецЕсли;
	
	попытка
		ФиксЗначЧ = стрЗаменить(ФиксЗначЧ," ",""); // убираем все пробелы!
		ФиксЗначЧ = стрЗаменить(ФиксЗначЧ,"%",""); // убираем знак % - защита от дебилов
		ФиксЗнач = число(ФиксЗначЧ); //25.01.2017
	исключение
		Предупреждение("Значение '"+ФиксЗначЧ+"' содержит недопустимые символы!",10);
		возврат;
	КонецПопытки;	
	
	Если Переключатель1=0 и ФиксЗнач<-70 тогда
		Предупреждение("Значение % Скидки не может быть больше -70%!", 10);
		ФиксЗнач=-70;
	ИначеЕсли Переключатель1=1 и ФиксЗнач<-30 тогда
		Предупреждение("Значение % Предоплаты не может быть больше -30%!", 10);
		ФиксЗнач=-70;
	КонецЕсли;	
		
	для каждого стр1 из ТаблицаКлиентов цикл
		Если НЕ стр1.Флаг тогда	продолжить; 
		КонецЕсли;
		
		Если Флажок3 и стр1.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
			Если стр1.ВидТовара <> перечисления.ВидыТоваров.Шины тогда
				Предупреждение("Категорию B2B можно назначать только для шин!", 10);
                прервать;
			КонецЕсли;	
        	стр1.СкидкаПредоплаты = 0; 
			стр1.СкидкаНаценка    = 0; 
		Иначе
			Если Переключатель1=0 тогда	
				стр1.СкидкаНаценка = ФиксЗнач; 
			иначе
				стр1.СкидкаПредоплаты = ФиксЗнач; 
			КонецЕсли;
		КонецЕсли;
			
		если Флажок3 тогда
			ПроверитьПереходКатегории(стр1, текСтр0);
		КонецЕсли;	
		i=i+1;
	КонецЦикла;
	
//============================Любое значение======================	
Иначе
	
	если текСтр=неопределено тогда
		Предупреждение("Нажмите в ячейку того значения, которое хотите изменить...",10);
		возврат;
	КонецЕсли;	
	
	если ПолеВыбора="" тогда	
		 ПолеВыбора = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущаяКолонка.Имя;
 	КонецЕсли;
 
	 назв = ПолеВыбора;
	 
	  Если прав( назв, 1)="2" тогда  
		  назв = лев( назв, стрДлина( назв )-1 );
	  КонецЕсли;			  
		НовЗнач  = текСтр[назв];
		       //не число!
	Если не ВвестиЗначение(НовЗнач, "Новое значение "+назв) тогда
		возврат;
	КонецЕсли;		
	
	Для каждого стр1 из ТаблицаКлиентов цикл
		Если НЕ стр1.Флаг тогда	продолжить; 
		КонецЕсли;
		
		стр1[назв] = НовЗнач;
		Если назв="Категория" и Флажок3 тогда
			Если НовЗнач=Перечисления.КатегорииСкидок.B2B тогда
			стр1.СкидкаНаценка    = 0;
			стр1.СкидкаПредоплаты = 0;
			стр1.Отклонение = 0;
			Иначе
			стр1.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(стр1.Категория)];
			стр1.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(стр1.Категория)];
			стр1.Отклонение = 0;
			КонецЕсли;
		КонецЕсли;	
		
		Если назв="Отклонение" и Флажок3 тогда //06.02.2017
			Если НовЗнач=Перечисления.КатегорииСкидок.B2B тогда
			стр1.СкидкаНаценка    = 0;
			стр1.СкидкаПредоплаты = 0;
			стр1.Отклонение = 0;
			Иначе
 			стр1.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(стр1.Категория)] + НовЗнач;
			проверитьПереходКатегории(стр1, текСтр0);	
			КонецЕсли;
		КонецЕсли;	
	
		i=i+1;
	КонецЦикла;
		
КонецЕсли;

	Если i=0 тогда
		Предупреждение("     Нет выбранных правил для изменения!
						|Выберите правила для установки фикс.процента!", 30);
	иначе					
		Предупреждение("Изменено "+строка(i)+" выбранных правил!", 10);
	КонецЕсли;

КонецПроцедуры


функция получитьОбщееПравило(Приоритет)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	|	ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт,
	|	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка
	|ИЗ
	|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
	|ГДЕ
	|	ПравилаЦенообразованияОбщие.Приоритет = &Приоритет";
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		возврат выборка;
	иначе
		возврат неопределено;
	КонецЕсли;
КонецФункции


функция ПравилаЦенообразованияПолучить(Контрагент, Приоритет=1, ID="")
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ первые 1
	               |	ПравилаЦенообразования.Контрагент,
	               |	ПравилаЦенообразования.Приоритет,
	               |	ПравилаЦенообразования.ВидТовара,
	               |	ПравилаЦенообразования.Производитель,
	               |	ПравилаЦенообразования.НоменклатурнаяГруппа,
	               |	ПравилаЦенообразования.ВходитВПапку,
	               |	ПравилаЦенообразования.Диаметр,
	               |	ПравилаЦенообразования.Номенклатура,
	               |	ПравилаЦенообразования.ТипЦен,
	               |	ПравилаЦенообразования.ПодСтрока,
	               |	ПравилаЦенообразования.СкидкаНаценка,
	               |	ПравилаЦенообразования.ID,
	               |	ПравилаЦенообразования.Выключено,
	               |	ПравилаЦенообразования.Бонус,
	               |	ПравилаЦенообразования.СкидкаПредоплаты
				   
				   |//ДопПоля
				   
				   |ИЗ
	               |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
	               |ГДЕ
				   |	ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
	               |	и ПравилаЦенообразования.Контрагент = &Контрагент
	               |	И ПравилаЦенообразования.Приоритет = &Приоритет
				   |	И ПравилаЦенообразования.ID =&ID";
	Если Флажок3 тогда
		Запрос.Текст = стрЗаменить(запрос.Текст, ".Категория =",".Категория <>");
		//07.02.2017
		Запрос.Текст = стрЗаменить(запрос.Текст, "//ДопПоля",	", ПравилаЦенообразования.Категория,
				   |	ПравилаЦенообразования.Отклонение,
				   |	ПравилаЦенообразования.ТрКлиента");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ID", ID);
	Результат = Запрос.Выполнить();
	ТабЗнач = Результат.Выгрузить();
	
	Если ТабЗнач.Количество()>0 тогда
		возврат ТабЗнач[0];
	иначе
		возврат неопределено;
	КонецЕсли;

КонецФункции

Процедура КоманднаяПанель1ЗаписатьПравилаКлиентов(Кнопка)
	
	ЭлементыФормы.КоманднаяПанель2.Кнопки.СоздатьОповещение.доступность = истина; // после изменения - можно создать оповещение
	
	Если Флажок3 тогда //12.02.2017 макс = VIP
	текСтрОбщ  = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;	
	максСкидка = текСтрОбщ.СкидкаНаценкаVIP;
	иначе //как было	
	текСтрОбщ  = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;	
	максСкидка = текСтрОбщ.МаксСкидкаНаценка;
	КонецЕсли;

	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите записать все выбранные правила клиентов?", Режим, 60,  КодВозвратаДиалога.Нет, "Изменение правил клиентов");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Предупреждение("Изменение правил отменено.",10);
		возврат;
	КонецЕсли;
 	флФлаг = истина;//только выбранные ВСЕГДА !!!			
	КолИзм = 0;
	для каждого стр2 из ТаблицаКлиентов цикл
		если флФлаг тогда
			Если не стр2.флаг тогда продолжить;
			КонецЕсли;
		КонецЕсли;	
		
	регСв1  = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
	регСв2  = ПравилаЦенообразованияПолучить(стр2.Контрагент, стр2.Приоритет, стр2.ID);
	
	//в Журнал - то, что было >> стало
		 Если регСв2 = неопределено и стр2.Приоритет>=0 тогда //07.03.2017
			 Сообщить(" ошибка при записи нового правила № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"!  НОВЫЕ правила можно записывать только из карточки клиента!", СтатусСообщения.Внимание);
			 
		 ИначеЕсли регСв2 = неопределено и стр2.Приоритет<0 тогда  //07.03.2017 - новое правило?
			    сообщить("НОВОЕ Исключительное правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"!", СтатусСообщения.Информация);
			 	естьИзм = истина;  //новое правило?!
				
		 Иначе //регСв2 <> неопределено	 
			 ЗаполнитьЗначенияСвойств( регСв1, регСв2 );
			
			естьИзм = (регСв2.СкидкаНаценка<>стр2.СкидкаНаценка 
					  или регСв2.СкидкаПредоплаты<>стр2.СкидкаПредоплаты
					  или регСв2.Бонус <> стр2.Бонус
					  
					  //+++ 08.12.2015
			          или регСв2.ВидТовара<>стр2.ВидТовара
			          или регСв2.ТипЦен<>стр2.ТипЦен
					  или регСв2.НоменклатурнаяГруппа<>стр2.НоменклатурнаяГруппа
					  или регСв2.Номенклатура<>стр2.Номенклатура
					  или регСв2.ПодСтрока<>стр2.ПодСтрока
					  или регСв2.ВходитВПапку<>стр2.ВходитВПапку
					  или регСв2.Производитель<>стр2.Производитель  //26.01.2017
					  
					  //07.03.2017
					  или регСв2.Приоритет<>стр2.Приоритет
					  
					  или регСв2.Диаметр<>стр2.Диаметр //26.05.2017
				  
					  //07.02.2017  
					  или регСв2.Выключено<>стр2.Выключено);	
					  
			Если Флажок3 тогда
				естьИзм1 =регСв2.Отклонение<>стр2.Отклонение//10.03.2017
				  	  или регСв2.Категория<>стр2.Категория
				  	  или регСв2.ТрКлиента<>стр2.ТрКлиента//25.01.2017   не надо так!
						  ;
 				естьИзм = естьИзм или естьИзм1;
				
				если регСв2.Категория<>стр2.Категория тогда //10.03.2017 - удаляем старое правило с другой	категорией!
				регСвУд = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств( регСвУд, регСв2 );
				регСвУд.Удалить();
				КонецЕсли;
			
			КонецЕсли;
		 КонецЕсли;
		
			стр2.флаг = ЛОЖЬ; // автовыключение флага если не было изменений!
			
		Если естьИзм тогда //ТОЛЬКО ИЗМЕНЕНИЯ скидки или вкл/выкл!
				стр2.Флаг = Истина;  // ФЛАГАМИ все  ИЗМЕНЕННЫЕ ЭЛЕМЕНТЫ
				регСв1.Контрагент =  стр2.Контрагент;
			попытка
				
			Если стр2.Приоритет>1000 тогда // общие правила нельзя писать в персональные!
			стр2.Приоритет = стр2.Приоритет-1000;
			КонецЕсли;
				
		    текстСообщ = ?(стр2.Выключено,"ВЫКЛЮЧЕНО", "Записано ")+" правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|"
			+?(регСв1.СкидкаНаценка<>стр2.СкидкаНаценка, "НаценкаСкидка: "+строка(регСв1.СкидкаНаценка)+">>"+строка(стр2.СкидкаНаценка)+"; ","")
			+?(регСв1.СкидкаПредоплаты<>стр2.СкидкаПредоплаты, "Предоплата:"+строка(регСв1.СкидкаПредоплаты)+">>"+строка(стр2.СкидкаПредоплаты)+"; ", "")
			+?(регСв1.Бонус<>стр2.Бонус, "Бонус="+строка(регСв1.Бонус)+">>"+строка(стр2.Бонус)+"; ","")
			
			//+++ 08.12.2015
			+?(регСв1.ВидТовара<>стр2.ВидТовара, "ВидТовара="+строка(регСв1.ВидТовара)+">>"+строка(стр2.ВидТовара)+"; ","")
			+?(регСв1.ТипЦен<>стр2.ТипЦен, "ТипЦен="+строка(регСв1.ТипЦен)+">>"+строка(стр2.ТипЦен)+"; ","")
			
			+?(регСв1.НоменклатурнаяГруппа<>стр2.НоменклатурнаяГруппа, ";НоменклатурнаяГруппа="
					+строка(регСв1.НоменклатурнаяГруппа)+">>"+строка(стр2.НоменклатурнаяГруппа)+"; ","")
			
			+?(регСв1.Производитель<>стр2.Производитель, "Производитель="+строка(регСв1.Производитель)+">>"+строка(стр2.Производитель)+"; ","") //26.01.2017

			+?(регСв1.Номенклатура<>стр2.Номенклатура, "Номенклатура="+строка(регСв1.Номенклатура)+">>"+строка(стр2.Номенклатура)+"; ","")
			+?(регСв1.ПодСтрока<>стр2.ПодСтрока, "ПодСтрока="+строка(регСв1.ПодСтрока)+">>"+строка(стр2.ПодСтрока)+"; ","")
			+?(регСв1.ВходитВПапку<>стр2.ВходитВПапку, "ВходитВПапку="+строка(регСв1.ВходитВПапку)+">>"+строка(стр2.ВходитВПапку)+"; ","")
			
			//+++ 07.02.2017
			+?(Флажок3, 
				?(регСв1.Отклонение<>стр2.Отклонение,"Отклонение="+строка(регСв1.Отклонение)+">>"+строка(стр2.Отклонение)+"; ","")
				+?(регСв1.Категория<>стр2.Категория,"Категория="+строка(регСв1.Категория)+">>"+строка(стр2.Категория)+"; ","")
				+?(регСв1.ТрКлиента<>стр2.ТрКлиента,"ТрКлиента="+строка(регСв1.ТрКлиента)+">>"+строка(стр2.ТрКлиента)+"; ","")
			,"")
			//+++ 07.03.2017	
			+?(регСв1.Приоритет<>стр2.Приоритет,"Приоритет="+строка(регСв1.Приоритет)+">>"+строка(стр2.Приоритет)+"; ","")
			
			//+++ 26.05.2017 - изменение диаметра тоже возможно!
			+?(регСв1.Диаметр<>стр2.Диаметр,"Диаметр="+строка(регСв1.Диаметр)+">>"+строка(стр2.Диаметр)+"; ","")
			;

			
			регСв1.Выключено	 = стр2.Выключено;
			
			регСв1.СкидкаНаценка    = стр2.СкидкаНаценка;
			регСв1.СкидкаПредоплаты = стр2.СкидкаПредоплаты;
			
			//+++ 08.12.2015
			регСв1.ВидТовара=стр2.ВидТовара;  //13.04.2017 !!!
			регСв1.ТипЦен=стр2.ТипЦен;
			
			регСв1.НоменклатурнаяГруппа=стр2.НоменклатурнаяГруппа;
			регСв1.Производитель=стр2.Производитель;//26.01.2017
			
			регСв1.ПодСтрока   =стр2.ПодСтрока;
			регСв1.ВходитВПапку=стр2.ВходитВПапку;
			
			регСв1.Номенклатура=стр2.Номенклатура;
			регСв1.ВидДефектаДляУценки=стр2.ВидДефектаДляУценки;
			
			регСв1.Бонус	   =стр2.Бонус;
			
			//+++ 07.03.2017
			регСв1.Приоритет =стр2.Приоритет;
			//+++ 26.05.2017
			регСв1.Диаметр   =стр2.Диаметр; 
		
		Если Флажок3 тогда
			регСв1.Категория =стр2.Категория; //25.01.201
			регСв1.Отклонение=стр2.Отклонение; //25.01.201
			регСв1.ТрКлиента =стр2.ТрКлиента; //25.01.201
			
			Если стр2.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017  -- тип цен меняется, НО! ID - остаётся прежним!
				регСв1.ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032"); //10.04.2018
			КонецЕсли;
			
		КонецЕсли;
		
			//+++ СТАРЫЕ правила
			Если не Флажок3 тогда
				регСв1.Категория = перечисления.КатегорииСкидок.ПустаяСсылка();
			КонецЕсли;
			
			регСв1.ID = ПолучитьНовыйID(стр2); //+++ 08/12/2016 измененный ID
			
			регСв1.Записать(Истина);
			Сообщить(регСв1.ID+":"+текстСообщ);
			
		//----------------------Журнал изменений------------------------------	
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий = текстСообщ;
		 записьЖурнала.Записать(истина); //перезапись
			исключение
			Сообщить("Ошибка при записи правила № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		    КолИзм = КолИзм +1;
			КонецЕсли;
		
	КонецЦикла;

	Режим = РежимДиалогаВопрос.ДаНет;
	Если Вопрос("Отправить уведомления менеджерам
		        |об изменениях правил Клиентов?", Режим, 30, 
		       КодВозвратаДиалога.Да, "Уведомления", КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		КоманднаяПанель1СоздатьОповещение(неопределено);
	КонецЕсли;

	КоманднаяПанель1ОбновитьСписок(неопределено); // надо обновить после записи!

КонецПроцедуры




Процедура КолВШапке()
	
	табл123 = ТаблицаКлиентов.Выгрузить(,"Контрагент");
	табл123.Свернуть("Контрагент");
	
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Контрагент.ТекстШапки = ?(нРазличных=0,"Контрагент", "Контрагент("+строка(нРазличных)+")");
	
	табл123 = ТаблицаКлиентов.Выгрузить(,"Менеджер");
	табл123.Свернуть("Менеджер");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Менеджер.ТекстШапки = ?(нРазличных=0,"Менеджер", "Менеджер("+строка(нРазличных)+")");

	
	табл123 = ТаблицаКлиентов.Выгрузить(,"РегионФактАдрес");
	табл123.Свернуть("РегионФактАдрес");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.РегионФактАдрес.ТекстШапки = ?(нРазличных=0,"Регион (факт.адрес)", "Регион(факт.адрес)-"+строка(нРазличных) );

	табл123 = ТаблицаКлиентов.Выгрузить(,"Город");
	табл123.Свернуть("Город");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Город.ТекстШапки = ?(нРазличных=0,"Город", "Город ("+строка(нРазличных)+")");
	
		
	табл2 = ТаблицаКлиентов.Выгрузить(,"Выключено");
 	табл3 = ТаблицаКлиентов.Выгрузить(,"Флаг");
	нВыкл = табл2.Итог("Выключено");
	нФлаг = табл3.Итог("Флаг");
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Выключено.ТекстШапки = ?(нВыкл=0,"Выкл.", "Выкл.("+строка(нВыкл)+")");
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Флаг.ТекстШапки = ?(нФлаг=0,"Выбран", "Выбран("+строка(нФлаг)+")");
	
	Если нФлаг>0 тогда
		Если ЭлементыФормы.ДеревоПравил.Доступность тогда
			Предупреждение("Пока есть выбранные персональные правила - Общие правила блокируются от изменения!", 60);
		КонецЕсли;	
		ЭлементыФормы.ДеревоПравил.Доступность = ложь;
	Иначе
		Если не ЭлементыФормы.ДеревоПравил.Доступность тогда
			Предупреждение("Таблица общих правил разблокирована.", 60);
		КонецЕсли;	
		ЭлементыФормы.ДеревоПравил.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ТабличнаяЧастьПравилаПриАктивизацииСтроки(Элемент)
	
	ТаблицаКлиентов.Очистить();
	КолВШапке();	
	
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если текСтр<>неопределено
		 и Флажок2 тогда
		КоманднаяПанель1ОбновитьСписок(неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаКлиентовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если НЕ Флажок3 тогда
		стр0 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		максСкидка = ?(стр0=неопределено, 200, стр0.МаксСкидкаНаценка);
		максПредоплата = стр0.МаксСкидкаПредоплаты; //+++ 22.12.2014
	иначе
		стр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		максСкидка = ?(стр0=неопределено, 200, стр0.СкидкаНаценкаVIP);
		максПредоплата = ?(стр0=неопределено,-10,стр0.СкидкаПредоплатыVIP); //+++ 22.12.2014
	КонецЕсли;
	
	для каждого стр1 из ОформленияСтрок цикл
		
	//цвет текста
		попытка	
		
	Если Переключатель1=0 тогда
		
		Если стр1.ДанныеСтроки.СкидкаНаценка+стр1.ДанныеСтроки.Бонус < максСкидка тогда
			стр1.ЦветТекста = WebЦвета.ТемноБордовый;
			Если (КрасныйПорог>=0 
				 и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус)<=КрасныйПорог 
				 и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус)>=0
				 )
				 или (КрасныйПорог<0 
				     и  (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус)>=КрасныйПорог 
				     и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус)<=0
				     ) тогда
				стр1.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;	
			
		ИначеЕсли стр1.ДанныеСтроки.СкидкаНаценка>200 тогда
			стр1.ЦветТекста = WebЦвета.ТемноСиний;
		КонецЕсли;	
		//+++ 22.12.2014	
		Если стр1.ДанныеСтроки.СкидкаПредоплаты < максПредоплата тогда
			стр1.ЦветФона = WebЦвета.Желтый;
			Если (КрасныйПорог>=0 
				 и  (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>=0
				  ) 
				 или 
				 (КрасныйПорог<0 
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>=КрасныйПорог
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=0
				 )  тогда
				стр1.ЦветФона = WebЦвета.СветлоЖелтый;
			КонецЕсли;	
		КонецЕсли;
				

	Иначе  // цвет текста по Предоплате
		
		Если стр1.ДанныеСтроки.СкидкаПредоплаты < максПредоплата тогда
			стр1.ЦветТекста = WebЦвета.ТемноБордовый;
			Если (КрасныйПорог>=0
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>0
				) или 
				(КрасныйПорог<0
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>0
				) тогда
			стр1.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	//выкл.
	Если стр1.ДанныеСтроки.Выключено тогда
		стр1.ЦветФона = webЦвета.СветлоСерый;//курсив
	//выбран
		Если стр1.ДанныеСтроки.Флаг тогда
		стр1.Шрифт = новый Шрифт(стр1.Шрифт,,,Истина, Истина);//жирный курсив
		КонецЕсли;
	
 	ИначеЕсли стр1.ДанныеСтроки.Флаг тогда
		стр1.Шрифт = новый Шрифт(стр1.Шрифт,,,Истина);//жирный 
	КонецЕсли;
	
		исключение
	    сообщить( ОписаниеОшибки(), СтатусСообщения.Внимание );
		КонецПопытки;

	КонецЦикла;	

КолВШапке();	

КонецПроцедуры

Процедура КоманднаяПанель1СоздатьОповещение(Кнопка)

//====================Оповещение менеджерам=======================
ТаблицаКлиентов.Сортировать("Менеджер, Контрагент, Приоритет"); 
мен = неопределено; Контр = неопределено;
текстОповещения = ""; 
 зад1 = неопределено;
   КолОповещ = 0;
	для каждого стр2 из ТаблицаКлиентов цикл
		Если не стр2.флаг тогда 
			продолжить;
		КонецЕсли;	
		
	Если мен=стр2.Менеджер тогда
		Если контр<>стр2.Контрагент тогда
			зад1.Контрагент = справочники.Контрагенты.ПустаяСсылка(); // несколько клиентов!
			текстОповещения = текстОповещения+"
			|Контрагент: "+строка(стр2.Контрагент)+" : ";
			контр=стр2.Контрагент;
 		КонецЕсли;
	Иначе//		мен<>стр2.Менеджер
		Если текстОповещения<>"" тогда   //запись предыдущей задачи
			зад1.СодержаниеСобытия = текстОповещения;
			зад1.Записать(РежимЗаписиДокумента.Проведение);
			КолОповещ = КолОповещ + 1;
			сообщить(строка(КолОповещ)+" Создано уведомление по ""Событию"" для "+строка(зад1.Ответственный), СтатусСообщения.Информация);
		КонецЕсли;
		зад1 = СоздатьСобытиеПользователя(стр2);// создание новой!
	        мен  =стр2.Менеджер;
			контр=стр2.Контрагент;
			текстОповещения = "Контрагент: "+строка(стр2.Контрагент)+" : ";
	КонецЕсли;	//мен
		
	стр2.ID = ПолучитьНовыйID(стр2);//новый ID !
	 	текстОповещения = текстОповещения+ ?(стр2.выключено,"Правило - ВЫКЛЮЧЕНО!","")+"
					|   Правило: "+получитьТекстПравилаПоID(стр2.ID)+"  ( № "+строка(стр2.Приоритет)+" ) - изменено.
					|";
		
  КонецЦикла;	
  
//-------------последнее----------------------------  
Если текстОповещения <>"" тогда
  зад1.СодержаниеСобытия = текстОповещения;
  зад1.Записать(РежимЗаписиДокумента.Проведение);
  КолОповещ = КолОповещ + 1;
  сообщить(строка(КолОповещ)+" Создано уведомление по ""Событию"" для "+строка(зад1.Ответственный), СтатусСообщения.Информация);
КонецЕсли;

  Предупреждение("Сформировано "+строка(КолОповещ)+" документов ""Событие""
  				 | с включенным оповещение для Менеджеров.",60);
  
КонецПроцедуры




функция СоздатьСобытиеПользователя(стр2)
	
	зад1 = документы.Событие.СоздатьДокумент();  //задачи.ЗадачиПользователя.СоздатьЗадачу();
	
	//13.01.2017
	Если Флажок3 тогда
		стр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Иначе
		стр0 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	КонецЕсли;
	
	подробное = получитьТекстПравилаПоID( стр0.ID );
	зад1.ОписаниеСобытия = "Изменено "+?(Флажок3,"НОВОЕ","старое")+" правило: "+подробное;
	
	зад1.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	зад1.Контрагент = стр2.Контрагент;
	
	зад1.Ответственный  = стр2.менеджер;
	 зад1.Комментарий    = "Изменены или Выключены правила Менеджером тов.группы: "+глТекущийПользователь;
	 
	зад1.Дата = ТекущаяДата();
	зад1.НачалоСобытия 	  = ТекущаяДата();
	зад1.ОкончаниеСобытия = КонецДня(ТекущаяДата());
	
	зад1.НапомнитьОСобытии = истина;
	зад1.ВремяНапоминания  = ТекущаяДата();
	
	зад1.ВидСобытия		  = Перечисления.ВидыСобытий.Прочее;
	
	зад1.ТипСобытия		  = Перечисления.ВходящееИсходящееСобытие.Входящее;
	
	зад1.Важность		  = Перечисления.Важность.Высокая;
	зад1.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано; //  да/нет
	
	возврат зад1;
	
КонецФункции

Процедура КоманднаяПанель1УтвердитьЭтиСкидки(Кнопка)
	выкл = ложь;
	// после пересчета, но еще не записали ничего... нельзя создать оповещение
	ЭлементыФормы.КоманднаяПанель2.Кнопки.СоздатьОповещение.доступность = ЛОЖЬ; 
	выкл = ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка;	
	
	i=0;
	для каждого стр1 из ТаблицаКлиентов цикл
		Если не стр1.флаг тогда продолжить; КонецЕсли;
		выкл = НЕ стр1.Выключено; // первая попавшаяся... 
		i=1;
	    прервать;
	КонецЦикла;
	
	если i=0 тогда 
		если Вопрос("Изменить все "+?(выкл, "ВЫКЛ.", "ВКЛ.")+" правила?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да тогда
			для каждого стр1 из ТаблицаКлиентов цикл
				Если стр1.Выключено = выкл тогда 
					стр1.Выключено = не выкл;
					стр1.Флаг=Истина;
					i=1;
				иначе стр1.Флаг=ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка = не выкл;
	Иначе	
		для каждого стр1 из ТаблицаКлиентов цикл
			Если не стр1.флаг тогда продолжить; КонецЕсли;
			стр1.Выключено = выкл;
		КонецЦикла;	
		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка = выкл;
    КонецЕсли;
	
	Если ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка тогда
		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Текст = "Вкл";
	Иначе
		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Текст ="Выкл";
	КонецЕсли;

КонецПроцедуры



Процедура КрасныйПорогРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.1;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.ОбновитьСтроки();
КонецПроцедуры

Процедура КоманднаяПанельПравилаОбновить(Кнопка)
	
	Если Флажок3 тогда
		ОбновитьДерево();
		возврат;
	КонецЕсли;	
	
	
	//проверим изменился ли регистр
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ *,
	              |	Правила.НоменклатурнаяГруппа.Ответственный КАК Менеджер,
	              |	ВЫБОР
	              |		КОГДА Правила.Приоритет < 0
	              |			ТОГДА ИСТИНА
	              |		ИНАЧЕ ЛОЖЬ
	              |	КОНЕЦ КАК Исключительное
	              |ИЗ
	              |	РегистрСведений.ПравилаЦенообразованияОбщие КАК Правила
				  //26.09.2016
	              |ГДЕ Правила.Категория = Значение(перечисление.КатегорииСкидок.ПустаяСсылка)
	              |УПОРЯДОЧИТЬ ПО
	              |	Правила.Приоритет";
	тзтекСостояниеРегистра=Запрос.Выполнить().Выгрузить();
	//РегИзменился=не СравнитьТаблицыНаборовЗаписей(тзОригинал, тзтекСостояниеРегистра);
	//   	
	//Если РегИзменился тогда
	//	Предупреждение("Регистр изменился, таблица будет перезаполнена!",10);
		ЗаполнитьДанныеТаблицы();
	//Иначе
	//	Предупреждение("Регистр НЕ изменился!", 30);
	//КонецЕсли;	
	Если ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные=неопределено тогда
		текСтр=1
	Иначе текСтр=ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.НомерСтроки;
	КонецЕсли;
   ЭлементыФормы.ТабличнаяЧастьПравила.ТекущаяСтрока = ТабличнаяЧастьПравила[текСтр-1];
   
   КоманднаяПанель1ОбновитьСписок(неопределено); // при обновлении правил - по текущему - найдём клиентов
   
  
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Изменен тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
	КонецЕсли;
	
	Если ДанныеСтроки.Исключительное тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноЗеленый;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1Заменить(Кнопка)
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
Если Переключатель1<2 тогда	
	если текСтр<>неопределено тогда
		СтарЗнач = ?(Переключатель1 = 0,  текСтр.СкидкаНаценка, текСтр.СкидкаПредоплаты);
	иначе
		СтарЗнач = 0;
	КонецЕсли;
	
	СтарЗначЧ = формат(СтарЗнач,"ЧДЦ=2"); //25.01.2017 чтобы , не сносилась
	Если не ВвестиЗначение(СтарЗначЧ, "Введите искомое значение "+?(Переключатель1 = 0, "Скидки", "Предоплаты")) тогда
		Предупреждение("Изменение - отменено!", 10);
		возврат;
	КонецЕсли;	
	
	попытка //+++ 25.01.2017
		СтарЗнач = число(СтарЗначЧ);
	Исключение 
		Предупреждение("'"+СтарЗначЧ+"' содержит недопустиные символы!
		|Изменения не выполнены!",10);	
		Возврат;
	КонецПопытки;
	
	НовЗначЧ = СтарЗначЧ;
	Если не ВвестиЗначение(НовЗначЧ, "Введите новое значение "+?(Переключатель1 = 0, "Скидки", "Предоплаты")) тогда
		Предупреждение("Изменение - отменено!", 10);
		возврат;
	КонецЕсли;
	
	попытка //+++ 25.01.2017
		НовЗнач = число(НовЗначЧ);
	Исключение 
		Предупреждение("'"+НовЗначЧ+"' содержит недопустиные символы!
						|Изменения не выполнены!",10);	
		Возврат;
	КонецПопытки;
	
		Для каждого стр2 из ТаблицаКлиентов цикл
			стр2.Флаг = ЛОЖЬ;
			Если Флажок3 и стр2.Категория = перечисления.КатегорииСкидок.B2B тогда
				Если стр2.ВидТовара <> перечисления.ВидыТоваров.Шины тогда
				Предупреждение("Категорию B2B можно назначать только для шин!", 10);
                прервать;
				КонецЕсли;	

				стр2.СкидкаНаценка    = 0;
				стр2.СкидкаПредоплаты = 0;
				стр2.Флаг = Истина;
			Иначе	
				Если Переключатель1 = 0 и стр2.СкидкаНаценка = СтарЗнач тогда
					стр2.СкидкаНаценка = НовЗнач;
					стр2.Флаг = Истина;
				ИначеЕсли Переключатель1 = 1 и стр2.СкидкаПредоплаты = СтарЗнач тогда
					стр2.СкидкаПредоплаты= НовЗнач;
					стр2.Флаг = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Флажок3 тогда
			ПроверитьПереходКатегории(стр2, текСтр0);
			КонецЕсли;	
	
	    КонецЦикла;
		
//======================================================================================
Иначе
	если текСтр=неопределено тогда
		Предупреждение("Нажмите в ячейку того значения, которое хотите изменить...",10);
		возврат;
	КонецЕсли;	
	
	если ПолеВыбора="" тогда	
		 ПолеВыбора = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущаяКолонка.Имя;
 	КонецЕсли;
 
	 назв = ПолеВыбора;
	 
	  Если прав( назв, 1)="2" тогда  
		  назв = лев( назв, стрДлина( назв )-1 );
	  КонецЕсли;			  
		СтарЗнач = текСтр[назв];
		НовЗнач  = текСтр[назв];
		   //не число!
	Если не ВвестиЗначение(СтарЗнач, "Старое значение "+назв) тогда
		Предупреждение("Изменение - отменено!", 10);
		возврат;
	КонецЕсли;		
	      //не число!
	Если не ВвестиЗначение(НовЗнач, "Новое значение "+назв) тогда
		Предупреждение("Изменение - отменено!", 10);
		возврат;
	КонецЕсли;		
	
	Для каждого стр2 из ТаблицаКлиентов цикл
			стр2.Флаг = ЛОЖЬ;
			Если стр2[назв] = СтарЗнач тогда
				стр2[назв] = НовЗнач;
				стр2.Флаг = Истина;
				
			Если назв="Категория" и Флажок3 тогда
				Если  НовЗнач=Перечисления.КатегорииСкидок.B2B 	тогда	
					стр2.СкидкаНаценка    = 0;
					стр2.СкидкаПредоплаты = 0;
				иначе	
					стр2.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(стр2.Категория)];
					стр2.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(стр2.Категория)];
				КонецЕсли;	
				стр2.Отклонение = 0;
 			КонецЕсли;	

			Если назв="Отклонение" и Флажок3 тогда //06.02.2017
				Если  стр2.Категория=Перечисления.КатегорииСкидок.B2B тогда	
					стр2.СкидкаНаценка    = 0;
					стр2.СкидкаПредоплаты = 0;
					стр2.Отклонение = 0;
				иначе	
					стр2.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(стр2.Категория)] + НовЗнач;
				КонецЕсли;
			проверитьПереходКатегории(стр2, текСтр0);	
 			КонецЕсли;	

			КонецЕсли;
    КонецЦикла;
КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанель2ТипЦен(Кнопка)
		
КонецПроцедуры


Процедура КоманднаяПанель1Флаг0(Кнопка)
	установитьФлаги(0);
КонецПроцедуры

Процедура КоманднаяПанель1Флаг1(Кнопка)
	установитьФлаги(0);
	установитьФлаги(1, истина);
КонецПроцедуры

Процедура КоманднаяПанель1Флаг2(Кнопка)
	установитьФлаги(2);
КонецПроцедуры

//процедура установитьФлаги(ном=0)
//	для каждого стр1 из ТаблицаКлиентов цикл
//		стр1.Флаг = ?(ном=1, Истина, 
//						?(ном=2, НЕ стр1.Флаг, ЛОЖЬ));
//	КонецЦикла;	
//КонецПроцедуры	

процедура установитьФлаги(ном=0, поВидимойТаблице=ЛОЖЬ)
	
Если поВидимойТаблице тогда
	для каждого стр1 из ТаблицаКлиентов цикл
	если ЭлементыФОрмы.ТабличнаяЧастьКлиенты.ПроверитьСтроку( стр1 ) тогда
		стр1.Флаг = ?(ном=1, Истина, 
			?(ном=2, НЕ стр1.Флаг, ЛОЖЬ));
	КонецЕсли;		
	КонецЦикла;	
Иначе	
	для каждого стр1 из ТаблицаКлиентов цикл
		стр1.Флаг = ?(ном=1, Истина, 
			?(ном=2, НЕ стр1.Флаг, ЛОЖЬ));
	КонецЦикла;	
КонецЕсли;
КонецПроцедуры	

Процедура Переключатель1ПриИзменении(Элемент)
	
	ЭлементыФормы.Переключатель1.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=0);
	ЭлементыФормы.Переключатель2.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=1);
	ЭлементыФормы.Переключатель3.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=2);
	
	ЭлементыФормы.ПолеВыбора.доступность = (Переключатель1=2);
	ЭлементыФормы.КоманднаяПанель2.Кнопки.ПересчитатьСкидкуКлиентов.Доступность = (Переключатель1<>2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.ТипЦен.доступность = (Переключатель1=2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.ЗаменитьСкидку.доступность = (Переключатель1<>2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.Действие.доступность 		 = (Переключатель1<>2);
	
КонецПроцедуры

Процедура ТаблицаКлиентовПередУдалением(Элемент, Отказ)
	
	Стр2 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
	Если Вопрос(" Вы действительно хотите УДАЛИТЬ Правило № "+строка(стр2.Приоритет)+"
			    |клиента: "+строка(Стр2.Контрагент)+" из его Персональных правил?", РежимДиалогаВопрос.ДаНет, 0, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	Отказ = ЛОЖЬ;
	КонецЕсли;
	
	Если Вопрос("  УДАЛЕНИЕ персональных правил Клиента опасная операция!
			    |Вы действительно хотите выполнить именно УДАЛЕНИЕ правил?", РежимДиалогаВопрос.ДаНет, 10, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	Отказ = ЛОЖЬ;
	КонецЕсли;

	Если не Отказ тогда
		регСв = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( регСв, стр2);
		
		попытка
			регСв.Удалить();
			сообщить("Удалено правило №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент),СтатусСообщения.Информация); 
			
		//----------------------Журнал изменений------------------------------	
			текстСообщ = "УДАЛЕНО правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|НаценкаСкидка: "+строка(стр2.СкидкаНаценка)
			+"; Предоплата:"+строка(стр2.СкидкаПредоплаты)
			+"; Бонус="+строка(стр2.Бонус)
			+"; ТипЦен="+строка(стр2.ТипЦен)
			+"; НоменклатурнаяГруппа="+строка(стр2.НоменклатурнаяГруппа)
			+"; Номенклатура="+строка(стр2.Номенклатура)
			+"; ПодСтрока="+строка(стр2.ПодСтрока)
			+"; ВходитВПапку="+строка(стр2.ВходитВПапку);
			
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий = текстСообщ;
		 записьЖурнала.Записать(истина); //перезапись

		исключение	
			сообщить("Ошибка при удалении правила №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент)+":"+ОписаниеОшибки(),СтатусСообщения.Внимание); 
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель2Удалить(Кнопка)
	Если Вопрос("     Вы действительно хотите УДАЛИТЬ ВСЕ 
				|выбранные Правила клиентов из их Персональных правил?", РежимДиалогаВопрос.ДаНет, 0, 
		     КодВозвратаДиалога.Нет, "Удалить" ) <> КодВозвратаДиалога.Да Тогда
    	ВОЗВРАТ;
	КонецЕсли;
	Если Вопрос("  УДАЛЕНИЕ персональных правил Клиентов опасная операция!
				|Вы действительно хотите выполнить именно УДАЛЕНИЕ правил?", РежимДиалогаВопрос.ДаНет, 10, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	ВОЗВРАТ;
	КонецЕсли;

сообщить(строка(ТекущаяДата())+" ------ начало удаления выбранных правил Клиентов ----");
N=0;
	для каждого стр2 из ТаблицаКлиентов цикл
		Если не стр2.Флаг тогда
			продолжить;
		КонецЕсли;	
		
		регСв = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( регСв, стр2);
		
		попытка
			регСв.Удалить();
			сообщить("Удалено правило №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент),СтатусСообщения.Информация); 
			N=N+1;
		//----------------------Журнал изменений------------------------------	
			текстСообщ = "УДАЛЕНО правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|НаценкаСкидка: "+строка(стр2.СкидкаНаценка)
			+"; Предоплата:"+строка(стр2.СкидкаПредоплаты)
			+"; Бонус="+строка(стр2.Бонус)
			+"; ТипЦен="+строка(стр2.ТипЦен)
			+"; НоменклатурнаяГруппа="+строка(стр2.НоменклатурнаяГруппа)
			+"; Номенклатура="+строка(стр2.Номенклатура)
			+"; ПодСтрока="+строка(стр2.ПодСтрока)
			+"; ВходитВПапку="+строка(стр2.ВходитВПапку);
			
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий = текстСообщ;
		 записьЖурнала.Записать(истина); //перезапись

		исключение	
			сообщить("Ошибка при удалении правила №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент)+":"+ОписаниеОшибки(),СтатусСообщения.Внимание); 
		КонецПопытки;

	КонецЦикла;	
сообщить("------ Удалено "+строка(N)+" выбранных правил Клиентов ----");

	Предупреждение("Удалено "+строка(N)+" правил клиентов!");
КонецПроцедуры

Процедура Флажок3ПриИзменении(Элемент)
	
	ЭлементыФормы.ДеревоПравил.видимость = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьПравила.Видимость  = НЕ Флажок3;
	
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Категория.Доступность  = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Отклонение.Доступность = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Категория.Видимость  = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Отклонение.Видимость = Флажок3;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Пересчет.Доступность = Флажок3;
	
	Если Флажок3 тогда
		//Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
		//ОбновитьДерево(ЛОЖЬ); // возможность загрузить из старых - в новые
		//иначе
		ОбновитьДерево();
		//КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

//============== пока только для визуализации ==========================
процедура ОбновитьДерево(фл = Истина)

	Если не фл тогда
		фл = (Вопрос("Загрузить по новым категориям?", РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Да);
	иначе
		фл1 = Константы.ЦенообразованиеПоКатегориям.Получить();
        Если не фл1 тогда
		Предупреждение("Новые правила (по категориям) ещё НЕ РАБОТАЮТ!
					   |    Эти правила - в разработке...", 10);
		КонецЕсли;			   
	КонецЕсли;

	Запрос = Новый Запрос;
	Если фл тогда
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ПравилаЦенообразования.Приоритет < 0
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК Искл,
					
					|	ПравилаЦенообразования.*,
					
					|	ПравилаЦенообразования.Приоритет КАК Приоритет,
			
	                |	ЕстьNull(ПравилаЦенообразования0.СкидкаНаценка, ЕстьNull(ПравилаЦенообразования1.СкидкаНаценка, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) ) ) КАК СкидкаНаценкаVIP,
	                |	ЕстьNull(ПравилаЦенообразования0.СкидкаПредоплаты, ЕстьNull(ПравилаЦенообразования1.СкидкаПредоплаты, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) ) ) КАК СкидкаПредоплатыVIP,
										
	                |	ЕстьNull(ПравилаЦенообразования1.СкидкаНаценка, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) ) КАК СкидкаНаценка1,
	                |	ЕстьNull(ПравилаЦенообразования1.СкидкаПредоплаты, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) ) КАК СкидкаПредоплаты1,
					
					|	ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) КАК СкидкаНаценка2,
					|	ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) КАК СкидкаПредоплаты2,
					
	                |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка3,
	                |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты3
									
									
					
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразования
					
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ2
				  	|					ГДЕ ПЦ2.Категория = &Категория
					|//И ПЦ2.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования2
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования2.Приоритет
	
					|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ1
				  	|					ГДЕ ПЦ1.Категория = &Категория1
					|//И ПЦ1.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования1
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования1.Приоритет

					|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ0
				  	|					ГДЕ ПЦ0.Категория = &Категория0
					|//И ПЦ0.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования0
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования0.Приоритет



	                |ГДЕ ( ПравилаЦенообразования.Категория = &Категория3 
				//	|		или ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
					|	  )
					|//И ПравилаЦенообразования.НоменклатурнаяГруппа.Ответственный = &Менеджер

	                |УПОРЯДОЧИТЬ ПО
					|	ВидТовара УБЫВ,
	                |	НоменклатурнаяГруппа УБЫВ,
	                |	Производитель  УБЫВ,
					
	                |	Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, Диаметр убыв,
										
	                |	Приоритет
	                |ИТОГИ
	                |	МАКСИМУМ(СкидкаНаценкаКрОпт),
	                |	МАКСИМУМ(СкидкаНаценкаVIP),
	                |	МАКСИМУМ(СкидкаПредоплатыVIP),
	                |	МАКСИМУМ(СкидкаНаценка1),
	                |	МАКСИМУМ(СкидкаПредоплаты1),
	                |	МАКСИМУМ(СкидкаНаценка2),
	                |	МАКСИМУМ(СкидкаПредоплаты2),
	                |	МАКСИМУМ(СкидкаНаценка3),
	                |	МАКСИМУМ(СкидкаПредоплаты3),
	                |	МАКСИМУМ(ТрСПб),
	                |	МАКСИМУМ(ТрРнД),
	                |	МАКСИМУМ(ТрЕкт),
					//24.09.2018
					|	МАКСИМУМ(ТрТл),
				   
					
					 |	МАКСИМУМ(ИспользоватьТранспорт)
	                |ПО
	                |	ВидТовара,
	                |	НоменклатурнаяГруппа,
	                |	Производитель
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
	Запрос.УстановитьПараметр("Категория0", перечисления.КатегорииСкидок.VIP);
	Запрос.УстановитьПараметр("Категория1", перечисления.КатегорииСкидок.к1);
	Запрос.УстановитьПараметр("Категория", перечисления.КатегорииСкидок.к2);
	Запрос.УстановитьПараметр("Категория3", перечисления.КатегорииСкидок.к3);
	
	Иначе
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ПравилаЦенообразования.Приоритет < 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Искл,
	               |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	               |	ПравилаЦенообразования.Категория КАК Категория,
	               |	ПравилаЦенообразования.ВидТовара КАК ВидТовара,
	               |	ПравилаЦенообразования.Производитель КАК Производитель,
				   
	               |	ПравилаЦенообразования.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ПравилаЦенообразования.ВходитВПапку,
	               |	ПравилаЦенообразования.Диаметр,
	               |	ПравилаЦенообразования.Номенклатура,
	               |	ПравилаЦенообразования.ТипЦен,
	               |	ПравилаЦенообразования.ПодСтрока,
	               |	ПравилаЦенообразования.СкидкаНаценкаКрОпт КАК СкидкаНаценкаКрОпт,
	               |	ПравилаЦенообразования.МаксСкидкаНаценка КАК СкидкаНаценкаVIP,
	               |	ПравилаЦенообразования.МаксСкидкаПредоплаты КАК СкидкаПредоплатыVIP,
	               |	ПравилаЦенообразования.МаксСкидкаНаценкаРук КАК СкидкаНаценка1,
	               |	ПравилаЦенообразования.МаксСкидкаПредоплатыРук КАК СкидкаПредоплаты1,
	               |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка2,
	               |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты2,
	               |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка3,
	               |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты3,
	               |	ПравилаЦенообразования.ID,
	               |	ПравилаЦенообразования.ВидДефектаДляУценки,
	                 |	ПравилаЦенообразования.ТрСПб КАК ТрСПб,
	               |	ПравилаЦенообразования.ТрРнД КАК ТрРнД,
	               |	ПравилаЦенообразования.ТрЕкт КАК ТрЕкт,
				   //24.09.2018
			       |	ПравилаЦенообразования.ТрТл КАК ТрТл,
				   |	ПравилаЦенообразования.ИспользоватьТранспорт
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразования
				   |
	               |ГДЕ ПравилаЦенообразования.ВидТовара<>Значение(Перечисление.ВидыТоваров.ПустаяСсылка)
				   |  И ( ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
				//   |	или ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.к3) 
				    | )
				   |//И ПравилаЦенообразования.НоменклатурнаяГруппа.Ответственный = &Менеджер
	               |
	                |УПОРЯДОЧИТЬ ПО
					|	ВидТовара УБЫВ,
	                |	НоменклатурнаяГруппа УБЫВ,
	                |	Производитель  УБЫВ,
					
	                |	Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, Диаметр убыв,
										
	                |	Приоритет

	               |ИТОГИ
	               |	МАКСИМУМ(СкидкаНаценкаКрОпт),
	               |	МАКСИМУМ(СкидкаНаценкаVIP),
	               |	МАКСИМУМ(СкидкаПредоплатыVIP),
	               |	МАКСИМУМ(СкидкаНаценка1),
	               |	МАКСИМУМ(СкидкаПредоплаты1),
	               |	МАКСИМУМ(СкидкаНаценка2),
	               |	МАКСИМУМ(СкидкаПредоплаты2),
	               |	МАКСИМУМ(СкидкаНаценка3),
	               |	МАКСИМУМ(СкидкаПредоплаты3),
	               |	МАКСИМУМ(ТрСПб),
	               |	МАКСИМУМ(ТрРнД),
	               |	МАКСИМУМ(ТрЕкт),
				   //24.09.2018
			       |	МАКСИМУМ(ТрТл)
				   
	               |ПО
	               |	ВидТовара,
	               |	НоменклатурнаяГруппа,
	               |	Производитель
	               |АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;			   
				   
	Если не Менеджер.Пустая() тогда
	Запрос.текст = стрЗаменить(Запрос.текст, "//И ", "И ");
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	выборка1 = Результат.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
	ДеревоПравил.Строки.Очистить();
	номерСтроки = 0;
	Пока выборка1.Следующий() цикл
		стр1 = ДеревоПравил.Строки.Добавить();
		ЗаполнитьЗначенияСвойств( стр1, выборка1);
		//номерСтроки = номерСтроки+1;
		стр1.НомерСтроки = 0;
			
		выборка2 = выборка1.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
		Пока выборка2.Следующий() цикл
			стр2 = стр1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, выборка2);
			//номерСтроки = номерСтроки+1;
			стр2.НомерСтроки = 0;
		
			выборка3 = выборка2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
			Пока выборка3.Следующий() цикл
				стр3 = стр2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр3, выборка3);
				номерСтроки = номерСтроки+ШагДерева;
				стр3.НомерСтроки = номерСтроки;
		
				выборка4 = выборка3.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
				нн=1;
				Пока выборка4.Следующий() цикл
				стр4 = стр3.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр4, выборка4);
				стр4.НомерСтроки = номерСтроки + нн;
				Если номерСтроки + нн = 1000 тогда // НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ТАКОЙ НОМЕР! 
					нн = нн+1;
				КонецЕсли;	
			    тип = стр4.типЦен;
				нн=нн+1;
			КонецЦикла;//4
			
			//17.07.2017 - более 124 дисков в 1 категории - сдвигаем следующий шаг!
			Если номерСтроки+ШагДерева <  номерСтроки+нн тогда 
				 номерСтроки =  номерСтроки + нн - ШагДерева;
			 КонецЕсли;
			 
			    стр3.типЦен = тип;
			КонецЦикла;//3
		    стр2.типЦен = тип;
		КонецЦикла;//2
		стр1.типЦен = тип;
	КонецЦикла;	//1
	
КонецПроцедуры


//такая же функция как и в персональных правилах!
функция ПолучитьНовыйIDo(стр1)
	
	возврат строка(стр1.ВидТовара) // 0 перечисление
	
		+ ?(ЗначениеЗаполнено(стр1.ТипЦен), "."+строка(стр1.ТипЦен.Код),".0")    //1) 30.09.2016
		
		+ ?(ЗначениеЗаполнено(стр1.Производитель), "."+строка(стр1.Производитель.Код),".0")  //2
		
		+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа), "."+строка(стр1.НоменклатурнаяГруппа.Код),".0")  //3
		 
		+ ?(ЗначениеЗаполнено(стр1.ВходитВПапку), "."+строка(стр1.ВходитВПапку.Код),".0")//4
		+ ?(ЗначениеЗаполнено(стр1.Номенклатура), "."+строка(стр1.Номенклатура.Код),".0")//5
		//строки
		+ ?(ЗначениеЗаполнено(стр1.ПодСтрока), "."+строка(стр1.ПодСтрока),".0") //6
		
		+ ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки), "."+строка(стр1.ВидДефектаДляУценки.Код),"") //7
		
		//---------------------необязятельные поля---------------------------		
		//+?(Флажок3, //+++ 04.10.2016 - ТОЛЬКО новые правила с разделением по диаметру! 	  //7
		     + ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),"")  // Доколину надо и в старых!
		//	  , "")
			  
		+?(Флажок3,"",";");// старые правила заканчиваются на ;   Новые  - НЕТ!	  
			  
КонецФункции	

//такая же функция как и в персональных правилах!
функция ПолучитьНовыйID(стр1)
	
	возврат строка(стр1.ВидТовара) // 0 перечисление
	
		+ ?(ЗначениеЗаполнено(стр1.ТипЦен), "."+строка(стр1.ТипЦен.Код),".0")    //1) 30.09.2016
		
		+ ?(ЗначениеЗаполнено(стр1.Производитель), "."+строка(стр1.Производитель.Код),".0")  //2
		
		+?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа), "."+строка(стр1.НоменклатурнаяГруппа.Код),".0")  //3
		 
		+ ?(ЗначениеЗаполнено(стр1.ВходитВПапку), "."+строка(стр1.ВходитВПапку.Код),".0")//4
		+ ?(ЗначениеЗаполнено(стр1.Номенклатура), "."+строка(стр1.Номенклатура.Код),".0")//5
		//строки
		+ ?(ЗначениеЗаполнено(стр1.ПодСтрока), "."+строка(стр1.ПодСтрока),".0") //6
		
		+ ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки), "."+строка(стр1.ВидДефектаДляУценки.Код),"") //7
		
		//---------------------необязятельные поля---------------------------		
		//+?(Флажок3, //+++ 04.10.2016 - ТОЛЬКО новые правила с разделением по диаметру! 	  //7 или 8
		      + ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),"") 
		//	  , "")
			  
		+";";//01.03.2017 - ВСЕ правила на ;  старые правила заканчиваются на ;   Новые  - НЕТ!	  
			  
КонецФункции	

функция получитьТекстПравилаПоID(знач стрID_0="",Разделитель="->")
	стрID = стрID_0;
текстПравила = "";   
спис = новый массив;
i= найти(стрID, ".");  L=стрДлина(стрID);
пока i>0 цикл
стр1 = лев(стрID, i-1);  стрID = прав(стрID, L-i);
спис.Добавить(стр1);
i= найти(стрID, ".");  L=стрДлина(стрID);
КонецЦикла;

//7 полей должно быть
Если спис.Количество()=0 тогда
//	сообщить("Не найдена расшифровка по "+строка(стрID));
	возврат "";
КонецЕсли;	
текстПравила = спис[0];//вид товара
текстПравила = текстПравила + ?(спис[2]="0","", Разделитель + строка( справочники.Производители.НайтиПоКоду( спис[2] ))  );
текстПравила = текстПравила + ?(спис[3]="0","", Разделитель + строка( справочники.НоменклатурныеГруппы.НайтиПоКоду( спис[3] )) );

текстПравила = текстПравила + ?(спис[4]="0","", Разделитель + строка( справочники.Номенклатура.НайтиПоКоду( спис[4] )) );
текстПравила = текстПравила + ?(спис[5]="0","", Разделитель + "Код:" + спис[5] );
Если спис.Количество()>6 тогда
	//текстПравила = текстПравила + ?(спис[6]="0","", " ; D: " + спис[6] );
	текстПравила = текстПравила + ?(спис[6]="0;" или спис[6]="0", "", Разделитель+спис[6] );
КонецЕсли;

Если спис.Количество()>7 тогда //+++ 07.04.2016
	
	флДиаметр = (найти(спис[7],"<")>0 или найти(спис[7],">")>0 или найти(спис[7],"-")>0 );
	
	текстПравила = текстПравила + ?(спис[7]="0;" или спис[7]="0","", 
					?(флДиаметр, Разделитель+"Диаметр "+спис[7], Разделитель+"ВидДефекта: "  + строка( справочники.ВидыДефектовДляУценки.НайтиПоКоду( спис[7] ))
					 )              );
КонецЕсли;

Если спис.Количество()>8 тогда //+++ 07.04.2016
	текстПравила = текстПравила + Разделитель+"Диаметр "+спис[8];
КонецЕсли;

текстПравила = текстПравила + ?(спис[1]="0","", Разделитель + "Тип цен: "+ строка( справочники.ТипыЦенНоменклатуры.НайтиПоКоду( спис[1] )) );

возврат текстПравила;		
КонецФункции	


Процедура ДеревоПравилДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = текСтр.Диаметр;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		текСтр.Диаметр = рез;
	КонецЕсли;	

КонецПроцедуры


Процедура ДеревоПравилОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ДеревоПравилПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	Если НоваяСтрока тогда // автоматом заполняется
		      
		Уровень = получитьУровень(текСтр);		
		
		Если НЕ значениеЗаполнено(текСтр.ВидТовара)	тогда
			ЗаполнитьЗначенияСвойств( текСтр, текСтр.Родитель );
		КонецЕсли;
		
		если уровень>3 тогда // Глубже НЕЛЬЗЯ!
			род2 = текСтр.Родитель.Родитель;
			стр2 = род2.Строки.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, текСтр);
		текСтр.Родитель.Строки.Удалить(текСтр.Родитель.Строки.Количество()-1);
		текСтр = стр2;
		КонецЕсли;	
		
		если уровень>=3 тогда
			текСтр.Родитель.Строки.Сортировать("Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, НомерСтроки");
			нн=0;
			для каждого СтрокаЧастьПравила из текСтр.Родитель.Строки цикл
			нн=нн+1;
	        СтрокаЧастьПравила.НомерСтроки = текСтр.Родитель.номерСтроки + нн;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	текСтр.Изм = Истина;
	
КонецПроцедуры



Функция ПолучитьУровень( текСтр )
	Если текСтр=неопределено тогда
		возврат 0;
	КонецЕсли;	
	уровень=0; род1 = текСтр.Родитель;
		Если ЗначениеЗаполнено( род1 ) тогда // 1
			уровень=уровень+1; род2 = род1.Родитель;
			Если ЗначениеЗаполнено( род2 ) тогда //2
		    	уровень=уровень+1; род3 = род2.Родитель;
				Если ЗначениеЗаполнено( род3 ) тогда //3
		    	уровень=уровень+1; род4 = род3.Родитель;
					Если ЗначениеЗаполнено( род4 ) тогда //4
		    		уровень=уровень+1;
                    КонецЕсли;//4
                КонецЕсли;//3
            КонецЕсли;//2
		КонецЕсли;//1
возврат уровень;
КонецФункции

процедура ИзменитьВнизПоДереву(текСтр, поле1)
	
		если текСтр.Строки.Количество()>0 тогда
			для каждого стр1 из текСтр.Строки цикл
				//Если ЗначениеЗаполнено(текСтр[поле1]) тогда
					стр1.Изм = стр1.Изм или (стр1[поле1]<>текСтр[поле1]);//может уже быть изменен
					стр1[поле1]=текСтр[поле1];
				//КонецЕсли;	
				ИзменитьВнизПоДереву(стр1, поле1); // всё дерево рекурентно
			КонецЦикла;	
		КонецЕсли;	
	
КонецПроцедуры	

Процедура ДеревоПравилПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(данныеСтроки.Родитель) тогда     // 1 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоСерый; 
	Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.Родитель.Родитель) тогда// 2 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЗолотистый; 
    Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.Родитель.Родитель.Родитель) тогда// 3 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЖелтыйЗолотистый; 
    КонецЕсли;
	
	Если данныеСтроки.изм тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
	КонецЕсли;
	
	Если ТипЗнч(данныеСтроки.СрокОплатыПоставщику) = тип("Число") тогда
	ОформлениеСтроки.ячейки.СрокОплатыПоставщику.Текст = строка(данныеСтроки.СрокОплатыПоставщику)+" дн.";
	ОформлениеСтроки.ячейки.СрокОплатыПоставщику.отображатьТекст = истина;
	КонецЕсли;
		
//	ОформлениеСтроки.ячейки.ИспользоватьТранспорт.ОтображатьФлажок = истина;
//	ОформлениеСтроки.ячейки.ИспользоватьТранспорт.ДанныеФлажка = ДанныеСтроки.ИспользоватьТранспорт;
КонецПроцедуры

//Единая функция для изменения вниз по дереву
Процедура ДеревоПравилВнизПоДеревуПриИзменении(Элемент)
	
	Если Флажок3 тогда
		текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		Если  ПолучитьУровень( текСтр )<3 тогда
			полеНазв = ЭлементыФормы.ДеревоПравил.ТекущаяКолонка.Имя;
			Если Вопрос("Изменить все вложенные правила?",РежимДиалогаВопрос.ДаНет,0 )=КодВозвратаДиалога.Да тогда
			ИзменитьВнизПоДереву(текСтр, полеНазв);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерПриИзменении(Элемент)
	 КоманднаяПанельПравилаОбновить( неопределено );
КонецПроцедуры

Процедура КоманднаяПанельПравилаРазвернутьВсе(Кнопка)
	Свернуть = ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка;
	
	для каждого стр1 из ДеревоПравил.Строки цикл
		если Свернуть тогда
			ЭлементыФормы.ДеревоПравил.Свернуть(стр1);
		Иначе // сразу всё дерево
			ЭлементыФормы.ДеревоПравил.Развернуть(стр1, Истина);
		КонецЕсли;
		
		Если Свернуть тогда
		Для каждого стр2 из стр1.Строки цикл
			ЭлементыФормы.ДеревоПравил.Свернуть(стр2);
			для каждого стр3 из стр2.Строки цикл
				ЭлементыФормы.ДеревоПравил.Свернуть(стр3);
			КонецЦикла;
		КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;

ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка = не ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка;
	
КонецПроцедуры

Процедура ДеревоПравилПриАктивизацииСтроки(Элемент)
	Если Флажок2 тогда
		текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		ур = ПолучитьУровень( текСтр );
	//	сообщить( строка(ур));
		Если  ур=3 тогда	
		КоманднаяПанель1ОбновитьСписок(неопределено);
		иначе
		ТаблицаКлиентов.Очистить();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


процедура проверитьПереходКатегории(текСтр1, текСтрОбщ)	
	
Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //29.05.2017
	текСтр1.Отклонение = 0;
иначе
	Если текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценкаVIP тогда
		текСтр1.Категория = перечисления.КатегорииСкидок.VIP;
		текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценкаVIP;
	ИначеЕсли текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка1 тогда
		текСтр1.Категория = перечисления.КатегорииСкидок.к1;
		текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка1;
	ИначеЕсли текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка2 тогда
		текСтр1.Категория = перечисления.КатегорииСкидок.к2;
		текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка2;
	Иначе //Если текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка3 тогда
		текСтр1.Категория = перечисления.КатегорииСкидок.к3;
		текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка3;
	КонецЕсли;	
КонецЕсли;

КонецПроцедуры	

//+++ 06.02.2017
Процедура ОсновныеДействияФормыПересчет(Кнопка, ВсеИзмПравила=неопределено)
	
	ПрямойПересчет = истина;
	
	Если Вопрос("Выполнить пересчет Перс.Скидок по Оклонению от измененных Общих правил?",РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Да )=КодВозвратаДиалога.Нет тогда
		Если Вопрос("Выполнить обратный пересчет перс.Оклонений и Категорий от перс.Скидок?",РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Нет )=КодВозвратаДиалога.Да тогда
			ПрямойПересчет = ЛОЖЬ;
		Иначе
			Возврат; // ничего не делаем
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеИзмПравила=неопределено тогда
		текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		для каждого текСтр1 из ТаблицаКлиентов цикл
			Если ПрямойПересчет тогда
				Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда //+++ 24.05.2018
					новСкидка=0;
				иначе
					новСкидка =  текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)] + текСтр1.Отклонение;
				КонецЕсли;
				если текСтр1.СкидкаНаценка <> новСкидка тогда
					текСтр1.СкидкаНаценка = новСкидка;
					текСтр1.Флаг = истина;
				КонецЕсли;
			Иначе // наоборот - скидку и категорию считаем от перс.скидки клиента
				Если текСтр1.Категория <> перечисления.КатегорииСкидок.B2B тогда //+++ 24.05.2018
				текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
				проверитьПереходКатегории(текСтр1, текСтр0);	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеИзмПравила<>неопределено тогда 
		для каждого стр1 из ДеревоПравил.Строки цикл	
			для каждого стр2 из стр1.Строки цикл	
				для каждого стр3 из стр2.Строки цикл	
					для каждого текСтр0 из стр3.Строки цикл	 // на 4 уровне!
						
				если текСтр0.изм тогда
				ЭлементыФормы.ДеревоПравил.ТекущаяСтрока = текСтр0;
				КоманднаяПанель1ОбновитьСписок(неопределено);

				для каждого текСтр1 из ТаблицаКлиентов цикл
					Если ПрямойПересчет тогда
						Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда //+++ 24.05.2018
							новСкидка=0;
						иначе
							новСкидка =  текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)] + текСтр1.Отклонение;
						КонецЕсли;
						
						если текСтр1.СкидкаНаценка <> новСкидка тогда
							текСтр1.СкидкаНаценка = новСкидка;
							текСтр1.Флаг = истина;
						КонецЕсли;
					Иначе // наоборот - скидку и категорию считаем от перс.скидки клиента
						Если текСтр1.Категория <> перечисления.КатегорииСкидок.B2B тогда //+++ 24.05.2018
						текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
						проверитьПереходКатегории(текСтр1, текСтр0);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
				//сразу сохраняем перс.правила
				КоманднаяПанель1ЗаписатьПравилаКлиентов(неопределено);
			КонецЕсли;

					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
    КонецЕсли;
	
	
КонецПроцедуры

Процедура КоманднаяПанель2Цены(Кнопка)
	текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
		ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = текСтр.Контрагент;
   		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);
        ФормаПравила.Открыть();
КонецПроцедуры

Процедура ТаблицаКлиентовПриоритетПриИзменении(Элемент)
	Если Элемент.Значение>0 тогда
		Предупреждение("Менять Приоритет отдельного правила можно только на ""Отрицательный"" для ввода исключительных правил для этого клиента!",30);
	КонецЕсли;
КонецПроцедуры

Процедура ФлажокВсеПриИзменении(Элемент)
	КоманднаяПанель1ОбновитьСписок(неопределено); //обновить
КонецПроцедуры

Процедура ДеревоПравилВходОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	текСтр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	форма1 = РегистрыСведений.ПравилаЦенообразованияВход.ПолучитьФорму("ФормаЭлемента");
	форма1.ID = текСтр1.ID;
	форма1.ОткрытьМодально();
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыПередНачаломДобавления(Элемент, Отказ, Копирование)
	Предупреждение("Нельзя добавлять правила клиента в этой обработке!",10);
	Отказ = истина;
КонецПроцедуры




//=========================================================
Процедура ТабличнаяЧастьКлиентыКатегорияПриИзменении(Элемент)
	
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	если Флажок3 тогда
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //29.05.2017
		если  текСтр1.ВидТовара <> Перечисления.ВидыТоваров.Шины тогда 
			Предупреждение("Категорию B2B можно назначать только для шин!", 10);
			текСтр1.Категория = перечисления.КатегорииСкидок.к3;
			текСтр1.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
			текСтр1.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(текСтр1.Категория)];
		Иначе
			текСтр1.СкидкаНаценка    = 0;
			текСтр1.СкидкаПредоплаты = 0;
		КонецЕсли;	
	иначе
		текСтр1.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
		текСтр1.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(текСтр1.Категория)];
	КонецЕсли;
	текСтр1.Отклонение = 0;
	
	текСтр1.флаг=истина;
	
	иначе
	 текСтр1.Категория = перечисления.КатегорииСкидок.ПустаяСсылка();
	 Предупреждение("Изменять категории можно только для Новых правил!",10);
	КонецЕсли; 

КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыОтклонениеПриИзменении(Элемент)
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	если Флажок3 тогда
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //29.05.2017
	текСтр1.СкидкаНаценка    = 0;
	Предупреждение("Нельзя менять скидки для Категории B2B!", 10);
	иначе
 	текСтр1.СкидкаНаценка = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)] + текСтр1.Отклонение;
	КонецЕсли;

	текСтр1.флаг=истина;
	проверитьПереходКатегории(текСтр1, текСтр0);	
	иначе
	 Предупреждение("Изменять Отклонение можно только для Новых правил!",10);
	КонецЕсли; 
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыСкидкаНаценкаПриИзменении(Элемент)
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	если Флажок3 тогда
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //29.05.2017
		текСтр1.Отклонение = 0;
		Предупреждение("Нельзя менять отклонение для Категории B2B!", 10);
	иначе
	текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
	КонецЕсли;
	проверитьПереходКатегории(текСтр1, текСтр0);	
	КонецЕсли;
	текСтр1.флаг=истина;
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыСкидкаПредоплатыПриИзменении(Элемент)
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	Если флажок3 и текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
		текСтр1.СкидкаПредоплаты = 0;
		Предупреждение("Нельзя менять скидки для Категории B2B!", 10);
	КонецЕсли;	
	текСтр1.флаг=истина;
КонецПроцедуры


//======================================================================

Процедура ТабличнаяЧастьКлиентыОтклонениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
    ТабличнаяЧастьКлиентыОтклонениеПриИзменении(неопределено);
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыСкидкаНаценкаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
	ТабличнаяЧастьКлиентыКатегорияПриИзменении(неопределено);
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыСкидкаПредоплатыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
	ТабличнаяЧастьКлиентыСкидкаПредоплатыПриИзменении(неопределено);
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыПриАктивизацииЯчейки(Элемент)
	
	Если Переключатель1=2 тогда
		текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
		если текСтр=неопределено тогда
			возврат;
		КонецЕсли;	
	ПолеВыбора = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущаяКолонка.Имя;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельПравилаОбновитьВход(Кнопка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаЦенообразованияВходСрезПоследних.ID,
	|	ПравилаЦенообразованияВходСрезПоследних.Вход,
	|	ПравилаЦенообразованияВходСрезПоследних.Бонус,
	|	ПравилаЦенообразованияВходСрезПоследних.b2b,
	|	ПравилаЦенообразованияВходСрезПоследних.СрокОплатыПоставщику
	|ИЗ
	|	РегистрСведений.ПравилаЦенообразованияВход.СрезПоследних КАК ПравилаЦенообразованияВходСрезПоследних";
	
	Результат = Запрос.Выполнить();
	таблПравил = Результат.Выгрузить();
	для каждого стр0 из ДеревоПравил.Строки цикл
		для каждого стр1 из стр0.строки цикл
			для каждого стр2 из стр1.строки цикл
				для каждого стр3 из стр2.строки цикл
				Если стр3.ID<>"" тогда
				стрПравил = таблПравил.Найти(стр3.ID, "ID");
					Если стрПравил<>неопределено тогда
					ЗаполнитьЗначенияСвойств(стр3, стрПравил);
					стр3.Изм = истина;
					КонецЕсли;
				КонецЕсли;
			 	КонецЦикла;
		 	КонецЦикла;
		 КонецЦикла;
    КонецЦикла;
КонецПроцедуры






СписокПроизводителиШин =Новый СписокЗначений;
СписокПроизводителиДисков =Новый СписокЗначений;

СписокПапкиШин =Новый СписокЗначений;
СписокПапкиДисков =Новый СписокЗначений;

	ТипЦенБазовая 	 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
	ТипЦенКрупныйОпт 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");
	//ТипЦенЯкорь 	 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00003");
	//ТипЦенРеккомендРозн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011");
	
	ШагДерева = 2; //17.07.2017 обычно по 1 правилу в 1 группе

	мас = новый Соответствие;
	мас.Вставить( перечисления.КатегорииСкидок.VIP, "VIP");
	мас.Вставить( перечисления.КатегорииСкидок.к1,  "1");
	мас.Вставить( перечисления.КатегорииСкидок.к2,  "2");
	мас.Вставить( перечисления.КатегорииСкидок.к3,  "3");

		