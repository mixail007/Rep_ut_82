перем ТипЦенB2B;

Процедура КнопкаВыполнитьНажатие(Кнопка, флТОЛЬКОизмененные = ЛОЖЬ)
	
	Если Контрагент.Пустая() тогда
		Предупреждение("Не выбран Контрагент!", 10);
		Возврат;
	КонецЕсли;
	
	Если флТОЛЬКОизмененные=неопределено тогда 
		флТОЛЬКОизмененные = ЛОЖЬ;
	КонецЕсли;	
	
	ном = 0;
	
	//09.03.2017 -------------------------------------------------------------------------------
	Если НЕ ( Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь
			или Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо = глТекущийПользователь
//----------------------------------------для Пефти---------------------------------------------------------------------			
			или ПолучитьЗначениеПоУмолчанию( глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора")=5
			
			или РОЛЬДоступна("ПолныеПрава") ) тогда
		Предупреждение("У Вас недостаточно прав для записи правил "+строка(Контрагент)+"
		|Правила может менять только Основной менеджер клиента или Менеджер по основному договору!",30);
	КонецЕсли;	
	
	регСв0 = получитьПравилаКлиента(Контрагент); //09.03.2017 - для п.12 задачи 22180
	
	Если НЕ флТОЛЬКОизмененные тогда
		УдалитьСтарыеПравилаКлиента(Контрагент); // удаляем ВСЕ правила с категориями!
	КонецЕсли;
	
//----------------------СИСТЕМА СОГЛАСОВАНИЯ-----------------------------------------				
констСогласование = Константы.СогласованиеПоСкидкамКлиентов.Получить(); 

флВыключать = НЕ ( РольДоступна("ПравоЗавершенияРаботыПользователей") );

//+++ 14.02.2017 - обратная сотритовка при записи!
деревоПравил.Строки.Сортировать("ВидТовара УБЫВ");
для каждого стр1 из деревоПравил.Строки цикл
	стр1.Строки.Сортировать("НоменклатурнаяГруппа УБЫВ");
	для каждого стр2 из стр1.Строки цикл
	стр2.Строки.Сортировать("Производитель УБЫВ");
	    для каждого стр3 из стр2.Строки цикл
		стр3.Строки.Сортировать("ПодСтрока УБЫВ, Номенклатура УБЫВ, ВходитВПапку УБЫВ, ВидДефектаДляУценки УБЫВ, Диаметр УБЫВ, Приоритет");
		КонецЦикла;	
	КонецЦикла;	
КонецЦикла;	

рук = ПолучитьРуководителя(глТекущийПользователь); //+++ яштПрочее. берется из подразделения. и если это не филиал, то из группы пользователей
СписокМенТовГрупп = новый СписокЗначений; // список пользователей, которым нужны уведомления!
	 
	 таблЗадачи = новый ТаблицаЗначений;
	 таблЗадачи.Колонки.Добавить("НомерСтрокиОснования");
	 таблЗадачи.Колонки.Добавить("ID");
	 таблЗадачи.Колонки.Добавить("Номенклатура");
	 таблЗадачи.Колонки.Добавить("Скидка");
	 таблЗадачи.Колонки.Добавить("СкидкаМин");
	 
	 таблЗадачи.Колонки.Добавить("Исполнитель");
	 таблЗадачи.Колонки.Добавить("Содержание");
	 
	 //таблЗадачи.Колонки.Добавить("ОТК");
	 //таблЗадачи.Колонки.Добавить("Коэф");
	 
	 //20.01.2016
	 флЗаменаМенТГ = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить()
	 					и глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение;
						
	ном = 0; // количество перс. правил
Попытка //================================================================================
				
	Для каждого стр0 из ДеревоПравил.Строки цикл
		Для каждого стр1 из стр0.строки цикл
			Для каждого стр2 из стр1.строки цикл
				Для каждого стр3 из стр2.строки цикл

				Если стр3.Перс тогда //только персональные
					
					Если флТОЛЬКОизмененные и НЕ стр3.Изм тогда
						продолжить;
					КонецЕсли;
				
					регСв = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств( регСв, стр3 ); //все поля!
					
					если стр3.Искл тогда
						сообщить("Для исключительного общего правила № "+строка(регСв.Приоритет)+" - нельзя записать Персональное правило!", СтатусСообщения.Информация);
						продолжить;
					КонецЕсли;
					
					Если стр3.Приоритет<0 тогда //07.03.2017 - исключительные правила НЕ удаляются и не записываются!
					//регСв.Приоритет=стр3.Приоритет;	
						сообщить("Исключительное правило № "+строка(стр3.Приоритет)+" нельзя менять!");
						продолжить;
					КонецЕсли;
					
					ном = ном+1;
					стр3.Приоритет  = ном; //08.08.2018
					регСв.Приоритет = ном;
					
					регСв.Контрагент = Контрагент;
					регСв.ID  = ПолучитьНовыйID(регСв);  // ID c учетом диаметра (для B2B - НЕЛЬЗЯ менять ТипЦен !!!)
					стрНач = регСв0.найти(регСв.ID, "ID"); //09.03.2017
		
					//+++ 29.05.2017 --- меняем тип цен ТОЛЬКО при записи! 
					Если стр3.категория = перечисления.КатегорииСкидок.B2B тогда
						//10.04.2018 - НЕ меняем тип цен!
					//сообщить("Для категории B2B - автоматически установлен тип цен B2B!", СтатусСообщения.Информация );
					регСв.ТипЦен = ТипЦенB2B;
					регСв.СкидкаНаценка    = 0;
					регСв.СкидкаПредоплаты = 0;
					регСв.Отклонение       = 0;
					//Утверждать ее не надо!
					КонецЕсли;

					если стрНач=неопределено тогда // добавлено новое правило
						
						стрНачСкидкаНаценка    = стр3.СкидкаНаценка3;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = стр3.СкидкаПредоплаты3;
						стрНачКатегория		   = перечисления.КатегорииСкидок.к3;
	
						кат = получитьКатегорию(стр3.ВидТовара);
						
						если кат = перечисления.КатегорииСкидок.к2 тогда
						стрНачСкидкаНаценка    = стр3.СкидкаНаценка2;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = стр3.СкидкаПредоплаты2;
						стрНачКатегория		   = перечисления.КатегорииСкидок.к2;
	
						иначеесли кат = перечисления.КатегорииСкидок.к1 тогда
						стрНачСкидкаНаценка    = стр3.СкидкаНаценка1;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = стр3.СкидкаПредоплаты1;
						стрНачКатегория		   = перечисления.КатегорииСкидок.к1;
	
						иначеесли кат = перечисления.КатегорииСкидок.VIP тогда
						стрНачСкидкаНаценка    = стр3.СкидкаНаценкаVIP;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = стр3.СкидкаПредоплатыVIP;
						стрНачКатегория		   = перечисления.КатегорииСкидок.VIP;
							
						иначеесли кат = перечисления.КатегорииСкидок.B2B тогда   //30.05.2017
						стрНачСкидкаНаценка    = 0;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = 0;
						стрНачКатегория		   = перечисления.КатегорииСкидок.B2B;
	 				КонецЕсли;
						
					Иначе
						стрНачКатегория		   = стрНач.Категория;
						стрНачСкидкаНаценка    = стрНач.СкидкаНаценка;      //новая строка должна проверяться по VIP и 1 категории всегда!
						стрНачСкидкаПредоплаты = стрНач.СкидкаПредоплаты;
					КонецЕсли;
					
					//========Согласование измененных правил!===========
					Если констСогласование и стр3.Изм и стр3.категория <> перечисления.КатегорииСкидок.B2B тогда //01.06.2017
						рез = 0;
						
						если стр3.СкидкаНаценка<=стр3.СкидкаНаценкаVIP 
							
							//+++ 08.02.2018 - при совпадении VIP = к1 - не уходит на Марешеву, а уходит на рук.напр.продаж.
							и ( (стр3.СкидкаНаценка<стр3.СкидкаНаценка1 и Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение)
							//для "наших" клиентов - уходит на мен.тов.группы при совпадении VIP = к1
							   или НЕ Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение
							  )
							  
							и стр3.СкидкаНаценка<стрНачСкидкаНаценка тогда //09.03.2017 только при "углублении" скидки
						рез = 1;  
						стрСогл = таблЗадачи.Добавить();
						стрСогл.Исполнитель = получитьМенеджераТовГруппы(глТекущийПользователь, стр3.ВидТовара, стр3.НоменклатурнаяГруппа);
						стрСогл.НомерСтрокиОснования = стр3.Приоритет;
						стрСогл.Скидка    = стр3.СкидкаНаценка;
						стрСогл.СкидкаМин = стр3.СкидкаНаценкаVIP;
						//стрСогл.ОТК     = стр3.ОТК;
						//стрСогл.Коэф    = стр3.Коэф;
						стрСогл.ID      = регСв.ID; //стр3.ID;
						стрСогл.Номенклатура =" Утвердите Скидку на "+ получитьТекстПравилаПоID(стрСогл.ID);
						стрСогл.Содержание =стрСогл.Номенклатура+ " " +строка(стр3.СкидкаНаценка)+"%
											|         которая "+?(стр3.СкидкаНаценка<стр3.СкидкаНаценкаVIP, "превышает скидку","равна скидке")+" VIP-категории "+строка(стр3.СкидкаНаценкаVIP)+"% по общ.правилу № "+строка(стр3.Приоритет);	
							
						Иначеесли стр3.СкидкаНаценка<=стр3.СкидкаНаценка1 и стр3.СкидкаНаценка<стрНачСкидкаНаценка тогда //09.03.2017 только при "углублении" скидки
							
							//+++ 08.02.2018 ---- согласование самому себе - НЕ НАДО -------------
							Если рук = Контрагент.ОсновнойМенеджерКонтрагента тогда
								Сообщить("На "+получитьТекстПравилаПоID(стрСогл.ID)+ " назначается скидка кат.1 = "+строка(стр3.СкидкаНаценка)+"%");
	    	                Иначе
							рез = 1; 
							стрСогл = таблЗадачи.Добавить();
							стрСогл.Исполнитель = рук;
							стрСогл.НомерСтрокиОснования = стр3.Приоритет;
							стрСогл.Скидка    = стр3.СкидкаНаценка;
							стрСогл.СкидкаМин = стр3.СкидкаНаценка1;
							//стрСогл.ОТК     = стр3.ОТК;
							//стрСогл.Коэф    = стр3.Коэф;
	 						стрСогл.ID      = регСв.ID; //ПолучитьНовыйID(стр3); //стр3.ID;
							стрСогл.Номенклатура =" Утвердите Скидку на "+ получитьТекстПравилаПоID(стрСогл.ID);
							стрСогл.Содержание =стрСогл.Номенклатура+ " " +строка(стр3.СкидкаНаценка)+"%
												|         которая "+?(стр3.СкидкаНаценка<=стр3.СкидкаНаценка1,"превышает скидку","равна скидке")+" 1-ой Категории "+строка(стр3.СкидкаНаценка1)+"% по общ.правилу № "+строка(стр3.Приоритет);	
							КонецЕсли;					
						КонецЕсли;
						
						
						//================Предоплатная скидка==========================================
						Если стр3.СкидкаПредоплаты<=стр3.СкидкаПредоплатыVIP 
							
							//+++ 08.02.2018 - при совпадении VIP = к1 - не уходит на Марешеву, а уходит на рук.напр.продаж.
							и ( (стр3.СкидкаПредоплаты<стр3.СкидкаПредоплаты1 и Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение)
							//для "наших" клиентов - уходит на мен.тов.группы при совпадении VIP = к1
							   или НЕ Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение
							  )

							и стр3.СкидкаПредоплаты<стрНачСкидкаПредоплаты тогда //09.03.2017 только при "углублении" скидки
 						рез = рез+1;
						стрСогл = таблЗадачи.Добавить();
						стрСогл.Исполнитель = получитьМенеджераТовГруппы(глТекущийПользователь, стр3.ВидТовара, стр3.НоменклатурнаяГруппа);
						стрСогл.НомерСтрокиОснования = стр3.Приоритет;
						стрСогл.Скидка    = стр3.СкидкаПредоплаты;
						стрСогл.СкидкаМин = стр3.СкидкаПредоплатыVIP;
						//стрСогл.ОТК     = стр3.ОТК;
						//стрСогл.Коэф    = стр3.Коэф;
						стрСогл.ID      = регСв.ID; //ПолучитьНовыйID(стр3); //стр3.ID;
						стрСогл.Номенклатура =" ПРЕДОПЛАТА - Утвердите Скидку на "+получитьТекстПравилаПоID(стрСогл.ID);
					 	стрСогл.Содержание =стрСогл.Номенклатура+ " " +строка(стр3.СкидкаПредоплаты)+"%
											|         которая "+?(стр3.СкидкаПредоплаты<стр3.СкидкаПредоплатыVIP, "превышает скидку","равна скидке")+" VIP-категории "+строка(стр3.СкидкаПредоплатыVIP)+"% по общ.правилу № "+строка(стр3.Приоритет)
											;	
						Иначеесли стр3.СкидкаПредоплаты<=стр3.СкидкаПредоплаты1 и стр3.СкидкаПредоплаты<стрНачСкидкаПредоплаты тогда //09.03.2017 только при "углублении" скидки
							
						//+++ 08.02.2018 ---- согласование самому себе - НЕ НАДО!" -------------
							Если рук = Контрагент.ОсновнойМенеджерКонтрагента тогда
								Сообщить("На "+получитьТекстПравилаПоID(стрСогл.ID)+ " назначается скидка кат.1 = "+строка(стр3.СкидкаПредоплаты)+"%");
	    	               Иначе
							рез = рез+1; 
							стрСогл = таблЗадачи.Добавить();
							стрСогл.Исполнитель = рук;
							стрСогл.НомерСтрокиОснования = стр3.Приоритет;
							стрСогл.Скидка    = стр3.СкидкаПредоплаты;
							стрСогл.СкидкаМин = стр3.СкидкаПредоплаты1;
							//стрСогл.ОТК     = стр3.ОТК;
							//стрСогл.Коэф    = стр3.Коэф;
							стрСогл.ID      = регСв.ID; //ПолучитьНовыйID(стр3); //стр3.ID;
							стрСогл.Номенклатура =" ПРЕДОПЛАТА - Утвердите Скидку на "+получитьТекстПравилаПоID(стрСогл.ID);
						 	стрСогл.Содержание =стрСогл.Номенклатура+ " " +строка(стр3.СкидкаПредоплаты)+"%
											|         которая "+?(стр3.СкидкаПредоплаты<стр3.СкидкаПредоплаты1, "превышает скидку","равна скидке")+" 1-ой Категории "+строка(стр3.СкидкаПредоплаты1)+"% по общ.правилу № "+строка(стр3.Приоритет);	
							КонецЕсли;
										
						КонецЕсли;
						
						Если рез>0 тогда
							
							Если рез>1 тогда	
								стрСогл2 = таблЗадачи[таблЗадачи.Количество()-2];
								сообщить("Правило № "+строка(регСв.Приоритет)+?(флВыключать, " будет ВЫКЛЮЧЕНО! ", " НЕ изменит флаг Выключено! ")+стрСогл2.Содержание
								+" с менеджером: "+ строка(стрСогл2.Исполнитель));
							КонецЕсли;
						
							сообщить("Правило № "+строка(регСв.Приоритет)+?(флВыключать, " будет ВЫКЛЮЧЕНО! ", " НЕ изменит флаг Выключено! ")+стрСогл.Содержание
							+" с менеджером: "+ строка(стрСогл.Исполнитель));
								
							Если флВыключать тогда	
								регСв.Выключено = Истина;
								стр3.Выключено  = Истина;
							КонецЕсли;	
						КонецЕсли;
						
					КонецЕсли;
										
					регСв.Записать(Истина);
					
	 //=============История=======================================
	 Если стр3.Изм тогда
	     записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = регСв.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий =строка(регСв.ID)+": № "+строка(регСв.Приоритет)
		 +"; Кат.: "+строка(стрНачКатегория)+">>"+строка(регСв.Категория)
		 +?(регСв.Категория=перечисления.КатегорииСкидок.B2B или стрНачКатегория=перечисления.КатегорииСкидок.B2B,   //29.05.2017
		          "; Тип.цен: "+строка(стрНачКатегория)+">>"+строка(регСв.ТипЦен), "")
		 +"; Скидка: "+строка(стрНачСкидкаНаценка)+">>"+строка(регСв.СкидкаНаценка)
		 +"; Предоплата: "+строка(стрНачСкидкаПредоплаты)+">>"+строка(регСв.СкидкаПредоплаты)
		 
		 +"; Правило: "+получитьТекстПравилаПоID(регСв.ID);
		 записьЖурнала.Записать(истина); //перезапись
	 КонецЕсли;	 
	 
		 КонецЕсли; //перс
	 
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Предупреждение("Записано "+строка(ном)+" персональных правил Клиента!", 5);
	Сообщить(строка(ТекущаяДата())+ " Записано "+строка(ном)+?(флТОЛЬКОизмененные," выбранных ","")+"персональных правил Клиента: "+строка(Контрагент), СтатусСообщения.Информация);
	
Исключение
	
	Сообщить("Ошибка при записи правила № "+строка(ном)+" Клиента: "+строка(Контрагент) +" : "+ОписаниеОшибки(), СтатусСообщения.Важное);
	Сообщить("================Запись "+?(флТОЛЬКОизмененные," выбранных ","")+"персональных правил Клиента: "+строка(Контрагент)+" - отменена!===================", СтатусСообщения.Внимание);
	
	Предупреждение("Ошибка при записи правила № "+строка(ном)+" !!!", 30);
	флВыключать = ложь; //+++ 08.08.2018 ничего не отправляем!	
	
КонецПопытки;

//+++ 08.08.2018 - после попытки! === ОТПРАВКА ЗАДАЧ НА СОГЛАСОВАНИЕ=
	Если флВыключать и таблЗадачи.Количество()>0 тогда
		СоздатьЗадачиПриВыключении( таблЗадачи );
	КонецЕсли;	

 Если флВыключать или таблЗадачи.Количество()>0 тогда //25.01.2016
    КоманднаяПанель1Обновить(неопределено); // обновляем после записи!
 КонецЕсли; 
  
КонецПроцедуры

функция получитьКатегорию(видТовара)
	Кат = перечисления.КатегорииСкидок.ПустаяСсылка();
	для каждого стр1 из Контрагент.КатегорияСкидок цикл
		если стр1.ВидТовара = видТовара тогда
			Кат = стр1.Категория;
		КонецЕсли;	
	КонецЦикла;	
	Если Кат.Пустая() тогда
		кат = перечисления.КатегорииСкидок.к3;
	КонецЕсли;
возврат Кат;	
КонецФункции	

процедура СоздатьЗадачиПриВыключении( таблЗадачи )
	
	констСогласование = Константы.СогласованиеПоСкидкамКлиентов.Получить(); 
	если не констСогласование тогда 
	возврат;
	КонецЕсли;

	СписокМенТовГрупп = новый СписокЗначений; // список пользователей, которым нужны уведомления!
//	 таблЗадачи = ПолучитьТаблЗадач();
	 таблЗадачи.Сортировать("Исполнитель, НомерСтрокиОснования"); 
	 
 менТовГруппы0 = неопределено; текст0="";
 
	//-------новая задача------------
	задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
 	задача1.Товары.Очистить();
	текст0="";
	
	таблЗадачи.Сортировать("Исполнитель");  //+++ 10.09.2015 - по 1 задаче на каждого согласующего!
	
   для каждого стр111 из таблЗадачи цикл
	   
	   менТовГруппы = стр111.Исполнитель;
   
	   	Если менТовГруппы<>менТовГруппы0 тогда//-------------просто Новая Задача с обратным уведомлением --------------------
			
	//==================================СОЗДАНИЕ ЗАДАЧ===========================
			Если менТовГруппы0 <> неопределено тогда
				попытка 
				 задача1.Наименование = "Согласуйте НОВЫЕ персональные Правила для Клиента: "+строка(Контрагент);
				 
				 задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Согласовать НОВЫЕ персональные Правила для Покупателя: "+строка(Контрагент.Код)+" "+строка(Контрагент)+"
				 |     "+?(Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение,
				                 " (без учёта ТРАНСПОРТА до "+строка(Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение)+")","")+"
				 |Адреса клиента:
				 |Юр.адрес:       "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Юридический")+"
                 |Факт.адрес:     "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Фактический")+"
                 |Адрес Доставки: "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Адрес доставки")+"
                 |---------------------------------------------------------------------------------------------
				 |"+текст0;

				задача1.Записать();
			  	СписокМенТовГрупп.Добавить(задача1.Исполнитель);
				Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Информация );	
			  исключение
			    Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача1.Исполнитель), СтатусСообщения.Внимание );	
			  КонецПопытки;
			//-------новая задача------------
			задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
		 	задача1.Товары.Очистить();
			текст0="";
	        КонецЕсли;
				
			менТовГруппы0  = менТовГруппы;
			
	 	 КонецЕсли;
		 
		 текст0=текст0 + стр111.Содержание+"
		 |";  //общий текст по всем скидкам 1 клиента для 1 менеджера!
		   
		 задача1.Исполнитель = менТовГруппы;
		 
		 задача1.НаСогласование = ИСТИНА;//+++ 17.08.2015
		 
			 стр222 = задача1.Товары.Добавить();
			 ЗаполнитьЗначенияСвойств(стр222, стр111);
			 
			 //стр222.Количество    = стр111.ОТК;
			 //стр222.ЦенаПоТипуЦен = стр111.Коэф;
		 
		 задача1.Инициатор   = глТекущийПользователь;
		 задача1.Объект   	 = Контрагент;
		 
		 задача1.Дата 		    = ТекущаяДата();
		 задача1.СрокИсполнения = КонецДня( ТекущаяДата() ); // до конца текущих суток с момента установки
		 
		 задача1.Оповещение     = истина;
		 задача1.СрокОповещения = ТекущаяДата(); //сразу (появится не позднее чем через 5 мин
						 
 	КонецЦикла;	 
 
 //-----------последняя задача-------------------------------
	Если менТовГруппы0 <> неопределено и таблЗадачи.Количество()>0 тогда
	  попытка 
		 задача1.Наименование = "Согласуйте НОВЫЕ Правила для клиента: "+строка(Контрагент); //+", равную "+строка(текСтр.СкидкаНаценкаКлиента)+?(текСтр.СкидкаНаценкаКлиента>максПроц," р.","% ")
		 задача1.Описание = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Согласовать НОВЫЕ персональные Правила для Покупателя: "+строка(Контрагент.Код)+" "+строка(Контрагент)+"
				 |     "+?(Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение,
				                 " (без учёта ТРАНСПОРТА до "+строка(Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение)+")","")+"
				 |Адреса клиента:
				 |Юр.адрес:       "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Юридический")+"
                 |Факт.адрес:     "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Фактический")+"
                 |Адрес Доставки: "+ ПолучитьАдресИзКонтактнойИнформации(Контрагент, "Адрес доставки")+"
                 |---------------------------------------------------------------------------------------------
				 |"+текст0;

		 
		задача1.Записать();
	  	СписокМенТовГрупп.Добавить(менТовГруппы);
		Сообщить(" + Сформирована ""Задача на согласование"" для мен.тов.группы: "+строка(менТовГруппы), СтатусСообщения.Информация );	
	  исключение
		Сообщить(" - Не удалось сформировать электронную Задачу на согласование для мен.тов.группы: "+строка(менТовГруппы), СтатусСообщения.Внимание );	
	  КонецПопытки;
    КонецЕсли;
   	 
 КонецПроцедуры
//+++)

//09.03.2017 - получим старые правила
функция получитьПравилаКлиента(Клиент)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ *
               |ИЗ
               |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
               |ГДЕ
               |	ПравилаЦенообразования.Контрагент = &Клиент
               |	И ПравилаЦенообразования.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)
               |
               |УПОРЯДОЧИТЬ ПО
               |	Приоритет";

Запрос.УстановитьПараметр("Клиент", Клиент );   // при наличие "отрицательных" правил - сравнение идёт ещё и по ним!

Результат = Запрос.Выполнить();
табл = Результат.Выгрузить();
возврат табл;	
КонецФункции	

//=====================================================================
процедура УдалитьСтарыеПравилаКлиента(Контрагент)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ *
|ИЗ
|	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
|ГДЕ
|	ПравилаЦенообразования.Контрагент = &Контрагент
|	И ПравилаЦенообразования.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
//07.03.2017 - исключительные правила НЕ удаляются!
|	И ПравилаЦенообразования.Приоритет>=0
|";
Запрос.УстановитьПараметр("Контрагент", Контрагент);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл
регСв  =  РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
ЗаполнитьЗначенияСвойств(регСв, выборка);
регСв.Удалить();
КонецЦикла;
// сообщить("Удалено "+строка(Выборка.Количество())+" новых правил клиента "+строка(Контрагент));
КонецПроцедуры	


//=====================================================================

Процедура КоманднаяПанель1Обновить(Кнопка) ЭКСПОРТ
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ.Категория,
	               |	ВТ.ВидТовара,
				   |	ВТ.ТрКлиента
	               |ПОМЕСТИТЬ ВТ_Товары
	               |ИЗ
	               |	&ТаблВидов КАК ВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////////////////////////
				  | ВЫБРАТЬ 
	               |		ПравилаЦенообразования.Категория КАК Категория,
				   
				   
				    |		ПравилаЦенообразования.ВидТовара КАК ВидТовара,
	               |		ПравилаЦенообразования.ТипЦен КАК ТипЦен,
				   
				   |		ПравилаЦенообразования.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		ПравилаЦенообразования.Производитель КАК Производитель,
				   
	               |		ПравилаЦенообразования.ПодСтрока КАК ПодСтрока,
				   |		ПравилаЦенообразования.Номенклатура КАК Номенклатура,
	               
                   |		ПравилаЦенообразования.ВходитВПапку КАК ВходитВПапку,
	               |		ПравилаЦенообразования.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
				  //12.01.2017					
					|		ПравилаЦенообразования.ТрКлиента,
 
			       |		ПравилаЦенообразования.Диаметр КАК Диаметр,
	               
	               |			ПравилаЦенообразования.Отклонение КАК Отклонение,
	               |			ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка,
	               |			ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты,
				   
	 //          	   |		ПравилаЦенообразования.Бонус,
				   
				   |		ПравилаЦенообразования.ВЫКЛЮЧЕНО,
				   
                   |		ПравилаЦенообразования.Приоритет, 
			       |		ПравилаЦенообразования.ID КАК ID,
				   |	    ПравилаЦенообразования.ID КАК IDo
				   |ПОМЕСТИТЬ ВТ_ПерсПравила
	               |		ИЗ
	               |			РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
				   |		ГДЕ
				   |			ПравилаЦенообразования.Контрагент = &Контрагент
				   //======================ТОЛЬКО НОВЫЕ Правила!======================================================
	               |			И ПравилаЦенообразования.Категория <> Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
	   //-------по флагу... если персональные - то показываем 
	               |//флТолькоНеВыключенные	И ПравилаЦенообразования.Выключено = ЛОЖЬ
				   |
 				//+++ 27.09.2018 ----------------как персональные!---------------------------
				   |//РаспродажаТабл
				   |
				   |//ФиксТабл
			       |; 
				   |////////////////////////////////////////////////////////////////////////////////
				   |
				   |
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
			       | ВсеПравила.*,
				   |	ЕстьNull(ТабОТК.СтавкаОТК,0) как НаценкаОТК,
				   |	0 как СкидкаНаценкаМакс,
				   |	ЕстьNull(ТабБонус.БонусКлиента,0) как БонусКлиента
				   
				   |из (
	               |ВЫБРАТЬ 
	               |	ВЫБОР
	               |		КОГДА ПравилаЦенообразования.Приоритет < 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Искл,
	               |	ЕСТЬNULL(ВложенныйЗапрос.ВидТовара, ПравилаЦенообразования.ВидТовара) КАК ВидТовара,
				 //+++ 25.07.2017
				   |	ЕСТЬNULL(ВложенныйЗапрос.ТипЦен, ПравилаЦенообразования.ТипЦен) КАК ТипЦен,
				   
				   |	ЕСТЬNULL(ВложенныйЗапрос.НоменклатурнаяГруппа, ПравилаЦенообразования.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
	               |	ЕСТЬNULL(ВложенныйЗапрос.Производитель, ПравилаЦенообразования.Производитель) КАК Производитель,
				   
				    |	ЕСТЬNULL(ВложенныйЗапрос.ПодСтрока, ПравилаЦенообразования.ПодСтрока) КАК ПодСтрока,
				    |	ЕСТЬNULL(ВложенныйЗапрос.Номенклатура, ПравилаЦенообразования.Номенклатура) КАК Номенклатура,
	               
				   |	ЕСТЬNULL(ВложенныйЗапрос.ВходитВПапку, ПравилаЦенообразования.ВходитВПапку) КАК ВходитВПапку,
	               |	ЕСТЬNULL(ВложенныйЗапрос.ВидДефектаДляУценки, ПравилаЦенообразования.ВидДефектаДляУценки) КАК ВидДефектаДляУценки,
					  
				   |	ЕСТЬNULL(ВложенныйЗапрос.Диаметр, ПравилаЦенообразования.Диаметр) КАК Диаметр,
	  //--------------------------транспорт------------------------------------------------------------------       	    
				   |	выбор когда ПравилаЦенообразования.ИспользоватьТранспорт и &ЭтоКлиентФилиала
				   |		тогда     Выбор 
				   |			когда &КлиентСПб тогда ПравилаЦенообразования.ТрСПб 
				   |			когда &КлиентРнД тогда ПравилаЦенообразования.ТрРнД 
				   |			когда &КлиентЕкт тогда ПравилаЦенообразования.ТрЕкт 
				   //+++ 24.09.2018
			   	   |			когда &КлиентТл тогда ПравилаЦенообразования.ТрТл 
			   	   |			иначе 0 Конец
				   |		иначе 0 
				   |	Конец  как НаценкаТранспорта,
				   
		//========================Вход==============================
					|		ПравилаЦенообразования.Вход,
					|		ПравилаЦенообразования.Бонус,
					|		ПравилаЦенообразования.b2b,
					|		ПравилаЦенообразования.СрокОплатыПоставщику,
			   
				   //12.01.2017
				   |	Выбор когда ЕстьNull(ВложенныйЗапрос.ТрКлиента,0)=0 тогда ВидКатегория.ТрКлиента 
				   |	иначе ЕстьNull(ВложенныйЗапрос.ТрКлиента,0) Конец как ТрКлиента,
				   
				    |	ЕСТЬNULL(ВложенныйЗапрос.Категория, ВидКатегория.Категория) КАК Категория,
	               |	ЕСТЬNULL(ВложенныйЗапрос.Отклонение, 0) КАК Отклонение,
//================================Скидка============================================================================
				    |	ЕСТЬNULL(ВложенныйЗапрос.СкидкаНаценка, ВЫБОР
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.VIP)
	               |				ТОГДА ПравилаЦенообразования.СкидкаНаценкаVIP
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к1)
	               |				ТОГДА ПравилаЦенообразования.СкидкаНаценка1
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к2)
	               |				ТОГДА ПравилаЦенообразования.СкидкаНаценка2
				   
				   //+++++++++++++10.04.2018++++++++++++++++++
				     |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.B2B)
	               |				ТОГДА 0

	               |			ИНАЧЕ ПравилаЦенообразования.СкидкаНаценка3
	               |		КОНЕЦ) КАК СкидкаНаценка,
//================================Предоплата============================================================================
	               |	ЕСТЬNULL(ВложенныйЗапрос.СкидкаПредоплаты, ВЫБОР
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.VIP)
	               |				ТОГДА ПравилаЦенообразования.СкидкаПредоплатыVIP
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к1)
	               |				ТОГДА ПравилаЦенообразования.СкидкаПредоплаты1
	               |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к2)
	               |				ТОГДА ПравилаЦенообразования.СкидкаПредоплаты2
				 //+++++++++++++10.04.2018++++++++++++++++++
				     |			КОГДА ВидКатегория.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.B2B)
	               |				ТОГДА 0

	               |			ИНАЧЕ ПравилаЦенообразования.СкидкаПредоплаты3
	               |		КОНЕЦ) КАК СкидкаПредоплаты,
				   
	           	   |	ПравилаЦенообразования.СкидкаНаценкаVIP КАК СкидкаНаценкаVIP,
	               |	ПравилаЦенообразования.СкидкаПредоплатыVIP КАК СкидкаПредоплатыVIP,
	               |	ПравилаЦенообразования.СкидкаНаценка1 КАК СкидкаНаценка1,
	               |	ПравилаЦенообразования.СкидкаПредоплаты1 КАК СкидкаПредоплаты1,
	               |	ПравилаЦенообразования.СкидкаНаценка2 КАК СкидкаНаценка2,
	               |	ПравилаЦенообразования.СкидкаПредоплаты2 КАК СкидкаПредоплаты2,
	               |	ПравилаЦенообразования.СкидкаНаценка3 КАК СкидкаНаценка3,
	               |	ПравилаЦенообразования.СкидкаПредоплаты3 КАК СкидкаПредоплаты3,
				   
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.СкидкаНаценка ЕСТЬ NULL 
				   //30.09.2018
				   |		или ВложенныйЗапрос.Приоритет ЕСТЬ NULL  или ВложенныйЗапрос.Приоритет<-499
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Перс,
				   				   
				   |	ЕСТЬNULL(ВложенныйЗапрос.Выключено, ЛОЖЬ) как Выключено,
				   |	ЕСТЬNULL(ВложенныйЗапрос.Приоритет, ПравилаЦенообразования.Приоритет) КАК Приоритет,
				   
//=====================ID правила!======================================				   
				   |	ЕСТЬNULL(ВложенныйЗапрос.ID, ПравилаЦенообразования.ID) КАК ID,
	        	   |	ПравилаЦенообразования.ID КАК IDo
	        	   
	               |ИЗ
	               |	(ВЫБРАТЬ
				   //------------------------показываем общее правило как +1000------------
	               |		Общие3.Приоритет+1000 КАК Приоритет,
	               |		Общие3.Категория КАК Категория,
	               |		Общие3.ТрСПб КАК ТрСПб,
	               |		Общие3.ТрРнД КАК ТрРнД,
	               |		Общие3.ТрЕкт КАК ТрЕкт,
				   //24.09.2018
	                |		Общие3.ТрТл КАК ТрТл,
	               |		Общие3.ВидТовара КАК ВидТовара,
	               |		Общие3.Производитель КАК Производитель,
	               |		Общие3.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |		Общие3.ВходитВПапку КАК ВходитВПапку,
	               |		Общие3.Диаметр КАК Диаметр,
	               |		Общие3.Номенклатура КАК Номенклатура,
	               |		Общие3.ТипЦен КАК ТипЦен,
	               |		Общие3.ПодСтрока КАК ПодСтрока,
	               |		Общие3.СкидкаНаценка КАК СкидкаНаценка3,
	               |		Общие3.СкидкаПредоплаты КАК СкидкаПредоплаты3,
	               |		ОбщиеПравила2.СкидкаНаценка КАК СкидкаНаценка2,
	               |		ОбщиеПравила2.СкидкаПредоплаты КАК СкидкаПредоплаты2,
	               |		ОбщиеПравила1.СкидкаНаценка КАК СкидкаНаценка1,
	               |		ОбщиеПравила1.СкидкаПредоплаты КАК СкидкаПредоплаты1,
	               |		ОбщиеПравила0.СкидкаНаценка КАК СкидкаНаценкаVIP,
	               |		ОбщиеПравила0.СкидкаПредоплаты КАК СкидкаПредоплатыVIP,
	           	   |		Общие3.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
			     	|		Общие3.ID КАК ID,
					//==================Транспорт=============================
					|		Общие3.ИспользоватьТранспорт,
					|		Общие3.ТрСПб,
					|		Общие3.ТрРнД,
					|		Общие3.ТрЕкт,
					//24.09.2018
					|		Общие3.ТрТл,
					
					//======================================================
					|		Общие3.Вход,
					|		Общие3.Бонус,
					|		Общие3.b2b,
					|		Общие3.СрокОплатыПоставщику
									   
	               |	ИЗ
	               |		РегистрСведений.ПравилаЦенообразованияОбщие КАК Общие3
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				Общие2.Приоритет КАК Приоритет,
	               |				Общие2.Категория КАК Категория,
	               |				Общие2.СкидкаНаценка КАК СкидкаНаценка,
	               |				Общие2.СкидкаПредоплаты КАК СкидкаПредоплаты
	               |			ИЗ
	               |				РегистрСведений.ПравилаЦенообразованияОбщие КАК Общие2
	               |			ГДЕ
	               |				Общие2.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к2)) КАК ОбщиеПравила2
	               |			ПО Общие3.Приоритет = ОбщиеПравила2.Приоритет
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				Общие1.Приоритет КАК Приоритет,
	               |				Общие1.Категория КАК Категория,
	               |				Общие1.СкидкаНаценка КАК СкидкаНаценка,
	               |				Общие1.СкидкаПредоплаты КАК СкидкаПредоплаты
	               |			ИЗ
	               |				РегистрСведений.ПравилаЦенообразованияОбщие КАК Общие1
	               |			ГДЕ
	               |				Общие1.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к1)) КАК ОбщиеПравила1
	               |			ПО Общие3.Приоритет = ОбщиеПравила1.Приоритет
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				Общие0.Приоритет КАК Приоритет,
	               |				Общие0.Категория КАК Категория,
	               |				Общие0.СкидкаНаценка КАК СкидкаНаценка,
	               |				Общие0.СкидкаПредоплаты КАК СкидкаПредоплаты
	               |			ИЗ
	               |				РегистрСведений.ПравилаЦенообразованияОбщие КАК Общие0
	               |			ГДЕ
	               |				Общие0.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.VIP)) КАК ОбщиеПравила0
	               |			ПО Общие3.Приоритет = ОбщиеПравила0.Приоритет
	               |	ГДЕ
	               |		Общие3.Категория = ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к3) 
				   |
				   |
				   |) КАК ПравилаЦенообразования
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ВТТовары.ВидТовара, ВТТовары.Категория, ВТТовары.ТрКлиента
	               |		ИЗ
	               |			ВТ_Товары КАК ВТТовары) КАК ВидКатегория
	               |		ПО ПравилаЦенообразования.ВидТовара = ВидКатегория.ВидТовара
				   
	//================================ПОЛНОЕ СОЕДИНЕНИЕ с перс.правилами?!=====================================================
	               |		ПОЛНОЕ СОЕДИНЕНИЕ
				   
				   |	(ВЫБРАТЬ  различные
				    	   |	ПерсПравила.Категория КАК Категория,
				    	   |	ПерсПравила.ВидТовара КАК ВидТовара,
				    	   |	ПерсПравила.ТипЦен КАК ТипЦен,
				    	   |	ПерсПравила.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				    	   |	ПерсПравила.Производитель КАК Производитель,
				    	   |	ПерсПравила.ПодСтрока КАК ПодСтрока,
				    	   |	ПерсПравила.Номенклатура КАК Номенклатура,
				    	   |	ПерсПравила.ВходитВПапку КАК ВходитВПапку,
				    	   |	ПерсПравила.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
				    	   |	ПерсПравила.ТрКлиента,
				    	   |	ПерсПравила.Диаметр КАК Диаметр,
				    	   |	ПерсПравила.Отклонение КАК Отклонение,
				    	   |	ПерсПравила.СкидкаНаценка КАК СкидкаНаценка,
				    	   |	ПерсПравила.СкидкаПредоплаты КАК СкидкаПредоплаты,
				    	   |	ПерсПравила.ВЫКЛЮЧЕНО,
				    	   |	ПерсПравила.Приоритет,
				    	   |	ПерсПравила.ID КАК ID,
				    	   |	ПерсПравила.ID КАК IDo
												 
				    	   |ИЗ
				    	   |	ВТ_ПерсПравила КАК ПерсПравила
				    	   |
	
						   |) КАК ВложенныйЗапрос
	               |		ПО выбор когда ВложенныйЗапрос.Диаметр="""" тогда  ПравилаЦенообразования.ID+"";"" = ВложенныйЗапрос.ID 
				   |		         ИНАЧЕ  ПравилаЦенообразования.ID+"";"" = ВложенныйЗапрос.ID ИЛИ
				   |				    ПравилаЦенообразования.ID+"".""+ ВложенныйЗапрос.Диаметр+"";"" = ВложенныйЗапрос.ID КОНЕЦ
				   
			   //+++ 27.09.2018 --- для распродажи -7000 и фикс цен -5000!
				  |//РаспродажаСоединение		или  (ВложенныйЗапрос.ID="""" 
				  |//РаспродажаСоединение				   И ПравилаЦенообразования.ВидТовара            = ВложенныйЗапрос.ВидТовара
			 	  |//РаспродажаСоединение 				   И ПравилаЦенообразования.НоменклатурнаяГруппа = ВложенныйЗапрос.НоменклатурнаяГруппа
			 	  |//РаспродажаСоединение 				   И ПравилаЦенообразования.Производитель		 = ВложенныйЗапрос.Производитель 
				  //---------------исключение NхM правил---------------
				  |//РаспродажаСоединение                  И  ( ПравилаЦенообразования.Номенклатура = ВложенныйЗапрос.Номенклатура
				//  |//РаспродажаСоединение                   ИЛИ ПравилаЦенообразования.Номенклатура = Значение(Справочник.Номенклатура.ПустаяСсылка)
				  |//РаспродажаСоединение              )      )
				  
				   |
				  |//флТолькоПерсональные ГДЕ НЕ (ВложенныйЗапрос.СкидкаНаценка ЕСТЬ NULL )
		    //+++ 27.09.2018 --- для распродажи -7000 и фикс цен -5000 - не надо в персональных показывать?!
				//   |//флТолькоПерсональные		и ВложенныйЗапрос.Приоритет>-499
				   
				   
				   |) как ВсеПравила
	               |
				   				   				   
//+++ 27.09.2018-------------ОТК (Коэффициент=2)----------------------------
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|( //Объед2ЛитыеНеОтеч
|	ВЫБРАТЬ
|		СтавкиБонусовКонтрагентовСрезПоследних.Значение * СтавкиБонусовКонтрагентовСрезПоследних.Коэффициент КАК СтавкаОТК,
|		СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара КАК ВидТовара
|//ЛитыеНеОтеч	 , ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка) КАК НоменклатурнаяГруппа,
|//ЛитыеНеОтеч		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ВходитВПапку
|	ИЗ
|		РегистрСведений.СтавкиБонусовКонтрагентов.СрезПоследних(&ТекДата, Контрагент = &Контрагент) КАК СтавкиБонусовКонтрагентовСрезПоследних
|	ГДЕ
|		СтавкиБонусовКонтрагентовСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.ВидБонуса.ОТК)
|		И СтавкиБонусовКонтрагентовСрезПоследних.Значение > 0
|	
|//ОбъедЛитыеНеОтеч
|
	| ) как ТабОТК
	|ПО ВсеПравила.ВидТовара = ТабОТК.ВидТовара
	
	//--------------------------------------------литые - отдельно!------------------------
 	|//ЛитыеНеОтеч	  и выбор когда ВсеПравила.НоменклатурнаяГруппа=&Литые 
	|//ЛитыеНеОтеч	  		тогда ВсеПравила.НоменклатурнаяГруппа = ТабОТК.НоменклатурнаяГруппа 
	|//ЛитыеНеОтеч		 иначе ТабОТК.НоменклатурнаяГруппа=ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка) Конец
	
	//|//ЛитыеНеОтеч	  и ПравилаЦенообразования.ВходитВПапку <> ТабОТК.ВходитВПапку 

	
//+++( 27.09.2018-----БОНУСЫ Клиента (СУММА ВСЕХ ДЕЙСТВУЮЩИХ Бонусов!) - выплачиваются параллельно - поэтому сумма!--------
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|(ВЫБРАТЬ
	|СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара,
	|СтавкиБонусовКонтрагентовСрезПоследних.Производитель КАК Производитель,
	|СтавкиБонусовКонтрагентовСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|СУММА(СтавкиБонусовКонтрагентовСрезПоследних.Значение) КАК БонусКлиента
	|ИЗ
	|РегистрСведений.СтавкиБонусовКонтрагентов.СрезПоследних(&ТекДата,Контрагент = &Контрагент ) КАК СтавкиБонусовКонтрагентовСрезПоследних
	|ГДЕ
	|СтавкиБонусовКонтрагентовСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.ВидБонуса.Бонус)
	|И СтавкиБонусовКонтрагентовСрезПоследних.Основание.ДатаПо >= &ТекДата
	|
	|СГРУППИРОВАТЬ ПО
	|СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара,
	|СтавкиБонусовКонтрагентовСрезПоследних.НоменклатурнаяГруппа,
	|СтавкиБонусовКонтрагентовСрезПоследних.Производитель
	|) как ТабБонус
	|ПО 
	//------------ОБЯЗАТЕЛЬНОЕ ТОЛЬКО Ном.Группа!--------------------------
	|  ВсеПравила.ВидТовара = ТабБонус.ВидТовара
	|  и ВсеПравила.НоменклатурнаяГруппа = ТабБонус.НоменклатурнаяГруппа 
	//необязателбное разбиение на производителей!
	|и выбор когда ТабБонус.Производитель=Значение(Справочник.Производители.ПустаяСсылка) тогда Истина
	|		иначе ВсеПравила.Производитель = ТабБонус.Производитель Конец
    |
//+++)	

	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет
				   |Автоупорядочивание
				   
	               |ИТОГИ 
				   |	МАКСИМУМ(СкидкаНаценкаVIP),
	               |	МАКСИМУМ(СкидкаПредоплатыVIP),
	               |	МАКСИМУМ(СкидкаНаценка1),
	               |	МАКСИМУМ(СкидкаПредоплаты1),
	               |	МАКСИМУМ(СкидкаНаценка2),
	               |	МАКСИМУМ(СкидкаПредоплаты2),
	               |	МАКСИМУМ(СкидкаНаценка3),
	               |	МАКСИМУМ(СкидкаПредоплаты3),
				   
				   |	МАКСИМУМ(НаценкаТранспорта),
				   //12.01.2017
                   |	МАКСИМУМ(ТрКлиента),
				   
                   //27.09.2018
                   |	МАКСИМУМ(НаценкаОТК),
                   |	МАКСИМУМ(СкидкаНаценкаМакс),
				   |	МАКСИМУМ(БонусКлиента)

				   |ПО
	               |	ВсеПравила.ВидТовара,
	               |	ВсеПравила.НоменклатурнаяГруппа,
	               |	ВсеПравила.Производитель";				   
				   
//+++ 27.09.2018 --- ОТК и Бонусы на текущую дату!------------------------
Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
Если ЕстьРаспродажаПоКлиенту(Контрагент, "90354") тогда
	сообщить("Есть литые диски НЕ отечественные!");
Запрос.текст = стрЗаменить(Запрос.текст, "//ЛитыеНеОтеч2","");
Запрос.текст = стрЗаменить(Запрос.текст, "//ЛитыеНеОтеч","");
	 нгЛитые = справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");
 грЛитыеОтеч = справочники.Номенклатура.НайтиПоКоду("9289310");
Запрос.УстановитьПараметр("Литые", нгЛитые);
Запрос.УстановитьПараметр("ЛитыеОтеч", грЛитыеОтеч);
Запрос.текст = стрЗаменить(Запрос.текст, "//Объед2ЛитыеНеОтеч","Выбрать 
|сумма(Итог1.СтавкаОТК) как СтавкаОТК,
  |	Итог1.ВидТовара,
   |Итог1.НоменклатурнаяГруппа,
   |Итог1.ВходитВПапку
   |ИЗ (");
   
 Запрос.текст = стрЗаменить(Запрос.текст, "//ОбъедЛитыеНеОтеч","ОБЪЕДИНИТЬ ВСЕ
|"+"ВЫБРАТЬ
   |	ЕСТЬNULL(НеОтечЛитые.СтавкаОТК, 0) + ЕСТЬNULL(СтавкиБонусовКонтрагентов2.СтавкаОТК,0) КАК СтавкаОТК,
   |	ЕСТЬNULL(НеОтечЛитые.ВидТовара,СтавкиБонусовКонтрагентов2.ВидТовара) как ВидТовара,
   |	ЕСТЬNULL(НеОтечЛитые.НоменклатурнаяГруппа, СтавкиБонусовКонтрагентов2.НоменклатурнаяГруппа) как НоменклатурнаяГруппа,
   |	ЕСТЬNULL(НеОтечЛитые.ВходитВПапку, СтавкиБонусовКонтрагентов2.ВходитВПапку) как ВходитВПапку
   |ИЗ
   |	(ВЫБРАТЬ
   |			1 КАК СтавкаОТК,
   |			ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски) КАК ВидТовара,
   |			&Литые КАК НоменклатурнаяГруппа,
   |			&ЛитыеОтеч КАК ВходитВПапку) КАК НеОтечЛитые
   
   |		ЛЕВОЕ СОЕДИНЕНИЕ    	(ВЫБРАТЬ
   |		СтавкиБонусовКонтрагентовСрезПоследних.Значение * СтавкиБонусовКонтрагентовСрезПоследних.Коэффициент КАК СтавкаОТК,
   |		СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара КАК ВидТовара,
   |		ВЫБОР
   |			КОГДА СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |				ТОГДА &Литые
   |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
   |		КОНЕЦ КАК НоменклатурнаяГруппа,
   |		ВЫБОР
   |			КОГДА СтавкиБонусовКонтрагентовСрезПоследних.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |				ТОГДА &ЛитыеОтеч
   |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
   |		КОНЕЦ КАК ВходитВПапку
   |	ИЗ
   |		РегистрСведений.СтавкиБонусовКонтрагентов.СрезПоследних(&ТекДата, Контрагент = &Контрагент) КАК СтавкиБонусовКонтрагентовСрезПоследних
   |	ГДЕ
   |		СтавкиБонусовКонтрагентовСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.ВидБонуса.ОТК)
   |		И СтавкиБонусовКонтрагентовСрезПоследних.Значение > 0) КАК СтавкиБонусовКонтрагентов2
   
   |		ПО СтавкиБонусовКонтрагентов2.ВидТовара = НеОтечЛитые.ВидТовара
   |			И СтавкиБонусовКонтрагентов2.НоменклатурнаяГруппа = НеОтечЛитые.НоменклатурнаяГруппа
   |			И СтавкиБонусовКонтрагентов2.ВходитВПапку = НеОтечЛитые.ВходитВПапку
   |"+") как Итог1
   |СГРУППИРОВАТЬ ПО
   |ВидТовара,
   |НоменклатурнаяГруппа,
   |ВходитВПапку
   |");

КонецЕсли;

Если ЕстьРаспродажаПоКлиенту(Контрагент) тогда
	сообщить("Есть товары по Распродаже (правило № -7000)!");
	
	Запрос.текст = стрЗаменить(Запрос.текст, "//РаспродажаТабл", "
|ОБЪЕДИНИТЬ ВСЕ
|	ВЫБРАТЬ
|	Значение(Перечисление.КатегорииСкидок.VIP) как Категория,
|	ЦеныДляРаспродажи.Номенклатура.ВидТовара как ВидТовара,
|	&Базовая как ТипЦен,
|	ЦеныДляРаспродажи.Номенклатура.НоменклатурнаяГруппа как НоменклатурнаяГруппа,
|	ЦеныДляРаспродажи.Номенклатура.Производитель как Производитель,
|	"""" как ПодСтрока,
|	ЦеныДляРаспродажи.Номенклатура,
|	ЦеныДляРаспродажи.Номенклатура.Родитель как ВходитВПапку,
|	ЦеныДляРаспродажи.Номенклатура.ВидДефектаДляУценки как ВидДефектаДляУценки,
|	0 ТрКлиента,
|	"""" как Диаметр,

|	0 Отклонение,
|	ЦеныДляРаспродажи.Цена как СкидкаНаценка,
|	0 как СкидкаПредоплаты,

|	ЛОЖЬ как Выключено,
|	-7000 как Приоритет,
|	"""" как ID,
|	"""" как IDo
|ИЗ
|	РегистрСведений.ЦеныДляРаспродажи как ЦеныДляРаспродажи

|ГДЕ  ЦеныДляРаспродажи.Период = &ДатаЦеныРаспродажи
|	  и ЦеныДляРаспродажи.ЗаписьАктивна = ЛОЖЬ");
	Запрос.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );
	ДатаЦеныРаспродажи = ОбменСУТИнтернетМагазин.ПолучитьДатуЦеныРаспродажи( ЛОЖЬ ); //как ЗаписьАктивна = ЛОЖЬ для рублевых!
   Запрос.УстановитьПараметр("ДатаЦеныРаспродажи", ДатаЦеныРаспродажи );
   Запрос.текст = стрЗаменить(Запрос.текст, "//РаспродажаСоединение", "");
КонецЕсли;

//======================================================================================
Если ЕстьФиксЦены(Контрагент) тогда
	сообщить("Есть фикс.цены по клиенту (правило № -5000)!");
Запрос.текст = стрЗаменить(Запрос.текст, "//ФиксТабл","
| ОБЪЕДИНИТЬ ВСЕ
|	ВЫБРАТЬ
|	Значение(Перечисление.КатегорииСкидок.VIP) как Категория,
|	ЦеныКлиентаСрезПоследних.Номенклатура.ВидТовара как ВидТовара,
|	&Базовая как ТипЦен,
|	ЦеныКлиентаСрезПоследних.Номенклатура.НоменклатурнаяГруппа как НоменклатурнаяГруппа,
|	ЦеныКлиентаСрезПоследних.Номенклатура.Производитель как Производитель,
|	"""" как ПодСтрока,
|	ЦеныКлиентаСрезПоследних.Номенклатура,

|	Значение(Справочник.Номенклатура.ПустаяСсылка) как ВходитВПапку,

|	ЦеныКлиентаСрезПоследних.Номенклатура.ВидДефектаДляУценки как ВидДефектаДляУценки,
|	0 ТрКлиента,
|	"""" как Диаметр,

|	0 Отклонение,
|	ЦеныКлиентаСрезПоследних.Цена как СкидкаНаценка,
|	0 как СкидкаПредоплаты,

|	ЛОЖЬ как Выключено,
//===============Фикс.цены клиента!!!=======================================
|	-5000 как Приоритет,
|	"""" как ID,
|	"""" как IDo
|ИЗ
|	РегистрСведений.ЦеныКлиента.СрезПоследних(,  Контрагент = &Контрагент) как ЦеныКлиентаСрезПоследних 
|");
  Запрос.текст = стрЗаменить(Запрос.текст, "//РаспродажаСоединение", "");
Запрос.УстановитьПараметр("Базовая", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );
КонецЕсли;

//-------------------транспорт-------------------------				   
ЭтоКлиентФилиала = Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение;				   
Запрос.УстановитьПараметр("ЭтоКлиентФилиала",  ЭтоКлиентФилиала);

КлиентСПб = ложь;КлиентРнД = ложь;КлиентЕкт = ложь;КлиентТл  = ложь;
если ЭтоКлиентФилиала тогда
	КодФл = Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.Код;
 	КлиентСПб = (КодФл = "00112");
 	КлиентРнД = (КодФл = "00106");
 	КлиентЕкт = (КодФл = "00138");
 	КлиентТл  = (КодФл = "00172");//24.09.2018
КонецЕсли;
Запрос.УстановитьПараметр("КлиентСПб",  КлиентСПб);
Запрос.УстановитьПараметр("КлиентРнД",  КлиентРнД);
Запрос.УстановитьПараметр("КлиентЕкт",  КлиентЕкт);
Запрос.УстановитьПараметр("КлиентТл",  КлиентТл);


//-------------------НДС--по экспортному клиенту в рублях!-----------------------				   
БезНДС = Контрагент.Экспорт и Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоКоду("643");
Запрос.УстановитьПараметр("БезНДС",  БезНДС);
 
Если флТолькоПерсональные тогда
	запрос.Текст = стрЗаменить(запрос.Текст , "//флТолькоПерсональные", "");
//05.10.2016 персональные - показывает ВСЕ правила				   
Иначе//  Если НЕ флТолькоПерсональные тогда
 //+++ 08.08.2018  - ВСЕ!	Запрос.Текст = стрЗаменить(Запрос.Текст, "//флТолькоНеВыключенные", "");
КонецЕсли;

	табл1 = Контрагент.КатегорияСкидок.Выгрузить();
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	для каждого вид1 из списокВидов цикл
		стрТов = табл1.найти(вид1.Значение, "ВидТовара");
		если стрТов=неопределено тогда
			стр1 = табл1.Добавить();
			стр1.видТовара = вид1.Значение;
			стр1.Категория = перечисления.КатегорииСкидок.к3;
		иначеЕсли стрТов.Категория = перечисления.КатегорииСкидок.ПустаяСсылка() тогда
			стрТов.Категория = перечисления.КатегорииСкидок.к3;
		КонецЕсли;	
	КонецЦикла;				   
	Запрос.УстановитьПараметр("ТаблВидов", табл1);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	
	выборка1 = Результат.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
	ДеревоПравил.Строки.Очистить();
	Пока выборка1.Следующий() цикл  //-----------------Вид товара -----------------
		стр1 = ДеревоПравил.Строки.Добавить();
		ЗаполнитьЗначенияСвойств( стр1, выборка1);
		
		выборка2 = выборка1.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
		кат2 = неопределено; Скидка2=неопределено; Предоплата2=неопределено;Откл2=неопределено;

		Пока выборка2.Следующий() цикл  //-----------Ном.группа ------------------
			стр2 = стр1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, выборка2);
	
			выборка3 = выборка2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
			кат3 = неопределено; Скидка3=неопределено; Предоплата3=неопределено; Откл3=неопределено;

			Пока выборка3.Следующий() цикл // --------- Производитель ------------------------
				стр3 = стр2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр3, выборка3);
	   
				выборка4 = выборка3.Выбрать();
				кат4 = неопределено; Скидка4=неопределено; Предоплата4=неопределено;  Откл4=неопределено;
				диаметр0 = ""; IDo = ""; IDoo="";  выкл0=ложь;
				Пока выборка4.Следующий() цикл   //-----------БЕЛЫЙ уровень 1 правила-------------------
					
					//+++( 08.02.2018 -------------НЕ показываем "лишних" правил-----------
					Если диаметр0 <> "" и выкл0=ложь тогда
						диаметр1 = выборка4.диаметр;
						Если выборка4.ID = IDoo+";" тогда // одинаковые правила до диаметра... перс = общ.
						диаметр0 = выборка4.диаметр;
							 IDo = выборка4.ID;
							 IDoo= выборка4.IDo;
							 выкл0=выборка4.Выключено;
							продолжить;
						ИначеЕсли выборка4.IDo = IDoo+"."+диаметр1     // общее правило с персональным...
							   или выборка4.IDo = IDoo тогда // одинаковые правила... с разными диаметрами...
							Если диаметр1 = диаметр0 тогда // диаметры совпадают... (разные категории или скидки перс.правил)
							диаметр0 = выборка4.диаметр;
								 IDo = выборка4.ID;
								 IDoo= выборка4.IDo;
							 выкл0=выборка4.Выключено;
							 продолжить;
							КонецЕсли; 
					//		//------------диаметры разные---------------------------
					//		д2o = 0; д21 = 0; д1o = 0; д11 = 0;
					//		iTo = найти(диаметр0,"-"); iRo = найти(диаметр0,"<=")+1; Lo = стрДлина(диаметр0);
					//		iT1 = найти(диаметр1,"-"); iR1 = найти(диаметр1,"<=")+1; L1 = стрДлина(диаметр1);
					//		 Если iTo>0 тогда 		д2o= число(прав(диаметр0, Lo - iTo ));  д1o = число(лев(диаметр0, iTo-1));
					//		 ИначеЕсли iRo>1 тогда 	д2o= число(прав(диаметр0, Lo - iRo ));
					//		 КонецЕсли;
					//		 Если iT1>0 тогда 		д21= число(прав(диаметр1, L1 - iT1 )); д11 = число(лев(диаметр1, iT1-1));
					//		 ИначеЕсли iR1>1 тогда 	д21= число(прав(диаметр1, L1 - iR1 ));
					//		 КонецЕсли;
					//		 
					//		 Если д2o >= д21 тогда // совпадает конец   13-16  и <=15  или 14-15
					//			 Если д1o<=д11              //13-16 и 14-15 - можо
					//				 или (д11=0 и д1o>д21)   //16-22 <=15 - нельзя
					//				 или (д1o=0) тогда       //<=16  12-13 
					//	 		диаметр0 = выборка4.диаметр;
					//			 IDo = выборка4.ID;
					//			 IDoo= выборка4.IDo;
					//			 продолжить;
					//		   КонецЕсли;
					//	   КонецЕсли; 
					//	   
					//		//-------------------с меньшего на интервал-------------------------
					//	Если iTo=0 и iRo=0 и Lo>0 тогда // >=16  и 16-22
					//			iTo = найти(диаметр0,">=")+1;
					//			Если iTo>1 тогда д1o= число(прав(диаметр0, Lo - iTo )); д2o=0; 
					//			КонецЕсли;
					//		КонецЕсли;	
					//	Если iT1=0 и iR1=0 и L1>0 тогда // >=16  и 16-22
					//			iT1 = найти(диаметр1,">=")+1;
					//			Если iT1>1 тогда д11= число(прав(диаметр1, L1 - iT1 )); д21=0; 
					//			КонецЕсли;
					//		КонецЕсли;	

					//		 Если д1o<=д11 тогда // совпадает начало 15-22  и >=16  или 16-20
					//			 Если  д2o>=д21 
					//				 или (д21=0 и д2o>=д11) //14-15 и >=15  нельзя
					//				 или (д2o=0)  тогда
					//	 		диаметр0 = выборка4.диаметр;
					//			 IDo = выборка4.ID;
					//			 IDoo= выборка4.IDo;
					//			 продолжить;
					//		   КонецЕсли;
					//		 КонецЕсли; 
						КонецЕсли;//.ID=IDo	
					КонецЕсли;	
						диаметр0 = выборка4.диаметр;
							 IDo = выборка4.ID;
							 IDoo= выборка4.IDo;
							 выкл0=выборка4.Выключено;
					//+++)
					
				стр4 = стр3.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр4, выборка4);
							
			   //27.09.2018 МАКСИМАЛЬНАЯ эффективная скидка клиента = каскадная скидка от Наценки + Предоплата + Тр + ОТК
			   		если стр4.СкидкаНаценка>100 тогда
				   		стр4.СкидкаНаценкаМакс = стр4.СкидкаНаценка*(1+стр4.ТрКлиента/100)*(1+стр4.НаценкаТранспорта/100)*(1+стр4.НаценкаОТК/100);
					иначе 
						стр4.СкидкаНаценкаМакс = 100*(-1 + (1+стр4.СкидкаНаценка/100)*(1+стр4.СкидкаПредоплаты/100)*(1+стр4.ТрКлиента/100)*(1+стр4.НаценкаТранспорта/100)*(1+стр4.НаценкаОТК/100));
					КонецЕсли;	
	
					Если кат4=неопределено тогда
						кат4=стр4.Категория;
					ИначеЕсли кат4<>стр4.Категория тогда // если отличается хоть одна категория - то пусто!
						кат4=перечисления.КатегорииСкидок.ПустаяСсылка();
					КонецЕсли;	
					Если Скидка4=неопределено тогда
						Скидка4=стр4.СкидкаНаценка;
					ИначеЕсли Скидка4<>стр4.СкидкаНаценка тогда // если отличается хоть одна категория - то пусто!
						Скидка4=0;
					КонецЕсли;	
					Если Предоплата4=неопределено тогда
						Предоплата4=стр4.СкидкаПредоплаты;
					ИначеЕсли Предоплата4<>стр4.СкидкаПредоплаты тогда // если отличается хоть одна категория - то пусто!
						Предоплата4=0;
					КонецЕсли;
					Если Откл4=неопределено тогда
						Откл4=стр4.Отклонение;
					ИначеЕсли Откл4<>стр4.Отклонение тогда // если отличается хоть одна категория - то пусто!
						Откл4=0;
					КонецЕсли;

				КонецЦикла;//4
				
				стр3.Категория = кат4;
				Если кат3=неопределено тогда
					кат3=стр3.Категория;
				ИначеЕсли кат3<>стр3.Категория тогда // если отличается хоть одна категория - то пусто!
					кат3=перечисления.КатегорииСкидок.ПустаяСсылка();
				КонецЕсли;	
                стр3.СкидкаНаценка = Скидка4;
				Если Скидка3=неопределено тогда
					Скидка3=стр3.СкидкаНаценка;
				ИначеЕсли Скидка3<>стр3.СкидкаНаценка тогда // если отличается хоть одна категория - то пусто!
					Скидка3=0;
				КонецЕсли;	
				стр3.СкидкаПредоплаты = Предоплата4;
				Если Предоплата3=неопределено тогда
					Предоплата3=стр3.СкидкаПредоплаты;
				ИначеЕсли Предоплата3<>стр3.СкидкаПредоплаты тогда // если отличается хоть одна категория - то пусто!
					Предоплата3=0;
				КонецЕсли;	
				стр3.Отклонение = Откл4;
				Если Откл3=неопределено тогда
					Откл3=стр3.Отклонение;
				ИначеЕсли Откл3<>стр3.Отклонение тогда // если отличается хоть одна категория - то пусто!
					Откл3=0;
				КонецЕсли;

		    	если стр3.СкидкаНаценка>100 тогда
	   				стр3.СкидкаНаценкаМакс = стр3.СкидкаНаценка*(1+стр3.ТрКлиента/100)*(1+стр3.НаценкаТранспорта/100)*(1+стр3.НаценкаОТК/100);
				иначе 
					стр3.СкидкаНаценкаМакс = 100*(-1 + (1+стр3.СкидкаНаценка/100)*(1+стр3.СкидкаПредоплаты/100)*(1+стр3.ТрКлиента/100)*(1+стр3.НаценкаТранспорта/100)*(1+стр3.НаценкаОТК/100));
				КонецЕсли;
 			КонецЦикла;//3
			стр2.Категория = кат3;
			Если кат2=неопределено тогда
				кат2=стр2.Категория;
			ИначеЕсли кат2<>стр2.Категория тогда // если отличается хоть одна категория - то пусто!
				кат2=перечисления.КатегорииСкидок.ПустаяСсылка();
			КонецЕсли;	
	        стр2.СкидкаНаценка = Скидка3;
			Если Скидка2=неопределено тогда
				Скидка2=стр2.СкидкаНаценка;
			ИначеЕсли Скидка2<>стр2.СкидкаНаценка тогда // если отличается хоть одна категория - то пусто!
				Скидка2=0;
			КонецЕсли;	
			стр2.СкидкаПредоплаты = Предоплата3;
			Если Предоплата2=неопределено тогда
				Предоплата2=стр2.СкидкаПредоплаты;
			ИначеЕсли Предоплата2<>стр2.СкидкаПредоплаты тогда // если отличается хоть одна категория - то пусто!
				Предоплата2=0;
			КонецЕсли;	
			стр2.Отклонение = Откл3;
			Если Откл2=неопределено тогда
				Откл2=стр2.Отклонение;
			ИначеЕсли Откл3<>стр2.Отклонение тогда // если отличается хоть одна категория - то пусто!
				Откл2=0;
			КонецЕсли;	

		 	если стр2.СкидкаНаценка>100 тогда
	   			стр2.СкидкаНаценкаМакс = стр2.СкидкаНаценка*(1+стр2.ТрКлиента/100)*(1+стр2.НаценкаТранспорта/100)*(1+стр2.НаценкаОТК/100);
			иначе 
				стр2.СкидкаНаценкаМакс = 100*(-1 + (1+стр2.СкидкаНаценка/100)*(1+стр2.СкидкаПредоплаты/100)*(1+стр2.ТрКлиента/100)*(1+стр2.НаценкаТранспорта/100)*(1+стр2.НаценкаОТК/100));
			КонецЕсли;	
		КонецЦикла;//2
		стр1.Категория = кат2;
	    стр1.СкидкаНаценка = Скидка2;
		стр1.СкидкаПредоплаты = Предоплата2;
		стр1.Отклонение = Откл2;
	КонецЦикла;	//1
	
//сортировка
ДеревоПравил.Строки.Сортировать("ВидТовара УБЫВ");
для каждого стр1 из ДеревоПравил.Строки цикл
	стр1.Строки.Сортировать("НоменклатурнаяГруппа");
	для каждого стр2 из стр1.Строки цикл
		стр2.Строки.Сортировать("Производитель");
		для каждого стр3 из стр2.Строки цикл
		стр3.Строки.Сортировать("Приоритет");
		КонецЦикла;
	КонецЦикла;
КонецЦикла;
	
ЭлементыФормы.КоманднаяПанель1.Кнопки.РазвернутьВсе.Пометка = ложь;	
КонецПроцедуры

функция ЕстьРаспродажаПоКлиенту(Контр, КодСвва = "90183")
	Запрос123 = Новый Запрос;
	Запрос123.Текст = "ВЫБРАТЬ 
	 |	ЗначенияСвойствОбъектов.Свойство
	 |ИЗ
	 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	 |ГДЕ
	 |	ЗначенияСвойствОбъектов.Объект     = &Контрагент
	 |	И ЗначенияСвойствОбъектов.Свойство = &Свойство
	 |	И ЗначенияСвойствОбъектов.Значение = Истина
	 |";
	СвойствоРаспродажи = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвва); //Цены распродажи
	Запрос123.УстановитьПараметр("Свойство", СвойствоРаспродажи);
	Запрос123.УстановитьПараметр("Контрагент", Контр);
	Результат123 = Запрос123.Выполнить();
	рез = не Результат123.Пустой();
    возврат рез;
КонецФункции

Процедура КоманднаяПанель1РазвернутьВсе(Кнопка) 
	Свернуть = ЭлементыФормы.КоманднаяПанель1.Кнопки.РазвернутьВсе.Пометка;
	
	для каждого стр1 из ДеревоПравил.Строки цикл
		если Свернуть тогда
			ЭлементыФормы.ДеревоПравил.Свернуть(стр1);
		Иначе // сразу всё дерево
			ЭлементыФормы.ДеревоПравил.Развернуть(стр1, Истина);
		КонецЕсли;
		
		Если Свернуть тогда
		Для каждого стр2 из стр1.Строки цикл
			ЭлементыФормы.ДеревоПравил.Свернуть(стр2);
			для каждого стр3 из стр2.Строки цикл
				ЭлементыФормы.ДеревоПравил.Свернуть(стр3);
				//для каждого стр4 из стр3.Строки цикл
				//	ЭлементыФормы.ДеревоПравил.Свернуть(стр4);
				//КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;

ЭлементыФормы.КоманднаяПанель1.Кнопки.РазвернутьВсе.Пометка = не ЭлементыФормы.КоманднаяПанель1.Кнопки.РазвернутьВсе.Пометка;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Менеджер = глТекущийПользователь;
	ТипЦенB2B = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032"); //29.05.2017   10.04.2018
	
	//флТолькоПерсональные = Истина;
	//КоманднаяПанель1Обновить(неопределено);  //01.06 - 17.09.2017

КонецПроцедуры

Процедура ДеревоПравилПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Родитель) тогда     // 1 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоСерый; 
	Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.Родитель.Родитель) тогда// 2 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЗолотистый; 
    Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.Родитель.Родитель.Родитель) тогда// 3 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЖелтыйЗолотистый; 
    КонецЕсли;

	Если ДанныеСтроки.Приоритет<0 тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноЗеленый;
	КонецЕсли;
	
//=========================Превышение скидки - красным ===============================================	
	Если ДанныеСтроки.СкидкаНаценка<ДанныеСтроки.СкидкаНаценка1 
		и ДанныеСтроки.СкидкаНаценка>ДанныеСтроки.СкидкаНаценкаVIP тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноКрасный;
	КонецЕсли;
	Если ДанныеСтроки.СкидкаНаценка<ДанныеСтроки.СкидкаНаценкаVIP тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.Красный;
	КонецЕсли;
	
//=========================Превышение предоплаты - желтый фон===============================================	
	//Если ДанныеСтроки.СкидкаПредоплаты<ДанныеСтроки.СкидкаПредоплаты1 
	//	и ДанныеСтроки.СкидкаПредоплаты<>ДанныеСтроки.СкидкаПредоплатыVIP тогда
	//	ОформлениеСтроки.ЦветФона = webЦвета.Желтый;
	//КонецЕсли;
		
	Если ДанныеСтроки.СкидкаНаценка>200 тогда // рубли!
		ОформлениеСтроки.ЦветТекста = webЦвета.Синий;
	КонецЕсли;

	//=========================Правило ВЫКЛЮЧЕНО===============================================	
	Если ДанныеСтроки.ВЫКЛЮЧЕНО тогда
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоСерый;
	КонецЕсли;


	Если ДанныеСтроки.Изм тогда  //жирный
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
	КонецЕсли;
	
КонецПроцедуры

// - 5000 - по регистру "ЦеныКлиента"
функция ЕстьФиксЦены(Контр)
	Запрос123 = Новый Запрос;
	Запрос123.Текст = "ВЫБРАТЬ  фикс.Контрагент   
	|из РегистрСведений.ЦеныКлиента.СрезПоследних( ,  Контрагент = &Контрагент) как фикс";
	Запрос123.УстановитьПараметр("Контрагент", Контр);
	рез123 = Запрос123.Выполнить();
	рез = не рез123.Пустой();
	возврат рез;
КонецФункции



Функция ПолучитьУровень( текСтр )
	уровень=0; род1 = текСтр.Родитель;
		Если ЗначениеЗаполнено( род1 ) тогда // 1
			уровень=уровень+1; род2 = род1.Родитель;
			Если ЗначениеЗаполнено( род2 ) тогда //2
		    	уровень=уровень+1; род3 = род2.Родитель;
				Если ЗначениеЗаполнено( род3 ) тогда //3
		    	уровень=уровень+1; род4 = род3.Родитель;
					Если ЗначениеЗаполнено( род4 ) тогда //4
		    		уровень=уровень+1;
                    КонецЕсли;//4
                КонецЕсли;//3
            КонецЕсли;//2
		КонецЕсли;//1
возврат уровень;
КонецФункции

процедура ИзменитьВнизПоДереву(текСтр, поле1)
	
		если текСтр.Строки.Количество()>0 тогда
			для каждого стр1 из текСтр.Строки цикл
				Если текСтр[поле1]<>неопределено тогда
					стр1[поле1]=текСтр[поле1];
					стр1.СкидкаНаценкаМакс =-100 + 100*(1+стр1.СкидкаНаценка/100)*(1+стр1.СкидкаПредоплаты/100)*(1+стр1.ТрКлиента/100)*(1+стр1.НаценкаТранспорта/100)*(1+стр1.НаценкаОТК/100);
 					стр1.Изм  = истина; //30.05.2017
					Если  ПолучитьУровень( стр1 )= 3 тогда // самый низ...
						Если поле1="Категория" тогда
							ДеревоПравилКатегорияПриИзменении(неопределено, стр1 );
						ИначеЕсли поле1="СкидкаНаценка" тогда
							ДеревоПравилСкидкаНаценкаПриИзменении(неопределено, стр1 );
						ИначеЕсли поле1="СкидкаПредоплаты" тогда
							ДеревоПравилСкидкаПредоплатыПриИзменении(неопределено, стр1 );
						Иначе //Тр.Клиента или Диаметр
							стр1.Перс = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				ИзменитьВнизПоДереву(стр1, поле1); // всё дерево рекурентно
			КонецЦикла;	
		КонецЕсли;	
	
КонецПроцедуры	

//Единая функция для изменения вниз по дереву
Процедура ДеревоПравилВнизПоДеревуПриИзменении(Элемент)
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	Если  ПолучитьУровень( текСтр )<3 тогда
		полеНазв = ЭлементыФормы.ДеревоПравил.ТекущаяКолонка.Имя;
		Если Вопрос("Вы Уверены, что хотите изменить ВСЕ вложенные правила?",РежимДиалогаВопрос.ДаНет,0 )=КодВозвратаДиалога.Да тогда
		ИзменитьВнизПоДереву(текСтр, полеНазв);
		КонецЕсли;
	иначеЕсли текСтр<>неопределено тогда
	текСтр.СкидкаНаценкаМакс = -100 + 100*(1+текСтр.СкидкаНаценка/100)*(1+текСтр.СкидкаПредоплаты/100)*(1+текСтр.ТрКлиента/100)*(1+текСтр.НаценкаТранспорта/100)*(1+текСтр.НаценкаОТК/100); //бонусы не влияют!
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДеревоПравилСкидкаПредоплатыПриИзменении(Элемент, выборка=неопределено)
	
	Если выборка=неопределено тогда
		Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	КонецЕсли;
	Если  ПолучитьУровень( Выборка )< 3 тогда
		//Предупреждение("Изменять Процент по предоплате надо только на уровне Одного правила!", 10);
		//Выборка.Отклонение = 0;
		ДеревоПравилВнизПоДеревуПриИзменении(Элемент);
		возврат;
	КонецЕсли;	
	
	//ограничения!
	Если Выборка.СкидкаПредоплаты<-10 тогда
		Предупреждение("Слишком большой % предоплаты <-10% !",10);
		Выборка.СкидкаПредоплаты=-10;
	КонецЕсли;	
	Если Выборка.СкидкаПредоплаты>0 тогда
		Предупреждение("Процент по предоплате не может быть больше нуля!",10);
		Выборка.СкидкаПредоплаты=0;
	КонецЕсли;	
	
	Если Выборка.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
         Выборка.СкидкаНаценка    = 0;
         Выборка.Отклонение	      = 0;
	     Выборка.СкидкаПредоплаты = 0;
	КонецЕсли;
Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);
			 
	// выборка.Перс = истина;
	выборка.Изм  = истина; // изменение любые...
	ПроверитьОтключениеПерсПравила(Выборка);
   
КонецПроцедуры

//========================================================================================

Процедура ДеревоПравилОтклонениеПриИзменении(Элемент)
	Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если  ПолучитьУровень( Выборка )< 3 тогда
		Предупреждение("Изменять Отклонение надо только на уровне Одного правила!", 10);
		Выборка.Отклонение = 0;
		возврат;
	КонецЕсли;	

	Если Выборка.Приоритет<0 тогда//07.03.2017
		Предупреждение("Нельзя менять исключительное общее правило!", 10);
	КонецЕсли;	
	
		//ограничения!
	Если Выборка.Отклонение<-30 тогда
		Предупреждение("Слишком большой % отклонения <-30% !",10);
		Выборка.Отклонение=-30;
	КонецЕсли;	
	Если Выборка.Отклонение>30 тогда
		Предупреждение("Слишком большой % отклонения >+30% !",10);
		Выборка.Отклонение=30;
	КонецЕсли;	
	
	 Если Выборка.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
         Выборка.СкидкаНаценка = 0;
	     Выборка.Отклонение    = 0;
	 Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.VIP тогда
	 Выборка.СкидкаНаценка = Выборка.СкидкаНаценкаVIP + выборка.Отклонение;
	 Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.к1 тогда
	 Выборка.СкидкаНаценка = Выборка.СкидкаНаценка1 + выборка.Отклонение;
	 Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.к2 тогда
	 Выборка.СкидкаНаценка = Выборка.СкидкаНаценка2 + выборка.Отклонение;
	 Иначе //если Выборка.СкидкаНаценка<=Выборка.СкидкаНаценка1 тогда
	 Выборка.СкидкаНаценка = Выборка.СкидкаНаценка3 + выборка.Отклонение;
 	КонецЕсли;
	
Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);
	
	 ПроверитьОтключениеПерсПравила(Выборка);
	
	 //обратный пересчет от скидки - категорию и отклонение
	 ДеревоПравилСкидкаНаценкаПриИзменении(неопределено);
	 
КонецПроцедуры

Процедура ДеревоПравилСкидкаНаценкаПриИзменении(Элемент, выборка=неопределено)
   Если выборка=неопределено тогда
	  Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
   КонецЕсли;

    Если Выборка.Приоритет<0 тогда//07.03.2017
	 Предупреждение("Нельзя менять Исключительные правила!",10);
	КонецЕсли;
	
 	Если  ПолучитьУровень( Выборка )< 3 тогда
		//Предупреждение("Изменять скидку надо только на уровне Одного правила!", 10);
		//Выборка.СкидкаНаценка = 0;
		ДеревоПравилВнизПоДеревуПриИзменении(Элемент);
		возврат;
	КонецЕсли;	
	
	
	//ограничения!
	Если Выборка.СкидкаНаценка<-70 тогда
		Предупреждение("Слишком большой % скидки <-70% !",10);
		Выборка.СкидкаНаценка=-70;
	КонецЕсли;	
	Если Выборка.СкидкаНаценка>70 тогда
		Предупреждение("Слишком большая наценка >+70% !",10);
		Выборка.СкидкаНаценка=70;
	КонецЕсли;	

	
	 Если Выборка.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
         Выборка.СкидкаНаценка    = 0;
         Выборка.Отклонение	      = 0;
	     Выборка.СкидкаПредоплаты = 0;
		 Выборка.СкидкаНаценкаМакс =0;
	 Иначе	 
		Если Выборка.СкидкаНаценка<=Выборка.СкидкаНаценкаVIP тогда
			 Выборка.Категория  = перечисления.КатегорииСкидок.VIP;
			 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка.СкидкаНаценкаVIP;
		 Иначеесли Выборка.СкидкаНаценка<=Выборка.СкидкаНаценка1 тогда
			 Выборка.Категория  = перечисления.КатегорииСкидок.к1;
			 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка.СкидкаНаценка1;
		 Иначеесли Выборка.СкидкаНаценка<=Выборка.СкидкаНаценка2 тогда
			 Выборка.Категория  = перечисления.КатегорииСкидок.к2;
			 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка.СкидкаНаценка2;
		 Иначе //если Выборка.СкидкаНаценка<=Выборка.СкидкаНаценка1 тогда
			 Выборка.Категория  = перечисления.КатегорииСкидок.к3;
			 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка.СкидкаНаценка3;
	 	 КонецЕсли;
				
		 //изменение скидки предоплаты по Категории
	     выборка.СкидкаПредоплаты = выборка["СкидкаПредоплаты"+строка(Выборка.Категория)];
		 
 		 ПроверитьОтключениеПерсПравила(Выборка);
	 КонецЕсли;
	 
	Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);
	Выборка.изм = Истина;	 
	 
КонецПроцедуры


процедура ПроверитьОтключениеПерсПравила(Выборка)
	
	Выборка.Перс = Истина;
	
	 //----------Выбрана категория клиента! Персональное правило НЕ Нужно!--------------
	стр1 =  Контрагент.КатегорияСкидок.Найти(Выборка.ВидТовара,"ВидТовара");
	катКлиента = ?(стр1=Неопределено, перечисления.КатегорииСкидок.к3, 
	                       ?(стр1.Категория= перечисления.КатегорииСкидок.ПустаяСсылка(),  перечисления.КатегорииСкидок.к3, 
						        стр1.Категория) );
								
	Если Выборка.Категория = катКлиента
	   и Выборка.Отклонение = 0 
	   и Выборка.ТрКлиента  = 0 тогда //30.05.2017
	   
		Если Выборка.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
			Выборка.Перс = ЛОЖЬ;
			сообщить("Выбрана категория B2B как у Клиента! Персональное правило НЕ Нужно!", СтатусСообщения.Информация);
			
		ИначеЕсли  выборка["СкидкаПредоплаты"+строка(Выборка.Категория)]=выборка.СкидкаПредоплаты
			     и выборка["СкидкаНаценка"+строка(Выборка.Категория)]=выборка.СкидкаНаценка
			     и Выборка.ID  = Выборка.IDo тогда  //правило
			Выборка.Перс = ЛОЖЬ;
			Предупреждение("Выбраны Скидки по Категории Клиента (Общему правилу)! Персональное правило не нужно и не будет записано!",10);
		КонецЕсли;
		
	КонецЕсли;	
 Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);

КонецПроцедуры

Процедура ДеревоПравилКатегорияПриИзменении(Элемент, выборка=неопределено)
	
	Если выборка=неопределено тогда
		Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	КонецЕсли;
	
	Если  ПолучитьУровень( Выборка )< 3 тогда
		ДеревоПравилВнизПоДеревуПриИзменении(Элемент);
		возврат;
	КонецЕсли;	

	Если Выборка.Искл или выборка.Приоритет<0 тогда
		Сообщить("НЕЛЬЗЯ менять Категорию для исключительного правила "+строка(выборка.Приоритет), СтатусСообщения.Внимание);
		возврат;
	КонецЕсли;	
	
	
	выборка.Отклонение = 0;
	если Выборка.Категория = перечисления.КатегорииСкидок.B2B тогда //29.05.2017
         Выборка.СкидкаНаценка    = 0;
	     Выборка.СкидкаПредоплаты = 0;
	Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.VIP тогда
		 Выборка.СкидкаНаценка    = Выборка.СкидкаНаценкаVIP + выборка.Отклонение;
		 Выборка.СкидкаПредоплаты = Выборка.СкидкаПредоплатыVIP;
	 Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.к1 тогда
		 Выборка.СкидкаНаценка = Выборка.СкидкаНаценка1 + выборка.Отклонение;
		 Выборка.СкидкаПредоплаты = Выборка.СкидкаПредоплаты1;
	 Иначеесли Выборка.Категория = перечисления.КатегорииСкидок.к2 тогда
		 Выборка.СкидкаНаценка = Выборка.СкидкаНаценка2 + выборка.Отклонение;
		 Выборка.СкидкаПредоплаты = Выборка.СкидкаПредоплаты2;
	 Иначе //к3
		Выборка.Категория = перечисления.КатегорииСкидок.к3;
	 	Выборка.СкидкаНаценка = Выборка.СкидкаНаценка3 + выборка.Отклонение;
 		Выборка.СкидкаПредоплаты = Выборка.СкидкаПредоплаты3;
	 КонецЕсли;
			 
	//----------Выбрана категория клиента! Персональное правило НЕ Нужно!--------------
	стр1 =  Контрагент.КатегорияСкидок.Найти(Выборка.ВидТовара,"ВидТовара");
	катКлиента = ?(стр1=Неопределено, перечисления.КатегорииСкидок.к3, 
	                       ?(стр1.Категория= перечисления.КатегорииСкидок.ПустаяСсылка(),  перечисления.КатегорииСкидок.к3, 
						        стр1.Категория) );
	Если Выборка.Категория = катКлиента 
		и Выборка.ТрКлиента= 0 
		и Выборка.Диаметр  = "" тогда //30.05.2017
		Выборка.Перс = ЛОЖЬ;
		Предупреждение("Выбрана Категория, равная категории клиента! Персональное правило НЕ нужно и не будет записано!", 10);
	Иначе 
		Выборка.Перс = Истина;
	КонецЕсли;	
	
Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);
	Выборка.Изм = Истина;
	
КонецПроцедуры


Процедура флТолькоПерсональныеПриИзменении(Элемент)
	
	Если ДеревоПравил.Строки.Количество()>0 тогда
		Если Вопрос("Все не сохраненные данные будут удалены!
				|Перечитать правила заново?", РежимДиалогаВопрос.ДаНет, 0)=КодВозвратаДиалога.Нет тогда
		возврат;
		КонецЕсли;
	КонецЕсли;
	
		КоманднаяПанель1Обновить(неопределено);
		
		Если флТолькоПерсональные тогда
			КоманднаяПанель1РазвернутьВсе(неопределено);
		КонецЕсли;

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	КоманднаяПанель1Обновить(неопределено);

КонецПроцедуры



Процедура ДеревоПравилПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	если НЕ Копирование тогда
		Предупреждение("Нельзя добавлять новые строки! Персональные правила 
						|должны быть однозначно связаны с Общими правилами!", 10);
		Отказ=Истина;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1Скопировать(Кнопка)
	
	Контр0 = Контрагент;
	
	если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РазрешитьПолныйСписокКонтрагентов") тогда
		группа = справочники.ГруппыПользователей.НайтиПоКоду(11); //все пользователи по всем филиалам
	иначе
		группа = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов");
	КонецЕсли;
	
	СписокПользователей = новый СписокЗначений;
	Если группа<>неопределено и группа<>справочники.ГруппыПользователей.ПустаяСсылка() тогда
		для каждого стр1 из группа.ПользователиГруппы цикл
			СписокПользователей.Добавить(стр1.Пользователь);
		КонецЦикла;
	Иначе //только по себе!
		СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	форма1 = ЭтотОбъект.ПолучитьФорму("ФормаСписка");
	форма1.ПолеСписка1  = ПолучитьТаблКонтрагентовМенеджера(СписокПользователей);   //08.02.2017
	Контры  = форма1.ОткрытьМодально();
	
	Если контры<>неопределено тогда
		
		Ответ = Вопрос("Копировать ВСЕ правила клиента: "+строка(Контр0)+" ?
			          //  |или  только Выбранные правила - нажмите (НЕТ)?
						|Для отмены копирования - нажмите (Отмена)", РежимДиалогаВопрос.ДаНетОтмена, 0);
						
		Если Ответ = КодВозвратаДиалога.Да тогда				
			флТОЛЬКОизмененные = ЛОЖЬ;
		Иначе //Если Ответ = КодВозвратаДиалога.НЕТ тогда				
			//флТОЛЬКОизмененные = Истина;
		//Иначе
			Предупреждение("Копирование отменено.", 10);
			возврат;
		КонецЕсли;
		
		для i=0 по Контры.Количество()-1 цикл
			Если не Контры[i].Пометка тогда
				продолжить;
			КонецЕсли;	
			Контрагент = Контры[i].Контрагент;
			КнопкаВыполнитьНажатие(неопределено, флТОЛЬКОизмененные);
		КонецЦикла;
		
		Контрагент = Контр0;
		
	КонецЕсли;	
	
КонецПроцедуры


Функция ПолучитьТаблКонтрагентовМенеджера(ТекущийПользователь)
	
	Если ТипЗнч(ТекущийПользователь) <> Тип("СписокЗначений") Тогда
	
		СписокПользователей = Новый СписокЗначений;
		СписокПользователей.Добавить(ТекущийПользователь);
		
	Иначе
		
		СписокПользователей = ТекущийПользователь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛОЖЬ КАК Пометка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	КонтактнаяИнформация.Поле4  как Регион
	|ИЗ
	|	(ВЫБРАТЬ
	|		Контрагенты.Ссылка КАК Контрагент
	|	ИЗ
	|		Справочник.Контрагенты КАК Контрагенты
	|	ГДЕ
	|		Контрагенты.ОсновнойМенеджерКонтрагента В(&Пользователь)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыКонтрагентов.Владелец
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|	ГДЕ
	|		ДоговорыКонтрагентов.ОтветственноеЛицо В(&Пользователь)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ВложенныйЗапрос.Контрагент = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Пользователь", СписокПользователей);
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Возврат ТЗ;
	
КонецФункции


//такая же функция как и в персональных правилах!
функция ПолучитьНовыйID(стр1)
	флВсеПоля=Истина;
	возврат строка(стр1.ВидТовара) // 0 перечисление
	
		+ ?(ЗначениеЗаполнено(стр1.ТипЦен), "."+строка(стр1.ТипЦен.Код),".0")    //1) 30.09.2016
		
		+ ?(ЗначениеЗаполнено(стр1.Производитель), "."+строка(стр1.Производитель.Код),".0")  //2
		+?(не флВсеПоля,"", 
		 ?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа), "."+строка(стр1.НоменклатурнаяГруппа.Код),".0")
		 
		+ ?(ЗначениеЗаполнено(стр1.ВходитВПапку), "."+строка(стр1.ВходитВПапку.Код),".0")
		+ ?(ЗначениеЗаполнено(стр1.Номенклатура), "."+строка(стр1.Номенклатура.Код),".0")
		//строки
		+ ?(ЗначениеЗаполнено(стр1.ПодСтрока), "."+строка(стр1.ПодСтрока),".0")
		
		+ ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),"")
		
		//+++ 07.04.2016 чтобы сохранить "совместимость" со старыми правилами ""
		+ ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки), "."+строка(стр1.ВидДефектаДляУценки.Код),"")
		
		//+++ для всех категорий - единый ID
		//+ ?(ЗначениеЗаполнено(стр1.Категория), ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки),"", ".0")+"."+строка(стр1.Категория),"")

		+";" );
КонецФункции	

функция получитьТекстПравилаПоID(стрID_0)
текстПравила = "";   
спис = новый массив;
стрID = стрID_0;
i= найти(стрID, ".");  L=стрДлина(стрID);
пока i>0 цикл
стр1 = лев(стрID, i-1);  стрID = прав(стрID, L-i);
спис.Добавить(стр1);
i= найти(стрID, ".");  L=стрДлина(стрID);
КонецЦикла;

//7 полей должно быть
текстПравила = спис[0];
текстПравила = текстПравила + ?(спис[1]="0","", " ; " + строка( справочники.ТипыЦенНоменклатуры.НайтиПоКоду( спис[1] ))  );
текстПравила = текстПравила + ?(спис[2]="0","", " ; Производитель: " + строка( справочники.Производители.НайтиПоКоду( спис[2] ))  );
текстПравила = текстПравила + ?(спис[3]="0","", " ; Ном.Группа: " + строка( справочники.НоменклатурныеГруппы.НайтиПоКоду( спис[3] )) );
Если спис.Количество()>4 тогда
текстПравила = текстПравила + ?(спис[4]="0","", " ; В Папке: " + строка( справочники.Номенклатура.НайтиПоКоду( спис[4] )) );
КонецЕсли;
Если спис.Количество()>5 тогда
текстПравила = текстПравила + ?(спис[5]="0","", " ; Товар: " + спис[5] );
КонецЕсли;
Если спис.Количество()>6 тогда
	текстПравила = текстПравила + ?(спис[6]="0;" или спис[6]="0", "", " ; Построка: " + спис[6] );
КонецЕсли;


//// 04.10.2016 - в новой системе - с учетом диаметра?  согласование будет по правилу БЕЗ диаметра!!!
//
//Флажок3 = константы.ЦенообразованиеПоКатегориям.Получить(); 
Если спис.Количество()>7 тогда 
	текстПравила = текстПравила + ?(спис[7]="","", " ; Диаметр: "  + строка( спис[7] )  );
	Если спис.Количество()>8 тогда 
		текстПравила = текстПравила + ?(спис[8]="0;" или спис[7]="0","", " ; ВидДефектаДляУценки: "  + строка( справочники.ВидыДефектовДляУценки.НайтиПоКоду( спис[8] ))  );
	КонецЕсли;
КонецЕсли;

возврат текстПравила;		
КонецФункции	


Процедура КоманднаяПанель1ИсторияИзменения(Кнопка)
	
	формаИзменений = РегистрыСведений.ЖурналИзменений.ПолучитьФормуСписка();
	формаИзменений.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Объект.Значение = Контрагент;
	формаИзменений.Отбор.Объект.Использование = Истина;
	
	формаИзменений.Отбор.Событие.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Событие.Значение = "Установка персональных скидок";
	формаИзменений.Отбор.Событие.Использование = Истина;
	
	//блокируем изменение отбора по документу
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Объект.Доступность  = Ложь;
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Событие.Доступность = Ложь;
	Состояние("Идет формирование истории изменений...");
	формаИзменений.Открыть();
	Состояние("");

КонецПроцедуры


Процедура ДеревоПравилОтклонениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Если ЭлементыФормы.ДеревоПравил.ТекущиеДанные.Приоритет<0 тогда //07.03.2017
		Предупреждение("Нельзя менять исключительное правило!",10);
		возврат;
	КонецЕсли;	

	Элемент.Значение = Элемент.Значение  + Направление * 0.1;
	ДеревоПравилОтклонениеПриИзменении(Элемент);
КонецПроцедуры


Процедура ДеревоПравилСкидкаНаценкаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Если ЭлементыФормы.ДеревоПравил.ТекущиеДанные.Приоритет<0 тогда //07.03.2017
		Предупреждение("Нельзя менять исключительное правило!",10);
		возврат;
	КонецЕсли;	
	Элемент.Значение = Элемент.Значение  + Направление * 0.5;
    ДеревоПравилСкидкаНаценкаПриИзменении(Элемент);
КонецПроцедуры

Процедура ДеревоПравилСкидкаПредоплатыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Если ЭлементыФормы.ДеревоПравил.ТекущиеДанные.Приоритет<0 тогда  //07.03.2017
		Предупреждение("Нельзя менять исключительное правило!",10);
		возврат;
	КонецЕсли;	

	Элемент.Значение = Элемент.Значение  + Направление * 0.5;
	ДеревоПравилСкидкаПредоплатыПриИзменении(Элемент);
КонецПроцедуры

Процедура ДеревоПравилТрКлиентаПриИзменении(Элемент)
	Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если Выборка.ТрКлиента<0 тогда
		Предупреждение("Транспортная НАЦЕНКА НЕ может быть отрицательной!",30);
		Выборка.ТрКлиента = 0;
		возврат;
	КонецЕсли;	
	Выборка.Изм  = истина;
	Выборка.Перс = Истина;
Выборка.СкидкаНаценкаМакс = -100 + 100*(1+Выборка.СкидкаНаценка/100)*(1+Выборка.СкидкаПредоплаты/100)*(1+Выборка.ТрКлиента/100)*(1+Выборка.НаценкаТранспорта/100)*(1+Выборка.НаценкаОТК/100);

	Если  ПолучитьУровень( Выборка )< 3 тогда
		ДеревоПравилВнизПоДеревуПриИзменении(Элемент);
		возврат;
	КонецЕсли;	
КонецПроцедуры

Процедура ДеревоПравилТрКлиентаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Элемент.Значение = Элемент.Значение  + Направление * 0.1;
	Если Элемент.Значение<0 тогда
		Элемент.Значение = 0;
	ИначеЕсли Элемент.Значение>5 тогда
		Элемент.Значение=5;
	Иначе
		ДеревоПравилТрКлиентаПриИзменении(Элемент);
	КонецЕсли;	
КонецПроцедуры



Процедура ДеревоПравилДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = Элемент.Значение;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		Элемент.Значение = рез; 
	КонецЕсли;	
	
	//+++ 06.10.2016 - ID правила может отличаться от IDo
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	текСтр.ID = ПолучитьНовыйID( текСтр );
	
	текСтр.Изм  = истина; //01.06.2017
	текСтр.Перс = Истина;
	ПроверитьОтключениеПерсПравила(текСтр);

КонецПроцедуры

Процедура ДеревоПравилДиаметрПриИзменении(Элемент)
	Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если  ПолучитьУровень( Выборка )< 3 тогда
		Предупреждение("Изменять диаметр можно только на самом нижнем уровне - для Одного правила!", 10);
		Выборка.Диаметр = "";
		возврат;
	КонецЕсли;
	ДеревоПравилДиаметрНачалоВыбора(Элемент, ложь);
КонецПроцедуры


Процедура ПриОткрытии()
	ЭлементыФормы.ДеревоПравил.Колонки.ID.Видимость = ложь;
	ЭлементыФормы.ДеревоПравил.Колонки.IDo.Видимость = ложь;
	ЭлементыФормы.ДеревоПравил.Колонки.Искл.Видимость = ложь;
	ЭлементыФормы.ДеревоПравил.Колонки.Выключено.Видимость = ложь;
	
	
	//прайс-лист будет доступен если включена константа
	Если Константы.ИспользоватьМеханизмЦенообразования.Получить() тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Проверить.Доступность = истина;
	КонецЕсли;	
		
КонецПроцедуры


Процедура ДеревоПравилИзмПриИзменении(Элемент)
	Выборка = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если не Выборка.изм тогда
		Предупреждение("Нельзя выключить ранее измененные правила...",10);
		Выборка.изм = истина;
		возврат;
	КонецЕсли;	
	ДеревоПравилВнизПоДеревуПриИзменении(Элемент);
КонецПроцедуры



Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	естьИзм = ложь;
	
	Для каждого стр0 из ДеревоПравил.Строки цикл
		Для каждого стр1 из стр0.строки цикл
			Для каждого стр2 из стр1.строки цикл
				Для каждого стр3 из стр2.строки цикл

				Если стр3.Изм тогда //только персональные
	            естьИзм = истина;
				прервать;
				КонецЕсли;
				
				КонецЦикла;//3
			Если естьИзм тогда прервать; КонецЕсли;
			КонецЦикла;//2
		Если естьИзм тогда прервать; КонецЕсли;
		КонецЦикла;//1
	Если естьИзм тогда прервать; КонецЕсли;
	КонецЦикла;//дерево
	
	Если естьИзм тогда
		Если Вопрос("Сохранить изменения в персональных правилах?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Да тогда
		КнопкаВыполнитьНажатие(неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОсновныеДействияФормыПроверить(Кнопка)
	ТекСсылка=Справочники.ВнешниеОбработки.НайтиПоКоду(274); //Прайс-лист Клиента (по правилам ценообразования)
	ИмяФайла = ПолучитьИмяВременногоФайла(); 
	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
	ДвоичныеДанные.Записать(ИмяФайла); 
	
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла); 
	форма1 = Обработка.ПолучитьФорму("Отчет");
	форма1.Контрагент = Контрагент;
	форма1.ПоОстаткам = истина;
	форма1.Открыть();
КонецПроцедуры


Процедура ДеревоПравилПередУдалением(Элемент, Отказ)
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущаяСтрока;
	Если текСтр.Приоритет<0 Тогда 
		Предупреждение("Нельзя удалять исключительные правила!",30);
		Отказ = истина;
	КонецЕсли;	
КонецПроцедуры

//07.06.2017
Процедура ДеревоПравилВход1Открытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если текСтр1.IDo="" тогда
		Предупреждение("Настройки из строки группировки - не открываются!", 30);
		возврат;
	КонецЕсли;	
	
	форма1 = РегистрыСведений.ПравилаЦенообразованияВход.ПолучитьФорму("ФормаЭлемента");
	форма1.ID = текСтр1.IDo;
	форма1.ЭлементыФормы.ТабличноеПоле1.ТолькоПросмотр = истина;
	форма1.ОткрытьМодально();

КонецПроцедуры
