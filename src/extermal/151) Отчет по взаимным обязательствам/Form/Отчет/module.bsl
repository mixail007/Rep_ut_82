
Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаиморасчеты.Контрагент,
	|	СУММА(Взаиморасчеты.Дебиторка) КАК Дебиторка,
	|	СУММА(Взаиморасчеты.Кредиторка) КАК Кредиторка,
	|	ВЫБОР
	|		КОГДА СУММА(Взаиморасчеты.Дебиторка) > СУММА(Взаиморасчеты.Кредиторка)
	|			ТОГДА СУММА(Взаиморасчеты.Кредиторка)
	|		ИНАЧЕ СУММА(Взаиморасчеты.Дебиторка)
	|	КОНЕЦ КАК Минимум,
	|	СУММА(Взаиморасчеты.Дебиторка) - СУММА(Взаиморасчеты.Кредиторка) КАК Разница,
	|	Взаиморасчеты.Контрагент.ОсновнойМенеджерКонтрагента КАК ОсновнойМенеджерКонтрагента,
	|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.СуммаДокумента, 0)) КАК СуммаУпрЗачетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Дебиторка,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
	|				ТОГДА -ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Кредиторка
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|				&КОнДата,
	|				(ДоговорКонтрагента.ВидДоговора = &СПокупеталем
	|					ИЛИ ДоговорКонтрагента.ВидДоговора = &СПоставщиком)
	|					И ДоговорКонтрагента.ТипДоговора <> &ТипДоговораФакторинг) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК Взаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УправленческийЗачетВзаимныхОбязательств.КонтрагентДебитор КАК КонтрагентДебитор,
	|			УправленческийЗачетВзаимныхОбязательств.КонтрагентКредитор КАК КонтрагентКредитор,
	|			СУММА(УправленческийЗачетВзаимныхОбязательств.СуммаДокумента) КАК СуммаДокумента
	|		ИЗ
	|			Документ.УправленческийЗачетВзаимныхОбязательств КАК УправленческийЗачетВзаимныхОбязательств
	|		ГДЕ
	|			УправленческийЗачетВзаимныхОбязательств.Проведен
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УправленческийЗачетВзаимныхОбязательств.КонтрагентДебитор,
	|			УправленческийЗачетВзаимныхОбязательств.КонтрагентКредитор) КАК ВложенныйЗапрос
	|		ПО Взаиморасчеты.Контрагент = ВложенныйЗапрос.КонтрагентДебитор
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Контрагент,
	|	Взаиморасчеты.Контрагент.ОсновнойМенеджерКонтрагента
	|
	|ИМЕЮЩИЕ
	|	СУММА(Взаиморасчеты.Дебиторка) > 0 И
	|	СУММА(Взаиморасчеты.Кредиторка) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаиморасчеты.Контрагент.Наименование
	|ИТОГИ
	|	СУММА(Дебиторка),
	|	СУММА(Кредиторка),
	|	СУММА(Минимум),
	|	СУММА(Разница),
	|	СУММА(СуммаУпрЗачетов)
	|ПО
	|	ОБЩИЕ";

	Если КОнДата='00010101' тогда
		КОнДата = ТекущаяДата();
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("КОнДата", НачалоДня(КонецДня(КонДата)+1));
	Запрос.УстановитьПараметр("СПокупеталем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Запрос.УстановитьПараметр("ТипДоговораФакторинг", Справочники.ТипыДоговоров.Факторинг);
	

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.КонДата=ФОрмат(КонДата,"ДФ=dd.MM.yyyy"); 
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());

	ВыборкаДетали = ВыборкаОбщийИтог.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры
