Перем ВысотаЗаголовка;
Перем ИдентификаторОкнаРасшифровки;
Перем СтруктураРеквизитов;
Перем НеЗаполнятьНастройкиПриОткрытии;
Перем СтруктураСвязиЭлементовСДанными;
Перем ОтборРазвернут;
Перем ФормаНастройка;

Перем мИмяФайлаКарты;
перем KeyAPIЯндекса, мВерсияОбработки;

функция ПолучитьАдресаПоСтроке(стр1, начПоле=2, КонПоле=5)
	Запрос = Новый Запрос;
	
	ДлСтроки = строка( макс(стрДлина(СокрЛП(стр1.Представление)),1) );
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле2 КАК СТРОКА(100)) КАК Поле2,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле3 КАК СТРОКА(100)) КАК Поле3,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле4 КАК СТРОКА(100)) КАК Поле4,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле5 КАК СТРОКА(100)) КАК Поле5,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле6 КАК СТРОКА(100)) КАК Поле6,
	               |	ВЫРАЗИТЬ(КонтактнаяИнформация.Поле7 КАК СТРОКА(100)) КАК Поле7
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	(КонтактнаяИнформация.Объект = &Объект 
				   |		или Выразить(КонтактнаяИнформация.Поле4 как Строка("+ДлСтроки+"))=&Представление
	               |		или Выразить(КонтактнаяИнформация.Поле5 как Строка("+ДлСтроки+"))=&Представление)
				   |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект",стр1.Покупатель);  //стр1.ВыгрузитьКолонку("Покупатель") );
	Запрос.УстановитьПараметр("Представление",СокрЛП(стр1.Представление) ); 
	Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	
	Результат = Запрос.Выполнить();
	рез = Результат.Выбрать();
	рез1 = "Россия";
	Если рез.Следующий() тогда
		Для i=начПоле по КонПоле цикл
			Если СокрЛП(рез.Поле2) = "Москва г" тогда
				Если КонПоле=4 и (i=3 или i=4) тогда
					j=i+2; // для Москвы - регионом является улица, а городом - дом
				иначе 
					j=i;
				КонецЕсли;	
			иначе j=i; 
			КонецЕсли;	
		рез1 = рез1 +?(СокрЛП(рез["Поле"+строка(j)])="", "", ", "+СокрЛП(рез["Поле"+строка(j)]) );
		КонецЦикла;
	КонецЕсли;
	
	возврат рез1;
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПараметрамиОтображенияЭлементовФормы()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	// Отображение заголовка отчета
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Если ОтборРазвернут Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПараметрамиОтображенияЭлементовФормы()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт
	
	НеЗаполнятьНастройкиПриОткрытии = Не Открыта();

	ЭтотОтчет.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры // ОбновитьОтчет()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ЭтотОтчет.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
		
	КонецЕсли;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры // ВыводЗаголовка()

// Формирует текст заголовка
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовокФормы()

	Заголовок = СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, мНазваниеОтчета, Ложь);

КонецПроцедуры // СформироватьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Настройка".
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ФормаНастройка = ЭтотОтчет.ПолучитьФормуНастройки();
	ФормаНастройка.ВладелецФормы = ЭтаФорма;

	СтруктураСНастройками = ЭтотОтчет.СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок);

	СтараяДатаКон = ДатаКон;
	СтараяДатаНач = ДатаНач;

	РезультатОткрытия = ФормаНастройка.ОткрытьМодально();

	Если РезультатОткрытия = Истина Тогда

		ОбновитьОтчет();

	Иначе
		
		// Форму закрыли эскейпом или по "Закрыть" - восстановим настройки, отчет формировать не будем!
		// Восстанавливаем сохраненные значения
		
		ЭтотОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
		
		ДатаКон = СтараяДатаКон;
		ДатаНач = СтараяДатаНач;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик нажатия кнопки "Отбор".
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	ОтборРазвернут = НЕ ОтборРазвернут;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Обновить".
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)
		   
	//+++   16.05.2012
	началоВр = ТекущаяДата();
	
	ОбновитьОтчет();
	
	КонецВр = ТекущаяДата();
	ВремяВыполнения = Число(КонецВр - началоВр);
	парамЗапроса = "["+Формат(ДатаНач,"ДЛФ=D")+"-"+Формат(ДатаКон,"ДЛФ=D")+"]";
    Если ВремяВыполнения>0 тогда
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 63, ВремяВыполнения, "Кнопка [Сформировать] "+парамЗапроса+" ("+строка(ВремяВыполнения)+" Сек.)" ); //!!!!
	КонецЕсли;	
	//+++)   16.05.2012

КонецПроцедуры // ВыполнитьНажатие()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельФормыЗаголовок(Кнопка)
	
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	
	ВыводЗаголовка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДатаНач=НачалоМесяца( ТекущаяДата() );
	ДатаКон=КонецМесяца( ТекущаяДата() );
	
	Если НЕ (НеЗаполнятьНастройкиПриОткрытии = Истина) Тогда

		ЭтотОтчет.ОбщийОтчет = ЭтотОбъект;

		ЭтотОтчет.ЗаполнитьНачальныеНастройки();

		ВысотаЗаголовка = 0;

		СформироватьЗаголовокФормы();
		
		// Вспоминим параметры для данной формы
		ИмяОтчета=ЭтотОтчет.Метаданные().Имя;
		ОтборРазвернут=?(ВосстановитьЗначение(ИмяОтчета + "_ОтборПомечен") = Истина, Истина, Ложь); // отбор в первый раз не показывать
		ПоказыватьЗаголовок = ?(ВосстановитьЗначение(ИмяОтчета + "_ЗаголовокПомечен") = Ложь, Ложь, Истина); // заголовок в первый раз наоборот, показывать
		
		ВыводЗаголовка();
		
	КонецЕсли;
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбщийОтчет.ПостроительОтчета.Отбор");
	
КонецПроцедуры // ПередОткрытием()     ЭтотОбъект

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	НеЗаполнятьНастройкиПриОткрытии = Ложь;
   		//Если ЗначениеНеЗаполнено(ДатаНач) тогда
		этотОбъект.ДатаНач = НачалоМесяца( ТекущаяДата() );
		// Сообщить("Не выбрана Дата начала периода! Установлена дата начала текущего месяца.");
		//КонецЕсли;

	  // Если ЗначениеНеЗаполнено(ДатаКон) тогда
		этотОбъект.ДатаКон = КонецМесяца( ТекущаяДата() );
	   //  сообщить("Не выбрана Дата окончания периода! Установлена дата окончания текущего месяца.");
	   //КонецЕсли;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = ЭтотОтчет.СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок);

КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	// Если настройка восстанавливается, когда открывается форма сформровенного отчета, игнорируем
	Если НеЗаполнятьНастройкиПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		ЭтотОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
		
		// Очистим результат - он более не соответствует настройке
		ЭлементыФормы.ДокументРезультат.Очистить();
		ВысотаЗаголовка=0;
		
		ВыводЗаголовка();
		
		СформироватьЗаголовокФормы();
		
	КонецЕсли;

КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройки1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора С
//
Процедура ПолеНастройкиС1ПриИзменении(Элемент)

	ПолеНастройкиСПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройкиС1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора ПО
//
Процедура ПолеНастройкиПо1ПриИзменении(Элемент)

	ПолеНастройкиПоПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры // ПолеНастройкиПо1ПриИзменении()

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеВидаСравнения1ПриИзменении()

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа ДокументРезультат
//
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ЭтотОтчет.ОбработкаРасшифровки(Расшифровка, Элемент, ВысотаЗаголовка, СтандартнаяОбработка);

КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

// Процедура - обработчик изменения даты начала периода
//
Процедура ДатаНачПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - обработчик изменения даты конца периода
//
Процедура ДатаКонПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - орбаротчик события при закрытии
//
Процедура ПриЗакрытии()
	
	ИмяОтчета = ЭтотОтчет.Метаданные().Имя;
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ОтборПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка);
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ЗаголовокПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка);
	
КонецПроцедуры

// Процедура - обработчик сообщений
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененТекстЗапроса" И Источник = ФормаНастройка Тогда
		
		УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбщийОтчет.ПостроительОтчета.Отбор");

	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

Процедура Кнопка1Нажатие(Элемент)
	
	//i=0; N=ТаблЗнач1.Количество();
	//пока i<N цикл 
	//	стр1=ТаблЗнач1[i];
	//	состояние(Формат(i*100/N,"ЧДЦ=0")+"% списка подготовлено...");
	//	 Если не стр1.флаг тогда
	//		  ТаблЗнач1.Удалить(i);
	//		  N=N-1;
	//	 иначе 
	//		  i=i+1;
	//	 КонецЕсли;
	//КонецЦикла;
	Если ТаблЗнач1.Количество()>0 тогда
		ТаблЗнач1.Сортировать("Стоимость Убыв");
		Если ТаблЗнач1.Количество()>500 тогда
			СИГНАЛ();
		Предупреждение("Слишком много адресов ("+Строка(ТаблЗнач1.Количество())+")!
					   |Время построения карты будет очень большим...",10);
		КонецЕсли;			   
		состояние("Идет отображение "+Строка(ТаблЗнач1.Количество())+" адресов на карте...");
		ПередОткрытиемФормыКарта();
	
	//ЭлементыФормы.ПолеHTMLДокумента	= Карта.ЭлементыФормы.ПолеHTMLДокумента;
	//ЭлементыФормы.Список1 = Карта.Список1.Скопировать();
	иначе
	   Предупреждение("Таблица - пустая и не может быть отражена на карте!");
	   Возврат;
    КонецЕсли;
	состояние(" ");
	сигнал();сигнал();

КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	
	// Формируем Адреса и Координаты Контрагентов
	Запрос = новый Запрос;
	попытка
	//Запрос = ПостроительОтчета.ПолучитьЗапрос(); //.текст
	//Запрос.Параметры.Очистить();
	для каждого парам1 из ПостроительОтчета.Параметры цикл
		Запрос.Параметры.Вставить(парам1.Ключ, парам1.Значение);
	КонецЦикла;
	
	ЕстьКонтрагент = ложь; Естьобласть = ложь; ЕстьГород = ложь;
	Nизм = ПостроительОтчета.ИзмеренияСтроки.Количество();  
	N=-1; 
	//-------------при нескольких группировках - удваиваются суммы-------------------
	//----- находим минимальный номер группировки и удаляем остальные ---------------
	для i=0 по Nизм-1 цикл
		Если Найти( ПостроительОтчета.ИзмеренияСтроки[i].Имя, "Область")>0  тогда
			N=?(N<0,i,N); Естьобласть = (i=N);     
		иначеЕсли Найти( ПостроительОтчета.ИзмеренияСтроки[i].Имя, "Покупатель")>0 тогда
			N=?(N<0,i,N); ЕстьКонтрагент = (i=N);  
		иначеЕсли Найти( ПостроительОтчета.ИзмеренияСтроки[i].Имя, "Город")>0 тогда
			N=?(N<0,i,N); ЕстьГород = (i=N);
		КонецЕсли;	
	КонецЦикла;
		
	//удаляем лишние группировки строк... их все равно не будет на карте
	для i=N+1 по Nизм-1 цикл
		ТекущаяСтрока=ПостроительОтчета.ИзмеренияСтроки[N+1]; //все что больше N !!!
		ПостроительОтчета.ИзмеренияСтроки.Удалить(ТекущаяСтрока);
	КонецЦикла;
	Nизм = ПостроительОтчета.ИзмеренияСтроки.Количество(); // сократилось число измерений
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос(); //.текст
	//------------------------------------------------------------------------
	
	Если ЕстьКонтрагент Или ЕстьОбласть или ЕстьГород тогда
			состояние("Выполняется расчет таблицы...");
			//ЭлементыФормы.ДокументРезультат.Данные;
			результат = Запрос.Выполнить();
			ТаблЗнач1.Очистить();
			состояние("Выполняется заполнение таблицы...");
			ТаблЗнач1 = результат.выгрузить();
			
						
			Если (ЕстьКонтрагент или ЕстьГород) и (не ЕстьОбласть) тогда 
				Если ЕстьГород тогда//в первую очередь
					ТаблЗнач1.Свернуть("Город", "Стоимость");
					ТаблЗнач1.Колонки.Добавить("Представление");
					ТаблЗнач1.Колонки.Добавить("Покупатель");
					ТаблЗнач1.ЗагрузитьКолонку( ТаблЗнач1.ВыгрузитьКолонку("Город"), "Представление");
				иначеЕсли ЕстьКонтрагент тогда
					ТаблЗнач1.Свернуть("Покупатель", "Стоимость");
					ТаблЗнач1.Колонки.Добавить("Представление");
				КонецЕсли;
								
				//-----------------ищем Координаты до Города!--------------
				для каждого стр1 из ТаблЗнач1 цикл
					ОбработкаПрерыванияПользователя();
					стр1.Представление = ПолучитьАдресаПоСтроке(стр1); // до города
				конецЦикла;
			   		ТаблЗнач1.Свернуть("Представление", "Стоимость");
					ТаблЗнач1.Колонки.Добавить("Область");
				
				// До Города, Поселка (Для Москвы - до Улицы и дома)!
			ИначеЕсли ЕстьОбласть тогда
					ТаблЗнач1.Свернуть("Область", "Стоимость");
					ТаблЗнач1.Колонки.Добавить("Представление");
			иначе
				//нет ничего	
			КонецЕсли;
			
			
			// Задвоение сумм при группировке!
			Если Nизм=1 тогда
				K = 2 ; // своя и общая группировка
			иначе
				K = pow( 2, (Nизм-N) );  //N - это индекс начинается с 0 для 1 измерения
			КонецЕсли;	
				
				для каждого стр1 из ТаблЗнач1 цикл
					стр1.Стоимость = стр1.Стоимость/K;
				КонецЦикла;
			//КонецЕсли;
		
	ТаблЗнач1.Колонки.Добавить("Метка");
	ТаблЗнач1.Колонки.Добавить("Покупатель");
	ТаблЗнач1.Колонки.Добавить("Комментарий");
				
	ТаблЗнач1.Сортировать("Область, Представление");

			ЭтаФорма.Обновить();
		иначе
			Предупреждение("Для заполнения Карты - выберите 
						   |в строках Группировки: Область, Город или Покупателя",10);
			ТаблЗнач1.Очистить();			   
		КонецЕсли;
					   
	исключение
		сообщить("Ошибка при заполнении: "+ОписаниеОшибки(), СтатусСообщения.Внимание);	
	КонецПопытки;
	
	состояние(" ");
	сигнал();
	
КонецПроцедуры

Процедура КоманднаяПанель1ФильтрПоТекСтроке(Кнопка)
	стр1 = ЭлементыФормы.ТаблЗнач1.ТекущиеДанные;
	назвСтолб = ЭлементыФормы.ТаблЗнач1.ТекущаяКолонка.Имя;
	знач1 = стр1[назвСтолб];
	N = ТаблЗнач1.Количество(); i=0;
	пока i<N цикл
		стр2 = ТаблЗнач1[i];
		если стр2[назвСтолб]<>знач1 тогда
		  ТаблЗнач1.Удалить(i);  
		  N = N-1;
	  	иначе 
		  i=i+1;
		КонецЕсли;	  
	КонецЦикла;
КонецПроцедуры

Процедура ТаблЗнач1ПокупательПриИзменении(Элемент)
	стр1 = ЭлементыФормы.Список1.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(стр1) тогда
		
		текКоординаты = стр1.Комментарий;
		Если текКоординаты = "" тогда
		Широта1=""; Долгота1=""; Представление1="";
			Если стр1.Представление ="" тогда
			стр1.Представление = ПолучитьАдресаПоСтроке(стр1);
			КонецЕсли;
		//	стр1.Представление = Адрес1;
		//	стр1.Комментарий = СокрЛП(Широта1)+","+СокрЛП(Долгота1);
		иначе	
			Широта1  = Лев(текКоординаты,Найти(текКоординаты,",")-1);
			Долгота1 = Прав(текКоординаты,стрДлина(текКоординаты) - Найти(текКоординаты,","));
			Долгота1 = ?(Найти(Долгота1,";")>0, Лев(Долгота1, Найти(Долгота1,";")-1), Долгота1);
		КонецЕсли;		

	КонецЕсли;
	

КонецПроцедуры



//===========================================================================


//-------------------------------------------------------------------------------
Функция YandexGeoCodeGetFile(Адрес, Ключ, ПроксиСервер, АдресOutput)

	
	Попытка 
		HTTPСервис = Новый HTTPСоединение("geocode-maps.yandex.ru",,,,ПроксиСервер,Ложь); 
		HTTPСервис.Получить("1.x/?geocode=" + EncodeURL(Адрес) + "&key=" + Ключ, АдресOutput); 
	Исключение 
		Сообщить("Ошибка подключения к интернет-картам: http://maps.yandex.ru", СтатусСообщения.Внимание); 
		Возврат Ложь;
	КонецПопытки; 

	Возврат Истина;
	
КонецФункции // YandexGeoCodeGetFile()

Функция YandexGeoCode(Адрес, Ключ, ПроксиСервер, Рез)
	
	Рез = Новый Структура("lat, lng, Представление", 0, 0, "");

	АдресOutput = КаталогВременныхФайлов() + "geores.xml";
	
	Если Не YandexGeoCodeGetFile(Адрес, Ключ, ПроксиСервер, АдресOutput) Тогда
		
		Возврат Ложь;	
	
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(АдресOutput);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
	СписокText = ДокументДОМ.ПолучитьЭлементыПоИмени("text");
	СписокPos = ДокументДОМ.ПолучитьЭлементыПоИмени("pos");
	
	Если (СписокText.Количество() = 0) ИЛИ (СписокPos.Количество() = 0) Тогда
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	Рез.Представление = СписокText[0].ТекстовоеСодержимое;
	Рез.lng = СписокPos[0].ТекстовоеСодержимое;
	ПОз1 = Найти(Рез.lng," ");
	Рез.lat = Сред(Рез.lng, Поз1 + 1);
	Рез.lng = Лев(Рез.lng, Поз1 -1);
    Возврат Истина;
	
КонецФункции // GeoCode()

Функция ГеокодироватьАдрес(Адрес,Широта,Долгота,Представление="")Экспорт
	//Сообщить("Ищем адрес "+Адрес);
	Рез = Неопределено;
	Успешно=YandexGeoCode(Адрес, KeyAPIЯндекса, Неопределено, Рез);
	Широта  = строка(Рез.lat);
	Долгота = строка(Рез.lng);
	Представление = Рез.Представление;
	Возврат Успешно;
КонецФункции

Функция hex(Знач Значение) 
	Значение=Число(Значение);
	Если Значение<=0 Тогда 
		Результат="0";
	Иначе
		Значение=Цел(Значение);
		Результат="";
		Пока Значение>0 Цикл
			Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%16 + 1, 1) + Результат;
			Значение=Цел(Значение/16) ;
		КонецЦикла;
	КонецЕсли;
	Если СтрДлина(Результат) < 2 Тогда
	
		Результат = "0" + Результат;
	
	КонецЕсли; 
	Возврат "%" + Результат;
КонецФункции

Функция EncodeURL(URL)
	
	// отсюда: http://www.w3.org/International/URLUTF8Encoder.java
	
	Рез = "";
	
	Для Сч = 1 По СтрДлина(URL) Цикл
		
		ch = Сред(URL,Сч,1);
		vch = КодСимвола(ch);
		
		Если ("A" <= ch ) И ( ch <= "Z") Тогда		// "A".."Z"
			Рез = Рез + ch;
		ИначеЕсли ("a" <= ch ) И ( ch <= "z") Тогда	// "a".."z"
			Рез = Рез + ch;
		ИначеЕсли ("0" <= ch ) И ( ch <= "9") Тогда	// "0".."9"
			Рез = Рез + ch;
		ИначеЕсли (ch = " ") ИЛИ ( ch = "+") Тогда			// space
			Рез = Рез + "+";
		ИначеЕсли (ch = "-" ) ИЛИ ( ch = "_") Тогда		// unreserved
			// ch == '.' || ch == '!'
			// ch == '~' || ch == '*'
			// ch == '\'' || ch == '('
			// ch == ')') Тогда
			Рез = Рез + ch;
		ИначеЕсли (vch <= 127) Тогда		// other ASCII
			Рез = Рез + hex(vch);
		ИначеЕсли (vch <= 2047) Тогда		// non-ASCII <= 0x7FF
			Рез = Рез + hex(192 + Цел(vch / 64));
			Рез = Рез + hex(128 + (vch % 64));
		Иначе					// 0x7FF < ch <= 0xFFFF
			Рез = Рез + hex(224 + Цел(vch / 4096));
			Рез = Рез + hex(128 + (Цел(vch / 64) % 64));
			Рез = Рез + hex(128 + (vch % 64));
		КонецЕсли;
	     
	КонецЦикла; 
	
	Возврат Рез;

КонецФункции // ()

функция ПолучитьПредставление(Широта,Долгота) Экспорт//+++
	
Попытка	
	ШиротаЧ  = Число(Широта); 
	ДолготаЧ = Число(Долгота);
	Если ШиротаЧ>=0 тогда
		надписьШ = "с.ш. ";
	иначе 
		ШиротаЧ = -ШиротаЧ;
		надписьШ = "ю.ш. ";
	КонецЕсли;	
	Широта  = СокрЛП(Строка(Цел(ШиротаЧ)))+"°"+СокрЛП(Строка( Цел((ШиротаЧ - Цел(ШиротаЧ))*60) ))+"'"+СокрЛП(Строка(  Окр( (ШиротаЧ - Цел(ШиротаЧ) - Цел((ШиротаЧ - Цел(ШиротаЧ))*60)/60)*3600,0)  ))+""""; // 1' = 1 сухопутн. миля = 1 600 м >> 1" = 26,7 м
    	
	Если ДолготаЧ>=0 тогда
		надписьД = "в.д.";
	иначе 
		ДолготаЧ = - ДолготаЧ;
		надписьД = "з.д.";
	конецЕсли;	                  
	Долгота = СокрЛП(Строка(Цел(ДолготаЧ)))+"°"+СокрЛП(Строка( Цел((ДолготаЧ - Цел(ДолготаЧ))*60) ))+"'"+СокрЛП(Строка(  Окр( (ДолготаЧ - Цел(ДолготаЧ) - Цел((ДолготаЧ - Цел(ДолготаЧ))*60)/60)*3600,0)  ))+""""; // 1' = 1 морск. миля = 1 825 м >> 1"=30,5 м 
	
    возврат Широта+надписьШ+", "+Долгота+надписьД;
исключение
	возврат "";
КонецПопытки;

конецФункции	

Функция ПодготовитьФайл(Префикс,Ширина,Высота)Экспорт
	мИмяФайлаКарты=КаталогВременныхФайлов()+"GoogleMap"+Префикс+мВерсияОбработки+".html";
	Файл=Новый Файл(мИмяФайлаКарты);
	
	Если НЕ Файл.Существует() ИЛИ мВерсияОбработки="000" Тогда //+++ если уже есть незачем переписывать
	//	Сообщить("мИмяФайлаКарты="+мИмяФайлаКарты);
		Макет = ЭтотОтчет.ПолучитьМакет("GoogleMap");
		Стр=Макет.ПолучитьТекст();
		Текст=Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Стр);
		Текст.Записать(мИмяФайлаКарты);
	КонецЕсли;//+++
	
	Возврат мИмяФайлаКарты;
КонецФункции
 //---------------------------------------------------------------------- 
 
 Функция ВыполнитьСкрипт(СтрКоманды)
	 Результат=неопределено;
	попытка // при повторном запросе и переключении на карту - нет еще parentWindow!
		ТекДокумент=ЭлементыФормы.ПолеHTMLДокумента.Document;
		Скрипт=ТекДокумент.parentWindow;
		//Результат=Скрипт.ExecScript(СтрКоманды);
		Результат=Скрипт.eval(СтрКоманды);
	исключение
	конецПопытки;	
	Возврат Результат;
КонецФункции

процедура ОткрытьОкно()
	стрАдрес = мИмяФайлаКарты;
	ЭлементыФормы.ПолеHTMLДокумента.Navigate(стрАдрес);
КонецПроцедуры 	

Процедура ПередОткрытиемФормыКарта()//Отказ, СтандартнаяОбработка)
	
	мИмяФайлаКарты=ПодготовитьФайл("M",800,600);
	
	ОткрытьОкно();
	
	//ПоказатьКарту();
	
КонецПроцедуры


Функция ДобавитьМаркер(СтрАдреса, Имя, Знач ИмяИконки="", СуммаГр = 314.159 )
	Если Не ЗначениеЗаполнено(ИмяИконки) Тогда
		ИмяИконки="icongred";
	КонецЕсли;
	Если СтрДлина(ИмяИконки)=1 Тогда
		СтрКоманды="QuikAddMarkerByGeoAndLetter("+СтрАдреса+",'"+Имя+"','"+ИмяИконки+"')";
	Иначе
		СтрКоманды="QuikAddMarkerByGeo("+СтрАдреса+",'"+Имя+"',"+ИмяИконки+")";
	//
	//		D = round(sqrt(СуммаГр)/3.1415926,0);
	//		D = ?(D<2, 2, ?(D>100,100,D) );
	//	числоD = Формат( D ,"ЧДЦ=0; ЧН=0.0; ЧГ=0"); 
	//	числоD = стрЗаменить(числоD,",",".");
	//	СтрКоманды="QuikAddMarkerByGeo("+СтрАдреса+",'"+Имя+"','"+ИмяИконки+"',"+числоD+")";

	КонецЕсли; 
	ВыполнитьСкрипт(СтрКоманды);
КонецФункции



//++++++++++++++++++++++++++++++++++++++++++
Процедура ПоказатьКарту()
	 //Список1 = ТаблЗнач1.Скопировать();
	 
 	 N=ТаблЗнач1.Количество();
	 первый = истина;  // точка для начального показа!
	 
	  СрШ0 = 180; СрД0=180;  СрШ1 = 0; СрД1=0;
	  для i=0 по N-1 цикл
		  
		 ОбработкаПрерыванияПользователя();
	
	    Состояние( Формат(i*100/N,"ЧДЦ=1")+"% адресов выведено..." );
		стр1 = ТаблЗнач1[i];
		Код1 = КодСимвола("A", 1) + i%26; // 1+21 <%22    A,B,C,D,E,F,G...
		
	текКоординаты = СокрЛП(стр1.Комментарий);
	Широта1=""; Долгота1="";
	
	Если текКоординаты = "" тогда
		Широта1=""; Долгота1=""; Представление1="";
		адрес1 = ?(СокрЛП(стр1.Представление)="", "Россия, "+СокрЛП(стр1.Область)+".", СокрЛП(стр1.Представление));
		ГеокодироватьАдрес(адрес1, Широта1, Долгота1, Представление1);
		текКоординаты   = СокрЛП(Широта1)+","+СокрЛП(Долгота1);
 	иначе	
		Широта1  = Лев(текКоординаты,Найти(текКоординаты,",")-1);
		Долгота1 = Прав(текКоординаты,стрДлина(текКоординаты) - Найти(текКоординаты,","));
		Долгота1 = ?(Найти(Долгота1,";")>0, Лев(Долгота1, Найти(Долгота1,";")-1), Долгота1);
		текКоординаты   = Широта1+","+Долгота1;
	КонецЕсли;		
		
		Если Широта1<>"" и Долгота1<>"" тогда
			текКоординаты   = Широта1+","+Долгота1;
			СрШ = Число(Широта1);		СрД = Число(Долгота1);
			СрШ0 = ?(СрШ<СрШ0, СрШ, СрШ0); СрШ1 = ?(СрШ>СрШ1, СрШ, СрШ1); 
			СрД0 = ?(срД<СрД0, СрД, СрД0); СрД1 = ?(СрД>СрД1, СрД, СрД1); 
		КонецЕсли;
				
		Если первый тогда
			коефф = 1;   текстКоефф = "руб.";
			Сумма1 = Окр(стр1.Стоимость/коефф,3); // в тыс.рублей
			j=0;
			Пока Сумма1>1000 и j<4 цикл// кружок в диаметре не менее 2 и не более 100 пиксел!
				коефф = коефф*1000; j=j+1;
				текстКоефф = ?(j=1,"тыс.", ?(j=2,"млн.", ?(j=3, "млрд.","") ) ) + "руб.";
				Сумма1 =Окр(стр1.Стоимость/коефф,3);
			КонецЦикла;
			
			Если Сумма1>0 и Сумма1<31.5 тогда // до 31 416 увеличиваем до не более 100 пиксел
				 j=j-1;   коефф = ?(j<=0, 1, коефф/1000);
				текстКоефф = ?(j=1,"тыс.", ?(j=2,"млн.", ?(j=3, "млрд.","") ) ) + "руб.";
				Сумма1 =Окр(стр1.Стоимость/коефф,3);
			КонецЕсли;	
			
			Если СокрЛП(стр1.Представление)<>"" тогда
				Если текКоординаты<>"0,0" и стр1.Представление<>"Россия" тогда
					ВыполнитьСкрипт("ShowMapByAddr("+ текКоординаты  +")");   //+++    +",5)");
					ВыполнитьСкрипт("InitMM()");
					первый = ложь;
				КонецЕсли;
			иначе
				Если текКоординаты<>"0,0" и стр1.Область<>"Россия" тогда
			     	ВыполнитьСкрипт("ShowMapByAddr("+ текКоординаты  +")"); //+++    +",5)");
					ВыполнитьСкрипт("InitMM()");
					первый = ложь;
				КонецЕсли;
            КонецЕсли;

		КонецЕсли;
		
		   	Сумма1 =Окр(стр1.Стоимость/коефф,3);
			КодСимвола = строка(i); //Символ(Код1); 
		
		Если СокрЛП(стр1.Представление)<>"" тогда 
			текстМетки = КодСимвола+") "+СокрЛП(стр1.Представление) +" ( Сумма: "+формат(Сумма1,"ЧДЦ=3")+" "+текстКоефф+")";
			Если текКоординаты<>"0,0" и стр1.Представление<>"Россия" тогда
			стр1.Метка = КодСимвола;
		 	стр1.Комментарий = текКоординаты;
			ДобавитьМаркер(текКоординаты, текстМетки, "iconred", Сумма1); //"iconred" или КодСимвола
			иначе
		    сообщить("Не удалось найти координаты точки : "+текстМетки, СтатусСообщения.Внимание);
            КонецЕсли;
		иначе // область	
			текстМетки = КодСимвола+") "+СокрЛП(стр1.Область)+" (Сумма: "+Формат(Сумма1,"ЧДЦ=3")+" "+текстКоефф+")";
			Если текКоординаты<>"0,0" и стр1.Область<>"Россия" тогда
			стр1.Метка = КодСимвола; 
		 	стр1.Комментарий = текКоординаты;
			ДобавитьМаркер(текКоординаты, текстМетки, "iconred", Сумма1); //"iconred" / КодСимвола
			иначе
		    сообщить("Не удалось найти координаты точки : "+текстМетки, СтатусСообщения.Внимание);
            КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если не первый тогда
		ВыполнитьСкрипт("RefreshMM()");//каждый раз?!
	иначе
		Предупреждение("Не найдены адреса для отображения!");
	КонецЕсли;
	
//	ВыполнитьСкрипт("ReSizeVisibleArea("+Строка(СрШ0-1)+","+Строка(СрД0-1)+","+Строка(СрШ1+1)+","+Строка(СрД1+1)+")");
	
	Если срШ1<>0 или срД1<>0 тогда 
		Широта1 = Формат((срШ1+срШ0)/2,"ЧДЦ=4"); Долгота1 = Формат((срД1+срД0)/2,"ЧДЦ=4");
		текКоординаты = Широта1+","+Долгота1;
	//	ВыполнитьСкрипт("ShowMapByAddr("+ текКоординаты  +")");
	иначе
		текКоординаты = СокрЛП(строка(Широта1))+","+СокрЛП(строка(Долгота1));
	КонецЕсли;
	
	Стр2 = ПолучитьПредставление(Широта1,Долгота1);
	ЭлементыФормы.Надпись1.Заголовок = Стр2 +" ("+Широта1+","+Долгота1+")";
	Состояние(" ");

КонецПроцедуры



Процедура ПолеHTMLДокументаBeforeNavigate2(Элемент, pDisp, URL, Flags, TargetFrameName, PostData, Headers, Cancel)
	мОткрытьСсылку=Неопределено;
	Инд=Найти(URL,"Ref1С:");
	Если Инд>0 Тогда
		УИД=Сред(URL,Инд+6);
		Cancel=Истина;
		УИД8=Новый УникальныйИдентификатор(УИД);
		мОткрытьСсылку = Документы.ЗаказПокупателя.ПолучитьСсылку(УИД8);
		ПодключитьОбработчикОжидания("ОткрытьСсылку",0.1,Истина);
	КонецЕсли; 
КонецПроцедуры


Процедура ПолеHTMLДокументаDownloadComplete(Элемент)
КонецПроцедуры

Процедура ПолеHTMLДокументаNavigateComplete2(Элемент, pDisp, URL)
КонецПроцедуры

Процедура ПолеHTMLДокументаDocumentComplete(Элемент, pDisp, URL)
	ПоказатьКарту();
КонецПроцедуры


Процедура Список1КонтрагентПриИзменении(Элемент)
	
	стр = ЭлементыФормы.Список1.ТекущиеДанные;
	Если ЗначениеЗаполнено(стр) тогда
		Если стр.Комментарий<>"" тогда 
		  текКоординаты = стр.Комментарий;
			Широта1  = Лев(текКоординаты,Найти(текКоординаты,",")-1);
			Долгота1 = Прав(текКоординаты,стрДлина(текКоординаты) - Найти(текКоординаты,","));
			Долгота1 = ?(Найти(Долгота1,";")>0, Лев(Долгота1, Найти(Долгота1,";")-1), Долгота1);
		Стр2 = ПолучитьПредставление(Широта1,Долгота1);
		ЭлементыФормы.Надпись1.Заголовок = Стр2 +" ("+текКоординаты+")";
		
		//  ВыполнитьСкрипт("ShowMapByAddr("+текКоординаты+",1)");
		
		КонецЕсли;
	КонецЕсли;
	Отказ = Истина;

КонецПроцедуры



//===================================================================================

// При инициализации формы необходимо заполнить реквизиты и поля основного реквизита формы 
ЗаполнитьПоляОсновногоРеквизита(ЭтотОтчет.ОбщийОтчет);

НеЗаполнятьНастройкиПриОткрытии = Ложь;
ОтборРазвернут = Ложь;
//           key=  ABQIAAAAsNRBx2BHu3ZXzh-l09394hT2yXp_ZAY8_ufC3CFXhHIE1NvwkxQKpj71JwR4a9ojl84iVhsGVc0f8g
//  KeyAPIЯндекса = "ABQIAAAAsNRBx2BHu3ZXzh-l09394hT2yXp_ZAY8_ufC3CFXhHIE1NvwkxQKpj71JwR4a9ojl84iVhsGVc0f8g==";
KeyAPIЯндекса = "ANpUFEkBAAAAf7jmJwMAHGZHrcKNDsbEqEVjEUtCmufxQMwAAAAAAAAAAAAvVrubVT4btztbduoIgTLAeFILaQ==";
мВерсияОбработки="v.002";

//Список1=неопределено;
Координаты = "";

