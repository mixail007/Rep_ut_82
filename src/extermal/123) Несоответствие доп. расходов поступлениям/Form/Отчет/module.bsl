
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
КонецПроцедуры

Процедура ПриЗакрытии()
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Макет = ВнешняяОбработкаОбъект.ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
	|	ПоступлениеДопРасходовТовары.НомерСтроки КАК НомерСтрокиДопРасходы,
	|	ПоступлениеДопРасходовТовары.Номенклатура,
	|	ПоступлениеДопРасходовТовары.ДокументПартии КАК Поступление,
	|	ПоступлениеДопРасходовТовары.Количество КАК КоличествоВДопРасходах,
	|	ПоступлениеДопРасходовТовары.СуммаТовара КАК СуммаВДопРасходах
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ПоступлениеДопРасходовТовары.ДокументПартии = ПоступлениеТоваровУслугТовары.Ссылка
	|			И ПоступлениеДопРасходовТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ПоступлениеДопРасходовТовары.Количество = ПоступлениеТоваровУслугТовары.Количество
	|			И ПоступлениеДопРасходовТовары.СуммаТовара = ПоступлениеТоваровУслугТовары.Сумма
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ПоступлениеДопРасходовТовары.Ссылка.Проведен
	|	И ПоступлениеДопРасходовТовары.ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ПоступлениеТоваровУслугТовары.НомерСтроки ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеДопРасходовТовары.Ссылка.Дата
	|ИТОГИ ПО
	|	Ссылка";

	Запрос.УстановитьПараметр("Дата1", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("Дата2", КОнецДня(КонПериода));

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьСсылка = Макет.ПолучитьОбласть("Ссылка");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.Период = ПредставлениеПериода(НачалоДня(НачПериода),КОнецДня(КонПериода),"ФП=Истина");
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаСсылка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаСсылка.Следующий() Цикл
		ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьСсылка, ВыборкаСсылка.Уровень());

		ВыборкаДетали = ВыборкаСсылка.Выбрать();

		Пока ВыборкаДетали.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
			ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
		КонецЦикла;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры




