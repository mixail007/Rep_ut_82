Перем СтруктураКолонокРезультата;
Перем СписокКонтрагентов;


// Процедура - обработчик события "Нажатие" кнопки Заполнить командной панели КоманднаяПанельЗаказы
// Заполняет дерево значений по результатам продаж
Процедура КоманднаяПанельЗаказыЗаполнить(Кнопка)
	
	ЗаполнитьПотребность();
	
КонецПроцедуры // КоманднаяПанельЗаказыЗаполнить()
 // Процедура - обработчик события "ПриОткрытии" основной формы обработки
//
Процедура ПриОткрытии()
	//Если Не СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОбработкаОбъект) Тогда
		ИнициализацияОтчета(ЭтаФорма);
	//КонецЕсли;
	ЗаполнитьНастройки();
	ЭлементыФормы.НеобходимоПереформироватьПотребность.Видимость = Ложь;
КонецПроцедуры // ПриОткрытии()


Процедура ЗаполнитьНастройки()
		ИнициализироватьПостроитель();
		Построитель.ЗаполнитьНастройки();
		Если НастройкиПостроителя <> Неопределено Тогда
			Построитель.УстановитьНастройки(НастройкиПостроителя, Истина, Истина, Истина, Ложь, Ложь);
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", "Номенклатура");
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", "Характеристика");
		СтруктураОтбора.Вставить("НоменклатурнаяГруппа", "Номенклатурная группа");
		СтруктураОтбора.Вставить("КЗаказу", "Кол-во к заказу");

		СтруктураПорядка = Новый Структура();
		СтруктураПорядка.Вставить("Номенклатура", "Номенклатура");
		СтруктураПорядка.Вставить("ХарактеристикаНоменклатуры", "Характеристика");
		СтруктураПорядка.Вставить("НоменклатурнаяГруппа", "Номенклатурная группа");
		СтруктураПорядка.Вставить("КоличествоОборот", "Кол-во продажи");
		СтруктураПорядка.Вставить("СебестоимостьПродаж", "с/с продажи");
		СтруктураПорядка.Вставить("КоличествоОстаток","Кол-во остаток");
		СтруктураПорядка.Вставить("СуммаЗаказа","Заказано сумма");
		
		//Построитель.ДоступныеПоля.Удалить(Построитель.ДоступныеПоля.Найти("КонецПериода"));
		//Построитель.ДоступныеПоля.Удалить(Построитель.ДоступныеПоля.Найти("НачалоПериода"));
		//Построитель.ДоступныеПоля.Удалить(Построитель.ДоступныеПоля.Найти("Период"));
		//Построитель.ДоступныеПоля.Удалить(Построитель.ДоступныеПоля.Найти("Периодичность"));
		Для Каждого ДоступноеПоле Из Построитель.ДоступныеПоля Цикл
			ДоступноеПоле.Отбор = Ложь;
			ДоступноеПоле.Порядок = Ложь;
			ПолеОтбора = Неопределено;
			ПолеПорядка = Неопределено;
			Если СтруктураОтбора.Свойство(ДоступноеПоле.Имя, ПолеОтбора) Тогда
				ДоступноеПоле.Отбор = Истина;
				ДоступноеПоле.Представление = ПолеОтбора;
			КонецЕсли;
			Если СтруктураПорядка.Свойство(ДоступноеПоле.Имя, ПолеПорядка) Тогда
				ДоступноеПоле.Порядок = Истина;
				ДоступноеПоле.Представление = ПолеПорядка;
			КонецЕсли;
		КонецЦикла;
		ДатаФормированияЗаказов = ТекущаяДата();
КонецПроцедуры 

 // Процедура - обработчик события "Нажатие" кнопки УстановитьПометки командной панели КоманднаяПанельЗаказы
//
Процедура КоманднаяПанельУстановитьПометки(Кнопка)
	
	ИзменитьПометку(Истина);
	
КонецПроцедуры // КоманднаяПанельУстановитьПометки()
// Процедура - изменяет пометку строке дерева значений, 
// Признак будит ли по строке формироваться документ Заказ поставщику.
Процедура ИзменитьПометку(Пометка)
	//Если ЭлементыФормы.Результат.ВыделенныеСтроки.Количество() > 0 Тогда
	//	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.Результат.ВыделенныеСтроки Цикл
	//		ВыделеннаяСтрока.Пометка = Пометка;
	//	КонецЦикла;
	//КонецЕсли;
	Пост = ЭлементыФормы.Результат.ВыделенныеСтроки[0].Поставщик;
	Для каждого СтрокаДереваПоставщик Из Результат.Строки Цикл
		Если СтрокаДереваПоставщик.Поставщик = Пост Тогда
			Для каждого ДетальныеСтроки Из СтрокаДереваПоставщик.Строки Цикл
				ДетальныеСтроки.Пометка = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры // ИзменитьПометку()

// Процедура выполняет расчет и вывод потребности к заказу поставщику
//
Процедура ЗаполнитьПотребность()
	//Если ПоверитьЗаполнениеПередФормированием() Тогда
	//	возврат;
	//КонецЕсли;

	ЭлементыФормы.Результат.Доступность = Истина;
	ЭлементыФормы.НеобходимоПереформироватьПотребность.Видимость = Ложь;
	ДеревоЗаказов.Строки.Очистить();

	СтруктураКолонокРезультата = Новый Структура();
	Для каждого Колонка Из ЭлементыФормы.Результат.Колонки Цикл
		СтруктураКолонокРезультата.Вставить(Колонка.Имя, Колонка);
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос = Построитель.ПолучитьЗапрос();
		

	//СпособУчетаСебестоимости = глЗначениеПеременной("СпособУчетаСебестоимости");
	//УчитыватьСебестоимость = (СпособУчетаСебестоимости <> Перечисления.СпособыУчетаСебестоимости.НеУчитывать);
	Запрос.УстановитьПараметр("Фикс", Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная);
    Запрос.УстановитьПараметр("Ответственный", Справочники.Пользователи.НайтиПоКоду("Голубева В.С."));
	Запрос.УстановитьПараметр("Закупочная", Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Закупочная"));
	
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("01365"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("01366"));
	
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	Результат.Строки.Очистить();
	ТекущаяДата = КонецДня(ТекущаяДата());
	ДатаОкончанияДляРасчетаДнейТорговли = ?(КонецПериода > ТекущаяДата, ТекущаяДата, КонецПериода);

ЭлементыФормы.Результат.Значение = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//МассивЗапросов = Запрос.ВыполнитьПакет();
	//Результат = МассивЗапросов[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
   // Результат.загрузить(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
	//Итератор = 0;
	//Пока Итератор < ЭлементыФормы.Результат.Колонки.Количество() Цикл
	//	КолонкаДляИзмененияСвойств = ЭлементыФормы.Результат.Колонки.Получить(Итератор);
	//	Колонка = Неопределено;
	//	Если СтруктураКолонокРезультата.Свойство(КолонкаДляИзмененияСвойств.Имя, Колонка) Тогда
	//		ЗаполнитьЗначенияСвойств(КолонкаДляИзмененияСвойств, Колонка);
	//	Иначе
	//		ЭлементыФормы.Результат.Колонки.Удалить(КолонкаДляИзмененияСвойств);
	//		Итератор = Итератор - 1;
	//	КонецЕсли;
	//	Итератор = Итератор + 1;
	//КонецЦикла;
	ЭлементыФормы.Результат.Колонки.Пометка.Доступность = истина;
КонецПроцедуры // ЗаполнитьПотребность()

Процедура РезультатПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Пометка.ОтображатьТекст = Ложь;

	Если ДанныеСтроки.Строки.Количество() > 0 Тогда
	
		ОформлениеСтроки.ЦветФона = Новый Цвет(205, 209, 197);
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.Пометка.Флажок = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Пометка.Флажок = ДанныеСтроки.Пометка;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыВыполнить(Кнопка)
	//Если Результат.Строки.Количество() > 0 И Результат.Строки.Итог("КоличествоПоставщиков", Ложь) > 1 Тогда
	//	Предупреждение("Формировать документ заказ поставщику возможно только по одному поставщику");
	//	возврат;
	//ИначеЕсли Результат.Строки.Итог("КоличествоВыделенныхСтрок", Ложь) = 0 Тогда
	//	Предупреждение("Не помечены строки для формирования заказа");
	//	возврат;
	//КонецЕсли;
	Для каждого СтрокаДереваПоставщик Из Результат.Строки Цикл
		Если СтрокаДереваПоставщик.Строки.Количество() > 0 Тогда
			ДокументЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
			ДокументЗаказПоставщику.Дата = ДатаФормированияЗаказов;
			ДокументЗаказПоставщику.Контрагент = СтрокаДереваПоставщик.Поставщик;
			ДокументЗаказПоставщику.ДатаПоступления = ДатаПоступления;
			ДокументЗаказПоставщику.ДатаОплаты = ДатаОплаты;
			ДокументЗаказПоставщику.Организация = Справочники.Организации.НайтиПоКоду("00001");
			ДокументЗаказПоставщику.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
			ДокументЗаказПоставщику.Склад = Справочники.Склады.НайтиПоНаименованию("1");
			//ДокументЗаказПоставщику.ДатаПоступления = ДатаПланируемогоПоступления;
			Для каждого ДетальныеСтроки Из СтрокаДереваПоставщик.Строки Цикл
				если ДетальныеСтроки.Пометка = Истина Тогда
				СтрокаТоваров = ДокументЗаказПоставщику.Товары.Добавить();
				СтрокаТоваров.Номенклатура = ДетальныеСтроки.Номенклатура;
				//СтрокаТоваров.ХарактеристикаНоменклатуры = ДетальныеСтроки.ХарактеристикаНоменклатуры;
				СтрокаТоваров.Количество = ДетальныеСтроки.КЗаказу;
				СтрокаТоваров.ЕдиницаИзмерения = ДетальныеСтроки.ЕдиницаИзмеренияОстаток;
				СтрокаТоваров.Коэффициент = 1;
				СтрокаТоваров.Цена = ДетальныеСтроки.Цена;
				СтрокаТоваров.СтавкаНДС = ДетальныеСтроки.Номенклатура.СтавкаНДС;
				СтрокаТоваров.Сумма = СтрокаТоваров.Количество*СтрокаТоваров.Цена;
				СтрокаТоваров.СуммаНДС = СтрокаТоваров.Количество*СтрокаТоваров.Цена/118*18;
				КонецЕсли;
				//ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТоваров, ДокументЗаказПоставщику);
				//ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТоваров, ДокументЗаказПоставщику, ДокументЗаказПоставщику.УчитыватьНДС, ДокументЗаказПоставщику.СуммаВключаетНДС);
			КонецЦикла;
			Если ДокументЗаказПоставщику.Товары.Количество() > 0 Тогда
			ФормаДокумента = ДокументЗаказПоставщику.ПолучитьФорму("ФормаДокумента");
			ФормаДокумента.Открыть();
			КонецЕсли;
			//СформированЗаказ = Истина;
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.НеобходимоПереформироватьПотребность.Видимость = Истина;
	//ЭлементыФормы.Результат.Доступность = Ложь;

КонецПроцедуры

Процедура КоманднаяПанельЗаказыСнятьПометку(Кнопка)
	Пост = ЭлементыФормы.Результат.ВыделенныеСтроки[0].Поставщик;
	Для каждого СтрокаДереваПоставщик Из Результат.Строки Цикл
		Если СтрокаДереваПоставщик.Поставщик = Пост Тогда
			Для каждого ДетальныеСтроки Из СтрокаДереваПоставщик.Строки Цикл
				ДетальныеСтроки.Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	Форма = ЭтотОбъект.ПолучитьФорму("Форма1");
	Форма.Открыть();
КонецПроцедуры

//Процедура РезультатПометкаПриИзменении(Элемент)
//	Если ЭлементыФормы.Результат.ВыделенныеСтроки.Количество() > 0 Тогда
//		Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.Результат.ВыделенныеСтроки Цикл
//			ВыделеннаяСтрока.Пометка = истина;
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры
 

НастройкиОтчета = Новый Структура();

ДеревоЗаказов.Колонки.Добавить("КоличествоВыделенныхСтрок", Новый ОписаниеТипов(,Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
ДеревоЗаказов.Колонки.Добавить("КоличествоПоставщиков", Новый ОписаниеТипов(,Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
ДеревоЗаказов.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
ДеревоЗаказов.Колонки.Добавить("Количество", Новый ОписаниеТипов(,Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
ДеревоЗаказов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДеревоЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ДеревоЗаказов.Колонки.Добавить("ЕдиницаИзмеренияОстаток");
ДеревоЗаказов.Колонки.Добавить("Коэффициент");
ДеревоЗаказов.Колонки.Добавить("Цена");
ДеревоЗаказов.Колонки.Добавить("СтавкаНДС");
ДеревоЗаказов.Колонки.Добавить("СтрокаИсходногоДерева");

СписокКонтрагентов = Новый СписокЗначений();