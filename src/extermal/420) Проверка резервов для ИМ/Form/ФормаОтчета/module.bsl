
Процедура ДатаОтчетаПриИзменении(Элемент)
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОтчета");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(ДатаОтчета);

КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	
	СписокКонтрагентов = Новый СписокЗначений;
	списокФилиалов = яштПоставщики.ПолучитьМассивФилиалов(); //29.05.2018
	Для i=1 по списокФилиалов.Количество()-1 Цикл // 0 - это Ярославль
 		СписокКонтрагентов.Добавить(списокФилиалов[i].Контрагент);
	КонецЦикла;	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПодразделениеКонтрагент");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = СписокКонтрагентов;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ГоловноеПодразделение");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Подразделения.НайтиПоКоду("00005");
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Подразделение");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Подразделение;
	
КонецПроцедуры

Процедура ПриОткрытии()
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОтчета");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(ДатаОтчета);
	
	Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить( Подразделение );
	
	СписокКонтрагентов = Новый СписокЗначений;
	списокФилиалов = яштПоставщики.ПолучитьМассивФилиалов(); //29.05.2018
	Для i=1 по списокФилиалов.Количество()-1 Цикл // 0 - это Ярославль
 		СписокКонтрагентов.Добавить(списокФилиалов[i].Контрагент);
		ЭлементыФормы.Подразделение.СписокВыбора.Добавить( списокФилиалов[i] );
	КонецЦикла;	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПодразделениеКонтрагент");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = СписокКонтрагентов;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ГоловноеПодразделение");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Подразделение;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Подразделение");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Подразделение;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонтрагентИМ");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("П004703");

	ДатаОтчета = ТекущаяДата();
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОтчета");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(ДатаОтчета);

	КонтрИМ = справочники.Контрагенты.НайтиПоКоду("П004703");
	ПараметрСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.ПравоеЗначение  = КонтрИМ;
	
	контр11 = справочники.Контрагенты.НайтиПоКоду("П015036"); //11 гр.
	ЭлементыФормы.КонтрИМ.СписокВыбора.Добавить(КонтрИМ);
    ЭлементыФормы.КонтрИМ.СписокВыбора.Добавить(контр11);

КонецПроцедуры


Процедура СоздатьЗаказНажатие(Элемент)
	Если Подразделение = Справочники.Подразделения.ПустаяСсылка() Тогда
		Сообщить("Заполните подразделение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	Заказ.Дата = ТекущаяДата();
	Заказ.ДатаОтгрузки = ТекущаяДата();
	Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
	Заказ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("00367");
	Заказ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("00417");
    Заказ.ТипЦен = Заказ.ДоговорКонтрагента.ТипЦен;
	
	Заказ.ОтгрузкаСПодразделенияСклада = Истина;
	
	Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	Заказ.КурсВзаиморасчетов = 1;
	Заказ.КратностьВзаиморасчетов = 1;
	// Поставим соответствме Складов
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МинимальныйОстатокВПодразделенияхДляИМ.Номенклатура,
	|	МинимальныйОстатокВПодразделенияхДляИМ.Количество - ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) КАК Количество,
	|	МинимальныйОстатокВПодразделенияхДляИМ.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Вт_Итог
	|ИЗ
	|	РегистрСведений.МинимальныйОстатокВПодразделенияхДляИМ КАК МинимальныйОстатокВПодразделенияхДляИМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервДляИМ.Остатки(, Подразделение = &Подразделение) КАК РезервДляИМОстатки
	|		ПО МинимальныйОстатокВПодразделенияхДляИМ.Подразделение = РезервДляИМОстатки.Подразделение
	|			И МинимальныйОстатокВПодразделенияхДляИМ.Номенклатура = РезервДляИМОстатки.Номенклатура
	|ГДЕ
	|	МинимальныйОстатокВПодразделенияхДляИМ.Количество - ЕСТЬNULL(РезервДляИМОстатки.КоличествоОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_Итог.Номенклатура,
	|	Вт_Итог.Количество,
	|	Вт_Итог.Подразделение
	|ИЗ
	|	Вт_Итог КАК Вт_Итог
	|ГДЕ
	|	Вт_Итог.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ТЗНоменклатура = РезультатЗапроса.Выгрузить();
	ТЗМассив = ТЗНоменклатура.ВыгрузитьКолонку("Номенклатура");
	ТЗНоменклатура = Новый СписокЗначений;	
	ТЗНоменклатура.ЗагрузитьЗначения(ТЗМассив);
	Если ТЗНоменклатура.Количество() =0 Тогда
		Сообщить("Нет номенклатуры ддя заказа");
		Возврат;
	КонецЕсли;
	
    Склад = Подразделение.Склад;
	Если Не ЗначениеЗаполнено(Склад) или Склад.ЗапретитьИспользование Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Подразделение = &Подразделение
		|	И НЕ Склады.ПометкаУдаления
		|	И НЕ Склады.ЗапретитьИспользование";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаСклад = РезультатЗапроса.Выбрать();
		Если ВыборкаСклад.Следующий() Тогда
			Склад = ВыборкаСклад.Склад;
		КонецЕсли;
	КонецЕсли;
	Заказ.Склад = Склад;
	Заказ.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");
	ТаблицаЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Заказ.Контрагент, ТЗНоменклатура);
	Пока Выборка.Следующий() Цикл
		НовСтрокаТовары = Заказ.Товары.Добавить();
		НовСтрокаТовары.Номенклатура = Выборка.Номенклатура;
		ПриИзмененииНоменклатурыТабЧасти(НовСтрокаТовары, Заказ);
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НовСтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить());
		НовСтрокаТовары.Количество = Выборка.Количество;
	    СтрокаЦен = ТаблицаЦен.найти(НовСтрокаТовары.Номенклатура, "Номенклатура");
		ЗаполнитьСтавкуНДСТабЧасти(НовСтрокаТовары, Заказ);
		РассчитатьСуммуТабЧасти(НовСтрокаТовары, Заказ);
		РассчитатьСуммуНДСТабЧасти(НовСтрокаТовары, Заказ);
		НовСтрокаТовары.Коэффициент = 1;
		
		Если СтрокаЦен = Неопределено Тогда
			Сообщить(строка(НовСтрокаТовары.НомерСтроки)+"строка: Цены на товар "+НовСтрокаТовары.Номенклатура.Код+" - нет.");
		Иначе	
			НовСтрокаТовары.Цена = СтрокаЦен.МинимальнаяЦена;  // по политике или правилам ценообразования
		КонецЕсли;	
  	КонецЦикла;
	Удалось = Ложь;
	Попытка
		Заказ.Записать(РежимЗаписиДокумента.Запись);
		Удалось = Истина;
	Исключение
		Сообщить("Не удалось записать заказ"+ ОписаниеОшибки());
	КонецПопытки;
	
	Если Удалось Тогда
		Заказ.ПолучитьФорму().Открыть();
	КонецЕсли;

КонецПроцедуры


Процедура КонтрИМПриИзменении(Элемент)
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ПараметрСКД.Использование   = НЕ КонтрИМ.Пустая();
	ПараметрСКД.ПравоеЗначение  = КонтрИМ;

КонецПроцедуры
 
