&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
//------------------------------------------------------

// Отправка документов
&НаКлиенте
Процедура ОтправитьДокументы(Кэш,МассивСтрок) Экспорт
	// Процедура формирует и отправляет пакеты документов по отмеченным строкам в реестре	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	МассивПакетов = Новый Массив;  // Массив пакетов для одной отправки (если в настройках указано отправлять пакеты по n штук)
	УжеАктивированы = Новый СписокЗначений;
	ИННОтправителей = Новый СписокЗначений;
	//ПолныйМассивПакетов = Новый Массив;  // Полный массив пакетов для отправки
	Всего = МассивСтрок.Количество();
	ВсегоПакетов = 0;
	сч = 0;
	ОшибкиДоОтправки = 0;
	Кэш.СписокНоменклатуры.Очистить();
	ПоследняяПартия = Ложь;
	
	Если Кэш.Свойство("ПрерватьОтправку") Тогда
		Кэш.Удалить("ПрерватьОтправку");
	КонецЕсли;
	//ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяНачала = ТекущаяДата();
	РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета", Новый СписокЗначений,0,0,0,0, Новый Соответствие,0,0,Новый Массив,0,Кэш.КоличествоПотоковОтправки,0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0);
	Кэш.Вставить("РезультатОтправки",РезультатОтправки);
	ПодключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов",0.1,Истина);
	Для Каждого Строка Из МассивСтрок Цикл //Отправляемые пакеты
		Если Кэш.Свойство("ПрерватьОтправку") и Кэш.ПрерватьОтправку = Истина Тогда
			Прервать;
		КонецЕсли;
		сч = сч+1;
		Если сч = Всего Тогда
			ПоследняяПартия = Истина;
		КонецЕсли;
		сбисПоказатьСостояние("Формирование электронных документов",ГлавноеОкно,Мин(100,Окр(сч*100/Всего)), "(прервать -  Ctrl+Break)");
		//ДатаНач = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
		МассивПакетовСтроки = Кэш.Текущий.Форма.ПодготовитьСтруктуруДокумента(Строка.Значение, Кэш);
		//ДатаКнц = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
		//Кэш.РезультатОтправки.ВремяФормирования = Кэш.РезультатОтправки.ВремяФормирования+(ДатаКнц-ДатаНач)/1000;
		Если АктивироватьСертификатыОтправитьДокументы(Кэш, МассивПакетовСтроки, МассивПакетов, ИННОтправителей, УжеАктивированы, ПоследняяПартия) = Ложь Тогда
			сбисСпрятатьСостояние(ГлавноеОкно);
			Возврат;
		КонецЕсли;
		
		
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	ОтключитьОбработчикОжидания("ПрерываниеПользователемФормированияДокументов");
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецПроцедуры
&НаКлиенте
Функция АктивироватьСертификатыОтправитьДокументы(Кэш, МассивПакетовСтроки, МассивПакетов, ИННОтправителей, УжеАктивированы, ПоследняяПартия) Экспорт
	// Проверяем, надо ли активировать сертификаты. При необходимости открывает форму ввода пин-када для первого сертификата
	
	Если Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") и Кэш.РезультатОтправки.ПрерватьОтправку<>Истина Тогда    // при отправке были проблемы со связью
		Ответ = Вопрос(Кэш.РезультатОтправки.ПрерватьОтправку + ". Прервать отправку документов?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		Кэш.РезультатОтправки.ПрерватьОтправку = Истина; // присваиваем Истина, чтобы в следующий раз уже не спрашивать
	КонецЕсли;
	
	КолПакетов = МассивПакетовСтроки.Количество();
	сч = 0;
	
	Для Каждого Пакет Из МассивПакетовСтроки Цикл
		сч = сч+1;
		ПолныйСоставПакета = Пакет;
		ИННОтправителя = ?(ПолныйСоставПакета.НашаОрганизация.Свойство("СвФЛ"),ПолныйСоставПакета.НашаОрганизация.СвФЛ.ИНН,ПолныйСоставПакета.НашаОрганизация.СвЮЛ.ИНН);
		Если ИННОтправителей.НайтиПоЗначению(ИННОтправителя)=Неопределено и УжеАктивированы.НайтиПоЗначению(ИННОтправителя)=Неопределено Тогда 
			ИННОтправителей.Добавить(ИННОтправителя);
		КонецЕсли;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			Если ПолныйСоставПакета.Свойство("Ошибка") Тогда
				Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
				Если ПолныйСоставПакета.Вложение.Количество()>0 и ПолныйСоставПакета.Вложение[0].Свойство("Документы1С") Тогда
					ОсновнойДокумент1С = ПолныйСоставПакета.Вложение[0].Документы1С[0].Значение;
				Иначе
					ОсновнойДокумент1С = Неопределено;
				КонецЕсли;
				Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, ПолныйСоставПакета.Ошибка, ПолныйСоставПакета.Ошибка, ОсновнойДокумент1С)
			Иначе
				МассивПакетов.Добавить(ПолныйСоставПакета);
			КонецЕсли;
			Если МассивПакетов.Количество() = Кэш.КоличествоВОтправке или (ПоследняяПартия и сч = КолПакетов) Тогда
				
				Если ИННОтправителей.Количество()>0 Тогда
					СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, ИННОтправителей);
					Если СписокСертификатов.Количество()>0 Тогда
						Для Каждого Элемент Из СписокСертификатов Цикл
							Сертификат = Элемент.Значение;
							ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
							ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
							КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
							Если Не ЗначениеЗаполнено(КодАктивации) Тогда
								Сообщить("Не активирован сертификат для подписания документов.");
								Возврат Ложь;
							КонецЕсли;
							Сертификат.Вставить("КодАктивации", КодАктивации);
						КонецЦикла;
						Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
					Для Каждого Элемент Из ИННОтправителей Цикл
						УжеАктивированы.Добавить(Элемент.Значение);
					КонецЦикла;
					ИННОтправителей.Очистить();
				КонецЕсли;
				
				Кэш.ФормаОтправки.ОтправитьПакетыДокументов(Кэш, МассивПакетов);
				Кэш.РезультатОтправки.ВсегоПакетов = Кэш.РезультатОтправки.ВсегоПакетов+МассивПакетов.Количество();
				МассивПакетов.Очистить();
				Если Кэш.Парам.ОтправлятьНоменклатуруСДокументами = Истина и Кэш.Ини.Свойство("Номенклатура") Тогда
					КаталогОтправлен = Кэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(Кэш, Новый Структура("СписокНоменклатуры, Организация",Кэш.СписокНоменклатуры),Кэш.Ини.Номенклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));
					Кэш.СписокНоменклатуры.Очистить();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Если ПоследняяПартия Тогда
		Кэш.ФормаОтправки.сбисПолучитьОтветыПоОтправке(Кэш);
		Кэш.РезультатОтправки.НеОтправлено = Кэш.РезультатОтправки.ВсегоПакетов-Кэш.РезультатОтправки.Отправлено+Кэш.РезультатОтправки.ОшибкиДоОтправки;
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеОтправкиПакетов","РаботаСДокументами1С","", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеОтправкиПакетов(Кэш);	
		КонецЕсли;
		Если Не Кэш.ТихийРежим Тогда
			Если Кэш.РезультатОтправки.Свойство("ФормаОтправки") Тогда
				сбисПолучитьФорму(Кэш.РезультатОтправки.ФормаОтправки).ПослеОтправки(Кэш);
			Иначе
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
				фрм.ПоказатьРезультатОтправки(Кэш);
				Если Кэш.РезультатОтправки.Свойство("ОтправкаИзПересылки") Тогда
					сбисПолучитьФорму("ФормаПересылкаПакетов").ПослеОтправки(Кэш);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура ПрерываниеПользователемФормированияДокументов()
	// Если пользователь прервал формирование документов, прячем состояние
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция ПрочитатьДокумент(Кэш,Контекст) Экспорт
	// Функция перебирает мФайлы в файле настроек и для каждого вызывает функцию формирования структуры документа из соответствующей формы Файл_...	
	// Все вложения из состава пакета добавляем в первый пакет, сформированный по строке документов
	// на случай, если по одному из вложений формируется сразу несколько пакетов
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Контекст.СоставПакета = Контекст.МассивПакетов[0];
	Иначе
		Контекст.Вставить("СоставПакета",Новый Структура);
		Контекст.СоставПакета.Вставить("Вложение",Новый Массив);
	КонецЕсли;
	Контекст.Вставить("ФайлДанные", Новый Структура);
	ВсеВыгрузилось = Истина;
	Для Каждого Файл Из Контекст.ДокументДанные.мФайл Цикл
		Файл = Файл.Значение;
		Контекст.ФайлДанные = Файл;
		Файл.Файл_Формат = Кэш.ОбщиеФункции.РассчитатьЗначение("Файл_Формат", Файл, Кэш);
		Файл_Формат = Файл.Файл_Формат;
		Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(Файл.Файл_ВерсияФормата,".","_"), " ", "");
		Если Файл_Формат = "Конверт" и Контекст.СоставПакета.Свойство("Конверт") Тогда     // если конверт уже есть, переходим к следующему мФайлу
			Продолжить;
		КонецЕсли;
		Если Файл.Свойство("ФормаФормирования") Тогда
			ФормаФормирования = Файл.ФормаФормирования;
		Иначе
			ФормаФормирования = "Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата;
		КонецЕсли;
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ПолучитьДанныеИзДокумента1С",ФормаФормирования,"Файл_Шаблон",Кэш);			
		Если Не фрм.ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Тогда //если хотябы что-то не выгрузилось - отбой
			ВсеВыгрузилось = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Контекст.МассивПакетов[0] = Контекст.СоставПакета;
	Иначе
		Контекст.МассивПакетов.Вставить(0, Контекст.СоставПакета);
	КонецЕсли;
	Возврат ВсеВыгрузилось;
КонецФункции
&НаКлиенте
Функция ПрочитатьТабличнуюЧасть(Кэш,Контекст) Экспорт
	// Функция формирует табличную часть документа
	// Используется при формировании таб части СФ из документов-оснований
	Контекст.Вставить("СписокТЧ", Новый СписокЗначений);  // список ТЧ, чтобы одна и та же таб. часть дважды не попадала в документ
	Для Каждого Файл Из Контекст.ДокументДанные.мФайл Цикл
		Файл = Файл.Значение;
		Контекст.ФайлДанные = Файл;
		Файл.Файл_Формат = Кэш.ОбщиеФункции.РассчитатьЗначение("Файл_Формат", Файл, Кэш);
		Файл_Формат = Файл.Файл_Формат;
		Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(Файл.Файл_ВерсияФормата,".","_"), " ", "");
		Если Файл_Формат = "Конверт" Тогда     // Конверт пропускаем
			Продолжить;
		КонецЕсли;
		Если Файл.Свойство("ФормаФормирования") Тогда
			ФормаФормирования = Файл.ФормаФормирования;
		Иначе
			ФормаФормирования = "Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата;
		КонецЕсли;    
		
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ПолучитьТабличнуюЧастьДокумента1С",ФормаФормирования,"Файл_Шаблон",Кэш);	
		фрм.ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст)
	КонецЦикла;
	Контекст.Удалить("СписокТЧ");
	Возврат Истина;
КонецФункции		


// Загрузка документов
&НаКлиенте
Функция ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов, ТолькоАнализ = Ложь, списокНоменклатуры = неопределено) Экспорт    //Плотиков  ТолькоАнализ
	// Загружает отмеченные пакеты документов в 1С	
	Обновлять = Ложь;
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Всего = СписокОтмеченныхДокументов.Количество();
	Загружено = 0;
	сч = 0;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		сч = сч + 1;
		сбисПоказатьСостояние("Загрузка документов",ГлавноеОкно,Мин(100,Окр(сч*100/Всего)));
		МассивПакетов = Кэш.Текущий.Форма.ПодготовитьСтруктуруДокумента(Строка.Значение, Кэш);
		Для Каждого Пакет Из МассивПакетов Цикл
			ПолныйСоставПакета = Пакет;
			ПолныйСоставПакета = МестныйКэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(ПолныйСоставПакета, МестныйКэш); // пока SDK не возвращает дату, номер док. основания
			СписокВесов = Новый СписокЗначений;
			Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
				Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда   // Вложение уже загружено
					Продолжить; 
				КонецЕсли;
				СтруктураИниФайла = Новый Структура;
				ТипДокумента = "";
				ТекстОшибки = "";
				
				Если Кэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(ПолныйСоставПакета,Вложение,СтруктураИниФайла,ТипДокумента,ТекстОшибки,Кэш,ТолькоАнализ,списокНоменклатуры)<>Ложь Тогда  //Плотников ТолькоАнализ
					Если СтруктураИниФайла.Количество()>0 Тогда
						Вес = РассчитатьЗначение("Вес",Новый Структура("Ини", СтруктураИниФайла),Кэш);
						Попытка
							Вес = Число(Вес);
						Исключение
							Вес = 0;
						КонецПопытки;
						Если СписокВесов.НайтиПоЗначению(Вес)=Неопределено Тогда
							СписокВесов.Добавить(Вес);
						КонецЕсли;
						Вложение.Вставить("Вес", Вес);
						Вложение.Вставить("Ини", СтруктураИниФайла);
						Вложение.Вставить("ТипДокумента", ТипДокумента);
					Иначе
						Сообщить("Документ " + Вложение.Название + " не загружен. "+ТекстОшибки);
					КонецЕсли;
				Иначе
					Сообщить("Документ " + Вложение.Название + " не загружен. "+ТекстОшибки);
					сбисСпрятатьСостояние(ГлавноеОкно);
					СписокВесов = Новый СписокЗначений;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			УпорядоченныйСоставПакета = МестныйКэш.ОбщиеФункции.УпорядочитьВложенияДляЗагрузки(СписокВесов, ПолныйСоставПакета);
			
			МассивОснований = Новый Массив;
			ПакетЗагружен = Ложь;
			Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
				фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",Кэш);			
				Документ1С = фрм.СоздатьДокумент(МестныйКэш,Вложение,Вложение.Ини,ПолныйСоставПакета,МассивОснований);
				Если Документ1С<>Неопределено Тогда
					Вложение.Документы1С.Добавить(Документ1С);
					МассивОснований.Добавить(Документ1С);
					Обновлять = Истина;	
					ПакетЗагружен = Истина;
				КонецЕсли;
			КонецЦикла;
			Если УпорядоченныйСоставПакета.Количество()>0 и ПакетЗагружен Тогда
				Загружено = Загружено+1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Сообщить("Загружено комплектов "+строка(Загружено)+" из "+строка(Всего));
	сбисСпрятатьСостояние(ГлавноеОкно);
	Возврат	Обновлять;	
КонецФункции
&НаКлиенте
Функция СоздатьДокумент(Кэш, Вложение, Ини, СоставПакета, МассивОснований, Документ1С = Неопределено) Экспорт
	// Функция заполняет документ 1С данными из файла, проставляет идентификаторы и статус документа СБИС	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	МестныйКэш = Кэш;
	СтруктураФайла = Вложение.СтруктураФайла;
	СтруктураДанныхДокумента = Новый Структура;
	МестныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуру(СтруктураДанныхДокумента, Ини);
	ТипДокумента = СообщитьИмяРеквизита(Ини.Документ.Значение);
	СписокДокументов = Новый СписокЗначений;
	Если Документ1С = Неопределено и Кэш.парам.СопоставлятьПередЗагрузкой Тогда
		Кэш.ОбщиеФункции.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, Кэш.Ини, Кэш.Парам, СоставПакета);
	КонецЕсли;
	Если СписокДокументов.Количество()=1 Тогда
		Документ1С = СписокДокументов[0].Значение;
		Сообщить("Для документа "+Вложение.Название+" найден соответствующий документ 1С "+строка(Документ1С));
	Иначе
		Документ1С = ЗаполнитьДанныеДокумента1С(СтруктураДанныхДокумента, СтруктураФайла, МассивОснований,СоставПакета, Документ1С);
	КонецЕсли;
	Если Документ1С<>Неопределено Тогда
		СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,СоставПакета.Состояние.Название);
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ1С, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
		Возврат Документ1С;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(СтруктураФайла, Ини, ДокОбъект, МассивОснований,СоставПакета)
	// Функция заполняет структуру документа 1С по файлу настроек
	Переменные = Новый Структура;
	Ограничения = Новый Структура;
	Для Каждого Элемент Из Ини Цикл
		Если Элемент.Значение.Свойство("Значение") Тогда
			Если Элемент.Значение.Свойство("Данные") Тогда
				ЗначениеРеквизита = ЗаполнитьЗначениеРеквизитаИзФайла(Элемент.Значение, СтруктураФайла, ДокОбъект, МестныйКэш);						
				Элемент.Значение.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
			КонецЕсли;
			Если Элемент.Значение.Свойство("Вычислить") и (Найти(Элемент.Значение.Вычислить,"'")>0 или Найти(Элемент.Значение.Вычислить,"{")>0) Тогда
				//березкин
				Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, ДокОбъект, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация);
				ЗначениеРеквизита = РассчитатьЗначение(Элемент.Значение.Вычислить,Контекст,МестныйКэш);
				ДокОбъект = Контекст.Документ;  // Если в функции заполняются не только вычисляемый реквизит, но и другие данные документа, которые попадают в Контекст.Документ
				//
				ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Элемент.Значение.Значение, ДокОбъект, Переменные);
				Элемент.Значение.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
			КонецЕсли;
		Иначе
			Если Элемент.Ключ = "мСторона" Тогда
				КонтрагентРоль = РассчитатьЗначение("Контрагент_Роль",Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, ДокОбъект, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация),МестныйКэш);
				ОрганизацияРоль = РассчитатьЗначение("Организация_Роль",Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, ДокОбъект, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация),МестныйКэш);
				// сначала ищем организацию, т.к. она может потребоваться при поиске контрагента (при определенной настройке прав)
				Если Элемент.Значение.Свойство(ОрганизацияРоль) Тогда
					ЗначениеПараметра = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(Элемент.Значение[ОрганизацияРоль].Сторона.Данные,СтруктураФайла));
					Если МестныйКэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и МестныйКэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(МестныйКэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
						Ограничения = Новый Структура("Организация",ЗначениеПараметра);
					КонецЕсли;
					ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, Элемент.Значение[ОрганизацияРоль].Сторона.Значение, ДокОбъект, Переменные);	
				КонецЕсли;
				Для каждого Сторона Из Элемент.Значение Цикл
					Если Сторона.Ключ <> ОрганизацияРоль Тогда
						Если Сторона.Значение.Сторона.Свойство("Данные") Тогда
							СтруктураСтороны = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(Сторона.Значение.Сторона.Данные,СтруктураФайла);
							Если ЗначениеЗаполнено(СтруктураСтороны) Тогда
								//ЗначениеПараметра = НайтиСоздатьКонтрагента(СтруктураСтороны, Сторона.Значение);
								Если ЗначениеЗаполнено(Ограничения) Тогда
									СтруктураСтороны.Вставить("Ограничения",Ограничения);
								КонецЕсли;
								Если Сторона.Значение.Сторона.Свойство("Тип") и Найти(Сторона.Значение.Сторона.Тип, "Организации")>0 Тогда
									ЗначениеПараметра = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, СтруктураСтороны);
								Иначе
									ЗначениеПараметра = МестныйКэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, СтруктураСтороны, Ини);
								КонецЕсли;
								ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, Сторона.Значение.Сторона.Значение, ДокОбъект, Переменные);
							КонецЕсли;
						КонецЕсли;
						Если Сторона.Значение.Сторона.Свойство("Вычислить") Тогда
							//ЗначениеПараметра = НайтиСоздатьКонтрагента(РассчитатьЗначение(Сторона.Значение.Сторона.Вычислить,Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета", Ини, ДокОбъект, Переменные, СтруктураФайла,СоставПакета),МестныйКэш), Сторона.Значение);
							ЗначениеПараметра = РассчитатьЗначение(Сторона.Значение.Сторона.Вычислить,Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, ДокОбъект, Переменные, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация),МестныйКэш);
							Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда  // структура в формате СБИС
								ЗначениеПараметра = МестныйКэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, ЗначениеПараметра, Ини);
							КонецЕсли;
							ЗаполнитьЗначениеРеквизита(ЗначениеПараметра, Сторона.Значение.Сторона.Значение, ДокОбъект, Переменные);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			Если Элемент.Ключ = "мТаблДок" Тогда
				счТЧ = 0;
				Для каждого ТабЧасть Из Элемент.Значение Цикл
					ИниТаб = Новый Структура;
					МестныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуру(ИниТаб, Ини);
					МестныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуру(ИниТаб,ТабЧасть.Значение);
					
					ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
					Если ТабЧасть.Значение.Свойство("ТаблДок") и ТабЧасть.Значение.ТаблДок.Свойство("Данные") Тогда
						ПутьТаблДок = ТабЧасть.Значение.ТаблДок.Данные;
					КонецЕсли;
					ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
					Для Каждого Строка Из ТаблДок Цикл
						Если НЕ Строка.Свойство("НеЗагружать") Тогда
							Переменные = Новый Структура;
							Если счТЧ = 0 Тогда
								ИмяПервойТЧ = ТабЧасть.Ключ;
							КонецЕсли;
							счТЧ = счТЧ + 1;
							Если Ини.Свойство("ИмяТЧ") и Ини.ИмяТЧ.Свойство("Вычислить") Тогда
								ИмяТЧ = РассчитатьЗначение(Ини.ИмяТЧ.Вычислить,Новый Структура("Ини, Документ, СтрТабл, СтруктураФайла,СоставПакета,ИниКонфигурация", Ини, , Строка, СтруктураФайла,СоставПакета,МестныйКэш.Ини.Конфигурация),МестныйКэш);			
							Иначе  // если в ини не указано правило, в какую ТЧ класть номенклатуру, то все кладем в первую
								ИмяТЧ = ИмяПервойТЧ;
							КонецЕсли;
							Если ИмяТЧ = ТабЧасть.Ключ Тогда
								Если Не ДокОбъект.Свойство(ИмяТЧ) Тогда
									ДокОбъект.Вставить(ИмяТЧ, Новый массив);
								КонецЕсли;
								НоваяСтрокаДокумента = Новый Структура;
								Для Каждого Поле Из ТабЧасть.Значение Цикл								
									Если Поле.Значение.Свойство("Значение") Тогда
										Если Поле.Значение.Свойство("Данные") Тогда
											ЗначениеРеквизита = ЗаполнитьЗначениеРеквизитаИзФайла(Поле.Значение, Строка, НоваяСтрокаДокумента, МестныйКэш);						
											Поле.Значение.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
											ИниТаб[Поле.Ключ].Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
										КонецЕсли;
										Если Поле.Значение.Свойство("Вычислить") и (Найти(Поле.Значение.Вычислить,"'")>0 или Найти(Поле.Значение.Вычислить,"{")>0) Тогда
											ЗначениеРеквизита = РассчитатьЗначение(Поле.Значение.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла,СоставПакета,ИниКонфигурация", ИниТаб, ДокОбъект, НоваяСтрокаДокумента, Переменные, СтруктураФайла, Строка,СоставПакета,МестныйКэш.Ини.Конфигурация),МестныйКэш);
											ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Поле.Значение.Значение, НоваяСтрокаДокумента, Переменные);
											Поле.Значение.Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
											ИниТаб[Поле.Ключ].Вставить("РассчитанноеЗначение", ЗначениеРеквизита);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								ДокОбъект[ИмяТЧ].Добавить(НоваяСтрокаДокумента);
								Строка.Вставить("ИмяТЧ",ИмяТЧ);
								Строка.Вставить("НомСтр",ДокОбъект[ИмяТЧ].Количество()-1);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла
				КонецЦикла;
			КонецЕсли;
			Если Элемент.Ключ = "мОснование" Тогда
				Для каждого Основание Из Элемент.Значение Цикл
					ТипДок = Сред(Ини.Документ.Значение, Найти(Ини.Документ.Значение, ".")+1);
					ИмяРеквизита = Сред(Основание.Значение.Основание.Значение, Найти(Основание.Значение.Основание.Значение, ".")+1);
					ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, Основание.Значение, ДокОбъект, МассивОснований);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокументаНаСервере(СтруктураФайла, ТаблДок, Ини, ДокОбъект, МассивОснований,СоставПакета);
КонецФункции
Функция ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокументаНаСервере(СтруктураФайла, ТаблДок, Ини, ДокОбъект, МассивОснований,СоставПакета)
	// Функция заполняет структуру документа 1С по файлу настроек
	Переменные = Новый Структура;
	Для Каждого Элемент Из Ини Цикл
		Если Элемент.Значение.Свойство("Значение") Тогда
			Если Элемент.Значение.Свойство("Вычислить") и Лев(Элемент.Значение.Вычислить,1)<>"'" и Лев(Элемент.Значение.Вычислить,1)<>"{" Тогда
				ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Элемент.Значение.Вычислить,Новый Структура("Ини, Документ, Переменные, СтруктураФайла", Ини, ДокОбъект, Переменные, СтруктураФайла));
				ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Элемент.Значение.Значение, ДокОбъект, Переменные);	
			КонецЕсли;
			Если Элемент.Значение.Свойство("ВычислитьНаСервере") Тогда
				ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Элемент.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, Переменные,СтруктураФайла", Ини, ДокОбъект, Переменные, СтруктураФайла));
				ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Элемент.Значение.Значение, ДокОбъект, Переменные);	
			КонецЕсли;
		Иначе
			Если Элемент.Ключ = "мТаблДок" Тогда
				счТЧ = 0;
				Для каждого ТабЧасть Из Элемент.Значение Цикл
					ИниТаб = Новый Структура;
					сбисСкопироватьСтруктуру(ИниТаб, Ини);
					сбисСкопироватьСтруктуру(ИниТаб,ТабЧасть.Значение);
					
					Для Каждого Строка Из ТаблДок Цикл
						Если НЕ Строка.Свойство("НеЗагружать") и Строка.Свойство("ИмяТЧ") Тогда
							Переменные = Новый Структура;
							Если счТЧ = 0 Тогда
								ИмяПервойТЧ = ТабЧасть.Ключ;
							КонецЕсли;
							счТЧ = счТЧ + 1;
							ИмяТЧ = Строка.ИмяТЧ;
							Если ИмяТЧ = ТабЧасть.Ключ Тогда
								НоваяСтрокаДокумента = ДокОбъект[ИмяТЧ][Строка.НомСтр];
								Для Каждого Поле Из ТабЧасть.Значение Цикл								
									Если Поле.Значение.Свойство("Значение") Тогда
										Если Поле.Значение.Свойство("Вычислить") и Лев(Поле.Значение.Вычислить,1)<>"'" и Лев(Поле.Значение.Вычислить,1)<>"{" Тогда
											ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Поле.Значение.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", ИниТаб, ДокОбъект, НоваяСтрокаДокумента, Переменные, СтруктураФайла, Строка));
											ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Поле.Значение.Значение, НоваяСтрокаДокумента, Переменные);	
										КонецЕсли;
										Если Поле.Значение.Свойство("ВычислитьНаСервере") Тогда
											ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Поле.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", ИниТаб, ДокОбъект, НоваяСтрокаДокумента, Переменные, СтруктураФайла, Строка));
											ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Поле.Значение.Значение, НоваяСтрокаДокумента, Переменные);	
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ЗаполнитьСвязанныеДокументы(ТипДок, ИмяРеквизита, знач РазделИни, ДокОбъект, МассивОснований)
	// Процедура проставляет связи документов, загруженных из одного пакета	
	Если Метаданные.Документы[ТипДок].Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание.Тип);
		Для Каждого Основание Из МассивОснований Цикл
			Если ТипыОснований.СодержитТип(ТипЗнч(Основание)) Тогда	
				ДокОбъект.Вставить(ИмяРеквизита, Основание);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Метаданные.Документы[ТипДок].ТабличныеЧасти.Найти(ИмяРеквизита)<>Неопределено Тогда
		ИмяРеквизитаВТЧ = Сред(РазделИни.Основание_Документ.Значение, Найти(РазделИни.Основание_Документ.Значение,".")+1);
		ТипыОснований = Новый ОписаниеТипов(РазделИни.Основание_Документ.Тип);
		Для Каждого Основание Из МассивОснований Цикл
			Если ТипыОснований.СодержитТип(ТипЗнч(Основание)) Тогда	
				Если Не ДокОбъект.Свойство(ИмяРеквизита) Тогда
					ДокОбъект.Вставить(ИмяРеквизита, Новый массив);
				КонецЕсли;
				ДокОбъект[ИмяРеквизита].Добавить(Новый Структура(ИмяРеквизитаВТЧ, Основание));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ЗаполнитьДанныеДокумента1С(ини, СтруктураФайла, МассивОснований,СоставПакета, Документ1С = Неопределено) Экспорт
	// Функция заполняет структуру документа 1С, создает документ и заполняет его из структуры	
	СтруктураДокОбъект = Новый Структура; // Структура с названиями полей, как у документа
	Если Документ1С<>Неопределено Тогда
		МестныйКэш.ОбщиеФункции.ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект,Документ1С);
	КонецЕсли;
	ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(СтруктураФайла, ини, СтруктураДокОбъект, МассивОснований,СоставПакета);
	Документ1С = СоздатьДокументИзСтруктуры(Ини, СтруктураДокОбъект, Документ1С);
	фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ДопРасчетыПриЗагрузке","Документ_"+ТипДокумента,"Документ_Шаблон",МестныйКэш);			
	Если фрм<>Ложь Тогда
		Попытка
			фрм.ДопРасчетыПриЗагрузке(Документ1С, Новый Структура("СтруктураФайла, СоставПакета, Кэш",СтруктураФайла,СоставПакета,МестныйКэш));
		Исключение
			фрм.ДопРасчетыПриЗагрузке(Документ1С);//Вставлено исключение для совместимости со старой версией
		КонецПопытки
	КонецЕсли;
	Возврат Документ1С;
КонецФункции
Функция СоздатьДокументИзСтруктуры(Ини, СтруктураДокОбъект, Документ1С = Неопределено)
	// Функция заполняет реквизиты документа 1С из одноименных полей структуры	
	Если Документ1С = Неопределено Тогда
		ДокОбъект = Документы[ТипДокумента].СоздатьДокумент();
	Иначе
		ДокОбъект = Документ1С.ПолучитьОбъект();
	КонецЕсли;
	//ДокОбъект.Дата = ТекущаяДата();
	Для Каждого Элемент Из СтруктураДокОбъект Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			//Если Элемент.Ключ = "Дата" и Документ1С <> Неопределено Тогда          // если перезаполняем документ, то дату не меняем
			//	Продолжить;
			//КонецЕсли;
			ДокОбъект[Элемент.Ключ] = Элемент.Значение;
		Иначе
			ДокОбъект[Элемент.Ключ].Очистить();
			Для Каждого Строка Из Элемент.Значение Цикл
				НоваяСтрока = ДокОбъект[Элемент.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Попытка
		ДокОбъект.Записать();
		Сообщить(?(Документ1С = Неопределено, "Создан документ ", "Перезаполнен документ ") + строка(ДокОбъект));
		Возврат ДокОбъект.Ссылка;
	Исключение
		Сообщить("Не удалось записать документ. "+ОписаниеОшибки());
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ЗаполнитьЗначениеРеквизитаИзФайла(ЭлементИни, СтруктураФайла, Контекст, МестныйКэш) Экспорт
	// Функция заполняет реквизит в структуре документа 1С значением из файла
	ЗнПер=ЭлементИни.Значение;
	ЗначениеРеквизита = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ЭлементИни.Данные, СтруктураФайла);
	
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Если ЭлементИни.Свойство("Тип") Тогда
			Если ЭлементИни.Тип="Дата" и ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4),Сред(ЗначениеРеквизита,4,2),Лев(ЗначениеРеквизита,2));
			КонецЕсли;
		КонецЕсли;
		Контекст.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	Иначе // если нет ссылка на реквизит, кладем значение в саму структуру ини, чтобы потом это значение можно было использовать при расчете других 
		ЭлементИни.Значение = ЗначениеРеквизита;
	КонецЕсли;
	Возврат ЗначениеРеквизита;
КонецФункции
&НаКлиенте
Функция ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, ПутьРеквизита, Контекст, Переменные) Экспорт
	// Функция заполняет реквизит в структуре документа 1С значением	
	Если Найти(ПутьРеквизита,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ПутьРеквизита,Найти(ПутьРеквизита,".")+1);
		Контекст.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	ИначеЕсли Найти(ПутьРеквизита,"'") = 0 и Найти(ПутьРеквизита,".") = 0 Тогда
		Переменные.Вставить(ПутьРеквизита, ЗначениеРеквизита);
	КонецЕсли;
КонецФункции
//&НаСервереБезКонтекста
Функция ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, ПутьРеквизита, Контекст, Переменные) Экспорт
	// Функция заполняет реквизит в структуре документа 1С значением	
	Если Найти(ПутьРеквизита,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ПутьРеквизита,Найти(ПутьРеквизита,".")+1);
		Контекст.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	ИначеЕсли Найти(ПутьРеквизита,"'") = 0 Тогда
		Переменные.Вставить(ПутьРеквизита, ЗначениеРеквизита);
	КонецЕсли;
КонецФункции

Функция СообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	// Возвращает имя реквизита из значения в файле настроек	
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции
функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов		
	МассивЭлементов = Новый Массив();
	Если Строка<>"" Тогда
		ЕстьРазделитель = Истина;
		Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
			Если Найти(Строка,Разделитель)=0 Тогда
				Прервать;
			КонецЕсли;
			Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
			МассивЭлементов.Добавить(Элемент);
			Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
		КонецЦикла;
		МассивЭлементов.Добавить(Строка);
	КонецЕсли;
	Возврат МассивЭлементов;
КонецФункции
&НаКлиенте
Функция РассчитатьЗначение(Параметр,Контекст,Кэш) Экспорт //Контекст{ини,Документ,СтрТабл}
	// Функция рассчитывает	значение параметра из файла настроек
	// Для функций и строк возвращает результат, для других значений вызывает расчет на сервере
	Если Найти(Параметр,"[")>0 или Найти(Параметр,"'")>0 или Найти(Параметр,"{")>0 Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Попытка
			ЗнПер=Контекст.Ини[Параметр].Значение;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Документ = Неопределено;
		Контекст.Свойство("Документ", Документ);
		СтрТабл = Неопределено;
		Контекст.Свойство("СтрТабл", СтрТабл);
		Переменные = Неопределено;
		Контекст.Свойство("Переменные", Переменные);
		Попытка
			Если Найти(ИмяФункции, ".") Тогда
				Результат=вычислить(Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2));
			Иначе
				фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","", Кэш);
				Результат=вычислить("фрм."+ИмяФункции+"(Контекст)");
			КонецЕсли;	
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить(Ошибка+ "(ошибка при вычислении функции """+Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2)+""")");
		КонецПопытки;	
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
	Иначе
		возврат РассчитатьЗначениеНаСервере(Параметр,Контекст);
	КонецЕсли	
КонецФункции
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст) Экспорт
	// Функция рассчитывает	значение параметра из файла настроек на сервере	
	Если Найти(Параметр,"[")>0 или Найти(Параметр,"'")>0 или Найти(Параметр,"{")>0 Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Попытка
			ЗнПер=Контекст.Ини[Параметр].Значение;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(ЗнПер,"{")=1 Тогда   // функции из глобальных серверных модулей 1С
		Документ = Неопределено;
		Контекст.Свойство("Документ", Документ);
		СтрТабл = Неопределено;
		Контекст.Свойство("СтрТабл", СтрТабл);
		Переменные = Неопределено;
		Контекст.Свойство("Переменные", Переменные);
		Попытка
			Результат = вычислить(Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2));
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить(Ошибка+ "(ошибка при вычислении функции """+Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2)+""")");
		КонецПопытки;
		Возврат Результат;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на объект (другую переменную)
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Объект1С=РассчитатьЗначениеНаСервере(СтрОбъекта,Контекст);
		Если Найти(ЗнПер,".")>0 Тогда
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			Если Найти(строка(Объект1С),"Массив")>0 Тогда //это строка табличной части
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
					Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Возврат СтруктураСтрокиТЧ;
						КонецЦикла;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Формат") Тогда // Надо установить отбор
				Объект1С = Формат(Объект1С,	Контекст.Ини[Параметр].Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли Найти(ЗнПер,"Справочник")=1 Тогда	// ссылка на справочник
		ИмяРек=сред(ЗнПер,12);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Отбор = Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			Выборка = Справочники[ИмяРек].Выбрать(,,Отбор);
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			возврат Справочники[ИмяРек];
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"Документ")=1 Тогда // ссылка на документ	
		ИмяРек=сред(ЗнПер,10);
		возврат Контекст.Документ;
	ИначеЕсли Найти(ЗнПер,"Константа")=1 Тогда	// константа
		ИмяРек=сред(ЗнПер,11);
		возврат Константы[ИмяРек].Получить();
	ИначеЕсли Найти(ЗнПер,"Перечисление")=1 Тогда	// значение перечисления
		ИмяРек=сред(ЗнПер,14);
		возврат Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗнПер,"РегистрыСведений")=1 Тогда	// ссылка на регистр сведений
		ИмяРек=сред(ЗнПер,18);
		Если Не Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Возврат Неопределено;
		КонецЕсли;
		Отбор = Новый Структура;
		Если Контекст.Ини[Параметр].Свойство("СрезПоследних") Тогда
			
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			ДатаСреза = РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].СрезПоследних, Контекст);
			НаборЗаписей = РегистрыСведений[ИмяРек].СрезПоследних(ДатаСреза,Отбор);
		Иначе
			НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
			
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				
				НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			НаборЗаписей.Прочитать();
		КонецЕсли;
		Если НаборЗаписей.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запись = НаборЗаписей.Получить(0);
		Результат = Новый Структура();
		Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
		Для Каждого Ресурс Из Ресурсы Цикл 
			Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
		КонецЦикла;
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"'")>0 Тогда	 // строка
		возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
	ИначеЕсли Найти(ЗнПер,"'") = 0 и Найти(ЗнПер,".") = 0 и Контекст.Переменные.Свойство(ЗнПер) Тогда
		возврат Контекст.Переменные[ЗнПер];
	Иначе
		возврат Неопределено;
	КонецЕсли	
КонецФункции
//&НаСервереБезКонтекста
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	// Процедура копирует структуру	
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = Тип("Массив") Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры