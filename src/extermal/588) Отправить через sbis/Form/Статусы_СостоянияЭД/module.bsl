&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции

&НаКлиенте
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	// проставляет статусы по идентификаторам пакетов при получении списка изменений
	проверенныеНастройкиЭД=новый массив;
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	КэшПоКонтрагентам = Новый Структура;
	Для Каждого СоставПакета Из МассивДокументов Цикл
		// Т.к. при отправке проставили на каждом документе 1С Ид пакета и вложения, ищем все документы, у которых идентификатор начинается на Ид пакета
		Если СоставПакета.Свойство("Идентификатор") и СоставПакета.Свойство("Состояние") Тогда
			Если СоставПакета.Свойство("Редакция") и СоставПакета.Редакция[0].Актуален = "Нет" Тогда  // на документах 1С проставляем статусы только для актуальных редакций
				Продолжить;
			КонецЕсли;
			ТаблицаДокументов1С =фрм.ДокументыПоИдПакета(СоставПакета.Идентификатор);
			Для Каждого Строка Из ТаблицаДокументов1С Цикл
				если фрм.ДобавитьСвойствоОбъекта("ДокументСБИС_Статус", СоставПакета.Состояние.Название, Строка, КаталогНастроек) тогда
					ДублироватьСостояние(СоставПакета.Состояние.Название, Строка, проверенныеНастройкиЭД);
				конецесли;
				фрм.ИзменитьРеквизитыДокумента1С(Строка, СоставПакета,Ини);
			КонецЦикла;
		КонецЕсли;
		фрм.ЗаполнитьСпособОбменаКонтрагента(СоставПакета,Ини,КэшПоКонтрагентам);
	КонецЦикла
КонецПроцедуры
&НаКлиенте
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,Ини,КаталогНастроек) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	проверенныеНастройкиЭД=новый массив;
	
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		ЗаписатьПараметрыДокументаСБИС(Элемент.СтруктураСвойств,Элемент.Документ1С,Ини,КаталогНастроек, проверенныеНастройкиЭД);
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция ЗаписатьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,проверенныеНастройкиЭД=неопределено) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	если проверенныеНастройкиЭД=неопределено тогда
		проверенныеНастройкиЭД=новый массив;
	конецесли;
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		ОбновлятьЗначение= фрм.ДобавитьСвойствоОбъекта(Свойство.Ключ,Свойство.Значение,ДокументСсылка,КаталогНастроек,Истина);
		если Свойство.Ключ= "ДокументСБИС_Статус" и ОбновлятьЗначение тогда
			ДублироватьСостояние(Свойство.Значение, ДокументСсылка, проверенныеНастройкиЭД);
		конецесли;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек) Экспорт
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	фрм.УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек);
	
	УдалитьСостояниеЭД(ДокументСсылка);
КонецФункции
&НаКлиенте
Функция НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек) Экспорт
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	Возврат фрм.НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек);
КонецФункции
&НаКлиенте
Функция ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек,ИмяСвойства,Ини) Экспорт
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	Возврат фрм.ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек,ИмяСвойства,Ини);
КонецФункции
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Ини, КаталогНастроек) Экспорт	
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Ини, КаталогНастроек);
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Ини, КаталогНастроек) Экспорт	
	фрм=сбисПолучитьФорму("Статусы_Регистры");
	фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Ини, КаталогНастроек);
КонецПроцедуры

//&НаСервереБезКонтекста
функция ДублироватьСостояние(СтатусЭД, ДокСсылка,проверенныеНастройкиЭД)
	если Метаданные.РегистрыСведений.Найти("СостоянияЭД")<>Неопределено тогда
		если Метаданные.справочники.Найти("СоглашенияОбИспользованииЭД")<>Неопределено тогда
			проверитьНастройкиЭДО(ДокСсылка, проверенныеНастройкиЭД);
		конецесли;
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ДокСсылка);
		НаборЗаписей.Прочитать();
		если НаборЗаписей.Количество()>0 тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		иначе
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект=ДокСсылка;
		конецесли;
		Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			статусФайла=перечисления.СтатусыЭД.ПереданОператору;
		ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ПригласитьКОбмену;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			статусФайла=перечисления.СтатусыЭД.ОтправленоИзвещение;
		ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			статусФайла=перечисления.СтатусыЭД.Отправлен;
		ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			статусФайла=перечисления.СтатусыЭД.ОшибкаПередачи;
		ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.НаУтверждении;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			статусФайла=перечисления.СтатусыЭД.Доставлен;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Отклонен;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.Отклонен;
			статусФайла=перечисления.СтатусыЭД.Отклонен;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОбменЗавершен;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
			статусФайла=перечисления.СтатусыЭД.Утвержден;
		ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 Тогда                        // Удален контрагентом
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Аннулирован;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			статусФайла=перечисления.СтатусыЭД.Аннулирован;
		ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Аннулирован;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.Отклонен;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			статусФайла=перечисления.СтатусыЭД.Аннулирован;
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.НеСформирован;
			НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			статусФайла=перечисления.СтатусыЭД.НеСформирован;
		КонецЕсли;
		
		если значениеЗаполнено(НоваяЗаписьНабора.ЭлектронныйДокумент) тогда
			ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокумент.ДатаИзмененияСтатусаЭД=	текущаядата();
			ЭлектронныйДокумент.СтатусЭД			=	статусФайла;
			ЭлектронныйДокумент.Записать();
		иначе
			ЭлектронныйДокумент=Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
			ЭлектронныйДокумент.Наименование	=	"СБИС";
			если типзнч(ДокСсылка)=тип("ДокументСсылка.СчетФактураВыданный") или типзнч(ДокСсылка)=тип("ДокументСсылка.СчетФактураПолученный") тогда
				ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
			//	ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			иначеесли типзнч(ДокСсылка)=тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				если ДокСсылка.товары.количество()>0 тогда
					ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
				иначе
					ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;
				конецесли
			// ЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			конецесли;
			ЭлектронныйДокумент.ВладелецФайла	=	ДокСсылка;
			ЭлектронныйДокумент.ДатаИзмененияСтатусаЭД=текущаядата();
			ЭлектронныйДокумент.СтатусЭД		=	статусФайла;
			ЭлектронныйДокумент.Описание		=	"обмен через СБИС";
			ЭлектронныйДокумент.Расширение		=	"XML";
			ЭлектронныйДокумент.Записать();
			НоваяЗаписьНабора.ЭлектронныйДокумент=ЭлектронныйДокумент.Ссылка;
		конецесли;
		
		попытка
			НаборЗаписей.Записать();
		исключение // Возможно по данному типу документа не предусмотрено ведение состояниеЭД
//			Сообщить(ОписаниеОшибки());
		конецпопытки;
	конецесли;
конецфункции

//&НаСервереБезКонтекста
функция	проверитьНастройкиЭДО(ДокСсылка, проверенныеНастройкиЭД)
	параметрыЭД=новый структура("организация, Контрагент,договор");
	Соглашение = неопределено;
	если докСсылка.Метаданные().реквизиты.найти("Организация")<> неопределено тогда 
		параметрыЭД.организация=ДокСсылка.Организация;
	иначе
		если докСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
				И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Организация")<> неопределено тогда 
			параметрыЭД.организация=ДокСсылка.ДокументОснование.Организация;
		конецесли;
	конецесли;
	если ДокСсылка.Метаданные().реквизиты.найти("Контрагент")<> неопределено тогда 
		параметрыЭД.Контрагент=ДокСсылка.Контрагент;
	иначе
		если ДокСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
				И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Контрагент")<> неопределено тогда 
			параметрыЭД.Контрагент=ДокСсылка.ДокументОснование.Контрагент;
		конецесли;
	конецесли;
	если ДокСсылка.Метаданные().реквизиты.найти("Договор")<> неопределено тогда 
		параметрыЭД.договор=ДокСсылка.Договор;
	иначеесли ДокСсылка.Метаданные().реквизиты.найти("ДоговорКонтрагента")<> неопределено тогда 
 		параметрыЭД.договор=ДокСсылка.ДоговорКонтрагента;
	иначе
		если ДокСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
				И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Договор")<> неопределено тогда 
			параметрыЭД.договор=ДокСсылка.ДокументОснование.Договор;
		конецесли;
	конецесли;
	Найдено=ложь;
	для каждого проверенный из проверенныеНастройкиЭД цикл
		если проверенный.Организация= параметрыЭД.Организация и проверенный.Контрагент= параметрыЭД.Контрагент
				И проверенный.Договор= параметрыЭД.Договор тогда
			Найдено=истина;
			прервать;
		конецесли;
	конеццикла;
	если не Найдено  тогда
		проверенныеНастройкиЭД.добавить(параметрыЭД);
		если значениеЗаполнено(параметрыЭД.организация) И значениеЗаполнено(параметрыЭД.Контрагент) тогда
			УстановитьПривилегированныйРежим(Истина); // Получаем настройки ЭДО безусловно
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",параметрыЭД.Организация);
			Запрос.УстановитьПараметр("Контрагент", параметрыЭД.Контрагент);
			если значениеЗаполнено(параметрыЭД.договор) И метаданные.справочники.СоглашенияОбИспользованииЭД.реквизиты.найти("ДоговорКонтрагента")<> неопределено тогда 
				Запрос.Текст ="ВЫБРАТЬ
				|	СоглашенияОбИспользованииЭД.Ссылка
				|ИЗ
				|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
				|ГДЕ
				|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
				|	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И СоглашенияОбИспользованииЭД.Организация = &Организация
				|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Запрос.УстановитьПараметр("ДоговорКонтрагента", параметрыЭД.Договор);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				Соглашение=Выборка.Ссылка;
			конецесли;
			если не значениеЗаполнено(соглашение) тогда
				Запрос.Текст ="ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭД.Ссылка
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
					|ГДЕ
					|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
					|	И СоглашенияОбИспользованииЭД.Организация = &Организация
					|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				соглашение=Выборка.Ссылка;
			КонецЕсли;
			если значениеЗаполнено(соглашение) тогда
				ИскомоеСоглашение = соглашение.ПолучитьОбъект();
				если не значениеЗаполнено(ИскомоеСоглашение.Комментарий) тогда
					ИскомоеСоглашение.Комментарий	=	"СБИС";
				конецесли;
				ЗаписатьОбъект = Ложь;
			иначе // создать новое
				ИскомоеСоглашение= Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				ИскомоеСоглашение.наименование	=	"СБИС";
				ИскомоеСоглашение.Комментарий	=	"СБИС";
				ИскомоеСоглашение.Организация	=	параметрыЭД.Организация;
				ИскомоеСоглашение.Контрагент	=	параметрыЭД.Контрагент;
				ИскомоеСоглашение.СтатусСоглашения= Перечисления.СтатусыСоглашенийЭД.Действует;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("ДоговорКонтрагента")<> неопределено тогда
					ИскомоеСоглашение.ДоговорКонтрагента=параметрыЭД.Договор;
				конецесли;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("СостояниеСоглашения")<> неопределено тогда
					ИскомоеСоглашение.СостояниеСоглашения=Перечисления.СостоянияСоглашенийЭД.Действует;
				конецесли;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("СтатусПодключения")<> неопределено тогда
					ИскомоеСоглашение.СтатусПодключения= Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
				конецесли;
				ЗаписатьОбъект = истина;
			конецесли;
			
			если ИскомоеСоглашение.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
				ИскомоеСоглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				ЗаписатьОбъект = истина;
			конецесли;
			
			если ИскомоеСоглашение.Метаданные().реквизиты.найти("ПрофильНастроекЭДО")<> неопределено тогда 
				если не (значениеЗаполнено(ИскомоеСоглашение.ПрофильНастроекЭДО) и ИскомоеСоглашение.ПрофильНастроекЭДО.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском) тогда
					отбор=новый структура("наименование,Организация,СпособОбменаЭД","СБИС",параметрыЭД.Организация,Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
					Запрос.Текст ="ВЫБРАТЬ
						|	профили.Ссылка
						|ИЗ
						|	Справочник.ПрофилиНастроекЭДО КАК профили
						|ГДЕ
						|	профили.наименование = &наименование
						|	И профили.Организация = &Организация
						|	И профили.СпособОбменаЭД = &СпособОбменаЭД 
						|	И НЕ профили.ПометкаУдаления";
					Запрос.УстановитьПараметр("наименование", отбор.наименование);
					Запрос.УстановитьПараметр("СпособОбменаЭД", отбор.СпособОбменаЭД);
					Выборка = Запрос.Выполнить().Выбрать();

					если Выборка.Следующий() тогда
						профильСБИС= Выборка.Ссылка;
					иначе
						профильСБИС=Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
						заполнитьЗначенияСвойств(профильСБИС,отбор);
						//для каждого ЭлементПеречисления Из Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления цикл
						//	НоваяСтрока = профильСБИС.ИсходящиеДокументы.Добавить();
						//	НоваяСтрока.ИсходящийДокумент = ЭлементПеречисления;
						//	перечисления.ВидыЭД.(ЭлементПеречисления.имя)
						//	НоваяСтрока.Формировать       = истина;
						//конеццикла;
						профильСБИС.Записать();
					конецесли;
					ИскомоеСоглашение.ПрофильНастроекЭДО=профильСБИС.Ссылка;
					ЗаписатьОбъект = истина;
				конецесли;
			конецесли;
			
			ТОРГ12Продавец = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Продавец, "ИсходящийДокумент");
			Если ТОРГ12Продавец = Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент       = Перечисления.ВидыЭД.ТОРГ12Продавец;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					НоваяСтрока.СпособОбменаЭД		= Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				конецесли;
				НоваяСтрока.Формировать             = истина;
				ЗаписатьОбъект = Истина;
			иначе
				если не ТОРГ12Продавец.Формировать тогда
					ТОРГ12Продавец.Формировать=Истина;
					ЗаписатьОбъект = Истина;
				конецесли;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					если ТОРГ12Продавец.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
						ТОРГ12Продавец.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
						ЗаписатьОбъект = Истина;
					конецесли;
				конецесли;
			КонецЕсли;
			
			ТОРГ12Покупатель = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Покупатель,"ИсходящийДокумент");
			Если ТОРГ12Покупатель = Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент       = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					НоваяСтрока.СпособОбменаЭД		= Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				конецесли;
				НоваяСтрока.Формировать             = истина;
				ЗаписатьОбъект = Истина;
			иначе
				если не ТОРГ12Покупатель.Формировать тогда
					ТОРГ12Покупатель.Формировать=Истина;
					ЗаписатьОбъект = Истина;
				конецесли;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					если ТОРГ12Покупатель.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
						ТОРГ12Покупатель.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
						ЗаписатьОбъект = Истина;
					конецесли;
				конецесли;
			КонецЕсли;
			
			АктИсполнитель = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктИсполнитель, "ИсходящийДокумент");
			Если АктИсполнитель = Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент       = Перечисления.ВидыЭД.АктИсполнитель;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					НоваяСтрока.СпособОбменаЭД		= Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				конецесли;
				НоваяСтрока.Формировать             = истина;
				ЗаписатьОбъект = Истина;
			иначе
				если не АктИсполнитель.Формировать тогда
					АктИсполнитель.Формировать=Истина;
					ЗаписатьОбъект = Истина;
				конецесли;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					если АктИсполнитель.СпособОбменаЭД	<> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
						АктИсполнитель.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
						ЗаписатьОбъект = Истина;
					конецесли;
				конецесли;
			КонецЕсли;
			
			АктЗаказчик = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктЗаказчик, "ИсходящийДокумент");
			Если АктЗаказчик = Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент       = Перечисления.ВидыЭД.АктЗаказчик;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					НоваяСтрока.СпособОбменаЭД		= Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				конецесли;
				НоваяСтрока.Формировать             = истина;
				ЗаписатьОбъект = Истина;
			иначе
				если не АктЗаказчик.Формировать тогда
					АктЗаказчик.Формировать=Истина;
					ЗаписатьОбъект = Истина;
				конецесли;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					если АктЗаказчик.СпособОбменаЭД	<> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
						АктЗаказчик.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
						ЗаписатьОбъект = Истина;
					конецесли;
				конецесли;
			КонецЕсли;
			
			счетФактура = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.СчетФактура, "ИсходящийДокумент");
			Если счетФактура = Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент       = Перечисления.ВидыЭД.СчетФактура;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					НоваяСтрока.СпособОбменаЭД		= Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
				конецесли;
				НоваяСтрока.Формировать             = истина;
				ЗаписатьОбъект = Истина;
			иначе
				если не счетФактура.Формировать тогда
					счетФактура.Формировать=Истина;
					ЗаписатьОбъект = Истина;
				конецесли;
				если ИскомоеСоглашение.Метаданные().ТабличныеЧасти.ИсходящиеДокументы.Реквизиты.Найти("СпособОбменаЭД")<> неопределено тогда
					если счетФактура.СпособОбменаЭД	<> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском тогда
						счетФактура.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
						ЗаписатьОбъект = Истина;
					конецесли;
				конецесли;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				ИскомоеСоглашение.Записать();
			КонецЕсли;
		конецесли
	конецесли
конецфункции

//&НаСервереБезКонтекста
функция УдалитьСостояниеЭД(ДокСсылка)
	если Метаданные.РегистрыСведений.Найти("СостоянияЭД")<>Неопределено тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ДокСсылка);
		НаборЗаписей.Записать();
	конецесли;
конецфункции