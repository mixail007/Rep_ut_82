&НаКлиенте
Перем МестныйКэш Экспорт;
// функции для совместимости кода 
&НаКлиенте 
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Функция сбисПолучитьПодчиненныеЭлементы(Элемент, ВидЭлементов)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы;
	КонецЕсли;
	Возврат Элемент[ВидЭлементов];
КонецФункции
&НаКлиенте
Процедура сбисУстановитьСвойствоЭлементаФормы(ЭлементФормы, Значение)
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		ЭлементФормы.Заголовок = Значение;	
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		ЭлементФормы.Текст = Значение;	
	КонецЕсли 		
КонецПроцедуры
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
//------------------------------------------------------

Функция ПолучитьРеквизитМетаданныхОбъекта(Объект1С, ИмяРеквизита) Экспорт
	Возврат Объект1С.Метаданные()[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, Кэш) Экспорт
	// Функция готовит структуру пакета электронных документов по комплекту документов 1С для просмотра и отправки контрагентам.
	// Т.к. по одной строке документов 1С может быть сформировано несколько комплектов (оказание услуги), то структуры пакетов добавляются в массив.
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно"); 
	//ВремКаталог = КаталогВременныхФайлов();
	МассивПакетов = Новый Массив;
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	ТипПакета = "ДокОтгрИсх";
	ВнешниеФайлы = Новый Массив;
	НеЗапускатьВДокументооборот = Ложь;
	Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
		МассивТипов = РазбитьСтрокуВМассив(РассчитатьЗначение("РеестрСБИС_Тип",Кэш.Ини[ИниТекущегоРеестра],Кэш),",");
		Если МассивТипов.Количество()>0 Тогда
			ТипПакета = МассивТипов[0];
		КонецЕсли;
		НеЗапускатьВДокументооборот = РассчитатьЗначение("НеЗапускатьВДокументооборот",Кэш.Ини[ИниТекущегоРеестра],Кэш);
		Если Кэш.Ини[ИниТекущегоРеестра].Свойство("КаталогОбмена") Тогда
			Кэш.ФормаОтправки = сбисПолучитьФорму("ИнтеграцияКаталог");
			Кэш.Парам.КаталогОбмена = Кэш.ОбщиеФункции.РассчитатьЗначение("КаталогОбмена",Кэш.Ини[ИниТекущегоРеестра],Кэш)
		Иначе
			Кэш.ФормаОтправки = Кэш.Интеграция;
		КонецЕсли;
	КонецЕсли;
	// выбираем нужные файлы настроек для выгрузки пакета
	СоответствиеДокументДанные = Новый Соответствие;
	Для каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		ФайлНастроек = Элемент.Представление;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда   // ссылка на внешний файл
			ВнешниеФайлы.Добавить(Документ);
		Иначе
			// Определяем ини для выгрузки текущего вложения			
			ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
			ИниДокумента = ИмяДокумента;
			Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
				Если Кэш.Ини[ИниТекущегоРеестра].Свойство(ИниДокумента) Тогда
					ИниДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение(ИмяДокумента,Кэш.Ини[ИниТекущегоРеестра],Кэш);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлНастроек) Тогда
				ИниДокумента = ФайлНастроек;
			КонецЕсли; 
			
			Если Кэш.ини.Свойство(ИниДокумента) Тогда
				Кэш.ини[ИниДокумента].Вставить("Формат2016", Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.Формат2016, Кэш.Парам.Формат2016));
				СоответствиеДокументДанные.Вставить(Документ, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,Кэш.ини[ИниДокумента]));
			Иначе // Если нет инишки для одного из документов пакета, то весь пакет не формируем
				Сообщить("Отсутствует настройка для формирования документа "+ИмяДокумента);
				Если Кэш.Свойство("РезультатОтправки") Тогда
					Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
				КонецЕсли;
				Возврат Новый Массив;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;	
	
	// получаем на сервере все данные по документам пакета по файлам настроек
	Кэш.ОбщиеФункции.ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, СтрокаСпискаДокументов.СоставПакета);  // передаем СоставПакета, так как в нем нужный порядок документов
	Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	// формируем файлы по документам 1С
	Для каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) <> Тип("Строка") Тогда
			ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
			Контекст.Вставить("Документ", Документ);
			Контекст.Вставить("ДокументДанные", СоответствиеДокументДанные.Получить(Документ).ДокументДанные);
			фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
			Если Не фрм.ПрочитатьДокумент(Кэш,Контекст) Тогда
				Возврат Новый Массив;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// добавляем в первый пакет внешние файлы
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Для Каждого ВнешнийФайлПуть из ВнешниеФайлы Цикл
			ВнешнийФайл = Новый Файл(ВнешнийФайлПуть);
			Если ВнешнийФайл.Существует() Тогда
				Вложение = Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",ВнешнийФайлПуть,ВнешнийФайл.Имя,ВнешнийФайл.Имя);
				Контекст.МассивПакетов[0].Вложение.Добавить(Вложение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	счПакетов = 0;
	Для Каждого Пакет Из Контекст.МассивПакетов Цикл
		ПолныйСоставПакета = Новый Структура;
		Если Пакет.Свойство("Конверт") Тогда
			ПолныйСоставПакета = Пакет.Конверт;	
		КонецЕсли;
		Если Пакет.Свойство("Ошибка") Тогда
			ПолныйСоставПакета.Вставить("Ошибка",Пакет.Ошибка);	
		КонецЕсли;
		МассивВложений = Новый Массив;
		Для Каждого Вложение Из Пакет.Вложение Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("Отправитель", ?(Вложение.Свойство("Отправитель"),Вложение.Отправитель, "Отправитель"));
			СтруктураВложения.Вставить("Получатель", ?(Вложение.Свойство("Получатель"),Вложение.Получатель, "Получатель"));
			СтруктураВложения.Вставить("Ответственный", ?(Вложение.Свойство("Ответственный"),Вложение.Ответственный, Новый Структура));
			СтруктураВложения.Вставить("Подразделение", ?(Вложение.Свойство("Подразделение"),Вложение.Подразделение, Новый Структура));
			СтруктураВложения.Вставить("Регламент", ?(Вложение.Свойство("Регламент"),Вложение.Регламент, Новый Структура));
			СтруктураВложения.Вставить("ДокументОснование", ?(Вложение.Свойство("ДокументОснование"),Вложение.ДокументОснование, Новый Массив));
			СтруктураВложения.Вставить("Название", ?(Вложение.Свойство("Название"),Вложение.Название, ""));
			СтруктураВложения.Вставить("Тип", ?(Вложение.Свойство("Тип"),Вложение.Тип, ""));
			СтруктураВложения.Вставить("ПодТип", ?(Вложение.Свойство("ПодТип"),Вложение.ПодТип, ""));
			СтруктураВложения.Вставить("ВерсияФормата", ?(Вложение.Свойство("ВерсияФормата"),Вложение.ВерсияФормата, ""));
			СтруктураВложения.Вставить("ПодВерсияФормата", ?(Вложение.Свойство("ПодВерсияФормата"),Вложение.ПодВерсияФормата, ""));
			СтруктураВложения.Вставить("Дата", ?(Вложение.Свойство("Дата"),Вложение.Дата, ""));
			СтруктураВложения.Вставить("Номер", ?(Вложение.Свойство("Номер"),Вложение.Номер, ""));
			СтруктураВложения.Вставить("Сумма", ?(Вложение.Свойство("Сумма"),Вложение.Сумма, ""));
			СтруктураВложения.Вставить("Примечание", ?(Вложение.Свойство("Примечание"),Вложение.Примечание, ""));
			СтруктураВложения.Вставить("Сертификат", ?(Вложение.Свойство("Сертификат"),Вложение.Сертификат, Новый Структура));
			Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
				СтруктураВложения.Вставить("НоменклатураКодКонтрагента", Вложение.НоменклатураКодКонтрагента);
			КонецЕсли;
			Документы1С = Новый СписокЗначений;
			Документы1С.Добавить(?(Вложение.Свойство("Документ1С"),Вложение.Документ1С, СтрокаСпискаДокументов.СоставПакета[0].Значение));
			СтруктураВложения.Вставить("Документы1С", Документы1С); 
			Если Вложение.Свойство("ИмяФайла") Тогда   // если добавляли в пакет внешний файл. Это вложение не может быть первым, т.к. с первого берутся сведения об отправителе, получателе
				СтруктураВложения.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
				СтруктураВложения.Вставить("ИмяФайла", Вложение.ИмяФайла);
				СтруктураВложения.Вставить("XMLДокумента", ?(Вложение.Свойство("XMLДокумента"),Вложение.XMLДокумента,""));
				СтруктураВложения.Вставить("СтруктураФайла", ?(Вложение.Свойство("СтруктураДокумента"),Вложение.СтруктураДокумента, Новый Структура));
			Иначе // формируем xml документов
				СтруктураФайла = Вложение["СтруктураДокумента"];
				СтруктураВложения.Вставить("СтруктураФайла", СтруктураФайла);
				ШаблонXML = сбисПолучитьXMLФайлаИзСтруктуры(СтруктураВложения,Кэш.XSLT);
				СтруктураВложения.Вставить("XMLДокумента", ШаблонXML);
			КонецЕсли;
			МассивВложений.Добавить(СтруктураВложения);
		КонецЦикла;
		Если Кэш.ДопВложение.Количество()>0 Тогда
			Для Каждого Вложение Из Кэш.ДопВложение Цикл
				МассивВложений.Добавить(Вложение);
			Конеццикла;
		КонецЕсли;
		счПакетов = счПакетов+1;
		Если МассивВложений.Количество()>0 Тогда
			ПолныйСоставПакета.Вставить("Вложение", МассивВложений);
			Если НЕ Пакет.Свойство("Конверт") Тогда  // если нет структуры конверта, то берем все с первого вложения
				Если ТипЗнч(МассивВложений[0].Отправитель) = Тип("Структура") Тогда
					ПолныйСоставПакета.Вставить("НашаОрганизация", МассивВложений[0].Отправитель);
				Иначе
					ПолныйСоставПакета.Вставить("НашаОрганизация", МассивВложений[0].СтруктураФайла.Файл.Документ[МассивВложений[0].Отправитель]);
				КонецЕсли;
				Если ТипЗнч(МассивВложений[0].Получатель) = Тип("Структура") Тогда
					СтрПолучатель = МассивВложений[0].Получатель;
				Иначе
					СтрПолучатель = МассивВложений[0].СтруктураФайла.Файл.Документ[МассивВложений[0].Получатель];	
				КонецЕсли;
				// Если грузополучатель является филиалом получателя, то получаетелем пакета ставим грузополучателя
				// Удалить, когда на онлайне появится данный функционал
				Если МассивВложений[0].Свойство("СтруктураФайла") и МассивВложений[0].СтруктураФайла.Файл.Документ.Свойство("Грузополучатель") Тогда 
					СтрГрузополучатель = МассивВложений[0].СтруктураФайла.Файл.Документ.Грузополучатель;
					Если СтрГрузополучатель.Свойство("СвЮЛ") и СтрГрузополучатель.СвЮЛ.Свойство("ИНН") и СтрПолучатель.Свойство("СвЮЛ") и СтрГрузополучатель.СвЮЛ.ИНН = СтрПолучатель.СвЮЛ.ИНН и СтрГрузополучатель.СвЮЛ.КПП <> СтрПолучатель.СвЮЛ.КПП Тогда
						//Попытка
						//	оГрузополучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрГрузополучатель);
						//	оПолучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрПолучатель);
						//	Если оПолучатель.Идентификатор = оГрузополучатель.Идентификатор Тогда
						СтрПолучатель = СтрГрузополучатель;
						//	КонецЕсли;
						//Исключение
						//КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ПолныйСоставПакета.Вставить("Контрагент", СтрПолучатель);
				ПолныйСоставПакета.Вставить("Ответственный", МассивВложений[0].Ответственный);
				ПолныйСоставПакета.Вставить("Подразделение", МассивВложений[0].Подразделение);	
				ПолныйСоставПакета.Вставить("Регламент", МассивВложений[0].Регламент);
				ПолныйСоставПакета.Вставить("Тип", ТипПакета);
				ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот", НеЗапускатьВДокументооборот);
				ПолныйСоставПакета.Вставить("ДокументОснование", МассивВложений[0].ДокументОснование);
				ПолныйСоставПакета.Вставить("Примечание", МассивВложений[0].Примечание);
				ПолныйСоставПакета.Вставить("Сертификат", МассивВложений[0].Сертификат);
				ОсновнойДокумент = СтрокаСпискаДокументов.СоставПакета[0].Значение;
				ИмяДокумента = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(ОсновнойДокумент, "Имя");
				ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",?(Пакет.Свойство("ПользовательскийИдентификатор"),Пакет.ПользовательскийИдентификатор,ИмяДокумента+":"+строка(ОсновнойДокумент.УникальныйИдентификатор())));
			КонецЕсли;
		Иначе
			// Сюда попадаем, если ПолучитьДанныеИзДокумента1С, а соответственно и ПрочитатьДокумент возвращает Истину при пустых табличных частях
			Сообщить("В документе "+строка(СтрокаСпискаДокументов.СоставПакета[0].Значение)+" не заполнены табличные части. Электронный документ не сформирован.");
			Продолжить;
		КонецЕсли;
		МассивПакетов.Добавить(ПолныйСоставПакета);
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции	
&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбис(СтрокаСпискаДокументов, Кэш) Экспорт
	// функция формирует структуру данных по пакету электронных документов, необходимую для его предварительного просмотра и загрузки в 1С
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	МассивВложений = Новый Массив;
	ВсеВыгрузилось = Истина;
	Контекст = Новый Структура;
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, Строка.Значение.Идентификатор);
		Если ПолныйСоставПакета = Ложь Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		сч = 0;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
				Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
					XMLФайла = Кэш.Интеграция.ПолучитьДанныеФайла(Кэш,Вложение.Файл.Ссылка);
					XMLИсходногоФайла = XMLФайла;
					// Вырезаем пространство имен, т.к. с ними не работает xslt
					//XMLФайла = УдалитьАтрибутXmlns(XMLФайла);
					XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""SFAKT""","");
					XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""OTORG12""","");
					XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""IAKTPRM""","");
					XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xs=""http://www.w3.org/2001/XMLSchema""","");
					XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""","");
					
					Попытка
						XMLФайла = сбисПолучитьXMLФайла(XMLФайла,Кэш.XSLT,Вложение);
					Исключение
						Ошибка = ОписаниеОшибки();
						XMLФайла = "";
					КонецПопытки;
					Если ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
						ПолныйСоставПакета.Вложение[сч].Вставить("XMLДокумента", XMLИсходногоФайла);
					Иначе
						ПолныйСоставПакета.Вложение[сч].Вставить("XMLДокумента", "");
					КонецЕсли;
					СтруктураФайла = Кэш.ОбщиеФункции.ЗаполнитьСтруктуруФайла(XMLФайла);
					ПолныйСоставПакета.Вложение[сч].Вставить("СтруктураФайла", СтруктураФайла);
					ДанныеДокумента1С = фрм.НайтиДокументы1СПоИдВложенияСБИС(ПолныйСоставПакета.Идентификатор, Вложение.Идентификатор, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
					ПолныйСоставПакета.Вложение[сч].Вставить("Документы1С", Новый СписокЗначений);
					ПолныйСоставПакета.Вложение[сч].Вставить("Документ1СПроведен");
					Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
						ПолныйСоставПакета.Вложение[сч].Документы1С=ДанныеДокумента1С.Ссылки;
						ПолныйСоставПакета.Вложение[сч].Документ1СПроведен=ДанныеДокумента1С.Проведен;
					КонецЕсли;
				Иначе
					МассивСлужебных.Добавить(сч);
				КонецЕсли;
				сч = сч+1;
			КонецЦикла;	
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			Сообщить("В пакете "+ПолныйСоставПакета.Название+" отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции	
&НаКлиенте
Функция УдалитьАтрибутXmlns(ТекстXML) Экспорт 
	Результат = ТекстXML;
	Пока Найти(Результат, "xmlns") > 0 Цикл
		НачалоАтрибута = Найти(Результат, "xmlns");
		ПозицияОткрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута), """");
		ПозицияЗакрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута + ПозицияОткрывающейКавычки), """");
		Результат = СтрЗаменить(Результат, Сред(Результат, НачалоАтрибута, ПозицияОткрывающейКавычки + ПозицияЗакрывающейКавычки), "");
	КонецЦикла;
	Возврат Результат;	
КонецФункции
Функция сбисПолучитьXMLФайла(знач ИсходныйXML,КэшXSLT,Вложение) Экспорт
	XMLФайла = ИсходныйXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(ИсходныйXML);
	Если Найти(ИсходныйXML, "encoding=""UTF-8""")>0 Тогда
		ТД.Записать(ИмяФайла, КодировкаТекста.UTF8);
	Иначе
		ТД.Записать(ИмяФайла, "windows-1251");
	КонецЕсли;
	
	Файл_Формат = СтрЗаменить(Вложение.Тип, " ", "");
	Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(Вложение.ВерсияФормата, ".", "_"), " ", "");
	//НГС
	ПодТип = ?(Вложение.Свойство("ПодТип"),СтрЗаменить(Вложение.ПодТип,"-",""), "");
	//КНГС
	XML = Новый ЗаписьXML();
	XML.УстановитьСтроку();
	Если ЗначениеЗаполнено(Файл_Формат) и КэшXSLT.Свойство(Файл_Формат+"_"+ПодТип+"_"+Файл_ВерсияФормата) Тогда
		ПреобразованиеXSL = Новый ПреобразованиеXSL();
		ПреобразованиеXSL.ЗагрузитьИзСтроки(КэшXSLT[Файл_Формат+"_"+ПодТип+"_"+Файл_ВерсияФормата]);
		ПреобразованиеXSL.ПреобразоватьИзФайла(ИмяФайла,XML);
		XMLФайла = XML.Закрыть();
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	Возврат XMLФайла;
КонецФункции
Функция сбисПолучитьXMLФайлаИзСтруктуры(Вложение,КэшXSLT) Экспорт
	СтруктураФайла = Вложение.СтруктураФайла;
	Файл_Формат = СтруктураФайла.Файл.Формат;
	Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".","_"), " ", "");
	ПодТип = ?(Вложение.Свойство("ПодТип"),Вложение.ПодТип, "");
	Если НЕ ЗначениеЗаполнено(ПодТип) Тогда    // на случай, если используется пользовательская настройка без указания подтипа вложения
		ПодТип = сбисПодтипПоУмолчанию(Файл_Формат);
	КонецЕсли;
	
	ИмяXSLT = Файл_Формат+"_"+ПодТип+"_"+Файл_ВерсияФормата;
	Возврат сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT(СтруктураФайла,КэшXSLT, ИмяXSLT);
КонецФункции
Функция сбисПодтипПоУмолчанию(Тип) Экспорт
	Если Тип = "ЭДОНакл" Тогда
		Возврат "1175004";
	ИначеЕсли Тип = "СчФктр" Тогда
		Возврат "1115101";
	ИначеЕсли Тип = "АктВР" Тогда
		Возврат "1175006";
	ИначеЕсли Тип = "счФактКор" Тогда
		Возврат "1115108";
	ИначеЕсли Тип = "Заказ" Тогда
		Возврат "Заказ";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
Функция сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT(СтруктураФайла,КэшXSLT, ИмяXSLT) Экспорт
	ВремКаталог = КаталогВременныхФайлов();
	
	ШаблонXML = ПолучитьXMLДокумента1С(СтруктураФайла);
	
	XML = Новый ЗаписьXML();
	XML.УстановитьСтроку("windows-1251");
	
	ИсхФайл = Новый ТекстовыйДокумент;
	ИсхФайл.УстановитьТекст(ШаблонXML);
	ИмяИсходногоФайла = ВремКаталог + ИмяXSLT + "_origin.xml";
	ИсхФайл.Записать(ИмяИсходногоФайла, "windows-1251");
	
	Если КэшXSLT.Свойство(ИмяXSLT) Тогда
		ПреобразованиеXSL = Новый ПреобразованиеXSL();
		ПреобразованиеXSL.ЗагрузитьИзСтроки(КэшXSLT[ИмяXSLT]);
		ПреобразованиеXSL.ПреобразоватьИзФайла(ИмяИсходногоФайла, XML);
		ШаблонXML = XML.Закрыть();					
	КонецЕсли;
	Возврат ШаблонXML;
КонецФункции
&НаКлиенте
Функция УпорядочитьВложенияДляЗагрузки(СписокВесов, ПолныйСоставПакета) Экспорт
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
			Если Вложение.Свойство("Вес") и Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	Возврат УпорядоченныйСоставПакета;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруОтветственного(Кэш,Контекст) Экспорт
	// функция формирует структуру ответственного,который проставляется на пакете документов при отправке
	ОтветственныйСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Ответственный = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ОтветственныйИД = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если Не ЗначениеЗаполнено(ОтветственныйИД) Тогда
				Попытка
					ОтветственныйИД = строка(Ответственный.УникальныйИдентификатор());
				Исключение
					ОтветственныйИД = "";
				КонецПопытки;
			КонецЕсли;
			ОтветственныйФамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Фамилия", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ОтветственныйФамилия) Тогда  // если фио в базе лежит по отдельным полям
				ОтветственныйИмя = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Имя", Контекст.ФайлДанные, Кэш);	
				ОтветственныйОтчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Отчество", Контекст.ФайлДанные, Кэш);
				ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество,Идентификатор", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество, ОтветственныйИД);
				//ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество);
			Иначе  // если фио в базе лежит в одном поле
				ОтветственныйФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_ФИО", Контекст.ФайлДанные, Кэш);
				Если ЗначениеЗаполнено(ОтветственныйФИО) Тогда
					ОтветственныйСтруктура = Кэш.ОбщиеФункции.сбисПолучитьФИО(ОтветственныйФИО);
					ОтветственныйСтруктура.Вставить("Идентификатор", ОтветственныйИД);
				КонецЕсли;
			КонецЕсли;
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ОтветственныйСтруктура.Вставить("Создать", "Да");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруПодразделения(Кэш,Контекст) Экспорт
	// функция формирует структуру подразделения,которое проставляется на пакете документов при отправке    
	ПодразделениеСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Подразделение = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПодразделениеИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ПодразделениеИдентификатор) Тогда
				ПодразделениеИД = ПодразделениеИдентификатор;
			Иначе    
				Попытка
					ПодразделениеИД = строка(Подразделение.УникальныйИдентификатор());
				Исключение
					ПодразделениеИД = "";
				КонецПопытки;
			КонецЕсли;
			ПодразделениеНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Название", Контекст.ФайлДанные, Кэш);
			ПодразделениеСтруктура.Вставить("Название", ПодразделениеНазвание);
			ПодразделениеСтруктура.Вставить("Идентификатор", ПодразделениеИД);
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ПодразделениеСтруктура.Вставить("Создать", "Да");    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПодразделениеСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруРегламента(Кэш,Контекст) Экспорт
	// функция формирует структуру регламента,который проставляется на пакете документов при отправке	
	РегламентСтруктура = Новый Структура;
	РегламентНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Регламент_Название", Контекст.ФайлДанные, Кэш);
	Если ЗначениеЗаполнено(РегламентНазвание) Тогда
		РегламентСтруктура.Вставить("Название", РегламентНазвание);
	КонецЕсли;
	РегламентИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("РегламентИдентификатор", Контекст.ФайлДанные, Кэш);
	Если ЗначениеЗаполнено(РегламентИдентификатор) Тогда
		РегламентСтруктура.Вставить("Идентификатор", РегламентИдентификатор);
	КонецЕсли;
	Возврат РегламентСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьМассивОснований(Кэш,Контекст) Экспорт
	// функция формирует массив с данными документов-оснований,которые указываются на пакете документов при отправке	
	ОснованияМассив = Новый Массив;
	Если Контекст.ФайлДанные.Свойство("мДокументОснование") Тогда
		Для Каждого Параметр Из Контекст.ФайлДанные.мДокументОснование Цикл
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуру(Контекст.ФайлДанные,Параметр.Значение);
			Основание = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДокументОснование",Контекст.ФайлДанные,Основание);
			Если Основание.Свойство("Дата") и ЗначениеЗаполнено(Основание.Дата) и Основание.Свойство("Номер") и ЗначениеЗаполнено(Основание.Номер) Тогда
				ОснованияМассив.Добавить(Основание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ОснованияМассив;
КонецФункции
&НаКлиенте
Функция ЗаполнитьРеквизитыОснованийПакета(СоставПакета, Кэш) Экспорт
	// функция заполняет дату, номер, тип документов-оснований пакета	
	Если СоставПакета.Свойство("ДокументОснование") Тогда
		Для Каждого ДокОснование Из СоставПакета.ДокументОснование Цикл
			Попытка
				Если Не ЗначениеЗаполнено(ДокОснование.Документ.Дата) Тогда
					ПакетОснование = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ДокОснование.Документ.Идентификатор);
					ДокОснование.Документ.Дата = ПакетОснование.Дата;
					ДокОснование.Документ.Номер = ПакетОснование.Номер;
					ДокОснование.Документ.Тип = ПакетОснование.Тип;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат СоставПакета;
КонецФункции
&НаКлиенте
Функция ЗаполнитьАтрибуты(Кэш,Раздел,Ини,СтруктураДокумента) Экспорт
	// Функция используется при формировании структуры файла при выгрузке документа 1С
	// С помощью данной функции в структуру файла добавляются атрибуты, которые описаны в файле настроек в узлах типа "Файл_", "Документ_", "ТаблДок_"
	Раздел = Раздел+"_";
	Длина = СтрДлина(Раздел);
	Для Каждого Параметр Из ини Цикл
		Если  Лев(Параметр.Ключ,Длина)=Раздел Тогда
			ЗначениеПараметра = Кэш.ОбщиеФункции.РассчитатьЗначение(Параметр.Ключ, Ини, Кэш);
			СтруктураДокумента.Вставить(Сред(Параметр.Ключ,Длина+1),ЗначениеПараметра);
			Ини[Параметр.Ключ] = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
КонецФункции	
&НаКлиенте
Процедура ДобавитьОшибкуВРезультатОтправки(Кэш, ТекстОшибки, РасширенноеОписаниеОшибки, Документ1С) Экспорт
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		СписокДокументов1С = Новый СписокЗначений;
		СписокДокументов1С.Добавить(Документ1С,РасширенноеОписаниеОшибки);
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, СписокДокументов1С);
	Иначе
		ЭлементСоответствия.Добавить(Документ1С,РасширенноеОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры	
&НаКлиенте
Функция сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайла) Экспорт
	Попытка
		// Проверяем возможность загрузки вложения. Из раздела Полученные загружаем только входящие, из Отправленные только исходящие вложения.
		Если Вложение.Направление = "Входящий" и Кэш.Текущий.Раздел = "1" Тогда
			ИмяИни = ФорматВерсияФайла;
			Если НЕ Кэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
				ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
			КонецЕсли;
		ИначеЕсли Вложение.Направление = "Исходящий" и (Кэш.Текущий.Раздел = "2" ИЛИ Кэш.Текущий.Раздел = "7") Тогда 
			ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
		Иначе
			ВызватьИсключение("");
		КонецЕсли;
		Если Кэш.Ини.Свойство(ИмяИни) Тогда
			Возврат Кэш.Ини[ИмяИни];
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции
&НаКлиенте
Функция ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(СоставПакета,Вложение,СтруктураИниФайла,ТипДокумента,ТекстОшибки, Кэш, ТолькоАнализ = Ложь, списокНоменклатуры = неопределено) Экспорт   //Плотников ТолькоАнализ
	// Функция проверяет, все ли необходимые для загрузки данные заполнены	
	СтруктураФайла = Вложение.СтруктураФайла;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Попытка
		Файл_Формат = СтрЗаменить(СтруктураФайла.Файл.Формат,"-","");
		Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".", "_"), " ", "");
		Ини = сбисОпределитьИниДляЗагрузки(Кэш, Вложение, Файл_Формат+"_"+Файл_ВерсияФормата);
		Если Ини = Неопределено Тогда
			ТекстОшибки = "Загрузка документа не поддерживается.";
			Возврат Истина;
		КонецЕсли;
	Исключение    // нет структуры файла или в структуре нет формата или версии формата
		ТекстОшибки = "Загрузка документа не поддерживается.";
		Возврат Истина;
	КонецПопытки;
	
	Если Не Ини.Свойство("мДокумент") Тогда   // Не указан тип документа 1С, которому соответствует данный файл
		ТекстОшибки = "В настройках не указан тип документа 1С, которому соответствует данный файл.";
		Возврат Истина;
	КонецЕсли;
	// НГС если грузим по умолчанию, то берем первый возможный тип документа 1С
	Для Каждого ТипДокумент Из Ини.мДокумент Цикл
		ТипДокумента = ТипДокумент.Ключ;
		Прервать;
	КонецЦикла;
	
	РегалментВоВложении = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры("Файл.Документ.Параметр.ДокументВидОперации", СтруктураФайла); 
	Для Каждого ИниДокумент из Ини.мДокумент Цикл
		Если ИниДокумент.Значение.Свойство("ДокументВидОперации") Тогда
			Регламент_мДокумент = ИниДокумент.Значение.ДокументВидОперации.Значение;
			
			Если ИниДокумент.Значение.ДокументВидОперации.Свойство("Данные") Тогда
				РегламентВоВложении = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниДокумент.Значение.ДокументВидОперации.Данные, СтруктураФайла);
			КонецЕсли;
			
			Если РегламентВоВложении <> Неопределено И Найти(Регламент_мДокумент, РегламентВоВложении) > 0 Тогда
				ТипДокумента = ИниДокумент.Ключ;
				Прервать;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	//КНГС-------------------------
	
	//
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОпределитьТипЗагружаемогоДокумента","Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата,"", Кэш);
	Если фрмПольз<>Ложь Тогда
		ТипДокумента = фрмПольз.ОпределитьТипЗагружаемогоДокумента(Новый Структура("СоставПакета,Вложение,Ини,Кэш",СоставПакета,Вложение,Ини,Кэш));	
	КонецЕсли;
	
	СтруктураИниФайла = Ини.мДокумент[ТипДокумента];
	// Проверяем, надо ли сопоставлять номенклатуру	
	НадоСопоставлятьНоменклатуру = Ложь;
	
	Для каждого ИниДокумент из Ини.мДокумент Цикл
		Если ИниДокумент.Значение.Свойство("мТаблДок") Тогда
			Для Каждого Элемент Из ИниДокумент.Значение.мТаблДок Цикл
				Если Элемент.Значение.Свойство("Номенклатура") Тогда
					НадоСопоставлятьНоменклатуру = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
	Если СтруктураИниФайла.Свойство("мТаблДок") Тогда
		Для Каждого Элемент Из СтруктураИниФайла.мТаблДок Цикл
			Если Элемент.Значение.Свойство("ТаблДок") и Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
				ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КонтрагентРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла, Кэш);
	ОрганизацияРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Организация_Роль", СтруктураИниФайла, Кэш);
	
	//НГС
	Если КонтрагентРоль<>Неопределено Тогда
	Попытка
		ПутьКонтрагента = СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
		СтрКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
	Исключение
		ПутьКонтрагента = "Файл.Документ."+КонтрагентРоль;
		СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
	КонецПопытки;
	Если СтрКонтрагента = Неопределено Тогда
		ТекстОшибки = "В файле отсутствуют данные для определения контрагента.";
		Возврат Ложь;
	КонецЕсли;
	КонецЕсли;
	//КНГС	
	
	Попытка
		ПутьОрганизации = СтруктураИниФайла.мСторона[ОрганизацияРоль].Сторона.Данные;
		СтрОрганизации = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьОрганизации, СтруктураФайла);
		Если СтрОрганизации = Неопределено Тогда
			ВызватьИсключение("");
		КонецЕсли;
	Исключение
		Если НЕ СтруктураФайла.Файл.Документ.Свойство(ОрганизацияРоль) Тогда
			СтруктураФайла.Файл.Документ.Вставить(ОрганизацияРоль, СоставПакета.НашаОрганизация);
		КонецЕсли;
		СтрОрганизации = СтруктураФайла.Файл.Документ[ОрганизацияРоль];
	КонецПопытки;
	
	НашаНоменклатура = Кэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", СтруктураИниФайла, Кэш);
	Если НадоСопоставлятьНоменклатуру Тогда
		сч = 0;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
		ТаблДок = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		
		Если Вложение.Направление = "Исходящий" Тогда  // при загрузке исходящих сопоставляем номенклатуру с номенклатурой нашей организации
			КонтрагентДляСопоставления = СтрОрганизации;
		Иначе
			КонтрагентДляСопоставления = СтрКонтрагента;
		КонецЕсли;
		
		Попытка   //d.ch 29.06.15
			стрТаблДок = фрм.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(КонтрагентДляСопоставления, ТаблДок, ГлавноеОкно.КаталогНастроек, Кэш.Ини);
		Исключение	
			Ошибка = ОписаниеОшибки();
			стрТаблДок = Новый Структура;
		КонецПопытки;
				
		Для Каждого СтрТабл Из ТаблДок Цикл
			ДанныеНоменклатуры = Неопределено;
			Если ЗначениеЗаполнено(НашаНоменклатура) и СтрТабл.Свойство(НашаНоменклатура) Тогда
				ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),Кэш);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
				Если стрТаблДок.Количество()>0 Тогда //d.ch 29.06.15
					ДанныеНоменклатуры = стрТаблДок["СтрТабл_"+Строка(сч)].НоменклатураПоставщика;
				Иначе   
					ДанныеНоменклатуры = фрм.НайтиНоменклатуруПоставщика(КонтрагентДляСопоставления, СтрТабл, ГлавноеОкно.КаталогНастроек, Кэш.Ини);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда  
				ТаблДок[сч].Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
				Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
					ТаблДок[сч].Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
				КонецЕсли;
			ИначеЕсли СтрТабл.Свойство("Код") и ЗначениеЗаполнено(СтрТабл.Код) и ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрТабл.Код)) Тогда   ///плотников +++
				ТаблДок[сч].Вставить("Номенклатура", Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрТабл.Код));
				
			ИначеЕсли ЗначениеЗаполнено(СтрТабл.Название) и ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоНаименованию(СтрТабл.Название)) Тогда   ///плотников +++
				ТаблДок[сч].Вставить("Номенклатура", Справочники.Номенклатура.НайтиПоНаименованию(СтрТабл.Название));
				
			Иначе
               
				//Если Кэш.Парам.СпособЗагрузки=1 Тогда
				//	Номенклатура=СоздатьНоменклатуруПоДаннымПоставщика(Кэш,СтрТабл,СтруктураФайла);  //Если не нашли сопоставления, то создаем новую карточку
				//	Если Номенклатура=Неопределено Тогда
				//		Кэш.Парам.СпособЗагрузки=0;
				//		Сообщить("Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации");
				//		Возврат Ложь;
				//	Иначе
				//		ТаблДок[сч].Вставить("Номенклатура", Номенклатура);
				//		
				//		Попытка                                                           //И записываем сопоставление
				//			НазваниеНоменклатуры=СтрТабл.Название; 
				//		Исключение
				//			НазваниеНоменклатуры = ""; 
				//		КонецПопытки;
				//		Попытка	
				//			Идентификатор=СтрТабл.Идентификатор;
				//		Исключение
				//			Идентификатор = ""; 
				//		КонецПопытки;
				//		
				//		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура,Характеристика",НазваниеНоменклатуры,Идентификатор,Номенклатура,"");
				//		
				//		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
				//		фрм.УстановитьСоответствиеНоменклатуры(КонтрагентДляСопоставления, ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, Кэш.Ини);
				//	КонецЕсли;
				//КонецЕсли;
				//Если Кэш.Парам.СпособЗагрузки=0 Тогда
				Если ТолькоАнализ Тогда            //Плотников
					нов = списокНоменклатуры.добавить();
					нов.номенклатура = "Номенклатура: " + СтрТабл.Название + ?(СтрТабл.Свойство("Код"),", Код: " + СтрТабл.Код,"");
					нов.ИНН = СоставПакета.Контрагент.СвЮЛ.ИНН;
					нов.КПП = СоставПакета.Контрагент.СвЮЛ.КПП;
				иначе
					ТекстОшибки = "Не вся номенклатура сопоставлена. Для сопоставления откройте карточку документа.";
					Возврат Ложь;
				КонецЕсли;
				//КонецЕсли;
				//Если Кэш.Парам.СпособЗагрузки=2 Тогда 
				//	ТаблДок[сч].Вставить("НеЗагружать", Истина);
				//КонецЕсли; 
			КонецЕсли;       
			сч = сч+1;
		КонецЦикла;	
	КонецЕсли;
	
	Если ТолькоАнализ Тогда //Плотников
		Возврат Ложь;
	КонецЕсли;
	
	ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрОрганизации), Ложь);
	Если ТипЗнч(ОрганизацияВложения) = Тип("Булево") Тогда
		ТекстОшибки = "Не найдена организация.";
		Возврат Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрКонтрагента) и Кэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и Кэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(Кэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
		СтрКонтрагента.Вставить("Ограничения", Новый Структура("Организация",ОрганизацияВложения));
	КонецЕсли;
	
	КонтрагентВложения = ?(ЗначениеЗаполнено(СтрКонтрагента), Кэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрКонтрагента, СтруктураИниФайла), Ложь);
	//НГС
	Если ТипЗнч(КонтрагентВложения) = Тип("Булево") И КонтрагентРоль <> Неопределено Тогда
	//КНГС
		ТекстОшибки = "Не найден контрагент. Для создания контрагента по данным из файла откройте карточку документа.";
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
Процедура ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект,Документ1С) Экспорт
	Реквизиты = Документ1С.Метаданные().Реквизиты;	
	Для Каждого Реквизит Из Реквизиты Цикл 
		СтруктураДокОбъект.Вставить(Реквизит.Имя, Документ1С[Реквизит.Имя]);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Функция СоздатьНоменклатуруПоДаннымПоставщика(Кэш,СтрТабл,СтруктураФайла) Экспорт  	// сбисНикифоров  Функция создает Карточку номенклатуры по данным из файла
	Если Кэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
		СправочникНоменклатура = Сред(Кэш.Ини.Конфигурация.Номенклатура.Значение, Найти(Кэш.Ини.Конфигурация.Номенклатура.Значение,".")+1);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Номенклатура = сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, СтрТабл.Название);	//Пытаемся найти уже имеющуюся в базе по полному наименованию
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;             										//Если находим то возвращаем уже существующую карточку
	Иначе
		//Иначе создаем новый элемент справочника
		СтруктураСправочника = Новый Структура();               		//Создаем структуру, где ключ - название реквизита справочника, а значение - значение из файла
		ЗаполнитьСтрутуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураСправочника); //Заполняем ее
		
		Номенклатура = СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника);
		Возврат Номенклатура;                                  	//Возвращаем ее
	КонецЕсли;
КонецФункции
Функция сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, Название)
	Возврат Справочники[СправочникНоменклатура].НайтиПоНаименованию(Название,Истина);
КонецФункции
Функция СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника)
	// Функция заполняет реквизиты документа 1С из одноименных полей структуры	
	Номенклатура = Справочники[СправочникНоменклатура].СоздатьЭлемент();
	Для Каждого Элемент Из СтруктураСправочника Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Номенклатура[Элемент.Ключ] = Элемент.Значение;
		Иначе
			Номенклатура[Элемент.Ключ].Очистить();
			Для Каждого Строка Из Элемент.Значение Цикл
				НоваяСтрока = Номенклатура[Элемент.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Попытка
		Номенклатура.Записать();    								//Если карточка нормально записалась
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Сообщить("Создана Номенклатура: "+Номенклатура.Наименование); 	//Сообщаем что создали
	Возврат Номенклатура.Ссылка;
КонецФункции
&НаКлиенте
Функция ЗаполнитьСтрутуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураНоменклатура) 
	//Функция заполняет структуру для создания элемента справочника 
	//Если это Наименование или полное наименование, то записываем в структуру данные из места файла, указанного в инишке 
	Переменные = Новый Структура;
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	Для Каждого Элемент Из Кэш.Ини.Конфигурация Цикл
		Если Лев(Элемент.Ключ,13) = "Номенклатура_" Тогда
			Если Элемент.Значение.Свойство("Значение") Тогда
				Если Элемент.Значение.Свойство("Данные") Тогда
					фрм.ЗаполнитьЗначениеРеквизитаИзФайла(Элемент.Значение, СтрТабл, СтруктураНоменклатура,Кэш);						
				КонецЕсли;
				Если Элемент.Значение.Свойство("Вычислить") Тогда
					Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла", Кэш.Ини.Конфигурация, СтруктураНоменклатура, Переменные, СтруктураФайла);
					ЗначениеРеквизита = фрм.РассчитатьЗначение(Элемент.Значение.Вычислить,Контекст,Кэш);
					фрм.ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Элемент.Значение.Значение, СтруктураНоменклатура, Переменные);	
				КонецЕсли;
				Если Элемент.Значение.Свойство("ВычислитьНаСервере") Тогда
					ЗначениеРеквизита = фрм.РассчитатьЗначениеНаСервере(Элемент.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СтрокаФайла", Кэш.Ини.Конфигурация, СтруктураНоменклатура, Переменные, СтруктураФайла, СтрТабл));
					фрм.ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Элемент.Значение.Значение, СтруктураНоменклатура, Переменные);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Если Ини.Свойство("Номенклатура_Наименование") Тогда 
	//	Реквизит1С = Ини["Номенклатура_Наименование"].Значение;
	//	ЗначениеИзФайла=Ини["Номенклатура_Наименование"].Данные;
	//	СтруктураНоменклатура.Вставить(сред(Реквизит1С,Найти(Реквизит1С,".")+1),ДанныеДокумента[ЗначениеИзФайла]);
	//КонецЕсли;
	//Если Ини.Свойство("Номенклатура_ПолноеНаименование") Тогда 
	//	Реквизит1С = Ини["Номенклатура_ПолноеНаименование"].Значение;
	//	ЗначениеИзФайла=Ини["Номенклатура_ПолноеНаименование"].Данные;
	//	СтруктураНоменклатура.Вставить(сред(Реквизит1С,Найти(Реквизит1С,".")+1),ДанныеДокумента[ЗначениеИзФайла]);
	//КонецЕсли;
	////Записываем комментарий
	//Если Ини.Свойство("Номенклатура_Комментарий") Тогда 
	//	Реквизит1С = Ини["Номенклатура_Комментарий"].Значение;
	//	ЗначениеРеквизита = "Создано обработкой online.sbis " + ТекущаяДата(); 
	//	СтруктураНоменклатура.Вставить((сред(Реквизит1С,Найти(Реквизит1С,".")+1)),ЗначениеРеквизита);
	//КонецЕсли;
	////Для реквизита единица измерения мы должны создать или найти существующий элемент справочника единицы измерения
	//Если Ини.Свойство("Номенклатура_ЕдиницаИзмерения") Тогда 
	//	СправочникЕдИзм = РассчитатьЗначениеНаСервере("ЕдиницаИзмерения",Новый Структура("ини",Ини));  //Определяем объект справочника единиц измерения
	//	РеквизитЕдИзм = Ини["Номенклатура_ЕдиницаИзмерения"].Значение;     
	//	ЕдиницаИзмерения=Неопределено;
	//	Если СправочникЕдИзм = Неопределено Тогда
	//		Сообщить("В настройках не указан справочник для загрузки/создания единиц измерения");
	//	Иначе
	//		Попытка                                         					//Пытаемся взять код единицы измерения, указанный в файле
	//			КодЕдИзм=ДанныеДокумента["ОКЕИ"];
	//		Исключение
	//			КодЕдИзм="";
	//		КонецПопытки;
	//		Попытка                                        						//Пытаемся взять название единицы измерения, указанное в файле
	//			НазваниеЕдИзм=ДанныеДокумента["ЕдИзм"];
	//		Исключение
	//			НазваниеЕдИзм="";
	//		КонецПопытки;
	//		Если СтрДлина(КодЕдИзм)>0 Тогда                    	 			//Тогда сначала ищем уже существующую карточку по коду
	//			ЕдиницаИзмерения = СправочникЕдИзм.НайтиПоКоду(КодЕдИзм,Истина);
	//		КонецЕсли;
	//		Если ЕдиницаИзмерения=Неопределено И СтрДлина(НазваниеЕдИзм)>0 Тогда //Если не находим, то пытаемся найти по наименованию
	//			ЕдиницаИзмерения = СправочникЕдИзм.НайтиПоНаименованию(НазваниеЕдИзм,Истина);
	//		КонецЕсли;	
	//		Если ЕдиницаИзмерения=Неопределено Тогда 				//Если не находим, то пытаемся создать новую карточку единицы измерения по данным из файла
	//			ЕдиницаИзмерения = СправочникЕдИзм.СоздатьЭлемент();
	//			ЕдиницаИзмерения.Код = КодЕдИзм;		 
	//			ЕдиницаИзмерения.НаименованиеПолное = НазваниеЕдИзм;
	//			ЕдиницаИзмерения.Наименование = НазваниеЕдИзм;
	//			Попытка
	//				ЕдиницаИзмерения.Записать();
	//			Исключение
	//				ЕдиницаИзмерения=Неопределено;
	//				Сообщить(ОписаниеОшибки());
	//			КонецПопытки;
	//		КонецЕсли;
	//		Если ЕдиницаИзмерения<>Неопределено Тогда 						//Если единица измрения нашлась или мы создали новую, то записываем ее в реквизит
	//			СтруктураНоменклатура.Вставить(сред(РеквизитЕдИзм,Найти(РеквизитЕдИзм,".")+1),ЕдиницаИзмерения);	
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если ЕдиницаИзмерения=Неопределено И ЗначениеЗаполнено(Ини["Номенклатура_Услуга"]) Тогда    							//Если нет единицы измерения, тогда записываем реквизит услуга со значение Истина
	//		РеквизитУслуга = Ини["Номенклатура_Услуга"].Значение;
	//		СтруктураНоменклатура.Вставить(сред(РеквизитУслуга,Найти(РеквизитУслуга,".")+1),Истина);
	//	КонецЕсли;
	//КонецЕсли;
КонецФункции
Функция ЗаполнитьЕдиницуИзмеренияНовойНоменклатуры(Контекст) Экспорт
	// функция ищет по коду единицу измерения	
	СправочникЕдИзм = РассчитатьЗначениеНаСервере("ЕдиницаИзмерения",Новый Структура("ини",Контекст.Ини));  //Определяем объект справочника единиц измерения
	ЕдиницаИзмерения=Неопределено;
	Если СправочникЕдИзм = Неопределено Тогда
		Сообщить("В настройках не указан справочник для загрузки/создания единиц измерения");
	Иначе
		Попытка
			КодЕдИзм = Контекст.Ини.Номенклатура_ОКЕИ.Значение;
			ЕдиницаИзмерения = СправочникЕдИзм.НайтиПоКоду(КодЕдИзм,Истина);
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат ЕдиницаИзмерения;
КонецФункции
Функция сбисНоменклатураУслуга(Контекст) экспорт
	результат= (Контекст.СтруктураФайла.файл.Формат="АктВР");
	возврат результат;
конецфункции
Функция сбисНоменклатураВид(Контекст) экспорт
	если Контекст.СтруктураФайла.файл.Формат="АктВР" тогда
		результат = справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
	иначе
		результат = справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары");
	конецесли;
	возврат результат;
конецфункции
//&НаСервереБезКонтекста
Функция сбисНомерНаПечать(НомерДок) Экспорт
	// функция обрезает префикс в номере документа	
	НомерНаПечать = НомерДок;
	Если Лев(НомерНаПечать, 1) = "-" Тогда
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЕсли;
	
	// удаление ведущих нулей
	Пока Лев(НомерНаПечать, 1)="0" Цикл
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЦикла;
	Возврат НомерНаПечать;
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(Кэш)
	// функция формирует структуру фильтров, которые используются в запросе документов 1С при построении списка документов в разделах Продажа и Покупка	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ПараметрыФильтра = Новый Структура;
	
	ПараметрыФильтра.Вставить( "ФильтрДатаНач", ГлавноеОкно.ФильтрДатаНач); 
	ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ГлавноеОкно.ФильтрДатаКнц); 
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", ГлавноеОкно.ФильтрКонтрагент);
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", ГлавноеОкно.ФильтрКонтрагентПодключен);
	ПараметрыФильтра.Вставить( "ФильтрДокумент", ГлавноеОкно.ФильтрДокумент);
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", ГлавноеОкно.ФильтрОрганизация);
	ПараметрыФильтра.Вставить( "ФильтрСостояние", ГлавноеОкно.ФильтрСостояние);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ГлавноеОкно.ФильтрОтветственный);
	ПараметрыФильтра.Вставить( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице1С ); 
	ПараметрыФильтра.Вставить( "Страница", ГлавноеОкно.ФильтрСтраница );
	ПараметрыФильтра.Вставить( "ВсеДокументы", ГлавноеОкно.ВсеДокументы );
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	// Добавляем пользовательские фильтры
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыФильтра;	
КонецФункции	
&НаКлиенте
Функция сбисОбновитьРеестрДокументов1С(Ини, Кэш) Экспорт
	// функция формирует данные для показа реестров документов 1С в разделах Продажа и Покупка	
	СтруктураДляОбновленияФормы = Новый Структура;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	// Устанавливаем видимость колонок таблицы
	//ВидимыеКолонки = сбисРассчитатьЗначение("Реестр1С_ВидимыеСтолбцы",Контекст);
	//ВидимыеКолонки = сбисРазложитьСтрокуВСтруктуру(ВидимыеКолонки, ",");	
	//Для Каждого Колонка Из сбисПолучитьПодчиненныеЭлементы(сбисЭлементФормы(ГлавноеОкно, "Таблица_РеестрДокументов"), "Колонки") Цикл
	//	Если Не ВидимыеКолонки.Свойство(Колонка.Имя) Тогда
	//		Колонка.Видимость = Ложь;
	//	Иначе
	//		Колонка.Видимость = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	
	//ТаблДок = ГлавноеОкно.Таблица_РеестрДокументов;
	//ТаблДок.Очистить();
	ПараметрыФильтра = ПолучитьФильтр(Кэш);
	ТекстЗапроса = РассчитатьЗначение("ЗапросСпискаДокументов",Ини, ГлавноеОкно.Кэш);
	МассивДокументов1С = ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, ГлавноеОкно.КаталогНастроек);
	ГлавноеОкно.ФильтрЕстьЕще = ПараметрыФильтра.ФильтрЕстьЕще;
	ГлавноеОкно.ФильтрСтраница = ПараметрыФильтра.Страница;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьСтатусыВТаблицеДокументов1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Если фрм <> Ложь Тогда
		МассивДокументов1С = фрм.ЗаполнитьСтатусыВТаблицеДокументов1С(МассивДокументов1С, ПараметрыФильтра, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов1С);
	Возврат СтруктураДляОбновленияФормы; 
КонецФункции
//&НаСервереБезКонтекста
Функция ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, КаталогНастроек) Экспорт	
	// функция выполняет запрос документов 1С на основании файлов настроек и результат кладет в массив структур 	
	Запрос = Новый Запрос;
	Если НЕ ПараметрыФильтра.ВсеДокументы и ПараметрыФильтра.РазмерСтраницы<>"все" и ПараметрыФильтра.Страница<>0 и Найти(нрег(ТекстЗапроса),"выбрать разрешенные") = 1 Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, 19) +" ПЕРВЫЕ "+Формат(Число(ПараметрыФильтра.РазмерСтраницы)*ПараметрыФильтра.Страница+1,"ЧГ=0")+ Сред(ТекстЗапроса, 20);
		// добавляем упорядочивание только в случае выбора "ПЕРВЫЕ", т.к. иначе нельзя упорядочивать временную таблицу.
		// Без упорядочивания временной таблицы документы некорректно распределяются по страницам.
		ПозТчЗпт = Найти(ТекстЗапроса, ";");
		Если ПозТчЗпт>0 Тогда
			ТекстВТ = Лев(ТекстЗапроса, ПозТчЗпт-1);
			Если Найти(ВРег(ТекстВТ), "ПОМЕСТИТЬ")>0 и Найти(ВРег(ТекстВТ), ".ДАТА КАК ДАТА,")>0 и Найти(ВРег(ТекстВТ), ".НОМЕР КАК НОМЕР,")>0 Тогда
				ТекстЗапроса = ТекстВТ+" УПОРЯДОЧИТЬ ПО Дата, Номер"+Сред(ТекстЗапроса, ПозТчЗпт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущийДокумент", ПараметрыФильтра.ФильтрДокумент);
	Запрос.УстановитьПараметр("ЗначениеТекущийДокументЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрДокумент));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПараметрыФильтра.ФильтрДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыФильтра.ФильтрДатаКнц));	
	Запрос.УстановитьПараметр("ЗначениеДатаКонЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрДатаКнц));
	Запрос.УстановитьПараметр("Контрагент", ПараметрыФильтра.ФильтрКонтрагент);
	Запрос.УстановитьПараметр("ЗначениеКонтрагентЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрКонтрагент));
	Запрос.УстановитьПараметр("КонтрагентПодключен", ПараметрыФильтра.ФильтрКонтрагентПодключен);
	Запрос.УстановитьПараметр("ТекущаяОрганизация", ПараметрыФильтра.ФильтрОрганизация);
	Запрос.УстановитьПараметр("ЗначениеТекущаяОрганизацияЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрОрганизация));
	Запрос.УстановитьПараметр("Ответственный", ПараметрыФильтра.ФильтрОтветственный);
	
	Если ПараметрыФильтра.Свойство("Пользовательские") Тогда
		Для Каждого Элемент Из ПараметрыФильтра.Пользовательские Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
	КонецЕсли;	
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить(Ошибка);
		возврат ложь;
	КонецПопытки;
	
	
	МассивДокументов = Новый Массив;
	
	Если НЕ ПараметрыФильтра.ВсеДокументы и ПараметрыФильтра.РазмерСтраницы<>"все" Тогда
		Если ПараметрыФильтра.Страница=0 Тогда	// последняя страница
			РезультатТаблица = РезультатЗапроса.Выгрузить();
			РезультатТаблица.Свернуть("Документ");
			НомКнц = РезультатТаблица.Количество();
			КолСтраниц = НомКнц/Число(ПараметрыФильтра.РазмерСтраницы);
			ПараметрыФильтра.Страница = ?(КолСтраниц = Цел(КолСтраниц), Цел(КолСтраниц), Цел(КолСтраниц)+1);
			КолСтраницДо = ?(КолСтраниц = Цел(КолСтраниц), КолСтраниц-1, Цел(КолСтраниц));
			НомНач = КолСтраницДо*Число(ПараметрыФильтра.РазмерСтраницы)+1;
		Иначе
			НомНач = (ПараметрыФильтра.Страница-1)*Число(ПараметрыФильтра.РазмерСтраницы)+1;
			НомКнц = (ПараметрыФильтра.Страница)*Число(ПараметрыФильтра.РазмерСтраницы); 
		КонецЕсли;
	Иначе
		НомНач = 0;
		НомКнц = Выборка.Количество();
	КонецЕсли;
	сч = 0;	
	Пока Выборка.СледующийПоЗначениюПоля("Документ") Цикл //перебираем документы
		сч = сч+1;
		Если сч<НомНач Тогда 
			Продолжить;
		КонецЕсли;
		Если сч>НомКнц Тогда
			ПараметрыФильтра.ФильтрЕстьЕще = Истина;
			Прервать;
		КонецЕсли;
		СписокДокументов = Новый СписокЗначений;//список документов комплекта
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Документ1С", Выборка.Документ);
		Документы1С = Новый СписокЗначений;
		Документы1С.Добавить(Выборка.Документ);
		НоваяСтр.Вставить("Документы1С", Документы1С);
		НоваяСтр.Вставить("Проведен", сбисИндексКартинкиДокумента1С(Выборка.ДокументПроведен, Выборка.ДокументПометкаУдаления));
		ИндексКартинки = -1;
		Если РезультатЗапроса.Колонки.Найти("СтатусЭД")<>Неопределено Тогда
			ИндексКартинки = сбисИндексКартинкиПоСтатусуЭД(Выборка.СтатусЭД);
			Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
				(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2)) или
				((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
				(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
				(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
				(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
				(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и ИндексКартинки=8) или
				(ПараметрыФильтра.ФильтрСостояние = "Не отправленные" и ИндексКартинки=-1) Тогда
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтр.Вставить("Статус", ИндексКартинки);
		
		Если РезультатЗапроса.Колонки.Найти("Контрагент")<>Неопределено Тогда
			НоваяСтр.Вставить("Контрагент", Выборка.Контрагент);
		КонецЕсли;
		НоваяСтр.Вставить("Дата", Выборка.ДатаДокумента);
		НоваяСтр.Вставить("Номер", сбисНомерНаПечать(Выборка.НомерДокумента));
		НоваяСтр.Вставить("Сумма", Выборка.СуммаДокумента);
		НоваяСтр.Вставить("НашаОрганизация", Выборка.Организация);
		НоваяСтр.Вставить("Комментарий", Выборка.Комментарий);
		Если РезультатЗапроса.Колонки.Найти("Склад")<>Неопределено Тогда
			НоваяСтр.Вставить("Склад", Выборка.Склад);
		КонецЕсли;
		Если РезультатЗапроса.Колонки.Найти("ФайлНастроекДокумента")<>Неопределено и ЗначениеЗаполнено(Выборка.ФайлНастроекДокумента) Тогда
			ФайлНастроек = Выборка.ФайлНастроекДокумента;
		Иначе
			ФайлНастроек = "";
		КонецЕсли;
		СписокДокументов.Добавить(Выборка.Документ,ФайлНастроек);
		Если РезультатЗапроса.Колонки.Найти("Приложение")<>Неопределено Тогда 
			Пока Выборка.Следующий() Цикл //перебираем все связанные документы
				Если ЗначениеЗаполнено(Выборка.Приложение) Тогда //если есть связанный документ
					Если РезультатЗапроса.Колонки.Найти("ФайлНастроекПриложения")<>Неопределено и ЗначениеЗаполнено(Выборка.ФайлНастроекПриложения) Тогда
						ФайлНастроек = Выборка.ФайлНастроекПриложения;
					Иначе
						ФайлНастроек = "";
					КонецЕсли;
					СписокДокументов.Добавить(Выборка.Приложение,ФайлНастроек);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		НоваяСтр.Вставить("СоставПакета", СписокДокументов);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;
	Возврат МассивДокументов;
КонецФункции
&НаКлиенте
Процедура ОбновитьПанельНавигации() Экспорт
	// функция обновляет панель навигации при переходе по страницам в разделах Полученные и Отправленные	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Кнопки = сбисПолучитьПодчиненныеЭлементы(сбисЭлементФормы(ГлавноеОкно, "КоманднаяПанельНавигация"),"Кнопки");
	ТекущаяСтраница = ГлавноеОкно.ФильтрСтраница;
	ЕстьЕще = ГлавноеОкно.ФильтрЕстьЕще;
	сбисУстановитьСвойствоЭлементаФормы(Кнопки.НавигацияТекущаяСтраница, ТекущаяСтраница);
	Если ТекущаяСтраница = 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Ложь;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Ложь;
	КонецЕсли;
	Если ТекущаяСтраница > 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Истина;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Истина;
	КонецЕсли;
	Если ЕстьЕще Тогда
		Кнопки.НавигацияПоследняяСтраница.Доступность = Истина;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Истина;
	Иначе
		Кнопки.НавигацияПоследняяСтраница.Доступность = Ложь;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры	

//Формирование xml по структуре документа
Функция ПолучитьXMLДокумента1С(Док) Экспорт
	// функция формирует строку xml на основании структуры	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку("windows-1251");
	//ОбъектXML.ОткрытьФайл(ИмяФайла, "Windows-1251");
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ЗаписатьСтруктуруВXML(ОбъектXML,Док);
	СтрXML = ОбъектXML.Закрыть();
	Возврат СтрXML;
КонецФункции
Процедура ЗаписатьСтруктуруВXML(ОбъектXML, СтруктураДокумента) Экспорт
	// процедура рекурсивно заполняет ЗаписьXML на основании структуры
	Для Каждого Элемент Из СтруктураДокумента Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ЗаписатьНеобязательныйАтрибут(Элемент.Ключ, СокрЛП(Элемент.Значение), ОбъектXML);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ЗаписатьНеобязательныйАтрибут(Элемент.Ключ, Формат(Элемент.Значение,"ЧРД=.; ЧГ=0"), ОбъектXML);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ЗаписатьНеобязательныйАтрибут(Элемент.Ключ, Строка(Элемент.Значение), ОбъектXML);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ЗаписатьСтруктуруВXML(ОбъектXML, Элемент.Значение);
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
					ЗаписатьСтруктуруВXML(ОбъектXML, ЭлементМассива);
					ОбъектXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
		Иначе //неопознанный тип данных, на авось
			ЗаписатьНеобязательныйАтрибут(Элемент.Ключ, Строка(Элемент.Значение), ОбъектXML); 
		КонецЕсли;
	КонецЦикла
КонецПроцедуры
Процедура ЗаписатьНеобязательныйАтрибут(Атрибут,ЗначениеАтрибута,ОбъектXML) Экспорт
	// Процедура записывает атрибут в ЗаписьXML, если атрибут заполнен	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		Попытка
			ОбъектXML.ЗаписатьАтрибут(Атрибут,ЗначениеАтрибута);
		Исключение
			Сообщить(ОписаниеОшибки()+" "+Атрибут+"="+ЗначениеАтрибута);
		КонецПопытки;
	КонецЕсли;		 
КонецПроцедуры

//Формирование структуры по xml документа
&НаКлиенте
Функция ЗаполнитьСтруктуруФайла(СтрокаXML) Экспорт
	// Функция формирует структуру по XML	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOM(ДокументДОМ.ПервыйДочерний, СтруктураФайла);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции
&НаКлиенте
Функция ПрочитатьУзелDOM(УзелDOM, Узел) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			//Узел.Вставить("Значение", Уз.ПолныйТекст);
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			ИначеЕсли не Узел.свойство("Параметр") тогда
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.Атрибуты.Количество() <> 0 или Уз.ПервыйДочерний <> Неопределено Тогда
				НоваяСтруктура = Новый Структура;
				Атрибуты = Уз.Атрибуты;
				Для каждого Атрибут из Атрибуты Цикл
					Попытка
						НоваяСтруктура.Вставить(Атрибут.ИмяУзла, Атрибут.ЗначениеУзла);
					Исключение
					КонецПопытки;
				КонецЦикла;	
				Если Уз.ИмяУзла = "СтрТабл" Тогда
					Если Узел.Свойство("СтрТабл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.СтрТабл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "ДопСведения" Тогда
					Если Узел.Свойство("ДопСведения") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.ДопСведения;
					КонецЕсли; 
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "ДопАдрЭл" Тогда
					Если Узел.Свойство("ДопАдрЭл") = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел.ДопАдрЭл;
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "Параметр" Тогда            //сбис Никифоров-->
					Если Узел.Свойство("Параметр") = Ложь Тогда
						//МассивСтрок = Новый Массив;
						Параметр = Новый Структура;//сбис Никифоров    
					Иначе
						Параметр = Узел.Параметр;//сбис Никифоров
					КонецЕсли;    
					//МассивСтрок.Добавить(НоваяСтруктура);
					//Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
					Попытка
						Параметр.Вставить(СтрЗаменить(СтрЗаменить(НоваяСтруктура.Имя,"-","")," ",""), НоваяСтруктура.Значение);
						Узел.Вставить(Уз.ИмяУзла, Параметр);           //сбис Никифоров <--
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(Уз.ИмяУзла, 6) = "Список" Тогда
					Если Уз.ПервыйДочерний <> Неопределено Тогда
						мУз = УЗ.ПервыйДочерний;
						ИмяУзла = мУз.ИмяУзла;
						МассивСтрок = Новый Массив;
						Пока мУз<>Неопределено Цикл
							ДочУзел = Новый Структура;
							ВложениеУзла = Неопределено;
							ПрочитатьУзелDOM(мУз, ДочУзел);
							Если ТипЗнч(ДочУзел) = Тип("Структура") Тогда
								Для Каждого Элемент Из ДочУзел Цикл
									ВложениеУзла = Элемент.Значение;
									Прервать;
								КонецЦикла; 
								Если ВложениеУзла<>Неопределено Тогда
									МассивСтрок.Добавить(ВложениеУзла);
								КонецЕсли;
							КонецЕсли;
							мУз = мУз.СледующийСоседний;
						КонецЦикла;
						Узел.Вставить(ИмяУзла, МассивСтрок);
					КонецЕсли;
				Иначе	
					Узел.Вставить(Уз.ИмяУзла, НоваяСтруктура);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено и Лев(Уз.ИмяУзла, 6) <> "Список" Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOM(Уз, ДочУзел);
			Если УЗ.РодительскийУзел.ИмяУзла = "СтрТабл" Тогда
				сбисСкопироватьСтруктуру(Узел.СтрТабл[Узел.СтрТабл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "ДопСведения" Тогда
				сбисСкопироватьСтруктуру(Узел.ДопСведения[Узел.ДопСведения.Количество()-1], ДочУзел); 
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "ДопАдрЭл" Тогда
				сбисСкопироватьСтруктуру(Узел.ДопАдрЭл[Узел.ДопАдрЭл.Количество()-1], ДочУзел);
			ИначеЕсли УЗ.РодительскийУзел.ИмяУзла = "Параметр" Тогда
				сбисСкопироватьСтруктуру(Узел.Параметр[Узел.Параметр.Количество()-1], ДочУзел);
			Иначе	
				Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			КонецЕсли;	
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Если Лев(Уз.РодительскийУзел.ИмяУзла, 6) = "Список" Тогда
			Прервать;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции		
//Блок функций, использующихся при формировании структур документов
&НаКлиенте
Функция ПолучитьСторону(Кэш, знач Контекст) Экспорт
	// Функция формирует структуру Стороны (отправителя, получателя, поставщика, покупателя) в универсальном формате (3.01).	
	Участник = Новый Структура;
	Инн = РассчитатьЗначение("Сторона_ИНН",Контекст, Кэш);
	Если Инн=Неопределено или Инн="" Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Инн = СокрЛП(Инн);
	Название = РассчитатьЗначение("Сторона_Наименование",Контекст, Кэш);
	Если Контекст.Свойство("Сторона_Роль") Тогда
		Участник.Вставить("Роль",РассчитатьЗначение("Сторона_Роль",Контекст, Кэш));
	КонецЕсли;
	Участник.Вставить("Название",Название);
	Идентификатор = РассчитатьЗначение("Сторона_Идентификатор",Контекст, Кэш);
	Участник.Вставить("Идентификатор",Идентификатор);
	
	GLN = РассчитатьЗначение("Сторона_GLN",Контекст, Кэш);
	Участник.Вставить("GLN",GLN);
	
	АдрМассив = Новый Массив;
	Адрес = РассчитатьЗначение("Сторона_Адрес",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	Адрес = РассчитатьЗначение("Сторона_АдресФакт",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	//Добавляем узлы по алфавиту
	Участник.Вставить("Адрес",АдрМассив); 
	
	БанкРекв = Новый Структура();
	ЗаполнитьАтрибуты(Кэш, "БанкРекв", Контекст, БанкРекв);
	Если БанкРекв.Количество() <> 0 Тогда
		Участник.Вставить("БанкРекв", БанкРекв);
	КонецЕсли;	
	
	//Код = Новый Структура;
	//сбисПолучитьФорму("Файл_Шаблон").ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Код);
	//Если Код.Количество() <> 0 Тогда
	//	Участник.Вставить("Код", Код);
	//КонецЕсли;	
	
	Контакт = Новый Структура;
	ЗаполнитьАтрибуты(Кэш, "Контакт", Контекст, Контакт);
	Если Контакт.Количество() <> 0 Тогда
		Участник.Вставить("Контакт", Контакт);
	КонецЕсли;		
	
	ПодразделениеНазвание = РассчитатьЗначение("Подразделение_Наименование",Контекст,Кэш);
	Если ПодразделениеНазвание<>Неопределено Тогда 
		Участник.Вставить("Подразделение", Новый Структура("Название",ПодразделениеНазвание));
	КонецЕсли;
	
	ПодразделениеИдентификатор = РассчитатьЗначение("Подразделение_Идентификатор",Контекст,Кэш);
	Если ПодразделениеИдентификатор <> Неопределено Тогда
		Если Участник.Свойство("Подразделение") Тогда
			Участник.Подразделение.Вставить("Идентификатор", ПодразделениеИдентификатор);
		Иначе	
			Участник.Вставить("Подразделение", Новый Структура("Идентификатор",ПодразделениеИдентификатор));
		КонецЕсли;	
	КонецЕсли;
	
	Представители = Новый Структура;
	Если Контекст.Свойство("мПредставитель") Тогда
		Для Каждого Элемент Из Контекст.мПредставитель Цикл
			Представитель = Новый Структура;
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуру(Контекст,Элемент.Значение);
			Должность=РассчитатьЗначение("Должность",Контекст,Кэш);
			ИННПредст=РассчитатьЗначение("ИНН",Контекст,Кэш);
			Фамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Фамилия", Контекст, Кэш);
			Если ЗначениеЗаполнено(Фамилия) Тогда  // если фио в базе лежит по отдельным полям
				Имя = Кэш.ОбщиеФункции.РассчитатьЗначение("Имя", Контекст, Кэш);	
				Отчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Отчество", Контекст, Кэш);
				Представитель = Новый Структура("Должность,СвФЛ", Должность, Новый Структура("Фамилия,Имя,Отчество,ИНН", Фамилия, Имя, Отчество,ИННПредст));
			Иначе  // если фио в базе лежит в одном поле
				ФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("ФИО", Контекст, Кэш);
				Если ЗначениеЗаполнено(ФИО) Тогда
					СвФЛ = Кэш.ОбщиеФункции.сбисПолучитьФИО(ФИО);
					СвФЛ.Вставить("ИНН",ИННПредст);
					Представитель = Новый Структура("Должность,СвФЛ",Должность,СвФЛ)
				КонецЕсли;
			КонецЕсли;
			
			Если Представитель.Количество()>0 Тогда
				Представители.Вставить(Элемент.Ключ,Представитель);
			КонецЕсли;
		КонецЦикла;
		Участник.Вставить("Представители",Представители);
	КонецЕсли;
	
	
	Если СтрДлина(СокрЛП(Инн))=12 Тогда
		ФИО = Название;
		
		Если Сред(Нрег(Название),1,3)="ип " или Сред(Нрег(Название),1,3)="чп " тогда
			ФИО =СокрЛП(Сред(Название,4));
		КонецЕсли;
		Если Сред(Нрег(Название),1,31)="индивидуальный предприниматель " тогда
			ФИО =СокрЛП(Сред(Название,32));
		КонецЕсли;
		Если Сред(Нрег(Название),1,8)="адвокат " тогда
			ФИО =СокрЛП(Сред(Название,9));
		КонецЕсли;
		Если Сред(Нрег(Название),1,9)="нотариус " тогда
			ФИО =СокрЛП(Сред(Название,10));
		КонецЕсли;
		Если Сред(Нрег(Название),1,50)="предприниматель без образования юридического лица " тогда
			ФИО =СокрЛП(Сред(Название,51));
		КонецЕсли;
		Если Сред(Нрег(Название),1,6)="пбоюл " тогда
			ФИО =СокрЛП(Сред(Название,7));
		КонецЕсли;
		Если Сред(Нрег(Название),1,16)="предприниматель " тогда
			ФИО =СокрЛП(Сред(Название,17));
		КонецЕсли;
		
		ФИО = РазбитьСтрокуВМассив(ФИО," ");
		
		Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
		Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
		Отчество = "";
		Если ФИО.Количество()>=3 Тогда
			Для сч=2 по ФИО.Количество()-1 Цикл
				Отчество=Отчество+ФИО[сч]+" ";
			КонецЦикла;
			Отчество=СокрЛП(Отчество);
		КонецЕсли;
		СвФЛ = Новый Структура;
		Участник.Вставить("СвФЛ",СвФЛ);
		Участник.СвФЛ.Вставить("ИНН",Инн);
		Участник.СвФЛ.Вставить("Фамилия",Фамилия);
		Участник.СвФЛ.Вставить("Имя",Имя);
		Участник.СвФЛ.Вставить("Отчество",Отчество);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвФЛ);
	Иначе
		КПП = РассчитатьЗначение("Сторона_КПП",Контекст, Кэш);
		Если Контекст.Свойство("КПППодразделения") и ЗначениеЗаполнено(Контекст.КПППодразделения) Тогда  // в счет-фактуре КПП контрагента можно указать прямо на документе (если у контрагента есть филиалы)
			КПП = РассчитатьЗначение("КПППодразделения",Контекст, Кэш);  
		КонецЕсли; 
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ",СвЮЛ);
		Участник.СвЮЛ.Вставить("Название", Название);
		Участник.СвЮЛ.Вставить("ИНН",ИНН);
		Участник.СвЮЛ.Вставить("КПП",КПП);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	КонецЕсли;
	
	Возврат Участник;
КонецФункции
//Функция СкопироватьУчастника(Участник,НоваяРоль) Экспорт
//	Копия = Новый Структура;
//	Для Каждого Элемент из Участник Цикл
//		Если Элемент.Ключ = "Роль" Тогда
//			Копия.Вставить("Роль",НоваяРоль);
//		Иначе
//			Копия.Вставить(Элемент.Ключ,Элемент.Значение);
//		КонецЕсли
//	КонецЦикла;
//	
//	Возврат Копия;
//КонецФункции	
Функция ЗначениеИТипСтавки(Ставка) Экспорт
	// Функция возвращает значение и тип ставки НДС
	СтрСтавка = Новый Структура;
	Попытка
		ИмяПеречисления = Ставка.Метаданные().Имя;
		Индекс = Перечисления[ИмяПеречисления].Индекс(Ставка);
		СтавкаСиноним = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления.Получить(Индекс).Синоним;
	Исключение
		Попытка
			СтавкаСиноним = Строка(Ставка);
		Исключение
			СтавкаСиноним = "";
		КонецПопытки;
	КонецПопытки;
	
	Если Найти(СтавкаСиноним,"20%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","20");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"10%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18% / 118%") > 0 или Найти(СтавкаСиноним,"18/118") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18/118");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;        
	ИначеЕсли Найти(СтавкаСиноним,"10% / 110%") > 0 или Найти(СтавкаСиноним,"10/110") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10/110");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;            
	ИначеЕсли Найти(СтавкаСиноним,"0%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","0");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	Иначе
		СтрСтавка.Вставить("Ставка","без НДС");
		СтрСтавка.Вставить("ТипСтавки","текст");
		Возврат СтрСтавка;	
	КонецЕсли;
	
КонецФункции
Функция сбисПолучитьСтавкуНДСЧисло(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = "10" или СтавкаНДС = "18" или СтавкаНДС = "20" или СтавкаНДС = "0" Тогда
		Возврат Число(СтавкаНДС);
		
	ИначеЕсли СтавкаНДС = "18/118" Тогда
		Возврат 18;
		
	ИначеЕсли СтавкаНДС = "10/110" Тогда
		Возврат 10;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
&НаКлиенте
Процедура сбисРаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата) Экспорт
	
	// Определяем сумму базы
	СуммаБазы = 0;
	
	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;
	
	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
			
			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;
			
			// Записываем результат
			ТаблицаРезультата[Индекс]["Сумма"] = Формат(ШагРаспределения, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
			
			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Функция сбисРаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
	УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;
	
	Возврат МассивСумм;
	
КонецФункции

//Блок функций, использующихся в ини файлах
&НаКлиенте
Функция сбисИдентификаторУчастника(Контекст) Экспорт
	МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисИдентификаторУчастника(МестныйКэш,Контекст.Сторона_ИНН,Контекст.Сторона_КПП);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции
&НаКлиенте
Функция сбисПодписант(Контекст) Экспорт
	МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисПодписант(МестныйКэш,Контекст.Сторона_ИНН);
	Иначе
		Возврат Новый Структура("Должность,ФИО,ИНН");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьНомерДокумента(Контекст) Экспорт 
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	УдалятьПользовательскийПрефикс = ГлавноеОкно.УдалятьПользовательскийПрефикс;
	УдалятьПрефиксИнформационнойБазы = ГлавноеОкно.УдалятьПрефиксИнформационнойБазы;
	Возврат сбисНомерДокументаНаПечать(Контекст.Документ,УдалятьПрефиксИнформационнойБазы,УдалятьПользовательскийПрефикс, сбисДобавитьЗначениеПослеНомера(Контекст)); 
КонецФункции
//1173125472 Функция возвращает строку, для добавления после номера документа.
&НаКлиенте
Функция сбисДобавитьЗначениеПослеНомера(Контекст)
	
	СтрокаВозврат	= "";
	Если	Контекст.Свойство("ИндексОбособленногоПодразделения")
		И	ЗначениеЗаполнено(Контекст.ИндексОбособленногоПодразделения)	Тогда
			Если	ТипЗнч(Контекст.ИндексОбособленногоПодразделения)	= Тип("Число")	Тогда
				СтрокаВозврат	= Строка(Формат(Контекст.ИндексОбособленногоПодразделения, "ЧГ=0"));
			Иначе
				СтрокаВозврат	= СокрЛП(Строка(Контекст.ИндексОбособленногоПодразделения));
			КонецЕсли
	КонецЕсли;
		
	Возврат	СтрокаВозврат;	
	
КонецФункции
&НаКлиенте
Функция сбисНомерИсходногоДокументаНаПечать(Контекст) Экспорт 
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	УдалятьПользовательскийПрефикс = ГлавноеОкно.УдалятьПользовательскийПрефикс;
	УдалятьПрефиксИнформационнойБазы = ГлавноеОкно.УдалятьПрефиксИнформационнойБазы;
	Возврат сбисНомерДокументаНаПечать(Контекст.ИсходныйДокумент,УдалятьПрефиксИнформационнойБазы,УдалятьПользовательскийПрефикс); 
КонецФункции
&НаКлиенте
Функция сбисНомерОснованияНаПечать(Контекст) Экспорт 
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	УдалятьПользовательскийПрефикс = ГлавноеОкно.УдалятьПользовательскийПрефикс;
	УдалятьПрефиксИнформационнойБазы = ГлавноеОкно.УдалятьПрефиксИнформационнойБазы;
	Возврат сбисНомерДокументаНаПечать(Контекст.ДокОснование,УдалятьПрефиксИнформационнойБазы,УдалятьПользовательскийПрефикс); 
КонецФункции
Функция сбисНомерДокументаНаПечать(Документ,УдалятьПрефиксИнформационнойБазы=Ложь,УдалятьПользовательскийПрефикс=Ложь,Постфикс	= "") Экспорт 
	
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда 
		Попытка 
			// Функция ПолучитьНомерНаПечать(Знач НомерОбъекта, УдалитьПрефиксИнформационнойБазы = Ложь, УдалитьПользовательскийПрефикс = Ложь) 
			НомерДокумента = Вычислить("ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, УдалятьПрефиксИнформационнойБазы, УдалятьПользовательскийПрефикс)"); 
		Исключение 
			НомерДокумента = Документ.Номер; 
		КонецПопытки; 
	Иначе 
		Попытка 
			НомерДокумента = Вычислить("ОбщегоНазначения.ПолучитьНомерНаПечать(Документ)"); 
		Исключение 
			НомерДокумента = Документ.Номер; 
		КонецПопытки; 
	КонецЕсли; 
	
	//1173125472 для добавления значения после номера документа.
	Если	Не	ПустаяСтрока(Постфикс)	Тогда
		НомерДокумента	= Строка(НомерДокумента)	+ "/" + Постфикс;
	КонецЕсли;
	
	Возврат НомерДокумента; 
КонецФункции
&НаКлиенте
Процедура сбисПроверитьПолеАдреса (АдрСтрук, Название, Поле,Формат)	
	// Функция проверяет поле адреса на соответствие формату	
	Если СтрДлина(Поле) <= Формат тогда
		АдрСтрук.Вставить(Название,Поле);
	Иначе
		ВызватьИсключение("");
	КонецЕсли;
КонецПроцедуры
// alo << изменение по кадровым документам
&НаКлиенте
Функция сбисПолучитьАдрес(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресЮЛ") и ЗначениеЗаполнено(Контекст.АдресЮЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресЮЛ);
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФЛ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтруктуруАдрес(АдресРег) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Адрес = Новый Структура;
// alo УКД <<
	Адрес.Вставить("Тип","Юридический");
	если типЗнч(АдресРег) <> тип("Строка") тогда 
		Адрес.Вставить("АдрТекст",АдресРег.Представление);
	КодРегион = "";	
	Если АдресРег.Поле2 <> "" Тогда
		КодРегион = ПолучитьКодРегионаПоНазванию(АдресРег.Поле2);
	КонецЕсли;
	Попытка
		Если КодРегион = "" Тогда
			ВызватьИсключение("")
		КонецЕсли;
		АдрСтрук = Новый Структура;
		сбисПроверитьПолеАдреса(АдрСтрук, "Индекс", АдресРег.Поле1,6);
		сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион", КодРегион,2);
		сбисПроверитьПолеАдреса(АдрСтрук, "Район", АдресРег.Поле3,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Город", АдресРег.Поле4,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт", АдресРег.Поле5,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Улица", АдресРег.Поле6,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Дом", АдресРег.Поле7,8);
		сбисПроверитьПолеАдреса(АдрСтрук, "Корпус", АдресРег.Поле8,8);
		сбисПроверитьПолеАдреса(АдрСтрук, "Кварт", АдресРег.Поле9,8);
		Адрес.Вставить("АдрРФ",АдрСтрук);
		
	Исключение
			Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(,АдресРег.Представление));
	КонецПопытки;	
	иначе
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(,АдресРег));
	конецесли;
//  УКД alo >>
	Возврат Адрес;
КонецФункции
&НаКлиенте
Функция сбисСтруктураАдрИно(КодСтраны,Представление) Экспорт   // alo вставлена для УКД
	АдрИно=Новый Структура;
	АдрИно.Вставить("КодСтр",?(ЗначениеЗаполнено(КодСтраны),КодСтраны,"643"));
	АдрИно.Вставить("АдрТекст",Представление);
	Возврат АдрИно;
КонецФункции
&НаКлиенте
Функция сбисПолучитьАдресФакт(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресФакт") и ЗначениеЗаполнено(Контекст.АдресФакт) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФакт);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
// изменение по кадровым документам >> alo
&НаКлиенте
Функция ПолучитьАдресУП(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в табличной части КонтактнаяИнформация справочников Организации и Контрагенты
	Если Контекст.Свойство("Адрес") и ЗначениеЗаполнено(Контекст.Адрес) Тогда
		АдресЗапись = Контекст.Адрес;
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		АдресЗапись = Контекст.АдресФЛ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Адрес = Новый Структура;
// alo УКД <<
	Адрес.Вставить("Тип","Юридический");
	если типЗнч(АдресЗапись) <> тип("Строка") тогда 
		Адрес.Вставить("АдрТекст",АдресЗапись.Представление);
	
	АдресРег = АдресЗапись.ЗначенияПолей;
	сч = 1;
	Индекс="";
	КодРегион="";
	Регион="";
	Район="";
	Город="";
	НаселПункт="";
	Улица="";
	Дом="";
	Корпус="";
	Квартира="";
	КодСтраны="";
	Если Лев(АдресРег,21) = "<КонтактнаяИнформация" Тогда
		АдресСтруктураXML = ЗаполнитьСтруктуруФайла(АдресЗапись.ЗначенияПолей);
		Если АдресСтруктураXML.Свойство("КонтактнаяИнформация") и АдресСтруктураXML.КонтактнаяИнформация.Свойство("Состав") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Свойство("Состав") Тогда
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("ДопАдрЭл") Тогда
				Для Каждого АдрЭл Из АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.ДопАдрЭл Цикл
					Если АдрЭл.Свойство("ТипАдрЭл") и АдрЭл.ТипАдрЭл = "10100000" и АдрЭл.Свойство("Значение") Тогда
						Индекс = АдрЭл.Значение;
					ИначеЕсли АдрЭл.Свойство("Номер") и АдрЭл.Номер.Свойство("Тип") и АдрЭл.Номер.Свойство("Значение") Тогда
						Если АдрЭл.Номер.Тип = "1010" или АдрЭл.Номер.Тип = "1020" или АдрЭл.Номер.Тип = "1030" Тогда
							Дом = АдрЭл.Номер.Значение;
						ИначеЕсли АдрЭл.Номер.Тип = "1040" или АдрЭл.Номер.Тип = "1050" или АдрЭл.Номер.Тип = "1060" или АдрЭл.Номер.Тип = "1070" или АдрЭл.Номер.Тип = "1080" Тогда
							Корпус = АдрЭл.Номер.Значение;
						ИначеЕсли АдрЭл.Номер.Тип = "2010" или АдрЭл.Номер.Тип = "2020" или АдрЭл.Номер.Тип = "2030" или АдрЭл.Номер.Тип = "2040" или АдрЭл.Номер.Тип = "2050" Тогда
							Квартира = АдрЭл.Номер.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("Город") Тогда
				Если ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Город) = Тип("Структура") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Город.Свойство("Параметр") Тогда
				Город = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Город.Параметр;
				ИначеЕсли ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Город) = Тип("Строка") Тогда
					Город = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Город;
				КонецЕсли;
			КонецЕсли;
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("СубъектРФ") Тогда
				Если ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СубъектРФ) = Тип("Структура") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СубъектРФ.Свойство("Параметр") Тогда
				Регион = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СубъектРФ.Параметр;
				ИначеЕсли ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СубъектРФ) = Тип("Строка") Тогда
					Регион = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СубъектРФ;
				КонецЕсли;
			КонецЕсли;
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("НаселПункт") Тогда
				Если ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.НаселПункт) = Тип("Структура") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.НаселПункт.Свойство("Параметр") Тогда
				НаселПункт = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.НаселПункт.Параметр;
				ИначеЕсли ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.НаселПункт) = Тип("Строка") Тогда
					НаселПункт = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.НаселПункт;
			КонецЕсли;
			КонецЕсли;
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("Улица") Тогда
				Если ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Улица) = Тип("Структура") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Улица.Свойство("Параметр") Тогда
				Улица = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Улица.Параметр;
				ИначеЕсли ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Улица) = Тип("Строка") Тогда
					Улица = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Улица;
			КонецЕсли;
			КонецЕсли;
			Если АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.Свойство("СвРайМО") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Свойство("Район") Тогда
				Если ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Район) = Тип("Структура") и АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Район.Свойство("Параметр") Тогда
				Район = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Район.Параметр;
				ИначеЕсли ТипЗнч(АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Район) = Тип("Строка") Тогда
					Район = АдресСтруктураXML.КонтактнаяИнформация.Состав.Состав.СвРайМО.Район;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Пока сч<=СтрЧислоСтрок(АдресРег) Цикл
			ЭлементАдреса = СтрПолучитьСтроку(АдресРег, сч);
			сч = сч+1;
			Если Найти(нрег(ЭлементАдреса), "индекс=") Тогда
				Индекс = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "кодрегиона=") Тогда
				КодРегион = Сред(ЭлементАдреса, 12);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "регион=") Тогда
				Регион = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "район=") Тогда
				Район = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "город=") Тогда
				Город = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "населенныйпункт=") Тогда
				НаселПункт = Сред(ЭлементАдреса, 17);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "улица=") Тогда
				Улица = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "дом=") Тогда
				Дом = Сред(ЭлементАдреса, 5);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "корпус=") Тогда
				Корпус = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "квартира=") Тогда
				Квартира = Сред(ЭлементАдреса, 10);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "кодстраны=") Тогда
				КодСтраны = Сред(ЭлементАдреса, 11);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если КодРегион = "" и Регион <> "" Тогда
		КодРегион = ПолучитьКодРегионаПоНазванию(Регион);
	КонецЕсли;	
	
	Попытка
		Если КодРегион = "" Тогда
			ВызватьИсключение("")
		КонецЕсли;
		АдрСтрук = Новый Структура;
		сбисПроверитьПолеАдреса(АдрСтрук, "Индекс", Индекс,6);
		сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион", КодРегион,2);
		сбисПроверитьПолеАдреса(АдрСтрук, "Район", Район,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Город", Город,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт", НаселПункт,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Улица", Улица,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Дом", Дом,8);
		сбисПроверитьПолеАдреса(АдрСтрук, "Корпус", Корпус,8);
		сбисПроверитьПолеАдреса(АдрСтрук, "Кварт", Квартира,8);
		Адрес.Вставить("АдрРФ",АдрСтрук);
		
	Исключение
			Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(КодСтраны,АдресЗапись.Представление)); // alo УКД
	КонецПопытки;
	иначе
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(,АдресЗапись));
	конецесли;
//  УКД alo >>
	Возврат Адрес;
КонецФункции
&НаКлиенте 
Функция ПолучитьТелефонБГУ2(Контекст) Экспорт 
	// Функция вычисляет номер телефона в универсальном формате (3.01) 
	// Используется для конфигураций, где Контрагенты это ссылка на справочник ЮрЛица или ФизЛица (БГУ 2.0,...) 
	Если Контекст.Свойство("Телефон") и ЗначениеЗаполнено(Контекст.Телефон) Тогда 
		Возврат Контекст.Телефон.Представление; 
	ИначеЕсли Контекст.Свойство("ТелефонФЛ") и ЗначениеЗаполнено(Контекст.ТелефонФЛ) Тогда 
		Возврат Контекст.ТелефонФЛ.Представление; 
	Иначе 
		Возврат Неопределено; 
	КонецЕсли; 
КонецФункции
Функция ПолучитьКодРегионаПоНазванию(НазваниеРегиона) Экспорт
	// функция возвращает код региона по названию из регистра сведений АдресныйКлассификатор
	ИмяРегистра = ?(Метаданные.РегистрыСведений.Найти("АдресныеОбъекты") <> Неопределено, "АдресныеОбъекты", "АдресныйКлассификатор");
	ИмяУровня = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента",?(Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента","Уровень"));
	НазваниеКода = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодСубъектаРФ") <> Неопределено,"КодСубъектаРФ",?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде"));
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	| АдресныйКлассификатор."+НазваниеКода+" КАК КодРегион
	|ИЗ
	| РегистрСведений."+ИмяРегистра+" КАК АдресныйКлассификатор
	|ГДЕ
	| АдресныйКлассификатор."+ИмяУровня+" = 1
	|И АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &НазваниеРегиона";
	Запрос.УстановитьПараметр("НазваниеРегиона", НазваниеРегиона);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодРегион = Выборка.КодРегион;
		Если Число(КодРегион)<10 Тогда
			КодРегион = "0"+Строка(КодРегион);
		КонецЕсли;
		Возврат КодРегион;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции
&НаКлиенте
Функция сбисВычислитьЦену(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Если Контекст.СуммаВключаетНДС Тогда
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьЦенуСНДС(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма+СуммаНДС), (Сумма+СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредЦену(Контекст) Экспорт 
	// функция рассчитывает цену без НДС до корректировки
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(?(Число(Контекст.ПредСтрТабл_Кол_во) = 0, (Контекст.ПредСтрТабл_Сумма-Контекст.СуммаНДСДо), (Контекст.ПредСтрТабл_Сумма-Контекст.СуммаНДСДо) / Контекст.ПредСтрТабл_Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.ЦенаДо,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьРасхождениеЦены(Контекст) Экспорт 
	// функция рассчитывает цену без НДС до корректировки
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(?(Число(Контекст.Расхождение_Кол_во) = 0, (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС), (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС) / Контекст.Расхождение_Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Расхождение_Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
Функция ПолучитьНазваниеОснования(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Возврат Контекст.Договор_Название;
	Иначе
		Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
			НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
			ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
			ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
			ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
			Возврат НазваниеНомер+ДатаСделки;
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьНазваниеСделки(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
		НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
		ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
		ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
		ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
		Возврат НазваниеНомер+ДатаСделки;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьДатуОснованияИзНазвания(Контекст) Экспорт
	ПозицияДаты = Найти(Контекст.Основание_Название, " от ");
	Если ПозицияДаты>0 Тогда
		ДатаСтрокой = Сред(Контекст.Основание_Название, ПозицияДаты+4, 10);
		Попытка
			ДатаОсн = Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
			Возврат ДатаСтрокой
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	Возврат "";
КонецФункции
Функция сбисНайтиСвязанныйСчет(Контекст) Экспорт
	СтруктураСчета = Новый Структура("Дата,Номер");
	Запрос = Новый Запрос("ВЫБРАТЬ 
	|	СчетНаОплатуПокупателю.Номер, 
	|	СчетНаОплатуПокупателю.Дата
	|ИЗ 
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю 
	|ГДЕ 
	|	СчетНаОплатуПокупателю.ЗаказПокупателя = &Сделка ИЛИ СчетНаОплатуПокупателю.Ссылка = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Контекст.Сделка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураСчета.Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");	
		СтруктураСчета.Номер = Выборка.Номер;
	КонецЕсли;
	Возврат СтруктураСчета;
КонецФункции
Функция ПолучитьНаименованиеУчережденияБГУ(Контекст) Экспорт
	// Функция возвращает название гос. учреждения	
	Если ЗначениеЗаполнено(Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст) = 1 Тогда
		НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст;
	Иначе	
		Если Контекст.ЛицевойСчет.ТипЛицевогоСчета = Перечисления.ТипыЛицевыхСчетов.Казначейский Тогда
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + ", л/с " + Контекст.ЛицевойСчет.Код + ", " + Контекст.Наименование;
		Иначе
			ДопНомерСчета = ", л/с " + Контекст.ЛицевойСчет.Код;
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + " (" + Контекст.Наименование + ДопНомерСчета + ")";
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаимСтороны;
	
КонецФункции
функция НомерИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает номер исправления исходного СФ (для бухгалтерии гос. учреждений)
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Контекст.ДокОснование.НомерИсправления;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
функция ДатаИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает дату исправления исходного СФ (для бухгалтерии гос. учреждений)	
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Формат(Контекст.ДокОснование.Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНоменклатуры(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	Если Контекст.Свойство("РеквизитСопоставленияНоменклатуры") и Контекст.РеквизитСопоставленияНоменклатуры="Код" Тогда
		Возврат ОпределитьКодНоменклатуры(Контекст);
	Иначе
		Возврат ОпределитьИдентификаторНоменклатурыНаСервере(Контекст);	
	КонецЕсли;
КонецФункции
Функция ОпределитьИдентификаторНоменклатурыНаСервере(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	ИДТовара = строка(Контекст.Номенклатура.УникальныйИдентификатор());
	ИДХарактеристики = "";
	ИДУпаковки = "";
	Если Контекст.Свойство("Характеристика") Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.Характеристика) Тогда
				ИДХарактеристики = Контекст.Характеристика.УникальныйИдентификатор();
			Иначе
				ИДХарактеристики = "";
			КонецЕсли;
		Исключение
			ИДХарактеристики = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзмУпаковки") и ЗначениеЗаполнено(Контекст.ЕдИзмУпаковки) Тогда
		Попытка
			ИДУпаковки = Контекст.ЕдИзмУпаковки.УникальныйИдентификатор();
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзм") и ИДУпаковки = "" Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.ЕдИзм) Тогда
				ИДУпаковки = Контекст.ЕдИзм.УникальныйИдентификатор();
			Иначе
				ИДУпаковки = "";
			КонецЕсли;
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);		
КонецФункции
&НаКлиенте
Функция ОпределитьКодНоменклатуры(Контекст) Экспорт
	// Функция возвращает код номенклатуры. 
	// Данный код используется при сопоставлении номенклатуры
	Если Контекст.Свойство("Номенклатура_Код") Тогда   // в случае, если ТаблДок_Код вычисляется с помощью функции
		ИДТовара = СокрЛП(Контекст.Номенклатура_Код);
	Иначе
		ИДТовара = СокрЛП(Контекст.ТаблДок_Код);
	КонецЕсли;
	Возврат ИДТовара;	
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры контрагента (если есть сопоставление по номенклатуре) 
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЗначениеЗаполнено(ГлавноеОкно.Кэш) Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьИдентификаторНоменклатурыПоставщика",ГлавноеОкно.Кэш.ФормаРаботыСНоменклатурой,"", ГлавноеОкно.Кэш);
		Попытка
			стрКонтрагент = сбисЗаполнитьСтруктуруКонтрагента(Контекст.Контрагент);
			стрНоменклатура = Новый Структура("Номенклатура,Характеристика", Контекст.Номенклатура,?(Контекст.Свойство("Характеристика"),Контекст.Характеристика,Неопределено));
			Возврат фрм.ПолучитьИдентификаторНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, ГлавноеОкно.КаталогНастроек, ГлавноеОкно.Кэш.Ини);	
		Исключение
			Возврат "";		
		КонецПопытки;
	Иначе
		Возврат "";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьКодНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем код
		Код = Контекст.Номенклатура_Код;
	КонецЕсли;
	Возврат Код;
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем идентификатор
		Код = ОпределитьИдентификаторНоменклатуры(Контекст);
	КонецЕсли;
	Возврат Код;
КонецФункции
Функция сбисЗаполнитьСтруктуруКонтрагента(Контрагент)
	стрКонтрагент = Новый Структура;
	Если СтрДлина(СокрЛП(Контрагент.Инн))=12 Тогда
		СвФЛ = Новый Структура;
		стрКонтрагент.Вставить("СвФЛ",СвФЛ);
		стрКонтрагент.СвФЛ.Вставить("ИНН",Контрагент.Инн);
	Иначе
		СвЮЛ = Новый Структура;
		стрКонтрагент.Вставить("СвЮЛ",СвЮЛ);
		стрКонтрагент.СвЮЛ.Вставить("ИНН",Контрагент.Инн);
		стрКонтрагент.СвЮЛ.Вставить("КПП",Контрагент.КПП);
	КонецЕсли;
	Возврат стрКонтрагент;	
КонецФункции
&НаКлиенте
Функция сбисЗаполнитьДанныеНоменклатуры(Контекст) Экспорт
	Попытка
		
		НашаНоменклатура = РассчитатьЗначение("НашаНоменклатура", Контекст.Ини);
		Идентификатор = Контекст.СтрокаФайла[НашаНоменклатура];
		Возврат сбисЗаполнитьДанныеНоменклатурыНаСервере(Идентификатор);	
	Исключение
	КонецПопытки
КонецФункции
Функция сбисЗаполнитьДанныеНоменклатурыНаСервере(Идентификатор) Экспорт
	Попытка
		Результат = Новый Структура("Номенклатура, Характеристика");
		Если Найти(Идентификатор,"#")>0 Тогда   // Ид номенклатуры, характеристики, упаковки, разделенные #
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,"#");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДТовара));	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХарактеристики));	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		ИначеЕсли Найти(Идентификатор,":")>0 Тогда   // Код номенклатуры, характеристики, упаковки, разделенные :
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,":");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ИДТовара);	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ИДХарактеристики);	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 и НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		Иначе   // код номенклатуры
			Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Идентификатор);	
			Если НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки
КонецФункции
Функция сбисПроверитьЗаполнитьШтрихкод(Контекст) Экспорт
	Если Контекст.Ини.Свойство("ШтрихкодыНоменклатуры") и Контекст.Ини.ШтрихкодыНоменклатуры.Свойство("Отбор") и Лев(Контекст.Ини.ШтрихкодыНоменклатуры.Значение, 16) = "РегистрыСведений" и Контекст.СтрокаФайла.Свойство("GTIN") Тогда
		ИмяРегистра = Сред(Контекст.Ини.ШтрихкодыНоменклатуры.Значение, 18);
		ИмяРекШтрихкод = Сред(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение, Найти(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение,".")+1);
		Запрос = Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ *
		|ИЗ
		|   РегистрСведений."+ИмяРегистра+" КАК Рег
		|ГДЕ
		| ";
		ТекстСообщения = "";
		Отбор = Новый Структура;
		Для Каждого Элемент Из Контекст.Ини.ШтрихкодыНоменклатуры.Отбор Цикл
			ЗначениеОтбора = РассчитатьЗначениеНаСервере(Элемент.Значение,Контекст);
			Если ЗначениеОтбора<>Неопределено Тогда
				Отбор.Вставить(Элемент.Ключ,ЗначениеОтбора);
				Запрос.УстановитьПараметр(Элемент.Ключ, ЗначениеОтбора);
				Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				ТекстСообщения = ТекстСообщения + Элемент.Ключ+" = "+строка(ЗначениеОтбора)+ ", "
			КонецЕсли;
		КонецЦикла;
		ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-2);
		Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
		НаборЗаписей = Запрос.Выполнить().Выбрать();
		Если НаборЗаписей.Количество()=0 Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			Для Каждого ЭлементИни Из Контекст.Ини Цикл
				Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
					ИмяРек = Сред(ЭлементИни.Ключ,23);
					Если Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти(ИмяРек)<>Неопределено Тогда
						Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
							НаборЗаписей.Отбор[ИмяРек].Установить(ЭлементИни.Значение.РассчитанноеЗначение);
						ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
							ЗначениеРеквизита = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
							НаборЗаписей.Отбор[ИмяРек].Установить(ЗначениеРеквизита);
							ЭлементИни.Значение.Вставить("РассчитанноеЗначение",ЗначениеРеквизита);
						Конецесли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Прочитать();	
			Если НаборЗаписей.Количество()=0 Тогда
				НоваяЗаписьНабора = НаборЗаписей.Добавить();
				Для Каждого ЭлементИни Из Контекст.Ини Цикл
					Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
						ИмяРек = Сред(ЭлементИни.Ключ,23);
						Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
							НоваяЗаписьНабора[ИмяРек] = ЭлементИни.Значение.РассчитанноеЗначение;
						ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
							НоваяЗаписьНабора[ИмяРек] = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
						Конецесли;
					КонецЕсли;
				КонецЦикла;
				НаборЗаписей.Записать();
				Сообщить("Создана запись в регистре сведений "+ ИмяРегистра+" для штрихкода "+Контекст.СтрокаФайла.GTIN);
			Иначе
				Сообщить("Штрихкод "+Контекст.СтрокаФайла.GTIN+ " указан у другой номенклатуры/характеристики/единицы измерения");
			КонецЕсли;
		Иначе
			Если НаборЗаписей.Количество()>1 Тогда
				Сообщить("Для набора данных "+ ТекстСообщения+ " указано несколько штрихкодов. Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
			Иначе
				Пока НаборЗаписей.Следующий() Цикл
					Если НаборЗаписей[ИмяРекШтрихкод]<>Контекст.СтрокаФайла.GTIN Тогда
						Сообщить("Для набора данных "+ ТекстСообщения+ " указан штрихкод "+НаборЗаписей[ИмяРекШтрихкод]+", а во входящем документе "+Контекст.СтрокаФайла.GTIN+". Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли
		КонецЕсли;		
	КонецЕсли;
КонецФункции
//&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойстваОбъектов(Свойства) Экспорт
	Для Каждого Элемент Из Свойства Цикл
		сбисЗаполнитьДопСвойствоОбъекта(Элемент.Объект1С, Элемент.ИмяСвойства, Элемент.ЗначениеСвойства, ?(Элемент.Свойство("НазначениеСвойства"), Элемент.НазначениеСвойства, Неопределено));	
	КонецЦикла;
КонецФункции
//&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойствоОбъекта(Объект1С, ИмяСвойства, ЗначениеСвойства, НазначениеСвойства) Экспорт
	Свойство = ДобавитьЗаписьВПланВидовХарактеристик(ИмяСвойства, НазначениеСвойства);
	Если Свойство<>Ложь Тогда
		ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов();
		НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект1С);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.Объект = Объект1С;
			НоваяЗаписьНабора.Свойство = Свойство.Ссылка;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		КонецЕсли;
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецФункции
Функция ПолучитьНаименованиеУслуги(Контекст) Экспорт
	// Функция возвращает наименование услуги	
	НаименованиеУслуги = ?(ЗначениеЗаполнено(Контекст.Описание),Контекст.Описание,Контекст.Название);
	Возврат НаименованиеУслуги;
КонецФункции
функция ОпределитьНазваниеУпаковки(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции
функция ОпределитьКоличествоВОдномМесте(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.Упаковка.Коэффициент, "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции
Функция ОпределитьМассуБрутто(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Если ЗначениеЗаполнено(Контекст.Упаковка_КолМест) и Число(Контекст.Упаковка_КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(Контекст.Упаковка_КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;	
	
КонецФункции
Функция ОпределитьМассуНетто(Контекст) Экспорт
	// Функция опеределяет массу нетто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Возврат Формат(Кол_во * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
	КонецЕсли;	
	
КонецФункции
Функция ПараметрыМассыПрописью(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения	
	КоэффициентПересчетаВТонны     = Константы.КоэффициентПересчетаВТонны.Получить();
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции
функция ОпределитьМассуИтогПрописью(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
функция ОпределитьМассуИтогПрописьюНеупрПрил(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью для обычных приложений	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(Контекст.ЕдиницаИзмеренияВеса) И МассаИтог > 0 Тогда
		Возврат ЧислоПрописью(МассаИтог, ,",,,,,,,,0")+ " " +Контекст.ЕдиницаИзмеренияВеса.Наименование + ".";
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

//// УТ 11.2+
&НаКлиенте
функция ОпределитьКоличествоВОдномМестеУТ11_2(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке 
	Если Контекст.Упаковка.Пустая() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.УпаковкаЧислитель/?(Контекст.УпаковкаЗнаменатель = 0,1,Контекст.УпаковкаЗнаменатель), "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьМассуБруттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Если ЗначениеЗаполнено(Контекст.Упаковка_КолМест) и Число(Контекст.Упаковка_КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(Контекст.Упаковка_КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(ОпределитьВесНоменклатурыУТ11_2(Контекст)), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ОпределитьВесНоменклатурыУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	Если Контекст.ВесИспользовать тогда
		ВесЧислитель = Контекст.ВесЧислитель;
		ВесЗнаменатель = Контекст.ВесЗнаменатель;
		Если ВесЗнаменатель=0 Тогда
			Возврат ВесЧислитель;
		Иначе
			Вес = Число(ВесЧислитель/ВесЗнаменатель); 
			Возврат Формат(Вес, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
		КонецЕсли; 
		
	иначе
		возврат 0;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьМассуНеттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		ВесНетто = ОпределитьВесНоменклатурыУТ11_2(Контекст);
		Возврат Кол_во * Число(ВесНетто);
	КонецЕсли; 
	
КонецФункции
функция ОпределитьНазваниеУпаковкиУТ11_2(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара 
	Если Контекст.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции
&НаКлиенте
функция ОпределитьМассуИтогПрописьюУТ11_2(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью 
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописьюУТ11_2(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ПараметрыМассыПрописьюУТ11_2(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения 
	КоэффициентПересчетаВТонны     =  0.001;
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции

Функция ТекстЗапросаОтборПоАналитике()
	// Функция возвращает часть запроса для формирования табличной части акта сверки в конфигурации УТ11
	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции
функция сбисЗаполнитьТаблицуВзаиморасчетовУТ11(Контекст) Экспорт
	// Функция формирует табличную часть акта сверки для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст);
	Возврат ДанныеТЧ.ТабЧастьДокумента;
КонецФункции
функция сбисЗаполнитьНачальныйОстатокУТ11(Контекст) Экспорт
	// Функция возвращает остаток на начало периода сверки взаиморасчетов для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст);
	Возврат ДанныеТЧ.НачальныйОстаток;
КонецФункции
функция сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст)
	// Функция формирует данные акта сверки для конфигурации УТ11	
	ДанныеДокумента = Контекст.Документ;
	ТабЧастьДокумента = Новый Массив;
	НачальныйОстаток = 0;
	
	ЗапросНашихДанных = Новый Запрос;
	
	ТекстЗапроса = ТекстЗапросаОтборПоАналитике() + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента	КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента  КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|
	|ПОМЕСТИТЬ ДокументыИнтеркампани
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Комиссионер = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента 	КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ОрганизацияПолучатель = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(РеализацияТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|
	|ПОМЕСТИТЬ РасчетыСПартнерами
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказКлиента
	|				ИНАЧЕ
	|					ЗаказКлиента.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСКлиентамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугРеглУчет
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = РеализацияТоваровУслугРеглУчет.Ссылка
	|		И РеализацияТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказПоставщику
	|				ИНАЧЕ
	|					ЗаказПоставщику.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслугРеглУчет
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ПоступлениеТоваровУслугРеглУчет.Ссылка
	|		И ПоступлениеТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ГДЕ
	|	НЕ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата				КАК Период,
	|	ДанныеДокумента.Ссылка				КАК Документ,
	|	Расшифровка.НомерВходящегоДокумента	КАК Номер,
	|	Расшифровка.ДатаВходящегоДокумента	КАК Дата,
	|	Расшифровка.Поставщик				КАК Партнер,
	|	ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расшифровка.Заказ
	|	ИНАЧЕ
	|		Расшифровка.Заказ.Договор
	|	КОНЕЦ								КАК Договор,
	|	Расшифровка.ВалютаВзаиморасчетов	КАК Валюта,
	|	Истина								КАК ЭтоВходящийДокумент,
	|	Расшифровка.СуммаВзаиморасчетов		КАК СуммаДолгПартнера,
	|	0									КАК СуммаНашДолг,
	|	0									КАК СуммаНачальныйОстаток,
	|	0									КАК СуммаКонечныйОстаток,
	|	Неопределено						КАК ОрганизацияРеглУчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Расшифровка
	|		ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И (&НеИспользоватьОтборПоДоговору
	|		ИЛИ ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|			Расшифровка.Заказ
	|		ИНАЧЕ
	|			Расшифровка.Заказ.Договор
	|		КОНЕЦ = &Договор)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период				 		КАК Период,
	|	РасчетыСПартнерами.Документ				 		КАК Документ,
	|	РасчетыСПартнерами.Номер				 		КАК Номер,
	|	РасчетыСПартнерами.Дата					 		КАК Дата,
	|	%ПолеПартнер%
	|	%ПолеДоговор%
	|	РасчетыСПартнерами.Валюта				 		КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент	 		КАК ЭтоВходящийДокумент,
	|	СУММА(РасчетыСПартнерами.СуммаДолгПартнера)	 	КАК СуммаДолгПартнера,
	|	СУММА(РасчетыСПартнерами.СуммаНашДолг)			КАК СуммаНашДолг,
	|	СУММА(РасчетыСПартнерами.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(РасчетыСПартнерами.СуммаКонечныйОстаток)	КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет			КАК ОрганизацияРеглУчет
	|ИЗ
	|	РасчетыСПартнерами КАК РасчетыСПартнерами
	|
	|СГРУППИРОВАТЬ ПО
	|	Период, Документ, Номер, Дата, %Партнер% %Договор% Валюта, ЭтоВходящийДокумент, ОрганизацияРеглУчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|
	|ИТОГИ ПО
	|	%Партнер%
	|	%Договор%
	|	Валюта
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеПартнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "РасчетыСПартнерами.Партнер КАК Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Партнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеДоговор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "РасчетыСПартнерами.Договор КАК Договор,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Договор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "Договор,", ""));
	ЗапросНашихДанных.Текст = ТекстЗапроса;
	
	ЗапросНашихДанных.УстановитьПараметр("НачалоПериодаСверки", ДанныеДокумента.НачалоПериода);
	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки",	КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросНашихДанных.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(
	КонецДня(ДанныеДокумента.КонецПериода)+1,
	ВидГраницы.Исключая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		    ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		    ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	    ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	    ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));
	
	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ВыборкаНашихДанных = РезультатЗапросаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаНашихДанных = Неопределено;
	КонецЕсли;
	
	Если ВыборкаНашихДанных = Неопределено Тогда 
		Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);
	КонецЕсли;
	
	Пока ВыборкаНашихДанных.Следующий() Цикл
		
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			ВыборкаПоДетальнымРасчетам = ВыборкаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
				сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ВыборкаНашихДанных.Договор, НачальныйОстаток);
			КонецЦикла; 
		Иначе
			сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаНашихДанных, ДанныеДокумента, ,НачальныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);	
КонецФункции
Функция сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаДетальныхЗаписей, ДанныеДокумента, ТекущийДоговор = Неопределено,НачальныйОстаток)
	// Функция заполняет данные по строкам акта сверки для конфигурации УТ11	
	ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
	
	ПервыйПроход = Истина;
	Пока ДетальныеЗаписи.Следующий() Цикл
		
		Если ДетальныеЗаписи.Документ = Неопределено Тогда
			Если ДетальныеЗаписи.Период = ДанныеДокумента.НачалоПериода Тогда
				НачальныйОстаток = НачальныйОстаток + ДетальныеЗаписи.СуммаНачальныйОстаток;
				//Иначе
				//	КонечныйОстаток = КонечныйОстаток + ДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЕсли;
		Иначе
			
			//Если ПервыйПроход
			//	И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
			//	
			//	ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'");
			//	Если НачальныйОстаток > 0 Тогда
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
			//	Иначе
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
			//	КонецЕсли;				
			//	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
			//	
			//КонецЕсли;
			
			НоваяСтрока = Новый Структура;
			
			НоваяСтрока.Вставить("ТаблДок_Дата", Формат(ДетальныеЗаписи.Дата, "ДФ='дд.ММ.гггг'"));
			НоваяСтрока.Вставить("ТаблДок_Номер", ДетальныеЗаписи.Номер);
			НоваяСтрока.Вставить("ДокументТабл", ДетальныеЗаписи.Документ); 
			НоваяСтрока.Вставить("ТаблДок_Дебет", ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрока.Вставить("ТаблДок_Кредит", ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрока.Вставить("ТаблДок_Раздел", "Отправитель");
			НоваяСтрока.Вставить("мОснование", Новый Структура("Договор", Новый Структура()));
			Основание = ?(ДанныеДокумента.РасшифровкаПоДоговорам, ТекущийДоговор, ДанныеДокумента.Договор);
			НоваяСтрока.мОснование.Договор.Вставить("Основание_Название",строка(Основание));
			НоваяСтрока.мОснование.Договор.Вставить("Основание",Основание);
			НоваяСтрока.мОснование.Договор.Вставить("Основание_Номер",Основание.Номер);
			НоваяСтрока.мОснование.Договор.Вставить("Основание_Дата",Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
			ТабЧастьДокумента.Добавить(НоваяСтрока);
			
			НоваяСтрокаПоДаннымКонтрагента = Новый Структура;
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дата", Формат(ДетальныеЗаписи.Дата, "ДФ='дд.ММ.гггг'"));
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Номер", ДетальныеЗаписи.Номер);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ДокументТабл", ДетальныеЗаписи.Документ); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дебет", ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Кредит", ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Раздел", "Получатель");
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мОснование", Новый Структура("Договор", Новый Структура()));
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Название",строка(Основание));
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание",Основание);
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Номер",Основание.Номер);
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Дата",Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
			ТабЧастьДокумента.Добавить(НоваяСтрокаПоДаннымКонтрагента);
			
			ПервыйПроход = Ложь;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТабЧастьДокумента;
	
КонецФункции
&НаКлиенте
Функция сбисФорматСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "счФактКор";
	Иначе
		Возврат "СчФктр";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПодтипСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "1115127";
	Иначе
		Возврат "1115125";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисИмяФайлаСФ(Контекст) Экспорт
	// Функция определяет префикс имени файла выгружаемого счета-фактуры (обычный или корректировочный)		
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "ON_KORSCHFDOPPR_";
	Иначе
		Возврат "ON_SCHFDOPPR_";	
	КонецЕсли;
КонецФункции
Функция сбисПересчитатьСФВВалютеУчета(Контекст) Экспорт
	Если Контекст.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию и Контекст.ДоговорРасчетыУЕ = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
Функция сбисИтогСуммаПоДокументамРасчетовСКонтрагентом(Контекст) Экспорт
	ЗапросКурсАванса = Новый Запрос;
	ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", Контекст.Документ);
	ЗапросКурсАванса.Текст =
	"ВЫБРАТЬ
	|	Док.СуммаВзаиморасчетов,
	|	Док.СуммаРегл
	|ИЗ 
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
	|ГДЕ Док.Ссылка = &ДокументСсылка
	|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
	
	Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		ВыборкаСуммаРегл           = Выборка.СуммаРегл;
	Иначе
		ВыборкаСуммаВзаиморасчетов = 0;
		ВыборкаСуммаРегл           = 0;
	КонецЕсли;
	НеоплаченнаяСумма = Контекст.Документ.СуммаДокумента - ВыборкаСуммаВзаиморасчетов;
	НеоплаченнаяСуммаРегл = Окр(НеоплаченнаяСумма*Контекст.КурсВзаиморасчетов/?(Контекст.КратностьВзаиморасчетов=0,1,Контекст.КратностьВзаиморасчетов),2);
	Возврат НеоплаченнаяСуммаРегл+ВыборкаСуммаРегл;
КонецФункции
Функция сбисИтогСуммаПоРегиструБухгалтерииТовары(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугТовары.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ГДЕ
	|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Текст = Текст +") И Хозрасчетный.Содержание <> &Содержание";
	Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции
Функция сбисИтогСуммаПоРегиструБухгалтерииУслуги(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугУслуги.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ГДЕ
	|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)";
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции
Функция сбисДатаПоступленияДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет дату документа-поступления в таб. части отчета комитенту		
	Если Контекст.Свойство("ПоступлениеДатаВх") и ЗначениеЗаполнено(Контекст.ПоступлениеДатаВх) Тогда
		Возврат Контекст.ПоступлениеДатаВх;
	Иначе
		Возврат Контекст.ПоступлениеДата;	
	КонецЕсли;
КонецФункции
Функция сбисНомерВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.НомерВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.НомерВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.НомерВходящегоДокумента;
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции
Функция сбисДатаВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.ДатаВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.ДатаВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции
Функция сбисСуммаНДСВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаНДСВознаграждения");
КонецФункции

Функция сбисСуммаВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаВознаграждения");
КонецФункции
Функция сбисИнфПередТаблСФотКомиссионера(Контекст) Экспорт
	// Функция формирует строку для вывода перед таб. частью в СФ, составленном комиссионером	
	Инф = "Составлена комиссионером(агентом):"+Контекст.мСторона.Грузополучатель.Сторона_Наименование+"ИНН/КПП: "+Контекст.мСторона.Грузополучатель.Сторона_ИНН+"/"+Контекст.мСторона.Грузополучатель.Сторона_КПП+","+Контекст.мСторона.Грузополучатель.Сторона_Адрес.АдрТекст;
	Возврат Инф
КонецФункции
Функция сбисРассчитатьЦену(Контекст) Экспорт
	Попытка
		СуммаСНДС = ?(Контекст.СтрТабл.Свойство("СуммаСНДС"),Контекст.СтрТабл.СуммаСНДС, Контекст.СтрТабл.Сумма); 
		Цена = ?((Не Контекст.СтрТабл.Свойство("Количество")) или Число(Контекст.СтрТабл.Количество) = 0, Окр(Число(СуммаСНДС), 2), Окр(Число(СуммаСНДС) / Число(Контекст.СтрТабл.Количество), 2));
		Возврат Цена;
	Исключение
	КонецПопытки;
КонецФункции
Функция УчитыватьНДС(Контекст) Экспорт
	// Функция определяет необходимость учитывать НДС в загружаемых документах	
	УчитыватьНДС = Ложь;
	Для каждого ИмяТаблЧасть из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		Если Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ) Тогда
			ТаблЧасть = Контекст.Документ[ИмяТаблЧасть.Ключ];
			//выбираем строки из табличной части
			Для каждого Стр из ТаблЧасть Цикл
				Если Стр.Свойство("СтавкаНДС") и нрег(Стр.СтавкаНДС) <> "без ндс" Тогда
					УчитыватьНДС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если УчитыватьНДС Тогда
			//если уже нашли строки в которых ставка <> "без ндс", то остальные табличные части не проверяем
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат УчитыватьНДС;
КонецФункции	
Функция ЗаполнитьЕдиницуИзмеренияНоменклатуры(Контекст) Экспорт
	// Функция возвращает единицу измерения для номенклатуры в загружаемом документе (для конфигураций КА, УПП, УТ10)	
	КлассификаторЕИ = РассчитатьЗначениеНаСервере("КлассификаторЕдиницИзмерения",Контекст);
	СпрЕИ = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения",Контекст);
	ЕИ = КлассификаторЕИ.НайтиПоКоду(Контекст.СтрТабл.ЕдиницаИзмерения, Истина);
	Если ЕИ <> Неопределено Тогда
		СпрЕИ = СпрЕИ.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", ЕИ, , Контекст.СтрТабл.Номенклатура);
	КонецЕсли;	
	Возврат СпрЕИ;	
КонецФункции
Функция ЗаполнитьЕдиницуИзмерения(Контекст) Экспорт
	// Функция возвращает единицу измерения для номенклатуры в загружаемом документе (для конфигураций БУХ)	
	СпрЕИ = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения",Контекст);
	ЕИ = СпрЕИ.НайтиПоКоду(Контекст.СтрТабл.ЕдиницаИзмерения, Истина);
	Возврат ЕИ;	
КонецФункции
Функция ЗаполнитьСоглашениеУТ11(Контекст) Экспорт
	// Функция заполняет соглашение в загружаемых документах для конфигурации УТ11	
	Партнер = Контекст.Документ.Контрагент.Партнер;
	
	Соглашение = неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов,ИсключитьГруппыСкладовДоступныеВЗаказах,ВыбранноеСоглашение", Истина, Истина, Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		Соглашение = Вычислить("ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер,ПараметрыОтбора)").соглашение;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции
Функция ЗаполнитьСоглашениеСКлиентомУТ11(Контекст) Экспорт
	// Функция заполняет соглашение в загружаемых заказах для конфигурации УТ11	
	Партнер = Контекст.Документ.Контрагент.Партнер;
	
	Соглашение = неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", Истина, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Документы.ЗаказКлиента.ПустаяСсылка());
		Соглашение = Вычислить("ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер,ПараметрыОтбора)").соглашение;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции
Функция ЗаполнитьМенеджераУТ11(Контекст) Экспорт
	// Функция заполняет менеджера в загружаемых документах для конфигурации УТ11	
	ИдПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	СпрПользователи = Справочники.Пользователи;
	Возврат СпрПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдПользователяИБ);
КонецФункции
Функция ЗаполнитьДоговорУТ11(Контекст) Экспорт
	// Функция заполняет договор в загружаемых документах для конфигурации УТ11	
	ДоговорПоУмолчанию = неопределено;
	Попытка
		Контекст.Документ.Вставить("Партнер", Контекст.Документ.Контрагент.Партнер);
		Контекст.Документ.Вставить("Договор", неопределено);
		ДоговорПоУмолчанию = Вычислить("ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат ДоговорПоУмолчанию;	
КонецФункции
Функция ЗаполнитьДоговорСКлиентомУТ11(Контекст) Экспорт
	// Функция заполняет договор в загружаемых заказах для конфигурации УТ11	
	ДоговорПоУмолчанию = неопределено;
	Попытка
		ДоговорПоУмолчанию = Вычислить("ПродажиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,Перечисления.ХозяйственныеОперации.РеализацияКлиенту)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат ДоговорПоУмолчанию;	
КонецФункции
Функция ЗаполнитьКодГТДУТ11(Контекст) Экспорт
	НомерГТД = ЗаполнитьНомерГТДУТ11(Контекст);
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат НомерГТД.Код;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьКодСтраныПроисхожденияУТ11(Контекст) Экспорт
	НомерГТД = ЗаполнитьНомерГТДУТ11(Контекст);
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат НомерГТД.СтранаПроисхождения.Код;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьНомерГТДУТ11(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ПОМЕСТИТЬ ВсеВидыЗапасов
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовКорректировкаВыручки КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовСписание КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВсеВидыЗапасов.НомерСтроки)                         КАК НомерСтроки,
	|	ВсеВидыЗапасов.АналитикаУчетаНоменклатуры                    КАК АналитикаУчетаНоменклатуры,
	|	ВсеВидыЗапасов.АналитикаУчетаНаборов                         КАК АналитикаУчетаНаборов,
	|	ВсеВидыЗапасов.Упаковка                                      КАК Упаковка,
	|	ВсеВидыЗапасов.НомерГТД                                      КАК НомерГТД,
	|	ВсеВидыЗапасов.ВидЗапасов                                    КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	ВсеВидыЗапасов КАК ВсеВидыЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВсеВидыЗапасов.АналитикаУчетаНаборов,
	|	ВсеВидыЗапасов.Упаковка,
	|	ВсеВидыЗапасов.НомерГТД,
	|	ВсеВидыЗапасов.ВидЗапасов;
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаДокумента.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|ГДЕ
	|		Аналитика.Номенклатура          = &Номенклатура
	|		И Аналитика.Характеристика        = &Характеристика
	|		И ТаблицаДокумента.Упаковка       = &Упаковка";
	
	Запрос.УстановитьПараметр("КорректировкаРеализации", Контекст.Документ);
	Запрос.УстановитьПараметр("Номенклатура", Контекст.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Контекст.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Контекст.Упаковка);
	
	ВидыЗапасов = Запрос.Выполнить().Выбрать();
	Пока ВидыЗапасов.Следующий() Цикл
		Возврат ВидыЗапасов.НомерГТД;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредЦенуУТ11(Контекст) Экспорт
	Если Контекст.СуммаВключаетНДС Тогда
		Кол_во = сбисВычислитьПредКоличествоУТ11(Контекст);
		Сумма = сбисВычислитьПредСуммуУТ11(Контекст);
		СуммаНДС = сбисВычислитьПредСуммуНДСУТ11(Контекст);
		ЦенаБезНДС = ?(Число(Кол_во) = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во);
		Возврат Формат(ЦенаБезНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
	Иначе
// alo <<
		если Контекст.свойство("Расхождение_Цена") тогда
		Возврат Формат(Контекст.Цена - Контекст.Расхождение_Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		иначе
			Кол_во = сбисВычислитьПредКоличествоУТ11(Контекст);
			Сумма = сбисВычислитьПредСуммуУТ11(Контекст);
			ЦенаБезНДС = ?(Число(Кол_во) = 0, Сумма, Сумма / Кол_во);
			Возврат Формат(ЦенаБезНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
		конецесли;
// >> alo
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредКоличествоУТ11(Контекст) Экспорт
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Возврат Формат(Кол_во - Число(Контекст.Расхождение_Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредСуммуУТ11(Контекст) Экспорт
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(Сумма - Контекст.Расхождение_Сумма,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредСуммуНДСУТ11(Контекст) Экспорт
	Попытка
		СуммаНДС = Число(Контекст.СуммаНДС);
	Исключение
		СуммаНДС = 0;
	КонецПопытки;
	Возврат Формат(СуммаНДС - Контекст.Расхождение_СуммаНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции

Функция ЗаполнитьДоговор(Контекст) Экспорт
	// Функция заполняет договор в загружаемых документах	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Контрагент = Контекст.Документ.Контрагент;
	Организация = Контекст.Документ.Организация;
	
	Попытка  // Сначала пытаемся найти договор по дате, номеру
		ДатаДоговора = Дата(Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорДата+" 00:00:00"); 
		НомерДоговора = Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорНомер;	      
		
		//Поиск договора по номеру дате
		Запрос = Новый Запрос;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Дата = &Дата
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
		Запрос.УстановитьПараметр("ВладелецДоговора", Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора", Организация);
		Запрос.УстановитьПараметр("Дата", ДатаДоговора);
		Запрос.УстановитьПараметр("Номер", НомерДоговора);	
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовыйДоговор = Выборка.Ссылка;
			Возврат НовыйДоговор;		
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	
	СписокВидовДоговора = Новый СписокЗначений;
	ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	Если ВидДоговора = Неопределено Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		СписокВидовДоговора.Добавить(ВидДоговора);
	КонецЕсли;
	СтруктураПараметров = Неопределено;
	
	Запрос = Новый Запрос;
	Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда    // основной договор в реквизите контрагента
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
		|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
		|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
		|ГДЕ
		|	&ТекстФильтра
		|
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ";
	Иначе   // основные договора в регистре сведений
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
		|			И ДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
		|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
		|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
		|ГДЕ
		|	&ТекстФильтра
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ"
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецДоговора", Контрагент);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Основной;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйДоговор;
	
КонецФункции	
Процедура ЗаполнитьСписокПартнераСРодителями(Партнер,СписокПартнераСРодителями) Экспорт
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Получить родителей партнера
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ДеревоИерархии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСписокПартнеровИзДерева(ДеревоИерархии.Строки, СписокПартнераСРодителями,Партнер);
	
КонецПроцедуры
Процедура ЗаполнитьСписокПартнеровИзДерева(СтрокиДерева, СписокПартнеров, Партнер)
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СписокПартнеров.Добавить(СтрокаДерева.Ссылка, СтрокаДерева.Наименование);
		Если СтрокаДерева.Ссылка <> Партнер Тогда
			ЗаполнитьСписокПартнеровИзДерева(СтрокаДерева.Строки, СписокПартнеров,Партнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ЗаполнитьСтавкуНДС(Контекст) Экспорт
	// Функция заполняет ставку НДС в загружаемых документах	
	Если (Найти(Контекст.СтрТабл.СтавкаНДС,"18/118")=1) или (Контекст.СтрТабл.СтавкаНДС = "15") Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли (Найти(Контекст.СтрТабл.СтавкаНДС,"10/110")=1) или (Контекст.СтрТабл.СтавкаНДС = "9") Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли Найти(Контекст.СтрТабл.СтавкаНДС,"18")=1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли Найти(Контекст.СтрТабл.СтавкаНДС,"10")=1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли Найти(Контекст.СтрТабл.СтавкаНДС,"0")=1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли нрег(Контекст.СтрТабл.СтавкаНДС) = "без ндс" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли (Контекст.СтрТабл.СтавкаНДС = Неопределено) Тогда
		Попытка
			//Рассчитаем ставку НДС
			Контекст.СтрТабл.СтавкаНДС = Строка(Окр(Число(Контекст.СтрокаФайла.НДС.Сумма) / (Число(Контекст.СтрокаФайла.Сумма)-Число(Контекст.СтрокаФайла.НДС.Сумма))*100));
			Возврат ЗаполнитьСтавкуНДС(Контекст);
		Исключение
			Возврат Перечисления.СтавкиНДС.БезНДС;
		КонецПопытки;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьВалюту(Контекст) Экспорт
	// Функция заполняет валюту в загружаемых документах	
	Валюты = Справочники.Валюты;
	Возврат Валюты.НайтиПоКоду(Контекст.Документ.Валюта);
КонецФункции
Функция сбисЗаполнитьБанкСчет(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.СтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции
Функция сбисЗаполнитьБанкСчетОрганизации(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Функция ИмяТЧВзаиморасчетов(Контекст) Экспорт
	// Функция определяет название табличной части акта сверки, в которую нужно загружать данные (для УТ11)	
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ДанныеКонтрагента";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ИмяТЧАктаСверки(Контекст) Экспорт
	// Функция определяет название табличной части акта сверки, в которую нужно загружать данные	
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ПоДаннымКонтрагента";
	Иначе
		Возврат "ПоДаннымОрганизации";
	КонецЕсли;
КонецФункции
Функция сбисИмяТЧ(Контекст) Экспорт
	// Функция определяет название табличной части документа поступления, в которую нужно загружать данные	
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Номенклатура.Услуга Тогда
		Возврат "Услуги";
	Иначе
		Возврат "Товары";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки) Экспорт
	Если ЗначениеЗаполнено(иниЗагрузки) и иниЗагрузки.Свойство("Документ_Сумма") Тогда
		ИмяРеквизитаСуммы = сбисСообщитьИмяРеквизита(иниЗагрузки.Документ_Сумма.Значение);
	Иначе
		ИмяРеквизитаСуммы = "СуммаДокумента";
	КонецЕсли;
	Возврат ИмяРеквизитаСуммы;
КонецФункции
&НаКлиенте
Функция сбисИниЗагрузкиПоДокументу1С(Кэш, Документ1С) Экспорт
	ИмяДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
	Если Кэш.КэшЗначенийИни.ИниЗагрузки.Свойство(ИмяДок) Тогда
		Возврат Кэш.Ини[Кэш.КэшЗначенийИни.ИниЗагрузки[ИмяДок]].мДокумент[ИмяДок]
	Иначе
		Для Каждого Ини Из Кэш.Ини Цикл
			Если Ини.Значение.Свойство("мДокумент") и Ини.Значение.мДокумент.Свойство(ИмяДок) Тогда
				Кэш.КэшЗначенийИни.ИниЗагрузки.Вставить(ИмяДок, Ини.Ключ);
				Возврат Ини.Значение.мДокумент[ИмяДок];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
КонецФункции
//Березкин
&НаКлиенте
Функция сбисВидОперацииКорректировочногоДокумента(Контекст) Экспорт
	// Функция вычисляет ДокументВидОперации в корректировочных документах	
	Попытка	
		Если Найти(НРег(Контекст.ВидОперации), "исправление") Тогда
			Возврат "Исправление";
		Иначе //Если Контекст.ВидОперации = СогласованноеИзменение или КорректировкаПоСогласованиюСторон Тогда	
			Возврат "Корректировка";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат "";
КонецФункции
Функция сбисЗаполнитьВидОперации(Контекст) Экспорт
	// Функция заполняет ВидОперации в полученных корректировочных документах	
	Попытка
		Если Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Исправление" Тогда
			Возврат Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
		ИначеЕсли Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Корректировка" Тогда	
			Возврат Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции
Функция сбисЗаполнитьВидХозяйственнойОперации(Контекст) Экспорт
	// Функция заполняет ВидОперации в полученных корректировочных документах	
	Попытка
		Если Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Исправление" Тогда
			Возврат Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;
		ИначеЕсли Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Корректировка" Тогда	
			Возврат Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции
Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции
Функция сбисЗаполнитьДанныеИсходногоДокумента(Контекст) Экспорт 
	// Функция заполняет ДокументПоступления в загружаемых документах	
	Док = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(); 
	Контрагент = Контекст.Документ.Контрагент;
	Если Контрагент = Ложь Тогда 
		Сообщить("Не найден исходный документ"); 
		Возврат Док;            
	КонецЕсли; 
	Если Контекст.СтруктураФайла.Файл.Формат = "счФактКор" Тогда 
		Попытка 
			Если Контекст.СтруктураФайла.Файл.Документ.НомерСчФ = "" ИЛИ Контекст.СтруктураФайла.Файл.Документ.ДатаСчФ = "" Тогда 
				Сообщить("Не указаны номер или дата исходного документа"); 
				Возврат Док;            
			КонецЕсли;                  
		Исключение	
			Сообщить("Не указаны номер или дата исходного документа"); 
			Возврат Док;            
		КонецПопытки;                  
		ДокументПоступленияНомер = Контекст.СтруктураФайла.Файл.Документ.НомерСчФ; 
		ДокументПоступленияДата =  сбисСтрокаВДату(Контекст.СтруктураФайла.Файл.Документ.ДатаСчФ); 
		ТекстЗапроса = "ВЫБРАТЬ 
		|	СчетФактураПолученный.Ссылка КАК Ссылка, 
		|	СчетФактураПолученный.НомерВходящегоДокумента, 
		|	СчетФактураПолученный.ДатаВходящегоДокумента 
		|ИЗ 
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный 
		|ГДЕ 
		|	СчетФактураПолученный.ДатаВходящегоДокумента МЕЖДУ &ДатаОт И &ДатаДо 
		|	И СчетФактураПолученный.НомерВходящегоДокумента В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		| 
		|УПОРЯДОЧИТЬ ПО 
		|	Ссылка УБЫВ"; 
		ТекстЗапроса2 = "ВЫБРАТЬ 
		|	СчетФактураПолученный.Ссылка КАК Ссылка, 
		|	СчетФактураПолученный.НомерИсходногоДокумента, 
		|	СчетФактураПолученный.ДатаИсходногоДокумента 
		|ИЗ 
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный 
		|ГДЕ 
		|	СчетФактураПолученный.ДатаИсходногоДокумента МЕЖДУ &ДатаОт И &ДатаДо 
		|	И СчетФактураПолученный.НомерИсходногоДокумента В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		| 
		|УПОРЯДОЧИТЬ ПО 
		|	Ссылка УБЫВ"; 
//	ИначеЕсли Контекст.СтруктураФайла.Файл.Формат = "ЭДОНакл" или Контекст.СтруктураФайла.Файл.Формат = "АктВР" Тогда 
	ИначеЕсли Контекст.СтруктураФайла.Файл.Формат = "ЭДОНакл" или Контекст.СтруктураФайла.Файл.Формат = "АктВР" 
			или Контекст.СтруктураФайла.Файл.Формат = "УкдДис" или Контекст.СтруктураФайла.Файл.Формат = "УкдКсчфДис" Тогда // alo
		Попытка 
			Если Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументНомер = "" ИЛИ Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументДата = "" Тогда 
				Сообщить("Не указаны номер или дата исходного документа"); 
				Возврат Док;            
			КонецЕсли;                  
		Исключение	
			Сообщить("Не указаны номер или дата исходного документа"); 
			Возврат Док;            
		КонецПопытки;  
		ДокументПоступленияНомер = Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументНомер; 
		ДокументПоступленияДата =  сбисСтрокаВДату(Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументДата); 
		ТекстЗапроса = "ВЫБРАТЬ 
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка 
		|ИЗ 
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг 
		|ГДЕ 
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента МЕЖДУ &ДатаОт И &ДатаДо 
		|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента В ИЕРАРХИИ(&Номер) 
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент 
		| 
		|УПОРЯДОЧИТЬ ПО 
		|	Ссылка УБЫВ"; 
	Иначе 
		Сообщить("Не найден исходный документ"); 
		Возврат Док; 
	КонецЕсли;	  
	ДокументПоступленияНомерСписок = Новый СписокЗначений; 
	ДокументПоступленияНомерСписок.Добавить(ДокументПоступленияНомер); 
	//Удаление префиксов и лидирующих нулей 
	НомерОбъекта = ДокументПоступленияНомер; 
	Если Найти(НомерОбъекта,"-")=0 Тогда НомерОбъекта = "000-" + НомерОбъекта; КонецЕсли; 
	Ном1 = Лев(НомерОбъекта,Найти(НомерОбъекта,"-")-1); 
	Ном2 = Прав(НомерОбъекта,СтрДлина(НомерОбъекта)-Найти(НомерОбъекта,"-")); 
	СтрДл = СтрДлина(ном1);т = 1;СтрНом = ""; 
	Пока т <= СтрДл Цикл 
		б = Сред(Ном1, т,1); 
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда 
			СтрНом = СтрНом + б; 
		КонецЕсли; 
		т = т + 1; 
	КонецЦикла; 
	Ном1 = СтрНом; 
	СтрДл = СтрДлина(Ном2);т = 1;СтрНом = ""; 
	Пока т <= СтрДл Цикл 
		б = Сред(Ном2, т,1); 
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда 
			СтрНом = СтрНом + б; 
		КонецЕсли; 
		т = т + 1; 
	КонецЦикла; 
	Ном2 = СтрНом;	
	НомерОбъекта = ?(Ном1="",Ном2,Ном1+"-"+Ном2); 
	Если НомерОбъекта <> ДокументПоступленияНомер Тогда ДокументПоступленияНомерСписок.Добавить(НомерОбъекта); КонецЕсли; 
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Номер", ДокументПоступленияНомерСписок); 
	Запрос.УстановитьПараметр("ДатаОт", НачалоДня(ДокументПоступленияДата)); 
	Запрос.УстановитьПараметр("ДатаДо", КонецДня(ДокументПоступленияДата)); 
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
	Запрос.Текст = ТекстЗапроса; 
	Попытка 
		Результат = Запрос.Выполнить(); 
	Исключение 
		Запрос.Текст = ТекстЗапроса2; 
		Результат = Запрос.Выполнить(); 
	КонецПопытки; 
	Выборка = Результат.Выбрать(); 
	Если Выборка.Следующий() Тогда 
		Если Контекст.СтруктураФайла.Файл.Формат = "счФактКор" Тогда 
			Док = Выборка.Ссылка.ДокументОснование; 
		Иначе	
			Док = Выборка.Ссылка; 
		КонецЕсли;	
		Попытка	//товары	
			Для каждого Товар Из Контекст.Документ.Товары Цикл 
				Попытка 
					Отбор = ?(Товар.ХарактеристикаНоменклатуры = неопределено,Новый Структура("Номенклатура", Товар.Номенклатура),Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Товар.Номенклатура, Товар.ХарактеристикаНоменклатуры)); 
				Исключение 
					Отбор = Новый Структура("Номенклатура", Товар.Номенклатура); 
				КонецПопытки; 
				НомерСтрокиТовараОснования = Док.Товары.НайтиСтроки(Отбор); 
				Попытка	                                
					Товар.КоличествоДоИзменения = НомерСтрокиТовараОснования[0].Количество; 
					Товар.СуммаДоИзменения = НомерСтрокиТовараОснования[0].Сумма;	                                                
					Товар.ЦенаДоИзменения = НомерСтрокиТовараОснования[0].Цена;	                                                
					Товар.СуммаНДСДоИзменения = НомерСтрокиТовараОснования[0].СуммаНДС;	                                                
					Товар.СтавкаНДСДоИзменения = НомерСтрокиТовараОснования[0].СтавкаНДС;	                                                
				Исключение 
				КонецПопытки; 
			КонецЦикла;	
		Исключение 
		КонецПопытки;// 
		Попытка	//услуги 
			Для каждого Услуга Из Контекст.Документ.Услуги Цикл 
				Попытка 
					Отбор = ?(Услуга.ХарактеристикаНоменклатуры = неопределено,Новый Структура("Номенклатура", Услуга.Номенклатура),Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Услуга.Номенклатура, Услуга.ХарактеристикаНоменклатуры)); 
				Исключение 
					Отбор = Новый Структура("Номенклатура", Услуга.Номенклатура); 
				КонецПопытки; 
				НомерСтрокиУслугиОснования = Док.Услуга.НайтиСтроки(Отбор); 
				Попытка	
					Услуга.КоличествоДоИзменения = НомерСтрокиУслугиОснования[0].Количество; 
					Услуга.СуммаДоИзменения = НомерСтрокиУслугиОснования[0].Сумма;	                                                
					Услуга.ЦенаДоИзменения = НомерСтрокиУслугиОснования[0].Цена;	                                                
					Услуга.СуммаНДСДоИзменения = НомерСтрокиУслугиОснования[0].СуммаНДС;	                                                
					Услуга.СтавкаНДСДоИзменения = НомерСтрокиУслугиОснования[0].СтавкаНДС;	                                                
				Исключение 
				КонецПопытки; 
			КонецЦикла;	
		Исключение 
		КонецПопытки;// 
	Иначе 
		Сообщить("Не найден исходный документ");
	КонецЕсли; 
	Возврат Док; 
КонецФункции
//

функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции
&НаКлиенте
функция сбисПолучитьФИО(Название) Экспорт
	// Функция формирует структуру ФИО из строки	
	ФИО = РазбитьСтрокуВМассив(Название," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
КонецФункции
&НаКлиенте
Функция СокращенноеФИО(Кэш, ФИО) Экспорт
	// Формирует сокращенное ФИО из полного	
	ФИО = Кэш.ОбщиеФункции.РазбитьСтрокуВМассив(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,Лев(ФИО[1],1)+".","");
	Отчество = ?(ФИО.Количество()>=3,Лев(ФИО[2],1)+".","");
	Возврат Фамилия+" "+Имя+Отчество;
КонецФункции
//функция сбисРазложитьСтрокуВСтруктуру(знач Строка, Разделитель) Экспорт
//	
//	РезСтруктура = Новый Структура;
//	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
//	КолЭлементов = СтрЧислоСтрок(Строка);
//	Для сч = 1 по КолЭлементов Цикл
//		Попытка
//			РезСтруктура.Вставить(СокрЛП(СтрПолучитьСтроку(Строка,сч)));
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	Возврат РезСтруктура
//КонецФункции
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита) Экспорт
	// Функция возвращает значение реквизита объекта 1С
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
Функция ПроверитьНаличиеМетаданных(ИмяМетаданных, ИмяРеквизита)
	// Функция проверяет наличие матаданных в конфигурации	
	Если Метаданные[ИмяМетаданных].Найти(ИмяРеквизита)<>Неопределено Тогда
		возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
Функция сбисВыбратьПодходящийДокумент(Документы1С,ТипДокумента) Экспорт
	// выбирает из списка документов 1С документ определенного типа
	Для Каждого Документ1С Из Документы1С Цикл
		Если Документ1С.Значение.Метаданные().Имя = ТипДокумента Тогда
			Возврат Документ1С.Значение;
		КонецЕсли;
	КонецЦикла;
КонецФункции
//Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ИмяРеквизита)
//	Возврат Перечисления[ИмяПеречисления][ИмяРеквизита];
//КонецФункции

//Поиск документов в 1С по реквизитам входящих документов
&НаКлиенте
Функция НайтиПодходящиеДокументы(КэшИни, Парам, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту	
	СписокДокументов = Новый СписокЗначений;
	ИниЗагрузки = оДокумент.Ини;
	Если ИниЗагрузки.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумент Из ИниЗагрузки.мДокумент Цикл
			
			Ини = РазделДокумент.Значение;
			Если Ини.Документ.Значение = "''" Тогда  // в случае, если в пользовательской настройке прописали пустой документ
				Продолжить;
			КонецЕсли;
			НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, КэшИни, Парам, оДокумент);	
			Если СписокДокументов.Количество() = 1 Тогда  //если нашли 1 подходящий документ в одном реестре, то в остальных не ищем
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокДокументов;
КонецФункции
&НаКлиенте
Процедура НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, КэшИни, Парам, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	
	Если НЕ ЗначениеЗаполнено(оДокумент.Дата) и НЕ ЗначениеЗаполнено(оДокумент.Номер) Тогда   //  Если в СБИС не заполнены дата и номер, то нет смысла сопоставлять
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса = Новый Структура;
	//НГС
	Если Ини.Свойство("Контрагент_Роль") Тогда
		РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
		ИмяРеквизитаКонтрагента = сбисСообщитьИмяРеквизита(Ини.мСторона[РольКонтрагента].Сторона.Значение);
		ИмяРеквизитаИННКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_ИНН.Значение,"'",""));
		ИмяРеквизитаКППКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_КПП.Значение,"'",""));
		Попытка
			ИННКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.ИНН,оДокумент.Контрагент.СвФЛ.ИНН);
		Исключение
			ИННКонтрагента = "";
		КонецПопытки;
		Попытка
			КППКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.КПП,"");
		Исключение
			КППКонтрагента = "";
		КонецПопытки;
		
	КонецЕсли;
	//КНГС
	РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'",""); 
	ИмяРеквизитаОрганизации = сбисСообщитьИмяРеквизита(Ини.мСторона[РольОрганизации].Сторона.Значение); 
	ИмяРеквизитаИННОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_ИНН.Значение,"'","")); 
	ИмяРеквизитаКППОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_КПП.Значение,"'",""));	
	ИмяРеквизитаДатаВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, "")));
	ИмяРеквизитаНомерВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, "")));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|Док.Ссылка КАК Док
	|ИЗ
	|"+Ини.Документ.Значение+" КАК Док"+"
	|";
	УсловияЗапроса = "";
	
	Если ЗначениеЗаполнено(ИмяРеквизитаДатаВх) Тогда
		Если Парам.СопоставлениеПериод = "Дата документа" Тогда
			УсловияЗапроса = УсловияЗапроса + " И НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ)=НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
    	ИначеЕсли Парам.СопоставлениеПериод = "Месяц с даты документа" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док.Дата МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		КонецЕсли;
		
		Если Парам.СопоставлениеПоДате = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаДатаВх+"=&ДатНач";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		ИначеЕсли Парам.СопоставлениеПоДате = "Отклонение 1 день" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)<2 И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)>-2";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
			ПараметрыЗапроса.Вставить("ДатКнц", КонецДня(оДокумент.Дата+1));
		КонецЕсли;
	КонецЕсли;

	
	Если Ини.Свойство("Контрагент_Роль") и Парам.СопоставлениеПоКонтрагенту <> "Не использовать" Тогда
		//d.ch
		Если КэшИни.Конфигурация.Свойство("ЗапросКонтрагента") и КэшИни.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") И НРег(КэшИни.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да" Тогда
			оДокумент.Контрагент.Вставить("Ограничения", Новый Структура("Организация",НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация)));
		КонецЕсли;
		Контрагент = НайтиКонтрагентаИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.Контрагент, Ини);
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаКонтрагента+"=&Контрагент";
		ПараметрыЗапроса.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если Парам.СопоставлениеПоОрганизации <> "Не использовать" Тогда 
		Организация = НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация); 
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаОрганизации+"=&Организация"; 
		ПараметрыЗапроса.Вставить("Организация", Организация); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаНомерВх) Тогда
		Если Парам.СопоставлениеПоНомеру = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+"=&НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", оДокумент.Номер);
		ИначеЕсли Парам.СопоставлениеПоНомеру = "Вхождение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+" ПОДОБНО &НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", "%"+оДокумент.Номер+"%");
		КонецЕсли;
	КонецЕсли;
	
	УсловияЗапроса = Сред(УсловияЗапроса,3);
	Если ЗначениеЗаполнено(УсловияЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + " ГДЕ "+УсловияЗапроса;
	КонецЕсли;
	
	НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса);
КонецПроцедуры

Процедура НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	Запрос = Новый Запрос;
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Запрос.Текст=ТекстЗапроса;
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокДокументов.Добавить(Результат.Док);
	КонецЦикла;	
КонецПроцедуры
&НаКлиенте
Функция НайтиОрганизациюИзДокументаСБИС(Ини, оУчастник) Экспорт
	// Функция ищет организацию в базе 1С по данным участника в универсальном формате	
	Если Ини.Свойство("ЗапросОрганизации") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросОрганизации.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Организации.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно"); 
	ТолькоПоИНН = ГлавноеОкно.СопоставлениеПоОрганизации="Только по ИНН";	
	Возврат НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН);
КонецФункции
Функция НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН = Ложь) Экспорт
	// Функция ищет организацию или контрагента в базе 1С по ИНН/КПП	
	Если Не оУчастник.Свойство("СвЮЛ") и Не оУчастник.Свойство("СвФЛ") Тогда
		Возврат Ложь;
	КонецЕсли;
	ЮлОрг   = оУчастник.Свойство("СвЮЛ");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН));
	
	Если ЮлОрг и НЕ ТолькоПоИНН Тогда
		Запрос.УстановитьПараметр("КПП",оУчастник.СвЮЛ.КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Участник.КПП=&КПП","");
	КонецЕсли;
	
	Если оУчастник.Свойство("Подразделение") и оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		Запрос.УстановитьПараметр("КодФилиала",оУчастник.Подразделение.Идентификатор);
	Иначе
		Запрос.УстановитьПараметр("КодФилиала","");
	КонецЕсли;
	
	Если оУчастник.Свойство("GLN") Тогда
		Запрос.УстановитьПараметр("GLN",оУчастник.GLN);
	Иначе
		Запрос.УстановитьПараметр("GLN","");
	КонецЕсли;
	
	// d.ch 26.06.15
	Если оУчастник.Свойство("Ограничения") Тогда
		Для Каждого Параметр из оУчастник.Ограничения Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Возврат РезультатЗапроса.Ссылка;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	
&НаКлиенте
Функция НайтиКонтрагентаИзДокументаСБИС(Ини, оУчастник, ИниДок = Неопределено) Экспорт
	// Функция ищет контрагента в базе 1С по данным участника в универсальном формате		
	Если ЗначениеЗаполнено(ИниДок) и ИниДок.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(ИниДок.ЗапросКонтрагента.Значение,"'","");
	ИначеЕсли Ини.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросКонтрагента.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Контрагенты.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ТолькоПоИНН = ГлавноеОкно.СопоставлениеПоКонтрагенту="Только по ИНН";
	Контрагент = НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН);
	Если оУчастник.Свойство("GLN") и ЗначениеЗаполнено(оУчастник.GLN) и Контрагент = Ложь Тогда
		Сообщить("Не найден контрагент с GLN "+оУчастник.GLN);
	КонецЕсли;
	
	Возврат Контрагент;
КонецФункции
Функция сбисСообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	// Функция возвращает название реквизита для значений из файлов настроек (например, для [Документ].Контрагент)	
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции
Функция СформироватьНазваниеВходящегоДокумента1С(Документ1С) Экспорт
	// Функция формирует название входящего документа 1С (используется при сопоставлении документов)	
	Попытка
		Возврат Документ1С.Метаданные().Синоним + " вх. № "+ Документ1С.НомерВходящегоДокумента+" от " + формат(Документ1С.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг") + " на сумму " + Документ1С.СуммаДокумента + " (№ "+Документ1С.Номер+" от "+ формат(Документ1С.Дата, "ДФ=дд.ММ.гггг")+")";
	Исключение
		Возврат строка(Документ1С)
	КонецПопытки;
КонецФункции

//регистры сведений
&НаКлиенте
Процедура ДобавитьЗаписиВПланВидовХарактеристик() Экспорт
	// Функция добавляет записи в план видов характеристик, необходимые для хранения статусов и идентификаторов в регистрах сведений	
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид");
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_ИдВложения");
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус");
	ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_СпособДоставки");
КонецПроцедуры
Функция ДобавитьЗаписьВПланВидовХарактеристик(ИмяЗаписи, НазначениеСвойства = Неопределено) Экспорт
	// Функция добавляет запись в план видов характеристик		
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов()) <> Неопределено Тогда
		НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов()].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
		Если НЕ НайденнаяЗапись.Пустая() Тогда
			Возврат НайденнаяЗапись;
		КонецЕсли;	
		Попытка
			СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов()].СоздатьЭлемент();
			СвойствоОбъект.Наименование = ИмяЗаписи;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
			Попытка
				СвойствоОбъект.Заголовок = ИмяЗаписи;
			Исключение
			КонецПопытки;
			Попытка
				Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
					СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
				Иначе
					СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
				КонецЕсли;
			Исключение
			КонецПопытки;
			СвойствоОбъект.УстановитьНовыйКод();
			СвойствоОбъект.Записать();
			Возврат СвойствоОбъект.Ссылка;
		Исключение
			Ошибка = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи) Экспорт
	// Функция добавляет запись в план видов характеристик		
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов()) <> Неопределено Тогда
		НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов()].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
		Если НЕ НайденнаяЗапись.Пустая() Тогда
			Возврат НайденнаяЗапись;
		КонецЕсли;	
		Попытка
			СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов()].СоздатьЭлемент();
			СвойствоОбъект.Наименование = ИмяЗаписи;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
			Попытка
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
			Исключение
			КонецПопытки;
			Попытка
				СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
				СвойствоОбъект.Заголовок = ИмяЗаписи;
			Исключение
			КонецПопытки;
			СвойствоОбъект.УстановитьНовыйКод();
			СвойствоОбъект.Записать();
			Попытка
				НаборДопСвойствКонтр = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты.ПолучитьОбъект();
				НовоеСведение = НаборДопСвойствКонтр.ДополнительныеСведения.Добавить();
				НовоеСведение.Свойство = СвойствоОбъект.Ссылка;
				НаборДопСвойствКонтр.Записать();
			Исключение
			КонецПопытки;
			ЗначениеСпр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "ЭДО";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага";
			ЗначениеСпр.Записать();
			ЗначениеСпр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
			ЗначениеСпр.Наименование = "Бумага, хочет ЭДО";
			ЗначениеСпр.Записать();
			
			Возврат СвойствоОбъект.Ссылка;
		Исключение
			Ошибка = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ИмяПланаВидовХарактеристикСвойствОбъектов()
	// Функция возвращает имя плана видов характеристик, необходимого для хранения статусов и идентификаторов в регистрах сведений	
	Если Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения")<>Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
//&НаСервереБезКонтекста
Функция ИмяРегистраСвойствОбъектов() Экспорт
	// возвращает имя регистра, где хранятся статусы и идентификаторы СБИС	
	Если Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
// статусы документов
//&НаСервереБезКонтекста
Функция сбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
	// Функция возвращает индекс картинки по статусу электронного документа	
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;	
	
КонецФункции
//&НаСервереБезКонтекста
Функция сбисИндексКартинкиДокумента1С(ДокументПроведен, ДокументПометкаУдаления) Экспорт
	// Функция возвращает индекс картинки по статусу документа 1С	
	Если ДокументПроведен Тогда 
		Возврат 0;
	ИначеЕсли ДокументПометкаУдаления Тогда 
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция НеверныеКодыКонтрагентовНаСервере() Экспорт
	ОшибкиКонтрагентовИННКонтрРазряд = Новый СписокЗначений();
	ошИНН_КонтрРазряд=0;
	
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		КонтрагентИНН=Выборка.ИНН;
		
		// если не правльный контрольный разряд в ИНН и наименование контрагента еще нет списке значений то добавляем его
		Если НЕ сбисИННСоответствуетТребованиямБезТипа(КонтрагентИНН) и ОшибкиКонтрагентовИННКонтрРазряд.НайтиПоЗначению(Выборка.Ссылка)=Неопределено тогда
			ОшибкиКонтрагентовИННКонтрРазряд.Добавить(Выборка.Ссылка,КонтрагентИНН);
			ошИНН_КонтрРазряд=ошИНН_КонтрРазряд+1;
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Макет = сбисПолучитьМакет("МакетОшибки");
	Таб = Новый ТабличныйДокумент;
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Таб.Вывести(ОбластьЗаголовок);
	
	//------ вывод строк с неправильным контрольным разрядом в ИНН
	Если ошИНН_КонтрРазряд>0 Тогда
		ОбластьОписание = Макет.ПолучитьОбласть("ОписаниеОшибки");
		ОбластьОписание.Параметры.ОписаниеОшибки="Неверная контрольная сумма ИНН (кол-во ошибок: "+строка(ошИНН_КонтрРазряд)+"):";
		Таб.Вывести(ОбластьОписание);
		
		Для Каждого Элемент Из ОшибкиКонтрагентовИННКонтрРазряд Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Контрагент = Элемент.Значение;
			ОбластьСтрока.Параметры.ИНН = Элемент.Представление;
			Таб.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтоги.Параметры.КоличествоОшибок = строка(ошИНН_КонтрРазряд);
	Таб.Вывести(ОбластьИтоги);
	
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Возврат Таб;
КонецФункции
Функция сбисИННСоответствуетТребованиямБезТипа(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат сбисИННСоответствуетТребованиям(ИНН, ВладелецИННФизЛицо);
	
КонецФункции
Функция сбисИННСоответствуетТребованиям(Знач ИНН, Знач ТипЛица) Экспорт
	
	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);
	
	Если НЕ сбисТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма = 0;
		
		Для Н = 1 По 9 Цикл
			
			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции
Функция сбисТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьКэшСБИСини(Кэш) Экспорт
	// Функция формирует структуру, содержащую соответствия типов документов СБИС и 1С. Используется при сопоставлении документов.	
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Кэш.СБИС.ини = Новый Структура;
	Для Каждого Ини из Кэш.Ини Цикл
		МассивТипов = РазбитьСтрокуВМассив(РассчитатьЗначение("РеестрСБИС_Тип",Ини.Значение, Кэш),",");
		//Если МассивТипов.Количество()=0 Тогда
		//	Продолжить;
		//КонецЕсли;
		Для каждого ТипДок Из МассивТипов Цикл
			Попытка
				Если Кэш.СБИС.ини.Свойство(ТипДок)=Ложь Тогда
					Кэш.СБИС.ини.Вставить(ТипДок,Новый Массив());
				КонецЕсли;
				//Для Каждого Элемент Из Ини.Значение.мФайл Цикл
				ИмяДокумента1С = Кэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(Ини.Значение.Документ.Значение);
				СсылкаПустая = СформироватьПустуюСсылкуДокумента(ИмяДокумента1С);
				Кэш.СБИС.ини[ТипДок].Добавить(Новый Структура("Тип,ПустаяСсылка,ини",ИмяДокумента1С,СсылкаПустая,Ини.Ключ));
				//КонецЦикла
			Исключение;
			КонецПопытки;
		КонецЦикла
	КонецЦикла;
	
КонецФункции
Функция СформироватьПустуюСсылкуДокумента(ТипДок)
	// Функция формирует пустую ссылку на документ	
	Возврат Документы[ТипДок].ПустаяСсылка();
КонецФункции
&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции	
&НаКлиенте
Функция сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, ИмяКоманды) Экспорт
	//При попытке отклонения нескольких документов ничего не делаем
	Если СписокОтмеченныхДокументов.Количество()>1 и ИмяКоманды = "Отклонить" Тогда
		Предупреждение("Отклонять документы можно только по одному.");
		Возврат Ложь;
	КонецЕсли;
	Если ИмяКоманды = "Утвердить" Тогда
		ТекстСообщения = "утверждение";
	Иначе
		ТекстСообщения = "отклонение";
	КонецЕсли;	
	
	СписокИНН = Новый СписокЗначений;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		оОрганизация = Строка.Значение.СоставПакета[0].Значение.НашаОрганизация;
		Если оОрганизация.Свойство("СвФЛ") Тогда
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
				СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
			КонецЕсли;
		Иначе
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
				СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
			Если Не ЗначениеЗаполнено(КодАктивации) Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
		Возврат Ложь;	
	КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);	
	Всего = СписокОтмеченныхДокументов.Количество();
	сч = 0;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл        
		
		сч = сч + 1;
		ГлавноеОкно.сбисПоказатьСостояние("Идет "+ТекстСообщения+" документов",ГлавноеОкно, Мин(100,Окр(сч*100/Всего)));
		Если Строка.Значение.Статус = 5 Тогда //Если документ уже отклонен
			Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Отклонить", "уже отклонен", "нельзя утвердить") + ".");			
			Продолжить;
		ИначеЕсли Строка.Значение.Статус = 6 Тогда //Если уже утвержден
			Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Утвердить", "уже утвержден", "нельзя отклонить") + ".");			
			Продолжить;
		КонецЕсли;	
		//Если Строка.Значение.СоставПакета[0].Значение.Свойство("Комплект") Тогда
		//	Кэш.ВИ.ВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Комплект.Идентификатор,Кнопка.Имя, ПолучитьПредставлениеПакетаДляОшибки(Строка));
		//Иначе
		фрм.сбисВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Идентификатор,ИмяКоманды, ПолучитьПредставлениеПакетаДляОшибки(Строка));	
		//КонецЕсли;
		
	КонецЦикла;
	ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно)	
КонецФункции
&НаКлиенте
Функция РассчитатьЗначениеИзСтруктуры(Путь, СтруктураФайла) Экспорт
	// Функция получает значение из структуры по указанному пути	
	ПутьКДаннымФайла = РазбитьСтрокуВМассив(Путь, ".");
	ЗначениеРеквизита = Новый Структура;	
	//сбисСкопироватьСтруктуру(ЗначениеРеквизита, СтруктураФайла);
	ЗначениеРеквизита = СтруктураФайла;
	
	Для Каждого Узел Из ПутьКДаннымФайла Цикл
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") и ЗначениеРеквизита.Свойство(Узел) Тогда
			ЗначениеРеквизита = ЗначениеРеквизита[Узел];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗначениеРеквизита;
КонецФункции

// пока 2 процедуры СкопироватьСтруктуру и сбисСкопироватьСтруктуру. После переименования удалить СкопироватьСтруктуру
Процедура СкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	// Процедура копирует структуру	
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = Тип("Массив") Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = ТипМассив Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
			//Если Не СтруктураКуда.Свойство(Элемент.Ключ) или СтруктураКуда[Элемент.Ключ] = Неопределено или ТипЗнч(СтруктураКуда[Элемент.Ключ])<>Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			//КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
Процедура сбисУдалитьРассчитанныеЗначения(СтруктураРаздела)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Если ТипЗнч(СтруктураРаздела) = ТипСтруктура Тогда
		Для Каждого Элемент Из СтруктураРаздела Цикл	
			
				
			Если ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
				Если Элемент.Значение.Свойство("Значение") Тогда
					СтруктураРаздела[Элемент.Ключ].Удалить("РассчитанноеЗначение");
				Иначе
					сбисУдалитьРассчитанныеЗначения(СтруктураРаздела[Элемент.Ключ]);				
				КонецЕсли;
						
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Функция СписокДопустимыхТипов()
	// Функция возвращает список типов переменных, которые можно вернуть с сервера на клиент (нужна для управляемых приложений)	
	СписокДопустимыхТипов = Новый СписокЗначений;
	СписокДопустимыхТипов.Добавить(Тип("Число"));
	СписокДопустимыхТипов.Добавить(Тип("Булево"));
	СписокДопустимыхТипов.Добавить(Тип("Строка"));
	СписокДопустимыхТипов.Добавить(Тип("Дата"));
	СписокДопустимыхТипов.Добавить(Тип("Массив"));
	СписокДопустимыхТипов.Добавить(Тип("Структура"));
	СписокДопустимыхТипов.Добавить(Тип("Неопределено"));
	Для Каждого Перечисление Из Метаданные.Перечисления Цикл
		СписокДопустимыхТипов.Добавить(Тип("ПеречислениеСсылка."+Перечисление.Имя));
	КонецЦикла;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		СписокДопустимыхТипов.Добавить(Тип("СправочникСсылка."+Справочник.Имя));
	КонецЦикла;
	Для Каждого Документ Из Метаданные.Документы Цикл
		СписокДопустимыхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
	КонецЦикла;
	Возврат СписокДопустимыхТипов;
КонецФункции
Функция ЗаполнимДаннымиДокументаСтруктуру(Раздел, знач Контекст = "", СписокДопустимыхТипов,КэшЗначенийИни, Путь)
	// Функция рекурсивно заполняет структуру файла настроек данными из документа
	Результат = Новый Структура;
	Контекст.Вставить("Путь", Путь);
	Если Не Контекст.Свойство("ТекущийРазделИни") Тогда
		Контекст.Вставить("ТекущийРазделИни", Контекст.Ини);
	КонецЕсли;
	Для каждого Элемент из Раздел Цикл
		Если Лев(Элемент.Ключ, 4) = "сбис" Тогда   // служебные параметры не получаем
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не Элемент.Значение.Свойство("Значение") Тогда
				Результат.Вставить(Элемент.Ключ, Новый Структура);
				Для каждого ПодРаздел из Элемент.Значение Цикл //Выбираем подузлы
					Если ПодРаздел.Значение.Количество() <> 0 Тогда 
						//сбисСкопироватьСтруктуру(Контекст.ини, ПодРаздел.Значение);
						Путь.Добавить(Элемент.Ключ);
						Путь.Добавить(ПодРаздел.Ключ);
						ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.ТекущийРазделИни[Элемент.Ключ][ПодРаздел.Ключ]);
						ЗначениеПараметра = ЗаполнимДаннымиДокументаСтруктуру(ПодРаздел.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
						//Элемент.Значение.Вставить(ПодРаздел.Ключ, ЗначениеПараметра);	
						Результат[Элемент.Ключ].Вставить(ПодРаздел.Ключ, ЗначениеПараметра);
						Всего = Путь.Количество();
						Путь.Удалить(Всего-1);
						Путь.Удалить(Всего-2);
					КонецЕсли;
				КонецЦикла;								
			Иначе
				ЗначениеЭлемента = Элемент.Значение.Значение;
				
				Если Элемент.Значение.Свойство("Кэш") и ЗначениеЗаполнено(Элемент.Значение.Кэш) Тогда
					Если Элемент.Значение.Кэш = "Организация" Тогда
						ИНН = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_ИНН", Контекст));
						КПП = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_КПП", Контекст));
						Если КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Элемент.Ключ) Тогда
							ЗначениеПараметра = КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Элемент.Ключ];	
						Иначе
							ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
							Если Лев(ЗначениеПараметра,1)<>"!" Тогда
								КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Элемент.Ключ, ЗначениеПараметра);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КэшЗначенийИни.ТекущийПакет.Свойство(Элемент.Значение.Кэш+"_"+Элемент.Ключ) Тогда
							ЗначениеПараметра = КэшЗначенийИни.ТекущийПакет[Элемент.Значение.Кэш+"_"+Элемент.Ключ];	
						Иначе
							ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
							Если Лев(ЗначениеПараметра,1)<>"!" Тогда
								КэшЗначенийИни.ТекущийПакет.Вставить(Элемент.Значение.Кэш+"_"+Элемент.Ключ, ЗначениеПараметра);
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли
				Иначе
					ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);	
				КонецЕсли;
				Если СписокДопустимыхТипов.НайтиПоЗначению(ТипЗнч(ЗначениеПараметра)) <> Неопределено Тогда
					Результат.Вставить(Элемент.Ключ, ЗначениеПараметра);
					Контекст.ТекущийРазделИни[Элемент.Ключ].Вставить("РассчитанноеЗначение", ЗначениеПараметра);
				КонецЕсли;
				
				
				// Если это табличная часть без отбора и в значениии получилось неопределено, то возвращаем пустой массив. 
				// Получается, если нет такой таб части в документе. Например для счета в УТ11, если основание счета Акт, то нет ТЧ Товары, а если Реализация, то нет ТЧ Услуги.
				Если Элемент.Значение.Свойство("Тип") и Элемент.Значение.Тип="ТабличнаяЧасть" и НЕ Элемент.Значение.Свойство("Отбор") и (ЗначениеПараметра=Неопределено или ЗначениеПараметра="") Тогда
					Возврат Новый Массив;	
				КонецЕсли;
				
				Если Найти(строка(ЗначениеПараметра),"ТабличнаяЧасть")>0 или Найти(строка(ЗначениеПараметра),"TabularSection")>0 Тогда
					Если Элемент.Значение.Свойство("КолонкиГруппировок") и Элемент.Значение.Свойство("КолонкиСуммирования") Тогда
						ТабЧасть = ЗначениеПараметра.Выгрузить();
						ТабЧасть.Свернуть(Элемент.Значение.КолонкиГруппировок, Элемент.Значение.КолонкиСуммирования);
						ЗначениеПараметра = ТабЧасть;
					КонецЕсли;
					
					Если Элемент.Значение.Свойство("Сортировать") Тогда
						если типЗнч(ЗначениеПараметра)=Тип("ТаблицаЗначений") тогда
							ЗначениеПараметра.Сортировать(Элемент.Значение.Сортировать);
						иначе
							ТабЧасть = ЗначениеПараметра.Выгрузить();
							ТабЧасть.Сортировать(Элемент.Значение.Сортировать);
							ЗначениеПараметра = ТабЧасть;
						конецесли
					конецесли;

					МассивСтрок = Новый Массив;				
					ЗначениеКопия = Элемент.Значение;
					Раздел[Элемент.Ключ] = Неопределено;
					Для каждого СтрокаТаблЧасти из ЗначениеПараметра Цикл
						//Подготавливаем структуру для строки документа
						Контекст.СтрТабл = СтрокаТаблЧасти; //Записываем в контекст строку документа
						//СтруктураСтроки = Новый Структура;
						//сбисСкопироватьСтруктуру(СтруктураСтроки, Раздел);
						//СтруктураСтроки.Удалить(Элемент.Ключ);
						СтруктураСтроки = ЗаполнимДаннымиДокументаСтруктуру(Раздел, Контекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь); 
						МассивСтрок.Добавить(СтруктураСтроки);
						сбисУдалитьРассчитанныеЗначения(Контекст.ТекущийРазделИни);  // очищаем рассчитанные значения для правильного расчета следующей строки
					КонецЦикла;
					Раздел[Элемент.Ключ] = ЗначениеКопия;
					Возврат МассивСтрок;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	Возврат Результат;
КонецФункции	
Функция ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, КэшЗначенийИни, СоставПакета) Экспорт
	// Функция заполняет структуру файла настроек данными из документа
	Для каждого Док из СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		ГрязныйИни = ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни);
		СоответствиеДокументДанные.Вставить(Документ,  Новый Структура("ИмяИни, ДокументДанные",ЭлементСоответствия.ИмяИни,ГрязныйИни));
	КонецЦикла;
КонецФункции

Функция ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни) Экспорт
	// Функция заполняет структуру файла настроек данными из документа
	//ГрязныйИни = Новый Структура;
	//сбисСкопироватьСтруктуру(ГрязныйИни, СтруктураИниФайла);
		
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, СтруктураИниФайла);
	Контекст.Документ = Документ;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	ГрязныйИни = ЗаполнимДаннымиДокументаСтруктуру(СтруктураИниФайла, Контекст, СписокДопустимыхТипов,КэшЗначенийИни,Новый Массив);
	
	Возврат ГрязныйИни;
	
КонецФункции
&НаКлиенте
Функция РассчитатьЗначение(Параметр, Контекст, ВходящийКэш="") Экспорт //Контекст{ини,Документ,СтрТабл}
	// Функция рассчитывает значение параметра из файла настроек на клиенте.
	// Используется непосредственно при формировании структуры файла, после того, как все данные с сервера получены.
	Если ВходящийКэш <> "" Тогда
		Кэш = ВходящийКэш;
		МестныйКэш = ВходящийКэш;
	КонецЕсли;	
	Если Контекст=Ложь Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
	Иначе
		Попытка
			ЗнПер=Контекст[Параметр];
			Если ТипЗнч(ЗнПер) = Тип("Структура") и ЗнПер.Свойство("Значение") Тогда
				ЗнПер = ЗнПер.Значение;
			КонецЕсли;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	КэшироватьФункцию = Ложь;
	Если Найти(ЗнПер,"!")=1 и Найти(ЗнПер,"{")>0 Тогда // кешируемая функция
		КэшироватьФункцию = сред(ЗнПер,2,Найти(ЗнПер,"{")-2);
		ЗнПер = сред(ЗнПер,Найти(ЗнПер,"{"));
		Если КэшироватьФункцию = "Организация" Тогда 
			ИНН = СокрЛП(РассчитатьЗначение("Сторона_ИНН", Контекст, ВходящийКэш));
			КПП = СокрЛП(РассчитатьЗначение("Сторона_КПП", Контекст, ВходящийКэш));
			Если Кэш.КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Параметр];
			КонецЕсли;
		Иначе	
			Если Кэш.КэшЗначенийИни.ТекущийПакет.Свойство(КэшироватьФункцию+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.ТекущийПакет[КэшироватьФункцию+"_"+Параметр];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Попытка
			Если ВходящийКэш <> "" Тогда
				ГлавноеОкно = Кэш.ГлавноеОкно;
			Иначе
				ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
			КонецЕсли;
			фрм = ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","", Кэш);
			Результат=вычислить("фрм."+ИмяФункции+"(Контекст)");
			Если КэшироватьФункцию<>Ложь Тогда
				Если КэшироватьФункцию = "Организация" Тогда
					Кэш.КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Параметр, Результат);
				Иначе
					Кэш.КэшЗначенийИни.ТекущийПакет.Вставить(КэшироватьФункцию+"_"+Параметр, Результат);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить(Ошибка);
		КонецПопытки;	
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на структуру, полученную в результате выполнения функции
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Объект1С=РассчитатьЗначение(СтрОбъекта,Контекст,ВходящийКэш);
		Если Найти(ЗнПер,".")>0 Тогда
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ИмяРек) Тогда
				Объект1С = Объект1С[ИмяРек];
			КонецЕсли;
			Возврат Объект1С;
		Исключение
		КонецПопытки;
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	Иначе
		возврат ЗнПер;
	КонецЕсли	
КонецФункции
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст) Экспорт
	// Функция рассчитывает значение параметра из файла настроек на сервере.	
	// Используется при заполнении структуры файла настроек данными из документа.
	ПервыйСимвол = Лев(Параметр,1);
	Если ПервыйСимвол="[" или ПервыйСимвол="'" Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			ПараметрИни = НайтиПараметрВИерархическойСтруктуре(Параметр, Контекст);
			Попытка
				ЗнПер=ПараметрИни.Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки
		Иначе
			Попытка
				ПараметрИни = Контекст.Ини[Параметр]; 
				ЗнПер=Контекст.Ини[Параметр].Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если ПараметрИни.Свойство("РассчитанноеЗначение") Тогда
			Возврат ПараметрИни.РассчитанноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗнПер)<>Тип("Строка") Тогда  // Если в ЗнПер уже лежит нужное значение
		Возврат ЗнПер;
	КонецЕсли;
	ПозТочки = Найти(ЗнПер, ".");
	ПервыйСимвол = Лев(ЗнПер,1);
	Если ПервыйСимвол="[" Тогда  // ссылка на объект (другую переменную)
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			СтрОбъектаИни = НайтиПараметрВИерархическойСтруктуре(СтрОбъекта, Контекст);
		Иначе
			СтрОбъектаИни = Контекст.Ини[СтрОбъекта];
		КонецЕсли;
		Если СтрОбъектаИни<>Неопределено и СтрОбъектаИни.Свойство("РассчитанноеЗначение") Тогда
			Объект1С=СтрОбъектаИни.РассчитанноеЗначение;
		Иначе	
			Объект1С=РассчитатьЗначениеНаСервере(СтрОбъекта,Контекст);
		КонецЕсли;
		ТипОбъект1С = ТипЗнч(Объект1С);
		Если ПозТочки > 0 Тогда
			Если ТипОбъект1С = Тип("Строка") и Найти(Объект1С, "{") Тогда  // Переменная ссылается на результат функции, значит будем рассчитывать позже на клиенте, в функции РассчитатьЗначение
				Возврат ЗнПер;
			КонецЕсли;
			ИмяРек=сред(ЗнПер,ПозТочки + 1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это строка табличной части
			Если СтрОбъектаИни.Свойство("Тип") и СтрОбъектаИни.Тип="ТабличнаяЧасть" и ТипОбъект1С <> Тип("Структура") и Объект1С <> Неопределено Тогда
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				
				//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
				Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип="ТабличнаяЧасть" Тогда
					Если ПараметрИни.Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из ПараметрИни.Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						
						Если Отбор.Свойство("НомерСтроки") Тогда
							СтрокиТЧ = Новый Массив;
							СтрокиТЧ.Добавить(Объект1С.Получить(Отбор.НомерСтроки));
						Иначе
							СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						КонецЕсли;
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Возврат СтруктураСтрокиТЧ;
						КонецЦикла;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Формат") Тогда 
				Объект1С = Формат(Объект1С,	ПараметрИни.Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли ПервыйСимвол="'" Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
			возврат Число(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли ПервыйСимвол="{" Тогда 
		Если ПараметрИни.Свойство("Кэш") и ЗначениеЗаполнено(ПараметрИни.Кэш) Тогда
			ЗнПер = "!" + ПараметрИни.Кэш + ЗнПер;
		КонецЕсли;
		Возврат ЗнПер;
	ИначеЕсли ПервыйСимвол="^" Тогда  // формула, которую необходимо вычислить
// alo <<
		ЗнПер=сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст);
		Если ПараметрИни.Свойство("Формат") Тогда 
			ЗнПер = Формат(ЗнПер, ПараметрИни.Формат);
		КонецЕсли;
		Возврат ЗнПер;
// >> alo
	ИначеЕсли ПозТочки>0 Тогда
		ПервыйСимвол = Лев(ЗнПер, ПозТочки-1);
		
		Если ПервыйСимвол = "Справочник" Тогда	// ссылка на справочник
			ИмяРек=сред(ЗнПер,12);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Владелец = Неопределено;
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Если Элемент.Ключ = "Владелец" Тогда
						Владелец = РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст);
					Иначе
						Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(Владелец) Тогда
					Выборка = Справочники[ИмяРек].Выбрать(,Владелец,Отбор);
				Иначе
					Выборка = Справочники[ИмяРек].Выбрать(,,Отбор);
				КонецЕсли;
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				возврат Справочники[ИмяРек];
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "Документ" Тогда // ссылка на документ	
			ИмяРек=сред(ЗнПер,10);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "ЗаписьСправочника" Тогда // ссылка на запись справочника 
			ИмяРек=сред(ЗнПер,21);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "Константа" Тогда	// константа
			ИмяРек=сред(ЗнПер,11);
			возврат Константы[ИмяРек].Получить();
		ИначеЕсли ПервыйСимвол = "Перечисление" Тогда	// значение перечисления
			ИмяРек=сред(ЗнПер,14);
			возврат Перечисления[ИмяРек];
		ИначеЕсли ПервыйСимвол = "РегистрыСведений" Тогда	// ссылка на регистр сведений
			ИмяРек=сред(ЗнПер,18);
			
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если ПараметрИни.Свойство("СрезПоследних") Тогда
				
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеНаСервере(ПараметрИни.СрезПоследних, Контекст);
				НаборЗаписей = РегистрыСведений[ИмяРек].СрезПоследних(ДатаСреза,Отбор);
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Запись = НаборЗаписей.Получить(0);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ *
				|ИЗ
				|   РегистрСведений."+ИмяРек+" КАК Рег
				|ГДЕ
				| ";
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				КонецЦикла;
				Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
				НаборЗаписей = Запрос.Выполнить().Выбрать();
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				НаборЗаписей.Следующий();
				Запись = НаборЗаписей;
				//НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
				//
				//Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				//	
				//	НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				//КонецЦикла;
				//НаборЗаписей.Прочитать();
			КонецЕсли;
			
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			Измерения = Метаданные.РегистрыСведений[ИмяРек].Измерения;	
			Для Каждого Измерение Из Измерения Цикл 
				Результат.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
			КонецЦикла;
			СтандартныеРеквизиты = Метаданные.РегистрыСведений[ИмяРек].СтандартныеРеквизиты;	
			Попытка
				Для Каждого Реквизит Из СтандартныеРеквизиты Цикл 
					Результат.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
				КонецЦикла;
			Исключение
			КонецПопытки;
			возврат Результат;
			
		ИначеЕсли ПервыйСимвол = "ПланыВидовХарактеристик" Тогда	// ссылка на план видов характеристик
			ИмяРек=сред(ЗнПер,25);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовХарактеристик[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовХарактеристик."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "ПланыВидовРасчета" Тогда // ссылка на план видов Расчета
			ИмяРек=сред(ЗнПер,19);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовРасчета[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовРасчета."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		возврат Неопределено;
	КонецЕсли;	
	
КонецФункции
Функция сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст)
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		Если Лев(ВычисляемаяСтрока, 1) = ">" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,2));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли Лев(ВычисляемаяСтрока, 1) = "<" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,2));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли Лев(ВычисляемаяСтрока, 1) = "=" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,2));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Лев(ВычисляемаяСтрока, 2) = "!=" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,3));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Лев(ВычисляемаяСтрока, 1) = "+" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,2));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли Лев(нрег(ВычисляемаяСтрока), 4) = "сред" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,5));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли Лев(нрег(ВычисляемаяСтрока), 5) = "найти" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,6));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли Лев(нрег(ВычисляемаяСтрока), 3) = "или" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,4));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-1);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
	    ИначеЕсли Лев(нрег(ВычисляемаяСтрока), 1) = "и" Тогда
			ВычисляемаяСтрока = СокрЛП(Сред(ВычисляемаяСтрока,2));
			СтрокаПараметров = Сред(ВычисляемаяСтрока,2, СтрДлина(ВычисляемаяСтрока)-2);
			МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Ложь Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции
Функция НайтиПараметрВИерархическойСтруктуре(Параметр,Контекст)
	ТекущийРаздел = Контекст.ТекущийРазделИни;
	Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
		Возврат ТекущийРаздел[Параметр];	
	КонецЕсли;
	Результат = Неопределено;
	ТекущийРаздел = Контекст.Ини;
	Для Каждого ЭлементПуть Из Контекст.Путь Цикл
		Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
			Результат = ТекущийРаздел[Параметр];	
		КонецЕсли;
		ТекущийРаздел = ТекущийРаздел[ЭлементПуть];
	КонецЦикла;
	Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
Функция НайтиПараметрыВСтроке(знач Условие)
	МассивПараметров = Новый Массив;
	Пока Найти(Условие,")")>0 Цикл 
		Подстрока = Лев(Условие, Найти(Условие,")")-1);
		Если Найти(Подстрока, "(")>0 Тогда
			Пока Найти(Подстрока, "(")>0 Цикл
				Подстрока = Сред(Подстрока, Найти(Подстрока,"(")+1);
			КонецЦикла;
			Если Подстрока <> "" Тогда
				МассивПараметровПодстроки = РазбитьСтрокуВМассив(Подстрока, ",");
				Для Каждого Элемент Из МассивПараметровПодстроки Цикл
					МассивПараметров.Добавить(Подстрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Условие = Сред(Условие,Найти(Условие,")")+1);
	КонецЦикла;	
	Возврат МассивПараметров;
КонецФункции
Функция ПолучитьXMLСПростымиЭлементами(Док, кодировка = "windows-1251") Экспорт
	// функция формирует строку xml на основании структуры	(xml без атрибутов, с простыми элементами)
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку(кодировка);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML,Док);
	СтрXML = ОбъектXML.Закрыть();
	Возврат СтрXML;
КонецФункции
Процедура ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, СтруктураДокумента) Экспорт
	// процедура рекурсивно заполняет ЗаписьXML на основании структуры  (xml без атрибутов, с простыми элементами)
	Для Каждого Элемент Из СтруктураДокумента Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Если Элемент.Ключ = "ЗначениеУзла" Тогда
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ЧРД=.; ЧГ=0"));
			ОбъектXML.ЗаписатьКонецЭлемента();	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли Элемент.Значение = Неопределено и Элемент.Ключ <> "ЗначениеУзла" Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст("");
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Элемент.Ключ = "Атрибуты" Тогда
				Для Каждого Атрибут из Элемент.Значение Цикл
					ЗаписатьНеобязательныйАтрибут(Атрибут.Ключ, СокрЛП(Атрибут.Значение), ОбъектXML);	
				КонецЦикла;
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Элемент.Значение);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, ЭлементМассива);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

Функция ЗаполнитьСтруктуруФайлаСПростымиЭлементами(СтрокаXML) Экспорт
	// Функция формирует структуру по XML (xml без атрибутов, с простыми элементами)	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOMСПростымиЭлементами(ДокументДОМ.ПервыйДочерний, СтруктураФайла);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции

Функция ПрочитатьУзелDOMСПростымиЭлементами(УзелDOM, Узел) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.ПервыйДочерний <> Неопределено Тогда
				Узел.Вставить(Уз.ИмяУзла, Новый Структура);
			Иначе
				Узел.Вставить(Уз.ИмяУзла, "");
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOMСПростымиЭлементами(Уз, ДочУзел);
			Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции
Функция сбисУстановитьРеквизитСопоставленияНоменклатуры(КаталогНастроек) Экспорт
	// функция записывает способ сопоставления номенклатуры в файл	
	файлПараметры = Новый Файл(КаталогНастроек+"сбисПараметры.xml");
	Если НЕ файлПараметры.Существует() Тогда   // делаем только для новых версий, чтобы не сломать старое сопоставление номенклатуры
		Если Метаданные.Константы.Найти("ИспользоватьХарактеристикиНоменклатуры")<>Неопределено и Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() = Истина Тогда 
			Возврат Ложь;
		КонецЕсли;
		СохранитьПараметрыСБИС(Новый Структура("РеквизитСопоставленияНоменклатуры", "Код"),КаталогНастроек);	
	КонецЕсли;
КонецФункции
Функция СохранитьПараметрыСБИС(СтруктураНастроек,КаталогНастроек) Экспорт
	// функция записывает параметры запроса статусов в файл	
	ОбщаяСтруктура = ПолучитьПараметрыСБИС(КаталогНастроек);
	Для Каждого Элемент Из СтруктураНастроек Цикл
		ОбщаяСтруктура.Вставить(Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	Попытка
		ШаблонXML = ПолучитьXMLСПростымиЭлементами(Новый Структура("Параметры",ОбщаяСтруктура));
		ИсхФайл = Новый ТекстовыйДокумент;
		ИсхФайл.УстановитьТекст(ШаблонXML);
		ИсхФайл.Записать(КаталогНастроек+"сбисПараметры.xml", "windows-1251");		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции
Функция ПолучитьПараметрыСБИС(КаталогНастроек) Экспорт
	// функция читает параметры запроса статусов из файла	
	Попытка
		ИсхФайл = Новый ТекстовыйДокумент;
		ИсхФайл.Прочитать(КаталогНастроек+"сбисПараметры.xml", "windows-1251");
		ШаблонXML = ИсхФайл.ПолучитьТекст();
		СтруктураПараметров = ЗаполнитьСтруктуруФайлаСПростымиЭлементами(ШаблонXML).Параметры;
		Для Каждого Элемент Из СтруктураПараметров Цикл
			Строка = Элемент.Значение;
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=19 Тогда //видимо это дата
				Попытка
					СтруктураПараметров[Элемент.Ключ] = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2));
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=10 Тогда //видимо это дата
				Попытка
					СтруктураПараметров[Элемент.Ключ] = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		Возврат СтруктураПараметров;
	Исключение
		Возврат Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ЭтоНоваяВерсия(знач НоваяВерсия, знач СтараяВерсия) Экспорт
	// Функция проверяет, является ли текущая версия обработки или SDK новой по отношению к предыдущей запущенной	
	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КолвоТочекВНовойВерсии = СтрЧислоВхождений(НоваяВерсия, ".");
	КолвоТочекВСтаройВерсии = СтрЧислоВхождений(СтараяВерсия, ".");
	КолвоТочек = Макс(КолвоТочекВНовойВерсии,КолвоТочекВСтаройВерсии);
	Для сч=1 По КолвоТочек+1 Цикл
		ПрефиксНовый = ?(Найти(НоваяВерсия, ".")=0,Число(НоваяВерсия),Число(Лев(НоваяВерсия, Найти(НоваяВерсия, ".")-1)));
		ПрефиксСтарый = ?(Найти(СтараяВерсия, ".")=0,Число(СтараяВерсия),Число(Лев(СтараяВерсия, Найти(СтараяВерсия, ".")-1)));
		Если ПрефиксНовый>ПрефиксСтарый Тогда
			Возврат Истина;
		КонецЕсли;
		Если ПрефиксНовый<ПрефиксСтарый Тогда  // если запускаем 2.0.26.1 после 2.0.27 при сравнении 26 и 27 сразу возвращаем Ложь, иначе на следующем шаге будет 1>0 вернется Истина
			Возврат Ложь;
		КонецЕсли;
		НоваяВерсия = ?(Найти(НоваяВерсия, ".")=0,"0",Сред(НоваяВерсия,Найти(НоваяВерсия, ".")+1));
		СтараяВерсия = ?(Найти(СтараяВерсия, ".")=0,"0",Сред(СтараяВерсия,Найти(СтараяВерсия, ".")+1));	
	КонецЦикла;
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисДобавитьПечатныеФормы(Ини, ИмяФайлаОбработки) Экспорт
	Попытка
		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайлаОбработки);
		СписокДокументов = Новый СписокЗначений;
		Для Каждого Элемент Из Ини Цикл
			Если Элемент.Значение.Свойство("ЗапросСпискаДокументов") Тогда
				СписокДокументов.Добавить(Элемент.Ключ);
			КонецЕсли;
		КонецЦикла;
		сбисДобавитьПечатныеФормыНаСервере(ДвоичныеДанныеОбработки, СписокДокументов);	
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
КонецФункции
Функция сбисДобавитьПечатныеФормыНаСервере(ДвоичныеДанныеОбработки, СписокДокументов) Экспорт
	ВО = Справочники.ВнешниеОбработки;
	сбисОбработка = ВО.НайтиПоНаименованию("Отправить через sbis");
	Если сбисОбработка = Неопределено или сбисОбработка.Пустая() Тогда
		сбисОбработка = ВО.СоздатьЭлемент();		
		сбисОбработка.Наименование = "Отправить через sbis";
		сбисОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Иначе
		сбисОбработка = сбисОбработка.ПолучитьОбъект();
	КонецЕсли;
	сбисОбработка.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки);
	Для Каждого Элемент Из СписокДокументов Цикл
		МетаданныеДок = Метаданные.Документы.Найти(Элемент.Значение);
		Если МетаданныеДок<>Неопределено Тогда
			Если сбисОбработка.Принадлежность.Найти("Документ """+МетаданныеДок.Синоним+"""", "ПредставлениеОбъекта") = Неопределено Тогда
				НоваяСтрока = сбисОбработка.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Документ """+МетаданныеДок.Синоним+"""";
				НоваяСтрока.ПредставлениеКнопки = "Отправить через sbis";
				НоваяСтрока.СсылкаОбъекта = Документы[Элемент.Значение].ПустаяСсылка();
				Попытка
					НоваяСтрока.МетаданныеОбъекта = "Документ."+МетаданныеДок.Имя;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	сбисОбработка.Записать();	
КонецФункции
&НаКлиенте
Функция сбисСформироватьОтправитьКаталогТоваров(Кэш,ДанныеКаталога,ИниКонфигурации, Параметры) Экспорт
	Если Кэш.Парам.СпособОбмена = 1 Тогда // каталог
		Возврат Ложь;
	КонецЕсли;
	ПолныйСписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ВсеОтправлено = Истина;
	Шаг = 1000;    // отправляем по 1000 карточек номенклатуры
	Всего = ПолныйСписокНоменклатуры.Количество();
	сч = 0;
	Пока сч<Всего Цикл
		сбисПоказатьСостояние("Формирование каталога номенклатуры", ГлавноеОкно, Мин(100,Окр((сч+Шаг)*100/Всего)));
		СписокНоменклатуры = Новый СписокЗначений;
		ТекущееКоличество = Мин(сч+Шаг, Всего);
		счТек = сч;
		Пока счТек<ТекущееКоличество Цикл
			СписокНоменклатуры.Добавить(ПолныйСписокНоменклатуры[счТек].Значение);
			счТек = счТек + 1;			
		КонецЦикла;
		КаталогТоваров = Кэш.ОбщиеФункции.сбисСформироватьКаталогТоваров(Новый Структура("СписокНоменклатуры, Организация",СписокНоменклатуры),Кэш.Ини.Номенклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));	
		КаталогОтправлен = Кэш.Интеграция.ОтправитьКаталогТоваров(Кэш,КаталогТоваров);
		Если КаталогОтправлен = Ложь Тогда
			ВсеОтправлено = Ложь;
		КонецЕсли;
		сч = сч+Шаг;
	КонецЦикла;
	сбисСпрятатьСостояние(ГлавноеОкно);
	Возврат ВсеОтправлено;
КонецФункции
Функция сбисСформироватьКаталогТоваров(ДанныеКаталога,знач ИниКонфигурации, знач СтруктураПараметров) Экспорт
	// Формирует каталог товаров в формате CommerceML
	СписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	ДанныеПоНоменклатуре = Новый Массив;
	Предложения = Новый Массив;
	СтруктураГрупп = Новый Структура;
	ПлоскоеСоответствиеГрупп = Новый Соответствие;
	ПлоскоеСоответствиеГрупп.Вставить("Корень", Новый Соответствие);
	
	Если ИниКонфигурации.Свойство("ТипЦенНоменклатуры") Тогда
		Контекст = Новый Структура("Ини",ИниКонфигурации); 
		Если СтруктураПараметров.Свойство("ТипЦенНоменклатуры") и ЗначениеЗаполнено(СтруктураПараметров.ТипЦенНоменклатуры) Тогда
			ТипЦенНоменклатуры = СтруктураПараметров.ТипЦенНоменклатуры;
			ИниКонфигурации.ТипЦенНоменклатуры.Значение = СтруктураПараметров.ТипЦенНоменклатуры;
		Иначе
			ТипЦенНоменклатуры = РассчитатьЗначениеНаСервере("ТипЦенНоменклатуры", Контекст);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипЦенНоменклатуры) Тогда
			ТипЦены = Новый Структура;
			ТипЦены.Вставить("Ид", РассчитатьЗначениеНаСервере("ТипЦены_Код", Контекст));
			ТипЦены.Вставить("Наименование", РассчитатьЗначениеНаСервере("ТипЦены_Наименование", Контекст));
			ТипЦены.Вставить("Валюта", РассчитатьЗначениеНаСервере("ТипЦены_Валюта", Контекст));
			ЦенаВключаетНДС = РассчитатьЗначениеНаСервере("ТипЦены_ВключаетНДС", Контекст);
			Если ЦенаВключаетНДС = Истина Тогда
				ЦенаВключаетНДС = "true";
			Иначе
				ЦенаВключаетНДС = "false";
			КонецЕсли;
			ТипЦены.Вставить("Налог", Новый Структура("Наименование, УчтеноВСумме", "НДС", ЦенаВключаетНДС));
			СтруктураПараметров.Вставить("ТипЦены", ТипЦены);
		КонецЕсли;
	КонецЕсли;
	
	
	Для Каждого Элемент Из СписокНоменклатуры Цикл
		Номенклатура = Элемент.Значение;
		сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп,Номенклатура);
		сбисСформироватьДанныеПоНоменклатуре(Номенклатура,ИниКонфигурации,ДанныеПоНоменклатуре,Предложения, СтруктураПараметров);
	КонецЦикла;
	сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ПлоскоеСоответствиеГрупп["Корень"], СтруктураГрупп);
	СтруктураФайла = Новый Структура("КоммерческаяИнформация",Новый Структура("Классификатор", Новый Структура));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Ид",строка(Новый УникальныйИдентификатор()));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Наименование","Классификатор товаров");
	
	Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
		Владелец = Новый Структура;
		Владелец.Вставить("Ид", строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		Владелец.Вставить("Наименование", ДанныеКаталога.Организация.Наименование);
		Если ИниКонфигурации.Свойство("Организации_ИНН") Тогда
			ИмяРеквизитаИНН = СокрЛП(Сред(ИниКонфигурации.Организации_ИНН.Значение, Найти(ИниКонфигурации.Организации_ИНН.Значение, ".")+1));
		Иначе
			ИмяРеквизитаИНН = "ИНН";
		КонецЕсли;
		Если ИниКонфигурации.Свойство("Организации_КПП") Тогда
			ИмяРеквизитаКПП = СокрЛП(Сред(ИниКонфигурации.Организации_КПП.Значение, Найти(ИниКонфигурации.Организации_КПП.Значение, ".")+1));
		Иначе
			ИмяРеквизитаКПП = "КПП";
		КонецЕсли;
		Владелец.Вставить("ИНН", ДанныеКаталога.Организация[ИмяРеквизитаИНН]);
		Владелец.Вставить("КПП", ДанныеКаталога.Организация[ИмяРеквизитаКПП]);
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Владелец",Владелец);
	КонецЕсли;
	
	Если СтруктураГрупп.Свойство("Группы") Тогда
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Группы",СтруктураГрупп.Группы);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ТипCML") Тогда
		СтруктураФайла.КоммерческаяИнформация.Вставить("Каталог", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Наименование", "Каталог товаров от "+Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Товары",Новый Структура("Товар",ДанныеПоНоменклатуре));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЦены) Тогда
		ТипыЦен = Новый Массив;
		ТипыЦен.Добавить(ТипЦены);
		СтруктураФайла.КоммерческаяИнформация.Вставить("ПакетПредложений", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Наименование", "Прайс-лист от "+Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("ТипыЦен",Новый Структура("ТипЦены",ТипыЦен));
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Предложения",Новый Структура("Предложение",Предложения));
	КонецЕсли;
	
	ШаблонXML = ПолучитьXMLСПростымиЭлементами(СтруктураФайла, "UTF-16");
	
	//ТекстДок = Новый ТекстовыйДокумент;
	//ТекстДок.УстановитьТекст(ШаблонXML);
	//ИмяВрФ = КаталогВременныхФайлов()+"КаталогТоваров.xml";
	//ТекстДок.Записать(ИмяВрФ, "UTF-16");
	
	
	Возврат ШаблонXML;		
КонецФункции
Функция сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп,Номенклатура)
	// Формирует плоское соответствие групп (каждой группе соответствют вложенные в нее группы первого уровня, ключ корневой группы - "Корень")
	СписокРодителей = Новый СписокЗначений;
	ТекЭлемент = Номенклатура;
	сч = 1;
	Пока НЕ ТекЭлемент.Родитель.Пустая() Цикл
		Если ПлоскоеСоответствиеГрупп.Получить(ТекЭлемент.Родитель)=Неопределено Тогда
			ПлоскоеСоответствиеГрупп.Вставить(ТекЭлемент.Родитель, Новый Соответствие);
		КонецЕсли;
		Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Получить(ТекЭлемент) = Неопределено Тогда
			ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Вставить(ТекЭлемент)
		КонецЕсли;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп["Корень"].Получить(ТекЭлемент) = Неопределено Тогда
		ПлоскоеСоответствиеГрупп["Корень"].Вставить(ТекЭлемент)
	КонецЕсли;
КонецФункции
Функция сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ТекЭлемент, ТекСтруктураГрупп) 
	// Формирует иерархическую структуру групп из плоского соответствия, начиная перебор с ключа "Корень"
	Если ТекЭлемент.Количество()>0 Тогда
		ТекСтруктураГрупп.Вставить("Группы", Новый Структура);	
		ТекСтруктураГрупп.Группы.Вставить("Группа", Новый Массив);
		Для Каждого Элемент из ТекЭлемент Цикл
			НоваяГруппа = Новый Структура;
			НоваяГруппа.Вставить("Ид", строка(Элемент.Ключ.УникальныйИдентификатор()));
			НоваяГруппа.Вставить("Наименование", строка(Элемент.Ключ.Наименование));
			
			НовыйТекЭлемент = ПлоскоеСоответствиеГрупп.Получить(Элемент.Ключ);
			сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, НовыйТекЭлемент, НоваяГруппа);
			ТекСтруктураГрупп.Группы.Группа.Добавить(НоваяГруппа);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
Функция сбисСформироватьДанныеПоНоменклатуре(Номенклатура,знач ИниКонфигурации,ДанныеПоНоменклатуре,Предложения, СтруктураПараметров) 
	// Формирует данные по номенклатуре
	ИниКонфигурации.Вставить("Номенклатура", Новый Структура("Значение",Номенклатура));
	Если СтруктураПараметров.Свойство("ДатаЦен") и ЗначениеЗаполнено(СтруктураПараметров.ДатаЦен) Тогда
		ИниКонфигурации.Вставить("ТекущаяДата", Новый Структура("Значение",СтруктураПараметров.ДатаЦен));
	Иначе
		ИниКонфигурации.Вставить("ТекущаяДата", Новый Структура("Значение",ТекущаяДата()));
	КонецЕсли;
	
	
	ГрязныйИни = Новый Структура;
	сбисСкопироватьСтруктуру(ГрязныйИни, ИниКонфигурации); 
	
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, ГрязныйИни);
	Контекст.Документ = Номенклатура;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	ДокументДанные = ЗаполнимДаннымиДокументаСтруктуру(ГрязныйИни, Контекст, СписокДопустимыхТипов, Новый Структура("ТекущийПакет",Новый Структура),Новый Массив);
	
	БазоваяЕдиница = Новый Структура("Атрибуты", Новый Структура);
	БазоваяЕдиница.Атрибуты.Вставить("МеждународноеСокращение",ДокументДанные.БазоваяЕдиница_МеждународноеСокращение);
	БазоваяЕдиница.Атрибуты.Вставить("НаименованиеПолное",ДокументДанные.БазоваяЕдиница_НаименованиеПолное);
	БазоваяЕдиница.Атрибуты.Вставить("Код",ДокументДанные.БазоваяЕдиница_Код);
	БазоваяЕдиница.Вставить("ЗначениеУзла",ДокументДанные.БазоваяЕдиница_Наименование);
	ПолноеНаименование = ДокументДанные.Номенклатура_ПолноеНаименование;
	НоменклатураНаименование = ?(ЗначениеЗаполнено(ПолноеНаименование),ПолноеНаименование,Номенклатура.Наименование);
	СтавкаНалога = Новый Структура("СтавкаНалога", Новый Структура("Наименование, Ставка", "НДС", строка(ДокументДанные.Номенклатура_СтавкаНДС)));
	ЕдИзм = ДокументДанные.БазоваяЕдиница;
	ИдЕдИзм = "";
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		ИдЕдИзм = строка(ЕдИзм.УникальныйИдентификатор());
	КонецЕсли;
	Если СтруктураПараметров.РеквизитСопоставленияНоменклатуры = "Код" Тогда
		Если ТипЗнч(Номенклатура.Код) = Тип("Число") Тогда
			ИдНоменклатуры = СокрЛП(Формат( Номенклатура.Код ,"ЧГ = 0"));	
		Иначе
			ИдНоменклатуры = СокрЛП(Номенклатура.Код);
		КонецЕсли;
	Иначе
		ИдНоменклатуры = строка(Номенклатура.УникальныйИдентификатор())+"##"+ИдЕдИзм;
	КонецЕсли;
	Если ИниКонфигурации.Свойство("ХарактеристикиНоменклатуры") и ЗначениеЗаполнено(ИниКонфигурации.ХарактеристикиНоменклатуры.Значение) Тогда
		ЕстьХарактеристики = Ложь;
		ИмяСправочникаХарактеристики = Сред(ИниКонфигурации.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурации.ХарактеристикиНоменклатуры.Значение, ".")+1);
		Характеристики = Справочники[ИмяСправочникаХарактеристики];
		Выборка = Характеристики.Выбрать(,Номенклатура);
		Пока Выборка.Следующий() Цикл
			ЕстьХарактеристики = Истина;
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Выборка.Ссылка);
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Выборка.Ссылка));
			Ид = строка(Номенклатура.УникальныйИдентификатор())+"#"+строка(Выборка.Ссылка.УникальныйИдентификатор())+"#"+ИдЕдИзм;
			Наименование = НоменклатураНаименование+" ("+Выборка.Ссылка.Наименование+")";
			
			ХарактеристикиТовара = Неопределено;
			//		Если ИниКонфигурации.Свойство("СвойстваХарактеристики") и ЗначениеЗаполнено(ИниКонфигурации.СвойстваХарактеристики.Значение) Тогда
			//			ИмяРегистраСвойствОбъектов = Сред(ИниКонфигурации.СвойстваХарактеристики.Значение, Найти(ИниКонфигурации.СвойстваХарактеристики.Значение, ".")+1);
			//			НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
			//			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			//			НаборЗаписей.Прочитать();
			//
			//			Если НаборЗаписей.Количество()>0 Тогда	
			//				ХарактеристикиТовара = Новый Структура("ХарактеристикаТовара", Новый Массив);
			//				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
			//					ХарактеристикиТовара.ХарактеристикаТовара.Добавить(Новый Структура("Наименование,Значение", строка(ЗаписьРегистра.Свойство), строка(ЗаписьРегистра.Значение)));
			//				КонецЦикла;
			//			КонецЕсли;
			//		КонецЕсли;
			
			
			сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара,ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЦикла;
		Если ЕстьХарактеристики = Ложь Тогда
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка());
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка()));
			сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЕсли;
	Иначе
		сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
	КонецЕсли;	
КонецФункции
Функция сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара, ДанныеПоНоменклатуре, Предложения, СтруктураПараметров)
	// Формирует данные по номенклатуре
	СтруктураТовара = Новый Структура;		
	СтруктураТовара.Вставить("Ид", Ид);
	Если ДокументДанные.Свойство("Штрихкод") Тогда
		Штрихкод = РассчитатьЗначениеНаСервере("Штрихкод", Новый Структура("Ини", ГрязныйИни));
		СтруктураТовара.Вставить("Штрихкод", Штрихкод);
	КонецЕсли;
	Если ДокументДанные.Свойство("Номенклатура_Артикул") и ЗначениеЗаполнено(ДокументДанные.Номенклатура_Артикул) Тогда
		СтруктураТовара.Вставить("Артикул", ДокументДанные.Номенклатура_Артикул);	
	конецЕсли;
	СтруктураТовара.Вставить("Наименование", Наименование);
	СтруктураТовара.Вставить("БазоваяЕдиница", БазоваяЕдиница);
	Если Не Номенклатура.Родитель.Пустая() Тогда
		СтруктураТовара.Вставить("Группы", Новый Структура("Ид", строка(Номенклатура.Родитель.УникальныйИдентификатор())));
	КонецЕсли;
	СтруктураТовара.Вставить("СтавкиНалогов", СтавкаНалога);
	Если ЗначениеЗаполнено(ХарактеристикиТовара) Тогда
		СтруктураТовара.Вставить("ХарактеристикиТовара", ХарактеристикиТовара);
	КонецЕсли;
	Если ДокументДанные.Свойство("мПараметр") Тогда
		СтруктураТовара.Вставить("ЗначенияРеквизитов",Новый Структура("ЗначениеРеквизита",Новый Массив));
		Для Каждого Элемент Из ДокументДанные.мПараметр Цикл
			Параметр = Новый Структура();
			Параметр.Вставить("Наименование",Элемент.Значение.Параметр_Имя);
			Параметр.Вставить("Значение",Элемент.Значение.Параметр_Значение);
			СтруктураТовара.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(Параметр);
		КонецЦикла;
	КонецЕсли;
	ДанныеПоНоменклатуре.Добавить(СтруктураТовара);	
	Если СтруктураПараметров.Свойство("ТипЦены") Тогда
		ЦенаЗаЕдиницу = ДокументДанные.Номенклатура_Цена;
		Если ЗначениеЗаполнено(ЦенаЗаЕдиницу) Тогда
			Предложение = Новый Структура;
			сбисСкопироватьСтруктуру(Предложение,СтруктураТовара);
			//Предложение.Удалить("Группы");
			Предложение.Вставить("Цены", Новый Структура("Цена", Новый Массив));
			Предложение.Цены.Цена.Добавить(Новый Структура("ИдТипаЦены,ЦенаЗаЕдиницу",СтруктураПараметров.ТипЦены.Ид, ЦенаЗаЕдиницу));
			Предложения.Добавить(Предложение);
		КонецЕсли;
	КонецЕсли;
КонецФункции