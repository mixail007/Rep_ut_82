&НаКлиенте
перем Кэш Экспорт;
перем СоединениеСтатусыДБФ Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(знач ИмяФормы, Объект1С = Неопределено, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено)
	
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Если Объект1С = Неопределено Тогда
			ИмяФормы  = "ВнешняяОбработка.СБИС.Форма."+ИмяФормы;
		Иначе
			ИмяФормы = Объект1С+ИмяФормы;
		КонецЕсли;	
		БезопасноеИмяФормы = СтрЗаменить(ИмяФормы, ".","_");
		Если Не Кэш.Формы.Свойство(БезопасноеИмяФормы) Тогда
			Попытка
				фрм = ПолучитьФорму(ИмяФормы,ПараметрыФормы,ВладелецФормы);
			Исключение
				фрм = Ложь;
			КонецПопытки;			
			Кэш.Формы.Вставить(БезопасноеИмяФормы, фрм);
		КонецЕсли;
		Возврат Кэш.Формы[БезопасноеИмяФормы];
	Иначе
		Если Объект1С = Неопределено Тогда
			Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы,ВладелецФормы);
		Иначе
			Возврат Объект1С.ПолучитьФорму(ИмяФормы,ВладелецФормы);
		КонецЕсли;	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

//------------------------------------------------------
&НаКлиенте
Функция ОпределитьРаздел(Имя) Экспорт
	// Функция заполняет структуру с данными о текущем разделе
	Текущий = Новый Структура();
	врДл = СтрДлина(Имя);
	идРаздел = Прав(Имя,2);
	ТекущийРаздел = Лев(идРаздел,1);
	Раздел = Прав(идРаздел,1);
	ТипДок = Сред(Имя,10,врДл-11);
	
	Текущий.Вставить("Имя", Имя);
	Текущий.Вставить("ТекущийРаздел", ТекущийРаздел);
	Текущий.Вставить("Раздел", Раздел);
	Текущий.Вставить("ТипДок", ТипДок);
	
	Возврат Текущий;	
КонецФункции
&НаКлиенте
Процедура КэшПодготовить() Экспорт
	// Процедура заполняет структуру Кэша	
	сбисПоказатьСостояние("Подключение SDK", ЭтаФорма);
	Если Кэш = Неопределено Тогда
		Кэш = Новый Структура();
		Кэш.Вставить("Парам", Новый Структура());
	КонецЕсли;
	Кэш.Вставить("Заплатки", Ложь);
	Кэш.Вставить("Формы",Новый Структура());
	Кэш.Вставить("ВИ", сбисПолучитьФорму("SDK2"));
	//Если Кэш.ВИ.Включить(Кэш) Тогда
	сбисПоказатьСостояние("Установка параметров", ЭтаФорма);
	Кэш.Вставить("Текущий",Новый Структура());
	Кэш.Текущий.Вставить("Раздел","");
	Кэш.Текущий.Вставить("ТекущийРаздел","");
	Кэш.Текущий.Вставить("Имя","");
	Кэш.Текущий.Вставить("ТипДок","");
	
	Кэш.Вставить("Функции",Новый Структура());
	//Кэш.Вставить("Пакет",Новый Структура);
	Кэш.Вставить("ТаблДок","");
	Кэш.Вставить("ГлавноеОкно",сбисПолучитьФорму("ФормаГлавноеОкно"));
	Кэш.Вставить("ОбщиеФункции",сбисПолучитьФорму("РаботаСДокументами1С"));
	Кэш.Вставить("РаботаСJSON",сбисПолучитьФорму("РаботаСJSON"));
	
	//
	Кэш.Вставить("СБИС",Новый Структура);
	Кэш.СБИС.Вставить("ВерсияSDK", "");
	Кэш.СБИС.Вставить("ини",Новый Структура());
	Кэш.СБИС.Вставить("АдресСервера", "https://online.sbis.ru/");
	//Кэш.СБИС.Вставить("АдресСервера", "https://fix-online.sbis.ru/");
	//Кэш.СБИС.Вставить("АдресСервера", "https://test-online.sbis.ru/");
	//Кэш.СБИС.Вставить("АдресСервера", "https://dev-online.sbis.ru/");
	//
	Кэш.Вставить("ИниВПорядке",Ложь);//ини файлы есть и в них нет ошибок.
	
	СтруктураXSLT = ДобавитьXSLTвКэш();
	Кэш.Вставить("XSLT",СтруктураXSLT);
	//Кэш.С1.Вставить("ДокументСБИС_Ид",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид"));
	//Кэш.С1.Вставить("ДокументСБИС_Статус",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус"));
	
	Кэш.Вставить("Разделы",Новый Структура());
	Кэш.Разделы.Вставить("р1","Полученные");
	Кэш.Разделы.Вставить("р2","Отправленные");
	Кэш.Разделы.Вставить("р3","Продажа");
	Кэш.Разделы.Вставить("р4","Покупка");
	Кэш.Разделы.Вставить("р5","Настройки");
	Кэш.Разделы.Вставить("р6","Справочники");	
	Кэш.Разделы.Вставить("р7","Учет");
	
	
	
	Кэш.Разделы.Вставить("Продажа",Новый Структура());
	Кэш.Разделы.Вставить("Покупка",Новый Структура());
	Кэш.Разделы.Вставить("Справочники",Новый Структура());
	
	Кэш.Вставить("ПараметрыФильтра", Новый Структура);
	
	Кэш.Вставить("ини",Новый Структура());
	Кэш.Вставить("Цвет",Новый Структура());
	Кэш.Цвет.Вставить("АктивныйПункт",Новый Цвет(255,112,51));
	Кэш.Цвет.Вставить("ФонАктивныйРаздел",Новый Цвет(247,243,240));
	Кэш.Цвет.Вставить("ФонПассивныйРаздел",Новый Цвет(251,251,251));
	Кэш.Цвет.Вставить("ТекстАктивныйРаздел",Новый Цвет(0,0,0));
	Кэш.Цвет.Вставить("ТекстПассивныйРаздел",Новый Цвет(153,153,153));
	Кэш.Цвет.Вставить("ФонОшибки",Новый Цвет(255,209,209));
	
	Кэш.Вставить("Реестры",Новый Структура());
	Кэш.Вставить("КэшЗначенийИни",Новый Структура());
	Кэш.Вставить("КэшСертификатов",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("ТекущийПакет",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("Организации",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("РеквизитСопоставленияНоменклатуры","");
	Кэш.КэшЗначенийИни.Вставить("ИниЗагрузки",Новый Структура);
	// Пользовательские фильтры
	Кэш.Вставить("ПараметрыФильтра", Новый Структура());
	Кэш.Вставить("ФормаРаботыСоСтатусами","Статусы_Регистры");
	// Дополнительные вложения, прикладываются к каждому отправляемому пакету
	Кэш.Вставить ("ДопВложение",Новый Массив);
	Кэш.Вставить("СписокНоменклатуры",Новый СписокЗначений);
	Кэш.Вставить("ТихийРежим", Ложь);  // используется при вызове обработки извне
	Кэш.Вставить("КоличествоВОтправке", 100);
	Кэш.Вставить("КоличествоПотоковОтправки", 10);
	Кэш.Вставить("ПодготовленныеКОтправке", Новый Массив);
	Кэш.Вставить("НеобработанныеОтветыОтправки", Новый Массив);
	Кэш.Вставить("СБИСПлагинНеобработанныеОтветы", Новый Структура);
	//КонецЕсли;
КонецПроцедуры

Функция ДобавитьXSLTвКэш()
	// Функция добавляет в кэш xslt, используемые для преобразований файлов при выгрузке и загрузке документов
	СтруктураXSLT = Новый Структура;
	КаталогКонвертеров = КаталогНастроек + "xslt";	
	
	Если ((Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Версия, ПредВерсия) или Не ЗначениеЗаполнено(ПредВерсия)) 
		ИЛИ НайтиФайлы(КаталогКонвертеров,"*sbis3.xslt").Количество() = 0) Тогда   
		РаспаковатьXSLTвКаталог(КаталогКонвертеров);
	КонецЕсли;
	
	МассивФайловXSLT = НайтиФайлы(КаталогКонвертеров,"*sbis3.xslt");
	
	Для Каждого НайденныйФайл из МассивФайловXSLT Цикл
		ЧтениеФайлаXSLT = Новый ТекстовыйДокумент();
		ЧтениеФайлаXSLT.Прочитать(НайденныйФайл.ПолноеИмя,КодировкаТекста.UTF8);
		ИмяНастройки = СтрЗаменить(НайденныйФайл.ИмяБезРасширения,".sbis3","");
		СтруктураXSLT.Вставить(ИмяНастройки,ЧтениеФайлаXSLT.ПолучитьТекст());
	КонецЦикла;	
	
	МассивВнешнихXSLT=НайтиФайлы(КаталогКонвертеров,"*.xslt");                                  
	
	Для Каждого НайденныйФайл из МассивВнешнихXSLT Цикл    
		ИмяXSLT = НайденныйФайл.ИмяБезРасширения;
		Если Найти(ИмяXSLT, ".sbis3") = 0 Тогда 
			ЧтениеФайлаXSLT = Новый ТекстовыйДокумент();
			ЧтениеФайлаXSLT.Прочитать(НайденныйФайл.ПолноеИмя,КодировкаТекста.UTF8);
			
			// Для безболезненного перехода с 20 и ранее версий переименуем пользовательские xslt по-новому стандарту
			Если ИмяXSLT = "ЭДОНакл_3_01" Тогда
				ИмяXSLT = "ЭДОНакл_1175004_3_01";
			ИначеЕсли ИмяXSLT = "ЭДОНакл_5_01" Тогда
				ИмяXSLT = "ЭДОНакл_1175004_5_01";
			ИначеЕсли ИмяXSLT = "АктВР_5_01" Тогда
				ИмяXSLT = "АктВР_1175006_5_01";
			ИначеЕсли ИмяXSLT = "АктВР_3_01" Тогда
				ИмяXSLT = "АктВР_1175006_3_01";
			ИначеЕсли ИмяXSLT = "СчФктр_3_01" Тогда
				ИмяXSLT = "СчФктр_1115101_3_01";
			ИначеЕсли ИмяXSLT = "СчФктр_5_01" Тогда
				ИмяXSLT = "СчФктр_1115101_5_01";
			ИначеЕсли ИмяXSLT = "СчФктр_5_02" Тогда
				ИмяXSLT = "СчФктр_1115101_5_02";
			ИначеЕсли ИмяXSLT = "счФактКор_3_01" Тогда
				ИмяXSLT = "счФактКор_1115108_3_01";
			ИначеЕсли ИмяXSLT = "Заказ_5_01" Тогда
				ИмяXSLT = "Заказ_Заказ_5_01";
			ИначеЕсли ИмяXSLT = "АктПП_1_01" Тогда
				ИмяXSLT = "АктПП__1_01";
			ИначеЕсли ИмяXSLT = "АктПП_3_01" Тогда
				ИмяXSLT = "АктПП__3_01";
			ИначеЕсли ИмяXSLT = "АктСвер_1" Тогда
				ИмяXSLT = "АктСвер__1";
			КонецЕсли;
			//
			СтруктураXSLT.Вставить(ИмяXSLT,ЧтениеФайлаXSLT.ПолучитьТекст());       
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураXSLT;
КонецФункции

Процедура РаспаковатьXSLTвКаталог(Путь)
	
	ЭтоЛинукс = Ложь;
	Попытка
		СисИнфо = Новый СистемнаяИнформация;
		ОС = СисИнфо.ТипПлатформы;
		Если Найти(нрег(ОС),"linux")>0 Тогда
			ЭтоЛинукс = Истина;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ ЭтоЛинукс Тогда
		Если Прав(Путь,1)<>"\" Тогда
			Путь = Путь+"\";
		КонецЕсли;
		УдалитьФайлы(Путь, "*.sbis3.xml");
		
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			сбисПолучитьМакет("xslt").Записать(ИмяФайла);
			ФайлАрхива = Новый ЧтениеZIPФайла(ИмяФайла); 
			ФайлАрхива.ИзвлечьВсе(Путь, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
			ФайлАрхива.Закрыть(); 
			УдалитьФайлы(ИмяФайла);
		Исключение
			Сообщить("Произошла ошибка при извлечении xslt-файлов из архива. Возможно не хватает прав пользователя или установлены ограничения на чтение zip-файла в модуле защиты программы 1С.");
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПослеОткрытияЗаполнитьКэш() Экспорт
	// Начально заполнение всех необходимых для работы объектов	
	КэшПодготовить();
	
	//Определим заплатки
	сбисПодключитьЗаплатки();
	
	сбисПолучитьПарам();
	ОпределитьФормуИнтеграции(Кэш,Кэш.Парам.СпособОбмена);
	
	Возврат Кэш;
КонецФункции

&НаКлиенте
Функция ПослеОткрытияИзвне() Экспорт
	// Начально заполнение всех необходимых для работы объектов	
	
	ПослеОткрытияЗаполнитьКэш();
	// Определим реквизит для сопоставления номенклатуры. По умолчанию это Идентификатор. В файле сбисПараметры можно указать реквизит Код.
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(КаталогНастроек);
	Если СтруктураНастроек.Свойство("РеквизитСопоставленияНоменклатуры") Тогда
		Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры = СтруктураНастроек.РеквизитСопоставленияНоменклатуры;
	КонецЕсли;
	Если СтруктураНастроек.Свойство("АдресСервера") Тогда
		Кэш.СБИС.Вставить("АдресСервера", СтруктураНастроек.АдресСервера);
	КонецЕсли;
	Если СтруктураНастроек.Свойство("КоличествоПотоковОтправки") Тогда
		Кэш.Вставить("КоличествоПотоковОтправки", СтруктураНастроек.КоличествоПотоковОтправки);
	КонецЕсли;
	
	ОбменВключен = Кэш.Интеграция.Включить(Кэш);
	Если ОбменВключен<>Истина Тогда
		Кэш.Парам.СпособОбмена = 1;
		СпособОбмена = 1;
		ОпределитьФормуИнтеграции(Кэш,СпособОбмена);
	КонецЕсли;
	// Включаем логирование
	сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = ВестиЛог;
	Если ВестиЛог Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
	КонецЕсли;

	Если Кэш.Парам.СпособОбмена = 0 или Кэш.Парам.СпособОбмена = 2 или Кэш.Парам.СпособОбмена = 3 или Кэш.Парам.СпособОбмена = 4 Тогда // SDK
		// Авторизация
		сбисПоказатьСостояние("Авторизация", ЭтаФорма);
		формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
		Если (Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьСертификат) или (НЕ Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьПароль) Тогда
			УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
		КонецЕсли;
		Если УспешнаяАвторизация<>Истина Тогда
			Результат = формаАвторизации.ОткрытьМодально();
			Если Результат = Неопределено Тогда
				Кэш.Парам.ЗапомнитьПароль = Ложь;
				Кэш.Парам.ЗапомнитьСертификат = Ложь;
				Если ЭтаФорма.Открыта() Тогда
					ЭтаФорма.Закрыть();
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		СпособОбмена = Кэш.Парам.СпособОбмена;
		КаталогОбмена = Кэш.Парам.КаталогОбмена;
		Если СпособОбмена = 0 или СпособОбмена = 2 или СпособОбмена = 3 или СпособОбмена = 4 Тогда   // способ обмена мог измениться в настройках подключения
			Пользователь = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
			Попытка
				// С версии 2.0.10 храним дату запроса статусов и ид последнего обработанного события в настройках пользователя "СБИС", а не для текущего пользователя
				Если ЗначениеЗаполнено(ДатаПоследнегоЗапросаСтатусов) или ЗначениеЗаполнено(ИдентификаторПоследнегоСобытия) Тогда
					СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов", ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия);
					Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек,КаталогНастроек);
				ИначеЕсли ((Кэш.ОбщиеФункции.ЭтоНоваяВерсия("2.0.12", ПредВерсия) или Не ЗначениеЗаполнено(ПредВерсия)) И КаталогНастроек<>"") Тогда    // Если предыдущая версия обработки меньше 2.0.12 читаем настройки статусов из параметров пользователя
					СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
					СтруктураНастроек = Кэш.Интеграция.сбисПолучитьНастройки(СтруктураНастроек);
					Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек,КаталогНастроек);
					ДатаПоследнегоЗапросаСтатусов = СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов;
					ИдентификаторПоследнегоСобытия = СтруктураНастроек.ИдентификаторПоследнегоСобытия;
				Иначе
					СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(КаталогНастроек);
					ДатаПоследнегоЗапросаСтатусов = СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов;
					ИдентификаторПоследнегоСобытия = СтруктураНастроек.ИдентификаторПоследнегоСобытия;
				КонецЕсли;
			Исключение
				СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
				Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек,КаталогНастроек);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	ОпределитьФормуИнтеграции(Кэш,СпособОбмена);
	ВерсияSDK = Кэш.СБИС.ВерсияSDK;
	Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
	Если ПроверятьОбновления = Истина Тогда
		сбисПоказатьСостояние("Проверка наличия обновлений", ЭтаФорма);
		ОбновитьОбработку("", Ложь);
	КонецЕсли;
	
	// Если предыдущая версия обработки меньше 2.0.07 надо добавить поля характеристики в дбф номенклатуры поставщиков
	Если ((Кэш.ОбщиеФункции.ЭтоНоваяВерсия("2.0.07", ПредВерсия) или Не ЗначениеЗаполнено(ПредВерсия)) И КаталогНастроек<>"") Тогда
		сбисПоказатьСостояние("Конвертация предыдущей версии", ЭтаФорма);
		ДобавитьПоляВНоменклатуруПоставщиков();
	КонецЕсли;
	
	Если ((Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Версия, ПредВерсия) или Не ЗначениеЗаполнено(ПредВерсия)) И КаталогНастроек<>"") Тогда
		сбисПоказатьСостояние("Обновление файлов настроек", ЭтаФорма);
		сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек").ОбновитьИниФайлы(КаталогНастроек, ПредВерсия);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредВерсия) Тогда   // для новых клиентов новые форматы сразу ставим
		Формат2016 = Истина;
		Кэш.Парам.Формат2016 = Истина;
	КонецЕсли;
	
	Кэш.ОбщиеФункции.ДобавитьЗаписиВПланВидовХарактеристик();
	КаталогНастроекПриИзменении(Неопределено);	
	Возврат Кэш;
КонецФункции
&НаКлиенте
Процедура ПослеОткрытия()
	// Начально заполнение всех необходимых для работы объектов	
	ПродолжитьОткрытие = ПослеОткрытияИзвне();	
	Если ПродолжитьОткрытие = Ложь Тогда 
		Возврат;
	КонецЕсли;
	УстановитьВидимостьЭлементовПоСпособуОбмена();
	ВсеДокументы = Ложь;
	Если СпособОбмена = 0 или СпособОбмена = 2 или СпособОбмена = 3 или СпособОбмена = 4 Тогда   //SDK, API
		ПерейтиВРаздел(сбисПолучитьРазделПоУмолчанию(РазделПоУмолчанию));
	Иначе
		ПерейтиВРаздел("АккордеонПродажа33");
	КонецЕсли;
	ФильтрОбновитьПанель();	
КонецПроцедуры
&НаКлиенте
Функция сбисПолучитьРазделПоУмолчанию(РазделПоУмолчанию) Экспорт
	// Функция возвращает название раздела в аккордеоне по красивому названию.
	Если РазделПоУмолчанию = "Полученные" Тогда
		Возврат "АккордеонПолученные11";
	ИначеЕсли РазделПоУмолчанию = "Отправленные" Тогда
		Возврат "АккордеонОтправленные22";
	ИначеЕсли РазделПоУмолчанию = "Продажа" Тогда
		Возврат "АккордеонПродажа33";      
		//НГС
	ИначеЕсли РазделПоУмолчанию = "Учет" Тогда
		Возврат "АккордеонУчет77";
		//КНГС
	Иначе
		Возврат "АккордеонПокупка44";
	КонецЕсли;
	
КонецФункции
//просмотр документа
&НаКлиенте
Процедура ОткрытьДокумент(Кнопка)
	// Процедура открывает форму просмотра документа	
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",Кэш);	
	фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Кнопка)
	// Процедура открывает карточку документа на сайте online.sbis.ru	
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		ОткрытьДокументОнлайнПоПакету(ТекущаяСтрока.СоставПакета[0].Значение, Кэш);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьДокументОнлайнПоПакету(Пакет, Кэш) Экспорт
	// Процедура открывает карточку документа на сайте online.sbis.ru	
	Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" Тогда
		Ссылка = Пакет.СсылкаДляНашаОрганизация;
	ИначеЕсли Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
		фрм = сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Пакет,КаталогНастроек,"ДокументСБИС_Ид", Кэш.Ини);
		Если ЗначениеЗаполнено(ИдДок) Тогда
			СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ИдДок);
			Если СоставПакета<>Ложь Тогда
				Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Сообщить("Нет связанного документа СБИС");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Сообщить("Не удалось получить ссылку на документ");
		Возврат;
	КонецЕсли;
	//Ссылка = Ссылка + "&session=" + Кэш.Парам.ИдентификаторСессии;
	ЗапуститьПриложение(Ссылка);
КонецПроцедуры
&НаКлиенте
Процедура сбисВыйти(Элемент)
	// Процедура завершает текущую сессию на онлайне и предлагает авторизоваться, в случае авторизации обновляет информацию на главном окне	
	Кэш.Парам.ЗапомнитьПароль = Ложь;
	Кэш.Парам.Пароль = "";
	Кэш.Парам.ЗапомнитьСертификат = Ложь;
	Кэш.Интеграция.ЗакрытьСессию(Кэш);
	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Результат = формаАвторизации.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.Открыта() Тогда
		Если СпособОбмена <> Кэш.Парам.СпособОбмена Тогда // Изменился способ обмена
			СпособОбмена = Кэш.Парам.СпособОбмена;
			КаталогОбмена = Кэш.Парам.КаталогОбмена;
			ОпределитьФормуИнтеграции(Кэш,СпособОбмена);
			Если СпособОбмена = 0 или СпособОбмена = 2 или СпособОбмена = 3 или СпособОбмена = 4 Тогда   // SDK
				Пользователь = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
			Иначе
				УстановитьВидимостьЭлементовПоСпособуОбмена();
				ПерейтиВРаздел("АккордеонПродажа33");
			КонецЕсли;
		Иначе
			Если СпособОбмена = 0 или СпособОбмена = 2 или СпособОбмена = 3 или СпособОбмена = 4 Тогда   
				Пользователь = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
			КонецЕсли;
			ОбновитьКонтент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме(Обработка,ИмяФормы,ИмяФункции)
	// Функция проверяет наличие функции в форме	
	Попытка
		фрм = сбисПолучитьФорму(ИмяФормы, Обработка);
		Попытка
			Выполнить("фрм."+ИмяФункции+"();");
		Исключение
			Ошибка=ОписаниеОшибки();
			Если Найти(Ошибка,"Недостаточно фактических параметров")>0 или Найти(Ошибка,"Not enough actual parameters")>0 Тогда//функция есть
				Возврат фрм;
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;
	Исключение//форма не найдена
		ошибка = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	Возврат фрм;
КонецФункции
&НаКлиенте
Функция сбисНайтиФормуФункции(ИмяФункции,ИмяФормы,ИмяОсновнойФормы, ВходящийКэш="") Экспорт
	// Функция определяет, какую форму необходимо использовать при вызове определенной функции	
	Если ВходящийКэш <> "" Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;
	фрм = Кэш.Функции.Свойство(ИмяФункции+"_"+ИмяФормы);
	Если(фрм = Истина) Тогда //определяем местоположение кода
		Возврат Кэш.Функции[ИмяФункции+"_"+ИмяФормы];
	КонецЕсли;	
	фрм = ?(Кэш.Заплатки<>Ложь,ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки,ИмяФормы,ИмяФункции),Ложь);
	Если фрм = Ложь Тогда
		фрм = ПроверитьНаличиеФункцииВФорме(Неопределено,ИмяФормы,ИмяФункции);  //Ищем функцию в форме нашей обработки
	КонецЕсли;
	Если ИмяОсновнойФормы<>"" Тогда
		Если фрм = Ложь Тогда
			фрм = ?(Кэш.Заплатки<>Ложь,ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки,ИмяОсновнойФормы,ИмяФункции),Ложь);
		КонецЕсли;	
		Если фрм = Ложь Тогда
			фрм = ПроверитьНаличиеФункцииВФорме(Неопределено,ИмяОсновнойФормы,ИмяФункции);  //Ищем функцию в форме нашей обработки
		КонецЕсли;	
	КонецЕсли;	
	Кэш.Функции.Вставить(ИмяФункции+"_"+ИмяФормы,фрм);	
	Возврат фрм;
КонецФункции
&НаКлиенте
Процедура сбисПолучитьПарам() Экспорт
	// Процедура заполняет сохраняемые параметры обработки	
	ЗначПоУмолчанию = Новый Структура;
	ЗначПоУмолчанию.Вставить("Логин","");
	ЗначПоУмолчанию.Вставить("Пароль","");
	ЗначПоУмолчанию.Вставить("Сертификат","");
	ЗначПоУмолчанию.Вставить("ТипПрокси","Автоматически");
	ЗначПоУмолчанию.Вставить("ПроксиЛогин","");
	ЗначПоУмолчанию.Вставить("ПроксиПароль","");
	ЗначПоУмолчанию.Вставить("ПроксиПорт","");
	ЗначПоУмолчанию.Вставить("ПроксиСервер","");
	ЗначПоУмолчанию.Вставить("ЗапомнитьПароль",Ложь);
	ЗначПоУмолчанию.Вставить("ЗапомнитьСертификат",Ложь);
	ЗначПоУмолчанию.Вставить("ВходПоСертификату",Ложь);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице",50);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице1С",50);
	ЗначПоУмолчанию.Вставить("РежимСопоставления",1);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоСумме",0);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоНомеру","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоДате","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоКонтрагенту","По ИНН/КПП");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоОрганизации","Не использовать");
	ЗначПоУмолчанию.Вставить("СопоставлениеПериод","Дата документа");
	ЗначПоУмолчанию.Вставить("СопоставлятьПередЗагрузкой",Истина);
	ЗначПоУмолчанию.Вставить("ПроверятьОбновления",Истина);
	//ЗначПоУмолчанию.Вставить("ОбновлятьСтатусы",Ложь);
	//ЗначПоУмолчанию.Вставить("ОбрабатыватьСлужебные",Ложь);
	ЗначПоУмолчанию.Вставить("ПредВерсия","");
	//ЗначПоУмолчанию.Вставить("ДатаПоследнегоЗапросаСтатусов","");
	//ЗначПоУмолчанию.Вставить("ИдентификаторПоследнегоСобытия", "");
	ЗначПоУмолчанию.Вставить("ВариантВыгрузкиОтвПодр", 0);
	ЗначПоУмолчанию.Вставить("КолПакетовВОтправке", 0);
	ЗначПоУмолчанию.Вставить("ВестиЛог",Ложь);
	ЗначПоУмолчанию.Вставить("КаталогЛогов","");
	ЗначПоУмолчанию.Вставить("СпособОбмена",0);
	ЗначПоУмолчанию.Вставить("КаталогОбмена","");
	ЗначПоУмолчанию.Вставить("РазделПоУмолчанию","Полученные");
	ЗначПоУмолчанию.Вставить("ОтправлятьНоменклатуруСДокументами",Истина);
	ЗначПоУмолчанию.Вставить("СпособЗагрузки",0);
	ЗначПоУмолчанию.Вставить("ИдентификаторСессии","");
	ЗначПоУмолчанию.Вставить("Формат2016",Ложь);
	
	Если ТипЗнч(Кэш.Парам) = Тип("Структура") Тогда
		Для Каждого Поле из ЗначПоУмолчанию Цикл
			Если НЕ(Кэш.Парам.Свойство(Поле.Ключ)) Тогда
				//Попытка 
				//	Если ЗначениеЗаполнено(ЭтаФорма[Поле.Ключ]) Тогда
				//		Кэш.Парам.Вставить(Поле.Ключ,ЭтаФорма[Поле.Ключ]);
				//		Продолжить;
				//	КонецЕсли;
				//Исключение
				//КонецПопытки;
				Кэш.Парам.Вставить(Поле.Ключ,Поле.Значение);
				Попытка
					ЭтаФорма[Поле.Ключ] = Поле.Значение;
				Исключение
				КонецПопытки;
			Иначе
				Попытка
					ЭтаФорма[Поле.Ключ] = Кэш.Парам[Поле.Ключ];
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Кэш.Парам = ЗначПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

//раздел Настройки
&НаКлиенте
Процедура КаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Процедура открывает диалог выбора каталога настроек и в случае выбора вызывает чтение и проверку файлов настроек	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогНастроек = ДиалогОткрытия.Каталог; 
		КаталогНастроекПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура КаталогНастроекПриИзменении(Элемент) Экспорт
	// Процедура заполняет структуру файлов настроек (Кэш.Ини), проверяет настройки
	СказатьЧтоВсеХорошо = ?(Элемент = Неопределено,Ложь,Истина);
	УстановленныеИниФайлы = КаталогНастроекПриИзмененииОбщее(Кэш, СказатьЧтоВсеХорошо);
	СоставНастроекПриИзменении(Кэш, УстановленныеИниФайлы, СказатьЧтоВсеХорошо);
	
	Если Элемент <> Неопределено Тогда
		КонфигурацияПриИзменении(""); // Надо проставить флаги, какие из доступных файлов установлены
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция КаталогНастроекПриИзмененииОбщее(Кэш, СказатьЧтоВсеХорошо) Экспорт
	// Процедура заполняет структуру файлов настроек (Кэш.Ини), проверяет настройки
	Форма_ФайлыНастроек = сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек");
	ТестКаталогНастроек = Форма_ФайлыНастроек.ПроверитьКаталогНастроек(КаталогНастроек);
	Если ТестКаталогНастроек=""  Тогда
		Предупреждение("Каталог настроек ["+КаталогНастроек+"] не доступен(с сервера для клиент-серверной версии )");
		Возврат Ложь;
	КонецЕсли;
	
	КаталогНастроек=?(Прав(КаталогНастроек,1)<>"\",КаталогНастроек+"\",КаталогНастроек);
	Кэш.Парам.Вставить("КаталогНастроек",КаталогНастроек);
	
	Кэш.ОбщиеФункции.сбисУстановитьРеквизитСопоставленияНоменклатуры(КаталогНастроек);
	
	сбисПодключитьЗаплатки();
	
	УстановленныеИниФайлы = Новый Массив;
	сбисПоказатьСостояние("Формирование структуры настроек", ЭтаФорма);
	УстановленныеИниФайлы = Форма_ФайлыНастроек.УстановитьНастройки(Кэш.Ини, КаталогНастроек);
	Кэш.Ини = Форма_ФайлыНастроек.СформироватьСтруктуруИни(УстановленныеИниФайлы);
	сбисСпрятатьСостояние(ЭтаФорма);
	
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(КаталогНастроек);
	Если СтруктураНастроек.Свойство("РеквизитСопоставленияНоменклатуры") Тогда
		Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры = СтруктураНастроек.РеквизитСопоставленияНоменклатуры;
	КонецЕсли;
	
	Возврат УстановленныеИниФайлы;
КонецФункции
&НаКлиенте
Процедура СоставНастроекПриИзменении(Кэш, УстановленныеИниФайлы, СказатьЧтоВсеХорошо=Ложь)
	// Процедура проверяет структуру настроек, обновляет данные на форме об установленных настройках, заполняет разделы Продажа и Покупка подразделами	
	// Заполняем параметры пользовательских фильтров
	Для Каждого ТипДокумента Из Кэш.ини Цикл
		НазваниеРазделаВИни = Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументРаздел",ТипДокумента.Значение,Кэш);
		Если ТипЗнч(НазваниеРазделаВИни)=Тип("Строка") и Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов",ТипДокумента.Значение,Кэш)<>Неопределено Тогда
			МассивРазделов = Кэш.ОбщиеФункции.РазбитьСтрокуВМассив(НазваниеРазделаВИни,",");         // если документ присутствует и в Продаже, и в Покупке
			Для Каждого Раздел Из МассивРазделов Цикл
				ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+Раздел+"_"+ТипДокумента.Ключ,"Фильтр_Раздел_"+Раздел+"_Шаблон", Кэш);
				Если ФормаДопФильтра<>ложь Тогда
					ДобавитьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
	
	ФормаНастройки = сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек");
	Если УстановленныеИниФайлы.Количество()>0 Тогда
		УстановленныеИниФайлы = ФормаНастройки.сбисПроверитьНастройки(Кэш,УстановленныеИниФайлы,КаталогНастроек,СказатьЧтоВсеХорошо);
	КонецЕсли;	
	
	
	ОбновитьПоляФормы(Новый Структура("ТабУстановленныеИниФайлы", УстановленныеИниФайлы));
	СоставНастроекПриИзмененииОбщее(Кэш);
	РазделЗаполнить("Продажа", "3");
	РазделЗаполнить("Покупка", "4");
	РазделЗаполнить("Справочники", "6");
	Кэш.ОбщиеФункции.сбисДобавитьПечатныеФормы(Кэш.Ини, ИспользуемоеИмяФайла);
КонецПроцедуры
&НаКлиенте
Процедура СоставНастроекПриИзмененииОбщее(Кэш) Экспорт
	// Процедура проверяет структуру настроек, обновляет данные на форме об установленных настройках, заполняет разделы Продажа и Покупка подразделами	
	// Заполняем параметры пользовательских фильтров
	Кэш.ОбщиеФункции.СформироватьКэшСБИСини(Кэш);
	
	// Определяем формы работы со статусами и с номенклатурой поставщика
	Если Кэш.Ини.Свойство("Конфигурация") Тогда
		Кэш.Вставить("ФормаРаботыСоСтатусами",Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСоСтатусами", Кэш.Ини.Конфигурация, Кэш));
		фрм = сбисНайтиФормуФункции("ПолучитьСоединениеСтатусыДБФ",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		Если фрм<>Ложь Тогда
			СоединениеСтатусыДБФ = фрм.ПолучитьСоединениеСтатусыДБФ(Кэш.Ини.Конфигурация, КаталогНастроек);
		КонецЕсли;
		Кэш.Вставить("ФормаРаботыСНоменклатурой",Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСНоменклатуройПоставщика", Кэш.Ини.Конфигурация, Кэш));
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьУстИнифайл(Команда)
	// Процедура удаляет установленные файлы настроек	
	ФормаНастройки = сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек");
	УстановленныеИниФайлы = ФормаНастройки.УдалитьНастройкуНажатие();
	Если УстановленныеИниФайлы<>Ложь Тогда // Если были отмечены файлы для удаления
		СоставНастроекПриИзменении(Кэш, УстановленныеИниФайлы, Истина);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УстановитьНастройки(Команда)
	// процедура устанавливает файлы настроек, выбранные в списке доступных настроек	
	ФормаНастройки = сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек");
	УстановленныеИниФайлы = ФормаНастройки.УстановитьНастройкуНажатие();
	Если УстановленныеИниФайлы<>Ложь Тогда // Если были отмечены файлы для установки
		СоставНастроекПриИзменении(Кэш, УстановленныеИниФайлы, Истина);		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	// Процедура формирует список доступных настроек при выборе конфигурации	
	ФормаНастройки = сбисПолучитьФорму("Раздел_Настройки_ФайлыНастроек");
	ТабУстФайлы = ТабУстановленныеИниФайлы;
	ДоступныеИниФайлы = ФормаНастройки.ТабДоступныеИниФайлыОбновить(ФормаНастройки.ПолучитьСтруктуруКонфигурации(), ТабУстФайлы);
	ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
КонецПроцедуры

&НаКлиенте
Функция ФильтрПериодПрописью(ДатНач, ДатКнц)
	// Функция формирует период прописью	
	Если Год(ДатНач)<>Год(ДатКнц) Тогда
		Возврат Формат(ДатНач, "ДФ=""д ММММ гггг""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ гггг""");
	Иначе
		Если Месяц(ДатНач)<>Месяц(ДатКнц) Тогда
			Возврат Формат(ДатНач, "ДФ=""д ММММ""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " " + Формат(Год(ДатКнц),"ЧГ=0");	
		Иначе
			Если ДатНач=ДатКнц Тогда
				Возврат Формат(ДатКнц, "ДФ=""д ММММ гггг""")
			Иначе
				Возврат строка(День(ДатНач)) + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " "+ Формат(Год(ДатКнц),"ЧГ=0");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Сопоставление
&НаКлиенте
Процедура СопоставитьДокументы(Команда)
	// Процедура вызывает форму сопоставления документов	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
		Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
		//закомментировано, т.к. теперь сопоставление идет по вложениям
		//ИначеЕсли СписокОтмеченныхДокументов.Количество()=1 Тогда	 
		//	фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументом1С");
		//	Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;
	//Если Обновить=Истина Тогда
	//	ОбновитьКонтент();
	//КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ТаблДокПолучитьВыбранныеСтроки() Экспорт
	// Функция формирует список отмеченных строк таблицы с документами	
	СписокСтрок = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Если СтрокаТаблицы.Отмечен Тогда
			СписокСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если СписокСтрок.Количество()=0 и Кэш.ТаблДок.ТекущаяСтрока<>Неопределено Тогда
		СписокСтрок.Добавить(Кэш.ТаблДок.ТекущиеДанные);
	КонецЕсли;
	Возврат СписокСтрок;
КонецФункции
&НаКлиенте
Процедура УдалитьСопоставление(Команда)
	// Процедура удаляет сопоставление документов СБИС и 1С	
	СписокСтрок = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокСтрок.Количество()>0 Тогда
		Для Каждого Строка из СписокСтрок Цикл
			Для каждого Вложение из Строка.Значение.Документы1С Цикл
				Если Вложение.Значение = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус");
				фрм = сбисНайтиФормуФункции("УдалитьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
				фрм.УдалитьПараметрыДокументаСБИС(СтруктураСвойств, Вложение.Значение, Кэш.Ини, КаталогНастроек);
				Вложение.Значение = Неопределено;
			КонецЦикла;	
		КонецЦикла;	
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;	
	ОбновитьКонтент();
	//СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	//ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
КонецПроцедуры
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	// Процедура записывает в Кэш измененный параметр	
	Кэш.Парам[Элемент.Имя] = ЭтаФорма[Элемент.Имя];
КонецПроцедуры
&НаКлиенте
Процедура ПараметрыСтатусовПриИзменении(Элемент)
	// Процедура записывает параметры запроса статусов. При следующем запросе статусов в фильтре будут указаны данные параметры	
	СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия);
	Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек,КаталогНастроек);
КонецПроцедуры

// Отправка
&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		Ответ = Вопрос("Отправить документы только с текущей страницы или все документы списка?", Кнопки);
		Если Ответ = 2 Тогда
			ВсеДокументы = Истина;
			ИмяРеестра="";	Ини="";
			Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
				Возврат;
			КонецЕсли;
			Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
				Возврат;
			КонецЕсли;
			СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
			СписокОтмеченныхДокументов = Новый СписокЗначений;
			СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
		Иначе
			СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
		КонецЕсли;
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон",Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьДокументыТурбоРежим(Команда)
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		Ответ = Вопрос("Отправить документы только с текущей страницы или все документы списка?", Кнопки);
		ОтправитьВыбранныеДокументыТурбоРежим(Ответ, Неопределено)
	Иначе
		ОтправитьВыбранныеДокументыТурбоРежим(1, Неопределено);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьВыбранныеДокументыТурбоРежим(Ответ, ДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","ExtCom1C",, Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

// Загрузка
&НаКлиенте
Процедура ЗагрузитьВ1С(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
		Обновить = фрм.ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов);	 
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;
	Если Обновить=Истина Тогда
		ОбновитьКонтент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АнализНоменклатуры(Команда)  // плотников  +++
	// Процедура запускает отправку документов по отмеченным записям	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
		толькоАнализ = истина;
		списокНоменклатуры = новый ТаблицаЗначений;
		списокНоменклатуры.Колонки.Добавить("Номенклатура");
		списокНоменклатуры.Колонки.Добавить("ИНН");
		списокНоменклатуры.Колонки.Добавить("КПП");
	
		Обновить = фрм.ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов,ТолькоАнализ,списокНоменклатуры);	 //Плотников ТолькоАнализ
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;
	
	списокНоменклатуры.Свернуть("Номенклатура,ИНН,КПП");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ",списокНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Номенклатура,
	               |	ТЗ.ИНН,
	               |	ТЗ.КПП
	        	   |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Врем.Номенклатура,
	               |	Контрагенты.Ссылка КАК Контрагент
	               |ПОМЕСТИТЬ Групировка
	               |ИЗ
	               |	Врем КАК Врем
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО Врем.ИНН = Контрагенты.ИНН
	               |			И Врем.КПП = Контрагенты.КПП";
	Рез = запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Рез Цикл
		
		
	КонецЦикла;
	
	Если Обновить=Истина Тогда
		ОбновитьКонтент();
	КонецЕсли;
КонецПроцедуры      // плотников  +++

&НаКлиенте
Процедура ПросуммироватьВыделенные(Кнопка)
	// Процедура считает суммы документов сбис и сопоставленных им документов 1С	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СуммыПоВложениям = Новый Структура;
	Суммы1С = Новый Структура;
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		Для Каждого Строка Из СписокОтмеченныхДокументов Цикл
			СоставПакета = Строка.Значение.СоставПакета[0].Значение;
			Если СоставПакета.Свойство("Вложение") Тогда
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
						Если ЗначениеЗаполнено(Вложение.Тип) Тогда
							Если Не СуммыПоВложениям.Свойство(Вложение.Тип) Тогда
								Название = Лев(Вложение.Название, Найти(Вложение.Название,"№")-2);
								Если Не ЗначениеЗаполнено(Название) Тогда
									Название = Вложение.Тип;	
								КонецЕсли;
								СуммыПоВложениям.Вставить(Вложение.Тип, Новый Структура("Название,Сумма",Название,0));
							КонецЕсли;
							Попытка
								Сумма = Число(Вложение.Сумма);
							Исключение
								Сумма=0;
							КонецПопытки;
							СуммыПоВложениям[Вложение.Тип].Сумма = СуммыПоВложениям[Вложение.Тип].Сумма+Сумма;
							Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда
								ИниЗагрузки = Кэш.ОбщиеФункции.сбисИниЗагрузкиПоДокументу1С(Кэш, Вложение.Документы1С[0].Значение);
								ИмяРеквизитаСуммы = Кэш.ОбщиеФункции.сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки);
								ЗаполнитьСуммыДокументов1С(Суммы1С, Вложение.Документы1С[0].Значение, ИмяРеквизитаСуммы);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Предупреждение("Не выбран ни один документ");
	КонецЕсли;
	ТекстСообщения = "Сумма документов СБИС:"+Символы.ПС;
	Для Каждого Элемент Из СуммыПоВложениям Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	ТекстСообщения = ТекстСообщения + "   "+Символы.ПС+"Сумма документов 1С:"+Символы.ПС;
	Для Каждого Элемент Из Суммы1С Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	Предупреждение(ТекстСообщения);	
	//СуммаДокументовСБИС = 0;
	//СуммаДокументов1С   = 0;
	//СуммаДельта         = 0;
	//СписокДокументов = ТаблДокПолучитьВыбранныеСтроки();
	//Для Каждого СтрокаДокумента из СписокДокументов Цикл 
	//		СуммаДокументовСБИС = СуммаДокументовСБИС + СтрокаДокумента.Значение.Сумма; 
	//	Попытка
	//		СуммаДокументов1С   = СуммаДокументов1С+СтрокаДокумента.Значение.Документ1С.СуммаДокумента;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;	
	//СуммаДельта = СуммаДокументовСБИС - СуммаДокументов1С;
	//СуммаДельта = ?(СуммаДельта<0,-СуммаДельта,СуммаДельта); 
	//Предупреждение("Сумма документов СБИС: "+строка(СуммаДокументовСБИС)+Символы.ПС+"Сумма документов 1С: "+строка(СуммаДокументов1С)+Символы.ПС+"Отклонение: "+строка(СуммаДельта));
КонецПроцедуры
Процедура ЗаполнитьСуммыДокументов1С(Суммы1С, Документ1С, ИмяРеквизитаСуммы)
	//Процедура заполняет суммы документов 1С в структуре по типам документов
	Тип = Документ1С.Метаданные().Имя;
	Название = Документ1с.Метаданные().Синоним;
	Если Не Суммы1С.Свойство(Тип) Тогда
		Суммы1С.Вставить(Тип, Новый Структура("Название,Сумма",Название,0));
	КонецЕсли;
	Попытка
		Сумма = Документ1С[ИмяРеквизитаСуммы];
	Исключение
		Сумма=0;
	КонецПопытки;
	Суммы1С[Тип].Сумма = Суммы1С[Тип].Сумма+Сумма;								
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	// Процедура запускает обработку служебных документов и получение статусов	
	Кэш.Интеграция.ОбработкаСлужебныхДокументов(Кэш);
	Кэш.Интеграция.ПолучитьСписокИзменений(Кэш);
	ОбновитьКонтент();
	Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры
Процедура ДобавитьПоляВНоменклатуруПоставщиков()
	// Процедура добавляет в ДБФ номенклатуры поставщиков поля с идентификатором и справочником характеристики	
	ИмяКаталогаНоменклатурыПоставщиков = КаталогНастроек + "НоменклатураПоставщика";
	// Переместим существующие файлы
	МассивФайлов = НайтиФайлы(ИмяКаталогаНоменклатурыПоставщиков, "*.*", Истина);
	Для Каждого ФайлНомПост Из МассивФайлов Цикл
		Если ФайлНомПост.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		СоздатьКаталог(СтрЗаменить(ФайлНомПост.Путь,"НоменклатураПоставщика","НоменклатураПоставщикаКопия"));
		ПереместитьФайл(ФайлНомПост.ПолноеИмя, СтрЗаменить(ФайлНомПост.ПолноеИмя,"НоменклатураПоставщика","НоменклатураПоставщикаКопия"));
	КонецЦикла;
	// Заполним новые файлы
	МассивФайлов = НайтиФайлы(КаталогНастроек + "НоменклатураПоставщикаКопия", "*.dbf", Истина);
	Для Каждого ФайлНомПост Из МассивФайлов Цикл
		БДНовый = Новый XBase; 
		
		ИмяКаталогаНоменклатурыПоставщика = СтрЗаменить(ФайлНомПост.Путь,"НоменклатураПоставщикаКопия","НоменклатураПоставщика");
		
		БДНовый.Поля.Добавить("NAME", "S", 240,);   // название номенклатуры поставщика
		БДНовый.Поля.Добавить("ID", "S", 240,);     // идентификатор номенклатуры поставщика
		БДНовый.Поля.Добавить("IDNOM", "S", 240,);  // идентификатор нашей номенклатуры
		БДНовый.Поля.Добавить("SPRNOM", "S", 240,); // название справочника нашей номенклатуры
		БДНовый.Поля.Добавить("IDCHAR", "S", 240,);  // идентификатор нашей характеристики
		БДНовый.Поля.Добавить("SPRCHAR", "S", 240,); // название справочника нашей характеристики
		БДНовый.Индексы.Добавить("IDXID", "ID", 1, 0, "");
		БДНовый.СоздатьФайл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf", ИмяКаталогаНоменклатурыПоставщика + "NomPost.cdx"); 
		
		
		БД = Новый XBase;
		БД.ОткрытьФайл(ФайлНомПост.ПолноеИмя, ФайлНомПост.Путь+ФайлНомПост.имяБезРасширения+".cdx");
		БД.ТекущийИндекс = БД.индексы.IDXID;
		БД.Первая();
		Пока Не БД.ВКонце() Цикл
			БДНовый.Добавить();	
			БДНовый.NAME=БД.NAME;   // название номенклатуры поставщика
			БДНовый.ID=БД.ID;     // идентификатор номенклатуры поставщика
			БДНовый.IDNOM=БД.IDNOM;  // идентификатор нашей номенклатуры
			БДНовый.SPRNOM=БД.SPRNOM; // название справочника нашей номенклатуры
			БДНовый.Записать();	
			БД.Следующая();
		КонецЦикла;
		БДНовый.ЗакрытьФайл();
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ВестиЛогПриИзменении(Элемент)
	// Включает/выключает логирование SDK	
	ПараметрыПриИзменении(Элемент);
	сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = ВестиЛог;
	Если ВестиЛог Тогда
		Если ЗначениеЗаполнено(КаталогЛогов) Тогда
			Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
		Иначе
			КаталогЛоговНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогЛогов"),"", Истина);
		КонецЕсли;
	Иначе
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 0);
		КаталогЛогов = "";
		Кэш.Парам.КаталогЛогов = "";
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура КаталогЛоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога логирования	
	Если ЗначениеЗаполнено(КаталогЛогов) Тогда
		Сообщить("Нельзя изменить каталог при запущенном логировании. Для изменения каталога снимите галку ""Вести протоколирование"", перезапустите 1C Предприятие, включите протоколирование и укажите новый каталог.");
		Возврат;
	КонецЕсли;
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог для хранения логов"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогЛогов = ДиалогОткрытия.Каталог; 
		КаталогЛоговПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура КаталогЛоговПриИзменении(Элемент)
	// меняет каталог логирования	
	Если Не ЗначениеЗаполнено(КаталогЛогов) Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, Кэш.Парам.КаталогЛогов, 0);
		ВестиЛог = Ложь;
		ПараметрыПриИзменении(сбисЭлементФормы(ЭтаФорма, "ВестиЛог"));
	ИначеЕсли ВестиЛог Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнениеАдресовПоКЛАДР(Команда)
	// открывает форму заполнения адресов контрагентов по КЛАДР	
	ФормаАдреса = сбисПолучитьФорму("ФормаАдресаПоКЛАДР");
	ФормаАдреса.Открыть();
КонецПроцедуры
&НаКлиенте
Процедура НеверныеКодыКонтрагентов(Команда)
	// Показывает отчет по неверным ИНН контрагентов	
	Таб = Кэш.ОбщиеФункции.НеверныеКодыКонтрагентовНаСервере();
	Таб.Показать("Ошибки по контрагентам");
КонецПроцедуры
&НаКлиенте
Процедура ОпределитьФормуИнтеграции(Кэш,СпособОбмена) Экспорт
	// кладем в кэш форму интеграции в зависимости от способа обмена
	// удалить
	Кэш.Вставить("КоличествоВОтправке", 100);
	//
	Если СпособОбмена=0 Тогда
		Кэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2"));
		Кэш.Вставить("ИнтеграцияИмя","SDK2");
		сбисЭлементФормы(ЭтаФорма, "НадписьВерсияSDK").Заголовок = "SDK2";
		ВерсияSDK = Кэш.СБИС.ВерсияSDK;
	ИначеЕсли СпособОбмена=2 Тогда
		Кэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2Шифрование"));
		Кэш.Вставить("ИнтеграцияИмя","SDK2Шифрование");
	ИначеЕсли СпособОбмена=3 Тогда
		Кэш.Вставить("Интеграция",сбисПолучитьФорму("API"));
		Кэш.Вставить("ИнтеграцияИмя","API");
		сбисЭлементФормы(ЭтаФорма, "НадписьВерсияSDK").Заголовок = "API";
		ВерсияSDK = "";
	ИначеЕсли СпособОбмена=1 Тогда
		Кэш.Вставить("Интеграция",сбисПолучитьФорму("ИнтеграцияКаталог"));
		Кэш.Вставить("ИнтеграцияИмя","ИнтеграцияКаталог");
		сбисЭлементФормы(ЭтаФорма, "НадписьВерсияSDK").Заголовок = "Каталог";
		ВерсияSDK = "";
	Иначе
		Кэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK"));
		Кэш.Вставить("ИнтеграцияИмя","ExtSDK");
		сбисЭлементФормы(ЭтаФорма, "НадписьВерсияSDK").Заголовок = "ExtSDK";
		ВерсияSDK = "";
		// удалить
		Кэш.Вставить("КоличествоВОтправке", 1);
		//
		
	КонецЕсли;
	Кэш.Вставить("ФормаОтправки", Кэш.Интеграция);
КонецПроцедуры
&НаКлиенте
Процедура МассоваяРассылка(Команда)
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","МассоваяРассылка","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры
&НаКлиенте
Процедура сбисПереслатьДляОзнакомления(Кнопка)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисПолучитьФорму("ФормаПересылкаПакетов");
	фрм.Показать(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	// При изменении способа обмена (SDK, API, каталог)	"перезапускаем" обработку
	ПараметрыПриИзменении(Элемент);
	сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость = СпособОбмена=1;
	Если СпособОбмена = 1 и Не ЗначениеЗаполнено(КаталогОбмена) Тогда
		КаталогОбменаНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогОбмена"),"", Истина);
	КонецЕсли;
	ПослеОткрытия();
КонецПроцедуры
&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога обмена	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог обмена документами"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогОбмена = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура НадписьНужнаПомощьНажатие(Элемент)
	// Открывает помощь на sbis.ru
	ЗапуститьПриложение("http://sbis.ru/help");
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////

////////////////////// Обычное приложение/////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
Процедура ПриОткрытии()	
	КаталогНастроек = ВосстановитьЗначение("СБИС_КаталогНастроек");	
	Кэш = Новый Структура();
	Кэш.Вставить("Парам", ВосстановитьЗначение("сбисПарам"));
	ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
	НазваниеКонфигурации = Метаданные.Синоним;
	Версия = "2.0.27.1";
	ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
КонецПроцедуры
Функция ПриОткрытииИзвне() Экспорт	
	сбисВосстановитьЗначения();
	Версия = "2.0.27.1";
	Возврат ПослеОткрытияИзвне();
КонецФункции
Функция сбисВосстановитьЗначения() Экспорт	
	Кэш = Новый Структура();
	КаталогНастроек = ВосстановитьЗначение("СБИС_КаталогНастроек");	
	Кэш.Вставить("Парам", ВосстановитьЗначение("сбисПарам"));
КонецФункции
Функция сбисОтправкаИзвне(МассивСтрок) Экспорт	
	ПриОткрытииИзвне();
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	Кэш.Текущий.Вставить("Форма",сбисПолучитьФорму("Раздел_Продажа_Шаблон"));
	фрм.ОтправитьДокументы(Кэш,МассивСтрок);
КонецФункции
Процедура ПриЗакрытии()
	// Закрывает подчиненные формы, сохраняет параметры	
	Оповестить("ЗакрытьСБИС");
	Кэш.Парам.ПредВерсия = Версия;
	//Кэш.Парам.ДатаПоследнегоЗапросаСтатусов = ДатаПоследнегоЗапросаСтатусов;
	//Кэш.Парам.ИдентификаторПоследнегоСобытия = ИдентификаторПоследнегоСобытия;
	СохранитьЗначение("СБИС_КаталогНастроек",КаталогНастроек);
	СохранитьЗначение("сбисПарам",Кэш.Парам);	
КонецПроцедуры
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	// Меняет количество отбражаемых записей в реестрах СБИС	
	ФильтрСтраница = 1;
	ПараметрыПриИзменении(Элемент);
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(СтруктураДляОбновленияФормы) Экспорт
	// Обновляет данные на главном окне	
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма[Элемент.Ключ]) = Тип("ТаблицаЗначений") Тогда
				//ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				//ЭтаФорма[Элемент.Ключ].ЗаполнитьЗначения(ТаблицаДанных);
				//
				ЭтаФорма[Элемент.Ключ].Очистить();
				Для Каждого Стр Из Элемент.Значение Цикл
					СтрТ = ЭтаФорма[Элемент.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры

Процедура сбисНаСменуРаздела(Элемент)
	// Вызывает процедуру перехода в выбранный раздел	
	ПерейтиВРаздел(Элемент.Имя);
КонецПроцедуры
Функция ПерейтиВРаздел(Имя) Экспорт
	// Осуществляет переход в выбранный раздел 	
	Выбор = ОпределитьРаздел(Имя);
	НазваниеРаздела = Кэш.Разделы["р"+Выбор.Раздел];
	фрм = сбисНайтиФормуФункции("ОбновитьКонтент","Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Выбор.Вставить("Форма", фрм);
	
	Если(Выбор.Форма=Ложь) Тогда //нет отдельной формы функции для этого раздела
		Возврат Ложь;
	КонецЕсли;
	// Если в настройках ошибки, нельзя переходить в другие разделы
	Если Не Кэш.ИниВПорядке и Выбор.Имя<>"АккордеонФайлыНастроек55" Тогда //есть проблемы с ини файлами
		ПерейтиВРаздел("АккордеонФайлыНастроек55");
		ЭтаФорма.ТекущийЭлемент = сбисЭлементФормы(ЭтаФорма,"КаталогНастроек");
		Возврат Истина;
	КонецЕсли;
	// Если обмен через каталог и не указан каталог, нельзя переходить в другие разделы	
	Если Кэш.Парам.СпособОбмена = 1 и Не ЗначениеЗаполнено(Кэш.Парам.КаталогОбмена) и Выбор.Имя<>"АккордеонНастройки55" Тогда
		ПерейтиВРаздел("АккордеонНастройки55");	
		Сообщить("Укажите каталог обмена документами");
		Возврат Истина;
	КонецЕсли;
	
	Предыдущий = Кэш.Текущий;
	
	Если Выбор.Раздел <> Кэш.Текущий.ТекущийРаздел Тогда //переходим в другую категрию
		Кэш.Текущий = Выбор;
		Кэш.Текущий.ТекущийРаздел = Кэш.Текущий.Раздел; //меняем текущий раздел
		Кэш.Текущий.Имя = "Аккордеон"+Кэш.Текущий.ТипДок+Кэш.Текущий.ТекущийРаздел+Кэш.Текущий.Раздел; //заменяем ссылку на текущий раздел
		Выбор.Форма.НаСменуРаздела(Кэш);
		Выбор.Форма.НавигацияУстановитьПанель();
	иначе
		Кэш.Текущий = Выбор;
	КонецЕсли;	
	
	// Обновляем данные на форме главного окна
	Попытка
		СтруктураДляОбновленияФормы = Выбор.Форма.ОбновитьКонтент(Кэш);
		Если СтруктураДляОбновленияФормы = Ложь Тогда //если не смогли обновить таблицу - откатываем назад
			Если Предыдущий.Раздел = "" Тогда
				ПерейтиВРаздел("АккордеонФайлыНастроек55");
				ЭтаФорма.ТекущийЭлемент = сбисЭлементФормы(ЭтаФорма,"КаталогНастроек");
				Возврат Истина;
			Иначе
				Кэш.Текущий = Предыдущий;
				Кэш.Текущий.Форма.НаСменуРаздела(Кэш);
				Кэш.Текущий.Форма.НавигацияУстановитьПанель();
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
			Если Выбор.ТипДок <> Кэш.Текущий.ТипДок Тогда //была переадресация
				Возврат Истина;		
			КонецЕсли
		КонецЕсли;			
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;		
	
	// Обновляем аккордеон
	ЭлементыФормы.Аккордеон.ТекущаяСтраница = ЭлементыФормы.Аккордеон.Страницы["Страница"+Выбор.Раздел];
	
	Для Каждого ЭлементФормы из ЭлементыФормы Цикл //обновляем аккардеон
		Если Тип(ЭлементФормы)=Тип("Кнопка") и Лев(ЭлементФормы.Имя,9)="Аккордеон" Тогда
			врРаздел = ОпределитьРаздел(ЭлементФормы.Имя);
			Если Кэш.Текущий.ТекущийРаздел = врРаздел.ТекущийРаздел Тогда //кнопка принадлежит активной панели
				Если Выбор.Имя = врРаздел.Имя Тогда
					ЭлементФормы.ЦветРамки = Кэш.Цвет.АктивныйПункт;
				иначеЕсли Выбор.Раздел = врРаздел.Раздел Тогда //это активный раздел
					ЭлементФормы.ЦветРамки = Кэш.Цвет.ФонАктивныйРаздел;
				иначе
					ЭлементФормы.ЦветРамки = Кэш.Цвет.ФонПассивныйРаздел;
				КонецЕсли;
			КонецЕсли;
			Если Найти(ЭлементФормы.Имя, "Заглушка")>0 Тогда
				ЭлементФормы.ЦветРамки = Кэш.Цвет.ФонПассивныйРаздел;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Прячем пользовательские параметры фильтра предыдущего раздела
	Если ЗначениеЗаполнено(Предыдущий.Раздел) Тогда
		НазваниеРазделаПред = Кэш.Разделы["р"+Предыдущий.Раздел];
		ФормаДопФильтраПред = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРазделаПред+"_"+Предыдущий.ТипДок,"Фильтр_Раздел_"+НазваниеРазделаПред+"_Шаблон", Кэш);
		Если ФормаДопФильтраПред<>ложь Тогда
			СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтраПред);	
		КонецЕсли;
	КонецЕсли;
	// Устанавливаем пользовательские параметры фильтра для текущего раздела
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
	КонецЕсли;
	ФильтрОбновитьПанель();
	Возврат Истина;
КонецФункции
Процедура РазделЗаполнить(НазваниеРаздела, НомерРаздела)
	// Заполняет подразделы разделов Продажа и Покупка	
	Подразделы = Новый Массив();
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);	
	
	Для Каждого ТипДокумента Из Кэш.ини Цикл
		НазваниеРазделаВИни = Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументРаздел",ТипДокумента.Значение,Кэш);
		Если ТипЗнч(НазваниеРазделаВИни)=Тип("Строка") и Найти(НазваниеРазделаВИни,НазваниеРаздела)>0 и (Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов",ТипДокумента.Значение,Кэш)<>Неопределено или ТипДокумента.Значение.Свойство("СправочникТип")) Тогда
			Если Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию",ТипДокумента.Значение,Кэш) = "1" Тогда
				Подразделы.Вставить(0,ТипДокумента.Ключ);	
			Иначе
				Подразделы.Добавить(ТипДокумента.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Кэш.Разделы[НазваниеРаздела] = Новый Структура;
	КолРазделов = Подразделы.Количество();
	сч = 0;
	Пока сч<КолРазделов Цикл
		ИмяКнопки = "Аккордеон"+НазваниеРаздела+"Док"+строка(сч)+НомерРаздела+НомерРаздела;
		Кэш.Разделы[НазваниеРаздела].Вставить(ИмяКнопки,Подразделы[сч]);
		Контекст = Кэш.ини[Подразделы[сч]];
		ТектКнопки = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название",Контекст,Кэш);
		Попытка
			Кэш.ГлавноеОкно.ЭлементыФормы[ИмяКнопки].Заголовок = "    "+ТектКнопки;
		Исключение
			Сообщить("Раздел """+ТектКнопки+""" не подключен. Слишком много файлов настроек.");
		КонецПопытки;
		
		сч = сч+1;
	КонецЦикла;
	// очищаем кнопки, если инишки были удалены
	Пока сч<10 Цикл
		ИмяКнопки = "Аккордеон"+НазваниеРаздела+"Док"+строка(сч+1)+НомерРаздела+НомерРаздела;
		Попытка
			Кэш.ГлавноеОкно.ЭлементыФормы[ИмяКнопки].Заголовок = "";
		Исключение
		КонецПопытки;
		сч = сч+1;
	КонецЦикла
КонецПроцедуры
Процедура ТаблДокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Оформление строки таблицы документов	
	Попытка
		фрм = ЭтотОбъект.ПолучитьФорму(Элемент.Имя);
	Исключение	
		Сообщить("Нет формы для '"+Элемент.Имя+"'");
	КонецПопытки;	
	фрм.ТаблДокПриВыводеСтроки(Кэш, Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры
//Процедура ОткрытьПанельМассовыхОпераций(Элемент)
//	ЭлементыФормы.ПанельМассовыхОпераций.Видимость = Истина;
//КонецПроцедуры
//Процедура ЗакрытьПанельМассовыхОпераций(Элемент)
//	ЭлементыФормы.ПанельМассовыхОпераций.Видимость = Ложь;
//КонецПроцедуры
Процедура ОткрытьДокумент1С(Кнопка) Экспорт
	// Открывает документы 1С по текущей строке таблицы документов	
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	Попытка 
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ1С) Тогда
			ОткрытьЗначение(ТекущаяСтрока.Документ1С);
		КонецЕсли;
	Исключение	
		Попытка
			Если ТекущаяСтрока.Документы1С.Количество()>0 Тогда
				Для Каждого Документ1С Из ТекущаяСтрока.Документы1С Цикл
					ОткрытьЗначение(Документ1С.Значение);
				КонецЦикла;
			Иначе
				Сообщить("Нет связанного документа 1С");
			КонецЕсли;
		Исключение					
		КонецПопытки;
	КонецПопытки;
КонецПроцедуры
Процедура ТабУстановленныеИниФайлыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Процедура открывает выбранный файл настроек	
	ЭтотОбъект.ПолучитьФорму("Раздел_Настройки_ФайлыНастроек").ТабУстановленныеИниФайлыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);	
КонецПроцедуры

//Панель фильра
Процедура ФильтрЗакрытьПанельУстановки(Элемент)
	// Закрывает панель фильтра	
	ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Ложь;
КонецПроцедуры
Процедура ФильтрОткрытьПанельУстановки(Элемент)
	// Открывает панель фильтра	
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ФильтрУстановитьВидимость","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",Кэш);	
	фрм.ФильтрУстановитьВидимость(ЭтаФорма);
	ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Истина;
	ЭлементыФормы.ФильтрСостояние.СписокВыбора = СписокСостояний;
	ЭлементыФормы.ФильтрСостояние.Значение = ФильтрСостояние;
	
	ФильтрУстановитьВидимость(Число(ФильтрПериод));
КонецПроцедуры
Процедура ФильтрУстановить(Элемент)
	// Обновляет данные в соответствии с выбранными параметрами фильтра	
	ФильтрЗакрытьПанельУстановки(1);
	ФильтрСтраница = 1;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		УстановитьДополнительныеПараметрыФильтра(ФормаДопФильтра);	
	КонецЕсли;
	
	
	ФильтрОбновитьПанель();
	ОбновитьКонтент();
КонецПроцедуры
Процедура ФильтрОчистить(Элемент)
	// Устанавливает фильтр по умолчанию для текущего раздела	
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	ОбновитьКонтент();
КонецПроцедуры
Процедура ФильтрОбновитьПанель() Экспорт
	// Формирует строковое представление по всем установленным параметрам фильтра	
	ТекущееЗначениеФильтра="";
	Если Число(ФильтрПериод)>0 Тогда
		ТекущееЗначениеФильтра = ЭтаФорма.ЭлементыФормы.ФильтрПериод.ВыделенныйТекст;	
	иначеЕсли Число(ФильтрПериод)=-1 Тогда
		ТекущееЗначениеФильтра = ЭтаФорма.ЭлементыФормы.ФильтрПериод.ВыделенныйТекст+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	Иначе
		ТекущееЗначениеФильтра = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрСостояние) и ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ЭтаФорма.ЭлементыФормы.ФильтрСостояние.ВыделенныйТекст;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	
	//Добавим дополнительные параметры фильтра для текущего раздела
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		ЭлементыФормы.ПанельФильтра.ТекущаяСтраница = ЭлементыФормы.ПанельФильтра.Страницы["ФильтраНет"];		
	иначе
		//		ЭлементыФОрмы.ТекущееЗначениеФильтра.Заголовок = ТекущееЗначениеФильтра;
		ЭлементыФормы.ПанельФильтра.ТекущаяСтраница = ЭлементыФормы.ПанельФильтра.Страницы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
Процедура ФильтрУстановитьВидимость(Период)
	// Устанавливает видимость элементов фильтра	
	Если(Период<0) Тогда
		ЭтаФорма.ЭлементыФормы.ФильтрДатаНач.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.ФильтрДатаКнц.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаНач.Видимость = Истина;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаКнц.Видимость = Истина;
	иначе
		ЭтаФорма.ЭлементыФормы.ФильтрДатаНач.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.ФильтрДатаКнц.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаНач.Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы.НадписьФильтрДатаКнц.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
Процедура ФильтрПриИзмененииПериода(Элемент)
	// Рассчитывает начальную и конечную дату в зависимости от выбранного периода	
	Значение = Число(Элемент.Значение);
	ФильтрУстановитьВидимость(Значение);
	Если(Значение=0) Тогда
		ФильтрДатаНач="";
		ФильтрДатаКнц="";
		Возврат;
	КонецЕсли;
	Если(Значение=0.1) Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
		Возврат;
	КонецЕсли;
	Если(Значение>=1) Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,Значение*-1);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Навигация
Процедура КоманднаяПанельНавигацияПоСтраницам(Кнопка)
	// Осуществляет переход по страницам в реестрах СБИС	
	Если Кнопка.Имя = "НавигацияПерваяСтраница" Тогда
		ФильтрСтраница = 1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияПредыдущаяСтраница" Тогда
		ФильтрСтраница = ФильтрСтраница-1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияСледующаяСтраница" Тогда
		ФильтрСтраница = ФильтрСтраница+1;
	КонецЕсли;
	Если Кнопка.Имя = "НавигацияПоследняяСтраница" Тогда
		ФильтрСтраница = 0;
	КонецЕсли;
	ОбновитьКонтент();
КонецПроцедуры

Процедура ОтметитьВсеПриИзменении(Элемент)
	// Отмечает все записи в таблице документов	
	Для Каждого Строка Из Кэш.ТаблДок.Значение Цикл
		Строка.Отмечен = Элемент.Значение;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Кнопка)
	// Выполняет утверждение/отклонение отмеченных документов	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Кнопка.Имя);
	ОбновитьКонтент();
КонецПроцедуры
Функция ОбновитьКонтент() Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;
		Попытка
			ЗначениеПоиска = Кэш.ТаблДок.ТекущиеДанные[РеквизитПоиска]	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				Кэш.ТаблДок.ТекущаяСтрока = Строка[0];
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ОбновитьОбработку(Команда, СообщатьОбновлениеНеТребуется = Истина)
	// Обновляет обработку на новую версию	
	//подключаемся, скачиваем файл с версией, читаем его
	Если СообщатьОбновлениеНеТребуется = Неопределено Тогда
		СообщатьОбновлениеНеТребуется = Истина;	
	КонецЕсли;
	сбисСервер = "download.sbis.ru";
	ВерсияНаСервере = КаталогВременныхФайлов()+"version.tmp";
	Прокси = Новый ИнтернетПрокси;
	Прокси.Пользователь = Кэш.Парам.ПроксиЛогин;
	Прокси.Пароль = Кэш.Парам.ПроксиПароль;
	Если Кэш.Парам.ТипПрокси = "Вручную" Тогда
		Попытка
			Прокси.Установить("http",Кэш.Парам.ПроксиСервер,Кэш.Парам.ПроксиПорт,Кэш.Парам.ПроксиЛогин,Кэш.Парам.ПроксиПароль);
		Исключение
			Прокси.Установить("http",Кэш.Парам.ПроксиСервер,Кэш.Парам.ПроксиПорт);
		КонецПопытки;
	КонецЕсли;
	Соединение = Новый HTTPСоединение(сбисСервер,,,,Прокси);
	Попытка 		
		Соединение.Получить("/files/1C/8.2-2/version.txt", ВерсияНаСервере);
		ВерсияНаСервере = Новый ЧтениеТекста(ВерсияНаСервере);
		ВерсияНаСервере = ВерсияНаСервере.ПрочитатьСтроку();
		Если НЕ ЗначениеЗаполнено(ВерсияНаСервере) Тогда
			ВызватьИсключение("");
		КонецЕсли;
	Исключение
		Сообщить("Обновление не найдено.");
		Возврат;
	КонецПопытки;
	//сравниваем версии
	Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(ВерсияНаСервере, Версия) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Обнаружена новая версия обработки "+ВерсияНаСервере+", текущая версия "+ Версия+". Обновить?"";";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.ДА Тогда
			сбисВерсияОбработки = ИспользуемоеИмяФайла;
			Попытка 
				ПереместитьФайл(сбисВерсияОбработки, сбисВерсияОбработки+".bak");
			Исключение 
				Сообщить(сбисВерсияОбработки+" заблокирован обновление не возможно");
				Возврат;
			КонецПопытки;
			Попытка 		
				Соединение.Получить("/files/1C/8.2-2/Sbis1C.epf", сбисВерсияОбработки);
			Исключение
				ПереместитьФайл( сбисВерсияОбработки+".bak",сбисВерсияОбработки);
				Сообщить("Обновление загрузить не удалось.");
				Возврат;
			КонецПопытки;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Если СообщатьОбновлениеНеТребуется Тогда
			Сообщить("Обновление не требуется.");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Сообщить("Обновление загружено. Перезапустите 1С (не обработку!). Текущая версия должна быть "+ВерсияНаСервере);
	Возврат;
КонецПроцедуры
&НаКлиенте
Процедура сбисПодключитьЗаплатки() Экспорт
	// Подключает внешнюю обработку с пользовательскими функциями
	Попытка
		КатНастр=?(Прав(КаталогНастроек,1)<>"\",КаталогНастроек+"\",КаталогНастроек);
		ПроверитьВнешнююОбработку(КатНастр+"ВнешниеФункции_Клиент.epf");
		Кэш.Заплатки = Неопределено;
		Кэш.Заплатки = ВнешниеОбработки.Создать(КатНастр+"ВнешниеФункции_Клиент.epf");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры
Функция ПроверитьВнешнююОбработку(Адрес) Экспорт
	// Проверяет наличие внешней обработки с пользовательскими функциями	
	Обработка = ВнешниеОбработки.Создать(Адрес);
	Возврат Обработка.ИспользуемоеИмяФайла;
КонецФункции

Процедура СохранитьПакет(Элемент)
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	КаталогВыгрузки = "";
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог выгрузки";
	Если ДиалогОткрытия.Выбрать() Тогда
		КаталогВыгрузки = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	
	Если КаталогВыгрузки <> "" Тогда
		ВремКаталог = КаталогВременныхФайлов();
		Сч = 0;
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
		Для каждого СтрокаИзСписка из СписокОтмеченныхДокументов Цикл
			Сч = Сч + 1;			
			сбисПоказатьСостояние("Архивирование", ЭтаФорма, Окр(100*Сч / СписокОтмеченныхДокументов.Количество(), 0));
			
			document = Кэш.Docflow.CreateSimpleObject(); 
			document.Write( "Идентификатор", СтрокаИзСписка.Значение.ИдСБИС ); 
			Результат = Кэш.docflow.ReadDocument( document );	
			ЗаголовокПакета = СтрокаИзСписка.Значение.СоставПакета[0].Значение.Название;
			ИмяZIP = СтрЗаменить(ЗаголовокПакета,":",".");
			ИмяZIP = СтрЗаменить(ИмяZIP,"\","_");
			ИмяZIP = СтрЗаменить(ИмяZIP,"/","_");
			
			//Сохраним архив пакета во временный каталог
			URL = Результат.Read( "СсылкаНаАрхив" );		
			ПолноеИмяФайла = ВремКаталог + "\" + ИмяZIP + ".zip";
			Кэш.Docflow.LoadDataFromURIToFile(URL, ПолноеИмяФайла );
			
			//Скопируем содержимое архива пакета в новый архив
			ЧтениеZIP =  Новый ЧтениеZipФайла(ПолноеИмяФайла);
			УдалитьФайлы(ВремКаталог + "\arh1S");
			ЧтениеZIP.ИзвлечьВсе(ВремКаталог + "\arh1S");
			ЗаписьZIP =  Новый ЗаписьZipФайла(КаталогВыгрузки+"\"+ИмяZip+".zip");
			ЗаписьZIP.Добавить(ВремКаталог + "\arh1S\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			
			//Добавим в новый архив pdf-файлы
			СписокФайлов = Новый СписокЗначений;
			Вложения = Результат.ReadObjectList( "Вложение" );
			Если Вложения= Неопределено Тогда
				Сообщить("В пакете "+ЗаголовокПакета+" отсутствуют вложения");
				сбисСпрятатьСостояние(ЭтаФорма);
				Продолжить;
			КонецЕсли;
			МассивВложений = Новый Массив;
			Для СчВложений = 0 по Вложения.count - 1 Цикл
				Если Вложения.at(СчВложений).Read( "Служебный" ) = "Да" Тогда
					Продолжить;
				КонецЕсли;	
				URL = Вложения.at(СчВложений).Read( "СсылкаНаPDF" );
				ИмяФайла = Вложения.at(СчВложений).Read( "Название" );
				ИмяФайла = СтрЗаменить(ИмяФайла,":",".");
				ИмяФайла = СтрЗаменить(ИмяФайла,"\","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"/","_");
				
				СчетчикИменФайлов = 1;
				Пока СписокФайлов.НайтиПоЗначению(ИмяФайла) <> Неопределено Цикл
					ИмяФайла = ИмяФайла + " (" + СчетчикИменФайлов + ")";
					СчетчикИменФайлов = СчетчикИменФайлов + 1;
				КонецЦикла;
				
				ПолноеИмяФайлаПДФ = ВремКаталог + "\" + ИмяФайла + ".pdf";			
				Если URL <> "" Тогда						
					Кэш.Docflow.LoadDataFromURIToFile(URL, ПолноеИмяФайлаПДФ );
					ЗаписьZIP.Добавить(ПолноеИмяФайлаПДФ);
					СписокФайлов.Добавить(ИмяФайла, ИмяФайла);
				КонецЕсли;								
			КонецЦикла;
			ЗаписьZIP.Записать();
			
			Для каждого ФайлПДФ из СписокФайлов Цикл
				ПолноеИмяФайлаПДФ = ВремКаталог + "\" + ФайлПДФ + ".pdf";			
				УдалитьФайлы(ПолноеИмяФайлаПДФ);
			КонецЦикла;	
			
			УдалитьФайлы(ПолноеИмяФайла);
			
		КонецЦикла;	
		сбисСпрятатьСостояние(ЭтаФорма);
	КонецЕсли;
	
	
КонецПроцедуры
//Процедура ФильтрПриИзменении(Элемент)
//	Кэш.ПараметрыФильтра.Вставить(Элемент.Имя, Элемент.Значение);
//КонецПроцедуры
Функция ДобавитьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	// Добавляет на форму главного окна все элементы пользовательских фильтров	
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра.Высота = ФормаДопФильтра.ЭлементыФормы.ПанельУстановкиФильтра.Высота;
	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
		Попытка  // на случай, если один и тот же элемент используется в нескольких разделах
			Элемент = ФормаДопФильтра.ЭлементыФормы[ДопЭлемент.Значение];
			ЭтаФорма.ЭлементыФормы.Добавить(ТипЗнч(Элемент), Элемент.Имя, Истина, ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра);
			Если ТипЗнч(Элемент) = Тип("ПолеВвода") или ТипЗнч(Элемент) = Тип("ПолеВыбора") или ТипЗнч(Элемент) = Тип("Флажок") Тогда
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ТипЗначения = Элемент.ТипЗначения;
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветТекстаКнопки = Элемент.ЦветТекстаКнопки;
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветФонаКнопки = Элемент.ЦветФонаКнопки;
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветРамки = Элемент.ЦветРамки;
				Если ТипЗнч(Элемент) <> Тип("Флажок") Тогда
					ЭтаФорма.ЭлементыФормы[Элемент.Имя].КнопкаВыбора = Элемент.КнопкаВыбора;
				КонецЕсли;
				Кэш.ПараметрыФильтра.Вставить(Элемент.Имя,Элемент.Значение);
			КонецЕсли;
			Если ТипЗнч(Элемент) = Тип("Флажок") Тогда
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].Заголовок = Элемент.Заголовок;
			КонецЕсли;
			Если ТипЗнч(Элемент) = Тип("ПолеВыбора") Тогда
				ЭтаФорма.ЭлементыФормы[Элемент.Имя].СписокВыбора = Элемент.СписокВыбора;
			КонецЕсли;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Значение = Элемент.Значение;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Высота = Элемент.Высота;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Ширина = Элемент.Ширина;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Лево = Элемент.Лево;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Верх = Элемент.Верх;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].ЦветТекста = Элемент.ЦветТекста;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Видимость = Ложь;
			ЭтаФорма.ЭлементыФормы[Элемент.Имя].Шрифт = Элемент.Шрифт;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
Функция УстановитьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	// Записывает в Кэш значения пользовательских фильтров для текущего раздела	
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			Если ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВвода") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВыбора") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("Флажок") Тогда
				Кэш.ПараметрыФильтра.Вставить(Элемент.Значение,ЭтаФорма.ЭлементыФормы[Элемент.Значение].Значение);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
Функция ОчиститьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	// Очищает пользовательские параметры фильтра	
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			Если ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВвода") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВыбора") Тогда
				Кэш.ПараметрыФильтра.Вставить(Элемент.Значение,"");
				ЭтаФорма.ЭлементыФормы[Элемент.Значение].Значение = "";
			КонецЕсли;
			Если ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("Флажок") Тогда
				Кэш.ПараметрыФильтра.Вставить(Элемент.Значение,Ложь);
				ЭтаФорма.ЭлементыФормы[Элемент.Значение].Значение = Ложь;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
Функция СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	// Скрывает на форме элементы пользовательских фильтров	
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Ложь;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
Функция ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	// Показывает на форме элементы пользовательских фильтров	
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра.Высота = ФормаДопФильтра.ЭлементыФормы.ПанельУстановкиФильтра.Высота;
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Истина;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоСпособуОбмена()
	// устанавливаем видимость вкладок в зависимости от способа обмена	
	Если СпособОбмена=0 или СпособОбмена=2 или СпособОбмена=4 Тогда  // SDK
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные3").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные4").Видимость = Истина;	
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные5").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные6").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "Выйти").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "Пользователь").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = Истина;
	ИначеЕсли СпособОбмена = 1 Тогда   // Каталог
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные3").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные4").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные5").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные6").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "Выйти").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "Пользователь").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = Ложь;
	ИначеЕсли СпособОбмена = 3 Тогда   // апи
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные3").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные4").Видимость = Истина;	
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные5").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные6").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "Выйти").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "Пользователь").Видимость = Истина;
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ВерсияНажатие(Элемент)
	// Открывает хистори обработки.
	ЗапуститьПриложение("https://help.sbis.ru/help/integration/1C_set/modul/history/");	
КонецПроцедуры

Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	Таблица_РеестрСправочников = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = ЭлементыФормы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	// Отмечает вложенные записи дерева значений при отметке группы
	Потомки = ТекущиеДанные.Строки;
	Значение = ТекущиеДанные.Отмечен;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.Строки;
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКаталог(Команда)
	// Формирует и отправляет на онлайн каталог товаров
	Если Кэш.Парам.СпособОбмена = 1 Тогда // каталог
		Сообщить("Отправить каталог товаров можно только при способе обмена SDK или API. Способ обмена указывается в разделе Настройки");
		Возврат;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, Таблица_РеестрСправочников.Строки);
	ДанныеКаталога = Новый Структура("СписокНоменклатуры, Организация",СписокОтмеченных, ВладелецКаталога);
	КаталогОтправлен = Кэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(Кэш, ДанныеКаталога,Кэш.Ини.Номенклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));
	Если КаталогОтправлен <> Ложь Тогда
		Сообщить("Каталог товаров успешно отправлен");
	КонецЕсли;
	ОтметитьВсе = Ложь;
	ОбновитьКонтент();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	Потомки = Таблица_РеестрСправочников.Строки;
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Открывает карточку записи справочника
	ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьПрайс(Команда)
	// Вставить содержимое обработчика.
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, Таблица_РеестрСправочников.Строки);
	Если СписокОтмеченных.Количество() = 0 Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат;
	КонецЕсли;
	ДанныеКаталога = Новый Структура("СписокНоменклатуры, Организация",СписокОтмеченных, ВладелецКаталога);
	фрм = сбисНайтиФормуФункции("сбисСформироватьКаталогТоваров","РаботаСДокументами1С","",Кэш);
	Прайс = фрм.сбисСформироватьКаталогТоваров(ДанныеКаталога,Кэш.Ини.Номенклатура,Новый Структура("РеквизитСопоставленияНоменклатуры,ТипЦенНоменклатуры,ДатаЦен,ТипCML", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры,ТипЦен,ДатаЦен, "Прайс"));
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Прайс);
	ИмяВрФ = КаталогВременныхФайлов()+"ПрайсЛист от "+Формат(ТекущаяДата(), "ДФ=""дд_ММ_гггг""")+".xml";
	ТекстДок.Записать(ИмяВрФ, "UTF-16");
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ИмяВрФ);
	
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceNotificationOut"));
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура	сбисВывестиДанныеВТаблДок(Кнопка)
	
	фрм = сбисНайтиФормуФункции("сбисВывестиСписок","Форма_ВывестиСписок","Форма_ВывестиСписок",Кэш);	
	фрм.сбисВывестиСписок(Кэш);
	
КонецПроцедуры