Перем МассивЗакладок;
&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Процедура ЗагрузитьВ1С(Команда) Экспорт   				     	//сбисНикифоров переделал процедуру кнопки
	СоставПакета = МестныйКэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(СоставПакета, МестныйКэш); // пока SDK не возвращает дату, номер док. основания
	Если СоставПакета.НоменклатураСопоставлена Тогда       //Если номенклатура сопоставлена
		ЗагрузитьВложения(1);  						 //Загружаем  в обычном режиме	
	Иначе                     						 //Иначе справшиваем хотим ли загружать автоматически 
		ФормаВариантЗагрузки = сбисПолучитьФорму("ФормаВариантЗагрузки");
		сбисЭлементФормы(ФормаВариантЗагрузки,"СпособЗагрузки").Заголовок = "Отменить загрузку. Перейти к сопоставлению номенклатуры";
		Ответ = ФормаВариантЗагрузки.ОткрытьМодально();
		ЗагрузитьВ1СВыбраннымСпособом(Ответ, "");
	КонецЕсли;
	ОбновлятьГлавноеОкно = Истина;
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВ1СВыбраннымСпособом(Ответ, Параметры) Экспорт  				     	
	Если Ответ = 1 Тогда
		ЗагрузитьВложения(0);
	КонецЕсли;		
	Если Ответ = 0 Тогда 
		ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
	КонецЕсли;		
	Если Ответ = 2 Тогда 								
		ЗагрузитьВложения(2);	                        
	КонецЕсли;  
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВложения(ВидЗагрузки)				//сбисНикифоров Вид загрузки - 1 или 0 1 - в ручную, 0 автоматически
	Ответ = 1;
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество()>0 и СтрокаТаблДок.МожемЗагрузитьВ1С>0 Тогда
			ЕстьДокументы1С = Истина;
			Режим = Новый СписокЗначений();
			Режим.Добавить(0,"Перезаполнить");
			Режим.Добавить(1,"Создать новые");
			Режим.Добавить(2,"Отменить");
			Ответ = Вопрос("Есть сопоставленные документы. Выберите вариант загрузки.", Режим, 0);
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	ЗагрузитьВложенияСоздатьПерезаполнить(Ответ, ВидЗагрузки);	
КонецПроцедуры
&НаКлиенте
Процедура ЗагрузитьВложенияСоздатьПерезаполнить(РезультатВопроса, ВидЗагрузки)				//сбисНикифоров Вид загрузки - 1 или 0 1 - в ручную, 0 автоматически
	Если РезультатВопроса = 2 Тогда
		Возврат;
	КонецЕсли;
	СоздаемНовый = РезультатВопроса = 1;
	
	СписокВесов = Новый СписокЗначений;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрмНоменклатуры = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
	ИсходящиеДокументы1С = Новый СписокЗначений;  // при загрузке расхождения редактируем исходящий документ
	
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		
		Вложение = СтрокаТаблДок.Вложение[0].Значение;
		Если Вложение.Свойство("Направление") И Вложение.Направление = "Исходящий" и Вложение.Документы1С.Количество()>0 Тогда
			ИсходящиеДокументы1С.Добавить(Вложение.Документы1С[0].Значение);	
		КонецЕсли;			
		
		Если СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда					//Если на вложение нет ИНИшки для загрузки то ничего не делаем
			Продолжить             
		КонецЕсли;          
		
		СтатусКонтрагента = Найти(СтрокаТаблДок.Статус," Не найден контрагент.")>0; //Узнаем найден ли контрагент 
		СопоставлениеНеТребуется = Найти(СтрокаТаблДок.Статус,"Сопоставление не требуется. ")>0;
		
		Если СтатусКонтрагента=Истина И ВидЗагрузки=0 Тогда										//Если нет контрагента и работаем в режиме автоматического создания карточек номенклатуры
			СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;		//Открываем форму создания контрагента
			фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,МестныйКэш); 
			фрм.ЗаполнитьИзФайла(СтрокаТаблДок, СоставПакета);	
		КонецЕсли;	
		
		СтруктураИниФайла = Вложение.СтруктураИниФайла;
		Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Название",СтруктураИниФайла,МестныйКэш);
		ТипДокумента = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Документ", СтруктураИниФайла, МестныйКэш));
		
		СтруктураФайла = Вложение.СтруктураФайла;
		СтрКонтрагента = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьКонтрагента, СтруктураФайла);
		//КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла, МестныйКэш);
		//ОрганизацияРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Организация_Роль", СтруктураИниФайла, МестныйКэш);
		НашаНоменклатура = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", СтруктураИниФайла, МестныйКэш);
		
		Если НЕ СопоставлениеНеТребуется и НЕ СоставПакета.НоменклатураСопоставлена Тогда
			СчСтр = 0;
			ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьТаблДок, СтруктураФайла);
			
			Попытка   //d.ch 29.06.15
				стрТаблДок = фрмНоменклатуры.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(СтрКонтрагента, ТаблДок, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
			Исключение	
				Ошибка = ОписаниеОшибки();
				стрТаблДок = Новый Структура;
			КонецПопытки;
			
			Для Каждого СтрТабл Из ТаблДок Цикл
				Если Не СтрТабл.Свойство("Номенклатура") или Не ЗначениеЗаполнено(СтрТабл.Номенклатура) Тогда
					ДанныеНоменклатуры = Неопределено;
					Если ЗначениеЗаполнено(НашаНоменклатура) и СтрТабл.Свойство(НашаНоменклатура) Тогда
						ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),МестныйКэш);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
						Если стрТаблДок.Количество()>0 Тогда //d.ch 29.06.15
							ДанныеНоменклатуры = стрТаблДок["СтрТабл_"+Строка(СчСтр)].НоменклатураПоставщика;
						Иначе
							ДанныеНоменклатуры = фрмНоменклатуры.НайтиНоменклатуруПоставщика(СтрКонтрагента, СтрТабл, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
						КонецЕсли;	
					КонецЕсли;	
					Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
						Номенклатура = ДанныеНоменклатуры.Номенклатура;
					Иначе
						Номенклатура = Неопределено;
					КонецЕсли;
					Если ВидЗагрузки=2 И Номенклатура=Неопределено Тогда 
						ТаблДок[СчСтр].Вставить("НеЗагружать", Истина);
					Иначе                                         
						ТаблДок[СчСтр].Вставить("Номенклатура", Номенклатура);
						Если ЗначениеЗаполнено(ДанныеНоменклатуры) и ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
							ТаблДок[СчСтр].Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
						КонецЕсли;
					КонецЕсли;	
				Иначе
					Номенклатура = СтрТабл.Номенклатура;
					Если ТаблДок[СчСтр].Свойство("НеЗагружать") Тогда
						ТаблДок[СчСтр].Удалить("НеЗагружать");
					КонецЕсли;
				КонецЕсли;
				
				Если ВидЗагрузки=0 И Номенклатура = Неопределено Тогда	//сбис Никифоров Если в режиме автоматического создания, не определена Номенклатура в БД
					НоменклатураНов=МестныйКэш.ОбщиеФункции.СоздатьНоменклатуруПоДаннымПоставщика(МестныйКэш,СтрТабл,СтруктураФайла);	//создаем новую карточку номенклатуры  
					Если НоменклатураНов<>Неопределено Тогда
						ТаблДок[СчСтр].Вставить("Номенклатура", НоменклатураНов);									//вставляем ее в структуру
						
						Попытка НазваниеНоменклатуры=СтрТабл.Название 
						Исключение	//Запиываем соответствие
							НазваниеНоменклатуры = ""; 
						КонецПопытки;
						Попытка	Идентификатор=СтрТабл.Идентификатор 
						Исключение
							Идентификатор = ""; 
						КонецПопытки;
						
						ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура,Характеристика",НазваниеНоменклатуры,Идентификатор,НоменклатураНов,"");
						
						фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
						фрм.УстановитьСоответствиеНоменклатуры(СтрКонтрагента, ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
					Иначе
						ВидЗагрузки=1;
						Сообщить("Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации");
						ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
					КонецЕсли;
				КонецЕсли;
				СчСтр = СчСтр + 1;
			КонецЦикла;	
		КонецЕсли;
		
		ТекстОшибки = "";
		Вес = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение("Вес",Новый Структура("Ини", СтруктураИниФайла), МестныйКэш);
		Попытка
			Вес = Число(Вес);
		Исключение
			Вес = 0;
		КонецПопытки;
		Если СписокВесов.НайтиПоЗначению(Вес)=Неопределено Тогда
			СписокВесов.Добавить(Вес);
		КонецЕсли;
		Вложение.Вставить("Вес", Вес);
		Вложение.Вставить("ТипДокумента", ТипДокумента);	
	КонецЦикла;	
	
	Если СоздаемНовый = Неопределено Тогда
		СоздаемНовый = Истина;
	КонецЕсли;	
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		
		Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
			Если СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда   
				Продолжить;
			КонецЕсли;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивОснований = Новый Массив;
	Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",МестныйКэш);
		Если Вложение.Документы1С.Количество()>0 Тогда
			ТекущийДокумент1С = МестныйКэш.ОбщиеФункции.сбисВыбратьПодходящийДокумент(Вложение.Документы1С,Вложение.ТипДокумента);
		Иначе
			ТекущийДокумент1С = Неопределено;
			
			Если ИсходящиеДокументы1С.Количество()>0 Тогда
				Для Каждого Док1С Из ИсходящиеДокументы1С Цикл
					ТипДок1С = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Док1С.Значение, "Имя");
					Если ТипДок1С = Вложение.ТипДокумента Тогда
						Ответ = Вопрос("Внести изменения в исходный документ "+строка(Док1С.Значение)+"?", РежимДиалогаВопрос.ОКОтмена, 0);
						Если Ответ = КодВозвратаДиалога.Отмена Тогда
							Возврат;
						КонецЕсли;
						Если Ответ = КодВозвратаДиалога.ОК Тогда
							ТекущийДокумент1С = Док1С.Значение;
							СоздаемНовый = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Документ1С = фрм.СоздатьДокумент(МестныйКэш,Вложение,Вложение.СтруктураИниФайла,СоставПакета,МассивОснований, ?(не СоздаемНовый, ТекущийДокумент1С, Неопределено));
		Если Документ1С<>Неопределено Тогда
			ЗаполнитьДокумент1СВСоставеПакета(Вложение.Идентификатор, Документ1С);
			МассивОснований.Добавить(Документ1С);	
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТаблицуДокументов(СоставПакета);	
КонецПроцедуры
&НаКлиенте
Процедура ОтклонитьУтвердитьНажатие(Элемент)
	// Процедура отклоняет/утверждает текущий пакет	
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	Если Элемент.Имя = "Утвердить" Тогда
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[0];
	Иначе
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[1];
	КонецЕсли;
	Если ВыбранноеДействие.ТребуетКомментария = "Да" Тогда
		ФормаПереходы = сбисПолучитьФорму("ФормаПереходы");
		Результат = ФормаПереходы.Показать(МестныйКэш, СоставПакета, ВыбранноеДействие);
		сбисПослеВыбораПерехода(Результат, "");
	Иначе
		сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",ВыбранноеДействие, ""), "");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьНажатие(Элемент)
	// Процедура отправляет текущий пакет документов 	
	СоставПакета.Вставить("Примечание",ПакетКомментарий);
	МассивПакетовСтроки = Новый Массив;
	МассивПакетовСтроки.Добавить(СоставПакета);
	ВремяНачала = ТекущаяДата();
	МестныйКэш.Вставить("РезультатОтправки", Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ФормаОтправки,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета", Новый СписокЗначений,0,0,0,0,Новый Соответствие,0,0,Новый Массив,0,30,"ФормаПросмотрДокумента",0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0));
	
	сбисПолучитьФорму("Документ_Шаблон").АктивироватьСертификатыОтправитьДокументы(МестныйКэш, МассивПакетовСтроки, Новый Массив, Новый СписокЗначений, Новый СписокЗначений, Истина);
КонецПроцедуры
&НаКлиенте
Процедура ПослеОтправки(Кэш) Экспорт
// Если есть ошибки отправки, то выводим результат, иначе закрываем просмотр 	
	Если Кэш.РезультатОтправки.НеОтправлено>0 Тогда  // если есть ошибки при отправке, показываем окно результатов
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
		фрм.ПоказатьРезультатОтправки(Кэш);	
	Иначе    // если отправилось без ошибок, закрываем окно просмотра
		ОбновлятьГлавноеОкно = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура СохранитьНаДискНажатие(Элемент) Экспорт
	// Процедура сохраняет текущий пакет на диск в zip-архив	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог; 
		Если СоставПакета.Свойство("Вложение") Тогда
			ИмяZIP= СтрЗаменить(ЗаголовокПакета,":",".");
			ИмяZIP= СтрЗаменить(ИмяZIP,"\","_");
			ИмяZIP= СтрЗаменить(ИмяZIP,"/","_");
			ЗаписьZIP =  Новый ЗаписьZipФайла(ПутьККаталогу+"\"+ИмяZip+".zip");
			
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				ВремКаталог = КаталогВременныхФайлов();
				Если Вложение.Свойство("XMLДокумента") и Вложение.XMLДокумента <> "" Тогда
					ТД = Новый ТекстовыйДокумент;
					ТД.УстановитьТекст(Вложение.XMLДокумента);
					Если Вложение.Свойство("Файл") Тогда
						Если ТипЗнч(Вложение.Файл)=Тип("Структура") Тогда   // в SDK 1.1 файл стал не массивом, а объектом
							ИмяФайла = Вложение.Файл.Имя;
						Иначе
							ИмяФайла = Вложение.Файл[0].Имя;
						КонецЕсли;
					ИначеЕсли Вложение.Свойство("СтруктураФайла") и Вложение.СтруктураФайла.Свойство("Файл") Тогда
						ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					КонецЕсли;
					ТД.Записать(ВремКаталог+"\"+ИмяФайла, "windows-1251");
					ЗаписьZIP.Добавить(ВремКаталог+"\"+ИмяФайла);
				ИначеЕсли Вложение.Свойство("ПолноеИмяФайла") Тогда
					ЗаписьZIP.Добавить(Вложение.ПолноеИмяФайла);
				КонецЕсли;
			КонецЦикла;
			ЗаписьZIP.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураОчистка(Элемент, СтандартнаяОбработка) Экспорт
	// Процедура удаляет сопоставление номенклатуры	
	Если Вопрос("Удалить сопоставление номенклатуры?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,"","");
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("Номенклатура", Неопределено);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ЗаполнитьТаблицуДокументов(СоставПакета);
		
		Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
		//Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
		Если Строка.Количество() <> 0 Тогда
			ТабЧасть.ТекущаяСтрока = Строка[0];
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент) Экспорт
	// Процедура записывает сопоставление номенклатуры	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Номенклатура) Тогда
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура,"");
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("Номенклатура", ТабЧасть.ТекущиеДанные.Номенклатура);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ЗаполнитьТаблицуДокументов(СоставПакета);
		
		Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
		//Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
		Если Строка.Количество() <> 0 Тогда
			ТабЧасть.ТекущаяСтрока = Строка[0];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаПриИзменении(Элемент)
	// Процедура записывает сопоставление характеристики	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Характеристика) Тогда
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура,ТабЧасть.ТекущиеДанные.Характеристика);
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", ТабЧасть.ТекущиеДанные.Характеристика);
		ЗаполнитьТаблицуДокументов(СоставПакета);
		
		Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
		//Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
		Если Строка.Количество() <> 0 Тогда
			ТабЧасть.ТекущаяСтрока = Строка[0];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	// Процедура удаляет сопоставление номенклатуры	
	Если Вопрос("Удалить сопоставление характеристики?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура, "");
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ЗаполнитьТаблицуДокументов(СоставПакета);
		
		Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
		//Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
		Если Строка.Количество() <> 0 Тогда
			ТабЧасть.ТекущаяСтрока = Строка[0];
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры
//&НаКлиенте
//Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	НомерПП = Элемент.ТекущиеДанные.НомерПП;
//	Номенклатура = Элемент.ТекущиеДанные.Номенклатура;
//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
//		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура",Элемент.ТекущиеДанные.Название,Элемент.ТекущиеДанные.Идентификатор,Элемент.ТекущиеДанные.Номенклатура);
//		УстановитьСоответствиеНоменклатуры(ДанныеНоменклатуры);
//	КонецЕсли;
//	Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл[НомерПП].Вставить("Номенклатура", Номенклатура);
//	ЗаполнитьТаблицуДокументов(СоставПакета);
//КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьТаблицуДокументов(СоставПакета) Экспорт
	// Процедура заполняет таблицу вложений пакета 	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ЗначениеПоиска = ?(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено,сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете, Неопределено);
	ТаблицаДокументов.Очистить();
	СоставПакета.Вставить("НоменклатураСопоставлена",Истина);
	сч = 0;
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		НоваяСтр = ТаблицаДокументов.Добавить();
		НоваяСтр.НомерВложенияВПакете = сч;
		Если Вложение.Свойство("Название") Тогда
			НоваяСтр.Название = Вложение.Название;
		КонецЕсли;
		Если Вложение.Свойство("Идентификатор") Тогда
			НоваяСтр.Идентификатор = Вложение.Идентификатор;
		КонецЕсли;
		Если Вложение.Свойство("Документы1С") Тогда
			НоваяСтр.Документы1С = Вложение.Документы1С;
			НоваяСтр.Документы1СНазвания = "";
			Для Каждого Документ1С Из Вложение.Документы1С Цикл
				НоваяСтр.Документы1СНазвания = НоваяСтр.Документы1СНазвания + строка(Документ1С.Значение)+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("Подпись") Тогда
			Для Каждого Подпись Из Вложение.Подпись Цикл
				НоваяСтр.Подпись = НоваяСтр.Подпись+Подпись.Сертификат.ФИО+", "+Подпись.Сертификат.Должность+", "+Подпись.Сертификат.Название+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("ТекстHTML") и ЗначениеЗаполнено(Вложение.ТекстHTML) Тогда
			НоваяСтр.ТекстHTML = Вложение.ТекстHTML;
		Иначе
			НоваяСтр.ТекстHTML = "<HTML><BODY scroll=no><table cellspacing=0 cellpadding=0 WIDTH=100%><tr><td id=Открыть><ins id=Открыть>Открыть в другой программе</ins></td></tr></table></BODY></HTML>";
		КонецЕсли;
		// Проверяем возможность загрузки вложения. Из раздела Полученные загружаем только входящие, из Отправленные только исходящие вложения.
		Если Вложение.Свойство("СтруктураФайла") Тогда
			СтруктураФайла = Вложение.СтруктураФайла;
			Если СтруктураФайла.Свойство("Файл") и СтруктураФайла.Файл.Свойство("Формат") и СтруктураФайла.Файл.Свойство("ВерсияФормата") 
				и Вложение.Свойство("Направление")
			Тогда
			    ИмяИни = "";
				Файл_Формат = СтрЗаменить(СтруктураФайла.Файл.Формат,"-","");
				Файл_ВерсияФормата = СтрЗаменить(СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".", "_"), " ", "");
				Если Вложение.Направление = "Входящий" Тогда
					ИмяИни = Файл_Формат+"_"+Файл_ВерсияФормата;
					Если НЕ МестныйКэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
						ИмяИни = "Загрузка_"+Вложение.Направление+"_"+Файл_Формат+"_"+Файл_ВерсияФормата;
					КонецЕсли;
				ИначеЕсли Вложение.Направление = "Исходящий" и (МестныйКэш.Текущий.Раздел = "2" ИЛИ МестныйКэш.Текущий.Раздел ="7") Тогда 
					ИмяИни = "Загрузка_"+Вложение.Направление+"_"+Файл_Формат+"_"+Файл_ВерсияФормата;
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяИни) и МестныйКэш.Ини.Свойство(ИмяИни) Тогда
					Ини = МестныйКэш.Ини[ИмяИни];
					СоставПакета.Вложение[сч].Вставить("ИмяИни", ИмяИни);
					Если Не СоставПакета.Вложение[сч].Свойство("СтруктураИниФайла") Тогда
						СоставПакета.Вложение[сч].Вставить("СтруктураИниФайла", Новый Структура);
						Для каждого ИниДокумент из Ини.мДокумент Цикл
							СоставПакета.Вложение[сч].СтруктураИниФайла = ИниДокумент.Значение;
							Прервать;
						КонецЦикла;	
						
						РегалментВоВложении = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры("Файл.Документ.Параметр.ДокументВидОперации", СтруктураФайла); 
						Для Каждого ИниДокумент из Ини.мДокумент Цикл
							Если ИниДокумент.Значение.Свойство("ДокументВидОперации") Тогда
								Регламент_мДокумент = ИниДокумент.Значение.ДокументВидОперации.Значение;
								
								Если ИниДокумент.Значение.ДокументВидОперации.Свойство("Данные") Тогда
									РегламентВоВложении = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ИниДокумент.Значение.ДокументВидОперации.Данные, СтруктураФайла);
								КонецЕсли;
								
								Если РегламентВоВложении <> Неопределено И Найти(Регламент_мДокумент, РегламентВоВложении) > 0 Тогда
									СоставПакета.Вложение[сч].СтруктураИниФайла = ИниДокумент.Значение;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОпределитьТипЗагружаемогоДокумента","Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата,"", МестныйКэш);
						Если фрмПольз<>Ложь Тогда
							ТипДок = фрмПольз.ОпределитьТипЗагружаемогоДокумента(Новый Структура("СоставПакета,Вложение,Ини,Кэш",СоставПакета,Вложение,Ини,МестныйКэш));
							СоставПакета.Вложение[сч].СтруктураИниФайла = Ини.мДокумент[ТипДок];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НоваяСтр.Вложение.Добавить(Вложение);
		
		Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда
			НоваяСтр.СтатусКартинка = 3;
			НоваяСтр.МожемЗагрузитьВ1С = 1;
		КонецЕсли;	
		//Если Вложение.Свойство("Направление") и Вложение.Направление = "Исходящий" Тогда
		//	НоваяСтр.СтатусКартинка = 0;
		//	НоваяСтр.МожемЗагрузитьВ1С = 0;
		//КонецЕсли;
		Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
			НоваяСтр.ПутьКонтрагента = "Файл.Документ."+Вложение.Получатель;
			НоваяСтр.ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
		КонецЕсли;
		
		Если Вложение.Свойство("Направление") Тогда
			ЕстьВходящиеВложения = Истина;
			Если НЕ Вложение.Свойство("СтруктураИниФайла") Тогда
				НоваяСтр.Статус = "Загрузка документа не поддерживается.";
				НоваяСтр.СтатусКартинка = 0;
				НоваяСтр.МожемЗагрузитьВ1С = 0;
			Иначе
				КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
				ОрганизацияРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Организация_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
				
				//НГС
				Если КонтрагентРоль <> Неопределено Тогда
					Попытка
						ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
						СтрКонтрагента = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
					Исключение
						ПутьКонтрагента = "Файл.Документ."+КонтрагентРоль;
						СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
					КонецПопытки;
				КонецЕсли;
				//КНГС
				Попытка
					ПутьОрганизации = Вложение.СтруктураИниФайла.мСторона[ОрганизацияРоль].Сторона.Данные;
					СтрОрганизации = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьОрганизации, СтруктураФайла);
					Если СтрОрганизации = Неопределено Тогда
						ВызватьИсключение("");
					КонецЕсли;
				Исключение
					Если НЕ СтруктураФайла.Файл.Документ.Свойство(ОрганизацияРоль) Тогда
						СтруктураФайла.Файл.Документ.Вставить(ОрганизацияРоль, СоставПакета.НашаОрганизация);
					КонецЕсли;
					СтрОрганизации = СтруктураФайла.Файл.Документ[ОрганизацияРоль];
					ПутьОрганизации = "Файл.Документ."+ОрганизацияРоль;
				КонецПопытки;
				ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, СтрОрганизации), Ложь);
				Если ЗначениеЗаполнено(СтрКонтрагента) и МестныйКэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и МестныйКэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(МестныйКэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
					СтрКонтрагента.Вставить("Ограничения", Новый Структура("Организация",ОрганизацияВложения));
				КонецЕсли;
				
				//НоваяСтр.КонтрагентРоль = КонтрагентРоль;
				Если Вложение.Направление = "Исходящий" Тогда  // при загрузке исходящих сопоставляем номенклатуру с номенклатурой нашей организации
					НоваяСтр.ПутьКонтрагента = ПутьОрганизации;
					КонтрагентДляСопоставления = СтрОрганизации;
				Иначе
					КонтрагентДляСопоставления = СтрКонтрагента;
					НоваяСтр.ПутьКонтрагента = ПутьКонтрагента;
				КонецЕсли;
				//НоваяСтр.ПутьКонтрагента = ПутьКонтрагента;
				НоваяСтр.МожемЗагрузитьВ1С = 1;
				НадоСопоставлятьНоменклатуру = Ложь;
				Ини = МестныйКэш.Ини[ИмяИни];
				Для каждого ИниДокумент из Ини.мДокумент Цикл
					Если ИниДокумент.Значение.Свойство("мТаблДок") Тогда
						Для Каждого Элемент Из ИниДокумент.Значение.мТаблДок Цикл
							Если Элемент.Значение.Свойство("Номенклатура") Тогда
								НадоСопоставлятьНоменклатуру = Истина;
							КонецЕсли;
							Если Элемент.Значение.Свойство("Характеристика") Тогда
								ЭлементыФормы.ТабличнаяЧасть.Колонки.Характеристика.Видимость = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
				Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
					Для Каждого Элемент Из Вложение.СтруктураИниФайла.мТаблДок Цикл
						Если Элемент.Значение.Свойство("ТаблДок") и Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
							ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				НоваяСтр.ПутьТаблДок = ПутьТаблДок;
				Если НадоСопоставлятьНоменклатуру и ЗначениеЗаполнено(КонтрагентДляСопоставления) Тогда
					фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
					НашаНоменклатура = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, МестныйКэш);
					ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
					
					Попытка   //d.ch 29.06.15
						стрТаблДок = фрм.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(КонтрагентДляСопоставления, ТаблДок, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
					Исключение	
						Ошибка = ОписаниеОшибки();
						стрТаблДок = Новый Структура;
					КонецПопытки;
					
					счСтр = 0;
					Для Каждого СтрТабл Из ТаблДок Цикл
						ДанныеНоменклатуры = Неопределено;
						Если ЗначениеЗаполнено(НашаНоменклатура) и СтрТабл.Свойство(НашаНоменклатура) Тогда
							ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(Вложение.СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", Вложение.СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),МестныйКэш);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
							Если стрТаблДок.Количество()>0 Тогда //d.ch 29.06.15
								ДанныеНоменклатуры = стрТаблДок["СтрТабл_"+Строка(счСтр)].НоменклатураПоставщика;
							Иначе
								ДанныеНоменклатуры = фрм.НайтиНоменклатуруПоставщика(КонтрагентДляСопоставления, СтрТабл, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
							КонецЕсли;	
						КонецЕсли;	
						Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
							ТаблДок[счСтр].Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
							Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
								ТаблДок[счСтр].Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
							НоваяСтр.Статус = "Не вся номенклатура сопоставлена.";
							НоваяСтр.СтатусКартинка = 1;
							СоставПакета.Вставить("НоменклатураСопоставлена",Ложь);
							//Прервать;
						КонецЕсли;
						счСтр = счСтр+1;
					КонецЦикла;
				Иначе
					НоваяСтр.Статус = "Сопоставление не требуется. ";
				КонецЕсли;
				//Если НоваяСтр.МожемЗагрузитьВ1С < 0 Тогда
				//	НоваяСтр.Статус = "Не вся номенклатура сопоставлена.";
				//	НоваяСтр.СтатусКартинка = 1;
				//	СоставПакета.Вставить("НоменклатураНеСопоставлена",Истина);
				//КонецЕсли;	
				
				ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, СтрОрганизации), Ложь);
				Если ТипЗнч(ОрганизацияВложения) = Тип("Булево") Тогда
					НоваяСтр.МожемЗагрузитьВ1С = -ТаблицаДокументов.Количество();
					НоваяСтр.Статус = СокрЛП(НоваяСтр.Статус + " Не найдена организация.");
					НоваяСтр.СтатусКартинка = 1;
				КонецЕсли;	
				
				КонтрагентВложения = ?(ЗначениеЗаполнено(СтрКонтрагента), МестныйКэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, СтрКонтрагента, Вложение.СтруктураИниФайла), Ложь);
				//НГС
				Если ТипЗнч(КонтрагентВложения) = Тип("Булево")  И Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль") Тогда
				//КНГС
					НоваяСтр.МожемЗагрузитьВ1С = -ТаблицаДокументов.Количество();
					НоваяСтр.Статус = СокрЛП(НоваяСтр.Статус + " Не найден контрагент.");
					НоваяСтр.СтатусКартинка = 1;
				КонецЕсли;
				Если НоваяСтр.МожемЗагрузитьВ1С = 1 и Найти(НоваяСтр.Статус, "Не вся номенклатура сопоставлена.")=0 Тогда
					Если НадоСопоставлятьНоменклатуру Тогда
						НоваяСтр.Статус = "Номенклатура сопоставлена. ";
					КонецЕсли;
					Если Вложение.Документы1С.Количество()=0 Тогда
						НоваяСтр.Статус = НоваяСтр.Статус+"Загрузка возможна.";
						НоваяСтр.СтатусКартинка = 2;
					Иначе
						НоваяСтр.Статус = НоваяСтр.Статус+"Возможно перезаполнение.";
						Если ЗначениеЗаполнено(Вложение.Документ1СПроведен) и Вложение.Документ1СПроведен Тогда
							НоваяСтр.Статус = НоваяСтр.Статус + " Необходимо отменить проведение документа.";
						КонецЕсли;	
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьВ1С").Видимость = ТаблицаДокументов.Итог("МожемЗагрузитьВ1С") > 0;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьВ1С1").Видимость = ТаблицаДокументов.Итог("МожемЗагрузитьВ1С") > 0;
	//СоставПакета.Вставить("МожемЗагрузить",ТаблицаДокументов.Итог("МожемЗагрузитьВ1С"));
	Если ЗначениеПоиска <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("НомерВложенияВПакете", ЗначениеПоиска);
		Строка = ТаблицаДокументов.НайтиСтроки(ПараметрыОтбора);
		//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
		Если Строка.Количество() <> 0 Тогда
			сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущаяСтрока = Строка[0];
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьПрохождение(СоставПакета) Экспорт
	// Процедура заполняет вкладку Прохождение	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ЗаполнитьПрохождение","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
	Если фрм<>Ложь Тогда
		СтруктураСобытий = фрм.ЗаполнитьПрохождение(СоставПакета);
		События.Очистить();
		Для Каждого Элемент Из СтруктураСобытий Цикл
			НоваяСтр = События.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура СинонимДокументаПриИзменении(Элемент)
	// Процедура устанавливает тип документа 1С, который будет загружен	
	ТипДокумента = СписокТиповДокументов.НайтиПоЗначению(СинонимДокумента).Представление;
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	СтруктураИниФайла = Ини.мДокумент[ТипДокумента];
	СтрокаТаблДок.Вложение[0].Значение.Вставить("СтруктураИниФайла", СтруктураИниФайла);
	СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете].Вставить("СтруктураИниФайла", СтруктураИниФайла);
	Если СоставПакета.Свойство("Направление") Тогда // Исходящие пока не загружаем
		ЗаполнитьДокументДаннымиЭД(СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете]);
	КонецЕсли;
	ЗаполнитьТаблицуДокументов(СоставПакета);
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда) Экспорт
	// Процедура открывает документ на онлайне	
	сбисПолучитьФорму("ФормаГлавноеОкно").ОткрытьДокументОнлайнПоПакету(СоставПакета, МестныйКэш);
КонецПроцедуры
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	// Процедура вызывает форму создания контрагента	
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,МестныйКэш);
	фрм.ЗаполнитьИзФайла(СтрокаТаблДок, СоставПакета);	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьДокумент1СВСоставеПакета(ИдентификаторВложения, Документ1С)
	// Процедура проставляет документы 1С на вложениях текущего пакета при загрузке документов
	сч = 0;
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Идентификатор") и Вложение.Идентификатор = ИдентификаторВложения Тогда
			Если СоставПакета.Вложение[сч].Документы1С.НайтиПоЗначению(Документ1С) = Неопределено Тогда
				СоставПакета.Вложение[сч].Документы1С.Добавить(Документ1С); 
			КонецЕсли;
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;		
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьВложение(Команда)
	// Процедура добавляет внешний файл в состав пакета
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			Файл = Новый Файл(ИмяФайла);
			СоставПакета.Вложение.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",Файл.ПолноеИмя, Файл.Имя, Файл.Имя));
		КонецЦикла;	
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьВложение(Команда)
	// Процедура удаляет вложение из пакета
	Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено Тогда
		СоставПакета.Вложение.Удалить(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете);
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////

////////////////////// Обычное приложение/////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПоказатьДокумент(Кэш, Пакет) Экспорт
	// Процедура открывает форму просмотра пакета документов	
	СоставПакета = Пакет;
	ОбновлятьГлавноеОкно = Ложь;
	ТулБар = сбисЭлементФормы(ЭтаФорма,"ТулБар");
	ТулБар.Видимость = Истина;
	Если СоставПакета.Вложение.Количество()>0 Тогда
		ЗаголовокПакета="";     //Никифоров - начало
		ПакетОрганизация="";  //
		ПакетКонтрагент="";   //Никифоров - конец
		МестныйКэш = Кэш;
		
		ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
		Попытка
			Если Кэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
				ИмяСправочникаНоменклатуры = СокрЛП(Сред(Кэш.Ини.Конфигурация.Номенклатура.Значение, Найти(Кэш.Ини.Конфигурация.Номенклатура.Значение, ".")+1));
				Если нрег(ИмяСправочникаНоменклатуры)<>"номенклатура" Тогда      // если номенклатура хранится в другом справочнике
					ТипСправочникаНоменклатуры = "СправочникСсылка."+ИмяСправочникаНоменклатуры;
					ЭтаФорма.ТабличнаяЧасть.Колонки.Удалить("Номенклатура");
					ЭтаФорма.ТабличнаяЧасть.Колонки.Вставить(5,"Номенклатура", Новый ОписаниеТипов(ТипСправочникаНоменклатуры));
					ЭлементыФормы.ТабличнаяЧасть.СоздатьКолонки();
					ЭлементыФормы.ТабличнаяЧасть.Колонки.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТабличнаяЧастьНоменклатураПриИзменении"));
					ЭлементыФормы.ТабличнаяЧасть.Колонки.Номенклатура.ЭлементУправления.УстановитьДействие("Очистка", Новый Действие("ТабличнаяЧастьНоменклатураОчистка"));
				КонецЕсли;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		ЭлементыФормы.ТабличнаяЧасть.Колонки.Характеристика.Видимость=Ложь;
		
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("УстановитьВидимостьЭлементовВформеПросмотра","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
		фрм.УстановитьВидимостьЭлементовВформеПросмотра(ЭтаФорма, СоставПакета);
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции("сбисСписокДополнительныхОпераций","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
		СписокДопОпераций = фрм.сбисСписокДополнительныхОпераций(Кэш, ЭтаФорма);
		ЗаполнитьПрохождение(СоставПакета);
		
		Если СоставПакета.Свойство("НашаОрганизация") Тогда
			Если СоставПакета.НашаОрганизация.Свойство("СвЮЛ") Тогда
				ПакетОрганизация = СоставПакета.НашаОрганизация.СвЮЛ.Название;
			ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
				ПакетОрганизация = СоставПакета.НашаОрганизация.СвФЛ.Фамилия+" "+СоставПакета.НашаОрганизация.СвФЛ.Имя+?(СоставПакета.НашаОрганизация.СвФЛ.Свойство("Отчество")," "+СоставПакета.НашаОрганизация.СвФЛ.Отчество,"");
			КонецЕсли;
		КонецЕсли;
		Если СоставПакета.Свойство("Контрагент") Тогда
			Если СоставПакета.Контрагент.Свойство("СвЮЛ") Тогда
				ПакетКонтрагент = СоставПакета.Контрагент.СвЮЛ.Название;
			ИначеЕсли СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
				ПакетКонтрагент = СоставПакета.Контрагент.СвФЛ.Фамилия+" "+СоставПакета.Контрагент.СвФЛ.Имя+?(СоставПакета.Контрагент.СвФЛ.Свойство("Отчество")," "+СоставПакета.Контрагент.СвФЛ.Отчество,"");
			КонецЕсли;
		КонецЕсли;
		Если СоставПакета.Свойство("Примечание") Тогда
			ПакетКомментарий = СоставПакета.Примечание;
		Иначе
			ПакетКомментарий = "";
		КонецЕсли;
		ЗаполнитьТаблицуДокументов(СоставПакета);
		ЭтаФорма.Открыть();
	Иначе
		Сообщить("В пакете отсутствуют вложения.");
	КонецЕсли;
КонецПроцедуры
Процедура ТаблицаДокументовПриАктивизацииЯчейки(Элемент)
	// Процедура обновляет информацию по вложению (просмотр, прохождение, сопоставление номенклатуры) при переключении между вложениями в таблице
	Если Элемент.ТекущиеДанные<>Неопределено Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(Элемент.ТекущиеДанные.ТекстHTML);
		Вложение = Элемент.ТекущиеДанные.Вложение[0].Значение;
		Если Вложение.Свойство("Направление") Тогда 
			ЗаполнитьДокументДаннымиЭД(Вложение);
			Если Вложение.Свойство("СтруктураИниФайла") Тогда
				Ини = МестныйКэш.Ини[Вложение.ИмяИни];
				ИмяТекущее = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Название",Вложение.СтруктураИниФайла, МестныйКэш));
				
				сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Очистить();
				Для Каждого ТипДокумент Из Ини.мДокумент Цикл
					Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Название",ТипДокумент.Значение,МестныйКэш);
					Имя = ТипДокумент.Ключ;
					СписокТиповДокументов.Добавить(Название, Имя);
					сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Добавить(Название);
					Если Название = ИмяТекущее Тогда
						СинонимДокумента = Название; 	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
			сбиЗаполнитьТаблицуНоменклатуры(Вложение);
		Иначе
			ТабличнаяЧасть.Очистить();
		КонецЕсли;
		Если Найти(Элемент.ТекущиеДанные.Статус, "Не найден контрагент") Тогда
			сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Истина;
		Иначе
			сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ЗаполнитьДокументДаннымиЭД(Вложение) Экспорт
// Заполняется вкладка Загрузка (тип документа, табличная часть) по данным из файла
	СтруктураФайла = Вложение.СтруктураФайла;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если Не Вложение.Свойство("СтруктураИниФайла") Тогда
		сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Ложь;
		//Предупреждение("Отсутствует настройка для загрузки файла "+СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".", "_"));
		Возврат Ложь;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Истина;
	КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
	
	//НГС
	Если КонтрагентРоль <> Неопределено Тогда
		Попытка
			ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
			СтрКонтрагента = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Исключение
			СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
		КонецПопытки;
		Если СтрКонтрагента = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ИНН = ?(СтрКонтрагента.Свойство("СвЮЛ"), СтрКонтрагента.СвЮЛ.ИНН, СтрКонтрагента.СвФЛ.ИНН);
	КонецЕсли;
	//КНГС
	
	
	ТабличнаяЧасть.Очистить();
	Если Найти(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Статус, "Сопоставление не требуется")=0 Тогда
		
		Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
			Для Каждого Элемент Из Вложение.СтруктураИниФайла.мТаблДок Цикл
				Если Элемент.Значение.Свойство("ТаблДок") и Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
					ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		сч = 0;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		НашаНоменклатура = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, МестныйКэш);
		Если ЗначениеЗаполнено(ПутьТаблДок) Тогда
			ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		Иначе
			ТаблДок = СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
		КонецЕсли;
		
		Для Каждого СтрТабл Из ТаблДок Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.НомерПП = сч;
			СтрТабл.Свойство("Название", НоваяСтрока.Название);
			Если СтрТабл.Свойство("Характеристика") Тогда
				Если ТипЗнч(СтрТабл.Характеристика) = Тип("Структура") Тогда
					СтрТабл.Характеристика.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
				ИначеЕсли ТипЗнч(СтрТабл.Характеристика) = Тип("Массив") Тогда
					Для Каждого Элемент Из СтрТабл.Характеристика Цикл
						Элемент.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
						Прервать;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			СтрТабл.Свойство("Код", НоваяСтрока.Код);
			СтрТабл.Свойство("ЕдИзм", НоваяСтрока.ЕдИзм);
			СтрТабл.Свойство("ОКЕИ", НоваяСтрока.ОКЕИ);
			СтрТабл.Свойство("Кол_во", НоваяСтрока.Количество);
			СтрТабл.Свойство("Цена", НоваяСтрока.Цена);
			СтрТабл.Свойство("СуммаБезНал", НоваяСтрока.СуммаБезНал);
			Если СтрТабл.Свойство("НДС") Тогда
				СтрТабл.НДС.Свойство("Сумма", НоваяСтрока.СуммаНДС);
				СтрТабл.НДС.Свойство("Ставка", НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			СтрТабл.Свойство("Сумма", НоваяСтрока.Сумма);
			СтрТабл.Свойство("Идентификатор", НоваяСтрока.Идентификатор);
			СтрТабл.Свойство("Номенклатура", НоваяСтрока.Номенклатура);
			СтрТабл.Свойство("ХарактеристикаНоменклатуры", НоваяСтрока.Характеристика);
			сч = сч+1;
		КонецЦикла;	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбиЗаполнитьТаблицуНоменклатуры(Вложение) Экспорт
	// Заполняется таблица сопоставления номенклатуры по данным из файла
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисЗаполнитьДанныеНоменклатурыНаСервере","РаботаСДокументами1С","", МестныйКэш);
	
	ТабличнаяЧасть.Очистить();
	сч = 0;
	ТаблДок = Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
	Для Каждого СтрТабл Из ТаблДок Цикл
		ДанныеНоменклатуры = фрм.сбисЗаполнитьДанныеНоменклатурыНаСервере(СтрТабл.Идентификатор);
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.НомерПП = сч;
			
			НоваяСтрока.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
				НоваяСтрока.Характеристика = ДанныеНоменклатуры.Характеристика;
			КонецЕсли;
			НоваяСтрока.Идентификатор = СтрТабл[Вложение.НоменклатураКодКонтрагента];
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;	
КонецФункции

Процедура ВыборЗакладки(Элемент)
	// Процедура осуществляет переход по вкладкам формы	
	ЭлементыФормы.ГлавнаяПанель.ТекущаяСтраница = ЭлементыФормы.ГлавнаяПанель.Страницы[Элемент.Имя];
	Для каждого Закладка из МассивЗакладок Цикл
		ЭлементыФормы["Закладка" + Закладка].ЦветФона = ?(Закладка = Элемент.Имя, Новый Цвет(0,85,187), Новый Цвет(255,255,255));
	КонецЦикла;	
	
КонецПроцедуры

Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// При двойном щелчке по документу 1С открывается его карточка	
	Если Колонка.Имя = "Документы1СНазвания" и Элемент.ТекущиеДанные.Документы1С.Количество()>0 Тогда
		Для Каждого Документ1С из Элемент.ТекущиеДанные.Документы1С Цикл
			ОткрытьЗначение(Документ1С.Значение);
		КонецЦикла;
	ИначеЕсли Колонка.Имя = "Удалить"  Тогда
		УдалитьВложение("");
	КонецЕсли;	
КонецПроцедуры

Процедура ТаблицаДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Оформление таблицы вложений пакета	
	ОформлениеСтроки.Ячейки.Удалить.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Удалить.ИндексКартинки = 0;
	Если НЕ СоставПакета.Свойство("Направление") Тогда		
		Возврат;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = ДанныеСтроки.СтатусКартинка;	
	
	Если Найти(ДанныеСтроки.Статус, "Не вся номенклатура сопоставлена")>0 или Найти(ДанныеСтроки.Статус, "Не найдена организация")>0 или Найти(ДанныеСтроки.Статус, "Не найден контрагент")>0 Тогда
		ОформлениеСтроки.Ячейки.Статус.ЦветТекста = Новый Цвет(187,12,12);
	Иначе
		ОформлениеСтроки.Ячейки.Статус.ЦветТекста = Новый Цвет(0,0,0);
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Переходим на закладку просмотр, чтобы при открытии в следующий раз форма открывалась на ней	
	ВыборЗакладки(Новый Структура("Имя", "Документы"));
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Закрытие формы просмотра при закрытии обработки	
	Если ИмяСобытия = "ЗакрытьСБИС" Тогда
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличнаяЧастьХарактеристикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Устанавливается владелец характеристики 	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть").ТекущиеДанные.Номенклатура) Тогда
		Если МестныйКэш.Ини.Конфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
			ИмяСправочникаХарактеристикиНоменклатуры = СокрЛП(Сред(МестныйКэш.Ини.Конфигурация.ХарактеристикиНоменклатуры.Значение, Найти(МестныйКэш.Ини.Конфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
		Иначе
			ИмяСправочникаХарактеристикиНоменклатуры="ХарактеристикиНоменклатуры";
		КонецЕсли;
		Форма=Справочники[ИмяСправочникаХарактеристикиНоменклатуры].ПолучитьФормуВыбора(,Элемент);
		Форма.ПараметрВыборПоВладельцу = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть").ТекущиеДанные.Номенклатура;
		Форма.Открыть();	
	Иначе
		Предупреждение("Заполните номенклатуру");
	КонецЕсли;
КонецПроцедуры

Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Оформления таблицы Прохождения	
	Если Лев(ДанныеСтроки.Название,9) = "Отклонено" Тогда
		ОформлениеСтроки.Ячейки.Название.ЦветТекста = Новый Цвет(255, 0, 0);	
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьРасхождениеНажатие(Элемент) Экспорт
	// Процедура формирует файл расхождения по полученному документу от контрагента и фактически поступившему/заказанному товару
	// Расхождение строится по вложению с минимальным весом
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	СписокВесов = Новый СписокЗначений;
	ЕстьДокументы1С = Ложь;
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество()>0 Тогда
			ЕстьДокументы1С = Истина;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Вложение.Свойство("СтруктураФайла") и Вложение.Свойство("СтруктураИниФайла") Тогда
				СтруктураФайлаКонтрагента = Вложение.СтруктураФайла;
				
				Документ1С = СтрокаТаблДок.Документы1С[0].Значение;
				ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
				Если Вложение.СтруктураИниФайла.Свойство("ФайлНастроекРасхождения") Тогда
					ИмяДокумента = СтрЗаменить(Вложение.СтруктураИниФайла.ФайлНастроекРасхождения.Значение,"'","");
				КонецЕсли;
				Если НЕ МестныйКэш.ини.Свойство(ИмяДокумента) Тогда
					Продолжить;
				КонецЕсли;
				ДокументОтклонения = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", МестныйКэш.ини[ИмяДокумента], МестныйКэш);
				Если ЗначениеЗаполнено(ДокументОтклонения) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьДокументы1С Тогда
		Сообщить("Для формирования расхождения необходимо сначала загрузить документы в 1С и внести в них необходимые изменения по фактически принятым/заказанным позициям.");
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ДокументОтклонения) Тогда
		Сообщить("Нет подходящих документов для формирования расхождения.");
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	МестныйКэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С);
	Контекст.Вставить("ДокументДанные", МестныйКэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(МестныйКэш.ини[ИмяДокумента], Документ1С, МестныйКэш.КэшЗначенийИни));
	
	Если Не Контекст.ДокументДанные.Свойство("мФайл") Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;		
	КонецЕсли;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", МестныйКэш);
	Если Не фрм.ПрочитатьДокумент(МестныйКэш,Контекст) Тогда
		Возврат;
	КонецЕсли;
	Если Контекст.СоставПакета.Вложение.Количество() = 0 Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;	
	КонецЕсли;
	СтруктураФайлаНаша = Контекст.СоставПакета.Вложение[0].СтруктураДокумента;
	
	// Формируем расхождение
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СформироватьРасхождение","Файл_"+ДокументОтклонения,"Файл_Шаблон", МестныйКэш);
	ВложениеРасхождение = фрм.СформироватьРасхождение(СтруктураФайлаКонтрагента, СтруктураФайлаНаша, МестныйКэш);
	СоставПакета.Вложение.Добавить(ВложениеРасхождение);
	ЗаполнитьТаблицуДокументов(СоставПакета);
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьИдентификаторПриИзменении(Элемент)
	// Процедура записывает сопоставление номенклатуры	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Номенклатура) Тогда
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Номенклатура,ТабЧасть.ТекущиеДанные.Характеристика);
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить(Вложение.НоменклатураКодКонтрагента, ТабЧасть.ТекущиеДанные.Идентификатор);
		НоменклатураСопоставлена = Истина;
		Для Каждого СтрТабл Из ТаблДок Цикл
			Если Не СтрТабл.Свойство(Вложение.НоменклатураКодКонтрагента) или Не ЗначениеЗаполнено(СтрТабл[Вложение.НоменклатураКодКонтрагента])  Тогда
				НоменклатураСопоставлена = Ложь;	
			КонецЕсли;
		КонецЦикла;
		Если НоменклатураСопоставлена Тогда
			СоставПакета.Удалить("Ошибка");
			Вложение.XMLДокумента = МестныйКэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктуры(Вложение.СтруктураФайла,МестныйКэш.XSLT);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура сбисТабличнаяЧастьПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
	Если ЗначениеЗаполнено(ДанныеСтроки.Идентификатор) Тогда
		ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 1;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда      ///плотников +++
		Если ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ДанныеСтроки.Код)) Тогда
			ДанныеСтроки.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ДанныеСтроки.Код);
			// Процедура записывает сопоставление номенклатуры	
			ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
			Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
				ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ДанныеСтроки.Название,ДанныеСтроки.Идентификатор,ДанныеСтроки.Код,ДанныеСтроки.Номенклатура,"");
				ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
				фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
				фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
				//НомерПП = ДанныеСтроки.НомерПП;
				//ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
				//ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
				//ТаблДок[НомерПП].Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
				//ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
				//ЗаполнитьТаблицуДокументов(СоставПакета);
				
				//Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
				////Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
				//Если Строка.Количество() <> 0 Тогда
				//	ТабЧасть.ТекущаяСтрока = Строка[0];
				//КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Справочники.Номенклатура.НайтиПоНаименованию(ДанныеСтроки.Название)) Тогда
			ДанныеСтроки.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(ДанныеСтроки.Название);
			// Процедура записывает сопоставление номенклатуры	
			ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
			Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
				ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ДанныеСтроки.Название,ДанныеСтроки.Идентификатор,ДанныеСтроки.Код,ДанныеСтроки.Номенклатура,"");
				ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
				фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
				фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, ГлавноеОкно.КаталогНастроек, МестныйКэш.Ини);
				//НомерПП = ДанныеСтроки.НомерПП;
				//ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
				//ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
				//ТаблДок[НомерПП].Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
				//ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
				//ЗаполнитьТаблицуДокументов(СоставПакета);
				
				//Строка = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерПП", НомерПП));
				////Берем первую строку из массива (Т.к. поиск по НомерПП, то строка единственная в таблице)
				//Если Строка.Количество() <> 0 Тогда
				//	ТабЧасть.ТекущаяСтрока = Строка[0];
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;   ///плотников +++
КонецПроцедуры
&НаКлиенте
Процедура ДокументооборотПерейти(Команда)
	// Вставить содержимое обработчика.
	ФормаПереходы = сбисПолучитьФорму("ФормаПереходы");
	Результат = ФормаПереходы.Показать(МестныйКэш, СоставПакета);
	сбисПослеВыбораПерехода(Результат, "");
КонецПроцедуры
&НаКлиенте
Функция сбисПослеВыбораПерехода(Результат, Параметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Результат.Действие.ТребуетПодписания = "Да" Тогда
			СписокИНН = Новый СписокЗначений;
			ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвФЛ"),СоставПакета.НашаОрганизация.СвФЛ.ИНН,СоставПакета.НашаОрганизация.СвЮЛ.ИНН);
			СписокИНН.Добавить(ИННОрг);
	
			СписокСертификатов = МестныйКэш.Интеграция.ПолучитьСертификатыДляАктивации(МестныйКэш, СписокИНН);
			Если СписокСертификатов.Количество()>0 Тогда
				Для Каждого Элемент Из СписокСертификатов Цикл
					Сертификат = Элемент.Значение;
					ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
					ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+МестныйКэш.ОбщиеФункции.СокращенноеФИО(МестныйКэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
					КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
					Если Не ЗначениеЗаполнено(КодАктивации) Тогда
						Сообщить("Не активирован сертификат для подписания документов.");
						Возврат Ложь;	
					КонецЕсли;
					Сертификат.Вставить("КодАктивации", КодАктивации);
				КонецЦикла;
				Если МестныйКэш.Интеграция.АктивироватьСерверныеСертификаты(МестныйКэш, СписокСертификатов) = Ложь Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДействиеВыполнено = МестныйКэш.Интеграция.сбисВыполнитьДействие(МестныйКэш, СоставПакета, СоставПакета.Этап[0], Результат.Действие, Результат.Комментарий, "");
		Если ДействиеВыполнено = Истина Тогда
			ОбновлятьГлавноеОкно = Истина;
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Процедура ДопОперации(Команда)
	// Вставить содержимое обработчика.
	ФормаДопОперации = сбисПолучитьФорму("ФормаДопОперации");
	ВыбранныйЭлемент = ФормаДопОперации.Показать(МестныйКэш, СписокДопОпераций);
	Если ВыбранныйЭлемент<>Неопределено Тогда
		ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
		фрм = сбисПолучитьФорму("ФормаГлавноеОкно").сбисНайтиФормуФункции(ВыбранныйЭлемент.Значение,"Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
		Результат=вычислить("фрм."+ВыбранныйЭлемент.Значение+"(МестныйКэш,ЭтаФорма)");
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	// Обновляет контент на главном окне.
	ФормаГлавногоОкна = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ФормаГлавногоОкна.Открыта() и ОбновлятьГлавноеОкно = Истина Тогда
		ФормаГлавногоОкна.ОбновитьКонтент();
	КонецЕсли;
	
	фрм = ФормаГлавногоОкна.сбисНайтиФормуФункции("сбисПослеЗакрытияФормыПросмотра","РаботаСДокументами1С","", МестныйКэш);
	Если фрм<>Ложь Тогда
		фрм.сбисПослеЗакрытияФормыПросмотра(МестныйКэш); 
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.srcElement.id = "Открыть" Тогда
		Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Свойство("ПолноеИмяФайла") Тогда // файл добавлен в пакет для отправки (вручную или во внешних функциях) 
			ПолноеИмяФайла = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.ПолноеИмяФайла;
		Иначе
			ПолноеИмяФайла = КаталогВременныхФайлов()+ сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Файл.Имя;   // файл с онлайна
			МестныйКэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(МестныйКэш,сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Файл.Ссылка,ПолноеИмяФайла);
		КонецЕсли;
		ЗапуститьПриложение(ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры


МассивЗакладок = Новый Массив;
МассивЗакладок.Добавить("Документы");
МассивЗакладок.Добавить("Загрузка");
МассивЗакладок.Добавить("Прохождение");