// функции для совместимости кода
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
//------------------------------------------------------
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП) Экспорт
// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов) Экспорт
// Выгружает сформированные пакеты документов в каталог
	КаталогОтправкиИмя = Кэш.Парам.КаталогОбмена+"\Отправляемые\";
	КаталогОтправки = Новый Файл(КаталогОтправкиИмя);
	Если Не КаталогОтправки.Существует() Тогда
		СоздатьКаталог(КаталогОтправкиИмя);
	КонецЕсли;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно);
	ВсегоОтправлено = 0;
	ВсегоОшибок = 0;
	КоличествоПакетов = МассивПакетов.Количество();
	ДанныеПоСтатусам = Новый Массив;
		
	Для Каждого СоставПакета Из МассивПакетов Цикл
	    Попытка
			СтруктураКонверта = Новый Структура("СписокДокумент", Новый Структура("Документ", Новый Структура));
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("ПользовательскийИдентификатор", СоставПакета.ПользовательскийИдентификатор);
		    КонецЕсли;
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
			Иначе
				ИдПакета = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			СоставПакета.Вставить("Идентификатор", ИдПакета);
			СтруктураКонверта.СписокДокумент.Документ.Вставить("Идентификатор", СоставПакета.Идентификатор);
			СтруктураКонверта.СписокДокумент.Документ.Вставить("Тип", СоставПакета.Тип);		

			Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Примечание", СоставПакета.Примечание);	
			КонецЕсли;
			Если СоставПакета.Свойство("Регламент") и (СоставПакета.Регламент.Свойство("Идентификатор") или СоставПакета.Регламент.Свойство("Название")) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Регламент", СоставПакета.Регламент);
			КонецЕсли;
			Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Ответственный", СоставПакета.Ответственный);
			КонецЕсли;
			Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Подразделение", СоставПакета.Подразделение);
			КонецЕсли;
			
			Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
				Основания = Новый Массив;
				Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
					Осн = Новый Структура;
					Док = Новый Структура;
					Для Каждого Элемент Из ДокОсн Цикл
						Док.Вставить( Элемент.Ключ, Элемент.Значение );	
					КонецЦикла;
					Осн.Вставить( "Документ", Док );
					Основания.Добавить(Осн);
				КонецЦикла;
				СтруктураКонверта.СписокДокумент.Документ.Вставить("СписокДокументОснование", Новый Структура("ДокументОснование", Основания));
			КонецЕсли;

			СтруктураКонверта.СписокДокумент.Документ.Вставить("НашаОрганизация", Новый Структура);
			Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
				СтруктураКонверта.СписокДокумент.Документ.НашаОрганизация.Вставить("СвФЛ", СоставПакета.НашаОрганизация.СвФЛ);
			Иначе
				СтруктураКонверта.СписокДокумент.Документ.НашаОрганизация.Вставить("СвЮЛ", СоставПакета.НашаОрганизация.СвЮЛ);
			КонецЕсли;
			СтруктураКонверта.СписокДокумент.Документ.Вставить("Контрагент", Новый Структура);
			//Если СоставПакета.Контрагент.Свойство("Название") Тогда
			//	СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Название", СоставПакета.Контрагент.Название);	
			//КонецЕсли;
			Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
				Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
					СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Телефон", СоставПакета.Контрагент.Контакт.Телефон);
				КонецЕсли;
				Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
					СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
				КонецЕсли;
			КонецЕсли;
			Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
				СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("СвФЛ", СоставПакета.Контрагент.СвФЛ);
			Иначе
				СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("СвЮЛ", СоставПакета.Контрагент.СвЮЛ);
			КонецЕсли;
			Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Количество()>0  Тогда
                 СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Подразделение", СоставПакета.Контрагент.Подразделение);
			КонецЕсли;
			Вложения = Новый Массив;
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
					КопироватьФайл(Вложение.ПолноеИмяФайла, КаталогОтправкиИмя+Вложение.ИмяФайла);
					ИмяФайла = Вложение.ИмяФайла;
				Иначе  // сформирован xml
					ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					ИсхФайл = Новый ТекстовыйДокумент;
					ИсхФайл.УстановитьТекст(Вложение.XMLДокумента);
					ПолноеИмяФайла = КаталогОтправкиИмя+ИмяФайла;
					ИсхФайл.Записать(ПолноеИмяФайла,"windows-1251");
				КонецЕсли;
				ИдВложения = строка(Новый УникальныйИдентификатор());
				Вложение.Вставить("Идентификатор", ИдВложения);
				СтруктураВложения = Новый Структура("Идентификатор, Файл",ИдВложения, Новый Структура("СсылкаНаФайл,Имя",ИмяФайла,ИмяФайла));
				Вложения.Добавить(СтруктураВложения);
			КонецЦикла;
			СтруктураКонверта.СписокДокумент.Документ.Вставить("СписокВложение", Новый Структура("Вложение", Вложения));		
			ШаблонXML = Кэш.ОбщиеФункции.ПолучитьXMLДокумента1С(СтруктураКонверта);
			КонвертФайл = Новый ТекстовыйДокумент;
			КонвертФайл.УстановитьТекст(ШаблонXML);
			ИмяФайла = "KONVERT"+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".native.xml";
			ПолноеИмяФайла = КаталогОтправкиИмя+ИмяФайла;
			КонвертФайл.Записать(ПолноеИмяФайла,"windows-1251");		
			СоставПакета.Вставить("Отправлен", Истина);
			ВсегоОтправлено = ВсегоОтправлено + 1;
			Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
		Исключение
			Ошибка = ОписаниеОшибки();
			ВсегоОшибок = ВсегоОшибок + 1;
			Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
			ТекстОшибки = Ошибка;
			ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
			Если ЭлементСписка=Неопределено Тогда
				Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
			Иначе
				ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
			КонецЕсли;

			Продолжить;	
		КонецПопытки;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Вложение.Свойство("Документы1С") Тогда
				Для Каждого Документ1С Из Вложение.Документы1С Цикл
					СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Выгружен");
					ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;

	КонецЦикла;
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	// Получает статусы документов сбис
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена+"\Состояние\";
	КаталогСостояний = Новый Файл(КаталогСостоянийИмя);
	Если Не КаталогСостояний.Существует() Тогда
		КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена+"\СостояниеОтправки\"
	КонецЕсли;
    ФайлыСтатусов = НайтиФайлы(КаталогСостоянийИмя, "*.native.xml", Истина);
	Всего = ФайлыСтатусов.Количество();
	сч = 0;
	МассивДокументов = Новый Массив;
	МассивОбработанныхФайлов = Новый Массив;
	ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
	Для Каждого Файл Из ФайлыСтатусов Цикл
		сч = сч+1;
		сбисПоказатьСостояние("Обновление статусов отправленных документов ", ГлавноеОкно,Мин(100,Окр(сч*100/Всего)), "(прервать -  Ctrl+Break)");
		Текст = Новый ЧтениеТекста(Файл.ПолноеИмя);
		СтрокаXML = Текст.Прочитать();
		СтруктураФайла = Кэш.ОбщиеФункции.ЗаполнитьСтруктуруФайла(СтрокаXML);
	
		оДокумент = СтруктураФайла.Документ;
		// Проверяем, к этой ли базе 1С относится файл
		Если Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, оДокумент.НашаОрганизация)<>Ложь Тогда
			МассивДокументов.Добавить(оДокумент);
			МассивОбработанныхФайлов.Добавить(Файл.ПолноеИмя);
			Если МассивДокументов.Количество()=100 Тогда
				фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
				МассивДокументов.Очистить();
				Для Каждого ОбработанныйФайл Из МассивОбработанныхФайлов Цикл
					Попытка
						УдалитьФайлы(ОбработанныйФайл);
					Исключение
					КонецПопытки;
				КонецЦикла;
				МассивОбработанныхФайлов.Очистить();
			КонецЕсли;
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	Для Каждого ОбработанныйФайл Из МассивОбработанныхФайлов Цикл
		Попытка
			УдалитьФайлы(ОбработанныйФайл);
		Исключение
		КонецПопытки;
	КонецЦикла;
	МассивОбработанныхФайлов.Очистить();
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
// Прячем состояние
    ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, ТекстXML) экспорт
// Используется при просмотре документов из реестров продаж (1С)
	Возврат ТекстXML;
КонецФункции
&НаКлиенте
функция ПрочитатьДокумент(Кэш,ИдДок) экспорт
// При работе через каталог ничего не делает	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
// При работе через каталог ничего не делает
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
// Если есть файлы статусов в каталоге СостояниеОтправки, то выводим красное предупреждение	
    ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ФайлыСтатусов = НайтиФайлы(Кэш.Парам.КаталогОбмена+"\СостояниеОтправки\", "*.native.xml", Истина);
	Если ФайлыСтатусов.Количество() > 0 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Возврат 0;
КонецФункции
&НаКлиенте
Функция Включить(Кэш) Экспорт
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	Возврат Истина;
КонецФункции
