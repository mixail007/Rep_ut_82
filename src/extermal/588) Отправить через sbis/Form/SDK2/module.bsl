&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Функция сбисСообщитьОбОшибке(ИнформацияОПакете = "") Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Ошибка = ПолучитьСообщениеОбОшибке(Ложь);
		Сообщить(ИнформацияОПакете + Ошибка.ТекстОшибки);
	Иначе
		Ошибка = ПолучитьСообщениеОбОшибке(Ложь);
		фрм =ЭтотОбъект.ПолучитьФорму("ФормаОшибка");
		фрм.ТекстОшибки = Ошибка.ТекстОшибки;
		фрм.ИнформацияОбОшибке = ИнформацияОПакете + Ошибка.ИнформацияОбОшибке;
		фрм.ОткрытьМодально(60);
	КонецЕсли;
	Возврат Ошибка.ТекстОшибки;
КонецФункции

//------------------------------------------------------

//////////////////// Функции SDK //////////////////////
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	МестныйКэш = Кэш;
	Попытка
		КаталогЛогов = Новый Файл(КаталогЛоговИмя);
		Если Не КаталогЛогов.Существует() Тогда
			СоздатьКаталог(КаталогЛоговИмя);
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	SimpleObject =  Кэш.Docflow.CreateSimpleObject();
	Если Уровень<>0 Тогда
		SimpleObject.Write("Папка", КаталогЛоговИмя);
	КонецЕсли;
	SimpleObject.Write("Уровень", Уровень);
	SbisLog = Новый COMОбъект("Sbis.Log");
	Результат = SbisLog.WriteLogInfo(SimpleObject);
	Если Результат = 0 Тогда
		Сообщить(SbisLog.ReadLastError());	
		Сообщить("Для изменения каталога снимите галку ""Вести протоколирование"", перезапустите 1C Предприятие, включите протоколирование и укажите новый каталог.");	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	// Закрывает сессию	
	Возврат Кэш.Docflow.TerminateSession();
КонецФункции	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,ТекстОшибки) Экспорт 	
	// Авторизуется на online.sbis.ru по логину/паролю	
	МестныйКэш = Кэш;
	СформироватьНастройкиПодключения(Кэш);
	Результат=Кэш.Docflow.Authenticate( Логин, Пароль);
	Если Результат=0 Тогда
		ТекстОшибки = ПолучитьСообщениеОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат ПолучитьИдентификаторСессии(Кэш);
КонецФункции	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,ТекстОшибки) Экспорт
	// Авторизуется на online.sbis.ru по сертификату		
	МестныйКэш = Кэш;
	СформироватьНастройкиПодключения(Кэш);
	Certificate = МестныйКэш.Docflow.CreateSimpleObject();
	Certificate.Write("Отпечаток", Сертификат);
	Результат=Кэш.Docflow.AuthenticateByCertificate(Certificate);
	Если Результат=0 Тогда
		ТекстОшибки = ПолучитьСообщениеОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат ПолучитьИдентификаторСессии(Кэш);
КонецФункции
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "") Экспорт
	// Устанавливает в SDK настройки подключения		
	ConnectionInfo = new COMObject("SBIS.SimpleObject");
	ConnectionInfo.Write("АдресСервера", Кэш.СБИС.АдресСервера);
	Если Кэш.Парам.ТипПрокси = "Вручную" Тогда
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
		ConnectionInfo.Write("АдресПроксиСервера", Кэш.Парам.ПроксиСервер+":"+МестныйКэш.Парам.ПроксиПорт);
		ConnectionInfo.Write("ЛогинПроксиСервера", Кэш.Парам.ПроксиЛогин);
		ConnectionInfo.Write("ПарольПроксиСервера", Кэш.Парам.ПроксиПароль);
		
	ИначеЕсли Кэш.Парам.ТипПрокси = "Автоматически" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Да");
		
	ИначеЕсли Кэш.Парам.ТипПрокси = "НеИспользовать" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ConnectionInfo.Write("ИдентификаторСессии", ИдентификаторСессии);	
	КонецЕсли;
	
	Кэш.Docflow.WriteConnectionInfo(ConnectionInfo);
КонецФункции
&НаКлиенте
Функция ПолучитьИдентификаторСессии(Кэш) Экспорт
	// получает идентификатор текущей сессии	
	ConnectionInfo = Кэш.Docflow.ReadConnectionInfo();
	ИдентификаторСессии = ConnectionInfo.Read("ИдентификаторСессии");
	Возврат ИдентификаторСессии;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
	// Получает список сертификатов для авторизации	
	МестныйКэш = Кэш;
	СформироватьНастройкиПодключения(Кэш);
	СписокСертификатов = Новый СписокЗначений();
	
	Object = Кэш.docflow.ReadCertificatesForAuth(МестныйКэш.Docflow.CreateSimpleObject());
	Если Object=Неопределено Тогда
		ТекстОшибки = ПолучитьСообщениеОбОшибке();
		Возврат СписокСертификатов;
	КонецЕсли;
	ObjectList = Object.ReadObjectList("Сертификат");
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.count;
		Для сч=0 По Размер-1 Цикл
			Сертификат = СериализоватьObjectВСтруктуру(ObjectList.at(сч));
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
				Если Сертификат.Свойство("ДействителенПо") Тогда
					Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
						ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
					Иначе
						ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
					КонецЕсли;
				КонецЕсли;
				СписокСертификатов.Добавить(Сертификат,Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")","")
				+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","")
				+?(Сертификат.Свойство("ДействителенПо"),(", действителен до "+Формат(ДействителенПо,"ДЛФ=DD")),""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	// Получает список доступных сертификатов	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Если filter=Неопределено Тогда
		filter = МестныйКэш.Docflow.CreateSimpleObject();
	КонецЕсли;
	Object = Кэш.docflow.ReadCertificates(filter);
	Если Object=Неопределено Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
	ObjectList = Object.ReadObjectList("Сертификат");
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.count();
		Для сч=0 По Размер-1 Цикл
			Сертификат = СериализоватьObjectВСтруктуру(ObjectList.at(сч));
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	СписокСертификатов = ПолучитьСписокСертификатов(Кэш);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
						certificate = Кэш.Docflow.CreateSimpleObject();
						certificate.Write("Отпечаток", Сертификат.Отпечаток);
						Object = Кэш.docflow.AcquireCertificateActivation(certificate);
					КонецЕсли;
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		certificate = Кэш.Docflow.CreateSimpleObject();
		certificate.Write("Отпечаток", Сертификат.Отпечаток);
		certificate.Write("КодАктивации", Сертификат.КодАктивации);
		Object = Кэш.docflow.ActivateCertificate(certificate);
	КонецЦикла;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	// Получает информацию о текущем пользователе	
	Результат = Кэш.Docflow.ReadCurrentUserInfo();	
	Если Результат = Неопределено Тогда //почему неопределено
		Возврат "";
	КонецЕсли;
	Результат = СериализоватьObjectВСтруктуру(Результат);
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Результат.Пользователь.Свойство("Фамилия", Фамилия);
	Результат.Пользователь.Свойство("Имя", Имя);
	Результат.Пользователь.Свойство("Отчество", Отчество);
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции
&НаКлиенте
Функция ПолучитьСообщениеОбОшибке(Кратко = Истина) Экспорт
	// Получает последнюю ошибку SDK	
	Ошибка = Новый Структура();
	Ошибка.Вставить("ПолныйТекст",МестныйКэш.Docflow.ReadLastError());
	//Ошибка.Вставить("ПолныйТекст",МестныйКэш.Docflow.ReadLastErrorEx());
	НачалоТекстаОшибки=Найти(Ошибка.ПолныйТекст,"""")+1;
	Если НачалоТекстаОшибки>1 Тогда
		Ошибка.Вставить("ТекстОшибки", Сред(Ошибка.ПолныйТекст,НачалоТекстаОшибки,СтрДлина(Ошибка.ПолныйТекст)-НачалоТекстаОшибки));
		Ошибка.Вставить("ИнформацияОбОшибке", Лев(Ошибка.ПолныйТекст,НачалоТекстаОшибки-4));
	Иначе
		Ошибка.Вставить("ТекстОшибки", Ошибка.ПолныйТекст);
		Ошибка.Вставить("ИнформацияОбОшибке", "");
	КонецЕсли;
	Если(Кратко)Тогда
		Возврат Ошибка.ТекстОшибки;
	КонецЕсли;
	Возврат Ошибка;
КонецФункции	
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Результат=Кэш.Docflow.CheckSession();
	Возврат Результат;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	// Получает список документов реализации с online.sbis.ru 	
	СтруктураДляОбновленияФормы = Новый Структура;
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Результат = Кэш.docflow.ReadDocuments( filter ); 
	
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	ГлавноеОкно.ФильтрЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.ReadObject("Навигация").Read("Страница"))+1;
	Выборка = Результат.ReadObjectList("Документ");
	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.count;
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("Контрагент", оДокумент.Контрагент.Название);
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("НашаОрганизация", оДокумент.НашаОрганизация.Название);
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		МассивДокументов.Добавить(НоваяСтр)
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	СтруктураДляОбновленияФормы = Новый Структура;
	Результат = Кэш.docflow.ReadDocumentsByEvents( filter ); 
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	ГлавноеОкно.ФильтрЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.ReadObject("Навигация").Read("Страница"))+1;
	Выборка = Результат.ReadObjectList("Реестр");
	МассивДокументов = Новый Массив;	
	Размер = Выборка.count;
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		//НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремя);
		оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	// Получает список документов определенного типа с online.sbis.ru	
	СтруктураДляОбновленияФормы = Новый Структура();
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Результат = Кэш.docflow.ReadDocuments( filter ); 
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Выборка = Результат.ReadObjectList("Документ");
	Размер = Выборка.count;
	Навигация = СериализоватьObjectВСтруктуру(Результат.ReadObject("Навигация")); 	
	Если Навигация.Свойство("ЕстьЕще") Тогда
		ГлавноеОкно.ФильтрЕстьЕще = Навигация.ЕстьЕще="Да";
	Иначе
		ГлавноеОкно.ФильтрЕстьЕще = Ложь;
	КонецЕсли;
	Если Навигация.Свойство("Страница") Тогда
		ГлавноеОкно.ФильтрСтраница = Число(Навигация.Страница)+1;
	Иначе
		ГлавноеОкно.ФильтрСтраница = 1;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;	
	Для сч=0 По Размер-1 Цикл
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Проведен", -1);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		НоваяСтр.Вставить("Склад", ?(оДокумент.Свойство("Подразделение"),оДокумент.Подразделение.Название,""));
		НоваяСтр.Вставить("Комментарий", ?(оДокумент.Свойство("Примечание"),оДокумент.Примечание,""));
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если Размер>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдПакетаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции
&НаКлиенте
функция ПрочитатьДокумент(Кэш,ИдДок) экспорт
	// Получает структуру документа СБИС	
	document = Кэш.Docflow.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	Результат = Кэш.docflow.ReadDocument( document );
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	оДокумент = СериализоватьObjectВСтруктуру(Результат);
	Возврат оДокумент;
КонецФункции
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Результат = Кэш.docflow.LoadDataFromURIToFile(Ссылка, ИмяФайла );
	//Результат = Кэш.docflow.LoadDataFromURI( Ссылка );
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	
	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	РезультатТекст = ТекстДок.Прочитать();
	Если Найти(РезультатТекст, "encoding=""UTF-8""")>0 Тогда
		ТекстДок = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		РезультатТекст = ТекстДок.Прочитать();
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Попытка
		Если Лев(РезультатТекст,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) экспорт //d.ch
	Результат = Кэш.docflow.LoadDataFromURItoFile(Ссылка,ИмяФайла);
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
//Функция ИмяРегистраСвойствОбъектов()
//	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
//		Возврат "ЗначенияСвойствОбъектов";
//	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
//		Возврат "ДополнительныеСведения";
//	Иначе
//		// ??? где храним статусы
//	КонецЕсли
//КонецФункции
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
	// Получает html по идентификаторам пакета и вложения
	// Используется при просмотре документов из реестров СБИС
	ext_document = МестныйКэш.Docflow.CreateSimpleObject(); 
	ext_document.Write( "Идентификатор", Вложение.Идентификатор ); 
	ext_document.Write( "СсылкаНаHTML", Вложение.СсылкаНаHTML );
	document = МестныйКэш.Docflow.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	document.WriteObject( "Вложение", ext_document ); 
	html = Кэш.docflow.ReadDocumentAsHTML( document );
	Если html = Неопределено Тогда //почему неопределено
		Возврат "";
	КонецЕсли;
	
	html = СериализоватьObjectВСтруктуру(html);
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, ТекстXML) экспорт
	// Получает html по xml	
	// Используется при просмотре документов из реестров продаж (1С)
	МестныйКэш = Кэш;
	param = Кэш.Docflow.CreateSimpleObject(); 
	param.Write( "XML", ТекстXML); 
	html = Кэш.docflow.GenerateHTMLFromXML( param );
	Если html=Неопределено Тогда
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	html = СериализоватьObjectВСтруктуру(html);
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	
	document_out = МестныйКэш.Docflow.CreateSimpleObject();
	document_out.Write( "Идентификатор", Идентификатор );
	
	// Прочитаем пакет   
	doc = Кэш.docflow.ReadDocument(document_out);
	СоставПакета = СериализоватьObjectВСтруктуру(doc);
	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		Комментарий="";
		Если ИмяКоманды = "Отклонить" Тогда
			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		//Ищем действие соответсвующее команде
		Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
			Если Действие.Название = ИмяКоманды Тогда
				Возврат сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	Если (НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	
	//certificate = МестныйКэш.Docflow.CreateSimpleObject();
	//certificate.Write("ИНН", Действие.Сертификат[0].ИНН);
	//certificate.Write("ФИО", Действие.Сертификат[0].ФИО);
	//certificate.Write("Должность", Действие.Сертификат[0].Должность);
	//certificate.Write("Квалифицированный", "Да");
	
	
	// Назначение действие на этап
	action = Кэш.Docflow.CreateSimpleObject();
	action.Write("Название", Действие.Название);
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 Тогда
		certificate = СериализоватьСтруктуруВObject(Действие.Сертификат[0],Кэш);
		action.WriteObject("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Write("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Кэш.Docflow.CreateSimpleObject();
	stage.Write("Название", Этап.Название);
	stage.Write("Идентификатор",Этап.Идентификатор); 
	stage.WriteObject("Действие", action);
	
	
	document_in = Кэш.Docflow.CreateSimpleObject();
	document_in.WriteObject( "Этап", stage );
	document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = Кэш.docflow.PrepareAction(document_in);
	Если prepared_document  = Неопределено Тогда
		сбисСообщитьОбОшибке();
		Возврат Ложь
	КонецЕсли;
	
	attachmentList = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Вложение");
	Если attachmentList = Неопределено Тогда
		attachmentList = Кэш.Docflow.CreateSimpleObjectList();
	КонецЕсли;
	
	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	Размер = attachmentList.count;
	ИдПодтвЗаказа = "";
	НомПодтвЗаказа = 0;
	Для сч=0 По Размер-1 Цикл
		Запись = attachmentList.at(сч);
		Если Запись.Read("Тип") = "ПодтверждениеЗаказа" Тогда
			ИдПодтвЗаказа = Запись.Read("Идентификатор");
			НомПодтвЗаказа = сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Идентификатор") Тогда
			attachment = Кэш.Docflow.CreateSimpleObject();
			file = Кэш.Docflow.CreateSimpleObject();
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
			file.Write( "Имя", ИмяФайла ); 
			file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			attachment.WriteObject( "Файл", file );
			Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				attachmentList.Delete(НомПодтвЗаказа);
			Иначе 
				ИдВложения = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			attachment.Write( "Идентификатор",  ИдВложения);
			attachmentList.Add( attachment );
		КонецЕсли;
	КонецЦикла;
	
	
	stage = prepared_document.ReadObjectList("Этап").at(0);
	action = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Действие").at(0);
	stage.WriteObject("Действие", action);
	stage.WriteObjectList("Вложение", attachmentList);
	prepared_document.WriteObject( "Этап", stage );
	
	// Завершение этапа
	completed_document = Кэш.docflow.ExecuteAction(prepared_document);
	Если completed_document  = Неопределено Тогда 
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = МестныйКэш.Docflow.CreateSimpleObject();
	param.Write("ИдентификаторДокумента",СоставПакета.Идентификатор);
	ИнформацияПоНеобработанным = МестныйКэш.Docflow.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		Результат = МестныйКэш.Docflow.ProcessServiceStagesEx(param);
		Если Результат = Неопределено Тогда //почему неопределено
			сбисСообщитьОбОшибке();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Интеллектуальная функция выполнить команду пока не умеет прикладывать вложения, поэтому пользуемся неинтеллектуальной
//&НаКлиенте
//Функция сбисВыполнитьКоманду(Кэш, СоставПакета,ИмяКоманды, ПредставлениеПакета) Экспорт
//// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
//	МестныйКэш = Кэш;	
//	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
//		action = Неопределено;
//		Комментарий="";
//		Если ИмяКоманды = "Отклонить" Тогда
//			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
//				   Возврат Ложь;
//			КонецЕсли;
//		КонецЕсли;	
//		// Назначение действие на этап
//		action = МестныйКэш.Docflow.CreateSimpleObject();
//		//action.Write("Название", Действие.Название);
//		action.Write("Название", ИмяКоманды);
//		//action.WriteObject("Сертификат", certificate);
//		Если Комментарий<>"" Тогда
//			action.Write("Комментарий", Комментарий);
//		КонецЕсли;	
//		
//		// Назначение этапа
//		stage = МестныйКэш.Docflow.CreateSimpleObject();
//		stage.Write("Название", "Утверждение");
//		stage.Write("Идентификатор",СоставПакета.Этап[0].Идентификатор); 
//		stage.WriteObject("Действие", action);
//		
//		document_in = МестныйКэш.Docflow.CreateSimpleObject();
//		document_in.WriteObject( "Этап", stage );
//		document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
//		
//		Результат = Кэш.docflow.ExecuteActionEx(document_in);
//		Если Результат  = Неопределено Тогда
//			сбисСообщитьОбОшибке(ПредставлениеПакета);
//			Возврат Ложь
//		КонецЕсли;
//	КонецЕсли;	
//	Возврат Истина;
//КонецФункции	
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	// Получает Информацию о контрагенте с онлайна
	kontr = Кэш.Docflow.CreateSimpleObject(); 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		СвФЛ = Кэш.Docflow.CreateSimpleObject();
		СвФЛ.Write( "ИНН", СтруктураКонтрагента.СвФЛ.ИНН ); 
		kontr.WriteObject( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Кэш.Docflow.CreateSimpleObject();
		СвЮЛ.Write( "ИНН", СтруктураКонтрагента.СвЮЛ.ИНН ); 
		СвЮЛ.Write( "КПП", СтруктураКонтрагента.СвЮЛ.КПП );
		Если СтруктураКонтрагента.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Write( "КодФилиала", СтруктураКонтрагента.СвЮЛ.КодФилиала );
		КонецЕсли;
		kontr.WriteObject( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	Результат = Кэш.docflow.ReadContragentInfo( kontr );
	Если Результат = Неопределено Тогда //почему неопределено
		//сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	оКонтрагент = СериализоватьObjectВСтруктуру(Результат);
	Возврат оКонтрагент;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	// Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
	МестныйКэш = Кэш;
	ЕстьЕще = Истина;
	ТекущаяСтраница = 0;
	МассивОрганизаций = Новый Массив;
	Пока ЕстьЕще Цикл
		filter  = МестныйКэш.Docflow.CreateSimpleObject();
		navigation = МестныйКэш.Docflow.CreateSimpleObject();
		navigation.Write( "Страница", ТекущаяСтраница);
		filter.WriteObject( "Навигация", navigation );
		Результат = Кэш.Docflow.ReadOurOrganizations(filter); // Получаем список наших организаций
		Если Результат = Неопределено Тогда //почему неопределено
			сбисСообщитьОбОшибке();
			Возврат МассивОрганизаций;
		КонецЕсли;
		Выборка = Результат.ReadObjectList("НашаОрганизация");
		Размер = Выборка.count;
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			Запись = Выборка.at(сч);
			оОрганизация = СериализоватьObjectВСтруктуру(Запись);	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("com", Запись);
				оОрганизация.Вставить("Название", строка(Организация1С));
								
				МассивОрганизаций.Добавить(оОрганизация);
				// добавляем ИНН в список для активации серверных ключей
				Если оОрганизация.Свойство("СвФЛ") Тогда
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
						СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
					КонецЕсли;
				Иначе
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
						СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
			Если Не ЗначениеЗаполнено(КодАктивации) Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Для Каждого оОрганизация из МассивОрганизаций Цикл
		ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(оОрганизация);
	КонецЦикла;	
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(оОрганизация)
	// Обрабатывает служебные документы организации	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	param   = МестныйКэш.Docflow.CreateSimpleObject();
	Орг = СериализоватьObjectВСтруктуру(оОрганизация.com);
	org = МестныйКэш.Docflow.CreateSimpleObject(); 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
		СвФЛ.Write( "ИНН", Орг.СвФЛ.ИНН); 
		org.WriteObject( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
		СвЮЛ.Write( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Write( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Write( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.WriteObject( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.WriteObject("НашаОрганизация",org);
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	ИнформацияПоНеобработанным = МестныйКэш.Docflow.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			Результат = МестныйКэш.Docflow.ProcessServiceStagesEx(param);
			Если Результат = Неопределено Тогда //почему неопределено
				сбисСпрятатьСостояние(ГлавноеОкно);
				сбисСообщитьОбОшибке();
				Возврат Ложь;
			КонецЕсли;
			Результат = СериализоватьObjectВСтруктуру(Результат);
			ЕстьНеобработанныеИзвещения = Результат.ЕстьНеобработанныеЭтапы;
			Обработано = Обработано + Число(Результат.ОбработаноЭтапов);
			
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если Обработано=0 и ЕстьНеобработанныеИзвещения = "Да" Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	// Отправляет сформированные пакеты документов	
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	ВсегоОтправлено = 0;
	ВсегоОшибок = 0;
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	documenty = Кэш.Docflow.CreateSimpleObjectList();
	
	Для СчетчикПакетов=0 По КоличествоПакетов-1 Цикл
		СоставПакета = МассивПакетов[СчетчикПакетов];
		document = Кэш.Docflow.CreateSimpleObject();
		Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
			document.Write( "Дата",СоставПакета.Дата);	
		КонецЕсли;
		Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
			document.Write( "Номер",СоставПакета.Номер);	
		КонецЕсли;
		attachmentList = Кэш.Docflow.CreateSimpleObjectList();
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			attachment = Кэш.Docflow.CreateSimpleObject();
			file = Кэш.Docflow.CreateSimpleObject();
			Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
				file.Write( "Имя", Вложение.ИмяФайла ); 
				file.Write( "ДвоичныеДанные", StreamHelper.FileToBase64(Вложение.ПолноеИмяФайла) ); 
			Иначе  // сформирован xml
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
				file.Write( "Имя", ИмяФайла ); 
				file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			КонецЕсли;
			
			Если Вложение.Свойство("Подпись") Тогда //d.ch
				ЭЦП = Кэш.Docflow.CreateSimpleObjectList();
				Для Каждого Запись из Вложение.Подпись Цикл
					ЗаписьЭЦП = Кэш.Docflow.CreateSimpleObject();
					ФайлЭЦП = Кэш.Docflow.CreateSimpleObject();
					ФайлЭЦП.Write( "Имя", Запись.Файл.Имя ); 
					ФайлЭЦП.Write( "ДвоичныеДанные",StreamHelper.FileToBase64(Запись.Файл.ПолноеИмяФайла)); 
					ЗаписьЭЦП.WriteObject("Файл",ФайлЭЦП);
					ЭЦП.Add(ЗаписьЭЦП);
				КонецЦикла;
				attachment.WriteObjectList( "Подпись", ЭЦП );
			КонецЕсли;
			
			attachment.WriteObject( "Файл", file );
			ИдВложения = строка(Новый УникальныйИдентификатор());
			Вложение.Вставить("Идентификатор", ИдВложения);
			attachment.Write( "Идентификатор",  ИдВложения);
			// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
			//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
			//	attachment.Write( "Тип",  Вложение.Тип);
			//	attachment.Write( "Подтип",  Вложение.ПодТип);
			//	attachment.Write( "ВерсияФормата",  Вложение.ВерсияФормата);
			//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
			//		attachment.Write( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
			//	КонецЕсли;
			//КонецЕсли;
			attachmentList.Add( attachment );
		КонецЦикла;
		document.Write( "Тип",СоставПакета.Тип);	
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
			ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
		Иначе
			ИдПакета = строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		СоставПакета.Вставить("Идентификатор", ИдПакета);
		document.Write( "Идентификатор", ИдПакета ); 
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
			document.Write( "ПользовательскийИдентификатор", СоставПакета.ПользовательскийИдентификатор);
		КонецЕсли;
		Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
			document.Write( "Примечание", СоставПакета.Примечание);
		КонецЕсли;
		document.WriteObjectList( "Вложение", attachmentList );
		
		org = Кэш.Docflow.CreateSimpleObject(); 
		Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
			СвФЛ = Кэш.Docflow.CreateSimpleObject();
			СвФЛ.Write( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
			org.WriteObject( "СвФЛ", СвФЛ );
		Иначе
			СвЮЛ = Кэш.Docflow.CreateSimpleObject();
			СвЮЛ.Write( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
			СвЮЛ.Write( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
			Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") Тогда
				СвЮЛ.Write( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
			КонецЕсли;
			org.WriteObject( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		document.WriteObject( "НашаОрганизация", org ); 
		
		kontr = Кэш.Docflow.CreateSimpleObject(); 
		Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
			СвФЛ = Кэш.Docflow.CreateSimpleObject();
			СвФЛ.Write( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН ); 
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
				СвФЛ.Write( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
				СвФЛ.Write( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
				СвФЛ.Write( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
			КонецЕсли;
			kontr.WriteObject( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Кэш.Docflow.CreateSimpleObject();
			СвЮЛ.Write( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
			СвЮЛ.Write( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") Тогда
				СвЮЛ.Write( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
				СвЮЛ.Write( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
			КонецЕсли;
			kontr.WriteObject( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
			Подразделение = Кэш.Docflow.CreateSimpleObject();
			Подразделение.Write( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
			kontr.WriteObject( "Подразделение", Подразделение );
		КонецЕсли;
		Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
			Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
				kontr.Write( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
			КонецЕсли;
			Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
				kontr.Write( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
			КонецЕсли;
		КонецЕсли;
		document.WriteObject( "Контрагент", kontr );
		
		Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
			otv = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Ответственный Цикл
				otv.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Ответственный", otv );	
		КонецЕсли; 
		Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
			podrazdel = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Подразделение Цикл
				podrazdel.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Подразделение", podrazdel ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
			regl = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Регламент Цикл
				regl.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Регламент", regl ); 				
		КонецЕсли;
		Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
			osnovania = Кэш.Docflow.CreateSimpleObjectList();
			Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
				osn = Кэш.Docflow.CreateSimpleObject();
				Если ДокОсн.Свойство("ВидСвязи") Тогда
					osn.Write( "ВидСвязи", ДокОсн.ВидСвязи );	
				КонецЕсли;
				doc = Кэш.Docflow.CreateSimpleObject();
				Для Каждого Элемент Из ДокОсн Цикл
					Если Элемент.Ключ<>"ВидСвязи" Тогда
						doc.Write( Элемент.Ключ, СокрЛП(Элемент.Значение ));
					КонецЕсли;
				КонецЦикла;
				osn.WriteObject( "Документ", doc );
				osnovania.Add(osn);
			КонецЦикла;
			document.WriteObjectList( "ДокументОснование", osnovania ); 				
		КонецЕсли;
		documenty.Add(document);
	КонецЦикла;	
	
	param = Кэш.Docflow.CreateSimpleObject();
	param.WriteObjectList( "Документ", documenty );
	Если МассивПакетов[0].Свойство("НеЗапускатьВДокументооборот") и МассивПакетов[0].НеЗапускатьВДокументооборот = Истина Тогда
		param.Write( "НеЗапускатьВДокументооборот", "Да" );
	КонецЕсли;
	Если Кэш.Ини.Конфигурация.Свойство("ЧислоПотоковОтправки") Тогда
		param.Write( "ЧислоПотоков", СтрЗаменить(Кэш.Ини.Конфигурация.ЧислоПотоковОтправки.Значение,"'","") );	
	Иначе
		param.Write( "ЧислоПотоков", "10" );	
	КонецЕсли;
	ДатаНач = ТекущаяДата();
	Результат = Кэш.docflow.WriteDocumentsEx(param);	
	ДатаКнц = ТекущаяДата();
	Кэш.РезультатОтправки.ВремяОтправки = Кэш.РезультатОтправки.ВремяОтправки+(ДатаКнц-ДатаНач);
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		ТекстОшибки = сбисСообщитьОбОшибке();
		ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
		Если ЭлементСписка=Неопределено Тогда
			Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, КоличествоПакетов-ВсегоОтправлено-ВсегоОшибок);
		Иначе
			ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+КоличествоПакетов-ВсегоОтправлено-ВсегоОшибок;
		КонецЕсли;
		Если НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат Ложь;
	КонецЕсли;
	// Обрабатываем результат отправки - проставляем статусы
	Результат = СериализоватьObjectВСтруктуру(Результат);
	ДанныеПоСтатусам = Новый Массив;
	сч = 0;
	Для Каждого Элемент Из Результат.Реестр Цикл
		СоставПакета = МассивПакетов[сч];
		Если Элемент.Свойство("Документ") Тогда
			СоставПакета.Вставить("Отправлен", Истина);
			ВсегоОтправлено = ВсегоОтправлено + 1;
			Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
			ТекстСообщения = "";
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("Документы1С") Тогда
					Для Каждого Документ1С Из Вложение.Документы1С Цикл
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,Элемент.Документ.Состояние.Название);
						ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
						ТекстСообщения = ТекстСообщения+", "+строка(Документ1С.Значение);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = "Отправлен пакет документов: "+Сред(ТекстСообщения, 3);
			//Сообщить(ТекстСообщения);	
		КонецЕсли;
		Если Элемент.Свойство("Ошибка") Тогда
			ВсегоОшибок = ВсегоОшибок + 1;
			Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
			ТекстОшибки = Элемент.Ошибка.Описание;
			ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
			Если ЭлементСписка=Неопределено Тогда
				Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
			Иначе
				ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
			КонецЕсли;
			ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
			Если СоставПакета.Вложение.Количество()>0 и СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
				ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
			Иначе
				ОсновнойДокумент1С = Неопределено;
			КонецЕсли;
			Если ЭлементСоответствия=Неопределено Тогда
				СписокДокументов1С = Новый СписокЗначений;
				СписокДокументов1С.Добавить(ОсновнойДокумент1С,Элемент.Ошибка.ОписаниеРасширенное);
				Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, СписокДокументов1С);
			Иначе
				ЭлементСоответствия.Добавить(ОсновнойДокумент1С,Элемент.Ошибка.ОписаниеРасширенное);
			КонецЕсли;
			ТекстСообщения = "";
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("Документы1С") Тогда
					Для Каждого Документ1С Из Вложение.Документы1С Цикл
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Ошибка: "+Лев(ТекстОшибки, 230));
						ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
						ТекстСообщения = ТекстСообщения+", "+строка(Документ1С.Значение);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = "Пакет документов не отправлен: "+Сред(ТекстСообщения, 3)+". "+ТекстОшибки;
			//Сообщить(ТекстСообщения);
			Если Лев(Элемент.Ошибка.Описание, 14) = "Ошибка WinHTTP" и НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
				Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	
	сбисСпрятатьСостояние(ГлавноеОкно);
	
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	// Получает статусы документов сбис
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Кэш.Docflow.CreateSimpleObject(); 
		filter.Write( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Write( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Write( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		
		navigation = Кэш.Docflow.CreateSimpleObject(); 
		navigation.Write( "РазмерСтраницы", 100 ); 
		//navigation.Write( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатНачЧтенияСтатусов", сбисТекущаяДата(Кэш)),ГлавноеОкно.КаталогНастроек);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			navigation.Write( "Страница", сч ); 
			filter.WriteObject( "Навигация", navigation );
			Результат = Кэш.Docflow.ReadChanges(filter);
			Если Результат = Неопределено Тогда //почему неопределено
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
					filter = Кэш.Docflow.CreateSimpleObject();
					filter.Write( "ПолныйСертификатЭП", "Нет");
					filter.Write( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
					filter.WriteObject( "Навигация", navigation );
					Результат = Кэш.Docflow.ReadChanges(filter);
					Если Результат = Неопределено Тогда
						сбисСпрятатьСостояние(ГлавноеОкно);
						сбисСообщитьОбОшибке();
						Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
						Возврат Ложь;
					КонецЕсли;	
				Иначе	
					сбисСпрятатьСостояние(ГлавноеОкно);
					сбисСообщитьОбОшибке();
					Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			сч = сч + 1;
			СписокИзменений = СериализоватьObjectВСтруктуру(Результат);
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	// Получает структуру документа СБИС	
	МестныйКэш = Кэш;
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	param = Кэш.Docflow.CreateSimpleObject();
	
	// предварительно сохраняем в файл, чтобы указать нужную кодировку
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(КаталогТоваров);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, "UTF-16");
	ТекстXMLBase64 = StreamHelper.FileToBase64(ИмяВрФ);  
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;
	
	param.Write( "Файл", ТекстXMLBase64 ); 
	Результат = Кэш.docflow.ImportNomenclatureFromCML( param );
	Если Результат = Неопределено Тогда 
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//////////////// Вспомогательные функции/////////////////////
&НаКлиенте
Функция Включить(Кэш) Экспорт
	// Добавляет SDK в Кэш	
	ПодключитьSBISDocflow();
	Попытка
		Кэш.Вставить("Docflow",Новый COMОбъект("SBIS.Docflow"));
		ВерсияSDK = Кэш.Docflow.ReadVersion();
		Кэш.СБИС.Вставить("ВерсияSDK", ВерсияSDK);
		Если НЕ Кэш.ОбщиеФункции.ЭтоНоваяВерсия(ВерсияSDK, "1.1.6") Тогда
			Предупреждение("Не удалось зарегистрировать новую версию ActiveX компоненты SBIS.Docflow");
			Возврат Ложь;	
		КонецЕсли;
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		сбисПолучитьФорму("ФормаПредупреждения").Показать("Не зарегистрирована ActiveX компонента SBIS.Docflow", "Подробнее...", "https://help.sbis.ru/help/integration/1C_set/modul/64bit/");
		Возврат Ложь;
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ПодключитьSBISDocflow()
	// Подкючает SDK.dll из макета обработки	
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		ПутьКМакету  = "ВнешняяОбработка.СБИС.Макет.SDK";
		Подключено = ПодключитьВнешнююКомпоненту(ПутьКМакету, "SBIS", ТипВнешнейКомпоненты.COM);
		Если НЕ Подключено Тогда
			Попытка
				УстановитьВнешнююКомпоненту(ПутьКМакету); 
				ПодключитьВнешнююКомпоненту(ПутьКМакету,"SBIS",ТипВнешнейКомпоненты.COM);
			Исключение
				Ошибка = ОписаниеОшибки();
				Сообщить(Строка(Ошибка));
			КонецПопытки;	
		КонецЕсли;
	Иначе
		Каталог = КаталогПрограммы();   // сначала пытаемся в каталог программы положить, чтобы можно было зарегить под администратором и пользоваться всем остальным
		КаталогВФ = КаталогВременныхФайлов();  
		Если Прав(Каталог,1)<>"\" Тогда 
			Каталог = Каталог+"\";
		КонецЕсли;
		Если Прав(КаталогВФ,1)<>"\" Тогда 
			КаталогВФ = КаталогВФ+"\";
		КонецЕсли;
		ИмяФайла = Каталог+"Sbis3SDK_v_"+СтрЗаменить(ТребуемаяВерсияКомпоненты(), ".","_")+".dll";
		ИмяФайлаВФ = КаталогВФ+"Sbis3SDK_v_"+СтрЗаменить(ТребуемаяВерсияКомпоненты(), ".","_")+".dll";
		Попытка 
			ЗагрузитьВнешнююКомпоненту(ИмяФайла);	
		Исключение 
			Ошибка = ОписаниеОшибки();
			МакетSDK = ЭтотОбъект.ПолучитьМакет("SDK");
			Попытка
				МакетSDK.записать(ИмяФайла);
				ЗагрузитьВнешнююКомпоненту(ИмяФайла);	
			Исключение
				Ошибка = ОписаниеОшибки();
				//Сообщить(Строка(Ошибка));
				Попытка 
					ЗагрузитьВнешнююКомпоненту(ИмяФайлаВФ);
				Исключение
					Ошибка = ОписаниеОшибки();
					МакетSDK.записать(ИмяФайлаВФ);
					Попытка
						ЗагрузитьВнешнююКомпоненту(ИмяФайлаВФ);
					Исключение
						Ошибка = ОписаниеОшибки();
						Сообщить(Строка(Ошибка));
					КонецПопытки;
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;	
КонецФункции
&НаКлиенте
функция ТребуемаяВерсияКомпоненты() экспорт
	// Повышаем версию компоненты при обновлении SDK	
	Возврат "1.1.7";
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно, ДопПараметры) Экспорт
	// Формирует структуру фильтра для списочных методов SDK	
	filter = МестныйКэш.Docflow.CreateSimpleObject();
	
	filter.Write( "ДопПоля", "Этап");
	
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаНач) Тогда
		filter.Write( "ДатаС", Формат(ГлавноеОкно.ФильтрДатаНач,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаКнц) Тогда
		filter.Write( "ДатаПо", Формат(ГлавноеОкно.ФильтрДатаКнц,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		filter.Write( "Состояние", ГлавноеОкно.ФильтрСостояние ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
		org = МестныйКэш.Docflow.CreateSimpleObject(); 
		Если СтрДлина(СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"))) = 12 Тогда
			СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
			СвФЛ.Write( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			org.WriteObject( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
			СвЮЛ.Write( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			СвЮЛ.Write( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
			org.WriteObject( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		filter.WriteObject( "НашаОрганизация", org ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
		kontr = МестныйКэш.Docflow.CreateSimpleObject(); 
		ИННКонтр = ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН");
		Если ТипЗнч(ИННКонтр)=Тип("Строка") Тогда // если выбрана папка контрагентов, то ИНН получается NaN
			Если СтрДлина(СокрЛП(ИННКонтр)) = 12 Тогда
				СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
				СвФЛ.Write( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН") ); 
				kontr.WriteObject( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
				СвЮЛ.Write( "ИНН", ИННКонтр ); 
				СвЮЛ.Write( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
				kontr.WriteObject( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			filter.WriteObject( "Контрагент", kontr );
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			filter.Write( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;
	
	navigation = МестныйКэш.Docflow.CreateSimpleObject(); 
	navigation.Write( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице ); 
	navigation.Write( "Страница", ГлавноеОкно.ФильтрСтраница-1 ); 
	filter.WriteObject( "Навигация", navigation );
	
	Возврат filter;	
КонецФункции	
&НаКлиенте
Функция СериализоватьObjectВСтруктуру(Object) Экспорт
	// сериализует  com-объект в структуру	
	ИмяОбъекта = object.ReadFirst();
	Структура = Новый Структура();
	Пока ИмяОбъекта<>"" Цикл
		Тип = object.TypeOf(ИмяОбъекта);	
		Если Тип = "строка" Тогда
			Строка = object.Read(ИмяОбъекта);
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и (СтрДлина(Строка)=10 или СтрДлина(Строка)=19) Тогда //видимо это дата
				Попытка
					Если СтрДлина(Строка)=10 Тогда
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
					Иначе
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2))
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			Структура.Вставить(ИмяОбъекта,Строка);
		ИначеЕсли Тип = "объект" Тогда
			Структура.Вставить(ИмяОбъекта,СериализоватьObjectВСтруктуру(object.ReadObject(ИмяОбъекта)));
		ИначеЕсли Тип = "массив объектов" Тогда
			Структура.Вставить(ИмяОбъекта,Новый Массив());
			ObjectList = Object.ReadObjectList(ИмяОбъекта);
			ObjectListCount = ObjectList.count;
			Для сч=0 По ObjectListCount-1 Цикл
				Структура[ИмяОбъекта].Добавить(СериализоватьObjectВСтруктуру(ObjectList.at(сч)));
			КонецЦикла;	
		Иначе
			Сообщить("Обратитесь в техподдержку. Появился новый тип Object "+Тип);
		КонецЕсли;
		ИмяОбъекта = object.ReadNext();
	КонецЦикла;	
	Возврат Структура;
КонецФункции	
&НаКлиенте
Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.Docflow.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.Docflow.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции
// статусы документов
&НаКлиенте
Функция сбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
	// Возвращает индекс картинки по статусу электронного документа
	// Картинка статуса отображается в реестре документов
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом/аннулирован
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;	
	
КонецФункции
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
	// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
	// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
	// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(МестныйКэш)), ГлавноеОкно.КаталогНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция сбисТекущаяДата(Кэш) Экспорт
	// получает текущую дату-время на сервере СБИС	
	Результат = Кэш.Docflow.ReadServerVersionInformation();	
	Если Результат = Неопределено Тогда //почему неопределено
		Возврат ТекущаяДата();
	КонецЕсли;
	Результат = СериализоватьObjectВСтруктуру(Результат);
	Возврат Результат.ВнешнийИнтерфейс.ДатаВремяЗапроса;
КонецФункции
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Возврат 0;
КонецФункции
Функция сбисСохранитьНастройки(СтруктураНастроек) Экспорт
	// Сохраняет параметры запроса статусов в настройках пользователя СБИС	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Элемент Из СтруктураНастроек Цикл 
		Попытка
			ХранилищеОбщихНастроек.Сохранить(Элемент.Ключ,,Элемент.Значение,,"СБИС");
		Исключение
			ХранилищеОбщихНастроек.Сохранить(Элемент.Ключ,,Элемент.Значение);
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции
Функция сбисПолучитьНастройки(СтруктураНастроек) Экспорт
	// Получает параметры запроса статусов из настроек пользователя СБИС	
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого Элемент Из СтруктураНастроек Цикл 
		Попытка
			СтруктураНастроек[Элемент.Ключ] = ХранилищеОбщихНастроек.Загрузить(Элемент.Ключ,,,"СБИС");
		Исключение
			СтруктураНастроек[Элемент.Ключ] = ХранилищеОбщихНастроек.Загрузить(Элемент.Ключ);
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СтруктураНастроек;
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	// Если более часа не проверяли статусы, то выводим красное предупреждение	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) или Кэш.ВИ.сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатКнцЧтенияСтатусов > 3600 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры