&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

//------------------------------------------------------
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	
КонецФункции
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	// Закрывает сессию	
	Парам = Новый Массив;
	СБИСПлагин_ВыполнитьМетод(Кэш, "TerminateSession", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "TerminateSession");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "TerminateSession(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Возврат Ответы[0]["answer"]["result"];
КонецФункции	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,ТекстОшибки) Экспорт 	
	// Авторизуется на online.sbis.ru по логину/паролю	
	Если НЕ СформироватьНастройкиПодключения(Кэш) Тогда
		Возврат Ложь;
	КонецЕсли;
	МестныйКэш = Кэш;
	Парам = Новый Массив;
	Парам.Добавить(Логин);
	Парам.Добавить(Пароль);
	СБИСПлагин_ВыполнитьМетод(Кэш, "Authenticate", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "Authenticate");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "Authenticate(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
	   	Возврат Ложь;
	КонецЕсли;
	Возврат Ответы[0]["answer"]["result"];
КонецФункции	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,ТекстОшибки) Экспорт
	// Авторизуется на online.sbis.ru по сертификату	
	Если НЕ СформироватьНастройкиПодключения(Кэш) Тогда
		Возврат Ложь;
	КонецЕсли;
	МестныйКэш = Кэш;
	Парам = Новый Массив;
	Парам.Добавить(Сертификат);
	СБИСПлагин_ВыполнитьМетод(Кэш, "AuthenticateByCertificate", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "AuthenticateByCertificate");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "AuthenticateByCertificate(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
	   	Возврат Ложь;
	КонецЕсли;
	Возврат Ответы[0]["answer"]["result"];
КонецФункции
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "") Экспорт
	// Устанавливает в SDK настройки подключения		
	Парам = Новый Массив;
	Параметр = Новый Структура();
	Параметр.Вставить("host",СтрЗаменить(Кэш.СБИС.АдресСервера,".ru/",".ru"));
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Параметр.Вставить("sid",ИдентификаторСессии);
	КонецЕсли;
	Парам.Добавить(Параметр);
	СБИСПлагин_ВыполнитьМетод(Кэш, "setConnectionInfo", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "setConnectionInfo");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "setConnectionInfo(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;

КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
// Получает список сертификатов для авторизации	
	Если НЕ СформироватьНастройкиПодключения(Кэш) Тогда
		Возврат Ложь;
	КонецЕсли;
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Парам = Новый Массив;
	Параметр = Новый Структура();
	Парам.Добавить(Параметр);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadCertificatesForAuth", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadCertificatesForAuth");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadCertificatesForAuth(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
	    Возврат Ложь;
	КонецЕсли;
	
	ObjectList = Ответы[0]["answer"]["Сертификат"];
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
                Если Сертификат.Свойство("ДействителенПо") Тогда
                    Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
                        ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
                    Иначе
                        ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
                    КонецЕсли;
				КонецЕсли;
				СписокСертификатов.Добавить(Сертификат,СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")","")
				        + ?(Сертификат.Свойство("Название"),", "+Сертификат.Название+")","")
						+", "+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","")
				        +?(Сертификат.Свойство("ДействителенПо"),(", действителен до "+Формат(ДействителенПо,"ДЛФ=DD")),""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	// Получает список доступных сертификатов	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Если filter=Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	Парам = Новый Массив;
	Параметр = Новый Структура();
	Парам.Добавить(filter);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadCertificates", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadCertificates");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadCertificates(): Не удалось получить ответ");
		Возврат СписокСертификатов;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
	    Возврат СписокСертификатов;
	КонецЕсли;
	
	
	Object = Ответы[0]["answer"];
	ObjectList = Object.Сертификат;
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;
	СписокСертификатов = ПолучитьСписокСертификатов(Кэш);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
						certificate = Новый Структура;
						certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
						Парам = Новый Массив;
						Парам.Добавить(certificate);
						СБИСПлагин_ВыполнитьМетод(Кэш, "AcquireCertificateActivation", Парам);
						Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "AcquireCertificateActivation");
						Если Ответы.Количество() = 0 Тогда
							сбисСообщитьОбОшибке(Кэш, "AcquireCertificateActivation(): Не удалось получить ответ");
							Продолжить;
						КонецЕсли;
						Если Ответы[0]["answer"].Свойство("error") Тогда
						    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		certificate = Новый Структура;
		certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
		certificate.Вставить("КодАктивации", Сертификат.КодАктивации);
		Парам = Новый Массив;
		Парам.Добавить(certificate);
		СБИСПлагин_ВыполнитьМетод(Кэш, "ActivateCertificate", Парам);
		Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ActivateCertificate");
		Если Ответы.Количество() = 0 Тогда
			сбисСообщитьОбОшибке(Кэш, "ActivateCertificate(): Не удалось получить ответ");
			Возврат Ложь;
		КонецЕсли;
		Если Ответы[0]["answer"].Свойство("error") Тогда
		    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	// Получает информацию о текущем пользователе	
	Парам = Новый Массив;
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadCurrentUserInfo", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadCurrentUserInfo");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadCurrentUserInfo(): Не удалось получить ответ");
		Возврат "";
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат "";
	КонецЕсли;

	
	Результат = Ответы[0]["answer"];	
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Результат.Пользователь.Свойство("Фамилия", Фамилия);
	Результат.Пользователь.Свойство("Имя", Имя);
	Результат.Пользователь.Свойство("Отчество", Отчество);
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Парам = Новый Массив;
	СБИСПлагин_ВыполнитьМетод(Кэш, "CheckSession", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "CheckSession");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "CheckSession(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат Ложь;
	КонецЕсли;
	Возврат Ответы[0]["answer"].СессияАктивна = "Да";
КонецФункции
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	// Получает список документов реализации с online.sbis.ru 	
	СтруктураДляОбновленияФормы = Новый Структура;
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Парам = Новый Массив;
	Парам.Добавить(filter);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadDocuments", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadDocuments");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadDocuments(): Не удалось получить ответ");
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Результат = Ответы[0]["answer"];
	
	ГлавноеОкно.ФильтрЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.Навигация.Страница)+1;
	Выборка = Результат.Документ;

	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.Количество();
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("Контрагент", оДокумент.Контрагент.Название);
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("НашаОрганизация", оДокумент.НашаОрганизация.Название);
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		МассивДокументов.Добавить(НоваяСтр)
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
    СтруктураДляОбновленияФормы = Новый Структура;
	Парам = Новый Массив;
	Парам.Добавить(filter);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadDocumentsByEvents", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadDocumentsByEvents");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadDocumentsByEvents(): Не удалось получить ответ");
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Результат = Ответы[0]["answer"]; 
			
	ГлавноеОкно.ФильтрЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.Навигация.Страница)+1;
	Выборка = Результат.Реестр;
	МассивДокументов = Новый Массив;	
	Размер = Выборка.Количество();
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		//НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремя);
		оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;

		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если НЕ Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	// Получает список документов определенного типа с online.sbis.ru	
	СтруктураДляОбновленияФормы = Новый Структура();
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Парам = Новый Массив;
	Парам.Добавить(filter);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadDocuments", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadDocuments");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadDocuments(): Не удалось получить ответ");
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Результат = Ответы[0]["answer"];
	
	Выборка = Результат.Документ;

	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.Количество();
	Навигация = Результат.Навигация; 
	Если Навигация.Свойство("ЕстьЕще") Тогда
		ГлавноеОкно.ФильтрЕстьЕще = Навигация.ЕстьЕще="Да";
	Иначе
		ГлавноеОкно.ФильтрЕстьЕще = Ложь;
	КонецЕсли;
	Если Навигация.Свойство("Страница") Тогда
		ГлавноеОкно.ФильтрСтраница = Число(Навигация.Страница)+1;
	Иначе
		ГлавноеОкно.ФильтрСтраница = 1;
	КонецЕсли;
		
	МассивДокументов = Новый Массив;	
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Проведен", -1);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		НоваяСтр.Вставить("Склад", ?(оДокумент.Свойство("Подразделение"),оДокумент.Подразделение.Название,""));
		НоваяСтр.Вставить("Комментарий", ?(оДокумент.Свойство("Примечание"),оДокумент.Примечание,""));
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если Размер>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдПакетаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции
&НаКлиенте
функция ПрочитатьДокумент(Кэш,ИдДок) экспорт
	// Получает структуру документа СБИС
	Парам = Новый Массив;
	Параметр = Новый Структура();
	Параметр.Вставить("Идентификатор",ИдДок);
	Парам.Добавить(Параметр);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadDocument", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadDocument");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadDocument(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ответы[0]["answer"];
	оДокумент = Результат;
	Возврат оДокумент;
КонецФункции
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = ПолучитьИмяВременногоФайла();
		
	Парам = Новый Массив;
	Парам.Добавить(Ссылка);
	Парам.Добавить(СтрЗаменить(ИмяФайла, "\", "\\"));
	СБИСПлагин_ВыполнитьМетод(Кэш, "LoadDataFromURIToFile", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "LoadDataFromURIToFile");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "LoadDataFromURIToFile(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;

	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	РезультатТекст = ТекстДок.Прочитать();
	Если Найти(РезультатТекст, "encoding=""UTF-8""")>0 Тогда
		ТекстДок = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
		РезультатТекст = ТекстДок.Прочитать();
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;

	Попытка
		Если Лев(РезультатТекст,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) экспорт //d.ch
	Парам = Новый Массив;
	Парам.Добавить(Ссылка);
	Парам.Добавить(СтрЗаменить(ИмяФайла, "\", "\\"));
	СБИСПлагин_ВыполнитьМетод(Кэш, "LoadDataFromURIToFile", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "LoadDataFromURIToFile");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "LoadDataFromURIToFile(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Возврат Ответы[0]["answer"];
КонецФункции
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
// Получает html по идентификаторам пакета и вложения
// Используется при просмотре документов из реестров СБИС

	Парам = Новый Массив;
	document = Новый Структура();
	document.Вставить("Идентификатор",ИдДок);
	document.Вставить("Вложение",Новый Структура("Идентификатор,СсылкаНаHTML",Вложение.Идентификатор,Вложение.СсылкаНаHTML));
	Парам.Добавить(document);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadDocumentAsHTML", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadDocumentAsHTML");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadDocumentAsHTML(): Не удалось получить ответ");
		Возврат "";
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат "";
	КонецЕсли;

	
	html = Ответы[0]["answer"];
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, ТекстXML) экспорт
	// Получает html по xml	
	Парам = Новый Массив;
	document = Новый Структура( "XML", ТекстXML);
	Парам.Добавить(document);
	СБИСПлагин_ВыполнитьМетод(Кэш, "GenerateHTMLFromXML", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "GenerateHTMLFromXML");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "GenerateHTMLFromXML(): Не удалось получить ответ");
		Возврат "";
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат "";
	КонецЕсли;

	
	html = Ответы[0]["answer"];
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	
	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокумент(Кэш,Идентификатор);
	Если СоставПакета=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		Комментарий="";
		Если ИмяКоманды = "Отклонить" Тогда
			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		//Ищем действие соответсвующее команде
		Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
			Если Действие.Название = ИмяКоманды Тогда
				Возврат сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), СоставПакета.НашаОрганизация.СвЮЛ.ИНН, СоставПакета.НашаОрганизация.СвФЛ.ИНН);
	Если Кэш.КэшСертификатов.Свойство("с"+ИННОрг) Тогда
		Сертификат = Кэш.КэшСертификатов["с"+ИННОрг];
	Иначе
		СписокСертификатов = ПолучитьСписокСертификатов(Кэш, Новый Структура("ИНН",ИННОрг));
		Если СписокСертификатов.Количество()>0 Тогда
			Сертификат = СписокСертификатов[0].Значение;	
		Иначе
			Сертификат = Неопределено;
		КонецЕсли;
		Кэш.КэшСертификатов.Вставить("с"+ИННОрг,Сертификат);
	КонецЕсли;
	Если (Сертификат = Неопределено) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	
	//certificate = МестныйКэш.Docflow.CreateSimpleObject();
	//certificate.Write("ИНН", Действие.Сертификат[0].ИНН);
	//certificate.Write("ФИО", Действие.Сертификат[0].ФИО);
	//certificate.Write("Должность", Действие.Сертификат[0].Должность);
	//certificate.Write("Квалифицированный", "Да");

							
	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Сертификат <> Неопределено Тогда
		certificate = Сертификат;
		action.Вставить("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	

	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Этап", stage );
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	Парам = Новый Массив;
	Парам.Добавить(document_in);
	СБИСПлагин_ВыполнитьМетод(Кэш, "PrepareAction", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "PrepareAction",,Ложь);
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "PrepareAction(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат Ложь;
	КонецЕсли;
	
	prepared_document = Ответы[0]["answer"];
	
	attachmentList = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
		
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		Размер = attachmentList.Количество();
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentList[сч];
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
				file.Вставить( "Имя", ИмяФайла ); 
			    file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					attachmentList.Удалить(НомПодтвЗаказа);
				Иначе 
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	stage = prepared_document.Этап[0];
	action = prepared_document.Этап[0].Действие[0];
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	prepared_document.Вставить( "Этап", stage );
	
	// Завершение этапа
	Парам = Новый Массив;
	Парам.Добавить(prepared_document);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ExecuteAction", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ExecuteAction");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ExecuteAction(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = Новый Структура;
	param.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	Парам = Новый Массив;
	Парам.Добавить(param);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadServiceStagesInfo", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadServiceStagesInfo");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadServiceStagesInfo(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
	    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		Возврат Ложь;
	КонецЕсли;
	
	
    ИнформацияПоНеобработанным = Ответы[0]["answer"];
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		СБИСПлагин_ВыполнитьМетод(Кэш, "ProcessServiceStagesEx", Парам);
		Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ProcessServiceStagesEx");
		Если Ответы.Количество() = 0 Тогда
			сбисСообщитьОбОшибке(Кэш, "ProcessServiceStagesEx(): Не удалось получить ответ");
			Возврат Ложь;
		КонецЕсли;
		//Если Ответы[0]["answer"].Свойство("error") Тогда
		//    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
		//	Возврат Ложь;
		//КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	// Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
	МестныйКэш = Кэш;
	ЕстьЕще = Истина;
	ТекущаяСтраница = 0;
	МассивОрганизаций = Новый Массив;
	Пока ЕстьЕще Цикл
		filter  = Новый Структура;
		navigation = Новый Структура;
		navigation.Вставить( "Страница", ТекущаяСтраница);
		filter.Вставить( "Навигация", navigation );
		Парам = Новый Массив;
		Парам.Добавить(filter);
		СБИСПлагин_ВыполнитьМетод(Кэш, "ReadOurOrganizations", Парам);
		Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadOurOrganizations");
		Если Ответы.Количество() = 0 Тогда
			сбисСообщитьОбОшибке(Кэш, "ReadOurOrganizations(): Не удалось получить ответ");
			Возврат МассивОрганизаций;
		КонецЕсли;
		Если Ответы[0]["answer"].Свойство("error") Тогда
		    сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
			Возврат МассивОрганизаций;
		КонецЕсли;
		
		Результат = Ответы[0]["answer"]; // Получаем список наших организаций
		Выборка = Результат.НашаОрганизация;
		Размер = Выборка.Количество();
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			оОрганизация = Выборка[сч];	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("Название", строка(Организация1С));
				
				МассивОрганизаций.Добавить(оОрганизация);
				// добавляем ИНН в список для активации серверных ключей
				Если оОрганизация.Свойство("СвФЛ") Тогда
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
						СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
					КонецЕсли;
				Иначе
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
						СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
			Если Не ЗначениеЗаполнено(КодАктивации) Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Для Каждого оОрганизация из МассивОрганизаций Цикл
		ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация);
	КонецЦикла;	
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация)
	// Обрабатывает служебные документы организации	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	param   = Новый Структура;
	Орг = оОрганизация;
	org = Новый Структура; 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", Орг.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.Вставить("НашаОрганизация",org);
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	Парам = Новый Массив;
	Парам.Добавить(param);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ReadServiceStagesInfo", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadServiceStagesInfo");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "ReadServiceStagesInfo(): Не удалось получить ответ");
		Возврат Ложь;
	КонецЕсли;
	Если Ответы[0]["answer"].Свойство("error") Тогда
		сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
	    Возврат Ложь;
	КонецЕсли;
	
	ИнформацияПоНеобработанным = Ответы[0]["answer"];
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			СБИСПлагин_ВыполнитьМетод(Кэш, "ProcessServiceStagesEx", Парам);
			Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ProcessServiceStagesEx", 60);
			Если Ответы.Количество() = 0 Тогда
				сбисСообщитьОбОшибке(Кэш, "ProcessServiceStagesEx(): Не удалось получить ответ");
				Возврат Ложь;
			КонецЕсли;
			Если Ответы[0]["answer"].Свойство("error") Тогда
				сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
			    Возврат Ложь;
			КонецЕсли;
			Результат = Ответы[0]["answer"];
			ЕстьНеобработанныеИзвещения = Результат.ЕстьНеобработанныеЭтапы;
			Обработано = Обработано + Число(Результат.ОбработаноЭтапов);
			
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если Обработано=0 и ЕстьНеобработанныеИзвещения = "Да" Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Парам = Новый Массив;
	СБИСПлагин_ВыполнитьМетод(Кэш, "getMillisecondsSinceEpoch", Парам);
	Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "getMillisecondsSinceEpoch");
	Если Ответы.Количество() = 0 Тогда
		сбисСообщитьОбОшибке(Кэш, "getMillisecondsSinceEpoch(): Не удалось получить ответ");
		Возврат 0;
	КонецЕсли;
	Попытка
		Результат = Число(Ответы[0]["answer"]);
	Исключение
		Возврат 0;
	КонецПопытки;
	Возврат Результат;
КонецФункции
//////// Отправка ////////////////
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	// Отправляет сформированные пакеты документов	
		
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоставПакета = МассивПакетов[0];
		
	Если Кэш.ПодготовленныеКОтправке.Количество()=Кэш.КоличествоПотоковОтправки Тогда     // Нет свободного места в кэше подготовленных - отправляем первый из кэша
		сбисОтправитьДокументВСвободныйПоток(Кэш, Кэш.ПодготовленныеКОтправке[0], Истина);
		Кэш.ПодготовленныеКОтправке.Удалить(0);
	КонецЕсли;
	сбисОтправитьДокументВСвободныйПоток(Кэш, СоставПакета, Ложь);
КонецФункции
&НаКлиенте
Процедура сбисОтправитьДокументВСвободныйПоток(Кэш, СоставПакета, ДокументИзКэша)
	// отправляет пакет в свободный поток или добавляет в очередь, обрабатывает статусы
	Если Кэш.РезультатОтправки.КоличествоСвободныхПотоков>0 Тогда
		СБИСПлагин_WriteDocumentEx(Кэш, СоставПакета);	
	Иначе
		Пока Истина Цикл
			Ответы = СБИСПлагин_ПолучитьОтветыWriteDocumentEx(Кэш, 0);
			КолОтветов = Ответы.Количество();
			Если КолОтветов>0 Тогда
				СБИСПлагин_WriteDocumentEx(Кэш, СоставПакета);
				Возврат;
			Иначе
				Если ДокументИзКэша Тогда
					Если Кэш.НеобработанныеОтветыОтправки.Количество()>0 Тогда
						сбисЗаписатьСтатусыПоОтправленнымДокументам(Кэш);
					Иначе
						
					КонецЕсли;
				Иначе
					Если Кэш.ПодготовленныеКОтправке.Количество()<Кэш.КоличествоПотоковОтправки Тогда
						Кэш.ПодготовленныеКОтправке.Добавить(СоставПакета);
						Возврат;
					Иначе
						Если Кэш.НеобработанныеОтветыОтправки.Количество()>0 Тогда
							сбисЗаписатьСтатусыПоОтправленнымДокументам(Кэш);
						Иначе
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры
&НаКлиенте
Функция СБИСПлагин_WriteDocumentEx(Кэш, СоставПакета)
	document = сбисПодготовитьСтруктуруПакетаДляОтправки(СоставПакета);
	Парам = Новый Массив;
	Парам.Добавить(document);
	Парам.Добавить("true");
	Кэш.РезультатОтправки.ПорНомер = Кэш.РезультатОтправки.ПорНомер + 1;
	ИдентификаторОтправки = строка(Кэш.РезультатОтправки.ПорНомер)+"_"+строка(ТекущаяДата());
	//Кэш.РезультатОтправки.ДетализацияОтправки.Вставить(ИдентификаторОтправки, Новый Структура("ДатНач, ВремяВыполнения",Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш)));
	СБИСПлагин_ВыполнитьМетод(Кэш, "WriteDocumentEx", Парам, ИдентификаторОтправки);
	Статусы = Новый Массив;
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Документы1С") Тогда
			Для Каждого Документ1С Из Вложение.Документы1С Цикл
				СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,);
				Статусы.Добавить(Новый Структура("СтруктураСвойств, Документ1С", СтруктураСвойств, Документ1С.Значение));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если СоставПакета.Вложение.Количество()>0 и СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	Иначе
		ОсновнойДокумент1С = Неопределено;
	КонецЕсли;
	Кэш.РезультатОтправки.ДанныеПоСтатусам.Добавить(Новый Структура("Идентификатор, ОсновнойДокумент1С, Статусы",ИдентификаторОтправки, ОсновнойДокумент1С, Статусы));
	Кэш.РезультатОтправки.КоличествоСвободныхПотоков = Кэш.РезультатОтправки.КоличествоСвободныхПотоков-1;
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисПоказатьСостояние("Ожидание ответов", ГлавноеОкно);
	Пока Кэш.ПодготовленныеКОтправке.Количество()>0 Цикл
		сбисОтправитьДокументВСвободныйПоток(Кэш, Кэш.ПодготовленныеКОтправке[0], Истина);
		Кэш.ПодготовленныеКОтправке.Удалить(0);
	КонецЦикла;
	Пока Кэш.РезультатОтправки.ПолученоОтветов < Кэш.РезультатОтправки.ПорНомер Цикл
		Ответы = СБИСПлагин_ПолучитьОтветыWriteDocumentEx(Кэш, 60);
		сбисЗаписатьСтатусыПоОтправленнымДокументам(Кэш);
		КолОтветов = Ответы.Количество();
		Если КолОтветов = 0 Тогда    //   не все ответы получены, но больше ничего не приходит
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
			ИндексыДляУдаления = Новый СписокЗначений;
			ДанныеПоСтатусам = Новый Массив;
			// записываем ошибку в статус
			сч = 0;
			Для Каждого Элемент Из Кэш.РезультатОтправки.ДанныеПоСтатусам Цикл
									
				ДокументСБИС_Статус = "Ошибка: не получен ответ.";
				ДобавитьОшибкуВРезультатОтправки(Кэш, "Ошибка: не получен ответ.", Элемент);
						
				Для Каждого Стр Из Элемент.Статусы Цикл
					СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", Стр.СтруктураСвойств.ДокументСБИС_Ид, Стр.СтруктураСвойств.ДокументСБИС_ИдВложения, ДокументСБИС_Статус);
					ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Стр.Документ1С));
				КонецЦикла;
				ИндексыДляУдаления.Добавить(сч);
				Кэш.РезультатОтправки.ПолученоОтветов = Кэш.РезультатОтправки.ПолученоОтветов+1;
				сч = сч+1;
			КонецЦикла;
			фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
			КоличествоОтветовПоТекущейОтправке = ИндексыДляУдаления.Количество();
			// удаляем из кэша записанные статусы
			ИндексыДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			Для Каждого Элемент Из ИндексыДляУдаления Цикл
				Кэш.РезультатОтправки.ДанныеПоСтатусам.Удалить(Элемент.Значение);		
			КонецЦикла;
			
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецПроцедуры
&НаКлиенте
Функция сбисЗаписатьСтатусыПоОтправленнымДокументам(Кэш) Экспорт
	// записываем статусы из полученных ответов
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	ИндексыДляУдаления = Новый СписокЗначений;
	ДанныеПоСтатусам = Новый Массив;
	//Сообщить("сбисЗаписатьСтатусыПоОтправленнымДокументам Кэш.НеобработанныеОтветыОтправки "+строка(Кэш.НеобработанныеОтветыОтправки.Количество()));
	Для каждого Сообщение Из Кэш.НеобработанныеОтветыОтправки Цикл
		ИдентификаторОтправки = РазложитьСтрокуВМассивПодстрок(Сообщение["queryID"],"@")[2];	
		сч = 0;
		Для Каждого Элемент Из Кэш.РезультатОтправки.ДанныеПоСтатусам Цикл
			Если Элемент.Идентификатор = ИдентификаторОтправки Тогда
				
				Если Сообщение["answer"].Свойство("error") Тогда
					ДокументСБИС_Статус = "Ошибка: "+Лев(Сообщение["answer"]["error"], 230);
					ДобавитьОшибкуВРезультатОтправки(Кэш, Сообщение["answer"]["error"], Элемент);
					
				Иначе
					Если Сообщение["answer"].Свойство("Состояние") Тогда
						Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
						ДокументСБИС_Статус = Сообщение["answer"]["Состояние"]["Название"];
					Иначе
						ДокументСБИС_Статус = "Ошибка: В ответе отсутствует состояние документа.";
						ДобавитьОшибкуВРезультатОтправки(Кэш, "В ответе отсутствует состояние документа", Элемент);
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого Стр Из Элемент.Статусы Цикл
					СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", Стр.СтруктураСвойств.ДокументСБИС_Ид, Стр.СтруктураСвойств.ДокументСБИС_ИдВложения, ДокументСБИС_Статус);
					
					ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Стр.Документ1С));
				КонецЦикла;
				ИндексыДляУдаления.Добавить(сч);
				Кэш.РезультатОтправки.ПолученоОтветов = Кэш.РезультатОтправки.ПолученоОтветов+1;
			КонецЕсли;
			сч = сч+1;
		КонецЦикла;
	КонецЦикла;
	Кэш.НеобработанныеОтветыОтправки = Новый Массив; // очищаем массив необработанных ответов
	//ДатаНач = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	//ДатаКнц = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
	//Кэш.РезультатОтправки.ВремяЗаписиСтатусов = Кэш.РезультатОтправки.ВремяЗаписиСтатусов+(ДатаКнц-ДатаНач)/1000;
	КоличествоОтветовПоТекущейОтправке = ИндексыДляУдаления.Количество();
	// удаляем из кэша записанные статусы
	ИндексыДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	//Сообщить("сбисЗаписатьСтатусыПоОтправленнымДокументам Кэш.РезультатОтправки.ДанныеПоСтатусам "+строка(Кэш.РезультатОтправки.ДанныеПоСтатусам.Количество()));
	//Сообщить("сбисЗаписатьСтатусыПоОтправленнымДокументам ИндексыДляУдаления "+строка(ИндексыДляУдаления.Количество()));
	Для Каждого Элемент Из ИндексыДляУдаления Цикл
		Кэш.РезультатОтправки.ДанныеПоСтатусам.Удалить(Элемент.Значение);		
	КонецЦикла;
	Возврат КоличествоОтветовПоТекущейОтправке
КонецФункции
/////////////////////////////////////
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	// Получает статусы документов сбис
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ТекущаяДата()-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Новый Структура; 
		filter.Вставить( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Вставить( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		
		navigation = Новый Структура; 
		navigation.Вставить( "РазмерСтраницы", "100" ); 
		//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатНачЧтенияСтатусов", ТекущаяДата()),ГлавноеОкно.КаталогНастроек);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			navigation.Вставить( "Страница", строка(сч) ); 
			filter.Вставить( "Навигация", navigation );
			Парам = Новый Массив;
			Парам.Добавить(filter);
			СБИСПлагин_ВыполнитьМетод(Кэш, "ReadChanges", Парам);
			Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadChanges");
			Если Ответы.Количество() = 0 Тогда
				сбисСообщитьОбОшибке(Кэш, "ReadChanges(): Не удалось получить ответ");
				Возврат Ложь;
			КонецЕсли;
			Если Ответы[0]["answer"].Свойство("error") Тогда
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
					filter = Новый Структура;
					filter.Вставить( "ПолныйСертификатЭП", "Нет");
					filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
					filter.Вставить( "Навигация", navigation );
					Парам = Новый Массив;
					Парам.Добавить(filter);
					СБИСПлагин_ВыполнитьМетод(Кэш, "ReadChanges", Парам);
					Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "ReadChanges");
					Если Ответы.Количество() = 0 Тогда
						сбисСообщитьОбОшибке(Кэш, "ReadChanges(): Не удалось получить ответ");
						Возврат Ложь;
					КонецЕсли;
					Если Ответы[0]["answer"].Свойство("error") Тогда
						сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
						Возврат Ложь;
					КонецЕсли;
					Результат = Ответы[0]["answer"];	
				Иначе	
					сбисСпрятатьСостояние(ГлавноеОкно);
					сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
					Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), ГлавноеОкно.КаталогНастроек);
					Возврат Ложь;
				КонецЕсли;    
			КонецЕсли;

			Результат = Ответы[0]["answer"];
			
			сч = сч + 1;
			СписокИзменений = Результат;
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), ГлавноеОкно.КаталогНастроек);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	// Получает структуру документа СБИС	
	МестныйКэш = Кэш;
	param = Новый Структура;
	param.Вставить( "Файл", сбисСтрокаВBASE64(КаталогТоваров, "UTF-16") ); 
	Парам = Новый Массив;
	Парам.Добавить(param);
	СБИСПлагин_ВыполнитьМетод(Кэш, "ImportNomenclatureFromCML", Парам);
	Возврат Истина;
КонецФункции


//////////////// Вспомогательные функции/////////////////////
&НаКлиенте
Функция Включить(Кэш) Экспорт
	// Добавляет СБИСПлагин в Кэш	
	Попытка
		Кэш.Вставить("СБИСПлагин", Новый COMОбъект("Tensor.SbisPluginClientCOM"));
		Кэш.СБИСПлагин.Connect();
		ОжиданиеОтвета = 5;
		НачДата = ТекущаяДата();
		Статус = Кэш.СБИСПлагин.State();

		Пока Статус = "Connecting" ИЛИ Статус =  "Closed"  Цикл
			Статус = Кэш.СБИСПлагин.State();
			Если ТекущаяДата() - ОжиданиеОтвета > НачДата Тогда
				Сообщить("Не удалось подключиться к СБИС плагину за разумное время. Возможно СБИС плагин не запущен.");
				Возврат "Не удалось подключиться к СБИС плагину за разумное время. Возможно СБИС плагин не запущен.";
			КонецЕсли;
		КонецЦикла;
		
		Кэш.Вставить("ExtSdk",Новый Структура);
		Парам = Новый Массив;
		Парам.Добавить("ExtSdk");
		Парам.Добавить("1.0.11.1");
		Парам.Добавить(NULL);
		
		СБИСПлагин_ВыполнитьМетод(Кэш, "getPlugin", Парам, строка(Новый УникальныйИдентификатор));
		Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "getPlugin");
		Если Ответы.Количество() = 0 Тогда
			Сообщить("Не удалось получить расширение ExtSdk. Возможно СБИС плагин не запущен.");
			Возврат "Не удалось получить расширение ExtSdk. Возможно СБИС плагин не запущен.";
		КонецЕсли;
		Если Ответы[0]["answer"].Свойство("error") Тогда
			сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
			Возврат Ответы[0]["answer"]["error"];
		КонецЕсли;
		Кэш.ExtSdk.Вставить("objectID", Ответы[0]["answer"]["objectID"]);
		
		Парам = Новый Массив;
		Парам.Добавить(Новый Структура("id",строка(Новый УникальныйИдентификатор)));
		
		СБИСПлагин_ВыполнитьМетод(Кэш, "getConnection", Парам, строка(Новый УникальныйИдентификатор));
		Ответы = СБИСПлагин_ПолучитьОтветы(Кэш, "getConnection");
		Если Ответы.Количество() = 0 Тогда
			Сообщить("Не удалось получить расширение ExtSdk. Возможно СБИС плагин не запущен.");
			Возврат "Не удалось получить расширение ExtSdk. Возможно СБИС плагин не запущен.";
		КонецЕсли;
		Если Ответы[0]["answer"].Свойство("error") Тогда
			сбисСообщитьОбОшибке(Кэш, Ответы[0]["answer"]["error"]);
			Возврат Ответы[0]["answer"]["error"];
		КонецЕсли;
		
		Кэш.ExtSdk.Вставить("objectID", Ответы[0]["answer"]["objectID"]);
		
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить("Не зарегистрирована ActiveX компонента Tensor.SbisPluginClientCOM. Возможно СБИС плагин не запущен.");
		Возврат "Не зарегистрирована ActiveX компонента Tensor.SbisPluginClientCOM. Возможно СБИС плагин не запущен.";
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно,ДопПараметры) Экспорт
// Формирует структуру фильтра для списочных методов SDK	
	filter = Новый Структура; 
	
	filter.Вставить( "ДопПоля", "Этап");
	
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаНач) Тогда
		filter.Вставить( "ДатаС", Формат(ГлавноеОкно.ФильтрДатаНач,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
    Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаКнц) Тогда
		filter.Вставить( "ДатаПо", Формат(ГлавноеОкно.ФильтрДатаКнц,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		filter.Вставить( "Состояние", ГлавноеОкно.ФильтрСостояние ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
		org = Новый Структура; 
		Если СтрДлина(СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"))) = 12 Тогда
			СвФЛ = Новый Структура;
			СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			org.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			СвЮЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
			org.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		filter.Вставить( "НашаОрганизация", org ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
		kontr = Новый Структура; 
		ИННКонтр = ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН");
		Если ТипЗнч(ИННКонтр)=Тип("Строка") Тогда // если выбрана папка контрагентов, то ИНН получается NaN
			Если СтрДлина(СокрЛП(ИННКонтр)) = 12 Тогда
				СвФЛ = Новый Структура;
				СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН") ); 
				kontr.Вставить( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Новый Структура;
				СвЮЛ.Вставить( "ИНН", ИННКонтр ); 
				СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
				kontr.Вставить( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			filter.Вставить( "Контрагент", kontr );
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			filter.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;

	navigation = Новый Структура; 
    navigation.Вставить( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице ); 
    navigation.Вставить( "Страница", ГлавноеОкно.ФильтрСтраница-1 ); 
	filter.Вставить( "Навигация", navigation );
	
	Возврат filter;	
КонецФункции
&НаКлиенте
Функция сбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
// Возвращает индекс картинки по статусу электронного документа
// Картинка статуса отображается в реестре документов
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;	
	
КонецФункции
&НаКлиенте
Функция СокращенноеФИО(Кэш, ФИО)
	// Формирует сокращенное ФИО из полного	
	ФИО = Кэш.ОбщиеФункции.РазбитьСтрокуВМассив(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,Лев(ФИО[1],1)+".","");
	Отчество = ?(ФИО.Количество()>=3,Лев(ФИО[2],1)+".","");
	Возврат Фамилия+" "+Имя+Отчество;
КонецФункции
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция СБИСПлагин_ВыполнитьМетод(Кэш, Метод, Парам=Неопределено, Идентификатор = "")
	Сообщение = Новый Структура;
	Сообщение.Вставить("type", "call");
	Сообщение.Вставить("method", Метод);
	Сообщение.Вставить("queryID", Метод +"@"+?(Кэш.ExtSdk.Свойство("objectID"),Кэш.ExtSdk.objectID,"")+"@"+Идентификатор);
	
	Если Кэш.ExtSdk.Свойство("objectID") Тогда
		Сообщение.Вставить("objectID", Кэш.ExtSdk.objectID);
	КонецЕсли;
	
	Если Парам<>Неопределено Тогда
		Сообщение.Вставить("Params",Парам);
	КонецЕсли;
		
	Сообщение = "{"+сбисЗаписатьПараметрыЗапроса(Сообщение)+"}";	
	Если Кэш.СБИСПлагин.State() = "Open" Тогда
		Кэш.СБИСПлагин.Send(Сообщение);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция СБИСПлагин_ПолучитьОтветыWriteDocumentEx(Кэш, ОжиданиеОтвета)
	ОтветыРезультат = Новый Массив;
	Если Кэш.СБИСПлагинНеобработанныеОтветы.Свойство("WriteDocumentEx") и Кэш.СБИСПлагинНеобработанныеОтветы.WriteDocumentEx.Количество()>0 Тогда
		сбисЗаписатьСтатистикуПоОтправке(Кэш, Кэш.СБИСПлагинНеобработанныеОтветы.WriteDocumentEx, ОтветыРезультат);
		Кэш.СБИСПлагинНеобработанныеОтветы.WriteDocumentEx.Очистить();
	КонецЕсли; 
	
	НачДата = ТекущаяДата();
	
	Пока ТекущаяДата() - ОжиданиеОтвета < НачДата или ОжиданиеОтвета = 0 Цикл
		Ответы = Новый Массив;
		//ДатаНач = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
		КолСообщений = СБИСПлагин_ПолучитьСообщения(Ответы, Кэш, "WriteDocumentEx");
		Если КолСообщений = 0 Тогда
			//ДатаКнц = Кэш.Интеграция.сбисТекущаяДатаМСек(Кэш);
			//Кэш.РезультатОтправки.ВремяОжиданияОтвета = Кэш.РезультатОтправки.ВремяОжиданияОтвета+(ДатаКнц-ДатаНач)/1000;
		Иначе
			сбисЗаписатьСтатистикуПоОтправке(Кэш, Ответы, ОтветыРезультат);
		КонецЕсли;
		Если ОтветыРезультат.Количество()>0 и КолСообщений=0 Тогда    // в предыдущий проход получили ответы, а в текущий уже нет - прерываемся
			Прервать;	
		КонецЕсли;
		Если ОжиданиеОтвета = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//Сообщить("Ответов " + строка(ОтветыРезультат.Количество()) + " Кэш.НеобработанныеОтветыОтправки "+строка(Кэш.НеобработанныеОтветыОтправки.Количество()));
	Возврат ОтветыРезультат;
КонецФункции
&НаКлиенте
Функция сбисЗаписатьСтатистикуПоОтправке(Кэш, Ответы, ОтветыРезультат)
	Кэш.РезультатОтправки.КоличествоСвободныхПотоков = Кэш.РезультатОтправки.КоличествоСвободныхПотоков + Ответы.Количество();
	Для Каждого Ответ Из Ответы Цикл
		Кэш.НеобработанныеОтветыОтправки.Добавить(Ответ);
		ОтветыРезультат.Добавить(Ответ);
		//ИдентификаторОтправки = РазложитьСтрокуВМассивПодстрок(Ответ["queryID"],"@")[2];
		//ДетализацияОтправки = Кэш.РезультатОтправки.ДетализацияОтправки.Получить(ИдентификаторОтправки);
		//Если ДетализацияОтправки<>Неопределено Тогда
		//	ДатКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//	ДетализацияОтправки.ВремяВыполнения = (ДатКнц - ДетализацияОтправки.ДатНач)/1000;
		//	Кэш.РезультатОтправки.ВремяОтправки = Кэш.РезультатОтправки.ВремяОтправки+ДетализацияОтправки.ВремяВыполнения;
		//КонецЕсли;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция СБИСПлагин_ПолучитьОтветы(Кэш, Команда, ОжиданиеОтвета = 30, ПреобразовыватьДаты = Истина)
	НачДата = ТекущаяДата();
	Результат = Новый Массив;
	
	Пока ТекущаяДата() - ОжиданиеОтвета < НачДата или ОжиданиеОтвета = 0 Цикл
		ПредКоличество = Результат.Количество();
		КолНужныхСообщений = СБИСПлагин_ПолучитьСообщения(Результат, Кэш, Команда, ПреобразовыватьДаты);
		Если Результат.Количество()>0 и КолНужныхСообщений=0 Тогда    // в предыдущий проход получили ответы, а в текущий уже нет - прерываемся
			Прервать;	
		КонецЕсли;
		Если ОжиданиеОтвета = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции
&НаКлиенте
Функция СБИСПлагин_ПолучитьСообщения(Результат, Кэш, Команда, ПреобразовыватьДаты = Истина)
	
	Сообщения = Кэш.СБИСПлагин.ReadAll();
	КолСообщений = Сообщения.GetUpperBound(0);
	Первое = Сообщения.GetLowerBound(0);
	КолНужныхСообщений = 0;
	Если КолСообщений >= 0 Тогда
		//Сообщить(Команда+" "+строка(Первое)+" "+строка(КолСообщений));
		Для нпп = Первое По КолСообщений Цикл
			Сообщение = Сообщения.GetValue(нпп);
			Попытка
			Сообщение = Кэш.РаботаСJSON.сбисПрочитатьJSON(Сообщение);
			
			Если Сообщение.Свойство("event") И Сообщение["event"] <> "" Тогда
				event = Сообщение["event"];
				Сообщение = Кэш.РаботаСJSON.сбисПрочитатьJSON(Сообщение["event"],,, ПреобразовыватьДаты);
				 
					ИдентификаторКоманды = Сообщение["queryID"];
					ВыполненнаяКоманда = РазложитьСтрокуВМассивПодстрок(ИдентификаторКоманды,"@")[0];
					
					Если ВыполненнаяКоманда = Команда Тогда
						Результат.Добавить(Сообщение);
						КолНужныхСообщений = КолНужныхСообщений + 1;
					ИначеЕсли ВыполненнаяКоманда = "WriteDocumentEx" Тогда
						Попытка
							Если НЕ Кэш.СБИСПлагинНеобработанныеОтветы.Свойство(ВыполненнаяКоманда) Тогда
								Кэш.СБИСПлагинНеобработанныеОтветы.Вставить(ВыполненнаяКоманда, Новый Массив);
							КонецЕсли;
							Кэш.СБИСПлагинНеобработанныеОтветы[ВыполненнаяКоманда].Добавить(Сообщение);
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					
				КонецЕсли	
				Исключение
					//Сообщить(event);
				КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат КолНужныхСообщений;
КонецФункции
&НаКлиенте
Функция сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса) Экспорт
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") ИЛИ ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+?(Элемент.Ключ = "url",Элемент.Значение,СтрЗаменить(Элемент.Значение, """", "\"""))+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+сбисЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Строка") ИЛИ ТипЗнч(ЭлементМассива) =  Тип("Дата") Тогда
					ТекстЗапроса = ТекстЗапроса+""""+СтрЗаменить(ЭлементМассива, """", "\""")+""",";
				ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Null") Тогда
					ТекстЗапроса = ТекстЗапроса+"{}";
				ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Массив") Тогда
					ТекстЗапроса = ТекстЗапроса+"[";
					Для Каждого Элемент Из ЭлементМассива Цикл
						Если ТипЗнч(Элемент) = Тип("Строка") ИЛИ ТипЗнч(Элемент) =  Тип("Дата") Тогда
							ТекстЗапроса = ТекстЗапроса+""""+СтрЗаменить(Элемент, """", "\""")+""",";
						ИначеЕсли ТипЗнч(Элемент) = Тип("Null") Тогда
							ТекстЗапроса = ТекстЗапроса+"{}";
						ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
							
						Иначе
							ТекстЗапроса = ТекстЗапроса+"{";
							ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(Элемент);
							ТекстЗапроса = ТекстЗапроса+"},";
						КонецЕсли;
					КонецЦикла;
					Если Прав(ТекстЗапроса, 1) = "," Тогда
						ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
					КонецЕсли;
					ТекстЗапроса = ТекстЗапроса+"],";
				Иначе
					ТекстЗапроса = ТекстЗапроса+"{";
					ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(ЭлементМассива);
					ТекстЗапроса = ТекстЗапроса+"},";
				КонецЕсли;
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса; 	
КонецФункции
//&НаСервереБезКонтекста
функция сбисСтрокаВBASE64(строка, кодировка = "windows-1251") экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяВрФ);  
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции
//&НаСервереБезКонтекста
функция сбисBASE64ВСтроку(ТекстXMLBase64) экспорт
	ДвоичныеДанныеXML = Base64Значение(ТекстXMLBase64);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ДвоичныеДанныеXML.Записать(ИмяВрФ);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВрФ);
	html_text = ТекстДок.ПолучитьТекст();
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
    КонецПопытки;
	Возврат html_text;
КонецФункции
//&НаСервереБезКонтекста
функция сбисФайлВBASE64(ПолноеИмяФайла) экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции
&НаКлиенте
Функция сбисПодготовитьСтруктуруПакетаДляОтправки(СоставПакета) Экспорт
	document = Новый Структура;
	Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
		document.Вставить( "Дата",СоставПакета.Дата);	
	КонецЕсли;
	Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
		document.Вставить( "Номер",СоставПакета.Номер);	
	КонецЕсли;
	attachmentList = Новый Массив;
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		attachment = Новый Структура;
		file = Новый Структура;
		Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
			file.Вставить( "Имя", Вложение.ИмяФайла ); 
			file.Вставить( "ДвоичныеДанные", сбисФайлСКлиентаВBASE64(Вложение.ПолноеИмяФайла) ); 
		Иначе  // сформирован xml
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
			file.Вставить( "Имя", ИмяФайла ); 
			file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
		КонецЕсли;
		
		Если Вложение.Свойство("Подпись") Тогда //d.ch
			ЭЦП = Новый Массив;
			Для Каждого Запись из Вложение.Подпись Цикл
				ЗаписьЭЦП = Новый Структура;
				ФайлЭЦП = Новый Структура;
				ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
				ФайлЭЦП.Вставить( "ДвоичныеДанные",сбисФайлСКлиентаВBASE64(Запись.Файл.ПолноеИмяФайла)); 
				ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
				ЭЦП.Добавить(ЗаписьЭЦП);
			КонецЦикла;
			attachment.Вставить( "Подпись", ЭЦП );
		КонецЕсли;
		
		attachment.Вставить( "Файл", file );
		ИдВложения = строка(Новый УникальныйИдентификатор());
		Вложение.Вставить("Идентификатор", ИдВложения);
		attachment.Вставить( "Идентификатор",  ИдВложения);
		// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
		//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
		//	attachment.Вставить( "Тип",  Вложение.Тип);
		//	attachment.Вставить( "Подтип",  Вложение.ПодТип);
		//	attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
		//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
		//		attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
		//	КонецЕсли;
		//КонецЕсли;
		attachmentList.Добавить( attachment );
	КонецЦикла;
	document.Вставить( "Тип",СоставПакета.Тип);	
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
	Иначе
		ИдПакета = строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	СоставПакета.Вставить("Идентификатор", ИдПакета);
	document.Вставить( "Идентификатор", ИдПакета ); 
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		document.Вставить( "ПользовательскийИдентификатор", СоставПакета.ПользовательскийИдентификатор);
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
		document.Вставить( "Примечание", СоставПакета.Примечание);
	КонецЕсли;
	document.Вставить( "Вложение", attachmentList );
	
	org = Новый Структура; 
	Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
		Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	document.Вставить( "НашаОрганизация", org );
	
	kontr = Новый Структура; 
	Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН ); 
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
			СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
			СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
			СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
		КонецЕсли;
		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
		КонецЕсли;
		Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
			СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
		Подразделение = Новый Структура;
		Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
		kontr.Вставить( "Подразделение", Подразделение );
	КонецЕсли;	
	Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
		Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
			kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
		КонецЕсли;
		Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
			kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
		КонецЕсли;
	КонецЕсли;
	document.Вставить( "Контрагент", kontr );
	
	Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
		otv = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Ответственный Цикл
			otv.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Ответственный", otv ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
		podrazdel = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Подразделение Цикл
			podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Подразделение", podrazdel ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
		regl = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Регламент Цикл
			regl.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Регламент", regl ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
		osnovania = Новый Массив;
		Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
			osn = Новый Структура;
			doc = Новый Структура;
			Для Каждого Элемент Из ДокОсн Цикл
				doc.Вставить( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			osn.Вставить( "Документ", doc );
			osnovania.Добавить(osn);
		КонецЦикла;
		document.Вставить( "ДокументОснование", osnovania ); 				
	КонецЕсли;
	Возврат document;
КонецФункции
&НаКлиенте
функция сбисФайлСКлиентаВBASE64(ПолноеИмяФайла) экспорт
	# Если НЕ ВебКлиент Тогда
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	Возврат сбисФайлНаСервереВBASE64(ДвоичныеДанные);
	# Иначе
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла,""));
	ПомещенныеФайлы = Новый Массив;
	Попытка
		ПоместитьФайлы(ПомещаемыеФайлы,ПомещенныеФайлы,,Ложь, УникальныйИдентификатор);
		Возврат сбисФайлНаСервереВBASE64(ПомещенныеФайлы, Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	# КонецЕсли
	Возврат "";
КонецФункции
//&НаСервереБезКонтекста
функция сбисФайлНаСервереВBASE64(Данные, ЭтоВебКлиент = Ложь) экспорт
	Если ЭтоВебКлиент Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные[0].Хранение);
	Иначе
		ДвоичныеДанные = Данные;
	КонецЕсли;
	Возврат Base64Строка(ДвоичныеДанные);
КонецФункции
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(Стр);
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз-1));
		Стр = Сред(Стр,Поз+ДлинаРазделителя);
	КонецЦикла;
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	// Если более часа не проверяли статусы, то выводим красное предупреждение	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) или ТекущаяДата()-СтруктураНастроек.ДатКнцЧтенияСтатусов > 3600 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
	// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
	// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), ГлавноеОкно.КаталогНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция сбисСообщитьОбОшибке(Кэш, Error) Экспорт
	Если Лев(Error,1) = "{" Тогда
		Ошибка = Кэш.РаботаСJSON.сбисПрочитатьJSON(Error);
		ТекстОшибки = Ошибка.error.message + " ("+Ошибка.error.details+")";
	ИначеЕсли Лев(Error,35) = "callBLObject(): Метод бизнес логики" и Найти(Error,"вернул ошибку")>0 Тогда
		ErrorJson = Сред(Error, Найти(Error,"{"));
		ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);
		Ошибка = Кэш.РаботаСJSON.сбисПрочитатьJSON(ErrorJson);
		Попытка
			ТекстОшибки = Ошибка.message + " ("+Ошибка.details+")";
		Исключение
			ТекстОшибки = Error;
		КонецПопытки;
	ИначеЕсли Найти(Error,"{""jsonrpc"":") >0 Тогда
		ErrorJson = Сред(Error, Найти(Error,"{""jsonrpc"":"));
		ErrorJson = Лев(ErrorJson, СтрДлина(ErrorJson)-1);
		Ошибка = Кэш.РаботаСJSON.сбисПрочитатьJSON(ErrorJson);
		Попытка
			ТекстОшибки = Ошибка.message + " ("+Ошибка.details+")";
		Исключение
			ТекстОшибки = Error;
		КонецПопытки;
	Иначе
		ТекстОшибки = Error;	
	КонецЕсли;
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Сообщить(ТекстОшибки);
	Иначе
		фрм =ЭтотОбъект.ПолучитьФорму("ФормаОшибка");
		фрм.ТекстОшибки = ТекстОшибки;
		фрм.ИнформацияОбОшибке = "";
		фрм.ОткрытьМодально(60);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ДобавитьОшибкуВРезультатОтправки(Кэш, Error, Элемент)
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	Если Лев(Error,1) = "{" Тогда
		Ошибка = Кэш.РаботаСJSON.сбисПрочитатьJSON(Error);
		ТекстОшибки = Ошибка.error.message;
		ОписаниеРасширенное = Ошибка.error.details;
	Иначе
		ТекстОшибки = Error;
		ОписаниеРасширенное = Error;
	КонецЕсли;
	
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		СписокДокументов1С = Новый СписокЗначений;
		СписокДокументов1С.Добавить(Элемент.ОсновнойДокумент1С,ОписаниеРасширенное);
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, СписокДокументов1С);
	Иначе
		ЭлементСоответствия.Добавить(Элемент.ОсновнойДокумент1С,ОписаниеРасширенное);
	КонецЕсли;
КонецФункции