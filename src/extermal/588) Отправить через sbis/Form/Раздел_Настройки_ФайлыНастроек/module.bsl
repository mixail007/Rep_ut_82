перем Кэш Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
//------------------------------------------------------
Функция ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра)
	// Функция проверяет значение параметра, вычисляемого с помощью функции	
	ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
	ПозицияТочки = Найти(ЗначениеПараметра, ".");
	Если  Найти(ЗначениеПараметра, ";") > 0 Тогда
		//В строке на вычисление не может быть ";"
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	//Если ПозицияТочки <> 0 Тогда
	//	ИмяМодуля = Лев(ЗначениеПараметра, ПозицияТочки - 1);
	//	Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) = Неопределено Тогда
	//		//модуль не общий
	//		Возврат Истина;
	//	Иначе
	//		Возврат Ложь;
	//	КонецЕсли;	
	//Иначе
	//	//Это функция обработки
	//	Возврат Ложь;
	//КонецЕсли;
КонецФункции	

&НаКлиенте
Функция УстановитьНастройки(ини, КаталогНастроек) Экспорт
	// Функция возвращает массив установленных файлов настроек	
	ТаблицаФайлов = ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек);	
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		УстановитьСтандартныеНастройки(КаталогНастроек);	//устанавливаем файлы из обработки
		ТаблицаФайлов = ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек);
	КонецЕсли;
	Возврат ТаблицаФайлов;
	
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруКонфигурации() Экспорт
	// Функция возвращает массив доступных файлов настроек для текущей конфигурации 	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Для Каждого СтрокаСтруткур из ГлавноеОкно.Кэш.Конфигурация Цикл
		Если СтрокаСтруткур.Значение.НазываниеКонфигурации = ГлавноеОкно.Конфигурация Тогда
			Возврат СтрокаСтруткур.Значение.СтруктураКонфигурации;			
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	
Процедура ОбновитьИниФайлы(Каталог, ПредВерсия) Экспорт
	// Процедура обновляет установленные файлы настроек при запуске новой версии обработки	
	МассивУстановленныхТиповыхИниФайлов = НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	МассивУстановленныхИниФайлов = НайтиФайлы(Каталог,"ВО8*.xml");
	Если МассивУстановленныхТиповыхИниФайлов.Количество()>0 тогда
		АрхивСоздан=Ложь;
		ВремКаталог = КаталогВременныхФайлов();
		Если Прав(ВремКаталог,1)<>"\" Тогда
			ВремКаталог = ВремКаталог+"\";
		КонецЕсли;
		ВремКаталог = ВремКаталог+"_82_ini_tmp\";
		
		сбисРаспаковатьНастройки();
		
		//Если ТабУстИниФайлы.Найти(Истина,"Автообновление")<>Неопределено Тогда
		СоздатьКаталог(Каталог+"Архив");
		ЗаписьZIP =  Новый ЗаписьZipФайла(Каталог+"Архив\"+Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""")+".zip");
		АрхивСоздан = Истина;
		//КонецЕсли;
		
		Для Каждого Строка Из МассивУстановленныхИниФайлов Цикл
			//Если Строка.Автообновление Тогда
			ЗаписьZIP.Добавить(Каталог+Строка.Имя);
			//КонецЕсли;	
		КонецЦикла;
		
		Если АрхивСоздан Тогда
			ЗаписьZIP.Записать();
		КонецЕсли;
		
		Для Каждого Строка Из МассивУстановленныхТиповыхИниФайлов Цикл
			Попытка
				КопироватьФайл(ВремКаталог+Строка.Имя,Каталог+Строка.Имя);
			Исключение
			КонецПопытки;
		КонецЦикла;
		// Если в предыдущей версии не было файла настроек конфигурации, то добавляем его (берем с тем же префиксом, как у установленных файлов)
		ФайлКонфигурации = НайтиФайлы(Каталог,"ВО8*Конфигурация.sbis3.xml");
		Префикс = НайтиПрефиксВИмениФайла(Строка.Имя);
		Если ФайлКонфигурации.Количество()=0 тогда
			Попытка
				КопироватьФайл(ВремКаталог+Префикс+"_Конфигурация.sbis3.xml",Каталог+Префикс+"_Конфигурация.sbis3.xml");
			Исключение
			КонецПопытки;
		КонецЕсли;
		// если предыдущая версия меньше 19-ой, то пытаемся установить настройку для номенклатуры
		Если ЭтоНоваяВерсия("2.0.19", ПредВерсия) Тогда
			ФайлыНастроекНоменклатуры = НайтиФайлы(ВремКаталог,Префикс+"_Номенклатура.sbis3.xml");
			Если ФайлыНастроекНоменклатуры.Количество()>0 тогда
				Попытка
					КопироватьФайл(ВремКаталог+Префикс+"_Номенклатура.sbis3.xml",Каталог+Префикс+"_Номенклатура.sbis3.xml");
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	
КонецПроцедуры
Функция ЭтоНоваяВерсия(знач НоваяВерсия, знач СтараяВерсия)
	// Функция проверяет, является ли текущая версия обработки или SDK новой по отношению к предыдущей запущенной	
	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КолвоТочекВНовойВерсии = СтрЧислоВхождений(НоваяВерсия, ".");
	КолвоТочекВСтаройВерсии = СтрЧислоВхождений(СтараяВерсия, ".");
	КолвоТочек = Макс(КолвоТочекВНовойВерсии,КолвоТочекВСтаройВерсии);
	Для сч=1 По КолвоТочек+1 Цикл
		ПрефиксНовый = ?(Найти(НоваяВерсия, ".")=0,Число(НоваяВерсия),Число(Лев(НоваяВерсия, Найти(НоваяВерсия, ".")-1)));
		ПрефиксСтарый = ?(Найти(СтараяВерсия, ".")=0,Число(СтараяВерсия),Число(Лев(СтараяВерсия, Найти(СтараяВерсия, ".")-1)));
		Если ПрефиксНовый>ПрефиксСтарый Тогда
			Возврат Истина;
		КонецЕсли;
		НоваяВерсия = ?(Найти(НоваяВерсия, ".")=0,"0",Сред(НоваяВерсия,Найти(НоваяВерсия, ".")+1));
		СтараяВерсия = ?(Найти(СтараяВерсия, ".")=0,"0",Сред(СтараяВерсия,Найти(СтараяВерсия, ".")+1));	
	КонецЦикла;
	Возврат Ложь;
КонецФункции
Функция сбисРаспаковатьНастройки()Экспорт
	// Функция сохраняет файлы настроек из обработки на диск	
	ВремКаталог = КаталогВременныхФайлов();
	Если Прав(ВремКаталог,1)<>"\" Тогда
		ВремКаталог = ВремКаталог+"\";
	КонецЕсли;
	ВремКаталог = ВремКаталог+"_82_ini_tmp\";
	УдалитьФайлы(ВремКаталог, "*");
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ИмяФайла2 = ПолучитьИмяВременногоФайла();
	сбисПолучитьМакет("Настройки").Записать(ИмяФайла);
	ФайлАрхива = Новый ЧтениеZIPФайла(ИмяФайла); 
	ФайлАрхива.ИзвлечьВсе(ВремКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
	ФайлАрхива.Закрыть(); 
	УдалитьФайлы(ИмяФайла);
	Возврат ВремКаталог;
КонецФункции	
//&НаСервереБезКонтекста
Функция ПроверитьКаталогНастроек(КаталогНастроекНазвание) Экспорт
	// Функция проверяет заполненность и существование каталога настроек	
	Попытка
		Если КаталогНастроекНазвание="" Тогда//устанавливаем каталог по умолчанию
			КаталогНастроекНазвание = Лев(КаталогВременныхФайлов(),3)+"Sbis1C\";
		КонецЕсли;
		СоздатьКаталог(КаталогНастроекНазвание);
		КаталогНастроек = Новый Файл(КаталогНастроекНазвание);
		Если Не КаталогНастроек.Существует() Тогда
			Возврат "";
		иначе
			Возврат КаталогНастроекНазвание;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки
КонецФункции
//&НаСервереБезКонтекста
Функция СформироватьСписокДоступныхНастроек(Каталог) Экспорт	
	// Функция полный список доступных настроек
	// Каждый элемент списка - массив файлов настроек для определенной конфигурации
	СписокПрефиксов = Новый Массив();
	СписокФайлов = НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	СписокТиповНастроек = Новый СписокЗначений;
	
	Для Каждого ИниФайл из СписокФайлов Цикл
		Префикс = НайтиПрефиксВИмениФайла(ИниФайл.Имя); // Берет все до первого подчеркивания
		Если  СписокПрефиксов.Найти(Префикс) = Неопределено Тогда
			СписокПрефиксов.Добавить(Префикс);
			МаскаФайлов  = Префикс+"_*.sbis3.xml";
			МассивФайлов = НайтиФайлы(Каталог,МаскаФайлов);
			
			МассивСтруктурФайлов = Новый Массив();
			Для Каждого Файл из МассивФайлов Цикл
				НоваяСтрока = Новый Структура();
				НоваяСтрока.Вставить("Имя", Файл.Имя);
				НоваяСтрока.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
				НоваяСтрока.Вставить("ПолноеИмя", Файл.ПолноеИмя);
				НоваяСтрока.Вставить("Путь", Файл.Путь);
				НоваяСтрока.Вставить("Расширение", Файл.Расширение);
				МассивСтруктурФайлов.Добавить(НоваяСтрока);
			КонецЦикла;	
			
			СписокТиповНастроек.Добавить(МассивСтруктурФайлов,Префикс);
			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокТиповНастроек;
	
КонецФункции
//&НаСервереБезКонтекста
Функция НайтиПрефиксВИмениФайла(Знач Текст)Экспорт
	// Функция возвращает префикс из имени файла настроек	
	Префикс = Лев(Текст,Найти(Текст,"_")-1);
	Возврат Префикс;	
КонецФункции	
//&НаСервереБезКонтекста
Функция ОпределитьТипНастроекПоПрефиксу(Префикс)
	// Функция определяет тип настройки по префиксу файла настроек	
	Если Префикс="ВО82БУХ2" Тогда
		Возврат "Бухгалтерия предприятия, редакция 2.0";
	ИначеЕсли Префикс = "ВО82БУХ1" Тогда	
		Возврат "Бухгалтерия предприятия, редакция 1.6";
	ИначеЕсли Префикс = "ВО82УПП" Тогда	
		Возврат "Управление производственным предприятием, редакция 1.3";	
	ИначеЕсли Префикс = "ВО82УТ10" Или Префикс = "ВО82УТ" Тогда	
		Возврат "Управление торговлей, редакция 10.3";
	ИначеЕсли Префикс = "ВО82КА" Тогда	
		Возврат "Комплексная автоматизация, редакция 1.1";
	ИначеЕсли Префикс = "ВО82КА2" Тогда	
		Возврат "Комплексная автоматизация, редакция 2.0";
	ИначеЕсли Префикс = "ВО82УТ11" Тогда	
		Возврат "Управление торговлей, редакция 11";
	ИначеЕсли Префикс = "ВО82УТ112" Тогда 
		Возврат "Управление торговлей, редакция 11.2 (не обновляется)";
	ИначеЕсли Префикс = "ВО82УТ11-2" Тогда 
		Возврат "Управление торговлей, редакция 11.2";
	ИначеЕсли Префикс = "ВО82БУХ3" Тогда
		Возврат "Бухгалтерия предприятия, редакция 3.0";
	ИначеЕсли Лев(Префикс,8) = "ВО82БУХ3" Тогда
		Возврат "Бухгалтерия предприятия, редакция 3.0, версия "+СтрЗаменить(Сред(Префикс,8),"-",".")+" и выше";
	ИначеЕсли Префикс = "ВО82БГУ" Тогда
		Возврат "Бухгалтерия государственного учреждения, редакция 1.0";
	ИначеЕсли Префикс = "ВО82БГУ2" Тогда 
		Возврат "Бухгалтерия государственного учреждения, редакция 2.0";
	ИначеЕсли Префикс = "ВО82БСХП3" Тогда 
		Возврат "Бухгалтерия сельскохозяйственного предприятия, редакция 3.0";
	ИначеЕсли Префикс = "ВО82УНФ15" Тогда 
		Возврат "Управление небольшой фирмой, редакция 1.5 (не обновляется)";
	ИначеЕсли Префикс = "ВО82УНФ1-5" Тогда 
		Возврат "Управление небольшой фирмой, редакция 1.5";
	Иначе 
		Возврат Префикс;
	КонецЕсли;	
КонецФункции

Функция ТабДоступныеИниФайлыОбновить(Конфигурация, ФормаТабУстФайлы)Экспорт
	// Функция возвращает массив доступных файлов настроек для выбранной конфигурации	
	МассивДоступныхИниФайлов = Новый Массив();
	
	Если Конфигурация<>Неопределено Тогда
		
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ТабУстФайлы = ФормаТабУстФайлы.Выгрузить(, "ИмяФайла");
		Иначе
			ТабУстФайлы = ФормаТабУстФайлы;
		КонецЕсли;	
		СтруктураФайлов = Конфигурация;
		Для Каждого Элемент Из СтруктураФайлов Цикл		
			НайденнаяСтрока = ТабУстФайлы.Найти(Элемент.Имя, "ИмяФайла"); 
			ИмяФайлаБезРасширения = Лев(Элемент.Имя,Найти(Элемент.Имя,".")-1);
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Имяфайла", Элемент.Имя);
			НоваяСтрока.Вставить("ИмяФайлаБезРасширения", ИмяФайлаБезРасширения);
			НоваяСтрока.Вставить("ПолноеИмя", Элемент.ПолноеИмя);
			Если НайденнаяСтрока<>Неопределено Тогда
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Истина);
			Иначе
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
			КонецЕсли;	
			МассивДоступныхИниФайлов.Добавить(НоваяСтрока);	
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивДоступныхИниФайлов;	
	
КонецФункции
&НаКлиенте
Функция УстановитьНастройкуНажатие() Экспорт
	// Функция устанавливает выбранные файлы настроек и обновляет таблицы установленных и доступных файлов настроек	
	УстановленныеИниФайлы = Ложь;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	
	Если ГлавноеОкно.КаталогНастроек <> "" И ГлавноеОкно.КаталогНастроек <> "\" Тогда
		ТабДоступныеИниФайлы = ГлавноеОкно.ТабДоступныеИниФайлы;
		СбисУстановитьФайлыНастроек();
		УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ГлавноеОкно.КаталогНастроек);
		ГлавноеОкно.Кэш.Ини = СформироватьСтруктуруИни(УстановленныеИниФайлы);
		ГлавноеОкно.ОбновитьПоляФормы(Новый Структура("ТабУстановленныеИниФайлы", УстановленныеИниФайлы));
		ТабУстИниФайлы = ГлавноеОкно.ТабУстановленныеИниФайлы;
		ДоступныеИниФайлы = ТабДоступныеИниФайлыОбновить(ПолучитьСтруктуруКонфигурации(), ТабУстИниФайлы);
		ГлавноеОкно.ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
	Иначе
		Предупреждение("Укажите каталог настроек");
	КонецЕсли;
	Возврат УстановленныеИниФайлы;	
КонецФункции	
&НаКлиенте
Процедура сбисУстановитьФайлыНастроек()
	// Процедура формирует структуру файлов для установки и вызывает серверную процедуру установки настроек (т.к. в управляемых формах настройки лежат на сервере) 	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	
	ТабДоступФайлы = ГлавноеОкно.ТабДоступныеИниФайлы;	
	КаталогНастроек = ГлавноеОкно.КаталогНастроек;
	
	НоваяСтрока = Новый Структура();
	НоваяСтрока.Вставить("Фл", Истина);
	УстановитьВсе = ТабДоступФайлы.НайтиСтроки(НоваяСтрока).Количество() = 0;
	МассивФайловДляУстановки = Новый Массив;
	Для Каждого строка из ТабДоступФайлы Цикл
		Если Строка.Фл или УстановитьВсе Тогда
			Если Строка.ЕстьФайлНастроек Тогда //если файл уже есть в каталоге 
				
				Режим = РежимДиалогаВопрос.ДаНет;
				Текст = "Заменить файл """+Строка.ИмяФайла+ """ ?";
				Ответ = Вопрос(Текст, Режим);
				Если Ответ = КодВозвратаДиалога.ДА Тогда
					СтруктураДанныхДляУстановки = Новый Структура;
					СтруктураДанныхДляУстановки.Вставить("ИмяФайлаИсточника", Строка.ПолноеИмя);
					СтруктураДанныхДляУстановки.Вставить("ИмяФайлаПриемника", КаталогНастроек+Строка.ИмяФайла);
					СтруктураДанныхДляУстановки.Вставить("ДобавлятьВАрхив", Истина);
					МассивФайловДляУстановки.Добавить(СтруктураДанныхДляУстановки);
				КонецЕсли; 
			Иначе
				СтруктураДанныхДляУстановки = Новый Структура;
				СтруктураДанныхДляУстановки.Вставить("ИмяФайлаИсточника", Строка.ПолноеИмя);
				СтруктураДанныхДляУстановки.Вставить("ИмяФайлаПриемника", КаталогНастроек+Строка.ИмяФайла);
				СтруктураДанныхДляУстановки.Вставить("ДобавлятьВАрхив", Ложь);
				МассивФайловДляУстановки.Добавить(СтруктураДанныхДляУстановки);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек);
	
КонецПроцедуры
Процедура УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек)
	// Процедура сохраняет текущие файлы настроек в архив и устанавливает новые настройки	
	ДатаВремяАрхива = Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""");
	СоздатьКаталог(КаталогНастроек+"Архив");
	ЗаписьZIP =  Новый ЗаписьZipФайла(КаталогНастроек+"Архив\"+ДатаВремяАрхива+".zip");
	Для Каждого Элемент Из МассивФайловДляУстановки Цикл
		Если Элемент.ДобавлятьВАрхив Тогда
			ЗаписьZIP.Добавить(Элемент.ИмяФайлаПриемника);	
		КонецЕсли;
		КопироватьФайл(Элемент.ИмяФайлаИсточника,Элемент.ИмяФайлаПриемника);
	КонецЦикла;
	ЗаписьZIP.Записать();
КонецПроцедуры
//группа функций и процедур для проверки ини файлов
Процедура ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, СлужебнаяСтруктура)
	// Функция заполняет таблицу с метаданными, по которым есть ошибки в файлах настроек 	
	Если ТипЗнч(СлужебнаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого сбисФайл из СлужебнаяСтруктура Цикл		
		Если ТипЗнч(сбисФайл.Значение) = Тип("Структура") и (сбисФайл.Значение.Свойство("Ошибка")) Тогда
			Строка = сбисФайл.Значение.Ошибка;
			Если ТипЗнч(Строка.ИнформацияПоОбъекту) = Тип("Структура") Тогда
				Для каждого СтрокаИнфПоОб из Строка.ИнформацияПоОбъекту Цикл
					Если ТаблицаМетаданных.Найти(СтрокаИнфПоОб.Значение,"Объект")=Неопределено Тогда
						НоваяСтрока = ТаблицаМетаданных.Добавить();
						НоваяСтрока.Объект     = СтрокаИнфПоОб.Значение;
						НоваяСтрока.ИмяОбъекта = СтрокаИнфПоОб.Ключ;
						НоваяСтрока.ТипОбъекта = "";
					КонецЕсли;
				КонецЦикла;	
			Иначе	
				Если ТаблицаМетаданных.Найти(Строка.ИнформацияПоОбъекту,"Объект")=Неопределено и Строка.ИнформацияПоОбъекту<>Неопределено Тогда
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект     = Строка.ИнформацияПоОбъекту;
					НоваяСтрока.ИмяОбъекта = Строка.ИмяОбъекта;
					НоваяСтрока.ТипОбъекта = "";
				КонецЕсли;
			КонецЕсли;					
		Иначе
			ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, сбисФайл.Значение);
		КонецЕсли;	
	КонецЦикла;	 
	
КонецПроцедуры	
Функция ВывестиПротоколПроверкиИниФайлов(Ини, КаталогНастроек, Версия, КонфигурацияФайловНастроек) Экспорт
	// Функция формирует табличный документ протокола проверки файлов настроек	
	КоличествоРекурсийДляВыводаТаблиц = 1;
	
	МакетПротоколПроверки = сбисПолучитьМакет("ПротоколПроверкиИниФайлов");
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Объект");
	ТаблицаМетаданных.Колонки.Добавить("ИмяОбъекта");
	ТаблицаМетаданных.Колонки.Добавить("Синоним");
	ТаблицаМетаданных.Колонки.Добавить("ТипОбъекта");
	
	Таб = Новый ТабличныйДокумент;
	ОбластьЗаголовок = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокПротокола");
	ОбластьЗаголовок.Параметры.КаталогНастроек = КаталогНастроек;
	ОбластьЗаголовок.Параметры.ДатаВремя = формат(ТекущаяДата());
	ОбластьЗаголовок.Параметры.Конфигурация = Метаданные.Синоним;
	ОбластьЗаголовок.Параметры.Версия = Версия;
	ОбластьЗаголовок.Параметры.КонфигурацияФайловНастроек = КонфигурацияФайловНастроек;
	Таб.Вывести(ОбластьЗаголовок);	
	
	ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, Ини);
	
	СписокКопия = ТаблицаМетаданных.Скопировать();
	Для Каждого Элемент Из СписокКопия Цикл
		Если ТипЗнч(Элемент.Объект) = Тип("Структура") Тогда
			Для Каждого ЭлементаСтр из Элемент Цикл
				ТаблицаМетаданных = сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ЭлементаСтр.Значение,КоличествоРекурсийДляВыводаТаблиц);
			КонецЦикла;	
		Иначе	
			ТаблицаМетаданных = сбисСформироватьСписокМетаданных(ТаблицаМетаданных,Элемент.Объект,КоличествоРекурсийДляВыводаТаблиц);
		КонецЕсли;	
	КонецЦикла;	
	
	ВывестиОшибки(МакетПротоколПроверки,Таб, Ини);
	
	Если ТаблицаМетаданных.Количество() <> 0 Тогда
		ОбластьСправочнаяИнформация = МакетПротоколПроверки.ПолучитьОбласть("СправочнаяИнформация");
		Таб.Вывести(ОбластьСправочнаяИнформация);
	КонецЕсли;	
	
	сбисВывестиИнформациюПоМетаданным(ТаблицаМетаданных,МакетПротоколПроверки,Таб);
	сбисВывестиИнформацияПоОрганизациям(МакетПротоколПроверки,Таб);
	сбисВывестиСправочнуюИнформацию(МакетПротоколПроверки,Таб);
	
	Таб.ТолькоПросмотр        = Истина;
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Таб.АвтоМасштаб           = Истина;
	
	Возврат Таб;
	
КонецФункции
Процедура ВывестиОшибку(МакетПротоколПроверки, Таб, Узлы, ини)
	// Процедура выводит строку в таблице ошибок в протоколе проверки	
	Если ТипЗнч(Узлы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Узлы.Свойство("Ошибка") Тогда
		ОбластьСтрокаОшибки                             = МакетПротоколПроверки.ПолучитьОбласть("ОписаниеОшибки");
		ТекстОшибки 									= СтрЗаменить(Узлы.Ошибка.ТекстОшибки," |","");
		ОбластьСтрокаОшибки.Параметры.ТекстОшибки       = ТекстОшибки;
		ОбластьСтрокаОшибки.Параметры.ПолныйПуть 		= ?(Узлы.Ошибка.ПолныйПуть<>Неопределено,"("+Узлы.Ошибка.ПолныйПуть+")","");
		ОбластьСтрокаОшибки.Параметры.Таблица           = ?(Узлы.Ошибка.ИмяОбъекта<>Неопределено,"("+Узлы.Ошибка.ИмяОбъекта+")","");
		ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = Узлы.Ошибка.ЗначениеПараметра;
		Если Узлы.Ошибка.ИмяПараметра<>"" Тогда
			ОбластьСтрокаОшибки.Параметры.ИмяПараметра      = Узлы.Ошибка.ИмяПараметра;
			Если ини.Свойство(Узлы.Ошибка.ИмяПараметра) и ини[Узлы.Ошибка.ИмяПараметра].Свойство("Комментарий") Тогда
				ТекстКоммментария 								= ?(ЗначениеЗаполнено(ини[Узлы.Ошибка.ИмяПараметра]["Комментарий"]),ини[Узлы.Ошибка.ИмяПараметра]["Комментарий"],"");
				ОбластьСтрокаОшибки.Параметры.ОписаниеПараметра = ?(СокрЛП(ТекстКоммментария)<>"","("+ТекстКоммментария+")","");
				ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = ?(НРег(Узлы.Ошибка.ИмяПараметра)="текстзапроса","Смотрите значение параметра ""ТекстЗапроса"" в ini файле.",Узлы.Ошибка.ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
		Таб.Вывести(ОбластьСтрокаОшибки);
	КонецЕсли;
	
	Если Узлы.Количество() <> 0 Тогда
		Для каждого Узел из Узлы Цикл
			ВывестиОшибку(МакетПротоколПроверки, Таб, Узел.Значение, ини);
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиОшибки(МакетПротоколПроверки,Таб, Ини)
	// Процедура выводит строки в таблице ошибок в протоколе проверки файлов настроек	
	Для Каждого сбисФайл из ини Цикл
		
		Если сбисФайл.Значение.сбисОшибки.Количество() <> 0 Тогда //Есть системные ошибки
			ОбластьЗаголовокТаблицы = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьЗаголовокТаблицы.Параметры.ИмяФайла = ини[сбисФайл.Ключ].сбисИмяФайла;
			Таб.Вывести(ОбластьЗаголовокТаблицы);
			Для каждого Ошибка из сбисФайл.Значение.сбисОшибки Цикл
				ОбластьСтрокаОшибки                             = МакетПротоколПроверки.ПолучитьОбласть("ОписаниеОшибки");
				ТекстОшибки 									= СтрЗаменить(Ошибка.ТекстОшибки," |","");
				ОбластьСтрокаОшибки.Параметры.ТекстОшибки       = ТекстОшибки;
				ОбластьСтрокаОшибки.Параметры.ПолныйПуть 		= Ошибка.ПолныйПуть;
				ОбластьСтрокаОшибки.Параметры.ИмяПараметра 		= Ошибка.ИмяПараметра;
				ОбластьСтрокаОшибки.Параметры.ОписаниеПараметра = "";
				ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = Ошибка.ЗначениеПараметра;
				Таб.Вывести(ОбластьСтрокаОшибки);
			КонецЦикла;	
		Иначе // если системных ошибок нет выводим ошибки ини
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(сбисФайл.Значение) Тогда
				ОбластьЗаголовокТаблицы = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокТаблицы");
				ОбластьЗаголовокТаблицы.Параметры.ИмяФайла = ини[сбисФайл.Ключ].сбисИмяФайла;
				Таб.Вывести(ОбластьЗаголовокТаблицы);
			КонецЕсли;		
			ВывестиОшибку(МакетПротоколПроверки, Таб, сбисФайл.Значение, ини);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры
Функция сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных,МакетПротоколПроверки,Таб, Идентификатор)
	// Функция выводит информацию о реквизитах тех метаданных, в которых были обнаружены ошибки
	Если Идентификатор="" Тогда
		Возврат Ложь;
	КонецЕсли;
	Док = Метаданные.НайтиПоПолномуИмени(Идентификатор);
	
	Попытка
		Для Каждого Реквизит Из Док.Реквизиты Цикл //перебор реквизитов объекта
			Если Найти(Реквизит.Тип,",")=0 Тогда
				ОбъектМ = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
				Если ОбъектМ<>Неопределено Тогда
					НайденнаяСтрока = ТаблицаМетаданных.Найти(ОбъектМ.ПолноеИмя(),"Объект");
				Иначе
					НайденнаяСтрока = Неопределено;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = ТаблицаМетаданных.Найти(Реквизит.Синоним, "Объект");
			КонецЕсли;	
			ДопИнф = ?(НайденнаяСтрока<>Неопределено,НайденнаяСтрока.ИмяОбъекта,"");
			ДопИнф = ?(ДопИнф<>"","("+ДопИнф+")","");
			Если ДопИнф<>"" Тогда
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита1");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;
				СтрокаРеквизита.Параметры.СинонимТаблица = ДопИнф;
				Таб.Вывести(СтрокаРеквизита);
			Иначе
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;
				Таб.Вывести(СтрокаРеквизита);
			КонецЕсли;	
		КонецЦикла;
		Попытка
			Для Каждого Реквизит Из Док.СтандартныеРеквизиты Цикл //перебор реквизитов объекта
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;
		Исключение
		КонецПопытки;
		Попытка
			Если Док.ТабличныеЧасти.Количество()>0 Тогда
				ГруппаРеквизитов = МакетПротоколПроверки.ПолучитьОбласть("ГруппаРеквизитов");
				ГруппаРеквизитов.Параметры.ГруппаРеквизитов     = "Табличные части";
				Таб.Вывести(ГруппаРеквизитов);
			КонецЕсли;
			Для Каждого Реквизит Из Док.ТабличныеЧасти Цикл //перебор реквизитов объекта
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;
		Исключение
		КонецПопытки;
		
	Исключение
		Попытка
			Для Каждого ЗначенияЭлементаМетаданных Из Док Цикл //перебор доступных объектов из списка объектов
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = ЗначенияЭлементаМетаданных.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = ЗначенияЭлементаМетаданных.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;	
		Исключение
			Попытка
				Если Найти(Нрег(Док.ПолноеИмя()),"перечисление")>0 Тогда
					Для Каждого ЗначениеПеречисления из Док.Объект.ЗначенияПеречисления Цикл
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.ИмяОбъекта + "."+ЗначениеПеречисления.Имя);
						СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(ЗначениеПеречисления.Синоним);				
						Таб.Вывести(СтрокаРеквизита);	
					КонецЦикла;	
				Иначе	
					СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
					СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.ИмяОбъекта);
					СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(Док.Синоним);				
					Таб.Вывести(СтрокаРеквизита);
				КонецЕсли;
			Исключение
				//Для Каждого Строка из Строка.Объект Цикл
				//Док = Метаданные.НайтиПоПолномуИмени(Строка.Значение);
				Если Найти(Док.ПолноеИмя(),"ТабличнаяЧасть")>0 Тогда
					НайденнаяСтрока = ТаблицаМетаданных.Найти(Док.ПолноеИмя(),"Объект");
					ДопИнф = ?(НайденнаяСтрока<>Неопределено,НайденнаяСтрока.ИмяОбъекта,"");
					ДопИнф = ?(ДопИнф<>"","("+ДопИнф+")","");
					Если ДопИнф<>"" Тогда
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита1");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Док.Имя;
						СтрокаРеквизита.Параметры.СинонимРеквизита = Док.Синоним;
						СтрокаРеквизита.Параметры.СинонимТаблица = ДопИнф;
						Таб.Вывести(СтрокаРеквизита);
					Иначе
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Док.Имя;
						СтрокаРеквизита.Параметры.СинонимРеквизита = Док.Синоним;
						Таб.Вывести(СтрокаРеквизита);
					КонецЕсли;	
				Иначе	
					СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
					СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.Имя);
					СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(Док.Синоним);				
					Таб.Вывести(СтрокаРеквизита);
				КонецЕсли;
				
				//КонецЦикла;
			КонецПопытки
			
		КонецПопытки;	
	КонецПопытки;	
	
КонецФункции	
Процедура сбисВывестиИнформациюПоМетаданным(ТаблицаМетаданных,МакетПротоколПроверки,Таб)
	// Процедура перебирает таблицу метаданных, в которых были обнаружены ошибки и выводит информацию о реквизитах этих метаданных в табличный документ	
	Если ТаблицаМетаданных.Количество()<>0 Тогда
		
		Для Каждого Строка Из ТаблицаМетаданных Цикл
			ОбластьЗаголовокМетаданных                              = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокМетаданных");
			ОбластьЗаголовокМетаданных.Параметры.ИмяМетаданных      = Строка.ИмяОбъекта;
			Таб.Вывести(ОбластьЗаголовокМетаданных);
			
			Если ТипЗнч(Строка.Объект) = Тип("Структура") Тогда
				Для каждого СтрокаСтр из Строка.Объект Цикл
					сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных, МакетПротоколПроверки, Таб, СтрокаСтр.Значение);
				КонецЦикла;
			Иначе
				сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных, МакетПротоколПроверки, Таб, Строка.Объект);
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	
Функция сбисСформироватьСписокМетаданных(ТаблицаМетаданных,Идентификатор=Неопределено,УровеньВложенности) Экспорт
	// Функция формирует таблицу с реквизитами метаданных для вывода в протоколе проверки	
	Если УровеньВложенности <> 0 Тогда
		Попытка
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Идентификатор);
			Для Каждого Реквизит из ОбъектМетаданных.Реквизиты Цикл
				Если Найти(Реквизит.Тип,",")=0 Тогда //тип один
					ОбъектМ = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
					Если ОбъектМ<>Неопределено и ТаблицаМетаданных.Найти(ОбъектМ.Полноеимя(),"Объект")=Неопределено Тогда
						Попытка                     
							НоваяСтрока = ТаблицаМетаданных.Добавить();
							НоваяСтрока.Объект=ОбъектМ.ПолноеИмя();
							НоваяСтрока.ИмяОбъекта=ОбъектМ.Имя;
							НоваяСтрока.Синоним = ОбъектМ.Синоним;
							НоваяСтрока.ТипОбъекта = "";
							сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ОбъектМ.ПолноеИмя(),УровеньВложенности-1);
						Исключение
							Ошибка = описаниеОшибки();
							Сообщить(Ошибка);
							Сообщить(строка(ОбъектМ));
						КонецПопытки;
					Иначе	
					КонецЕсли;	                
				Иначе	 //несколько типов
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект=Реквизит.ПолноеИмя();
					НоваяСтрока.ИмяОбъекта = Реквизит.Имя;
					НоваяСтрока.ТипОбъекта = Реквизит.Синоним;
					ТекстДляВывода= "Составной реквизит.";
					НоваяСтрока.Синоним = ТекстДляВывода;
				КонецЕсли;	 
			КонецЦикла;
			
		Исключение
			Попытка
				//если табличные части
				Для Каждого ТабличнаяЧасть из ОбъектМетаданных Цикл
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект=ТабличнаяЧасть;
					НоваяСтрока.ИмяОбъекта=ТабличнаяЧасть.ПолноеИмя();
					НоваяСтрока.Синоним = ТабличнаяЧасть.Синоним;
					НоваяСтрока.ТипОбъекта = ТабличнаяЧасть;
					сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ТабличнаяЧасть,УровеньВложенности-1);
				КонецЦикла;	
			Исключение
			КонецПопытки;	
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ТаблицаМетаданных;	
КОнецФункции
Процедура сбисВывестиИнформацияПоОрганизациям(МакетПротоколПроверки,Таб)
	// Выводит информацию по организации в протокол проверки	
	Попытка
		Выборка = Справочники.Организации.Выбрать();
		ОбластьШапкаОрганизации = МакетПротоколПроверки.ПолучитьОбласть("ШапкаОрганизации");
		Таб.Вывести(ОбластьШапкаОрганизации);	
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления=Ложь Тогда
				ОбластьСтрокаОрганизации = МакетПротоколПроверки.ПолучитьОбласть("СтрокаОрганизации");
				ОбластьСтрокаОрганизации.Параметры.НаименованиеОрганизации = ?(ЗначениеЗаполнено(Выборка.НаименованиеПолное),Выборка.НаименованиеПолное,Выборка.Наименование);
				ОбластьСтрокаОрганизации.Параметры.ИНН_КПП = Выборка.ИНН+" / "+Выборка.КПП;
				Попытка
					//ОбластьСтрокаОрганизации.Параметры.Телефон  = сбисПолучитьТелефон(Выборка.Ссылка,"Организации");
				Исключение	
				КонецПопытки;	
				Таб.Вывести(ОбластьСтрокаОрганизации);	
			КонецЕсли;
			
		КонецЦикла;	
	Исключение	
	КонецПопытки	
КонецПроцедуры	
Процедура сбисВывестиСправочнуюИнформацию(МакетПротоколПроверки,Таб)
	// Выводит справочную информацию в протокол проверки	
	ОбластьДокументация = МакетПротоколПроверки.ПолучитьОбласть("СсылкаДокументация");
	ОбластьДокументация.Параметры.ТекстСообщения     = "Для исправления ошибок передайте протокол проверки в отдел внедрения ЭДО через менеджера компании Тензор, с которым Вы работаете.";
	//ОбластьДокументация.Параметры.ТекстСообщения     = "Для самостоятельного исправления ошибок воспользуйтесь инструкцией: "; 
	//ОбластьДокументация.Параметры.СсылкаДокументация = "http://help.sbis.ru/exchange/integration/1С/v8/ini/"+Символы.ПС;
	//ОбластьДокументация.Параметры.ТекстСообщения2="либо передайте протокол проверки в отдел внедрения ЭДО через менеджера компании Тензор, с которым Вы работаете.";
	Таб.Вывести(ОбластьДокументация);	
	
	
	
КонецПроцедуры	
//&НаСервереБезКонтекста
Функция ИмяИниИзИмениФайла(ИмяФайла)
	// возвращает имя настройки без префикса и расширения	
	НачалоИмениИни = Найти(ИмяФайла,"_");
	ТипДок = ?(НачалоИмениИни>0,сред(ИмяФайла,НачалоИмениИни+1),ИмяФайла);
	НачалоРасширения = Найти(ТипДок,".");
	Возврат ?(НачалоРасширения>0,Лев(ТипДок, НачалоРасширения-1),ТипДок);
КонецФункции
&НаКлиенте
Функция сбисПроверитьНастройки(Кэш,УстановленныеИниФайлы,КаталогНастроек,СказатьЧтоВсеХорошо=Ложь) Экспорт
	// Проверяет структуру установленных файлов настроек	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	НужноПроверять = Ложь;
	// определяем необходимость проверки файлов настроек
	СтруктураПараметров = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(КаталогНастроек);
	Для Каждого ИниФайл Из УстановленныеИниФайлы Цикл
		ИмяСвойства = СтрЗаменить(СтрЗаменить(ИниФайл.Имяфайла,".","_"),"-","_");
		ИмяСвойстваКлиент = СтрЗаменить(ИмяСвойства,"_sbis3","");
		ДатаФайла = ?(ЗначениеЗаполнено(ИниФайл.ДатаФайла), ИниФайл.ДатаФайла, Ложь);
		ДатаФайлаКлиент = ?(ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент), ИниФайл.ДатаФайлаКлиент, Ложь);
		ПараметрыДатаФайла = ?(СтруктураПараметров.Свойство(ИмяСвойства) и ИмяСвойства<>ИмяСвойстваКлиент, СтруктураПараметров[ИмяСвойства], Ложь); // если есть только пользовательский файл, то присваиваем Ложь
		ПараметрыДатаФайлаКлиент = ?(СтруктураПараметров.Свойство(ИмяСвойстваКлиент), СтруктураПараметров[ИмяСвойстваКлиент], Ложь);
		
		Если (ДатаФайла = ПараметрыДатаФайла и ДатаФайлаКлиент = ПараметрыДатаФайлаКлиент) Тогда
			Продолжить;
		Иначе
			НужноПроверять = Истина;
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайла) Тогда
				СтруктураПараметров.Вставить(ИмяСвойства,ИниФайл.ДатаФайла);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент) Тогда
				СтруктураПараметров.Вставить(ИмяСвойстваКлиент,ИниФайл.ДатаФайлаКлиент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НужноПроверять или СказатьЧтоВсеХорошо = Истина Тогда    // если были изменения в настройках или нажали кнопку Проверить настройки
		ГлавноеОкно.сбисПоказатьСостояние("Проверка файлов настроек", ГлавноеОкно);
		УстановленныеИниФайлы = ПроверитьИниФайлы(Кэш,УстановленныеИниФайлы,КаталогНастроек, СказатьЧтоВсеХорошо);
		Если Кэш.ИниВПорядке Тогда // если нет ошибок, то сохраняем параметры проверенных файлов
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураПараметров,КаталогНастроек);
		КонецЕсли;
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	Иначе // если не проверяем, то считаем, что с ини все хорошо
		Кэш.ИниВПорядке = Истина;
	КонецЕсли;
	Возврат УстановленныеИниФайлы;
КонецФункции
&НаКлиенте
Функция ПроверитьИниФайлы(Кэш,СписокИниФайловДляПроверки,Каталог,СказатьЧтоВсеХорошо=Ложь) Экспорт
	// Проверяет структуру установленных файлов настроек	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Ошибки = Ложь;
	// файл настроек Конфигурация обязательно должен быть, иначе выдаем ошибку
	Если Не Кэш.Ини.Свойство("Конфигурация") Тогда
		Кэш.Ини.Вставить("Конфигурация", Новый Структура("сбисОшибки,сбисИмяФайла", Новый Массив, "Конфигурация.sbis3.xml"));
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", "Конфигурация");
		НоваяОшибка.Вставить("ТекстОшибки", "Не установлен файл настроек конфигурации. ");
		НоваяОшибка.Вставить("ИнформацияПоОбъекту", "");
		НоваяОшибка.Вставить("ИмяОбъекта", "");
		НоваяОшибка.Вставить("ПолныйПуть", "");
		Кэш.Ини.Конфигурация.сбисОшибки.Добавить(НоваяОшибка);
		Ошибки = Истина;
	КонецЕсли;
	Для Каждого ИниФайл Из СписокИниФайловДляПроверки Цикл
		//		СтруктураДокумента = ПолучитьСтруктуруДокументаИзОбщейСтруктуры(ини, ИмяИниИзИмениФайла(ИниФайл.ИмяФайла));
		ИмяБезРасширения = Сред(ИниФайл.ИмяФайла,1,Найти(ИниФайл.ИмяФайла,".")-1);
		ПроверитьСтруктуруИни(Кэш.ини[ИмяИниИзИмениФайла(ИниФайл.ИмяФайла)],ИмяБезРасширения, Кэш.ПараметрыФильтра);
		ИмяИни = ИмяИниИзИмениФайла(ИниФайл.ИмяФайла);
		Если Кэш.ини[ИмяИни].сбисОшибки.Количество() <> 0 Тогда //Если есть системные ошибки
			Ошибки = Истина;
		Иначе //если нет системных ошибок, проверяем ини
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(Кэш.ини[ИмяИни]) Тогда
				сбисСформироватьИниФайлКлиента(ИмяБезРасширения,Кэш.ини, ГлавноеОкно.КаталогНастроек, ИмяИниИзИмениФайла(ИниФайл.ИмяФайла));
				ИниФайл.ЕстьИзменения = Истина;
				Ошибки = Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Если Ошибки Тогда
		Префикс = НайтиПрефиксВИмениФайла(СписокИниФайловДляПроверки[0].Имяфайла);
		КонфигурацияФайловНастроек = ОпределитьТипНастроекПоПрефиксу(Префикс);
		Таб = ВывестиПротоколПроверкиИниФайлов(Кэш.Ини, Каталог, ГлавноеОкно.Версия, КонфигурацияФайловНастроек);
		Таб.Показать("Протокол проверки ini файлов");	
		Кэш.ИниВПорядке = Ложь;
	Иначе
		Кэш.ИниВПорядке = Истина;
		Если СписокИниФайловДляПроверки.Количество()>0 и СказатьЧтоВсеХорошо Тогда
			Предупреждение("Ошибок в ini файлах не обнаружено.");
		КонецЕсли;	
	КонецЕсли;
	СписокУстановленныхИниФайлов = ПолучитьМассивУстановленныхИниФайлов(Каталог);
	Возврат СписокУстановленныхИниФайлов;
КонецФункции
Функция ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел)
	// Рекурсивно проверяет, есть ли в узле структуры ошибка, чтобы понимать какую структуру узлов надо создавать в пользовательском файле настроек	
	ЕстьОшибка = Ложь;
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда
		Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				Возврат Истина;
			КонецЕсли;	
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ЕстьОшибка;
	
КонецФункции

Процедура ЗаписатьУзелСтруктурыВXML(КлючУзла, Узел, ЗаписьXML)//Узел - узел структуры
	// Записывает структуру в xml при формировании пользовательского файла настроек	
	Для каждого ЭлементУзла из Узел Цикл		
		Если Найти(ЭлементУзла.Ключ, "сбис") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда
			Если ЭлементУзла.Значение.Свойство("Значение") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Записываем в атрибуты все, кроме поля Значение, а Значение кладем в содержимое узла
					Если ПодУзел.Ключ <> "Значение" Тогда
						Если ПодУзел.Ключ = "Отбор" Тогда
							Для Каждого ЭлементОтбора Из ПодУзел.Значение Цикл
								ЗаписьXML.ЗаписатьАтрибут("Отбор_"+ЭлементОтбора.Ключ, ЭлементОтбора.Значение);	
							КонецЦикла;
						Иначе							
							ЗаписьXML.ЗаписатьАтрибут(ПодУзел.Ключ, ПодУзел.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе	
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Выбираем подузлы
					//Если ПодУзел.Значение.Количество() <> 0 Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					ЗаписьXML.ЗаписатьАтрибут("Имя", ПодУзел.Ключ);
					ЗаписатьУзелСтруктурыВXML(ПодУзел.Ключ, ПодУзел.Значение, ЗаписьXML);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					//КонецЕсли;
				КонецЦикла;								
			КонецЕсли;	
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
			ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента)
	// Формирует структуру пользовательского файла настроек с ошибочными узлами
	НоваяСтруктураИниФайлаКлиента = СтруктураИниФайлаКлиента;
	Для каждого Узел из СлужебнаяСтруктура Цикл
		
		Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел.Значение) = Ложь Тогда //Если ошибок в узле нет, продолжаем обход узлов
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтруктураИниФайлаКлиента) = Тип("Структура") Тогда
			Если Узел.Значение.Свойство("Ошибка") Тогда //Если в узле служебной структуры есть ошибка добавляем в новую структуру клиента
				//НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура("Значение", Узел.Значение.Ошибка.ЗначениеПараметра));
				НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура());
				Для Каждого Элемент Из Узел.Значение Цикл
					Если Элемент.Ключ<>"Ошибка" Тогда
						НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить(Элемент.Ключ, Элемент.Значение);	
					КонецЕсли;
				КонецЦикла;
				//НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить("Значение", Узел.Значение.Ошибка.ЗначениеПараметра);
				Продолжить;
			Иначе //Если ошибки нет, и нет такого узла - создаем узел в новой структуре клиента
				Если НоваяСтруктураИниФайлаКлиента.Свойство(Узел.Ключ) = Ложь Тогда
					НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Узел.Значение) = Тип("Структура") Тогда	
			НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(Узел.Значение, НоваяСтруктураИниФайлаКлиента[Узел.Ключ]));
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат НоваяСтруктураИниФайлаКлиента;
	
КонецФункции	

Процедура сбисСформироватьИниФайлКлиента(Знач ИмяИниФайлаКлиента,Знач ини, КаталогНастроек, ИмяИни) Экспорт
	// Формирует клиентский файл настроек	
	СтруктураИниФайла = Ини[ИмяИни];
	СлужебнаяСтруктура = Ини[ИмяИни];
	Если Прав(КаталогНастроек,1)<>"\" и КаталогНастроек<>"" Тогда
		КаталогНастроек = КаталогНастроек+"\";
	КонецЕсли;	
	
	ИмяИниФайлаКлиента = ИмяИниФайлаКлиента+".xml";
	НайденныеИниФайлыКлиента = НайтиФайлы(КаталогНастроек+ИмяИниФайлаКлиента);
	
	//если ини файл настроек клиента сущесвует, то получаем его структуру
	//иначе это новая, пустая структура
	НоваяСтруктура = Новый Структура;
	НоваяСтруктура.Вставить("СлужебнаяСтруктура", Новый Структура);
	Если НайденныеИниФайлыКлиента.Количество()<>0 Тогда
		СтруктураИниФайлаКлиента = ПолучитьСтруктуруИниФайла(НоваяСтруктура, КаталогНастроек+ИмяИниФайлаКлиента);
	Иначе	
		СтруктураИниФайлаКлиента = Новый Структура
	КонецЕсли;	
	
	Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(СлужебнаяСтруктура) Тогда //Если ошибок нет, то файл не переписываем
		
		//Добавляем ошибки из СлужебнойСтруктуры и СтруктуруИниФайлаКлиента
		СтруктураИниФайлаКлиентаСОшибками = ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(КаталогНастроек + ИмяИниФайлаКлиента, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ини");
		ЗаписатьУзелСтруктурыВXML("", СтруктураИниФайлаКлиентаСОшибками, ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
	КонецЕсли;	
	
КонецПроцедуры
//Процедура сбисДобавитьПараметрВИниФайлКлиента(ИмяПараметра,ЗначениеПараметра,ИмяИниФайла) Экспорт
//	СтрокаДляЗаписи = ИмяПараметра+" = "+ЗначениеПараметра+" //";
//	
//	ТекстФайла = Новый("ТекстовыйДокумент");
//	
//	//если нет ини файла для чтения-создаем его
//	Попытка
//		ТекстФайла.Прочитать(ИмяИниФайла);
//	Исключение
//		ТекстФайла.Записать(ИмяИниФайла);
//		ТекстФайла.Прочитать(ИмяИниФайла);
//	КонецПопытки;
//	
//	ТекстФайла.ВставитьСтроку(1,СтрокаДляЗаписи);
//	ТекстФайла.Записать(ИмяИниФайла);
//	
//КонецПроцедуры
Процедура сбисСкопироватьСтруктуру(СтруктураКуда,СтруктураОткуда)  Экспорт
	// Копирует СтруктураОткуда в СтруктураКуда	
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
Процедура ПроверитьСтруктуруИни(СтруктураИниФайла,ИмяБезРасширения,ПараметрыФильтра)Экспорт
	// Проверяет структуру файла настроек	
	Для Каждого Стр Из СтруктураИниФайла Цикл
		//не проверяем элементы структуры в имени которых есть слово "сбис"
		//так как это служебные элементы, которые мы добавили вручную
		Если Найти(Стр.Ключ,"сбис")>0 Тогда
			Продолжить
		КонецЕсли;
		ГрязнаяИни = Новый Структура;
		сбисСкопироватьСтруктуру(ГрязнаяИни, СтруктураИниФайла);
		ПроверитьЗначениеПараметра(Стр.Ключ,Стр.Значение,ГрязнаяИни, СтруктураИниФайла[Стр.Ключ],ПараметрыФильтра);
	КонецЦикла;
КонецПроцедуры
Функция ПроверитьЗначениеПараметра(знач ИмяПараметра,знач ЗначениеПараметра,СтруктураИниФайла, СлужебнаяСтруктура,ПараметрыФильтра) Экспорт
	// Проверяет значение параметра в файле настроек	
	Если ЗначениеПараметра.Свойство("Значение") Тогда
		ЗначениеПараметра = ЗначениеПараметра.Значение;	
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Структура")  Тогда
		Для Каждого ЭлементМассива Из ЗначениеПараметра Цикл
			сбисСкопироватьСтруктуру(СтруктураИниФайла,ЭлементМассива.Значение);
			Для Каждого Элемент Из ЭлементМассива.Значение Цикл //перебираем структуру - там не может быть запроса и массива
				ПроверитьЗначениеПараметра(Элемент.Ключ,Элемент.Значение,СтруктураИниФайла, СлужебнаяСтруктура[ЭлементМассива.Ключ][Элемент.Ключ],ПараметрыФильтра);
			КонецЦикла;	
		КонецЦикла;
		Возврат Истина;
	ИначеЕсли ИмяПараметра="ЗапросСпискаДокументов" Тогда
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = Сред(ЗначениеПараметра,2,СтрДлина(ЗначениеПараметра)-2);
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата());
				Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());	
				Запрос.УстановитьПараметр("ЗначениеДатаКонЗаполнено", Ложь);	
				Запрос.УстановитьПараметр("Контрагент", "");
				Запрос.УстановитьПараметр("КонтрагентПодключен", "");
				Запрос.УстановитьПараметр("ТекущаяОрганизация", "");
				Запрос.УстановитьПараметр("ЗначениеТекущаяОрганизацияЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ЗначениеКонтрагентЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ТекущийДокумент", "");
				Запрос.УстановитьПараметр("ЗначениеТекущийДокументЗаполнено", Ложь);
				Запрос.УстановитьПараметр("Ответственный", "");
				Для каждого ПараметрФильтра из ПараметрыФильтра Цикл
					Запрос.УстановитьПараметр(ПараметрФильтра.Ключ, "");
					Запрос.УстановитьПараметр("Значение" + ПараметрФильтра.Ключ + "Заполнено", Ложь);
				КонецЦикла;	
				Запрос.Выполнить().Выбрать();
			КонецЕсли;
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			ТекстОшибки = "Неправильный текст запроса."+Символы.ПС+"("+ТекстОшибки.Причина.Описание+")";
			сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураИниФайла[ИмяПараметра].Свойство("Вычислить") и Найти(СтруктураИниФайла[ИмяПараметра].Вычислить,"{") = 1 Тогда
		Если ПроверитьЗначениеПараметраНаВычисление(СтруктураИниФайла[ИмяПараметра].Вычислить) Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,СтруктураИниФайла[ИмяПараметра].Вычислить,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Найти(ЗначениеПараметра,"{") > 0  Тогда	
		//значение параметра вычисляется функцией, проверим что за функция
		Если ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра) и Найти(ЗначениеПараметра,"{") = 1 Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли Найти(ЗначениеПараметра,"[")=1 Тогда
		СтрОбъекта=Сред(ЗначениеПараметра,2,Найти(ЗначениеПараметра,"]")-2);
		Попытка
			ЗначениеОбъекта=СтруктураИниФайла[СтрОбъекта];
			Если ТипЗнч(ЗначениеПараметра)= Тип("Строка") или ТипЗнч(ЗначениеПараметра)= Тип("Булево") или ТипЗнч(ЗначениеПараметра)= Тип("Число") Тогда
				Объект1С = ПроверитьЗначениеПараметра(СтрОбъекта,ЗначениеОбъекта,СтруктураИниФайла, СлужебнаяСтруктура,ПараметрыФильтра);
			Иначе	  
				Объект1С =  ЗначениеОбъекта;
			КонецЕсли;	
		Исключение
			ТекстОшибки = "Значение параметра ссылается на несуществующий параметр: """+СтрОбъекта+"""."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "1. Возможно в слове """+СтрОбъекта+""" опечатка. Исправьте её."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "2. Определите значение параметра """+СтрОбъекта+""" в виде: "+СтрОбъекта+" = ЗначениеПараметра // комментарий";
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
		КонецПопытки;
		
		Если Объект1С<>Ложь Тогда
			ИмяРек=ЗначениеПараметра;
			Пока Найти(ИмяРек,".")>0 Цикл 
				ИмяРек=прав(ИмяРек,СтрДлина(ИмяРек)-Найти(ИмяРек,"."));
			КонецЦикла;	
			Попытка
				Объект1СПолноеИмя = Объект1С.ПолноеИмя();
			Исключение
				Объект1СПолноеИмя = "";
			КонецПопытки;
			Попытка
				Объект1СТип = Объект1С.Тип;
			Исключение
				Объект1СТип = "";
			КонецПопытки;
			Попытка
				Если (Найти(Объект1СПолноеИмя,"ТабличнаяЧасть")>0 или Найти(Объект1СПолноеИмя,"TabularSection")>0) Тогда
					Попытка
						Попытка
							Возврат Объект1С.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат Объект1С.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								ТипСравочника=ВернутьТипСправочника(Объект1СТип);
								Попытка
									Возврат ТипСравочника.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ТипСравочника.СтандартныеРеквизиты[ИмяРек];									
									Исключение	
										Возврат ТипСравочника.ТабличныеЧасти[ИмяРек];								
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;	
						КонецПопытки;
					Исключение
						Попытка
							Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
								ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
								Попытка
									Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
									Исключение
										Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
									КонецПопытки;
								КонецПопытки;
							ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
								//составной тип реквизита, невозможно проверить
								Возврат Ложь;
							КонецЕсли;	
						Исключение
							//ЗначениеПараметраТабличнойЧасти = СтруктураИниФайла[СтрОбъекта];
							//ИмяПараметраДокумента           = Сред(ЗначениеПараметраТабличнойЧасти,2,Найти(ЗначениеПараметраТабличнойЧасти,"]")-2);
							//ЗначениеПараметраДокумента      = СтруктураИниФайла[ИмяПараметраДокумента];
							//не найден реквизит табличной части
							Возврат     сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Объект1СТип<> "" Тогда 
					Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
						ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
						Попытка
							Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								Попытка 
									Возврат ОбъектМетаданных.ТабличныеЧасти[ИмяРек];									
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.Ресурсы[ИмяРек];									
									Исключение
										Попытка 
											Возврат ОбъектМетаданных.Измерения[ИмяРек];									
										Исключение
											Попытка 
												Возврат ОбъектМетаданных.ЗначенияПеречисления[ИмяРек];									
											Исключение
												Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
											КонецПопытки;
										КонецПопытки;		
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
						//составной тип реквизита, невозможно проверить
						Возврат Ложь;
					КонецЕсли;	
				ИначеЕсли (Метаданные.Документы.Найти(Объект1С.Имя)<> Неопределено) и (Лев(нрег(Объект1СПолноеИмя),8)="документ" или Лев(нрег(Объект1СПолноеИмя),8)="document") Тогда
					Попытка
						Возврат Объект1С.Реквизиты[ИмяРек];
					Исключение
						Попытка
							Попытка
								Возврат Метаданные.Документы[Объект1С.Имя].Реквизиты[имяРек];
							Исключение
								Попытка
									Возврат Метаданные.Документы[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
								Исключение
									Возврат Метаданные.Документы[Объект1С.Имя].ТабличныеЧасти[имяРек];
								КонецПопытки;
							КонецПопытки;	
						Исключение
							Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
						КонецПопытки;	
					КонецПопытки;
				ИначеЕсли Метаданные.Справочники.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),10)="справочник" или Лев(нрег(Объект1СПолноеИмя),7)="catalog") Тогда
					Попытка
						Возврат Метаданные.Справочники[Объект1С.Имя].Реквизиты[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.Справочники[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.Справочники[Объект1С.Имя].ТабличныеЧасти[имяРек];
							Исключение
								Попытка 
									Если Справочники[Объект1С.Имя][имяРек].Предопределенный Тогда
										Возврат Метаданные.Справочники[Объект1С.Имя];
									Иначе
										ВызватьИсключение("");
									КонецЕсли;
								Исключение
									Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;	
				ИначеЕсли Метаданные.РегистрыСведений.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),15)="регистрсведений" или Лев(нрег(Объект1СПолноеИмя),19)="informationregister") Тогда
					Попытка
						Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Ресурсы[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Измерения[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.РегистрыСведений[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
							Исключение
								Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Метаданные.Перечисления.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),12)="перечисление" или Лев(нрег(Объект1СПолноеИмя),11)="enumeration") Тогда
					Попытка
						Возврат Метаданные.Перечисления[Объект1С.Имя].ЗначенияПеречисления[имяРек];
					Исключение
						Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено значение перечисления "+Объект1С.Имя+" """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
					КонецПопытки;
				ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
					Возврат Ложь;
				Иначе
					Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Составной тип реквизита: """+Объект1С.Имя+""". Невозможно проверить правильность параметра.",СтруктураИниФайла, СлужебнаяСтруктура);
				КонецЕсли;
			Исключение
				Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1С.Имя+"."+ИмяРек);
			КонецПопытки;
		иначе
			Возврат ложь;
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Константа")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-10);
		Если Метаданные.Константы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдена константа: """+ЗначениеПараметра+"""",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Константы,"Константы");
		КонецЕсли;
		Возврат Метаданные.Константы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Перечисление")=1 Тогда	
		ИмяРек=сред(ЗначениеПараметра,14);
		Если Метаданные.Перечисления.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено перечисление: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"Перечисления");
		КонецЕсли;	
		Возврат Метаданные.Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Справочник")=1 или Найти(ЗначениеПараметра,"ЗаписьСправочника")=1 Тогда	
		
		ИмяРек = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, ".")+1);
		Если Метаданные.Справочники.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден справочник: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Справочники,"Справочники");
		Иначе
			Возврат Метаданные.Справочники[ИмяРек];
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Документ")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-9);
		Если Метаданные.Документы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реестр документа: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Документы,"Документы");
		КонецЕсли;
		Возврат Метаданные.Документы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"РегистрыСведений")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-17);
		Если Метаданные.РегистрыСведений.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден регистр сведений: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"РегистрыСведений");
		КонецЕсли;	
		Возврат Метаданные.РегистрыСведений[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"'")>0 Тогда	
		//значение параметра заключено в ' '
		Возврат Ложь;
	ИначеЕсли Найти(ЗначениеПараметра,"^")=1 Тогда	
		//значение параметра  - формула
		Возврат Ложь;
	ИначеЕсли нрег(ЗначениеПараметра)="истина" Или нрег(ЗначениеПараметра)="ложь" Тогда
		Возврат Ложь;
		//Иначе 
		//	Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Неподдерживаемый тип параметра."+Символы.ПС+"Если это строка - заключите её в одинарные кавычки.",СтруктураИниФайла, СлужебнаяСтруктура);
	КонецЕсли;
	
КонецФункции
Функция ВернутьТипСправочника(ОбъектТип)Экспорт 
	// Получает объект метаданных справочника по типу	
	ид=0;
	Пока 1=1 Цикл
		Попытка
			ОбъектСпр=Метаданные.Справочники[ид];
		Исключение
			прервать;
		КонецПопытки;	
		темпСтр=ОбъектСпр.ПолноеИмя();
		ИмяРек=прав(темпСтр,СтрДлина(темпСтр)-11);
		ТипСтр=Тип("СправочникСсылка."+ИмяРек);
		Если ОбъектТип.СодержитТип(ТипСтр) Тогда
			возврат ОбъектСпр;
		КонецЕсли;	
		ид=ид+1;
	КонецЦикла;
	возврат Неопределено;
КонецФункции
Функция ВернутьТипДокумента(ОбъектТип)Экспорт 
	// Получает объект метаданных документа по типу	
	ид=0;
	Пока 1=1 Цикл
		Попытка
			ОбъектСпр=Метаданные.Документы[ид];
		Исключение
			прервать;
		КонецПопытки;	
		темпСтр=ОбъектСпр.ПолноеИмя();
		ИмяРек=прав(темпСтр,СтрДлина(темпСтр)-9);
		ТипСтр=Тип("ДокументСсылка."+ИмяРек);
		Если ОбъектТип.СодержитТип(ТипСтр) Тогда
			возврат ОбъектСпр;
		КонецЕсли;	
		ид=ид+1;
	КонецЦикла;
	возврат Неопределено;
КонецФункции
//&НаСервереБезКонтекста
Функция сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура, Объект=Неопределено,ИмяОбъекта=Неопределено,ПолныйПуть = Неопределено)
	// добавляет в структуру файла настроек структуру с информацией об ошибке	
	
	НоваяСтруктура = Новый Структура();
	НоваяСтруктура.Вставить("ИмяПараметра", ИмяПараметра);
	НоваяСтруктура.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	НоваяСтруктура.Вставить("ТекстОшибки", ТекстОшибки);
	НоваяСтруктура.Вставить("ИмяОбъекта", ИмяОбъекта);
	НоваяСтруктура.Вставить("ПолныйПуть", ПолныйПуть);
	
	Если Объект = Неопределено Тогда
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда				
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект.ПолноеИмя());
	ИначеЕсли ТипЗнч(Объект) = Тип("КоллекцияОбъектовМетаданных") Тогда	
		СтруктураОбъект = Новый Структура();		
		Для СчМет = 0 по Объект.Количество()-1 Цикл
			СтруктураОбъект.Вставить(Объект.Получить(СчМет).Имя, Объект.Получить(СчМет).ПолноеИмя());
		КонецЦикла;	
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", СтруктураОбъект);
	КонецЕсли;
	
	
	//СтруктураИниФайла.сбисОшибки.Добавить(НоваяСтруктура);
	Если не СтруктураИниФайла[ИмяПараметра].Свойство("Ошибка") Тогда
		СлужебнаяСтруктура.Вставить("Ошибка", НоваяСтруктура);		
		СтруктураИниФайла[ИмяПараметра].Вставить("Ошибка", НоваяСтруктура);		
	КонецЕсли;
	Возврат Ложь;
КонецФункции	
//&НаСервереБезКонтекста
Функция ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ЗначениеПредставление = "Значение")Экспорт
	// Получает список доступных настроек для текущей конфигурации	
	ПрефиксТекущейКонфигурации = "";
	Если Найти(нрег(Метаданные.Имя), "бухгалтерияпредприятия")>0 Тогда
		ПрефиксТекущейКонфигурации = "БУХ";
	ИначеЕсли (Найти(нрег(Метаданные.Имя), "производственным")>0 или Найти(нрег(Метаданные.Имя), "управлениестроительной")>0) Тогда
		ПрефиксТекущейКонфигурации = "УПП";
	ИначеЕсли Найти(нрег(Метаданные.Имя), "торговлей")>0 Тогда
		ПрефиксТекущейКонфигурации = "УТ";
	ИначеЕсли Найти(нрег(Метаданные.Имя), "комплекснаяавтоматизация")>0 Тогда
		ПрефиксТекущейКонфигурации = "КА";
	ИначеЕсли Найти(нрег(Метаданные.Имя), "бухгалтериягосударственногоучреждения")>0 Тогда
		ПрефиксТекущейКонфигурации = "БГУ";
	ИначеЕсли Найти(нрег(Метаданные.Имя), "бухгалтериясельскохозяйственногопредприятия")>0 Тогда
		ПрефиксТекущейКонфигурации = "БСХП";
	ИначеЕсли Найти(нрег(Метаданные.Имя), "управлениенебольшойфирмой")>0 Тогда
		ПрефиксТекущейКонфигурации = "УНФ";
	КонецЕсли;
	ПрефиксТекущейКонфигурации = "ВО82"+ПрефиксТекущейКонфигурации;
	
	СписокТиповНастроекДляКонфигурации = Новый СписокЗначений;
	ДлинаПрефикса = СтрДлина(ПрефиксТекущейКонфигурации);
	Для Каждого Элемент Из СписокТиповНастроек Цикл
		Если Лев(Элемент.Представление,ДлинаПрефикса) = ПрефиксТекущейКонфигурации Тогда
			СписокТиповНастроекДляКонфигурации.Добавить(Элемент.Представление, сбисЗаполнитьПрефиксНулями(Сред(Элемент.Представление,ДлинаПрефикса+1)));
		КонецЕсли;
	КонецЦикла;
	
	
	ВерсияТекущейКонфигурации = СтрЗаменить(Метаданные.Версия,".","-"); 
	СписокТиповНастроекДляКонфигурации.Добавить("Текущая конфигурация", сбисЗаполнитьПрефиксНулями(ВерсияТекущейКонфигурации)+"-");
	СписокТиповНастроекДляКонфигурации.СортироватьПоПредставлению();
	ИндексТекущий = СписокТиповНастроекДляКонфигурации.Индекс(СписокТиповНастроекДляКонфигурации.НайтиПоЗначению("Текущая конфигурация"));
	Если ИндексТекущий>0 Тогда
		ПодходящаяВерсия = СписокТиповНастроекДляКонфигурации[ИндексТекущий-1].Значение;	
		Для Каждого Элемент Из СписокТиповНастроек Цикл
			Если Элемент.Представление = ПодходящаяВерсия Тогда
				Возврат Элемент[ЗначениеПредставление];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокТиповНастроек[6][ЗначениеПредставление];
КонецФункции
//&НаСервереБезКонтекста
Функция сбисЗаполнитьПрефиксНулями(Префикс) Экспорт
	ФорматныйПрефикс = "";
	ВерсииКонф = РазбитьСтрокуВМассив(Префикс,"-");
	Для Каждого Элемент Из ВерсииКонф Цикл
		ФорматныйПрефикс = ФорматныйПрефикс+сбисЗаполнитьСлева(Элемент, "0", 4)+"-";	
	КонецЦикла;
	ФорматныйПрефикс = Лев(ФорматныйПрефикс, СтрДлина(ФорматныйПрефикс)-1);
	Возврат ФорматныйПрефикс;
КонецФункции
//&НаСервереБезКонтекста
функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции
//&НаСервереБезКонтекста
функция сбисЗаполнитьСлева(ИсходнаяСтрока, Заполнитель, Длина) Экспорт
	// Функция заполняет строку слева указанным заполнителем до указанной длины	
	Результат = ИсходнаяСтрока;
	КолЗаполнителей = Длина-СтрДлина(ИсходнаяСтрока);
	Если КолЗаполнителей>0 Тогда
		Для сч = 1 По КолЗаполнителей Цикл
			Результат = строка(Заполнитель)+строка(Результат);	
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции
&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Каталог) Экспорт
	// Устанавливает настройки из доступных файлов настроек	
	ВремКаталог = сбисРаспаковатьНастройки();
	СписокТиповНастроек = СформироватьСписокДоступныхНастроек(ВремКаталог);
	МассивФайлов = ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек);
	Если МассивФайлов <> Неопределено Тогда
		//Режим = РежимДиалогаВопрос.ДаНет;
		//Текст = "Для работы с данной конфиграцией обработке необходимо сохранить несколько файлов с настройками (60 Кбайт). "+Символы.ПС+Символы.ВК+"Использовать для этих целей текущий каталог ("+ Каталог+ ")?";
		//Ответ = Вопрос(Текст, Режим);
		//Если Ответ = КодВозвратаДиалога.ДА Тогда
		УстановитьСтандартныеНастройкиНаСервере(Каталог, МассивФайлов);
		сбисПолучитьФорму("ФормаГлавноеОкно").КаталогНастроек = ?(Прав(Каталог,1)="\",Каталог,Каталог+"\");
		//Иначе
		//	Предупреждение("Укажите каталог для установки настроек");
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//&НаСервереБезКонтекста
Процедура УстановитьСтандартныеНастройкиНаСервере(Каталог, МассивФайлов) Экспорт
	// Устанавливает настройки из доступных файлов настроек	на сервере
	СоздатьКаталог(Каталог);
	Для Каждого Файл Из МассивФайлов Цикл
		Если Сред(Файл.Имя, Найти(Файл.Имя, ".")+1,1)="0" Тогда    // Файл не нужно ставить по умолчанию
			Продолжить;
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, Каталог+"\"+Файл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//&НаСервереБезКонтекста
Функция ПолучитьМассивУстановленныхИниФайлов(Каталог)Экспорт  //     получаем массив файлов из каталога
	// Получает массив установленных файлов настроек	
	МассивУстановленныхИниФайлов = Новый Массив();
	
	МассивФайловВКаталоге        = НайтиФайлы(Каталог,"ВО8*.xml");
	
	//на тот случай если при установке стандартных файлов изменился каталог настроек
	//Каталог =ПолучитьФорму("ВнешняяОбработка.СБИС.Форма.ФормаГлавноеОкно").КаталогНастроек;
	
	МассивУстановленныхТиповыхИниФайлов = НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	
	СписокУстановленныхИниФайлов   = Новый Соответствие();
	СписокУстановленныхИниФайловБезПрефиксов   = Новый Соответствие();
	СписокУстановленныхТиповыхИниФайлов = Новый СписокЗначений();
	
	Для Каждого ИниФайл Из МассивФайловВКаталоге Цикл
		СписокУстановленныхИниФайлов.Вставить(ИниФайл.Имя,ИниФайл); 
		СписокУстановленныхИниФайловБезПрефиксов.Вставить(Сред(ИниФайл.Имя, Найти(ИниФайл.Имя, "_")+1),ИниФайл);
	КонецЦикла;	
	
	СписокУстановленныхТиповыхИниФайлов.ЗагрузитьЗначения(МассивУстановленныхТиповыхИниФайлов);
	
	//пробегаем по списку установленных типовых ини файлов (.sbis.ini) и в общем списке установленных ини файлов
	//ищем соответствующие ини файлы клиента, затем из общего списка удаляем записи типовых ини файлов и, если нашли, ини файл клиента
	//к концу цикла в общем списке установленных ини файлов останутся неопределенные ини файлы
	Для Каждого ИниФайл Из СписокУстановленныхТиповыхИниФайлов Цикл
		ИмяФайлаНастроекКлиента= СтрЗаменить(ИниФайл.Значение.Имя,".sbis3.xml",".xml");
		ИмяФайлаБезРасширения = Лев(ИниФайл.Значение.Имя,Найти(ИниФайл.Значение.Имя,".")-1);
		ИмяФайлаБезРасширенияБезПрефикса = Сред(ИмяФайлаБезРасширения, Найти(ИмяФайлаБезРасширения, "_")+1);
		НайденыйФайлНастроекКлиента = СписокУстановленныхИниФайловБезПрефиксов.Получить(ИмяФайлаБезРасширенияБезПрефикса+".xml");
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла", ИниФайл.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения", ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("Автообновление", Истина); 
		//НоваяСтрока.Фл = ?(ТекТаблицаУстановленныхИниФайлов.Найти(ИниФайл.Значение.Имя,"ИмяФайла")<>Неопределено,ТекТаблицаУстановленныхИниФайлов.Найти(ИниФайл.Значение.Имя,"ИмяФайла").Фл,Ложь);
		НоваяСтрока.Вставить("ПутьДоИниФайла", ИниФайл.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла", ИниФайл.Значение.ПолучитьВремяИзменения() );
		
		//из общего списка ини файлов удаляем .sbis.ini
		СписокУстановленныхИниФайлов.Удалить(ИниФайл.Значение.Имя);
		
		//если в общем списке нашли ини файл клиента то удаляем его из этого списка
		Если НайденыйФайлНастроекКлиента<>Неопределено Тогда
			НоваяСтрока.Вставить("ЕстьИзменения", Истина);
			НоваяСтрока.Вставить("ДатаФайлаКлиент", НайденыйФайлНастроекКлиента.ПолучитьВремяИзменения() );
			НоваяСтрока.Вставить("ИмяФайлаКлиента", НайденыйФайлНастроекКлиента.Имя );
			СписокУстановленныхИниФайлов.Удалить(НайденыйФайлНастроекКлиента.Имя);
		Иначе	
			НоваяСтрока.Вставить("ЕстьИзменения", Ложь);
			НоваяСтрока.Вставить("ДатаФайлаКлиент", "" );
			НоваяСтрока.Вставить("ИмяФайлаКлиента", "" );
		КонецЕсли;
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока)
	КонецЦикла;	
	
	//в общем списке всех ини файлов останутся не определенные ини файлы
	//добавляем их таблицу отдельными строками
	Для Каждого Элемент из СписокУстановленныхИниФайлов Цикл 
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла", Элемент.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения", Элемент.Значение.ИмяБезРасширения);
		НоваяСтрока.Вставить("Автообновление", Ложь);
		НоваяСтрока.Вставить("ЕстьИзменения", Ложь);
		//НоваяСтрока.Фл = ?(ТекТаблицаУстановленныхИниФайлов.Найти(Элемент.Значение,"ИмяФайла")<>Неопределено,ТекТаблицаУстановленныхИниФайлов.Найти(Элемент.Значение,"ИмяФайла").Фл,Ложь);;
		НоваяСтрока.Вставить("ПутьДоИниФайла", Элемент.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла", "" );
		НоваяСтрока.Вставить("ДатаФайлаКлиент", Элемент.Значение.ПолучитьВремяИзменения() );
		НоваяСтрока.Вставить("ИмяФайлаКлиента", "" );
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат МассивУстановленныхИниФайлов;
	
КонецФункции
Функция СформироватьСтруктуруИни(МассивУстановленныхИниФайлов) Экспорт
	// Формирует структуру установленных файлов настроек	
	Ини = Новый Структура;
	//Ини.Вставить("СлужебнаяСтруктура", Новый Структура);
	Для Каждого ИниФайл Из МассивУстановленныхИниФайлов Цикл
		Если ИниФайл.ЕстьИзменения Тогда
			ИмяБезРасширения = Сред(ИниФайл.ИмяФайла,1,Найти(ИниФайл.ИмяФайла,".")-1);
			ПолучитьСтруктуруИниФайла(ини,ИниФайл.ПутьДоИниФайла+ИниФайл.ИмяФайла);  //получили структуру типового ини файла (.sbis.ini)
			ПолучитьСтруктуруИниФайла(ини,ИниФайл.ПутьДоИниФайла+ИниФайл.ИмяФайлаКлиента); //получили структуру ини файла клиента и заменили его элементами
		Иначе
			ПолучитьСтруктуруИниФайла(ини,ИниФайл.ПутьДоИниФайла+ИниФайл.ИмяФайла);
		КонецЕсли;	
	КонецЦикла;
	Возврат Ини;
КонецФункции	//&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИниФайла(ини,Знач сбисФайл) Экспорт
	// формирует структуру файла настроек	
	ПолноеИмяФайла = сбисФайл;
	
	Текст = Новый("ТекстовыйДокумент");
	Текст.Прочитать(сбисФайл);		
	
	НайденныеФайлы = НайтиФайлы(сбисФайл);
	Для Каждого ИниФайл из НайденныеФайлы Цикл //таким странным способом получаем объект файл, для того чтобы взять от туда имя
		сбисФайл = ИниФайл.Имя;
		Прервать;
	КонецЦикла;	
	ИмяИни = ИмяИниИзИмениФайла(сбисФайл);
	ТаблицаОшибок = Новый Массив();
	Если Не Ини.Свойство(ИмяИни) Тогда
		Ини.Вставить(ИмяИни, Новый Структура);
		//Ини.СлужебнаяСтруктура.Вставить(ИмяИни, Новый Структура);
	КонецЕсли;
	СтруктураИниФайла = Ини[ИмяИни];
	//СлужебнаяСтруктура = Ини[ИмяИни];
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЗаписатьДОМВСтруктуру(ДокументДОМ.ПервыйДочерний.ПервыйДочерний, СтруктураИниФайла,ТаблицаОшибок);	
		ЧтениеXML.Закрыть();
	Исключение
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", сбисФайл);
		НоваяОшибка.Вставить("ТекстОшибки", "Не удалось открыть файл, либо невалидный xml. " + ОписаниеОшибки());
		НоваяОшибка.Вставить("ИнформацияПоОбъекту", "");
		НоваяОшибка.Вставить("ИмяОбъекта", "");
		НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
		ТаблицаОшибок.Добавить(НоваяОшибка);
		
	КонецПопытки;
	
	СтруктураИниФайла.Вставить("сбисОшибки",ТаблицаОшибок);
	СтруктураИниФайла.Вставить("сбисПолноеИмяФайла",ПолноеИмяФайла);
	СтруктураИниФайла.Вставить("сбисИмяФайла",сбисФайл);
	
	Возврат СтруктураИниФайла;
КонецФункции
//&НаСервереБезКонтекста
Процедура ДобавитьПростуюОшибку(ТаблицаОшибок,ИмяПараметра,ТекстОшибки)
	// Формирует структуру ошибки и добавляет ее в таблицу ошибок	
	НоваяОшибка = Новый Структура();
	НоваяОшибка.Вставить("ИмяПараметра",ИмяПараметра);
	НоваяОшибка.Вставить("ЗначениеПараметра","");
	НоваяОшибка.Вставить("ТекстОшибки",ТекстОшибки);
	НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
	НоваяОшибка.Вставить("ИмяОбъекта","");
	НоваяОшибка.Вставить("ПолныйПуть","");
	ТаблицаОшибок.Добавить(НоваяОшибка);
КонецПроцедуры
//&НаСервереБезКонтекста
Процедура ЗаписатьДОМВСтруктуру(Элемент, СтруктураИниФайла,ТаблицаОшибок)
	// формирует структуру из xml	
	Если Элемент.ТипУзла <> ТипУзлаDOM.Комментарий Тогда
		Если Элемент.ПервыйДочерний=Неопределено или ТипЗнч(Элемент.ПервыйДочерний)=Тип("ТекстDOM") Тогда //это простой элемент
			Попытка
				//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Элемент.ТекстовоеСодержимое);
				Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				КонецЕсли;
				СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Значение", Элемент.ТекстовоеСодержимое);
			Исключение
				Попытка
					ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя переменной");
				Исключение
				КонецПопытки;
			КонецПопытки;
			Если Элемент.ТипУзла <> ТипУзлаDOM.Текст Тогда
				Для Каждого Атрибут  Из Элемент.Атрибуты Цикл
					Попытка
						Если Лев(Атрибут.Имя,6)="Отбор_" Тогда
							Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство("Отбор") Тогда
								СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Отбор", Новый Структура);
							КонецЕсли;
							Если ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // в отбор добавляем только атрибуты с заполненными значениями
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Вставить(Сред(Атрибут.Имя, 7),Атрибут.ТекстовоеСодержимое);
							КонецЕсли;
							Если СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Свойство(Сред(Атрибут.Имя, 7)) и НЕ ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // если в стандартном файле значение заполнено, а в пользовательском пустое, удаляем его из отбора
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Удалить(Сред(Атрибут.Имя, 7));
							КонецЕсли;
						Иначе
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя атрибута "+Атрибут.Имя);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		Иначе //это структура
			Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
				Попытка
					//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Новый Структура);
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				Исключение
					ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя раздела:"+СокрЛП(Элемент.ИмяЭлемента));
				КонецПопытки;
			КонецЕсли;
			Имя = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Имя<>Неопределено и Имя.ТекстовоеСодержимое<>"" Тогда
				Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство(Имя.ТекстовоеСодержимое) Тогда
					Попытка
						//СтруктураЭлемента[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя атрибута: "+Имя.ТекстовоеСодержимое+" в разделе:"+СокрЛП(Элемент.ИмяЭлемента));
					КонецПопытки;
				Иначе
					// Чтобы соблюсти порядок узлов, установленный в пользовательской настройке, сначала удаляем существующий узел и заново вставляем
					Если НЕ (Элемент.ПредыдущийСоседний = Неопределено и Элемент.СледующийСоседний = Неопределено) Тогда // делаем только если в пользовательский файл вынесен не один узел. Если вынесен один, значит порядок следования менять не надо.
						Копия = СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое];
						СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Имя.ТекстовоеСодержимое);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Копия);	
					КонецЕсли;
				КонецЕсли;
				ЗаписатьДОМВСтруктуру(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое],ТаблицаОшибок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.СледующийСоседний<>Неопределено Тогда
		ЗаписатьДОМВСтруктуру(Элемент.СледующийСоседний, СтруктураИниФайла,ТаблицаОшибок);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция УдалитьНастройкуНажатие() Экспорт
	// Удаляет выбранные файлы настроек	
	УстановленныеИниФайлы = Ложь;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ТаблУстанИниФайлы = ГлавноеОкно.ТабУстановленныеИниФайлы;
	НоваяСтрока = Новый Структура();
	НоваяСтрока.Вставить("Фл", Истина);
	УдалитьВсе = ТаблУстанИниФайлы.НайтиСтроки(НоваяСтрока).Количество() = 0;
	//НайденнаяСтрока = ТаблУстанИниФайлы.Найти(Истина,"Фл");
	НадоОбновить = Ложь;
	//ТаблИни = ГлавноеОкно.Кэш.ини;
	Для Каждого ИниФайл Из ТаблУстанИниФайлы Цикл
		Если ИниФайл.Фл или УдалитьВсе Тогда
			НадоОбновить = Истина;
			//Для каждого СтрокаИни из ТаблИни Цикл
			//Если СтрокаИни.Значение.сбисИмяФайла = ИниФайл.ИмяФайла Тогда
			УдалитьФайлыНаСервере(ГлавноеОкно.КаталогНастроек, ИниФайл.ИмяФайла);
			Если ИниФайл.ЕстьИзменения Тогда
				ИмяБезРасширения = Сред(ИниФайл.ИмяФайла,1,Найти(ИниФайл.ИмяФайла,".")-1);
				УдалитьФайлыНаСервере(ГлавноеОкно.КаталогНастроек,ИмяБезРасширения+".xml");
			КонецЕсли;						
			//КонецЕсли;	
			//КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	Если НадоОбновить Тогда
		//ТабУстановленныеИниФайлыОбновить();
		//ТабДоступныеИниФайлыОбновить();
		
		УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ГлавноеОкно.КаталогНастроек);
		ГлавноеОкно.Кэш.Ини = СформироватьСтруктуруИни(УстановленныеИниФайлы);
		ГлавноеОкно.ОбновитьПоляФормы(Новый Структура("ТабУстановленныеИниФайлы", УстановленныеИниФайлы));
		ТабУстановленныеИниФайлы = ГлавноеОкно.ТабУстановленныеИниФайлы;
		ДоступныеИниФайлы = ТабДоступныеИниФайлыОбновить(ПолучитьСтруктуруКонфигурации(), ТабУстановленныеИниФайлы);
		ГлавноеОкно.ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
	КонецЕсли;
	Возврат УстановленныеИниФайлы;
КонецФункции
Процедура УдалитьФайлыНаСервере(Путь, Маска) Экспорт
	// Удаляет выбранные файлы настроек на сервере	
	УдалитьФайлы(Путь, Маска);
КонецПроцедуры
Процедура ТабУстановленныеИниФайлыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	// Процедура открывает выбранный файл настроек		
	Если Колонка.Имя = "Фл" Тогда
		Возврат;
	Иначе
		Если Колонка.Имя = "ИмяФайла" Тогда
			Попытка
				ЗапуститьПриложение(Кэш.ГлавноеОкно.КаталогНастроек+ВыбраннаяСтрока.ИмяФайла);
			Исключение
			КонецПопытки;
		ИначеЕсли Колонка.Имя = "ЕстьИзменения" и ВыбраннаяСтрока.ЕстьИзменения Тогда
			Попытка			
				ЗапуститьПриложение(Кэш.ГлавноеОкно.КаталогНастроек+СтрЗаменить(ВыбраннаяСтрока.ИмяФайла, "sbis.xml", "xml"));
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ОбновитьКонтент(Кэш) Экспорт
	// Функция обновляет данные в главном окне при переходе в раздел Файлы настроек
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Контент = сбисЭлементФормы(ГлавноеОкно, "Контент");
	Контент.ТекущаяСтраница = сбисПолучитьСтраницу(Контент, "ФайлыНастроек");
	
	Если ГлавноеОкно.Конфигурация = "" Тогда
		ВремКаталог = сбисРаспаковатьНастройки();
		//		ПолучитьМассивУстановленныхИниФайлов(ГлавноеОкно.КаталогНастроек);
		СписокТиповНастроек = СформироватьСписокДоступныхНастроек(ВремКаталог);	
		ГлавноеОкно.ТабДоступныеИниФайлы.Очистить();
		сбисЭлементФормы(ГлавноеОкно, "Конфигурация").СписокВыбора.Очистить();
		СтруктураКонфигураций = Новый Структура();
		Для каждого СтрокаНастроек из СписокТиповНастроек Цикл
			СтруктураКонфигурации = Новый Структура();
			НазываниеКонфигурации = ОпределитьТипНастроекПоПрефиксу(СтрокаНастроек.Представление);
			сбисЭлементФормы(ГлавноеОкно, "Конфигурация").СписокВыбора.Добавить(НазываниеКонфигурации, НазываниеКонфигурации);
			СтруктураКонфигурации.Вставить("НазываниеКонфигурации", НазываниеКонфигурации);
			СтруктураКонфигурации.Вставить("СтруктураКонфигурации", СтрокаНастроек.Значение);			
			СтруктураКонфигураций.Вставить("Конфигурация" + Число(СписокТиповНастроек.Индекс(СтрокаНастроек) + 1), СтруктураКонфигурации);
		КонецЦикла;	
		
		ГлавноеОкно.Кэш.Вставить("Конфигурация", СтруктураКонфигураций);		
		ГлавноеОкно.Конфигурация = ОпределитьТипНастроекПоПрефиксу(ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, "Представление"));
		
		ТабУстФайлы = ГлавноеОкно.ТабУстановленныеИниФайлы;
		ДоступныеИниФайлы = ТабДоступныеИниФайлыОбновить(ПолучитьСтруктуруКонфигурации(), ТабУстФайлы);
		ГлавноеОкно.ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
&НаКлиенте
Процедура НаСменуРаздела(Кэш) Экспорт
	
КонецПроцедуры
&НаКлиенте
Процедура НавигацияУстановитьПанель() Экспорт
	// Процедура устанавливает панель навигации на 1ую страницу и скрывает панель	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ГлавноеОкно.ФильтрСтраница=1;
	сбисЭлементФормы(ГлавноеОкно,"ПанельНавигации").Видимость=Ложь;
КонецПроцедуры	