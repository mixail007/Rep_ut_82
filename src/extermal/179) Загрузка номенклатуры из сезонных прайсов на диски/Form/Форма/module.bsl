
Процедура ПриОткрытии()
	
	ПерваяСтрока = 5;
	ДопНазвание = "";
	Комментарий = "Осень 2016, загружен из Excel";
	
КонецПроцедуры

//диски
Процедура Кнопка1Нажатие(Элемент)
	
	Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") И (НЕ ЗначениеЗаполнено(МаксНагрузка)) Тогда
		Сообщить("Не заполнено поле ""Максимальная нагрузка""");
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		//		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла,1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция мПрочитатьТабличныйДокументИзExcel(ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	СвойствоУкомплектованКрепежом = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90164");
	СвойствоВидУпаковки           = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90165");
	СвойствоЦвет                  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166");
	СвойствоКодСлика              = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90147");
	СвойствоМаксимальнаяНагрузка  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90157");
	СвойствоТипШтрихкода          = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("00001");  
	
	ТаблицаЦен=Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Номенклатура");
	ТаблицаЦен.Колонки.Добавить("Цена");
	
	НачатьТранзакцию();
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(1);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;	
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	Если ЭлементыФормы.ПерваяСтрока.Значение > RowCount тогда
		ЭлементыФормы.ПерваяСтрока.Значение = RowCount;
	КонецЕсли;	
	
	
	ColumnCount = ActiveCell.Column;
	
	Сообщить("Найдено "+строка(RowCount)+" строк и "+строка(ColumnCount)+" столбцов");
		
	Если ЭлементыФормы.перваяСтрока.Значение = 0 тогда
		ЭлементыФормы.перваяСтрока.Значение = 2; 
	КонецЕсли;
	
	сообщить("Начало ----------"+строка(ТекущаяДата())+"---------" );
	
	Для Row = перваяСтрока По КоличествоСтрок Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Состояние("Идет загрузка из Excel: "+строка(Row)+" / "+строка(RowCount)+" ("+строка(окр(Row*100/RowCount,1))+"%)");
		
		//если нет модели... или уже заполнен код - пропускаем!
		Если СокрЛП(ExcelЛист.Cells(Row,Код1С).Value)<>"" тогда //код
			продолжить;
		КонецЕсли;
		
		СтрокаB  =	СокрЛП(строка(Формат(ExcelЛист.Cells(Row,5).Value, "ЧГ=0")));  //бывает, что модель пишут в пустых строках с параметрами. такие пропускаем
		Если СокрЛП(СтрокаB)="" тогда
			продолжить;
		КонецЕсли;
		
		СтрокаB  =	СокрЛП(строка(Формат(ExcelЛист.Cells(Row,Модель).Value, "ЧГ=0")));  //модель
		Если СокрЛП(СтрокаB)="" тогда
			продолжить;
		КонецЕсли;
				
		
		//		A<NZ> B<SH269> D<5.5>xC<13>/E<4>xF<98> ETG<35> DH<58.6> I<MBF>
				
		СтрокаE = Строка(ExcelЛист.Cells(Row,Диаметр).Value);   
		СтрокаE = стрЗаменить(СтрокаE,",",".");
		СтрокаF = Строка(ExcelЛист.Cells(Row,ШиринаД).Value);
		СтрокаF = стрЗаменить(СтрокаF,",",".");
		СтрокаD = Строка(ExcelЛист.Cells(Row,КоличествоОтверстий).Value); 
		СтрокаD = стрЗаменить(СтрокаD,",",".");
		СтрокаG = Строка(ExcelЛист.Cells(Row,PCD).Value);
		СтрокаG = стрЗаменить(СтрокаG,",",".");
		СтрокаH = Формат(ExcelЛист.Cells(Row,Вылет).Value, "ЧН=0");
		СтрокаH = стрЗаменить(СтрокаH,",",".");
		
		СтрокаI = Строка(Окр(ExcelЛист.Cells(Row,Ступица).Value,2));  
		СтрокаI = стрЗаменить(СтрокаI,",",".");
		
		СтрокаJ = Строка(ExcelЛист.Cells(Row,Цвет).Value);   //цвет
		СтрокаJ = СтрЗаменить(СтрокаJ, " ", "_");
		
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") Тогда //литые
			СтрокаL = Строка(ExcelЛист.Cells(Row,МаксНагрузка).Value);   //МаксНагрузка
		Иначе
			СтрокаL = "";
		КонецЕсли;
		
		НовыйТипоразмер  = СтрокаF+"x"+СтрокаE+"/"+СтрокаD+"x"+СтрокаG+" ET"+СтрокаH+" D"+СтрокаI;
		
		НовыйТипоразмер = стрЗаменить(НовыйТипоразмер,",",".");
		СпрТипоразмер = Справочники.Типоразмеры.НайтиПоНаименованию(НовыйТипоразмер);	
			
//		//####################################### ТИПОРАЗМЕР #######################################
//		
		Если СпрТипоразмер = Справочники.Типоразмеры.ПустаяСсылка() Тогда
			Сообщить("+++ НОВЫЙ типоразмер: "+НовыйТипоразмер, СтатусСообщения.Информация);
			СпрТипоразмерОб = Справочники.Типоразмеры.СоздатьЭлемент();
			СпрТипоразмерОб.Наименование = НовыйТипоразмер;
			СпрТипоразмерОб.Родитель = Справочники.Типоразмеры.НайтиПоКоду("232");
			СпрТипоразмерОб.Ширина              = СтрокаF;
			СпрТипоразмерОб.КоличествоОтверстий = СтрокаD;
			СпрТипоразмерОб.Диаметр             = СтрокаE;
			СпрТипоразмерОб.PCD                 = стрЗаменить(СтрокаG,",",".");
			СпрТипоразмерОб.Вылет               = СтрокаH;
			СпрТипоразмерОб.ДиаметрСтупицы      = стрЗаменить(СтрокаI,",",".");
			СпрТипоразмерОб.Записать();
			СпрТипоразмер = СпрТипоразмерОб.Ссылка;
		КонецЕсли;	
//		
//		//####################################### МОДЕЛЬ #######################################
//		
		Если Концепт Тогда
			НаимМ = "_" + СтрокаB;   // для концепта
		Иначе
			НаимМ = СтрокаB;
		КонецЕсли;
		СпрМодель = Справочники.МоделиТоваров.НайтиПоНаименованию(НаимМ);
		Если СпрМодель = Справочники.МоделиТоваров.ПустаяСсылка() Тогда
			Сообщить("+++ НОВАЯ модель: "+НаимМ, СтатусСообщения.Информация);
			ОбМодель = Справочники.МоделиТоваров.СоздатьЭлемент();
			ОбМодель.Наименование       = НаимМ;
			ОбМодель.ПолноеНаименование = НаимМ;
			ОбМодель.Родитель           = Справочники.МоделиТоваров.НайтиПоКоду("00002");   //диски
			ОбМодель.Производитель      = Производитель;
			ОбМодель.Записать();
			СпрМодель = ОбМодель.Ссылка;
		КонецЕсли;

		СтрокаНаименование = ?(НаименованиеБренда = "", "", СокрЛП(НаименованиеБренда) + " ") + ?(ДопНазвание = "", "", СокрЛП(ДопНазвание) + " ") + СтрокаB + " " + СтрокаF+"x"+СтрокаE+"/"+СтрокаD+"x"+СтрокаG+" ET"+СтрокаH+" D"+СтрокаI + " " + СтрокаJ;
		СтрокаНаименование = стрЗаменить(СтрокаНаименование,",",".");
		СтрокаНаименованиеПолное="Диск " + СокрЛП(НаименованиеБренда) + " " + СтрокаB + " " + СтрокаF+"x"+СтрокаE+"/"+СтрокаD+"x"+СтрокаG+" ET"+СтрокаH+" D"+СтрокаI + " " + СтрокаJ;
		
		//+++ а вдруг такая уже есть с new
		спрНом =  Справочники.Номенклатура.НайтиПоНаименованию(СтрокаНаименование+" new",истина);
		
		Если спрНом = Справочники.Номенклатура.ПустаяСсылка() Тогда   //без new
			спрНом =  Справочники.Номенклатура.НайтиПоНаименованию(СтрокаНаименование,истина);	
		КонецЕсли;
		
		Если спрНом <> Справочники.Номенклатура.ПустаяСсылка() тогда
			СпрОбъект = спрНом.ПолучитьОбъект();
			Сообщить("Уже есть такое наименование "+СпрОбъект.Наименование);
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
						 |	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
						 |ИЗ
						 |	РегистрСведений.Штрихкоды КАК Штрихкоды
						 |ГДЕ
						 |	Штрихкоды.Владелец = &Владелец
						 |	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения
						 |	И Штрихкоды.ТипШтрихкода = &ТипШтрихкода
						 |	И Штрихкоды.Качество = &Качество";
						 Запрос.УстановитьПараметр("Владелец",СпрОбъект.Ссылка);
						 Запрос.УстановитьПараметр("ЕдиницаИзмерения",СпрОбъект.ЕдиницаХраненияОстатков);
						 Запрос.УстановитьПараметр("ТипШтрихкода",СвойствоТипШтрихкода);
						 Запрос.УстановитьПараметр("Качество",Справочники.Качество.Новый);
						 Рез=Запрос.Выполнить().Выгрузить();
			ExcelЛист.Cells(Row,Код1С).Value = СпрОбъект.Код;
			ExcelЛист.Cells(Row,ШтрихКод1С).Value = """"+?(Рез.Количество()>0,Рез[0].ШтрихКод,"")+"""";
			//ExcelЛист.Cells(Row,21).Value = "Было";

			
			Продолжить;
			
		иначе
			
			СпрОбъект=Справочники.Номенклатура.СоздатьЭлемент();	
			СпрОбъект.Наименование            = СтрокаНаименование;
			СпрОбъект.НаименованиеПолное      = СтрокаНаименованиеПолное;
			СпрОбъект.ВидТовара               = Перечисления.ВидыТоваров.Диски;
			Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") Тогда //литые
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0001753");
			ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") Тогда //штамп
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0001755");  
			ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022") Тогда //ков
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0080062");
			ИначеЕсли НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00013") Тогда //грузовые
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("9004163");
			КонецЕсли;
			СпрОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
			//СпрОбъект.Импорт=Истина;
			//СпрОбъект.Комментарий="весна 2013 - Загружен из Excel";
			СпрОбъект.НоменклатурнаяГруппа    = НоменклатурнаяГруппа;
			СпрОбъект.Производитель           = Производитель;
			СпрОбъект.Типоразмер              = СпрТипоразмер;
			СпрОбъект.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18;
			СпрОбъект.Модель                  = СпрМодель;
			СпрОбъект.Комментарий=Комментарий;
			СпрОбъект.Записать();
			Сообщить("("+СпрОбъект.Код+") "+СтрокаНаименование);
			СпрОбъект.Артикул = СпрОбъект.Код;
			СпрОбъект.Записать();
		КонецЕсли;
//		
//		//####################################### ЕДИНИЦЫ ИЗМЕРЕНИЯ #######################################
		СпрЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		СпрЕдИзм.Владелец = СпрОбъект.Ссылка;
		СпрЕдИзм.ЕдиницаПоКлассификатору =  СпрОбъект.БазоваяЕдиницаИзмерения;
		СпрЕдИзм.Коэффициент= 1;
		СпрЕдИзм.Наименование = "шт";
		СпрЕдИзм.УстановитьНовыйКод(Константы.ПрефиксКодаЕдиниц.Получить());
		СпрЕдИзм.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		СпрЕдИзм.Записать();
		
		СпрОбъект.ЕдиницаХраненияОстатков = СпрЕдИзм.Ссылка;
		СпрОбъект.ЕдиницаДляОтчетов = СпрЕдИзм.Ссылка;
		
		СпрОбъект.Записать();
//		
//		//####################################### ЦЕНЫ #######################################
//		//Попытка	
//		//	Цена=Число(ExcelЛист.Cells(Row,10).Value);
//		//	Если  Цена > 0 Тогда
//		//		
//		//		строкаЦена=ТаблицаЦен.Добавить();
//		//		строкаЦена.Номенклатура = СпрОбъект.Ссылка; 
//		//		строкаЦена.Цена = Цена; 
//		//	КонецЕсли;
//		//Исключение	
//		//КонецПопытки;
//		
//		//####################################### ЗНАЧЕНИЕ СВОЙСТВ ОБЪЕКТОВ #######################################
//		//Вид упаковки
		МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		
		МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
		МенеджерЗначенияСвойств.Свойство = СвойствоВидУпаковки;
		МенеджерЗначенияСвойств.Прочитать();	
		
		ВидУпаковкиКоробка=Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("коробка");
		
		Если не МенеджерЗначенияСвойств.Выбран() Тогда
			МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
			МенеджерЗначенияСвойств.Свойство = СвойствоВидУпаковки;
			МенеджерЗначенияСвойств.Значение = ВидУпаковкиКоробка;
			МенеджерЗначенияСвойств.Записать();
		КонецЕсли;
		
		// Цвет
		КодЦвет="";
		КодЦвет=СтрокаJ; //ОК
		
		Если СокрЛП(КодЦвет)<>"" Тогда
			МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
			МенеджерЗначенияСвойств.Свойство = СвойствоЦвет;
			МенеджерЗначенияСвойств.Прочитать();	
			Если не МенеджерЗначенияСвойств.Выбран() Тогда
				МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
				МенеджерЗначенияСвойств.Свойство = СвойствоЦвет;
				МенеджерЗначенияСвойств.Значение = КодЦвет;
				МенеджерЗначенияСвойств.Записать();
			КонецЕсли;
		КонецЕсли;
		
		//***2017.08.10
		//Максимальная нагрузка
		// Цвет
		МаксНагрузка1 = "";
		МаксНагрузка1 = СтрокаL; 
		
		Если СокрЛП(МаксНагрузка1) <> "" Тогда
			МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
			МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
			МенеджерЗначенияСвойств.Прочитать();	
			Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
				МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
				МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
				МенеджерЗначенияСвойств.Значение = МаксНагрузка1;
				МенеджерЗначенияСвойств.Записать();
			КонецЕсли;
		КонецЕсли;
		
		//####################################### ШТРИХКОД #######################################
		
		ШтрихКод = "05000"+ СпрОбъект.Код;
		ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
		
		МенеджерШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		
		МенеджерШтрихкод.Владелец         = СпрОбъект.Ссылка;
		МенеджерШтрихкод.Штрихкод         = ШтрихКод;
		МенеджерШтрихкод.ТипШтрихкода     = СвойствоТипШтрихкода;
		МенеджерШтрихкод.ЕдиницаИзмерения = СпрЕдИзм.Ссылка; 
		МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
		МенеджерШтрихкод.Прочитать();	
		
		Если не МенеджерШтрихкод.Выбран() Тогда
			МенеджерШтрихкод.Владелец         = СпрОбъект.Ссылка;
			МенеджерШтрихкод.Код              = Число(СпрОбъект.Ссылка.Код);
			МенеджерШтрихкод.Штрихкод         = ШтрихКод;
			МенеджерШтрихкод.ТипШтрихкода     = СвойствоТипШтрихкода;
			МенеджерШтрихкод.ЕдиницаИзмерения = СпрЕдИзм.Ссылка; 
			МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
			МенеджерШтрихкод.Записать();
		КонецЕсли;

		ExcelЛист.Cells(Row,Код1С).Value = СпрОбъект.Код;
		ExcelЛист.Cells(Row,ШтрихКод1С).Value = """"+ШтрихКод+"""";
		//ExcelЛист.Cells(Row,21).Value = "Добавлено";
		
	КонецЦикла;
//	
//	//####################################### УСТАНОВКА ЦЕН НОМЕНКЛАТУРЫ #######################################
//	//Если ТаблицаЦен.Количество()>0 Тогда
//	//	
//	//	ДокУЦН = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
//	//	ДокУЦН.Дата = ТекущаяДата();
//	//	
//	//	ТипЦенБазовая = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
//	//	
//	//	строкаТипыЦен = ДокУЦН.ТипыЦен.Добавить();
//	//	строкаТипыЦен.ТипЦен = ТипЦенБазовая;
//	//	
//	//	//
//	//	Для  счСтрок=0 по  ТаблицаЦен.Количество()-1 Цикл
//	//		строкаТовары                  = ДокУЦН.Товары.Добавить();
//	//		строкаТовары.Номенклатура     = ТаблицаЦен[счСтрок].Номенклатура;
//	//		строкаТовары.Цена             = ТаблицаЦен[счСтрок].Цена;
//	//		строкаТовары.Валюта           = Константы.ВалютаУправленческогоУчета.Получить();
//	//		строкаТовары.ЕдиницаИзмерения = строкаТовары.Номенклатура.ЕдиницаХраненияОстатков;
//	//		строкаТовары.ТипЦен           = ТипЦенБазовая;
//	//		
//	//	КонецЦикла; 
//	//	//	
//	//	ДокУЦН.ПолучитьФорму().Открыть();	
//	//	//	
//	//КонецЕсли;
//	
	ЗафиксироватьТранзакцию();
	
	Excel.WorkBooks.Close();
	Excel = 0;
	сообщить("Конец--------"+строка(ТекущаяДата())+"-------" );	
	Возврат Истина;
	
КонецФункции // ()

//крепеж
Процедура Кнопка2Нажатие(Элемент)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			
			НачатьТранзакцию();
			
			xlLastCell = 11;
			
			ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда
				Сообщить("Файл не существует!");
				Возврат;
			КонецЕсли;
			
			Попытка
				Excel = Новый COMОбъект("Excel.Application");
				Excel.WorkBooks.Open(ИмяФайла);
				Состояние("Обработка файла Microsoft Excel...");
				ExcelЛист = Excel.Sheets(1);
			Исключение
				Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
				Возврат;
			КонецПопытки;	
			
			ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
			RowCount = ActiveCell.Row;
			Если ЭлементыФормы.ПерваяСтрока.Значение > RowCount тогда
				ЭлементыФормы.ПерваяСтрока.Значение = RowCount;
			КонецЕсли;	
			
			ColumnCount = ActiveCell.Column;
			
			Сообщить("Найдено "+строка(RowCount)+" строк и "+строка(ColumnCount)+" столбцов");
			
			Если ЭлементыФормы.перваяСтрока.Значение = 0 тогда
				ЭлементыФормы.перваяСтрока.Значение = 2; 
			КонецЕсли;
			
			сообщить("Начало ----------"+строка(ТекущаяДата())+"---------" );
			
			Для Row = перваяСтрока По КоличествоСтрок Цикл
				
				ОбработкаПрерыванияПользователя();
				
				Состояние("Идет загрузка из Excel: "+строка(Row)+" / "+строка(RowCount)+" ("+строка(окр(Row*100/RowCount,1))+"%)");
				
				Если СокрЛП(ExcelЛист.Cells(Row,ТипКрепежа).Value)="" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаD = Строка(ExcelЛист.Cells(Row,ТипКрепежа).Value);
				СтрокаI = Строка(ExcelЛист.Cells(Row,НаименованиеКрепежа).Value);
				
				Если ExcelЛист.Cells(Row,Размер1).Value <> "" И ExcelЛист.Cells(Row,Размер1).Value <> Неопределено Тогда
					СтрокаE = Строка(Окр(ExcelЛист.Cells(Row,Размер1).Value, 2));   
					СтрокаE = стрЗаменить(СтрокаE,",",".");
				Иначе
					СтрокаE = "";
				КонецЕсли;
				Если ExcelЛист.Cells(Row,Размер2).Value <> "" И ExcelЛист.Cells(Row,Размер2).Value <> Неопределено Тогда
					СтрокаF = Строка(Окр(ExcelЛист.Cells(Row,Размер2).Value, 2));
					СтрокаF = стрЗаменить(СтрокаF,",",".");
				Иначе
					СтрокаF = "";
				КонецЕсли;
				
				НовыйТипоразмер  = СтрокаE+"-"+СтрокаF;
				
				НовыйТипоразмер = стрЗаменить(НовыйТипоразмер,",",".");
				СпрТипоразмер = Справочники.Типоразмеры.НайтиПоНаименованию(НовыйТипоразмер);	
				
				//если уже заполнен код - пропускаем!
				Если СокрЛП(ExcelЛист.Cells(Row,Код1СКрепежа).Value)<>"" тогда //код
					
					Продолжить;
					
					//СсылкаНом = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ExcelЛист.Cells(Row,Код1СКрепежа).Value));
					//
					//Если НЕ СсылкаНом = Справочники.Номенклатура.ПустаяСсылка() Тогда 
					//	
					//	СтрокаI = Строка(ExcelЛист.Cells(Row,НаименованиеКрепежа).Value);
					//	Если СтрокаI = "" Тогда
					//		//ExcelЛист.Cells(Row,НаименованиеКрепежа).Value = СсылкаНом.Наименование;
					//	Иначе
					//		СпрНомОбъект = СсылкаНом.ПолучитьОбъект();
					//		СпрНомОбъект.Наименование = СокрЛП(СтрокаI);
					//		СпрНомОбъект.НаименованиеПолное = СокрЛП(СтрокаI);
					//	КонецЕсли;
					//	
					//	Если НЕ СпрТипоразмер = Справочники.Типоразмеры.ПустаяСсылка() Тогда
					//		СпрТипоразмерОбъект = СпрТипоразмер.ПолучитьОбъект();
					//		СпрТипоразмерОбъект.Ширина              = СтрокаE;
					//		СпрТипоразмерОбъект.Диаметр             = СтрокаF;
					//		СпрТипоразмерОбъект.Записать();
					//	КонецЕсли;
					//	
					//КонецЕсли;
					
				Иначе
										
					//		//####################################### ТИПОРАЗМЕР #######################################
					//		
					Если СпрТипоразмер = Справочники.Типоразмеры.ПустаяСсылка() Тогда
						Сообщить("+++ НОВЫЙ типоразмер: "+НовыйТипоразмер, СтатусСообщения.Информация);
						СпрТипоразмерОб = Справочники.Типоразмеры.СоздатьЭлемент();
						СпрТипоразмерОб.Наименование = НовыйТипоразмер;
						СпрТипоразмерОб.Родитель = Справочники.Типоразмеры.НайтиПоКоду("1"); //Прочее
						СпрТипоразмерОб.Ширина              = СтрокаE;
						СпрТипоразмерОб.Диаметр             = СтрокаF;
						СпрТипоразмерОб.Записать();
						СпрТипоразмер = СпрТипоразмерОб.Ссылка;
					Иначе
						СпрТипоразмерОбъект = СпрТипоразмер.ПолучитьОбъект();
						СпрТипоразмерОбъект.Ширина              = СтрокаE;
						СпрТипоразмерОбъект.Диаметр             = СтрокаF;
						СпрТипоразмерОбъект.Записать();
					КонецЕсли;	
					
					СтрокаНаименование = ?(СтрокаI = "", СокрЛП(СтрокаD) + " (" + СокрЛП(СтрокаE) + "-" + СокрЛП(СтрокаF) + ")", СокрЛП(СтрокаI));
					СтрокаНаименование = стрЗаменить(СтрокаНаименование,",",".");
					СтрокаНаименованиеПолное = СтрокаНаименование;
					
					
					СпрОбъект = Справочники.Номенклатура.СоздатьЭлемент();	
					СпрОбъект.Наименование            = СтрокаНаименование;
					СпрОбъект.НаименованиеПолное      = СтрокаНаименованиеПолное;
					СпрОбъект.ВидТовара               = Перечисления.ВидыТоваров.Прочее;
					Если Найти(СтрокаНаименование, "болт") > 0 Тогда
						СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0000702");  
					ИначеЕсли Найти(СтрокаНаименование, "кольц") > 0 Тогда
						СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0000726");  
					ИначеЕсли Найти(СтрокаНаименование, "гайк") > 0 Тогда
						СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0000713");  
					ИначеЕсли Найти(СтрокаНаименование, "венти") > 0 Тогда
						СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("9190192");  
					Иначе
						СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0000701");  
					КонецЕсли;
					СпрОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
					//СпрОбъект.Импорт=Истина;
					//СпрОбъект.Комментарий="весна 2013 - Загружен из Excel";
					СпрОбъект.НоменклатурнаяГруппа    = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00024");
					СпрОбъект.Производитель           = Справочники.Производители.НайтиПоКоду("734"); //Китай
					СпрОбъект.Типоразмер              = СпрТипоразмер;
					СпрОбъект.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18;
					СпрОбъект.Комментарий=Комментарий;
					СпрОбъект.Записать();
					Сообщить("("+СпрОбъект.Код+") "+СтрокаНаименование);
					СпрОбъект.Артикул = СпрОбъект.Код;
					СпрОбъект.Записать();
					//		
					//		//####################################### ЕДИНИЦЫ ИЗМЕРЕНИЯ #######################################
					СпрЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					СпрЕдИзм.Владелец = СпрОбъект.Ссылка;
					СпрЕдИзм.ЕдиницаПоКлассификатору =  СпрОбъект.БазоваяЕдиницаИзмерения;
					СпрЕдИзм.Коэффициент= 1;
					СпрЕдИзм.Наименование = "шт";
					СпрЕдИзм.УстановитьНовыйКод(Константы.ПрефиксКодаЕдиниц.Получить());
					СпрЕдИзм.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
					СпрЕдИзм.Записать();
					
					СпрОбъект.ЕдиницаХраненияОстатков = СпрЕдИзм.Ссылка;
					СпрОбъект.ЕдиницаДляОтчетов = СпрЕдИзм.Ссылка;
					
					СпрОбъект.Записать();
					
					ExcelЛист.Cells(Row,Код1СКрепежа).Value = СпрОбъект.Код;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			Excel.WorkBooks.Close();
			Excel = 0;
			сообщить("Конец--------"+строка(ТекущаяДата())+"-------" );	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//экспортная номенклатура
Процедура Кнопка3Нажатие(Элемент)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТаблицаФайлаЭкспорт.Очистить();
			ТаблицаРезультатПоискаПоПараметрам.Очистить();
			мПрочитатьДанныеДляЭкспортнойНоменклатурытИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла,1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция мПрочитатьДанныеДляЭкспортнойНоменклатурытИзExcel(ИмяФайла, НомерЛистаExcel = 1) Экспорт

	СвойствоУкомплектованКрепежом = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90164");
	СвойствоВидУпаковки           = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90165");
	СвойствоЦвет                  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166");
	СвойствоКодСлика              = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90147");
	СвойствоМаксимальнаяНагрузка  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90157");
	СвойствоТипШтрихкода          = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("00001");  
	
	ТаблицаЦен=Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Номенклатура");
	ТаблицаЦен.Колонки.Добавить("Цена");
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(1);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
	КонецПопытки;	
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	Если ЭлементыФормы.ПерваяСтрока.Значение > RowCount тогда
		ЭлементыФормы.ПерваяСтрока.Значение = RowCount;
	КонецЕсли;	
	
	
	ColumnCount = ActiveCell.Column;
			
	Если ЭлементыФормы.перваяСтрока.Значение = 0 тогда
		ЭлементыФормы.перваяСтрока.Значение = 2; 
	КонецЕсли;
		
	Для Row = перваяСтрока По КоличествоСтрок Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Состояние("Идет загрузка из Excel: "+строка(Row)+" / "+строка(RowCount)+" ("+строка(окр(Row*100/RowCount,1))+"%)");
		
		Если НЕ ПроизводительВФайле = 0 Тогда
			СтрокаПроизводитель  =	СокрЛП(строка(Формат(ExcelЛист.Cells(Row,ПроизводительВФайле).Value, "ЧГ=0")));  //производитель
		Иначе
			СтрокаПроизводитель = "";
		КонецЕсли;
		Если НЕ Модель = 0 Тогда
			СтрокаМодель		 =	СокрЛП(строка(Формат(ExcelЛист.Cells(Row,Модель).Value, "ЧГ=0")));  //модель
		Иначе
			СтрокаМодель = "";
		КонецЕсли;
		Если НЕ Диаметр = 0 Тогда
			СтрокаДиаметр = Строка(ExcelЛист.Cells(Row,Диаметр).Value);   
			СтрокаДиаметр = стрЗаменить(СтрокаДиаметр,",",".");
		Иначе
			СтрокаДиаметр = "";
		КонецЕсли;
		Если НЕ ШиринаД = 0 Тогда
			СтрокаШирина = Строка(ExcelЛист.Cells(Row,ШиринаД).Value);
			СтрокаШирина = стрЗаменить(СтрокаШирина,",",".");
		Иначе
			СтрокаШирина = "";
		КонецЕсли;
		Если НЕ КоличествоОтверстий = 0 Тогда
			СтрокаКоличествоОтверстий = Строка(ExcelЛист.Cells(Row,КоличествоОтверстий).Value); 
			СтрокаКоличествоОтверстий = стрЗаменить(СтрокаКоличествоОтверстий,",",".");
		Иначе
			СтрокаКоличествоОтверстий = "";
		КонецЕсли;
		Если НЕ PCD = 0 Тогда
			СтрокаPCD = Строка(ExcelЛист.Cells(Row,PCD).Value);
			СтрокаPCD = стрЗаменить(СтрокаPCD,",",".");
		Иначе
			СтрокаPCD = "";
		КонецЕсли;
		Если НЕ Вылет = 0 Тогда
			СтрокаВылет = Формат(ExcelЛист.Cells(Row,Вылет).Value, "ЧН=0");
			СтрокаВылет = стрЗаменить(СтрокаВылет,",",".");
		Иначе
			СтрокаВылет = "";
		КонецЕсли;
		Если НЕ Ступица = 0 Тогда
			СтрокаСтупица = Строка(Окр(ExcelЛист.Cells(Row,Ступица).Value,2));  
			СтрокаСтупица = стрЗаменить(СтрокаСтупица,",",".");
		Иначе
			СтрокаСтупица = "";
		КонецЕсли;
		Если НЕ Цвет = 0 Тогда
			СтрокаЦвет = Строка(ExcelЛист.Cells(Row,Цвет).Value);   //цвет
			СтрокаЦвет = СтрЗаменить(СтрокаЦвет, " ", "_");
		Иначе
			СтрокаЦвет = "";
		КонецЕсли;
		
		СтрокаТЧ = ТаблицаФайлаЭкспорт.Добавить();
		СтрокаТЧ.Производитель = СтрокаПроизводитель;
		СтрокаТЧ.Модель = СтрокаМодель;
		СтрокаТЧ.Диаметр = СтрокаДиаметр;
		СтрокаТЧ.ШиринаД = СтрокаШирина;
		СтрокаТЧ.КоличествоОтверстий = СтрокаКоличествоОтверстий;
		СтрокаТЧ.PCD = СтрокаPCD;
		СтрокаТЧ.Вылет = СтрокаВылет;
		СтрокаТЧ.Ступица = СтрокаСтупица;
		СтрокаТЧ.Цвет = СтрокаЦвет;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СвойствоЦвет", СвойствоЦвет);
		Запрос.УстановитьПараметр("Значение", СокрЛП(СтрокаЦвет));
		Запрос.УстановитьПараметр("Диаметр", СокрЛП(СтрокаДиаметр));
		Запрос.УстановитьПараметр("Ширина", СокрЛП(СтрокаШирина));
		Запрос.УстановитьПараметр("КоличествоОтверстий", СокрЛП(СтрокаКоличествоОтверстий));
		Запрос.УстановитьПараметр("PCD", СокрЛП(СтрокаPCD));
		Запрос.УстановитьПараметр("Вылет", СокрЛП(СтрокаВылет));
		Запрос.УстановитьПараметр("ДиаметрСтупицы", СокрЛП(СтрокаСтупица));
		Запрос.УстановитьПараметр("Производитель", СокрЛП(СтрокаПроизводитель));
		Запрос.УстановитьПараметр("Модель", "%"+СокрЛП(СтрокаМодель)+"%");
		Запрос.УстановитьПараметр("ДляТурции", Справочники.Номенклатура.НайтиПоКоду("9273968"));
		Запрос.Текст = "ВЫБРАТЬ
		               |	А.Номенклатура
		               |	"+?(СтрокаЦвет="","",", А.Значение")+"
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Номенклатура.Ссылка КАК Номенклатура
		               |		"+?(СтрокаЦвет="","",", ЗначенияСвойствОбъектов.Значение КАК Значение")+"
		               |	ИЗ
		               |		Справочник.Номенклатура КАК Номенклатура
		               |			"+?(СтрокаЦвет="","","ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		               |			ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
		               |				И (ЗначенияСвойствОбъектов.Свойство = &СвойствоЦвет)")+") КАК А
		               |ГДЕ
					   |	НЕ А.Номенклатура.ПометкаУдаления
					   |	И НЕ А.Номенклатура В ИЕРАРХИИ (&ДляТурции) 
		               |	"+?(СтрокаЦвет="","","И А.Значение = &Значение")+"
		               |	"+?(СтрокаДиаметр="","","И А.Номенклатура.Типоразмер.Диаметр = &Диаметр")+"
		               |	"+?(СтрокаШирина="","","И А.Номенклатура.Типоразмер.Ширина = &Ширина")+"
		               |	"+?(СтрокаКоличествоОтверстий="","","И А.Номенклатура.Типоразмер.КоличествоОтверстий = &КоличествоОтверстий")+"
		               |	"+?(СтрокаPCD="","","И А.Номенклатура.Типоразмер.PCD = &PCD")+"
		               |	"+?(СтрокаВылет="","","И А.Номенклатура.Типоразмер.Вылет = &Вылет")+"
		               |	"+?(СтрокаСтупица="","","И А.Номенклатура.Типоразмер.ДиаметрСтупицы = &ДиаметрСтупицы")+"
		               |	"+?(СтрокаПроизводитель="","","И А.Номенклатура.Производитель.Наименование = &Производитель")+"
		               |	"+?(СтрокаМодель="","","И А.Номенклатура.Модель.Наименование ПОДОБНО &Модель")+"";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ Заводы
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &Заводы
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ Заводы1
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &Завод
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ ПодЗаводы
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &Подзаводы
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ МинНагрузки
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &МинНагрузка
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ МаксНагрузки
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &МаксНагрузка
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ МаксНагрузки1
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &МаксНагрузка1
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект,
			|	ЗначенияСвойствОбъектов.Значение
			|ПОМЕСТИТЬ Цвета
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоЦвет
			|	И ЗначенияСвойствОбъектов.Объект = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СпрНоменклатура.Ссылка КАК Номенклатура,
			|	СпрНоменклатура.Производитель КАК Производитель,
			|	СпрНоменклатура.Модель,
			|	СпрНоменклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	СпрНоменклатура.Типоразмер.Ширина КАК Ширина,
			|	СпрНоменклатура.Типоразмер.Диаметр КАК Диаметр,
			|	СпрНоменклатура.Типоразмер.КоличествоОтверстий КАК КоличествоОтверстий,
			|	СпрНоменклатура.Типоразмер.PCD КАК PCD,
			|	СпрНоменклатура.Типоразмер.Вылет КАК Вылет,
			|	СпрНоменклатура.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы,
			|	Цвета.Значение КАК Цвет,
			|	Заводы.Значение КАК ЗаводДляТерминала,
			|	Заводы1.Значение КАК Завод,
			|	ПодЗаводы.Значение КАК Подзавод,
			|	МинНагрузки.Значение КАК МинимальноДопустимаяНагрузка,
			|	МаксНагрузки.Значение КАК МаксимальнаяНагрузка,
			|	МаксНагрузки1.Значение КАК МаксимальнаяНагрузка1,
			|	ЦенообразованиеФОБ.БазоваяЦена КАК БазоваяЦенаФОБ,
			|	ЦенообразованиеФОБ.ЦенаСоСкидкой,
			|	ЦенообразованиеФОБ.Undercut,
			|	ЦенообразованиеФОБ.Polish,
			|	ЦенообразованиеФОБ.DoudleColor,
			|	ЦенообразованиеФОБ.Stripe,
			|	ЦенообразованиеФОБ.Rivets,
			|	ЦенообразованиеФОБ.Milling,
			|	ЦенообразованиеФОБ.PlastiicInserts КАК PlasticInserts,
			|	ЦенообразованиеФОБ.SSLip,
			|	ЦенообразованиеФОБ.MaxLoadPrice,
			|	ЦенообразованиеФОБ.Width,
			|	ЦенообразованиеФОБ.ECounting,
			|	ЦенообразованиеФОБ.BigCap,
			|	ЦенообразованиеФОБ.Cup,
			|	ЦеныФОПСрезПоследних.Цена КАК ЦенаФОБ,
			|	ЦеныФОПСрезПоследних.Период КАК ДатаЦеныФоб,
			|	ЦенообразованиеФОБ.Lug КАК Lug,
			|	ЦенообразованиеФОБ.LugCount,
			|	ЦенообразованиеФОБ.РасчетнаяЦенаФОБ КАК РасчетнаяЦенаФОБ,
			|	ЦенообразованиеФОБ.КрепежКоличество,
			|	ЦеныНоменклатурыСрезПоследнихБазовая.Цена КАК Базовая,
			|	ЦеныНоменклатурыСрезПоследнихБазоваяUSD.Цена КАК БазоваяЭкспортнаяUSD,
			|	ЦеныНоменклатурыСрезПоследнихБазоваяUSD.Период КАК ДатаУстановкиБазоваяЭкспортнаяUSD
			|ИЗ
			|	РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент,
			|	Справочник.Номенклатура КАК СпрНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенообразованиеФОБ КАК ЦенообразованиеФОБ
			|		ПО СпрНоменклатура.Ссылка = ЦенообразованиеФОБ.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныФОПСрезПоследних
			|		ПО СпрНоменклатура.Ссылка = ЦеныФОПСрезПоследних.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ Заводы КАК Заводы
			|		ПО СпрНоменклатура.Ссылка = Заводы.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ Заводы1 КАК Заводы1
			|		ПО СпрНоменклатура.Ссылка = Заводы1.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПодЗаводы КАК ПодЗаводы
			|		ПО СпрНоменклатура.Ссылка = ПодЗаводы.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ МинНагрузки КАК МинНагрузки
			|		ПО СпрНоменклатура.Ссылка = МинНагрузки.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ МаксНагрузки КАК МаксНагрузки
			|		ПО СпрНоменклатура.Ссылка = МаксНагрузки.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ МаксНагрузки1 КАК МаксНагрузки1
			|		ПО СпрНоменклатура.Ссылка = МаксНагрузки1.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				Номенклатура = &Номенклатура
			|					И ТипЦен = &БазоваяUSD) КАК ЦеныНоменклатурыСрезПоследнихБазоваяUSD
			|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследнихБазоваяUSD.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ Цвета КАК Цвета
			|		ПО СпрНоменклатура.Ссылка = Цвета.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				Номенклатура = &Номенклатура
			|					И ТипЦен = &Базовая) КАК ЦеныНоменклатурыСрезПоследнихБазовая
			|		ПО СпрНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследнихБазовая.Номенклатура
			|ГДЕ
			|	СпрНоменклатура.Ссылка = &Номенклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Завод,
			|	СезонныйАссортимент.Номенклатура.Наименование";
			
			
			Запрос.УстановитьПараметр("Заводы", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));
			Запрос.УстановитьПараметр("Подзаводы", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90249"));
			Запрос.УстановитьПараметр("Завод", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90171"));
			Запрос.УстановитьПараметр("МинНагрузка", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90250"));
			Запрос.УстановитьПараметр("МаксНагрузка", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205"));
			Запрос.УстановитьПараметр("МаксНагрузка1", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90157"));
			Запрос.УстановитьПараметр("БазоваяUSD", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"));
			Запрос.УстановитьПараметр("Базовая", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"));
			Запрос.УстановитьПараметр("СвойствоЦвет", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166"));
			Запрос.УстановитьПараметр("Номенклатура", Выборка.Номенклатура);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				СтрПодчиненнойТЧ = ТаблицаРезультатПоискаПоПараметрам.Добавить();
				СтрПодчиненнойТЧ.НомерСтрокиГлавнойТаблицы	 = СтрокаТЧ.НомерСтроки;
				СтрПодчиненнойТЧ.Номенклатура				 = Результат.Номенклатура;
				СтрПодчиненнойТЧ.Производитель				 = Результат.Производитель;
				СтрПодчиненнойТЧ.Модель						 = Результат.Модель;
				СтрПодчиненнойТЧ.НоменклатурнаяГруппа		 = Результат.НоменклатурнаяГруппа;
				СтрПодчиненнойТЧ.Ширина						 = Результат.Ширина;
				СтрПодчиненнойТЧ.Диаметр					 = Результат.Диаметр;
				СтрПодчиненнойТЧ.КоличествоОтверстий		 = Результат.КоличествоОтверстий;
				СтрПодчиненнойТЧ.PCD						 = Результат.PCD;
				СтрПодчиненнойТЧ.Вылет						 = Результат.Вылет;
				СтрПодчиненнойТЧ.ДиаметрСтупицы				 = Результат.ДиаметрСтупицы;
				СтрПодчиненнойТЧ.Цвет						 = Результат.Цвет;
				СтрПодчиненнойТЧ.Базовая					 = Результат.Базовая;
				СтрПодчиненнойТЧ.БазоваяЭкспортнаяUSD		 = Результат.БазоваяЭкспортнаяUSD;
				СтрПодчиненнойТЧ.ДатаУстановкиБазоваяЭкспортнаяUSD = Результат.ДатаУстановкиБазоваяЭкспортнаяUSD;
				СтрПодчиненнойТЧ.ЦенаФОБ					 = Результат.ЦенаФОБ;
				СтрПодчиненнойТЧ.РасчетнаяЦенаФОБ			 = Результат.РасчетнаяЦенаФОБ;
				СтрПодчиненнойТЧ.ЦенаСоСкидкой				 = Результат.ЦенаСоСкидкой;
				СтрПодчиненнойТЧ.БазоваяЦенаФОБ				 = Результат.БазоваяЦенаФОБ;
				СтрПодчиненнойТЧ.Undercut					 = Результат.Undercut;
				СтрПодчиненнойТЧ.Polish						 = Результат.Polish;
				СтрПодчиненнойТЧ.DoudleColor				 = Результат.DoudleColor;
				СтрПодчиненнойТЧ.Stripe						 = Результат.Stripe;
				СтрПодчиненнойТЧ.Rivets						 = Результат.Rivets;
				СтрПодчиненнойТЧ.Milling					 = Результат.Milling;
				СтрПодчиненнойТЧ.PlasticInserts				 = Результат.PlasticInserts;
				СтрПодчиненнойТЧ.SSLip						 = Результат.SSLip;
				СтрПодчиненнойТЧ.MaxLoadPrice				 = Результат.MaxLoadPrice;
				СтрПодчиненнойТЧ.Width						 = Результат.Width;
				СтрПодчиненнойТЧ.ECounting					 = Результат.ECounting;
				СтрПодчиненнойТЧ.BigCap						 = Результат.BigCap;
				СтрПодчиненнойТЧ.Cup						 = Результат.Cup;
				СтрПодчиненнойТЧ.Lug						 = Результат.Lug;
				СтрПодчиненнойТЧ.LugCount					 = Результат.LugCount;
				СтрПодчиненнойТЧ.ЗаводДляТерминала			 = Результат.ЗаводДляТерминала;
				СтрПодчиненнойТЧ.Подзавод					 = Результат.Подзавод;
				СтрПодчиненнойТЧ.Завод						 = Результат.Завод;
				СтрПодчиненнойТЧ.МинимальноДопустимаяНагрузка= Результат.МинимальноДопустимаяНагрузка;
				СтрПодчиненнойТЧ.МаксимальнаяНагрузка		 = Результат.МаксимальнаяНагрузка;
				СтрПодчиненнойТЧ.МаксимальнаяНагрузка1		 = Результат.МаксимальнаяНагрузка1;
				СтрПодчиненнойТЧ.КрепежКоличество			 = Результат.КрепежКоличество;
				СтрПодчиненнойТЧ.Вес						 = Результат.Номенклатура.ЕдиницаХраненияОстатков.Вес;
				СтрПодчиненнойТЧ.Объем						 = Результат.Номенклатура.ЕдиницаХраненияОстатков.Объем;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаРезультатПоискаПоПараметрамКопия.Загрузить(ТаблицаРезультатПоискаПоПараметрам.Выгрузить());
		
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Если ТаблицаФайлаЭкспорт.Количество() > 0 Тогда
		ЭлементыФормы.ТабличноеПолеТаблицаФайлаЭкспорт.ТекущаяСтрока = ТаблицаФайлаЭкспорт[0];
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ТабличноеПолеТаблицаФайлаЭкспортПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.ТаблицаРезультатПоискаПоПараметрам.ОтборСтрок.НомерСтрокиГлавнойТаблицы.Установить(Элемент.ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаРезультатПоискаПоПараметрамПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Код.УстановитьТекст(ДанныеСтроки.Номенклатура.Код);
	
	Если ДанныеСтроки.Пометка Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);  //жирный
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНажатие(Элемент)
	
	СвойствоУкомплектованКрепежом = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90164");
	СвойствоВидУпаковки           = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90165");
	СвойствоЦвет                  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166");
	СвойствоКодСлика              = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90147");
	СвойствоМаксимальнаяНагрузка  = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90157");
	СвойствоМаксимальнаяНагрузкаП = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205");
	СвойствоМинимальнаяНагрузка   = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90250");
	СвойствоТипШтрихкода          = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("00001"); 
	СвойствоЗаводДляТерминала     = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185");  
	СвойствоПодзавод		      = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90249");  
	СвойствоЗавод			      = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90171");  
	
	ТаблицаЦен = Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("Номенклатура");
	ТаблицаЦен.Колонки.Добавить("Базовая");
	ТаблицаЦен.Колонки.Добавить("БазоваяUSD");
	
	
	Для каждого СтрТЧ ИЗ ТаблицаРезультатПоискаПоПараметрам Цикл
		Если НЕ СтрТЧ.Пометка Тогда
			Продолжить;
		КонецЕсли;
				
		Если СтрТЧ.НомерСтроки > ТаблицаРезультатПоискаПоПараметрамКопия.Количество() Тогда
			Сообщить("Строки, добавленные вручную, не обрабатываются");
			Продолжить;
		Иначе
			
			НетДублей = Ложь;
			
			ИсходнаяСтрТЧ = ТаблицаРезультатПоискаПоПараметрамКопия[СтрТЧ.НомерСтроки-1];
			
			Если СтрТЧ.BigCap							 = ИсходнаяСтрТЧ.BigCap
				И СтрТЧ.Cup								 = ИсходнаяСтрТЧ.Cup
				И СтрТЧ.DoudleColor						 = ИсходнаяСтрТЧ.DoudleColor
				И СтрТЧ.ECounting						 = ИсходнаяСтрТЧ.ECounting
				И СтрТЧ.Lug								 = ИсходнаяСтрТЧ.Lug 
				И СтрТЧ.LugCount						 = ИсходнаяСтрТЧ.LugCount
				И СтрТЧ.MaxLoadPrice					 = ИсходнаяСтрТЧ.MaxLoadPrice
				И СтрТЧ.Milling							 = ИсходнаяСтрТЧ.Milling
				И СтрТЧ.PCD								 = ИсходнаяСтрТЧ.PCD
				И СтрТЧ.PlasticInserts					 = ИсходнаяСтрТЧ.PlasticInserts
				И СтрТЧ.Polish							 = ИсходнаяСтрТЧ.Polish
				И СтрТЧ.Rivets							 = ИсходнаяСтрТЧ.Rivets
				И СтрТЧ.SSLip							 = ИсходнаяСтрТЧ.SSLip
				И СтрТЧ.Stripe							 = ИсходнаяСтрТЧ.Stripe
				И СтрТЧ.Undercut						 = ИсходнаяСтрТЧ.Undercut
				И СтрТЧ.Width							 = ИсходнаяСтрТЧ.Width
				И СтрТЧ.Базовая							 = ИсходнаяСтрТЧ.Базовая
				И СтрТЧ.БазоваяЦенаФОБ					 = ИсходнаяСтрТЧ.БазоваяЦенаФОБ
				И СтрТЧ.БазоваяЭкспортнаяUSD			 = ИсходнаяСтрТЧ.БазоваяЭкспортнаяUSD
				И СтрТЧ.ЦенаФОБ							 = ИсходнаяСтрТЧ.ЦенаФОБ
				И СтрТЧ.Вылет							 = ИсходнаяСтрТЧ.Вылет
				И СтрТЧ.Диаметр							 = ИсходнаяСтрТЧ.Диаметр
				И СтрТЧ.ДиаметрСтупицы					 = ИсходнаяСтрТЧ.ДиаметрСтупицы
				И СтрТЧ.Завод							 = ИсходнаяСтрТЧ.Завод
				И СтрТЧ.ЗаводДляТерминала				 = ИсходнаяСтрТЧ.ЗаводДляТерминала
				И СтрТЧ.КоличествоОтверстий				 = ИсходнаяСтрТЧ.КоличествоОтверстий
				И СтрТЧ.МаксимальнаяНагрузка			 = ИсходнаяСтрТЧ.МаксимальнаяНагрузка
				И СтрТЧ.МаксимальнаяНагрузка1			 = ИсходнаяСтрТЧ.МаксимальнаяНагрузка1
				И СтрТЧ.МинимальноДопустимаяНагрузка	 = ИсходнаяСтрТЧ.МинимальноДопустимаяНагрузка
				И СтрТЧ.Модель							 = ИсходнаяСтрТЧ.Модель
				И СтрТЧ.Подзавод						 = ИсходнаяСтрТЧ.Подзавод
				И СтрТЧ.Производитель					 = ИсходнаяСтрТЧ.Производитель
				И СтрТЧ.РасчетнаяЦенаФОБ				 = ИсходнаяСтрТЧ.РасчетнаяЦенаФОБ
				И СтрТЧ.Цвет							 = ИсходнаяСтрТЧ.Цвет
				И СтрТЧ.ЦенаСоСкидкой					 = ИсходнаяСтрТЧ.ЦенаСоСкидкой
				И СтрТЧ.Ширина							 = ИсходнаяСтрТЧ.Ширина
				И СтрТЧ.КрепежКоличество				 = ИсходнаяСтрТЧ.КрепежКоличество
				Тогда
				Сообщить("Строка с номенклатурой " + СтрТЧ.Номенклатура.Код + " не изменена. Новая карточка создана не будет во избежании дублирования.");
				Продолжить;
			КонецЕсли;
			
			НаименованиеНовойНоменклатуры = СтрТЧ.Номенклатура.Наименование;
			НаименованиеПолноеНовойНоменклатуры = СтрТЧ.Номенклатура.НаименованиеПолное;
			
			//Типоразмер
			Если СтрТЧ.Ширина <> ИсходнаяСтрТЧ.Ширина				
				ИЛИ СтрТЧ.Диаметр <> ИсходнаяСтрТЧ.Диаметр
				ИЛИ СтрТЧ.КоличествоОтверстий <> ИсходнаяСтрТЧ.КоличествоОтверстий
				ИЛИ СтрТЧ.Вылет <> ИсходнаяСтрТЧ.Вылет
				ИЛИ СтрТЧ.ДиаметрСтупицы <> ИсходнаяСтрТЧ.ДиаметрСтупицы Тогда
				
				НовыйТипоразмер = СтрТЧ.Ширина+"x"+СтрТЧ.Диаметр+"/"+СтрТЧ.КоличествоОтверстий+"x"+СтрТЧ.PCD+" ET"+СтрТЧ.Вылет+" D"+СтрТЧ.ДиаметрСтупицы;
				НовыйТипоразмер = стрЗаменить(НовыйТипоразмер,",",".");
				СпрТипоразмер = Справочники.Типоразмеры.НайтиПоНаименованию(НовыйТипоразмер);	
				
				Если СпрТипоразмер = Справочники.Типоразмеры.ПустаяСсылка() Тогда
					НетДублей = Истина; //если типоразмера нет, то гарантированно, что нет дублей создаваемой номенклатуры
					Сообщить("Добавлен НОВЫЙ типоразмер: "+НовыйТипоразмер, СтатусСообщения.Информация);
					СпрТипоразмерОб = Справочники.Типоразмеры.СоздатьЭлемент();
					СпрТипоразмерОб.Наименование = НовыйТипоразмер;
					СпрТипоразмерОб.Родитель = Справочники.Типоразмеры.НайтиПоКоду("232");
					СпрТипоразмерОб.Ширина              = СтрТЧ.Ширина;
					СпрТипоразмерОб.КоличествоОтверстий = СтрТЧ.КоличествоОтверстий;
					СпрТипоразмерОб.Диаметр             = СтрТЧ.Диаметр;
					СпрТипоразмерОб.PCD                 = стрЗаменить(СтрТЧ.PCD,",",".");
					СпрТипоразмерОб.Вылет               = СтрТЧ.Вылет;
					СпрТипоразмерОб.ДиаметрСтупицы      = стрЗаменить(СтрТЧ.ДиаметрСтупицы,",",".");
					СпрТипоразмерОб.Записать();
					СпрТипоразмер = СпрТипоразмерОб.Ссылка;
				КонецЕсли;
				
				Типоразмер = СпрТипоразмер.Ссылка;
				НаименованиеНовойНоменклатуры = СтрЗаменить(НаименованиеНовойНоменклатуры, СтрТЧ.Номенклатура.Типоразмер.Наименование, Типоразмер.Наименование);
				НаименованиеПолноеНовойНоменклатуры = СтрЗаменить(НаименованиеПолноеНовойНоменклатуры, СтрТЧ.Номенклатура.Типоразмер.Наименование, Типоразмер.Наименование);
			Иначе
				Типоразмер = СтрТЧ.Номенклатура.Типоразмер;
			КонецЕсли;
			
			//Производитель
			Если СтрТЧ.Производитель <> ИсходнаяСтрТЧ.Производитель Тогда
				НаименованиеНовойНоменклатуры = СтрЗаменить(НаименованиеНовойНоменклатуры, ИсходнаяСтрТЧ.Производитель.Наименование, СтрТЧ.Производитель.Наименование);
				НаименованиеПолноеНовойНоменклатуры = СтрЗаменить(НаименованиеПолноеНовойНоменклатуры, ИсходнаяСтрТЧ.Производитель.Наименование, СтрТЧ.Производитель.Наименование);
			КонецЕсли;
			
			//Модель
			Если СтрТЧ.Модель <> ИсходнаяСтрТЧ.Модель Тогда
				НаименованиеНовойНоменклатуры = СтрЗаменить(НаименованиеНовойНоменклатуры, ИсходнаяСтрТЧ.Модель.Наименование, СтрТЧ.Модель.Наименование);
				НаименованиеПолноеНовойНоменклатуры = СтрЗаменить(НаименованиеПолноеНовойНоменклатуры, ИсходнаяСтрТЧ.Модель.Наименование, СтрТЧ.Модель.Наименование);
			КонецЕсли;
			
			//Цвет
			Если СтрТЧ.Цвет <> ИсходнаяСтрТЧ.Цвет Тогда
				НаименованиеНовойНоменклатуры = СтрЗаменить(НаименованиеНовойНоменклатуры, ИсходнаяСтрТЧ.Цвет, СтрТЧ.Цвет);
				НаименованиеПолноеНовойНоменклатуры = СтрЗаменить(НаименованиеПолноеНовойНоменклатуры, ИсходнаяСтрТЧ.Цвет, СтрТЧ.Цвет);
			КонецЕсли;
			
			СпрОбъект = Справочники.Номенклатура.СоздатьЭлемент();	
			СпрОбъект.Наименование            = НаименованиеНовойНоменклатуры;
			СпрОбъект.НаименованиеПолное      = НаименованиеПолноеНовойНоменклатуры;
			СпрОбъект.ВидТовара               = Перечисления.ВидыТоваров.Диски;
			СпрОбъект.НоменклатурнаяГруппа    = СтрТЧ.НоменклатурнаяГруппа;
			Если СтрТЧ.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") Тогда //литые
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0001753");
			ИначеЕсли СтрТЧ.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") Тогда //штамп
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0001755");  
			ИначеЕсли СтрТЧ.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022") Тогда //ков
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("0080062");
			ИначеЕсли СтрТЧ.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00013") Тогда //грузовые
				СпрОбъект.Родитель            = Справочники.Номенклатура.НайтиПоКоду("9004163");
			КонецЕсли;
			СпрОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
			СпрОбъект.Производитель           = СтрТЧ.Производитель;
			СпрОбъект.Типоразмер              = Типоразмер;
			СпрОбъект.СтавкаНДС               = Перечисления.СтавкиНДС.НДС18;
			СпрОбъект.Модель                  = СтрТЧ.Модель;
			
			Если НетДублей = Ложь Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("СвойствоЦвет", СвойствоЦвет);
				Запрос.УстановитьПараметр("Цвет", СокрЛП(СтрТЧ.Цвет));
				Запрос.УстановитьПараметр("Производитель", СтрТЧ.Производитель);
				Запрос.УстановитьПараметр("Модель", СтрТЧ.Модель);
				Запрос.УстановитьПараметр("Типоразмер", Типоразмер);
				Запрос.Текст = "ВЫБРАТЬ
				               |	Номенклатура.Ссылка,
				               |	ЗначенияСвойствОбъектов.Значение
				               |ИЗ
				               |	Справочник.Номенклатура КАК Номенклатура
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				               |		ПО Номенклатура.Ссылка = ЗначенияСвойствОбъектов.Объект
				               |			И (ЗначенияСвойствОбъектов.Свойство = &СвойствоЦвет)
				               |ГДЕ
				               |	Номенклатура.Производитель = &Производитель
				               |	И Номенклатура.Модель = &Модель
				               |	И Номенклатура.Типоразмер = &Типоразмер
				               |	И ЗначенияСвойствОбъектов.Значение = &Цвет";
				РезультатДублей = Запрос.Выполнить().Выбрать();
				Если РезультатДублей.Количество() > 0 Тогда
					Сообщить("Уже есть номенклатура с параметрами: Производитель " + СтрТЧ.Производитель.Наименование + ", Модель " + СтрТЧ.Модель.Наименование + ", Типоразмер " + Типоразмер.Наименование + ", Цвет " + СтрТЧ.Цвет + ". Новая номенклатура создана не будет во избежании дублей.");
				Иначе
					НетДублей = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НетДублей Тогда
				
				СпрОбъект.Записать();
				СпрОбъект.Артикул = СпрОбъект.Код;
				СпрОбъект.Записать();
								
				Сообщить("("+СпрОбъект.Код+") "+НаименованиеНовойНоменклатуры);
				
				//Ед.измерения
				СпрЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				СпрЕдИзм.Владелец = СпрОбъект.Ссылка;
				СпрЕдИзм.ЕдиницаПоКлассификатору = СпрОбъект.БазоваяЕдиницаИзмерения;
				СпрЕдИзм.Коэффициент = 1;
				СпрЕдИзм.Наименование = "шт";
				СпрЕдИзм.УстановитьНовыйКод(Константы.ПрефиксКодаЕдиниц.Получить());
				СпрЕдИзм.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
				СпрЕдИзм.Вес = СтрТЧ.Вес;
				СпрЕдИзм.Объем = СтрТЧ.Объем;
				СпрЕдИзм.Записать();
				
				СпрОбъект.ЕдиницаХраненияОстатков = СпрЕдИзм.Ссылка;
				СпрОбъект.ЕдиницаДляОтчетов = СпрЕдИзм.Ссылка;
				
				СпрОбъект.Записать();
				
				//Вид упаковки
				МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗначенияСвойств.Объект = СпрОбъект.Ссылка;
				МенеджерЗначенияСвойств.Свойство = СвойствоВидУпаковки;
				МенеджерЗначенияСвойств.Прочитать();	
				ВидУпаковкиКоробка = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("коробка");
				Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоВидУпаковки;
					МенеджерЗначенияСвойств.Значение = ВидУпаковкиКоробка;
					МенеджерЗначенияСвойств.Записать();
				КонецЕсли;
				
				// Цвет
				Если НЕ СтрТЧ.Цвет = "" Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоЦвет;
					МенеджерЗначенияСвойств.Прочитать();	
					Если не МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоЦвет;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.Цвет;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				//Нагрузка
				Если НЕ СтрТЧ.МаксимальнаяНагрузка = 0 Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузкаП;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузкаП;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.МаксимальнаяНагрузка;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтрТЧ.МинимальноДопустимаяНагрузка = 0 Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоМинимальнаяНагрузка;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоМинимальнаяНагрузка;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.МинимальноДопустимаяНагрузка;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтрТЧ.МинимальноДопустимаяНагрузка = 0 Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.МинимальноДопустимаяНагрузка;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтрТЧ.МаксимальнаяНагрузка1 = 0 Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоМаксимальнаяНагрузка;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.МаксимальнаяНагрузка1;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				//Штрихкод
				ШтрихКод = "05000"+ СпрОбъект.Код;
				ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
				МенеджерШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				МенеджерШтрихкод.Владелец         = СпрОбъект.Ссылка;
				МенеджерШтрихкод.Штрихкод         = ШтрихКод;
				МенеджерШтрихкод.ТипШтрихкода     = СвойствоТипШтрихкода;
				МенеджерШтрихкод.ЕдиницаИзмерения = СпрЕдИзм.Ссылка; 
				МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
				МенеджерШтрихкод.Прочитать();	
				Если не МенеджерШтрихкод.Выбран() Тогда
					МенеджерШтрихкод.Владелец         = СпрОбъект.Ссылка;
					МенеджерШтрихкод.Код              = Число(СпрОбъект.Ссылка.Код);
					МенеджерШтрихкод.Штрихкод         = ШтрихКод;
					МенеджерШтрихкод.ТипШтрихкода     = СвойствоТипШтрихкода;
					МенеджерШтрихкод.ЕдиницаИзмерения = СпрЕдИзм.Ссылка; 
					МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
					МенеджерШтрихкод.Записать();
				КонецЕсли;
				
				//Заводы
				Если НЕ СтрТЧ.ЗаводДляТерминала = "" Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоЗаводДляТерминала;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоЗаводДляТерминала;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.ЗаводДляТерминала;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтрТЧ.Завод = "" Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоЗавод;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоЗавод;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.Завод;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СтрТЧ.Подзавод = "" Тогда
					МенеджерЗначенияСвойств = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
					МенеджерЗначенияСвойств.Свойство = СвойствоПодзавод;
					МенеджерЗначенияСвойств.Прочитать();	
					Если НЕ МенеджерЗначенияСвойств.Выбран() Тогда
						МенеджерЗначенияСвойств.Объект   = СпрОбъект.Ссылка;
						МенеджерЗначенияСвойств.Свойство = СвойствоПодзавод;
						МенеджерЗначенияСвойств.Значение = СтрТЧ.Подзавод;
						МенеджерЗначенияСвойств.Записать();
					КонецЕсли;
				КонецЕсли;
				
				//ЦенообразованиеФОБ
				МенеджерЦенообразованиеФОБ = РегистрыСведений.ЦенообразованиеФОБ.СоздатьМенеджерЗаписи();
				МенеджерЦенообразованиеФОБ.Номенклатура = СпрОбъект.Ссылка;
				МенеджерЦенообразованиеФОБ.Прочитать();	
				Если НЕ МенеджерЦенообразованиеФОБ.Выбран() Тогда
					МенеджерЦенообразованиеФОБ.Номенклатура		 = СпрОбъект.Ссылка;
					МенеджерЦенообразованиеФОБ.BigCap			 = СтрТЧ.BigCap;
					МенеджерЦенообразованиеФОБ.Cup				 = СтрТЧ.Cup;
					МенеджерЦенообразованиеФОБ.DoudleColor		 = СтрТЧ.DoudleColor;
					МенеджерЦенообразованиеФОБ.ECounting		 = СтрТЧ.ECounting;
					МенеджерЦенообразованиеФОБ.Lug				 = СтрТЧ.Lug;
					МенеджерЦенообразованиеФОБ.LugCount			 = СтрТЧ.LugCount;
					МенеджерЦенообразованиеФОБ.MaxLoadPrice		 = СтрТЧ.MaxLoadPrice;
					МенеджерЦенообразованиеФОБ.Milling			 = СтрТЧ.Milling;
					МенеджерЦенообразованиеФОБ.PlastiicInserts	 = СтрТЧ.PlasticInserts;
					МенеджерЦенообразованиеФОБ.Polish			 = СтрТЧ.Polish;
					МенеджерЦенообразованиеФОБ.Rivets			 = СтрТЧ.Rivets;
					МенеджерЦенообразованиеФОБ.SSLip			 = СтрТЧ.SSLip;
					МенеджерЦенообразованиеФОБ.Stripe			 = СтрТЧ.Stripe;
					МенеджерЦенообразованиеФОБ.Undercut			 = СтрТЧ.Undercut;
					МенеджерЦенообразованиеФОБ.Width			 = СтрТЧ.Width;
					МенеджерЦенообразованиеФОБ.КрепежКоличество  = СтрТЧ.КрепежКоличество;
					МенеджерЦенообразованиеФОБ.БазоваяЦена 		 = СтрТЧ.БазоваяЦенаФОБ;
					МенеджерЦенообразованиеФОБ.ЦенаСоСкидкой 	 = СтрТЧ.ЦенаСоСкидкой;
					МенеджерЦенообразованиеФОБ.РасчетнаяЦенаФОБ  = СтрТЧ.РасчетнаяЦенаФОБ;
					МенеджерЦенообразованиеФОБ.Записать();
				КонецЕсли;
				
				//ЦеныФОП
				НаборЗаписей = РегистрыСведений.ЦеныФОП.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Установить(СпрОбъект.Ссылка);
				НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
				НовЗапись = НаборЗаписей.Добавить();
				НовЗапись.Номенклатура = СпрОбъект.Ссылка;
				НовЗапись.Период  = ТекущаяДата();
				НовЗапись.Цена = СтрТЧ.ЦенаФОБ;
				НаборЗаписей.Записать(Истина);				
				
				//Цены
				строкаЦена = ТаблицаЦен.Добавить();
				строкаЦена.Номенклатура = СпрОбъект.Ссылка; 
				строкаЦена.Базовая = СтрТЧ.Базовая;
				строкаЦена.БазоваяUSD = СтрТЧ.БазоваяЭкспортнаяUSD;
				
			КонецЕсли; //нет дублей
						
		КонецЕсли;
		
	КонецЦикла;
	
	
	//Установка цен номенклатуры
	Если ТаблицаЦен.Количество()>0 Тогда
		ДокУЦН = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		ДокУЦН.Дата = ТекущаяДата();
		
		ТипЦенБазовая = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
		ТипЦенБазоваяUSD = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028");
		
		строкаТипыЦен = ДокУЦН.ТипыЦен.Добавить();
		строкаТипыЦен.ТипЦен = ТипЦенБазовая;
		строкаТипыЦен = ДокУЦН.ТипыЦен.Добавить();
		строкаТипыЦен.ТипЦен = ТипЦенБазоваяUSD;
		инд = 1;
		Для счСтрок = 0 ПО ТаблицаЦен.Количество()-1 Цикл
			строкаТовары                 		 = ДокУЦН.Товары.Добавить();
			строкаТовары.Номенклатура    		 = ТаблицаЦен[счСтрок].Номенклатура;
			строкаТовары.Цена            		 = ТаблицаЦен[счСтрок].Базовая;
			строкаТовары.Валюта         	 	 = Константы.ВалютаУправленческогоУчета.Получить();
			строкаТовары.ЕдиницаИзмерения		 = строкаТовары.Номенклатура.ЕдиницаХраненияОстатков;
			строкаТовары.ТипЦен          		 = ТипЦенБазовая;
			строкаТовары.ИндексСтрокиТаблицыЦен	 = инд;
			
			строкаТовары                 		 = ДокУЦН.Товары.Добавить();
			строкаТовары.Номенклатура    		 = ТаблицаЦен[счСтрок].Номенклатура;
			строкаТовары.Цена            		 = ТаблицаЦен[счСтрок].БазоваяUSD;
			строкаТовары.Валюта          		 = Справочники.Валюты.НайтиПоКоду("840");
			строкаТовары.ЕдиницаИзмерения		 = строкаТовары.Номенклатура.ЕдиницаХраненияОстатков;
			строкаТовары.ТипЦен          		 = ТипЦенБазоваяUSD;
			строкаТовары.ИндексСтрокиТаблицыЦен	 = инд;
			инд = инд + 1;
		КонецЦикла; 
		ДокУЦН.ПолучитьФорму().Открыть();	
	КонецЕсли;
	
КонецПроцедуры

