Перем тзОригинал, ШагДерева;

Перем ТипЦенБазовая,ТипЦенКрупныйОпт;
//Перем ТипЦенЯкорь,	ТипЦенРеккомендРозн;
Перем СписокПроизводителиШин, СписокПроизводителиДисков;
Перем СписокПапкиШин, СписокПапкиДисков;
Перем ОтборДляПроверкиДублей, мас;
перем МаксСкидкаПредоплаты;
перем таблСогл;

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок ="Общие правила ценообразования ОБЩИЕ для всех клиентов";
		                                                                                                                         //новые поля (различия!!!)
	ОтборДляПроверкиДублей=новый структура("ВидТовара,Производитель,НоменклатурнаяГруппа,ВходитВПапку,Диаметр,Номенклатура,Подстрока,  ВидДефектаДляУценки, Категория");
	
	ЗаполнитьДанныеТаблицы();
	ЗаполнитьСпискиПроизводителей();
	
	ЭлементыФормы.ТабличнаяЧастьПравила.РежимВводаСтрок = РежимВводаСтрокТабличногоПоля.ПередТекущейСтрокой;
	//ЗаполнитьПапки();
	
	КрасныйПорог = 1.0; //при превышении макс.процента на 3% - ярко-красные!
	Флажок2 = Истина;
	
	Менеджер = глТекущийПользователь;	
	
	Флажок3 =Истина;
	ЭлементыФормы.ДеревоПравил.видимость = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьПравила.Видимость  = НЕ Флажок3;
	Если Флажок3 тогда
		ОбновитьДерево();
	КонецЕсли;

	
	Если РольДоступна("ПолныеПрава") или РольДоступна("ПравоЗавершенияРаботыПользователей") 
		или МенеджерЯвляетсяРуководителем(Менеджер)
		тогда
		ЭлементыФормы.Менеджер.Доступность = истина;
	КонецЕсли;	
	
КонецПроцедуры

//10.02.2017 - для Филатовой
функция МенеджерЯвляетсяРуководителем(Менеджер)
	рез = ложь;
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	НаправленияПродаж.Ссылка
	                |ИЗ
	                |	Справочник.НаправленияПродаж КАК НаправленияПродаж
	                |ГДЕ
	                |	(НаправленияПродаж.Руководитель = &Руководитель
	                |			ИЛИ НаправленияПродаж.Согласование = &Руководитель)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	Подразделения.Ссылка
	                |ИЗ
	                |	Справочник.Подразделения КАК Подразделения
	                |ГДЕ
	                |	Подразделения.Руководитель = &Руководитель";
	 Запрос.УстановитьПараметр("Руководитель",Менеджер );
	 Результат = Запрос.Выполнить();
	 рез = не результат.Пустой();	
	 
	возврат рез;
КонецФункции

Процедура  ЗаполнитьДанныеТаблицы()
	ТабличнаяЧастьПравила.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	*,
	              |	Правила.НоменклатурнаяГруппа.Ответственный КАК Менеджер,
	              |	ВЫБОР
	              |		КОГДА Правила.Приоритет < 0
	              |			ТОГДА ИСТИНА
	              |		ИНАЧЕ ЛОЖЬ
	              |	КОНЕЦ КАК Исключительное
	              |ИЗ
	              |	РегистрСведений.ПравилаЦенообразованияОбщие КАК Правила
	              |ГДЕ  Правила.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
	              |УПОРЯДОЧИТЬ ПО
	              |	Правила.Приоритет";
	
	тзОригинал=Запрос.Выполнить().Выгрузить();
	Для каждого стрТЗ из тзОригинал Цикл
		ФлагЕстьЗаписи = Истина;
		НоваяСтрока=ТабличнаяЧастьПравила.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, стрТЗ);
		
		Сортировка=0;  //+++ 27.01.2014  Сортировка "-1" действительно "-" приоритет!
		Если ЗначениеЗаполнено(НоваяСтрока["Номенклатура"]) или ЗначениеЗаполнено(НоваяСтрока["ПодСтрока"]) тогда
			Сортировка=-1;
		ИначеЕсли
			ЗначениеЗаполнено(НоваяСтрока["ВидТовара"])и
			не ЗначениеЗаполнено(НоваяСтрока["Производитель"])и
			не ЗначениеЗаполнено(НоваяСтрока["НоменклатурнаяГруппа"])и
			не ЗначениеЗаполнено(НоваяСтрока["ВходитВПапку"])и
			не ЗначениеЗаполнено(НоваяСтрока["Диаметр"])и
			не ЗначениеЗаполнено(НоваяСтрока["ПодСтрока"])тогда
			Сортировка=1;
		КонецЕсли;
		НоваяСтрока.Сортировка=Сортировка;
	КонецЦикла;
	ТабличнаяЧастьПравила.Сортировать("Сортировка Возр, Приоритет Возр");
	
	//Если не Менеджер.Пустая() тогда//+++ 26.08.2015
	//	ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.Использование = Истина;
	//	ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.ВидСравнения = ВидСравнения.Равно;
	//	ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.значение = Менеджер;
	//Иначе
		ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Менеджер.Использование = ЛОЖЬ;
   // КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСпискиПроизводителей()
	Запрос =Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ  РАЗЛИЧНЫЕ
	|	Номенклатура.Производитель Производитель,
	|	Номенклатура.ВидТовара ВидТовара
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(	,
	|			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
	|				ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|				И Номенклатура.Производитель<>Значение(Справочник.Производители.ПустаяСсылка)	) 
	|УПОРЯДОЧИТЬ ПО Номенклатура.ВидТовара, Номенклатура.Производитель.Наименование	";
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	СписокПроизводителиШин.Очистить();
	СписокПроизводителиДисков.Очистить();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
			СписокПроизводителиШин.Добавить(Выборка.Производитель);	
		ИначеЕсли Выборка.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
			СписокПроизводителиДисков.Добавить(Выборка.Производитель);	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТабличнаяЧастьПравилаПроизводительНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПроизводителиДисков.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПроизводителиДисков[сч].Значение);
		КонецЦикла;	
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПроизводителиШин.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПроизводителиШин[сч].Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВидТовараПриИзменении(Элемент)
		ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		//Если ТекДанные.ВидТовара= Перечисления.ВидыТоваров.Диски Тогда
			ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен = ТипЦенБазовая;
		//ИначеЕсли  ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		//	ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен = ТипЦенБазовая;
		//КонецЕсли;	

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаТипЦенНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая);
	ИначеЕсли 	ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(ТипЦенБазовая); 
		//Элемент.СписокВыбора.Добавить(ТипЦенКрупныйОпт); 
		//Элемент.СписокВыбора.Добавить(ТипЦенЯкорь);
		//Элемент.СписокВыбора.Добавить(ТипЦенРеккомендРозн);
	КонецЕсли;	

КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	//н1=-1; н2=3;  // ВСЕ правила перезаписываются!
		
	Если Флажок3 тогда 
		н1=0; н2=3;  // без категории - уже прочитано... или (-1) пишем как по 3-ей категории!
	иначе 
		н1=-1; н2=-1; //!!! -1-1 ТОЛЬКО без категории!    или (-1 до +3) для переноса в категории >> 2=3 категории
	КонецЕсли;
	
	
	ФлагОтказ=ЛОЖЬ;

Если НЕ флажок3 тогда // проверки	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Перед сохраненением - восстановлена сортировка правил. Продолжить сохраненение?"";"
	     + " en = ""Do you want to continue?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;
 
	
	//+++ 19.07.2016 отключить отбор!
	ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.Сбросить();
	ТабличнаяЧастьПравила.Сортировать( "Приоритет"); //+++ обязательно еще раз!?   новые правила с 0 приоритетом!?
		
	ФлагОтказ = Ложь;
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаЧастьПравила=ТабличнаяЧастьПравила[сч];
	
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ВидТовара) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнено ОБЯЗАТЕЛЬНОЕ ПОЛЕ Вид товара! "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
		
		Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ТипЦен) Тогда
			СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен тип цен! "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ОтборДляПроверкиДублей, СтрокаЧастьПравила);
		Если ТабличнаяЧастьПравила.НайтиСтроки(ОтборДляПроверкиДублей).Количество()>1 тогда
			СообщитьОбОшибке("Строка № "+СтрокаЧастьПравила.НомерСтроки+". Дубль строки! Запись: "
			+строка(ОтборДляПроверкиДублей.ВидТовара)+" => "+строка(ОтборДляПроверкиДублей.НоменклатурнаяГруппа)+" => "+строка(ОтборДляПроверкиДублей.Производитель)+"...");
			ФлагОтказ = Истина;
		КонецЕсли;	
	КонецЦикла;		
КонецЕсли;

Если Флажок3 тогда //------------дерево-------------------
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "ru = ""Вы действительно хотите изменить все НОВЫЕ правила?"";"
	     + " en = ""Do you want to continue?""";
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	    Возврат;
	КонецЕсли;

	
	Если не Менеджер.Пустая() тогда //12.09.2016
		Предупреждение("Нельзя записывать правила, если выбран 1 менеджер!", 30);
		ВОЗВРАТ;
	КонецЕсли;
	
		номерСтроки=0;
		для каждого стр1 из ДеревоПравил.Строки цикл
			если стр1.Строки.Количество()=0 тогда
				Сообщить("Для 1 группы "+строка(стр1)+" - автоматически добавлена вложенная группа.");
				стр2 = стр1.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр2, стр1);
			КонецЕсли;	
				
			для каждого стр2 из стр1.Строки цикл
				если стр2.Строки.Количество()=0 тогда
				Сообщить("Для 2 группы "+строка(стр2)+" - автоматически добавлена такая же вложенная группа.");
				стр3 = стр2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр3, стр2);
				КонецЕсли;	

				для каждого стр3 из стр2.Строки цикл
					если стр3.Строки.Количество()=0 тогда
					Сообщить("Для 3 группы "+строка(стр3)+" - автоматически добавлена такая же вложенная группа.");
					стр4 = стр3.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр4, стр3);
					КонецЕсли;	

			        номерСтроки = номерСтроки + ШагДерева;
					стр3.Строки.Сортировать("Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, НомерСтроки");
					нн=0;
					
					для каждого СтрокаЧастьПравила из стр3.Строки цикл
					нн=нн+1;
                    СтрокаЧастьПравила.НомерСтроки = номерСтроки + нн;
					
					Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ВидТовара) Тогда
						СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен Вид товара!");
						ФлагОтказ = Истина;
					КонецЕсли;
					
					//Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.Производитель) Тогда
					//	СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен Производитель!");
					//	ФлагОтказ = Истина;
					//КонецЕсли;
					//Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.НоменклатурнаяГруппа) Тогда
					//	СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнена Тов.Группа!");
					//	ФлагОтказ = Истина;
					//КонецЕсли;	
					
					Если ЗначениеНеЗаполнено(СтрокаЧастьПравила.ТипЦен) Тогда
						СообщитьОбОшибке("В строке № "+Строка(СтрокаЧастьПравила.НомерСтроки) + "не заполнен Тип цен!");
						ФлагОтказ = Истина;
					КонецЕсли;	
					
					//ЗаполнитьЗначенияСвойств(ОтборДляПроверкиДублей, СтрокаЧастьПравила);
					//Если ТабличнаяЧастьПравила.НайтиСтроки(ОтборДляПроверкиДублей).Количество()>1 тогда
					//	СообщитьОбОшибке("Строка № "+СтрокаЧастьПравила.НомерСтроки+". Такая запись уже есть.");
					//	ФлагОтказ = Истина;
					//КонецЕсли;	
							
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
КонецЕсли;	

	Если ФлагОтказ Тогда
		Возврат;
	КонецЕсли;	
	
//============================================================================================
	НаборЗаписей = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
//	НаборЗаписей.Записать(); // ПОлная очистка!
	

	Запрос = Новый Запрос;   // загрузка 2-ой части правил...
	Если Флажок3 тогда
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
		|ГДЕ
		|	ПравилаЦенообразованияОбщие.Категория = &Категория";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
		|ГДЕ
		|	ПравилаЦенообразованияОбщие.Категория <> &Категория";
	КонецЕсли;	
	Запрос.УстановитьПараметр("Категория", перечисления.КатегорииСкидок.ПустаяСсылка() );
	Результат = Запрос.Выполнить();
	НаборЗаписей = Результат.Выгрузить(); // Таблица значений!!!
	
	
	
	
	Если НЕ Флажок3 тогда
		
//-----------сравниваем с предыдущими правилами--------------------			
	НаборЗаписей0 = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
	  НаборЗаписей0.Отбор.Категория.ВидСравнения = ВидСравнения.Равно;
	  НаборЗаписей0.Отбор.Категория.Значение     = перечисления.КатегорииСкидок.ПустаяСсылка();
	  НаборЗаписей0.Отбор.Категория.Использование = Истина;
	НаборЗаписей0.Прочитать();
	таблНаборЗаписей0 = НаборЗаписей0.Выгрузить();
		
	Для  сч=0 по ТабличнаяЧастьПравила.Количество()-1 Цикл
		СтрокаТабЧасти=ТабличнаяЧастьПравила[сч];
		//если НЕ СтрокаТабЧасти.Категория.Пустая() тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НоваяЗапись=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТабЧасти);
		
//+++ 27.01.2014 ------отрицательный приоритет (<-1000) - это спецУсловие, перекрывающее все частные правила!----------------------------		
//28.09.2015 - НЕ сдвигаем на 1000, чтобы можно было у клиента назначать правило!
Если (СтрокаТабЧасти.Исключительное) тогда //ЦМК Импорт + Производитель!
	НоваяЗапись.Приоритет = СтрокаТабЧасти.НомерСтроки - 2000; // частные правила сдвигаем ВЫШЕ ВСЕХ!
Иначе
	НоваяЗапись.Приоритет = СтрокаТабЧасти.НомерСтроки;
КонецЕсли;
   СтрокаТабЧасти.Приоритет = НоваяЗапись.Приоритет;
   
		//5 кодов   .Код=  
		НоваяЗапись.ID = ПолучитьНовыйID(НоваяЗапись);
		
		НоваяЗапись.Категория = перечисления.КатегорииСкидок.ПустаяСсылка(); // ЯВНО УКАЖЕМ !
		
//------------------проверка на изменение другим менеджером----------------		
	 	Если НЕ СтрокаТабЧасти.Изменен тогда
			строки1 = таблНаборЗаписей0.НайтиСтроки(новый Структура("ID", НоваяЗапись.ID));
			если строки1.Количество()>0 тогда
			ЗаполнитьЗначенияСвойств(НоваяЗапись, строки1[0]);
			НоваяЗапись.Приоритет = СтрокаТабЧасти.Приоритет;
			КонецЕсли;
 		КонецЕсли;
	
	КонецЦикла;
	КонецЕсли;//    Иначе // NEW	 
	
	Если Флажок3 тогда
    номерСтр = 1;
	для каждого стр1 из ДеревоПравил.Строки цикл
		для каждого стр2 из стр1.Строки цикл
			для каждого стр3 из стр2.Строки цикл
				для каждого стр4 из стр3.Строки цикл
						
			для i=н1 по н2 цикл
				НоваяЗапись=НаборЗаписей.Добавить(); //!!!
				ЗаполнитьЗначенияСвойств(НоваяЗапись, стр4 );
				
				если i<0 тогда
				кат = перечисления.КатегорииСкидок.ПустаяСсылка();
					НоваяЗапись.СкидкаНаценка    = стр4["СкидкаНаценка3"];
					НоваяЗапись.СкидкаПредоплаты = стр4["СкидкаПредоплаты3"];
			 	иначе
				кат = перечисления.КатегорииСкидок.Получить(i); // от 0 до 3 => к3,2,1,VIP
					НоваяЗапись.СкидкаНаценка    = стр4["СкидкаНаценка"+строка(кат)];
					НоваяЗапись.СкидкаПредоплаты = стр4["СкидкаПредоплаты"+строка(кат)];
			    КонецЕсли;

//--------------------------------у всех правил пишем вот такое условие!!!-------------------------				
				НоваяЗапись.МаксСкидкаНаценкаРук    = стр4.СкидкаНаценка1;
				НоваяЗапись.МаксСкидкаПредоплатыРук = стр4.СкидкаПредоплаты1;
				
				НоваяЗапись.МаксСкидкаНаценка       = стр4.СкидкаНаценкаVIP;
				НоваяЗапись.МаксСкидкаПредоплаты    = стр4.СкидкаПредоплатыVIP;
				
				НоваяЗапись.Категория = кат;
				НоваяЗапись.ID = ПолучитьНовыйID(НоваяЗапись);  //у всех категорий - единый ID
			
				//-------------как сдвигать?!-------------
				Если стр4.Искл и стр4.НомерСтроки>0 тогда
					НоваяЗапись.Приоритет = номерСтр - 2000; // частные правила сдвигаем ВЫШЕ ВСЕХ!
				Иначе
					НоваяЗапись.Приоритет = номерСтр;
				КонецЕсли;
				
				//30.09.2016
				//НоваяЗапись.ИспользоватьТранспорт = стр4.ИспользоватьТранспорт;
				
				
				попытка
					Сообщить(строка(НоваяЗапись.Приоритет)+") "+строка(новаяЗапись.ВидТовара)+"->"+строка(новаяЗапись.НоменклатурнаяГруппа)+"->"+строка(новаяЗапись.Производитель)+" => "
					+строка(новаяЗапись.ВходитВПапку)+строка(новаяЗапись.ВидДефектаДляУценки)
					+строка(новаяЗапись.ПодСтрока)+строка(новаяЗапись.Номенклатура)
					+строка(новаяЗапись.Диаметр)+"..." );
				//	НоваяЗапись.Записать();
				исключение
					Сообщить(строка(НоваяЗапись.Приоритет)+") "+строка(новаяЗапись.ВидТовара)+"->"+строка(новаяЗапись.НоменклатурнаяГруппа)+"->"+строка(новаяЗапись.Производитель)+" => "
					+ ОписаниеОшибки() , СтатусСообщения.Внимание);
				КонецПопытки;	
					
			КонецЦикла;  //--------------------все категории с 1 номером!-----------------------
					номерСтр = номерСтр+1;
		
				КонецЦикла;//4
			КонецЦикла;//3	
		КонецЦикла;//2	
	КонецЦикла;	//1

КонецЕсли;

	//============Полная Очистка =======================================	
	НачатьТранзакцию();
	попытка
		НаборЗаписей1 = РегистрыСведений.ПравилаЦенообразованияОбщие.СоздатьНаборЗаписей();
		НаборЗаписей1.Записать(); // ПОлная очистка!
		
		НаборЗаписей1.Загрузить( НаборЗаписей );
		НаборЗаписей1.Записать();
		ЭтаФорма.Модифицированность = ложь;	
		//Закрыть();
	ЗафиксироватьТранзакцию();	
		Предупреждение("Данные записаны!", 10);
		
	исключение
	ОтменитьТранзакцию();	
		Сообщить("ОШИБКА при записи: "+ ОписаниеОшибки(), СтатусСообщения.Внимание);
		Предупреждение("Данные НЕ изменились!", 10);
	КонецПопытки;	
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаНоменклатурнаяГруппаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если Не ЗначениеНеЗаполнено(ТекДанные.Производитель) Тогда
		Запрос =Новый Запрос;
		Запрос.Текст = "   ВЫБРАТЬ РАЗЛИЧНЫЕ
		|НоменклатурнаяГруппа ИЗ
		|Справочник.Номенклатура ГДЕ Производитель = &Производитель
		| И НоменклатурнаяГруппа<>Значение(Справочник.НоменклатурныеГруппы.ПустаяСсылка)" ;
		
		Запрос.УстановитьПараметр("Производитель",ТекДанные.Производитель);
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Элемент.СписокВыбора.Добавить(Выборка.НоменклатурнаяГруппа);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаВходитВПапкуНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	 ТекДанные =ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	//СтандартнаяОбработка = Ложь;
	Если ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиДисков.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиДисков[сч].Значение);
		КонецЦикла;	
		
	ИначеЕсли ТекДанные.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Элемент.СписокВыбора.Очистить();	
		Для сч=0 по СписокПапкиШин.Количество()-1 Цикл
			Элемент.СписокВыбора.Добавить(СписокПапкиШин[сч].Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	КолФлаг=0;
	табл = ПолучитьКоличествоЭлементовВСтолбце("Флаг", истина);
	стр1 = табл.Найти(Истина, "Поле");
	если стр1 <> неопределено тогда 
		КолФлаг =стр1.Значение; 
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность или КолФлаг>0 тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Сохранить изменения Правил?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КнопкаВыполнитьНажатие(неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПравилаПроверить(Кнопка)
	
	t = ТекущаяДата();
	попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ Номенклатура
		|ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,(НЕ Склад.Транзитный) И (НЕ Склад.ЗапретитьИспользование)) КАК ТоварыНаСкладахОстатки
		|ГДЕ ТоварыНаСкладахОстатки.КоличествоОстаток >= 4";
		Результат = Запрос.Выполнить();
		таблЗнач1 = Результат.Выгрузить();
		СписТов = новый СписокЗначений;
		СписТов.ЗагрузитьЗначения(таблЗнач1.ВыгрузитьКолонку("Номенклатура"));
		
		ТаблПравил = ТабличнаяЧастьПравила.Выгрузить();
		рез = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, СписТов, ЛОЖЬ, ТаблПравил);
			
		t = ТекущаяДата() - t;
		Предупреждение("Правила для "+строка(СписТов.Количество())+" товаров формируются "+строка(t)+" сек.");
		
	исключение
		Предупреждение("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;

	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
//	проверка на дубли
	ЗаполнитьЗначенияСвойств(ОтборДляПроверкиДублей,Элемент.ТекущаяСтрока);
	Если ТабличнаяЧастьПравила.НайтиСтроки(ОтборДляПроверкиДублей).Количество()>1 тогда
		Предупреждение("Такая запись уже есть!",10,"Внимание.");
	//	Отказ = истина;
		возврат;
	КонецЕсли;		
стр1 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
стр1.изменен = истина;

	//ЭтаФорма.Модифицированность = истина;
	//Сортировка=0;
	//Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Номенклатура"]) или ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ПодСтрока"]) тогда
	//	Сортировка=-1;
	//ИначеЕсли
	//	ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ВидТовара"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Производитель"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["НоменклатурнаяГруппа"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ВходитВПапку"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["Диаметр"])и
	//	не ЗначениеЗаполнено(Элемент.ТекущаяСтрока["ПодСтрока"])тогда
	//	Сортировка=1;
	//КонецЕсли;	
	//Элемент.ТекущаяСтрока.Сортировка = Сортировка;
	//ТабличнаяЧастьПравила.Сортировать("Сортировка, Приоритет");
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПередУдалением(Элемент, Отказ)
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	Если НЕ текСтр.НоменклатурнаяГруппа.Пустая() тогда
		Если текСтр.НоменклатурнаяГруппа.Ответственный <> ПараметрыСеанса.ТекущийПользователь 
			и НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") тогда  //для админов - можно
			Предупреждение("Вы не имеете права удалять правило
							|для номенклатурной группы: "+строка(текСтр.НоменклатурнаяГруппа)+"
							|Это может делать только Ответственный за эту группу",30);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы уверены в необходимости удаления этого правила?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Отказ = Истина;
		КонецЕсли;
	
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = текСтр.Диаметр;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		текСтр.Диаметр = рез;
	КонецЕсли;	

КонецПроцедуры

Процедура ТабличнаяЧастьПравилаНоменклатураПриИзменении(Элемент)
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ВидТовара = Элемент.Значение.ВидТовара;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.НоменклатурнаяГруппа = Элемент.Значение.НоменклатурнаяГруппа;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.Производитель = Элемент.Значение.Производитель;
	 ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.ТипЦен =  ТипЦенБазовая;
	 
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельПравилаДействие9(Кнопка)
//ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.	
ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.ВидТовара.Значение=Перечисления.ВидыТоваров.Диски;
ЭлементыФормы.ТабличнаяЧастьПравила.ОтборСтрок.ВидТовара.Использование = Истина;

КонецПроцедуры

//================================================================
Процедура КоманднаяПанель1ОбновитьСписок(Кнопка)
	
	
	ТаблицаКлиентов.Очистить();
	ЭтаФорма.Обновить();
	
	если флажок3 тогда
		стр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	иначе	
		стр1 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	КонецЕсли;

	Если стр1=неопределено тогда
	//	Предупреждение("Выберите строку Общих правил!");
		возврат;
	КонецЕсли;
	
	Состояние("Идет поиск всех правил клиентов по выбранному Общему правилу...");
 
	Запрос = Новый Запрос;
	Если ФлВсеКлиенты тогда
		
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЛОЖЬ КАК Флаг,
	                |	ПравилаЦенообразования.Контрагент,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
	                |	ПравилаЦенообразования.Приоритет,
	                |	ПравилаЦенообразования.СкидкаНаценка,
	                |	ПравилаЦенообразования.СкидкаПредоплаты,
					
				    |	ПравилаЦенообразования.Диаметр,

					|	ПравилаЦенообразования.ТипЦен,
	                |	ПравилаЦенообразования.Категория,
	                |	ПравилаЦенообразования.Отклонение,
					
					|	ПравилаЦенообразования.ID,
					|	ПравилаЦенообразования.Выключено,
	            	
	            	|	&ВидТовара как ВидТовара,
					|	&НоменклатурнаяГруппа как НоменклатурнаяГруппа,
					|	&Производитель как Производитель,
					|	&Номенклатура как Номенклатура,
					|   &ВходитВПапку как ВходитВПапку,
					|	&ПодСтрока как ПодСтрока,
					|	&ВидДефектаДляУценки как ВидДефектаДляУценки,
					//13.01.2017
                    |	ПравилаЦенообразования.ТрКлиента как ТрКлиента,
					
				  	|	ПравилаЦенообразования.Контрагент.КатегорияПокупателя КАК КатегорияПокупателя,
					
					|	КонтактнаяИнформацияФакт.Поле2 КАК РегионФактАдрес,
					|	КонтактнаяИнформацияФакт.Поле4 КАК Город
					
	                |ИЗ (					
//========ОТДЕЛЬНЫЕ ЗАПРОСЫ======================================================	
	    			|ВЫБРАТЬ
|	ВсеПравила.Контрагент,
|	ЕСТЬNULL(персПравила.Категория, ВсеПравила.Категория) КАК Категория,

|	ЕСТЬNULL(персПравила.Приоритет, ВсеПравила.Приоритет) КАК Приоритет,
|	ЕСТЬNULL(персПравила.СкидкаНаценка, ВсеПравила.СкидкаНаценка) КАК СкидкаНаценка,
|	ЕСТЬNULL(персПравила.СкидкаПредоплаты, ВсеПравила.СкидкаПредоплаты) КАК СкидкаПредоплаты,
|	ЕСТЬNULL(персПравила.Отклонение, 0) как Отклонение,
//|	ЕСТЬNULL(персПравила.ВидДефектаДляУценки,ВсеПравила.ВидДефектаДляУценки) как ВидДефектаДляУценки,

//----13.01.2017---
|	ВЫБОР КОГДА ЕСТЬNULL(персПравила.ТрКлиента,0) = 0 
|		  ТОГДА ВсеПравила.ТрКлиента 
|		  ИНАЧЕ ЕСТЬNULL(персПравила.ТрКлиента,0) 
|	КОНЕЦ как ТрКлиента,

|	ЕСТЬNULL(персПравила.Диаметр, ВсеПравила.Диаметр) как Диаметр,
|	ЕСТЬNULL(персПравила.ТипЦен,ВсеПравила.ТипЦен) как ТипЦен,
|	ЕСТЬNULL(персПравила.ID, ВсеПравила.ID) как ID,

|	ЕСТЬNULL(персПравила.Выключено, ЛОЖЬ) как Выключено,
|	ЕСТЬNULL(персПравила.Бонус,0) как Бонус,
|	ЕСТЬNULL(персПравила.ОТК, 0) как ОТК,
|	ЕСТЬNULL(персПравила.Коэф, 0) как Коэф,
|	ЕСТЬNULL(персПравила.Бонус1,0) как Бонус1
|ИЗ
|	(ВЫБРАТЬ
|		Контр.Ссылка КАК Контрагент,
|		Контр.Категория КАК Категория,
|		Контр.ТрКлиента как ТрКлиента,
|		общиеПравила.Приоритет КАК Приоритет,
|		общиеПравила.СкидкаНаценка КАК СкидкаНаценка,
|		общиеПравила.СкидкаПредоплаты КАК СкидкаПредоплаты,
|		общиеПравила.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
|		общиеПравила.Диаметр КАК Диаметр,
|		общиеПравила.ТипЦен КАК ТипЦен,
|		общиеПравила.ID КАК ID
|	ИЗ
|		(ВЫБРАТЬ
|			Клиенты.Ссылка КАК Ссылка,
|			ЕСТЬNULL(КатегорииКлиента.Категория, ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.к3)) КАК Категория,
//13.01.2017
|			ЕСТЬNULL(КатегорииКлиента.ТрКлиента,0) КАК ТрКлиента

|		ИЗ
|			Справочник.Контрагенты КАК Клиенты
|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|					КатегорииКлиента.Ссылка КАК Ссылка,
|					КатегорииКлиента.Категория КАК Категория,
//13.01.2017
|					КатегорииКлиента.ТрКлиента КАК ТрКлиента
|				ИЗ
|					Справочник.Контрагенты.КатегорияСкидок КАК КатегорииКлиента
|				ГДЕ
|					КатегорииКлиента.ВидТовара = &ВидТовара
|					И КатегорииКлиента.Ссылка.ОсновнойМенеджерКонтрагента = &Менеджер) КАК КатегорииКлиента
|				ПО Клиенты.Ссылка = КатегорииКлиента.Ссылка
|		ГДЕ
|			Клиенты.ОсновнойМенеджерКонтрагента = &Менеджер) КАК Контр
|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|				ОбщиеПр.Приоритет КАК Приоритет,
|				ОбщиеПр.Категория КАК Категория,
|				ОбщиеПр.Диаметр КАК Диаметр,
|				ОбщиеПр.ТипЦен КАК ТипЦен,
|				ОбщиеПр.СкидкаНаценка КАК СкидкаНаценка,
|				ОбщиеПр.СкидкаПредоплаты КАК СкидкаПредоплаты,
|				ОбщиеПр.ID КАК ID,
|				ОбщиеПр.ВидДефектаДляУценки КАК ВидДефектаДляУценки
|			ИЗ
|				РегистрСведений.ПравилаЦенообразованияОбщие КАК ОбщиеПр
|			ГДЕ
|				ОбщиеПр.ВидТовара = &ВидТовара
|				И ОбщиеПр.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
|				И ОбщиеПр.Производитель = &Производитель
|				И ОбщиеПр.Номенклатура = &Номенклатура
|				И ОбщиеПр.ВходитВПапку = &ВходитВПапку
|				И ОбщиеПр.ПодСтрока = &ПодСтрока
|				И ОбщиеПр.ВидДефектаДляУценки = &ВидДефектаДляУценки
|				И ОбщиеПр.Диаметр = &Диаметр
|				И ОбщиеПр.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)) КАК общиеПравила
|			ПО Контр.Категория = общиеПравила.Категория) КАК ВсеПравила
|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
|			Перс.Контрагент КАК Контрагент,
|			Перс.Приоритет КАК Приоритет,
|			Перс.Категория КАК Категория,
|			Перс.Отклонение КАК Отклонение,
//13.01.2017
|			Перс.ТрКлиента КАК ТрКлиента,

|			Перс.ВидТовара КАК ВидТовара,
|			Перс.Производитель КАК Производитель,
|			Перс.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
|			Перс.ВходитВПапку КАК ВходитВПапку,
|			Перс.Диаметр КАК Диаметр,
|			Перс.Номенклатура КАК Номенклатура,
|			Перс.ТипЦен КАК ТипЦен,
|			Перс.ПодСтрока КАК ПодСтрока,
|			Перс.СкидкаНаценка КАК СкидкаНаценка,
|			Перс.ID КАК ID,
|			Перс.Выключено КАК Выключено,
|			Перс.Бонус КАК Бонус,
|			Перс.ОТК КАК ОТК,
|			Перс.Коэф КАК Коэф,
|			Перс.СкидкаПредоплаты КАК СкидкаПредоплаты,
|			Перс.ВидДефектаДляУценки КАК ВидДефектаДляУценки,
|			Перс.Бонус1 КАК Бонус1
|		ИЗ
|			РегистрСведений.ПравилаЦенообразования КАК Перс
|		ГДЕ
|			Перс.ВидТовара = &ВидТовара
|			И Перс.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
|			И Перс.Производитель = &Производитель
|			И Перс.Номенклатура = &Номенклатура
|			И Перс.ВходитВПапку = &ВходитВПапку
|			И Перс.ПодСтрока = &ПодСтрока
|			И Перс.ВидДефектаДляУценки = &ВидДефектаДляУценки

|//Диаметр			И Перс.Диаметр = &Диаметр

|			И Перс.Контрагент.ОсновнойМенеджерКонтрагента = &Менеджер
|			И Перс.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)) КАК персПравила
|		ПО ВсеПравила.Контрагент = персПравила.Контрагент
|
//===================================================================================================================================					
					|) КАК ПравилаЦенообразования
						
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ *
	                |		ИЗ
	                |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |		ГДЕ
	                |			КонтактнаяИнформация.Тип = &ТипКИ
	                |			И КонтактнаяИнформация.Вид = &ВидФА) КАК КонтактнаяИнформацияФакт
	                |		ПО ПравилаЦенообразования.Контрагент = КонтактнаяИнформацияФакт.Объект

	              |";
					
	 Запрос.УстановитьПараметр("ТипКИ",     перечисления.ТипыКонтактнойИнформации.Адрес );
	 Запрос.УстановитьПараметр("ВидФА", 	справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента );     // должен быть "Базовая" (код = "00008")! 

				   
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	табл1 = новый ТаблицаЗначений;
	табл1.Колонки.Добавить("видТовара");
	табл1.Колонки.Добавить("Категория");
	для каждого вид1 из списокВидов цикл
			стрВид = табл1.Добавить();
			стрВид.видТовара = вид1.Значение;
			стрВид.Категория = перечисления.КатегорииСкидок.к3;
	КонецЦикла;				   
	Запрос.УстановитьПараметр("ТаблВидов", табл1);
			   

КонецЕсли; 

// только по персональным	
Если НЕ ФлВсеКлиенты тогда
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЛОЖЬ КАК Флаг,
	                |	ПравилаЦенообразования.Контрагент,
	                |	ПравилаЦенообразования.Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
					
	                |	ПравилаЦенообразования.Приоритет,
	                |	ПравилаЦенообразования.Категория,
	                |	ПравилаЦенообразования.Отклонение,
	                |	ПравилаЦенообразования.СкидкаНаценка,
	                |	ПравилаЦенообразования.СкидкаПредоплаты,
					//13.01.2017
					|	выбор когда ПравилаЦенообразования.ТрКлиента = 0 
					|		тогда ЕстьNull(КатКлиента.ТрКлиента,0)
					|		иначе ПравилаЦенообразования.ТрКлиента Конец как ТрКлиента,
					
					|	ПравилаЦенообразования.Диаметр,
					|	ПравилаЦенообразования.ТипЦен,
					
					|	ПравилаЦенообразования.ВидТовара,
					|	ПравилаЦенообразования.Производитель,
	                |	ПравилаЦенообразования.НоменклатурнаяГруппа,
	                |	ПравилаЦенообразования.Номенклатура,
	                |	ПравилаЦенообразования.ПодСтрока,
	                |	ПравилаЦенообразования.ВходитВПапку,
				    |	ПравилаЦенообразования.ВидДефектаДляУценки,
					
					|	ПравилаЦенообразования.Контрагент.КатегорияПокупателя КАК КатегорияПокупателя,
	                
					|	ПравилаЦенообразования.ID,
					|	ПравилаЦенообразования.Выключено,
	                 
	                |	КонтактнаяИнформацияФакт.Поле2 КАК РегионФактАдрес,
					|	КонтактнаяИнформацияФакт.Поле4 КАК Город
					
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ *
	                |		ИЗ
	                |			РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |		ГДЕ
	                |			КонтактнаяИнформация.Тип = &ТипКИ
	                |			И КонтактнаяИнформация.Вид = &ВидФА) КАК КонтактнаяИнформацияФакт
	                |		ПО ПравилаЦенообразования.Контрагент = КонтактнаяИнформацияФакт.Объект
					//13.01.2017
                    |		ЛЕВОЕ СОЕДИНЕНИЕ 
					|	(выбрать Кат.ТрКлиента, кат.Ссылка
					|	из  справочник.Контрагенты.КатегорияСкидок как Кат
					|	ГДЕ Кат.ВидТовара = &ВидТовара) как КатКлиента
					|	ПО ПравилаЦенообразования.Контрагент = КатКлиента.Ссылка
					
	                |ГДЕ
	                |	ПравилаЦенообразования.ВидТовара = &ВидТовара
	                |	И ПравилаЦенообразования.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
	                |	И ПравилаЦенообразования.Производитель = &Производитель
	                |	И ПравилаЦенообразования.Номенклатура = &Номенклатура
	                |	И ПравилаЦенообразования.ВходитВПапку = &ВходитВПапку
	                |	И ПравилаЦенообразования.ПодСтрока = &ПодСтрока
	                |	И ПравилаЦенообразования.ВидДефектаДляУценки = &ВидДефектаДляУценки
	                |	И ПравилаЦенообразования.Контрагент.ОсновнойМенеджерКонтрагента = &Менеджер
					|//Диаметр			И ПравилаЦенообразования.Диаметр = &Диаметр
 	                |	И ПравилаЦенообразования.Категория <> ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)";
					
	 Запрос.УстановитьПараметр("ТипКИ",     перечисления.ТипыКонтактнойИнформации.Адрес );
	 Запрос.УстановитьПараметр("ВидФА", 	справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента );     // должен быть "Базовая" (код = "00008")! 
//	 Запрос.УстановитьПараметр("ВидЮА", 	справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента );     // должен быть "Базовая" (код = "00008")! 
					
		КонецЕсли;		
				
		Если НЕ Флажок3 тогда 
			Запрос.Текст = стрЗаменить(Запрос.Текст, "ПравилаЦенообразования.Категория <>","ПравилаЦенообразования.Категория =");
		КонецЕсли;	
		
Запрос.УстановитьПараметр("Менеджер",Менеджер);//05.10.2016

если СокрЛП(стр1.Диаметр)<>"" тогда //08.12.2016 - учет диаметра
Запрос.Текст = стрЗаменить(Запрос.Текст, "//Диаметр","");
КонецЕсли;
Запрос.УстановитьПараметр("Диаметр",     стр1.Диаметр );

	 Запрос.УстановитьПараметр("Свойство",     ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90184") );
	 Запрос.УстановитьПараметр("ТипЦен", 	    стр1.ТипЦен );     // должен быть "Базовая" (код = "00008")! 
	 
	 Запрос.УстановитьПараметр("ВидТовара",     стр1.ВидТовара );
	 Запрос.УстановитьПараметр("Производитель", стр1.Производитель );
	 Запрос.УстановитьПараметр("НоменклатурнаяГруппа", стр1.НоменклатурнаяГруппа );
	 
	 
	 Запрос.УстановитьПараметр("Номенклатура", стр1.Номенклатура );
	 Запрос.УстановитьПараметр("ВходитВПапку", стр1.ВходитВПапку );
	 Запрос.УстановитьПараметр("ПодСтрока",    стр1.ПодСтрока );
	 
	 Запрос.УстановитьПараметр("ВидДефектаДляУценки", стр1.ВидДефектаДляУценки);
	 
	  Результат = Запрос.Выполнить();
	 Если не результат.Пустой() тогда
	 	ТаблицаКлиентов.Загрузить(  Результат.Выгрузить() );
	 	ТаблицаКлиентов.Сортировать("Контрагент, Менеджер, СкидкаНаценка");
	 КонецЕсли;
	 	 
	Состояние("Найдено "+строка(ТаблицаКлиентов.Количество())+" правил клиентов.");
		
КонецПроцедуры

//================================================================
Процедура КоманднаяПанель1ПересчитатьСкидкуКлиентов(Кнопка)
	

	стр1 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если стр1=неопределено тогда
		Предупреждение("Выберите строку Общих правил!");
		возврат;
	КонецЕсли;	
	
	стр0СкидкаНаценкаОбщие = получитьОбщееПравило(стр1.Приоритет);
	Если стр0СкидкаНаценкаОбщие=неопределено тогда
		Предупреждение("Не найдено Общее правило №"+строка(стр1.Приоритет));
		возврат;
	КонецЕсли;	
	
	Коэфф = 1;
	максСкидки     =стр1.СкидкаНаценкаVIP;					   
    максПредоплаты =стр1.СкидкаПредоплатыVIP;					   
 //--------------------------Ручное изменение--------------------------	
	Проц=-1;
	Если коэфф=1 тогда
		 Режим = РежимДиалогаВопрос.ДаНет;
		если Переключатель1=2 тогда
			Предупреждение("Изменить Категорию на процент - нельзя!", 30);
			возврат;
		КонецЕсли;
		
		Ответ = Вопрос("Изменить "+?(Переключатель1=0,"скидку","предоплату")+" на фикс. процент (Да)
						|или каскадом - нажмите (Нет)?", Режим, 30);
		Если Ответ = КодВозвратаДиалога.да Тогда
			ВвестиЧисло(Проц,"Введите фикс. процент");
		Иначе
			Если ВвестиЧисло(Проц,"Введите относительный процент") тогда
			Коэфф = (1+Проц/100);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	выборка2 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	Для каждого стр2 из ТаблицаКлиентов цикл
		Если НЕ стр2.Флаг тогда	продолжить; 
		КонецЕсли;
			
		Если Переключатель1=0 тогда		  
			Если Коэфф=1 тогда // абс. скидка
			стр2.СкидкаНаценка = стр2.СкидкаНаценка +  проц;
			иначе //каскадом
			новаяСкидка = 100* ( (1 + стр2.СкидкаНаценка/100) *(1+Проц/100) - 1);
		    стр2.СкидкаНаценка = Окр(новаяСкидка,2);
			КонецЕсли;
			
			 выборка = стр2; //ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
			 Если Флажок3 тогда
 				ПроверитьПереходКатегории(стр2, выборка2);
			 КонецЕсли;
			 
			 Если стр2.СкидкаНаценка<-70 тогда //+++ 04.02.2016 - Скидка предоплаты всегда "-"!
				Сообщить(строка(стр2.Контрагент)+" - Скидка "+строка(стр2.СкидкаНаценка)+"% слишком большая! Установлена Максимальная скидка -70%", СтатусСообщения.Информация);
			 	стр2.СкидкаНаценка=-70;
			 КонецЕсли;	
 			 Если стр2.СкидкаНаценка>50 тогда //+++ 04.02.2016 - Скидка предоплаты всегда "-"!
				Сообщить(строка(стр2.Контрагент)+" - Наценка +"+строка(стр2.СкидкаНаценка)+"% слишком большая! Установлена наценка 50%", СтатусСообщения.Информация);
			 	стр2.СкидкаНаценка=50;
			 КонецЕсли;	

		Иначе //Предоплата
			
			Если Коэфф=1 тогда // абс. скидка
				стр2.СкидкаПредоплаты = стр2.СкидкаПредоплаты +  проц;
			иначе //каскадом
				новаяСкидка = 100* ( (1 + стр2.СкидкаПредоплаты/100) *(1+Проц/100) - 1);
		    	стр2.СкидкаПредоплаты = Окр(новаяСкидка,2);
			КонецЕсли;

				Если  стр2.СкидкаПредоплаты>0 тогда //+++ 04.02.2016 - Скидка предоплаты всегда "-"!
					Сообщить(строка(стр2.Контрагент)+" - Скидка предоплаты не может быть больше нуля!");
				    стр2.СкидкаПредоплаты = 0;
				КонецЕсли;	
			 Если стр2.СкидкаПредоплаты<МаксСкидкаПредоплаты тогда //+++ 04.02.2016 - Скидка предоплаты всегда "-"!
				Сообщить(строка(стр2.Контрагент)+" - Предоплата "+строка(стр2.СкидкаНаценка)+"% слишком большая! Установлена Максимальная предоплата "+строка(МаксСкидкаПредоплаты)+"%", СтатусСообщения.Информация);
			 	стр2.СкидкаНаценка=МаксСкидкаПредоплаты;
			 КонецЕсли;	
		КонецЕсли;		 
	
	КонецЦикла;
	
	ТаблицаКлиентов.Сортировать("СкидкаНаценка, СкидкаНаценка");
	
КонецПроцедуры


Процедура КоманднаяПанель2Действие(Кнопка)
	
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	 текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	i=0;
	если ЗначениеЗаполнено(текСтр) тогда
		ФиксЗнач = ?(Переключатель1=2, текСтр.Категория, ?(Переключатель1 = 0,  текСтр.СкидкаНаценка, текСтр.СкидкаПредоплаты));
	иначе
		ФиксЗнач = ?(Переключатель1=2, перечисления.КатегорииСкидок.к3, 0);
	КонецЕсли;
	
	Если Переключатель1=2 тогда
		Если не Ввестизначение(ФиксЗнач, "Введите фикс.категорию") тогда
		Предупреждение("Изменение отменено!", 10);
		возврат;
		КонецЕсли;
	ИначеЕсли не ВвестиЧисло(ФиксЗнач, "Введите фикс.% "+?(Переключатель1 = 0,  "Скидки", "Предоплаты") ) тогда
		Предупреждение("Изменение отменено!", 10);
		возврат;
	КонецЕсли;
	
	Если Переключатель1<2 тогда //ограничение
		Если ФиксЗнач<-70 или ФиксЗнач>50 тогда 	
			Предупреждение("Слишком большое значение "+строка(ФиксЗнач)+"
						   | Установка такого значения недопустимо.", 10);
			возврат;
		КонецЕсли;	
	КонецЕсли;
	
	для каждого стр1 из ТаблицаКлиентов цикл
		Если НЕ стр1.Флаг тогда	продолжить; 
		КонецЕсли;
		Если Переключатель1=2 тогда	
			стр1.Категория = ФиксЗнач; 
			стр1.СкидкаНаценка    = текСтр0["СкидкаНаценка"+мас.Получить(стр1.Категория)];
			стр1.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(стр1.Категория)];
			стр1.Отклонение = 0;
		иначе	
			Если Переключатель1=0 тогда	
				стр1.СкидкаНаценка = ФиксЗнач; 
			иначе
				стр1.СкидкаПредоплаты = ФиксЗнач; 
			КонецЕсли;
			ПроверитьПереходКатегории(стр1, текСтр0);	
		КонецЕсли;
		i=i+1;
	КонецЦикла;

	Если i=0 тогда
		Предупреждение("     Нет выбранных правил для изменения!
						|Выберите [v] правила клиентов для установки фикс.значения!", 30);
	иначе					
		Предупреждение("Изменено "+строка(i)+" выбранных правил!", 10);
	КонецЕсли;

КонецПроцедуры


функция получитьОбщееПравило(Приоритет)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаЦенообразованияОбщие.СкидкаНаценка,
	|	ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт,
	|	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка
	|ИЗ
	|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
	|ГДЕ
	|	ПравилаЦенообразованияОбщие.Приоритет = &Приоритет";
	
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		возврат выборка;
	иначе
		возврат неопределено;
	КонецЕсли;
КонецФункции


функция ПравилаЦенообразованияПолучить(Контрагент1, ID1="")
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	*
				   |ИЗ
	               |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
	               |ГДЕ
	               |	ПравилаЦенообразования.Контрагент = &Контрагент
	               |	И ПравилаЦенообразования.ID = &ID
	               |	И ПравилаЦенообразования.Категория "+?(Флажок3,"<>","=")+" ЗНАЧЕНИЕ(Перечисление.КатегорииСкидок.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент1);
	Запрос.УстановитьПараметр("ID", ID1);
	
	Результат = Запрос.Выполнить();
	ТабЗнач = Результат.Выгрузить();
	
	Если ТабЗнач.Количество()>0 тогда
		возврат ТабЗнач[0];
	иначе
		возврат неопределено;
	КонецЕсли;

КонецФункции

Процедура КоманднаяПанель1ЗаписатьПравилаКлиентов(Кнопка)
	
	//+++ 13.01.2017
	Если НЕ Флажок3 тогда
		текСтрОбщ  = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;	
		максСкидка = текСтрОбщ.МаксСкидкаНаценка;
	Иначе
		текСтрОбщ  = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;	
		максСкидка = текСтрОбщ.СкидкаНаценкаVIP;
    КонецЕсли;

	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы действительно хотите записать правила клиентов?", Режим, 30,  КодВозвратаДиалога.Нет, "Изменение правил клиентов");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Предупреждение("Изменение правил отменено.",10);
		возврат;
	КонецЕсли;


	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Записать ВСЕ ВЫБРАННЫЕ правила?", Режим, 30);
	флФлаг = ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флФлаг = истина;//только выбранные			
	Иначе
		возврат; 
	КонецЕсли;

	
//1======================== согласование! подготовка =========================================
 констСогл = Константы.СогласованиеПоСкидкамКлиентов.Получить();
//берем руководителя того менеджера, который указан в договоре!
менДляСогласования = Менеджер; //13.01.2017! Менеджер   или стр2.Менеджер;
  флЗаменаМенТГ    = Константы.СогласованиеФилиаловВместоМенТГ_РуководительНаправления.Получить();
  
  Руководитель = ПолучитьРуководителя( менДляСогласования ); // яштПрочее
  РуководительВместоТГ  = неопределено;
  
  этоФилиал  = менДляСогласования.основноеПодразделение.ОбособленноеПодразделение;
	Если этоФилиал и флЗаменаМенТГ Тогда
	  РуководительВместоТГ  = менДляСогласования.НаправлениеПродаж.Руководитель;
    КонецЕсли;	 
	
таблСогл.Очистить();
	
//================================ОСНОВНОЙ ЦИКЛ=========================================
КолИзм = 0;
	для каждого стр2 из ТаблицаКлиентов цикл
	//	если флФлаг тогда
			Если не стр2.флаг тогда 
				продолжить;
			КонецЕсли;
	//	КонецЕсли;	
		
	регСв1  = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
	
	старыйID= стр2.ID;	
	если сокрЛП(старыйID)="" тогда //30.11.2016
		сообщить("Нельзя записать правило с пустым ID для клиента: "+строка(стр2.Контрагент)+"!", СтатусСообщения.Внимание);
		продолжить;
	КонецЕсли;	
	регСв2  = ПравилаЦенообразованияПолучить(стр2.Контрагент, старыйID);

	//в Журнал - то, что было >> стало
		если регСв2 = неопределено тогда
			// Сообщить(" ошибка при записи правила № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+" :  Не найдено правило!");
			Сообщить("+ Новое правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+" - ПРОВЕРЬТЕ правильность приоритетов !!!");
			регСв2 = стр2; //30.11.2016 - идентичны, одинаковая ссылка!
			естьИзм = истина;
		Иначе
			естьИзм = (регСв2.СкидкаНаценка<>стр2.СкидкаНаценка 
					  или регСв2.СкидкаПредоплаты<>стр2.СкидкаПредоплаты
					  или регСв2.Категория<>стр2.Категория
					  
					  или регСв2.Диаметр <> стр2.Диаметр
					  
					  //+++ 08.12.2015
			          или регСв2.ТипЦен<>стр2.ТипЦен
					  или регСв2.НоменклатурнаяГруппа<>стр2.НоменклатурнаяГруппа
					  или регСв2.Номенклатура<>стр2.Номенклатура
					  или регСв2.ПодСтрока<>стр2.ПодСтрока
					  или регСв2.ВходитВПапку<>стр2.ВходитВПапку
					  
					  //13.01.2017
					  или регСв2.ТрКлиента<>стр2.ТрКлиента
					  
					 или регСв2.Выключено<>стр2.Выключено
					 );	
		КонецЕсли;
					  
		ЗаполнитьЗначенияСвойств( регСв1, регСв2 );
		
			стр2.флаг = ЛОЖЬ; // автовыключение флага!
			если естьИзм тогда //ТОЛЬКО ИЗМЕНЕНИЯ скидки или вкл/выкл!
				стр2.Флаг = Истина;  // ФЛАГАМИ все  ИЗМЕНЕННЫЕ ЭЛЕМЕНТЫ
			попытка
				
		    текстСообщ0 = "Менеджер: "+строка(глТекущийПользователь)+" ("+строка(глТекущийПользователь.ОсновноеПодразделение)+") просит Вас
				 |Согласовать персональные Правила для Покупателя: "+строка(стр2.Контрагент.Код)+" "+строка(стр2.Контрагент)+"
				 |     "+?(стр2.Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение,
				                 " (без учёта ТРАНСПОРТА до "+строка(стр2.Контрагент.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение)+")","")+"
				 |Адреса клиента:
				 |Юр.адрес:       "+ ПолучитьАдресИзКонтактнойИнформации(стр2.Контрагент, "Юридический")+"
                 |Факт.адрес:     "+ ПолучитьАдресИзКонтактнойИнформации(стр2.Контрагент, "Фактический")+"
                 |Адрес Доставки: "+ ПолучитьАдресИзКонтактнойИнформации(стр2.Контрагент, "Адрес доставки")+"
                 |---------------------------------------------------------------------------------------------
				 |";
			текстСообщ1 =  ?(стр2.Выключено,"ВЫКЛЮЧЕНО", "Записано ")+ ?(Флажок3,"НОВОЕ","")
			+" правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|"

			+?(регСв1.Категория<>стр2.Категория, "Категория: "+строка(регСв1.Категория)+">>"+строка(стр2.Категория)+"; ","")
			+?(регСв1.СкидкаНаценка<>стр2.СкидкаНаценка, "НаценкаСкидка: "+строка(регСв1.СкидкаНаценка)+">>"+строка(стр2.СкидкаНаценка)+"; ","")
			+?(регСв1.СкидкаПредоплаты<>стр2.СкидкаПредоплаты, "Предоплата:"+строка(регСв1.СкидкаПредоплаты)+">>"+строка(стр2.СкидкаПредоплаты)+"; ", "")
			//+?(регСв1.Бонус<>стр2.Бонус, "Бонус="+строка(регСв1.Бонус)+">>"+строка(стр2.Бонус2),"")
			+?(регСв1.Диаметр<>стр2.Диаметр, "Диаметр: "+строка(регСв1.Диаметр)+">>"+строка(стр2.Диаметр)+"; ","")
			+?(регСв1.ТрКлиента<>стр2.ТрКлиента, "ТрКлиента: "+строка(регСв1.ТрКлиента)+">>"+строка(стр2.ТрКлиента)+"; ","")	//13.01.2017
	
			//+?(регСв1.ТипЦен<>стр2.ТипЦен, "ТипЦен="+строка(регСв1.ТипЦен)+">>"+строка(стр2.ТипЦен),"")
			//+?(регСв1.НоменклатурнаяГруппа<>стр2.НоменклатурнаяГруппа, "НоменклатурнаяГруппа="+строка(регСв1.НоменклатурнаяГруппа)+">>"+строка(стр2.НоменклатурнаяГруппа),"")
			//+?(регСв1.Номенклатура<>стр2.Номенклатура, "Номенклатура="+строка(регСв1.Номенклатура)+">>"+строка(стр2.Номенклатура),"")
			//+?(регСв1.ПодСтрока<>стр2.ПодСтрока, "ПодСтрока="+строка(регСв1.ПодСтрока)+">>"+строка(стр2.ПодСтрока),"")
			//+?(регСв1.ВходитВПапку<>стр2.ВходитВПапку, "ВходитВПапку="+строка(регСв1.ВходитВПапку)+">>"+строка(стр2.ВходитВПапку),"")
			;
			текстСообщ = текстСообщ0 + текстСообщ1;
			
			Если регСв2.Категория<>стр2.Категория тогда
				регСв22 = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(регСв22, регСв2);
				регСв22.Удалить();// удаляем старые данные по прежней категории...  
			КонецЕсли;
			
			//не все поля регистра есть в таблице!
			ЗаполнитьЗначенияСвойств(регСв1, стр2);
			
		Если регСв1.Приоритет<0 тогда
			сообщить("Нельзя записать правило с ""-"" приоритетом для клиента: "+строка(регСв1.Контрагент)+"!", СтатусСообщения.Внимание);
			Продолжить;
		ИначеЕсли регСв1.Приоритет>1000 тогда
			сообщить("Нельзя записать Общее правило в персональные правила клиента: "+строка(регСв1.Контрагент)+"! Выберите строку клиента и Нажмите [Цены]. Установите изменения в персональные правила клиента!", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		//+++ 29.05.2017 - для ID - тип цен должен быть таким же как в Общих правилах!
		//регСв1.ТипЦен = текСтрОбщ.ТипЦен;   //+++ 17.11.2017 !!!
		
		регСв1.ID = ПолучитьНовыйID(регСв1); 
		
		//+++ 29.05.2017 - для B2B - ОПРЕДЕЛЯТСЯ тип цен = B2B!
		Если регСв1.Категория = перечисления.КатегорииСкидок.B2B тогда
			регСв1.ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00032"); //10.04.2018
		КонецЕсли;
		
//2===================== согласование! =====заполнение====================================
Если констСогл 
	И НЕ ( регСв1.Контрагент.НеКонтроллироватьЦеныПродажи
//	       или РольДоступна("ПравоЗавершенияРаботыПользователей") 
		 ) Тогда
		 
 //13.01.2017 --------------------------------------------------------------------
 Если СтрЧислоВхождений(текстСообщ1,";")=1
	 и найти(текстСообщ1, "ТрКлиента:")>0 тогда
	Сообщить("для клиента "+строка(регСв1.Контрагент)+" Изменение только тр.Клиента не требует согласований!", СтатусСообщения.Информация);
 Иначе			
	Если регСв1.Категория = перечисления.КатегорииСкидок.к1
		
	//+++ 17.11.2017 - только при увеличении скидки (углублении в - )
		И (регСв1.СкидкаНаценка < регСв2.СкидкаНаценка 
			ИЛИ регСв1.СкидкаПредоплаты < регСв2.СкидкаПредоплаты
			ИЛИ регСв1.ТипЦен <> регСв2.ТипЦен
		   )
		тогда
	//до согласования с руководителем - выключается!
		регСв1.Выключено = истина;
		добавитьВТаблСогласования(Руководитель, регСв1);
	сообщить("Для клиента: "+строка(регСв1.Контрагент)+" Правило № "+строка(регСв1.Приоритет)+" с1-ой категорией - ВЫКЛЮЧЕНО и должно быть согласовано с менеджером: "+строка(Руководитель), СтатусСообщения.ОченьВажное );
	
	ИначеЕсли регСв1.Категория = перечисления.КатегорииСкидок.VIP
	//+++ 17.11.2017 - только при увеличении скидки (углублении в - )
		И (регСв1.СкидкаНаценка < регСв2.СкидкаНаценка 
			ИЛИ регСв1.СкидкаПредоплаты < регСв2.СкидкаПредоплаты
			ИЛИ регСв1.ТипЦен <> регСв2.ТипЦен
		   )
		тогда
		менТГ = регСв1.НоменклатурнаяГруппа.Ответственный;
		Если этоФилиал и флЗаменаМенТГ Тогда
        	менТГ = РуководительВместоТГ;
		КонецЕсли;
		
	//до согласования с руководителем - выключается!
	  регСв1.Выключено = истина;
		добавитьВТаблСогласования(менТГ, регСв1);
	сообщить("Для клиента: "+строка(регСв1.Контрагент)+" Правило № "+строка(регСв1.Приоритет)+" с VIP-категорией -ВЫКЛЮЧЕНО и должно быть согласовано с менеджером: "+строка(менТГ), СтатусСообщения.ОченьВажное );

	Иначе
		сообщить("По общ.правилу № "+строка(текСтрОбщ.Приоритет+1000)+" Для клиента: "+строка(регСв1.Контрагент)+" изменено правило № "+строка(регСв1.Приоритет), СтатусСообщения.Информация );
	КонецЕсли;
	
 КонецЕсли;//--------------------------------------------------------------------

КонецЕсли;//согласования
//================================================================================
		
		регСв1.Записать(Истина); //перезапись
		Сообщить(текстСообщ1);
			
		//----------------------Журнал изменений------------------------------	
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок"; //+++ !!!
		 записьЖурнала.Комментарий = текстСообщ1;
		 записьЖурнала.Записать(истина); //перезапись
		 
		исключение
		Сообщить("Ошибка при записи правила № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
	    КолИзм = КолИзм + 1;
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	//3========================Создание задач на согласование! =========================================
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	назвОбщПравила = "№ "+строка(текСтр0.НомерСтроки)+"/"+строка(текСтр0.Приоритет)
	+" - "+строка(текСтр0.НоменклатурнаяГруппа)+" - "+строка(текСтр0.Производитель)
	+" по Подстроке: "+строка(текСтр0.ПодСтрока)+" по Номенклатуре: "+строка(текСтр0.Номенклатура);
	
	задачаПоКаждомуКлиенту = истина;

	Если таблСогл.Количество()>0 тогда
		таблСогл.Сортировать("Исполнитель, Контрагент");
		таблКому = таблСогл.Скопировать(,"Исполнитель");
		таблКому.Свернуть("Исполнитель");
		
		задача=Неопределено;
		
		для каждого стр0 из таблКому цикл
			
			Контрагент0=неопределено;
			задача	   =неопределено;
			
			Если не задачаПоКаждомуКлиенту тогда // одна задача на Исполнителя
				задача = создатьЗадачу(стр0.Исполнитель, менДляСогласования);
				задача.Описание = "Согласуйте изменение правил ценообразования Для нижеперечисленных клиентов
			 					   |По общему правилу "+назвОбщПравила+" :";
		 	КонецЕсли;
		 
			для каждого стр1 из таблСогл цикл
				Если стр1.Исполнитель<>стр0.Исполнитель тогда
					продолжить;
				КонецЕсли;
				
				Если стр1.Контрагент<>Контрагент0 тогда
					Если задачаПоКаждомуКлиенту тогда
						Если задача<>неопределено тогда // запись пред.задачи
							попытка
								задача.Записать(); // без объекта?
								сообщить("Создана задача для менеджера: "+строка(стр0.Исполнитель)+" на согласование "+строка(задача.Товары.Количество())+" правил.");
							исключение
								сообщить("Ошибка при создании задачи для менеджера: "+строка(стр0.Исполнитель)+" на согласование "+строка(задача.Товары.Количество())+" правил: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
							КонецПопытки;	
						КонецЕсли;
						задача = создатьЗадачу(стр0.Исполнитель, менДляСогласования);
						задача.Описание = "Согласуйте "+?(Флажок3,"НОВЫЕ","старые")+" правила ценообразования Для клиента: "+строка( стр1.Контрагент )+"
					 					|По общему правилу "+назвОбщПравила+" :";
						задача.Объект = стр1.Контрагент; 
					КонецЕсли;
				Контрагент0 = стр1.Контрагент;
				КонецЕсли;
			
 				//	задача.Объект = стр1.Контрагент;
				стр2 = задача.Товары.Добавить();	
				ЗаполнитьЗначенияСвойств(стр2, стр1);
				стр2.Номенклатура = СокрЛП(стр1.Контрагент.Код)+": "+строка(стр1.Контрагент)+" - "+стр1.Номенклатура;
				
				задача.Описание = задача.Описание +"
				|"+СокрЛП(стр1.Контрагент.Код)+": "+строка(стр1.Контрагент)+" - "+лев(стр1.Номенклатура,Найти(стр1.Номенклатура,":")-1)+" -> правило № "+строка(стр2.НомерСтрокиОснования);
				
			КонецЦикла;	
			
			
			Если задача<>неопределено тогда  //последняя по исполнителю или клиенту
				попытка
				задача.Записать(); // без объекта?
				сообщить("Создана задача для менеджера: "+строка(стр0.Исполнитель)+" на согласование "+строка(задача.Товары.Количество())+" правил.");
				исключение
				сообщить("Ошибка при создании задачи для менеджера: "+строка(стр0.Исполнитель)+" на согласование "+строка(задача.Товары.Количество())+" правил: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;	
			КонецЕсли;
			
		КонецЦикла;	//по исполнителям
		
	КонецЕсли;//создания задач

//снова доступна верхняя таблица	
ЭлементыФормы.ДеревоПравил.Доступность = истина; 
Флажок2 = Истина;
		
КонецПроцедуры

функция создатьЗадачу(Кому, отКого)
	
	//-------новая задача------------
	задача1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
 	задача1.Товары.Очистить();
	задача1.Наименование = "Согласуйте правила ценообразования для клиентов";
	
	задача1.Исполнитель = Кому;
		 
	задача1.НаСогласование = ИСТИНА; 
	задача1.Постановщик = отКого;
	задача1.Инициатор   = глТекущийПользователь;
		 
	 задача1.Дата 		    = ТекущаяДата();
	 задача1.СрокИсполнения = КонецДня( ТекущаяДата() ); // до конца текущих суток с момента установки
	 
	 задача1.Оповещение     = истина;
	 задача1.СрокОповещения = ТекущаяДата(); //сразу (появится не позднее чем через 5 мин
	
возврат Задача1;

КонецФункции

Процедура КолВШапке()
	табл123 = ТаблицаКлиентов.Выгрузить();
	табл123.Свернуть("Контрагент");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Контрагент.ТекстШапки = ?(нРазличных=0,"Контрагент", "Контрагент("+строка(нРазличных)+")");
	
	табл123 = ТаблицаКлиентов.Выгрузить();
	табл123.Свернуть("Менеджер");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Менеджер.ТекстШапки = ?(нРазличных=0,"Менеджер", "Менеджер("+строка(нРазличных)+")");

	табл123 = ТаблицаКлиентов.Выгрузить();
	табл123.Свернуть("ТипЦен");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.ТипЦен.ТекстШапки = ?(нРазличных=0,"ТипЦен", "ТипЦен("+строка(нРазличных)+")");

 	табл123 = ТаблицаКлиентов.Выгрузить();
	табл123.Свернуть("Производитель");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Производитель.ТекстШапки = ?(нРазличных=0,"Производитель", "Производитель("+строка(нРазличных)+")");
	//Если нРазличных>1 тогда
	//	Сообщить("Есть правила с пустым производителем!");
	//КонецЕсли;
	
	табл123 = ТаблицаКлиентов.Выгрузить();
	табл123.Свернуть("НоменклатурнаяГруппа");
	нРазличных = табл123.Количество();
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.НоменклатурнаяГруппа.ТекстШапки = ?(нРазличных=0,"Ном.Группа", "Ном.Группа("+строка(нРазличных)+")");
	//Если нРазличных>1 тогда
	//	Сообщить("Есть правила с пустой ном.группой!");
	//КонецЕсли;
	
	нВыкл=0; нФлаг=0;
	для каждого стр1 из ТаблицаКлиентов цикл
		если стр1.Выключено тогда нВыкл=нВыкл+1; КонецЕсли;
		если стр1.Флаг тогда нФлаг=нФлаг+1; КонецЕсли;
	КонецЦикла;	
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Флаг.ТекстШапки = ?(нФлаг=0,"Флаг", "Выбрано("+строка(нФлаг)+")");
КонецПроцедуры
	
Процедура ТабличнаяЧастьПравилаПриАктивизацииСтроки(Элемент)
	
	ТаблицаКлиентов.Очистить();
	КолВШапке();	
	
	Если Флажок2 тогда
		КоманднаяПанель1ОбновитьСписок(неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаКлиентовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если НЕ Флажок3 тогда
		стр0 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		максСкидка = ?(стр0=неопределено, 200, стр0.МаксСкидкаНаценка);
		максПредоплата = стр0.МаксСкидкаПредоплаты; //+++ 22.12.2014
	иначе
		стр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		максСкидка = ?(стр0=неопределено, 200, стр0.СкидкаНаценкаVIP);
		максПредоплата = стр0.СкидкаПредоплатыVIP; //+++ 22.12.2014
	КонецЕсли;
	
	для каждого стр1 из ОформленияСтрок цикл
		
	//цвет текста
	Если Переключатель1=0 тогда
		
		Если стр1.ДанныеСтроки.СкидкаНаценка+стр1.ДанныеСтроки.Бонус2 < максСкидка тогда
			стр1.ЦветТекста = WebЦвета.ТемноБордовый;
			Если (КрасныйПорог>=0 
				 и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус2)<=КрасныйПорог 
				 и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус2)>=0
				 )
				 или (КрасныйПорог<0 
				     и  (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус2)>=КрасныйПорог 
				     и (максСкидка - стр1.ДанныеСтроки.СкидкаНаценка-стр1.ДанныеСтроки.Бонус2)<=0
				     ) тогда
				стр1.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;	
			
		ИначеЕсли стр1.ДанныеСтроки.СкидкаНаценка>200 тогда
			стр1.ЦветТекста = WebЦвета.ТемноСиний;
		КонецЕсли;	
		
		//+++ 22.12.2014	
		Если стр1.ДанныеСтроки.СкидкаПредоплаты < максПредоплата тогда
			стр1.ЦветФона = WebЦвета.Желтый;
			Если (КрасныйПорог>=0 
				 и  (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>=0
				  ) 
				 или 
				 (КрасныйПорог<0 
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>=КрасныйПорог
				 и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=0
				 )  тогда
				стр1.ЦветФона = WebЦвета.СветлоЖелтый;
			КонецЕсли;	
		КонецЕсли;
		
	Иначе  // цвет текста по Предоплате
		
		Если стр1.ДанныеСтроки.СкидкаПредоплаты < максПредоплата тогда
			стр1.ЦветТекста = WebЦвета.ТемноБордовый;
			Если (КрасныйПорог>=0
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>0
				) или 
				(КрасныйПорог<0
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)<=КрасныйПорог
				и (максПредоплата - стр1.ДанныеСтроки.СкидкаПредоплаты)>0
				) тогда
			стр1.ЦветТекста = WebЦвета.Красный;
			КонецЕсли;	
		КонецЕсли;

	КонецЕсли;
	
	//выкл.
	Если стр1.ДанныеСтроки.Выключено тогда
		стр1.ЦветФона = webЦвета.СветлоСерый;//курсив
	//выбран
		Если стр1.ДанныеСтроки.Флаг тогда
		стр1.Шрифт = новый Шрифт(стр1.Шрифт,,,Истина, Истина);//жирный курсиы
		КонецЕсли;
	
 	ИначеЕсли стр1.ДанныеСтроки.Флаг тогда
		стр1.Шрифт = новый Шрифт(стр1.Шрифт,,,Истина);//жирный 
	КонецЕсли;

	КонецЦикла;	

КолВШапке();	

КонецПроцедуры

//Процедура КоманднаяПанель1СоздатьОповещение(Кнопка)

////====================Оповещение менеджерам=======================
//ТаблицаКлиентов.Сортировать("Менеджер, Контрагент, Приоритет"); 
//мен = неопределено; Контр = неопределено;
//текстОповещения = ""; 
// зад1 = неопределено;
//   КолОповещ = 0;
//	для каждого стр2 из ТаблицаКлиентов цикл
//	Если не стр2.флаг тогда продолжить;
//	КонецЕсли;	
//	
//	Если НЕ ( стр2.СкидкаНаценка<>стр2.СкидкаНаценка 
//			или стр2.СкидкаПредоплаты<>стр2.СкидкаПредоплаты 
//			или стр2.Бонус<>стр2.Бонус2 
//			или стр2.выключено) тогда
//		Продолжить; // нет изменений!
//	КонецЕсли;	
//	
//	Если мен=стр2.Менеджер тогда
//		Если контр<>стр2.Контрагент тогда
//			зад1.Контрагент = справочники.Контрагенты.ПустаяСсылка(); // несколько клиентов!
//			текстОповещения = текстОповещения+"
//			|Контрагент: "+строка(стр2.Контрагент)+" : ";
//			контр=стр2.Контрагент;
// 		КонецЕсли;
//	Иначе//		мен<>стр2.Менеджер
//		Если текстОповещения<>"" тогда   //запись предыдущей задачи
//			зад1.СодержаниеСобытия = текстОповещения;
//			зад1.Записать(РежимЗаписиДокумента.Проведение);
//			КолОповещ = КолОповещ + 1;
//			сообщить(строка(КолОповещ)+" Создано уведомление по ""Событию"" для "+строка(зад1.Ответственный), СтатусСообщения.Информация);
//		КонецЕсли;
//		зад1 = СоздатьСобытиеПользователя(стр2);// создание новой!
//			мен  =стр2.Менеджер;
//			контр=стр2.Контрагент;
//			текстОповещения = "Контрагент: "+строка(стр2.Контрагент)+" : ";
// 	 КонецЕсли;	//мен
//	 
//	 	текстОповещения = текстОповещения+ "Правило № "+строка(стр2.приоритет)+" - "
//					+?(стр2.выключено,"ВЫКЛЮЧЕНО!","Изменено!")
//					+?(стр2.СкидкаНаценка<>стр2.СкидкаНаценка," Скидка: "+строка(стр2.СкидкаНаценка)+" >> "+строка(стр2.СкидкаНаценка)+" ","")
//					+?(стр2.СкидкаПредоплаты<>стр2.СкидкаПредоплаты, " Предоплата: "+строка(стр2.СкидкаПредоплаты)+" >> "+строка(стр2.СкидкаПредоплаты)+" ", "")
//					+?(стр2.Бонус<>стр2.Бонус2, " Бонус: "+строка(стр2.Бонус)+" >> "+строка(стр2.Бонус2)+" ", "")
//					//+++ 13.01.2017
//					+?(стр2.Бонус<>стр2.Бонус2, " Бонус: "+строка(стр2.Бонус)+" >> "+строка(стр2.Бонус2)+" ", "")
//					+"
//					|";
//		
//  КонецЦикла;	
//  
////-------------последнее----------------------------  
//Если текстОповещения <>"" тогда
//  зад1.СодержаниеСобытия = текстОповещения;
//  зад1.Записать(РежимЗаписиДокумента.Проведение);
//  КолОповещ = КолОповещ + 1;
//  сообщить(строка(КолОповещ)+" Создано уведомление по ""Событию"" для "+строка(стр2.Менеджер), СтатусСообщения.Информация);
//КонецЕсли;

//  Предупреждение("Сформировано "+строка(КолОповещ)+" документов ""Событие""
//  				 | с включенным оповещение для Менеджеров.",60);
//  
//КонецПроцедуры   
////===============================================================
//функция СоздатьСобытиеПользователя(стр2)
//	
//	зад1 = документы.Событие.СоздатьДокумент();  //задачи.ЗадачиПользователя.СоздатьЗадачу();
//	
//	зад1.ОписаниеСобытия = "Проверьте изменение Правил по клиентам!";
//	
//	зад1.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
//	зад1.Контрагент = стр2.Контрагент;
//	
//	зад1.Ответственный  = стр2.менеджер;
//	 зад1.Комментарий    = "Изменены или Выключены правила Менеджером тов.группы: "+глТекущийПользователь;
//	 
//	зад1.Дата = ТекущаяДата();
//	зад1.НачалоСобытия 	  = ТекущаяДата();
//	зад1.ОкончаниеСобытия = КонецДня(ТекущаяДата());
//	
//	зад1.НапомнитьОСобытии = истина;
//	зад1.ВремяНапоминания  = ТекущаяДата();
//	
//	зад1.ВидСобытия		  = Перечисления.ВидыСобытий.Прочее;
//	
//	зад1.ТипСобытия		  = Перечисления.ВходящееИсходящееСобытие.Входящее;
//	
//	зад1.Важность		  = Перечисления.Важность.Высокая;
//	зад1.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано; //  да/нет
//	
//	возврат зад1;
//	
//КонецФункции

//Процедура КоманднаяПанель1УтвердитьЭтиСкидки(Кнопка)
//	выкл = ложь;
//	
//	i=0;
//		
//	если i=0 тогда 
//		если Вопрос("Изменить все "+?(выкл, "ВЫКЛ.", "ВКЛ.")+" правила?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да тогда
//			для каждого стр1 из ТаблицаКлиентов цикл
//				Если стр1.Выключено = выкл тогда 
//					стр1.Выключено = не выкл;
//					стр1.Флаг=Истина;
//					i=1;
//				иначе стр1.Флаг=ложь;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;	
//		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка = не выкл;
//	Иначе	
//		для каждого стр1 из ТаблицаКлиентов цикл
//			Если не стр1.флаг тогда продолжить; КонецЕсли;
//			стр1.Выключено = выкл;
//		КонецЦикла;	
//		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка = выкл;
//	КонецЕсли;
//	
//	Если ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Пометка тогда
//		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Текст = "Вкл";
//	Иначе
//		ЭлементыФормы.КоманднаяПанель2.Кнопки.УтвердитьВсеСкидки.Текст ="Выкл";
//	КонецЕсли;

//КонецПроцедуры

Процедура ТаблицаКлиентовСкидкаНаценкаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
	ТаблицаКлиентовСкидкаНаценкаПриИзменении(неопределено);
КонецПроцедуры

Процедура ТаблицаКлиентовПриоритетОткрытие(Элемент, СтандартнаяОбработка)
	 СтандартнаяОбработка = ложь;
	 стр1 = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
	 
	 Если Флажок3 тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = стр1.Контрагент;
   		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);
    Иначе
    ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
	ФормаПравила.Контрагент = стр1.Контрагент;
	КонецЕсли;
	ФормаПравила.Открыть();	
	
КонецПроцедуры

Процедура КрасныйПорогРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.1;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.ОбновитьСтроки();
КонецПроцедуры

Процедура КоманднаяПанельПравилаОбновить(Кнопка)
	
	Если Флажок3 тогда
		ОбновитьДерево();
		ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка = ложь;
		возврат;
	КонецЕсли;	
	
   // ЗаполнитьДанныеТаблицы();
   // //Иначе
   // //	Предупреждение("Регистр НЕ изменился!", 30);
   // //КонецЕсли;	
   // Если ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные=неопределено тогда
   // 	текСтр=1
   // Иначе текСтр=ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные.НомерСтроки;
   // КонецЕсли;
   //ЭлементыФормы.ТабличнаяЧастьПравила.ТекущаяСтрока = ТабличнаяЧастьПравила[текСтр-1];
   //
   //КоманднаяПанель1ОбновитьСписок(неопределено); // при обновлении правил - по текущему - найдём клиентов
   
  
КонецПроцедуры

Процедура ТабличнаяЧастьПравилаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Изменен тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
	КонецЕсли;
	
	Если ДанныеСтроки.Исключительное тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноЗеленый;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1Заменить(Кнопка)
	
	текСтр = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
Если Переключатель1<=2 тогда	
	
	если текСтр<>неопределено тогда
		СтарЗнач = ?(Переключатель1=2,  текСтр.Категория, ?(Переключатель1 = 0,  текСтр.СкидкаНаценка, текСтр.СкидкаПредоплаты));
	иначе
		СтарЗнач = ?(Переключатель1=2, перечисления.КатегорииСкидок.к3, 0);
	КонецЕсли;
	
	Если Переключатель1=2 тогда
		Если не ВвестиЗначение(СтарЗнач, "Введите искомое значение Категории") тогда
			Предупреждение("Изменение - отменено!", 10);
			возврат;
		КонецЕсли;	
			
		НовЗнач = СтарЗнач;
		Если не ВвестиЗначение(НовЗнач, "Введите новое значение Категории") тогда
			Предупреждение("Изменение - отменено!", 10);
			возврат;
		КонецЕсли;
	Иначе//---------------------числа---------------------------------------------------------------------------------	
		Если не ВвестиЧисло(СтарЗнач, "Введите искомое значение "+?(Переключатель1 = 0, "Скидки", "Предоплаты")) тогда
			Предупреждение("Изменение - отменено!", 10);
			возврат;
		КонецЕсли;	
			
		НовЗнач = СтарЗнач;
		Если не ВвестиЧисло(НовЗнач, "Введите новое значение "+?(Переключатель1 = 0, "Скидки", "Предоплаты")) тогда
			Предупреждение("Изменение - отменено!", 10);
			возврат;
		КонецЕсли;
	КонецЕсли;

	Если Переключатель1<2 тогда //ограничение
		Если НовЗнач<-70 или НовЗнач>50 тогда 	
			Предупреждение("Слишком большое значение "+строка(НовЗнач)+"
						   | Установка такого значения недопустимо.", 10);
			возврат;
		КонецЕсли;	
	КонецЕсли;
	
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
        колСтр=0;
		Для каждого стр2 из ТаблицаКлиентов цикл
			//если стр2.Флаг тогда
				Если Переключатель1 = 0 и стр2.СкидкаНаценка = СтарЗнач тогда
					стр2.СкидкаНаценка = НовЗнач;
					стр2.Флаг = Истина;
					проверитьПереходКатегории(стр2, текСтр0);	
				колСтр=колСтр+1;	
				ИначеЕсли Переключатель1 = 1 и стр2.СкидкаПредоплаты = СтарЗнач тогда
					стр2.СкидкаПредоплаты= НовЗнач;
					стр2.Флаг = Истина;
					проверитьПереходКатегории(стр2, текСтр0);	
				колСтр=колСтр+1;	
				ИначеЕсли Переключатель1 = 2 и стр2.Категория = СтарЗнач тогда
					стр2.Категория = НовЗнач;
					стр2.Флаг = Истина;
					
					стр2.СкидкаНаценка = текСтр0["СкидкаНаценка"+мас.Получить(стр2.Категория)];
					стр2.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(стр2.Категория)];
					стр2.Отклонение = 0;
	            колСтр=колСтр+1;
				КонецЕсли;
			//КонецЕсли;
	    КонецЦикла;
		
		Предупреждение("Изменено "+строка(колСтр)+" строк",30);
КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанель2ТипЦен(Кнопка)
		
КонецПроцедуры

Процедура КоманднаяПанель1Флаг0(Кнопка)
	установитьФлаги(0);
КонецПроцедуры

Процедура КоманднаяПанель2Флаг1(Кнопка)
	установитьФлаги(0);
	установитьФлаги(1, истина);
КонецПроцедуры


Процедура КоманднаяПанель1Флаг1(Кнопка)
	
	//установитьФлаги(1);
	стр0 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
	
	максСкидка     = ?(стр0=неопределено, 200, стр0.МаксСкидкаНаценка);
	максПредоплата = ?(стр0=неопределено, 0, стр0.МаксСкидкаПредоплаты);
	
	Фл = Истина;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Ответ = Вопрос("Выделить ВСЕ строки?", Режим, 60);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда// не все...
	Режим = РежимДиалогаВопрос.ДаНетОтмена;
	
	Ответ = Вопрос("Выбрать Все правила по клиентам 1 подразделения?", Режим, 60, КодВозвратаДиалога.Да );
      Если Ответ = КодВозвратаДиалога.Да Тогда
	    вар = 222;
		 подразделение222 = справочники.Подразделения.НайтиПоКоду("00005");
		 ВвестиЗначение(подразделение222,"Выберите подразделение");
	 иначе
		Ответ = Вопрос("Выбрать Все правила выбранного менеджера?", Режим, 60, КодВозвратаДиалога.Да );
    	Если Ответ = КодВозвратаДиалога.Да Тогда
	    вар = 333;
		Менеджер333 = Менеджер;
		//ВвестиЗначение(Менеджер333,"Выберите менеджера");
		Иначе 
 		Ответ = Вопрос("Выбрать только Большие скидки "+?(Переключатель1=1,"Предоплаты ","")+"(Тёмно-красные) - [Да] 
						|только Небольшие скидки "+?(Переключатель1=1,"Предоплаты ","")+"(Ярко-красные)  - [Нет]
						|Иначе остальные (Чёрные) - [Отмена]?", Режим, 60, КодВозвратаДиалога.Да );
			Если Ответ = КодВозвратаДиалога.Да Тогда
				вар = 12;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
				вар = 11;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				вар = 13;
			КонецЕсли;
		КонецЕсли;	
	   КонецЕсли;
	 Иначе
		 вар = 0; //ВСЕ
	 КонецЕсли;
	 
	Для каждого стр1 из ТаблицаКлиентов цикл
		
		Если Вар=0 Тогда //все выкл!
			стр1.флаг = Фл;
			продолжить;
		КонецЕсли;
		
		Если вар = 222 тогда
			если стр1.Подразделение = Подразделение222 тогда
				стр1.флаг = истина;
			КонецЕсли;	
			продолжить;
		КонецЕсли;
		
		Если   вар = 333 тогда
			если стр1.Менеджер = Менеджер333 тогда
				стр1.флаг = истина;
			КонецЕсли;	
			продолжить;
		КонецЕсли;
			
//выключать НЕ НАДО!		стр1.флаг = ЛОЖЬ;
	Если Переключатель1=0 тогда // по Скидке
		Если стр1.СкидкаНаценка<200 тогда
				
			Если вар=11 Тогда
				если  -(стр1.СкидкаНаценка - максСкидка)<=КрасныйПорог 
					и -(стр1.СкидкаНаценка - максСкидка)>0 тогда
					стр1.флаг = Фл;
				КонецЕсли;	
				
			ИначеЕсли Вар=12 Тогда 
				если максСкидка - стр1.СкидкаНаценка > КрасныйПорог тогда
				стр1.флаг  = Фл;
				КонецЕсли;	
				
			ИначеЕсли Вар=13 тогда
				Если -(стр1.СкидкаНаценка - максСкидка)<=0 тогда
					стр1.флаг = Фл;
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли Вар=20 тогда //Синие
				стр1.флаг = Фл;
		КонецЕсли;
	Иначе
		Если вар=11 Тогда
		если  -(стр1.СкидкаПредоплаты - максПредоплата)<=КрасныйПорог 
			и -(стр1.СкидкаПредоплаты - максПредоплата)>0 тогда
			стр1.флаг = Фл;
		КонецЕсли;	
		
		ИначеЕсли Вар=12 Тогда 
		если -(стр1.СкидкаПредоплаты - максПредоплата) > КрасныйПорог тогда
		стр1.флаг  = Фл;
		КонецЕсли;	
				
		ИначеЕсли Вар=13 тогда
			Если-(стр1.СкидкаПредоплаты - максПредоплата)<=0 тогда
				стр1.флаг = Фл;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	КонецЦикла;	

КонецПроцедуры

процедура установитьФлаги(ном=0, поВидимойТаблице=ЛОЖЬ)
	
Если поВидимойТаблице тогда
	для каждого стр1 из ТаблицаКлиентов цикл
	если ЭлементыФОрмы.ТабличнаяЧастьКлиенты.ПроверитьСтроку( стр1 ) тогда
		стр1.Флаг = ?(ном=1, Истина, 
			?(ном=2, НЕ стр1.Флаг, ЛОЖЬ));
	КонецЕсли;		
	КонецЦикла;	
Иначе	
	для каждого стр1 из ТаблицаКлиентов цикл
		стр1.Флаг = ?(ном=1, Истина, 
			?(ном=2, НЕ стр1.Флаг, ЛОЖЬ));
	КонецЦикла;	
КонецЕсли;
КонецПроцедуры	

функция ПолучитьКоличествоЭлементовВСтолбце(НазвСтолбца="", поВидимойТаблице=ЛОЖЬ)
	
	табл = новый ТаблицаЗначений;
	табл.Колонки.Добавить("Поле");
	табл.Колонки.Добавить("Значение");
	
Если поВидимойТаблице тогда
	для каждого стр1 из ТаблицаКлиентов цикл
	если ЭлементыФОрмы.ТабличнаяЧастьКлиенты.ПроверитьСтроку( стр1 ) тогда
		эл1 = табл.Найти(стр1[НазвСтолбца],"Поле");	
		если эл1=неопределено тогда
			эл1 = табл.Добавить();
			эл1.Поле = стр1[НазвСтолбца];
			эл1.Значение = 1;
		иначе
			эл1.Значение = эл1.Значение +1;
		КонецЕсли;	
	КонецЕсли;		
	КонецЦикла;	
Иначе	
	для каждого стр1 из ТаблицаКлиентов цикл
		эл1 = табл.Найти(стр1[НазвСтолбца],"Поле");	
		если эл1=неопределено тогда
			эл1 = табл.Добавить();
			эл1.Поле = стр1[НазвСтолбца];
			эл1.Значение = 1;
		иначе
			эл1.Значение = эл1.Значение +1;
		КонецЕсли;	
	КонецЦикла;	
КонецЕсли;
возврат табл;
КонецФункции

Процедура Переключатель1ПриИзменении(Элемент)
	
	ЭлементыФормы.Переключатель1.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=0);
	ЭлементыФормы.Переключатель2.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=1);
	ЭлементыФормы.Переключатель3.Шрифт = новый Шрифт(ЭлементыФормы.Переключатель1.Шрифт,,, Переключатель1=2);
	
//	ЭлементыФормы.ПолеВыбора.доступность = (Переключатель1=2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.ТипЦен.доступность = (Переключатель1=2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.ЗаменитьСкидку.доступность = (Переключатель1<>2);
	//ЭлементыФормы.КоманднаяПанель2.Кнопки.Действие.доступность 		 = (Переключатель1<>2);
	
КонецПроцедуры

Процедура ТаблицаКлиентовПриАктивизацииЯчейки(Элемент)
	
	Если Переключатель1=2 тогда
		текСтр = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
		если текСтр=неопределено тогда
			возврат;
		КонецЕсли;	
	ПолеВыбора = ЭлементыФормы.ТаблицаКлиентов.ТекущаяКолонка.Имя;
		если прав(ПолеВыбора,1)<>"2" тогда // только новые значения редактируются!
			ПолеВыбора = ПолеВыбора+"2";
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаКлиентовПередУдалением(Элемент, Отказ)
	
	Стр2 = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
	
	Если Вопрос(" Вы действительно хотите УДАЛИТЬ Правило № "+строка(стр2.Приоритет)+"
			    |клиента: "+строка(Стр2.Контрагент)+" из его Персональных правил?", РежимДиалогаВопрос.ДаНет, 0, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	Отказ = ЛОЖЬ;
	КонецЕсли;
	
	Если Вопрос("  УДАЛЕНИЕ персональных правил Клиента опасная операция!
			    |Вы действительно хотите выполнить именно УДАЛЕНИЕ правил?", РежимДиалогаВопрос.ДаНет, 10, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	Отказ = ЛОЖЬ;
	КонецЕсли;

	Если не Отказ тогда
		регСв = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( регСв, стр2);
		
		попытка
			регСв.Удалить();
			сообщить("Удалено правило №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент),СтатусСообщения.Информация); 
			
		//----------------------Журнал изменений------------------------------	
			текстСообщ = "УДАЛЕНО правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|НаценкаСкидка: "+строка(стр2.СкидкаНаценка)
			+"; Предоплата:"+строка(стр2.СкидкаПредоплаты)
			+"; Бонус="+строка(стр2.Бонус)
			+"; ТипЦен="+строка(стр2.ТипЦен)
			+"; НоменклатурнаяГруппа="+строка(стр2.НоменклатурнаяГруппа)
			+"; Номенклатура="+строка(стр2.Номенклатура)
			+"; ПодСтрока="+строка(стр2.ПодСтрока)
			+"; ВходитВПапку="+строка(стр2.ВходитВПапку);
			
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий = текстСообщ;
		 записьЖурнала.Записать(истина); //перезапись

		исключение	
			сообщить("Ошибка при удалении правила №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент)+":"+ОписаниеОшибки(),СтатусСообщения.Внимание); 
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель2Удалить(Кнопка)
	Если Вопрос("     Вы действительно хотите УДАЛИТЬ ВСЕ 
				|выбранные Правила клиентов из их Персональных правил?", РежимДиалогаВопрос.ДаНет, 0, 
		     КодВозвратаДиалога.Нет, "Удалить" ) <> КодВозвратаДиалога.Да Тогда
    	ВОЗВРАТ;
	КонецЕсли;
	Если Вопрос("  УДАЛЕНИЕ персональных правил Клиентов опасная операция!
				|Вы действительно хотите выполнить именно УДАЛЕНИЕ правил?", РежимДиалогаВопрос.ДаНет, 10, 
		     КодВозвратаДиалога.Нет, "Удалить" )<> КодВозвратаДиалога.Да Тогда
    	ВОЗВРАТ;
	КонецЕсли;

сообщить(строка(ТекущаяДата())+" ------ начало удаления выбранных правил Клиентов ----");
N=0;
	для каждого стр2 из ТаблицаКлиентов цикл
		Если не стр2.Флаг тогда
			продолжить;
		КонецЕсли;	
		
		регСв = РегистрыСведений.ПравилаЦенообразования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( регСв, стр2);
		
		попытка
			регСв.Удалить();
			сообщить("Удалено правило №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент),СтатусСообщения.Информация); 
			N=N+1;
		//----------------------Журнал изменений------------------------------	
			текстСообщ = "УДАЛЕНО правило № "+строка(стр2.Приоритет)+" по контрагенту: "+строка(стр2.Контрагент)+"
			|НаценкаСкидка: "+строка(стр2.СкидкаНаценка)
			+"; Предоплата:"+строка(стр2.СкидкаПредоплаты)
			+"; Бонус="+строка(стр2.Бонус)
			+"; ТипЦен="+строка(стр2.ТипЦен)
			+"; НоменклатурнаяГруппа="+строка(стр2.НоменклатурнаяГруппа)
			+"; Номенклатура="+строка(стр2.Номенклатура)
			+"; ПодСтрока="+строка(стр2.ПодСтрока)
			+"; ВходитВПапку="+строка(стр2.ВходитВПапку);
			
		 записьЖурнала = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
		 записьЖурнала.НомерЗаписи = стр2.Приоритет;
		 записьЖурнала.Пользователь= ПараметрыСеанса.ТекущийПользователь;
		 записьЖурнала.Компьютер   = ИмяКомпьютера();
		 записьЖурнала.Объект	   = стр2.Контрагент;
		 записьЖурнала.Период	   = ТекущаяДата();
		 записьЖурнала.Событие	   = "Установка персональных скидок";
		 записьЖурнала.Комментарий = текстСообщ;
		 записьЖурнала.Записать(истина); //перезапись

		исключение	
			сообщить("Ошибка при удалении правила №"+строка(стр2.Приоритет)+" клиента: "+строка(стр2.Контрагент)+":"+ОписаниеОшибки(),СтатусСообщения.Внимание); 
		КонецПопытки;

	КонецЦикла;	
сообщить("------ Удалено "+строка(N)+" выбранных правил Клиентов ----");

	Предупреждение("Удалено "+строка(N)+" правил клиентов!");
КонецПроцедуры

Процедура Флажок3ПриИзменении(Элемент)
	
	ЭлементыФормы.ДеревоПравил.видимость = Флажок3;
	ЭлементыФормы.ТабличнаяЧастьПравила.Видимость  = НЕ Флажок3;
	
	Если Флажок3 тогда
		ОбновитьДерево();
	КонецЕсли;
	
КонецПроцедуры

//============== пока только для визуализации ==========================
процедура ОбновитьДерево()

	фл = Истина;
	Если не фл тогда
		фл = (Вопрос("Загрузить по новым категориям?", РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Да);
	иначе
		фл1 = Константы.ЦенообразованиеПоКатегориям.Получить();

		если не фл1 тогда
		Предупреждение("Новые правила (по категориям) еще не работают!
					   |   Работают старые провила!
					   |Эти правила - в разработке...",10);
		КонецЕсли;
				   
	КонецЕсли;

	Запрос = Новый Запрос;
	Если фл тогда
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА ПравилаЦенообразования.Приоритет < 0
	                |			ТОГДА ИСТИНА
	                |		ИНАЧЕ ЛОЖЬ
	                |	КОНЕЦ КАК Искл,
	                |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	                |	ПравилаЦенообразования.Категория КАК Категория,
	                |	ПравилаЦенообразования.ВидТовара КАК ВидТовара,
	                |	ПравилаЦенообразования.Производитель КАК Производитель,
	                |	ПравилаЦенообразования.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                |	ПравилаЦенообразования.ВходитВПапку,
	                |	ПравилаЦенообразования.Диаметр,
	                |	ПравилаЦенообразования.Номенклатура,
	                |	ПравилаЦенообразования.ТипЦен,
	                |	ПравилаЦенообразования.ПодСтрока,
	                |	ПравилаЦенообразования.СкидкаНаценкаКрОпт КАК СкидкаНаценкаКрОпт,
					
	                |	ЕстьNull(ПравилаЦенообразования0.СкидкаНаценка, ЕстьNull(ПравилаЦенообразования1.СкидкаНаценка, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) ) ) КАК СкидкаНаценкаVIP,
	                |	ЕстьNull(ПравилаЦенообразования0.СкидкаПредоплаты, ЕстьNull(ПравилаЦенообразования1.СкидкаПредоплаты, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) ) ) КАК СкидкаПредоплатыVIP,
										
	                |	ЕстьNull(ПравилаЦенообразования1.СкидкаНаценка, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) ) КАК СкидкаНаценка1,
	                |	ЕстьNull(ПравилаЦенообразования1.СкидкаПредоплаты, 
					|				ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) ) КАК СкидкаПредоплаты1,
					
	                |	ЕстьNull(ПравилаЦенообразования2.СкидкаНаценка, ПравилаЦенообразования.СкидкаНаценка) КАК СкидкаНаценка2,
	                |	ЕстьNull(ПравилаЦенообразования2.СкидкаПредоплаты, ПравилаЦенообразования.СкидкаПредоплаты) КАК СкидкаПредоплаты2,
					
	                |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка3,
	                |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты3,
					
	                |	ПравилаЦенообразования.ID,
	                |	ПравилаЦенообразования.ВидДефектаДляУценки,
	                |	ПравилаЦенообразования.ТрСПб КАК ТрСПб,
	                |	ПравилаЦенообразования.ТрРнД КАК ТрРнД,
	                |	ПравилаЦенообразования.ТрЕкт КАК ТрЕкт,
				   |	ПравилаЦенообразования.ТрТл КАК ТрТл,
					
					|	ПравилаЦенообразования.ИспользоватьТранспорт
	                |ИЗ
	                |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразования
					
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ2
				  	|					ГДЕ ПЦ2.Категория = &Категория2
					|//И ПЦ2.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования2
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования2.Приоритет
	
					|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ1
				  	|					ГДЕ ПЦ1.Категория = &Категория1
					|//И ПЦ1.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования1
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования1.Приоритет

					|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать СкидкаНаценка, СкидкаПредоплаты, Приоритет из РегистрСведений.ПравилаЦенообразованияОбщие как ПЦ0
				  	|					ГДЕ ПЦ0.Категория = &Категория0
					|//И ПЦ0.НоменклатурнаяГруппа.Ответственный = &Менеджер
					|)  КАК ПравилаЦенообразования0
	                |		ПО ПравилаЦенообразования.Приоритет = ПравилаЦенообразования0.Приоритет



	                |ГДЕ ( ПравилаЦенообразования.Категория = &Категория3 
				//	|		или ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
					|	  )
					|//И ПравилаЦенообразования.НоменклатурнаяГруппа.Ответственный = &Менеджер

	                |УПОРЯДОЧИТЬ ПО
					|	ВидТовара УБЫВ,
	                |	НоменклатурнаяГруппа УБЫВ,
	                |	Производитель УБЫВ,
					|	Приоритет
	                //|	, Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, Диаметр убыв
	                |ИТОГИ
	                |	МАКСИМУМ(СкидкаНаценкаКрОпт),
	                |	МАКСИМУМ(СкидкаНаценкаVIP),
	                |	МАКСИМУМ(СкидкаПредоплатыVIP),
	                |	МАКСИМУМ(СкидкаНаценка1),
	                |	МАКСИМУМ(СкидкаПредоплаты1),
	                |	МАКСИМУМ(СкидкаНаценка2),
	                |	МАКСИМУМ(СкидкаПредоплаты2),
	                |	МАКСИМУМ(СкидкаНаценка3),
	                |	МАКСИМУМ(СкидкаПредоплаты3),
	                |	МАКСИМУМ(ТрСПб),
	                |	МАКСИМУМ(ТрРнД),
	                |	МАКСИМУМ(ТрЕкт),
					 |	МАКСИМУМ(ТрТл),
					
					 |	МАКСИМУМ(ИспользоватьТранспорт)
	                |ПО
	                |	ВидТовара,
	                |	НоменклатурнаяГруппа
	              //  |	, Производитель
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
	Запрос.УстановитьПараметр("Категория0", перечисления.КатегорииСкидок.VIP);
	Запрос.УстановитьПараметр("Категория1", перечисления.КатегорииСкидок.к1);
	Запрос.УстановитьПараметр("Категория2", перечисления.КатегорииСкидок.к2);
	Запрос.УстановитьПараметр("Категория3", перечисления.КатегорииСкидок.к3);
	
	Иначе
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ПравилаЦенообразования.Приоритет < 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Искл,
	               |	ПравилаЦенообразования.Приоритет КАК Приоритет,
	               |	ПравилаЦенообразования.Категория КАК Категория,
	               |	ПравилаЦенообразования.ВидТовара КАК ВидТовара,
	               |	ПравилаЦенообразования.Производитель КАК Производитель,
				   
	               |	ПравилаЦенообразования.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	               |	ПравилаЦенообразования.ВходитВПапку,
	               |	ПравилаЦенообразования.Диаметр,
	               |	ПравилаЦенообразования.Номенклатура,
	               |	ПравилаЦенообразования.ТипЦен,
	               |	ПравилаЦенообразования.ПодСтрока,
	               |	ПравилаЦенообразования.СкидкаНаценкаКрОпт КАК СкидкаНаценкаКрОпт,
	               |	ПравилаЦенообразования.МаксСкидкаНаценка КАК СкидкаНаценкаVIP,
	               |	ПравилаЦенообразования.МаксСкидкаПредоплаты КАК СкидкаПредоплатыVIP,
	               |	ПравилаЦенообразования.МаксСкидкаНаценкаРук КАК СкидкаНаценка1,
	               |	ПравилаЦенообразования.МаксСкидкаПредоплатыРук КАК СкидкаПредоплаты1,
	               |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка,
	               |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты,
	               |	ПравилаЦенообразования.СкидкаНаценка КАК СкидкаНаценка3,
	               |	ПравилаЦенообразования.СкидкаПредоплаты КАК СкидкаПредоплаты3,
	               |	ПравилаЦенообразования.ID,
	               |	ПравилаЦенообразования.ВидДефектаДляУценки,
	                 |	ПравилаЦенообразования.ТрСПб КАК ТрСПб,
	               |	ПравилаЦенообразования.ТрРнД КАК ТрРнД,
	               |	ПравилаЦенообразования.ТрЕкт КАК ТрЕкт,
				   |	ПравилаЦенообразования.ТрТл КАК ТрТл,
				   |	ПравилаЦенообразования.ИспользоватьТранспорт
	               |ИЗ
	               |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразования
				   |
	               |ГДЕ ПравилаЦенообразования.ВидТовара<>Значение(Перечисление.ВидыТоваров.ПустаяСсылка)
				   |  И ( ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.ПустаяСсылка)
				//   |	или ПравилаЦенообразования.Категория = Значение(Перечисление.КатегорииСкидок.к3) 
				    | )
				   |//И ПравилаЦенообразования.НоменклатурнаяГруппа.Ответственный = &Менеджер
	               |
	                |УПОРЯДОЧИТЬ ПО
					|	ВидТовара УБЫВ,
	                |	НоменклатурнаяГруппа УБЫВ,
	                |	Производитель УБЫВ,
					|	Приоритет

	               // |	, Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, Диаметр убыв
										

	               |ИТОГИ
	               |	МАКСИМУМ(СкидкаНаценкаКрОпт),
	               |	МАКСИМУМ(СкидкаНаценкаVIP),
	               |	МАКСИМУМ(СкидкаПредоплатыVIP),
	               |	МАКСИМУМ(СкидкаНаценка1),
	               |	МАКСИМУМ(СкидкаПредоплаты1),
	               |	МАКСИМУМ(СкидкаНаценка),
	               |	МАКСИМУМ(СкидкаПредоплаты),
	               |	МАКСИМУМ(СкидкаНаценка3),
	               |	МАКСИМУМ(СкидкаПредоплаты3),
	               |	МАКСИМУМ(ТрСПб),
	               |	МАКСИМУМ(ТрРнД),
	               |	МАКСИМУМ(ТрЕкт),
	               |	МАКСИМУМ(ТрТл)
	               |ПО
	               |	ВидТовара,
	               |	НоменклатурнаяГруппа
	             //  |	,Производитель
	               |АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;			   
	
	//=============для менеджера Тов.Группы======================
	//Если не Менеджер.Пустая() тогда
	//Запрос.текст = стрЗаменить(Запрос.текст, "//И ", "И ");
	//Запрос.УстановитьПараметр("Менеджер", Менеджер);
	//КонецЕсли;

	Результат = Запрос.Выполнить();
	
	выборка1 = Результат.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
	ДеревоПравил.Строки.Очистить();
	
	
	номерСтроки = 0;
	Пока выборка1.Следующий() цикл
		стр1 = ДеревоПравил.Строки.Добавить();
		ЗаполнитьЗначенияСвойств( стр1, выборка1);
		//номерСтроки = номерСтроки+1;
		стр1.НомерСтроки =0;
		
		выборка2 = выборка1.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
		Пока выборка2.Следующий() цикл
			стр2 = стр1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, выборка2);
			//номерСтроки = номерСтроки+1;
			стр2.НомерСтроки = 0;
		
			выборка3 = выборка2.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
			Пока выборка3.Следующий() цикл
				стр3 = стр2.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр3, выборка3);
				номерСтроки = номерСтроки+ШагДерева;
				стр3.НомерСтроки = номерСтроки;
		
				выборка4 = выборка3.Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам );
				нн=1;
				Пока выборка4.Следующий() цикл
				стр4 = стр3.Строки.Добавить();
				ЗаполнитьЗначенияСвойств( стр4, выборка4);
			    стр4.НомерСтроки = номерСтроки + нн;
		        тип = стр4.типЦен;
				нн=нн+1;
				КонецЦикла;//4
			
			    стр3.типЦен = тип;
			КонецЦикла;//3
		    стр2.типЦен = тип;
		КонецЦикла;//2
		стр1.типЦен = тип;
	КонецЦикла;	//1
	
	ДеревоПравил.Строки.Сортировать("ВидТовара УБЫВ");
	для каждого стр1 из ДеревоПравил.Строки цикл
	стр1.Строки.Сортировать("НоменклатурнаяГруппа");
		для каждого стр2 из стр1.Строки цикл
		стр2.Строки.Сортировать("Производитель");
		    для каждого стр3 из стр2.Строки цикл
			стр3.Строки.Сортировать("Приоритет");
	        КонецЦикла;
        КонецЦикла;
	КонецЦикла;
	
 КонецПроцедуры

//функция ПолучитьНовыйID(НоваяЗапись, Категория1="")
//	
//	рез =  строка(НоваяЗапись.ВидТовара)
//	//	+ ?(ЗначениеЗаполнено(НоваяЗапись.ТипЦен), "."+строка(НоваяЗапись.ТипЦен.Код),".0")
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.Производитель), "."+строка(НоваяЗапись.Производитель.Код),".0")
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.НоменклатурнаяГруппа), "."+строка(НоваяЗапись.НоменклатурнаяГруппа.Код),".0")
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.ВходитВПапку), "."+строка(НоваяЗапись.ВходитВПапку.Код),".0")
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.Номенклатура), "."+строка(НоваяЗапись.Номенклатура.Код),".0")
//		//строки
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.Диаметр), "."+строка(НоваяЗапись.Диаметр),".0")
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.ПодСтрока), "."+строка(НоваяЗапись.ПодСтрока),".0")
//		
//	//+++ 07.04.2016 чтобы сохранить "совместимость" со старыми правилами ""
//		+ ?(ЗначениеЗаполнено(НоваяЗапись.ВидДефектаДляУценки), "."+строка(НоваяЗапись.ВидДефектаДляУценки.Код),"")
//		
//	//+++ 05.09.2016
//	//	+ ?(ЗначениеЗаполнено(Категория1), ?(ЗначениеЗаполнено(НоваяЗапись.ВидДефектаДляУценки),"", ".0")+"."+строка(Категория1),"")
//		+";";
//	возврат рез;	
//КонецФункции

//такая же! функция как и в персональных правилах!
функция ПолучитьНовыйID(стр1)
	флВсеПоля=Истина;
	возврат строка(стр1.ВидТовара) // 0 перечисление
	
		+ ?(ЗначениеЗаполнено(стр1.ТипЦен), "."+строка(стр1.ТипЦен.Код),".0")    //1) 30.09.2016
		
		+ ?(ЗначениеЗаполнено(стр1.Производитель), "."+строка(стр1.Производитель.Код),".0")  //2
		+?(не флВсеПоля,"", 
		 ?(ЗначениеЗаполнено(стр1.НоменклатурнаяГруппа), "."+строка(стр1.НоменклатурнаяГруппа.Код),".0")
		 
		+ ?(ЗначениеЗаполнено(стр1.ВходитВПапку), "."+строка(стр1.ВходитВПапку.Код),".0")
		+ ?(ЗначениеЗаполнено(стр1.Номенклатура), "."+строка(стр1.Номенклатура.Код),".0")
		//строки
		+ ?(ЗначениеЗаполнено(стр1.ПодСтрока), "."+строка(стр1.ПодСтрока),".0")
		
		+ ?(ЗначениеЗаполнено(стр1.Диаметр), "."+строка(стр1.Диаметр),"")
		
		//+++ 07.04.2016 чтобы сохранить "совместимость" со старыми правилами ""
		+ ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки), "."+строка(стр1.ВидДефектаДляУценки.Код),"")
		
		//+++ для всех категорий - единый ID
		//+ ?(ЗначениеЗаполнено(стр1.Категория), ?(ЗначениеЗаполнено(стр1.ВидДефектаДляУценки),"", ".0")+"."+строка(стр1.Категория),"")

		+";" );
КонецФункции

	
функция получитьТекстПравилаПоID(знач стрID_0="")
	стрID = стрID_0;
текстПравила = "";   
спис = новый массив;
i= найти(стрID, ".");  L=стрДлина(стрID);
пока i>0 цикл
стр1 = лев(стрID, i-1);  стрID = прав(стрID, L-i);
спис.Добавить(стр1);
i= найти(стрID, ".");  L=стрДлина(стрID);
КонецЦикла;

//7 полей должно быть
Если спис.Количество()=0 тогда
//	сообщить("Не найдена расшифровка по "+строка(стрID));
	возврат "";
КонецЕсли;	
текстПравила = спис[0];
текстПравила = текстПравила + ?(спис[1]="0","", " ; " + строка( справочники.ТипыЦенНоменклатуры.НайтиПоКоду( спис[1] ))  );

текстПравила = текстПравила + ?(спис[2]="0","", " ; Производитель: " + строка( справочники.Производители.НайтиПоКоду( спис[2] ))  );
текстПравила = текстПравила + ?(спис[3]="0","", " ; Ном.Группа: " + строка( справочники.НоменклатурныеГруппы.НайтиПоКоду( спис[3] )) );
текстПравила = текстПравила + ?(спис[4]="0","", " ; В Папке: " + строка( справочники.Номенклатура.НайтиПоКоду( спис[4] )) );
текстПравила = текстПравила + ?(спис[5]="0","", " ; Товар: " + спис[5] );
Если спис.Количество()>6 тогда
	//текстПравила = текстПравила + ?(спис[6]="0","", " ; D: " + спис[6] );
	текстПравила = текстПравила + ?(спис[6]="0;" или спис[6]="0", "", " ; Построка: " + спис[6] );
КонецЕсли;

Если спис.Количество()>7 тогда //+++ 07.04.2016
	текстПравила = текстПравила + ?(спис[7]="0;" или спис[7]="0","", " ; ВидДефектаДляУценки: "  + строка( справочники.ВидДефектаДляУценки.НайтиПоКоду( спис[7] ))  );
КонецЕсли;

возврат текстПравила;		
КонецФункции	


Процедура ДеревоПравилДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = текСтр.Диаметр;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		текСтр.Диаметр = рез;
	КонецЕсли;	

КонецПроцедуры


Процедура ДеревоПравилОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
КонецПроцедуры

Процедура ДеревоПравилПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока тогда // автоматом заполняется
		текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		      
		Уровень = получитьУровень(текСтр);		
		
		Если НЕ значениеЗаполнено(текСтр.ВидТовара)	тогда
			ЗаполнитьЗначенияСвойств( текСтр, текСтр.Родитель );
		КонецЕсли;
		
		если уровень>3 тогда // Глубже НЕЛЬЗЯ!
			род2 = текСтр.Родитель.Родитель;
			стр2 = род2.Строки.Добавить();
			ЗаполнитьЗначенияСвойств( стр2, текСтр);
		текСтр.Родитель.Строки.Удалить(текСтр.Родитель.Строки.Количество()-1);
		текСтр = стр2;
		КонецЕсли;	
		
		если уровень>=3 тогда
			текСтр.Родитель.Строки.Сортировать("Номенклатура убыв, ПодСтрока убыв, ВходитВПапку убыв, ВидДефектаДляУценки убыв, НомерСтроки");
			нн=0;
			для каждого СтрокаЧастьПравила из текСтр.Родитель.Строки цикл
			нн=нн+1;
	        СтрокаЧастьПравила.НомерСтроки = текСтр.Родитель.номерСтроки + нн;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры



Функция ПолучитьУровень( текСтр )
	уровень=0; род1 = текСтр.Родитель;
		Если ЗначениеЗаполнено( род1 ) тогда // 1
			уровень=уровень+1; род2 = род1.Родитель;
			Если ЗначениеЗаполнено( род2 ) тогда //2
		    	уровень=уровень+1; род3 = род2.Родитель;
				Если ЗначениеЗаполнено( род3 ) тогда //3
		    	уровень=уровень+1; род4 = род3.Родитель;
					Если ЗначениеЗаполнено( род4 ) тогда //4
		    		уровень=уровень+1;
                    КонецЕсли;//4
                КонецЕсли;//3
            КонецЕсли;//2
		КонецЕсли;//1
возврат уровень;
КонецФункции

процедура ИзменитьВнизПоДереву(текСтр, поле1)
	
		если текСтр.Строки.Количество()>0 тогда
			для каждого стр1 из текСтр.Строки цикл
				Если ЗначениеЗаполнено(текСтр[поле1]) тогда
					стр1[поле1]=текСтр[поле1];
				КонецЕсли;	
				ИзменитьВнизПоДереву(стр1, поле1); // всё дерево рекурентно
			КонецЦикла;	
		КонецЕсли;	
	
КонецПроцедуры	

Процедура ДеревоПравилПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(данныеСтроки.Родитель) тогда     // 1 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоСерый; 
	Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.Родитель.Родитель) тогда// 2 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЗолотистый; 
	Иначеесли НЕ ЗначениеЗаполнено(данныеСтроки.строки.Количество()>0) тогда// 3 уровень
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЖелтыйЗолотистый; 
    КонецЕсли;
	
//	ОформлениеСтроки.ячейки.ИспользоватьТранспорт.ОтображатьФлажок = истина;
//	ОформлениеСтроки.ячейки.ИспользоватьТранспорт.ДанныеФлажка = ДанныеСтроки.ИспользоватьТранспорт;
КонецПроцедуры

//Единая функция для изменения вниз по дереву
Процедура ДеревоПравилВнизПоДеревуПриИзменении(Элемент)
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если  ПолучитьУровень( текСтр )<3 тогда
		полеНазв = ЭлементыФормы.ДеревоПравил.ТекущаяКолонка.Имя;
		Если Вопрос("Изменить все правила вниз по дереву?",РежимДиалогаВопрос.ДаНет,0 )=КодВозвратаДиалога.Да тогда
		ИзменитьВнизПоДереву(текСтр, полеНазв);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура МенеджерПриИзменении(Элемент)
//	 КоманднаяПанельПравилаОбновить( неопределено ); //+++ 24.04.2018
КоманднаяПанель1ОбновитьСписок( неопределено );
КонецПроцедуры

Процедура КоманднаяПанельПравилаРазвернутьВсе(Кнопка)
	Свернуть = ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка;
	
	для каждого стр1 из ДеревоПравил.Строки цикл
		если Свернуть тогда
			ЭлементыФормы.ДеревоПравил.Свернуть(стр1);
		Иначе // сразу всё дерево
			ЭлементыФормы.ДеревоПравил.Развернуть(стр1, Истина);
		КонецЕсли;
		
		Если Свернуть тогда
		Для каждого стр2 из стр1.Строки цикл
			ЭлементыФормы.ДеревоПравил.Свернуть(стр2);
			для каждого стр3 из стр2.Строки цикл
				ЭлементыФормы.ДеревоПравил.Свернуть(стр3);
			КонецЦикла;
		КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;

ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка = не ЭлементыФормы.КоманднаяПанельПравила.Кнопки.РазвернутьВсе.Пометка;
	
КонецПроцедуры

Процедура ДеревоПравилПриАктивизацииСтроки(Элемент)
	
	ТаблицаКлиентов.Очистить();
	
	текСтр = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если текСтр<>неопределено 
		и текСтр.Строки.Количество()=0 
		и Флажок2 тогда
		КоманднаяПанель1ОбновитьСписок(неопределено);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТаблицаКлиентовКатегорияПриИзменении(Элемент)
	
	выборка = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
	выборка2 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	Если НЕ Флажок3 тогда
		Предупреждение("Нельзя менять категорию в старых правилах!",10);
		выборка.Категория = перечисления.КатегорииСкидок.ПустаяСсылка();
		возврат;
	КонецЕсли;	
	
	выборка.Отклонение = 0;
	 
	//изменение скидки предоплаты по Категории
	выборка.СкидкаНаценка    = выборка2["СкидкаНаценка"+строка(Выборка.Категория)];
	выборка.СкидкаПредоплаты = выборка2["СкидкаПредоплаты"+строка(Выборка.Категория)];

КонецПроцедуры

Процедура ТаблицаКлиентовОтклонениеПриИзменении(Элемент)
	
	выборка = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
	Если Флажок3 тогда
		выборка2 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
		
		//изменение скидки предоплаты по Категории
		выборка.СкидкаНаценка    = выборка2["СкидкаНаценка"+строка(Выборка.Категория)] + выборка.Отклонение;
	//	выборка.СкидкаПредоплаты = выборка2["СкидкаПредоплаты"+строка(Выборка.Категория)];
	иначе
		выборка2 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
		выборка.СкидкаНаценка  = выборка2.МаксСкидкаНаценка + выборка.Отклонение;
	КонецЕсли;
	
	ТаблицаКлиентовСкидкаНаценкаПриИзменении(неопределено);
	 
КонецПроцедуры

Процедура ТаблицаКлиентовСкидкаНаценкаПриИзменении(Элемент)
		
 выборка = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
 Если Флажок3 тогда
	выборка2 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;

	 если Выборка.СкидкаНаценка<=Выборка2.СкидкаНаценкаVIP тогда
	 Выборка.Категория  = перечисления.КатегорииСкидок.VIP;
	 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка2.СкидкаНаценкаVIP;
	 Иначеесли Выборка.СкидкаНаценка<=Выборка2.СкидкаНаценка1 тогда
	 Выборка.Категория  = перечисления.КатегорииСкидок.к1;
	 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка2.СкидкаНаценка1;
	 Иначеесли Выборка.СкидкаНаценка<=Выборка2.СкидкаНаценка тогда
	 Выборка.Категория  = перечисления.КатегорииСкидок.к2;
	 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка2.СкидкаНаценка;
	 Иначе //если Выборка.СкидкаНаценка<=Выборка.СкидкаНаценка1 тогда
	 Выборка.Категория  = перечисления.КатегорииСкидок.к3;
	 Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка2.СкидкаНаценка3;
 	 КонецЕсли;
 Иначе
 	выборка2 = ЭлементыФормы.ТабличнаяЧастьПравила.ТекущиеДанные;
 	Выборка.Отклонение = Выборка.СкидкаНаценка - Выборка2.МаксСкидкаНаценка;
КонецЕсли;
 
КонецПроцедуры

Процедура ТаблицаКлиентовОтклонениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
		СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
	ТаблицаКлиентовОтклонениеПриИзменении(неопределено);
КонецПроцедуры

Процедура МенеджерОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Предупреждение("Менеджер должен быть обязательно выбран!", 10);
	Менеджер = глТекущийПользователь;
КонецПроцедуры

Процедура ДеревоПравилПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Предупреждение("Нельзя добавлять новые общие правила из этой обработки!", 10);
	Отказ = истина;
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыПриоритетОткрытие(Элемент, СтандартнаяОбработка)
	 СтандартнаяОбработка = ложь;
//	 стр1 = ЭлементыФормы.ТаблицаКлиентов.ТекущиеДанные;
	 стр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	 
	 Если Флажок3 тогда
	 
	 	ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила в виде дерева
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = стр1.Контрагент;
   		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);
    Иначе
	    ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = стр1.Контрагент;
	КонецЕсли;
	ФормаПравила.Открыть();	
	
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки) тогда
		Возврат;
	КонецЕсли;
	
	//подсветка отклонения от своей категории
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	если текСтр0=неопределено тогда
		дельта = 0;
		дельтаПр = 0;
	иначе
		дельта = ДанныеСтроки.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(ДанныеСтроки.Категория)];
	  дельтаПр = ДанныеСтроки.СкидкаПредоплаты - текСтр0["СкидкаПредоплаты"+мас.Получить(ДанныеСтроки.Категория)];
	КонецЕсли;	
		
	Если дельта<0 и (-дельта)<КрасныйПорог тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноКрасный;
	ИначеЕсли дельта<0 и (-дельта)>=КрасныйПорог тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.Красный; //ярко-красный
	ИначеЕсли дельта>0 и (дельта)<КрасныйПорог тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.ТемноСиний;
	ИначеЕсли дельта>0 и (дельта)>=КрасныйПорог тогда
		ОформлениеСтроки.ЦветТекста = webЦвета.Синий;
	КонецЕсли;	
		
	//по предоплате - желтый фон
	Если дельтаПр<0 и (-дельтаПр)<КрасныйПорог тогда
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЖелтый;
	ИначеЕсли дельтаПр<0 и (-дельтаПр)>=КрасныйПорог тогда
		ОформлениеСтроки.ЦветФона = webЦвета.Желтый;
	КонецЕсли;
	
	
	Если ДанныеСтроки.флаг тогда // жирный
		ОформлениеСтроки.шрифт = новый шрифт(ОформлениеСтроки.шрифт,,,Истина);
	КонецЕсли;	
	
	Если данныеСтроки.Выключено тогда // СЕРЫЙ для выключенных правил!
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоСерый;
	КонецЕсли;	

КонецПроцедуры //оформление строк



//=========================ручное изменение============================================

Процедура ТабличнаяЧастьКлиентыДиаметрНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	формаД = ЭтотОбъект.ПолучитьФорму("ФормаДиаметра");
	формаД.Диаметр = Элемент.Значение;
	рез = формаД.ОткрытьМодально();
	Если рез<>неопределено тогда
		Элемент.Значение = рез; 
	КонецЕсли;
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	текСтр1.флаг=истина;
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыКатегорияПриИзменении(Элемент)
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	
	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //19.05.2017
		проверитьПереходКатегории(текСтр1, текСтр0)
	Иначе	
		текСтр1.СкидкаНаценка = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
		текСтр1.СкидкаПредоплаты = текСтр0["СкидкаПредоплаты"+мас.Получить(текСтр1.Категория)];
		текСтр1.Отклонение = 0;
	КонецЕсли;
	текСтр1.флаг=истина;
КонецПроцедуры



Процедура ТабличнаяЧастьКлиентыОтклонениеПриИзменении(Элемент)
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
	Если текСтр1.Категория <> перечисления.КатегорииСкидок.B2B тогда  //19.05.2017
		текСтр1.СкидкаНаценка = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)] + текСтр1.Отклонение;
	КонецЕсли;
	текСтр1.флаг=истина;
	проверитьПереходКатегории(текСтр1, текСтр0);	
КонецПроцедуры


Процедура ОтклонениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.1;
	ТабличнаяЧастьКлиентыОтклонениеПриИзменении(Элемент);
	
	Если Элемент.Значение<-70 тогда
		Элемент.Значение=-70;
		Предупреждение("Отклонение не может быть больше -70%",10);
	ИначеЕсли Элемент.Значение>50 тогда
		Элемент.Значение=50;
		Предупреждение("Отклонение слишком велико и не может быть больше +50%",10);
	КонецЕсли;

КонецПроцедуры



Процедура ТабличнаяЧастьКлиентыСкидкаНаценкаПриИзменении(Элемент)
	
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	
	Если текСтр1.СкидкаНаценка<-70 тогда
		текСтр1.СкидкаНаценка = -70;
	ИначеЕсли текСтр1.СкидкаНаценка>50 тогда
		текСтр1.СкидкаНаценка = 50;
	КонецЕсли;	

	Если текСтр1.Категория <> перечисления.КатегорииСкидок.B2B тогда  //19.05.2017
		текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
	КонецЕсли;	
	текСтр1.флаг=истина;
	проверитьПереходКатегории(текСтр1, текСтр0);	
	
КонецПроцедуры

Процедура СкидкаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
    ТабличнаяЧастьКлиентыСкидкаНаценкаПриИзменении(Элемент);
	
	Если Элемент.Значение<-70 тогда
		Элемент.Значение=-70;
		Предупреждение("Скидка не может быть больше -70%",10);
	ИначеЕсли Элемент.Значение>50 тогда
		Элемент.Значение=50;
		Предупреждение("Наценка слишком велика и не может быть больше +50%",10);
	КонецЕсли;
КонецПроцедуры



Процедура ТабличнаяЧастьКлиентыСкидкаПредоплатыПриИзменении(Элемент)
	
	текСтр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	текСтр1.флаг=истина;
	
	Если текСтр1.ТрКлиента<-10 тогда
		текСтр1.СкидкаПредоплаты = -10;
	ИначеЕсли текСтр1.ТрКлиента>0 тогда
		текСтр1.СкидкаПредоплаты = 0;
	КонецЕсли;	

	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //19.05.2017
	  текСтр1.СкидкаПредоплаты = 0;
    КонецЕсли;
  
КонецПроцедуры

Процедура ПредоплатаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.5;
	ТабличнаяЧастьКлиентыСкидкаПредоплатыПриИзменении(Элемент);
	Если Элемент.Значение<МаксСкидкаПредоплаты тогда
		Элемент.Значение=МаксСкидкаПредоплаты;
		Предупреждение("Предоплата не может быть больше "+строка(МаксСкидкаПредоплаты)+"%",10);
	ИначеЕсли Элемент.Значение>0 тогда
		Элемент.Значение=0;
		Предупреждение("Предоплата должна быть отрицательной и не может быть больше 0%",10);
	КонецЕсли;	
КонецПроцедуры


процедура проверитьПереходКатегории(текСтр1, текСтрОбщ)	
	Если текСтр1.Категория = перечисления.КатегорииСкидок.B2B тогда  //+++ 29.05.2017
        текСтр1.Отклонение = 0;
		текСтр1.СкидкаНаценка = 0;
		текСтр1.СкидкаПредоплаты = 0;
	Иначе	
		Если текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценкаVIP тогда
			текСтр1.Категория = перечисления.КатегорииСкидок.VIP;
			текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценкаVIP;
		ИначеЕсли текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка1 тогда
			текСтр1.Категория = перечисления.КатегорииСкидок.к1;
			текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка1;
		ИначеЕсли текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка2 тогда
			текСтр1.Категория = перечисления.КатегорииСкидок.к2;
			текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка2;
		Иначе //Если текСтр1.СкидкаНаценка<=текСтрОбщ.СкидкаНаценка3 тогда
			текСтр1.Категория = перечисления.КатегорииСкидок.к3;
			текСтр1.Отклонение = текСтр1.СкидкаНаценка - текСтрОбщ.СкидкаНаценка3;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ТабличнаяЧастьКлиентыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование тогда
		Предупреждение("Копировать правила 1 клиента можно ТОЛЬКО в его персональных правилах!
		|нажмите в поле ""Приоритет"" - кнопку ""Просмотр""...",30);
	Иначе
		Предупреждение("Нельзя добавлять правила для произвольных клиентов!
					   |  Уберите отбор (фильтр) со Списка клиентов...",30);
	КонецЕсли;
	Отказ = истина;
	
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	табл = ПолучитьКоличествоЭлементовВСтолбце("Флаг", истина);
	стр1 = табл.Найти(Истина, "Поле");
	если стр1 = неопределено тогда 
		КолФлаг=0;
	иначе КолФлаг =стр1.Значение; 
	КонецЕсли;
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки.Флаг.ТекстШапки = "Выбран("+строка(КолФлаг)+")";

	Если КолФлаг>0 тогда // блокируем изменение общ.правил
		ЭлементыФормы.ДеревоПравил.Доступность = ложь; 
		Флажок2=ЛОЖЬ;
	Иначе
		ЭлементыФормы.ДеревоПравил.Доступность = истина; 
		Флажок2 = Истина;
	КонецЕсли;	
	
мас1 = новый массив;
мас1.Добавить("Контрагент");
мас1.Добавить("КатегорияПокупателя");
мас1.Добавить("Менеджер");

мас1.Добавить("Категория");
мас1.Добавить("Диаметр");

мас1.Добавить("Город");
мас1.Добавить("РегионФактАдрес");
для i=0 по мас1.Количество()-1 цикл
	поле1=мас1[i];
	табл = ПолучитьКоличествоЭлементовВСтолбце(поле1, истина);
	КолКлиентов = табл.Количество();// кол.различных
	ЭлементыФормы.ТабличнаяЧастьКлиенты.Колонки[поле1].ТекстШапки = поле1+"("+строка(КолКлиентов)+")";
КонецЦикла;

КонецПроцедуры


//согласование
процедура добавитьВТаблСогласования( Исполнитель, текСтр1)
	
	текСтр0 = ЭлементыФормы.ДеревоПравил.ТекущиеДанные;
	дельта = текСтр1.СкидкаНаценка - текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
	Если дельта<=0 тогда
		стрСогл = таблСогл.Добавить();
		стрСогл.Исполнитель = Исполнитель;
		стрСогл.Контрагент  = текСтр1.Контрагент;
		
		стрСогл.НомерСтрокиОснования  = текСтр1.Приоритет;
		стрСогл.ID  = текСтр1.ID;
		
	 	стрСогл.Скидка =  текСтр1.СкидкаНаценка;
		стрСогл.СкидкаМин = текСтр0["СкидкаНаценка"+мас.Получить(текСтр1.Категория)];
		
		стрСогл.Номенклатура  = "Скидка: "+получитьТекстПравилаПоID(текСтр1.ID);
	КонецЕсли;	
	
	дельта2 = текСтр1.СкидкаПредоплаты - текСтр0["СкидкаПредоплаты"+мас.Получить(текСтр1.Категория)];
	Если дельта2<=0 тогда
		стрСогл = таблСогл.Добавить();
		стрСогл.Исполнитель = Исполнитель;
		стрСогл.Контрагент  = текСтр1.Контрагент;
		
		стрСогл.НомерСтрокиОснования  = текСтр1.Приоритет;
		стрСогл.ID  = текСтр1.ID;
		
	 	стрСогл.Скидка =  текСтр1.СкидкаПредоплаты;
		стрСогл.СкидкаМин = текСтр0["СкидкаПредоплаты"+мас.Получить(текСтр1.Категория)];
		
		стрСогл.Номенклатура  = "Скидка ПРЕДОПЛАТЫ: "+получитьТекстПравилаПоID(текСтр1.ID);
	КонецЕсли;	
		
КонецПроцедуры

Процедура КоманднаяПанель2Цены(Кнопка)
	
	 стр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	 Если стр1=неопределено тогда
		 Предупреждение("Не выбрано правило клиента!", 10);
		 возврат;
	 КонецЕсли;
	 
	 Если Флажок3 тогда
	 
	 	ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила в виде дерева
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = стр1.Контрагент;
   		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);
     Иначе
	    ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = стр1.Контрагент;
	 КонецЕсли;
	ФормаПравила.Открыть();	
	
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыТрКлиентаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * 0.1;
	Если Элемент.Значение <0 тогда
		Элемент.Значение =0
	ИначеЕсли Элемент.Значение > 5 тогда
		Элемент.Значение = 5
	Иначе
		стр1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
		стр1.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличнаяЧастьКлиентыТрКлиентаПриИзменении(Элемент)
	эл1 = ЭлементыФормы.ТабличнаяЧастьКлиенты.ТекущиеДанные;
	Если эл1.ТрКлиента<0 тогда
		эл1.ТрКлиента = 0;
	ИначеЕсли эл1.ТрКлиента>10 тогда
		эл1.ТрКлиента = 10;
	КонецЕсли;	
КонецПроцедуры

таблСогл = новый ТаблицаЗначений;

таблСогл.Колонки.Добавить("Исполнитель");
таблСогл.Колонки.Добавить("Контрагент");

таблСогл.Колонки.Добавить("НомерСтрокиОснования");
таблСогл.Колонки.Добавить("ID");

таблСогл.Колонки.Добавить("Скидка");
таблСогл.Колонки.Добавить("СкидкаМин");

таблСогл.Колонки.Добавить("Номенклатура");

СписокПроизводителиШин =Новый СписокЗначений;
СписокПроизводителиДисков =Новый СписокЗначений;

СписокПапкиШин =Новый СписокЗначений;
СписокПапкиДисков =Новый СписокЗначений;

	ТипЦенБазовая 	 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
	ТипЦенКрупныйОпт 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");
	//ТипЦенЯкорь 	 	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00003");
	//ТипЦенРеккомендРозн = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00011");
ШагДерева = 10;

	мас = новый Соответствие;
	мас.Вставить( перечисления.КатегорииСкидок.VIP, "VIP");
	мас.Вставить( перечисления.КатегорииСкидок.к1, "1");
	мас.Вставить( перечисления.КатегорииСкидок.к2, "2");
	мас.Вставить( перечисления.КатегорииСкидок.к3, "3");
	
МаксСкидкаПредоплаты = -30;