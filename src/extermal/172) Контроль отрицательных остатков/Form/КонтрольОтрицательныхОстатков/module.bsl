
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	КонтрольОтрицательныхОстатковИнициализация();
	
		Если ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Найти("Подразделение")=неопределено тогда
			ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Добавить("Подразделение", "Подразделение");
		КонецЕсли;	
		ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Подразделение.ВидСравнения = ВидСравнения.Равно;
		ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Подразделение.Использование = истина;
		Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
			ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Подразделение.Значение = глТекущийПользователь.ОсновноеПодразделение;
		иначе
			ПостроительОтчетаКонтрольОтрицательныхОстатков.Отбор.Подразделение.Значение =  справочники.Подразделения.НайтиПоКоду("00005");
		КонецЕсли;	
		
	ДатаСреза = ТекущаяДата();		
  	ПостроительОтчетаКонтрольОтрицательныхОстатков.Параметры.Вставить("ДатаСреза", ДатаСреза );
	
	
КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыКонтрольОтрицательныхОстатковКонтрольОтрицательныхОстатков_c622eaf6-b3a6-4e7d-99a7-c3039548b0cd", ПостроительОтчетаКонтрольОтрицательныхОстатков.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыКонтрольОтрицательныхОстатковНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(КонтрольОтрицательныхОстатков)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("КонтрольОтрицательныхОстатковНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаКонтрольОтрицательныхОстатков;
	Настройка = ПостроительОтчетаКонтрольОтрицательныхОстатков.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		КонтрольОтрицательныхОстатковВывести();
	Иначе
		ПостроительОтчетаКонтрольОтрицательныхОстатков.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыКонтрольОтрицательныхОстатковСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(КонтрольОтрицательныхОстатков)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	КонтрольОтрицательныхОстатковВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура КонтрольОтрицательныхОстатковВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(КонтрольОтрицательныхОстатков)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаКонтрольОтрицательныхОстатков.Параметры.Вставить("Головное", справочники.Подразделения.НайтиПоКоду("00005") );
  	ПостроительОтчетаКонтрольОтрицательныхОстатков.Параметры.Вставить("ДатаСреза", ДатаСреза );

	ПостроительОтчетаКонтрольОтрицательныхОстатков.Выполнить();
	ПостроительОтчетаКонтрольОтрицательныхОстатков.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаКонтрольОтрицательныхОстатков.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаКонтрольОтрицательныхОстатков.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаКонтрольОтрицательныхОстатков.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаКонтрольОтрицательныхОстатков.Макет = ВнешнийОтчетОбъект.ПолучитьМакет("КонтрольОтрицательныхОстатков");
	ПостроительОтчетаКонтрольОтрицательныхОстатков.ОформитьМакет();
	ПостроительОтчетаКонтрольОтрицательныхОстатков.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура КонтрольОтрицательныхОстатковИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(КонтрольОтрицательныхОстатков)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаКонтрольОтрицательныхОстатков.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладахОстатки.Склад.Подразделение = ЗНАЧЕНИЕ(справочник.Подразделения.ПустаяСсылка)
	|			ТОГДА &Головное
	|		ИНАЧЕ ТоварыНаСкладахОстатки.Склад.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.Склад),
	|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК Код,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыНаСкладахОстатки.Номенклатура),
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСреза, ) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	Склад,
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	ПостроительОтчетаКонтрольОтрицательныхОстатков.ЗаполнитьНастройки();
	ПостроительОтчетаКонтрольОтрицательныхОстатков.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаКонтрольОтрицательныхОстатков.ТекстЗаголовка = "Контроль отрицательных остатков";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыКонтрольОтрицательныхОстатковКонтрольОтрицательныхОстатков_c622eaf6-b3a6-4e7d-99a7-c3039548b0cd");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаКонтрольОтрицательныхОстатков.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
СтандартнаяОбработка = ложь;

	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОстаткиИОбороты.Период,
	                |	ТоварыНаСкладахОстаткиИОбороты.Регистратор,
	                |	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК КолНач,
	                |	ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход КАК Приход,
	                |	ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход КАК Расход,
	                |	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КолКон
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	                |			&НачДата,
	                |			&КонДата,
	                |			Регистратор,
	                |			ДвиженияИГраницыПериода,
	                |			Номенклатура = &Номенклатура
	                |				И Склад = &Склад) КАК ТоварыНаСкладахОстаткиИОбороты
	                |ИТОГИ
	                |	СУММА(КолНач),
	                |	СУММА(Приход),
	                |	СУММА(Расход),
	                |	СУММА(КолКон)
	                |ПО
	                |	ОБЩИЕ";
					
	 НачДата = ДобавитьМесяц(ТекущаяДата(),-3);
	 Запрос.Параметры.Вставить("НачДата", НачДата );
	 
	 КонДата = КонецДня( ТекущаяДата() );
	 Запрос.Параметры.Вставить("КонДата", КонДата );
	 
	 Запрос.Параметры.Вставить("Номенклатура", Расшифровка );
	 
	    i = найти(Элемент.ТекущаяОбласть.Имя,"C");  //R5C5
	 имя1 = лев(Элемент.ТекущаяОбласть.Имя,i)+"3";
	 имяСклада = ЭлементыФормы.ПолеТабличногоДокумента.ПолучитьОбласть(имя1).ТекущаяОбласть.Текст;
	 Склад = справочники.Склады.НайтиПоНаименованию( имяСклада );
	 
	 Запрос.Параметры.Вставить("Склад",Склад );
	 
	 
	 
	 
	 
	Макет = ВнешнийОтчетОбъект.ПолучитьМакет("КонтрольОтрицательныхОстатковДвижение");
	
	таблДок = новый ТабличныйДокумент;
	
	обл = Макет.ПолучитьОбласть("Заголовок");
	обл.Параметры.Номенклатура =  Расшифровка;
	обл.Параметры.Склад = Склад;
	обл.Параметры.НачДата = формат(НачДата, "ДЛФ=D");
	обл.Параметры.КонДата = формат(КонДата, "ДЛФ=D");
	таблДок.Вывести(обл);
	
	обл = Макет.ПолучитьОбласть("ШапкаТаблицы");
	таблДок.Вывести(обл);
	
	облИтог = Макет.ПолучитьОбласть("ПодвалТаблицы");
	выборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	выборкаИтог.Следующий();
	ЗаполнитьЗначенияСвойств(облИтог.Параметры, выборкаИтог);
	
	обл = Макет.ПолучитьОбласть("Детали");
	выборка = выборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	пока выборка.Следующий() цикл
		ЗаполнитьЗначенияСвойств(обл.Параметры, Выборка);
		таблДок.Вывести(обл);
	КонецЦикла;
	таблДок.Вывести(облИтог);
	
	таблДок.Защита = истина;
	таблДок.Показать();
		
КонецПроцедуры









