/// тестовая функция отправки упд
Перем СтатусыДокументовДиадок;
Перем СтатусыАнулированияДокументовДиадок;

перем ВерсияКомпоненты Экспорт ;
перем ТЗПД;
перем ТЗпоГТД;

Процедура ОтправитьУПД(Черновик) экспорт
	
	
	
	для каждого реализация из ТаблицаДокументовИсходящих цикл	
		если реализация.Вкл тогда
			
			//перем ТЗПД;
			//перем ТЗпоГТД;
			
			Organization= ПодготовитьИВернутьОрганизациюCom();
			//CounteragentList=Organization.GetCounteragentListByInnKpp("7607022304","760401001");   
			
			//Для сч=0 по CounteragentList.Count()-1 Цикл
			//	Сообщить(CounteragentList.GetItem(сч).Id);
			//КонецЦикла;	
			
			//CounterAgentId ="55c09e803e74478bb1cbce8737e60569@diadoc.ru";
			Организация = реализация.Организация;
			АдресОгранизации = ПолучитьАдрес(Организация);
			Контрагент =  реализация.Контрагент;	
			АдресКонтрагента = ПолучитьАдрес(Контрагент);
			ТЧ  = реализация.РеализацияСсылка.Товары.Выгрузить();
			
			ЯщикиКонтрагентов = Новый Массив;
			
			ИННКонтрагента= СокрЛП(Контрагент.ИНН);
			КППКонтрагента= СокрЛП(Контрагент.КПП);
			
			//Получаем список контрагентов с заданными ИНН/КПП
			Если ПустаяСтрока(ИННКонтрагента) тогда
				#Если Клиент тогда
					Сообщить("ИНН контрагента пустой!Выгрузка прервана");
					//Возврат;
				#КонецЕсли	
				Продолжить;
			иначе
				
				CounteragentList = Organization.GetCounteragentListByInnKpp(ИННКонтрагента, КППКонтрагента);
				Для Ц = 0 по CounteragentList.count-1 Цикл
					ЯщикиКонтрагентов.Добавить(CounteragentList.GetItem(Ц));
				КонецЦикла;
			КонецЕсли;
			
			если ЯщикиКонтрагентов.Количество() = 0 тогда
				 #Если Клиент тогда
					Сообщить("Не найден контрагент с такими ИНН/КПП в базе Контура! Возможно он не зарегистрирован в системе");					
				#КонецЕсли				
				//Возврат;
				Продолжить;
			КонецЕсли;
			
			CounterAgentId = ЯщикиКонтрагентов.Получить(0);    //берем первый 
			
			
			PackageSendTask = Organization.CreatePackageSendTask();
			
			PackageSendTask.CounterAgentId  = CounterAgentId.Id;
			//PackageSendTask.DelaySend           = истина;     //отправлять или нет, ложь - отправляем, истина - сохраняем без отправки
			PackageSendTask.IsDraft 		=  Черновик ;    ///черновик
			
			DocumentToSend = PackageSendTask.AddDocument("UniversalTransferDocument");
			
			Content = DocumentToSend.Content;       	
			
			
			Content.Number = ПолучитьНомерНаПечать(реализация.РеализацияСсылка);   //потом переопределим
			Content.Date   = реализация.Дата;
			
			Content.Function = "InvoiceAndBasic";
			//Content.Creator  = "ЗАО ТК Яршинторг, ИНН/КПП: 2012500001/111111111";
			Content.Creator  = Строка(Организация.НаименованиеПолное) + " ИНН/КПП:" +  Организация.ИНН + "/" + ?(Организация.ИНН = "7604069216","667945001",Организация.КПП);
			
			Content.Currency     =  реализация.Валюта.Код;
			Content.CurrencyRate = "1";
			
			//ПРОДВЕЦ
			Content.Seller.Name = Организация.НаименованиеПолное;
			Content.Seller.Inn  = Организация.ИНН;
			Если Организация.ИНН = "7604069216" тогда
				Content.Seller.Kpp  = "667945001";
			иначе
				Content.Seller.Kpp  = Организация.КПП;
			КонецЕсли;
			Content.Seller.type = "LegalEntity";			
			
			Если АдресОгранизации<> Неопределено тогда
				//Content.Seller.Address.RegionCode = АдресОгранизации.Поле2 ;				
				Поле4 =  РазложитьСтрокуВМассивПодстрок(АдресОгранизации.Поле4," ").Получить(0);
				Поле1 =  РазложитьСтрокуВМассивПодстрок(АдресОгранизации.Поле1," ").Получить(0);
				Поле6 =  РазложитьСтрокуВМассивПодстрок(АдресОгранизации.Поле6," ").Получить(0);
				Поле7 =  РазложитьСтрокуВМассивПодстрок(АдресОгранизации.Поле7," ").Получить(0);
				Поле8 =  РазложитьСтрокуВМассивПодстрок(АдресОгранизации.Поле8," ").Получить(0);
				
				Content.Seller.Address.RegionCode = Справочники.Регионы.НайтиПоНаименованию(АдресОгранизации.Поле2).Код ;
				Content.Seller.Address.City=  		АдресОгранизации.Поле4 ;
				Content.Seller.Address.ZipCode= 	Поле1 ;
				Content.Seller.Address.Street= 		АдресОгранизации.Поле6 ;
				Content.Seller.Address.Building =	АдресОгранизации.Поле7 ;
				Content.Seller.Address.Block =		АдресОгранизации.Поле8 ;
				Content.Seller.Address.Apartment  = АдресОгранизации.Поле9 ;
			иначе
				#Если Клиент тогда
					Сообщить("Адрес организации не найден! Выгрузка прервана!");					
				#КонецЕсли	
				   // Возврат;
				   Продолжить;
			КонецЕсли;
			
			
			
			//ПОКУПАТЕЛЬ
			Content.Buyer.Name = Контрагент.НаименованиеПолное;
			Content.Buyer.Inn  = Контрагент.ИНН;
			Content.Buyer.Kpp  = Контрагент.КПП;
			Content.Buyer.type = "LegalEntity";
			
			Если АдресКонтрагента<>Неопределено тогда
				
				Поле2 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле2," ").Получить(0);
				Поле4 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле4," ").Получить(0);
				Поле1 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле1," ").Получить(0);
				Поле6 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле6," ").Получить(0);
				Поле7 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле7," ").Получить(0);
				Поле8 =  РазложитьСтрокуВМассивПодстрок(АдресКонтрагента.Поле8," ").Получить(0); 				
				
				Content.Buyer.Address.RegionCode = 	Справочники.Регионы.НайтиПоНаименованию(АдресКонтрагента.Поле2).Код;
				Content.Buyer.Address.City=			АдресКонтрагента.Поле4;
				Content.Buyer.Address.ZipCode=		Поле1;
				Content.Buyer.Address.Street=		АдресКонтрагента.Поле6;
				Content.Buyer.Address.Building =	АдресКонтрагента.Поле7 ;
				Content.Buyer.Address.Block =		АдресКонтрагента.Поле8 ;
				Content.Buyer.Address.Apartment  = 	АдресКонтрагента.Поле9 ;
			иначе
				#Если Клиент тогда
					Сообщить("Адрес контрагента не найден! Выгрузка прервана!");					
				#КонецЕсли	
				//Возврат;
				Продолжить;
				
				Content.Buyer.Address.RegionCode = "76";
				Content.Buyer.Address.City="Ярославль";
				Content.Buyer.Address.ZipCode="150044";
				Content.Buyer.Address.Street="Базовая";
			КонецЕсли;
			
			
			//ГРУЗООТПРАВИТЕЛЬ
			Если ЗначениеЗаполнено(Реализация.РеализацияСсылка.Грузоотправитель) тогда
				Грузоотправитель = Реализация.РеализацияСсылка.Грузоотправитель;
				АдресГО = ПолучитьАдрес(Грузоотправитель,Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				Shipper = Content.Shipper.OrganizationInfo ;
				Shipper.Name = Грузоотправитель.НаименованиеПолное;
				Shipper.Inn  = Грузоотправитель.ИНН;
				Shipper.Kpp  = Грузоотправитель.КПП;
				Shipper.type = "LegalEntity";
				
				Если АдресГО<>Неопределено тогда
					
					Поле2 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле2," ").Получить(0);
					Поле4 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле4," ").Получить(0);
					Поле1 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле1," ").Получить(0);
					Поле6 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле6," ").Получить(0);
					Поле7 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле7," ").Получить(0);
					Поле8 =  РазложитьСтрокуВМассивПодстрок(АдресГО.Поле8," ").Получить(0); 				
					
					Shipper.Address.RegionCode = 	Справочники.Регионы.НайтиПоНаименованию(АдресГО.Поле2).Код;
					Shipper.Address.City=			АдресГО.Поле4;
					Shipper.Address.ZipCode=		Поле1;
					Shipper.Address.Street=		АдресГО.Поле6;
					Shipper.Address.Building =	АдресГО.Поле7 ;
					Shipper.Address.Block =		АдресГО.Поле8 ;
					Shipper.Address.Apartment  = 	АдресГО.Поле9 ;
				иначе
					#Если Клиент тогда
						Сообщить("Адрес Грузоотправителя не найден! Выгрузка прервана!");						
					#КонецЕсли	
					//Возврат;
					Продолжить;
					
					Shipper.Address.RegionCode = "76";
					Shipper.Address.City="Ярославль";
					Shipper.Address.ZipCode="150044";
					Shipper.Address.Street="Базовая";
				КонецЕсли;
			иначе
				Content.Shipper.SameAsSeller = истина;
				
			КонецЕсли;
			
			
			//ГРУЗОПОЛУЧАТЕЛЬ
			Если ЗначениеЗаполнено(Реализация.РеализацияСсылка.Грузополучатель) тогда
				
				Грузополучатель = Реализация.РеализацияСсылка.Грузополучатель;
				АдресГП = ПолучитьАдрес(Грузополучатель);

				
				Content.Consignee.Name = Грузополучатель.НаименованиеПолное;
				Content.Consignee.Inn  = Грузополучатель.ИНН;
				Content.Consignee.Kpp  = Грузополучатель.КПП;
				Content.Consignee.type = "LegalEntity";
				
				Если АдресКонтрагента<>Неопределено тогда
					
					Поле2 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле2," ").Получить(0);
					Поле4 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле4," ").Получить(0);
					Поле1 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле1," ").Получить(0);
					Поле6 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле6," ").Получить(0);
					Поле7 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле7," ").Получить(0);
					Поле8 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле8," ").Получить(0); 				
					
					Content.Consignee.Address.RegionCode = 	Справочники.Регионы.НайтиПоНаименованию(АдресГП.Поле2).Код;
					Content.Consignee.Address.City=			АдресГП.Поле4;
					Content.Consignee.Address.ZipCode=		Поле1;
					Content.Consignee.Address.Street=		АдресГП.Поле6;
					Content.Consignee.Address.Building =	АдресГП.Поле7 ;
					Content.Consignee.Address.Block =		АдресГП.Поле8 ;
					Content.Consignee.Address.Apartment  = 	АдресГП.Поле9 ;

				иначе
					#Если Клиент тогда
						Сообщить("Адрес Грузополучателя не найден! Выгрузка прервана!");
					#КонецЕсли	
					//Возврат;
					Продолжить;
					
					Content.Consignee.Address.RegionCode = "76";
					Content.Consignee.Address.City="Ярославль";
					Content.Consignee.Address.ZipCode="150044";
					Content.Consignee.Address.Street="Базовая";
				КонецЕсли;
			иначе   //если Грузополучатель не заполнен в документе  			
				
				Грузополучатель = Реализация.РеализацияСсылка.Контрагент;
				АдресГП = ПолучитьАдрес(Грузополучатель,Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);

				
				Content.Consignee.Name = Грузополучатель.НаименованиеПолное;
				Content.Consignee.Inn  = Грузополучатель.ИНН;
				Content.Consignee.Kpp  = Грузополучатель.КПП;
				Content.Consignee.type = "LegalEntity";
				
				Если АдресКонтрагента<>Неопределено тогда
					
					Поле2 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле2," ").Получить(0);
					Поле4 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле4," ").Получить(0);
					Поле1 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле1," ").Получить(0);
					Поле6 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле6," ").Получить(0);
					Поле7 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле7," ").Получить(0);
					Поле8 =  РазложитьСтрокуВМассивПодстрок(АдресГП.Поле8," ").Получить(0); 				
					
					Content.Consignee.Address.RegionCode = 	Справочники.Регионы.НайтиПоНаименованию(АдресГП.Поле2).Код;
					Content.Consignee.Address.City=			АдресГП.Поле4;
					Content.Consignee.Address.ZipCode=		Поле1;
					Content.Consignee.Address.Street=		АдресГП.Поле6;
					Content.Consignee.Address.Building =	АдресГП.Поле7 ;
					Content.Consignee.Address.Block =		АдресГП.Поле8 ;
					Content.Consignee.Address.Apartment  = 	АдресГП.Поле9 ;
				иначе
					#Если Клиент тогда
						Сообщить("Адрес Грузополучателя не найден! Выгрузка прервана!");
					#КонецЕсли	
					//Возврат;
					Продолжить;
					
					Content.Consignee.Address.RegionCode = "76";
					Content.Consignee.Address.City="Ярославль";
					Content.Consignee.Address.ZipCode="150044";
					Content.Consignee.Address.Street="Базовая";
				КонецЕсли;
				
				
				
			КонецЕсли; ///Грузополучатель
			             			
			
			суммаНДС = 0;
					
			///получение данных из Бухгалтерии!
			СтруктураXML = ЗаполнитьСтруктуруИзXMLРеализации(реализация.РеализацияСсылка);
			
			ТЗпоГТД = новый ТаблицаЗначений;
			ТЗпоГТД.Колонки.Добавить("НоменклатураКод" );
			ТЗпоГТД.Колонки.Добавить("Цена" );
			ТЗпоГТД.Колонки.Добавить("СтранаПроисхожденияКод" );
			ТЗпоГТД.Колонки.Добавить("НомерГТДКод" );
			
			
			Если СтруктураXML = Неопределено тогда
				#Если Клиент тогда
					Сообщить("Не получены данные из Бухгалтерии! Выгрузка невозможна! Сначала проведите обмен с Бухгалтьерией.");
				#КонецЕсли	
				//Возврат;
				Продолжить;
			КонецЕсли;
			
			для каждого стр из СтруктураXML.Товары цикл
				НовСтр = ТЗпоГТД.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);								
			КонецЦикла;
			
			
			
			
			Если СтруктураXML.СВойство("ДатаНомерДокументовОплаты") тогда
				ТЗПД = СтруктураXML.ДатаНомерДокументовОплаты; //массив структур
				
				для каждого стр из ТЗПД цикл
					PaymentDocument = Content.AddPaymentDocument();
					PaymentDocument.Date = стр.ДатаПлатежноРасчетногоДокумента;
					PaymentDocument.Number =  XMLСтрока(стр.НомерПлатежноРасчетногоДокумента);					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураСКППКодом = ОпределитьЦифровойИндексПодразделенияВБухгалтерии(реализация.реализацияССылка.Подразделение,СтруктураXML);
			
			Если  СтруктураСКППКодом <> Неопределено тогда
				Если ЗначениеЗаполнено(СтруктураСКППКодом.ЦифрКод ) тогда
					Content.Number = Content.Number + "/" + СтруктураСКППКодом.ЦифрКод;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтруктураСКППКодом.КПП) тогда
					Content.Seller.Kpp = СтруктураСКППКодом.КПП;
				КонецЕсли;
			КонецЕсли;
			      	                                                  
			 		
			
			
			//ТЧ табличная часть			
			для каждого стр из ТЧ цикл
				
				Item = Content.InvoiceTable.AddItem();
				
				Item.Product  = СокрЛП(стр.Номенклатура.Наименование);
				Item.UnitName =  СокрЛП(стр.ЕдиницаИзмерения);
				Item.UnitCode = стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
				Item.TaxRate  = XMLСтрока(ПолучитьСтавкуНДС(стр.СтавкаНДС));
				Item.ItemMark   = "Property";  //если только товавы, если услуги то Service
				Item.VendorCode  = стр.Номенклатура.Код;
				
				// Вместо числовых значений рекомендуется передавать их XML представление.
				Item.Quantity = XMLСтрока(стр.Количество); 				
								
				Item.Price    = XMLСтрока(Окр((стр.Сумма - стр.СуммаНДС)/стр.Количество,2));
				Item.Vat      = XMLСтрока(стр.СуммаНДС) ;
				Item.Subtotal = XMLСтрока(стр.Сумма);
				Item.SubtotalWithVatExcluded = XMLСтрока(стр.Сумма-стр.СуммаНДС  );
				суммаНДС = суммаНДС +  стр.СуммаНДС;
				
				
				// поиск ГТД
				если ТЗпоГТД <> Неопределено тогда   //мало ли не достучались до Бух
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("НоменклатураКод", стр.Номенклатура.Код);
					НайденныеСтроки = ТЗпоГТД.НайтиСтроки(ПараметрыОтбора);						
					
					для каждого стр из НайденныеСтроки цикл
						Если не ПустаяСтрока(стр.СтранаПроисхожденияКод) тогда
							customdeclaration						=Item.AddCustomDeclaration();      //Страна + гтд  в УТ нет ГТД, надо разобраться как получить и откуда
							customdeclaration.CountryCode 			= XMLСтрока(стр.СтранаПроисхожденияКод);
							customdeclaration.DeclarationNumber		= XMLСтрока( ПолучитьРегистрационныйНомер(стр.НомерГТДКод));  					
							Прервать;
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли;
				
			КонецЦикла;
			
			
			Content.TransferInfo.OperationInfo = "Результаты работ переданы (услуги оказаны)";
			Content.TransferInfo.TransferDate  = Формат( ТекущаяДата(),"ДФ=dd.MM.yyyy");
			TransferBasesItem = Content.TransferInfo.AddTransferBase();
			TransferBasesItem.DocumentName =  реализация.ДоговорКонтрагента.Наименование;
			TransferBasesItem.DocumentNumber =  реализация.ДоговорКонтрагента.Номер;
			
			TransferBasesItem.DocumentDate  =  формат(реализация.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy; ДП=01.01.0001");
			
			TransferBasesItem.DocumentInfo  = "Срок оплаты " + Формат( реализация.Сделка.ДатаОплаты,"ДФ=dd.MM.yyyy");
			Content.TransferInfo.TransferTextInfo  ="Транспортная накладная №" + ПолучитьНомерНаПечать(реализация.РеализацияСсылка) + " от " + формат( реализация.Дата,"ДФ=dd.MM.yyyy") +   ", доверенность № " + реализация.РеализацияСсылка.НомерДоверенности +" от " + формат(реализация.РеализацияСсылка.ДатаДоверенности,"ДФ=dd.MM.yyyy");				
			
			
			
			Content.InvoiceTable.TotalNet = XMLСтрока(реализация.Вес);  //нетто или нет ?
			Content.InvoiceTable.Vat      = XMLСтрока(суммаНДС);
			Content.InvoiceTable.Total    = XMLСтрока(реализация.Сумма);
			Content.InvoiceTable.TotalWithVatExcluded = XMLСтрока(реализация.Сумма - суммаНДС);
			
			Signer = Content.AddSigner();                  //подписант
			Signer.SignerDetails.Surname    = "Малышев";
			Signer.SignerDetails.FirstName  = "Игорь";
			Signer.SignerDetails.Patronymic = "Иванович";
			Signer.SignerDetails.JobTitle   = "Генеральный директор";
			Signer.SignerDetails.SignerType = "LegalEntity";
			Signer.SignerDetails.Inn        = "7604069216";
			Signer.SignerDetails.Powers     = "MadeAndResponsibleForOperationAndSignedInvoice";
			
			
			//+++
			//Возврат;
			
			//PackageSendTask.SaveContentPath = "C:\Users\sharafutdinov\Desktop\diadoc\ex";
		//	попытка 
				DocumentPackage = PackageSendTask.Send();
			//	#Если Клиент тогда
			//	Сообщить("Пакет с УПД " + строка( реализация.РеализацияСсылка) + " успешно отправлен.")
			//	#КонецЕсли
			//	
			//	//PackageSendTask.SaveContent("C:\Users\sharafutdinov\Desktop\diadoc\ex");
			//Исключение
			//	#Если Клиент тогда
			//	Сообщить("Ошибка отправки пакета: " + ИнформацияОбОшибке().Описание + " по причине " + ИнформацияОбОшибке().Причина)
			//	#КонецЕсли
			//КонецПопытки;
			 КоличествоОтправленных = DocumentPackage.Documents.Count;
			 сч=0;
			 
			 Пока сч < КоличествоОтправленных Цикл
				 
				 doc = DocumentPackage.Documents.GetItem(сч); 				 
				 ЗаписатьСтатусыВ1С(Реализация.РеализацияСсылка,doc,Перечисления.ВидыПечатныхФорм.УПД); 
				 сч = сч+1;
				 				 
			 КонецЦикла;    
			
			
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьСтатусыВ1С (ссылка,doc,ВидПечатнойФормы)
	
	     статус =  ПредставлениеСтатуса(doc);
		 свойство_статус = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДиадокСтатус") ;
		 свойство_ид = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДиадокИД"); 
		 если свойство_ид <> ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка() и свойство_статус <> ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка() тогда
			 //статус
			 регСв = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			 регСв.Объект   = ссылка;
			 регСв.Свойство = свойство_статус;
			 регСв.Значение = статус;
			 регСв.Записать(истина);
			 //ИД
			 регСв = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			 регСв.Объект   = ссылка;
			 регСв.Свойство = свойство_ид;
			 регСв.Значение = doc.documentId;
			 регСв.Записать(истина);
		 КонецЕсли;
		 
		 // долги по печатным формам доработать
		 
		 //НаборЗаписей = РегистрыСведений.ПечатныеФормыВНаличии.СоздатьНаборЗаписей();
		 //НаборЗаписей.Отбор.Документ.Установить(ссылка);
		 //НаборЗаписей.отбор.видПечатнойФормы.Установить(ВидПечатнойФормы);
		 //НаборЗаписей.Прочитать(); 
		 //Если НаборЗаписей.Количество()<>0 тогда  				//есть записи
		 //	Если НаборЗаписей[0].Статус <> Справочники.СостояниеДокументов.Оформлен тогда //
		 //   	 НаборЗаписей[0].Статус = Справочники.СостояниеДокументов.НедоОформлен;
		 //   	 НаборЗаписей[0].ВПути = Истина;
		 //   	 НаборЗаписей[0].ДатаПеремещения = НачалоДня(ТекущаяДата());
		 //   	 НаборЗаписей[0].Должность = Справочники.ДолжностиОрганизаций.Оператор;
		 //   	 //НаборЗаписей[0].КомментарийМенеджера = "ЭДО";
		 //   	 НаборЗаписей.Записать();
		 //	КонецЕсли;
		 //иначе                                           //нет - добавляем
		 //	НовСтр = НаборЗаписей.Добавить();
		 //	НовСтр.Документ = ссылка;
		 //	НовСтр.видПечатнойФормы = ВидПечатнойФормы;
		 //	НовСтр.Статус = Справочники.СостояниеДокументов.НедоОформлен;
		 //	НовСтр.ВПути = Истина;
		 //	НовСтр.ДатаПеремещения = НачалоДня(ТекущаяДата());
		 //	НовСтр.Должность = Справочники.ДолжностиОрганизаций.Оператор;
		 //	НовСтр.КомментарийМенеджера = "ЭДО";
		 //	НовСтр.Местонахождение = ссылка.Подразделение;
		 //	НаборЗаписей.Записать();
		 //КонецЕсли;

		 
 

КонецПроцедуры

Функция ОпределитьЦифровойИндексПодразделенияВБухгалтерии(Подразделение,СтруктураXML)
	
	Если ЗначениеЗаполнено(СтруктураXML.ПодразделениеОрганизацииКод) тогда
		ВозврСтруктура = новый Структура("ЦифрКод,КПП");
		Если СтруктураXML.ПодразделениеОрганизацииКод = "00128" тогда   //головное
			  ВозврСтруктура.КПП ="760250001"
		  иначеесли  СтруктураXML.ПодразделениеОрганизацииКод = "00106" тогда  // рнд
			  ВозврСтруктура.ЦифрКод = "1";			
			ВозврСтруктура.КПП = Подразделение.Контрагент.КПП;
		иначеесли  СтруктураXML.ПодразделениеОрганизацииКод = "00133" тогда    //москва
			ВозврСтруктура.ЦифрКод = "4";			
			ВозврСтруктура.КПП = Подразделение.Контрагент.КПП;
		иначеесли  СтруктураXML.ПодразделениеОрганизацииКод = "00138" тогда    //Екб
			ВозврСтруктура.ЦифрКод = "5";			
			ВозврСтруктура.КПП = Подразделение.Контрагент.КПП;
		иначеесли  СтруктураXML.ПодразделениеОрганизацииКод = "00122" тогда    //Екб
			ВозврСтруктура.ЦифрКод = "3";			
			ВозврСтруктура.КПП = Подразделение.Контрагент.КПП;
		иначеесли  СтруктураXML.ПодразделениеОрганизацииКод = "00112" тогда    //питер
			ВозврСтруктура.ЦифрКод = "2";			
			ВозврСтруктура.КПП = Подразделение.Контрагент.КПП;
		иначе
			
		КонецЕсли;
		
		
		
		возврат ВозврСтруктура;
		
	иначе
		возврат Неопределено;
	КонецЕсли;
	
КонецФункции



Функция ПодготовитьИВернутьОрганизациюCom() экспорт
	ЗагрузитьВнешнююКомпоненту(ИмяФайлаDll);
	
	ДиадокАПИ_ = Новый("AddIn.DiadocInvoiceAPI");
	ДиадокАПИ  = ДиадокАпи_.CreateObject();
	
	ДиадокАпи.ApiClientId =ApiClientId; //"yst-0b3e59aa-3d04-4e13-8b16-1e45c7a0abec";
	ДиадокАпи.ServerUrl   = ServerUrl;//  "https://diadoc-api.kontur.ru:443";
	
	Certificates = ДиадокАПИ.GetPersonalCertificates(истина);
	PersonalCertificate ="";
	Для сч=0 по Certificates.Count-1 Цикл
		
		
		Если (	Найти(НРег(Certificates.GetItem(сч).OrganizationName),"яршинторг")>0 И   Найти(НРег(Certificates.GetItem(сч).IssuerName),"контур")>0) Тогда
			PersonalCertificate = Certificates.GetItem(сч).Thumbprint;	
		КонецЕсли;	
		// Certificates.GetItem(2).Author 
	КонецЦикла;	
	
	Если (PersonalCertificate ="") Тогда
		СообщитьОбОшибке("Сертификат не найден mmc->Сертификаты->Личные. Пользуемся логином");
		ДиадокСоединение = ДиадокАПИ.CreateConnectionByLogin("lapenkov@yst.ru","facility");
	Иначе
		ДиадокСоединение = ДиадокАПИ.CreateConnectionByCertificate(PersonalCertificate);
	КонецЕсли;	
	
	//PersonalCertificate = Certificates.GetItem(2).Thumbprint;
	//  PersonalCertificate=CertificateThumbprint;
	
	ВерсияКомпоненты= ""	;
	ВерсияКомпоненты = ДиадокАПИ.GetVersion();
	OrganizationList = ДиадокСоединение.GetOrganizationList();
	
	Если OrganizationList.Count() > 0 Тогда
		Organization = OrganizationList.GetItem(0);
		//Сообщить( Organization.Name);
	Иначе
		ВызватьИсключение("Нет доступных организаций");
	КонецЕсли;
	Возврат  Organization;
КонецФункции	

Функция ПолучитьАдрес (Объект, ВидАдреса = Неопределено)экспорт
	
	Если ВидАдреса = Неопределено  тогда
		Если ТипЗнч(Объект)  = Тип("СправочникСсылка.Организации") тогда	
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ТипЗнч(Объект)  = Тип("СправочникСсылка.Контрагенты") тогда	
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	запрос = новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Комментарий
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено;
	иначе
		выб = РезультатЗапроса.Выбрать();
		выб.Следующий();
		ВОЗВРАТ  выб;
	КонецЕсли;
	

	
	
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе( СтрокаСообщенияОбОшибке = "")
	
	СтрокаПодключения = "";
	
	
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", ложь);
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "server:3041");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "v83ib_yst_bp");
	СтруктураПодключения.Вставить("Пользователь", "Робот (центр - номенклатура)");
	СтруктураПодключения.Вставить("Пароль", "09876");
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V83");
	
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;  	

	
	//ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	//Если Не ПараметровДостаточно Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Идет процесс соединения ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке соедиения с COM-сервером произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

функция ЗаполнитьСтруктуруИзXMLРеализации(реализация)
	
	ВОзвращаемаяСтруктура = новый Структура;
	
	ИмяФайла = Строка(КаталогВременныхФайлов())+реализация.Номер+"_fi.fi";
	xml = реализация.XML.Получить();
	Если xml<>Неопределено тогда
		реализация.XML.Получить().Записать(ИмяФайла);
	иначе
		СообщитьОбОшибке("Нет данных из бухгалтерии!");
		ВОзврат Неопределено;
	КонецЕсли;              	
	
	ЧтениеXML   = Новый ЧтениеFastInfoset;	
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ДатаНомерДокументовОплаты = новый Массив;
	Товары = новый Массив;
	
	Имя="";
	
	
	пока ЧтениеXML.Прочитать() цикл
		если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
			Имя = ЧтениеXML.Имя;
			Если Имя = "ДатаНомерДокументовОплаты" или Имя = "Товары" тогда
				ПрочитатьСтр(ЧтениеXML,ВОзвращаемаяСтруктура,Имя)
			КонецЕсли;
			
		иначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст тогда
			ВОзвращаемаяСтруктура.Вставить(Имя,ЧтениеXML.Значение);
			
		иначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
			Имя = "";
			
		КонецЕсли;	
	КонецЦикла;
	
 Возврат ВОзвращаемаяСтруктура;	
	
	
КонецФункции

функция ПрочитатьСтр(ЧтениеXML,ВОзвращаемаяСтруктура,ИмяТЧ)
	
	ВОзвращаемаяСтруктура.Вставить(ИмяТЧ, новый Массив);
	НовСтруктура = новый Структура;
	
	
	добавить = ложь;
	Имя ="";
	
	пока ЧтениеXML.Прочитать() цикл
		
		
		
		если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента  тогда			
			Имя = ЧтениеXML.Имя;
			
		иначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст  тогда
			//Если добавить тогда
			//иначе
			//КонецЕсли; 	
			НовСтруктура.Вставить(Имя,ЧтениеXML.Значение);
			
		иначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
			Если ЧтениеXML.Имя = "стр" тогда
				ВОзвращаемаяСтруктура[ИмяТЧ].Добавить(НовСтруктура);	
				НовСтруктура = новый Структура;
				//добавить = ложь;
			КонецЕсли;
			Имя = "";
			
			Если ЧтениеXML.Имя = ИмяТЧ тогда
				возврат ВОзвращаемаяСтруктура;
			КонецЕсли;      			
		КонецЕсли;	
	КонецЦикла;
	
	
	
КонецФункции

функция ПолучитьРегистрационныйНомер (НомерГТД)
	Если ЗначениеЗаполнено(НомерГТД) тогда
		КолV=0;
		Для стр = 0 по СтрДлина(НомерГТД) цикл
			Если стр <> СтрДлина(НомерГТД) тогда
				
				СледующийСимвол = Сред(НомерГТД, СтрДлина(НомерГТД)-стр, 1);
				Если СледующийСимвол="/" тогда
					КолV=КолV+1; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Если КолV = 3 тогда
			Для сч = 1 по СтрДлина(НомерГТД) Цикл
				Если Лев(Прав(НомерГТД, сч), 1) = "/" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			возврат Лев(НомерГТД, СтрДлина(НомерГТД) - сч);
		иначе
			возврат СокрЛП(НомерГТД);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПредставлениеСтатуса(ЭДОбъект) Экспорт
	
	ПредставлениеСтатуса= СтатусДокументооборота(ЭДОбъект.Status, ЭДОбъект.RevocationStatus, ЭДОбъект.Direction);
	
	Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
		ДополнитьСтатусДокументооборотаЗалоченнымПакетом(ЭДОбъект, ПредставлениеСтатуса);
	КонецЕсли;
	
	СтатусАнулированияДокумента= СтатусАнулированияДокумента(ЭДОбъект.RevocationStatus);
	Если НЕ ПустаяСтрока(СтатусАнулированияДокумента) Тогда
		Разделитель= ?(ПустаяСтрока(ПредставлениеСтатуса), "", ". ");
		ПредставлениеСтатуса= ПредставлениеСтатуса + Разделитель + СтатусАнулированияДокумента;
	КонецЕсли;
	
	//ДополнитьПредставлениеСтатусаСчетаФактуры(ЭДОбъект, ПредставлениеСтатуса);
	
	Возврат ПредставлениеСтатуса;
	
КонецФункции

Процедура ДополнитьСтатусДокументооборотаЗалоченнымПакетом(ЭДОбъект, СтатусДокументооборота)
	
	Если НЕ ЭДОбъект.IsLockedPackage Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусДокументооборота = "Требуется подпись" Тогда
		СтатусДокументооборота= СтатусДокументооборота + " пакета";
	КонецЕсли;
	
КонецПроцедуры




Функция СтатусАнулированияДокумента(RevocationStatus)
	
	Возврат Строка(СтатусыАнулированияДокументовДиадок()[RevocationStatus]);
	
КонецФункции

	Функция СтатусыАнулированияДокументовДиадок()
		
		Если СтатусыАнулированияДокументовДиадок <> Неопределено Тогда
			Возврат СтатусыАнулированияДокументовДиадок;
		КонецЕсли;
		
		СтатусыАнулированияДокументовДиадок= Новый Соответствие;
		
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationIsRequestedByMe", "Ожидается аннулирование");
		СтатусыАнулированияДокументовДиадок.Вставить("RequestsMyRevocation"		, "Требуется аннулирование");
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationRejected"		, "Отказано в аннулировании");
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationAccepted"		, "Аннулирован");
		
		Возврат СтатусыАнулированияДокументовДиадок;
		
	КонецФункции



	
	Функция СтатусыДокументовДиадокВходящие() экспорт
		
		СоответствиеСтатусов= Новый Соответствие;
		
		СоответствиеСтатусов.Вставить("InboundNotFinished"						, "Документооборот не завершен");
		СоответствиеСтатусов.Вставить("InboundFinished"							, "Документооборот завершен");
		СоответствиеСтатусов.Вставить("InboundWaitingForRecipientSignature"		, "Требуется подпись");
		СоответствиеСтатусов.Вставить("InboundWithRecipientSignature"			, "Подписан");
		СоответствиеСтатусов.Вставить("InboundRecipientSignatureRequestRejected", "Отказано в подписи");
		СоответствиеСтатусов.Вставить("InboundInvalidRecipientSignature"		, "Ошибка подписи");
		СоответствиеСтатусов.Вставить("InboundNoRecipientSignatureRequest"		, "Доставлен");
		СоответствиеСтатусов.Вставить("Inbound"									, "Получен");

		Возврат СоответствиеСтатусов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадокИсходящие() экспорт
		
		СоответствиеСтатусов=	Новый Соответствие;
		
		СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceipt"		 , "Ожидается извещение от покупателя");
		СоответствиеСтатусов.Вставить("OutboundNotFinished"						 , "Документооборот не завершен");
		СоответствиеСтатусов.Вставить("OutboundFinished"						 , "Документооборот завершен");
		СоответствиеСтатусов.Вставить("OutboundWaitingForRecipientSignature"	 , "Требуется подпись");
		СоответствиеСтатусов.Вставить("OutboundWithRecipientSignature"			 , "Подписан");
		СоответствиеСтатусов.Вставить("OutboundRecipientSignatureRequestRejected", "Отказано в подписи");
		СоответствиеСтатусов.Вставить("OutboundWaitingForSenderSignature"		 , "Требуется подписать и отправить");// через сайт " + НаименованиеСистемы);
		СоответствиеСтатусов.Вставить("OutboundInvalidSenderSignature"			 , "Ошибка подписи");
		СоответствиеСтатусов.Вставить("OutboundNoRecipientSignatureRequest"		 , "Доставлен");
		СоответствиеСтатусов.Вставить("Outbound"								 , "Отправлен");
		СоответствиеСтатусов.Вставить("OutboundWaitingForReceipt"		         , "Ожидается извещение от покупателя");
		СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceiptAndRecipientSignature", "Ожидается извещение и подпись от покупателя");
		
		Возврат СоответствиеСтатусов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадокВнутренние()
		
		СписокСтатусов=	Новый Соответствие;
		
		//...
		
		Возврат СписокСтатусов;
		
	КонецФункции
	
		

	Функция СтатусыДокументовДиадок() Экспорт
		
		Если СтатусыДокументовДиадок <> Неопределено Тогда
			Возврат СтатусыДокументовДиадок;
		КонецЕсли;
		
		СтатусыДокументовДиадок= Новый Структура;
		СтатусыДокументовДиадок.Вставить("Inbound" , СтатусыДокументовДиадокВходящие());
		СтатусыДокументовДиадок.Вставить("Outbound", СтатусыДокументовДиадокИсходящие());
		СтатусыДокументовДиадок.Вставить("Internal", СтатусыДокументовДиадокВнутренние());
		
		Возврат СтатусыДокументовДиадок;
		
	КонецФункции


	
Функция СтатусДокументооборота(Status, RevocationStatus, Direction)
	
	Перем СтатусДокументооборота;
	
	Если RevocationStatus <> "RevocationAccepted" Тогда
		СтатусДокументооборота= СтатусыДокументовДиадок()[Direction][Status];
	КонецЕсли;
	
	Возврат Строка(СтатусДокументооборота);
	
КонецФункции




	ИмяФайлаDll=  "C:\Diadoc_5_19_4_289.dll";  
	// ИмяФайлаDll=  "C:\Users\sharafutdinov\Desktop\diadoc\Diadoc_5_21_6_329.dll";   //+++Шарафутдинов
	ApiClientId = "yst-0b3e59aa-3d04-4e13-8b16-1e45c7a0abec";
	ServerUrl   = "https://diadoc-api.kontur.ru:443";
	BoxID="54d0b467-aade-47d6-8136-a2bbe2eeb67d";
	CertificateThumbprint="32E093F73BA252A7847DFDB8E940BD05FA6637D0"  ;
	ПрефиксСайтаДиадок="https://diadoc.kontur.ru";
	