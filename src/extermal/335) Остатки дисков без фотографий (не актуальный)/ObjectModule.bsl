Перем ТЗзаказ Экспорт;
Перем ТЗост Экспорт;
Перем СписокПоставщиков Экспорт;
Перем ДеревоФайлов;
Перем ТЗобщая;

Процедура НайтиФайлыПоМаске(ТекПуть,ТекИмяКаталога,Маска, ТЗфайлов)
	
	НайденныеФайлы = НайтиФайлы(ТекПуть+"\"+ТекИмяКаталога,Маска, Истина);

	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		
		ТекИмяФайла = ТекФайл.ИмяБезРасширения;
		НайденнаяСтрока = ТЗфайлов.Найти(ТекИмяФайла,"ИмяФайла");
		Если НайденнаяСтрока = Неопределено Тогда
			НовСтр = ТЗфайлов.Добавить();
			НовСтр.ИмяФайла = ТекФайл.ИмяБезРасширения;
			НовСтр.ИмяФайлаПолное = ТекФайл.Имя;
			НовСтр.Путь = ТекФайл.Путь;
		Иначе
			НовСтр = НайденнаяСтрока;
		КонецЕсли;	
		//заполнение соответствующей колонки
		НайденныеСтроки = ДеревоФайлов.НайтиСтроки(Новый Структура("Путь,Наименование", ТекПуть,ТекИмяКаталога));
		Для Каждого Стр из НайденныеСтроки Цикл
			НаимКолонки = Стр.НаимКолонки;
			прервать;
		КонецЦикла;
		НовСтр[НаимКолонки]=Истина;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СформироватьОтчет(Таб) Экспорт
	
	СписокПоставщиков = Новый СписокЗначений;
			
	//это таблица, из которой будут браться данные для печатной формы
	ТЗзаказ = Новый ТаблицаЗначений;
	ТЗзаказ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТЗзаказ.Колонки.Добавить("Модель", Новый ОписаниеТипов("Строка"));
	ТЗзаказ.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Строка"));
	ТЗзаказ.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("Строка"));
	ТЗзаказ.Колонки.Добавить("Склад", Новый ОписаниеТипов("Булево"));
	ТЗзаказ.Колонки.Добавить("НадоПечатать", Новый ОписаниеТипов("Булево"));
	ТЗзаказ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗзаказ.Колонки.Добавить("КолОст", Новый ОписаниеТипов("Число"));
	ТЗзаказ.Колонки.Добавить("НаимФайлаДляПоиска", Новый ОписаниеТипов("Строка"));
	ТЗзаказ.Колонки.Добавить("ГруппаАналогов", Новый ОписаниеТипов("Строка"));
	ТЗзаказ.Колонки.Добавить("НадоПечататьАналоги", Новый ОписаниеТипов("Число"));

	
	ТЗфайлов = Новый ТаблицаЗначений();
	ТЗфайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТЗфайлов.Колонки.Добавить("ИмяФайлаПолное", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТЗфайлов.Колонки.Добавить("Путь", Новый ОписаниеТипов("Строка"));
	
	//колонки ТЗ добавляем по названиям каталогов
	НомерКолонкиТЗ = 0;
	ДеревоФайлов = Новый ТаблицаЗначений;
	ДеревоФайлов.Колонки.Добавить("Путь",Новый ОписаниеТипов("Строка"));
	ДеревоФайлов.Колонки.Добавить("ПутьКраткий",Новый ОписаниеТипов("Строка"));
	ДеревоФайлов.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
	ДеревоФайлов.Колонки.Добавить("НаимКолонки",Новый ОписаниеТипов("Строка"));
	Для Каждого Стр из КаталогДляПоиска Цикл
		ТекПуть = СокрЛП(Стр.ИмяКаталога);
		Если НЕ Стр.Анализировать Тогда
			продолжить;
		КонецЕсли;	
		Если ТекПуть <> "" Тогда
			ТекПутьКраткий = ТекПуть;
			НомПоз = Найти(ТекПутьКраткий,"\");
			Пока НомПоз <> 0 Цикл
				ТекПутьКраткий = Сред(ТекПутьКраткий,НомПоз+1);
				НомПоз = Найти(ТекПутьКраткий,"\");
			КонецЦикла;	
			//ищем все подкаталоги, которые есть в этом каталоге
			СписокФайлов = НайтиФайлы(ТекПуть,"*.*",Ложь);
			КолПодКаталогов = 0;
			Для Каждого ТекФайл Из СписокФайлов Цикл
				Если ТекФайл.ЭтоКаталог() Тогда
					НовСтр = ДеревоФайлов.Добавить();
					НовСтр.Путь = ТекПуть;
					НовСтр.ПутьКраткий = ТекПутьКраткий;
					НовСтр.Наименование = ТекФайл.Имя;
					НовСтр.НаимКолонки = "_"+Строка(НомерКолонкиТЗ);
					ТЗзаказ.Колонки.Добавить(НовСтр.НаимКолонки,Новый ОписаниеТипов("Булево"));
					ТЗфайлов.Колонки.Добавить(НовСтр.НаимКолонки,Новый ОписаниеТипов("Булево"));
					НомерКолонкиТЗ = НомерКолонкиТЗ+1;
					КолПодКаталогов = КолПодКаталогов+1;
				КонецЕсли;	
			КонецЦикла;
			Если КолПодКаталогов = 0 Тогда
				//будет анализироваться этот каталог, а не его подкаталоги
				НовСтр = ДеревоФайлов.Добавить();
				//НовСтр.Путь = Лев(ТекПуть, СтрДлина(ТекПуть)-СтрДлина(ТекПутьКраткий)-1);
				НовСтр.Путь = ТекПуть;
				НовСтр.ПутьКраткий = ТекПутьКраткий;
				НовСтр.Наименование = "";
				НовСтр.НаимКолонки = "_"+Строка(НомерКолонкиТЗ);
				ТЗзаказ.Колонки.Добавить(НовСтр.НаимКолонки,Новый ОписаниеТипов("Булево"));
				ТЗфайлов.Колонки.Добавить(НовСтр.НаимКолонки,Новый ОписаниеТипов("Булево"));
				НомерКолонкиТЗ = НомерКолонкиТЗ+1;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	//ТЗзаказ.ВыбратьСтроку();
	//ДеревоФайлов.ВыбратьСтроку(); возврат;
	
	//соберем в ТЗ наименования файлов, существующих в указаном каталоге (по подкаталогам)
		
	ПечКаталогДляПоиска = "";
	Для Каждого Стр из КаталогДляПоиска Цикл
		Если НЕ Стр.Анализировать Тогда
			продолжить;
		КонецЕсли;
		ТекПуть = СокрЛП(Стр.ИмяКаталога);
		Если ТекПуть <> "" Тогда
			КолПодКаталогов = 0;
			СписокФайлов = НайтиФайлы(ТекПуть,"*.*",Ложь);
			Для Каждого ТекФайл Из СписокФайлов Цикл
				Если ТекФайл.ЭтоКаталог() Тогда
					ПечКаталогДляПоиска = ПечКаталогДляПоиска+ТекПуть+Символы.ПС; 
					НайтиФайлыПоМаске(ТекПуть,ТекФайл.Имя,"*.png", ТЗфайлов);
					НайтиФайлыПоМаске(ТекПуть,ТекФайл.Имя,"*.jpg", ТЗфайлов);
					КолПодКаталогов = КолПодКаталогов+1;
				КонецЕсли;
			КонецЦикла;
			Если КолПодКаталогов = 0 Тогда
				//поиск изображений в самом каталоге
				НайтиФайлыПоМаске(ТекПуть,"","*.png", ТЗфайлов);
				НайтиФайлыПоМаске(ТекПуть,"","*.jpg", ТЗфайлов);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	//ТЗфайлов.ВыбратьСтроку();
		
	ТЗфайловДляПоиска = ТЗфайлов.Скопировать();
	//ТЗфайловДляПоискаАнфас.Свернуть("ИмяФайла",);
	//ТЗфайловДляПоискаПрофиль = ТЗфайловПрофиль.Скопировать();
	//ТЗфайловДляПоискаПрофиль.Свернуть("ИмяФайла",);
	
	//в ТЗ соберем аналоги моделей из файла Ексел
	ТЗаналогов = Новый ТаблицаЗначений;
	ТЗаналогов.Колонки.Добавить("Модель", Новый ОписаниеТипов("СправочникСсылка.МоделиТоваров"));
	ТЗаналогов.Колонки.Добавить("ГруппаАналогов", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	//но это нужно только для Replica
	Если СокрЛП(ФайлАналоговМоделей)<>"" и Найти(ВРЕГ(Производитель.Наименование),"REPLICA")>0 Тогда
		ФайлНаДиске = Новый Файл(ФайлАналоговМоделей);
		Если ФайлНаДиске.Существует() Тогда
			Ексель = Новый COMОбъект("Excel.Application");
			Книга   = Ексель.Workbooks.Open(ФайлАналоговМоделей);
			Лист    = Книга.Worksheets(1);
			НомСтр = 2;
			НаимМодели = СокрЛП(Лист.Cells(НомСтр,1).Text);
			состояние("считывание из файла аналогов:  "+НаимМодели);
			Пока НаимМодели <> "" Цикл
				НаимГруппыАналогов = СокрЛП(Лист.Cells(НомСтр,2).Text);
				ТекМодель = Справочники.МоделиТоваров.НайтиПоНаименованию(НаимМодели);
				Если ТекМодель.Пустая() Тогда
					ТекМодель = Справочники.МоделиТоваров.НайтиПоНаименованию("_"+НаимМодели);
				КонецЕсли;
				Если ТекМодель.Пустая() Тогда
					сообщить("Не найдена модель, имеющаяся в файле аналогов:  "+НаимМодели);
				Иначе	
					НовСтр = ТЗаналогов.Добавить();
					НовСтр.Модель = ТекМодель;
					НовСтр.ГруппаАналогов = НаимГруппыАналогов;
				КонецЕсли;
				
				НомСтр = НомСтр+1;
				НаимМодели = СокрЛП(Лист.Cells(НомСтр,1).Text); 
				ОбработкаПрерыванияПользователя();
			КонецЦикла;	
			Ексель.DisplayAlerts = 0; 
			Ексель.Quit();
		КонецЕсли;	
	КонецЕсли;
	состояние("Поиск фотографий...");
	//ТЗаналогов.ВыбратьСтроку("Таблица аналогов");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктуальныеТовары.Номенклатура КАК Номенклатура,
	|	АктуальныеТовары.Номенклатура.Типоразмер.Диаметр КАК Размер,
	|	ЗначенияСвойствОбъектов.Значение КАК Цвет,
	|	ЕстьNull(ТоварыНаСкладахОстатки.КоличествоОстаток,0) КАК КолОст,
	|	АктуальныеТовары.Номенклатура.Модель КАК Модель,
	|	АктуальныеТовары.Номенклатура.Модель.Наименование КАК МодельНаименование,
	|	АктуальныеТовары.Номенклатура.Производитель КАК Производитель,
	|	АктуальныеТовары.Номенклатура.ОсновнойПоставщик КАК Поставщик
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегАктуальныеТовары.Номенклатура КАК Номенклатура
	|	ИЗ
	|		РегистрСведений.АктуальныеТовары КАК РегАктуальныеТовары
	|	ГДЕ
	|		РегАктуальныеТовары.Номенклатура.Производитель В ИЕРАРХИИ(&Производитель)#ДопУсловие1#) КАК АктуальныеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО АктуальныеТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &Цвет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				НЕ Склад.ЗапретитьИспользование И НЕ Склад.Транзитный
	|					И Номенклатура.Производитель В ИЕРАРХИИ (&Производитель)#ДопУсловие2#) КАК ТоварыНаСкладахОстатки
	|		ПО АктуальныеТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура";
	
	
	
	Если Найти(ВРЕГ(Производитель.Наименование),"REPLICA")>0 Тогда
		Если ФильтрConcept Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие1#"," И РегАктуальныеТовары.Номенклатура.Наименование ПОДОБНО &Concept");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие2#"," И Номенклатура.Наименование ПОДОБНО &Concept");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие1#"," И НЕ РегАктуальныеТовары.Номенклатура.Наименование ПОДОБНО &Concept");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие2#"," И НЕ Номенклатура.Наименование ПОДОБНО &Concept");
		КонецЕсли;	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие1#","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ДопУсловие2#","");
	КонецЕсли;
	Запрос.УстановитьПараметр("Цвет", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
	Запрос.УстановитьПараметр("СписокСкладов", Склад);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("Concept","%Concept%");
		
	
	ТЗост = Запрос.Выполнить().Выгрузить();
	ТЗост.Колонки.Добавить("НаимФайлаДляПоиска", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТЗост.Колонки.Добавить("ОсновнойПоставщик", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));

	Для Каждого Стр из ТЗост Цикл
		Если СокрЛП(Стр.Цвет)="" Тогда
			//цвет в свойствах не указан, берем цвет из наименования
			НомПозПробела = 0;
			ТекНаим = СокрЛП(Стр.Номенклатура.Наименование);
			Для к = 1 по СтрДлина(ТекНаим) Цикл
				Если Сред(ТекНаим, к, 1)=" " Тогда
					НомПозПробела = к;
				КонецЕсли;	
			КонецЦикла;
			Если НомПозПробела <> 0 Тогда
				ТекЦвет = Сред(ТекНаим, НомПозПробела+1);
				Стр.НаимФайлаДляПоиска = СокрЛП(Стр.МодельНаименование)+"_"+СокрЛП(ТекЦвет);
				Стр.Цвет = СокрЛП(ТекЦвет);
			КонецЕсли;	
		Иначе	
			Стр.НаимФайлаДляПоиска = СокрЛП(Стр.МодельНаименование)+"_"+СокрЛП(Стр.Цвет);
		КонецЕсли;
		//у производителя NZ есть модели с наименованием 1021 (только числа), например
		//а к фотографиям впереди присоединен префикс NZ
		Если СокрЛП(Стр.Номенклатура.Производитель.Наименование)="NZ" Тогда
			Попытка
				МодельИзСтрокиВЧисло = (СтрЗаменить(Число(СокрЛП(Стр.МодельНаименование)),Символы.НПП,""));
				Если МодельИзСтрокиВЧисло = СокрЛП(Стр.МодельНаименование) Тогда
					Стр.НаимФайлаДляПоиска = "NZ"+Стр.НаимФайлаДляПоиска;
				КонецЕсли;	
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
	//ТЗост.ВыбратьСтроку();
	
	//заполнение основного поставщика 
	//первое слово из наименования, если их несколько, то через запятую
	ТЗпоставщиков = ТЗост.Скопировать();
	ТЗпоставщиков.Свернуть("НаимФайлаДляПоиска, Поставщик");
	Для Каждого Стр из ТЗост Цикл
		ТекПоставщик = СокрЛП(Стр.Поставщик.Наименование);
		НайденныеСтроки = ТЗпоставщиков.НайтиСтроки(Новый Структура("НаимФайлаДляПоиска", Стр.НаимФайлаДляПоиска));
		Если НайденныеСтроки.Количество()<=1 Тогда
			НомПозПробела = Найти(ТекПоставщик," ");
			Если НомПозПробела > 0 Тогда
				Стр.ОсновнойПоставщик = СокрЛП(Лев(ТекПоставщик, НомПозПробела-1));
			Иначе
				Стр.ОсновнойПоставщик = ТекПоставщик;
			КонецЕсли;
			Если СписокПоставщиков.НайтиПоЗначению(Стр.Поставщик)=Неопределено Тогда
				СписокПоставщиков.Добавить(Стр.Поставщик, Стр.ОсновнойПоставщик);
			КонецЕсли;	
		Иначе
			//несколько поставщиков по данной модели и цвету
			Для Каждого СтрПост Из НайденныеСтроки Цикл
				ТекПоставщик = СокрЛП(СтрПост.Поставщик.Наименование);
				НомПозПробела = Найти(ТекПоставщик," ");
				Если НомПозПробела > 0 Тогда
					СтрТекПоставщик = СокрЛП(Лев(ТекПоставщик, НомПозПробела-1));
				Иначе
					СтрТекПоставщик = ТекПоставщик;
				КонецЕсли;	
				Если СписокПоставщиков.НайтиПоЗначению(СтрПост.Поставщик)=Неопределено Тогда
					СписокПоставщиков.Добавить(СтрПост.Поставщик, СтрТекПоставщик);
				КонецЕсли;	
				Стр.ОсновнойПоставщик = ?(СокрЛП(Стр.ОсновнойПоставщик)="",СтрТекПоставщик,СокрЛП(Стр.ОсновнойПоставщик)+", "+СтрТекПоставщик);
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗост.Номенклатура,
	|	ТЗост.ОсновнойПоставщик,
	|	ТЗост.Модель,
	|	ТЗост.Цвет,
	|	ТЗост.НаимФайлаДляПоиска,
	|	ТЗост.КолОст
	|ПОМЕСТИТЬ ТЗост
	|ИЗ
	|	&парТЗост КАК ТЗост
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗаналогов.Модель,
	|	ТЗаналогов.ГруппаАналогов
	|ПОМЕСТИТЬ ТЗаналогов
	|ИЗ
	|	&парТЗаналогов КАК ТЗаналогов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗфайлов1.ИмяФайла";
	Для Каждого Стр из ДеревоФайлов Цикл
		НаимКолонки = Стр.НаимКолонки;
		Запрос.Текст = Запрос.Текст+",
		|ТЗфайлов1."+НаимКолонки;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|ПОМЕСТИТЬ ТЗфайлов
	|ИЗ
	|	&парТЗфайлов КАК ТЗфайлов1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗост.Модель.Наименование КАК МодельНаименование,
	|	ТЗост.Цвет,
	|	МАКСИМУМ(ТЗост.КолОст) КАК КолОст,
	|	МАКСИМУМ(ТЗост.ОсновнойПоставщик) КАК ОсновнойПоставщик,
	|	ТЗост.НаимФайлаДляПоиска КАК НаимФайлаДляПоиска,";
	Для Каждого Стр из ДеревоФайлов Цикл
		НаимКолонки = Стр.НаимКолонки;
		Запрос.Текст = Запрос.Текст+"
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТЗфайлов.ИмяФайла ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ТЗфайлов."+НаимКолонки+"
	|		КОНЕЦ) КАК "+НаимКолонки+",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|	ЕСТЬNULL(ТЗаналогов.ГруппаАналогов, """") КАК ГруппаАналогов,
	|   ВЫБОР
	|     КОГДА ТЗаналогов.ГруппаАналогов ЕСТЬ NULL 
	|        ТОГДА """"
	|     ИНАЧЕ ТЗост.Цвет 
	|   КОНЕЦ КАК ЦветСортировки
	|ИЗ
	|	ТЗост КАК ТЗост
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗфайлов КАК ТЗфайлов
	|		ПО ТЗост.НаимФайлаДляПоиска = ТЗфайлов.ИмяФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗаналогов КАК ТЗаналогов
	|		ПО ТЗост.Модель = ТЗаналогов.Модель
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗаналогов.ГруппаАналогов,
	|	ТЗост.Модель.Наименование,
	|	ТЗост.Цвет,
	|	ТЗост.НаимФайлаДляПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТЗаналогов.ГруппаАналогов,
	|	ЦветСортировки,
	|	ТЗост.Модель.Наименование,
	|	ТЗост.Цвет
	|ИТОГИ ПО
	|	ГруппаАналогов";
	
	
	Запрос.УстановитьПараметр("парТЗост", ТЗост);
	Запрос.УстановитьПараметр("парТЗфайлов", ТЗфайловДляПоиска);
	//Запрос.УстановитьПараметр("парТЗфайловПрофиль", ТЗфайловДляПоискаПрофиль);
	Запрос.УстановитьПараметр("парТЗаналогов", ТЗаналогов);

	
	Макет = ПолучитьМакет("Макет");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаОсновная = Макет.ПолучитьОбласть("Шапка|Основная");
	ОбластьШапкаНаличиеФайла = Макет.ПолучитьОбласть("Шапка|НаличиеФайла");
    ОбластьШапкаПоставщик = Макет.ПолучитьОбласть("Шапка|Поставщик");

	ОбластьНоменклатура = Макет.ПолучитьОбласть("Номенклатура|Основная");
	ОбластьНаличиеФайла = Макет.ПолучитьОбласть("Номенклатура|НаличиеФайла");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Номенклатура|Поставщик");
	ОбластьАналоги = Макет.ПолучитьОбласть("Аналоги");
	
	ОбластьЗаголовок.Параметры.ПечЗаголовок = "Наличие изображений "+?(ЗначениеЗаполнено(Производитель),"производитель: "+Производитель, "все производители");
	//ОбластьЗаголовок.Параметры.ПечПутьПоиска = "анфас: "+ПечКаталогДляПоискаАнфас+"профиль: "+ПечКаталогДляПоискаПрофиль;
	ПечСклад = "";
	//Для Каждого Стр Из Склад Цикл
	//	ПечСклад = ПечСклад+Стр.Значение+"; ";
	//КонецЦикла;	
	ОбластьЗаголовок.Параметры.ПечСклад = ?(ПечСклад="","По всем складам","По складам: "+ПечСклад);
	Таб.Вывести(ОбластьЗаголовок);
	
	Таб.Вывести(ОбластьШапкаОсновная);
    НомСтрШапки = Таб.ВысотаТаблицы-1;
	НомКолонки1 = 6;
	НомКолонки2 = 6;
	ТекПуть = "";
	Для Каждого Стр из ДеревоФайлов Цикл
		ОбластьШапкаНаличиеФайла.Параметры.Путь = Стр.ПутьКраткий;
		ОбластьШапкаНаличиеФайла.Параметры.ИмяФайла = Стр.Наименование;
		Таб.Присоединить(ОбластьШапкаНаличиеФайла);
		Если ТекПуть = "" Тогда
			ТекПуть = Стр.ПутьКраткий;
		ИначеЕсли ТекПуть <> Стр.ПутьКраткий  Тогда
			Таб.Область(НомСтрШапки,НомКолонки1, НомСтрШапки, НомКолонки2).Объединить();
			НомКолонки1 = НомКолонки2+1;
			НомКолонки2 = НомКолонки1;
			ТекПуть = Стр.ПутьКраткий;
		Иначе
			НомКолонки2 = НомКолонки2+1;
		КонецЕсли;
	КонецЦикла;
	//Объединяем последние колонки
	Таб.Область(НомСтрШапки,НомКолонки1, НомСтрШапки, НомКолонки2).Объединить();
	Таб.Присоединить(ОбластьШапкаПоставщик);

	Таб.ФиксацияСверху = Таб.ВысотаТаблицы;
	Таб.НачатьАвтогруппировкуСтрок();
	РезультатЗапроса = Запрос.Выполнить();
	ТЗобщая = РезультатЗапроса.Выгрузить();
	ВыборкаАналогов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАналогов.Следующий() Цикл
		Если СокрЛП(ВыборкаАналогов.ГруппаАналогов)<>"" Тогда
			ОбластьАналоги.Параметры.Заполнить(ВыборкаАналогов);
			Таб.Вывести(ОбластьАналоги,1);
		КонецЕсли;
		Выборка = ВыборкаАналогов.Выбрать();
		НомПП = 0;
		Пока Выборка.Следующий() Цикл //по моделям
			НовСтр = ТЗзаказ.Добавить();
			НовСтр.Модель = Выборка.МодельНаименование;
			НовСтр.Цвет = Выборка.Цвет;
			НовСтр.Поставщик = Выборка.ОсновнойПоставщик;
			НовСтр.ГруппаАналогов = ВыборкаАналогов.ГруппаАналогов;
			НовСтр.НадоПечататьАналоги = 1;
			НомПП = НомПП+1;
			НазваниеИзображения = Выборка.НаимФайлаДляПоиска;
			состояние("Анализ "+НазваниеИзображения);
			ОбластьНоменклатура.Параметры.Заполнить(Выборка);
			ОбластьНоменклатура.Параметры.НазваниеИзображения = НазваниеИзображения;
			ОбластьНоменклатура.Параметры.НомПП = НомПП;
			Если Выборка.КолОст < 4 Тогда
				ОбластьНоменклатура.Параметры.ПечСклад = "-";
				НовСтр.Склад = Ложь;
			Иначе
				ОбластьНоменклатура.Параметры.ПечСклад = "V";
				НовСтр.Склад = Истина;
			КонецЕсли;
			Таб.Вывести(ОбластьНоменклатура,2);
			Для Каждого Стр из ДеревоФайлов Цикл
				НаимКолонки = Стр.НаимКолонки;
				Если Выборка[НаимКолонки] Тогда
					ОбластьНаличиеФайла.Параметры.ПечНаличие = "V";
				Иначе
					ОбластьНаличиеФайла.Параметры.ПечНаличие = "-";
					//только если нет фотографии без фона, то нужно задание поставщику или на склад
					Если Найти(ВРЕГ(СокрЛП(Стр.ПутьКраткий)),"БЕЗ ФОНА")=1 Тогда  
						НовСтр.НадоПечатать = Истина;
						НовСтр.НадоПечататьАналоги = 0;
					КонецЕсли;
				КонецЕсли;
				НовСтр.НаимФайлаДляПоиска = Выборка.НаимФайлаДляПоиска;
				Таб.Присоединить(ОбластьНаличиеФайла);
			КонецЦикла;
			ОбластьПоставщик.Параметры.ОсновнойПоставщик = Выборка.ОсновнойПоставщик;
			Таб.Присоединить(ОбластьПоставщик);
		КонецЦикла; //по моделям
	КонецЦикла;  //по группам аналогов
	
КонецПроцедуры	

Процедура ПечатьЗаданияПоставщику(СтрВыбПоставщик, ВыбПоставщик) Экспорт
	
	Макет = ПолучитьМакет("ЗаявкаПоставщику");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьГруппаАналогов = Макет.ПолучитьОбласть("ГруппаАналогов");
	
	//ТЗзаказ.ВыбратьСтроку();
	//печатаем в заказ поставщику те модели, которые нужно печатать, не зависимо от того, есть они на складе или нет.
	НайденныеСтроки = ТЗзаказ.НайтиСтроки(Новый Структура("НадоПечатать", Истина));
	ТЗотбор = ТЗзаказ.Скопировать(НайденныеСтроки);
	
	//удалим из заказа аналоги, если в этой группе этого цвета имеется хотя бы у одной позиции фотография
	ТЗгрупп = ТЗзаказ.Скопировать();
	ТЗгрупп.Свернуть("ГруппаАналогов, Цвет", "НадоПечататьАналоги");
	Для Каждого Стр из ТЗгрупп Цикл
		Если СокрЛП(Стр.ГруппаАналогов) = "" или Стр.НадоПечататьАналоги = 0 Тогда
			продолжить;
		КонецЕсли;
		НайденныеСтроки = ТЗотбор.НайтиСтроки(Новый Структура("ГруппаАналогов, Цвет", Стр.ГруппаАналогов, Стр.Цвет));
		Для Каждого Стр1 из НайденныеСтроки Цикл
			ТЗотбор.Удалить(Стр1);
		КонецЦикла;	
	КонецЦикла;	
	
	Если ТЗотбор.Количество()=0 Тогда
		сообщить("Нет данных для печати");
		возврат;
	КонецЕсли;
	
	ТабЗаказ = Новый ТабличныйДокумент;
	ОбластьШапка.Параметры.ПечЗаголовок = "Заказ на фотографии поставщику "+ВыбПоставщик;
	ТабЗаказ.Вывести(ОбластьШапка);
	ТабЗаказ.ФиксацияСверху = ТабЗаказ.ВысотаТаблицы;
	
	//для REPLICA заказ поставщику нужно группировать по группам аналогов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(времТЗ.ГруппаАналогов КАК СТРОКА(150)) КАК ГруппаАналогов,
	               |	ВЫРАЗИТЬ(времТЗ.Модель КАК СТРОКА(150)) КАК Модель,
	               |	времТЗ.Цвет КАК Цвет,
	               |	времТЗ.Поставщик КАК Поставщик,
	               |	времТЗ.НадоПечатать КАК НадоПечатать,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(времТЗ.ГруппаАналогов КАК СТРОКА(150))) = """"
	               |			ТОГДА """"
	               |		ИНАЧЕ ВЫРАЗИТЬ(времТЗ.Цвет КАК СТРОКА(150))
	               |	КОНЕЦ КАК ЦветГруппировки
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	&парТЗ КАК времТЗ
	               |ГДЕ
	               |	времТЗ.Поставщик ПОДОБНО &Поставщик
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.ГруппаАналогов КАК ГруппаАналогов,
	               |	ТЗ.Модель КАК Модель,
	               |	ТЗ.Цвет,
	               |	ТЗ.ЦветГруппировки КАК ЦветГруппировки
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |	ГруппаАналогов,
	               |	Модель
	               |ИТОГИ ПО
	               |	ГруппаАналогов,
	               |	ЦветГруппировки";
	
	
	Запрос.УстановитьПараметр("парТЗ", ТЗотбор);
	Запрос.УстановитьПараметр("Поставщик", "%"+СтрВыбПоставщик+"%");
				   
	НомПП = 0;
	ТабЗаказ.НачатьАвтогруппировкуСтрок();
	ВыборкаАналогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАналогов.Следующий() Цикл
		ОбластьГруппаАналогов.Параметры.Заполнить(ВыборкаАналогов);
		Табзаказ.Вывести(ОбластьГруппаАналогов,1);
		ВыборкаЦвет = ВыборкаАналогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЦвет.Следующий() Цикл
			Выборка = ВыборкаЦвет.Выбрать();
			Пока Выборка.Следующий() Цикл
				НомПП = НомПП+1;
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				ОбластьСтрока.Параметры.НомПП = НомПП;
				Табзаказ.Вывести(ОбластьСтрока,2);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	ТабЗаказ.ЗакончитьАвтогруппировкуСтрок();
	
	ТабЗаказ.Показать("Заказ поставщику  "+СтрВыбПоставщик);
		
КонецПроцедуры	

Процедура ПечатьЗаданияНаОтгрузку() Экспорт
	
	НайденныеСтроки = ТЗзаказ.НайтиСтроки(Новый Структура("НадоПечатать, Склад", Истина, Истина));
	ТЗмоделей = ТЗзаказ.Скопировать(НайденныеСтроки);
	ТЗмоделей.Свернуть("НаимФайлаДляПоиска");
	//ТЗост.ВыбратьСтроку();
	
	ТЗдляПечати = Новый ТаблицаЗначений;
	ТЗдляПечати.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗдляПечати.Колонки.Добавить("КолОст", Новый ОписаниеТипов("Число"));
    	
	//поиск номенклатуры для печати
	//берем по каждой модели максимальный размер и максимальный остаток от 4-х штук
	ЗапросОст = Новый Запрос;
	ЗапросОст.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗмоделей.НаимФайлаДляПоиска КАК СТРОКА(100)) КАК НаимФайлаДляПоиска
	|ПОМЕСТИТЬ времТЗмоделей
	|ИЗ
	|	&парТЗмоделей КАК ТЗмоделей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗост.Номенклатура КАК Номенклатура,
	|	ТЗост.Размер КАК Размер,
	|	ТЗост.КолОст КАК КолОст,
	|	ТЗост.МодельНаименование КАК Модель,
	|	ТЗост.Цвет КАК Цвет,
	|	ТЗост.НаимФайлаДляПоиска КАК НаимФайлаДляПоиска
	|ПОМЕСТИТЬ времТЗост
	|ИЗ
	|	&ПарТЗост КАК ТЗост
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	времТЗост.Номенклатура КАК Номенклатура,
	|	времТЗост.Размер КАК Размер,
	|	времТЗост.КолОст КАК КолОст,
	|	ЕСТЬNULL(времТЗмоделей.НаимФайлаДляПоиска, """") КАК НаимФайлаДляПоиска
	|ИЗ
	|	времТЗост КАК времТЗост
	|		ЛЕВОЕ СОЕДИНЕНИЕ времТЗмоделей КАК времТЗмоделей
	|		ПО времТЗост.НаимФайлаДляПоиска = времТЗмоделей.НаимФайлаДляПоиска
	|ГДЕ
	|	ЕСТЬNULL(времТЗмоделей.НаимФайлаДляПоиска, """") <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаимФайлаДляПоиска,
	|	Размер УБЫВ,
	|	КолОст УБЫВ
	|ИТОГИ ПО
	|	НаимФайлаДляПоиска";
	
	ЗапросОст.УстановитьПараметр("парТЗмоделей",ТЗмоделей);
	ЗапросОст.УстановитьПараметр("парТЗост",ТЗост);
	
	ВыборкаНом = ЗапросОст.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНом.Следующий() Цикл
		Выборка = ВыборкаНом.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КолОст >= 4 Тогда
				НовСтр = ТЗдляПечати.Добавить();
				НовСтр.Номенклатура = Выборка.Номенклатура;
				НовСтр.КолОст = Выборка.КолОст;
				прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//ТЗдляПечати.ВыбратьСтроку();
	
	ЗапросМХ = Новый Запрос;
	ЗапросМХ.Текст = "ВЫБРАТЬ
	                 |	ТЗ.Номенклатура,
	                 |	ТЗ.КолОст КАК КолЗаказано
	                 |ПОМЕСТИТЬ ТЗзаказ
	                 |ИЗ
	                 |	&парТЗзаказ КАК ТЗ
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ТЗзаказ.Номенклатура КАК Номенклатура,
	                 |	ТоварыНаСкладахОстатки.Склад КАК Склад,
	                 |	ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.АдресХранения, """") КАК АдресХранения,
	                 |	МАКСИМУМ(ТЗзаказ.КолЗаказано) КАК КолЗаказано,
	                 |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстатокСклад,
	                 |	СУММА(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)) КАК КоличествоОстатокПоАдресу,
	                 |	СУММА(ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоРезерв,
	                 |	СУММА(ЕСТЬNULL(РезервНаСкладахОстаткиПоАдресам.КоличествоОстаток, 0)) КАК КоличествоРезервПоАдресу,
	                 |	СУММА(ЕСТЬNULL(ТоварыАдресноеХранениеОстаткиВсего.КоличествоОстаток, 0)) КАК КоличествоОстатокПоАдресуВсего
	                 |ИЗ
	                 |	ТЗзаказ КАК ТЗзаказ
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	                 |				,
	                 |				Номенклатура В (&СписокНом)
	                 |					И Склад В ИЕРАРХИИ (&СписокСкладов)) КАК ТоварыНаСкладахОстатки
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	                 |					,
	                 |					Номенклатура В (&СписокНом)
	                 |						И Склад В ИЕРАРХИИ (&СписокСкладов)) КАК ТоварыАдресноеХранениеОстатки
	                 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	                 |						,
	                 |						Номенклатура В (&СписокНом)
	                 |							И Склад В ИЕРАРХИИ (&СписокСкладов)) КАК РезервНаСкладахОстаткиПоАдресам
	                 |				ПО ТоварыАдресноеХранениеОстатки.Номенклатура = РезервНаСкладахОстаткиПоАдресам.Номенклатура
	                 |					И ТоварыАдресноеХранениеОстатки.Склад = РезервНаСкладахОстаткиПоАдресам.Склад
	                 |					И ТоварыАдресноеХранениеОстатки.АдресХранения = РезервНаСкладахОстаткиПоАдресам.АдресХранения
	                 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	                 |						,
	                 |						Номенклатура В (&СписокНом)
	                 |							И Склад В ИЕРАРХИИ (&СписокСкладов)) КАК ТоварыАдресноеХранениеОстаткиВсего
	                 |				ПО ТоварыАдресноеХранениеОстатки.Склад = ТоварыАдресноеХранениеОстаткиВсего.Склад
	                 |					И ТоварыАдресноеХранениеОстатки.АдресХранения = ТоварыАдресноеХранениеОстаткиВсего.АдресХранения
	                 |			ПО ТоварыНаСкладахОстатки.Номенклатура = ТоварыАдресноеХранениеОстатки.Номенклатура
	                 |				И ТоварыНаСкладахОстатки.Склад = ТоварыАдресноеХранениеОстатки.Склад
	                 |				И (ТоварыНаСкладахОстатки.Склад.АдресноеХранение)
	                 |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
	                 |					,
	                 |					Номенклатура В (&СписокНом)
	                 |						И Склад В ИЕРАРХИИ (&СписокСкладов)) КАК РезервНаСкладахОстатки
	                 |			ПО ТоварыНаСкладахОстатки.Номенклатура = РезервНаСкладахОстатки.Номенклатура
	                 |				И ТоварыНаСкладахОстатки.Склад = РезервНаСкладахОстатки.Склад
	                 |				И (НЕ ТоварыНаСкладахОстатки.Склад.АдресноеХранение)
	                 |		ПО ТЗзаказ.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	ТЗзаказ.Номенклатура,
	                 |	ТоварыНаСкладахОстатки.Склад,
	                 |	ТоварыАдресноеХранениеОстатки.АдресХранения
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Номенклатура,
	                 |	Склад,
	                 |	АдресХранения";
	
	
	ЗапросМХ.УстановитьПараметр("СписокСкладов", Склад); 
	ЗапросМХ.УстановитьПараметр("СписокНом", ТЗдляПечати.ВыгрузитьКолонку("Номенклатура"));
	ЗапросМХ.УстановитьПараметр("парТЗзаказ", ТЗдляПечати);
	
	Табзаказ = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ЗаявкаНаОтгрузку");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьЗаголовок.Параметры.ПечЗаголовок = "Заявка на отгрузку (для фотографий) от "+Формат(ТекущаяДата(),"ДФ='dd MMMM yyyy'");
	Табзаказ.Вывести(ОбластьЗаголовок);

	Табзаказ.Вывести(ОбластьШапка);
	Табзаказ.ФиксацияСверху = Табзаказ.ВысотаТаблицы;
	
	//ТЗ1 = ЗапросМХ.Выполнить().Выгрузить();
	//ТЗ1.ВыбратьСтроку();
	//возврат;
	
	Выборка = ЗапросМХ.Выполнить().Выбрать();
	НомПП = 0;
	КодНом = "";
	Пока Выборка.Следующий() Цикл
		НомПП = НомПП+1;
		ОбластьСтрока.Параметры.НомПП = НомПП;
		ОбластьСтрока.Параметры.Номенклатура = Выборка.Номенклатура;
		
		Если КодНом <> СокрЛП(Выборка.Номенклатура.Код) Тогда
			ОбластьСтрока.Параметры.Код = Выборка.Номенклатура.Код;
			КодНом = СокрЛП(ОбластьСтрока.Параметры.Код);
		Иначе
			ОбластьСтрока.Параметры.Код = "";
		КонецЕсли;
		
		Если Выборка.АдресХранения <> "" Тогда
			ОбластьСтрока.Параметры.Склад = СокрЛП(Выборка.Склад.Наименование)+":"+СокрЛП(Выборка.АдресХранения.Наименование);
			ОбластьСтрока.Параметры.ОстатокНаСкладе = СокрЛП(Выборка.КоличествоОстатокСклад)+" / "+СокрЛП(Выборка.КоличествоОстатокПоАдресу);
			Если Выборка.КоличествоРезервПоАдресу > 0 Тогда
				ОбластьСтрока.Параметры.ОстатокНаСкладе = ОбластьСтрока.Параметры.ОстатокНаСкладе+" (-"+СокрЛП(Выборка.КоличествоРезервПоАдресу)+" резерв)";
			КонецЕсли;
			Разница = Выборка.КоличествоОстатокПоАдресуВсего - Выборка.КоличествоОстатокПоАдресу;
			Если Разница > 0 Тогда
				ОбластьСтрока.Параметры.ОстатокНаСкладе = "*"+ОбластьСтрока.Параметры.ОстатокНаСкладе+" (+"+СокрЛП(Разница)+")";
			КонецЕсли;	
		Иначе
			ОбластьСтрока.Параметры.Склад = СокрЛП(Выборка.Склад);
			ОбластьСтрока.Параметры.ОстатокНаСкладе = СокрЛП(Выборка.КоличествоОстатокСклад);
			Если Выборка.КоличествоРезерв > 0 Тогда
				ОбластьСтрока.Параметры.ОстатокНаСкладе = ОбластьСтрока.Параметры.ОстатокНаСкладе+" (-"+СокрЛП(Выборка.КоличествоРезерв)+" резерв)";
			КонецЕсли;	
		КонецЕсли;
		Табзаказ.Вывести(ОбластьСтрока);		
	КонецЦикла;
	
	ТабЗаказ.АвтоМасштаб=Истина;
	Табзаказ.Показать("Заказ на отгрузку");
	
КонецПроцедуры	

Процедура ПечатьАналоговДляКопирования_Олд() Экспорт
	
	Макет = ПолучитьМакет("СписокАналогов");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьГруппаАналогов = Макет.ПолучитьОбласть("ГруппаАналогов");
	ОбластьЦвет = Макет.ПолучитьОбласть("Цвет");
	
	ТЗотбор = ТЗзаказ.Скопировать();
	
	Если ТЗотбор.Количество()=0 Тогда
		сообщить("Нет данных для печати");
		возврат;
	КонецЕсли;
	
	ТабЗаказ = Новый ТабличныйДокумент;
	ТабЗаказ.Вывести(ОбластьШапка);
	ТабЗаказ.ФиксацияСверху = ТабЗаказ.ВысотаТаблицы;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(времТЗ.ГруппаАналогов КАК СТРОКА(150)) КАК ГруппаАналогов,
	               |	времТЗ.Модель КАК Модель,
	               |	ВЫРАЗИТЬ(времТЗ.Цвет КАК СТРОКА(150)) КАК Цвет,
	               |	времТЗ.НадоПечататьАналоги КАК НадоПечататьАналоги
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	&парТЗ КАК времТЗ
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(времТЗ.ГруппаАналогов КАК СТРОКА(150))) <> """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.ГруппаАналогов КАК ГруппаАналогов,
	               |	ТЗ.НадоПечататьАналоги КАК НадоПечататьАналоги,
	               |	ТЗ.Модель,
	               |	ТЗ.Цвет КАК Цвет,
	               |	1 КАК КолПозиций
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |ИТОГИ
	               |	СУММА(НадоПечататьАналоги),
	               |	СУММА(КолПозиций)
	               |ПО
	               |	ГруппаАналогов,
	               |	Цвет";
	
	
	Запрос.УстановитьПараметр("парТЗ", ТЗотбор);
				   
	НомПП = 0;
	ТабЗаказ.НачатьАвтогруппировкуСтрок();
	ВыборкаАналогов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАналогов.Следующий() Цикл
		Если ВыборкаАналогов.НадоПечататьАналоги = ВыборкаАналогов.КолПозиций Тогда
			//у всех позиций из этой группы есть фотография
			продолжить;
		КонецЕсли;
		Если ВыборкаАналогов.НадоПечататьАналоги = 0 Тогда
			//в этой группе нет фотографии ни у одной позиции - нечего печатать
			продолжить;
		КонецЕсли;	
		ВыводилиГруппу = Ложь;	
		ОбластьГруппаАналогов.Параметры.Заполнить(ВыборкаАналогов);
		ВыборкаЦветов = ВыборкаАналогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЦветов.Следующий() Цикл
			Если ВыборкаЦветов.НадоПечататьАналоги = ВыборкаЦветов.КолПозиций Тогда
				//у всех позиций из этого цвета есть фотография
				продолжить;
			КонецЕсли;
			Если ВыборкаЦветов.НадоПечататьАналоги = 0 Тогда
				//в этой группе этого цвета нет фотографии ни у одной позиции - нечего печатать
				продолжить;
			КонецЕсли;
			Если Не ВыводилиГруппу Тогда
				ВыводилиГруппу = Истина;
				Табзаказ.Вывести(ОбластьГруппаАналогов,1);
			КонецЕсли;	
			ОбластьЦвет.Параметры.Заполнить(ВыборкаЦветов);
			Табзаказ.Вывести(ОбластьЦвет,2);
			Выборка = ВыборкаЦветов.Выбрать();
			Пока Выборка.Следующий() Цикл
				НомПП = НомПП+1;
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				Если Выборка.НадоПечататьАналоги <> 0 Тогда
					ОбластьСтрока.Параметры.ПечНаличие = "V";
				Иначе
					ОбластьСтрока.Параметры.ПечНаличие = "-";
				КонецЕсли;
				Табзаказ.Вывести(ОбластьСтрока,2);
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;	
	ТабЗаказ.ЗакончитьАвтогруппировкуСтрок();
	
	ТабЗаказ.Показать("Аналоги для копирования");
		
КонецПроцедуры


Процедура ПечатьАналоговДляКопирования() Экспорт
	
	Если ТипЗнч(ТЗобщая)<>Тип("ТаблицаЗначений") Тогда
		возврат;
	КонецЕсли;	
	ТЗпром = ТЗобщая.Скопировать();
	НайденныеСтроки = ТЗпром.НайтиСтроки(Новый Структура("ГруппаАналогов",""));
	//нам нужны только позиции, имеющие аналог
	Для Каждого Стр1 из НайденныеСтроки Цикл
		ТЗпром.Удалить(Стр1);
	КонецЦикла;
	НайденныеСтроки = ТЗпром.НайтиСтроки(Новый Структура("МодельНаименование",Null));
	//итоговые строки тоже удаляем
	Для Каждого Стр1 из НайденныеСтроки Цикл
		ТЗпром.Удалить(Стр1);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|  времТЗ.ГруппаАналогов,
	|  времТЗ.Цвет,
	|  времТЗ.НаимФайлаДляПоиска,
    |  времТЗ.МодельНаименование";
	Для Каждого Стр из ДеревоФайлов Цикл
		НаимКолонки = Стр.НаимКолонки;
		Запрос.Текст = Запрос.Текст+",
		|времТЗ."+НаимКолонки;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
    |ПОМЕСТИТЬ ТЗ
	|ИЗ &парТЗ КАК времТЗ
	|;
	|////////////////////////////////////////
	|ВЫБРАТЬ
	|  ТЗ.ГруппаАналогов,
	|  ТЗ.Цвет,
	|  1 КАК КолПозиций,
	|  ТЗ.НаимФайлаДляПоиска,
    |  ТЗ.МодельНаименование";
    Для Каждого Стр из ДеревоФайлов Цикл
		НаимКолонки = Стр.НаимКолонки;
		Запрос.Текст = Запрос.Текст+",
		|ТЗ."+НаимКолонки;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|ИЗ ТЗ
	|УПОРЯДОЧИТЬ ПО
	|	ТЗ.ГруппаАналогов,
	|	ТЗ.МодельНаименование
	|ИТОГИ
	|СУММА(КолПозиций)";
	Для Каждого Стр из ДеревоФайлов Цикл
		НаимКолонки = Стр.НаимКолонки;
		Запрос.Текст = Запрос.Текст+",
		|Количество(Различные ТЗ."+НаимКолонки+")";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст+"
	|ПО
	|ГруппаАналогов,
	|Цвет
	|";
	
	Запрос.УстановитьПараметр("парТЗ", ТЗпром);
		
	Макет = ПолучитьМакет("СписокАналогов");
	ОбластьШапкаОсновная = Макет.ПолучитьОбласть("Шапка|Основная");
	ОбластьШапкаНаличиеФайла = Макет.ПолучитьОбласть("Шапка|НаличиеФайла");
	ОбластьНоменклатура = Макет.ПолучитьОбласть("Номенклатура|Основная");
	ОбластьНаличиеФайла = Макет.ПолучитьОбласть("Номенклатура|НаличиеФайла");
	ОбластьАналогиОсновная = Макет.ПолучитьОбласть("Аналоги|Основная");
	ОбластьАналогиНаличиеФайла = Макет.ПолучитьОбласть("Аналоги|НаличиеФайла");
		
	Таб = Новый ТабличныйДокумент;
	Таб.Вывести(ОбластьШапкаОсновная);
    НомСтрШапки = Таб.ВысотаТаблицы-1;
	НомКолонки1 = 5;
	НомКолонки2 = 5;
	ТекПуть = "";
	Для Каждого Стр из ДеревоФайлов Цикл
		ОбластьШапкаНаличиеФайла.Параметры.Путь = Стр.ПутьКраткий;
		ОбластьШапкаНаличиеФайла.Параметры.ИмяФайла = Стр.Наименование;
		Таб.Присоединить(ОбластьШапкаНаличиеФайла);
		Если ТекПуть = "" Тогда
			ТекПуть = Стр.ПутьКраткий;
		ИначеЕсли ТекПуть <> Стр.ПутьКраткий  Тогда
			Таб.Область(НомСтрШапки,НомКолонки1, НомСтрШапки, НомКолонки2).Объединить();
			НомКолонки1 = НомКолонки2+1;
			НомКолонки2 = НомКолонки1;
			ТекПуть = Стр.ПутьКраткий;
		Иначе
			НомКолонки2 = НомКолонки2+1;
		КонецЕсли;
	КонецЦикла;
	//Объединяем последние колонки
	Таб.Область(НомСтрШапки,НомКолонки1, НомСтрШапки, НомКолонки2).Объединить();
	Таб.ФиксацияСверху = Таб.ВысотаТаблицы;

	//вывод строк
	ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГрупп.Следующий() Цикл
		ВыборкаЦветов = ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЦветов.Следующий() Цикл
			//сначала проверим, нужно ли выводить этоу группу в этом цвете
			НужноВыводить = Ложь;
			Для Каждого Стр из ДеревоФайлов Цикл
				НаимКолонки = Стр.НаимКолонки;
				Если ВыборкаЦветов[НаимКолонки]<>1 Тогда
					//если количество различных не равно 1, значит что-то не совпадает
					НужноВыводить = Истина;
					прервать;
				КонецЕсли;
			КонецЦикла;  //по колонкам	
			Если Не НужноВыводить Тогда
				//переходим к следующему цвету, этот не нужно выводить, т.к. все совпадает
				продолжить;
			КонецЕсли;	
			ОбластьАналогиОсновная.Параметры.ГруппаАналоговИцвет = СокрЛП(ВыборкаЦветов.ГруппаАналогов)+"   Цвет: "+ВыборкаЦветов.Цвет;
			Таб.Вывести(ОбластьАналогиОсновная);
			Для Каждого Стр из ДеревоФайлов Цикл
				Таб.Присоединить(ОбластьАналогиНаличиеФайла);
            КонецЦикла;
			Выборка = ВыборкаЦветов.Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбластьНоменклатура.Параметры.Заполнить(Выборка);
				Таб.Вывести(ОбластьНоменклатура);
				Для Каждого Стр из ДеревоФайлов Цикл
					НаимКолонки = Стр.НаимКолонки;
					Если Выборка[НаимКолонки] Тогда
						ОбластьНаличиеФайла.Параметры.ПечНаличие = "V";
					Иначе
						ОбластьНаличиеФайла.Параметры.ПечНаличие = "-";
					КонецЕсли;
					Таб.Присоединить(ОбластьНаличиеФайла);
				КонецЦикла;	//по колонкам
			КонецЦикла;	//по моделям этого цвета
		КонецЦикла; //по цвету
	КонецЦикла; //по группам аналогов
	
	Таб.Показать("Аналоги для копирования");
	
КонецПроцедуры


