
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОбработкиВнешняяОбработка1Отчет_51bc308b-e2f6-4adb-b2c7-322f55f86d31", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры





Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешняяОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаКон", ДатаКон);
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаНач", ДатаНач);

	Ном = ПостроительОтчетаОтчет.ДоступныеПоля.Найти("Номенклатура");
	Скл = ПостроительОтчетаОтчет.ДоступныеПоля.Найти("Склад");
	
	Если (Ном = Неопределено) Тогда 
		ПостроительОтчетаОтчет.ДоступныеПоля.Удалить(Ном);
	КонецЕсли;	
	
	Если (Скл = Неопределено) Тогда 
		ПостроительОтчетаОтчет.ДоступныеПоля.Удалить(Скл);
	КонецЕсли;	
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент КАК Контрагент,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
	|{ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент КАК Контрагент,
	|	ПартииТоваровНаСкладах.Номенклатура.*,
	|	ПартииТоваровНаСкладах.Склад.*}
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|	И ПартииТоваровНаСкладах.Регистратор.Дата >= &ДатаНач
	|	И ПартииТоваровНаСкладах.Регистратор.Дата <= &ДатаКон
	|{ГДЕ
	|	ПартииТоваровНаСкладах.Склад.*,
	|	ПартииТоваровНаСкладах.Номенклатура.*,
	|	ПартииТоваровНаСкладах.Регистратор.*,
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент.*}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент
	|Упорядочить По 
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент.Наименование
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Стоимость)
	|ПО
	|	ОБЩИЕ,
	|	Контрагент
	|{ИТОГИ ПО
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент.* КАК Контрагент,
	|	ПартииТоваровНаСкладах.Склад.* КАК СКЛАД,
	|	ПартииТоваровНаСкладах.Номенклатура.* КАК Номенклатура}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	//Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиВнешняяОбработка1Отчет_51bc308b-e2f6-4adb-b2c7-322f55f86d31");
	//Если Настройка <> Неопределено Тогда
	//	ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	//КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры








