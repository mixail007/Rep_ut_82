Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;

	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	//ЗаполнитьНачальныеНастройкиПоМакету(ПолучитьМакет("ПараметрыОтчетовПродажиКомпании"), СтруктураПредставлениеПолей, МассивОтбора, ОбщийОтчет, "СписокКроссТаблица");
	Текст = "ВЫБРАТЬ
	        |	СУММА(ЕСТЬNULL(ТаблицаРегистраПлан.КоличествоОборот, 0)) КАК КоличествоПлан,
	        |	СУММА(ЕСТЬNULL(ТаблицаРегистра.КоличествоОборот, 0)) КАК Количество,
	        |	СУММА(ЕСТЬNULL(ТаблицаРегистра.КоличествоОборот, 0)) - СУММА(ЕСТЬNULL(ТаблицаРегистраПлан.КоличествоОборот, 0)) КАК АбсолютноеОтклонение,
	        |	ВЫБОР
	        |		КОГДА СУММА(ЕСТЬNULL(ТаблицаРегистраПлан.КоличествоОборот, 0)) > 0
	        |			ТОГДА ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ТаблицаРегистра.КоличествоОборот, 0)) / СУММА(ЕСТЬNULL(ТаблицаРегистраПлан.КоличествоОборот, 0)) КАК ЧИСЛО(15, 2))
	        |		ИНАЧЕ 1
	        |	КОНЕЦ КАК ОтносительноеОтклонение
	        |{ВЫБРАТЬ
//	        |	ЕстьNull(ТаблицаРегистраПлан.Номенклатура.НоменклатурнаяГруппа, ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа) КАК НоменклатурнаяГруппа,
//+++ так нельзя на SQL |	ВЫБОР	КОГДА ТаблицаРегистраПлан.Номенклатура ССЫЛКА справочник.НоменклатурныеГруппы
|	ВЫБОР	КОГДА ТаблицаРегистраПлан.Сценарий.ДетализацияПланирования = Значение(Перечисление.ДетализацияПланирования.НоменклатурныеГруппы)
|					ТОГДА  ТаблицаРегистраПлан.Номенклатура
		   |					 ИНАЧЕ ЕстьNull(ТаблицаРегистраПлан.Номенклатура.НоменклатурнаяГруппа, ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа)
    		|					Конец КАК НоменклатурнаяГруппа,
//---------------------------------------------------------------------------------------------------------------------			
	        |	ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура, ТаблицаРегистра.Номенклатура) КАК Номенклатура,
//|	ВЫБОР	КОГДА ТаблицаРегистраПлан.Сценарий.ДетализацияПланирования = Значение(Перечисление.ДетализацияПланирования.НоменклатурныеГруппы)
//			|					ТОГДА выбор когда ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа = ТаблицаРегистраПлан.Номенклатура 
//			|						  	    тогда ТаблицаРегистра.Номенклатура иначе ""нет товара"" конец
//			|				    ИНАЧЕ ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура, ТаблицаРегистра.Номенклатура)
//			|					Конец КАК Номенклатура,
//---------------------------------------------------------------------------------------------------------------------			
			
	        |	(ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура.Типоразмер, ТаблицаРегистра.Номенклатура.Типоразмер)) КАК ТипоРазмер,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, МЕСЯЦ), НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ))) КАК ПериодМесяц,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, КВАРТАЛ), НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ))) КАК ПериодКвартал,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, ГОД), НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД))) КАК ПериодГод}
	        |ИЗ
	        |	РегистрНакопления.ПланыЗакупок.Обороты(&ДатаНач, &ДатаКон, День, {(Номенклатура).*}) КАК ТаблицаРегистраПлан
	        |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&ДатаНач, &ДатаКон, День, {(Номенклатура).*, (ЗаказПоставщику).*}) КАК ТаблицаРегистра
	        |		ПО 
			|		(НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ))
			|			И (НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ))
			|			И (НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, КВАРТАЛ) = НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ))
			|			И (НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, ГОД) = НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД))  
			//----------------------------------------
	        |			И (  ВЫБОР	КОГДА ТаблицаРегистраПлан.Сценарий.ДетализацияПланирования = Значение(Перечисление.ДетализацияПланирования.НоменклатурныеГруппы)
			|			ТОГДА ТаблицаРегистраПлан.Номенклатура = ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа
			|				ИНАЧЕ ТаблицаРегистраПлан.Номенклатура = ТаблицаРегистра.Номенклатура
			|			 КОНЕЦ)
					//----------------------------------------
	        |{УПОРЯДОЧИТЬ ПО
	        |	ТаблицаРегистра.Номенклатура.* КАК Номенклатура}
	        |ИТОГИ
	        |	СУММА(КоличествоПлан),
	        |	СУММА(Количество),
	        |	СУММА(АбсолютноеОтклонение),
	        |	ВЫРАЗИТЬ(ВЫБОР
	        |			КОГДА СУММА(КоличествоПлан) > 0
	        |				ТОГДА 100 * СУММА(Количество) / СУММА(КоличествоПлан)
	        |			ИНАЧЕ 100
	        |		КОНЕЦ КАК ЧИСЛО(15, 0)) КАК ОтносительноеОтклонение
	        |ПО
	        |	ОБЩИЕ
	        |{ИТОГИ ПО
	       // |	(ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура.НоменклатурнаяГруппа, ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа)) КАК НоменклатурнаяГруппа,
		   |(ВЫБОР	КОГДА ТаблицаРегистраПлан.Сценарий.ДетализацияПланирования = Значение(Перечисление.ДетализацияПланирования.НоменклатурныеГруппы)
 	   |					ТОГДА  ТаблицаРегистраПлан.Номенклатура
		   |					 ИНАЧЕ ЕстьNull(ТаблицаРегистраПлан.Номенклатура.НоменклатурнаяГруппа, ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа)
    		|					Конец) КАК НоменклатурнаяГруппа,
			//-------------------------------------------------------------
	        |	(ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура, ТаблицаРегистра.Номенклатура)) КАК Номенклатура,
		  //|	(	ВЫБОР	КОГДА ТаблицаРегистраПлан.Сценарий.ДетализацияПланирования = Значение(Перечисление.ДетализацияПланирования.НоменклатурныеГруппы)
		  //  |					ТОГДА выбор когда ТаблицаРегистра.Номенклатура.НоменклатурнаяГруппа = ТаблицаРегистраПлан.Номенклатура 
		  //  |						  	    тогда ТаблицаРегистра.Номенклатура иначе ""нет товара"" конец
		  //  |				    ИНАЧЕ ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура, ТаблицаРегистра.Номенклатура)
		  //  |					Конец) КАК Номенклатура,
  		//-------------------------------------------------------------
	
	        |	(ЕСТЬNULL(ТаблицаРегистраПлан.Номенклатура.Типоразмер, ТаблицаРегистра.Номенклатура.Типоразмер)) КАК Типоразмер,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, МЕСЯЦ), НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ))) КАК ПериодМесяц,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ), НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, КВАРТАЛ))) КАК ПериодКвартал,
	        |	(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД), НАЧАЛОПЕРИОДА(ТаблицаРегистраПлан.Период, ГОД))) КАК ПериодГод}
	        |АВТОУПОРЯДОЧИВАНИЕ";
	              	
	
	СтруктураПредставлениеПолей = Новый Структура("
	|КоличествоПлан,
	|Количество,
	|АбсолютноеОтклонение,
	|ОтносительноеОтклонение,
	|НоменклатурнаяГруппа,
	|ПериодМесяц,
	|ПериодКвартал,
	|ПериодГод", 
	"Количество план",
	"Количество",	
	"АбсолютноеОтклонение",
	"Относительное отклонение %",
	"Номенклатурная группа",
	"По месяцам",
	"По кварталам",
	"По годам");
		 	
	//Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
	//
	//	ТекстПоляСвойств= "";
	//	ТекстПоляКатегорий = "";

	//	ТаблицаПолей = Новый ТаблицаЗначений;
	//	ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
	//	ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
	//	ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
	//	ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
	//	ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
	//	
	//	СтрокаТаблицы = ТаблицаПолей.Добавить();
	//	СтрокаТаблицы.ПутьКДанным = "Номенклатура";
	//	СтрокаТаблицы.Представление = "Номенклатура";
	//	СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	//	
	//	ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
	//			ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
	//			,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
	//			
	//	ДобавитьВТекстСвойстваОбщие(Текст, ТекстПоляСвойств, "//ОБЩИЕ_СВОЙСТВА");
	//  // для избежания двойственности поля Номенклатура в запросе
	//			
	//	УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	//КонецЕсли;
	
	ПостроительОтчета.Текст = Текст;
	МассивОтбора = Новый Массив;
	//МассивОтбора.Добавить("Поставщик");
	МассивОтбора.Добавить("Номенклатура");
	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоПлан", "Количество по плану", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество закуплено", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("АбсолютноеОтклонение", "Абсолютное отклонение", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("ОтносительноеОтклонение", "Относительное отклонение (%)", Истина, "ЧЦ=15; ЧДЦ=0");

	ОбщийОтчет.мНазваниеОтчета = "Планфактный анализ закупок";
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		
		Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("РентабельностьПродаж", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ПроцентНаценки", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "Закупки";