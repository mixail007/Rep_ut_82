
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();
    ТипЦен = 1;
	ПоОстаткам = истина;
	ВидТовара  = перечисления.ВидыТоваров.Диски;
	
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить("=", "Равен");
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить(">", "Больше");
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить("<", "Меньше");
	
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить(">=", "Больше или равен");
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить("<=", "Меньше или равен");
	ЭлементыФормы.ВидПравила.СписокВыбора.Добавить("<>", "Не равен");
	
	ЭлементыФормы.НомерПравила.СписокВыбора.Добавить(0,    "0 - обычные/искл.правила");
	ЭлементыФормы.НомерПравила.СписокВыбора.Добавить(1000, "1000 - общие правила");
	ЭлементыФормы.НомерПравила.СписокВыбора.Добавить(2000, "2000 - кр.опт (заглушка)");
	ЭлементыФормы.НомерПравила.СписокВыбора.Добавить(-5000,"-5000 - фикс.цена");
	ЭлементыФормы.НомерПравила.СписокВыбора.Добавить(-7000,"-7000 - цены распродажи");
КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыПрайсЛист_ПоПравиламОтчет_b94a1904-9df5-4d1f-9710-2058e82468e5", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
t=ТекущаяДата();
	ОтчетВывести();
сообщить("Время выполнения: "+строка(ТекущаяДата()-t)+"сек.");

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	//ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	
	

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
				
	
	//===================================================================
	Если ПоОстаткам тогда
		
		запросПоОстаткам = новый запрос;
		
		Если ВидТовара=Перечисления.ВидыТоваров.ПустаяСсылка() тогда
			состояние("Выполняется запрос по остаткам товаров по настройке...");	
			запросПоОстаткам = ПостроительОтчетаОтчет.ПолучитьЗапрос(); //вместе с параметрами
		иначе
		   запросПоОстаткам.Текст ="ВЫБРАТЬ
			|	Запрос1.Номенклатура КАК Номенклатура,
			|	СУММА(Запрос1.КоличествоОстаток) КАК КоличествоОстаток
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
			|		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(
			|				,
			|				Номенклатура.ВидТовара = &ВидТовара
			|					И НЕ Склад.Транзитный
			|					И НЕ Склад.ЗапретитьИспользование) КАК ТоварыНаСкладахОстатки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТоварыОТХ.Номенклатура,
			|		ЕСТЬNULL(ТоварыОТХ.КоличествоОстаток, 0)
			|	ИЗ
			|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
			|				,
			|				Номенклатура.ВидТовара = &ВидТовара
			|				И Контрагент В (&СписокКонтрОТХ)
			|					И НЕ Склад.Транзитный
			|					И НЕ Склад.ЗапретитьИспользование) КАК ТоварыОТХ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОстаткиСторКонтр.Номенклатура,
			|		ОстаткиСторКонтр.Остаток
			|	ИЗ
			|		РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстаткиСторКонтр
			|	ГДЕ
			|		ОстаткиСторКонтр.Контрагент В(&СписокКонтр)
			|		И ОстаткиСторКонтр.Номенклатура.ВидТовара = &ВидТовара
			//|		И ОстаткиСторКонтр.Подразделение = &Подразделение
			|) КАК Запрос1
			|
			|СГРУППИРОВАТЬ ПО
			|	Запрос1.Номенклатура";
        запросПоОстаткам.Параметры.Вставить("ВидТовара",ВидТовара);
		СписокКонтрОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);
		СписокКонтр    = яштПоставщики.ПолучитьСписокПоставщиков(ложь);
        запросПоОстаткам.Параметры.Вставить("СписокКонтрОТХ",СписокКонтрОТХ);
		
        запросПоОстаткам.Параметры.Вставить("Подразделение",справочники.Подразделения.ПустаяСсылка() );  //ЯШТ
		запросПоОстаткам.Параметры.Вставить("СписокКонтр",СписокКонтр);    //HIFLY SUPER2000 195/65R16C (104/102R)
		КонецЕсли;
	табЗнач = запросПоОстаткам.Выполнить().Выгрузить();
	списНом = новый СписокЗначений;
	списНом.ЗагрузитьЗначения( табЗнач.ВыгрузитьКолонку("Номенклатура") );
	
	Иначе// по всей номенклатуре
		
		списНом = неопределено;
	    запросПоОстаткам = новый Запрос;
		запросПоОстаткам.текст = "выбрать * из (выбрать спр.Ссылка как Номенклатура 
									|из Справочник.Номенклатура как спр) как товары
									|ГДЕ товары.Номенклатура.ВидТовара = &ВидТовара";
       если ВидТовара <> Перечисления.ВидыТоваров.ПустаяСсылка() тогда
        запросПоОстаткам.Параметры.Вставить("ВидТовара",ВидТовара);
		   
	   иначеЕсли ПостроительОтчетаОтчет.Отбор.Количество()>0 тогда
		Отбор1 = ПостроительОтчетаОтчет.Отбор; //вместе с параметрами
		ОтборТекст = "товары.Номенклатура.ПометкаУдаления = ЛОЖЬ";
		для i=0 по ПостроительОтчетаОтчет.Отбор.Количество()-1 цикл    //10.04.2017
			стр1 = ПостроительОтчетаОтчет.Отбор[i];
			
			видСр = ?(стр1.ВидСравнения=ВидСравнения.Равно,    "=",
					?(стр1.ВидСравнения=ВидСравнения.НеРавно,  "<>",
					
					?(стр1.ВидСравнения=ВидСравнения.Больше,  ">",
					?(стр1.ВидСравнения=ВидСравнения.БольшеИлиРавно,  ">=",
					?(стр1.ВидСравнения=ВидСравнения.Меньше,  "<",
					?(стр1.ВидСравнения=ВидСравнения.МеньшеИлиРавно,  "<=",
					
					?(стр1.ВидСравнения=видСравнения.ВСписке,  " В ",
					?(стр1.ВидСравнения=видСравнения.ВСпискеПоИерархии,  " В Иерархии ",
					?(стр1.ВидСравнения=видСравнения.ВИерархии," В Иерархии ",
					    "")) )))) ))); // 9 вариантов
			Если видСр<>"" тогда
			ОтборТекст = ОтборТекст	+"
			|	И товары."+ стр1.ПутьКДанным+ видСр +"(&Парам"+строка(i)+")";
			иначе
			Предупреждение("Неправильный вид сравнения "+строка(стр1.ВидСравнения)+"!",10);
			возврат;
			КонецЕсли;
		
			запросПоОстаткам.Параметры.Вставить("Парам"+строка(i),стр1.Значение);
		
		КонецЦикла;
	    запросПоОстаткам.текст = СТРЗАМЕНИТЬ(запросПоОстаткам.текст, "товары.Номенклатура.ВидТовара = &ВидТовара", ОтборТекст);
	   КонецЕсли;	
		табЗнач = запросПоОстаткам.Выполнить().Выгрузить();
		списНом = новый СписокЗначений;
		списНом.ЗагрузитьЗначения( табЗнач.ВыгрузитьКолонку("Номенклатура") );

 	КонецЕсли; 
 
	//===================================================================
	//ПолучитьЦеныДляКонтрагента_РегСв(Контрагент,СписокНоменклатуры=неопределено, получитьПравилаИПараметры=ЛОЖЬ, ТекущаяПолитикаПравила=неопределено) 
	
	состояние(" ");	
	
	Если НЕ Контрагент=справочники.Контрагенты.ПустаяСсылка() тогда
		ТипЦен = 1; // скидки персональные + скидки общие
		ТекущаяПолитикаПравила = неопределено;
	Иначе
	//--------------общие правила с макс скидкой---------------
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПравилаЦенообразованияОбщие.Приоритет,
	|	ПравилаЦенообразованияОбщие.ВидТовара,
	|	ПравилаЦенообразованияОбщие.Производитель,
	|	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
	|	ПравилаЦенообразованияОбщие.ВходитВПапку,
	|	ПравилаЦенообразованияОбщие.Диаметр,
	|	ПравилаЦенообразованияОбщие.Номенклатура,
	|	ПравилаЦенообразованияОбщие.ТипЦен,
	|	ПравилаЦенообразованияОбщие.ПодСтрока, 
	
	//+++ 05.07.2016	
	|	 ПравилаЦенообразованияОбщие.ВидДефектаДляУценки,
	
	|0 //типЦен
	//|	ПравилаЦенообразованияОбщие.СкидкаНаценка КАК СкидкаНаценка
	//|	ПравилаЦенообразованияОбщие.СкидкаНаценкаКрОпт КАК СкидкаНаценка
	//|	ПравилаЦенообразованияОбщие.МаксСкидкаНаценка 
	|ИЗ
	|	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
	|ГДЕ ПравилаЦенообразованияОбщие.Категория <> Значение(перечисление.категорииСкидок.пустаяСсылка)";
	
	Если ТипЦен=1 тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст , "0 //типЦен", "ПравилаЦенообразованияОбщие.СкидкаНаценка,
	 														|ПравилаЦенообразованияОбщие.СкидкаПредоплаты");
	ИначеЕсли ТипЦен=2 тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст , "0 //типЦен", "ПравилаЦенообразованияОбщие.Вход как СкидкаНаценка,
	 														 |ПравилаЦенообразованияОбщие.Бонус как СкидкаПредоплаты");

    ИначеЕсли ТипЦен=3 тогда
	 Запрос.Текст = стрЗаменить(Запрос.Текст , "0 //типЦен", "ПравилаЦенообразованияОбщие.МаксСкидкаНаценка как СкидкаНаценка,
	 														 |ПравилаЦенообразованияОбщие.МаксСкидкаПредоплаты как СкидкаПредоплаты");
    КонецЕсли;
 	Результат = Запрос.Выполнить();
	ТекущаяПолитикаПравила = Результат.Выгрузить();
КонецЕсли;

ДатаСреза=неопределено; //+++ 23.10.2014
	Если Контрагент.ДатаСрезаЦен>'00010101' тогда
		ДатаСреза = Контрагент.ДатаСрезаЦен;
	КонецЕсли;
	
	
	Если списНом=неопределено тогда
	   запросПоОстаткам = новый запрос;
	   запросПоОстаткам.Текст ="ВЫБРАТЬ
	                           |	Номенклатура.Ссылка как Номенклатура
	                           |ИЗ
	                           |	Справочник.Номенклатура КАК Номенклатура
	                           |ГДЕ
	                           |	Номенклатура.ПометкаУдаления=ЛОЖЬ
	                           |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
							   |"+?(ЗначениеЗаполнено(ВидТовара)," И Номенклатура.ВидТовара = &ВидТовара ","");
 		запросПоОстаткам.Параметры.Вставить("ВидТовара",ВидТовара);
		табл1 = запросПоОстаткам.Выполнить().Выгрузить();
		состояние("Получение ВСЕХ товаров "+?(ЗначениеЗаполнено(ВидТовара),"по виду товаров "+строка(ВидТовара),"") );
		списНом = новый СписокЗначений;
		списНом.ЗагрузитьЗначения( табл1.ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;	
		
	Если Вопрос("Показать цены по "+ строка( списНом.Количество() )+" товарам?",РежимДиалогаВопрос.ДаНет,0 )<>КодВозвратаДиалога.Да тогда
		возврат;
	КонецЕсли;	
	
//===================================================================================================================================================	
	состояние("Получение таблицы цен по выбранным условиям"+?(ДатаСреза=неопределено, "", "по срезу цен на "+формат(ДатаСреза,"ДЛФ=DD"))+"...");
	Если ПолучитьДокПолитикиЦенообразования()= неопределено тогда
		//+++ 28.05.2015
		флЭкспорт =  Контрагент.Экспорт И Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643";
		Если флЭкспорт тогда
 		ТабЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСвЭкспорт(Контрагент, списНом,,ТекущаяПолитикаПравила, ДатаСреза);
		иначе
 		ТабЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, списНом,,ТекущаяПолитикаПравила, ДатаСреза);//+++ 23.10.2014 ДатаСреза !
		КонецЕсли;
	Иначе
		//-----------------------------расчет по политике ценообразования----------------------------------------
		ТабЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента(Контрагент, списНом, ДатаСреза); 
	КонецЕсли;	
	
//--------------быстрый вывод через построитель--------------------------
ПоВидамТоваров = (ВидТовара=перечисления.ВидыТоваров.ПустаяСсылка());
  Запрос2 = новый Запрос;
  Запрос2.Текст = "ВЫБРАТЬ	табЗнач.Номенклатура, 
  				  |табЗнач.МинимальнаяЦена,
				  |табЗнач.ЦенаСоСкидкойПредоплаты,
  				  |табЗнач.ЦенаПоТипуЦен, 
				  |табЗнач.Приоритет
				  |
				  |ПОМЕСТИТЬ ВТ_табЗнач
				  |ИЗ &табЗнач КАК табЗнач
				  //+++ 03.02.2015
  				  |"+?(ПоПравилам, "ГДЕ  табЗнач.Приоритет "+ВидПравила+" "+формат(НомерПравила, "ЧН=0; ЧГ=0"),"")+"
   				  |;
				  |////////////////////////////////////////////////////////////////////////////////
				  |ВЫБРАТЬ
				  |//ПоВидамТоваров	НоменклатураСпр.ВидТовара,
				  |	НоменклатураСпр.Код,
				  |	НоменклатураСпр.Ссылка КАК Номенклатура,
				  |	ЕстьNull(ВТ_табЗнач1.МинимальнаяЦена,0) КАК Цена,
				  //+++ 11.09.2015
				  |	ЕстьNull(ВТ_табЗнач1.ЦенаСоСкидкойПредоплаты,0) КАК ЦенаПредоплаты,
				  |	ЕстьNull(ВТ_табЗнач1.ЦенаПоТипуЦен,0) КАК ЦенаПоТипу,	
				  |	выбор когда ЕстьNull(ВТ_табЗнач1.ЦенаПоТипуЦен,0)=0 тогда 0
				  |   иначе выразить( (ВТ_табЗнач1.МинимальнаяЦена/ВТ_табЗнач1.ЦенаПоТипуЦен - 1)* 100 как число(15,0) )
				  |	Конец  КАК Наценка,
				  //+++ 11.09.2015
				   |	выбор когда ЕстьNull(ВТ_табЗнач1.ЦенаПоТипуЦен,0)=0 тогда 0
				  |   иначе выразить( (ВТ_табЗнач1.ЦенаСоСкидкойПредоплаты/ВТ_табЗнач1.ЦенаПоТипуЦен - 1)* 100 как число(15,2) )
				  |	Конец  КАК НаценкаПредоплаты,

				  |	ВТ_табЗнач1.Приоритет КАК Приоритет
				  |ИЗ
				  |	ВТ_табЗнач КАК ВТ_табЗнач1
				  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
				  |		ПО ВТ_табЗнач1.Номенклатура = НоменклатураСпр.Ссылка
				  |//Флажок1 ГДЕ ЕстьNull(ВТ_табЗнач1.МинимальнаяЦена,0)>0
				  |УПОРЯДОЧИТЬ ПО
				  |//ПоВидамТоваров ВидТовара,
				  |	Номенклатура
				  |АВТОУПОРЯДОЧИВАНИЕ";
				  
Если Флажок1 тогда //29.11.2017
	Запрос2.Текст = стрЗаменить(Запрос2.Текст , "//Флажок1","");
КонецЕсли;

   запрос2.Параметры.Вставить("табЗнач",табЗнач);
   //Если ПоВидамТоваров тогда
   //	Запрос2.Текст = стрЗаменить(Запрос2.Текст, "//ПоВидамТоваров",""); 
   //КонецЕсли;	   
   табЗнач2 = запрос2.Выполнить().Выгрузить();
   
//------------еще быстрее---------------------
//ТабЗнач.Сортировать("Номенклатура");
//табЗнач2 = табЗнач;

     ПострПечать = Новый ПостроительОтчета;
     ПострПечать.ИсточникДанных = Новый ОписаниеИсточникаДанных(табЗнач2);
   
   	ПострПечать.Выполнить();
	допНазв = "";  допНазв2 = "Предоплаты";
	если ТипЦен>1 тогда
		допНазв = ?(ТипЦен=2, "Вход", "Макс.");
		допНазв2 = ?(ТипЦен=2, "Бонус", "Макс.Предоплаты");
	КонецЕсли;
	
	Для каждого Колонка Из ПострПечать.ВыбранныеПоля Цикл
		Если Колонка.Имя="Цена" тогда Колонка.Представление ="Цена "+допНазв+", руб."
		ИначеЕсли Колонка.Имя="ЦенаПредоплаты" тогда Колонка.Представление ="Цена "+допНазв2+", руб."
		Иначе Колонка.Представление = табЗнач2.Колонки[Колонка.Имя].Заголовок;
		КонецЕсли;	
	КонецЦикла; 
	
    ПострПечать.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПострПечать.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПострПечать.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПострПечать.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПострПечать.Вывести(ЭлементыФормы.ПолеТабличногоДокумента); 
	
	//шапка прайс-листа
	ЭлементыФормы.ПолеТабличногоДокумента.Область(1,3,1,3).Текст = "Прайс-лист ЗАО ТК ""Яршинторг"" от "+формат(ТекущаяДата(),"ДЛФ=D");
	ЭлементыФормы.ПолеТабличногоДокумента.Область(1,3,1,3).Шрифт = новый Шрифт("ARIAL", 14, Истина);
	
	ЭлементыФормы.ПолеТабличногоДокумента.Область(2,3,2,3).текст = ?(НЕ Контрагент=справочники.Контрагенты.ПустаяСсылка(),"Цены клиента: "+строка(Контрагент),
	?(ТипЦен=0, "Общие правила - без скидок;", ?(ТипЦен=1, "Общие правила - скидки;", ?(ТипЦен=2, "Общие правила - скидки Кр.Опт;", 
		"Общие правила - скидки Макс.Скидки;"))))
	+ ?(НЕ ПоОстаткам, " Вся номенклатура ", " По остаткам на складах ") + строка(ВидТовара) + "
	|"+строка(ПостроительОтчетаОтчет.Отбор)+?(ДатаСреза=неопределено, "", " по срезу цен на "+формат(ДатаСреза,"ДЛФ=DD"));
  	ЭлементыФормы.ПолеТабличногоДокумента.Область(2,3,2,3).Шрифт = новый Шрифт("ARIAL", 10);

	//ширина колонок в символах
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,2,4+табЗнач2.Количество(),2).ШиринаКолонки = 9; //Код
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,3,4+табЗнач2.Количество(),3).ШиринаКолонки = 50;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,4,4+табЗнач2.Количество(),4).ШиринаКолонки = 9;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,5,4+табЗнач2.Количество(),5).ШиринаКолонки = 11;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,6,4+табЗнач2.Количество(),6).ШиринаКолонки = 11;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,7,4+табЗнач2.Количество(),7).ШиринаКолонки = 11;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,6,4+табЗнач2.Количество(),8).ШиринаКолонки = 11;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,6,4+табЗнач2.Количество(),9).ШиринаКолонки = 11;
	//автовысота строк
	ЭлементыФормы.ПолеТабличногоДокумента.Область(5,2,5+табЗнач2.Количество(),5).АвтоВысотаСтроки = истина;
	
состояние(" ");	
КонецПроцедуры

Процедура ОтчетИнициализация()

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	|{ВЫБРАТЬ
	|	Номенклатура.*}
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки( ,
	|			НЕ Склад.Транзитный
	|				И НЕ Склад.ЗапретитьИспользование) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|{ГДЕ
	|	ТоварыНаСкладахОстатки.Номенклатура.*}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	
	//10.04.2017 оставляем только Номенклатуру! это поле № 1
	ПостроительОтчетаОтчет.ДоступныеПоля.Удалить( ПостроительОтчетаОтчет.ДоступныеПоля[0] );
	для i=1 по ПостроительОтчетаОтчет.ДоступныеПоля.Количество()-1 цикл
	 ПостроительОтчетаОтчет.ДоступныеПоля.Удалить( ПостроительОтчетаОтчет.ДоступныеПоля[1] );
 	КонецЦикла;
 
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыПрайсЛист_ПоПравиламОтчет_b94a1904-9df5-4d1f-9710-2058e82468e5");
	//Если Настройка <> Неопределено Тогда
	//	ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	//КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ВидТовараПриИзменении(Элемент)
	ЭлементыФормы.ДействияФормы.Кнопки.Настройка.доступность = (ВидТовара = перечисления.ВидыТоваров.ПустаяСсылка());
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Контрагент) тогда
		политика = ПолучитьДокПолитикиЦенообразования();
		Если политика <> неопределено тогда
			ЭтаФорма.Заголовок = "Отчет - Прайс-Лист по документу: "+строка(Политика);
		иначе
			ЭтаФорма.Заголовок = "Отчет - Прайс-Лист по Правилам ценообразования";
		КонецЕсли;	
	ТипЦен = 1; 
	ЭлементыФормы.ТипЦен.Доступность = ложь;ЭлементыФормы.Переключатель1.Доступность = ложь;ЭлементыФормы.Переключатель3.Доступность = ложь;
	Иначе
		ЭтаФорма.Заголовок = "Отчет - Прайс-Лист по Правилам ценообразования";
		ЭлементыФормы.ТипЦен.Доступность = истина;ЭлементыФормы.Переключатель1.Доступность = истина;ЭлементыФормы.Переключатель3.Доступность = истина;
	КонецЕсли;	
	
	
КонецПроцедуры

функция ПолучитьДокПолитикиЦенообразования()
	Если Контрагент.Пустая() тогда
		возврат Неопределено;
	КонецЕсли;	
	
	ЗапросПоискПолитики=Новый Запрос;	

ЗапросПоискПолитики.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
                           |	ПолитикаЦенообразования.Ссылка
                           |ИЗ
                           |	Документ.ПолитикаЦенообразования КАК ПолитикаЦенообразования
                           |ГДЕ
                           |	ПолитикаЦенообразования.Контрагент = &Контрагент
                           |	И ПолитикаЦенообразования.Ссылка.Проведен
                           |
                           |УПОРЯДОЧИТЬ ПО
                           |	ПолитикаЦенообразования.Дата УБЫВ";

ЗапросПоискПолитики.УстановитьПараметр("Контрагент",Контрагент);

РезультатПолитика= ЗапросПоискПолитики.Выполнить();

	Если РезультатПолитика.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаПолитика=РезультатПолитика.Выбрать();
		ВыборкаПолитика.Следующий();
		ТекущаяПолитика=ВыборкаПолитика.Ссылка;
		возврат ТекущаяПолитика;
КонецЕсли;	     // для контрагента нет политики ценообразования
	
	
КонецФункции


