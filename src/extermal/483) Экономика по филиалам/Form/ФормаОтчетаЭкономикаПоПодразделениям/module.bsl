         
Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = НачПериода;
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = КонецДня(КонПериода);  
   
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = НачПериода;
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = КонецДня(КонПериода);  
   
   
КонецПроцедуры

Процедура НачПериодаПриИзменении(Элемент)
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = НачПериода;
   
   
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = НачПериода;
   
КонецПроцедуры

Процедура КонПериодаПриИзменении(Элемент)
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = КонецДня(КонПериода);
   
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = КонецДня(КонПериода);
КонецПроцедуры

Процедура ПриОткрытии()
//МассивПодразделений = Новый Массив;
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00120"));//Челябинск
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00112"));//Санкт-Петербург
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00106"));//Подразделение Ростов на Дону
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00133"));// Москва
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00122"));// Екатеринбург
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));// Подразделение YST-Турция
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00137"));//  Подразделение Tire Technology
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));//  Головное подразделение Ярославль
//МассивПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00138"));//  Обособленное подразделение Екатеринбург

//	
//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивПодразделений");
//ПараметрСКД.Использование = Истина;
//ПараметрСКД.Значение  = МассивПодразделений;		




КонецПроцедуры	

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;
	
	СтандартнаяОбработка=Ложь;
	
	ОбработкаРасшифровки=Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДополнительныеДействия=Новый СписокЗначений;
	
	// Проверяем для какого поля выполняется расшифровка
	
	Если ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "СуммаЗатрат" Тогда
		
		ДополнительныеДействия.Добавить("РасшифроватьКонтрагентДокумент","Расшифровать (Контрагент + документ)");
		
	КонецЕсли;
	
	Настройки=ОбработкаРасшифровки.Выполнить(Расшифровка,ВыполненноеДействие,,ДополнительныеДействия);
	
	Если Настройки<>Неопределено Тогда
		
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		ЭлементыФормы.Результат.Очистить();
		
		СкомпоноватьРезультат(ЭлементыФормы.Результат,ДанныеРасшифровки);
		
	Иначе
		
		Если ВыполненноеДействие="РасшифроватьКонтрагентДокумент" Тогда
			
			ВыполнитьРасшифроватьКонтрагентДокумент(Расшифровка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРасшифроватьКонтрагентДокумент(Расшифровка) 
	
	Подразделение = "";
	ПолучитьПодразделение(Расшифровка,Подразделение);
	
	СтатьяЗатрат = ДанныеРасшифровки.Элементы[Расшифровка-1].ПолучитьПоля()[0].Значение;
	
	ОткрытьИСформироватьОтчет(Подразделение,СтатьяЗатрат);

КонецПроцедуры

Процедура ОткрытьИСформироватьОтчет(Подразделение,СтатьяЗатрат) 
	
	СсылкаНаОбъект = Справочники.ВнешниеОбработки.НайтиПоКоду("502");
	
	ЭтоОбработка = ?(СсылкаНаОбъект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка, Истина, Ложь);
	ЭтоОтчет = ?(СсылкаНаОбъект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет, Истина, Ложь);
	
	Если НЕ (ЭтоОбработка ИЛИ ЭтоОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = СсылкаНаОбъект.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Попытка
		Если ЭтоОбработка Тогда
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		Иначе
			Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
		КонецЕсли;
		
		Если Не Форма = Неопределено Тогда
			
			НастроитьФормуОтчета(Форма,Подразделение,СтатьяЗатрат);
			
			Форма.Открыть();
			Форма.СкомпоноватьРезультат(Форма.ЭлементыФормы.Результат);
		Иначе
			Сообщить("Форма открываемой обработки или отчета не определена.", СтатусСообщения.БезСтатуса);
		КонецЕсли;
	Исключение
		Если ЭтоОбработка Тогда
			Предупреждение("Выбранный файл не является внешней обработкой.
			|Либо, данная обработка не предназначена для
			|запуска в этой конфигурации.");
		Иначе
			Предупреждение("Выбранный файл не является внешним отчетом.
			|Либо, данный отчет не предназначена для
			|запуска в этой конфигурации.");
		КонецЕсли;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайла);	
КонецПроцедуры

Процедура НастроитьФормуОтчета(Форма,Подразделение,СтатьяЗатрат)
	
	Форма.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();  
	
	ОтборПодразделение=Форма.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПодразделение.Использование=Истина;
	ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
	ОтборПодразделение.ПравоеЗначение=Подразделение;	
	
	ОтборСтатьяЗатрат=Форма.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборСтатьяЗатрат.Использование=Истина;
	ОтборСтатьяЗатрат.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
	ОтборСтатьяЗатрат.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("СтатьяЗатрат");
	ОтборСтатьяЗатрат.ПравоеЗначение=СтатьяЗатрат;	
	
	ПараметрСКД = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНачала");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = НачПериода;
	
	ПараметрСКД = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаОкончания");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(КонПериода);
	
	ПараметрСКД = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = НачПериода;
	
	ПараметрСКД = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(КонПериода);
	
	Форма.ЭлементыФормы.НачПериода.Значение = НачПериода;
	Форма.ЭлементыФормы.КонПериода.Значение = КонецДня(КонПериода);
	
КонецПроцедуры

Процедура ПолучитьПодразделение(Расшифровка,Подразделение)		
	
	ВерхняяРасшифровка = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей()[0].Идентификатор;
	
	Попытка 
		ИмяРасшифровки = ДанныеРасшифровки.Элементы[ВерхняяРасшифровка].ПолучитьПоля()[0].Поле;
	Исключение
		ИмяРасшифровки = "";
	КонецПопытки;
	
	
	Если ИмяРасшифровки <> "Подразделение" Тогда 
		ПолучитьПодразделение(ВерхняяРасшифровка,Подразделение);
	Иначе 
		Подразделение = ДанныеРасшифровки.Элементы[ВерхняяРасшифровка].ПолучитьПоля()[0].Значение;		
	КонецЕсли;	
	
КонецПроцедуры