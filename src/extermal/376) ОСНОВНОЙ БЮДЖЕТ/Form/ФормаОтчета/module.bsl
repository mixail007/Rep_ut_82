

Процедура ДействияФормыСформировать(Кнопка)
	Если РольДоступна("ПолныеПрава") Тогда 
		Запрос = новый Запрос;
		запрос.УстановитьПараметр("ПериодПланирования",ПериодПланирования);
		Запрос.Текст = "ВЫБРАТЬ
		|	БюджетДоходов.Ссылка
		|ИЗ
		|	Документ.БюджетДоходов КАК БюджетДоходов
		|ГДЕ
		|	БюджетДоходов.ПериодПланирования = &ПериодПланирования
		|	И БюджетДоходов.ЗакрытиеПериода = ИСТИНА";
		рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество()>0 Тогда
			об = Рез[0].Ссылка.ПолучитьОбъект();
			Попытка
				об.записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
			КонецПопытки;
		иначе
			Об = Документы.БюджетДоходов.СоздатьДокумент();
			об.ПериодПланирования = ПериодПланирования;
			об.ЗакрытиеПериода = истина;
			об.дата = ТекущаяДата();
			Попытка
				об.записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	//1. СКЛАД !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	СхемаКомпоновкиДанных = ПолучитьМакет("СкладКомпоновка");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПериодПланирования;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		дата1 = ПериодПланирования.датаначала;
		дата2 = ПериодПланирования.датаконца;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата1;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата2;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	Результат = ЭлементыФормы.ТДСклад;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	////////////////////////////////////////////////////////////////////////////
	//1.2 СКЛАД/ДВИЖЕНИЯ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	СхемаКомпоновкиДанных = ПолучитьМакет("СкладДвиженияКомпоновка");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПериодПланирования;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		дата1 = ПериодПланирования.датаначала+5;
		дата2 = НачалоМесяца(ПериодПланирования.датаконца)+5;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата1;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата2;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	Результат = ЭлементыФормы.СкладДвижения;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	////////////////////////////////////////////////////////////////////////////
	//2. ПОСТУПЛЕНИЯ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	Если ПланФакт Тогда //Другая схема
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПриходПланФакт");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПоступления;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	ИначеЕсли План_Факт_Процент Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПриходПланФактПроцент");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПоступления;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	Иначе
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПриходКомпоновка");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПоступления;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	//3. ПРОДАЖИ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	Если ПланФакт Тогда //Другая схема
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПродажиФакт");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Наценка;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТорговаяНаценка;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПродажи;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	ИначеЕсли План_Факт_Процент Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПродажиФактПроцент");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Наценка;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТорговаяНаценка;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПродажи;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	Иначе	
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ПродажаКомпоновка");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Наценка;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ТорговаяНаценка;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПродажи;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	//3. НАЦЕНКА !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	//СхемаКомпоновкиДанных = ПолучитьМакет("НаценкаКомпоновка");
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//	
	//Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = ПериодПланирования;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	//			
	//Параметр = СхемаКомпоновкиДанных.Параметры.Наценка;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = ПланыСчетов.Хозрасчетный.ТорговаяНаценка;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	//
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	//
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	//
	//Результат = ЭлементыФормы.ПолеНаценка;
	//Результат.Очистить();
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(Результат);
	//
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//
	//Результат.ПоказатьУровеньГруппировокСтрок(0);
	////////////////////////////////////////////////////////////////////////////
	//4. ОПЛАТА ПОСТАВЩИКАМ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	Если ПланФакт Тогда //Другая схема
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПоставщикамФакт");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПоЗаказам;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НоменклатураНеИспользовать;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Справочники.Номенклатура.НайтиПоКоду("9265070");
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДОплатаПоставщикам;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	ИначеЕсли План_Факт_Процент Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПоставщикамФактПроцент");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПоЗаказам;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НоменклатураНеИспользовать;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Справочники.Номенклатура.НайтиПоКоду("9265070");
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДОплатаПоставщикам;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	иначе
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПоставщикамКомпоновка");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПоставщиками;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДОплатаПоставщикам;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	//5. ПРИХОД ДЕНЕГ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	Если ПланФакт Тогда //Другая схема
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПокупателейФакт");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПоЗаказам;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НоменклатураНеИспользовать;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Справочники.Номенклатура.НайтиПоКоду("9265070");
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПриходДенег;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	ИначеЕсли План_Факт_Процент Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПокупателейФактПроцент");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПоЗаказам;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НоменклатураНеИспользовать;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Справочники.Номенклатура.НайтиПоКоду("9265070");
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПриходДенег;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	Иначе	
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОплатыПокупателейКомпоновка");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.РасчетыСПокупателями;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДПриходДенег;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	//6. ДДС !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ДДСКомпоновка");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПериодПланирования;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		дата1 = ПериодПланирования.датаначала;
		дата2 = ПериодПланирования.датаконца;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата1;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата2;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ДенежныеСредства;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	//Параметр = СхемаКомпоновкиДанных.Параметры.Подразделение;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = Справочники.Подразделения.НайтиПоКоду("00005");
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	Результат = ЭлементыФормы.ТДДДС;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат.ФиксацияСлева = 1;
	
	////////////////////////////////////////////////////////////////////////////
	//7. БАЛАНС - ПРИБЫЛЬ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	
	СхемаКомпоновкиДанных = ПолучитьМакет("БалансПрибыльКомпоновка");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПериодПланирования;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		дата1 = ПериодПланирования.датаначала;
		дата2 = ПериодПланирования.датаконца;
	КонецЕсли;
	
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПрибыльУбыток;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата1;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата2;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;	
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Услуги;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.СтатьиДвиженияДенежныхСредств.ВыручкаОтАренды;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.СтатьиДвиженияДенежныхСредств.Затраты;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Бонусы;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.СтатьиДвиженияДенежныхСредств.Бонусы;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Наценка;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТорговаяНаценка;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КЗСПоствщиком;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	//Параметр = СхемаКомпоновкиДанных.Параметры.АвансыПолученные;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Кредиты;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	//Параметр = СхемаКомпоновкиДанных.Параметры.Подразделение;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = Справочники.Подразделения.НайтиПоКоду("00005");
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ОС;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ВА;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Материалы;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаРеализации;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСКомиссии;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Подотчетники;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ДС;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ДЗСПокупателем;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	//Параметр = СхемаКомпоновкиДанных.Параметры.АвансыВыданные;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Инвестиции;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.Инвестиции;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//ВнешнийНаборДанных = Новый Структура("ТаблН", ТаблН);	//Добавляем внешнюю таблицу
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	Результат = ЭлементыФормы.ТДБалансПрибыль;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат.ФиксацияСлева = 3;
	
	//	////////////////////////////////////////////////////////////////////////////
	//	//9. ЗАТРАТЫ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	
	Если ПланФакт Тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновкаФакт");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатраты;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
		
	Иначе
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновка");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		//Параметр = СхемаКомпоновкиДанных.Параметры.Подразделение;
		//Если Параметр <> Неопределено Тогда
		//	Параметр.Значение = Справочники.Подразделения.НайтиПоКоду("00005");
		//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		//КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатраты;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	КонецЕсли;
	
	//затраты по подразделению отв
	если планфакт тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновкаФакт");
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ПоМенеджерам").Настройки;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатратыПодразделениеО;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
		
		
	иначе
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновка");
		//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ПоМенеджерам").Настройки;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатратыПодразделениеО;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
	конецЕсли;	
	//затраты по подразделению 
	Если планФакт тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновкаФакт");
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ПоПодразделениям").Настройки;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		
		Если ПоТекущийПериод тогда
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекущаяДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КонецМесяца(ТекущаяДата());
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = истина;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекДата;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ТекущаяДата();
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		Иначе
			
			Параметр = СхемаКомпоновкиДанных.Параметры.ТекМомент;
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Ложь;
				Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.датарасчетаНачальныхостатков;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.КонецПериода;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования.ДатаКонца;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатратыПодразделение;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
		
	иначе	  
		СхемаКомпоновкиДанных = ПолучитьМакет("ЗатартыКомпоновка");
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Найти("ПоПодразделениям").Настройки;
		
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПериодПланирования;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		Параметр = СхемаКомпоновкиДанных.Параметры.Затраты;
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
		
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
		
		Результат = ЭлементыФормы.ТДЗатратыПодразделение;
		Результат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		
	конецЕсли;
	
	
	
	
	
	
	
	//	////////////////////////////////////////////////////////////////////////////
	//	//9. Начальные показатели !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	//	////////////////////////////////////////////////////////////////////////////
	
	СхемаКомпоновкиДанных = ПолучитьМакет("НачальныеПоказателиБаланса");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПериодПланирования;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		дата1 = ПериодПланирования.датаначала+1;
		дата2 = ПериодПланирования.датаконца;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Период1;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = дата1;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КЗСПоствщиком;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.АвансыПолученные;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Кредиты;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	//Параметр = СхемаКомпоновкиДанных.Параметры.Подразделение;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = Справочники.Подразделения.НайтиПоКоду("00005");
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ОС;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ОСвОрганизации;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ВА;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Материалы;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаСкладах;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ТоварыНаРеализации;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ТоварыНаСКомиссии;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Подотчетники;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ДС;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ДЗСПокупателем;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.АвансыВыданные;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.ПрибылиИУбытки;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеОблагаемыеЕНВД;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Инвестиции;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПланыСчетов.Хозрасчетный.Инвестиции;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//ВнешнийНаборДанных = Новый Структура("ТаблН", ТаблН);	//Добавляем внешнюю таблицу
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	Результат = ЭлементыФормы.ТДВходящийБаланс;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
КонецПроцедуры

Процедура План_Факт_ПроцентПриИзменении(Элемент)
	ПланФакт = Ложь;
КонецПроцедуры

Процедура ПланФактПриИзменении(Элемент)
	План_Факт_Процент = Ложь;
КонецПроцедуры

Процедура ДоходыНажатие(Элемент)
	ФормаВыбора = Документы.БюджетДоходов.ПолучитьФорму("ФормаСписка");
	
	ФормаВыбора.Отбор.ПериодПланирования.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.Отбор.ПериодПланирования.Значение = ПериодПланирования;
	ФормаВыбора.Отбор.ПериодПланирования.Использование = Истина;
	
	
	//Чтобы этот отбор был доступен для изменения
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ПериодПланирования.Доступность = Истина;
	
	ФормаВыбора.Открыть();
	
	ФормаВыбора.Отбор.Ответственный.Использование = Ложь;
КонецПроцедуры

Процедура РасходыНажатие(Элемент)
	ФормаВыбора = Документы.БюджетРасходов.ПолучитьФорму("ФормаСписка");
	
	ФормаВыбора.Отбор.ПериодПланирования.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.Отбор.ПериодПланирования.Значение = ПериодПланирования;
	ФормаВыбора.Отбор.ПериодПланирования.Использование = Истина;
	
	
	//Чтобы этот отбор был доступен для изменения
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ПериодПланирования.Доступность = Истина;
	
	ФормаВыбора.Открыть();
	
	ФормаВыбора.Отбор.Ответственный.Использование = Ложь;
	
КонецПроцедуры

Процедура СравнениеЗатратСФактомПредыдущегоГодаНажатие(Элемент)
	ИмяФайла = ПолучитьИмяВременногоФайла();
	файл = новый файл(ИмяФайла);
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(682); 
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	Форма = Обработка.ПолучитьФорму();
	Форма.ПериодПланирования = ПериодПланирования;
	Форма.ПериодПланированияПоГодам = ПериодПланирования;
	
	Форма.Открыть();
КонецПроцедуры

Процедура СравнениеДоходовСФактомПредыдущегоГодаНажатие(Элемент)
	ИмяФайла = ПолучитьИмяВременногоФайла();
	файл = новый файл(ИмяФайла);
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(684); 
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	Форма = Обработка.ПолучитьФорму();
	Форма.ПериодПланирования = ПериодПланирования;
	Форма.Открыть();
КонецПроцедуры

Процедура СравнениеЗатратНаОплатуТрудаНажатие(Элемент)
	ИмяФайла = ПолучитьИмяВременногоФайла();
	файл = новый файл(ИмяФайла);
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(687); 
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	Форма = Обработка.ПолучитьФорму();
	Форма.Открыть();
	
КонецПроцедуры
процедура открытьВнешнююОбработку(номерВнОбр=44, имяФормы="", ЭтоОбработка=Истина)
	
	//ИмяФайла = КаталогВременныхФайлов()+"ВнешнийОтчет.epf";
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	файл = новый файл(ИмяФайла);
	//	Если НЕ Файл.Существует() тогда
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(номерВнОбр); // разбор на ГТД
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	//	сообщить(строка(ТекущаяДата())+"Записан файл обработки: "+ИмяФайла);
	//	КонецЕсли;
	
	
	Если ЭтоОбработка Тогда
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Иначе
		Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	КонецЕсли;
	
	Если имяФормы="" тогда //19.08.2016 по умолчанию для любой обработки или отчета - названия НЕ надо!
		Форма = Обработка.ПолучитьФорму();
	иначе
		Форма = Обработка.ПолучитьФорму(имяФормы);
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура СравнениеПродажПоГодамНажатие(Элемент)
	ИмяФайла = ПолучитьИмяВременногоФайла();
	файл = новый файл(ИмяФайла);
	обр = справочники.ВнешниеОбработки.НайтиПоКоду(689); 
	ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОтчеты.Создать(ИмяФайла);
	Форма = Обработка.ПолучитьФорму();
	Форма.Период = ПериодПланирования;
	Форма.Открыть();
	
КонецПроцедуры
