
Процедура События_ПриИзмененииСтатусаДокумента(DocumentID, BoxID, Document= Неопределено, Документ1С= Неопределено) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти("ЭлектронныеДокументыДиадок") <> Неопределено Тогда
		
		Если Документ1С = Неопределено И ЗначениеЗаполнено(DocumentID) Тогда
			Документ1С= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(DocumentID, BoxID);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ1С) Тогда
			
			Если ЗначениеЗаполнено(DocumentID) Тогда
				Document= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьДокументДиадок(DocumentID, BoxID);
			КонецЕсли;
			
			СтатусВДиадоке= ПолучитьСтатусПоDocument(Document);
			СопоставленСЭлектроннымДокументом= Document <> Неопределено;
			
			Выполнить("ЭлектронныеДокументыДиадок.ПриИзмененииСтатусаДокумента(Документ1С, СопоставленСЭлектроннымДокументом, СтатусВДиадоке)");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСобытияИзмененийСтатусовДокументов(ОрганизацияСсылка, ИдентификаторПоследнейПорции = Неопределено) Экспорт
	Organization = ПолучитьФорму("Модуль_РаботаССерверомДиадок").ПолучитьЯщикДиадокДляОрганизации(ОрганизацияСсылка);
	Если Organization = Неопределено Тогда
		ВызватьИсключение "Организация """ + ОрганизацияСсылка + """ не сопоставлена с организацией в "+НаименованиеСистемы;
	КонецЕсли;
	
	массивEvent = Organization.GetDocumentEventList(ИдентификаторПоследнейПорции);
	
	Если массивEvent.Количество() = 0 Тогда
		Возврат  Неопределено;
	КонецЕсли;
	
	таблицаСобытийВ1С = Новый ТаблицаЗначений;
	таблицаСобытийВ1С.Колонки.Добавить("ДокументСсылка");
	таблицаСобытийВ1С.Колонки.Добавить("DocumentID");
	
	кэшDocument = Новый Соответствие;
	
	Для каждого event Из массивEvent Цикл
		ДокументСсылка = ПолучитьФорму("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(event.DocumentId, Organization.Id);
		Если ЗначениеЗаполнено(ДокументСсылка) И ДокументСсылка.Организация = ОрганизацияСсылка Тогда
			строкаСобытияВ1С = таблицаСобытийВ1С.Добавить();
			строкаСобытияВ1С.ДокументСсылка = ДокументСсылка;
			строкаСобытияВ1С.DocumentId = event.DocumentId;
			Если кэшDocument.Получить(event.DocumentId) = Неопределено Тогда
				кэшDocument.Вставить(event.DocumentId, event.GetDocument());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	таблицаСобытийВ1С.Свернуть("ДокументСсылка, DocumentID");
	массивСобытийВ1С = Новый Массив;
	Для каждого строкаСобытияВ1С Из таблицаСобытийВ1С Цикл
		массивСобытийВ1С.Добавить( Новый Структура("ДокументСсылка, СтатусВДиадоке", строкаСобытияВ1С.ДокументСсылка, ПолучитьСтатусПоDocument(кэшDocument.Получить(строкаСобытияВ1С.DocumentID))) );
	КонецЦикла;
	
	Возврат Новый Структура("ИдентификаторПорции, ТекущиеСтатусыДокументов", 
		массивEvent[массивEvent.Количество() - 1].EventId,
		массивСобытийВ1С);
КонецФункции

Функция ПолучитьИдентификаторПоследнейПорции(ОрганизацияСсылка) Экспорт
	Organization = ПолучитьФорму("Модуль_РаботаССерверомДиадок").ПолучитьЯщикДиадокДляОрганизации(ОрганизацияСсылка);
	Если Organization = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Organization.GetLastEventId();
КонецФункции



Функция ПолучитьСтатусПоDocument(Document)
	Если Document = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Статус = Document.Status;
	Если Найти(Document.Type, "Invoice") > 0 Тогда
		Статус = Статус + ?(Document.AmendmentRequested, "|AmendmentRequested", "") 
		+ ?(Document.Revised, "|Revised", "")
		+ ?(Document.Corrected, "|Corrected", "");
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

Функция СопоставитьДокументыФоном(ДатаНачала, ДатаОкончания) Экспорт 
	
	ТаблицаДанных = Модуль_РаботаССерверомДиадок.ВернутьВыборкуРНКИСчетовФактурДиадок(
			ДатаНачала, 
			ДатаОкончания, 
			Неопределено, 
			"", 
			"Inbound", 
			0,
			0,
			"",  Истина);
			
	ТаблицаДанных.Колонки.Добавить("ПервичныйДокументДляСопоставления");
	ТаблицаДанных.Колонки.Добавить("Сопоставлен");
	
	ПолучитьМодульПрог("МассовоеСопоставление").ЗаполнитьПредлагаемыеСоответствия(ТаблицаДанных);
	
	Для Каждого Стр из ТаблицаДанных Цикл
		Если Стр.ПервичныйДокументДляСопоставления <> Неопределено Тогда
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(стр.ПервичныйДокументДляСопоставления, стр.ЭДОбъект.DocumentId, стр.ЭДОбъект.OrganizationId);
			стр.ПервичныйДокумент = стр.ПервичныйДокументДляСопоставления;
			
			Попытка
				Объект = стр.ПервичныйДокументДляСопоставления.ПолучитьОбъект();
				Если Объект.Метаданные().Реквизиты.Найти("КодСпособаПолучения")<>Неопределено Тогда 
					Если Объект.КодСпособаПолучения <> 2 Тогда
						Объект.КодСпособаПолучения = 2;
						Объект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				КонецЕсли;
			Исключение
				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволы(НомерДокумента)
	НедопустимыеЗнаки = "\/:*?""<>|";
	Пока СтрДлина(НедопустимыеЗнаки)>0 Цикл
		ТекСимвол = Лев(НедопустимыеЗнаки,1);
		Если Найти(НомерДокумента,ТекСимвол)<>0 Тогда
			НомерДокумента = СтрЗаменить(НомерДокумента,ТекСимвол,"_");
		КонецЕсли;
		НедопустимыеЗнаки = Сред(НедопустимыеЗнаки,2);
	КонецЦикла;
Возврат НомерДокумента;	
КонецФункции

Процедура ЗагрузитьФайлыИзДДВ1С(Организация = Неопределено,ИдентификаторПоследнейПорции = Неопределено) Экспорт
	СписокЯщиков = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации(Организация);
	Для каждого стрЯщик из СписокЯщиков цикл 
		Organization = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(стрЯщик.Объект);
		 
		ПоследнийЗагруженныйEvent = СокрЛП(ПолучитьПоследнийЗагруженныйEventID(стрЯщик.Объект));
		
		массивEvent = Organization.GetDocumentEventList(ПоследнийЗагруженныйEvent);
									
		Пока массивEvent.Count <> 0 Цикл
			
			Для ц = 0 по массивEvent.Count-1 цикл 
				Event = массивEvent.GetItem(ц);
				ОбработатьEvent(Event,Organization.Id,стрЯщик.Объект);
			КонецЦикла;
			ПоследнийEvent = массивEvent.GetItem(массивEvent.Count-1);
			ЗаписатьПоследнийЗаруженныйEventID(стрЯщик.Объект,ПоследнийEvent.EventId);
			массивEvent = Organization.GetDocumentEventList(ПоследнийEvent.EventId);
		КонецЦикла;
КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьEvent(Event, ЯщикID,Организация)
		ДокументДД = СоздатьЗапись_О_ДокументеДиадока(Event,ЯщикID,Организация);
		СохранитьФайлВБазу(Event,ДокументДД.Ссылка);
КонецПроцедуры

Процедура СохранитьФайлВБазу(Событие,ДокументВладелецСсылка)
	ЭлементФайл = Справочники.ФайлыДокументовДиадока.СоздатьЭлемент();
	ЭлементФайл.Владелец = ДокументВладелецСсылка;
	
	ЭлементФайл.ТипФайла =  Событие.EventType;
	
	Если Событие.EventType = "New" Тогда
		ЭлементФайл.Наименование =  ?(Событие.DocumentDirection = "Inbound","Получение нового документа","Отправка нового документа");
	ИначеЕсли Событие.EventType = "Confirmation" Тогда
		ЭлементФайл.Наименование =  ?(Событие.DocumentDirection = "Inbound","Уведомление о получении","Подтверждение о получении");
	ИначеЕсли Событие.EventType = "CorrectionRequest" Тогда
		ЭлементФайл.Наименование =  "Уточнение счета-фактуры";
	ИначеЕсли Событие.EventType = "Reject" Тогда
		ЭлементФайл.Наименование =  "Отказ в подписи";
	ИначеЕсли Событие.EventType = "Accept" Тогда
		ЭлементФайл.Наименование =  "Получен титул покупателя либо неформализованный документ";
	ИначеЕсли Событие.EventType = "Resolution"  Тогда
		ЭлементФайл.Наименование =  "Согласование";
	КонецЕсли;
	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ИмяВременногоФайлаПодписи = ПолучитьИмяВременногоФайла("sgn");
	

	ЭлементФайл.ИмяФайла =  Событие.DocumentID;
	ФайлДанные = Событие.GetFileContent(ИмяВременногоФайла);
		
	Если ФайлДанные<>Неопределено Тогда 
		ЭлементФайл.ИмяФайла =  ФайлДанные;
		ЭлементФайл.ФайлДанных = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла));
	КонецЕсли;
	Если Событие.EventType <> "Resolution" Тогда
		ФайлПодписи = Событие.GetSignatureContent(ИмяВременногоФайлаПодписи);
		ЭлементФайл.ФайлПодписи = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайлаПодписи));
	КонецЕсли;
	
	Если Не ДокументВладелецСсылка.пустая() Тогда
	ЭлементФайл.Записать();
	КонецЕсли;

КонецПроцедуры

Функция СоздатьЗапись_О_ДокументеДиадока(Событие, ЯщикID,Организация)
	Если Событие.EventType = "New" Тогда
		ДатаСобытия = Формат(Событие.Timestamp,"ДЛФ=DT");
		Если Событие.DocumentType = "Invoice" Тогда
			ТипДокумента = "Счет-Фактура от";
		ИначеЕсли Событие.DocumentType = "AcceptanceCertificate" Тогда
			ТипДокумента = "Акт от";
		ИначеЕсли Событие.DocumentType = "XmlTorg12" Тогда
			ТипДокумента = "Накладная от";
		ИначеЕсли Событие.DocumentType = "ProformaInvoice" Тогда
			ТипДокумента = "Счет на оплату от";
		ИначеЕсли Событие.DocumentType = "Nonformalized" Тогда	
			ТипДокумента = "Неформализованный от"
		КонецЕсли;
					
		ЭлементДД = Справочники.ДокументыДиадока.СоздатьЭлемент();
		ЭлементДД.ИдентификаторДокументаВДиадок=	ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(Событие.DocumentID);
		ЭлементДД.ИдентификаторЯщикДокументаВДиадок = ЯщикID;
		ЭлементДД.Направление = Событие.DocumentDirection;
		ЭлементДД.ТипДокумента = Событие.DocumentType;
		ЭлементДД.Наименование = Событие.DocumentType +" "+ ЗаменитьНедопустимыеСимволы(ДатаСобытия);
		ЭлементДД.ДатаДокумента = Событие.Timestamp;
		ЭлементДД.ИдентификаторКонтрагентаВДД = Событие.CounteragentID;
		ЭлементДД.Записать();
		Возврат ЭлементДД;
	Иначе      
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
			"ВЫБРАТЬ
			|	ДокументыДиадока.Ссылка КАК ДокументДД
			|ИЗ
			|	Справочник.ДокументыДиадока КАК ДокументыДиадока
			|ГДЕ
			|	ДокументыДиадока.ИдентификаторДокументаВДиадок = &ИдентификаторДокументаВДиадок
			|	И ДокументыДиадока.ИдентификаторЯщикДокументаВДиадок = &ИдентификаторЯщикДокументаВДиадок";
			
		Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(Событие.DocumentID));
		Запрос.УстановитьПараметр("ИдентификаторЯщикДокументаВДиадок", ЯщикID);
		
		РезультатЗапроса=	Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Справочники.ДокументыДиадока.ПустаяСсылка();
		Иначе
			ВыборкаРезультата=	РезультатЗапроса.Выбрать();
			ВыборкаРезультата.Следующий();
			Возврат ВыборкаРезультата.ДокументДД;
		КонецЕсли;
		//ЭлементДД = Справочники.ДокументыДиадока.НайтиПоРеквизиту("ИдентификаторДокументаВДиадок",Событие.DocumentID);
		//Возврат ЭлементДД;
	КонецЕсли;
КонецФункции

Функция  ПолучитьПоследнийЗагруженныйEventID(ОрганизацияСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоследнееЗагруженноеСобытиеПоОрганизации.EventID
	               |ИЗ
	               |	РегистрСведений.ПоследнееЗагруженноеСобытиеПоОрганизации КАК ПоследнееЗагруженноеСобытиеПоОрганизации
	               |ГДЕ
	               |	ПоследнееЗагруженноеСобытиеПоОрганизации.Организация = &ОрганизцияСсылка";
	
	Запрос.УстановитьПараметр("ОрганизцияСсылка",ОрганизацияСсылка );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.EventID;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьПоследнийЗаруженныйEventID(ОрганизацияСсылка,LastEvent)
	
	НаборЗаписей = РегистрыСведений.ПоследнееЗагруженноеСобытиеПоОрганизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(ОрганизацияСсылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Организация = ОрганизацияСсылка;
	НоваяЗапись.EventID = LastEvent;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры





