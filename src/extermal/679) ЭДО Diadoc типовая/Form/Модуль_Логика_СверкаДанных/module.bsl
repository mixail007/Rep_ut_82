Процедура СравнитьЗначения(ЗначениеЭД, Значение1С, ИмяПоляВТаблице, ПредставлениеПоля, Род, ПоляСОшибками, нестрогоеСравнениедаты = Ложь)
	Равны = Истина;
	
	ЗначениеИзТаблицы = ЗначениеЭД;
	Значение = Значение1С;
	
	Если ТипЗнч(ЗначениеИзТаблицы) = Тип("Дата") Тогда
		Если  нестрогоеСравнениедаты Тогда 
			Равны = (НачалоДня(ЗначениеИзТаблицы) <= НачалоДня(Значение));
		Иначе 	
			Равны = (НачалоДня(ЗначениеИзТаблицы) = НачалоДня(Значение));
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ЗначениеИзТаблицы) = Тип("Строка") И ТипЗнч(Значение) = Тип("Число") Тогда
		
		ЗначениеИзТаблицы=	СтрЗаменить(ЗначениеИзТаблицы, Символ(160), "");
		ЗначениеИзТаблицы=	СтрЗаменить(ЗначениеИзТаблицы, Символ(32), "");
		
		Равны = (ЗначениеИзТаблицы = Формат(Значение, "ЧГ=0"));
	ИначеЕсли ТипЗнч(ЗначениеИзТаблицы) = Тип("Строка") И ТипЗнч(Значение) = Тип("Строка") Тогда
		
		ЗначениеИзТаблицы=	СтрЗаменить(ЗначениеИзТаблицы, Символ(160), "");
		ЗначениеИзТаблицы=	СтрЗаменить(ЗначениеИзТаблицы, Символ(32), "");
		Значение=			СтрЗаменить(Значение, Символ(160), "");
		Значение=			СтрЗаменить(Значение, Символ(32), "");

		Равны = (ЗначениеИзТаблицы = Значение);
	ИначеЕсли типЗнч(ЗначениеИзТаблицы) = тип("Число") Тогда
		равны = (окр(ЗначениеИзТаблицы, 3) = Значение);
	Иначе 
		Равны = (ЗначениеИзТаблицы = Значение);
	КонецЕсли;
	
	Если Не Равны Тогда
		ПредставлениеЗначения = Значение;
		Если ТипЗнч(Значение) = Тип("Дата") Тогда
			ПредставлениеЗначения = Формат(Значение, "ДЛФ=Д");
		ИначеЕсли ТипЗнч(ЗначениеИзТаблицы) = Тип("Строка") И ТипЗнч(Значение) = Тип("Число") Тогда
			ПредставлениеЗначения = Строка(Значение);
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
			ПредставлениеЗначения = Формат(Значение, "ЧДЦ=2;ЧН=0");
		КонецЕсли;
		
		ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", ИмяПоляВТаблице, ПредставлениеПоля, Род, ПредставлениеЗначения ));
		
	КонецЕсли;
КонецПроцедуры

Процедура ОформитьСписокКА(ОформленияСтрок, ОтображатьФорматДокументовНаОтправку = Ложь) Экспорт
	
	Если ОтображатьФорматДокументовНаОтправку Тогда
		
		КонтрагентыВ1С = Новый Массив;
		
		Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.КонтрагентВ1С) Тогда
				КонтрагентыВ1С.Добавить(ОформлениеСтроки.ДанныеСтроки.КонтрагентВ1С);
			КонецЕсли;
		КонецЦикла;
		
		КэшФорматДокументовНаОтправку = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначенияСвойстваОбъектов(КонтрагентыВ1С, "ДиадокФормироватьУПДКонтрагент");
		
	КонецЕсли;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.КонтрагентВ1С) Тогда
			ОформлениеСтроки.Ячейки.КонтрагентВ1С.УстановитьТекст("Контрагент в 1С не сопоставлен");
			ОформлениеСтроки.Ячейки.КонтрагентВ1С.ЦветТекста = WEBЦвета.Красный;
		КонецЕсли;
		
		РасшифровкаТекущегоСтатуса = Модуль_РаботаССерверомДиадок.РасшифровкаТекущегоСостоянияВзаимоотношений(ОформлениеСтроки.ДанныеСтроки.ТекущийСтатус);
		ОформлениеСтроки.Ячейки.ТекущийСтатус.УстановитьТекст(РасшифровкаТекущегоСтатуса);
		
		Если ОформлениеСтроки.ДанныеСтроки.ОбъектДД.IsTest Тогда
			ОформлениеСтроки.Ячейки.Контрагент.ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		
		Если ОтображатьФорматДокументовНаОтправку И ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.КонтрагентВ1С) Тогда
			
			ФорматДокументовНаОтправку = КэшФорматДокументовНаОтправку[ОформлениеСтроки.ДанныеСтроки.КонтрагентВ1С];
			
			ОформлениеСтроки.Ячейки.ФорматДокументовНаОтправку.УстановитьТекст(ФорматДокументовНаОтправкуПредставление(ФорматДокументовНаОтправку));
			
			Если ФорматДокументовНаОтправкуУстаревшийФормат(ФорматДокументовНаОтправку) Тогда
				ОформлениеСтроки.Ячейки.ФорматДокументовНаОтправку.ЦветТекста = WEBЦвета.Красный;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьСписокЭД(ОформленияСтрок) Экспорт
	Для каждого стр из ОформленияСтрок цикл 
		ОформитьСтрокуДанныхЭД(стр, стр.ДанныеСтроки.ЭДОбъект);
	Конеццикла;
КонецПроцедуры

Процедура ОформитьСтрокуДанныхЭД(ОформлениеСтроки, ЭДОбъект) Экспорт
	
	Если ТребуетсяПроверкаДокументаВУчете(ЭДОбъект) = Истина Тогда
		
		МассивОшибокУчета=	ПолучитьМассивОшибокУчета(ЭДОбъект, ОформлениеСтроки.ДанныеСтроки.ПервичныйДокумент);
		
		ПервыйНах=	Истина;
		ТекстОшибки= "";
		Для каждого ОшибкаУчета Из МассивОшибокУчета Цикл
			
			Если ЗначениеЗаполнено(ОшибкаУчета.НаименованиеКолонки) Тогда
				ОформлениеСтроки.Ячейки[ОшибкаУчета.НаименованиеКолонки].ЦветТекста = WEBЦвета.Красный;
			КонецЕсли;
			
			Если ОшибкаУчета.КатегорияОшибки = "Ошибки в реквизитах документа 1С" И ПервыйНах = Истина Тогда
				ТекстОшибки=	ТекстОшибки + ?(ТекстОшибки= "", "", ". ") + ОшибкаУчета.КатегорияОшибки + ": " + ОшибкаУчета.ТекстОшибки;
				ПервыйНах=		Ложь;
			Иначе
				ТекстОшибки= 	ТекстОшибки + ?(ТекстОшибки= "", "", ", ") + ОшибкаУчета.ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОформлениеСтроки.ДанныеСтроки.ТекстОшибки <> ТекстОшибки Тогда
			ОформлениеСтроки.ДанныеСтроки.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.ПервичныйДокумент) Тогда
			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Найти(ЭДОбъект.Status, "InvalidRecipientSignature") > 0
		ИЛИ Найти(ЭДОбъект.Status, "InvalidSenderSignature") > 0)
		ИЛИ ЭДОбъект.RevocationStatus = "RevocationAccepted" Тогда
		ОформлениеСтроки.Ячейки.СостояниеДокументооборота.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice"
		И (НЕ ЗначениеЗаполнено(ЭДОбъект.ConfirmationDate) ИЛИ ЭДОбъект.ConfirmationDate >= '20170701')
		И ПустаяСтрока(ЭДОбъект.AttachmentVersion) Тогда
		ОформлениеСтроки.Ячейки.ТипДокумента.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЗначения(Зн)
	Возврат ?(ЗначениеЗаполнено(зн), зн, "значение не заполнено");
КонецФункции

Функция ВычислитьСуммуДокумента(ДокументСсылка)
	
	СуммаДокумента= 0;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат СуммаДокумента;
	КонецЕсли;
	
	МетаданныеДокумента= ДокументСсылка.Метаданные();
	
	Если ЭтоРТУ(ДокументСсылка) И МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено И Метаданные.Константы.Найти("ВалютаРегламентированногоУчета") <> Неопределено И ДокументСсылка.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		СуммаДокумента= ПолучитьСуммуДокументаВВалютеРегламентированногоУчетаДиадок(ДокументСсылка);
		
	ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" И Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокументСсылка) Тогда
		
		Результат= Неопределено;
		
		Выполнить("ПолучитьПараметрыСчетаФактуры(ДокументСсылка, Неопределено, Результат)");
		
		СуммаДокумента = Результат.СуммаДокумента;
		
	ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокументСсылка) И МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено И Метаданные.Константы.Найти("ВалютаРегламентированногоУчета") <> Неопределено И ДокументСсылка.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		
		Для Каждого СтрокаТЧ ИЗ ДокументСсылка.ДокументыОснования Цикл
			СуммаДокумента= СуммаДокумента + ВычислитьСуммуДокумента(СтрокаТЧ.ДокументОснование);
		КонецЦикла;
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		
		СуммаДокумента= ДокументСсылка.СуммаДокумента;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ВозвратнаяТара") <> Неопределено Тогда
			СуммаДокумента= СуммаДокумента + ДокументСсылка.ВозвратнаяТара.Итог("Сумма");
		КонецЕсли;
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("Сумма") <> Неопределено Тогда
		
		СуммаДокумента= ДокументСсылка.Сумма;
		
	ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ИтогоВсего") <> Неопределено Тогда
		
		СуммаДокумента= ДокументСсылка.ИтогоВсего;
		
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции	

Функция ЭтоВалютныйДокумент(ДокСсылка)
	возврат   (Докссылка.Метаданные().реквизиты.найти("ВалютаДокумента")<>Неопределено)  и 
	          (Метаданные.константы.найти("ВалютаРегламентированногоУчета")<>Неопределено) и 
			  (Докссылка.ВалютаДокумента <> константы.ВалютаРегламентированногоУчета.Получить()) 

КонецФункции 	

Функция ЭтоКСФ(СсылкаНаДокумент)
	Возврат ((СсылкаНаДокумент.Метаданные().реквизиты.найти("ВидСчетаФактуры")<>Неопределено) и (строка(СсылкаНаДокумент.ВидСчетаФактуры) = "Корректировочный")) 
	или
	((СсылкаНаДокумент.Метаданные().реквизиты.найти("ХозОперация")<>Неопределено) и (найти(строка(СсылкаНаДокумент.ХозОперация) , "Корректировочный")>0)) 
КонецФункции

//{ ПРОВЕРКА ДОКУМЕНТА В УЧЕТЕ
	
	Функция ТребуетсяПроверкаДокументаВУчете(ЭДОбъект)
		
		Если (ЭДОбъект.Type = "NonformalizedProforma" И ЭДОбъект.Direction = "Inbound")
			ИЛИ ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЭтоНеформализованныйДокументБезМетаданных(ЭДОбъект) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Функция ТребуетсяУчетДокумента(ЭДОбъект)
		
		ТребуетсяУчет=	Ложь;
		
		Если (Найти(ЭДОбъект.Type, "Torg12" )>0)
			И ЭДОбъект.Status <> "OutboundRecipientSignatureRequestRejected" 
			И ЭДОбъект.Status <> "InboundRecipientSignatureRequestRejected" Тогда
			ТребуетсяУчет= Истина;
		ИначеЕсли (ЭДОбъект.Type = "Invoice" ИЛИ ЭДОбъект.Type = "InvoiceCorrection")
			И (ЭДОбъект.Status = "OutboundFinished" ИЛИ ЭДОбъект.Status = "InboundFinished") Тогда
			ТребуетсяУчет= Истина;
		КонецЕсли;
		
		Возврат ТребуетсяУчет;
		
	КонецФункции
	
	Функция ПолучитьПараметрыИсправленияИсходногоДокумента(ДокСсылка)
		
		ПараметрыИсправления=	Новый Структура();
		
		ДокСсылкаМетаданныеРеквизиты= ДокСсылка.Метаданные().Реквизиты;
			
		Если ДокСсылкаМетаданныеРеквизиты.Найти("УчитыватьИсправлениеИсходногоДокумента") <> Неопределено Тогда
			ПараметрыИсправления.Вставить("УчитыватьИсправлениеИсходногоДокумента", ДокСсылка.УчитыватьИсправлениеИсходногоДокумента);
			ПараметрыИсправления.Вставить("НомерИсправленияИсходногоДокумента", 	ДокСсылка.НомерИсправленияИсходногоДокумента);
			ПараметрыИсправления.Вставить("ДатаИсправленияИсходногоДокумента", 		ДокСсылка.ДатаИсправленияИсходногоДокумента);
			ПараметрыИсправления.Вставить("ДатаИсходногоДокумента", 				ДокСсылка.ДатаИсходногоДокумента);
			ПараметрыИсправления.Вставить("НомерИсходногоДокумента", 				ДокСсылка.НомерИсходногоДокумента);
		Иначе
			Если ДокСсылкаМетаданныеРеквизиты.Найти("Исправление") <> Неопределено И ДокСсылка.Исправление и Не ЭтоКСФ(ДокСсылка) Тогда
				ПараметрыИсправления.Вставить("ДатаИсходногоДокумента", 			ДокСсылка.ДатаИсходногоДокумента);
				ПараметрыИсправления.Вставить("НомерИсходногоДокумента", 			ДокСсылка.НомерИсходногоДокумента);
			Иначе
				ПараметрыИсправления.Вставить("ДатаИсходногоДокумента", 			ДокСсылка.ДокументыОснования[0].ДатаИсходногоДокумента);
				ПараметрыИсправления.Вставить("НомерИсходногоДокумента", 			ДокСсылка.ДокументыОснования[0].НомерИсходногоДокумента);
			КонецЕсли;
			ПараметрыИсправления.Вставить("УчитыватьИсправлениеИсходногоДокумента",	ДокСсылка.ДокументыОснования[0].УчитыватьИсправлениеИсходногоДокумента);
			ПараметрыИсправления.Вставить("НомерИсправленияИсходногоДокумента", 	ДокСсылка.ДокументыОснования[0].НомерИсправленияИсходногоДокумента);
			ПараметрыИсправления.Вставить("ДатаИсправленияИсходногоДокумента", 		ДокСсылка.ДокументыОснования[0].ДатаИсправленияИсходногоДокумента);
		КонецЕсли;
		
		Возврат ПараметрыИсправления;
		
	КонецФункции
	
	Процедура ПроверитьDocumentDateNumber(DocumentDate, DocumentNumber, ДокСсылка, ПоляСОшибками)
		
		Если ДокСсылка.Метаданные().Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено Тогда 
			СравнитьЗначения(DocumentDate, ДокСсылка.ДатаВходящегоДокумента, "Дата", "дата входящего документа", "ж", ПоляСОшибками);
			СравнитьЗначения(СокрЛП(DocumentNumber), СокрЛП(ДокСсылка.НомерВходящегоДокумента), "Номер", "номер входящего документа", "м", ПоляСОшибками);
		ИначеЕсли ДокСсылка.Метаданные().Реквизиты.Найти("ВхДокДата") <> Неопределено Тогда 
			СравнитьЗначения(DocumentDate, ДокСсылка.ВхДокДата, "Дата", "дата входящего документа", "ж", ПоляСОшибками);
			СравнитьЗначения(СокрЛП(DocumentNumber), СокрЛП(ДокСсылка.ВхДокНомер), "Номер", "номер входящего документа", "м", ПоляСОшибками);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПроверитьDocumentOriginalDateNumber(Document, ДокСсылка, ПоляСОшибками)
		
		ПараметрыИсправления=	ПолучитьПараметрыИсправленияИсходногоДокумента(ДокСсылка);
		
		СравнитьЗначения(Document.OriginalDocumentDate, ПараметрыИсправления.ДатаИсходногоДокумента, "Номер", "дата исходного документа", "ж", ПоляСОшибками);
		СравнитьЗначения(СокрЛП(Document.OriginalDocumentNumber), ПараметрыИсправления.НомерИсходногоДокумента, "Номер", "номер исходного документа", "м", ПоляСОшибками);
		
		Если (Document.OriginalInvoiceRevisionNumber <> "" И НЕ ПараметрыИсправления.УчитыватьИсправлениеИсходногоДокумента)
			ИЛИ (СокрЛП(Document.OriginalInvoiceRevisionNumber) = "" И ПараметрыИсправления.УчитыватьИсправлениеИсходногоДокумента) Тогда
			
			ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
			"Номер", 
			"признак с учетом исправления исходного документа", 
			"м",
			?(ПараметрыИсправления.УчитыватьИсправлениеИсходногоДокумента, "Установлен", "Не установлен")));
		КонецЕсли;
		
		Если СокрЛП(Document.OriginalInvoiceRevisionNumber) <> "" Тогда
			СравнитьЗначения(Document.OriginalInvoiceRevisionDate, ПараметрыИсправления.ДатаИсправленияИсходногоДокумента, "Номер", "дата исправления исходного документа", "ж", ПоляСОшибками);
			СравнитьЗначения(СокрЛП(Document.OriginalInvoiceRevisionNumber), ПараметрыИсправления.НомерИсправленияИсходногоДокумента, "Номер", "номер исправления исходного документа", "м", ПоляСОшибками);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПроверитьУчетСФЗаднимЧислом(Document, ДокСсылка, МассивОшибок)
		
		Если КонецКвартала(Document.DocumentDate) < Document.ConfirmationDate Тогда
			
			ДатаДедлайна=	КонецКвартала(Document.DocumentDate) + 25*24*3600;
			Если НачалоДня(Document.ConfirmationDate) > ДатаДедлайна Тогда
				
				СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
				
				СтруктураОшибки.КатегорияОшибки=		"Ошибки учета";
				СтруктураОшибки.ТекстОшибки=			"СФ не может быть учтена - дата выставления позже " + Формат(ДатаДедлайна, "ДФ=dd.MM.yyyy");
				СтруктураОшибки.НаименованиеКолонки=	"ДатаУчета";
				
				МассивОшибок.Добавить(СтруктураОшибки);
				
			Иначе
				
				МассивСсылокРНК = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(Document);
				
				Если МассивСсылокРНК.Количество() = 0 Тогда
					
					Если (НЕ ДокСсылка = Неопределено) Тогда
						
						ДокПоступление = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьДокументПоступленияПоСФ(ДокСсылка);
						Если ЗначениеЗаполнено(ДокПоступление) Тогда
							
							МинимальнаяДатаУчетаСФ=	Мин(ДокПоступление.Дата, Document.DocumentDate, Document.ConfirmationDate);
							
							Если НачалоДня(ДокСсылка.Дата) < НачалоДня(МинимальнаяДатаУчетаСФ) Тогда
								
								СтруктураОшибки = ИнициализироватьСтруктуруОшибки();
								
								СтруктураОшибки.КатегорияОшибки 	= "Ошибки учета";
								СтруктураОшибки.ТекстОшибки 		= "СФ не может быть учтена раньше чем " + Формат(МинимальнаяДатаУчетаСФ, "ДФ=dd.MM.yyyy");
								СтруктураОшибки.НаименованиеКолонки = "Дата";
								
								МассивОшибок.Добавить(СтруктураОшибки);
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						
						СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
					
						СтруктураОшибки.КатегорияОшибки=		"Ошибки учета";
						СтруктураОшибки.ТекстОшибки=			"СФ не может быть учтена - отсутствует учтенное поступление";
						СтруктураОшибки.НаименованиеКолонки=	"Дата";
					
						МассивОшибок.Добавить(СтруктураОшибки);
						
					КонецЕсли;
										
				Иначе
					
					ДокПоступление=	МассивСсылокРНК[0];
					МинимальнаяДатаУчетаСФ=	Мин(ДокПоступление.Дата, Document.DocumentDate, Document.ConfirmationDate);
					Если НачалоДня(ДокСсылка.Дата) < НачалоДня(МинимальнаяДатаУчетаСФ) Тогда
						
						СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
						
						СтруктураОшибки.КатегорияОшибки=		"Ошибки учета";
						СтруктураОшибки.ТекстОшибки=			"СФ не может быть учтена раньше чем " + Формат(МинимальнаяДатаУчетаСФ, "ДФ=dd.MM.yyyy");
						СтруктураОшибки.НаименованиеКолонки=	"Дата";
						
						МассивОшибок.Добавить(СтруктураОшибки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	//{ Проверить...
		
		Процедура ПроверитьXmlTorg12(Document, ДокСсылка, ПоляСОшибками)

			Если НЕ Document.IsEncryptedContent Тогда
				
				СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
				
				Если  ЭтоВалютныйДокумент(ДокСсылка)=ложь тогда 
					СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Document.Direction = "Inbound" Тогда
				ПроверитьDocumentDateNumber(Document.DocumentDate, Document.DocumentNumber, ДокСсылка, ПоляСОшибками);
			ИначеЕсли Document.Direction = "Outbound" Тогда
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка), "Номер", "номер", "м", ПоляСОшибками);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьXmlAcceptanceCertificate(Document, ДокСсылка, ПоляСОшибками)
			
			Если НЕ Document.IsEncryptedContent Тогда
				
				СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
				
				Если  ЭтоВалютныйДокумент(ДокСсылка)=ложь тогда 
					СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Document.Direction = "Inbound" Тогда
				ПроверитьDocumentDateNumber(Document.DocumentDate, Document.DocumentNumber, ДокСсылка, ПоляСОшибками);
			ИначеЕсли Document.Direction = "Outbound" Тогда
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка), "Номер", "номер", "м", ПоляСОшибками);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьInvoice(Document, ДокСсылка, ПоляСОшибками)
			
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокСсылка) = Истина Тогда
				
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка), "Номер", "номер", "м", ПоляСОшибками);
				//СравнитьЗначения(СокрЛП(Document.DocumentNumber), ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка), "Номер", "номер", "м", ПоляСОшибками);
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					ЭтоВалютнаяСчетФактура = ЭтоВалютныйДокумент(ДокСсылка);
					Если НЕ ЭтоВалютнаяСчетФактура Тогда
						СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
						СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
					КонецЕсли;	
					
				КонецЕсли;
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФПолученный(ДокСсылка) = Истина Тогда
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
					СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
					
				КонецЕсли;
				
				ПроверитьDocumentDateNumber(Document.DocumentDate, Document.DocumentNumber, ДокСсылка, ПоляСОшибками);
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьInvoiceRevision(Document, ДокСсылка, ПоляСОшибками)
			
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокСсылка) = Истина Тогда
				
				Если НЕ ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Не установлен"));
				КонецЕсли;
				
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ДокСсылка.НомерИсправления, "Номер", "номер исправления", "м", ПоляСОшибками);
				
				ПараметрыИсправления=	ПолучитьПараметрыИсправленияИсходногоДокумента(ДокСсылка);
				СравнитьЗначения(Document.OriginalDocumentDate, ПараметрыИсправления.ДатаИсходногоДокумента, "Дата", "дата исходного документа", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.OriginalDocumentNumber), ПараметрыИсправления.НомерИсходногоДокумента, "Номер", "номер исходного документа", "м", ПоляСОшибками);
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					ЭтоВалютнаяСчетФактура = ЭтоВалютныйДокумент(ДокСсылка);
					Если НЕ ЭтоВалютнаяСчетФактура Тогда
						СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
						СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФПолученный(ДокСсылка) = Истина Тогда
				
				Если НЕ ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Не установлен"));
				КонецЕсли;
				
				Если ДокСсылка.Метаданные().Реквизиты.Найти("ДатаИсправления") <> Неопределено Тогда 
					СравнитьЗначения(Document.DocumentDate, ДокСсылка.ДатаИсправления, "Дата", "дата исправления", "ж", ПоляСОшибками);
					СравнитьЗначения(СокрЛП(Document.DocumentNumber), ДокСсылка.НомерИсправления, "Номер", "номер исправления", "м", ПоляСОшибками);
				КонецЕсли;
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					СуммаДокумента = ВычислитьСуммуДокумента(ДокСсылка);
					СравнитьЗначения(Document.Total, СуммаДокумента, "Сумма", "сумма", "ж", ПоляСОшибками);
					
				КонецЕсли;
				
				ПроверитьDocumentDateNumber(Document.OriginalDocumentDate, Document.OriginalDocumentNumber, ДокСсылка, ПоляСОшибками);
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьInvoiceCorrection(Document, ДокСсылка, ПоляСОшибками)
			
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокСсылка) = Истина Тогда
				
				Если ЭтоКСФ(ДокСсылка) = Ложь Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"Вид счета-фактуры", 
					"м",
					ДокСсылка.ВидСчетаФактуры));
				КонецЕсли;
				
				Если ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Установлен"));
				КонецЕсли;
				
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка), "Номер", "номер", "м", ПоляСОшибками);
				
				ПроверитьDocumentOriginalDateNumber(Document, ДокСсылка, ПоляСОшибками);
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					Попытка
						СравнитьЗначения(Document.TotalInc, ДокСсылка.СуммаУвеличение, "Сумма", "сумма увеличения", "ж", ПоляСОшибками);
						СравнитьЗначения(Document.TotalDec, ДокСсылка.СуммаУменьшение, "Сумма", "сумма уменьшения", "ж", ПоляСОшибками);
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФПолученный(ДокСсылка) = Истина Тогда
				
				Если НЕ ДокСсылка.Метаданные().Реквизиты.Найти("ВидСчетаФактуры") = Неопределено Тогда
					Если ДокСсылка.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
						ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
						"Номер", 
						"Вид счета-фактуры", 
						"м",
						ДокСсылка.ВидСчетаФактуры));
					КонецЕсли;
				ИначеЕсли НЕ ДокСсылка.Метаданные().Реквизиты.Найти("ХозОперация") = Неопределено Тогда
					Если ДокСсылка.ХозОперация <> Вычислить("Справочники.ХозОперации.СчетФактураПолученныйКорректировка") Тогда
						ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
						"Номер", 
						"Вид счета-фактуры", 
						"м",
						ДокСсылка.ХозОперация));
					КонецЕсли;
				КонецЕсли;
				
				Если ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Установлен"));
				КонецЕсли;
				
				ПроверитьDocumentDateNumber(Document.DocumentDate, Document.DocumentNumber, ДокСсылка, ПоляСОшибками);
				ПроверитьDocumentOriginalDateNumber(Document, ДокСсылка, ПоляСОшибками);
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					Если ДокСсылка.Метаданные().Реквизиты.найти("СуммаУвеличение")<>Неопределено Тогда
						СравнитьЗначения(Document.TotalInc, ДокСсылка.СуммаУвеличение, "Сумма", "сумма увеличения", "ж", ПоляСОшибками);
						СравнитьЗначения(Document.TotalDec, ДокСсылка.СуммаУменьшение, "Сумма", "сумма уменьшения", "ж", ПоляСОшибками);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьInvoiceCorrectionRevision(Document, ДокСсылка, ПоляСОшибками)
			
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокСсылка) = Истина Тогда
				
				Если ЭтоКСФ(ДокСсылка)=Ложь Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"Вид счета-фактуры", 
					"м",
					ДокСсылка.ВидСчетаФактуры));
				КонецЕсли;
				
				Если НЕ ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Не Установлен"));
				КонецЕсли;
				
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ДокСсылка.НомерИсправления, "Номер", "номер исправления", "м", ПоляСОшибками);
				
				ПроверитьDocumentOriginalDateNumber(Document, ДокСсылка, ПоляСОшибками);
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					Попытка
						СравнитьЗначения(Document.TotalInc, ДокСсылка.СуммаУвеличение, "Сумма", "сумма увеличения", "ж", ПоляСОшибками);
						СравнитьЗначения(Document.TotalDec, ДокСсылка.СуммаУменьшение, "Сумма", "сумма уменьшения", "ж", ПоляСОшибками);
					Исключение 
					КонецПопытки;	
					
				КонецЕсли;
				
				СравнитьЗначения(Document.OriginalInvoiceCorrectionDate, ДокСсылка.ДатаИсправляемогоКорректировочногоДокумента, "Номер", "дата исходного корректировочного документа", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.OriginalInvoiceCorrectionNumber), ДокСсылка.НомерИсправляемогоКорректировочногоДокумента, "Номер", "номер исходного корректировочного документа", "м", ПоляСОшибками);
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФПолученный(ДокСсылка) = Истина Тогда
				
				Если НЕ ДокСсылка.Метаданные().Реквизиты.Найти("ВидСчетаФактуры") = Неопределено Тогда
					Если ДокСсылка.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
						ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
						"Номер", 
						"Вид счета-фактуры", 
						"м",
						ДокСсылка.ВидСчетаФактуры));
					КонецЕсли;
				ИначеЕсли НЕ ДокСсылка.Метаданные().Реквизиты.Найти("ХозОперация") = Неопределено Тогда
					Если ДокСсылка.ХозОперация <> Вычислить("Справочники.ХозОперации.СчетФактураПолученныйКорректировка") Тогда
						ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
						"Номер", 
						"Вид счета-фактуры", 
						"м",
						ДокСсылка.ХозОперация));
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ДокСсылка.Исправление Тогда
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", 
					"Номер", 
					"признак исправления", 
					"м",
					"Не Установлен"));
				КонецЕсли;
				
				СравнитьЗначения(Document.DocumentDate, ДокСсылка.Дата, "Дата", "дата", "ж", ПоляСОшибками);
				СравнитьЗначения(СокрЛП(Document.DocumentNumber), ДокСсылка.НомерИсправления, "Номер", "номер исправления", "м", ПоляСОшибками);
				
				ПроверитьDocumentDateNumber(Document.OriginalInvoiceCorrectionDate, Document.OriginalInvoiceCorrectionNumber, ДокСсылка, ПоляСОшибками);
				ПроверитьDocumentOriginalDateNumber(Document, ДокСсылка, ПоляСОшибками);
				
				Если ДокСсылка.Метаданные().Реквизиты.Найти("ДатаИсправляемогоКорректировочногоДокумента") <> Неопределено Тогда 
					СравнитьЗначения(Document.OriginalInvoiceCorrectionDate, ДокСсылка.ДатаИсправляемогоКорректировочногоДокумента, "Дата", "дата исправляемого корректировочного документа", "ж", ПоляСОшибками);
					СравнитьЗначения(СокрЛП(Document.OriginalInvoiceCorrectionNumber), ДокСсылка.НомерИсправляемогоКорректировочногоДокумента, "Номер", "номер исправляемого корректировочного документа", "м", ПоляСОшибками);
				КонецЕсли;
				
				Если НЕ Document.IsEncryptedContent Тогда
					
					Если ДокСсылка.Метаданные().Реквизиты.найти("СуммаУвеличение") <> Неопределено Тогда
						СравнитьЗначения(Document.TotalInc, ДокСсылка.СуммаУвеличение, "Сумма", "сумма увеличения", "ж", ПоляСОшибками);
						СравнитьЗначения(Document.TotalDec, ДокСсылка.СуммаУменьшение, "Сумма", "сумма уменьшения", "ж", ПоляСОшибками);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверитьAnyInvoice(Document, ДокСсылка, ПоляСОшибками)
			
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокСсылка) = Истина Тогда
				
				Если ДокСсылка.Метаданные().Реквизиты.Найти("ДатаВыставления") <> Неопределено Тогда 
					СравнитьЗначения(Document.ConfirmationDate, ДокСсылка.Датавыставления, "ДатаУчета", "дата выставления", "ж", ПоляСОшибками);
				КонецЕсли;	
				
				Если ДокСсылка.Метаданные().Реквизиты.Найти("КодСпособаВыставления") <> Неопределено   
					И ДокСсылка.КодСпособаВыставления <> 2 Тогда 
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", "ДатаУчета", "способ выставления счета-фактуры", "м",
					?(ДокСсылка.КодСпособаВыставления = 1, "На бумажном носителе", "")) );
				КонецЕсли;
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФПолученный(ДокСсылка) = Истина  Тогда
				
				Если ДокСсылка.Метаданные().Реквизиты.Найти("КодСпособаПолучения") <> Неопределено   
					И ДокСсылка.КодСпособаПолучения <> 2 Тогда 
					ПоляСОшибками.Добавить(Новый Структура("ИмяПоляВТаблице, ПредставлениеПоля, Род, Значение", "ДатаУчета", "способ получения счета-фактуры", "м",
					?(ДокСсылка.КодСпособаПолучения = 1, "На бумажном носителе", "")) );
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецПроцедуры
		
	//} Проверить...
	
	Функция ПолучитьМассивПолейСОшибками(ЭДОбъект, ДокСсылка)
		
		ПоляСОшибками = Новый Массив;
		
		Если Найти(ЭДОбъект.Type, "Torg12" ) > 0 Тогда
			ПроверитьXmlTorg12(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		ИначеЕсли Найти(ЭДОбъект.Type, "XmlAcceptanceCertificate") > 0 Тогда
			ПроверитьXmlAcceptanceCertificate(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		ИначеЕсли ЭДОбъект.Type = "Invoice" Тогда
			ПроверитьInvoice(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
			ПроверитьInvoiceRevision(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
			ПроверитьInvoiceCorrection(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
			ПроверитьInvoiceCorrectionRevision(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		КонецЕсли;
		
		Если Лев(ЭДОбъект.Type, 7) = "Invoice" Тогда
			ПроверитьAnyInvoice(ЭДОбъект, ДокСсылка, ПоляСОшибками);
		КонецЕсли;
		
		Возврат ПоляСОшибками;
		
	КонецФункции
	
	Функция ИнициализироватьСтруктуруОшибки()
		
		СтруктураОшибки = Новый Структура("КатегорияОшибки, ТекстОшибки, НаименованиеКолонки");
		СтруктураОшибки.КатегорияОшибки=		"";
		СтруктураОшибки.ТекстОшибки=			"";
		СтруктураОшибки.НаименованиеКолонки=	"";
		
		Возврат СтруктураОшибки;
		
	КонецФункции
	
	Функция ПолучитьМассивОшибокУчета(ЭДОбъект, ДокСсылка) Экспорт
		
		МассивОшибок=	Новый Массив();
		
		Если Не ЭтоФормализованныйДокумент(ЭДОбъект.Type) Тогда
			// ошибки учета могут быть только у формализованных документов, остальные приходят просто как файлы с произвольным содержимым.
			Возврат МассивОшибок;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокСсылка) Тогда
			
			СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
			
			СтруктураОшибки.КатегорияОшибки=	"Ошибки учета документа";
			СтруктураОшибки.ТекстОшибки=		"Документ отсутствует в 1С";
			
			ТребуетсяУчет= ТребуетсяУчетДокумента(ЭДОбъект);
			Если ТребуетсяУчет = Истина Тогда
				СтруктураОшибки.ТекстОшибки=	СтруктураОшибки.ТекстОшибки + ". Документ должен быть учтен";
			КонецЕсли;
			
			МассивОшибок.Добавить(СтруктураОшибки);
			
			Возврат МассивОшибок;
			
		КонецЕсли;
		
		Если (Найти(ЭДОбъект.Type, "Torg12")>0 ИЛИ Найти(ЭДОбъект.Type, "XmlAcceptanceCertificate")>0) 
			И (ЭДОбъект.Status = "OutboundRecipientSignatureRequestRejected" ИЛИ ЭДОбъект.Status = "InboundRecipientSignatureRequestRejected") Тогда
			
			СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
			
			СтруктураОшибки.КатегорияОшибки=		"Ошибки учета документа";
			СтруктураОшибки.ТекстОшибки=			"Отказано в подписи. Документ не может быть учтен";
			СтруктураОшибки.НаименованиеКолонки=	"СостояниеДокументооборота";
			
			МассивОшибок.Добавить(СтруктураОшибки);
			
			Возврат МассивОшибок;
			
		КонецЕсли;
		
		Если ДокСсылка.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить 
			И НЕ ДокСсылка.Проведен = Истина Тогда
			
			СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
			
			СтруктураОшибки.КатегорияОшибки=		"Ошибки учета документа";
			СтруктураОшибки.ТекстОшибки=			"Документ не проведен";
			СтруктураОшибки.НаименованиеКолонки=	"ПервичныйДокумент";
			
			МассивОшибок.Добавить(СтруктураОшибки);
			
			Возврат МассивОшибок;
			
		КонецЕсли;
		
		Если Лев(ЭДОбъект.Type, 7) = "Invoice" 
			И ЭДОбъект.AmendmentRequested
			И НЕ ЭДОбъект.Corrected
			И НЕ ЭДОбъект.Revised Тогда
			
			СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
			
			СтруктураОшибки.КатегорияОшибки=		"Ошибки учета документа";
			СтруктураОшибки.ТекстОшибки=			"Требует уточнения";
			СтруктураОшибки.НаименованиеКолонки=	"СостояниеДокументооборота";
			
			МассивОшибок.Добавить(СтруктураОшибки);
			
			Возврат МассивОшибок;
			
		КонецЕсли;
		
		Если Лев(ЭДОбъект.Type, 7) = "Invoice" 
			И ЭДОбъект.Direction = "Inbound" Тогда
			ПроверитьУчетСФЗаднимЧислом(ЭДОбъект, ДокСсылка, МассивОшибок);
		КонецЕсли;
		
		ПоляСОшибками=	ПолучитьМассивПолейСОшибками(ЭДОбъект, ДокСсылка);
		Если ПоляСОшибками.Количество() > 0 Тогда
			
			Для каждого ПолеСОшибкой Из ПоляСОшибками Цикл
				
				СтруктураОшибки=	ИнициализироватьСтруктуруОшибки();
				
				СтруктураОшибки.КатегорияОшибки=		"Ошибки в реквизитах документа 1С";
				СтруктураОшибки.ТекстОшибки=			ПолеСОшибкой.ПредставлениеПоля + " (" + ПредставлениеЗначения(ПолеСОшибкой.Значение) + ")";
				СтруктураОшибки.НаименованиеКолонки=	ПолеСОшибкой.ИмяПоляВТаблице;
				
				МассивОшибок.Добавить(СтруктураОшибки);
				
			КонецЦикла;
			
		КонецЕсли;	
		
		Возврат МассивОшибок;
		
	КонецФункции
	
//} ПРОВЕРКА ДОКУМЕНТА В УЧЕТЕ