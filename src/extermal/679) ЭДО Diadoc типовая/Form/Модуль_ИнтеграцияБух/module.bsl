Перем ВалютаРегламентированногоУчета;

//{ ТЕЛО МОДУЛЯ
	
	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ=Истина) Экспорт 
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ);
	КонецФункции 
	
	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Возврат ПолучитьНомераДляСФ(ДокументСсылка).НомерДокумента;
		Иначе
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомерНаПечатьДиадок(ДокументСсылка);
		КонецЕсли;
		
	КонецФункции

	Функция ЭтоСчетФактуранаАванс(СФ) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЭтоСчетФактуранаАванс(СФ);
	КонецФункции	
	
	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт
		Возврат ДокументСсылка.СуммаДокумента;
	КонецФункции
		
	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета(ДокументСсылка)  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Если УчетНДС.ПолучитьУПУпрощенныйУчетНДС(ДокументСсылка.Организация, ДокументСсылка.Дата) Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(, , Регистратор, СчетФактура = &Ссылка) КАК НДСЗаписиКнигиПродажОбороты
			|ГДЕ
			|	НДСЗаписиКнигиПродажОбороты.Регистратор = &Ссылка";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
			|	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовПоПретензиям = ХозрасчетныйОборотыДтКт.СчетДт";
		ИначеЕсли ДокументСсылка.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
			|	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовСКонтрагентом = ХозрасчетныйОборотыДтКт.СчетДт ";
		Иначе
			Возврат 0;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат 0 ;
		КонецЕсли;
		
		Выборка = результат.Выбрать();
		Если выборка.Следующий() Тогда
			Возврат выборка.СуммаВзаиморасчетов
		Иначе 
			Возврат 0;
		КонецЕсли;	
		
	КонецФункции	
	
	Процедура ПерезаполнитьСуммыПоУЕвРублях(СтрокиСчетаФактуры, ТекущееОснование, ДанныеШапки) Экспорт 
		
		Если ТекущееОснование.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			СуммаВзаиморасчетов = ПолучитьСуммуДокументаВВалютеРегламентированногоУчета(ТекущееОснование);
			Если СуммаВзаиморасчетов <> 0 Тогда	
				
				МассивРаспределения = Новый Массив;
				Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
					СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(СтрокаСчетаФактуры.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
					МассивРаспределения.Добавить(СуммаСНДС);
				КонецЦикла;
				
				СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
				УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
				
				Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
					СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
					Если СтрокаСчетаФактуры.СуммаВключаетНДС Тогда
						СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
					КонецЕсли;
				КонецЦикла;
				
				СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
				
			КонецЕсли;	
			
			Если НЕ ДанныеШапки = Неопределено Тогда
				ДанныеШапки.ВалютаДокумента= ВалютаРегламентированногоУчета;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура=Неопределено, ФормированиеСФ=Ложь) Экспорт 
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура, ФормированиеСФ);
	КонецФункции	
		
	Функция ОснованиеОтчетКомитентаОПродажах_ОтчетОЗакупках(ДокументСсылка, СчетФактура)
		
		Если СчетФактура = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДокументСсылка.Метаданные().Реквизиты.Найти("ВидОперации") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках
			И ЗначениеЗаполнено(СчетФактура.Продавец)
			И СчетФактура.Контрагент <> СчетФактура.Продавец Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПолучитьПредставлениеХарактеристикиИСерии(выборка) Экспорт 
		Возврат "";
	КонецФункции
	
	Функция Документ_Организация(Документ) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Документ_Организация(Документ);
		
	КонецФункции
	
	Функция Организация_КПП(Организация) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);
		
	КонецФункции
	
	Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящейНакладной(ДокСсылка)
		
	КонецФункции
	
	Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка)
		
	КонецФункции
	
	Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры
	
	Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры
	
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДокументБезНДС(СсылкаНаОбъект);
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ

//{ ПОЛУЧЕНИЕ ДАННЫХ
	
	//{ Получить...
		
		Функция ПолучитьНаименованиеКолонкиКодаТовара() Экспорт
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНаименованиеКолонкиКодаТовара();
		КонецФункции
		
		Функция ПолучитьВалютуРегламентированногоУчета() 
			Возврат Константы.ВалютаРегламентированногоУчета.Получить();
		КонецФункции
		
		Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерДокументовОплаты(СчетФактура);
		КонецФункции
		
		Функция ПолучитьНомерГТД(НомерГТД) Экспорт
		
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомерГТД(НомерГТД);
		
		КонецФункции
		
		Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
			Договор = ДокументСсылка.ДоговорКонтрагента;
			Возврат Новый Структура("ДоговорНомер, ДоговорДата", Договор.Номер, Договор.Дата);
		КонецФункции
		
		Функция ПолучитьФИОРуководителяДляСчета(ДанныеШапки) Экспорт
			
			//как соответствие типовому функционалу заполнения параметра ФИОРуководителя в БП и БП КОРП
			СтруктураРуководители = ОбщегоНазначения.ОтветственныеЛица(ДанныеШапки.Организация, ДанныеШапки.Дата);
			Руководитель = СтруктураРуководители.РуководительПредставление;
			
			Если ЗначениеЗаполнено(Руководитель) = Истина Тогда
				ФИОРуководителя = Руководитель;
			Иначе
				ФИОРуководителя = "_";
			КонецЕсли;
			
			Возврат ФИОРуководителя;
			
		КонецФункции
		
		Функция ПолучитьГрузоотправителяГрузополучателя1С(Параметры) Экспорт
			
			Запрос= Новый Запрос;
			
			Запрос.Текст= 
				"ВЫБРАТЬ
              	|	Контрагенты.Ссылка КАК КонтрагентСсылка,
				|	Контрагенты.Наименование КАК Наименование
             	|ИЗ
              	|	Справочник.Контрагенты КАК Контрагенты
              	|ГДЕ
              	|	Контрагенты.ИНН = &ИНН
              	|	И Контрагенты.КПП = &КПП
              	|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
				
			Запрос.УстановитьПараметр("ИНН", Параметры.инн);
			Запрос.УстановитьПараметр("КПП", Параметры.кпп);
			
			Выборка= Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Возврат Выборка.КонтрагентСсылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
						
		КонецФункции
				
	//} Получить...
	
	//{ ТЧПолучитьТекстЗапроса...
		
		Функция ТЧПолучитьТекстЗапросаРеализацияТоваровУслуг(ФормированиеСФ)
			
			Возврат
			
			"ВЫБРАТЬ
			|	ТЧ.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ТЧ.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			ТОГДА ТЧ.Номенклатура.Наименование
			|		ИНАЧЕ ТЧ.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ТЧ.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ТЧ.Номенклатура.Код КАК КодНоменклатуры,
			|	ТЧ.Количество КАК Количество,
			|	ТЧ.Цена КАК Цена,
			|	ТЧ.Сумма КАК Сумма,
			|	ТЧ.СтавкаНДС КАК СтавкаНДС,
			|	ТЧ.СуммаНДС КАК СуммаНДС,
			|	ТЧ.НомерГТД КАК НомерГТД,
			|	ТЧ.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ТЧ.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ТЧ.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	ТЧ.ЕдиницаИзмерения КАК ВидУпаковки,
			|	ТЧ.Коэффициент КАК КоличествоВОдномМесте,
			|	ТЧ.КоличествоМест КАК КоличествоМест,
			|	ЛОЖЬ КАК ЭтоУслуга,
			|	1 КАК Порядок
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК ТЧ
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТЧ.НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ТЧ.Содержание, 1, 10) = """"
			|			ТОГДА ТЧ.Номенклатура.Наименование
			|		ИНАЧЕ ТЧ.Содержание
			|	КОНЕЦ,
			|	ТЧ.Номенклатура.Ссылка,
			|	ТЧ.Номенклатура.Код,
			|	ТЧ.Количество,
			|	ТЧ.Цена,
			|	ТЧ.Сумма,
			|	ТЧ.СтавкаНДС,
			|	ТЧ.СуммаНДС,
			|	"""",
			|	"""",
			|	ТЧ.Ссылка.СуммаВключаетНДС,
			|	ТЧ.Ссылка.УчитыватьНДС,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|	"""",
			|	0,
			|	0,
			|	ИСТИНА,
			|	3
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Услуги КАК ТЧ
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТЧ.НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ТЧ.Содержание, 1, 10) = """"
			|			ТОГДА ТЧ.Номенклатура.Наименование
			|		ИНАЧЕ ТЧ.Содержание
			|	КОНЕЦ,
			|	ТЧ.Номенклатура.Ссылка,
			|	ТЧ.Номенклатура.Код,
			|	ТЧ.Количество,
			|	ТЧ.Цена,
			|	ТЧ.Сумма,
			|	ТЧ.СтавкаНДС,
			|	ТЧ.СуммаНДС,
			|	"""",
			|	"""",
			|	ТЧ.Ссылка.СуммаВключаетНДС,
			|	ТЧ.Ссылка.УчитыватьНДС,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|	"""",
			|	0,
			|	0,
			|	ИСТИНА,
			|	4
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ТЧ
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка" + ТЧПолучитьТекстЗапросаТара(ФормированиеСФ) + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	НомерСтроки";
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаСчетФактураВыданный()
			
			ТекстЗапроса=
			"ВЫБРАТЬ
			|	СчетФактураВыданныйАвансы.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(СчетФактураВыданныйАвансы.Содержание, 1, 10) <> """" Тогда СчетФактураВыданныйАвансы.Содержание
			|		КОГДА СчетФактураВыданныйАвансы.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка) и 
			|           ПОДСТРОКА(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное, 1, 10) <> """"
			|			Тогда СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное
			|		КОГДА СчетФактураВыданныйАвансы.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)  
			|			Тогда СчетФактураВыданныйАвансы.Номенклатура.Наименование
			|	Иначе ""Предварительная оплата""
			|	КОНЕЦ КАК Номенклатура,
			|	СчетФактураВыданныйАвансы.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	СчетФактураВыданныйАвансы.Номенклатура.Код КАК КодНоменклатуры,
			|	0 как Количество,
			|	0 как Цена,
			|	СчетФактураВыданныйАвансы.Сумма,
			|	СчетФактураВыданныйАвансы.СтавкаНДС,
			|	СчетФактураВыданныйАвансы.СуммаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	Истина КАК СуммаВключаетНДС,
			|	Истина КАК УчитыватьНДС,
			|	""""  КАК ЕдиницаИзмерения,
			|	""""  КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0  как КоличествоМест,
			|	Истина КАК ЭтоУслуга
			|ИЗ
			|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
			|ГДЕ
			|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";		  
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаСчетНаоплатуПокупателю()
			
			ТекстЗапроса=
			"ВЫБРАТЬ
			|	Подзапрос.НомерСтроки КАК НомерСтроки,
			|	Подзапрос.Номенклатура,
			|	Подзапрос.НоменклатураСсылка,
			|  	Подзапрос.КодНоменклатуры, 
			|	Подзапрос.Количество,
			|	Подзапрос.Цена,
			|	Подзапрос.Сумма,
			|	Подзапрос.СтавкаНДС,
			|	Подзапрос.СуммаНДС,
			|	Подзапрос.НомерГТД,
			|	Подзапрос.СтранаПроисхождения,
			|	Подзапрос.СуммаВключаетНДС,
			|	Подзапрос.УчитыватьНДС,
			|	Подзапрос.ЕдиницаИзмерения,
			|	Подзапрос.КодЕдиницыИзмерения,
			|	Подзапрос.ВидУпаковки,
			|	Подзапрос.КоличествоВОдномМесте,
			|	Подзапрос.КоличествоМест,
			|	Подзапрос.ЭтоУслуга,
			|	Подзапрос.порядок КАК порядок
			|ИЗ
			|	(ВЫБРАТЬ
			|		"""" КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(СчетНаОплатуТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда СчетНаОплатуТовары.Номенклатура.Наименование
			|			ИНАЧЕ СчетНаОплатуТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		СчетНаОплатуТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|   	СчетНаОплатуТовары.Номенклатура.Код КАК КодНоменклатуры,
			|		СчетНаОплатуТовары.Количество КАК Количество,
			|		СчетНаОплатуТовары.Цена КАК Цена,
			|		СчетНаОплатуТовары.Сумма КАК Сумма,
			|		СчетНаОплатуТовары.СтавкаНДС КАК СтавкаНДС,
			|		СчетНаОплатуТовары.СуммаНДС КАК СуммаНДС,
			|      """" КАК НомерГТД,
			|      """" КАК СтранаПроисхождения,
			|		СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		СчетНаОплатуТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		СчетНаОплатуТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		СчетНаОплатуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|      """" КАК ВидУпаковки,
			|      """" КАК КоличествоВОдномМесте,
			|      """" КАК КоличествоМест, 
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
			|	ГДЕ
			|		СчетНаОплатуТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		"""" КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(СчетНаОплатуУслуги.Содержание, 1, 10) = """"
			|				Тогда СчетНаОплатуУслуги.Номенклатура.Наименование
			|			ИНАЧЕ СчетНаОплатуУслуги.Содержание
			|		КОНЕЦ,
			|		СчетНаОплатуУслуги.Номенклатура.Ссылка,
			|   	СчетНаОплатуУслуги.Номенклатура.Код,
			|		СчетНаОплатуУслуги.Количество,
			|		СчетНаОплатуУслуги.Цена,
			|		СчетНаОплатуУслуги.Сумма,
			|		СчетНаОплатуУслуги.СтавкаНДС,
			|		СчетНаОплатуУслуги.СуммаНДС,
			|      """" КАК НомерГТД,
			|      """" КАК СтранаПроисхождения,
			|		СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС,
			|		СчетНаОплатуУслуги.Ссылка.УчитыватьНДС,
			|		СчетНаОплатуУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		СчетНаОплатуУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|      """" КАК ВидУпаковки,
			|      """" КАК КоличествоВОдномМесте,
			|      """" КАК КоличествоМест, 
			|		Истина,
			|		2
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
			|	ГДЕ
			|		СчетНаОплатуУслуги.Ссылка = &Ссылка) КАК Подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок";		  
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаКорректировкаРеализации()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	Подзапрос.НомерСтроки КАК НомерСтроки,
			|	Подзапрос.Номенклатура,
			|	Подзапрос.НоменклатураСсылка,
			|   Подзапрос.КодНоменклатуры,
			|	Подзапрос.Количество,
			|	Подзапрос.Цена,
			|	Подзапрос.Сумма,
			|	Подзапрос.СтавкаНДС,
			|	Подзапрос.СуммаНДС,
			|	Подзапрос.НомерГТД,
			|	Подзапрос.СтранаПроисхождения,
			|	Подзапрос.СуммаВключаетНДС,
			|	Подзапрос.УчитыватьНДС,
			|	Подзапрос.ЕдиницаИзмерения,
			|	КодЕдиницыИзмерения как КодЕдиницыИзмерения,
			|	"""" как ВидУпаковки,
			|	0 как КоличествоВОдномМесте,
			|	0 как КоличествоМест,
			|	Подзапрос.ЭтоУслуга,
			|	Подзапрос.порядок КАК порядок
			|ИЗ
			|	(ВЫБРАТЬ
			|		КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда КорректировкаРеализацииТовары.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		КорректировкаРеализацииТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|   	КорректировкаРеализацииТовары.Номенклатура.Код КАК КодНоменклатуры,
			|		КорректировкаРеализацииТовары.Количество КАК Количество,
			|		КорректировкаРеализацииТовары.Цена КАК Цена,
			|		КорректировкаРеализацииТовары.Сумма КАК Сумма,
			|		КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
			|		КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
			|		КорректировкаРеализацииТовары.НомерГТД КАК НомерГТД,
			|		КорректировкаРеализацииТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|		КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		КорректировкаРеализацииТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок
			|	ИЗ
			|		Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|	ГДЕ
			|		КорректировкаРеализацииТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииУслуги.Содержание
			|		КОНЕЦ,
			|		КорректировкаРеализацииУслуги.Номенклатура.Ссылка,
			|   	КорректировкаРеализацииУслуги.Номенклатура.Код,
			|		КорректировкаРеализацииУслуги.Количество,
			|		КорректировкаРеализацииУслуги.Цена,
			|		КорректировкаРеализацииУслуги.Сумма,
			|		КорректировкаРеализацииУслуги.СтавкаНДС,
			|		КорректировкаРеализацииУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		2
			|	ИЗ
			|		Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|	ГДЕ
			|		КорректировкаРеализацииУслуги.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииАгентскиеУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииАгентскиеУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииАгентскиеУслуги.Содержание
			|		КОНЕЦ,
			|   	КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Ссылка,
			|   	КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Код,
			|		КорректировкаРеализацииАгентскиеУслуги.Количество,
			|		КорректировкаРеализацииАгентскиеУслуги.Цена,
			|		КорректировкаРеализацииАгентскиеУслуги.Сумма,
			|		КорректировкаРеализацииАгентскиеУслуги.СтавкаНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		3
			|	ИЗ
			|		Документ.КорректировкаРеализации.АгентскиеУслуги КАК КорректировкаРеализацииАгентскиеУслуги
			|	ГДЕ
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка = &Ссылка) КАК Подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаИКСФ()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	Подзапрос.НомерСтроки КАК НомерСтроки,
			|	Подзапрос.Номенклатура,
			|	Подзапрос.НоменклатураСсылка,
			|	"""" КАК КодНоменклатуры,
			|	Подзапрос.Количество,
			|	Подзапрос.Цена,
			|	Подзапрос.Сумма,
			|	Подзапрос.СтавкаНДС,
			|	Подзапрос.СуммаНДС,
			|	Подзапрос.НомерГТД,
			|	Подзапрос.СтранаПроисхождения,
			|	Подзапрос.СуммаВключаетНДС,
			|	Подзапрос.УчитыватьНДС,
			|	Подзапрос.ЕдиницаИзмерения,
			|	Подзапрос.КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0 КАК КоличествоМест,
			|	Подзапрос.ЭтоУслуга,
			|	Подзапрос.порядок КАК порядок,
			|	Подзапрос.КоличествоДоИзменения,
			|	Подзапрос.ЦенаДоИзменения,
			|	Подзапрос.СуммаДоИзменения,
			|	Подзапрос.СтавкаНДСДоИзменения,
			|	Подзапрос.СуммаНДСДоИзменения,
			|	Подзапрос.НомерГТДДоИзменения,
			|	Подзапрос.СтранаПроисхожденияДоИзменения,
			|	Подзапрос.ЕдиницаИзмеренияДоИзменения,
			|	Подзапрос.КодЕдиницыИзмеренияДоИзменения
			|ИЗ
			|	(ВЫБРАТЬ
			|		КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда КорректировкаРеализацииТовары.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		КорректировкаРеализацииТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|		КорректировкаРеализацииТовары.Количество КАК Количество,
			|		КорректировкаРеализацииТовары.Цена КАК Цена,
			|		КорректировкаРеализацииТовары.Сумма КАК Сумма,
			|		КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
			|		КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
			|		КорректировкаРеализацииТовары.НомерГТД КАК НомерГТД,
			|		КорректировкаРеализацииТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|		КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		КорректировкаРеализацииТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияДоИзменения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияДоИзменения,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок,
			|		КорректировкаРеализацииТовары.КоличествоДоКорректировки КАК КоличествоДоИзменения,
			|		КорректировкаРеализацииТовары.ЦенаДоКорректировки КАК ЦенаДоИзменения,
			|		КорректировкаРеализацииТовары.СуммаДоКорректировки КАК СуммаДоИзменения,
			|		КорректировкаРеализацииТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииТовары.СуммаНДСДоКорректировки КАК СуммаНДСДоИзменения,
			|		КорректировкаРеализацииТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
			|		КорректировкаРеализацииТовары.НомерГТДДоИзменения КАК НомерГТДДоИзменения
			|	ИЗ
			|		Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|	ГДЕ
			|		КорректировкаРеализацииТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииУслуги.Содержание
			|		КОНЕЦ,
			|		КорректировкаРеализацииУслуги.Номенклатура.Ссылка,
			|		КорректировкаРеализацииУслуги.Количество,
			|		КорректировкаРеализацииУслуги.Цена,
			|		КорректировкаРеализацииУслуги.Сумма,
			|		КорректировкаРеализацииУслуги.СтавкаНДС,
			|		КорректировкаРеализацииУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		2,
			|		КорректировкаРеализацииУслуги.КоличествоДоКорректировки,
			|		КорректировкаРеализацииУслуги.ЦенаДоКорректировки,
			|		КорректировкаРеализацииУслуги.СуммаДоКорректировки,
			|		КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииУслуги.СуммаНДСДоКорректировки,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|	ГДЕ
			|		КорректировкаРеализацииУслуги.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииАгентскиеУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииАгентскиеУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииАгентскиеУслуги.Содержание
			|		КОНЕЦ,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Ссылка,
			|		КорректировкаРеализацииАгентскиеУслуги.Количество,
			|		КорректировкаРеализацииАгентскиеУслуги.Цена,
			|		КорректировкаРеализацииАгентскиеУслуги.Сумма,
			|		КорректировкаРеализацииАгентскиеУслуги.СтавкаНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		3,
			|		КорректировкаРеализацииАгентскиеУслуги.КоличествоДоКорректировки,
			|		КорректировкаРеализацииАгентскиеУслуги.ЦенаДоКорректировки,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаДоКорректировки,
			|		КорректировкаРеализацииАгентскиеУслуги.СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаНДСДоКорректировки,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Документ.КорректировкаРеализации.АгентскиеУслуги КАК КорректировкаРеализацииАгентскиеУслуги
			|	ГДЕ
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка = &Ссылка) КАК Подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаКСФ()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	Подзапрос.НомерСтроки КАК НомерСтроки,
			|	Подзапрос.Номенклатура,
			|	Подзапрос.НоменклатураСсылка,
			|	Подзапрос.Количество,
			|	Подзапрос.Цена,
			|	Подзапрос.Сумма,
			|	Подзапрос.СтавкаНДС,
			|	Подзапрос.СуммаНДС,
			|	Подзапрос.НомерГТД,
			|	Подзапрос.СтранаПроисхождения,
			|	Подзапрос.СуммаВключаетНДС,
			|	Подзапрос.УчитыватьНДС,
			|	Подзапрос.ЕдиницаИзмерения,
			|	Подзапрос.КодЕдиницыИзмерения,
			|	"""" как ВидУпаковки,
			|	0 как КоличествоВОдномМесте,
			|	0 как КоличествоМест,
			|	Подзапрос.ЭтоУслуга,
			|	Подзапрос.порядок КАК порядок,
			|	Подзапрос.КоличествоДоИзменения,
			|	Подзапрос.ЦенаДоИзменения,
			|	Подзапрос.СуммаДоИзменения,
			|	Подзапрос.СтавкаНДСДоИзменения,
			|	Подзапрос.СуммаНДСДоИзменения,
			|	Подзапрос.НомерГТДДоИзменения,
			|	Подзапрос.СтранаПроисхожденияДоИзменения,
			|	Подзапрос.ЕдиницаИзмеренияДоИзменения,
			|	Подзапрос.КодЕдиницыИзмеренияДоИзменения
			|ИЗ
			|	(ВЫБРАТЬ
			|		КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда КорректировкаРеализацииТовары.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		КорректировкаРеализацииТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|		КорректировкаРеализацииТовары.Количество КАК Количество,
			|		КорректировкаРеализацииТовары.Цена КАК Цена,
			|		КорректировкаРеализацииТовары.Сумма КАК Сумма,
			|		КорректировкаРеализацииТовары.СтавкаНДС КАК СтавкаНДС,
			|		КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДС,
			|		КорректировкаРеализацииТовары.НомерГТД КАК НомерГТД,
			|		КорректировкаРеализацииТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|		КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		КорректировкаРеализацииТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмеренияДоИзменения,
			|		КорректировкаРеализацииТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмеренияДоИзменения,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок,
			|		КорректировкаРеализацииТовары.КоличествоДоИзменения КАК КоличествоДоИзменения,
			|		КорректировкаРеализацииТовары.ЦенаДоИзменения КАК ЦенаДоИзменения,
			|		КорректировкаРеализацииТовары.СуммаДоИзменения КАК СуммаДоИзменения,
			|		КорректировкаРеализацииТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииТовары.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
			|		КорректировкаРеализацииТовары.СтранаПроисхожденияДоИзменения КАК СтранаПроисхожденияДоИзменения,
			|		КорректировкаРеализацииТовары.НомерГТДДоИзменения КАК НомерГТДДоИзменения
			|	ИЗ
			|		Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|	ГДЕ
			|		КорректировкаРеализацииТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииУслуги.Содержание
			|		КОНЕЦ,
			|		КорректировкаРеализацииУслуги.Номенклатура.Ссылка,
			|		КорректировкаРеализацииУслуги.Количество,
			|		КорректировкаРеализацииУслуги.Цена,
			|		КорректировкаРеализацииУслуги.Сумма,
			|		КорректировкаРеализацииУслуги.СтавкаНДС,
			|		КорректировкаРеализацииУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		2,
			|		КорректировкаРеализацииУслуги.КоличествоДоИзменения,
			|		КорректировкаРеализацииУслуги.ЦенаДоИзменения,
			|		КорректировкаРеализацииУслуги.СуммаДоИзменения,
			|		КорректировкаРеализацииУслуги.СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги
			|	ГДЕ
			|		КорректировкаРеализацииУслуги.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КорректировкаРеализацииАгентскиеУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(КорректировкаРеализацииАгентскиеУслуги.Содержание, 1, 10) = """"
			|				Тогда КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Наименование
			|			ИНАЧЕ КорректировкаРеализацииАгентскиеУслуги.Содержание
			|		КОНЕЦ,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.Ссылка,
			|		КорректировкаРеализацииАгентскиеУслуги.Количество,
			|		КорректировкаРеализацииАгентскиеУслуги.Цена,
			|		КорректировкаРеализацииАгентскиеУслуги.Сумма,
			|		КорректировкаРеализацииАгентскиеУслуги.СтавкаНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.СуммаВключаетНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка.УчитыватьНДС,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		КорректировкаРеализацииАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		Истина,
			|		3,
			|		КорректировкаРеализацииАгентскиеУслуги.КоличествоДоИзменения,
			|		КорректировкаРеализацииАгентскиеУслуги.ЦенаДоИзменения,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаДоИзменения,
			|		КорректировкаРеализацииАгентскиеУслуги.СтавкаНДСДоИзменения,
			|		КорректировкаРеализацииАгентскиеУслуги.СуммаНДСДоИзменения,
			|		NULL,
			|		NULL
			|	ИЗ
			|		Документ.КорректировкаРеализации.АгентскиеУслуги КАК КорректировкаРеализацииАгентскиеУслуги
			|	ГДЕ
			|		КорректировкаРеализацииАгентскиеУслуги.Ссылка = &Ссылка) КАК Подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаОказаниеУслуг()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.Наименование
			|		ИНАЧЕ ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|   ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.Код КАК КодНоменклатуры,
			|	ОказаниеУслугКонтрагенты.Количество КАК Количество,
			|	ОказаниеУслугКонтрагенты.Цена КАК Цена,
			|	ОказаниеУслугКонтрагенты.Сумма КАК Сумма,
			|	ОказаниеУслугКонтрагенты.Ссылка.СтавкаНДС КАК СтавкаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	ОказаниеУслугКонтрагенты.Ссылка.СуммаВключаетНДС КАК суммаВключаетНДС,
			|	ОказаниеУслугКонтрагенты.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	ОказаниеУслугКонтрагенты.Ссылка.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ОказаниеУслугКонтрагенты.ссылка.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0  как КоличествоМест,
			|	Истина КАК ЭтоУслуга,
			|	ОказаниеУслугКонтрагенты.СуммаНДС
			|ИЗ
			|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
			|ГДЕ
			|	ОказаниеУслугКонтрагенты.Ссылка = &Ссылка
			|	И ОказаниеУслугКонтрагенты.СчетФактура = &СчетФактура";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаАктОбОказанииПроизводственныхУслуг()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	АктОбОказанииПроизводственныхУслугУслуги.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Наименование
			|		ИНАЧЕ АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.Код КАК КодНоменклатуры,
			|	АктОбОказанииПроизводственныхУслугУслуги.Количество,
			|	АктОбОказанииПроизводственныхУслугУслуги.Цена,
			|	АктОбОказанииПроизводственныхУслугУслуги.Сумма,
			|	АктОбОказанииПроизводственныхУслугУслуги.СтавкаНДС,
			|	АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС,
			|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка.СуммаВключаетНДС,
			|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка.УчитыватьНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	АктОбОказанииПроизводственныхУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0  как КоличествоМест,
			|	Истина КАК ЭтоУслуга
			|ИЗ
			|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
			|ГДЕ
			|	АктОбОказанииПроизводственныхУслугУслуги.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаОтчетКомиссионераОПродажах()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.НомерСтроки,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.НоменклатураСсылка,
			|	ВложенныйЗапрос.КодНоменклатуры,
			|	ВложенныйЗапрос.Количество,
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Сумма,
			|	ВложенныйЗапрос.СтавкаНДС,
			|	ВложенныйЗапрос.НомерГТД,
			|	ВложенныйЗапрос.СтранаПроисхождения,
			|	ВложенныйЗапрос.СуммаВключаетНДС,
			|	ВложенныйЗапрос.УчитыватьНДС,
			|	ВложенныйЗапрос.ЕдиницаИзмерения,
			|	ВложенныйЗапрос.КодЕдиницыИзмерения,
			|	ВложенныйЗапрос.ВидУпаковки,
			|	ВложенныйЗапрос.КоличествоВОдномМесте,
			|	ВложенныйЗапрос.КоличествоМест,
			|	ВложенныйЗапрос.ЭтоУслуга,
			|	ВложенныйЗапрос.Порядок,
			|	ВложенныйЗапрос.СуммаНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки,
			|			ВЫБОР
			|				КОГДА ПОДСТРОКА(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|					Тогда ОтчетКомиссионераОПродажахТовары.Номенклатура.Наименование
			|				ИНАЧЕ ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное
			|			КОНЕЦ КАК Номенклатура,
			|			ОтчетКомиссионераОПродажахТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|			ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК КодНоменклатуры,
			|			ОтчетКомиссионераОПродажахТовары.Количество КАК Количество,
			|			ОтчетКомиссионераОПродажахТовары.Цена КАК Цена,
			|			ОтчетКомиссионераОПродажахТовары.Сумма КАК Сумма,
			|			ОтчетКомиссионераОПродажахТовары.СтавкаНДС КАК СтавкаНДС,
			|			ОтчетКомиссионераОПродажахТовары.НомерГТД КАК НомерГТД,
			|			ОтчетКомиссионераОПродажахТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|			ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|			ОтчетКомиссионераОПродажахТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|			ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|			ОтчетКомиссионераОПродажахТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|			ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения КАК ВидУпаковки,
			|			ОтчетКомиссионераОПродажахТовары.Коэффициент КАК КоличествоВОдномМесте,
			|			ОтчетКомиссионераОПродажахТовары.КоличествоМест КАК КоличествоМест,
			|			Ложь КАК ЭтоУслуга,
			|			1 КАК Порядок,
			|			ОтчетКомиссионераОПродажахТовары.СуммаНДС КАК СуммаНДС,
			|			ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки
			|		ИЗ
			|			Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|		ГДЕ
			|			ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			ОтчетКомиссионераОПродажахУслуги.НомерСтроки,
			|			ВЫБОР
			|				КОГДА ПОДСТРОКА(ОтчетКомиссионераОПродажахУслуги.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|					Тогда ОтчетКомиссионераОПродажахУслуги.Номенклатура.Наименование
			|				ИНАЧЕ ОтчетКомиссионераОПродажахУслуги.Номенклатура.НаименованиеПолное
			|			КОНЕЦ,
			|			ОтчетКомиссионераОПродажахУслуги.Номенклатура.Ссылка,
			|			ОтчетКомиссионераОПродажахУслуги.Номенклатура.Код,
			|			ОтчетКомиссионераОПродажахУслуги.Количество,
			|			ОтчетКомиссионераОПродажахУслуги.Цена,
			|			ОтчетКомиссионераОПродажахУслуги.Сумма,
			|			ОтчетКомиссионераОПродажахУслуги.СтавкаНДС,
			|			"""",
			|			"""",
			|			ОтчетКомиссионераОПродажахУслуги.Ссылка.СуммаВключаетНДС,
			|			ОтчетКомиссионераОПродажахУслуги.Ссылка.УчитыватьНДС,
			|			ОтчетКомиссионераОПродажахУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|			ОтчетКомиссионераОПродажахУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|			"""",
			|			0,
			|			0,
			|			Истина,
			|			2,
			|			ОтчетКомиссионераОПродажахУслуги.СуммаНДС,
			|			ОтчетКомиссионераОПродажахУслуги.КлючСтроки
			|		ИЗ
			|			Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
			|		ГДЕ
			|			ОтчетКомиссионераОПродажахУслуги.Ссылка = &Ссылка) КАК ВложенныйЗапрос
			|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВложенныйЗапрос.КлючСтроки
			|ГДЕ
			|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаОтчетОЗакупках()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	Товары.Количество,
			|	Товары.ЕдиницаИзмерения,
			|	Товары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
			|	Товары.Номенклатура.НомерГТД КАК НомерГТД,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.Ссылка.СуммаВключаетНДС,
			|	Товары.Номенклатура.Услуга КАК ЭтоУслуга,
			|	Товары.Номенклатура.Код КАК КодНоменклатуры,
			|	Товары.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" КАК КоличествоМест,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(Товары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			ТОГДА Товары.Номенклатура.Наименование
			|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	Товары.Номенклатура КАК НоменклатураСсылка,
			|	Товары.Цена КАК Цена,
			|	Товары.Сумма КАК Сумма
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК Поставщики
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах.Товары КАК Товары
			|		ПО Поставщики.Ссылка = Товары.Ссылка
			|			И Поставщики.КлючСтроки = Товары.КлючСтроки
			|ГДЕ
			|	Поставщики.Ссылка = &Ссылка
			|	И Поставщики.СчетФактура = &СчетФактура";
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаОтчетКомитентуОПродажах()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	Подзапрос.Сумма,
			|	Подзапрос.СуммаНДС,
			|	Подзапрос.Количество,
			|	Подзапрос.Цена,
			|	Подзапрос.НомерГТД,
			|	Подзапрос.СтранаПроисхождения,
			|	Подзапрос.СуммаВключаетНДС,
			|	Подзапрос.ЕдиницаИзмерения,
			|	"""" КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0  как КоличествоМест,
			|	Подзапрос.ЭтоУслуга,
			|	ВЫБОР
			|		КОГДА Подзапрос.Номенклатура = ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка)
			|			Тогда ""Комиссионное вознаграждение""
			|		КОГДА ПОДСТРОКА(Подзапрос.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда Подзапрос.Номенклатура.Наименование
			|		ИНАЧЕ Подзапрос.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	Подзапрос.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ВЫБОР
			|		КОГДА Подзапрос.Номенклатура = ЗНАЧЕНИЕ(Справочник.номенклатура.ПустаяСсылка)
			|			Тогда """"
			|		КОГДА ПОДСТРОКА(Подзапрос.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда Подзапрос.Номенклатура.Наименование
			|		ИНАЧЕ Подзапрос.Номенклатура.Код 
			|	КОНЕЦ КАК КодНоменклатуры,
			|	Подзапрос.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(ОтчетКомитентуОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|		СУММА(ОтчетКомитентуОПродажахТовары.СуммаНДСВознаграждения) КАК СуммаНДС,
			|		ОтчетКомитентуОПродажахТовары.Ссылка.УслугаПоВознаграждению КАК Номенклатура,
			|		ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка,
			|		0 КАК Количество,
			|		"""" КАК Цена,
			|		"""" КАК НомерГТД,
			|		"""" КАК СтранаПроисхождения,
			|		ОтчетКомитентуОПродажахТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		"""" КАК ЕдиницаИзмерения,
			|		Истина КАК ЭтоУслуга
			|	ИЗ
			|		Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
			|	ГДЕ
			|		ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ОтчетКомитентуОПродажахТовары.Ссылка,
			|		ОтчетКомитентуОПродажахТовары.Ссылка.УслугаПоВознаграждению,
			|		ОтчетКомитентуОПродажахТовары.Ссылка.СуммаВключаетНДС) КАК Подзапрос";				
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаВозвратТоваровПоставщику()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование
			|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ВозвратТоваровПоставщикуТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК КодНоменклатуры,
			|	ВозвратТоваровПоставщикуТовары.Количество,
			|	ВозвратТоваровПоставщикуТовары.Цена,
			|	ВозвратТоваровПоставщикуТовары.Сумма,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
			|	ВозвратТоваровПоставщикуТовары.НомерГТД,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС,
			|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения,
			|	ВозвратТоваровПоставщикуТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения КАК ВидУпаковки,
			|	ВозвратТоваровПоставщикуТовары.Коэффициент КАК КоличествоВОдномМесте,
			|	ВозвратТоваровПоставщикуТовары.КоличествоМест,
			|	ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ВозвратТоваровПоставщикуТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	Ложь КАК ЭтоУслуга
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			|ГДЕ
			|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";				
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаОтражениеНачисленияНДС()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	ОтражениеНачисленияНДС.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|	Когда ОтражениеНачисленияНДС.Номенклатура ссылка справочник.ОбъектыСтроительства
			|	Тогда ОтражениеНачисленияНДС.Номенклатура.наименование
			|		КОГДА ПОДСТРОКА(ОтражениеНачисленияНДС.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда ОтражениеНачисленияНДС.Номенклатура.Наименование
			|		ИНАЧЕ ОтражениеНачисленияНДС.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ОтражениеНачисленияНДС.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ОтражениеНачисленияНДС.Номенклатура.Код КАК КодНоменклатуры,
			|	ОтражениеНачисленияНДС.Количество,
			|	ОтражениеНачисленияНДС.Цена,
			|	ОтражениеНачисленияНДС.Сумма,
			|	ОтражениеНачисленияНДС.СтавкаНДС,
			|	ОтражениеНачисленияНДС.НомерГТД,
			|	ОтражениеНачисленияНДС.СтранаПроисхождения,
			|	ОтражениеНачисленияНДС.СуммаНДС,
			|	ОтражениеНачисленияНДС.Номенклатура.БазоваяЕдиницаИзмерения как ЕдиницаИзмерения,
			|	ОтражениеНачисленияНДС.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" как КоличествоМест,
			|	ОтражениеНачисленияНДС.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	Истина КАК УчитыватьНДС,
			|	ОтражениеНачисленияНДС.Номенклатура.Услуга КАК ЭтоУслуга
			|ИЗ
			|	Документ.ОтражениеНачисленияНДС.ТоварыИУслуги КАК ОтражениеНачисленияНДС
			|ГДЕ
			|	ОтражениеНачисленияНДС.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";				
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаРеализацияУслугПопереработке()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	РеализацияУслугПоПереработкеУслуги.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(РеализацияУслугПоПереработкеУслуги.Содержание, 1, 10) = """"
			|			Тогда РеализацияУслугПоПереработкеУслуги.Номенклатура.Наименование
			|		ИНАЧЕ РеализацияУслугПоПереработкеУслуги.Содержание
			|	КОНЕЦ КАК Номенклатура,
			|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	РеализацияУслугПоПереработкеУслуги.Номенклатура.Код КАК КодНоменклатуры,
			|	РеализацияУслугПоПереработкеУслуги.Количество,
			|	РеализацияУслугПоПереработкеУслуги.Цена,
			|	РеализацияУслугПоПереработкеУслуги.Сумма,
			|	РеализацияУслугПоПереработкеУслуги.СтавкаНДС,
			|	РеализацияУслугПоПереработкеУслуги.СуммаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	РеализацияУслугПоПереработкеУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	РеализацияУслугПоПереработкеУслуги.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	РеализацияУслугПоПереработкеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0  как КоличествоМест,
			|	Истина КАК ЭтоУслуга
			|ИЗ
			|	Документ.РеализацияУслугПоПереработке.Услуги КАК РеализацияУслугПоПереработкеУслуги
			|ГДЕ
			|	РеализацияУслугПоПереработкеУслуги.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";				
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаПередачаОС()
			
			ТекстЗапроса=	
			"ВЫБРАТЬ
			|	ПередачаОС.НомерСтроки КАК НомерСтроки,
			|	ПередачаОС.ОсновноеСредство.Наименование КАК Номенклатура,
			|	ПередачаОС.ОсновноеСредство.Ссылка КАК НоменклатураСсылка,
			|	ПередачаОС.ОсновноеСредство.Код КАК КодНоменклатуры,
			|	ПередачаОС.Количество,
			|	ПередачаОС.Цена,
			|	ПередачаОС.Сумма,
			|	ПередачаОС.СтавкаНДС,
			|	ПередачаОС.СуммаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	ПередачаОС.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ПередачаОС.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	ПередачаОС.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПередачаОС.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	0 КАК КоличествоМест,
			|	Ложь КАК ЭтоУслуга
			|ИЗ
			|	Документ.ПередачаОС.ОС КАК ПередачаОС
			|ГДЕ
			|	ПередачаОС.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";				
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаТара(ФормированиеСФ)
			
			Если ФормированиеСФ Тогда
				Возврат "";
			КонецЕсли;
			
			Возврат 
			
			РазделительОбъединенияЗапросов() + 
			
			"ВЫБРАТЬ
			|	ТЧ.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ТЧ.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			ТОГДА ТЧ.Номенклатура.Наименование
			|		ИНАЧЕ ТЧ.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ТЧ.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ТЧ.Номенклатура.Код КАК КодНоменклатуры,
			|	ТЧ.Количество КАК Количество,
			|	ТЧ.Цена КАК Цена,
			|	ТЧ.Сумма КАК Сумма,
			|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
			|	0 КАК СуммаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	ТЧ.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ТЧ.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТЧ.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" КАК КоличествоМест,
			|	ЛОЖЬ КАК ЭтоУслуга,
			|	2 КАК Порядок
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТЧ
			|ГДЕ
			|	ТЧ.Ссылка = &Ссылка"    ;
			
		КонецФункции 
		
		Функция ТЧПолучитьТекстЗапроса(Документ, СчетФактура, ЭтоКСФ)
			
			ТекстЗапроса=	"";
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Возврат ТЧПолучитьТекстЗапросаРеализацияТоваровУслуг(НЕ СчетФактура = Неопределено);
				
			ИначеЕсли ЭтоКСФ = Ложь И Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено И ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаКорректировкаРеализации();
				
			ИначеЕсли ЭтоКСФ = Истина И Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено И ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Если Строка(Документ.ВидОперации) = "Исправление в первичных документах" Тогда
					Возврат	ТЧПолучитьТекстЗапросаИКСФ();
				ИначеЕсли Строка(Документ.ВидОперации) = "Корректировка по согласованию сторон" Тогда
					Возврат	ТЧПолучитьТекстЗапросаКСФ();
				КонецЕсли;
				
			ИначеЕсли Метаданные.Документы.Найти("ОказаниеУслуг") <> Неопределено И ТипЗнч(Документ) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаОказаниеУслуг();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				
				Возврат ТЧПолучитьТекстЗапросаАктОбОказанииПроизводственныхУслуг();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
				Возврат ТЧПолучитьТекстЗапросаОтчетКомиссионераОПродажах();
				
			ИначеЕсли ТипЗнч(Документ)= Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
				
				Если Документ.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено 
					И Документ.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках 
					И СчетФактура <> Неопределено 
					И ЗначениеЗаполнено(СчетФактура.Продавец) Тогда
					
					Возврат ТЧПолучитьТекстЗапросаОтчетОЗакупках();
				Иначе
					Возврат ТЧПолучитьТекстЗапросаОтчетКомитентуОПродажах();
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаВозвратТоваровПоставщику();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаОтражениеНачисленияНДС();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслугПопереработке") Тогда 
				
				Возврат	ТЧПолучитьТекстЗапросаРеализацияУслугПопереработке();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда 
				
				Возврат	ТЧПолучитьТекстЗапросаПередачаОС();
				
			ИначеЕсли ЭтоСчетФактуранаАванс(СчетФактура) Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаСчетФактураВыданный();
				
			ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.СчетНаоплатуПокупателю") Тогда
				
				Возврат 	ТЧПолучитьТекстЗапросаСчетНаоплатуПокупателю();
				
			КонецЕсли;
			
			Возврат ТекстЗапроса;
			
			ВызватьИсключение "Не удалось сформировать текст запроса к табличной части документа " + Документ;
			
		КонецФункции
		
		Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ) Экспорт
			
			ЗапросТЧ = Новый Запрос;
			ЗапросТЧ.Текст=	ТЧПолучитьТекстЗапроса(ДокументСсылка, СчетФактура, ЭтоКСФ);
			ЗапросТЧ.УстановитьПараметр("СчетФактура", СчетФактура);
			ЗапросТЧ.УстановитьПараметр("Ссылка", ДокументСсылка);
			Возврат ЗапросТЧ.Выполнить();
			
		КонецФункции
		
		Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
			КолонкаКодаТовара=	ПолучитьНаименованиеКолонкиКодаТовара();
			Если ЗначениеЗаполнено(НоменклатураСсылка) И КолонкаКодаТовара <> "Код" Тогда
				Возврат НоменклатураСсылка[КолонкаКодаТовара];
			Иначе 
				Возврат ТекущийКод;
			КонецЕсли;
			
		КонецФункции
		
	//}
	
	//{ ПолучитьДанныеШапки...
		
		Функция ШапкаТекстЗапроса_РеализацияТоваровУслуг()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация КАК Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Контрагент
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.АдресДоставки КАК АдресДоставки,
			|	Т.ВалютаДокумента КАК ВалютаДокумента,
			|	Т.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	Т.УчитыватьНДС КАК УчитыватьНДС
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ВозвратТоваровПоставщику()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Контрагент
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ОтражениеНачисленияНДС()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Контрагент
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	ИСТИНА КАК УчитыватьНДС
			|ИЗ
			|	Документ.ОтражениеНачисленияНДС КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ПередачаОС()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Контрагент
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.ПередачаОС КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_АктОбОказанииПроизводственныхУслуг()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Т.Контрагент,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.АктОбОказанииПроизводственныхУслуг КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ОтчетКомиссионераОПродажах()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	СФ.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА СФ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|						ТОГДА Т.Контрагент
			|					ИНАЧЕ СФ.Контрагент
			|				КОНЕЦ
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СФ
			|		ПО (СФ.Ссылка = &СчетФактура)
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ОтчетКомитентуОПродажах()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Т.Контрагент,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_РеализацияУслугПоПереработке()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Т.Контрагент,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.РеализацияУслугПоПереработке КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_СчетФактураВыданный()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	"""" КАК Грузоотправитель,
			|	Т.Контрагент,
			|	"""" КАК Грузополучатель,
			|	"""" КАК АдресДоставки,
			|	Т.ВалютаДокумента,
			|	ИСТИНА КАК СуммаВключаетНДС,
			|	ИСТИНА КАК УчитыватьНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК Т
			|ГДЕ
			|	Т.Ссылка = &СчетФактура"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ОтчетКомитентуОПродажах_ОтчетОЗакупках()
			
			Возврат
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ТЧ.Поставщик КАК Организация,
			|	ВЫБОР
			|		КОГДА ТЧ.Партия.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ТЧ.Поставщик
			|		ИНАЧЕ ТЧ.Партия.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент КАК Контрагент,
			|	ВЫБОР
			|		КОГДА ТЧ.Партия.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Организация
			|		ИНАЧЕ ТЧ.Партия.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.ВалютаДокумента КАК ВалютаДокумента,
			|	Т.Организация КАК Агент,
			|	Т.ДоговорКонтрагента КАК ДоговорАгента,
			|	ИСТИНА КАК СуммаВключаетНДС,
			|	ИСТИНА КАК УчитыватьНДС,
			|	ТЧ.Поставщик.ОсновнойБанковскийСчет КАК БанковскийСчетОрганизации
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах.Поставщики КАК ТЧ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах КАК Т
			|		ПО ТЧ.Ссылка = Т.Ссылка
			|ГДЕ
			|	ТЧ.Ссылка = &ДокументСсылка
			|	И ТЧ.СчетФактура = &СчетФактура"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_ОказаниеУслуг()
			
			Возврат
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТЧ.Контрагент,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС,
			|	ТЧ.ДоговорКонтрагента
			|ИЗ
			|	Документ.ОказаниеУслуг КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг.Контрагенты КАК ТЧ
			|		ПО Т.Ссылка = ТЧ.Ссылка
			|			И (ТЧ.СчетФактура = &СчетФактура)
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_КорректировкаРеализации()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА Т.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА ""он же""
			|		ИНАЧЕ Т.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	Т.Контрагент,
			|	ВЫБОР
			|		КОГДА Т.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА Т.Контрагент
			|		ИНАЧЕ Т.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	Т.АдресДоставки,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.КорректировкаРеализации КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса_СчетНаОплатуПокупателю()
			
			Возврат
			
			"ВЫБРАТЬ
			|	Т.Организация,
			|	Т.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	"+?(СуществуетОбъектМетаданных("Документ.СчетНаОплатуПокупателю.Реквизит.ОрганизацияПолучатель"), "Т.ОрганизацияПолучатель,", "")+"
			|	Т.Контрагент,
			|	Т.ВалютаДокумента,
			|	Т.СуммаВключаетНДС,
			|	Т.УчитыватьНДС
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю КАК Т
			|ГДЕ
			|	Т.Ссылка = &ДокументСсылка"
			
		КонецФункции
		
		Функция ШапкаТекстЗапроса(ДокументСсылка, СчетФактура)
			
			Если ЭтоСчетФактуранаАванс(СчетФактура) = Истина Тогда
				
				ТекстЗапроса= ШапкаТекстЗапроса_СчетФактураВыданный();
				
			ИначеЕсли ОснованиеОтчетКомитентаОПродажах_ОтчетОЗакупках(ДокументСсылка, СчетФактура) = Истина Тогда
				
				ТекстЗапроса= ШапкаТекстЗапроса_ОтчетКомитентуОПродажах_ОтчетОЗакупках();
				
			Иначе 	
				
				ТекстЗапроса= Вычислить("ШапкаТекстЗапроса_" + ДокументСсылка.Метаданные().Имя + "()");
				
			КонецЕсли;	
			
			Возврат ТекстЗапроса;
			
		КонецФункции
		
		Функция ПолучитьСтруктуруШапки(ДокументСсылка, СчетФактура = Неопределено) Экспорт
			
			Запрос= Новый Запрос(ШапкаТекстЗапроса(ДокументСсылка, СчетФактура));
			Запрос.УстановитьПараметр("СчетФактура"	  , СчетФактура);
			Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
			
			РезультатЗапроса= Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ВызватьИсключение "Ошибка получения данных шапки, ДокументСсылка - " + ДокументСсылка + ", СчетФактура - " + СчетФактура;
			КонецЕсли;
			
			Выборка= РезультатЗапроса.Выбрать(); Выборка.Следующий();
			
			СтруктураШапки=	Новый Структура;
			
			// Значения по умолчанию для документов, в которых нет указанных полей.
			СтруктураШапки.Вставить("АдресДоставки"	  , "");
			СтруктураШапки.Вставить("Грузоотправитель", "");
			СтруктураШапки.Вставить("Грузополучатель" , "");
			
			Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
				СтруктураШапки.Вставить(Колонка.Имя, Выборка[Колонка.Имя])
			КонецЦикла;
			
			РезультатЗапроса= Неопределено; Выборка= Неопределено;
			
			Если СтруктураШапки.Свойство("ГоловнаяОрганизация") И ЗначениеЗаполнено(СтруктураШапки.ГоловнаяОрганизация) И СтруктураШапки.ГоловнаяОрганизация <> СтруктураШапки.Организация Тогда
				СтруктураШапки.Вставить("Поставщик"		  , СтруктураШапки.ГоловнаяОрганизация);
				СтруктураШапки.Вставить("Грузоотправитель", СтруктураШапки.Организация);
			КонецЕсли;
			
			Если СчетФактура = Неопределено Тогда
				
				СтруктураШапки.Вставить("Дата" , ДокументСсылка.Дата);
				СтруктураШапки.Вставить("Номер", ДокументСсылка.Номер);
				
			Иначе
				
				СтруктураШапки.Вставить("Дата" , СчетФактура.Дата);
				СтруктураШапки.Вставить("Номер", СчетФактура.Номер);
				СтруктураШапки.ВалютаДокумента= ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьВалютуДокумента(СтруктураШапки.ВалютаДокумента, СчетФактура);
				
				Если СчетФактура.Метаданные().Реквизиты.Найти("ИдентификаторГосконтракта") <> Неопределено Тогда
					СтруктураШапки.Вставить("ИдентификаторГосконтракта", СчетФактура.ИдентификаторГосконтракта);
				КонецЕсли;
				
			КонецЕсли;	
			
			СтруктураШапки.Вставить("ДопИнфо", Новый Массив); 
			
			Возврат СтруктураШапки;
			
		КонецФункции
		
	//} ПолучитьДанныеШапки...
	
	//{ ПолучитьДанныеСФ...
		
		Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт
			Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляКСФ(СчетФактура);
		КонецФункции
		
		Функция ПолучитьНомераДляСФ(СчетФактура)  Экспорт 
			
			Если Метаданные.Имя = "БухгалтерияПредприятияКОРП" Тогда
				
				ДанныеДляПечати= Новый Структура;
				
				Если СчетФактура.метаданные().реквизиты.найти("Исправление")<>Неопределено и СчетФактура.исправление Тогда
					ДанныеДляПечати.вставить("НомерДокумента", СчетФактура.НомерИсходногоДокумента);
					ДанныеДляПечати.Вставить("ДатаДокумента", СчетФактура.ДатаИсходногоДокумента);
					ДанныеДляПечати.Вставить("ЭтоИСФ", Истина);
					ДанныеДляПечати.Вставить("НомерИсправления", строка(СчетФактура.НомерИсправления));
					ДанныеДляПечати.Вставить("ДатаИсправления",  СчетФактура.Дата);
				Иначе 
					
					СчетФактураОбъект= СчетФактура.ПолучитьОбъект();
					ОбщиеДанныеДляПечати= СчетФактураОбъект.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
					
					ИндексПодразделения = 0;
					Если ЗначениеЗаполнено(ОбщиеДанныеДляПечати.Подразделение)
						И ОбщиеДанныеДляПечати.Подразделение.ОбособленноеПодразделение Тогда
						КПППодразделения    = ОбщиеДанныеДляПечати.Подразделение.КПП;
						ИндексПодразделения = ОбщиеДанныеДляПечати.Подразделение.ЦифровойИндексОбособленногоПодразделения;			
					ИначеЕсли ОбщегоНазначения.ЭтоОбособленноеПодразделение(ОбщиеДанныеДляПечати.Организация) Тогда
						СведенияОбОрганизации     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОбщиеДанныеДляПечати.Организация, СчетФактураОбъект.Дата);
						КПППодразделения    = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "КПП,", Ложь);
						ИндексПодразделения = ОбщиеДанныеДляПечати.Организация.ЦифровойИндексОбособленногоПодразделения;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбщиеДанныеДляПечати.Номер) Тогда
						ОбщиеДанныеДляПечати.Номер = СчетФактура.Номер;	
					КонецЕсли;
					Если ИндексПодразделения <> 0 Тогда
						ОбщиеДанныеДляПечати.Номер = ОбщиеДанныеДляПечати.Номер + "/" + ИндексПодразделения;
					КонецЕсли;		
					
					ДанныеДляПечати.вставить("НомерДокумента", ОбщегоНазначения.ПолучитьНомерНаПечать(ОбщиеДанныеДляПечати));
					ДанныеДляПечати.Вставить("ДатаДокумента",  СчетФактура.Дата);
					ДанныеДляПечати.Вставить("ЭтоИСФ", Ложь);
					
				КонецЕсли;	
				
				Возврат ДанныеДляПечати;
				
			Иначе
				Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляСФ(СчетФактура);
			КонецЕсли;
			
		КонецФункции
		
		Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
			Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьКПППокупателя(СчетФактура);
		КонецФункции
		
	//} ПолучитьДанныеСФ...
	
//} КОД ДАВНО

//{ ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ
	
	Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
		
		Возврат ЗначениеЗаполнено(СтрокаТаблицы.Грузополучатель) И СтрокаТаблицы.Грузополучатель.ИНН <> СтрокаТаблицы.Покупатель.ИНН;
		
	КонецФункции
	
	Функция ПроверитьТипДокумента(ДокСсылка, НаименованиеТипа)
		Возврат (метаданные.документы.найти(НаименованиеТипа)<>Неопределено) и (ТипЗнч(ДокСсылка)=тип("ДокументСсылка."+НаименованиеТипа))
	КонецФункции	
	
	Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД) Экспорт
		
		Если ЗначениеЗаполнено(ФункцияУПД) Тогда
			
			ТипДокумента = ТипДокументаУПД(ФункцияУПД);
			
			Если ЗначениеЗаполнено(ТипДокумента) Тогда
				Возврат ТипДокумента;
			Иначе
				ТипДокумента = ТипДокументаУКД(ФункцияУПД);
				Если ЗначениеЗаполнено(ТипДокумента) Тогда
					Возврат ТипДокумента;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоСчет ИЛИ ТипЗнч(Док)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Возврат "Счет на оплату";		
		ИначеЕсли ТипЗнч(Док)=тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			ЭтоКСФ = ( строка(Док.ВидСчетаФактуры) = "Корректировочный"); 
			Если ЭтоКСФ Тогда 
				Возврат ?(Док.Исправление, "Исправление КСФ", "Корректировочный СФ");
			Иначе 	
				Возврат  ?( Док.метаданные().реквизиты.найти("Исправление")<>Неопределено и Док.исправление, "Исправление СФ", "Счет-фактура");
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Торг-12", ?(СтрокиНастрек[0].ПечатнаяФормаДляТоваров="", "Торг-12"	, СтрокиНастрек[0].ПечатнаяФормаДляТоваров  ) ); 
		ИначеЕсли (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваровУслуг")) или (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")) или ПроверитьТипДокумента(Док, "КорректировкаРеализации") Тогда 
			//Настройка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Док.Организация);
			РНК = ?(   ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") , Док.ДокументОтгрузки, Док);
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", РНК.Организация));
			Если СтрокиНастрек.количество()=0 Тогда 
				ФормаДляУслуг = "Акт";
				ФормаДляТоваров = "Торг-12";
			иначе 
				ФормаДляТоваров =  ?(СтрокиНастрек[0].ПечатнаяФормаДляТоваров="", "Торг-12" , СтрокиНастрек[0].ПечатнаяФормаДляТоваров);
				ФормаДляУслуг  =   ?(СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ="", "Акт"		, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  );
			КонецЕсли;	
			Возврат ?(РНК.товары.количество()=0 и ( (РНК.Услуги.Количество()>0) или (РНК.АгентскиеУслуги.Количество()>0) ),  ФормаДляУслуг, ФормаДляТоваров);
		ИначеЕсли  (ТипЗнч(Док)=Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))	Тогда
			Возврат ("Акт");
		ИначеЕсли  (ТипЗнч(Док)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")) или   (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияУслугПоПереработке"))  Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Акт", ?(СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ="", "Акт"	, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ) ); 
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда 
			Возврат "Акт сверки"
		Иначе 
			Возврат "";
		КонецЕсли;	
		
	КонецФункции
	
	Функция ПолучитьПараметрыСФ(Док) Экспорт
		
		ПараметрыСФ = Неопределено;
		УчетНДС.ПолучитьПараметрыСчетаФактуры(Док, ВалютаРегламентированногоУчета, ПараметрыСФ);
		
		Возврат ПараметрыСФ;
		
	КонецФункции
	
	Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
		
		СуммаДокумента = Док.СуммаДокумента;
		СуммаУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаУвеличение")<>Неопределено, Док.СуммаУвеличение, 0);
		СуммаУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаУменьшение")<>Неопределено, Док.СуммаУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаУвеличение")) и (СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение) Тогда
				СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаУвеличение = 0, "", "+" + Формат(СуммаУвеличение, "ЧДЦ=2"));
			
			Если (ПараметрыСФ.свойство("СуммаУменьшение")) и ( СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение) Тогда
				СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаУменьшение = 0, "", "-" + Формат(СуммаУменьшение, "ЧДЦ=2"));
			
			Если СуммаУвеличение = 0 И СуммаУменьшение = 0 Тогда
				Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
					СуммаДокумента = ПараметрыСФ.СуммаДокумента;
				КонецЕсли;
				
				Если СуммаДокумента <> 0 Тогда
					Стр1 = Формат(СуммаДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
		
		СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДС")<>Неопределено, Док.СуммаНДС, 0);
		СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДСДокумента")<>Неопределено, Док.СуммаНДСДокумента, 0);
		СуммаНДСУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУвеличение")<>Неопределено, Док.СуммаНДСУвеличение, 0);
		СуммаНДСУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУменьшение")<>Неопределено, Док.СуммаНДСУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаНДСУвеличение")) и ( СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение) Тогда
				СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаНДСУвеличение = 0, "", "+" + Формат(СуммаНДСУвеличение, "ЧДЦ=2"));
			
			Если  (ПараметрыСФ.свойство("СуммаНДСУменьшение")) и (  СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение) Тогда
				СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаНДСУменьшение = 0, "", "-" + Формат(СуммаНДСУменьшение, "ЧДЦ=2"));
			
			Если СуммаНДСУвеличение = 0 И СуммаНДСУменьшение = 0 Тогда
				Если (ПараметрыСФ.свойство("СуммаНДСДокумента")) и  (СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента) Тогда
					СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
				КонецЕсли;
				
				Если СуммаНДСДокумента <> 0 Тогда
					Стр1 = Формат(СуммаНДСДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	//{ Подготовка временных таблиц для списка отправки документов...
	
		Функция ПодготовитьВТ_СпискаОтправкиДокументов(ТипыДокументов, Запрос) Экспорт
			
			МассивВременныхТаблиц= Новый Массив;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 ИЛИ ТипыДокументов = 2 ИЛИ ТипыДокументов = 5 ИЛИ ТипыДокументов = 6 Тогда
				ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц);
				ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
				ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 Тогда
				ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 2 Тогда
				ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 3 Тогда
				ПодготовитьВТ_СчетаНаОплату(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 4 Тогда
				ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Возврат МассивВременныхТаблиц;
			
		КонецФункции
		
		
		Процедура ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.СуммаНДС КАК СуммаНДСЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	Т.ВидСчетаФактуры,
			|	ОтборОрганизации.ФормироватьУПД КАК ОрганизацияФормироватьУПД,
			|	Т.Исправление,
			|	ЕСТЬNULL(ТЧ_ДокументыОснования.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК ДокументОснование
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_ДокументыОснования
			|		ПО (Т.Ссылка = ТЧ_ДокументыОснования.Ссылка)
			|			И (Т.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.СуммаНДС,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	Т.ВидСчетаФактуры,
			|	ОтборОрганизации.ФормироватьУПД,
			|	Т.Исправление,
			|	ЕСТЬNULL(ТЧ_ДокументыОснования.ДокументОснование, НЕОПРЕДЕЛЕНО)
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ТЧ_ДокументыОснования
			|		ПО (Т.Ссылка = ТЧ_ДокументыОснования.Ссылка)
			|			И (Т.Продавец = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТИПЗНАЧЕНИЯ(ВТ_Основная.ДокументОснование) КАК ДокументОснованиеТип
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|ГДЕ
			|	ВТ_Основная.ДокументОснование ЕСТЬ НЕ NULL 
			|	И НЕ ВТ_Основная.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах";
			
			ТекстЗапросаГрузополучатели= "";
			РезультатЗапроса= Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка= РезультатЗапроса.Выбрать();
				РезультатЗапроса= Неопределено;
				
				Пока Выборка.Следующий() Цикл
					
					МетаданныеДокумента= Метаданные.НайтиПоТипу(Выборка.ДокументОснованиеТип);
					
					Если МетаданныеДокумента <> Неопределено И МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено Тогда
						
						ТекстЗапросаГрузополучатели= ТекстЗапросаГрузополучатели + "
						|	
						|	ОБЪЕДИНИТЬ
						|	
						|ВЫБРАТЬ
						|	ВТ_Основная.Документ,
						|	ДанныеДокументаОснования.Грузополучатель
						|ИЗ
						|	ВТ_Основная КАК ВТ_Основная
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+МетаданныеДокумента.ПолноеИмя()+" КАК ДанныеДокументаОснования
						|		ПО ВТ_Основная.ДокументОснование = ДанныеДокументаОснования.Ссылка
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
						|		ПО (ВТ_Основная.Покупатель = ОтборГрузополучатели.Контрагент)
						|			И ДанныеДокументаОснования.Грузополучатель = ОтборГрузополучатели.Грузополучатель";
						
					КонецЕсли;
					
					МетаданныеДокумента= Неопределено;
					
				КонецЦикла;
			КонецЕсли;
			
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Документ,
			|	МАКСИМУМ(ВложенныйЗапрос.Грузополучатель) КАК Грузополучатель
			|ПОМЕСТИТЬ ВТ_Грузополучатели
			|ИЗ
			|	(ВЫБРАТЬ
			|		NULL КАК Документ,
			|		NULL КАК Грузополучатель
			|	ГДЕ
			|		ЛОЖЬ "+ТекстЗапросаГрузополучатели+") КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") = Неопределено Тогда
				
				Запрос.Текст= Запрос.Текст +
				"ВЫБРАТЬ
				|	NULL КАК Документ,
				|	NULL КАК Контрагент
				|ПОМЕСТИТЬ ВТ_КонтрагентыКорректировокОтчетовКомиссионеров
				|ГДЕ
				|	ЛОЖЬ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
				
			Иначе
				
				Запрос.Текст= Запрос.Текст +
				"ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	ОтчетКомиссионераОПродажах.Контрагент
				|ПОМЕСТИТЬ ВТ_КонтрагентыКорректировокОтчетовКомиссионеров
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
				|		ПО ВТ_Основная.ДокументОснование = КорректировкаРеализации.Ссылка
				|			И (КорректировкаРеализации.ДокументРеализации ССЫЛКА Документ.СчетФактураВыданный)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|		ПО (КорректировкаРеализации.ДокументРеализации = СчетФактураВыданный.Ссылка)
				|			И (СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
				|		ПО (СчетФактураВыданный.ДокументОснование = ОтчетКомиссионераОПродажах.Ссылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
				
			КонецЕсли;
			
			
			Запрос.Текст= Запрос.Текст +
			"ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ВТ_Основная.СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ВидСчетаФактуры,
			|	ВТ_Основная.Исправление,
			|	ВТ_Основная.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ДокументОснованиеID,
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ВТ_Основная.ОрганизацияФормироватьУПД) КАК ФормироватьУПД
			|ПОМЕСТИТЬ СЧФ_Основная
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО ВТ_Основная.Покупатель = ОтборКонтрагенты.Контрагент
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Грузополучатели КАК ВТ_Грузополучатели
			|		ПО ВТ_Основная.Документ = ВТ_Грузополучатели.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КонтрагентыКорректировокОтчетовКомиссионеров КАК ВТ_КонтрагентыКорректировокОтчетовКомиссионеров
			|		ПО ВТ_Основная.Документ = ВТ_КонтрагентыКорректировокОтчетовКомиссионеров.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО ВТ_Основная.ДокументОснование = ИдентификаторДокументаВДиадок.Объект
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	НЕ ВТ_Основная.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионераОПродажах
			|	И ВТ_Грузополучатели.Документ ЕСТЬ NULL 
			|	И ВТ_КонтрагентыКорректировокОтчетовКомиссионеров.Документ ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ОтчетКомиссионераОПродажах.Контрагент,
			|	НЕОПРЕДЕЛЕНО,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ВТ_Основная.СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ВидСчетаФактуры,
			|	ВТ_Основная.Исправление,
			|	НЕОПРЕДЕЛЕНО,
			|	"""",
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ВТ_Основная.ОрганизацияФормироватьУПД)
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
			|		ПО ВТ_Основная.ДокументОснование = ОтчетКомиссионераОПродажах.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (ОтчетКомиссионераОПродажах.Контрагент = ОтборКонтрагенты.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_КонтрагентыКорректировокОтчетовКомиссионеров.Контрагент,
			|	НЕОПРЕДЕЛЕНО,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ВТ_Основная.СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ВидСчетаФактуры,
			|	ВТ_Основная.Исправление,
			|	НЕОПРЕДЕЛЕНО,
			|	"""",
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ВТ_Основная.ОрганизацияФормироватьУПД)
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КонтрагентыКорректировокОтчетовКомиссионеров КАК ВТ_КонтрагентыКорректировокОтчетовКомиссионеров
			|		ПО ВТ_Основная.Документ = ВТ_КонтрагентыКорректировокОтчетовКомиссионеров.Документ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (ВТ_КонтрагентыКорректировокОтчетовКомиссионеров.Контрагент = ОтборКонтрагенты.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Грузополучатели.Грузополучатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ВТ_Основная.СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ВидСчетаФактуры,
			|	ВТ_Основная.Исправление,
			|	ВТ_Основная.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборГрузополучатели.CounteragentID,
			|	ЕСТЬNULL(ОтборГрузополучатели.ФормироватьУПД, ВТ_Основная.ОрганизацияФормироватьУПД)
			|ИЗ
			|	ВТ_Грузополучатели КАК ВТ_Грузополучатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Основная КАК ВТ_Основная
			|		ПО ВТ_Грузополучатели.Документ = ВТ_Основная.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
			|		ПО (ВТ_Основная.Покупатель = ОтборГрузополучатели.Контрагент)
			|			И ВТ_Грузополучатели.Грузополучатель = ОтборГрузополучатели.Грузополучатель
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (ВТ_Основная.ДокументОснование = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_КонтрагентыКорректировокОтчетовКомиссионеров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Грузополучатели";
			
			Запрос.Выполнить();
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц) Экспорт
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_РеализацияОтгруженныхТоваров(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_АктОбОказанииПроизводственныхУслуг(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_РеализацияУслугПоПереработке(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц);
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
				ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияОтгруженныхТоваров(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	ДанныеДокументаОтгрузки.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """") КАК СостояниеОтправкиДополнительныхВПФ,
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ДокументОтгрузки
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДанныеДокументаОтгрузки
			|		ПО (Т.ДокументОтгрузки = ДанныеДокументаОтгрузки.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
			|		ПО (Т.Контрагент = ОтборГрузополучатели.Контрагент)
			|			И (ДанныеДокументаОтгрузки.Грузополучатель = ОтборГрузополучатели.Грузополучатель)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусОтправляемыхВПФ
			|		ПО (Т.Ссылка = СтатусОтправляемыхВПФ.Объект)
			|			И (СтатусОтправляемыхВПФ.Свойство = &СвойствоДиадокСтатусОтправляемыхВПФ)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И ОтборГрузополучатели.Контрагент ЕСТЬ NULL 
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%""
			|			ИЛИ ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """") ПОДОБНО ""%[НУ]%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	НЕОПРЕДЕЛЕНО,
			|	Т.СуммаДокумента,
			|	ДанныеДокументаОтгрузки.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ДокументОтгрузки
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДанныеДокументаОтгрузки
			|		ПО (Т.ДокументОтгрузки = ДанныеДокументаОтгрузки.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
			|		ПО (Т.Контрагент = ОтборГрузополучатели.Контрагент)
			|			И (ДанныеДокументаОтгрузки.Грузополучатель = ОтборГрузополучатели.Грузополучатель)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусОтправляемыхВПФ
			|		ПО (Т.Ссылка = СтатусОтправляемыхВПФ.Объект)
			|			И (СтатусОтправляемыхВПФ.Свойство = &СвойствоДиадокСтатусОтправляемыхВПФ)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И ОтборГрузополучатели.Контрагент ЕСТЬ NULL 
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%""
			|			ИЛИ ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """") ПОДОБНО ""%[НУ]%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	ДанныеДокументаОтгрузки.Грузополучатель,
			|	Т.СуммаДокумента,
			|	ДанныеДокументаОтгрузки.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """"),
			|	ОтборГрузополучатели.CounteragentID,
			|	Т.ДокументОтгрузки
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДанныеДокументаОтгрузки
			|		ПО (Т.ДокументОтгрузки = ДанныеДокументаОтгрузки.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
			|		ПО (Т.Контрагент = ОтборГрузополучатели.Контрагент)
			|			И (ДанныеДокументаОтгрузки.Грузополучатель = ОтборГрузополучатели.Грузополучатель)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусОтправляемыхВПФ
			|		ПО (Т.Ссылка = СтатусОтправляемыхВПФ.Объект)
			|			И (СтатусОтправляемыхВПФ.Свойство = &СвойствоДиадокСтатусОтправляемыхВПФ)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%""
			|			ИЛИ ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """") ПОДОБНО ""%[НУ]%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	ДанныеДокументаОтгрузки.Грузополучатель,
			|	Т.СуммаДокумента,
			|	ДанныеДокументаОтгрузки.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """"),
			|	ОтборГрузополучатели.CounteragentID,
			|	Т.ДокументОтгрузки
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияОтгруженныхТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДанныеДокументаОтгрузки
			|		ПО (Т.ДокументОтгрузки = ДанныеДокументаОтгрузки.Ссылка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборГрузополучатели КАК ОтборГрузополучатели
			|		ПО (Т.Контрагент = ОтборГрузополучатели.Контрагент)
			|			И (ДанныеДокументаОтгрузки.Грузополучатель = ОтборГрузополучатели.Грузополучатель)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусОтправляемыхВПФ
			|		ПО (Т.Ссылка = СтатусОтправляемыхВПФ.Объект)
			|			И (СтатусОтправляемыхВПФ.Свойство = &СвойствоДиадокСтатусОтправляемыхВПФ)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%""
			|			ИЛИ ЕСТЬNULL(СтатусОтправляемыхВПФ.Значение, """") ПОДОБНО ""%[НУ]%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Документ,
			|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_Основная.Документ КАК Документ,
			|		Товары.СуммаНДС КАК СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|			ПО ВТ_Основная.ДокументОтгрузки = Товары.Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_Основная.Документ,
			|		Услуги.СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
			|			ПО ВТ_Основная.ДокументОтгрузки = Услуги.Ссылка) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Основная.Грузополучатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.СостояниеОтправкиДополнительныхВПФ,
			|	ВТ_Основная.CounteragentID,
			|	"""" КАК ФункцияУПД,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ Накладные_РеализацияОтгруженныхТоваров
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("Накладные_РеализацияОтгруженныхТоваров");
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_АктОбОказанииПроизводственныхУслуг(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_АктОбОказанииПроизводственныхУслуг(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияУслугПоПереработке(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_РеализацияУслугПоПереработке(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_СчетаНаОплату(Запрос, МассивВременныхТаблиц)
			
			ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
				ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
	//} Подготовка временных таблиц для списка отправки документов...
	
//} ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

//////////////////////////////////////////////////////
//функции генерации структуры для ФУФ счета-фактуры
///////////////////////////////////////////////////////

Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(Организация) Экспорт 
  Если ЗначениеЗаполнено(Организация.СвидетельствоСерияНомер) и ЗначениеЗаполнено(Организация.СвидетельствоДатавыдачи) Тогда 
		Возврат  Организация.СвидетельствоСерияНомер+" от "+Формат(Организация.СвидетельствоДатавыдачи, "ДФ=dd.MM.yyyy")
	Иначе 
		Возврат "";
  КонецЕсли;
	
КонецФункции

//Функция по ИСФ/КСФ возвращает сф-основание
Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ) Экспорт   
  	ДокОснование = ИСФ.ДокументыОснования[0].ДокументОснование;
	Если ДокОснование.Видоперации =перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда 
		Докоснование = ДокОснование.ДокументРеализации
	иначе 	
		пока (ТипЗнч(Докоснование) = Тип("ДокументСсылка.КорректировкаРеализации")) и (ДокОснование.ВидОперации = перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) цикл 
			ДокОснование = ДокОснование.ДокументРеализации
		КонецЦикла;
	КонецЕсли;	
	
	//ищем СФ
	запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = Ложь
	               |	И СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("Документоснование", ДокОснование);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда 
		Возврат  выборка.ссылка;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СФОтправлена(ДокСсылка)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСсылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокОснование";
	ЗапросСФ.УстановитьПараметр("ДокОснование", ДокСсылка);
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	Пока ВыборкаСФ.Следующий() Цикл
		DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ВыборкаСФ.ДокСсылка);
		Если ЗначениеЗаполнено(DocumentId) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьПоследнееИсправление(КоррСтарт, ПоследнееОтправленное) Экспорт
	текКор = КоррСтарт;
	
	Пока Истина Цикл
		// получаем следующего кандидата, проверям его
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокСсылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.ДокументРеализации = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", текКор);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Проверяем кандидата
			Если ПоследнееОтправленное И НЕ СФОтправлена(Выборка.ДокСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
		текКор = Выборка.ДокСсылка;
	КонецЦикла;
	
	Возврат текКор;
КонецФункции

Функция ПолучитьДочернееИсправление(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокССылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСчетФактуруПоКорректировкеРеализации(ДокССылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка";
	Запрос.УстановитьПараметр("ДокСсылка", ДокССылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокСчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНеотправленнуюКорректировку(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ СФОтправлена(Выборка.ДокССылка) Тогда
			Возврат Выборка.ДокССылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
	КорректировкаОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	КорректировкаОбъект.Заполнить(КорректировкаРеализацииОснование);
	
	Возврат КорректировкаОбъект;
КонецФункции

Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокКорректировка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Док
		|ГДЕ
		|	Док.ДокументПоступления = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", ПоследняяКорректировка);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследняяКорректировка = Выборка.ДокКорректировка;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследняяКорректировка;
	
КонецФункции

Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
	Если Document.type =  "InvoiceRevision" Тогда 
		 запрос = Новый запрос;
		 запрос.Текст = "ВЫБРАТЬ
		                |	СчетФактураПолученныйДокументыОснования.ДокументОснование
		                |ИЗ
		                |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		                |ГДЕ
		                |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));		
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			 Док =  результат.ДокументОснование;
			 Возврат 	ПолучитьПоследнююКорректировкуПоступления(Док); 
		иначе 
			Возврат Неопределено 
		КонецЕсли;	
	ИначеЕсли Document.type = "InvoiceCorrection"  Тогда 
	  запрос = Новый Запрос;
	  	Если ЗначениеЗаполнено(Document.OriginalInvoicerevisionNumber)=Ложь Тогда 
	 		 Запрос.Текст ="ВЫБРАТЬ
		                |	СчетФактураПолученныйДокументыОснования.ДокументОснование
		                |ИЗ
		                |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		                |ГДЕ
		                |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                |	И (СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь)";
		Иначе 
			 Запрос.Текст ="ВЫБРАТЬ
			               |	СчетФактураПолученныйДокументыОснования.ДокументОснование,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления
			               |ИЗ
			               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			               |ГДЕ
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления = &ДатаИсправления
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления = &НомерИсправления";
			Запрос.УстановитьПараметр("НомерИсправления", число(Document.OriginalInvoicerevisionNumber));		
			Запрос.УстановитьПараметр("ДатаИсправления", НачалоДня(Document.OriginalInvoicerevisionDate));		
		КонецЕсли;				
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	ИначеЕсли Document.type = "InvoiceCorrectionRevision"  Тогда 
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	СчетФактураПолученныйДокументыОснования.ДокументОснование
	                  |ИЗ
	                  |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	                  |ГДЕ
	                  |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	                  |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalInvoiceCorrectionDate));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalInvoiceCorrectionNumber);
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	Иначе 
		Возврат Неопределено
	КонецЕсли;	
		
КонецФункции	

Функция СчетФактураПолученныйДокументаОснования(ДокументОснование) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СчетФактураПолученныйДокументаОснования(ДокументОснование);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// функции генерации сотруктуры для генерации торг-12 или акта выполненных работ
//////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
	Возврат УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(записьрегистра);
КонецФункции	

Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
	 Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
 КонецФункции
 
Процедура ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес = Ложь, АдресСтрокой = "") Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес, АдресСтрокой);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
	СведенияОбОрганизации =  ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента);

	 Если стрДлина(СведенияОбОрганизации.ИНН)<>12 Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
		ЭтоИП = Ложь;
	Иначе 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
		  //для нашей организации - данные берем из нормализованного представления физлица
		  НаименованиеОрганизации  = юрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
		  НаименованиеОрганизации  = СведенияОбОрганизации.наименованиеДляпечатныхФорм 
		КонецЕсли;	  
		ЭтоИП = Истина;
	КонецЕсли;

	OrganizationInfo.Name = НаименованиеОрганизации;
    OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	OrganizationInfo.Ссылка = ЮрФизЛицо;
	OrganizationInfo.SameAsSellerOrBuyer = Ложь;
	
    ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, Ложь, АдресСтрокой);

КонецПроцедуры	

Функция ПолучитьГоловноеЮрлицо( ЮрФизЛицо)
	
	Перем ГоловноеЮрЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") 
		И ЮрФизЛицо.Метаданные().Реквизиты.Найти("ОбособленноеПодразделение") <> Неопределено И ЮрФизЛицо.ОбособленноеПодразделение Тогда
		
		ГоловноеЮрЛицо = ЮрФизЛицо.ГоловнойКонтрагент;		
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ГоловноеЮрЛицо = ЮрФизЛицо.ГоловнаяОрганизация;
	КонецЕсли;

	Если ЗначениеЗаполнено(ГоловноеЮрЛицо)  Тогда
		Возврат ГоловноеЮрЛицо;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "")  Экспорт 

	ГоловноеЮрЛицо = "";
	 
	Если АдресДляСФ = Истина Тогда
		
		ГоловноеЮрЛицо = ПолучитьГоловноеЮрлицо( ЮрФизЛицо);
		Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
			СведенияОПодразделении 	= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
			СведенияОбОрганизации	= ПолучитьСведенияОбОрганизации(ГоловноеЮрЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
			
			СведенияОбОрганизации.КПП = СведенияОПодразделении.КПП;
		Иначе
			СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
		КонецЕсли;	
	Иначе
		СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
	КонецЕсли;
	
	ЭтоИП= СтрДлина(СведенияОбОрганизации.ИНН) = 12;
	Если НЕ ЭтоИП Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	Иначе 
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда 
		  //для нашей организации - данные берем из нормализованного представления физлица
		  НаименованиеОрганизации  = ЮрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
		  НаименованиеОрганизации  = СведенияОбОрганизации.НаименованиеДляпечатныхФорм;
		КонецЕсли;	  
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.Inn  = СведенияОбОрганизации.ИНН;
	
	Если ЗначениеЗаполнено(ЮрФизЛицо.ЮрФизЛицо) Тогда
		OrganizationInfo.Kpp  = СведенияОбОрганизации.КПП;
	Иначе
		OrganizationInfo.Kpp  = ЮрФизЛицо.КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
		ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ГоловноеЮрЛицо, ЮрАдрес, АдресСтрокой);	
	Иначе
		ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, ЮрАдрес, АдресСтрокой);
	КонецЕсли;
	
	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	
	Если АдресДляСФ=Ложь Тогда
		OrganizationInfo.Okpo  = СведенияОбОрганизации.КодПоОкпо;
		
		Если найти(СведенияОбОрганизации.Телефоны, "факс:")>0 Тогда 
			телефон = СокрЛП(лев(СведенияОбОрганизации.Телефоны, найти(СведенияОбОрганизации.Телефоны, "факс:")-1));
			Если прав(телефон,1) = ","  Тогда
				телефон = лев(телефон, стрДлина(телефон)-1);
			КонецЕсли;
			факс = СокрЛП(прав(СведенияОбОрганизации.Телефоны, СтрДлина(СведенияОбОрганизации.Телефоны) - найти(СведенияОбОрганизации.Телефоны, "факс:")- 5));
		Иначе 
			Телефон =СведенияОбОрганизации.Телефоны;
			Факс = "";
		КонецЕсли;	
		OrganizationInfo.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Телефон);
		OrganizationInfo.Fax   = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Факс) ;
		OrganizationInfo.BankAccountNumber = ?(ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета),  СведенияОбОрганизации.НомерСчета, "") ;
		OrganizationInfo.BankName  =   ?(ЗначениеЗаполнено(СведенияОбОрганизации.Банк), СведенияОбОрганизации.Банк.наименование, "");
		OrganizationInfo.BankId =  ?(ЗначениеЗаполнено(СведенияОбОрганизации.БИК),  СокрЛП(СведенияОбОрганизации.БИК), "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
		OrganizationInfo.вставить("Ссылка",ГоловноеЮрЛицо);
	Иначе
		OrganizationInfo.вставить("Ссылка",ЮрФизЛицо);
	КонецЕсли;
//	OrganizationInfo.Department  =  "";
КонецПроцедуры	

Процедура Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет= Неопределено, АдресСтрокой = "") Экспорт
	
	СведенияОбОрганизации= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента, БанковскийСчет);
	СведенияОбОрганизации.Вставить("Ссылка", ЮрФизЛицо);
	
	Если ИспользоватьЮрАдрес Тогда
		
		ГоловноеЮрЛицо= ПолучитьГоловноеЮрлицо(ЮрФизЛицо);
		
		Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
			
			СведенияОПодразделении= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчет);
			СведенияОбОрганизации=  ПолучитьСведенияОбОрганизации(ГоловноеЮрЛицо, ДатаДокумента, БанковскийСчет);
			
			СведенияОбОрганизации.Вставить("Ссылка", ГоловноеЮрЛицо);
			СведенияОбОрганизации.Вставить("КПП"   , СведенияОПодразделении.КПП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоОрганизация= ТипЗнч(СведенияОбОрганизации.Ссылка) = Тип("СправочникСсылка.Организации");
	ЭтоИП= СтрДлина(СведенияОбОрганизации.ИНН) = 12;
	
	Если ЭтоИП И ЭтоОрганизация Тогда 
		СведенияОбОрганизации.НаименованиеДляпечатныхФорм = СведенияОбОрганизации.Ссылка.ИндивидуальныйПредприниматель.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП) И НЕ ЗначениеЗаполнено(СведенияОбОрганизации.Ссылка.ЮрФизЛицо) Тогда
		СведенияОбОрганизации.КПП= СведенияОбОрганизации.Ссылка.КПП;
	КонецЕсли;
	
	
	ExtendedOrganizationInfo.Name= 					СведенияОбОрганизации.НаименованиеДляпечатныхФорм;
	ExtendedOrganizationInfo.Inn=  					СведенияОбОрганизации.ИНН;
	ExtendedOrganizationInfo.Kpp=  					СведенияОбОрганизации.КПП;
	ExtendedOrganizationInfo.Okpo= 					СведенияОбОрганизации.КодПоОкпо;
	ExtendedOrganizationInfo.CorrespondentAccount = СведенияОбОрганизации.КоррСчет;
	
	ExtendedOrganizationInfo.BankAccountNumber= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.НомерСчета);
	ExtendedOrganizationInfo.BankName=   		ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.Банк);
	ExtendedOrganizationInfo.BankId=  			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.БИК);
	ExtendedOrganizationInfo.Phone = 			ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента").ПредставлениеТелефона(СведенияОбОрганизации.Телефоны, "Телефон", 255);
	
	Если ЭтоОрганизация Тогда
		ExtendedOrganizationInfo.Okdp= СведенияОбОрганизации.Ссылка.КодОКВЭД;
	КонецЕсли;
	
	Если ЭтоИП Тогда
		ExtendedOrganizationInfo.Type= "IndividualEntity";
	ИначеЕсли ЭтоОрганизация Тогда
		Если СведенияОбОрганизации.Ссылка.ИностраннаяОрганизация
			И ПустаяСтрока(СведенияОбОрганизации.ИНН) Тогда
			// В организации может быть указано, что организация является отделением иностранной организации,
			//   но если у нее указан ИНН, значит, она встала на учет в России.
			// Будем считать ее иностранной только в том случае, если не указан ИНН.
			ExtendedOrganizationInfo.Type= "ForeignEntity";
		Иначе
			ExtendedOrganizationInfo.Type= "LegalEntity";
		КонецЕсли;
	Иначе //ветка для контрагента
		Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации.Ссылка.ЮрФизЛицо)
			И ПустаяСтрока(СведенияОбОрганизации.ИНН) Тогда
			// Логика такая же, как в организации выше.
			ExtendedOrganizationInfo.Type = "ForeignEntity"; 
		Иначе
			ExtendedOrganizationInfo.Type = "LegalEntity"; 	
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОрганизация Тогда
		ExtendedOrganizationInfo.Email = ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").АдресЭлектроннойПочты(СведенияОбОрганизации.Ссылка, Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	КонецЕсли;
	
	ЗаполнитьСтруктуруАдреса(ExtendedOrganizationInfo.Address, СведенияОбОрганизации.Ссылка, ИспользоватьЮрАдрес, АдресСтрокой);	
	
	ExtendedOrganizationInfo.Вставить("Ссылка", СведенияОбОрганизации.Ссылка);
	
КонецПроцедуры	

Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт = Ложь, ЭтоУПД = Ложь)  Экспорт
	
	ДоговорКонтрагента = ДокСсылка.ДоговорКонтрагента;
	Возврат ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента").ЗаполнитьСтруктуруОснования(ДоговорКонтрагента, ЭтоУПД);
	
КонецФункции	

Функция ПолучитьБанковскийСчетПоДокументу(ДокТоварный) Экспорт 
	БанковскийСчетОрганизации = ?(ДокТоварный.Метаданные().Реквизиты.найти("БанковскийСчетОрганизации")=Неопределено, Неопределено, ДокТоварный.БанковскийСчетОрганизации);
	Если (ДокТоварный.Метаданные().Реквизиты.найти("СтруктурнаяЕдиница")<>Неопределено) и (ТипЗнч(ДокТоварный.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.СтруктурнаяЕдиница;
	ИначеЕсли (ДокТоварный.Метаданные().Реквизиты.найти("Банковскийсчет")<>Неопределено) и (ТипЗнч(ДокТоварный.Банковскийсчет) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.Банковскийсчет;
	КонецЕсли;	 
	Если (ЗначениеЗаполнено(БанковскийСчетОрганизации) = Ложь) и ЗначениеЗаполнено(ДокТоварный.Организация.ОсновнойБанковскийСчет) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.Организация.ОсновнойБанковскийСчет
	 КонецЕсли;	
	 Возврат БанковскийСчетОрганизации;
КонецФункции

Функция ПолучитьСведенияОбОрганизации(Организация, Дата, Банковскийсчет=Неопределено) 
	 Возврат УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата,, Банковскийсчет);

КонецФункции	

Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации(Контрагент,датаОперации,  БанковскийСчет);
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,"НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
КонецФункции	

Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)  Экспорт 
	  СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации(Контрагент,датаОперации);
      Возврат Новый Структура("Наименование, ИНН, КПП", СведенияОбОрганизации.НаименованиеДляПечатныхФорм, СведенияОбОрганизации.ИНН, СведенияОбОрганизации.КПП);
КонецФункции

Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)  Экспорт 
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкССылка = БанковскийСчетОрганизации;
		Если БанкСсылка<>Неопределено Тогда 
			мБанк = ?(НЕ ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов), БанкСсылка.Банк, БанкСсылка.БанкДляРасчетов);
			мГородБанка = мБанк.Город;
			мКоррСчет   = мБанк.КоррСчет;
			мБИК        = мБанк.Код;
			мНомерСчета = ?(БанкСсылка.БанкДляРасчетов.Пустая(), БанкСсылка.НомерСчета,БанкСсылка.Банк.КоррСчет);
			
			Если ПустаяСтрока(БанкСсылка.ТекстКорреспондента) Тогда
				мТекстПолучателя = Организация.НаименованиеПолное;
				Если ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов) Тогда
					мТекстПолучателя = мТекстПолучателя + " р/с " + БанкСсылка.НомерСчета + " в " + БанкСсылка.Банк + " " + БанкСсылка.Банк.Город;
				КонецЕсли;	
			Иначе
				мТекстПолучателя = БанкСсылка.ТекстКорреспондента;
			КонецЕсли;		
			
		КонецЕсли;
		Возврат Новый Структура ("Банк,БИК,КоррСчет,ГородБанка,НомерМсета,ТекстПолучателя,НомерСчета",мБанк,мБИК,мКоррСчет,мГородБанка,мНомерСчета,мТекстПолучателя,мНомерСчета);
	иначе 
		Возврат Неопределено
	КонецЕсли;		
КонецФункции

Функция ПолучитьПодразделениеИзДокумента(ДокССылка) Экспорт 
	Возврат ""
КонецФункции

//////////////////////////////////////////////////////////
// функции генерации структуры акта сверки
////////////////////////////////////////////////////////////

Функция  ПолучитьПредставителяОрганизацииДляАктаСверки(ДокСсылка)
	ПредставительОрганизации = Новый Структура;
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(ДокСсылка.Организация, ДокСсылка.ПредставительОрганизации, ДокСсылка.Дата);
 	
	ПредставительОрганизации.Вставить("ФИО", сокрЛП(строка(ДанныеПредставителя.Фамилия)+" "+ДанныеПредставителя.Имя+" "+ДанныеПредставителя.Отчество));
	ПредставительОрганизации.Вставить("Должность", Строка(ДанныеПредставителя.Должность));
	
	Возврат ПредставительОрганизации;
КонецФункции

Функция  ПолучитьПредставителяКонтрагентаДляАктаСверки(ДокСсылка)
	ПредставительКонтрагента = Новый Структура;
	ПредставительКонтрагента.Вставить("ФИО", ДокСсылка.ПредставительКонтрагента.наименование);
	ПредставительКонтрагента.Вставить("Должность", ДокСсылка.ПредставительКонтрагента.Должность);
	
	Возврат ПредставительКонтрагента;
КонецФункции

Функция ИнициализироватьТЧДляСверки()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("ПредставлениеДокумента");
	ТЗ.Колонки.Добавить("Дебет");
	ТЗ.Колонки.Добавить("Кредит");
	
	Возврат ТЗ;
КонецФункции		
	
Функция ПолучитьСтруктуруДанныхТекущегоДоговораАктаСверки(МассивДанныхПоДоговорам, ДоговорСсылка)
	для каждого элемент из  МассивДанныхПоДоговорам цикл 
		Если Элемент.ДоговорСсылка = ДоговорСсылка Тогда
			Возврат  Элемент
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДанныеОрганизации", ИнициализироватьТЧДляСверки());
	СтруктураДанных.Вставить("ДанныеКонтрагента", ИнициализироватьТЧДляСверки());
	СтруктураДанных.Вставить("ДоговорСсылка"    , ДоговорСсылка);
	
	МассивДанныхПоДоговорам.Добавить(СтруктураДанных);
	
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьДанныеТЧАктаСверки(ДокСсылка)
	 запрос = Новый Запрос;
	 запрос.Текст = "ВЫБРАТЬ
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Документ,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Представление,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит,
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Договор,
	                |	Истина КАК ЭтоДанныеОрганизации
	                |ИЗ
	                |	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	                |ГДЕ
	                |	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.НомерСтроки,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Дата,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Документ,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Представление,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Дебет,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Кредит,
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Договор,
	                |	Ложь
	                |ИЗ
	                |	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовПоДаннымКонтрагента
	                |ГДЕ
	                |	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Ссылка = &Ссылка"; 
	 Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	 Выборка = запрос.Выполнить().Выбрать();
	 МассивДанныхПоДоговорам = Новый Массив;
	 
	 пока выборка.Следующий() цикл 
		 СтруктураДанныхПоДоговору = ПолучитьСтруктуруДанныхТекущегоДоговораАктаСверки(МассивДанныхПоДоговорам, ?(Докссылка.РазбитьПоДоговорам, Выборка.Договор, Неопределено) );
		 ТаблицаДанных = ?(выборка.ЭтоДанныеОрганизации, СтруктураДанныхПоДоговору.ДанныеОрганизации,  СтруктураДанныхПоДоговору.ДанныеКонтрагента);
		 стр = ТаблицаДанных.Добавить();
		 Стр.Дата = выборка.Дата;
		 Стр.представлениеДокумента = выборка.Представление;
		 стр.Дебет = Выборка.Дебет;
		 стр.Кредит =выборка.кредит;
	 КонецЦикла;	 
	 
	 
	 Возврат МассивДанныхПоДоговорам;
КонецФункции	

Функция ПолучитьДанныеДляФормированияАктаСверки(ДокСсылка) Экспорт 
	
	ДанныеДляАктаСверки = Новый Структура();
	
	ДанныеДляАктаСверки.вставить("ДатаНачалаСверки",ДокСсылка.ДатаНачала);
	ДанныеДляАктаСверки.Вставить("ДатаокончанияСверки", ДокСсылка.Датаокончания);
	
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДокСсылка.Организация, ДокСсылка.Дата);
	ДанныеДляАктаСверки.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,"));
	
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДокСсылка.Контрагент, ДокСсылка.Дата);
	ДанныеДляАктаСверки.Вставить("ПредставлениеКонтрагента", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,"));
	
	ДанныеДляАктаСверки.Вставить("ПредставительОрганизации",  ПолучитьПредставителяОрганизацииДляАктаСверки(ДокСсылка));
	ДанныеДляАктаСверки.Вставить("ПредставительКонтрагента",  ПолучитьПредставителяКонтрагентаДляАктаСверки(ДокСсылка));
	
	ДанныеДляАктаСверки.вставить("ВалютаДокумента", ДокСсылка.ВалютаДокумента);
	ДанныеДляАктаСверки.вставить("МассивДанныхПоДоговорам",  ПолучитьДанныеТЧАктаСверки(ДокСсылка));
	
	ДанныеДляАктаСверки.Вставить("СальдоНачальное",  ДокСсылка.ОстатокНаНачало);
	ДанныеДляАктаСверки.Вставить("СверкаСогласована", ДокСсылка.СверкаСогласована);
	ДанныеДляАктаСверки.Вставить("Расхождение", ДокСсылка.Расхождение);
	
	
	
	Возврат ДанныеДляАктаСверки;
КонецФункции	

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФрмВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФрмВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;

	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Возврат ФрмВыбора;	
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если видОперации = "ВозвратОтПокупателя" Тогда 
		ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ДокОбъект.ВидОперации = перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	Иначе 	
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Если видоперации =  "ПоступлениеОборудования" Тогда 
			ДокОбъект.ВидОперации =   Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		ИначеЕсли видОперации = "ПоступлениеНМА" Тогда
			ДокОбъект = Документы.ПоступлениеНМА.СоздатьДокумент();
		ИначеЕсли видОперации = "ПоступлениеДопРасходов" Тогда
			ДокОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		ИначеЕсли видОперации = "ПоступлениеОбъектовСтроительства"	Тогда 
			ДокОбъект.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		Иначе 	
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;	
		ДокОбъект.ДатаВходящегоДокумента = параметры.ДатаВходящегоДокумента;
		ДокОбъект.НомерВходящегоДокумента = параметры.НомерВходящегоДокумента;
		
	КонецЕсли;
		
	Если (Параметры.свойство("Дата")) и ЗначениеЗаполнено(параметры.Дата) Тогда
		ДокОбъект.Дата=	параметры.Дата;
	КонецЕсли;
	
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
		
		Если ЗначениеЗаполнено(параметры.ДоговорКонтрагента) = Истина Тогда
			ДокОбъект.ДоговорКонтрагента = параметры.ДоговорКонтрагента;
		Иначе
			//Заполняем договор
			мСписокВидовДоговоров = Новый СписокЗначений;
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			Если Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомиссионеромНаЗакупку") <> Неопределено Тогда
				мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
			КонецЕсли;
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект, мСписокВидовДоговоров);
		КонецЕсли;
		
	КонецЕсли;
		
	ДокОбъект.ВалютаДокумента			= ДокОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокОбъект.КратностьВзаиморасчетов 	= 1;
	
	Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) = Истина Тогда
		
		Если ВидОперации = "ВПереработку" Тогда
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		Иначе
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		КонецЕсли;
		
		СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокОбъект);

		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ДокОбъект, ДокОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", ДокОбъект.ДоговорКонтрагента);
		
	КонецЕсли;
			
	ЗаполнятьСчетаРасчета=	Ложь;
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДокОбъект.Организация, ДокОбъект.Контрагент, ДокОбъект.ДоговорКонтрагента);
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураНеОбязательныхПолей = Новый Структура;	
	
	Если ДокОбъект.Метаданные().ТабличныеЧасти.Найти("ВозвратнаяТара") <> Неопределено Тогда
		Если ДокОбъект.ВозвратнаяТара.Количество() > 0 Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре", СчетаУчета.СчетУчетаТары);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов);			
		
	БухгалтерскийУчет.ПроверитьНеобходимостьПерезаполненияСчетовУчета(ДокОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, Ложь, ЗаполнятьСчетаРасчета);

	Если ЗаполнятьСчетаРасчета Тогда
		Если ДокОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ДокОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом
		Иначе
			ДокОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли;
		ДокОбъект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
		Если ДокОбъект.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоТаре") <> Неопределено Тогда
			ДокОбъект.СчетУчетаРасчетовПоТаре 	   = СчетаУчета.СчетУчетаТары;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокОбъект.Метаданные().Реквизиты.Найти("СпособЗачетаАвансов")<>Неопределено Тогда
		ДокОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	КонецЕсли;
	
	Если ДокОбъект.Метаданные().Реквизиты.Найти("Склад")<>Неопределено Тогда
		ДокОбъект.Склад = параметры.Склад;
	КонецЕсли;	
    		
	Если ВидОперации =  "ПоступлениеДопРасходов" Тогда
		ДокОбъект.Сумма =(ЭДОбъект.total - ?(СуммаВключаетНДС,0,ЭДОбъект.vat ));
		ДокОбъект.СуммаНДС = ЭДОбъект.vat;
	Иначе
		
		Если ТабличнаяЧасть <> Неопределено Тогда
			ЗаполнениеТабличнойЧасти(ТабличнаяЧасть,ВидОперации,ДокОбъект, ЗаполнениеГТД);
		КонецЕсли;	
	КонецЕсли;

	ДокОбъект.СуммаВключаетНДС = СуммаВключаетНДС;
	ДокОбъект.УчитыватьНДС = Истина;
	
	Если НЕ ДокОбъект.Метаданные().Реквизиты.Найти("Грузоотправитель") = Неопределено 
		  И Параметры.Свойство("Грузоотправитель") 
		  И ЗначениеЗаполнено(Параметры.Грузоотправитель) Тогда
	
		ДокОбъект.Грузоотправитель= Параметры.Грузоотправитель; 
	КонецЕсли;
	
	Если НЕ ДокОбъект.Метаданные().Реквизиты.Найти("Грузополучатель") = Неопределено 
		  И Параметры.Свойство("Грузополучатель") 
		  И ЗначениеЗаполнено(Параметры.Грузополучатель) Тогда
	
		ДокОбъект.Грузополучатель= Параметры.Грузополучатель; 
	КонецЕсли;
		
	Возврат ДокОбъект;
	
КонецФункции

Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
	ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	ДокОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
	КонецЕсли;
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если ДокОбъект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект,мСписокВидовДоговоров);
	
	Возврат ДокОбъект;
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
	мСписокВидовДоговоров = Новый СписокЗначений;
	Если ТипЗнч(СчетФактура) = тип("ДокументОбъект.СчетФактураПолученный") Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Иначе 
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;	
	

	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(СчетФактура,мСписокВидовДоговоров);
	
КонецПроцедуры

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Если Метаданные.Перечисления.ВидыДоговоровКонтрагентов.ЗначенияПеречисления.Найти("СКомиссионеромНаЗакупку") <> Неопределено Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	КонецЕсли;	
	
	Возврат СписокВидовДоговоров;
	
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров);
	
КонецФункции


/////////////////////////////////////////////////////////////
// Связи объектов
/////////////////////////////////////////////////////////////

Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСтавкуНДСДиадок(TaxRate);
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(Код, Наименование, Номенклатура) Экспорт
	
	Запрос= Новый Запрос(
	"ВЫБРАТЬ
	|	Классификатор.Ссылка,
	|	Классификатор.Код,
	|	Классификатор.Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК Классификатор
	|		ПО Т.БазоваяЕдиницаИзмерения = Классификатор.Ссылка
	|ГДЕ
	|	Т.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса= Запрос.Выполнить();
	Запрос= Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		РезультатЗапроса= Неопределено;
		
		Выборка.Следующий();
		
		Если СокрЛП(Выборка.Код) = Код ИЛИ СокрЛП(Выборка.Наименование) = Наименование Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		КоэффициентПересчета= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(Код, Выборка.Код);
		Если ЗначениеЗаполнено(КоэффициентПересчета) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();

КонецФункции

Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.код = КодЕИ) или (НоваяЕдиницаИзмерения.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции	

Процедура ЗаполнениеТабличнойЧасти(ТабличнаяЧасть, ВидОперации,ДокОбъект, ЗаполнениеГТД)
	Для каждого стр Из ТабличнаяЧасть Цикл
		Если (видОперации = "ВозвратОтПокупателя") или (стр.Тип = "Товар")  Тогда
			стрОбъект = ДокОбъект.Товары.Добавить();
			Если   (видОперации <> "ВозвратОтПокупателя") Тогда
				стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
				стрОбъект.Коэффициент = 1;
			КонецЕсли;	
		ИначеЕсли стр.Тип = "Оборудование" Тогда
			стрОбъект = ДокОбъект.Оборудование.Добавить();
			стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
			стрОбъект.Коэффициент = 1;
		ИначеЕсли стр.Тип = "Объект стр" Тогда 	
			стрОбъект = ДокОбъект.ОбъектыСтроительства.Добавить();
		ИначеЕсли стр.Тип = "НМА" Тогда	
			стрОбъект = ДокОбъект.НематериальныеАктивы.Добавить();
		ИначеЕсли (ВидОперации = "ПокупкаКомиссияАгент") и ЗначениеЗаполнено(стр.Комитент) Тогда
			стрОбъект = ДокОбъект.АгентскиеУслуги.Добавить();
		Иначе	
			стрОбъект = ДокОбъект.Услуги.Добавить();
			стрОбъект.Содержание = стр.НоменклатураИзЭД;
		КонецЕсли;
		
		Если стр.Тип =  "Объект стр" Тогда 
			стрОбъект.ОбъектСтроительства =   стр.Номенклатура;
		ИначеЕсли стр.Тип =  "НМА" Тогда 
			стрОбъект.НематериальныйАктив =   стр.Номенклатура;
		Иначе 	
			стрОбъект.Номенклатура = стр.Номенклатура;
			стрОбъект.Количество = стр.Количество;
			стрОбъект.Цена = стр.Цена;
		КонецЕсли;
		
		Если ЗаполнениеГТД И стр.Тип = "Товар" Тогда
			стрОбъект.НомерГТД = НайтиИлиСоздатьГТД(стр.ГТД);
			стрОбъект.СтранаПроисхождения = стр.СтранаПроисхождения;
		КонецЕсли;
		
		Если ВидОперации = "ПокупкаКомиссияАгент" и ЗначениеЗаполнено(стр.Комитент) Тогда
			стрОбъект.Контрагент = стр.Комитент;
			УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(стрОбъект.ДоговорКонтрагента,стрОбъект.Контрагент,ДокОбъект.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
			ЗаполнитьСчетаРасчетовСКонтрагентами(ДокОбъект,стрОбъект);
		КонецЕсли;
		
		
		стрОбъект.Сумма = стр.Сумма;
		стрОбъект.СуммаНДС = стр.СуммаНДС;
		стрОбъект.СтавкаНДС = стр.СтавкаНДС;
		
		ЗаполнитьСчетаУчетаНоменклатуры(ДокОбъект,стрОбъект,стр);
	КонецЦикла;
КонецПроцедуры

Функция НайтиИлиСоздатьГТД(номерГТД)
	Если ЗначениеЗаполнено(номерГТД)=Ложь Тогда
		Возврат Неопределено
	КонецЕсли; 
	
	элементГТДСсылка = Справочники.НомераГТД.НайтиПоКоду(номерГТД);
	Если элементГТДСсылка.Пустая() Тогда
		элементГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		элементГТДОбъект.Код = номерГТД;
		элементГТДОбъект.Записать();
		элементГТДСсылка = элементГТДОбъект.Ссылка;
	КонецЕсли;
	
	Возврат элементГТДСсылка;
КонецФункции

Процедура ЗаполнитьСчетаРасчетовСКонтрагентами(ДокОбъект,стрОбъект)
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ДокОбъект.Организация, стрОбъект.Контрагент, стрОбъект.ДоговорКонтрагента);
	стрОбъект.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаНоменклатуры(ДокОбъект, стрОбъект, СтрЭД)
	
	Если СтрЭД.Тип = "Объект стр" Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(ДокОбъект.Организация, стрОбъект.ОбъектСтроительства);
	Иначе
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(ДокОбъект.Организация, ?(СтрЭД.Тип = "НМА",стрОбъект.НематериальныйАктив,стрОбъект.Номенклатура),?(СтрЭД.Тип = "НМА",Неопределено, ДокОбъект.Склад));
	КонецЕсли;
	
	Если СтрЭД.Тип = "Оборудование" Тогда
		
		стрОбъект.СчетУчета  = СчетаУчета.СчетУчета;
		стрОбъект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		
	ИначеЕсли  СтрЭД.Тип = "НМА"  Тогда
		
		Если стрОбъект.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
			СчетаУчета.СчетУчета = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		Иначе
			СчетаУчета.СчетУчета = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
		КонецЕсли;
		
		стрОбъект.СчетУчета  = СчетаУчета.СчетУчета;
		стрОбъект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		
	ИначеЕсли СтрЭД.Тип = "Объект стр" ИЛИ СтрЭД.Тип = "Товар" ИЛИ СтрЭД.Тип = "Услуга" Тогда
	
		Если ТипЗнч(ДокОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
			
			стрОбъект.СчетУчета = СчетаУчета.СчетУчета;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСчетУчета", ДокОбъект.Метаданные(), "Товары") Тогда
				стрОбъект.ПереданныеСчетУчета  = СчетаУчета.СчетПередачи;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", ДокОбъект.Метаданные(), "Товары") Тогда
				
				стрОбъект.СчетДоходов  = СчетаУчета.СчетДоходов;
				стрОбъект.СчетРасходов = СчетаУчета.СчетРасходов;
				
				Если стрОбъект.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
					стрОбъект.Субконто = Новый(стрОбъект.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
					Если ТипЗнч(стрОбъект.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						стрОбъект.Субконто = стрОбъект.Номенклатура.НоменклатурнаяГруппа;
					КонецЕсли;
				Иначе
					стрОбъект.Субконто = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", ДокОбъект.Метаданные(), "Товары") Тогда
				стрОбъект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
			КонецЕсли;
			
		Иначе
			
			Если (ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
				И ДокОбъект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
				стрОбъект.СчетУчета  = СчетаУчета.СчетУчетаДоп;
			Иначе
				Если СтрЭД.Тип = "Услуга" Тогда
					стрОбъект.СчетЗатрат=	СчетаУчета.СчетУчета;
					стрОбъект.СчетУчетаНДС=	СчетаУчета.СчетУчетаНДС;
					стрОбъект.Субконто1=	СчетаУчета.Субконто1;
					стрОбъект.Субконто2=	СчетаУчета.Субконто2;
					стрОбъект.Субконто3=	СчетаУчета.Субконто3;
										
					Попытка
						ПрименяетсяУСН = НалоговыйУчетУСН.ПрименениеУСН(ДокОбъект.Организация, ДокОбъект.Дата);
						ПрименяетсяОсобыйПорядокНалогооблажения = НалоговыйУчетУСН.ПрименениеОсобогоПорядкаНалогообложения(ДокОбъект.Организация, ДокОбъект.Дата);
					Исключение
						ПрименяетсяУСН = Ложь;
						ПрименяетсяОсобыйПорядокНалогооблажения = Ложь;
					КонецПопытки;
					
					Если ПрименяетсяУСН ИЛИ НЕ ПрименяетсяОсобыйПорядокНалогооблажения Тогда
												
						стрОбъект.СчетЗатратНУ 	= СчетаУчета.СчетУчета;
                        стрОбъект.СубконтоНУ1 	= СчетаУчета.Субконто1;
						стрОбъект.СубконтоНУ2   = СчетаУчета.Субконто2;
						стрОбъект.СубконтоНУ3   = СчетаУчета.Субконто3;
						
					КонецЕсли;
					
				Иначе
					стрОбъект.СчетУчета = СчетаУчета.СчетУчета;
					Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", ДокОбъект.Метаданные(), "Товары") Тогда
						стрОбъект.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
 КонецПроцедуры
 
Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
	
	Если СчетФактура.ДокументыОснования.Количество()>0 Тогда 
		ДокПоступление = СчетФактура.ДокументыОснования[0].ДокументОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 
 
///////////////////////////////////////////////////////////
/// фукнции получения данных, общих для торг-12, акта и счета-фактуры
///////////////////////////////////////////////////////////////////////////

Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
	Возврат ОбщегоНазначения.СформироватьСуммуПрописью(Total, ВалютаДокумента);
КонецФункции	

Функция ДобавитьРазделитель(Стр, Префикс = "") 
	Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
КонецФункции

Функция ОтрезатьПравуюЗапятую(стр)
	результат = сокрЛП(стр);
	пока прав(результат, 1)="," цикл 
		Результат = лев(результат, стрДлина(результат)-1);
	КонецЦикла;	
	
	Возврат результат;
КонецФункции

Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   Экспорт 
	СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(Контрагент, ДатаОперации);
	Возврат ОтрезатьПравуюЗапятую(ДобавитьРазделитель(СведенияОбОрганизации.ПолноеНаименование)+ДобавитьРазделитель(СведенияОбОрганизации.ИНН, "ИНН: ")+ДобавитьРазделитель(СведенияОбОрганизации.КПП, "КПП: "));
КонецФункции

Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	
	Если Видоперации = "ПокупкаКомиссия"
		ИЛИ Видоперации = "ПоступлениеОборудования"
		ИЛИ Видоперации = "ВозвратОтПокупателя"
		ИЛИ Видоперации = "ПоступлениеАвтомобилей" Тогда
		
		Если ПолучитьФорму("Форма_Диадок_ЭД").ДляDocumentЕстьГТД(ЭДОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;
КонецФункции

//{ СвязиМеждуДокументами

	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Результат= Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг
		|ГДЕ
		|	НЕ ПометкаУдаления И СчетНаОплатуПокупателю = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		РезультатЗапроса= Запрос.Выполнить(); Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать(); РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат СсылкаНаОбъект.СчетНаОплатуПокупателю;
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусКонтрагентаНеПодходит
		|ГДЕ
		|	СтатусКонтрагентаНеПодходит.Объект В(&МассивОрганизаций1С)
		|	И СтатусКонтрагентаНеПодходит.Свойство = &ПриглашенияДатаСтатусНеПодходит
		|	И ТИПЗНАЧЕНИЯ(СтатусКонтрагентаНеПодходит.Значение) = ТИП(ДАТА)
		|	И СтатусКонтрагентаНеПодходит.Значение > &ПериодАнализаДокументов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL ");
		
		Запрос.УстановитьПараметр("МассивОрганизаций1С"			   , МассивОрганизаций1С);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"		   , ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"  					   , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ПриглашенияДатаСтатусНеПодходит", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДиадокПриглашенияДатаСтатусНеПодходит"));
	
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции

	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.ИНН,
		|	ЯщикиОрганизаций.Значение КАК BoxID
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиОрганизаций
		|		ПО Организации.Ссылка = ЯщикиОрганизаций.Объект
		|			И (ЯщикиОрганизаций.Свойство = &ЯщикДиадокДляОрганизации)
		|			И (ЯщикиОрганизаций.Значение В (&BoxID))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.BoxID,
		|	ВложенныйЗапрос.Контрагент,
		|	СУММА(ВложенныйЗапрос.КоличествоДокументов) КАК КоличествоДокументов
		|ПОМЕСТИТЬ ВТ_СтатистикаДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Организации.BoxID КАК BoxID,
		|		Т.Контрагент КАК Контрагент,
		|		1 КАК КоличествоДокументов
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Организации.BoxID,
		|		Т.Контрагент,
		|		1
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Организации.BoxID,
		|		Т.Контрагент,
		|		1
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОбОказанииПроизводственныхУслуг КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.BoxID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Организации.BoxID,
		|	ВТ_Организации.ИНН
		|ПОМЕСТИТЬ ВТ_BoxID
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент1С,
		|	Контрагенты.Код КАК Контрагент1С_Код,
		|	Контрагенты.ИНН КАК Контрагент1С_ИНН,
		|	Контрагенты.КПП КАК Контрагент1С_КПП,
		|	ЕСТЬNULL(ЯщикиКонтрагентов.Значение, """") КАК КонтрагентЭДО_ID,
		|	ЕСТЬNULL(ВТ_СтатистикаДокументов.КоличествоДокументов, 0) КАК КоличествоДокументов,
		|	ВТ_BoxID.BoxID КАК ОрганизацияЭДО_ID,
		|	ВЫБОР
		|		КОГДА ЯщикиКонтрагентов.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Сопоставлен
		|ИЗ
		|	ВТ_BoxID КАК ВТ_BoxID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_BoxID.ИНН <> Контрагенты.ИНН
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатистикаДокументов КАК ВТ_СтатистикаДокументов
		|		ПО ВТ_BoxID.BoxID = ВТ_СтатистикаДокументов.BoxID
		|			И (Контрагенты.Ссылка = ВТ_СтатистикаДокументов.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО (Контрагенты.Ссылка = ЯщикиКонтрагентов.Объект)
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)");
		
		Запрос.УстановитьПараметр("BoxID"					, BoxID);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"	, ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"				, ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ЯщикДиадокДляОрганизации", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ЯщикДиадокДляОрганизации"));
																   
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
//{ Приглашение Контрагентов

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ВнешняяОбработкаПоGUID(GUID);
		
	КонецФункции

//} Внешние обработки

ВалютаРегламентированногоУчета = ПолучитьВалютуРегламентированногоУчета();