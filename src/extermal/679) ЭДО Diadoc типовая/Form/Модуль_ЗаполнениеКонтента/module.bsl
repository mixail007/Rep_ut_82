//{ ПРОЧЕЕ
	
	Функция СократитьПредставлениеТелефона(телефонСтрока) Экспорт 
		
		Если (стрДлина(телефонСтрока)<=20) или (найти(ТелефонСтрока, ";")=0)  Тогда 
			//резать нечего
			Возврат ТелефонСтрока
		КонецЕсли;	
		
		НовыйТелефон = "";
		СтарыйТелефон = ТелефонСтрока;
		пока найти(СтарыйТелефон, ";")>0 Цикл
			Если (НовыйТелефон="") или (СтрДлина(НовыйТелефон)+найти(СтарыйТелефон, ";")<=20) Тогда 
				//добавим кусок
				НовыйТелефон =?(НовыйТелефон="", "",  НовыйТелефон+";")+лев(СтарыйТелефон, найти(СтарыйТелефон, ";")-1);
				СтарыйТелефон = прав(СтарыйТелефон, СтрДлина(СтарыйТелефон) -  найти(СтарыйТелефон, ";"));
			Иначе 
				СтарыйТелефон = "";
			КонецЕсли;	
		КонецЦикла;	
		
		
		Возврат НовыйТелефон;
	КонецФункции
	
	Функция ПредставлениеТелефона(Знач Телефоны, ТипТелефона, Знач МаксимальнаяДлинаСтроки, Разделитель= ";") Экспорт
		
		ПозицияНачалаФакса= Найти(Телефоны, "факс:");
		
		Если ПозицияНачалаФакса > 0 Тогда
			
			Если ТипТелефона= "Телефон" Тогда
				Телефоны= Лев(Телефоны, ПозицияНачалаФакса - 1);
			ИначеЕсли ТипТелефона= "Факс" Тогда
				Телефоны= Сред(Телефоны, ПозицияНачалаФакса + 5);
			КонецЕсли;
			
		КонецЕсли;
		
		МассивПодстрок= ПреобразоватьСтрокуВМассивПодстрок(Телефоны, Разделитель, Истина, Истина);
		
		Результат=	  "";
		Разделитель1= "";
		
		Для Каждого Подстрока ИЗ МассивПодстрок Цикл
			
			МаксимальнаяДлинаСтроки= МаксимальнаяДлинаСтроки - СтрДлина(Подстрока);
			
			Если МаксимальнаяДлинаСтроки < 0 Тогда
				Прервать;
			КонецЕсли;
				
			Результат= Результат + Разделитель1 + Подстрока;
			
			Разделитель1= Разделитель;
			
			Если МаксимальнаяДлинаСтроки = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьТипДокумента(ДокументСсылка, НаименованиеТипа)
		Возврат (метаданные.Документы.Найти(наименованиеТипа)<>Неопределено)  и (ТипЗнч(ДокументСсылка)=тип("ДокументСсылка."+НаименованиеТипа));
	КонецФункции	
	
	Функция ВыделитьСлово(ИсходнаяСтрока)
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, " ");
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;
		
	КонецФункции
	
	Функция ПредставлениеВизирующего(ПараметрыПодписания, ИНН = Неопределено)  
		фио =  ПараметрыПодписания.ФиоПодписанта ;
		Official  = Новый Структура;
		Если ФИО = " " Тогда 
			Official.Вставить("Surname", " ");
			Official.Вставить("FirstName", " ");
			Official.Вставить("Patronymic", " ");
		Иначе 	 
			Official.Вставить("Surname", ВыделитьСлово(фио));
			Official.Вставить("FirstName", ВыделитьСлово(фио));
			Official.Вставить("Patronymic", ВыделитьСлово(фио));
		КонецЕсли;
		Official.Вставить("JobTitle" , ПараметрыПодписания.ДолжностьПодписанта);
		Если     ИНН <> Неопределено Тогда
			Official.Вставить("Inn" , ИНН);
		КонецЕсли;	
		Возврат   Official;
	КонецФункции 
	
	Функция УстановитьАдресКонтрагента(КонтрагентСсылка, Address) Экспорт 
		
		ВидКИ_ЮрАдрес = Модуль_ИнтеграцияОбщий.ПолучитьВидЮрАдресаКонтрагента();
		наб = регистрысведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		наб.Отбор.объект.установить(контрагентСсылка);
		наб.Отбор.Тип.установить(перечисления.ТипыКонтактнойИнформации.Адрес);
		наб.Отбор.Вид.установить(ВидКИ_ЮрАдрес);
		наб.Прочитать();
		
		Если наб.Количество()=0 Тогда 
			записьРегистра = наб.Добавить();
			записьРегистра.Объект 	= КонтрагентСсылка;
			записьРегистра.Тип		= перечисления.ТипыКонтактнойИнформации.Адрес;
			записьРегистра.Вид 		= ВидКИ_ЮрАдрес;
			ПредыдущийАдрес = "";
		Иначе 	  
			записьРегистра =наб[0];
			ПредыдущийАдрес = записьрегистра.Представление;
		КонецЕсли;	
		записьрегистра.Поле1 =  Address.ZipCode;
		записьрегистра.Поле2 =  НаименованиеРегиона(Address.RegionCode);
		записьрегистра.Поле3 =  Address.Territory;
		записьрегистра.Поле4 =  Address.City;
		записьрегистра.Поле5 =  Address.Locality;
		записьрегистра.Поле6 =  Address.Street;
		записьрегистра.Поле7 =  Address.Building;
		записьрегистра.Поле8 =  Address.Block;
		записьрегистра.Поле9 =  Address.Apartment;
		записьрегистра.Представление =  Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеАдресаДляДиадок(записьрегистра);
		
		
		наб.Записать();
		записьЖурналаРегистрации("Диадок.ОбновлениеАдреса", , , КонтрагентСсылка, ?(ПредыдущийАдрес = "", "Установлен юридический адрес:", "Юридический адрес заменен с "+ПредыдущийАдрес+" на: ")+записьрегистра.Представление);
	КонецФункции
	
	Функция ПолучитьВалютуРегламентированногоУчета()
		
		Если НЕ Метаданные.Константы.Найти("ВалютаРегламентированногоУчетаОрганизаций") = Неопределено Тогда
			возврат  Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
		Иначе
			возврат Константы.ВалютаРегламентированногоУчета.Получить();	
		КонецЕсли;
		
	КонецФункции
	
//} ПРОЧЕЕ

//{ ЗАПОЛНИТЬ КОНТЕНТ
	
	//{ КонтентXmlAcceptanceCertificate
		
		Процедура ЗаполнитьКонтентXmlAcceptanceCertificate(Content, ДокССылка, ПараметрыОтправкиНаСогласование=Неопределено, ДопСведения) Экспорт
			ДанныеДляФормированияАктаВыполненныхРабот =  ПолучитьДанныеДляФормированияТорг12(ДокССылка, Истина, Ложь);
			ЗаполнитьКонтентXmlAcceptanceCertificateПоДанным(Content, ДанныеДляФормированияАктаВыполненныхРабот, ПараметрыОтправкиНаСогласование, ДопСведения);
			
			ПослеЗаполненияКонтента("XmlAcceptanceCertificate", Content, ДанныеДляФормированияАктаВыполненныхРабот, ДокСсылка, "", ДопСведения, ПараметрыОтправкиНаСогласование);
            		
		КонецПроцедуры
		
		Процедура ЗаполнитьКонтентXmlAcceptanceCertificateПоДанным(Content,ДанныеДляФормированияАктаВыполненныхРабот, ПараметрыОтправкиНаСогласование=Неопределено, ДопСведения) 
			
			ДанныеШапки 				=  ДанныеДляФормированияАктаВыполненныхРабот.ДанныеШапки;
			БанковскийСчетОрганизации 	=  ДанныеДляФормированияАктаВыполненныхРабот.БанковскийСчетОрганизации;
			СтруктураДоговора 			=  ДанныеДляФормированияАктаВыполненныхРабот.СтруктураДоговора;
			ТаблицаТоваров 				=  ДанныеДляФормированияАктаВыполненныхРабот.ТаблицаТоваров;
			
			//поставщик: организация-продавец
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Seller, ДанныеШапки.Организация,  ДанныеШапки.Дата,  БанковскийСчетОрганизации, Истина);
			
			ПредставлениеИсполнителя = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеКонтрагентаДляАкта(ДанныеШапки.Организация, ДанныеШапки.Дата);
			ПредставлениеЗакзачика   = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеКонтрагентаДляАкта(ДанныеШапки.Контрагент, ДанныеШапки.Дата);
			
			
			НомерДоговора = ?(СтруктураДоговора.GroundNumber="",""," по договору № "+СтруктураДоговора.GroundNumber);
			ДатаДоговора = ?(СтруктураДоговора.GroundDate=Дата(1,1,1),""," от "+Формат(СтруктураДоговора.GroundDate,"ДФ=dd.MM.yyyy"));
			ДатаДоговора = ?((СтруктураДоговора.GroundNumber="" и СтруктураДоговора.GroundDate<>Дата(1,1,1))," по договору "+ДатаДоговора,ДатаДоговора); 
			
			текстАкта = "Мы, нижеподписавшиеся, представитель "+ПредставлениеИсполнителя+" (далее «Исполнитель»), с одной стороны, и представитель "+ПредставлениеЗакзачика+" (далее «Заказчик»), с другой стороны,"+
			" составили настоящий акт о том, что «Исполнитель» выполнил, а  «Заказчик» принял следующие работы (услуги)"+НомерДоговора+ДатаДоговора+":";
			
			
			//прочие реквизиты шапки	
			content.Number = ДанныеШапки.Номер;
			content.Date   = ДанныеШапки.Дата;
			content.Title  = текстАкта;

			ИдКонтрагента = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(ДанныеШапки.Контрагент);
			Модуль_Кастомизация = ПолучитьМодульПрог("Модуль_Кастомизация");
			
			Если НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) = Истина Тогда
				content.AdditionalInfo = СформироватьСтрокуДопИнфоПоШаблону(ДопСведения);
			Иначе
				content.AdditionalInfo = СформироватьСтрокуДопИнфо(ДопСведения,ДанныеШапки.Допинфо);	
			КонецЕсли;
			
			content.SignatureDate=	content.Date;
			
			Для каждого строкаТаблицы из ТаблицаТоваров цикл 
				Item =  content.items.Добавить();
				Если (ЗначениеЗаполнено(строкаТаблицы.Количество)=Ложь) или (ЗначениеЗаполнено( строкаТаблицы.КодЕдиницыИзмерения)=Ложь) или (ЗначениеЗаполнено( строкаТаблицы.Сумма)=Ложь)  Тогда 
					Item.Description=  строкаТаблицы.Номенклатура;	  
				Иначе 
					Item.Name= СтрокаТаблицы.Номенклатура;
				КонецЕсли;
								
				Если ЗначениеЗаполнено(СтрокаТаблицы.КодЕдиницыИзмерения) Тогда
					Item.UnitCode= ItemContent_UnitCode(СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.КодЕдиницыИзмерения);
					Если Item.UnitCode = "" И ЗначениеЗаполнено(Item.Name) Тогда
						Item.Description= 	Item.Name;
						Item.Name= 			Неопределено;	
					КонецЕсли;
				Иначе
					Item.UnitCode= "";
				КонецЕсли;
								
				Item.UnitName 	=  ?(ЗначениеЗаполнено(строкаТаблицы.ЕдиницаИзмерения), строкаТаблицы.ЕдиницаИзмерения.Наименование, "");
				Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
					Item.Quantity= СтрокаТаблицы.Количество;
				КонецЕсли;
				
				Item.Vat 		=  строкаТаблицы.СуммаНДС;
				Item.Total 		=  строкаТаблицы.Сумма + ?(строкаТаблицы.СуммаВключаетНДС, 0, строкаТаблицы.СуммаНДС) ;
				Item.TotalWithVatExcluded = Item.Total - Item.Vat;
				Item.Price 		=  ?(НЕ ЗначениеЗаполнено(item.Quantity), Неопределено, Окр(item.TotalWithVatExcluded/item.Quantity, 2));
								
				Если ЗначениеЗаполнено(item.Quantity) Тогда
					РасчетнаяЦена = окр(item.TotalWithVatExcluded/item.Quantity, 2);
					ОтклонениеОтРасчетной =  (РасчетнаяЦена-строкаТаблицы.Цена)*строкаТаблицы.Количество;
					Если (строкаТаблицы.СуммаВключаетНДС = Истина) или (макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной)>0.03)  Тогда
						item.price = РасчетнаяЦена;	
					Иначе
						item.price = строкаТаблицы.Цена;	
					КонецЕсли;
                Иначе 
					Item.Price   = неопределено
				КонецЕсли;
				
				Item.СсылкаНаЕИ =  строкаТаблицы.ЕдиницаИзмерения;
				Item.AdditionalInfo =  строкаТаблицы.ДопИнфо;
				
				Если Item.Total = 0 тогда 
					Item.Total 	=неопределено;
				КонецЕсли;
				Если  Item.TotalWithVatExcluded = 0 тогда 
					Item.TotalWithVatExcluded = неопределено
				КонецЕсли;
				Если  Item.Vat = 0 И СтрокаТаблицы.СтавкаНДС = "" Тогда
					Item.Vat = Неопределено;
				КонецЕсли;
				
				
			КонецЦикла;
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				Если ПараметрыОтправкиНаСогласование <> Неопределено И ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта) Тогда
					ЗаполнитьФИОПодписанта(content.Official, ПараметрыОтправкиНаСогласование.ФИОПодписанта);
					content.Official.JobTitle = СокрЛП(?(НЕ ПустаяСтрока(ПараметрыОтправкиНаСогласование.ДолжностьПодписанта), ПараметрыОтправкиНаСогласование.ДолжностьПодписанта, "_"));
				Иначе
					ПараметрыПодписания = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыПодписанияТ12вДиадок(ДанныеШапки.Организация);
					заполнитьПодписантаДляXmlTorg12(content.Official,  ПредставлениеВизирующего(параметрыПодписания));
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
	//} КонтентXmlAcceptanceCertificate

	//{ КонтентInvoice
		
		Функция ЗаполнитьКонтентInvoice(Content, ДокСсылка, ДопСведения, ПараметрыОтправкиНаСогласование, BoxID) Экспорт 
			Если ФормироватьСфНаОснованииРТУ() = Ложь Тогда
				ДанныеДляПечати= сформироватьДанныеДляФормированияСчетФактуры(ДокСсылка, Ложь);
			Иначе
			    ДанныеДляПечати= ПолучитьМодульПрог("Модуль_Кастомизация").СформироватьДанныеДляФормированияСчетФактурыПоРТУ(ДокСсылка, Ложь);
			КонецЕсли;
			ЗаполнитьКонтентInvoiceПоДаннымДляПечати(Content, ДанныеДляПечати, ДопСведения, ПараметрыОтправкиНаСогласование, BoxID);
			
			Если НЕ Content.Свойство("InvoiceRevisionNumber") = Неопределено
				И ЗначениеЗаполнено(Content.InvoiceRevisionNumber) = Истина Тогда
				
				ТипДокумента= "InvoiceRevision"; 
			Иначе
				ТипДокумента= "Invoice";
			КонецЕсли;
			
			ПослеЗаполненияКонтента(ТипДокумента, Content, ДанныеДляПечати, ДокСсылка, "", ДопСведения, ПараметрыОтправкиНаСогласование);
            			
		КонецФункции
		
		Функция ЗаполнитьКонтентInvoiceПоДаннымДляПечати(Content, ДанныеДляПечати, ДопСведения, ПараметрыОтправкиНаСогласование, boxID) Экспорт
			
			Content.Number 	= ДанныеДляПечати.НомераДляСФ.НомерДокумента;
			Content.Date 	= ДанныеДляПечати.НомераДляСФ.ДатаДокумента;
			Если ДанныеДляПечати.НомераДляСФ.ЭтоИСФ Тогда
				Content.InvoiceRevisionNumber 	= ДанныеДляПечати.НомераДляСФ.НомерИсправления;
				Content.InvoiceRevisionDate 	= ДанныеДляПечати.НомераДляСФ.ДатаИсправления;
			КонецЕсли;	
			
			Для каждого ПРД из ДанныеДляПечати.ДатаНомерДокументовОплаты Цикл 
				Стр = content.PaymentDocuments.Добавить();
				Стр.Number = ПРД.НомерПлатежноРасчетногоДокумента;
				Стр.date   = ПРД.ДатаПлатежноРасчетногоДокумента;
			КонецЦикла;	
			
			content.currency 		= ?(ПустаяСтрока(ДанныеДляПечати.ВалютаДокумента), "", Строка(ДанныеДляПечати.ВалютаДокумента.Код));
			content.ВалютаСсылка 	= ДанныеДляПечати.ВалютаДокумента;
			
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Buyer, ДанныеДляПечати.Контрагент, ДанныеДляПечати.Дата, , Истина, Истина);
			Если ЗначениеЗаполнено(ДанныеДляПечати.КПППокупателя) Тогда
				Content.Buyer.kpp = ДанныеДляПечати.КПППокупателя
			КонецЕсли;	
			
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Seller, ДанныеДляПечати.Организация, ДанныеДляПечати.Дата, , Истина, Истина);
			
			Попытка
				Если НЕ ДанныеДляПечати.Свойство("Поставщик") // Если есть свойство "Поставщик", значит Грузоотправитель уже обработан
					И ДанныеДляПечати.Организация <> Content.Seller.Ссылка Тогда
					
					//значит ДанныеДляПечати.Организация является подразделением Content.Seller.Ссылка 
					ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Организация;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда 
				Content.Shipper.SameAsSellerOrBuyer = Истина;
			ИначеЕсли ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель) Тогда  
				Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктуруГрузоПолучателяОтправителя(Content.Shipper, ДанныеДляПечати.Грузоотправитель, ДанныеДляПечати.Дата); 
			Иначе 
				Content.Shipper.SameAsSellerOrBuyer = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель) Тогда
				Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктуруГрузоПолучателяОтправителя(Content.Consignee, ДанныеДляПечати.Грузополучатель, ДанныеДляПечати.Дата, ДанныеДляПечати.АдресДоставки); 
				Если ЗначениеЗаполнено(ДанныеДляПечати.АдресДоставки) Тогда
					ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ЗаполнитьСтруктуруАдреса(Content.Consignee.Address, ДанныеДляПечати.Контрагент,, ДанныеДляПечати.АдресДоставки);
				КонецЕсли;
			Иначе 
				Content.Consignee.SameAsSellerOrBuyer = Ложь;
			КонецЕсли;
			
			Content.StructedAdditionalInfos = ДанныеДляПечати.ДопИнфо;
			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Дополнить_StructedAdditionalInfos_ДопСведениями(Content.StructedAdditionalInfos, ДопСведения);
						
			Vat = Неопределено;
			TotalWithVatExcluded = 0;
			Total = 0;
			
			Для каждого Стр из ДанныеДляПечати.ТабличнаяЧасть Цикл
				
				item = content.items.Добавить();
				
				item.Product = Стр.Номенклатура;
				
				Если Стр.Количество = 0 ИЛИ ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) = Ложь Тогда
					item.UnitCode 				= Неопределено;
					item.ЕдиницаИзмеренияСсылка = Неопределено;
					item.Quantity 				= Неопределено;
				Иначе
					
					Если ЗначениеЗаполнено(Стр.ЕдиницаИзмерения) Тогда
						item.UnitCode = ItemContent_UnitCode(Стр.ЕдиницаИзмерения, Стр.КодЕдиницыИзмерения);
					Иначе
						item.UnitCode = "";
					КонецЕсли;
										
					item.ЕдиницаИзмеренияСсылка = Стр.ЕдиницаИзмерения;
					item.Quantity 				= Стр.Количество;
				КонецЕсли;
				
				Если ДанныеДляПечати.СФНаАванс = Ложь Тогда 
					
					item.TotalWithVatExcluded = Стр.Сумма - ?(Стр.СуммаВключаетНДС, Стр.суммаНДС, 0);
					
					Если ЗначениеЗаполнено(item.Quantity) Тогда
						
						РасчетнаяЦена = Окр(item.TotalWithVatExcluded/item.Quantity, 2);
						ОтклонениеОтРасчетной = (РасчетнаяЦена - Стр.Цена) * Стр.Количество;
						Если Стр.СуммаВключаетНДС = Истина ИЛИ Макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной) > 0.03 Тогда
							item.price = РасчетнаяЦена;	
						Иначе
							item.price = Стр.Цена;	
						КонецЕсли;
						
					Иначе
						item.price = Неопределено;	
					КонецЕсли;
				КонецЕсли;	
				
				Item.Vat						= ?(Стр.СтавкаНДС = "без НДС", Неопределено, Стр.СуммаНДС);
				Item.Total						= Стр.Сумма + ?(Стр.СуммаВключаетНДС, 0, Стр.СуммаНДС);
				Item.TaxRate               		= Стр.СтавкаНДС;
				Item.CountriesOfOrigin  		= ?(ЗначениеЗаполнено(Стр.СтранаПроисхождения), СокрЛП(Стр.СтранаПроисхождения.Код), "");
				Item.СтранаПроисхожденияСсылка 	= ?(ЗначениеЗаполнено(Стр.СтранаПроисхождения), Стр.СтранаПроисхождения, Справочники.КлассификаторСтранМира.ПустаяСсылка());
				Item.CustomsDeclarationNumbers 	= Модуль_ИнтеграцияОбщий.ПолучитьНомерГТД(Стр.НомерГТД);
				
				// считаем итог по ндс так, чтобы если во всех строказ суммаНДС=неопределено, то и итог по суммеНДС = неопределено
				Если Item.Vat <> Неопределено Тогда 
					Vat = ?(Vat = Неопределено, 0, Vat) + Item.Vat;
				КонецЕсли;	
				
				TotalWithVatExcluded 	= TotalWithVatExcluded  + ?(Item.TotalWithVatExcluded = Неопределено, 0, Item.TotalWithVatExcluded);
				Total 					= Total 				+ Item.Total;
				
			КонецЦикла;	

			Для каждого Item из content.items Цикл
				Item.StructedAdditionalInfos = Новый Массив;
			КонецЦикла;
			
			//заполняем итоги
			Content.Totals.Vat 					= Vat;
			Content.Totals.TotalWithVatExcluded = TotalWithVatExcluded;
			Content.Totals.Total 				= Total;
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				Подписант  	= Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(BoxId);
				стПодписант = СформироватьПараметрыПодписанта(Подписант);
				
				Если ПараметрыОтправкиНаСогласование <> Неопределено И ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта) Тогда
					ЗаполнитьФИОПодписанта(Content.Signer, ПараметрыОтправкиНаСогласование.ФИОПодписанта);
				Иначе
					Content.Signer.Surname 		= стПодписант.ПодписантФамилия;
					Content.Signer.FirstName 	= стПодписант.ПодписантИмя;
					Content.Signer.Patronymic 	= стПодписант.ПодписантОтчество;
				КонецЕсли;
				
				Content.Signer.Inn 										= Content.seller.inn;
				Content.Signer.IsSoleProprietor							= Content.seller.IsSoleProprietor;
				Content.Signer.SoleProprietorRegistrationCertificate 	= ДанныеДляПечати.ДатаНомерСвидетельстваОРегистрации;	
			КонецЕсли;
			
		КонецФункции	
		
	//} КонтентInvoice

	//{ КонтентInvoiceCorrection
		
		Функция ЗаполнитьКонтентInvoiceCorrection(Content, ДокСсылка, ПараметрыОтправкиНаСогласование, ДопСведения) Экспорт 
			
			ДанныеДляПечати = сформироватьДанныеДляФормированияСчетФактуры(ДокСсылка, Истина);
			ЗаполнитьКонтентInvoiceCorrectionПоДаннымДляПечати(Content, ДанныеДляПечати, ПараметрыОтправкиНаСогласование, ДопСведения);
			
			ПослеЗаполненияКонтента("InvoiceCorrection", Content, ДанныеДляПечати, ДокСсылка, "", ДопСведения, ПараметрыОтправкиНаСогласование);
            			
		КонецФункции
		
		Функция ЗаполнитьКонтентInvoiceCorrectionПоДаннымДляПечати(Content, ДанныеДляПечати, ПараметрыОтправкиНаСогласование, ДопСведения)
			
			Content.InvoiceCorrectionNumber = ДанныеДляПечати.НомераДляКСФ.НомерКСФ;
			Content.InvoiceCorrectionDate   = ДанныеДляПечати.НомераДляКСФ.ДатаКСФ;
			
			Если ДанныеДляПечати.НомераДляКСФ.ЭтоИКСФ = Истина Тогда 
				//это ксф с исправлением
				Content.InvoiceCorrectionRevisionNumber = ДанныеДляПечати.НомераДляКСФ.НомерИКСФ;
				Content.InvoiceCorrectionRevisionDate   = ДанныеДляПечати.НомераДляКСФ.ДатаИКСФ;
			КонецЕсли;
			
			//укажем данные на оригинальную счф
			OriginalInvoices = Новый Структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber");
			
			OriginalInvoices.Date	= ДанныеДляПечати.НомераДляКСФ.ДатаИсходногоДокумента;
			OriginalInvoices.Number = ДанныеДляПечати.НомераДляКСФ.НомерИсходногоДокумента;
			Если ДанныеДляПечати.НомераДляКСФ.УчитыватьИсправлениеИсходногоДокумента Тогда 
				OriginalInvoices.InvoiceRevisionNumber	= формат(ДанныеДляПечати.НомераДляКСФ.НомерИсправленияИсходногоДокумента, "ЧДЦ=0; ЧГ=0");
				OriginalInvoices.InvoiceRevisionDate	= ДанныеДляПечати.НомераДляКСФ.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Content.OriginalInvoices.Добавить(OriginalInvoices);			
						
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Buyer, ДанныеДляПечати.Контрагент, ДанныеДляПечати.Дата, , Истина, Истина);
			Если ЗначениеЗаполнено(ДанныеДляПечати.КПППокупателя) Тогда
				Content.Buyer.kpp = ДанныеДляПечати.КПППокупателя;
			КонецЕсли;	
			
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Seller, ДанныеДляПечати.Организация, ДанныеДляПечати.Дата, , Истина, Истина);
			
			content.currency 		= ?(ПустаяСтрока(ДанныеДляПечати.ВалютаДокумента), "", Строка(ДанныеДляПечати.ВалютаДокумента.Код));
			content.ВалютаСсылка 	= ДанныеДляПечати.ВалютаДокумента;
						
			Content.StructedAdditionalInfos = ДанныеДляПечати.ДопИнфо;
			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Дополнить_StructedAdditionalInfos_ДопСведениями(Content.StructedAdditionalInfos, ДопСведения);
			
			Content.TotalsDec.Total 				= Неопределено;
			Content.TotalsDec.TotalWithVatExcluded 	= Неопределено;
			Content.TotalsDec.Vat 					= Неопределено;
			
			Content.TotalsInc.Total 				= Неопределено;
			Content.TotalsInc.TotalWithVatExcluded 	= Неопределено;
			Content.TotalsInc.Vat 					= Неопределено;
			
			Для Каждого СтрокаДанных из ДанныеДляпечати.ТабличнаяЧасть Цикл 
				
				Item = content.items.Добавить();
				item.StructedAdditionalInfos = СтрокаДанных.ДопИнфо;
				Item.AmountsDec 			 = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AmountsDiff();
				Item.AmountsInc 			 = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AmountsDiff();
				Item.OriginalValues 		 = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceItemFields();
				Item.CorrectedValues 		 = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceItemFields();
				
				Item.Product = СтрокаДанных.Номенклатура;
				
				Если СтрокаДанных.количествоДоИзменения = 0 И СтрокаДанных.количество = 0 Тогда
					Item.OriginalValues.UnitCode  = "";
					Item.CorrectedValues.UnitCode = "";
					
					Item.OriginalValues.ЕдиницаИзмеренияСсылка 	= Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
					Item.CorrectedValues.ЕдиницаИзмеренияСсылка = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмеренияДоИзменения) Тогда
						Item.OriginalValues.UnitCode = ItemContent_UnitCode(СтрокаДанных.ЕдиницаИзмеренияДоИзменения, СтрокаДанных.КодЕдиницыИзмеренияДоИзменения);
					Иначе
						Item.OriginalValues.UnitCode = "";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения) Тогда
						Item.CorrectedValues.UnitCode = ItemContent_UnitCode(СтрокаДанных.ЕдиницаИзмерения, СтрокаДанных.КодЕдиницыИзмерения);
					Иначе
						Item.CorrectedValues.UnitCode = "";
					КонецЕсли;
										
					Item.OriginalValues.ЕдиницаИзмеренияСсылка 	= СтрокаДанных.ЕдиницаИзмеренияДоИзменения;
					Item.CorrectedValues.ЕдиницаИзмеренияСсылка = СтрокаДанных.ЕдиницаИзмерения;
				КонецЕсли;
				
				Если СтрокаДанных.КоличествоДоИзменения <> 0 Тогда
					Item.OriginalValues.Quantity = ?(ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмеренияДоИзменения), СтрокаДанных.КоличествоДоИзменения, Неопределено);
				Иначе
				    Item.OriginalValues.Quantity = Неопределено;
				КонецЕсли;
				
				Если СтрокаДанных.Количество <> 0 Тогда
					Item.CorrectedValues.Quantity = ?(ЗначениеЗаполнено(СтрокаДанных.ЕдиницаИзмерения), СтрокаДанных.Количество, Неопределено);
				ИначеЕсли  ЗначениеЗаполнено(Item.OriginalValues.Quantity) Тогда 
					//если до количество было, а теперь его не стало - заполняем 0 а не "-"!!!
					Item.CorrectedValues.Quantity = 0;
				Иначе	
				    Item.CorrectedValues.Quantity = Неопределено;
				КонецЕсли;

				Item.OriginalValues.TotalWithVatExcluded  = СтрокаДанных.СуммаДоИзменения - ?(СтрокаДанных.СуммаВключаетНДС, СтрокаДанных.СуммаНДСДоИзменения, 0);
				Item.CorrectedValues.TotalWithVatExcluded = СтрокаДанных.Сумма - ?(СтрокаДанных.СуммаВключаетНДС, СтрокаДанных.суммаНДС, 0);
				
				Item.OriginalValues.Price  = ?(НЕ ЗначениеЗаполнено(Item.OriginalValues.Quantity), Неопределено, Окр(Item.OriginalValues.TotalWithVatExcluded / Item.OriginalValues.Quantity, 2));
				Item.CorrectedValues.Price = ?(НЕ ЗначениеЗаполнено(Item.CorrectedValues.Quantity), Неопределено, Окр(Item.CorrectedValues.TotalWithVatExcluded / Item.CorrectedValues.Quantity, 2));
				
				Item.OriginalValues.TaxRate    = ?(ЗначениеЗаполнено(СтрокаДанных.СтавкаНДСДоИзменения) = Истина, СтрокаДанных.СтавкаНДСДоИзменения, СтрокаДанных.СтавкаНДС);
				Item.CorrectedValues.TaxRate   = СтрокаДанных.СтавкаНДС;
				
				
				Item.OriginalValues.Vat  = ?(Item.OriginalValues.TaxRate = "без НДС", Неопределено, СтрокаДанных.СуммаНДСДоИзменения);
				Item.CorrectedValues.Vat = ?(Item.CorrectedValues.TaxRate = "без НДС", Неопределено, СтрокаДанных.СуммаНДС);
				
				Item.OriginalValues.Total   = СтрокаДанных.СуммаДоИзменения + ?(СтрокаДанных.СуммаВключаетНДС, 0, СтрокаДанных.СуммаНДСДоИзменения);
				Item.CorrectedValues.Total  = СтрокаДанных.Сумма + ?(СтрокаДанных.СуммаВключаетНДС, 0, СтрокаДанных.СуммаНДС);
				
				Если Item.OriginalValues.TotalWithVatExcluded < Item.CorrectedValues.TotalWithVatExcluded Тогда 
					Item.AmountsInc.TotalWithVatExcluded = Item.CorrectedValues.TotalWithVatExcluded - Item.OriginalValues.TotalWithVatExcluded;
					Item.AmountsDec.TotalWithVatExcluded = 0;
				Иначе 
					Item.AmountsInc.TotalWithVatExcluded = 0; 
					Item.AmountsDec.TotalWithVatExcluded = - Item.CorrectedValues.TotalWithVatExcluded + Item.OriginalValues.TotalWithVatExcluded
				КонецЕсли;
				
				СуммаНДСДо    = ?(Item.OriginalValues.Vat = Неопределено, 0, Item.OriginalValues.Vat);
				СуммаНДСПосле = ?(Item.CorrectedValues.Vat = Неопределено, 0, Item.CorrectedValues.Vat);
				
				Если Item.OriginalValues.Vat = Неопределено И Item.CorrectedValues.Vat = Неопределено Тогда 
					Item.AmountsInc.Vat = Неопределено;
					Item.AmountsDec.Vat = Неопределено; 
				ИначеЕсли СуммаНДСДо < СуммаНДСПосле Тогда 
					Item.AmountsInc.Vat = СуммаНДСПосле - СуммаНДСДо;
					Item.AmountsDec.Vat = 0; 
				Иначе 
					Item.AmountsInc.Vat = 0;
					Item.AmountsDec.Vat = - СуммаНДСПосле + СуммаНДСДо;
				КонецЕсли;
				
				Если Item.OriginalValues.Total < Item.CorrectedValues.Total Тогда 
					Item.AmountsInc.Total = Item.CorrectedValues.Total - Item.OriginalValues.Total;
					Item.AmountsDec.Total = 0;
				Иначе 
					Item.AmountsInc.Total = 0;
					Item.AmountsDec.Total = - Item.CorrectedValues.Total + Item.OriginalValues.Total;
				КонецЕсли;
				
				Если Item.AmountsDec.TotalWithVatExcluded <> 0 Тогда 
					Content.TotalsDec.TotalWithVatExcluded = ПривестиКЧислу(Content.TotalsDec.TotalWithVatExcluded) + Item.AmountsDec.TotalWithVatExcluded; 
				КонецЕсли;	
				Если ПривестиКЧислу(Item.AmountsDec.Vat) <> 0 Тогда
					Content.TotalsDec.Vat = ПривестиКЧислу(Content.TotalsDec.Vat) + Item.AmountsDec.Vat; 
				КонецЕсли;	
				Если Item.AmountsDec.Total <> 0 Тогда 
					Content.TotalsDec.Total	= ПривестиКЧислу(Content.TotalsDec.Total) + Item.AmountsDec.Total; 
				КонецЕсли;	
				
				Если Item.AmountsInc.TotalWithVatExcluded <> 0 Тогда 
					Content.TotalsInc.TotalWithVatExcluded = ПривестиКЧислу(Content.TotalsInc.TotalWithVatExcluded) + Item.AmountsInc.TotalWithVatExcluded; 
				КонецЕсли;	
				Если ПривестиКЧислу(Item.AmountsInc.Vat) <> 0 Тогда 
					Content.TotalsInc.Vat = ПривестиКЧислу(Content.TotalsInc.Vat)+ Item.AmountsInc.Vat; 
				КонецЕсли;	
				Если Item.AmountsInc.Total <> 0 Тогда 
					Content.TotalsInc.Total = ПривестиКЧислу(Content.TotalsInc.Total) + Item.AmountsInc.Total; 
				КонецЕсли;	
			Конеццикла;	  
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				
				BoxId= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(ДанныеДляПечати.Организация);
				Подписант = Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(BoxId);
				
				стПодписант = СформироватьПараметрыПодписанта(Подписант);
				
				Если ПараметрыОтправкиНаСогласование <> Неопределено И ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта) Тогда
					ЗаполнитьФИОПодписанта(Content.Signer, ПараметрыОтправкиНаСогласование.ФИОПодписанта);
				Иначе
					Content.Signer.Surname 		= стПодписант.ПодписантФамилия;
					Content.Signer.FirstName 	= стПодписант.ПодписантИмя;
					Content.Signer.Patronymic 	= стПодписант.ПодписантОтчество;
				КонецЕсли;
				
				Content.Signer.Inn = Content.seller.inn;
				Content.Signer.IsSoleProprietor	= Content.seller.IsSoleProprietor;
				Content.Signer.SoleProprietorRegistrationCertificate = ДанныеДляПечати.ДатаНомерСвидетельстваОРегистрации;
				
			КонецЕсли;
			
		КонецФункции	
		
		
		Функция ПривестиКЧислу(н)
			
			возврат ?(н=неопределено, 0, н);
			
		КонецФункции
		
	//} КонтентInvoiceCorrection
	
	//{ КонтентXmlTorg12
		
		Процедура ЗаполнитьКонтентXmlTorg12(Content, ДокССылка, НомерЗаказа="", ДопСведения,  ПараметрыОтправкиНаСогласование=Неопределено) Экспорт
		
			ДанныеДляФормированияТорг12=  ПолучитьДанныеДляФормированияТорг12(ДокССылка, Ложь, Ложь);
			ЗаполнитьКонтентXmlTorg12ПоДанным(Content, ДанныеДляФормированияТорг12, НомерЗаказа, ДопСведения,  ПараметрыОтправкиНаСогласование);	
			
			ПослеЗаполненияКонтента("XmlTorg12", Content, ДанныеДляФормированияТорг12, ДокСсылка, НомерЗаказа, ДопСведения, ПараметрыОтправкиНаСогласование);
            			
		КонецПроцедуры
		
		Процедура ЗаполнитьКонтентXmlTorg12ПоДанным(Content, ДанныеДляФормированияТорг12, НомерЗаказа="", ДопСведения,  ПараметрыОтправкиНаСогласование=Неопределено)	
			
			ДанныеШапки 				=  ДанныеДляФормированияТорг12.ДанныеШапки;
			БанковскийСчетОрганизации 	=  ДанныеДляФормированияТорг12.БанковскийСчетОрганизации;
			СтруктураДоговора 			=  ДанныеДляФормированияТорг12.СтруктураДоговора;
			ТаблицаТоваров 				=  ДанныеДляФормированияТорг12.ТаблицаТоваров;
			
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Seller, ДанныеШапки.Организация,  ДанныеШапки.Дата,  БанковскийСчетОрганизации , Истина);
			
			ГрузоотправительССылка = ?( (ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)=Ложь) или (ДанныеШапки.Грузоотправитель="он же"),  ДанныеШапки.Организация, ДанныеШапки.Грузоотправитель);
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Shipper, ГрузоотправительССылка, ДанныеШапки.Дата, , Ложь);
			
			Content.ShipperDepartment =  ДанныеШапки.Подразделение;
			
			ГрузополучательСсылка = ?(ЗначениеЗаполнено(ДанныеШапки.Грузополучатель), ДанныеШапки.Грузополучатель, ДанныеШапки.Контрагент);
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Consignee,  ГрузополучательСсылка, ДанныеШапки.Дата, , Ложь,, ДанныеШапки.АдресДоставки);
			
			Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Buyer, ДанныеШапки.Контрагент, ДанныеШапки.Дата, , Истина);
			
			Если ЗначениеЗаполнено(НомерЗаказа) Тогда 
				content.GroundName 		= "Заказ";
				content.GroundNumber 	= СокрЛП(НомерЗаказа);
			Иначе	
				content.GroundName 		= СтруктураДоговора.GroundName;
				content.GroundDate 		= СтруктураДоговора.GroundDate;
				content.GroundNumber 	= СтруктураДоговора.GroundNumber;
			КонецЕсли;	
			content.Number =  ДанныеШапки.Номер;
			content.Date   = ДанныеШапки.Дата;
			
			ИдКонтрагента = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(ДанныеШапки.Контрагент);
			//Модуль_Кастомизация = ПолучитьМодульПрог("Модуль_Кастомизация");
			
			Если НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) = Истина Тогда
				content.AdditionalInfo = СформироватьСтрокуДопИнфоПоШаблону(ДопСведения);
			Иначе
				content.AdditionalInfo = СформироватьСтрокуДопИнфо(ДопСведения,ДанныеШапки.Допинфо);	
			КонецЕсли;
						
			TotalParcelsQuantity 	= 0;
			TotalGrossQuantity 		= 0;
			TotalMassQuantity		= 0;
			TotalWithVatExcluded 	= 0;
			Total 					= 0;
			Vat 					= 0;
			
			
			Для каждого строкаТаблицы из ТаблицаТоваров цикл 
				
				XmlTorg12ItemContent= content.items.добавить();
				
				XmlTorg12ItemContent.Product=  		СтрокаТаблицы.Номенклатура;
				XmlTorg12ItemContent.ProductCode=	СтрокаТаблицы.КодНоменклатуры;
				XmlTorg12ItemContent.UnitCode=		ItemContent_UnitCode(СтрокаТаблицы.ЕдиницаИзмерения, СтрокаТаблицы.КодЕдиницыИзмерения);
				XmlTorg12ItemContent.UnitName=		СтрокаТаблицы.ЕдиницаИзмерения.Наименование;
				XmlTorg12ItemContent.Quantity=  	СтрокаТаблицы.Количество;
				XmlTorg12ItemContent.TaxRate=		СтрокаТаблицы.СтавкаНДС;
				XmlTorg12ItemContent.Vat=			СтрокаТаблицы.СуммаНДС;
				XmlTorg12ItemContent.Total=			СтрокаТаблицы.Сумма + ?(СтрокаТаблицы.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) ;
				XmlTorg12ItemContent.TotalWithVatExcluded= XmlTorg12ItemContent.Total - XmlTorg12ItemContent.Vat;
				
				РасчетнаяЦена = Окр(XmlTorg12ItemContent.TotalWithVatExcluded / ?(XmlTorg12ItemContent.Quantity=0,1,XmlTorg12ItemContent.Quantity),2);
				ОтклонениеОтРасчетной =  (РасчетнаяЦена-СтрокаТаблицы.Цена)*СтрокаТаблицы.Количество;
				
				Если (СтрокаТаблицы.СуммаВключаетНДС = Истина) или (  макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной)>0.03)  Тогда
					XmlTorg12ItemContent.Price = РасчетнаяЦена ;	
				Иначе
					XmlTorg12ItemContent.Price = СтрокаТаблицы.Цена;
				КонецЕсли;
				
				XmlTorg12ItemContent.СсылкаНаЕИ 	=  строкаТаблицы.ЕдиницаИзмерения;
				XmlTorg12ItemContent.AdditionalInfo =  строкаТаблицы.ДопИнфо;
								
				Если ЗначениеЗаполнено(строкаТаблицы.КоличествоМест) Тогда
					XmlTorg12ItemContent.ParcelsQuantity =  строкаТаблицы.КоличествоМест;
					XmlTorg12ItemContent.ParcelCapacity  =  строкаТаблицы.КоличествоВОдномМесте;
					XmlTorg12ItemContent.ParcelType      =  ?(ЗначениеЗаполнено(строкаТаблицы.ВидУпаковки), строкаТаблицы.ВидУпаковки.Наименование, "");
					XmlTorg12ItemContent.GrossQuantity   =  строкаТаблицы.Масса;
					TotalGrossQuantity      = TotalGrossQuantity + ?(ЗначениеЗаполнено(XmlTorg12ItemContent.GrossQuantity), XmlTorg12ItemContent.GrossQuantity, 0);
					TotalParcelsQuantity = TotalParcelsQuantity + XmlTorg12ItemContent.ParcelsQuantity;
				КонецЕсли;	
				
				TotalMassQuantity	 	= TotalMassQuantity+XmlTorg12ItemContent.Quantity;
				TotalWithVatExcluded 	= TotalWithVatExcluded+XmlTorg12ItemContent.TotalWithVatExcluded;
				Total 					= Total+XmlTorg12ItemContent.Total;
				Vat 					= Vat+XmlTorg12ItemContent.Vat;
				
			КонецЦикла;
			content.Totals.ParcelsQuantity 			= TotalParcelsQuantity;
			content.Totals.GrossQuantity 			= TotalGrossQuantity;
			content.Totals.Quantity 				= TotalMassQuantity;
			content.Totals.TotalWithVatExcluded 	= TotalWithVatExcluded;
			content.Totals.Total 					= Total;
			content.Totals.Vat 						= Vat;
			//content.Commons.TotalGrossQuantity      = content.Totals.GrossQuantity;
			//content.Commons.TotalQuantity      		= content.Totals.Quantity;
			
			content.SupplyDate 						= content.Date; 
			
			Content.commons.TotalSumInWords =   Модуль_ИнтеграцияОбщий.ПолучитьСуммуПрописьюДиадок(Total,  ПолучитьВалютуРегламентированногоУчета() );
			Если ЗначениеЗаполнено(TotalParcelsQuantity) Тогда
				Content.commons.TotalParcelsQuantityInWords = стрзаменить(числоПрописью(TotalParcelsQuantity, "ДП = Ложь"), "  00", "");
			КонецЕсли;	
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				
				Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
					
					ПараметрыПодписания = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыПодписанияТ12вДиадок(ДанныеШапки.Организация);
				Иначе
					
					ПараметрыПодписания = Новый Структура;
					
					ПараметрыПодписания.Вставить("СпособПодписания", ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваСпособПодписанияТ12()));
					
					Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта) Тогда
						ПараметрыПодписания.Вставить("ФИОПодписанта"	  , ПараметрыОтправкиНаСогласование.ФИОПодписанта);
						ПараметрыПодписания.Вставить("ДолжностьПодписанта", ?(НЕ ПустаяСтрока(ПараметрыОтправкиНаСогласование.ДолжностьПодписанта), ПараметрыОтправкиНаСогласование.ДолжностьПодписанта, "_"));
					Иначе
						ПараметрыПодписания.Вставить("ФИОПодписанта"	  , ПараметрыОтправкиНаСогласование.ФИОПолучателя);
						ПараметрыПодписания.Вставить("ДолжностьПодписанта", ?(НЕ ПустаяСтрока(ПараметрыОтправкиНаСогласование.ДолжностьПолучателя), ПараметрыОтправкиНаСогласование.ДолжностьПолучателя, "_"));
					КонецЕсли;
				КонецЕсли;
				
				Если ПараметрыПодписания.СпособПодписания="3" или ПараметрыПодписания.СпособПодписания="4" Тогда
					заполнитьПодписантаДляXmlTorg12(content.SupplyPerformedBy,  ПредставлениеВизирующего(ПараметрыПодписания));
				КонецЕсли;	
				Если (ПараметрыПодписания.СпособПодписания<>"2") и (ПараметрыПодписания.СпособПодписания<>"3") Тогда 
					заполнитьПодписантаДляXmlTorg12(content.SupplyAllowedBy,  ПредставлениеВизирующего(ПараметрыПодписания));
				КонецЕсли;
				Если ПараметрыПодписания.СпособПодписания="2" или ПараметрыПодписания.СпособПодписания="4" Тогда 
					ПараметрыПодписания.ДолжностьПодписанта = "Главный (старший) бухгалтер";
					заполнитьПодписантаДляXmlTorg12(content.ChiefAccountant,  ПредставлениеВизирующего(ПараметрыПодписания));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
	//} КонтентXmlTorg12
	
	//{ КонтентUTDSellerContent
	
		Процедура ЗаполнитьКонтентUTDSellerContent(Content, ДокументСсылка, ДопПараметры) Экспорт
			
			СтруктураДокумента = ДанныеДляФормированияУПД(ДокументСсылка, ДопПараметры);
			
			ЗаполнитьКонтентUTDSellerContentПоДанным(Content, СтруктураДокумента, ДопПараметры);	
			
			ПослеЗаполненияКонтента("UniversalTransferDocument", Content, СтруктураДокумента, ДокументСсылка, "", ДопПараметры.ДопСведения, ?(ДопПараметры.Свойство("ПараметрыСогласования"), ДопПараметры.ПараметрыСогласования, Неопределено));
			
		КонецПроцедуры
		
		Процедура ЗаполнитьКонтентUTDSellerContentПоДанным(СтруктураКонтента, СтруктураДокумента, ДопПараметры)
			
			ДанныеШапки = СтруктураДокумента.ДанныеШапки;
			
			Если ДанныеШапки.Свойство("СчетФактураСсылка") Тогда
				СтруктураКонтента.СчетФактураСсылка = ДанныеШапки.СчетФактураСсылка;
			КонецЕсли;
			
			Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Seller, ДанныеШапки.Организация,  ДанныеШапки.Дата, Истина, ДанныеШапки.БанковскийСчетОрганизации);
			
			Если ДопПараметры.Свойство("Отправитель_FnsParticipantId") Тогда
				СтруктураКонтента.Seller.FnsParticipantId = ДопПараметры.Отправитель_FnsParticipantId;
			КонецЕсли;
			
			Если ДанныеШапки.СодержитТовары Тогда
				
				СтруктураКонтента.Shipper.SameAsSeller = НЕ ДанныеШапки.Свойство("Грузоотправитель") ИЛИ НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель) ИЛИ НРег(ДанныеШапки.Грузоотправитель) = "он же";
				
				ГрузоотправительССылка = ?(СтруктураКонтента.Shipper.SameAsSeller,  ДанныеШапки.Организация, ДанныеШапки.Грузоотправитель);
				Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Shipper.OrganizationInfo, ГрузоотправительССылка, ДанныеШапки.Дата, Ложь);
			
				ГрузополучательСсылка = ?(ЗначениеЗаполнено(ДанныеШапки.Грузополучатель), ДанныеШапки.Грузополучатель, ДанныеШапки.Контрагент);
				Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Consignee,  ГрузополучательСсылка, ДанныеШапки.Дата, Ложь,, ДанныеШапки.АдресДоставки);
				
			КонецЕсли;
			
			Если ДанныеШапки.Свойство("Агент") И ЗначениеЗаполнено(ДанныеШапки.Агент) Тогда
				
				ДанныеCreator = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_ExtendedOrganizationInfo();
				Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(ДанныеCreator, ДанныеШапки.Агент, ДанныеШапки.Дата, Истина);
				
				СтруктураКонтента.Creator = ДанныеCreator.Name + ", " + ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").СформироватьПредставлениеИННКПП(ДанныеCreator.Inn, ДанныеCreator.Kpp);
				СтруктураКонтента.CreatorBase = Строка(ДанныеШапки.ДоговорАгента);
				
			Иначе
				СтруктураКонтента.Creator = СтруктураКонтента.Seller.Name + ", ИНН/КПП: " + ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПредставлениеИННКПП(СтруктураКонтента.Seller);
			КонецЕсли;
			
			Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Buyer, ДанныеШапки.Контрагент, ДанныеШапки.Дата, Истина);
			
			Если ДопПараметры.Свойство("Получатель_FnsParticipantId") Тогда
				СтруктураКонтента.Buyer.FnsParticipantId = ДопПараметры.Получатель_FnsParticipantId;
			КонецЕсли;
			
			Если ДанныеШапки.Свойство("КПППокупателя") И ЗначениеЗаполнено(ДанныеШапки.КПППокупателя) Тогда
				СтруктураКонтента.Buyer.kpp = ДанныеШапки.КПППокупателя;
			КонецЕсли;
			
			СтруктураКонтента.Function = ДанныеШапки.Функция;
			СтруктураКонтента.Number =  ДанныеШапки.Номер;
			СтруктураКонтента.Date   = ДанныеШапки.Дата;
			
			Если ДанныеШапки.Свойство("НомераДляСФ") Тогда
				Если ДанныеШапки.НомераДляСФ.ЭтоИСФ Тогда
					СтруктураКонтента.RevisionNumber =  ДанныеШапки.НомераДляСФ.НомерИсправления;
					СтруктураКонтента.RevisionDate   = ДанныеШапки.НомераДляСФ.ДатаИсправления;
					СтруктураКонтента.Number =  ДанныеШапки.НомераДляСФ.НомерДокумента;
					СтруктураКонтента.Date   = ДанныеШапки.НомераДляСФ.ДатаДокумента;
				Иначе
					СтруктураКонтента.Number= ДанныеШапки.НомераДляСФ.НомерДокумента;
					СтруктураКонтента.Date=   ДанныеШапки.НомераДляСФ.ДатаДокумента;
				КонецЕсли;
			КонецЕсли;
			Если ДанныеШапки.Свойство("ДатаНомерДокументовОплаты") Тогда
				для каждого ПРД из ДанныеШапки.ДатаНомерДокументовОплаты цикл 
					стр = СтруктураКонтента.PaymentDocuments.Добавить();
					стр.Number = ПРД.НомерПлатежноРасчетногоДокумента;
					стр.Date   = ПРД.ДатаПлатежноРасчетногоДокумента;
				КонецЦикла;	
			КонецЕсли;
			
			СтруктураКонтента.currency = ?(ПустаяСтрока(ДанныеШапки.ВалютаДокумента), "", Строка(ДанныеШапки.ВалютаДокумента.Код));
			СтруктураКонтента.ВалютаСсылка =  ДанныеШапки.ВалютаДокумента;
			
			ДанныеШапки.Свойство("ИдентификаторГосконтракта", СтруктураКонтента.GovernmentContractInfo);
			
			СтруктураКонтента.AdditionalInfoId.Вставить("StructedAdditionalInfos", ДанныеШапки.ДопИнфо);
			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Дополнить_StructedAdditionalInfos_ДопСведениями(СтруктураКонтента.AdditionalInfoId.StructedAdditionalInfos, ДопПараметры.ДопСведения);
			
			СФНаАванс = ДанныеШапки.Свойство("СФНаАванс") И ДанныеШапки.СФНаАванс;
						
			TotalNet = 0;
			Total 	 = 0;
			Vat 	 = 0;
			TotalWithVatExcluded = 0;
			
			ЕстьСтрокаСНДС = Ложь;
			
			Для Каждого СтрокаТЧ ИЗ СтруктураДокумента.ТабличнаяЧасть цикл 
				
				СтрокаInvoiceTable=  СтруктураКонтента.InvoiceTable.Items.Добавить();
				
				СтрокаInvoiceTable.Product	  = СтрокаТЧ.Номенклатура;
				СтрокаInvoiceTable.VendorCode = СтрокаТЧ.КодНоменклатуры;
				СтрокаInvoiceTable.ItemMark	  = СтрокаТЧ.ПризнакТРУ;
				СтрокаInvoiceTable.TaxRate 	  = СтрокаТЧ.СтавкаНДС;
				
				СтрокаInvoiceTable.Subtotal = СтрокаТЧ.Сумма + ?(СтрокаТЧ.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				
				Если НЕ СФНаАванс Тогда
					СтрокаInvoiceTable.SubtotalWithVatExcluded = СтрокаТЧ.Сумма - ?(СтрокаТЧ.СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, 0);
				КонецЕсли;
				
				Если НРег(СтрокаТЧ.СтавкаНДС) <> "без ндс" Тогда
					СтрокаInvoiceTable.Vat = СтрокаТЧ.СуммаНДС;
					ЕстьСтрокаСНДС = Истина;
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(СтрокаТЧ.Количество)
					И ЗначениеЗаполнено(СтрокаТЧ.КодЕдиницыИзмерения) Тогда
					
					СтрокаInvoiceTable.UnitCode = ItemContent_UnitCode(СтрокаТЧ.ЕдиницаИзмерения, СтрокаТЧ.КодЕдиницыИзмерения, "0000");
					СтрокаInvoiceTable.UnitName = Строка(СтрокаТЧ.ЕдиницаИзмерения);
					
					СтрокаInvoiceTable.Quantity	= СтрокаТЧ.Количество;
					
					Если ТипЗнч(СтрокаТЧ.Цена) = Тип("Число") Тогда
					
						РасчетнаяЦена = Окр((СтрокаТЧ.Сумма - ?(СтрокаТЧ.СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, 0)) / ?(НЕ ЗначениеЗаполнено(СтрокаInvoiceTable.Quantity), 1, СтрокаInvoiceTable.Quantity), 2);
						ОтклонениеОтРасчетной = (РасчетнаяЦена - СтрокаТЧ.Цена) * СтрокаТЧ.Количество;
						
						Если СтрокаТЧ.СуммаВключаетНДС = Истина ИЛИ Макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной) > 0.03 Тогда
							СтрокаInvoiceTable.Price = РасчетнаяЦена;	
						Иначе
							СтрокаInvoiceTable.Price = СтрокаТЧ.Цена;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					//не инициируем поля UnitCode, UnitName, Quantity, Price, чтобы в печатной форме ЭД были прочерки   
				КонецЕсли;
				
				СтрокаInvoiceTable.ЕдиницаИзмеренияССылка  = СтрокаТЧ.ЕдиницаИзмерения;
				СтрокаInvoiceTable.StructedAdditionalInfos = СтрокаТЧ.ДопИнфо;
				
				TotalNet = TotalNet + СтрокаТЧ.Количество;
				Total 	 = Total + СтрокаInvoiceTable.Subtotal;
				Vat 	 = Vat + СтрокаТЧ.СуммаНДС;
				
				Если НЕ СФНаАванс Тогда
					TotalWithVatExcluded = TotalWithVatExcluded+СтрокаInvoiceTable.SubtotalWithVatExcluded;
				КонецЕсли;
				
				Если ДанныеШапки.Функция = "InvoiceAndBasic" ИЛИ ДанныеШапки.Функция = "Invoice" Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхождения) Или ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) Тогда
						ТЗ_ГТД = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_CustomDeclarations();
						СтрокаТЗ_ГТД = ТЗ_ГТД.Добавить();
						СтрокаТЗ_ГТД.CountryCode       = СокрЛП(СтрокаТЧ.СтранаПроисхождения.Код);
						СтрокаТЗ_ГТД.DeclarationNumber = Модуль_ИнтеграцияОбщий.ПолучитьНомерГТД(СтрокаТЧ.НомерГТД);
						Если Не ((Не ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) ИЛИ ПустаяСтрока(СтрокаТЧ.НомерГТД.Код)) И СтранаЧленТС(СтрокаТЧ.СтранаПроисхождения.Код)) Тогда
							СтрокаТЗ_ГТД.СтранаПроисхожденияСсылка = СтрокаТЧ.СтранаПроисхождения;
						Иначе
							СтрокаТЗ_ГТД.СтранаПроисхожденияСсылка = Справочники.КлассификаторСтранМира.ПустаяСсылка();
						КонецЕсли;
						СтрокаInvoiceTable.CustomDeclarations = ТЗ_ГТД;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураКонтента.InvoiceTable.TotalNet= TotalNet;
			СтруктураКонтента.InvoiceTable.Total= 	 Total;
			СтруктураКонтента.InvoiceTable.Vat= 	 ?(ЕстьСтрокаСНДС, Vat, Неопределено);
			
			Если НЕ СФНаАванс Тогда
				СтруктураКонтента.InvoiceTable.TotalWithVatExcluded = TotalWithVatExcluded;
			КонецЕсли;			
			
			СтруктураКонтента.TransferInfo.OperationInfo = "Товары переданы, работы сданы, услуги оказаны";
			
			Если ДанныеШапки.Свойство("ДатаОтгрузки") Тогда
				СтруктураКонтента.TransferInfo.TransferDate = ДанныеШапки.ДатаОтгрузки;
			КонецЕсли;
			
			КоллекцияОснованияПередачи= ДанныеШапки.ОснованияПередачи;
			Если КоллекцияОснованияПередачи.Количество()>0 Тогда
				
				Для каждого ЭлементКоллекции из КоллекцияОснованияПередачи Цикл
					СтрокаТЗ_ОснПер= СтруктураКонтента.TransferInfo.TransferBases.Добавить();
					СтрокаТЗ_ОснПер.DocumentName= 	ЭлементКоллекции.DocumentName;
					СтрокаТЗ_ОснПер.DocumentNumber= ЭлементКоллекции.DocumentNumber;
					СтрокаТЗ_ОснПер.DocumentDate=	ЭлементКоллекции.DocumentDate;
					СтрокаТЗ_ОснПер.DocumentInfo= 	ЭлементКоллекции.DocumentInfo;
				КонецЦикла;
				
			Иначе
				СтрокаТЗ_ОснПер= СтруктураКонтента.TransferInfo.TransferBases.Добавить();
				СтрокаТЗ_ОснПер.DocumentName= "Отсутствует";
			КонецЕсли;
			
			Если ДанныеШапки.СодержитТовары И (ДанныеШапки.Функция = "InvoiceAndBasic" ИЛИ ДанныеШапки.Функция = "Basic")
				И ДопПараметры.Свойство("ДанныеСотрудника") И ЗначениеЗаполнено(ДопПараметры.ДанныеСотрудника.Должность) Тогда
				
				СтруктураКонтента.TransferInfo.Employee.EmployeePosition = ДопПараметры.ДанныеСотрудника.Должность;
				СтруктураКонтента.TransferInfo.Employee.Surname    		 = ДопПараметры.ДанныеСотрудника.Фамилия;
				СтруктураКонтента.TransferInfo.Employee.FirstName  		 = ДопПараметры.ДанныеСотрудника.Имя;
				СтруктураКонтента.TransferInfo.Employee.Patronymic 		 = ДопПараметры.ДанныеСотрудника.Отчество;
				
			КонецЕсли;
			
			Если ДанныеШапки.Функция = "InvoiceAndBasic" Тогда
				СтруктураКонтента.Name = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
			ИначеЕсли ДанныеШапки.Функция = "Basic" Тогда
				СтруктураКонтента.Name = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (Документ об оказании услуг)";
			КонецЕсли;
			
		КонецПроцедуры
		
	//} КонтентUTDSellerContent

	//{ КонтентUCDSellerContent
		
		Функция ЗаполнитьКонтентUCDSellerContent(Content, ДокСсылка, ПараметрыОтправкиНаСогласование, ДопПараметры) Экспорт 
			
			СтруктураДокумента = ДанныеДляФормированияУКД(ДокСсылка, ДопПараметры);
			
			ЗаполнитьКонтентUCDSellerContentПоДанным(Content, СтруктураДокумента, ПараметрыОтправкиНаСогласование, ДопПараметры);
			
			ПослеЗаполненияКонтента("UCDSellerContent", Content, СтруктураДокумента, ДокСсылка, "", ДопПараметры, ПараметрыОтправкиНаСогласование);
            			
		КонецФункции
		
		Функция ЗаполнитьКонтентUCDSellerContentПоДанным(СтруктураКонтента, СтруктураДокумента, ПараметрыОтправкиНаСогласование, ДопПараметры)
			
  			ДанныеШапки = СтруктураДокумента.ДанныеШапки;
			
			Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Seller, ДанныеШапки.Организация,  ДанныеШапки.Дата, Истина, ДанныеШапки.БанковскийСчетОрганизации);
			
			Если ДопПараметры.Свойство("Отправитель_FnsParticipantId") Тогда
				СтруктураКонтента.Seller.FnsParticipantId = ДопПараметры.Отправитель_FnsParticipantId;
			КонецЕсли;
			
			Если ДанныеШапки.Свойство("Агент") И ЗначениеЗаполнено(ДанныеШапки.Агент) Тогда
				
				ДанныеCreator = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_ExtendedOrganizationInfo();
				Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(ДанныеCreator, ДанныеШапки.Агент, ДанныеШапки.Дата, Истина);
				
				СтруктураКонтента.Creator = ДанныеCreator.Name + ", " + ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").СформироватьПредставлениеИННКПП(ДанныеCreator.Inn, ДанныеCreator.Kpp);
				СтруктураКонтента.CreatorBase = Строка(ДанныеШапки.ДоговорАгента);
				
			Иначе
				СтруктураКонтента.Creator = СтруктураКонтента.Seller.Name + ", ИНН/КПП: " + ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПредставлениеИННКПП(СтруктураКонтента.Seller);
			КонецЕсли;
			
			Модуль_ИнтеграцияОбщий.Заполнить_ExtendedOrganizationInfo(СтруктураКонтента.Buyer, ДанныеШапки.Контрагент, ДанныеШапки.Дата, Истина);
			
			Если ДопПараметры.Свойство("Получатель_FnsParticipantId") Тогда
				СтруктураКонтента.Buyer.FnsParticipantId = ДопПараметры.Получатель_FnsParticipantId;
			КонецЕсли;
			
			Если ДанныеШапки.Свойство("КПППокупателя") И ЗначениеЗаполнено(ДанныеШапки.КПППокупателя) Тогда
				СтруктураКонтента.Buyer.kpp = ДанныеШапки.КПППокупателя;
			КонецЕсли;
			
			СтруктураКонтента.Function 	= ДанныеШапки.Функция;
			СтруктураКонтента.Number 	= ДанныеШапки.Номер;
			СтруктураКонтента.Date   	= ДанныеШапки.Дата;
			
			Если ДанныеШапки.Свойство("НомераДляКСФ") Тогда
				
				Если ДанныеШапки.НомераДляКСФ.ЭтоИКСФ Тогда
					СтруктураКонтента.Number 		 = ДанныеШапки.НомераДляКСФ.НомерКСФ;
					СтруктураКонтента.Date  		 = ДанныеШапки.НомераДляКСФ.ДатаКСФ;
					СтруктураКонтента.RevisionNumber = ДанныеШапки.НомераДляКСФ.НомерИКСФ;
					СтруктураКонтента.RevisionDate   = ДанныеШапки.НомераДляКСФ.ДатаИКСФ;
				Иначе
					СтруктураКонтента.Number	= ДанныеШапки.НомераДляКСФ.НомерКСФ;
					СтруктураКонтента.Date		= ДанныеШапки.НомераДляКСФ.ДатаКСФ;
				КонецЕсли;
				
				InvoiceForCorrectionInfo 		= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceForCorrectionInfo();
				СтрокаInvoiceForCorrectionInfo 	= InvoiceForCorrectionInfo.Добавить();
				
				СтрокаInvoiceForCorrectionInfo.InvoiceDate		= ДанныеШапки.НомераДляКСФ.ДатаИсходногоДокумента;
				СтрокаInvoiceForCorrectionInfo.InvoiceNumber	= ДанныеШапки.НомераДляКСФ.НомерИсходногоДокумента;
				
				InvoiceRevisionInfo = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceRevisionInfo();
				
				Если ДанныеШапки.НомераДляКСФ.УчитыватьИсправлениеИсходногоДокумента Тогда 
					
					СтрокаInvoiceRevisionInfo 	= InvoiceRevisionInfo.Добавить();
					
					СтрокаInvoiceRevisionInfo.RevisionNumber	= Формат(ДанныеШапки.НомераДляКСФ.НомерИсправленияИсходногоДокумента, "ЧДЦ=0; ЧГ=0");
					СтрокаInvoiceRevisionInfo.RevisionDate		= ДанныеШапки.НомераДляКСФ.ДатаИсправленияИсходногоДокумента;
					
				КонецЕсли;
					
				СтрокаInvoiceForCorrectionInfo.InvoiceRevisions = InvoiceRevisionInfo;
				
				СтруктураКонтента.Invoices = InvoiceForCorrectionInfo;
				
			КонецЕсли;
			
			СтруктураКонтента.Currency = ?(ПустаяСтрока(ДанныеШапки.ВалютаДокумента), "", Строка(ДанныеШапки.ВалютаДокумента.Код));
			СтруктураКонтента.ВалютаСсылка =  ДанныеШапки.ВалютаДокумента;
			
			ДанныеШапки.Свойство("ИдентификаторГосконтракта", СтруктураКонтента.GovernmentContractInfo);
			
			СтруктураКонтента.AdditionalInfoId.Вставить("StructedAdditionalInfos", ДанныеШапки.ДопИнфо);
			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Дополнить_StructedAdditionalInfos_ДопСведениями(СтруктураКонтента.AdditionalInfoId.StructedAdditionalInfos, ДопПараметры.ДопСведения);
			
			TotalsDec_Total 				= 0;
			TotalsDec_TotalWithVatExcluded 	= 0;
			TotalsDec_Vat 					= 0;
			TotalsDec_ЕстьСтрокаСНДС 		= Ложь;
			
			TotalsInc_Total 				= 0;
			TotalsInc_TotalWithVatExcluded 	= 0;
			TotalsInc_Vat 					= 0;
			TotalsInc_ЕстьСтрокаСНДС 		= Ложь;
			
			Для Каждого СтрокаДанных из СтруктураДокумента.ТабличнаяЧасть Цикл 
				
				Item = СтруктураКонтента.InvoiceCorrectionTable.Items.Добавить();
				
				Item.StructedAdditionalInfos = СтрокаДанных.ДопИнфо;
				
				Item.AmountsDec 		= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AmountsDiff();
				Item.AmountsInc 		= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AmountsDiff();
				Item.OriginalValues		= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceItemFields();
				Item.CorrectedValues 	= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_InvoiceItemFields();
				
				Item.Product = СтрокаДанных.Номенклатура;
				
				Item.OriginalValues.TotalWithVatExcluded  = СтрокаДанных.СуммаДоИзменения - ?(СтрокаДанных.СуммаВключаетНДС, СтрокаДанных.СуммаНДСДоИзменения, 0);
				Item.CorrectedValues.TotalWithVatExcluded = СтрокаДанных.Сумма - ?(СтрокаДанных.СуммаВключаетНДС, СтрокаДанных.суммаНДС, 0);
				
				Если  ЗначениеЗаполнено(СтрокаДанных.КоличествоДоИзменения)
					И ЗначениеЗаполнено(СтрокаДанных.КодЕдиницыИзмеренияДоИзменения) Тогда
					
					Item.OriginalValues.Quantity 	= СтрокаДанных.КоличествоДоИзменения;
					Item.OriginalValues.UnitCode	= ItemContent_UnitCode(СтрокаДанных.ЕдиницаИзмеренияДоИзменения, СтрокаДанных.КодЕдиницыИзмеренияДоИзменения, "0000");
					Item.OriginalValues.Price  		= Окр(Item.OriginalValues.TotalWithVatExcluded / Item.OriginalValues.Quantity, 2);
					
					Item.OriginalValues.ЕдиницаИзмеренияСсылка = СтрокаДанных.ЕдиницаИзмеренияДоИзменения;
					
				Иначе
					//не инициируем поля UnitCode, UnitName, Quantity, Price, чтобы в печатной форме ЭД были прочерки   
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(СтрокаДанных.Количество)
					И ЗначениеЗаполнено(СтрокаДанных.КодЕдиницыИзмерения) Тогда
					
					Item.CorrectedValues.UnitCode = ItemContent_UnitCode(СтрокаДанных.ЕдиницаИзмерения, СтрокаДанных.КодЕдиницыИзмерения, "0000");
					
					// если до количество было, а теперь его не стало - заполняем 0, а не "-"!!!
					Если ЗначениеЗаполнено(СтрокаДанных.КоличествоДоИзменения) И Не ЗначениеЗаполнено(СтрокаДанных.Количество) Тогда
						Item.CorrectedValues.Quantity 	= 0;
					Иначе
						Item.CorrectedValues.Quantity 	= СтрокаДанных.Количество;
						Item.CorrectedValues.Price  	= Окр(Item.CorrectedValues.TotalWithVatExcluded / СтрокаДанных.Количество, 2);
					КонецЕсли;
					
					Item.CorrectedValues.ЕдиницаИзмеренияСсылка = СтрокаДанных.ЕдиницаИзмерения;
					
				Иначе
					//не инициируем поля UnitCode, UnitName, Quantity, Price, чтобы в печатной форме ЭД были прочерки   
				КонецЕсли;
				
				СтавкаНДСДоИзменения = ?(ЗначениеЗаполнено(СтрокаДанных.СтавкаНДСДоИзменения), СтрокаДанных.СтавкаНДСДоИзменения, СтрокаДанных.СтавкаНДС);
				
				Item.OriginalValues.TaxRate    = СтавкаНДСДоИзменения;
				Item.CorrectedValues.TaxRate   = СтрокаДанных.СтавкаНДС;
				
				Если НРег(СтавкаНДСДоИзменения) <> "без ндс" Тогда
					Item.OriginalValues.Vat  = СтрокаДанных.СуммаНДСДоИзменения;
					TotalsDec_ЕстьСтрокаСНДС = Истина;
					СуммаНДСДо = СтрокаДанных.СуммаНДСДоИзменения;
				Иначе
					СуммаНДСДо = 0;
				КонецЕсли;
				Если НРег(СтрокаДанных.СтавкаНДС) <> "без ндс" Тогда
					Item.CorrectedValues.Vat = СтрокаДанных.СуммаНДС;
					TotalsInc_ЕстьСтрокаСНДС = Истина;
					СуммаНДСПосле = СтрокаДанных.СуммаНДС;
				Иначе
					СуммаНДСПосле = 0;
				КонецЕсли;
				
				Item.OriginalValues.Total   = СтрокаДанных.СуммаДоИзменения + ?(СтрокаДанных.СуммаВключаетНДС, 0, СтрокаДанных.СуммаНДСДоИзменения);
				Item.CorrectedValues.Total  = СтрокаДанных.Сумма + ?(СтрокаДанных.СуммаВключаетНДС, 0, СтрокаДанных.СуммаНДС);
				
				Если Item.OriginalValues.TotalWithVatExcluded < Item.CorrectedValues.TotalWithVatExcluded Тогда 
					Item.AmountsInc.TotalWithVatExcluded = Item.CorrectedValues.TotalWithVatExcluded - Item.OriginalValues.TotalWithVatExcluded;
					Item.AmountsDec.TotalWithVatExcluded = 0;
				Иначе 
					Item.AmountsInc.TotalWithVatExcluded = 0; 
					Item.AmountsDec.TotalWithVatExcluded = - Item.CorrectedValues.TotalWithVatExcluded + Item.OriginalValues.TotalWithVatExcluded
				КонецЕсли;
				
				Если Item.OriginalValues.Vat = Неопределено И Item.CorrectedValues.Vat = Неопределено Тогда 
					Item.AmountsInc.Vat = Неопределено;
					Item.AmountsDec.Vat = Неопределено; 
				ИначеЕсли СуммаНДСДо < СуммаНДСПосле Тогда 
					Item.AmountsInc.Vat = СуммаНДСПосле - СуммаНДСДо;
					Item.AmountsDec.Vat = 0; 
				Иначе 
					Item.AmountsInc.Vat = 0;
					Item.AmountsDec.Vat = - СуммаНДСПосле + СуммаНДСДо;
				КонецЕсли;
				
				Если Item.OriginalValues.Total < Item.CorrectedValues.Total Тогда 
					Item.AmountsInc.Total = Item.CorrectedValues.Total - Item.OriginalValues.Total;
					Item.AmountsDec.Total = 0;
				Иначе 
					Item.AmountsInc.Total = 0;
					Item.AmountsDec.Total = - Item.CorrectedValues.Total + Item.OriginalValues.Total;
				КонецЕсли;
				
				TotalsDec_Total 				= TotalsDec_Total + Item.AmountsDec.Total;
				TotalsDec_TotalWithVatExcluded 	= TotalsDec_TotalWithVatExcluded + Item.AmountsDec.TotalWithVatExcluded;
				TotalsDec_Vat 					= TotalsDec_Vat + ПривестиКЧислу(Item.AmountsDec.Vat);
				
				TotalsInc_Total 				= TotalsInc_Total + Item.AmountsInc.Total;
				TotalsInc_TotalWithVatExcluded 	= TotalsInc_TotalWithVatExcluded + Item.AmountsInc.TotalWithVatExcluded;
				TotalsInc_Vat 					= TotalsInc_Vat + ПривестиКЧислу(Item.AmountsInc.Vat);
				
			КонецЦикла;	  
			
			СтруктураКонтента.InvoiceCorrectionTable.TotalsDec.Total				= TotalsDec_Total; 
			СтруктураКонтента.InvoiceCorrectionTable.TotalsDec.TotalWithVatExcluded = TotalsDec_TotalWithVatExcluded; 
			СтруктураКонтента.InvoiceCorrectionTable.TotalsDec.Vat 					= ?(TotalsDec_ЕстьСтрокаСНДС, TotalsDec_Vat, Неопределено); 
			
			СтруктураКонтента.InvoiceCorrectionTable.TotalsInc.Total 				= TotalsInc_Total; 
			СтруктураКонтента.InvoiceCorrectionTable.TotalsInc.TotalWithVatExcluded = TotalsInc_TotalWithVatExcluded; 
			СтруктураКонтента.InvoiceCorrectionTable.TotalsInc.Vat 					= ?(TotalsInc_ЕстьСтрокаСНДС, TotalsInc_Vat, Неопределено); 
				
			Если Не ПустаяСтрока(ДанныеШапки.РеквизитыПередаточныхДокументов) Тогда
				СтруктураКонтента.EventContent.TransferDocDetails = ДанныеШапки.РеквизитыПередаточныхДокументов;
			КонецЕсли;
			Если ДанныеШапки.Свойство("ИныеСведенияОбИзмененииСтоимости") Тогда
				СтруктураКонтента.EventContent.CostChangeInfo = ДанныеШапки.ИныеСведенияОбИзмененииСтоимости;
			КонецЕсли;
			Если ДанныеШапки.Свойство("ДатаУведомления") Тогда
				СтруктураКонтента.EventContent.NotificationDate = ДанныеШапки.ДатаУведомления;
			КонецЕсли;
			
			СтруктураКонтента.EventContent.OperationContent = "Изменение стоимости товаров и услуг";
			
			ОснованияПередачи = ДанныеШапки.ОснованияПередачи;
			Если ОснованияПередачи.Количество() > 0 Тогда
				Для Каждого ОснованиеПередачи Из ОснованияПередачи Цикл
					СтрокаCorrectionBases = СтруктураКонтента.EventContent.CorrectionBases.Добавить();			
					ЗаполнитьЗначенияСвойств(СтрокаCorrectionBases, ОснованиеПередачи);
				КонецЦикла;
			Иначе
				СтрокаCorrectionBases = СтруктураКонтента.EventContent.CorrectionBases.Добавить();			
				СтрокаCorrectionBases.BaseDocumentName = "Отсутствует";
			КонецЕсли;
			
			Если ДанныеШапки.Функция = "InvoiceAndBasic" Тогда
				СтруктураКонтента.Name = "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
			ИначеЕсли ДанныеШапки.Функция = "Basic" Тогда
				СтруктураКонтента.Name = "Документ об изменении стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав";
			КонецЕсли;
			
		КонецФункции	
		
	//} КонтентUCDSellerContent
	
	Процедура ПослеЗаполненияКонтента(DocumentType, Content, Данные, ДокументСсылка, НомерЗаказа, ДопСведения, ПараметрыОтправкиНаСогласование)
		
		СтруктураПараметровСобытия = Новый Структура();
		СтруктураПараметровСобытия.Вставить("DocumentType",DocumentType);
		СтруктураПараметровСобытия.Вставить("Content",Content);
		СтруктураПараметровСобытия.Вставить("Данные",Данные);
		СтруктураПараметровСобытия.Вставить("ДокументСсылка",ДокументСсылка);
		СтруктураПараметровСобытия.Вставить("НомерЗаказа",НомерЗаказа);
		СтруктураПараметровСобытия.Вставить("ДопСведения",ДопСведения);
		СтруктураПараметровСобытия.Вставить("ПараметрыОтправкиНаСогласование",ПараметрыОтправкиНаСогласование);
		
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеЗаполненияКонтента", СтруктураПараметровСобытия);
		
		Если РезультатПМ <> Неопределено Тогда
			Content = РезультатПМ;
		КонецЕсли;
		
	КонецПроцедуры

	Функция ItemContent_UnitCode(ЕдиницаИзмерения, КодЕдиницыИзмерения, ПредставлениеПустого = "")
			
		Ошибка_ЕИНеНайдена	= Ложь;
		Ошибка_ЕИНеТотКод	= Ложь;
		
		ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПроверитьЕИ(ЕдиницаИзмерения, СокрЛП(КодЕдиницыИзмерения), Ошибка_ЕИНеНайдена, Ошибка_ЕИНеТотКод);
		
		Если Ошибка_ЕИНеНайдена ИЛИ Ошибка_ЕИНеТотКод Тогда
			Возврат ПредставлениеПустого;	
		Иначе
			Возврат КодЕдиницыИзмерения;
		КонецЕсли;
						
	КонецФункции
	
//} ЗАПОЛНИТЬ КОНТЕНТ

//{ ФОРМИРОВАНИЕ XML Торг-12
	
	Функция СформироватьСтрокуДопИнфо(ДопИнфо1, ДопИнфо2)
		Возврат ДопИнфо1+?(ЗначениеЗаполнено(ДопИнфо1) и ЗначениеЗаполнено(ДопИнфо2), " ", "")+ПреобразоватьМассивВСтроку(ДопИнфо2);
	КонецФункции
	
	Функция СформироватьСтрокуДопИнфоПоШаблону(ДопСведения)
		
		ДопСведенияПошаблону = "";
		
		Если ЗначениеЗаполнено(ДопСведения) = Истина Тогда
			ДопСведенияПошаблону = "<Данные>"; 
		    МассивДопСведений = ПреобразоватьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);
			Для Каждого Строка Из МассивДопСведений Цикл
				МассивОтСтроки = ПреобразоватьСтрокуВМассивПодстрок(Строка, "=", Истина);
				Если МассивОтСтроки.Количество() > 0 Тогда
					ДопСведенияПошаблону = ДопСведенияПошаблону + "<Реквизит Имя="""+МассивОтСтроки[0]+"""";
				КонецЕсли;
				Если МассивОтСтроки.Количество() > 1 Тогда
					ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение="""+МассивОтСтроки[1]+"""/>";
				Иначе
					ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение=""""/>"
				КонецЕсли;
			КонецЦикла;
			ДопСведенияПошаблону = ДопСведенияПошаблону + "</Данные>"
		КонецЕсли;
		
		Возврат ДопСведенияПошаблону;
	
	КонецФункции
		
	Функция ПреобразоватьМассивВСтроку(Массив)
		Строка = "";
		Если ЗначениеЗаполнено(Массив) Тогда
			Для Каждого Стр из Массив Цикл
				Если Стр.Key = "_" Тогда
					Строка = Строка + Стр.Value;
				Иначе
					Строка = Строка + " " + Стр.Key + ":" + Стр.Value + ";";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Строка;
	КонецФункции
	
	Процедура заполнитьПодписантаДляXmlTorg12(Official,  Визирующий);
		Official.Surname 	 =  Визирующий.Surname;
		Official.FirstName  =  Визирующий.FirstName;
		Official.Patronymic =  Визирующий.Patronymic;
		Official.JobTitle   =  Визирующий.JobTitle;
	КонецПроцедуры	
	
	Процедура ЗаполнитьФИОПодписанта(official, фио) 
		ф = фио;
		official.Surname =	ВыделитьСлово(ф);
		official.FirstName=	ВыделитьСлово(ф);
		official.Patronymic=ВыделитьСлово(ф);
		
		
	КонецПроцедуры 
	
	Функция ИнициализацияТаблицыСФ(ЭтоКСФ)
		
		ТаблицаСФ = Новый ТаблицаЗначений();
		
		ТаблицаСФ.Колонки.Добавить("Номенклатура");
		ТаблицаСФ.Колонки.Добавить("НоменклатураСсылка");
		ТаблицаСФ.Колонки.Добавить("КодНоменклатуры");
		ТаблицаСФ.Колонки.Добавить("КодЕдиницыИзмерения");
		ТаблицаСФ.Колонки.Добавить("ПризнакТРУ");
		ТаблицаСФ.Колонки.Добавить("Масса", Новый ОписаниеТипов("Число"));
		ТаблицаСФ.Колонки.Добавить("СтранаПроисхождения");
		ТаблицаСФ.Колонки.Добавить("НомерГТД");
		ТаблицаСФ.Колонки.Добавить("Количество");
		ТаблицаСФ.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаСФ.Колонки.Добавить("Цена");
		ТаблицаСФ.Колонки.Добавить("СтавкаНДС");
		ТаблицаСФ.Колонки.Добавить("СуммаНДС");
		ТаблицаСФ.Колонки.Добавить("Сумма");
		ТаблицаСФ.Колонки.Добавить("СуммаВключаетНДС");
		ТаблицаСФ.Колонки.Добавить("ЭтоУслуга", Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("ДопИнфо");
		
		ТаблицаСФ.Колонки.Добавить("Характеристика");
		ТаблицаСФ.Колонки.Добавить("Серия");
				
		Если ЭтоКСФ Тогда 
			ТаблицаСФ.Колонки.Добавить("СтранаПроисхожденияДоИзменения");
			ТаблицаСФ.Колонки.Добавить("НомерГТДДоИзменения");
			ТаблицаСФ.Колонки.Добавить("КоличествоДоИзменения");
			ТаблицаСФ.Колонки.Добавить("ЕдиницаИзмеренияДоИзменения");
			ТаблицаСФ.Колонки.Добавить("КодЕдиницыИзмеренияДоИзменения");
			ТаблицаСФ.Колонки.Добавить("ЦенаДоИзменения");
			ТаблицаСФ.Колонки.Добавить("СтавкаНДСДоИзменения");
			ТаблицаСФ.Колонки.Добавить("СуммаНДСДоИзменения");
			ТаблицаСФ.Колонки.Добавить("СуммаДоИзменения");
		КонецЕсли;	
		
		Возврат ТаблицаСФ;
		
	КонецФункции
	
	Функция ИнициализацияТаблицыТоваров()
		
		ТаблицаТоваров = Новый ТаблицаЗначений();
		
		ТаблицаТоваров.Колонки.Добавить("Номенклатура");
		ТаблицаТоваров.Колонки.Добавить("НоменклатураСсылка");
		ТаблицаТоваров.Колонки.Добавить("КодНоменклатуры");
		ТаблицаТоваров.Колонки.Добавить("Количество");
		ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
		ТаблицаТоваров.Колонки.Добавить("КодЕдиницыИзмерения");
		ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");
		ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");
		ТаблицаТоваров.Колонки.Добавить("КоличествоМест");
		ТаблицаТоваров.Колонки.Добавить("Цена");
		ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
		ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
		ТаблицаТоваров.Колонки.Добавить("Сумма");
		ТаблицаТоваров.Колонки.Добавить("СуммаВключаетНДС");
		ТаблицаТоваров.Колонки.Добавить("ЭтоУслуга", Новый ОписаниеТипов("Булево"));
		ТаблицаТоваров.Колонки.Добавить("Масса", Новый ОписаниеТипов("Число"));
		ТаблицаТоваров.Колонки.Добавить("ДопИнфо");
		ТаблицаТоваров.Колонки.Добавить("Характеристика");
		ТаблицаТоваров.Колонки.Добавить("Серия");
		ТаблицаТоваров.Колонки.Добавить("ПризнакТРУ");
		
		Возврат ТаблицаТоваров;
		
	КонецФункции
	
	Функция ТЧПолучитьДанныеЗапроса(ДокументСсылка, СчетФактура, ЭтоКСФ, ЭтоУКД_Дис = Ложь)
		
		СтандартнаяОбработка= Истина;
		
		Если СчетФактура = Неопределено И Не ЭтоУКД_Дис Тогда
			ТабличнаяЧасть = ИнициализацияТаблицыТоваров();
		Иначе
			ТабличнаяЧасть = ИнициализацияТаблицыСФ(ЭтоКСФ);
		КонецЕсли;
		
		ПараметрыСобытия= Новый Структура;
		ПараметрыСобытия.Вставить("ДокументСсылка", ДокументСсылка);
		ПараметрыСобытия.Вставить("СчетФактура"	  , СчетФактура);
		ПараметрыСобытия.Вставить("ЭтоКСФ"		  , ЭтоКСФ);
		ПараметрыСобытия.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		
		ОбработкаСобытияПодключаемогоМодуля("ДанныеДляКонтента_ТабличнаяЧасть", ПараметрыСобытия, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка = Ложь Тогда
			Возврат ПараметрыСобытия.ТабличнаяЧасть;
		Иначе
			
			РезультатЗапроса= Модуль_ИнтеграцияОбщий.ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ);
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка= РезультатЗапроса.Выбрать(); РезультатЗапроса= Неопределено;
				Пока Выборка.Следующий() Цикл
					СтрокаДанных= ТабличнаяЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка,,"КодЕдиницыИзмерения");
					СтрокаДанных.КодЕдиницыИзмерения= СокрЛП(Выборка.КодЕдиницыИзмерения);
					СтрокаДанных.ДопИнфо = Новый Массив;
					
					Если Не ЗначениеЗаполнено(СтрокаДанных.ПризнакТРУ)
                        И НЕ СтрокаДанных.ЭтоУслуга Тогда
                        СтрокаДанных.ПризнакТРУ = "Property";  
                        // Все, что не является услугой, по умолчанию считаем имуществом.
                        // Если надо что-то другое, можно переопределить в подключаемом модуле
                    КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Возврат ТабличнаяЧасть;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьДанныеДляФормированияТорг12(ДокССылка, ЭтоАкт, ЭтоУПД) Экспорт
		
		ДанныеДляФормированияТорг12 = Новый Структура;
		
		ДокТоварный = ?(ПроверитьТипДокумента(Докссылка, "РеализацияОтгруженныхТоваров"), ДокССылка.ДокументОтгрузки ,ДокССылка);
		
		ДанныеШапки = Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруШапки(ДокТоварный);
		ДанныеШапки.Вставить("Подразделение"	, Модуль_ИнтеграцияОбщий.ПолучитьПодразделениеИзДокумента(ДокТоварный));
		ДанныеШапки.Вставить("Номер"			, Модуль_ИнтеграцияОбщий.ПолучитьНомерНаПечатьДиадок(ДокТоварный));
		ДанныеШапки.Вставить("Дата"				, ДокТоварный.Дата);
		ДанныеШапки.Вставить("СуммаВключаетНДС"	, ?(ДокТоварный.Метаданные().Реквизиты.Найти("СуммаВключаетНДС") = Неопределено, Истина, ДокТоварный.СуммаВключаетНДС));
		
		ДанныеДляФормированияТорг12.Вставить("БанковскийСчетОрганизации", Модуль_ИнтеграцияОбщий.ПолучитьБанковскийСчетПоДокументу(ДокТоварный));
		ДанныеДляФормированияТорг12.Вставить("СтруктураДоговора"		, Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруОснования(ДокССылка, ЭтоАкт, ЭтоУПД));
		ДанныеДляФормированияТорг12.Вставить("ТаблицаТоваров"			, ПолучитьДанныеТабличнойЧастиДляДокументаРеализации(ДокТоварный, ДанныеШапки, ЭтоУПД));
		ДанныеДляФормированияТорг12.Вставить("ДанныеШапки"				, ДанныеШапки);
		
		Возврат ДанныеДляФормированияТорг12;
		
	КонецФункции

	Функция ПолучитьДанныеТабличнойЧастиДляДокументаРеализации(ДокументСсылка, ДанныеШапки, ЭтоУПД) Экспорт
		
		МассивСтрокДляУдаления=	Новый Массив();
		
		ТабличнаяЧасть= ТЧПолучитьДанныеЗапроса(ДокументСсылка, Неопределено, Ложь);
		
		ТребуетсяПерезаполнитьСуммыПоУЕвРублях = Модуль_ИнтеграцияОбщий.ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументСсылка);
		Если  ТребуетсяПерезаполнитьСуммыПоУЕвРублях тогда 
			Модуль_ИнтеграцияОбщий.ПерезаполнитьСуммыПоУЕвРублях(ТабличнаяЧасть, ДокументСсылка, ДанныеШапки);
		КонецЕсли;
		
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			СтрокаТЧ.СтавкаНДС = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС, ЭтоУПД);
			СтрокаТЧ.КодНоменклатуры =  Модуль_ИнтеграцияОбщий.ПолучитьКодНоменклатурыДляТорг12(СтрокаТЧ.КодНоменклатуры, СтрокаТЧ.НоменклатураСсылка);
			СтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура + Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеХарактеристикиИСерии(СтрокаТЧ);
						
			Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Количество = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокДляУдаления.Количество() =  ТабличнаяЧасть.Количество() тогда 
			МассивСтрокДляУдаления = новый Массив;
		КонецЕсли;

		Для каждого СтрокаНаУдаление Из МассивСтрокДляУдаления Цикл
			ТабличнаяЧасть.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		Возврат ТабличнаяЧасть;
		
	КонецФункции
	
//} ФОРМИРОВАНИЕ XML Торг-12

//{ ФОРМИРОВАНИЕ СФ
	
	Функция ВСтрокеКСФНетИзменений(СтрокаТЧ)
		
		Если СтрокаТЧ.ЕдиницаИзмеренияДоИзменения = СтрокаТЧ.ЕдиницаИзмерения
			И СтрокаТЧ.КоличествоДоИзменения = СтрокаТЧ.Количество
			И СтрокаТЧ.ЦенаДоИзменения = СтрокаТЧ.Цена
			И СтрокаТЧ.СуммаДоИзменения = СтрокаТЧ.Сумма
			И СтрокаТЧ.СуммаНДСДоИзменения = СтрокаТЧ.СуммаНДС
			И СтрокаТЧ.СтавкаНДСДоИзменения = СтрокаТЧ.СтавкаНДС
			И СтрокаТЧ.СуммаДоИзменения = СтрокаТЧ.Сумма
			Тогда 
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьДанныеТабличнойЧастиДляСФ(ДокументРеализации, СчетФактура, ЭтоКСФ = Ложь, ТребуетсяПерезаполнитьСуммыПоУЕвРублях, ЭтоУКД_Дис = Ложь) 
		
		МассивСтрокДляУдаления=	Новый Массив();
		
		ТабличнаяЧасть = ТЧПолучитьДанныеЗапроса(ДокументРеализации, СчетФактура, ЭтоКСФ, ЭтоУКД_Дис);
		
		Если ТребуетсяПерезаполнитьСуммыПоУЕвРублях Тогда 
			Модуль_ИнтеграцияОбщий.ПерезаполнитьСуммыПоУЕвРублях(ТабличнаяЧасть, ДокументРеализации);
		КонецЕсли;	
		
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если ЭтоКСФ = Истина И ВСтрокеКСФНетИзменений(СтрокаТЧ) Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
			ИначеЕсли ЭтоКСФ = Ложь И СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Количество = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
			КонецЕсли;
			
			СтрокаТЧ.СтавкаНДС = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС, Истина);
			Если ЭтоКСФ = Истина Тогда
				СтрокаТЧ.СтавкаНДСДоИзменения = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДСДоИзменения, Истина);
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура + Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеХарактеристикиИСерии(СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
                СтрокаТЧ.Количество	= Неопределено;
                СтрокаТЧ.Цена		= Неопределено;
            КонецЕсли;
						
		КонецЦикла;
		
		Если  (ЭтоКСФ = Ложь) и (МассивСтрокДляУдаления.Количество()=ТабличнаяЧасть.Количество()) Тогда 
			//Если в ИСФ нет ненулевых строк - Тогда выводим все строки с 0-м
			МассивСтрокДляУдаления=	Новый Массив();
		КонецЕсли;
		
		Для каждого СтрокаНаУдаление Из МассивСтрокДляУдаления Цикл
			ТабличнаяЧасть.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		Возврат ТабличнаяЧасть;
		
	КонецФункции
	
	Функция СтранаЧленТС(Знач КодСтраны)
		
		КодСтраны = СокрЛП(КодСтраны);
		
		Возврат  (КодСтраны = "643") или  //Россия
				 (КодСтраны = "051") или  //Армения
				 (КодСтраны = "112") или  //Беларусь
				 (КодСтраны = "398") или  //Казахстан
				 (КодСтраны = "417")      //Киргизия
				 
	КонецФункции	
	
	Функция ПолучитьТаблицуСФ(СчетФактура, МассивДокументовОснований, ЭтоКСФ, ЭтоУКД_Дис = Ложь)  
		
		ТабличнаяЧасть=	ИнициализацияТаблицыСФ(ЭтоКСФ);
		
		Для каждого ДокументОснование Из МассивДокументовОснований Цикл
			ДокТоварный = ?( ПроверитьТипДокумента(ДокументОснование, "РеализацияОтгруженныхТоваров"), ДокументОснование.ДокументОтгрузки , ДокументОснование);
			ТребуетсяПерезаполнитьСуммыПоУЕвРублях = Модуль_ИнтеграцияОбщий.ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокТоварный, СчетФактура, Истина);
			ДанныеТЧ=	ПолучитьДанныеТабличнойЧастиДляСФ(ДокТоварный, СчетФактура, ЭтоКСФ, ТребуетсяПерезаполнитьСуммыПоУЕвРублях, ЭтоУКД_Дис);
			
			Для каждого СтрокаДанных Из ДанныеТЧ Цикл
				
				СтрокаСФ=	ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСФ, СтрокаДанных);
				СтрокаСФ.КодНоменклатуры =  Модуль_ИнтеграцияОбщий.ПолучитьКодНоменклатурыДляТорг12(СтрокаСФ.КодНоменклатуры, СтрокаСФ.НоменклатураСсылка);
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок()="Модуль_ИнтеграцияАльфаАвто41" Тогда
					СтрокаСФ.НоменклатураСсылка = ПолучитьМодульПрог("Модуль_ИнтеграцияАльфаАвто41").ВернутьСсылкуНаНоменклатуру(СтрокаДанных.НоменклатураСсылка);
					ЭтоУслуга = ПолучитьМодульПрог("Модуль_ИнтеграцияАльфаАвто41").ЭтоУслуга(СтрокаСФ.НоменклатураСсылка);
					СтрокаСФ.ЭтоУслуга = ЭтоУслуга;
					Если ЭтоУслуга = Истина И ЗначениеЗаполнено(СтрокаСФ.ЕдиницаИзмерения) = Истина И СтрокаСФ.ЕдиницаИзмерения.Наименование = "-" Тогда
						СтрокаСФ.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
						СтрокаСФ.КодЕдиницыИзмерения = "";
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаСФ.СтранаПроисхождения)
					И ПустаяСтрока(Модуль_ИнтеграцияОбщий.ПолучитьНомерГТД(СтрокаСФ.НомерГТД))
					И СтранаЧленТС(СтрокаСФ.СтранаПроисхождения.Код) Тогда
					
					СтрокаСФ.СтранаПроисхождения= Справочники.КлассификаторСтранМира.ПустаяСсылка();
					СтрокаСФ.НомерГТД= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПустаяСсылкаНаНомерГТД();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

		СписокКолонокДляСвертки= "";
		РазделительСписка= "";
		Для Каждого ТекКолонка Из ТабличнаяЧасть.Колонки Цикл
			Если ТекКолонка.Имя <> "Количество"
			   И ТекКолонка.Имя <> "Масса"
			   И ТекКолонка.Имя <> "СуммаНДС"
			   И ТекКолонка.Имя <> "Сумма"
			   И ТекКолонка.Имя <> "ДопИнфо" Тогда
				СписокКолонокДляСвертки= СписокКолонокДляСвертки + РазделительСписка + ТекКолонка.Имя; 
				РазделительСписка= ",";
			КонецЕсли;
		КонецЦикла;
		ТабличнаяЧасть.Свернуть(СписокКолонокДляСвертки, "Количество,Масса,СуммаНДС,Сумма");
		
		ТабличнаяЧасть.Колонки.Добавить("ДопИнфо");
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.ДопИнфо= Новый Массив;
		КонецЦикла;
		
		Возврат ТабличнаяЧасть;
		
	КонецФункции
	
	Функция сформироватьДанныеДляФормированияСчетФактуры(СчетФактура, ЭтоКСФ) Экспорт 
		
		МассивДокументовОснований=	Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СчетФактура);
		Если МассивДокументовОснований.Количество() = 0 Тогда
			ВызватьИсключение "Для " + СчетФактура + " не найдены документы основания";
		КонецЕсли;
		
		ДокументОснование=	МассивДокументовОснований[0];
		ДокТоварный = ?( ПроверитьТипДокумента(ДокументОснование, "РеализацияОтгруженныхТоваров"), ДокументОснование.ДокументОтгрузки , ДокументОснование);
		ДанныеСФ = Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруШапки(ДокТоварный, СчетФактура);
		
		Если ЭтоКСФ=Истина Тогда 
			ДанныеСФ.Вставить("НомераДляКСФ", Модуль_ИнтеграцияОбщий.ПолучитьНомераДляКСФ(СчетФактура));
		Иначе 	
			ДанныеСФ.Вставить("НомераДляСФ", Модуль_ИнтеграцияОбщий.ПолучитьНомераДляСФ(СчетФактура));
		КонецЕсли;	
		ДанныеСФ.Вставить("СФНаАванс", Модуль_ИнтеграцияОбщий.ЭтоСчетФактуранаАванс(СчетФактура))  ;
		ДанныеСФ.Вставить("ДатаНомерСвидетельстваОРегистрации", Модуль_ИнтеграцияОбщий.ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(СчетФактура.Организация));
		ДанныеСФ.Вставить("КПППокупателя",  Модуль_ИнтеграцияОбщий.ПолучитьКПППокупателя(СчетФактура)); 
		ДанныеСФ.Вставить("ДатаНомерДокументовОплаты", Модуль_ИнтеграцияОбщий.ПолучитьДатуНомерДокументовОплаты(СчетФактура));
		
		ДанныеСФ.Вставить("ТабличнаяЧасть", ПолучитьТаблицуСФ(СчетФактура, МассивДокументовОснований, ЭтоКСФ));
		
		Если ДанныеСФ.ТабличнаяЧасть.НайтиСтроки(Новый Структура("ЭтоУслуга", Ложь)).Количество()=0 Тогда 
			ДанныеСФ.Грузоотправитель = "";
			ДанныеСФ.Грузополучатель = "";
		Иначе
			Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияАльфаАвто41" Тогда
				Если ЗначениеЗаполнено(СчетФактура.Грузополучатель)=Истина Тогда
					ДанныеСФ.Грузополучатель = СчетФактура.Грузополучатель;
				КонецЕсли;
				Если ДанныеСФ.Организация = ДанныеСФ.Грузоотправитель Тогда
					ДанныеСФ.Грузоотправитель = "он же";	
				КонецЕсли;
			Иначе
				Если ДанныеСФ.Свойство("Поставщик") И ДанныеСФ.Поставщик <> ДанныеСФ.Организация Тогда
					ДанныеСФ.Грузоотправитель = ДанныеСФ.Организация;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
						
		Возврат ДанныеСФ;
	КонецФункции 	
	
	Функция СформироватьПараметрыПодписанта(Наименование) Экспорт
		Инд = 1;
		
		Фамилия = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Фамилия = Фамилия + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Имя = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Имя = Имя + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Отчество = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Отчество = Отчество + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		
		Рез = Новый Структура;
		Рез.Вставить("ПодписантФамилия", Фамилия);
		Рез.Вставить("ПодписантИмя", Имя);
		Рез.Вставить("ПодписантОтчество", Отчество);
		
		Возврат Рез;
	КонецФункции
	
//} ФОРМИРОВАНИЕ СФ

//{ ФОРМИРОВАНИЕ СЧЕТА НА ОПЛАТУ
	
	Функция ЗаменитьНедопустимыеСимволы(НомерДокумента)
		НедопустимыеЗнаки = "\/:*?""<>|";
		Пока СтрДлина(НедопустимыеЗнаки)>0 Цикл
			ТекСимвол = Лев(НедопустимыеЗнаки,1);
			Если Найти(НомерДокумента,ТекСимвол)<>0 Тогда
				НомерДокумента = СтрЗаменить(НомерДокумента,ТекСимвол,"_");
			КонецЕсли;
			НедопустимыеЗнаки = Сред(НедопустимыеЗнаки,2);
		КонецЦикла;
		Возврат НомерДокумента;	
	КонецФункции
	
	Функция СформироватьПечатнуюФормуСчетаНаОплату(ДокССылка, ПараметрыОтправкиНаСогласование =  Неопределено)  Экспорт
		ДокТоварный = ?( ПроверитьТипДокумента(Докссылка, "РеализацияОтгруженныхТоваров"), ДокССылка.ДокументОтгрузки , ДокССылка);
		ДанныеШапки =  Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруШапки(ДокТоварный);
		БанковскийСчетОрганизации = Модуль_ИнтеграцияОбщий.ПолучитьБанковскийСчетПоДокументу(ДокТоварный);
		ТаблицаТоваров =  ПолучитьДанныеТабличнойЧастиДляСчетаНаОплату(ДокТоварный, ДанныеШапки);
		
		ДанныеШапки.Номер = Модуль_Интеграция.ПолучитьНомерНаПечатьДиадок(ДокССылка);
		
		Возврат СформироватьПечатнуюФормуСчетаНаОплатуПоДанным(ДанныеШапки, БанковскийСчетОрганизации,ТаблицаТоваров, ПараметрыОтправкиНаСогласование)  	
	КонецФункции	
	
	Функция СформироватьПечатнуюФормуСчетаНаОплатуПоДанным(ДанныеШапки, БанковскийСчетОрганизации, ТаблицаТоваров, ПараметрыОтправкиНаСогласование =  Неопределено)
		
		Таб= Новый ТабличныйДокумент;
		
		Таб.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
		Таб.АвтоМасштаб= 		Истина;
		
		Макет= ПолучитьМакет("СчетНаОплату");
		
		Область= Макет.ПолучитьОбласть("ШапкаСчета1");
		Если ЗначениеЗаполнено(БанковскийСчетОрганизации)  Тогда
			
			Если ДанныеШапки.Свойство("ОрганизацияПолучатель") Тогда
				ОрганизацияПолучатель= ДанныеШапки.ОрганизацияПолучатель;
			Иначе
				ОрганизацияПолучатель= ДанныеШапки.Организация;
			КонецЕсли;
			
			РеквизитыПолучателя= Модуль_ИнтеграцияОбщий.ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(ОрганизацияПолучатель, ДанныеШапки.Дата);
			РеквизитыБанковскогоСчета= Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруБанковскогоСчета(ОрганизацияПолучатель, БанковскийсчетОрганизации);
						
			Область.Параметры.БанкПолучателя= 	   РеквизитыБанковскогоСчета.Банк;
			Область.Параметры.БИКБанкаПолучателя=  РеквизитыБанковскогоСчета.БИК;
			Область.Параметры.СчетБанкаПолучателя= РеквизитыБанковскогоСчета.КоррСчет;
			Область.Параметры.СчетПолучателя= 	   РеквизитыБанковскогоСчета.НомерСчета;
			Область.Параметры.Получатель= 		   РеквизитыБанковскогоСчета.ТекстПолучателя;
			Область.Параметры.ИННПолучателя= 	   РеквизитыПолучателя.ИНН;
			Область.Параметры.КПППолучателя= 	   РеквизитыПолучателя.КПП;
			
		КонецЕсли;
		Таб.Вывести(Область);
		
		Область=  Макет.ПолучитьОбласть("ШапкаСчета2");
		Область.Параметры.Заголовок = "Счет на оплату № "+ДанныеШапки.Номер +" от "+ Формат(ДанныеШапки.Дата,"ДФ=dd.MM.yyyy");
		Таб.Вывести(Область);
		
		Область=  Макет.ПолучитьОбласть("ШапкаСчета3");
		Область.Параметры.Поставщик = Модуль_ИнтеграцияОбщий.ПолучитьОписаниеОрганизацииДляСчетаНаОплату(ДанныеШапки.Организация, ДанныеШапки.Дата);
		Таб.Вывести(Область);
		
		Область=  Макет.ПолучитьОбласть("ШапкаСчета4");
		Область.Параметры.Покупатель =  Модуль_ИнтеграцияОбщий.ПолучитьОписаниеОрганизацииДляСчетаНаОплату(ДанныеШапки.Контрагент, ДанныеШапки.Дата);
		Таб.Вывести(Область);
		
		Таб.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
		
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка");
		
		СуммаВсего= 	0;
		СуммаВсегоНДС= 	0;
		Ц= 0;
		
		ЕстьСтавкаБезНДС= Ложь;
		
		Для каждого Стр из ТаблицаТоваров Цикл
			Ц = Ц + 1;
			СтрокаТаблицы.Параметры.НомерСтроки= 		Ц;
			СтрокаТаблицы.Параметры.Товар= 				Стр.Номенклатура;
			СтрокаТаблицы.Параметры.Количество= 		Стр.Количество;
			СтрокаТаблицы.Параметры.ЕдиницаИзмерения= 	Стр.ЕдиницаИзмерения;
			СтрокаТаблицы.Параметры.Цена= 				Стр.Цена;
			СтрокаТаблицы.Параметры.Сумма= 				Стр.сумма;
			
			СуммаВсего= 	СуммаВсего 		+ Стр.Сумма;
			СуммаВсегоНДС= 	СуммаВсегоНДС 	+ Стр.СуммаНДС;
			
			Если Стр.СтавкаНДС = "" ИЛИ Стр.СтавкаНДС = "без НДС" Тогда
				ЕстьСтавкаБезНДС= Истина;
			КонецЕсли;
			
			Таб.Вывести(СтрокаТаблицы);
		КонецЦикла;
		СуммаВключаетНДС= 	ДанныеШапки.СуммаВключаетНДС;
		СуммаВсегоСНДС= 	СуммаВсего + ?(СуммаВключаетНДС, 0, СуммаВсегоНДС);
		
		Область= Макет.ПолучитьОбласть("Подвал");
		Область.Параметры.Всего= СуммаВсего; 
		Таб.Вывести(Область);
		
		Область= Макет.ПолучитьОбласть("ПодвалНДС");
		Если СуммаВсегоНДС <> 0 Тогда
			Область.Параметры.НДС= 		?(СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			Область.Параметры.ВсегоНДС= Формат(СуммаВсегоНДС, "ЧЦ=15; ЧДЦ=2");
		Иначе
			Область.Параметры.НДС= 		"Без налога (НДС)";
			Область.Параметры.ВсегоНДС= "-";
		КонецЕсли;
		Таб.Вывести(Область);
		
		Область= Макет.ПолучитьОбласть("ПодвалИтогоКОплате");
		Область.Параметры.ИтогоКОплате= СуммаВсегоСНДС;
		Таб.Вывести(Область);
		
		Область= Макет.ПолучитьОбласть("ПодвалСуммаПрописью");
		Область.Параметры.ИтоговаяСтрока= "Всего наименований " + ТаблицаТоваров.Количество() 
											+ ", на сумму "+ Формат(СуммаВсегоСНДС,"ЧЦ=15; ЧДЦ=2") + " " + СокрП(ДанныеШапки.ВалютаДокумента);
		
		Область.Параметры.СуммаПрописью= ЧислоПрописью(СуммаВсегоСНДС, , ДанныеШапки.ВалютаДокумента.ПараметрыПрописиНаРусском);
		Таб.Вывести(Область);
		
		Область= Макет.ПолучитьОбласть("ПодвалСчета");
		ФИОРуководителя= Модуль_ИнтеграцияОбщий.ПолучитьФИОРуководителяДляСчета(ДанныеШапки, ПараметрыОтправкиНаСогласование);
		Область.Параметры.ФИОРуководителя= ФИОРуководителя;
		Таб.Вывести(Область);
		
		ИмяФайла= "Счет №" + ЗаменитьНедопустимыеСимволы(ДанныеШапки.Номер) + " от " + Формат(ДанныеШапки.Дата, "ДЛФ=Д") + ".pdf";
		ИмяВременногоФайла= ПолучитьИмяВременногоФайла();
		Таб.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		
		Результат = Новый Структура;
		Результат.Вставить("Таблица", 				Таб);
		Результат.Вставить("ИмяВременногоФайла", 	ИмяВременногоФайла);
		Результат.Вставить("ИмяФайла", 				ИмяФайла);
		Результат.Вставить("Дата", 					ДанныеШапки.Дата);
		Результат.Вставить("Номер", 				ДанныеШапки.Номер);
		Результат.Вставить("Сумма", 				СуммаВсегоСНДС);
		Результат.Вставить("СуммаНДС", 				СуммаВсегоНДС);
		Результат.Вставить("СписокОшибок", 			"");
		Результат.Вставить("ДокументБезНДС",		?(ЕстьСтавкаБезНДС И СуммаВсегоНДС = 0, Истина, Ложь));
				
		Возврат Результат;	
		
	КонецФункции	
	
	Функция ПолучитьДанныеТабличнойЧастиДляСчетаНаОплату(ДокументСсылка, ДанныеШапки) Экспорт
		
		МассивСтрокДляУдаления=	Новый Массив();
		
		ТабличнаяЧасть= ТЧПолучитьДанныеЗапроса(ДокументСсылка, Неопределено, Ложь);
		
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			СтрокаТЧ.СтавкаНДС = Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС(СтрокаТЧ.СтавкаНДС, Ложь);
			СтрокаТЧ.КодНоменклатуры =  Модуль_ИнтеграцияОбщий.ПолучитьКодНоменклатурыДляТорг12(СтрокаТЧ.КодНоменклатуры, СтрокаТЧ.НоменклатураСсылка);
			СтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура + Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеХарактеристикиИСерии(СтрокаТЧ);
						
			Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Количество = 0 Тогда
				МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокДляУдаления.Количество() =  ТабличнаяЧасть.Количество() тогда 
			МассивСтрокДляУдаления = новый Массив;
		КонецЕсли;

		Для каждого СтрокаНаУдаление Из МассивСтрокДляУдаления Цикл
			ТабличнаяЧасть.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		Возврат ТабличнаяЧасть;
		
	КонецФункции
	
//} ФОРМИРОВАНИЕ СЧЕТА НА ОПЛАТУ

//{ ФОРМИРОВАНИЕ АКТА СВЕРКИ
	
	Функция ПредставлениеПредставителяДляШапки(ПредставительОрганизации, ПредставлениеОрганизации)
		Возврат ?(ЗначениеЗаполнено(ПредставительОрганизации.Должность), ПредставительОрганизации.Должность, "представитель")+
		" "+ПредставлениеОрганизации+" "+?(ЗначениеЗаполнено(ПредставительОрганизации.ФИО), ПредставительОрганизации.ФИО, ""); 
	КонецФункции	
	
	Функция РазвернутоеПредставлениеСуммы(Сумма, Валюта)
		Возврат  формат(Сумма, "ЧДЦ=2")+" "+Валюта+
		" (" + Модуль_ИнтеграцияОбщий.ПолучитьСуммуПрописьюДиадок(Сумма, Валюта)+")"
	КонецФункции
	
	Функция ПредставлениеРезультатовСверки(ДатаОкончанияСверки, ПредставлениеОрганизации, ПредставлениеКонтрагента, ОрганизацияИтогСальдо, валютаДокумента)
		
		результат =  "на "+формат(ДатаОкончанияСверки, "ДФ=dd.MM.yyyy")+" задолженность ";
		Если ОрганизацияИтогСальдо>0 Тогда 
			результат = результат + "в пользу "+ПредставлениеОрганизации+" "+
			РазвернутоеПредставлениеСуммы(ОрганизацияИтогСальдо, ВалютаДокумента);
		ИначеЕсли ОрганизацияИтогСальдо<0 Тогда 
			результат = результат + "в пользу "+ПредставлениеКонтрагента+" "+
			РазвернутоеПредставлениеСуммы(-ОрганизацияИтогСальдо, ВалютаДокумента);
		Иначе 
			результат = результат +"отсутствует";
		КонецЕсли;
		
		Возврат  результат;
		
		
	КонецФункции
	
	Функция СформироватьПечатнуюФормуАктаСверки(ДокСсылка) Экспорт 
		
		ДанныеСверки = Модуль_ИнтеграцияОбщий.ПолучитьДанныеДляФормированияАктаСверки(ДокСсылка);
		
		Таб = Новый ТабличныйДокумент;
		
		Таб.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		Таб.АвтоМасштаб = Истина;
 
		Макет = ЭтотОбъект.ПолучитьМакет("АктСверкиВзаиморасчетов");
		
		ЗаголовокАкта = макет.ПолучитьОбласть("Заголовок");
		
		ОписаниеПериода = "за период: " + ПредставлениеПериода(НачалоДня(ДанныеСверки.ДатаНачалаСверки), КонецДня(ДанныеСверки.ДатаОкончанияСверки), "ФП = Истина");
		ПредставительОрганизации = ДанныеСверки.ПредставительОрганизации;
		ПредставительКонтрагента = ДанныеСверки.ПредставительКонтрагента;
		ЗаголовокАктаСверки =  "взаимных расчетов " + ОписаниеПериода  + Символы.ПС
		+ "между " + ДанныеСверки.ПредставлениеОрганизации + Символы.ПС + "и " + ДанныеСверки.ПредставлениеКонтрагента;
		Если ЗначениеЗаполнено(ДокСсылка.ДоговорКонтрагента) Тогда 
			ЗаголовокАктаСверки = ЗаголовокАктаСверки + символы.ПС+
			"по договору "+ДокСсылка.ДоговорКонтрагента;
		КонецЕсли;   
		
		ЗаголовокТаблицы = "Мы, нижеподписавшиеся, "+ПредставлениеПредставителяДляШапки(ПредставительОрганизации, ДанныеСверки.ПредставлениеОрганизации)+", с одной стороны, и "+
		ПредставлениеПредставителяДляШапки(ПредставительКонтрагента, ДанныеСверки.ПредставлениеКонтрагента)+", с другой стороны, составили настоящий акт сверки в том, что состояние "+
		"взаимных расчетов по данным учета следующее:";
		
		ЗаголовокАкта.Параметры.ЗаголовокАктаСверки = ЗаголовокАктаСверки;
		ЗаголовокАкта.Параметры.ЗаголовокТаблицы = ЗаголовокТаблицы;
		
		Таб.Вывести(ЗаголовокАкта);
		
		
		Шапка = макет.ПолучитьОбласть("Шапка|Секция");
		Шапка.Параметры.Шапка = "По данным "+ДанныеСверки.ПредставлениеОрганизации+", "+ДанныеСверки.ВалютаДокумента;
		Таб.Вывести(Шапка);
		Шапка.Параметры.Шапка = "По данным "+ДанныеСверки.ПредставлениеКонтрагента+", "+ДанныеСверки.ВалютаДокумента;
		Таб.Присоединить(Шапка);
		
		
		//выводим табличную часть
		СтрокаСальдо = Макет.ПолучитьОбласть("Сальдо|Секция");
		СальдоНачальное = ДанныеСверки.СальдоНачальное;
		СтрокаСальдо.Параметры.Дебет  = ?(СальдоНачальное>0, СальдоНачальное, 0);
		СтрокаСальдо.Параметры.Кредит = ?(СальдоНачальное>0, 0, -СальдоНачальное);
		Таб.Вывести(СтрокаСальдо);
		
		СтрокаСальдо.Параметры.Дебет  = ?(СальдоНачальное>0, 0, -СальдоНачальное);
		СтрокаСальдо.Параметры.Кредит = ?(СальдоНачальное>0, СальдоНачальное, 0);
		Таб.Присоединить(СтрокаСальдо);
		
		МассивДанныхПоДоговорам = ДанныеСверки.МассивДанныхПоДоговорам;
		СтрокаТаблицы = макет.ПолучитьОбласть("Строка|Секция");
		СтрокаНачалоДоговора = макет.получитьОбласть("ДоговорНачалоСекции|Секция");
		СтрокаКонецДоговора  = макет.получитьОбласть("ДоговорКонецСекции|Секция");
		ПустойШаблон = Новый Структура("Дата, представлениеДокумента, Дебет, Кредит");
		
		ОрганизацияИтогДт = 0;
		ОрганизацияИтогКт = 0;
		КонтрагентИтогДт = 0;
		КонтрагентИтогКт = 0;
		
		Для каждого ДанныеДоговора из МассивДанныхПоДоговорам цикл 
			Договор = ДанныеДоговора.ДоговорСсылка;
			ДанныеОрганизации = ДанныеДоговора.ДанныеОрганизации;
			ДанныеКонтрагента = ДанныеДоговора.ДанныеКонтрагента;
			
			Если ЗначениеЗаполнено(Договор) Тогда 
				СтрокаНачалоДоговора.Параметры.договор = Договор;
				Таб.Вывести(СтрокаНачалоДоговора);
				Таб.присоединить(СтрокаНачалоДоговора);
			КонецЕсли;
			
			Для ц = 0 по макс(ДанныеОрганизации.Количество(),ДанныеКонтрагента.Количество() )-1 цикл 
				СтрокаТаблицы.Параметры.Заполнить(?(ц<ДанныеОрганизации.Количество(), ДанныеОрганизации[ц],  ПустойШаблон));
				Таб.Вывести(СтрокаТаблицы);
				СтрокаТаблицы.Параметры.Заполнить(?(ц<ДанныеКонтрагента.Количество(), ДанныеКонтрагента[ц],  ПустойШаблон));
				Таб.Присоединить(СтрокаТаблицы);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Договор) Тогда 
				СтрокаКонецДоговора.Параметры.Дебет  =  ДанныеОрганизации.Итог("Дебет");
				СтрокаКонецДоговора.Параметры.Кредит =  ДанныеОрганизации.Итог("Кредит");
				Таб.Вывести(СтрокаКонецДоговора);
				СтрокаКонецДоговора.Параметры.Дебет  =  ДанныеКонтрагента.Итог("Дебет");
				СтрокаКонецДоговора.Параметры.Кредит =  ДанныеКонтрагента.Итог("Кредит");
				Таб.Присоединить(СтрокаКонецДоговора);
			КонецЕсли;	
			
			ОрганизацияИтогДт = ОрганизацияИтогДт+  ДанныеОрганизации.Итог("Дебет");
			ОрганизацияИтогКт = ОрганизацияИтогКт+  ДанныеОрганизации.Итог("Кредит");
			КонтрагентИтогДт  = КонтрагентИтогДт+  ДанныеКонтрагента.Итог("Дебет");
			КонтрагентИтогКт  = КонтрагентИтогКт+  ДанныеКонтрагента.Итог("Кредит");
		КонецЦикла;	
		
		ОрганизацияИтогСальдо = СальдоНачальное + ОрганизацияИтогДт - ОрганизацияИтогКт;
		КонтрагентИтогСальдо = -СальдоНачальное + КонтрагентИтогДт - КонтрагентИтогКт;
		
		//заполним итог по организации
		ПодвалИтоги = макет.ПолучитьОбласть("ПодвалИтоги|Секция");
		ПодвалИтоги.Параметры.ОборотыДт = ОрганизацияИтогДт;
		ПодвалИтоги.Параметры.ОборотыКт = ОрганизацияИтогКт;
		ПодвалИтоги.Параметры.Дебет  = ?(ОрганизацияИтогСальдо>0, ОрганизацияИтогСальдо, 0);
		ПодвалИтоги.Параметры.Кредит = ?(ОрганизацияИтогСальдо>0, 0, -ОрганизацияИтогСальдо);
		ПодвалИтоги.параметры.ПредставлениеОрганизации = "По данным "+ДанныеСверки.ПредставлениеОрганизации;
		ПодвалИтоги.параметры.РезультатыСверки = ПредставлениеРезультатовСверки(ДанныеСверки.ДатаОкончанияСверки, ДанныеСверки.ПредставлениеОрганизации,ДанныеСверки.ПредставлениеКонтрагента, ОрганизацияИтогСальдо, ДанныеСверки.ВалютаДокумента);
		Таб.Вывести(ПодвалИтоги);
		
		
		Если ДанныеСверки.СверкаСогласована  Тогда 
			ПодвалИтоги.Параметры.ОборотыДт = КонтрагентИтогДт;
			ПодвалИтоги.Параметры.ОборотыКт = КонтрагентИтогКт;
			ПодвалИтоги.Параметры.Дебет  = ?(КонтрагентИтогСальдо>0, КонтрагентИтогСальдо, 0);
			ПодвалИтоги.Параметры.Кредит = ?(КонтрагентИтогСальдо>0, 0, -КонтрагентИтогСальдо);
			ПодвалИтоги.параметры.ПредставлениеОрганизации = "По данным "+ДанныеСверки.ПредставлениеКонтрагента;
			ПодвалИтоги.параметры.РезультатыСверки = ПредставлениеРезультатовСверки(ДанныеСверки.ДатаОкончанияСверки, ДанныеСверки.ПредставлениеКонтрагента, ДанныеСверки.ПредставлениеОрганизации, КонтрагентИтогСальдо, ДанныеСверки.ВалютаДокумента);
		Иначе 
			ПодвалИтоги.Параметры.ОборотыДт = "";
			ПодвалИтоги.Параметры.ОборотыКт = "";
			ПодвалИтоги.Параметры.Дебет  = "";
			ПодвалИтоги.Параметры.Кредит = "";
			ПодвалИтоги.параметры.ПредставлениеОрганизации = "";
			ПодвалИтоги.параметры.РезультатыСверки = "";
		КонецЕсли;	 
		Таб.Присоединить(ПодвалИтоги);
		
		Если  ДанныеСверки.СверкаСогласована и   ДанныеСверки.Расхождение <> 0 Тогда 
			ПодвалРасхождение = Макет.ПолучитьОбласть("Расхождение");
			СуммаРасхождение = ?(ДанныеСверки.Расхождение>0, ДанныеСверки.Расхождение, -ДанныеСверки.Расхождение);
			ОписаниеРасхождения = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере " +
			РазвернутоеПредставлениеСуммы(СуммаРасхождение, ДанныеСверки.ВалютаДокумента);
			ПодвалРасхождение.параметры.Расхождение =ОписаниеРасхождения; 
			Таб.Вывести(ПодвалРасхождение);
		КонецЕсли;	 
		
		
		//и, наконец. подписи
		ПодвалПодписи = макет.ПолучитьОбласть("ПодвалПодпись|Секция");
		ПодвалПодписи.Параметры.ПредставлениеОрганизации = ДанныеСверки.ПредставлениеОрганизации;
		ПодвалПодписи.Параметры.Должность				 =ДанныеСверки.ПредставительОрганизации.Должность;
		ПодвалПодписи.Параметры.ФИО						 =ДанныеСверки.ПредставительОрганизации.ФИО;
		Таб.Вывести(ПодвалПодписи);
		
		ПодвалПодписи.Параметры.ПредставлениеОрганизации = ДанныеСверки.ПредставлениеКонтрагента;
		ПодвалПодписи.Параметры.Должность				 =ДанныеСверки.ПредставительКонтрагента.Должность;
		ПодвалПодписи.Параметры.ФИО						 =ДанныеСверки.ПредставительКонтрагента.ФИО;
		Таб.Присоединить(ПодвалПодписи);
		
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ИмяФайла = "Акт сверки №" + ЗаменитьНедопустимыеСимволы(ДокССылка.Номер) + " от " + Формат(ДокССылка.Дата, "ДЛФ=Д") + ".pdf";
		таб.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		
		
		результат = Новый Структура;
		результат.Вставить("Таблица", таб);
		результат.Вставить("СписокОшибок","");
		результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
		результат.Вставить("ИмяФайла", ИмяФайла);
		результат.Вставить("Дата", ДокССылка.Дата);
		результат.Вставить("Номер", ДокССылка.Номер);
		результат.Вставить("Сумма", "");
		результат.Вставить("СуммаНДС", "");
		
		Возврат результат;	
		
	КонецФункции	
	
//} ФОРМИРОВАНИЕ АКТА СВЕРКИ

//{ ФОРМИРОВАНИЕ XML УПД

	Функция ДанныеДляФормированияУПД(ДокСсылка, ДопПараметры) Экспорт 
		
		Если ДопПараметры.ФункцияУПД = "СЧФДОП" ИЛИ ДопПараметры.ФункцияУПД = "СЧФ" Тогда
			
			СчетФактура 	   = ДокСсылка;
			ДокументыОснования = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(ДокСсылка);
			
		Иначе
			
			СчетФактура = Неопределено;
			
			ДокументыОснования = Новый Массив;
			ДокументыОснования.Добавить(ДокСсылка);
			
		КонецЕсли;
		
		Накладная = ?(ДокументыОснования[0].Метаданные().Имя = "РеализацияОтгруженныхТоваров", ДокументыОснования[0].ДокументОтгрузки, ДокументыОснования[0]);
		
		ДанныеШапки = Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруШапки(Накладная, СчетФактура);
		
		ДанныеШапки.Вставить("Номер"					, Модуль_ИнтеграцияОбщий.ПолучитьНомерНаПечатьДиадок(Накладная));
		ДанныеШапки.Вставить("Подразделение"			, Модуль_ИнтеграцияОбщий.ПолучитьПодразделениеИзДокумента(Накладная));
		
		Если НЕ ДанныеШапки.Свойство("БанковскийСчетОрганизации") Тогда
			ДанныеШапки.Вставить("БанковскийСчетОрганизации", Модуль_ИнтеграцияОбщий.ПолучитьБанковскийСчетПоДокументу(Накладная));
		КонецЕсли;
		
		ДанныеШапки.Вставить("Функция", ?(ДопПараметры.ФункцияУПД = "СЧФДОП", "InvoiceAndBasic", ?(ДопПараметры.ФункцияУПД = "СЧФ", "Invoice", "Basic")));
		
		Если ДопПараметры.ФункцияУПД = "СЧФДОП" ИЛИ ДопПараметры.ФункцияУПД = "ДОП" Тогда
			ДатаОтгрузки = Накладная.Дата;
			Если ДатаОтгрузки <> ДанныеШапки.Дата Тогда
				ДанныеШапки.Вставить("ДатаОтгрузки", ДатаОтгрузки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			ДанныеШапки.Вставить("НомераДляСФ"						 , Модуль_ИнтеграцияОбщий.ПолучитьНомераДляСФ(СчетФактура));
			ДанныеШапки.Вставить("СФНаАванс"						 , Модуль_ИнтеграцияОбщий.ЭтоСчетФактуранаАванс(СчетФактура))  ;
			ДанныеШапки.Вставить("КПППокупателя"			  		 , Модуль_ИнтеграцияОбщий.ПолучитьКПППокупателя(СчетФактура)); 
			ДанныеШапки.Вставить("ДатаНомерДокументовОплаты"		 , Модуль_ИнтеграцияОбщий.ПолучитьДатуНомерДокументовОплаты(СчетФактура));
			ДанныеШапки.Вставить("ДатаНомерСвидетельстваОРегистрации", Модуль_ИнтеграцияОбщий.ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(СчетФактура.Организация));
			
			ТабличнаяЧасть = ПолучитьТаблицуСФ(СчетФактура, ДокументыОснования, Ложь);
			
		Иначе
			ТабличнаяЧасть = ПолучитьДанныеТабличнойЧастиДляДокументаРеализации(Накладная, ДанныеШапки, Истина);
		КонецЕсли;
		
		ДанныеШапки.Вставить("СодержитТовары", ТабличнаяЧасть.Найти(Ложь, "ЭтоУслуга") <> Неопределено);
		
		Если НЕ ДанныеШапки.СодержитТовары Тогда
			ДанныеШапки.Грузоотправитель = Неопределено;
			ДанныеШапки.Грузополучатель  = Неопределено;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ОснованияПередачи", ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_TransferBases());
		
		ДобавленныеОснования = Новый Соответствие;
		Для Каждого ДокументОснование ИЗ ДокументыОснования Цикл
			
			Если ДанныеШапки.Свойство("ДоговорКонтрагента") Тогда
				СтруктураОснования = ЗаполнитьСтруктуруОснования(ДанныеШапки.ДоговорКонтрагента, Истина);
			Иначе
				СтруктураОснования = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьСтруктуруОснования(ДокументОснование, Ложь, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураОснования.GroundDate) И ЗначениеЗаполнено(СтруктураОснования.GroundName) Тогда
				
				Если ДобавленныеОснования[СтруктураОснования.Основание] <> Истина Тогда
					
					ДобавленныеОснования.Вставить(СтруктураОснования.Основание, Истина);
					
					НоваяСтрока = ДанныеШапки.ОснованияПередачи.Добавить();
					НоваяСтрока.DocumentName   = СтруктураОснования.GroundName;
					НоваяСтрока.DocumentNumber = СокрЛП(СтруктураОснования.GroundNumber);
					НоваяСтрока.DocumentDate   = СтруктураОснования.GroundDate;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеШапки"   , ДанныеШапки);
		Результат.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		
		Возврат Результат;
		
	КонецФункции 	

//} ФОРМИРОВАНИЕ XML УПД

//{ ФОРМИРОВАНИЕ XML УКД

	Функция ДанныеДляФормированияУКД(ДокСсылка, ДопПараметры) Экспорт 
		
		Если ДопПараметры.ФункцияУПД = "КСЧФДИС" ИЛИ ДопПараметры.ФункцияУПД = "КСЧФ" Тогда
			СчетФактура 	   = ДокСсылка;
			ДокументыОснования = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(ДокСсылка);
		Иначе
			СчетФактура 		= Неопределено;
			ДокументыОснования 	= Новый Массив;
			ДокументыОснования.Добавить(ДокСсылка);
		КонецЕсли;
		
		Накладная = ?(ДокументыОснования[0].Метаданные().Имя = "РеализацияОтгруженныхТоваров", ДокументыОснования[0].ДокументОтгрузки, ДокументыОснования[0]);
		
		ДанныеШапки = Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруШапки(Накладная, СчетФактура);
		
		ДанныеШапки.Вставить("НомераДляКСФ", Модуль_ИнтеграцияОбщий.ПолучитьНомераДляКСФ(ДокСсылка));
		
		ДанныеШапки.Вставить("Номер", 			Модуль_ИнтеграцияОбщий.ПолучитьНомерНаПечатьДиадок(Накладная));
		ДанныеШапки.Вставить("Подразделение", 	Модуль_ИнтеграцияОбщий.ПолучитьПодразделениеИзДокумента(Накладная));
		
		Если НЕ ДанныеШапки.Свойство("БанковскийСчетОрганизации") Тогда
			ДанныеШапки.Вставить("БанковскийСчетОрганизации", Модуль_ИнтеграцияОбщий.ПолучитьБанковскийСчетПоДокументу(Накладная));
		КонецЕсли;
		
		ДанныеШапки.Вставить("Функция", ?(ДопПараметры.ФункцияУПД = "КСЧФДИС", "InvoiceAndBasic", ?(ДопПараметры.ФункцияУПД = "КСЧФ", "Invoice", "Basic")));
		
		Если ДопПараметры.ФункцияУПД = "КСЧФДИС" ИЛИ ДопПараметры.ФункцияУПД = "ДИС" Тогда
			ДатаУведомления = Накладная.Дата;
			Если ДатаУведомления <> ДанныеШапки.Дата Тогда
				ДанныеШапки.Вставить("ДатаУведомления", ДатаУведомления);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			ДанныеШапки.Вставить("КПППокупателя", Модуль_ИнтеграцияОбщий.ПолучитьКПППокупателя(СчетФактура)); 
		КонецЕсли;
		
		ТабличнаяЧасть = ПолучитьТаблицуСФ(СчетФактура, ДокументыОснования, Истина, ДопПараметры.ФункцияУПД = "ДИС");
		
		Если Накладная.Метаданные().Реквизиты.Найти("СопроводительныеДокументы") <> Неопределено Тогда
			ДанныеШапки.Вставить("ИныеСведенияОбИзмененииСтоимости", Накладная.СопроводительныеДокументы);
		КонецЕсли;
		
		ДанныеШапки.Вставить("ОснованияПередачи", ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_CorrectionBases());
		
		РеквизитыПередаточныхДокументов		= "";
		ДобавленныеПередаточныеДокументы	= Новый Соответствие;
		
		Если ДопПараметры.ФункцияУПД = "КСЧФДИС" ИЛИ ДопПараметры.ФункцияУПД = "ДИС" Тогда
			ТипПередаточногоДокумента = "УПД ";
		Иначе
			ТипПередаточногоДокумента = "";
		КонецЕсли;
		
		ДобавленныеОснования = Новый Соответствие;
		
		Для Каждого ДокументОснование ИЗ ДокументыОснования Цикл
			
			Если ДанныеШапки.Свойство("ДоговорКонтрагента") Тогда
				СтруктураОснования = ЗаполнитьСтруктуруОснования(ДанныеШапки.ДоговорКонтрагента, Истина);
			Иначе
				СтруктураОснования = Модуль_ИнтеграцияОбщий.ПолучитьСтруктуруОснования(ДокументОснование, Ложь, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураОснования.GroundDate) И ЗначениеЗаполнено(СтруктураОснования.GroundName) Тогда
				
				Если ДобавленныеОснования[СтруктураОснования.Основание] <> Истина Тогда
					
					ДобавленныеОснования.Вставить(СтруктураОснования.Основание, Истина);
					
					НоваяСтрока = ДанныеШапки.ОснованияПередачи.Добавить();
					НоваяСтрока.BaseDocumentName   = СтруктураОснования.GroundName;
					НоваяСтрока.BaseDocumentNumber = СокрЛП(СтруктураОснования.GroundNumber);
					НоваяСтрока.BaseDocumentDate   = СтруктураОснования.GroundDate;
		
					
				КонецЕсли;
			КонецЕсли;
			
			ИсправляемыйДокументРеализации = Модуль_ИнтеграцияОбщий.ПолучитьИсправляемыйДокументРеализации(ДокументОснование);
			Если ДопПараметры.ФункцияУПД = "КСЧФДИС" ИЛИ ДопПараметры.ФункцияУПД = "КСЧФ" Тогда 
				ПередаточныйДокумент = Модуль_ИнтеграцияОбщий.ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(ИсправляемыйДокументРеализации);
			Иначе
				ПередаточныйДокумент = ИсправляемыйДокументРеализации;
			КонецЕсли;
			
			Если ДобавленныеПередаточныеДокументы[ПередаточныйДокумент] <> Истина Тогда
				
				ДобавленныеПередаточныеДокументы.Вставить(ПередаточныйДокумент, Истина);
				
				РеквизитыПередаточныхДокументов	= РеквизитыПередаточныхДокументов + ?(ПустаяСтрока(РеквизитыПередаточныхДокументов), "", ", ")
							  					+ ТипПередаточногоДокумента + "№" + Модуль_ИнтеграцияОбщий.ПолучитьНомерНаПечатьДиадок(ПередаточныйДокумент) 
							  					+ " от " + Формат(ПередаточныйДокумент.Дата, "ДФ=dd.MM.yyyy");
													
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов); 
		
		Результат = Новый Структура;
		Результат.Вставить("ДанныеШапки", 		ДанныеШапки);
		Результат.Вставить("ТабличнаяЧасть", 	ТабличнаяЧасть);
		
		Возврат Результат;
		
	КонецФункции 	

//} ФОРМИРОВАНИЕ XML УКД

//{ ФОРМИРОВАНИЕ ДОКУМЕНТОВ 1С
	
	Процедура Заполнить_Строку_Данными1С(СтрокаТЧ, ПараметрыЗаполнения) Экспорт
		
		Если ПараметрыЗаполнения.ВидОперации = "ПоступлениеОбъектовСтроительства" Тогда 
			СтрокаТЧ.Номенклатура = справочники.ОбъектыСтроительства.ПустаяСсылка();
			строкаТЧ.ЕдиницаИзмерения = "";
		ИначеЕсли ПараметрыЗаполнения.ВидОперации = "ПоступлениеНМА" Тогда
			СтрокаТЧ.Номенклатура = справочники.НематериальныеАктивы.ПустаяСсылка();
			СтрокаТЧ.ЕдиницаИзмерения = "";
		ИначеЕсли ПараметрыЗаполнения.ВидОперации = "ПоступлениеАвтомобилей" Тогда
			Автомобиль =  Номенклатура_ПолучитьАвтомобильПоVIN(строкаТч.XmlTorg12_Item.Name);
			Если ЗначениеЗаполнено(Автомобиль) Тогда
				СтрокаТЧ.Номенклатура = Автомобиль;	
			Иначе
				СтрокаТЧ.Номенклатура = справочники.Автомобили.ПустаяСсылка();
			КонецЕсли;
			строкаТЧ.VINЭД = Номенклатура_ПолучитьVINИзНаименования(строкаТч.XmlTorg12_Item.Name);
		Иначе 	
			
			item = строкаТЧ.XmlTorg12_Item;
			
			строкаТЧ.Номенклатура = Номенклатура_ПолучитьНоменклатуруПоставщика(ПараметрыЗаполнения.Контрагент, item.Name, item.Code, item.NomenclatureArticle);
			
			Если НЕ ЗначениеЗаполнено(строкаТЧ.Номенклатура) И ЗначениеЗаполнено(item.Code) Тогда
				строкаТЧ.Номенклатура = Номенклатура_ПолучитьНоменклатуруПоАртикулу(item.Code);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(строкаТЧ.номенклатура) = Ложь Тогда
				строкаТЧ.Номенклатура = справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;	 
			
			Если ПараметрыЗаполнения.ВидОперации = "ПоступлениеДопРасходов" Тогда
				СтрокаТЧ.ЕдиницаИзмерения = "";	 
			КонецЕсли;
			
		КонецЕсли;	
		
		СтрокаТЧ.СтавкаНДС = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ItemStruct_2_СтавкаНДС(строкаТЧ.XmlTorg12_Item);
		
		ЗаполнитьСтрокуПоНоменклатуре(строкаТЧ, ПараметрыЗаполнения.ВидОперации, ПараметрыЗаполнения.СуммаВключаетНДС, ПараметрыЗаполнения.ИспользоватьЕдиницуИзмерения, ПараметрыЗаполнения.Type);
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДанными1С(ТабличнаяЧасть, ПараметрыЗаполнения) Экспорт
		
		НомерСтроки = 0;
		
		Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТабличнойЧасти.НомерСтроки = НомерСтроки;
			
			Заполнить_Строку_Данными1С(СтрокаТабличнойЧасти, ПараметрыЗаполнения);
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьСтрокуПоНоменклатуре(строкаТЧ, ВидОперации, СуммаВключаетНДС, ИспользоватьЕдиницуИзмерения, Type) Экспорт
		
		ЗаполнитьТипНоменклатуры(строкаТЧ, ВидОперации, Type);
		Если ИспользоватьЕдиницуИзмерения Тогда
			строкаТЧ.ЕдиницаИзмерения = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ItemStruct_2_ЕдиницаИзмерения(строкаТЧ.XmlTorg12_Item, строкаТЧ.Номенклатура);
			коэффициент =  ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьКоэффициентПересчетаПоItemStruct(строкаТЧ.XmlTorg12_Item, 	строкаТЧ.ЕдиницаИзмерения);
			ПересчитатьСтрокуПоКоэффициенту(СтрокаТЧ, ВидОперации, Коэффициент, СуммаВключаетНДС);
		КонецЕсли;
		
		Если строкаТЧ.Номенклатура.Метаданные().Реквизиты.Найти("Артикул") <> Неопределено Тогда
			Артикул = строкаТЧ.Номенклатура.Артикул;
		Иначе
			Артикул = строкаТЧ.Номенклатура.Код;
		КонецЕсли;
		
		строкаТЧ.Артикул = Артикул;
		Если ВидОперации = "ПоступлениеАвтомобилей" Тогда
			строкаТЧ.VIN = строкаТЧ.Номенклатура.VIN;
		КонецЕсли;
		
		ПересчитатьПоляСУчетомНДС(строкаТЧ, ВидОперации, СуммаВключаетНДС);
		
	КонецПроцедуры
	
	Процедура ПересчитатьСтрокуПоКоэффициенту(СтрокаТЧ, ВидОперации, Коэффициент, СуммаВключаетНДС) Экспорт
		
		строкаТЧ.Количество =строкаТЧ.Количество * Коэффициент;
		
		ПересчитатьПоляСУчетомНДС(строкаТЧ, ВидОперации, СуммаВключаетНДС);
		
	КонецПроцедуры
	
	Процедура ЗаполнитьТипНоменклатуры(строкаТЧ, ВидОперации, Type) Экспорт
		
		Если ТипЗнч(строкаТЧ.Номенклатура)<>тип("СправочникСсылка.Номенклатура") Тогда 
			ЭтоУслуга = Ложь;
		Иначе 	
			ЭтоУслуга = ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").НоменклатураЯвляетсяУслугой(строкаТЧ.Номенклатура);
		КонецЕсли;	
		
		Если  видОперации="ПоступлениеОборудования" Тогда 
			строкаТЧ.Тип = "Оборудование";
		ИначеЕсли видОперации = "ПоступлениеОбъектовСтроительства"	 Тогда 
			строкаТЧ.Тип = "Объект стр";
		ИначеЕсли видОперации = "ПоступлениеНМА"	 Тогда 
			строкаТЧ.Тип = "НМА";
		ИначеЕсли видОперации = "ПоступлениеАвтомобилей"	 Тогда 
			строкаТЧ.Тип = "Автомобиль";
		ИначеЕсли Type = "XmlAcceptanceCertificate" или ЭтоУслуга  или видОперации = "ПоступлениеДопРасходов" Тогда
			строкаТЧ.Тип = "Услуга";
		Иначе 
			строкаТЧ.Тип =  "Товар";
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьСериюНоменклатуры(строкаТЧ)Экспорт
		
		Если ЗначениеЗаполнено(строкаТЧ.Номенклатура)
			И ЗначениеЗаполнено(строкаТЧ.ГТД) Тогда
			
			Если строкаТЧ.Номенклатура.ВестиУчетПоСериям = Истина Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СерииНоменклатуры.Ссылка
				|ИЗ
				|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
				|ГДЕ
				|	СерииНоменклатуры.Владелец = &Владелец
				|	И СерииНоменклатуры.НомерГТД = &НомерГТД
				|	И СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("Владелец", строкаТЧ.Номенклатура);
				Запрос.УстановитьПараметр("НомерГТД", Справочники.НомераГТД.НайтиПоКоду(строкаТЧ.ГТД));
				
				Результат = Запрос.Выполнить().Выгрузить();
				
				Если Результат.Количество()>0 Тогда
					строкаТЧ.Серия = Результат[0].Ссылка;
				Иначе
					строкаТЧ.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			Иначе
				строкаТЧ.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли; 
	
	КонецПроцедуры
	
	Функция СоздатьИЗаполнитьСериюНоменклатуры(Строка) Экспорт 
		
		ЗаполнитьСериюНоменклатуры(Строка);
		
		Если ЗначениеЗаполнено(Строка.Серия) Тогда
			Возврат Строка.Серия;    
		КонецЕсли;
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		
		Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(Строка.СтранаПроисхожденияЭД);
		Если ЗначениеЗаполнено(Страна) И Страна.ПометкаУдаления = Ложь Тогда
			НоваяСерия.СтранаПроисхождения = Страна;
		Иначе
			Макет = справочники.КлассификаторСтранМира.ПолучитьМакет("КлассификаторСтранМира");
			ОбластьМакета = макет.НайтиТекст(Строка.СтранаПроисхожденияЭД,,,Истина,);
			
			Если ЗначениеЗаполнено(ОбластьМакета) Тогда
				
				КодСтраны = Макет.Область(ОбластьМакета.Верх, 2).Текст;
				Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(КодСтраны);
				Если Не ЗначениеЗаполнено(Страна) Тогда
					СтранаОбъект = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
					
					СтранаОбъект.Код 					= КодСтраны;
					СтранаОбъект.Наименование 			= Макет.Область(ОбластьМакета.Верх, 3).Текст;
					СтранаОбъект.КодАльфа2 				= Макет.Область(ОбластьМакета.Верх, 4).Текст;
					СтранаОбъект.НаименованиеПолное 	= Макет.Область(ОбластьМакета.Верх, 6).Текст;
					
					СтранаОбъект.Записать();
					Страна = СтранаОбъект.Ссылка;

				КонецЕсли;
				
				НоваяСерия.СтранаПроисхождения = Страна.Ссылка;
			Иначе
				Сообщить("Страна " + Строка.СтранаПроисхожденияЭД + " в классификаторе стрен мира не найдена.
				|Для номенклатуры " + Строка.Номенклатура + " серия не создана.");
				Возврат Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		ГТД = Справочники.НомераГТД.НайтиПоКоду(Строка.ГТД);
		
		Если Не ЗначениеЗаполнено(ГТД) Тогда
			ГТД = Справочники.НомераГТД.СоздатьЭлемент();
			ГТД.Код = Строка.ГТД;
			ГТД.Записать();
		КонецЕсли; 
		
		НоваяСерия.НомерГТД = ГТД.Ссылка;
		НоваяСерия.Владелец = Строка.Номенклатура;
		НоваяСерия.Наименование = "" + Строка.ГТД + ", " + Страна.Наименование; 
		
		НоваяСерия.Записать();
		
		Возврат НоваяСерия.Ссылка;
		
	КонецФункции // СоздатьИЗаполнитьСериюНоменклатуры()
	
	Процедура СоздатьСтрокиВТЧДля1СПоСтрокамГТД(ТабличнаяЧасть, строкаDocument, InvoiceItemsПоГТД)
		
		ВсегоИтого = 0;
		СуммаНДСИтого = 0;
		СтрокаДля1С = Неопределено;
		
		Для каждого строкаInvoice Из InvoiceItemsПоГТД Цикл
			
			СтрокаДля1С = ТабличнаяЧасть.Добавить();
			СтрокаДля1С.НоменклатураИзЭД = строкаDocument.Name;
			СтрокаДля1С.АртикулЭД = строкаDocument.Code;
			СтрокаДля1С.ЕдиницаИзЭД = строкаDocument.UnitName;
			СтрокаДля1С.Количество = строкаInvoice.Quantity;
			СтрокаДля1С.СуммаНДС = строкаDocument.Vat * строкаInvoice.Quantity / InvoiceItemsПоГТД.Итог("Quantity");
			СтрокаДля1С.Всего = строкаDocument.Subtotal * строкаInvoice.Quantity / InvoiceItemsПоГТД.Итог("Quantity");
			СтрокаДля1С.XmlTorg12_Item = строкаDocument;
			СтрокаДля1С.XmlTorg12_ItemSubtotal = строкаDocument.Subtotal * строкаInvoice.Quantity / InvoiceItemsПоГТД.Итог("Quantity");
			СтрокаДля1С.XmlTorg12_ItemSubtotalWithVatExcluded = строкаDocument.SubtotalWithVatExcluded * строкаInvoice.Quantity / InvoiceItemsПоГТД.Итог("Quantity");
			СтрокаДля1С.ГТД 					= строкаInvoice.TDNumber;
			СтрокаДля1С.КодСтраныПроисхожденияЭД= строкаInvoice.CountryCode;
			СтрокаДля1С.СтранаПроисхожденияЭД 	= НаименованиеСтраны(строкаInvoice.CountryCode);
			СтрокаДля1С.СтранаПроисхождения = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтрокаДля1С.КодСтраныПроисхожденияЭД);
			
			ВсегоИтого = ВсегоИтого + СтрокаДля1С.Всего;
			СуммаНДСИтого = СуммаНДСИтого + СтрокаДля1С.СуммаНДС;
			
		КонецЦикла;
		
		Если СтрокаДля1С <> Неопределено Тогда
			СтрокаДля1С.Всего = СтрокаДля1С.Всего + (строкаDocument.Subtotal - ВсегоИтого);
			СтрокаДля1С.СуммаНДС = СтрокаДля1С.СуммаНДС + (строкаDocument.Vat - СуммаНДСИтого);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(СтрокаДля1С, строкаDocument) 
		
		СтрокаДля1С.НоменклатураИзЭД = строкаDocument.Name;
		СтрокаДля1С.АртикулЭД = строкаDocument.Code;
		СтрокаДля1С.ЕдиницаИзЭД = строкаDocument.UnitName;
		СтрокаДля1С.Количество = строкаDocument.Quantity;
		СтрокаДля1С.СуммаНДС = строкаDocument.Vat;
		СтрокаДля1С.Всего = строкаDocument.Subtotal;
		СтрокаДля1С.XmlTorg12_Item = строкаDocument;
		СтрокаДля1С.XmlTorg12_ItemSubtotal = строкаDocument.Subtotal;
		СтрокаДля1С.XmlTorg12_ItemSubtotalWithVatExcluded = строкаDocument.SubtotalWithVatExcluded;
		
	КонецПроцедуры
	
	Процедура ПересчитатьПоляСУчетомНДС(строкаТЧ, ВидОперации, СуммаВключаетНДС) Экспорт
		
		Если СуммаВключаетНДС Тогда
			строкаТЧ.Сумма = строкаТЧ.XmlTorg12_ItemSubtotal;
		Иначе
			строкаТЧ.Сумма = строкаТЧ.XmlTorg12_ItemSubtotalWithVatExcluded;
		КонецЕсли;
		строкаТЧ.Цена = ?(строкаТЧ.Количество = 0, строкаТЧ.Сумма, строкаТЧ.Сумма / строкаТЧ.Количество);
		
	КонецПроцедуры
	
	Функция ПолучитьДоговорКонтрагента(Организация, Контрагент, ДоговорСвойство, НазваниеТипаСправочника, ВидОперации) Экспорт
		
		Перем ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(ДоговорСвойство) Тогда
			ДоговорКонтрагента= ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект("DDContract", ДоговорСвойство);
		КонецЕсли;
		
		// не во всех формализованных документах форматом предусмотрено передавать наименование договора
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьСписокВидовДоговоров(ВидОперации));
		КонецЕсли;
				
		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента= Новый(НазваниеТипаСправочника);
		КонецЕсли;
		
		Возврат ДоговорКонтрагента;
		
	КонецФункции
	
	Функция ИницализироватьТабличнуюЧастьСтруктурыДокумента()
		
		ТабличнаяЧасть=	Новый ТаблицаЗначений;
		
		ТабличнаяЧасть.Колонки.Добавить("НомерСтроки");
		ТабличнаяЧасть.Колонки.Добавить("Тип");
		ТабличнаяЧасть.Колонки.Добавить("VINЭД");
		ТабличнаяЧасть.Колонки.Добавить("АртикулЭД");
		ТабличнаяЧасть.Колонки.Добавить("НоменклатураИзЭД");
		ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзЭД");
		ТабличнаяЧасть.Колонки.Добавить("Артикул");
		ТабличнаяЧасть.Колонки.Добавить("VIN");
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмерения");
		ТабличнаяЧасть.Колонки.Добавить("Количество");
		ТабличнаяЧасть.Колонки.Добавить("Цена");
		ТабличнаяЧасть.Колонки.Добавить("Сумма");
		ТабличнаяЧасть.Колонки.Добавить("СтавкаНДС");
		ТабличнаяЧасть.Колонки.Добавить("СуммаНДС");
		ТабличнаяЧасть.Колонки.Добавить("Комитент");
		ТабличнаяЧасть.Колонки.Добавить("Всего");
		ТабличнаяЧасть.Колонки.Добавить("ГТД");
		ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхожденияЭД");
		ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхождения");
		ТабличнаяЧасть.Колонки.Добавить("КодСтраныПроисхожденияЭД");
		ТабличнаяЧасть.Колонки.Добавить("XmlTorg12_Item");
		ТабличнаяЧасть.Колонки.Добавить("XmlTorg12_ItemSubtotal");
		ТабличнаяЧасть.Колонки.Добавить("XmlTorg12_ItemSubtotalWithVatExcluded");
		
		Возврат ТабличнаяЧасть;
		
	КонецФункции
	
	Процедура ЗаполнитьДанныеЭД(ContentDocument, СтруктураДокумента, Document)
		
		СтруктураДокумента.ТабличнаяЧасть.Очистить();
		
		Если Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП") Тогда
			
			Для Каждого Item ИЗ ContentDocument.Items Цикл
				            
				НоваяСтрока = СтруктураДокумента.ТабличнаяЧасть.Добавить();
				ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(НоваяСтрока, Item);
				
				Если ЗначениеЗаполнено(Item.TDNumber) Тогда
					
					НоваяСтрока.ГТД = Item.TDNumber;
					НоваяСтрока.КодСтраныПроисхожденияЭД	= Item.CountryCode;
					НоваяСтрока.СтранаПроисхожденияЭД		= НаименованиеСтраны(Item.CountryCode);
					НоваяСтрока.СтранаПроисхождения			= Справочники.КлассификаторСтранМира.НайтиПоКоду(НоваяСтрока.КодСтраныПроисхожденияЭД);
					
				КонецЕсли;
					
			КонецЦикла;
			
		Иначе
			
			СоответствиеСтрокСГТД =	ПолучитьМодульПрог("Форма_Диадок_ЭД").ПолучитьСоответствиеСтрокСГТД(ContentDocument);
			Для Каждого Item Из ContentDocument.Items Цикл
				Если СоответствиеСтрокСГТД = Неопределено ИЛИ СоответствиеСтрокСГТД[Item].Количество() = 0 Тогда
					СтрокаДля1С = СтруктураДокумента.ТабличнаяЧасть.Добавить();
					ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(СтрокаДля1С, Item);
				Иначе
					СоздатьСтрокиВТЧДля1СПоСтрокамГТД(СтруктураДокумента.ТабличнаяЧасть, Item, соответствиеСтрокСГТД[Item]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураДокумента.ДоговорСвойство = ContentDocument.НаименованиеДоговора;
		Если ЗначениеЗаполнено(СтруктураДокумента.Контрагент) Тогда
			СтруктураДокумента.ДоговорКонтрагента = Модуль_ЗаполнениеКонтента.ПолучитьДоговорКонтрагента(СтруктураДокумента.Организация, СтруктураДокумента.Контрагент, СтруктураДокумента.ДоговорСвойство, ОдинСАдаптер_Документы_ПолучитьТипСправочникаДоговоров(), СтруктураДокумента.ВидОперации);
		Иначе
			СтруктураДокумента.ДоговорКонтрагента = Новый(ОдинСАдаптер_Документы_ПолучитьТипСправочникаДоговоров());
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ОпределитьВидОперации(ContentDocument)
		
		Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияАльфаАвто41" Тогда
			Для Каждого Item ИЗ ContentDocument.Items Цикл
				Если Найти(Item.Name, "VIN") > 0 Тогда
					Возврат "ПоступлениеАвтомобилей";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат "ПокупкаКомиссия";
			
	КонецФункции
	
	Функция ОпределитьИспользованиеЕдиницыИзмерения(ЭДОбъект, ВидОперации)
		
		Если (ВидОперации = "ВозвратОтПокупателя" 
			ИЛИ ВидОперации="ПоступлениеОбъектовСтроительства" 
			ИЛИ ВидОперации="ПоступлениеНМА"
			ИЛИ ВидОперации="ПоступлениеДопРасходов"
			ИЛИ ВидОперации="ПоступлениеАвтомобилей")
			ИЛИ (ЭДОбъект.Type = "XmlAcceptanceCertificate") Тогда
			Возврат	Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьЗначениеНастройкиСуммаВключаетНДС()
		
		Результат =  ВосстановитьЗначение("Диадок_РежимВводаВходящейНакладнойСуммаВключаетНДС");
		Если Результат = неопределено тогда
			Результат = истина;
		КонецЕсли;
		
		возврат Результат;
		
	КонецФункции	
	
	Процедура ЗаполнитьСтруктуруДокумента(СтруктураДокумента, Document, DocumentContent)
		
		ContentDocument= ПолучитьМодульПрог("Форма_Диадок_ЭД").ПолучитьСтруктуруСодержанияДокумента(Document, DocumentContent);
		
		СтруктураДокумента.СуммаВключаетНДС=				ПолучитьЗначениеНастройкиСуммаВключаетНДС();
		СтруктураДокумента.Организация=						ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxIDDepartment_2_Организация(Document.OrganizationId, Document.Department);
		СтруктураДокумента.Контрагент=						ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(Document.Counteragent.Id, Document.OrganizationId);
		СтруктураДокумента.ВидОперации=						ОпределитьВидОперации(ContentDocument);
		СтруктураДокумента.ИспользоватьЕдиницуИзмерения=	ОпределитьИспользованиеЕдиницыИзмерения(Document, СтруктураДокумента.ВидОперации);
		СтруктураДокумента.ДатаВходящегоДокумента=			Document.DocumentDate;
		СтруктураДокумента.НомерВходящегоДокумента=			Document.DocumentNumber;
		
		СтруктураДокумента.DocumentType=					Document.Type;
				
		Если ContentDocument.Свойство("Shipper") Тогда
			
			Параметры= Новый Структура("инн, кпп", ContentDocument.Shipper.Inn, ContentDocument.Shipper.Kpp);
			
			Грузоотправитель= ПолучитьГрузоотправителяГрузополучателя1С(Параметры);
			Если ЗначениеЗаполнено(Грузоотправитель) Тогда
				СтруктураДокумента.Вставить("Грузоотправитель", Грузоотправитель);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если ContentDocument.Свойство("Consignee") Тогда
			
			Параметры= Новый Структура("инн, кпп", ContentDocument.Consignee.Inn, ContentDocument.Consignee.Kpp);
			
			Грузополучатель= ПолучитьГрузоотправителяГрузополучателя1С(Параметры);
			Если ЗначениеЗаполнено(Грузополучатель) Тогда
				СтруктураДокумента.Вставить("Грузополучатель", Грузополучатель);	
			КонецЕсли;
			
		КонецЕсли;
				
		Если Document.Department <> Неопределено Тогда
			
			DepartmentID= Document.Department.Id;
			
			СтруктураДокумента.Склад= 		  ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект("DepartmentID"	   , DepartmentID);
			СтруктураДокумента.Подразделение= ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект("Подр_DepartmentID", DepartmentID);
			
		КонецЕсли;
		
		ЗаполнитьДанныеЭД(ContentDocument, СтруктураДокумента, Document);
		
	КонецПроцедуры
	
	Функция ПолучитьГрузоотправителяГрузополучателя1С(Параметры)
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьГрузоотправителяГрузополучателя1С(Параметры);
				
	КонецФункции
		
	Функция ИницализироватьСтруктуруДокумента1С()
		
		СтруктураДокумента1С= Новый Структура();
		
		СтруктураДокумента1С.Вставить("DocumentType");
		СтруктураДокумента1С.Вставить("Организация");
		СтруктураДокумента1С.Вставить("Контрагент");
		СтруктураДокумента1С.Вставить("ДоговорСвойство");
		СтруктураДокумента1С.Вставить("ДоговорКонтрагента");
		СтруктураДокумента1С.Вставить("Склад");
		СтруктураДокумента1С.Вставить("Подразделение");
		СтруктураДокумента1С.Вставить("СуммаВключаетНДС");
		СтруктураДокумента1С.Вставить("ДатаВходящегоДокумента");
		СтруктураДокумента1С.Вставить("НомерВходящегоДокумента");
		СтруктураДокумента1С.Вставить("ВидОперации");
		СтруктураДокумента1С.Вставить("ИспользоватьЕдиницуИзмерения");
		
		СтруктураДокумента1С.Вставить("ТабличнаяЧасть", ИницализироватьТабличнуюЧастьСтруктурыДокумента());
						
		Возврат СтруктураДокумента1С;
		
	КонецФункции
	
	Функция ИницализироватьИЗаполнитьСтруктуруДокумента1С(Document, DocumentContent) Экспорт
		
		СтруктураДокумента= ИницализироватьСтруктуруДокумента1С();
		ЗаполнитьСтруктуруДокумента(СтруктураДокумента, Document, DocumentContent);
		
		Возврат СтруктураДокумента;
		
	КонецФункции
	
	Функция ПолучитьПеречислениеКолонокДляСвертки(ПеречислениеИзмерений, ТаблицаЗначений)
		
		Результат = "";
		Шаблон =  ПеречислениеИзмерений+",";
		
		Для Каждого Колонка из  ТаблицаЗначений.Колонки Цикл 
			Если Найти(Шаблон, Колонка.Имя+","  )=0 Тогда 
				Результат = Колонка.Имя+", "+Результат;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Результат <> "" Тогда
			Результат = лев(Результат, СтрДлина(Результат)-2);
		КонецЕсли;
		
		Возврат результат;
		
	КонецФункции
	
	Функция ЗаполнитьСтруктуруОснования(ДоговорКонтрагента, ЭтоУПД) Экспорт 
		
		Ground = Новый Структура;
		Ground.Вставить("GroundName", 	"");
		Ground.Вставить("GroundNumber", "");
		Ground.Вставить("GroundDate", 	"");
		Ground.Вставить("Основание", 	"");
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				
			Если ЭтоУПД Тогда
				ПредставлениеДоговора= "Договор";
			Иначе
				ПредставлениеДоговора= ДоговорКонтрагента.Наименование;
			КонецЕсли;
				
			Ground.Вставить("GroundName", 	ПредставлениеДоговора);
			Ground.Вставить("GroundNumber", ДоговорКонтрагента.Номер);
			Ground.Вставить("GroundDate", 	ДоговорКонтрагента.Дата);
			Ground.Вставить("Основание", 	ДоговорКонтрагента);
			
		КонецЕсли;
		
		Возврат Ground;
		
	КонецФункции
	
//} ФОРМИРОВАНИЕ ДОКУМЕНТОВ 1С
