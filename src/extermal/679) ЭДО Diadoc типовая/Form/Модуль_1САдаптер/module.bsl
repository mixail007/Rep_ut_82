Перем ТекущийПользователь, СтруктураНастроекПользователя;

Функция Инициализировать(Контекст1САдаптерКонфигурации) Экспорт
	
	Контекст1САдаптерКонфигурации.Очистить();
	Контекст1САдаптерКонфигурации.Вставить("СвойстваОбъектов");
	Контекст1САдаптерКонфигурации.Вставить("ЗапретСозданияПВХВПериферийнойБазе"		, Ложь);
	Контекст1САдаптерКонфигурации.Вставить("Профиль_НастройкиТекущегоПользователя"	, ОпределитьПрофиль_НастройкиТекущегоПользователя());
	Контекст1САдаптерКонфигурации.Вставить("Профиль_СвойстваОбъектов"				, ОпределитьПрофиль_СвойстваОбъектов());
	Контекст1САдаптерКонфигурации.Вставить("Профиль_ГТД"							, ОпределитьПрофиль_ГТД());
	Контекст1САдаптерКонфигурации.Вставить("Профиль_ДоговораКонтрагентов"			, ОпределитьПрофиль_ДоговораКонтрагентов());
	Контекст1САдаптерКонфигурации.Вставить("Профиль_Организации"					, ОпределитьПрофиль_Организации());
	Контекст1САдаптерКонфигурации.Вставить("Профиль_Документы"						, ОпределитьПрофиль_Документы());
	
	Возврат ПодготовкаКРаботеСПВХ(Контекст1САдаптерКонфигурации);
	
КонецФункции

Функция Документы_ПолучитьТипСправочникаГТД(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_ГТД.ТипСправочникаГТД;
КонецФункции

Функция Документы_ПолучитьТипСправочникаДоговоров(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_ДоговораКонтрагентов;
КонецФункции

Функция Документы_ПолучитьТипСправочникаОрганизации(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_Организации.ТипСправочникаОрганизации;
КонецФункции

Функция Документы_ПолучитьТипДокументаСчетФактураВыданный(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_Документы.ТипДокументаСчетФактураВыданный;
КонецФункции

Функция Документы_ПолучитьТипДокументаСчетФактураПолученный(Контекст1САдаптерКонфигурации) Экспорт
	
	Если Контекст1САдаптерКонфигурации.Профиль_Документы.Свойство("ТипДокументаСчетФактураПолученный") Тогда
		Возврат Контекст1САдаптерКонфигурации.Профиль_Документы.ТипДокументаСчетФактураПолученный;
	КонецЕсли;
	
КонецФункции

Функция Документы_ПолучитьТипДокументаРеализацияТоваровУслуг(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_Документы.ТипДокументаРеализацияТоваровУслуг;
КонецФункции

Функция Документы_ПолучитьПолноеИмяДокументаСчетФактураВыданный(Контекст1САдаптерКонфигурации) Экспорт
	Возврат Контекст1САдаптерКонфигурации.Профиль_Документы.ПолноеИмяДокументаСчетФактураВыданный;
КонецФункции

Функция Документы_ПолучитьПолноеИмяДокументаСчетФактураПолученный(Контекст1САдаптерКонфигурации) Экспорт
	
	Если Контекст1САдаптерКонфигурации.Профиль_Документы.Свойство("ПолноеИмяДокументаСчетФактураПолученный") Тогда
		Возврат Контекст1САдаптерКонфигурации.Профиль_Документы.ПолноеИмяДокументаСчетФактураПолученный;
	КонецЕсли;
	
КонецФункции


Функция ПодготовкаКРаботеСПВХ(Контекст1САдаптерКонфигурации)
	
	// В подсистеме КонтурDiadoc ПВХ не используются
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоПериферийнаяБД() Тогда
		
		НедостающиеПВХ = ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПроверитьНаличиеНастроекПользователя(ПолучитьВозможныеНастройкиПользователя());
		ПрисоединитьМассив(НедостающиеПВХ, ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПроверитьНаличиеСвойствОбъектов(ПолучитьВозможныеСвойстваОбъектов()));
		
		Если НедостающиеПВХ.Количество() <> 0 Тогда
			ВозможныеПланыОбмена = ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов(Контекст1САдаптерКонфигурации);
			Если ВозможныеПланыОбмена.Количество() = 0 Тогда
				Попытка
					СозданныеНастройки = ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).СоздатьНастройкиПользователя(СтруктураНастроекПользователя());
					ПрисоединитьМассив(СозданныеНастройки, ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).СоздатьСвойстваОбъектов(ПолучитьВозможныеСвойстваОбъектов()));
					Возврат Истина;
				Исключение
					ТекстПредупреждения = "Под правами текущего пользователя невозможно проинициализировать свойства объектов.
					|Запустите обработку от имени пользователя, у которого есть права на запись в следующих разделах:";
					НеобходимыеДляРаботыТипы = ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПолучитьНеобходимыеДляРаботыТипы();
					ПрисоединитьМассив(НеобходимыеДляРаботыТипы, ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьНеобходимыеДляРаботыТипы());
					Для каждого необходимыйТип Из НеобходимыеДляРаботыТипы Цикл
						ТекстПредупреждения = ТекстПредупреждения + "
						|" + необходимыйТип.Синоним;
					КонецЦикла;
					Предупреждение(ТекстПредупреждения,, НаименованиеСистемы);
					Возврат Ложь;
				КонецПопытки;
			Иначе
				ТекстПредупреждения = "Внимание произошла ошибка! 
				|
				|Необходимо запустить обработку в центральной базе данных, после чего выполнить обмен данными.
				|Выполните обмен по одному из следующих планов обмена:";
				Для каждого планОбмена Из ВозможныеПланыОбмена Цикл
					ТекстПредупреждения = ТекстПредупреждения + "
					|	" + Строка(планОбмена);
				КонецЦикла;
				ТекстПредупреждения = ТекстПредупреждения + "
				|
				|Служебная информация: "+ПолучитьСтрокуПоМассиву(НедостающиеПВХ);
				Предупреждение(ТекстПредупреждения,, НаименованиеСистемы);
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
		Контекст1САдаптерКонфигурации.ЗапретСозданияПВХВПериферийнойБазе = Истина;
	Иначе
		
		ПВХСвойствИмеетНужнуюДлиннуСтроки=	ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПроверитьПВХСвойствНаКвалификаторСтроки();
		Если НЕ ПВХСвойствИмеетНужнуюДлиннуСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПВХНастроекПользователейИмеетНужнуюДлиннуСтроки=	ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПроверитьПВХНастроекНаКвалификаторСтроки();
		Если НЕ ПВХНастроекПользователейИмеетНужнуюДлиннуСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СозданныеНастройки = ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).СоздатьНастройкиПользователя(СтруктураНастроекПользователя());
		ПрисоединитьМассив(СозданныеНастройки, ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).СоздатьСвойстваОбъектов(ПолучитьВозможныеСвойстваОбъектов()));
		
		Если (СозданныеНастройки.Количество() <> 0) И (ЕстьПерифирийныеБазы("Полный") или ЕстьПерифирийныеБазы("ПоОрганизации")) Тогда
			Предупреждение("В конфигурации проинициализированы свойства объектов, необходимые для работы с системой "+НаименованиеСистемы+".
			|Для корректной работы в периферийной базе данных выполните обмен данными.",,НаименованиеСистемы);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).РеструктуризироватьЗначенияСвойствОбъектов(ПолучитьВозможныеСвойстваОбъектов());
	 
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов(Контекст1САдаптерКонфигурации)
	ВозможныеПланыОбмена = Новый Массив;
	Для каждого планОбмена Из ПланыОбмена Цикл
		НеобходимыеДляРаботыТипы = ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПолучитьНеобходимыеДляРаботыТипы();
		ПрисоединитьМассив(НеобходимыеДляРаботыТипы, ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьНеобходимыеДляРаботыТипы());
		
		ПланОбменаСодержитВсеНеобходимыеТипы = Истина;
		Для каждого необходимыйТип Из НеобходимыеДляРаботыТипы Цикл
			Если НЕ планОбмена.ПолучитьСсылку().Метаданные().Состав.Содержит(необходимыйТип) Тогда
				ПланОбменаСодержитВсеНеобходимыеТипы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПланОбменаСодержитВсеНеобходимыеТипы Тогда
			ВозможныеПланыОбмена.Добавить(планОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможныеПланыОбмена;
КонецФункции

Процедура ПрисоединитьМассив(Массив1, Массив2)
	Для каждого эл2 Из Массив2 Цикл
		Массив1.Добавить(эл2);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтрокуПоМассиву(массивСтрок)
	Результат = "";
	Для каждого строкаДляВключения Из массивСтрок Цикл
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + ", ";
		КонецЕсли;
		
		Результат = Результат + строкаДляВключения;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НастройкиТекущегоПользователя_ПолучитьНастройку(Контекст1САдаптерКонфигурации, НаименованиеНастройки, ЗначениеПоУмолчанию) Экспорт
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПолучитьНастройку(НаименованиеНастройки, ЗначениеПоУмолчанию);
	
КонецФункции

Функция НастройкиТекущегоПользователя_ПолучитьНастройку1С(Контекст1САдаптерКонфигурации, НаименованиеНастройки) Экспорт
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПолучитьНастройку1С(НаименованиеНастройки);
	
КонецФункции

Функция НастройкиТекущегоПользователя_ПолучитьНастройку1С_СкладПоУмолчанию(Контекст1САдаптерКонфигурации) Экспорт
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).ПолучитьНастройку1С_СкладПоУмолчанию();
	
КонецФункции


Функция СтруктураНастроекПользователя() Экспорт
	
	Если СтруктураНастроекПользователя = Неопределено Тогда
		
		СтруктураНастроекПользователя= Новый Структура;
		
		МакетНастройкиПользователя= ПолучитьМакет("НастройкиПользователя");
		
		Для НомерСтроки= 2 ПО МакетНастройкиПользователя.ВысотаТаблицы Цикл
			
			ИдентификаторНастройки= МакетНастройкиПользователя.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
			
			Если ПустаяСтрока(ИдентификаторНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			ПолеЗначения = МакетНастройкиПользователя.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;		
			
			Если ПолеЗначения = "ЗначениеДата" Тогда
				ТипЗначения = Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата))				
				
			ИначеЕсли ПолеЗначения = "ЗначениеБулево" Тогда
				ТипЗначения = Новый ОписаниеТипов("Булево");				
				
			ИначеЕсли ПолеЗначения = "ЗначениеЧисло" Тогда
				ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла());
				
			Иначе
				ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
			КонецЕсли;
			
			СтруктураНастроекПользователя.Вставить(ИдентификаторНастройки, Новый Структура("ПолеЗначения, ТипЗначения", ПолеЗначения, ТипЗначения));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураНастроекПользователя; 
	
КонецФункции

Функция ПолучитьВозможныеНастройкиПользователя()
	
	ВозможныеНастройкиПользователя= Новый Массив;
	
	Для Каждого КлючИЗначение ИЗ СтруктураНастроекПользователя() Цикл
		ВозможныеНастройкиПользователя.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ВозможныеНастройкиПользователя;
	
КонецФункции

Функция ПолучитьВозможныеСвойстваОбъектов()
	ВозможныеСвойстваОбъектов = Новый Соответствие;
	
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадок", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадок", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДопДокументаВДиадок", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДопДокументаВДиадок", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадокСч", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадокСч", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадокСФ", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадокСФ", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("ИдентификаторВПФВДиадок", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("УсловноОтправленныйFileGUID", "Документ");
	ВозможныеСвойстваОбъектов.Вставить("СтатусОтправляемыхВПФ_Диадок", "Документ");
	
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизации", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление1", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление2", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление3", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизацииПредставление4", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ПодрДиадокДляОрганизации", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокОтправкаНепроведенных", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокОтправкаСчетовНаОплату", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФорма", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАкта", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПечатьСчетовПоЗаказу", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособОтправкиСчета", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокСписокДополнительныхВПФ", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ТекстКомментарияДиадок", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаСверки", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособОтправкиСверки", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПД", "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторЭДОДляОрганизации", "Организация");
	
	ВозможныеСвойстваОбъектов.Вставить("ДиадокШифроватьДокументы"		   , "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокШифроватьДокументыКонтрагент", "Контрагент");
	 
	ВозможныеСвойстваОбъектов.Вставить("ДДКонтр_", "Контрагент");
	ВозможныеСвойстваОбъектов.Вставить("ДДНП_", "Контрагент");
	ВозможныеСвойстваОбъектов.Вставить("ДДИДП_", "Контрагент");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокИспользоватьБелыйСписокДоговоров", "Контрагент");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПДКонтрагент", "Контрагент");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторЭДО", "Контрагент");
	
	ВозможныеСвойстваОбъектов.Вставить("DepartmentID", "Склад");
	ВозможныеСвойстваОбъектов.Вставить("DepartmentName", "Склад");
	
	ВозможныеСвойстваОбъектов.Вставить("Подр_DepartmentID", "Подразделение");
	ВозможныеСвойстваОбъектов.Вставить("Подр_DepartmentName", "Подразделение");
	
	
	ВозможныеСвойстваОбъектов.Вставить("DDContract", "Договор");
	ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentID", "Договор");
	ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentName", "Договор");
	ВозможныеСвойстваОбъектов.Вставить("Дог_ИспользоватьБелыйЛист", "Договор");
	
	ВозможныеСвойстваОбъектов.Вставить("ДиадокНомерВПФ", "ВнешняяПечатнаяФорма");
	 
	ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыНДС",	"Организация");
	ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыСНДС",	"Организация");
	ВозможныеСвойстваОбъектов.Вставить("РазрешенныйПериодКорректировки",	"Организация");
	
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПриглашенияДатаНапоминания"	  , "Организация");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПриглашенияДатаСтатусНеПодходит", "Организация");
	
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПодключаемыйМодульТип",				"Константа");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПодключаемыйМодульПуть",				"Константа");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПодключаемыйМодульИмяОбработки",		"Константа");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПодключаемыйМодульВидСправочника",	"Константа");
	ВозможныеСвойстваОбъектов.Вставить("ДиадокПодключаемыйМодульGUID",				"Константа");
	
	ВозможныеСвойстваОбъектов.Вставить("РазрешитьНеструктурированныеАдреса",		"Константа");
	
	Возврат ВозможныеСвойстваОбъектов;
	 
 КонецФункции
 
Функция ПолучитьНазначениеСвойстваСтрокой(СвойствоСтрокой)
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Назначение =   ПолучитьВозможныеСвойстваОбъектов()[СвойствоСтрокой];
	
	Если (назначение = Неопределено) и (найти(СвойствоСтрокой, "ДДНомКонтр_") = 0 ) Тогда
		вызватьИсключение("Неизвестное свойство объекта "+СвойствоСтрокой);
	КонецЕсли;
	
	Возврат Назначение;
	 
КонецФункции

Процедура НастройкиТекущегоПользователя_УстановитьНастройку(Контекст1САдаптерКонфигурации, НаименованиеНастройки, Значение) Экспорт
	
	ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_НастройкиТекущегоПользователя).УстановитьНастройку(НаименованиеНастройки, Значение);
	
КонецПроцедуры

Функция СвойстваОбъектов_НайтиОбъект(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2, ЗначениеСвойства2) Экспорт
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда 
		Возврат ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
	Иначе 
		Возврат ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиОбъект(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
	КонецЕсли;
КонецФункции

Функция СвойстваОбъектов_НайтиОбъекты(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2, ЗначениеСвойства2) Экспорт
	
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда 
		Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиОбъекты(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
	Иначе 
		Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиОбъекты(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
	КонецЕсли;
	
КонецФункции

Функция СвойстваОбъектов_НайтиСвойство(Контекст1САдаптерКонфигурации, НаименованиеСвойства) Экспорт
	
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиСвойство(НаименованиеСвойства, ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьНазначениеСвойстваПоОписанию(ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства)));
	
КонецФункции

Функция СвойстваОбъектов_НайтиОбъектыПоМассивуЗначений(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства) Экспорт
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	Возврат ПолучитьФорму(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).НайтиОбъектыПоМассивуЗначений(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
КонецФункции

Процедура Заполнить_ТаблицуКонтрагентовДиадок_Контрагентами1С(Контекст1САдаптерКонфигурации, ТаблицаСКонтрагентами) Экспорт
	
	//ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).Заполнить_ТаблицуКонтрагентовДиадок_Контрагентами1С(ТаблицаСКонтрагентами);
	
	СвойствоЯщикКонтрагента= ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство("ДДКонтр_");
	
	Если НЕ ЗначениеЗаполнено(СвойствоЯщикКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос= Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаСКонтрагентами.CounteragentID,
	|	ТаблицаСКонтрагентами.ИндексСтроки
	|ПОМЕСТИТЬ ТаблицаСКонтрагентами
	|ИЗ
	|	&ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСКонтрагентами.ИндексСтроки,
	|	ДиадокЯщикиКонтрагентов.Объект КАК КонтрагентВ1С
	|ИЗ
	|	ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДиадокЯщикиКонтрагентов
	|		ПО (ДиадокЯщикиКонтрагентов.Свойство = &СвойствоЯщикКонтрагента)
	|			И ТаблицаСКонтрагентами.CounteragentID = ДиадокЯщикиКонтрагентов.Значение");
	
	Запрос.УстановитьПараметр("СвойствоЯщикКонтрагента", СвойствоЯщикКонтрагента);
	
	Запрос.УстановитьПараметр("ТаблицаСКонтрагентами", ТаблицаСКонтрагентами.Скопировать(,"CounteragentID"));
	Запрос.Параметры.ТаблицаСКонтрагентами.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число",));
	
	ВГраница= Запрос.Параметры.ТаблицаСКонтрагентами.Количество()-1;
	Для ИндексСтроки=0 ПО ВГраница Цикл
		Запрос.Параметры.ТаблицаСКонтрагентами[ИндексСтроки].ИндексСтроки= ИндексСтроки;
	КонецЦикла;
	
	РезультатЗапроса= Запрос.Выполнить();
	Запрос= Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		РезультатЗапроса= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			ТаблицаСКонтрагентами[Выборка.ИндексСтроки].КонтрагентВ1С= Выборка.КонтрагентВ1С;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СвойстваОбъектов_УстановитьЗначениеСвойства(Контекст1САдаптерКонфигурации, Объект, НаименованиеСвойства, ЗначениеСвойства) Экспорт
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
КонецПроцедуры

Функция СвойстваОбъектов_ПолучитьЗначениеСвойства(Контекст1САдаптерКонфигурации, Объект, НаименованиеСвойства, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Возврат получитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства,  ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеПоУмолчанию);
	
КонецФункции

Функция СвойстваОбъектов_ПолучитьЗначенияСвойстваОбъектов(Контекст1САдаптерКонфигурации, Объекты, НаименованиеСвойства) Экспорт
	
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьЗначенияСвойстваОбъектов(Объекты, НаименованиеСвойства,  ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства));
	
КонецФункции

Процедура СвойстваОбъектов_УстановитьЗначениеКонстанты(Контекст1САдаптерКонфигурации, НаименованиеКонстанты, ЗначениеКонстанты) Экспорт
	
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	получитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).УстановитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеКонстанты);
	
КонецПроцедуры

Функция СвойстваОбъектов_ПолучитьЗначениеКонстанты(Контекст1САдаптерКонфигурации, НаименованиеКонстанты, ЗначениеПоУмолчанию= Неопределено) Экспорт

	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Возврат получитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеПоУмолчанию);
	
КонецФункции


Функция СвойстваОбъектов_ПолучитьТаблицуСвойстваСкладов(Контекст1САдаптерКонфигурации, ИдентификаторыСвойств) Экспорт
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	НазначениеПредставлениеСклада = ПолучитьНазначениеСвойстваСтрокой(ИдентификаторыСвойств.ПредставлениеСклада);
	НазначениеИдентификаторСклада = ПолучитьНазначениеСвойстваСтрокой(ИдентификаторыСвойств.ИдентификаторСклада);
	
	НазначенияСвойств = Новый Соответствие;
	
	НазначенияСвойств.Вставить(ИдентификаторыСвойств.ПредставлениеСклада, НазначениеПредставлениеСклада); 
	НазначенияСвойств.Вставить(ИдентификаторыСвойств.ИдентификаторСклада, НазначениеИдентификаторСклада); 
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьТаблицуСвойстваСкладов(ИдентификаторыСвойств, НазначенияСвойств);
КонецФункции

Функция ЭтоПериферийнаяБД()
	Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции

Функция ЕстьПерифирийныеБазы(НаименованиеПланаОбмена)
	Если Метаданные.ПланыОбмена.Найти(НаименованиеПланаОбмена) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПланОбмена.Ссылка
	               |ИЗ
	               |	ПланОбмена."+НаименованиеПланаОбмена+" КАК ПланОбмена
	               |ГДЕ
	               |	ПланОбмена.ПометкаУдаления = Ложь";
	Возврат (запрос.Выполнить().Выгрузить().Количество()>1)			   
				   
КонецФункции

Функция СвойстваОбъектов_ПолучитьСсылкуНаСвойство(Контекст1САдаптерКонфигурации, НаименованиеСвойства) Экспорт
	Если Контекст1САдаптерКонфигурации = Неопределено Тогда
		ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
	КонецЕсли;
	
	Возврат ПолучитьМодульПрог(Контекст1САдаптерКонфигурации.Профиль_СвойстваОбъектов).ПолучитьСсылкуНаСвойство(НаименованиеСвойства);
КонецФункции

// Заполняет идентификаторы ЭДО в сопоставленных с Диадоком организациях и контрагентах.
//
Процедура ЗаполнитьИдентификаторыЭДО() Экспорт
	
	КэшИдентификаторовЭДО = Новый Соответствие;
	
	// Идентификаторы ЭДО для справочника организаций
	СвойствоИдентификаторЯщика = ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство("ЯщикДиадокДляОрганизации");
	СвойствоИдентификаторЭДО   = ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство("ДиадокИдентификаторЭДОДляОрганизации");
	
	РезультатЗапроса = ЗаполнитьИдентификаторыЭДО_РезультатЗапроса(СвойствоИдентификаторЯщика, СвойствоИдентификаторЭДО);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Сообщить(Строка(ТекущаяДата()) + " - Запущено заполнение идентификаторов участников ЭДО для справочника ""Организации""");
		
		ЗаполнитьИдентификаторыЭДО_ПоРезультатуЗапроса(РезультатЗапроса, СвойствоИдентификаторЭДО, КэшИдентификаторовЭДО);
		
		Сообщить(Строка(ТекущаяДата()) + " - Завершено заполнение идентификаторов участников ЭДО для справочника ""Организации""" + Символы.ПС);
		
	КонецЕсли;
	
	// Идентификаторы ЭДО для справочника контрагентов
	СвойствоИдентификаторЯщика = ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство("ДДКонтр_");
	СвойствоИдентификаторЭДО   = ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство("ДиадокИдентификаторЭДО");
	
	РезультатЗапроса = ЗаполнитьИдентификаторыЭДО_РезультатЗапроса(СвойствоИдентификаторЯщика, СвойствоИдентификаторЭДО);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Сообщить(Строка(ТекущаяДата()) + " - Запущено заполнение идентификаторов участников ЭДО для справочника ""Контрагенты""");
		
		ЗаполнитьИдентификаторыЭДО_ПоРезультатуЗапроса(РезультатЗапроса, СвойствоИдентификаторЭДО, КэшИдентификаторовЭДО);
		
		Сообщить(Строка(ТекущаяДата()) + " - Завершено заполнение идентификаторов участников ЭДО для справочника ""Контрагенты""" + Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДО_ПоРезультатуЗапроса(РезультатЗапроса, СвойствоИдентификаторЭДО, КэшИдентификаторовЭДО)
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		МенеджерРегистра = РегистрыСведений.КонтурDiadoc_ДополнительныеРеквизиты;
	Иначе	
		МенеджерРегистра = РегистрыСведений.ЗначенияСвойствОбъектов;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Индикатор = НовыйИндикатор("Заполнение идентификаторов ЭДО", Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		ОбновитьСостояниеИндикатора(Индикатор);
		
		Если НЕ Выборка.Следующий() Тогда
			Выборка.Сбросить();
			Выборка.Следующий();
		КонецЕсли;
		
		ИдентификаторЭДО = КэшИдентификаторовЭДО[Выборка.BoxID];
		
		Если ИдентификаторЭДО = Неопределено Тогда
			ИдентификаторЭДО = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ИдентификаторЭДО(Выборка.BoxID);
			КэшИдентификаторовЭДО.Вставить(Выборка.BoxID, ИдентификаторЭДО);
		КонецЕсли;
		
		Запись = МенеджерРегистра.СоздатьМенеджерЗаписи();
		Запись.Объект	= Выборка.Объект;
		Запись.Свойство = СвойствоИдентификаторЭДО;
		Запись.Значение = ИдентификаторЭДО;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


Функция ЗаполнитьИдентификаторыЭДО_РезультатЗапроса(СвойствоИдентификаторЯщика, СвойствоИдентификаторЭДО)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИдентификатыЯщиков.Объект,
	|	ИдентификатыЯщиков.Значение КАК BoxID
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификатыЯщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторыЭДО
	|		ПО ИдентификатыЯщиков.Объект = ИдентификаторыЭДО.Объект
	|			И (ИдентификаторыЭДО.Свойство = &СвойствоИдентификаторЭДО)
	|ГДЕ
	|	ИдентификатыЯщиков.Свойство = &СвойствоИдентификаторЯщика
	|	И ИдентификатыЯщиков.Значение <> """"
	|	И ИдентификаторыЭДО.Свойство ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("СвойствоИдентификаторЯщика", СвойствоИдентификаторЯщика);
	Запрос.УстановитьПараметр("СвойствоИдентификаторЭДО"  , СвойствоИдентификаторЭДО);
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	Возврат Запрос.Выполнить();
	
КонецФункции


/////////////////////////////////////////////////////////////////////////
// Защищенные методы (для производных модулей)

Функция Protected_НастройкиТекущегоПользователя_ПриПВХ(Контекст1САдаптерКонфигурации) Экспорт
	Если Контекст1САдаптерКонфигурации.ЗапретСозданияПВХВПериферийнойБазе Тогда 
		ВызватьИсключение("В периферйной базе невозможно создать настройки пользователя "+НаименованиеСистемы);
	КонецЕсли;	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Настройки пользователей

Функция ОпределитьПрофиль_НастройкиТекущегоПользователя() Экспорт
	Если Метаданные.РегистрыСведений.Найти("НастройкиПользователей") <> Неопределено ИЛИ ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат "Модуль_1САдаптерНастройкиТекущегоПользователя_Типовые";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ПраваИНастройки") <> Неопределено Тогда
		Возврат "Модуль_1САдаптерНастройкиТекущегоПользователя_Рарус";
	Иначе
		ВызватьИсключение "Не удалось определить способ хранения настроек пользователей";
	КонецЕсли;
КонецФункции



/////////////////////////////////////////////////////////////////////////
// Свойства объектов

Функция ОпределитьПрофиль_СвойстваОбъектов()
	Если Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствКатегорийОбъектов") <> Неопределено Тогда
		Возврат "Модуль_1САдаптерСвойстваОбъектов_Типовые";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "Модуль_1САдаптерСвойстваОбъектов_Рарус";
	Иначе
		ВызватьИсключение "Не удалось определить способ хранения свойств объектов";
	КонецЕсли;
КонецФункции

Функция ОпределитьПрофиль_ГТД()
	
	стПрофиль_ГТД = Новый Структура;
	
	Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
		стПрофиль_ГТД.Вставить("ТипСправочникаГТД", Неопределено);
	ИначеЕсли Метаданные.Справочники.Найти("НомераГТД") <> Неопределено Тогда
		стПрофиль_ГТД.Вставить("ТипСправочникаГТД", Тип("СправочникСсылка.НомераГТД"));
	ИначеЕсли Метаданные.Справочники.Найти("ГТД") <> Неопределено Тогда
		стПрофиль_ГТД.Вставить("ТипСправочникаГТД", Тип("СправочникСсылка.ГТД"));
	Иначе		
		ВызватьИсключение "Не удалось определить способ хранения ГТД";
	КонецЕсли;
	
	Возврат стПрофиль_ГТД;
КонецФункции

Функция ОпределитьПрофиль_Организации()
	
	Профиль_Организации= Новый Структура;
	
	Если Метаданные.Справочники.Найти("Организации") <> Неопределено Тогда
		Профиль_Организации.Вставить("ТипСправочникаОрганизации", Тип("СправочникСсылка.Организации"));
	ИначеЕсли Метаданные.Справочники.Найти("Фирмы") <> Неопределено Тогда
		Профиль_Организации.Вставить("ТипСправочникаОрганизации", Тип("СправочникСсылка.Фирмы"));
	Иначе		
		ВызватьИсключение "Не удалось определить способ хранения Организаций";
	КонецЕсли;
	
	Возврат Профиль_Организации;
	
КонецФункции

Функция ОпределитьПрофиль_Документы()
	
	Профиль_Документы = Новый Структура;
	
	Если Метаданные.Документы.Найти("СчетФактураВыданный") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаСчетФактураВыданный"	  , Тип("ДокументСсылка.СчетФактураВыданный"));
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураВыданный", "Документ.СчетФактураВыданный");
	ИначеЕсли Метаданные.Документы.Найти("РегистрацияСчетаФактуры") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаСчетФактураВыданный"	  , Тип("ДокументСсылка.РегистрацияСчетаФактуры"));
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураВыданный", "Документ.РегистрацияСчетаФактуры");
	ИначеЕсли Метаданные.Документы.Найти("СчетФактура") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаСчетФактураВыданный"	  , Тип("ДокументСсылка.СчетФактура"));
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураВыданный", "Документ.СчетФактура");
	Иначе		
		ВызватьИсключение "Не удалось определить способ хранения счета-фактуры выданного";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти("СчетФактураПолученный") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаСчетФактураПолученный"	  , Тип("ДокументСсылка.СчетФактураПолученный"));
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураПолученный", "Документ.СчетФактураПолученный");
	ИначеЕсли Метаданные.Документы.Найти("РегистрацияСчетаФактуры") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаСчетФактураПолученный"	  , Тип("ДокументСсылка.РегистрацияСчетаФактуры"));
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураПолученный", "Документ.РегистрацияСчетаФактуры");
	Иначе
		Профиль_Документы.Вставить("ТипДокументаСчетФактураПолученный"	  	, Неопределено);
		Профиль_Документы.Вставить("ПолноеИмяДокументаСчетФактураПолученный", Неопределено);
	КонецЕсли;
	
	Если Метаданные.Документы.Найти("РеализацияТоваровУслуг") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаРеализацияТоваровУслуг", Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ИначеЕсли Метаданные.Документы.Найти("РеализацияТоваров") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаРеализацияТоваровУслуг", Тип("ДокументСсылка.РеализацияТоваров"));
	ИначеЕсли Метаданные.Документы.Найти("РасходнаяНакладная") <> Неопределено Тогда
		Профиль_Документы.Вставить("ТипДокументаРеализацияТоваровУслуг", Тип("ДокументСсылка.РасходнаяНакладная"));
	Иначе		
		ВызватьИсключение "Не удалось определить способ хранения реализации товаров и услуг";
	КонецЕсли;
	
	Возврат Профиль_Документы;
	
КонецФункции

Функция ОпределитьПрофиль_ДоговораКонтрагентов()
	
	стПрофиль_ДоговораКонтрагентов = Новый Структура;

	Если Метаданные.Справочники.Найти("ДоговорыВзаиморасчетов")<> Неопределено Тогда
		Возврат "СправочникСсылка.ДоговорыВзаиморасчетов";
	ИначеЕсли  Метаданные.Справочники.Найти("ДоговорыКонтрагентов")<>Неопределено Тогда 
		Возврат "СправочникСсылка.ДоговорыКонтрагентов";
	ИначеЕсли  Метаданные.Справочники.Найти("Договоры")<>Неопределено Тогда 
		Возврат "СправочникСсылка.Договоры";
	Иначе
		ВызватьИсключение "Не удалось определить способ хранения договоров контрагентов";
	КонецЕсли;
	
КонецФункции

// Если в базе используется подсистема КонтурDiadoc,
// процедура меняет имя таблицы ЗначенияСвойствОбъектов на КонтурDiadoc_ДополнительныеРеквизиты,
// а также Свойство.Наименование на Свойство
Процедура СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(ТекстЗапроса) Экспорт
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "РегистрСведений.ЗначенияСвойствОбъектов", "РегистрСведений.КонтурDiadoc_ДополнительныеРеквизиты");
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "Свойство.Наименование"	 , "Свойство");
		
	Иначе
		
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса, "РегистрСведений.КонтурDiadoc_ДополнительныеРеквизиты", "РегистрСведений.ЗначенияСвойствОбъектов");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийПользователь() Экспорт
	
	ТекущийПользователь = глТекущийПользователь;
	
	Если ТекущийПользователь <> Неопределено Тогда
		Возврат ТекущийПользователь;
	КонецЕсли;
	
	Попытка
		ТекущийПользователь= Вычислить("глЗначениеПеременной(""глТекущийПользователь"")");
	Исключение
	КонецПопытки;
	
	Если ТекущийПользователь = Неопределено Тогда
		Попытка
			ТекущийПользователь= Вычислить("ПараметрыСеанса.ТекущийПользователь");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено Тогда
		Попытка
			ТекущийПользователь= Вычислить("ПараметрыСеанса.Пользователь");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено Тогда
		
		ТекущийПользовательИБ= ПользователиИнформационнойБазы.ТекущийПользователь();
		
		Запрос= Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Пользователи ГДЕ Код В (&Имя, &ID)");
		
		Запрос.УстановитьПараметр("Имя", СокрЛП(ТекущийПользовательИБ.Имя));
		Запрос.УстановитьПараметр("ID",  ТекущийПользовательИБ.УникальныйИдентификатор);
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТекущийПользователь= Выборка.Ссылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции
