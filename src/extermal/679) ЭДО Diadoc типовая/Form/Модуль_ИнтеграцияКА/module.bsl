Перем ВалютаРегламентированногоУчета;

//{ ТЕЛО МОДУЛЯ
	
	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ=Истина) Экспорт 
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ);
	КонецФункции 
	
	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомерНаПечатьДиадок(ДокументСсылка);
	КонецФункции
	
	Функция ЭтоСчетФактуранаАванс(СФ) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЭтоСчетФактуранаАванс(СФ);
	КонецФункции	
	
	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт 
		
		Если УчетНДС.ПолучитьУПУпрощенныйУчетНДС(ДокументСсылка.Организация, ДокументСсылка.Дата) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(, , Регистратор, СчетФактура = &Ссылка) КАК НДСЗаписиКнигиПродажОбороты
			|ГДЕ
			|	НДСЗаписиКнигиПродажОбороты.Регистратор = &Ссылка";
			
		ИначеЕсли  НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено
					И ДокументСсылка.ОтражатьВБухгалтерскомУчете = Ложь Тогда
					
			Возврат МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка),
																	ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, Константы.ВалютаРегламентированногоУчета.Получить(),
																	ДокументСсылка.КурсВзаиморасчетов, 1,
																	ДокументСсылка.КратностьВзаиморасчетов, 1);
					
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
			|	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовПоПретензиям = ХозрасчетныйОборотыДтКт.СчетДт";
			
		ИначеЕсли НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") = Неопределено Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаВзаиморасчетов
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Регистратор, , , , , ) КАК ХозрасчетныйОборотыДтКт
			|ГДЕ
			|	ХозрасчетныйОборотыДтКт.Регистратор = &Ссылка
			|	И ХозрасчетныйОборотыДтКт.Регистратор.СчетУчетаРасчетовСКонтрагентом = ХозрасчетныйОборотыДтКт.СчетДт";
			
		Иначе
			Возврат 0;	
		КонецЕсли;
					
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.СуммаВзаиморасчетов;
		Иначе
			Возврат 0; 
		КонецЕсли;	
		
	КонецФункции
	
	Процедура ПерезаполнитьСуммыПоУЕвРублях(СтрокиСчетаФактуры, ТекущееОснование, ДанныеШапки) Экспорт
		
		СуммаВзаиморасчетов = ПолучитьСуммуДокументаВВалютеРегламентированногоУчетаДиадок(ТекущееОснование);
		Если НЕ СуммаВзаиморасчетов = 0 Тогда
			
			МассивРаспределения = Новый Массив;
			Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
				СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(СтрокаСчетаФактуры.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
				МассивРаспределения.Добавить(СуммаСНДС);
			КонецЦикла;
			
			СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
			
			Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
				ЗначениеСтавкиНДС 			= УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
				СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100 + ЗначениеСтавкиНДС), 2));
				Если СтрокаСчетаФактуры.СуммаВключаетНДС Тогда
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая;
				Иначе
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
				КонецЕсли;
			КонецЦикла;
			
			СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДокументБезНДС(СсылкаНаОбъект);
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ

//{ ПОЛУЧЕНИЕ ДАННЫХ
	
	//{ Получить...
		
		Функция ПолучитьНаименованиеКолонкиКодаТовара() Экспорт
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНаименованиеКолонкиКодаТовара();
		КонецФункции
		
		Функция ПолучитьВалютуРегламентированногоУчета() 
			Возврат Константы.ВалютаРегламентированногоУчета.Получить();
		КонецФункции
		
		Функция ДиадокПолучитьПараметрыУчетнойПолитики(ДокСсылка) Экспорт
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДиадокПолучитьПараметрыУчетнойПолитики(ДокССылка.Дата, Неопределено, ДокССылка.Организация);
		КонецФункции
		
		Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерДокументовОплаты(СчетФактура);
		КонецФункции
		
		Функция ПолучитьНомерГТД(НомерГТД) Экспорт
		
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомерГТД(НомерГТД);
		
		КонецФункции
		
		Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
			Договор = ДокументСсылка.ДоговорКонтрагента;
			Возврат Новый Структура("ДоговорНомер, ДоговорДата", Договор.Номер, Договор.Дата);
		КонецФункции
				
	//} Получить...
	
	//{ ТЧПолучитьТекстЗапроса...
		
		Функция ТЧПолучитьТекстЗапроса(Документ, СчетФактура, ЭтоКСФ)
			
			ТекстЗапроса=	"";
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаРеализацияТоваровУслуг(НЕ СчетФактура = Неопределено);
				
			ИначеЕсли ЭтоКСФ = Ложь И Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено И ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаКорректировкаРеализации();
				
			ИначеЕсли ЭтоКСФ = Истина И Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено И ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Если Строка(Документ.ВидОперации) = "Исправление в первичных документах" Тогда
					Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаИКСФ();
				ИначеЕсли Строка(Документ.ВидОперации) = "Корректировка по согласованию сторон" Тогда
					Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаКСФ();
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаАктОбОказанииПроизводственныхУслуг();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаОтчетКомиссионераОПродажах();
				
			ИначеЕсли ТипЗнч(Документ)= Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
				
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаОтчетКомитентуОПродажах();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаВозвратТоваровПоставщику();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаОтражениеРеализацииТоваровИУслугНДС();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияУслугПопереработке") Тогда 
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаРеализацияУслугПопереработке();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаОС") Тогда 
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаПередачаОС();
				
			ИначеЕсли ЭтоСчетФактуранаАванс(СчетФактура)  Тогда
				
				Возврат	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаСчетФактураВыданный();
				
			ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.СчетНаоплатуПокупателю") Тогда
				
				Возврат 	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаСчетНаоплатуПокупателю();
				
			ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				Возврат 	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТЧПолучитьТекстЗапросаЗаказПокупателя();
				
			КонецЕсли;
			
			Возврат ТекстЗапроса;
			
			ВызватьИсключение "Не удалось сформировать текст запроса к табличной части документа " + Документ;
			
		КонецФункции
		
		Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ) Экспорт
			
			ЗапросТЧ = Новый Запрос;
			ЗапросТЧ.Текст=	ТЧПолучитьТекстЗапроса(ДокументСсылка, СчетФактура, ЭтоКСФ);
			ЗапросТЧ.УстановитьПараметр("СчетФактура", СчетФактура);
			ЗапросТЧ.УстановитьПараметр("Ссылка", ДокументСсылка);
			Возврат ЗапросТЧ.Выполнить();
			
		КонецФункции
		
		Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
			КолонкаКодаТовара=	ПолучитьНаименованиеКолонкиКодаТовара();
			Если ЗначениеЗаполнено(НоменклатураСсылка) И КолонкаКодаТовара <> "Код" Тогда
				Возврат НоменклатураСсылка[КолонкаКодаТовара];
			Иначе 
				Возврат ТекущийКод;
			КонецЕсли;
		КонецФункции
		
		Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура=Неопределено, ФормированиеСФ=Ложь) Экспорт 
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура, ФормированиеСФ);
		КонецФункции	
		
	//} ТЧПолучитьТекстЗапроса...
	
	//{ ПолучитьДанныеШапки...
		
		Функция ШапкаПолучитьТекстЗапроса(ДокументСсылка, СчетФактура)
			
			Если ЭтоСчетФактуранаАванс(СчетФактура) = Истина Тогда
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ШапкаПолучитьТекстЗапросаСФ();
			Иначе 
				Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ШапкаПолучитьТекстЗапросаОсновной();
			КонецЕсли;
		КонецФункции
		
		Функция ШапкаПолучитьРезультатЗапроса(ДокументСсылка, СчетФактура = Неопределено) 
			
			Запрос= Новый Запрос;
			Запрос.Текст=	ШапкаПолучитьТекстЗапроса(ДокументСсылка, СчетФактура);
			Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
			Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
			
			РезультатЗапроса=	Запрос.Выполнить();
			
			Возврат РезультатЗапроса;
			
		КонецФункции
		
		Функция ПолучитьВалютуДокумента(ВалютаДокумента, СчетФактура)
			
			Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьВалютуДокумента(ВалютаДокумента, СчетФактура);
			
		КонецФункции 
		
		Функция ПолучитьСтруктуруШапки(ДокументСсылка, СчетФактура = Неопределено)   Экспорт 
			
			РезультатЗапроса=	ШапкаПолучитьРезультатЗапроса(ДокументСсылка, СчетФактура);
			Если РезультатЗапроса.Пустой() Тогда
				ВызватьИсключение "Ошибка получения данных шапки, ДокументСсылка - " + ДокументСсылка + ", СчетФактура - " + СчетФактура;
			КонецЕсли;
			
			ТаблицаДанныхШапки= РезультатЗапроса.Выгрузить();
			ДанныеШапки=		ТаблицаДанныхШапки[0];
			
			СтруктураШапки=	Новый Структура();
			
			СтруктураШапки.Вставить("Организация", 		ДанныеШапки.Организация);
			СтруктураШапки.Вставить("Грузоотправитель", ДанныеШапки.Грузоотправитель);
			СтруктураШапки.Вставить("Контрагент", 		ДанныеШапки.Контрагент);
			СтруктураШапки.Вставить("Грузополучатель", 	ДанныеШапки.Грузополучатель);
			СтруктураШапки.Вставить("АдресДоставки", 	ДанныеШапки.АдресДоставки);
			СтруктураШапки.Вставить("ВалютаДокумента", 	ДанныеШапки.ВалютаДокумента);
			СтруктураШапки.Вставить("СуммаВключаетНДС", ДанныеШапки.СуммаВключаетНДС);
			СтруктураШапки.Вставить("УчитыватьНДС", 	ДанныеШапки.УчитыватьНДС);
						
			СтруктураШапки.Вставить("ДопИнфо", 			Новый Массив);
						
			Если СчетФактура = Неопределено Тогда
				
				СтруктураШапки.Вставить("Дата", ДокументСсылка.Дата);
				СтруктураШапки.Вставить("Номер", ДокументСсылка.Номер);
				
			Иначе
				
				СтруктураШапки.Вставить("Дата", СчетФактура.Дата);
				СтруктураШапки.Вставить("Номер", СчетФактура.Номер);
				СтруктураШапки.ВалютаДокумента  =  ПолучитьВалютуДокумента(СтруктураШапки.ВалютаДокумента, СчетФактура);
				
				Если СчетФактура.Метаданные().Реквизиты.Найти("ИдентификаторГосконтракта") <> Неопределено Тогда
					СтруктураШапки.Вставить("ИдентификаторГосконтракта", СчетФактура.ИдентификаторГосконтракта);
				КонецЕсли;
				
			КонецЕсли;	
			
			Возврат СтруктураШапки;
			
		КонецФункции
		
	//} ПолучитьДанныеШапки...
	
	//{ ПолучитьДанныеСФ...
		
		Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт
			Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляКСФ(СчетФактура);
		КонецФункции
		
		Функция ПолучитьНомераДляСФ(СчетФактура)  Экспорт 
			Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляСФ(СчетФактура);
		КонецФункции
		
		Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
			Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьКПППокупателя(СчетФактура);
		КонецФункции
		
	//} ПолучитьДанныеСФ...
	
//} ПОЛУЧЕНИЕ ДАННЫХ

//{ ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ
	
	Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
		
		Возврат ЗначениеЗаполнено(СтрокаТаблицы.Грузополучатель) И СтрокаТаблицы.Грузополучатель.ИНН <> СтрокаТаблицы.Покупатель.ИНН;
		
	КонецФункции
	
	Функция ПроверитьТипДокумента(ДокСсылка, НаименованиеТипа)
		Возврат (метаданные.документы.найти(НаименованиеТипа)<>Неопределено) и (ТипЗнч(ДокСсылка)=тип("ДокументСсылка."+НаименованиеТипа))
	КонецФункции
	
	Функция ПолучитьВидОперацииРТУ(Док) 
		Если  ПроверитьТипДокумента(Док, "РеализацияТоваровУслуг") Тогда 
			Возврат Док.ВидОперации
		ИначеЕсли ПроверитьТипДокумента(Док, "РеализацияОтгруженныхТоваров") Тогда 
			Возврат Док.ДокументОснование.ВидОперации
		ИначеЕсли 	ПроверитьТипДокумента(Док, "КорректировкаРеализации") Тогда 
			Возврат ПолучитьВидОперацииРТУ(Док.ДокументРеализации)
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	
	КонецФункции 
	
	Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД) Экспорт
		
		Если ЗначениеЗаполнено(ФункцияУПД) Тогда
			
			ТипДокумента = ТипДокументаУПД(ФункцияУПД);
			
			Если ЗначениеЗаполнено(ТипДокумента) Тогда
				Возврат ТипДокумента;
			Иначе
				ТипДокумента = ТипДокументаУКД(ФункцияУПД);
				Если ЗначениеЗаполнено(ТипДокумента) Тогда
					Возврат ТипДокумента;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоСчет ИЛИ ТипЗнч(Док)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Возврат "Счет на оплату";
		ИначеЕсли ТипЗнч(Док)=тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			ЭтоКСФ = ( строка(Док.ВидСчетаФактуры) = "Корректировочный"); 
			Если ЭтоКСФ Тогда 
				Возврат ?(Док.Исправление, "Исправление КСФ", "Корректировочный СФ");
			Иначе 	
				Возврат  ?( Док.метаданные().реквизиты.найти("Исправление")<>Неопределено и Док.исправление, "Исправление СФ", "Счет-фактура");
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Торг-12", ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляТоваров)=Ложь, "Торг-12"	, СтрокиНастрек[0].ПечатнаяФормаДляТоваров  ) ); 
		ИначеЕсли (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваровУслуг")) или (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")) или ПроверитьТипДокумента(Док, "КорректировкаРеализации")  Тогда 
			//Настройка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Док.Организация);
			РНК = ?(   ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") , Док.ДокументОтгрузки, Док);
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", РНК.Организация));
			Если СтрокиНастрек.количество()=0 Тогда 
				ФормаДляУслуг = "Акт";
				ФормаДляТоваров = "Торг-12";
			иначе 
				ФормаДляТоваров =  ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляТоваров)=Ложь, "Торг-12" , СтрокиНастрек[0].ПечатнаяФормаДляТоваров);
				ФормаДляУслуг  =   ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляУслуг)=Ложь, "Акт"		, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  );
				
				//хитрая ситуация "в зависимости от вида операции"
				Если ФормаДляУслуг = "В зависимости от вида операции" Тогда 
					ВидОперации = ПолучитьВидОперацииРТУ(Док);
					ФормаДляУслуг = ?(видОперации = перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот , "Акт",  "Торг-12");
				КонецЕсли;	
				
			КонецЕсли;	
			Возврат ?(РНК.товары.количество()=0 и ( (РНК.Услуги.Количество()>0)  ),  ФормаДляУслуг, ФормаДляТоваров);
		ИначеЕсли  //(ТипЗнч(Док)=Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")) или   (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияУслугПоПереработке"))  или
			(ТипЗнч(Док)=Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))  Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Акт", ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляУслуг) =Ложь, "Акт"	, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ) ); 
		ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Возврат "Счет на оплату"; 	
		ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда 
			Возврат "Акт сверки"
		Иначе
			Возврат "";
		КонецЕсли;	
		
	КонецФункции
	
	Функция ПолучитьПараметрыСФ(Док) Экспорт
		
		ПараметрыСФ = Неопределено;
		УчетНДС.ПолучитьПараметрыСчетаФактуры(Док, ВалютаРегламентированногоУчета, ПараметрыСФ);
		
		Возврат ПараметрыСФ;
		
	КонецФункции
	
	Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
		
		СуммаДокумента = Док.СуммаДокумента;
		СуммаУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаУвеличение")<>Неопределено, Док.СуммаУвеличение, 0);
		СуммаУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаУменьшение")<>Неопределено, Док.СуммаУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаУвеличение")) и (СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение) Тогда
				СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаУвеличение = 0, "", "+" + Формат(СуммаУвеличение, "ЧДЦ=2"));
			
			Если (ПараметрыСФ.свойство("СуммаУменьшение")) и ( СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение) Тогда
				СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаУменьшение = 0, "", "-" + Формат(СуммаУменьшение, "ЧДЦ=2"));
			
			Если СуммаУвеличение = 0 И СуммаУменьшение = 0 Тогда
				Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
					СуммаДокумента = ПараметрыСФ.СуммаДокумента;
				КонецЕсли;
				
				Если СуммаДокумента <> 0 Тогда
					Стр1 = Формат(СуммаДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
		
		СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДС")<>Неопределено, Док.СуммаНДС, 0);
		СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДСДокумента")<>Неопределено, Док.СуммаНДСДокумента, 0);
		СуммаНДСУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУвеличение")<>Неопределено, Док.СуммаНДСУвеличение, 0);
		СуммаНДСУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУменьшение")<>Неопределено, Док.СуммаНДСУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаНДСУвеличение")) и ( СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение) Тогда
				СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаНДСУвеличение = 0, "", "+" + Формат(СуммаНДСУвеличение, "ЧДЦ=2"));
			
			Если  (ПараметрыСФ.свойство("СуммаНДСУменьшение")) и (  СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение) Тогда
				СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаНДСУменьшение = 0, "", "-" + Формат(СуммаНДСУменьшение, "ЧДЦ=2"));
			
			Если СуммаНДСУвеличение = 0 И СуммаНДСУменьшение = 0 Тогда
				Если (ПараметрыСФ.свойство("СуммаНДСДокумента")) и  (СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента) Тогда
					СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
				КонецЕсли;
				
				Если СуммаНДСДокумента <> 0 Тогда
					Стр1 = Формат(СуммаНДСДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	//{ Подготовка временных таблиц для списка отправки документов...
	
		Функция ПодготовитьВТ_СпискаОтправкиДокументов(ТипыДокументов, Запрос) Экспорт
			
			МассивВременныхТаблиц= Новый Массив;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 ИЛИ ТипыДокументов = 2 ИЛИ ТипыДокументов = 5 ИЛИ ТипыДокументов = 6 Тогда
				ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц);
				ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
				ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 Тогда
				ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 2 Тогда
				ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 3 Тогда
				ПодготовитьВТ_СчетаНаОплату(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 4 Тогда
				ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Возврат МассивВременныхТаблиц;
			
		КонецФункции
		
		
		Процедура ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц) Экспорт
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_АктыСверки(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_РеализацияОтгруженныхТоваров(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц);
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
				ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияОтгруженныхТоваров(Запрос, МассивВременныхТаблиц) Экспорт
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_РеализацияОтгруженныхТоваров(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_СчетаНаОплату(Запрос, МассивВременныхТаблиц)
			
			ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_СчетаНаОплату_ЗаказПокупателя(Запрос, МассивВременныхТаблиц);
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
				ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_СчетНаОплатуПокупателю(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_ЗаказПокупателя(Запрос, МассивВременныхТаблиц)
			
			ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПодготовитьВТ_СчетаНаОплату_ЗаказПокупателя(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
	//} Подготовка временных таблиц для списка отправки документов...
	
//} ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

//////////////////////////////////////////////////////
//функции генерации структуры для ФУФ счета-фактуры
///////////////////////////////////////////////////////

Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(Организация) Экспорт 
	Если ЗначениеЗаполнено(Организация.СвидетельствоСерияНомер) и ЗначениеЗаполнено(Организация.СвидетельствоДатавыдачи) Тогда 
		Возврат  Организация.СвидетельствоСерияНомер+" от "+Формат(Организация.СвидетельствоДатавыдачи, "ДФ=dd.MM.yyyy")
	Иначе 
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Функция по ИСФ/КСФ возвращает сф-основание
Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ) Экспорт   
	результат = Новый Структура;
	
	ДокОснование = ИСФ.ДокументыОснования[0].ДокументОснование;
	Если ДокОснование.Видоперации =перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда 
		Докоснование = ДокОснование.ДокументРеализации
	иначе 	
		пока (ТипЗнч(Докоснование) = Тип("ДокументСсылка.КорректировкаРеализации")) и (ДокОснование.ВидОперации = перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) цикл 
			ДокОснование = ДокОснование.ДокументРеализации
		КонецЦикла;
	КонецЕсли;	
	
	результат.Вставить("ПервичныйДокументОснование",  ДокОснование);
	//ищем СФ
	запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = Ложь
	|	И СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("Документоснование", ДокОснование);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда 
		Возврат выборка.ссылка;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СФОтправлена(ДокСсылка)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСсылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокОснование";
	ЗапросСФ.УстановитьПараметр("ДокОснование", ДокСсылка);
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	Пока ВыборкаСФ.Следующий() Цикл
		DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ВыборкаСФ.ДокСсылка);
		Если ЗначениеЗаполнено(DocumentId) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьПоследнееИсправление(КоррСтарт, ПоследнееОтправленное) Экспорт
	текКор = КоррСтарт;
	
	Пока Истина Цикл
		// получаем следующего кандидата, проверям его
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокСсылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.ДокументРеализации = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", текКор);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Проверяем кандидата
			Если ПоследнееОтправленное И НЕ СФОтправлена(Выборка.ДокСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
		текКор = Выборка.ДокСсылка;
	КонецЦикла;
	
	Возврат текКор;
КонецФункции

Функция ПолучитьДочернееИсправление(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокССылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСчетФактуруПоКорректировкеРеализации(ДокССылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка";
	Запрос.УстановитьПараметр("ДокСсылка", ДокССылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокСчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНеотправленнуюКорректировку(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ СФОтправлена(Выборка.ДокССылка) Тогда
			Возврат Выборка.ДокССылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
	КорректировкаОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	КорректировкаОбъект.Заполнить(КорректировкаРеализацииОснование);
	
	Возврат КорректировкаОбъект;
КонецФункции

Функция СчетФактураПолученныйДокументаОснования(ДокументОснование) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СчетФактураПолученныйДокументаОснования(ДокументОснование);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// функции генерации сотруктуры для генерации торг-12 или акта выполненных работ
//////////////////////////////////////////////////////////////////////////////

Функция ПолучитьБанковскийСчетПоДокументу(ДокТоварный) Экспорт 
	БанковскийСчетОрганизации = ?(ДокТоварный.Метаданные().Реквизиты.найти("БанковскийСчетОрганизации")=Неопределено, Неопределено, ДокТоварный.БанковскийСчетОрганизации);
	Если (ДокТоварный.Метаданные().Реквизиты.найти("СтруктурнаяЕдиница")<>Неопределено) и (ТипЗнч(ДокТоварный.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		БанковскийСчетОрганизации = ДокТоварный.СтруктурнаяЕдиница;
	ИначеЕсли (ДокТоварный.Метаданные().Реквизиты.найти("Банковскийсчет")<>Неопределено) и (ТипЗнч(ДокТоварный.Банковскийсчет) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		БанковскийСчетОрганизации = ДокТоварный.Банковскийсчет;
	КонецЕсли;	 
	Если (ЗначениеЗаполнено(БанковскийСчетОрганизации) = Ложь) и ЗначениеЗаполнено(ДокТоварный.Организация.ОсновнойБанковскийСчет) Тогда 
		БанковскийСчетОрганизации = ДокТоварный.Организация.ОсновнойБанковскийСчет
	КонецЕсли;	
	Возврат БанковскийСчетОрганизации;
КонецФункции

Функция ПолучитьСведенияОбОрганизации(Организация, Дата, Банковскийсчет=Неопределено) 
	Возврат УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, Дата,, Банковскийсчет);
КонецФункции	

Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
	Возврат УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(записьрегистра);
КонецФункции	

Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
	Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес = Ложь, АдресСтрокой = "") Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес, АдресСтрокой);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
	СведенияОбОрганизации =  ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента);
	Если стрДлина(СведенияОбОрганизации.ИНН)<>12 Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ЭтоИП = Ложь;
	Иначе 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			//для нашей организации - данные берем из нормализованного представления физлица
			НаименованиеОрганизации  = юрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
			НаименованиеОрганизации  = СведенияОбОрганизации.ПолноеНаименование 
		КонецЕсли;	  
		ЭтоИП = Истина;
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	OrganizationInfo.Ссылка = ЮрФизЛицо;
	OrganizationInfo.SameAsSellerOrBuyer = Ложь;
	
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, Ложь, АдресСтрокой);
	
КонецПроцедуры	

Функция ПолучитьГоловноеЮрлицо( ЮрФизЛицо)
	
	ГоловноеЮрЛицо = "";
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ГоловноеЮрЛицо = ЮрФизЛицо.ГоловнойКонтрагент;	
	КонецЕсли;

	Если ЗначениеЗаполнено(ГоловноеЮрЛицо) И 
		(ЮрФизЛицо.Метаданные().Реквизиты.Найти("ОбособленноеПодразделение")<>Неопределено) и (ЮрФизЛицо.ОбособленноеПодразделение = Истина) Тогда
		
		Возврат ГоловноеЮрЛицо;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "")  Экспорт

	ГоловноеЮрЛицо = "";
	
	Если АдресДляСФ = Истина Тогда
		
		ГоловноеЮрЛицо = ПолучитьГоловноеЮрлицо( ЮрФизЛицо);
		Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
			СведенияОПодразделении 	= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
			СведенияОбОрганизации	= ПолучитьСведенияОбОрганизации(ГоловноеЮрЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
			
			СведенияОбОрганизации.КПП = СведенияОПодразделении.КПП;
		Иначе
			СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
		КонецЕсли;	
	Иначе
		СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);
	КонецЕсли;

	Если стрДлина(СведенияОбОрганизации.ИНН)<>12 Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ЭтоИП = Ложь;
	Иначе 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			//для нашей организации - данные берем из нормализованного представления физлица
			НаименованиеОрганизации  = юрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
			НаименованиеОрганизации  = СведенияОбОрганизации.ПолноеНаименование 
		КонецЕсли;	  
		ЭтоИП = Истина;
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.Inn  = СведенияОбОрганизации.ИНН;
	Если ЗначениеЗаполнено(ЮрФизЛицо.ЮрФизЛицо) Тогда
		OrganizationInfo.Kpp  = СведенияОбОрганизации.КПП;
	Иначе
		OrganizationInfo.Kpp  = ЮрФизЛицо.КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
		ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ГоловноеЮрЛицо, ЮрАдрес, АдресСтрокой);	
	Иначе
		ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, ЮрАдрес, АдресСтрокой);
	КонецЕсли;

	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	
	Если АдресДляСФ=Ложь Тогда
		OrganizationInfo.Okpo  = СведенияОбОрганизации.КодПоОкпо;
		
		Если найти(СведенияОбОрганизации.Телефоны, "факс:")>0 Тогда 
			телефон = СокрЛП(лев(СведенияОбОрганизации.Телефоны, найти(СведенияОбОрганизации.Телефоны, "факс:")-1));
			Если прав(телефон,1) = ","  Тогда
				телефон = лев(телефон, стрДлина(телефон)-1);
			КонецЕсли;
			факс = СокрЛП(прав(СведенияОбОрганизации.Телефоны, СтрДлина(СведенияОбОрганизации.Телефоны) - найти(СведенияОбОрганизации.Телефоны, "факс:")- 5));
		Иначе 
			Телефон =СведенияОбОрганизации.Телефоны;
			Факс = "";
		КонецЕсли;	
		OrganizationInfo.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Телефон);
		OrganizationInfo.Fax   = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Факс) ;
		OrganizationInfo.BankAccountNumber = ?(ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета),  СведенияОбОрганизации.НомерСчета, "") ;
		OrganizationInfo.BankName  =   ?(ЗначениеЗаполнено(СведенияОбОрганизации.Банк), СведенияОбОрганизации.Банк.наименование, "");
		OrganizationInfo.BankId =  ?(ЗначениеЗаполнено(СведенияОбОрганизации.БИК),  СокрЛП(СведенияОбОрганизации.БИК), "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
		OrganizationInfo.вставить("Ссылка",ГоловноеЮрЛицо);
	Иначе
		OrganizationInfo.вставить("Ссылка",ЮрФизЛицо);
	КонецЕсли;
	//	OrganizationInfo.Department  =  "";
КонецПроцедуры	

Процедура Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет= Неопределено, АдресСтрокой = "") Экспорт
	
	СведенияОбОрганизации= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента, БанковскийСчет);
	СведенияОбОрганизации.Вставить("Ссылка", ЮрФизЛицо);
	
	Если ИспользоватьЮрАдрес Тогда
		
		ГоловноеЮрЛицо= ПолучитьГоловноеЮрлицо(ЮрФизЛицо);
		
		Если ЗначениеЗаполнено(ГоловноеЮрЛицо) Тогда
			
			СведенияОПодразделении= ПолучитьСведенияОбОрганизации(ЮрФизЛицо, ДатаДокумента,  БанковскийСчет);
			СведенияОбОрганизации=  ПолучитьСведенияОбОрганизации(ГоловноеЮрЛицо, ДатаДокумента, БанковскийСчет);
			
			СведенияОбОрганизации.Вставить("Ссылка", ГоловноеЮрЛицо);
			СведенияОбОрганизации.Вставить("КПП"   , СведенияОПодразделении.КПП);
			
		КонецЕсли;
		
	КонецЕсли;

	ЭтоОрганизация= ТипЗнч(СведенияОбОрганизации.Ссылка) = Тип("СправочникСсылка.Организации");
	ЭтоИП= СтрДлина(СведенияОбОрганизации.ИНН) = 12;
	
	Если ЭтоИП И ЭтоОрганизация Тогда
		// Для нашей организации, полное наименование берем из нормализованного представления физлица
		СведенияОбОрганизации.ПолноеНаименование= СведенияОбОрганизации.Ссылка.ИндивидуальныйПредприниматель.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП) И НЕ ЗначениеЗаполнено(СведенияОбОрганизации.Ссылка.ЮрФизЛицо) Тогда
		СведенияОбОрганизации.КПП= СведенияОбОрганизации.Ссылка.КПП;
	КонецЕсли;
	
	
	ExtendedOrganizationInfo.Name= 					СведенияОбОрганизации.ПолноеНаименование;
	ExtendedOrganizationInfo.Inn=  					СведенияОбОрганизации.ИНН;
	ExtendedOrganizationInfo.Kpp=  					СведенияОбОрганизации.КПП;
	ExtendedOrganizationInfo.Okpo= 					СведенияОбОрганизации.КодПоОкпо;
	ExtendedOrganizationInfo.CorrespondentAccount = СведенияОбОрганизации.КоррСчет;
	
	ExtendedOrganizationInfo.BankAccountNumber= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.НомерСчета);
	ExtendedOrganizationInfo.BankName=   		ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.Банк);
	ExtendedOrganizationInfo.BankId=  			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.БИК);
	ExtendedOrganizationInfo.Phone = 			ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента").ПредставлениеТелефона(СведенияОбОрганизации.Телефоны, "Телефон", 255);
	
	Если ЭтоОрганизация Тогда
		ExtendedOrganizationInfo.Okdp= СведенияОбОрганизации.Ссылка.КодОКВЭД;
	КонецЕсли;
	
	Если ЭтоИП Тогда
		ExtendedOrganizationInfo.Type= "IndividualEntity";
	ИначеЕсли ЭтоОрганизация Тогда
		
		Если СведенияОбОрганизации.Ссылка.ИностраннаяОрганизация
			И ПустаяСтрока(СведенияОбОрганизации.ИНН) Тогда
			// В организации может быть указано, что организация является отделением иностранной организации,
			//   но если у нее указан ИНН, значит, она встала на учет в России.
			// Будем считать ее иностранной только в том случае, если не указан ИНН.
			ExtendedOrganizationInfo.Type= "ForeignEntity";
		Иначе
			ExtendedOrganizationInfo.Type= "LegalEntity";
		КонецЕсли;
		
	Иначе
		
		Если СведенияОбОрганизации.Ссылка.НеЯвляетсяРезидентом
			И ПустаяСтрока(СведенияОбОрганизации.ИНН) Тогда
			// Логика такая же, как в организации выше.
			ExtendedOrganizationInfo.Type= "ForeignEntity";
		Иначе
			ExtendedOrganizationInfo.Type= "LegalEntity";
		КонецЕсли;
		
	КонецЕсли;
	
	ExtendedOrganizationInfo.Email = ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").АдресЭлектроннойПочты(СведенияОбОрганизации.Ссылка, Справочники.ВидыКонтактнойИнформации[?(ЭтоОрганизация, "EmailОрганизации", "АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами")]);
	
	ЗаполнитьСтруктуруАдреса(ExtendedOrganizationInfo.Address, СведенияОбОрганизации.Ссылка, ИспользоватьЮрАдрес, АдресСтрокой);	
	
	ExtendedOrganizationInfo.Вставить("Ссылка", СведенияОбОрганизации.Ссылка);
	
КонецПроцедуры	

Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)  Экспорт 
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкССылка = БанковскийСчетОрганизации;
		Если БанкСсылка<>Неопределено Тогда 
			мБанк = ?(НЕ ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов), БанкСсылка.Банк, БанкСсылка.БанкДляРасчетов);
			мГородБанка = мБанк.Город;
			мКоррСчет   = мБанк.КоррСчет;
			мБИК        = мБанк.Код;
			мНомерСчета = ?(БанкСсылка.БанкДляРасчетов.Пустая(), БанкСсылка.НомерСчета,БанкСсылка.Банк.КоррСчет);
			
			Если ПустаяСтрока(БанкСсылка.ТекстКорреспондента) Тогда
				мТекстПолучателя = Организация.НаименованиеПолное;
				Если ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов) Тогда
					мТекстПолучателя = мТекстПолучателя + " р/с " + БанкСсылка.НомерСчета + " в " + БанкСсылка.Банк + " " + БанкСсылка.Банк.Город;
				КонецЕсли;	
			Иначе
				мТекстПолучателя = БанкСсылка.ТекстКорреспондента;
			КонецЕсли;		
			
		КонецЕсли;
		Возврат Новый Структура ("Банк,БИК,КоррСчет,ГородБанка,НомерМсета,ТекстПолучателя,НомерСчета",мБанк,мБИК,мКоррСчет,мГородБанка,мНомерСчета,мТекстПолучателя,мНомерСчета);
	иначе 
		Возврат Неопределено
	КонецЕсли;		
КонецФункции

Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт = Ложь, ЭтоУПД = Ложь)  Экспорт 
	
	ДоговорКонтрагента = ДокСсылка.ДоговорКонтрагента;
	
	Ground = Новый Структура;
	Ground.Вставить("GroundName", 	"");
	Ground.Вставить("GroundNumber", "");
	Ground.Вставить("GroundDate", 	"");
	Ground.Вставить("Основание", 	"");
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ЭтоАкт = Ложь
			И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И НЕ ДокСсылка.Метаданные().Реквизиты.Найти("Сделка") = Неопределено 
			И ТипЗнч(ДокСсылка.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ЗначениеЗаполнено(ДокСсылка.Сделка) Тогда
			
			НомерЗаказаПокупателя=	ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка.Сделка);
			
			Если ЭтоУПД Тогда
				ПредставлениеЗаказаПокупателя= ДокСсылка.Сделка.Метаданные().Представление();
			Иначе
				ПредставлениеЗаказаПокупателя= ДокСсылка.Сделка.Метаданные().Представление() + " № " + НомерЗаказаПокупателя + " от " + Формат(ДокСсылка.Сделка.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			Ground.Вставить("GroundName", 	ПредставлениеЗаказаПокупателя);
			Ground.Вставить("GroundNumber", НомерЗаказаПокупателя);
			Ground.Вставить("GroundDate", 	ДокСсылка.Сделка.Дата);
			Ground.Вставить("Основание", 	ДокСсылка.Сделка);
			
		Иначе
			
			Если ЭтоУПД Тогда
				ПредставлениеДоговора= "Договор";
			Иначе
				ПредставлениеДоговора= ДоговорКонтрагента.Наименование;
			КонецЕсли;
			
			Ground.Вставить("GroundName", 	ПредставлениеДоговора);
			Ground.Вставить("GroundNumber", ДоговорКонтрагента.Номер);
			Ground.Вставить("GroundDate", 	ДоговорКонтрагента.Дата);
			Ground.Вставить("Основание", 	ДоговорКонтрагента);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ground;
	
КонецФункции

Функция ПолучитьПодразделениеИзДокумента(ДокСсылка) Экспорт 
	
	ПодразделениеСсылка = ?(ДокСсылка.метаданные().реквизиты.найти("Подразделение")=Неопределено, Неопределено, ДокСсылка.Подразделение);
	
	Если (Докссылка.метаданные().реквизиты.найти("ОтражатьВБухгалтерскомУчете") <>Неопределено) и  (ДокСсылка.ОтражатьВБухгалтерскомУчете) и ЗначениеЗаполнено(ПодразделениеСсылка) Тогда  
		наб = регистрысведений.СоответствиеПодразделенийИПодразделенийОрганизаций.СоздатьНаборЗаписей();
		наб.Отбор.подразделение.установить(ПодразделениеСсылка);
		наб.Отбор.организация.установить(ДокСсылка.Организация);
		наб.Прочитать();
		Если наб.Количество()>0 Тогда 
			ПодразделениеСсылка = наб[0].ПодразделениеОрганизации;
		Иначе 
			ПодразделениеСсылка = "";
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ?(ЗначениеЗаполнено(ПодразделениеСсылка), ПодразделениеСсылка.наименование, "");
КонецФункции

Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации(Контрагент,датаОперации,  БанковскийСчет);
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
КонецФункции	

Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)  Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации(Контрагент,датаОперации);
	Возврат Новый Структура("Наименование, ИНН, КПП", СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ИНН, СведенияОбОрганизации.КПП);
КонецФункции

Функция ПолучитьПредставлениеХарактеристикиИСерии(Выборка) Экспорт

	Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьПредставлениеХарактеристикиИСерии(Выборка);

КонецФункции

Функция Документ_Организация(Документ) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Документ_Организация(Документ);
	
КонецФункции

Функция Организация_КПП(Организация) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);
	
КонецФункции

Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящейНакладной(ДокСсылка)
	
КонецФункции

Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка)
	
КонецФункции

Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
	
КонецПроцедуры

Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// функции генерации структуры акта сверки
////////////////////////////////////////////////////////////

Функция  ПолучитьПредставителяОрганизацииДляАктаСверки(ДокСсылка)
	ПредставительОрганизации = Новый Структура;
	ДанныеПредставителя = ОбщегоНазначения.ДанныеФизЛица(ДокСсылка.Организация, ДокСсылка.ПредставительОрганизации, ДокСсылка.Дата);
	
	ПредставительОрганизации.Вставить("ФИО", сокрЛП(Строка(ДанныеПредставителя.Фамилия)+" "+ДанныеПредставителя.Имя+" "+ДанныеПредставителя.Отчество));
	ПредставительОрганизации.Вставить("Должность", Строка(ДанныеПредставителя.Должность));
	
	Возврат ПредставительОрганизации;
КонецФункции

Функция  ПолучитьПредставителяКонтрагентаДляАктаСверки(ДокСсылка)
	ПредставительКонтрагента = Новый Структура;
	ПредставительКонтрагента.Вставить("ФИО", ДокСсылка.ПредставительКонтрагента.наименование);
	ПредставительКонтрагента.Вставить("Должность", ДокСсылка.ПредставительКонтрагента.Должность);
	
	Возврат ПредставительКонтрагента;
КонецФункции

Функция ИнициализироватьТЧДляСверки()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Дата");
	ТЗ.Колонки.Добавить("ПредставлениеДокумента");
	ТЗ.Колонки.Добавить("Дебет");
	ТЗ.Колонки.Добавить("Кредит");
	
	Возврат ТЗ;
КонецФункции		

Функция ПолучитьСтруктуруДанныхТекущегоДоговораАктаСверки(МассивДанныхПоДоговорам, ДоговорСсылка)
	для каждого элемент из  МассивДанныхПоДоговорам цикл 
		Если Элемент.ДоговорСсылка = ДоговорСсылка Тогда
			Возврат  Элемент
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДанныеОрганизации", ИнициализироватьТЧДляСверки());
	СтруктураДанных.Вставить("ДанныеКонтрагента", ИнициализироватьТЧДляСверки());
	СтруктураДанных.Вставить("ДоговорСсылка"    , ДоговорСсылка);
	
	МассивДанныхПоДоговорам.Добавить(СтруктураДанных);
	
	Возврат СтруктураДанных;
КонецФункции

Функция ПолучитьДанныеТЧАктаСверки(ДокСсылка)
	запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дата,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Представление,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Дебет,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Кредит,
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.ДоговорКонтрагента КАК Договор,
	|	Истина КАК ЭтоДанныеОрганизации
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК АктСверкиВзаиморасчетовПоДаннымОрганизации
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымОрганизации.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.НомерСтроки,
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Дата,
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Представление,
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Дебет,
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Кредит,
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.ДоговорКонтрагента,
	|	Ложь
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК АктСверкиВзаиморасчетовПоДаннымКонтрагента
	|ГДЕ
	|	АктСверкиВзаиморасчетовПоДаннымКонтрагента.Ссылка = &Ссылка"; 
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Выборка = запрос.Выполнить().Выбрать();
	МассивДанныхПоДоговорам = Новый Массив;
	
	пока выборка.Следующий() цикл 
		СтруктураДанныхПоДоговору = ПолучитьСтруктуруДанныхТекущегоДоговораАктаСверки(МассивДанныхПоДоговорам,  Неопределено );
		ТаблицаДанных = ?(выборка.ЭтоДанныеОрганизации, СтруктураДанныхПоДоговору.ДанныеОрганизации,  СтруктураДанныхПоДоговору.ДанныеКонтрагента);
		стр = ТаблицаДанных.Добавить();
		Стр.Дата = выборка.Дата;
		Стр.представлениеДокумента = выборка.Представление;
		стр.Дебет = Выборка.Дебет;
		стр.Кредит =выборка.кредит;
	КонецЦикла;	 
	
	
	Возврат МассивДанныхПоДоговорам;
КонецФункции	

Функция ПолучитьНаименованиеОрганизацииДляАктаСверки(ОрганизацияКонтрагент)
	Возврат ?(ЗначениеЗаполнено(ОрганизацияКонтрагент.НаименованиеПолное), ОрганизацияКонтрагент.НаименованиеПолное, ОрганизацияКонтрагент.Наименование);
КонецФункции	 

Функция ПолучитьДанныеДляФормированияАктаСверки(ДокСсылка) Экспорт 
	
	ДанныеДляАктаСверки = Новый Структура();
	
	ДанныеДляАктаСверки.вставить("ДатаНачалаСверки",ДокСсылка.ДатаНачала);
	ДанныеДляАктаСверки.Вставить("ДатаокончанияСверки", ДокСсылка.Датаокончания);
	
	ДанныеДляАктаСверки.Вставить("ПредставлениеОрганизации",ПолучитьНаименованиеОрганизацииДляАктаСверки(ДокСсылка.Организация));
	ДанныеДляАктаСверки.Вставить("ПредставлениеКонтрагента", ПолучитьНаименованиеОрганизацииДляАктаСверки(ДокСсылка.Контрагент));
	
	ДанныеДляАктаСверки.Вставить("ПредставительОрганизации",  ПолучитьПредставителяОрганизацииДляАктаСверки(ДокСсылка));
	ДанныеДляАктаСверки.Вставить("ПредставительКонтрагента",  ПолучитьПредставителяКонтрагентаДляАктаСверки(ДокСсылка));
	
	ДанныеДляАктаСверки.вставить("ВалютаДокумента", ДокСсылка.ВалютаДокумента);
	ДанныеДляАктаСверки.вставить("МассивДанныхПоДоговорам",  ПолучитьДанныеТЧАктаСверки(ДокСсылка));
	
	ДанныеДляАктаСверки.Вставить("СальдоНачальное",  ДокСсылка.ОстатокНаНачало);
	ДанныеДляАктаСверки.Вставить("СверкаСогласована", ДокСсылка.СверкаСогласована);
	ДанныеДляАктаСверки.Вставить("Расхождение", ДокСсылка.Расхождение);
	
	
	
	Возврат ДанныеДляАктаСверки;
КонецФункции	

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФрмВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФрмВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Возврат ФрмВыбора;	
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция ПолучитьПодразделениеПоПодразделениюОрганизации(ПодразделениеОрганизации)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
			|ИЗ
			|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
			|ГДЕ
			|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации";
		
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда 
			Возврат Результат.Подразделение;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	
	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если видОперации = "ВозвратОтПокупателя" Тогда 
		ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ДокОбъект.ВидОперации = перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	Иначе 	
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Если видоперации =  "ПоступлениеОборудования" Тогда 
			ДокОбъект.ВидОперации =   Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		ИначеЕсли   видОперации = "ПоступлениеНМА" Тогда
			ДокОбъект = Документы.ПоступлениеНМА.СоздатьДокумент();
		ИначеЕсли видОперации = "ПоступлениеДопРасходов" Тогда
			ДокОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
		ИначеЕсли видОперации = "ПоступлениеОбъектовСтроительства"	Тогда 
			ДокОбъект.ВидОперации = перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		Иначе 	
			ДокОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;	
		ДокОбъект.ДатаВходящегоДокумента = параметры.ДатаВходящегоДокумента;
		ДокОбъект.НомерВходящегоДокумента = параметры.НомерВходящегоДокумента;
	КонецЕсли;	
	
	ДокОбъект.ДоговорКонтрагента= параметры.ДоговорКонтрагента;
	ДокОбъект.ВалютаДокумента= ДокОбъект.ДоговорКонтрагента.ВалютаВзаимоРасчетов;
	ДокОбъект.КратностьВзаиморасчетов= 1;
	
	Если (НЕ ДокОбъект.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено)
		И Параметры.Свойство("ОтражатьВБухУчете") = Истина Тогда
		
		ДокОбъект.ОтражатьВБухгалтерскомУчете = Параметры.ОтражатьВБухУчете;	
	КонецЕсли;
	
	Если (НЕ ДокОбъект.Метаданные().Реквизиты.Найти("ОтражатьВНалоговомУчете") = Неопределено) 
		И Параметры.Свойство("ОтражатьВНалУчете") = Истина Тогда
		
		ДокОбъект.ОтражатьВНалоговомУчете = Параметры.ОтражатьВНалУчете;	
	КонецЕсли;
	
	Если (НЕ ДокОбъект.Метаданные().Реквизиты.Найти("ОтражатьВУправленческомУчете") = Неопределено) 
		И Параметры.Свойство("ОтражатьВУпрУчете") = Истина Тогда
		
		ДокОбъект.ОтражатьВУправленческомУчете = Параметры.ОтражатьВУпрУчете;	
	КонецЕсли;
	
	Если НЕ ДокОбъект.Метаданные().Реквизиты.Найти("РегистрироватьЦеныПоставщика") = Неопределено Тогда
		ДокОбъект.РегистрироватьЦеныПоставщика = ПолучитьМодульПрог("Модуль_1САдаптерНастройкиТекущегоПользователя_Типовые"). ПолучитьНастройку("Регистрировать цены поставщика", Ложь);
	КонецЕсли;
		
	//заполним склад и подразделение
	Если ДокОбъект.Метаданные().Реквизиты.Найти("СкладОрдер")<>Неопределено Тогда
		ДокОбъект.ВидПоступления = перечисления.ВидыПоступленияТоваров.НаСклад;
		ДокОбъект.СкладОрдер = параметры.Склад;
	КонецЕсли;	
	
	Если ДокОбъект.Метаданные().Реквизиты.найти("ПодразделениеОрганизации")<>Неопределено Тогда 
		ДокОбъект.ПодразделениеОрганизации = параметры.Подразделение;
		
		Если ЗначениеЗаполнено(ДокОбъект.ПодразделениеОрганизации) и (ДокОбъект.Метаданные().Реквизиты.Найти("Подразделение")<>Неопределено) Тогда 
			ДокОбъект.Подразделение = ПолучитьПодразделениеПоПодразделениюОрганизации(ДокОбъект.ПодразделениеОрганизации);
		КонецЕсли;	
	КонецЕсли;	
	
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
		
		//Заполняем договор
		мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект, мСтруктураПараметровДляПолученияДоговора);
	КонецЕсли;
	
	Если ВидОперации =  "ПоступлениеДопРасходов" Тогда
		ДокОбъект.Сумма =(ЭДОбъект.total - ?(СуммаВключаетНДС,0,ЭДОбъект.vat ));
		ДокОбъект.СуммаНДС = ЭДОбъект.vat;
	Иначе
		Если ТабличнаяЧасть <> Неопределено Тогда
			Для каждого стр Из ТабличнаяЧасть Цикл
				Если (видОперации = "ВозвратОтПокупателя")  или (стр.Тип = "Товар") Тогда
					стрОбъект = ДокОбъект.Товары.Добавить();
					ИмяТЧ = "Товары";
			
					Если   (видОперации <> "ВозвратОтПокупателя") Тогда
						стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
						стрОбъект.Коэффициент = 1;
					КонецЕсли;	
				ИначеЕсли стр.Тип = "Оборудование" Тогда
					стрОбъект = ДокОбъект.Оборудование.Добавить();
					ИмяТЧ = "Оборудование";
					стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
					стрОбъект.Коэффициент = 1;
				ИначеЕсли стр.Тип = "Объект стр" Тогда 	
					стрОбъект = ДокОбъект.ОбъектыСтроительства.Добавить();
					ИмяТЧ = "ОбъектыСтроительства";
				ИначеЕсли стр.Тип = "НМА" Тогда	
					стрОбъект = ДокОбъект.НематериальныеАктивы.Добавить();
					ИмяТЧ = "НематериальныеАктивы";
					
				Иначе
					стрОбъект = ДокОбъект.Услуги.Добавить();
					ИмяТЧ = "Услуги";
					стрОбъект.Содержание = стр.НоменклатураИзЭД;
					стрОбъект.Номенклатура = стр.Номенклатура;
					
					Если НЕ ЗначениеЗаполнено(стрОбъект.СтатьяЗатрат) Тогда
						стрОбъект.СтатьяЗатрат = стрОбъект.Номенклатура.СтатьяЗатрат;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(стрОбъект.НоменклатурнаяГруппа) Тогда
						стрОбъект.НоменклатурнаяГруппа = стрОбъект.Номенклатура.НоменклатурнаяГруппаЗатрат;
					КонецЕсли;
					
					Если ДокОбъект.Метаданные().Реквизиты.найти("ПодразделениеОрганизации")<>Неопределено Тогда 
						стрОбъект.ПодразделениеОрганизации = ДокОбъект.ПодразделениеОрганизации;
					КонецЕсли;
					
					Если ДокОбъект.Метаданные().Реквизиты.найти("Подразделение")<>Неопределено Тогда 
						стрОбъект.Подразделение = ДокОбъект.Подразделение;
					КонецЕсли;
				КонецЕсли;
				
				Если стр.Тип =  "Объект стр" Тогда 
					стрОбъект.ОбъектСтроительства =   стр.Номенклатура;
				ИначеЕсли стр.Тип =  "НМА" Тогда 
					стрОбъект.НематериальныйАктив =   стр.Номенклатура;
				Иначе 	
					стрОбъект.Номенклатура = стр.Номенклатура;
					стрОбъект.Количество = стр.Количество;
					стрОбъект.Цена = стр.Цена;
					Если ТабличнаяЧасть.Колонки.Найти("Серия") <> Неопределено Тогда
						стрОбъект.СерияНоменклатуры = Стр.Серия;
					КонецЕсли;
				КонецЕсли;	
				стрОбъект.Сумма = стр.Сумма;
				стрОбъект.СуммаНДС = стр.СуммаНДС;
				стрОбъект.СтавкаНДС = стр.СтавкаНДС;
				
				Если стр.Тип <>  "Объект стр"  Тогда
					СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТЧ, стрОбъект, ДокОбъект, истина,истина);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДокОбъект.СуммаВключаетНДС = СуммаВключаетНДС;
	ДокОбъект.УчитыватьНДС = Истина;
	
	Возврат ДокОбъект;
	
КонецФункции

Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
	ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	ДокОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
	КонецЕсли;
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если ДокОбъект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	
	СтруктураПараметровДляПолученияДоговора=	Новый Структура();
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокВидовДоговоров);
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ДокОбъект, СтруктураПараметровДляПолученияДоговора);
	
	Возврат ДокОбъект;
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
	мСписокВидовДоговоров = Новый СписокЗначений;
	Если ТипЗнч(СчетФактура) = тип("ДокументОбъект.СчетФактураПолученный") Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СчетФактура.ВидСчетаФактуры = перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	Иначе 
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СчетФактура.ВидСчетаФактуры = перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли;	
	СтруктураПараметровДляПолученияДоговора = Новый Структура;
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров",мСписокВидовДоговоров);
	
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(СчетФактура,СтруктураПараметровДляПолученияДоговора);
	
КонецПроцедуры

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Возврат СписокВидовДоговоров;
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров);
	
КонецФункции

/////////////////////////////////////////////////////////////
// Связи объектов
/////////////////////////////////////////////////////////////

Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
	Возврат ОбщегоНазначения.СформироватьСуммуПрописью(Total, ВалютаДокумента);
КонецФункции	

Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСтавкуНДСДиадок(TaxRate);
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
		
	ПодходящаяЕИ = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕИ.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения ЕИ
	|ГДЕ
	|	ЕИ.Владелец = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	пока  Выборка.Следующий() Цикл
		ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
		Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
			Возврат  Выборка.Ссылка;
		КонецЕсли;	
		Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
		Если коэф <> Неопределено Тогда 
			ПодходящаяЕИ = выборка.ссылка;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции

Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции

Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокКорректировка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Док
		|ГДЕ
		|	Док.ДокументПоступления = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", ПоследняяКорректировка);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследняяКорректировка = Выборка.ДокКорректировка;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследняяКорректировка;
	
КонецФункции

Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
	Если Document.type =  "InvoiceRevision" Тогда 
		запрос = Новый запрос;
		запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));		
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Док =  результат.ДокументОснование;
			Возврат 	ПолучитьПоследнююКорректировкуПоступления(Док); 
		иначе 
			Возврат Неопределено 
		КонецЕсли;	
	ИначеЕсли Document.type = "InvoiceCorrection"  Тогда 
		запрос = Новый Запрос;
		Если ЗначениеЗаполнено(Document.OriginalInvoicerevisionNumber)=Ложь Тогда 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
			|	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
			|	И (СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь)";
		Иначе 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
			|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления,
			|	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление,
			|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
			|	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
			|	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление
			|	И СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления = &ДатаИсправления
			|	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления = &НомерИсправления";
			Запрос.УстановитьПараметр("НомерИсправления", число(Document.OriginalInvoicerevisionNumber));		
			Запрос.УстановитьПараметр("ДатаИсправления", НачалоДня(Document.OriginalInvoicerevisionDate));		
		КонецЕсли;				
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	ИначеЕсли Document.type = "InvoiceCorrectionRevision"  Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|ГДЕ
		|	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		|	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalInvoiceCorrectionDate));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalInvoiceCorrectionNumber);
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	Иначе 
		Возврат Неопределено
	КонецЕсли;	
	
КонецФункции	

Функция ДобавитьРазделитель(Стр, Префикс = "") 
	Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
КонецФункции

Функция ОтрезатьПравуюЗапятую(стр)
	результат = сокрЛП(стр);
	пока прав(результат, 1)="," цикл 
		Результат = лев(результат, стрДлина(результат)-1);
	КонецЦикла;	
	
	Возврат результат;
КонецФункции

Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   Экспорт 
	СведенияОбОрганизации = ПолучитьСведенияОбОрганизации(Контрагент, ДатаОперации);
	Возврат ОтрезатьПравуюЗапятую(ДобавитьРазделитель(СведенияОбОрганизации.ПолноеНаименование)+ДобавитьРазделитель(СведенияОбОрганизации.ИНН, "ИНН: ")+ДобавитьРазделитель(СведенияОбОрганизации.КПП, "КПП: "));
КонецФункции

Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект);	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект);	
КонецФункции

Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
	ДокПоступление = СчетФактура.ДокументыОснования[0].ДокументОснование;
КонецФункции

//{ СвязиМеждуДокументами

	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов);
		
	КонецФункции
	
	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов);
		
	КонецФункции

//} Приглашение Контрагентов

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ВнешняяОбработкаПоGUID(GUID);
		
	КонецФункции

//} Внешние обработки

ВалютаРегламентированногоУчета = ПолучитьВалютуРегламентированногоУчета();