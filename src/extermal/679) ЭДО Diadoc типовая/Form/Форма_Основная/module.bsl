Перем ДатаВыводаЛайтбокса;
Перем ОбновлятьСписокДокументов;
Перем КэшЭДОбъектов;

Перем ПервоеОткрытиеПолученные;
Перем ПервоеОткрытиеОтправленные;

Перем ВыбранИнтервалБезОграниченияВходящие;
Перем ВыбранИнтервалБезОграниченияИсходящие;

Перем ЗафиксированыСобытияОткрытияФормы;


//{ НАЧАЛО РАБОТЫ С МОДУЛЕМ

	Процедура ПриОткрытии()
		
		ЗаполнитьЭлементыФормы();
		ПодключитьОбработчикОжидания("НачалоРаботы",0.1, Истина );
				
	КонецПроцедуры

	Процедура НачалоРаботы()
		
		Если ИнициализироватьМодулиЯдра() = Ложь Тогда
			Закрыть();
			Возврат;
		КонецЕсли;

		Если Модуль_РаботаССерверомДиадок.ИнициализироватьВК() = Ложь Тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		
		Если ПроверитьКонфигурациюИКомпоненту() = Ложь Тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		
		Если УспешноВыполненаИнициализация() = Ложь Тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		
		Если УспешноВыполненаЛогикаПослеАвторизации() = Ложь Тогда
			Закрыть();
			Возврат;
		КонецЕсли;
		
		ИнициализироватьПодключаемыйМодуль();
        		
		НастроитьЭлементыФормы();
		НачатьФормированиеЛентыСобытий();
		ОбновитьСтруктуруЭлементовФормыВСоответствииСНастройкамиОбработкиДокументов();
		
		РазрешитьНеструктурированныеАдреса = (ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("РазрешитьНеструктурированныеАдреса")="Да");
		
		ОбработкаСобытияПодключаемогоМодуля("ПриОткрытииФормы", Новый Структура("Форма, ИмяФормы", ЭтаФорма, "Форма_Основная"));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").ЗаполнитьИдентификаторыЭДО();
		
		//если есть заблокированные по API организации, то выводим информационное окно
		ОтборЗаблокированныхОрганизаций = Новый Структура;
		ОтборЗаблокированныхОрганизаций.Вставить("ЗаблокированаПоAPI", Истина);
		ЗаблокированныеОрганизации = Модуль_РаботаССерверомДиадок.ПолучитьКонтекстДиадока().НайтиСтроки(ОтборЗаблокированныхОрганизаций);
		
		Если ЗаблокированныеОрганизации.Количество() > 0 Тогда 
			
			ФормаОплатаСервиса = ЭтотОбъект.ПолучитьФорму("ФормаОплатаСервиса");
			ФормаОплатаСервиса.СписокОрганизаций = Новый СписокЗначений();
			Для Каждого ТекСтрока Из ЗаблокированныеОрганизации Цикл
				ФормаОплатаСервиса.СписокОрганизаций.Добавить(ТекСтрока);
			КонецЦикла;	
			ФормаОплатаСервиса.ОткрытьМодально();
		
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция	  УспешноВыполненаЛогикаПослеАвторизации()
		
		ConnectionUser = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DefaultConnectionUser();
		НадписьТекущийПользовательВДиадоке= ConnectionUser.LastName +" "+ConnectionUser.FirstName +" "+ConnectionUser.MiddleName;
		
		ОчиститьФильтрОрганизация();
		ОчиститьФильтрКонтрагент();
		
		МассивОрганизаций=	Модуль_РаботаССерверомДиадок.ПолучитьОрганизацииНезаблокированныеПоAPI();
		
		Если МассивОрганизаций.Количество() = 0 Тогда
			Если УспешноДобавленыЯщикиДиадок() = Истина Тогда
				ПоискИПриглашениеКонтрагентов_Запуск(Истина);
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ПоискИПриглашениеКонтрагентов_Запуск(Ложь);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
//} НАЧАЛО РАБОТЫ С МОДУЛЕМ

//{ ФУНКЦИИ УПРАВЛЕНИЯ ФОРМОЙ
	
	//{ ЭЛЕМЕНТЫ ФОРМЫ
		
		Функция ПолучитьПолныйСписокТиповДокументов()
			результат = Новый СписокЗначений;
			
			результат.Добавить(0, "Все документы");
			результат.Добавить(1, "Накладные");
			результат.Добавить(11, "  Торг-12");
			результат.Добавить(12, "  Акт");
			результат.Добавить(13, "  " + ТипДокументаУПД("ДОП"));
			результат.Добавить(14, "  " + ТипДокументаУКД("ДИС"));
			
			результат.Добавить(2, "Счета-фактуры");
			результат.Добавить(21, "  Оригинальные СФ");
			результат.Добавить(22, "  Исправленные СФ");
			результат.Добавить(23, "  Корректировочные СФ");
			результат.Добавить(24, "  " + ТипДокументаУПД("СЧФ"));
			результат.Добавить(25, "  " + ТипДокументаУКД("КСЧФ"));
			
			результат.Добавить(5, ТипДокументаУПД("СЧФДОП"));
			результат.Добавить(6, ТипДокументаУКД("КСЧФДИС"));
			
			результат.Добавить(3, "Счета на оплату");
			
			результат.Добавить(4, "Неформализованные");
			результат.Добавить(41, "  Акт сверки");
			результат.Добавить(42, "  Детализация");
			результат.Добавить(43, "  Договор");
			результат.Добавить(44, "  Протокол согласования цены");
			результат.Добавить(45, "  Приглашение к ЭДО");
			результат.Добавить(46, "  Реестр сертификатов");
			//результат.Добавить(47, "  Ценовой лист");
			результат.Добавить(48, "  Прочее");
			
			Возврат результат;
		КонецФункции
		
		Функция ПолучитьКраткийСписокТиповДокументов()
			результат = Новый СписокЗначений;
			
			результат.Добавить(0, "Все документы");
			результат.Добавить(1, "Накладные");
			результат.Добавить(2, "Счета-фактуры");
			результат.Добавить(5, ТипДокументаУПД("СЧФДОП"));
			результат.Добавить(6, ТипДокументаУКД("КСЧФДИС"));
			результат.Добавить(3, "Счета на оплату");
			результат.Добавить(4, "Неформализованные");
			
			Возврат результат;	
		КонецФункции
		
		Процедура НастроитьВидимостьЭлементовФормы()
			
			НадписьРасшифровкаОшибокВходящих_СкрытьПоказать();
			НадписьРасшифровкаОшибокИсходящих_СкрытьПоказать();
			
			Элементыформы.ПанельОбновлениеИсходящих.Видимость = Ложь;
			Элементыформы.ПанельОбновлениеВходящих.Видимость = Ложь;
			
			Элементыформы.ПанельНастроек.Страницы.СоответствиеПодразделений1С.Видимость = ПолучитьПрофильКонфигурации().ИспользоватьСопоставлениеПодразделений;
			
		КонецПроцедуры
		
		Процедура НастроитьЭлементыФормы()
			
			ОбновлятьСписокДокументов = Истина;
			
			НастроитьВидимостьЭлементовФормы();
			
			НастроитьСписокДокументооборота();
			СписокДокументооборота = ВосстановитьЗначение("СтатусДокументаОсновнаяФормаДиадок");
			СписокДокументооборота= ?(СписокДокументооборота=Неопределено, 0, СписокДокументооборота);
			
			НастроитьСписокВзаимоотношений();
			
			СписокВыбораТипов = ПолучитьПолныйСписокТиповДокументов();
			Для каждого эл из СписокВыбораТипов цикл 
				Элементыформы.ТипыДокументов.СписокВыбора.Добавить(эл.Значение, сокрЛП(Эл.Представление));
			КонецЦикла;	
			
			ТипыДокументов = ВосстановитьЗначение("ТипыДокументовОсновнаяФормаДиадок");
			ТипыДокументов = ?(ТипыДокументов = Неопределено, 0, ТипыДокументов);
			
			ПанельРежимовПриСменеСтраницы(ЭлементыФормы.ПанельРежимов, ЭлементыФормы.ПанельРежимов.ТекущаяСтраница);
			
			ВключатьПодчиненныеПодазделения = Истина;
			
			ЭлементыФормы.КонопкаОтправитьВДиадок.Доступность= ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияДалионУМ" И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАсторТД";
			
		КонецПроцедуры
		
		Процедура ЗаполнитьЭлементыФормы()
			
			КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
			Заголовок = "Модуль работы с электронными первичными документами через "+НаименованиеСистемы;
			
			//ЭлементыФормы.ПолеКартинкиЛоготипа.Картинка = Новый Картинка(ПолучитьМакет("ЛоготипБольшой"));
			ЭлементыФормы.НадписьПлашкаОбновленияВходящие.Заголовок 		 		= "Производится получение документов с сервера "+НаименованиеСистемы;
			ЭлементыФормы.НадписьПлашкаОбновленияИсходящие.Заголовок		 		= "Производится получение документов с сервера "+НаименованиеСистемы;
			ЭлементыФормы.НадписьПлашкаОбновленияНаСогласовании.Заголовок	 		= "Производится получение документов с сервера "+НаименованиеСистемы;
			ЭлементыФормы.ТаблицаСкладов.Колонки.ПодразделениеВДиадок.ТекстШапки	= "Подразделение в " + НаименованиеСистемы;
			ЭлементыФормы.ТаблицаПодразделений.Колонки.ПодразделениеВДиадок.ТекстШапки	= "Подразделение в " + НаименованиеСистемы;
			
			ЭлементыФормы.КнопкаТехподдержка.Заголовок=	"Техподдержка (v" + ВерсияОбработки + ")";
			
			ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ.Заголовок = ?(стрДлина(КраткоеНаименованиеСистемы)<=7,  "Полученные через "+КраткоеНаименованиеСистемы, "Полученные");
			ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ.Заголовок =?(стрДлина(КраткоеНаименованиеСистемы)<=7, "Отправленные через "+КраткоеНаименованиеСистемы, "Отправленные");
			
			ВосстановленнаяСтраница= ЭлементыФормы.ПанельРежимов.Страницы.Найти(ВосстановитьЗначение("Диадок_Форма_Основная_ИмяТекущейСтраницы"));
			Если 	ВосстановленнаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ 
				ИЛИ ВосстановленнаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ Тогда
				ЭлементыФормы.ПанельРежимов.ТекущаяСтраница= ВосстановленнаяСтраница;
			Иначе	
				ЭлементыФормы.ПанельРежимов.ТекущаяСтраница= ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ;
			КонецЕсли;
			
			Элементыформы.ПанельОбновлениеВходящих.Видимость = Истина;
			
			ЭлементыФормы.КонопкаОтправитьВДиадок.Доступность= ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияДалионУМ" И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАсторТД";
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельЛентаСобытий, РежимСверткиЭлементаУправления.Право);
			
			ЭлементыФормы.КнопкаПоказатьЛенту.Заголовок=	"<";
			
			ЭлементыФормы.ТаблицаДокументовВходящих.Колонки.Найти("КартинкаДокументаВПакете").КартинкиСтрок= 	 ЭДО_БиблиотекаКартинок().КартинкиПакетов;
			ЭлементыФормы.ТаблицаДокументовИсходящих.Колонки.Найти("КартинкаДокументаВПакете").КартинкиСтрок= 	 ЭДО_БиблиотекаКартинок().КартинкиПакетов;
			ЭлементыФормы.ТаблицаДокументовНаПодписании.Колонки.Найти("КартинкаДокументаВПакете").КартинкиСтрок= ЭДО_БиблиотекаКартинок().КартинкиПакетов;
			
			ВыделитьКнопкуТекущейСтраницы();
			
		КонецПроцедуры
		
	//} ЭЛЕМЕНТЫ ФОРМЫ
	
	//{ ДЕЙСТВИЯ ФОРМЫ
		
		Процедура ПанельРежимовПриСменеСтраницы(Элемент, ТекущаяСтраница, ПриСменеОрганизации = Неопределено)
		
			Если Элементыформы.панельрежимов.текущаястраница.имя="Настройки" Тогда 
				ЭлементыФормы.НадписьОтправитель.Видимость = Ложь;
				ЭлементыФормы.ОрганизацияПредставление.Видимость = Ложь;
				ЭлементыФормы.НадписьПолучатель.Видимость = Ложь;
				ЭлементыФормы.ФильтрСпискаДокументов_CounteragentName.Видимость = Ложь;
				ЭлементыФормы.Надпись4.Видимость = Ложь;
				ЭлементыФормы.ТипыДокументов.Видимость = Ложь;
				
				ЭлементыФормы.СписокВзаимоотношений.Видимость=		   Ложь;
				ЭлементыФормы.НадписьСписокВзаимоотношений.Видимость=  Ложь;
				ЭлементыФормы.СписокДокументооборота.Видимость=		   Ложь;
				ЭлементыФормы.НадписьСписокДокументооборота.Видимость= Ложь;
				
				ПриОткрытииСтраницыНастрокиПараметров();
			ИначеЕсли Элементыформы.панельрежимов.текущаястраница.имя="Контрагенты" Тогда 
				ЭлементыФормы.НадписьОтправитель.Видимость = Истина;
				ЭлементыФормы.ОрганизацияПредставление.Видимость = Истина;
				ЭлементыФормы.ОрганизацияПредставление.КнопкаОчистки = Ложь;
				ЭлементыФормы.НадписьПолучатель.Видимость = Ложь;
				ЭлементыФормы.ФильтрСпискаДокументов_CounteragentName.Видимость = Ложь;
				ЭлементыФормы.Надпись4.Видимость = Ложь;
				ЭлементыФормы.ТипыДокументов.Видимость = Ложь;
				
				ЭлементыФормы.СписокВзаимоотношений.Видимость=		   Истина;
				ЭлементыФормы.НадписьСписокВзаимоотношений.Видимость=  Истина;
				
				ЭлементыФормы.СписокДокументооборота.Видимость=		   Ложь;
				ЭлементыФормы.НадписьСписокДокументооборота.Видимость= Ложь;
				
				
				ПриОткрытииСтраницыКонтрагентов(ПриСменеОрганизации);
			Иначе 
				ЭлементыФормы.НадписьОтправитель.Видимость = Истина;
				ЭлементыФормы.ОрганизацияПредставление.Видимость = Истина;
				ЭлементыФормы.ОрганизацияПредставление.КнопкаОчистки = Истина;
				ЭлементыФормы.НадписьПолучатель.Видимость = Истина;
				ЭлементыФормы.ФильтрСпискаДокументов_CounteragentName.Видимость = Истина;
				ЭлементыФормы.Надпись4.Видимость = Истина;
				ЭлементыФормы.ТипыДокументов.Видимость = Истина;
				
				ЭлементыФормы.СписокВзаимоотношений.Видимость=		   Ложь;
				ЭлементыФормы.НадписьСписокВзаимоотношений.Видимость=  Ложь;
				
				ЭлементыФормы.СписокДокументооборота.Видимость=		   Истина;
				ЭлементыФормы.НадписьСписокДокументооборота.Видимость= Истина;
				
				УстановитьПериодВыборкиДокументов(ЭлементыФормы.ПанельРежимов.ТекущаяСтраница);

				НастроитьСписокДокументооборота();
				
				ПриОткрытииСтраницыСпискаДокументов();
				
			КонецЕсли;
			
			НадписьРасшифровкаОшибокВходящих_СкрытьПоказать();
			НадписьРасшифровкаОшибокИсходящих_СкрытьПоказать();
			
		КонецПроцедуры
		
		Процедура НастроитьСписокДокументооборота()
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Очистить();
			
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(0, "Все документы");
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(11, "На согласовании");
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(12, "Согласован");
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(13, "Отказано в согласовании");
			ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(14, "Отказано в подписании");
			
			Если Элементыформы.ПанельРежимов.ТекущаяСтраница <> Элементыформы.ПанельРежимов.Страницы.ПереданныеНаПодпись Тогда 
				
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(21, "Ожидается аннулирование");
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(22, "Требуется аннулирование");
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(23, "Документ аннулирован");
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(24, "Отказано в аннулировании");
				
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(1, "Завершен");
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(2, "Не завершен");
				ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(3, "Прекращен");
				
				Если Элементыформы.ПанельРежимов.ТекущаяСтраница = Элементыформы.ПанельРежимов.Страницы.ОтправленныеЭСФ Тогда  
					ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(4, "Требуется уточнение");
				Иначе
					ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(4, "Ожидается уточнение");
				КонецЕсли;
				
			КонецЕсли;
			
			СписокДокументооборота = СписокДокументооборота;
			
			Если ЭлементыФормы.СписокДокументооборота.СписокВыбора.НайтиПоЗначению(СписокДокументооборота) = Неопределено Тогда
				СписокДокументооборота = 0;
			КонецЕсли;	
			
		КонецПроцедуры
		
		Процедура НастроитьСписокВзаимоотношений()
			
			Если ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Количество() = 0 Тогда
				ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Добавить("IsMyCounteragent", "Партнерские отношения");
				ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Добавить("InvitesMe", "Получен запрос");
				ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Добавить("IsInvitedByMe", "Ожидается ответ");
				ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Добавить("Rejected", "Заблокированные");
				ЭлементыФормы.СписокВзаимоотношений.СписокВыбора.Добавить("All", "Все статусы");
			КонецЕсли;
			
			СписокВзаимоотношений=	"All";
			
		КонецПроцедуры
		
		Процедура НадписьВыходНажатие(Элемент)
			
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследнийСертификатПользователя", "");
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследнееПредставлениеПользователя", "");
			
			Если НЕ Модуль_РаботаССерверомДиадок.ИнициализироватьКонтекст() Тогда
				Закрыть();
				Возврат;
			КонецЕсли;
			
			Если НЕ УспешноВыполненаЛогикаПослеАвторизации() Тогда
				Закрыть();
				Возврат;
			КонецЕсли;
			
			ПанельРежимовПриСменеСтраницы("", Элементыформы.ПанельРежимов.ТекущаяСтраница);
			
		КонецПроцедуры
		
		Процедура ЗаполнитьТаблицуДокументовВходящих(ТаблицаДанных)
			
			ТаблицаДокументовВходящих.Загрузить(ТаблицаДанных);
			
			ОсновнойОтборВходящие=	ЭлементыФормы.ТаблицаДокументовВходящих.ОтборСтрок;
			
			Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				
				ОтборСтрок=	Новый Структура("BoxID, DocumentId", СтрокаТаблицы.BoxID, СтрокаТаблицы.DocumentId);
				
				НайденныйКэш=	КэшЭДОбъектов.НайтиСтроки(ОтборСтрок);
				Если НайденныйКэш.Количество() = 0 Тогда
					СтрокаКэша=	КэшЭДОбъектов.Добавить();
					СтрокаКэша.BoxID=		СтрокаТаблицы.BoxID;
					СтрокаКэша.DocumentId=	СтрокаТаблицы.DocumentId;
					СтрокаКэша.ЭДОбъект=	СтрокаТаблицы.ЭДОбъект;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура ЗаполнитьТаблицуДокументовИсходящих(ТаблицаДанных)
			
			ТаблицаДокументовИсходящих.Загрузить(ТаблицаДанных);
			
			ОсновнойОтборИсходящие=	ЭлементыФормы.ТаблицаДокументовИсходящих.ОтборСтрок;
			
			Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				
				ОтборСтрок=	Новый Структура("BoxID, DocumentId", СтрокаТаблицы.BoxID, СтрокаТаблицы.DocumentId);
				
				НайденныйКэш=	КэшЭДОбъектов.НайтиСтроки(ОтборСтрок);
				Если НайденныйКэш.Количество() = 0 Тогда
					СтрокаКэша=	КэшЭДОбъектов.Добавить();
					СтрокаКэша.BoxID=		СтрокаТаблицы.BoxID;
					СтрокаКэша.DocumentId=	СтрокаТаблицы.DocumentId;
					СтрокаКэша.ЭДОбъект=	СтрокаТаблицы.ЭДОбъект;
				КонецЕсли;
			КонецЦикла;
			
		КонецПроцедуры
		
		Функция ПолучитьЭДОбъектИзКэша(BoxID, DocumentId)
			
			ОтборСтрок=	Новый Структура("BoxID, DocumentId", BoxID, DocumentId);
			
			НайденныеСтроки=	КэшЭДОбъектов.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ВызватьИсключение "Не удалось найти ЭДОбъект";
			Иначе
				Возврат НайденныеСтроки[0].ЭДОбъект;
			КонецЕсли;
			
		КонецФункции
		
		Процедура ОчиститьТаблицы()
			
			КэшЭДОбъектов.Очистить();
			ТаблицаДокументовВходящих.Очистить();
			ТаблицаДокументовИсходящих.Очистить();
			
		КонецПроцедуры
		
		Процедура ОбновитьСписокДокументов()
			
			Если НЕ ОбновлятьСписокДокументов Тогда
				Возврат;
			КонецЕсли;
			
			ОбновитьНадписьПояснения();
			
			Направление = ПолучитьЗначениеНаправления();
			Организация = ОрганизацияСсылка;
			
			Попытка 
				
				ПериодВыборки = ВосстановитьТекущуюНастройкуПериода();
				
				ТаблицаДанных = Модуль_РаботаССерверомДиадок.ВернутьВыборкуРНКИСчетовФактурДиадок(
				ПериодВыборки.ДатаНачала, 
				ПериодВыборки.ДатаОкончания, 
				Организация, 
				ФильтрСпискаДокументов_CounteragentID, 
				Направление, 
				СписокДокументооборота,
				ТипыДокументов,
				ПодразделениеID,  ВключатьПодчиненныеПодазделения);
				
				ТаблицаДанных.Колонки.Добавить("ТекстОшибки");
				
				ОчиститьТаблицы();
				
				Если Направление = "НаПодписании" Тогда 
					ТаблицаДокументовНаПодписании = ТаблицаДанных;
				ИначеЕсли Направление = "Inbound" Тогда
					ЗаполнитьТаблицуДокументовВходящих(ТаблицаДанных);
				Иначе
					ЗаполнитьТаблицуДокументовИсходящих(ТаблицаДанных);
				КонецЕсли;
				
			Исключение 
				Элементыформы.ПанельОбновлениеИсходящих.Видимость = Ложь;
				Элементыформы.ПанельОбновлениеВходящих.Видимость = Ложь;
				ЭлементыФормы.ПанельОбновлениеПереданныхНаПодпись.Видимость = Ложь;
				
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
				Возврат
			КонецПопытки;	
			
			Элементыформы.ПанельОбновлениеИсходящих.Видимость = Ложь;
			Элементыформы.ПанельОбновлениеВходящих.Видимость = Ложь;
			ЭлементыФормы.ПанельОбновлениеПереданныхНаПодпись.Видимость = Ложь;
			
			ТекСписок = ТекущаяФормаСписка();
			ТекущаяТаблица = ТекущаяТаблица();
			
			Если ТекСписок.ТекущиеДанные = Неопределено И ТекущаяТаблица.Количество() > 0 Тогда
				
				СтрокаТабличногоПоля = ТекущаяТаблица[0];
				ОформлениеСтроки = ТекСписок.ОформлениеСтроки(СтрокаТабличногоПоля);
				Если ОформлениеСтроки <> Неопределено Тогда
					Если Направление = "Inbound" ИЛИ Направление = "Outbound" Тогда
						ЭДОбъект=	ПолучитьЭДОбъектИзКэша(СтрокаТабличногоПоля.BoxID, СтрокаТабличногоПоля.DocumentID);
					Иначе
						ЭДОбъект=	СтрокаТабличногоПоля.ЭДОбъект;
					КонецЕсли;
					ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(ОформлениеСтроки, ЭДОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыСобытия= Новый Структура;
			ПараметрыСобытия.Вставить("Форма"		  , ЭтаФорма);
			ПараметрыСобытия.Вставить("ТекущаяТаблица", ТекущаяТаблица);
			ПараметрыСобытия.Вставить("Направление"	  , Направление);
			
			ОбработкаСобытияПодключаемогоМодуля("ПослеОбновленияСпискаДокументов", ПараметрыСобытия);
			
		КонецПроцедуры	
		
		Процедура УстановитьПериодВыборкиДокументов(ТекущаяСтраница)
			
			Если ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ Тогда
				
				Если ВыбранИнтервалБезОграниченияВходящие = Ложь Тогда
					ДатаНачала=		?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ТекущаяДата());
					ДатаОкончания=	?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ТекущаяДата());
				КонецЕсли;
								
				Если ПервоеОткрытиеПолученные = Истина Тогда
					
					ПервоеОткрытиеПолученные=	Ложь;
					
					НастройкаПериодаПолученные=		ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СброситьНастройкуПериода("ДиадокНастройкаПериодаПолученные");
					
					ДатаНачала=				НастройкаПериодаПолученные.ДатаНачала;
					ДатаОкончания=			НастройкаПериодаПолученные.ДатаОкончания;
					СохранитьЗначение("ДиадокНастройкаПериодаПолученные", НастройкаПериодаПолученные);
					
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ Тогда
				
				Если ВыбранИнтервалБезОграниченияИсходящие = Ложь Тогда
					ДатаНачалаИсходящие=	?(ЗначениеЗаполнено(ДатаНачалаИсходящие), ДатаНачалаИсходящие, ТекущаяДата());
					ДатаОкончанияИсходящие=	?(ЗначениеЗаполнено(ДатаОкончанияИсходящие), ДатаОкончанияИсходящие, ТекущаяДата());
				КонецЕсли;
								
				Если ПервоеОткрытиеОтправленные = Истина Тогда
					
					ПервоеОткрытиеОтправленные=	Ложь;
					
					НастройкаПериодаОтправленные=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВосстановитьНастройкуПериода(ТекущаяДата(), ТекущаяДата(),"ДиадокНастройкаПериодаОтправленные");
					Если ТипЗнч(НастройкаПериодаОтправленные) = Тип("НастройкаПериода") Тогда
						
						Если (ДобавитьМесяц(НастройкаПериодаОтправленные.ДатаНачала,1) < НастройкаПериодаОтправленные.ДатаОкончания)
							ИЛИ (ЗначениеЗаполнено(НастройкаПериодаОтправленные.ДатаНачала)=Ложь И ЗначениеЗаполнено(НастройкаПериодаОтправленные.ДатаОкончания)=Ложь) Тогда
						
							Ответ=	Вопрос("Период выбора больше месяца, формирование списка может занять продолжительное время. Оставить выбранный период?", РежимДиалогаВопрос.ДаНет, 120,, "Диадок");
							Если Ответ = КодВозвратаДиалога.Нет Тогда
								НастройкаПериодаОтправленные=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СброситьНастройкуПериода("ДиадокНастройкаПериодаОтправленные");
							Иначе
								Если НастройкаПериодаОтправленные.ВариантНачала = ВариантГраницыИнтервала.БезОграничения И НастройкаПериодаОтправленные.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения Тогда
									ВыбранИнтервалБезОграниченияИсходящие = Истина;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						ДатаНачалаИсходящие=	НастройкаПериодаОтправленные.ДатаНачала;
						ДатаОкончанияИсходящие=	НастройкаПериодаОтправленные.ДатаОкончания;
						СохранитьЗначение("ДиадокНастройкаПериодаОтправленные", НастройкаПериодаОтправленные);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель1УстановитьИнтервал(Кнопка)
			
			НастройкаПериода=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВосстановитьНастройкуПериода(ТекущаяДата(), ТекущаяДата(), "ДиадокНастройкаПериодаПолученные");
			Если НастройкаПериода.Редактировать() Тогда 
				 				
				Если НастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.БезОграничения И НастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения Тогда
					ВыбранИнтервалБезОграниченияВходящие = Истина;
				Иначе
					ВыбранИнтервалБезОграниченияВходящие = Ложь;
				КонецЕсли;
				
				СохранитьЗначение("ДиадокНастройкаПериодаПолученные", НастройкаПериода);
				
				Если ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.Настройки Тогда 
					Если Кнопка.Имя = "УстановитьИнтервалПолученные" Тогда
						ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ;
					Иначе 	
						ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ;
					КонецЕсли;
				КонецЕсли;	
				
				ДатаНачала = НастройкаПериода.ДатаНачала;
				ДатаОкончания = Настройкапериода.ДатаОкончания;
				
				ПанельРежимовПриСменеСтраницы("", Элементыформы.ПанельРежимов.ТекущаяСтраница);
				
			КонецЕсли;	
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель1УстановитьИнтервалИсходящие(Кнопка)

			НастройкаПериода=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВосстановитьНастройкуПериода(ТекущаяДата(), ТекущаяДата(), "ДиадокНастройкаПериодаОтправленные");
			Если НастройкаПериода.Редактировать() Тогда  
								
				Если НастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.БезОграничения И НастройкаПериода.ВариантОкончания = ВариантГраницыИнтервала.БезОграничения Тогда
					ВыбранИнтервалБезОграниченияИсходящие = Истина;
				Иначе
					ВыбранИнтервалБезОграниченияИсходящие = Ложь;
				КонецЕсли;
								
				СохранитьЗначение("ДиадокНастройкаПериодаОтправленные", НастройкаПериода);
				
				Если ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.Настройки Тогда 
					Если Кнопка.Имя = "УстановитьИнтервалПолученные" Тогда
						ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ

					Иначе 	
						ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ
					КонецЕсли;
				КонецЕсли;	
				
				ДатаНачалаИсходящие = НастройкаПериода.ДатаНачала;
				ДатаОкончанияИсходящие =  Настройкапериода.ДатаОкончания;
				
				ПанельРежимовПриСменеСтраницы("", Элементыформы.ПанельРежимов.ТекущаяСтраница);
				
			КонецЕсли;	

		КонецПроцедуры
		
		Процедура КоманднаяПанельАктивныеОтозватьЗапрос(Кнопка)
			
			ТекДанные = ЭлементыФормы.СписокАктивные.ТекущиеДанные;
			Если ТекДанные = Неопределено Тогда
				Предупреждение("Выберите контрагента.",, НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			Результат=	Модуль_РаботаССерверомДиадок.ОбработатьНажатиеКнопкиЗаблокировать(ТекДанные.ОбъектДД);
			Если Результат Тогда
				ТекДанные.ОбъектДД=			ТекДанные.ОбъектДД.Organization.GetCounteragentById(ТекДанные.ОбъектДД.Id);
				ТекДанные.ТекущийСтатус=	ТекДанные.ОбъектДД.GetStatus();
				СписокАктивныеПриАктивизацииСтроки(ЭлементыФормы.СписокАктивные);
			КонецЕсли;
			
			НачатьФормированиеЛентыСобытий();
			
		КонецПроцедуры
		
		Процедура КоманднаяПанельАктивныеПринять(Кнопка)
			
			ТекущиеДанные=	ЭлементыФормы.СписокАктивные.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите контрагента.",, НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			Результат=	Модуль_РаботаССерверомДиадок.ОбработатьНажатиеКнопкиПринять(ТекущиеДанные.ОбъектДД, ТекущиеДанные.ТекущийСтатус, ОрганизацияСсылка);
			Если Результат Тогда
				ТекущиеДанные.ОбъектДД=			ТекущиеДанные.ОбъектДД.Organization.GetCounteragentById(ТекущиеДанные.ОбъектДД.Id);
				ТекущиеДанные.ТекущийСтатус=	ТекущиеДанные.ОбъектДД.GetStatus();
				СписокАктивныеПриАктивизацииСтроки(ЭлементыФормы.СписокАктивные);
			КонецЕсли;
			
			НачатьФормированиеЛентыСобытий();
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель3кнопка(Кнопка)
			//ЭтотОБъект.ПолучитьФорму("МассовоеСохранение", ЭтаФорма).ОткрытьСписок(ТаблицаДокументовВходящих  );
		КонецПроцедуры
		
		Процедура КоманднаяПанельСкладыУдалить(Кнопка)
			Если ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,"");
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,"");
			СформироватьТаблицуСкладовСПодразделениямиИзДиадок();
		КонецПроцедуры
		
		Процедура КоманднаяПанель3Обновить(Кнопка) Экспорт
			
			НачатьОбновлениеСпискаДокументов();
			СохранитьЗначение("ТипыДокументовОсновнаяФормаДиадок", ТипыДокументов);
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель5ОтправитьВДиадок(Кнопка)
			формаВыгрузки = этотОбъект.ПолучитьФорму("ФормаВыгрузки", ЭтаФорма);
			формавыгрузки.ЗакрыватьПриЗакрытииВладельца = Истина;
			формаВыгрузки.НачатьВыгрузку(Новый Структура("Организация", ОрганизацияСсылка));
		КонецПроцедуры
		
		Процедура КоманднаяПанель2Добавить(Кнопка)
			
			фрм = ПолучитьМодульПрог("Модуль_Организации_Форма_Сопоставление");
			фрм.ВладелецФормы = ЭтаФорма;
			фрм.ОткрытьМодально();
			
			//обновим контекст диадок
			Модуль_РаботаССерверомДиадок.ИнициализироватьКонтекстДиадока();
			Модуль_РаботаССерверомДиадок.ИнициализироватьMagic();
			
			ОбновитьДанныеСтраницынастроек();
			
			Оповестить("ИзменениеСертификата", , ЭтаФорма);
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель2Удалить(Кнопка)
			
			Если Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если ОрганизацияСсылка = Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация Тогда
				ОрганизацияПредставление = "Все";
				ОрганизацияID = "";
				ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_BoxID_для_Организация(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация, "", "");
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация, "ДиадокИдентификаторЭДОДляОрганизации", "");
			Модуль_РаботаССерверомДиадок.УдалитьОрганизациюИзКонтекста(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация);
			ОбновитьДанныеСтраницынастроек();
			
			Оповестить("ИзменениеСертификата", , ЭтаФорма);
			
		КонецПроцедуры
		
		Процедура КоманднаяПанельАктивныеДействие2(Кнопка)
			СписокАктивныеПередНачаломИзменения("", "");
		КонецПроцедуры
		
		Процедура КоманднаяПанельАктивныеДобавить(Кнопка)
			//откроем форму подбора 
			СтандартнаяОбработка = Ложь;
			СохранитьЗначение("КомментарийПриглашенияКонтрагентаДиадок", "");
			КонтрагентТмп = ПолучитьФорму("ФормаВыбораКонтрагента", Этаформа).ВыбратьКонтрагента(Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ОрганизацияССылка), , Истина);
			
		КонецПроцедуры
		
		Процедура КоманднаяПанельАктивныеПоискИПриглашение(Кнопка)
			
			ПолучитьФорму("ФормаПоискаИПриглашенияКонтрагентов", ЭтаФорма).Открыть();
			
		КонецПроцедуры
		
		Процедура КнопкаПоказатьЛентуНажатие(Элемент)
			
			Если ЭлементыФормы.ПанельЛентаСобытий.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
				УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельЛентаСобытий, РежимСверткиЭлементаУправления.Право);
				ЭлементыФормы.КнопкаПоказатьЛенту.Заголовок=	"<";
				ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокРежимСверткиЛентыСобытий", "Право");
			Иначе
				УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельЛентаСобытий, РежимСверткиЭлементаУправления.Нет);
				ЭлементыФормы.КнопкаПоказатьЛенту.Заголовок=	">";
				ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокРежимСверткиЛентыСобытий", "Нет");
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КнопкаСтраницыОбработкаЭСФНажатие(Элемент)
			
			ВыделитьКнопкуТекущейСтраницы(Элемент);
			ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОбработкаЭСФ;
			
		КонецПроцедуры
		
		Процедура КнопкаСтраницыОтправленныеЭСФНажатие(Элемент)
			
			ВыделитьКнопкуТекущейСтраницы(Элемент);
			ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ОтправленныеЭСФ;
			
		КонецПроцедуры
		
		Процедура КнопкаСтраницыПереданныеНаПодписьНажатие(Элемент)
			
			ВыделитьКнопкуТекущейСтраницы(Элемент);
			ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.ПереданныеНаПодпись;
			
		КонецПроцедуры
		
		Процедура КнопкаСтраницыКонтрагентыНажатие(Элемент)
			
			ВыделитьКнопкуТекущейСтраницы(Элемент);
			ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.Контрагенты;
			
		КонецПроцедуры
		
		Процедура КнопкаСтраницыНастройкаНажатие(Элемент)
			
			ВыделитьКнопкуТекущейСтраницы(Элемент);
			ЭлементыФормы.ПанельРежимов.ТекущаяСтраница = ЭлементыФормы.ПанельРежимов.Страницы.Настройки;
			
		КонецПроцедуры
		
		Процедура ПодключаемаяКоманда(Кнопка)
			
			ОбработкаСобытияПодключаемогоМодуля("ПодключаемаяКоманда", Новый Структура("Форма, ИмяФормы, Кнопка", ЭтаФорма, "Форма_Основная", Кнопка));
			
		КонецПроцедуры
		
	//} ДЕЙСТВИЯ ФОРМЫ
	
	//{ ОБРАБОТЧИКИ СОБЫТИЙ
		
		Процедура ДеревоПочтовыхЯщиковПередНачаломИзменения(Элемент, Отказ)
			
			Отказ = Истина;
			КоманднаяПанель2ПараметрыОтправки("");
			
		КонецПроцедуры
		
		Процедура ДеревоПочтовыхЯщиковПередУдалением(Элемент, Отказ)
			попытка 
				КоманднаяПанель2Удалить("");
				отказ = Истина;
			исключение 
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки())
			КонецПопытки;	
		КонецПроцедуры
		
		Процедура ДеревоПочтовыхЯщиковПередНачаломДобавления(Элемент, Отказ, Копирование)
			отказ = Истина;
			КоманднаяПанель2Добавить("");
		КонецПроцедуры
		
		Процедура ДеревоПочтовыхЯщиковПриПолученииДанных(Элемент, ОформленияСтрок)
			
			ОтображатьФорматДокументовНаОтправку = ЭлементыФормы.ДеревоПочтовыхЯщиков.Колонки.ФорматДокументовНаОтправку.Видимость;
			
			Если ОтображатьФорматДокументовНаОтправку Тогда
				
				ОрганизацииВ1С = Новый Массив;
				
				Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
					ОрганизацииВ1С.Добавить(ОформлениеСтроки.ДанныеСтроки.Организация);
				КонецЦикла;
				
				КэшФорматДокументовНаОтправку = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначенияСвойстваОбъектов(ОрганизацииВ1С, "ДиадокФормироватьУПД");
				
			КонецЕсли;
			
			Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
				
				Если ОформлениеСтроки.ДанныеСтроки.ЭтоРодитель Тогда
					ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
				КонецЕсли;
		
				Если ОтображатьФорматДокументовНаОтправку Тогда
					
					ФорматДокументовНаОтправку = КэшФорматДокументовНаОтправку[ОформлениеСтроки.ДанныеСтроки.Организация];
					
					ОформлениеСтроки.Ячейки.ФорматДокументовНаОтправку.УстановитьТекст(ФорматДокументовНаОтправкуПредставление(ФорматДокументовНаОтправку));
					
					Если ФорматДокументовНаОтправкуУстаревшийФормат(ФорматДокументовНаОтправку) Тогда
						ОформлениеСтроки.Ячейки.ФорматДокументовНаОтправку.ЦветТекста = WEBЦвета.Красный;
					КонецЕсли;
					
				КонецЕсли;
				
				//заблокированные по API организации отображаем серым цветом
				Если ОформлениеСтроки.ДанныеСтроки.Заблокирована Тогда 
					ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
					ОформлениеСтроки.Ячейки.Заблокирована.Текст = "Оплатите модуль";
					ОформлениеСтроки.Ячейки.Заблокирована.ЦветТекста = WEBЦвета.Красный;
				Иначе 
					ОформлениеСтроки.Ячейки.Заблокирована.Текст = "Оплачено";
					ОформлениеСтроки.Ячейки.Заблокирована.Гиперссылка = Ложь;
				КонецЕсли;
		
			КонеЦцикла;	
			
		КонецПроцедуры
		
		Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
			Если	 ИмяСобытия = "ОбновитьФормуДиадок"
				И 	(ЭлементыФормы.ПанельРежимов.ТекущаяСтраница.Имя = "ОбработкаЭСФ"
				ИЛИ  ЭлементыФормы.ПанельРежимов.ТекущаяСтраница.Имя = "ОтправленныеЭСФ") Тогда 
			
				ПанельРежимовПриСменеСтраницы("", ЭлементыФормы.ПанельРежимов.ТекущаяСтраница);
				
			ИначеЕсли ИмяСобытия = "ОбновитьСтроку" Тогда 
				
				// Параметр - ЭДОбъект
				ОбновитьСтрокуДокумента(Параметр);
				
			ИначеЕсли ИмяСобытия = "ОбновитьСписокКААктивныеВсяТаблица" Тогда
				
				ОбновитьСписокКонтрагентов();
				
			ИначеЕсли ИмяСобытия = "ОбновитьСписокКААктивныеСтрокаКА"
				  ИЛИ ИмяСобытия = "ОбновитьСписокКАОжидаетсяОтветОтВсяТаблица" Тогда
				  
				ОбновитьКАВ1С(СписокАктивные, Параметр);
				//ИначеЕсли ИмяСобытия = "ОбновитьСписокКАОжидаетсяОтветОтСтрокаКА" Тогда
				//	ОбновитьКАВ1С(СписокОжидаетсяОтветОтКонтрагента, Параметр)
				
			ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С" Тогда
				
				Если Параметр.ТипСущности = "Документ" Тогда
					ОбновитьСтрокуДокумента(Параметр.СсылкаДД);
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ИзменениеДокумента1С" Тогда 
				
				ОбновитьСтрокуДокумента(Параметр);
				
			ИначеЕсли ИмяСобытия = "ОтправкаЗапросаКонтрагенту" Тогда
				
				ОбработатьЗапросКонтрагенту(Параметр);
				
			ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
				
				Если Параметр.Количество()<>0 Тогда
					ОбновитьСписокДокументов();		
				КонецЕсли;
				
			ИначеЕсли ИмяСобытия = "ПеревыставлениеДокумента" Тогда
				
				ОбновитьСписокДокументов();		
				
			КонецЕсли;
			
		КонецПроцедуры
		
	//} ОБРАБОТЧИКИ СОБЫТИЙ
	
//} ФУНКЦИИ УПРАВЛЕНИЯ ФОРМОЙ

//{ ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	Процедура ПоискИПриглашениеКонтрагентов_Запуск(АктивацияКонтрагентов) Экспорт
		
		ТекущаяДата= ТекущаяДата();
		МассивОрганизаций1С= Новый Массив;
		
		ТаблицаЯщиков= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЯщиков Цикл
			
			Если ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(СтрокаТаблицы.Объект, "ДиадокПриглашенияДатаНапоминания", '00010101') < ТекущаяДата Тогда
				МассивОрганизаций1С.Добавить(СтрокаТаблицы.Объект);
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаЯщиков= Неопределено;
		
		Если МассивОрганизаций1С.Количество() > 0 Тогда
			
			Если ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ДобавитьМесяц(ТекущаяДата, -3)) Тогда
				
				НоваяФорма= ПолучитьФорму("ФормаПоискаИПриглашенияКонтрагентов_Запуск",,ЭтаФорма);
				
				НоваяФорма.АктивацияКонтрагентов= АктивацияКонтрагентов;
				
				НоваяФорма.Открыть();
				
			Иначе
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьПриглашенияДатаНапоминания(МассивОрганизаций1С, ДобавитьМесяц(ТекущаяДата, 1));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры

	Функция УспешноДобавленыЯщикиДиадок()
		
		фрм = ПолучитьФорму("Модуль_Организации_Форма_Сопоставление");
		фрм.ВладелецФормы = ЭтаФорма;
		фрм.ОткрытьМодально();
		
		Если НЕ фрм.естьрезультат Тогда 
			
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследнийСертификатПользователя", "");
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследнееПредставлениеПользователя", "");
			
			Возврат Ложь;
			
		Иначе 	
			
			//обновим контекст диадок
			Модуль_РаботаССерверомДиадок.ИнициализироватьКонтекстДиадока();
			Модуль_РаботаССерверомДиадок.ИнициализироватьMagic();
			
			ОбновитьДанныеСтраницынастроек();
						
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецФункции
	
	Процедура НачатьФормированиеЛентыСобытий()
		
		Модуль_РаботаССерверомДиадок.ЗапуститьПолучениеСписковКонтрагентов();
		ПодключитьОбработчикОжидания("ОбработатьСобытияПоКонтрагенту", 0.1, Истина);
		
	КонецПроцедуры

	Процедура ОбработатьСобытияПоКонтрагенту()
		
		СпискиПолучены=	Модуль_РаботаССерверомДиадок.СпискиПолучены();
		Если СпискиПолучены = Истина Тогда
			
			ЕстьНовыеСобытия=			Модуль_РаботаССерверомДиадок.ЕстьНовыеСобытия();
			РежимСверткиЛентыСобытий=	ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокРежимСверткиЛентыСобытий");
			
			РезультатФормированияЛенты = Модуль_РаботаССерверомДиадок.СформироватьHTMLПредставлениеЛенты();
			ДокументHTMLЛента=	РезультатФормированияЛенты.HTMLДокумент;
			КоличествоПриглашений = РезультатФормированияЛенты.КоличествоПриглашений;
			КоличесствоНовыхПриглашений = РезультатФормированияЛенты.КоличесствоНовыхПриглашений;
			
			ЭлементыФормы.ПолеHTMLЛента.УстановитьТекст(ДокументHTMLЛента);
			Если ЗафиксированыСобытияОткрытияФормы = ложь Тогда 
				ЗафиксироватьСобытиеGA("Форма_Основная",  "entrance", , Истина);
			КонецЕсли;
			
			Если (ЗафиксированыСобытияОткрытияФормы = ложь) и (КоличествоПриглашений>0) Тогда 
				  ЗафиксироватьСобытиеGA("Форма_Основная",  "there-is-invitation",КоличествоПриглашений );
			КонецЕсли;	
			
			Если ЕстьНовыеСобытия = Истина ИЛИ РежимСверткиЛентыСобытий = "Нет" Тогда
				УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельЛентаСобытий, РежимСверткиЭлементаУправления.Нет);
				ЭлементыФормы.КнопкаПоказатьЛенту.Заголовок=	">";
				если  (ЗафиксированыСобытияОткрытияФормы = ложь) и (КоличесствоНовыхПриглашений>0) тогда
				  ЗафиксироватьСобытиеGA("Форма_Основная",  "показаны-новые-приглашения",КоличесствоНовыхПриглашений );
				конецЕсли;  
			КонецЕсли;
			
            ЗафиксированыСобытияОткрытияФормы = Истина;
		Иначе
			ПодключитьОбработчикОжидания("ОбработатьСобытияПоКонтрагенту", 0.1, Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПолеHTMLЛентаonclick(Элемент, pEvtObj)
		
		pEvtObj.returnValue = Ложь;
		Попытка
			ТекстСсылки=	pEvtObj.srcElement.parentElement.document.URLUnencoded;
			Если ТекстСсылки = "about:blank" Тогда
				Возврат;
			КонецЕсли;
			ТекстСсылки = стрЗаменить(pEvtObj.srcElement.parentElement.document.URLUnencoded, "about:", "");
			ТекстСсылки = стрЗаменить(ТекстСсылки, "blank", "");
			ТекстСсылки = стрЗаменить(ТекстСсылки, "#", "");
		Исключение 
			Возврат;
		КонецПопытки;
		
		Модуль_РаботаССерверомДиадок.ОбработатьДействиеЛенты(ТекстСсылки);
		ПодключитьОбработчикОжидания("ОбработатьСобытияПоКонтрагенту", 0.1, Истина);
		
	КонецПроцедуры
	
	Процедура ВыделитьКнопкуТекущейСтраницы(КнопкаТекущейСтраницы = Неопределено)
		
		Если КнопкаТекущейСтраницы = Неопределено Тогда
			КнопкаТекущейСтраницы = ЭлементыФормы["КнопкаСтраницы" + ЭлементыФормы.ПанельРежимов.ТекущаяСтраница.Имя];
		КонецЕсли;
		
		КнопкиСтраниц = Новый Массив;
		КнопкиСтраниц.Добавить(ЭлементыФормы.КнопкаСтраницыОбработкаЭСФ);
		КнопкиСтраниц.Добавить(ЭлементыФормы.КнопкаСтраницыОтправленныеЭСФ);
		КнопкиСтраниц.Добавить(ЭлементыФормы.КнопкаСтраницыПереданныеНаПодпись);
		КнопкиСтраниц.Добавить(ЭлементыФормы.КнопкаСтраницыКонтрагенты);
		КнопкиСтраниц.Добавить(ЭлементыФормы.КнопкаСтраницыНастройка);
		
		Для Каждого КнопкаСтраницы Из КнопкиСтраниц Цикл
			
			Если НЕ КнопкаСтраницы.Видимость Тогда
				КнопкаСтраницы.Видимость = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КнопкаТекущейСтраницы.Видимость = Ложь;
		
	КонецПроцедуры
	
//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ТаблицаДокументовИсходящихПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого стр из ОформленияСтрок цикл 
		Если НЕ ТипЗнч(стр.ДанныеСтроки) = Тип("СтрокаТаблицыЗначений") Тогда //если открыт документ из таблицы "Исходящие на согласование" и выполнен переход на вкладку "Полученные через Диадок", платформа подсовывает соответствующую строку из этой ТЗ
			ЭДОбъект=	ПолучитьЭДОбъектИзКэша(стр.ДанныеСтроки.BoxID, стр.ДанныеСтроки.DocumentID);
			ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(стр, ЭДОбъект);
		КонецЕсли;
	Конеццикла;

КонецПроцедуры

Процедура ТаблицаДокументовВходящихПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого стр из ОформленияСтрок цикл
		Если НЕ ТипЗнч(стр.ДанныеСтроки) = Тип("СтрокаТаблицыЗначений") Тогда //если открыт документ из таблицы "Исходящие на согласование" и выполнен переход на вкладку "Отправленные через Диадок", платформа подсовывает соответствующую строку из этой ТЗ
			ЭДОбъект=	ПолучитьЭДОбъектИзКэша(стр.ДанныеСтроки.BoxID, стр.ДанныеСтроки.DocumentID);
			ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(стр, ЭДОбъект);
		КонецЕсли;
	Конеццикла;
	
КонецПроцедуры

Процедура ТаблицаДокументовНаПодписанииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого стр из ОформленияСтрок цикл 
		ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(стр, стр.ДанныеСтроки.ЭДОбъект);
	Конеццикла;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруЭлементовФормыВСоответствииСНастройкамиОбработкиДокументов()
	
	ЗначениеНастройки_ДиадокНастройкиПрокси = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокНастройкиПрокси"); 
	
	Если НЕ ЗначениеЗаполнено(ЗначениеНастройки_ДиадокНастройкиПрокси)
		ИЛИ (НЕ ЗначениеНастройки_ДиадокНастройкиПрокси = "ИспользоватьПроксиСервер" 
			И НЕ ЗначениеНастройки_ДиадокНастройкиПрокси = "НеИспользовать"
			И НЕ ЗначениеНастройки_ДиадокНастройкиПрокси = "ИспользоватьНастройкиIE") Тогда
		ПараметрыНастроекПрокси  = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыНастроекПроксиДляДиадок();
		Если  ЗначениеЗаполнено(ПараметрыНастроекПрокси.АдресПроксиСервера) Тогда
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокНастройкиПрокси","ИспользоватьПроксиСервер");
		Иначе
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокНастройкиПрокси","ИспользоватьНастройкиIE");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////
// Методы элементов формы. Список документов

Функция ТекущаяФормаСписка()
	Если  Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ПереданныеНаПодпись Тогда
		Возврат ЭлементыФормы.ТаблицаДокументовНаПодписании
	Иначе	
		Возврат ?(Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ОтправленныеЭСФ, ЭлементыФормы.ТаблицаДокументовИсходящих, ЭлементыФормы.ТаблицаДокументовВходящих);
	КонецЕсли;	
КонецФункции	

Функция ТекущаяТаблица()
	Если  Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ПереданныеНаПодпись Тогда
		Возврат ТаблицаДокументовНаПодписании
	Иначе	
		Возврат ?(Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ОтправленныеЭСФ, ТаблицаДокументовИсходящих, ТаблицаДокументовВходящих);
	КонецЕсли;
КонецФункции

Процедура ПриОткрытииСтраницыСпискаДокументов()
	
	НачатьОбновлениеСпискаДокументов();
	
КонецПроцедуры	
 
Процедура ОбновитьНадписьПояснения()

	ПериодВыборки = ВосстановитьТекущуюНастройкуПериода();
	
	Если Элементыформы.ПанельРежимов.ТекущаяСтраница = Элементыформы.ПанельРежимов.Страницы.ПереданныеНаПодпись Тогда
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Исходящие документы, ожидающие согласования и отправки";
	Иначе
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Документы, " + НРег(ПолучитьПредставлениеНаправления()) + " через " + НаименованиеСистемы + " ("
		+ ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПредставлениеПериодаДД(ПериодВыборки.ДатаНачала, ПериодВыборки.ДатаОкончания) + ")";
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОбновлениеСпискаДокументов()
	
	Элементыформы.ПанельОбновлениеИсходящих.Видимость = Истина;
	Элементыформы.ПанельОбновлениеВходящих.Видимость = Истина;
	ЭлементыФормы.ПанельОбновлениеПереданныхНаПодпись.Видимость = Истина;
	ДатаВыводаЛайтбокса = ТекущаяДата();
	ТекСписок = ТекущаяФормаСписка();	
	
	ПодключитьОбработчикОжидания("ОбновитьСписокДокументов", 0.1, Истина);
	
КонецПроцедуры

Процедура ОбновитьСтрокуДокумента(ЭДОбъект)
	
	масТЗ = Новый Массив;
	масТЗ.Добавить(ТаблицаДокументовВходящих);
	масТЗ.Добавить(ТаблицаДокументовИсходящих);
	масТЗ.Добавить(ТаблицаДокументовНаПодписании);
	Для каждого тз Из масТЗ Цикл
		Если ТЗ.Количество()=0 Тогда 
			продолжить
		КонецЕсли;	
		стОтбора = Новый Структура("BoxId, DocumentId", ЭДОбъект.OrganizationId, ЭДОбъект.DocumentId);
		строки = тз.НайтиСтроки(стОтбора);
		Если строки.Количество() > 0 Тогда
			строкаТабличногоПоля = строки[0];
			Попытка 
				Модуль_РаботаССерверомДиадок.ЗаполнитьСтрокуТаблицыДокумента(ЭДОбъект, строкаТабличногоПоля);
				
				ОбновитьDocumentВТаблицеКэшЭДОбъектов(ЭДОбъект);
				
				ОформлениеСтроки = ТекущаяФормаСписка().ОформлениеСтроки(строкаТабличногоПоля);
				ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(ОформлениеСтроки, ЭДОбъект);
				                           
			Исключение 
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
				Возврат
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;
	
	НадписьРасшифровкаОшибокВходящих_СкрытьПоказать();
	НадписьРасшифровкаОшибокИсходящих_СкрытьПоказать();

КонецПроцедуры

Процедура ОбновитьDocumentВТаблицеКэшЭДОбъектов(Document)
	
	СтруктураОтбора = Новый Структура("BoxId, DocumentId", Document.OrganizationId, Document.DocumentId);
	
	МассивНайденныеСтроки = КэшЭДОбъектов.НайтиСтроки(СтруктураОтбора);
	
	Если МассивНайденныеСтроки.Количество()>0 Тогда
		
		ОбновляемаяСтрока = МассивНайденныеСтроки[0];
		ОбновляемаяСтрока.ЭДОбъект = Document;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВосстановитьТекущуюНастройкуПериода()
	
	Направление = ПолучитьЗначениеНаправления();
	Если Направление = "Inbound" Тогда
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	Иначе
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаИсходящие, ДатаОкончанияИсходящие);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеНаправления()
	Если Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ПереданныеНаПодпись Тогда 
		Возврат "НаПодписании"
	Иначе 	
		Возврат ?(Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ОтправленныеЭСФ, "Outbound", "Inbound");
	КонецЕсли;	
КонецФункции

Функция ПолучитьПредставлениеНаправления()
	Возврат ?(Элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.ОтправленныеЭСФ, "Отправленные", "Полученные");
КонецФункции

Процедура СписокНаправленийПриИзменении(Элемент)
	Если Элемент.имя  = "СписокДокументооборота"   Тогда 
		Если СписокДокументооборота =21 Тогда 
	//		Элементыформы.СписокДокументооборота. = "Согласовано"
		КонецЕсли;
	КонецЕсли;	
	НачатьОбновлениеСпискаДокументов() 
КонецПроцедуры

Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь; 
	Если элементыформы.ПанельРежимов.ТекущаяСтраница = элементыформы.ПанельРежимов.Страницы.Контрагенты Тогда 
		//выбираем из списка организаций
		стОрганизация = ПолучитьФорму("ФормаВыбораОрганизацииДиадок").ВыбратьОрганизациюДиадок(ОрганизацияID);
		Если стОрганизация <> Неопределено Тогда
			ОрганизацияПредставление = стОрганизация.Наименование;
			ОрганизацияID = стОрганизация.ID;
			ОрганизацияСсылка = стОрганизация.ОрганизацияСсылка;
			ПодразделениеID = "";
			ПанельРежимовПриСменеСтраницы("", "", Истина);
		Иначе
			Если ОрганизацияПредставление = "Все" Тогда
				ЭлементыФормы.КоманднаяПанельАктивные.Видимость = Ложь;
				ЭлементыФормы.СписокАктивные.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	иначе	

		стОрганизация = ПолучитьФорму("ФормаВыбораОрганизацииПодразделения").ВыбратьОрганизациюИПодразделениеДиадок(ОрганизацияID, ПодразделениеID, Истина);
		Если стОрганизация <> Неопределено Тогда
			ОрганизацияПредставление = стОрганизация.Наименование;
			ОрганизацияID = стОрганизация.ID;
			ОрганизацияСсылка = стОрганизация.ОрганизацияСсылка;
			ПодразделениеID = стОрганизация.DepartmentID;
			ПодразделениеПредставление = стОрганизация.ПредставлениеПодразделения;
			ВключатьПодчиненныеПодазделения = стОрганизация.ВключатьПодчиненныеПодазделения ;
			Если ЗначениеЗаполнено(ПодразделениеID) И ЗначениеЗаполнено(ПодразделениеПредставление) Тогда
				ОрганизацияПредставление = ОрганизацияПредставление + " ("+?(ВключатьПодчиненныеПодазделения, "", "только ") + ПодразделениеПредставление + ")";
			ИначеЕсли ВключатьПодчиненныеПодазделения = Ложь Тогда
				ОрганизацияПредставление = ОрганизацияПредставление + " (только головное подразделение)";
			КонецЕсли;	 
			ПанельРежимовПриСменеСтраницы("", "", Истина);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры
                     
Процедура ОчиститьФильтрОрганизация()
	ОрганизацияПредставление = "Все"; 
	ОрганизацияID = "";
	ОрганизацияСсылка = Неопределено;
	ПодразделениеID = "";
	ВключатьПодчиненныеПодазделения = Истина;
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь;
	ОчиститьФильтрОрганизация();
	ПанельРежимовПриСменеСтраницы("", "");
КонецПроцедуры

Процедура КоманднаяПанельСФОтправленныеОткрытьКарточкуДокумента(Кнопка)
	
	Если  ТекущаяФормаСписка().текущаястрока = Неопределено Тогда
		Предупреждение("Выберите документ.",, НаименованиеСистемы);
		Возврат
	КонецЕсли;
	
	Направление = ПолучитьЗначениеНаправления();
	
	текущаяСтрока=	ТекущаяФормаСписка().текущаяСтрока;
	Если ТекущаяФормаСписка().Имя = "ТаблицаДокументовНаПодписании" Тогда
		ЭДОбъект=	текущаяСтрока.ЭДОбъект;
	Иначе
		ЭДОбъект=	ПолучитьЭДОбъектИзКэша(текущаяСтрока.BoxID, текущаяСтрока.DocumentID);
	КонецЕсли;
	
	ПолучитьФорму("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(ЭДОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ТаблицаДокументовПередНачаломИзменения(Элемент, Отказ)
	КоманднаяПанельСФОтправленныеОткрытьКарточкуДокумента("");
	отказ = Истина;
КонецПроцедуры

Процедура ТаблицаДокументовИсходящихПередНачаломИзменения(Элемент, Отказ)
	КоманднаяПанельСФОтправленныеОткрытьКарточкуДокумента("");
	Отказ = Истина;
КонецПроцедуры

Процедура ТаблицаДокументовВходящих_ПриАктивизацииСтроки(Элемент)
	
	НадписьРасшифровкаОшибокВходящих_СкрытьПоказать();
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящих_ПриАктивизацииСтроки(Элемент)
	
	НадписьРасшифровкаОшибокИсходящих_СкрытьПоказать();
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящихПередУдалением(Элемент, Отказ)
	отказ = Истина;
КонецПроцедуры

Процедура ТаблицаДокументовИсходящихПередУдалением(Элемент, Отказ)
	отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанельСФПолученныеСохранитьДокументы(Кнопка)
	
	Если Кнопка.Имя = "СохранитьДокументыИсходящие" Тогда
		
		КолонкаПокупатель = ТаблицаДокументовИсходящих.ВыгрузитьКолонку("Покупатель");
		КолонкаПродавец = ТаблицаДокументовИсходящих.ВыгрузитьКолонку("Продавец");
		
		НоваяТаблицаИсходящих=	ТаблицаДокументовИсходящих.ВыгрузитьКолонки();
		НоваяТаблицаИсходящих.Колонки.Добавить("ЭДОбъект");
		
		Для каждого СтрокаТаблицыИсходящих Из ТаблицаДокументовИсходящих Цикл
			СтрокаНовойТаблицы=	НоваяТаблицаИсходящих.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыИсходящих);
			СтрокаНовойТаблицы.ЭДОбъект=	ПолучитьЭДОбъектИзКэша(СтрокаНовойТаблицы.BoxID, СтрокаНовойТаблицы.DocumentID);
		КонецЦикла;
		
		НоваяТаблицаИсходящих.ЗагрузитьКолонку(КолонкаПокупатель, "Продавец");
		НоваяТаблицаИсходящих.ЗагрузитьКолонку(КолонкаПродавец, "Покупатель");
		
	КонецЕсли;
		
	МассоваяОбработка = ЭтотОбъект.ПолучитьФорму("МассоваяОбработкаДокументов", ЭтаФорма);
	МассоваяОбработка.ЭлементыФормы.ПолеВыбораДействия.Доступность	= Ложь;
	МассоваяОбработка.ЭлементыФормы.ПолеВыбораСценарий.Доступность	= Ложь;
	
	СтруктураТаблицыДокументов = Новый Структура("ТаблицаДокументовВходящие", НоваяТаблицаИсходящих);
	МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("СохранитьНаДиск", СтруктураТаблицыДокументов);
		
КонецПроцедуры

Процедура ТаблицаДокументовИсходящихПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПакета(Элемент, ОформлениеСтроки, ДанныеСтроки);
		
КонецПроцедуры

Процедура ТаблицаДокументовВходящихПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПакета(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаДокументовНаПодписанииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПакета(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ПриВыводеСтрокиПакета(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ИндексИконкиПакета > 0 Тогда
		ОформлениеСтроки.Ячейки.КартинкаДокументаВПакете.ОтображатьКартинку= Истина;
		ОформлениеСтроки.Ячейки.КартинкаДокументаВПакете.ИндексКартинки= ДанныеСтроки.ИндексИконкиПакета;
	КонецЕсли;
	
	Если НЕ Элемент.ТекущаяСтрока = Неопределено Тогда
		MessageId = Элемент.ТекущаяСтрока.MessageId;
		Если ДанныеСтроки.MessageId = MessageId Тогда
			Для каждого ЯчейкаСтроки из ОформлениеСтроки.Ячейки Цикл
				Если НЕ ЯчейкаСтроки.Имя = "КартинкаДокументаВПакете" Тогда
					ЯчейкаСтроки.ЦветФона = Новый Цвет(255, 240, 230);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура НадписьРасшифровкаОшибокВходящих_СкрытьПоказать()
	
	ТекущиеДанные= ЭлементыФормы.ТаблицаДокументовВходящих.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибки) Тогда
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьРасшифровкаОшибокВходящих, РежимСверткиЭлементаУправления.Нет, Ложь);
		ЭлементыФормы.НадписьРасшифровкаОшибокВходящих.Заголовок= ТекущиеДанные.ТекстОшибки;
	Иначе
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьРасшифровкаОшибокВходящих, РежимСверткиЭлементаУправления.Низ, Ложь);
		ЭлементыФормы.НадписьРасшифровкаОшибокВходящих.Заголовок= "";
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьРасшифровкаОшибокИсходящих_СкрытьПоказать()
	
	ТекущиеДанные= ЭлементыФормы.ТаблицаДокументовИсходящих.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибки) Тогда
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьРасшифровкаОшибокИсходящих, РежимСверткиЭлементаУправления.Нет, Ложь);
		ЭлементыФормы.НадписьРасшифровкаОшибокИсходящих.Заголовок= ТекущиеДанные.ТекстОшибки;
	Иначе
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьРасшифровкаОшибокИсходящих, РежимСверткиЭлементаУправления.Низ, Ложь);
		ЭлементыФормы.НадписьРасшифровкаОшибокИсходящих.Заголовок= "";
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////////////////
/////////////////Обработка страницы настройки параметров 
/////////////////////////////////////////////////////////////////////////

Процедура НастроитьВидимостьПанелиПрокси(ИспользоватьПроксиСервер)
	ЭлементыФормы.АдресПроксиСервера.Доступность 				= ИспользоватьПроксиСервер;
	Элементыформы.ПортПроксиСервера.Доступность  				= ИспользоватьПроксиСервер;
	ЭлементыФормы.ЛогинПроксиСервера.Доступность 				= ИспользоватьПроксиСервер;
	ЭлементыФормы.ПарольПроксиСервера.Доступность 				= ИспользоватьПроксиСервер;
	Элементыформы.НадписьАдресПроксиСервера.Доступность      	= ИспользоватьПроксиСервер;
	Элементыформы.НадписьПортПроксиСервера.Доступность		 	= ИспользоватьПроксиСервер;
	Элементыформы.НадписьПарольПроксиСервера.Доступность    	= ИспользоватьПроксиСервер;
	Элементыформы.НадписьЛогинПроксиСервера.Доступность      	= ИспользоватьПроксиСервер;
КонецПроцедуры	

Процедура СформироватьЗаголовокСтраницыНастроек()
	Если Элементыформы.ПанельНастроек.ТекущаяСтраница = Элементыформы.ПанельНастроек.Страницы.НастройкаПочтовыхЯщиковДиадок Тогда
	 	Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Сопоставление организаций 1С с организациями в "+НаименованиеСистемы;
	ИначеЕсли Элементыформы.ПанельНастроек.ТекущаяСтраница = Элементыформы.ПанельНастроек.Страницы.СоответствиеСкладов1С Тогда
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Настройка соответствия складов в 1С подразделениям в "+НаименованиеСистемы;
	ИначеЕсли Элементыформы.ПанельНастроек.ТекущаяСтраница = Элементыформы.ПанельНастроек.Страницы.СоответствиеПодразделений1С Тогда
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Настройка соответствия подразделений в 1С подразделениям в "+НаименованиеСистемы;
	ИначеЕсли Элементыформы.ПанельНастроек.ТекущаяСтраница = Элементыформы.ПанельНастроек.Страницы.НастройкаПрокси Тогда
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Настройка соединения";
	ИначеЕсли Элементыформы.ПанельНастроек.ТекущаяСтраница = Элементыформы.ПанельНастроек.Страницы.Опции Тогда
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Опции модуля";
	Иначе
		Элементыформы.НадписьПолученныеСчетаФактуры1.Заголовок = "Настройка работы модуля";
	КонецЕсли;	
КонецПроцедуры	

Функция ПолучитьНастройкиОрганизации(Организация)

	НастройкиПечатныхФорм=	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Организация);
	
	НастройкиОрганизации = Новый Структура;
	
	НастройкиОрганизации.Вставить("НакладныеСТоварами"			, НастройкиПечатныхФорм.ФормаДляТоваров);
	НастройкиОрганизации.Вставить("НакладныеСУслугамиБезТоваров", НастройкиПечатныхФорм.ФормаДляУслуг);
	
	НастройкиОрганизации.Вставить("ОтправлятьНепроведенные"		, ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "ДиадокОтправкаНепроведенных", ""));
	НастройкиОрганизации.Вставить("ФормироватьУПД"				, ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "ДиадокФормироватьУПД"	   , "СФТОРГ12АКТ"));
	НастройкиОрганизации.Вставить("ШифроватьДокументы"			, ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "ДиадокШифроватьДокументы"   , "НЕТ"));
	
	НастройкиОрганизации.Вставить("ТекстКомментарияДиадок"		, ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТекстКомментарияДиадок(Организация));
	НастройкиОрганизации.Вставить("НастройкиВнешнихПечатныхФорм", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(Организация));
	НастройкиОрганизации.Вставить("ПредставлениеДопСертификата"	, ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПредставлениеДопСертификата(Организация));
	
	Возврат НастройкиОрганизации;
	
КонецФункции

Функция ЗаписатьнастройкиОрганизации(Организация, настройкиОрганизации)
	
	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьНастройкиДляОрганизацииДиадок(Организация, НастройкиОрганизации); 
	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьНастройкиВПФДляОрганизации(Организация, НастройкиОрганизации.НастройкиВнешнихПечатныхФорм);
	
КонецФункции	

Процедура ОбновитьДанныеСтраницыНастроек() 
	
	ДеревоПочтовыхЯщиков.Строки.Очистить();
	
	ИННРодителя=	"";
	КППРодителя=	"";
	Родитель=		Неопределено;
	
	СписокЯщиков = Модуль_РаботаССерверомДиадок.ПолучитьКонтекстДиадока();
	Для Каждого BoxInfo Из СписокЯщиков Цикл
		
		ИНН = BoxInfo.Box.INN;
		КПП = BoxInfo.Box.KPP;
		
		Если ИНН <> ИННРодителя Тогда
			Строка = ДеревоПочтовыхЯщиков.Строки.Добавить();
			ИННРодителя = ИНН;
			КППРодителя = КПП;
		Иначе
			НайденныеСтроки = ДеревоПочтовыхЯщиков.Строки.НайтиСтроки(Новый Структура("ИНН, КПП", ИННРодителя, КППРодителя), Истина);
			Строка = НайденныеСтроки[0].Строки.Добавить();
			НайденныеСтроки[0].ЭтоРодитель = Истина;
		КонецЕсли;
		
		Строка.Организация =		BoxInfo.Организация;
		Строка.наименованиеЯщика =	BoxInfo.Box.name;
		Строка.OrganizationId =		BoxInfo.BoxId;
		Строка.ИНН =				ИНН;
		Строка.КПП =				КПП;
		Строка.Заблокирована =		BoxInfo.ЗаблокированаПоAPI;
		Строка.ПредставлениеДопСертификата = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПредставлениеДопСертификата(BoxInfo.Организация);
		
	КонецЦикла;
	
	ОбновитьДанныеНастроекПроксиСервера();
	
	СформироватьЗаголовокСтраницыНастроек();
	
	СформироватьТаблицуСкладовСПодразделениямиИзДиадок();
	СформироватьСписокПодразделений1С_СПодразделениямиИзДиадок();
	
	СопоставлятьСкладыИПодразделенияДД  = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСопоставлятьСкладыИПодразделенияДД");
	
	Для каждого СтрокаДерева Из ДеревоПочтовыхЯщиков.Строки Цикл
		ЭлементыФормы.ДеревоПочтовыхЯщиков.Развернуть(СтрокаДерева);
	КонецЦикла;
	
	ФлажокРазрешитьНеструктурированныеАдреса = РазрешитьНеструктурированныеАдреса;
	
КонецПроцедуры 	

Процедура ОбновитьДанныеНастроекПроксиСервера()
	НастройкиПроксиЗначение = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокНастройкиПрокси");
	НастройкиПрокси= НастройкиПроксиЗначение;
	Если НастройкиПроксиЗначение = "ИспользоватьПроксиСервер"  Тогда
		ПараметрыНастроекПрокси  = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыНастроекПроксиДляДиадок();
		ИспользоватьПроксиСервер = ЗначениеЗаполнено(ПараметрыНастроекПрокси.АдресПроксиСервера);
		АдресПроксиСервера       = ПараметрынастроекПрокси.АдресПроксиСервера;
		
		Если найти(АдресПроксиСервера, ":")> 0 Тогда 
			ПортПроксиСервера = прав(АдресПроксиСервера, стрДлина(АдресПроксиСервера) -   найти(АдресПроксиСервера, ":"));
			АдресПроксиСервера = лев(АдресПроксиСервера, найти(АдресПроксиСервера, ":")-1);
		КонецЕсли;	
		
		ЛогинПроксиСервера       = ПараметрынастроекПрокси.ПользовательПроксиСервера;
		ПарольПроксиСервера      = ПараметрынастроекПрокси.ПарольПроксиСервера;
		НастроитьВидимостьПанелиПрокси(Истина);
	Иначе 
		НастроитьВидимостьПанелиПрокси(Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьТаблицуСкладовСПодразделениямиИзДиадок()
	ТаблицаСкладов.Очистить();
	ТаблицаСкладов= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуСвойствСкладов();
КонецПроцедуры

Процедура ПриОткрытииСтраницыНастрокиПараметров() 
	ОбновитьДанныеСтраницынастроек();
КонецПроцедуры	

Процедура СписокСертификатовПередНачаломИзменения(Элемент, Отказ)
	отказ = Истина;
	
	
КонецПроцедуры

Процедура ИспользоватьПроксиСерверПриИзменении(Элемент)
	НастроитьВидимостьПанелиПрокси(Истина)
КонецПроцедуры

Функция СоздатьСтруктуруПрокси(Адрес,Порт,Логин,Пароль) 
	стПрокси = Новый Структура("Адрес, Логин, Пароль");
	стПрокси.Адрес = Адрес+?(ЗначениеЗаполнено(Порт), ":"+Порт, "");
	стПрокси.Логин = Логин;
	стПрокси.Пароль = Пароль;
	Возврат стПрокси;
КонецФункции

Процедура СохранитьПараметрыПодключения()
	
	стПрокси = СоздатьСтруктуруПрокси(АдресПроксиСервера,ПортПроксиСервера,ЛогинПроксиСервера,ПарольПроксиСервера);	
	
	Модуль_РаботаССерверомДиадок.УстановитьНастройкиПрокси(стПрокси);
	
	ОбновитьДанныеНастроекПроксиСервера();
КонецПроцедуры

Процедура ПроверитьПараметрыПодключенияНажатие(Элемент)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Адрес",		АдресПроксиСервера + ?(ЗначениеЗаполнено(ПортПроксиСервера), ":" + ПортПроксиСервера, ""));
	СтруктураНастроек.Вставить("Логин",		ЛогинПроксиСервера);
	СтруктураНастроек.Вставить("Пароль", 	ПарольПроксиСервера);

	Попытка
		Модуль_РаботаССерверомДиадок.ПроверитьПодключениеДиадок(НастройкиПрокси, СтруктураНастроек);
		Предупреждение("Подключение прошло успешно!",, НаименованиеСистемы);
	Исключение
		ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура НастройкиПроксиПриИзменении(Элемент)
	
	стПрокси = СоздатьСтруктуруПрокси(АдресПроксиСервера,ПортПроксиСервера,ЛогинПроксиСервера,ПарольПроксиСервера);
	
	Если НастройкиПрокси = "ИспользоватьПроксиСервер" Тогда
		НастроитьВидимостьПанелиПрокси(Истина);	
		Модуль_РаботаССерверомДиадок.УстановитьНастройкиПрокси(стПрокси);
	Иначе
		НастроитьВидимостьПанелиПрокси(Ложь);
		Если НастройкиПрокси = "ИспользоватьНастройкиIE" Тогда 
			Модуль_РаботаССерверомДиадок.УстановитьНастройкиIE(,1);
		Иначе
			Модуль_РаботаССерверомДиадок.УстановитьНастройкиIE(,0);
		КонецЕсли;	
	КонецЕсли;
	
	ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокНастройкиПрокси",Элемент.Значение);
	
	ОбновитьДанныеНастроекПроксиСервера();
	ЭлементыФормы.НадписьВниманиеНастройки.Видимость = Истина;
	
КонецПроцедуры

Процедура СписокСертификатовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура СписокСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование)
	отказ = Истина;
КонецПроцедуры

Процедура ПанельНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	СформироватьЗаголовокСтраницыНастроек();
КонецПроцедуры

Процедура КоманднаяПанель1УстановитьСертификат(Кнопка)
	// Вставить содержимое обработчика.
	Если Элементыформы.СписокСертификатов.ТекущиеДанные = Неопределено Тогда 
		предупреждение("Выберите строку.",, НаименованиеСистемы);
		Возврат 
	КонецЕсли;
	
	отказ = Истина;
	СписокСертификатовПередНачаломИзменения(Кнопка, Отказ)

КонецПроцедуры

Процедура КонтрагентОтборНачалоВыбора(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь; 
	
	стКонтрагент = ПолучитьФорму("ФормаВыбораКонтрагентаДиадок", ЭтаФорма).ВыбратьКонтрагентаДиадок(ФильтрСпискаДокументов_CounteragentID, ОрганизацияСсылка);
	Если стКонтрагент <> Неопределено Тогда
		ФильтрСпискаДокументов_CounteragentName = стКонтрагент.Наименование;
		ФильтрСпискаДокументов_CounteragentID = стКонтрагент.ID;
		
		ПанельРежимовПриСменеСтраницы("", "");
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьФильтрКонтрагент()
	ФильтрСпискаДокументов_CounteragentName = "Все"; 
	ФильтрСпискаДокументов_CounteragentID = "";
КонецПроцедуры

Процедура КонтрагентОтборОчистка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь;
	ОчиститьФильтрКонтрагент();
	НачатьОбновлениеСпискаДокументов();
КонецПроцедуры

Процедура ПриОткрытииСтраницыКонтрагентов(ПриСменеОрганизации)
	
	СтраницаКонтрагентов_НастроитьЭлементы();
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияНачалоВыбораИзСписка("", "");
		СтраницаКонтрагентов_НастроитьЭлементы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		РежимыКонтрагентовПриСменеСтраницы("", "");
	КонецЕсли;
	
КонецПроцедуры

Процедура СтраницаКонтрагентов_НастроитьЭлементы()
	
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ЭлементыФормы.НадписьПолученныеСчетаФактуры1.Заголовок = "Контрагенты организации """ + ОрганизацияПредставление + """";
		ЭлементыФормы.СписокАктивные.Видимость= 		 Истина;
		ЭлементыФормы.КоманднаяПанельАктивные.Видимость= Истина;
		ЭлементыФормы.Надпись6.Видимость= 				 Ложь;
	Иначе
		ЭлементыФормы.НадписьПолученныеСчетаФактуры1.Заголовок = "Контрагенты. Необходимо выбрать организацию...";
		ЭлементыФормы.СписокАктивные.Видимость= 		 Ложь;
		ЭлементыФормы.КоманднаяПанельАктивные.Видимость= Ложь;
		ЭлементыФормы.Надпись6.Видимость= 				 Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РежимыКонтрагентовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.Принять.Доступность=			Ложь;
	ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.ОтозватьЗапрос.Доступность=	Ложь;
	
	ОбновитьСписокКонтрагентов();
	
КонецПроцедуры

Процедура ОбновитьКАВ1С(ТаблицаЗначений, ОбновленныйОбъектДД)
	
	Модуль_РаботаССерверомДиадок.ОбновитьСтрокуКонтрагента(ТаблицаЗначений, ОбновленныйОбъектДД);
	
КонецПроцедуры

Процедура КоманднаяПанельСФОтправленные1Обновить(Кнопка)
	РежимыКонтрагентовПриСменеСтраницы("", "");
КонецПроцедуры

Процедура СписокАктивныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура СписокАктивныеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = ЭлементыФормы.СписокАктивные.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Выберите контрагента.",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	ОбъектДД = ТекДанные.ОбъектДД;
	ПолучитьФорму("ФормаКарточкаКонтрагента",ЭтаФорма, ОбъектДД.Organization.Id+ ОбъектДД.Id).ОткрытьКарточку(текДанные.ОбъектДД, ОрганизацияССылка);
КонецПроцедуры

Процедура СписокОжидаетсяОтветОтКонтрагентаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = ЭлементыФормы.СписокОжидаетсяОтветОтКонтрагента.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Выберите контрагента.",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	ОбъектДД = текДанные.ОбъектДД;
	ПолучитьФорму("ФормаКарточкаЗапроса",ЭтаФорма, ОбъектДД.Organization.Id+ ОбъектДД.Id).ОткрытьКарточку(ОбъектДД);
КонецПроцедуры

Процедура 	обработатьЗапросКонтрагенту(параметр)
        выбконтрагент =  параметр;
	    КонтрагентВДиадокеНаименование = "";
		КонтрагентВДиадокеПредставление = "";
	    КонтрагентID = "";
		ЯщикДиадокОрганизации = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ОрганизацияССылка) ;
		
	    Если НЕ выбконтрагент.Пустая() Тогда
	    	стКонтрагентДиадок = ПолучитьФорму("ФормаПолученияЯщикаКонтрагентаПоИНН", ЭтаФорма).ВыбратьЯщик(ЯщикДиадокОрганизации, выбконтрагент);
	    	Если стКонтрагентДиадок <> Неопределено Тогда
	    		КонтрагентВДиадокеНаименование = стКонтрагентДиадок.Наименование;
				КонтрагентВДиадокеПредставление = стКонтрагентДиадок.Представление;
	    		КонтрагентID = стКонтрагентДиадок.ID;
	    	КонецЕсли;
	    
	    	Если КонтрагентID = "" Тогда
	    		Предупреждение("Не выбран ящик контрагента.",, НаименованиеСистемы);
	    		Возврат 
	    	КонецЕсли;
	    Иначе
	    	ЯщикаКонтрагента = "";
	    КонецЕсли;
	 
	 	фрм = ПолучитьФорму("ФормаЗапросаКонтрагенту", ЭтаФорма);
		ЗапросОтправлен = фрм.ОтправитьЗапросКонтрагенту(ящикДиадокОрганизации,выбконтрагент, КонтрагентВДиадокеПредставление, КонтрагентID);
		ОбновитьСписокКонтрагентов();
КонецПроцедуры	
	
Процедура СписокАктивныеПриПолученииДанных(Элемент, ОформленияСтрок)
	ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокКА(ОформленияСтрок, Элемент.Колонки.ФорматДокументовНаОтправку.Видимость);
КонецПроцедуры

Процедура СписокОжидаетсяОтветОтКонтрагентаПриПолученииДанных(Элемент, ОформленияСтрок)
	ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокКА(ОформленияСтрок);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Диадок_Форма_Основная_ИмяТекущейСтраницы", ЭлементыФормы.ПанельРежимов.ТекущаяСтраница.Имя);
	
	ПриОкончанииРаботыМодуля();
	
КонецПроцедуры

Функция ПредставлениеКолонкиФормированиеСчета(НастройкиВнешнихПечатныхФорм)
	Если  НастройкиВнешнихПечатныхФорм.ДиадокСпособОтправкиСчета = "НеФормировать" Тогда 
		Возврат "Не формировать"
	Иначе 
		Описание = "На основании ";
		Если  НастройкиВнешнихПечатныхФорм.ДиадокСпособОтправкиСчета = "СчетНаОплату"  Тогда
			описание = Описание + "счета на оплату";
		ИначеЕсли  НастройкиВнешнихПечатныхФорм.ДиадокСпособОтправкиСчета = "Заказ"  Тогда
			описание = Описание + "заказа";
		Иначе 
			описание = Описание + "расходной накладной";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаСчета) Тогда
			Описание = Описание + ", внешняя печатная форма";
		КонецЕсли;	
		Возврат описание;	
	КонецЕсли;	
КонецФункции

Функция ПредставлениеКолонкиФормированиеАкта(НастройкиВнешнихПечатныхФорм)
		Если  ЗначениеЗаполнено(НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаАкта) Тогда
			Возврат "Внешняя печатная форма"
		Иначе 
			Возврат "В соответствии с форматом ФНС"
		КонецЕсли;	
	
КонецФункции	

Функция ПредставлениеКолонкиДополнительныеВнешниеПечатныеФормы(Организация)
	МассивДополнительныхВПФ =ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").МассивДополнительныхВПФ(Организация);
	
	Если  МассивДополнительныхВПФ.количество() = 0 Тогда
		Возврат "Не настроено"   
	Иначе
		СтрокаНазванийФорм=	"";
		Для каждого ДополнительнаяФорма Из МассивДополнительныхВПФ Цикл
			СтрокаНазванийФорм=	СтрокаНазванийФорм + ?(ПустаяСтрока(СтрокаНазванийФорм), "", "; ") + ДополнительнаяФорма.Наименование;
		КонецЦикла;
		
		Возврат СокрЛП(СтрокаНазванийФорм);

	КонецЕсли;	   
КонецФункции	

Процедура КоманднаяПанельСФПолученныеПодписатьДокументы(Кнопка)
	//ПолучитьФорму("МассовоеПодписание", ЭтаФорма).НачатьПроцесс(ТаблицаДокументовВходящих, ПолучитьФильтрДляGetDocuments());
КонецПроцедуры

Функция ПолучитьФильтрДляGetDocuments()
	
	Направление = ПолучитьЗначениеНаправления();
	Организация = ОрганизацияСсылка;
	ПериодВыборки = ВосстановитьТекущуюНастройкуПериода();
	
	СтруктураФильтра=	Новый Структура();
	
	СтруктураФильтра.Вставить("ДатаНачала", ПериодВыборки.ДатаНачала);
	СтруктураФильтра.Вставить("ДатаОкончания", ПериодВыборки.ДатаОкончания);
	СтруктураФильтра.Вставить("Организация", Организация);
	СтруктураФильтра.Вставить("КонтрагентID", ФильтрСпискаДокументов_CounteragentID);
	СтруктураФильтра.Вставить("Направление", Направление);
	СтруктураФильтра.Вставить("фильтр", СписокДокументооборота);
	СтруктураФильтра.Вставить("ФильтрПотипам", ТипыДокументов);
	СтруктураФильтра.Вставить("DepertmentID", ПодразделениеID);
	СтруктураФильтра.Вставить("ВключатьПодчиненныеПодазделения", ВключатьПодчиненныеПодазделения);
	
	Возврат СтруктураФильтра;

КонецФункции

Процедура КоманднаяПанельСФПолученныеСопоставитьДокументы(Кнопка)
	//ПолучитьФорму("МассовоеСопоставление", ЭтаФорма).НачатьПроцесс(ТаблицаДокументовВходящих);
КонецПроцедуры

Процедура КоманднаяПанельСФПолученныеСоздатьДокументы(Кнопка)
	//ПолучитьФорму("МассовоеСоздание", ЭтаФорма).ОткрытьСписокДокументов(ТаблицаДокументовВходящих, ПолучитьФильтрДляGetDocuments());
КонецПроцедуры

Процедура ТаблицаСкладовПодразделениеВДиадокНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	//выбираем из списка организаций и подразделений
		стПодразделениеОрганизации = ПолучитьФорму("ФормаВыбораОрганизацииПодразделения").ВыбратьОрганизациюИПодразделениеДиадок(ОрганизацияID, ПодразделениеID, Истина);
		Если стПодразделениеОрганизации <> Неопределено Тогда
			ОрганизацияДиадокПредставление = стПодразделениеОрганизации.Наименование;
			Если (стПодразделениеОрганизации.DepartmentID = "") и (стПодразделениеОрганизации.ID<>"") Тогда
				ПодразделениеДиадокID = "00000000-0000-0000-0000-000000000000";
			Иначе
				ПодразделениеДиадокID = стПодразделениеОрганизации.DepartmentID;
			КонецЕсли;
			ПодразделениеДиадокПредставление = стПодразделениеОрганизации.ПредставлениеПодразделения;
			ВключатьПодчиненныеПодазделения = стПодразделениеОрганизации.ВключатьПодчиненныеПодазделения ;
			Если ЗначениеЗаполнено(ПодразделениеДиадокID) и (ПодразделениеДиадокID <> "00000000-0000-0000-0000-000000000000") Тогда 
				 ОрганизацияДиадокПредставление = ОрганизацияДиадокПредставление + " ("+?(ВключатьПодчиненныеПодазделения, "", "только ")+ПодразделениеДиадокПредставление+")";
			 ИначеЕсли ВключатьПодчиненныеПодазделения = Ложь Тогда
				  ОрганизацияДиадокПредставление = ОрганизацияДиадокПредставление + " (только головное подразделение)";
			КонецЕсли;	 
			//ПанельРежимовПриСменеСтраницы("", "", Истина);
			
			Если ТаблицаСкладов.Найти(ОрганизацияДиадокПредставление,"ПодразделениеВДиадок") <> Неопределено и (Элемент.Значение <> ОрганизацияДиадокПредставление) Тогда
				Предупреждение("Подразделение "+ "'" +ОрганизацияДиадокПредставление+"'"+ " уже содержится в таблице, повторное добавление невозможно.");
				Возврат;
			КонецЕсли;

			Элемент.Значение = ОрганизацияДиадокПредставление;
			ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.ПодразделениеДиадокId = ПодразделениеДиадокID;
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,ПодразделениеДиадокID);
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,ОрганизацияДиадокПредставление);
			
		КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель3Добавить(Кнопка)
	
	НаименованиеСправочникаСкладов = ПолучитьПрофильКонфигурации().НаименованиеСправочникаСкладов;
	ОбработатьПодборСклада(справочники[НаименованиеСправочникаСкладов].ПустаяСсылка());
	
КонецПроцедуры

Процедура ВключитьВозможностьСопоставлятьСклады1С_и_ПодразделенияДД(Элемент)
	ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокСопоставлятьСкладыИПодразделенияДД", СопоставлятьСкладыИПодразделенияДД);	
	ОбновитьСтруктуруЭлементовФормыВСоответствииСНастройкамиОбработкиДокументов();
КонецПроцедуры

Процедура ОбработатьПодборСклада(Склад)
	
	фрм = ПолучитьФорму("ФормаСопоставленияПодразделенияДД", ЭтаФорма);
	фрм.Элемент1С = Склад;
	фрм.открытьМодально();
	
	СформироватьТаблицуСкладовСПодразделениямиИзДиадок();
	
КонецПроцедуры

Процедура ТаблицаСкладовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекСтрока = Элементыформы.ТаблицаСкладов.ТекущаяСтрока;
	фрм = ПолучитьФорму("ФормаСопоставленияПодразделенияДД", ЭтаФорма);
	фрм.Элемент1С = ТекСтрока.Склад;
	фрм.ПодразделениеВДиадоке = ТекСтрока.ПодразделениеВДиадок;
	фрм.departmentID = ТекСтрока.ПодразделениеДиадокId;
	результат = фрм.открытьМодально();
	
	Если Результат = Неопределено Тогда
		Возврат
	ИначеЕсли результат.Объект1С <> ТекСтрока.Склад Тогда 
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Склада(   ТекСтрока.Склад,"");
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Склада( ТекСтрока.Склад,"");
	КонецЕсли;
	
	СформироватьТаблицуСкладовСПодразделениямиИзДиадок();
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиПодразделений(Кнопка)
	
	НаименованиеСправочникаПодразделений = ПолучитьПрофильКонфигурации().НаименованиеСправочникаПодразделений;
	ОбработатьПодборПодразделения(справочники[НаименованиеСправочникаПодразделений].ПустаяСсылка());
	
КонецПроцедуры

Процедура ТаблицаПодразделенийПередНачаломИзменения(Элемент, Отказ)
	 Отказ = Истина;

	 ТекСтрока = Элементыформы.ТаблицаПодразделений.ТекущаяСтрока;
	 фрм = ПолучитьФорму("ФормаСопоставленияПодразделенияДД", ЭтаФорма);
	 фрм.Элемент1С = ТекСтрока.Подразделение1С;
	 фрм.ПодразделениеВДиадоке = ТекСтрока.ПодразделениеВДиадок;
	 фрм.departmentID = ТекСтрока.ПодразделениеДиадокId;
	 результат = фрм.открытьМодально();
	 
	 Если Результат = Неопределено Тогда
		 Возврат
	 ИначеЕсли результат.Объект1С <> ТекСтрока.Подразделение1С Тогда 
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Подразделения( ТекСтрока.Подразделение1С,"");
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Подразделения( ТекСтрока.Подразделение1С,"");
	 КонецЕсли;

		 СформироватьСписокПодразделений1С_СПодразделениямиИзДиадок();

КонецПроцедуры

Процедура ОбработатьПодборПодразделения(Подр)
	 фрм = ПолучитьФорму("ФормаСопоставленияПодразделенияДД", ЭтаФорма);
	 фрм.Элемент1С = Подр;
	 фрм.открытьМодально();
	 
 	 СформироватьСписокПодразделений1С_СПодразделениямиИзДиадок();
КонецПроцедуры	

Процедура СформироватьСписокПодразделений1С_СПодразделениямиИзДиадок()
	ИспользоватьСопоставлениеПодразделений = ПолучитьПрофильКонфигурации().ИспользоватьСопоставлениеПодразделений;
	
	Если ИспользоватьСопоставлениеПодразделений Тогда 
		
		НаименованиеСправочникаПодразделений = ПолучитьПрофильКонфигурации().НаименованиеСправочникаПодразделений;
	    	
		ТаблицаПодразделений.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	*
		    |ИЗ
			|	Справочник."+НаименованиеСправочникаПодразделений+" КАК Подразделения";
			
		ВыборкаПодразделения = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПодразделения.Следующий() Цикл
			ПодразделениеВДД	= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Подразделение_2_DepartmentName(ВыборкаПодразделения.Ссылка);
			ПодразделениеИд		= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Подразделение_2_DepartmentID(ВыборкаПодразделения.Ссылка);

			Если (ПодразделениеВДД <> Неопределено) и (ПодразделениеИд <> Неопределено) И (ПодразделениеВДД<>"") Тогда
				Стр = ТаблицаПодразделений.Добавить();
				Стр.Подразделение1С = ВыборкаПодразделения.Ссылка;
				Стр.ПодразделениеВДиадок = ПодразделениеВДД;
				Стр.ПодразделениеДиадокId = ПодразделениеИд;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанельСписокПодразделенийУдалить(Кнопка)
	Если ЭлементыФормы.ТаблицаПодразделений.ТекущиеДанные = Неопределено Тогда
			Возврат;
	КонецЕсли;
	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Подразделения(ЭлементыФормы.ТаблицаПодразделений.ТекущиеДанные.Подразделение1С,"");
	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Подразделения(ЭлементыФормы.ТаблицаПодразделений.ТекущиеДанные.Подразделение1С,"");
	СформироватьСписокПодразделений1С_СПодразделениямиИзДиадок();
КонецПроцедуры

Процедура ТаблицаСкладовСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТаблицаСкладов.Найти(ВыбранноеЗначение,"Склад") <> Неопределено и (Элемент.Значение <> ВыбранноеЗначение) Тогда
		Предупреждение("Склад "+ "'" +ВыбранноеЗначение+"'"+ " уже содержится в таблице, повторное добавление невозможно.");
		ВыбранноеЗначение = Элемент.Значение;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.ПодразделениеДиадокId) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Элемент.Значение  Тогда
		
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Склада(ВыбранноеЗначение,ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.ПодразделениеДиадокId);
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Склада(ВыбранноеЗначение,ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.ПодразделениеВДиадок);
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentID_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,"");
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DepartmentName_для_Склада(ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные.Склад,"");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаСкладовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	    НаименованиеСправочникаСкладов = ПолучитьПрофильКонфигурации().НаименованиеСправочникаСкладов;

		ТекущаяСтрока = ЭлементыФормы.ТаблицаСкладов.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда 
			ТекущаяСтрока.Склад = Справочники[НаименованиеСправочникаСкладов].ПустаяСсылка();	
		КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Общие функции управления формой 
///////////////////////////////////////////////////////////////////

Процедура КнопкаЗагрузитьИОтправитьСДискаНажатие(Элемент)
	формаВыгрузки = этотОбъект.ПолучитьФорму("ФормаЗагрузкиДокументовСДиска", ЭтаФорма);
	формаВыгрузки.ОткрытьКарточку(ОрганизацияID, ПодразделениеID, ПодразделениеПредставление, ОрганизацияСсылка, КонтрагентID);
КонецПроцедуры

Функция ПроверитьКонфигурациюИКомпоненту()
	
	Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = Неопределено Тогда
		
		Предупреждение("Текущая конфигурация системы: """ + Метаданные.Синоним + """ не поддерживается! 
					   |Обработка будет закрыта.
					   |Список поддерживаемых конфигураций:
					   |" + ПолучитьТекстПоддерживаемыхКонфигураций(),,"Ошибка");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102"
		И НЕ ПроверитьСовместимостьКонфигурацииУТ102() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьСовместимостьКонфигурацииУТ102()
	Если Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") = Неопределено Тогда
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля необходимо наличие плана видов характеристик ""Свойства объектов""");
		Возврат Ложь;
	КонецЕсли;
	ТипПВХСвОб = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип;
	Если НЕ ТипПВХСвОб.СодержитТип(Тип("Строка")) ИЛИ ТипПВХСвОб.КвалификаторыСтроки.Длина < 50 Тогда
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля в плане видов характеристик ""Свойства объектов""
		|необходимо установить тип ""Строка"" с длиной не менее 50 символов");
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.ПланыВидовХарактеристик.Найти("НазначенияСвойствКатегорийОбъектов") = Неопределено Тогда
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля необходимо наличие плана видов характеристик ""Назначения свойств категорий объектов""");
		Возврат Ложь;
	КонецЕсли;
	ТипПВХ = Метаданные.ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Тип;
	Если НЕ ТипПВХ.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля в плане видов характеристик ""Назначения свойств категорий объектов""
		|необходимо установить тип ""СправочникСсылка.Организации""");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка                                                                           
		элПВХ = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
	Исключение
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля в плане видов характеристик ""Назначения свойств категорий объектов""
		|необходимо установить предопределенный элемент с именем ""Справочник_Организации"" и типом ""Организации""");
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ элПВХ.Метаданные().Тип.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
		Предупреждение("Текущая конфигурация """ + Метаданные.Синоним + """.
		|Для работы модуля в плане видов характеристик ""Назначения свойств категорий объектов""
		|необходимо установить предопределенный элемент с именем ""Справочник_Организации"" и типом ""Организации""");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ТаблицаСкладовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ТаблицаСкладовПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ = Истина;
КонецПроцедуры

Процедура ПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура СписокАктивныеПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭлементыФормы.СписокАктивные.ТекущаяСтрока = Неопределено Тогда
		
		Если ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "InvitesMe"
			ИЛИ ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "RejectsMe"
			ИЛИ ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "IsRejectedByMe" Тогда
			ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.Принять.Доступность=	Истина;
			Если ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "InvitesMe" Тогда
				ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.Принять.Текст= "Принять приглашение";
			Иначе
				ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.Принять.Текст= "Отправить приглашение";
			КонецЕсли;
		Иначе
			ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.Принять.Доступность=	Ложь;
		КонецЕсли;
		
		Если ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "IsMyCounteragent"
			ИЛИ ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "InvitesMe"
			ИЛИ ЭлементыФормы.СписокАктивные.ТекущаяСтрока.ТекущийСтатус = "IsInvitedByMe" Тогда
			ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.ОтозватьЗапрос.Доступность=	Истина;
		Иначе
			ЭлементыФормы.КоманднаяПанельАктивные.Кнопки.ОтозватьЗапрос.Доступность=	Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокВзаимоотношенийПриИзменении(Элемент)
	
	ОбновитьСписокКонтрагентов();
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	НаименованиеСправочникаПодразделений = ПолучитьПрофильКонфигурации().НаименованиеСправочникаПодразделений;
	НаименованиеСправочникаСкладов = ПолучитьПрофильКонфигурации().НаименованиеСправочникаСкладов;

 	Если (Источник.Элементыформы.Найти("СправочникСписок")<>Неопределено) и (типЗнч(Источник.СправочникСписок)=тип("СправочникСписок."+НаименованиеСправочникаПодразделений)) Тогда
		ОбработатьПодборПодразделения(ЗначениеВыбора)
	ИначеЕсли (типЗнч(Источник.СправочникСписок)=тип("СправочникСписок."+НаименованиеСправочникаСкладов)) Тогда
		ОбработатьПодборСклада(ЗначениеВыбора)
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаПодразделенийПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанель1СтатусПодписания(Кнопка)
	// Вставить содержимое обработчика.
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Действие.Текст = Кнопка.Текст+":";
	НастроитьСписокДокументооборота();
КонецПроцедуры

Функция ПолучитьНастройкуПользователяВидСписка()
	 результат = ВосстановитьЗначение("РежимВыбораТипаДокумента_Диадок");
	 Возврат ?(результат=Неопределено, Истина, результат);
		 
КонецФункции

Функция ВыбратьТипДокумента(КраткийСписок=Неопределено)
	Если КраткийСписок=Неопределено Тогда 
		КраткийСписок = ПолучитьНастройкуПользователяВидСписка()
	КонецЕсли;	
	
	Если КраткийСписок Тогда 
		 СписокВыбораТипов = ПолучитьКраткийСписокТиповДокументов();
		 СписокВыбораТипов.Добавить(98, "-------------");
	 	 СписокВыбораТипов.Добавить(99, "Подробный список");
 	Иначе 
		СписокВыбораТипов = ПолучитьПолныйСписокТиповДокументов();
		СписокВыбораТипов.Добавить(98,  "-------------");
		СписокВыбораТипов.Добавить(99, "Краткий список");
	КонецЕсли;
	
	Результатвыбора =  ВыбратьИзМеню(СписокВыбораТипов, Элементыформы.ТипыДокументов);
	Если результатВыбора = Неопределено Тогда 
		Возврат Неопределено 
	ИначеЕсли РезультатВыбора.Значение = 99 Тогда 
		Возврат   ВыбратьТипДокумента(не КраткийСписок)
	ИначеЕсли РезультатВыбора.Значение = 98 Тогда 
		Возврат   ВыбратьТипДокумента(КраткийСписок)
	Иначе 
		СохранитьЗначение("РежимВыбораТипаДокумента_Диадок", КраткийСписок);
		Возврат результатВыбора
	КонецЕсли;	

		
КонецФункции	

Процедура ТипыДокументовНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 
	 результатВыбора = ВыбратьТипДокумента();
	 Если результатВыбора <> Неопределено Тогда 
	 	ТипыДокументов =  Результатвыбора.Значение;
		
		КоманднаяПанель3Обновить("")
	КонецЕсли;	
	 
КонецПроцедуры

Процедура СписокДокументооборотаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаОтбора = ПолучитьФорму("ФормаВыбораСтатусаДокумента", ЭтаФорма);
	ФормаОтбора.ТекущееЗначение = СписокДокументооборота;
	ФормаОтбора.Направление = ПолучитьЗначениеНаправления();
	
	РезультатВыбора = ФормаОтбора.ОткрытьМодально();
	
	Если РезультатВыбора <> Неопределено Тогда 
		СписокДокументооборота = РезультатВыбора;
		КоманднаяПанель3Обновить("");
	КонецЕсли;
	
	СохранитьЗначение("СтатусДокументаОсновнаяФормаДиадок", СписокДокументооборота);

КонецПроцедуры

Процедура КоманднаяПанель2ПараметрыОтправки(Кнопка)
	
	Если Элементыформы.ДеревоПочтовыхЯщиков.ТекущаяСтрока = Неопределено Тогда 
		предупреждение("Не выбрана организация!",  , НаименованиеСистемы);
		Возврат
	КонецЕсли;	
	
	//если организация заблокирована по API, то выводим информационное окно вместо формы настройки параметров
	Если Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Заблокирована Тогда 
		
		фрм = ЭтотОбъект.ПолучитьФорму("ФормаОплатаСервиса");
		фрм.СписокОрганизаций = Новый СписокЗначений();
		фрм.СписокОрганизаций.Добавить(Модуль_РаботаССерверомДиадок.СтрокаКонтекста(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация));
		фрм.ОткрытьМодально();
		
	Иначе
		
		фрм = ЭтотОбъект.ПолучитьФорму("ФормаНастройкаПараметровОтправки");
		фрм.НастройкиОрганизации=		ПолучитьНастройкиОрганизации(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация);
		фрм.ПредставлениеОрганизации=	Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.НаименованиеЯщика;
		фрм.OrganizationId=				Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.OrganizationId;
		фрм.ОткрытьМодально();
		
		Если фрм.успех Тогда 
			
			Попытка
				ЗаписатьнастройкиОрганизации(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация, фрм.настройкиОрганизации);	
			Исключение
				Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
				"Внимание!",
				"Не удалось сохранить изменения в параметрах отправки документов.",
				ОписаниеОшибки());
			КонецПопытки;
			
			OrganizationId=	Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.OrganizationId;
			Если НЕ фрм.DiadocConnection = Неопределено Тогда
				DiadocConnection=	фрм.DiadocConnection;
				Модуль_РаботаССерверомДиадок.УстановитьDiadocConnection(OrganizationId, DiadocConnection);
				Модуль_РаботаССерверомДиадок.ИнициализироватьMagic();
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьРеквизитыСертификатаДляОрганизации(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация, DiadocConnection.Certificate);
			Иначе
				Если фрм.ПредставлениеДопСертификата = "" Тогда
					Модуль_РаботаССерверомДиадок.УстановитьDiadocConnection(OrganizationId);
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьРеквизитыСертификатаДляОрганизации(Элементыформы.ДеревоПочтовыхЯщиков.ТекущиеДанные.Организация, Неопределено);
				КонецЕсли;
			КонецЕсли;
			ОбновитьДанныеСтраницынастроек();
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьСписокКонтрагентов()
	
	Модуль_РаботаССерверомДиадок.ЗаполнитьСписокКонтрагентов(СписокАктивные, ОрганизацияСсылка, СписокВзаимоотношений);
	
КонецПроцедуры

Процедура КоманднаяПанельАктивныеГрупповаяОбработка(Кнопка)
	
	МассоваяРаботаСКонтрагентами=	ПолучитьФорму("МассоваяРаботаСКонтрагентами", ЭтаФорма, ОрганизацияССылка);
	//МассоваяРаботаСКонтрагентами.СписокКонтрагентов=	СписокАктивные.Скопировать();
	//МассоваяРаботаСКонтрагентами.ОрганизацияССылка=		ОрганизацияССылка;
	//МассоваяРаботаСКонтрагентами.СписокВзаимоотношений=	СписокВзаимоотношений;
	МассоваяРаботаСКонтрагентами.ОткрытьСписокКонтрагентов(СписокАктивные, ОрганизацияССылка, СписокВзаимоотношений);
	
КонецПроцедуры


Процедура УстановитьОтборСпискаДокументов(ТаблицаДокументов, ОсновнойОтбор)
	
	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").УстановитьОтборТабличнойЧасти(ТаблицаДокументов, ОсновнойОтбор);
	
КонецПроцедуры

Процедура КоманднаяПанельСФПолученныеОтборВходящие(Кнопка)
		
	ФормаНастройкиОтбора=	ПолучитьФорму("ФормаНастройкиОтбора", Этаформа);
	ФормаНастройкиОтбора.НачальныйОтборСтрок=	ЭлементыФормы.ТаблицаДокументовВходящих.ОтборСтрок;
	ФормаНастройкиОтбора.ИмяСписка=				"ТаблицаДокументовВходящих";
	
	Результат=	ФормаНастройкиОтбора.ОткрытьМодально();
	
	Если Результат = Истина Тогда
		ОсновнойОтборВходящие=	ФормаНастройкиОтбора.ОсновнойОтбор;
		УстановитьОтборСпискаДокументов(ЭлементыФормы.ТаблицаДокументовВходящих, ОсновнойОтборВходящие);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСФОтправленныеОтборИсходящие(Кнопка)
	
	ФормаНастройкиОтбора=	ПолучитьФорму("ФормаНастройкиОтбора", Этаформа);
	ФормаНастройкиОтбора.НачальныйОтборСтрок=	ЭлементыФормы.ТаблицаДокументовИсходящих.ОтборСтрок;
	ФормаНастройкиОтбора.ИмяСписка=				"ТаблицаДокументовИсходящих";
	
	Результат=	ФормаНастройкиОтбора.ОткрытьМодально();
	
	Если Результат = Истина Тогда
		ОсновнойОтборИсходящие=	ФормаНастройкиОтбора.ОсновнойОтбор;
		УстановитьОтборСпискаДокументов(ЭлементыФормы.ТаблицаДокументовИсходящих, ОсновнойОтборИсходящие);
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаТехподдержкаНажатие(Элемент)
	
	ФормаТехподдержки=	ПолучитьФорму("ФормаТехподдержка", ЭтаФорма);
	ФормаТехподдержки.ОткрытьМодально();
	
КонецПроцедуры

Процедура КнопкаНовостиНажатие(Элемент)
	
	ФормаНовости=	ПолучитьФорму("ФормаНовости", ЭтаФорма);
	ФормаНовости.ОткрытьМодально();

КонецПроцедуры

Процедура ФлажокРазрешитьНеструктурированныеАдресаПриИзменении(Элемент)
	
	РазрешитьНеструктурированныеАдреса = ФлажокРазрешитьНеструктурированныеАдреса;
	ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("РазрешитьНеструктурированныеАдреса", ?(ФлажокРазрешитьНеструктурированныеАдреса, "Да", "Нет"));
	
КонецПроцедуры


//{ ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

	Процедура ИнициализироватьПодключаемыйМодуль()
		
		ПолучитьНастройкиПодключаемогоМодуля();
		УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
		ИнициализироватьВнешнийПодключаемыйМодуль();
		
	КонецПроцедуры
	
	//{ ОБРАБОТЧИКИ СОБЫТИЙ
	
		Процедура ИспользоватьПодключаемыйМодульПриИзменении(Элемент)
		
			СохранитьНастройкиПодключаемогоМодуля();
			
			Если ИспользоватьПодключаемыйМодуль = Истина Тогда
				Если (МестонахождениеПодключаемогоМодуля = "Диск" И ЗначениеЗаполнено(ПодключаемыйМодульПуть) = Истина) 
					ИЛИ (МестонахождениеПодключаемогоМодуля = "1С" И ЗначениеЗаполнено(ПодключаемыйМодульСсылка) = Истина)
					ИЛИ (МестонахождениеПодключаемогоМодуля = "Конфигурация" И ЗначениеЗаполнено(ПодключаемыйМодульИмяОбработки) = Истина) Тогда
				
					ИнициализироватьПодключаемыйМодуль();
										
				КонецЕсли;
				
			Иначе
								
				ИспользуетсяПодключаемыйМодуль 	= Неопределено;
				ВнешнийМодуль 					= Неопределено;
			КонецЕсли;
			
			УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
            
		КонецПроцедуры
		
		Процедура ПереключательПутьПриИзменении(Элемент)
		
			СохранитьНастройкиПодключаемогоМодуля();
			
			Если ИспользоватьПодключаемыйМодуль = Истина Тогда
				Если (МестонахождениеПодключаемогоМодуля = "Диск" И ЗначениеЗаполнено(ПодключаемыйМодульПуть) = Истина) 
					ИЛИ (МестонахождениеПодключаемогоМодуля = "1С" И ЗначениеЗаполнено(ПодключаемыйМодульСсылка) = Истина)
					ИЛИ (МестонахождениеПодключаемогоМодуля = "Конфигурация" И ЗначениеЗаполнено(ПодключаемыйМодульИмяОбработки) = Истина) Тогда
				
					ИнициализироватьПодключаемыйМодуль();
					
				Иначе
					УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля();
					
					ИспользуетсяПодключаемыйМодуль 	= Неопределено;
					ВнешнийМодуль 					= Неопределено;
				КонецЕсли;
			КонецЕсли;
									
		КонецПроцедуры
		
		Процедура ПодключаемыйМодульПутьНачалоВыбора(Элемент, СтандартнаяОбработка)
		
			СтандартнаяОбработка = Ложь;
			
			Режим = РежимДиалогаВыбораФайла.Открытие;
		    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
			Фильтр = "Внешняя обработка 1С:Предприятия 8 (*.epf)|*.epf";
			ДиалогОткрытияФайла.Фильтр = Фильтр;
		    ДиалогОткрытияФайла.Заголовок = "Выберите файл подключаемого модуля";
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				ПодключаемыйМодульПуть = ДиалогОткрытияФайла.ПолноеИмяФайла;
				Если СтрДлина(ПодключаемыйМодульПуть)>50 Тогда
					Предупреждение("Длина пути до подключаемого модуля не может превышать 50 символов", ,НаименованиеСистемы);
					ПодключаемыйМодульПуть = "";
					Возврат;
				КонецЕсли;
				СохранитьНастройкиПодключаемогоМодуля();
				
				ИспользуетсяПодключаемыйМодуль 	= Неопределено;
				ВнешнийМодуль 					= Неопределено;
				ИнициализироватьПодключаемыйМодуль();
								
			КонецЕсли;
						
		КонецПроцедуры
		
		Процедура ПодключаемыйМодульСсылкаПриИзменении(Элемент)
		
			СохранитьНастройкиПодключаемогоМодуля();
						
			Если ЗначениеЗаполнено(Элемент.Значение) = Истина Тогда
				ИспользуетсяПодключаемыйМодуль 	= Неопределено;
				ВнешнийМодуль 					= Неопределено;
				ИнициализироватьПодключаемыйМодуль();	
			КонецЕсли;
						
		КонецПроцедуры
		
		Процедура ПодключаемыйМодульИмяОбработкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

			Если СтрДлина(ВыбранноеЗначение) > 255 Тогда
				Предупреждение("Длина имени обработки не может быть более 255 символов.");
				ВыбранноеЗначение = "";
			КонецЕсли;
			
			Если НЕ Элемент.Значение = ВыбранноеЗначение Тогда
				ИспользуетсяПодключаемыйМодуль 	= Неопределено;
				ВнешнийМодуль 					= Неопределено;
				ПодключаемыйМодульИмяОбработки 	= ВыбранноеЗначение;
			КонецЕсли;
						
			СохранитьНастройкиПодключаемогоМодуля();
			ИнициализироватьПодключаемыйМодуль();
			
		КонецПроцедуры
		
		Процедура КнопкаСохранитьШаблонПМНажатие(Элемент)
		
			ДФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ДФ.Фильтр = "epf|*.epf";
			ДФ.ПолноеИмяФайла = "Диадок_ПодключаемыйМодуль_Шаблон.epf";
			Если ДФ.Выбрать() Тогда
				Попытка
					ПолучитьМакет("ШаблонПодключаемогоМодуля").Записать(ДФ.ПолноеИмяФайла);
					Предупреждение("Шаблон успешно сохранен во внешнем файле");
				Исключение
					Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку("Ошибка сохранения ", "При сохранении шаблона внешнего подключаемого модуля произошла ошибка.", ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
			
		КонецПроцедуры
	
	//} ОБРАБОТЧИКИ СОБЫТИЙ	
    
	Процедура УправлениеДоступностьюПолейНастройкиПодключаемогоМодуля()
		
		ЭлементыФормы.РамкаПодключаемыйМодульРасположение.Доступность = ИспользоватьПодключаемыйМодуль;
		
		ЭлементыФормы.ПереключательПуть.Доступность = ИспользоватьПодключаемыйМодуль;
		
		ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = ИспользоватьПодключаемыйМодуль;
		ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= ИспользоватьПодключаемыйМодуль;
		
		ЭлементыФормы.ПереключательВ1С.Доступность	= ИспользоватьПодключаемыйМодуль;
		
		ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность		= ИспользоватьПодключаемыйМодуль;
		ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность		= ИспользоватьПодключаемыйМодуль;

		ЭлементыФормы.ПодключаемыйМодульСсылка.АвтоОтметкаНезаполненного = Ложь;
		
		ЭлементыФормы.ПереключательВСоставеКонфигурации.Доступность = ИспользоватьПодключаемыйМодуль;
		ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность 	= ИспользоватьПодключаемыйМодуль;
		ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность 	= ИспользоватьПодключаемыйМодуль;
				
		Если ИспользоватьПодключаемыйМодуль Тогда
			
			Если МестонахождениеПодключаемогоМодуля = "Диск" Тогда
				
				ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность	= Ложь;
				ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность	= Ложь;
				
				ЭлементыФормы.ПодключаемыйМодульПуть.АвтоОтметкаНезаполненного		= Истина;
				ЭлементыФормы.ПодключаемыйМодульСсылка.ОтметкаНезаполненного		= Ложь;
				ЭлементыФормы.ПодключаемыйМодульИмяОбработки.ОтметкаНезаполненного	= Ложь;
				
				ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность 	= Ложь;
				ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность	= Ложь;
							
			ИначеЕсли МестонахождениеПодключаемогоМодуля = "1С" Тогда
				
				ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = Ложь;
				ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= Ложь;

				ЭлементыФормы.ПодключаемыйМодульСсылка.АвтоОтметкаНезаполненного	= Истина;
				ЭлементыФормы.ПодключаемыйМодульПуть.ОтметкаНезаполненного			= Ложь;
				ЭлементыФормы.ПодключаемыйМодульИмяОбработки.ОтметкаНезаполненного	= Ложь;
				
				ЭлементыФормы.НадписьПодключаемыйИмяОбработки.Доступность	= Ложь;
				ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Доступность	= Ложь;
							
			ИначеЕсли МестонахождениеПодключаемогоМодуля = "Конфигурация" Тогда	
				
				ЭлементыФормы.НадписьПодключаемыйСсылка.Доступность		= Ложь;
				ЭлементыФормы.ПодключаемыйМодульСсылка.Доступность		= Ложь;
				ЭлементыФормы.НадписьПодключаемыйМодульПуть.Доступность = Ложь;
							
				ЭлементыФормы.ПодключаемыйМодульПуть.Доступность		= Ложь;
				
				ЭлементыФормы.ПодключаемыйМодульИмяОбработки.АвтоОтметкаНезаполненного	= Истина;
				ЭлементыФормы.ПодключаемыйМодульСсылка.ОтметкаНезаполненного			= Ложь;
				ЭлементыФормы.ПодключаемыйМодульПуть.ОтметкаНезаполненного				= Ложь;			
							
			КонецЕсли;
				
		КонецЕсли;

	КонецПроцедуры

	Процедура СохранитьНастройкиПодключаемогоМодуля()
		
		Если ИспользоватьПодключаемыйМодуль Тогда
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульТип", МестонахождениеПодключаемогоМодуля);
		Иначе
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульТип", "Нет");
		КонецЕсли;
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульПуть", ПодключаемыйМодульПуть);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульИмяОбработки", ПодключаемыйМодульИмяОбработки);
		Если ЗначениеЗаполнено(ПодключаемыйМодульСсылка) Тогда
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульВидСправочника", СокрЛП(ПодключаемыйМодульСсылка.Метаданные().Имя));
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульGUID", СокрЛП(ПодключаемыйМодульСсылка.УникальныйИдентификатор()));
		Иначе
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульВидСправочника", Неопределено);
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты("ДиадокПодключаемыйМодульGUID", Неопределено);
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ПолучитьНастройкиПодключаемогоМодуля()
		
		ТипПодключаемогоМодуля = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульТип");
		
		Если НЕ ЗначениеЗаполнено(ТипПодключаемогоМодуля) ИЛИ ТипПодключаемогоМодуля = "Нет" Тогда
			МестонахождениеПодключаемогоМодуля = "Диск";
		Иначе
			ИспользоватьПодключаемыйМодуль = Истина;
			МестонахождениеПодключаемогоМодуля = ТипПодключаемогоМодуля;
		КонецЕсли;
		
		ПодключаемыйМодульПуть = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульПуть");
		
		ПодключаемыйМодульСсылка = ПолучитьСсылкуНаПодключаемыйМодуль();
		
		СписокОбработокКонфигурации = Новый СписокЗначений;
		Для Каждого Обработка Из Метаданные.Обработки Цикл
			СписокОбработокКонфигурации.Добавить(Обработка.Имя);
		КонецЦикла;
		ЭлементыФормы.ПодключаемыйМодульИмяОбработки.СписокВыбора = СписокОбработокКонфигурации;
		ПодключаемыйМодульИмяОбработки  = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульИмяОбработки");
		ЭлементыФормы.ПодключаемыйМодульИмяОбработки.Значение = ПодключаемыйМодульИмяОбработки;
		
	КонецПроцедуры
    
//} ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

//{ МАССОВАЯ ОБРАБОТКА ВХОДЯЩИХ ДОКУМЕНТОВ
	
	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыПодписатьИСоздать(Кнопка)
		
		ТаблицаПодписать = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаПодписать.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаСоздатьДокументыПоступления = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаСоздатьДокументыПоступления.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаСоздатьСчетФактуры = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаСоздатьСчетФактуры.Колонки.Добавить("ЭДОбъект");
		
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда	
				
				Document = ПолучитьЭДОбъектИзКэша(СтрокаТаблицыВходящих.BoxID, СтрокаТаблицыВходящих.DocumentID);
				Если НЕ Document.Type = "NonformalizedProforma" И Document.Status = "InboundWaitingForRecipientSignature" 
					И Document.RevocationStatus <> "RevocationAccepted" Тогда
					
					НовайСтрокаТаблицы = ТаблицаПодписать.Добавить();
					ЗаполнитьЗначенияСвойств(НовайСтрокаТаблицы, СтрокаТаблицыВходящих);
					НовайСтрокаТаблицы.ЭДОбъект = Document;
					
				ИначеЕсли (ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type))
							И ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь И Document.RevocationStatus <> "RevocationAccepted" 
							И Document.Status <> "InboundRecipientSignatureRequestRejected" Тогда
					
					НовайСтрокаТаблицы = ТаблицаСоздатьДокументыПоступления.Добавить();
					ЗаполнитьЗначенияСвойств(НовайСтрокаТаблицы, СтрокаТаблицыВходящих);
					НовайСтрокаТаблицы.ЭДОбъект = Document;	
										
				ИначеЕсли ЭтоСчетФактура(Document.Type) И ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь Тогда
					
					НовайСтрокаТаблицы = ТаблицаСоздатьСчетФактуры.Добавить();
					ЗаполнитьЗначенияСвойств(НовайСтрокаТаблицы, СтрокаТаблицыВходящих);
					НовайСтрокаТаблицы.ЭДОбъект = Document;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаПодписать, ТаблицаСоздатьДокументыПоступления, ТаблицаСоздатьСчетФактуры", ТаблицаПодписать, ТаблицаСоздатьДокументыПоступления, ТаблицаСоздатьСчетФактуры);
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("ПодписатьИСоздать", СтруктураТаблицыДокументов, ПолучитьФильтрДляGetDocuments());
		
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыСопоставитьИПодписать(Кнопка)
		
		ТаблицаСопоставитьДокументыПоступления = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаСопоставитьДокументыПоступления.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаПодписатьСопоставленные = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаПодписатьСопоставленные.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаСоздатьСчетФактуры = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаСоздатьСчетФактуры.Колонки.Добавить("ЭДОбъект");
	
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				
				Document = ПолучитьЭДОбъектИзКэша(СтрокаТаблицыВходящих.BoxID, СтрокаТаблицыВходящих.DocumentID);
				
				Если (ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type))
					И Document.RevocationStatus <> "RevocationAccepted" И Document.Status <> "InboundRecipientSignatureRequestRejected" Тогда
					
					Если ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь Тогда
						СтрокаНовойТаблицы = ТаблицаСопоставитьДокументыПоступления.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
						СтрокаНовойТаблицы.ЭДОбъект = Document;
					ИначеЕсли Document.Status = "InboundWaitingForRecipientSignature" Тогда
						СтрокаНовойТаблицы = ТаблицаПодписатьСопоставленные.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
						СтрокаНовойТаблицы.ЭДОбъект = Document;
					КонецЕсли;
					
				ИначеЕсли Document.Type = "Invoice" И ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь Тогда
					СтрокаНовойТаблицы = ТаблицаСоздатьСчетФактуры.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;						
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаСопоставитьДокументыПоступления, ТаблицаПодписать, ТаблицаСоздатьСчетФактуры", ТаблицаСопоставитьДокументыПоступления, ТаблицаПодписатьСопоставленные, ТаблицаСоздатьСчетФактуры);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("СопоставитьИПодписать", СтруктураТаблицыДокументов, ПолучитьФильтрДляGetDocuments());
		
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыПодписать(Кнопка)
		
		НоваяТаблицаДокументовВходящих = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		НоваяТаблицаДокументовВходящих.Колонки.Добавить("ЭДОбъект");
	
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				
				Document = ПолучитьЭДОбъектИзКэша(СтрокаТаблицыВходящих.BoxID, СтрокаТаблицыВходящих.DocumentID);
				Если НЕ Document.Type = "NonformalizedProforma" И Document.Status = "InboundWaitingForRecipientSignature"
					И Document.RevocationStatus <> "RevocationAccepted" Тогда
					
					СтрокаНовойТаблицы = НоваяТаблицаДокументовВходящих.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаПодписать", НоваяТаблицаДокументовВходящих);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("Подписать", СтруктураТаблицыДокументов, ПолучитьФильтрДляGetDocuments());
				
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыСопоставить(Кнопка)
		
		ТаблицаНеСопоставленыеДокументыПоступления = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаНеСопоставленыеДокументыПоступления.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаНеСопоставленныеСчетФактуры = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаНеСопоставленныеСчетФактуры.Колонки.Добавить("ЭДОбъект");
	
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				
				Document = ПолучитьЭДОбъектИзКэша(СтрокаТаблицыВходящих.BoxID, СтрокаТаблицыВходящих.DocumentID);
									
				Если ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь И Document.RevocationStatus <> "RevocationAccepted" 
					И (ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type))
					И Document.Status <> "InboundRecipientSignatureRequestRejected" Тогда
					
					СтрокаНовойТаблицы = ТаблицаНеСопоставленыеДокументыПоступления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;
					
				КонецЕсли;
				
				Если (ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь) 
					И ЭтоСчетФактура(Document.Type) Тогда
					
					СтрокаНовойТаблицы = ТаблицаНеСопоставленныеСчетФактуры.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;
					
				КонецЕсли;
										
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаСопоставитьДокументыПоступления, ТаблицаНеСопоставленныеСчетФактуры", ТаблицаНеСопоставленыеДокументыПоступления, ТаблицаНеСопоставленныеСчетФактуры);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("Сопоставить", СтруктураТаблицыДокументов);
		
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыСоздатьВ1С(Кнопка)
		
		ТаблицаДокументовПоступления = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаДокументовПоступления.Колонки.Добавить("ЭДОбъект");
		
		ТаблицаСчетФактур = ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		ТаблицаСчетФактур.Колонки.Добавить("ЭДОбъект"); 
		
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				
				Document = ПолучитьЭДОбъектИзКэша(СтрокаТаблицыВходящих.BoxID, СтрокаТаблицыВходящих.DocumentID);
				Если (ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type)) 
					И ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь И Document.RevocationStatus <> "RevocationAccepted" 
					И Document.Status <> "InboundRecipientSignatureRequestRejected" Тогда
					
					СтрокаНовойТаблицы = ТаблицаДокументовПоступления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;
					
				ИначеЕсли ЭтоСчетФактура(Document.Type) И ЗначениеЗаполнено(СтрокаТаблицыВходящих.ПервичныйДокумент) = Ложь Тогда	
					
					СтрокаНовойТаблицы = ТаблицаСчетФактур.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
					СтрокаНовойТаблицы.ЭДОбъект = Document;
					
				КонецЕсли;
			
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаСоздатьДокументыПоступления, ТаблицаСоздатьСчетФактуры", ТаблицаДокументовПоступления, ТаблицаСчетФактур);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("СоздатьВ1С", СтруктураТаблицыДокументов);
				
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеВходящиеДокументыСохранить(Кнопка)
		
		НоваяТаблицаДокументовВходящих=	ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		НоваяТаблицаДокументовВходящих.Колонки.Добавить("ЭДОбъект");
	
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				СтрокаНовойТаблицы = НоваяТаблицаДокументовВходящих.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
				СтрокаНовойТаблицы.ЭДОбъект = ПолучитьЭДОбъектИзКэша(СтрокаНовойТаблицы.BoxID, СтрокаНовойТаблицы.DocumentID);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаДокументовВходящие", НоваяТаблицаДокументовВходящих);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("СохранитьНаДиск", СтруктураТаблицыДокументов);
		
	КонецПроцедуры

	Процедура КоманднаяПанельСФПолученныеОбработкаДляТорговыхСетей(Кнопка)
				
		НоваяТаблицаДокументовВходящих=	ТаблицаДокументовВходящих.ВыгрузитьКолонки();
		НоваяТаблицаДокументовВходящих.Колонки.Добавить("ЭДОбъект");
		
		Для каждого СтрокаТаблицыВходящих Из ТаблицаДокументовВходящих Цикл
			Если ЭлементыФормы.ТаблицаДокументовВходящих.ПроверитьСтроку(СтрокаТаблицыВходящих) = Истина Тогда
				СтрокаНовойТаблицы = НоваяТаблицаДокументовВходящих.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы, СтрокаТаблицыВходящих);
				СтрокаНовойТаблицы.ЭДОбъект = ПолучитьЭДОбъектИзКэша(СтрокаНовойТаблицы.BoxID, СтрокаНовойТаблицы.DocumentID);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураТаблицыДокументов = Новый Структура("ТаблицаДокументовВходящие", НоваяТаблицаДокументовВходящих);
		
		МассоваяОбработка = ПолучитьФорму("МассоваяОбработкаДокументов");
		МассоваяОбработка.ПоказатьПанельМассовойОбработкиВходящихДокументов("ТорговыеСети", СтруктураТаблицыДокументов);
		
	КонецПроцедуры

//} МАССОВАЯ ОБРАБОТКА ВХОДЯЩИХ ДОКУМЕНТОВ

ВерсияОбработки = ЭтотОбъект.ВерсияОбработки; // Инициализация модуля объекта обработки.

ОбновлятьСписокДокументов = Ложь;

ПервоеОткрытиеПолученные=	Истина;
ПервоеОткрытиеОтправленные=	Истина;
ЗафиксированыСобытияОткрытияФормы = Ложь;

ВыбранИнтервалБезОграниченияВходящие 	= Ложь;
ВыбранИнтервалБезОграниченияИсходящие 	= Ложь;


КэшЭДОбъектов= Новый ТаблицаЗначений;
КэшЭДОбъектов.Колонки.Добавить("BoxID");
КэшЭДОбъектов.Колонки.Добавить("DocumentId");
КэшЭДОбъектов.Колонки.Добавить("ЭДОбъект");