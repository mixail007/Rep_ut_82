Перем ТаблРаспределенияДокументовПоВкладкам;
Перем ЭтоПакет;

Перем ТекущаяВкладка;
Перем МогуЗапрашиватьСогласованиеПодпись;

Функция СформироватьИПоказатьПечатнуюФорму(МассивДокументовПакета, ПарMyBoxId=Неопределено, парСуществующийЭДДляУдаления=Неопределено, стПодразделениеКонтрагента=Неопределено, ДокументИнициатор=Неопределено) Экспорт
	
	СтрокаСпискаВыгрузки = МассивДокументовПакета[0];
		
	Если ПарMyBoxId = Неопределено Тогда
		MyBoxId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(СтрокаСпискаВыгрузки.Отправитель);
	Иначе
		MyBoxId = ПарMyBoxId;
	КонецЕсли;
	
	Organization 	 = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(СтрокаСпискаВыгрузки.Отправитель);
	CounteragentName = Organization.GetCounteragentById(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(СтрокаСпискаВыгрузки.Получатель, Organization.Id)).Name;
	
	Если стПодразделениеКонтрагента <> Неопределено Тогда
		ToDepartmentID = стПодразделениеКонтрагента.ID;
		ПодразделениеКонтрагента = CounteragentName + ?(НЕ ПустаяСтрока(стПодразделениеКонтрагента.Наименование), " (" + стПодразделениеКонтрагента.Наименование + ")", "");
	Иначе
		ПодразделениеКонтрагента = CounteragentName;
	КонецЕсли;	
	
	СуществующийЭДДляУдаления = парСуществующийЭДДляУдаления;
	
	ЗаполнитьТаблРаспределенияДокументовПоВкладкам(МассивДокументовПакета, ДокументИнициатор);
	ЭтоПакет = ТаблРаспределенияДокументовПоВкладкам.Количество()>1;
	
	Если ТекущаяВкладка <> Неопределено Тогда
		ЗаполнитьРеквизитыПараметрами(СтрокаСпискаВыгрузки());
	Иначе
		ЗаполнитьРеквизитыПараметрами(ТаблРаспределенияДокументовПоВкладкам[0].СтрокаСпискаВыгрузки);
	КонецЕсли;
		
	Organization 	= Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(СтрокаСпискаВыгрузки.Отправитель);
	UserPermissions = Organization.GetUserPermissions();
	МогуЗапрашиватьСогласованиеПодпись = UserPermissions.CanRequestResolutions;
	
	Если ТекущаяВкладка <> Неопределено И ЭлементыФормы.ПанельДокументыПакета.ТекущаяСтраница <> ТекущаяВкладка Тогда
		ЭлементыФормы.ПанельДокументыПакета.ТекущаяСтраница= ТекущаяВкладка;
	Иначе
			
		Попытка
			ОбновитьДанныеДокумента();
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
			"Внимание!", "Не удалось сформировать печатную форму документа",
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ТекстОшибки));
			
			Возврат Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ОткрытьМодально();
	
КонецФункции

Процедура ЗаполнитьТаблРаспределенияДокументовПоВкладкам(МассивДокументовПакета, ДокументИнициатор)
	
	ТаблицаПодходящихВкладок = Новый ТаблицаЗначений;
	ТаблицаПодходящихВкладок.Колонки.Добавить("СтраницаПанели");
	ТаблицаПодходящихВкладок.Колонки.Добавить("СодержимоеЭтоВПФ");
	
	Для каждого СтрокаМассива из МассивДокументовПакета Цикл
		
		НоваяСтрока = ТаблРаспределенияДокументовПоВкладкам.Добавить();
					
		НоваяСтрока.СтрокаСпискаВыгрузки = СтрокаМассива;
		
		ТипДокумента = СтрокаМассива.ТипДокумента;
		
		Если Найти(ТипДокумента, "тестовый")>0 Тогда
			ТипДокумента = СокрЛП(Сред(ТипДокумента, 1, Найти(ТипДокумента, "тестовый")-2));
		КонецЕсли;
		
		Если ТаблРаспределенияДокументовПоВкладкам.Количество()=1 Тогда
			СтраницаПанели = ЭлементыФормы.ПанельДокументыПакета.Страницы.Страница1;
		Иначе
			СтраницаПанели = ЭлементыФормы.ПанельДокументыПакета.Страницы.Добавить();
		КонецЕсли;
		
		НоваяСтрока.ЗакладкаПанели = СтраницаПанели.Имя;
		
		СтраницаПанели.Заголовок		 = ТипДокумента;
		СтраницаПанели.КартинкаЗаголовка = ?(СтрокаМассива.Вкл, ЭДО_БиблиотекаКартинок().УстановленаПометка, ЭДО_БиблиотекаКартинок().СнятаПометка);
		
		Если НЕ ДокументИнициатор = Неопределено
			 И  ДокументИнициатор = СтрокаМассива.Документ 
		Тогда
			ДобавляемаяСтрока = ТаблицаПодходящихВкладок.Добавить();
			ДобавляемаяСтрока.СтраницаПанели	= СтраницаПанели;
			ДобавляемаяСтрока.СодержимоеЭтоВПФ	= ЗначениеЗаполнено(СтрокаМассива.ВнешняяПечатнаяФорма) = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПодходящихВкладок.Количество() = 1 Тогда
		ТекущаяВкладка = ТаблицаПодходящихВкладок[0].СтраницаПанели;
	ИначеЕсли ТаблицаПодходящихВкладок.Количество() > 1 Тогда
		Массив = ТаблицаПодходящихВкладок.НайтиСтроки(Новый Структура("СодержимоеЭтоВПФ", Ложь));
		Если Массив.Количество() >= 1 Тогда
			ТекущаяВкладка = Массив[0].СтраницаПанели;
		Иначе
			ТекущаяВкладка = ТаблицаПодходящихВкладок[0].СтраницаПанели;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриОткрытии()
	
	КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
					
КонецПроцедуры

Функция	СтрокаСпискаВыгрузки()
	
	Возврат ТаблРаспределенияДокументовПоВкладкам.Найти(ЭлементыФормы.ПанельДокументыПакета.ТекущаяСтраница.Имя, "ЗакладкаПанели").СтрокаСпискаВыгрузки;
	
КонецФункции

//// ВИЗУАЛИЗАЦИЯ

Процедура УправлениеВидимостью()
	
	СтрокаСпискаВыгрузки = СтрокаСпискаВыгрузки();
	
	Если	СтрокаСпискаВыгрузки.DocumentType = "XmlTorg12"
		ИЛИ СтрокаСпискаВыгрузки.DocumentType = "XmlAcceptanceCertificate" Тогда
		
		УстановитьДоступностьКнопки("НастроитьПараметрыПодписания", Истина)
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСпискаВыгрузки.ФункцияУПД) Тогда
		
		УстановитьДоступностьКнопки("НастроитьПараметрыПодписания", ЗначениеЗаполнено(ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СтрокаКонтекста(СтрокаСпискаВыгрузки.Отправитель).ОтпечатокСертификата));
		
	Иначе
		УстановитьДоступностьКнопки("НастроитьПараметрыПодписания", Ложь)
	КонецЕсли;
	
	ПредупреждатьОСтаромФормате = ЛЕВ(СтрокаСпискаВыгрузки.DocumentType, 7) = "Invoice" И ПустаяСтрока(СтрокаСпискаВыгрузки.ФункцияУПД);
	УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПредупрежденияОСтаромФормате,
	?(ПредупреждатьОСтаромФормате, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Право));

	УстановитьДоступностьКнопки("НастроитьДополнительныеПараметры", ЗначениеЗаполнено(ВнешняяПечатнаяФорма) И ИмяМодуляИнтеграции <> "Модуль_ИнтеграцияУТ102");
	
	Если НЕ ОтправкаНевозможна И НЕ Односторонний Тогда 
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПредупреждения, РежимСверткиЭлементаУправления.Низ);
	КонецЕсли;
	
	Если Односторонний Тогда
		ЭлементыФормы.Надпись1.Заголовок = "Документ не требует ответной подписи";
	КонецЕсли;
	
	Если НЕ ТребуетсяНомерЗаказа Тогда
		ЭлементыФормы.НомерЗаказа.Видимость 		= Ложь;
		Элементыформы.НадписьНомерЗаказа.Видимость 	= Ложь;
	КонецЕсли;	
	
	Если  Найти(ТипДокумента, "Счет на оп") = 0
		И Найти(ТипДокумента, "Акт") = 0
		И ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина
	Тогда
	    
		УстановитьДоступностьКнопки("ПередатьНаСогласование", Ложь);
		УстановитьДоступностьКнопки("ПередатьНаПодписание", Ложь);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СтрокаКонтекста(СтрокаСпискаВыгрузки.Отправитель).ОтпечатокСертификата) Тогда
		УстановитьДоступностьКнопки("НастроитьПараметрыПодписания", Ложь);
	КонецЕсли;
	
	Если ЭтоПакет Тогда
		
		ДокументПомеченДляВыгрузки = Ложь;
		
		СтрокаСпискаВыгрузки = СтрокаСпискаВыгрузки();
		
		ДокументПомеченДляВыгрузки = СтрокаСпискаВыгрузки.Вкл И (НЕ ЗначениеЗаполнено(СтрокаСпискаВыгрузки.Id) ИЛИ Найти(СтрокаСпискаВыгрузки.Id, "усл:") > 0);
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина Тогда
			ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.Доступность = ДокументПомеченДляВыгрузки;
		Иначе
			ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.Доступность = ?(ПустаяСтрока(СписокОшибок) И НЕ (ОтправкаНевозможна) И ДокументПомеченДляВыгрузки, Истина, Ложь);
		КонецЕсли;
		
		ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюСогласование.Кнопки.ПередатьНаСогласование.Доступность = МогуЗапрашиватьСогласованиеПодпись И ДокументПомеченДляВыгрузки;
		ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюСогласование.Кнопки.ПередатьНаПодпись.Доступность 		= МогуЗапрашиватьСогласованиеПодпись И ДокументПомеченДляВыгрузки;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.Доступность = ?(ПустаяСтрока(СписокОшибок) И НЕ (ОтправкаНевозможна), Истина, Ложь);
		КонецЕсли;
		
		ЭлементыФормы.ПанельДокументыПакета.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	КонецЕсли;
	
	ЭлементыФормы.НадписьНастроитьСписокОтправки.Видимость = ЭтоПакет;
	
	Если ТаблРаспределенияДокументовПоВкладкам.Количество()>1 Тогда
		ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.Текст = "Подписать и отправить пакет документов";
	Иначе
		ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.Текст = "Подписать и отправить";
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодписатьИОтправить.КнопкаПоУмолчанию = Истина;
	
	СкопироватьКнопки(ЭлементыФормы.КоманднаяПанель1.Кнопки, ЭлементыФормы.КоманднаяПанель.Кнопки);
	
КонецПроцедуры

Процедура ДобавитьУдалитьПодменюСогласования(Добавить)
	
	Если Добавить Тогда
		
		Если ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("ПодменюСогласование") = Неопределено Тогда
			
			ИндексЭлемента = ЭлементыФормы.КоманднаяПанель1.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("ПодписатьИОтправить"));
			
			ЭлементыФормы.КоманднаяПанель1.Кнопки.Добавить("Разделитель3", ТипКнопкиКоманднойПанели.Разделитель);
			ЭлементыФормы.КоманднаяПанель1.Кнопки.Добавить("ПодменюСогласование", ТипКнопкиКоманднойПанели.Подменю, "Согласование");
			ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюСогласование.Кнопки.Добавить("ПередатьНаСогласование", ТипКнопкиКоманднойПанели.Действие, "Передать на согласование", Новый Действие("КоманднаяПанель1ПередатьНаСогласование"));
			ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюСогласование.Кнопки.Добавить("ПередатьНаПодпись"	  , ТипКнопкиКоманднойПанели.Действие, "Передать на подписание"	 , Новый Действие("КоманднаяПанель1ПередатьНаПодписание"));
			
		КонецЕсли;
		
	Иначе
		
		Если ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти("ПодменюСогласование") <> Неопределено Тогда
			
			ЭлементыФормы.КоманднаяПанель1.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюСогласование);
			ЭлементыФормы.КоманднаяПанель1.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанель1.Кнопки.Разделитель3);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКнопки(ИмяКнопки, ДоступностьКнопки)
	
	КнопкаПанели = ЭлементыФормы.КоманднаяПанель1.Кнопки.Найти(ИмяКнопки);
	Если КнопкаПанели <> Неопределено Тогда
		КнопкаПанели.Доступность = ДоступностьКнопки;
	КонецЕсли;
	
КонецПроцедуры

//// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПанельДокументыПакетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьРеквизитыПараметрами(СтрокаСпискаВыгрузки());
	
	ОбновитьДанныеДокумента();
	
КонецПроцедуры

Процедура КоманднаяПанель1НастроитьДополнительныеПараметры(Кнопка)
	
	ФормаДополнительныхПараметров = ПолучитьФорму("Справочник.ВнешниеОбработки.Форма.ФормаПараметровОбработки");
	
	ФормаДополнительныхПараметров.ХранилищеПараметрыОбработки = Новый ХранилищеЗначения(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_ДополнительныеПараметры(ВнешняяПечатнаяФорма));
	
	Результат = ФормаДополнительныхПараметров.ОткрытьМодально();
	
	Если Результат <> Неопределено Тогда
		ПараметрыВПФ(ВнешняяПечатнаяФорма).ДополнительныеПараметры = Результат.Получить();
		ОбновитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1НастроитьПараметрыПодписания(Кнопка)
	
	НастроитьПараметрыПодписания();
	
	ОбновитьДанныеДокумента();

КонецПроцедуры

Процедура НастроитьПараметрыПодписания()
	
	СтрокаСпискаВыгрузки = СтрокаСпискаВыгрузки();
	
	Если СтрокаСпискаВыгрузки.DocumentType = "XmlTorg12" Тогда
		
		НоваяФорма = ПолучитьФорму("ФормаНастройкиПодписиТорг12");
		НоваяФорма.ФункцияУПД = СтрокаСпискаВыгрузки.ФункцияУПД;
		
	ИначеЕсли СтрокаСпискаВыгрузки.DocumentType = "XmlAcceptanceCertificate" Тогда
		
		НоваяФорма = ПолучитьФорму("ФормаНастройкиПодписиАкт");
		НоваяФорма.ФункцияУПД = СтрокаСпискаВыгрузки.ФункцияУПД;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСпискаВыгрузки.ФункцияУПД) Тогда 
		
		НоваяФорма = ПолучитьФорму("ФормаНастройкиПодписиУПД");
		НоваяФорма.Исходящие 		= Истина;
		НоваяФорма.ДляКорректировки = 	  СтрокаСпискаВыгрузки.ФункцияУПД = "КСЧФ"
									  ИЛИ СтрокаСпискаВыгрузки.ФункцияУПД = "ДИС"
									  ИЛИ СтрокаСпискаВыгрузки.ФункцияУПД = "КСЧФДИС";
		
	КонецЕсли;
	
	НоваяФорма.Организация = СтрокаСпискаВыгрузки.Отправитель;
	НоваяФорма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПодписатьИОтправитьНажатие(Элемент)
	
	ОтправкаДокументаНаСогласование = Ложь;
	
	Если ТребуетсяНомерЗаказа И ЗначениеЗаполнено(НомерЗаказа)=Ложь Тогда 
		Предупреждение("Не указан номер заказа", , "Дикдок");
		Возврат;
	КонецЕсли;	
	
	Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
	ЭлементыФормы.ТабПоле.Доступность 				= Ложь;
	ЭлементыФормы.НадписьОтправка.Заголовок 		= "Производится подготовка пакета документов";
	
	ПодключитьОбработчикОжидания("ВыгрузкаОбработчик", 0.1, Истина);
	
КонецПроцедуры

Процедура ПодразделениеКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	CounteragentID = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(СтрокаСпискаВыгрузки().Получатель, MyBoxId);
	стПодразделениеКонтрагента = ПолучитьФорму("ФормаВыбораОрганизацииПодразделения").ВыбратьПодразделениеКонтрагентаДиадок(MyBoxId,CounteragentID , ToDepartmentID);
	
	Если стПодразделениеКонтрагента <>Неопределено Тогда
		ПодразделениеКонтрагента = CounteragentName + ?(НЕ ПустаяСтрока(стПодразделениеКонтрагента.ПредставлениеПодразделения), " (" + стПодразделениеКонтрагента.ПредставлениеПодразделения + ")", "");
		ToDepartmentID = стПодразделениеКонтрагента.DepartmentID;
	Иначе
		ПодразделениеКонтрагента = CounteragentName;
	КонецЕсли;
КонецПроцедуры

Процедура ПодразделениеКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПодразделениеКонтрагента = CounteragentName;
	ToDepartmentID = "";
КонецПроцедуры

Процедура HTMLДокументonclick(Элемент, pEvtObj)
	pEvtObj.returnValue = Ложь;
	попытка 
		ТекстСсылки = стрЗаменить(pEvtObj.srcElement.parentElement.document.activeElement.href, "about:", "");
		ТекстСсылки = стрЗаменить(ТекстСсылки, "blank", "");
	исключение 
		Возврат
	конецПопытки;	
	Если найти(ТекстСсылки, "ВАЛЮТА")>0 Тогда 
		гуид = прав(ТекстСсылки, стрДлина(ТекстСсылки)-7);
		СсылкаНаЭлемент = справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			открытьФРМ(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;
	ИначеЕсли найти(текстСсылки, "СПРАВОЧНИКВАЛЮТ")>0 Тогда 
		ОткрытьФрм(справочники.Валюты.ПолучитьФормуСписка());
	ИначеЕсли найти(текстСсылки, "ОКВ")> 0 Тогда 
		открытьФРМ(Справочники.Валюты.ПолучитьФорму("ФормаПодбораИзКлассификатора"));
	ИначеЕсли найти(Текстссылки, "ЕДИНИЦА")>0 Тогда 
		стрДан = Сред(ТекстСсылки, 9);
		позРазд = Найти(стрДан, ":");
		типСправочника = Лев(стрДан, позРазд - 1);
		гуид = Сред(стрДан, позРазд + 1);
		
		СсылкаНаЭлемент = Вычислить("справочники." + типСправочника + ".ПолучитьСсылку(Новый УникальныйИдентификатор(гуид))");
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			ОткрытьФрм(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;
	ИначеЕсли найти(текстСсылки, "СПРАВОЧНИКЕДИНИЦ")>0 Тогда 
		ОткрытьФрм(справочники.КлассификаторЕдиницИзмерения.ПолучитьФормуСписка());
	ИначеЕсли найти(текстСсылки, "ОКЕИ")> 0 Тогда 
		открытьФРМ(Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора"));
	ИначеЕсли найти(Текстссылки, "СТРАНА")>0 Тогда 
		гуид = прав(ТекстСсылки, стрДлина(ТекстСсылки)-7);
		СсылкаНаЭлемент = справочники.КлассификаторСтранМира.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			ОткрытьФрм(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;
	ИначеЕсли найти(текстСсылки, "СПРАВОЧНИКСТРАН")>0 Тогда 
		ОткрытьФрм(справочники.КлассификаторСтранМира.ПолучитьФормуСписка());
	ИначеЕсли найти(текстСсылки, "ОКСМ")> 0 Тогда 
		
		открытьФРМ(Справочники.КлассификаторСтранМира.ПолучитьФорму("ФормаПодбораИзКлассификатора"));

	ИначеЕсли найти(Текстссылки, "КОНТРАГЕНТ")>0 Тогда 
		гуид = прав(ТекстСсылки, стрДлина(ТекстСсылки)-11);
		СсылкаНаЭлемент = справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			ОткрытьФрм(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;
	ИначеЕсли найти(Текстссылки, "ОРГАНИЗАЦИЯ")>0 Тогда 
		гуид = прав(ТекстСсылки, стрДлина(ТекстСсылки)-12);
		СсылкаНаЭлемент = справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			ОткрытьФрм(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;
   ИначеЕсли найти(Текстссылки, "СЧЕТФАКТУРАВЫДАННЫЙ")>0 Тогда 
		гуид = прав(ТекстСсылки, стрДлина(ТекстСсылки)-20);
		СсылкаНаЭлемент = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(гуид));
		Если значениеЗаполнено(ссылкаНаЭлемент) Тогда
			ОткрытьФрм(СсылкаНаЭлемент.ПолучитьФорму());
		КонецЕсли;   
	ИначеЕсли найти(ТекстСсылки, "КАРТОЧКА:")>0 Тогда
		СтрокаИД = прав(ТекстСсылки, СтрДлина(ТекстСсылки)-9);
		Если найти(строкаИД, ":")>0 Тогда
			BoxID = лев(строкаИД, найти(строкаИД, ":")-1);
			DocID = прав(строкаИД, стрДлина(СтрокаИД) - найти(строкаИД, ":"));
			
			Док =  Модуль_РаботаССерверомДиадок.ПолучитьДокументДиадок(DocID, BoxId) ;
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Док, ЭтаФорма);
 		КонецЕсли;
	ИначеЕсли 	найти(Текстссылки, "НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ")>0 Тогда
		
		НастроитьПараметрыПодписания();
		
		ОбновитьДанныеДокумента();
		
	ИначеЕсли Найти(ТекстСсылки, "НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА") > 0 Тогда
		Модуль_РаботаССерверомДиадок.ПоказатьСтраницуСотрудниковВДиадоке(MyBoxId);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ПередатьНаСогласование(Кнопка)
	
	ОтправкаДокументаНаСогласование = Истина;
	ResolutionRequestType 			= "ApprovementRequest";
	
	Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
	ЭлементыФормы.ТабПоле.Доступность 				= Ложь;
	ЭлементыФормы.НадписьОтправка.Заголовок 		= "Производится подготовка пакета документов";
	
	ПодключитьОбработчикОжидания("ВыгрузкаОбработчик", 0.1, Истина);

КонецПроцедуры

Процедура КоманднаяПанель1ПередатьНаПодписание(Кнопка)
	
	ОтправкаДокументаНаСогласование = Истина;
	ResolutionRequestType 			= "SignatureRequest";
	
	Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
	ЭлементыФормы.ТабПоле.Доступность 				= Ложь;
	ЭлементыФормы.НадписьОтправка.Заголовок 		= "Производится подготовка пакета документов";
	
	ПодключитьОбработчикОжидания("ВыгрузкаОбработчик", 0.1, Истина);
	
КонецПроцедуры

Процедура НадписьНастроитьСписокОтправкиНажатие(Элемент)
	
	Список = Новый СписокЗначений;
	
	ВГраница = ТаблРаспределенияДокументовПоВкладкам.Количество() - 1;
	
	Для ИндексСтроки= 0 ПО ВГраница Цикл
		
		СтрокаСпискаВыгрузки = ТаблРаспределенияДокументовПоВкладкам[ИндексСтроки].СтрокаСпискаВыгрузки;
		
		ТипДокумента = СтрокаСпискаВыгрузки.ТипДокумента;
		Если Найти(ТипДокумента, "тестовый")>0 Тогда
			ТипДокумента = СокрЛП(Сред(ТипДокумента, 1, Найти(ТипДокумента, "тестовый")-2));
		КонецЕсли;
	
		ПредставлениеДокумента = " " + ТипДокумента;
		Если ЗначениеЗаполнено(СтрокаСпискаВыгрузки.ВнешняяПечатнаяФорма) = Ложь Тогда
			ПредставлениеДокумента = ПредставлениеДокумента + " № " + СтрокаСпискаВыгрузки.Документ.Номер + " от " + Формат(СтрокаСпискаВыгрузки.Документ.Дата, "ДЛФ=Д");
		КонецЕсли;
		
		Список.Добавить(ИндексСтроки, ПредставлениеДокумента, СтрокаСпискаВыгрузки.Вкл);
						
	КонецЦикла;
	
	ФормаВводаСписка = ПолучитьФорму("ФормаВводаСпискаЗначений", ЭтаФорма);
	ФормаВводаСписка.Заголовок 		 = "Документы пакета";
	ФормаВводаСписка.СписокЭлементов = Список;
			
	Результат =	ФормаВводаСписка.ОткрытьМодально();
	
	Если Результат = Истина Тогда
		
		Для каждого Элемент из ФормаВводаСписка.СписокЭлементов Цикл
			
			Стр = ТаблРаспределенияДокументовПоВкладкам[Элемент.Значение];
			
			Стр.СтрокаСпискаВыгрузки.Вкл = Элемент.Пометка;
				
			ЭлементыФормы.ПанельДокументыПакета.Страницы[Стр.ЗакладкаПанели].КартинкаЗаголовка = ?(Элемент.Пометка, ЭДО_БиблиотекаКартинок().УстановленаПометка, ЭДО_БиблиотекаКартинок().СнятаПометка);
			
		КонецЦикла;
		
		УправлениеВидимостью();
		
	КонецЕсли;
	
КонецПроцедуры

//// ОБРАБОТЧИКИ ОЖИДАНИЯ

Процедура ВыгрузкаОбработчик()
	
	ЗакрыватьФорму = Истина;
	
	Попытка
		
		СтрокаСпискаВыгрузки = ТаблРаспределенияДокументовПоВкладкам[0].СтрокаСпискаВыгрузки;
		
		ПараметрыОтправкиНаСогласование = Неопределено;
		Если ОтправкаДокументаНаСогласование Тогда
			
			ПараметрыОтправкиНаСогласование = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(СтрокаСпискаВыгрузки.Отправитель, Organization, ResolutionRequestType, "ПервичнаяПередачаНаОбработку");
			Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
				Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Модуль_ИнтеграцияОбщий.ЭтоСФ(СсылкаНаОбъект) = Истина Тогда
			DocumentType = "Invoice";
		ИначеЕсли НЕ Найти(ТипДокумента, "Акт сверки")=0 Тогда
			DocumentType = "ReconciliationAct";
		ИначеЕсли НЕ Найти(ТипДокумента, "Акт")=0 Тогда
			DocumentType = "XmlAcceptanceCertificate";
		ИначеЕсли НЕ Найти(ТипДокумента, "Торг-12")=0 Тогда			
			DocumentType = "XmlTorg12";
		ИначеЕсли НЕ Найти(ТипДокумента, "Счет")=0 Тогда
			DocumentType = "NonformalizedProforma";
		ИначеЕсли Найти(ТипДокумента, "УПД") > 0 Тогда
			DocumentType = "UniversalTransferDocument";
		КонецЕсли; 
		
		Если НЕ СуществующийЭДДляУдаления = Неопределено Тогда
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СсылкаНаОбъект, "", "", DocumentType); 
		КонецЕсли;
		
		ПараметрыSendTask =	Новый Структура();
		//Заполняем параметры одинаковые для всего пакета
		ПараметрыSendTask.Вставить("Получатель", 						СтрокаСпискаВыгрузки.Получатель);
		ПараметрыSendTask.Вставить("CounteragentID", 					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(ПараметрыSendTask.Получатель));
		ПараметрыSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
		ПараметрыSendTask.Вставить("ParentDocumentId", 					Неопределено);
		ПараметрыSendTask.Вставить("IdОтправленого", 					"");
		ПараметрыSendTask.Вставить("Организация", 						СтрокаСпискаВыгрузки.Отправитель);
		
		ГрузополучательСсылка = Модуль_ИнтеграцияОбщий.ПолучитьГрузополучателяПоДокументу(СтрокаСпискаВыгрузки.Документ);
		ПараметрыSendTask.Вставить("Грузополучатель",					ГрузополучательСсылка);
		
		МассивСтрокДляВыгрузки = ТаблРаспределенияДокументовПоВкладкам.ВыгрузитьКолонку("СтрокаСпискаВыгрузки");
		
		МассивСтрокСПометкой = Новый Массив;
		Если МассивСтрокДляВыгрузки.Количество()>1 Тогда
			Для каждого СтрокаСпискаВыгрузки из МассивСтрокДляВыгрузки Цикл
				Если СтрокаСпискаВыгрузки.вкл Тогда
					МассивСтрокСПометкой.Добавить(СтрокаСпискаВыгрузки);	
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли МассивСтрокДляВыгрузки.Количество()=1 Тогда
			//без проверки отметили галочкой или нет
			МассивСтрокСПометкой.Добавить(МассивСтрокДляВыгрузки[0]);			
		КонецЕсли;
		
		ПараметрыSendTask.Вставить("МассивДокументовПакета", 			МассивСтрокСПометкой);
		
		ДобавитьСертификатыДляШифрования(ПараметрыSendTask);
		
		ТаблицаСоответствияCustomIdСсылке1С = ИнициироватьТаблицуСоответствияCustomIdСсылке1С();
				
		ЭлементыФормы.НадписьОтправка.Заголовок = "Производится отправка пакета документов";
		
		МассивDocuments = Модуль_РаботаССерверомДиадок.ОтправитьПакет(ПараметрыSendTask, ТаблицаСоответствияCustomIdСсылке1С);
				
		Если НЕ СуществующийЭДДляУдаления = Неопределено Тогда
			СуществующийЭДДляУдаления.Delete();
		КонецЕсли;
				
		СоотвПараметрОповещения = Новый Соответствие;
		Для каждого Document из МассивDocuments Цикл
			DocumentID 	= Document.DocumentId;
			CustomID	= Document.CustomDocumentId;
			
			МассивДокументов 	= ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomID));
			ДокументСсылка 		= МассивДокументов[0].ДокументСсылкаВ1С;
			
			СоотвПараметрОповещения.Вставить(ДокументСсылка, DocumentID);
		КонецЦикла;
		
		Оповестить("ПеревыставлениеДокумента", СоотвПараметрОповещения, ЭтаФорма);
		
	Исключение
		
		ДанныеОшибки = ОписаниеОшибки();
		
		Если Найти(ДанныеОшибки, "<Structure")>0 Тогда
			//возвращается структура сериализованная в xml
			ДанныеОшибки = Сред(ДанныеОшибки, Найти(ДанныеОшибки, "<Structure"), СтрДлина(ДанныеОшибки));
			
			СтруктураОшибки 	= ДесериализоватьДанные(ДанныеОшибки); 
			ТекстОшибки 		= СтруктураОшибки.СписокОшибок;
			ДокументИнициатор 	= СтруктураОшибки.ДокументСсылка;
		Иначе
			//возвращается обычная строка
			ТекстОшибки 		= ДанныеОшибки;
			ДокументИнициатор 	= Неопределено;	
		КонецЕсли;
		
		ФормаОшибки = ПолучитьФорму("ФормаОбработкиОшибкиВыгрузкиДокумента");
		
		Если Найти(ТекстОшибки, "<head>")=0 Тогда
			
			Если МассивСтрокДляВыгрузки.Количество()>1 Тогда
				ТекстОшибки = "При выгрузке пакета документов произошла ошибка: 
				|"+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ОписаниеОшибки());
			Иначе
				ДокументСсылка = МассивСтрокДляВыгрузки[0].Документ;
				ТекстОшибки = "При выгрузке документа "+ДокументСсылка+" произошла ошибка: 
				|"+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ОписаниеОшибки());
			КонецЕсли;
			
			Если Найти(ТекстОшибки, "Не настроены параметры подписания!") > 0 Тогда
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + "Для отправки документов заполните параметры подписания.";
			
				ФормаОшибки.РежимОтображения = "КнопкаЗаполнитьПараметрыПодписанияУПД";
				ФормаОшибки.ДополнительныеПараметры = Новый Структура;
				ФормаОшибки.ДополнительныеПараметры.Вставить("Исходящие",		 	Истина);
				ФормаОшибки.ДополнительныеПараметры.Вставить("ДляКорректировки",	МассивСтрокДляВыгрузки[0].ФункцияУПД = "КСЧФ"
																			  		ИЛИ МассивСтрокДляВыгрузки[0].ФункцияУПД = "ДИС"
																			  		ИЛИ МассивСтрокДляВыгрузки[0].ФункцияУПД = "КСЧФДИС");
				ФормаОшибки.ДополнительныеПараметры.Вставить("Организация", 		МассивСтрокДляВыгрузки[0].Отправитель);
				
			Иначе
				
				ФормаОшибки.РежимОтображения = "ТолькоКнопкаЗакрыть";
				
			КонецЕсли;
			
		Иначе 
						
			Если МассивСтрокДляВыгрузки.Количество() > 1 Тогда
				ТекстОшибки = "При формировании файла для пакета документов обнаружены ошибки." + Символы.ПС + Символы.ПС + "Перейдите в пакет документов для получения подробной информации.";
			Иначе
				ТекстОшибки = "При формировании файла для " + МассивСтрокДляВыгрузки[0].Документ + " обнаружены ошибки." + Символы.ПС + Символы.ПС + "Перейдите в карточку документа для получения более подробной информации.";
			КонецЕсли;
			
			ФормаОшибки.РежимОтображения = "ТолькоКнопкаЗакрыть";
			
		КонецЕсли;	
		
		ФормаОшибки.ТекстОшибки = ТекстОшибки; 
		Результат = ФормаОшибки.ОткрытьМодально();
		
		ЗакрыватьФорму = Ложь;
		
		Если Результат = 1 Тогда //повторить
			ПодключитьОбработчикОжидания("ВыгрузкаОбработчик", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	
	Если ЗакрыватьФорму Тогда
		ЭлементыФормы.НадписьОтправка.Заголовок = "Пакет документов отправлен";
		ПодключитьОбработчикОжидания("ВыгрузкаОбработчик2", 0.1, Истина);
	Иначе 
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры

Процедура ВыгрузкаОбработчик2()
	
	ДатаВыводаЛайтбокса = ТекущаяДата();
	Пока ДатаВыводаЛайтбокса+1.5 > ТекущаяДата() Цикл
		н = 1;
	КонецЦикла;	
	
	ПараметрОповещения = Новый ТаблицаЗначений;
	ПараметрОповещения.Колонки.Добавить("ДокументСсылка");
	ПараметрОповещения.Колонки.Добавить("ТипДокумента");
		
	Для Каждого Document из МассивDocuments Цикл
		
		CustomDocumentId = Document.CustomDocumentId; 
		Для каждого СтрТаблицыРаспределения из ТаблРаспределенияДокументовПоВкладкам Цикл
			Если CustomDocumentId = СтрТаблицыРаспределения.СтрокаСпискаВыгрузки.CustomDocumentId Тогда	
				
				ДокументТип = СтрТаблицыРаспределения.СтрокаСпискаВыгрузки.ТипДокумента;
				ДокументТип = ?(ДокументТип="Счет на оп", "Счет на оплату", ДокументТип);
				
				НоваяСтрока = ПараметрОповещения.Добавить();
				НоваяСтрока.ДокументСсылка 	= СтрТаблицыРаспределения.СтрокаСпискаВыгрузки.Документ;
				НоваяСтрока.ТипДокумента 	= ДокументТип;
							
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;
	Оповестить("ДокументОтправлен", ПараметрОповещения);
	Закрыть(МассивDocuments);
		
КонецПроцедуры


//// РАБОТА С ДАННЫМИ

Процедура ОбновитьДанныеДокумента()
	
	СписокОшибок = "";
	
	СтрокаСпискаВыгрузки = СтрокаСпискаВыгрузки();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ФункцияУПД" , СтрокаСпискаВыгрузки.ФункцияУПД);
	ДопПараметры.Вставить("ДопСведения", ДопСведения);
	ДопПараметры.Вставить("ДанныеСотрудника", ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СтрокаКонтекста(СтрокаСпискаВыгрузки.Отправитель).ДанныеСотрудника);
	
	Если ЗначениеЗаполнено(СтрокаСпискаВыгрузки.ВнешняяПечатнаяФорма) Тогда 
		
		Результат = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Печать(СсылкаНаОбъект, ВнешняяПечатнаяФорма);
		
	ИначеЕсли Найти(СтрокаСпискаВыгрузки.ТипДокумента, "Акт сверки") > 0 Тогда
		
		НастройкиВПФ = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(СтрокаСпискаВыгрузки.Отправитель);
		
		Если ЗначениеЗаполнено(НастройкиВПФ.ДиадокВнешняяПечатнаяФормаСверки) Тогда
			Результат = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Печать(СсылкаНаОбъект, НастройкиВПФ.ДиадокВнешняяПечатнаяФормаСверки);
		Иначе
			Результат = Модуль_ЗаполнениеКонтента.СформироватьПечатнуюФормуАктаСверки(СсылкаНаОбъект);
		КонецЕсли;
		
	ИначеЕсли СтрокаСпискаВыгрузки.DocumentType = "XmlTorg12"
		ИЛИ   СтрокаСпискаВыгрузки.DocumentType = "UniversalTransferDocument"
		ИЛИ   СтрокаСпискаВыгрузки.DocumentType = "UniversalCorrectionDocument"
		ИЛИ   Модуль_ИнтеграцияОбщий.ЭтоСФ(СсылкаНаОбъект) Тогда
		
		Результат = СформироватьПечатнуюФормуСписокОшибокПоДокументу(СтрокаСпискаВыгрузки);
		
	ИначеЕсли СтрокаСпискаВыгрузки.DocumentType = "XmlAcceptanceCertificate" Тогда
		
		НастройкиВПФ = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(СтрокаСпискаВыгрузки.Отправитель);
		
		Если ЗначениеЗаполнено(НастройкиВПФ.ДиадокВнешняяПечатнаяФормаАкта) Тогда
			
			Результат = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Печать(СсылкаНаОбъект, НастройкиВПФ.ДиадокВнешняяПечатнаяФормаАкта);
			
			ПараметрыОтправкиВПФ = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_РезультатФункции(НастройкиВПФ.ДиадокВнешняяПечатнаяФормаАкта, "ПолучитьПараметрыОтправкиЧерезДиадок", Новый Структура("ДокументСсылка", СсылкаНаОбъект));
			
			Если  ТипЗнч(ПараметрыОтправкиВПФ) = Тип("Структура")
				И ПараметрыОтправкиВПФ.Свойство("ТребоватьОтветнойПодписи") 
				И ТипЗнч(ПараметрыОтправкиВПФ.ТребоватьОтветнойПодписи) = Тип("Булево") Тогда
				Односторонний =	НЕ ПараметрыОтправкиВПФ.ТребоватьОтветнойПодписи;
			КонецЕсли;
			
		Иначе
			
			Результат = СформироватьПечатнуюФормуСписокОшибокПоДокументу(СтрокаСпискаВыгрузки);
			
		КонецЕсли;

	ИначеЕсли Найти(ТипДокумента, "Счет на оп") <> 0 Тогда
		
		НастройкиВПФ = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(СтрокаСпискаВыгрузки.Отправитель);
		
		Если ЗначениеЗаполнено(НастройкиВПФ.ДиадокВнешняяПечатнаяФормаСчета) Тогда
			Результат = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Печать(СсылкаНаОбъект, НастройкиВПФ.ДиадокВнешняяПечатнаяФормаСчета);
		Иначе
			Результат = Модуль_ЗаполнениеКонтента.СформироватьПечатнуюФормуСчетаНаОплату(СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
		ТабДокумент = Результат;
	Иначе
		ТабДокумент  = Результат.Таблица;
		СписокОшибок = Результат.СписокОшибок;
	КонецЕсли;
	
	ЭлементыФормы.ТабПоле.ВставитьОбласть(ТабДокумент.Область());
	ЭлементыФормы.ТабПоле.Видимость = Истина;
	
	ЭлементыФормы.HTMLДокумент.УстановитьТекст(СписокОшибок);
	УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельHTMLДокумента, ?(ЗначениеЗаполнено(СписокОшибок), РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Право));
			
	УправлениеВидимостью();
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуСписокОшибокПоДокументу(СтрокаСпискаВыгрузки)
	
	Если 	СтрокаСпискаВыгрузки.ФункцияУПД = "СЧФ"
		ИЛИ СтрокаСпискаВыгрузки.ФункцияУПД = "ДОП"
		ИЛИ СтрокаСпискаВыгрузки.ФункцияУПД = "СЧФДОП" Тогда
		
		AttachmentVersion = "UniversalTransferDocument";
		
	ИначеЕсли СтрокаСпискаВыгрузки.ФункцияУПД = "КСЧФ"
		ИЛИ	  СтрокаСпискаВыгрузки.ФункцияУПД = "ДИС"
		ИЛИ	  СтрокаСпискаВыгрузки.ФункцияУПД = "КСЧФДИС" Тогда
		
		AttachmentVersion = "UniversalCorrectionDocument";
		
	Иначе
		AttachmentVersion = "";
	КонецЕсли;
	
	ТипКонтента = ПолучитьТипКонтента(AttachmentVersion, СтрокаСпискаВыгрузки.DocumentType);
	Content		= СобратьКонтентФормализованного(ТипКонтента, СтрокаСпискаВыгрузки);
	
	ПараметрыПФ = Новый Структура;
	ПараметрыПФ.Вставить("Content"	   , Content);
	ПараметрыПФ.Вставить("ТипКонтента" , ТипКонтента);
	ПараметрыПФ.Вставить("ТипДокумента", СтрокаСпискаВыгрузки.DocumentType);
	ПараметрыПФ.Вставить("ПоказатьДопСведения", ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВизуализироватьДопПоля(СсылкаНаОбъект.Организация));
	
	Таблица		 = Модуль_РаботаСКонтентом.СформироватьПечатнуюФорму(ПараметрыПФ);
	СписокОшибок = ВалидироватьКонтентФормализованного(ТипКонтента, Content);
	
	Возврат Новый Структура("Таблица, СписокОшибок", Таблица, СписокОшибок);
	
КонецФункции

Функция СобратьКонтентФормализованного(ТипКонтента, СтрокаСпискаВыгрузки)
	
	Если ТипКонтента = "UtdSellerContent" Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ФункцияУПД"		, СтрокаСпискаВыгрузки.ФункцияУПД);
		ДопПараметры.Вставить("ДопСведения"		, ДопСведения);
		ДопПараметры.Вставить("ДанныеСотрудника", ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СтрокаКонтекста(СтрокаСпискаВыгрузки.Отправитель).ДанныеСотрудника);
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьUTDSellerContent(СсылкаНаОбъект, ДопПараметры);
	
	ИначеЕсли ТипКонтента = "UcdSellerContent" Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ФункцияУПД"		, СтрокаСпискаВыгрузки.ФункцияУПД);
		ДопПараметры.Вставить("ДопСведения"		, ДопСведения);
		ДопПараметры.Вставить("ДанныеСотрудника", ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СтрокаКонтекста(СтрокаСпискаВыгрузки.Отправитель).ДанныеСотрудника);
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьUCDSellerContent(СсылкаНаОбъект, ДопПараметры);
		
	ИначеЕсли ТипКонтента = "Torg12SellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьXmlTorg12Content(СсылкаНаОбъект, НомерЗаказа, ДопСведения);
		
	ИначеЕсли ТипКонтента = "AcceptanceCertificateSellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьXmlAcceptanceCertificateContent(СсылкаНаОбъект,, ДопСведения);
		
	ИначеЕсли ТипКонтента = "InvoiceContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьInvoiceContent(СсылкаНаОбъект, ДопСведения,, MyBoxID);
		
	ИначеЕсли ТипКонтента = "InvoiceCorrectionContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьInvoiceCorrectionContent(СсылкаНаОбъект,, ДопСведения);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ВалидироватьКонтентФормализованного(ТипКонтента, Content)
	
	Результат = Неопределено;
	
	Если ТипКонтента = "UtdSellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияUTD(Content, СсылкаНаОбъект);
	
	ИначеЕсли ТипКонтента = "UcdSellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияUCD(Content, СсылкаНаОбъект);
		
	ИначеЕсли ТипКонтента = "Torg12SellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияXmlTorg12Content(Content);
		
	ИначеЕсли ТипКонтента = "AcceptanceCertificateSellerContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияXmlAcceptanceCertificateContent(Content);
		
	ИначеЕсли ТипКонтента = "InvoiceContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияInvoiceContent(Content, СсылкаНаОбъект);
		
	ИначеЕсли ТипКонтента = "InvoiceCorrectionContent" Тогда
		
		Результат = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ВалидацияInvoiceCorrectionContent(Content, СсылкаНаОбъект);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции


Процедура ЗаполнитьРеквизитыПараметрами(СтрокаСпискаВыгрузки)
	
	СсылкаНаОбъект = СтрокаСпискаВыгрузки.Документ;
	
	ТипДокумента = СтрокаСпискаВыгрузки.ТипДокумента;
	Если Найти(ТипДокумента, "тестовый")>0 Тогда
		ТестовыйДокумент 	= Истина;
		ТипДокумента		= СокрЛП(Сред(ТипДокумента, 1, Найти(ТипДокумента, "тестовый")-2));
	Иначе
		ТестовыйДокумент	= Ложь;
	КонецЕсли;
	
	ТребуетсяНомерЗаказа 	= СтрокаСпискаВыгрузки.ТребуетсяНомерЗаказа;
	НомерЗаказа 			= СтрокаСпискаВыгрузки.НомерЗаказа;
	ДопСведения 			= СтрокаСпискаВыгрузки.ДопСведения;
	ВнешняяПечатнаяФорма 	= СтрокаСпискаВыгрузки.ВнешняяПечатнаяФорма;
			
КонецПроцедуры

Процедура ОткрытьФрм(фрм)
	
	Если фрм.Открыта() Тогда 
		фрм.Активизировать()
	Иначе 	
		фрм.ОткрытьМодально();
	КонецЕсли;
	ОбновитьДанныеДокумента();
	
КонецПроцедуры	

Процедура ДобавитьСертификатыДляШифрования(ПараметрыSendTask)
	
	ШифроватьДокументы			 = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ПараметрыSendTask.Организация, "ДиадокШифроватьДокументы"			 , "");
	ШифроватьДокументыКонтрагент = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ПараметрыSendTask.Получатель , "ДиадокШифроватьДокументыКонтрагент", "");
	
	Если ШифроватьДокументыКонтрагент = "ДА" ИЛИ (ШифроватьДокументы = "ДА" И ШифроватьДокументыКонтрагент <> "НЕТ") Тогда
		
		ПараметрыSendTask.Вставить("СертификатыДляШифрования", Новый Структура("СертификатыОтправителя, СертификатыПолучателя"));
		
		ПараметрыSendTask.СертификатыДляШифрования.СертификатыОтправителя = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СертификатыОрганизации(ПараметрыSendTask.Организация);
		ПараметрыSendTask.СертификатыДляШифрования.СертификатыПолучателя  = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СертификатыОрганизации(ПараметрыSendTask.Организация, ПараметрыSendTask.CounteragentID);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодробностиПроНовыйФорматНажатие(Элемент)
	
	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПоказатьИнформациюОНовыхФорматах(ТекущаяДата());
	
КонецПроцедуры

ТаблРаспределенияДокументовПоВкладкам = Новый ТаблицаЗначений;
ТаблРаспределенияДокументовПоВкладкам.Колонки.Добавить("СтрокаСпискаВыгрузки");
ТаблРаспределенияДокументовПоВкладкам.Колонки.Добавить("ЗакладкаПанели", Новый ОписаниеТипов("Строка"));

МогуЗапрашиватьСогласованиеПодпись = Ложь;