Перем КэшСвойств;

Функция ПолучитьСсылкуНаСвойство(НаименованиеСвойства) Экспорт
	
	Результат= НайтиСвойство(НаименованиеСвойства,,Истина);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если Результат = "СвойствоНеУникально" Тогда
			ВызватьИсключение "В плане видов характеристик ""Свойства объектов"" по наименованию """ + НаименованиеСвойства + """ обнаружено несколько элементов.
							  |Данное свойство должно существовать в единственном экземпляре.";
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьНазначениеПоНаименованию(НаименованиеРеквизита, ТипЗначения)
	Если ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоНаименованию(НаименованиеРеквизита).Пустая() Тогда
				НовыйЭлемент = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = НаименованиеРеквизита;
				НовыйЭлемент.ТипЗначения = ТипЗначения;
				НовыйЭлемент.Родитель = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
				НовыйЭлемент.Записать();
				Возврат НовыйЭлемент.Ссылка;
			Иначе
				Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоНаименованию(НаименованиеРеквизита).Ссылка;
			КонецЕсли;

КонецФункции	

Функция ПолучитьНазначениеСвойстваПоОписанию(Описание) Экспорт
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ВРег(Описание) = ВРег("Документ") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		
	ИначеЕсли ВРег(Описание) = ВРег("Организация") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
		
	ИначеЕсли ВРег(Описание) = ВРег("Контрагент") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		
	ИначеЕсли ВРег(Описание) = ВРег("Склад") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
		
	ИначеЕсли ВРег(Описание) = ВРег("Подразделение") Тогда
		
		Если  ПолучитьПрофильКонфигурации().НаименованиеСправочникаПодразделений = "ПодразделенияОрганизаций"
			И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияУТ102" Тогда 
			
			Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
		Иначе 
			Возврат ПолучитьНазначениеПоНаименованию("Справочник ""Подразделения""", Тип("СправочникСсылка.Подразделения"));
		КонецЕсли;	
		
	ИначеЕсли ВРег(Описание) = ВРег("Договор") Тогда 
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" Тогда
			Возврат ПолучитьНазначениеПоНаименованию("Справочник ""Договоры Контрагентов""", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		Иначе
			Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов;
		КонецЕсли;
		
	ИначеЕсли ВРег(Описание) = ВРег("ВнешняяПечатнаяФорма") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
		
	ИначеЕсли ВРег(описание) = ВРег("Константа") Тогда 
		
		Возврат ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники;
		
	КонецЕсли;
	
	ВызватьИсключение("Неизвестное описание свойства " + Описание);
	
КонецФункции

Функция ПроверитьНаличиеСвойствОбъектов(СоотвествиеСвойствОбъектов) Экспорт 
	 НенайденныеСвойства = Новый Массив;
	 Для каждого ОписаниеСвойства из   СоотвествиеСвойствОбъектов цикл 
		 Если НайтиСвойство(ОписаниеСвойства.ключ, ПолучитьНазначениеСвойстваПоОписанию(ОписаниеСвойства.значение) ) = Неопределено Тогда
			НенайденныеСвойства.Добавить(ОписаниеСвойства.ключ);
		КонецЕсли;
	 КонецЦикла;
	 
	 Возврат  НенайденныеСвойства
	
КонецФункции	

Функция СоздатьСвойстваОбъектов(СоотвествиеСвойствОбъектов) Экспорт 
	
	СозданныеСвойства = Новый Массив;
	  
	Для каждого ОписаниеСвойства Из СоотвествиеСвойствОбъектов Цикл
		
		НазначениеСвойства = ПолучитьНазначениеСвойстваПоОписанию(ОписаниеСвойства.Значение);
		НайденноеСвойствоСсылка = НайтиСвойство(ОписаниеСвойства.Ключ, НазначениеСвойства);
		
		Если НЕ ЗначениеЗаполнено(НайденноеСвойствоСсылка) Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
			
			СвойствоОбъект.Наименование 		= ОписаниеСвойства.Ключ;
			СвойствоОбъект.ТипЗначения 			= Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50));
			СвойствоОбъект.НазначениеСвойства 	= ПолучитьНазначениеСвойстваПоОписанию(ОписаниеСвойства.Значение);
			
			СвойствоОбъект.УстановитьНовыйКод();
			
			СвойствоОбъект.Записать();
			
			СозданныеСвойства.Добавить(ОписаниеСвойства.Ключ);
		
		ИначеЕсли НайденноеСвойствоСсылка.ПометкаУдаления Тогда
			
			НайденноеСвойствоОбъект = НайденноеСвойствоСсылка.ПолучитьОбъект();
			НайденноеСвойствоОбъект.УстановитьПометкуУдаления(Ложь);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СозданныеСвойства;
	  
КонецФункции	


// Переносит значения из старых свойств в новые
//
// Параметры:
//  СоотвествиеСвойствОбъектов - Соответствие - коллекция имен и назначений всех свойств модуля
//
Процедура РеструктуризироватьЗначенияСвойствОбъектов(СоотвествиеСвойствОбъектов) Экспорт 
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат;
	КонецЕсли; 
	
	РеструктуризироватьСвойства_Справочники(СоотвествиеСвойствОбъектов);
	
	РеструктуризироватьСвойства_ДДКонтр();
	
КонецПроцедуры

// Перенос значений из свойств назначенных на группу "Справочники" в свойства назначенных на элементы "Справочник_Организации" и "Справочник_Контрагенты".
//
// Параметры:
//  СоотвествиеСвойствОбъектов - Соответствие - коллекция имен и назначений всех свойств модуля
//
Процедура РеструктуризироватьСвойства_Справочники(СоотвествиеСвойствОбъектов) 
	
	НовыеСвойства = Новый Массив;
	
	Для Каждого КлючИЗначение ИЗ СоотвествиеСвойствОбъектов Цикл
		
		НазначениеСвойства = ПолучитьНазначениеСвойстваПоОписанию(КлючИЗначение.Значение);
		
		Если 	НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации
			ИЛИ НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты Тогда
			
			НовоеСвойство = НайтиСвойство(КлючИЗначение.Ключ,  НазначениеСвойства);
			
			Если ЗначениеЗаполнено(НовоеСвойство) Тогда
				НовыеСвойства.Добавить(НовоеСвойство);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСтарыхСвойств.Объект,
	|	ЗначенияСтарыхСвойств.Значение,
	|	ЗначенияСтарыхСвойств.Свойство КАК СтароеСвойство,
	|	НовыеСвойства.Ссылка КАК НовоеСвойство,
	|	ВЫБОР
	|		КОГДА ЗначенияНовыхСвойств.Свойство ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписатьЗначениеНовогоСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК НовыеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СвойстваОбъектов КАК СтарыеСвойства
	|		ПО НовыеСвойства.Наименование = СтарыеСвойства.Наименование
	|			И (НЕ СтарыеСвойства.ПометкаУдаления)
	|			И НовыеСвойства.Ссылка <> СтарыеСвойства.Ссылка
	|			И (СтарыеСвойства.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочники))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСтарыхСвойств
	|		ПО (СтарыеСвойства.Ссылка = ЗначенияСтарыхСвойств.Свойство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияНовыхСвойств
	|		ПО (ЗначенияСтарыхСвойств.Объект = ЗначенияНовыхСвойств.Объект)
	|			И НовыеСвойства.Ссылка = ЗначенияНовыхСвойств.Свойство
	|ГДЕ
	|	НовыеСвойства.Ссылка В(&НовыеСвойства)
	|ИТОГИ ПО
	|	СтароеСвойство");
	
	Запрос.УстановитьПараметр("НовыеСвойства", НовыеСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Сообщить(Строка(ТекущаяДата()) + " - Выполняется реструктуризация свойств модуля назначенные на группу ""Справочники""...");
		
		РеструктуризироватьСвойства_ПоРезультатуЗапроса(РезультатЗапроса);
		
		Сообщить(Строка(ТекущаяДата()) + " - Завершена реструктуризация свойств модуля назначенные на группу ""Справочники""" + Символы.ПС);
		
	КонецЕсли;
		
КонецПроцедуры

// Перенос значений из свойств с наименованием ДДКонтр_XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX в общее свойство с наименованием "ДДКонтр_".
//
Процедура РеструктуризироватьСвойства_ДДКонтр() 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСтарыхСвойств.Объект,
	|	ЗначенияСтарыхСвойств.Значение,
	|	ЗначенияСтарыхСвойств.Свойство КАК СтароеСвойство,
	|	&НовоеСвойство,
	|	ВЫБОР
	|		КОГДА ЗначенияНовогоСвойства.Свойство ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписатьЗначениеНовогоСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СтарыеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСтарыхСвойств
	|		ПО СтарыеСвойства.Ссылка = ЗначенияСтарыхСвойств.Свойство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияНовогоСвойства
	|		ПО (ЗначенияСтарыхСвойств.Объект = ЗначенияНовогоСвойства.Объект)
	|			И (ЗначенияНовогоСвойства.Свойство = &НовоеСвойство)
	|ГДЕ
	|	НЕ СтарыеСвойства.ПометкаУдаления
	|	И СтарыеСвойства.Ссылка <> &НовоеСвойство
	|	И СтарыеСвойства.Наименование ПОДОБНО ""ДДКонтр_%""
	|ИТОГИ ПО
	|	СтароеСвойство");
	
	Запрос.УстановитьПараметр("НовоеСвойство", НайтиСвойство("ДДКонтр_", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты));
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Сообщить(Строка(ТекущаяДата()) + " - Выполняется реструктуризация свойства модуля ""ДДКонтр_""...");
		
		РеструктуризироватьСвойства_ПоРезультатуЗапроса(РезультатЗапроса);
		
		Сообщить(Строка(ТекущаяДата()) + " - Завершена реструктуризация свойства модуля ""ДДКонтр_""" + Символы.ПС);
		
	КонецЕсли;
		
КонецПроцедуры

// Общая логика по переносу значений из старых свойств в новые через результат запроса.
// После переноса значений, помечает на удаление старые свойства.
//
// Параметры:
//  РезультатЗапроса - Результат запроса - Результат запроса с предопределенными полями и группировкой по старому свойству.
//
Процедура РеструктуризироватьСвойства_ПоРезультатуЗапроса(РезультатЗапроса) 
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаСтароеСвойство = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтароеСвойство.Следующий() Цикл
		
		Выборка = ВыборкаСтароеСвойство.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Объект) Тогда
				
				НачатьТранзакцию(); // Для сохранения консистентности данных.
				
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект	= Выборка.Объект;
				Запись.Свойство = Выборка.СтароеСвойство;
				Запись.Удалить();
				
				Если Выборка.ЗаписатьЗначениеНовогоСвойства Тогда
					
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект	= Выборка.Объект;
					Запись.Свойство = Выборка.НовоеСвойство;
					Запись.Значение = Выборка.Значение;
					Запись.Записать();
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаСтароеСвойство.СтароеСвойство.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры


Функция НайтиОбъект(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = Неопределено ,ЗначениеСвойства2 = Неопределено) Экспорт
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НаименованиеСвойства2 <> Неопределено 
		И ПустаяСтрока(НаименованиеСвойства2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
		СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой2));
		Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СвойствоСсылка2 = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
		Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
		Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	З.Объект,
		|	З.Значение2
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ЗначенияСвойств.Объект,
		|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
		|	ИЗ
		|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств2
		|		ПО
		|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
		|			И ЗначенияСвойств2.Свойство = &Свойство2
		|		ГДЕ
		|			ЗначенияСвойств.Свойство = &Свойство
		|			И ЗначенияСвойств.Значение = &Значение
		|) З
		|ГДЕ
		|	З.Значение2 = &Значение2";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗначенияСвойств.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.Свойство = &Свойство
		|	И ЗначенияСвойств.Значение = &Значение";
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
	КонецЕсли;
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат ?(Выборка.Следующий(), Выборка.Объект, Неопределено);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция НайтиОбъекты(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, НазначениеСвойстваСтрокой2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НаименованиеСвойства2 <> Неопределено 
		И ПустаяСтрока(НаименованиеСвойства2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
		СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой2));
		Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СвойствоСсылка2 = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияСвойства.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойства2
		|		ПО ЗначенияСвойства.Объект = ЗначенияСвойства2.Объект
		|			И (ЗначенияСвойства2.Свойство = &Свойство2)
		|			И (ЗначенияСвойства2.Значение = &Значение2)
		|ГДЕ
		|	ЗначенияСвойства.Свойство = &Свойство
		|	И ЗначенияСвойства.Значение = &Значение");
		
		Запрос.УстановитьПараметр("Свойство" , СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение" , ЗначениеСвойства);
		
		Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
		Запрос.УстановитьПараметр("Значение2", ЗначениеСвойства2);
		
	Иначе
		
		Запрос= Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Объект ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Свойство = &Свойство И Значение = &Значение");
		
		Запрос.УстановитьПараметр("Свойство" , СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение" , ЗначениеСвойства);
		
	КонецЕсли;
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	РезультатЗапроса= Запрос.Выполнить();
	Запрос= Неопределено;
	
	МассивОбъектов= Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		РезультатЗапроса= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			МассивОбъектов.Добавить(Выборка.Объект);
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат МассивОбъектов;
	
КонецФункции

Функция НайтиОбъектыПоМассивуЗначений(НаименованиеСвойства, НазначениеСвойстваСтрокой, МассивЗначенийСвойства) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Объект,
	|	Свойство,
	|	Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ГДЕ
	|	Свойство = &Свойство И Значение В (&Значение)");
	
	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	Запрос.УстановитьПараметр("Значение", МассивЗначенийСвойства);
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	ТаблицаОбъектов= Запрос.Выполнить().Выгрузить();
	ТаблицаОбъектов.Индексы.Добавить("Значение");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) И НЕ ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	СвойствоСсылка= НайтиСвойство(НаименованиеСвойства,  ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Запрос= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект = &Объект И Свойство = &Свойство");
	Запрос.УстановитьПараметр("Объект"	, Объект);
	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);

	РезультатЗапроса= Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Значение = Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
		
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначенияСвойстваОбъектов(Объекты, НаименованиеСвойства, НазначениеСвойстваСтрокой) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объекты) И НЕ ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства,  ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Объект, Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект В(&Объекты) И Свойство = &Свойство");
	Запрос.УстановитьПараметр("Объекты"	, Объекты);
	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		РезультатЗапроса = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Объект, Выборка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой, Значение) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) И НЕ ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат;
	КонецЕсли;
	
	Свойство= НайтиСвойство(НаименованиеСвойства, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат;
		КонецЕсли;
		
		ВызватьИсключение "Запись свойства объекта: """ + НаименованиеСвойства + """ невозможна. Свойство не создано";
		
	КонецЕсли;
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Запись= РегистрыСведений.КонтурDiadoc_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
	Иначе	
		Запись= РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	КонецЕсли; 
	
	Запись.Объект= 	 Объект;
	Запись.Свойство= Свойство;
	Запись.Значение= Значение;
	
	Запись.Записать();
	
КонецПроцедуры

Функция ПолучитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат ПолучитьЗначениеСвойства(Неопределено, НаименованиеКонстанты, "Константа", ЗначениеПоУмолчанию)
	Иначе
		Объект = Константы.ВалютаРегламентированногоУчета.Получить();
		Возврат ПолучитьЗначениеСвойства(Объект, НаименованиеКонстанты, "Константа", ЗначениеПоУмолчанию)
	КонецЕсли; 
	
КонецФункции

Процедура УстановитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеКонстанты) Экспорт
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		УстановитьЗначениеСвойства(Неопределено, НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
	Иначе
		Объект = Константы.ВалютаРегламентированногоУчета.Получить();
		УстановитьЗначениеСвойства(Объект, НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСвойство(НаименованиеСвойства, НазначениеСвойства= Неопределено, ПроверятьУникальность= Ложь) Экспорт
	
	Если ИспользоватьПодсистемуКонтурDiadoc Тогда
		Возврат НаименованиеСвойства;
	КонецЕсли; 
	
	Если КэшСвойств = Неопределено Тогда
		КэшСвойств= Новый ТаблицаЗначений;
		КэшСвойств.Колонки.Добавить("НаименованиеСвойства", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		КэшСвойств.Колонки.Добавить("НазначениеСвойства");
		КэшСвойств.Колонки.Добавить("Свойство");
		КэшСвойств.Индексы.Добавить("НаименованиеСвойства, НазначениеСвойства");
	КонецЕсли;

	// Поиск в кэше
	НайденныеСтроки= КэшСвойств.НайтиСтроки(Новый Структура("НаименованиеСвойства, НазначениеСвойства", НаименованиеСвойства, НазначениеСвойства));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		Возврат НайденныеСтроки[0].Свойство;
	КонецЕсли;	
	
	//Поиск в базе данных
	// Убрали пометку на удаление в связи с обращением https://jira.diadoc.ru/browse/DDSUPPORT-14887
	//*Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2 Ссылка ИЗ ПланВидовХарактеристик.СвойстваОбъектов ГДЕ НЕ ПометкаУдаления И Наименование = &НаименованиеСвойства");
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2 Ссылка ИЗ ПланВидовХарактеристик.СвойстваОбъектов ГДЕ Наименование = &НаименованиеСвойства");
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	
	Если НазначениеСвойства <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И НазначениеСвойства = &НазначениеСвойства";
		Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	КонецЕсли; 
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		
		Если ПроверятьУникальность И Выборка.Количество() = 2 Тогда
			Возврат "СвойствоНеУникально";
		Иначе
			
			Выборка.Следующий();
			
			НоваяСтрока = КэшСвойств.Добавить();
			НоваяСтрока.НаименованиеСвойства= НаименованиеСвойства;
			НоваяСтрока.НазначениеСвойства=   НазначениеСвойства;
			НоваяСтрока.Свойство= 	  		  Выборка.Ссылка;
			
			Возврат Выборка.Ссылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойствоПредставлениеСклада(ИдентификаторыСвойств, НазначенияСвойств)
	
	СвойствоПредставлениеСклада=	ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	
	НазначениеПредставленияСклада= 	ПолучитьНазначениеСвойстваПоОписанию(НазначенияСвойств.Получить(ИдентификаторыСвойств.ПредставлениеСклада)); 
	СвойствоПредставлениеСклада=	НайтиСвойство(ИдентификаторыСвойств.ПредставлениеСклада, НазначениеПредставленияСклада);
	
	Возврат СвойствоПредставлениеСклада;
	
КонецФункции

Функция ПолучитьСвойствоИдентификаторСклада(ИдентификаторыСвойств, НазначенияСвойств)
	
	СвойствоИдентификаторСклада=	ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	
	НазначениеИдентификаторСклада= 	ПолучитьНазначениеСвойстваПоОписанию(НазначенияСвойств.Получить(ИдентификаторыСвойств.ИдентификаторСклада)); 
	СвойствоИдентификаторСклада=	НайтиСвойство(ИдентификаторыСвойств.ИдентификаторСклада, НазначениеИдентификаторСклада);
	
	Возврат СвойствоИдентификаторСклада;
	
КонецФункции

Функция ПолучитьТаблицуСвойстваСкладов(ИдентификаторыСвойств, НазначенияСвойств)Экспорт
    
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ РазрешенныеСкладыВ1С
		|ИЗ
		|	Справочник.Склады КАК Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ПодразделенияВДиадок
		|ИЗ
		|	РазрешенныеСкладыВ1С КАК Склады
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Склады.Ссылка = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоПредставлениеСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Склад,
		|	ПодразделенияВДиадок.Значение КАК ПодразделениеВДиадок,
		|	ЗначенияСвойствОбъектов.Значение КАК ПодразделениеДиадокId
		|ИЗ
		|	ПодразделенияВДиадок КАК ПодразделенияВДиадок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ПодразделенияВДиадок.Объект = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоИдентификаторСклада";	
		
	Запрос.УстановитьПараметр("СвойствоПредставлениеСклада", ПолучитьСвойствоПредставлениеСклада(ИдентификаторыСвойств, НазначенияСвойств));
	Запрос.УстановитьПараметр("СвойствоИдентификаторСклада", ПолучитьСвойствоИдентификаторСклада(ИдентификаторыСвойств, НазначенияСвойств));
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСписокСкладовСПодразделениямиИзДиадок()()

Функция ПолучитьНеобходимыеДляРаботыТипы() Экспорт
	НеобходимыеДляРаботыТипы = Новый Массив;
	НеобходимыеДляРаботыТипы.Добавить(Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов);
	Возврат НеобходимыеДляРаботыТипы;
КонецФункции

Функция ПроверитьПВХСвойствНаКвалификаторСтроки() Экспорт
	
	Если Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.КвалификаторыСтроки.Длина < 50 Тогда
		Предупреждение("В конфигурации плане видов характеристик ""Свойства объектов"" 
		|тип значения характеристик ""Строка"" имеет недостаточную длинну
		|необходимо минимум 50 символов");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
