
Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
	
	Если DocumentType = "NonformalizedProforma" Тогда
		Возврат "ИдентификаторДокументаВДиадокСч";
	ИначеЕсли DocumentType = "Invoice" Тогда
		Возврат "ИдентификаторДокументаВДиадокСФ";
	Иначе
		Возврат "ИдентификаторДокументаВДиадок";
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
	
	Если DocumentType = "NonformalizedProforma" Тогда
		Возврат "ИдентификаторЯщикДокументаВДиадокСч"
	ИначеЕсли DocumentType = "Invoice" Тогда
		Возврат "ИдентификаторЯщикДокументаВДиадокСФ"
	Иначе	
		Возврат "ИдентификаторЯщикДокументаВДиадок"
	КонецЕсли;	
	
КонецФункции 

Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Возврат СписокВидовДоговоров;
КонецФункции

Процедура ЗаполнениеТабличнойЧасти(ДокОбъект,ТабличнаяЧасть,ВидОперации)
	
	Для каждого стр Из ТабличнаяЧасть Цикл
			ИмяТЧ = "";
			Если (видОперации = "ВозвратОтПокупателя")  или (стр.Тип = "Товар") Тогда
				стрОбъект = ДокОбъект.Товары.Добавить();
				ИмяТЧ = "Товары";
				Если   (видОперации <> "ВозвратОтПокупателя") Тогда
					стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
					стрОбъект.Коэффициент = 1;
				КонецЕсли;	
			ИначеЕсли стр.Тип = "Оборудование" Тогда
				стрОбъект = ДокОбъект.Оборудование.Добавить();
				ИмяТЧ = "Оборудование";
				стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
				стрОбъект.Коэффициент = 1;
			ИначеЕсли стр.Тип = "Объект стр" Тогда 	
				стрОбъект = ДокОбъект.ОбъектыСтроительства.Добавить();
				ИмяТЧ = "ОбъектыСтроительства";
			ИначеЕсли стр.Тип = "НМА" Тогда	
				стрОбъект = ДокОбъект.НематериальныеАктивы.Добавить();
				ИмяТЧ = "НематериальныеАктивы";
	
			Иначе
				стрОбъект = ДокОбъект.Услуги.Добавить();
				ИмяТЧ = "Услуги";

				стрОбъект.Содержание = стр.НоменклатураИзЭД;
				стрОбъект.Номенклатура = стр.Номенклатура;
				
				Если НЕ ЗначениеЗаполнено(стрОбъект.СтатьяЗатрат) Тогда
					стрОбъект.СтатьяЗатрат = стрОбъект.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(стрОбъект.НоменклатурнаяГруппа) Тогда
					стрОбъект.НоменклатурнаяГруппа = стрОбъект.Номенклатура.НоменклатурнаяГруппаЗатрат;
				КонецЕсли;
				
				Если ДокОбъект.Метаданные().Реквизиты.найти("ПодразделениеОрганизации")<>Неопределено Тогда 
					стрОбъект.ПодразделениеОрганизации = ДокОбъект.ПодразделениеОрганизации;
				КонецЕсли;
				
				Если ДокОбъект.Метаданные().Реквизиты.найти("Подразделение")<>Неопределено Тогда 
					стрОбъект.Подразделение = ДокОбъект.Подразделение;
				КонецЕсли;
				
				
			КонецЕсли;
			
			Если стр.Тип =  "Объект стр" Тогда 
				стрОбъект.ОбъектСтроительства =   стр.Номенклатура;
			ИначеЕсли стр.Тип =  "НМА" Тогда 
				стрОбъект.НематериальныйАктив =   стр.Номенклатура;				
			Иначе 	
				стрОбъект.Номенклатура = стр.Номенклатура;
				стрОбъект.Количество = стр.Количество;
				стрОбъект.Цена = стр.Цена;
				Если ТабличнаяЧасть.Колонки.Найти("Серия") <> Неопределено Тогда
					стрОбъект.СерияНоменклатуры = Стр.Серия;
				КонецЕсли;
			КонецЕсли;	
			стрОбъект.Сумма = стр.Сумма;
			стрОбъект.СуммаНДС = стр.СуммаНДС;
			стрОбъект.СтавкаНДС = стр.СтавкаНДС;
			
		КонецЦикла;
	
	КонецПроцедуры
	
Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда 
		НовыйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	Иначе 	
		НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
		НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.НаСклад;
	КонецЕсли;	
	
	НовыйДокумент.ДоговорКонтрагента= Параметры.ДоговорКонтрагента;
	НовыйДокумент.ВалютаДокумента= НовыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НовыйДокумент.КратностьВзаиморасчетов= 1;
	НовыйДокумент.Склад= Параметры.Склад;
	
	Если ВидОперации <> "ВозвратОтПокупателя" Тогда
		НовыйДокумент.ДатаСчетаФактуры = параметры.ДатаВходящегоДокумента;
		НовыйДокумент.ВходящийНомер = параметры.НомерВходящегоДокумента;
	КонецЕсли;
	    
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		НовыйДокумент.Фирма = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		НовыйДокумент.Контрагент = стВероятныеПоля.Контрагент;
		ПриИзмененииЗначенияДоговора(НовыйДокумент, Неопределено, Константы.ВалютаРегламентированногоУчета.Получить(), ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(НовыйДокумент), "Покупка", "Товары");
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		ЗаполнениетабличнойЧасти(НовыйДокумент,ТабличнаяЧасть,ВидОперации);
	КонецЕсли;
	
	НовыйДокумент.СуммаВключаетНДС= СуммаВключаетНДС;
	НовыйДокумент.УчитыватьНДС= Истина;
	
	Возврат НовыйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ДокументОбъект.НомерСчетаФактуры= СокрЛП(Document.DocumentNumber);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Массив") Тогда
		ДокументыОснования= ДокументОснование;
	Иначе
		ДокументыОснования= Новый Массив;
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЕсли;
	
	ДокументОбъект= ДокументыОснования[0].ПолучитьОбъект();
	
	ДокументОбъект.НомерСчетаФактуры= СокрЛП(Document.DocumentNumber);
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ОсновнойДоговорКонтрагента КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО Контрагенты.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|			И (ДоговорыКонтрагентов.Фирма = &Организация)
	|			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|			И (ДоговорыКонтрагентов.ВидДоговора В (&СписокДоговоров))
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент"	   ,Контрагент);
	Запрос.УстановитьПараметр("Организация"	   ,Организация);
	Запрос.УстановитьПараметр("СписокДоговоров",СписокВидовДоговоров);
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	КонецЕсли;
		
КонецФункции



/////////////////////////////////////////////////////////////
// Связи объектов
/////////////////////////////////////////////////////////////

Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Если TaxRate = "10" ИЛИ TaxRate = "10.00" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли TaxRate = "18" ИЛИ TaxRate = "18.00" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли TaxRate = "0" Тогда
		Возврат перечисления.СтавкиНДС.НДС0
	ИначеЕсли (TaxRate = "") Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе 
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
	
	ПодходящаяЕИ = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕИ.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения ЕИ
		|ГДЕ
		|	ЕИ.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		пока  Выборка.Следующий() Цикл
			ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
			Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
				Возврат  Выборка.Ссылка;
			КонецЕсли;	
            Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
			Если коэф <> Неопределено Тогда 
				ПодходящаяЕИ = выборка.ссылка;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции

Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции

Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект);	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект);	
КонецФункции

Функция Документ_Организация(Документ) Экспорт

	Возврат Документ.Фирма

КонецФункции

Функция Организация_КПП(Организация) Экспорт

	Возврат ПолучитьЗначениеПериодическогоРеквизита(Организация, "КПП", '00010101')

КонецФункции

Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
	
	Результат= Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента");
	
	Результат.ДатаВходящегоДокумента=  ДокСсылка.ДатаСчетаФактуры;
	Результат.НомерВходящегоДокумента= ДокСсылка.ВходящийНомер;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
	
	Результат= Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента");
	
	Результат.ДатаВходящегоДокумента=  ДокСсылка.ДатаСчетаФактуры;
	Результат.НомерВходящегоДокумента= ДокСсылка.НомерСчетаФактуры;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	Если ДокСсылка.ДатаСчетаФактуры <> ДатаВходящегоДокумента ИЛИ ДокСсылка.ВходящийНомер <> НомерВходящегоДокумента Тогда
		
		Объект= ДокСсылка.ПолучитьОбъект();
		Объект.ДатаСчетаФактуры= ДатаВходящегоДокумента;
		Объект.ВходящийНомер= 	 НомерВходящегоДокумента;
		
		Попытка
			Объект.Записать();
			Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
			|у документа: " + докСсылка);
		Исключение
			Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
			|у документа: " + докСсылка);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	Если ДокСсылка.ДатаСчетаФактуры <> ДатаВходящегоДокумента ИЛИ ДокСсылка.НомерСчетаФактуры <> НомерВходящегоДокумента Тогда
		
		Объект= ДокСсылка.ПолучитьОбъект();
		Объект.ДатаСчетаФактуры=  ДатаВходящегоДокумента;
		Объект.НомерСчетаФактуры= НомерВходящегоДокумента;
		
		Попытка
			Объект.Записать();
			Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
			|у документа: " + докСсылка);
		Исключение
			Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
			|у документа: " + докСсылка);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.Фирма.Установить(Организация);
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Фирма.Доступность = Ложь;

	ФрмВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Возврат ФрмВыбора;	
КонецФункции

//{ СвязиМеждуДокументами
	 
	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		МассивСодержитРТУ= Ложь;
		Для Каждого СсылкаРНК ИЗ МассивСсылокРНК Цикл
			Если ТипЗнч(СсылкаРНК) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
				МассивСодержитРТУ= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСодержитРТУ Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка 
			|ИЗ
			|	Документ.СчетФактура
			|ГДЕ
			|	ДокументОснование В (&МассивСсылокРНК)");
			
			Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
			
			РезультатЗапроса= Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка= РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Возврат Выборка.Ссылка; 
			КонецЕсли;
			
		Иначе
			
			Возврат СсылкаРНК; // СсылкаРНК - последняя ссылка из МассивСсылокРНК
			
		КонецЕсли;
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами
