Перем Document, РежимСопоставления;
Перем ДатаНачала, ДатаОкончания;
Перем Организация;

Функция ВыбратьДокумент(_Document, _РежимСопоставления) Экспорт
	
	Document= 			_Document;
	РежимСопоставления= _РежимСопоставления;
	
	Возврат ОткрытьМодально();
	
КонецФункции


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Организация= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxIDDepartment_2_Организация(Document.OrganizationId, Document.Department);

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(,
		"Организация """+Document.Organization.Name+""" не найдена в базе 1С",
		"Организация """+Document.Organization.Name+""" из документа " + Модуль_РаботаССерверомДиадок.ПредставлениеЭД(Document) + " не найдена в базе 1С");
		
		Отказ= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЗаполнитьНачальноеПредставлениеФормы();
	
	УправлениеФормой();
	
	ОбновитьСписокДокументов();
	
КонецПроцедуры


Процедура ЗаполнитьНачальноеПредставлениеФормы()
	
	КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
	
	ЗаполнитьПериодПоРежиму();
	
	УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельКнопкаИзменитьРежим,
	?(Document.Direction = "Inbound" ИЛИ Document.Type = "Invoice", РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Низ));
	
КонецПроцедуры

Процедура УправлениеФормой()
	
	Если РежимСопоставления = "СопоставитьНакладную" Тогда
		
		ЭлементыФормы.КнопкаИзменитьРежим.Заголовок= "Создать новый документ в 1С...";
		
	ИначеЕсли РежимСопоставления= "СоздатьСФНаОсновании"  Тогда
		
		Элементыформы.НадписьЗаголовок.Заголовок= "Выберите основание для счета-фактуры";
		Элементыформы.КоманднаяПанель.Кнопки.КнопкаВыполнить.Текст= "Выбрать основание";
		ЭлементыФормы.КнопкаИзменитьРежим.Заголовок= "Сопоставить с документом в 1С...";
		ЭтаФорма.Заголовок= "Создание счет-фактуры";
		
	ИначеЕсли РежимСопоставления = "СопоставитьСчетФактуру" Тогда
		
		Элементыформы.НадписьЗаголовок.Заголовок= "Выберите счет-фактуру для сопоставления";
		Элементыформы.КоманднаяПанель.Кнопки.КнопкаВыполнить.Текст= "Сопоставить счет-фактуру";
		
		ЭлементыФормы.КнопкаИзменитьРежим.Заголовок= "Создать новый документ в 1С...";
		ЭтаФорма.Заголовок= "Сопоставление счет-фактуры";
		
	КонецЕсли;
	
	УстановитьВидимостьОбщейПометки();
	
КонецПроцедуры

Процедура УстановитьВидимостьОбщейПометки()
	
	ЭлементыФормы.ОбщаяПометка.Видимость=
	РежимСопоставления = "СоздатьСФНаОсновании"
	И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияУТ102"
	И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАльфаАвто41"
	И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияТКПТ";
	
	ЭлементыФормы.СписокПервичныхДокументов.Колонки.Пометка.Видимость= ЭлементыФормы.ОбщаяПометка.Видимость;
	
КонецПроцедуры


Процедура ВыполнитьОбработку()
	
	ТекущиеДанные= Элементыформы.СписокПервичныхДокументов.ТекущиеДанные;
	
	Если РежимСопоставления = "СоздатьСФНаОсновании" Тогда
		
		Если	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102"
			ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41"
			ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ"
			ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ"
			ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			
			Если СтрокаСпискаПервичныхДокументовКорректна(ТекущиеДанные) Тогда
				Закрыть(ТекущиеДанные.ДокументСсылка);
			КонецЕсли;

		Иначе
			
			МассивДокументовОснования= Новый Массив;
			
			ПомеченныеСтроки= СписокПервичныхДокументов.НайтиСтроки(Новый Структура("Пометка", Истина));
			
			Если (ПомеченныеСтроки.Количество() = 0 ИЛИ 
				  ПомеченныеСтроки.Количество() = 1 И ПомеченныеСтроки[0] = ТекущиеДанные)
				И СтрокаСпискаПервичныхДокументовКорректна(ТекущиеДанные) Тогда
				
				МассивДокументовОснования.Добавить(ТекущиеДанные.ДокументСсылка);
				
				Закрыть(МассивДокументовОснования);
				
			Иначе
				
				Для Каждого ПомеченнаяСтрока ИЗ ПомеченныеСтроки Цикл
					
					Если СтрокаСпискаПервичныхДокументовКорректна(ПомеченнаяСтрока) Тогда
						МассивДокументовОснования.Добавить(ПомеченнаяСтрока.ДокументСсылка);
					КонецЕсли;
					
				КонецЦикла;
					
				Если МассивДокументовОснования.Количество() > 0 Тогда
					Закрыть(МассивДокументовОснования);
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимСопоставления = "СопоставитьСчетФактуру" Тогда
		
		ТекущиеДанные= Элементыформы.СписокПервичныхДокументов.ТекущиеДанные;
		
		Если СтрокаСпискаПервичныхДокументовКорректна(ТекущиеДанные) Тогда
			
			Если ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СопоставитьСВыбраннойСчетФактурой(ТекущиеДанные.ДокументСсылка, Document) Тогда 
				Закрыть(ТекущиеДанные.ДокументСсылка);
			КонецЕсли;	
			
		КонецЕсли;
		
	ИначеЕсли РежимСопоставления = "СопоставитьНакладную" Тогда
		
		ТекущиеДанные= Элементыформы.СписокПервичныхДокументов.ТекущиеДанные;
		
		Если СтрокаСпискаПервичныхДокументовКорректна(ТекущиеДанные) Тогда
			
			Если ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СопоставитьСВыбраннойНакладной(ТекущиеДанные.ДокументСсылка, Document) Тогда 	
				Закрыть(ТекущиеДанные.ДокументСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция СтрокаСпискаПервичныхДокументовКорректна(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Предупреждение("Выберите документ.",,НаименованиеСистемы);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаТЧ.ТекстОшибки) Тогда
		Предупреждение(СтрокаТЧ.ТекстОшибки,,НаименованиеСистемы);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыполнитьОбработку();
	
КонецПроцедуры

Процедура КнопкаОткрытьДокумент1СНажатие(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.СписокПервичныхДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументСсылка) Тогда
		ТекущиеДанные.ДокументСсылка.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаУстановитьИнтервалНажатие(Кнопка)
	
	НастройкаПериода = Новый Настройкапериода;
	НастройкаПериода.ВариантНачала = ВариантГраницыИнтервала.КонкретнаяДата;
	НастройкаПериода.ВариантОкончания =?(ДатаОкончания = Дата(3999,12,31),ВариантГраницыИнтервала.БезОграничения,ВариантГраницыИнтервала.КонкретнаяДата);
	Настройкапериода.ДатаНачала = ДатаНачала;
	Настройкапериода.ДатаОкончания =  ?(НастройкаПериода.ВариантОкончания =  ВариантГраницыИнтервала.БезОграничения,Дата(1,1,1),ДатаОкончания);
	Если НастройкаПериода.Редактировать() Тогда 
		ДатаНачала = НастройкаПериода.ДатаНачала;
		Датаокончания = ?(НастройкаПериода.ВариантОкончания =  ВариантГраницыИнтервала.БезОграничения,Дата(3999,12,31),Настройкапериода.ДатаОкончания);
		ЗаполнитьНадписьПериод();
		ОбновитьСписокДокументов();
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаИзменитьРежимНажатие(Элемент)
	
	Если РежимСопоставления = "СопоставитьНакладную" Тогда
		
		Закрыть("Ввести");
		
	ИначеЕсли РежимСопоставления = "СоздатьСФНаОсновании" Тогда
		
		РежимСопоставления= "СопоставитьСчетФактуру";
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокСоздаватьСопоставлятьСчетаФактуры","Сопоставлять");
		УправлениеФормой();
		ОбновитьСписокДокументов();	
		Оповестить("ИзменениеРежимаСозданияСопоставленияСФ","Сопоставлять");
		
	ИначеЕсли РежимСопоставления = "СопоставитьСчетФактуру" Тогда
		
		РежимСопоставления= "СоздатьСФНаОсновании";
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокСоздаватьСопоставлятьСчетаФактуры","Создавать");
		УправлениеФормой();
		ОбновитьСписокДокументов();	
		Оповестить("ИзменениеРежимаСозданияСопоставленияСФ","Создавать");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбщаяПометкаПриИзменении(Элемент)
	
	Для каждого СтрокаТЧ Из СписокПервичныхДокументов Цикл
		Если ПустаяСтрока(СтрокаТЧ.ТекстОшибки) Тогда
			СтрокаТЧ.Пометка = ОбщаяПометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗаполнитьПериодПоРежиму()
	
	Если РежимСопоставления = "СоздатьСФНаОсновании" Тогда   
		
		ДатаНачала=    НачалоДня(Document.DocumentDate) - 5*24*60*60;
		ДатаОкончания= '39991231';
		
	ИначеЕсли РежимСопоставления = "СопоставитьСчетФактуру" Тогда
		
		ДатаНачала=    НачалоДня(Document.DocumentDate);
		ДатаОкончания= '39991231';
		
	ИначеЕсли РежимСопоставления = "СопоставитьНакладную" Тогда
		
		ДатаНачала=    НачалоДня(Document.documentDate);
		ДатаОкончания= МАКС(КонецДня(Document.documentDate), КонецДня(ТекущаяДата()));
		
	КонецЕсли;
	
	ЗаполнитьНадписьПериод();

КонецПроцедуры

Процедура ЗаполнитьНадписьПериод()
	
	ЭлементыФормы.НадписьПериод.Заголовок= "";
	
	Если РежимСопоставления = "СопоставитьНакладную" И Document.Direction = "Outbound" Тогда
		ЭлементыФормы.НадписьПериод.Заголовок= "Документы реализации";
	Иначе
		ЭлементыФормы.НадписьПериод.Заголовок= "Документы поступления";
	КонецЕсли;
	
	ЭлементыФормы.НадписьПериод.Заголовок= ЭлементыФормы.НадписьПериод.Заголовок + " ("+ ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПредставлениеПериодаДД(ДатаНачала, ДатаОкончания)+")";
	
КонецПроцедуры


Процедура ОбновитьСписокДокументов()
	
	СписокПервичныхДокументов.Очистить();
	
	СписокКонтрагентов= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьСписокАссоциированныхКонтрагентовДиадок(Document.Counteragent.Id);
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	Запрос.УстановитьПараметр("Организация"	 	  , Организация);
	Запрос.УстановитьПараметр("ДатаНачала" 	 	  , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	  , КонецДня(ДатаОкончания));
	
	Если РежимСопоставления = "СопоставитьСчетФактуру" Тогда
		Запрос.Текст= Модуль_ИнтеграцияОбщий.ТекстЗапросаПодборСчетовФактур(Document.Direction);
	ИначеЕсли РежимСопоставления = "СопоставитьНакладную" ИЛИ РежимСопоставления = "СоздатьСФНаОсновании" Тогда
		Запрос.Текст= Модуль_ИнтеграцияОбщий.ТекстЗапросаПодборНакладных(Document.Direction);
	КонецЕсли;
	
	ОбработкаСобытияПодключаемогоМодуля("ПередОбновлениемСпискаДокументовДляСопоставленияСНакладной", Новый Структура("Запрос, Document, РежимСопоставления", Запрос, Document, РежимСопоставления));
	
	Выборка= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока= СписокПервичныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.Картинка= ?(Выборка.Проведен, 0, 1);
		
		Если РежимСопоставления = "СоздатьСФНаОсновании" Тогда
			Если НоваяСтрока.ЕстьОснование Тогда
				НоваяСтрока.ТекстОшибки= "На основании данного документа уже создан счет-фактура!";
			КонецЕсли;
		Иначе
			Если ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Выборка.ДокументСсылка, Document.Type) <> Неопределено Тогда
				НоваяСтрока.ТекстОшибки= "Данный документ уже сопоставлен с документом в " + НаименованиеСистемы + "!";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Выборка= Неопределено;
	
	ПоказатьКомментарийКПустомуСписку(СписокКонтрагентов);
	
	УстановитьТекущуюСтрокуСпискаДокументов();

КонецПроцедуры

Процедура ПоказатьКомментарийКПустомуСписку(СписокКонтрагентов)
	
	Если СписокПервичныхДокументов.Количество() = 0 И СписокКонтрагентов.Количество() = 0 Тогда
		Элементыформы.НадписьСообщенияОПустомСписке.Видимость= Истина;
		Элементыформы.НадписьСообщенияОПустомСписке.Заголовок= "Нет сопоставленного контрагента.
		|Продавец: " + Document.counterAgent.Inn + "/" + Document.counterAgent.Kpp + ", """ + Document.counterAgent.Name + """";
	Иначе
		Элементыформы.НадписьСообщенияОПустомСписке.Заголовок= "";
		Элементыформы.НадписьСообщенияОПустомСписке.Видимость= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущуюСтрокуСпискаДокументов()
	
	Если Document.Type = "UniversalTransferDocument" ИЛИ Document.Type = "XmlTorg12" ИЛИ Document.Type = "XmlAcceptanceCertificate" ИЛИ Document.Type = "Invoice" Тогда
		
		НайденныеСтроки= СписокПервичныхДокументов.НайтиСтроки(Новый Структура("Сумма", Document.Total));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.СписокПервичныхДокументов.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


Процедура СписокПервичныхДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПомеченныеСтроки= СписокПервичныхДокументов.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если ПомеченныеСтроки.Количество() = 0 ИЛИ 
		 ПомеченныеСтроки.Количество() = 1 И ПомеченныеСтроки[0] = ВыбраннаяСтрока Тогда
		ВыполнитьОбработку();
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПервичныхДокументовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ ПустаяСтрока(Элемент.ТекущиеДанные.ТекстОшибки) Тогда
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Нет);
		ЭлементыФормы.ТекстОшибки.Заголовок= Элемент.ТекущиеДанные.ТекстОшибки;
	Иначе
		ЭлементыФормы.ТекстОшибки.Заголовок= "";
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Низ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПервичныхДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ПустаяСтрока(ОформлениеСтроки.ДанныеСтроки.ТекстОшибки) Тогда
		
		Для Каждого ОформлениеСтрокиЯчейка ИЗ ОформлениеСтроки.Ячейки Цикл
			
			Если ОформлениеСтрокиЯчейка.Имя <> "Пометка" И ОформлениеСтрокиЯчейка.Имя <> "Картинка" Тогда
				ОформлениеСтрокиЯчейка.ЦветФона= WEBЦвета.СветлоСерый;
			КонецЕсли;
			
		КонецЦикла;
			
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
