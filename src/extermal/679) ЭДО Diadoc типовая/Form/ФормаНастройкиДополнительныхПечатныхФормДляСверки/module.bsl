
Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
	Успех = Истина;
	результат = Новый Структура;
	результат.Вставить("ДиадокСпособОтправкиСверки" , ДокументОснованиеСверки);
	Если (ИспользоватьСтандартнуюФормуСверки = 0) или (ДокументОснованиеСверки="НеФормировать") Тогда
		результат.Вставить("ДиадокВнешняяПечатнаяФормаСверки" , "");
	Иначе
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФормаСверки)=Ложь Тогда
			Предупреждение("Не указана внешняя печатная форма
			|для акта сверки взаиморасчетов!", ,НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		Результат.Вставить("ДиадокВнешняяПечатнаяФормаСверки", строка(ВнешняяПечатнаяФормаСверки.УникальныйИдентификатор()));
		
	КонецЕсли;
	
	НастройкиВнешнихПечатныхФорм = результат;
	ЭтаФорма.закрыть();
КонецПроцедуры

Процедура НастроитьСписокВыбора()
	ЭлементыФормы.ДокументОснованиеСверки.СписокВыбора.Добавить("АктСверкиВзаиморасчетов","Акт сверки");
	ЭлементыФормы.ДокументОснованиеСверки.СписокВыбора.Добавить("НеФормировать","Не формировать");
КонецПроцедуры

Процедура ПриОткрытии()
	
	КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
	НастроитьСписокВыбора();
	ВнешняяПечатнаяФормаСверки = справочники.ВнешниеОбработки.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(НастройкиВнешнихПечатныхФорм.ДиадокСпособОтправкиСверки) Тогда
		ДокументОснованиеСверки =  НастройкиВнешнихПечатныхФорм.ДиадокСпособОтправкиСверки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаСверки) Тогда
		Попытка 
			ВнешняяПечатнаяФормаСчета = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВнешняяОбработкаПоGUID(НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаСверки);
		Исключение 
			предупреждение("Не удалось найти внешнюю печатную форму.
			|Необходимо заново выбрать нужный элемент.",,НаименованиеСистемы);
		КонецПопытки;
		
		ИспользоватьСтандартнуюФормуСверки = 1;
	КонецЕсли;	
	
		   
	НастроитьДоступность();

КонецПроцедуры


Процедура НастроитьДоступность()
	Элементыформы.ВнешняяПечатнаяФормаСверки.Доступность = (ИспользоватьСтандартнуюФормуСверки=1) и (ДокументОснованиеСверки<>"НеФормировать");
	Элементыформы.ИспользоватьСтандартнуюФормуСверки.Доступность =   (ДокументОснованиеСверки<>"НеФормировать");
	Элементыформы.ИспользоватьВнешнююФормуСверки.Доступность =   (ДокументОснованиеСверки<>"НеФормировать") ;
КонецПроцедуры	

Процедура ИспользоватьСтандартнуюФормуСчетаПриИзменении(Элемент)
	НастроитьДоступность()
КонецПроцедуры

Функция  получитьСписокВнешнихПечатныхФорм(МетаданныеОбъектаДлявыбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВнешниеОбработкиПринадлежность.Ссылка
	 	|ИЗ
	 	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	 	|ГДЕ
		|	//ВнешниеОбработкиПринадлежность.СсылкаОбъекта В(&МетаданныеОбъекта)   и
	 	|	 ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления = Ложь
	 	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма)";
	 
	Запрос.УстановитьПараметр("МетаданныеОбъекта", МетаданныеОбъектаДлявыбора);
	 
	МассивВыбора =   Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(МассивВыбора);
	
	Возврат Результат;	 
	 
КонецФункции	

Функция ВыбратьВнешнююФПИзСписка(СписокВыбора)
	
	фрм = справочники.ВнешниеОбработки.ПолучитьФормуВыбора();
	отбор = фрм.СправочникСписок.Отбор.Ссылка;
	отбор.видсравнения = видСравнения.ВСписке;
	отбор.использование = Истина;
	отбор.значение = СписокВыбора;
	
	Возврат фрм.ОткрытьМодально();

КонецФункции

Процедура ВнешняяПечатнаяФормаСчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МетаданныеОбъектаДлявыбора = Новый списокЗначений;
	МетаданныеОбъектаДлявыбора.Добавить(Документы.АктСверкиВзаиморасчетов.ПустаяСсылка());
	
	СписокВыбора = получитьСписокВнешнихПечатныхФорм(МетаданныеОбъектаДлявыбора);
	выбранноеЗначение = ВыбратьВнешнююФПИзСписка(СписокВыбора);
	
	Если ЗначениеЗаполнено(выбранноеЗначение) Тогда 
		ВнешняяПечатнаяФормаСверки = выбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

