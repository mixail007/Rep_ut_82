//кэш ссылок на свойства
Перем ТаблицаСсылокНаСвойства;

Перем ОбъектКонстант;

Перем КэшСвойств;

Функция ПолучитьСсылкуНаСвойство(НаименованиеСвойства) Экспорт
	
	МассивСвойств=	НайтиСвойстваПоНаименованию(НаименованиеСвойства);
	
	Если МассивСвойств.Количество() = 1 Тогда
		Возврат МассивСвойств[0];
	Иначе
		Если МассивСвойств.Количество() > 1 Тогда
			ВызватьИсключение "В плане видов характеристик ""Свойства объектов"" по наименованию """ + НаименованиеСвойства + """ обнаружено несколько элементов.
								|Данное свойство должно существовать в единственном экземпляре.";
			//Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
						//"Ошибка в базе данных",
						//"Не удалось точно определить свойство """ + НаименованиеСвойства + """",
						//"В плане видов характеристик ""Свойства объектов"" по наименованию """ + НаименованиеСвойства + """ обнаружено несколько элементов.
						//|По требованию модуля, данное свойство должно быть в единственном экземпляре.");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьНаличиеСвойствОбъектов(СоотвествиеСвойствОбъектов) Экспорт
	 НенайденныеСвойства = Новый Массив;
	 Для каждого ОписаниеСвойства из   СоотвествиеСвойствОбъектов цикл 
		 Если НайтиСвойство(ОписаниеСвойства.ключ ) = Неопределено Тогда
			НенайденныеСвойства.Добавить(ОписаниеСвойства.ключ);
		КонецЕсли;
	 КонецЦикла;
	 
	 Возврат  НенайденныеСвойства

КонецФункции

Функция СоздатьСвойстваОбъектов(СоотвествиеСвойствОбъектов)  Экспорт
	СозданныеСвойства = Новый Массив;
	Для каждого ОписаниеСвойств Из СоотвествиеСвойствОбъектов Цикл
		Если НЕ ЗначениеЗаполнено(НайтиСвойство(ОписаниеСвойств.ключ)) Тогда
			СоздатьСвойство(ОписаниеСвойств.ключ);
			СозданныеСвойства.Добавить(ОписаниеСвойств.ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СозданныеСвойства;
КонецФункции

Процедура РеструктуризироватьЗначенияСвойствОбъектов(СоотвествиеСвойствОбъектов) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияСтарыхСвойств.Объект,
	|	ЗначенияСтарыхСвойств.Значение,
	|	ЗначенияСтарыхСвойств.Свойство КАК СтароеСвойство,
	|	&НовоеСвойство,
	|	ВЫБОР
	|		КОГДА ЗначенияНовогоСвойства.Свойство ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписатьЗначениеНовогоСвойства
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СтарыеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСтарыхСвойств
	|		ПО СтарыеСвойства.Ссылка = ЗначенияСтарыхСвойств.Свойство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияНовогоСвойства
	|		ПО (ЗначенияСтарыхСвойств.Объект = ЗначенияНовогоСвойства.Объект)
	|			И (ЗначенияНовогоСвойства.Свойство = &НовоеСвойство)
	|ГДЕ
	|	НЕ СтарыеСвойства.ПометкаУдаления
	|	И СтарыеСвойства.Ссылка <> &НовоеСвойство
	|	И СтарыеСвойства.Наименование ПОДОБНО ""ДДКонтр_%""
	|ИТОГИ ПО
	|	СтароеСвойство");
	
	Запрос.УстановитьПараметр("НовоеСвойство", НайтиСвойство("ДДКонтр_"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаСтароеСвойство = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтароеСвойство.Следующий() Цикл
			
			Выборка = ВыборкаСтароеСвойство.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Объект) Тогда
					
					НачатьТранзакцию(); // Для сохранения консистентности данных.
					
					Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
					Запись.Объект	= Выборка.Объект;
					Запись.Свойство = Выборка.СтароеСвойство;
					Запись.Удалить();
					
					Если Выборка.ЗаписатьЗначениеНовогоСвойства Тогда
						
						Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
						Запись.Объект	= Выборка.Объект;
						Запись.Свойство = Выборка.НовоеСвойство;
						Запись.Значение = Выборка.Значение;
						Запись.Записать();
						
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВыборкаСтароеСвойство.СтароеСвойство.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция НайтиОбъект(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, НазначениеСвойстваСтрокой2 = Неопределено, ЗначениеСвойства2 = Неопределено) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НаименованиеСвойства2 <> Неопределено 
		И ПустаяСтрока(НаименованиеСвойства2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
		СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
		Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СвойствоСсылка2 = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
		Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
		Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	З.Объект,
		|	З.Значение2
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ЗначенияСвойств.Объект,
		|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
		|	ИЗ
		|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств2
		|		ПО
		|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
		|			И ЗначенияСвойств2.Свойство = &Свойство2
		|		ГДЕ
		|			ЗначенияСвойств.Свойство = &Свойство
		|			И ЗначенияСвойств.Значение = &Значение
		|) З
		|ГДЕ
		|	З.Значение2 = &Значение2";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗначенияСвойств.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
		|ГДЕ
		|	ЗначенияСвойств.Свойство = &Свойство
		|	И ЗначенияСвойств.Значение = &Значение";
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Объект, Неопределено);
КонецФункции

Функция НайтиОбъекты(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, НазначениеСвойстваСтрокой2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НаименованиеСвойства2 <> Неопределено 
		И ПустаяСтрока(НаименованиеСвойства2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой));
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
		СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2, ПолучитьНазначениеСвойстваПоОписанию(НазначениеСвойстваСтрокой2));
		Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СвойствоСсылка2 = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияСвойства.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойства2
		|		ПО ЗначенияСвойства.Объект = ЗначенияСвойства2.Объект
		|			И (ЗначенияСвойства2.Свойство = &Свойство2)
		|			И (ЗначенияСвойства2.Значение = &Значение2)
		|ГДЕ
		|	ЗначенияСвойства.Свойство = &Свойство
		|	И ЗначенияСвойства.Значение = &Значение");
		
		Запрос.УстановитьПараметр("Свойство" , СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение" , ЗначениеСвойства);
		
		Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
		Запрос.УстановитьПараметр("Значение2", ЗначениеСвойства2);
		
	Иначе
		
		Запрос= Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Объект ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Свойство = &Свойство И Значение = &Значение");
		
		Запрос.УстановитьПараметр("Свойство" , СвойствоСсылка);
		Запрос.УстановитьПараметр("Значение" , ЗначениеСвойства);
		
	КонецЕсли;
	
	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
	
	РезультатЗапроса= Запрос.Выполнить();
	Запрос= Неопределено;
	
	МассивОбъектов= Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		РезультатЗапроса= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			МассивОбъектов.Добавить(Выборка.Объект);
		КонецЦикла;
		
	КонецЕсли;
			
	Возврат МассивОбъектов;
	
КонецФункции

Функция НайтиОбъектыПоМассивуЗначений(НаименованиеСвойства, НазначениеСвойстваСтрокой, МассивЗначенийСвойства) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
	Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойств.Объект,
	|	ЗначенияСвойств.Свойство,
	|	ЗначенияСвойств.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.Свойство = &Свойство
	|	И ЗначенияСвойств.Значение В(&Значение)";
	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	Запрос.УстановитьПараметр("Значение", МассивЗначенийСвойства);
	
	ТаблицаОбъектов=	Запрос.Выполнить().Выгрузить();
	ТаблицаОбъектов.Индексы.Добавить("Значение");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Запрос= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект = &Объект И Свойство.Наименование = &НаименованиеСвойства");
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Значение = Неопределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
		
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначенияСвойстваОбъектов(Объекты, НаименованиеСвойства, НазначениеСвойстваСтрокой) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объекты) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
	Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Объект, Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект В(&Объекты) И Свойство = &Свойство");
	Запрос.УстановитьПараметр("Объекты"	, Объекты);
	Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		РезультатЗапроса = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Объект, Выборка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой, Значение) Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Свойство= НайтиСвойство(НаименованиеСвойства);
	
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат;
		КонецЕсли;
		
		Свойство= СоздатьСвойство(НаименованиеСвойства);
		
	КонецЕсли;
	
	Запись= РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	
	Запись.Объект= 	 Объект;
	Запись.Свойство= Свойство;
	Запись.Значение= Значение;
	
	Запись.Записать();
	
КонецПроцедуры

Функция ПолучитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
	Возврат ПолучитьЗначениеСвойства(Справочники.Организации.ОсновнаяОрганизация, НаименованиеКонстанты, "Константа", ЗначениеПоУмолчанию)
	
КонецФункции

Процедура УстановитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеКонстанты) Экспорт
	
	УстановитьЗначениеСвойства(Справочники.Организации.ОсновнаяОрганизация, НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
	
КонецПроцедуры

Функция ПолучитьНеобходимыеДляРаботыТипы() Экспорт
	НеобходимыеДляРаботыТипы = Новый Массив;
	НеобходимыеДляРаботыТипы.Добавить(Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов);
	Возврат НеобходимыеДляРаботыТипы;
КонецФункции

Функция СоздатьСвойство(Наименование)
	СвойствоОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
	СвойствоОбъект.Наименование = Наименование;
	СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))  ;
	СвойствоОбъект.УстановитьНовыйКод();
	СвойствоОбъект.Записать();
	
	Возврат СвойствоОбъект.Ссылка;
КонецФункции

Функция НайтиСвойство(Наименование, Назначение= Неопределено, ПроверятьУникальность= Ложь) Экспорт
	
	Если КэшСвойств = Неопределено Тогда
		КэшСвойств = Новый ТаблицаЗначений;
		КэшСвойств.Колонки.Добавить("НаименованиеСвойства", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		КэшСвойств.Колонки.Добавить("Свойство");
		КэшСвойств.Индексы.Добавить("НаименованиеСвойства");
	КонецЕсли;

	// Поиск в кэше
	НайденныеСтроки = КэшСвойств.НайтиСтроки(Новый Структура("НаименованиеСвойства", Наименование));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		Возврат НайденныеСтроки[0].Свойство;
	КонецЕсли;	
	
	//Поиск в базе данных
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ ПланВидовХарактеристик.СвойстваОбъектов ГДЕ Наименование = &Наименование");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НоваяСтрока = КэшСвойств.Добавить();
		НоваяСтрока.НаименованиеСвойства	= Наименование;
		НоваяСтрока.Свойство				= Выборка.Ссылка;
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуСвойстваСкладов(ИдентификаторыСвойств, НазначенияСвойств)Экспорт
    
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СкладыКомпании.Ссылка КАК Ссылка	
		|ПОМЕСТИТЬ ТаблицаРазрешенныхПодразделений
		|ИЗ
		|	Справочник.СкладыКомпании КАК СкладыКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Значение
		|ПОМЕСТИТЬ ПодразделенияВДиадок
		|ИЗ
		|	ТаблицаРазрешенныхПодразделений КАК СкладыКомпании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО СкладыКомпании.Ссылка = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоПредставлениеСклада
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Склад,
		|	ПодразделенияВДиадок.Значение КАК ПодразделениеВДиадок,
		|	ЗначенияСвойствОбъектов.Значение КАК ПодразделениеДиадокId
		|ИЗ
		|	ПодразделенияВДиадок КАК ПодразделенияВДиадок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ПодразделенияВДиадок.Объект = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоИдентификаторСклада";

	Запрос.УстановитьПараметр("СвойствоПредставлениеСклада", НайтиСвойство(ИдентификаторыСвойств.ПредставлениеСклада));
	Запрос.УстановитьПараметр("СвойствоИдентификаторСклада", НайтиСвойство(ИдентификаторыСвойств.ИдентификаторСклада));

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСписокСкладовСПодразделениямиИзДиадок()()

Функция ПроверитьПВХСвойствНаКвалификаторСтроки() Экспорт
	
	Если Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов.Тип.КвалификаторыСтроки.Длина < 50 Тогда
		Предупреждение("В конфигурации плане видов характеристик ""Свойства объектов"" 
		|тип значения характеристик ""Строка"" имеет недостаточную длинну
		|необходимо минимум 50 символов");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция НайтиСвойстваПоНаименованию(Наименование)
	
	МассивСвойств=	Новый Массив();
	
	//Ищем из кэша 
	НайденныеСвойства=	ТаблицаСсылокНаСвойства.НайтиСтроки(Новый Структура("Наименование", Наименование));
	Если НайденныеСвойства.Количество() > 0 Тогда 
		Для каждого НайденноеСвойство Из НайденныеСвойства Цикл
			МассивСвойств.Добавить(НайденноеСвойство.Свойство);
		КонецЦикла;
		
		Возврат МассивСвойств;
		
	КонецЕсли;	
	
	//не нашли в кэше - ищем в базе 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Свойства.Ссылка Свойство
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК Свойства
		|ГДЕ
		|	Свойства.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);

	РезультатЗапроса=	Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка=	РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрКэша=				ТаблицаСсылокНаСвойства.Добавить();
			СтрКэша.Наименование=	Выборка.Свойство.Наименование;
			СтрКэша.Свойство=		Выборка.Свойство;
			
			МассивСвойств.Добавить(Выборка.Свойство);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСвойств;
	
КонецФункции

Функция ПолучитьНазначениеСвойстваПоОписанию(Описание) Экспорт
	
	Возврат Описание;
	
КонецФункции

ТаблицаСсылокНаСвойства = Новый ТаблицаЗначений;
ТаблицаСсылокНаСвойства.Колонки.Добавить("Наименование");
ТаблицаСсылокНаСвойства.Колонки.Добавить("Свойство");
ТаблицаСсылокНаСвойства.Индексы.Добавить("Наименование");