//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	Функция ПредставлениеПериодаДД(ДатаНачала, ДатаОкончания)    Экспорт
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) 
			И (ДатаОкончания < '21010101') Тогда 
			Возврат ПредставлениеПериода(ДатаНачала,конецдня( Датаокончания),"ФП = Истина");	
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
			Возврат "с "+формат(Датаначала, "ДФ=dd.MM.yyyy")
		ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда 	
			Возврат "по "+формат(ДатаОкончания, "ДФ=dd.MM.yyyy")
		Иначе 
			Возврат "период не задан";
		КонецЕсли;
	КонецФункции
	
	Функция ПолучитьСправа(стр, маркер)
		Если найти(стр, маркер)=0 Тогда 
			Возврат стр 
		иначе 	
			Возврат прав(стр, стрДлина(стр) - найти(стр, маркер)-стрДлина(маркер)+1);
		КонецЕсли;	
	КонецФункции	
	
	Функция  КраткоеСообщениеОбОшибке(текстОшибки);
		Подстрока = ПолучитьСправа(ТекстОшибки, "##");
		Подстрока = ПолучитьСправа(Подстрока, "[");
		Подстрока = ПолучитьСправа(Подстрока, "]");
		
		Возврат подстрока;
	КонецФункции	
	
	Функция СформироватьТекстОшибкиДиадок(ТекстОшибки) Экспорт
		КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
		Если (найти( КраткоеСообщение, "is not registered in FNS for box")>0)  Тогда
			ИДЯщика = прав(КраткоеСообщение, стрДлина(КраткоеСообщение) - найти( КраткоеСообщение, "is not registered in FNS for box")-32);
			ИДЯщика = лев(ИдЯщика, найти(ИдЯщика, ".")-1);
			
			ИдСертификата = лев(КраткоеСообщение, найти( КраткоеСообщение, "is not registered in FNS for box")-1);
			ИДСертификата = прав(ИдСертификата, стрДлина(ИдСертификата) - найти( ИдСертификата, "Signer certificate")-18);
			ТекстОшибки = "Сертификат, которым подписано сообщение, не зарегистрирован в ФНС.
			|Для решения данной проблемы обратитесь в техподдержку.
			|Отладочная информация: 
			|отпечаток сертификата: "+ИдСертификата+ "
			|идентификатор ящика организации: "+ИДЯщика;
		ИначеЕсли найти(ТекстОшибки, "##3")>0 Тогда
			текстОшибки = ("Произошла ошибка при работе с КриптоПро:
			|"+  КраткоеСообщениеОбОшибке(ТекстОшибки));
		ИначеЕсли найти(ТекстОшибки, "##1")>0 Тогда 
			КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
			Если (найти(текстОшибки, "Код ошибки: 500")>0)	 и (найти(текстОшибки, "GetTokenByCertificate")>0) Тогда 
				текстОшибки = ("При работе программы произошла ошибка:
				|Выбранный сертификат не имеет доступа в "+НаименованиеСистемы);
			ИначеЕсли (найти( КраткоеСообщение, "407")>0) или  (найти( КраткоеСообщение, "401")>0) Тогда 
				текстОшибки = ("Настройки прокси-сервера не позволяют установить соединение с сервером "+НаименованиеСистемы+"
				|("+КраткоеСообщение+")");
			ИначеЕсли 	(найти(ТекстОшибки, "for entity that already signed")> 0) или 
				(найти(ТекстОшибки, "Receipt for document which already has one")> 0) 
				Тогда 
				текстОшибки = ("При работе программы произошла ошибка:
				|данный документ уже подписан");
			ИначеЕсли 	(найти(ТекстОшибки, "for entity that has requested signature rejection")> 0) или 
				(найти(ТекстОшибки, "RequestedSignatureRejection for document that already has one")> 0) или 
				(найти(ТекстОшибки, "for entity that already have requested signature rejection")> 0) Тогда    
				текстОшибки = ("При работе программы произошла ошибка:
				|по данному документу уже сформирован отказ в подписи");
			ИначеЕсли (найти(ТекстОшибки, "Access to Box")> 0) и 
				(найти(ТекстОшибки, "is denied")> 0) Тогда 
				текстОшибки = ("При работе программы произошла ошибка:
				|у пользователя отсутствует доступ к ящику "+НаименованиеСистемы);
			ИначеЕсли Найти(ТекстОшибки, "SignerDetails not found") > 0 ИЛИ Найти(ТекстОшибки, "Signer details not found") > 0 Тогда
				ТекстОшибки= "Не настроены параметры подписания!";
			ИначеЕсли Найти(ТекстОшибки, "You cannot work with Universal Transfer Documents") > 0 Тогда
				ТекстОшибки= "Работа с универсальным передаточным документом запрещена в настройках ящика!";
			ИначеЕсли Найти(ТекстОшибки, "Organization is not allowed to get counteragent certificates") > 0 Тогда
				ТекстОшибки= "Отправка зашифрованных документов невозможна!
							 |Для того чтобы включить опцию отправки зашифрованных документов, обратитесь в техподдержку.";
			ИначеЕсли Найти(ТекстОшибки, "Значение атрибута ИдФайл имеет неверный формат") > 0 Тогда
				ТекстОшибки= "Шифрование не доступно для данного типа документа.";
			ИначеЕсли Найти(ТекстОшибки, "413 Request Entity Too Large") > 0 Тогда
				ТекстОшибки= "Слишком большой размер сообщения.";
			//ИначеЕсли Найти(КраткоеСообщение, "409") > 0 Тогда
			//	ТекстОшибки = "Ошибка подготовки адаптированной печатной формы:
			//	|"+КраткоеСообщение;
			Иначе                                                             
				текстОшибки = ("Произошла ошибка при работе с сервером "+НаименованиеСистемы+":
				|"+  КраткоеСообщение);
			КонецЕсли;	
		ИначеЕсли найти(ТекстОшибки, "##2")>0 Тогда
			КраткоеСообщение = КраткоеСообщениеОбОшибке(ТекстОшибки);
			Если (найти( КраткоеСообщение, "407")>0) или  (найти( КраткоеСообщение, "401")>0) Тогда 
				текстОшибки = ("Настройки прокси-сервера не позволяют установить соединение с сервером "+НаименованиеСистемы+"
				|("+  КраткоеСообщение+")");
			иначе 	
				текстОшибки = ("Невозможно установить соединение с сервером "+НаименованиеСистемы+" по причине:
				|"+  КраткоеСообщениеОбОшибке(ТекстОшибки));
			КонецЕсли;	
		ИначеЕсли найти(ТекстОшибки, "##9")>0 Тогда
			текстОшибки = КраткоеСообщениеОбОшибке(ТекстОшибки);
		ИначеЕсли найти(ТекстОшибки, "Текущие настройки не позволяют подключиться к серверу")>0 Тогда 
			текстОшибки = "Текущие настройки не позволяют подключиться к серверу "+НаименованиеСистемы+".";
		ИначеЕсли Найти(ТекстОшибки, "should be able to sign documents in organization")>0 Тогда
			ТекстОшибки=	"Пользователь не может подписать и отправить документ в "+НаименованиеСистемы+", недостаточно прав.";
		ИначеЕсли Найти(ТекстОшибки, "не найдены документы основания") > 0 Тогда
			ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки, "}:") + 3);
		Иначе	
			//предупреждение(текстОшибки,, ЗаголовокОкна);
		КонецЕсли;	
		
		Возврат текстОшибки;
	КонецФункции	
	
	Процедура СообщениеОбОшибкеДиадок(текстОшибки, контекстОшибки="") Экспорт
		
		ЗаголовокОкна = "Ошибка";
		
		Если (КонтекстОшибки = "СогласоватьДокумент") и (Найти(текстОшибки, "User cannot add resolution") <> 0) Тогда
			Предупреждение("Документ уже согласован.",, ЗаголовокОкна);
		ИначеЕсли (КонтекстОшибки = "ОтказатьВСогласовании") и (Найти(текстОшибки, "Duplicate resolution") <> 0) Тогда
			Предупреждение("По документу уже отказано в согласовании.",, ЗаголовокОкна);
		Иначе 		
			предупреждение(СформироватьТекстОшибкиДиадок(текстОшибки),, ЗаголовокОкна);
		КонецЕсли;	
		
	КонецПроцедуры	
	
	Функция ВСистемеРеализованыКорректировки() Экспорт
		Возврат ?(Метаданные.Документы.Найти("КорректировкаРеализации") = Неопределено, Ложь, Истина);
	КонецФункции
	
	Функция ВСистемеРеализованыКорректировкиПоступления() Экспорт
		Возврат ?(Метаданные.Документы.Найти("КорректировкаПоступления") = Неопределено, Ложь, Истина);
		//Возврат ?(ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41", Ложь, Истина);
	КонецФункции
	
	Функция ОпределитьВероятныеПараметрыДокумента(ОбъектДиадок, Организация = Неопределено, Контрагент = Неопределено)
		вероятныйКонтрагент = Контрагент;
		Если НЕ ЗначениеЗаполнено(вероятныйКонтрагент) Тогда
			ВероятныйКонтрагент = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(ОбъектДиадок.counterAgent.Id, ОбъектДиадок.Organization.Id  )  ;
		КонецЕсли;
		
		вероятнаяОрганизация = Организация;
		Если НЕ ЗначениеЗаполнено(вероятнаяОрганизация) Тогда
			вероятнаяОрганизация = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(ОбъектДиадок.Organization.Id);
		КонецЕсли;
		
		Возврат Новый Структура("Организация, Контрагент", вероятнаяОрганизация, вероятныйКонтрагент);
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{ ПОВЕДЕНИЕ ФОРМЫ
	
	Функция ВыбратьОрганизациюИзСопоставленныхДиадок(ТекущаяОрганизация) Экспорт
		сп =  ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьСписокПодключенныхКДиадокуОрганизаций();  
		Форма = справочники.Организации.ПолучитьФормуВыбора();
		отб = форма.СправочникСписок.Отбор.ссылка;
		Отб.видсравнения = видсравнения.ВСписке;
		отб.использование = Истина;
		отб.значение = сп; 
		форма.НачальноеЗначениеВыбора = ТекущаяОрганизация;
		
		Возврат форма.ОткрытьМодально();
	КонецФункции
	
	Функция ВыбратьКонтрагентаИзСопоставленныхДиадок(ТекущийКонтрагент, CounteragentId=Неопределено) Экспорт
		сп =  ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьСписокАссоциированныхКонтрагентовДиадок(CounteragentId);  
		Форма = справочники.Контрагенты.ПолучитьФормуВыбора();
		отб = форма.СправочникСписок.Отбор.ссылка;
		Отб.видсравнения = видсравнения.ВСписке;
		отб.использование = Истина;
		отб.значение = сп; 
		форма.НачальноеЗначениеВыбора =  ТекущийКонтрагент;
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАльфаАвто41" Тогда
			форма.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		КонецЕсли;
		Возврат форма.ОткрытьМодально();
	КонецФункции
	
	Функция ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(Организация, Organization, ResolutionRequestType, Режим) Экспорт
		
		ФормаВыбораПолучателя=							ЭтотОбъект.ПолучитьФорму("ФормаВыбораПолучателя");
		ФормаВыбораПолучателя.Организация=				Организация;
		ФормаВыбораПолучателя.Organization=				Organization;
		ФормаВыбораПолучателя.ResolutionRequestType=	ResolutionRequestType;
		ФормаВыбораПолучателя.Заголовок=				"Получатель запроса на " + ?(ResolutionRequestType = "ApprovementRequest", "согласование", "подписание");
		ФормаВыбораПолучателя.Режим=					Режим;
		
		Если ФормаВыбораПолучателя.Открыта() Тогда
			ФормаВыбораПолучателя.Активизировать();
		Иначе
			ФормаВыбораПолучателя.ОткрытьМодально();
		КонецЕсли;
		
		Возврат ФормаВыбораПолучателя.ПараметрыПолучателя;
		
	КонецФункции
	
	Функция ОтразитьВ1СInboundNotXMLDocument(Document) Экспорт
		
		СписокВыбора= Новый СписокЗначений;
		СписокВыбора.Добавить("Поступление товаров и услуг"	 );
		СписокВыбора.Добавить("Возврат товаров от покупателя");
		СписокВыбора.Добавить("Сопоставить с документом в 1С");
		РезультатВыбора= СписокВыбора.ВыбратьЭлемент("Выбор типа создаваемого документа");
		
		Если РезультатВыбора <> Неопределено Тогда
			
			ВыбранноеДействие= РезультатВыбора.Значение;
			
			ПараметрыНовогоДокумента= Новый Структура;
			ПараметрыНовогоДокумента.Вставить("ДатаВходящегоДокумента" , Document.DocumentDate);
			ПараметрыНовогоДокумента.Вставить("НомерВходящегоДокумента", Document.DocumentNumber);
			ПараметрыНовогоДокумента.Вставить("ДоговорКонтрагента");
			ПараметрыНовогоДокумента.Вставить("Подразделение");
			ПараметрыНовогоДокумента.Вставить("Склад");
			
			Если Document.Department <> Неопределено Тогда
				ПараметрыНовогоДокумента.Склад = ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект("DepartmentID", Document.Department.Id);
			КонецЕсли;
			
			стВероятныеОрганизацияКонтрагент = ОпределитьВероятныеПараметрыДокумента(Document);
			
			Если ВыбранноеДействие = "Поступление товаров и услуг" Тогда
				
				ДокументССылка = СоздатьДокументВ1СПоступление(ПараметрыНовогоДокумента, стВероятныеОрганизацияКонтрагент, Document,,,"ПокупкаКомиссия");
				
			ИначеЕсли ВыбранноеДействие = "Возврат товаров от покупателя" Тогда
				
				ДокументССылка = СоздатьДокументВ1СВозврат(ПараметрыНовогоДокумента, стВероятныеОрганизацияКонтрагент, Document);
				
			ИначеЕсли ВыбранноеДействие = "Сопоставить с документом в 1С" Тогда
				
				ДокументССылка = ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(Document, "СопоставитьНакладную");
				
				Если ДокументССылка = "Ввести" Тогда
					ДокументССылка = СоздатьДокументВ1СПоступление(ПараметрыНовогоДокумента, стВероятныеОрганизацияКонтрагент, Document,,,"ПокупкаКомиссия");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументССылка) Тогда
				
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументССылка.Ссылка, Document.DocumentId, Document.OrganizationId);
				
			КонецЕсли;
			
			Возврат ДокументССылка;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ОтразитьВ1СXMLDocument(Document, DocumentContent) Экспорт 
		Если Document.Direction = "Outbound" Тогда 
			Возврат ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(Document, "СопоставитьНакладную");
		ИначеЕсли Document.Direction = "Inbound" Тогда 
			Возврат ОтразитьВ1СInboundXMLDocument(Document, DocumentContent);
		КонецЕсли;
	КонецФункции
	
	Функция ОтразитьВ1СInboundXMLDocument(Document, DocumentContent) Экспорт 
		
		ТекущийРежим = ВосстановитьЗначение("Диадок_РежимВводаВходящейНакладной");
		Если текущийРежим = Неопределено Тогда 
			текущийРежим = "Ввод";
		КонецЕсли;	
		
		Пока Истина Цикл
			Если текущийРежим = "Ввод" Тогда
				ДокументСсылка = ПолучитьФорму("ФормаВводаНакладной",, Document.OrganizationId + Document.DocumentId).ЗаполнитьИОткрытьФормуСозданияДокументаВ1С(Document, DocumentContent);
			Иначе
				ДокументСсылка = ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(Document, "СопоставитьНакладную");
				Если ДокументСсылка <> "Ввести" Тогда
					Возврат ДокументСсылка;
				КонецЕсли;
			КонецЕсли;
			Если ДокументСсылка = "Сопоставить" Тогда
				текущийРежим = "Сопоставление";
				СохранитьЗначение("Диадок_РежимВводаВходящейНакладной", текущийРежим);
				Продолжить;
			ИначеЕсли ДокументСсылка = "Ввести" Тогда
				текущийРежим = "Ввод";
				СохранитьЗначение("Диадок_РежимВводаВходящейНакладной", текущийРежим);
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДокументССылка) Тогда
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументССылка.Ссылка, Document.DocumentId, Document.OrganizationId);
		КонецЕсли;
		
		Возврат ДокументССылка;
	КонецФункции	
	
	Функция ПереводМассиваСсылокВСтроку(Массив)
		МассивСсылокВСтроку = "";
		Для Каждого СсылкаРНК из Массив Цикл
			МассивСсылокВСтроку = ?(МассивСсылокВСтроку = "",МассивСсылокВСтроку+"",МассивСсылокВСтроку+",");
			МассивСсылокВСтроку = МассивСсылокВСтроку + Строка(СсылкаРНК);
		КонецЦикла;
		Возврат МассивСсылокВСтроку 
	КонецФункции
	
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(ОбъектДиадок) Экспорт
		Результат = Новый Массив;
		Organization = ОбъектДиадок.Organization;
		Для ц = 0 по объектДиадок.SubordinateDocumentIds.Count-1 Цикл
			SubordinateDocumentId =  объектДиадок.SubordinateDocumentIds.GetItem(ц);
			ссылкаРНК = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(SubordinateDocumentId, Organization.Id);
			Если ссылкаРНК <> Неопределено Тогда
				Результат.Добавить(ссылкаРНК);
			КонецЕсли;
		КонецЦикла;
		Для ц = 0 по объектДиадок.InitialDocumentIds.Count-1 Цикл
			InitialDocumentId =  объектДиадок.InitialDocumentIds.GetItem(ц);
			ссылкаРНК = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(InitialDocumentId, Organization.Id);
			Если ссылкаРНК <> Неопределено Тогда
				Результат.Добавить(ссылкаРНК);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
	КонецФункции	
	
	Функция ПолучитьПредставлениеСсылкиНаДокумент(СсылкаНаОбъект, ЭДОбъект) Экспорт 
		
		Результат= Новый Структура("СсылкаНаДокументПредставление, ДокументОснованиеДляСозданияСФ, СпособСоздания");
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			
			Результат.СсылкаНаДокументПредставление= Строка(СсылкаНаОбъект);
			
		ИначеЕсли ЭДОбъект.Type = "NonformalizedProforma" Тогда
			
			Результат.СсылкаНаДокументПредставление= "";
			
		Иначе 
			
			Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" И ТипДокументаУПД(ЭДОбъект.Function) = ТипДокументаУПД("СЧФ") Тогда
				
				КоличествоСФ = 0;
				DocumentPackage = ЭДОбъект.GetDocumentPackage();
				КоличествоДокументов = DocumentPackage.Documents.Count;
				Для сц = 0 По КоличествоДокументов - 1 Цикл
					
					Document = DocumentPackage.Documents.GetItem(сц);
					Если Document.type = "Invoice" 
						Или Document.type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФ") Тогда
						КоличествоСФ = КоличествоСФ + 1;
					КонецЕсли;
					
				КонецЦикла;
				
				Если КоличествоСФ = 1 Тогда
					МассивСсылокРНК= ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(ЭДОбъект);
				Иначе
					МассивСсылокРНК = Новый Массив;
				КонецЕсли;
				
				МассивСодержитРНК= Ложь;
				Для Каждого Ссылка ИЗ МассивСсылокРНК Цикл
					Ссылка_ИмяТипаXML= XMLТипЗнч(Ссылка).ИмяТипа;
					Если	Ссылка_ИмяТипаXML = "DocumentRef.РеализацияТоваровУслуг"
						ИЛИ Ссылка_ИмяТипаXML = "DocumentRef.РеализацияТоваров"
						ИЛИ Ссылка_ИмяТипаXML = "DocumentRef.ПоступлениеТоваровУслуг" Тогда
						МассивСодержитРНК= Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если МассивСодержитРНК Тогда
					
					ПодходящийСФ= Модуль_ИнтеграцияОбщий.НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
					
					Если ЗначениеЗаполнено(ПодходящийСФ) Тогда
						
						Результат.СсылкаНаДокументПредставление=  "Сопоставить с " + ПодходящийСФ;
						Результат.ДокументОснованиеДляСозданияСФ= ПодходящийСФ;
						Результат.СпособСоздания= "Сопоставить";
						
					ИначеЕсли (ЭДОбъект.Type = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" И ТипДокументаУПД(ЭДОбъект.Function) = ТипДокументаУПД("СЧФ")) И МассивСсылокРНК.Количество() > 0 Тогда // Для КСФ/ИСФ механизм создания на основании не используется
						
						Результат.СсылкаНаДокументПредставление= "Создать на основании документа: " + ПереводМассиваСсылокВСтроку(МассивСсылокРНК);  
						Результат.ДокументОснованиеДляСозданияСФ= МассивСсылокРНК;
						Результат.СпособСоздания= "СоздатьНаОсновании";
						
					КонецЕсли;
					
				Иначе
					
					Если ЭДОбъект.Type = "InvoiceRevision" ИЛИ ЭДОбъект.Type = "InvoiceCorrection" Тогда
						
						Если ЭДОбъект.Direction = "Outbound" Тогда 
							Результат.СсылкаНаДокументПредставление= "Сопоставить..."; // Для исходящих КСФ/ИСФ реализован только механизм сопоставления
							Результат.СпособСоздания= "Сопоставить";
						Иначе
							Результат.СсылкаНаДокументПредставление= "Создать..."; 	   // Для входящих КСФ/ИСФ реализован только механизм создания
						КонецЕсли;
						
					ИначеЕсли ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСоздаватьСопоставлятьСчетаФактуры") = "Сопоставлять" Тогда
						Результат.СсылкаНаДокументПредставление = "Сопоставить...";
					Иначе
						Результат.СсылкаНаДокументПредставление = "Создать...";
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЭДОбъект.Direction = "Outbound" И (ЭДОбъект.Type = "XmlTorg12" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" И ТипДокументаУПД(ЭДОбъект.Function) = ТипДокументаУПД("ДОП")) Тогда
				Результат.СсылкаНаДокументПредставление = "Сопоставить..."; // Для исходящих ТОРГ12 реализован только механизм сопоставления
				Результат.СпособСоздания= "Сопоставить";
			Иначе
				Результат.СсылкаНаДокументПредставление = "Создать...";
			КонецЕсли;
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция ОткрытьКарточкуДокументаДД(Document, ФормаВладелец, МодальныйРежим = Ложь) Экспорт 
		
		КлючУникальностиОткрываемойФормы = Document.OrganizationID + Document.DocumentID;
		
		Если ЭтоФормализованныйДокумент(Document.Type) Тогда
			
			// ТОРГ-12 в формате 551 приказа и Акт в формате 552 приказа пока не поддерживаются (DD1C-240)
			Если 	НРег(Лев(Document.AttachmentVersion, 8)) = "tovtorg_"
				Или НРег(Лев(Document.AttachmentVersion, 6)) = "rezru_" Тогда
				ПолучитьМодульПрог("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку("Ошибка просмотра карточки документа", "Неизвестный формат документа!");
				Возврат Неопределено;
			КонецЕсли;
			
			Если Document.HasCustomPrintForm Тогда
				ФормаКарточкиДокумента = ПолучитьФорму("ФормаКарточкаДокументаСМетаданными", ФормаВладелец, КлючУникальностиОткрываемойФормы);
			Иначе
				ФормаКарточкиДокумента = ПолучитьФорму("ФормаКарточкаДокументаСВизуализацией", ФормаВладелец, КлючУникальностиОткрываемойФормы);
			КонецЕсли;
			
			ФормаКарточкиДокумента.DocumentContent = Document.GetContent();
			
		ИначеЕсли ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЭтоНеформализованныйДокументБезМетаданных(Document)   Тогда
			
			ФормаКарточкиДокумента= ПолучитьФорму("ФормаКарточкаДокументаБезМетаданных", ФормаВладелец, КлючУникальностиОткрываемойФормы);
			
		Иначе 
			
			ФормаКарточкиДокумента= ПолучитьФорму("ФормаКарточкаДокументаСМетаданными", ФормаВладелец, КлючУникальностиОткрываемойФормы);
			
		КонецЕсли;	
		
		ФормаКарточкиДокумента.ЭДОбъект= Document;
		
		Если МодальныйРежим Тогда
			ФормаКарточкиДокумента.ОткрытьМодально();
		Иначе
			ФормаКарточкиДокумента.Открыть();
		КонецЕсли;
		
	КонецФункции 	
	
//} ПОВЕДЕНИЕ ФОРМЫ

//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	Функция ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions)
		
		Возврат
		
		  ЭДОбъект.Direction = "Inbound"
		И ЭДОбъект.Status = "InboundFinished"
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
		И (ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" 
			И НЕ ЭДОбъект.Corrected 
			И НЕ ЭДОбъект.Revised 
			И НЕ ЭДОбъект.AmendmentRequested)
			
		ИЛИ ((ЭДОбъект.Type = "UniversalTransferDocument" ИЛИ ЭДОбъект.Type = "UniversalCorrectionDocument")
			И НЕ ЭДОбъект.AmendmentRequested);
		
	КонецФункции
	
	Функция ПоказатьКнопкиПодписания(ЭДОбъект, UserPermissions)
		
		Возврат
		
		ЭДОбъект.Direction = "Inbound"
		И UserPermissions.CanSignDocuments
		И ЭДОбъект.Status = "InboundWaitingForRecipientSignature"
		И ЭДОбъект.RevocationStatus = "RevocationStatusNone"
		И (ЭДОбъект.IsTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate")
		
	КонецФункции
	
	Функция ПоказатьКнопкуПодписанияЗапрошенного(ЭДОбъект, UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		И Не ЭДОбъект.IsLockedPackage
		И ЭДОбъект.Direction = "Outbound"
		И UserPermissions.CanSignDocuments
		
		И ((ЭДОбъект.ResolutionStatus = Неопределено И ЭДОбъект.Status = "OutboundWaitingForSenderSignature") // Возможно документ отправлен на подпись самому себе
			ИЛИ (ЭДОбъект.ResolutionStatus <> Неопределено
				 И (ЭДОбъект.ResolutionStatus.type = "Approved" 					  // Документ согласован можно подписывать
				 	ИЛИ (ЭДОбъект.ResolutionStatus.type = "SignatureRequested"        // Документ отправлен на подпись
						 И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено 	  // Документ отправлен на подпись любому пользователю из подразделения
							ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.IsCurrentUser))))) // Документ отправлен на подпись текущему пользователю
		
	КонецФункции
	
	Функция ПоказатьКнопкуОтправкиУточнения(ЭДОбъект, UserPermissions)
		
		Если ЭДОбъект.Direction = "Outbound" Тогда
			Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" 
				И (UserPermissions.CanSignDocuments = Истина ИЛИ UserPermissions.CanRequestResolutions = Истина) Тогда
				
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПоказатьКнопкиСогласования(ЭДОбъект, UserPermissions)
		
		Если (UserPermissions.CanAddResolutions ИЛИ UserPermissions.CanRequestResolutions) 
			И ((ЭДОбъект.Direction = "Outbound" И Не ЗначениеЗаполнено(ЭДОбъект.Timestamp))
			   Или Не ЭДОбъект.Direction = "Outbound") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПоказатьКнопкуУдалить(ЭДОбъект, UserPermissions)
		
		Если UserPermissions.CanSignDocuments
			И (ЭДОбъект.isTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПоказатьКнопкуПеревыставить(ЭДОбъект, UserPermissions)
		
		Если UserPermissions.CanSignDocuments
			И (ЭДОбъект.isTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate") Тогда 
			Если (ЭДОбъект.Direction = "Outbound") 
				И (ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ 
				ЭДОбъект.Type = "XmlTorg12" ИЛИ 
				ЭДОбъект.Type = "XmlAcceptanceCertificate" ИЛИ 
				ЭДОбъект.Type = "NonformalizedProforma"
				ИЛИ ЭДОбъект.Type = "UniversalTransferDocument") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПоказатьКнопкуЗапросаАннулирования(ЭДОбъект, UserPermissions)
		
		DocumentStatus			 = ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status			, "");
		DocumentRevocationStatus = ?(ЭДОбъект <> Неопределено, ЭДОбъект.RevocationStatus, "");
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignDocuments
		И ЭДОбъект.SenderSignatureStatus = "SenderSignatureCheckedAndValid" // Подпись отправителя проверена и валидна
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
		И (		DocumentRevocationStatus = "RevocationStatusNone"           // Документ не аннулирован и не было предложений об аннулировании
			ИЛИ DocumentRevocationStatus = "RevocationRejected")            // В предложении об аннулировании отказано
			
		И (		DocumentStatus = "InboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "InboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "OutboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWaitingForRecipientSignature"
			ИЛИ DocumentStatus = "InboundFinished"
			ИЛИ DocumentStatus = "OutboundFinished"
			ИЛИ DocumentStatus = "Outbound"
			ИЛИ DocumentStatus = "Inbound"
			ИЛИ DocumentStatus = "OutboundWaitingForInvoiceReceipt"
			ИЛИ DocumentStatus = "OutboundWaitingForReceipt")
		
	КонецФункции
	
	Функция ПоказатьКнопкуАннулирования(ЭДОбъект, UserPermissions)
		
		Если UserPermissions.CanSignDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
			Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПоказатьКнопкуОтказаАннулирования(ЭДОбъект, UserPermissions)
		
		Если UserPermissions.CanSignDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
			Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Процедура ПоказатьИнформациюОНовыхФорматах(ConfirmationDate) Экспорт 
		
		НоваяФорма = ПолучитьФорму("ФормаHTMLСообщения");
		
		Если НЕ ЗначениеЗаполнено(ConfirmationDate) ИЛИ ConfirmationDate >= '20170701' Тогда // с 01.07.2017 СФ должен отправляться в формате УПД
			
			НоваяФорма.HTMLТекст =
			"<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
			|<BODY>
			|<H3>С 1 июля 2017 года изменился формат счета-фактуры</H3>
			|<H4>После 1 июля налоговая может отказать в вычете НДС за старый формат</H4>
			|<P>Счет-фактура старого формата не считается выставленным, если он отправлен после 1 июля. Налоговая может отказать в вычете НДС получателю при представлении документов.</P>
			|<H4>Договоритесь с поставщиками о переходе на новый формат</H4>
			|<P>С 1 июля счета-фактуры нужно передавать в новом формате по <A href=""http://publication.pravo.gov.ru/Document/View/0001201604260024""> приказу №155 ФНС</A>. Если поставщик продолжает отправлять документы в старом формате, запросите аннулирование документов и попросите перевыставить их в новом формате.</P>
			|<H4>Как настроить модуль для 1С на отправку счетов-фактур, УПД и других документов в новом формате?</H4>
			|<P>Для этого нужно иметь последнюю версию модуля и настроить его на отправку документов нового формата по <A href=""https://wiki.diadoc.ru/pages/viewpage.action?pageId=7668802""> инструкции</A>.</P></BODY></HTML>";
			
		Иначе // с 14.04.2015 версия 5.02
			
			НоваяФорма.HTMLТекст =
			"<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
			|<BODY>
			|<H3>14 апреля 2015 года изменился формат электронных счетов-фактур</H3>
			|<P>Согласно <A href=""http://publication.pravo.gov.ru/Document/View/0001201504030034"">приказу ФНС от 04.03.2015 № ММВ-7-6/93@</A> с 14 апреля 2015 года электронные счета-фактуры необходимо передавать в новом формате.</P>
			|<P>Как принимать к учету счета-фактуры в старом формате, переданные после 14 апреля, вы можете узнать в вашей ИФНС</P>
			|<P>На данный момент "+НаименованиеСистемы+" поддерживает счета-фактуры как старого, так и нового форматов. Чтобы быть в курсе изменений в законодательстве, <A href=""http://www.diadoc.ru/blog"">подпишитесь на новости на нашем сайте</A></P></BODY></HTML>";
			
		КонецЕсли;
		
		НоваяФорма.ОткрытьМодально();
		
	КонецПроцедуры	
	
	Процедура НастроитьКнопкиКоманднойПанели(ЭДОбъект, ФормаКарточкиДокумента)
		
		UserPermissions = ЭДОбъект.Organization.GetUserPermissions();
		
		Если ЭДОбъект.IsTest Тогда
			ФормаКарточкиДокумента.Заголовок=	ФормаКарточкиДокумента.Заголовок + " (тестовый)";
		КонецЕсли;
		
		Если ПоказатьКнопкиПодписания(ЭДОбъект, UserPermissions) Тогда 
			
			КнопкаПодписать=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("Подписать");
			Если КнопкаПодписать = Неопределено Тогда
				КнопкаПодписать=						ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Вставить(0, "Подписать", ТипКнопкиКоманднойПанели.Действие, "Подписать", Новый Действие("ПодписатьДокумент"));
				КнопкаПодписать.Подсказка=				"Подписать";
				КнопкаПодписать.Картинка=				ЭДО_БиблиотекаКартинок().КартинкаПодписатьИОтправить;
				КнопкаПодписать.Отображение=			ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КонецЕсли;
			
			КнопкаОтказатьВПодписи=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ОтказатьВПодписи");
			Если КнопкаОтказатьВПодписи = Неопределено Тогда
				КнопкаОтказатьВПодписи=					ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Вставить(1, "ОтказатьВПодписи", ТипКнопкиКоманднойПанели.Действие, "Отказать в подписи", Новый Действие("ОтказатьВПодписи"));
				КнопкаОтказатьВПодписи.Подсказка=		"Отказать в подписи";
				КнопкаОтказатьВПодписи.Картинка=		ЭДО_БиблиотекаКартинок().КартинкаОтказатьВПодписи;
				КнопкаОтказатьВПодписи.Отображение=		ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КонецЕсли;
			
			РазделительГруппыАннулирования1=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования1");
			Если РазделительГруппыАннулирования1 = Неопределено Тогда
				РазделительГруппыАннулирования1=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("РазделительГруппыАннулирования1", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
		ИначеЕсли ПоказатьКнопкуПодписанияЗапрошенного(ЭДОбъект, UserPermissions) Тогда
			
			КнопкаПодписатьЗапрошенный=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ПодписатьЗапрошенный");
			Если КнопкаПодписатьЗапрошенный = Неопределено Тогда
				КнопкаПодписатьЗапрошенный=				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Вставить(0, "ПодписатьЗапрошенный", ТипКнопкиКоманднойПанели.Действие, "Подписать и отправить", Новый Действие("ПодписатьЗапрошенныйДокумент"));
				КнопкаПодписатьЗапрошенный.Подсказка=	"Подписать и отправить";
				КнопкаПодписатьЗапрошенный.Картинка=	ЭДО_БиблиотекаКартинок().КартинкаПодписатьИОтправить;
				КнопкаПодписатьЗапрошенный.Отображение=	ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КонецЕсли;
			
		Иначе
			
			КнопкаПодписать=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("Подписать");
			Если НЕ КнопкаПодписать = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаПодписать);
			КонецЕсли;
			
			КнопкаОтказатьВПодписи=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ОтказатьВПодписи");
			Если НЕ КнопкаОтказатьВПодписи = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаОтказатьВПодписи);
			КонецЕсли;
			
			РазделительГруппыАннулирования1=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования1");
			Если НЕ РазделительГруппыАннулирования1 = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(РазделительГруппыАннулирования1);
			КонецЕсли;
			
			КнопкаПодписатьЗапрошенный=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ПодписатьЗапрошенный");
			Если НЕ КнопкаПодписатьЗапрошенный = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаПодписатьЗапрошенный);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions) Тогда
			КнопкаЗапросаУточнения=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ЗапроситьУточнение");
			Если КнопкаЗапросаУточнения = Неопределено Тогда
				КнопкаЗапроситьУточнение=				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("ЗапроситьУточнение", ТипКнопкиКоманднойПанели.Действие, "Запросить уточнение", Новый Действие("КоманднаяПанельЗапроситьУточнение"));
				КнопкаЗапроситьУточнение.Подсказка=		"Запросить уточнение у контрагента";
			КонецЕсли;
		Иначе
			КнопкаЗапросаУточнения=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ЗапроситьУточнение");
			Если НЕ КнопкаЗапросаУточнения = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаЗапросаУточнения);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьКнопкуОтправкиУточнения(ЭДОбъект, UserPermissions) Тогда
			
			КнопкаОтправитьУточнение=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ОтправитьУточнение");
			Если  КнопкаОтправитьУточнение = Неопределено Тогда 
				
				КнопкаОтправитьУточнение = ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("ОтправитьУточнение", ТипКнопкиКоманднойПанели.Подменю, "Отправить уточнение");
				КнопкаОтправитьУточнение.Подсказка = "Отправить уточнение";
				Если ЭДОбъект.Type = "Invoice" Тогда
					КнопкаИсправление=						ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Исправление", ТипКнопкиКоманднойПанели.Действие, "Исправление", Новый Действие("КоманднаяПанельОтправитьИсправление"));
					КнопкаИсправление.Подсказка=			"Отправить исправление";
					КнопкаОтправитьКорректировку=			ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Корректировка", ТипКнопкиКоманднойПанели.Действие, "Корректировка", Новый Действие("КоманднаяПанельОтправитьКорректировку"));
					КнопкаОтправитьКорректировку.Подсказка=	"Отправить корректировку";
				ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
					КнопкаИсправление=						ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Исправление", ТипКнопкиКоманднойПанели.Действие, "Исправить", Новый Действие("КоманднаяПанельОтправитьИсправление"));
					КнопкаИсправление.Подсказка=			"Отправить исправление";
					КнопкаОтправитьКорректировку=			ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Корректировка", ТипКнопкиКоманднойПанели.Действие, "Корректировка", Новый Действие("КоманднаяПанельОтправитьКорректировку"));
					КнопкаОтправитьКорректировку.Подсказка=	"Отправить корректировку";
				ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
					КнопкаИсправление=						ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Исправление", ТипКнопкиКоманднойПанели.Действие, "Исправить", Новый Действие("КоманднаяПанельОтправитьИсправление"));
					КнопкаИсправление.Подсказка=			"Отправить исправление";
				ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
					КнопкаИсправление=						ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.ОтправитьУточнение.Кнопки.Добавить("Исправление", ТипКнопкиКоманднойПанели.Действие, "Исправить", Новый Действие("КоманднаяПанельОтправитьИсправление"));
					КнопкаИсправление.Подсказка=			"Отправить исправление";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПоказатьКнопкиСогласования(ЭДОбъект, UserPermissions) Тогда
			
			ПодменюСогласование=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ПодменюСогласование");
			Если ПодменюСогласование = Неопределено Тогда
				ПодменюСогласование=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("ПодменюСогласование", ТипКнопкиКоманднойПанели.Подменю, "Согласование");
			КонецЕсли;
			
			ЕстьКнопкиПередачи=		Ложь;
			
			Если UserPermissions.CanRequestResolutions Тогда
				
				КнопкаОтправитьНаСогласование=	ПодменюСогласование.Кнопки.Найти("ПередатьНаСогласование");
				Если КнопкаОтправитьНаСогласование = Неопределено Тогда
					КнопкаОтправитьНаСогласование= ПодменюСогласование.Кнопки.Добавить("ПередатьНаСогласование", ТипКнопкиКоманднойПанели.Действие, "Передать на согласование", Новый Действие("ПередатьНаСогласование"));
					КнопкаОтправитьНаСогласование.Подсказка = "Передать на согласование";
				КонецЕсли;
				
				Если ЭДОбъект.Status = "InboundWaitingForRecipientSignature" Тогда
					КнопкаОтправитьНаПодписание=	ПодменюСогласование.Кнопки.Найти("ПередатьНаПодписание");
					Если КнопкаОтправитьНаПодписание = Неопределено Тогда
						КнопкаОтправитьНаПодписание= ПодменюСогласование.Кнопки.Добавить("ПередатьНаПодписание", ТипКнопкиКоманднойПанели.Действие, "Передать на подписание", Новый Действие("ПередатьНаПодпись"));
						КнопкаОтправитьНаПодписание.Подсказка = "Передать на подписание";
					КонецЕсли;
				Иначе
					КнопкаОтправитьНаПодписание=	ПодменюСогласование.Кнопки.Найти("ПередатьНаПодписание");
					Если НЕ КнопкаОтправитьНаПодписание = Неопределено Тогда
						ПодменюСогласование.кнопки.удалить(КнопкаОтправитьНаПодписание);
					КонецЕсли;
				КонецЕсли;
				
				ЕстьКнопкиПередачи=	Истина;
				
			КонецЕсли;	
			
			Если UserPermissions.CanAddResolutions Тогда
				
				Если ЕстьКнопкиПередачи Тогда
					Разделитель1=	ПодменюСогласование.Кнопки.Найти("Разделитель1");
					Если Разделитель1 = Неопределено Тогда
						ПодменюСогласование.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
					КонецЕсли;
				КонецЕсли;
				
				КнопкаСогласовать=	ПодменюСогласование.Кнопки.Найти("Согласовать");
				Если КнопкаСогласовать = Неопределено Тогда
					КнопкаСогласовать=						ПодменюСогласование.Кнопки.Добавить("Согласовать", ТипКнопкиКоманднойПанели.Действие, "Согласовать", Новый Действие("СогласоватьДокумент"));
					КнопкаСогласовать.Подсказка=			"Согласовать";
				КонецЕсли;
				
				КнопкаОтказатьВСогласовании=	ПодменюСогласование.Кнопки.Найти("ОтказатьВСогласовании");
				Если КнопкаОтказатьВСогласовании = Неопределено Тогда
					КнопкаОтказатьВСогласовании=			ПодменюСогласование.Кнопки.Добавить("ОтказатьВСогласовании", ТипКнопкиКоманднойПанели.Действие, "Отказать в согласовании", Новый Действие("ОтказатьВСогласовании"));
					КнопкаОтказатьВСогласовании.Подсказка=	"Отказать в согласовании";
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе 
			
			ПодменюСогласование=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ПодменюСогласование");
			Если НЕ ПодменюСогласование = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(ПодменюСогласование);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПоказатьКнопкуУдалить(ЭДОбъект, UserPermissions) Тогда
			КнопкаУдалить=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Найти("УдалитьДокумент");
			Если КнопкаУдалить = Неопределено Тогда
				КнопкаУдалить=				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Добавить("УдалитьДокумент", ТипКнопкиКоманднойПанели.Действие, "Удалить", Новый Действие("КоманднаяПанельУдалитьДокумент"));
				КнопкаУдалить.Подсказка=	"Удалить документ";
				КнопкаУдалить.Картинка=		БиблиотекаКартинок.УдалитьЭлементСписка;
				КнопкаУдалить.Отображение=	ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьКнопкуПеревыставить(ЭДОбъект, UserPermissions) Тогда
			КнопкаПеревыставить=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("Перевыставить");
			Если КнопкаПеревыставить = Неопределено Тогда
				КнопкаПеревыставить = ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("Перевыставить", ТипКнопкиКоманднойПанели.Действие, "Перевыставить", Новый Действие("КоманднаяПанельПеревыставитьДокумент"));
				КнопкаПеревыставить.Подсказка = "Перевыставить документ";
			КонецЕсли;
		КонецЕсли;
		
		КнопкаОтправитьФайл=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Диадок.Кнопки.Найти("ОтправитьФайл");
		Если КнопкаОтправитьФайл = Неопределено Тогда
			КнопкаОтправитьФайл=				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Диадок.Кнопки.Добавить("ОтправитьФайл", ТипКнопкиКоманднойПанели.Действие, "Отправить связанный документ", Новый Действие("КоманднаяПанельОтправитьФайл"));
			КнопкаОтправитьФайл.Подсказка=		"Отправить связанный документ";
			КнопкаОтправитьФайл.Картинка=		ЭДО_БиблиотекаКартинок().КартинкаОтправитьСвязанный;
			КнопкаОтправитьФайл.Отображение=	ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
		
		Если НЕ ФормаКарточкиДокумента.СсылкаНаОбъект = Неопределено Тогда
			КнопкаОтменитьСопоставление=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Найти("ОтменитьСопоставление");
			Если КнопкаОтменитьСопоставление = Неопределено Тогда
				КнопкаОтменитьСопоставление=			ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Добавить("ОтменитьСопоставление", ТипКнопкиКоманднойПанели.Действие, "Отменить сопоставление с документом 1С", Новый Действие("КоманднаяПанельОтменитьСопоставлениеДокумент") );
				КнопкаОтменитьСопоставление.Подсказка=	"Отменить сопоставление с документом 1С";
			КонецЕсли;
		Иначе
			КнопкаОтменитьСопоставление=	ФормаКарточкиДокумента.Элементыформы.КоманднаяПанель.Кнопки.Действия.Кнопки.Найти("ОтменитьСопоставление");
			Если НЕ КнопкаОтменитьСопоставление = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия.Кнопки.Удалить(КнопкаОтменитьСопоставление);
			КонецЕсли;
		КонецЕсли;	
		
		ТребуетсяРазделительАннулирования=		Ложь;
		КоличествоКнопокВРазделеАннулирования=	0;
		Если ПоказатьКнопкуЗапросаАннулирования(ЭДОбъект, UserPermissions) Тогда
			КнопкаЗапросаАннулирования=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ЗапроситьАннулирование");
			Если КнопкаЗапросаАннулирования = Неопределено Тогда
				КнопкаЗапросаАннулирования=					ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("ЗапроситьАннулирование", ТипКнопкиКоманднойПанели.Действие, "Аннулировать", Новый Действие("ОтправитьЗапросНаАннулирование"));
				КнопкаЗапросаАннулирования.Подсказка=		"Аннулировать документ";
				КнопкаЗапросаАннулирования.Картинка=		ЭДО_БиблиотекаКартинок().КартинкаАннулирование;
				КнопкаЗапросаАннулирования.Отображение=		ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				КоличествоКнопокВРазделеАннулирования=		КоличествоКнопокВРазделеАннулирования + 1;
			КонецЕсли;
		Иначе
			КнопкаЗапросаАннулирования=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ЗапроситьАннулирование");
			Если НЕ КнопкаЗапросаАннулирования = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаЗапросаАннулирования);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьКнопкуАннулирования(ЭДОбъект, UserPermissions) Тогда
			КнопкаАннулировать=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("Аннулировать");
			Если КнопкаАннулировать = Неопределено Тогда
				КнопкаАннулировать=					ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("Аннулировать", ТипКнопкиКоманднойПанели.Действие, "Аннулировать", Новый Действие("АннулироватьДокумент"));
				КнопкаАннулировать.Подсказка=		"Аннулировать документ";
				КнопкаАннулировать.Картинка=		ЭДО_БиблиотекаКартинок().КартинкаАннулирование;
				КнопкаАннулировать.Отображение=		ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				КоличествоКнопокВРазделеАннулирования=		КоличествоКнопокВРазделеАннулирования + 1;
			КонецЕсли;
		Иначе
			КнопкаАннулировать=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("Аннулировать");
			Если НЕ КнопкаАннулировать = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаАннулировать);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьКнопкуОтказаАннулирования(ЭДОбъект, UserPermissions) Тогда
			
			КнопкаОтказатьВАннулировании=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ОтказатьВАннулировании");
			Если КнопкаОтказатьВАннулировании = Неопределено Тогда
				КнопкаОтказатьВАннулировании=				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Добавить("ОтказатьВАннулировании", ТипКнопкиКоманднойПанели.Действие, "Отказать", Новый Действие("ОтказатьВАннулировании"));
				КнопкаОтказатьВАннулировании.Подсказка=		"Отказать в аннулировании";
				КнопкаОтказатьВАннулировании.Отображение=	ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
				КоличествоКнопокВРазделеАннулирования=		КоличествоКнопокВРазделеАннулирования + 1;
			КонецЕсли;
			
			РазделительГруппыАннулирования2=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования2");
			Если РазделительГруппыАннулирования2 = Неопределено Тогда
				РазделительГруппыАннулирования2=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Вставить(ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Количество() - КоличествоКнопокВРазделеАннулирования, "РазделительГруппыАннулирования2", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			РазделительГруппыАннулирования3=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования3");
			Если РазделительГруппыАннулирования3 = Неопределено Тогда
				РазделительГруппыАннулирования3=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Вставить(ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Количество(), "РазделительГруппыАннулирования3", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
		Иначе
			
			КнопкаОтказатьВАннулировании=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("ОтказатьВАннулировании");
			Если НЕ КнопкаОтказатьВАннулировании = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(КнопкаОтказатьВАннулировании);
			КонецЕсли;
			
			РазделительГруппыАннулирования2=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования2");
			Если НЕ РазделительГруппыАннулирования2 = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(РазделительГруппыАннулирования2);
			КонецЕсли;
			
			РазделительГруппыАннулирования3=	ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Найти("РазделительГруппыАннулирования3");
			Если НЕ РазделительГруппыАннулирования3 = Неопределено Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Удалить(РазделительГруппыАннулирования3);
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Сдвинуть(ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Диадок, ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Количество());
		ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Сдвинуть(ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Действия, ФормаКарточкиДокумента.ЭлементыФормы.КоманднаяПанель.Кнопки.Количество());
		
	КонецПроцедуры
	
	Функция ПредупреждатьОСтаромФормате(ЭДОбъект, DocumentContent) Экспорт
		
		Возврат	
		
		DocumentContent <> Неопределено
		И ЛЕВ(DocumentContent.Type, 7) = "Invoice"
		И ((НЕ ЗначениеЗаполнено(ЭДОбъект.ConfirmationDate) ИЛИ ЭДОбъект.ConfirmationDate >= '20170701') // с 01.07.2017 СФ должен отправляться в формате УПД
			ИЛИ (DocumentContent.InvoiceVersion <> "5.02" И ЭДОбъект.ConfirmationDate >= '20150414'));   // с 14.04.2015 версия 5.02
		
	КонецФункции
	
	Процедура НастроитьЭлементыФормы(ЭДОбъект, ФормаКарточкиДокумента)
		
		//выведем информацию об отправителе и получателе
		НаименованиеОтправителя = ?(ЭДОбъект.Direction = "Inbound",ЭДОбъект.Counteragent.Name,ЭДОбъект.Organization.Name);
		НаименованиеПолучателя  = ?(ЭДОбъект.Direction = "Inbound",ЭДОбъект.Organization.Name,ЭДОбъект.Counteragent.Name);
		
		Если ЭДОбъект.FromDepartment<>Неопределено Тогда
			НаименованиеОтправителя = НаименованиеОтправителя +", "+ЭДОбъект.FromDepartment.Name;
		КонецЕсли;
		Если ЭДОбъект.ToDepartment<>Неопределено Тогда
			НаименованиеПолучателя = НаименованиеПолучателя +", "+ЭДОбъект.ToDepartment.Name;
		КонецЕсли;                                                                            
		
		ФормаКарточкиДокумента.ОтправительПолучатель = НаименованиеОтправителя+" "+Символ(8594)+" "+НаименованиеПолучателя;
		
		ИндексПоследнейРезолюции = ЭДОбъект.Resolutions.Count;
		Пока ИндексПоследнейРезолюции > 0 Цикл
			
			ИндексПоследнейРезолюции = ИндексПоследнейРезолюции - 1;
			
			ПоследняяРезолюция = ЭДОбъект.Resolutions.GetItem(ИндексПоследнейРезолюции);
			
			Если ПоследняяРезолюция.ResolutionType = "InvoiceCorrectionRequest" Тогда
				ТекстЗапросаНаУточнение = ПоследняяРезолюция.comment;
				ПоследняяРезолюция = Неопределено;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		//Информация о согласовании
		Если ПоследняяРезолюция <> Неопределено Тогда
			
			Действие = Модуль_РаботаССерверомДиадок.ПредставлениеТипаРезолюции(ПоследняяРезолюция.ResolutionType);
			
			ФормаКарточкиДокумента.ЭлементыФормы.НадписьСогласование.ЦветТекста=		Новый Цвет();
			ФормаКарточкиДокумента.ЭлементыФормы.ТекстСогласованийКратко.ЦветТекста=	Новый Цвет();
			
			Если ПоследняяРезолюция.ResolutionType  = "ResolutionApprove"
				ИЛИ ПоследняяРезолюция.ResolutionType  = "SignatureApprove" Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.НадписьСогласование.ЦветТекста=		WebЦвета.Зеленый;
				ФормаКарточкиДокумента.ЭлементыФормы.ТекстСогласованийКратко.ЦветТекста=	WebЦвета.Зеленый;
			ИначеЕсли ПоследняяРезолюция.ResolutionType = "ResolutionDisapprove"
				ИЛИ ПоследняяРезолюция.ResolutionType = "SignatureDisapprove" Тогда
				ФормаКарточкиДокумента.ЭлементыФормы.НадписьСогласование.ЦветТекста=		WebЦвета.Красный;
				ФормаКарточкиДокумента.ЭлементыФормы.ТекстСогласованийКратко.ЦветТекста=	WebЦвета.Красный;
			КонецЕсли;
			
			ПолучательРезолюции=	?(ПоследняяРезолюция.TargetDepartment = Неопределено, "", " " + ПоследняяРезолюция.TargetDepartment.Name) + 
			?(ПоследняяРезолюция.TargetUser = Неопределено, "", ?(ПоследняяРезолюция.TargetDepartment = Неопределено, " ",", ") + ФамилияСИнициалами(ПоследняяРезолюция.TargetUser.Name));
			
			Если ИндексПоследнейРезолюции > 0 Тогда // Если ИндексПоследнейРезолюции > 0 значит есть несколько резолюций.
				
				ФормаКарточкиДокумента.ТекстСогласованийКратко=	"Последнее действие: " + Действие + ?(ЗначениеЗаполнено(ПоследняяРезолюция.Author), ", " + ФамилияСИнициалами(ПоследняяРезолюция.Author) 
				+ ?(НЕ ПустаяСтрока(ПолучательРезолюции), " " + Символ(8594) + " " + ПолучательРезолюции, ""), "")
				+ " (" + Формат(ПоследняяРезолюция.CreationDate, "ДФ=dd.MM.yy")+") " 
				+ ?(ЗначениеЗаполнено(ПоследняяРезолюция.Comment), " - " 
				+ ?((СтрДлина(ПоследняяРезолюция.Comment)+СтрДлина(ПоследняяРезолюция.Comment)*0.5) > 50, Лев(ПоследняяРезолюция.Comment, 50) + "...", ПоследняяРезолюция.Comment), "");
				
				ФормаКарточкиДокумента.ЭлементыФормы.СогласованиеПодробно.Доступность = Истина;
				
			Иначе
				
				ФормаКарточкиДокумента.ТекстСогласованийКратко=	Действие + ?(ЗначениеЗаполнено(ПоследняяРезолюция.Author), ": " + ФамилияСИнициалами(ПоследняяРезолюция.Author)
				+ ?(НЕ ПустаяСтрока(ПолучательРезолюции), " " + Символ(8594) + " " + ПолучательРезолюции, ""), "")
				+ " (" + Формат(ПоследняяРезолюция.CreationDate, "ДФ=dd.MM.yy")+") " 
				+ ?(ЗначениеЗаполнено(ПоследняяРезолюция.Comment), " - " + ПоследняяРезолюция.Comment, "");
				
				ФормаКарточкиДокумента.ЭлементыФормы.СогласованиеПодробно.Доступность = СтрДлина(ФормаКарточкиДокумента.ТекстСогласованийКратко) > 130;
				
			КонецЕсли;
			
			УстановитьРежимСверткиЭлементаУправления(ФормаКарточкиДокумента.Элементыформы.ПанельСогласовано, РежимСверткиЭлементаУправления.Нет)
			
		Иначе
			УстановитьРежимСверткиЭлементаУправления(ФормаКарточкиДокумента.Элементыформы.ПанельСогласовано, РежимСверткиЭлементаУправления.Верх)
		КонецЕсли;
		
		ФормаКарточкиДокумента.СостояниеДокументооборота=	Модуль_РаботаССерверомДиадок.ПредставлениеСтатуса(ЭДОбъект);
		
		ResolutionStatus=			ЭДОбъект.resolutionStatus;
		Если НЕ ResolutionStatus = Неопределено Тогда
			ПредставлениеСтатусаСогласования =   Модуль_РаботаССерверомДиадок.ПредставлениеСтатусаСогласования(ЭДОбъект) ;
			//Если  ЗначениеЗаполнено(ПредставлениеСтатусаСогласования) и  (найти( ФормаКарточкиДокумента.СостояниеДокументооборота, "Подпись не требуется")>0) Тогда 
			//		 ФормаКарточкиДокумента.СостояниеДокументооборота= ПредставлениеСтатусаСогласования
			//Иначе		 
			ФормаКарточкиДокумента.СостояниеДокументооборота=	ФормаКарточкиДокумента.СостояниеДокументооборота + ?(НЕ ПустаяСтрока(ФормаКарточкиДокумента.СостояниеДокументооборота), ". ", "")
			+ ПредставлениеСтатусаСогласования;
			//КонецЕсли;							
		КонецЕсли;
		
		Если ЭДОбъект.Department = Неопределено Тогда
			ФормаКарточкиДокумента.ПредставлениеПодразделения=		"Головное подразделение";
			Подсказка=												"Головное подразделение";
		Иначе 	
			ФормаКарточкиДокумента.ПредставлениеПодразделения=		ЭДОбъект.Department.Name;
			Подсказка=												ЭДОбъект.Department.Name;
			Подсказка=												Модуль_РаботаССерверомДиадок.ПолучитьПодсказкуПредставленияПодразделения(ЭДОбъект.Department, Подсказка);
		КонецЕсли;
		ФормаКарточкиДокумента.ЭлементыФормы.НадписьПредставлениеПодразделения.Подсказка=	Подсказка;
		
		ПанельЗапросаНаУточнение = ФормаКарточкиДокумента.ЭлементыФормы.Найти("ПанельЗапросНаУточнение");
		Если ПанельЗапросаНаУточнение <> Неопределено Тогда
			Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" И ЭДОбъект.AmendmentRequested И НЕ ЭДОбъект.Corrected И НЕ ЭДОбъект.Revised Тогда 
				УстановитьРежимСверткиЭлементаУправления(ПанельЗапросаНаУточнение, РежимСверткиЭлементаУправления.Нет);
				ФормаКарточкиДокумента.ЭлементыФормы.ТекстЗапросаНаУточнение.Заголовок = ?(ЗначениеЗаполнено(ТекстЗапросаНаУточнение), ТекстЗапросаНаУточнение, ЭДОбъект.GetAmendmentRequestedComment());
			Иначе
				УстановитьРежимСверткиЭлементаУправления(ПанельЗапросаНаУточнение, РежимСверткиЭлементаУправления.Верх);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура НастроитьКоманднуюПанельКарточкиДокумента(ЭДОбъект, ФормаКарточкиДокумента) Экспорт
		
		НастроитьКнопкиКоманднойПанели(ЭДОбъект, ФормаКарточкиДокумента);
		НастроитьЭлементыФормы(ЭДОбъект, ФормаКарточкиДокумента);
		
	КонецПроцедуры
	
	Процедура НастроитьПанельТекстОшибок(массивОшибок, ФормаКарточкиДокумента) Экспорт 
		Если МассивОшибок.Количество() > 0 Тогда
			ПоследняяОшибка=	МассивОшибок.Получить(МассивОшибок.Количество()-1);
			Если МассивОшибок.Количество() > 1 Тогда
				ФормаКарточкиДокумента.ТекстОшибки=	"В документе имеются ошибки...";
				ФормаКарточкиДокумента.ЭлементыФормы.ОшибкиПодробно.Доступность=	Истина;
			Иначе
				ФормаКарточкиДокумента.ТекстОшибки=	ПоследняяОшибка.КатегорияОшибки + ": " + ПоследняяОшибка.ТекстОшибки;
				ФормаКарточкиДокумента.ЭлементыФормы.ОшибкиПодробно.Доступность=	Ложь;
			КонецЕсли;
			УстановитьРежимСверткиЭлементаУправления(ФормаКарточкиДокумента.Элементыформы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Нет);
		Иначе
			УстановитьРежимСверткиЭлементаУправления(ФормаКарточкиДокумента.Элементыформы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Верх);
		КонецЕсли;
	КонецПроцедуры	
	
//} УПРАВЛЕНИЕ ФОРМОЙ

//{ ДЕЙСТВИЯ НА ФОРМЕ

	Функция ДействиеСЗалоченнымПакетомЗапрещено(ЭДОбъект,  ИдентификаторДействия) Экспорт
		
		Если ЭДОбъект.IsLockedPackage = Истина 
			И ИдентификаторДействия <> "ПодписатьДокумент"
			И ИдентификаторДействия <> "ОтказатьВПодписи"
			И ИдентификаторДействия <> "ЗапроситьУточнение"
			И ИдентификаторДействия <> "СогласоватьДокумент"
			И ИдентификаторДействия <> "ОтправитьИсправление"
			И ИдентификаторДействия <> "ОтправитьКорректировку"
		Тогда
			Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(,"Для документа из пакета, по которому отправитель запретил обработку по отдельности, действие не поддерживается!",Неопределено);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ВыполнитьДействиеНадДокументом(ЭДОбъект, ИдентификаторДействия, ПредставлениеДокумента) Экспорт
		
		Если ДействиеСЗалоченнымПакетомЗапрещено(ЭДОбъект, ИдентификаторДействия) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если  ИдентификаторДействия = "АннулироватьДокумент" Тогда 
			Возврат АннулироватьДокумент(ЭДОбъект, ПредставлениеДокумента);
		ИначеЕсли  ИдентификаторДействия = "ОтказатьВАннулировании" Тогда 
			Возврат ОтказатьВАннулировании(ЭДОбъект);
		ИначеЕсли  ИдентификаторДействия = "ОтправитьЗапросНаАннулирование" Тогда 
			Возврат ОтправитьЗапросНаАннулирование(ЭДОбъект);
			
		ИначеЕсли  ИдентификаторДействия = "ПодписатьДокумент" Тогда 
			Возврат ПодписатьДокумент(ЭДОбъект);
		ИначеЕсли ИдентификаторДействия = "ПодписатьЗапрошенныйДокумент" Тогда
			Возврат ПодписатьЗапрошенныйДокумент(ЭДОбъект);
		ИначеЕсли  ИдентификаторДействия = "ОтказатьВПодписи" Тогда 
			Возврат ОтказатьВПодписи(ЭДОбъект);
			
		ИначеЕсли  ИдентификаторДействия = "СогласоватьДокумент" Тогда 
			Возврат СогласоватьДокумент(ЭДОбъект);
		ИначеЕсли  ИдентификаторДействия = "ОтказатьВСогласовании" Тогда 
			Возврат ОтказатьВСогласовании(ЭДОбъект);
			
		ИначеЕсли  ИдентификаторДействия = "ИзменитьПодразделение" Тогда 
			Возврат ИзменитьПодразделение(ЭДОбъект);
			
		ИначеЕсли  ИдентификаторДействия = "ЗапроситьУточнение" Тогда 
			Возврат ЗапроситьУточнение(ЭДОбъект);
		ИначеЕсли  ИдентификаторДействия = "ОтправитьИсправление" Тогда 
			Возврат ОтправитьИсправление(ЭДОбъект);
		ИначеЕсли  ИдентификаторДействия = "ОтправитьКорректировку" Тогда 
			Возврат ОтправитьКорректировку(ЭДОбъект);
			
		Иначе 
			ВызватьИсключение("передано неизвестное действие: " + ИдентификаторДействия);
		КонецЕсли;	 
		
	КонецФункции
	
	Функция АннулироватьДокумент(ЭДОбъект, ПредставлениеДокумента) Экспорт 
		
		ФормаПодписания = ЭтотОбъект.ПолучитьФорму("ФормаПодписанияДокумента");
		ФормаПодписания.ПредставлениеДокумента = ПредставлениеДокумента;
		ФормаПодписания.ПредставлениеПодписи   = ЭДОбъект.Organization.Name+", " + Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(ЭДОбъект.Organization.Id);
		ФормаПодписания.Режим=	2;
		
		АннулированиеПодтверждено= ФормаПодписания.ОткрытьМодально() = Истина;
		ФормаПодписания= Неопределено;
			
		Если АннулированиеПодтверждено Тогда 
			Модуль_РаботаССерверомДиадок.ОбработатьЗапросНаАннулирование(Истина, ЭДОбъект);
			Возврат Истина
		Иначе 
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ОтказатьВАннулировании(ЭДОбъект)   Экспорт
		фрм = ЭтотОбъект.ПолучитьФорму("ФормаОтветаПоДокументу");
		фрм.ПредставлениеПодписи = ЭДОбъект.Organization.Name + ", " + Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(ЭДОбъект.Organization.Id);
		фрм.РежимФормы = 4;
		
		фрм.ОткрытьМодально();
		Если фрм.результат Тогда
			Модуль_РаботаССерверомДиадок.ОбработатьЗапросНаАннулирование(Ложь, ЭДОбъект, фрм.Комментарий);
			Возврат Истина
		Иначе 
			Возврат Ложь
		КонецЕсли;
	КонецФункции
	
	Функция ОтправитьЗапросНаАннулирование(ЭДОбъект)  Экспорт 
		
		фрм = ЭтотОбъект.ПолучитьФорму("ФормаОтветаПоДокументу");
		фрм.ПредставлениеПодписи = ЭДОбъект.Organization.Name + ", " + Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(ЭДОбъект.Organization.Id);
		
		Если ЭДОбъект.Direction = "Outbound"
			И ЭДОбъект.Status = "OutboundWaitingForRecipientSignature" Тогда
			фрм.РежимФормы = 6;	
		Иначе
			фрм.РежимФормы = 5;
		КонецЕсли;
		
		фрм.ОткрытьМодально();
		Если фрм.результат Тогда
			Модуль_РаботаССерверомДиадок.ОтправитьЗапросНаАннулирование(ЭДОбъект, фрм.Комментарий);
			Возврат Истина;
		Иначе 	
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПодписатьДокумент(Document) Экспорт
		
		Если Document.IsLockedPackage Тогда
			РезультатВыполнения= ПодписатьЗалоченныйПакет(Document);
			Возврат НЕ РезультатВыполнения.Отказ;
		КонецЕсли;
		
		Отказ = Ложь;
		
		DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(Document);
		
		Если ЭтоФормализованныйДокумент(DocumentType) Тогда
			
			ReplySendTask= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ReplySendTask(Document, "AcceptDocument");
			DocumentType=  ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(Document, ReplySendTask.Content);
			
			СтруктураПодписи= ПолучитьМодульПрог("Форма_Основная_Логика").ПолучитьСтруктуруПодписи(Document, DocumentType);
			
			Если СтруктураПодписи <> Неопределено И СтруктураПодписи <> Ложь Тогда
				BuyerTitleInfo= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").СформироватьТитулПолучателя(СтруктураПодписи, Document, DocumentType);
				ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПодписатьВДиадоке(Document, ReplySendTask, BuyerTitleInfo);
			Иначе 
				Отказ = Истина;
			КонецЕсли;	 
			
		Иначе 
			
			ФормаПодписания = ПолучитьФорму("ФормаПодписанияДокумента");
			ФормаПодписания.ПредставлениеДокумента=	ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПредставлениеЭД(Document);
			ФормаПодписания.ПредставлениеПодписи=	Document.Organization.Name + ", " + ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьФИОПодписанта(Document.OrganizationID);
			ФормаПодписания.Режим= 1;
			
			ПодписьПодтверждена= ФормаПодписания.ОткрытьМодально() = Истина;
			ФормаПодписания= Неопределено;
			
			Если ПодписьПодтверждена Тогда
				ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПодписатьВДиадоке(Document);
			КонецЕсли;
		
		КонецЕсли;	
		
		Если НЕ Отказ Тогда
			ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").События_ПриИзмененииСтатусаДокумента(Document.DocumentID, Document.OrganizationID);
		КонецЕсли;
		
		Возврат НЕ Отказ;
		
	КонецФункции
	
	Функция ПодписатьЗапрошенныйДокумент(Document) Экспорт 
		
		ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПодписатьЗапрошенныйДокумент(Document);
		
		ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").События_ПриИзмененииСтатусаДокумента(Document.DocumentID, Document.OrganizationID);
		
		Возврат Истина;
		
	КонецФункции
	
	Функция ПодписатьЗалоченныйПакет(Document, НеПоказыватьФормуТитула= Ложь) Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
		
		СтруктурыПодписей= Новый Соответствие;
		
		ReplySendTask= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ReplySendTask(Document, "AcceptDocument");
		PackageContentItems= ReplySendTask.Content.ContentItems;
		PackageContentItemsВГраница= PackageContentItems.Count-1;
		
		ТекущийDocumentID= Document.DocumentID;
		Для ИндексЦикла= 0 ПО PackageContentItemsВГраница Цикл
			PackageContentItem= PackageContentItems.GetItem(ИндексЦикла);
			Если PackageContentItem.Document.DocumentID = ТекущийDocumentID Тогда
				ПодписатьЗалоченныйПакет_ДобавитьСтруктуруПодписи(PackageContentItem.Document, PackageContentItem.Content, СтруктурыПодписей, НеПоказыватьФормуТитула, PackageContentItems.Count, РезультатВыполнения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ РезультатВыполнения.Отказ Тогда
			Для ИндексЦикла= 0 ПО PackageContentItemsВГраница Цикл
				PackageContentItem= PackageContentItems.GetItem(ИндексЦикла);
				ПодписатьЗалоченныйПакет_ДобавитьСтруктуруПодписи(PackageContentItem.Document, PackageContentItem.Content, СтруктурыПодписей, НеПоказыватьФормуТитула, PackageContentItems.Count, РезультатВыполнения);
				Если РезультатВыполнения.Отказ Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ РезультатВыполнения.Отказ Тогда
			
			ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПодписатьЗалоченныйПакетВДиадоке(ReplySendTask, СтруктурыПодписей);
			
			РезультатВыполнения.Вставить("Documents", Новый Массив);
			
			Для ИндексЦикла= 0 ПО PackageContentItemsВГраница Цикл
				
				PackageContentItem= PackageContentItems.GetItem(ИндексЦикла);
				
				НовыйDocument= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьДокументДиадок(PackageContentItem.Document.DocumentId, PackageContentItem.Document.OrganizationId);
				
				Оповестить("ОбновитьСтроку", НовыйDocument, ЭтаФорма);
				
				РезультатВыполнения.Documents.Добавить(НовыйDocument);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	Процедура ПодписатьЗалоченныйПакет_ДобавитьСтруктуруПодписи(Document, DocumentContent, СтруктурыПодписей, НеПоказыватьФормуТитула, КоличествоДокументовНаПодпись, РезультатВыполнения)
		
		DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(Document, DocumentContent);
		
		СтруктураПодписи= СтруктурыПодписей[DocumentType];
		
		Если СтруктураПодписи = Неопределено Тогда
			
			СтруктураПодписи= ПолучитьМодульПрог("Форма_Основная_Логика").ПолучитьСтруктуруПодписи(Document, DocumentType, НеПоказыватьФормуТитула, КоличествоДокументовНаПодпись);
			
			Если СтруктураПодписи = Ложь Тогда
				РезультатВыполнения.Отказ= Истина;
				РезультатВыполнения.ОписаниеОшибки= "Пользователь отменил подписание";
			ИначеЕсли СтруктураПодписи = Неопределено Тогда
				РезультатВыполнения.Отказ= Истина;
				РезультатВыполнения.ОписаниеОшибки= "Не настроены параметры подписания накладных";
			КонецЕсли;
			
			Если СтруктураПодписи = Неопределено ИЛИ СтруктураПодписи = Ложь Тогда
				РезультатВыполнения.Отказ= Истина;
			Иначе
				СтруктурыПодписей.Вставить(DocumentType, СтруктураПодписи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ОтказатьВПодписи(Document, Комментарий= Неопределено, Асинхронно= Ложь) Экспорт 
		
		Отказ= Ложь;
		
		Если Document.IsLockedPackage Тогда
			Возврат ОтказатьВПодписиЗалоченногоПакета(Document, Комментарий, Асинхронно);
		КонецЕсли;
		
		ФИО= 	   Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(Document.OrganizationID);
		Должность= Модуль_РаботаССерверомДиадок.ПолучитьДолжностьПодписанта(Document.OrganizationID);
		
		Если Комментарий = Неопределено Тогда
			
			ФормаОтветаПоДокументу= ПолучитьФорму("ФормаОтветаПоДокументу");
			ФормаОтветаПоДокументу.ПредставлениеПодписи= Document.Organization.Name + ", " + ФИО + ?(НЕ ПустаяСтрока(Должность), " ("+Должность+")", "");
			ФормаОтветаПоДокументу.РежимФормы= 1;
			ФормаОтветаПоДокументу.КоличествоДокументовНаОбработку= 1;
			
			ФормаОтветаПоДокументу.ОткрытьМодально();
			
			Отказ= ФормаОтветаПоДокументу.Результат <> Истина;
			
			Если НЕ Отказ Тогда
				Комментарий= ФормаОтветаПоДокументу.Комментарий;
			КонецЕсли;
			
			ФормаОтветаПоДокументу= Неопределено;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ОтказатьВПодписиВДиадоке(Document, Комментарий, Асинхронно);
			
			Если Асинхронно Тогда
				Возврат РезультатВыполнения;
			Иначе
				ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").События_ПриИзмененииСтатусаДокумента(Document.DocumentID, Document.OrganizationID);
				Оповестить("ОбновитьСтроку", ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьДокументДиадок(Document.DocumentID, Document.OrganizationID), ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НЕ Отказ;
		
	КонецФункции
	
	Функция ОтказатьВПодписиЗалоченногоПакета(ЭДОбъект, Комментарий= Неопределено, Асинхронно= Ложь) Экспорт 
		
		Отказ= Ложь;
		
		ReplySendTask= ЭДОбъект.GetDocumentPackage().CreateReplySendTask("RejectDocument");
		PackageContentItems= ReplySendTask.Content.ContentItems;
		
		ФИО= 	   Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(ЭДОбъект.OrganizationID);
		Должность= Модуль_РаботаССерверомДиадок.ПолучитьДолжностьПодписанта(ЭДОбъект.OrganizationID);
		
		Если Комментарий = Неопределено Тогда 
			
			ФормаОтветаПоДокументу= ПолучитьФорму("ФормаОтветаПоДокументу");
			ФормаОтветаПоДокументу.ПредставлениеПодписи= ЭДОбъект.Organization.Name + ", " + ФИО + ?(НЕ ПустаяСтрока(Должность), " ("+Должность+")", "");
			ФормаОтветаПоДокументу.РежимФормы= 1;
			ФормаОтветаПоДокументу.КоличествоДокументовНаОбработку= PackageContentItems.Count;
			
			ФормаОтветаПоДокументу.ОткрытьМодально();
			
			Отказ= ФормаОтветаПоДокументу.Результат <> Истина;
			
			Если НЕ Отказ Тогда
				Комментарий= ФормаОтветаПоДокументу.Комментарий;
			КонецЕсли;
			
			ФормаОтветаПоДокументу= Неопределено;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ОтказатьВПодписиЗалоченногоПакетаВДиадоке(ReplySendTask, Комментарий, Асинхронно);
			
			Если Асинхронно Тогда
				Возврат РезультатВыполнения;
			Иначе
				
				ВГраница= PackageContentItems.Count-1;
				Для ИндексЦикла= 0 ПО ВГраница Цикл
					PackageContentItem= PackageContentItems.GetItem(ИндексЦикла);
					Оповестить("ОбновитьСтроку", PackageContentItem.Document.Organization.GetDocumentById(PackageContentItem.Document.DocumentId), ЭтаФорма);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НЕ Отказ;

	КонецФункции
	
	Функция ЗапроситьУточнение(ЭДОбъект) Экспорт 
		фрм = ПолучитьФорму("ФормаЗапросаУточнения");
		фрм.ПредставлениеПодписи = ЭДОбъект.Organization.Name+", "+Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(ЭДОбъект.Organization.Id);
		
		фрм.ОткрытьМодально();
		Если фрм.результат Тогда
			Модуль_РаботаССерверомДиадок.ОтправитьЗапросНаУточнение(ЭДОбъект , фрм.КомментарийПоОтказу) ;
			Возврат Истина
		Иначе 
			Возврат Ложь;
		КонецЕсли;	
	КонецФункции
	
	Функция ОтправитьИсправление(ЭДОбъект) Экспорт 
		newType = "";
		Если ЭДОбъект.Type = "Invoice" Тогда
			newType = "InvoiceRevision";
		ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
			newType = "InvoiceRevision";
		ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
			newType = "InvoiceCorrectionRevision";
		ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
			newType = "InvoiceCorrectionRevision";
		КонецЕсли;
		
		ФормаСозданияИсправления= ПолучитьФорму("ФормаСозданиеИсправления");
		ФормаСозданияИсправления.ЭДОбъект= ЭДОбъект;
		ФормаСозданияИсправления.ТипНовогоДокумента= newType;
		ID= ФормаСозданияИсправления.ОткрытьМодально();
		Возврат  ЗначениеЗаполнено(ID) 
	КонецФункции
	
	Функция ОтправитьКорректировку(ЭДОбъект) Экспорт 
		
		newType = "";
		Если ЭДОбъект.Type = "Invoice" Тогда
			newType = "InvoiceCorrection";
		ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
			newType = "InvoiceCorrection";
		КонецЕсли;
		
		Если ПустаяСтрока(newType) Тогда
			Предупреждение("Невозможно создать корректировку на данный документ.",, НаименованиеСистемы);
			Возврат Ложь
		КонецЕсли;
		
		ФормаСозданияИсправления = ПолучитьФорму("ФормаСозданиеИсправления");
		ФормаСозданияИсправления.ЭДОбъект = ЭДОбъект;
		ФормаСозданияИсправления.ТипНовогоДокумента = newType;
		ID = ФормаСозданияИсправления.ОткрытьМодально();
		
		Возврат ЗначениеЗаполнено(ID);
		
	КонецФункции
	
	Процедура ПоказатьЗапросНаУточнениеПодробно(ЭДОбъект, Организация)  Экспорт 
		
		HTMLПредставление=				Модуль_РаботаССерверомДиадок.СформироватьHTMLПредставлениеЗапросаНаУточнение(ЭДОбъект, Организация);
		
		ФормаHTMLДокумента=				ПолучитьМодульПрог("ФормаHTMLДокумента");
		ФормаHTMLДокумента.Заголовок=	"Запрос на уточнение";
		ФормаHTMLДокумента.История=		HTMLПредставление;
		
		ФормаHTMLДокумента.ОткрытьМодально();
		
	КонецПроцедуры
	
	Функция СогласоватьДокумент(ЭДОбъект)  Экспорт 
		
		ФормаОтветаПоДокументу= ПолучитьФорму("ФормаОтветаПоДокументу");
		ФормаОтветаПоДокументу.РежимФормы = 2;
		
		Если ЭДОбъект.IsLockedPackage Тогда
			DocumentPackage= ЭДОбъект.GetDocumentPackage();
			//ФормаОтветаПоДокументу.КоличествоДокументовНаОбработку= КоличествоДокументовВПакетеНаСогласование(DocumentPackage);
			ФормаОтветаПоДокументу.КоличествоДокументовНаОбработку= DocumentPackage.Documents.Count
		Иначе
			ФормаОтветаПоДокументу.КоличествоДокументовНаОбработку= 1;
		КонецЕсли;
		
		ФормаОтветаПоДокументу.ОткрытьМодально();
		
		Если ФормаОтветаПоДокументу.результат Тогда 
			
			Если ЭДОбъект.IsLockedPackage Тогда
				
				DocumentPackage.Approve(ФормаОтветаПоДокументу.Комментарий);
				
				DocumentId= ЭДОбъект.DocumentId;
				
				ВГраница= DocumentPackage.Documents.Count-1;
				Для ИндексЦикла=0 ПО ВГраница Цикл
					
					Document= DocumentPackage.Documents.GetItem(ИндексЦикла);
					
					Если Document.DocumentId <> DocumentId Тогда
						Оповестить("ОбновитьСтроку", Document.Organization.GetDocumentById(Document.DocumentId), ЭтаФорма);
					КонецЕсли;
					
				КонецЦикла;
					
			Иначе
				ЭДОбъект.Approve(ФормаОтветаПоДокументу.Комментарий);
			КонецЕсли;
			
			Возврат Истина
			
		Иначе 
			Возврат Ложь;
		КонецЕсли;	 
	КонецФункции
	
	Функция КоличествоДокументовВПакетеНаСогласование(DocumentPackage)
		
		КоличествоДокументовВПакетеНаСогласование= 0;
		
		ВГраница= DocumentPackage.Documents.Count-1;
		Для ИндексЦикла=0 ПО ВГраница Цикл
			
			Document= DocumentPackage.Documents.GetItem(ИндексЦикла);
			
			Direction= Document.Direction;
			Type= 	   Document.Type;
			
			Если Direction <> "Outbound" ИЛИ 
				 (Type <> "ProformaInvoice"
				И Type <> "ServiceDetails"
				И Type <> "Invoice"
				И Type <> "InvoiceRevision"
				И Type <> "InvoiceCorrection"
				И Type <> "InvoiceCorrectionRevision")
			Тогда
				КоличествоДокументовВПакетеНаСогласование= КоличествоДокументовВПакетеНаСогласование + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат КоличествоДокументовВПакетеНаСогласование;
		
	КонецФункции
	
	Функция  ОтказатьВСогласовании(ЭДОбъект) Экспорт 
		фрм = ПолучитьФорму("ФормаОтветаПоДокументу");
		фрм.РежимФормы = 3;
		
		фрм.ОткрытьМодально();
		Если фрм.результат Тогда 
			ЭДОбъект.DisApprove(фрм.Комментарий);
			Возврат Истина;
		Иначе 
			Возврат Ложь;
		КонецЕсли;	 	
	КонецФункции	
	
	Функция  ИзменитьПодразделение(ЭДОбъект) Экспорт 
		стОрганизация = ПолучитьФорму("ФормаВыбораОрганизацииПодразделения").ВыбратьПодразделениеОрганизацииДиадок(ЭДОбъект.OrganizationId, ЭДОбъект.Department);
		Если стОрганизация <> Неопределено Тогда
			ЭДОбъект.Move(стОрганизация.DepartmentId); 
			Возврат Истина
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	КонецФункции
	
	Функция КоманднаяПанельОтменитьСопоставлениеДокумент(СсылкаНаОбъект, Document)  Экспорт 
		Если  вопрос("Вы действительно хотите отменить сопоставление с документом 1С?", режимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = кодВозвратаДиалога.Нет Тогда 
			Возврат Ложь
		КонецЕсли;
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СсылкаНаОбъект,,,Document.Type, Document);
		Возврат Истина;
	КонецФункции
	
	Процедура СогласованиеПодробноНажатие(ЭДОбъект,Организация )  Экспорт 
		HTMLПредставление=				Модуль_РаботаССерверомДиадок.СформироватьHTMLПредставлениеРезолюций(ЭДОбъект, Организация);
		
		ФормаHTMLДокумента=				ПолучитьМодульПрог("ФормаHTMLДокумента");
		ФормаHTMLДокумента.Заголовок=	"История согласования";
		ФормаHTMLДокумента.История=		HTMLПредставление;
		ФормаHTMLДокумента.ОткрытьМодально();
	КонецПроцедуры
	
	Процедура ОшибкиПодробноНажатие(ЭДОбъект,Организация, МассивОшибок)  Экспорт
		HTMLПредставление=				Модуль_РаботаССерверомДиадок.СформироватьHTMLПредставлениеОшибок(ЭДОбъект, Организация, МассивОшибок);
		
		ФормаHTMLДокумента=				ПолучитьМодульПрог("ФормаHTMLДокумента");
		ФормаHTMLДокумента.Заголовок=	"Ошибки документа";
		ФормаHTMLДокумента.История=		HTMLПредставление;
		ФормаHTMLДокумента.ОткрытьМодально();
	КонецПроцедуры
	
	Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	Процедура ОткрытьФормуНеформализованногоДокумента(Document) Экспорт 
		
		Если Document.HasCustomPrintForm=Ложь Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ПолучитьРасширениеФайлаДиадок(Document.FileName));
			Document.SaveSenderContent(ИмяВременногоФайла);
		Иначе 
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
			
			Попытка
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		ЗапуститьПриложение(ИмяВременногоФайла);
		
	КонецПроцедуры
	
	Функция ВосстановитьНастройкуПериода(ДатаНачалаПоУмолчанию, ДатаОкончанияПоУмолчанию, ИмяНастройкиПериода) Экспорт
		
		НастройкаПериода=	ВосстановитьЗначение(ИмяНастройкиПериода);
		Если НастройкаПериода = Неопределено 
			ИЛИ Тип("НастройкаПериода") <> ТипЗнч(НастройкаПериода) Тогда
			НастройкаПериода = Новый НастройкаПериода;
			Настройкапериода.ВариантНастройки=	ВариантНастройкиПериода.Интервал;
			Настройкапериода.ДатаНачала=		ДатаНачалаПоУмолчанию;
			Настройкапериода.ДатаОкончания= 	ДатаОкончанияПоУмолчанию;	
			НастройкаПериода.ВариантНачала=		ВариантГраницыИнтервала.РабочаяДата;
			НастройкаПериода.ВариантОкончания=	ВариантГраницыИнтервала.РабочаяДата;
		КонецЕсли;
		
		Возврат НастройкаПериода;
		
	КонецФункции
	
	Функция СброситьНастройкуПериода(ИмяНастройкиПериода) Экспорт
		
		НастройкаПериода = Новый Настройкапериода;
		Настройкапериода.ВариантНастройки=	ВариантНастройкиПериода.Интервал;
		Настройкапериода.ДатаНачала=		ТекущаяДата();
		Настройкапериода.ДатаОкончания=		ТекущаяДата();	
		НастройкаПериода.ВариантНачала=		ВариантГраницыИнтервала.РабочаяДата;
		НастройкаПериода.ВариантОкончания=	ВариантГраницыИнтервала.РабочаяДата;
		
		Возврат НастройкаПериода;
		
	КонецФункции
	
//} ДЕЙСТВИЯ НА ФОРМЕ

//{ СОЗДАНИЕ ДОКУМЕНТА
	
	Функция ПолучитьСписокОтличающихсяРевизитов(Document, ДатаНомерВходящегоДокумента) Экспорт 
		Результат = "";
		Если ЗначениеЗаполнено(ДатаНомерВходящегоДокумента.ДатаВходящегоДокумента) и (НачалоДня(ДатаНомерВходящегоДокумента.ДатаВходящегоДокумента)<>НачалоДня(Document.DocumentDate))  Тогда 
			Результат = Результат + """дата входящего документа"", ";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаНомерВходящегоДокумента.НомерВходящегоДокумента) и (ДатаНомерВходящегоДокумента.НомерВходящегоДокумента<>Document.DocumentNumber)  Тогда 
			Результат = Результат + """номер входящего документа"", ";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = лев(Результат, стрДлина(Результат)-2);
		КонецЕсли;	
		
		Возврат результат;
	КонецФункции
	
	Функция СопоставитьСВыбраннойСчетФактурой(СчетФактураСсылка, ЭДОбъект) Экспорт 
		
		ДатаНомерВходящегоДокумента = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьДатуНомерВходящегоСчетаФактуры(СчетФактураСсылка);
		СписокОтличающихсяРеквизитов =  ПолучитьСписокОтличающихсяРевизитов(ЭДОбъект, ДатаНомерВходящегоДокумента);
		
		Если ЗначениеЗаполнено(СписокОтличающихсяРеквизитов) Тогда
			ОбновлятьДанныеСФОтвет = Вопрос("Следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
			|отличаются в электронном документе и  документе 1С.
			|Обновить данные в документе 1С?", 
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена, НаименованиеСистемы);
		Иначе 
			ОбновлятьДанныеСФОтвет = КодВозвратаДиалога.Нет
		КонецЕсли;
		
		Если ОбновлятьДанныеСФОтвет = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если ОбновлятьДанныеСФОтвет = КодВозвратаДиалога.Да Тогда
			ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").УстановитьДатуНомерВходящегоСчетаФактуры(СчетФактураСсылка,  ЭДОбъект.DocumentDate, ЭДОбъект.DocumentNumber, СписокОтличающихсяРеквизитов);
		КонецЕсли;
		
		Объект = СчетФактураСсылка.ПолучитьОбъект();
		Если Объект.Метаданные().Реквизиты.Найти("КодСпособаПолучения")<>Неопределено Тогда 
			Если Объект.КодСпособаПолучения <> 2 Тогда
				Объект.КодСпособаПолучения = 2;
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить("Не удалось изменить реквизиты: способ получения
					|у документа: " + СчетФактураСсылка);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СчетФактураСсылка, ЭДОбъект.DocumentId, ЭДОбъект.OrganizationID, ЭДОбъект.Type);
		
		Возврат Истина;
		
	КонецФункции
	
	Функция  СопоставитьСВыбраннойНакладной(докСсылка, Document)  Экспорт 
		ДатаНомерВходящегоДокумента = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьДатуНомерВходящейНакладной(докСсылка);
		СписокОтличающихсяРеквизитов =  ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПолучитьСписокОтличающихсяРевизитов(Document, ДатаНомерВходящегоДокумента);
		Если ЗначениеЗаполнено(СписокОтличающихсяРеквизитов) Тогда
			ОбновлятьДанныеПТУОтвет = Вопрос("Следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
			|отличаются в электронном документе и  документе 1С.
			|Обновить данные в документе 1С?", 
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена, НаименованиеСистемы);
		Иначе 
			ОбновлятьДанныеПТУОтвет = КодВозвратаДиалога.Нет
		КонецЕсли;
		
		Если ОбновлятьДанныеПТУОтвет = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(докСсылка, Document.DocumentId, Document.OrganizationId);
		Если ОбновлятьДанныеПТУОтвет = КодВозвратаДиалога.Да Тогда
			ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").УстановитьДатуНомерВходящейНакладной(докСсылка,  Document.DocumentDate, Document.DocumentNumber, СписокОтличающихсяРеквизитов);
		КонецЕсли;	
		
		Возврат Истина;
	КонецФункции
	
	Функция ОбработатьДействиеСозданиеДокумента(ЭДОбъект, DocumentContent, СсылкаНаОбъект, СпособСоздания, ДокументОснованиеДляСозданияСФ) Экспорт
		
		DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(ЭДОбъект, DocumentContent);
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			
			ФормаДокумента1С = СсылкаНаОбъект.ПолучитьФорму();
			ФормаДокумента1С.Открыть();
			Возврат ФормаДокумента1С;
			
		ИначеЕсли ЛЕВ(DocumentType, 7) = "Invoice" ИЛИ DocumentType = "UniversalTransferDocument" И ТипДокументаУПД(DocumentContent.Function) = ТипДокументаУПД("СЧФ") Тогда
			
			Если DocumentType = "Invoice" ИЛИ DocumentType = "UniversalTransferDocument" Тогда
				
				Если  СпособСоздания = "Сопоставить" Тогда
					СопоставитьСВыбраннойСчетФактурой(ДокументОснованиеДляСозданияСФ,ЭДОбъект);
				ИначеЕсли СпособСоздания = "СоздатьНаОсновании"   Тогда
					СоздатьНовыйСчетФактуру(ДокументОснованиеДляСозданияСФ, ЭДОбъект);
				Иначе			  
					СоздатьИлиСопоставитьСчетФактуруНаОсновании(ЭДОбъект);
				КонецЕсли;
				
			ИначеЕсли ЭДОбъект.Direction = "Inbound" Тогда
				
				// ИСФ/КСФ, происходит вызов мастера
				ФормаСозданияИсправления= ПолучитьФорму("ФормаСозданиеИсправленияВ1С");
				ФормаСозданияИсправления.ЭДОбъект= ЭДОбъект;
				ФормаСозданияИсправления.DocumentContent= DocumentContent;
				ФормаСозданияИсправления.Открыть();
				
			Иначе
				ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(ЭДОбъект, "СопоставитьСчетФактуру");
			КонецЕсли;
			
		ИначеЕсли DocumentType = "UniversalTransferDocument" И ТипДокументаУПД(DocumentContent.Function) = ТипДокументаУПД("СЧФДОП") Тогда
			
			ФормаСозданияИсправления= ПолучитьФорму("ФормаСозданияДокументовУПД");
			ФормаСозданияИсправления.Document= ЭДОбъект;
			ФормаСозданияИсправления.Открыть();
			
		ИначеЕсли DocumentType = "NonformalizedTorg12" ИЛИ DocumentType = "NonformalizedAcceptanceCertificate" Тогда
			
			Если ЭДОбъект.Direction = "Outbound" Тогда 
				ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(ЭДОбъект, "СопоставитьНакладную");
			Иначе 
				ОтразитьВ1СInboundNotXMLDocument(ЭДОбъект)
			КонецЕсли;
			
		Иначе 
			ОтразитьВ1СXMLDocument(ЭДОбъект, DocumentContent);
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьРежимСозданияСФПоУмолчанию()
		Если ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСоздаватьСопоставлятьСчетаФактуры") = "Создавать"
			ИЛИ ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСоздаватьСопоставлятьСчетаФактуры") = Неопределено Тогда
			Возврат "СоздатьСФНаОсновании";
		Иначе
			Возврат "СопоставитьСчетФактуру";
		КонецЕсли;
		
	КонецФункции	
	
	Процедура СоздатьИлиСопоставитьСчетФактуруНаОсновании(ЭДОбъект)
		
		СоздатьИлиСопоставитьСчФ  =  ПолучитьРежимСозданияСФПоУмолчанию();
		
		ДокументСсылка= ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(ЭДОбъект, СоздатьИлиСопоставитьСчФ);
		
		Если ДокументСсылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СоздатьИлиСопоставитьСчФ = "СоздатьСФНаОсновании" Тогда
			СоздатьНовыйСчетФактуру(ДокументСсылка, ЭДОбъект);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура СоздатьНовыйСчетФактуру(ДокументОснование, ЭДОбъект)
		
		Если ЭДОбъект.Direction = "Inbound" Тогда
			ДокументОбъект= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").СоздатьДокумент_СчетФактураПолученный(ЭДОбъект, ДокументОснование);
		Иначе
			ДокументОбъект= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").СоздатьДокумент_СчетФактураВыданный(ЭДОбъект, ДокументОснование);
		КонецЕсли;
		
		ДокументОбъект.ПолучитьФорму().ОткрытьМодально();
		
		Если НЕ ДокументОбъект.Модифицированность() Тогда
			
			СсылкаНаОбъект= ДокументОбъект.Ссылка;
			ДокументОбъект= Неопределено;
			
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СсылкаНаОбъект, ЭДОбъект.DocumentId, ЭДОбъект.OrganizationID, "Invoice", ЭДОбъект);
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} СОЗДАНИЕ ДОКУМЕНТА

//{ УПРАВЛЕНИЕ ОТБОРОМ
	
	Процедура УстановитьОтборТабличнойЧасти(ЭлементФормыТаблица, НовыйОсновнойОтбор, КэшТаблицыДокументов = Неопределено, НовыйДопОтбор =  Неопределено) Экспорт
		
		Если НовыйДопОтбор <> Неопределено Тогда
			УстановитьДополнительныйОтбор(ЭлементФормыТаблица, КэшТаблицыДокументов, НовыйДопОтбор);
		КонецЕсли;
		
		УстановитьОсновнойОтбор(ЭлементФормыТаблица, НовыйОсновнойОтбор);
		
	КонецПроцедуры
	
	Процедура УстановитьДополнительныйОтбор(ЭлементФормыТаблица, КэшТаблицыДокументов, НовыйДопОтбор)
		
		СтрокиДопОтбора=	НовыйДопОтбор.Строки;
		
		ИспользованиеДопОтора=	Новый Структура("Использование", Истина);
		ВключенДополнительныйОтбор=	СтрокиДопОтбора.НайтиСтроки(ИспользованиеДопОтора, Истина).Количество() > 0;
		Если ВключенДополнительныйОтбор = Истина Тогда
			
			МассивСтрокДляВыгрузки=	Новый Массив();
			
			Для каждого СтрокаКэша Из КэшТаблицыДокументов Цикл
				
				ОтборСтрокПоТипу=	Новый Структура("Имя", СтрокаКэша.Документ.Метаданные().Имя);
				РодительскиеСтрокиДопОтбора=	СтрокиДопОтбора.НайтиСтроки(ОтборСтрокПоТипу, Ложь);
				Если РодительскиеСтрокиДопОтбора.Количество() > 0 Тогда
					
					УсловияВыполнены=	Ложь;
					
					РодительскаяСтрокаОтбора=	РодительскиеСтрокиДопОтбора[0];
					
					ОтборИспользуемыхСтрок=		Новый Структура("Использование", Истина);
					ИспользуемыеСтрокиОтбора=	РодительскаяСтрокаОтбора.Строки.НайтиСтроки(ОтборИспользуемыхСтрок, Ложь);
					Для каждого СтрокаДопОтбора Из ИспользуемыеСтрокиОтбора Цикл
						Если СтрокаДопОтбора.Использование = Истина Тогда
							Если СтрокаДопОтбора.ВидСравнения = ВидСравнения.Равно 
								И СтрокаДопОтбора.Значение = СтрокаКэша.Документ[СтрокаДопОтбора.Имя] Тогда
								УсловияВыполнены=	Истина;
							ИначеЕсли СтрокаДопОтбора.ВидСравнения = ВидСравнения.НеРавно 
								И СтрокаДопОтбора.Значение <> СтрокаКэша.Документ[СтрокаДопОтбора.Имя] Тогда
								УсловияВыполнены=	Истина;
							Иначе
								УсловияВыполнены=	Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если УсловияВыполнены = Истина Тогда
						МассивСтрокДляВыгрузки.Добавить(СтрокаКэша);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭлементФормыТаблица.Значение.Очистить();
			Для каждого СтрокаВыгрузки Из МассивСтрокДляВыгрузки Цикл
				СтрокаСписка=	ЭлементФормыТаблица.Значение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаВыгрузки);
			КонецЦикла;
			
		Иначе
			ЭлементФормыТаблица.Значение.Загрузить(КэшТаблицыДокументов);
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура УстановитьОсновнойОтбор(ЭлементФормыТаблица, НовыйОсновнойОтбор)
		
		ОтборСтрок=	ЭлементФормыТаблица.ОтборСтрок;
		
		Для каждого СтрокаОтбора Из НовыйОсновнойОтбор Цикл
			
			НайденнаяСтрокаОтбора=	ОтборСтрок.Найти(СтрокаОтбора.Имя);
			
			НайденнаяСтрокаОтбора.Использование=	СтрокаОтбора.Использование;
			НайденнаяСтрокаОтбора.ВидСравнения=		СтрокаОтбора.ВидСравнения;
			НайденнаяСтрокаОтбора.Значение=			СтрокаОтбора.Значение;
			НайденнаяСтрокаОтбора.Использование=	СтрокаОтбора.Использование;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура СброситьОтборТабличнойЧасти(ЭлементФормыТаблица, КэшТаблицыДокументов = Неопределено) Экспорт
		
		Если КэшТаблицыДокументов <> Неопределено Тогда
			СброситьДополнительныйОтбор(ЭлементФормыТаблица, КэшТаблицыДокументов);
		КонецЕсли;
		
		СброситьОсновнойОтбор(ЭлементФормыТаблица);
		
	КонецПроцедуры
	
	Процедура СброситьОсновнойОтбор(ЭлементФормыТаблица)
		
		ЭлементФормыТаблица.ОтборСтрок.Сбросить();
		
	КонецПроцедуры
	
	Процедура СброситьДополнительныйОтбор(ЭлементФормыТаблица, КэшТаблицыДокументов)
		
		ЭлементФормыТаблица.Значение.Загрузить(КэшТаблицыДокументов);
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ОТБОРОМ