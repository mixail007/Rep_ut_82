
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыАнализЦенВЗаказахПоставщикуИСезонныхЗаказахПоставщикуОтчет_48fde0fb-50d6-4a30-9cd6-3c8f814f97d5", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаКон", КонецДня(ДатаКон));
	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаНач", ДатаНач);
	ПостроительОтчетаОтчет.Параметры.Вставить("Контрагент", Контрагент);

	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Макет = ВнешнийОтчетОбъект.ПолучитьМакет("Отчет");
	ПостроительОтчетаОтчет.ОформитьМакет();
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	А.ЗаказПоставщику КАК ЗаказПоставщику,
	|	А.Номенклатура.Код,
	|	А.Номенклатура,
	|	А.Цена КАК ЦенаЗП,
	|	ЕСТЬNULL(ЗаказПоставщикуСезонныйТовары.Цена, 0) КАК ЦенаЗПС,
	|	А.Цена - ЕСТЬNULL(ЗаказПоставщикуСезонныйТовары.Цена, 0) КАК РазницаВЦенах,
	|	ЗаказПоставщикуСезонныйТовары.Ссылка КАК ЗаказПоставщикуСезонный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикамСезонныеОбороты.Номенклатура КАК Номенклатура,
	|		ЗаказПоставщикуТовары.Цена КАК Цена,
	|		ЗаказыПоставщикамСезонныеОбороты.ЗаказПоставщикуСезонный КАК ЗаказПоставщикуСезонный,
	|		ЗаказыПоставщикамСезонныеОбороты.Регистратор КАК ЗаказПоставщику
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамСезонные.Обороты(&ДатаНач, &ДатаКон, Регистратор, ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПоставщикамСезонныеОбороты
	|			ПО ЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикамСезонныеОбороты.Регистратор
	|				И ЗаказПоставщикуТовары.Номенклатура = ЗаказыПоставщикамСезонныеОбороты.Номенклатура
	|	ГДЕ
	|		ЗаказыПоставщикамСезонныеОбороты.Регистратор.Контрагент = &Контрагент
	|		И ЗаказыПоставщикамСезонныеОбороты.КоличествоРасход > 0
	|		И ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка.Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК А
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
	|		ПО А.Номенклатура = ЗаказПоставщикуСезонныйТовары.Номенклатура
	|			И А.ЗаказПоставщикуСезонный = ЗаказПоставщикуСезонныйТовары.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ЗаказПоставщикуСезонныйТовары.Ссылка.Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	А.ЗаказПоставщику.Дата
	|ИТОГИ
	|	СУММА(РазницаВЦенах)
	|ПО
	|	ЗаказПоставщику
	|АВТОУПОРЯДОЧИВАНИЕ";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыАнализЦенВЗаказахПоставщикуИСезонныхЗаказахПоставщикуОтчет_48fde0fb-50d6-4a30-9cd6-3c8f814f97d5");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры




