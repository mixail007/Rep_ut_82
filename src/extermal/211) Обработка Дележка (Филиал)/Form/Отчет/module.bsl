


Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	
	ТекущаяДата = ТекущаяДата();
	//ЭлементыФормы.ДействияФормы.Кнопки.КОтгрузке.Доступность = РольДоступна("ПолныеПрава");
	//ИЛИ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОтображатьТолькоСобственныеЗаказы");
	
	//+++ ограничение подразделения! +++
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")  Тогда
		ОтборЗаказПокупателя1 = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ЭлементыФормы.ОтборЗаказПокупателя1.Доступность = ложь;
	КонецЕсли;
	
	Флажок1 = истина;
	Флажок1ПриИзменении(неопределено);//+++ блокировка поля выбора
	
	
	Просрочка = ЛОЖЬ;
	ФлажокПроизводство = Истина;
	
КонецПроцедуры

//Кнопка убрана совсем!
//Процедура ДействияФормыКОтгрузке(Кнопка)
//			// Вставить содержимое обработчика.
//	
//	Сообщить("Начало дележки:"+СТрока(ТекущаяДата()));
//	
//	//Сообщить("Всего документов к дележке: "+Строка(ЗаказыПокупателей.Количество()));
//	
//	НомПП=0;
//	
//	Для каждого СтрокаДокумента Из  ТаблицаЗаказыПокупателей Цикл
//		Если СтрокаДокумента.Делить Тогда
//			
//			НомПП=НомПП+1;
//			ДокументСсылка= СтрокаДокумента.ЗаказПокупателя;
//			Сообщить(Строка(НомПП)+ ". "+ Строка(ДокументСсылка)+" обрабатывается, начало обработки: "+ТекущаяДата());
//			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
//						
//			
//			ДокументОбъект.Проверен = Истина;
//			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Сообщить("Конец дележки:"+СТрока(ТекущаяДата()));

//КонецПроцедуры

Функция ПолучитьСуммуПредоплаты(Ссылка)
	
	Возврат 0;
	
КонецФункции

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//// Вставить содержимое обработчика.
	//Пароль = ПолучитьФорму("Пароль");
	//Резалт = Пароль.ОткрытьМодально();
	//Если (Резалт<>1) Тогда
	//	Отказ = Истина;
	//КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	
	Если Флажок1 и не ЗначениеЗаполнено(ОтборЗаказПокупателя1) тогда
		сигнал();
		Предупреждение("Выберите Подразделение!",60);
		возврат;
	КонецЕсли;

//	Отчет(ТабДок);
//+++   18.05.2012
	началоВр = ТекущаяДата();
	
	Отчет(ТабДок);

	КонецВр = ТекущаяДата();
	ВремяВыполнения = Число(КонецВр - началоВр);
	
 //	парамЗапроса = ОтборЗаказПокупателя1.Наименование;
 
 	парамЗапроса = строка(ОтборЗаказПокупателя1)+","+?(Флажок2,"По складу: "+строка(ОтборЗаказПокупателя2)+",","") 
	+?(ЗначениеЗаполнено(ОтборЗаказПокупателя), строка(ОтборЗаказПокупателя), "") // по заказу
	+?(ПоказыватьТолькоНепроделенные,"Непроделенные,","")+?(ФлажокПоМинусам,"По минусам,","")
	+?(ФлажокПроизводство,"в пути и в производстве ","")+?(ДатаДискиВПути='00010101',"","по "+строка(ДатаДискиВПути)+",");
	
	Если ВремяВыполнения>0 тогда
		//общий модуль:  яштПрочее.ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки(
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 211, ВремяВыполнения, "Кнопка [Сформировать] - "+парамЗапроса+" ("+строка(ВремяВыполнения)+" Сек.)" ); //!!!!
	КонецЕсли;	
	//+++)   18.05.2012

	ТабДок.ОтображатьЗаголовки = Ложь;


КонецПроцедуры

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Процедура Отчет(ТабДок) Экспорт

	СписокЗаказовПокупателей=Новый СписокЗначений;
	
	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
 
 Запрос.Текст="ВЫБРАТЬ
              |	А.Номенклатура.Код КАК Код,
              |	А.Номенклатура КАК Номенклатура,
              |	А.ОтветственноеЛицо КАК ОтветственноеЛицо,
              |	А.Контрагент,
              |	А.ЗаказПокупателя,
              |	А.КоличествоЗаказано КАК КоличествоЗаказано,
              |	А.КоличествоПроделено КАК КоличествоПроделено,
              |	А.КоличествоОстатокНаСкладах КАК КоличествоОстатокНаСкладах,
              |	А.СуммаЗаказа,
              |	А.СуммаОплаты,
              |	А.КоличествоОстатокНаСкладах - А.КоличествоПроделено - А.КоличествоЗаказано КАК СвободныйОстаток,
              |	А.КоличествоЗаказаноУПоставщика,
			  |	А.КоличествоЗаказаноУПоставщикаП
			  |
			  |ИЗ
              |	(ВЫБРАТЬ
              |		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
              |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
              |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
              |		ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
              |		ЗаказыПокупателейОстатки.ЗаказПокупателя.СуммаДокумента КАК СуммаЗаказа,
              |		ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход, 0) КАК СуммаОплаты,
              |		ВЫБОР
              |			КОГДА (НЕ ЗаказыПокупателейОстатки.ЗаказПокупателя.Проверен)
              |				ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
              |			ИНАЧЕ 0
              |		КОНЕЦ КАК КоличествоЗаказано,
              |		ВЫБОР
              |			КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Проверен
              |				ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
              |			ИНАЧЕ 0
              |		КОНЕЦ КАК КоличествоПроделено,
              |		ВЫБОР
              |			КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.Транзит
              |				ТОГДА ЗаказыПокупателейОстатки.КоличествоОстаток
              |			ИНАЧЕ 0
              |		КОНЕЦ КАК КоличествоТранзит,
			  //--------------------------------------------------------
              |		0 КАК КоличествоЗаказаноУПоставщика,
			  |		0 КАК КоличествоЗаказаноУПоставщикаП,
			  
              |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокНаСкладах
              |	ИЗ
              |		РегистрНакопления.ЗаказыПокупателей.Остатки(
              |				, //ОтборНоменклатура
			//+++ 26.07.2013 - отбор по номенклатуре и в заказах!
			//|				 //ОтборЗаказПокупателя
              |				ЗаказПокупателя.Транзит 
              |					И (НЕ Номенклатура В ИЕРАРХИИ (&Крышки))
              |					И (ЗаказПокупателя.Подразделение = &Подразделение 
			  //+++ 12.02.2013      
			  |						или ЗаказПокупателя.Склад.Подразделение = &Подразделение)
			  |					//И ЗаказПокупателя.Склад = &Склад
			  |) КАК ЗаказыПокупателейОстатки
			  
 //-----------------------------------------------------------------------------------------------------------------------------
              |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
              |				ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Сделка,
              |				ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетовРасход
              |			ИЗ
              |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&НачалоПериодаКонтроляОплат, , , ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)) КАК ВзаиморасчетыСКонтрагентамиОбороты) КАК ВзаиморасчетыСКонтрагентамиОбороты
              |			ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВзаиморасчетыСКонтрагентамиОбороты.Сделка
			  
//-----------------------------------------------------------------------------------------------------------------------------
 			  |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
              |				А.Номенклатура КАК Номенклатура,
              |				СУММА(А.КоличествоОстаток) КАК КоличествоОстаток
              |			ИЗ
              |				(ВЫБРАТЬ
              |					ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
              |					ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
              |				ИЗ
              |					РегистрНакопления.ТоварыНаСкладах.Остатки(, //ОтборНоменклатура
              |							( Номенклатура В ИЕРАРХИИ (&Диски) ИЛИ Номенклатура В ИЕРАРХИИ (&Шины) ИЛИ Номенклатура В ИЕРАРХИИ (&АКБ) ИЛИ Номенклатура В ИЕРАРХИИ (&Аксы))
			  |								//И Склад = &Склад
//+++ 14.03.2013 - без учета складов, у которых стоит флаг ЗапретитьИспользование
			  |								И НЕ Склад.ЗапретитьИспользование
              |								И Склад.Подразделение = &Подразделение
			  |				) КАК ТоварыНаСкладахОстатки
			  |							) КАК А
              |			СГРУППИРОВАТЬ ПО
              |				А.Номенклатура) КАК ТоварыНаСкладахОстатки
              |			ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
			  |
			  |//ВставкаПроизводство
			  |
			  |) КАК А
              |
              |УПОРЯДОЧИТЬ ПО
              |	А.Номенклатура.ВидТовара,
              |	А.Номенклатура.Наименование
              |ИТОГИ
              |	СУММА(КоличествоЗаказано),
              |	СУММА(КоличествоПроделено),
              |	СРЕДНЕЕ(КоличествоОстатокНаСкладах),
              |	СРЕДНЕЕ(А.КоличествоОстатокНаСкладах) - СУММА(А.КоличествоЗаказано) - СУММА(А.КоличествоПроделено) КАК СвободныйОстаток,
              |	МАКСИМУМ(КоличествоЗаказаноУПоставщика),
              |	МАКСИМУМ(КоличествоЗаказаноУПоставщикаП)
              |ПО
              |	Номенклатура,
              |	ОтветственноеЛицо";

 //+++ 13.03.2012
// Если Флажок1 и ЗначениеЗаполнено(ОтборЗаказПокупателя1) тогда                                                        //если не в данном складе, то надо выключить и запретные и транзитные склады!
//	 Запрос.Текст = стрЗаменить(Запрос.Текст, "//+++ складыЗП", " И ( ЗаказПокупателя.Склад =&Склады )" ); 
//	 Запрос.Текст = стрЗаменить(Запрос.Текст, "//+++ склады", " И ( Склад =&Склады )" );
	 Запрос.УстановитьПараметр("Подразделение",ОтборЗаказПокупателя1);
	 
	 
	  
 
Если ФлажокПроизводство тогда //+++ 27.11.2013
	 Запрос.Текст = стрЗаменить(Запрос.Текст, "0 КАК КоличествоЗаказаноУПоставщикаП", 
	 "Выбор Когда (закПост.Заказано - закПост.УжеЕдет)<=0 Тогда 0
	 |		Иначе (закПост.Заказано - закПост.УжеЕдет)
	 |		Конец КАК КоличествоЗаказаноУПоставщикаП");
	 
	 Запрос.Текст = стрЗаменить(Запрос.Текст, "0 КАК КоличествоЗаказаноУПоставщика", 
	 	"закПост.УжеЕдет КАК КоличествоЗаказаноУПоставщика");
	 
	 текстПроизводства = "
	 |ЛЕВОЕ СОЕДИНЕНИЕ(
	 |"+"ВЫБРАТЬ Номенклатура, КоличествоПриход как Заказано, КоличествоРасход как УжеЕдет
	 |Из РегистрНакопления.ЗаказыПоставщикамСезонные.Обороты(,,,//ОтборНоменклатура
	 |				ЗаказПоставщикуСезонный.Транзит
	 |				И ЗаказПоставщикуСезонный.Подразделение = &Подразделение
	 |				И ЗаказПоставщикуСезонный.ДатаДействияПо >=&ТекДата) КАК ЗакПостОстатки
	 
	 |"+") КАК закПост
	 |ПО ЗаказыПокупателейОстатки.Номенклатура = закПост.Номенклатура
	 |";
	 	 
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//ВставкаПроизводство", текстПроизводства);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() ); 
	
    //Запрос.УстановитьПараметр("СвойствоДатаПоступленияВПорт", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90160")); 

КонецЕсли;

	 
// +++ 19.02.2013
	Если Флажок2 тогда 
		 Запрос.Текст = стрЗаменить(Запрос.Текст, "//И Склад = &Склад","И Склад = &Склад");
		 Запрос.Текст = стрЗаменить(Запрос.Текст, "//И ЗаказПокупателя.Склад = &Склад","И ЗаказПокупателя.Склад = &Склад");
		 Запрос.УстановитьПараметр("Склад", ОтборЗаказПокупателя2); 
	 КонецЕсли;
	 

// иначе //как было
//  Запрос.Текст = стрЗаменить(Запрос.Текст, "//+++ склады", " и (НЕ Склад.ЗапретитьИспользование)  И (НЕ Склад.Транзитный)" );
//КонецЕсли;	


Если ЗначениеЗаполнено(ОтборЗаказПокупателя) Тогда
	ЗапросЗаказПокупателя=Новый Запрос;
	ЗапросЗаказПокупателя.Текст="ВЫБРАТЬ Различные Номенклатура ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя=&ЗаказПокупателя)";
	ЗапросЗаказПокупателя.УстановитьПараметр("ЗаказПокупателя",ОтборЗаказПокупателя);
	мНоменклатура=ЗапросЗаказПокупателя.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	//Если ТипЗнч(мНоменклатура)=Тип("Массив") И мНоменклатура.Количество()>0 Тогда
		ОтборНоменклатура=Новый СписокЗначений;
		ОтборНоменклатура.ЗагрузитьЗначения(мНоменклатура);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОтборНоменклатура"," Номенклатура В (&ОтборНоменклатура) И");    
	//+++ 14/09/2012 !!!	Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОтборЗаказПокупателя","ЗаказПокупателя = &ЗаказПокупателя И");
		Запрос.УстановитьПараметр("ОтборНоменклатура",ОтборНоменклатура);
		Запрос.УстановитьПараметр("ЗаказПокупателя",ОтборЗаказПокупателя);
	Если ТипЗнч(мНоменклатура)=Тип("Массив") И мНоменклатура.Количество()=0 Тогда //+++
		сообщить("Не найдено ни одной номенклатуры по условиям отбора!");
	КонецЕсли;
//+++( 13.03.2012  поиск по Складу
иначеЕсли ЗначениеЗаполнено(ОтборЗаказПокупателя1) и Флажок1 Тогда
 	ЗапросЗаказПокупателя=Новый Запрос;
	ЗапросЗаказПокупателя.Текст="ВЫБРАТЬ Различные Номенклатура ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя.Склад.Подразделение = &Подразделение )";  
	ЗапросЗаказПокупателя.УстановитьПараметр("Подразделение",ОтборЗаказПокупателя1);
	Состояние("Производится поиск номенклатуры по условиям...");
	мНоменклатура=ЗапросЗаказПокупателя.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	ЗапросЗаказПокупателя=Новый Запрос;
	ЗапросЗаказПокупателя.Текст="ВЫБРАТЬ Различные ЗаказПокупателя ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя.Склад.Подразделение = &Подразделение )"; 
	ЗапросЗаказПокупателя.УстановитьПараметр("Подразделение",ОтборЗаказПокупателя1);
	Состояние("Производится поиск заказов по условиям...");
	ЗаказыПок =ЗапросЗаказПокупателя.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");

	Если ТипЗнч(мНоменклатура)=Тип("Массив") И мНоменклатура.Количество()=0 Тогда
		сообщить("Не найдено ни одной номенклатуры по условиям!");
	КонецЕсли;

		ОтборНоменклатура=Новый СписокЗначений;
		ОтборНоменклатура.ЗагрузитьЗначения(мНоменклатура);
		
		ОтборЗаказов=Новый СписокЗначений;
		ОтборЗаказов.ЗагрузитьЗначения(ЗаказыПок);
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОТБОРНОМЕНКЛАТУРА","ГДЕ (Номенклатура В (&ОтборНоменклатура) )
		|И (ЗаказПокупателя в (&ОтборЗаказов))");  // здесь лучше!   
		Запрос.УстановитьПараметр("ОтборНоменклатура",ОтборНоменклатура);
		Запрос.УстановитьПараметр("ОтборЗаказов",ОтборЗаказов);
		
		Состояние("Производится формирование отчета...");
Иначе // нет отборов - тогда выключим заказы по транзитным и запретным складам!!!
//	Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ОТБОРНОМЕНКЛАТУРА","ГДЕ (НЕ ЗаказПокупателя.Склад.ЗапретитьИспользование)  И (НЕ ЗаказПокупателя.Склад.Транзитный)" );
//+++)	
КонецЕсли;	

    АКБ   =Справочники.Номенклатура.НайтиПоКоду("0080021");
	Диски =Справочники.Номенклатура.НайтиПоКоду("0001752");
	Шины  =Справочники.Номенклатура.НайтиПоКоду("0001746");
	Крышки=Справочники.Номенклатура.НайтиПоКоду("0080004");
	Аксы=Справочники.Номенклатура.НайтиПоКоду("0000001");
	
	Запрос.УстановитьПараметр("НачалоПериодаКонтроляОплат", ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-6));
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );

	Запрос.УстановитьПараметр("Шины", Шины);
	Запрос.УстановитьПараметр("АКБ", АКБ);
    Запрос.УстановитьПараметр("Диски",Диски);
	Запрос.УстановитьПараметр("Крышки",Крышки);
	Запрос.УстановитьПараметр("Аксы",Аксы);
	//Запрос.УстановитьПараметр("БелШина", Справочники.Контрагенты.НайтиПоКоду("91529"));
	//Запрос.УстановитьПараметр("Дальнобой", Справочники.Контрагенты.НайтиПоКоду("92319"));
	//Запрос.УстановитьПараметр("АвтоШина", Справочники.Контрагенты.НайтиПоКоду("91640"));                                                                        
	//Запрос.УстановитьПараметр("ВолгаТрейд", Справочники.Контрагенты.НайтиПоКоду("92098"));                                                                        
	//Запрос.УстановитьПараметр("ТДКама", Справочники.Контрагенты.НайтиПоКоду("00334")); 
	
  	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьНоменклатура = Макет.ПолучитьОбласть("Номенклатура");
	ОбластьОтветственноеЛицо = Макет.ПолучитьОбласть("ОтветственноеЛицо");
	//ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	
	ОбластьЗаголовок.Параметры.ТекущаяДата=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    КолМакс = ВыборкаНоменклатура.Количество(); к=0; проц=макс( Цел(КолМакс/20), 1); //+++ каждые 5%
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		к=к+1;  //+++ процент вывода
		Если к%проц=0 тогда
			состояние(Формат(к*100/КолМакс,"ЧДЦ=0")+"% выполняется вывод данных отчета...");
		КонецЕсли;
	
		Если ПоказыватьТолькоНепроделенные И ВыборкаНоменклатура.КоличествоЗаказано=0 Тогда Продолжить; КОнецЕсли;
		
		Если ФлажокПоМинусам И ВыборкаНоменклатура.КоличествоПроделено-ВыборкаНоменклатура.КоличествоОстатокНаСкладах<=0 Тогда Продолжить; КОнецЕсли;
	
		ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
		ТабДок.Вывести(ОбластьНоменклатура,1);

		ВыборкаОтветственноеЛицо = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаОтветственноеЛицо.Следующий() Цикл
			ОбластьОтветственноеЛицо.Параметры.Заполнить(ВыборкаОтветственноеЛицо);
			ТабДок.Вывести(ОбластьОтветственноеЛицо,2);

			//ВыборкаКонтрагент = ВыборкаОтветственноеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			//Пока ВыборкаКонтрагент.Следующий() Цикл
			//	ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
			//	ТабДок.Вывести(ОбластьКонтрагент,3);

				ВыборкаДетали = ВыборкаОтветственноеЛицо.Выбрать();

				Пока ВыборкаДетали.Следующий() Цикл
					
				Если Просрочка тогда//+++
				  Если не ВыборкаДетали.ЗаказПокупателя.Проверен Тогда
					Если СписокЗаказовПокупателей.НайтиПоЗначению(ВыборкаДетали.ЗаказПокупателя) = Неопределено Тогда
						СписокЗаказовПокупателей.Добавить(ВыборкаДетали.ЗаказПокупателя);
					КонецЕсли;	
				 КонецЕсли;	
               КонецЕсли;	


				 Если ВыборкаДетали.СуммаОплаты>= ВыборкаДетали.СуммаЗаказа Тогда
					 ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("ДеталиОплачено");	 
				 Иначе	 
					 ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
				 КОнецЕсли;

					ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
					ОбластьДетальныхЗаписей.Параметры.ЗаказПокупателяСтрока= Строка(ВыборкаДетали.ЗаказПокупателя.Номер)+" от "+Формат(ВыборкаДетали.ЗаказПокупателя.Дата,"ДФ=dd.MM.yy")+" СУММА="+Формат(ВыборкаДетали.СуммаЗаказа,"ЧДЦ=2; ЧН=-")
					+ ?(ВыборкаДетали.СуммаОплаты>0,". ОПЛАЧЕНО="+Формат(ВыборкаДетали.СуммаОплаты,"ЧДЦ=2; ЧН=-"),"");
					 
					//ОбластьДетальныхЗаписей.ПолучитьОбласть().ЦветФонаГруппировки=WebЦвета.Золотистый;
					ТабДок.Вывести(ОбластьДетальныхЗаписей,3);
				КонецЦикла;
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	состояние("Окончание вывода...");
	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	ТабДок.ПоказатьУровеньГруппировокСтрок(0);
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	
	
	//ЗаказыПокупателей.Очистить();
	//ЗаказыПокупателей.ЗагрузитьЗначения(СписокЗаказовПокупателей.ВыгрузитьЗначения());
Если Просрочка тогда//+++	
	ТаблицаЗаказыПокупателей.Очистить();
	ТаблицаЗаказыПокупателей.Колонки.Очистить();
	
	ТаблицаЗаказыПокупателей.Колонки.Добавить("Контрагент");
	ТаблицаЗаказыПокупателей.Колонки.Добавить("ЗаказПокупателя",, "Заказ покупателя");
	ТаблицаЗаказыПокупателей.Колонки.Добавить("ПросроченнаяЗадолженность",, "Просроченная задолженность");
	ТаблицаЗаказыПокупателей.Колонки.Вставить(0,"Делить",,,10);
	Для каждого строкаЗаказ ИЗ СписокЗаказовПокупателей Цикл
		ЗаказПокупателя=строкаЗаказ.Значение;
		строкаЗаказа=ТаблицаЗаказыПокупателей.Добавить();
		строкаЗаказа.Контрагент=ЗаказПокупателя.Контрагент;
		строкаЗаказа.ЗаказПокупателя=ЗаказПокупателя;
		строкаЗаказа.ПросроченнаяЗадолженность=ПолучитьПросроченнуюЗадолженностьПоДоговорамПродаж(ЗаказПокупателя.Контрагент,ЗаказПокупателя.Дата);
	КонецЦикла;	
	ТаблицаЗаказыПокупателей.ЗаполнитьЗначения(Истина,"Делить");
	ЭлементыФормы.ТаблицаЗаказыПокупателей.СоздатьКолонки();
	ЭлементыФормы.ТаблицаЗаказыПокупателей.ОбновитьСтроки();
	ЭлементыФормы.ТаблицаЗаказыПокупателей.Колонки.Делить.ДанныеФлажка = "Делить";
КонецЕсли; //Просрочка

	//ТаблицаЗаказыПокупателей=ТабЗаказы.Скопировать();
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
	состояние(" ");

КонецПроцедуры

Процедура ТаблицаЗаказыПокупателейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Делить.ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки.Делить.ОтображатьТекст = Ложь;

КонецПроцедуры

Процедура ЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ЛОЖЬ;
	ФормаВыбора=Документы.ЗаказПокупателя.ПолучитьФорму("ФормаСписка",ЭтаФорма);
	
	//ФормаВыбора.Отбор.Транзит.ВидСравнения = ВидСравнения.Равно;
	//ФормаВыбора.Отбор.Транзит.Значение = Истина;
	//ФормаВыбора.Отбор.Транзит.Использование = Истина;
	
	Если Флажок2 тогда
		ФормаВыбора.Отбор.Склад.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.Отбор.Склад.Значение = ОтборЗаказПокупателя2;
		ФормаВыбора.Отбор.Склад.Использование = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборЗаказПокупателя1) тогда
		ФормаВыбора.Отбор.Подразделение.ВидСравнения = ВидСравнения.равно;
		ФормаВыбора.Отбор.Подразделение.Значение = ОтборЗаказПокупателя1;
		ФормаВыбора.Отбор.Подразделение.Использование = Истина;
	КонецЕсли;
	ФормаВыбора.РежимВыбора = Истина;
	ОтборЗаказПокупателя =ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

функция ПолучитьСписокСкладовПодразделения(Подразделение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(НЕ Склады.ПометкаУдаления)
	|	И Склады.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	
	ТЗвыборки = новый ТаблицаЗначений;
	ТЗвыборки = Результат.Выгрузить(); // выгрузка в ТЗ
	
	списокЗнач = новый СписокЗначений;  // вызгрузка в массив и загрузка в СписокЗначений
	списокЗнач.ЗагрузитьЗначения( ТЗвыборки.ВыгрузитьКолонку("Ссылка") );
	
	возврат списокЗнач;
	
КонецФункции

Процедура Флажок1ПриИзменении(Элемент)
		//ЭлементыФормы.ОтборЗаказПокупателя.Доступность  = НЕ Флажок1;
		//ЭлементыФормы.ОтборЗаказПокупателя1.Доступность = Флажок1;
КонецПроцедуры

Процедура ОтборЗаказПокупателя2ПриИзменении(Элемент)
	Флажок2 = ЗначениеЗаполнено(ОтборЗаказПокупателя2);

	Если Флажок2 и НЕ ОтборЗаказПокупателя2.Транзитный тогда
		Предупреждение("Склад должен быть транзитным!",30);
		ОтборЗаказПокупателя2 = справочники.Склады.ПустаяСсылка();
	иначе	
		ОтборЗаказПокупателя1 = ОтборЗаказПокупателя2.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборЗаказПокупателя2НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	списокСкладов = справочники.Склады.ПолучитьФормуВыбора();
	Если ЗначениеЗаполнено(ОтборЗаказПокупателя1) тогда
		списокСкладов.СправочникСписок.Отбор.Подразделение.ВидСравнения = ВидСравнения.Равно;
		списокСкладов.СправочникСписок.Отбор.Подразделение.Значение = ОтборЗаказПокупателя1;
		списокСкладов.СправочникСписок.Отбор.Подразделение.Использование = истина;
	иначе
		списокСкладов.СправочникСписок.Отбор.Транзитный.ВидСравнения = ВидСравнения.Равно;
		списокСкладов.СправочникСписок.Отбор.Транзитный.Значение = истина;
		списокСкладов.СправочникСписок.Отбор.Транзитный.Использование = истина;
	КонецЕсли;
	ОтборЗаказПокупателя2 = списокСкладов.ОткрытьМодально();
	ОтборЗаказПокупателя2ПриИзменении(неопределено);
КонецПроцедуры



//-----------------------------
Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если Найти (Элемент.ТекущаяОбласть.Имя, "C9") > 0 Тогда   // Колонка "Товары в пути ТРАНЗИТ"
		СтандартнаяОбработка=Ложь;
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		       //    |	ЗначенияСвойствОбъектов.ДатаПоступленияВПорт КАК ДатаПоступления,
					 |ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA как ДатаПоступления,

		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Контрагент,
		             |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		             |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
		             |ИЗ
		             |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура = &Номенклатура 
					// |	И ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |	И ЗаказПоставщику.Транзит 
					 |	И ЗаказПоставщику.Подразделение=&ЯШТ
					 |	И (ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA <= &ДатаДискиВПути ИЛИ &ФлагНеУчитывать_ДатаДискиВПути)
					 |) КАК ЗаказыПоставщикамОстатки
			         |
		             |ОБЪЕДИНИТЬ ВСЕ
		             |
		             |ВЫБРАТЬ
		             |	ОстаткиТоваровВПроизводстве.Ссылка.ДатаДействияПо,
		             |	ОстаткиТоваровВПроизводстве.Ссылка,
		             |	ОстаткиТоваровВПроизводстве.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо,
		             |	ОстаткиТоваровВПроизводстве.Ссылка.Контрагент,
		             |	ОстаткиТоваровВПроизводстве.Номенклатура,
		             |	ВЫБОР КОГДА ОстаткиТоваровВПроизводстве.Количество - ОстаткиТоваровВПроизводстве.КоличествоУжеЕдет<=0 тогда 0
					 |	ИНАЧЕ  ОстаткиТоваровВПроизводстве.Количество - ОстаткиТоваровВПроизводстве.КоличествоУжеЕдет КОНЕЦ
					 |ИЗ
		             |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |		ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
		             |		ЗаказПоставщикуСезонныйТовары.Ссылка КАК Ссылка,
		             |		МАКСИМУМ(ЗаказПоставщикуСезонныйТовары.Количество) КАК Количество,
		             |		СУММА(ЕСТЬNULL(ЗаказПоставщикуТовары.Количество, 0)) КАК КоличествоУжеЕдет
		             |	ИЗ
		             |		Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
		             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |				ЕСТЬNULL(ЗакПостТовары.Ссылка.Основание, ЗНАЧЕНИЕ(Документ.ЗаказПоставщикуСезонный.ПустаяСсылка)) КАК Основание,
		             |				ЕСТЬNULL(ЗакПостТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		             |				СУММА(ЕСТЬNULL(ЗакПостТовары.Количество, 0)) КАК Количество
		             |			ИЗ
		             |				Документ.ЗаказПоставщику.Товары КАК ЗакПостТовары
		             |			ГДЕ
		             |				ЗакПостТовары.Номенклатура = &Номенклатура
		             //|				И ЗакПостТовары.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |				И (НЕ ЗакПостТовары.Ссылка.ПометкаУдаления)
		             |	И ЗакПостТовары.Ссылка.Транзит 
					 |	И ЗакПостТовары.Ссылка.Подразделение=&ЯШТ
					 |			
		             |			СГРУППИРОВАТЬ ПО
		             |				ЗакПостТовары.Номенклатура,
		             |				ЗакПостТовары.Ссылка.Основание) КАК ЗаказПоставщикуТовары
		             |			ПО ЗаказПоставщикуСезонныйТовары.Ссылка = ЗаказПоставщикуТовары.Основание
		             |				И ЗаказПоставщикуСезонныйТовары.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
		             |	ГДЕ
		             |	ЗаказПоставщикуСезонныйТовары.Номенклатура = &Номенклатура
		            // |	И ЗаказПоставщикуСезонныйТовары.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |	И ЗаказПоставщикуСезонныйТовары.ссылка.Транзит 
					 |	И  ЗаказПоставщикуСезонныйТовары.ссылка.Подразделение=&ЯШТ 
					 |		И (ЗаказПоставщикуСезонныйТовары.Ссылка.ДатаДействияПо <= &ДатаДискиВПути
		             |				ИЛИ &ФлагНеУчитывать_ДатаДискиВПути)
		             |	
		             |	СГРУППИРОВАТЬ ПО
		             |		ЗаказПоставщикуСезонныйТовары.Номенклатура,
		             |		ЗаказПоставщикуСезонныйТовары.Ссылка) КАК ОстаткиТоваровВПроизводстве
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ДатаПоступления
		             |ИТОГИ
		             |	МАКСИМУМ(ДатаПоступления),
		           //  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику),
		             |	СУММА(КоличествоОстаток)
		             |ПО
		             |	Номенклатура";
		
	//	Запрос.УстановитьПараметр("СвойствоДатаПоступленияВПорт", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90160")); 
		Запрос.УстановитьПараметр("ДатаДискиВПути", ДатаДискиВПути); 
		Запрос.УстановитьПараметр("ФлагНеУчитывать_ДатаДискиВПути", ЗначениеНеЗаполнено(ДатаДискиВПути)); 		
		Запрос.УстановитьПараметр("Номенклатура", Расшифровка); 		
		Запрос.УстановитьПараметр("ЯШТ", ОтборЗаказПокупателя1 );
	//	Запрос.УстановитьПараметр("СеребрА",Справочники.Пользователи.НайтиПоКоду("Серебренникова А.А.") );
		
			
		//ТаблицаТоварыВПути=Запрос.Выполнить().Выгрузить();
		//ТаблицаТоварыВПути.ВыбратьСтроку();
		ТабДок = Новый ТабличныйДокумент;
		
		ВыборкаИтого=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Макет=ПолучитьМакет("ТоварыВПути");	
		ОбластьИтого=Макет.ПолучитьОбласть("Итого");
		
	Если ВыборкаИтого.Количество()>0 Тогда
			ВыборкаИтого.Следующий(); // итоги есть!
			ОбластьИтого.Параметры.ДатаПоступления = ВыборкаИтого.ДатаПоступления;
			ОбластьИтого.Параметры.КоличествоОстаток = ВыборкаИтого.КоличествоОстаток;
			ОбластьИтого.Параметры.Комментарий =ВыборкаИтого.Номенклатура.Код;
			ОбластьИтого.Параметры.ЗаказПоставщику = ВыборкаИтого.Номенклатура;

		
		Выборка	= ВыборкаИтого.Выбрать();
		
		Если Выборка.Количество()>0 Тогда
			ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(ОбластьШапка);
			Пока Выборка.Следующий() Цикл
				ОбластьДетали=Макет.ПолучитьОбласть("Детали");
				ОбластьДетали.Параметры.Заполнить(Выборка);
				ОбластьДетали.Параметры.Комментарий=Выборка.ЗаказПоставщику.Комментарий;
				ТабДок.Вывести(ОбластьДетали);
			КонецЦикла;	
		КонецЕсли; //Выборка
		
		ТабДок.Вывести(ОбластьИтого);
		
	КонецЕсли; //ВыборкаИтого
		
		ТабДок.ТолькоПросмотр=Истина;		
		ТабДок.Показать();
		
	КонецЕсли;	
	
	Если Найти (Элемент.ТекущаяОбласть.Имя, "C10") > 0 Тогда   // Колонка "Товары в пути ТРАНЗИТ"
		СтандартнаяОбработка=Ложь;
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		       //    |	ЗначенияСвойствОбъектов.ДатаПоступленияВПорт КАК ДатаПоступления,
					 |ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA как ДатаПоступления,

		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
		             |	ЗаказыПоставщикамОстатки.ЗаказПоставщику.Контрагент КАК Контрагент,
		             |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
		             |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
		             |ИЗ
		             |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура = &Номенклатура 
					// |	И ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |	И ЗаказПоставщику.Транзит 
					 |	И ЗаказПоставщику.Подразделение=&ЯШТ
					 |	И (ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA <= &ДатаДискиВПути ИЛИ &ФлагНеУчитывать_ДатаДискиВПути)
					 |) КАК ЗаказыПоставщикамОстатки
			         |
		             |ОБЪЕДИНИТЬ ВСЕ
		             |
		             |ВЫБРАТЬ
		             |	ОстаткиТоваровВПроизводстве.Ссылка.ДатаДействияПо,
		             |	ОстаткиТоваровВПроизводстве.Ссылка,
		             |	ОстаткиТоваровВПроизводстве.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо,
		             |	ОстаткиТоваровВПроизводстве.Ссылка.Контрагент,
		             |	ОстаткиТоваровВПроизводстве.Номенклатура,
					 //----------------точный остаток------------------------
		             |	ОстаткиТоваровВПроизводстве.Количество - ОстаткиТоваровВПроизводстве.КоличествоУжеЕдет
					 |ИЗ
		             |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		             |		ЗаказПоставщикуСезонныйТовары.Номенклатура КАК Номенклатура,
		             |		ЗаказПоставщикуСезонныйТовары.Ссылка КАК Ссылка,
		             |		МАКСИМУМ(ЗаказПоставщикуСезонныйТовары.Количество) КАК Количество,
		             |		СУММА(ЕСТЬNULL(ЗаказПоставщикуТовары.Количество, 0)) КАК КоличествоУжеЕдет
		             |	ИЗ
		             |		Документ.ЗаказПоставщикуСезонный.Товары КАК ЗаказПоставщикуСезонныйТовары
		             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		             |				ЕСТЬNULL(ЗакПостТовары.Ссылка.Основание, ЗНАЧЕНИЕ(Документ.ЗаказПоставщикуСезонный.ПустаяСсылка)) КАК Основание,
		             |				ЕСТЬNULL(ЗакПостТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		             |				СУММА(ЕСТЬNULL(ЗакПостТовары.Количество, 0)) КАК Количество
		             |			ИЗ
		             |				Документ.ЗаказПоставщику.Товары КАК ЗакПостТовары
		             |			ГДЕ
		             |				ЗакПостТовары.Номенклатура = &Номенклатура
		             //|				И ЗакПостТовары.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |				И (НЕ ЗакПостТовары.Ссылка.ПометкаУдаления)
		             |	И ЗакПостТовары.Ссылка.Транзит 
					 |	И ЗакПостТовары.Ссылка.Подразделение=&ЯШТ
					 |			
		             |			СГРУППИРОВАТЬ ПО
		             |				ЗакПостТовары.Номенклатура,
		             |				ЗакПостТовары.Ссылка.Основание) КАК ЗаказПоставщикуТовары
		             |			ПО ЗаказПоставщикуСезонныйТовары.Ссылка = ЗаказПоставщикуТовары.Основание
		             |				И ЗаказПоставщикуСезонныйТовары.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
		             |	ГДЕ
		             |	ЗаказПоставщикуСезонныйТовары.Номенклатура = &Номенклатура
		            // |	И ЗаказПоставщикуСезонныйТовары.Ссылка.ДоговорКонтрагента.ОтветственноеЛицо=&СеребрА
					 |	И ЗаказПоставщикуСезонныйТовары.ссылка.Транзит 
					 |	И  ЗаказПоставщикуСезонныйТовары.ссылка.Подразделение=&ЯШТ 
					 |		И (ЗаказПоставщикуСезонныйТовары.Ссылка.ДатаДействияПо <= &ДатаДискиВПути
		             |				ИЛИ &ФлагНеУчитывать_ДатаДискиВПути)
		             |	
		             |	СГРУППИРОВАТЬ ПО
		             |		ЗаказПоставщикуСезонныйТовары.Номенклатура,
		             |		ЗаказПоставщикуСезонныйТовары.Ссылка) КАК ОстаткиТоваровВПроизводстве
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ДатаПоступления
		             |ИТОГИ
		             |	МАКСИМУМ(ДатаПоступления),
		           //  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику),
		             |	СУММА(КоличествоОстаток)
		             |ПО
		             |	Номенклатура";
		
	//	Запрос.УстановитьПараметр("СвойствоДатаПоступленияВПорт", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90160")); 
		Запрос.УстановитьПараметр("ДатаДискиВПути", ДатаДискиВПути); 
		Запрос.УстановитьПараметр("ФлагНеУчитывать_ДатаДискиВПути", ЗначениеНеЗаполнено(ДатаДискиВПути)); 		
		Запрос.УстановитьПараметр("Номенклатура", Расшифровка); 		
		Запрос.УстановитьПараметр("ЯШТ", ОтборЗаказПокупателя1 );
	//	Запрос.УстановитьПараметр("СеребрА",Справочники.Пользователи.НайтиПоКоду("Серебренникова А.А.") );
		
			
		//ТаблицаТоварыВПути=Запрос.Выполнить().Выгрузить();
		//ТаблицаТоварыВПути.ВыбратьСтроку();
		ТабДок = Новый ТабличныйДокумент;
		
		ВыборкаИтого=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Макет=ПолучитьМакет("ТоварыВПути");	
		ОбластьИтого=Макет.ПолучитьОбласть("Итого");
		
	Если ВыборкаИтого.Количество()>0 Тогда
			ВыборкаИтого.Следующий(); // итоги есть!
			ОбластьИтого.Параметры.ДатаПоступления = ВыборкаИтого.ДатаПоступления;
			ОбластьИтого.Параметры.КоличествоОстаток = ВыборкаИтого.КоличествоОстаток;
			ОбластьИтого.Параметры.Комментарий =ВыборкаИтого.Номенклатура.Код;
			ОбластьИтого.Параметры.ЗаказПоставщику = ВыборкаИтого.Номенклатура;

		
		Выборка	= ВыборкаИтого.Выбрать();
		
		Если Выборка.Количество()>0 Тогда
			ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(ОбластьШапка);
			Пока Выборка.Следующий() Цикл
				ОбластьДетали=Макет.ПолучитьОбласть("Детали");
				ОбластьДетали.Параметры.Заполнить(Выборка);
				ОбластьДетали.Параметры.Комментарий=Выборка.ЗаказПоставщику.Комментарий;
				ТабДок.Вывести(ОбластьДетали);
			КонецЦикла;	
		КонецЕсли; //Выборка
		
		ТабДок.Вывести(ОбластьИтого);
		
	КонецЕсли; //ВыборкаИтого
		
		ТабДок.ТолькоПросмотр=Истина;		
		ТабДок.Показать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПросрочкаПриИзменении(Элемент)
	ЭлементыФормы.Панель1.Страницы.СтраницаЗаказыПокупателей.Видимость = Просрочка;
	ТаблицаЗаказыПокупателей.Очистить();
КонецПроцедуры

Процедура ФлажокПроизводствоПриИзменении(Элемент)
	
	//ЭлементыФормы.НадписьДатаОтсеченияДляПоступленийВПорт.Видимость = ФлажокПроизводство;
	//ЭлементыФормы.ДатаДискиВПути.Видимость = ФлажокПроизводство;
	Если НЕ ФлажокПроизводство тогда
		ДатаДискиВПути = '00010101';
	КонецЕсли;
	
КонецПроцедуры





