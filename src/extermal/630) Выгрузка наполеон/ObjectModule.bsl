
//
// если файл users.dbf есть в папке, открыть его, иначе создать
//
Функция ФайлМенеджеров()
	имяФайла = ПапкаОбмена + "\Users.dbf";
	врФайл = ПапкаОбмена + "\Users1.dbf";

	ДБФ = Новый XBase();
	файл = Новый Файл(имяФайла);
	
	Если файл.Существует() Тогда
		КопироватьФайл(имяФайла, врФайл);	
		ДБФ.ОткрытьФайл(врФайл);
	Иначе
		ДБФ.Поля.Добавить("ID",   "S", 75, 0);
		ДБФ.Поля.Добавить("NAME", "S", 100, 0);
		ДБФ.Поля.Добавить("LOGIN", "S", 30, 0);
		ДБФ.Поля.Добавить("PASSWORD", "S", 30, 0);
		ДБФ.СоздатьФайл(врФайл);
	КонецЕсли;

	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

//
// Создаем временный файл, в который будут записываться информация по контрагентам
//
Функция ФайлОрганизаций(Общий = Ложь)
	ДБФ = Новый XBase();
		
	имяФайла = ПапкаОбмена + ?(Общий, "\TORGS.DBF", "\TO.DBF");

	ДБФ.Поля.Добавить("ID",   "S", 25, 0);
	ДБФ.Поля.Добавить("NAME", "S", 55, 0);
	ДБФ.Поля.Добавить("ADDRESS","S", 100, 0);
	ДБФ.Поля.Добавить("COSTYPE","N", 3, 0);
	ДБФ.СоздатьФайл(имяФайла);

	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции    
	
//
// Создаем временный файл, в который будут записываться информация по контактам
//
Функция ФайлКонтактов(Агент)
	ДБФ = Новый XBase();
	
	имяФайлаАгента = ПапкаОбмена + "\TC" + СокрЛП(Агент.Код) + ".DBF";
	имяФайла = ПапкаОбмена + "\TC.DBF";
	файл = Новый Файл(имяФайлаАгента);
	Если файл.Существует() Тогда
		ПереместитьФайл(имяФайлаАгента, имяФайла);
		ДБФ.ОткрытьФайл(имяФайла);
	Иначе
		ДБФ.Поля.Добавить("ID",   "S",  25, 0);
		ДБФ.Поля.Добавить("FIO",  "S", 100, 0);
		ДБФ.Поля.Добавить("PHONE","S", 50, 0);
		ДБФ.СоздатьФайл(имяФайла);
	КонецЕсли;

	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции    

//
// Создать файл для товаров
//
Функция ФайлТоваров(имяФайла, ТипыЦен)
	файл = Новый Файл(имяФайла);
	Если файл.Существует() Тогда
		УдалитьФайлы(имяФайла, "");
	КонецЕсли;

	ДБФ = Новый XBase();

	ДБФ.Поля.Добавить("ID",    "S", 15, 0);
	ДБФ.Поля.Добавить("FOLDER","S", 15, 0);
	ДБФ.Поля.Добавить("NAME",  "S",100, 0);
	
	// добавим поля для цен
	Для Каждого стр из ТипыЦен Цикл
		ДБФ.Поля.Добавить(стр.Представление, "N", 10, 2);
	КонецЦикла;
	
	ДБФ.Поля.Добавить("INPACK","N",  8, 3);
	ДБФ.Поля.Добавить("QTY",   "N", 10, 3);
	ДБФ.Поля.Добавить("WEIGHT","N", 10, 3);

	ДБФ.СоздатьФайл(имяФайла);

	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

//
// Создать файл папок товара
//
Функция ФайлПапок(имяФайла)
	файл = Новый Файл(имяФайла);
	Если файл.Существует() Тогда
		УдалитьФайлы(имяФайла, "");
	КонецЕсли;

	ДБФ = Новый XBase();

	ДБФ.Поля.Добавить("ID",   "S", 15, 0);
	ДБФ.Поля.Добавить("LEVEL","N",  6, 0);
	ДБФ.Поля.Добавить("NAME", "S", 50, 0);

	ДБФ.СоздатьФайл(имяФайла);

	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

//
// создать файл оплат - общий для всех
//
Функция ФайлОплат(Папка)
	имяФайла = Папка + "\TPAY.DBF";
	файл = Новый Файл(имяФайла);
	Если файл.Существует() Тогда
		УдалитьФайлы(имяФайла);
	КонецЕсли;
	
	ДБФ = Новый XBase();
	
	ДБФ.Поля.Добавить("ID",  "S", 20, 0);
	ДБФ.Поля.Добавить("NUM", "S", 10, 0);
	ДБФ.Поля.Добавить("DATE","D",  8, 0);
	ДБФ.Поля.Добавить("SUM", "N", 10, 2);

	ДБФ.СоздатьФайл(имяФайла);
	
	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

Функция ФайлОтгрузок(Папка)
	имяФайла = Папка + "\TDLV.DBF";

	ДБФ = Новый XBase();

	ДБФ.Поля.Добавить("ID",  "S", 20, 0);
	ДБФ.Поля.Добавить("NUM", "S", 20, 0);
	ДБФ.Поля.Добавить("DATE","D",  8, 0);
	ДБФ.Поля.Добавить("ID_I","S", 15, 0);
	ДБФ.Поля.Добавить("QTY", "N", 10, 3);
	ДБФ.Поля.Добавить("SUM", "N", 10, 2);
	ДБФ.Поля.Добавить("SUMD", "N", 10, 2);
	ДБФ.Поля.Добавить("PAYDATE", "D", 8, 0);
	ДБФ.Поля.Добавить("CREATED",  "S", 20, 0);

	ДБФ.СоздатьФайл(имяФайла);
	
	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

Функция ФайлФирм()
	имяФайла = ПапкаОбмена + "\TFM.DBF";

	ДБФ = Новый XBase();
	ДБФ.Поля.Добавить("ID",     "S", 25, 0);
	ДБФ.Поля.Добавить("NAME",   "S", 55, 0);
	
	ДБФ.СоздатьФайл(имяФайла);
	
	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции

Процедура ЗакрытьФайлФирм(таблица)
	таблица.ЗакрытьФайл();
	ПереместитьФайл(ПапкаОбмена + "\TFM.DBF", ПапкаОбмена + "\FIRMS.DBF" );
КонецПроцедуры

Процедура ЗакрытьОплатыОтгрузки(оплаты, отгрузки, кодАгента)
	Если оплаты <> Неопределено Тогда
		оплаты.ЗакрытьФайл();
		ПереместитьФайл(ПапкаОбмена + "\TPAY.DBF", ПапкаОбмена + "\PAY"+ СокрЛП(кодАгента) + ".DBF" );  
	КонецЕсли;
	
	Если отгрузки <> Неопределено Тогда
		отгрузки.ЗакрытьФайл();
		ПереместитьФайл(ПапкаОбмена + "\TDLV.DBF", ПапкаОбмена + "\DLV"+ СокрЛП(кодАгента) + ".DBF" );  
	КонецЕсли;
КонецПроцедуры

//
// Файл обработанных заказов
//
Функция ФайлОбработанныхЗаказов(кодМенеджера)
	имяФайла = ПапкаОбмена + "\POD" + СокрЛП(кодМенеджера) + ".DBF";
	темпФайл = ПапкаОбмена + "\TPOD.DBF";

	ДБФ = Новый XBase();
	файл = Новый Файл(имяФайла);
	
	Если файл.Существует() Тогда
		ПереместитьФайл(имяФайла, темпФайл);	
		ДБФ.ОткрытьФайл(темпФайл);
	Иначе
		ДБФ.Поля.Добавить("CREATED", "S", 25, 0);	
		ДБФ.Поля.Добавить("TYPE", "S", 25, 0);	
		ДБФ.СоздатьФайл(темпФайл);
	КонецЕсли;
	
	ДБФ.Кодировка = КодировкаXBase.OEM;
	Возврат ДБФ;
КонецФункции    

Функция КодАгента(ТекАгент)
	пКод = СокрЛП(Лев(СокрЛП(ТекАгент.Код), 75));
	Возврат пКод;
КонецФункции

Процедура ЗакрытьФайлыАгента(ОргDBF, КонтDBF, ТекАгент);
	Если ТекАгент = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОргDBF.ЗакрытьФайл();
	КонтDBF.ЗакрытьФайл();
	
	код = КодАгента(ТекАгент);
	
	ПереместитьФайл(ПапкаОбмена + "\TO.DBF", ПапкаОбмена + "\O" + СокрЛП(код) + ".DBF");  
	ПереместитьФайл(ПапкаОбмена + "\TC.DBF", ПапкаОбмена + "\C" + СокрЛП(код) + ".DBF");  
КонецПроцедуры

Процедура ЗакрытьФайлМенеджеров( Менеджеры)
	Менеджеры.ЗакрытьФайл();
	ПереместитьФайл(ПапкаОбмена + "\USERS1.DBF", ПапкаОбмена + "\USERS.DBF");  	
КонецПроцедуры

Процедура ПереименоватьФайлОплат(Папка)
	ПереместитьФайл(Папка + "\TPAY.DBF", Папка + "\PAYMENT.DBF" );  
КонецПроцедуры

//
// Изменить имена файлов с накладными на доступные для синхронизации
//
Процедура ПереименоватьФайлыНакладных(Папка)
	Рез = НайтиФайлы(Папка, "TLV*.DBF"); 
	Для Каждого файл из Рез Цикл
		имяФайла = файл.Имя;
		ПереместитьФайл(Папка + "\" + имяФайла, Папка + "\D" + Прав(имяФайла, СтрДлина(имяФайла)-1));  
	КонецЦикла;
КонецПроцедуры

//
// Ищем в файле USERS.DBF запись о торговом агенте
//
Процедура ПроверитьИнформациюПоМенеджеру(МенеджерDBF, Агент) 
	МенеджерDBF.Первая();
	пКод = КодАгента(Агент);
	Пока МенеджерDBF.ВКонце() = 0 Цикл
		Если СокрЛП(МенеджерDBF.ID) = пКод Тогда
			МенеджерDBF.NAME = Агент.Наименование;
			МенеджерDBF.Записать();
			Возврат;
		КонецЕсли;
		МенеджерDBF.Следующая();
	КонецЦикла;
	
	МенеджерDBF.Добавить();
	МенеджерDBF.ID = пКод;
	МенеджерDBF.NAME = Агент.Наименование;
	
	//
	// В качестве пароля и логина для КПК назначим количество записей + 1. Так для первого пользователя
	// логин и пароль будет 1/1, для второго 2/2 и т.д.
	//
	МенеджерDBF.PASSWORD = МенеджерDBF.КоличествоЗаписей() + 1;
	МенеджерDBF.LOGIN = МенеджерDBF.КоличествоЗаписей() + 1;
	
	МенеджерDBF.Записать();
КонецПроцедуры

//
// Выбираем фактический адрес, если его нет то юридический
//
Функция АдресКонтрагента(Контрагент)
	Адреса = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	ПрочитатьКонтактнуюИнформацию(Адреса, Контрагент.Ссылка);
	
	АдресСтр = "";
	
	Попытка
		Для каждого Адрес из Адреса Цикл
			Если Найти(Адрес.Вид.Наименование, "Фактический") > 0 Тогда
				Если Адрес.Представление <> "" Тогда
					Возврат Адрес.Представление;
				КонецЕсли;
				Возврат ПолучитьПредставлениеАдреса(Адрес);
			КонецЕсли;
			Если Найти(Адрес.Вид.Наименование, "Юридический") > 0 Тогда
				Если Адрес.Представление <> "" Тогда
					АдресСтр = Адрес.Представление;
				Иначе
					АдресСтр = ПолучитьПредставлениеАдреса(Адрес);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("ошибка АдресКонтрагента " + Контрагент + ": " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат АдресСтр;
КонецФункции

//
// Заполняем таблицу контактов для контрагента
//
Функция ЗаполнитьКонтакты(Контакты, Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Наименование КАК ФИО,
		|	КонтактнаяИнформация.Представление КАК Телефон,
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|			ПО КонтактныеЛица.Ссылка = КонтактнаяИнформация.Объект
		|		ПО Контрагенты.Ссылка = КонтактныеЛица.ОбъектВладелец
		|ГДЕ
		|	Контрагенты.Ссылка В(&Ссылка)
		|	И НЕ КонтактнаяИнформация.Представление ПОДОБНО """"
		|	И КонтактнаяИнформация.Тип = &Тип";

	Запрос.УстановитьПараметр("Ссылка", Контрагент);
    Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Контакты.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
			Стр = Контакты.Добавить();
			Стр.ФИО = ВыборкаДетальныеЗаписи.ФИО;	
			Стр.Телефон = ВыборкаДетальныеЗаписи.Телефон;
			Телефон = ВыборкаДетальныеЗаписи.Телефон;
		
	КонецЦикла;
	
	Возврат Телефон;
КонецФункции

Процедура ВыгрузкаКонтрагентов(папка, ТипыЦен)
	Сообщить("Выгружаем контрагентов по справочнику...");
	Для Каждого стр из Агенты цикл
		
	Менеджеры = ФайлМенеджеров();

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.Владелец.Наименование,
	|	ДоговорыКонтрагентов.ОтветственноеЛицо
	|ПОМЕСТИТЬ НужныеДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ОтветственноеЛицо = &Агенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ НужныеКонтрагенты
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство.Код = ""90218""
	|	И ЗначенияСвойствОбъектов.Значение <> &Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ПОМЕСТИТЬ Адреса
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Поле2 В (&Регион)
	|	И КонтактнаяИнформация.Вид.Наименование ПОДОБНО ""Адрес доставки%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НужныеДоговоры.ОтветственноеЛицо КАК Агент,
	|	НужныеДоговоры.Владелец КАК Контрагент,
	|	НужныеДоговоры.ВладелецНаименование,
	|	Адреса.Представление КАК Адрес,
	|	Адреса.Вид
	|ИЗ
	|	НужныеДоговоры КАК НужныеДоговоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Адреса КАК Адреса
	|		ПО НужныеДоговоры.Владелец = Адреса.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НужныеКонтрагенты КАК НужныеКонтрагенты
	|		ПО НужныеДоговоры.Владелец = НужныеКонтрагенты.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Агент";
	
	Список = Новый СписокЗначений;
	Список.Добавить(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес Доставки%"));
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Значение", Перечисления.КатегорииКонтрагентов.Закрылись);
	//Запрос.УстановитьПараметр("ВидТовара", Перечисления.ВидыТоваров.Аксессуары);
	Запрос.УстановитьПараметр("Агенты",стр.ТорговыйАгент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", список);
	Рег = Новый Массив;
	Для Каждого Стр из регион Цикл
		Если Стр.Выбрать тогда
			Рег.Добавить(Стр.Регион);
		КонецЕсли;	
	КонецЦикла;
    Запрос.УстановитьПараметр("Регион", Рег);


	Выборка = Запрос.Выполнить().Выбрать();
		
	//
	// создаем таблицу значений для выгрузки контактов
	//
	Контакты = Новый ТаблицаЗначений;
	Контакты.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка"));
	Контакты.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка"));
	
	ВсеКАгенты = новый СписокЗначений;
	ВсеКА = ФайлОрганизаций(Истина);
	
	ТекАгент = "";
	ОргDBF = "";
	КонтDBF = "";
	Пока Выборка.Следующий() Цикл
		//Если Выборка.Агент = Null или Выборка.Агент.Пустая() Тогда
		//	Продолжить;
		//КонецЕсли;
		Если ТекАгент <> Выборка.Агент Тогда
			ЗакрытьФайлыАгента(ОргDBF, КонтDBF, ТекАгент);

			ТекАгент = Выборка.Агент;
			ОргDBF = ФайлОрганизаций();
			КонтDBF = ФайлКонтактов(ТекАгент);
		КонецЕсли;
		
		Контрагент = Выборка.контрагент;
		Если Не контрагент.Покупатель Тогда
			Продолжить;
		КонецЕсли;
		
		договор = контрагент.ОсновнойДоговорКонтрагента;
		кодОрг = Контрагент.Код;
		
		Адрес = Выборка.Адрес;//АдресКонтрагента(Контрагент);
		
		ТелефонКА = ЗаполнитьКонтакты(Контакты, Контрагент);
				
		ПроверитьИнформациюПоМенеджеру(Менеджеры, ТекАгент);
		
		//
		// добавляем информацию по контрагентам и контактам
		//
		ОргDBF.Добавить();
		ОргDBF.ID = КодОрг;
		ОргDBF.NAME = Строка(Выборка.Контрагент) +"(" + Строка(Выборка.Вид) +")" ;
		ОргDBF.ADDRESS = Адрес;
		ОргDBF.COSTYPE =Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");       //крупный опт
		
		
		ОргDBF.Записать();		
		
			ВсеКАгенты.Добавить(Контрагент);
			ВсеКА.Добавить();
			ЗаполнитьЗначенияСвойств(ВсеКА, ОргDBF, "ID,ADDRESS,NAME,COSTYPE"); 
			ВсеКА.Записать();
		// сохраняем информацию о контактах
		//
		Для Каждого Контакт из Контакты Цикл
			КонтDBF.Добавить();
			КонтDBF.ID = КодОрг;
			КонтDBF.FIO = Контакт.ФИО;
			КонтDBF.PHONE = Контакт.Телефон;
			КонтDBF.Записать();			
		КонецЦикла;			
	КонецЦикла;
	
	ЗакрытьФайлыАгента(ОргDBF, КонтDBF, ТекАгент);
	ВсеКА.ЗакрытьФайл();
	
	ПереместитьФайл(ПапкаОбмена + "\TORGS.DBF", ПапкаОбмена + "\ORGS.DBF");
	ЗакрытьФайлМенеджеров(Менеджеры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузкаПапокТовара(папка)
	склад = Справочники.Номенклатура.ВыбратьИерархически();	
	файлПапок = Папка +"\TFLD.DBF";
	папкаDBF = ФайлПапок(файлПапок);
	
	Пока склад.Следующий() Цикл
		Если склад.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;

		Если ПустаяСтрока(склад.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не склад.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		папкаDBF.Добавить();
		папкаDBF.ID = склад.Код;
		папкаDBF.NAME = склад.Наименование;
		папкаDBF.LEVEL = склад.УровеньВВыборке();
		папкаDBF.Записать();
	КонецЦикла;

	папкаDBF.ЗакрытьФайл();
	ПереместитьФайл(файлПапок, Папка + "\FOLDERS.DBF"); 
КонецПроцедуры

//Процедура ЗаполнитьРасчетныеЦены(стрТовара, цены, ВыгрЦены)
//	перем ЦенаБазовая;
//	Дата = ТекущаяДата();
//	
//	Для каждого стр из ВыгрЦены Цикл
//		
//		ТипЦен = стр.Значение;
//		Если Не (ТипЦен.Рассчитывается и ЗначениеЗаполнено(ТипЦен.БазовыйТипЦен)) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ЦенаБазовая = цены.Получить(ТипЦен.БазовыйТипЦен);
//		Если ЦенаБазовая = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ПолученнаяЦена = 0;
//		
//		ВалютаТекущая = ТипЦен.ВалютаЦены;
//		ВалютаБазовая = ТипЦен.БазовыйТипЦен.ВалютаЦены;
//		
//		Если ТипЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
//			ПолученнаяЦена = ЦенаБазовая * (1 + стр.Значение.ПроцентСкидкиНаценки / 100);
//			ВалютаТекущая = ВалютаБазовая;
//		ИначеЕсли ТипЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
//			ПолученнаяЦена = Ценообразование.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ЦенаБазовая, ВалютаТекущая, ВалютаБазовая);
//		КонецЕсли;
//		
//		ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая, 0, 1, Дата);
//		ПолученнаяЦена = Ценообразование.ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
//		
//		стрТовара.Цены.Вставить(стр.Представление, ПолученнаяЦена);

//	КонецЦикла;
//	
//	цены.Очистить();
//КонецПроцедуры

Функция ВыгрузитьТовары(ВыгрЦены)
	таблТоваров = Новый	ТаблицаЗначений;
	таблТоваров.Колонки.Добавить("Товар");
	таблТоваров.Колонки.Добавить("Кол_во");
	таблТоваров.Колонки.Добавить("Цены");
	
	// добавим базовые типы цен для расчетных
	Для каждого стр из ВыгрЦены Цикл
		ТипЦены = стр.Значение;
		Если (ТипЦены.Рассчитывается и ЗначениеЗаполнено(ТипЦены.БазовыйТипЦен)) Тогда
			эл = ВыгрЦены.НайтиПоЗначению(ТипЦены.БазовыйТипЦен);
			Если эл = Неопределено Тогда
				ВыгрЦены.Добавить(ТипЦены.БазовыйТипЦен, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Номенклатура.Ссылка КАК Товар,
	|	ЦеныНоменклатуры.ТипЦен.Ссылка КАК ТипЦены,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Кол_во,
	|	ЦеныНоменклатуры.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ТипЦен.Ссылка = &ТипыЦен
	|				И Номенклатура В ИЕРАРХИИ (&Номенклатура)) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Дата,
	|				Склад.Транзитный = ЛОЖЬ
	|					И Склад.ЗапретитьИспользование = ЛОЖЬ) КАК ТоварыНаСкладахОстатки
	|		ПО ЦеныНоменклатуры.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				&Дата,
	|				ЗаказПокупателя.Транзит = ЛОЖЬ
	|					И ЗаказПокупателя.Проверен = ИСТИНА) КАК ЗаказыПокупателейОстатки
	|		ПО ЦеныНоменклатуры.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Номенклатура.Ссылка,
	|	ЦеныНоменклатуры.ТипЦен.Ссылка,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0),
	|	ЦеныНоменклатуры.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товар";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ТипыЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005")); //крупный опт
	Запрос.Параметры.Вставить("Дата", ТекущаяДата());
	Запрос.Параметры.Вставить("Номенклатура", ГруппыНоментклатуры.ВыгрузитьКолонку("Группа"));
	
	базовыеЦены = Новый Соответствие;
	текТовар = Неопределено;
	стрТовара = Неопределено;
	рез = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);	
	Для Каждого стр из рез Цикл
		Если текТовар <> стр.Товар Тогда
			//Если текТовар <> Неопределено Тогда
			//	ЗаполнитьРасчетныеЦены(стрТовара, базовыеЦены, ВыгрЦены);
			//КонецЕсли;
			текТовар = стр.Товар;
			
			стрТовара = таблТоваров.Добавить();
			стрТовара.Товар = стр.Товар;
			стрТовара.Кол_во = стр.Кол_во;
			стрТовара.Цены = Новый Соответствие;
		КонецЕсли;
		
		Цена = стр.Цена;
		базовыеЦены.Вставить(стр.ТипЦены, Цена);
		
		типЦены = ВыгрЦены.НайтиПоЗначению(стр.ТипЦены);		
		
		стрТовара.Цены.Вставить(типЦены.Представление, Цена);
		
	КонецЦикла;
	
	Возврат таблТоваров;
КонецФункции

//
// Выгружаем остатки товара и цены
//
Процедура ВыгрузкаТовара(папка, ТипыЦен)
	Перем цена, едЦены;
	
	Сообщить("Выгружаем информацию по номенклатуре...");
	    
	//
	// сформируем список полей цен
	//
	ВыгрЦены = Новый СписокЗначений;
	Для каждого стр из ТипыЦен Цикл
		ВыгрЦены.Добавить(стр.Значение, стр.Представление);
	КонецЦикла;
	
	товары = ВыгрузитьТовары(ВыгрЦены);
		
	// Выгрузим общий прайс
	ВыгрузитьТоварыАгента(Неопределено, товары, ВыгрЦены);
	ВыгрузкаПапокТовара(Папка);
КонецПроцедуры

Процедура ВыгрузитьТоварыАгента(СтрАгент, товары, ВыгрЦены)
	
	файлТовара = ПапкаОбмена + "\TWH.DBF";
	Остатки = РегистрыНакопления.ТоварыНаСкладах;
	складDBF = ФайлТоваров(файлТовара, ВыгрЦены);
					
	Для Каждого стр из Товары Цикл
		текТовар = стр.Товар;
		
		складDBF.Добавить();
		Кол = 0;
		
		Если СтрАгент <> Неопределено Тогда
			Фильтр   = Новый Структура;
			Фильтр.Вставить("Номенклатура",текТовар);
			Фильтр.Вставить("Склад", СтрАгент.Склад);
			ТабОстатков = Остатки.Остатки(ТекущаяДата(),Фильтр, "Номенклатура,Склад", "Количество");
			Если ТабОстатков.Количество() > 0 Тогда
				Кол = ТабОстатков[0].Количество;	
			КонецЕсли;
		Иначе
			Кол = стр.Кол_во;
		КонецЕсли;
	
		складDBF.ID = текТовар.Код;
		складDBF.FOLDER = текТовар.Родитель.Код;
		складDBF.NAME = текТовар.Наименование;
		Если Не текТовар.ЕдиницаХраненияОстатков.Пустая() Тогда
			складDBF.INPACK = текТовар.ЕдиницаХраненияОстатков.Коэффициент;
			Кол = Кол * текТовар.ЕдиницаХраненияОстатков.Коэффициент;
		Иначе
			складDBF.INPACK = 1;
		КонецЕсли;
		
		складDBF.QTY = Кол;
		
		Для Каждого цена Из стр.Цены Цикл
			складDBF.УстановитьЗначениеПоля(цена.Ключ, цена.Значение);		
		КонецЦикла;
		складDBF.Записать();	
	КонецЦикла;

	складDBF.ЗакрытьФайл();
	
	ПереместитьФайл (файлТовара, ПапкаОбмена + ?(СтрАгент = Неопределено, "\WAREHOUS.DBF", "\W" + КодАгента(СтрАгент.Агент) + ".DBF")); 

КонецПроцедуры

Процедура ДобавитьФирму(фмт, фирма)
	ки = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	фмт.Добавить();
	фмт.ID = фирма.Код;
	фмт.NAME = фирма.Наименование;
	
	фмт.Записать();

КонецПроцедуры 

//
// сохранить информацию о фирме и типах цен в order.cfg
// колвоЦен = определяет сколько цен выгружать для товаров
//
Процедура ВыгрузкаНастроек(папка, ТипыЦен)
	конфиг = Новый ТекстовыйДокумент;
	конфиг.Очистить();
	
	//	
	// выгружаем фирмы
	//

	фмт = ФайлФирм();
	фирма = Справочники.Организации.Выбрать();
	Пока фирма.Следующий() > 0 Цикл
		Если фирма.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьФирму(фмт, фирма);
	КонецЦикла;
	ЗакрытьФайлФирм(фмт);
	
	//
	// записываем типы цен
	//
	кфгСтр = "ВидЦены=";
	Для Каждого стр из ТипыЦен Цикл
		кфгСтр = кфгСтр + стр.Значение.Наименование + Символ(9) + стр.Значение.Код + ";";
	КонецЦикла;	
	конфиг.ДобавитьСтроку(Лев(кфгСтр, СтрДлина(кфгСтр)-1));
	
	Если ИзменятьТипЦены = 1 Тогда
		конфиг.ДобавитьСтроку("МожноИзменятьЦену=1");
	Иначе
		конфиг.ДобавитьСтроку("МожноИзменятьЦену=0");
	КонецЕсли;
	
	конфиг.ДобавитьСтроку("ГруппыЗадач=Ассортимент;Мерчендайзинг;POSM;Акция");
	конфиг.Записать(Папка + "\order.cfg", "windows-1251");
КонецПроцедуры

//
// Выгружается только последние 5 символов кода пользователя
//
Функция НайтиАгента(КодАгента)
	Возврат Справочники.Пользователи.НайтиПоКоду(КодАгента);
КонецФункции

Функция СоздатьЗаказ(Заказ, Агент, можетМенятьЦену)
	
	Накладная = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	Накладная.Дата = ТекущаяДата();
	Накладная.ДатаОтгрузки = Заказ.DATE;
	
	организация = Справочники.Организации.НайтиПоКоду("00001");
	Если организация <> Неопределено Тогда
		Накладная.Организация = организация;
	КонецЕсли;
	Накладная.УчитыватьНДС = Истина;
	Накладная.СуммаВключаетНДС = Истина;
	Накладная.ТипЗаказа = 15;
	контрагент = Справочники.Контрагенты.НайтиПоКоду(Заказ.ID);
	Накладная.Грузополучатель = контрагент;
	Накладная.Контрагент = контрагент;
	ПриИзмененииЗначенияКонтрагента(Накладная);


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо";

	Запрос.УстановитьПараметр("Владелец", Контрагент.Ссылка);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", Агент.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выгрузить();

	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Договор = ВыборкаДетальныеЗаписи[0].ССылка;
	Иначе
		договор = Контрагент.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	Накладная.Проверен = Истина;
	Накладная.ДоговорКонтрагента = договор;
	Накладная.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(Заказ.CTYPE);
		
	Если ЗначениеЗаполнено(Накладная.ДоговорКонтрагента) Тогда
		Накладная.ДатаОплаты = Накладная.ДатаОтгрузки + Накладная.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности * 86400;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Накладная.ДоговорКонтрагента) Тогда
		Накладная.ВалютаДокумента = Накладная.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		Накладная.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Курс = ПолучитьКурсВалюты(Накладная.ВалютаДокумента, Накладная.Дата);
	Накладная.КурсВзаиморасчетов = Курс.Курс;
	Накладная.КратностьВзаиморасчетов = Курс.Кратность;
	
	Если Агент <> Неопределено Тогда
		Накладная.Ответственный = Агент;
	КонецЕсли;
	
	Накладная.Комментарий = "# Наполеон -" + Заказ.REMARK;
	Накладная.СтруктурнаяЕдиница = Накладная.Организация.ОсновнойБанковскийСчет;	
	
	Возврат Накладная;
КонецФункции

Функция СохранитьНакладную(накладная, Документ, СуммаДолга, НомерЗаказа)
	СуммаДолгаДок = 0;
	Если СуммаДолга > 0 Тогда
		Если СуммаДолга >= Документ.СуммаДокумента Тогда
			СуммаДолгаДок = Документ.СуммаДокумента;
		Иначе
			СуммаДолгаДок = СуммаДолга;	
		КонецЕсли;
		СуммаДолга = СуммаДолга - СуммаДолгаДок;
	КонецЕсли;
	
	Для Каждого товар из Документ.Товары Цикл
		накладная.Добавить();
		накладная.ID = Документ.Контрагент.Код;
		накладная.NUM = Документ.Номер;
		накладная.DATE = Документ.Дата;
		накладная.ID_I = товар.Номенклатура.Код;
		накладная.QTY = товар.Количество;
		накладная.SUM = товар.Сумма * Документ.КурсВзаиморасчетов;
		накладная.SUMD = СуммаДолгаДок;
		накладная.PAYDATE = Документ.Дата + Документ.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности * 24 * 3600;
		накладная.CREATED = НомерЗаказа;
		накладная.Записать();
	КонецЦикла;
	
	Возврат СуммаДолга;
КонецФункции

Процедура НастройкиПоУмолчанию() 
	ДатаКон = ТекущаяДата();
	ДатаНач = ДобавитьМесяц(ДатаКон, -2);
	
	Склады = Справочники.Склады.Выбрать();
	Если Склады.Следующий() Тогда
		СкладОстатков = Склады.Ссылка;
	КонецЕсли;
	
	ГлубинаВыгрузкиДолгов = 1;
	
	СтатьяДвижения = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000002");
	
КонецПроцедуры

Процедура ЗагрузитьНастройки()	
	//
	//текЗнач = ВосстановитьЗначение("Каталоги");
	//Если текЗнач <> Неопределено Тогда
	//	ГруппыНоментклатуры.Загрузить(текЗнач);
	//КонецЕсли;
	//
	//текЗнач = ВосстановитьЗначение("ИзменятьТипЦены");
	//Если текЗнач <> Неопределено Тогда
	//	ИзменятьТипЦены = текЗнач;
	//КонецЕсли;	
	//
	//текЗнач = ВосстановитьЗначение("ПапкаОбмена");
	//Если текЗнач <> Неопределено Тогда
	//	ПапкаОбмена = текЗнач;
	//КонецЕсли;	
	//
	//текЗнач = ВосстановитьЗначение("ГлубинаВыгрузкиДолгов");
	//Если текЗнач <> Неопределено Тогда
	//	ГлубинаВыгрузкиДолгов = текЗнач;
	//КонецЕсли;
	//
	//текЗнач = ВосстановитьЗначение("ВыгружатьДолги");
	//Если текЗнач <> Неопределено Тогда
	//	ВыгружатьДолги = текЗнач;
	//КонецЕсли;
	//
	//текЗнач = ВосстановитьЗначение("ВыгружатьТовары");
	//Если текЗнач <> Неопределено Тогда
	//	ВыгружатьТовары = текЗнач;
	//КонецЕсли;

	//текЗнач = ВосстановитьЗначение("Агенты");
	//Если текЗнач <> Неопределено Тогда
	//	Агенты.Загрузить(текЗнач);
	//КонецЕсли;

	//текЗнач = ВосстановитьЗначение("ВыгружатьКонтрагентов");
	//Если текЗнач <> Неопределено Тогда
	//	ВыгружатьКонтрагентов = текЗнач;
	//КонецЕсли;

	//текЗнач = ВосстановитьЗначение("Регионы");
	//Если текЗнач <> Неопределено Тогда
	//	Регион.Загрузить(текЗнач);
	//КонецЕсли;
    ИмяПапки = "\\IISSERVER\Napoleon_exchange\Настройки\";
	ИзменятьТипЦены = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ИзменятьТипЦены"+".1с");
	ГлубинаВыгрузкиДолгов = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ГлубинаВыгрузкиДолгов"+".1с");
	ПапкаОбмена = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ПапкаОбмена"+".1с");
	Агенты.Загрузить(ЗначениеИзФайла(ИмяПапки+"Наполеон"+"Агенты"+".1с"));
	ВыгружатьКонтрагентов = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ВыгружатьКонтрагентов"+".1с");
	ВыгружатьТовары = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ВыгружатьТовары"+".1с");
	ВыгружатьДолги = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ВыгружатьДолги"+".1с");
	ГруппыНоментклатуры.Загрузить(ЗначениеИзФайла(ИмяПапки+"Наполеон"+"Каталоги"+".1с"));
	ИзменятьТипЦены = ЗначениеИзФайла(ИмяПапки+"Наполеон"+"ИзменятьТипЦены"+".1с");
	Регион.Загрузить(ЗначениеИзФайла(ИмяПапки+"Наполеон"+"Регионы"+".1с"));

КонецПроцедуры


Процедура Настройки() Экспорт
	
	НастройкиПоУмолчанию();
	ЗагрузитьНастройки();
	Если регион.Количество()=0 Тогда
		ЗаполнитьРегионы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаОстатков() Экспорт
	ТипыЦен = Новый СписокЗначений;
	
	ТипыЦен.Добавить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"), "COST1"); //крупный опт
	
	Если ВыгружатьКонтрагентов тогда
		ВыгрузкаКонтрагентов(папкаОбмена, ТипыЦен);
	КонецЕсли;
	
	Если ВыгружатьТовары тогда
		ВыгрузкаТовара(папкаОбмена, ТипыЦен);
	КонецЕсли;	
	
	Если ВыгружатьДолги	тогда
		ВыгрузкаДолгов();
	КонецЕсли;
	
	ВыгрузкаНастроек(папкаОбмена, ТипыЦен);
	
	Сообщить("ОК");
КонецПроцедуры

Процедура ВыгрузкаДолгов() Экспорт
    Сообщить("Выгрузка отгрузок и долгов...");
	
	ДатаКон = ТекущаяДата();
	ДатаНач = ДобавитьМесяц(ДатаКон, -ГлубинаВыгрузкиДолгов);
	//Для Каждого Стр из Агенты цикл
	//	ТекстЗапроса = 
	//   "ВЫБРАТЬ
	//   |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК Долг,
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Агент,
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка
	//   |ИЗ
	//   |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	//   |ГДЕ
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо = &Агент
	//   |	И ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.РеализацияТоваровУслуг
	//   |
	//   |СГРУППИРОВАТЬ ПО
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо,
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,
	//   |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	//   |
	//   |УПОРЯДОЧИТЬ ПО
	//   |	Агент";
	//Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапроса;
	//Запрос.Параметры.Вставить("ДатаКон", ДатаКон);
	//Запрос.Параметры.Вставить("Агент", Стр.ТорговыйАгент);
	//валюта = Справочники.Валюты.НайтиПоКоду("643");
	//курс = 1;
	//
	//оплаты = Неопределено;
	//отгрузки = Неопределено;
	//ПринятыеЗаявки= Неопределено;
	//
	//текАгент = ""; 

	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если текАгент <> Выборка.Агент Тогда
	//		Если текАгент <> "" Тогда
	//			ЗакрытьОплатыОтгрузки(оплаты, отгрузки, текАгент.Код);
	//		КонецЕсли;
	//		
	//		текАгент = Выборка.Агент;
	//		оплаты = ФайлОплат(ПапкаОбмена);
	//		отгрузки = ФайлОтгрузок(ПапкаОбмена);
	//		ПринятыеЗаявки = ЗагрузитьПринятыеДокументы(СокрЛП(текАгент.Код), Ложь);
	//	КонецЕсли;
	//			
	//	суммаДолга = выборка.Долг;
	//	
	//	НомерЗаказа = Неопределено;
	//	НомерЗаказа = ПринятыеЗаявки.НайтиПоЗначению(СокрЛП(Выборка.Документ.Номер));
	//	Если Выборка.Сделка <> Неопределено и Не Выборка.Сделка.Пустая() Тогда
	//		НомерЗаказа = ПринятыеЗаявки.НайтиПоЗначению(СокрЛП(Выборка.Сделка.Номер));
	//	КонецЕсли;
	//	Если НомерЗаказа <> Неопределено Тогда
	//		НомерЗаказа = НомерЗаказа.Представление;
	//	Иначе
	//		НомерЗаказа = "";
	//	КонецЕсли;
	//	
	//	суммаДолга = СохранитьНакладную(отгрузки, Выборка.Сделка, суммаДолга, НомерЗаказа);	
	//КонецЦикла;	
	//Если текАгент <> "" Тогда
	//	ЗакрытьОплатыОтгрузки(оплаты, отгрузки, текАгент.Код);
	//КонецЕсли;

    Для Каждого Стр из Агенты цикл

	ТекстДолги = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК Долг,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ответственноеЛицо КАК Агент
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	 ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ответственноеЛицо = &Агенты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Агент";
	
	ТекстДокументы = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Владелец = &Контрагент
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = &Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Период УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстДолги;
	Запрос.Параметры.Вставить("ДатаКон", ДатаКон);
	Запрос.Параметры.Вставить("Агенты", стр.ТорговыйАгент);

	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = ТекстДокументы;
	
	валюта = Константы.ВалютаУправленческогоУчета.Получить();
	курс = ПолучитьКурсВалюты(валюта, ДатаКон);
	
	оплаты = Неопределено;
	отгрузки = Неопределено;
	ПринятыеЗаявки= Неопределено;
	
	текАгент = ""; 

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если текАгент <> Выборка.Агент Тогда
			Если текАгент <> "" Тогда
				ЗакрытьОплатыОтгрузки(оплаты, отгрузки, текАгент.Код);
			КонецЕсли;
			
			текАгент = Выборка.Агент;
			оплаты = ФайлОплат(ПапкаОбмена);
			отгрузки = ФайлОтгрузок(ПапкаОбмена);
			ПринятыеЗаявки = ЗагрузитьПринятыеДокументы(СокрЛП(текАгент.Код), Ложь);
		КонецЕсли;
				
		суммаДолга = выборка.Долг;
		
		ЗапросДокументы.Параметры.Вставить("ДатаКон", ДатаКон);
		ЗапросДокументы.Параметры.Вставить("ДатаНач", ДатаНач);
		ЗапросДокументы.Параметры.Вставить("Контрагент", Выборка.Контрагент);
		ЗапросДокументы.Параметры.Вставить("Договор", Выборка.Договор);
		ВыборкаДокументов = ЗапросДокументы.Выполнить().Выбрать();
		
		Пока ВыборкаДокументов.Следующий() Цикл
			НомерЗаказа = Неопределено;
			НомерЗаказа = ПринятыеЗаявки.НайтиПоЗначению(СокрЛП(ВыборкаДокументов.Документ.Номер));
			Если ВыборкаДокументов.Документ.Сделка <> Неопределено и Не ВыборкаДокументов.Документ.Сделка.Пустая() Тогда
				НомерЗаказа = ПринятыеЗаявки.НайтиПоЗначению(СокрЛП(ВыборкаДокументов.Документ.Сделка.Номер));
			КонецЕсли;
			Если НомерЗаказа <> Неопределено Тогда
				НомерЗаказа = НомерЗаказа.Представление;
			Иначе
				НомерЗаказа = "";
			КонецЕсли;
			
			суммаДолга = СохранитьНакладную(отгрузки, ВыборкаДокументов.Документ, суммаДолга, НомерЗаказа);	
		КонецЦикла;
		
		Если суммаДолга <> 0 Тогда
			// выгружаем начальное сальдо
			оплаты.Добавить();
			оплаты.ID = Выборка.Контрагент.Код;
			оплаты.NUM = "нач.сальдо";
			оплаты.SUM = суммаДолга;
			оплаты.DATE = ДатаНач;
			оплаты.Записать();
		КонецЕсли;
	КонецЦикла;	
	Если текАгент <> "" Тогда
		ЗакрытьОплатыОтгрузки(оплаты, отгрузки, текАгент.Код);
	КонецЕсли;
	КонецЦикла;
	Сообщить("ОК");

КонецПроцедуры

Процедура ЗакрытьФайлОбработанныхЗаявок(таблица, КодСотр)
	таблица.ЗакрытьФайл();
	имяФайла = ПапкаОбмена + "\POD" + СокрЛП(КодСотр) + ".DBF";
	темпФайл = ПапкаОбмена + "\TPOD.DBF";
	ПереместитьФайл(темпФайл, имяФайла);
КонецПроцедуры

Процедура СохранитьПринятыеДокументы(КодАгента, списокЗаявок, ТипДок = Неопределено)
	имяФайла = ПапкаОбмена + "\TPRD.DBF";
	
	ДБФ = Новый XBase();
	ДБФ.Поля.Добавить("CREATED",   "S", 20, 0);
	ДБФ.Поля.Добавить("NUMBER", "S", 20, 0);
	ДБФ.СоздатьФайл(имяФайла);
	ДБФ.Кодировка = КодировкаXBase.OEM;
	
	ДатаНач = ДобавитьМесяц(ТекущаяДата(), -ГлубинаВыгрузкиДолгов);
	нач = Формат(ДатаНач, "ДФ=""ггггММдд000000""");
	
	Для Каждого стр из списокЗаявок Цикл
		Если стр.Значение > нач Тогда
			ДБФ.Добавить();
			ДБФ.CREATED = стр.Значение;
			ДБФ.NUMBER = стр.Представление;
			ДБФ.Записать();         
		КонецЕсли;
	КонецЦикла;
	
	ДБФ.ЗакрытьФайл();
	Если ТипДок = "ПКО" Тогда
		новФайл = ПапкаОбмена + "\OKD" + КодАгента + ".DBF";
	Иначе
		новФайл = ПапкаОбмена + "\PRD" + КодАгента + ".DBF";
	КонецЕсли;
	ПереместитьФайл(имяФайла, новФайл);
КонецПроцедуры

Функция ЗагрузитьПринятыеДокументы(КодАгента, ПоЗаявкам, ТипДок = Неопределено)
	Если ТипДок = "ПКО" Тогда
		имяФайла = ПапкаОбмена + "\OKD" + КодАгента + ".DBF";
	Иначе
		имяФайла = ПапкаОбмена + "\PRD" + КодАгента + ".DBF";
	КонецЕсли;
	
	файл = Новый Файл(имяФайла);

	списокЗаявок = Новый СписокЗначений;
	
	Если файл.Существует() Тогда
		КопироватьФайл (имяФайла, ПапкаОбмена + "\TPRD.DBF");
		ДБФ = Новый XBase();
		ДБФ.ОткрытьФайл(ПапкаОбмена + "\TPRD.DBF");
		ДБФ.Кодировка = КодировкаXBase.OEM;
		
		ДБФ.Первая();
		Пока Не ДБФ.ВКонце() Цикл
			Если ПоЗаявкам Тогда
				списокЗаявок.Добавить(СокрЛП(ДБФ.CREATED), СокрЛП(ДБФ.NUMBER));
			Иначе
				списокЗаявок.Добавить(СокрЛП(ДБФ.NUMBER), СокрЛП(ДБФ.CREATED));
			КонецЕсли;
			ДБФ.Следующая();
		КонецЦикла;
		
		ДБФ.ЗакрытьФайл();
	КонецЕсли;
	
	Возврат списокЗаявок;
КонецФункции

Функция ПризнакДоговора(Договор)
	Признак = Договор.Наименование;
	поз = СтрДлина(Признак);
	Пока поз > 1 Цикл
		Если Сред(Признак, поз, 1) = ")" Тогда
			 поз2 = поз - 1;
			Пока поз2 > 1 Цикл
				Если Сред(Признак, поз2, 1) = "(" Тогда
					Признак = Сред(Признак, поз2 + 1, СтрДлина(Признак) - поз + 1);
					Возврат СокрЛП(Признак);
				КонецЕсли;
				поз2 = поз2 - 1;
			КонецЦикла;
		КонецЕсли;
		поз = поз - 1;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция НайтиДоговор(Контрагент, Грузополучатель, ПризнакСклада, ПризнакДог)
	текДоговор = Неопределено;
	
	неСмотретьГП = (Контрагент = Грузополучатель);
	Договора = Справочники.ДоговорыКонтрагентов.Выбрать(,Контрагент);
	Пока договора.Следующий() Цикл
		// предполагаем, что признак стоит только на одном договоре
		Если (неСмотретьГП или договора.КонтрагентТорговаяТочка = Грузополучатель) и 
				договора.ПризнакСклада = ПризнакСклада и
				ПризнакДоговора(договора.Ссылка) = ПризнакДог Тогда
			текДоговор = договора.Ссылка;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат текДоговор;
КонецФункции

Процедура ЗаписатьЗаявку(Накладная, Ном, ПринятыеЗаявки, ОбработанныеЗаказы)
	НомНакладной = "";

	Попытка
		Накладная.Записать();
	Исключение
	КонецПопытки;
	Попытка
		Накладная.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
	КонецПопытки;

	Если НомНакладной = "" Тогда
		НомНакладной = Накладная.Номер;
	КонецЕсли;			
	типДок = Строка(ТипЗнч(Накладная));

	Сообщить(типДок + " № " + Накладная.Номер + 
			" от " + Накладная.Дата + 
			" контрагент " + Накладная.Контрагент.Наименование);
			
	Если НомНакладной <> "" Тогда
		ОбработанныеЗаказы.Добавить();
		ОбработанныеЗаказы.CREATED = Ном;
		ОбработанныеЗаказы.Записать();

		ПринятыеЗаявки.Добавить(Ном, НомНакладной);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРегионы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		//|	АдресныйКлассификатор.Наименование ,
		//|	АдресныйКлассификатор.Сокращение,
		|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК регион
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	АдресныйКлассификатор.Наименование";
	Результат = Запрос.Выполнить();

	регион.Загрузить(Результат.Выгрузить());

		
КонецПроцедуры

Процедура ПриемЗаявок() Экспорт
	Перем Накладная, агент;
	
	Рез = НайтиФайлы(ПапкаОбмена, "ORD*.DBF");
		
	СчНакл = 0;
	
	Для Каждого файл из Рез Цикл
		имяФайла = файл.Имя;
		разделитель = Найти(ВРег(имяФайла), ".DBF");

		КодСотр = Сред(имяФайла, 4, разделитель-4);
		Агент = НайтиАгента(КодСотр);
		
		можетМенятьЦену = ИзменятьТипЦены;
		
		временныйФайл = ПапкаОбмена + "\TORD.DBF";
		ПереместитьФайл(файл.ПолноеИмя, временныйФайл);
		
		Заказ = Новый XBase(временныйФайл);
		Заказ.Кодировка = КодировкаXBase.OEM;
		ОбработанныеЗаказы = ФайлОбработанныхЗаказов(КодСотр);
		
		ЗаписатьЗаказ = 0;
		ПринятыеЗаявки = ЗагрузитьПринятыеДокументы(КодСотр, Истина);
		Ном = "";
		
		Заказ.Первая();		
		Пока Заказ.ВКонце() = 0 Цикл
			//
			// Проверим признак начала заявки
			//
			Если Заказ.ORDFLAG <> 0 Тогда
				//
				// началась новая заявка, если надо записать заявка, запишем ее.
				//
				Если ЗаписатьЗаказ = 1 Тогда
					ЗаписатьЗаявку(Накладная, Ном, ПринятыеЗаявки, ОбработанныеЗаказы);
					ЗаписатьЗаказ = 0;
				КонецЕсли;
				
				//
				// Проверим, не принимали ли мы уже эту заявку. Может быть передали одну заявку дважды
				//
				пз = ПринятыеЗаявки.НайтиПоЗначению(СокрЛП(Заказ.CREATED));
				Если пз <> Неопределено Тогда
					//
					// пропускаем этот заказ
					//
					ЗаписатьЗаказ = 0;
					Заказ.Следующая();
					Сообщить("Повторная заявка - накладная № " + пз.Представление);
					Продолжить;
				КонецЕсли;
				
				//
				// создаем новую заявку
				//
				Накладная = СоздатьЗаказ(Заказ, Агент, можетМенятьЦену);
				ЗаписатьЗаказ = 1;
				Ном = СокрЛП(Заказ.CREATED);
				СчНакл = СчНакл + 1;
			КонецЕсли;
			
			Если ЗаписатьЗаказ = 0 Тогда
				Заказ.Следующая();
				Продолжить;
			КонецЕсли;
						
			номенклатура = Справочники.Номенклатура.НайтиПоКоду(Заказ.ID_I);

			товар = Накладная.Товары.Добавить();
			товар.Номенклатура = номенклатура.Ссылка;
			//товар.Размещение = Накладная.СкладГруппа;
			
			Если ТипЗнч(Накладная) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Накладная.ПриИзмененииНоменклатурыТоваров(товар);
			Иначе
				СтрокаТабличнойЧасти = товар;
				ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Накладная,
					Накладная.ВалютаДокумента);
			КонецЕсли;
			
			коэф = товар.ЕдиницаИзмерения.Коэффициент;
			Если коэф = 0 Тогда
				коэф = 1;
			КонецЕсли;
			товар.Количество = Заказ.QTY / коэф;
			товар.Коэффициент = коэф;
			
			ЗаполнитьСтавкуНДСТабЧасти(товар, Накладная);
			РассчитатьСуммуТабЧасти(товар, Накладная);
			РассчитатьСуммуНДСТабЧасти(товар, Накладная);
			
			Заказ.Следующая();
		КонецЦикла;
		
		Если ЗаписатьЗаказ = 1 Тогда
			ЗаписатьЗаявку(Накладная, Ном, ПринятыеЗаявки, ОбработанныеЗаказы);
		КонецЕсли;
		
		СохранитьПринятыеДокументы(КодСотр, ПринятыеЗаявки);
		Заказ.ЗакрытьФайл();
		ЗакрытьФайлОбработанныхЗаявок(ОбработанныеЗаказы, КодСотр);
		
		УдалитьФайлы(временныйФайл);
	КонецЦикла;
	
	Сообщить("Всего заявок " + СчНакл);
КонецПроцедуры
