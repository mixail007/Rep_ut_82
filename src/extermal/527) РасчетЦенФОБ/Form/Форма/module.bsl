Перем СхемаКомпоновкиДанных;

//Процедура КоманднаяПанель1Обновить(Кнопка)
//	
//	Заполнить();
//	
//КонецПроцедуры

процедура Заполнить()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ Заводы
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ ПодЗаводы
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Подзаводы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ МинНагрузки
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &МинНагрузка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ МаксНагрузки
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &МаксНагрузка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Значение
	|ПОМЕСТИТЬ Цвета
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &СвойствоЦвет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|	КомплектующиеНоменклатуры.Номенклатура КАК Номенклатура,
	|	КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая
	|ПОМЕСТИТЬ Комплектующие
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|ГДЕ
	|	(КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ (&Болты) ИЛИ КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ (&Гайки))
	|	И КомплектующиеНоменклатуры.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
	|	СезонныйАссортимент.Номенклатура КАК Номенклатура,
	|	Заводы.Значение КАК Завод,
	|	ПодЗаводы.Значение КАК Подзавод,
	|	МинНагрузки.Значение КАК МинимальнодопустимаяНагрузка,
	|	МаксНагрузки.Значение КАК МаксимальнаяНагрузка,
	|	ЦенообразованиеФОБ.БазоваяЦена,
	|	ЦенообразованиеФОБ.ЦенаСоСкидкой,
	|	ЦенообразованиеФОБ.Undercut,
	|	ЦенообразованиеФОБ.Polish,
	|	ЦенообразованиеФОБ.DoudleColor,
	|	ЦенообразованиеФОБ.Stripe,
	|	ЦенообразованиеФОБ.Rivets,
	|	ЦенообразованиеФОБ.Milling,
	|	ЦенообразованиеФОБ.PlastiicInserts КАК PlasticInserts,
	|	ЦенообразованиеФОБ.SSLip,
	|	ЦенообразованиеФОБ.MaxLoadPrice,
	|	ЦенообразованиеФОБ.Width,
	|	ЦенообразованиеФОБ.ECounting,
	|	ЦенообразованиеФОБ.BigCap,
	|	ЦенообразованиеФОБ.Cup,
	|	ЦеныФОПСрезПоследних.Цена КАК ЦенаФОБ,
	|	СезонныйАссортимент.Номенклатура.Типоразмер КАК Типоразмер,
	|	СезонныйАссортимент.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СезонныйАссортимент.Номенклатура.Производитель КАК Производитель,
	|	ЦеныФОПСрезПоследних.Период КАК ДатаЦеныФоб,
	//|	ЦенообразованиеФОБ.Lug КАК Lug,    //***берем из комплектующих
	|	ЦенообразованиеФОБ.LugCount,
	|	ЦенообразованиеФОБ.РасчетнаяЦенаФОБ КАК LugCount1,
	|	ЦенообразованиеФОБ.КрепежКоличество,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК БазоваяЦенаUSD,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.Ширина КАК Ширина,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.Диаметр КАК Диаметр,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.КоличествоОтверстий КАК КоличествоОтверстий,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.PCD КАК PCD,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.Вылет КАК Вылет,
	|   СезонныйАссортимент.Номенклатура.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы,
	|	Цвета.Значение КАК Цвет,
	|	Комплектующие.Комплектующая.Код КАК LugCode,
	|	Комплектующие.Комплектующая КАК Lug
	|ИЗ
	|	РегистрСведений.СезонныйАссортимент"+?(ПоЭкспорту,"Экспорт","")+ " КАК СезонныйАссортимент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦенообразованиеФОБ КАК ЦенообразованиеФОБ
	|		ПО СезонныйАссортимент.Номенклатура = ЦенообразованиеФОБ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныФОП.СрезПоследних КАК ЦеныФОПСрезПоследних
	|		ПО СезонныйАссортимент.Номенклатура = ЦеныФОПСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Заводы КАК Заводы
	|		ПО СезонныйАссортимент.Номенклатура = Заводы.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодЗаводы КАК ПодЗаводы
	|		ПО СезонныйАссортимент.Номенклатура = ПодЗаводы.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинНагрузки КАК МинНагрузки
	|		ПО СезонныйАссортимент.Номенклатура = МинНагрузки.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксНагрузки КАК МаксНагрузки
	|		ПО СезонныйАссортимент.Номенклатура = МаксНагрузки.Объект
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &БазоваяUSD) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СезонныйАссортимент.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цвета КАК Цвета
	|		ПО СезонныйАссортимент.Номенклатура = Цвета.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Комплектующие КАК Комплектующие
	|		ПО СезонныйАссортимент.Номенклатура = Комплектующие.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Завод,
	|	СезонныйАссортимент.Номенклатура.Наименование";
	
	
	Запрос.УстановитьПараметр("Свойство",планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185"));
	Запрос.УстановитьПараметр("Подзаводы",планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90249"));
	Запрос.УстановитьПараметр("МинНагрузка",планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90250"));
	Запрос.УстановитьПараметр("МаксНагрузка",планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205"));
	Запрос.УстановитьПараметр("БазоваяUSD",Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00028"));
	Запрос.УстановитьПараметр("СвойствоЦвет", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166"));
	Запрос.УстановитьПараметр("Болты", Справочники.Номенклатура.НайтиПоКоду("0000702"));
	Запрос.УстановитьПараметр("Гайки", Справочники.Номенклатура.НайтиПоКоду("0000713"));

	Результат = Запрос.Выполнить();
	
	Товары.Загрузить(Результат.Выгрузить());
	
	Для каждого стр из Товары Цикл
		//стр.Lug = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(СтрЗаменить(стр.LugCode," ","")));
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.КрепежКоличество*стр.LugCount;	
	конецЦикла;
конецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	
КонецПроцедуры

Процедура КоманднаяПанель1Снять(Кнопка)
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЭлементыФормы.Товары.ПроверитьСтроку(СтрокаТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура КоманднаяПанель1Установить(Кнопка)
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЭлементыФормы.Товары.ПроверитьСтроку(СтрокаТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.Пометка = Истина;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура КоманднаяПанель1Инвертировать(Кнопка)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если ЭлементыФормы.Товары.ПроверитьСтроку(СтрокаТабличнойЧасти) Тогда
			Если СтрокаТабличнойЧасти.Пометка Тогда
				СтрокаТабличнойЧасти.Пометка = Ложь;
			иначе	
				СтрокаТабличнойЧасти.Пометка = Истина;
			конецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОформлениеСтроки.Ячейки.Код.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Код.Текст = ДанныеСтроки.Номенклатура.Код;
	КонецЦикла;
	
КонецПроцедуры

Процедура Пересчитать()
	Для каждого Стр Из Товары Цикл
		Если не ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
			Стр.Пометка = Ложь;
		иначе
			попытка
				количествоОтверстий = Число(стр.номенклатура.типоразмер.КоличествоОтверстий);
			исключение
				количествоотверстий =0 ;
			конецПопытки;
			
			Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
		КонецЕсли;
	КонецЦикла; 
конецпроцедуры

Процедура ТоварыЦенаСоСкидкойПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.ЦенаСоСкидкой = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе
				
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	Этаформа.Обновить();
КонецПроцедуры

Процедура ТоварыUndercutПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Undercut = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыPolishПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Polish = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыDoudleColorПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.DoudleColor = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыStripeПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Stripe = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыRivetsПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Rivets = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
    	Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыMillingПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Milling = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыPlasticInsertsПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.PlasticInserts = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыSSLipПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.SSLip = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыMaxLoadPriceПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.MaxLoadPrice = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыWidthПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Width = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыECountingПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.ECounting = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыBigCapПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.BigCap = Элемент.Значение;
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыCupПриИзменении(Элемент)
	Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.Cup = Элемент.Значение;
				
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыУстановитьЦеныФОБ(Кнопка)
	
	Для каждого Стр Из Товары Цикл
		Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
			Если стр.пометка = истина Тогда
				//предварительно запишим ценообразование
				Запись = РегистрыСведений.ЦенообразованиеФОБ.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись,стр);
				Запись.Lug = 0;
				Запись.Записать(Истина);
				
				Запись = РегистрыСведений.ЦеныФоп.СоздатьМенеджерЗаписи();
				Запись.Период = НачалоДня(ТекущаяДата());
				Запись.Номенклатура = стр.Номенклатура;
				Запись.Цена = стр.РасчетнаяЦенаФОБ;
				Запись.Записать(Истина);
				
				Запись = РегистрыСведений.ЦеныФопЭкспорт.СоздатьМенеджерЗаписи();
				Запись.Период = НачалоДня(ТекущаяДата());
				Запись.Номенклатура = стр.Номенклатура;
				Запись.Цена = стр.ЦенаФОБЭкспорт;
				Запись.Записать(Истина);
			конецЕсли;	
		конецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыLugCountПриИзменении(Элемент)
		Ответ = Вопрос("Установить это значение для всех отобранных позиций?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Стр Из Товары Цикл
			Если  ЭлементыФормы.Товары.ПроверитьСтроку(Стр) Тогда
				Стр.LugCount = Элемент.Значение;
				
				Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
			иначе		
				Стр.Пометка = Ложь;
			конецЕсли;
		КонецЦикла;
	иначе	
		стр = ЭлементыФормы.Товары.ТекущиеДанные;
		Стр.РасчетнаяЦенаФОБ = Стр.ЦенаСоСкидкой+стр.Undercut+стр.Polish+стр.DoudleColor+стр.Stripe+стр.Rivets +стр.Milling+стр.PlasticInserts+стр.SSLip+стр.MaxLoadPrice+стр.Width+стр.ECounting+стр.Cup+стр.BigCap+стр.LugCount*стр.КрепежКоличество;	
	КонецЕсли;

КонецПроцедуры

//СКД

Процедура СформироватьНажатие(Элемент)
	
    КомпоновщикНастроек = Компоновщик;//Новый КомпоновщикНастроекКомпоновкиДанных();
    //КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    //КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек.Настройки;
    		
	ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("Болты");     
	ПараметрДанных.Значение = Справочники.Номенклатура.НайтиПоКоду("0000702");
	ПараметрДанных.Использование = Истина;
	
	ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("Гайки");     
	ПараметрДанных.Значение = Справочники.Номенклатура.НайтиПоКоду("0000713");
	ПараметрДанных.Использование = Истина;
		
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

    Результат = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Товары.Загрузить(Результат);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	//было
	//	Заполнить()
	
	ЭлементыФормы.ВариантОтчета.СписокВыбора.Очистить();
	ЭлементыФормы.ВариантОтчета.СписокВыбора.Добавить(0, "Основной");
	ЭлементыФормы.ВариантОтчета.СписокВыбора.Добавить(1, "Экспорт");
	ЭлементыФормы.ВариантОтчета.СписокВыбора.Добавить(2, "По всей номеклатуре");
	ЭлементыФормы.ВариантОтчета.Значение = 0;
		
	Если ЭлементыФормы.ВариантОтчета.Значение = 0 Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
	Иначе
		СхемаКомпоновкиДанных = ПолучитьМакет("МакетЭкспорт");
	КонецЕсли;
	
	ИсточникДоступныхНастроек  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	Компоновщик.Инициализировать(ИсточникДоступныхНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

Процедура ВариантОтчетаПриИзменении(Элемент)
	
	Если ЭлементыФормы.ВариантОтчета.Значение = 0 Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
	ИначеЕсли ЭлементыФормы.ВариантОтчета.Значение = 1 Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("МакетЭкспорт");
	ИначеЕсли ЭлементыФормы.ВариантОтчета.Значение = 2 Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("МакетВсяНоменклатура");
	КонецЕсли;
	
	ИсточникДоступныхНастроек  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	
	Компоновщик.Инициализировать(ИсточникДоступныхНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
КонецПроцедуры


