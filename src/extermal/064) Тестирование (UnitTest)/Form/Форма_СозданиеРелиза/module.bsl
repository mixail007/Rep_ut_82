Перем WSH, СоответствиеФайловЭлементам;

//------------------------------------------------------------------------------------------------------------------------------
//--											Основной функционал. Начало.
//------------------------------------------------------------------------------------------------------------------------------

Функция СоздатьФайлВыгрузки()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");

	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ DESIGNER";
	СтрокаЗапуска = СтрокаЗапуска + " " + СтрЗаменить(СтрЗаменить(КаталогИсточника,";",""),"File=","/F ") + "";
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """+ИмяВременногоФайла+"""";
	
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /N """+ИмяПользователя+"""";
	КонецЕсли;
	
	Если СтрДлина(Пароль) > 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /P """+Пароль+"""";
	КонецЕсли;
	
	Попытка
		ФайлВыгрузки = Вычислить(ИмяФайлаВыгрузки);
	Исключение
		ФайлВыгрузки = ИмяФайлаВыгрузки;
	КонецПопытки;
	ИмяКаталогаБазы = ФайлВыгрузки;
	ИмяНовойБазы = ФайлВыгрузки;
	
	Источник = КаталогВыгрузкиКонфигурации + "\" + ФайлВыгрузки + ?(ВарианВыгрузки=3,".dt",".cf");
	
	Если ВарианВыгрузки = 2 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryDumpCfg """ + Источник + """ -v " + Формат(НомерВерсии,"ЧГ=0");
		
		Если ЗначениеЗаполнено(Путь) Тогда
			СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryF """+Путь+"""";
		КонецЕсли;
		
		Если СтрДлина(ИмяПользователяВХранилище) > 0 Тогда
			СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryN """+ИмяПользователяВХранилище+"""";
		КонецЕсли;
		
		Если СтрДлина(ПарольВХранилище) > 0 Тогда
			СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryP """+ПарольВХранилище+"""";
		КонецЕсли;
	
	ИначеЕсли ВарианВыгрузки = 1 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /DumpDBCfg """ + Источник + """";
	ИначеЕсли ВарианВыгрузки = 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /DumpCfg """ + Источник + """";
	ИначеЕсли ВарианВыгрузки = 3 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /DumpIB """ + СтрЗаменить(Источник,".cf",".dt") + """";
	Иначе
		Предупреждение("Не выбран вариант выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	
	ДобавитьЛог(ИмяВременногоФайла);
	
	Возврат Истина;

КонецФункции // СоздатьФайлВыгрузки()

Функция СоздатьОтчет()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");

	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ DESIGNER";
	СтрокаЗапуска = СтрокаЗапуска + " " + СтрЗаменить(СтрЗаменить(КаталогИсточника,";",""),"File=","/F ") + "";
	
	Если ЗначениеЗаполнено(ИмяПользователя) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /N """+ИмяПользователя+"""";
	КонецЕсли;
	
	Если СтрДлина(Пароль) > 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /P """+Пароль+"""";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Путь) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryF """+Путь+"""";
	КонецЕсли;
	
	Если СтрДлина(ИмяПользователяВХранилище) > 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryN """+ИмяПользователяВХранилище+"""";
	КонецЕсли;
	
	Если СтрДлина(ПарольВХранилище) > 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryP """+ПарольВХранилище+"""";
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + " /ConfigurationRepositoryReport """+ ИмяФайлаОтчета + """";
	
	Если НачальныйНомерВерсии > 0 Тогда
		СтрокаЗапуска = СтрокаЗапуска + " -NBegin " + Формат(НачальныйНомерВерсии,"ЧГ=0");
	Иначе
		СтрокаЗапуска = СтрокаЗапуска + " -NBegin 1";
	КонецЕсли;
	
	Если КонечныйНомерВерсии > НачальныйНомерВерсии Тогда
		СтрокаЗапуска = СтрокаЗапуска + " -NEnd " + Формат(КонечныйНомерВерсии,"ЧГ=0");
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска + " -GroupByObject";
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """+ИмяВременногоФайла+"""";
			
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	ДобавитьЛог(ИмяВременногоФайла);
	
	Возврат Истина;

КонецФункции // СоздатьОтчет()

Функция СоздатьБазуДанных()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	Попытка
		ИмяБазы = Вычислить(ИмяКаталогаБазы);
	Исключение
		ИмяБазы = ИмяКаталогаБазы;
	КонецПопытки;
	
    БазаДляСозданияПользователей = КаталогБаз1С + "\" + ИмяБазы;
	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ CREATEINFOBASE";
	СтрокаЗапуска = СтрокаЗапуска + " File=""" + КаталогБаз1С + "\" + ИмяБазы + """;";
	СтрокаЗапуска = СтрокаЗапуска + " /UseTemplate """ + Источник + """";
	
	Если РегистрироватьНовуюБазу Тогда
		Попытка
			лИмяНовойБазы = Вычислить(ИмяНовойБазы);
		Исключение
			лИмяНовойБазы = ИмяНовойБазы;
		КонецПопытки;
		Если ПустаяСтрока(ИмяНовойБазы) Тогда
			лИмяНовойБазы = ИмяБазы;
		КонецЕсли; 
		СтрокаЗапуска = СтрокаЗапуска + " /AddInList  """ + лИмяНовойБазы+"""";
	КонецЕсли;
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """ + ИмяВременногоФайла + """";
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	ДобавитьЛог(ИмяВременногоФайла);
	Возврат Истина;

КонецФункции // СоздатьБазуДанных()

Функция ВыгрузитьМодули()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");

	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ DESIGNER";
	СтрокаЗапуска = СтрокаЗапуска + " /F """ + БазаДляСозданияПользователей + """";
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """ + ИмяВременногоФайла + """";
	СтрокаЗапуска = СтрокаЗапуска + " /DumpConfigFiles """+БазаДляСозданияПользователей + "\ExtTxt"" -Module -AllWritable";
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	ДобавитьЛог(ИмяВременногоФайла);
	Возврат Истина;

КонецФункции // ВыгрузитьМодули()

Функция ЗагрузитьМодули()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ DESIGNER";
	СтрокаЗапуска = СтрокаЗапуска + " /F """ + БазаДляСозданияПользователей + """";
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """+ИмяВременногоФайла+"""";
	СтрокаЗапуска = СтрокаЗапуска + " /LoadConfigFiles """ + БазаДляСозданияПользователей + "\ExtTxt"" -Module -AllWritable";
	СтрокаЗапуска = СтрокаЗапуска + " /UpdateDBCfg";
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВременногоФайла);
	Лог = Текст.ПолучитьТекст();
	Сообщить(Лог);
	Возврат Истина;

КонецФункции // ЗагрузитьМодули()

Функция ОбновитьБазу()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаЗапуска = """" + ИмяФайлаПриложения1С + """ DESIGNER";
	СтрокаЗапуска = СтрокаЗапуска + " /F """ + БазаДляСозданияПользователей + """";
	СтрокаЗапуска = СтрокаЗапуска + " /OUT """+ИмяВременногоФайла+"""";
	СтрокаЗапуска = СтрокаЗапуска + " /UpdateDBCfg";
	Сообщить(СтрокаЗапуска);
	ЗапуститьПриложение(СтрокаЗапуска,,Истина);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВременногоФайла);
	Лог = Текст.ПолучитьТекст();
	Сообщить(Лог);
	Возврат Истина;

КонецФункции // ЗагрузитьМодули()

Функция ОбработатьМодули()

	ПрефиксКаталог = БазаДляСозданияПользователей + "\ExtTxt\";
	Для Каждого С ИЗ СписокОбработки Цикл
		Файл = ПрефиксКаталог + С.Имя;
		Параметры = С.Параметры;
		Попытка
			Выполнить(Алгоритм);
			СообщениеШага("Обработан файл: " + Файл);
		Исключение
			СообщениеШага("Не обработан файл: " + Файл + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // ОбработатьМодули()

Процедура ДобавитьРоли(Соединение, Роли, Строка)

	Если Строка.Вхождение Тогда
		Для Каждого Элемент Из Строка.Права Цикл
			РезультатПоиска = Соединение.Метаданные.Роли.Найти(Элемент.Значение);
			Если РезультатПоиска <> Неопределено Тогда
				Роли.Добавить(РезультатПоиска);
			Иначе
				Сообщить("Роль: " + Элемент.Значение + " не найдена.");
			КонецЕсли;
		КонецЦикла;	
	Иначе
		Для Каждого Роль Из Соединение.Метаданные.Роли Цикл
			РезультатПоиска = Строка.Права.НайтиПоЗначению(Роль.Имя);
			Если РезультатПоиска = Неопределено Тогда
				Роли.Добавить(Роль);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ДобавитьРоли()

Процедура СоздатьПользователя(Соединение, Строка)

	Пользователь = Соединение.ПользователиИнформационнойБазы.СоздатьПользователя();
	Пользователь.Имя = Строка.Имя;
	Пользователь.ПолноеИмя = Строка.ПолноеИмя;
	
	
	Если Не ПустаяСтрока(Строка.Интерфейс) Тогда
		Пользователь.ОсновнойИнтерфейс = Соединение.Метаданные.Интерфейсы.Найти(Строка.Интерфейс);
	КонецЕсли;
			
	ДобавитьРоли(Соединение, Пользователь.Roles, Строка);
	
	Если СтрДлина(Строка.Пароль) > 0 Тогда
		Пользователь.Password = Строка.Пароль;
	КонецЕсли;
		
	Попытка
		Пользователь.Write();
		СообщениеШага("Добавлен пользователь: " + Строка.Имя);
	Исключение
		СообщениеШага("Не удалось создать пользователя: " + Строка.Имя);
	КонецПопытки;	

КонецПроцедуры // СоздатьПользователя()

Функция СоздатьПользователей()

	Попытка
		Коннектор = Новый COMОбъект("V82.COMConnector");
		Соединение = Коннектор.Connect("File=""" + БазаДляСозданияПользователей + """;");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого Строка Из Пользователи Цикл 
		СоздатьПользователя(Соединение, Строка);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СоздатьПользователей()

//------------------------------------------------------------------------------------------------------------------------------
//--											Основной функционал. Конец.
//------------------------------------------------------------------------------------------------------------------------------

Функция НайтиПриложения1С(Список = Неопределено)
	Если Список = Неопределено Тогда
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Файл = Новый Файл(WSH.ExpandEnvironmentStrings("%ProgramFiles%")+"\1cv82");
	Файлы = НайтиФайлы(Файл.ПолноеИмя, "1cv8.exe", Истина);
	Для Каждого Файл Из Файлы Цикл
		Список.Добавить(Файл.ПолноеИмя, Файл.Путь);
	КонецЦикла;
	
	Возврат Список;
КонецФункции

Функция ПолучитьИзСтруктуры(Структура, Свойство, ЗначениеПоУмолчанию)
	Результат = Неопределено;
	Если Структура.Свойство(Свойство, Результат) Тогда  
		Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
			Для каждого Колонка Из ЗначениеПоУмолчанию.Колонки Цикл
			    ИскомаяКолонка = Результат.Колонки.Найти(Колонка.Имя);
				Если ИскомаяКолонка = Неопределено Тогда
					Результат.Колонки.Добавить(Колонка.Имя,Колонка.Тип, Колонка.Заголовок, Колонка.Ширина);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
КонецФункции

Процедура ВосстановитьЗначения()
	
	Файл = Новый Файл(WSH.ExpandEnvironmentStrings("%AppData%") + "\1C\Тестирование.prm");
	Если Не Файл.Существует() Тогда Возврат; КонецЕсли;
	Структура = ЗначениеИзФайла(Файл.ПолноеИмя);
	ВарианВыгрузки = ПолучитьИзСтруктуры(Структура, "ВарианВыгрузки", ВарианВыгрузки);
	ИмяКаталогаБазы = ПолучитьИзСтруктуры(Структура, "ИмяКаталогаБазы", ИмяКаталогаБазы);
	ИмяПользователя = ПолучитьИзСтруктуры(Структура, "ИмяПользователя", ИмяПользователя);
	ИмяПользователяВХранилище = ПолучитьИзСтруктуры(Структура, "ИмяПользователяВХранилище", ИмяПользователяВХранилище);
	ИмяФайлаВыгрузки = ПолучитьИзСтруктуры(Структура, "ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
	ИмяФайлаПриложения1С = ПолучитьИзСтруктуры(Структура, "ИмяФайлаПриложения1С", ИмяФайлаПриложения1С);
	КаталогБаз1С = ПолучитьИзСтруктуры(Структура, "КаталогБаз1С", КаталогБаз1С);
	КаталогВыгрузкиКонфигурации = ПолучитьИзСтруктуры(Структура, "КаталогВыгрузкиКонфигурации", КаталогВыгрузкиКонфигурации);
	КаталогИсточника = ПолучитьИзСтруктуры(Структура, "КаталогИсточника", КаталогИсточника);
	Обработка = ПолучитьИзСтруктуры(Структура, "Обработка", Обработка);
	Пароль = ПолучитьИзСтруктуры(Структура, "Пароль", Пароль);
	ПарольВХранилище = ПолучитьИзСтруктуры(Структура, "ПарольВХранилище", ПарольВХранилище);
	Подстановка = ПолучитьИзСтруктуры(Структура, "Подстановка", Подстановка);
	Пользователи = ПолучитьИзСтруктуры(Структура, "Пользователи", Пользователи);
	Путь = ПолучитьИзСтруктуры(Структура, "Путь", Путь);
	СписокОбрабатываемыхФайлов = ПолучитьИзСтруктуры(Структура, "СписокОбрабатываемыхФайлов", СписокОбрабатываемыхФайлов);
	СоздаватьОтчет = ПолучитьИзСтруктуры(Структура, "СоздаватьОтчет", СоздаватьОтчет);
	БазаДляСозданияПользователей = ПолучитьИзСтруктуры(Структура, "БазаДляСозданияПользователей", БазаДляСозданияПользователей);
	Источник = ПолучитьИзСтруктуры(Структура, "Источник", Источник);
	СписокОбработки = ПолучитьИзСтруктуры(Структура, "СписокОбработки", СписокОбработки);
	РегистрироватьНовуюБазу = ПолучитьИзСтруктуры(Структура, "РегистрироватьНовуюБазу", РегистрироватьНовуюБазу);
	ИмяНовойБазы = ПолучитьИзСтруктуры(Структура, "ИмяНовойБазы", ИмяНовойБазы);

КонецПроцедуры

Процедура СохранитьЗначения()
	Файл = Новый Файл(WSH.ExpandEnvironmentStrings("%AppData%") + "\1C\Тестирование.prm");
	Структура = Новый Структура;
	Структура.Вставить("Алгоритм", Алгоритм);
	Структура.Вставить("ВарианВыгрузки", ВарианВыгрузки);
	Структура.Вставить("ИмяКаталогаБазы", ИмяКаталогаБазы);
	Структура.Вставить("ИмяПользователя", ИмяПользователя);
	Структура.Вставить("ИмяПользователяВХранилище", ИмяПользователяВХранилище);
	Структура.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
	Структура.Вставить("ИмяФайлаПриложения1С", ИмяФайлаПриложения1С);
	Структура.Вставить("КаталогБаз1С", КаталогБаз1С);
	Структура.Вставить("КаталогВыгрузкиКонфигурации", КаталогВыгрузкиКонфигурации);
	Структура.Вставить("КаталогИсточника", КаталогИсточника);
	Структура.Вставить("ОбрабатыватьМодули", Обработка);
	Структура.Вставить("Пароль", Пароль);
	Структура.Вставить("ПарольВХранилище", ПарольВХранилище);
	Структура.Вставить("Подстановка", Подстановка);
	Структура.Вставить("Пользователи", Пользователи);
	Структура.Вставить("Путь", Путь);
	Структура.Вставить("СписокОбработки", СписокОбработки);
	Структура.Вставить("БазаДляСозданияПользователей", БазаДляСозданияПользователей);
	Структура.Вставить("Источник", Источник);
	Структура.Вставить("СоздаватьОтчет", СоздаватьОтчет);
	Структура.Вставить("РегистрироватьНовуюБазу", РегистрироватьНовуюБазу);
	Структура.Вставить("ИмяНовойБазы", ИмяНовойБазы);
	ЗначениеВФайл(Файл.ПолноеИмя, Структура);
КонецПроцедуры

Процедура КоманднаяПанель3Добавить(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3Копировать(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3Изменить(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3Удалить(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3Вниз(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель3Вверх(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель2ОбработкаМодулей(Кнопка)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Форма_РедактированияМодулей");
	Форма.ВладелецФормы = ЭтаФорма;
	Форма.Открыть();
КонецПроцедуры

Процедура Выполнение(Начать = Истина)

	ЭлементыФормы.СоздатьРелиз.Видимость = Не Начать;
	ЭлементыФормы.Индикатор1.Видимость = Начать;
	Если Начать Тогда
		Индикатор1 = 0;
		ОчиститьСообщения();
		ЭлементыФормы.Лог.Очистить();
		ЭлементыФормы.Индикатор1.МаксимальноеЗначение = 
		1 + ?(Выгрузка,1,0) +
		?(СоздаватьОтчет И ВарианВыгрузки=2,1,0) +
		?(Создание,1,0)+
		?(Обработка,1,0) * СписокОбработки.Количество() + ?(Обработка,3,0) +
		?(ДобавлениеПользователей,1,0) * Пользователи.Количество();
		ЭлементыФормы.Лог.ДобавитьСтроку("Начало " + Формат(ТекущаяДата(),"ДФ='dd MMMM yyyy'"));
	Иначе
		ЭлементыФормы.Лог.ДобавитьСтроку("Конец " + ТекущаяДата());
	КонецЕсли; 

КонецПроцедуры

Процедура СообщениеШага(Текст)
	ЭлементыФормы.Лог.ДобавитьСтроку(Формат(ТекущаяДата(), "ДФ=HH:mm:ss: ")  + Текст);
	Индикатор1 = Индикатор1 + 1;
КонецПроцедуры

Процедура ДобавитьЛог(ИмяФайла)
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла);
	ЭлементыФормы.Лог.ДобавитьСтроку(Текст.ПолучитьТекст());
КонецПроцедуры


//------------------------------------------------------------------------------------------------------------------------------
//--											Интерфейс. Начало.
//------------------------------------------------------------------------------------------------------------------------------

Процедура ОткрытьПуть(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
КонецПроцедуры

Процедура ПарольОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.Значение;
	СтандартнаяОбработка = Ложь;
	Элемент.КнопкаОчистки = Истина;
	Элемент.КнопкаОткрытия = Ложь;
	Элемент.РежимПароля = Ложь;
	Элемент.Значение = Значение;
КонецПроцедуры

Процедура ПарольОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Значение = Элемент.Значение;
	СтандартнаяОбработка = Истина;
	Элемент.КнопкаОчистки = Ложь;
	Элемент.КнопкаОткрытия = Истина;
	Элемент.РежимПароля = Истина;
	Элемент.Значение = Значение;
КонецПроцедуры

Процедура СобытиеВыборКаталога(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Элемент.Значение;
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.Каталог;
	КонецЕсли;
КонецПроцедуры

Процедура СобытиеВыборФайла(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = СоответствиеФайловЭлементам[Элемент];
	Диалог.Каталог = ?(ПустаяСтрока(КаталогВыгрузкиКонфигурации), КаталогВременныхФайлов(), КаталогВыгрузкиКонфигурации);
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

Процедура КонфигурацияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Панель.Страницы.Хранилище.Видимость = ВарианВыгрузки = 2 И Выгрузка;
	Панель.Страницы.Выгрузка.Видимость = Выгрузка;
	Панель.Страницы.Создание.Видимость = Создание;
	Панель.Страницы.Обработка.Видимость = Обработка;
	Панель.Страницы.Пользователи.Видимость = ДобавлениеПользователей;
	ЭлементыФормы.НадписьИсточник.Видимость = (Не Выгрузка) И Создание;
	ЭлементыФормы.Источник.Видимость = (Не Выгрузка) И Создание;
	ЭлементыФормы.НадписьБазаДляСозданияПользователей.Видимость = (Не Создание) И (ДобавлениеПользователей ИЛИ Обработка);
	ЭлементыФормы.БазаДляСозданияПользователей.Видимость = (Не Создание) И (ДобавлениеПользователей ИЛИ Обработка);
	ЭлементыФормы.ОтчетПоХранилищу.Видимость = СоздаватьОтчет;
	ЭлементыФормы.КоманднаяПанель3.Доступность = ЭлементыФормы.ПараметрыОбработки.ТекущаяСтрока <> Неопределено;

	ЭлементыФормы.СоздатьРелиз.Видимость = Выгрузка ИЛИ Создание ИЛИ ДобавлениеПользователей ИЛИ Обработка;
	
	
	ЭлементыФормы.Надпись3.Видимость = РегистрироватьНовуюБазу;
	ЭлементыФормы.ИмяНовойБазы.Видимость = РегистрироватьНовуюБазу;
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(ИмяФайлаПриложения1С) Тогда
		Предупреждение("Не заполнен файла приложения 1С!");
		Возврат;
	Конецесли;
	Файл = Новый Файл(ИмяФайлаПриложения1С);
	Если Не Файл.Существует() Тогда
		Предупреждение("Файла приложения 1С """ + ИмяФайлаПриложения1С + """ - не существует!");
		Возврат;
	КонецЕсли;
	Выполнение();
	Если Выгрузка Тогда 
		СообщениеШага("Начало создания выгрузки");
		Если Не СоздатьФайлВыгрузки() Тогда Возврат; КонецЕсли;
		Если СоздаватьОтчет И ВарианВыгрузки = 2 Тогда
			СообщениеШага("Начало создания отчета");
			Если Не СоздатьОтчет() Тогда Возврат; КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Создание Тогда
		СообщениеШага("Начало создания БД");
		Если Не СоздатьБазуДанных() Тогда Возврат; КонецЕсли;
	КонецЕсли;
	Если Обработка Тогда
		СообщениеШага("Начало выгрузки модулей");
		Если Не ВыгрузитьМодули() Тогда Возврат; КонецЕсли;
		СообщениеШага("Начало обработки модулей");
		Если Не ОбработатьМодули() Тогда Возврат; КонецЕсли;
		СообщениеШага("Начало загрузки модулей");
		Если Не ЗагрузитьМодули() Тогда Возврат; КонецЕсли;
		СообщениеШага("Начало обновления");
		Если Не ОбновитьБазу() Тогда Возврат; КонецЕсли;
	КонецЕсли;
	Если ДобавлениеПользователей Тогда
		СообщениеШага("Начало создания пользователей");
		Если Не СоздатьПользователей() Тогда Возврат; КонецЕсли;
	КонецЕсли;
	
	Выполнение(Ложь);
КонецПроцедуры

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	НомерВерсии = -1;
	НачальныйНомерВерсии = -1;
	КонечныйНомерВерсии = -1;
	WSH=Новый COMobject("wscript.shell");
	НайтиПриложения1С(ЭлементыФормы.ИмяФайлаПриложения1С.СписокВыбора);
    Текст = Новый ТекстовыйДокумент;
	Имя = "";
	Подключение = "";
	Файл = Новый Файл(WSH.ExpandEnvironmentStrings("%AppData%") + "\1C\1CEStart\ibases.v8i");
	Если Файл.Существует() Тогда
		Текст.Прочитать(Файл.ПолноеИмя);
		Для ит = 0 По Текст.КоличествоСтрок() Цикл
			Строка = СокрЛП(Текст.ПолучитьСтроку(ит));
			Перфикс = Лев(Строка,1);
			Если Перфикс = "[" Тогда
				Если Не ПустаяСтрока(Подключение) Тогда
					ЭлементыФормы.КаталогИсточника.СписокВыбора.Добавить(Подключение, Имя);
				КонецЕсли;
				Имя = Сред(Строка,2,СтрДлина(Строка) - 2);
				Подключение = "";
			Иначе
				Р = Найти(Строка, "=");
				Если Р > 0 Тогда
					Перфикс = Лев(Строка, Р-1);
					Если Перфикс = "Connect" Тогда
						Подключение = Сред(Строка,9);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не ПустаяСтрока(Подключение) Тогда
			ЭлементыФормы.КаталогИсточника.СписокВыбора.Добавить(Подключение, Имя);
		КонецЕсли;
	Иначе
		Предупреждение("Файла " + Файл.ПолноеИмя + " не существует!");
	КонецЕсли;                                                                   
	ЭлементыФормы.ИмяФайлаВыгрузки.СписокВыбора.Добавить("Формат(ТекущаяДата(),""ДФ=yyyy-MM-ddTHHmmss"")","Дата и время создания (2011-01-01Т000000)");
	ЭлементыФормы.ИмяКаталогаБазы.СписокВыбора.Добавить("Формат(ТекущаяДата(),""ДФ=yyyy-MM-ddTHHmmss"")","Дата и время создания (2011-01-01Т000000)");
	ЭлементыФормы.ИмяКаталогаБазы.СписокВыбора.Добавить("Источник");
	ЭлементыФормы.ИмяНовойБазы.СписокВыбора.Добавить("Формат(ТекущаяДата(),""ДФ=yyyy-MM-ddTHHmmss"")","Дата и время создания (2011-01-01Т000000)");
	ЭлементыФормы.ИмяНовойБазы.СписокВыбора.Добавить("Источник");
	ЭлементыФормы.ИмяНовойБазы.СписокВыбора.Добавить("ИмяБазы");
	Попытка
		ВосстановитьЗначения();
	Исключение КонецПопытки;
	КонфигурацияПриИзменении(Неопределено);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СохранитьЗначения();
КонецПроцедуры

//------------------------------------------------------------------------------------------------------------------------------
//--											Интерфейс. Конец.
//------------------------------------------------------------------------------------------------------------------------------

СоответствиеФайловЭлементам = Новый Соответствие;
СоответствиеФайловЭлементам.Вставить(ЭлементыФормы.СписокОбработки.Колонки.Имя, "Текстовые файлы|*.txt");
СоответствиеФайловЭлементам.Вставить(ЭлементыФормы.ИмяФайлаОтчета, "Текстовые файлы|*.txt");
СоответствиеФайловЭлементам.Вставить(ЭлементыФормы.Источник, "Файл конфигурации|*.cf|Архив|*.dt|Все источники|*.dt, *.cf");