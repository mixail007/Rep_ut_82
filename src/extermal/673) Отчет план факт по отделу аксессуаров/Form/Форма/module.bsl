 перем МотивацияОтДругих;
 перем СписокМенеджеров;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДеревоПланированияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Если ЗначениеЗаполнено(Родитель) Тогда
		Если Родитель.Уровень() = 0 Тогда
		Иначе
			Отказ=Истина;
			НовСтрока = Родитель.Родитель.Строки.Добавить();
			ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = НовСтрока;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура МенюПланаДобавитьМенеджера(Кнопка)
	ТекущийЭлемент = ЭлементыФормы.ДеревоПланирования;
	НовСтрока = дДеревоПланирования.Строки.Добавить();
	ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = НовСтрока;
КонецПроцедуры

Процедура ДеревоПланированияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ОформлениеСтроки.ДанныеСтроки.Родитель = неопределено Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет();
			
		Для Инд = 0 по ((ОформлениеСтроки.Ячейки.Количество()-3)/5)-1 Цикл
			Если Инд = 0 Тогда
				ОформлениеСтроки.Ячейки.Начислено.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.Менеджер.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ДЗ.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ПДЗ.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ПроцентВыполнено.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.СуммаФакт.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.СуммаПлан.Видимость = Ложь;
			Иначе
				ОформлениеСтроки.Ячейки["Начислено"+""+Инд+""].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["ПроцентВыполнено"+""+Инд+""].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["СуммаФакт"+""+Инд+""].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["СуммаПлан"+""+Инд+""].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет(168, 255, 177);
		
		Для Инд = 0 по ((ОформлениеСтроки.Ячейки.Количество()-3)/5)-1 Цикл
			Если Инд = 0 Тогда
				ОформлениеСтроки.Ячейки.ПараметрЭффективности.Видимость = Ложь;
				ОформлениеСтроки.Ячейки.Иерархия.Видимость = Ложь;
			Иначе
				ОформлениеСтроки.Ячейки["ПараметрЭффективности"+""+Инд+""].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
КонецПроцедуры

Процедура МенюПланаДобавитьНовыйПараметр(Кнопка)
	
	Для Счт = дДеревоПланирования.Колонки.Количество()-5 по дДеревоПланирования.Колонки.Количество()-1 Цикл
		
		НовыйНомерКолонки = НайтиЧислаВСтроке(дДеревоПланирования.Колонки[Счт].Имя);
		
		Если НовыйНомерКолонки <> "1" Тогда
			БазовоеИмя = СтрЗаменить(дДеревоПланирования.Колонки[Счт].Имя, Строка(Число(НовыйНомерКолонки)-1), "");
		Иначе
			БазовоеИмя = дДеревоПланирования.Колонки[Счт].Имя;
		КонецЕсли;
		
		НовКолонка = дДеревоПланирования.Колонки.Добавить(,дДеревоПланирования.Колонки[Счт].ТипЗначения);
		ЗаполнитьЗначенияСвойств(НовКолонка, дДеревоПланирования.Колонки[Счт],,"Имя"); 
		НовКолонка.Имя = БазовоеИмя+НовыйНомерКолонки; 
		
	КонецЦикла;	
	
	Для Счт = ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-5 по ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-1 Цикл
		
		НовыйНомерКолонки = НайтиЧислаВСтроке(ЭлементыФормы.ДеревоПланирования.Колонки[Счт].Имя);
		
		Если НовыйНомерКолонки <> "1" Тогда
			БазовоеИмя = СтрЗаменить(ЭлементыФормы.ДеревоПланирования.Колонки[Счт].Имя, Строка(Число(НовыйНомерКолонки)-1), "");
		Иначе
			БазовоеИмя = ЭлементыФормы.ДеревоПланирования.Колонки[Счт].Имя;
		КонецЕсли;
		
		НовКолонка = ЭлементыФормы.ДеревоПланирования.Колонки.Добавить();
		ЗаполнитьЗначенияСвойств(НовКолонка, ЭлементыФормы.ДеревоПланирования.Колонки[Счт],,"Имя"); 
		
		НовКолонка.Имя = БазовоеИмя+НовыйНомерКолонки;
				
		Если ЭлементыФормы.ДеревоПланирования.Колонки[Счт].Данные <> "" Тогда
			НовКолонка.Данные = БазовоеИмя+НовыйНомерКолонки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЧислаВСтроке(ИмяКолонки) 
	
	СтрокаЧисел = "";
	
	Для Индекс = 1 По СтрДлина(ИмяКолонки) Цикл
		
		Символ = Сред(ИмяКолонки, Индекс, 1); // Перебираем все сиволы из нашей строки
		
		Если КодСимвола(ИмяКолонки) >= 48 И КодСимвола(Символ) <= 57 Тогда // Код нуля - 48, код 9-ки - 57
			СтрокаЧисел = СтрокаЧисел + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаЧисел <> "" Тогда 
		Возврат Строка(Число(СтрокаЧисел)+1);
	Иначе
		Возврат "1";
	КонецЕсли;
	
КонецФункции

Процедура НачалоПериодаПриИзменении(Элемент)
	Если ПолугодовоеПланирование Тогда
		Если Месяц(НачалоПериода)<>1 и  Месяц(НачалоПериода)<>7 Тогда
			Сообщить("Выберите начало полугодия!");
			НачалоПериода= Дата(1,1,1);
			КонецПериода= Дата(1,1,1);
		иначе
			НачалоПериода = НачалоМесяца(началоПериода);
			конецПериода = КонецМесяца(ДобавитьМесяц(НачалоПериода,6)-1);
		конецЕсли;
	Иначе
		НачалоПериода = НачалоМесяца(началоПериода);
		конецПериода = КонецМесяца(НачалоПериода);
	КонецЕсли;
КонецПроцедуры

Процедура МенюПланаУдалитьПараметр(Кнопка)
	Если ЭлементыФормы.ДеревоПланирования.Колонки.Количество() = 8 Тогда
	Иначе
		Для счт=1 по 5 Цикл
			дДеревоПланирования.Колонки.Удалить(ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-1);
			ЭлементыФормы.ДеревоПланирования.Колонки.Удалить(ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-1);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПолугодовоеПланированиеПриИзменении(Элемент)
	НачалоПериодаПриИзменении(Элемент);
КонецПроцедуры

Функция ПроверитьДату(Ошибка = ложь)
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		Возврат Ошибка;
	Иначе
		Предупреждение("Нужно заполнить дату!");
		Ошибка = Истина;
		Возврат Ошибка;
	КонецЕсли;
КонецФункции

Процедура МенюПланаЗаполнить(Кнопка)
	Если ПроверитьДату() Тогда
		Возврат;
	КонецЕсли;
	
	//Очищаем дерево
	дДеревоПланирования.Строки.Очистить();
	Если ЭлементыФормы.ДеревоПланирования.Колонки.Количество() = 9 Тогда
	Иначе
		Для счт=1 по ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-9 Цикл
			дДеревоПланирования.Колонки.Удалить(ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-1);
			ЭлементыФормы.ДеревоПланирования.Колонки.Удалить(ЭлементыФормы.ДеревоПланирования.Колонки.Количество()-1);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого строкаМотивации из МотивацияОтДругих Цикл
		строкаМотивации.СуммаФакт = Новый Структура;
		строкаМотивации.СуммаПлан = Новый Структура;
	КонецЦикла;
	
	
	ЗапросМенеджеров = Новый Запрос;
	ЗапросМенеджеров.Текст = 
	"ВЫБРАТЬ
	|	ПланОтделаАксессуаров.Менеджер
	|ИЗ
	|	РегистрСведений.ПланОтделаАксессуаров КАК ПланОтделаАксессуаров
	|ГДЕ
	|	ПланОтделаАксессуаров.ПериодПланирования = &ПериодПланирования
	|	И ПланОтделаАксессуаров.Полугодовой = &Полугодовой
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОтделаАксессуаров.Менеджер";
	ЗапросМенеджеров.УстановитьПараметр("ПериодПланирования", НачалоПериода);
	ЗапросМенеджеров.УстановитьПараметр("Полугодовой", ПолугодовоеПланирование);

	СписокМенеджеров = Новый Массив;
	
	Для каждого строкаМотивации из МотивацияОтДругих Цикл
		Если глТекущийПользователь = строкаМотивации.ГлавныйМенеджер Тогда
			СписокМенеджеров = строкаМотивации.ПодчиненныйМенеджер;
			СписокМенеджеров.Добавить(строкаМотивации.ГлавныйМенеджер);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокМенеджеров.Количество() > 0 Тогда
	ИначеЕсли ЗначениеЗаполнено(Менеджер) Тогда
		СписокМенеджеров.Добавить(Менеджер);
	Иначе
		СписокМенеджеров = ЗапросМенеджеров.Выполнить().Выгрузить().ВыгрузитьКолонку("Менеджер");
	КонецЕсли;
	
	ЗапросПлана = Новый Запрос;
	ЗапросПлана.Текст = 
	"ВЫБРАТЬ
	|	СУММА(-ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрОборот) КАК СуммаУпрОборот,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В (&СписокНаправлений)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = &КТ
	|						ТОГДА &Головное
	|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение
	|				КОНЕЦ
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|	КОНЕЦ КАК ОтветственноеЛицо,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Сделка.Дата >= &ПериодПланирования
	|				ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Сделка = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = &Кт
	|						ТОГДА &Федунов
	|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|				КОНЕЦ
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец
	|	КОНЕЦ КАК Контрагент
	|ПОМЕСТИТЬ Факт
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	|			&ПериодПланирования,
	|			&ДатаДЗ_ПДЗ,
	|			Регистратор,
	|			ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениевзаиморасчетовПоДоговорам.ПоЗаказам)
	|				И ДоговорКонтрагента.ОтветственноеЛицо В (&СписокМенеджеров)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	(ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|			ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ОплатаОтПокупателяПлатежнойКартой
	|			ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.Взаимозачет
	|				И ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.УчитыватьДляРасчетаПремии = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж В (&СписокНаправлений)
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = &КТ
	|						ТОГДА &Головное
	|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение
	|				КОНЕЦ
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Сделка.Дата >= &ПериодПланирования
	|				ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Сделка = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение = &Кт
	|						ТОГДА &Федунов
	|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|				КОНЕЦ
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланДвиженийДенежныхСредств.Исполнитель,
	|	СУММА(Факт.СуммаУпрОборот) КАК СуммаФакт
	|ПОМЕСТИТЬ ИтогФакт
	|ИЗ
	|	РегистрСведений.ПланДвиженийДенежныхСредств КАК ПланДвиженийДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Факт КАК Факт
	|		ПО ПланДвиженийДенежныхСредств.Контрагент = Факт.Контрагент
	|			И (ВЫБОР
	|				КОГДА ПланДвиженийДенежныхСредств.Исполнитель.НаправлениеПродаж В (&СписокНаправлений)
	|					ТОГДА ПланДвиженийДенежныхСредств.Подразделение = Факт.ОтветственноеЛицо
	|				ИНАЧЕ ПланДвиженийДенежныхСредств.Исполнитель = Факт.ОтветственноеЛицо
	|			КОНЕЦ)
	|ГДЕ
	|	ПланДвиженийДенежныхСредств.МесяцПланирования = &ПериодПланирования
	|	И ПланДвиженийДенежныхСредств.ПриходРасход = &ПриходРасход
	|	И ПланДвиженийДенежныхСредств.АктивностьЗаписи = ИСТИНА
	|	И 88 = 88
	|	И ПланДвиженийДенежныхСредств.Исполнитель.НаправлениеПродаж <> ЗНАЧЕНИЕ(Справочник.НаправленияПродаж.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланДвиженийДенежныхСредств.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиОбороты.ДоговорКонтрагента.ОтветственноеЛицо,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.ДоговорКонтрагента.Владелец) КАК Значение
	|ПОМЕСТИТЬ ПриростПоТТ
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&ПериодПланирования,
	|			&ДатаДЗ_ПДЗ,
	|			,
	|			ДоговорКонтрагента.ОтветственноеЛицо В (&СписокМенеджеров)
	|				И Номенклатура.НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)) КАК ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК ДебиторскаяЗадолженность,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
	|					И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|				ТОГДА ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, &ДатаДЗ_ПДЗ, ДЕНЬ) > 0
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &ДатаДЗ_ПДЗ
	|										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПросроченнаяДебиторскаяЗадолженность,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо
	|ПОМЕСТИТЬ ДЗ_ПДЗ
	|{ВЫБРАТЬ
	|	ДебиторскаяЗадолженность,
	|	ПросроченнаяДебиторскаяЗадолженность}
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДЗ_ПДЗ, ДоговорКонтрагента.ОтветственноеЛицо В (&СписокМенеджеров)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаДЗ_ПДЗ, ДоговорКонтрагента.ОтветственноеЛицо В (&СписокМенеджеров)) КАК ВзаиморасчетыСКонтрагентамиОстатки1
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки1.ДоговорКонтрагента
	|			И (ВзаиморасчетыСКонтрагентамиОстатки1.СуммаВзаиморасчетовОстаток > 0)
	|{ГДЕ
	|	(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Поле1,
	|	(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, &МинДата, ДЕНЬ) > 0
	|							ТОГДА ВЫБОР
	|									КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &МинДата
	|										ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Поле2}
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Менеджер КАК Менеджер,
	|	ВложенныйЗапрос.СуммаПлан,
	|	ВложенныйЗапрос.ПроцентДляНачислений,
	|	ВложенныйЗапрос.ПроцентМаксБонус,
	|	ВложенныйЗапрос.МаксБонусСуммой,
	|	ВложенныйЗапрос.СуммаПродажОбщая,
	|	ВложенныйЗапрос.СуммаНоменклатура,
	|	ВложенныйЗапрос.СуммаНоменклатурнаяГруппа,
	|	ВложенныйЗапрос.СуммаПроизводитель,
	|	ВложенныйЗапрос.НомерБлока КАК НомерБлока,
	|	ВложенныйЗапрос.НомерСтрокиВБлоке КАК НомерСтрокиВБлоке,
	|	ДЗ_ПДЗ.ДебиторскаяЗадолженность КАК ДебиторскаяЗадолженность,
	|	ДЗ_ПДЗ.ПросроченнаяДебиторскаяЗадолженность КАК ПросроченнаяДебиторскаяЗадолженность,
	|	ВложенныйЗапрос.НомерПараметра КАК НомерПараметра,
	|	ВложенныйЗапрос.ПараметрЭффективности,
	|	ПриростПоТТ.Значение КАК КоличествоКлиенты,
	|	ИтогФакт.СуммаФакт КАК ПоступлениеДенег
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланОтделаАксессуаров.Менеджер КАК Менеджер,
	|		ПланОтделаАксессуаров.СуммаПлан КАК СуммаПлан,
	|		ПланОтделаАксессуаров.ПроцентДляНачислений КАК ПроцентДляНачислений,
	|		ПланОтделаАксессуаров.ПроцентМаксБонус КАК ПроцентМаксБонус,
	|		ПланОтделаАксессуаров.МаксБонусСуммой КАК МаксБонусСуммой,
	|		СУММА(ПродажиОбороты.СтоимостьОборот) КАК СуммаПродажОбщая,
	|		СУММА(ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПланОтделаАксессуаров.ПараметрЭффективности) = ТИП(Справочник.Номенклатура)
	|					ТОГДА ВЫБОР
	|							КОГДА ПродажиОбороты.Номенклатура = ПланОтделаАксессуаров.ПараметрЭффективности
	|								ТОГДА ПродажиОбороты.СтоимостьОборот
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНоменклатура,
	|		СУММА(ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПланОтделаАксессуаров.ПараметрЭффективности) = ТИП(Справочник.НоменклатурныеГруппы)
	|					ТОГДА ВЫБОР
	|							КОГДА ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа = ПланОтделаАксессуаров.ПараметрЭффективности
	|								ТОГДА ПродажиОбороты.СтоимостьОборот
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаНоменклатурнаяГруппа,
	|		СУММА(ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПланОтделаАксессуаров.ПараметрЭффективности) = ТИП(Справочник.Производители)
	|					ТОГДА ВЫБОР
	|							КОГДА ПродажиОбороты.Номенклатура.Производитель = ПланОтделаАксессуаров.ПараметрЭффективности
	|								ТОГДА ПродажиОбороты.СтоимостьОборот
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаПроизводитель,
	|		ПланОтделаАксессуаров.НомерБлока КАК НомерБлока,
	|		ПланОтделаАксессуаров.НомерСтрокиВБлоке КАК НомерСтрокиВБлоке,
	|		ПланОтделаАксессуаров.НомерПараметра КАК НомерПараметра,
	|		ПланОтделаАксессуаров.ПараметрЭффективности КАК ПараметрЭффективности
	|	ИЗ
	|		РегистрСведений.ПланОтделаАксессуаров КАК ПланОтделаАксессуаров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|					&ПериодПланирования,
	|					&ДатаДЗ_ПДЗ,
	|					Период,
	|					ДоговорКонтрагента.ОтветственноеЛицо В (&СписокМенеджеров)
	|						И Номенклатура.НоменклатурнаяГруппа В ИЕРАРХИИ (&НоменклатурнаяГруппа)) КАК ПродажиОбороты
	|			ПО ПланОтделаАксессуаров.Менеджер = ПродажиОбороты.ДоговорКонтрагента.ОтветственноеЛицо
	|	ГДЕ
	|		ПланОтделаАксессуаров.ПериодПланирования = &ПериодПланирования
	|		И ПланОтделаАксессуаров.Полугодовой = &Полугодовой
	|		И ПланОтделаАксессуаров.Менеджер В(&СписокМенеджеров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланОтделаАксессуаров.Менеджер,
	|		ПланОтделаАксессуаров.СуммаПлан,
	|		ПланОтделаАксессуаров.ПроцентДляНачислений,
	|		ПланОтделаАксессуаров.ПроцентМаксБонус,
	|		ПланОтделаАксессуаров.МаксБонусСуммой,
	|		ПланОтделаАксессуаров.НомерБлока,
	|		ПланОтделаАксессуаров.НомерСтрокиВБлоке,
	|		ПланОтделаАксессуаров.НомерПараметра,
	|		ПланОтделаАксессуаров.ПараметрЭффективности) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДЗ_ПДЗ КАК ДЗ_ПДЗ
	|		ПО ВложенныйЗапрос.Менеджер = ДЗ_ПДЗ.ДоговорКонтрагентаОтветственноеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриростПоТТ КАК ПриростПоТТ
	|		ПО ВложенныйЗапрос.Менеджер = ПриростПоТТ.ДоговорКонтрагентаОтветственноеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогФакт КАК ИтогФакт
	|		ПО ВложенныйЗапрос.Менеджер = ИтогФакт.Исполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерБлока,
	|	НомерСтрокиВБлоке,
	|	НомерПараметра
	|ИТОГИ
	|	МАКСИМУМ(Менеджер),
	|	МАКСИМУМ(ДебиторскаяЗадолженность),
	|	МАКСИМУМ(ПросроченнаяДебиторскаяЗадолженность)
	|ПО
	|	НомерБлока,
	|	НомерСтрокиВБлоке";
	ЗапросПлана.УстановитьПараметр("ПериодПланирования", НачалоПериода);
	ЗапросПлана.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	ЗапросПлана.УстановитьПараметр("Полугодовой", ПолугодовоеПланирование);
	ЗапросПлана.УстановитьПараметр("СписокМенеджеров", СписокМенеджеров);
	ЗапросПлана.УстановитьПараметр("НоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.НайтиПоКоду("Ф0070"));
	
	//
	ЗапросПлана.УстановитьПараметр("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Приход);
	ЗапросПлана.УстановитьПараметр("КТ",Справочники.Подразделения.НайтиПоКоду("00139"));
	ЗапросПлана.УстановитьПараметр("Головное",Справочники.Подразделения.НайтиПоКоду("00005"));
	ЗапросПлана.УстановитьПараметр("Федунов",Справочники.Пользователи.НайтиПоКоду("Федунов"));
	
	СписокНаправлений = Новый СписокЗначений;
	СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("16"));
	СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("4"));
	СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("5"));
	СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("6"));
	ЗапросПлана.УстановитьПараметр("СписокНаправлений",СписокНаправлений);
	НаправлениеПродаж = Справочники.НаправленияПродаж.НайтиПоКоду("27");
	Если не РольДоступна("ПолныеПрава") или ЗначениеЗаполнено(НаправлениеПродаж)  Тогда
		Если ЗначениеЗаполнено(НаправлениеПродаж) Тогда
			СписокНаправлениеПродаж = Новый СписокЗначений;
			СписокНаправлениеПродаж.Добавить(НаправлениеПродаж);
		иначе
			ЗапросНП = Новый Запрос;
			ЗапросНП.Текст = 
			"ВЫБРАТЬ
			|	НаправленияПродаж.Ссылка
			|ИЗ
			|	Справочник.НаправленияПродаж КАК НаправленияПродаж
			|ГДЕ
			|	НаправленияПродаж.ОтветственныйЗаПланирование = &ОтветственныйЗаПланирование";
			
			ЗапросНП.УстановитьПараметр("ОтветственныйЗаПланирование", глТекущийПользователь);
			
			РезультатНП = ЗапросНП.Выполнить().Выгрузить();
			
			СписокНаправлениеПродаж = РезультатНП.ВыгрузитьКолонку("Ссылка");
		конецЕсли;
		ЗапросПлана.Текст = СтрЗаменить(ЗапросПлана.Текст, "88 = 88","ПланДвиженийДенежныхСредств.Исполнитель.НаправлениеПродаж В(&НаправленияПродаж)");
		ЗапросПлана.УстановитьПараметр("НаправленияПродаж",СписокНаправлениеПродаж);
	конецЕсли;	
	//
	
	Если ТекущаяДата() > КонецПериода Тогда     
		ЗапросПлана.УстановитьПараметр("ДатаДЗ_ПДЗ", КонецДня(КонецПериода));
	Иначе
		ЗапросПлана.УстановитьПараметр("ДатаДЗ_ПДЗ", КонецДня(ТекущаяДата()));
	КонецЕсли;
	
	//Если Менеджер <> Справочники.Пользователи.ПустаяСсылка() Тогда
	//	ЗапросПлана.Текст = СтрЗаменить(ЗапросПлана.Текст, "99 = 99", "ПланОтделаАксессуаров.Менеджер = &Менеджер");
	//	ЗапросПлана.УстановитьПараметр("Менеджер", Менеджер);
	//КонецЕсли;
	
	РезультатЗапроса = ЗапросПлана.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если РезультатЗапроса.Строки.Количество() > 0 Тогда
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого УровеньБлок из РезультатЗапроса.Строки Цикл
		
		НовБлок = дДеревоПланирования.Строки.Добавить();
		
		Для каждого УровеньСтрока из УровеньБлок.Строки Цикл
			
			НовСтрока = НовБлок.Строки.Добавить();
			НовСтрока.Менеджер = УровеньСтрока.Менеджер;
			НовСтрока.ДЗ = УровеньСтрока.ДебиторскаяЗадолженность;
			НовСтрока.ПДЗ = УровеньСтрока.ПросроченнаяДебиторскаяЗадолженность;
			
			
			
			счт = 0;
			Для каждого УровеньПараметр из УровеньСтрока.Строки Цикл
				
				инд = счт;
				Если инд = 0 Тогда
					инд = "";
				КонецЕсли;
				
				СуммаФактДляПоказателя = 0;
				
				Если ТипЗнч(УровеньПараметр.ПараметрЭффективности) = Тип("СправочникСсылка.Номенклатура") и ЗначениеЗаполнено(УровеньПараметр.СуммаНоменклатура) Тогда
					СуммаФактДляПоказателя = УровеньПараметр.СуммаНоменклатура;
				ИначеЕсли ТипЗнч(УровеньПараметр.ПараметрЭффективности) = Тип("СправочникСсылка.НоменклатурныеГруппы") и ЗначениеЗаполнено(УровеньПараметр.СуммаНоменклатурнаяГруппа) Тогда
					СуммаФактДляПоказателя = УровеньПараметр.СуммаНоменклатурнаяГруппа;
				ИначеЕсли ТипЗнч(УровеньПараметр.ПараметрЭффективности) = Тип("СправочникСсылка.Производители") и ЗначениеЗаполнено(УровеньПараметр.СуммаПроизводитель) Тогда
					СуммаФактДляПоказателя = УровеньПараметр.СуммаПроизводитель;
				ИначеЕсли ТипЗнч(УровеньПараметр.ПараметрЭффективности) = Тип("СправочникСсылка.ПоказателиЭффективности") Тогда
					
					Если УровеньПараметр.ПараметрЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000002") и ЗначениеЗаполнено(УровеньПараметр.СуммаПродажОбщая) Тогда //ОбщаяСумма
						СуммаФактДляПоказателя = УровеньПараметр.СуммаПродажОбщая;
					ИначеЕсли УровеньПараметр.ПараметрЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000029") и ЗначениеЗаполнено(УровеньПараметр.КоличествоКлиенты) Тогда //Клиенты кол-во
						СуммаФактДляПоказателя = УровеньПараметр.КоличествоКлиенты;
					ИначеЕсли УровеньПараметр.ПараметрЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000030") и ЗначениеЗаполнено(УровеньПараметр.ПросроченнаяДебиторскаяЗадолженность) Тогда //ПДЗ
						СуммаФактДляПоказателя = УровеньПараметр.ПросроченнаяДебиторскаяЗадолженность;
					ИначеЕсли УровеньПараметр.ПараметрЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000042") и ЗначениеЗаполнено(УровеньПараметр.ДебиторскаяЗадолженность) Тогда //ДЗ
						СуммаФактДляПоказателя = УровеньПараметр.ДебиторскаяЗадолженность;
					ИначеЕсли УровеньПараметр.ПараметрЭффективности = Справочники.ПоказателиЭффективности.НайтиПоКоду("000000044") и ЗначениеЗаполнено(УровеньПараметр.ПоступлениеДенег) Тогда //Поступление Денег
						СуммаФактДляПоказателя = УровеньПараметр.ПоступлениеДенег;
					Иначе
					КонецЕсли;
					     
				Иначе
					
				КонецЕсли;
				
				Если дДеревоПланирования.Колонки.Найти("ПараметрЭффективности"+""+Инд+"") = неопределено Тогда
					МенюПланаДобавитьНовыйПараметр(Кнопка);
				КонецЕсли;
				
				Если УровеньПараметр.СуммаПлан = 0 Тогда
					НовБлок["ПараметрЭффективности"+""+Инд+""] = УровеньПараметр.ПараметрЭффективности;
					счт = счт+1;
					
					Для каждого строкаМотивации из МотивацияОтДругих Цикл
						Если строкаМотивации.ГлавныйМенеджер = НовСтрока.Менеджер Тогда
							Если строкаМотивации.СуммаФакт.Свойство("СуммаФакт"+""+Инд+"") Тогда
								НовСтрока["СуммаФакт"+""+Инд+""] = строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""];
							КонецЕсли;
							Если строкаМотивации.СуммаПлан.Свойство("СуммаПлан"+""+Инд+"") Тогда
								НовСтрока["СуммаПлан"+""+Инд+""] = строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""];
							КонецЕсли;
							
							НовСтрока["ПроцентВыполнено"+""+Инд+""] = ?(строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""]>0,(строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""]/строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""])*100,0);
							
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
				КонецЕсли;
				
				НовБлок["ПараметрЭффективности"+""+Инд+""] = УровеньПараметр.ПараметрЭффективности;
				НовСтрока["СуммаФакт"+""+Инд+""] = СуммаФактДляПоказателя;
				НовСтрока["СуммаПлан"+""+Инд+""] = УровеньПараметр.СуммаПлан;
				НовСтрока["ПроцентВыполнено"+""+Инд+""] = ?(СуммаФактДляПоказателя>0,(СуммаФактДляПоказателя/УровеньПараметр.СуммаПлан)*100,0);
				Если НовСтрока["ПроцентВыполнено"+""+Инд+""]>=УровеньПараметр.ПроцентДляНачислений Тогда
					
					Если УровеньПараметр.МаксБонусСуммой Тогда
						НовСтрока["Начислено"+""+Инд+""] = УровеньПараметр.ПроцентМаксБонус;
					Иначе
						НовСтрока["Начислено"+""+Инд+""] = НовСтрока["СуммаФакт"+""+Инд+""]*(УровеньПараметр.ПроцентМаксБонус/100);
					КонецЕсли;
					
				КонецЕсли;
				
				Для каждого строкаМотивации из МотивацияОтДругих Цикл
					
					Если строкаМотивации.ПодчиненныйМенеджер.Найти(НовСтрока.Менеджер) <> неопределено Тогда
						Если строкаМотивации.СуммаФакт.Свойство("СуммаФакт"+""+Инд+"") Тогда
							строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""] = строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""] + НовСтрока["СуммаФакт"+""+Инд+""];
						Иначе
							строкаМотивации.СуммаФакт.Вставить("СуммаФакт"+""+Инд+"", НовСтрока["СуммаФакт"+""+Инд+""]);
						КонецЕсли;
						
						Если строкаМотивации.СуммаПлан.Свойство("СуммаПлан"+""+Инд+"") Тогда
							строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""] = строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""] + НовСтрока["СуммаПлан"+""+Инд+""];
						Иначе
							строкаМотивации.СуммаПлан.Вставить("СуммаПлан"+""+Инд+"", НовСтрока["СуммаПлан"+""+Инд+""]);
						КонецЕсли;
					ИначеЕсли строкаМотивации.ГлавныйМенеджер = НовСтрока.Менеджер Тогда                                                          //
						Если строкаМотивации.СуммаФакт.Свойство("СуммаФакт"+""+Инд+"") Тогда
							НовСтрока["СуммаФакт"+""+Инд+""] = строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""];
						КонецЕсли;
						Если строкаМотивации.СуммаПлан.Свойство("СуммаПлан"+""+Инд+"") Тогда
							НовСтрока["СуммаПлан"+""+Инд+""] = строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""];
						КонецЕсли;
						НовСтрока["ПроцентВыполнено"+""+Инд+""] = ?(строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""]>0,(строкаМотивации.СуммаФакт["СуммаФакт"+""+Инд+""]/строкаМотивации.СуммаПлан["СуммаПлан"+""+Инд+""])*100,0);
					Иначе
					КонецЕсли;
				КонецЦикла; 
				
			счт = счт+1;	
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого строка из ЭлементыФормы.ДеревоПланирования.Значение.Строки Цикл
		
		ЭлементыФормы.ДеревоПланирования.Развернуть(строка);
		
	КонецЦикла;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДеревоПланирования;	
	ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = НовСтрока;
КонецПроцедуры

Процедура ПриОткрытии()
	Если глТекущийПользователь = Справочники.НаправленияПродаж.НайтиПоКоду("27").Руководитель или РольДоступна("ПравоЗавершенияРаботыПользователей")  Тогда
		ЭтаФорма.ЭлементыФормы.Менеджер.Доступность = Истина;
	ИначеЕсли глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Захаров Валерий") Тогда
		
	Иначе
		Менеджер = глТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

//Соответстиве менеджеров чья мотивация зависит от других менеджеров
МотивацияОтДругих = Новый ТаблицаЗначений;

МотивацияОтДругих.Колонки.Добавить("ГлавныйМенеджер",,"ГлавныйМенеджер");
МотивацияОтДругих.Колонки.Добавить("ПодчиненныйМенеджер",,"ПодчиненныйМенеджер");
МотивацияОтДругих.Колонки.Добавить("СуммаПлан",,"СуммаПлан");
МотивацияОтДругих.Колонки.Добавить("СуммаФакт",,"СуммаФакт");

//Добавление
СписокМенеджеров = Новый Массив;
СписокМенеджеров.Добавить(Справочники.Пользователи.НайтиПоКоду("Сафаров Рамиль"));
СписокМенеджеров.Добавить(Справочники.Пользователи.НайтиПоКоду("Горохов Сергей"));
СписокМенеджеров.Добавить(Справочники.Пользователи.НайтиПоКоду("Попова В."));

НовоеСоответствие = МотивацияОтДругих.Добавить();
НовоеСоответствие.ГлавныйМенеджер = Справочники.Пользователи.НайтиПоКоду("Захаров Валерий");
НовоеСоответствие.ПодчиненныйМенеджер = СписокМенеджеров;
//Конец добавления
