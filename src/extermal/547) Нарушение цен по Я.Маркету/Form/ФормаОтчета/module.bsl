Перем УдалятьВременныеФайлы;
Перем НастройкиПредложенияПоМоделям;
перем WinHttp;
Перем УЗ;
Перем СписокРегионов;

Процедура ПодготовитьЗаголовокHTTP(Заголовок)
	Заголовок.Вставить("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
	Заголовок.Вставить("Content-Type", "application/xml");
	Заголовок.Вставить("Accept-Language", "ru");
	Заголовок.Вставить("Accept-Charset", "utf-8");
	Заголовок.Вставить("Content-Language", "ru");
	Заголовок.Вставить("Content-Charset", "utf-8");
КонецПроцедуры

Функция ПолучитьСтруктуруОтветаПоТексту(ТекстОтвета)
	СтруктураОтвета = новый Структура("ЛимитРесурса,ЛимитОбнуляется,ОстатокЛимита","","","");
	
	ТекстДок = новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстОтвета);
	ВсегоСтрок = ТекстДок.КоличествоСтрок();
	
	к=0;
	пока к<=ВсегоСтрок цикл
		стр = ТекстДок.ПолучитьСтроку(к);
		Если Найти(стр,"X-RateLimit-Resource-Limit:")>0 тогда
			СтруктураОтвета.ЛимитРесурса = СокрЛП(стрЗаменить(стр,"X-RateLimit-Resource-Limit:",""));
		ИначеЕсли Найти(стр,"X-RateLimit-Resource-Until:")>0 тогда
			СтруктураОтвета.ЛимитОбнуляется = СокрЛП(стрЗаменить(стр,"X-RateLimit-Resource-Until:",""));
		ИначеЕсли Найти(стр,"X-RateLimit-Resource-Remaining:")>0 тогда
			СтруктураОтвета.ОстатокЛимита = СокрЛП(стрЗаменить(стр,"X-RateLimit-Resource-Remaining:",""));	
		КонецЕсли;	
		к=к+1;
	КонецЦикла;
	 Возврат СтруктураОтвета;
КонецФункции

Процедура кнОбновитьКампанииНажатие(Элемент)
	//Сервер = "api.partner.market.yandex.ru";
	////Запрос кампаний
	//Ресурс = "/v2/campaigns";
	//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	//ЗаголовокHTTP = Новый Соответствие();
	//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
	//
	//ОтветHTTP=HTTP.Получить(Ресурс, ФайлРезультата, ЗаголовокHTTP);
	//ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
	//		", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
	//		", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";

	//структура http://api.yandex.ru/market/partner/doc/dg/reference/get-campaigns.xml
	
	Попытка
		WinHttp.Open("GET","https://api.partner.market.yandex.ru/v2/campaigns",0);
		WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
		WinHttp.setRequestHeader("Content-Type","application/xml");    
		WinHttp.SetRequestHeader("Accept-Language", "ru");
		WinHttp.SetRequestHeader("Accept-Charset","utf-8");
		WinHttp.setRequestHeader("Content-Language", "ru"); 
		WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
		WinHttp.Send();
		
		Ответ = WinHttp.ResponseText();
		
		Если WinHttp.status <>200 тогда
			ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);
		КонецЕсли;
		
		ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
		СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
		
		ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";

		
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		СписокКампаний=новый СписокЗначений;
		тз=новый ТаблицаЗначений;
		тз.Колонки.Добавить("domain");
		тз.Колонки.Добавить("id");
		тз.Колонки.Добавить("state");
		
		ФайлXML = Новый ЧтениеXML;
		ФайлXML.ОткрытьФайл(ФайлРезультата);
		//ФайлXML.ОткрытьФайл("C:\1c\tt.xml");
		Запись=новый Структура("domain,id,state");
		
		Пока ФайлXML.Прочитать() Цикл
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ФайлXML.Имя="campaign" тогда
					Запись.domain="";
					Запись.id="";
					Запись.state="";
					Пока ФайлXML.ПрочитатьАтрибут() Цикл
						Если  ФайлXML.Имя="domain" тогда
							Запись.domain=ФайлXML.Значение;
						ИначеЕсли ФайлXML.Имя="id" тогда
							Запись.id=ФайлXML.Значение;
						ИначеЕсли ФайлXML.Имя="state" тогда
							Запись.state=ФайлXML.Значение;
						КонецЕсли
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;    
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="campaign" Тогда
				стр=ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(стр,Запись);
				СписокКампаний.Добавить(Запись.id,Запись.domain);
			КонецЕсли;    
		КонецЦикла;
		ФайлXML.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Кампании=тз;
	ЭлементыФормы.Кампании.СоздатьКолонки();
	ЭлементыФормы.СписокКампаний.СписокВыбора=СписокКампаний;
	ЗаполнитьСписокРегионов();
	//ЗаполнитьСписокРегионовДляАвтоматическогоМониторинга();
	Если УдалятьВременныеФайлы тогда
		УдалитьФайлы(ФайлРезультата);
	КонецЕсли;	
КонецПроцедуры

Процедура кнПолучитьПредложенияНажатие(Элемент)
	ТоварныеПредложения.Очистить();
	Если СокрЛП(ЭлементыФормы.СписокКампаний.Значение)<>"" тогда
		Сервер = "api.partner.market.yandex.ru";
		//Запрос Товарные предложения кампании
		Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/offers.xml?pageSize=1000&matched=1";
		
		//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		//ЗаголовокHTTP = Новый Соответствие();
		//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
		ВсегоСтраниц=0;
		Попытка
			
			//ОтветHTTP=HTTP.Получить(Ресурс, ФайлРезультата, ЗаголовокHTTP);
			//httpЗапрос=новый httpЗапрос(ресурс,ЗаголовокHTTP);
			//ОтветHTTP=HTTP.Получить(httpЗапрос,ФайлРезультата);
			
			//
			//ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
			//", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
			//", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";
			
			WinHttp.Open("GET","https://api.partner.market.yandex.ru"+Ресурс,0);
			
			//WinHttp.Option(9,80);
			
			WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
			
			WinHttp.setRequestHeader("Content-Type","application/xml");    
			
			WinHttp.SetRequestHeader("Accept-Language", "ru");
			
			WinHttp.SetRequestHeader("Accept-Charset","utf-8");
			
			WinHttp.setRequestHeader("Content-Language", "ru"); 
			
			WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
			
			WinHttp.Send();
			
			Ответ = WinHttp.ResponseText();
			
			ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
			СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
			
			ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
			
			
			Текст = новый ТекстовыйДокумент;
			Текст.ДобавитьСтроку(Ответ);
			Текст.Записать(ФайлРезультата,"UTF-8 ");
			
			тз=новый ТаблицаЗначений;
			тз.Колонки.Добавить("name",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(220)));
			тз.Колонки.Добавить("id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
			тз.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			тз.Колонки.Добавить("НоменклатураКод",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(7)));
			тз.Колонки.Добавить("model_id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
			тз.Колонки.Добавить("price",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Колонки.Добавить("currency",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
			тз.Колонки.Добавить("bid",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Колонки.Добавить("cbid",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Очистить();
			
			ФайлXML = Новый ЧтениеXML;
			ФайлXML.ОткрытьФайл(ФайлРезультата);
			//ФайлXML.ОткрытьФайл("C:\1c\tt.xml");
			
			Запись=новый Структура("name,id,model_id,price,currency,bid,cbid");
			
			Пока ФайлXML.Прочитать() Цикл
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ФайлXML.Имя="pager" тогда
						ВсегоСтраниц=Число(ФайлXML.ПолучитьАтрибут("pages-count"));
					иначеЕсли ФайлXML.Имя="offer" тогда
						Запись.id=ФайлXML.ПолучитьАтрибут("id");
						Запись.model_id=ФайлXML.ПолучитьАтрибут("model-id");
						Запись.price=ФайлXML.ПолучитьАтрибут("price");
						Запись.currency=ФайлXML.ПолучитьАтрибут("currency");
						Запись.bid=ФайлXML.ПолучитьАтрибут("bid");
						Запись.cbid=ФайлXML.ПолучитьАтрибут("cbid");
					иначеЕсли ФайлXML.Имя="name"  тогда
						ФайлXML.Прочитать();
						Запись.name=ФайлXML.Значение;
					КонецЕсли;
				КонецЕсли;    
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="offer" Тогда
					Если Найти(Запись.id,"LA")=0 тогда
						стр=ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(стр,Запись);
					КонецЕсли;
				КонецЕсли;    
			КонецЦикла;    
			ФайлXML.Закрыть();
			Для КолСтраниц=2 по ВсегоСтраниц цикл
				Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/offers.xml?pageSize=1000&matched=1&page="+КолСтраниц;
				//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
				//ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
				//ЗаголовокHTTP = Новый Соответствие();
				//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
				WinHttp.Open("GET","https://api.partner.market.yandex.ru"+Ресурс,0);
				
				//WinHttp.Option(9,80);
				
				WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
				
				WinHttp.setRequestHeader("Content-Type","application/xml");    
				
				WinHttp.SetRequestHeader("Accept-Language", "ru");
				
				WinHttp.SetRequestHeader("Accept-Charset","utf-8");
				
				WinHttp.setRequestHeader("Content-Language", "ru"); 
				
				WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
				
				//WinHttp.Send();
				//
				//Ответ = WinHttp.ResponseText();
				//
				//Текст = новый ТекстовыйДокумент;
				//Текст.ДобавитьСтроку(Ответ);
				//Текст.Записать(ФайлРезультата,"UTF-8 ");
				
				Попытка
					//ОтветHTTP=HTTP.Получить(Ресурс, ФайлРезультата, ЗаголовокHTTP);
					WinHttp.Send();
					
					Ответ = WinHttp.ResponseText();
					
					Текст = новый ТекстовыйДокумент;
					Текст.ДобавитьСтроку(Ответ);
					Текст.Записать(ФайлРезультата,"UTF-8 ");
					
					Если WinHttp.status <>200 тогда
						ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);
					КонецЕсли;
					
					ФайлXML = Новый ЧтениеXML;
					ФайлXML.ОткрытьФайл(ФайлРезультата);
					Пока ФайлXML.Прочитать() Цикл
						Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Если ФайлXML.Имя="pager" тогда
								ВсегоСтраниц=Число(ФайлXML.ПолучитьАтрибут("pages-count"));
							иначеЕсли ФайлXML.Имя="offer" тогда
								Запись.id=ФайлXML.ПолучитьАтрибут("id");
								Запись.model_id=ФайлXML.ПолучитьАтрибут("model-id");
								Запись.price=ФайлXML.ПолучитьАтрибут("price");
								Запись.currency=ФайлXML.ПолучитьАтрибут("currency");
								Запись.bid=ФайлXML.ПолучитьАтрибут("bid");
								Запись.cbid=ФайлXML.ПолучитьАтрибут("cbid");
							иначеЕсли ФайлXML.Имя="name"  тогда
								ФайлXML.Прочитать();
								Запись.name=ФайлXML.Значение;
							КонецЕсли;
						КонецЕсли;    
						
						Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="offer" Тогда
							Если Найти(Запись.id,"LA")=0 тогда
								стр=ТЗ.Добавить();
								ЗаполнитьЗначенияСвойств(стр,Запись);
							КонецЕсли;
						КонецЕсли;    
					КонецЦикла;    
					ФайлXML.Закрыть();
					Если УдалятьВременныеФайлы тогда
						УдалитьФайлы(ФайлРезультата);
					КонецЕсли;
				Исключение
					Текст=Новый текстовыйДокумент;
					Текст.Прочитать(ФайлРезультата);
					Сообщить("Произошла ошибка.");
					Сообщить(Текст.ПолучитьТекст());
					
					Если УдалятьВременныеФайлы тогда
						УдалитьФайлы(ФайлРезультата);
					КонецЕсли;

				КонецПопытки;
				
			КонецЦикла;

			Запрос=новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			             |	вт.name,
			             |	вт.id,
			             |	вт.Номенклатура,
			             |	вт.model_id,
			             |	вт.price,
			             |	вт.currency,
			             |	вт.bid,
			             |	вт.cbid
			             |ПОМЕСТИТЬ втТаблица
			             |ИЗ
			             |	&вт КАК вт
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	втТаблица.name,
			             |	втТаблица.id,
			             |	втТаблица.Номенклатура,
			             |	втТаблица.model_id,
			             |	втТаблица.price,
			             |	втТаблица.currency,
			             |	втТаблица.bid,
			             |	втТаблица.cbid
			             |ПОМЕСТИТЬ втТаблица2
			             |ИЗ
			             |	втТаблица КАК втТаблица
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	СпрНоменклатура.Ссылка КАК Номенклатура,
			             |	втТаблица2.name,
			             |	втТаблица2.id,
			             |	втТаблица2.model_id,
			             |	втТаблица2.price,
			             |	втТаблица2.currency,
			             |	втТаблица2.bid,
			             |	втТаблица2.cbid
			             |ИЗ
			             |	втТаблица2 КАК втТаблица2
			             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			             |		ПО втТаблица2.id = СпрНоменклатура.Код";
			Запрос.УстановитьПараметр("вт",тз);
			тз=Запрос.Выполнить().Выгрузить();
			ТоварныеПредложения=тз;
			ЭлементыФормы.ТоварныеПредложения.СоздатьКолонки();
			ЭлементыФормы.ТоварныеПредложения.Колонки.name.Ширина=50;
			//ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
			//", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
			//", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";
			
			ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
			СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
			
			ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
		Исключение
			Текст=Новый текстовыйДокумент;
			Текст.Прочитать(ФайлРезультата);
			Сообщить("Произошла ошибка.");
			Сообщить(Текст.ПолучитьТекст());
		КонецПопытки;
		
	Иначе
		Предупреждение("Не выбран магазин.");
	КонецЕсли;
	
КонецПроцедуры

Процедура кнОбновитьРекомендованныеНажатие(Элемент)
	Если ТоварныеПредложения.Количество()=0 тогда
		//Для проверки
		//тз=новый ТаблицаЗначений;
		//тз.Колонки.Добавить("флаг");
		//тз.Колонки.Добавить("name");
		//тз.Колонки.Добавить("ТекущаяПозиция");
		//тз.Колонки.Добавить("Ставка1");
		//тз.Колонки.Добавить("Ставка2");
		//тз.Колонки.Добавить("Ставка3");
		//тз.Колонки.Добавить("Ставка4");
		//тз.Колонки.Добавить("Ставка5");
		//
		//РазобратьСтавки("c:\1c\отчетыОбработки\Яндекс.Маркет\ВозвратРекСтавок2.xml",тз);
		//РекомендованныеСтавки=тз;
		//РекомендованныеСтавки.Колонки.Вставить(2,"НоваяПозиция",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(1,0)));
		//ЭлементыФормы.РекомендованныеСтавки.СоздатьКолонки();
		//ЭлементыФормы.РекомендованныеСтавки.Колонки.НоваяПозиция.Ширина=10;
		//ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.Ширина=3;

		//ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.ДанныеФлажка="флаг";
		//ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.РежимРедактирования=РежимРедактированияКолонки.Непосредственно;
		//ЭлементыФормы.Панель2.ТекущаяСтраница=ЭлементыФормы.Панель2.Страницы.Ставки;

				//

	иначе
		тз=новый ТаблицаЗначений;
		тз.Колонки.Добавить("флаг");
		тз.Колонки.Добавить("name");
		//тз.Колонки.Добавить("Статус");
		тз.Колонки.Добавить("ТекущаяПозиция");
		тз.Колонки.Добавить("НоваяПозиция",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(1,0)));
		тз.Колонки.Добавить("Ставка1");
		тз.Колонки.Добавить("Ставка2");
		тз.Колонки.Добавить("Ставка3");
		тз.Колонки.Добавить("Ставка4");
		тз.Колонки.Добавить("Ставка5");
		
		//
		//отберем нужные нам позиции
		//выгрузим в таблицу
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("тз", ТоварныеПредложения);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Настройки = КомпоновщикНастроек.Настройки;				
		МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
		);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеТЗ = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеТЗ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 	
		
		
		максВЗапросе=500;
		
		ЗаписьXML = Новый ЗаписьXML;
		
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML.ОткрытьФайл(ВремФайл);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("offers");
		
		к=0;
		Для каждого стр из ДанныеТЗ цикл
			Если к<максВЗапросе Тогда //добавим в xml
				ЗаписьXML.ЗаписатьНачалоЭлемента("offer");
				
				ЗаписьXML.ЗаписатьАтрибут("name",стр.name);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			Иначе   //отправим запрос
				к=0;
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.Закрыть();
				
				ТД=новый ТекстовыйДокумент;
				тд.Прочитать(ВремФайл);
				ТекстЗапроса = тд.ПолучитьТекст();

				//
				//отправим Запрос и получим ответ
				//Сервер = "api.partner.market.yandex.ru";
				//рекомендуемая ставка
				Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/bids/recommended.xml?target=model-card";
				////Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/bids/recommended.xml?target=search&positions=5";
				//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
				ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
				//ЗаголовокHTTP = Новый Соответствие();
				//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
				//ОтветHTTP=HTTP.ОтправитьДляОбработки(ВремФайл, Ресурс, ФайлРезультата, ЗаголовокHTTP);
				
				
				
				WinHttp.Open("POST","https://api.partner.market.yandex.ru"+Ресурс,0);
				WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
				WinHttp.setRequestHeader("Content-Type","application/xml");    
				WinHttp.SetRequestHeader("Accept-Language", "ru");
				WinHttp.SetRequestHeader("Accept-Charset","utf-8");
				WinHttp.setRequestHeader("Content-Language", "ru"); 
				WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
				WinHttp.SetRequestHeader("Content-Length", СтрДлина(ТекстЗапроса));

				
				
				РазобратьСтавки(ФайлРезультата,тз);
				Если УдалятьВременныеФайлы тогда
					УдалитьФайлы(ФайлРезультата);
					УдалитьФайлы(ВремФайл);
				КонецЕсли;	
				//
				
				ЗаписьXML = Новый ЗаписьXML;
				ВремФайл = ПолучитьИмяВременногоФайла("xml");
				ЗаписьXML.ОткрытьФайл(ВремФайл);
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("offers");
			КонецЕсли;
			к=к+1;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		//
		//отправим Запрос и получим ответ
		//
		Сервер = "api.partner.market.yandex.ru";
		//рекомендуемая ставка
		Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/bids/recommended.xml?target=model-card";
		//Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/bids/recommended.xml?target=search&positions=5";
		HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		ЗаголовокHTTP = Новый Соответствие();
		ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
		ОтветHTTP=HTTP.ОтправитьДляОбработки(ВремФайл, Ресурс, ФайлРезультата, ЗаголовокHTTP);
		
		//ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
		//	", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
		//	", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";

			
			РазобратьСтавки(ФайлРезультата,тз);
		Если УдалятьВременныеФайлы тогда
			УдалитьФайлы(ФайлРезультата);
			УдалитьФайлы(ВремФайл);
		КонецЕсли;	
		РекомендованныеСтавки=тз;
		ЭлементыФормы.РекомендованныеСтавки.СоздатьКолонки();
		ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.ДанныеФлажка="флаг";
		ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.РежимРедактирования=РежимРедактированияКолонки.Непосредственно;
		ЭлементыФормы.РекомендованныеСтавки.Колонки.флаг.Ширина=5;
		ЭлементыФормы.РекомендованныеСтавки.Колонки.name.Ширина=50;
		ЭлементыФормы.РекомендованныеСтавки.Колонки.ТекущаяПозиция.Ширина=5;
		ЭлементыФормы.РекомендованныеСтавки.Колонки.НоваяПозиция.Ширина=5;

		ЭлементыФормы.Панель2.ТекущаяСтраница=ЭлементыФормы.Панель2.Страницы.Ставки;
		
	КонецЕсли;
КонецПроцедуры

Процедура РазобратьСтавки(ФайлОтвета,тз)
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ФайлОтвета);
	Запись=новый Структура("name,ТекущаяПозиция,Позиция1,Ставка1,Позиция2,Ставка2,Позиция3,Ставка3,Позиция4,Ставка4,Позиция5,Ставка5");
	Пока ФайлXML.Прочитать() Цикл
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ФайлXML.Имя="offer" тогда
				КодОшибки=ФайлXML.ПолучитьАтрибут("error");
				
			иначеЕсли ФайлXML.Имя="name" тогда
				ФайлXML.Прочитать();
				Запись.name=ФайлXML.Значение;
			ИначеЕсли ФайлXML.Имя="model-card" тогда
				Запись.ТекущаяПозиция=ФайлXML.ПолучитьАтрибут("offer-position");
				НомерПоз=1;
				ФайлXML.Прочитать();
				Пока ФайлXML.Имя="position" цикл
					Если  ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
						//Запись.Вставить("Позиция"+НомерПоз,ФайлXML.ПолучитьАтрибут("pos"));
						Запись.Вставить("Ставка"+НомерПоз,ФайлXML.ПолучитьАтрибут("cbid"));
						НомерПоз=НомерПоз+1;
					КонецЕсли;
					ФайлXML.Прочитать();
				КонецЦикла;
			КонецЕсли;
		иначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="offer"  тогда
			стр=ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(стр,Запись);
			Запись.name="";
			//Запись.Статус="";
			Запись.ТекущаяПозиция="";
			Запись.Позиция1="";;
			Запись.Ставка1="";;
			Запись.Позиция2="";;
			Запись.Ставка2="";;
			Запись.Позиция3="";;
			Запись.Ставка3="";;
			Запись.Позиция4="";;
			Запись.Ставка4="";;
			Запись.Позиция5="";;
			Запись.Ставка5="";;
		КонецЕсли;    
		
		
	КонецЦикла;    
	ФайлXML.Закрыть();
	
КонецПроцедуры	

Процедура РазобратьПредложенияПоМоделям(ФайлОтвета,тз)
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ФайлОтвета);
	Запись=новый Структура("model_id,name,shop_name,pos,price,region_id,shipping_cost,in_stock,shop_rating");
	Пока ФайлXML.Прочитать() Цикл
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ФайлXML.Имя="model" тогда
				Запись.model_id=ФайлXML.ПолучитьАтрибут("id");
			ИначеЕсли ФайлXML.Имя="offers" тогда
				ФайлXML.Прочитать();
				Пока ФайлXML.Имя="offer" цикл
					Если  ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента тогда
						Запись.name=ФайлXML.ПолучитьАтрибут("name");
						Запись.shop_name=ФайлXML.ПолучитьАтрибут("shop-name");
						Запись.pos=ФайлXML.ПолучитьАтрибут("pos");
						Запись.price=ФайлXML.ПолучитьАтрибут("price");
						Запись.region_id=ФайлXML.ПолучитьАтрибут("region-id");
						Запись.shipping_cost=ФайлXML.ПолучитьАтрибут("shipping-cost");
						Запись.in_stock=ФайлXML.ПолучитьАтрибут("in-stock");
						Запись.shop_rating=ФайлXML.ПолучитьАтрибут("shop-rating");
						стр=ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(стр,Запись);
						
						Запись.name="";
						Запись.shop_name="";
						Запись.pos="";
						Запись.price="";
						Запись.region_id="";
						Запись.shipping_cost="";
						Запись.in_stock="";
						Запись.shop_rating="";
					КонецЕсли;
					ФайлXML.Прочитать();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;    
	КонецЦикла;    
	ФайлXML.Закрыть();
КонецПроцедуры	

Функция ПолучитьПредложенияПоРегиону(Регион, ДанныеТЗ)
	
	тз=новый ТаблицаЗначений;
	тз.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тз.Колонки.Добавить("id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	тз.Колонки.Добавить("model_id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	тз.Колонки.Добавить("name",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(220)));
	тз.Колонки.Добавить("shop_name",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(220)));
	тз.Колонки.Добавить("pos",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(2,0)));
	тз.Колонки.Добавить("price",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	тз.Колонки.Добавить("region_id",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,0)));
	тз.Колонки.Добавить("shipping_cost",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
	тз.Колонки.Добавить("in_stock",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,0)));
	тз.Колонки.Добавить("shop_rating",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(2,0)));
	
	
	Region_ID=Регион.Значение;
	максВЗапросе=100;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.ОткрытьФайл(ВремФайл);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("models");
	
	к=0;
	Для каждого стр из ДанныеТЗ цикл
		Если СокрЛП(стр.model_id)<>"" и стр.model_id<>0 и стр.model_id<>"0" Тогда
			Если к<максВЗапросе Тогда //добавим в xml
				ЗаписьXML.ЗаписатьНачалоЭлемента("id");
				
				ЗаписьXML.ЗаписатьТекст(стр.model_id);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			Иначе   //отправим запрос
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.Закрыть();
				ТД=новый ТекстовыйДокумент;
				тд.Прочитать(ВремФайл);
				ТекстЗапроса = тд.ПолучитьТекст();
				
				Ресурс = "/v2/models/offers.xml?regionId="+Region_ID;
				
				//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
				ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
				//ЗаголовокHTTP = Новый Соответствие();
				//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
				WinHttp.Open("POST","https://api.partner.market.yandex.ru"+Ресурс,0);
				
				//WinHttp.Option(9,80);
				
				WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
				
				WinHttp.setRequestHeader("Content-Type","application/xml");    
				
				WinHttp.SetRequestHeader("Accept-Language", "ru");
				
				WinHttp.SetRequestHeader("Accept-Charset","utf-8");
				
				WinHttp.setRequestHeader("Content-Language", "ru"); 
				
				WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
				WinHttp.SetRequestHeader("Content-Length", СтрДлина(ТекстЗапроса));
				
				Если к>0 тогда
					//HTTP.ОтправитьДляОбработки(ВремФайл, Ресурс, ФайлРезультата, ЗаголовокHTTP);
					Попытка
						WinHttp.Send(ТекстЗапроса);
						//WinHttp.Send();
						
						Ответ = WinHttp.ResponseText();
						//Ответ = WinHttp.ResponseText();
						
						Текст = новый ТекстовыйДокумент;
						Текст.ДобавитьСтроку(Ответ);
						Текст.Записать(ФайлРезультата,"UTF-8 ");
						
						
						Если WinHttp.status <>200 тогда
							ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);	
						КонецЕсли;
						
						РазобратьПредложенияПоМоделям(ФайлРезультата,тз);
						
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					Если УдалятьВременныеФайлы тогда
						УдалитьФайлы(ФайлРезультата);
						УдалитьФайлы(ВремФайл);
					КонецЕсли;	
					//
				конецесли;
				к=0;
				
				ЗаписьXML = Новый ЗаписьXML;
				ВремФайл = ПолучитьИмяВременногоФайла("xml");
				ЗаписьXML.ОткрытьФайл(ВремФайл);
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("models");
				ЗаписьXML.ЗаписатьНачалоЭлемента("id");
				
				ЗаписьXML.ЗаписатьТекст(стр.model_id);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			к=к+1;
		КонецЕсли;
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	//
	//отправим Запрос и получим ответ
	//
	Сервер = "api.partner.market.yandex.ru";
	//предложения по моделям
	Ресурс = "v2/models/offers.xml?regionId="+Region_ID;
	
	HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	ЗаголовокHTTP = Новый Соответствие();
	ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
	
	//ЗаголовокHTTP.Вставить("Authorization", "OAuth oauth_token=dc254190a8de411189f560e4b7c9e6fa,oauth_login=KOLESATYT.RU,oauth_client_id=765167d35d0f4975b6302380460186b1");
	//ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	//ЗаголовокHTTP.Вставить("Accept-Language", "ru");
	//ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	//ЗаголовокHTTP.Вставить("Content-Language", "ru");
	//ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	
	ТД=новый ТекстовыйДокумент;
	тд.Прочитать(ВремФайл);
	ТекстЗапроса = тд.ПолучитьТекст();
	//отправим Запрос и получим ответ
	Сервер = "api.partner.market.yandex.ru";
	//предложения по моделям
	Ресурс = "/v2/models/offers.xml?regionId="+Region_ID;
	//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	//ЗаголовокHTTP = Новый Соответствие();
	//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
	WinHttp.Open("POST","https://api.partner.market.yandex.ru"+Ресурс,0);
	WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
	WinHttp.setRequestHeader("Content-Type","application/xml");    
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru"); 
	WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
	WinHttp.SetRequestHeader("Content-Length", СтрДлина(ТекстЗапроса));
	
	Если к>0 тогда
		//ОтветHTTP=HTTP.ОтправитьДляОбработки(ВремФайл, Ресурс, ФайлРезультата, ЗаголовокHTTP);
		Попытка
			WinHttp.Send(ТекстЗапроса);
			//WinHttp.Send();
			
			Ответ = WinHttp.ResponseText();
			
			Текст = новый ТекстовыйДокумент;
			Текст.ДобавитьСтроку(Ответ);
			Текст.Записать(ФайлРезультата,"UTF-8 ");
			Если WinHttp.status <>200 тогда
				ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);
			КонецЕсли;
			РазобратьПредложенияПоМоделям(ФайлРезультата,тз);
			//	ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
			//", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
			//", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";
			
			ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
			СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
			
			ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
			
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Если УдалятьВременныеФайлы тогда
			УдалитьФайлы(ФайлРезультата);
			УдалитьФайлы(ВремФайл);
		КонецЕсли;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ПредложенияПоМоделям.model_id,
	             |	ПредложенияПоМоделям.name,
	             |	ПредложенияПоМоделям.shop_name,
	             |	ПредложенияПоМоделям.pos,
	             |	ПредложенияПоМоделям.price,
	             |	ПредложенияПоМоделям.region_id,
	             |	ПредложенияПоМоделям.shipping_cost,
	             |	ПредложенияПоМоделям.in_stock,
	             |	ПредложенияПоМоделям.shop_rating
	             |ПОМЕСТИТЬ втПредложенияПоМоделям
	             |ИЗ
	             |	&ПредложенияПоМоделям КАК ПредложенияПоМоделям
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	МодельНоменклатура.model_id КАК model_id,
	             |	МодельНоменклатура.Номенклатура КАК Номенклатура,
	             |	МодельНоменклатура.id
	             |ПОМЕСТИТЬ втМодельНоменклатура
	             |ИЗ
	             |	&МодельНоменклатура КАК МодельНоменклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втМодельНоменклатура.model_id,
	             |	МАКСИМУМ(втМодельНоменклатура.Номенклатура) КАК Номенклатура,
	             |	втМодельНоменклатура.id
	             |ПОМЕСТИТЬ втМодельНоменклатура2
	             |ИЗ
	             |	втМодельНоменклатура КАК втМодельНоменклатура
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	втМодельНоменклатура.model_id,
	             |	втМодельНоменклатура.id
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	втПредложенияПоМоделям.model_id,
	             |	втМодельНоменклатура.Номенклатура,
	             |	втПредложенияПоМоделям.name,
	             |	втПредложенияПоМоделям.shop_name,
	             |	втПредложенияПоМоделям.pos,
	             |	втПредложенияПоМоделям.price,
	             |	втПредложенияПоМоделям.region_id,
	             |	втПредложенияПоМоделям.shipping_cost,
	             |	втПредложенияПоМоделям.in_stock,
	             |	втПредложенияПоМоделям.shop_rating,
	             |	ЕСТЬNULL(ИнтернетМагазины.Ссылка, втПредложенияПоМоделям.shop_name) КАК ИнтернетМагазин,
	             |	ИнтернетМагазины.Ответственный,
	             |	втМодельНоменклатура.id,
	             |	ИнтернетМагазины.Ссылка КАК ИнтернетМагазинСсылка
	             |ПОМЕСТИТЬ вт
	             |ИЗ
	             |	втПредложенияПоМоделям КАК втПредложенияПоМоделям
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнтернетМагазины КАК ИнтернетМагазины
	             |		ПО втПредложенияПоМоделям.shop_name = ИнтернетМагазины.Наименование
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втМодельНоменклатура КАК втМодельНоменклатура
	             |		ПО втПредложенияПоМоделям.model_id = втМодельНоменклатура.model_id
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вт.model_id,
	             |	вт.Номенклатура,
	             |	вт.name,
	             |	вт.shop_name,
	             |	вт.pos,
	             |	вт.price,
	             |	вт.region_id,
	             |	вт.shipping_cost,
	             |	вт.in_stock,
	             |	вт.shop_rating,
	             |	вт.ИнтернетМагазин,
	             |	вт.Ответственный,
	             |	вт.id,
	             |	вт.ИнтернетМагазинСсылка
	             |ИЗ
	             |	вт КАК вт
	             |ГДЕ
	             |	НЕ вт.Номенклатура ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ПредложенияПоМоделям",тз);
	Запрос.УстановитьПараметр("МодельНоменклатура",ТоварныеПредложения);
	Рез=Запрос.Выполнить().Выгрузить();
	ПредложенияПоМоделям=Рез;
	Магазины = ПредложенияПоМоделям.Скопировать();
	Магазины.свернуть("ИнтернетМагазинСсылка,shop_name");
	Для каждого стр из Магазины цикл
		Если не ЗначениеЗаполнено(стр.ИнтернетМагазинСсылка) тогда
			Если Справочники.ИнтернетМагазины.НайтиПоНаименованию(стр.shop_name) = Справочники.ИнтернетМагазины.ПустаяСсылка() тогда
				нЭл = Справочники.ИнтернетМагазины.СоздатьЭлемент();
				нЭл.Наименование = стр.shop_name;
				нЭл.Записать();
				Сообщить(стр.shop_name);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ПредложенияПоМоделям.СоздатьКолонки();
	ЭлементыФормы.ПредложенияПоМоделям.Колонки.shop_name.ширина=50;
	ЭлементыФормы.ПредложенияПоМоделям.Колонки.name.ширина=50;
	ЭлементыФормы.Панель3.ТекущаяСтраница=ЭлементыФормы.Панель3.Страницы.Предложения;
	НастройкиПредложенияПоМоделям = КомпоновщикНастроек.Настройки;
	
КонецФункции

Функция ПолучитьРегионыПоДнюНедели(День)
	СписокНаДень = новый СписокЗначений;
	РегионовВДень = Окр(СписокРегионов.Количество()/7,0);
	ИндексК =  День*РегионовВДень-1;
	ИндексН = ИндексК - РегионовВДень+1;
	ИндексК = ?(ИндексК>=СписокРегионов.Количество(),СписокРегионов.Количество()-1,ИндексК);
	к = ИндексН;
	Пока к<=индексК цикл
		эл = СписокРегионов.Получить(к);
		нсп = СписокНаДень.Добавить(); 
		ЗаполнитьЗначенияСвойств(нсп,эл);
        нсп.Пометка=истина;
		к=к+1;
	КонецЦикла;
	Сообщить("Всего регионов: "+СписокРегионов.Количество());
	Сообщить("Регионов в день: "+РегионовВДень);
	Сообщить("индекс Н: "+ИндексН);
	Сообщить("индекс К "+ИндексК);
возврат СписокНаДень;	
КонецФункции


Процедура кнОбновитьПредложенияПоМоделямНажатие(Элемент)
	Если ТоварныеПредложения.Количество()=0 
	//	или ЭлементыФормы.СписокРегионов.Значение="" 
	//	или ЭлементыФормы.СписокРегионов.Значение=0 
	//	или ЭлементыФормы.СписокРегионов.Значение=неопределено 
		тогда
		Предупреждение("Не выбран регион или нет наших товарных предложений.");
	ИначеЕсли не ЗначениеЗаполнено(ЦенаПоПравилам) тогда
		Предупреждение("Не выбрана цена для сравнения.");
	Иначе	
		
		//
		//отберем нужные нам позиции
		//выгрузим в таблицу
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("тз", ТоварныеПредложения);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Настройки = КомпоновщикНастроек.Настройки;				
		МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
		);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеТЗ = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеТЗ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 	
		
		//
		
		
		//сначала получим region-id выбранного магазина
		//Region_ID=ПолучитьРегион(ЭлементыФормы.СписокКампаний.Значение).IDRegion;
		//Region_ID=ЭлементыФормы.СписокРегионов.Значение;
		//
		//Контакты = ПолучитьКонтактнуюИнформацию();
		
		//РегионыАвто = ПолучитьРегионыПоДнюНедели(ДеньНедели(ТекущаяДата()));
		
		Для каждого эл из Регионы Цикл
		//Для каждого эл из РегионыАвто Цикл
			Если Эл.Пометка тогда
				ПолучитьПредложенияПоРегиону(Эл, ДанныеТЗ);
				ВывестиОтчетНарушениеМРЦ(Эл.Представление);
				//ВывестиОтчетАссортимент(Эл.Представление, контакты, ТоварныеПредложения)
				//ТД.Показать(""+Эл.Представление+"/ все менеджеры");
				//прервать;
			КонецЕсли;
		КонецЦикла;
		

	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформацию()
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КонтактнаяИнформация.Объект КАК Пользователь,
	             |	КонтактнаяИнформация.Представление КАК Почта
				 |ИЗ
	             |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |ГДЕ
	             |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	             |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя)
	             |	И КонтактнаяИнформация.Объект В
	             |			(ВЫБРАТЬ
	             |				Пользователи.Ссылка
	             |			ИЗ
	             |				Справочник.Пользователи КАК Пользователи)";
				 Рез = Запрос.Выполнить().Выгрузить();
				 Возврат Рез;
КонецФункции

Функция ПолучитьРегион(CampaignID)
	Сервер = "api.partner.market.yandex.ru";
	//Запрос кампаний
	Ресурс = "/v2/campaigns/"+CampaignID+"/region.xml";
	//HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
	ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
	//ЗаголовокHTTP = Новый Соответствие();
	//ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
	//ЗаголовокHTTP.Вставить("Authorization", "OAuth oauth_token=dc254190a8de411189f560e4b7c9e6fa,oauth_login=KOLESATYT.RU,oauth_client_id=765167d35d0f4975b6302380460186b1");
	//ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
	//ЗаголовокHTTP.Вставить("Accept-Language", "ru");
	//ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	//ЗаголовокHTTP.Вставить("Content-Language", "ru");
	//ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	
	//HTTP.Получить(Ресурс, ФайлРезультата, ЗаголовокHTTP);
	
	//структура http://api.yandex.ru/market/partner/doc/dg/reference/get-campaigns-id-region.xml#output
	
	Регион=Новый Структура("IDRegion,НазваниеРегиона");

	Попытка
		WinHttp.Open("GET","https://api.partner.market.yandex.ru"+Ресурс,0);
		WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
		WinHttp.setRequestHeader("Content-Type","application/xml");    
		WinHttp.SetRequestHeader("Accept-Language", "ru");
		WinHttp.SetRequestHeader("Accept-Charset","UTF-8");
		WinHttp.setRequestHeader("Content-Language", "ru"); 
		WinHttp.setRequestHeader("Content-Charset", "UTF-8"); 
		WinHttp.Send();
		Ответ = WinHttp.ResponseText();
		Если WinHttp.status <>200 тогда
			ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);
		КонецЕсли;
		
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8");
		
		ФайлXML = Новый ЧтениеXML;
		ФайлXML.ОткрытьФайл(ФайлРезультата);
		
		
		Пока ФайлXML.Прочитать() Цикл
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ФайлXML.Имя="region" тогда
					Регион.IDRegion=ФайлXML.ПолучитьАтрибут("id");
					Регион.НазваниеРегиона=ФайлXML.ПолучитьАтрибут("name");
				КонецЕсли;
			КонецЕсли;    
		КонецЦикла;    
		ФайлXML.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	возврат Регион; 
КонецФункции	


Функция ВывестиОтчетНарушениеМРЦ(Регион, Контакты = неопределено)
	Если ПредложенияПоМоделям.Количество()=0 тогда
	Иначе
		Запрос=новый Запрос;
		Если ЗначениеЗаполнено(ЦенаПоПравилам)тогда
			//
			Ном = ПредложенияПоМоделям.Скопировать(,"Номенклатура");
			Ном.Свернуть("Номенклатура");
			СписокНом=Ном.ВыгрузитьКолонку("Номенклатура");
			Если ТипЗнч(ЦенаПоПравилам) = тип("СправочникСсылка.Контрагенты") тогда
			МРЦ = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(ЦенаПоПравилам,СписокНом);
			
			Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	тз.model_id,
			             |	тз.name,
			             |	тз.shop_name,
			             |	0 КАК pos,
			             |	тз.price,
			             |	0 КАК region_id,
			             |	0 КАК shipping_cost,
			             |	0 КАК in_stock,
			             |	0 КАК shop_rating,
			             |	тз.Номенклатура,
			             |	тз.ИнтернетМагазин,
			             |	тз.Ответственный,
			             |	тз.id
			             |ПОМЕСТИТЬ вт
			             |ИЗ
			             |	&тз КАК тз
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	МРЦ.Номенклатура,
			             |	МРЦ.МинимальнаяЦена
			             |ПОМЕСТИТЬ МРЦ
			             |ИЗ
			             |	&МРЦ КАК МРЦ
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	вт.model_id КАК model_id,
			             |	вт.Номенклатура КАК Номенклатура,
			             |	вт.shop_name КАК shop_name,
			             |	вт.pos КАК pos,
			             |	вт.price КАК price,
			             |	вт.region_id КАК region_id,
			             |	вт.shipping_cost КАК shipping_cost,
			             |	вт.in_stock КАК in_stock,
			             |	вт.shop_rating КАК shop_rating,
			             |	ЕСТЬNULL(МРЦ.МинимальнаяЦена, 0) КАК МРЦ,
			             |	вт.ИнтернетМагазин,
			             |	вт.Ответственный,
			             |	вт.id
			             |ПОМЕСТИТЬ втОснова
			             |ИЗ
			             |	вт КАК вт
			             |		ЛЕВОЕ СОЕДИНЕНИЕ МРЦ КАК МРЦ
			             |		ПО вт.Номенклатура = МРЦ.Номенклатура
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	втОснова.model_id,
			             |	втОснова.Номенклатура КАК Номенклатура,
			             |	втОснова.shop_name,
			             |	втОснова.pos,
			             |	втОснова.price КАК ЦенаМагазина,
			             |	втОснова.region_id,
			             |	втОснова.shipping_cost,
			             |	втОснова.in_stock,
			             |	втОснова.shop_rating,
			             |	втОснова.МРЦ,
			             |	втОснова.ИнтернетМагазин КАК ИнтернетМагазин,
			             |	втОснова.Ответственный КАК Ответственный,
			             |	втОснова.МРЦ - втОснова.price КАК Разница,
			             |	втОснова.id КАК Код
			             |ИЗ
			             |	втОснова КАК втОснова
			             |ГДЕ
			             |	втОснова.МРЦ > втОснова.price
			             |
			             |УПОРЯДОЧИТЬ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин,
			             |	Номенклатура
			             |ИТОГИ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин
			             |АВТОУПОРЯДОЧИВАНИЕ";
					 иначе
						 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	тз.model_id,
			             |	тз.name,
			             |	тз.shop_name,
			             |	0 КАК pos,
			             |	тз.price,
			             |	0 КАК region_id,
			             |	0 КАК shipping_cost,
			             |	0 КАК in_stock,
			             |	0 КАК shop_rating,
			             |	тз.Номенклатура,
			             |	тз.ИнтернетМагазин,
			             |	тз.Ответственный,
			             |	тз.id
			             |ПОМЕСТИТЬ вт
			             |ИЗ
			             |	&тз КАК тз
			             |;

			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	вт.Номенклатура
			             |ПОМЕСТИТЬ втНоменклатура
			             |ИЗ
			             |	вт КАК вт
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
			             |	ЦеныНоменклатурыСрезПоследних.Цена
			             |ПОМЕСТИТЬ втЦенаПоТипу
			             |ИЗ
			             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			             |			,
			             |			Номенклатура В
			             |					(ВЫБРАТЬ
			             |						втНоменклатура.Номенклатура
			             |					ИЗ
			             |						втНоменклатура КАК втНоменклатура)
			             |				И ТипЦен = &НашаЦена) КАК ЦеныНоменклатурыСрезПоследних
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	вт.model_id КАК model_id,
			             |	вт.Номенклатура КАК Номенклатура,
			             |	вт.shop_name КАК shop_name,
			             |	вт.pos КАК pos,
			             |	вт.price КАК price,
			             |	вт.region_id КАК region_id,
			             |	вт.shipping_cost КАК shipping_cost,
			             |	вт.in_stock КАК in_stock,
			             |	вт.shop_rating КАК shop_rating,
			             |	ЕСТЬNULL(втЦенаПоТипу.Цена, 0) КАК МРЦ,
			             |	вт.ИнтернетМагазин,
			             |	вт.Ответственный,
			             |	вт.id
			             |ПОМЕСТИТЬ втОснова
			             |ИЗ
			             |	вт КАК вт
			             |		ЛЕВОЕ СОЕДИНЕНИЕ втЦенаПоТипу КАК втЦенаПоТипу
			             |		ПО вт.Номенклатура = втЦенаПоТипу.Номенклатура
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	втОснова.model_id,
			             |	втОснова.Номенклатура КАК Номенклатура,
			             |	втОснова.shop_name,
			             |	втОснова.pos,
			             |	втОснова.price КАК ЦенаМагазина,
			             |	втОснова.region_id,
			             |	втОснова.shipping_cost,
			             |	втОснова.in_stock,
			             |	втОснова.shop_rating,
			             |	втОснова.МРЦ,
			             |	втОснова.ИнтернетМагазин КАК ИнтернетМагазин,
			             |	втОснова.Ответственный КАК Ответственный,
			             |	втОснова.МРЦ - втОснова.price КАК Разница,
			             |	втОснова.id КАК Код
			             |ИЗ
			             |	втОснова КАК втОснова
			             |ГДЕ
			             |	 втОснова.МРЦ > втОснова.price
			             |
			             |УПОРЯДОЧИТЬ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин,
			             |	Номенклатура
			             |ИТОГИ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин
			             |АВТОУПОРЯДОЧИВАНИЕ";
					 КонецЕсли;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("тз",ПредложенияПоМоделям);
		Запрос.УстановитьПараметр("МРЦ",МРЦ);
		Запрос.УстановитьПараметр("НашаЦена",ЦенаПоПравилам);
		
		ВыборкаОтветственный = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		Макет = ПолучитьМакет("Макет");
		
		ОбластьРегион = Макет.ПолучитьОбласть("Шапка");
		ОбластьОтветственный = Макет.ПолучитьОбласть("СтрокаОтветственный");
		ОбластьМагазин = Макет.ПолучитьОбласть("СтрокаМагазин");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ТабДокОбщий = новый ТабличныйДокумент;
		ТабДокОбщий.НачатьАвтогруппировкуСтрок();
		
		ТабМенеджера = новый ТабличныйДокумент;
		ТабМенеджера.НачатьАвтогруппировкуСтрок();
		
		ОбластьРегион.Параметры.Регион = "Расхождения с "+ЦенаПоПравилам+" "+Регион;
		ТабДокОбщий.Вывести(ОбластьРегион);
		ВысотаШапки = ТабДокОбщий.ВысотаСтраницы;
		
		Пока ВыборкаОтветственный.Следующий() Цикл
			
			 ОбластьОтветственный.Параметры.Ответственный = ВыборкаОтветственный.Ответственный;
			 ВыборкаИМ = ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 ТабДокОбщий.Вывести(ОбластьОтветственный,1);
			 
			 Если Контакты <>неопределено тогда
				ТабМенеджера = новый ТабличныйДокумент;
				ТабМенеджера.НачатьАвтогруппировкуСтрок();
				ТабМенеджера.Вывести(ОбластьРегион);
				ТабМенеджера.Вывести(ОбластьОтветственный,1);
			 КонецЕсли;
			 Пока ВыборкаИМ.Следующий() Цикл
				 ОбластьМагазин.Параметры.Магазин = ВыборкаИМ.ИнтернетМагазин;
				 ТабДокОбщий.Вывести(ОбластьМагазин,2);
				 ВыборкаДетали = ВыборкаИМ.Выбрать();
				 Если Контакты <>неопределено тогда
					 ТабМенеджера.Вывести(ОбластьМагазин,2);
				 КонецЕсли;
				 Пока ВыборкаДетали.Следующий() Цикл
					 ОбластьСтрока.Параметры.Заполнить(ВыборкаДетали);
					 ОбластьСтрока.Параметры.УРЛ = "https://market.yandex.ru/product/"+ВыборкаДетали.model_id;
					 ОбластьСтрока.Параметры.Код = ВыборкаДетали.Номенклатура.Код;
					 ТабДокОбщий.Вывести(ОбластьСтрока,3);
					 Если Контакты <>неопределено тогда
						 ТабМенеджера.Вывести(ОбластьСтрока,3);
					 КонецЕсли;
				 КонецЦикла;
			 КонецЦикла;
			 
			 Если Контакты <>неопределено тогда
			 	ТабМенеджера.ЗакончитьАвтогруппировкуСтрок();
			 	ТабМенеджера.ТолькоПросмотр = истина;
             	ТабМенеджера.Показать(""+Регион+"/"+ВыборкаОтветственный.Ответственный);
			 КонецЕсли;
			 
			 ТекстСообщения="Мониторинг цен интернет-магазинов в регионе "+Регион;
			 Тема = "Мониторинг "+Регион+" "+ВыборкаОтветственный.Ответственный;
			 Если Контакты<>неопределено тогда
			 	ОтправитьПисьмо(Регион,ВыборкаОтветственный.Ответственный,Контакты,ТабМенеджера,ТекстСообщения,Тема);
			 КонецЕсли;
		КонецЦикла;
		 ТабДокОбщий.ЗакончитьАвтогруппировкуСтрок();

		ТабДокОбщий.ТолькоПросмотр = истина;
		//Возврат ТабДокОбщий;
		ТабДокОбщий.Показать(""+Регион+"/ все менеджеры");
		//ТабДокОбщий.ФиксацияСверху(ВысотаШапки);
		ТекстСообщения="Мониторинг цен интернет-магазинов в регионе "+Регион;
		Тема = "Мониторинг "+Регион+" все менеджеры";
		Если Контакты<>неопределено тогда
			ОтправитьПисьмо(Регион,ВыборкаОтветственный.Ответственный,Контакты,ТабДокОбщий,ТекстСообщения,Тема);
		КонецЕсли;
	КонецЕсли;	
КонецФункции

Функция ОтправитьПисьмо(Регион,Ответственный,Контакты,ТабМенеджера,ТекстСообщения,Тема)
	ЭлПочта = "malyshev@yst.ru; smirnov@yst.ru; asmirnov83@bk.ru"; //если у ИМ не назначен ответственный, то шлем этим товарищам
	СписокФайловВложений = Новый СписокЗначений;
	Для каждого Контакт из Контакты цикл
		Если Контакт.Пользователь = Ответственный и СокрЛП(Контакт.Почта)<>"" тогда
			ЭлПочта = СокрЛП(Контакт.Почта);
			ЭлПочта = ЭлПочта+"; smirnov@yst.ru";
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла("XLSX");
		ТабМенеджера.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);			
		ИмяАрхива = КаталогВременныхФайлов()+Тема+".zip";
		ЗаписьZIP = Новый ЗаписьZipФайла(ИмяАрхива,
			,
			,
			МетодСжатияZIP.Сжатие,
			,
			);
		ЗаписьZIP.Добавить(ИмяФайла);
		ЗаписьZIP.Записать();
		СписокФайловВложений.Добавить(ИмяАрхива);
		яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(ЭлПочта,СписокФайловВложений, УЗ, ТекстСообщения, Тема);
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяАрхива);

	Исключение
	КонецПопытки;
	
КонецФункции


Функция ВывестиОтчетАссортимент(Регион, Контакты = неопределено, ТоварныеПредложения)
	Если ПредложенияПоМоделям.Количество()=0 тогда
	Иначе
		Запрос2 = новый Запрос;
		Запрос2.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	тзПредложения.Номенклатура
		              |ПОМЕСТИТЬ втПредложения
		              |ИЗ
		              |	&тзПредложения КАК тзПредложения
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	втПредложения.Номенклатура,
		              |	НоменклатураСпр.Код
		              |ИЗ
		              |	втПредложения КАК втПредложения
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		              |		ПО втПредложения.Номенклатура = НоменклатураСпр.Ссылка
		              |ГДЕ
		              |	НоменклатураСпр.ВидТовара = ЗНАЧЕНИЕ(перечисление.ВидыТоваров.Диски)";
					  Запрос2.УстановитьПараметр("тзПредложения",ТоварныеПредложения);
					  ПредложенияДиски = Запрос2.Выполнить().Выгрузить();
		Запрос=новый Запрос;
			Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	тз.model_id,
			             |	тз.name,
			             |	тз.shop_name,
			             |	0 КАК pos,
			             |	тз.price,
			             |	0 КАК region_id,
			             |	0 КАК shipping_cost,
			             |	0 КАК in_stock,
			             |	0 КАК shop_rating,
			             |	тз.Номенклатура,
			             |	тз.ИнтернетМагазин,
			             |	тз.Ответственный,
			             |	тз.id
			             |ПОМЕСТИТЬ вт
			             |ИЗ
			             |	&тз КАК тз
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	вт.model_id,
			             |	вт.name,
			             |	вт.shop_name,
			             |	вт.pos,
			             |	вт.price,
			             |	вт.region_id,
			             |	вт.shipping_cost,
			             |	вт.in_stock,
			             |	вт.shop_rating,
			             |	вт.Номенклатура,
			             |	вт.ИнтернетМагазин КАК ИнтернетМагазин,
			             |	вт.Ответственный КАК Ответственный,
			             |	вт.id
			             |ИЗ
			             |	вт КАК вт
			             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
			             |		ПО вт.Номенклатура = НоменклатураСпр.Ссылка
			             |ГДЕ
			             |	НоменклатураСпр.ВидТовара = ЗНАЧЕНИЕ(перечисление.видытоваров.диски)
			             |
			             |УПОРЯДОЧИТЬ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин
			             |ИТОГИ ПО
			             |	Ответственный,
			             |	ИнтернетМагазин
			             |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("тз",ПредложенияПоМоделям);
		Запрос.УстановитьПараметр("тзАссортимент",ТоварныеПредложения);
				
		ВыборкаОтветственный = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		Макет = ПолучитьМакет("МакетАссортимент");
		
		ОбластьРегион = Макет.ПолучитьОбласть("Шапка");
		ОбластьОтветственный = Макет.ПолучитьОбласть("СтрокаОтветственный");
		ОбластьМагазин = Макет.ПолучитьОбласть("СтрокаМагазин");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ТабДокОбщий = новый ТабличныйДокумент;
		ТабДокОбщий.НачатьАвтогруппировкуСтрок();
		
		ТабМенеджера = новый ТабличныйДокумент;
		ТабМенеджера.НачатьАвтогруппировкуСтрок();
		
		ОбластьРегион.Параметры.Регион = "Нет товара в регионе: "+Регион;
		ТабДокОбщий.Вывести(ОбластьРегион);
		СтруктураПоиска = новый Структура("ИнтернетМагазин,Номенклатура");
		СписокТоваровМагазина = новый СписокЗначений;
		
		Пока ВыборкаОтветственный.Следующий() Цикл
			Если не ЗначениеЗаполнено(ВыборкаОтветственный.Ответственный) тогда
				продолжить;
			КонецЕсли;
			 ОбластьОтветственный.Параметры.Ответственный = ВыборкаОтветственный.Ответственный;
			 ВыборкаИМ = ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 ТабДокОбщий.Вывести(ОбластьОтветственный,1);
			 
			 Если Контакты <>неопределено тогда
				ТабМенеджера = новый ТабличныйДокумент;
				ТабМенеджера.НачатьАвтогруппировкуСтрок();
				ТабМенеджера.Вывести(ОбластьРегион);
				ТабМенеджера.Вывести(ОбластьОтветственный,1);
			 КонецЕсли;
			 Пока ВыборкаИМ.Следующий() Цикл
				 ОбластьМагазин.Параметры.Магазин = ВыборкаИМ.ИнтернетМагазин;
				 ТабДокОбщий.Вывести(ОбластьМагазин,2);
				 ВыборкаДетали = ВыборкаИМ.Выбрать();
				 СписокТоваровМагазина.Очистить();
				 Если Контакты <>неопределено тогда
					 ТабМенеджера.Вывести(ОбластьМагазин,2);
				 КонецЕсли;
				 Пока ВыборкаДетали.Следующий() Цикл
				 	СписокТоваровМагазина.Добавить(выборкаДетали.Номенклатура);
				 КонецЦикла;

				 Для каждого нашеПредложение из ПредложенияДиски цикл
					  Если СписокТоваровМагазина.НайтиПоЗначению(нашеПредложение.Номенклатура)=неопределено тогда //магазин не предлагает
						 ОбластьСтрока.Параметры.Заполнить(нашеПредложение);
						 ТабДокОбщий.Вывести(ОбластьСтрока,3);
						 Если Контакты <>неопределено тогда
							 ТабМенеджера.Вывести(ОбластьСтрока,3);
						 КонецЕсли;
					 КонецЕсли;
				 КонецЦикла;
			 КонецЦикла;
			 ТабМенеджера.ЗакончитьАвтогруппировкуСтрок();
			 ТабМенеджера.ТолькоПросмотр = истина;
             ТабМенеджера.Показать("Ассортимент "+Регион+"/"+ВыборкаОтветственный.Ответственный);
			 
		ТекстСообщения="Отсутствующий ассортимент интернет-магазинов в регионе "+Регион;
		Тема = "Отсутствующий ассортимент "+Регион+" "+ВыборкаОтветственный.Ответственный;
		Если Контакты<>неопределено тогда
			ОтправитьПисьмо(Регион,ВыборкаОтветственный.Ответственный,Контакты,ТабМенеджера,ТекстСообщения,Тема);
		КонецЕсли;
		КонецЦикла;
		 ТабДокОбщий.ЗакончитьАвтогруппировкуСтрок();

		ТабДокОбщий.ТолькоПросмотр = истина;
		//Возврат ТабДокОбщий;
		ТабДокОбщий.Показать("Ассортимент "+Регион+"/ все менеджеры");
		ТекстСообщения="Отсутствующий ассортимент интернет-магазинов в регионе "+Регион;
		Тема = "Отсутствующий ассортимент "+Регион+" все менеджеры";
		//ОтправитьПисьмо(Регион,ВыборкаОтветственный.Ответственный,Контакты,ТабДокОбщий,ТекстСообщения,Тема);

	КонецЕсли;	
КонецФункции


Процедура Кнопка1Нажатие(Элемент)
	ВывестиОтчетНарушениеМРЦ("");
КонецПроцедуры

Процедура Панель3ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница=ЭлементыФормы.Панель3.Страницы.Отбор тогда
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;	
КонецПроцедуры

Процедура Панель2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница=ЭлементыФормы.Панель2.Страницы.Отбор тогда
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		//ВнешниеНаборыДанных = Новый Структура;
		//ВнешниеНаборыДанных.Вставить("тз",резТЗ);
	КонецЕсли;
КонецПроцедуры

Процедура РекомендованныеСтавкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки["флаг"].ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки["флаг"].ОтображатьТекст  = Ложь;
КонецПроцедуры

Процедура кнУстановитьВсемСтавкуНажатие(Элемент)
	Для каждого стр из РекомендованныеСтавки цикл
		стр.НоваяПозиция=НоваяПозиция;
	КонецЦикла;	
КонецПроцедуры

Процедура кнСнятьФлажкиНажатие(Элемент)
	Для каждого стр из РекомендованныеСтавки цикл
		стр.флаг=ложь;
	КонецЦикла;
КонецПроцедуры

Процедура кнУстановитьФлажкиНажатие(Элемент)
	Для каждого стр из РекомендованныеСтавки цикл
		стр.флаг=истина;
	КонецЦикла;
КонецПроцедуры

Процедура кнУстановитьРекомендованныеНажатие(Элемент)
	Если Вопрос("Установить ставки?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		УстановитьСтавку(1);
		УстановитьСтавку(2);
		УстановитьСтавку(3);
		УстановитьСтавку(4);
		УстановитьСтавку(5);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьСтавку(Позиция)
	Отбор=новый Структура("флаг,НоваяПозиция");
	Отбор.Флаг=истина;
	Отбор.НоваяПозиция=Позиция;
	Строки=РекомендованныеСтавки.НайтиСтроки(отбор);
	Если Строки.Количество()>0 тогда
		Сервер = "api.partner.market.yandex.ru";
		Ресурс = "/v2/campaigns/"+ЭлементыФормы.СписокКампаний.Значение+"/bids/recommended.xml?target=model-card&position="+Позиция+"&maxBid="+СтрЗаменить(Строка(МаксСтавка),",",".");
		HTTP =  Новый HTTPСоединение(Сервер,,,,,истина);
		
		ЗаголовокHTTP = Новый Соответствие();
		ПодготовитьЗаголовокHTTP(ЗаголовокHTTP);
		//ЗаголовокHTTP.Вставить("Authorization", "OAuth oauth_token=dc254190a8de411189f560e4b7c9e6fa,oauth_login=KOLESATYT.RU,oauth_client_id=765167d35d0f4975b6302380460186b1");
		//ЗаголовокHTTP.Вставить("Content-Type", "application/xml");
		//ЗаголовокHTTP.Вставить("Accept-Language", "ru");
		//ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		//ЗаголовокHTTP.Вставить("Content-Language", "ru");
		//ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
		
		максВЗапросе=100;
		
		ЗаписьXML = Новый ЗаписьXML;
		
		ФайлЗапроса = ПолучитьИмяВременногоФайла("xml");
		ЗаписьXML.ОткрытьФайл(ФайлЗапроса);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("offers");
		
		к=0;
		Для каждого стр из Строки цикл
			Если к<максВЗапросе Тогда //добавим в xml
				ЗаписьXML.ЗаписатьНачалоЭлемента("offer");
				
				ЗаписьXML.ЗаписатьАтрибут("name",СокрЛП(стр.name));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				к=к+1;
			Иначе   //отправим запрос
				к=0;
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.Закрыть();
				ОтветHTTP=HTTP.Записать(ФайлЗапроса, Ресурс, ЗаголовокHTTP);
				Если УдалятьВременныеФайлы тогда
					УдалитьФайлы(ФайлЗапроса);
				КонецЕсли;
				ФайлЗапроса = ПолучитьИмяВременногоФайла("xml");
				ЗаписьXML.ОткрытьФайл(ФайлЗапроса);
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("offers");
			КонецЕсли;	
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		ОтветHTTP=HTTP.Записать(ФайлЗапроса, Ресурс, ЗаголовокHTTP);
		
		//ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Limit")+
		//	", остаток: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Remaining")+
		//	", обнуление лимита: "+ОтветHTTP.Заголовки.Получить("X-RateLimit-Resource-Until")+")";

		Если УдалятьВременныеФайлы тогда
			УдалитьФайлы(ФайлЗапроса);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры	

Процедура ЗаполнитьСписокРегионов()
	СписокРегионов.Очистить();
	Для каждого ЭлементСписокКампаний из СписокКампаний цикл
		Регион=ПолучитьРегион(ЭлементСписокКампаний.Значение);
		Region_ID=Регион.IDRegion;
		Представление=Регион.НазваниеРегиона;
		Если СписокРегионов.НайтиПоЗначению(Region_ID)=неопределено тогда
			СписокРегионов.Добавить(Region_ID,Представление);
		КонецЕсли;
	КонецЦикла;
	//регионы с кодами яндекса
	//http://hmxblog.ya.ru/replies.xml?item_no=2780
	
	СписокРегионов = ДобавитьРегион(СписокРегионов,"213","Москва");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"2","С. Петербург");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"43","Казань");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"54","Екатеринбург");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"16","Ярославль");
	
	//ЦФО
	СписокРегионов = ДобавитьРегион(СписокРегионов,"1","Москва и Московская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10645","Белгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10650","Брянская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10658","Владимирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10672","Воронежская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10687","Ивановская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10693","Калужская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10699","Костромская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10705","Курская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10712","Липецкая область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10772","Орловская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10776","Рязанская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10795","Смоленская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10802","Тамбовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10819","Тверская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10832","Тульская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10841","Ярославская область");
	
	//Северо-Западный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10174","Санкт-Петербург и Ленинградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10176","Ненецкий автономный округ");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10842","Архангельская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10853","Вологодская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10857","Калининградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10897","Мурманская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10904","Новгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10926","Псковская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10933","Республика Карелия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10939","Республика Коми");
	
	//Южный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10946","Астраханская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10950","Волгоградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10995","Краснодарский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11004","Республика Адыгеяи");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11015","Республика Калмыкия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11029","Ростовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"977","Республика Крым");

	//Приволжский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11070","Кировская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11077","Республика Марий Эл");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11079","Нижегородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11084","Оренбургская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11095","Пензенская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11108","Пермский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11111","Республика Башкортостан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11117","Республика Мордовия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11119","Республика Татарстан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11131","Самарская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11146","Саратовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11148","Удмуртская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11153","Ульяновская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11156","Чувашская Республика");
	
	//Уральский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11158","Курганская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11162","Свердловская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11176","Тюменская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11193","Ханты-Мансийский автономный округ - Югра");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11225","Челябинская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11232","Ямало-Ненецкий автономный округ");

	//Сибирский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10231","Республика Алтай");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10233","Республика Тыв");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11235","Алтайский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11266","Иркутская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11282","Кемеровская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11309","Красноярский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11316","Новосибирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11318","Омская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11330","Республика Бурятия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11340","Республика Хакасия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11353","Томская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"21949","Забайкальский край");

	//Дальневосточный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10243","Еврейская автономная область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10251","Чукотский автономный округ");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11375","Амурская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11398","Камчатский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11403","Магаданская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11409","Приморский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11443","Республика Саха (Якутия)");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11450","Сахалинская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11457","Хабаровский край");
	
	//Северо-Кавказский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11010","Республика Дагестан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11012","Республика Ингушетия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11013","Кабардино-Балкарская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11020","Карачаево-Черкесская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11021","Республика Северная Осетия — Алания");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11024","Чеченская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11069","Ставропольский край");

	
	СписокРегионов.СортироватьПоПредставлению();
	//ЭлементыФормы.СписокРегионов.СписокВыбора=СписокРегионов;
	//Регионы.ЗагрузитьЗначения(СписокРегионов.ВыгрузитьЗначения());
	Для каждого рег из СписокРегионов цикл
		нсп = Регионы.Добавить(); 
		ЗаполнитьЗначенияСвойств(нсп,рег);
	КонецЦикла;	

	Регионы.СортироватьПоПредставлению();
	
КонецПроцедуры	



Процедура ЗаполнитьСписокРегионовДляАвтоматическогоМониторинга()
	СписокРегионов.Очистить();
	//регионы с кодами яндекса
	//http://hmxblog.ya.ru/replies.xml?item_no=2780
		
	//ЦФО
	СписокРегионов = ДобавитьРегион(СписокРегионов,"1","Москва и Московская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10645","Белгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10650","Брянская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10658","Владимирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10672","Воронежская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10687","Ивановская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10693","Калужская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10699","Костромская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10705","Курская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10712","Липецкая область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10772","Орловская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10776","Рязанская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10795","Смоленская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10802","Тамбовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10819","Тверская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10832","Тульская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10841","Ярославская область");
	
	//Северо-Западный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10174","Санкт-Петербург и Ленинградская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10176","Ненецкий автономный округ");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10842","Архангельская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10853","Вологодская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10857","Калининградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10897","Мурманская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10904","Новгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10926","Псковская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10933","Республика Карелия");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10939","Республика Коми");
	
	//Южный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10946","Астраханская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10950","Волгоградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10995","Краснодарский край");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11004","Республика Адыгеяи");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11015","Республика Калмыкия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11029","Ростовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"977","Республика Крым");

	//Приволжский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11070","Кировская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11077","Республика Марий Эл");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11079","Нижегородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11084","Оренбургская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11095","Пензенская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11108","Пермский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11111","Республика Башкортостан");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11117","Республика Мордовия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11119","Республика Татарстан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11131","Самарская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11146","Саратовская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11148","Удмуртская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11153","Ульяновская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11156","Чувашская Республика");
	
	//Уральский федеральный округ
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11158","Курганская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11162","Свердловская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11176","Тюменская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11193","Ханты-Мансийский автономный округ - Югра");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11225","Челябинская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11232","Ямало-Ненецкий автономный округ");

	//Сибирский федеральный округ
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10231","Республика Алтай");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10233","Республика Тыва");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11235","Алтайский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11266","Иркутская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11282","Кемеровская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11309","Красноярский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11316","Новосибирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11318","Омская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11330","Республика Бурятия");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11340","Республика Хакасия");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11353","Томская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"21949","Забайкальский край");

	//Дальневосточный федеральный округ
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10243","Еврейская автономная область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"10251","Чукотский автономный округ");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11375","Амурская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11398","Камчатский край");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11403","Магаданская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11409","Приморский край");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11443","Республика Саха (Якутия)");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11450","Сахалинская область");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11457","Хабаровский край");
	
	//Северо-Кавказский федеральный округ
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11010","Республика Дагестан");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11012","Республика Ингушетия");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11013","Кабардино-Балкарская Республика");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11020","Карачаево-Черкесская Республика");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11021","Республика Северная Осетия — Алания");
	//СписокРегионов = ДобавитьРегион(СписокРегионов,"11024","Чеченская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11069","Ставропольский край");

	
	СписокРегионов.СортироватьПоПредставлению();
	//Регионы.ЗагрузитьЗначения(СписокРегионов.ВыгрузитьЗначения());
	Для каждого эл из СписокРегионов цикл
		нэл = Регионы.Добавить();
		ЗаполнитьЗначенияСвойств(нэл,эл);
	КонецЦикла;
	//ЭлементыФормы.СписокРегионов.СписокВыбора=СписокРегионов;
	Регионы.СортироватьПоПредставлению();
	
	
КонецПроцедуры

Функция ДобавитьРегион(Список,КодРегиона,НазваниеРегиона)
	Если Список.НайтиПоЗначению(КодРегиона)=неопределено тогда
		Список.Добавить(КодРегиона,НазваниеРегиона);
		//Регионы.Добавить(КодРегиона,НазваниеРегиона);
	КонецЕсли;
	возврат Список;
КонецФункции


Процедура ПриОткрытии()
	МаксСтавка=0.8;
КонецПроцедуры


Процедура КампанииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Красный = Новый Цвет( 255, 0, 0 );
	Зеленый = Новый Цвет( 0, 255, 0 );
	Желтый  = Новый Цвет( 255, 255, 0 );
	Если ДанныеСтроки.state="1" или ДанныеСтроки.state="Включен" Тогда
		ОформлениеСтроки.ЦветФона = Зеленый;
		ДанныеСтроки.state="Включен"
	ИначеЕсли 	ДанныеСтроки.state="2" или ДанныеСтроки.state="Выключен" Тогда
		ОформлениеСтроки.ЦветФона = Красный;
		ДанныеСтроки.state="Выключен"
	ИначеЕсли 	ДанныеСтроки.state="3" или ДанныеСтроки.state="Включается" Тогда
		ОформлениеСтроки.ЦветФона = Желтый;
		ДанныеСтроки.state="Включается"
	КонецЕсли; 
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	сп = ПолучитьРегионыПоДнюНедели(ПолеВвода1);
	сп.ВыбратьЭлемент();
КонецПроцедуры
УдалятьВременныеФайлы=истина;
WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");

СписокРегионов = новый СписокЗначений;