перем ДанныеРасшифровки1;

Процедура ДействияФормыДействие(Кнопка)
	СформироватьОтчет();
КонецПроцедуры

Процедура СформироватьОтчет()	Экспорт
	

	//ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[4];
	//ПараметрДанных.Значение = 0;
	//ПараметрДанных.Использование = Истина;
	
	//Договоры = Новый СписокЗначений;
	//Для Каждого Договор Из ОтборДоговоры Цикл
	//	Если Договор.Пометка Тогда
	//		Договоры.Добавить(Договор.Значение);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ПараметрДанныхСписокПоступлений = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[7];
	//ПараметрДанныхСписокПоступлений.Значение = Договоры;
	//ПараметрДанныхСписокПоступлений.Использование = Истина;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[5];
	ПараметрДанныхНачалоПериода.Значение = УчитыватьВзаимныеОбязательства;
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	
	
	
	
		
	
	
	Если СтепеньПроблемности = 1 Тогда //ДЗ
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
				//Сбрасывается настройка перенос/возврат
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		

		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: дз";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДолга");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = 0;
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПросроченногоДолга");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = 0;
		
				//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

	ИначеЕсли СтепеньПроблемности = 2 Тогда //ПДЗ
				
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

				//Сбрасывается настройка перенос/возврат
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		
		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаПросроченногоДолга");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = 0;
		
				//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

	ИначеЕсли СтепеньПроблемности = 3 Тогда  //Суды
		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

				//Сбрасывается настройка перенос/возврат
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		
		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: суды";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаПередачиДокументовВЮрОтдел");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = '00010101000000';
		
		НовыйЭлементГруппыОтбора2 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора2.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйЭлементГруппыОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачалаСудебногоПроцесса");
		НовыйЭлементГруппыОтбора2.Использование = Истина;
		НовыйЭлементГруппыОтбора2.ПравоеЗначение = '00010101000000 ';
		
		НовыйЭлементГруппыОтбора3 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора3.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		НовыйЭлементГруппыОтбора3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончанияСудебногоПроцесса");
		НовыйЭлементГруппыОтбора3.Использование = Истина;
		НовыйЭлементГруппыОтбора3.ПравоеЗначение = '00010101000000';
		
				//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

	ИначеЕсли СтепеньПроблемности = 4 Тогда //Вся
		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
       		//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

				//Сбрасывается настройка перенос/возврат
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		
	ИначеЕсли СтепеньПроблемности = 5 Тогда //КЗ
		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: кз";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаДолга");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = 0;
		ИначеЕсли СтепеньПроблемности = 6 Тогда //ОТХ		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		//Сбрасывается настройка перенос/возврат
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;


		
		
		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: отх";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.ТипДоговора");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		список = новый списокЗначений;
		список.Добавить(Справочники.ТипыДоговоров.ПеремещениеОТХ);
		список.Добавить(Справочники.ТипыДоговоров.ОтсрочкаОТХ);
		НовыйЭлементГруппыОтбора1.ПравоеЗначение = список;
	    	ИначеЕсли СтепеньПроблемности = 7 Тогда //пернос/возврат		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		       		//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		
		НоваяГруппаОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НоваяГруппаОтбора.Использование = Истина;
		НоваяГруппаОтбора.ИдентификаторПользовательскойНастройки = "Степень проблемности: перенос/возврат";
		
		НовыйЭлементГруппыОтбора1 = НоваяГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементГруппыОтбора1.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		НовыйЭлементГруппыОтбора1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.Наименование");
		НовыйЭлементГруппыОтбора1.Использование = Истина;
		НовыйЭлементГруппыОтбора1.ПравоеЗначение ="перенос/возврат";

		
	КонецЕсли;
	
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.Наименование");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
		НовыйЭлементОтбора.ПравоеЗначение = "НДС";

	Если не ДолгКонтрагентаФирме тогда	
		Если ЗначениеЗаполнено(глТекущийПользователь.НаправлениеПродаж) Тогда
			
			Если НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко" И НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко Е.Д. (снабжение)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева И.Г." и НЕ СокрЛП(глТекущийПользователь.Код) = "Горохов" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева (Новый)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Пефти Сергей" Тогда //видит всё
				i = 0;
				Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ЛевоеЗначение) = "НаправлениеПродаж" Тогда
						Если СокрЛП(глТекущийПользователь.Код) = "Филатова С.В." Тогда
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
							СписокНаправлений = Новый СписокЗначений;
							СписокНаправлений.Добавить(глТекущийПользователь.НаправлениеПродаж);
							СписокНаправлений.Добавить(Справочники.НаправленияПродаж.ЦентрРоссии);
							СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("18"));//5. Юг
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = СписокНаправлений;
						Иначе
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					i = i + 1;
				КонецЦикла;
				Если i = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					Если СокрЛП(глТекущийПользователь.Код) = "Филатова С.В." Тогда
						НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						СписокНаправлений = Новый СписокЗначений;
						СписокНаправлений.Добавить(глТекущийПользователь.НаправлениеПродаж);
						СписокНаправлений.Добавить(Справочники.НаправленияПродаж.ЦентрРоссии);
						СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("18"));//5. Юг
						НовыйЭлементОтбора.ПравоеЗначение = СписокНаправлений;
					Иначе
						НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ РольДоступна("ПолныеПрава") и НЕ РольДоступна("Кассир") Тогда
				i = 0;
				Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ЛевоеЗначение) = "Менеджер" Тогда
						//+++Шарафутдинов по задаче 47131 
						Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
							
							СЗМенеджеров = ПолучитьМенеджеровКонтрагентовПоПОльзователю(глТекущийПользователь);
							
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = СЗМенеджеров;
						иначе
						//--- Шарафутдинов по задаче 47131 	
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = глТекущийПользователь;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					i = i + 1;
				КонецЦикла;
				
				
				
				Если i = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("Менеджер");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					
					//+++Шарафутдинов по задаче 47131 
					Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
						
						СЗМенеджеров = ПолучитьМенеджеровКонтрагентовПоПОльзователю(глТекущийПользователь);
											
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						НовыйЭлементОтбора.ПравоеЗначение = СЗМенеджеров;
					иначе
						//--- Шарафутдинов по задаче 47131 						
						
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				j = 0;
				Пока j < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ЛевоеЗначение) = "Подразделение" Тогда
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).Использование = Истина;
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ПравоеЗначение = глТекущийПользователь.ОсновноеПодразделение;
						Прервать;
					КонецЕсли;
					j = j + 1;
				КонецЦикла;
				
				Если j = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("Подразделение");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	
	//КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title").Значение = "Задолженность на дату: " + Строка(Лев(Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекДата")).Значение,10));
	
	//ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[0];
	//ПараметрДанныхНачалоПериода.Значение = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекДата")).Значение;
	//ПараметрДанныхНачалоПериода.Использование = Истина;
	
	КонтрагентОтборУстановитьДляСКД();
	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
		
	ЭлементыФормы.Результат.Очистить();
	ЭлементыФормы.Результат.НачатьАвтогруппировкуСтрок();	
	ДокументРезультат = ЭлементыФормы.Результат;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ЭлементыФормы.Результат.ЗакончитьАвтогруппировкуСтрок();
	
	У = ДокументРезультат.КоличествоУровнейГруппировокСтрок() - 1;
	Пока У > 1 Цикл
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(У);
		У = У - 1;
	КонецЦикла;
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1);
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);

	//ЭлементыФормы.Результат.ФиксацияСверху = 3;	
	
КонецПроцедуры


функция ПолучитьМенеджеровКонтрагентовПоПОльзователю(Пользователь)
	
	СписокКонтрагентов = ПолучитьСписокКонтрагентовМенеджераПоРегиону(Пользователь);
	МассивЭлементов = СписокКонтрагентов.ВыгрузитьЗначения();
	ТЗ = новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Менеджер");
	для каждого стр из МассивЭлементов цикл
		новСтр = ТЗ.Добавить();
		новСтр.Менеджер = стр.ОсновнойМенеджерКонтрагента;
	КонецЦикла;
	
	ТЗ.Свернуть("Менеджер");
	

	СписокМенеджеров = новый СписокЗначений;
	
	для каждого стр из ТЗ цикл
		СписокМенеджеров.Добавить(стр.Менеджер);
	КонецЦикла;
	
	возврат СписокМенеджеров;
	
КонецФункции


Процедура ПриОткрытии()
	//ВариантОтчета = 1;
	Если ВариантОтчета = 0 тогда
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Иначе
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных1");
	КонецЕсли;
	
	Если ВариантОтчета  > 0 Тогда
        КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(СхемаКомпоновкиДанных.ВариантыНастроек[1].Имя).Настройки);
	иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя).Настройки);
	КонецЕсли;
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДатаОтчета = КонецДня(ТекущаяДата());
	СтепеньПроблемности = 4;
	УстановитьНастройки();
	
	КонтрагентДоступностьОтбораУстановить();
	СписокВыбораКонтрагент = ПолучитьВидыСравненияДляКонтрагента();
	ЭлементыФормы.ПолеВидаСравненияКонтрагент.СписокВыбора = СписокВыбораКонтрагент;
	ЭлементыФормы.ПолеВидаСравненияКонтрагент.Значение = СписокВыбораКонтрагент[0].Значение;
	КонтрагентЗначениеВидимостьУстановить();
	
	
КонецПроцедуры

Процедура УстановитьНастройки()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	НаправленияПродаж.Руководитель
	//	|ИЗ
	//	|	Справочник.НаправленияПродаж КАК НаправленияПродаж";

	//Результат = Запрос.Выполнить().Выгрузить();
	//списокРуководителей = Результат.ВыгрузитьКолонку("Руководитель");
	//
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	//ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	//ПараметрДанныхКонецПериода.Значение = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	//ПараметрДанныхКонецПериода.Использование = Истина;
	
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[2];
	ПараметрДанныхКонецПериода.Значение = Справочники.ТипыДоговоров.Пени;
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[3];
	ПараметрДанныхКонецПериода.Значение = "%Предупредительное письмо%";
	ПараметрДанныхКонецПериода.Использование = Истина;
	//
	//ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[5];
	//ПараметрДанныхКонецПериода.Значение = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	//ПараметрДанныхКонецПериода.Использование = Истина;

	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[4];
	ПараметрДанныхКонецПериода.Значение = Перечисления.ВидыСобытий.КомментарийПДЗ;
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	Если КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодЗвонков") = Неопределено тогда
		ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[5];
		ПараметрДанныхНачалоПериода.Значение = УчитыватьВзаимныеОбязательства;
		ПараметрДанныхНачалоПериода.Использование = Истина;
		
	КонецЕсли;
	
	//+Лукьяненков 18.01.2018 //Убрал по задаче от Филатовой Светланы
	//ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[6];
	//ПараметрДанныхКонецПериода.Значение = "%Письмо о возникновении ПДЗ%";
	//ПараметрДанныхКонецПериода.Использование = Истина;
	//-Лукьяненков 18.01.2018
	Если не ДолгКонтрагентаФирме тогда
		
		Если ЗначениеЗаполнено(глТекущийПользователь.НаправлениеПродаж) Тогда
			Если НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко" И НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко Е.Д. (снабжение)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева И.Г." и НЕ СокрЛП(глТекущийПользователь.Код) = "Горохов" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева (Новый)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Пефти Сергей" Тогда //видит всё
				Если СокрЛП(глТекущийПользователь.Код) = "Филатова С.В." Тогда
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					СписокНаправлений = Новый СписокЗначений;
					СписокНаправлений.Добавить(глТекущийПользователь.НаправлениеПродаж);
					СписокНаправлений.Добавить(Справочники.НаправленияПродаж.ЦентрРоссии);
					НовыйЭлементОтбора.ПравоеЗначение = СписокНаправлений;
					//ИначеЕсли списокРуководителей.Найти(глТекущийПользователь) <>  неопределено тогда	
					//	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//	ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
					//	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					//	НовыйЭлементОтбора.Использование = Истина;
					//	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					//	НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
				Иначе	
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
					
					//НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//ПолеОтбора = Новый ПолеКомпоновкиДанных("Менеджер");
					//НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					//НовыйЭлементОтбора.Использование = Истина;
					//НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					//НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора = Новый ПолеКомпоновкиДанных("Менеджер");
				НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
				НовыйЭлементОтбора.Использование = Истина;
				//+++Шарафутдинов по задаче 47131 
				Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
					
					СЗМенеджеров = ПолучитьМенеджеровКонтрагентовПоПОльзователю(глТекущийПользователь);
					
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
					НовыйЭлементОтбора.ПравоеЗначение = СЗМенеджеров;
				иначе
					//--- Шарафутдинов по задаче 47131 						
					
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	
	Если ВариантОтчета = 1  тогда
		
	Если глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("21");

	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("20");
		
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Марешева И.Г.") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение =  Справочники.НаправленияПродаж.НайтиПоКоду("22");
		
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Лигута А.С.(руководитель)") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("4");
		
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Лигута А.С.") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение =  Справочники.НаправленияПродаж.НайтиПоКоду("4");
			
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Серков") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("26");
		
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Красюк Н.В.(руководитель)") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("5");
			
	ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Красюк Н.В.") тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("5");
		
	//ИначеЕсли глТекущийПользователь =  Справочники.Пользователи.НайтиПоКоду("Миронычев А.Е.") тогда
	//	
	//	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
	//	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
	//	НовыйЭлементОтбора.Использование = Истина;
	//	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//	НовыйЭлементОтбора.ПравоеЗначение = Справочники.НаправленияПродаж.НайтиПоКоду("26");
		
	КонецЕсли;
	
	КонецЕсли;
	
	Если СтепеньПроблемности = 1 Тогда
	ИначеЕсли СтепеньПроблемности = 2 Тогда
	ИначеЕсли СтепеньПроблемности = 3 Тогда
		 Сообщить("2");
	ИначеЕсли СтепеньПроблемности = 4 Тогда
	КонецЕсли;
		
	ПараметрыВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода;
	ПараметрВыводПараметров = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	ПараметрВыводПараметров.Использование = Истина;
	ПараметрВыводПараметров.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title").Значение = "Задолженность на дату: " + Строка(Лев(ПараметрДанныхНачалоПериода.Значение,10)); 
	
	Настройки = КомпоновщикНастроек.Настройки;
	
КонецПроцедуры

Функция ПолучитьВидыСравненияДляКонтрагента()
	
	Спис = Новый СписокЗначений;
	
	Спис.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	Спис.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии);
	Спис.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	Возврат Спис;
	
КонецФункции // ПолучитьВидыСравненияДляКонтрагента()

Процедура ПолеВидаСравненияКонтрагентПриИзменении(Элемент)
	
	КонтрагентЗначениеВидимостьУстановить();
	
	КонтрагентОтборУстановитьДляСКД();
	
КонецПроцедуры

Процедура КонтрагентЗначениеВидимостьУстановить()
	
	ВидСравненияКонтрагент = ЭлементыФормы.ПолеВидаСравненияКонтрагент.Значение;
	
	Если ВидСравненияКонтрагент = ВидСравненияКомпоновкиДанных.Равно 
		ИЛИ ВидСравненияКонтрагент = ВидСравненияКомпоновкиДанных.НеРавно 
		ИЛИ ВидСравненияКонтрагент = ВидСравненияКомпоновкиДанных.ВИерархии 
		ИЛИ ВидСравненияКонтрагент = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		
		ЭлементыФормы.Контрагент.Видимость       = Истина;
		ЭлементыФормы.КонтрагентСписок.Видимость = Ложь;
		
	Иначе
		
		ЭлементыФормы.Контрагент.Видимость       = Ложь;
		ЭлементыФормы.КонтрагентСписок.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентЗначениеВидимостьУстановить()

Процедура КонтрагентДоступностьОтбораУстановить()
	
	ЭлементыФормы.ПолеВидаСравненияКонтрагент.Доступность = ФлажокОтборКонтрагент;
	ЭлементыФормы.Контрагент.Доступность                  = ФлажокОтборКонтрагент;
	ЭлементыФормы.КонтрагентСписок.Доступность            = ФлажокОтборКонтрагент;
	
КонецПроцедуры // КонтрагентДоступностьОтбораУстановить()

Процедура ФлажокОтборКонтрагентПриИзменении(Элемент)
	
	КонтрагентДоступностьОтбораУстановить();
	
	КонтрагентОтборУстановитьДляСКД();
	
КонецПроцедуры

Функция КонтрагентПолучитьЗначениеДляОтбора()
	
	ЗначОтбора = Неопределено;
	
	Если ЭлементыФормы.Контрагент.Видимость Тогда
		ЗначОтбора = Контрагент;
	Иначе
		ЗначОтбора = КонтрагентСписок;
	КонецЕсли;
	
	Возврат ЗначОтбора;
	
КонецФункции // КонтрагентПолучитьЗначениеДляОтбора()

Функция КонтрагентПолучитьОтборСКД()
	
	КонтрагентПолеСКД = Новый ПолеКомпоновкиДанных("Контрагент");
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	КонтрагентОтбор = Неопределено;
	Для Каждого ТекОтбор Из ЭлементыОтбора Цикл
		Если ТекОтбор.ЛевоеЗначение = КонтрагентПолеСКД Тогда
			КонтрагентОтбор = ТекОтбор; Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КонтрагентОтбор;
	
КонецФункции // КонтрагентПолучитьОтборСКД()

Процедура КонтрагентОтборУстановитьДляСКД()
	
	КонтрагентОтбор = КонтрагентПолучитьОтборСКД();
		
	Если ФлажокОтборКонтрагент Тогда
		
		Если КонтрагентОтбор = Неопределено Тогда
			КонтрагентОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		КонтрагентОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Контрагент");
		КонтрагентОтбор.Использование  = Истина;
		КонтрагентОтбор.ВидСравнения   = ПолеВидаСравненияКонтрагент;
		КонтрагентОтбор.ПравоеЗначение = КонтрагентПолучитьЗначениеДляОтбора();
		
	Иначе
		
		Если НЕ КонтрагентОтбор = Неопределено Тогда
			КонтрагентОтбор.Использование = Ложь;
			ЭлементыФормы.ПолеВидаСравненияКонтрагент.Значение = КонтрагентОтбор.ВидСравнения;
			КонтрагентЗначениеВидимостьУстановить();
			Если ЭлементыФормы.Контрагент.Видимость Тогда
				Контрагент = КонтрагентОтбор.ПравоеЗначение;
			Иначе
				КонтрагентСписок = КонтрагентОтбор.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КонтрагентОтборУстановитьДляСКД()

Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентОтборУстановитьДляСКД();
	
КонецПроцедуры

Процедура КонтрагентСписокПриИзменении(Элемент)
	
	КонтрагентОтборУстановитьДляСКД();
	
КонецПроцедуры

Процедура ДействияФормыСтандартныйОтчет(Кнопка)
	
Если ВариантОтчета = 1 тогда
		ВариантОтчета=0;
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя).Настройки);
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		ДатаОтчета = КонецДня(ТекущаяДата());
		СтепеньПроблемности = 4;
		УстановитьНастройки();
	Иначе
		ВариантОтчета=1;
		СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных1");
	    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(СхемаКомпоновкиДанных.ВариантыНастроек[1].Имя).Настройки);
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		ДатаОтчета = КонецДня(ТекущаяДата());
		СтепеньПроблемности = 4;
		УстановитьНастройки();	
	КонецЕсли;
	
	ИзменитьОтчет();

КонецПроцедуры

Процедура ДолгКонтрагентаФирмеПриИзменении(Элемент)
	
	ИзменитьОтчет();

КонецПроцедуры


Процедура	ИзменитьОтчет()
	
	Если ДолгКонтрагентаФирме Тогда
   		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(?(ВариантОтчета = 1, СхемаКомпоновкиДанных.ВариантыНастроек[2].Имя, СхемаКомпоновкиДанных.ВариантыНастроек[1].Имя)).Настройки);  
		Если глТекущийПользователь.НаправлениеПродаж <> Справочники.НаправленияПродаж.ПустаяСсылка() тогда
						
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|Пользователи.Ссылка
		|ИЗ
		|Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|Пользователи.НаправлениеПродаж В
		|(ВЫБРАТЬ
		|	НаправленияПродаж.Ссылка
		|ИЗ
		|	Справочник.НаправленияПродаж КАК НаправленияПродаж
		|ГДЕ
		|	НаправленияПродаж.Руководитель = &Руководитель)";
		
		Запрос.УстановитьПараметр("Руководитель", глТекущийПользователь);
		ОтветственноеЛицо = Запрос.Выполнить().Выгрузить();
		СписокЗн = Новый СписокЗначений;
		Если ОтветственноеЛицо.Количество() = 0 Тогда
			ОтветственноеЛицо = глТекущийПользователь;
			СписокЗн.Добавить(глТекущийПользователь);
		Иначе
			
			Для Каждого стр из ОтветственноеЛицо Цикл 
				СписокЗн.Добавить(Стр.Ссылка);	
			КонецЦикла;
 
		КонецЕсли;	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Владелец КАК Контрагент
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.ОтветственноеЛицо В(&ОтветственноеЛицо)
			|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
			|	И ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента В(&ОсновнойМенеджерКонтрагента)";
        Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
		Запрос.УстановитьПараметр("ОсновнойМенеджерКонтрагента", ОтветственноеЛицо);
		Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		Результат = Запрос.Выполнить().Выгрузить();
		СписокК = Новый СписокЗначений;
		Для Каждого стр из Результат Цикл 
			СписокК.Добавить(Стр.Контрагент);	
		КонецЦикла;
		КонтрагентОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонтрагентОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Контрагент");
		КонтрагентОтбор.Использование  = Истина;
		КонтрагентОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		КонтрагентОтбор.ПравоеЗначение = СписокК;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Отбор.Элементы.Получить(0).элементы.получить(0).элементы.получить(0);
       
        НовыйЭлементОтбора.ПравоеЗначение = СписокЗн;
		//ПараметрДанныхМенеджер = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[7];
		//ПараметрДанныхМенеджер.Значение =  ОтветственноеЛицо;;
		//ПараметрДанныхМенеджер.Использование = Истина;
		   КонецЕсли;
        УстановитьНастройки();
		
		Если ПДЗНал тогда
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.Наименование");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		НовыйЭлементОтбора.ПравоеЗначение = "*";

        КонецЕсли;
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.ВариантыНастроек.Найти(?(ВариантОтчета = 1, СхемаКомпоновкиДанных.ВариантыНастроек[1].Имя, СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя)).Настройки);
		УстановитьНастройки();
		
		Если ПДЗНал тогда
			НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.Наименование");
			НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
			НовыйЭлементОтбора.ПравоеЗначение = "*";

        КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПДЗНалПриИзменении(Элемент)
	ИзменитьОтчет();

КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура КонтрагентОТХЗначениеВидимостьУстановить()
	
	ВидСравненияКонтрагентОТХ = ЭлементыФормы.ПолеВидаСравненияКонтрагентОТХ.Значение;
	
	Если ВидСравненияКонтрагентОТХ = ВидСравнения.Равно 
		ИЛИ ВидСравненияКонтрагентОТХ = ВидСравнения.НеРавно 
		ИЛИ ВидСравненияКонтрагентОТХ = ВидСравнения.ВИерархии 
		ИЛИ ВидСравненияКонтрагентОТХ = ВидСравнения.НеВИерархии Тогда
		
		ЭлементыФормы.КонтрагентОТХ.Видимость       = Истина;
		ЭлементыФормы.КонтрагентСписокОТХ.Видимость = Ложь;
		
	Иначе
		
		ЭлементыФормы.КонтрагентОТХ.Видимость       = Ложь;
		ЭлементыФормы.КонтрагентСписокОТХ.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентЗначениеВидимостьУстановить()


Процедура ПолеВидаСравненияКонтрагентОТХПриИзменении(Элемент)
	ФлажокОтборКонтрагентОТХ = Истина;
	КонтрагентОТХЗначениеВидимостьУстановить();
КонецПроцедуры


Процедура СформироватьНажатие(Элемент)
	СхемаКомпоновкиДанных1 = ПолучитьМакет("ОТХ");
	
	ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.Началопериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НачПериода;
	ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.конецПериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = КонецДня(КонПериода);
	
	
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета1 = Новый КомпоновщикМакетаКомпоновкиДанных;
	//КомпоновщикНастроек1.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных1)); 
	//КомпоновщикНастроек1.ЗагрузитьНастройки(СхемаКомпоновкиДанных1.НастройкиПоУмолчанию); 

	
	
	Настройки = СхемаКомпоновкиДанных1.НастройкиПоУмолчанию;
	Настройки.Отбор.Элементы.Очистить();   //Структура[0].Структура[0].
	
	Если ФлажокОтборКонтрагентОТХ тогда
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоговорКонтрагентаВладелец"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ЭлементыФормы.ВидСравненияОТХ.Значение))," ","")];;
		Если ВидСравненияОТХ = ВидСравнения.Равно 
		ИЛИ  ВидСравненияОТХ = ВидСравнения.НеРавно 
		ИЛИ  ВидСравненияОТХ = ВидСравнения.ВИерархии 
		ИЛИ  ВидСравненияОТХ = ВидСравнения.НеВИерархии Тогда
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОТХ;
		иначе
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентСписокОТХ;
		конецЕсли;
	конецЕсли;
	   если безПродаж тогда
	    НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоПродажи"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка("Равно"))," ","")];;
		НовыйЭлементОтбора.ПравоеЗначение = 0;
	   конецЕсли;
	МакетКомпоновки1 = КомпоновщикМакета1.Выполнить(СхемаКомпоновкиДанных1, СхемаКомпоновкиДанных1.ВариантыНастроек.Основной.Настройки, ДанныеРасшифровки1);
	
	ПроцессорКомпоновкиДанных1 = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных1.Инициализировать(МакетКомпоновки1, , ДанныеРасшифровки1,истина);
	ЭлементыФормы.РезультатОТХ.Очистить();
	ПроцессорВывода1 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода1.УстановитьДокумент(ЭлементыФормы.РезультатОТХ);
	ПроцессорВывода1.Вывести(ПроцессорКомпоновкиДанных1);


КонецПроцедуры


Процедура ДействияФормыДействиеПДЗвонки(Кнопка)
	
	СхемаКомпоновкиДанных =ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхСоЗвонками");
	
		
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДатаОтчета = КонецДня(ТекущаяДата());
	СтепеньПроблемности = 4;
	УстановитьНастройки();
	
	//другое расположение параметров.
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[3];
	ПараметрДанныхНачалоПериода.Значение = УчитыватьВзаимныеОбязательства;
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	
	// Вставить содержимое обработчика.
	Настройки = КомпоновщикНастроек.Настройки;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхНачалоПериода.Значение = КонецДня(ДатаОтчета);
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	//ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[5];
	//ПараметрДанныхНачалоПериода.Значение = УчитыватьВзаимныеОбязательства;
	//ПараметрДанныхНачалоПериода.Использование = Истина;
ПараметрДанныхНачалоПериодаЗвонки  = Настройки.ПараметрыДанных.Элементы.Найти("ПериодЗвонков");
	ПериодЗвонков = ПараметрДанныхНачалоПериодаЗвонки.Значение;
	
	
	
	
	
	//ИначеЕсли СтепеньПроблемности = 4 Тогда //Вся
		
		//Сбрасывается настройка дз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: дз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка пдз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: пдз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		
		//Сбрасывается настройка суды
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: суды" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
		//Сбрасывается настройка кз
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: кз" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;
       		//Сбрасывается настройка отх
		i = 0;
		Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
			Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ИдентификаторПользовательскойНастройки = "Степень проблемности: отх" Тогда
					КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(i);
				КонецЕсли;
			КонецЕсли;
			i = i + 1;
		КонецЦикла;

		
	
	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.Наименование");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
		НовыйЭлементОтбора.ПравоеЗначение = "НДС";
		
			
				

	Если не ДолгКонтрагентаФирме тогда	
		Если ЗначениеЗаполнено(глТекущийПользователь.НаправлениеПродаж) Тогда
			
			Если НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко" И НЕ СокрЛП(глТекущийПользователь.Код) = "Бондаренко Е.Д. (снабжение)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева И.Г." и НЕ СокрЛП(глТекущийПользователь.Код) = "Горохов" и НЕ СокрЛП(глТекущийПользователь.Код) = "Марешева (Новый)" и НЕ СокрЛП(глТекущийПользователь.Код) = "Пефти Сергей" Тогда //видит всё
				i = 0;
				Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если ТипЗНЧ(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i)) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
						Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ЛевоеЗначение) = "НаправлениеПродаж" Тогда
							Если СокрЛП(глТекущийПользователь.Код) = "Филатова С.В." Тогда
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
								СписокНаправлений = Новый СписокЗначений;
								СписокНаправлений.Добавить(глТекущийПользователь.НаправлениеПродаж);
								СписокНаправлений.Добавить(Справочники.НаправленияПродаж.ЦентрРоссии);
								СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("18"));//5. Юг
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = СписокНаправлений;
							Иначе
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
								КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					i = i + 1;
				КонецЦикла;
				Если i = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					Если СокрЛП(глТекущийПользователь.Код) = "Филатова С.В." Тогда
						НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						СписокНаправлений = Новый СписокЗначений;
						СписокНаправлений.Добавить(глТекущийПользователь.НаправлениеПродаж);
						СписокНаправлений.Добавить(Справочники.НаправленияПродаж.ЦентрРоссии);
						СписокНаправлений.Добавить(Справочники.НаправленияПродаж.НайтиПоКоду("18"));//5. Юг
						НовыйЭлементОтбора.ПравоеЗначение = СписокНаправлений;
					Иначе
						НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора = Новый ПолеКомпоновкиДанных("НаправлениеПродаж");
						НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
						НовыйЭлементОтбора.Использование = Истина;
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.НаправлениеПродаж;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ РольДоступна("ПолныеПрава") и НЕ РольДоступна("Кассир") Тогда
				i = 0;
				Пока i < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ЛевоеЗначение) = "Менеджер" Тогда
						//+++Шарафутдинов по задаче 47131 
						Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
							
							СЗМенеджеров = ПолучитьМенеджеровКонтрагентовПоПОльзователю(глТекущийПользователь);
							
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = СЗМенеджеров;
						иначе
						//--- Шарафутдинов по задаче 47131 	
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).Использование = Истина;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(i).ПравоеЗначение = глТекущийПользователь;
						КонецЕсли;
						Прервать;
					КонецЕсли;
					i = i + 1;
				КонецЦикла;
				
				
				
				Если i = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("Менеджер");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					
					//+++Шарафутдинов по задаче 47131 
					Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
						
						СЗМенеджеров = ПолучитьМенеджеровКонтрагентовПоПОльзователю(глТекущийПользователь);
											
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						НовыйЭлементОтбора.ПравоеЗначение = СЗМенеджеров;
					иначе
						//--- Шарафутдинов по задаче 47131 						
						
						НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если НЕ РольДоступна("ПолныеПрава") Тогда
				j = 0;
				Пока j < КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Цикл 
					Если Строка(КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ЛевоеЗначение) = "Подразделение" Тогда
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).Использование = Истина;
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						КомпоновщикНастроек.Настройки.Отбор.Элементы.Получить(j).ПравоеЗначение = глТекущийПользователь.ОсновноеПодразделение;
						Прервать;
					КонецЕсли;
					j = j + 1;
				КонецЦикла;
				
				Если j = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() Тогда
					НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора = Новый ПолеКомпоновкиДанных("Подразделение");
					НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
					НовыйЭлементОтбора.Использование = Истина;
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь.ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	
	//КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Title").Значение = "Задолженность на дату: " + Строка(Лев(Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекДата")).Значение,10));
	
	//ПараметрДанныхНачалоПериода = Настройки.ПараметрыДанных.Элементы[0];
	//ПараметрДанныхНачалоПериода.Значение = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекДата")).Значение;
	//ПараметрДанныхНачалоПериода.Использование = Истина;
	
	КонтрагентОтборУстановитьДляСКД();
	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	
	ДатаНач = НачалоДня((ТекущаяДата()-60*60*24*ПериодЗвонков));
	
	ВнешниеНаборыДанных = ВернутьДанныеПоЗвонкам(ДатаНач, ТекущаяДата()); //14 дней
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных ,ДанныеРасшифровки);
		
	ЭлементыФормы.РезультатПДЗвонки.Очистить();
	ЭлементыФормы.РезультатПДЗвонки.НачатьАвтогруппировкуСтрок();	
	ДокументРезультат = ЭлементыФормы.РезультатПДЗвонки;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ЭлементыФормы.РезультатПДЗвонки.ЗакончитьАвтогруппировкуСтрок();
	
	У = ДокументРезультат.КоличествоУровнейГруппировокСтрок() - 1;
	Пока У > 1 Цикл
		ДокументРезультат.ПоказатьУровеньГруппировокСтрок(У);
		У = У - 1;
	КонецЦикла;
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1);
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);

	//ЭлементыФормы.Результат.ФиксацияСверху = 3;	
	
КонецПроцедуры



Процедура РезультатОТХОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
    Перем ВыполненноеДействие;
    СтандартнаяОбработка=Ложь;
		СхемаКомпоновкиДанных1 = ПолучитьМакет("ОТХ");

    ОбработкаРасшифровки1=Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки1,Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных1));
    ДоступныеДействия=Новый Массив; // заполняем доступные действия, если параметр не указан, то будут доступны все действия
    ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	Настройки=ОбработкаРасшифровки1.Выполнить(Расшифровка,ВыполненноеДействие,,);
	   Если ВыполненноеДействие = "Открыть значение" Тогда
   	 ЭлементРасшифровкиДанных = ДанныеРасшифровки1.Элементы[Расшифровка];
   	 ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
   	 ОбработкаРасшифровки1.ОткрытьЗначение(ЭлементРасшифровкиДанных.Идентификатор, новый ПолеКомпоновкиДанных(ЭлементРасшифровкиДанныхПоля.Поле));
    КонецЕсли;       
	
	
КонецПроцедуры


Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя  = "КонтрольРаботыПДЗ" тогда
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхСоЗвонками");
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КолДнейПДЗ = 14;
		СуммаПДЗОт = 300000;
	иначе
		ПриОткрытии();
	КонецЕсли;
КонецПроцедуры


Процедура РезультатПДЗвонкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	перем  ВыполненноеДействие;
	
	СтандартнаяОбработка = Ложь;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхСоЗвонками");
   //Создадим и инициализируем обработчик расшифровки                    
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
                                                                         
    ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	
	// Добавляем собственные действия 
	Нов = Новый СписокЗначений;
	ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
	ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
	Если  ЭлементРасшифровкиДанныхПоля.Поле = "Контрагент"  тогда
		СпрКонтрагент = ЭлементРасшифровкиДанныхПоля.Значение;
		//Нов.Добавить("Занести план");
		Настройки = КомпоновщикНастроек.Настройки;
		ПараметрДанныхНачалоПериодаЗвонки  = Настройки.ПараметрыДанных.Элементы.Найти("ПериодЗвонков");
		ПериодЗвонков = ПараметрДанныхНачалоПериодаЗвонки.Значение;
		
		
		формаВыбора = ПолучитьФорму("ФормаВыбора");
		формаВыбора.Клиент = СпрКонтрагент;
		формаВыбора.датаНачТ = НачалоДня((ТекущаяДата()-60*60*24*ПериодЗвонков));
		формаВыбора.датаКонТ = ТекущаяДата();
		формаВыбора.датаНач = НачалоГода(?(ЗначениеЗаполнено(ЭтаФорма.ДатаОтчета),ЭтаФорма.ДатаОтчета,ТекущаяДата()));
		формаВыбора.датаКон = ?(ЗначениеЗаполнено(ЭтаФорма.ДатаОтчета),ЭтаФорма.ДатаОтчета,ТекущаяДата());
		формаВыбора.Открыть();

		
	конецЕсли;
	
  //  
    
 // Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,Нов);
  
  
  
  
  //Если ВыполненноеДействие = "Занести план" Тогда
  //  
  //конецЕсли;


	
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить("Открыть", "Открыть документ...",,БиблиотекаКартинок.ОткрытьДокумент);
		СЗ.Добавить("ОткрытьДвижения", "Открыть взаиморасчеты по документу...",,БиблиотекаКартинок.Отчет);
		СЗ.Добавить("ОткрытьСтруктуру", "Открыть структуру подчиненности документа...",,БиблиотекаКартинок.ТолькоСкрепка);
		
		Выбор = ВыбратьИзМеню(СЗ, Элемент);
		
		Если Выбор = Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		Иначе
			
			Если Выбор.Значение <> "Открыть" Тогда
				
				Если Выбор.Значение = "ОткрытьДвижения" Тогда
					
					СтандартнаяОбработка = Ложь;
					ВывестиВзаиморасчетыПоДокументу(Расшифровка);
					
				ИначеЕсли Выбор.Значение = "ОткрытьСтруктуру" Тогда
					
					СтандартнаяОбработка = Ложь;
					ПоказатьСтруктуруПодчиненностиДокумента(Расшифровка);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
//-----------------------------График по менеджеру за год----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Пользователи")	тогда
		
		   СтандартнаяОбработка = Ложь;
		   
		   //Если Дебеторская <> 1 тогда
		   //	Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
		   //	возврат;
		   //КонецЕсли;	   
		   //
		   //формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   //
		   //формаГрафик.ответственноеЛицо = Расшифровка;
		   //формаГрафик.ФлМен = Истина;
		   //
		   //формаГрафик.Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
		   //формаГрафик.ФлКонтр = Ложь;
		   //
		   //
		   //// НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		   //формаГрафик.НачДата = ЭтаФорма.ДатаНач;
		   //формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		   //формаГрафик.Открыть();
		   //формаГрафик.отчетВывести();

//-----------------------------График по группе менеджеров ----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Подразделения") тогда
		
		   СтандартнаяОбработка = Ложь;
	       //формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   
		   //Если Дебеторская <> 1 тогда
		   //	Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
		   //	возврат;
		   //КонецЕсли;	   

		   //-------------Ограничения по подразделениям--------------------------------------
		   //Если НЕ РольДоступна("ПолныеПрава") тогда   // защита от просмотра данных по чужим подразделениям!
		   //	Если глТекущийПользователь.ОсновноеПодразделение <> Расшифровка тогда
		   // 	Предупреждение("Вам доступен просмотр только Вашего подразделения!");
		   // 	Возврат;
		   //	КонецЕсли; 	
		   //КонецЕсли; 	
		   
		   //-------------------все сотрудники подразделения----------------------
		   СписокСотрудников = новый СписокЗначений;
		   Запрос = Новый Запрос;
		   Запрос.Текст = "ВЫБРАТЬ
		   |	Пользователи.Ссылка
		   |ИЗ
		   |	Справочник.Пользователи КАК Пользователи
		   |ГДЕ
		   |	Пользователи.ОсновноеПодразделение = &ОсновноеПодразделение";
		   Запрос.УстановитьПараметр("ОсновноеПодразделение", Расшифровка);
		   Результат = Запрос.Выполнить();
		   Выборка   = Результат.Выгрузить();
		   СписокСотрудников.ЗагрузитьЗначения(Выборка.ВыгрузитьКолонку("Ссылка")); 		   
		  // формаГрафик.ответственноеЛицо = СписокСотрудников;
		  // 
		  // формаГрафик.ФлМен = Истина;
		  // 
		  // формаГрафик.Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
		  // формаГрафик.ФлКонтр = Ложь;
		  //// НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		  // формаГрафик.НачДата = ЭтаФорма.ДатаНач;
		  //   формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		  // формаГрафик.Открыть();
		  // формаГрафик.отчетВывести();

		   
		
//-----------------------------График по Контрагенту за год----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Контрагенты")	тогда

		//+++ 22.06.2016
	    СтандартнаяОбработка = Ложь;
		
		Попытка	
			Сдвиг = Число(   ЭлементыФормы.ПолеТабличногоДокумента.Область(Лев(ЭлементыФормы.ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя,Найти(ЭлементыФормы.ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя,"C"))+"8:" + Лев(ЭлементыФормы.ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя,Найти(ЭлементыФормы.ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя,"C"))+"9").Текст   );
		Исключение
			Сдвиг = 0;	
		КонецПопытки;
	   
		формаВыбора = этотОбъект.ПолучитьФорму("ФормаВыбора");
		формаВыбора.Клиент = Расшифровка;
		формаВыбора.датаНачТ = НачалоДня((ТекущаяДата()-60*60*24*Сдвиг));
		формаВыбора.датаКонТ = ТекущаяДата();
		формаВыбора.датаНач = НачалоГода(?(ЗначениеЗаполнено(ЭтаФорма.ДатаОтчета),ЭтаФорма.ДатаОтчета,ТекущаяДата()));
		формаВыбора.датаКон = ?(ЗначениеЗаполнено(ЭтаФорма.ДатаОтчета),ЭтаФорма.ДатаОтчета,ТекущаяДата());
		формаВыбора.Открыть();
		
		//Если Звонки Тогда
		//	
		//   СтандартнаяОбработка = Ложь;
		//   ТД = ПолучитьТаблицуЗвонков(3, Расшифровка,ДобавитьМесяц(ТекущаяДата(),-1),ТекущаяДата());
		//   ТД.Показать();

		//Иначе
		//   
		//   СтандартнаяОбработка = Ложь;
		//	
		//   Если Дебеторская <> 1 тогда
		//	   Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
		//	   возврат;
		//   КонецЕсли;	   
		//	
		//   формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		//   формаГрафик.ФлМен = Ложь;
		//   формаГрафик.ответственноеЛицо = справочники.Пользователи.ПустаяСсылка();
		//   
		//   формаГрафик.Контрагент1 = Расшифровка;
		//   формаГрафик.ФлКонтр = Истина;
		//   // НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		//   формаГрафик.НачДата = ЭтаФорма.ДатаНач;
		//   формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		//   формаГрафик.Открыть();
		//   формаГрафик.отчетВывести();
		//КонецЕсли;
		//
	//-------------------------взаиморасчеты по документу----------------------------------
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВывестиВзаиморасчетыПоДокументу(Расшифровка, Истина);	
		
	КонецЕсли; 
	

КонецПроцедуры



Процедура ВывестиВзаиморасчетыПоДокументу(Ссылка, ПустаяСделка = Ложь)
	
	
	Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаКон = КонецДня(?(ЗначениеЗаполнено(ЭтаФорма.ДатаОтчета),ЭтаФорма.ДатаОтчета,ТекущаяДата()));
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		
		СтрОтб.Использование = Ложь;	
		
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.Контрагент;
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Сделка");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	
	СтрОтб.Значение = ?(ПустаяСделка, Неопределено, Ссылка);
	
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
		
	КонецЕсли;
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.ДоговорКонтрагента;
	СтрОтб.Использование = Истина;	
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.Имя);
	
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;
	
	
КонецПроцедуры


Функция ВернутьДанныеПоЗвонкам(НачПериода,КонПериода)
	Исходящие = ложь;
   Входящие = ложь;
   //НачПериода  = ДатаНачала;
   //КонПериода  = ДатаОкончания;
   ТолькоВнешние = ложь;
   ТолькоКлиенты = истина;
   НеЗаполнен = ложь;
   глТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
     	
	

	Начало=ТекущаяДата();
	
	ТЗИтог = Новый ТаблицаЗначений;
	
	ТЗИтог.Колонки.Добавить("Дата");
	ТЗИтог.Колонки.Добавить("Абонент");
	ТЗИтог.Колонки.Добавить("Продолжительность");
	ТЗИтог.Колонки.Добавить("Тип");
	ТЗИтог.Колонки.Добавить("Телефон");
	
	Состояние("Идёт поиск всех телефонов сотрудников и клиентов...");	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = ТИП(Справочник.КонтактныеЛица)
	               |				И ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект.ОбъектВладелец) = ТИП(Справочник.Контрагенты)
	               |			ТОГДА КонтактнаяИнформация.Объект.ОбъектВладелец
	               |		ИНАЧЕ КонтактнаяИнформация.Объект
	               |	КОНЕЦ КАК Объект,
	               |	ЕстьNull(КонтактнаяИнформация.Представление,"""") как Представление
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Тип = Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)
				   |	И ЕстьNull(КонтактнаяИнформация.Представление,"""") ПОДОБНО (""%___"") ";
	Обработать = Запрос.Выполнить().Выгрузить();
	
	Телефоны = новый ТаблицаЗначений;
	для каждого кол1 из Обработать.Колонки цикл
		Телефоны.Колонки.Добавить( кол1.Имя, кол1.ТипЗначения, кол1.Заголовок, кол1.Ширина);
	КонецЦикла;
	
	КС = Новый КвалификаторыСтроки(6);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Телефоны.Колонки.Добавить("Поиск",ОписаниеТиповС);
	
	//Телефоны.Очистить();
	Состояние("Идёт обработка "+строка(Обработать.Количество())+" телефонов сотрудников и клиентов...");	
	Для каждого стр из Обработать Цикл
		ОбработкаПрерыванияПользователя();
		Строка = Стр.Представление;
		Строка = СтрЗаменить(Строка,"(","");
		Строка = СтрЗаменить(Строка,")","");
		Строка = СтрЗаменить(Строка,"-","");
		Строка = СтрЗаменить(Строка," ","");
		Строка = СтрЗаменить(Строка,":","");
		
		Строка = СтрЗаменить(Строка,"+7","8"); //27.04.2017
		Строка = СтрЗаменить(Строка,"доб.",",#");     //+7 (495) 775-91-75 доб. 1-16-24, +7 (985) 234-20-52
		Строка = СтрЗаменить(Строка,"вн.",",#");     // 8 (727) 311-12-24 (вн.7103)
		
		Строка = СтрЗаменить(Строка,"и",",");
		Строка = СтрЗаменить(Строка,".",",");
		Строка = СтрЗаменить(Строка,";",",");
		
		ТекущаяСтрока = СтрЗаменить(Строка, ",", Символы.ПС);
		Для Счетчик = 1 По СтрЧислоСтрок(ТекущаяСтрока) Цикл
			стр1 = СокрЛП(СтрПолучитьСтроку(ТекущаяСтрока, Счетчик));
			Если СтрДлина(стр1)> 2 и найти(стр1,"#")=0 Тогда //от 3х символов и без внутренних!
				
				Если типЗнч(стр.Объект)=тип("СправочникСсылка.Контрагенты") и СтрДлина(стр1)<5 тогда
					продолжить; // вн.номера сотрудников контрагентов 
				КонецЕсли;
				
				Нов = Телефоны.Добавить();
				Нов.Объект = стр.Объект;
				Нов.Поиск = Прав(стр1,6);
			КонецЕсли;
		КонецЦикла;
		//стр.Поиск = Строка;
	КонецЦикла;
	
	
	Тип = 0;
	
	Если Исходящие Тогда
		Тип = 1;
	ИначеЕсли Входящие тогда
		тип = 2;
	КонецЕсли;
	
	
	ЗапросМобильные = Новый Запрос;
	//ЗапросМобильные.УстановитьПараметр("Клиент",Клиент);
	ЗапросМобильные.УстановитьПараметр("Телефоны",Телефоны);
	ЗапросМобильные.УстановитьПараметр("ДатаН",НачалоДня(НачПериода));
	ЗапросМобильные.УстановитьПараметр("ДатаК",КонецДня(КонПериода));
	ЗапросМобильные.УстановитьПараметр("Тип",Тип);
	ЗапросМобильные.УстановитьПараметр("ТолькоВнешние",ТолькоВнешние);
	ЗапросМобильные.УстановитьПараметр("ТолькоКлиенты",ТолькоКлиенты);
	ЗапросМобильные.УстановитьПараметр("ФактАдрес",Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ЗапросМобильные.УстановитьПараметр("КодВажность","90184"); 
	
	ЗапросМобильные.Текст = "
	|ВЫБРАТЬ
	|КонтактнаяИнформация.Объект,
	|КонтактнаяИнформация.Поле2
	|ПОМЕСТИТЬ Регионы
	|ИЗ
	|РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|ТИПЗНАЧЕНИЯ(КонтактнаяИнформация.Объект) = ТИП(Справочник.Контрагенты)
	|И КонтактнаяИнформация.Вид = &ФактАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Журнал.Дата, ДЕНЬ) КАК День,
	|	Журнал.ПоискСотрудник КАК НомерСотрудника,
	|	Журнал.ПоискАбонент КАК НомерАбонента,
	|	Журнал.ДлительностьЗвонка,
	|	Журнал.Исход_Вход,
	|	Журнал.НомерАбонента КАК НомерАбонента1,
	|	Журнал.Дата КАК ДеньВремя,
	|	Журнал.Ссылка
	|ПОМЕСТИТЬ Журнал
	|ИЗ
	|	РегистрСведений.ЖурналЗвонков КАК Журнал
	|ГДЕ
	|	Журнал.Дата МЕЖДУ &ДатаН И &ДатаК
	
	//20.04.2017	
	|//ТолькоСвой   И ( Журнал.ПоискСотрудник В (&СвоиТелефоны)  )
	//ИЛИ Журнал.НомерАбонента В (&СвоиТелефоны) 
	|				  
	|	и Журнал.НомерСотрудника <> ""117""
	|   И Журнал.НомерАбонента <> ""117""
	
	|	и Журнал.НомерСотрудника <> ""220""
	|   И Журнал.НомерАбонента <> ""220""
	
	|   И Журнал.ПоискСотрудник <> ""009797""
	|   И Журнал.ПоискАбонент <> ""009797""
	
	|   И ВЫБОР
	|       КОГДА &толькоВнешние = ИСТИНА или &ТолькоКлиенты
	|	    ТОГДА Журнал.НомерАбонента ПОДОБНО ""%_____""
	|       ИНАЧЕ ИСТИНА
	|   КОНЕЦ
	
	//26.04.2017 - для ускорения вывода только по себе... эти условия НЕ нужны!
	
	|//НеТолькоСвой
	//+++ 26.04.2017
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерСотрудника, НомерАбонента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Телефоны.Объект,
	|	Телефоны.Поиск КАК Представление
	|ПОМЕСТИТЬ Телефоны
	|ИЗ
	|	&Телефоны КАК Телефоны
	|ГДЕ 
	|   Телефоны.Поиск<>""""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Журнал.НомерСотрудника КАК Абонент,
	|	МАКСИМУМ(Журнал.НомерАбонента1) КАК Номер,
	|	Журнал.ДлительностьЗвонка КАК BillSec,
	|	ВЫБОР
	|		КОГДА Журнал.Исход_Вход = ""Исходящий""
	|			ТОГДА ""Исходящий >>""
	|		ИНАЧЕ ""<< Входящий""
	|	КОНЕЦ КАК Входящий,
	|	МАКСИМУМ(Телефоны.Объект) КАК АбонентФизЛицо,
	|	ВЫБОР
	|		КОГДА Журнал.ДлительностьЗвонка < 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пропущен,
	|	Журнал.День,
	|	Журнал.ДеньВремя,
	|	//РР Журнал.Ссылка,
	//21.03.2017
	|	Пользователи.НаправлениеПродаж,
	|	МАКСИМУМ(Телефоны1.Объект) КАК Объект
	|ПОМЕСТИТЬ БезГрупп
	|ИЗ
	|	Журнал КАК Журнал
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Телефоны как ТелФизЛиц
	|							ГДЕ ТелФизЛиц.Объект ссылка справочник.ФизическиеЛица ) КАК Телефоны 
	|		ПО Журнал.НомерСотрудника = Телефоны.Представление
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Телефоны КАК Телефоны1
	|		ПО Журнал.НомерАбонента = Телефоны1.Представление
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать различные п.ФизЛицо, п.НаправлениеПродаж
	|		из справочник.Пользователи как п) как Пользователи
	|		ПО (Телефоны.Объект = Пользователи.ФизЛицо )
	
	|ГДЕ
	|       ВЫБОР
	|		     КОГДА Журнал.НомерСотрудника ПОДОБНО ""______""
	|			     ТОГДА НЕ Телефоны.Объект ЕСТЬ NULL 
	|		     ИНАЧЕ ИСТИНА
	|	    КОНЕЦ
	|     и ВЫБОР
	|            КОГДА &Тип = 1
	|	            ТОГДА Журнал.Исход_Вход = ""Исходящий""
	|            КОГДА &Тип = 2
	|	            ТОГДА Журнал.Исход_Вход = ""Входящий""
	|            ИНАЧЕ ИСТИНА
	|        КОНЕЦ
	|     и  ВЫБОР
	//+++  &НеЗаполнен 
	|			КОГДА &НеЗаполнен 	   
	|	           ТОГДА ( Телефоны1.Объект есть Null ) 
	|					или (&ТолькоКлиенты и выразить(Телефоны1.Объект как Справочник.Контрагенты) = Значение(Справочник.Контрагенты.ПустаяСсылка))
	|					или (&ТолькоКлиенты=ЛОЖЬ И выразить(Телефоны1.Объект как Справочник.Контрагенты) = Значение(Справочник.ФизическиеЛица.ПустаяСсылка))
	
	//+++  Заполнен и Только Клиенты 
	|            КОГДА &ТолькоКлиенты = ИСТИНА и &НеЗаполнен = ЛОЖЬ
	|	           ТОГДА ТИПЗНАЧЕНИЯ(Телефоны1.Объект) = ТИП(Справочник.Контрагенты)
	
	|            ИНАЧЕ ИСТИНА
	|        КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	//21.03.2017
	|	Пользователи.НаправлениеПродаж,
	|	Журнал.НомерСотрудника,
	|	Журнал.ДлительностьЗвонка,
	|	Журнал.День,
	|	Журнал.ДеньВремя,
	|	ВЫБОР
	|		КОГДА Журнал.Исход_Вход = ""Исходящий""
	|			ТОГДА ""Исходящий >>""
	|		ИНАЧЕ ""<< Входящий""
	|	КОНЕЦ
	|   //AA, Журнал.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	БезГрупп.АбонентФизЛицо как Абонент,
	|	СУММА(БезГрупп.BillSec) КАК BillSec
	|ПОМЕСТИТЬ Групп
	|ИЗ
	|	БезГрупп КАК БезГрупп
	|
	|СГРУППИРОВАТЬ ПО
	|	БезГрупп.АбонентФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Телефоны.Объект,
	|	МАКСИМУМ(Телефоны.Представление) КАК Представление
	|ПОМЕСТИТЬ ТолькоВнутренние
	|ИЗ
	|	Телефоны КАК Телефоны
	|ГДЕ
	|	Телефоны.Представление ПОДОБНО ""___""
	|
	|СГРУППИРОВАТЬ ПО
	|	Телефоны.Объект
	|;
	|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВЫБОР
	//|		КОГДА БезГрупп.Абонент ПОДОБНО ""%_____""
	//|			ТОГДА ЕСТЬNULL(ТолькоВнутренние.Представление, БезГрупп.Абонент)
	//|       КОГДА БезГрупп.Абонент = ""999""
	//|			ТОГДА ""Яршинторг""
	//|		ИНАЧЕ БезГрупп.Абонент
	//|	КОНЕЦ КАК Абонент,
	//|	БезГрупп.Номер,
	//|	БезГрупп.BillSec,
	//|	БезГрупп.Входящий,
	//|	БезГрупп.АбонентФизЛицо,
	//|	БезГрупп.Пропущен,
	//|	БезГрупп.День,
	//|	БезГрупп.ДеньВремя,
	//|	ВЫБОР
	//|       КОГДА БезГрупп.Абонент = ""999""
	//|			ТОГДА ""Пропущенные""
	//|		ИНАЧЕ БезГрупп.НаправлениеПродаж
	//|	КОНЕЦ КАК НаправлениеПродаж,	
	//|	БезГрупп.Объект,
	//|   //AA БезГрупп.Ссылка,
	//|	Групп.BillSec КАК ОбщТрафик,
	//|    ВЫБОР
	//|		КОГДА БезГрупп.Абонент ПОДОБНО ""%_____""
	//|			ТОГДА ""Сот.*""+БезГрупп.Абонент
	//|		ИНАЧЕ     ""Вн.""+БезГрупп.Абонент
	//|	КОНЕЦ КАК ТипТелефона,
	//|	Регионы.Поле2 КАК Регион,
	//|ВЫБОР
	//|	КОГДА ТИПЗНАЧЕНИЯ(БезГрупп.Объект) = ТИП(Справочник.Контрагенты) 
	//|		ТОГДА  БезГрупп.Объект.КатегорияПокупателя
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ОсновноеНаправлениеПродаж,
	//|	ЕстьNULL(ЗначенияСвойствОбъектов.Значение,0) как Важность,
	//|	""Скачать"" КАК Скачать
	//|ИЗ
	//|	БезГрупп КАК БезГрупп
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Групп КАК Групп
	//|		ПО БезГрупп.АбонентФизЛицо = Групп.Абонент
	//
	//|        ЛЕВОЕ СОЕДИНЕНИЕ ТолькоВнутренние КАК ТолькоВнутренние
	//|		ПО БезГрупп.АбонентФизЛицо = ТолькоВнутренние.Объект
	//|ЛЕВОЕ СОЕДИНЕНИЕ Регионы КАК Регионы
	//|		ПО БезГрупп.Объект = Регионы.Объект 		
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//|		ПО БезГрупп.Объект = ЗначенияСвойствОбъектов.Объект	И ЗначенияСвойствОбъектов.Свойство.Код = &КодВажность
	|ВЫБРАТЬ
	//|	ВЫБОР
	//|		КОГДА БезГрупп.Абонент ПОДОБНО ""%_____""
	//|			ТОГДА ЕСТЬNULL(ТолькоВнутренние.Представление, БезГрупп.Абонент)
	//|       КОГДА БезГрупп.Абонент = ""999""
	//|			ТОГДА ""Яршинторг""
	//|		ИНАЧЕ БезГрупп.Абонент
	//|	КОНЕЦ КАК Абонент,
	|	КОЛИЧЕСТВО(БезГрупп.ДеньВремя) КАК КолвоЗвонков ,
	
	|	БезГрупп.Объект
//	|   //AA БезГрупп.Ссылка
	|ИЗ
	|	БезГрупп КАК БезГрупп
	|		ЛЕВОЕ СОЕДИНЕНИЕ Групп КАК Групп
	|		ПО БезГрупп.АбонентФизЛицо = Групп.Абонент	
	|        ЛЕВОЕ СОЕДИНЕНИЕ ТолькоВнутренние КАК ТолькоВнутренние
	|		ПО БезГрупп.АбонентФизЛицо = ТолькоВнутренние.Объект	
	|ГДЕ 	БезГрупп.BillSec >=90
	|СГРУППИРОВАТЬ ПО
	|	БезГрупп.Объект

	|";

	//+++ 20.04.2017 Только свой телефон
	ЗапросМобильные.УстановитьПараметр("НеЗаполнен",НеЗаполнен);
	
услИсключенение = ( СокрЛП(глТекущийПользователь.Код) = "Лапенков" 
				или СокрЛП(глТекущийПользователь.Код) = "Малышев"
				или СокрЛП(глТекущийПользователь.Код) = "Серков" 
				или СокрЛП(глТекущийПользователь.Код) = "Аверкина" 
				или СокрЛП(глТекущийПользователь.Код) = "Голубева В.С."
				или СокрЛП(глТекущийПользователь.Код) = "Филатова С.В."
				
				или СокрЛП(глТекущийПользователь.Код) = "Бондаренко Е.Д. (снабжение)" 
				
				или СокрЛП(глТекущийПользователь.ФизЛицо.Код) =  "С2305" // Марешева  - несколько пользователей на 1 физ.лице	
				или СокрЛП(глТекущийПользователь.Код) = "Лигута А.С."                    // есть ограничение в доп. отборе
				или СокрЛП(глТекущийПользователь.Код) = "Лигута А.С.(руководитель)"      // есть ограничение в доп. отборе
				или СокрЛП(глТекущийПользователь.Код) = "Красюк Н.В."                    // есть ограничение в доп. отборе
				или СокрЛП(глТекущийПользователь.Код) = "Красюк Н.В.(руководитель)"      // есть ограничение в доп. отборе
			
				или РольДоступна("ПравоЗавершенияРаботыПользователей") // IT-отдел !  с 26.04.2017
				  );
				  
	Если ЗначениеЗаполнено(глТекущийПользователь.направлениеПродаж) 
		И НЕ ( услИсключенение ) тогда
		СвойТелефон = "";
		СвоиТелефоны = новый СписокЗначений;
		
		Если ЗначениеЗаполнено(глТекущийПользователь.ФизЛицо) тогда
			СвойТелефон = получитьВнутреннийТелефон281(глТекущийПользователь.ФизЛицо);
			СвойТелефон = сокрЛП(СвойТелефон);
			СвойТелефон = стрЗаменить(СвойТелефон,"-","");  //10-08
			Если СвойТелефон<>"" тогда
				СвоиТелефоны.Добавить(СвойТелефон);
			КонецЕсли;
			
			СвойТелефон2 = получитьВнутреннийТелефон281(глТекущийПользователь.ФизЛицо,"00022"); //Сотовый
			Если СвойТелефон2<>"" тогда
				ОбрезатьНомер(СвойТелефон2);
				СвоиТелефоны.Добавить(СвойТелефон2);
			КонецЕсли;
			
			СвойТелефон2 = получитьВнутреннийТелефон281(глТекущийПользователь.ФизЛицо,"00024"); //Сотовый 2
			Если СвойТелефон2<>"" тогда
				ОбрезатьНомер(СвойТелефон2);
				СвоиТелефоны.Добавить(СвойТелефон2);
			КонецЕсли;
		Иначе
			СвойТелефон2 = получитьВнутреннийТелефон281(глТекущийПользователь, "38841"); // телефон сотрудника!
			Если СвойТелефон2<>"" тогда
				ОбрезатьНомер(СвойТелефон2);
				СвоиТелефоны.Добавить(СвойТелефон2);
			КонецЕсли;
		КонецЕсли;
		
		Если СвоиТелефоны.Количество()=0 тогда
			Если ЗначениеЗаполнено(глТекущийПользователь.ФизЛицо) тогда 
			Предупреждение("У Вас - Не задан ""Внутренний телефон"" в настройках Физ.лица!
		   |Формирование отчета - не возможно!", 60);
		   Иначе   
			Предупреждение("У Вас - Не задан ""Телефон сотрудника"" в настройках Пользователя
						   |       И нет привязки пользователя к физ.лицу!
						   |        Формирование отчета - не возможно!", 60);
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;			   
			
		ЗапросМобильные.УстановитьПараметр("СвоиТелефоны",СвоиТелефоны);
		ЗапросМобильные.Текст = стрЗаменить(ЗапросМобильные.Текст ,"//ТолькоСвой","");
		
//------------------------прослушка---------------------------------
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//РР","");
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//AA","");
	ИНАЧЕ
		
	//ЗапросМобильные.Текст = стрЗаменить(ЗапросМобильные.Текст ,"//НеТолькоСвой",
	//"И (Журнал.НомерСотрудника ПОДОБНО ""___"" 
	//|		или Журнал.НомерСотрудника ПОДОБНО ""10__"" 
	//|		или Журнал.НомерСотрудника ПОДОБНО ""11__"" 
	//|		или Журнал.НомерСотрудника ПОДОБНО ""12__"" 
	//|		или Журнал.НомерСотрудника ПОДОБНО ""9_________"")
	//
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""3__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""4__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""5__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""8__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""7__""
	////|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""9__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""0__""
	//|	И НЕ Журнал.НомерСотрудника ПОДОБНО ""10_""  ");
	

	КонецЕсли;//Только свой телефон

//------------------------прослушка всех---------------------------------
	если услИсключенение тогда
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//РР","");
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//AA","");
	Иначе
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//РР Журнал.Ссылка","""1"" КАК Ссылка");
		ЗапросМобильные.Текст = СтрЗаменить(ЗапросМобильные.Текст,"//AA","");
	КонецЕсли;
	
	//Сообщить(ЗапросМобильные.Текст);
	
	Состояние("Идёт обработка звонков по условиям. Пожалуйста подождите...");	
	Рез1 = ЗапросМобильные.Выполнить();
	Состояние("Идёт вывод звонков по условиям...");	
	Рез = Рез1.Выгрузить();
	
	//ВыполнитьДополнительныйОтборПоМенеджерам(Рез);
	
	//Рез.ВыбратьСтроку();
	//
	//Связь между таблицей значений и именами в СКД ВнешниеНаборыДанных = Новый Структура;
	Состояние("Идёт обработка условий отбора по "+строка(Рез.Количество())+" звонкам...");	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("тз", Рез);
	
		
	
	возврат ВнешниеНаборыДанных	
	
	
КонецФункции


Процедура Кнопка1Нажатие(Элемент)
	СхемаКомпоновкиДанных3 = ПолучитьМакет("Переносы");
	
	ПараметрСКД = СхемаКомпоновкиДанных3.Параметры.ТекущаяДата;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НаДату;
	
	ДанныеРасшифровки3 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета3 = Новый КомпоновщикМакетаКомпоновкиДанных;
	//КомпоновщикНастроек1.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных1)); 
	//КомпоновщикНастроек1.ЗагрузитьНастройки(СхемаКомпоновкиДанных1.НастройкиПоУмолчанию); 

	
	
	Настройки = СхемаКомпоновкиДанных3.НастройкиПоУмолчанию;
	Настройки.Отбор.Элементы.Очистить();   //Структура[0].Структура[0].
	
	МакетКомпоновки3 = КомпоновщикМакета3.Выполнить(СхемаКомпоновкиДанных3, СхемаКомпоновкиДанных3.ВариантыНастроек.Основной.Настройки, ДанныеРасшифровки3);
	
	ПроцессорКомпоновкиДанных3 = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных3.Инициализировать(МакетКомпоновки3, , ДанныеРасшифровки3,истина);
	ЭлементыФормы.РезультатПереносы.Очистить();
	ПроцессорВывода3 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода3.УстановитьДокумент(ЭлементыФормы.РезультатПереносы);
	ПроцессорВывода3.Вывести(ПроцессорКомпоновкиДанных3);


КонецПроцедуры

