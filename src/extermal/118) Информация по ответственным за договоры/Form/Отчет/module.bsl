
Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок, КонецДня(НачПериода), ОтвЛицо);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок, Дата, ОтвЛицо) Экспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Макет = ВнешняяОбработкаОбъект.ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Владелец,
	|	ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерПокупателя КАК ОМП,
	|	ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерПоставщика КАК ОМЗ,
	|	ДоговорыКонтрагентов.ТипДоговора,
	|	ДоговорыКонтрагентов.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ДоговорыКонтрагентов.Ссылка КАК Наименование,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовОборот, 0) КАК СуммаВзаиморасчетовОборот,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход, 0) КАК СуммаВзаиморасчетовПриход,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход, 0) КАК СуммаВзаиморасчетовРасход
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&Дата, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ПО ДоговорыКонтрагентов.Ссылка = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты КАК ВзаиморасчетыСКонтрагентамиОбороты
	|		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
  	|" + ?(НЕ ЗначениеНеЗаполнено(ОтвЛицо)," ГДЕ ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтвЛицо", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ОтветственноеЛицо.Наименование,
	|	ДоговорыКонтрагентов.Владелец.Наименование
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетовОстаток),
	|	СУММА(СуммаВзаиморасчетовОборот),
	|	СУММА(СуммаВзаиморасчетовПриход),
	|	СУММА(СуммаВзаиморасчетовРасход)
	|ПО
	|	ОБЩИЕ,
	|	ОтветственноеЛицо,
	|	Владелец,
	|	Наименование";

	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОтвЛицо", ОтвЛицо);

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьОтветственноеЛицо = Макет.ПолучитьОбласть("ОтветственноеЛицо");
	ОбластьВладелец = Макет.ПолучитьОбласть("Владелец");
	ОбластьСсылка = Макет.ПолучитьОбласть("Ссылка");
	ОбластьСсылкаБезОборотов = Макет.ПолучитьОбласть("СсылкаБО");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	

	ВыборкаОтветственноеЛицо = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаОтветственноеЛицо.Следующий() Цикл
		ОбластьОтветственноеЛицо.Параметры.Заполнить(ВыборкаОтветственноеЛицо);
		ТабДок.Вывести(ОбластьОтветственноеЛицо, ВыборкаОтветственноеЛицо.Уровень(),,Ложь);

		ВыборкаВладелец = ВыборкаОтветственноеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаВладелец.Следующий() Цикл
			ОбластьВладелец.Параметры.Заполнить(ВыборкаВладелец);
			ТабДок.Вывести(ОбластьВладелец, ВыборкаВладелец.Уровень(),,Ложь);

			ВыборкаСсылка = ВыборкаВладелец.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ВыборкаСсылка.Следующий() Цикл
				Если ((ВыборкаСсылка.СуммаВзаиморасчетовПриход <> 0)
					 И (ВыборкаСсылка.СуммаВзаиморасчетовРасход <> 0))
					 ИЛИ (ВыборкаСсылка.СуммаВзаиморасчетовОборот <> 0) Тогда
					
					ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
					ТабДок.Вывести(ОбластьСсылка, ВыборкаСсылка.Уровень(),,Ложь);
					
				Иначе
					
					ОбластьСсылкаБезОборотов.Параметры.Заполнить(ВыборкаСсылка);
					ТабДок.Вывести(ОбластьСсылкаБезОборотов, ВыборкаСсылка.Уровень(),,Ложь);
					
				КонецЕсли; 

				ВыборкаДетали = ВыборкаСсылка.Выбрать();

				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
					//ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень(),,Ложь);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.Вывести(ОбластьОбщийИтог, ВыборкаОбщийИтог.Уровень());
	
	//ТабДок.Вывести(ОбластьПодвалТаблицы);
	//ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ПриОткрытии()
	НачПериода = КонецДня(ТекущаяДата());
КонецПроцедуры
