
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Флажок1 тогда
		ОбъединитьЗаказыПокупателя(Контрагент1, Ложь, Подразделение); 
	//иначеЕсли Флажок2 тогда
	//	ОбъединитьЗаказыПокупателя(ДатаОтгрузки, Контрагент1, ПодразделениеT, Истина);  //РостовНаДону - транзитные по транзитным складам
	КонецЕсли;
		
КонецПроцедуры


//процедуру надо перенести в общий модуль ИнтернетМагазин
//
Процедура ОбъединитьЗаказыПокупателя( Контрагент, ТолькоЧтениеЗаказов=ЛОЖЬ, Подразделение=неопределено) 
	
	Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
	Транзит = ?( Подразделение=справочники.Подразделения.НайтиПоКоду("00005"), ЛОЖЬ, Истина);
	
	Если ЗначениеНеЗаполнено(Контрагент1) тогда
		Предупреждение("Не заполнен Контрагент!");
		возврат;
	КонецЕсли;		
//1.находим заказы по Контрагенту и Подразделению
// из регистра ЗаказыПокупателей - на случай Корректировок, изменений в проведении и проверки
 Запрос = новый Запрос;
Если  ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов тогда
	 //запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки) );
	 запрос.УстановитьПараметр("ДатаОтгрузки0", ДатаОтгрузки0 );
	 запрос.УстановитьПараметр("ДатаОтгрузки1", ДатаОтгрузки1 );
	 
	 запрос.УстановитьПараметр("Контрагент", Контрагент);
	 запрос.УстановитьПараметр("Транзит", Транзит  );
 //по умолчанию - Яршинторг
	 запрос.УстановитьПараметр("Подразделение",  Подразделение );
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                | ИСТИНА КАК Флаг,
	                |	ЗаказыПокупателя.ЗаказПоставщику КАК ЗаказПоставщику,
	                |	ЗаказыПокупателя.ЗаказПоставщику.ДатаПоступления КАК ДатаОтгрузки,
	                |	ЗаказыПокупателя.ЗаказПоставщику.ДоговорКонтрагента КАК Договор,
	                |	ЗаказыПокупателя.ЗаказПоставщику.ДоговорКонтрагента.ОтветственноеЛицо.Наименование КАК Менеджер,
	                |	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
	                |	ВЫРАЗИТЬ(100 * ЗаказыПокупателя.СуммаУпрОстаток / выбор когда ЗаказыПокупателя.ЗаказПоставщику.СуммаДокумента=0 тогда 1 
					|		иначе ЗаказыПокупателя.ЗаказПоставщику.СуммаДокумента Конец КАК ЧИСЛО(10, 0)) КАК Процент,
	                |	ЗаказыПокупателя.ЗаказПоставщику.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	                |	ЗаказыПокупателя.ЗаказПоставщику.Комментарий КАК Комментарий,
	                |	0 КАК КоличествоОтгружается
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПоставщикам.Остатки( ,
	                |			ЗаказПоставщику.ДатаПоступления >= &ДатаОтгрузки0
	                |				И ЗаказПоставщику.ДатаПоступления <= &ДатаОтгрузки1
	                |				И ЗаказПоставщику.Контрагент = &Контрагент
	             //   |				И ЗаказПоставщику.Проверен
	                |				И ( (&Транзит
	                |						И ЗаказПоставщику.Транзит
	                |						И ЗаказПоставщику.Подразделение = &Подразделение)
	                |					ИЛИ (НЕ &Транзит
	                |						И НЕ ЗаказПоставщику.Транзит)
					|				  )                               ) КАК ЗаказыПокупателя
					//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
					//|				,
					//|				ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки0
					//|					И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1
					//|					И ЗаказПокупателя.Контрагент = &Контрагент
					//|					И ЗаказПокупателя.Проверен
					//|					И (&Транзит
					//|							И ЗаказПокупателя.Транзит
					//|							И ЗаказПокупателя.Подразделение = &Подразделение
					//|						ИЛИ НЕ &Транзит
					//|							И НЕ ЗаказПокупателя.Транзит)) КАК РезервНаСкладахОстатки
	               // |		ПО ЗаказыПокупателя.ЗаказПокупателя = РезервНаСкладахОстатки.ЗаказПокупателя
	                |ГДЕ
	                |	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ДатаОтгрузки,
	                |	НомерВходящегоДокумента
	                |АВТОУПОРЯДОЧИВАНИЕ"; 
					
					
					
	Если НЕ РольДоступна("ПолныеПрава") тогда
		Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеру", 
		?(Флажок2, "И ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо",
		  "И (ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
		  |   ИЛИ ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)")
		  );
		Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	КонецЕсли;
					
ТабличноеПоле1.Очистить();
ТабличноеПоле1 = запрос.Выполнить().Выгрузить();					

СписокЗаказов = новый СписокЗначений;					
СписокЗаказов.ЗагрузитьЗначения( ТабличноеПоле1.ВыгрузитьКолонку("ЗаказПоставщику") );
Предупреждение("Найдено "+строка(СписокЗаказов.Количество())+" заказов
			   |   c указанной датой отгрузки!", 30);
   Возврат; //+++ выход!
   
иначе //Если не ТолькоЧтениеЗаказов тогда
	СписокЗаказов = новый СписокЗначений;
	
	табЗнач = ТабличноеПоле1.Скопировать();
	табЗнач.Свернуть("Флаг, Договор, Менеджер", "Количество");
	i=0; N=табЗнач.Количество();
	Пока i<N цикл
		Если табЗнач[i].Флаг тогда 	i=i+1;	
		Иначе табЗнач.Удалить(i); N=N-1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТабЗнач.Количество()>1 тогда
		Предупреждение("Нельзя объединять заказы покупателей 
					   |по "+строка(табЗнач.Количество())+" разным договорам
					   |или  менеджерам - в один общий заказ!", 60);
		Возврат;
	КонецЕсли;	
					   
	
	для каждого стр1 из ТабличноеПоле1 цикл
		если стр1.флаг тогда
		СписокЗаказов.Добавить(стр1.ЗаказПоставщику );
		КонецЕсли;
	КонецЦикла;
КонецЕсли;
//====================================================================================



Если СписокЗаказов.Количество()=0 тогда 
//	#Если НаКлиенте тогда
		Предупреждение("Нет"+?(транзит," транзитных","")+" заказов покупателя 
						|для объединения по Контрагенту: "+строка(Контрагент)+"
						|с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy"));
//	#КонецЕсли	
	возврат;
иначеЕсли СписокЗаказов.Количество()=1 тогда 
//	#Если НаКлиенте тогда
		Предупреждение("Только один "+?(транзит," транзитный","")+" заказ покупателя:
					   |"+строка(СписокЗаказов[0].Значение)+"
					   |Объединение - не требуется!");
//	#КонецЕсли	
	возврат;
иначе
//	#Если НаКлиенте тогда
		Сообщить("Выбрано: "+строка(СписокЗаказов.Количество())+?(транзит," транзитных","")+" заказов покупателя для объединения по Контрагенту: "+строка(Контрагент)+" с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" и подразделению: "+строка(Подразделение), СтатусСообщения.Информация);
//	#КонецЕсли
КонецЕсли;	


//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
 запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
 запрос.УстановитьПараметр("Дата", ТекущаяДата() );
 
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
	                |	ЗаказыПокупателя.Количество КАК Количество,
	                |	ЗаказыПокупателя.Цена,
	                |	ЗаказыПокупателя.Сумма КАК Сумма,
	                |	ЗаказыПокупателя.Ссылка КАК ЗаказПоставщику,
	                |	ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	                |	ЗаказыПокупателя.Основание КАК основание,
	                |	ЗаказыПокупателя.Статус КАК Статус,
	                |	ЗаказыПокупателя.НомерСтроки КАК НомерСтроки,
	                |	ЗаказыПокупателя.Вес,
	                |	ЗаказыПокупателя.ЕдиницаИзмерения,
	                |	ЗаказыПокупателя.ЕдиницаИзмеренияМест,
	                |	ЗаказыПокупателя.КоличествоМест,
	                |	ЗаказыПокупателя.Коэффициент,
	                |	ЗаказыПокупателя.СтавкаНДС,
	                |	ЗаказыПокупателя.СуммаНДС
	                |ИЗ
	                |	Документ.ЗаказПоставщику.Товары КАК ЗаказыПокупателя
	                |ГДЕ
	                |	ЗаказыПокупателя.Ссылка В(&СписокЗаказов)
	                |	И ЕСТЬNULL(ЗаказыПокупателя.Количество, 0) > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаказыПокупателя.Ссылка,
	                |	НомерСтроки
	                |АВТОУПОРЯДОЧИВАНИЕ"; 
ОбщийЗаказТовары = запрос.Выполнить().Выбрать();


Если ОбщийЗаказТовары.Количество()=0 тогда 
//	#Если НаКлиенте тогда
		Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
//	#КонецЕсли	
	возврат;
иначе
//	#Если НаКлиенте тогда
	КолТов = ОбщийЗаказТовары.Количество();
	Сообщить("Заказано "+ строка(КолТов)+" товаров для объединения.", СтатусСообщения.Информация);
//	#КонецЕсли	
КонецЕсли;	


Режим = РежимДиалогаВопрос.ДаНет;
Ответ = Вопрос("Отменить Объединение будет уже невозможно!
		       |Вы уверены, что действительно хотите объединить
			   |"+строка(СписокЗаказов.Количество())+" заказов 
			   |c датой отгрузки "+?(ДатаОтгрузки0=НачалоДня(ДатаОтгрузки1)," = "+Формат(ДатаОтгрузки0,"ДЛФ=DD"),
			   "с "+Формат(ДатаОтгрузки0,"ДЛФ=DD")+" по "+Формат(ДатаОтгрузки1,"ДЛФ=DD") ) +"
			   |в один Общий заказ покупателя?", Режим, 0, КодВозвратаДиалога.Нет, "Предупреждение!");
Если Ответ = КодВозвратаДиалога.Нет Тогда
    Возврат;
КонецЕсли;


 //2.создаем общий суммарный заказ
 //НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //+++ 26.12.2014
 НачатьТранзакцию();
докОбщийЗаказ = документы.ЗаказПоставщику.СоздатьДокумент();
ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа

докОбщийЗаказ.Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
Преф = ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00005"), "ТК", 
		  ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00106"), "РД", 
			 ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00112"), "СП",
			 	?(Подразделение=справочники.Подразделения.НайтиПоКоду("00120"), "ЧБ",
					?(Подразделение=справочники.Подразделения.НайтиПоКоду("00122"), "ЕК","")))));
докОбщийЗаказ.УстановитьНовыйНомер(Преф); // всегда ТК!

докОбщийЗаказ.Дата         = ТекущаяДата(); //мин(ТекущаяДата(), ДатаОтгрузки+8*3661);   // 08:08:08
ДатаОтгр = макс( НачалоДня(ТекущаяДата()), НачалоДня(ДатаОтгрузки1) );
докОбщийЗаказ.ДатаПоступления = ДатаОтгр;
Если ДатаОтгр > НачалоДня(ТекущаяДата()) тогда
	сообщить("Дата Поступления больше текущей даты! ДатаПоступления объединенного заказа будет установлена на "+Формат(ДатаОтгр,"ДЛФ=D") );
КонецЕсли;	

докОбщийЗаказ.Проверен = ЛОЖЬ;
//докОбщийЗаказ.АвтоРезервирование = истина;

  СписокЗак = новый СписокЗначений;
  
  зак0 = неопределено;

докОбщийЗаказ.Товары.Очистить();
пока ОбщийЗаказТовары.Следующий() цикл
	стр1 = докОбщийЗаказ.Товары.Добавить();
	
	ЗаполнитьЗначенияСвойств(стр1, ОбщийЗаказТовары);
	
	//============перенос ссылки на Заказ покупателя================
		Если ЗначениеЗаполнено(ОбщийЗаказТовары.заказПокупателя) тогда // ссылка на заказ переносится в общий заказ поставщику!
		Сообщить("Зак.пост "+строка(ОбщийЗаказТовары.ЗаказПоставщику.Номер)+"  "+строка(ОбщийЗаказТовары.НомерСтроки)+") Ссылка на Зак.покупателя перенесена в общий заказ");
		КонецЕсли;
	
	    зак1 = ОбщийЗаказТовары.ЗаказПоставщику;
		Если зак1 <> зак0 тогда
		зак0 = зак1;
		СписокЗак.Добавить(зак1);
		КонецЕсли;

КонецЦикла;

//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
коммент = "";
 
попытка		
	//+++ 11.10.2013
	Если СписокЗак.Количество()<СписокЗаказов.Количество() тогда
		Сообщить("-----Не Все заказы из избраннных попали в объединение!-----");
		для i=0 по СписокЗаказов.Количество()-1 цикл
			Если СписокЗак.НайтиПоЗначению(СписокЗаказов[i].Значение)=неопределено тогда
				Сообщить(строка(СписокЗаказов[i].Значение)+" - не будет объединен, так как по нему нет заказанных товаров!", СтатусСообщения.Внимание);
        	КонецЕсли;
		КонецЦикла;
		Сообщить("------------------------------------------------------------");
	КонецЕсли;	
		СуммаПоДокументам = 0;
	для i=0 по СписокЗак.Количество()-1 цикл
		 докОб = СписокЗак[i].Значение.ПолучитьОбъект();
		 докОб.ПометкаУдаления = истина;
		 докОб.Комментарий = "# данные перенесены >> "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
		 
		 докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		 
	// УдалитьКорректировкиПоДокументу(докОб.ссылка);
		 СуммаПоДокументам =  СуммаПоДокументам + докОб.суммаДокумента;
		 коммент = коммент + докОб.Номер+"; ";
	КонецЦикла;	
	докОбщийЗаказ.Комментарий = "### объединенный заказ: " + коммент;
	
	докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗафиксироватьТранзакцию();
	Сообщить("+++ Успешно создан один общий заказ для "+строка(СписокЗак.Количество())+" из "+строка(СписокЗаказов.Количество())+" выбранных заказов. "+коммент, СтатусСообщения.Информация);

	Если докОбщийЗаказ.СуммаДокумента<>СуммаПоДокументам тогда
		Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы общего заказа: "+строка(СуммаПоДокументам)+" - "+строка(докОбщийЗаказ.СуммаДокумента)+" = "+строка(СуммаПоДокументам - докОбщийЗаказ.СуммаДокумента)+"р.", СтатусСообщения.Внимание);
		
		Сообщить(" ОБЪЕДИНЕНИЕ ОТМЕНЕНО !!!", СтатусСообщения.ОченьВажное );   //+++ 05.06.2014
		ОтменитьТранзакцию();
		
	иначе
		Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" объединенных документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
	КонецЕсли;
		
	ПолеВвода1 = докОбщийЗаказ.Ссылка;  //сразу для открытия
	
	Если СписокЗак.Количество()<>СписокЗаказов.Количество() тогда
		Предупреждение("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов.", 30);
	КонецЕсли;
	
Исключение
	ОтменитьТранзакцию();
//	#Если НаКлиенте тогда
		Сообщить("--- не удалось создать общий заказ: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
//	#КонецЕсли	
КонецПопытки;


	//=======================Блок переноса ссылок из заказов покупателей==================================
для каждого стр1 из докОбщийЗаказ.Товары цикл
	Если  НЕ ЗначениеНеЗаполнено(стр1.заказПокупателя) тогда
		закОб = стр1.заказПокупателя.ПолучитьОбъект();
		строкиЗак = закОб.товары.НайтиСтроки( новый Структура("Номенклатура", стр1.Номенклатура) );
		
		если строкиЗак.Количество()>0 и ЗначениеЗаполнено(строкиЗак[0].Размещение) тогда
			сообщить("Зак. пок. "+строка(закОб.Номер)+" "+строка(строкиЗак[0].НомерСтроки)+") "+строка(стр1.Номенклатура.Код)+" Размещение: "+строка(строкиЗак[0].Размещение.Номер)+" >> "+строка(докОбщийЗаказ.Ссылка.Номер) );
		 	строкиЗак[0].Размещение = докОбщийЗаказ.Ссылка;
			попытка
			закОб.ОбменДанными.Загрузка = истина; 
		 	закОб.Записать(); 
		 	закОб.ОбменДанными.Загрузка = ЛОЖЬ; 
			исключение
			закОб.ОбменДанными.Загрузка = ЛОЖЬ; 
			Сообщить(" НЕ УДАЛОСЬ ЗАПИСАТЬ ЗАКАЗ ПОКУПАТЕЛЯ "+строка(закОб.Номер)+" : "+ОписаниеОшибки() , СтатусСообщения.Внимание );
			КонецПопытки;
		КонецЕсли;	
    КонецЕсли;
КонецЦикла;
//=======================Блок переноса ссылок из заказов покупателей==================================



	 
КонецПроцедуры

Процедура ПолучитьЗаказыНажатие(Элемент)
	ТабличноеПоле1.Очистить();
	ТолькоПрочитать = истина;
	ОбъединитьЗаказыПокупателя(Контрагент1, ТолькоПрочитать, Подразделение);  	//Автоэкперт
КонецПроцедуры

Процедура Контрагент1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
		СтандартнаяОбработка = ложь;
		СписокКонтр = ПолучитьСписокКонтрагентов();
		Если СписокКонтр.Количество()=0 тогда
			Предупреждение("У вас нет доступных контрагентов, для объединения заказов!");
			возврат;
		КонецЕсли;
		формаКонтр = справочники.контрагенты.ПолучитьФормуВыбора();
		формаКонтр.СправочникСписок.Отбор.ссылка.ВидСравнения = видСравнения.ВСписке;
		формаКонтр.СправочникСписок.Отбор.ссылка.Значение = СписокКонтр;
		формаКонтр.СправочникСписок.Отбор.ссылка.Использование = Истина;
	    Контрагент1 = формаКонтр.ОткрытьМодально();
		
КонецПроцедуры


//-----для МИМ - берем только контрагентов с ПриниматьЗаказыЧерезСайт -------------------
//----------- и ОсновнойДоговорКонтрагента.ОтветственноеЛицо = текПользователь-----------
функция ПолучитьСписокКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДоговорыКонтрагентов.Владелец КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	               |	И НЕ ДоговорыКонтрагентов.Владелец.ПометкаУдаления
				   |";
	
	Если Флажок2 тогда
	Запрос.Текст = Запрос.Текст  + "	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо)
	 |";
	Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	КонецЕсли;
	
	//отбор контрагентов только по себе
	Если НЕ РольДоступна("ПолныеПрава") тогда
		Запрос.Текст = Запрос.Текст + "	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
		|ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
		Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	 рез = новый СписокЗначений;
	 Если Выборка.Количество()>0 тогда
		 рез.ЗагрузитьЗначения( Выборка.ВыгрузитьКолонку("Ссылка") );
     КонецЕсли;
	 
	 Возврат  рез;	
	 
КонецФункции


Процедура ПриОткрытии()
	Флажок1 = истина;
	ДатаОтгрузки =  НачалоДня( ТекущаяДата() ); // Сегодня
	
	ДатаОтгрузки0 =  ДатаОтгрузки;
	ДатаОтгрузки1 =  КонецДня ( ДатаОтгрузки );  
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00005"),"Ярославль"); //Ярославль
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00106"),"Ростов-на-Дону");
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00112"),"Санкт-Петербург");
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00138"),"Екатеринбург");
	
	//+++ 22/04/2014 специально для Федунова
	Если ПараметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Федунов") тогда
		//Контрагент1 = справочники.Контрагенты.НайтиПоКоду("П000382");
		Контрагент1 = справочники.Контрагенты.НайтиПоКоду("00128"); //Пауэр
		ЭлементыФормы.Контрагент1.Доступность = ложь;
		Флажок2 = истина;
		ЭлементыФормы.Флажок2.Доступность = ложь;
	КонецЕсли;
	
КонецПроцедуры


//Процедура УдалитьКорректировкиПоДокументу(ЗакПокСсылка)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	КорректировкаЗаказаПокупателя.Ссылка
//	|ИЗ
//	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
//	|ГДЕ
//	|	КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
//	
//	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗакПокСсылка);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		докКорр = выборка.Ссылка.ПолучитьОбъект();	
//		докКорр.ПометкаУдаления = истина;
//		докКорр.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+докКорр.Комментарий;
//		попытка
//			докКорр.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//			сообщить(" Удален документ: "+строка(докКорр)+" на сумму: "+ докКорр.СуммаДокумента);
//		исключение
//			сообщить(" Не удалось удалить док: "+строка(докКорр) , СтатусСообщения.Внимание);
//		конецПопытки;	
//	КонецЦикла;
//	
//КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаОтгрузки0, ?(ДатаОтгрузки1='0001-01-01', ДатаОтгрузки1, КонецДня(ДатаОтгрузки1)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаОтгрузки0 = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОтгрузки1 = КонецДня(НастройкаПериода.ПолучитьДатуОкончания());
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВвода2Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если ДатаОтгрузки0>ДатаОтгрузки1 тогда
		ДатаОтгрузки1=КонецДня(ДатаОтгрузки0);
	КонецЕсли;
КонецПроцедуры

Процедура ДатаОтгрузки1Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если ДатаОтгрузки1<ДатаОтгрузки0 тогда
		ДатаОтгрузки0=НачалоДня(ДатаОтгрузки1);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель2ВыбратьВсе(Кнопка)
	Отметки(1);
КонецПроцедуры

Процедура КоманднаяПанель2ОтменитьВсе(Кнопка)
	Отметки(0);
КонецПроцедуры

Процедура КоманднаяПанель2ИзменитьВсе(Кнопка)
	Отметки(2);
КонецПроцедуры

Процедура ТабличноеПоле1ПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ=Истина;
	Предупреждение("Прямое добавление заказов - запрещено!
				   |Выберите контрагента и период!");
				   
КонецПроцедуры

Процедура ТабличноеПоле1ПередУдалением(Элемент, Отказ)
	Отказ=Истина;
	Предупреждение("Прямое удаление заказов - запрещено!
				   |Выключите флажок слева от заказа!");

КонецПроцедуры

Процедура Отметки(число1)
	Для каждого стр1 из ТабличноеПоле1 Цикл
		 стр1.Флаг = ?(число1=1, TRUE, ?(число1=0, FALSE, НЕ стр1.Флаг) );
		 Если стр1.Флаг и НЕ стр1.ЗаказПокупателя.Проверен тогда  //отмечен непроделенный заказ!
			Сообщить("Нельзя отмечать непроделенный заказ! "+строка(стр1.ЗаказПокупателя)+" - выключен!", СтатусСообщения.Внимание);
			стр1.Флаг = ЛОЖЬ;
		 КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если данныеСтроки.Процент>0 и данныеСтроки.Процент<100 тогда
		ОформлениеСтроки.цветТекста = webЦвета.Синий;
	КонецЕсли;
	
	Если данныеСтроки.КоличествоОтгружается>0 тогда
		Если данныеСтроки.КоличествоОтгружается=данныеСтроки.Количество тогда
			ОформлениеСтроки.цветФона = webЦвета.НейтральноЗеленый;
		Иначе
			ОформлениеСтроки.цветФона = webЦвета.светлоРозовый;
        КонецЕсли;
	КонецЕсли;

КонецПроцедуры


