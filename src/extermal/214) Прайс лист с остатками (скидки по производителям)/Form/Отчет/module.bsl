Перем ВидОтчета;
Перем ТолькоДиски;
Перем СтрокаВид;

Процедура ДействияФормыОтчетСформировать(Кнопка)
	ТолькоДиски=Ложь;
	СтрокаВид="Шины";
	ВидОтчета= ЭлементыФормы.Переключатель1.Значение;
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);
	ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=?(ВидОтчета=0,Истина,Ложь);
	

КонецПроцедуры
Процедура ДействияФормыСформироватьТолькоДиски(Кнопка)
	СтрокаВид="Диски";
	ТолькоДиски=Истина;
	ВидОтчета= ЭлементыФормы.Переключатель1.Значение;
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);
	ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=?(ВидОтчета=0,Истина,Ложь);

КонецПроцедуры

//ГЛАВНАЯ ПРОЦЕДУРА
Процедура Отчет(ТабДок) Экспорт
	
Макет=ПолучитьМакет("ОтчетДиски");	
	//АКБ=Справочники.Номенклатура.НайтиПоКоду("0080021");
	Диски=Справочники.Номенклатура.НайтиПоКоду("0001752");
	ВидДиски = перечисления.ВидыТоваров.Диски; //+++ 24.01.2014
	Камеры=Справочники.Номенклатура.НайтиПоКоду("0001127");
	Кольца=Справочники.Номенклатура.НайтиПоКоду("4104444");
	ОбодныеЛенты=Справочники.Номенклатура.НайтиПоКоду("0060110");
	Шины=Справочники.Номенклатура.НайтиПоКоду("0001746");
	Шипы=Справочники.Номенклатура.НайтиПоКоду("0060001");
	Крышки=Справочники.Номенклатура.НайтиПоКоду("0080004");
	
//Запрос=Новый Запрос;

 // // 2 вариант: -------------------------------------------------------------------------------------------
// // каждый раз добавляем начальный запрос и Новый отбор из построителя
	
//	  
//	   
//	Если ТолькоДиски Тогда
//		Запрос.Текст=СтрЗаменить(Запрос.Текст,"Номенклатура В ИЕРАРХИИ (&Шины) ИЛИ","");
//		Запрос.Текст=СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО Б.Номенклатура.Наименование","УПОРЯДОЧИТЬ ПО Б.Номенклатура.Производитель.Наименование,Б.Номенклатура.Наименование,Б.Номенклатура.Размер");
//	КОнецЕсли;
	

ПостроительОтчетаОтчет.Текст= "ВЫБРАТЬ
                              |	Б.Номенклатура КАК Номенклатура,
                              |	Б.Номенклатура.Родитель КАК Родитель,
                              |	Б.Номенклатура.Код КАК Код,
                              |	Б.Номенклатура.Размер КАК Размер,
                              |	Б.Номенклатура.Производитель КАК Производитель,
                              |	Б.ОстатокДляКлиента КАК ОстатокДляКлиента,
                              |	Б.СвободныйОстатокДляКлиента КАК СвободныйОстатокДляКлиента,
                              |	Б.КОличествоВРезерве КАК КОличествоВРезерве,
                              |	Б.ЦенаКрупныйОпт КАК ЦенаКрупныйОпт,
                              |	Б.ЦенаСреднийОпт КАК ЦенаСреднийОпт,
                              |	Б.ЦенаМелкийОпт КАК ЦенаМелкийОпт,
                              |	Б.ЦенаБазовая КАК ЦенаБазовая,
                              |	Б.Автомобили КАК Автомобили
                              |ИЗ
                              |	(ВЫБРАТЬ
                              |		А.Номенклатура КАК Номенклатура,
                              |		А.Номенклатура.Родитель КАК Родитель,
                              |		А.Номенклатура.Код КАК Код,
                              |		А.Номенклатура.Размер КАК Размер,
                              |		А.Номенклатура.Производитель КАК Производитель,
                              |		А.Остаток КАК Остаток,
                              |		ВЫБОР
                              |			КОГДА А.Остаток > 50
                              |					И &РежимФормирования
                              |				ТОГДА 50
                              |			ИНАЧЕ А.Остаток
                              |		КОНЕЦ КАК ОстатокДляКлиента,
                              |		ВЫБОР
                              |			КОГДА А.Остаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) > 50
                              |					И &РежимФормирования
                              |				ТОГДА 50
                              |			ИНАЧЕ А.Остаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
                              |		КОНЕЦ КАК СвободныйОстатокДляКлиента,
                              |		ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КОличествоВРезерве,
                              |		ЕСТЬNULL(ЦеныКрупныйОпт.Цена, 0) КАК ЦенаКрупныйОпт,
                              |		ЕСТЬNULL(ЦеныСреднийОпт.Цена, 0) КАК ЦенаСреднийОпт,
                              |		ЕСТЬNULL(ЦеныМелкийОпт.Цена, 0) КАК ЦенаМелкийОпт,
                              |		ЕСТЬNULL(ЦеныБазовая.Цена, 0) КАК ЦенаБазовая,
                              |		ЕСТЬNULL(СоответствиеТипоразмеровАвтомобилям.Автомобили, """") КАК Автомобили
                              |	ИЗ
                              |		(ВЫБРАТЬ
                              |			А.Номенклатура КАК Номенклатура,
                              |			СУММА(А.Остаток) КАК Остаток
                              |		ИЗ
                              |			(ВЫБРАТЬ
                              |				ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
                              |				ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
                              |			ИЗ
                              |				РегистрНакопления.ТоварыНаСкладах.Остатки(
                              |						,
                              |						Номенклатура.ВидТовара = &ВидДиски
                              |							И (НЕ Склад.ЗапретитьИспользование)
                              |							И (НЕ Склад.Транзитный) {(Номенклатура).*}) КАК ТоварыНаСкладахОстатки
                              |			
                              |			ОБЪЕДИНИТЬ ВСЕ
                              |			
                              |			ВЫБРАТЬ
                              |				ПлановыеОстаткиТоваров.Номенклатура,
                              |				ПлановыеОстаткиТоваров.Количество
                              |			ИЗ
                              |				РегистрСведений.ПлановыеОстаткиТоваров.СрезПоследних КАК ПлановыеОстаткиТоваров) КАК А
                              |		
                              |		СГРУППИРОВАТЬ ПО
                              |			А.Номенклатура) КАК А
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
                              |					,
                              |					Номенклатура.ВидТовара = &ВидДиски
                              |						И (НЕ ЗаказПокупателя.Транзит)
                              |						И ЗаказПокупателя.Проверен {(Номенклатура).*}) КАК ЗаказыПокупателейОстатки
                              |			ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                              |					,
                              |					ТипЦен = &ТицЦенКрупныйОпт
                              |						И Номенклатура.ВидТовара = &ВидДиски {(Номенклатура).*}) КАК ЦеныКрупныйОпт
                              |			ПО А.Номенклатура = ЦеныКрупныйОпт.Номенклатура
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                              |					,
                              |					ТипЦен = &ТицЦенСреднийОпт
                              |						И Номенклатура.ВидТовара = &ВидДиски {(Номенклатура).*}) КАК ЦеныСреднийОпт
                              |			ПО А.Номенклатура = ЦеныСреднийОпт.Номенклатура
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                              |					,
                              |					ТипЦен = &ТицЦенМелкийОпт
                              |						И Номенклатура.ВидТовара = &ВидДиски {(Номенклатура).*}) КАК ЦеныМелкийОпт
                              |			ПО А.Номенклатура = ЦеныМелкийОпт.Номенклатура
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
                              |					,
                              |					ТипЦен = &ТицЦенБазовая
                              |						И Номенклатура.ВидТовара = &ВидДиски {(Номенклатура).*}) КАК ЦеныБазовая
                              |			ПО А.Номенклатура = ЦеныБазовая.Номенклатура
                              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеТипоразмеровАвтомобилям КАК СоответствиеТипоразмеровАвтомобилям
                              |			ПО А.Номенклатура.Типоразмер = СоответствиеТипоразмеровАвтомобилям.Типоразмер) КАК Б
                              |ГДЕ
                              |	(НЕ Б.Номенклатура В ИЕРАРХИИ (&Крышки))
                              |	И Б.ОстатокДляКлиента > 0
                              |
                              |УПОРЯДОЧИТЬ ПО
                              |	Б.Номенклатура.Производитель.Наименование,
                              |	Б.Номенклатура.Наименование,
                              |	Размер";

Если ТранзитныеСклады тогда//+++ 24.01.2014
	ПостроительОтчетаОтчет.Текст = стрЗаменить(ПостроительОтчетаОтчет.Текст,"НЕ Склад.Транзитный", "Склад.Транзитный и Склад.Подразделение = &Подразделение");
	ПостроительОтчетаОтчет.Параметры.Вставить("Подразделение", Подразделение);
КонецЕсли;

Запрос=Новый Запрос;
Запрос.Текст = ПостроительОтчетаОтчет.Текст;
запросПостроителя = ПостроительОтчетаОтчет.ПолучитьЗапрос(); //новый запрос
Запрос.Текст = стрЗаменить(Запрос.Текст, "ГДЕ (НЕ Б.Номенклатура В ИЕРАРХИИ (&Крышки) И Б.ОстатокДляКлиента>0)", "ГДЕ (НЕ Б.Номенклатура В ИЕРАРХИИ (&Крышки) И Б.ОстатокДляКлиента>0)
| И (ПостроительОтчетаОтчет.Отбор)"  );

Если ТранзитныеСклады тогда  //+++ 24.01.2014
	Запрос.Параметры.Вставить("Подразделение", 	Подразделение);
КонецЕсли;

	Запрос.Параметры.Вставить("Диски", Диски);
	Запрос.Параметры.Вставить("ВидДиски", ВидДиски);
	Запрос.Параметры.Вставить("Шины", Шины);
	Запрос.Параметры.Вставить("Крышки", Крышки);
    Запрос.Параметры.Вставить("ВидДиски", Перечисления.ВидыТоваров.Диски);                                                                        
	Запрос.Параметры.Вставить("РежимФормирования",?(ВидОтчета=0,Истина,Ложь ));                                                                        
	
		
	Запрос.Параметры.Вставить("ТицЦенКрупныйОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"));
	Запрос.Параметры.Вставить("ТицЦенСреднийОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00002"));
	Запрос.Параметры.Вставить("ТицЦенМелкийОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00004"));
	Запрос.Параметры.Вставить("ТицЦенБазовая", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"));
	
	////новые параметры отбора из Структуры параметров Построителя запроса
	
			текстЗапроса = Запрос.Текст;
			ПостроительОтчетаОтчетОтбор =  ПостроительОтчетаОтчет.Отбор;
			стр2 = "";
	
 для i=0 по ПостроительОтчетаОтчетОтбор.Количество()-1 цикл
 	Запрос.УстановитьПараметр("Параметр"+строка(i),  ПостроительОтчетаОтчетОтбор[i].Значение );
			    	
	символСравнения = "=";
	если (ПостроительОтчетаОтчетОтбор[i].ВидСравнения=видСравнения.Равно) тогда
		символСравнения = "=";
	иначеесли (ПостроительОтчетаОтчетОтбор[i].ВидСравнения=видСравнения.ВСписке) тогда
		символСравнения = "В";
	иначеесли (ПостроительОтчетаОтчетОтбор[i].ВидСравнения=видСравнения.ВИерархии) тогда
		символСравнения = "В Иерархии";
	иначе
	   Сообщить("В строке №"+строка(i+1)+" - неправильно задан Вид сравненения!");
	КонецЕсли;	
			    
	стр2 = стр2 + ?(стр2="",""," ИЛИ ") + ПостроительОтчетаОтчетОтбор[i].ПутьКДанным+" "+символСравнения+" (&Параметр"+строка(i)+")";
	
 КонецЦикла;
 
 Если ПостроительОтчетаОтчетОтбор.Количество()>0 тогда
 	текстЗапроса = стрЗаменить(текстЗапроса, "ПостроительОтчетаОтчет.Отбор", стр2);  // и )и )и )  >>  и (или)  )))
 иначе	
	текстЗапроса = стрЗаменить(текстЗапроса, " И (ПостроительОтчетаОтчет.Отбор)", ""); // БЕЗ Условий
 КонецЕсли;	
 Запрос.Текст = текстЗапроса;
	 
 
 //+++ 15.05.2012
	 Если ИспользоватьСкидку тогда
		 
		 назв = новый массив;
		 назв1 = новый массив;
		 назв.Добавить("Крупный опт"); назв1.Добавить("ЦенаКрупныйОпт"); 
		 назв.Добавить("Средний опт"); назв1.Добавить("ЦенаСреднийОпт"); 
		 назв.Добавить("Мелкий опт");  назв1.Добавить("ЦенаМелкийОпт"); 
		 назв.Добавить("Базовая");     назв1.Добавить("ЦенаБазовая"); 
		 номерСтолбцаЦен = назв.Найти(ТипЦен.Наименование);
	 	Если номерСтолбцаЦен=неопределено тогда
			Сообщить("Выбранный тип цен: "+ТипЦен.Наименование+" - не отображается в прайс-листе и скидка - не будет использована!");
	 	КонецЕсли;	 
		
	КонецЕсли;

	состояние("Идет поиск номенклатуру и расчет цен...");
	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Организация=Справочники.Организации.НайтиПоКоду("00001");
	ОбластьЗаголовок.Параметры.ОрганизацияПолноеНаименование=Организация.НаименованиеПолное;
	СведенияОбОрганизации      	  = СведенияОЮрФизЛице(Организация,ТекущаяДата());
	ОбластьЗаголовок.Параметры.ОписаниеОрганизации=ОписаниеОрганизации(СведенияОбОрганизации,"ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьЗаголовок.Параметры.timestamp="время форм.: "+ТекущаяДата();
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.ТекущаяДата=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ОбластьСтрокаСкладов.Параметры.СтрокаСкладов=СтрокаСкладов;
	//ОбластьСтрокаСкладов.Параметры.СтрокаНоменклатуры=СтрокаНоменклатуры;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	//ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();
	
	N = ВыборкаДетали.Количество(); ii=0;
	состояние("Идет вывод "+строка(N)+" строк результата формирования прайс-листа...");	
	проц = макс( мин(1000, Цел(N/100)), 1);
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	Пока ВыборкаДетали.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		ii=ii+1;
		Если ii%проц=0 тогда
			состояние("Обрабатывается "+строка(ii)+"/"+строка(N)+" строка ("+формат(ii*100/N,"ЧДЦ=0")+"%)...");
		КонецЕсли;	
		//Если ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Иерархия");	
		//ИначеЕсли 	ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
		//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		//Иначе Продолжить;
		//КонецЕсли;	
		
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		
			
	//	Если ВыборкаДетали.Номенклатура.ВидТовара=Перечисления.ВидыТоваров.Диски Тогда
			
			//Если ТаблицаКомплектующие.Найти(ВыборкаДетали.Номенклатура,"Комплектующая")<>Неопределено Тогда
			//	//комплектующие не выводим вообще	
			//	Продолжить;
			//КонецЕсли;
			
			ДиаметрДиска=""; КолвоОтверстий="";
			PCD=""; Вылет=""; ДиаметрСтупицы="";
			ШиринаДиска="";	 
			масПараметров=МассивИзСтроки(ВыборкаДетали.Номенклатура.Размер," ");
			Если масПараметров.Количество()>=4 Тогда
				ДиаметрДиска=СтрЗаменить(масПараметров[0],"R","");
				позСлеш=Найти(масПараметров[1],"/");
				позУмн=Найти(масПараметров[1],"*");
				
				Если позСлеш<позУмн И позСлеш>0 Тогда
					ШиринаДиска=Лев(масПараметров[1],позСлеш-1);	
					КолвоОтверстий=Сред(масПараметров[1],позСлеш+1,позУмн-позСлеш-1);
					PCD=Сред(масПараметров[1],позУмн+1,СтрДлина(масПараметров[1])-позУмн);
				КонецЕсли;
				Вылет=СтрЗаменить(масПараметров[2],"ET","");
				ДиаметрСтупицы=СтрЗаменить(масПараметров[3],"d","");
				
			КонецЕсли;	
			ОбластьДетальныхЗаписей.Параметры.Диаметр=ДиаметрДиска;
			ОбластьДетальныхЗаписей.Параметры.Ширина=ШиринаДиска;
			ОбластьДетальныхЗаписей.Параметры.КоличествоОтверстий=КолвоОтверстий;
			ОбластьДетальныхЗаписей.Параметры.PCD=PCD;
			ОбластьДетальныхЗаписей.Параметры.Вылет=Вылет;
			ОбластьДетальныхЗаписей.Параметры.ДиаметрСтупицы=ДиаметрСтупицы;
			
			ОбластьДетальныхЗаписей.Параметры.Автомобили = ВыборкаДетали.Автомобили; //+++ 24.01.2014
			
			Если ИспользоватьСкидку и номерСтолбцаЦен<>неопределено тогда //+++ 15.05.2012
				ПроцентСкидки1 = 0;
				для i=0 по ПостроительОтчетаОтчет.Отбор.Количество()-1 цикл
					
					Если ПостроительОтчетаОтчет.Отбор[i].ПутьКДанным = "Номенклатура.Производитель" тогда
						
						Если ПостроительОтчетаОтчет.Отбор[i].ВидСравнения = ВидСравнения.Равно тогда
							Если  ВыборкаДетали.Номенклатура.Производитель = ПостроительОтчетаОтчет.Отбор[i].Значение тогда
								ПроцентСкидки1 = ТаблицаСкидок.Получить(i).Скидка;
					        	прервать;
							КонецЕсли;
						иначеесли ПостроительОтчетаОтчет.Отбор[i].ВидСравнения = ВидСравнения.ВСписке тогда
							массив1 = ПостроительОтчетаОтчет.Отбор[i].Значение.ВыгрузитьЗначения();
							Если массив1.Найти(ВыборкаДетали.Номенклатура.Производитель)<>неопределено тогда
									ПроцентСкидки1 = ТаблицаСкидок.Получить(i).Скидка;
								    прервать;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;	
				ОбластьДетальныхЗаписей.Параметры[назв1[номерСтолбцаЦен]] = ОбластьДетальныхЗаписей.Параметры[назв1[номерСтолбцаЦен]]  * (1 - ПроцентСкидки1/100);
			КонецЕсли;
	//	КонецЕсли;	
		

		
	//	ОбластьДетальныхЗаписей.Параметры.Производитель=ВыборкаДетали.Производитель;
		ТабДок.Вывести(ОбластьДетальныхЗаписей); //, ВыборкаДетали.Уровень());
	КонецЦикла;
    //ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
   состояние(" ");
	
КонецПроцедуры

Процедура ДействияФормыСохранитьНаСайте(Кнопка)
	Если СтрокаВид="Диски" Тогда
		ИмяФайлаСообщения ="diski.xls";
	ИначеЕсли СтрокаВид="Шины" Тогда
		ИмяФайлаСообщения ="tyres.xls";
	ИначеЕсли СтрокаВид="АКБ"  Тогда
		ИмяФайлаСообщения ="akb.xls";
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента.Записать("c:\"+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
	врФТП = Новый FTPСоединение("83.102.251.100",,"yst76", "yst76admin",, Истина );
	
	Если врФТП = Неопределено Тогда
		Сообщить( "Во время обмена данными произошла ошибка при подключении	к FTP. " + ОписаниеОшибки());
	КонецЕсли;
	
	врФТП.Записать("c:\"+ИмяФайлаСообщения , "data/"+ИмяФайлаСообщения);
	
		// Выгрузка остатков на ответ. хранении Автошина
	//	
	//ИмяФайлаСообщения ="claim.xls";
	//ТабДокумент = ОбменДаннымиСWebСайтом.СформироватьФормуЗаявкиДляАвтошины();
	//	
	//ТабДокумент.Записать("c:\"+ИмяФайлаСообщения, ТипФайлаТабличногоДокумента.XLS);
	//врФТП = Новый FTPСоединение("83.102.251.100",,"yst76", "yst76admin",, Истина );
	//
	//
	//врФТП.Записать("c:\"+ИмяФайлаСообщения , "data/"+ИмяФайлаСообщения);
	//
	//	// Выгрузка остатков на ответ. хранении Дальнобой
	//	
	//ИмяФайлаСообщения ="dnb.xls";
	//ТабДокумент = ОбменДаннымиСWebСайтом.СформироватьФормуЗаявкиДляДальнобой();
	//	
	//ТабДокумент.Записать("c:\"+ИмяФайлаСообщения, ТипФайлаТабличногоДокумента.XLS);
	//врФТП = Новый FTPСоединение("83.102.251.100",,"yst76", "yst76admin",, Истина );
	//
	//
	//врФТП.Записать("c:\"+ИмяФайлаСообщения , "data/"+ИмяФайлаСообщения);

КонецПроцедуры

Функция ПолучитьЦену(Номенклатура,ТипЦен)
    Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	             |	ЦеныНоменклатурыСрезПоследних.Цена
	             |ИЗ
	             |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	             |			,
	             |			Номенклатура = &Номенклатура
	             |				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
				 
	Запрос.УстановитьПараметр("ТипЦен",ТипЦен);				 
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);

	Выборка=Запрос.Выполнить().Выбрать();
	Если   Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;	
	    Возврат 0;
	КонецФункции // ПерезаполнитьСтроку()

Процедура ПриОткрытии()
	ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=Ложь;	
	СтрокаВид="Шины";	
	ИспользоватьСкидку = истина;
	ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Базовая");
КонецПроцедуры

Процедура ДействияФормыСформироватьТолькоШины(Кнопка)
		
	СтрокаВид="Шины";	
	ВидОтчета= ЭлементыФормы.Переключатель1.Значение;	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;

	ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=?(ВидОтчета=0,Истина,Ложь);
	
//АКБ=Справочники.Номенклатура.НайтиПоКоду("0080021");
	Диски=Справочники.Номенклатура.НайтиПоКоду("0001752");
	Камеры=Справочники.Номенклатура.НайтиПоКоду("0001127");
	Кольца=Справочники.Номенклатура.НайтиПоКоду("4104444");
	ОбодныеЛенты=Справочники.Номенклатура.НайтиПоКоду("0060110");
	Шины=Справочники.Номенклатура.НайтиПоКоду("0001746");
	Шипы=Справочники.Номенклатура.НайтиПоКоду("0060001");
	Крышки=Справочники.Номенклатура.НайтиПоКоду("0080004");
	
	
	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;


ПостроительОтчетаОтчет.Текст= "
|ВЫБРАТЬ Б.Номенклатура, Б.Номенклатура.Родитель Родитель, Б.Номенклатура.Код Код, Б.Номенклатура.Размер Размер, Б.Номенклатура.Производитель Производитель, Б.ОстатокДляКлиента,
|	Б.СвободныйОстатокДляКлиента,Б.КоличествоВРезерве, 
| Б.ЦенаКрупныйОпт ЦенаКрупныйОпт,	
| Б.ЦенаСреднийОпт ЦенаСреднийОпт,	
| Б.ЦенаМелкийОпт ЦенаМелкийОпт,	
| Б.ЦенаБазовая ЦенаБазовая
| ИЗ (	
|	ВЫБРАТЬ    А.Номенклатура, А.Номенклатура.Родитель Родитель,
|	А.Номенклатура.Код Код, А.Номенклатура.Размер Размер, А.Номенклатура.Производитель
| Производитель, А.Остаток Остаток,  
|		ВЫБОР
|		КОГДА Остаток > 50 И &РежимФормирования
|				ТОГДА 50
|			ИНАЧЕ Остаток
|		КОНЕЦ КАК ОстатокДляКлиента,
|		ВЫБОР
|		КОГДА Остаток-ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) > 50 И &РежимФормирования
|				ТОГДА 50
|			ИНАЧЕ Остаток-ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0)
|		КОНЕЦ КАК СвободныйОстатокДляКлиента,
|	ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) КОличествоВРезерве,
|   ЕстьNULL(ЦеныКрупныйОпт.Цена,0)  ЦенаКрупныйОпт,
|	ЕстьNULL(ЦеныСреднийОпт.Цена,0) ЦенаСреднийОпт,
|	ЕстьNULL(ЦеныМелкийОпт.Цена,0) ЦенаМелкийОпт,
|	0 ЦенаБазовая
|ИЗ
| (ВЫБРАТЬ Номенклатура, СУММА(КоличествоОстаток) Остаток 
|ИЗ
|(ВЫБРАТЬ Номенклатура, КоличествоОстаток
|ИЗ
|РегистрНакопления.ТоварыНаСкладах.Остатки ( , {Номенклатура.*} Номенклатура В ИЕРАРХИИ (&Шины) И  НЕ Склад.ЗапретитьИспользование И "+?(ТранзитныеСклады,"","НЕ ")+" Склад.Транзитный)
| ОБЪЕДИНИТЬ  ВСЕ
|	ВЫБРАТЬ
|		ТоварыНаОтветственномХранении.Номенклатура КАК Номенклатура,
|		ТоварыНаОтветственномХранении.КоличествоОстаток КАК Остаток
|	ИЗ
|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
|			, {Номенклатура.*} (Контрагент= &БелШина ИЛИ Контрагент= &АвтоШина ИЛИ Контрагент=&ВолгаТрейд ИЛИ Контрагент=&ТДКама ИЛИ Контрагент=&Дальнобой) И 
|		(Номенклатура В ИЕРАРХИИ (&Шины) )) КАК ТоварыНаОтветственномХранении )А   
|	СГРУППИРОВАТЬ ПО Номенклатура ) А
| ЛЕВОЕ СОЕДИНЕНИЕ
|РегистрНакопления.ЗаказыПокупателей.Остатки(, {Номенклатура.*} НЕ ЗаказПокупателя.Транзит И ЗаказПокупателя.Проверен) ЗаказыПокупателейОстатки				
|ПО  А.Номенклатура=ЗаказыПокупателейОстатки.Номенклатура
|				ЛЕВОЕ СОЕДИНЕНИЕ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, {Номенклатура.*} ТипЦен = &ТицЦенКрупныйОпт) КАК ЦеныКрупныйОпт			
|   ПО А.Номенклатура=ЦеныКрупныйОпт.Номенклатура
|				ЛЕВОЕ СОЕДИНЕНИЕ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  {Номенклатура.*} ТипЦен = &ТицЦенСреднийОпт) КАК ЦеныСреднийОпт			
|   ПО А.Номенклатура=ЦеныСреднийОпт.Номенклатура
|				ЛЕВОЕ СОЕДИНЕНИЕ
|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  {Номенклатура.*} ТипЦен = &ТицЦенМелкийОпт) КАК ЦеныМелкийОпт			
|   ПО А.Номенклатура=ЦеныМелкийОпт.Номенклатура
|//	ЛЕВОЕ СОЕДИНЕНИЕ
|//	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,  {Номенклатура.*} ТипЦен = &ТицЦенБазовая) КАК ЦеныБазовая			
|//   ПО А.Номенклатура=ЦеныБазовая.Номенклатура 
|) Б
|   ГДЕ Б.ОстатокДляКлиента>0
|	УПОРЯДОЧИТЬ ПО Б.Номенклатура.Наименование
|	ИТОГИ СУММА(ОстатокДляКлиента), СУММА (СвободныйОстатокДляКлиента), СУММА (КоличествоВРезерве),
|   СРЕДНЕЕ (ЦенаКрупныйОпт),СРЕДНЕЕ (ЦенаСреднийОпт),СРЕДНЕЕ (ЦенаМелкийОпт),СРЕДНЕЕ(ЦенаБазовая) ПО Б.Номенклатура ИЕРАРХИЯ";




	
	ПостроительОтчетаОтчет.Параметры.Вставить("Шины", Шины);
	ПостроительОтчетаОтчет.Параметры.Вставить("Шипы", Шипы);
    ПостроительОтчетаОтчет.Параметры.Вставить("БелШина", Справочники.Контрагенты.НайтиПоКоду("91529"));
	ПостроительОтчетаОтчет.Параметры.Вставить("Дальнобой", Справочники.Контрагенты.НайтиПоКоду("92777")); // Джи Ти
    ПостроительОтчетаОтчет.Параметры.Вставить("АвтоШина", Справочники.Контрагенты.НайтиПоКоду("91640"));                                                                        
	ПостроительОтчетаОтчет.Параметры.Вставить("ВолгаТрейд", Справочники.Контрагенты.НайтиПоКоду("92098"));                                                                        
	ПостроительОтчетаОтчет.Параметры.Вставить("ТДКама", Справочники.Контрагенты.НайтиПоКоду("00334"));                                                                        
	                                                                       
	ПостроительОтчетаОтчет.Параметры.Вставить("РежимФормирования",?(ВидОтчета=0,Истина,Ложь ));                                                                        
	
	
	
	ПостроительОтчетаОтчет.Параметры.Вставить("ТицЦенКрупныйОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"));
	ПостроительОтчетаОтчет.Параметры.Вставить("ТицЦенСреднийОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00002"));
	ПостроительОтчетаОтчет.Параметры.Вставить("ТицЦенМелкийОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00004"));
	ПостроительОтчетаОтчет.Параметры.Вставить("ТицЦенБазовая", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"));
	
	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Организация=Справочники.Организации.НайтиПоКоду("00001");
	ОбластьЗаголовок.Параметры.ОрганизацияПолноеНаименование=Организация.НаименованиеПолное;
	СведенияОбОрганизации      	  = СведенияОЮрФизЛице(Организация,ТекущаяДата());
	ОбластьЗаголовок.Параметры.ОписаниеОрганизации=ОписаниеОрганизации(СведенияОбОрганизации,"ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьЗаголовок.Параметры.timestamp="время форм.: "+ТекущаяДата();
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.ТекущаяДата=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ОбластьСтрокаСкладов.Параметры.СтрокаСкладов=СтрокаСкладов;
	//ОбластьСтрокаСкладов.Параметры.СтрокаНоменклатуры=СтрокаНоменклатуры;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		Если ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Иерархия");	
		ИначеЕсли 	ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		Иначе Продолжить;
		КонецЕсли;	
		
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		
	//	ОбластьДетальныхЗаписей.Параметры.Производитель=ВыборкаДетали.Производитель;
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	
	КонецПроцедуры

Процедура ДействияФормыСформироватьТолькоАКБ(Кнопка)
	СтрокаВид="АКБ";		
	ВидОтчета= ЭлементыФормы.Переключатель1.Значение;	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;

	ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=?(ВидОтчета=0,Истина,Ложь);
	
    АКБ=Справочники.Номенклатура.НайтиПоКоду("0080021");
		
	
	Макет = ПолучитьМакет("ОтчетАКБ");
	Запрос = Новый Запрос;


Запрос.Текст= "ВЫБРАТЬ
              |	Б.Номенклатура,
              |	Б.Номенклатура.Артикул КАК Модель,
              |	Б.Номенклатура.Код КАК Код,
              |	Б.Номенклатура.Размер КАК Размер,
              |	Б.Номенклатура.Производитель КАК Производитель,
              |	Б.Емкость,
              |	Б.Номенклатура.КодСБИС КАК Полярность,
              |	Б.ТипКлемм,
              |	Б.ОстатокДляКлиента,
              |	Б.СвободныйОстатокДляКлиента,
              |	Б.КОличествоВРезерве,
              |	Б.ЦенаКрупныйОпт КАК ЦенаКрупныйОпт,
              |	Б.ЦенаМелкийОпт КАК ЦенаМелкийОпт,
              |	Б.ЦенаДилерская
              |ИЗ
              |	(ВЫБРАТЬ
              |		А.Номенклатура КАК Номенклатура,
              |		А.Емкость КАК Емкость,
              |		А.ТипКлемм КАК ТипКлемм,
              |		А.Остаток КАК Остаток,
              |		ВЫБОР
              |			КОГДА А.Остаток > 50
              |					И &РежимФормирования
              |				ТОГДА 50
              |			ИНАЧЕ А.Остаток
              |		КОНЕЦ КАК ОстатокДляКлиента,
              |		ВЫБОР
              |			КОГДА А.Остаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) > 50
              |					И &РежимФормирования
              |				ТОГДА 50
              |			ИНАЧЕ А.Остаток - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
              |		КОНЕЦ КАК СвободныйОстатокДляКлиента,
              |		ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КОличествоВРезерве,
              |		ЕСТЬNULL(ЦеныКрупныйОпт.Цена, 0) КАК ЦенаКрупныйОпт,
              |		ЕСТЬNULL(ЦеныМелкийОпт.Цена, 0) КАК ЦенаМелкийОпт,
              |		ЕСТЬNULL(ЦеныДилерская.Цена, 0) КАК ЦенаДилерская
              |	ИЗ
              |		(ВЫБРАТЬ
              |			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
              |			ЗнСвОб1.Емкость КАК Емкость,
              |			ЗнСвОб2.ТипКлемм КАК ТипКлемм,
              |			ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток
              |		ИЗ
              |			РегистрНакопления.ТоварыНаСкладах.Остатки(
              |					,
              |					Номенклатура В ИЕРАРХИИ (&АКБ)
              |						И (НЕ Склад.ЗапретитьИспользование)
              |						И ("+?(ТранзитныеСклады,"","НЕ ")+" Склад.Транзитный)) КАК ТоварыНаСкладахОстатки
              |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
              |					ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
              |					ЗначенияСвойствОбъектов.Значение КАК Емкость
              |				ИЗ
              |					РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
              |				ГДЕ
              |					ЗначенияСвойствОбъектов.Свойство = &Емкость) КАК ЗнСвОб1
              |				ПО ТоварыНаСкладахОстатки.Номенклатура = ЗнСвОб1.Номенклатура
              |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
              |					ЗначенияСвойствОбъектов.Объект КАК Номенклатура,
              |					ЗначенияСвойствОбъектов.Значение КАК ТипКлемм
              |				ИЗ
              |					РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
              |				ГДЕ
              |					ЗначенияСвойствОбъектов.Свойство = &ТипКлемм) КАК ЗнСвОб2
              |				ПО ТоварыНаСкладахОстатки.Номенклатура = ЗнСвОб2.Номенклатура) КАК А
              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Не ЗаказПокупателя.Транзит И ЗаказПокупателя.Проверен) КАК ЗаказыПокупателейОстатки
              |			ПО А.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦенКрупныйОпт) КАК ЦеныКрупныйОпт
              |			ПО А.Номенклатура = ЦеныКрупныйОпт.Номенклатура
              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦенМелкийОпт) КАК ЦеныМелкийОпт
              |			ПО А.Номенклатура = ЦеныМелкийОпт.Номенклатура
              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦенДилерская) КАК ЦеныДилерская
              |			ПО А.Номенклатура = ЦеныДилерская.Номенклатура) КАК Б
              |ГДЕ
              |	Б.ОстатокДляКлиента > 0
              |
              |УПОРЯДОЧИТЬ ПО
              |	Б.Номенклатура.Наименование";

	Запрос.УстановитьПараметр("АКБ", АКБ);
	Запрос.УстановитьПараметр("РежимФормирования",?(ВидОтчета=0,Истина,Ложь ));                                                                        
	Запрос.УстановитьПараметр("ТипЦенКрупныйОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"));
	Запрос.УстановитьПараметр("ТипЦенМелкийОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00004"));
	Запрос.УстановитьПараметр("ТипЦенДилерская", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00009"));
	Запрос.УстановитьПараметр("Емкость", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00132"));
	Запрос.УстановитьПараметр("ТипКлемм", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90156"));
	
	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Организация=Справочники.Организации.НайтиПоКоду("00001");
	ОбластьЗаголовок.Параметры.ОрганизацияПолноеНаименование=Организация.НаименованиеПолное;
	СведенияОбОрганизации      	  = СведенияОЮрФизЛице(Организация,ТекущаяДата());
	ОбластьЗаголовок.Параметры.ОписаниеОрганизации=ОписаниеОрганизации(СведенияОбОрганизации,"ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	ОбластьЗаголовок.Параметры.timestamp="время форм.: "+ТекущаяДата();
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.ТекущаяДата=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ОбластьСтрокаСкладов.Параметры.СтрокаСкладов=СтрокаСкладов;
	//ОбластьСтрокаСкладов.Параметры.СтрокаНоменклатуры=СтрокаНоменклатуры;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		//Если ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
		//ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Иерархия");	
		//ИначеЕсли 	ВыборкаДетали.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		//Иначе Продолжить;
		//КонецЕсли;	
		
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		
	//	ОбластьДетальныхЗаписей.Параметры.Производитель=ВыборкаДетали.Производитель;
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	КонецПроцедуры

	
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",")

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции // МассивИзСтроки() 




//=====================================================================
Процедура ДействияФормыНастройка(Кнопка)
	
	Форма = ВнешняяОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	
	
	//текущие настройки, возможно уже измененные ранее в этой же Настройке
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	
	
	Если Форма.ОткрытьМодально() = Истина Тогда
		
		//сразу если надо формировать - то формируем Шины
		ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
		ТолькоДиски=Ложь;
		ВидОтчета= ЭлементыФормы.Переключатель1.Значение;
		ЭлементыФормы.ДействияФормы.Кнопки.СохранитьНаСайте.Доступность=?(ВидОтчета=0,Истина,Ложь);
		
		//Формируем отчет по этим настройкам
		// Отчет(ТабДок);
		
	 Иначе
	    ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;
	
	

КонецПроцедуры

функция  ТекстНачальногоЗапроса();

	Текст= "
|ВЫБРАТЬ Номенклатура
|ИЗ 	РегистрНакопления.ЗаказыПокупателей.Остатки(, {Номенклатура.*} 
| Не ЗаказПокупателя.Транзит И ЗаказПокупателя.Проверен) ЗаказыПокупателейОстатки";				
		
 Возврат Текст;
 
 КонецФункции


 //+++ настройка Построителя
 Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	 
	ПостроительОтчетаОтчет.Текст = ТекстНачальногоЗапроса();
	
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	//ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	//ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиНовыйПрайсЛист_3e223a19-3506-4b69-bfbf-8d521b1048fd");
 	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

 КонецПроцедуры


 Процедура ПриЗакрытии()
	СохранитьЗначение("НастройкаВнешниеОбработкиНовыйПрайсЛист_3e223a19-3506-4b69-bfbf-8d521b1048fd", ПостроительОтчетаОтчет.ПолучитьНастройки());
 КонецПроцедуры


 Процедура ТипЦенПриИзменении(Элемент)
	 назв = новый массив;
	 назв.Добавить("Крупный опт");
	 назв.Добавить("Средний опт");
	 назв.Добавить("Мелкий опт");
	 назв.Добавить("Базовая");
	 Если назв.Найти(ТипЦен.Наименование)=неопределено тогда
		 Предупреждение("Выбранный тип цен - не отображается в прайс-листе!");
	 КонецЕсли;	 
 КонецПроцедуры

 Процедура ИспользоватьСкидкуПриИзменении(Элемент)
	 
	 ЭлементыФормы.ТипЦен.Видимость  = ИспользоватьСкидку;
	 ЭлементыФормы.КоманднаяПанельОтбор.Видимость = ИспользоватьСкидку;
	 ЭлементыФормы.Надпись1.Видимость = ИспользоватьСкидку;
	 ЭлементыФормы.Отбор.Видимость = ИспользоватьСкидку;
	 ЭлементыФормы.ТаблицаСкидок.Видимость = ИспользоватьСкидку;
	 
 КонецПроцедуры

 Процедура ТранзитныеСкладыПриИзменении(Элемент)
	 ЭлементыФормы.Подразделение.Видимость = ТранзитныеСклады;
 КонецПроцедуры

 Процедура ПослеВосстановленияЗначений()
	ИспользоватьСкидкуПриИзменении(Неопределено);
 	ТранзитныеСкладыПриИзменении(Неопределено);	
 КонецПроцедуры


 