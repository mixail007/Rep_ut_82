Перем ОбъектПодключения, РезультатПодключения Экспорт;

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "") Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
		
	Возврат РезультатПодключения;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", Ложь);
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "server:3041");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "v83ib_yst_bp");
	СтруктураПодключения.Вставить("Пользователь", "Плотников Дмитрий");
	СтруктураПодключения.Вставить("Пароль", "123654");
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V83");	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ПолучитьДеревоОтличий(Покупатели) Экспорт	
	
	Состояние("Выполняется запрос к Внешней Базе...");
	// строим таблицу документов внешней базы по дате и номеру
	ТаблицаБП = ВыполнитьЗапросКВнешнейБазе(Покупатели);
	
	МенеджерВР = Новый МенеджерВременныхТаблиц;
	
	ЗапросВнашейБазе = Новый Запрос;
	ЗапросВнашейБазе.МенеджерВременныхТаблиц = МенеджерВР;
	ЗапросВнашейБазе.УстановитьПараметр("ТаблицаБП",ТаблицаБП);
	ЗапросВнашейБазе.УстановитьПараметр("НачалоПериода",ДатаНачала);
	ЗапросВнашейБазе.УстановитьПараметр("КонецПериода",КонецДня(ДатаКонца));
	Если Покупатели Тогда
	    ЗапросВнашейБазе.УстановитьПараметр("Вид",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	    ЗапросВнашейБазе.УстановитьПараметр("ПротивоположныйВид",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
    Иначе
	    ЗапросВнашейБазе.УстановитьПараметр("Вид",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	    ЗапросВнашейБазе.УстановитьПараметр("ПротивоположныйВид",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Список = новый СписокЗначений;
	//список.Добавить(Справочники.ТипыДоговоров.Факторинг);
	//список.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата);
	список.Добавить(Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
	список.Добавить(Справочники.ТипыДоговоров.ШинтрейдЯрославль);
	список.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));
	ЗапросВнашейБазе.УстановитьПараметр("Список",Список);
	
	//***2018.04.25 Задача № 42963
	ЗапросВнашейБазе.УстановитьПараметр("Бонусы", Справочники.ТипыДоговоров.Бонусы);

	ЗапросВнашейБазе.Текст = "ВЫБРАТЬ
	                         |	ТаблицаБП.КонтрагентКод,
							 |	ТаблицаБП.КонтрагентНаименование,
	                         |	ТаблицаБП.НачальныйОстаток,
	                         |	ТаблицаБП.Приход,
	                         |	ТаблицаБП.Расход,
	                         |	ТаблицаБП.КонечныйОстаток
	                         |ПОМЕСТИТЬ БП
	                         |ИЗ
	                         |	&ТаблицаБП КАК ТаблицаБП
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	А.Контрагент,
	                         |	А.КонтрагентКод,
	                         |	СУММА(А.НачальныйОстаток) КАК НачальныйОстаток,
	                         |	СУММА(А.Приход) КАК Приход,
	                         |	СУММА(А.Расход) КАК Расход,
	                         |	СУММА(А.КонечныйОстаток) КАК КонечныйОстаток
	                         |ПОМЕСТИТЬ УТ
	                         |ИЗ
	                         |	(ВЫБРАТЬ
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Наименование КАК Контрагент,
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код КАК КонтрагентКод,
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток) КАК НачальныйОстаток,
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход) КАК Приход,
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход) КАК Расход,
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток) КАК КонечныйОстаток
	                         |	ИЗ
	                         |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(
	                         |				&НачалоПериода,
	                         |				&КонецПериода,
	                         |				Авто,
	                         |				,
	                         |				ДоговорКонтрагента.ВидДоговора = &вид
	                         |					И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	                       //  |					И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%не использовать%""
	                         |					И НЕ ДоговорКонтрагента.ТипДоговора В (&Список)) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	                         |	
	                         |	СГРУППИРОВАТЬ ПО
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Наименование,
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Наименование,
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код,
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток),
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход),
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход),
	                         |		СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток)
	                         |	ИЗ
	                         |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(
	                         |				&НачалоПериода,
	                         |				&КонецПериода,
	                         |				Авто,
	                         |				,
	                         |				ДоговорКонтрагента.ВидДоговора = &ПротивоположныйВид
	                         |					И ДоговорКонтрагента.ТипДоговора = &Бонусы) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	                         |	
	                         |	СГРУППИРОВАТЬ ПО
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Наименование,
	                         |		ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код) КАК А
	                         |
	                         |СГРУППИРОВАТЬ ПО
	                         |	А.Контрагент,
	                         |	А.КонтрагентКод
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ЕСТЬNULL(УТ.КонтрагентКод,БП.КонтрагентКод) КАК Код,
	                         |	ЕСТЬNULL(УТ.Контрагент, БП.КонтрагентНаименование) КАК Контрагент,
	                         |	УТ.НачальныйОстаток КАК УТ_НачальныйОстаток,
	                         |	УТ.Приход КАК УТ_Приход,
	                         |	УТ.Расход КАК УТ_Расход,
	                         |	УТ.КонечныйОстаток КАК УТ_КонечныйОстаток,
	                         |	БП.НачальныйОстаток КАК БП_НачальныйОстаток,
	                         |	БП.Приход КАК БП_Приход,
	                         |	БП.Расход КАК БП_Расход,
	                         |	БП.КонечныйОстаток КАК БП_КонечныйОстаток
	                         |ИЗ
	                         |	УТ КАК УТ
	                         |		ПОЛНОЕ СОЕДИНЕНИЕ БП КАК БП
	                         |		ПО УТ.КонтрагентКод = БП.КонтрагентКод
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	Контрагент";
	Результат = ЗапросВнашейБазе.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапросКВнешнейБазе(Покупатели)
	
	Запрос = ОбъектПодключения.NewObject("Запрос");
	ТекстЗапроса = "";
	
	КЧ = Новый КвалификаторыЧисла(12,2);
    КС = Новый КвалификаторыСтроки(20);
	КС1 = Новый КвалификаторыСтроки(50);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ОписаниеТиповС1 = Новый ОписаниеТипов(Массив, , КС1);
    Массив.Очистить();
    Массив.Добавить(Тип("Число"));
    ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаПоДокументуИзУТ = Новый ТаблицаЗначений;
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("КонтрагентКод",ОписаниеТиповС);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("КонтрагентНаименование",ОписаниеТиповС1);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("НачальныйОстаток",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("Приход",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("Расход",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("КонечныйОстаток",ОписаниеТиповЧ);
	
	
			
	ТекстЗапроса = "ВЫБРАТЬ
	|ХозрасчетныйОстаткиИОбороты.Субконто1.Наименование КАК Наименование,
	|ХозрасчетныйОстаткиИОбороты.Субконто1.Код КАК Код,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток, 0) КАК НачальныйОстаток,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт, 0) КАК Приход,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт, 0) КАК Расход,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК КонечныйОстаток
    |ИЗ
	|РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Авто,
	|		,
	|		Счет.КодБыстрогоВыбора = &Код1
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код2
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код3
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код4
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код5,
	|		,
	|		) КАК ХозрасчетныйОстаткиИОбороты
    |
    |УПОРЯДОЧИТЬ ПО
	|Код";
	
	Запрос.Текст = ТекстЗапроса;
	//код = Новый СписокЗначений;
	Если Покупатели Тогда
	   Запрос.УстановитьПараметр("Код1","6201");
	   Запрос.УстановитьПараметр("Код2","6202");
	   Запрос.УстановитьПараметр("Код3","6231");	   
	   //+++Шарафутдинов по задаче 44473 
	   Запрос.УстановитьПараметр("Код4","7602");
	   Запрос.УстановитьПараметр("Код5","7603");
	   //---Шарафутдинов по задаче 44473 
    Иначе
	   Запрос.УстановитьПараметр("Код1","6001");
	   Запрос.УстановитьПараметр("Код2","6002");
	   Запрос.УстановитьПараметр("Код3","6021");
	   Запрос.УстановитьПараметр("Код4","6022");
	   //+++Шарафутдинов по задаче 44473 
	   Запрос.УстановитьПараметр("Код5","7641");	   
	   //---Шарафутдинов по задаче 44473 
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода",ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(ДатаКонца));
	Выборка=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ ИЗ Выборка Цикл
       НовСтрока = ТаблицаПоДокументуИзУТ.Добавить();
	   НовСтрока.КонтрагентНаименование = ?(СокрЛП(СтрокаТЗ.Наименование)<>"",СокрЛП(СтрокаТЗ.Наименование),"Пам");
       НовСтрока.КонтрагентКод = ?(СокрЛП(СтрокаТЗ.Код)<>"",СокрЛП(СтрокаТЗ.Код),"Пам");
	   НовСтрока.НачальныйОстаток = СтрокаТЗ.НачальныйОстаток;
	   НовСтрока.Приход = СтрокаТЗ.Приход;
	   НовСтрока.Расход = СтрокаТЗ.Расход;
	   НовСтрока.КонечныйОстаток = СтрокаТЗ.КонечныйОстаток;
	КонецЦикла;
   
	Возврат ТаблицаПоДокументуИзУТ;
	
КонецФункции

Функция ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

