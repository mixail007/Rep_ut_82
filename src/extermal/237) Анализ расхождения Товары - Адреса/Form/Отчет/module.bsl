
Процедура ДействияФормыОтчетСформировать(Кнопка)

	Если ЗначениеНеЗаполнено(ГруппаСкладов) Тогда
		Предупреждение("Выберите группу складов!", 30);
		возврат;
	КонецЕсли;
	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);
    
КонецПроцедуры
                         
Процедура Отчет(ТабДок) Экспорт

	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Номенклатура.Код,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Регистратор КАК Документ,
	|	ТоварыАдресноеХранение.Номенклатура КАК НоменклатураАдресноеХранение,
	|	ТоварыАдресноеХранение.Регистратор КАК ДокументАдресноеХранение,
	|	ТоварыАдресноеХранение.Склад КАК СкладАХ,
	|	ТоварыНаСкладах.Количество,
	|	ТоварыАдресноеХранение.Количество КАК КоличествоАдресноеХранение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладах.Склад КАК Склад,
	|		ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладах.Регистратор КАК Регистратор,
	|		СУММА(ВЫБОР
	|				КОГДА ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|					ТОГДА -ТоварыНаСкладах.Количество
	|				ИНАЧЕ ТоварыНаСкладах.Количество
	|			КОНЕЦ) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|	ГДЕ
	|		ТоварыНаСкладах.Период МЕЖДУ &НачДата И &КонДата
	|		И ТоварыНаСкладах.Склад.ГруппаСкладов = &ГруппаСкладов
	|		И ТоварыНаСкладах.Склад.АдресноеХранение
	|		И ВЫБОР
	|				КОГДА ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ВнутреннееПеремещениеТоваров
	|					ТОГДА ТоварыНаСкладах.Регистратор.СкладОтправитель <> ТоварыНаСкладах.Регистратор.СкладОтправитель
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И НЕ ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	|		И НЕ ТоварыНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Регистратор,
	|		ТоварыНаСкладах.ВидДвижения,
	|		ТоварыНаСкладах.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаОтветственномХранении.Склад,
	|		ТоварыНаОтветственномХранении.Номенклатура,
	|		ТоварыНаОтветственномХранении.Регистратор,
	|		СУММА(ТоварыНаОтветственномХранении.Количество) как Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаОтветственномХранении КАК ТоварыНаОтветственномХранении
		|	ГДЕ
	|		ТоварыНаОтветственномХранении.Период МЕЖДУ &НачДата И &КонДата
	|		И ТоварыНаОтветственномХранении.Склад.ГруппаСкладов = &ГруппаСкладов
	|		И ТоварыНаОтветственномХранении.Склад.АдресноеХранение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыНаОтветственномХранении.Номенклатура,
	|		ТоварыНаОтветственномХранении.Регистратор,
	|		ТоварыНаОтветственномХранении.ВидДвижения,
	|		ТоварыНаОтветственномХранении.Склад

	|) КАК ТоварыНаСкладах
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыАдресноеХранение.Склад КАК Склад,
	|			ТоварыАдресноеХранение.Номенклатура КАК Номенклатура,
	|			ТоварыАдресноеХранение.Регистратор КАК Регистратор,
	|			СУММА(ТоварыАдресноеХранение.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.ТоварыАдресноеХранение КАК ТоварыАдресноеХранение
	|		ГДЕ
	|			ТоварыАдресноеХранение.Период МЕЖДУ &НачДата И &КонДата
	|			И ТоварыАдресноеХранение.Склад.ГруппаСкладов = &ГруппаСкладов
	|			И ВЫБОР
	|					КОГДА ТоварыАдресноеХранение.Регистратор ССЫЛКА Документ.ВнутреннееПеремещениеТоваров
	|						ТОГДА ТоварыАдресноеХранение.Регистратор.СкладОтправитель <> ТоварыАдресноеХранение.Регистратор.СкладОтправитель
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			И НЕ ТоварыАдресноеХранение.Регистратор ССЫЛКА Документ.ОприходованиеТоваров
	|			И НЕ ТоварыАдресноеХранение.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыАдресноеХранение.Номенклатура,
	|			ТоварыАдресноеХранение.Регистратор,
	|			ТоварыАдресноеХранение.ВидДвижения,
	|			ТоварыАдресноеХранение.Склад) КАК ТоварыАдресноеХранение
	|		ПО ТоварыНаСкладах.Номенклатура = ТоварыАдресноеХранение.Номенклатура
	|			И ТоварыНаСкладах.Регистратор = ТоварыАдресноеХранение.Регистратор
	|			И ТоварыНаСкладах.Склад = ТоварыАдресноеХранение.Склад
	|ГДЕ
	|	ЕСТЬNULL(ТоварыНаСкладах.Количество, 0) <> ЕСТЬNULL(ТоварыАдресноеХранение.Количество, 0)";

	Запрос.УстановитьПараметр("КонДата", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НачДата", НачПериода);
	Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов );

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыАдресноеХранениеОстатки.Номенклатура.Код КАК Код,
	               |	ТоварыАдресноеХранениеОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыАдресноеХранениеОстатки.АдресХранения КАК АдресХранения,
	               |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток,
	               |	""Остаток меньше нуля!"" КАК НормаПаллетированияСсылка,
	               |	0 КАК НормаПаллетирования,
	               |	-100 * ТоварыАдресноеХранениеОстатки.КоличествоОстаток КАК ПревышениеНормаПаллетирования
	               |ИЗ
	               |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	               |			&КонДата,
	               |			Склад.ГруппаСкладов = &ГруппаСкладов
	               |				И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)) КАК ТоварыАдресноеХранениеОстатки
	               |ГДЕ
	               |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток < 0
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ТоварыАдресноеХранениеОстатки.Номенклатура.Код,
	               |	ТоварыАдресноеХранениеОстатки.Номенклатура,
	               |	ТоварыАдресноеХранениеОстатки.АдресХранения,
	               |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток,
	               |	НормыПаллетирования.Ссылка,
	               |	ЕСТЬNULL(НормыПаллетирования.Количество, &КолНормы),
	               |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток - ЕСТЬNULL(НормыПаллетирования.Количество, &КолНормы)
	               |ИЗ
	               |	РегистрНакопления.ТоварыАдресноеХранение.Остатки(&КонДата, Склад.ГруппаСкладов = &ГруппаСкладов
				   |		И Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)) КАК ТоварыАдресноеХранениеОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыПаллетирования КАК НормыПаллетирования
	               |		ПО ТоварыАдресноеХранениеОстатки.Номенклатура.Типоразмер.Ширина = НормыПаллетирования.Ширина
	               |			И ТоварыАдресноеХранениеОстатки.Номенклатура.Типоразмер.Диаметр = НормыПаллетирования.Диаметр
	               |			И (ТоварыАдресноеХранениеОстатки.Склад = НормыПаллетирования.Владелец
	               |				ИЛИ ТоварыАдресноеХранениеОстатки.Склад.Подразделение = НормыПаллетирования.Владелец.Подразделение)
	               |ГДЕ
	               |	ТоварыАдресноеХранениеОстатки.КоличествоОстаток / ЕСТЬNULL(НормыПаллетирования.Количество, &КолНормы) - 1 >= &ДоляПревышенияНормы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПревышениеНормаПаллетирования УБЫВ,
	               |	АдресХранения,
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
Запрос.УстановитьПараметр("ДоляПревышенияНормы", 0.50); // на 1/5  (2 от 10, 4 от 16, 4 от 20)
Запрос.УстановитьПараметр("КолНормы", 1);
Запрос.УстановитьПараметр("КонДата", КонецДня(КонПериода));
Запрос.УстановитьПараметр("ГруппаСкладов", ГруппаСкладов );

Результат=Запрос.Выполнить();

Если не Результат.Пустой() Тогда
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокОстатки");
    ТабДок.Вывести(ОбластьЗаголовок);
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали1");
		ОбластьДетальныхЗаписей.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьДетальныхЗаписей);	
	КонецЦикла;
КонецЕсли;	

	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	Склад = Склад5000();
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = КонецМесяца(ТекущаяДата());
	//ЭлементыФормы.Склад.Доступность = РольДоступна("ПолныеПрава");
КонецПроцедуры

функция Склад5000()
	Если глТекущийПользователь.ОсновноеПодразделение=Справочники.Подразделения.НайтиПоКоду("00106") Тогда
		рез = Справочники.Склады.НайтиПоКоду("00791"); // 4000
	Иначе
		рез =Справочники.Склады.НайтиПоКоду("00642"); // 5000
	КонецЕсли;
	возврат рез;
КонецФункции	