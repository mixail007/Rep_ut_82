перем тзНом;

Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(расшифровка)=Тип("Строка") тогда
		СтандартнаяОбработка=ложь;
		Если расшифровка<>"" тогда
			ЗапуститьПриложение(""+Расшифровка+"");
		Иначе
			Предупреждение("Картинка отсутствует.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


функция ЗаписатьФайлВформате_UTF8_без_BOM(текст,полноеИмяФайла)
	
	// записываем в файл с символами BOM в начале файле	
	ТекстовыйФайлUTF8_Bom = Новый ТекстовыйДокумент();
	ТекстовыйФайлUTF8_Bom.ДобавитьСтроку(текст);
	ТекстовыйФайлUTF8_Bom.Записать(полноеИмяФайла,"UTF-8");
	
	// открываем файл и считываем символы после символов BOM
	Данные = Новый ДвоичныеДанные(полноеИмяФайла);
	Строка64=Base64Строка(Данные);
	Строка64=Прав(Строка64,СтрДлина(Строка64)-4);
	ДанныеНаЗапись=Base64Значение(Строка64);
	ДанныеНаЗапись.Записать(полноеИмяФайла); // записываем
	
КонецФункции

Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

Процедура ДействияФормыДействие6(Кнопка)
	//выгрузим в таблицу
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Настройки = КомпоновщикНастроек.Настройки;				
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
	СхемаКомпоновкиДанных,Настройки,,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 	
	
	//
	ЗаписьXML = Новый ЗаписьXML;
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	
	
	ЗаписьXML.ОткрытьФайл(ВремФайл);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("list");
	
	Для каждого СтрокаТЗ из  ДанныеТЗ цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("product");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("code");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.Код);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("name");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.Наименование);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("model");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.Модель);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("model_code");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.МодельКод);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("tiporazmer");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.Типоразмер);
		ЗаписьXML.ЗаписатьКонецЭлемента();

		
		ЗаписьXML.ЗаписатьНачалоЭлемента("color");
		ЗаписьXML.ЗаписатьТекст(СтрокаТЗ.Цвет);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Т=Новый ТекстовыйДокумент;
	Т.Прочитать(ВремФайл);
	ЗаписатьФайлВформате_UTF8_без_BOM(Т.ПолучитьТекст(),ВремФайл);
	
	ОтправитьПолучитьЗапрос(ВремФайл);
КонецПроцедуры

Функция ОтправитьПолучитьЗапрос(Файл)
	
	серверFTP = "188.225.16.30";	
	портFTP = 21;
	имяПользователяFTP = "dc140403_sm";
	парольПользователяFTP = "7DwR3oXC";
	пассивноеСоединениеFTP = Истина;
	ПроксиFTP = null;
	ктлгFTP="/xml/";
	
	ИмяФайлаКуда   = "list.xml";
	Попытка	
		// FTPСоединение(<Сервер>, <Порт>, <ИмяПользователя>, <ПарольПользователя>, <Прокси>, <ПассивноеСоединение>, <Таймаут>) 
		ФТП = Новый FTPСоединение(
		серверFTP,
		портFTP,
		имяПользователяFTP,
		парольПользователяFTP,
		ПроксиFTP,
		пассивноеСоединениеFTP
		);
		
		ФТП.УстановитьТекущийКаталог(ктлгFTP);
		ФТП.Записать(Файл, ИмяФайлаКуда);
		
		ИмяФайла= ПолучитьИмяВременногоФайла("txt");
		
		HTTP = Новый HTTPСоединение("kostroma.kolesatyt.ru",,,,,); 
		
		HTTP.Получить("/1c_photo.php", ИмяФайла);
		
		ТекстовыйДокумент=Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		КодыБезКартинок=Новый Массив;
		тзНом.Очистить();
		Для к=1 по к<=ТекстовыйДокумент.КоличествоСтрок() цикл
			Строк=ТекстовыйДокумент.ПолучитьСтроку(к);
			Строк=Сред(Строк,?(Лев(Строк,1)="|",2,1));
			МассВрем=РазложитьСтрокуВМассив(Строк,"|");
			Для каждого элМ из МассВрем цикл
				нСтр=тзНом.Добавить();
				м2=РазложитьСтрокуВМассив(элМ,",");
				нСтр.Код=м2[0];
				нСтр.КартинкаПрямая=?(м2[1]="false","",м2[1]);
				нСтр.КартинкаПодУглом=?(м2[2]="false","",м2[2]);
			КонецЦикла;	
		КонецЦикла;
		ПоказатьЭлементыБезКартинок();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
	КонецПопытки;
	
КонецФункции

Процедура ПоказатьЭлементыБезКартинок()
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	втВозвратОтСайта.Код,
	             |	втВозвратОтСайта.КартинкаПрямая,
	             |	втВозвратОтСайта.КартинкаПодУглом
	             |ПОМЕСТИТЬ втОтСайта
	             |ИЗ
	             |	&втВозвратОтСайта КАК втВозвратОтСайта
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вложенный.Ссылка,
	             |	вложенный.Модель,
	             |	вложенный.КартинкаПрямая,
	             |	вложенный.КартинкаПодУглом,
	             |	вложенный.Код
	             |ПОМЕСТИТЬ втНомСКартинками
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		Номенклатура.Ссылка КАК Ссылка,
	             |		Номенклатура.Модель КАК Модель,
	             |		втОтСайта.КартинкаПрямая КАК КартинкаПрямая,
	             |		втОтСайта.КартинкаПодУглом КАК КартинкаПодУглом,
	             |		Номенклатура.Код КАК Код
	             |	ИЗ
	             |		Справочник.Номенклатура КАК Номенклатура
	             |			ЛЕВОЕ СОЕДИНЕНИЕ втОтСайта КАК втОтСайта
	             |			ПО Номенклатура.Код = втОтСайта.Код
	             |	ГДЕ
	             |		Номенклатура.Код В
	             |				(ВЫБРАТЬ
	             |					втОтСайта.Код
	             |				ИЗ
	             |					втОтСайта КАК втОтСайта)) КАК вложенный
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втНомСКартинками.Ссылка,
	             |	втНомСКартинками.Модель,
	             |	втНомСКартинками.КартинкаПрямая,
	             |	втНомСКартинками.КартинкаПодУглом,
	             |	вложенный.Значение КАК Цвет,
	             |	втНомСКартинками.Код
	             |ИЗ
	             |	втНомСКартинками КАК втНомСКартинками
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ЗначенияСвойствОбъектов.Объект КАК Объект,
	             |			ЗначенияСвойствОбъектов.Значение КАК Значение
	             |		ИЗ
	             |			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |		ГДЕ
	             |			ЗначенияСвойствОбъектов.Свойство.Наименование = ""Цвет""
	             |			И ЗначенияСвойствОбъектов.Объект В
	             |					(ВЫБРАТЬ
	             |						втНомСКартинками.Ссылка
	             |					ИЗ
	             |						втНомСКартинками КАК втНомСКартинками)) КАК вложенный
	             |		ПО втНомСКартинками.Ссылка = вложенный.Объект";
	Запрос.УстановитьПараметр("втВозвратОтСайта",тзНом);
	Запрос.УстановитьПараметр("ТолькоБезКартинок",Истина);
	Рез=Запрос.Выполнить().Выбрать();
	
	
	Макет=ПолучитьМакет("Макет");
	ТабДокумент=ЭлементыФормы.ПолеТабличногоДокумента1;//новый табличныйДокумент;
	ТабДокумент.Очистить();
	Область=Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(Область);
	Область=Макет.ПолучитьОбласть("Элемент");
	
	Пока Рез.Следующий() Цикл
		выводить=ложь;
		Если флБезКартинкиПодУглом и Рез.КартинкаПодУглом="" тогда
			выводить=истина;
		КонецЕсли;
		Если флБезКартинкиПрямой и Рез.КартинкаПрямая="" тогда
			выводить=истина;
		КонецЕсли;
		Если не флБезКартинкиПодУглом и не флБезКартинкиПрямой тогда
			выводить=истина;
		КонецЕсли;
		Если выводить тогда
			Область.Параметры.Заполнить(Рез); 
			ТабДокумент.Вывести(Область);
		КонецЕсли;
		
	КонецЦикла;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.Показать();
КонецПроцедуры	

Процедура ДействияФормыДействие7(Кнопка)
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Настройки = КомпоновщикНастроек.Настройки;				
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
	СхемаКомпоновкиДанных,Настройки,,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
КонецПроцедуры

Процедура флБезКартинкиПодУгломПриИзменении(Элемент)
	ПоказатьЭлементыБезКартинок();
КонецПроцедуры

Процедура флБезКартинкиПрямойПриИзменении(Элемент)
	ПоказатьЭлементыБезКартинок();
КонецПроцедуры


тзНом=новый ТаблицаЗначений;
тзНом.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(7)));
тзНом.Колонки.Добавить("КартинкаПрямая",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(700)));
тзНом.Колонки.Добавить("КартинкаПодУглом",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(700)));