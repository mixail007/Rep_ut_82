перем тзРасстояния,ТзМаршруты, тзТочкиМаршрута, ТзМаршрутыФинальные, РазумнаяДлинаМаршрута,РасстояниеДоНеобходимойТочки;
Перем НеобходимаяТочка;

процедура РассчитатьМинимальноеКоличествоТовараВКаждуюТочку(стр)
	Марш=Стр.Маршрут;
	Длина=Стр.Длина;
	МаршрутСКолТовара= новый массив(Марш.Количество(),2);
	Для к=0 по Марш.ВГраница() цикл
		МаршрутСКолТовара[к][0]=Марш[к];
	КонецЦикла;
	к=1;
	Для каждого элМ из Марш цикл
		Если к>Марш.ВГраница()-1 тогда
			прервать;
		КонецЕсли;	
		Если Длина<>0 тогда
			ОтрезокXY=ПолучитьДлинуОтрезка(Марш[к-1],Марш[к]);
			ОтрезокYZ=ПолучитьДлинуОтрезка(Марш[к],Марш[к+1]);
			ОтрезокXZ=ПолучитьДлинуОтрезка(Марш[к-1],Марш[к+1]);
			МинКолТовара=Окр(((ОтрезокXY+ОтрезокYZ-ОтрезокXZ)/Длина*1500),0,1);
		Иначе
			МинКолТовара=0;
		КонецЕсли;
		МаршрутСКолТовара[к][1]=МинКолТовара;
		к=к+1;
	КонецЦикла;
	Стр.Маршрут=МаршрутСКолТовара;
КонецПроцедуры	

Функция ПересчитатьДлинуМаршрута(Марш)
	Длина=0;
	Для к=0 по Марш.Количество()-2 цикл
		Попытка
			Длина=Длина+ПолучитьДлинуОтрезка(Марш[к][0],Марш[к+1][0]);
		Исключение
			Длина=Длина+ПолучитьДлинуОтрезка(Марш[к],Марш[к+1]);
		КонецПопытки;
	КонецЦикла;
	Возврат Длина;
КонецФункции	

Функция ПроходитПроверкуПоКрюкам(Марш)
	НеобходимыйГородБыл=ложь;
	КоличествоТочекВМаршруте=Марш.Маршрут.Количество();
	Если КоличествоТочекВМаршруте>2 тогда
		Для к=0 по КоличествоТочекВМаршруте-2-1 цикл
			Если Марш.Маршрут[к]=НеобходимыйГород тогда
				НеобходимыйГородБыл=истина;
			КонецЕсли;	
			//Если Марш.Маршрут[к+1]=НеобходимыйГород тогда
			//Иначе
			Если ПолучитьДлинуОтрезка(Марш.Маршрут[к],Марш.Маршрут[к+1])+ПолучитьДлинуОтрезка(Марш.Маршрут[к+1],Марш.Маршрут[к+2])>
				ПолучитьДлинуОтрезка(Марш.Маршрут[к],Марш.Маршрут[к+2])+?(Марш.Длина>1500,ПолучитьДлинуОтрезка(Марш.Маршрут[к],Марш.Маршрут[к+2])/10,150) тогда
				Если НеобходимыйГородБыл  или Марш.Маршрут[к+1]=НеобходимыйГород тогда //отрезаем только хвост
					Если Марш.Маршрут[к+1]=НеобходимыйГород тогда
						возврат к+1;	
					Иначе
						возврат к;
					КонецЕсли;
				Иначе//маршрут не годится
					Возврат -1;
				КонецЕсли;	
			КонецЕсли;	
			//КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Возврат 0;
КонецФункции

Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

Функция ПолучитьСледующуюТочку(Узел,Родители)
	Род=Родители+"|"+Узел.Точка;
	Если Узел.Строки.Количество()=0 тогда //конецМаршрута
		стрНовыйМаршрут=тзМаршруты.Добавить();
		Если Лев(СокрЛП(Род),1)="|"тогда
			Род=Сред(СокрЛП(Род),2);
		КонецЕсли;	
		стрНовыйМаршрут.Маршрут=РазложитьСтрокуВМассив(Род,"|");
		//стрНовыйМаршрут.МаршрутСтрока=Род;
		стрНовыйМаршрут.Длина=Узел.ДлинаМаршрута;
	Иначе
		Для каждого стр из Узел.Строки Цикл
			//Род=Род+"|"+стр.Точка;
			ПолучитьСледующуюТочку(стр,Род);
		КонецЦикла;
	КонецЕсли;
КонецФункции	

Процедура РазложитьМаршрутыВСтроки(Марш)
	Состояние("Маршруты в таблицу.");
	
	Для каждого Узел из Марш.Строки Цикл
		ПолучитьСледующуюТочку(Узел,"");
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьДлинуОтрезка(Т1,Т2)
	//
	СтруктураОтбора=Новый структура("Город1,Город2");
	СтруктураОтбора.Город1=Т1;
	СтруктураОтбора.Город2=Т2;
	строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	Для каждого Расстояние из строки цикл
		Возврат Расстояние.Расстояние;
	КонецЦикла;	
	СтруктураОтбора.Город1=Т2;
	СтруктураОтбора.Город2=Т1;
	строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	Для каждого Расстояние из строки цикл
		Возврат Расстояние.Расстояние;
	КонецЦикла;
	//ищем и по центрам
	//
	//Ц1=тзТочкиМаршрута.Найти(Т1,"Город").Центр;
	//Ц2=тзТочкиМаршрута.Найти(Т2,"Город").Центр;
	//
	//СтруктураОтбора.Город1=Ц1;
	//СтруктураОтбора.Город2=Т2;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;

	//СтруктураОтбора.Город1=Т2;
	//СтруктураОтбора.Город2=Ц1;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;
	//
	//СтруктураОтбора.Город1=Ц1;
	//СтруктураОтбора.Город2=Ц2;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;
	//
	//СтруктураОтбора.Город1=Ц2;
	//СтруктураОтбора.Город2=Ц1;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;

	//СтруктураОтбора.Город1=Т1;
	//СтруктураОтбора.Город2=Ц2;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;
	//
	//СтруктураОтбора.Город1=Ц2;
	//СтруктураОтбора.Город2=Т1;
	//строки=тзРасстояния.НайтиСтроки(СтруктураОтбора);
	//Для каждого Расстояние из строки цикл
	//	Возврат Расстояние.Расстояние;
	//КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

Функция ПроверкаТочки(Парам,Точка,ДлинаТекущегоОтрезка)
	ТочкаПодходит=Истина;
	
	//Если Парам.ПрошедшиеТМ.Найти(Точка,"Город")<>Неопределено тогда//В этой точке мы уже были
	//	ТочкаПодходит=ложь;
	//	Возврат ТочкаПодходит;
	//КонецЕсли;	
	
	Если Парам.ТочекВМаршруте>МаксТочекМаршрута тогда
		ТочкаПодходит=ложь;
		Возврат ТочкаПодходит;
	КонецЕсли;
	
	Если Парам.ДлинаМаршрута+ДлинаТекущегоОтрезка>МаксДлинаМаршрута Тогда
		ТочкаПодходит=Ложь;
		Возврат ТочкаПодходит;
	КонецЕсли;
	
	Если Парам.ДлинаМаршрута+ДлинаТекущегоОтрезка>РазумнаяДлинаМаршрута Тогда
		ТочкаПодходит=Ложь;
		Возврат ТочкаПодходит;
	КонецЕсли;
	
	Если Парам.ТочекВМаршруте=0 и ДлинаТекущегоОтрезка> РасстояниеДоНеобходимойТочки тогда
		ТочкаПодходит=Ложь;
		Возврат ТочкаПодходит;
	КонецЕсли;
	
	Если Парам.ТочекВМаршруте=0 и ДлинаТекущегоОтрезка< РасстояниеДоНеобходимойТочки/3 тогда
		ТочкаПодходит=Ложь;
		Возврат ТочкаПодходит;
	КонецЕсли;	
	
	//если мы отдаляемся от необходимой точки
	Если не (Парам.ЕстьНеобходимаяТочка или  Точка=НеобходимыйГород) тогда
		Если  ПолучитьДлинуОтрезка(Точка,НеобходимыйГород)+300>ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,НеобходимыйГород) тогда
			ТочкаПодходит=Ложь;
			Возврат ТочкаПодходит;
		КонецЕсли;
	ИначеЕсли не Точка=НеобходимыйГород	 тогда
		Если  ПолучитьДлинуОтрезка(Точка,НеобходимыйГород)+300<=ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,НеобходимыйГород) тогда
			ТочкаПодходит=Ложь;
			Возврат ТочкаПодходит;
		КонецЕсли;
	КонецЕсли;
	
	//если 2 точки подряд мы отдаляемся от необходимой точки
	Если не (Парам.ЕстьНеобходимаяТочка или  Точка=НеобходимыйГород) тогда
		Если Парам.ПредТМ.Родитель=неопределено тогда
		Иначе
			Если ПолучитьДлинуОтрезка(Парам.ПредТМ.Родитель.Точка,НеобходимыйГород)<ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,НеобходимыйГород) и 
				ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,НеобходимыйГород)<ПолучитьДлинуОтрезка(Точка,НеобходимыйГород) тогда 
				ТочкаПодходит=Ложь;
				Возврат ТочкаПодходит;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	//если до необходимой точки мы не проходим по расстоянию
	Если не (Парам.ЕстьНеобходимаяТочка или  Точка=НеобходимыйГород) тогда
		Если  Парам.ДлинаМаршрута+ДлинаТекущегоОтрезка+ПолучитьДлинуОтрезка(Точка,НеобходимыйГород)>МаксДлинаМаршрута тогда
			ТочкаПодходит=Ложь;
			Возврат ТочкаПодходит;
		КонецЕсли;	
	КонецЕсли;	
	//Парам.ПредТМ//пред точка
	Если Парам.ПредТМ.Родитель=неопределено тогда
	Иначе
		Если ПолучитьДлинуОтрезка(Парам.ПредТМ.Родитель.Точка,Парам.ПредТМ.Точка)+
		    ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,Точка)=
			ПолучитьДлинуОтрезка(Парам.ПредТМ.Родитель.Точка,точка) тогда  //1,2,3 точки маршрута, в точку 2 едем через 3
			ТочкаПодходит=Ложь;
		Возврат ТочкаПодходит;
		КонецЕсли;	
	КонецЕсли;	//пред-пред точка
	//Проверка на крюк
	Возврат ТочкаПодходит;
КонецФункции

Функция ДобавитьОтрезок(Парам)
	обработкаПрерыванияПользователя();
	Узел=Парам.ПредТМ;
	ПрошедшиеТМ=Парам.ПрошедшиеТМ.Скопировать();
	нСтр=ПрошедшиеТМ.Добавить();
	нСтр.Точка=Узел.Точка;

	Для каждого Претендент из тзТочкиМаршрута цикл
		Если ПрошедшиеТМ.Найти(СокрЛП(Претендент.Город),"Точка")=Неопределено тогда//В этой точке мы не были
			ДлинаТекущегоОтрезка=ПолучитьДлинуОтрезка(Парам.ПредТМ.Точка,Претендент.Город);
			Если ПроверкаТочки(Парам,Претендент.Город,ДлинаТекущегоОтрезка) тогда
								
				НовыйУзел=Узел.Строки.Добавить();
				НовыйУзел.Точка=Претендент.Город;
				НовыйУзел.ДлинаМаршрута= Парам.ДлинаМаршрута+ДлинаТекущегоОтрезка;
				
				Парам2=Новый Структура("ПредТМ,ДлинаМаршрута,ТочекВМаршруте,ПрошедшиеТМ,ЕстьНеобходимаяТочка");
				Парам2.ПредТМ=НовыйУзел;
				Парам2.ДлинаМаршрута=Парам.ДлинаМаршрута+ДлинаТекущегоОтрезка;
				Парам2.ТочекВМаршруте=Парам.ТочекВМаршруте+1;
				Парам2.ПрошедшиеТМ=ПрошедшиеТМ;
				
				Если СокрЛП(НеобходимыйГород)=СокрЛП(Претендент.Город) тогда
					ЕстьНеобходимаяТочка=истина;
				Иначе
					ЕстьНеобходимаяТочка=ложь;
				КонецЕсли;
				Парам2.ЕстьНеобходимаяТочка=?(ЕстьНеобходимаяТочка,истина,Парам.ЕстьНеобходимаяТочка);
				ДобавитьОтрезок(Парам2);
				Если Парам2.ЕстьНеобходимаяТочка или НовыйУзел.Строки.Количество()>0 тогда
				Иначе
					Узел.Строки.Удалить(НовыйУзел);
				КонецЕсли;	
			Иначе
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция получитьРасстояние(Г1,Ц1,Г2,Ц2)
	Расстояние=-1;
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	вложенный.Город1,
	|	вложенный.Город2,
	|	вложенный.Расстояние,
	|	вложенный.Приоритет КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расстояния.Город1 КАК Город1,
	|		Расстояния.Город2 КАК Город2,
	|		Расстояния.Расстояние КАК Расстояние,
	|		1 КАК Приоритет
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Город1
	|		И Расстояния.Город2 = &Город2
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		2
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Город2
	|		И Расстояния.Город2 = &Город1
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		3
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Город1
	|		И Расстояния.Город2 = &Ц2
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		4
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Ц2
	|		И Расстояния.Город2 = &Город1
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		5
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Ц1
	|		И Расстояния.Город2 = &Город2
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		6
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Город2
	|		И Расстояния.Город2 = &Ц1
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		7
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Ц1
	|		И Расстояния.Город2 = &Ц2
	|		И Расстояния.Расстояние <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расстояния.Город1,
	|		Расстояния.Город2,
	|		Расстояния.Расстояние,
	|		8
	|	ИЗ
	|		РегистрСведений.Расстояния КАК Расстояния
	|	ГДЕ
	|		Расстояния.Город1 = &Ц2
	|		И Расстояния.Город2 = &Ц1
	|		И Расстояния.Расстояние <> 0) КАК вложенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	//Г1=СтрЗаменить(Г1," г.","");
	//Г1=СтрЗаменить(Г1," г","");
	//Г2=СтрЗаменить(Г2," г.","");
	//Г2=СтрЗаменить(Г2," г","");
	//Ц1=СтрЗаменить(Ц1," г.","");
	//Ц1=СтрЗаменить(Ц1," г","");
	//Ц2=СтрЗаменить(Ц2," г.","");
	//Ц2=СтрЗаменить(Ц2," г","");

	Запрос.УстановитьПараметр("Город1",СтрЗаменить(Г1," г",""));			 
	Запрос.УстановитьПараметр("Город2",СтрЗаменить(Г2," г",""));
	Запрос.УстановитьПараметр("Ц1",СтрЗаменить(Ц1," г",""));
	Запрос.УстановитьПараметр("Ц2",СтрЗаменить(Ц2," г",""));
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Расстояние=Выборка.Расстояние;
		Возврат Расстояние;
	КонецЦикла;	
	Возврат Расстояние;
КонецФункции	

Функция ЗаполнитьТаблицуРасстояний(Точки)
	
	Состояние("Заполнение таблицы расстояний.");
	тзОтрезки=новый таблицаЗначений;
	тзОтрезки.Колонки.Добавить("Город1");
	тзОтрезки.Колонки.Добавить("Город2");
	тзОтрезки.Колонки.Добавить("Расстояние");
	
	
	Рез1=Точки.Скопировать();
	Рез2=Точки.Скопировать();
	ПараметрыОтбора= новый Структура;
	Для каждого стр1 из Рез1 цикл
		Город1= СокрЛП(стр1.Город);
		Если Город1="" тогда
			Продолжить;
		конецесли;
		Центр1= СокрЛП(стр1.Центр);
		
		Для каждого стр2 из Рез2 цикл
			Город2= СокрЛП(стр2.Город);
			Если Город2="" тогда
				Продолжить;
			конецесли;
			Центр2= СокрЛП(стр2.Центр);
			Если Город1=Город2 Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбора.Вставить("Город1",Город2);
			ПараметрыОтбора.Вставить("Город2",Город1);
			
			Если тзОтрезки.НайтиСтроки(ПараметрыОтбора).Количество()=0 тогда
				
				Расстояние=получитьРасстояние(Город1,Центр1,Город2,Центр2);
				Если Расстояние>=0 тогда
					НоваяСтрока=тзОтрезки.Добавить();
					НоваяСтрока.Город2=Город2;
					НоваяСтрока.Город1=Город1;
					НоваяСтрока.Расстояние=Расстояние;
				Иначе
					НоваяСтрока=тзОтрезки.Добавить();
					НоваяСтрока.Город2=Город2;
					НоваяСтрока.Город1=Город1;
					Если Город1=Город2 или Город1= Центр2 или Центр2=Город1 или Центр1=Центр2 тогда
						НоваяСтрока.Расстояние=0;	 
					Иначе
						НоваяСтрока.Расстояние=99999999;
						Сообщить("Расстояние: "+Город1+" - "+Город2+" не рассчитано.");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	 	 
	КонецЦикла;	 
	к=1;
	Возврат тзОтрезки;
КонецФункции	

Процедура КнопкаВыполнитьНажатие(Кнопка)
	ВремяНачала=ТекущаяДата();
	
	Маршруты.Строки.Очистить();
	Если СокрЛП(НеобходимыйГород)="" тогда
		Сообщить("Не определен город доставки.");
	Иначе	
		//заполняем тзТочкиМаршрута точками из заказов
		РезультатЗапросаЗаказыПоГородам=ЗаполнитьТочкиНажатие();	
		//заполняем таблицу расстояний между выбраными точками
		тзРасстояния= ЗаполнитьТаблицуРасстояний(тзТочкиМаршрута);
		
		ПрошедшиеТМ=новый таблицаЗначений;
		ПрошедшиеТМ.Колонки.Добавить("Точка");
		
		УзелЯ=Маршруты.Строки.Добавить();
		УзелЯ.Точка="Ярославль г";
		УзелЯ.ДлинаМаршрута=0;
		
		РасстояниеДоНеобходимойТочки=ПолучитьДлинуОтрезка("Ярославль г",НеобходимыйГород);
		РазумнаяДлинаМаршрута=РасстояниеДоНеобходимойТочки*4;
		Парам=Новый Структура("ПредТМ,ДлинаМаршрута,ТочекВМаршруте,ПрошедшиеТМ,ЕстьНеобходимаяТочка,РазумнаяДлинаМаршрута,МестаОсталось");
		Парам.ПредТМ=УзелЯ;
		Парам.ДлинаМаршрута=0;
		Парам.ТочекВМаршруте=0;
		Парам.ПрошедшиеТМ=ПрошедшиеТМ;
		Парам.ЕстьНеобходимаяТочка=ложь;
		Парам.МестаОсталось=ВместимостьМашины;
		
		Состояние("Построение маршрутов.");
		
		ДобавитьОтрезок(Парам);
		Сообщить(""+(ТекущаяДата()-ВремяНачала)+ "сек.");
		
		//найденные маршруты заносим в ТзМаршруты
		ТзМаршруты.Очистить();
		РазложитьМаршрутыВСтроки(Маршруты);
		Сообщить("Маршрутов: "+ТзМаршруты.Количество());
		//те маршруты, в которых есть большой крюк, выкидываем
		ОтсеятьПоКрюкам();
		//в оставшиеся маршруты проставляем количество из заказов
		ЗагрузитьМаршрут();
		//выводим рез-т
		Печать2(РезультатЗапросаЗаказыПоГородам);
	КонецЕсли;	
КонецПроцедуры

Функция ЗаполнитьТочкиНажатие()
	Состояние("Отбор заказов покупателя");
	тзТочкиМаршрута.Очистить();
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	вложеный.ДоговорКонтрагентаВладелец КАК Контрагент,
	             |	СУММА(вложеный.КоличествоОстаток) КАК Количество,
	             |	вложеный.ЗаказПокупателя,
	             |	вложеный.Ответственный
	             |ПОМЕСТИТЬ Контрагенты
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК ДоговорКонтрагентаВладелец,
	             |		СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный КАК Ответственный
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |				&КонПериод,
	             |				ЗаказПокупателя = &ВыбЗаказ
	             |					ИЛИ ЗаказПокупателя.Проверен
	             |						И (Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	             |							ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины))
	             |						И ВЫБОР
	             |							КОГДА &ТолькоДиски
	             |								ТОГДА Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	             |							ИНАЧЕ ИСТИНА
	             |						КОНЕЦ) КАК ЗаказыПокупателейОстатки
	             |	ГДЕ
	             |		ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец,
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя,
	             |		ЗаказыПокупателейОстатки.ЗаказПокупателя.Ответственный) КАК вложеный
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	вложеный.ДоговорКонтрагентаВладелец,
	             |	вложеный.ЗаказПокупателя,
	             |	вложеный.Ответственный
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	КонтактнаяИнформация.Объект,
	             |	КонтактнаяИнформация.Представление,
	             |	КонтактнаяИнформация.Поле2 КАК Область,
	             |	ВЫБОР
	             |		КОГДА КонтактнаяИнформация.Поле4 = """"
	             |			ТОГДА КонтактнаяИнформация.Поле5
	             |		ИНАЧЕ КонтактнаяИнформация.Поле4
	             |	КОНЕЦ КАК Город
	             |ПОМЕСТИТЬ втАдреса
	             |ИЗ
	             |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |ГДЕ
	             |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	             |	И КонтактнаяИнформация.Вид = &Вид
	             |	И КонтактнаяИнформация.Объект В
	             |			(ВЫБРАТЬ
	             |				Контрагенты.Контрагент
	             |			ИЗ
	             |				Контрагенты КАК Контрагенты)
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%Москва%"")
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%Москов%"")
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%иванов%"")
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%Ярослав%"")
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%Костром%"")
	             |	И (НЕ КонтактнаяИнформация.Представление ПОДОБНО ""%Волог%"")
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	вложенный.Город КАК Город,
	             |	вложенный.Центр КАК Центр,
	             |	вложенный.Ответственный КАК Ответственный,
	             |	вложенный.Контрагент КАК Контрагент,
	             |	вложенный.ЗаказПокупателя КАК ЗаказПокупателя,
	             |	СУММА(вложенный.Количество) КАК Количество
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		а.Город КАК Город,
	             |		а.Центр КАК Центр,
	             |		а.Количество КАК Количество,
	             |		а.Контрагент КАК Контрагент,
	             |		а.ЗаказПокупателя КАК ЗаказПокупателя,
	             |		а.Ответственный КАК Ответственный
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			ВЫБОР
	             |				КОГДА ЕСТЬNULL(втАдреса.Город, """") = """"
	             |					ТОГДА СоответствиеРегионовИРегиональныхЦентров.Центр
	             |				ИНАЧЕ ЕСТЬNULL(втАдреса.Город, """")
	             |			КОНЕЦ КАК Город,
	             |			СоответствиеРегионовИРегиональныхЦентров.Центр КАК Центр,
	             |			СУММА(Контрагенты.Количество) КАК Количество,
	             |			Контрагенты.Контрагент КАК Контрагент,
	             |			Контрагенты.ЗаказПокупателя КАК ЗаказПокупателя,
	             |			Контрагенты.Ответственный КАК Ответственный
	             |		ИЗ
	             |			Контрагенты КАК Контрагенты
	             |				ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	             |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРегионовИРегиональныхЦентров КАК СоответствиеРегионовИРегиональныхЦентров
	             |					ПО втАдреса.Область = СоответствиеРегионовИРегиональныхЦентров.Регион
	             |				ПО Контрагенты.Контрагент = втАдреса.Объект
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			СоответствиеРегионовИРегиональныхЦентров.Центр,
	             |			Контрагенты.ЗаказПокупателя,
	             |			Контрагенты.Контрагент,
	             |			Контрагенты.Ответственный,
	             |			ВЫБОР
	             |				КОГДА ЕСТЬNULL(втАдреса.Город, """") = """"
	             |					ТОГДА СоответствиеРегионовИРегиональныхЦентров.Центр
	             |				ИНАЧЕ ЕСТЬNULL(втАдреса.Город, """")
	             |			КОНЕЦ) КАК а
	             |	ГДЕ
	             |		(НЕ а.Центр ЕСТЬ NULL )
	             |		И (НЕ а.Город ЕСТЬ NULL )) КАК вложенный
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	вложенный.Город,
	             |	вложенный.Центр,
	             |	вложенный.Контрагент,
	             |	вложенный.ЗаказПокупателя,
	             |	вложенный.Ответственный
	             |
	             |ОБЪЕДИНИТЬ ВСЕ
	             |
	             |ВЫБРАТЬ
	             |	""Ярославль г"",
	             |	""Ярославль г"",
	             |	NULL,
	             |	NULL,
	             |	NULL,
	             |	0
	             |ИТОГИ
	             |	СУММА(Количество)
	             |ПО
	             |	Город,
	             |	Центр,
	             |	Ответственный,
	             |	Контрагент,
	             |	ЗаказПокупателя";
	Запрос.УстановитьПараметр("КонПериод",ТекущаяДата());
	Запрос.УстановитьПараметр("ТолькоДиски",флТолькоДиски);

	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ВыбЗаказ",ЗаказПокупателя);

	ЗаказыПоГородам=Запрос.Выполнить();
	ВыборкаГорода=ЗаказыПоГородам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГорода.Следующий() Цикл
		Если ВыборкаГорода.Количество<150 и ВыборкаГорода.Город<>"Ярославль г" тогда
			продолжить;
		КонецЕсли;	
		ВыборкаЦентр=ВыборкаГорода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЦентр.Следующий() цикл
			нСтр=тзТочкиМаршрута.Добавить();
			нСтр.Город=ВыборкаЦентр.Город;
			нСтр.Центр=ВыборкаЦентр.Центр;
			нСтр.Количество=ВыборкаЦентр.Количество;
		КонецЦикла;	
	КонецЦикла;	
	
	//тзТочкиМаршрута=Запрос.Выполнить().Выгрузить();
	//добавляем точку из заказа, если ее нет
	Если тзТочкиМаршрута.Найти(СокрЛП(НеобходимыйГород),"Город")=неопределено тогда
		нстр=тзТочкиМаршрута.Добавить();
		нстр.Город=НеобходимаяТочка.Город;
		нстр.Центр=НеобходимаяТочка.Центр;
		нстр.Количество=НеобходимаяТочка.Количество;
	КонецЕсли;
	ТочкиМаршрута.Загрузить(тзТочкиМаршрута);
	ЭлементыФормы.ТочкиМаршрута.СоздатьКолонки();
	Возврат ЗаказыПоГородам;
КонецФункции

Процедура ОтсеятьПоКрюкам()
	Состояние("Отсев по крюкам.");
	
	МаршрутовПрошло=0;
	
	Для каждого стр из ТзМаршруты  цикл
		Рез=ПроходитПроверкуПоКрюкам(стр);
		Если рез=0 тогда
			МаршрутовПрошло=МаршрутовПрошло+1;
			стрМ="";
			для каждого элМ из стр.Маршрут цикл
				стрМ=стрМ+"|"+элМ;
			КонецЦикла;	
			стр.МаршрутСтрока=стрМ;
		ИначеЕсли Рез>0 тогда	//отрезаем от маршрута последние точки
			МаршрутовПрошло=МаршрутовПрошло+1;
			врМаршрут=новый массив;
			Для к=0 по Рез цикл
				врМаршрут.Вставить(к,стр.Маршрут[к]);
				//к=к+1;
			КонецЦикла;	
			стр.Длина=ПересчитатьДлинуМаршрута(врМаршрут);
			стр.Маршрут=врМаршрут;
			стрМ="";
			для каждого элМ из стр.Маршрут цикл
				стрМ=стрМ+"|"+элМ;
			КонецЦикла;	
			стр.МаршрутСтрока=стрМ;
		КонецЕсли;	
	КонецЦикла;
	тзМаршруты.Свернуть("МаршрутСтрока");
	тзМаршруты.Колонки.Добавить("Маршрут");
	тзМаршруты.Колонки.Добавить("Длина");
	Для каждого стр из тзМаршруты цикл
		Если стр.МаршрутСтрока<>неопределено тогда
			Если Лев(СокрЛП(стр.МаршрутСтрока),1)="|"тогда
				МаршрутСтрока=Сред(СокрЛП(стр.МаршрутСтрока),2);
			КонецЕсли;	
			стр.Маршрут=РазложитьСтрокуВМассив(МаршрутСтрока,"|");
			//стрНовыйМаршрут.МаршрутСтрока=Род;
			стр.Длина=ПересчитатьДлинуМаршрута(стр.Маршрут);
			РассчитатьМинимальноеКоличествоТовараВКаждуюТочку(стр);
			//Сообщить(стр.МаршрутСтрока+" = "+стр.Длина);
			стрСообщения="";
			//Для каждого элМ из стр.Маршрут цикл
			//	стрСообщения= стрСообщения+", "+элМ[0]+" мин товара: "+элМ[1];
			//КонецЦикла;	
			//Сообщить(стрСообщения+" длина: "+стр.Длина);
		КонецЕсли;
	КонецЦикла;	
	Сообщить("Маршрутов прошло проверку на крюки: "+тзМаршруты.Количество());
КонецПроцедуры

Процедура ЗагрузитьМаршрут()
	Состояние("Загрузка маршрутов.");
	
	тзМаршрутыФинальные.Очистить();
	тзРасстоянияДоНеобходимойТочки=новый таблицаЗначений;
	тзРасстоянияДоНеобходимойТочки.Колонки.Добавить("Точка");
	тзРасстоянияДоНеобходимойТочки.Колонки.Добавить("Расстояние",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(15,1)));
	тзРасстоянияДоНеобходимойТочки.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(15,0)));
	тзРасстоянияДоНеобходимойТочки.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(1,0)));
	тзРасстоянияДоНеобходимойТочки.Колонки.Добавить("Грузим",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(1,0)));
	//отправляем товар в ближайшие к необходимому городу точки фифо
	Для каждого стр из тзМаршруты цикл
		ВсегоВеземПоМаршруту=0;
		ЗагрузкаРасстояние=0;
		тзРасстоянияДоНеобходимойТочки.Очистить();
		Марш=Стр.Маршрут;
		Если Марш=Неопределено тогда
			Продолжить;
		КонецЕсли;	
		Для каждого элМ из Марш цикл
			новСтр=тзРасстоянияДоНеобходимойТочки.Добавить();
			новСтр.Точка=элМ[0];
			Если новСтр.Точка=НеобходимыйГород тогда
				новСтр.Приоритет=0;
			Иначе
				новСтр.Приоритет=1;
			КонецЕсли;	
			новСтр.Расстояние=ПолучитьДлинуОтрезка(НеобходимыйГород,новСтр.Точка);
			НовСтр.Количество=тзТочкиМаршрута.Найти(новСтр.Точка,"Город").Количество;
		КонецЦикла;	
		тзРасстоянияДоНеобходимойТочки.Сортировать("Приоритет,Расстояние,Количество");
		МестаВМашине=ВместимостьМашины;
		
		Для каждого стрМ из тзРасстоянияДоНеобходимойТочки цикл
			Если МестаВМашине<0 тогда 
				прервать;
			КонецЕсли;
			стрМ.Грузим=1;
			МестаВМашине=МестаВМашине-стрМ.Количество;
			ВсегоВеземПоМаршруту=ВсегоВеземПоМаршруту+стрМ.Количество;
		КонецЦикла;
		
		МаршрутСтрока="Ярославль г,0";
		Марш=Стр.Маршрут;
		СтруктураОтбора=Новый Структура("Точка,Грузим");
		Для каждого элМ из Марш цикл
			СтруктураОтбора.Точка=элМ[0];
			СтруктураОтбора.Грузим=1;
			Строки=тзРасстоянияДоНеобходимойТочки.НайтиСтроки(СтруктураОтбора);
			Если Строки.Количество()>0 тогда
				Если Строки[0].Количество>0 тогда
					МаршрутСтрока=МаршрутСтрока+"|"+элМ[0]+","+Строки[0].Количество;
					ЗагрузкаРасстояние=ЗагрузкаРасстояние+Строки[0].Количество/ВсегоВеземПоМаршруту*ПолучитьДлинуОтрезка("Ярославль г",элМ[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		//проверяем на доли товара в точках
		Если ЗагрузкаРасстояние>=ПересчитатьДлинуМаршрута(Марш)/КоэффОтбора и  МестаВМашине<=0 тогда 
			НовМаршрут=тзМаршрутыФинальные.Добавить();
			НовМаршрут.МаршрутСтр=МаршрутСтрока;
		КонецЕсли;
	КонецЦикла;
	
	тзМаршрутыФинальные.Свернуть("МаршрутСтр")	;
	тзМаршрутыФинальные.Колонки.Добавить("Маршрут");
	тзМаршрутыФинальные.Колонки.Добавить("Коэффициент");

	Для Каждого стр из тзМаршрутыФинальные цикл
		ВсегоВеземПоМаршруту=0;
		масс = новый массив;
		врем=РазложитьСтрокуВМассив(стр.МаршрутСтр,"|");
		Для каждого элВрем из врем цикл
			Если элВрем<>"" тогда
				врем2=РазложитьСтрокуВМассив(элВрем,",");
				масс.Добавить(врем2);
				ВсегоВеземПоМаршруту=ВсегоВеземПоМаршруту+врем2[1];
			КонецЕсли;
		КонецЦикла;	
		стр.Маршрут=масс;
		//пересчитаем коэфф
		ЗагрузкаРасстояние=0;
		Для каждого элМ из масс цикл
			Если Число(элМ[1])>0 тогда
				ЗагрузкаРасстояние=ЗагрузкаРасстояние+Число(элМ[1])/ВсегоВеземПоМаршруту*ПолучитьДлинуОтрезка("Ярославль г",элМ[0]);
			КонецЕсли;
		КонецЦикла;
		ДлинаМаршрута=ПересчитатьДлинуМаршрута(масс);
		Если ДлинаМаршрута<>0 тогда 
			Коэфф=ЗагрузкаРасстояние/(ДлинаМаршрута/КоэффОтбора);
		иначе
			Коэфф=0;
		КонецЕсли;
		стр.Коэффициент=Коэфф;
	КонецЦикла;
    тзМаршрутыФинальные.Сортировать("Коэффициент убыв");
КонецПроцедуры

Процедура ПриОткрытии()
	ВместимостьМашины=1700;
	КоэффОтбора=1.7;
	МаксТочекМаршрута=4;
	МаксДлинаМаршрута=5000;
	ЭлементыФормы.Панель1.ТекущаяСтраница= ЭлементыФормы.Панель1.Страницы.СтраницаНастройки;
	ЗаказПокупателя=СсылкаНаОбъект;
	ЗаказПокупателяПриИзменении(1);
	МаксДлинаМаршрутаР=получитьРасстояние("Ярославль г","Ярославль г",НеобходимаяТочка.Город,НеобходимаяТочка.Центр)*2;
	МаксДлинаМаршрута=?((МаксДлинаМаршрутаР<=0 или МаксДлинаМаршрута<МаксДлинаМаршрутаР),МаксДлинаМаршрута,МаксДлинаМаршрутаР);
КонецПроцедуры

Процедура Печать2(РезультатЗапросаЗаказыПоГородам)
	Макет=ПолучитьМакет("Макет");
	 ТабДокумент=ЭлементыФормы.ПолеТабличногоДокумента1;
	 ТабДокумент.Очистить();
	 ТабДокумент.НачатьАвтогруппировкуСтрок();
	//ТабДокумент = Новый ТабличныйДокумент;
	НомНомер=0;
	ОбластьМаршрут=Макет.ПолучитьОбласть("МаршрутСтр");
    ОбластьГород=Макет.ПолучитьОбласть("ТочкаМаршрута");
	ОбластьОтветственный=Макет.ПолучитьОбласть("Ответственный");
    ОбластьКонтрагент=Макет.ПолучитьОбласть("Контрагент");
	ОбластьЗаказ=Макет.ПолучитьОбласть("Заказ");
	
	Для каждого стр из ТзМаршрутыФинальные цикл
		НомНомер=НомНомер+1;
		ОбластьМаршрут.Параметры.МаршрутСтр=СтрЗаменить(Стр.МаршрутСтр,"|"," шт. ")+" шт. Длина: "+ПересчитатьДлинуМаршрута(стр.Маршрут)+"км.";
		ОбластьМаршрут.Параметры.Маршрут=стр.МаршрутСтр;
		ОбластьМаршрут.Параметры.НомНомер=НомНомер;
		ОбластьМаршрут.Параметры.Коэфф=Формат(стр.Коэффициент,"ЧДЦ=3");
		ТабДокумент.Вывести(ОбластьМаршрут,1,,Ложь);
		Для каждого элМ из стр.Маршрут цикл
			ОбластьГород.Параметры.ТочкаМаршрута=элМ[0];
			ОбластьГород.Параметры.Количество=элМ[1];
			ТабДокумент.Вывести(ОбластьГород,2,,Ложь);
			
			ВыборкаГорода=РезультатЗапросаЗаказыПоГородам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаГорода.НайтиСледующий(элМ[0],"Город") Цикл
				Если элМ[0]="Ярославль г" тогда
					продолжить;
				КонецЕсли;	
				ВыборкаЦентр=ВыборкаГорода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЦентр.Следующий() Цикл
					ВыборкаОтветственный= ВыборкаЦентр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОтветственный.Следующий() Цикл
						ОбластьОтветственный.Параметры.Ответственный=ВыборкаОтветственный.Ответственный;
						ОбластьОтветственный.Параметры.Количество=ВыборкаОтветственный.Количество;
						ТабДокумент.Вывести(ОбластьОтветственный,3,,Ложь);
						
						ВыборкаКонтрагент= ВыборкаОтветственный.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКонтрагент.Следующий() Цикл
							ОбластьКонтрагент.Параметры.Контрагент=ВыборкаКонтрагент.Контрагент;
							ОбластьКонтрагент.Параметры.Количество=ВыборкаКонтрагент.Количество;
							ТабДокумент.Вывести(ОбластьКонтрагент,4,,Ложь);
							ВыборкаЗаказ= ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаЗаказ.Следующий() Цикл
								ОбластьЗаказ.Параметры.Заказ=ВыборкаЗаказ.ЗаказПокупателя;
								ОбластьЗаказ.Параметры.Количество=ВыборкаЗаказ.Количество;
								ТабДокумент.Вывести(ОбластьЗаказ,5,,Ложь);
							КонецЦикла;	
						КонецЦикла;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
		КонецЦикла;

	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ПоказатьУровеньГруппировокСтрок(0);
	ТабДокумент.Показать();
	ЭлементыФормы.Панель1.ТекущаяСтраница= ЭлементыФормы.Панель1.Страницы.СтраницаМаршруты;

КонецПроцедуры

Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.

	Если ТипЗнч(расшифровка)=Тип("Строка") тогда
		СтандартнаяОбработка=ложь;
		Форма1=ПолучитьФорму("ФормаМаршрута");
		Форма1.Маршрут=Расшифровка;
		Форма1.ВыбЗаказ=ЗаказПокупателя;
		Если Форма1.Открыта() тогда 
			Форма1.Закрыть();
		КонецЕсли;	
		Форма1.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаказПокупателяПриИзменении(Элемент)
	НеобходимыйГород="";
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	вложенный.Контрагент,
	             |	СУММА(вложенный.Количество) КАК Количество
	             |ПОМЕСТИТЬ Контрагенты
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	             |		СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество
	             |	ИЗ
	             |		РегистрНакопления.ЗаказыПокупателей.Остатки(&КонПериод, ЗаказПокупателя = &ВыбЗаказ) КАК ЗаказыПокупателейОстатки
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		Контрагенты.Ссылка,
	             |		0
	             |	ИЗ
	             |		Документ.ЗаказПокупателя КАК ЗаказПокупателя
	             |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	             |			ПО ЗаказПокупателя.Контрагент = Контрагенты.Ссылка
	             |	ГДЕ
	             |		ЗаказПокупателя.Ссылка = &ВыбЗаказ) КАК вложенный
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	вложенный.Контрагент
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	КонтактнаяИнформация.Объект,
	             |	КонтактнаяИнформация.Представление,
	             |	КонтактнаяИнформация.Поле2 КАК Область,
	             |	КонтактнаяИнформация.Поле4 КАК Город
	             |ПОМЕСТИТЬ втАдреса
	             |ИЗ
	             |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	             |ГДЕ
	             |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	             |	И КонтактнаяИнформация.Вид = &Вид
	             |	И КонтактнаяИнформация.Объект В
	             |			(ВЫБРАТЬ
	             |				Контрагенты.Контрагент
	             |			ИЗ
	             |				Контрагенты КАК Контрагенты)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	а.Количество,
	             |	а.Город,
	             |	а.Центр
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		СУММА(вложенный.Количество) КАК Количество,
	             |		ВЫБОР
	             |			КОГДА вложенный.Город = """"
	             |				ТОГДА ЕСТЬNULL(СоответствиеРегионовИРегиональныхЦентров.Центр, """")
	             |			ИНАЧЕ вложенный.Город
	             |		КОНЕЦ КАК Город,
	             |		ЕСТЬNULL(СоответствиеРегионовИРегиональныхЦентров.Центр, """") КАК Центр
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			Контрагенты.Количество КАК Количество,
	             |			ЕСТЬNULL(втАдреса.Город, """") КАК Город,
	             |			ЕСТЬNULL(втАдреса.Область, """") КАК Область
	             |		ИЗ
	             |			Контрагенты КАК Контрагенты
	             |				ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	             |				ПО Контрагенты.Контрагент = втАдреса.Объект) КАК вложенный
	             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРегионовИРегиональныхЦентров КАК СоответствиеРегионовИРегиональныхЦентров
	             |			ПО вложенный.Область = СоответствиеРегионовИРегиональныхЦентров.Регион
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		ЕСТЬNULL(СоответствиеРегионовИРегиональныхЦентров.Центр, """"),
	             |		ВЫБОР
	             |			КОГДА вложенный.Город = """"
	             |				ТОГДА ЕСТЬNULL(СоответствиеРегионовИРегиональныхЦентров.Центр, """")
	             |			ИНАЧЕ вложенный.Город
	             |		КОНЕЦ) КАК а
	             |ГДЕ
	             |	а.Город <> """"
	             |	И а.Центр <> """"";
	Запрос.УстановитьПараметр("КонПериод",ТекущаяДата());
	Запрос.УстановитьПараметр("ВыбЗаказ",ЗаказПокупателя);
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	рез=Запрос.Выполнить().Выбрать();
	Если рез.Количество()>0 тогда
		Пока рез.Следующий() цикл
			НеобходимаяТочка.Город=СокрЛП(рез.Город);
			НеобходимаяТочка.Центр=СокрЛП(рез.Центр);
            НеобходимаяТочка.Количество=рез.Количество;
			ЭлементыФормы.НеобходимыйГород.Значение=рез.Город;
			
			МаксДлинаМаршрутаР=получитьРасстояние("Ярославль г","Ярославль г",НеобходимаяТочка.Город,НеобходимаяТочка.Центр)*2;
	        МаксДлинаМаршрута=?((МаксДлинаМаршрутаР<=0 или МаксДлинаМаршрута<МаксДлинаМаршрутаР),МаксДлинаМаршрута,МаксДлинаМаршрутаР);
		КонецЦикла;	
	иначе
		Сообщить("Не определен город доставки.");
	КонецЕсли;
КонецПроцедуры

								  
ТзМаршруты=Новый таблицаЗначений;
тзМаршруты.Колонки.Добавить("Маршрут");
тзМаршруты.Колонки.Добавить("МаршрутСтрока");
тзМаршруты.Колонки.Добавить("Длина");

тзТочкиМаршрута=Новый таблицаЗначений;
тзТочкиМаршрута.Колонки.Добавить("Город");
тзТочкиМаршрута.Колонки.Добавить("Центр");
тзТочкиМаршрута.Колонки.Добавить("Количество");


ТзМаршрутыФинальные=Новый таблицаЗначений;
ТзМаршрутыФинальные.Колонки.Добавить("МаршрутСтр");

НеобходимаяТочка=новый структура("Город,Центр,Количество");