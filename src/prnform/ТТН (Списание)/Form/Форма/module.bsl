Функция ПечатьТТН() Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент",  Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	Контрагент 
	//|					  ИНАЧЕ КонтрагентДляПечати КОНЕЦ
	//|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	//|	КОНЕЦ 
	|КАК Грузополучатель,
	|Контрагент КАК Покупатель,
	//|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	//|	      ТОГДА Организация
	|	      Организация
	//|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	//|	      КОНЕЦ 
	|КАК Грузоотправитель,
	|	Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	//|	ВЫБОР КОГДА КонтрагентДляПечати = &ПустойКонтрагент
	//|		  ТОГДА 
	|Контрагент
	//|   	  ИНАЧЕ КонтрагентДляПечати КОНЕЦ КАК Покупатель,
	//|	ВЫБОР КОГДА КонтрагентДляПечати = &ПустойКонтрагент
	//|		  ТОГДА Контрагент
	//|   	  ИНАЧЕ КонтрагентДляПечати КОНЕЦ 
	|КАК Плательщик,
	|	Подразделение,
	//|	ВалютаДокумента,
	|	1       КАК Курс,
	|	1  КАК Кратность,
	//|	УчитыватьНДС,
	//|	СуммаВключаетНДС,
	|	Ложь как ЧерезТК
	|ИЗ
	|	Документ.СписаниеТоваров КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);

	//Если Документ.ВалютаДокумента = Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
	//	// Документ оформлен в валюте взаиморасчетов
	//	Запрос.УстановитьПараметр("Курс", Документ.КурсВзаиморасчетов);
	//	Запрос.УстановитьПараметр("Кратность", Документ.КратностьВзаиморасчетов);
	//Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	//КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Склад		                                 КАК Склад,
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	//|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	//|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	//|	ВложенныйЗапрос.Сумма               КАК Сумма,
	//|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	Выразить(Партии.Стоимость/Партии.Количество Как Число(15,2))Как Цена,
	|	Выразить(Партии.Стоимость Как Число(15,2)) как Сумма,	
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка.Склад,
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры            КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                     КАК Серия,
//	|		РеализацияТоваровУслуг.СтавкаНДС,
//	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                 КАК КоличествоМест,
//	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
//	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.СписаниеТоваров.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Ссылка.Склад,
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры
	|	) КАК ВложенныйЗапрос
	|Левое соединение 
	|	РегистрНакопления.ПартииТоваровНаСкладах как Партии
	|По
	|	ВложенныйЗапрос.Номенклатура = Партии.Номенклатура
	|ГДЕ Партии.Регистратор=&ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка.Склад		                   КАК Склад,
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	//|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	0                                                     КАК КоличествоМест,
//	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("ТТН");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	
	//Если (Шапка.ЧерезТК <> Неопределено)и НЕ Шапка.ЧерезТК Тогда 
		СведенияОПокупателе       	  = СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	//Иначе
	//	Если Константы.ТорговаяКомпания.Получить() <> Справочники.Контрагенты.ПустаяСсылка() Тогда 
	//		СведенияОПокупателе       = СведенияОЮрФизЛице(Константы.ТорговаяКомпания.Получить(),       Шапка.ДатаДокумента);
	//	Иначе
	//		СведенияОПокупателе       = СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	//	КонецЕсли;
	//КонецЕсли;

	СведенияОГрузополучателе  = СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.МаркаАвтомобиля           	  = СокрЛП(МаркаАвтомобиля);
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        	  = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя               	  = Водитель;
	ОбластьМакета.Параметры.ГосНомерПрицепа           	  = ГосНомерПрицепа;

	

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Склад = ВыборкаСтрок.Склад;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование
		                                          + ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "")
												  + ?(ЗначениеНеЗаполнено(ВыборкаСтрок.Номенклатура.Производитель),""," (" + ВыборкаСтрок.Номенклатура.Производитель + ")");
                       
		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = (ВыборкаСтрок.Сумма); // + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		СуммаНДС    = 0; //ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;

		ОбластьМакета.Параметры.Сумма = 0;
		ОбластьМакета.Параметры.Цена  = ?(ЭлементыФормы.ПечатьОтгрузки.Значение, ВыборкаСтрок.Количество, 0);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоКоличествоНаСтранице_Отгр = ?(ЭлементыФормы.ПечатьОтгрузки.Значение, ИтогоКоличествоНаСтранице + Количество, 0);
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество_Отгр = ?(ЭлементыФормы.ПечатьОтгрузки.Значение, ИтогоКоличество + Количество, 0);
		
		ИтогоСуммаСНДС  = 0; //ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице_Отгр = ?(ЭлементыФормы.ПечатьОтгрузки.Значение, ИтогоКоличествоНаСтранице, 0);
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоКоличество_Отгр = ?(ЭлементыФормы.ПечатьОтгрузки.Значение, ИтогоКоличество, 0);
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = 0; //ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИООтпускРпзрешил     = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.КоличествоСтрок         = КоличествоСтрок;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	ОбластьМакета.Параметры.ВсегоМестПрописью       = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	ОбластьМакета.Параметры.Номер                     = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = Водитель;
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()

Процедура ЗаписатьДанныеВДокумент()
	
	//ДокументОбъект = Документ.ПолучитьОбъект();
	//ДокументОбъект.ПунктРазгрузки 		= АдресДоставки;
	//ДокументОбъект.СрокДоставки   		= СрокДоставки;
	//ДокументОбъект.МаркаАвтомобиля 		= МаркаАвтомобиля;
	//ДокументОбъект.МаркаПрицепа			= МаркаПрицепа;
	//ДокументОбъект.ГосНомерАвтомобиля  	= ГосНомерАвтомобиля;
	//ДокументОбъект.ГосНомерПрицепа     	= ГосНомерПрицепа;
	//ДокументОбъект.ПунктПогрузки		= ПунктПогрузки;
	//ДокументОбъект.ПунктРазгрузки      	= ПунктРазгрузки;
	//ДокументОбъект.Водитель            	= Водитель;
	//ДокументОбъект.Перевозчик          	= Перевозчик;
	//ДокументОбъект.Заказчик            	= Заказчик;
	//ДокументОбъект.ВидПеревозки        	= ВидПеревозки;
	//ДокументОбъект.ВодительскоеУдостоверение = ВодительскоеУдостоверение;

	////ДокументОбъект.Записать();
	//
	//ДокументОбъект.Разблокировать();
	//
	//ДокументОбъект.Записать();
	//
	//Если Форма <> Неопределено Тогда
	//
	//	Оповестить("ТТН");	
	//
	//КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)

	Если ЗначениеНеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;

	ТабДокумент = ПечатьТТН();
	НапечататьДокумент(ТабДокумент, 1, Ложь, "Товарно-транспортная накладная");
	
	ЗаписатьДанныеВДокумент();

КонецПроцедуры

Функция ПолучитьАдресИзКонтактнойИнформации_Лок(Объект, ТипАдреса = "")

	Если ЗначениеНеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
		
	ИначеЕсли ТипАдреса="Складской" Тогда
		Начало = "Складской";

	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	КонецЕсли;
	

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект И
	|	КонтактнаяИнформация.Тип = &Тип
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Если Выборка.Вид.Наименование = "Складской адрес организации" Тогда 
				Возврат Выборка.Представление;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	
	Если НЕ ПустаяСтрока(ПолучитьАдресИзКонтактнойИнформации_Лок(Документ.Организация,"Складской")) Тогда
		ЭлементыФормы.ПунктПогрузки.Значение = ПолучитьАдресИзКонтактнойИнформации_Лок(Документ.Организация,"Складской");
	КонецЕсли;

	ПунктРазгрузки 		= Документ.ПунктРазгрузки;
	СрокДоставки   		= Документ.СрокДоставки;
	МаркаАвтомобиля 	= Документ.МаркаАвтомобиля;
	МаркаПрицепа		= Документ.МаркаПрицепа;
	ГосНомерАвтомобиля  = Документ.ГосНомерАвтомобиля;
	ГосНомерПрицепа     = Документ.ГосНомерПрицепа;
	ПунктПогрузки		= Документ.ПунктПогрузки;
	ПунктРазгрузки      = Документ.ПунктРазгрузки;
	Водитель            = Документ.Водитель;
	Перевозчик          = Документ.Перевозчик;
	Заказчик            = Документ.Заказчик;
	ВидПеревозки        = Документ.ВидПеревозки;
	ВодительскоеУдостоверение = Документ.ВодительскоеУдостоверение;

КонецПроцедуры

Процедура ДокументПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	ПриОткрытии();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	// Вставить содержимое обработчика.
	
	ЗаписатьДанныеВДокумент();
	
КонецПроцедуры
