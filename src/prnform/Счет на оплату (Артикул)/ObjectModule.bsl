функция Печать() Экспорт
	
   ТабДок = ПечатьСчетаЗаказа("Счет");
   возврат ТабДок;
	
КонецФункции	

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)
    ЭтотОбъектСсылка = ЭтотОбъект.СсылкаНаОбъект;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъектСсылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Кредит,
	|	Аванс
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|
	|ГДЕ
	|	СчетНаОплатуПокупателю.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъектСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	               |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	               |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	               |	ВложенныйЗапрос.Количество,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.ПроцентСкидкиНаценки + ВложенныйЗапрос.ПроцентАвтоматическихСкидок КАК Скидка,
	               |	ВложенныйЗапрос.Цена,
	               |	ВложенныйЗапрос.Сумма,
	               |	ВложенныйЗапрос.СуммаНДС,
	               |	ВложенныйЗапрос.Характеристика,
	               |	NULL КАК Серия,
	               |	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	               |	ВложенныйЗапрос.Метка КАК Метка,
	               |	ВложенныйЗапрос.СтавкаНДС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	               |		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ЗаказПокупателя.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	               |		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	               |		ЗаказПокупателя.Цена КАК Цена,
	               |		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	               |		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	               |		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
	               |		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК Характеристика,
	               |		ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	               |		0 КАК Метка,
	               |		ЗаказПокупателя.СтавкаНДС КАК СтавкаНДС
	               |	ИЗ
	               |		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	               |	ГДЕ
	               |		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ЗаказПокупателя.НомерСтроки,
	               |		ЗаказПокупателя.Номенклатура,
	               |		ЗаказПокупателя.ЕдиницаИзмерения,
	               |		ЗаказПокупателя.ПроцентСкидкиНаценки,
	               |		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	               |		ЗаказПокупателя.Цена,
	               |		ЗаказПокупателя.ХарактеристикаНоменклатуры,
	               |		ЗаказПокупателя.СтавкаНДС) КАК ВложенныйЗапрос
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателя.Содержание ЕСТЬ NULL 
	               |				ИЛИ ЗаказПокупателя.Содержание = """"
	               |			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	               |		ИНАЧЕ ЗаказПокупателя.Содержание
	               |	КОНЕЦ,
	               |	ЗаказПокупателя.Номенклатура.Код,
	               |	ЗаказПокупателя.Номенклатура.Артикул,
	               |	ЗаказПокупателя.Количество,
	               |	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	               |	ЗаказПокупателя.ПроцентСкидкиНаценки,
	               |	ЗаказПокупателя.Цена,
	               |	ЗаказПокупателя.Сумма,
	               |	ЗаказПокупателя.СуммаНДС,
	               |	NULL,
	               |	NULL,
	               |	ЗаказПокупателя.НомерСтроки,
	               |	1,
	               |	ЗаказПокупателя.СтавкаНДС
	               |ИЗ
	               |	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Метка,
	               |	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		//Миронычев
		
		Если Лев(СсылкаНаОбъект.Номер,1) = "З" Тогда
			ШапкаЗак = Макет.ПолучитьОбласть("ШапкаСчета2");
		Иначе	
			ШапкаЗак = Макет.ПолучитьОбласть("ШапкаСчета1");
		КонецЕсли;
		ТабДокумент.Вывести(ШапкаЗак);
		//КонецМиронычев
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(ЭтотОбъектСсылка.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = ЭтотОбъектСсылка.СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ЭтотОбъектСсылка.СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = ЭтотОбъектСсылка.СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 
    //Миронычев
	Если Лев(СсылкаНаОбъект.Номер,1) = "З" Тогда
		Назначение = Макет.ПолучитьОбласть("Назначение");
		Назначение.Параметры.НазначениеПлатежа = СформироватьНазначениеПлатежа(ЗапросТовары);																																								
	КонецЕсли;
	ТабДокумент.Вывести(Назначение);
	//КонецМиронычев

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента1(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	 //Миронычев
	Если Лев(СсылкаНаОбъект.Номер,1) = "З" Тогда
		Срок = Макет.ПолучитьОбласть("СрокОплаты");
		Срок.Параметры.СрокОплаты = СсылкаНаОбъект.ДатаОплаты;																																								
	КонецЕсли;
	ТабДокумент.Вывести(Срок);
	//КонецМиронычев

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	//+++ 14.02.2014
	//ДопКолонка =Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	 ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул;
	 
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;
	
	Если Шапка.Кредит Тогда
		ОбластьНомераКр = Макет.ПолучитьОбласть("Аванс|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Аванс|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Аванс|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Аванс|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Аванс|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		ОбластьСуммыКр.Параметры.ВсегоАванс = ФорматСумм(Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);
		
		ОбластьНомераКр = Макет.ПолучитьОбласть("Долг|НомерСтроки");
		ОбластьКодовКр  = Макет.ПолучитьОбласть("Долг|КолонкаКодов");
		ОбластьДанныхКр = Макет.ПолучитьОбласть("Долг|Данные");
		ОбластьСкидокКр = Макет.ПолучитьОбласть("Долг|Скидка");
		ОбластьСуммыКр  = Макет.ПолучитьОбласть("Долг|Сумма");

		ТабДокумент.Вывести(ОбластьНомераКр);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодовКр);
		КонецЕсли;
		//ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанныхКр);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидокКр);
		КонецЕсли;
		
		ОбластьСуммыКр.Параметры.ВсегоДолг = ФорматСумм(Сумма - Шапка.Аванс);
		ТабДокумент.Присоединить(ОбластьСуммыКр);

	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью1(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Черта");
        ТабДокумент.Вывести(ОбластьМакета);
		//Миронычев
		Если Лев(СсылкаНаОбъект.Номер,1) = "З" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Информация");
			ТабДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("СпособДоставки"); 
			ОбластьМакета.Параметры.СпособДоставки = ПолучитьСпособДоставки(СведенияОПоставщике);
			ТабДокумент.Вывести(ОбластьМакета);

		КонецЕсли;
		
		//КонецМиронычев

		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = ОтветственныеЛицаОрганизации1(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + ЭтотОбъектСсылка.Ответственный + "/";

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()


Функция СформироватьЗаголовокДокумента1(ДокументОбъект, НазваниеДокумента = "")

	Возврат НазваниеДокумента + " № " + ?(Лев(СсылкаНаОбъект.Номер,1) = "З", Сред(СсылкаНаОбъект.Номер, 4, 6) ,ПолучитьНомерНаПечать(ДокументОбъект))
	                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'");

КонецФункции // СформироватьЗаголовокДокумента()

Функция СформироватьСуммуПрописью1(Сумма, Валюта)
	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

Функция ОтветственныеЛицаОрганизации1(Организация, ДатаСреза, Исполнитель = Неопределено)

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	Если Организация <> Неопределено тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
		|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФИОПолное;
				Результат.РуководительДолжность   = Выборка.Должность;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Кассир Тогда
				Результат.Кассир                  = Выборка.ФИОПолное;

			ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ОтветственныйЗаНалоговыеРегистры Тогда
				Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;

			КонецЕсли;

		КонецЦикла;

		Если Исполнитель <> Неопределено тогда

			ЗапросПоИсполнителям = Новый Запрос();
			ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
			ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
			ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
			ЗапросПоИсполнителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
			ЗапросПоИсполнителям.Текст = "
			|ВЫБРАТЬ
			|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
			|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL ТОГДА
			|		РаботникиОрганизацииСрезПоследних.Физлицо.Наименование
			|	ИНАЧЕ
			|		ФИОФизЛицСрезПоследних.Фамилия
			|		+	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		+ 	ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА
			|				"" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ
			|				""""
			|			КОНЕЦ
			|		КОНЕЦ КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.РаботникиОрганизации.СрезПоследних(&ДатаСреза, ПодразделениеОрганизации.Владелец = &Организация И ФизЛицо = &Исполнитель) КАК РаботникиОрганизацииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
			|		ПО РаботникиОрганизацииСрезПоследних.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
			|
			|ГДЕ
			|	РаботникиОрганизацииСрезПоследних.Приказ.ВидЗанятости = &ОсновноеМестоРаботы";
			ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

			Если ВыборкаИсполнителей.Следующий() тогда
				Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
				Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизации()

Функция СформироватьНазначениеПлатежа(ЗапросТовары)
	текст = "Назначение платежа:" +Символы.ПС+
	"Оплата по счету № ";

	Текст = Текст + "" + Сред(СсылкаНаОбъект.Номер, 4, 6);
	Текст = Текст + " от " + Формат(СсылкаНаОбъект.Дата, "ДФ=dd.MM.yyyy");
	Текст = Текст + " за товар"; 
	ТекстСумма="Сумма " + Формат(ЗапросТовары.Итог("Сумма"), "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
	
			
		ТабНДС=ЗапросТовары.Скопировать();
		
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС(СтрокаНДС.СтавкаНДС);
						
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			
		КонецЦикла;
		
	
	
	Возврат Текст+Символы.ПС+ТекстСумма; 

КонецФункции // СформироватьНазначениеПлатежа()

Функция ПолучитьСпособДоставки(СведенияОПоставщике)
	
	 Запрос = Новый запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	КонтактнаяИнформация.Представление как адрес
	 |ИЗ
	 |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	 |ГДЕ
	 |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	 |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)
	 |	И КонтактнаяИнформация.Объект = &Объект" ;
	 Запрос.УстановитьПараметр("объект", СсылкаНаОбъект.Подразделение.Контрагент);
	 РЕзультат = Запрос.Выполнить().Выгрузить();
	 Если РЕзультат.Количество()>0 тогда
		  Адрес = РЕзультат[0].Адрес;
	 КонецЕсли;
	 Текст1= "Силами Покупателя " + СсылкаНаОбъект.Контрагент + "  со склада Поставщика по адресу: "	+  Адрес;
	 Текст2 = "Смлами Поставщика "+ ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,") +" по адресу: "+ СсылкаНаОбъект.ЗаказПокупателя.АдресДляТТН +" Разгрузка товара из транспорта Поставщика осуществляет Покупатель самостоятельно";
	 Возврат ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("10"), Текст1,
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("12"), 	Текст1,
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("11"), 	Текст1,
			
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("8"), 	Текст2,
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6"), 	Текст2,
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("9"), 	Текст2,
			 ?(СсылкаНаОбъект.ЗаказПокупателя.СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("7"), 	Текст2,"")))))));
КонецФункции