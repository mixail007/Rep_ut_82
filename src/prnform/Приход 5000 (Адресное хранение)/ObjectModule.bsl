перем ДатаСрезаОстатковПоЗаказам;

//-----получаем только остатки Заказанного, но еще не полученного товара на ДатаСрезаОстатковПоЗаказам
//----- с упорядочиваем по номеру строки док.ЗаказПоставщику или 1000 для корректировок-----------
//
функция ПолучитьЗапросПоТоварамИАдресам_ЗаказПоставщику()
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСрезаОстатковПоЗаказам",  ДатаСрезаОстатковПоЗаказам);
	ЗапросПоТоварам.УстановитьПараметр("ВидТовараДиски", перечисления.ВидыТоваров.Диски);
	//ЗапросПоТоварам.УстановитьПараметр("Склад5000", Склад5000() );
								
//------------------------------------------------------------------------------------------------------------------------									
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
	                        |	ЕСТЬNULL(ЗаказПоставщикуТовары.НомерСтроки, 1000) КАК НомерСтроки,
	                        |	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоЗаказано
	                        |ИЗ
	                        |	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ТекущийДокумент
							|	И Номенклатура.ВидТовара = &ВидТовараДиски
							|			) КАК ЗаказыПоставщикамОстатки
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                        |			ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	                        |			ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура
	                        |		ИЗ
	                        |			Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	                        |		ГДЕ
	                        |			ЗаказПоставщикуТовары.Ссылка = &ТекущийДокумент
	                        |			И ЗаказПоставщикуТовары.Номенклатура.ВидТовара = &ВидТовараДиски) КАК ЗаказПоставщикуТовары
	                        |		ПО ЗаказыПоставщикамОстатки.Номенклатура = ЗаказПоставщикуТовары.Номенклатура
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки";    
	
							#Если Клиент Тогда
								Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Разумов А.") Тогда
									ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "И Номенклатура.ВидТовара = &ВидТовараДиски", "");
								КонецЕсли;
							#КонецЕсли
возврат ЗапросПоТоварам;
	
КонецФункции	

функция ПолучитьЗапросПоТоварамИАдресам_ЗаказПоОТХ()
	
	ФлагПорядкаОбхода = истина;
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСрезаОстатковПоЗаказам",  ДатаСрезаОстатковПоЗаказам);
	ЗапросПоТоварам.УстановитьПараметр("ВидОперации", перечисления.ВидыОперацийПоОтветственномуХранению.Поступление);
	ЗапросПоТоварам.УстановитьПараметр("ВидТовараДиски", перечисления.ВидыТоваров.Диски);
	
	//// без группировки - показывает отдельно строки Корректировки, все + и -
	//// поэтому упорядочивание - по Номенклатуре, чтобы были рядом
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        |	ЗаказОТХТовары.Номенклатура КАК Номенклатура,
	                        |	ЕСТЬNULL(ЗаказОТХТовары.НомерСтроки, 1000) КАК НомерСтроки,
	                        |	ЗаказОТХТовары.Количество - ЕСТЬNULL(ОперацияПоОтветственномуХранениюТовары.Количество, 0) КАК КоличествоЗаказано
	                        |ИЗ
	                        |	Документ.ЗаказПоОтветственномуХранению.Товары КАК ЗаказОТХТовары
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                        |			ОперацияОТХТовары.Номенклатура КАК Номенклатура,
	                        |			ОперацияОТХТовары.Количество КАК Количество,
	                        |			ОперацияОТХТовары.Склад КАК Склад
	                        |		ИЗ
	                        |			Документ.ОперацияПоОтветственномуХранению.Товары КАК ОперацияОТХТовары
	                        |		ГДЕ
	                        |			ОперацияОТХТовары.Ссылка.ДокументОснование = &ТекущийДокумент
	                        |			И ОперацияОТХТовары.Склад.АдресноеХранение
							|			И ОперацияОТХТовары.Номенклатура.ВидТовара = &ВидТовараДиски
	                        |			И ОперацияОТХТовары.Ссылка.Проведен) КАК ОперацияПоОтветственномуХранениюТовары
	                        |		ПО ЗаказОТХТовары.Номенклатура = ОперацияПоОтветственномуХранениюТовары.Номенклатура
	                        |ГДЕ
	                        |	ЗаказОТХТовары.Ссылка = &ТекущийДокумент
	                        |	И ЗаказОТХТовары.Номенклатура.ВидТовара = &ВидТовараДиски
	                        |	И ЗаказОТХТовары.Ссылка.ВидОперации = &ВидОперации
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки
	                        |АВТОУПОРЯДОЧИВАНИЕ";
								
возврат ЗапросПоТоварам;
	
КонецФункции	

//-----получаем только остатки Заказанного, но еще не полученного товара на ДатаСрезаОстатковПоЗаказам
//----- с упорядочиваем по номеру строки док.ЗаказПоставщику или 1000 для корректировок-----------
//
функция ПолучитьЗапросПоТоварамИАдресам_ПеремещениеТоваров()
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСрезаОстатковПоЗаказам",  ДатаСрезаОстатковПоЗаказам);
	
	//------------------только диски!!!-------------------------
	ЗапросПоТоварам.УстановитьПараметр("ВидТовараДиски", перечисления.ВидыТоваров.Диски);
	
	ЗапросПоТоварам.УстановитьПараметр("Склад5000",	Склад5000()  );
	
	ПеремещениеСоМножестваНа5000 =ЗначениеЗаполнено(СсылкаНаОбъект.ВнутреннийЗаказ);
	
	Если не ПеремещениеСоМножестваНа5000 тогда // склад получатель может быть в таблице
		для каждого стр1 из СсылкаНаОбъект.Товары цикл
		если ЗначениеНеЗаполнено(стр1.Склад) тогда
			ПеремещениеСоМножестваНа5000 = истина;
		иначеЕсли  стр1.Склад = Склад5000() тогда
			ПеремещениеСоМножестваНа5000 = ЛОЖЬ;
		КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗапросПоТоварам.УстановитьПараметр("ПеремещениеСоМножестваНа5000", ПеремещениеСоМножестваНа5000);
	ЗапросПоТоварам.УстановитьПараметр("Пустой", справочники.Склады.ПустаяСсылка() );
	//если не ПеремещениеСоМножестваНа5000 - этол  Поступление с 1 склада (Товары в пути) на другие склады, в том числе на 5000
	
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ПеремещениеТовары.Номенклатура КАК Номенклатура,
	                        |	СУММА(ПеремещениеТовары.Количество) КАК КоличествоЗаказано,
	                        |	МИНИМУМ(ПеремещениеТовары.НомерСтроки) КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТовары
	                        |ГДЕ
	                        |	ПеремещениеТовары.Ссылка = &ТекущийДокумент
	                        |	И ( (&ПеремещениеСоМножестваНа5000 И ПеремещениеТовары.Ссылка.СкладПолучатель=&Склад5000)
							|		или 
							|		(НЕ &ПеремещениеСоМножестваНа5000 И 
							|			(ПеремещениеТовары.Склад=&Склад5000  или (ПеремещениеТовары.Склад=&Пустой и ПеремещениеТовары.Ссылка.СкладПолучатель=&Склад5000) ) 
							|		) 
	                        |     ) 
							|	И ПеремещениеТовары.Номенклатура.ВидТовара = &ВидТовараДиски
							|
							|СГРУППИРОВАТЬ ПО
	                        |	ПеремещениеТовары.Номенклатура
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки
	                        |АВТОУПОРЯДОЧИВАНИЕ";    
	
возврат ЗапросПоТоварам;
	
КонецФункции	

//-----получаем только остатки Заказанного, но еще не полученного товара на ДатаСрезаОстатковПоЗаказам
//----- с упорядочиваем по номеру строки док.ЗаказПоставщику или 1000 для корректировок-----------
//
функция ПолучитьЗапросПоТоварамИАдресам_ВозвратТоваров()
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	//------------------только диски!!!-------------------------
	ЗапросПоТоварам.УстановитьПараметр("ВидТовараДиски", перечисления.ВидыТоваров.Диски);
	
	// возврат на склад по табличной части
	ЗапросПоТоварам.УстановитьПараметр("Склад5000",Склад5000() );
	ЗапросПоТоварам.УстановитьПараметр("Пустой", справочники.Склады.ПустаяСсылка() );
	
		
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ
	                        |	ПеремещениеТовары.Номенклатура КАК Номенклатура,
	                        |	СУММА(ПеремещениеТовары.Количество) КАК КоличествоЗаказано,
	                        |	МИНИМУМ(ПеремещениеТовары.НомерСтроки) КАК НомерСтроки
	                        |ИЗ
	                        |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ПеремещениеТовары
	                        |ГДЕ
	                        |	ПеремещениеТовары.Ссылка = &ТекущийДокумент
	                        |	И ПеремещениеТовары.Номенклатура.ВидТовара = &ВидТовараДиски
	                        |	И (ПеремещениеТовары.Склад = &Склад5000 или 
							|		(ПеремещениеТовары.Склад = &Пустой и ПеремещениеТовары.Ссылка.СкладОрдер = &Склад5000)
	                        |     )
	                        |СГРУППИРОВАТЬ ПО
	                        |	ПеремещениеТовары.Номенклатура
	                        |
	                        |УПОРЯДОЧИТЬ ПО
	                        |	НомерСтроки
	                        |АВТОУПОРЯДОЧИВАНИЕ";    
	
возврат ЗапросПоТоварам;
	
КонецФункции	



функция Получить_ПустыеАдресаЯчеек(флЭтажность=ложь)
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСрезаОстатков",  ДатаСрезаОстатковПоЗаказам);
	ЗапросПоТоварам.УстановитьПараметр("Склад5000",Склад5000() );
 	
	////Заполненность всех пм склада...по порядку адресов
	ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
							|	ТоварыАдресноеХранениеОстатки.АдресХранения КАК АдресХранения
							|ИЗ
							|	РегистрНакопления.ТоварыАдресноеХранение.Остатки(&ДатаСрезаОстатков, Склад = &Склад5000) КАК ТоварыАдресноеХранениеОстатки
							|ГДЕ
							|	ТоварыАдресноеХранениеОстатки.КоличествоОстаток > 0
							|
							|УПОРЯДОЧИТЬ ПО
							|	ТоварыАдресноеХранениеОстатки.АдресХранения.Порядок
							|АВТОУПОРЯДОЧИВАНИЕ";    
								
табОстатки = ЗапросПоТоварам.Выполнить().Выгрузить();							
списокАдресов = табОстатки.ВыгрузитьКолонку("АдресХранения");

ЗапросПустые = Новый Запрос();
ЗапросПустые.УстановитьПараметр("списокАдресов",списокАдресов);
ЗапросПустые.УстановитьПараметр("Владелец",    Склад5000() );
			 
	ЗапросПустые.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                     |	ВсеАдреса.Ссылка КАК Адрес,
	                     |	ВсеАдреса.Порядок КАК Порядок,
	                     |	0 КАК НомерПоПорядку
	                     |ИЗ
	                     |	Справочник.АдресаХранения КАК ВсеАдреса
	                     |ГДЕ
	                     |	(НЕ ВсеАдреса.Ссылка В (&списокАдресов))
	                     |	И ВсеАдреса.Владелец = &Владелец
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Порядок
	                     |АВТОУПОРЯДОЧИВАНИЕ";

	Если флЭтажность тогда
		ЗапросПустые.Текст = стрЗаменить(ЗапросПустые.Текст, "УПОРЯДОЧИТЬ ПО Порядок", "УПОРЯДОЧИТЬ ПО Код");
	КонецЕсли;

ТабПустые = ЗапросПустые.Выполнить().Выгрузить();
 
возврат ТабПустые; 

КонецФункции							
	
функция  ПолучитьЗапросПоТоварамИАдресам_АдресаЯчеек(ТабЗнач, флЭтажность=ложь)
	
	ТабЗнач2 = ТабЗнач.Скопировать();
	
	//2.----Получим ячейки с нашим товаром в сортировке по полю "Код"(этажность) или "Порядок"(змейкой)----------
	ТабЗнач2.Свернуть("Номенклатура");
	СписокНоменклатуры = новый СписокЗначений;
	СписокНоменклатуры.ЗагрузитьЗначения(ТабЗнач.выгрузитьКолонку("Номенклатура") );
	
	
	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ДатаСрезаОстатков",  ДатаСрезаОстатковПоЗаказам);
	
	ЗапросПоТоварам.УстановитьПараметр("Склад5000",Склад5000() );
	ЗапросПоТоварам.УстановитьПараметр("НольАдрес", "000000" );  //ноль адрес
	
   	ЗапросПоТоварам.УстановитьПараметр("Пустая",   Справочники.номенклатура.ПустаяСсылка() );
	ЗапросПоТоварам.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	ЗапросПоТоварам.УстановитьПараметр("ТабЗнач", ТабЗнач);
	
	//по всем товарам списка! по 1 различному товару, по мин. значения "Порядок" -> КоличествоВОдномПМ, Коли
	ЗапросПоТоварам.Текст = 	"ВЫБРАТЬ
	                        	|	ТаблицаЗначЗаказа.Номенклатура,
	                        	|	ТаблицаЗначЗаказа.НомерСтроки,
	                        	|	ТаблицаЗначЗаказа.КоличествоЗаказано
	                        	|ПОМЕСТИТЬ ТабЗнач
	                        	|ИЗ
	                        	|	&ТабЗнач КАК ТаблицаЗначЗаказа
	                        	|;
	                        	|
	                        	|////////////////////////////////////////////////////////////////////////////////
	                        	|ВЫБРАТЬ
	                        	|	ВложенныйЗапрос.Товар КАК Номенклатура,
	                        	|	СУММА(ЕСТЬNULL(ТоварыАдресноеХранениеОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	                        	|	МАКСИМУМ(ЕСТЬNULL(НормыПаллетирования.Количество, 20)) КАК КоличествоПМ,
	                        	|	ВложенныйЗапрос.Товар.Код КАК Код,
	                        	|	МИНИМУМ(ЕСТЬNULL(АдресаХранения.Порядок, &НольАдрес)) КАК Порядок,
	                        	|	МАКСИМУМ(ТабЗнач.КоличествоЗаказано) КАК КоличествоЗаказано,
	                        	|	МИНИМУМ(ТабЗнач.НомерСтроки) КАК НомерСтроки,
	                        	|	СУММА(0) КАК НомерПоПорядку
	                        	|ИЗ
	                        	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                        	|		Номенклатура.Ссылка КАК Товар
	                        	|	ИЗ
	                        	|		Справочник.Номенклатура КАК Номенклатура
	                        	|	ГДЕ
	                        	|		Номенклатура.Ссылка В(&СписокНоменклатуры)) КАК ВложенныйЗапрос
	                        	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(
	                        	|				&ДатаСрезаОстатков,
	                        	|				Склад = &Склад5000
	                        	|					И Номенклатура В (&СписокНоменклатуры)) КАК ТоварыАдресноеХранениеОстатки
	                        	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресаХранения КАК АдресаХранения
	                        	|			ПО (АдресаХранения.Ссылка = ТоварыАдресноеХранениеОстатки.АдресХранения)
	                        	|		ПО ВложенныйЗапрос.Товар = ТоварыАдресноеХранениеОстатки.Номенклатура
	                        	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыПаллетирования КАК НормыПаллетирования
	                        	|		ПО ВложенныйЗапрос.Товар.Типоразмер.Ширина = НормыПаллетирования.Ширина
	                        	|			И ВложенныйЗапрос.Товар.Типоразмер.Диаметр = НормыПаллетирования.Диаметр
	                        	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабЗнач КАК ТабЗнач
	                        	|		ПО ВложенныйЗапрос.Товар = ТабЗнач.Номенклатура
	                        	|
	                        	|СГРУППИРОВАТЬ ПО
	                        	|	ВложенныйЗапрос.Товар,
	                        	|	ВложенныйЗапрос.Товар.Код
	                        	|
	                        	|УПОРЯДОЧИТЬ ПО
	                        	|	Порядок
	                        	|АВТОУПОРЯДОЧИВАНИЕ";

	Если флЭтажность тогда
		ЗапросПоТоварам.Текст = стрЗаменить(ЗапросПоТоварам.Текст, "УПОРЯДОЧИТЬ ПО Порядок", "УПОРЯДОЧИТЬ ПО Код");
	КонецЕсли;
	
возврат ЗапросПоТоварам;
	
КонецФункции							
													

//===========================Заказы в связке с Адр.Хр.=====================================
Функция ПечатьЗаказаПоставщику(ЭтоНеОТХ=истина, ЭтоНеПеремещение=Истина)
	
	ФлагПорядкаОбхода=Истина; // по порядку проезда погрузчика "Змейкой"
	ДатаСрезаОстатковПоЗаказам = текущаяДата(); // одна дата для всех запросов!!!
	СтрокВыводитьДополнительно0 = 0;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_АдресноеХанение";

   Макет = ПолучитьМакет("Заказ");

	// Выводим шапку накладной
	
		//Если  СокрЛП(СсылкаНаОбъект.МаркаАвтомобиля)<>"" Тогда
		//ОбластьМакета = Макет.ПолучитьОбласть("Авто");
		//ОбластьМакета.Параметры.Авто = СокрЛП(СсылкаНаОбъект.МаркаАвтомобиля);
		//ОбластьМакета.Параметры.НомерАвто = СокрЛП(СсылкаНаОбъект.ГосНомерАвтомобиля);
		//ОбластьМакета.Параметры.Пункт = СокрЛП(СсылкаНаОбъект.АдресДоставки);
		//ТабДокумент.Вывести(ОбластьМакета);
		//КОнецЕсли;
		 
	//СведенияОПоставщике = СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, Шапка.Дата);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(СсылкаНаОбъект, ?(не ЭтоНеПеремещение, "Перемещение товаров", "Заказ "+?(ЭтоНеОТХ,"поставщика", "на ответственное хранение")) );
	//+++ Штрих-Код номера документа - февраль 2012
	// требуется установленная компонента 1CBarCode.exe
    	ОбШтрихКодСообщение = глТорговоеОборудование.ПолучитьШтрихКодПоДокументу(СсылкаНаОбъект);  // 20 или 30 префикс
		попытка
		ОбШтрихКод=ОбластьМакета.Рисунки.ШК.Объект;
		ОбШтрихКод.Сообщение = ОбШтрихКодСообщение; 
		ОбШтрихКод.ТекстКода = ОбШтрихКодСообщение; 
		//ОбШтрихКод.ВидимостьКС = ЛОЖЬ; // не показывать контрольныйСимвол в тексте
		исключение
		 //нет компоненты 1CBarCode.exe
		КонецПопытки; 
	//+++)
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПоставщикТекст = "Поставщик:";//
	Если ТипЗнч(СсылкаНаОбъект.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
		Организация1 = справочники.Организации.НайтиПоКоду("00001"); //Яршинторг
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Организация1, СсылкаНаОбъект.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		
	Иначе	
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент, СсылкаНаОбъект.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ТипЗнч(СсылкаНаОбъект.Ссылка)=Тип("ДокументСсылка.ПеремещениеТоваров") тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Строка(СсылкаНаОбъект.Подразделение);
	иначе
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КонецЕсли;	
	ОбластьМакета.Параметры.ПокупательТекст = "Покупатель:";
	ТабДокумент.Вывести(ОбластьМакета);

		
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//1.
	//--------------------------------------------------------------------------------------------
	Если ЭтоНеОТХ и ЭтоНеПеремещение тогда
		Запрос = ПолучитьЗапросПоТоварамИАдресам_ЗаказПоставщику();
	ИначеЕсли ЭтоНеОТХ и НЕ ЭтоНеПеремещение тогда
		Запрос = ПолучитьЗапросПоТоварамИАдресам_ПеремещениеТоваров();
	ИначеЕсли НЕ ЭтоНеОТХ и ЭтоНеПеремещение тогда
		Запрос = ПолучитьЗапросПоТоварамИАдресам_ЗаказПоОТХ();
	ИначеЕсли НЕ ЭтоНеОТХ  и НЕ ЭтоНеПеремещение тогда
		Запрос = ПолучитьЗапросПоТоварамИАдресам_ВозвратТоваров();
	КонецЕсли;
	
	состояние("Идет анализ заказа....");
	Результат = Запрос.Выполнить();
	  ТабЗнач = Результат.Выгрузить();
	  
	  
	состояние("Идет анализ заполненности склада....");
	// ---- для каждого товара... ищем все ячейки где он есть...
	//	по порядку "змейка" или "Код" - Алг2 (от 01.02.2013 без учета АВС-анализа)
	результатРазмещенияТоваров = ПолучитьЗапросПоТоварамИАдресам_АдресаЯчеек(ТабЗнач).Выполнить();
	ТЗ_Товары   = результатРазмещенияТоваров.выгрузить(); // дерево номенклатур и мин.адрес
	
	  //----------нельзя дальше продолжать при пустой выборке, выскочит "не найдено поле объекта"--------------------
	Если ТЗ_Товары.Количество()=0 тогда
		Предупреждение("  Не осталось заказанных товаров для печати.
					   |Все товары пришли на склад или были отменены.");
		Возврат неопределено;			   
	КонецЕсли;
		
	//3.-------------Получим Пустые пм по складу------------------------ 
	ТЗ_ПустыеПМ = Получить_ПустыеАдресаЯчеек();
	 
	// по каждому заказанному товару, ужен отсортированному по Порядку - ищем его...в Порядке 
	// далее по некоторому Алгоритму будем "бегать" по ячейкам его размещения и пустым ячейкам
	
	
	//-------------Установим порядок пустых ячеек "в линейку"-----------------------
	//ТЗ_ПустыеПМ.Колонки.Добавить("НомерПоПорядку");
	//  ТЗ_Товары.Колонки.Добавить("НомерПоПорядку");
	  
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АдресаХранения.Порядок КАК Порядок
	               |ИЗ
	               |	Справочник.АдресаХранения КАК АдресаХранения
	               |ГДЕ
	               |	(НЕ АдресаХранения.ПометкаУдаления)
	               |	И АдресаХранения.Владелец = &Владелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Владелец", склад5000() );
	
	Результат = Запрос.Выполнить();
	ВсеАдреса = Результат.Выгрузить();
	
	номПоПорядку = 0;
	номПустогоПМ = 0;  
	номТоварногоПМ=0;  
		
	//---------если товара нет на складе - его "НомерПоПорядку" = 0, и надо сдвинуться на следующий -----------------------------------------
	пока номТоварногоПМ<ТЗ_Товары.Количество()
		и ТЗ_Товары[номТоварногоПМ].Порядок="000000" цикл
	       номТоварногоПМ = номТоварногоПМ + 1;
	КонецЦикла;	

	
	//-----------нумерация с 1 по N--------------------------------------------	
	для номПоПорядку = 1 по ВсеАдреса.Количество() цикл
			 стрВсеАдреса = ВсеАдреса[номПоПорядку-1];
			 
		Если номПустогоПМ<ТЗ_ПустыеПМ.Количество()
		   и стрВсеАдреса.Порядок = ТЗ_ПустыеПМ[номПустогоПМ].Порядок тогда
			ТЗ_ПустыеПМ[номПустогоПМ].НомерПоПорядку = номПоПорядку;
            номПустогоПМ = номПустогоПМ + 1;
		КонецЕсли;	
		
		Если номТоварногоПМ<ТЗ_Товары.Количество()
			и стрВсеАдреса.Порядок = ТЗ_Товары[номТоварногоПМ].Порядок тогда  // товары различные
			ТЗ_Товары[номТоварногоПМ].НомерПоПорядку = номПоПорядку;
            номТоварногоПМ = номТоварногоПМ + 1;
		КонецЕсли;
		
		//----------если все таблицы заполнены - выходим из цикла---------------------------		
		Если номПустогоПМ >= ТЗ_ПустыеПМ.Количество()-1 
			и номТоварногоПМ >= ТЗ_Товары.Количество()-1 тогда
			прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	// ---- для "ближайшей" заполнять нужное КоличествоАдресов------------------
	КоличествоСтрок=0;
	КоличествоЗаказаноИтого=0;
	КоличествоLegeArtis=0;
	КоличествоВзятьИтого=0;
	Если ТЗ_Товары.Количество()>0 Тогда
		
	//	ВыборкаНоменклатура = Результат.Выбрать();
		КоррСтр=0;
		
	//	Пока ВыборкаНоменклатура.Следующий() Цикл
	для номТов=0 по ТЗ_Товары.Количество()-1 цикл
		ВыборкаНоменклатура = ТЗ_Товары[номТов];
		
			СтрокВыводитьДополнительно=СтрокВыводитьДополнительно0;
			КоличествоСтрок=КоличествоСтрок+1;
			КоличествоЗаказаноИтого=КоличествоЗаказаноИтого+ВыборкаНоменклатура.КоличествоЗаказано;
			
			ОбластьНоменклатура=Макет.ПолучитьОбласть("Строка");
			ОбластьНоменклатура.Параметры.Заполнить(ВыборкаНоменклатура);
			
			//ОбластьНоменклатура.Параметры.АдресХранения	="";
			ОбластьНоменклатура.Параметры.Код	= ВыборкаНоменклатура.Номенклатура.Код;
			ОбластьНоменклатура.Параметры.Артикул = ВыборкаНоменклатура.Номенклатура.Артикул;
			Если ВыборкаНоменклатура.НомерСтроки=1000 тогда
				КоррСтр=КоррСтр+1;
				ОбластьНоменклатура.Параметры.НомерСтроки = КоррСтр; // + СсылкаНаОбъект.Товары.Количество()
			иначе
				ОбластьНоменклатура.Параметры.НомерСтроки = ВыборкаНоменклатура.НомерСтроки;
			КонецЕсли;
			
	
	//-------------------найдем число нужных адресов хранения товара-------------------------
	Если ВыборкаНоменклатура.КоличествоПМ=20 тогда
		Сообщить(СокрЛП(ВыборкаНоменклатура.Номенклатура.Код)+") "+СокрЛП(ВыборкаНоменклатура.Номенклатура.Наименование)+" - не опредено количество в одном палетто-месте (норма палетирования). Будет использоваться норма = 20");
	КонецЕсли;
	    КоличествоПМ = ВыборкаНоменклатура.КоличествоПМ;
		
	числоНужныхАдресов = Цел( ВыборкаНоменклатура.КоличествоЗаказано / КоличествоПМ ) 
	+ ?(ВыборкаНоменклатура.КоличествоЗаказано % КоличествоПМ = 0, 0, 1);

	//Если числоНужныхАдресов=1 тогда
	//		Адрес1 = НайтиБлижайшийПустойАдрес(ВыборкаНоменклатура, ТЗ_ПустыеПМ);
	//		ОбластьНоменклатура.Параметры.АдресХранения	=Адрес1; 
	//		ТабДокумент.Вывести(ОбластьНоменклатура);
	//иначе //числоНужныхАдресов>1		
		
			ТабДокумент.Вывести(ОбластьНоменклатура); // с пустым адресом
	
			//---------------поиск по спец.алгоритму------------------------------
			числоНужныхАдресов = числоНужныхАдресов + СтрокВыводитьДополнительно;
			ТЗ_РекомендуемыеТовары = новый ТаблицаЗначений;
			СуперПроцедураПоискаБлижайшихПустыхАдресов(ВыборкаНоменклатура, ТЗ_ПустыеПМ, ТЗ_РекомендуемыеТовары, числоНужныхАдресов);
			
			КоличествоОстатокПоАдресамНакопительно =0;
	
			Для i=0 по числоНужныхАдресов-1 цикл
				СтрокаРекАдресов = ТЗ_РекомендуемыеТовары[i];

					ОбластьСклад=Макет.ПолучитьОбласть("Строка1");
					ОбластьСклад.Параметры.Заполнить(СтрокаРекАдресов);
					
					ОбластьСклад.Параметры.Номенклатура= СокрЛП(ВыборкаНоменклатура.Номенклатура.Модель)+"  R"+ВыборкаНоменклатура.Номенклатура.Типоразмер.Диаметр+" x "+ВыборкаНоменклатура.Номенклатура.Типоразмер.Ширина+""" ";
					ОбластьСклад.Параметры.Код = СокрЛП(ВыборкаНоменклатура.Номенклатура.Код);
					ОбластьСклад.Параметры.Артикул = СокрЛП(ВыборкаНоменклатура.Номенклатура.Артикул);
					ОбластьСклад.Параметры.КоличествоЗаказано="";
					ОбластьСклад.Параметры.НомерСтроки=строка(ОбластьНоменклатура.Параметры.НомерСтроки)+"-"+строка(i+1);
					
					КоличествоОстатокПоАдресамНакопительно = КоличествоОстатокПоАдресамНакопительно + ВыборкаНоменклатура.КоличествоПМ;
					Если КоличествоОстатокПоАдресамНакопительно>=ВыборкаНоменклатура.КоличествоЗаказано Тогда // на следующую номенклатуру
						ОбластьСклад.Параметры.КоличествоПМ = ВыборкаНоменклатура.КоличествоЗаказано + ВыборкаНоменклатура.КоличествоПМ - КоличествоОстатокПоАдресамНакопительно; 
						Если ОбластьСклад.Параметры.КоличествоПМ<0 тогда
							ОбластьСклад.Параметры.КоличествоПМ = 0;
							Если СтрокВыводитьДополнительно>0 Тогда	
								СтрокВыводитьДополнительно = СтрокВыводитьДополнительно-1;
							Иначе	
								Прервать;
							КонецЕсли;	
						КонецЕсли;
						
					КонецЕсли;	
			ТабДокумент.Вывести(ОбластьСклад);
			КонецЦикла;
				
	 //КонецЕсли;
			
	КонецЦикла; // по товарам
//==================================================================================================		
		
	КонецЕсли;

	ОбластьИтого=Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.КоличествоСтрок=КоличествоСтрок;
	ОбластьИтого.Параметры.КоличествоВзятьИтого=КоличествоЗаказаноИтого;
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьМакета=Макет.ПолучитьОбласть("Примечание");
	ОбластьМакета.Параметры.Комментарий=СсылкаНаОбъект.Комментарий+ ?(КоличествоLegeArtis>0," , Всего дисков YST и LegeArtis=" + Строка(КоличествоLegeArtis) ,"" );
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета=Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Менеджер = СсылкаНаОбъект.Ответственный;
	ОбластьМакета.Параметры.ФИОИсполнителя = ?(СсылкаНаОбъект.Подразделение = справочники.Подразделения.НайтиПоКоду("00106"), "Жилин А.В.", "Фролов А.И.");
	ТабДокумент.Вывести(ОбластьМакета);
	состояние(" ");	
	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()


//-----------------------------------------------------------------------------------
//по строке выборки - находит N-ое пустое палетто-место, ближайшее к Адресу
функция НайтиБлижайшийПустойАдрес(ВыборкаНоменклатура, ТЗ_ПустыеПМ)
	
	номПоиска = ВыборкаНоменклатура.НомерПоПорядку;
	   
Если ТЗ_ПустыеПМ.Количество()=0 тогда
	сообщить("Нет полностью пустых палеттомест!");
	возврат "0-00-00-0";
КонецЕсли;

//номер за границами
Если номПоиска=0 или номПоиска<ТЗ_ПустыеПМ[0].НомерПоПорядку тогда
	Адрес1 = справочники.АдресаХранения.НайтиПоРеквизиту("Порядок", ТЗ_ПустыеПМ[0].Порядок);
	ТЗ_ПустыеПМ.Удалить(0);
	возврат Адрес1;
КонецЕсли;	

N = ТЗ_ПустыеПМ.Количество()-1;
Если номПоиска>ТЗ_ПустыеПМ[N].НомерПоПорядку тогда
	Адрес1 = справочники.АдресаХранения.НайтиПоРеквизиту("Порядок", ТЗ_ПустыеПМ[N].Порядок);
	ТЗ_ПустыеПМ.Удалить(N);
	возврат Адрес1;
КонецЕсли;	

//------------поиск делением пополам от M до N----------------------
N = N - 1; // границы 0 и N мы уже обработали 
M=1;
//----------ускорение последующего поиска---------------------
//Если номПоиска<ТЗ_ПустыеПМ[K].НомерПоПорядку тогда
// N = K;
//иначеЕсли номПоиска>ТЗ_ПустыеПМ[K].НомерПоПорядку тогда
// M = K;
//КонецЕсли;


//число итераций равно log2(Числа)= ln(Числа)/ln(2)  
//например для 1 000 -> 10, а для 10 000 -> 13

пока (N-M)>2 цикл   //или N=M или N=M+1
	i=Цел( (N-M)/2 );
	Если номПоиска<ТЗ_ПустыеПМ[M + i].НомерПоПорядку тогда    // = быть не может!
		N = M + i;
	иначе//Если номПоиска>ТЗ_ПустыеПМ[M + i].НомерПоПорядку тогда
		M = M+ i;
	КонецЕсли;
КонецЦикла;

	//или N=M или N=M+1   - берем минимальный по Порядку
	Если (номПоиска - ТЗ_ПустыеПМ[M].НомерПоПорядку) <= (ТЗ_ПустыеПМ[N].НомерПоПорядку - номПоиска) тогда
	K=M; иначе K=N;	 КонецЕсли;
		
	Адрес1 = справочники.АдресаХранения.НайтиПоРеквизиту("Порядок", ТЗ_ПустыеПМ[K].Порядок);
	ТЗ_ПустыеПМ.Удалить(K);
	возврат Адрес1;
  
 КонецФункции // НайтиБлижайшийПустойАдрес()

//======================================================================================
Процедура СуперПроцедураПоискаБлижайшихПустыхАдресов(СтрНоменклатуры, ТЗ_ПустыеПМ, ТЗ_РекомендуемыеТовары, числоНужныхАдресов);
		
	//структура полей как в запросе
	ТЗ_РекомендуемыеТовары = новый ТаблицаЗначений;
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("Номенклатура");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("АдресХранения");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("КоличествоЗаказано");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("НомерСтроки");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("КоличествоПМ");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("Порядок");
	ТЗ_РекомендуемыеТовары.Колонки.Добавить("НомерПоПорядку");
	
//-------------------ГЛАВНАЯ ПРОЦЕДУРА-----------------------------------
// находим числоНужныхАдресов в списке адресов
	найденныйАдрес = ""; 
		
	для i=1 по числоНужныхАдресов цикл
	стр1 = ТЗ_РекомендуемыеТовары.Добавить();
	ЗаполнитьЗначенияСвойств(стр1, СтрНоменклатуры);
	стр1.АдресХранения  = НайтиБлижайшийПустойАдрес(СтрНоменклатуры, ТЗ_ПустыеПМ);
		Если стр1.АдресХранения<>"0-00-00-0" тогда
			стр1.Порядок = стр1.АдресХранения.Порядок;
		иначе
			стр1.Порядок = стр1.АдресХранения;
		КонецЕсли;	
	КонецЦикла;
	
//----------Сортируем-------------------------
     ТЗ_РекомендуемыеТовары.Сортировать("Порядок Возр");
КонецПроцедуры



 // общая процедура печати
функция Печать() Экспорт
	
	ТабДокумент = неопределено;
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) тогда
		Предупреждение("Не выбран документ!", 30);		
	КонецЕсли;
	
		  
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
		
		ТабДокумент = ПечатьЗаказаПоставщику(Истина, Истина);   
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПоОтветственномуХранению") тогда
		
		Если СсылкаНаОбъект.ВидОперации <> перечисления.ВидыОперацийПоОтветственномуХранению.Поступление тогда
			Предупреждение("Данная печатная форма предназначена только
						|для Вида операции: ""Поступление""!",30);
			ТабДокумент = неопределено;
		иначе	
			ТабДокумент = ПечатьЗаказаПоставщику(Ложь,Истина);  // Приход	
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") тогда
		
		ТабДокумент =ПечатьЗаказаПоставщику(истина, ложь);
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
		
		ТабДокумент =ПечатьЗаказаПоставщику(ложь, ложь);
		
	КонецЕсли;
	
 Возврат ТабДокумент;
 
КонецФункции


//---------------------определение склада по документу--------------------------------------------
функция Склад5000()
	
 Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") тогда
	 рез =СсылкаНаОбъект.СкладПолучатель;
 ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
 	 рез =СсылкаНаОбъект.СкладОрдер;
 Иначе	 
	Если СсылкаНаОбъект.Подразделение = справочники.Подразделения.НайтиПоКоду("00106") тогда //+++ 30.09.2013 РнД
		рез = Справочники.Склады.НайтиПоКоду("00791"); // 4000
	иначе	
		#Если Клиент Тогда
			ТелПольз = глТекущийПользователь;
		#Иначе
			ТелПольз = Справочники.Пользователи.ПустаяСсылка();
		#КонецЕсли
		Если ТелПольз = Справочники.Пользователи.НайтиПоКоду("Разумов А.") Тогда
			рез = Справочники.Склады.НайтиПоКоду("02091"); // ЦЦЛ(А.Х.)
		Иначе
			рез = Справочники.Склады.НайтиПоКоду("00642"); // 5000
		КонецЕсли;
	КонецЕсли;
 КонецЕсли;

	возврат рез;

КонецФункции
