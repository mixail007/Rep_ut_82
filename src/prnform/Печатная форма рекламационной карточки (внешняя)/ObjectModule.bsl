Функция Печать() Экспорт 
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетРекламационнаяКарточка");
	Область=Макет.ПолучитьОбласть("Шапка");
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент,  СсылкаНаОбъект.Дата);
	Область.Параметры.АдресТелефон	= ОписаниеОрганизацииЗ(СведенияОГрузополучателе, "ФактическийАдрес,Телефоны");
	Область.Параметры.Дата=СсылкаНаОбъект.Дата;
	Область.Параметры.Контрагент=СсылкаНаОбъект.Контрагент;
	ТабДок.Вывести(Область);
	
	Область=Макет.ПолучитьОбласть("Строка");

	Запрос=Новый Запрос;
	Запрос.Текст="
				// |ВЫБРАТЬ
				// |	ЗаявкаНаБрак.Ссылка,
				// |	ЗаявкаНаБрак.ПометкаУдаления,
				// |	ЗаявкаНаБрак.Номер,
				// |	ЗаявкаНаБрак.Дата,
				// |	ЗаявкаНаБрак.Проведен,
				// |	ЗаявкаНаБрак.Контрагент,
				// |	ЗаявкаНаБрак.Номенклатура,
				// |	ЗаявкаНаБрак.Количество,
				// |	ЗаявкаНаБрак.НомерРеализации,
				// |	ЗаявкаНаБрак.ДатаРеализации,
				// |	ЗаявкаНаБрак.СостояниеДиска,
				// |	ЗаявкаНаБрак.ДатаПроизводства,
				// |	ЗаявкаНаБрак.Биение,
				// |	ЗаявкаНаБрак.ДефектЛитья,
				// |	ЗаявкаНаБрак.ДефектЛКП,
				// |	ЗаявкаНаБрак.Дисбаланс,
				// |	ЗаявкаНаБрак.МеханическиеПовреждения,
				// |	ЗаявкаНаБрак.НеПодходитНаЗаявленныйАвто,
				// |	ЗаявкаНаБрак.Комплектация,
				// |	ЗаявкаНаБрак.Пересорт,
				// |	ЗаявкаНаБрак.Картинка,
				// |	ЗаявкаНаБрак.Комментарий,
				// |	ЗаявкаНаБрак.Реализация,
				// |	ЗаявкаНаБрак.Исследование,
				// |	ЗаявкаНаБрак.СостояниеЗаявки,
				// |	ЗаявкаНаБрак.Вывод,
				// |	ЗаявкаНаБрак.НачалоЭкспертизы,
				// |	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
				// |	ЗаявкаНаБрак.Ответственный,
				// |	ЗаявкаНаБрак.ОтветственныйСоСтороныКлиента,
				// |	ЗаявкаНаБрак.Подразделение,
				// |	ЗаявкаНаБрак.ВидБрака,
				// |	ЗаявкаНаБрак.МетодУстранения,
				// |	ЗаявкаНаБрак.Заключение,
				// |	ЗаявкаНаБрак.Действие,
				// |	ЗаявкаНаБрак.КомментарийСклада
				// |ИЗ
				// |	Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
				// |ГДЕ
				// |	ЗаявкаНаБрак.Дата МЕЖДУ &ДатаН И &ДатаК
				// |	И ЗаявкаНаБрак.Контрагент = &Контрагент
				// |	И ЗаявкаНаБрак.ПометкаУдаления = ЛОЖЬ
				// |	И ЗаявкаНаБрак.Номенклатура <> &Пусто
				// |
				// |ОБЪЕДИНИТЬ ВСЕ
				// |
	             |ВЫБРАТЬ
	             |	ЗаявкаНаБрак.Ссылка,
	             |	ЗаявкаНаБрак.Ссылка.ПометкаУдаления,
	             |	ЗаявкаНаБрак.Ссылка.Номер,
	             |	ЗаявкаНаБрак.Ссылка.Дата,
	             |	ЗаявкаНаБрак.Ссылка.Проведен,
	             |	ЗаявкаНаБрак.Ссылка.Контрагент,
	             |	ЗаявкаНаБрак.Номенклатура,
	             |	ЗаявкаНаБрак.Количество,
	             |	ЗаявкаНаБрак.НомерРеализации,
	             |	ЗаявкаНаБрак.ДатаРеализации,
	             |	ЗаявкаНаБрак.СостояниеТовара как СостояниеДиска,
	             |	ЗаявкаНаБрак.ДатаПроизводства,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Биение
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ как Биение,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛитья
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ как ДефектЛитья,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &ДефектЛКП
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ ДефектЛКП,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Дисбаланс
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ Дисбаланс,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &МеханическиеПовреждения
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ МеханическиеПовреждения,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &НеПодходитНаЗаявленныйАвто
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ НеПодходитНаЗаявленныйАвто,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Комплектация
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ Комплектация,
	             |	ВЫБОР
	             |		КОГДА ЗаявкаНаБрак.Качество = &Пересорт
	             |			ТОГДА ЗаявкаНаБрак.Комментарий
	             |	КОНЕЦ Пересорт,
	             |	ЗаявкаНаБрак.Картинка,
	             |	ЗаявкаНаБрак.Ссылка.Комментарий,
	             |	ЗаявкаНаБрак.НомерРеализации,
	           //  |	ЗаявкаНаБрак.Исследование,
	             |	ЗаявкаНаБрак.Ссылка.СостояниеЗаявки,
	          //   |	ЗаявкаНаБрак.Вывод,
	             |	ЗаявкаНаБрак.НачалоЭкспертизы,
	             |	ЗаявкаНаБрак.ОкончаниеЭкспертизы,
	             |	ЗаявкаНаБрак.Ссылка.Ответственный,
	             |	ЗаявкаНаБрак.Ссылка.ОтветственныйСоСтороныКлиента,
	             |	ЗаявкаНаБрак.Ссылка.Подразделение,
	             |	ЗаявкаНаБрак.ВидБрака,
	             |	ЗаявкаНаБрак.МетодУстранения,
	             |	ЗаявкаНаБрак.Заключение,
	             |	ЗаявкаНаБрак.Действие,
	             |	ЗаявкаНаБрак.Ссылка.КомментарийСклада
	             |ИЗ
	             |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБрак
	             |ГДЕ
	            // |	ЗаявкаНаБрак.Ссылка.Дата МЕЖДУ &ДатаН И &ДатаК
				 |	ЗаявкаНаБрак.Ссылка = &ссылка
	             |	И ЗаявкаНаБрак.Ссылка.Контрагент = &Контрагент
	             |	И ЗаявкаНаБрак.Ссылка.ПометкаУдаления = ЛОЖЬ
	             |	И ЗаявкаНаБрак.Номенклатура <> &Пусто";
				 
				 Запрос.УстановитьПараметр("ДатаН",НачалоДня(СсылкаНаОбъект.Дата));
				 Запрос.УстановитьПараметр("ДатаК",КонецДня(СсылкаНаОбъект.Дата));
				 Запрос.УстановитьПараметр("Контрагент",СсылкаНаОбъект.Контрагент);
				 Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПустаяСсылка());
				 Запрос.УстановитьПараметр("Пусто",Справочники.Номенклатура.ПустаяСсылка());
				 Запрос.УстановитьПараметр("Биение",Справочники.Качество.Биение);
				 Запрос.УстановитьПараметр("ДефектЛитья",Справочники.Качество.ДефектЛитья);
				 Запрос.УстановитьПараметр("ДефектЛКП",Справочники.Качество.ДефектЛКП);
				 Запрос.УстановитьПараметр("Дисбаланс",Справочники.Качество.Дисбаланс);
				 Запрос.УстановитьПараметр("МеханическиеПовреждения",Справочники.Качество.МеханическиеПовреждения);
				 Запрос.УстановитьПараметр("НеПодходитНаЗаявленныйАвто",Справочники.Качество.НеПодходитНаАвто);
				 Запрос.УстановитьПараметр("Комплектация",Справочники.Качество.ДефектКомплектации);
				 Запрос.УстановитьПараметр("Пересорт",Справочники.Качество.Пересорт);
				 Запрос.УстановитьПараметр("Ссылка",СсылкаНаОбъект);
								 
				 Рез=Запрос.Выполнить().Выбрать();
				 Пока Рез.Следующий() Цикл
					 
					 Область.Параметры.Код			=""+Рез.Номенклатура.Код;
					 
					 //Область.Параметры.Количество			=""+Номенклатура.Количество;
					 Область.Параметры.Заполнить(Рез);
					 Наименование=Рез.Номенклатура.Наименование;
					 Наименование=СтрЗаменить(Наименование," Replica "," ");
					 Наименование=СтрЗаменить(Наименование," replica "," ");
					 Наименование=СтрЗаменить(Наименование," REPLICA "," ");
					 Область.Параметры.Номенклатура=Наименование;
					 Область.Параметры.ВыявленныеДефекты=""+
					 ?(ЗначениеЗаполнено(Рез.Биение)," Биение: "+Рез.Биение+",","")+
					 ?(ЗначениеЗаполнено(Рез.ДефектЛитья)," Дефект литья: "+Рез.ДефектЛитья+",","")+
					 ?(ЗначениеЗаполнено(Рез.ДефектЛКП)," Дефект ЛКП: "+Рез.ДефектЛКП+",","")+
					 ?(ЗначениеЗаполнено(Рез.Дисбаланс)," Дисбаланс: "+Рез.Дисбаланс+",","")+
					 ?(ЗначениеЗаполнено(Рез.МеханическиеПовреждения)," Механические повреждения: "+Рез.МеханическиеПовреждения+",","")+
					 ?(ЗначениеЗаполнено(Рез.НеПодходитНаЗаявленныйАвто)," Не подходит на заявленный авто: "+Рез.НеПодходитНаЗаявленныйАвто+",","")+
					 ?(ЗначениеЗаполнено(Рез.Комплектация)," Комплектация: "+Рез.Комплектация+",","")+
					 ?(ЗначениеЗаполнено(Рез.Пересорт)," Пересорт: "+Рез.Пересорт,"");
					 
					 Область.Параметры.ДопИнформация		=""+
					 ?(ЗначениеЗаполнено(Рез.СостояниеДиска)," СостояниеДиска: "+Рез.СостояниеДиска,"");
					 
					 ТабДок.Вывести(Область);
				 КонецЦикла;
	
	
	Область=Макет.ПолучитьОбласть("Подвал");
	//Область.Параметры.МодельДиска =""+Номенклатура.Модель;
	//Область.Параметры.ТипоразмерДиска =""+Номенклатура.Типоразмер;
    ТабДок.Вывести(Область);
	
	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
    Возврат ТабДок;

КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизацииЗ(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	
	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ОГРН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли; 

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", " ");
	СоответствиеПараметров.Вставить("ИНН",        " ИНН ");
	СоответствиеПараметров.Вставить("КПП",        " КПП ");
	СоответствиеПараметров.Вставить("ОГРН",        " ОГРН ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",   " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета", " р/с ");
	СоответствиеПараметров.Вставить("Банк",       " в банке ");
	СоответствиеПараметров.Вставить("БИК",        " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",   " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",  " Код по ОКПО ");

	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				#Если Клиент Тогда
					Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				#КонецЕсли
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

