функция НайтиРасстояниеМеждуТочками(коорд0, зак )
	
	РезСтруктура = ПолучитьСтруктуруАдреса(зак);

рез = новый Структура("км, Координаты");
рез.Координаты = РезСтруктура.Координаты;

рез.км = получитьРасстояниеПоКоординатам(коорд0, РезСтруктура.Координаты);

возврат рез;
КонецФункции


//+++ 30.10.2017 - вспомогательные функции
функция получитьСкоростьИВыгрузку(МаксКм=0, ссылка)
	стр = новый Структура("Скорость, Выгрузка", 65, 1);
	
	ВесМакс = ссылка.ВесМакс;
	ОбъемМакс = ссылка.ОбъемМакс;
	
	Если ВесМакс=0 или ОбъемМакс=0 тогда
		Предупреждение("Не заполнен Тоннаж и Макс.Объем автомобиля!
		|Выберите марку/тип автомобиля из списка!",30);
		возврат стр;
	КонецЕсли;	
	
	Если МаксКм=0 тогда
		Предупреждение("Не заполнено поле Расстояния!",30);
		возврат стр;
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТарифыНаПеревозки.Скорость,
	|	ТарифыНаПеревозки.Выгрузка
	|ИЗ
	|	РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозки
	|ГДЕ
	|	ТарифыНаПеревозки.Тоннаж = &Тоннаж
	|	И ТарифыНаПеревозки.ЗонаКилометража = &ЗонаКилометража";
	
	Тоннаж = 2;
	Если ВесМакс<=2 тогда Тоннаж = 2;       //1
	ИначеЕсли ВесМакс<=4 тогда Тоннаж = 4;  //2
	ИначеЕсли ВесМакс<=7 тогда Тоннаж = 7;  //3
	ИначеЕсли ВесМакс<=10 тогда Тоннаж = 10;//4
	Иначе Тоннаж = 20;                      //5
	КонецЕсли;
	Запрос.УстановитьПараметр("Тоннаж", Тоннаж);
	
	ЗонаКилометража = 500;
	Если МаксКм<=500 тогда ЗонаКилометража = 500; 		 //1
	ИначеЕсли МаксКм<=1000 тогда ЗонаКилометража = 1000; //2
	ИначеЕсли МаксКм<=2000 тогда ЗонаКилометража = 2000; //3
	Иначе ЗонаКилометража = 5000; // 4
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗонаКилометража", ЗонаКилометража);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		стр.Скорость = выборка.Скорость; //* 2.618;
		стр.Выгрузка = выборка.Выгрузка; //* 1.618;
	КонецЕсли;
	
	Сообщить("По параметрам машины ("+строка(Тоннаж)+"т.; "+строка(ЗонаКилометража)+"км) получена Средняя плановая скорость С = "+строка(стр.Скорость)+" (км/ч) и скорость Выгрузки b = "+строка(стр.Выгрузка)+" (м3/ч)");
	
	возврат стр;
КонецФункции	

//переворот "нормальных" координат Д,Ш >> Ш,Д
функция ШД(адр1) 
	i= найти(адр1,","); L=стрДлина(адр1);
	рез = прав(адр1, L-i)+","+лев(адр1, L-i);
	возврат рез;
КонецФункции


функция получитьРасстояниеПоКоординатам(Коорд1,Коорд2) экспорт    
	Адрес1= ШД(Коорд1);
	Адрес2= ШД(Коорд2);

	Соединение = Новый HTTPСоединение("maps.googleapis.com");
	Заголовки = Новый Соответствие();
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	Ресурс = "/maps/api/directions/xml?origin="+Адрес1+"&destination="+Адрес2;
	HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
	
	попытка
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	исключение
		сообщить("Нет подключения к сервису maps.googleapis.com !");
		возврат 0;
	КонецПопытки;	
	Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаXMLРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 
 i1 = найти(СтрокаXMLРезультат, "<status>");
 i2 = найти(СтрокаXMLРезультат, "</status>");
 Если i1>0 и i2>0 тогда
	 рез = сред(СтрокаXMLРезультат, i1+8, i2-i1-8);
	 сообщить("Результат: "+рез);
 КонецЕсли;	
 
 distance = 0;
 location = "";
 
// если рез<>"OK" тогда
 
 стр1 = СтрокаXMLРезультат;
  i = найти(стр1, "</step>");
  //... step... пропускаем
  пока i>0 цикл
  стр1 = прав(стр1, стрДлина(стр1)-i-6);	  
  i = найти(стр1, "</step>");
  КонецЦикла;

  i = найти(стр1, "<distance>");
  Если i>0 тогда
	  стр1 = прав(стр1, стрДлина(стр1)-i-9);	
	  i1 = найти(стр1, "<value>");
	  i2 = найти(стр1, "</value>");
	distanceText = сред(стр1, i1+7, i2-i1-7);  
	
	сообщить( "distance = "+distanceText+" м");
	
	попытка
		distance = ОКР( число(distanceText)/1000, 1 );	 // округляем до 100 м
	исключение
		distance = 0;
	КонецПопытки;
	
//  <distance>
 //   <value>1355034</value>   //в метрах!
 //   <text>1,355 km</text>
//  </distance>
	
  КонецЕсли;

 i = найти(стр1, "<end_location>");
 Если i>0 тогда
	 стр1 = прав(стр1, стрДлина(стр1)-i-13);
	 
	  i1 = найти(стр1, "<lat>");
	  i2 = найти(стр1, "</lat>");
	ш = сред(стр1, i1+5, i2-i1-5);  
	  i1 = найти(стр1, "<lng>");
	  i2 = найти(стр1, "</lng>");
	д = сред(стр1, i1+5, i2-i1-5);  
	
	location = д+","+ш;
КонецЕсли;	
  
//КонецЕсли;//если ОК
 рез =  distance ; // в километрах!
 //location;
 
 возврат рез;
 
 КонецФункции



функция КоординатыПодразделения(Подразделение)
	
	нашиКоординаты = "39.838082,57.657312"; //Ярославль, ул.Базовая, д.3 - 39.838082,57.657312
	
	Если Подразделение.Код = "00106" тогда      // РнД
		нашиКоординаты = "39.59017,47.245319";
	ИначеЕсли Подразделение.Код = "00112" тогда // СПб
		нашиКоординаты = "30.4261098,59.8424869";// 
	ИначеЕсли Подразделение.Код = "00138" тогда
		нашиКоординаты = "60.64839,56.781591";// ЕКТ новый  
	КонецЕсли;

	возврат нашиКоординаты;
КонецФункции

Функция  ЗаполнитьИнформациюПоПроезду(Ссылка) 
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИнформацияПоПроезду.НомерОчереди,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.Заказ,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)) КАК Адрес,
	             |	ИнформацияПоПроезду.Организация,
	             |	СУММА(ИнформацияПоПроезду.СуммаЗаТоварНал) КАК СуммаЗаТоварНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаНал) КАК ДоставкаНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаБНал) КАК ДоставкаБНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаВЦене) КАК ДоставкаВЦене,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	             |	СУММА(ИнформацияПоПроезду.Объём) КАК Объём,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
				 //28.03.2016
	             |	МАКСИМУМ(ИнформацияПоПроезду.Расстояние) КАК Расстояние
	             |ИЗ
	             |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	             |ГДЕ
	             |	ИнформацияПоПроезду.Задание = &Задание
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ИнформацияПоПроезду.Заказ,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)),
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)),
	             |	ИнформацияПоПроезду.Организация,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ИнформацияПоПроезду.НомерОчереди
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ИнформацияПоПроезду.НомерОчереди
	             |АВТОУПОРЯДОЧИВАНИЕ";
				 Запрос.УстановитьПараметр("Задание",Ссылка);
				 
				 
	//ИнформацияПоПроезду.Очистить();	
	//КолЕстьДок = 0;
	
	 //Пока Рез.Следующий() Цикл
	 //	нстр=ИнформацияПоПроезду.Добавить();
	 //	ЗаполнитьЗначенияСвойств(нстр, рез);
	 //	Если  нстр.ВсеДокументыСданыВБухгалтерию Тогда
	 //   	КолЕстьДок = КолЕстьДок + 1;
	 //	КонецЕсли;
	 //КонецЦикла;
	 Возврат Запрос.Выполнить().Выгрузить();
	 	 
КонецФункции


//Заказ по ОТХ - для операции Списание
Функция ПечатьМаршрутныйЛист()
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("МаршрутныйЛист");
	
	ИнфоПоПроезду=ЕстьИнфоПоПроезду();
	Если ИнфоПоПроезду.Количество()>0 тогда
		ТабДокумент=ПечатьЗагрузочногоЛистаПоИнформацииОПроезде(ИнфоПоПроезду);
		Возврат ТабДокумент;
		
	Иначе
	КонецЕсли;
	
КонецФункции // ПечатьСчетаЗаказа()

// общая процедура печати
функция Печать() Экспорт
	ТабДокумент = неопределено;
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) тогда
		#Если Клиент тогда
			Предупреждение("Не выбран документ!", 30);		
		#КонецЕсли	
		возврат Неопределено;
	КонецЕсли;
	
		ТабДокумент = ПечатьМаршрутныйЛист();
	//	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	Возврат ТабДокумент;
	
КонецФункции

функция  получитьЗаданияПоналичке()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетДенежныхСредствВПодотчетеУВодителейОбороты.Заказ,
		|	УчетДенежныхСредствВПодотчетеУВодителейОбороты.Реализация,
		|	УчетДенежныхСредствВПодотчетеУВодителейОбороты.СуммаПриход КАК Сумма,
		|	УчетДенежныхСредствВПодотчетеУВодителейОбороты.СуммаТранспортПриход КАК СуммаТранспорт,
		|	УчетДенежныхСредствВПодотчетеУВодителейОбороты.СуммаПредыдущийДолгПриход КАК СуммаПредыдущийДолг
		|ИЗ
		|	РегистрНакопления.УчетДенежныхСредствВПодотчетеУВодителей.Обороты(&Нач, &Кон, Авто, ЗаданиеНаОтгрузку = &Задание) КАК УчетДенежныхСредствВПодотчетеУВодителейОбороты";

	Запрос.УстановитьПараметр("Задание", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Кон", КонецДня(СсылкаНаОбъект.Дата)+2*24*60*60);
	Запрос.УстановитьПараметр("Нач", НачалоДня(СсылкаНаОбъект.Дата));

	Возврат Запрос.Выполнить().Выгрузить();



конецфункции
Функция ПечатьЗагрузочногоЛистаПоИнформацииОПроезде(Инфо)
	 //Плотников, проверка крыжек
	 СписокЗаказов = Новый СписокЗначений;
	Для каждого стр из СсылкаНаОбъект.ЗаказыПокупателей Цикл
		Если ЗначениеЗаполнено(стр.Реализация) Тогда
			СписокЗаказов.Добавить(стр.ЗаказПокупателя);
		КонецЕсли;
	КонецЦикла;

	 Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗаказПокупателя", СписокЗаказов);
	Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
	СписокПроизводителей = Новый СписокЗначений;
	СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3333"));
	СписокПроизводителей.Добавить(Справочники.Производители.НайтиПоКоду("3400"));
	Запрос.УстановитьПараметр("СписокПроизводителей", СписокПроизводителей);

	тип = СсылкаНаОбъект.Метаданные().Имя;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	А.Номенклатура,
	             |	А.Комплектующая КАК Комплектующая,
	             |	А.Комплектующая.Код КАК Код,
	             |	А.Комплектующая.КодСБИС КАК КодСБИС,
	             |	МАКСИМУМ(А.КоличествоОстаток) КАК Остаток,
	             |	СУММА(А.КоличествоЗаказано) КАК Количество,
	             |	А.Ссылка
	             |ПОМЕСТИТЬ ВТ_ТаблицаКомплектующихПоНоменклатуре_1
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	             |		КомплектующиеНоменклатуры.Комплектующая.Код КАК Код,
	             |		КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая,
	             |		КомплектующиеНоменклатуры.Комплектующая.КодСБИС КАК КомплектующаяКодСБИС,
	             |		ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	             |		ЗаказПокупателяТовары.Количество КАК КоличествоЗаказано,
	             |		ЗаказПокупателяТовары.Ссылка КАК Ссылка
	             |	ИЗ
	             |		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				КомплектующиеНоменклатуры.Номенклатура КАК Номенклатура,
	             |				КомплектующиеНоменклатуры.Комплектующая КАК Комплектующая
	             |			ИЗ
	             |				РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	             |			ГДЕ
	             |				КомплектующиеНоменклатуры.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	             |				И КомплектующиеНоменклатуры.Комплектующая В ИЕРАРХИИ(&Крышки)) КАК КомплектующиеНоменклатуры
	             |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, ) КАК ТоварыНаСкладахОстатки
	             |				ПО КомплектующиеНоменклатуры.Комплектующая = ТоварыНаСкладахОстатки.Номенклатура
	             |			ПО ЗаказПокупателяТовары.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	             |	ГДЕ
	             |		ЗаказПокупателяТовары.Ссылка В(&ЗаказПокупателя)
	             |		И ЗаказПокупателяТовары.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)) КАК А
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	А.Номенклатура,
	             |	А.Комплектующая,
	             |	А.Комплектующая.Код,
	             |	А.Комплектующая.КодСБИС,
	             |	А.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	РеализацияТоваровУслуг.Ссылка,
	             |	РеализацияТоваровУслуг.Номер
	             |ПОМЕСТИТЬ Реализации
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	             |ГДЕ
	             |	РеализацияТоваровУслуг.Сделка В(&ЗаказПокупателя)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	Реализации.Ссылка КАК Ссылка,
	             |	СУММА(ВТ_ТаблицаКомплектующихПоНоменклатуре.Количество) КАК Количество
	             |ИЗ
	             |	ВТ_ТаблицаКомплектующихПоНоменклатуре_1 КАК ВТ_ТаблицаКомплектующихПоНоменклатуре
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Реализации КАК Реализации
	             |		ПО ВТ_ТаблицаКомплектующихПоНоменклатуре.Ссылка = Реализации.Ссылка.Сделка
	             |ГДЕ
	             |	НЕ ВТ_ТаблицаКомплектующихПоНоменклатуре.Комплектующая ЕСТЬ NULL 
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Реализации.Ссылка";
	
	
Результат=Запрос.Выполнить();
ТаблицаПоКрышкам=Результат.Выгрузить();
//Плотников
	 ЗаданияПоналичке = получитьЗаданияПоналичке();
	
	
	ТабДокумент=Новый табличныйДокумент;
	
	ПоставщикЗаСчетПокупателя=Справочники.СпособыОтгрузкиТовара.НайтиПоНаименованию("автомобильным транспортом силами Поставщика за счет Поставщика");
	
	Макет=ПолучитьМакет("МаршрутныйЛист");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбШтрихКод=ОбластьМакета.Рисунки.Штрихкод.Объект;
	ОбШтрихКод.ТипКода = 4; 
	ОбШтрихКод.Сообщение = СформироватьШКРеализации(СсылкаНаОбъект,"7");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
	ОбШтрихКод.ОтображатьТекст = Ложь;
	
	
	
	ОбластьМакета.Параметры.НомерЗадания = СсылкаНаОбъект.Номер;
	ОбластьМакета.Параметры.НомерЗаданияЧ= строка( число(прав(СсылкаНаОбъект.Номер, стрДлина(СсылкаНаОбъект.Номер)-2)) ); //вырезаем префикс 2 буквы
	
	ОбластьМакета.Параметры.Направление  = СокрЛП(СсылкаНаОбъект.Направление);
	
	ОбластьМакета.Параметры.Перевозчик = "Перевозчик: "+СсылкаНаОбъект.Перевозчик;
	ОбластьМакета.Параметры.Водитель = "Водитель: "+СсылкаНаОбъект.Водитель+" тел: "+СсылкаНаОбъект.ТелефонВодителя;
	//ОбластьМакета.Параметры.ТелефонВодителя = "тел: "+СсылкаНаОбъект.ТелефонВодителя;
	ОбластьМакета.Параметры.АвтомобильГосНомерАвтомобиля = "Автомобиль: "+СокрЛП(СсылкаНаОбъект.МаркаАвтомобиля)+"  "+СсылкаНаОбъект.ГосНомерАвтомобиля;
	вес = 0;
	Если СсылкаНаОбъект.Выполнено тогда
		для каждого стр1 из СсылкаНаОбъект.ЗаказыПокупателей цикл
			если ЗначениеЗаполнено(стр1.Реализация) тогда
				вес = вес +стр1.Реализация.Товары.Итог("Вес");
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	ОбластьМакета.Параметры.ОбъемТС = "Объем т/с: "+формат(СсылкаНаОбъект.ИтогОбъем,"ЧДЦ=1")
	//+?(СсылкаНаОбъект.ОбъемМакс>0, "/"+формат(СсылкаНаОбъект.ИтогОбъем,"ЧДЦ=1"),"")
	+" м3"
	+?(вес>0, " (вес: "+формат(Вес/1000,"ЧДЦ=1")
//	+?(СсылкаНаОбъект.ВесМакс>0,"/"+формат(СсылкаНаОбъект.ВесМакс,"ЧДЦ=1"),"")
	+" т.)", "");
	
	//ОбластьМакета.Параметры.Номер = число(прав(СсылкаНаОбъект.Номер,5));
	ОбластьМакета.Параметры.Дата  = Формат(СсылкаНаОбъект.Дата,"ДЛФ=DD");
	
	
	
	//+++Шарафутдинов 02.02.2017
	
	//Инфо3 = Инфо.Скопировать();
	//Инфо3.Свернуть("НомерОчереди,Контрагент,Адрес,Менеджер,Заказ,Реализация,ДолгЗаПредыдущиеОтгрузки,Комментарий", "ДоставкаНал, СуммаЗаТоварНал");
	//Инфо3.Колонки.Добавить("Номер");	
	//Инфо3.Сортировать("НомерОчереди  возр"); 	
	
	очередь = 1;
	ПланВремяПерваяТочка = Дата(1,1,1);
	// Пока очередь <= МаксОчередь Цикл
	//НайденныеСтроки = Инфо3.НайтиСтроки(Новый структура("НомерОчереди",1));
	//Для каждого стр из НайденныеСтроки цикл
	//	Если ТипЗнч(стр.Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
	//		Если ПланВремяПерваяТочка<стр.Реализация.СрокДоставки тогда
	//			ПланВремяПерваяТочка = стр.Реализация.СрокДоставки;
	//		КонецЕсли;
	//	КонецЕсли; 	
	//КонецЦикла;
	//КонецЦикла;
	табл1 = ЗаполнитьИнформациюПоПроезду(СсылкаНаОбъект);
	
	табл1.Сортировать("НомерОчереди");
	
	//1. принудительно заполняем расстояние!
	оч = -1;  км = 0;  Ro = 0;
	Коорд0 = КоординатыПодразделения(СсылкаНаОбъект.Подразделение);
	
	Коорд1 = Коорд0;
	для каждого стр1 из табл1 цикл 
		Если оч = стр1.НомерОчереди тогда
			стр1.Расстояние = км;  //одинаковое для 1 очереди!
		Иначе
			км = стр1.Расстояние; // расстояние до оч точки
			оч = стр1.НомерОчереди;
			
			
			Если км=0 тогда //находим расстояние!
				рез1 = НайтиРасстояниеМеждуТочками(Коорд1, стр1.Заказ );
				Коорд1 = рез1.Координаты;
				км     = Ro + рез1.км;
				стр1.Расстояние = км;
			иначе //должен быть норм.адрес с координатами!
				РезСтруктура = ПолучитьСтруктуруАдреса(стр1.Заказ);
				Коорд1 = РезСтруктура.Координаты;
			КонецЕсли;
			
			Ro = км;
		КонецЕсли;	 	
	КонецЦикла;	
	
	км2=км;
	Километров	=  СсылкаНаОбъект.Километров;
	
	Если Километров=0 тогда
		
		км2 = получитьРасстояниеПоКоординатам( Коорд1, Коорд0 ); //обратный путь может быть короче
		
		Километров = км + км2 ;//туда и обратно! до последней точки и назад!
		сообщить("Автоматически установлен 'Пробег' "+строка(Километров)+" км! Расстояние до последней точки "+строка(км)+" км. + обратный путь "+строка(км2)+" км.");
		
	ИначеЕсли Километров < км тогда 
		сообщить("Автоматически установлен 'Пробег' "+строка(Километров)+" >> "+строка(км)+" км.  как расстояние до последней точки!", СтатусСообщения.Внимание );
		Километров = км;
	КонецЕсли;										
	
	структура = получитьСкоростьИВыгрузку( Километров,СсылкаНаОбъект );
	
	Csr = структура.Скорость / 3600; // км/сек
	bsr = структура.Выгрузка / 3600; // м3/сек
	
	табл1.Свернуть("НомерОчереди, Расстояние", "Объём");
	
	табл1.Колонки.Добавить("ПланВремя");
	
	//====================ГЛАВНЫЙ РАСЧЕТ ====  T(i) = T(i-1) + d ============
	
	Vo = 0;  //объем предыдущей точки
	Ro = 0;  // расстояние до пред.точки
	ВремяНапоминания = СсылкаНаОбъект.ВремяНапоминания;
	Дата = СсылкаНаОбъект.Дата;
	T0 = ?(ВремяНапоминания='00010101', Дата, ВремяНапоминания); //время до пред.точки
	m = 60;  // округляем до 1 минуты
	для каждого стр1 из табл1 цикл
		R = стр1.Расстояние - Ro;
		Если Csr<>0 и bsr<>0 тогда
			d = ОКР( R /Csr/m, 0)*m + ОКР( Vo /bsr/m, 0)*m; // дельта времени
		иначе
			d = 0;
		КонецЕсли;
		
		стр1.ПланВремя = T0 + d;
		
		Vo  = стр1.Объём;
		Ro  = стр1.Расстояние;
		T0  = стр1.ПланВремя;
	КонецЦикла;	  
	
	табл1.Сортировать("НомерОчереди");
	
	
	ОбластьМакета.Параметры.ДатаПервойТочки  = табл1[0].ПланВремя;  
	
	//---Шарафутдинов 02.02.2017
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета= Макет.ПолучитьОбласть("ШапкаМенеджер");
	//Менеджер телефон
	Менеджеры=Инфо.Скопировать();
	Менеджеры.Свернуть("Контрагент"); //+++Шарафутдинов, определяем операторов
	
	
	
	//+++Шарафутдинов, определяем операторов по задаче 46948 
		
	выборкаОператоров = новый ТаблицаЗначений;
	выборкаОператоров.Колонки.Добавить("Пользователь");
	выборкаОператоров.Колонки.Добавить("Контрагент");
	для каждого мен из Менеджеры цикл
		ВозврСтруктура =  ПолучитьЗакрпленныхЗаРегиономОператораПомощника(мен.КОнтрагент.Регион,мен.КОнтрагент);
		Если ЗначениеЗаполнено(ВозврСтруктура.Оператор) тогда
			НовСтр = выборкаОператоров.Добавить();
			НовСтр.Пользователь = ВозврСтруктура.Оператор;
			НовСтр.Контрагент = мен.КОнтрагент;
		КонецЕсли;
		
	КонецЦикла;
	
	выборкаОператоров1 = выборкаОператоров.Скопировать(,"Пользователь");
	выборкаОператоров1.Свернуть("Пользователь");
		
	
	//---Шарафутдинов, определяем операторов по задаче 46948       ЕСЛИ не нашли - то по старой схеме!
	ТелефонОбщ ="";
	для каждого стр из выборкаОператоров1 цикл
		польз =  стр.Пользователь;
		ТелефонОбщ  = ТелефонОбщ + польз + "  ";
		//ОбластьМакета.Параметры.Менеджер = стр.Менеджер;
		//-----------определение телефона-------------------------	
		Если ЗначениеЗаполнено(польз.ФизЛицо) тогда
			ТелефонОбщ  = ТелефонОбщ +  ПолучитьВсеТелефоны(польз.ФизЛицо) +Символы.ПС;
		иначе // по сотруднику
			сообщить("Для пользователя: "+ польз +" - не установлено Физ.Лицо! Контактная информация - не доступна!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		
	конецЦикла;
	
	//+++ Шарафутдинов по задаче 52889, добавляем телефон Князевой
	 физикКнязева = Справочники.ФизическиеЛица.НайтиПоКоду("С3356");
	 ТелефонОбщ  = ТелефонОбщ +физикКнязева.Наименование + "  "+ ПолучитьВсеТелефоны(физикКнязева) ;	
	
	//--- Шарафутдинов по задаче 52889 
	
	
	ОбластьМакета.Параметры.Телефон  = ТелефонОбщ;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета= Макет.ПолучитьОбласть("ШапкаЛогист");
	ОбластьМакета.Параметры.Логист = СсылкаНаОбъект.Ответственный;
	если ЗначениеЗаполнено(СсылкаНаОбъект.Ответственный.ФизЛицо) ТОгда
	    ОбластьМакета.Параметры.Телефон = ПолучитьВсеТелефоны(СсылкаНаОбъект.Ответственный.ФизЛицо);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	//----------------------------------------
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	//ОбластьМакета.Параметры.Подпись="Порядок разгрузки товара:";
	//ОбластьМакета.Параметры.НомерЗаданияЧ= строка( число(прав(СсылкаНаОбъект.Номер, стрДлина(СсылкаНаОбъект.Номер)-2)) ); //вырезаем префикс 2 буквы
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета1 = Макет.ПолучитьОбласть("Строка1"); //15.11.2018
	Инфо1=Инфо.Скопировать();
	
	//+++ 06.05.2015
	//Тут нам нужна только наличка
	//Инфо1.колонки.Добавить("НомерСтроки");
	i = 1; k=0;   СтрПоиска0 = "";
	Для каждого стр из инфо1 цикл
//		стр.НомерСтроки = i;
		
		Адрес = СокрЛП(стр.Адрес);// из 1 заказа! 
		Если СокрЛП(Адрес)="" тогда//+++ 23.04.2015 - чтобы было видно... но увеличивает объём базы...
			Адрес = СокрЛП(стр.Заказ.АдресДоставки);
			Если СокрЛП(Адрес)="" тогда
			  Адрес = ПолучитьКонтактнуюИнформацию(стр.Контрагент, "доставки");
			  Если СокрЛП(Адрес)="адрес доставки:" тогда
				Адрес = ПолучитьКонтактнуюИнформацию(стр.Контрагент, "Факт");
				если СокрЛП(Адрес)="Факт.адрес:" тогда
				Адрес = ПолучитьКонтактнуюИнформацию(стр.Контрагент, "Юр");
				КонецЕсли;
			  КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	   стр.Адрес = Адрес;
	   
	   СтрПоиска1 = Строка(стр.Контрагент)+"-"+СокрЛП(стр.Адрес)+"-"+Строка(стр.Менеджер);
	   если СтрПоиска0 <> СтрПоиска1 тогда
		   СтрПоиска0 = СтрПоиска1;  k=k+1;
	   КонецЕсли;	   
		стр.НомерОчереди = ?(стр.НомерОчереди=0, k, стр.НомерОчереди);
		
	//	сообщить(строка(i)+") очередь "+строка( стр.НомерОчереди ) + " -> "+СтрПоиска1);
		i=i+1;
	 КонецЦикла;
//	Инфо1.Сортировать("НомерСтроки убыв");
	 
	Инфо2 = Инфо1.Скопировать();
	Инфо2.Свернуть("НомерОчереди,Контрагент,Адрес,Менеджер,Заказ,Реализация,ДолгЗаПредыдущиеОтгрузки,Комментарий", "ДоставкаНал, СуммаЗаТоварНал");
	Инфо2.Колонки.Добавить("Номер");
	//Инфо2.Колонки.Добавить("Комментарий");//02.04.2014
	Инфо2.Сортировать("НомерОчереди  возр"); //+++ 06.05.2015
	
	МаксОчередь = Инфо2[Инфо2.количество()-1].НомерОчереди;
	
	ИтогоИтого=0;	ДоставкаНалИтого = 0; СуммаТоварИтого = 0;    СуммаТоварПИтого =0; 
	НомерСтроки=1;  
	N = Инфо1.Количество();
	
	ИсключатьСтрокиБезРеализаций = СсылкаНаОбъект.ПолучитьОбъект().естьРеализации(истина); //есть проведенные реализации
	 очередь = 1;
	 Пока очередь <= МаксОчередь Цикл
		 НайденныеСтроки = Инфо2.НайтиСтроки(Новый структура("НомерОчереди",очередь));
		  сумматовар = 0;
		  СумматоварП = 0;
		  Доставка = 0;
		  Орг="";
		  НомерНакл = "";
		  коммент ="";
		  Крышки = 0;
		 Для каждого стр из НайденныеСтроки цикл
			 Если СокрЛП(стр.Заказ.ДоговорКонтрагента.ТипДоговора.Код) = "Я0004" тогда
				 Орг = ?(Орг="", "ФА", Орг +?(Найти(Орг,"ФА")>0,"",", ФА") );
				 //ИначеЕсли СокрЛП(стр2.ЗаказПокупателя.Контрагент.Код) = "92797" тогда
				 //	Орг = "ФА+";	
			 ИначеЕсли СокрЛП(стр.Заказ.Контрагент.Код) = "П000382" тогда
				 Орг = ?(Орг="", "АЭ", Орг + ?(Найти(Орг,"АЭ")>0,"",", АЭ") );
			 Иначе
				 Орг = ?(Орг="", "ЯШТ",Орг+ ?(Найти(Орг,"ЯШТ")>0,"",", ЯШТ") );
			 КонецЕсли;	
			 Если ЗначениеЗаполнено(стр.Реализация) тогда
				 //Плотников, проверка крышек
				 СтрокаПоиск = ТаблицаПоКрышкам.Найти(стр.Реализация,"Ссылка");
				 Если СтрокаПоиск <> Неопределено Тогда
					 КоличествоКрышек = СтрокаПоиск.Количество;
				 Иначе
					 КоличествоКрышек = 0;
				 КонецЕсли;
				 Крышки = Крышки + КоличествоКрышек;
				 //плотников
				 номерНакл  = номерНакл  + ?(СокрЛП(НомерНакл)<>"",",
				 |","")+Строка(стр.Реализация.Номер);
			 Иначе
				 номерНакл = номерНакл  + ?(СокрЛП(НомерНакл)<>"",",
				 |","")+"заказ "+Строка(стр.Заказ.Номер);
			 КонецЕсли;
			 отбор = Новый Структура;
			 Отбор.Вставить("Заказ",стр.Заказ);
			 Отбор.Вставить("Реализация",стр.Реализация);
			 НайденныеЗадания = ЗаданияПоналичке.Найтистроки(Отбор);
			 Если НайденныеЗадания.Количество()>0 Тогда
			//временно	 
			 если Найти(НайденныеЗадания[0].Реализация.Договорконтрагента.Наименование,"*") Тогда
			  СуммаТовар = СуммаТовар+ НайденныеЗадания[0].сумма;
			 конецЕсли; 
			  
			 СуммаТоварП =СуммаТоварП+ НайденныеЗадания[0].суммаПредыдущийДолг;
			 Доставка =Доставка+ НайденныеЗадания[0].суммаТранспорт  ;
			  конецесли;
			 //СуммаТовар = СуммаТовар + стр.СуммаЗаТоварНал;
			 //СуммаТоварП = СуммаТоварП + стр.ДолгЗаПредыдущиеОтгрузки;      
			 //Доставка = Доставка+ Стр.ДоставкаНал;
			 Если стрДлина(сокрЛП(стр.Комментарий))>0 тогда
				 коммент = коммент + сокрЛП(стр.Комментарий)+", "; //02.04.2014
			 КонецЕсли;
			 //организация = стр.заказ.Организация;
			 контрагент = стр.Контрагент;
			 Менеджер = стр.Менеджер;
			 Адрес = стр.Адрес;
		 конецЦикла;
	
		ОбластьМакета.Параметры.Орг = Орг;
		ОбластьМакета.Параметры.СуммаТовар  = СуммаТовар;
		ОбластьМакета.Параметры.СуммаТоварП = СуммаТоварП;
		ОбластьМакета.Параметры.Доставка    = Доставка;
		ОбластьМакета.Параметры.ИтогоСумма  = суммаТовар+СуммаТоварП+Доставка;
		ОбластьМакета.Параметры.К = Крышки;
		
		// Плотников, + Заявки на брак
		Если СсылкаНаОбъект.ЗаявкиНаБрак.Количество()>0 Тогда
			
			Заявки = СсылкаНаОбъект.ЗаявкиНаБрак.Выгрузить();
			
			Отбор = Новый Структура;
			Отбор.Вставить("НомерОчереди",очередь);
			
			СтрокиЗаявок = Заявки.Скопировать(отбор);
			
			если СтрокиЗаявок.Количество()>0 Тогда
				СтрокиЗаявок.Свернуть("Контрагент,ДокументОтгрузки");
				
				для каждого стрЗ из СтрокиЗаявок Цикл
					НомерНакл = НомерНакл + "," +  Символы.ПС + "брак:" + ПолучитьНомерНаПечать(стрЗ.ДокументОтгрузки);
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;
		// Плотников, +++
		
		ОбластьМакета.Параметры.Номер = номерНакл;
		ОбластьМакета.Параметры.Контрагент = Контрагент;
		
		///++++ Шарафутдинов по задаче 46948        ЕСЛИ не нашли - то по старой схеме!
		
		Менеджер = выборкаОператоров.Найти(Контрагент,"Контрагент"); //если получаетсчя несколько операторов - берем первого нашедшегося
		ОсновнойМенеджер = Контрагент.ОсновнойМенеджерКонтрагента;
		если Менеджер<>Неопределено тогда		
			ОбластьМакета.Параметры.Менеджер   =  Строка(Менеджер.ПОльзователь) +"; " +  ОсновнойМенеджер;
		ИНАЧЕ
			ОбластьМакета.Параметры.Менеджер   =  "" +  ОсновнойМенеджер;
		КонецЕсли; 		
		///--- Шарафутдинов по задаче 46948 
		
		
		////Плотников, проверим время выгрузки 
		//+++ 23.05.2017 ===========================================================
		//Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		//Набор.Отбор.Объект.Установить(Контрагент);
		//Набор.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90219"));
		//Набор.Прочитать();
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		 |	ЗначенияСвойствОбъектов.Значение
		 |ИЗ
		 |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		 |ГДЕ
		 |	ЗначенияСвойствОбъектов.Объект = &Объект
		 |	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		 Запрос.УстановитьПараметр("Объект", Контрагент);
		 Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90219") );
		 Результат = Запрос.Выполнить();
		 Набор = Результат.Выгрузить();
		 //========================================================================
		 
		Если Набор.Количество()>0 Тогда
			ВремыВыгрузки = набор[0].значение;
		иначе
			ВремыВыгрузки = "";
		КонецЕсли;
		Адрес = стрЗаменить(Адрес, "адрес доставки: ",""); //16.02.2017
		ОбластьМакета.Параметры.АдресТелефон = сокрЛП(Адрес); // +++ 30.04.2015
		ОбластьМакета.Параметры.НомерСтроки = строка(очередь);

		//+++ 30.04.2015
		//Не печатаем очередь без реализации если есть проведенные реализации!
		ВсеЗаказыКлиентаБезРеализаций =  (СтрЧислоВхождений( номерНакл, "заказ") = СтрЧислоВхождений( номерНакл, ",")+1);
		Если ИсключатьСтрокиБезРеализаций 
				и Найти(номерНакл,"заказ")>0 
				и ВсеЗаказыКлиентаБезРеализаций тогда
			сообщить("");
			Очередь = Очередь+1; // 20.02.2017
			продолжить;
		КонецЕсли;	
		Областьмакета.Параметры.ВремяПрибытия = Формат(табл1[очередь-1].ПланВремя,"ДФ='dd MMM HH:mm'; ДП=-");
		//---Шарафутдинов 02.02.2018

		//-----------------------------------------------
		коммент1 = коммент+?(стр.Заказ.НеОтгружатьБезОплаты,"БЕЗ ОПЛАТЫ ТОВАР НЕ ОТДАВАТЬ! ","")
		+?(стр.Заказ.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс и Найти(коммент,"БЕЗ ДОВЕРЕННОСТИ ТОВАР НЕ ОТДАВАТЬ!")=0,"БЕЗ ДОВЕРЕННОСТИ ТОВАР НЕ ОТДАВАТЬ! ","")
		+?(ВремыВыгрузки<>"","выгрузка "+ВремыВыгрузки,"");
		//+++ 15.11.2018 ---
		если стрДлина(коммент1)>200 
			и (сумматовар=0 и СуммаТоварП=0 и Доставка=0 и Крышки=0) 
			тогда // все поля должны быть пустыми!
			ЗаполнитьЗначенияСвойств( ОбластьМакета1.Параметры, ОбластьМакета.Параметры );
			ОбластьМакета1.Параметры.Комментарий = коммент1;
			ТабДокумент.Вывести(ОбластьМакета1);
		иначе //--- 99,9% по-старому--------------
			ОбластьМакета.Параметры.Комментарий = коммент1;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	
		ДоставкаНалИтого = ДоставкаНалИтого + Доставка;
		СуммаТоварИтого  = СуммаТоварИтого   + СуммаТовар;
		СуммаТоварПИтого = СуммаТоварПИтого   + СуммаТоварП;
		ИтогоИтого = ИтогоИтого + сумматовар+СумматоварП+Доставка;
		
		очередь = очередь+1;
	конецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.параметры.СуммаТоварИтого   = формат(СуммаТоварИтого,"ЧДЦ=0; ЧН=-")+"р.";
	ОбластьМакета.параметры.ДоставкаНалИтого  = формат(ДоставкаНалИтого,"ЧДЦ=2; ЧН=-")+"р.";
	ОбластьМакета.параметры.СуммаТоварПИтого   = формат(СуммаТоварПИтого,"ЧДЦ=0; ЧН=-")+"р.";
	ОбластьМакета.параметры.ИтогоИтого   = формат(ИтогоИтого,"ЧДЦ=0; ЧН=-")+"р.";
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию("руб.");
	СуммаДоставкиПрописью = ЧислоПрописью(ИтогоИтого, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	если ИтогоИтого>0 тогда
		ОбластьМакета.Параметры.Доставка = "ТРЕБУЕТСЯ ПОЛУЧИТЬ: "+формат(ИтогоИтого,"ЧДЦ=2")+"р. ("+СуммаДоставкиПрописью+")";
	иначе
		ОбластьМакета.Параметры.Доставка = "Сумма за Товар и Доставку - оплачивается клиентом по без/нал. расчету.";
	КонецЕсли;	
    ТабДокумент.Вывести(ОбластьМакета);
	Если СсылкаНаОбъект.Обратки.Количество()>0 Тогда
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОбратки");
    ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОбратки");
	Для каждого стр из СсылкаНаОбъект.Обратки Цикл
	Областьмакета.Параметры.Номерстроки = стр.НомерСтроки;
	Областьмакета.Параметры.номер = ?(ЗначениеЗаполнено(стр.ДокументОснование),стр.ДокументОснование.Номер,"");
	Областьмакета.Параметры.контрагент = стр.Контрагент0;
	областьмакета.Параметры.адресТелефон = стр.Адрес;
	
	// 01.07.2016 обрабатываем ошибку и выдаём рекомендации !!!
	//областьМакета.Параметры.менеджер = ?(ЗначениеЗаполнено(стр.ДокументОснование),стр.ДокументОснование.Товары[0].Реализация.ДоговорКонтрагента.ОтветственноеЛицо,"");
	Если ЗначениеЗаполнено(стр.ДокументОснование) и ТипЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") тогда 
		Если ЗначениеНеЗаполнено(стр.ДокументОснование.Товары[0].Реализация) тогда
			#Если Клиент тогда
				Предупреждение("Не указана реализация в документе ""обратки"":
				|"+строка(стр.ДокументОснование), 60 );
			#КонецЕсли				
			// нельзя печатать заявку на обратку...
			областьМакета.Параметры.менеджер = "";
			
		ИначеЕсли стр.ДокументОснование.Товары.Количество()=0 тогда
			#Если Клиент тогда
				Предупреждение("Не заполнена таблица 'Товары' в документе ""обратки"": 
				|"+строка(стр.ДокументОснование), 60 );
			#КонецЕсли				
			областьМакета.Параметры.менеджер = "";
		Иначеесли ТипЗнч(стр.ДокументОснование.Товары[0].Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг")	тогда
			областьМакета.Параметры.менеджер = стр.ДокументОснование.Товары[0].Реализация.ДоговорКонтрагента.ОтветственноеЛицо;
		ИначеЕсли ТипЗнч(стр.ДокументОснование.Товары[0].Реализация) = Тип("ДокументСсылка.ПеремещениеТоваров") тогда
			Получатель = стр.ДокументОснование.Товары[0].Реализация.СкладПолучатель;
			Если ЗначениеЗаполнено(Получатель) тогда //найдем договор по отх
				НаборЗаписей = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Склад.Установить(Получатель);
				НаборЗаписей.Прочитать();
				Если НаборЗаписей.Количество()>0 тогда
					Договор = НаборЗаписей[0].ДоговорПродажи;
				иначе
					Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
			областьМакета.Параметры.менеджер = Договор.ОтветственноеЛицо;
			Сообщить(Договор);
		КонецЕсли;
	Иначе	
		областьМакета.Параметры.менеджер = "";
		ОбластьМакета.Параметры.Комментарий  = стр.Комментарий;
	КонецЕсли;
	
	
	Если типЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") и стр.ДокументОснование <> Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка()и ТипЗнч(стр.ДокументОснование.Товары[0].Реализация) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Договор = стр.ДокументОснование.Товары[0].Реализация.ДоговорКонтрагента;
	ИначеЕсли типЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") и стр.ДокументОснование <> Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка()и ТипЗнч(стр.ДокументОснование.Товары[0].Реализация) = Тип("ДокументСсылка.ПеремещениеТоваров") тогда
		Получатель = стр.ДокументОснование.Товары[0].Реализация.СкладПолучатель;
		Если ЗначениеЗаполнено(Получатель) тогда //найдем договор по отх
			 НаборЗаписей = РегистрыСведений.СоответствиеКонтрагентовСкладамФРан.СоздатьНаборЗаписей();
             НаборЗаписей.Отбор.Склад.Установить(Получатель);
             НаборЗаписей.Прочитать();
			 Если НаборЗаписей.Количество()>0 тогда
				 Договор = НаборЗаписей[0].ДоговорПродажи;
			 иначе
				 Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			 КонецЕсли;
		КонецЕсли;
	иначе
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Сообщить(Договор);
	//ОбластьМакета.Параметры.Комментарий  = "Забрать возврат по заявке."+?(Найти(стр.ДокументОснование.Товары[0].Реализация.ДоговорКонтрагента.Наименование,"*")<>0,"Без документов.","");
	ОбластьМакета.Параметры.Комментарий  = "Забрать возврат по заявке."+?(Найти(Договор.Наименование,"*")<>0,"Без документов.","");
	
	//Иначе
	//	ОбластьМакета.Параметры.Комментарий  = стр.Комментарий;
	//конецЕсли;
	
    ТабДокумент.Вывести(ОбластьМакета);
	конецЦикла;
	конецЕсли;
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
    ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Табдокумент.АвтоМасштаб = Истина;
	
	имя = "ТТН для заявок";
	имяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя); 
	ИмяФайла = КаталогВременныхФайлов()+"PrnFormTTN.tmp";
	ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
	Если ОбъектВнешнейФормы = Неопределено Тогда
		Сообщить("Ошибка получения внешней печ.формы '"+имя+"'. Возможно форма была удалена или переименована.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	формаОбработки = Обработка.получитьФорму();

	
	  Для каждого стр из СсылкаНаОбъект.Обратки Цикл
	Если ТипЗнч(стр.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") и стр.ДокументОснование<>Документы.ЗаявкаНаВозвратТоваров.ПустаяСсылка() Тогда 
		Стр.ДокументОснование.ПолучитьОбъект().печать();
		Обработка.СсылкаНаОбъект  = СсылкаНаОбъект;
		Обработка.заявка = Стр.ДокументОснование;
		формаОбработки.ЗаполнитьДанныеПоДокументу();
		ТабТТН = Обработка.Печать(ложь,"");
		НапечататьДокумент(ТабТТН, 1, ложь,  );

	конецЕсли;	
конецЦикла;


     ////////////////////

	 ОбъектВнешнейФормы = Справочники.ВнешниеОбработки.НайтиПоКоду(487).ПолучитьОбъект();
	 ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
	 
	 ИмяФайла = КаталогВременныхФайлов()+"Акт передачи "+СсылкаНаОбъект.номер+".xls";
	 ДвоичныеДанные.Записать(ИмяФайла);
	 
	 СписокФайловВложений = Новый СписокЗначений;
	 
	 Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	 Обработка.СсылкаНаОбъект = СсылкаНаОбъект;
	 ТабличныйДокументОбъект  = Обработка.Печать();
	 НапечататьДокумент(ТабличныйДокументОбъект, 1, ложь,  );
	 //ТабличныйДокументОбъект.Показать();
	 	 	 
	 /////////////////\//

	Возврат ТабДокумент;
	
КонецФункции


Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		возврат "";
	КонецЕсли;	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтактнаяИнформация.Представление,
           	   |	КонтактнаяИнформация.Комментарий,
               |	КонтактнаяИнформация.Вид
               |ИЗ
               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
               |ГДЕ
               |	КонтактнаяИнформация.Объект = &Объект
               |	И КонтактнаяИнформация.Тип = &Тип";

Запрос.УстановитьПараметр("Объект", Об1);
Если тип="Телефон" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	Тип1="Тел: ";
иначеЕсли тип="Другое" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
	Тип1="Доп.инфо: ";
иначеЕсли найти(тип,"доставки")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00021") );    //+++ 30.04.2015
	Тип1="адрес доставки: ";
иначеЕсли найти(тип,"Факт")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Тип1="Факт.адрес: ";
иначеЕсли найти(тип,"Юр")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Тип1="Юр.адрес: ";
КонецЕсли;
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
рез = "";
Если Выборка.Следующий() Тогда
	Если Строка(Выборка.Вид) = "Автомобиль" Тогда
		Тип1="Автомобиль: ";
	КонецЕсли;	
рез = рез + Тип1 +выборка.Представление
+ ?(найти(тип,"доставки")=0, "",  ", "+выборка.Комментарий);//03.02.2016
КонецЕсли;

ПОКА Выборка.Следующий() ЦИКЛ
рез = рез + ", "+выборка.Представление
+ ?(найти(тип,"доставки")=0, "",  ", "+выборка.Комментарий);//03.02.2016
КонецЦикла;

возврат рез;

КонецФункции	


функция ПолучитьВсеТелефоны(ФизЛицо1)
	рез = "";
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтактнаяИнформация.Представление,
	                |	КонтактнаяИнформация.Вид,
	                |	КонтактнаяИнформация.Объект
	                |ПОМЕСТИТЬ Сотовый
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Тип = &Тип
	                |	И КонтактнаяИнформация.Объект = &Объект
	                |	И КонтактнаяИнформация.Вид = &Вид1
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Представление,
	                |	КонтактнаяИнформация.Вид,
	                |	КонтактнаяИнформация.Объект
	                |ПОМЕСТИТЬ Внутренний
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Тип = &Тип
	                |	И КонтактнаяИнформация.Объект = &Объект
	                |	И КонтактнаяИнформация.Вид = &Вид2
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КонтактнаяИнформация.Представление,
	                |	КонтактнаяИнформация.Вид,
	                |	КонтактнаяИнформация.Объект
	                |ПОМЕСТИТЬ Сотовый2
	                |ИЗ
	                |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                |ГДЕ
	                |	КонтактнаяИнформация.Тип = &Тип
	                |	И КонтактнаяИнформация.Объект = &Объект
	                |	И КонтактнаяИнформация.Вид = &Вид3
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Сотовый.Представление КАК Сотовый,
	                |	Внутренний.Представление КАК Внутренний,
	                |	Сотовый2.Представление КАК Помошник
	                |ИЗ
	                |	Сотовый2 КАК Сотовый2
	                |		ПОЛНОЕ СОЕДИНЕНИЕ Внутренний КАК Внутренний
	                |		ПО (ИСТИНА)
	                |		ПОЛНОЕ СОЕДИНЕНИЕ Сотовый КАК Сотовый
	                |		ПО (ИСТИНА)";
	 Запрос.УстановитьПараметр("Вид1", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00022"));
	 Запрос.УстановитьПараметр("Вид3", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00024"));
	 Запрос.УстановитьПараметр("Вид2", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38840"));
	 Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	 Запрос.УстановитьПараметр("Объект", ФизЛицо1); 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	// Рез = Выборка.Сотовый +"; " + " вн. " +Выборка.Внутренний+"; " + + Выборка.Помошник+"; ";
	 Пока Выборка.Следующий() Цикл
	 //рез = рез +?(строка(выборка.Вид)="Внутренний телефон" и СокрЛП(выборка.Представление)<>"","вн.", "")
	 //			+ СокрЛП(выборка.Представление)+"; ";
	 Рез = "" + Выборка.Сотовый +"; " + " вн. " +Выборка.Внутренний+"; " +  Выборка.Помошник+"; ";
	 КонецЦикла;
	
	возврат рез;
 КонецФункции
 
 Функция ЕстьИнфоПоПроезду()
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИнформацияПоПроезду.Задание,
	             |	МИНИМУМ(ИнформацияПоПроезду.НомерОчереди) КАК НомерОчереди,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ИнформацияПоПроезду.Заказ,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)) КАК Адрес,
	             |	ИнформацияПоПроезду.Организация,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаНал) КАК ДоставкаНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаБНал) КАК ДоставкаБНал,
	             |	СУММА(ИнформацияПоПроезду.ДоставкаВЦене) КАК ДоставкаВЦене,
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	             |	СУММА(ИнформацияПоПроезду.Объём) КАК Объём,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
	             |	СУММА(ИнформацияПоПроезду.СуммаЗаТоварНал) КАК СуммаЗаТоварНал,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.НомерСтроки КАК НомерСтроки,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя.ДолгЗаПредыдущиеОтгрузки КАК ДолгЗаПредыдущиеОтгрузки,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация
	             |ИЗ
	             |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	             |		ПО ИнформацияПоПроезду.Задание = ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка
	             |			И ИнформацияПоПроезду.Заказ = ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя
	             |ГДЕ
	             |	ИнформацияПоПроезду.Задание = &Задание
	             |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка = &Задание
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ИнформацияПоПроезду.Организация,
	             |	ИнформацияПоПроезду.Контрагент,
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Адрес КАК СТРОКА(500)),
	             |	ВЫРАЗИТЬ(ИнформацияПоПроезду.Комментарий КАК СТРОКА(1000)),
	             |	ИнформацияПоПроезду.Менеджер,
	             |	ИнформацияПоПроезду.Заказ,
	             |	ИнформацияПоПроезду.ВсеДокументыСданыВБухгалтерию,
	             |	ИнформацияПоПроезду.Задание,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.НомерСтроки,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя.ДолгЗаПредыдущиеОтгрузки,
	             |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НомерОчереди,
	             |	НомерСтроки УБЫВ
	             |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Задание",СсылкаНаОбъект.Ссылка);
	Рез=Запрос.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции
