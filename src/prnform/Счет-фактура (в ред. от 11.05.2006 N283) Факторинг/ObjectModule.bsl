Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда

// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ СЧЕТА-ФАКТУРЫ ВЫДАННОГО
//

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрокВыданный()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

// Функция собирает данные по Организации и 
// в том случае если организация является физлицом, возвращает
// ФИО предпринимателя, иначе возвращвется пустая строка
// 
Функция ПолучитьФИОПредпринимателя(Организация, ДатаСреза, ЮрФизЛицо)
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда

		ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = "
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК ФИОПолное
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних";
		
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФИОПолное;
		КонецЕсли;

	КонецЕсли;
	
	Возврат "";
	
КонецФункции
	
// Функция собирает данные по документу основанию ОтчетаКомитенту и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомитентуОПродажах()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Организация   КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	Контрагент    КАК Грузополучатель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	//|	Организация.ОГРН   		КАК ОГРН,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СсылкаНаОбъект.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СсылкаНаОбъект.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);
	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, СсылкаНаОбъект.Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	ТекстПБОЮЛ = ПолучитьФИОПредпринимателя(Шапка.Организация, СсылкаНаОбъект.Дата, Шапка.ЮрФизЛицо);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ТекстПБОЮЛ);
	
	Если Не ЗначениеНеЗаполнено(ТекстПБОЮЛ) Тогда
		// Если это ИЧП
		//ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "ОГРНИП: 76 №000422217 от 29.03.2004");
		ДанныеДляПечати.Вставить("Свидетельство", "ОГРНИП: 76 №000422217 от 29.03.2004");
	Иначе
		ДанныеДляПечати.Вставить("Свидетельство", "");
	КонецЕсли;
	
	Товары = ИнициализацияТаблицыСтрокВыданный();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС = Шапка.СтавкаНДС;
		СуммаДляПечати    = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаНДС  = РассчитатьСуммуНДС(СуммаДляПечати, Истина, Истина, ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.Сумма     = СуммаДляПечати;
		Строчка.Цена      = 0;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомитентуОПродажах()

// Функция собирает данные по документу основанию ОтчетаКомисиионера и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетКомиссионераОПродажах()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Организация   КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	//|	Организация.ОГРН   		КАК ОГРН,
	|	Контрагент    КАК Покупатель,
	|	Контрагент    КАК Грузополучатель,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	СуммаДокумента          КАК Сумма,
	|	ВалютаДокумента         КАК Валюта,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура КАК Товар,
	|		ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|		СерияНоменклатуры.СтранаПроисхождения                    КАК СтранаПроисхождения,
	|		СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|		СерияНоменклатуры.НомерГТД                               КАК НомерГТД,
	|		СерияНоменклатуры.НомерГТД.Представление                 КАК ПредставлениеГТД,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СсылкаНаОбъект.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СсылкаНаОбъект.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, СсылкаНаОбъект.Дата,);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	ТекстПБОЮЛ = ПолучитьФИОПредпринимателя(Шапка.Организация, СсылкаНаОбъект.Дата, Шапка.ЮрФизЛицо);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ТекстПБОЮЛ);
	
	Если Не ЗначениеНеЗаполнено(ТекстПБОЮЛ) Тогда
		// Если это ИЧП
		ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "ОГРНИП: 76 №000422217 от 29.03.2004");
		ДанныеДляПечати.Вставить("Свидетельство", "ОГРНИП: 76 №000422217 от 29.03.2004");
	Иначе
		ДанныеДляПечати.Вставить("Свидетельство", "");
	КонецЕсли;
	
	Товары = ИнициализацияТаблицыСтрокВыданный();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		//Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование, ВыборкаСтрокТовары.ПредставлениеСтраны);
		//Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		//Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = (ВыборкаСтрокТовары.Сумма - ВыборкаСтрокТовары.СуммаНДС) / ВыборкаСтрокТовары.Количество;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

// Функция собирает данные по документу основанию реализации и возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоРеализацияТоваровУслуг()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организация,
	|	Организация                       КАК Поставщик,
	|	Грузоотправитель                  КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо             КАК ЮрФизЛицо,
	//|	Организация.ОГРН                  КАК ОГРН,
	|	Контрагент                        КАК Покупатель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента                    КАК Сумма,
	|	ВалютаДокумента                   КАК Валюта,
	|	УчитыватьНДС                      КАК УчитыватьНДС,
	|	СуммаВключаетНДС                  КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ (Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ХарактеристикаНоменклатуры                                  КАК Характеристика,
	|	СерияНоменклатуры                                           КАК Серия,
	|	СерияНоменклатуры.СтранаПроисхождения                       КАК СтранаПроисхождения,
	|	СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное    КАК ПредставлениеСтраны,
	|	ЕдиницаИзмерения.Представление                              КАК ЕдиницаИзмерения,
	|	СерияНоменклатуры.НомерГТД                                  КАК НомерГТД,
	|	СерияНоменклатуры.НомерГТД.Представление                    КАК ПредставлениеГТД,
	|	Количество                                                  КАК Количество,
	|	Цена                                                        КАК Цена,
	|	СтавкаНДС                                                   КАК СтавкаНДС,
	|	СуммаНДС                                                    КАК СуммаНДС,
	|	Сумма                                                       КАК Сумма,
	|	НомерСтроки                                                 КАК НомерСтроки,
	|	1                                                           КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура КАК Товар,
	|	Содержание   КАК ТоварНаименование,
	|	NULL         КАК Характеристика,
	|	NULL         КАК Серия,
	|	NULL         КАК СтранаПроисхождения,
	|	""""         КАК ПредставлениеСтраны,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL         КАК НомерГТД,
	|	""""         КАК ПредставлениеГТД,
	|	Количество   КАК Количество,
	|	Цена         КАК Цена,
	|	СтавкаНДС    КАК СтавкаНДС,
	|	СуммаНДС     КАК СуммаНДС,
	|	Сумма        КАК Сумма,
	|	НомерСтроки  КАК НомерСтроки,
	|	2            КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СсылкаНаОбъект.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СсылкаНаОбъект.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", ?(Шапка.Грузоотправитель=Справочники.Контрагенты.ПустаяСсылка(),Шапка.Организация,Шапка.Грузоотправитель));
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, СсылкаНаОбъект.Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	//Сообщить(Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	ТекстПБОЮЛ = ПолучитьФИОПредпринимателя(Шапка.Организация, СсылкаНаОбъект.Дата, Шапка.ЮрФизЛицо);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ТекстПБОЮЛ);
	
	Если Не ЗначениеНеЗаполнено(ТекстПБОЮЛ) Тогда
		// Если это ИЧП
		//ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "ОГРНИП: 76 №000422217 от 29.03.2004");
		ДанныеДляПечати.Вставить("Свидетельство", "ОГРНИП: 76 №000422217 от 29.03.2004");
	Иначе
		ДанныеДляПечати.Вставить("Свидетельство", "");
	КонецЕсли;

	Товары = ИнициализацияТаблицыСтрокВыданный();

	ТолькоУслуги = Истина;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		//Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование, ВыборкаСтрокТовары.ПредставлениеСтраны);
		//Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		//Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		
		Если ВыборкаСтрокТовары.Метка = 1 Тогда
			// Если есть хотя бы одна строка из табличной части "Товары" - значит не только услуги
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   ТолькоУслуги);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

// Функция собирает данные по документу основанию ОтражениеРеализацииТоваровИУслуг возвращает типизированную 
// структуру с данными
// 
Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()


	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация КАК Поставщик,
	|	Организация КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо   КАК ЮрФизЛицо,
	//|	Организация.ОГРН   		КАК ОГРН,
	|	Контрагент  КАК Покупатель,
	|	Контрагент  КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
					|	"""" КАК СтранаПроисхождения,
					|	"""" КАК ПредставлениеСтраны,
					|	"""" КАК НомерГТД,
					|	"""" КАК ПредставлениеГТД,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.ЕдиницаИзмерения,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.ЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма
					|ИЗ
					|	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги

					|ГДЕ
					|	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование

					|УПОРЯДОЧИТЬ ПО
					|	Товар";
						
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СсылкаНаОбъект.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СсылкаНаОбъект.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Ложь);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, СсылкаНаОбъект.Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	ТекстПБОЮЛ = ПолучитьФИОПредпринимателя(Шапка.Организация, СсылкаНаОбъект.Дата, Шапка.ЮрФизЛицо);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ТекстПБОЮЛ);
	
	Если Не ЗначениеНеЗаполнено(ТекстПБОЮЛ) Тогда
		// Если это ИЧП
		//ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "ОГРНИП: 76 №000422217 от 29.03.2004");
		ДанныеДляПечати.Вставить("Свидетельство", "ОГРНИП: 76 №000422217 от 29.03.2004");
	Иначе
		ДанныеДляПечати.Вставить("Свидетельство", "");
	КонецЕсли;
	
	Товары = ИнициализацияТаблицыСтрокВыданный();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = ВыборкаСтрокТовары.ТоварНаименование;
		//Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.Товар.СтранаПроисхождения.Наименование, ВыборкаСтрокТовары.ПредставлениеСтраны);
		//Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		//Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.Товар.НомерГТД.Код;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачеОС()

// Функция собирает данные по текущему документу в случае, если это СФ на аванс
// 
Функция СобратьДанныеСФнаАванс()
    Если не СсылкаНаОбъект.НаАванс Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Организация КАК Грузоотправитель,
	|	СчетФактураВыданный.Организация.ЮрФизЛицо КАК ЮрФизЛицо,
	|	СчетФактураВыданный.Организация.ОГРН КАК ОГРН,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.Контрагент КАК Грузополучатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Организация, СсылкаНаОбъект.Дата,);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	ТекстПБОЮЛ = ПолучитьФИОПредпринимателя(Шапка.Организация, СсылкаНаОбъект.Дата, Шапка.ЮрФизЛицо);
	ДанныеДляПечати.Вставить("ФИОПБОЮЛ", 			  ТекстПБОЮЛ);
	
	Если Не ЗначениеНеЗаполнено(ТекстПБОЮЛ) Тогда
		// Если это ИЧП
		//ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "");
		ДанныеДляПечати.Вставить("Свидетельство", "");
	Иначе
		//ДанныеДляПечати.Вставить("РеквизитыСвидетельства", "");
		ДанныеДляПечати.Вставить("Свидетельство", "");
	КонецЕсли;

	Товары = ИнициализацияТаблицыСтрокВыданный();

	Строчка = Товары.Добавить();
	Строчка.Товар               = "Предварительный платеж";
	Строчка.ТоварНаименование   = "Предварительный платеж";
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 0;
	Строчка.ЕдиницаИзмерения    = "";

	Строчка.СтавкаНДС = СсылкаНаОбъект.СтавкаНДС;
	Строчка.СуммаНДС  = СсылкаНаОбъект.СуммаНДС;
	Строчка.Сумма     = СсылкаНаОбъект.Сумма;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоСВП()
 
// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляВыданный(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли ЗначениеНеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоляПолученный()

// Функция создает табличный документ ун. формы счета-фактуры
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьСчетаФактурыВыданный(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураВыданный_СчетФактура283";
	Макет = ПолучитьМакет("СчетФактура283");

	СведенияОГрузоотправителе = СведенияОЮрФизЛице(ДанныеДляПечати.Грузоотправитель, СсылкаНаОбъект.Дата);
	СведенияОбПокупателе = СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, СсылкаНаОбъект.Дата);
	СведенияОГрузополучателе = СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, СсылкаНаОбъект.Дата);
	СведенияОПоставщике  = СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, СсылкаНаОбъект.Дата);

	// Выводим шапку накладной
	Если ДанныеДляПечати.Свойство("ТолькоУслуги") = Истина Тогда
		ТолькоУслуги = ДанныеДляПечати.ТолькоУслуги;
	Иначе
		ТолькоУслуги = Ложь;
	КонецЕсли;
		
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                         + ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                            + ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                 + ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
	ТекстГрузоотправителя = ОписаниеОрганизации(СведенияОГрузоотправителе,  "ПолноеНаименование,ФактическийАдрес,");
		
	Если Не ЗначениеНеЗаполнено(ТекстГрузоотправителя) или ТолькоУслуги Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "     + ТекстГрузоотправителя;
	Иначе	
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "     + "он же";
	КонецЕсли;
		
	ТекстГрузополучателя = ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес,");
		
	Если Не ЗначениеНеЗаполнено(ТекстГрузополучателя) или ТолькоУслуги Тогда
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "      + ТекстГрузополучателя;
	Иначе	
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "      + "он же";
	КонецЕсли;
			
	ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу № " + СсылкаНаОбъект.НомерПлатежноРасчетногоДокумента + " от " + Формат(СсылкаНаОбъект.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                       + ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                            + ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	КПП = ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "               + ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	
	ПроставитьПрочеркиВПустыеПоляВыданный(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = "----";
		КонецЕсли; 

		СуммаСНДС = Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Количество  = Строчка.Количество;
		СуммаНДСТаб = Строчка.СуммаНДС;
		Если (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
		 или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
		 или (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			СуммаБезНДС = СуммаСНДС;
		Иначе
			СуммаБезНДС = СуммаСНДС - СуммаНДСТаб;
		КонецЕсли;

		ОбластьМакета.Параметры.Количество = Количество;
		ОбластьМакета.Параметры.Цена       = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		
		Если СсылкаНаОбъект.НаАванс Тогда
			// В счетах фактурах на аванс колонка 5 не выводится
			ОбластьМакета.Параметры.Стоимость  = 0;
		Иначе
			ОбластьМакета.Параметры.Стоимость  = СуммаБезНДС;
		КонецЕсли;	
			
		ОбластьМакета.Параметры.СуммаНДС   = СуммаНДСТаб;
		ОбластьМакета.Параметры.Всего      = СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДСТаб;
		ИтогоВсего    = ИтогоВсего    + СуммаСНДС;

		ПроставитьПрочеркиВПустыеПоляВыданный(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоляВыданный(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

Функция ПолучитьТабличныйДокументСФВыданный() Экспорт

	// Получить экземпляр документа на печать
	ТипОснования = ТипЗнч(СсылкаНаОбъект.ДокументОснование);
	Если СсылкаНаОбъект.НаАванс Тогда
		ДанныеДляПечати    = СобратьДанныеСФнаАванс();
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ДанныеДляПечати    = СобратьДанныеПоОтчетКомитентуОПродажах();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ДанныеДляПечати    = СобратьДанныеПоОтчетКомиссионераОПродажах();
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ДанныеДляПечати    = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг();
	КонецЕсли;

	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Или ДанныеДляПечати = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;

	ТабДокумент = ПечатьСчетаФактурыВыданный(ДанныеДляПечати);
	Возврат ТабДокумент;

КонецФункции

// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ СЧЕТА-ФАКТУРЫ ПОЛУЧЕННОГО
//

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("СтавкаНП");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

// Функция собирает данные по документу основанию ОтчетКомиссионераОПродажах и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоОтчетОПродажахКомиссионера()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.УстановитьПараметр("Курс",      СсылкаНаОбъект.ДокументОснование.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность", СсылкаНаОбъект.ДокументОснование.КратностьВзаиморасчетов);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Покупатель,
	|	Организация   КАК Грузополучатель,
	|	Контрагент    КАК Поставщик,
	|	Контрагент    КАК Грузоотправитель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	СуммаВключаетНДС,
	|	УчитыватьНДС,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &Документ";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 1;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		СуммаНДС                    = РассчитатьСуммуНДС(ВыборкаСтрокТовары.Сумма, Шапка.УчитыватьНДС, Шапка.СуммаВключаетНДС, ПолучитьСтавкуНДС(Шапка.СтавкаНДС));
		Строчка.СуммаНДС            = СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		Строчка.Цена                = ВыборкаСтрокТовары.Сумма - СуммаНДС;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетОПродажахКомиссионера()

// Функция собирает данные по документу основанию Поступление и 
// структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваров()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            СсылкаНаОбъект.ДокументОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       СсылкаНаОбъект.ДокументОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.ДокументОснование.Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	1 КАК НомерТабличнойЧасти,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.Товар.НаименованиеПолное       КАК ТоварНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.СтранаПроисхождения,
	|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.НомерГТД.Представление         КАК ПредставлениеГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоТоварам.НомерСтроки							КАК НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура							КАК Товар,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры             КАК Характеристика,
	|		ТаблицаПоТоварам.СерияНоменклатуры                      КАК Серия,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения  КАК СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД             КАК НомерГТД,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения						КАК ЕдиницаИзмерения,
	|		СУММА(ТаблицаПоТоварам.Количество)   					КАК Количество,
	|		ТаблицаПоТоварам.Цена                КАК Цена,
	|		ТаблицаПоТоварам.Сумма               КАК Сумма,
	|		ТаблицаПоТоварам.СуммаНДС            КАК СуммаНДС,
	|		ТаблицаПоТоварам.СтавкаНДС           КАК СтавкаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаПоТоварам
	|	
	|	ГДЕ
	|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоТоварам.НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|		ТаблицаПоТоварам.СерияНоменклатуры,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения,
	|		ТаблицаПоТоварам.СтавкаНДС,
	|		ТаблицаПоТоварам.Цена,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|		ТаблицаПоТоварам.Сумма,
	|		ТаблицаПоТоварам.СуммаНДС) КАК ВложенныйЗапрос

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	2,
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Содержание,
	|	ТаблицаПоУслугам.Содержание,
	|	"""",
	|	"""",
	|	""Россия"",
	|	""Россия"",
	|	""--"",
	|	""--"",
	|	""шт"",
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ТаблицаПоУслугам

	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();
	
	ЕстьТовары = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.НомерТабличнойЧасти = 1 Тогда
			ЕстьТовары = Истина;
		КонецЕсли;
		
		Строчка = Товары.Добавить();

		Если НЕ ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		КонецЕсли;

		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваров()

// Функция собирает данные по документу основанию Поступление товаров и услуг в НТТ 
// и возвращает структуру с данными
// 
Функция СобратьДанныеПоПоступлениюТоваровУслугВНТТ()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация           КАК Покупатель,
	|	Организация           КАК Грузополучатель,
	|	Контрагент            КАК Поставщик,
	|	Контрагент            КАК Грузоотправитель,
	|	СуммаДокумента        КАК Сумма,
	|	ВалютаДокумента       КАК Валюта,
	|	УчитыватьНДС          КАК УчитыватьНДС,
	|	СуммаВключаетНДС      КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку КАК ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку
	|
	|ГДЕ
	|	ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Курс",            СсылкаНаОбъект.ДокументОснование.КурсВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("Кратность",       СсылкаНаОбъект.ДокументОснование.КратностьВзаиморасчетов);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.ДокументОснование.Ссылка);
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	1 КАК НомерТабличнойЧасти,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Товар,
	|	ВложенныйЗапрос.Товар.НаименованиеПолное       КАК ТоварНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.СтранаПроисхождения,
	|	ВложенныйЗапрос.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.НомерГТД.Представление         КАК ПредставлениеГТД,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоТоварам.НомерСтроки							КАК НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура							КАК Товар,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры             КАК Характеристика,
	|		ТаблицаПоТоварам.СерияНоменклатуры                      КАК Серия,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения  КАК СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД             КАК НомерГТД,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения						КАК ЕдиницаИзмерения,
	|		СУММА(ТаблицаПоТоварам.Количество)   					КАК Количество,
	|		ТаблицаПоТоварам.Цена                КАК Цена,
	|		ТаблицаПоТоварам.Сумма               КАК Сумма,
	|		ТаблицаПоТоварам.СуммаНДС            КАК СуммаНДС,
	|		ТаблицаПоТоварам.СтавкаНДС           КАК СтавкаНДС
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Товары КАК ТаблицаПоТоварам
	|	
	|	ГДЕ
	|		ТаблицаПоТоварам.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоТоварам.НомерСтроки,
	|		ТаблицаПоТоварам.Номенклатура,
	|		ТаблицаПоТоварам.ХарактеристикаНоменклатуры,
	|		ТаблицаПоТоварам.СерияНоменклатуры,
	|		ТаблицаПоТоварам.ЕдиницаИзмерения,
	|		ТаблицаПоТоварам.СтавкаНДС,
	|		ТаблицаПоТоварам.Цена,
	|		ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения,
	|		ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД,
	|		ТаблицаПоТоварам.Сумма,
	|		ТаблицаПоТоварам.СуммаНДС) КАК ВложенныйЗапрос

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	2,
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Содержание,
	|	ТаблицаПоУслугам.Содержание,
	|	"""",
	|	"""",
	|	""Россия"",
	|	""Россия"",
	|	""--"",
	|	""--"",
	|	""шт"",
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку.Услуги КАК ТаблицаПоУслугам

	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти";

	Шапка              = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Если ВыборкаСтрокТовары.НомерТабличнойЧасти = 1 Тогда
			ЕстьТовары = Истина;
		КонецЕсли;
		
		Строчка = Товары.Добавить();

		Если НЕ ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Товар) Тогда
			Строчка.Товар               = ВыборкаСтрокТовары.Товар;
			Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ПредставлениеСерий(ВыборкаСтрокТовары);
		КонецЕсли;

		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПоступлениюТоваровУслугВНТТ()

// Функция собирает данные по документу основанию Поступление Доп. расходов и
// структуру с данными
// 
Функция СобратьДанныеДопРасходам()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект.ДокументОснование.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Организация,
	|	Организация      КАК Покупатель,
	|	Организация      КАК Грузополучатель,
	|	Контрагент       КАК Поставщик,
	|	Контрагент       КАК Грузоотправитель,
	|	Содержание       КАК СтатьяЗатрат,
	|	ВалютаДокумента  КАК Валюта,
	|	СуммаДокумента   КАК СуммаДокумента,
	|	СуммаНДС         КАК СуммаНДС,
	|	СтавкаНДС,
	|	УчитыватьНДС     КАК УчитыватьНДС,
	|	СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВложенныйЗапрос.СуммаДенег
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма) КАК СуммаДенег
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ДокументОснование) КАК ВложенныйЗапрос,
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ДокументОснование
	|";

	Шапка = Запрос.Выполнить().Выбрать();

	Шапка.Следующий();
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.НомерВходящегоДокумента);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.ДатаВходящегоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	//ДанныеДляПечати.Вставить("ФИОРуководителя",       );
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", );

	Товары = ИнициализацияТаблицыСтрок();

	Строчка = Товары.Добавить();
	Строчка.Товар               = Шапка.СтатьяЗатрат;
	Строчка.ТоварНаименование   = Шапка.СтатьяЗатрат;
	Строчка.СтранаПроисхождения = "";
	Строчка.ПредставлениеСтраны = "";
	Строчка.НомерГТД            = "";
	Строчка.ПредставлениеГТД    = "";
	Строчка.Количество          = 1;
	Строчка.ЕдиницаИзмерения    = "";
	СуммаДока         = Шапка.СуммаДокумента + 
	                    ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	Строчка.СтавкаНДС = Шапка.СтавкаНДС;
	Строчка.СуммаНДС  = Шапка.СуммаНДС;
	Строчка.Сумма     = Шапка.СуммаДокумента;
	Строчка.Цена      = Шапка.СуммаДокумента;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДопРасходам()

// Проверяет правильность заполнения шапки документа.
// проставляет прочерки в незаполненных полях печатной формы счета-фактуры
//
Процедура ПроставитьПрочеркиВПустыеПоляПолученный(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (Найти(ТекПараметр, "Продавец:") <> 0)
		   и (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			    и (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
		   		и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (Найти(ТекПараметр, "Покупатель:") <> 0)
		   		и (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: ----");
			
		ИначеЕсли (Найти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			    и (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): ----");
			
		ИначеЕсли ЗначениеНеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоляПолученный()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьСчетаФактурыПолученный(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактураПолученный_СчетФактура283";
	Макет = ПолучитьМакет("СчетФактура283");
	
	Если ДанныеДляПечати.Покупатель = Null Тогда
		Сообщить("В документе основании не указано юр./физ. лицо у организации.");
		Возврат Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Поставщик = Неопределено Тогда
		Сообщить("В документе основании не указано юр./физ. лицо контрагента.");
		Возврат Неопределено;
	КонецЕсли;

	СведенияОбПокупателе = СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, СсылкаНаОбъект.Дата);
	СведенияОПоставщике  = СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, СсылкаНаОбъект.Дата);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.Номер = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура");
	ОбластьМакета.Параметры.ПредставлениеПоставщика       = "Продавец: "                               + ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПоставщика               = "Адрес: "                                  + ОписаниеОрганизации(СведенияОПоставщике,  "ЮридическийАдрес,");
	КПП = ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННпоставщика                 = "ИНН/КПП продавца: "                       + ОписаниеОрганизации(СведенияОПоставщике,  "ИНН,", Ложь) + КПП;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: "           + ?(ЗначениеНеЗаполнено(ДанныеДляПечати.Грузоотправитель), "", ОписаниеОрганизации(СведенияОПоставщике,  "ПолноеНаименование,ФактическийАдрес,"));
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: "            + ?(ЗначениеНеЗаполнено(ДанныеДляПечати.Грузополучатель), "", ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,ФактическийАдрес,"));
	ОбластьМакета.Параметры.ПоДокументу                   = "К платежно-расчетному документу №  от: ";
	ОбластьМакета.Параметры.ПредставлениеПокупателя       = "Покупатель: "                             + ОписаниеОрганизации(СведенияОбПокупателе, "ПолноеНаименование,");
	ОбластьМакета.Параметры.АдресПокупателя               = "Адрес: "                                  + ОписаниеОрганизации(СведенияОбПокупателе, "ЮридическийАдрес,");
	КПП = ОписаниеОрганизации(СведенияОбПокупателе, "КПП,", Ложь);
	Если НЕ ЗначениеНеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	ОбластьМакета.Параметры.ИННПокупателя                 = "ИНН/КПП покупателя: "                     + ОписаниеОрганизации(СведенияОбПокупателе, "ИНН,", Ложь) + КПП;
	
	ПроставитьПрочеркиВПустыеПоляПолученный(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСуммаНДС = 0;
	ИтогоВсего    = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" Тогда
			ОбластьМакета.Параметры.ПредставлениеСтраны  = " ---- ";
		КонецЕсли; 

		СуммаСНДС = Строчка.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, Строчка.СуммаНДС);

		Количество  = Строчка.Количество;
		СуммаНДС    = Строчка.СуммаНДС;
		СуммаБезНДС = СуммаСНДС - СуммаНДС;

		ОбластьМакета.Параметры.Количество = Количество;
		ОбластьМакета.Параметры.Цена       = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		ОбластьМакета.Параметры.Стоимость  = СуммаБезНДС;
		ОбластьМакета.Параметры.СуммаНДС   = СуммаНДС;
		ОбластьМакета.Параметры.Всего      = СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС  = Строчка.СтавкаНДС;

		ИтогоСуммаНДС = ИтогоСуммаНДС + СуммаНДС;
		ИтогоВсего    = ИтогоВсего    + СуммаСНДС;
		
		ПроставитьПрочеркиВПустыеПоляПолученный(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьМакета.Параметры.ИтогоВсего    = ИтогоВСего;
	
	ПроставитьПрочеркиВПустыеПоляПолученный(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	ПроставитьПрочеркиВПустыеПоляПолученный(ОбластьМакета);
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаФактуры()

Функция ПолучитьТабличныйДокументСФПолученный() Экспорт

	// Получить экземпляр документа на печать
	ТипОснования = ТипЗнч(СсылкаНаОбъект.ДокументОснование);

	Если НЕ ЗначениеНеЗаполнено(СсылкаНаОбъект.ДокументОснование) Тогда
		Если ТипОснования      = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ДанныеДляПечати    = СобратьДанныеПоПоступлениюТоваров();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНеавтоматизированнуюТорговуюТочку") Тогда
			ДанныеДляПечати    = СобратьДанныеПоПоступлениюТоваровУслугВНТТ();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ДанныеДляПечати    = СобратьДанныеПоОтчетОПродажахКомиссионера();
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			ДанныеДляПечати    = СобратьДанныеДопРасходам();
		КонецЕсли;
				
	Иначе
		Предупреждение("Не выбран документ-основание для данного счета-фактуры!");
		Возврат Неопределено;
	КонецЕсли;
			
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Или ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТабДокумент = ПечатьСчетаФактурыПолученный(ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции

Функция Печать() Экспорт
	
	Если Не Метаданные.Имя = "УправлениеТорговлей" Тогда
		Сообщить("Печатная форма предназначена для использования в конфигурации ""Управление торговлей""", СтатусСообщения.Внимание);
	КонецЕсли;
	//Если СсылкаНаОбъект.Дата < '20060527000000' Тогда
	//	Сообщить("Печатная форма счета-фактуры, в редакции постановления Правительства Российской Федерации от 11.05.2006 № 283 вступает в действие с 27.05.2006", СтатусСообщения.Внимание)
	//КонецЕсли;
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат ПолучитьТабличныйДокументСФВыданный();
	Иначе
		Возврат ПолучитьТабличныйДокументСФПолученный();
	КонецЕсли;
	
КонецФункции // Печать

#КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
