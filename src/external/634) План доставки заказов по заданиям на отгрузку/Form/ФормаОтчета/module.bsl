перем ДанныеРасшифровки_1;

Процедура ДействияФормыСформировать(Кнопка)
	
	если (не ЗначениеЗаполнено(дата1) или не ЗначениеЗаполнено(дата2)) и не ЗначениеЗаполнено(ЗаданиеНаОтгрузку) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("дата1",дата1);
	запрос.УстановитьПараметр("дата2",КонецДня(дата2));
	Если ЗначениеЗаполнено(ЗаданиеНаОтгрузку) Тогда
	    запрос.УстановитьПараметр("Задание",ЗаданиеНаОтгрузку);
		запрос.УстановитьПараметр("Одно",Истина);
	Иначе
		запрос.УстановитьПараметр("Задание",ЗаданиеНаОтгрузку);
		запрос.УстановитьПараметр("Одно",Ложь);
	КонецЕсли;
	запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Задание КАК Задание,
	               |	ИнформацияПоПроезду.Контрагент КАК Контрагент,
	               |	ИнформацияПоПроезду.НомерОчереди КАК НомерОчереди,
	               |	СУММА(ИнформацияПоПроезду.Объём) КАК Объем,
	               |	МАКСИМУМ(ИнформацияПоПроезду.Расстояние) КАК Расстояние,
	               |	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1) КАК Выгрузка,
	               |	ИнформацияПоПроезду.Задание.Направление КАК Направление,
	               |	ИнформацияПоПроезду.Задание.ВремяНапоминания КАК ФактическоеВремя
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &одно = ИСТИНА
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ИнформацияПоПроезду.Задание.Дата МЕЖДУ &дата1 И &дата2
	               |		КОНЕЦ
	               |	И ИнформацияПоПроезду.Задание.Проведен = ИСТИНА
	               |	И ТИПЗНАЧЕНИЯ(ИнформацияПоПроезду.Задание) = ТИП(Документ.ЗаданиеНаОтгрузку)
	               |	И ИнформацияПоПроезду.Задание.Выполнено = ИСТИНА
	               |	И ИнформацияПоПроезду.Задание.Номер ПОДОБНО ""%ТК%""
	               |	И ВЫБОР
	               |			КОГДА &одно = ИСТИНА
	               |				ТОГДА ИнформацияПоПроезду.Задание = &задание
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИнформацияПоПроезду.Задание,
	               |	ИнформацияПоПроезду.Контрагент,
	               |	ИнформацияПоПроезду.НомерОчереди,
	               |	ИнформацияПоПроезду.Задание.Направление,
	               |	ИнформацияПоПроезду.Задание.ВремяНапоминания
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Задание,
	               |	НомерОчереди,
	               |	Контрагент";
				   
	
	
	Рез = запрос.Выполнить().Выгрузить();
	
	ИтогРасстояние = рез.Скопировать();
	ИтогРасстояние.Свернуть("Задание");
	
	для каждого стр из ИтогРасстояние Цикл
		
		отбор = Новый Структура;
		отбор.Вставить("Задание",стр.Задание);
		
		ПоЗаданию = Рез.НайтиСтроки(отбор);
		
		проехали = 0;
		
		ДатаВремяПриезда = стр.Задание.ВремяНапоминания;
		
		Для каждого стр11 из ПоЗаданию Цикл
			
			Расстояние = стр11.Расстояние - проехали;
			проехали = стр11.Расстояние;
			
			ВремяПроезда = Расстояние/65;
			
			ДатаВремяПриезда = ДатаВремяПриезда + ВремяПроезда*60*60;
			
			стр11.Выгрузка = ДатаВремяПриезда;
			
			ВремяНаРазгрузку = Стр11.Объем*600;
			
			ДатаВремяПриезда =  ДатаВремяПриезда + ВремяНаРазгрузку;
			
		КонецЦикла;

	КонецЦикла;
	
	
	
	//Связь между таблицей значений и именами в СКД ВнешниеНаборыДанных = Новый Структура;	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("тз", Рез);	
	
	ДанныеРасшифровки_ = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Макет компоновки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки_);
	
	//Компоновка данных 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки_);
	
	//Вывод результата 
	ДокументРезультат=ЭлементыФормы.ПолеТабличногоДокумента1;
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Состояние("Идёт вывод информации по звонкам...");	
	ПроцессорВывода.НачатьВывод();
	
	ДанныеРасшифровки_1 = ДанныеРасшифровки_;
	
	ТаблицаЗафиксирована = Ложь;
	Пока Истина Цикл
		ОбработкаПрерыванияПользователя();
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		Если ЭлементРезультата= Неопределено Тогда
			Прервать;
		Иначе
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			Если Не ТаблицаЗафиксирована
				И ЭлементРезультата.ЗначенияПараметров.Количество() >  0 Тогда
				
				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы - 1;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	Состояние("Идёт группировка...");	
	//ЭлементыФормы.ПолеТабличногоДокумента1.ПоказатьУровеньГруппировокСтрок(3);
	//ЭлементыФормы.ПолеТабличногоДокумента1.ПоказатьУровеньГруппировокСтрок(2);
	//ЭлементыФормы.ПолеТабличногоДокумента1.ПоказатьУровеньГруппировокСтрок(1);
	//ЭлементыФормы.ПолеТабличногоДокумента1.ПоказатьУровеньГруппировокСтрок(0);
	Состояние(" ");	
	
	//
	//Сообщить("Время выполнения: "+(ТекущаяДата()-Начало));


КонецПроцедуры

Процедура ПолеТабличногоДокумента1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	 Перем ВыполненноеДействие;
    СтандартнаяОбработка = Ложь;
    СхемаКомпоновкиДанных = ПолучитьМакет("Макет");

    //Создадим и инициализируем обработчик расшифровки                    
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки_1, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
   																	  
    //ДоступныеДействия = Новый Массив();
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
    //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
    //////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
    ////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
    ////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
    //////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
    //
    ////Добавляем собственные действия 
    //Нов = Новый СписокЗначений;
    //Нов.Добавить("Воспроизвести");

    
   //Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,ноВ);
    
    //Обрабатываем собственные действия 
   //Если ВыполненноеДействие = "Воспроизвести" Тогда
   ЭлементРасшифровкиДанных = ДанныеРасшифровки_1.Элементы[Расшифровка];
   ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
   СсылкаНаЗапись = ЭлементРасшифровкиДанныхПоля.Значение;
   
   ОткрытьЗначение(СсылкаНаЗапись);
КонецПроцедуры
