Перем ОбъектПодключения, РезультатПодключения Экспорт;

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "") Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
		
	Возврат РезультатПодключения;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", Ложь);
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "sigma:2041");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "v82ib_formula_ut");
	СтруктураПодключения.Вставить("Пользователь", "Плотников");
	СтруктураПодключения.Вставить("Пароль", "1234lammer");
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V82");	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Процедура СообщитьОбОшибкеДляПользователю(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Сообщить(СокрЛП(ТекстСообщения), СтатусСообщения.Важное);

КонецПроцедуры


Функция Сформировать() Экспорт
	//Прибыль  ///////////////////////////////////////////////////////////////////////////////////////
	таблВнеш = ПолучитьТаблицуВалИзВнешней();
	
	ЗапросСкрипченко = новый Запрос;
	ЗапросСкрипченко.УстановитьПараметр("табСкрипченко",таблВнеш);
	ЗапросСкрипченко.УстановитьПараметр("ДатаНачала",НачДата);
	ЗапросСкрипченко.УстановитьПараметр("ДатаОкончания",КонецДня(КонДата));
	ЗапросСкрипченко.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоКоду("П017979"));

	ЗапросСкрипченко.Текст="ВЫБРАТЬ
	                       |	табСкрипченко.Точка,
	                       |	табСкрипченко.ВидЗаказа,
	                       |	табСкрипченко.Партнер,
	                       |	табСкрипченко.Номенклатура,
	                       |	табСкрипченко.Стоимость,
	                       |	табСкрипченко.Количество,
	                       |	табСкрипченко.Себестоимость,
	                       |	табСкрипченко.Период
	                       |ПОМЕСТИТЬ втВнеш
	                       |ИЗ
	                       |	&табСкрипченко КАК табСкрипченко
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	втВнеш.Точка КАК Точка,
	                       |	втВнеш.Стоимость КАК Стоимость,
	                       |	втВнеш.Количество КАК Количество,
	                       |	втВнеш.Себестоимость КАК Себестоимость,
	                       |	НоменклатураСпр.Ссылка КАК Номенклатура,
	                       |	НоменклатураСпр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	                       |	НоменклатураСпр.Производитель КАК Производитель,
	                       |	ВЫРАЗИТЬ(ВЫБОР
	                       |			КОГДА втВнеш.Себестоимость <> 0
	                       |				ТОГДА 100 * (втВнеш.Стоимость - втВнеш.Себестоимость) / втВнеш.Себестоимость
	                       |			ИНАЧЕ 0
	                       |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентНаценки,
	                       |	НоменклатураСпр.ВидТовара КАК ВидТовара,
	                       |	втВнеш.Стоимость - втВнеш.Себестоимость КАК ВаловаяПрибыль,
	                       |	втВнеш.ВидЗаказа,
	                       |	втВнеш.Партнер,
	                       |	0 КАК СуммаНДС,
	                       |	втВнеш.Период
	                       |ПОМЕСТИТЬ вт
	                       |ИЗ
	                       |	втВнеш КАК втВнеш
	                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	                       |		ПО втВнеш.Номенклатура = НоменклатураСпр.Код
	                       |;
	                       |
	                       |////////////////////////////////////////////////////////////////////////////////
	                       |ВЫБРАТЬ
	                       |	вт.Точка,
	                       |	вт.Стоимость КАК Стоимость,
	                       |	вт.Количество,
	                       |	вт.Количество * ВЫБОР
	                       |		КОГДА А.КоличествоПродаж <> 0
	                       |			ТОГДА А.СебестоимостьПродаж / А.КоличествоПродаж
	                       |		ИНАЧЕ 0
	                       |	КОНЕЦ КАК Себестоимость,
	                       |	вт.Номенклатура,
	                       |	вт.НоменклатурнаяГруппа,
	                       |	вт.Производитель,
	                       |	вт.ПроцентНаценки,
	                       |	вт.ВидТовара,
	                       |	вт.Стоимость - вт.Количество * ВЫБОР
	                       |		КОГДА А.КоличествоПродаж <> 0
	                       |			ТОГДА А.СебестоимостьПродаж / А.КоличествоПродаж
	                       |		ИНАЧЕ 0
	                       |	КОНЕЦ КАК ВаловаяПрибыль,
	                       |	вт.ВидЗаказа,
	                       |	вт.Партнер,
	                       |	ВЫБОР
	                       |		КОГДА А.КоличествоПродаж <> 0
	                       |			ТОГДА ЕСТЬNULL(А.СуммаНДС, 0) / А.КоличествоПродаж * вт.Количество
	                       |		ИНАЧЕ 0
	                       |	КОНЕЦ КАК СуммаНДС,
	                       |	вт.Период
	                       |ИЗ
	                       |	вт КАК вт
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС КАК ДатаОтчетаОТХ,
	                       |			ПродажиОбороты.Номенклатура КАК Номенклатура,
	                       |			СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоПродаж,
	                       |			СУММА(ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) КАК СебестоимостьПродаж,
	                       |			СУММА((ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) - ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) / 118 * 18) КАК СуммаНДС,
	                       |			СУММА(ВЫБОР
	                       |					КОГДА ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) <> 0
	                       |						ТОГДА ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) / ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0)
	                       |					ИНАЧЕ 0
	                       |				КОНЕЦ) КАК СтоимостьПродаж
	                       |		ИЗ
	                       |			Документ.ОтчетПоОТХ.СформированныеДокументы КАК ОтчетПоОТХСформированныеДокументы
	                       |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
	                       |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(, , Регистратор, ) КАК ПродажиСебестоимостьОбороты
	                       |					ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
	                       |						И ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура
	                       |						И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя
	                       |						И ПродажиОбороты.Подразделение = ПродажиСебестоимостьОбороты.Подразделение
	                       |				ПО ОтчетПоОТХСформированныеДокументы.Документ = ПродажиОбороты.Регистратор
	                       |		ГДЕ
	                       |			ОтчетПоОТХСформированныеДокументы.Ссылка.Контрагент = &Контрагент
	                       |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДокументыСформированы
	                       |			И ОтчетПоОТХСформированныеДокументы.Ссылка.Проведен
	                       |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС = ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаПо
	                       |			И ОтчетПоОТХСформированныеДокументы.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	                       |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС МЕЖДУ &ДатаНачала И &ДатаОкончания
	                       |		
	                       |		СГРУППИРОВАТЬ ПО
	                       |			ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС,
	                       |			ПродажиОбороты.Номенклатура) КАК А
	                       |		ПО вт.Номенклатура = А.Номенклатура
	                       |			И вт.Период = А.ДатаОтчетаОТХ";
				 
						   РезСкр = ЗапросСкрипченко.Выполнить();
						   ТабСкрипченко = РезСкр.выгрузить();
						   //ТабСкрипченко.ВыбратьСтроку();
						   //ВыборкаИтого = РезСкр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = МВТ;
	
	//Мен = новый МенеджерВременныхТаблиц;
	
	//Запрос.МенеджерВременныхТаблиц = Мен;
	
	Запрос.УстановитьПараметр("Прочее",Перечисления.ВидыТоваров.Прочее);
	
	Запрос.УстановитьПараметр("Автоэксперт",Справочники.Контрагенты.НайтиПоКоду("П000382"));
	
	Запрос.УстановитьПараметр("НачДата",НачДата);
	
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	
	Запрос.УстановитьПараметр("Направление",Справочники.НаправленияПродаж.НайтиПоКоду("16"));
	Запрос.УстановитьПараметр("втВнешние",ТабСкрипченко);
    
	//Запрос.УстановитьПараметр("Табл",таблВнеш);
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее) КАК ВидТовара,
	//			   |	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	//			   |	СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
	//			   |	СУММА(ТаблицаРегистра.КоличествоОборот * ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	//			   |	СУММА(ВЫРАЗИТЬ(ТаблицаРегистра.СтоимостьОборот КАК ЧИСЛО(15, 0))) КАК Стоимость,
	//			   |	СУММА(ВЫРАЗИТЬ(ТаблицаРегистраСебестоимость.СтоимостьОборот КАК ЧИСЛО(15, 2))) КАК Себестоимость,
	//			   |	ВЫРАЗИТЬ(СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	//			   |			КОНЕЦ) - СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	//			   |			КОНЕЦ) КАК ЧИСЛО(15, 0)) КАК ВаловаяПрибыль,
	//			   |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//			   |				КОГДА ТаблицаРегистра.СтоимостьОборот <> 0
	//			   |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистра.СтоимостьОборот
	//			   |				ИНАЧЕ 0
	//			   |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
	//			   |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//			   |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот <> 0
	//			   |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистраСебестоимость.СтоимостьОборот
	//			   |				ИНАЧЕ 0
	//			   |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	//			   |	ВЫРАЗИТЬ(СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	//			   |			КОНЕЦ) - СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	//			   |			КОНЕЦ) - (СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	//			   |			КОНЕЦ) - СУММА(ВЫБОР
	//			   |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	//			   |			КОНЕЦ)) / 118 * 100 КАК ЧИСЛО(15, 0)) КАК СуммаНДС,
	//			   |	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПродажи
	//			   |ПОМЕСТИТЬ втОснова
	//			   |ИЗ
	//			   |	РегистрНакопления.Продажи.Обороты(
	//			   |			&НачДата,
	//			   |			&КонДата,
	//			   |			Регистратор,
	//			   |			ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &Направление
	//			   |				И ДоговорКонтрагента.Владелец <> &Автоэксперт) КАК ТаблицаРегистра
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачДата, &КонДата, Регистратор, ) КАК ТаблицаРегистраСебестоимость
	//			   |		ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
	//			   |			И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
	//			   |			И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
	//			   |			И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
	//			   |			И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	ТаблицаРегистра.Номенклатура,
	//			   |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее),
	//			   |	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	втОснова.ПериодПродажи,
	//			   |	втОснова.Номенклатура,
	//			   |	НоменклатураСпр.НоменклатурнаяГруппа,
	//			   |	НоменклатураСпр.Производитель,
	//			   |	НоменклатураСпр.Модель,
	//			   |	Типоразмеры.Диаметр
	//			   |ПОМЕСТИТЬ втНом
	//			   |ИЗ
	//			   |	втОснова КАК втОснова
	//			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	//			   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Типоразмеры КАК Типоразмеры
	//			   |			ПО НоменклатураСпр.Типоразмер = Типоразмеры.Ссылка
	//			   |		ПО втОснова.Номенклатура = НоменклатураСпр.Ссылка
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	втНом.ПериодПродажи,
	//			   |	БонусыПоставщиковИнтернетМагазина.Приоритет,
	//			   |	втНом.Номенклатура,
	//			   |	БонусыПоставщиковИнтернетМагазина.Бонус,
	//			   |	БонусыПоставщиковИнтернетМагазина.Период КАК ПериодБонуса
	//			   |ПОМЕСТИТЬ вт2
	//			   |ИЗ
	//			   |	втНом КАК втНом
	//			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БонусыПоставщиковИнтернетМагазина КАК БонусыПоставщиковИнтернетМагазина
	//			   |		ПО (ВЫБОР
	//			   |				КОГДА БонусыПоставщиковИнтернетМагазина.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(справочник.НоменклатурныеГруппы.Пустаяссылка)
	//			   |					ТОГДА втНом.НоменклатурнаяГруппа = БонусыПоставщиковИнтернетМагазина.НоменклатурнаяГруппа
	//			   |				ИНАЧЕ ИСТИНА
	//			   |			КОНЕЦ)
	//			   |			И (ВЫБОР
	//			   |				КОГДА БонусыПоставщиковИнтернетМагазина.Производитель <> ЗНАЧЕНИЕ(справочник.производители.Пустаяссылка)
	//			   |					ТОГДА втНом.Производитель = БонусыПоставщиковИнтернетМагазина.Производитель
	//			   |				ИНАЧЕ ИСТИНА
	//			   |			КОНЕЦ)
	//			   |			И (ВЫБОР
	//			   |				КОГДА БонусыПоставщиковИнтернетМагазина.Модель <> ЗНАЧЕНИЕ(справочник.МоделиТоваров.Пустаяссылка)
	//			   |					ТОГДА втНом.Модель = БонусыПоставщиковИнтернетМагазина.Модель
	//			   |				ИНАЧЕ ИСТИНА
	//			   |			КОНЕЦ)
	//			   |			И (ВЫБОР
	//			   |				КОГДА БонусыПоставщиковИнтернетМагазина.Диаметр <> """"
	//			   |					ТОГДА втНом.Диаметр = БонусыПоставщиковИнтернетМагазина.Диаметр
	//			   |				ИНАЧЕ ИСТИНА
	//			   |			КОНЕЦ)
	//			   |			И втНом.ПериодПродажи >= БонусыПоставщиковИнтернетМагазина.Период
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	ВсеБонусы.ПериодПродажи,
	//			   |	ВсеБонусы.Ссылка,
	//			   |	ВсеБонусы.Бонус
	//			   |ПОМЕСТИТЬ втБонусыПоставщиков
	//			   |ИЗ
	//			   |	(ВЫБРАТЬ
	//			   |		вт2.ПериодПродажи КАК ПериодПродажи,
	//			   |		вт2.Номенклатура КАК Ссылка,
	//			   |		МАКСИМУМ(вт2.Бонус) КАК Бонус
	//			   |	ИЗ
	//			   |		(ВЫБРАТЬ
	//			   |			вт2.ПериодПродажи КАК ПериодПродажи,
	//			   |			вт2.Номенклатура КАК Номенклатура,
	//			   |			МАКСИМУМ(вт2.ПериодБонуса) КАК ПериодБонуса
	//			   |		ИЗ
	//			   |			вт2 КАК вт2
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			вт2.ПериодПродажи,
	//			   |			вт2.Номенклатура) КАК А
	//			   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт2 КАК вт2
	//			   |			ПО А.ПериодПродажи = вт2.ПериодПродажи
	//			   |				И А.Номенклатура = вт2.Номенклатура
	//			   |				И А.ПериодБонуса = вт2.ПериодБонуса
	//			   |	
	//			   |	СГРУППИРОВАТЬ ПО
	//			   |		вт2.ПериодПродажи,
	//			   |		вт2.Номенклатура
	//			   |	
	//			   |	ОБЪЕДИНИТЬ ВСЕ
	//			   |	
	//			   |	ВЫБРАТЬ
	//			   |		БонусыПоТоварам.Период,
	//			   |		БонусыПоТоварам.Номенклатура,
	//			   |		СРЕДНЕЕ(ВЫБОР
	//			   |				КОГДА ЕСТЬNULL(Основа.Себестоимость, 0) = 0
	//			   |					ТОГДА 0
	//			   |				ИНАЧЕ БонусыПоТоварам.БонусОборот
	//			   |			КОНЕЦ / (Основа.Себестоимость / 1.18) * 100)
	//			   |	ИЗ
	//			   |		РегистрНакопления.БонусыПоТоварам.Обороты(&НачДата, &КонДата, День, ) КАК БонусыПоТоварам
	//			   |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |				ВТ.ПериодПродажи КАК ПериодПродажи,
	//			   |				ВТ.Номенклатура КАК Номенклатура,
	//			   |				ВТ.Себестоимость КАК Себестоимость
	//			   |			ИЗ
	//			   |				втОснова КАК ВТ) КАК Основа
	//			   |			ПО БонусыПоТоварам.Номенклатура = Основа.Номенклатура
	//			   |				И БонусыПоТоварам.Период = Основа.ПериодПродажи
	//			   |	
	//			   |	СГРУППИРОВАТЬ ПО
	//			   |		БонусыПоТоварам.Номенклатура,
	//			   |		БонусыПоТоварам.Период) КАК ВсеБонусы
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	втОснова.ВидТовара КАК ВидТовара,
	//			   |	втОснова.Номенклатура,
	//			   |	СУММА(втОснова.Количество) КАК Количество,
	//			   |	СУММА(втОснова.КоличествоБазовыхЕд) КАК КоличествоБазовыхЕд,
	//			   |	СУММА(втОснова.Стоимость) КАК Стоимость,
	//			   |	СУММА(ЕСТЬNULL(втОснова.Себестоимость, 0)) КАК Себестоимость,
	//			   |	СУММА(втОснова.ВаловаяПрибыль) КАК ВаловаяПрибыль,
	//			   |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//			   |				КОГДА втОснова.Стоимость <> 0
	//			   |					ТОГДА 100 * (втОснова.Стоимость - втОснова.Себестоимость) / втОснова.Стоимость
	//			   |				ИНАЧЕ 0
	//			   |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
	//			   |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//			   |				КОГДА втОснова.Себестоимость <> 0
	//			   |					ТОГДА 100 * (втОснова.Стоимость - втОснова.Себестоимость) / втОснова.Себестоимость
	//			   |				ИНАЧЕ 0
	//			   |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	//			   |	СУММА(втОснова.СуммаНДС) КАК СуммаНДС,
	//			   |	МАКСИМУМ(ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0)) КАК БонусПроц,
	//			   |	СУММА(ВЫБОР
	//			   |			КОГДА ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) <> 0
	//			   |					И ЕСТЬNULL(втОснова.Себестоимость, 0) > 0
	//			   |				ТОГДА ЕСТЬNULL(втОснова.Себестоимость, 0) / 1.18 * ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) / 100
	//			   |			ИНАЧЕ 0
	//			   |		КОНЕЦ) КАК СуммаБонуса,
	//			   |	втОснова.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//			   |	втОснова.Номенклатура.Производитель КАК Производитель,
	//			   |	СУММА(ВЫБОР
	//			   |			КОГДА ЕСТЬNULL(втОснова.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) <> 0
	//			   |				ТОГДА 100 * (втОснова.Стоимость - ЕСТЬNULL(втОснова.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0)) / (ЕСТЬNULL(втОснова.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0))
	//			   |			ИНАЧЕ 0
	//			   |		КОНЕЦ) КАК ПроцентНаценкиСБонусом,
	//			   |	""Kolesatyt.ru"" КАК ВидЗаказа,
	//			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК Партнер,
	//			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК Точка
	//			   |ИЗ
	//			   |	втОснова КАК втОснова
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ втБонусыПоставщиков КАК втБонусыПоставщиков
	//			   |		ПО втОснова.Номенклатура = втБонусыПоставщиков.Ссылка
	//			   |			И втОснова.ПериодПродажи = втБонусыПоставщиков.ПериодПродажи
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	втОснова.ВидТовара,
	//			   |	втОснова.Номенклатура,
	//			   |	втОснова.Номенклатура.НоменклатурнаяГруппа,
	//			   |	втОснова.Номенклатура.Производитель
	//			   |АВТОУПОРЯДОЧИВАНИЕ";
				   Запрос.Текст = "ВЫБРАТЬ
				                  |	втВнешние.Точка,
				                  |	втВнешние.Стоимость,
				                  |	втВнешние.Количество,
				                  |	втВнешние.Себестоимость,
				                  |	втВнешние.Номенклатура,
				                  |	втВнешние.НоменклатурнаяГруппа,
				                  |	втВнешние.Производитель,
				                  |	втВнешние.ПроцентНаценки,
				                  |	втВнешние.ВидТовара,
				                  |	втВнешние.ВаловаяПрибыль,
				                  |	втВнешние.ВидЗаказа,
				                  |	втВнешние.Партнер,
				                  |	втВнешние.СуммаНДС,
				                  |	втВнешние.Период
				                  |ПОМЕСТИТЬ втВнешние
				                  |ИЗ
				                  |	&втВнешние КАК втВнешние
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее) КАК ВидТовара,
				                  |	ТаблицаРегистра.Номенклатура КАК Номенклатура,
				                  |	СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
				                  |	СУММА(ТаблицаРегистра.КоличествоОборот * ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
				                  |	СУММА(ВЫРАЗИТЬ(ТаблицаРегистра.СтоимостьОборот КАК ЧИСЛО(15, 0))) КАК Стоимость,
				                  |	СУММА(ВЫРАЗИТЬ(ТаблицаРегистраСебестоимость.СтоимостьОборот КАК ЧИСЛО(15, 2))) КАК Себестоимость,
				                  |	ВЫРАЗИТЬ(СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
				                  |			КОНЕЦ) - СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
				                  |			КОНЕЦ) КАК ЧИСЛО(15, 0)) КАК ВаловаяПрибыль,
				                  |	СУММА(ВЫРАЗИТЬ(ВЫБОР
				                  |				КОГДА ТаблицаРегистра.СтоимостьОборот <> 0
				                  |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистра.СтоимостьОборот
				                  |				ИНАЧЕ 0
				                  |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
				                  |	СУММА(ВЫРАЗИТЬ(ВЫБОР
				                  |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот <> 0
				                  |					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистраСебестоимость.СтоимостьОборот
				                  |				ИНАЧЕ 0
				                  |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
				                  |	ВЫРАЗИТЬ(СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
				                  |			КОНЕЦ) - СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
				                  |			КОНЕЦ) - (СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
				                  |			КОНЕЦ) - СУММА(ВЫБОР
				                  |				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
				                  |					ТОГДА 0
				                  |				ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
				                  |			КОНЕЦ)) / 118 * 100 КАК ЧИСЛО(15, 0)) КАК СуммаНДС,
				                  |	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК ПериодПродажи,
				                  |	ТаблицаРегистра.ЗаказПокупателя.ТранспортнаяКомпания.Представление КАК Точка,
				                  |	""Kolesatyt.ru"" КАК ВидЗаказа,
				                  |	ТаблицаРегистра.ЗаказПокупателя.ТранспортнаяКомпания.Представление КАК Партнер
				                  |ПОМЕСТИТЬ втОснова
				                  |ИЗ
				                  |	РегистрНакопления.Продажи.Обороты(
				                  |			&НачДата,
				                  |			&КонДата,
				                  |			Регистратор,
				                  |			ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &Направление
				                  |				И ДоговорКонтрагента.Владелец <> &Автоэксперт) КАК ТаблицаРегистра
				                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачДата, &КонДата, Регистратор, ) КАК ТаблицаРегистраСебестоимость
				                  |		ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
				                  |			И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
				                  |			И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
				                  |			И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
				                  |			И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
				                  |
				                  |СГРУППИРОВАТЬ ПО
				                  |	ТаблицаРегистра.Номенклатура,
				                  |	ЕСТЬNULL(ТаблицаРегистра.Номенклатура.ВидТовара, &Прочее),
				                  |	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ),
				                  |	ТаблицаРегистра.ЗаказПокупателя.ТранспортнаяКомпания.Представление,
				                  |	ТаблицаРегистра.ЗаказПокупателя.ТранспортнаяКомпания.Представление
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	втВнешние.Точка,
				                  |	втВнешние.Стоимость,
				                  |	втВнешние.Количество,
				                  |	втВнешние.Себестоимость,
				                  |	втВнешние.Номенклатура,
				                  |	втВнешние.НоменклатурнаяГруппа,
				                  |	втВнешние.Производитель,
				                  |	втВнешние.ПроцентНаценки,
				                  |	втВнешние.ВидТовара,
				                  |	втВнешние.ВаловаяПрибыль,
				                  |	втВнешние.ВидЗаказа,
				                  |	втВнешние.Партнер,
				                  |	втВнешние.СуммаНДС,
				                  |	втВнешние.Период КАК ПериодПродажи
				                  |ПОМЕСТИТЬ втОснова2
				                  |ИЗ
				                  |	втВнешние КАК втВнешние
				                  |
				                  |ОБЪЕДИНИТЬ ВСЕ
				                  |
				                  |ВЫБРАТЬ
				                  |	втОснова.Точка,
				                  |	втОснова.Стоимость,
				                  |	втОснова.Количество,
				                  |	втОснова.Себестоимость,
				                  |	втОснова.Номенклатура,
				                  |	NULL,
				                  |	NULL,
				                  |	втОснова.ПроцентНаценки,
				                  |	втОснова.ВидТовара,
				                  |	втОснова.ВаловаяПрибыль,
				                  |	втОснова.ВидЗаказа,
				                  |	втОснова.Партнер,
				                  |	втОснова.СуммаНДС,
				                  |	втОснова.ПериодПродажи
				                  |ИЗ
				                  |	втОснова КАК втОснова
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	втОснова2.ПериодПродажи,
				                  |	втОснова2.Номенклатура,
				                  |	НоменклатураСпр.НоменклатурнаяГруппа,
				                  |	НоменклатураСпр.Производитель,
				                  |	НоменклатураСпр.Модель,
				                  |	Типоразмеры.Диаметр,
				                  |	НоменклатураСпр.ВидТовара
				                  |ПОМЕСТИТЬ втНом
				                  |ИЗ
				                  |	втОснова2 КАК втОснова2
				                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
				                  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Типоразмеры КАК Типоразмеры
				                  |			ПО НоменклатураСпр.Типоразмер = Типоразмеры.Ссылка
				                  |		ПО втОснова2.Номенклатура = НоменклатураСпр.Ссылка
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	втНом.ПериодПродажи,
				                  |	БонусыПоставщиковИнтернетМагазина.Приоритет,
				                  |	втНом.Номенклатура,
				                  |	БонусыПоставщиковИнтернетМагазина.Бонус,
				                  |	БонусыПоставщиковИнтернетМагазина.Период КАК ПериодБонуса
				                  |ПОМЕСТИТЬ вт2
				                  |ИЗ
				                  |	втНом КАК втНом
				                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БонусыПоставщиковИнтернетМагазина КАК БонусыПоставщиковИнтернетМагазина
				                  |		ПО (ВЫБОР
				                  |				КОГДА БонусыПоставщиковИнтернетМагазина.НоменклатурнаяГруппа <> ЗНАЧЕНИЕ(справочник.НоменклатурныеГруппы.Пустаяссылка)
				                  |					ТОГДА втНом.НоменклатурнаяГруппа = БонусыПоставщиковИнтернетМагазина.НоменклатурнаяГруппа
				                  |				ИНАЧЕ ИСТИНА
				                  |			КОНЕЦ)
				                  |			И (ВЫБОР
				                  |				КОГДА БонусыПоставщиковИнтернетМагазина.Производитель <> ЗНАЧЕНИЕ(справочник.производители.Пустаяссылка)
				                  |					ТОГДА втНом.Производитель = БонусыПоставщиковИнтернетМагазина.Производитель
				                  |				ИНАЧЕ ИСТИНА
				                  |			КОНЕЦ)
				                  |			И (ВЫБОР
				                  |				КОГДА БонусыПоставщиковИнтернетМагазина.Модель <> ЗНАЧЕНИЕ(справочник.МоделиТоваров.Пустаяссылка)
				                  |					ТОГДА втНом.Модель = БонусыПоставщиковИнтернетМагазина.Модель
				                  |				ИНАЧЕ ИСТИНА
				                  |			КОНЕЦ)
				                  |			И (ВЫБОР
				                  |				КОГДА БонусыПоставщиковИнтернетМагазина.Диаметр <> """"
				                  |					ТОГДА втНом.Диаметр = БонусыПоставщиковИнтернетМагазина.Диаметр
				                  |				ИНАЧЕ ИСТИНА
				                  |			КОНЕЦ)
				                  |			И втНом.ПериодПродажи >= БонусыПоставщиковИнтернетМагазина.Период
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	ВсеБонусы.ПериодПродажи,
				                  |	ВсеБонусы.Ссылка,
				                  |	ВсеБонусы.Бонус
				                  |ПОМЕСТИТЬ втБонусыПоставщиков
				                  |ИЗ
				                  |	(ВЫБРАТЬ
				                  |		вт2.ПериодПродажи КАК ПериодПродажи,
				                  |		вт2.Номенклатура КАК Ссылка,
				                  |		МАКСИМУМ(вт2.Бонус) КАК Бонус
				                  |	ИЗ
				                  |		(ВЫБРАТЬ
				                  |			вт2.ПериодПродажи КАК ПериодПродажи,
				                  |			вт2.Номенклатура КАК Номенклатура,
				                  |			МАКСИМУМ(вт2.ПериодБонуса) КАК ПериодБонуса
				                  |		ИЗ
				                  |			вт2 КАК вт2
				                  |		
				                  |		СГРУППИРОВАТЬ ПО
				                  |			вт2.ПериодПродажи,
				                  |			вт2.Номенклатура) КАК А
				                  |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт2 КАК вт2
				                  |			ПО А.ПериодПродажи = вт2.ПериодПродажи
				                  |				И А.Номенклатура = вт2.Номенклатура
				                  |				И А.ПериодБонуса = вт2.ПериодБонуса
				                  |	
				                  |	СГРУППИРОВАТЬ ПО
				                  |		вт2.ПериодПродажи,
				                  |		вт2.Номенклатура
				                  |	
				                  |	ОБЪЕДИНИТЬ ВСЕ
				                  |	
				                  |	ВЫБРАТЬ
				                  |		БонусыПоТоварам.Период,
				                  |		БонусыПоТоварам.Номенклатура,
				                  |		СРЕДНЕЕ(ВЫБОР
				                  |				КОГДА ЕСТЬNULL(Основа.Себестоимость, 0) = 0
				                  |					ТОГДА 0
				                  |				ИНАЧЕ БонусыПоТоварам.БонусОборот
				                  |			КОНЕЦ / (Основа.Себестоимость / 1.18) * 100)
				                  |	ИЗ
				                  |		РегистрНакопления.БонусыПоТоварам.Обороты(&НачДата, &КонДата, День, ) КАК БонусыПоТоварам
				                  |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				                  |				ВТ.ПериодПродажи КАК ПериодПродажи,
				                  |				ВТ.Номенклатура КАК Номенклатура,
				                  |				ВТ.Себестоимость КАК Себестоимость
				                  |			ИЗ
				                  |				втОснова КАК ВТ) КАК Основа
				                  |			ПО БонусыПоТоварам.Номенклатура = Основа.Номенклатура
				                  |				И БонусыПоТоварам.Период = Основа.ПериодПродажи
				                  |	
				                  |	СГРУППИРОВАТЬ ПО
				                  |		БонусыПоТоварам.Номенклатура,
				                  |		БонусыПоТоварам.Период) КАК ВсеБонусы
				                  |;
				                  |
				                  |////////////////////////////////////////////////////////////////////////////////
				                  |ВЫБРАТЬ
				                  |	втОснова2.ВидТовара КАК ВидТовара,
				                  |	втОснова2.Номенклатура,
				                  |	СУММА(втОснова2.Количество) КАК Количество,
				                  |	СУММА(втОснова2.Стоимость) КАК Стоимость,
				                  |	СУММА(ЕСТЬNULL(втОснова2.Себестоимость, 0)) КАК Себестоимость,
				                  |	СУММА(втОснова2.ВаловаяПрибыль) КАК ВаловаяПрибыль,
				                  |	СУММА(ВЫРАЗИТЬ(ВЫБОР
				                  |				КОГДА втОснова2.Стоимость <> 0
				                  |					ТОГДА 100 * (втОснова2.Стоимость - втОснова2.Себестоимость) / втОснова2.Стоимость
				                  |				ИНАЧЕ 0
				                  |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
				                  |	СУММА(ВЫРАЗИТЬ(ВЫБОР
				                  |				КОГДА втОснова2.Себестоимость <> 0
				                  |					ТОГДА 100 * (втОснова2.Стоимость - втОснова2.Себестоимость) / втОснова2.Себестоимость
				                  |				ИНАЧЕ 0
				                  |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
				                  |	СУММА(втОснова2.СуммаНДС) КАК СуммаНДС,
				                  |	МАКСИМУМ(ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0)) КАК БонусПроц,
				                  |	СУММА(ВЫБОР
				                  |			КОГДА ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) <> 0
				                  |					И ЕСТЬNULL(втОснова2.Себестоимость, 0) > 0
				                  |				ТОГДА ЕСТЬNULL(втОснова2.Себестоимость, 0) / 1.18 * ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) / 100
				                  |			ИНАЧЕ 0
				                  |		КОНЕЦ) КАК СуммаБонуса,
				                  |	втОснова2.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
				                  |	втОснова2.Номенклатура.Производитель КАК Производитель,
				                  |	СУММА(ВЫБОР
				                  |			КОГДА ЕСТЬNULL(втОснова2.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0) <> 0
				                  |				ТОГДА 100 * (втОснова2.Стоимость - ЕСТЬNULL(втОснова2.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0)) / (ЕСТЬNULL(втОснова2.Себестоимость, 0) - ЕСТЬNULL(втБонусыПоставщиков.Бонус, 0))
				                  |			ИНАЧЕ 0
				                  |		КОНЕЦ) КАК ПроцентНаценкиСБонусом,
				                  |	втОснова2.ВидЗаказа КАК ВидЗаказа,
				                  |	втОснова2.Партнер КАК Партнер,
				                  |	втОснова2.Точка КАК Точка
				                  |ИЗ
				                  |	втОснова2 КАК втОснова2
				                  |		ЛЕВОЕ СОЕДИНЕНИЕ втБонусыПоставщиков КАК втБонусыПоставщиков
				                  |		ПО втОснова2.Номенклатура = втБонусыПоставщиков.Ссылка
				                  |			И втОснова2.ПериодПродажи = втБонусыПоставщиков.ПериодПродажи
				                  |
				                  |СГРУППИРОВАТЬ ПО
				                  |	втОснова2.ВидТовара,
				                  |	втОснова2.Номенклатура,
				                  |	втОснова2.Номенклатура.НоменклатурнаяГруппа,
				                  |	втОснова2.Номенклатура.Производитель,
				                  |	втОснова2.ВидЗаказа,
				                  |	втОснова2.Партнер,
				                  |	втОснова2.Точка
				                  |АВТОУПОРЯДОЧИВАНИЕ";
				   РезКолеса = Запрос.Выполнить();
				   ТабКолеса = РезКолеса.Выгрузить();
				   
	//			   ВыборкаИтого = РезКолеса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	ТабДок = Новый ТабличныйДокумент;

	макет = ЭтотОбъект.ПолучитьМакет("Макет");
	ПрибыльНДС = ТабКолеса.Итог("СуммаНДС");
	Прибыль = ТабКолеса.Итог("ВаловаяПрибыль");
	СуммаБонуса = ТабКолеса.Итог("СуммаБонуса");
	//
	//инфо = Макет.ПолучитьОбласть("инфо");
	//
	//инфо.Параметры.дата1 = Формат(НачДата,"ДФ=dd.MM.yyyy");
	//инфо.Параметры.дата2 = Формат(КонДата,"ДФ=dd.MM.yyyy");
	//
	//ТабДок.Вывести(инфо);

	//шапка = Макет.ПолучитьОбласть("шапка");

	//ТабДок.Вывести(Шапка);

	//Строка = Макет.ПолучитьОбласть("Строка");

	//Пока ВыборкаИтого.Следующий() Цикл
	//	//ТабДок.НачатьГруппуСтрок();

	//	ПрибыльНДС = ВыборкаИтого.СуммаНДС;
	//	Прибыль = ВыборкаИтого.ВаловаяПрибыль;
	//	СуммаБонуса = ВыборкаИтого.СуммаБонуса;
	//
	//	Строка.Параметры.Заполнить(ВыборкаИтого);
	//	строка.Параметры.номенклатура = "Итог";

	//	ТабДок.Вывести(Строка,1);
	//	
	//	ТабДок.НачатьГруппуСтрок();

	//	ВыборкаВидТовара = ВыборкаИтого.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	
	//	Строка2 = Макет.ПолучитьОбласть("Строка1");
	//	Пока ВыборкаВидТовара.Следующий() Цикл
	//					Строка2.Параметры.Заполнить(ВыборкаВидТовара);
	//		строка2.Параметры.Номенклатура = ВыборкаВидТовара.ВидТовара;
	//		
	//		ТабДок.Вывести(Строка2,2);
	//		ТабДок.НачатьГруппуСтрок();

	//		ВыборкаНГ = ВыборкаВидТовара.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Строка3 = Макет.ПолучитьОбласть("Строка1");
	//		Пока ВыборкаНГ.Следующий() Цикл
	//			
	//			Строка3.Параметры.Заполнить(ВыборкаНГ);
	//			строка3.Параметры.Номенклатура = ВыборкаНГ.НоменклатурнаяГруппа;
	//			
	//			ТабДок.Вывести(Строка3,3);
	//			ТабДок.НачатьГруппуСтрок();

	//			ВыборкаПроизводитель = ВыборкаНГ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			Строка4 = Макет.ПолучитьОбласть("Строка1");
	//			Пока ВыборкаПроизводитель.Следующий() Цикл
	//				
	//				Строка4.Параметры.Заполнить(ВыборкаПроизводитель);
	//				строка4.Параметры.Номенклатура = ВыборкаПроизводитель.Производитель;
	//				
	//				ТабДок.Вывести(Строка4,4);
	//				ТабДок.НачатьГруппуСтрок();
	//				ВыборкаНом = ВыборкаПроизводитель.Выбрать();
	//				Строка5 = Макет.ПолучитьОбласть("Строка2");
	//				Пока ВыборкаНом.Следующий() Цикл
	//					Строка5.Параметры.Заполнить(ВыборкаНом);
	//					Строка5.Параметры.ПроцентБонуса = ВыборкаНом.БонусПроц;
	//					ТабДок.Вывести(Строка5,5);
	//					
	//				КонецЦикла;
	//				ТабДок.ЗакончитьГруппуСтрок();
	//			КонецЦикла;
	//			ТабДок.ЗакончитьГруппуСтрок();
	//		КонецЦикла;
	//		ТабДок.ЗакончитьГруппуСтрок();
	//	КонецЦикла;
	//	ТабДок.ЗакончитьГруппуСтрок();
	//КонецЦикла; //итого
	
	
	//Партнерские точки
	//Скрипченко
	
	//ЗапросСкрипченко = новый Запрос;
	//ЗапросСкрипченко.УстановитьПараметр("табСкрипченко",таблВнеш);
	//ЗапросСкрипченко.УстановитьПараметр("ДатаНачала",НачДата);
	//ЗапросСкрипченко.УстановитьПараметр("ДатаОкончания",КонецДня(КонДата));
	//ЗапросСкрипченко.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоКоду("П017979"));

	//ЗапросСкрипченко.Текст="ВЫБРАТЬ
	//					   |	табСкрипченко.Точка,
	//					   |	табСкрипченко.ВидЗаказа,
	//					   |	табСкрипченко.Партнер,
	//					   |	табСкрипченко.Номенклатура,
	//					   |	табСкрипченко.Стоимость,
	//					   |	табСкрипченко.Количество,
	//					   |	табСкрипченко.Себестоимость
	//					   |ПОМЕСТИТЬ втВнеш
	//					   |ИЗ
	//					   |	&табСкрипченко КАК табСкрипченко
	//					   |;
	//					   |
	//					   |////////////////////////////////////////////////////////////////////////////////
	//					   |ВЫБРАТЬ
	//					   |	втВнеш.Точка КАК Точка,
	//					   |	СУММА(втВнеш.Стоимость) КАК Стоимость,
	//					   |	СУММА(втВнеш.Количество) КАК Количество,
	//					   |	СУММА(втВнеш.Себестоимость) КАК Себестоимость,
	//					   |	НоменклатураСпр.Ссылка КАК Номенклатура,
	//					   |	НоменклатураСпр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//					   |	НоменклатураСпр.Производитель КАК Производитель,
	//					   |	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//					   |				КОГДА втВнеш.Себестоимость <> 0
	//					   |					ТОГДА 100 * (втВнеш.Стоимость - втВнеш.Себестоимость) / втВнеш.Себестоимость
	//					   |				ИНАЧЕ 0
	//					   |			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	//					   |	НоменклатураСпр.ВидТовара КАК ВидТовара,
	//					   |	СУММА(втВнеш.Стоимость - втВнеш.Себестоимость) КАК ВаловаяПрибыль,
	//					   |	втВнеш.ВидЗаказа,
	//					   |	втВнеш.Партнер,
	//					   |	СУММА(0) КАК СуммаНДС
	//					   |ИЗ
	//					   |	втВнеш КАК втВнеш
	//					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	//					   |		ПО втВнеш.Номенклатура = НоменклатураСпр.Код
	//					   |
	//					   |СГРУППИРОВАТЬ ПО
	//					   |	втВнеш.Точка,
	//					   |	НоменклатураСпр.НоменклатурнаяГруппа,
	//					   |	НоменклатураСпр.Производитель,
	//					   |	НоменклатураСпр.Ссылка,
	//					   |	НоменклатураСпр.ВидТовара,
	//					   |	втВнеш.ВидЗаказа,
	//					   |	втВнеш.Партнер";
	//ЗапросСкрипченко.Текст="ВЫБРАТЬ
	//					   |	табСкрипченко.Точка,
	//					   |	табСкрипченко.ВидЗаказа,
	//					   |	табСкрипченко.Партнер,
	//					   |	табСкрипченко.Номенклатура,
	//					   |	табСкрипченко.Стоимость,
	//					   |	табСкрипченко.Количество,
	//					   |	табСкрипченко.Себестоимость,
	//					   |	табСкрипченко.Период
	//					   |ПОМЕСТИТЬ втВнеш
	//					   |ИЗ
	//					   |	&табСкрипченко КАК табСкрипченко
	//					   |;
	//					   |
	//					   |////////////////////////////////////////////////////////////////////////////////
	//					   |ВЫБРАТЬ
	//					   |	втВнеш.Точка КАК Точка,
	//					   |	втВнеш.Стоимость КАК Стоимость,
	//					   |	втВнеш.Количество КАК Количество,
	//					   |	втВнеш.Себестоимость КАК Себестоимость,
	//					   |	НоменклатураСпр.Ссылка КАК Номенклатура,
	//					   |	НоменклатураСпр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//					   |	НоменклатураСпр.Производитель КАК Производитель,
	//					   |	ВЫРАЗИТЬ(ВЫБОР
	//					   |			КОГДА втВнеш.Себестоимость <> 0
	//					   |				ТОГДА 100 * (втВнеш.Стоимость - втВнеш.Себестоимость) / втВнеш.Себестоимость
	//					   |			ИНАЧЕ 0
	//					   |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентНаценки,
	//					   |	НоменклатураСпр.ВидТовара КАК ВидТовара,
	//					   |	втВнеш.Стоимость - втВнеш.Себестоимость КАК ВаловаяПрибыль,
	//					   |	втВнеш.ВидЗаказа,
	//					   |	втВнеш.Партнер,
	//					   |	0 КАК СуммаНДС,
	//					   |	втВнеш.Период
	//					   |ПОМЕСТИТЬ вт
	//					   |ИЗ
	//					   |	втВнеш КАК втВнеш
	//					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	//					   |		ПО втВнеш.Номенклатура = НоменклатураСпр.Код
	//					   |;
	//					   |
	//					   |////////////////////////////////////////////////////////////////////////////////
	//					   |ВЫБРАТЬ
	//					   |	вт.Точка,
	//					   |	вт.Стоимость,
	//					   |	вт.Количество,
	//					   |	вт.Количество * ВЫБОР
	//					   |		КОГДА А.КоличествоПродаж <> 0
	//					   |			ТОГДА А.СебестоимостьПродаж / А.КоличествоПродаж
	//					   |		ИНАЧЕ 0
	//					   |	КОНЕЦ КАК Себестоимость,
	//					   |	вт.Номенклатура,
	//					   |	вт.НоменклатурнаяГруппа,
	//					   |	вт.Производитель,
	//					   |	вт.ПроцентНаценки,
	//					   |	вт.ВидТовара,
	//					   |	вт.Стоимость - вт.Количество * ВЫБОР
	//					   |		КОГДА А.КоличествоПродаж <> 0
	//					   |			ТОГДА А.СебестоимостьПродаж / А.КоличествоПродаж
	//					   |		ИНАЧЕ 0
	//					   |	КОНЕЦ КАК ВаловаяПрибыль,
	//					   |	вт.ВидЗаказа,
	//					   |	вт.Партнер,
	//					   |	вт.СуммаНДС,
	//					   |	вт.Период
	//					   |ИЗ
	//					   |	вт КАК вт
	//					   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//					   |			ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС КАК ДатаОтчетаОТХ,
	//					   |			ПродажиОбороты.Номенклатура КАК Номенклатура,
	//					   |			СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоПродаж,
	//					   |			СУММА(ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) КАК СебестоимостьПродаж
	//					   |		ИЗ
	//					   |			Документ.ОтчетПоОТХ.СформированныеДокументы КАК ОтчетПоОТХСформированныеДокументы
	//					   |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(, , Регистратор, ) КАК ПродажиОбороты
	//					   |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(, , Регистратор, ) КАК ПродажиСебестоимостьОбороты
	//					   |					ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
	//					   |						И ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура
	//					   |						И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя
	//					   |						И ПродажиОбороты.Подразделение = ПродажиСебестоимостьОбороты.Подразделение
	//					   |				ПО ОтчетПоОТХСформированныеДокументы.Документ = ПродажиОбороты.Регистратор
	//					   |		ГДЕ
	//					   |			ОтчетПоОТХСформированныеДокументы.Ссылка.Контрагент = &Контрагент
	//					   |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДокументыСформированы
	//					   |			И ОтчетПоОТХСформированныеДокументы.Ссылка.Проведен
	//					   |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС = ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаПо
	//					   |			И ОтчетПоОТХСформированныеДокументы.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
	//					   |			И ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС МЕЖДУ &ДатаНачала И &ДатаОкончания
	//					   |		
	//					   |		СГРУППИРОВАТЬ ПО
	//					   |			ОтчетПоОТХСформированныеДокументы.Ссылка.ДатаС,
	//					   |			ПродажиОбороты.Номенклатура) КАК А
	//					   |		ПО вт.Номенклатура = А.Номенклатура
	//					   |			И вт.Период = А.ДатаОтчетаОТХ";
	//			 
	//					   РезСкр = ЗапросСкрипченко.Выполнить();
	//					   ТабСкрипченко = РезСкр.выгрузить();
	//					   ТабСкрипченко.ВыбратьСтроку();
	//					   ВыборкаИтого = РезСкр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//ТабОбщ = ОбъединитьТабл(ТабКолеса, ТабСкрипченко);
	
	//ТабОбщ.выбратьСтроку();			 
	//Область = Макет.ПолучитьОбласть("ПартнерскиеТочки");
	//ТабДок.Вывести(Область);
	//
	//Область = Макет.ПолучитьОбласть("Скрипченко");
	//ТабДок.Вывести(Область);

	//		 
	//Область = Макет.ПолучитьОбласть("шапка");
	//ТабДок.Вывести(Область);

	//Строка = Макет.ПолучитьОбласть("Строка");

	//Пока ВыборкаИтого.Следующий() Цикл
	//	//ТабДок.НачатьГруппуСтрок();
	//	
	//	
	//	//Прибыль = ВыборкаИтого.ВаловаяПрибыль;
	//	
	//	
	//	Строка.Параметры.Заполнить(ВыборкаИтого);
	//	строка.Параметры.номенклатура = "Итог";
	//	
	//	ТабДок.Вывести(Строка,1);
	//	
	//	ТабДок.НачатьГруппуСтрок();
	//	
	//	ВыборкаТочка = ВыборкаИтого.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	
	//	Строка2 = Макет.ПолучитьОбласть("Строка1");
	//	Пока ВыборкаТочка.Следующий() Цикл
	//		
	//		Строка2.Параметры.Заполнить(ВыборкаТочка);
	//		строка2.Параметры.Номенклатура = ВыборкаТочка.Точка;
	//		
	//		ТабДок.Вывести(Строка2,2);
	//		ТабДок.НачатьГруппуСтрок();
	//		
	//		ВыборкаВидТовара = ВыборкаТочка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		Строка3 = Макет.ПолучитьОбласть("Строка1");
	//		Пока ВыборкаВидТовара.Следующий() Цикл
	//			Строка3.Параметры.Заполнить(ВыборкаВидТовара);
	//			строка3.Параметры.Номенклатура = ВыборкаВидТовара.ВидТовара;
	//			
	//			ТабДок.Вывести(Строка3,3);
	//			ТабДок.НачатьГруппуСтрок();
	//			
	//			ВыборкаНГ = ВыборкаВидТовара.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			Строка4 = Макет.ПолучитьОбласть("Строка1");
	//			Пока ВыборкаНГ.Следующий() Цикл
	//				
	//				Строка4.Параметры.Заполнить(ВыборкаНГ);
	//				строка4.Параметры.Номенклатура = ВыборкаНГ.НоменклатурнаяГруппа;
	//				
	//				ТабДок.Вывести(Строка4,4);
	//				ТабДок.НачатьГруппуСтрок();
	//				
	//				ВыборкаПроизводитель = ВыборкаНГ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//				Строка5 = Макет.ПолучитьОбласть("Строка1");
	//				Пока ВыборкаПроизводитель.Следующий() Цикл
	//					
	//					Строка5.Параметры.Заполнить(ВыборкаПроизводитель);
	//					строка5.Параметры.Номенклатура = ВыборкаПроизводитель.Производитель;
	//					
	//					ТабДок.Вывести(Строка5,5);
	//					ТабДок.НачатьГруппуСтрок();
	//					ВыборкаНом = ВыборкаПроизводитель.Выбрать();
	//					Строка6 = Макет.ПолучитьОбласть("Строка2");
	//					Пока ВыборкаНом.Следующий() Цикл
	//						Строка6.Параметры.Заполнить(ВыборкаНом);
	//						ТабДок.Вывести(Строка6,6);
	//					КонецЦикла;
	//					ТабДок.ЗакончитьГруппуСтрок();
	//				КонецЦикла;
	//				ТабДок.ЗакончитьГруппуСтрок();
	//			КонецЦикла;
	//			ТабДок.ЗакончитьГруппуСтрок();
	//		КонецЦикла;
	//		ТабДок.ЗакончитьГруппуСтрок();
	//	КонецЦикла;
	//	ТабДок.ЗакончитьГруппуСтрок();
	//КонецЦикла; //итого

	табДок.Вывести(ПолучитьДокИзСхемы("ОсновнаяСхемаКомпоновкиДанных",ТабКолеса,"Продажи KOLESATYT.RU"));
		
	Мен = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мен;
	Запрос.УстановитьПараметр("НачДата",НачДата);	
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	Запрос.УстановитьПараметр("Подразделение",Справочники.Подразделения.НайтиПоКоду("00139") );
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоступлениеТоваровУслугУслуги.Ссылка,
	               |	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	ПоступлениеТоваровУслугУслуги.Сумма,
	               |	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	               |	ПоступлениеТоваровУслугУслуги.НомерСтроки
	               |ПОМЕСТИТЬ НДС
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвансовыйОтчетПрочее.Ссылка,
	               |	АвансовыйОтчетПрочее.СтатьяЗатрат,
	               |	АвансовыйОтчетПрочее.Сумма,
	               |	АвансовыйОтчетПрочее.СуммаНДС,
	               |	АвансовыйОтчетПрочее.НомерСтроки
	               |ИЗ
	               |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫРАЗИТЬ(Затраты.Сумма КАК ЧИСЛО(15, 0))) КАК СуммаЯШТ,
	               |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(НДС.СуммаНДС, 0) КАК ЧИСЛО(15, 0))) КАК СуммаНДСЯШТ,
	               |	Затраты.СтатьяЗатрат.Наименование КАК СтатьяЗатрат
	               |ПОМЕСТИТЬ БезВнеш
	               |ИЗ
	               |	РегистрНакопления.Затраты КАК Затраты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ НДС КАК НДС
	               |		ПО Затраты.НомерСтроки = НДС.НомерСтроки
	               |			И Затраты.Регистратор = НДС.Ссылка
	               |			И Затраты.СтатьяЗатрат = НДС.СтатьяЗатрат
	               |			И Затраты.Сумма = НДС.Сумма
	               |ГДЕ
	               |	Затраты.Период МЕЖДУ &НачДата И &КонДата
	               |	И Затраты.Подразделение = &Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Затраты.СтатьяЗатрат.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БезВнеш.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	БезВнеш.СуммаЯШТ,
	               |	БезВнеш.СуммаНДСЯШТ,
	               |	0 КАК СуммаАЭ
	               |ПОМЕСТИТЬ БезГрупп
	               |ИЗ
	               |	БезВнеш КАК БезВнеш
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	БезГрупп.СтатьяЗатрат КАК СтатьяЗатрат,
	               |	СУММА(БезГрупп.СуммаЯШТ) КАК СуммаЯШТ,
	               |	СУММА(БезГрупп.СуммаНДСЯШТ) КАК СуммаНДСЯШТ,
	               |	СУММА(БезГрупп.СуммаАЭ) КАК СуммаАЭ
	               |ИЗ
	               |	БезГрупп КАК БезГрупп
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БезГрупп.СтатьяЗатрат
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтатьяЗатрат";
				   
				   
				   ЗапросНаКосяки = Новый Запрос;
				   //ЗапросНаКосяки.УстановитьПараметр("Табл",таблВнешЗ);
				   ЗапросНаКосяки.УстановитьПараметр("НачДата",НачДата);	
				   ЗапросНаКосяки.УстановитьПараметр("КонДата",КонецДня(КонДата) );
				   ЗапросНаКосяки.УстановитьПараметр("Подразделение",Справочники.Подразделения.НайтиПоКоду("00139") );
				   
				   ЗапросНаКосяки.Текст="ВЫБРАТЬ
				                        |	ПоступлениеТоваровУслугУслуги.Ссылка,
				                        |	ПоступлениеТоваровУслугУслуги.СтатьяЗатратУПР КАК СтатьяЗатрат,
				                        |	ПоступлениеТоваровУслугУслуги.Сумма,
				                        |	ПоступлениеТоваровУслугУслуги.СуммаНДС,
				                        |	ПоступлениеТоваровУслугУслуги.НомерСтроки
				                        |ПОМЕСТИТЬ НДС
				                        |ИЗ
				                        |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
				                        |ГДЕ
				                        |	ПоступлениеТоваровУслугУслуги.СтатьяЗатратУПР.Наименование ПОДОБНО ""%косяки%""
				                        |
				                        |ОБЪЕДИНИТЬ ВСЕ
				                        |
				                        |ВЫБРАТЬ
				                        |	АвансовыйОтчетПрочее.Ссылка,
				                        |	АвансовыйОтчетПрочее.СтатьяЗатратУПР,
				                        |	АвансовыйОтчетПрочее.Сумма,
				                        |	АвансовыйОтчетПрочее.СуммаНДС,
				                        |	АвансовыйОтчетПрочее.НомерСтроки
				                        |ИЗ
				                        |	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
				                        |ГДЕ
				                        |	АвансовыйОтчетПрочее.СтатьяЗатратУПР.Наименование ПОДОБНО ""%косяки%""
				                        |;
				                        |
				                        |////////////////////////////////////////////////////////////////////////////////
				                        |ВЫБРАТЬ
				                        |	СУММА(ВЫРАЗИТЬ(Затраты.Сумма КАК ЧИСЛО(15, 0))) КАК СуммаЯШТ,
				                        |	СУММА(ВЫРАЗИТЬ(ЕСТЬNULL(НДС.СуммаНДС, 0) КАК ЧИСЛО(15, 0))) КАК СуммаНДСЯШТ,
				                        |	Затраты.СтатьяЗатратУпр.Наименование КАК СтатьяЗатрат
				                        |ПОМЕСТИТЬ БезВнеш
				                        |ИЗ
				                        |	РегистрНакопления.Затраты КАК Затраты
				                        |		ЛЕВОЕ СОЕДИНЕНИЕ НДС КАК НДС
				                        |		ПО Затраты.НомерСтроки = НДС.НомерСтроки
				                        |			И Затраты.Регистратор = НДС.Ссылка
				                        |			И Затраты.СтатьяЗатрат = НДС.СтатьяЗатрат
				                        |			И Затраты.Сумма = НДС.Сумма
				                        |ГДЕ
				                        |	Затраты.Период МЕЖДУ &НачДата И &КонДата
				                        |	И Затраты.Подразделение = &Подразделение
				                        |	И Затраты.СтатьяЗатратУпр.Наименование ПОДОБНО ""%косяки%""
				                        |
				                        |СГРУППИРОВАТЬ ПО
				                        |	Затраты.СтатьяЗатратУпр.Наименование
				                        |;
				                        |
				                        |////////////////////////////////////////////////////////////////////////////////
				                        |ВЫБРАТЬ
				                        |	БезВнеш.СтатьяЗатрат КАК СтатьяЗатрат,
				                        |	БезВнеш.СуммаЯШТ,
				                        |	БезВнеш.СуммаНДСЯШТ,
				                        |	0 КАК СуммаАЭ
				                        |ПОМЕСТИТЬ БезГрупп
				                        |ИЗ
				                        |	БезВнеш КАК БезВнеш
				                        |;
				                        |
				                        |////////////////////////////////////////////////////////////////////////////////
				                        |ВЫБРАТЬ
				                        |	БезГрупп.СтатьяЗатрат КАК СтатьяЗатрат,
				                        |	СУММА(БезГрупп.СуммаЯШТ) КАК СуммаЯШТ,
				                        |	СУММА(БезГрупп.СуммаНДСЯШТ) КАК СуммаНДСЯШТ,
				                        |	СУММА(БезГрупп.СуммаАЭ) КАК СуммаАЭ
				                        |ИЗ
				                        |	БезГрупп КАК БезГрупп
				                        |
				                        |СГРУППИРОВАТЬ ПО
				                        |	БезГрупп.СтатьяЗатрат
				                        |
				                        |УПОРЯДОЧИТЬ ПО
				                        |	СтатьяЗатрат";
	Если ПоСтатьямИМ Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Затраты.СтатьяЗатрат.Наименование","Затраты.СтатьяЗатратУпр.Наименование");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПоступлениеТоваровУслугУслуги.СтатьяЗатрат","ПоступлениеТоваровУслугУслуги.СтатьяЗатратУпр");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"АвансовыйОтчетПрочее.СтатьяЗатрат","АвансовыйОтчетПрочее.СтатьяЗатратУпр");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Затраты.СтатьяЗатрат = НДС.СтатьяЗатрат","И Затраты.СтатьяЗатратУпр = НДС.СтатьяЗатрат");
		
	КонецЕсли;
				   
	Результат = Запрос.Выполнить().Выгрузить();
	РезультатНаКосяки = ЗапросНаКосяки.Выполнить().Выгрузить();
	
	Итог = Результат.Скопировать();
	
	Итог.Свернуть(,"СуммаЯШТ,СуммаНДСЯШТ,СуммаАЭ");
	РезультатНаКосяки.Свернуть(,"СуммаЯШТ,СуммаНДСЯШТ,СуммаАЭ");

	
	Если итог.КОличество()>0 Тогда
	    ЗатратыНДС = Итог[0].СуммаНДСЯШТ;
	    Затраты = Итог[0].СуммаЯШТ;
		ЗатратыАЭ = Итог[0].СуммаАЭ;
	Иначе
		ЗатратыНДС=0;
        Затраты=0;
		ЗатратыАЭ = 0;
	КонецЕсли;
	//Пропуск = Макет.ПолучитьОбласть("Пропуск");

	//ТабДок.Вывести(Пропуск);
	
	шапка = Макет.ПолучитьОбласть("ШапкаЗатраты");
	
	ТабДок.Вывести(Шапка);
	
	Строка = Макет.ПолучитьОбласть("СтрокаЗатраты");
	СуммаНаКосяки=0;
	
	Если РезультатНаКосяки.Количество()>0 тогда
		СуммаНаКосяки = РезультатНаКосяки[0].СуммаЯШТ;
	КонецЕсли;
	
	Если итог.КОличество()>0 Тогда
		 
		Строка.Параметры.СуммаАЭ = ЗатратыАЭ;
		Строка.Параметры.Сумма = Затраты;
		Строка.Параметры.СуммаНДС = ЗатратыНДС;
		Строка.Параметры.СтатьяЗатрат = "Итог";
		ТабДок.Вывести(Строка);
		ТабДок.НачатьГруппуСтрок();
		
		для каждого стр1 из Результат Цикл
			//Если найти(СокрЛП(стр1.СтатьяЗатрат), "косяки") тогда
			//	СуммаНаКосяки=СуммаНаКосяки+?(стр1.СуммаЯШТ=null,0,стр1.СуммаЯШТ)+?(стр1.СуммаАЭ=null,0,стр1.СуммаАЭ);
			//	//Сообщить("Косяки: "+стр1.СтатьяЗатрат+": "+стр1.СуммаЯШТ+" АЭ: "+стр1.СуммаАЭ);
			//КонецЕсли;
			Строка = Макет.ПолучитьОбласть("СтрокаЗатраты1");
			
			Строка.Параметры.Сумма = стр1.СуммаЯШТ;
			Строка.Параметры.СтатьяЗатрат = стр1.СтатьяЗатрат;
			Строка.Параметры.СуммаНДС = стр1.СуммаНДСЯШТ;
			Строка.Параметры.Регистратор = стр1.СтатьяЗатрат;
			
			Строка.Параметры.СуммаАЭ = стр1.СуммаАЭ;
			ТабДок.Вывести(Строка);
		КонецЦикла;
		
		ТабДок.ЗакончитьГруппуСтрок();	 
	КонецЕсли;
	
	//Дебиторка ///////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата",КонецДня(КонДата)+1);
	Если КонецДня(КонДата)+1 > ТекущаяДата() Тогда
		Запрос.УстановитьПараметр("ДатаОплаты",КонецДня(ТекущаяДата())+1);
	иначе
	    Запрос.УстановитьПараметр("ДатаОплаты",КонецДня(КонДата)+1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Интернет",Справочники.НаправленияПродаж.НайтиПоКоду("16"));
	Запрос.УстановитьПараметр("СПОкупателем",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("Автоэксперт",Справочники.Контрагенты.НайтиПоКоду("П000382"));
	Запрос.УстановитьПараметр("СвойствоГруппаКонтрагентовДляKolesatyt",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90229"));

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	               |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаВзаиморасчетовОстаток
	               |ПОМЕСТИТЬ Врем
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	               |			&Дата,
	               |			ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &интернет
	               |				И ДоговорКонтрагента.Владелец <> &Автоэксперт) КАК ВзаиморасчетыСКонтрагентамиОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Врем.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |	СУММА(Врем.СуммаВзаиморасчетовОстаток) КАК Сумма,
	               |	СУММА(ВЫБОР
	               |			КОГДА Врем.Сделка.ДатаОплаты < &ДатаОплаты
	               |				ТОГДА Врем.СуммаВзаиморасчетовОстаток
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Просроченная
	               |ПОМЕСТИТЬ Общая
	               |ИЗ
	               |	Врем КАК Врем
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Врем.ДоговорКонтрагента.Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Общая.Контрагент КАК Контрагент,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(Общая.Сумма КАК ЧИСЛО(15, 0))) < 0
	               |			ТОГДА -(ВЫРАЗИТЬ(Общая.Сумма КАК ЧИСЛО(15, 0)))
	               |		ИНАЧЕ ВЫРАЗИТЬ(Общая.Сумма КАК ЧИСЛО(15, 0))
	               |	КОНЕЦ КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА (ВЫРАЗИТЬ(Общая.Просроченная КАК ЧИСЛО(15, 0))) > (ВЫРАЗИТЬ(Общая.Сумма КАК ЧИСЛО(15, 0)))
	               |			ТОГДА ВЫРАЗИТЬ(Общая.Сумма КАК ЧИСЛО(15, 0))
	               |		ИНАЧЕ ВЫРАЗИТЬ(Общая.Просроченная КАК ЧИСЛО(15, 0))
	               |	КОНЕЦ КАК Просроченная,
	               |	ВЫБОР
	               |		КОГДА Общая.Сумма > 0
	               |			ТОГДА ""Дебиторская""
	               |		ИНАЧЕ ""Кредиторская""
	               |	КОНЕЦ КАК Вид,
	               |	КонтрагентыПоГруппам.ГруппаКонтрагента КАК ГруппаКонтрагента,
	               |	Контрагенты.НаименованиеПолное,
	               |	Контрагенты.Комментарий
	               |ИЗ
	               |	Общая КАК Общая
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты) КАК Контрагент,
	               |			ЗначенияСвойствОбъектов.Значение КАК ГруппаКонтрагента
	               |		ИЗ
	               |			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ГДЕ
	               |			ЗначенияСвойствОбъектов.Свойство = &СвойствоГруппаКонтрагентовДляKolesatyt) КАК КонтрагентыПоГруппам
	               |		ПО Общая.Контрагент = КонтрагентыПоГруппам.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО Общая.Контрагент = Контрагенты.Ссылка
	               |ГДЕ
	               |	Общая.Сумма <> 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Вид,
	               |	ГруппаКонтрагента,
	               |	Контрагент
	               |ИТОГИ
	               |	СУММА(Сумма),
	               |	СУММА(Просроченная)
	               |ПО
	               |	Вид,
	               |	ГруппаКонтрагента
	               |АВТОУПОРЯДОЧИВАНИЕ";
	ВыборкаВид = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ДебиторскаяОтбор = Новый Структура;
	//ДебиторскаяОтбор.Вставить("Вид","Дебиторская");
	//Дебиторская = Результат.Скопировать(ДебиторскаяОтбор);
	//
	//Итог = Дебиторская.Скопировать();
	//Итог.Свернуть(,"Сумма,Просроченная");
			
	шапка = Макет.ПолучитьОбласть("ШапкаДебиторка");

    ТабДок.Вывести(Шапка);

    Строка = Макет.ПолучитьОбласть("СтрокаДебиторка");
	СтрокаКонтрагент = Макет.ПолучитьОбласть("СтрокаДебиторка1");

	
	Пока ВыборкаВид.Следующий() Цикл
		Если  ВыборкаВид.Вид ="Дебиторская" тогда
			Строка.Параметры.Заполнить(ВыборкаВид);
			Строка.Параметры.Контрагент = "Итог";
			ТабДок.Вывести(Строка);
			ТабДок.НачатьГруппуСтрок();
		
			ВыборкаГруппаКонтрагентов =  ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаГруппаКонтрагентов.Следующий() Цикл
				Строка.Параметры.Заполнить(ВыборкаГруппаКонтрагентов);
				Строка.Параметры.Контрагент = ВыборкаГруппаКонтрагентов.ГруппаКонтрагента;
				ТабДок.Вывести(Строка);
				ТабДок.НачатьГруппуСтрок();
				 ВыборкаКонтрагент = ВыборкаГруппаКонтрагентов.Выбрать();
				 Пока ВыборкаКонтрагент.Следующий() Цикл
					 СтрокаКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
					// Строка.Параметры.Контрагент = ВыборкаГруппаКонтрагентов.ГруппаКонтрагента;
					 СтрокаКонтрагент.Параметры.РасшифровкаКонтрагент = ВыборкаКонтрагент.Контрагент;

					 ТабДок.Вывести(СтрокаКонтрагент);
					 
				 КонецЦикла;
				 ТабДок.ЗакончитьГруппуСтрок();
			 КонецЦикла;
			 ТабДок.ЗакончитьГруппуСтрок();
		КонецЕсли;	
	КонецЦикла;
	//Если итог.КОличество()>0 Тогда
	//
	//	Строка.Параметры.Заполнить(Итог[0]);
	//	Строка.Параметры.Контрагент = "Итог";
	//	ТабДок.Вывести(Строка);
	//	ТабДок.НачатьГруппуСтрок();
	//		 
	//	для каждого стр1 из Дебиторская Цикл
	//		 Строка = Макет.ПолучитьОбласть("СтрокаДебиторка1");

	//		 Строка.Параметры.Заполнить(стр1);
	//		 
	//		 Строка.Параметры.РасшифровкаКонтрагент = стр1.Контрагент;
	//	
	//		 ТабДок.Вывести(Строка);
	//	КонецЦикла;
	//	 	
	//	ТабДок.ЗакончитьГруппуСтрок();
	//	 
	//КонецЕсли;
	
	//Кредиторка
	ВыборкаВид.Сбросить();
	шапка = Макет.ПолучитьОбласть("ШапкаКредиторка");

	ТабДок.Вывести(Шапка);
    Строка = Макет.ПолучитьОбласть("СтрокаКредиторка");
	СтрокаКонтрагент = Макет.ПолучитьОбласть("СтрокаКредиторка1");
	
	Пока ВыборкаВид.Следующий() Цикл
		Если  ВыборкаВид.Вид ="Кредиторская" тогда
			Строка.Параметры.Заполнить(ВыборкаВид);
			Строка.Параметры.Контрагент = "Итог";
			ТабДок.Вывести(Строка);
			ТабДок.НачатьГруппуСтрок();
		
			ВыборкаГруппаКонтрагентов =  ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаГруппаКонтрагентов.Следующий() Цикл
				//Строка.Параметры.Заполнить(ВыборкаГруппаКонтрагентов);
				//Строка.Параметры.Контрагент = ВыборкаГруппаКонтрагентов.ГруппаКонтрагента;
				//ТабДок.Вывести(Строка);
				//ТабДок.НачатьГруппуСтрок();
				 ВыборкаКонтрагент = ВыборкаГруппаКонтрагентов.Выбрать();
				 Пока ВыборкаКонтрагент.Следующий() Цикл
					 СтрокаКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
					// Строка.Параметры.Контрагент = ВыборкаГруппаКонтрагентов.ГруппаКонтрагента;
					 ТабДок.Вывести(СтрокаКонтрагент);
					 
				 КонецЦикла;
				 //ТабДок.ЗакончитьГруппуСтрок();
			 КонецЦикла;
			 ТабДок.ЗакончитьГруппуСтрок();
		КонецЕсли;	
	КонецЦикла;
	//КредиторскаяОтбор = Новый Структура;
	//КредиторскаяОтбор.Вставить("Вид","Кредиторская");
	//Кредиторская = Результат.Скопировать(КредиторскаяОтбор);
	//
	//Итог = Кредиторская.Скопировать();
	//Итог.Свернуть(,"Сумма,Просроченная");
	
	//Если Итог.Количество() > 0 Тогда
	//	ИтогДебиторка = Итог[0].Сумма;
	//	ИтогДебиторкаПр = Итог[0].Просроченная;
	//КонецЕсли;
	
	
	//шапка = Макет.ПолучитьОбласть("ШапкаКредиторка");

	//ТабДок.Вывести(Шапка);

	//Строка = Макет.ПолучитьОбласть("СтрокаКредиторка");
	//
	//Если итог.КОличество()>0 Тогда
	//
	//	Строка.Параметры.Заполнить(Итог[0]);
	//	Строка.Параметры.Контрагент = "Итог";
	//	ТабДок.Вывести(Строка);
	//	ТабДок.НачатьГруппуСтрок();
	//		 
	//	для каждого стр1 из Кредиторская Цикл
	//		 Строка = Макет.ПолучитьОбласть("СтрокаКредиторка1");

	//		 Строка.Параметры.Заполнить(стр1);
	//		 Строка.Параметры.РасшифровкаКонтрагент = стр1.Контрагент;
	//	
	//		 ТабДок.Вывести(Строка);
	//	КонецЦикла;
	//	 	
	//	ТабДок.ЗакончитьГруппуСтрок();
	//	 
	//КонецЕсли;

	
	
	//ИТОГ ////////////////////////////////////////////////////////////////////////////
	
	ЗапросФОТ = новый Запрос;
	ЗапросФОТ.Текст = "ВЫБРАТЬ
	                  |	СУММА(Затраты.Сумма) КАК Сумма
	                  |ИЗ
	                  |	РегистрНакопления.Затраты КАК Затраты
	                  |ГДЕ
	                  |	(Затраты.Подразделение = &Подразделение
	                  |				И Затраты.СтатьяЗатратУпр = &СтатьяЗатратФОТ
	                  |				И Затраты.Регистратор.Контрагент = &Контрагент2
	                  |				И (Затраты.Период МЕЖДУ &НачДата И &КонДата)
	                  //|			ИЛИ Затраты.СтатьяЗатратУпр = &СтатьяЗатратНаКосяки
					  |)";
					  
	ЗапросФОТ.УстановитьПараметр("НачДата",НачДата);	
	ЗапросФОТ.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	ЗапросФОТ.УстановитьПараметр("Подразделение",Справочники.Подразделения.НайтиПоКоду("00139"));
    ЗапросФОТ.УстановитьПараметр("СтатьяЗатратФОТ",Справочники.СтатьиЗатратУПР.НайтиПоКоду("00066"));
    ЗапросФОТ.УстановитьПараметр("Контрагент2",Справочники.Контрагенты.НайтиПоКоду("91765"));
	ЗапросФОТ.УстановитьПараметр("СтатьяЗатратНаКосяки",Справочники.СтатьиЗатратУПР.НайтиПоКоду("00076"));
	НеоблагаемыеЗатраты = ЗапросФОТ.Выполнить().Выгрузить();
	СуммаСотрудник2=0;
	Если НеоблагаемыеЗатраты.Количество()>0 тогда
		 СуммаСотрудник2=?(НеоблагаемыеЗатраты[0].Сумма=null,0,НеоблагаемыеЗатраты[0].Сумма);
		 //Сообщить("Сотрудник2: "+НеоблагаемыеЗатраты[0].Сумма);
	КонецЕсли;
	
	Итог = Макет.ПолучитьОбласть("ИтогШапка");
	ТабДок.Вывести(Итог);

	СуммаНДС = ПрибыльНДС-ЗатратыНДС;
	// НДС за прошлый период
	ДатаНДС = НачалоМесяца(ДобавитьМесяц(НачДата,-1));
	ЗапросНДС = Новый Запрос;
	ЗапросНДС.УстановитьПараметр("Дата",ДатаНДС);
	ЗапросНДС.Текст = "ВЫБРАТЬ
	                  |	НДСИнтернетМагазина.Сумма
	                  |ИЗ
	                  |	РегистрСведений.НДСИнтернетМагазина КАК НДСИнтернетМагазина
	                  |ГДЕ
	                  |	НДСИнтернетМагазина.Месяц = &Дата
	                  |	И НДСИнтернетМагазина.Сумма < 0";
	РезНдс = ЗапросНДС.Выполнить().Выгрузить();
	Если РезНдс.Количество() > 0 Тогда
		СуммаНДС = СуммаНДС + РезНдс[0].Сумма;
	КонецЕсли;

	
	ДоНалога = Прибыль - Затраты - ЗатратыАЭ - СуммаНДС;
	НалогНаПрибыль = ?(ДоНалога-(СуммаНаКосяки+СуммаСотрудник2)>0,(ДоНалога-(СуммаНаКосяки+СуммаСотрудник2))*0.2,0);
	ФинРез = ДоНалога-НалогНаПрибыль;
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "1. Валовая прибыль";
	ИтогСтрока.Параметры.Сумма = Формат(Прибыль,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "2. Бонус поставщика";
	ИтогСтрока.Параметры.Сумма = Формат(СуммаБонуса,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "3. Затраты";
	ИтогСтрока.Параметры.Сумма = Формат(Затраты+ЗатратыАЭ,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "4. Сумма НДС";
	ИтогСтрока.Параметры.Сумма = Формат(СуммаНДС,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "5. Прибыль до налогообложения (с учетом бонуса) (1+2-3-4)";
	ИтогСтрока.Параметры.Сумма = Формат(ДоНалога+СуммаБонуса,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
		
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "6. Затраты, не уменьшающие прибыль";
	ИтогСтрока.Параметры.РасшФинРез="ЗатратыНеУменьшающиеПрибыль";
	ИтогСтрока.Параметры.Сумма = Формат(СуммаНаКосяки+СуммаСотрудник2,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ТабДок.НачатьГруппуСтрок();
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "		6.1 Затраты на ""косяки""";
	ИтогСтрока.Параметры.Сумма = Формат(СуммаНаКосяки,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "		6.2 Сотрудник два";
	ИтогСтрока.Параметры.Сумма = Формат(СуммаСотрудник2,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);

    ТабДок.ЗакончитьГруппуСтрок();
	
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "7. Налогооблагаемая прибыль (5+6)";
	ИтогСтрока.Параметры.Сумма = Формат(ДоНалога+СуммаБонуса+СуммаНаКосяки+СуммаСотрудник2,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "8. Налог на прибыль (7*0.2)";
	ИтогСтрока.Параметры.Сумма = Формат((ДоНалога+СуммаБонуса+СуммаНаКосяки+СуммаСотрудник2)*0.2,"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	
	ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	ИтогСтрока.Параметры.Показатель = "9. Финансовый результат (5-8)";
	//ИтогСтрока.Параметры.Сумма = Формат(ФинРез,"ЧДЦ=0");
	ИтогСтрока.Параметры.Сумма = Формат(ДоНалога+СуммаБонуса-((ДоНалога+СуммаБонуса+СуммаНаКосяки+СуммаСотрудник2)*0.2),"ЧДЦ=0");
	ТабДок.Вывести(ИтогСтрока);
	//
	//ИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	//ИтогСтрока.Параметры.Показатель = "10. Финансовый результат с учетом бонуса (9+2-2*0.2)";
	//ИтогСтрока.Параметры.Сумма = Формат(ФинРез+СуммаБонуса-СуммаБонуса*0.2,"ЧДЦ=0");
	//ТабДок.Вывести(ИтогСтрока);
	
	
	СписокИсключаемыхСкладов = новый СписокЗначений;
	СписокИсключаемыхСкладов.Добавить(Справочники.Склады.НайтиПоКоду("02203"));
	
	//Увеличение склада брак
	//20.03.17 Было
	//ЗапросСкладБрак = Новый Запрос;
	//ЗапросСкладБрак.Текст = "ВЫБРАТЬ
	//						|	ПартииТоваровНаСкладахОбороты.СтоимостьПриход
	//						|ИЗ
	//						|	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(
	//						|			&НачДата,
	//						|			&КонДата,
	//						|			Месяц,
	//						|			Склад В ИЕРАРХИИ (&СкладРозничныйБрак)
	//						|				И НЕ Склад В (&СписокИсключаемыхСкладов)) КАК ПартииТоваровНаСкладахОбороты";
	//ЗапросСкладБрак.УстановитьПараметр("НачДата",НачДата);	
	//ЗапросСкладБрак.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	//ЗапросСкладБрак.УстановитьПараметр("СкладРозничныйБрак",Справочники.Склады.НайтиПоКоду("02174"));
	//ЗапросСкладБрак.УстановитьПараметр("СписокИсключаемыхСкладов",СписокИсключаемыхСкладов);
	//					
	//РезБрак = ЗапросСкладБрак.Выполнить().Выгрузить();
	//СуммаБрака = 0;
	//Если РезБрак.Количество() > 0 Тогда
	//	СуммаБрака = РезБрак[0].СтоимостьПриход;
	//КонецЕсли;
	//стало 20.03.17 задача 23990
	
	ЗапросСкладБрак = Новый Запрос;
	ЗапросСкладБрак.Текст = "ВЫБРАТЬ
	                        |	ЗаявкаНаБракРасшифровка.Ссылка КАК ЗаявкаНаБрак,
	                        |	ЗаявкаНаБракРасшифровка.ВиновникВозникновенияДефекта,
	                        |	ЗаявкаНаБракРасшифровка.Реализация,
	                        |	ЗаявкаНаБракРасшифровка.КоличествоПринято,
	                        |	ЗаявкаНаБракРасшифровка.Номенклатура,
	                        |	ВЫБОР
	                        |		КОГДА ЗаявкаНаБракРасшифровка.Номенклатура.НоменклатурнаяГруппа = &НомГруппаЛитые
	                        |			ТОГДА 1200 * ЗаявкаНаБракРасшифровка.КоличествоПринято
	                        |		КОГДА ЗаявкаНаБракРасшифровка.Номенклатура.НоменклатурнаяГруппа = &НомГруппаШтамп
	                        |			ТОГДА 500 * ЗаявкаНаБракРасшифровка.КоличествоПринято
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК Штраф,
	                        |	ЗаявкаНаБракРасшифровка.Погашено
	                        |ПОМЕСТИТЬ втЗаявки
	                        |ИЗ
	                        |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
	                        |ГДЕ
	                        |	ЗаявкаНаБракРасшифровка.Ссылка.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	                        |	И (ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
	                        |			ИЛИ ЗаявкаНаБракРасшифровка.Ссылка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПризнатьБрак))
	                        |	И ЗаявкаНаБракРасшифровка.ВиновникВозникновенияДефекта <> ЗНАЧЕНИЕ(Перечисление.ВиновникиВозникновенияДефекта.Пустаяссылка)
	                        |	И ЗаявкаНаБракРасшифровка.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	                        |	И ЗаявкаНаБракРасшифровка.Ссылка.Проведен
	                        |	И ЗаявкаНаБракРасшифровка.Ссылка.ПометкаУдаления = ЛОЖЬ
	                        |	И ЗаявкаНаБракРасшифровка.ВиновникВозникновенияДефекта = &ВиновникВозникновенияДефектаКолесаТут
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	втЗаявки.ЗаявкаНаБрак,
	                        |	втЗаявки.ВиновникВозникновенияДефекта,
	                        |	втЗаявки.Реализация,
	                        |	втЗаявки.КоличествоПринято,
	                        |	втЗаявки.Номенклатура,
	                        |	втЗаявки.Штраф,
	                        |	ВЫРАЗИТЬ(ЕСТЬNULL(взСебестоимость.Стоимость, 0) / ЕСТЬNULL(взСебестоимость.Количество, 1) * втЗаявки.КоличествоПринято КАК ЧИСЛО(15, 2)) КАК Себестоимость,
	                        |	втЗаявки.Погашено,
	                        |	""                                      "" КАК УточнениеПоВиновнику
	                        |ИЗ
	                        |	втЗаявки КАК втЗаявки
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                        |			ПродажиСебестоимость.Регистратор КАК Регистратор,
	                        |			ПродажиСебестоимость.Номенклатура КАК Номенклатура,
	                        |			СУММА(ПродажиСебестоимость.Количество) КАК Количество,
	                        |			СУММА(ПродажиСебестоимость.Стоимость) КАК Стоимость
	                        |		ИЗ
	                        |			РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
	                        |		ГДЕ
	                        |			(ПродажиСебестоимость.Регистратор, ПродажиСебестоимость.Номенклатура) В
	                        |					(ВЫБРАТЬ
	                        |						втЗаявки.Реализация,
	                        |						втЗаявки.Номенклатура
	                        |					ИЗ
	                        |						втЗаявки)
	                        |		
	                        |		СГРУППИРОВАТЬ ПО
	                        |			ПродажиСебестоимость.Номенклатура,
	                        |			ПродажиСебестоимость.Регистратор) КАК взСебестоимость
	                        |		ПО втЗаявки.Реализация = взСебестоимость.Регистратор
	                        |			И втЗаявки.Номенклатура = взСебестоимость.Номенклатура
	                        |ИТОГИ
	                        |	СУММА(Себестоимость)
	                        |ПО
	                        |	ОБЩИЕ";
	ЗапросСкладБрак.УстановитьПараметр("НачДата",НачДата);	
	ЗапросСкладБрак.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	ЗапросСкладБрак.УстановитьПараметр("ВиновникВозникновенияДефектаКолесаТут",Перечисления.ВиновникиВозникновенияДефекта.ИнтернетМагазинKOLESATYT);
	ЗапросСкладБрак.УстановитьПараметр("НомГруппаЛитые", Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026"));
	ЗапросСкладБрак.УстановитьПараметр("НомГруппаШтамп", Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049"));
	//ЗапросСкладБрак.УстановитьПараметр("СписокИсключаемыхСкладов",СписокИсключаемыхСкладов);
						
	РезБрак = ЗапросСкладБрак.Выполнить().Выгрузить();
	СуммаБрака = 0;
	Если РезБрак.Количество() > 0 Тогда
		СуммаБрака = РезБрак[0].Себестоимость;
	КонецЕсли;

	
	
    ИтогСтрока = Макет.ПолучитьОбласть("СтрокаСкладБрак");
	ИтогСтрока.Параметры.Сумма = Формат(СуммаБрака,"ЧДЦ=0");
	ИтогСтрока.Параметры.РасшифровкаСкладБрак="РасшифровкаСкладБрак";
	ТабДок.Вывести(ИтогСтрока);
	
	
	
	РезультатЗапроса = ПолучитьЗаявкиНаВозврат();
	
	ВыборкаИтого = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИтогВозвраты = Макет.ПолучитьОбласть("ШапкаЗаявкиНаВозврат");
	КонтрагентВозвраты = Макет.ПолучитьОбласть("СтрокаВозвратКонтрагент");
	строкаВозвраты = Макет.ПолучитьОбласть("СтрокаЗаявкаНаВозврат");

	ТабДок.НачатьАвтогруппировкуСтрок();
	Пока ВыборкаИтого.Следующий() цикл
		ИтогВозвраты.Параметры.ДатаПервойЗаявки = Формат(ВыборкаИтого.ЗаявкаНаВозвратТоваровДата,"ДФ=dd.MM.yyyy");
		ИтогВозвраты.Параметры.Сумма = ВыборкаИтого.Сумма;
		
		ТабДок.Вывести(ИтогВозвраты,1);
		
		ВыборкаКонтрагент = ВыборкаИтого.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() цикл
			КонтрагентВозвраты.Параметры.Контрагент = ВыборкаКонтрагент.Контрагент;
			КонтрагентВозвраты.Параметры.ДатаПервойЗаявки = ВыборкаКонтрагент.ЗаявкаНаВозвратТоваровДата;
			КонтрагентВозвраты.Параметры.Сумма = ВыборкаКонтрагент.Сумма;
			ТабДок.Вывести(КонтрагентВозвраты,2);
			
			ВыборкаЗаявка = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗаявка.Следующий() цикл
				строкаВозвраты.Параметры.ЗаявкаНаВозврат = ВыборкаЗаявка.ЗаявкаНаВозвратТоваров;
				строкаВозвраты.Параметры.Сумма = ВыборкаЗаявка.Сумма;
				ТабДок.Вывести(строкаВозвраты,3);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	
	//
	//Непроведенный брак
	ЗапросНепроведенныйБрак = новый Запрос;
	ЗапросНепроведенныйБрак.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	ЗаявкаНаВозвратТоваров.Ссылка КАК ЗаявкаНаВозврат,
	                              |	ЗаявкаНаВозвратТоваров.Контрагент
	                              |ПОМЕСТИТЬ втНеПроведенныеЗаявкиНаВозврат
	                              |ИЗ
	                              |	Документ.ЗаявкаНаВозвратТоваров КАК ЗаявкаНаВозвратТоваров
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
	                              |		ПО ЗаявкаНаВозвратТоваров.Ссылка = ЗаявкаНаБрак.ДокументОснование
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоОтветственномуХранению КАК ОперацияПоОтветственномуХранению
	                              |		ПО ЗаявкаНаВозвратТоваров.Ссылка = ОперацияПоОтветственномуХранению.ДокументОснование
	                              |ГДЕ
	                              |	(ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.Новая)
	                              |			ИЛИ ЗаявкаНаБрак.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявкиНаБрак.ПустаяСсылка))
	                              |	И ЗаявкаНаБрак.Проведен
	                              |	И ЗаявкаНаВозвратТоваров.Проведен
	                              |	И ОперацияПоОтветственномуХранению.Проведен
	                              |	И ЗаявкаНаВозвратТоваров.Подразделение = &ПодразделениеИМ
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |ВЫБРАТЬ
	                              |	ЗаявкаНаВозвратТоваровТовары.Ссылка КАК ЗаявкаНаВозврат,
	                              |	СУММА(ВЫБОР
	                              |			КОГДА ЗаявкаНаВозвратТоваровТовары.Сумма = 0
	                              |				ТОГДА ЗаявкаНаВозвратТоваровТовары.Количество * ЗаявкаНаВозвратТоваровТовары.ЦенаРеализации
	                              |			ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Сумма
	                              |		КОНЕЦ) КАК Сумма,
	                              |	втНеПроведенныеЗаявкиНаВозврат.Контрагент КАК Контрагент
	                              |ИЗ
	                              |	втНеПроведенныеЗаявкиНаВозврат КАК втНеПроведенныеЗаявкиНаВозврат
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	                              |		ПО втНеПроведенныеЗаявкиНаВозврат.ЗаявкаНаВозврат = ЗаявкаНаВозвратТоваровТовары.Ссылка
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	ЗаявкаНаВозвратТоваровТовары.Ссылка,
	                              |	втНеПроведенныеЗаявкиНаВозврат.Контрагент
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ЗаявкаНаВозврат
	                              |ИТОГИ
	                              |	СУММА(Сумма)
	                              |ПО
	                              |	ОБЩИЕ,
	                              |	Контрагент
	                              |АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросНепроведенныйБрак.УстановитьПараметр("ПодразделениеИМ",Справочники.Подразделения.НайтиПоКоду("00139"));//Отдел интернет-продаж							  
	
	ИтогВозвраты = Макет.ПолучитьОбласть("ШапкаНепроведенныйБрак");
	КонтрагентВозвраты = Макет.ПолучитьОбласть("СтрокаНепроведенныйБракКонтрагент");
	строкаВозвраты = Макет.ПолучитьОбласть("СтрокаНепроведенныйБракЗаявкаНаВозврат");

	
	ВыборкаИтого = ЗапросНепроведенныйБрак.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	Пока ВыборкаИтого.Следующий() Цикл
		ИтогВозвраты.Параметры.Заполнить(ВыборкаИтого);
		ТабДок.Вывести(ИтогВозвраты,1);
		ВыборкаКонтрагенты = ВыборкаИтого.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		пока ВыборкаКонтрагенты.Следующий() Цикл
			КонтрагентВозвраты.Параметры.Заполнить(ВыборкаКонтрагенты);
			ТабДок.Вывести(КонтрагентВозвраты,2);
			выборкаЗаявки = ВыборкаКонтрагенты.Выбрать();
			Пока выборкаЗаявки.Следующий() цикл
				строкаВозвраты.Параметры.Заполнить(выборкаЗаявки);
				ТабДок.Вывести(строкаВозвраты,3);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	//
	
	///Потери  / повреждения
	АрмадиллоТК = Справочники.Контрагенты.НайтиПоКоду("94121");
	РозничныйДПД = Справочники.Контрагенты.НайтиПоКоду("94247");
	ПодорожникТК = Справочники.Контрагенты.НайтиПоКоду("94346");
	РозничныйПодорожник = Справочники.Контрагенты.НайтиПоКоду("П005342");
	СписокТК  = новый СписокЗначений;
	СписокТК.Добавить(АрмадиллоТК);
	СписокТК.Добавить(ПодорожникТК);
	
	СписокРозничныхПокупателей  = новый СписокЗначений;
	СписокРозничныхПокупателей.Добавить(РозничныйДПД);
	СписокРозничныхПокупателей.Добавить(РозничныйПодорожник);
	  
	ЗапросПотери= новый Запрос;
	ЗапросПотери.Текст = "ВЫБРАТЬ
	                     |	ВЫБОР
	                     |		КОГДА ПродажиОбороты.ДоговорКонтрагента.Владелец = &Армадилло
	                     |			ТОГДА &РозничныйДПД
	                     |		КОГДА ПродажиОбороты.ДоговорКонтрагента.Владелец = &ПодорожникТК
	                     |			ТОГДА &РозничныйПодорожник
	                     |		ИНАЧЕ """"
	                     |	КОНЕЦ КАК Контрагент2,
	                     |	СУММА(ВЫБОР
	                     |			КОГДА ПродажиОбороты.ДоговорКонтрагента.Наименование ПОДОБНО ""%претензии утерянный%""
	                     |				ТОГДА ПродажиОбороты.КоличествоОборот
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ) КАК ПотериШт,
	                     |	СУММА(ВЫБОР
	                     |			КОГДА ПродажиОбороты.ДоговорКонтрагента.Наименование ПОДОБНО ""%претензии утерянный%""
	                     |				ТОГДА ПродажиОбороты.СтоимостьОборот
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ) КАК ПотериСумма,
	                     |	СУММА(ВЫБОР
	                     |			КОГДА ПродажиОбороты.ДоговорКонтрагента.Наименование ПОДОБНО ""%претензии поврежденый%""
	                     |				ТОГДА ПродажиОбороты.КоличествоОборот
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ) КАК ПоврежденоШт,
	                     |	СУММА(ВЫБОР
	                     |			КОГДА ПродажиОбороты.ДоговорКонтрагента.Наименование ПОДОБНО ""%претензии поврежденый%""
	                     |				ТОГДА ПродажиОбороты.СтоимостьОборот
	                     |			ИНАЧЕ 0
	                     |		КОНЕЦ) КАК ПоврежденоСумма
	                     |ПОМЕСТИТЬ втПретензии
	                     |ИЗ
	                     |	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, Регистратор, ДоговорКонтрагента.Владелец В (&СписокТК)) КАК ПродажиОбороты
	                     |ГДЕ
	                     |	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ВЫБОР
	                     |		КОГДА ПродажиОбороты.ДоговорКонтрагента.Владелец = &Армадилло
	                     |			ТОГДА &РозничныйДПД
	                     |		КОГДА ПродажиОбороты.ДоговорКонтрагента.Владелец = &ПодорожникТК
	                     |			ТОГДА &РозничныйПодорожник
	                     |		ИНАЧЕ """"
	                     |	КОНЕЦ
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	ПродажиОбороты.ДоговорКонтрагента.Владелец,
	                     |	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот,
	                     |	СУММА(ПродажиОбороты.СтоимостьОборот) КАК СтоимостьОборот
	                     |ПОМЕСТИТЬ втПродажиОбщие
	                     |ИЗ
	                     |	РегистрНакопления.Продажи.Обороты(&НачПериода, &КонПериода, Регистратор, ДоговорКонтрагента.Владелец В (&СписокРозничныхПокупателей)) КАК ПродажиОбороты
	                     |ГДЕ
	                     |	ПродажиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	                     |
	                     |СГРУППИРОВАТЬ ПО
	                     |	ПродажиОбороты.ДоговорКонтрагента.Владелец
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	втПретензии.Контрагент2 КАК Контрагент2,
	                     |	втПретензии.ПотериШт КАК ПотериШт,
	                     |	втПретензии.ПотериСумма КАК ПотериСумма,
	                     |	ЕСТЬNULL(втПродажиОбщие.КоличествоОборот, 0) КАК КоличествоОбщие,
	                     |	ЕСТЬNULL(втПродажиОбщие.СтоимостьОборот, 0) КАК СтоимостьОбщие,
	                     |	втПретензии.ПоврежденоСумма КАК ПоврежденоСумма,
	                     |	втПретензии.ПоврежденоШт КАК ПоврежденоШт
	                     |ИЗ
	                     |	втПретензии КАК втПретензии
	                     |		ЛЕВОЕ СОЕДИНЕНИЕ втПродажиОбщие КАК втПродажиОбщие
	                     |		ПО втПретензии.Контрагент2 = втПродажиОбщие.ДоговорКонтрагентаВладелец
	                     |
	                     |УПОРЯДОЧИТЬ ПО
	                     |	Контрагент2
	                     |ИТОГИ
	                     |	СУММА(ПотериШт),
	                     |	СУММА(ПотериСумма),
	                     |	СУММА(КоличествоОбщие),
	                     |	СУММА(СтоимостьОбщие),
	                     |	СУММА(ПоврежденоСумма),
	                     |	СУММА(ПоврежденоШт)
	                     |ПО
	                     |	ОБЩИЕ
	                     |АВТОУПОРЯДОЧИВАНИЕ";
						 ЗапросПотери.УстановитьПараметр("НачПериода",НачДата);
						 ЗапросПотери.УстановитьПараметр("КонПериода",КонецДня(КонДата));
						 ЗапросПотери.УстановитьПараметр("СписокТК",СписокТК);
						 ЗапросПотери.УстановитьПараметр("СписокРозничныхПокупателей",СписокРозничныхПокупателей);
						 ЗапросПотери.УстановитьПараметр("Армадилло",АрмадиллоТК);
						 ЗапросПотери.УстановитьПараметр("РозничныйДПД",РозничныйДПД);
						 ЗапросПотери.УстановитьПараметр("ПодорожникТК",ПодорожникТК);
						 ЗапросПотери.УстановитьПараметр("РозничныйПодорожник",РозничныйПодорожник);
						 
						 ОблатьШапкаПотеряноВТК = Макет.ПолучитьОбласть("ШапкаПотеряноВТК");
						 ОблатьСтрокаПотеряноВТК = Макет.ПолучитьОбласть("СтрокаПотери");
						 ТабДок.НачатьАвтогруппировкуСтрок();
						 
						 выборкаИтого = ЗапросПотери.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						 пока ВыборкаИтого.Следующий() Цикл
							 ОблатьШапкаПотеряноВТК.Параметры.Заполнить(ВыборкаИтого);
							ОблатьШапкаПотеряноВТК.Параметры.ПроцентПотерь=100*ВыборкаИтого.ПотериСумма/ВыборкаИтого.СтоимостьОбщие;
							 ТабДок.Вывести(ОблатьШапкаПотеряноВТК,1);
							 ВыборкаКонтрагент  = ВыборкаИтого.Выбрать();
							 Пока ВыборкаКонтрагент.Следующий() цикл
								 ОблатьСтрокаПотеряноВТК.Параметры.Заполнить(ВыборкаКонтрагент);
								 ОблатьСтрокаПотеряноВТК.Параметры.ПроцентПотерь=100*ВыборкаКонтрагент.ПотериСумма/ВыборкаКонтрагент.СтоимостьОбщие;
								 ТабДок.Вывести(ОблатьСтрокаПотеряноВТК,2);
							 КонецЦикла;
						 КонецЦикла;
						 ТабДок.ЗакончитьАвтогруппировкуСтрок();
						 
						 //повреждено
						 ОблатьШапкаПотеряноВТК = Макет.ПолучитьОбласть("ШапкаПоврежденоВТК");
						 ОблатьСтрокаПотеряноВТК = Макет.ПолучитьОбласть("СтрокаПовреждено");
						 ТабДок.НачатьАвтогруппировкуСтрок();
						 
						 выборкаИтого.Сбросить();
						 
						 выборкаИтого = ЗапросПотери.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						 пока ВыборкаИтого.Следующий() Цикл
							 ОблатьШапкаПотеряноВТК.Параметры.Заполнить(ВыборкаИтого);
							ОблатьШапкаПотеряноВТК.Параметры.ПроцентПовреждено=100*ВыборкаИтого.ПоврежденоСумма/ВыборкаИтого.СтоимостьОбщие;
							 ТабДок.Вывести(ОблатьШапкаПотеряноВТК,1);
							 ВыборкаКонтрагент  = ВыборкаИтого.Выбрать();
							 Пока ВыборкаКонтрагент.Следующий() цикл
								 ОблатьСтрокаПотеряноВТК.Параметры.Заполнить(ВыборкаКонтрагент);
								 ОблатьСтрокаПотеряноВТК.Параметры.ПроцентПовреждено=100*ВыборкаКонтрагент.ПоврежденоСумма/ВыборкаКонтрагент.СтоимостьОбщие;
								 ТабДок.Вывести(ОблатьСтрокаПотеряноВТК,2);
							 КонецЦикла;
						 КонецЦикла;
						 ТабДок.ЗакончитьАвтогруппировкуСтрок();

                         
	///Потери
	
	
	
	ТабДок.ТолькоПросмотр = Истина;
	
    возврат ТабДок;
КонецФункции

Функция ОбъединитьТабл(Т1,Т2)
	ТабОбщ = Т1.Скопировать();
	
	Для каждого стр из Т2 цикл
		нстр = ТабОбщ.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, стр);
	КонецЦикла;
	
	Возврат ТабОбщ;
КонецФункции



Функция ПолучитьЗаявкиНаВозврат()
	
	СписокИсключаемых = новый СписокЗначений;
	СписокИсключаемых.Добавить(Справочники.Контрагенты.НайтиПоКоду("П000382"));
	СписокИсключаемых.Добавить(Справочники.Контрагенты.НайтиПоКоду("90211"));
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ЗаявкаНаВозвратТоваровТовары.Ссылка КАК Ссылка,
	             |	ЗаявкаНаВозвратТоваровТовары.Реализация.Контрагент
	             |ИЗ
	             |	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	             |ГДЕ
	             |	ЗаявкаНаВозвратТоваровТовары.Реализация.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = &НаправлениеПродаж
	             |	И ЗаявкаНаВозвратТоваровТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	             |	И ЗаявкаНаВозвратТоваровТовары.Ссылка.Контрагент <> ЗНАЧЕНИЕ(Справочник.контрагенты.пустаяссылка)
	             |	И НЕ ЗаявкаНаВозвратТоваровТовары.Ссылка.Контрагент В (&СписокИсключаемых)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Ссылка";
				 
				 Запрос.УстановитьПараметр("СписокИсключаемых", СписокИсключаемых);

				 Запрос.УстановитьПараметр("НаправлениеПродаж", Справочники.НаправленияПродаж.НайтиПоКоду("16"));
	Рез = Запрос.Выполнить().Выбрать();
	СписокВозвратов = новый СписокЗначений;
	пока Рез.Следующий() цикл
		СписокВозвратов.Добавить(рез.Ссылка);
	КонецЦикла;
	//тз = Документы.ЗаявкаНаВозвратТоваров.ПроверитьЕстьлиВозвраты(СписокВозвратов);
	тз = ПроверитьЕстьлиВозвраты(СписокВозвратов);
	табСтатусов = новый ТаблицаЗначений;
	табСтатусов.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаВозвратТоваров"));
	табСтатусов.Колонки.Добавить("Статус",ПолучитьОписаниеТиповСтроки(50));
	
	Для каждого стр из тз цикл
		нстр = табСтатусов.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	//тз.ВыбратьСтроку();
	
	
	мвт = новый МенеджерВременныхТаблиц;
	Запрос2 = новый Запрос;
	Запрос2.МенеджерВременныхТаблиц = мвт;
	Запрос2.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	              |	тзСтатусы.Ссылка,
	              |	тзСтатусы.Статус
	              |ПОМЕСТИТЬ втСтатусы
	              |ИЗ
	              |	&тзСтатусы КАК тзСтатусы
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЗаявкаНаВозвратТоваровТовары.Ссылка КАК ЗаявкаНаВозвратТоваров,
	              |	ЗаявкаНаВозвратТоваровТовары.Реализация,
	              |	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	              |	ЗаявкаНаВозвратТоваровТовары.Количество,
	              |	ЗаявкаНаВозвратТоваровТовары.ЦенаРеализации,
	              |	ЗаявкаНаВозвратТоваровТовары.Сумма,
	              |	втСтатусы.Статус
	              |ПОМЕСТИТЬ вт
	              |ИЗ
	              |	втСтатусы КАК втСтатусы
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	              |		ПО втСтатусы.Ссылка = ЗаявкаНаВозвратТоваровТовары.Ссылка
	              |ГДЕ
	              |	втСтатусы.Статус = ""0.Нет возвратов""
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	вт.ЗаявкаНаВозвратТоваров КАК ЗаявкаНаВозвратТоваров,
	              |	вт.Реализация КАК Реализация,
	              |	вт.Номенклатура КАК Номенклатура,
	              |	вт.Количество,
	              |	вт.Статус,
	              |	ЕСТЬNULL(зРеализация.Цена, 0) КАК ЦенаРеализация,
	              |	ЕСТЬNULL(зРеализация.Цена, 0) * вт.Количество КАК Сумма,
	              |	вт.ЗаявкаНаВозвратТоваров.Дата КАК ЗаявкаНаВозвратТоваровДата,
	              |	вт.ЗаявкаНаВозвратТоваров.Контрагент КАК Контрагент
	              |ИЗ
	              |	вт КАК вт
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	              |			РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	              |			СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	              |			МАКСИМУМ(РеализацияТоваровУслугТовары.Цена) КАК Цена,
	              |			СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма
	              |		ИЗ
	              |			Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	              |		ГДЕ
	              |			РеализацияТоваровУслугТовары.Ссылка В
	              |					(ВЫБРАТЬ
	              |						вт.Реализация
	              |					ИЗ
	              |						вт КАК вт)
	              |		
	              |		СГРУППИРОВАТЬ ПО
	              |			РеализацияТоваровУслугТовары.Номенклатура,
	              |			РеализацияТоваровУслугТовары.Ссылка) КАК зРеализация
	              |		ПО вт.Реализация = зРеализация.Ссылка
	              |			И вт.Номенклатура = зРеализация.Номенклатура
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ЗаявкаНаВозвратТоваров
	              |ИТОГИ
	              |	СУММА(Сумма),
	              |	МИНИМУМ(ЗаявкаНаВозвратТоваровДата)
	              |ПО
	              |	ОБЩИЕ,
	              |	Контрагент,
	              |	ЗаявкаНаВозвратТоваров
	              |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос2.УстановитьПараметр("тзСтатусы",табСтатусов);
	Рез=Запрос2.Выполнить();
	
	Возврат Рез;
	
КонецФункции

Функция ПолучитьТаблицуВалИзВнешней()
	
	КЧ = Новый КвалификаторыЧисла(12,2);
    КС = Новый КвалификаторыСтроки(20);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
    Массив.Очистить();
    Массив.Добавить(Тип("Число"));
    ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ВидЗаказа", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(50)));
	Таблица.Колонки.Добавить("Партнер", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(50)));
	Таблица.Колонки.Добавить("Точка", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(50)));
	Таблица.Колонки.Добавить("Номенклатура",ОписаниеТиповС);
	Таблица.Колонки.Добавить("Количество",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("КоличествоБазовыхЕд",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("Стоимость",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("Себестоимость",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("ВаловаяПрибыль",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("РентабельностьПродаж",ОписаниеТиповЧ);
	Таблица.Колонки.Добавить("ПроцентНаценки",ОписаниеТиповЧ);
	
	Запрос = ОбъектПодключения.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК Период,
	|	ТаблицаРегистра.Номенклатура.Код КАК Номенклатура,
	|	СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
	|	СУММА(ТаблицаРегистра.КоличествоОборот * ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	|	СУММА(ТаблицаРегистра.СтоимостьОборот) КАК Стоимость,
	|	СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) КАК Себестоимость,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	|		КОНЕЦ) - СУММА(ВЫБОР
	|			КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	|		КОНЕЦ) КАК ВаловаяПрибыль,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаРегистра.СтоимостьОборот <> 0
	|					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистра.СтоимостьОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот <> 0
	|					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистраСебестоимость.СтоимостьОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаРегистра.ЗаказПокупателя.Подразделение.Родитель) КАК Точка,
	|	""ИП Скрипченко"" КАК Партнер,
	|	""Партнерские точки"" КАК ВидЗаказа,
	|   0 как НДС
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, Регистратор, ЗаказПокупателя.ТипЗаказа = ЗНАЧЕНИЕ(Перечисление.ТипыЗаказовПокупателей.КолесаТУТ)) КАК ТаблицаРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&НачДата, &КонДата, Регистратор, ) КАК ТаблицаРегистраСебестоимость
	|		ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
	|			И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
	|			И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
	|			И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
	|			И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистра.Номенклатура.Код,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаРегистра.ЗаказПокупателя.Подразделение.Родитель),
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)
	|АВТОУПОРЯДОЧИВАНИЕ";


	Запрос.УстановитьПараметр("НачДата",НачДата);
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого стр из Рез Цикл
		нов = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(нов,стр);
	КонецЦикла;
		Возврат Таблица;
КонецФункции

Функция ПроверитьЕстьлиВозвраты(СписЗаказовНаВозврат) экспорт
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	             |	ЗаявкаНаВозвратТоваровТовары.Реализация,
	             |	ЗаявкаНаВозвратТоваровТовары.Ссылка,
	             |	СУММА(ЗаявкаНаВозвратТоваровТовары.Количество) КАК Количество
	             |ПОМЕСТИТЬ втЗаявка
	             |ИЗ
	             |	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	             |ГДЕ
	             |	ЗаявкаНаВозвратТоваровТовары.Ссылка В(&СписЗаказовНаВозврат)
	             |	И ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата >= &НачПер
	             |	И ЗаявкаНаВозвратТоваровТовары.Ссылка.Дата <= &КонПер
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	             |	ЗаявкаНаВозвратТоваровТовары.Реализация,
	             |	ЗаявкаНаВозвратТоваровТовары.Ссылка
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ПродажиОбороты.ДокументПродажи,
	             |	ПродажиОбороты.Номенклатура,
	             |	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоОборот,
	             |	ПродажиОбороты.Регистратор.ЗаявкаОснование
	             |ПОМЕСТИТЬ втВозвраты
	             |ИЗ
	             |	РегистрНакопления.Продажи.Обороты(
	             |			&НачВозврата,
	             |			,
	             |			Регистратор,
	             |			ДокументПродажи В
	             |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |						втЗаявка.Реализация
	             |					ИЗ
	             |						втЗаявка КАК втЗаявка)
	             |				И Номенклатура В
	             |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |						втЗаявка.Номенклатура
	             |					ИЗ
	             |						втЗаявка КАК втЗаявка)) КАК ПродажиОбороты
	             |ГДЕ
	             |	ПродажиОбороты.КоличествоОборот < 0
	             |	И ПродажиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ПродажиОбороты.Номенклатура,
	             |	ПродажиОбороты.ДокументПродажи,
	             |	ПродажиОбороты.Регистратор.ЗаявкаОснование
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
	             |	СУММА(ТоварыНаОтветственномХраненииОбороты.КоличествоОборот) КАК КоличествоОборот,
	             |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование,
	             |	МАКСИМУМ(ТоварыНаОтветственномХраненииОбороты.Регистратор.Дата) КАК РегистраторДата
	             |ПОМЕСТИТЬ втОТХ
	             |ИЗ
	             |	РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(
	             |			&НачВозврата,
	             |			,
	             |			Регистратор,
	             |			Номенклатура В
	             |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |					втЗаявка.Номенклатура
	             |				ИЗ
	             |					втЗаявка КАК втЗаявка)) КАК ТоварыНаОтветственномХраненииОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
	             |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втЗаявка.Ссылка КАК Ссылка,
	             |	втЗаявка.Реализация КАК Реализация,
	             |	втЗаявка.Номенклатура КАК Номенклатура,
	             |	втЗаявка.Количество + ЕСТЬNULL(втВозвраты.КоличествоОборот, 0) КАК ЕстьВозврат,
	             |	втЗаявка.Количество КАК Количество,
	             |	втОТХ.КоличествоОборот КАК КоличествоОТХ,
	             |	втОТХ.РегистраторДата
	             |ПОМЕСТИТЬ Врем
	             |ИЗ
	             |	втЗаявка КАК втЗаявка
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втВозвраты КАК втВозвраты
	             |		ПО втЗаявка.Номенклатура = втВозвраты.Номенклатура
	             |			И втЗаявка.Реализация = втВозвраты.ДокументПродажи
	             |			И втЗаявка.Ссылка = втВозвраты.РегистраторЗаявкаОснование
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втОТХ КАК втОТХ
	             |		ПО втЗаявка.Номенклатура = втОТХ.Номенклатура
	             |			И втЗаявка.Ссылка = втОТХ.РегистраторДокументОснование
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Врем.Ссылка,
	             |	СУММА(Врем.ЕстьВозврат) КАК ЕстьВозврат,
	             |	СУММА(Врем.Количество) КАК Количество,
	             |	СУММА(ЕСТЬNULL(Врем.КоличествоОТХ, 0)) КАК КоличествоОТХ,
	             |	МАКСИМУМ(ЕСТЬNULL(Врем.РегистраторДата, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаОТХ
	             |ИЗ
	             |	Врем КАК Врем
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Врем.Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Врем.Ссылка.Дата
	             |АВТОУПОРЯДОЧИВАНИЕ";
				 
				 Запрос.УстановитьПараметр("СписЗаказовНаВозврат",СписЗаказовНаВозврат);
				 НачПер = СписЗаказовНаВозврат[0].Значение.Дата;
				 КонПер = СписЗаказовНаВозврат[ СписЗаказовНаВозврат.Количество()-1 ].Значение.Дата;
				 для каждого стр1 из СписЗаказовНаВозврат цикл
					 если стр1.Значение.Дата < НачПер тогда
						 НачПер = стр1.Значение.Дата;
					 КонецЕсли;
					 если стр1.Значение.Дата > КонПер тогда
						 КонПер = стр1.Значение.Дата;
					 КонецЕсли;	 
				 КонецЦикла;	 
				 Запрос.УстановитьПараметр("НачПер", НачПер);
				 Запрос.УстановитьПараметр("КонПер", КонПер);
				 
				 НачВозвр = ДобавитьМесяц( НачалоМесяца(начПер) , -1);  //возвраты могут быть раньше заявок... на 2 месяца не более
				 Запрос.УстановитьПараметр("НачВозврата", НачВозвр);
				 
		табл = Запрос.Выполнить().Выгрузить();
		
		//табл.Свернуть("Ссылка","ЕстьВозврат,Количество,КоличествоОТХ");	///// Плотников
		
		табл.Колонки.Добавить("Статус");
		
		для каждого стр1 из табл цикл
			Если стр1.Количество=0 тогда
				стр1.Статус = "9.Нет товаров в заявке!";
			ИначеЕсли стр1.ЕстьВозврат=стр1.Количество тогда // по количеству в заявке!
				стр1.Статус = "0.Нет возвратов";
			ИначеЕсли стр1.ЕстьВозврат=0 тогда // кол в заявке = кол. всех возвратов
				стр1.Статус = "1.Есть все возвраты";
			иначеЕсли стр1.ЕстьВозврат>0 тогда
				стр1.Статус = "2.Возвраты есть частично";
			иначеЕсли стр1.ЕстьВозврат<0 тогда
				стр1.Статус = "3.Возврат больше заявки";
			КонецЕсли;	
		КонецЦикла;
	
	возврат  табл;
КонецФункции

Функция ПолучитьДокИзСхемы(Макет, таб,Заголовок) 
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("тз", таб);
	//Получаем схему из макета
    СхемаКомпоновкиДанных = ПолучитьМакет(Макет);

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек2 = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек2.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек2.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек2.Настройки;
    
        //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СвойствоВодитель",         мСвойствоВодитель);
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок",            Заголовок);
    
        //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    //Результат = ЭлементыФормы.ПолеМатериалы;
	Результат = Новый ТабличныйДокумент();
	//Результат.Очистить();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Результат.ОтображатьЗаголовки = Ложь;
    Результат.ОтображатьСетку = Ложь;
	
	Возврат  Результат;
КонецФункции

ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
