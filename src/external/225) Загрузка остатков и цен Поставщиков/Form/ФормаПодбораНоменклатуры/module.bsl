
Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	//НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Контрагент.Использование = Истина;
	//НаборЗаписей.Отбор.Контрагент.Значение      = КонтрагентПриемник;
	//НаборЗаписей.Прочитать();
	//
	//ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
	//
	//МетаданныеРегистра = НаборЗаписей.Метаданные();
	//СкопированоЗаписейНоменклатуры = 0;
	//
	//Для каждого Запись из РегистрСведенийНаборЗаписей Цикл
	//	
	//	Если Запись.Номенклатура = справочники.Номенклатура.ПустаяСсылка() тогда
	//			Если Перезапись тогда
	//				сообщить("Поле Номенклатура - обязательно для заполнения!", СтатусСообщения.Внимание);	
	//			КонецЕсли;	
	//			продолжить;
	//	КонецЕсли;	
	//	
	//	СтруктураПоиска = Новый Структура("Контрагент,Номенклатура,ХарактеристикаНоменклатуры",КонтрагентПриемник,Запись.Номенклатура,Запись.ХарактеристикаНоменклатуры);
	//	
	//	// если такая номенклатура уже есть - ее не переносим
	//	строкиУжеЕсть = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
	//	Если строкиУжеЕсть.Количество()>0 Тогда
	//		
	//		Если Перезапись тогда
	//			НоваяЗапись = строкиУжеЕсть[0];
	//			сообщить("Запись для "+СокрЛП(Запись.Номенклатура.Наименование)+" "+СокрЛП(Запись.ХарактеристикаНоменклатуры.Наименование)+" перезаписана!", СтатусСообщения.Информация);
	//		иначе
	//			сообщить("Запись "+СокрЛП(Запись.Номенклатура.Наименование)+" "+СокрЛП(Запись.ХарактеристикаНоменклатуры.Наименование)+" уже существует и НЕ перезаписана!", СтатусСообщения.Внимание);
	//			Продолжить;
	//		КонецЕсли;
	//		
	//	иначе // нет такой записи	
	//		НоваяЗапись = ТаблицаНабораЗаписей.Добавить();  
	//		сообщить("Добавлена НОВАЯ Запись для "+СокрЛП(Запись.Номенклатура.Наименование)+" "+СокрЛП(Запись.ХарактеристикаНоменклатуры.Наименование)+"!", СтатусСообщения.Информация);
	//	КонецЕсли;
	//	
	//	НоваяЗапись.Контрагент =  КонтрагентПриемник;
	//	
	//	// измерения
	//	Для индекс = 0 по МетаданныеРегистра.Измерения.Количество()-1 Цикл
	//		Измерение = МетаданныеРегистра.Измерения[индекс].Имя;
	//		Если Измерение <> "Контрагент" Тогда
	//			НоваяЗапись[Измерение] =  Запись[Измерение];
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	// ресурсы
	//	Для индекс = 0 по МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
	//		Ресурс = МетаданныеРегистра.Ресурсы[индекс].Имя;
	//		Если Ресурс="ЕдиницаНоменклатурыКонтрагента" тогда
	//			НоваяЗапись[Ресурс] = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(796); // шт.	
	//		иначе
	//			НоваяЗапись[Ресурс] =  СокрЛП(Запись[Ресурс]);  //+++ остальные - строки!
	//		КонецЕсли;	
	//	КонецЦикла;
	//	
	//	СкопированоЗаписейНоменклатуры = СкопированоЗаписейНоменклатуры + 1;
	//КонецЦикла;
	//
	//Попытка
	//	Если СкопированоЗаписейНоменклатуры>0 тогда
	//		
	//	НаборЗаписей.Загрузить( ТаблицаНабораЗаписей ); //+++ с перезаписью!
	//	НаборЗаписей.Записать();		
	//	// сколько номенклатурных позиций скопировано
	//	Сообщить("Записано " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций для " + КонтрагентПриемник.Наименование);
	//	иначе
	//	Сообщить("Нет строк для записи!");
	//	КонецЕсли;
	//Исключение
	//	Сообщить("Ошибка при Записи " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций для " + КонтрагентПриемник.Наименование, СтатусСообщения.Внимание);
	//КонецПопытки;
	
КонецПроцедуры



Процедура КоманднаяПанель1Подбор(Кнопка)
	ДействиеПодбор(); // см. ниже
КонецПроцедуры


//++++++ из документа Реализация товаров и услуг
Процедура ДействиеПодбор_82()

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена                = ЛОЖЬ;
	
	ЕстьСерия               = Истина;
	
	СкрыватьХарактеристику  = Ложь;
	Валюта                  = Справочники.Валюты.НайтиПоКоду("643");
	СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	Качество                = Справочники.Качество.Новый;
	ПодбиратьУслуги         = Ложь;

	ЕстьСкладВТабличнойЧасти = ЛОЖЬ;

		//Команда           = "ПодборВТабличнуюЧастьТовары";
		Команда           = "ПодборВРегистрСведений";
		ИмяТабличнойЧасти = "РегистрСведенийНаборЗаписей";

	//СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКаA18 R17 7.5/5*112 ET42 d57.1 S +Б YST Replikaчества);
	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
    
	//ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	//ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	ВременнаяДатаРасчетов =  НачалоДня(ТекущаяДата());
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"                 , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("КачествоПоУмолчанию"          , Справочники.Качество.Новый);
	//СтруктураПараметровПодбора.Вставить("Склад"                        , Склад);
	//СтруктураПараметровПодбора.Вставить("ТипЦен"                       , ТипЦен);
	//СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"           , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"                   , КонтрагентПриемник);
	//СтруктураПараметровПодбора.Вставить("Сделка"                       , Сделка);
	//СтруктураПараметровПодбора.Вставить("Организация"                  , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"                     , Справочники.Качество.Новый);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"          , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                     , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"                    , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"              , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества"      , РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику"       , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"              , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в " + ИмяТабличнойЧасти );
	//СтруктураПараметровПодбора.Вставить("УсловиеПродаж"                , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти"     , ЕстьСкладВТабличнойЧасти);
	//СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"             , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "Сделка"));

	
	//=============================Подключение обработки изменения текущей формы===========================================
	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);
	
	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметровПодбора;
	ФормаПодбора.Открыть();

 	
КонецПроцедуры // ДействиеПодбор()


Процедура ДействиеПодбор(ТабличнаяЧасть=неопределено)
    
	ФормаПодбораНоменклатура = Справочники.Номенклатура.ПолучитьФорму("ФормаСписка",ЭтаФорма);
	//ФормаПодбораНоменклатура.МножественныйВыбор=Истина; 
	ФормаПодбораНоменклатура.РежимВыбора=Истина;
	ФормаПодбораНоменклатура.ЗакрыватьПриВыборе=Ложь;
	ФормаПодбораНоменклатура.ОткрытьМодально();
	
	 


КонецПроцедуры // ДействиеПодбор()



// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ЗначениеВыбора) Экспорт

	// Не нашли - добавляем новую строку.
	НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
	НаборЗаписей.Контрагент   = КонтрагентПриемник;
	НаборЗаписей.Номенклатура = ЗначениеВыбора;
	НаборЗаписей.Прочитать();
		
	Если НЕ ЗначениеЗаполнено(НаборЗаписей.Номенклатура) тогда // новая запись
		ЭлементыФормы.РегистрСведенийНаборЗаписей.ДобавитьСтроку(); 
		НаборЗаписей = ЭлементыФормы.РегистрСведенийНаборЗаписей.ТекущиеДанные;
		
		НаборЗаписей.Контрагент   = КонтрагентПриемник;
		НаборЗаписей.Номенклатура = ЗначениеВыбора;
		//НаборЗаписей.ЕдиницаНоменклатурыКонтрагента = ЗначениеВыбора.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
		//НаборЗаписей.ХарактеристикаНоменклатуры =  ЗначениеВыбора.Характеристика;
	Иначе
	 	Предупреждение(ЗначениеВыбора.Номенклатура.Наименование+" - уже есть!", 10);
	КонецЕсли;
		 
КонецПроцедуры // ОбработкаПодбора()


Процедура РегистрСведенийНаборЗаписейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.ячейки.Код.текст = ДанныеСтроки.Номенклатура.Код;
	ОформлениеСтроки.ячейки.Код.ОтображатьТекст = Истина;
КонецПроцедуры


Процедура РегистрСведенийНаборЗаписейКодПриИзменении(Элемент)
	текСтр = ЭлементыФормы.РегистрСведенийНаборЗаписей.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(текСтр.Номенклатура) тогда
		текСтр.Номенклатура = справочники.Номенклатура.НайтиПоКоду(Элемент.Значение);
	КонецЕсли;
КонецПроцедуры


Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
ОбработкаПодбора(ЗначениеВыбора);
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	НоменклатураКонтрагентовСписок.Отбор.Контрагент.Значение=КонтрагентПриемник;
	//ЭлементыФормы.НоменклатураКонтрагентовСписок.НастройкаПорядка.НаименованиеНоменклатурыКонтрагента.Доступность=Истина;  
	ЭлементыФормы.НоменклатураКонтрагентовСписок.НастройкаПорядка.Номенклатура.Доступность=Истина;
	
	
КонецПроцедуры

