Перем ПараметрДанныхНачалоПериода, ПараметрДанныхКонецПериода, ПараметрДанныхНачалоПериодаПП, ПараметрДанныхКонецПериодаПП;

Процедура ДействияФормыСформировать(Кнопка)

	Настройки = КомпоновщикНастроек.Настройки;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);	
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	
	Пока Истина Цикл
		ОбработкаПрерыванияПользователя();
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		Если ЭлементРезультата= Неопределено Тогда
			Прервать;
		Иначе
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериодаПП.Значение = ДобавитьМесяц(ДатаНачала, -12);
	УстановитьЗаголовокПрошлогоПериода();
	УстановитьНастройки();
	
КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПараметрДанныхКонецПериода.Значение = КонецДня(ДатаОкончания);
	ПараметрДанныхКонецПериодаПП.Значение = ДобавитьМесяц(КонецДня(ДатаОкончания), -12);
	УстановитьЗаголовокПрошлогоПериода();
	УстановитьНастройки();
	
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания='0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
		ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
		ПараметрДанныхНачалоПериодаПП.Значение = ДобавитьМесяц(ДатаНачала, -12);
		ПараметрДанныхКонецПериода.Значение = КонецДня(ДатаОкончания);
		ПараметрДанныхКонецПериодаПП.Значение = ДобавитьМесяц(КонецДня(ДатаОкончания), -12);
	КонецЕсли;
	
	УстановитьЗаголовокПрошлогоПериода();
	УстановитьНастройки();
	
КонецПроцедуры

Процедура УстановитьЗаголовокПрошлогоПериода()
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЭлементыФормы.НадписьПрошлыйПериод.Заголовок = "Прошлый период: " + Лев(Строка(ДобавитьМесяц(ДатаНачала,-12)),10) + " - " + Лев(Строка(ДобавитьМесяц(ДатаОкончания,-12)),10);
	КонецЕсли;
	
КонецПроцедуры

Процедура Подразделение1ПриИзменении(Элемент)

	УстановитьНастройки();
	
КонецПроцедуры


Процедура СписокНомГруппПриИзменении(Элемент)

	УстановитьНастройки();
	
КонецПроцедуры


Процедура ПриОткрытии()
	
	//Ярославль и филиалы
	ЭлементыФормы.Подразделение1.СписокВыбора.ЗагрузитьЗначения(яштПоставщики.ПолучитьМассивФилиалов());

	УстановитьНастройки();
	
КонецПроцедуры

Процедура УстановитьНастройки()
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериода.Использование = Истина;
	
	ПараметрДанныхНачалоПериодаПП = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[10];
	ПараметрДанныхНачалоПериодаПП.Значение = ДобавитьМесяц(ДатаНачала, -12);
	ПараметрДанныхНачалоПериодаПП.Использование = Истина;
	
	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхКонецПериода.Значение = КонецДня(ДатаОкончания);
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ПараметрДанныхКонецПериодаПП = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[9];
	ПараметрДанныхКонецПериодаПП.Значение = ДобавитьМесяц(КонецДня(ДатаОкончания), -12);
	ПараметрДанныхКонецПериодаПП.Использование = Истина;
	
	ПараметрДанныхОтборНГ = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[3];
	ПараметрДанныхОтборНГ.Значение = ?(СписокНомГрупп.Количество()>0, Истина, Ложь);
	ПараметрДанныхОтборНГ.Использование = Истина;
	
	ПараметрДанныхСписокНГ = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[7];
	ПараметрДанныхСписокНГ.Значение = СписокНомГрупп;
	ПараметрДанныхСписокНГ.Использование = Истина;
	
	ПараметрДанныхОтборПодр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[4];
	ПараметрДанныхОтборПодр.Значение = ?(ЗначениеЗаполнено(Подразделение), Истина, Ложь);
	ПараметрДанныхОтборПодр.Использование = Истина;
	
	ПараметрДанныхПодр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[5];
	ПараметрДанныхПодр.Значение = ?(Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"), Справочники.Подразделения.ПустаяСсылка(), Подразделение);
	ПараметрДанныхПодр.Использование = Истина;
	
	ПараметрДанныхПодр2 = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[6];
	ПараметрДанныхПодр2.Значение = Подразделение;
	ПараметрДанныхПодр2.Использование = Истина;
	
	СписокФилиалов = яштПоставщики.ПолучитьМассивФилиалов();
	СписокФилиалов.Удалить(0); // без Ярославля
	ПараметрДанныхСписокФилиалов = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[8];
	ПараметрДанныхСписокФилиалов.Значение = СписокФилиалов;
	ПараметрДанныхСписокФилиалов.Использование = Истина;
	
КонецПроцедуры


Процедура ПослеВосстановленияЗначений()
	
	СписокНомГрупп = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[7].Значение;
	Подразделение = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[6].Значение;
	
КонецПроцедуры

