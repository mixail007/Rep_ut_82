
Перем СписокФилиалов, мПодразделение; 

//++++++++++++++++++++ГЛАВНАЯ ПРОЦЕДУРА++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	// ВСЕ актуальные филиалы!
	СписокФилиалов = яштПоставщики.ПолучитьМассивФилиалов(); 
	СписокФилиалов.Удалить(0); // без Ярославля
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	ПостроительОтчета.Параметры.Вставить("СписокФилиалов", СписокФилиалов);
		
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	//ЗаполнитьНачальныеНастройкиПоМакету(ПолучитьМакет("ПараметрыОтчетовПродажиКомпании"), СтруктураПредставлениеПолей, МассивОтбора, ОбщийОтчет, "СписокКроссТаблица");
	Текст = 
		"ВЫБРАТЬ
		|	Товар.Ссылка КАК Номенклатура,
		|	СУММА(ТоварыНаСкладахОстаткиНаНачало.КоличествоОстаток) КАК ОстатокНаНачалоКоличество,
		|	СУММА(ПартииТоваровНаСкладахОстаткиНаНачало.СтоимостьОстаток) КАК ОстатокНаНачалоСтоимость,
		|   СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
		|   СУММА(ПартииТоваровНаСкладахОбороты.СтоимостьПриход) КАК СтоимостьПриход,
		|	СУММА(ЗакупкиОбороты.КоличествоОборот) КАК КоличествоКуплено,
		|	СУММА(ЗакупкиОбороты.СтоимостьОборот) КАК СтоимостьКуплено,
		|   СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
		|   СУММА(ПартииТоваровНаСкладахОбороты.СтоимостьРасход) КАК СтоимостьРасход,
		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК КоличествоПродано,
		|	СУММА(ПродажиСебестоимостьОбороты.СтоимостьОборот) КАК СтоимостьПродано,
		|	СУММА(ПродажиНаФилиалыОбороты.КоличествоПриход) КАК КоличествоПроданоНаФилиалы,
		|	СУММА(ТоварыНаСкладахОстаткиНаКонец.КоличествоОстаток) КАК ОстатокНаКонецКоличество,
		|	СУММА(ТоварыНаСкладахЯрославльОстаткиНаКонец.КоличествоОстаток) КАК ОстатокЯрославльНаКонецКоличество,
		|	СУММА(ПартииТоваровНаСкладахОстаткиНаКонец.СтоимостьОстаток) КАК ОстатокНаКонецСтоимость,
		|	СУММА(ЗаказыПокупателей.КоличествоОстаток)   КоличествоЗаказано,
		|	СУММА(ЗаказыПоставщикамОстатки.КоличествоОстаток) КАК КоличествоВПути
		|{ВЫБРАТЬ
		|	Товар.Ссылка.* КАК Номенклатура,
		|	ЗакупкиОбороты.ЗаказПоставщику.*,
		|	ЗакупкиОбороты.ДоговорКонтрагента.*,
		|	ЗакупкиОбороты.ДокументЗакупки.*,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.ДокументОприходования.*,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.ДокументОприходования.*,
		|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.*,
		|	ПродажиСебестоимостьОбороты.ДокументОприходования.*
		|	//СВОЙСТВА}
		|ИЗ
		|	Справочник.Номенклатура КАК Товар
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач,
		|		выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*} {Номенклатура.*}) КАК ПартииТоваровНаСкладахОстаткиНаНачало
		|		ПО Товар.Ссылка = ПартииТоваровНаСкладахОстаткиНаНачало.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаНач, выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*}{Номенклатура.*} ) КАК ТоварыНаСкладахОстаткиНаНачало
		|		ПО Товар.Ссылка = ТоварыНаСкладахОстаткиНаНачало.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаКон,выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*} {Номенклатура.*}) КАК ПартииТоваровНаСкладахОстаткиНаКонец
		|		ПО Товар.Ссылка = ПартииТоваровНаСкладахОстаткиНаКонец.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаКон, выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*} {Номенклатура.*}) КАК ТоварыНаСкладахОстаткиНаКонец
		|		ПО Товар.Ссылка = ТоварыНаСкладахОстаткиНаКонец.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаКон, выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И Склад.Подразделение = &ПустоеПодразделение
		|															{Склад.*} {Номенклатура.*}) КАК ТоварыНаСкладахЯрославльОстаткиНаКонец
		|		ПО Товар.Ссылка = ТоварыНаСкладахЯрославльОстаткиНаКонец.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&ДатаНач, &ДатаКон, , выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*} {Номенклатура.*}) КАК ПартииТоваровНаСкладахОбороты
		|		ПО Товар.Ссылка = ПартииТоваровНаСкладахОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, , выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Склад.Подразделение = &Подразделение иначе Истина Конец
		|															{Склад.*}{Номенклатура.*} ) КАК ТоварыНаСкладахОбороты
		|		ПО Товар.Ссылка = ТоварыНаСкладахОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки.Обороты(&ДатаНач, &ДатаКон, , выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Подразделение = &Подразделение2 иначе Истина Конец
		|															{Номенклатура.*}) КАК ЗакупкиОбороты
		|		ПО Товар.Ссылка = ЗакупкиОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, ,выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И Склад.ТипСклада = Значение(Перечисление.ТипыСкладов.ВПути)
		|		И выбор когда &ОтборПоПодразделению 
		|				тогда Склад.Подразделение = &Подразделение2 
		|				иначе Склад.Подразделение В (&СписокФилиалов) Конец
		|															{Склад.*}{Номенклатура.*} ) КАК ПродажиНаФилиалыОбороты
		|		ПО Товар.Ссылка = ПродажиНаФилиалыОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, ,выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Подразделение = &Подразделение2 иначе Истина Конец
		|															{Номенклатура.*} ) КАК ПродажиОбороты
		|		ПО Товар.Ссылка = ПродажиОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНач, &ДатаКон, , выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда Подразделение = &Подразделение2 иначе Истина Конец
		|															{Номенклатура.*}) КАК ПродажиСебестоимостьОбороты
		|		ПО Товар.Ссылка = ПродажиСебестоимостьОбороты.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(,ЗаказПокупателя.Проверен 
		|		И выбор когда &ОтборНомГрупп тогда Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп) иначе Истина Конец
		|		И выбор когда &ОтборПоПодразделению тогда ЗаказПокупателя.Подразделение = &Подразделение2 иначе Истина Конец
		|															{Номенклатура.*}) КАК ЗаказыПокупателей
		|		ПО Товар.Ссылка = ЗаказыПокупателей.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
		|		&ДатаКон,
		|		ВЫБОР
		|				КОГДА &ОтборНомГрупп
		|					ТОГДА Номенклатура.НоменклатурнаяГруппа В (&СписокНомГрупп)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|			И ВЫБОР
		|				КОГДА &ОтборПоПодразделению
		|					ТОГДА Подразделение = &Подразделение2
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ЗаказыПоставщикамОстатки
		|ПО Товар.Ссылка = ЗаказыПоставщикамОстатки.Номенклатура
		|	//СОЕДИНЕНИЯ
		|ГДЕ
		|	(ТоварыНаСкладахОстаткиНаКонец.КоличествоОстаток <> 0
		
	//+++ 11.09.2018 - по задаче № 53879 от Доколина
		|			ИЛИ ТоварыНаСкладахОстаткиНаНачало.КоличествоОстаток <> 0
		
		|			ИЛИ ПартииТоваровНаСкладахОстаткиНаКонец.КоличествоОстаток <> 0
		|			ИЛИ ЗакупкиОбороты.КоличествоОборот <> 0
		|			ИЛИ ПродажиСебестоимостьОбороты.КоличествоОборот <> 0
		|			ИЛИ ЗаказыПокупателей.КоличествоОстаток<>0)
		|{ГДЕ
		|	Товар.Ссылка.* КАК Номенклатура,
		|	ЗакупкиОбороты.ЗаказПоставщику.*,
		|	ЗакупкиОбороты.ДоговорКонтрагента.*,
		|	ЗакупкиОбороты.ДокументЗакупки.*,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.ДокументОприходования.*,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.ДокументОприходования.*,
		|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.*,
		|	ПродажиСебестоимостьОбороты.ДокументОприходования.*,
		|	ЗакупкиОбороты.ДоговорКонтрагента.Владелец.* КАК Поставщик,
		|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.Контрагент.* КАК Покупатель,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.СтоимостьОстаток КАК ОстатокНаНачалоСтоимость,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.КоличествоОстаток КАК ОстатокНаНачало,
		|	ЗакупкиОбороты.КоличествоОборот КАК КоличествоПриход,
		|	ЗакупкиОбороты.СтоимостьОборот КАК СтоимостьПриход,
		|	ПродажиСебестоимостьОбороты.КоличествоОборот КАК КоличествоРасход,
		|	ПродажиСебестоимостьОбороты.СтоимостьОборот КАК СтоимостьРасход,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.КоличествоОстаток КАК ОстатокНаКонец,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.СтоимостьОстаток КАК ОстатокНаКонецСтоимость
		|//СВОЙСТВА
		|//КАТЕГОРИИ
		|}
		|
		|СГРУППИРОВАТЬ ПО
		|	Товар.Ссылка
		|//СГРУППИРОВАТЬПО
		|{УПОРЯДОЧИТЬ ПО
		|	Товар.Ссылка.* КАК Номенклатура,
		|	ЗакупкиОбороты.ЗаказПоставщику.*,
		|	ЗакупкиОбороты.ДоговорКонтрагента.*,
		|	ЗакупкиОбороты.ДокументЗакупки.*,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.ДокументОприходования.*,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.ДокументОприходования.*,
		|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.*,
		|	ПродажиСебестоимостьОбороты.ДокументОприходования.*,
		|	ЗакупкиОбороты.ДоговорКонтрагента.Владелец.* КАК Поставщик,
		|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.Контрагент.* КАК Покупатель,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.СтоимостьОстаток КАК ОстатокНаНачалоСтоимость,
		|	ПартииТоваровНаСкладахОстаткиНаНачало.КоличествоОстаток КАК ОстатокНаНачало,
		|	ЗакупкиОбороты.КоличествоОборот КАК КоличествоПриход,
		|	ЗакупкиОбороты.СтоимостьОборот КАК СтоимостьПриход,
		|	ПродажиСебестоимостьОбороты.КоличествоОборот КАК КоличествоРасход,
		|	ПродажиСебестоимостьОбороты.СтоимостьОборот КАК СтоимостьРасход,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.КоличествоОстаток КАК ОстатокНаКонец,
		|	ПартииТоваровНаСкладахОстаткиНаКонец.СтоимостьОстаток КАК ОстатокНаКонецСтоимость
		|//СВОЙСТВА}
		|ИТОГИ
		|	СУММА(ОстатокНаНачалоКоличество),
		|	СУММА(ОстатокНаНачалоСтоимость),
		|	СУММА(КоличествоПриход),
		|	СУММА(СтоимостьПриход),
		|	СУММА(КоличествоКуплено),
		|	СУММА(СтоимостьКуплено),
		|	СУММА(КоличествоРасход),
		|	СУММА(СтоимостьРасход),
		|	СУММА(КоличествоПродано),
		|	СУММА(СтоимостьПродано),
		|	СУММА(КоличествоПроданоНаФилиалы),
		|	СУММА(ОстатокНаКонецКоличество),
		|	СУММА(ОстатокЯрославльНаКонецКоличество),
		|	СУММА(ОстатокНаКонецСтоимость),
		|	СУММА(КоличествоЗаказано),
		|	СУММА(КоличествоВПути)
		|ПО
		|	ОБЩИЕ,
		|	Номенклатура
		|{ИТОГИ ПО
		//|	ЗакупкиОбороты.ДоговорКонтрагента.Владелец.* КАК Покупатель,
		//|	ЗакупкиОбороты.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
		//|	ПродажиСебестоимостьОбороты.ЗаказПокупателя.* КАК ЗаказПокупателя,
		|	Товар.Ссылка.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
		|	Товар.Ссылка.* КАК Номенклатура
		|//СВОЙСТВА}
		|АВТОУПОРЯДОЧИВАНИЕ";


		
	
	СтруктураПредставлениеПолей = Новый Структура("
	|ОстатокНаНачалоКоличество,
	|ОстатокНаНачалоСтоимость,
	|КоличествоПриход,
	|СтоимостьПриход,
	|КоличествоКуплено,
	|СтоимостьКуплено,
	|КоличествоРасход,
	|СтоимостьРасход,
	|КоличествоПродано,
	|СтоимостьПродано,
	|КоличествоПроданоНаФилиалы,
	|ОстатокНаКонецКоличество,
	|ОстатокЯрославльНаКонецКоличество,
	|ОстатокНаКонецСтоимость,
	|Покупатель,
	|ДоговорКонтрагента,
	|ЗаказПокупателя,
	|КоличествоЗаказано,
	|КоличествоВПути,
	|НоменклатурнаяГруппа",
	//|ПериодДень,
	//|ПериодНеделя,
	//|ПериодМесяц,
	//|ПериодКвартал,
	//|ПериодГод
	
	"Остаток на начало периода",
	"Стоимость начального остатка",
	"Количество всего прихода",
	"Стоимость всего прихода",
	"Количество куплено",
	"Стоимость купленого товара",	
	"Количество всего расхода",
	"Себестоимость списанная",
	"Количество продано",
	"Себестоимость проданного товара",
	"Количество продано на филиалы",
	"Остаток на конец периода",
	"Остаток Ярославль на конец периода",
	"Стоимость конечного остатка",
	"Покупатель",
	"Договор контрагента",
	"Заказ покупателя",
	"Количество заказано",
	"Количество в пути",
	"Товарная группа");
	//"По дням",
	//"По неделям",
	//"По месяцам",
	//"По кварталам",
	//"По годам");
	
	Если ОбщийОтчет.ИспользоватьСвойстваИКатегории Тогда
	
	    ТекстПоляСвойств= "";
		ТекстПоляКатегорий = "";

		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		СтрокаТаблицы = ТаблицаПолей.Добавить();
		СтрокаТаблицы.ПутьКДанным = "Номенклатура";
		СтрокаТаблицы.Представление = "Номенклатура";
		СтрокаТаблицы.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		
		#Если Клиент тогда
		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				ОбщийОтчет.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,ОбщийОтчет.мСтруктураДляОтбораПоКатегориям);
		ДобавитьВТекстСвойстваОбщие(Текст, ТекстПоляСвойств, "//ОБЩИЕ_СВОЙСТВА");
		#КонецЕсли		
		
      // для избежания двойственности поля Номенклатура в запросе
		Текст=СтрЗаменить(Текст,"ИНАЧЕ Номенклатура","ИНАЧЕ Товар.Ссылка");
		Текст=СтрЗаменить(Текст,"= Номенклатура","= Товар.Ссылка");
	//	УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, ОбщийОтчет.мСоответствиеНазначений, СтруктураПредставлениеПолей);
	КонецЕсли;
	
	ПостроительОтчета.Текст = Текст;
	МассивОтбора = Новый Массив;
	//МассивОтбора.Добавить("Покупатель");
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("Склад");
	//МассивОтбора.Добавить("Подразделение");
	
	#Если Клиент тогда
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	#КонецЕсли
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;	

	
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокНаНачалоКоличество", "Остаток на начало периода", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокНаНачалоСтоимость", "Стоимость начального остатка", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоПриход", "Количество всего прихода", Ложь, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("СтоимостьПриход", "Стоимость всего прихода", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоКуплено", "Количество куплено", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("СтоимостьКуплено", "Стоимость купленого товара", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоРасход", "Количество всего расхода", Ложь, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("СтоимостьРасход", "Себестоимость списанная", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоПродано", "Количество продано", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("СтоимостьПродано", "Себестоимость проданного товара", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоПроданоНаФилиалы", "Количество продано на филиалы", Ложь, "ЧЦ=15; ЧДЦ=0");
	
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокНаКонецКоличество", "Остаток на конец периода", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокЯрославльНаКонецКоличество", "Остаток Ярославль на конец периода", Ложь, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("ОстатокНаКонецСтоимость", "Стоимость конечного остатка", Ложь, "ЧЦ=15; ЧДЦ=2");
	
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоВПути", "Количество в пути", Истина, "ЧЦ=15; ЧДЦ=0");
	ОбщийОтчет.ЗаполнитьПоказатели("КоличествоЗаказано", "Количество заказано", Истина, "ЧЦ=15; ЧДЦ=0");
	
	
	ОбщийОтчет.мНазваниеОтчета = "Отчет по товародвижению";
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Ложь;
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Истина;
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		#Если Клиент тогда
		Если ЗначениеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
			Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда //11.09.2018
				ОбщийОтчет.ДатаНач = НачалоМесяца( ТекущаяДата() );
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт
   	
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("РентабельностьПродаж", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ПроцентНаценки", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		 СтандартнаяОбработка=ЛОЖЬ;
	
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонкиДляОтчета = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Текст;
		
		Если  РасшифровкаКолонкиДляОтчета = "Остаток на начало периода"
			или РасшифровкаКолонкиДляОтчета = "Стоимость начального остатка" Тогда
			#Если Клиент тогда
				Предупреждение("Для начального остатка - нет расшифровки!", 10);
			#КонецЕсли	
			возврат;	
		КонецЕсли;	

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		ПостроитьОтчетРасшифровку(Расшифровка,РасшифровкаКолонкиДляОтчета);
	Иначе
		 СтандартнаяОбработка=Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;

	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	

	
КонецПроцедуры

Процедура ПостроитьОтчетРасшифровку(Расшифровка,РасшифровкаКолонкиДляОтчета)
	// расшифровываем весь приход 
	
	Если РасшифровкаКолонкиДляОтчета="Количество всего прихода" ИЛИ РасшифровкаКолонкиДляОтчета="Стоимость всего прихода"
		ИЛИ	РасшифровкаКолонкиДляОтчета="Количество всего расхода" ИЛИ РасшифровкаКолонкиДляОтчета="Себестоимость списанная"
			или РасшифровкаКолонкиДляОтчета = "Стоимость конечного остатка" Тогда
		// По регистру 'ПартииТоваровНаСкладах'
		Отчет = Отчеты.ВедомостьПартииТоваровНаСкладах.Создать();
		
	ИначеЕсли  РасшифровкаКолонкиДляОтчета= "Количество продано на филиалы"
					или РасшифровкаКолонкиДляОтчета = "Остаток на конец периода" Тогда 
		Отчет = Отчеты.ВедомостьТоварыНаСкладах.Создать();
		
	ИначеЕсли  РасшифровкаКолонкиДляОтчета= "Количество куплено" ИЛИ РасшифровкаКолонкиДляОтчета="Стоимость купленого товара" Тогда 
		Отчет = Отчеты.Закупки.Создать();
		
	ИначеЕсли  РасшифровкаКолонкиДляОтчета= "Количество продано" ИЛИ РасшифровкаКолонкиДляОтчета="Себестоимость проданного товара" Тогда 
		Отчет = Отчеты.Продажи.Создать();
		
	ИначеЕсли РасшифровкаКолонкиДляОтчета= "Количество заказано" Тогда
		Отчет = Отчеты.ЗаказыПокупателей.Создать();
	Иначе	
		Возврат;
	КонецЕсли;
	
	ТабОтбор = Новый ТаблицаЗначений;
	ТабОтбор.Колонки.Добавить("Имя");
	ТабОтбор.Колонки.Добавить("ВидСравнения");
	ТабОтбор.Колонки.Добавить("Значение");

	
	// По регистру 'Закупки'
	
	Отчет.ЗаполнитьНачальныеНастройки();
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаНач = ОбщийОтчет.ДатаНач;
	Отчет.ОбщийОтчет.ДатаКон = ОбщийОтчет.ДатаКон;
	
	Если ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Найти("Номенклатура") = Неопределено Тогда
		СтрГРП = ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура");
	КонецЕсли;

	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		СтрОтб.Использование = Ложь;	
	КонецЦикла;
	
	
	//+++++++++++++++++++++++++ наши поля +++++++++++++++++++++++++++++++++++++++++++++
	Для Каждого Элемент из Расшифровка Цикл 
		
	Если Элемент.Ключ = "Подразделение" тогда
			Если РасшифровкаКолонкиДляОтчета= "Количество заказано" тогда // по ЗаказамПокупателей
				Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ЗаказПокупателяПодразделение") = Неопределено Тогда
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ЗаказПокупателя.Подразделение", "ЗаказПокупателяПодразделение");
				Иначе
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ЗаказПокупателяПодразделение");
				КонецЕсли; 
				СтрОтб.ВидСравнения  = ВидСравнения.Равно;
				СтрОтб.Значение      = Элемент.Значение;
				СтрОтб.Использование = Истина;
		
			ИначеЕсли  РасшифровкаКолонкиДляОтчета= "Количество продано на филиалы"
				   или РасшифровкаКолонкиДляОтчета="Количество всего прихода" ИЛИ  РасшифровкаКолонкиДляОтчета="Стоимость всего прихода"
				   ИЛИ РасшифровкаКолонкиДляОтчета="Количество всего расхода" ИЛИ  РасшифровкаКолонкиДляОтчета="Себестоимость списанная"
				   ИЛИ РасшифровкаКолонкиДляОтчета ="Остаток на конец периода" или РасшифровкаКолонкиДляОтчета="Стоимость конечного остатка"  Тогда 
				
				Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("СкладПодразделение") = Неопределено Тогда
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад.Подразделение", "СкладПодразделение");
				Иначе
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("СкладПодразделение");
				КонецЕсли; 
					СтрОтб.ВидСравнения  = ВидСравнения.Равно;
					СтрОтб.Значение      = ?(Элемент.Значение.Код="00005", Справочники.Подразделения.ПустаяСсылка(), Элемент.Значение);
					СтрОтб.Использование = Истина;

				//------------------смотрим склада (Товары в пути)---------------------------------------------------	
				Если РасшифровкаКолонкиДляОтчета= "Количество продано на филиалы" тогда
	 				Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("СкладТипСклада") = Неопределено Тогда
						СтрОтб1 = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад.ТипСклада", "СкладТитСклада");
					Иначе
						СтрОтб1 = ФормаОбработки.ПостроительОтчета.Отбор.Найти("СкладТипСклада");
					КонецЕсли; 
					СтрОтб1.ВидСравнения  = ВидСравнения.Равно;
					СтрОтб1.Значение      = Перечисления.ТипыСкладов.ВПути;
					СтрОтб1.Использование = Истина;
				КонецЕсли;		

			Иначе // Закупки, Продажи - есть измерение Подразделение	
				Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Подразделение");
				Иначе
					СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Подразделение");
				КонецЕсли;
			СтрОтб.ВидСравнения  = ВидСравнения.Равно;
			СтрОтб.Значение      = Элемент.Значение;
			СтрОтб.Использование = Истина;
			КонецЕсли;	
			
							
	ИначеЕсли  Элемент.Ключ = "НоменклатураНоменклатурнаяГруппа" тогда
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("НоменклатураНоменклатурнаяГруппа") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура.НоменклатурнаяГруппа", "НоменклатураНоменклатурнаяГруппа", "ТоварныеГруппы");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("НоменклатураНоменклатурнаяГруппа");
		КонецЕсли; 
		СтрОтб.ВидСравнения  = ВидСравнения.ВСписке;
		СтрОтб.Значение      = Элемент.Значение;
		СтрОтб.Использование = Истина;
				
			///
	ИначеЕсли Элемент.Ключ = "Номенклатура" тогда
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли; 
		СтрОтб.Значение      = Элемент.Значение;
		СтрОтб.ВидСравнения  = ?( Элемент.Значение.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		СтрОтб.Использование = Истина;
		
	ИначеЕсли Элемент.Ключ = "НоменклатурнаяГруппа" тогда
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("НоменклатураНоменклатурнаяГруппа") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура.НоменклатурнаяГруппа","НоменклатураНоменклатурнаяГруппа");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("НоменклатураНоменклатурнаяГруппа");
		КонецЕсли; 
		СтрОтб.Значение      = Элемент.Значение;
		СтрОтб.ВидСравнения  = ВидСравнения.Равно;
		СтрОтб.Использование = Истина;
	Иначе
		если Найти(Элемент.Ключ,"Номенклатура")>0 тогда
			стр1 = "Номенклатура."+прав(Элемент.Ключ, стрДлина(Элемент.Ключ)- Найти(Элемент.Ключ,"Номенклатура")-11 );
		ИначеЕсли Найти(Элемент.Ключ,"НоменклатурнаяГруппа")>0 тогда
			стр1 = "НоменклатурнаяГруппа."+прав(Элемент.Ключ, стрДлина(Элемент.Ключ)- Найти(Элемент.Ключ,"НоменклатурнаяГруппа")-19 );
		Иначе
			стр1 = Элемент.Ключ;
		КонецЕсли;
		
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти(Элемент.Ключ) = Неопределено Тогда
			попытка
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить(стр1, Элемент.Ключ);
				СтрОтб.Значение      = Элемент.Значение;
				СтрОтб.ВидСравнения  = ВидСравнения.Равно;
				СтрОтб.Использование = Истина;
			исключение
				#Если Клиент тогда
					Предупреждение("Невозможно добавить отбор или группировку по полю: 
									|"+стр1+" !
							        |Добавьте это поле - самостоятельно!", 10);
				#КонецЕсли				
			КонецПопытки;	
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти(Элемент.Ключ);
			СтрОтб.Значение      = Элемент.Значение;
			СтрОтб.ВидСравнения  = ВидСравнения.Равно;
			СтрОтб.Использование = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	// Сообщить(строка(Элемент.Ключ) + " : " + строка(Элемент.Значение) ); 

	КонецЦикла; 
  //++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
  
	Если РасшифровкаКолонкиДляОтчета<> "Количество заказано" Тогда // Закупки и продажи по дням
		Если ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Найти("ПериодДень") = Неопределено Тогда
			ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ПериодДень.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ПериодДень.Имя);
				
		КонецЕсли;
	Иначе  // Количество заказано
		
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Проверен") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Проверен");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Проверен");
		КонецЕсли; 
		
		СтрОтб.ВидСравнения = ВидСравнения.Равно;
		СтрОтб.Значение = Истина;
		СтрОтб.Использование = Истина;
		
	КонецЕсли;
	
	Если РасшифровкаКолонкиДляОтчета= "Количество продано" Тогда
		ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить("Покупатель");
	КонецЕсли;	
	
    Для каждого Элемент Из ОбщийОтчет.ПолучитьПостроительОтчета().Отбор Цикл

		Если Элемент.Использование И Элемент.Имя<>"Номенклатура" Тогда
			
			ПозицияПервойТочки=Найти(Элемент.ПутьКДанным,".");
			Если ПозицияПервойТочки>0 Тогда
				СловоДляПроверки=Лев(Элемент.ПутьКДанным,ПозицияПервойТочки-1);
			Иначе
				СловоДляПроверки=Элемент.ПутьКДанным;
			КонецЕсли;	

			Для каждого ДоступноеПоле ИЗ ФормаОбработки.ПостроительОтчета.ДоступныеПоля Цикл
				Найден=Ложь;
				Если ДоступноеПоле.Имя=СловоДляПроверки Тогда
					  // будем делать фильтр
					 Найден=Истина; 
					 Прервать; 
				КонецЕсли;	
				
			КонецЦикла;	
			
              Если  Найден Тогда
				СтрОтб=ФормаОбработки.ПостроительОтчета.Отбор.Добавить(Элемент.ПутьКДанным,Элемент.Имя);
				СтрОтб.ВидСравнения = Элемент.ВидСравнения;
				СтрОтб.Значение = Элемент.Значение;
                СтрОтб.Использование = Истина;
			 КонецЕсли;
			КонецЕсли;

		КонецЦикла; 
		ФормаОбработки.ОбновитьОтчет();
	
	Возврат;

    
	//// По регистру 'Продажи'
	//
	//	Отчет.ЗаполнитьНачальныеНастройки();
	//ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	//ФормаОбработки.Открыть();
	//
	//Отчет.ОбщийОтчет.ДатаНач= ОбщийОтчет.ДатаНач;
	//Отчет.ОбщийОтчет.ДатаКон = ОбщийОтчет.ДатаКон;
	//
	//
	//Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
	//	СтрОтб.Использование = Ложь;	
	//КонецЦикла;
	//
	/////
	//Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
	//Иначе
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
	//КонецЕсли; 
	//
	//СтрОтб.ВидСравнения = ВидСравнения.Равно;
	//СтрОтб.Значение = Расшифровка.Номенклатура;
	//СтрОтб.Использование = Истина;
	
	//ТабОтбор = Новый ТаблицаЗначений;
	//ТабОтбор.Колонки.Добавить("Имя");
	//ТабОтбор.Колонки.Добавить("ВидСравнения");
	//ТабОтбор.Колонки.Добавить("Значение");

	
	//
	//Для каждого Элемент Из ОбщийОтчет.ПолучитьПостроительОтчета().Отбор Цикл

	//		Если Элемент.Использование И Элемент.Имя<>"Номенклатура" Тогда

	//			СтрОтб=ФормаОбработки.ПостроительОтчета.Отбор.Добавить(Элемент.ПутьКДанным,Элемент.Имя);
	//			СтрОтб.ВидСравнения = Элемент.ВидСравнения;
	//			СтрОтб.Значение = Элемент.Значение;
	//			СтрОтб.Использование = Истина;
	//		КонецЕсли;

	//КонецЦикла; 

	//	ФормаОбработки.ОбновитьОтчет();
	//
	//Возврат;
	//ИначеЕсли  РасшифровкаКолонкиДляОтчета= "Количество продано на филиалы"  Тогда 
	//// По регистру 'Продажи'
	//
	//Отчет = Отчеты.Продажи.Создать();
	//Отчет.ЗаполнитьНачальныеНастройки();
	//ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	//ФормаОбработки.Открыть();
	//
	//Отчет.ОбщийОтчет.ДатаНач= ОбщийОтчет.ДатаНач;
	//Отчет.ОбщийОтчет.ДатаКон = ОбщийОтчет.ДатаКон;
	//
	//
	//Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
	//	СтрОтб.Использование = Ложь;	
	//КонецЦикла;
	//
	/////
	//Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
	//Иначе
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
	//КонецЕсли; 
	//
	//СтрОтб.ВидСравнения = ВидСравнения.Равно;
	//СтрОтб.Значение = Расшифровка.Номенклатура;
	//СтрОтб.Использование = Истина;
	//
	//
	//Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Покупатель") = Неопределено Тогда
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Покупатель");
	//Иначе
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Покупатель");
	//КонецЕсли; 
	//
	//СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
	//СтрОтб.Значение.Добавить(СписокФилиалов[0]);
	//СтрОтб.Значение.Добавить(СписокФилиалов[1]);
	//СтрОтб.Значение.Добавить(СписокФилиалов[2]);
	//СтрОтб.Использование = Истина;

	//
	////
	////ТабОтбор = Новый ТаблицаЗначений;
	////ТабОтбор.Колонки.Добавить("Имя");
	////ТабОтбор.Колонки.Добавить("ВидСравнения");
	////ТабОтбор.Колонки.Добавить("Значение");

	//
	//
	//Для каждого Элемент Из ОбщийОтчет.ПолучитьПостроительОтчета().Отбор Цикл

	//		Если Элемент.Использование И Элемент.Имя<>"Номенклатура" Тогда

	//			СтрОтб=ФормаОбработки.ПостроительОтчета.Отбор.Добавить(Элемент.ПутьКДанным,Элемент.Имя);
	//			СтрОтб.ВидСравнения = Элемент.ВидСравнения;
	//			СтрОтб.Значение = Элемент.Значение;
	//			СтрОтб.Использование = Истина;
	//		КонецЕсли;

	//КонецЦикла; 

	//	ФормаОбработки.ОбновитьОтчет();
	//
	//Возврат;


	//Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
	//Иначе
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
	//КонецЕсли;
	//
	//СтрОтб.ВидСравнения = ВидСравнения.Равно;
	//СтрОтб.Значение = ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента;
	//СтрОтб.Использование = Истина;	
	//
	//Если ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Найти("Сделка") = Неопределено Тогда
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Сделка");
	//Иначе
	//	СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
	//КонецЕсли;
	//
	//
	//ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	//
	//ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	//ФормаОбработки.ПостроительОтчета.Отбор.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Склад.Поля.ЗапретитьИспользование.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Склад.Поля.ЗапретитьИспользование.Имя);
	//ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад.ЗапретитьИспользование", "ЗапретитьИспользование");
		
КонецПроцедуры	

ОбщийОтчет.ИмяРегистра = "ПартииТоваровНаСкладах";
