перем СкладБрак, СкладПерещения, КонтрагентДляПеремаркировки, КатегорияМаркировка;	

Процедура ПриОткрытии()
	НачПериода = НачалоНедели( ТекущаяДата() );
	КонПериода = ТекущаяДата();
КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	Контрагент = справочники.Контрагенты.НайтиПоКоду("95728"); // LLC Custom-Service
	Если НЕ ВвестиЗначение(Контрагент,"Выберите поставщика") тогда
		возврат;
	КонецЕсли;	
	 ЭтаФорма.Заголовок = "Обработка  Отправка товаров на перемаркировку (от поставщика "+СокрЛП(Контрагент)+")";
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ПоступлениеТоваровУслуг.Ссылка как Поступление
	 |ИЗ
	 |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	 |ГДЕ
	 |	ПоступлениеТоваровУслуг.Проведен
	 |	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	 |	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачПериода И &КонПериода";
	 Запрос.УстановитьПараметр("Контрагент", Контрагент);
	 Запрос.УстановитьПараметр("НачПериода", НачПериода);
	 Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода) );
	 Результат = Запрос.Выполнить();
	 Если Результат.Пустой() тогда
		 Предупреждение("За период с "+формат(НачПериода,"ДЛФ=DD")+" по "+формат(КонПериода,"ДЛФ=DD")+"
		 |Нет поступлений от "+строка(Контрагент),30);
		 возврат;
	 КонецЕсли;
	 
 	таблПоступлений.Очистить();
 	таблТовары.Очистить();

	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	    стр1 = таблПоступлений.Добавить();
		стр1.Поступление = Выборка.Поступление;
	 КонецЦикла;
	
	ЗаполнитьТовары(); //все товары!
	
	табл1 = таблТовары.Выгрузить();
	табл1.Свернуть("НомерКонтейнера, Поступление, ЗаказПокупателя", "Количество, КоличествоЗак");
	таблПоступлений = табл1.Скопировать(); 
	
	для каждого ТекСтр из таблПоступлений цикл
		ЭлементыФормы.таблПоступлений.ТекущаяСтрока = ТекСтр;
		ОтметитьФлажки(-2); //автовключение строк с Заказами
	 КонецЦикла;
	 
	ЗаданиеНаПеремещение = НайтиЗаданиеНаПеремещение(табл1);
	
КонецПроцедуры

функция НайтиЗаданиеНаПеремещение(табл1)
	зад1 = документы.ЗаданиеНаПеремещение.ПустаяСсылка();
	списокЗаказов = новый СписокЗначений;
	для каждого стр1 из табл1 цикл
		если ЗначениеЗаполнено(стр1.ЗаказПокупателя) тогда
			списокЗаказов.Добавить(стр1.ЗаказПокупателя);
		КонецЕсли;	
	КонецЦикла;	
	Если списокЗаказов.Количество()>0 тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ различные
		               |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка
		               |ИЗ
		               |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
		               |ГДЕ
		               |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя В (&списокЗаказов)
		               |    И ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |УПОРЯДОЧИТЬ ПО
		               |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата УБЫВ
		               |АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("списокЗаказов", списокЗаказов);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() тогда
			зад1 = выборка.Ссылка;
		КонецЕсли;
		
		Если Выборка.Количество()>1 тогда
			сообщить("Существует "+строка(Выборка.Количество())+" Заданий на перемещение по выбранным заказам!");
		КонецЕсли;	
	КонецЕсли;	
	возврат зад1;
КонецФункции

функция ПолучитьТекстЗапросаВсеПоступления(ТолькоПроведенныеЗаказыПокупателя=Истина)
	текст = "ВЫБРАТЬ
	        |	ПоступлениеТовары.Ссылка.Сделка.НомерКонтейнера КАК НомерКонтейнера,
	        |	ПоступлениеТовары.Ссылка КАК Поступление,
	        |	ПоступлениеТовары.Номенклатура,
	        |	ПоступлениеТовары.Номенклатура.Код КАК НоменклатураКод,
	        |	ПоступлениеТовары.Склад,
	        |	ПоступлениеТовары.Количество,
			
			|	ВЫРАЗИТЬ(ПоступлениеТовары.Ссылка.Сделка КАК Документ.ЗаказПоставщику) как ЗаказПоставщику
			
	        |ПОМЕСТИТЬ ВТ_ТоварыИзПоступления
	        |ИЗ
	        |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТовары
	        |ГДЕ
	        |	ПоступлениеТовары.Склад <> &СкладБрак
	        |	И ПоступлениеТовары.Ссылка В(&СписокПоступлений)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	Товары.НомерКонтейнера КАК НомерКонтейнера,
	        |	Товары.Поступление,
	        |	Товары.Номенклатура,
	        |	Товары.НоменклатураКод,
	        |	Товары.Склад,
			|	Товары.ЗаказПоставщику,
//---------------новая группировка - по Адресу--------------------------			
			|	ЕстьNull(АдресаХранения.АдресХранения, Значение(Справочник.АдресаХранения.ПустаяСсылка) ) как Адрес,
			|	ЕстьNull(АдресаХранения.АдресХранения.Порядок, 0) как АдресПорядок, 
			
//-------------- минимум из Остатки и Количества по Адресу ИЛИ Остаток по Складу, если нет адресов! ------------------------		
	        |	Выбор Когда ЕстьNull(АдресаХранения.Количество,0)=0 
			|		Тогда Товары.Количество
			|		Иначе выбор когда ЕстьNull(АдресаХранения.Количество,0)>ЕстьNull(АдресаХранения.Остаток,0)
			|				тогда ЕстьNull(АдресаХранения.Остаток,0)
			|				иначе ЕстьNull(АдресаХранения.Количество,0)
			|		  	  конец
			|	Конец как Количество,
			
	        |	ЕстьNull(АдресаХранения.Количество,0) КАК КоличествоВАдресе,
	        |	ЕстьNull(АдресаХранения.Остаток,0) КАК ОстатокВАдресе
			
	        |ПОМЕСТИТЬ ВТ_ТоварыАдреса
	        |ИЗ
	        |	ВТ_ТоварыИзПоступления КАК Товары
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			адреса.Ссылка КАК Поступление,
	        |			адреса.Номенклатура КАК Номенклатура,
	        |			адреса.Склад КАК Склад,
	        |			адреса.АдресХранения КАК АдресХранения,
	        |			адреса.Количество КАК Количество,
			//+++ ТОЛЬКО + остаток!
	        |			ЕСТЬNULL(ТоварыАдрХрОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0) КАК Остаток
	        |		ИЗ
	        |			(ВЫБРАТЬ
	        |				ТоварыАдрХр.Ссылка КАК Ссылка,
	        |				ТоварыАдрХр.НомерСтроки КАК НомерСтроки,
	        |				ТоварыАдрХр.Номенклатура КАК Номенклатура,
	        |				ТоварыАдрХр.Склад КАК Склад,
	        |				ТоварыАдрХр.АдресХранения КАК АдресХранения,
	        |				ТоварыАдрХр.Количество КАК Количество
	        |			ИЗ
	        |				Документ.ПоступлениеТоваровУслуг.ТоварыАдресноеХранение КАК ТоварыАдрХр
	        |			ГДЕ
	        |				ТоварыАдрХр.Склад <> &СкладБрак
	        |				И ТоварыАдрХр.Ссылка В(&СписокПоступлений)) КАК адреса
			
	        |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыАдресноеХранение.Остатки(,
	        |						(номенклатура, склад) В (ВЫБРАТЬ вт.Номенклатура, вт.Склад
	        |											 ИЗ ВТ_ТоварыИзПоступления КАК вт)    ) КАК ТоварыАдрХрОстатки
	        |				ПО адреса.Номенклатура = ТоварыАдрХрОстатки.Номенклатура
	        |					И адреса.Склад = ТоварыАдрХрОстатки.Склад
	        |					И адреса.АдресХранения = ТоварыАдрХрОстатки.АдресХранения
	        |					И (ЕСТЬNULL(ТоварыАдрХрОстатки.КоличествоОстаток, 0) > 0)
			
			//+++ ещё надо вырезать то, что в резерве ++++++++++++++++++++++++++++++++++++++++++++++++++++++
			 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(,
	        |						(номенклатура, склад) В (ВЫБРАТЬ вт.Номенклатура, вт.Склад
	        |											 ИЗ ВТ_ТоварыИзПоступления КАК вт)    ) КАК РезервыНаСкладах
	        |				ПО адреса.Номенклатура = РезервыНаСкладах.Номенклатура
	        |					И адреса.Склад = РезервыНаСкладах.Склад
	        |					И адреса.АдресХранения = РезервыНаСкладах.АдресХранения
	        |					И (ЕСТЬNULL(РезервыНаСкладах.КоличествоОстаток, 0) > 0)
			
			|) КАК АдресаХранения
	        |		ПО Товары.Номенклатура = АдресаХранения.Номенклатура
	        |			И Товары.Склад = АдресаХранения.Склад
	        |			И Товары.Поступление = АдресаХранения.Поступление
			//+++ ТОЛЬКО по + остаткам по ячейкам
	        |ГДЕ (не АдресаХранения.АдресХранения есть NULL и ЕСТЬNULL(АдресаХранения.Остаток, 0)>0 )
			|	или АдресаХранения.АдресХранения есть NULL 
			|;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоступлениеТовары.НомерКонтейнера КАК НомерКонтейнера,
	        |	ПоступлениеТовары.Склад,
	        |	ЛОЖЬ КАК Выбран,
	        |	ПоступлениеТовары.Поступление,
	        |	МАКСИМУМ(ПоступлениеТовары.НоменклатураКод) КАК Код,
	        |	ПоступлениеТовары.Номенклатура,
			
	        |	СУММА(ПоступлениеТовары.Количество) КАК Количество,
			
			|	ПоступлениеТовары.Адрес,
			|	ПоступлениеТовары.АдресПорядок,
			
		    |	СУММА(ПоступлениеТовары.КоличествоВАдресе) как КоличествоВАдресе,
			|	СУММА(ПоступлениеТовары.ОстатокВАдресе) как ОстатокВАдресе,

			//--------вцелом по складу!
			|	Максимум(ТоварыОстатки.КоличествоОстаток) КАК Остаток,
			
			//-------данные по заказам-----------------------
			|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗаказПокупателя,
	        |	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Количество, 0)) КАК КоличествоЗак
		   
	        |ИЗ
	        |	ВТ_ТоварыАдреса КАК ПоступлениеТовары
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			ост.Номенклатура КАК Номенклатура,
	        |			ост.Склад КАК Склад,
	        |			ост.КоличествоОстаток КАК КоличествоОстаток
	        |		ИЗ
	        |			РегистрНакопления.ТоварыНаСкладах.Остатки(,
	        |					(номенклатура, склад) В (ВЫБРАТЬ вт.Номенклатура, вт.Склад
	        |											 ИЗ ВТ_ТоварыАдреса КАК вт)   ) КАК ост
			//группировать НЕ надо - остатки уже сгруппированы по измерениям!
			|						 ) КАК ТоварыОстатки
	        |		ПО ПоступлениеТовары.Номенклатура = ТоварыОстатки.Номенклатура
	        |			И ПоступлениеТовары.Склад = ТоварыОстатки.Склад
			
	        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	        |			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	        |			ЗаказПокупателяТовары.Количество КАК Количество,
	        |			ЗаказПокупателяТовары.Размещение КАК Размещение,
	        |			ЗаказПокупателяТовары.Ссылка КАК ЗаказПокупателя
	        |		ИЗ
	        |			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	        |		ГДЕ
	        |			ЗаказПокупателяТовары.Ссылка.Дата >= &НачПериода
	        |			И ЗаказПокупателяТовары.Ссылка.Контрагент = &Контрагент
	        |			И ЗаказПокупателяТовары.Номенклатура В (ВЫБРАТЬ вт.Номенклатура
	        |													ИЗ ВТ_ТоварыИзПоступления КАК вт)
	        |			И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			
	        |//ТолькоПроведенные	И ЗаказПокупателяТовары.Ссылка.Проведен
			
	        |			И ЗаказПокупателяТовары.Размещение ССЫЛКА Документ.ЗаказПоставщику) КАК ВложенныйЗапрос
	        |		ПО ПоступлениеТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
	        |			И ПоступлениеТовары.ЗаказПоставщику = ВложенныйЗапрос.Размещение
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ПоступлениеТовары.Поступление,
	        |	ПоступлениеТовары.Номенклатура,
	        |	ВложенныйЗапрос.Количество,
	        |	ВложенныйЗапрос.ЗаказПокупателя,
	        |	ПоступлениеТовары.Склад,
			//------------------------------------
			|	ПоступлениеТовары.Адрес,
			|	ПоступлениеТовары.АдресПорядок,
			
 			|	ПоступлениеТовары.НомерКонтейнера
			
			|Упорядочить ПО
			|	ПоступлениеТовары.Поступление,
			|	ПоступлениеТовары.Номенклатура,
	        |	ПоступлениеТовары.Склад,
			|	ПоступлениеТовары.АдресПорядок
            |";
   //   |//ТолькоПроведенные	И ЗаказПокупателяТовары.Ссылка.Проведен
				
	Если ТолькоПроведенныеЗаказыПокупателя тогда
	текст = СтрЗаменить(текст, "//ТолькоПроведенные","");
	КонецЕсли;
	возврат текст;
КонецФункции

//!!! ГЛАВНАЯ ФУНКЦИЯ !!! 
процедура ЗаполнитьТовары(Стр1=неопределено)
	
	 Если Стр1=неопределено тогда
		таблТовары.Очистить();
	 КонецЕсли;
	  
	 Запрос = Новый Запрос;
	 Запрос.Текст = ПолучитьТекстЗапросаВсеПоступления(ЛОЖЬ); //ТолькоПроведенные=Истина, ЛОЖЬ для теста!
	 
	 Запрос.УстановитьПараметр("Контрагент", КонтрагентДляПеремаркировки );
	 Запрос.УстановитьПараметр("СкладБрак", СкладБрак );
	 Запрос.УстановитьПараметр("НачПериода", НачПериода);
	 Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода) );
	 
	 Если Стр1=неопределено или таблПоступлений.Количество()=1 тогда
	 	Запрос.УстановитьПараметр("СписокПоступлений", таблПоступлений.ВыгрузитьКолонку("Поступление") );
	 иначе
		 Запрос.Текст =  "ВЫБРАТЬ 
		|таблТовары.НомерКонтейнера, таблТовары.Склад, таблТовары.Выбран, таблТовары.Поступление, 
		|таблТовары.Код, таблТовары.Номенклатура, таблТовары.Количество, 
		
		//+++ 28.03.2019 +++ 
		|таблТовары.Адрес,таблТовары.КоличествоВАдресе, таблТовары.ОстатокВАдресе,
		
		//остаток по складу вцелом
		|таблТовары.Остаток, 
		
		//если есть уже заказы
		|таблТовары.ЗаказПокупателя, таблТовары.КоличествоЗак
		
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ &таблТовары как таблТовары;
		|////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ * ИЗ ВТ_Товары как Товары
		|	ОБЪЕДИНИТЬ ВСЕ
		|"+Запрос.Текст;
	 	Запрос.УстановитьПараметр("таблТовары", таблТовары );
	 	СписокПоступлений = новый СписокЗначений;
		СписокПоступлений.Добавить(стр1.Поступление);
	 	Запрос.УстановитьПараметр("СписокПоступлений", СписокПоступлений );
	 КонецЕсли;	
	 Результат = Запрос.Выполнить();
	 таблТовары.Загрузить( Результат.Выгрузить() );
	 	
КонецПроцедуры

//====================флажки==============================
процедура ОтметитьФлажки(тип=0)
	текСтр1 = ЭлементыФормы.таблПоступлений.ТекущиеДанные;
	
	колЗак = 0;  Кол=0; Ост=0; КолА=0; ОстА=0;
	для каждого стр1 из таблТовары цикл
		// флПродолжить = НЕ (текСтр1.Поступление = стр1.Поступление и текСтр1.ЗаказПокупателя = стр1.ЗаказПокупателя);
		флПродолжить=ЛОЖЬ;
		для каждого стр2 из ЭлементыФормы.таблТовары.ОтборСтрок цикл //любой отбор!
			если стр2.Использование тогда
				если стр1[стр2.Имя] <> стр2.Значение тогда
				флПродолжить=Истина;
				Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		 
		 Если флПродолжить тогда
			продолжить;
		КонецЕсли;
		
		Если тип>=0 тогда
			стр1.Выбран = ?( тип=2, не стр1.Выбран, (тип=1) );     
		иначеЕсли тип=-2 тогда 
			стр1.Выбран = ЗначениеЗаполнено(стр1.ЗаказПокупателя);
		КонецЕсли;
		Кол = Кол + стр1.Количество;
		Ост = ост + ?(стр1.ОстатокВАдресе>0, стр1.ОстатокВАдресе, стр1.Остаток);
        КолА=КолА + стр1.КоличествоВАдресе;
		ОстА=ОстА + стр1.ОстатокВАдресе;
		
		Если стр1.Выбран тогда
			КолМакс = мин(стр1.Количество, стр1.Остаток);
			Если стр1.КоличествоЗак>КолМакс тогда //ограничение!
				стр1.КоличествоЗак=КолМакс;
			иначеЕсли стр1.КоличествоЗак=0 тогда //установка
				стр1.КоличествоЗак=КолМакс;
			КонецЕсли;	
		иначе  //оставляем как было !!!
			// стр1.КоличествоЗак = 0;
		КонецЕсли;	
		
		Если стр1.Выбран тогда
			колЗак = колЗак + стр1.КоличествоЗак;
		КонецЕсли;

	КонецЦикла;	
		
	ЭлементыФормы.таблТовары.Колонки.КоличествоЗак.ТекстПодвала = строка(колЗак);
	ЭлементыФормы.таблТовары.Колонки.Количество.ТекстПодвала = строка(Кол);
	ЭлементыФормы.таблТовары.Колонки.Остаток.ТекстПодвала    = строка(Ост);
	
	ЭлементыФормы.таблТовары.Колонки.ОстатокВАдресе.ТекстПодвала    = строка(ОстА);
	ЭлементыФормы.таблТовары.Колонки.КоличествоВАдресе.ТекстПодвала = строка(КолА);
	
	стрОтбора=""; разделительСтрОтбора=" И ";
	для каждого стр2 из ЭлементыФормы.таблТовары.ОтборСтрок цикл //любой отбор!
		Если стр2.Использование тогда
			Если стр2.Имя="Поступление" или стр2.Имя="ЗаказПокупателя" тогда
				Если ЗначениеЗаполнено(стр2.Значение) тогда
					стрОтбора = стрОтбора + стр2.Имя+": "+стр2.Значение.Номер+разделительСтрОтбора;
				КонецЕсли;
			иначеЕсли стр2.Имя="Номенклатура" тогда
				стрОтбора = стрОтбора + стр2.Имя+": "+стр2.Значение.Код+разделительСтрОтбора;
			иначе
				стрОтбора = стрОтбора + стр2.Имя+": "+строка(стр2.Значение)+разделительСтрОтбора;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
   стрОтбора = Лев(стрОтбора, стрДлина(стрОтбора) - стрДлина(разделительСтрОтбора) );
   
	табл1 = таблТовары.Выгрузить(новый Структура("Выбран",Истина) );
	табл1.Свернуть("Номенклатура", "Количество, КоличествоЗак");
	колЗак1 = табл1.Итог("КоличествоЗак");
	кол1    = таблТовары.Итог("Количество");
	поз1    = табл1.Количество();
	
	ЭлементыФормы.Надпись3.Заголовок = "Всего выбрано: "+строка(поз1)+" тов: "+строка(колЗак1)+" / "+строка(кол1)+" шт. ("+формат(?(кол1=0,0,100*колЗак1/кол1),"ЧДЦ=0; ЧН=-")+"%)   "
	+стрОтбора+": "+строка(колЗак)+" / "+строка(кол)+" шт. ("+формат(?(кол=0,0,100*колЗак/кол),"ЧДЦ=0; ЧН=-")+"%)";
	
	//--- Если не какой-то другой отбор - меняем Кол и КолЗак ----
	Если НЕ (найти(стрОтбора,"Поступление")=0 
			или (Найти(стрОтбора,разделительСтрОтбора)>0 и найти(стрОтбора,"ЗаказПокупателя")=0) //какой-то другой отбор, не по верхней строке!
			) тогда 
		текСтр1.КоличествоЗак = колЗак;
		текСтр1.Количество = Кол;
	//------------------------------------------------------------------------------------	 
	//	табл2 = таблТовары.Выгрузить(,"НомерКонтейнера, Поступление, Количество, КоличествоЗак, ЗаказПокупателя");
	//	табл2.Свернуть("НомерКонтейнера, Поступление, ЗаказПокупателя", "Количество, КоличествоЗак");
	//	таблПоступлений = табл2.Скопировать();
	КонецЕсли;

КонецПроцедуры

//----------------------------------------
Процедура КоманднаяПанель3ВыбратьНом(Кнопка)
	ОтметитьФлажки(1);
КонецПроцедуры

Процедура КоманднаяПанель3СнятьНом(Кнопка)
	ОтметитьФлажки(0);
КонецПроцедуры
Процедура КоманднаяПанель3ПереключитьНом(Кнопка)
	ОтметитьФлажки(2);
КонецПроцедуры

Процедура таблПоступленийПриАктивизацииСтроки(Элемент)
	стр1 = ЭлементыФормы.таблПоступлений.ТекущиеДанные;
	Если стр1 = неопределено тогда 
		возврат 
	КонецЕсли;
	Если не стр1.Поступление.Пустая() тогда
		ЭлементыФормы.таблТовары.ОтборСтрок.Поступление.Установить(стр1.Поступление);
	 	ЭлементыФормы.таблТовары.ОтборСтрок.ЗаказПокупателя.Установить(стр1.ЗаказПокупателя);
	КонецЕсли;
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура таблПоступленийНомерКонтейнераПриИзменении(Элемент)
	
	стр1 = ЭлементыФормы.таблПоступлений.ТекущиеДанные;
	если стр1 = Неопределено тогда 
		возврат 
	КонецЕсли;
	
	стр1.Поступление = НайтиПоступлениеПоНомеруКонтейнера(стр1.НомерКонтейнера);
	таблПоступленийПоступлениеПриИзменении(неопределено);
	
	ЗаполнитьТовары(); //все товары!
	
	табл1 = таблТовары.Выгрузить();
	табл1.Свернуть("НомерКонтейнера, Поступление, ЗаказПокупателя", "Количество, КоличествоЗак");
	таблПоступлений = табл1.Скопировать(); 
	
	для каждого ТекСтр из таблПоступлений цикл
		ЭлементыФормы.таблПоступлений.ТекущаяСтрока = ТекСтр;
		ОтметитьФлажки(-2); //автовключение строк с Заказами
	 КонецЦикла;
	 
	ЗаданиеНаПеремещение = НайтиЗаданиеНаПеремещение(табл1);
	

КонецПроцедуры

Процедура таблПоступленийПоступлениеПриИзменении(Элемент)
		стр1 = ЭлементыФормы.таблПоступлений.ТекущиеДанные;
	если стр1 = неопределено тогда 
		возврат 
	КонецЕсли;
	ЗаполнитьСтрокуПоПоступлению(стр1);
	таблПоступленийПриАктивизацииСтроки(неопределено);
КонецПроцедуры

функция НайтиПоступлениеПоНомеруКонтейнера(НомерКонтейнера="")
рез = документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ПоступлениеТоваровУслуг.Ссылка
|ИЗ
|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
|ГДЕ
|	ПоступлениеТоваровУслуг.Сделка.НомерКонтейнера = &НомерКонтейнера";
Запрос.УстановитьПараметр("НомерКонтейнера", НомерКонтейнера);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() тогда
	рез = выборка.Ссылка;
иначе
	Предупреждение("Не найдено поступления по номеру контейнера: "+НомерКонтейнера, 30);
КонецЕсли;
	
	возврат рез;	
КонецФункции	

процедура ЗаполнитьСтрокуПоПоступлению(строка)
	Если строка.Поступление.Пустая() тогда
		возврат;
	КонецЕсли;
	
	если таблТовары.Найти(строка.Поступление, "Поступление")=неопределено тогда
		 ЗаполнитьТовары(строка);
	КонецЕсли;
КонецПроцедуры	

Процедура таблПоступленийПослеУдаления(Элемент)
	Если таблТовары.Количество()=0 тогда
		возврат;
	КонецЕсли;	
	если таблПоступлений.Количество()=0 тогда
		таблТовары.Очистить();
		возврат;
	КонецЕсли;	
	
 Запрос	= новый Запрос;
 Запрос.Текст =  "ВЫБРАТЬ *
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ &таблТовары как таблТовары;
|выбрать * из ВТ_Товары  как товары
|ГДЕ товары.Поступление в (&СписокПоступлений)
|и товары.ЗаказПокупателя в (&СписокЗаказов)";
Запрос.УстановитьПараметр("таблТовары", таблТовары );
Запрос.УстановитьПараметр("СписокПоступлений", таблПоступлений.ВыгрузитьКолонку("Поступление") );
Запрос.УстановитьПараметр("СписокЗаказов", таблПоступлений.ВыгрузитьКолонку("ЗаказПокупателя") );
Результат = Запрос.Выполнить();
табл1 = Результат.Выгрузить();
таблТовары.Загрузить( табл1 );

ЗаданиеНаПеремещение = НайтиЗаданиеНаПеремещение(табл1);

КонецПроцедуры

Процедура таблТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	флКод = ЭлементыФормы.таблТовары.Колонки.Код.Видимость;
	
	Для каждого стр1 из ОформленияСтрок цикл
		если стр1.ДанныеСтроки.Выбран тогда
			стр1.ЦветФона = webЦвета.СветлоЖелтый;
		КонецЕсли;
		
		Если флКод Тогда//21.03.2019
			стр1.ячейки.Код.ОтображатьТекст  = Истина;
			стр1.ячейки.Код.Текст = стр1.ДанныеСтроки.Номенклатура.Код;
		КонецЕсли;
	КонецЦикла;	
	
	ОтметитьФлажки(-1);//пересчет
	
КонецПроцедуры

Процедура таблПоступленийПриПолученииДанных(Элемент, ОформленияСтрок)
	для каждого стр1 из ОформленияСтрок цикл
		если стр1.ДанныеСтроки.КоличествоЗак>0 тогда
			стр1.ЦветФона = webЦвета.СветлоЖелтый;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры


//==============================ГЛАВНАЯ ПРОЦЕДУРА ВЫПОЛНЕНИЯ===================================
Процедура ОсновныеДействияФормыСоздатьЗаказы(Кнопка)
	Если таблПоступлений.Количество()=0 тогда
		Предупреждение("Нет Поступлений для создания Заказов покупателей!", 30);
		возврат;
	КонецЕсли;	
	
	кол1=0; поз=0;
	для каждого стр1 из таблТовары цикл
		Если не стр1.Выбран тогда
			Продолжить;
		КонецЕсли;	
		кол1= кол1+стр1.КоличествоЗак;
		поз = поз+1;
	КонецЦикла;
	
	Если кол1=0 тогда
		Предупреждение("Не выбраны Товары для создания Заказов покупателей!", 30);
		возврат;
	иначе
		Предупреждение("Выбрано "+строка(поз)+" Товаров ("+строка(кол1)+"шт.) для создания Заказов покупателей.", 30);
	КонецЕсли;	
	
	удачно = СоздатьЗаказыПокупателей();   //таблПоступлений - заполняется
	Предупреждение( ?(удачно,"Удачно созданы заказы покупателей.","ОШИБКИ при создании Заказов покупателей!") ,30);
	Сигнал();
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если не ЗаданиеНаПеремещение.Пустая() тогда
		Предупреждение("Уже есть Задание на перемещение № "+ЗаданиеНаПеремещение.Номер+"
					  |Удалите лишние строки в верхней таблице!", 30);
		возврат;
	КонецЕсли;	
	если таблПоступлений.Количество()=0 тогда
		Предупреждение("Нет поступлений для создания Задание на перемещение!", 30);
		возврат;
	КонецЕсли;	
	
	кол1=0; поз=0; 
	табл1 = таблТовары.Выгрузить(новый Структура("Выбран",Истина) );
	табл1.Свернуть("Номенклатура","КоличествоЗак");
	кол1= табл1.Итог("КоличествоЗак");
	поз = табл1.Количество();
	
	Если кол1=0 тогда
		Предупреждение("Не выбрано ни одного Товара в нижней таблице!", 30);
		возврат;
	иначе
		Предупреждение("Выбрано "+строка(поз)+" Товаров ("+строка(кол1)+"шт.) для создания Задание на перемещение.", 30);
	КонецЕсли;	
	
	удачно = СоздатьЗаказыПокупателей(ЛОЖЬ);   //таблПоступлений - заполняется
	если удачно тогда	
		СоздатьЗаданиеНаПеремещение();
	КонецЕсли;
КонецПроцедуры

функция СоздатьЗаказыПокупателей(флПроверен=Истина)
	удачно = Истина;
	для каждого стр1 из таблПоступлений цикл
		Если стр1.КоличествоЗак = 0 тогда
			продолжить;
		КонецЕсли;	
		Если стр1.Поступление.Пустая() тогда
			сообщить("В строке № "+строка(стр1.НомерСтроки)+" НЕ заполнено Поступление!", СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;	
		Если не стр1.ЗаказПокупателя.Пустая() тогда
			сообщить("Уже есть Заказ покупателя № "+ стр1.ЗаказПокупателя.Номер +" по поступлению № "+стр1.Поступление.Номер, СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		ЗакОб = документы.ЗаказПокупателя.СоздатьДокумент();
		ЗакОб.Дата = ТекущаяДата();
		ЗакОб.Контрагент = КонтрагентДляПеремаркировки;
		ЗакОб.Проверен   = ЛОЖЬ; // обязательно выключен для проведения!
		ЗакОб.Подразделение = справочники.Подразделения.НайтиПоКоду("00005");
		ЗакОб.ВводитьТолькоПеремещение = Истина;
		ЗакОб.Склад = ЗакОб.Подразделение.Склад;
		ЗакОб.ТипЦен = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00006"); //ручная
		ЗакОб.ДатаОтгрузки = ТекущаяДата(); // прям щас
		ЗакОб.Склад = СкладБрак; //сразу чтобы видеть!
		ЗаполнитьШапкуДокумента(ЗакОб, глТекущийПользователь);
		
		ЗакОб.УчитыватьНДС    = Истина;
		ЗакОб.СуммаВключаетНДС= Истина;
		ЗакОб.РазрешитьГрузитьДиски 			= Истина;
		ЗакОб.РазрешитьГрузитьТоварыИзСтопЛиста = Истина; //сразу!
		ЗакОб.Комментарий ="#Для перемаркировки по Поступлению № "+стр1.Поступление.Номер+" ("+стр1.НомерКонтейнера+")";
		
		товары1 = таблТовары.НайтиСтроки(новый Структура("Поступление, Выбран", стр1.Поступление, Истина ) );
		ЗаполнитьТоварыДокумента(ЗакОб.Товары, товары1, стр1.Поступление.сделка );
		
		Попытка
			ЗакОб.Записать(РежимЗаписиДокумента.Проведение); //
			
			стр1.ЗаказПокупателя = ЗакОб.Ссылка; // в таблПоступлений
			
			для каждого стр2 из ТаблТовары цикл  
				Если стр2.Поступление = стр1.Поступление 
					и стр2.Выбран тогда
					стр2.ЗаказПокупателя = ЗакОб.Ссылка; // в ТаблТовары
				КонецЕсли;
			КонецЦикла;	
			Сообщить("Успешно проведен Заказ покупателя № "+ЗакОб.Номер, СтатусСообщения.Информация);
			
			регСв = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
			регСв.Категория = КатегорияМаркировка;
			регСв.Объект = ЗакОб.Ссылка;
			регСв.Активность = истина;
			регСв.Записать();
			
			ЗакОб.ВМаршрут = истина;
			ЗакОб.Проверен = флПроверен; //+++ 25.03.2019 +++ Задача № 65312 (1673) - разрешаем создание Задания на перемещение по НЕПРОДЕЛЕННЫМ заказам!
			ЗакОб.Записать(РежимЗаписиДокумента.Запись);
			Сообщить(" --> Установлен признак [v]'Маркировка' для "+?(флПроверен,"[v]В резерв (Проделенного)","[]В резерв (НЕпроделенного)")+" Заказа покупателя № "+ЗакОб.Номер, СтатусСообщения.Информация);
			
		Исключение
			удачно = ЛОЖЬ;
			Сообщить("ОШИБКА при записи Заказа покупателя! "+ОписаниеОшибки(), СтатусСообщения.Внимание );
		КонецПопытки;	
	КонецЦикла;	
возврат удачно;	
КонецФункции
Процедура ЗаполнитьТоварыДокумента(закОбТовары, массивСтрок, ЗакПоставщику1=Неопределено)
	
	для i=0 по массивСтрок.Количество()-1 цикл
		текСтр = закОбТовары.найти(массивСтрок[i].Номенклатура, "Номенклатура");
		Если текСтр=неопределено тогда
			текСтр = закОбТовары.Добавить();
		КонецЕсли;
		
		текСтр.Номенклатура= массивСтрок[i].Номенклатура;
		текСтр.ЕдиницаИзмерения = текСтр.Номенклатура.ЕдиницаХраненияОстатков;
		текСтр.Коэффициент =1;
		
		текСтр.Количество  = текСтр.Количество + массивСтрок[i].КоличествоЗак;
		текСтр.Цена  = 1; // 1р.
		текСтр.Сумма = текСтр.Количество * текСтр.Цена;
		текСтр.СтавкаНДС = СтавкаНДСнаДату( ТекущаяДата() );
		текСтр.СуммаНДС  = РассчитатьСуммуНДС(текСтр.Сумма, Истина, Истина, ПолучитьСтавкуНДС(текСтр.СтавкаНДС) ); 
		
		текСтр.Вес = ПолучитьВесНетто( текСтр.Номенклатура ) * текСтр.Количество;
		
		текСтр.Размещение  = ЗакПоставщику1;
	КонецЦикла;	
КонецПроцедуры

процедура СоздатьЗаданиеНаПеремещение()
	Задание1 = документы.ЗаданиеНаПеремещение.СоздатьДокумент();
	Задание1.Дата = ТекущаяДата();
	Задание1.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
	Задание1.Контрагент  = КонтрагентДляПеремаркировки;
	Задание1.Комментарий = "# для перемаркировки";
	Задание1.ВводитьТолькоПеремещение = Истина;
	Задание1.СкладПолучатель = СкладПерещения;
	Задание1.ИтогКоличествоШтук = 0;
	
	ЗаполнитьШапкуДокумента(Задание1, глТекущийПользователь);
	списЗак = новый массив; списПост=новый массив;
	для каждого стр1 из таблТовары цикл
		
		Если стр1.КоличествоЗак = 0 
			ИЛИ стр1.ЗаказПокупателя.Пустая() 
			ИЛИ НЕ стр1.Выбран 
			ИЛИ списЗак.Найти( стр1.ЗаказПокупателя )<> неопределено тогда
			Продолжить;
		КонецЕсли;
		
		 стр2 = Задание1.ЗаказыПокупателей.Добавить();
			стр2.ЗаказПокупателя   = стр1.ЗаказПокупателя;
			стр2.КоличествоПозиций = стр1.ЗаказПокупателя.Товары.Количество();
			стр2.КоличествоШтук    = стр1.ЗаказПокупателя.Товары.Итог("Количество");
			стр2.НомерОчереди  = 1;
			
			Задание1.ИтогКоличествоПозиций	= Задание1.ИтогКоличествоПозиций + стр2.КоличествоПозиций;
			Задание1.ИтогКоличествоШтук     = Задание1.ИтогКоличествоШтук    + стр2.КоличествоШтук; 
			
		сообщить("Добавлен "+строка( стр1.ЗаказПокупателя ));
		списЗак.Добавить(стр1.ЗаказПокупателя );
	    списПост.Добавить( стр1.Поступление );
	КонецЦикла;
	 
//--------заполнить группы складов---------------
 	табл1 = ПолучитьГруппыСкладов( списЗак ); 
	если табл1.Количество()=0 тогда
		сообщить("НЕТ групп складов!", СтатусСообщения.Важное);
		возврат;
	КонецЕсли;	
	Задание1.ГруппыСкладов.Загрузить( табл1 );
	
//+++ 28.03.2019 - зато тут всё просто! --------заполнить Товары из Поступлений!---------------
    табл2 = таблТовары.Выгрузить( новый Структура("Выбран",Истина) ); 
	табл2.Свернуть("Номенклатура, Склад, Адрес", "КоличествоЗак, Остаток, ОстатокВАдресе");
	табл2.Колонки.Добавить("ГруппаСкладов"); 		табл2.Колонки.Добавить("АдресХранения");
	табл2.Колонки.Добавить("КоличествоЗаказано");	табл2.Колонки.Добавить("Количество");	табл2.Колонки.Добавить("КоличествоСвободно");
	для каждого стр2 из табл2 цикл
		стр2.ГруппаСкладов = стр2.Склад.ГруппаСкладов;
		стр2.АдресХранения = стр2.Адрес;
		стр2.КоличествоЗаказано = стр2.КоличествоЗак;
		стр2.Количество = 0;
		стр2.КоличествоСвободно = ?(стр2.ОстатокВАдресе>0, стр2.ОстатокВАдресе,стр2.Остаток);
	КонецЦикла;	
	Задание1.Товары.Загрузить( табл2 );
		
	Если табл1.Итог("КоличествоЗаказано")<>табл2.Итог("КоличествоЗаказано") тогда
		Сообщить("Неправильное количество заказанных товаров! Погруппам: "+строка(табл1.Итог("КоличествоЗаказано"))+" <> По товарам: "+строка(табл2.Итог("КоличествоЗаказано")), СтатусСообщения.Важное);
		возврат;
	КонецЕсли;
	
//--------ЗАПИСАТЬ-----------------
    попытка
		Задание1.Записать();
	//	сообщить("Успешно создан документ "+строка(Задание1), СтатусСообщения.Информация);
		ЗаданиеНаПеремещение = Задание1.Ссылка;
	исключение	
		сообщить("ОШИБКА при создании Задания на перемещение: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
//--------Провести-----------------
    попытка
		Задание1.Записать(РежимЗаписиДокумента.Проведение);
		сообщить("Успешно проведен документ "+строка(Задание1), СтатусСообщения.Информация);
		ЗаданиеНаПеремещение = Задание1.Ссылка;
	исключение	
		сообщить("ОШИБКА при проведении Задания на перемещение: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
	
КонецПроцедуры

Функция ПолучитьГруппыСкладов( списЗак )
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	табл.Склад,
	                |	табл.КоличествоЗак КАК КоличествоЗаказано,
	                |	табл.Остаток КАК КоличествоСвободно,
	                |	табл.Выбран
	                |ПОМЕСТИТЬ ВТ_Товары
	                |ИЗ
	                |	&ТаблТовары КАК табл
	                |ГДЕ
	                |	табл.ЗаказПокупателя В (&списЗак)
	                |	И табл.Выбран
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт.Склад) КАК Склад,
	                |	СУММА(вт.КоличествоЗаказано) КАК КоличествоЗаказано,
	                |	СУММА(вт.КоличествоСвободно) КАК КоличествоСвободно,
	                |	Склады.ГруппаСкладов,
	                |	1 КАК Приоритет,
	                |	ИСТИНА КАК Флаг
	                |ИЗ
	                |	ВТ_Товары КАК вт
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	                |		ПО вт.Склад = Склады.Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	Склады.ГруппаСкладов
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	КоличествоЗаказано УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.УстановитьПараметр("ТаблТовары",  ТаблТовары);
	 Запрос.УстановитьПараметр("списЗак", списЗак);
	 Результат = Запрос.Выполнить();
	табл1 = Результат.Выгрузить();
	
	ном1=1;
	для каждого стр1 из табл1 цикл
		стр1.Приоритет = ном1;
		ном1=ном1+1;
	КонецЦикла;	
	
	возврат табл1;
КонецФункции	

Функция ПолучитьТоварыСкладыЯчейки( списЗак, списПост )
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	табл.Номенклатура,
	                |	табл.Склад,
	                |	табл.КоличествоЗак КАК КоличествоЗаказано,
	                |	табл.Остаток КАК КоличествоСвободно,
	                |	табл.Выбран
	                |ПОМЕСТИТЬ ВТ_Товары
	                |ИЗ
	                |	&ТаблТовары КАК табл
	                |ГДЕ
	                |	табл.ЗаказПокупателя В(&списЗак)
	                |	И табл.Выбран
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	вт.Номенклатура КАК Номенклатура,
	                |	вт.Склад КАК Склад,
	                |	МАКСИМУМ(вт.КоличествоЗаказано) КАК КоличествоЗаказано,
	                |	МАКСИМУМ(вт.КоличествоСвободно) КАК КоличествоСвободно,
	                |	0 КАК Количество,
	                |	Склады.ГруппаСкладов КАК ГруппаСкладов,
	                |	ЕСТЬNULL(Адреса.АдресХранения, ЗНАЧЕНИЕ(Справочник.АдресаХранения.ПустаяСсылка)) КАК АдресХранения,
	                |	МАКСИМУМ(ЕСТЬNULL(Адреса.Количество, 0)) КАК КоличествоВАдресе,
	                |	ЕСТЬNULL(Адреса.АдресХранения.Порядок, 0) КАК ПорядокАдреса
	                |ИЗ
	                |	ВТ_Товары КАК вт
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	                |		ПО вт.Склад = Склады.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Документ.ПоступлениеТоваровУслуг.ТоварыАдресноеХранение как Адр
					|		где Адр.Ссылка В (&списПост) ) КАК Адреса
	                |		ПО вт.Склад = Адреса.Склад
	                |		И вт.Номенклатура = Адреса.Номенклатура
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	вт.Номенклатура,
	                |	вт.Склад,
	                |	Склады.ГруппаСкладов,
	                |	ЕСТЬNULL(Адреса.АдресХранения, ЗНАЧЕНИЕ(Справочник.АдресаХранения.ПустаяСсылка)),
	                |	ЕСТЬNULL(Адреса.АдресХранения.Порядок, 0)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номенклатура,
	                |	Склад,
	                |	ПорядокАдреса
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 Запрос.УстановитьПараметр("ТаблТовары",  ТаблТовары);
	 Запрос.УстановитьПараметр("списЗак",     списЗак);
	 Запрос.УстановитьПараметр("списПост", списПост);
	 Результат = Запрос.Выполнить();
	табл2 = Результат.Выгрузить();
	
	тов1 = неопределено; склад1=неопределено; КолЗак=0;
	
	для каждого стр2 из табл2 цикл
		если тов1 <> стр2.Номенклатура или склад1<>стр2.Склад тогда
			  тов1 = стр2.Номенклатура;
			 склад1= стр2.Склад;
			КолЗак = стр2.КоличествоЗаказано;
		КонецЕсли;
		
		если стр2.КоличествоВАдресе>0 тогда // как в поступлении
			стр2.КоличествоЗаказано = мин(колЗак, стр2.КоличествоВАдресе);
			стр2.КоличествоСвободно = стр2.КоличествоВАдресе;
		иначе	
			стр2.КоличествоЗаказано = мин(колЗак, стр2.КоличествоСвободно); 
		КонецЕсли;	
		Сообщить(стр2.Номенклатура.Код+") Заказано: "+строка(КолЗак)+" - "+строка(стр2.КоличествоЗаказано)+" Склад: "+строка(стр2.Склад)+" ("+строка(стр2.АдресХранения)+")" );
		колЗак = колЗак - стр2.КоличествоЗаказано;
		
	КонецЦикла;	
	
	i=0; // чистим то, чего не надо!
	пока i<табл2.Количество() цикл
		Если табл2[i].КоличествоЗаказано<=0 тогда
			табл2.Удалить(i);
		иначе
			i=i+1;
		КонецЕсли;	
	КонецЦикла;
	
	возврат табл2;
	
КонецФункции	

СкладПерещения = справочники.Склады.НайтиПоКоду("02316"); //Ангар-Ремонт

СкладБрак = справочники.Склады.НайтиПоКоду("02333"); //8000(Тест)
КонтрагентДляПеремаркировки = справочники.Контрагенты.НайтиПоКоду("92621"); //Мамниашвили Л.З.
КатегорияМаркировка = Справочники.КатегорииОбъектов.НайтиПоКоду("00054"); //Маркировка