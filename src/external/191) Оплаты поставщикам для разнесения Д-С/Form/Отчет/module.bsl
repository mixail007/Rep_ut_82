
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
КонецПроцедуры

Процедура ПриЗакрытии()
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	СтрокаФильтраЗапроса="";
	
	Если ТолькоНераспределенныеПлатежи Тогда
		СтрокаФильтраЗапроса="ИМЕЮЩИЕ СУММА(СуммаПлатежа)- СУММА(СуммаЗаказов) >0";	
	КонецЕсли;	
		
	Макет=ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
|Регистратор Документ,
|Регистратор.Ответственный Ответственный,
|Контрагент,
|ДоговорКонтрагента,
|ДоговорКонтрагента.ОтветственноеЛицо ОтветственноеЛицо,
|СУММА(СуммаЗаказов) СуммаЗаказов,
|СУММА(СуммаПлатежа) СуммаПлатежа,
|СУММА(СуммаПлатежа)- СУММА(СуммаЗаказов) Разность
|ИЗ
|(ВЫБРАТЬ
|	ДоговорКонтрагента.Владелец Контрагент,
|	ДоговорКонтрагента,
|	Сделка,
|	Регистратор,
|	ВЫБОР  КОГДА  Сделка ССЫЛКА Документ.ЗаказПоставщику ТОГДА
|	СуммаВзаиморасчетовПриход
|	ИНАЧЕ
|	0
|	КОНЕЦ СуммаЗаказов,
|	СуммаВзаиморасчетовПриход СуммаПлатежа
|ИЗ
|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&НачДата, &КонДата, Регистратор,
|   ДоговорКонтрагента.ВедениеВзаиморасчетов=Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) И
| (НЕ &ТолькоПоСвоимДоговорам ИЛИ ДоговорКонтрагента.ОтветственноеЛицо=&ОтветственноеЛицо)) 	
|ГДЕ (Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее И
|Регистратор.ВидОперации=Значение(Перечисление.ВидыОперацийППИсходящее.ОплатаПоставщику) ) ИЛИ 
|(Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер И
|Регистратор.ВидОперации=Значение(Перечисление.ВидыОперацийРКО.ОплатаПоставщику) ) 
|
|) А
|СГРУППИРОВАТЬ ПО	Регистратор,Контрагент,
|ДоговорКонтрагента "+СтрокаФильтраЗапроса+
//|ИМЕЮЩИЕ СУММА(СуммаПлатежа)- СУММА(СуммаЗаказов) >0
//|//Контрагент,
//|//Контрагент.ОсновнойМенеджерПокупателя
" УПОРЯДОЧИТЬ ПО Регистратор.Дата,Регистратор";

	
	//, КонДата, НачДата, Пени, ПеревыставлУслуги
	
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонДата));
	Запрос.УстановитьПараметр("НачДата", НачалоДня(НачДата));
	Запрос.УстановитьПараметр("ОплатаОтПокупателяБезНал", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ОплатаОтПокупателяНал", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ПоЗаказам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	Запрос.УстановитьПараметр("ТолькоПоСвоимДоговорам", ТолькоПоСвоимДоговорам);

			
	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ПериодСтр=ПредставлениеПериода(НачалоДня(НачДата),КонецДня(Кондата), "ФП=Истина");
	ОбластьЗаголовок.Параметры.ОтветственноеЛицо=Строка(глТекущийПользователь);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();
    номПП=0;
	Пока ВыборкаДетали.Следующий() Цикл
		номПП=номПП+1;
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ОбластьДетальныхЗаписей.Параметры.НомПП=НомПП;
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	НачДата=НачалоДня(НачалоМесяца(ТекущаяДата()));
	КонДата=КонецДня(КонецМесяца(ТекущаяДата()));
	//ЭлементыФормы.ТолькоНераспределенныеПлатежи.Значение=Истина;
	ЭлементыФормы.ТолькоПоСвоимДоговорам.Значение=Истина;
	
	Если яштАдминистративныеФункцииДоступны() Тогда
		ЭлементыФормы.ТолькоПоСвоимДоговорам.Доступность=Истина;
	Иначе
		ЭлементыФормы.ТолькоПоСвоимДоговорам.Доступность=Ложь;
	КонецЕсли;	
	
	
КонецПроцедуры




