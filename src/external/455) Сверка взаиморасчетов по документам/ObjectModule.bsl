Перем ОбъектПодключения, РезультатПодключения Экспорт;
Перем ДеревоОтличий;
Перем мФакторинг;

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "") Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
		
	Возврат РезультатПодключения;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", Ложь);
	СтруктураПодключения.Вставить("АутентификацияWindows", Ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "server");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "v82ib_yst_bp");
	СтруктураПодключения.Вставить("Пользователь", "Плотников Дмитрий");
	СтруктураПодключения.Вставить("Пароль", "123654");
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V82");	
	
	Возврат СтруктураПодключения;
	
КонецФункции


Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Процедура СообщитьОбОшибкеДляПользователю(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Сообщить(СокрЛП(ТекстСообщения), СтатусСообщения.Важное);

КонецПроцедуры

#Если Клиент Тогда
// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецЕсли

Функция ПолучитьДеревоОтличий(НачДата,КонДата,Контрагент) Экспорт


Состояние("Выполняется запрос к Внешней Базе...");
	// строим таблицу документов внешней базы по UUID
	РезультатЗапросаКВнешнейБазе = ВыполнитьЗапросКВнешнейБазе(НачДата,КонДата);
	
Состояние("Выполняется Заполнение таблицы документов Внешней Базы...");
	ДеревоВнешнейБазы = РезультатЗапросаКВнешнейБазе.Выгрузить(ОбъектПодключения.ОбходРезультатаЗапроса.Прямой);
	УстановитьУИД(ДеревоВнешнейБазы);
	
//Состояние("Выполняется запрос к Внешней Базе...");
////	// строим таблицу документов внешней базы по дате и номеру
//	ТаблицаПоДатеИНомеру =  ВыполнитьЗапросКВнешнейБазеПоДатеИНомеру(НачДата,КонДата);
	

	
Состояние("Выполняется запрос к Текущей Базе...");
	ДеревоОтличий.Очистить();
	РезультатЗапросаКТекБазе = ВыполнитьЗапросКТекБазе(НачДата,КонДата,Контрагент);
	Выборка = РезультатЗапросаКТекБазе.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	
	
Состояние("Выполняется сравнение...");
	Пока Выборка.Следующий() Цикл
		Примечание = "Совпадает";//+++
		Соответствует = Истина;
		
		
		
		СтрокаДокументаВнешняя = ДеревоВнешнейБазы.Найти(Строка(Выборка.Документ.УникальныйИдентификатор()),"УИД");
		Представление = "";
		Если СтрокаДокументаВнешняя = Неопределено Тогда			
			Строка_UID   = строка(Выборка.Документ.УникальныйИдентификатор() );
            Новый_UID    = ОбъектПодключения.NewObject("УникальныйИдентификатор", Строка_UID);
            Документ  = ОбъектПодключения.Документы.КорректировкаРеализации.ПолучитьСсылку(Новый_UID);
		иначе
			Документ = СтрокаДокументаВнешняя.Документ;
			Представление = СтрокаДокументаВнешняя.Представление;
		КонецЕсли;
			

		
		Если ЗначениеНеЗаполнено(Документ.Номер) Тогда
			Соответствует = Ложь;
			Примечание = "отсутствует в бу";
		//+++ 17.10.2011 дополнительное сравнение ПСК	
		иначеЕсли ЕстьРеквизитДокумента("Проведен", Документ.Метаданные()) 
			и ЕстьРеквизитДокумента("Проведен",Выборка.Документ.Метаданные()) тогда
			Если (Документ.Проведен<>Выборка.Документ.Проведен) тогда 
			Соответствует = Ложь;
			Примечание = "Проведен ("+?(Документ.Проведен,"Да","Нет")+")";
			КонецЕсли;
		иначеЕсли ЕстьРеквизитДокумента("СуммаДокумента", Документ.Метаданные()) 
			и ЕстьРеквизитДокумента("СуммаДокумента",Выборка.Документ.Метаданные()) тогда
			Если (Окр(Документ.СуммаДокумента,2)<>Окр(Выборка.Документ.СуммаДокумента,2)) тогда 
			Соответствует = Ложь;
			Примечание = "Изм.Суммы = ("+Число(Окр(Документ.СуммаДокумента,2)-Окр(Выборка.Документ.СуммаДокумента,2))+"р.)";
			КонецЕсли;
			Если Документ.Закрыт тогда
			Примечание = "НЕизм.Сумма: "+Число(Окр(Документ.СуммаДокумента,2)-Окр(Выборка.Документ.СуммаДокумента,2))+"р.";
			КонецЕсли;
			
		иначеЕсли ЕстьРеквизитДокумента("Контрагент", Документ.Метаданные()) 
			    и ЕстьРеквизитДокумента("Контрагент",Выборка.Документ.Метаданные()) тогда
			Если (Документ.Контрагент.ИНН<>Выборка.Документ.Контрагент.ИНН) 
			и (Документ.Контрагент.НаименованиеПолное<>Выборка.Документ.Контрагент.НаименованиеПолное) тогда 
			Соответствует = Ложь;
			Примечание = "Контрагент ("+Документ.Контрагент.НаименованиеПолное+")";
				Если Документ.Закрыт тогда
				Примечание = "Контрагент БП: "+Документ.Контрагент.НаименованиеПолное; 
				КонецЕсли;
			КонецЕсли;
		//+++) 17.10.2011 дополнительное сравнение
		иначеЕсли ЕстьРеквизитДокумента("КонтрагентДебитор", Документ.Метаданные()) 
			    и ЕстьРеквизитДокумента("КонтрагентДебитор",Выборка.Документ.Метаданные()) тогда
			Если (Документ.КонтрагентДебитор.ИНН<>Выборка.КонтрагентДебитор.Контрагент.ИНН) 
			и (Документ.КонтрагентДебитор.НаименованиеПолное<>Выборка.Документ.КонтрагентДебитор.НаименованиеПолное) тогда 
			Соответствует = Ложь;
			Примечание = "Контрагент ("+Документ.КонтрагентДебитор.НаименованиеПолное+")";
				Если СтрокаДокументаВнешняя.Документ.Закрыт тогда
				Примечание = "Контрагент БП: "+Документ.КонтрагентДебитор.НаименованиеПолное; 
				КонецЕсли;
			КонецЕсли;
		//+++) 17.10.2011 дополнительное сравнение

		КОнецЕсли;	
				
	//	Если НЕ Соответствует Тогда
		СтрокаДокумента =ДеревоОтличий.Добавить();
		СтрокаДокумента.Документ =Выборка.Документ;
		Если ЗначениеЗаполнено(Документ.Номер) = Неопределено тогда
		СтрокаДокумента.КонтрагентБУ ="";
		СтрокаДокумента.СуммаБУ =	"";
		иначе	
			Если ЕстьРеквизитДокумента("Контрагент", Документ.Метаданные())  Тогда
				СтрокаДокумента.КонтрагентБУ = Документ.Контрагент.НаименованиеПолное;
			конецЕсли;
			Если ЕстьРеквизитДокумента("КонтрагентДебитор", Документ.Метаданные())  Тогда
				СтрокаДокумента.КонтрагентБУ = Документ.КонтрагентДебитор.НаименованиеПолное;
			конецЕсли;
			Если ЕстьРеквизитДокумента("СуммаДокумента", Документ.Метаданные())   тогда
				СтрокаДокумента.СуммаБУ =	Окр(Документ.СуммаДокумента,2);
			конецЕсли;
			СтрокаДокумента.ДокументБУ = Представление;
		Конецесли;
		СтрокаДокумента.Примечание = Примечание; //+++
	//	КонецЕсли;	
	КонецЦикла;
Состояние(" ");
		
	возврат ДеревоОтличий;
	
КонецФункции


 

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьПредставлениеИзВнешнегоИсточника(СтрокаДоговораВнешняя)

	Возврат СтрокаДоговораВнешняя.Наименование;	

КонецФункции // ПолучитьПредставлениеИзВнешнегоИсточника()
 

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСсылкуИзВнешнегоИсточника(СтрокаВнешняя,ИмяСпр)

	НовыйУИД = Новый УникальныйИдентификатор(СтрокаВнешняя.УИД);
	
	Ссылка = Справочники[ИмяСпр].ПолучитьСсылку(НовыйУИД);
	Если Ссылка.Пустая() Тогда
		Наименование = СтрокаВнешняя[ИмяСпр+"Наименование"];
		Сообщить(Наименование); 
		Возврат Наименование;
	Иначе
		Возврат Ссылка;
	КонецЕсли; 

КонецФункции // ПолучитьСсылкуИзВнешнегоИсточника()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКТекБазе(НачДата,КонДата,Контрагент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец) КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор КАК Взаиморасчет,
	|	СУММА(ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовОборот) КАК Сумма
	|ПОМЕСТИТЬ Вз
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Авто, НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОбороты
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовОборот <> 0
	|	И (ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.КонтрагентДебитор = &Контр
	|			ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.КонтрагентКредитор = &Контр)
	|	И ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.Дата МЕЖДУ &НачДата И &КонДата
	|	И ТИПЗНАЧЕНИЯ(ВзаиморасчетыСКонтрагентамиОбороты.Регистратор) = ТИП(Документ.Взаимозачет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вз.Взаиморасчет
	|ПОМЕСТИТЬ Итог
	|ИЗ
	|	Вз КАК Вз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Документ,
	|		РеализацияТоваровУслуг.Номер КАК Номер
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	|		И РеализацияТоваровУслуг.Контрагент = &Контр
	|		И НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Ссылка,
	|		ПоступлениеТоваровУслуг.Номер
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	|		И ПоступлениеТоваровУслуг.Контрагент = &Контр
	|		И НЕ ПоступлениеТоваровУслуг.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеИсходящее.Ссылка,
	|		ПлатежноеПоручениеИсходящее.Номер
	|	ИЗ
	|		Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|	ГДЕ
	|		ПлатежноеПоручениеИсходящее.Дата МЕЖДУ &НачДата И &КонДата
	|		И ПлатежноеПоручениеИсходящее.Контрагент = &Контр
	|		И НЕ ПлатежноеПоручениеИсходящее.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.Ссылка,
	|		ПриходныйКассовыйОрдер.Номер
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
	|		И ПриходныйКассовыйОрдер.Контрагент = &Контр
	|		И НЕ ПриходныйКассовыйОрдер.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		РасходныйКассовыйОрдер.Ссылка,
	|		РасходныйКассовыйОрдер.Номер
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ГДЕ
	|		РасходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
	|		И РасходныйКассовыйОрдер.Контрагент = &Контр
	|		И НЕ РасходныйКассовыйОрдер.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВозвратТоваровОтПокупателя.Ссылка,
	|		ВозвратТоваровОтПокупателя.Номер
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|	ГДЕ
	|		ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачДата И &КонДата
	|		И ВозвратТоваровОтПокупателя.Контрагент = &Контр
	|		И НЕ ВозвратТоваровОтПокупателя.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПлатежноеПоручениеВходящее.Ссылка,
	|		ПлатежноеПоручениеВходящее.Номер
	|	ИЗ
	|		Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|	ГДЕ
	|		ПлатежноеПоручениеВходящее.Дата МЕЖДУ &НачДата И &КонДата
	|		И ПлатежноеПоручениеВходящее.Контрагент = &Контр
	|		И НЕ ПлатежноеПоручениеВходящее.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажах.Ссылка,
	|		ОтчетКомиссионераОПродажах.Номер
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|	ГДЕ
	|		ОтчетКомиссионераОПродажах.Дата МЕЖДУ &НачДата И &КонДата
	|		И ОтчетКомиссионераОПродажах.Контрагент = &Контр
	|		И НЕ ОтчетКомиссионераОПродажах.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВозвратТоваровПоставщику.Ссылка,
	|		ВозвратТоваровПоставщику.Номер
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Дата МЕЖДУ &НачДата И &КонДата
	|		И ВозвратТоваровПоставщику.Контрагент = &Контр
	|		И НЕ ВозвратТоваровПоставщику.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировкаРеализации.Ссылка,
	|		КорректировкаРеализации.Номер
	|	ИЗ
	|		Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|	ГДЕ
	|		КорректировкаРеализации.Дата МЕЖДУ &НачДата И &КонДата
	|		И КорректировкаРеализации.Контрагент = &Контр
	|		И НЕ КорректировкаРеализации.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК Документы
	|ГДЕ
	|	Документы.Документ.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Итог.Взаиморасчет
	|ИЗ
	|	Итог КАК Итог";
	
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("Контр", Контрагент);
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата));
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКТекБазе()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКВнешнейБазе(НачДата,КонДата)

	Запрос = ОбъектПодключения.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
|	РеализацияТоваровУслуг.Ссылка КАК Документ,
|	РеализацияТоваровУслуг.Номер,
|	РеализацияТоваровУслуг.Контрагент,
|	РеализацияТоваровУслуг.Представление
|ИЗ
|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
|ГДЕ
|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПоступлениеТоваровУслуг.Ссылка,
|	ПоступлениеТоваровУслуг.Номер,
|	ПоступлениеТоваровУслуг.Контрагент,
|	ПоступлениеТоваровУслуг.Представление
|ИЗ
|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
|ГДЕ
|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПриходныйКассовыйОрдер.Ссылка,
|	ПриходныйКассовыйОрдер.Номер,
|	ПриходныйКассовыйОрдер.Контрагент,
|	ПриходныйКассовыйОрдер.Представление
|ИЗ
|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
|ГДЕ
|	ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	РасходныйКассовыйОрдер.Ссылка,
|	РасходныйКассовыйОрдер.Номер,
|	РасходныйКассовыйОрдер.Контрагент,
|	РасходныйКассовыйОрдер.Представление
|ИЗ
|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
|ГДЕ
|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ВозвратТоваровОтПокупателя.Ссылка,
|	ВозвратТоваровОтПокупателя.Номер,
|	ВозвратТоваровОтПокупателя.Контрагент,
|	ВозвратТоваровОтПокупателя.Представление
|ИЗ
|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
|ГДЕ
|	ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ПоступлениеНаРасчетныйСчет.Ссылка,
|	ПоступлениеНаРасчетныйСчет.Номер,
|	ПоступлениеНаРасчетныйСчет.Контрагент,
|	ПоступлениеНаРасчетныйСчет.Представление
|ИЗ
|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
|ГДЕ
|	ПоступлениеНаРасчетныйСчет.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	СписаниеСРасчетногоСчета.Ссылка,
|	СписаниеСРасчетногоСчета.Номер,
|	СписаниеСРасчетногоСчета.Контрагент,
|	СписаниеСРасчетногоСчета.Представление
|ИЗ
|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
|ГДЕ
|	СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ОтчетКомиссионераОПродажах.Ссылка,
|	ОтчетКомиссионераОПродажах.Номер,
|	ОтчетКомиссионераОПродажах.Контрагент,
|	ОтчетКомиссионераОПродажах.Представление
|ИЗ
|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
|ГДЕ
|	ОтчетКомиссионераОПродажах.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	ВозвратТоваровПоставщику.Ссылка,
|	ВозвратТоваровПоставщику.Номер,
|	ВозвратТоваровПоставщику.Контрагент,
|	ВозвратТоваровПоставщику.Представление
|ИЗ
|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
|ГДЕ
|	ВозвратТоваровПоставщику.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	КорректировкаРеализации.Ссылка,
|	КорректировкаРеализации.Номер,
|	КорректировкаРеализации.Контрагент,
|	КорректировкаРеализации.Представление
|ИЗ
|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
|ГДЕ
|	КорректировкаРеализации.Дата МЕЖДУ &НачДата И &КонДата
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	КорректировкаДолга.Ссылка,
|	КорректировкаДолга.Номер,
|	КорректировкаДолга.КонтрагентДебитор как контрагент,
|	КорректировкаДолга.Представление
|ИЗ
|	Документ.КорректировкаДолга КАК КорректировкаДолга
|ГДЕ
|	КорректировкаДолга.Дата МЕЖДУ &НачДата И &КонДата";
	//|";
    СтрокаНачДата=СТрока(НачДата);
	Запрос.УстановитьПараметр("НачДата",НачДата);
	
	СтрокаКонДата=СТрока(КонДата);
	Запрос.УстановитьПараметр("КонДата",КонецДня(КонДата) );
                 
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКВнешнейБазе()

Процедура УстановитьУИД(ДеревоВнешнейБазы)

	ДеревоВнешнейБазы.Колонки.Добавить("УИД");
	//ДеревоВнешнейБазы.Колонки.Добавить("УИДКонтр");
	
	Для каждого СтрокаДокумента Из ДеревоВнешнейБазы Цикл
		
		//СтрокаДокумента.УИД = ОбъектПодключения.String(СтрокаДокумента.Документ.УникальныйИдентификатор());
	    СтрокаДокумента.УИД  = ОбъектПодключения.глВернутьСтрокуUUID(СтрокаДокумента.Документ);
		//СтрокаДокумента.УИДКонтр  =ОбъектПодключения.глВернутьСтрокуUUID(СтрокаДокумента.Контрагент);

	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьДеревоОтличийИсходное(Покупатели,КонтрагентПоиск) Экспорт	
	Состояние("Выполняется запрос к Внешней Базе...");
	// строим таблицу документов внешней базы по дате и номеру
	ТаблицаБП = ВыполнитьЗапросКВнешнейБазеИсходный(Покупатели,КонтрагентПоиск);
	
	МенеджерВР = Новый МенеджерВременныхТаблиц;
	
	ЗапросВнашейБазе = Новый Запрос;
	ЗапросВнашейБазе.МенеджерВременныхТаблиц = МенеджерВР;
	ЗапросВнашейБазе.УстановитьПараметр("ТаблицаБП",ТаблицаБП);
	ЗапросВнашейБазе.УстановитьПараметр("НачалоПериода",НачДата);
	ЗапросВнашейБазе.УстановитьПараметр("КонецПериода",КонецДня(КонДата));
	если Покупатели Тогда
	    ЗапросВнашейБазе.УстановитьПараметр("Вид",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
    Иначе
	    ЗапросВнашейБазе.УстановитьПараметр("Вид",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;
	//ЗапросВнашейБазе.УстановитьПараметр("Факторинг",Справочники.ТипыДоговоров.Факторинг);
	
	Список = новый СписокЗначений;
	список.Добавить(Справочники.ТипыДоговоров.Факторинг);
	список.Добавить(Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
	список.Добавить(Справочники.ТипыДоговоров.ШинтрейдЯрославль);
	список.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0004"));
	
	ЗапросВнашейБазе.УстановитьПараметр("Список",Список);
	
	ЗапросВнашейБазе.Текст = "ВЫБРАТЬ
	                         |	ТаблицаБП.КонтрагентКод,
	                         |	ТаблицаБП.НачальныйОстаток,
	                         |	ТаблицаБП.Приход,
	                         |	ТаблицаБП.Расход,
	                         |	ТаблицаБП.КонечныйОстаток
	                         |ПОМЕСТИТЬ БП
	                         |ИЗ
	                         |	&ТаблицаБП КАК ТаблицаБП
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	                         |	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код КАК КонтрагентКод,
	                         |	СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток) КАК НачальныйОстаток,
	                         |	СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход) КАК Приход,
	                         |	СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход) КАК Расход,
	                         |	СУММА(ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток) КАК КонечныйОстаток
	                         |ПОМЕСТИТЬ УТ
	                         |ИЗ
	                         |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(
	                         |			&НачалоПериода,
	                         |			&КонецПериода,
	                         |			Авто,
	                         |			,
	                         |			ДоговорКонтрагента.ВидДоговора = &вид
	                         |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	                         |				И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%не использовать%""
							 |              И НЕ ДоговорКонтрагента.ТипДоговора В (&Список) 
							 |              //ОтборПоКонтрагенту
							 |) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	                         |              
							 |СГРУППИРОВАТЬ ПО
	                         |	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец.Код,
	                         |	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.Владелец
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	УТ.Контрагент КАК Контрагент,
	                         |	ЕСТЬNULL(УТ.НачальныйОстаток, 0) КАК УТ_НачальныйОстаток,
	                         |	ЕСТЬNULL(УТ.Приход, 0) КАК УТ_Приход,
	                         |	ЕСТЬNULL(УТ.Расход, 0) КАК УТ_Расход,
	                         |	ЕСТЬNULL(УТ.КонечныйОстаток, 0) КАК УТ_КонечныйОстаток,
	                         |	ЕСТЬNULL(БП.НачальныйОстаток, 0) КАК БП_НачальныйОстаток,
	                         |	ЕСТЬNULL(БП.Приход, 0) КАК БП_Приход,
	                         |	ЕСТЬNULL(БП.Расход, 0) КАК БП_Расход,
	                         |	ЕСТЬNULL(БП.КонечныйОстаток, 0) КАК БП_КонечныйОстаток
	                         |ИЗ
	                         |	УТ КАК УТ
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ БП КАК БП
	                         |		ПО УТ.КонтрагентКод = БП.КонтрагентКод
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	Контрагент";
	Если ЗначениеЗаполнено(КонтрагентПоиск) Тогда
		ЗапросВнашейБазе.Текст = СтрЗаменить(ЗапросВнашейБазе.Текст,"//ОтборПоКонтрагенту","и ДоговорКонтрагента.Владелец = &КонтрагентПоиск");
		ЗапросВнашейБазе.УстановитьПараметр("КонтрагентПоиск",КонтрагентПоиск);
	КонецЕсли;
	Результат = ЗапросВнашейБазе.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапросКВнешнейБазеИсходный(Покупатели,КонтрагентПоиск)
	
	Запрос = ОбъектПодключения.NewObject("Запрос");
	ТекстЗапроса = "";
	
	КЧ = Новый КвалификаторыЧисла(12,2);
    КС = Новый КвалификаторыСтроки(20);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
    Массив.Очистить();
    Массив.Добавить(Тип("Число"));
    ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаПоДокументуИзУТ = Новый ТаблицаЗначений;
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("КонтрагентКод",ОписаниеТиповС);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("НачальныйОстаток",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("Приход",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("Расход",ОписаниеТиповЧ);
	ТаблицаПоДокументуИзУТ.Колонки.Добавить("КонечныйОстаток",ОписаниеТиповЧ);
	
	
			
	ТекстЗапроса = "ВЫБРАТЬ
	|ХозрасчетныйОстаткиИОбороты.Субконто1.Код КАК Код,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток, 0) КАК НачальныйОстаток,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт, 0) КАК Приход,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт, 0) КАК Расход,
	|ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток, 0) КАК КонечныйОстаток
    |ИЗ
	|РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		Авто,
	|		,
	|		Счет.КодБыстрогоВыбора = &Код1
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код2
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код3
	|			ИЛИ Счет.КодБыстрогоВыбора = &Код4,
	|		,
	|		) КАК ХозрасчетныйОстаткиИОбороты
    |
	|       //ОтборПоПокупателю
    |УПОРЯДОЧИТЬ ПО
	|Код";
	
	Запрос.Текст = ТекстЗапроса;
	//код = Новый СписокЗначений;
	Если Покупатели Тогда
	   Запрос.УстановитьПараметр("Код1","6201");
	   Запрос.УстановитьПараметр("Код2","6202");
	   Запрос.УстановитьПараметр("Код3","6231");
	   Запрос.УстановитьПараметр("Код4","11111");
    Иначе
	   Запрос.УстановитьПараметр("Код1","6001");
	   Запрос.УстановитьПараметр("Код2","6002");
	   Запрос.УстановитьПараметр("Код3","6021");
	   Запрос.УстановитьПараметр("Код4","6022");
    КонецЕсли;
	Если ЗначениеЗаполнено(КонтрагентПоиск) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборПоПокупателю","ГДЕ ХозрасчетныйОстаткиИОбороты.Субконто1.Код = &КонтрагентПоиск");
		Запрос.УстановитьПараметр("КонтрагентПоиск",КонтрагентПоиск.Код);
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода",НачДата);
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(КонДата));
	Выборка=Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ ИЗ Выборка Цикл
       НовСтрока = ТаблицаПоДокументуИзУТ.Добавить();
       НовСтрока.КонтрагентКод = ?(СокрЛП(СтрокаТЗ.Код)<>"",СокрЛП(СтрокаТЗ.Код),"Пам");
	   НовСтрока.НачальныйОстаток = СтрокаТЗ.НачальныйОстаток;
	   НовСтрока.Приход = СтрокаТЗ.Приход;
	   НовСтрока.Расход = СтрокаТЗ.Расход;
	   НовСтрока.КонечныйОстаток = СтрокаТЗ.КонечныйОстаток;
	КонецЦикла;
   
	Возврат ТаблицаПоДокументуИзУТ;
	
КонецФункции

 

ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;

ДеревоОтличий = Новый ТаблицаЗначений;
ДеревоОтличий.Колонки.Добавить("Документ");
ДеревоОтличий.Колонки.Добавить("КонтрагентБУ");
ДеревоОтличий.Колонки.Добавить("СуммаБУ");
ДеревоОтличий.Колонки.Добавить("Примечание");
ДеревоОтличий.Колонки.Добавить("ДокументБУ");

мФакторинг = Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг");