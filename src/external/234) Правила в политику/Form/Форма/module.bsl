
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если Контрагент.Пустая() тогда
		Предупреждение("Выберите контрагента!");
		Возврат;
	КонецЕсли;
	
	попытка
	рез =ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент, неопределено, Истина);
	Если ДокПолитики.Пустая() тогда 
	докОб = Документы.ПолитикаЦенообразования.СоздатьДокумент();
	докОб.Дата = ТекущаяДата();
	докОб.ВидОперации = перечисления.ВидыОперацийПолитикаЦенообразования.АвтоматическийРасчетЦен;
	докОб.Контрагент = Контрагент;
	докОб.Ответственный = Контрагент.ОсновнойДоговорКонтрагента.ОтветственноеЛицо;
	докОб.Записать();
	ДокПолитики = докОб.Ссылка;
	КонецЕсли;
		
	докОб = ДокПолитики.ПолучитьОбъект();
	докОб.Правила.Очистить();
	докОб.Правила.Загрузить( рез.Правила );
	
Если НЕ Флажок1 тогда	
	стр1 = докОб.Правила.Добавить();
	стр1.Правило = "Номенклатура.ВидТовара = &Шины И ТипЦен = &Базовая";
	стр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";
	
	стр1 = докОб.Правила.Добавить();
	стр1.Правило = "Номенклатура.ВидТовара = &Диски И ТипЦен = &Базовая";
	стр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";
	
	//------------------------------------------------------------------------
	стр1 = докОб.Правила.Добавить();
	стр1.Правило = "Номенклатура.ВидТовара = &АКБ И ТипЦен = &Базовая";
	стр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";
	
	стр1 = докОб.Правила.Добавить();
	стр1.Правило = "Номенклатура.ВидТовара = &Аксессуары И ТипЦен = &Базовая";
	стр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";
	
	стр1 = докОб.Правила.Добавить();
	стр1.Правило = "Номенклатура.ВидТовара = &Прочее И ТипЦен = &Базовая";
	стр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";

КонецЕсли;	
	
	докОб.Параметры.Очистить();
	докОб.Параметры.Загрузить( рез.Параметры );
	
Если НЕ Флажок1 тогда	
	Если докОб.Параметры.найти("Базовая","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "Базовая";
		стр2.ЗначениеПараметра = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
	КонецЕсли;
	////все типы товаров от Базовой!
	//Если докОб.Параметры.найти("Крупныйопт","ИмяПараметра")=неопределено тогда
	//	стр2 = докОб.Параметры.Добавить();
	//	стр2.ИмяПараметра = "Крупныйопт";
	//	стр2.ЗначениеПараметра = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005");
	//КонецЕсли;
//------------------Виды товаров--------------------------------------------------	
	Если докОб.Параметры.найти("Шины","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "Шины";
		стр2.ЗначениеПараметра = перечисления.ВидыТоваров.Шины;
	КонецЕсли;
	Если докОб.Параметры.найти("Диски","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "Диски";
		стр2.ЗначениеПараметра =перечисления.ВидыТоваров.Диски;
	КонецЕсли;
 	Если докОб.Параметры.найти("АКБ","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "АКБ";
		стр2.ЗначениеПараметра =перечисления.ВидыТоваров.АКБ;
	КонецЕсли;
	Если докОб.Параметры.найти("Аксессуары","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "Аксессуары";
		стр2.ЗначениеПараметра =перечисления.ВидыТоваров.Аксессуары;
	КонецЕсли;
	Если докОб.Параметры.найти("Прочее","ИмяПараметра")=неопределено тогда
		стр2 = докОб.Параметры.Добавить();
		стр2.ИмяПараметра = "Прочее";
		стр2.ЗначениеПараметра =перечисления.ВидыТоваров.Прочее;
	КонецЕсли;

КонецЕсли;

	докОб.Записать();
	
	докОб.ПолучитьФорму("ФормаДокумента").Открыть();
	исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

//	//+++ 07.11.2013
////Определяет цены для Контрагента по Списку товаров 
////1) определяются все правила для Клиента 
////	и все общие правила
////2) по правилам из Политики ценообразования для Списка товаров - получаются цены товаров
////3) если нет цены или правила, то цена = 1 р. 
////4) если нет документа Политики ценообразования - то выдает ошибку в виде строки: "нет политики ценообразования для контрагента"
////
////Результат: таблица значений с ценами Контрагента, столбцы: 
////1) Приоритет - показывает номер сработавшего правила,
////2) Номенклатура - товар из первоначального Списка Номенклатуры,
////3) МинимальнаяЦена - рассчитаная цена или 1,
////4) ТипЦен - показывает от какого типа цен была скидка
////
//Функция ПолучитьЦеныДляКонтрагента_РегСв(Контрагент,СписокНоменклатуры=неопределено, получитьПравилаИПараметры=ЛОЖЬ, ТекущаяПолитикаПравила=неопределено) 
//	
//Если ТекущаяПолитикаПравила=неопределено тогда
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//			   |	ПравилаЦенообразования.Приоритет,
//			   |	ПравилаЦенообразования.ВидТовара,
//			   |	ПравилаЦенообразования.Производитель,
//			   |	ПравилаЦенообразования.НоменклатурнаяГруппа,
//			   |	ПравилаЦенообразования.ВходитВПапку,
//			   |	ПравилаЦенообразования.ПодСтрока,
//			   |	ПравилаЦенообразования.Диаметр,
//			   |	ПравилаЦенообразования.Номенклатура,
//			   |	ПравилаЦенообразования.ТипЦен,
//			   |	ПравилаЦенообразования.СкидкаНаценка,
//			   |	Выразить(""""  как строка(1000) ) КАК Правило,
//			   |	Выразить(""""  как строка(50) ) КАК ОтпускнаяЦена
//			   |ИЗ
//			   |	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
//			   |ГДЕ
//			   |	ПравилаЦенообразования.Контрагент = &Контрагент
//			   | "+ ?(Флажок1, "
//			   |ОБЪЕДИНИТЬ ВСЕ
//			   |
//			   |ВЫБРАТЬ
//			   |	ПравилаЦенообразованияОбщие.Приоритет + 1000,
//			   |	ПравилаЦенообразованияОбщие.ВидТовара,
//			   |	ПравилаЦенообразованияОбщие.Производитель,
//			   |	ПравилаЦенообразованияОбщие.НоменклатурнаяГруппа,
//			   |	ПравилаЦенообразованияОбщие.ВходитВПапку,
//			   |	ПравилаЦенообразованияОбщие.ПодСтрока,
//			   |	ПравилаЦенообразованияОбщие.Диаметр,
//			   |	ПравилаЦенообразованияОбщие.Номенклатура,
//			   |	ПравилаЦенообразованияОбщие.ТипЦен,
//			   |	ПравилаЦенообразованияОбщие.СкидкаНаценка,
//			   |	Выразить(""""  как строка(1000) ),
//			   |	Выразить(""""  как строка(50) )
//			   |ИЗ
//			   |	РегистрСведений.ПравилаЦенообразованияОбщие КАК ПравилаЦенообразованияОбщие
//			   |
//			   |УПОРЯДОЧИТЬ ПО Приоритет", "");

//	Запрос.УстановитьПараметр("Контрагент", Контрагент);

//	Результат = Запрос.Выполнить();
//	ТекущаяПолитикаПравила = Результат.Выгрузить();
//Иначе
//	ТекущаяПолитикаПравила.Колонки.Добавить("Правило");
//	ТекущаяПолитикаПравила.Колонки.Добавить("ОтпускнаяЦена");
//	Если ТекущаяПолитикаПравила.Колонки.Найти("Приоритет")=неопределено тогда
//		ТекущаяПолитикаПравила.Колонки.Добавить("Приоритет");
//		ТекущаяПолитикаПравила.ЗагрузитьКолонку(ТекущаяПолитикаПравила.ВыгрузитьКолонку("НомерСтроки"),"Приоритет");
//	КонецЕсли;
//КонецЕсли;
////===============================================================
//ТекущаяПолитикаПараметры = новый ТаблицаЗначений;
//ТекущаяПолитикаПараметры.Колонки.Добавить("ИмяПараметра");
//ТекущаяПолитикаПараметры.Колонки.Добавить("ЗначениеПараметра");

//Если ТекущаяПолитикаПравила.Количество()=0 тогда  //если нет никаких правил - пустая таблица
//	табЗнач1 = новый ТаблицаЗначений;
//	табЗнач1.Колонки.Добавить("Номенклатура");
//	табЗнач1.Колонки.Добавить("МинимальнаяЦена");
//	возврат табЗнач1;
//КонецЕсли;

//#Если Клиент тогда
//Сообщить("Обрабатывается "+строка(ТекущаяПолитикаПравила.Количество())+" правил. Для "+?(СписокНоменклатуры=неопределено,"всех", строка(СписокНоменклатуры.Количество()) )+" номенклатурных позиций"); 	
//#КонецЕсли

//ТекстЗапросаДляВставкиЦена="ВЫБОР ";

//Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
//						 
////Главная процедура разбора правил
//ЗаполнитьСтрокуПравилИПараметры(ТекущаяПолитикаПравила[сч], ТекущаяПолитикаПараметры ); 

//ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+ "
//|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + ТекущаяПолитикаПравила[сч].ОтпускнаяЦена;
//	
//КонецЦикла;
//	ТекстЗапросаДляВставкиЦена=ТекстЗапросаДляВставкиЦена+"
//|	ИНАЧЕ 0 
//|КОНЕЦ ";


//ТекстЗапросаДляВставкиПриоритет="ВЫБОР ";

//	Для сч=0 по ТекущаяПолитикаПравила.Количество()-1 Цикл
//		ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+ "
//		|	КОГДА " + ТекущаяПолитикаПравила[сч].Правило + " ТОГДА " + Формат(ТекущаяПолитикаПравила[сч].Приоритет,"ЧДЦ=0; ЧГ=0");
//	КонецЦикла;
//	ТекстЗапросаДляВставкиПриоритет=ТекстЗапросаДляВставкиПриоритет+"
//|	ИНАЧЕ 99999 
//|КОНЕЦ Приоритет";


//ПостроительОтчетаОтчет = Новый ПостроительОтчета;

//ПостроительОтчетаОтчет.Текст="ВЫБРАТЬ
//|   Приоритет, Номенклатура,   
////ТипЦен,
//|	МинимальнаяЦена
//|
//|	ПОМЕСТИТЬ ВТ_Товары
//| ИЗ
//| (ВЫБРАТЬ 
//|	Номенклатура,   
////|	Номенклатура.НоменклатурнаяГруппа, 
////|	Номенклатура.Производитель, 
////|	ТипЦен,
//|	0000 МинимальнаяЦена,
//|	1 Приоритет
//|	ИЗ 
//| ( ВЫБРАТЬ Номенклатура, ТипЦен, Цена ЦенаПоТипуЦен 
//|	ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен В (&СписокТиповЦен) 
//| 				И Номенклатура В (&СписокНоменклатуры) )
//|   ГДЕ Цена > 0 )ЦеныНоменклатуры 
//| ГДЕ 0000>0
//|) А

//|;
//|
//|ВЫБРАТЬ Номенклатура,  МИНИМУМ(Приоритет) Приоритет	
//|ПОМЕСТИТЬ ВТ_ПриоритетыТоваров
//|	ИЗ 
//|ВТ_Товары
//|СГРУППИРОВАТЬ ПО Номенклатура
//|;
//|ВЫБРАТЬ
//| ВТ_Товары.Приоритет, ВТ_Товары.Номенклатура, 
////|ВТ_Товары.ТипЦен ТипЦен,

//////---------------------округление до рублей-------------------
//|Выразить(ВТ_Товары.МинимальнаяЦена как Число(15,0)) как МинимальнаяЦена
//|
//|
//|ИЗ ВТ_Товары
//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПриоритетыТоваров
//|ПО  ВТ_Товары.Номенклатура= ВТ_ПриоритетыТоваров.Номенклатура 
//|И ВТ_Товары.Приоритет= ВТ_ПриоритетыТоваров.Приоритет 
//|
//|";
//Если СписокНоменклатуры=неопределено тогда // полный список номенклатуры
//	ПостроительОтчетаОтчет.Текст =стрЗаменить(ПостроительОтчетаОтчет.Текст, "И Номенклатура В (&СписокНоменклатуры)","И (НЕ Номенклатура.ПометкаУдаления)");	
//КонецЕсли;

// ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"0000",ТекстЗапросаДляВставкиЦена);
// ПостроительОтчетаОтчет.Текст=СтрЗаменить(ПостроительОтчетаОтчет.Текст,"1 Приоритет",ТекстЗапросаДляВставкиПриоритет);
//  
//  СписокТиповЦен=Новый СписокЗначений;
// 
// Для сч=0 по ТекущаяПолитикаПараметры.Количество()-1 Цикл
//	 ИмяПараметра =ТекущаяПолитикаПараметры[сч].ИмяПараметра;
//	 ЗначениеПараметра = ТекущаяПолитикаПараметры[сч].ЗначениеПараметра;
//	 Если ИмяПараметра<>"" тогда
// 	 	ПостроительОтчетаОтчет.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
// 	 КонецЕсли;
// 
// 	Если ТипЗнч(ЗначениеПараметра)= Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
//		 Если  СписокТиповЦен.НайтиПоЗначению(ЗначениеПараметра) =Неопределено Тогда
//			   СписокТиповЦен.Добавить(ЗначениеПараметра);
//		 КонецЕсли;	   
// 	КонецЕсли;	
// КонецЦикла;	 
// 	 
//	 ПостроительОтчетаОтчет.Параметры.Вставить("СписокТиповЦен", СписокТиповЦен);
//	 ПостроительОтчетаОтчет.Параметры.Вставить("СписокНоменклатуры", СписокНоменклатуры);
//		 
//	 //ПостроительОтчетаОтчет.Параметры.Вставить("ДатаДокумента", Ссылка.Дата);
//	 
//Если получитьПравилаИПараметры тогда // для "ручного" формирования, например прайс-листа
//	структураПарам = новый Структура;
//	//-----------------текстовые поля---------------------------------------------------------
//	структураПарам.Вставить("ТекстЗапросаДляВставкиЦена", ТекстЗапросаДляВставкиЦена);
//	структураПарам.Вставить("ТекстЗапросаДляВставкиПриоритет", ТекстЗапросаДляВставкиПриоритет);
//	структураПарам.Вставить("ПолныйТекстЗапроса", ТекстЗапросаДляВставкиЦена+","+ТекстЗапросаДляВставкиПриоритет);
//							 
//	//табПравил1 = новый ТаблицаЗначений;
//	//табПравил1.Колонки.Добавить("Правило");
//	//табПравил1.Колонки.Добавить("ОтпускнаяЦена");
//	//для каждого стр1 из ТекущаяПолитикаПравила цикл	
//	//	стр2 = табПравил1.Добавить();
//	//	ЗаполнитьЗначенияСвойств(стр2, стр1);	 //ТекущаяПолитикаПравила[сч].Правило +  ТекущаяПолитикаПравила[сч].ОтпускнаяЦена
//	//КонецЦикла;	
//	структураПарам.Вставить("Правила", ТекущаяПолитикаПравила);
//	
//	
//	структураПарам.Вставить("Параметры",ТекущаяПолитикаПараметры); //ИмяПараметра, ЗначениеПараметра
//	структураПарам.Вставить("СписокТиповЦен",СписокТиповЦен);
//	
//	структураПарам.Вставить("СписокНоменклатуры",СписокНоменклатуры);
//	
//	возврат структураПарам;
//Иначе
//	Результат = ПостроительОтчетаОтчет.ПолучитьЗапрос().Выполнить();
//	табЗнач1 = Результат.Выгрузить();
//	Возврат  табЗнач1;
//КонецЕсли;

//КонецФункции	

////+++ 10.12.2013 +++++++++++++++++++++++++++++++++++++++++++++++
////Имя параметра = имя для : Производитель, ВидТовара, Тип цен
//// из имени Номенклатурная группа - убираются цифры в начале!
////для Номенклатура: Ном_[код],
////для ПодСтроки:    Назв_[подобно] 
////для ВходитВПапку: ГруппаНом_[КодНоменклатуры]
////для Диаметра:     Парам_[диаметр]
////
//Процедура ЗаполнитьСтрокуПравилИПараметры( СтрПравил, ТаблПараметры ) //Главная процедура разбора правил
//	
//	СтрПравил.ОтпускнаяЦена = ?(СтрПравил.СкидкаНаценка>=500, формат(СтрПравил.СкидкаНаценка,"ЧГ=0"), 
//				  "ЦенаПоТипуЦен * (1"+?(СтрПравил.СкидкаНаценка>0,"+","")+формат(СтрПравил.СкидкаНаценка/100,"ЧРД=.; ЧН=' '; ЧГ=0")+")" );
//				  
//симвЗамены = новый массив;
//симвЗамены.Добавить(" ");симвЗамены.Добавить("."); симвЗамены.Добавить(",");симвЗамены.Добавить(":"); // 0 -3
//симвЗамены.Добавить("""");симвЗамены.Добавить("'");симвЗамены.Добавить("/");симвЗамены.Добавить("\"); // 4-7
//симвЗамены.Добавить("-");симвЗамены.Добавить("+"); симвЗамены.Добавить("*");симвЗамены.Добавить("№"); // 8-11
//симвЗамены.Добавить("("); симвЗамены.Добавить(")");симвЗамены.Добавить("["); симвЗамены.Добавить("]");//12-15
////симвЗамены.Добавить("0");симвЗамены.Добавить("1");симвЗамены.Добавить("2");симвЗамены.Добавить("3");симвЗамены.Добавить("4");//16-20
////симвЗамены.Добавить("5");симвЗамены.Добавить("6");симвЗамены.Добавить("7");симвЗамены.Добавить("8");симвЗамены.Добавить("9");//21-25

//симвЗамены.Добавить("!");симвЗамены.Добавить("@");симвЗамены.Добавить("#");симвЗамены.Добавить("$");симвЗамены.Добавить("%");
//симвЗамены.Добавить("^");симвЗамены.Добавить(":");симвЗамены.Добавить("&");симвЗамены.Добавить("?");симвЗамены.Добавить(";");

//стр1 = "";
////---------------------------------------Условия складываются по И -------------------------------------------------
//стр1 = ?(ЗначениеЗаполнено(СтрПравил.ВидТовара), "Номенклатура.ВидТовара = &"+строка(СтрПравил.ВидТовара), "");
//Если ТаблПараметры.найти(строка(СтрПравил.ВидТовара), "ИмяПараметра")=неопределено тогда
//	парам1 = ТаблПараметры.Добавить();
//	парам1.ИмяПараметра = строка(СтрПравил.ВидТовара);
//	парам1.ЗначениеПараметра = СтрПравил.ВидТовара;
//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.Производитель) тогда
//	назв = строка(СтрПравил.Производитель); назв = стрЗаменить(назв," ","");
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв = стрЗаменить(назв,симвЗамены[i],"");
//	КонецЦикла;
//стр1 = стр1 + ?(стр1="", "", " И ")+"Номенклатура.Производитель = &"+назв;
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = СтрПравил.Производитель;
//	КонецЕсли;
//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.НоменклатурнаяГруппа) тогда
//	назв = строка(СтрПравил.НоменклатурнаяГруппа); назв = стрЗаменить(назв," ","");
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв = стрЗаменить(назв,симвЗамены[i],"_");
//	КонецЦикла;
//	
//симвЗаменыЦ = новый массив;	//в номенклатурных группах цифры идут в начале!
//симвЗаменыЦ.Добавить("0");симвЗаменыЦ.Добавить("1");симвЗаменыЦ.Добавить("2");симвЗаменыЦ.Добавить("3");симвЗаменыЦ.Добавить("4");//16-20
//симвЗаменыЦ.Добавить("5");симвЗаменыЦ.Добавить("6");симвЗаменыЦ.Добавить("7");симвЗаменыЦ.Добавить("8");симвЗаменыЦ.Добавить("9");//21-25
// для i=0 по симвЗаменыЦ.Количество()-1 цикл
//	назв = стрЗаменить(назв,симвЗаменыЦ[i],"");
//КонецЦикла;

//стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура.НоменклатурнаяГруппа = &"+назв;
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = СтрПравил.НоменклатурнаяГруппа;
//	КонецЕсли;
//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.ВходитВПапку) тогда
//	назв = "ГруппаНом_"+сокрЛП(СтрПравил.ВходитВПапку.Код); 
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура В ИЕРАРХИИ (&"+назв+")";
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = СтрПравил.ВходитВПапку;
//	КонецЕсли;
//КонецЕсли;

////------------------------------------------
//Если СокрЛП(СтрПравил.ПодСтрока)<>"" тогда
//	
//	назв = СтрПравил.ПодСтрока; 
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв = стрЗаменить(назв,симвЗамены[i],"");
//	КонецЦикла;
//		назв = "Назв_"+назв; //иногда начинается с цифр
//		
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "( Номенклатура.Наименование ПОДОБНО (&"+назв+") )";   
//	//прямо в текст запроса!
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		//если в подстроке задан явно % то все понятно... это "продвинутый" пользователь
//		//иначе в любом месте наименования!
//		префСуф =?(Найти(СтрПравил.ПодСтрока,"%")=0, "%","");
//		парам1.ЗначениеПараметра =префСуф+СтрПравил.ПодСтрока+префСуф; 
//	КонецЕсли;
//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.Диаметр) тогда
//	назв = сокрЛП(СтрПравил.Диаметр); назв = стрЗаменить(назв," ","");
//	знач1 = назв;
//	
//  поз1 = найти(назв, "-");
//  Если поз1>0 тогда//--------------разбор диапазона диаметров----------------------
//		
//	знач1 = сокрЛП( лев( назв, поз1-1) ); 					назв1=знач1;
//	знач2 = сокрЛП( прав( назв, стрДлина(назв)-поз1) );		назв2=знач2;
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв1 = стрЗаменить(назв1, симвЗамены[i],"");
//		назв2 = стрЗаменить(назв2, симвЗамены[i],"");
//	КонецЦикла;
//	назв1 = "Парам_"+назв1;  назв2 = "Парам_"+назв2; 
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "(Номенклатура.Типоразмер.Диаметр >= &"+назв1+" И Номенклатура.Типоразмер.Диаметр <= &"+назв2+")";
//	
//	Если ТаблПараметры.найти(назв1, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв1;
//		парам1.ЗначениеПараметра = знач1;
//	КонецЕсли;
//	Если ТаблПараметры.найти(назв2, "ИмяПараметра")=неопределено тогда
//		парам2 = ТаблПараметры.Добавить();
//		парам2.ИмяПараметра = назв2;
//		парам2.ЗначениеПараметра = знач2;
//	КонецЕсли;
//	
//  Иначе	 //----------------------------обработка знаков <, >, =  ---------------------------
//	знаки = новый массив;
//	знаки.Добавить("="); // значит  просто =
//	знаки.Добавить("<="); знаки.Добавить("<"); 
//	знаки.Добавить(">="); знаки.Добавить(">");
//	k=0;
//	для i=1 по знаки.Количество()-1 цикл
//		Если найти(назв, знаки[i])=1 тогда
//			k=i; назв = Прав(назв, стрДлина(назв) - стрДлина(знаки[i]));
//				 знач1 = назв;
//			прервать;
//		КонецЕсли;
//	КонецЦикла;	
//	
//	//---------удаляем из названия все лишнее-----------
//	для i=0 по симвЗамены.Количество()-1 цикл
//		назв = стрЗаменить(назв, симвЗамены[i],"");
//	КонецЦикла;
//	назв = "Парам_"+назв; 
//	
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура.Типоразмер.Диаметр "+знаки[k]+" &"+назв;
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = знач1;
//	КонецЕсли;
//  КонецЕсли;//конец разбора


//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.Номенклатура) тогда
//	назв = "Ном_"+сокрЛП(СтрПравил.Номенклатура.Код); 
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "Номенклатура = &"+назв;
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = СтрПравил.Номенклатура;
//	КонецЕсли;
//КонецЕсли;

////------------------------------------------
//Если ЗначениеЗаполнено(СтрПравил.ТипЦен) тогда
//	назв = строка(СтрПравил.ТипЦен); назв = стрЗаменить(назв," ","");    //"Крупный Опт Ростов"
//	
//	стр1 = стр1 + ?(стр1="", "", " И ")+ "ТипЦен = &"+назв;
//	Если ТаблПараметры.найти(назв, "ИмяПараметра")=неопределено тогда
//		парам1 = ТаблПараметры.Добавить();
//		парам1.ИмяПараметра = назв;
//		парам1.ЗначениеПараметра = СтрПравил.ТипЦен;
//	КонецЕсли;
//КонецЕсли;

//СтрПравил.Правило = стр1;

//КонецПроцедуры

Процедура ДокПолитикиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДокПолитики) тогда
		Контрагент = ДокПолитики.Контрагент;
	КонецЕсли;
КонецПроцедуры


