
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	ОбщийОтчет.мСоответствиеНазначений = Новый Соответствие;
	ОбщийОтчет.мСтруктураДляОтбораПоКатегориям = Новый Структура;

	ЗаполнитьНачальныеНастройкиПоМакету1(ПолучитьМакет("ПараметрыОтчетовЗатраты"), СтруктураПредставлениеПолей, МассивОтбора, ОбщийОтчет, "СписокКроссТаблица");
	//ПостроительОтчета.Текст = "ВЫБРАТЬ
	//						  |	СУММА(ТаблицаРегистра.СуммаОборот) КАК Сумма
	//						  |{ВЫБРАТЬ
	//						  |	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//						  |	ТаблицаРегистра.СтатьяЗатрат.* КАК СтатьяЗатрат,
	//						  |	ТаблицаРегистра.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
	//						  |	ТаблицаРегистра.Заказ.* КАК Заказ,
	//						  |	ТаблицаРегистра.Заказ.Контрагент.* КАК Контрагент,
	//						  |	ТаблицаРегистра.Период,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//						  |	(СУММА(ТаблицаРегистра.СуммаОборот)) КАК Сумма,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодДень,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕКАДА)) КАК ПериодДекада,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ)) КАК ПериодМесяц,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ)) КАК ПериодКвартал,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД)) КАК ПериодГод}
	//						  |ИЗ
	//						  |	РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, Регистратор {(&Периодичность)}, {(Подразделение).* КАК Подразделение, (СтатьяЗатрат).* КАК СтатьяЗатрат, (НоменклатурнаяГруппа).* КАК НоменклатурнаяГруппа, (Заказ).* КАК Заказ, (Заказ.Контрагент).* КАК Контрагент}) КАК ТаблицаРегистра
	//						  |{ГДЕ
	//						  |	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//						  |	ТаблицаРегистра.СтатьяЗатрат.* КАК СтатьяЗатрат,
	//						  |	ТаблицаРегистра.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
	//						  |	ТаблицаРегистра.Заказ.* КАК Заказ,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//						  |	ТаблицаРегистра.Заказ.Контрагент.* КАК Контрагент,
	//						  |	ТаблицаРегистра.Период,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор}
	//						  |{УПОРЯДОЧИТЬ ПО
	//						  |	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//						  |	ТаблицаРегистра.СтатьяЗатрат.* КАК СтатьяЗатрат,
	//						  |	ТаблицаРегистра.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
	//						  |	ТаблицаРегистра.Заказ.* КАК Заказ,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//						  |	ТаблицаРегистра.Заказ.Контрагент.* КАК Контрагент,
	//						  |	ТаблицаРегистра.Период,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//						  |	Сумма}
	//						  |ИТОГИ
	//						  |	СУММА(Сумма)
	//						  |ПО
	//						  |	ОБЩИЕ
	//						  |{ИТОГИ ПО
	//						  |	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//						  |	ТаблицаРегистра.СтатьяЗатрат.* КАК СтатьяЗатрат,
	//						  |	ТаблицаРегистра.НоменклатурнаяГруппа.* КАК НоменклатурнаяГруппа,
	//						  |	ТаблицаРегистра.Заказ.* КАК Заказ,
	//						  |	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//						  |	ТаблицаРегистра.Заказ.Контрагент.* КАК Контрагент,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодДень,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕКАДА)) КАК ПериодДекада,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ)) КАК ПериодМесяц,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ)) КАК ПериодКвартал,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	//						  |	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД)) КАК ПериодГод}
	//						  |АВТОУПОРЯДОЧИВАНИЕ";


	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	
	// Установим дату начала отчета
	Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
		Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
			ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Ложь, ВысотаЗаголовка = 0, ТолькоЗаголовок = Ложь) Экспорт
	
	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПроцедуры // СформироватьОтчет()

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

// Процедура заполнения начальных настроек по макету для универсального отчета или отчета на базе универсального
Процедура ЗаполнитьНачальныеНастройкиПоМакету1(МакетПараметрыОтчетов, СтруктураПредставлениеПолей, МассивОтбора, Контекст, ТипОтчета) Экспорт

	ИмяРегистра = Контекст.ИмяРегистра;
	ПОстроительОтчета = Контекст.ПостроительОтчета;

	Контекст.Показатели.Очистить();

	//Очистим отбор
	Пока ПостроительОтчета.Отбор.Количество()>0 Цикл
		ПостроительОтчета.Отбор.Удалить(0);
	КонецЦикла; 

	//Очистим порядок
	Пока ПостроительОтчета.Порядок.Количество()>0 Цикл
		ПостроительОтчета.Порядок.Удалить(0);
	КонецЦикла; 

	ТекстПоляЗапроса = "";
	ТекстПоляИтоговЗапроса = "";
	ТекстПоляПоказатели = "";
	ТекстПоляИтогов = "";
	ТекстВыводимыеПоляЗапроса = "";
	ТекстПоляУпорядочивания = "";
	ТекстПоляИзмерений = "";

	ТекстВыводимыеПоляПериоды = "";
	ТекстПоляИтоговПериоды = "";

	ТекстИсточникиСведений ="";
	ТекстПоляКатегорий = "";
	ТекстПоляГруппировки = "";

	Если ЗначениеНеЗаполнено(Контекст.мНазваниеОтчета) И Не ПустаяСтрока(ИмяРегистра) Тогда

		Контекст.мНазваниеОтчета = Метаданные.РегистрыНакопления[ИмяРегистра].Представление() + ?(ТипОтчета = "ОстаткиИОбороты", ": остатки и обороты", "");

	КонецЕсли; 

	ОбластьПоказатели = МакетПараметрыОтчетов.ПолучитьОбласть("Показатели");

	ОбластьПоказателиВысота = ОбластьПоказатели.ВысотаТаблицы;

	ВидРегистра = Метаданные.РегистрыНакопления[ИмяРегистра].ВидРегистра;

	МассивИзмеренийКолонки = Новый Массив;
	
	МассивВыбранныеПоляПоУмолчанию = Новый Массив;
	
	МассивИзмеренияСтрокиПоУмолчанию = Новый Массив;
	
	
	Если (ТипОтчета = "СписокКроссТаблица") или (ТипОтчета = "Диаграмма") Тогда

		Если ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипПоляРегистра="Остаток";

			// Отчеты по остаткам - на дату
			Контекст.мРежимВводаПериода = 1;
			
		ИначеЕсли ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
			ТипПоляРегистра="Оборот";

			Контекст.мРежимВводаПериода = 0;
		КонецЕсли;
	КонецЕсли;

	Для НСтр = 1 По ОбластьПоказателиВысота Цикл

		// Добавляем строки, если возможен вывод не только оборотов, но и остатков
		Если НЕ Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 4).Текст)) Тогда

			ИмяПоля           = СокрЛП(ОбластьПоказатели.Область(НСтр, 1).Текст);
			ПредставлениеПоля = СокрЛП(ОбластьПоказатели.Область(НСтр, 2).Текст);
			ОписаниеПоля      = СокрЛП(ОбластьПоказатели.Область(НСтр, 3).Текст);
			ВклПоУмолчанию    = Булево(СокрЛП(ОбластьПоказатели.Область(НСтр, 5).Текст));
			ФорматнаяСтрока   = СокрЛП(ОбластьПоказатели.Область(НСтр, 6).Текст);
			СтрИзмерения      = СокрЛП(ОбластьПоказатели.Область(НСтр, 7).Текст);
			СтдВалюта         = СокрЛП(ОбластьПоказатели.Область(НСтр, 8).Текст);

			Если Врег(СтдВалюта) = "УПР" Тогда
				ПредставлениеПоля = ПредставлениеПоля + " в " +Константы.ВалютаУправленческогоУчета.Получить();
			ИначеЕсли Врег(СтдВалюта) = "РЕГЛ" Тогда
				ПредставлениеПоля = ПредставлениеПоля + " в " +Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;

			Контекст.мСтруктураСвязиПоказателейИИзмерений.Вставить(ИмяПоля, Новый Структура(СтрИзмерения));

			Если ПустаяСтрока(ОписаниеПоля) Тогда
				ОписаниеПоля = ИмяПоля;
			КонецЕсли;

			Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
				ТекстПоляПоказатели = ТекстПоляПоказатели + ",
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", ТипПоляРегистра) + " КАК " + ИмяПоля;

				ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
				|	СУММА(" + ИмяПоля + ")";

				ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
				|	" + ИмяПоля;

				СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);
			ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда

				ТекстПоляПоказатели = ТекстПоляПоказатели + ",
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "НачальныйОстаток") + " КАК " + ИмяПоля + "НачальныйОстаток,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "КонечныйОстаток")  + " КАК " + ИмяПоля + "КонечныйОстаток,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Приход") 		  + " КАК " + ИмяПоля + "Приход,
				|	" + СтрЗаменить("СУММА("+ОписаниеПоля+")","#", "Расход") 		  + " КАК " + ИмяПоля + "Расход";

				ТекстПоляИтоговЗапроса = ТекстПоляИтоговЗапроса + ",
				|	СУММА(" + ИмяПоля + "НачальныйОстаток),
				|	СУММА(" + ИмяПоля + "КонечныйОстаток),
				|	СУММА(" + ИмяПоля + "Приход),
				|	СУММА(" + ИмяПоля + "Расход)";

				ТекстПоляУпорядочивания = ТекстПоляУпорядочивания + ",
				|	" + ИмяПоля + "НачальныйОстаток,
				|	" + ИмяПоля + "КонечныйОстаток,
				|	" + ИмяПоля + "Приход,
				|	" + ИмяПоля + "Расход";

				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"НачальныйОстаток", ПредставлениеПоля + " нач.ост.");
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"КонечныйОстаток", ПредставлениеПоля + " кон.ост." );
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Приход", ПредставлениеПоля+" приход");
				СтруктураПредставлениеПолей.Вставить(ИмяПоля+"Расход", ПредставлениеПоля+" расход");
			КОнецЕсли;

			// Показатели заносятся в специальную таблицу 
			СтрПоказатели = Контекст.мТаблицаПоказатели.Добавить();
			СтрПоказатели.ИмяПоля           = ИмяПоля;
			СтрПоказатели.ПредставлениеПоля = ПредставлениеПоля;
			СтрПоказатели.ФорматнаяСтрока   = ФорматнаяСтрока;

			// ... и добавляются в список
			Показатель = Контекст.Показатели.Добавить();
			Показатель.Имя           = ИмяПоля;
			Показатель.Представление = ПредставлениеПоля;
			Показатель.Использование = ВклПоУмолчанию;

		КонецЕсли; 
	КонецЦикла;

	ОбластьГруппировки = МакетПараметрыОтчетов.ПолучитьОбласть("Группировки");

	ОбластьГруппировкиВысота = ОбластьГруппировки.ВысотаТаблицы;

	ОписаниеТиповКатегории = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");

	Запрос = Новый Запрос;

	Запрос.Текст = "";

	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и
	                                               // категории. Используется в условии соединения с регистром сведений,
	                                               // хранящим значения свойств или категорий
	ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
	ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
//	ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории.
	                                               // Не используется.
	ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта

	Для НСтр = 1 По ОбластьГруппировкиВысота Цикл

		// Добавляем строки, если возможен вывод не только оборотов но и остатков.
		Если НЕ Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 4).Текст)) Тогда

			ИмяПоля           = СокрЛП(ОбластьГруппировки.Область(НСтр, 1).Текст);
			ПредставлениеПоля = СокрЛП(ОбластьГруппировки.Область(НСтр, 2).Текст);
			ОписаниеПоля      = СокрЛП(ОбластьГруппировки.Область(НСтр, 3).Текст);
			ВклПоУмолчанию    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 5).Текст));
			Если (ТипОтчета = "Диаграмма") Тогда
				РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст));
				РассчитыватьИтогиПоИерархии = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));
				ВклВОтбор    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 13).Текст));
			Иначе
				ФорматнаяСтрока   = СокрЛП(ОбластьГруппировки.Область(НСтр, 6).Текст);
				РассчитыватьИтоги = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 7).Текст));
				РассчитыватьИтогиПоИерархии = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 8).Текст));
				ВклВОтбор    = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 11).Текст));
			КонецЕсли;
			
			Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
				ИтогВКолонке      = Булево(СокрЛП(ОбластьГруппировки.Область(НСтр, 9).Текст));
			КонецЕсли;


			Если НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
				Контекст.СтруктураФорматаПолей.Вставить(ИмяПоля, ФорматнаяСтрока);
			КонецЕсли;

			Если ПустаяСтрока(ОписаниеПоля) Тогда
				ОписаниеПоля = ИмяПоля;
			КонецЕсли;

			// Для итогов
			ТекстПоляИтогов = ТекстПоляИтогов + ",
			|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

			// Для списка всех полей
			ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
			|	" + ОписаниеПоля + ".* КАК " + ИмяПоля;

			Если ВклПоУмолчанию Тогда // добавим сразу в список полей

				МассивВыбранныеПоляПоУмолчанию.Добавить(ИмяПоля);

				Если РассчитыватьИтоги Тогда // добавим сразу в итоги

					МассивИзмеренияСтрокиПоУмолчанию.Добавить(ИмяПоля);

				КонецЕсли;

				Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда
					Если ИтогВКолонке Тогда
						МассивИзмеренийКолонки.Добавить(ИмяПоля);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли; 

			Если ВклВОтбор Тогда

				МассивОтбора.Добавить(ИмяПоля);

			КонецЕсли;

			СтруктураПредставлениеПолей.Вставить(ИмяПоля, ПредставлениеПоля);

			СтрНазначение = СокрЛП(ОбластьГруппировки.Область(НСтр, 10).Текст);

			Индекс = Нстр-1;

			Если Не ПустаяСтрока(СтрНазначение) Тогда
				Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов[Лев(СтрНазначение, Найти(СтрНазначение+",", ",")-1)];
			Иначе
				Назначение = Неопределено;
			КонецЕсли;

			Если Контекст.ИспользоватьСвойстваИКатегории И Назначение <> Неопределено Тогда

				НоваяСтрока = ТаблицаПолей.Добавить();
				НоваяСтрока.ПутьКДанным = ОписаниеПоля;
				НоваяСтрока.Представление = ПредставлениеПоля;
				НоваяСтрока.Назначение = Назначение;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	// Предопределенные группировки по стандартным периодам
	
	ТекстПоляГде = Сред(ТекстВыводимыеПоляЗапроса, 2);

	Если ((ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты) И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) ИЛИ (ТипОтчета = "ОстаткиИОбороты") Тогда

		// Для списка всех полей
		ТекстПоляИтоговПериоды = ТекстПоляИтоговПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		ТекстВыводимыеПоляПериоды = ТекстВыводимыеПоляПериоды + ",
		|	НачалоПериода(Период, День) КАК ПериодДень ,
		|	НачалоПериода(Период, Неделя) КАК ПериодНеделя ,
		|	НачалоПериода(Период, Декада) КАК ПериодДекада ,
		|	НачалоПериода(Период, Месяц) КАК ПериодМесяц ,
		|	НачалоПериода(Период, Квартал) КАК ПериодКвартал ,
		|	НачалоПериода(Период, Полугодие) КАК ПериодПолугодие ,
		|	НачалоПериода(Период, Год) КАК ПериодГод";

		СтруктураПредставлениеПолей.Вставить("Период", "Период");
		СтруктураПредставлениеПолей.Вставить("ПериодДень", "По дням");
		СтруктураПредставлениеПолей.Вставить("ПериодНеделя", "По неделям");
		СтруктураПредставлениеПолей.Вставить("ПериодДекада", "По декадам");
		СтруктураПредставлениеПолей.Вставить("ПериодМесяц", "По месяцам");
		СтруктураПредставлениеПолей.Вставить("ПериодКвартал", "По кварталам");
		СтруктураПредставлениеПолей.Вставить("ПериодПолугодие", "По полугодиям");
		СтруктураПредставлениеПолей.Вставить("ПериодГод", "По годам");

		// Для списка всех полей
		ТекстВыводимыеПоляЗапроса = ТекстВыводимыеПоляЗапроса + ",
		|	Период ,
		|	Регистратор.* КАК Регистратор";

		СтруктураПредставлениеПолей.Вставить("Регистратор", "Документ движения (Регистратор)");
	КонецЕсли;

	Текст = 
	"ВЫБРАТЬ //РАЗЛИЧНЫЕ" 
	+ Сред(ТекстПоляЗапроса + ТекстПоляПоказатели,2) 
	+ Символы.ПС + "{ВЫБРАТЬ " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляПоказатели+"
	|	//СВОЙСТВА
	|"+ТекстВыводимыеПоляПериоды, 2) + "}"
	;
	
	Если (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Обороты(&ДатаНач, &ДатаКон, Регистратор{&Периодичность}, ";

		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");

	ИначеЕсли (ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки И ((ТипОтчета = "СписокКроссТаблица")ИЛИ(ТипОтчета = "Диаграмма"))) Тогда
		Текст =  Текст +
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки(&ДатаКон, ";
	ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда
		Текст = Текст+
		"
		|ИЗ РегистрНакопления." + ИмяРегистра + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, Регистратор{&Периодичность}";

		СтруктураПредставлениеПолей.Вставить("Периодичность", "Периодичность разворота итогов");

		Текст = Текст + ", ";

		// Пропуск - неиспользуемый параметр дополнения
		Текст = Текст + ", ";
	КонецЕсли;

	//АЧ для затрат
	Если (ИмяРегистра = "Затраты") Тогда 
		ТекстГр = СтрЗаменить(ТекстПоляГде,"Регистратор.* КАК Регистратор,","");
		ТекстГр = СтрЗаменить(ТекстГр,"ПОДСТРОКА(Регистратор.Комментарий,1,100).* КАК Комментарий,","");
		ТекстПоляГде = ТекстГр;
	КонецЕсли;
	//////////////////////////
	
	Текст = Текст + "{"+ТекстПоляГде+"}) КАК ТаблицаРегистра
	|//СОЕДИНЕНИЯ";

	Если Не ПустаяСтрока(ТекстПоляГруппировки) Тогда

		Текст = Текст + Символы.ПС + "СГРУППИРОВАТЬ ПО " + Сред(ТекстПоляГруппировки, 2) + "
		|//СГРУППИРОВАТЬПО
		|";

	КонецЕсли; 

	// Отбор
	Текст = Текст + Символы.ПС + "{ГДЕ " + Сред(ТекстВыводимыеПоляЗапроса, 2) + "
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|}";

	// Порядок
	Текст = Текст + Символы.ПС + "{УПОРЯДОЧИТЬ ПО " + Сред(ТекстВыводимыеПоляЗапроса+ТекстПоляУпорядочивания, 2) + "
	|//СВОЙСТВА
	|}";

	Если Не ПустаяСтрока(ТекстПоляИтогов) Тогда 
		Текст = Текст + Символы.ПС +  
		"{ИТОГИ ПО " + Сред(ТекстПоляИтогов+ТекстПоляИтоговПериоды, 2) + "
		|//СВОЙСТВА
		|}";
	КонецЕсли;

	Текст = Текст + Символы.ПС +  
	"ИТОГИ  " + Сред(ТекстПоляИтоговЗапроса, 2) + Символы.ПС + 
	"ПО ОБЩИЕ " + ТекстПоляИзмерений;

	// Автоупорядочивание
	Текст = Текст + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ ";
	
	ТекстПоляКатегорий = "";
	ТекстПоляСвойств = "";
	
	Если Контекст.ИспользоватьСвойстваИКатегории = Истина Тогда

		ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, Текст, СтруктураПредставлениеПолей, 
				Контекст.мСоответствиеНазначений, ПостроительОтчета.Параметры
				,, ТекстПоляКатегорий, ТекстПоляСвойств,,,,,,Контекст.мСтруктураДляОтбораПоКатегориям);

	КонецЕсли;

	Текст = СтрЗаменить(Текст,"ПОДСТРОКА(Регистратор.Комментарий,1,100).* КАК Комментарий","ПОДСТРОКА(Регистратор.Комментарий,1,100) КАК Комментарий");
	ПостроительОтчета.Текст = Текст;
	
	Для каждого Элемент Из МассивВыбранныеПоляПоУмолчанию Цикл
	
		ПостроительОтчета.ВыбранныеПоля.Добавить(Элемент);
	
	КонецЦикла;
	
	Для каждого Элемент Из МассивИзмеренияСтрокиПоУмолчанию Цикл
	
		ПостроительОтчета.ИзмеренияСтроки.Добавить(Элемент);
	
	КонецЦикла;

	Для Каждого Показатель из Контекст.мТаблицаПоказатели Цикл
		Если (ТипОтчета = "СписокКроссТаблица") Или (ТипОтчета = "Диаграмма") Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля, ПостроительОтчета);

		ИначеЕсли ТипОтчета = "ОстаткиИОбороты" Тогда

			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "НачальныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "КонечныйОстаток", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Приход", ПостроительОтчета);
			ОбработкаПоказателейУдалитьИзДоступныхПолей(Показатель.ИмяПоля + "Расход", ПостроительОтчета);

		КонецЕсли;
	КонецЦикла;

	Если Контекст.ИспользоватьСвойстваИКатегории = Истина Тогда

		УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, Контекст.мСоответствиеНазначений, СтруктураПредставлениеПолей);
		
	КонецЕсли;

	Если (ТипОтчета = "СписокКроссТаблица") ИЛИ (ТипОтчета = "Диаграмма") Тогда
		Для каждого Элемент Из МассивИзмеренийКолонки Цикл

			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Элемент);
			Если Измерение <> Неопределено Тогда
				ПостроительОтчета.ИзмеренияСтроки.Удалить(Измерение);
			КонецЕсли;

			ПостроительОтчета.ИзмеренияКолонки.Добавить(Элемент);
		
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьНачальныеНастройкиПоМакету()

ОбщийОтчет.ИмяРегистра = "Затраты";


