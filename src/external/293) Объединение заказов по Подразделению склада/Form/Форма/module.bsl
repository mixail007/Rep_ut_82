Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт;
перем КодКлиента, КодДоговора;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
//	Если Флажок1 тогда
		ТекстВДоговоре = "Отгрузка со склада Москвы";
		Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
 		    ОбъединитьЗаказыПокупателя(ДатаОтгрузки, ТекстВДоговоре);  	//Автоэкперт
		Иначе
			ОбъединитьЗаказыПокупателяФилиал(ДатаОтгрузки, ТекстВДоговоре);       //Плотников Филиалы
		КонецЕсли;  	//ВЫПОЛНЕНИЕ
	//иначеЕсли Флажок2 тогда
	//	ОбъединитьЗаказыПокупателя(ДатаОтгрузки, Контрагент1, ПодразделениеT, Истина);  //РостовНаДону - транзитные по транзитным складам
//	КонецЕсли;
		
КонецПроцедуры


 //+++ 23.01.2015 -----------------------------------------------
Процедура ДобавитьЗаказВТЧЗаказы(Зак1, ЗакОб)
	
	Если Зак1.Заказы.Количество()>0 тогда  
		для каждого стр1 из Зак1.Заказы цикл
			ДобавитьЗаказВТЧЗаказы(стр1.ЗаказПокупателя, ЗакОб)
		КонецЦикла;
	ИНАЧЕ // это тот заказ что нам нужен...
	   стрЗак = ЗакОб.Заказы.Добавить();
	   стрЗак.ЗаказПокупателя = Зак1;
    КонецЕсли;
   
КонецПроцедуры



//процедуру надо перенести в общий модуль ИнтернетМагазин
//
Процедура ОбъединитьЗаказыПокупателяФилиал(ДатаОтгрузки='00010101', ТекстВДоговоре="", ТолькоЧтениеЗаказов=ЛОЖЬ, Подразделение=неопределено, Транзит=ЛОЖЬ) 
	
	Если СокрЛП(ТекстВДоговоре)="" или НЕ ЗначениеЗаполнено(ДоговорКлиента) //или ДатаОтгрузки='00010101'
		или ПодразделениеОТХ.Пустая() тогда
		Предупреждение("Не заполнено одно из Обязательных условий отбора!", 30);
		возврат;
	КонецЕсли;	
	
	//1.находим заказы по Контрагенту и Подразделению
	// из регистра ЗаказыПокупателей - на случай Корректировок, изменений в проведении и проверки
	Запрос = новый Запрос;
	СписокЗаказов = новый СписокЗначений;					
	
	Если  ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов тогда
		
		// запрос.УстановитьПараметр("Категория", 
		
		ТабличноеПоле1.Очистить();
		Данные = ПолучитьДанныеФилиал(Запрос);
		ТабличноеПоле1 = Данные.Выгрузить();					
		
		СписокЗаказов = новый СписокЗначений;
		//СписокЗаказов.ЗагрузитьЗначения( ТабличноеПоле1.ВыгрузитьКолонку("ЗаказПокупателя") );
		Возврат; //+++ выход!
		
	иначе 
		
		//Если не ТолькоЧтениеЗаказов тогда
		для каждого стр1 из ТабличноеПоле1 цикл
			Если стр1.флаг тогда
				СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

 
//================================ОБЪЕДИНЕНИЕ====================================================

Если СписокЗаказов.Количество()=0 тогда 
		Предупреждение("Нет"+?(транзит," транзитных","")+" заказов покупателя 
						|для объединения поСкладу Подразделения: "+ строка(ПодразделениеОТХ)+"
						|с датой отгрузки с "+строка(НачалоДня(ДатаОтгрузки))+" по "+строка(КонецДня(ДатаОтгрузки1)) , 30);
	возврат;
	
иначе
	Сообщить("Выбрано: "+строка(СписокЗаказов.Количество())+?(транзит," транзитных","")+" заказов покупателя для объединения по условию: "+ТекстВДоговоре+" с датой отгрузки с "+Формат(ДатаОтгрузки,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" и Подразделению склада: "+строка(ПодразделениеОТХ), СтатусСообщения.Информация);
КонецЕсли;	


//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
 	 запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	 списПодр7 = новый СписокЗначений; //список подразделенией 7 дней держится "статус" согласования цен
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00005")); //Яр
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00112")); //СПб
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00133")); //Мск 
	 запрос.УстановитьПараметр("списПодр7", списПодр7 );
	 запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );

	 Запрос.Текст = "ВЫБРАТЬ различные
	                |	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
	                |	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
	                |	ЗаказыПокупателя.СуммаУпрОстаток КАК Сумма,
	                |	ЗаказыПокупателя.ЗаказПокупателя
	                	//+++( 28.08.2018 
                |	, ЗаказПокупателяТовары.Статус КАК Статус,
                |	ЗаказПокупателяТовары.Статус КАК СтатусКол,
                |	ЗаказПокупателяТовары.Цена КАК Цена,
                |	РАЗНОСТЬДАТ(ЗаказыПокупателя.ЗаказПокупателя.Дата, &ТекДата, ДЕНЬ) КАК ЧислоДнейЗаказа,
                |	ВЫБОР
                |		КОГДА ЗаказыПокупателя.ЗаказПокупателя.Подразделение В (&списПодр7)
                |			ТОГДА ИСТИНА
                |		ИНАЧЕ ЛОЖЬ
                |	КОНЕЦ КАК Подразделение7
				|ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)
						//+++ 01.12.2016	
                    |	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	                |   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )

					|) КАК ЗаказыПокупателя
	                   	//+++( 28.08.2018 
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			ЗакТовары.Статус КАК Статус,
                |			ЗакТовары.Номенклатура КАК Номенклатура,
                |			ЗакТовары.Ссылка КАК Заказ,
                |			ЗакТовары.Цена КАК Цена
                |		ИЗ
                |			Документ.ЗаказПокупателя.Товары КАК ЗакТовары
                |		ГДЕ
                |			ЗакТовары.Ссылка В(&СписокЗаказов)) КАК ЗаказПокупателяТовары
                |		ПО ЗаказыПокупателя.ЗаказПокупателя = ЗаказПокупателяТовары.Заказ
                |			И ЗаказыПокупателя.Номенклатура = ЗаказПокупателяТовары.Номенклатура
				|ГДЕ
	                |	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаказыПокупателя.Номенклатура.Производитель,
	                |	Номенклатура
	                |ИТОГИ
	                |	СУММА(Количество),
	                |	СУММА(Сумма)
	               	//+++( 28.08.2018 
             	|	,МАКСИМУМ(Статус),
                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусКол),
                |	МАКСИМУМ(Цена),
                |	МАКСИМУМ(ЧислоДнейЗаказа),
                |	МАКСИМУМ(Подразделение7)
				 |ПО
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ"; 
ОбщийЗаказТовары = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);


Если ОбщийЗаказТовары.Количество()=0 тогда 
//	#Если НаКлиенте тогда
		Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
//	#КонецЕсли	
	возврат;
иначе
//	#Если НаКлиенте тогда
	КолТов = ОбщийЗаказТовары.Количество();
	Сообщить("Заказано "+ строка(КолТов)+" товаров для объединения.", СтатусСообщения.Информация);
//	#КонецЕсли	
КонецЕсли;	


Режим = РежимДиалогаВопрос.ДаНет;
Ответ = Вопрос("Вы уверены, что действительно хотите создать 
			   |Один общий заказ для перемещения "+ТекстВДоговоре+"
			   //на склад Инфинити 
			   |для "+строка(СписокЗаказов.Количество())+" заказов?", Режим, 0, КодВозвратаДиалога.Нет, "Предупреждение!");
Если Ответ = КодВозвратаДиалога.Нет Тогда
    Возврат;
КонецЕсли;



//=============================================================================================================================

докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа

//////////////Плотников
Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
	докОбщийЗаказ.Склад    = ПолучитьСкладТоварыВПути();
Иначе
    докОбщийЗаказ.Склад = докОбщийЗаказ.Подразделение.Склад;
КонецЕсли;
//////////////Плотников

//+++ 03.04.2014
докОбщийЗаказ.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
/////////Плотников
Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
	докОбщийЗаказ.ДоговорКонтрагента = ДоговорКлиента;
    докОбщийЗаказ.Контрагент 	= ДоговорКлиента.Владелец;
Иначе
    докОбщийЗаказ.ДоговорКонтрагента = Справочники.Контрагенты.НайтиПоКоду("36092  ").ОсновнойДоговорКонтрагента;
    докОбщийЗаказ.Контрагент 	= Справочники.Контрагенты.НайтиПоКоду("36092  ");
    докОбщийЗаказ.ОтгрузкаСПодразделенияСклада = ложь;
КонецЕсли;
/////////Плотников
докОбщийЗаказ.Дата          = ТекущаяДата(); //мин(ТекущаяДата(), ДатаОтгрузки+8*3661);   // 08:08:08

//подразделение как в 1-ом заказе из списка!

докОбщийЗаказ.ВводитьТолькоПеремещение = истина;

/////////Плотников
Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
	докОбщийЗаказ.Транзит    = Ложь;
Иначе
    докОбщийЗаказ.Транзит    = Истина;
КонецЕсли;
/////////Плотников

докОбщийЗаказ.Проверен = истина;
докОбщийЗаказ.АвтоРезервирование = истина;

докОбщийЗаказ.ССайта = ложь;
докОбщийЗаказ.НомерВходящегоДокумента = "";
докОбщийЗаказ.ДатаВходящегоДокумента='00010101';

докОбщийЗаказ.Согласован = ложь;
докОбщийЗаказ.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка();
докОбщийЗаказ.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
//+++)

//23.09.2016 - общий заказ - без точек!
докОбщийЗаказ.НомерТорговойТочкиКонтрагента = 0; 
докОбщийЗаказ.ОтгрузкаСПодразделенияСклада = ЛОЖЬ;
докОбщийЗаказ.АдресДоставки = "";

докОбщийЗаказ.ДатаОтгрузки = мин(НачалоДня(ТекущаяДата()), ДатаОтгрузки1);
Если мин(НачалоДня(ТекущаяДата()), ДатаОтгрузки1)< НачалоДня(ТекущаяДата()) тогда
	сообщить("Дата отгрузки объединенного заказа не может быть меньше текущей даты! Дата отгрузки установлена на "+Формат(ТекущаяДата(),"ДЛФ=D") );
	докОбщийЗаказ.ДатаОтгрузки = ТекущаяДата();
КонецЕсли;	


 СписокЗак = новый СписокЗначений;
  
докОбщийЗаказ.Товары.Очистить();
Если докОбщийЗаказ.ВалютаДокумента.Код="643" //+++ 28.08.2018
	тогда руб = "р."; 
	иначе руб = докОбщийЗаказ.ВалютаДокумента.Наименование;
КонецЕсли;

СтавкаНДС_2019 = СтавкаНДСнаДату( ТекущаяДата() ); //28.12.2018
чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );

Пока ОбщийЗаказТовары.Следующий() цикл
	стр1 = докОбщийЗаказ.Товары.Добавить();
	
	стр1.Номенклатура = ОбщийЗаказТовары.Номенклатура;
	стр1.Количество   = ОбщийЗаказТовары.Количество;
	стр1.Сумма   	  = ОбщийЗаказТовары.Сумма;
	
//+++( 28.08.2018 --- статус сохраняется Если только одинаковый статус 1 товара в разных заказах! и не более 7 дней для Яр,Спб,Мск, иначе не более 14 дней----
	Если ОбщийЗаказТовары.СтатусКол=1 
		и ( (ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=7)
		или (не ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=14)
		  ) тогда 
		стр1.Статус = ОбщийЗаказТовары.Статус;
		стр1.Цена   = ОбщийЗаказТовары.Цена;
		Если не стр1.Статус.Пустая() тогда
		сообщить(строка(стр1.НомерСтроки)+") Статус: "+	строка(стр1.Статус)+" для Цены: "+строка(стр1.Цена)+руб
							+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура), СтатусСообщения.Информация);
		КонецЕсли;					
	иначе	
		стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
		Если стр1.Цена<>ОбщийЗаказТовары.Цена тогда
		сообщить(строка(стр1.НомерСтроки)+") "+?(ОбщийЗаказТовары.СтатусКол>1,"разные статусы","")
		+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
		+" Цена средняя: "+строка(стр1.Цена)+руб+?(стр1.Цена = ОбщийЗаказТовары.Цена, " НЕ","")+" отличается от Макс.Цены: "+строка(ОбщийЗаказТовары.Цена)+руб, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;	
//+++)
	
	стр1.СтавкаНДС = СтавкаНДС_2019;   //28.12.2018
	стр1.СуммаНДС = Окр( стр1.Сумма * чНДС/(100+чНДС), 2);
	
	стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
	стр1.Коэффициент = 1;
	стр1.КоличествоМест = стр1.Количество;
	выбЗак = ОбщийЗаказТовары.Выбрать();
	пока выбЗак.Следующий() цикл
		Если СписокЗак.Количество()>0 тогда
			Если СписокЗак.НайтиПоЗначению(выбЗак.ЗаказПокупателя)=неопределено тогда
				СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
			КонецЕсли;
		иначе
			СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
		КонецЕсли;	
	КонецЦикла;	
КонецЦикла;
//-------------устраненеие дублей товаров!---------------------------------
таб = докОбщийЗаказ.Товары.Выгрузить();
 таб.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, СтавкаНДС", "Количество, Коэффициент, КоличествоМест, Сумма, СуммаНДС");
 таб.ЗаполнитьЗначения(1, "Коэффициент");
докОбщийЗаказ.Товары.очистить();
докОбщийЗаказ.Товары.Загрузить( таб );

//(+++ 13.10.2017 --------по задаче № 34553-------------------------------------------------------------
таб = новый ТаблицаЗначений;
таб.Колонки.Добавить("Крышка");
таб.Колонки.Добавить("Количество");
для каждого стрТаб1 из ТабличноеПоле1 цикл
	Если не стрТаб1.Флаг тогда
		продолжить;
	КонецЕсли;	
	таб1 = стрТаб1.ЗаказПокупателя.Крышки.Выгрузить();
	//СклеитьТаблицы
	для каждого стр1 из таб1 цикл
		стр0 = таб.добавить();
		ЗаполнитьЗначенияСвойств(стр0, стр1);
	КонецЦикла;	
КонецЦикла;	
//-------------устраненеие дублей товаров!---------------------------------
таб.Свернуть("Крышка", "Количество");
докОбщийЗаказ.Крышки.очистить();
докОбщийЗаказ.Крышки.Загрузить( таб );
//+++) 



//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
коммент = "";
  
	//+++ 11.10.2013
	Если СписокЗак.Количество()<СписокЗаказов.Количество() тогда
		Сообщить("-----Не Все заказы из избраннных попали в объединение!-----");
		для i=0 по СписокЗаказов.Количество()-1 цикл
			Если СписокЗак.НайтиПоЗначению(СписокЗаказов[i].Значение)=неопределено тогда
				Сообщить(строка(СписокЗаказов[i].Значение)+" - не будет объединен, так как по нему нет заказанных товаров!", СтатусСообщения.Внимание);
        	КонецЕсли;
		КонецЦикла;
		Сообщить("------------------------------------------------------------");
	КонецЕсли;	
		СуммаПоДокументам = 0;
		
  докОбщийЗаказ.Номер ="";
 
//=====================================================================================
попытка		
 // НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //+++ 26.12.2014
НачатьТранзакцию();//+++ 13.01.2015 не надо управляемых блокировок!

докОбщийЗаказ.Подразделение = ПодразделениеОтправитель;  //25.03.2016
докОбщийЗаказ.ТипЗаказа = 7; // ОБЯЗАТЕЛЬНО!
//очистим документ основание
ДокОбщийЗаказ.ДокументОснование = Документы.ЗаказПокупателяСезонный.ПустаяСсылка();
докОбщийЗаказ.Записать(); // новый номер по Подразделению!

докОбщийЗаказ.Заказы.Очистить();
 	для i=0 по СписокЗак.Количество()-1 цикл
		 докОб = СписокЗак[i].Значение.ПолучитьОбъект();
		 
		 //--------------для разрешения отмены проведения!-------------------------
		 услОтмены = (докОб.Контрагент.ОсновнойМенеджерКонтрагента = ПараметрыСеанса.ТекущийПользователь 
			ИЛИ докОб.ДоговорКонтрагента.ОтветственноеЛицо = ПараметрыСеанса.ТекущийПользователь )
			ИЛИ  РольДоступна("ПолныеПрава");
			
//+++ 18.04.2018 - выкл.
		// Если НЕ услОтмены тогда
		// ДогОб = докОб.ДоговорКонтрагента.ПолучитьОбъект();
		// ОснМен = ДогОб.ОтветственноеЛицо;
		// ДогОб.ОбменДанными.Загрузка = истина; // чтобы ничего не проверять
		// ДогОб.ОтветственноеЛицо = ПараметрыСеанса.ТекущийПользователь;
		// ДогОб.Записать();
		//// ДогОб.ОбменДанными.Загрузка = ложь; // чтобы ничего не проверять
		// КонецЕсли;
		 
		 
		 
ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОб);//+++ 19.01.2015 регистрация для обмена с МИМ
	
//=======================ПРОМЕЖУТОЧНЫЙ Заказ!===============================================
	Если докОб.ТипЗаказа = 7 тогда
		
	 докОб.Комментарий = "Промежуточный заказ! "+докОб.Комментарий;
	 //докОб.ТипЗаказа = 7; // так и остаётся
	 докОб.ПометкаУдаления = Истина;
	 докОб.Проверен = ЛОЖЬ; //ВЫКЛЮЧАЕМ!
	 
	 старыйНомер = докОб.Номер;
	 докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения); // ПереЗаписывается заказ - БЕЗ перепроведения!   проделивается в "-" по Транзитному Подразделению!
	 
 	 ИНАЧЕ
//=======================Заказ не отменяется и не перепроводится!===============================================
		 /////////Плотников
   		 докОб.ОтгрузкаСПодразделенияСклада = ложь;
	     докОб.Проверен = ложь;
		 
		 Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
	         докОб.Транзит    = Истина;
         Иначе
             докОб.Транзит    = Ложь;
	     КонецЕсли;
         /////////Плотников
		 докОб.Склад            = ПодразделениеОТХ.Склад; // основной склад подразделения!
		 
		 
		 Если докОб.Подразделение <> ПодразделениеОТХ тогда // чтобы не плодить лишних номеров
		 	докОб.Номер = ""; // чтобы встал новый номер!
		 	докОб.Подразделение    = ПодразделениеОТХ;
	 	 КонецЕсли;
	 
		 докОб.Грузоотправитель = ПодразделениеОТХ.Контрагент;
		 докОб.Комментарий = "Отгрузка после Перемещения по заказу: "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
		 
		 докОб.ОбменДанными.Загрузка = истина;
		 старыйНомер = докОб.Номер;
		 докОб.Записать(); // ПереЗаписывается заказ - БЕЗ перепроведения!   проделивается в "-" по Транзитному Подразделению!
		 докОб.ОбменДанными.Загрузка = ложь; 
	КонецЕсли;	 
//		 УдалитьКорректировкиПоДокументу(докОб.ссылка);

//14.11.2014 --- ХИТРЕЕ чем при Объединении... 
//Если это уже заказ для перемещения для Подразделения... и его еще раз перемещают на Москву
ДобавитьЗаказВТЧЗаказы(докОб.ссылка, докОбщийЗаказ);// добавляем его содержимое...

//стр1 = докОбщийЗаказ.Заказы.Добавить(); // чтобы видеть заказ МС... через структуру подчиненности...
//стр1.ЗаказПокупателя = докОб.ссылка;


		Сообщить("  документ: "+старыйНомер+" >> "+строка(докОб.Номер), СтатусСообщения.Информация);
		
//+++ 18.04.2018 - выкл.
	   //  Если НЕ услОтмены тогда //обратно!
	   //  ДогОб.ОбменДанными.Загрузка = истина; // чтобы ничего не проверять
	   //  ДогОб.ОтветственноеЛицо = ОснМен; 
	   //  ДогОб.Записать();
	   //  ДогОб.ОбменДанными.Загрузка = ложь; 
	   //КонецЕсли;
		 
		 СуммаПоДокументам =  СуммаПоДокументам + докОб.суммаДокумента;
		 коммент = коммент + докОб.Номер+"("+старыйНомер+"); ";
	КонецЦикла;	
	докОбщийЗаказ.Комментарий = "### объединенный заказ для отгрузки: " + коммент;
		
//	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОбщийЗаказ);//+++ 19.01.2015 регистрация для обмена с МИМ

	//27.02.2017
	докОбщийЗаказ.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка(); 
	докОбщийЗаказ.Поставщик = справочники.Контрагенты.ПустаяСсылка();
	докОбщийЗаказ.Проверен  = Истина;
	
	докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение); 
	
	//27.02.2017
	Если не докОбщийЗаказ.Статус.Пустая() 
		или не докОбщийЗаказ.Поставщик.Пустая()
		или не докОбщийЗаказ.Проверен тогда
		сообщить("Одного из товаров - нет в наличие! Объедиенение отменено!", СтатусСообщения.Внимание);
	ОтменитьТранзакцию();
	Возврат;		
	КонецЕсли;	

ЗафиксироватьТранзакцию();
	
Исключение
	ОтменитьТранзакцию();
	#Если НаКлиенте тогда
		Сообщить("--- не удалось создать общий заказ: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	#КонецЕсли	
	возврат;
КонецПопытки;

//----------категория-----------------	

//+++ 04.09.2015 - по времени!
Если докОбщийЗаказ.Ссылка.Контрагент.Код = "П000382" тогда
	услВремени =  (ТекущаяДата() - началоДня(ТекущаяДата()) >17 * 3600 + 10*60);
иначе	
	услВремени =  (ТекущаяДата() - началоДня(ТекущаяДата()) >16 * 3600);
КонецЕсли;

Если услВремени тогда
	
	сообщить("Уже поздно устанавливать категорию отгрузки на сегодня [v]"+строка(ПодразделениеОТХ.КатегорияДляОтгрузкиИзЯрославля), СтатусСообщения.Внимание);
	
Иначе
	регСв = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	/////////Плотников
	Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
	    регСв.Категория = ПодразделениеОТХ.КатегорияДляОтгрузкиИзЯрославля;
	иначе
		регСв.Категория = Справочники.КатегорииОбъектов.НайтиПоКоду("00034");
	КонецЕсли;
	/////////Плотников
	регСв.Объект = докОбщийЗаказ.Ссылка;
	регСв.Записать();
КонецЕсли;	

//чистим все категории по всем документам!
 	Для i=0 по СписокЗак.Количество()-1 цикл
		докОб = СписокЗак[i].Значение.ПолучитьОбъект();
		регСв = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		регСв.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
		регСв.Отбор.Объект.Значение = докОб.Ссылка;
		регСв.Отбор.Объект.Использование = Истина;
		регСв.Записать();
	КонецЦикла;

//	#Если НаКлиенте тогда
		Сообщить("+++ Успешно создан один общий заказ: "+строка(докОбщийЗаказ.Ссылка)+" и закрыто "+строка(СписокЗаказов.Количество())+" заказов покупателя: "+коммент, СтатусСообщения.Информация);
//	#КонецЕсли	

	Если докОбщийЗаказ.СуммаДокумента<>СуммаПоДокументам тогда
		Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы общего заказа: "+строка(СуммаПоДокументам)+" - "+строка(докОбщийЗаказ.СуммаДокумента)+" = "+строка(СуммаПоДокументам -докОбщийЗаказ.СуммаДокумента)+"р.", СтатусСообщения.Внимание);
	иначе
		Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
	КонецЕсли;
	
	ПолеВвода1 = докОбщийЗаказ.Ссылка;  //сразу для открытия
	


	 
КонецПроцедуры


Процедура ОбъединитьЗаказыПокупателя(ДатаОтгрузки='00010101', ТекстВДоговоре="", ТолькоЧтениеЗаказов=ЛОЖЬ, Подразделение=неопределено, Транзит=ЛОЖЬ) 
	
	Если СокрЛП(ТекстВДоговоре)="" или НЕ ЗначениеЗаполнено(ДоговорКлиента) //или ДатаОтгрузки='00010101'
		или ПодразделениеОТХ.Пустая() тогда
		Предупреждение("Не заполнено одно из Обязательных условий отбора!", 30);
		возврат;
	КонецЕсли;	
	
	Если НЕ ПодразделениеОТХ.ОбособленноеПодразделение тогда
		Предупреждение("Выбранное Подразделение - не является Обособленным подразделением!", 30);
		возврат;
	КонецЕсли;	
	
	
	//1.находим заказы по Контрагенту и Подразделению
	// из регистра ЗаказыПокупателей - на случай Корректировок, изменений в проведении и проверки
	Запрос = новый Запрос;
	СписокЗаказов = новый СписокЗначений;					
	
	Если  ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов тогда
		
		ТабличноеПоле1.Очистить();
		Данные = ПолучитьДанныеОбособПодразд(Запрос);
		ТабличноеПоле1 = запрос.Выполнить().Выгрузить();					
		
		СписокЗаказов = новый СписокЗначений;
		Возврат; //+++ выход!
		
	иначе 
		
		//+++ 24.10.2018 --- Задача № 57245 п.1 предварительный расчет ---
		колСтопЛистРазрешен=0; колСтопЛистНеРазрешен = 0;
		Для каждого стр1 из ТабличноеПоле1 Цикл
			Если стр1.флаг и  ЕстьТоварыСтопЛиста( стр1.ЗаказПокупателя ) тогда
				Если стр1.ЗаказПокупателя.РазрешитьГрузитьТоварыИзСтопЛиста тогда
					колСтопЛистРазрешен = колСтопЛистРазрешен + 1;
		        иначе
					колСтопЛистНеРазрешен = колСтопЛистНеРазрешен + 1;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	//24.10.2018 --- Задача № 57245 --- контроль стоп-листа п.1 ( нельзя Разрешенные с НеРазрешенными! )--------------------------------
	Если (колСтопЛистРазрешен*колСтопЛистНеРазрешен <> 0) тогда
		Для каждого стр1 из ТабличноеПоле1 цикл
			Если стр1.Флаг и НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1.ЗаказПокупателя) тогда // НЕЛЬЗЯ ОБЪЕДИНЯТЬ!
				Сообщить("ВНИМАНИЕ! "+строка(стр1.ЗаказПокупателя)+" - содержит диски стоп-листа без разрешения к отгрузке!", СтатусСообщения.Внимание);
				стр1.флаг = ложь;
				продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	

	Для каждого стр1 из ТабличноеПоле1 цикл //только включенные
		Если стр1.Флаг тогда
		СписокЗаказов.Добавить( стр1.ЗаказПокупателя );
		КонецЕсли;
	КонецЦикла;

//================================ОБЪЕДИНЕНИЕ====================================================

Если СписокЗаказов.Количество()=0 тогда 
		Предупреждение("Нет"+?(транзит," транзитных","")+" заказов покупателя 
						|для объединения поСкладу Подразделения: "+ строка(ПодразделениеОТХ)+"
						|с датой отгрузки с "+строка(НачалоДня(ДатаОтгрузки))+" по "+строка(КонецДня(ДатаОтгрузки1)) , 30);
	возврат;
	
иначе
	Сообщить("Выбрано: "+строка(СписокЗаказов.Количество())+?(транзит," транзитных","")+" заказов покупателя для объединения по условию: "+ТекстВДоговоре+" с датой отгрузки с "+Формат(ДатаОтгрузки,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" и Подразделению склада: "+строка(ПодразделениеОТХ), СтатусСообщения.Информация);
КонецЕсли;	


//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
 	 запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	 // списПодр7 = яштПоставщики.ПолучитьМассивФилиалов(); //все подразделения!
	 списПодр7 = новый СписокЗначений; //список подразделенией 7 дней держится "статус" согласования цен
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00005")); //Яр
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00112")); //СПб
	 списПодр7.Добавить( справочники.Подразделения.НайтиПоКоду("00133")); //Мск 
	 запрос.УстановитьПараметр("списПодр7", списПодр7 );
	 запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );

	 Запрос.Текст = "ВЫБРАТЬ различные
	                |	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
	                |	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
	                |	ЗаказыПокупателя.СуммаУпрОстаток КАК Сумма,
	                |	ЗаказыПокупателя.ЗаказПокупателя
	               	//+++( 28.08.2018 
                |	, ЗаказПокупателяТовары.Статус КАК Статус,
                |	ЗаказПокупателяТовары.Статус КАК СтатусКол,
                |	ЗаказПокупателяТовары.Цена КАК Цена,
                |	РАЗНОСТЬДАТ(ЗаказыПокупателя.ЗаказПокупателя.Дата, &ТекДата, ДЕНЬ) КАК ЧислоДнейЗаказа,
                |	ВЫБОР
                |		КОГДА ЗаказыПокупателя.ЗаказПокупателя.Подразделение В (&списПодр7)
                |			ТОГДА ИСТИНА
                |		ИНАЧЕ ЛОЖЬ
                |	КОНЕЦ КАК Подразделение7
				 |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)
						//+++ 01.12.2016	
                    |	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	                |   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )
					
					|) КАК ЗаказыПокупателя
	          	//+++( 28.08.2018 
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                |			ЗакТовары.Статус КАК Статус,
                |			ЗакТовары.Номенклатура КАК Номенклатура,
                |			ЗакТовары.Ссылка КАК Заказ,
                |			ЗакТовары.Цена КАК Цена
                |		ИЗ
                |			Документ.ЗаказПокупателя.Товары КАК ЗакТовары
                |		ГДЕ
                |			ЗакТовары.Ссылка В(&СписокЗаказов)) КАК ЗаказПокупателяТовары
                |		ПО ЗаказыПокупателя.ЗаказПокупателя = ЗаказПокупателяТовары.Заказ
                |			И ЗаказыПокупателя.Номенклатура = ЗаказПокупателяТовары.Номенклатура
			      |ГДЕ
	                |	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаказыПокупателя.Номенклатура.Производитель,
	                |	Номенклатура
	                |ИТОГИ
	                |	СУММА(Количество),
	                |	СУММА(Сумма)
	            	//+++( 28.08.2018 
             	|	,МАКСИМУМ(Статус),
                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусКол),
                |	МАКСИМУМ(Цена),
                |	МАКСИМУМ(ЧислоДнейЗаказа),
                |	МАКСИМУМ(Подразделение7)
			    |ПО
	                |	Номенклатура
	                |АВТОУПОРЯДОЧИВАНИЕ"; 
ОбщийЗаказТовары = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);


Если ОбщийЗаказТовары.Количество()=0 тогда 
//	#Если НаКлиенте тогда
		Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
//	#КонецЕсли	
	возврат;
иначе
//	#Если НаКлиенте тогда
	КолТов = ОбщийЗаказТовары.Количество();
	Сообщить("Заказано "+ строка(КолТов)+" товаров для объединения.", СтатусСообщения.Информация);
//	#КонецЕсли	
КонецЕсли;	


Режим = РежимДиалогаВопрос.ДаНет;
Ответ = Вопрос("Вы уверены, что действительно хотите создать 
			   |Один общий заказ для перемещения "+ТекстВДоговоре+"
			   //на склад Инфинити 
			   |для "+строка(СписокЗаказов.Количество())+" заказов?", Режим, 0, КодВозвратаДиалога.Нет, "Предупреждение!");
Если Ответ = КодВозвратаДиалога.Нет Тогда
    Возврат;
КонецЕсли;



//=============================================================================================================================

докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа

//+++ 03.04.2014
докОбщийЗаказ.ДоговорКонтрагента = ДоговорКлиента;
докОбщийЗаказ.Ответственный	= ДоговорКлиента.ОтветственноеЛицо; //ПараметрыСеанса.ТекущийПользователь; //+++ 18.04.2018
докОбщийЗаказ.Контрагент 	= ДоговорКлиента.Владелец;
докОбщийЗаказ.Дата          = ТекущаяДата(); //мин(ТекущаяДата(), ДатаОтгрузки+8*3661);   // 08:08:08

докОбщийЗаказ.Склад    = ПолучитьСкладТоварыВПути(); // склад - товары в ПУТИ по подразделению!  Здесь складИнфинитиОТХ
//подразделение как в 1-ом заказе из списка!

докОбщийЗаказ.ВводитьТолькоПеремещение = истина;
докОбщийЗаказ.Транзит  = ложь;
докОбщийЗаказ.Проверен = истина;
докОбщийЗаказ.АвтоРезервирование = истина;

докОбщийЗаказ.ССайта = ложь;
докОбщийЗаказ.НомерВходящегоДокумента = "";
докОбщийЗаказ.ДатаВходящегоДокумента='00010101';

докОбщийЗаказ.Согласован = ложь;
докОбщийЗаказ.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка();
докОбщийЗаказ.Поставщик = Справочники.Контрагенты.ПустаяСсылка();

//23.09.2016 - общий заказ - без точек!
докОбщийЗаказ.НомерТорговойТочкиКонтрагента = 0; 
докОбщийЗаказ.ОтгрузкаСПодразделенияСклада = ЛОЖЬ;
докОбщийЗаказ.АдресДоставки = "";

//+++)


докОбщийЗаказ.ДатаОтгрузки = мин(НачалоДня(ТекущаяДата()), ДатаОтгрузки1);
Если мин(НачалоДня(ТекущаяДата()), ДатаОтгрузки)< НачалоДня(ТекущаяДата()) тогда
	сообщить("Дата отгрузки объединенного заказа не может быть меньше текущей даты! Дата отгрузки установлена на "+Формат(ТекущаяДата(),"ДЛФ=D") );
	докОбщийЗаказ.ДатаОтгрузки = ТекущаяДата();
КонецЕсли;	


 СписокЗак = новый СписокЗначений;
  
докОбщийЗаказ.Товары.Очистить();
Если докОбщийЗаказ.ВалютаДокумента.Код="643" //+++ 28.08.2018
	тогда руб = "р."; 
	иначе руб = докОбщийЗаказ.ВалютаДокумента.Наименование;
КонецЕсли;

СтавкаНДС_2019 = СтавкаНДСнаДату( ТекущаяДата() ); //28.12.2018
чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );
	
пока ОбщийЗаказТовары.Следующий() цикл
	стр1 = докОбщийЗаказ.Товары.Добавить();
	
	стр1.Номенклатура = ОбщийЗаказТовары.Номенклатура;
	стр1.Количество   = ОбщийЗаказТовары.Количество;
	стр1.Сумма   	  = ОбщийЗаказТовары.Сумма;
	
//+++( 28.08.2018 --- статус сохраняется Если только одинаковый статус 1 товара в разных заказах! и не более 7 дней для Яр,Спб,Мск, иначе не более 14 дней----
	Если ОбщийЗаказТовары.СтатусКол=1 
		и ( (ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=7)
		или (не ОбщийЗаказТовары.Подразделение7 и ОбщийЗаказТовары.ЧислоДнейЗаказа<=14)
		  ) тогда 
		стр1.Статус = ОбщийЗаказТовары.Статус;
		стр1.Цена   = ОбщийЗаказТовары.Цена;
		Если не стр1.Статус.Пустая() тогда
		сообщить(строка(стр1.НомерСтроки)+") Статус: "+	строка(стр1.Статус)+" для Цены: "+строка(стр1.Цена)+руб
							+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура), СтатусСообщения.Информация);
		КонецЕсли;					
	иначе	
		стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
		Если стр1.Цена<>ОбщийЗаказТовары.Цена тогда
		сообщить(строка(стр1.НомерСтроки)+") "+?(ОбщийЗаказТовары.СтатусКол>1,"разные статусы","")
		+" по товару: "+строка(стр1.Номенклатура.Код)+" "+строка(стр1.Номенклатура)
		+" Цена средняя: "+строка(стр1.Цена)+руб+?(стр1.Цена = ОбщийЗаказТовары.Цена, " НЕ","")+" отличается от Макс.Цены: "+строка(ОбщийЗаказТовары.Цена)+руб, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;	
	//+++)

	стр1.СтавкаНДС = СтавкаНДС_2019;   //28.12.2018
	стр1.СуммаНДС = Окр( стр1.Сумма * чНДС/(100+чНДС), 2);
	
	стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
	стр1.Коэффициент = 1;
	стр1.КоличествоМест = стр1.Количество;
	выбЗак = ОбщийЗаказТовары.Выбрать();
	пока выбЗак.Следующий() цикл
		Если СписокЗак.Количество()>0 тогда
			Если СписокЗак.НайтиПоЗначению(выбЗак.ЗаказПокупателя)=неопределено тогда
				СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
			КонецЕсли;
		иначе
			СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
		КонецЕсли;	
	КонецЦикла;	
КонецЦикла;
//-------------устраненеие дублей товаров!---------------------------------
таб = докОбщийЗаказ.Товары.Выгрузить();
 таб.Свернуть("Номенклатура, Цена, ЕдиницаИзмерения, СтавкаНДС", "Количество, Коэффициент, КоличествоМест, Сумма, СуммаНДС");
 таб.ЗаполнитьЗначения(1, "Коэффициент");
докОбщийЗаказ.Товары.очистить();
докОбщийЗаказ.Товары.Загрузить( таб );
 
//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
коммент = "";
  
	//+++ 11.10.2013
	Если СписокЗак.Количество()<СписокЗаказов.Количество() тогда
		Сообщить("-----Не Все заказы из избраннных попали в объединение!-----");
		для i=0 по СписокЗаказов.Количество()-1 цикл
			Если СписокЗак.НайтиПоЗначению(СписокЗаказов[i].Значение)=неопределено тогда
				Сообщить(строка(СписокЗаказов[i].Значение)+" - не будет объединен, так как по нему нет заказанных товаров!", СтатусСообщения.Внимание);
        	КонецЕсли;
		КонецЦикла;
		Сообщить("------------------------------------------------------------");
	КонецЕсли;	
		СуммаПоДокументам = 0;
//очистим документ основание
ДокОбщийЗаказ.ДокументОснование = Документы.ЗаказПокупателяСезонный.ПустаяСсылка();
		
  докОбщийЗаказ.Номер ="";
  докОбщийЗаказ.Записать(); // новый номер Объединенного заказа!
 
//=====================================================================================
 // НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); //+++ 26.12.2014
НачатьТранзакцию();//+++ 13.01.2015 не надо управляемых блокировок!

попытка		
докОбщийЗаказ.Заказы.Очистить();
СписокПредыдущихЗаказов = Новый СписокЗначений;//Плотников
 	для i=0 по СписокЗак.Количество()-1 цикл
		 докОб = СписокЗак[i].Значение.ПолучитьОбъект();
		 СписокПредыдущихЗаказов.Добавить(докОб.Ссылка);//Плотников
		 
		 //--------------для разрешения отмены проведения!-------------------------
		 услОтмены = (докОб.Контрагент.ОсновнойМенеджерКонтрагента = ПараметрыСеанса.ТекущийПользователь 
			ИЛИ докОб.ДоговорКонтрагента.ОтветственноеЛицо = ПараметрыСеанса.ТекущийПользователь )
			ИЛИ  РольДоступна("ПолныеПрава");
			
//+++ 18.04.2018
		// Если НЕ услОтмены тогда
		// ДогОб = докОб.ДоговорКонтрагента.ПолучитьОбъект();
		// ОснМен = ДогОб.ОтветственноеЛицо;
		// ДогОб.ОбменДанными.Загрузка = истина; // чтобы ничего не проверять
		// ДогОб.ОтветственноеЛицо = ПараметрыСеанса.ТекущийПользователь;
		// ДогОб.Записать();
		//// ДогОб.ОбменДанными.Загрузка = ложь; // чтобы ничего не проверять
		// КонецЕсли;
		 
		 
		 
ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОб.Ссылка);//+++ 19.01.2015 - 02.11.2016 регистрация для обмена с МИМ
	
//=======================ПРОМЕЖУТОЧНЫЙ Заказ!===============================================
	Если докОб.ТипЗаказа = 7 тогда
		
	 докОб.Комментарий = "Промежуточный заказ! "+докОб.Комментарий;
	 //докОб.ТипЗаказа = 7; // так и остаётся
	 докОб.ПометкаУдаления = Истина;
	 докОб.Проверен = ЛОЖЬ;
	 
	 старыйНомер = докОб.Номер;
	 докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения); // ПереЗаписывается заказ - БЕЗ перепроведения!   проделивается в "-" по Транзитному Подразделению!
	 
 	 ИНАЧЕ
//=======================Заказ не отменяется и не перепроводится!===============================================
		 докОб.Транзит = Истина;
		 докОб.Склад   = ПодразделениеОТХ.Склад; // основной склад подразделения!
		 
   		 докОб.ОтгрузкаСПодразделенияСклада = ложь; //выключаем флаг!
	     докОб.Проверен = ложь;  // проделен будет после перемещения!
	 
		 Если докОб.Подразделение <> ПодразделениеОТХ тогда // чтобы не плодить лишних номеров
		 	докОб.Номер = ""; // чтобы встал новый номер!
		 	докОб.Подразделение    = ПодразделениеОТХ;
	 	 КонецЕсли;
	 
		 докОб.Грузоотправитель = ПодразделениеОТХ.Контрагент;
		 докОб.Комментарий = "Отгрузка после Перемещения по заказу: "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
		 
		 докОб.ОбменДанными.Загрузка = истина;
		 старыйНомер = докОб.Номер;
		 докОб.Записать(); // ПереЗаписывается заказ - БЕЗ перепроведения!   проделивается в "-" по Транзитному Подразделению!
		 докОб.ОбменДанными.Загрузка = ложь; 
	КонецЕсли;	 
//		 УдалитьКорректировкиПоДокументу(докОб.ссылка);

//14.11.2014 --- ХИТРЕЕ чем при Объединении... 
//Если это уже заказ для перемещения для Подразделения... и его еще раз перемещают на Москву
ДобавитьЗаказВТЧЗаказы(докОб.ссылка, докОбщийЗаказ);// добавляем его содержимое...

//стр1 = докОбщийЗаказ.Заказы.Добавить(); // чтобы видеть заказ МС... через структуру подчиненности...
//стр1.ЗаказПокупателя = докОб.ссылка;


		Сообщить("  документ: "+старыйНомер+" >> "+строка(докОб.Номер), СтатусСообщения.Информация);
		
//+++ 18.04.2018
	   //  Если НЕ услОтмены тогда //обратно!
	   //  ДогОб.ОбменДанными.Загрузка = истина; // чтобы ничего не проверять
	   //  ДогОб.ОтветственноеЛицо = ОснМен; 
	   //  ДогОб.Записать();
	   //  ДогОб.ОбменДанными.Загрузка = ложь; 
	   //КонецЕсли;
		 
		 СуммаПоДокументам =  СуммаПоДокументам + докОб.суммаДокумента;
		 коммент = коммент + докОб.Номер+"("+старыйНомер+"); ";
	КонецЦикла;
	 
	Для Каждого стр из СписокПредыдущихЗаказов Цикл  //Плотников
		Нов = докОбщийЗаказ.СписокПредыдущихЗаказов.Добавить();
		Нов.Заказ = стр.Значение;
	КонецЦикла;//Плотников
 
	докОбщийЗаказ.Комментарий = "### объединенный заказ для отгрузки: " + коммент;
		
//	докОбщийЗаказ.Склад = складИнфинитиОТХ;
	докОбщийЗаказ.Транзит = ЛОЖЬ;  // перемещение с наших складов НА инфинити
	докОбщийЗаказ.ВводитьТолькоПеремещение = истина;  		//НЕ контролируется лимит ДЗ при перемещении!
	докОбщийЗаказ.ТипЗаказа = 7; // ОБЯЗАТЕЛЬНО!
	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОбщийЗаказ);//+++ 19.01.2015 регистрация для обмена с МИМ
	
	//27.02.2017
	докОбщийЗаказ.Статус = перечисления.СтатусыЗаказов.ПустаяСсылка();
	докОбщийЗаказ.Поставщик = справочники.Контрагенты.ПустаяСсылка();
	докОбщийЗаказ.Проверен = истина;
	
	докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение); 
	
	//27.02.2017
	Если не докОбщийЗаказ.Статус.Пустая() 
		или не докОбщийЗаказ.Поставщик.Пустая()
		или не докОбщийЗаказ.Проверен тогда
		сообщить("Одного из товаров - нет в наличие! Объедиенение отменено!", СтатусСообщения.Внимание);
	ОтменитьТранзакцию();
	Возврат;		
	КонецЕсли;	
	
ЗафиксироватьТранзакцию();
	
Исключение
	ОтменитьТранзакцию();
//	#Если НаКлиенте тогда
		Сообщить("--- не удалось создать общий заказ: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
//	#КонецЕсли	
КонецПопытки;

//----------категория-----------------	

//+++ 04.09.2015 - по времени!
Если докОбщийЗаказ.Ссылка.Контрагент.Код = "П000382" тогда
	услВремени =  (ТекущаяДата() - началоДня(ТекущаяДата()) >17 * 3600 + 10*60);
иначе	
	услВремени =  (ТекущаяДата() - началоДня(ТекущаяДата()) >16 * 3600);
КонецЕсли;

Если услВремени тогда
	
	сообщить("Уже поздно устанавливать категорию отгрузки на сегодня [v]"+строка(ПодразделениеОТХ.КатегорияДляОтгрузкиИзЯрославля), СтатусСообщения.Внимание);
	
Иначе
	регСв = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
	регСв.Категория = ПодразделениеОТХ.КатегорияДляОтгрузкиИзЯрославля;
	регСв.Объект = докОбщийЗаказ.Ссылка;
	регСв.Записать();
КонецЕсли;	

//чистим все категории по всем документам!
 	Для i=0 по СписокЗак.Количество()-1 цикл
		докОб = СписокЗак[i].Значение.ПолучитьОбъект();
		регСв = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		регСв.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
		регСв.Отбор.Объект.Значение = докОб.Ссылка;
		регСв.Отбор.Объект.Использование = Истина;
		регСв.Записать();
	КонецЦикла;
		
	Если докОбщийЗаказ.ТребуютсяКрышки и докОбщийЗаказ.Подразделение = справочники.Подразделения.НайтиПоКоду("00005") Тогда 
		Попытка
			ОтправитьПисьмоСКрышки(докОбщийЗаказ.Ссылка,докОбщийЗаказ.ДатаГотовностиНаборки);
		Исключение	
		КонецПопытки;	
	КонецЕсли;

//	#Если НаКлиенте тогда
		Сообщить("+++ Успешно создан один общий заказ: "+строка(докОбщийЗаказ.Ссылка)+" и закрыто "+строка(СписокЗаказов.Количество())+" заказов покупателя: "+коммент, СтатусСообщения.Информация);
//	#КонецЕсли	

	Если докОбщийЗаказ.СуммаДокумента<>СуммаПоДокументам тогда
		Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы общего заказа: "+строка(СуммаПоДокументам)+" - "+строка(докОбщийЗаказ.СуммаДокумента)+" = "+строка(СуммаПоДокументам -докОбщийЗаказ.СуммаДокумента)+"р.", СтатусСообщения.Внимание);
	иначе
		Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
	КонецЕсли;
	
	ПолеВвода1 = докОбщийЗаказ.Ссылка;  //сразу для открытия
	


	 
КонецПроцедуры




Процедура ПолучитьЗаказыНажатие(Элемент)
	ТабличноеПоле1.Очистить();
	ТолькоПрочитать = истина;
//	Если Флажок1 тогда
		//ТекстВДоговоре = "Категория: Инфинити";
		ТекстВДоговоре = "Отгрузка со склада Москвы";
		Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
 		    ОбъединитьЗаказыПокупателя(ДатаОтгрузки, ТекстВДоговоре, ТолькоПрочитать);  	//Автоэкперт
		Иначе
			ОбъединитьЗаказыПокупателяФилиал(ДатаОтгрузки, ТекстВДоговоре, ТолькоПрочитать);       //Плотников Филиалы
		КонецЕсли;
//	КонецЕсли;
	ВесОбъемОбновитьИтоги();
КонецПроцедуры


Процедура ПриОткрытии()
	
	Флажок1 = истина;
	
	ДатаОтгрузки =  НачалоДня( ТекущаяДата() ) + 86400;  //завтра
	ДатаОтгрузки1 = ДатаОтгрузки;
	ТекстВДоговоре="Москва";	
	
	ПодразделениеОТХ = справочники.Подразделения.НайтиПоКоду("00133");//Москва
 	  Контрагент = ПодразделениеОТХ.Контрагент;
	  ДоговорКлиента = справочники.ДоговорыКонтрагентов.НайтиПоКоду("Б9726"); //ЧЕЛЫШЕВА
  //ДоговорКлиента =  Контрагент.ОсновнойДоговорКонтрагента;  // это на Алаева
  
  ЭлементыФормы.МенДог.Заголовок = строка(ДоговорКлиента.ОтветственноеЛицо);

  	Менеджер   = параметрыСеанса.ТекущийПользователь;
	
	Если РольДоступна("ПолныеПрава") тогда //доступ к другим подразделениям
		ЭлементыФормы.ПодразделениеОТХ.Доступность = истина;
	КонецЕсли;
	
Если глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение Тогда
    ПодразделениеОТХ = Справочники.Подразделения.НайтиПоКоду("00005");	
    ЭлементыФормы.ПодразделениеОТХ.Доступность = Ложь;
	
	ПодразделениеОтправитель = глТекущийПользователь.ОсновноеПодразделение;
	ЭлементыФормы.ПодразделениеОтправитель.Доступность = ложь;
	
  //ДоговорКлиента =  Контрагент.ОсновнойДоговорКонтрагента;  // это на Алаева
    ЭлементыФормы.МенДог.Заголовок = "";
Иначе 
	ЭлементыФормы.ПодразделениеОТХ.СписокВыбора.ЗагрузитьЗначения( яштПоставщики.ПолучитьМассивФилиалов() );	
	//+++ ЭлементыФормы.ПодразделениеОТХ.СписокВыбора.Удалить(0); //без Ярославля
	
	ЭлементыФормы.ПодразделениеОтправитель.СписокВыбора.ЗагрузитьЗначения( яштПоставщики.ПолучитьМассивФилиалов() );	
 // ЭлементыФормы.ПодразделениеОтправитель.СписокВыбора.Удалить(0); //без Ярославля
 
 	ПодразделениеОтправитель = справочники.Подразделения.НайтиПоКоду("00005");

КонецЕсли;	


	Если ПодразделениеОТХ = справочники.Подразделения.НайтиПоКоду("00133") тогда//Москва
	   ДоговорКлиента = справочники.ДоговорыКонтрагентов.НайтиПоКоду("Б9726"); //ЧЕЛЫШЕВА
  	Иначе
	   ДоговорКлиента = ПодразделениеОТХ.Контрагент.ОсновнойДоговорКонтрагента;
   КонецЕсли; 
  	МенДог = строка(ДоговорКлиента.ОтветственноеЛицо);

КонецПроцедуры


Процедура УдалитьКорректировкиПоДокументу(ЗакПокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаЗаказаПокупателя.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
	|ГДЕ
	|	КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗакПокСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		докКорр = выборка.Ссылка.ПолучитьОбъект();	
		докКорр.ПометкаУдаления = истина;
		докКорр.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+докКорр.Комментарий;
		попытка
			докКорр.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			сообщить(" Удален документ: "+строка(докКорр)+" на сумму: "+ докКорр.СуммаДокумента);
		исключение
			сообщить(" Не удалось удалить док: "+строка(докКорр) , СтатусСообщения.Внимание);
		конецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоговорКлиентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Клиент = справочники.Контрагенты.НайтиПоКоду(КодКлиента); 
	
		формаКонтр = справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
		формаКонтр.СправочникСписок.Отбор.Владелец.ВидСравнения = видСравнения.Равно;
		формаКонтр.СправочникСписок.Отбор.Владелец.Значение = Клиент;
		формаКонтр.СправочникСписок.Отбор.Владелец.Использование = Истина;
		формаКонтр.ЭлементыФормы.СправочникСписок.НастройкаОтбора["Владелец"].Доступность = Ложь;
		
		формаКонтр.СправочникСписок.Отбор.ВидДоговора.ВидСравнения = видСравнения.Равно;
		формаКонтр.СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		формаКонтр.СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
		формаКонтр.ЭлементыФормы.СправочникСписок.НастройкаОтбора["ВидДоговора"].Доступность = Ложь;
		
		ДоговорКлиента = формаКонтр.ОткрытьМодально();
		
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаОтгрузки, ?(ДатаОтгрузки1='0001-01-01', ДатаОтгрузки1, КонецДня(ДатаОтгрузки1)));
	Если НастройкаПериода.Редактировать() Тогда
		ДатаОтгрузки  = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОтгрузки1 = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

// всегда только 1 склад на 1 подразделение!
функция ПолучитьСкладТоварыВПути()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И НЕ Склады.ЭтоГруппа
	|	И Склады.Транзитный
	|	И Склады.ТипСклада = &ТипСклада
	|	И Склады.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("ТипСклада", перечисления.ТипыСкладов.ВПути);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОТХ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если  Выборка.Следующий() тогда
		рез = выборка.Ссылка;
	иначе	
		рез = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	возврат рез; //складИнфинитиОТХ
КонецФункции

Процедура ДоговорКлиентаПриИзменении(Элемент)
	МенДог = строка(ДоговорКлиента.ОтветственноеЛицо);
КонецПроцедуры

Процедура ПодразделениеОТХПриИзменении(Элемент)
	
	Если ПодразделениеОТХ = справочники.Подразделения.НайтиПоКоду("00133") тогда//Москва
	  ДоговорКлиента = справочники.ДоговорыКонтрагентов.НайтиПоКоду("Б9726"); //ЧЕЛЫШЕВА
  	Иначе
	   ДоговорКлиента = ПодразделениеОТХ.Контрагент.ОсновнойДоговорКонтрагента;
   КонецЕсли; 
   
   Если ПодразделениеОТХ.ОбособленноеПодразделение тогда
	   ПодразделениеОтправитель = справочники.Подразделения.НайтиПоКоду("00005");
	   ЭлементыФормы.ПодразделениеОтправитель.Доступность = ложь;
   Иначе
	   ПодразделениеОтправитель = справочники.Подразделения.НайтиПоКоду("00112");
	   ЭлементыФормы.ПодразделениеОтправитель.Доступность = Истина;
   КонецЕсли;
   
	Контрагент = ПодразделениеОТХ.Контрагент;
 	ЭлементыФормы.МенДог.Заголовок = строка(ДоговорКлиента.ОтветственноеЛицо);
	
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ЗаказПокупателя.Проверен тогда
		Если ДанныеСтроки.ЗаказПокупателя.Резерв тогда
 			ОформлениеСтроки.Шрифт = мЖирныйКурсивШрифт;
		Иначе
 			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		КонецЕсли;	
	ИначеЕсли ДанныеСтроки.ЗаказПокупателя.Резерв тогда
			ОформлениеСтроки.Шрифт = мКурсивШрифт;
	КонецЕсли;	
КонецПроцедуры


Процедура КоманднаяПанель2ВыделитьВсе(Кнопка)
	всеФлаги(1);
	ВесОбъемОбновитьИтоги();
КонецПроцедуры

Процедура КоманднаяПанель2ОтменитьВсе(Кнопка)
	всеФлаги(0);
	ЭлементыФормы.ТабличноеПоле1.Колонки.Вес.ТекстПодвала   = "0";
	ЭлементыФормы.ТабличноеПоле1.Колонки.Объем.ТекстПодвала = "0";
КонецПроцедуры

Процедура КоманднаяПанель2Инвертировать(Кнопка)
	
	всеФлаги(-1);
	ВесОбъемОбновитьИтоги();
	
КонецПроцедуры

Процедура всеФлаги(вариант=0)
	для каждого стр1 из ТабличноеПоле1 цикл
		Если вариант=1 тогда
			стр1.Флаг = истина;
		иначеЕсли вариант=0 тогда
			стр1.Флаг = ЛОЖЬ;
		иначе	
			стр1.Флаг = не стр1.Флаг;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ПодразделениеОтправительПриИзменении(Элемент)
	
	Если ПодразделениеОтправитель.ОбособленноеПодразделение и ПодразделениеОТХ.ОбособленноеПодразделение тогда
		Предупреждение("Нельзя создать перемещение напрямую с Филиала на Филиал!",10);
	    ПодразделениеОТХ = справочники.Подразделения.ПустаяСсылка();
		 
	ИначеЕсли НЕ ПодразделениеОтправитель.ОбособленноеПодразделение 
		            и НЕ ПодразделениеОТХ.ОбособленноеПодразделение тогда
		Предупреждение("Нельзя создать перемещение с Ярославля на Ярославль!",10);
	    ПодразделениеОтправитель = справочники.Подразделения.ПустаяСсылка();
		 
	ИначеЕсли ПодразделениеОтправитель = ПодразделениеОТХ тогда
	  Предупреждение("Подразделение отправитель должно быть отличным от Подразделения склада!",10);
	  Если ПодразделениеОТХ.ОбособленноеПодразделение тогда
	   ПодразделениеОтправитель = справочники.Подразделения.НайтиПоКоду("00005");
  	  Иначе
	   ПодразделениеОтправитель = справочники.Подразделения.НайтиПоКоду("00112");
   	  КонецЕсли;
	 
    КонецЕсли;	
  
КонецПроцедуры

Функция ПолучитьТекстЗапросаФилиалСтарый()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателя.ЗаказПокупателя.Проверен
	|		И НЕ ЗаказыПокупателя.ЗаказПокупателя.Резерв КАК Флаг,
	|	ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказыПокупателя.ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Наименование КАК Менеджер,
	|	ЗаказыПокупателя.ЗаказПокупателя.СуммаДокумента КАК Сумма,
	|	ЗаказыПокупателя.ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ЗаказыПокупателя.ЗаказПокупателя.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|			,
	|			ЗаказПокупателя.ОтгрузкаСПодразделенияСклада
	|				И ЗаказПокупателя.Склад.Подразделение = &ПодразделениеОТХ
	
	//+++ 01.12.2016	
	|	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	|   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )
	
	
	|				И ЗаказПокупателя.Проверен
	|				И (ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки
	|					И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1)
	|				И ЗаказПокупателя.Подразделение = &ПодразделениеОтправитель И ЗаказПокупателя.ТипЗаказа <> 13) КАК ЗаказыПокупателя
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВходящегоДокумента
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаФилиалСтарый()

Функция ПолучитьТекстЗапросаФилиал()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	зтЗаказы.ЗаказПокупателя.Проверен
	|		И НЕ зтЗаказы.ЗаказПокупателя.Резерв КАК Флаг,
	|	зтЗаказы.ЗаказПокупателя,
	|	зтЗаказы.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	зтЗаказы.ЗаказПокупателя.Контрагент КАК Контрагент,
	|	зтЗаказы.Договор,
	|	зтЗаказы.Договор.ОтветственноеЛицо.Наименование КАК Менеджер,
	|	зтЗаказы.ЗаказПокупателя.СуммаДокумента КАК Сумма,
	|	зтЗаказы.ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	зтЗаказы.ЗаказПокупателя.Комментарий КАК Комментарий,
	|	зтЗаказы.Вес,
	|	зтЗаказы.Объем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
	|		СУММА(ЗаказыПокупателя.ЕдиницаИзмерения.Вес * ЗаказыПокупателя.КоличествоОстаток) КАК Вес,
	|		СУММА(ВЫБОР
	|				КОГДА ЗаказыПокупателя.Номенклатура.Родитель в (&масГруз2)
	|					ТОГДА ЗаказыПокупателя.ЕдиницаИзмерения.Объем * ЗаказыПокупателя.КоличествоОстаток * 1.3
	|				ИНАЧЕ ЗаказыПокупателя.ЕдиницаИзмерения.Объем * ЗаказыПокупателя.КоличествоОстаток
	|			КОНЕЦ) КАК Объем
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя.ОтгрузкаСПодразделенияСклада
	|					И ЗаказПокупателя.Склад.Подразделение = &ПодразделениеОТХ
	|					И (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	|						ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Получен))
	|					И ЗаказПокупателя.Проверен
	|					И (ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки
	|						И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1)
	|					И ЗаказПокупателя.Подразделение = &ПодразделениеОтправитель
	|					И ЗаказПокупателя.ТипЗаказа <> 13) КАК ЗаказыПокупателя
	|	ГДЕ
	|		ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателя.ЗаказПокупателя,
	|		ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента) КАК зтЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВходящегоДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаФилиал()

Функция ПолучитьДанныеФилиал(Запрос)
	
	Запрос.Текст = ПолучитьТекстЗапросаФилиал();
	
	/////////////Плотников					
	Если ПодразделениеОТХ.ОбособленноеПодразделение Тогда
		Запрос.УстановитьПараметр("ПодразделениеОТХ", ПодразделениеОТХ);
	Иначе
		Запрос.УстановитьПараметр("ПодразделениеОТХ", Справочники.Подразделения.ПустаяСсылка());    	 
	КонецЕсли;
	/////////////Плотников	
	
	Запрос.УстановитьПараметр("ПодразделениеОтправитель",ПодразделениеОтправитель);
	
	//+++( 08.12.2017  по задаче № 37329
	масГруз = новый массив;
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001748"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001750"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0080631"));
	Запрос3 = Новый Запрос;
	Запрос3.Текст = "ВЫБРАТЬ Номенклатура.Ссылка
	|ИЗ Справочник.Номенклатура КАК Номенклатура
	|ГДЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ (&масГруз)";
	Запрос3.УстановитьПараметр("масГруз", масГруз);
	Результат3 = Запрос3.Выполнить();
	табл2 = Результат3.Выгрузить();
	масГруз2 = табл2.ВыгрузитьКолонку("Ссылка");
	
	запрос.УстановитьПараметр("масГруз2", масГруз2);
    //+++)
	
	Если ДатаОтгрузки>'00010101' и ДатаОтгрузки1>'00010101' тогда 
		Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки) );
		Запрос.УстановитьПараметр("ДатаОтгрузки1",КонецДня(ДатаОтгрузки1) );
	Иначе
		//Запрос.текст = стрЗаменить(запрос.текст, "//УчетДатыОтгрузки", "");
		Запрос.УстановитьПараметр("ДатаОтгрузки",  '00010101' );
		Запрос.УстановитьПараметр("ДатаОтгрузки1", '00010101' );
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеФилиал()

Функция ПолучитьТекстЗапросаОбособПодраздСтарый()
	
	// запрос.УстановитьПараметр("Категория", 
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателя.ЗаказПокупателя.Проверен 
	|		И НЕ ЗаказыПокупателя.ЗаказПокупателя.Резерв КАК Флаг,
	|	ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДатаОтгрузки как ДатаОтгрузки,
	|	ЗаказыПокупателя.ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
	|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Наименование КАК Менеджер,
	|	ЗаказыПокупателя.ЗаказПокупателя.СуммаДокумента КАК Сумма,
	|	ЗаказыПокупателя.ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ЗаказыПокупателя.ЗаказПокупателя.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(,   
	//+++ 31.10.2014 - СНАЧАЛА отбор по 2м условиям
	|		ЗаказПокупателя.ОтгрузкаСПодразделенияСклада
	|		И ЗаказПокупателя.Склад.Подразделение = &ПодразделениеОТХ
	
	//+++ 01.12.2016	
	|	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	|   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )
	
	
	|		И НЕ ЗаказПокупателя.Транзит
	|		И ЗаказПокупателя.Проверен
	|		И ЗаказПокупателя.ТипЗаказа <> 13
	|	И (ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1)
	
	|) КАК ЗаказыПокупателя
	|ГДЕ
	|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВходящегоДокумента
	|АВТОУПОРЯДОЧИВАНИЕ"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОбособПодраздСтарый()

Функция ПолучитьТекстЗапросаОбособПодразд()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	зтЗаказы.ЗаказПокупателя.Проверен
	|		И НЕ зтЗаказы.ЗаказПокупателя.Резерв КАК Флаг,
	|	зтЗаказы.ЗаказПокупателя,
	|	зтЗаказы.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
	|	зтЗаказы.ЗаказПокупателя.Контрагент КАК Контрагент,
	|	зтЗаказы.Договор,
	|	зтЗаказы.Договор.ОтветственноеЛицо.Наименование КАК Менеджер,
	|	зтЗаказы.ЗаказПокупателя.СуммаДокумента КАК Сумма,
	|	зтЗаказы.ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	зтЗаказы.ЗаказПокупателя.Комментарий КАК Комментарий,
	|	зтЗаказы.Вес,
	|	зтЗаказы.Объем
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
	|		СУММА(ЗаказыПокупателя.ЕдиницаИзмерения.Вес * ЗаказыПокупателя.КоличествоОстаток) КАК Вес,
	|		СУММА(ВЫБОР
	|				КОГДА ЗаказыПокупателя.Номенклатура.Родитель в (&масГруз2)
	|					ТОГДА ЗаказыПокупателя.ЕдиницаИзмерения.Объем * ЗаказыПокупателя.КоличествоОстаток * 1.3
	|				ИНАЧЕ ЗаказыПокупателя.ЕдиницаИзмерения.Объем * ЗаказыПокупателя.КоличествоОстаток
	|			КОНЕЦ) КАК Объем
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя.ОтгрузкаСПодразделенияСклада
	|					И ЗаказПокупателя.Склад.Подразделение = &ПодразделениеОТХ
	|					И (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ПустаяСсылка)
	|						ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Получен))
	|					И НЕ ЗаказПокупателя.Транзит
	|					И ЗаказПокупателя.Проверен
	|					И ЗаказПокупателя.ТипЗаказа <> 13
	|					И (ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки
	|						И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1)) КАК ЗаказыПокупателя
	|	ГДЕ
	|		ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПокупателя.ЗаказПокупателя,
	|		ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента) КАК зтЗаказы";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОбособПодразд()

Функция ПолучитьДанныеОбособПодразд(Запрос)
	
	Запрос.Текст = ПолучитьТекстЗапросаОбособПодразд();
	
	Запрос.УстановитьПараметр("ПодразделениеОТХ", ПодразделениеОТХ); 	 
	
	//+++ 08.12.2017  по задаче № 37329
	масГруз = новый массив;
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001748"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001750"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0080631"));
	Запрос2 = Новый Запрос;
	Запрос2.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&масГруз)";
	Запрос2.УстановитьПараметр("масГруз", масГруз);
	Результат2 = Запрос2.Выполнить();
	табл2 = Результат2.Выгрузить();
	масГруз2 = табл2.ВыгрузитьКолонку("Ссылка");
	
	запрос.УстановитьПараметр("масГруз2", масГруз2);
    //+++)
	
	Если ДатаОтгрузки>'00010101' и ДатаОтгрузки1>'00010101' тогда 
		Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки) );
		Запрос.УстановитьПараметр("ДатаОтгрузки1",КонецДня(ДатаОтгрузки1) );
	Иначе
		//Запрос.текст = стрЗаменить(запрос.текст, "//УчетДатыОтгрузки", "");
		Запрос.УстановитьПараметр("ДатаОтгрузки",  '00010101' );
		Запрос.УстановитьПараметр("ДатаОтгрузки1", '00010101' );
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеОбособПодразд()

Процедура ВесОбъемОбновитьИтоги()
	
	ВесЛок   = 0;
	ОбъемЛок = 0;
	
	СтруктОтбора = Новый Структура("Флаг", Истина);
	МасСтр = ТабличноеПоле1.НайтиСтроки(СтруктОтбора);
	
	Для Каждого ТекСтр Из МасСтр Цикл
		ВесЛок   = ВесЛок   + ТекСтр.Вес;
		ОбъемЛок = ОбъемЛок + ТекСтр.Объем;
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПоле1.Колонки.Вес.ТекстПодвала   = "" + ВесЛок;
	ЭлементыФормы.ТабличноеПоле1.Колонки.Объем.ТекстПодвала = "" + ОбъемЛок;
	
КонецПроцедуры // ВесОбъемОбновитьИтоги()

Процедура ТабличноеПоле1ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭлементыФормы.ТабличноеПоле1.ТекущаяКолонка.Имя = "Флаг" Тогда
		ВесОбъемОбновитьИтоги();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПоле1ПослеУдаления(Элемент)
	
	ВесОбъемОбновитьИтоги();
	
КонецПроцедуры


мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);
