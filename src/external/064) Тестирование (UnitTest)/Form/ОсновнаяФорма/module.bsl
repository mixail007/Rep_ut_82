Перем РежимРедактированияТеста;
Функция СоздатьСтруктуру()
	Тест = Новый Структура;
	Тест.Вставить("Наименование", Наименование);
	Тест.Вставить("Описание", ЭлементыФормы.ПТДОписание.ПолучитьТекст());
	Тест.Вставить("Тесты", Тесты);
	Тест.Вставить("Параметры", Параметры);
	Тест.Вставить("ФормаРедактирования", "ОсновнаяФорма");
	Тест.Вставить("Алгоритмы", тпАлгоритмы);
	Тест.Вставить("ЦветЗамечания", ЦветЗамечания);
	Тест.Вставить("ЦветОшибки", ЦветОшибки);
	Тест.Вставить("ЦветБезОшибок", ЦветБезОшибок);
	Тест.Вставить("УровеньВыводимыхОшибок", УровеньВыводимыхОшибок);
	Тест.Вставить("Файлы", тпФайлы);
	Тест.Вставить("ПередВыполнениемТеста", ПередВыполнениемТеста);
	Тест.Вставить("ПередВыполнениемТестов", ПередВыполнениемТестов);
	Тест.Вставить("ПослеВыполненияТеста", ПослеВыполненияТеста);
	Тест.Вставить("ПослеВыполненияТестов", ПослеВыполненияТестов);
	ивф = ПолучитьИмяВременногоФайла();
	ЭлементыФормы.Результат.Записать(ивф);
	Тест.Вставить("Результат", Новый ДвоичныеДанные(ивф));
	Возврат Тест;
КонецФункции

Процедура Скопировать(Родитель, Строки, Колонки=Неопределено)
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			Родитель.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		НоваяСтрока = Родитель.Строки.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если Строка.Строки.Количество() > 0 Тогда
			Скопировать(НоваяСтрока, Строка.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьИзСтруктуры(Тест, Родитель = Неопределено) Экспорт 
	Если Тест.Свойство("Тесты") Тогда
		Если Тест.Тесты.Колонки.Найти("Транзакция") = Неопределено Тогда
			М = Новый Массив;
			М.Добавить(Тип("Булево"));
			Тест.Тесты.Колонки.Добавить("Транзакция", Новый ОписаниеТипов(М));
		КонецЕсли;
			
		Если Родитель = Неопределено Тогда
			Тесты = Тест.Тесты;
		Иначе
			Скопировать(Родитель, Тест.Тесты.Строки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Тест.Свойство("Описание") Тогда
		ЭлементыФормы.ПТДОписание.УстановитьТекст(Тест.Описание);
	КонецЕсли;
	
	Если Тест.Свойство("Наименование") Тогда
		Наименование = Тест.Наименование;
	КонецЕсли;
	
	Если Тест.Свойство("ПередВыполнениемТестов") Тогда
		ПередВыполнениемТестов = Тест.ПередВыполнениемТестов;
	КонецЕсли;
	Если Тест.Свойство("ПередВыполнениемТеста") Тогда
		ПередВыполнениемТеста = Тест.ПередВыполнениемТеста;
	КонецЕсли;
	Если Тест.Свойство("ПослеВыполненияТестов") Тогда
		ПослеВыполненияТестов = Тест.ПослеВыполненияТестов;
	КонецЕсли;
	Если Тест.Свойство("ПослеВыполненияТеста") Тогда
		ПослеВыполненияТеста = Тест.ПослеВыполненияТеста;
	КонецЕсли;
	
	
	
	
	Если Тест.Свойство("УровеньВыводимыхОшибок") Тогда
		УровеньВыводимыхОшибок = Тест.УровеньВыводимыхОшибок;
	КонецЕсли;
	Если Тест.Свойство("ЦветЗамечания") Тогда
		ЦветЗамечания = Тест.ЦветЗамечания;
	КонецЕсли;
	Если Тест.Свойство("ЦветБезОшибок") Тогда
		ЦветБезОшибок = Тест.ЦветБезОшибок;
	КонецЕсли;
	Если Тест.Свойство("ЦветОшибки") Тогда
		ЦветОшибки = Тест.ЦветОшибки;
	КонецЕсли;
	
	Если Тест.Свойство("Параметры") Тогда
		Параметры = Тест.Параметры;
	КонецЕсли;
	
	Если Тест.Свойство("Файлы") Тогда
		тпФайлы = Тест.Файлы;
	КонецЕсли;
	
	Если Тест.Свойство("Алгоритмы") Тогда
		тпАлгоритмы = Тест.Алгоритмы;
	КонецЕсли;

	Если Тест.Свойство("Результат") Тогда
		ивф = ПолучитьИмяВременногоФайла();
		Тест.Результат.Записать(ивф);
		ЭлементыФормы.Результат.Прочитать(ивф);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНомер(Тест)
	Если Тест.Уровень() = 0 Тогда
		Возврат Строка(Тесты.Строки.Индекс(Тест) + 1);	
	КонецЕсли;
	Возврат СформироватьНомер(Тест.Родитель) + "." + (Тест.Родитель.Строки.Индекс(Тест) + 1);
КонецФункции

Процедура СохранитьТест(ЗапрашиватьИмяФайла=Ложь)
	Если ЗапрашиватьИмяФайла  ИЛИ ПустаяСтрока(ТекущийФайл) Тогда
	    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	    Диалог.ПолноеИмяФайла = ТекущийФайл;
	    Диалог.Каталог = Каталог;
	    Диалог.Заголовок = "Укажите файл";
	    Диалог.Фильтр = "Файлы тестов (*.gtest)|*.gtest|XML файлы тестов (*.xgtst)|*.xgtst|Все файлы (*.*)|*.*";
	    Диалог.Расширение = "gtest";
	    Если Диалог.Выбрать() Тогда
	        ТекущийФайл = Диалог.ПолноеИмяФайла;
			Заголовок = Наименование + " " + ТекущийФайл;
	        Каталог = Диалог.Каталог;
	    Иначе
	        Возврат;
	    КонецЕсли;
	КонецЕсли;
	ИмяФайла = ТекущийФайл;
	Файл = Новый Файл(ИмяФайла);
	Если Найти(Файл.Расширение,"gtest") > 0 Тогда
		ЗначениеВФайл(ИмяФайла, СоздатьСтруктуру());
	Иначе
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Тесты");
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML,СоздатьСтруктуру(), НазначениеТипаXML.Явное); 
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
	КонецЕсли;
	
	Модифицированность = Ложь;
КонецПроцедуры

//+++ 30.11.2018
функция ПолучитьСимволПоСтатусу(ПараметрыОтчетаСтатус="") 
	Если 	  ПараметрыОтчетаСтатус = "Без ошибок"     тогда СтатусСимвол = "v";
	ИначеЕсли ПараметрыОтчетаСтатус = "Есть замечания" тогда СтатусСимвол = "-";
	ИначеЕсли ПараметрыОтчетаСтатус = "Найдены ошибки" тогда СтатусСимвол = "x";
	КонецЕсли;
	возврат СтатусСимвол;	
КонецФункции

Процедура ВывестиРезультаты(Шаблон, Отчет, ПараметрыОтчета, Тест, Результаты)
	ЗаголовокТеста = СформироватьНомер(Тест) + " " + Тест.Наименование;
	Уровень = Тест.Уровень();
	Информация = Шаблон.ПолучитьОбласть("Информация");
	
	ЗаголовокСтроки = Шаблон.ПолучитьОбласть("СтрокаТеста");
	ЗаголовокСтроки.Параметры.Наименование = ЗаголовокТеста;
	ЗаголовокСтроки.Параметры.Расшифровка = Тест;
	ЗаголовокСтроки.Параметры.Описание = Тест.Описание;
	
	ЗаголовокСтроки.Параметры.Начало    = ПараметрыОтчета.Начало;
	ЗаголовокСтроки.Параметры.Статус    = ПараметрыОтчета.Статус;
	
	//+++ 30.11.2018 -----------добавленные поля!--------------
	//ЗаголовокСтроки.Параметры.Окончание = ПараметрыОтчета.Окончание;
	ЗаголовокСтроки.Параметры.Длительность = ПараметрыОтчета.Длительность;
	ЗаголовокСтроки.Параметры.СтатусСимвол = ПолучитьСимволПоСтатусу(ПараметрыОтчета.Статус); 
	
	ЗаголовокСтроки.Область("СтрокаОсновнаяЧасть").ЦветФона = ПараметрыОтчета.ЦветФона;
	Отчет.Вывести(ЗаголовокСтроки, Уровень, Уровень);
	
	Для Каждого СтрокаРезультат Из Результаты Цикл
		СтатусСимвол = ""; //+++ 30.11.2018
		Если СтрокаРезультат.Уровень >= УровеньВыводимыхОшибок Тогда
			Если СтрокаРезультат.Статус = "Ошибка" Тогда
				Информация.Область("ИнформацияОсновнаяЧасть").ЦветФона = ПараметрыОтчета.ЦветФона;
			ИначеЕсли СтрокаРезультат.Статус = "Замечание" Тогда
				Информация.Область("ИнформацияОсновнаяЧасть").ЦветФона = ПараметрыОтчета.ЦветФона;
			Иначе
				Информация.Область("ИнформацияОсновнаяЧасть").ЦветФона = ПараметрыОтчета.ЦветФона;
			КонецЕсли;
			Информация.Параметры.Заполнить(СтрокаРезультат);
			
			Отчет.Вывести(Информация, Уровень + 1, Уровень + 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьРезультаты(Результаты, Результат)
	Структура = Новый Структура("ЕстьОшибки, ЕстьЗамечания, Статус, ЦветФона");
	Ошибки = Результаты.Скопировать(Новый Структура("Статус", "Ошибка"));
	Замечания = Результаты.Скопировать(Новый Структура("Статус", "Замечание"));
	Результат.ВсегоОшибок = Результат.ВсегоОшибок + Ошибки.Количество();
	Результат.ВсегоПредупреждений = Результат.ВсегоПредупреждений + Замечания.Количество();
	Структура.ЕстьОшибки = Ошибки.Количество() > 0;
	Структура.ЕстьЗамечания = Замечания.Количество() > 0;
	
	Если Структура.ЕстьОшибки ИЛИ Структура.ЕстьЗамечания Тогда
		Если Структура.ЕстьОшибки Тогда
			Структура.Статус = "Найдены ошибки";
			Структура.ЦветФона = ЦветОшибки;
			Результат.ВсегоСОшибками = Результат.ВсегоСОшибками + 1;
		Иначе
			Структура.ЦветФона = ЦветЗамечания;
			Структура.Статус = "Есть замечания";
		КонецЕсли;
		
		Если Структура.ЕстьЗамечания Тогда
			Результат.ВсегоСЗамечаниями = Результат.ВсегоСЗамечаниями + 1;
		КонецЕсли;
		
	Иначе
		Структура.ЦветФона = ЦветБезОшибок;
		Структура.Статус = "Без ошибок";
		Результат.ВсегоБезОшибок = Результат.ВсегоБезОшибок + 1;
	КонецЕсли;
	Возврат Структура;
КонецФункции

Процедура ВыполнитьШаг(Тест, РезультатОтчет, ГлобальныеПараметры, Шаблон, Результат, ПрерватьТесты, Транзакции)
	
	Если Не Тест.Выполнять Тогда  //+++
		//Сообщить(Тест.Номер+" Тест - выключен, и не будет выполняться...", СтатусСообщения.БезСтатуса);
		Возврат;
	иначеЕсли ПрерватьТесты  тогда//+++
		Сообщить(Тест.Номер+" Тест - прерван!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если Тест.Строки.Количество() > 0 Тогда
		Уровень = Тест.Уровень();
		ЗаголовокТеста = СформироватьНомер(Тест) + " " + Тест.Наименование;
		#Если Клиент Тогда
			Состояние(ЗаголовокТеста);
		#КонецЕсли
		ЗаголовокСтроки = Шаблон.ПолучитьОбласть("ЗаголовокТеста");
		ЗаголовокСтроки.Параметры.Расшифровка = Тест;
		
		ЗаголовокСтроки.Параметры.Наименование = ЗаголовокТеста;
		РезультатОтчет.Вывести(ЗаголовокСтроки, Уровень, Уровень);

		Для Каждого Строка Из Тест.Строки Цикл
			Если Не Транзакции.НачатаТранзакция И Строка.Транзакция Тогда
				Транзакции.НачатаТранзакция = Истина;
				Транзакции.Уровень = Строка.Уровень();
				НачатьТранзакцию();
			КонецЕсли;
			ВыполнитьШаг(Строка, РезультатОтчет, ГлобальныеПараметры, Шаблон, Результат, ПрерватьТесты, Транзакции);
			Если Транзакции.НачатаТранзакция И Транзакции.Уровень >= Строка.Уровень() Тогда
				Транзакции.НачатаТранзакция = Ложь;
				Транзакции.Уровень = -1;
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Попытка
			СтруктураТеста = ЗначениеИзСтрокиВнутр(Тест.Тест);
		Исключение
			Возврат;
		КонецПопытки;
		
		Начало = ТекущаяДата(); 
		текВремя0= ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если Не Транзакции.НачатаТранзакция И Тест.Транзакция Тогда
			Транзакции.НачатаТранзакция = Истина;
			Транзакции.Уровень = Тест.Уровень();
			НачатьТранзакцию();
		КонецЕсли;
		Обработчики = Новый Структура;
		Обработчики.Вставить("ПередВыполнениемТеста",ПередВыполнениемТеста);
		Обработчики.Вставить("ПослеВыполненияТеста",ПослеВыполненияТеста);
		Результаты = ВыполнитьТест(СтруктураТеста, ГлобальныеПараметры, тпАлгоритмы, тпФайлы, Обработчики);
		
		Если Транзакции.НачатаТранзакция И Транзакции.Уровень >= Тест.Уровень() Тогда
			Транзакции.НачатаТранзакция = Ложь;
			Транзакции.Уровень = -1;
			ОтменитьТранзакцию();
		КонецЕсли;
		Окончание = ТекущаяДата(); 
		текВремя1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Длительность = (текВремя1 - текВремя0)/1000; // в секундах!
		
		Результат.ВсегоТестов = Результат.ВсегоТестов + 1;
		
		ПараметрыОтчета = ОбработатьРезультаты(Результаты, Результат);
		
		ПрерватьТесты = Тест.Прерывать И ПараметрыОтчета.ЕстьОшибки;
		
		ПараметрыОтчета.Вставить("Начало", Начало);
		ПараметрыОтчета.Вставить("Окончание", Окончание);
		ПараметрыОтчета.Вставить("Длительность", Длительность);//+++ 30.11.2018
		ВывестиРезультаты(Шаблон, РезультатОтчет, ПараметрыОтчета, Тест, Результаты);
		
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(Шаблон, Отчет)
	ЗаголовокОтчета = Шаблон.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.Наименование = Наименование;
	ЗаголовокОтчета.Параметры.Дата = ТекущаяДата();
	ЗаголовокОтчета.Параметры.ЧасовойПоясСеанса = ЧасовойПоясСеанса();
	ЗаголовокОтчета.Параметры.ИмяКомпьютера	 = ИмяКомпьютера();
	ЗаголовокОтчета.Параметры.ТекущийРежимЗапуска = ТекущийРежимЗапуска();
	ЗаголовокОтчета.Параметры.СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Отчет.Вывести(ЗаголовокОтчета);
КонецПроцедуры

Функция СоздатьСтруктуруРезультатаТестирования()
	Результат = Новый Структура;
	Результат.Вставить("ВсегоТестов",0);
	Результат.Вставить("ВсегоСЗамечаниями",0);
	Результат.Вставить("ВсегоСОшибками",0);
	Результат.Вставить("ВсегоОшибок",0);
	Результат.Вставить("ВсегоБезОшибок",0);
	Результат.Вставить("ВсегоПредупреждений",0);
	Результат.Вставить("Начало",ТекущаяДата());
	Результат.Вставить("Окончание",Результат.Начало);
	Результат.Вставить("Время","00:00:00");
	Возврат Результат;
КонецФункции

Процедура ВывестиПодвал(Шаблон, Отчет, Результат)
	Подвал = Шаблон.ПолучитьОбласть("Подвал");
	Результат.Окончание = ТекущаяДата();
	Время = Результат.Окончание - Результат.Начало;
	Часов = Цел(Время / (60*60));
	Минут = Цел((Время - Часов * 60 * 60) / 60 );
	Секунд = (Время - Часов * 60 *60 - Минут * 60);
	Результат.Время = Формат(Часов,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=") + " ч. " + Формат(Минут,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=") + " м. " + Формат(Секунд,"ЧЦ=2; ЧДЦ=0; ЧН=00; ЧВН=") + " с.";
	Подвал.Параметры.Заполнить(Результат);
	Отчет.Вывести(Подвал);
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
	
	ГлобальныеПараметры = ТаблицуВСтруктуру(Параметры, Новый Структура, Новый Структура, Неопределено);
	
	РезультатОтчет = ЭлементыФормы.Результат;
	
	РезультатОтчет.Очистить();
	РезультатОтчет.ОтображатьЗаголовки = Истина;
	
	Шаблон = ПолучитьМакет("ШаблонОтчета");
	
	// Вывести заголовок
	ВывестиЗаголовокОтчета(Шаблон, РезультатОтчет);
	// Вывести шапку	
	РезультатОтчет.Вывести(Шаблон.ПолучитьОбласть("ШапкаОтчета"));
	
	ТранзакцияНачата = Ложь;
	
	Результат = СоздатьСтруктуруРезультатаТестирования();
	РезультатОтчет.НачатьАвтогруппировкуСтрок();
	Транзакции = Новый Структура("НачатаТранзакция, Уровень");
	Транзакции.НачатаТранзакция = Ложь;
	Транзакции.Уровень = -1;
	Алгоритмы = тпАлгоритмы;
	Файлы = тпФайлы;
	Попытка
		Выполнить(ПередВыполнениемТестов);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Для Каждого Тест Из Тесты.Строки Цикл
		Если Не Транзакции.НачатаТранзакция И Тест.Транзакция Тогда
			Транзакции.НачатаТранзакция = Истина;
			Транзакции.Уровень = Тест.Уровень();
			НачатьТранзакцию();
		КонецЕсли;
		
		ВыполнитьШаг(Тест, РезультатОтчет, ГлобальныеПараметры, Шаблон, Результат, Ложь, Транзакции);
		
		Если Транзакции.НачатаТранзакция Тогда
			Транзакции.НачатаТранзакция = Ложь;
			Транзакции.Уровень = -1;
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	Попытка
		Выполнить(ПередВыполнениемТестов);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	РезультатОтчет.ЗакончитьАвтогруппировкуСтрок();
	
	
	ВывестиПодвал(Шаблон, РезультатОтчет, Результат);
	РезультатОтчет.ТолькоПросмотр = Истина;
	РезультатОтчет.ПоказатьУровеньГруппировокСтрок(1);//17.01.2019
	
	ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Результат;
	
	
	Если Кнопка = Неопределено И Не ПустаяСтрока(ТекущийФайл) Тогда
		ИмяФайла = ТекущийФайл;
		ЗначениеВФайл(ИмяФайла, СоздатьСтруктуру());
		ЗавершитьРаботуСистемы(Ложь); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИзШаблона(Вариант = Истина)
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Диалог.Заголовок = "Укажите файл";
	Если Вариант Тогда
    	Диалог.Фильтр = "Файлы группы тестов (*.gtest)|*.gtest|Все файлы (*.*)|*.*";
	    Диалог.Расширение = "gtest";
	Иначе
		Диалог.Фильтр = "Файлы тестов (*.test)|*.test|Все файлы (*.*)|*.*";
	    Диалог.Расширение = "test";
	КонецЕсли;
	
    Если Диалог.Выбрать() Тогда
        ИмяФайла = Диалог.ПолноеИмяФайла;
    Иначе
        Возврат;
	КонецЕсли;
	СтруктураТеста = ЗначениеИзФайла(ИмяФайла);
	Если Вариант Тогда
		ЗаполнитьИзСтруктуры(СтруктураТеста, ТекущиеДанные);
	Иначе
		ТекущиеДанные.Описание = СтруктураТеста.Описание;
		ТекущиеДанные.Тест = ЗначениеВСтрокуВнутр(СтруктураТеста);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыТипПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Не ТекущиеДанные.Вычислять Тогда
		ТекущиеДанные.Значение = Элемент.Значение.ПривестиЗначение(ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПараметрыИмяОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если Не СоответствуетИменамПеременных(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция СоответствуетИменамПеременных(Текст)
	Количество = Параметры.НайтиСтроки(Новый Структура("Имя", Текст)).Количество();
	Если Количество > 1 Тогда 
		СообщениеПользователю(Параметры, "Данное имя """+Текст+""" уже определено!");
		Возврат Ложь;
	КонецЕсли;	
	Возврат Истина;
КонецФункции

Процедура ПараметрыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Не СоответствуетИменамПеременных(ТекущиеДанные.Имя) Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;
КонецПроцедуры

Процедура СообщениеПользователю(Объект, Текст)
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.КлючДанных = КлючУникальности;
		СообщениеПользователю.Текст = Текст;
		СообщениеПользователю.УстановитьДанные(Объект);
		СообщениеПользователю.Сообщить();
КонецПроцедуры

Процедура ПараметрыЗначениеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Не ТекущиеДанные.Вычислять Тогда
		//ТекущиеДанные.Тип = Новый ОписаниеТипов(Строка(ТипЗнч(Элемент.Значение)));
	КонецЕсли;
КонецПроцедуры

Процедура ПараметрыВычислятьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	ТекущиеДанные.Значение = Строка(Элемент.Значение);
КонецПроцедуры

Процедура ПараметрыЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.Вычислять Тогда
    	СтандартнаяОбработка = Ложь;
		Форма = ПолучитьФорму("Другое_ФормаВвода");
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
		Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
		Форма.ЭлементыФормы.Код.УстановитьТекст(Элемент.Значение);
		Результат = Форма.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
			Элемент.Значение = Результат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1СвернутьВсе(Кнопка)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = ЭлементыФормы.Тесты.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Строки = ТекущаяСтрока.Строки;
	Иначе
		Строки = Тесты.Строки;
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		ЭлементыФормы.Тесты.Свернуть(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель1РазвернутьВсе(Кнопка)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = ЭлементыФормы.Тесты.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Строки = ТекущаяСтрока.Строки;
	Иначе
		Строки = Тесты.Строки;
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		ЭлементыФормы.Тесты.Развернуть(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ТестыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	МБ = Новый Массив;
	МБ.Добавить(Тип("Булево"));
	ОТ = Новый ОписаниеТипов(МБ);
	Если Тесты.Колонки.Найти("Выполнять") = Неопределено Тогда
		Тесты.Колонки.Добавить("Выполнять", ОТ);
	КонецЕсли;
	Если Тесты.Колонки.Найти("Прерывать") = Неопределено Тогда
		Тесты.Колонки.Добавить("Прерывать", ОТ);
	КонецЕсли;
	Попытка	
    	ДанныеСтроки.Номер = СформироватьНомер(ДанныеСтроки); 
	Исключение
		Тесты.Колонки.Добавить("Номер");
    	ДанныеСтроки.Номер = СформироватьНомер(ДанныеСтроки); 
	КонецПопытки;
	
	Если ДанныеСтроки.Строки.Количество() > 0 Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(КартинкаПапка);
		ОформлениеСтроки.ЦветФона = webЦвета.СветлоЖелтый;//17.01.2019
	Иначе
		Попытка
			Если Не ПустаяСтрока(ДанныеСтроки.Тест) Тогда
				СтруктураТеста = ЗначениеИзСтрокиВнутр(ДанныеСтроки.Тест);
			Иначе
				СтруктураТеста = Новый Структура;
			КонецЕсли;
		Исключение
			СтруктураТеста = Новый Структура;
		КонецПопытки;
		
		ФР = Неопределено;
		СтруктураТеста.Свойство("ФормаРедактирования", ФР);
		
		Если ФР = "Справочник_Запись" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.СправочникОбъект);
		ИначеЕсли ФР = "Документ_Запись" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
		ИначеЕсли ФР = "Документ_ПроверкаРеквизитов" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.ДокументОбъект);
		ИначеЕсли ФР = "Формы_ПроверкаПараметровПриОткрытии" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.Форма);
		ИначеЕсли ФР = "Форма_Форма" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.Форма);
		ИначеЕсли ФР = "Константы_Запись" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.Константа);
		ИначеЕсли ФР = "Форма_ПроизвольныйКод" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.Лупа);
		ИначеЕсли ФР = "Форма_SQL" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(КартинкаБазаДанных);
		ИначеЕсли ФР = "Форма_VBS" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(КартинкаVBS);
		ИначеЕсли ФР = "Форма_Запроса" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.КонструкторЗапроса);
		ИначеЕсли ФР = "РегистрСведений_Запись" Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(БиблиотекаКартинок.РегистрСведений);
		Иначе 
			ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(КартинкаТест);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОткрыть(Кнопка)
	// Вставить содержимое обработчика.
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Диалог.ПолноеИмяФайла = ТекущийФайл;
    Диалог.Каталог = Каталог;
    Диалог.Заголовок = "Укажите файл для теста";
    Диалог.Фильтр = "Файлы тестов (*.gtest)|*.gtest|XML файлы тестов (*.xgtst)|*.xgtst|Все файлы (*.*)|*.*";
    Диалог.Расширение = "gtest";
    Если Диалог.Выбрать() Тогда
        ТекущийФайл = Диалог.ПолноеИмяФайла;
		Заголовок = Наименование + " " + ТекущийФайл;
        Каталог = Диалог.Каталог;
    Иначе
        Возврат;
	КонецЕсли;
	Файл = Новый Файл(ТекущийФайл);
	Если Найти(Файл.Расширение,"gtest") > 0 Тогда
		Попытка
			Тест = ЗначениеИзФайла(ТекущийФайл);
			ЗаполнитьИзСтруктуры(Тест);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ТекущийФайл);
		ЗаполнитьИзСтруктуры(СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("Структура")));
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранить(Кнопка)
	// Вставить содержимое обработчика.
	СохранитьТест();
КонецПроцедуры

Процедура ДействияФормыСохранитьКак(Кнопка)
	// Вставить содержимое обработчика.
	СохранитьТест(Истина);
КонецПроцедуры

Процедура ТестыПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.ОписаниеТеста.ТолькоПросмотр = Истина;
		ЭлементыФормы.ОписаниеТеста.УстановитьТекст(ТекущиеДанные.Описание);
		ЭлементыФормы.КоманднаяПанель3.Кнопки.Изменить.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанель3.Кнопки.Сохранить.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанель3.Кнопки.Изменить.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	КартинкаПапка = Новый Картинка(ПолучитьМакет("Папка"));
	КартинкаТест = Новый Картинка(ПолучитьМакет("Тест"));
	КартинкаVBS = Новый Картинка(ПолучитьМакет("VBS"));
	КартинкаФункция = Новый  Картинка(ПолучитьМакет("КартинкаФункция"));
	КартинкаБазаДанных = Новый Картинка(ПолучитьМакет("БазаДанных"));
	ЭлементыФормы.тпАлгоритмы.Колонки._Тип.КартинкиСтрок = КартинкаФункция;
	ЦветБезОшибок = WebЦвета.СветлоЗеленый;
	ЦветОшибки = WebЦвета.СветлоРозовый;
	ЦветЗамечания = WebЦвета.СветлоЖелтый;

	Если Найти(ПараметрЗапуска, ".gtest") > 0 Тогда
		ТекущийФайл = ПараметрЗапуска;
		Попытка
			Тест = ЗначениеИзФайла(ТекущийФайл);
			ЗаполнитьИзСтруктуры(Тест);
			КнопкаВыполнитьНажатие(Неопределено);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	иначе
		ТекущийФайл = "\\Terminal\_Отдел ИТ\тестирование\Тесты_ЯШТ_УТ.gtest";  //+++ 30.11.2018
		Тест = ЗначениеИзФайла(ТекущийФайл);
		ЗаполнитьИзСтруктуры(Тест);
		//ТекущийФайл = "";
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Результат;
		
		ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(1);//17.01.2019

	КонецЕсли;
	
	
КонецПроцедуры

Процедура ТестыПередНачаломИзменения(Элемент, Отказ)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	ТекущаяКолонка = ЭлементыФормы.Тесты.ТекущаяКолонка;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Строки.Количество() = 0 
			И (РежимРедактированияТеста = Неопределено)
			И (ТекущаяКолонка = ЭлементыФормы.Тесты.Колонки.Наименование) Тогда
			Отказ = Истина;
			Если Не ПустаяСтрока(ТекущиеДанные.Тест) Тогда
				Попытка
					СтруктураТеста = ЗначениеИзСтрокиВнутр(ТекущиеДанные.Тест);
					Если ТипЗнч(СтруктураТеста) <> Тип("Структура") Тогда
						СообщениеПользователю(ТекущиеДанные, "Тест в неправильном формате");
					Иначе
						Если СтруктураТеста.Свойство("ФормаРедактирования") Тогда
							Попытка
								Форма = ПолучитьФорму(СтруктураТеста.ФормаРедактирования);
								Форма.СтрокаТеста = ТекущиеДанные;
								Форма.ЗаполнитьИзСтруктуры(СтруктураТеста);
								Форма.ПараметрыТестов = Параметры;
								Форма.Открыть();
								Модифицированность = Истина;
							Исключение
								СообщениеПользователю(ТекущиеДанные, ОписаниеОшибки());
							КонецПопытки;
						Иначе
							СообщениеПользователю(ТекущиеДанные, "Тест в неправильном формате");
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					СообщениеПользователю(ТекущиеДанные, ОписаниеОшибки());
				КонецПопытки;
				РежимРедактированияТеста = Неопределено;
				Возврат;
			КонецЕсли;
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ПолучитьФорму("Справочник_Запись"),"Запись нового справочника",,БиблиотекаКартинок.СправочникОбъект);
			СписокВыбора.Добавить(ПолучитьФорму("Документ_Запись"),"Запись нового документа",,БиблиотекаКартинок.ДокументОбъект);
			СписокВыбора.Добавить(ПолучитьФорму("Документ_ПроверкаРеквизитов"),"Проверка заполнения документа",,БиблиотекаКартинок.ДокументОбъект);
			СписокВыбора.Добавить(ПолучитьФорму("Формы_ПроверкаПараметровПриОткрытии"),"Проверка форм",,БиблиотекаКартинок.Форма);
			СписокВыбора.Добавить(ПолучитьФорму("Форма_Форма"),"Проверка форм (new)",,БиблиотекаКартинок.Форма);
			СписокВыбора.Добавить(ПолучитьФорму("Константы_Запись"),"Установка констант",,БиблиотекаКартинок.Константа);
			СписокВыбора.Добавить(ПолучитьФорму("Форма_ПроизвольныйКод"),"Произвольный Код",,БиблиотекаКартинок.Лупа);
			СписокВыбора.Добавить(ПолучитьФорму("Форма_SQL"),"Запрос SQL",,КартинкаБазаДанных);
			СписокВыбора.Добавить(ПолучитьФорму("Форма_VBS"),"Скрипт",,КартинкаVBS);
			СписокВыбора.Добавить(ПолучитьФорму("Форма_Запроса"),"Запрос 1С",,БиблиотекаКартинок.КонструкторЗапроса);
			СписокВыбора.Добавить(ПолучитьФорму("РегистрСведений_Запись"),"Регистр сведений",,БиблиотекаКартинок.РегистрСведений);
			РезультатВыбора = ВыбратьИзМеню(СписокВыбора, Элемент); 
			Если РезультатВыбора <> Неопределено Тогда
				РезультатВыбора.Значение.ПараметрыТестов = Параметры;
				РезультатВыбора.Значение.СтрокаТеста = ТекущиеДанные;
				РезультатВыбора.Значение.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РежимРедактированияТеста = Неопределено;
КонецПроцедуры

Процедура КонтекстноеМенюДереваТестовПереименовать(Кнопка)
	// Вставить содержимое обработчика.
	Если ЭлементыФормы.Тесты.ТекущиеДанные <> Неопределено Тогда
		РежимРедактированияТеста = "Переименование";
		ЭлементыФормы.Тесты.ИзменитьСтроку();
	КонецЕсли;
КонецПроцедуры

Процедура КонтекстноеМенюДереваТестовДобавитьИзШаблона(Кнопка)
	// Вставить содержимое обработчика.
	ДобавитьИзШаблона();
КонецПроцедуры

Процедура КонтекстноеМенюДереваТестовДобавитьИзТеста(Кнопка)
	// Вставить содержимое обработчика.
	ДобавитьИзШаблона(Ложь);
КонецПроцедуры

Процедура КонтекстноеМенюДереваТестовВыгрузить(Кнопка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Строки.Количество() = 0 Тогда
			Если Не ПустаяСтрока(ТекущиеДанные.Тест) Тогда
				Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			    Диалог.Заголовок = "Укажите файл";
				Диалог.Фильтр = "Файлы тестов (*.test)|*.test|Все файлы (*.*)|*.*";
			    Диалог.Расширение = "test";
			    Если Диалог.Выбрать() Тогда
			        ЗначениеВФайл(Диалог.ПолноеИмяФайла, ЗначениеИзСтрокиВнутр(ТекущиеДанные.Тест));
				КонецЕсли;				
			Иначе              
				Предупреждение("Тест не создан!");
			КонецЕсли;
		Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		    Диалог.Заголовок = "Укажите файл";
			Диалог.Фильтр = "Файлы тестов (*.gtest)|*.gtest|Все файлы (*.*)|*.*";
		    Диалог.Расширение = "gtest";
			Если Диалог.Выбрать() Тогда
				Структура = СоздатьСтруктуру();
				Структура.Тесты = Новый ДеревоЗначений;
				Массив = Новый Массив;
				Массив.Добавить(ТекущиеДанные);
				Скопировать(Структура.Тесты, Массив, Тесты.Колонки);
		        ЗначениеВФайл(Диалог.ПолноеИмяФайла, Структура);
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КонтекстноеМенюДереваТестовПеренести(Кнопка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВыбСтрока = Тесты.ВыбратьСтроку();
		Если ВыбСтрока <> Неопределено Тогда
			НоваяСтрока = ВыбСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			Скопировать(НоваяСтрока, ТекущиеДанные.Строки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеИерархически(Имя, Значение, Строки)
	
	Для Каждого Строка Из Строки Цикл
		Строка[Имя] = Значение;
		УстановитьЗначениеИерархически(Имя, Значение, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТестыПриИзмененииФлажка(Элемент, Колонка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	УстановитьЗначениеИерархически(Колонка.ДанныеФлажка, ТекущиеДанные[Колонка.ДанныеФлажка] ,ТекущиеДанные.Строки); 
КонецПроцедуры

Процедура ДействияФормыОбработка_модулей(Кнопка)
	// Вставить содержимое обработчика.
	ПолучитьФорму("Форма_РедактированияМодулей").Открыть();
КонецПроцедуры

Процедура ДействияФормыНовый(Кнопка)
	// Вставить содержимое обработчика.
	Если Тесты.Строки.Количество() <> 0 Тогда
		Ответ = Вопрос("Сохранить текущий набор тестов?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьТест();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Тесты.Строки.Очистить();
	Параметры.Очистить();
	ЭлементыФормы.ОписаниеТеста.УстановитьТекст("");
	ЭлементыФормы.Результат.Очистить();
	ТекущийФайл = "";
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Тесты.Строки.Количество() <> 0 И Модифицированность Тогда
		Ответ = Вопрос("Сохранить текущий набор тестов?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьТест();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Или Ответ = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	// Вставить содержимое обработчика.
	Попытка
		Если Не ПустаяСтрока(ТекущийФайл) Тогда
			Тест = ЗначениеИзФайла(ТекущийФайл);
			ЗаполнитьИзСтруктуры(Тест);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если ТипЗнч(Расшифровка) = Тип("СтрокаДереваЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Настройка;
		ЭлементыФормы.Панель2.ТекущаяСтраница = ЭлементыФормы.Панель2.Страницы.Тесты;
		ЭлементыФормы.Тесты.ТекущаяСтрока = Расшифровка;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель3Изменить(Кнопка)
	// Вставить содержимое обработчика.
	ЭлементыФормы.КоманднаяПанель3.Кнопки.Сохранить.Доступность = Истина;
	ЭлементыФормы.ОписаниеТеста.ТолькоПросмотр = Ложь;
КонецПроцедуры

Процедура КоманднаяПанель3Сохранить(Кнопка)
	// Вставить содержимое обработчика.
	
	ТекущиеДанные = ЭлементыФормы.Тесты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Строки.Количество() = 0 Тогда
			Попытка
				Структура = ЗначениеИзСтрокиВнутр(ТекущиеДанные.Тест);
				Описание = ЭлементыФормы.ОписаниеТеста.ПолучитьТекст();
				ТекущиеДанные.Описание = Описание;
				Структура.Описание = Описание;
				ТекущиеДанные.Тест = ЗначениеВСтрокуВнутр(Структура);
				Модифицированность = Истина;
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанель3.Кнопки.Сохранить.Доступность = Ложь;
	ЭлементыФормы.ОписаниеТеста.ТолькоПросмотр = Истина;
КонецПроцедуры

Функция Тег(Имя, Содержимое)
	Возврат "<" + Имя + ">" + Содержимое + "</" + Имя + ">";
КонецФункции

Функция СоздатьПланТестирования(Строки, ДокументHTML)
	Для Каждого Строка Из Строки Цикл
		Уровень = Строка.Уровень();
		ЗаголовокТеста = СформироватьНомер(Строка) + " " + Строка.Наименование;
		ДокументHTML = ДокументHTML + Тег("H" + (Уровень + 1), ЗаголовокТеста);
		ДокументHTML = ДокументHTML + Тег("p", Строка.Описание);
		СоздатьПланТестирования(Строка.Строки, ДокументHTML);
	КонецЦикла;
	
КонецФункции

Процедура ДействияФормыПланТестирования(Кнопка)
	// Вставить содержимое обработчика.
	ДокументHTML = "<HTML><HEAD><TITLE>"+Наименование+"</TITLE></HEAD><BODY>";
	Тело = "";
	СоздатьПланТестирования(Тесты.Строки, Тело);
	ДокументHTML = ДокументHTML + Тело + "</BODY></HTML>";
	ЭлементыФормы.ПланТестирования.УстановитьТекст(ДокументHTML);
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	Если ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ПланТестирования Тогда
		ДействияФормыПланТестирования(Неопределено);
	ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ОПрограмме Тогда 
		ЭлементыФормы.ПолеОПрограмме.УстановитьТекст(ПолучитьМакет("ОПрограмме").ПолучитьТекст());
	КонецЕсли;
	
КонецПроцедуры

Процедура тпАлгоритмыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ТекущиеДанные = ЭлементыФормы.тпАлгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Колонка.Имя = "_Тип" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.Тип = 2 Тогда
			ТекущиеДанные.Тип = 0;
		Иначе
			ТекущиеДанные.Тип = ТекущиеДанные.Тип + 1;
		КонецЕсли;
	ИначеЕсли Колонка.Имя = "Текст" Тогда
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные.Тип = 0 или ТекущиеДанные.Тип = 1 Тогда
			Форма = ПолучитьФорму("Другое_ФормаВвода");
			Форма.Параметры = Параметры;
			Форма.ПараметрыТестов = Параметры;
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
			Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
			Форма.ЭлементыФормы.Код.УстановитьТекст(ТекущиеДанные.Текст);
			Результат = Форма.ОткрытьМодально();
			Если Результат <> Неопределено Тогда
				ТекущиеДанные.Текст = Результат;
			КонецЕсли;
		Иначе
			Форма = ПолучитьФорму("Форма_ПроизвольныйЗапрос");
			Если Форма.Открыта() Тогда
				Форма.Закрыть();
			КонецЕсли;
			Результат = Форма.ОткрытьМодально();
			Если Результат <> Неопределено Тогда
				ТекущиеДанные.Текст = Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура тпАлгоритмыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = ЭлементыФормы.тпАлгоритмы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Тип = 1;
	КонецЕсли;
КонецПроцедуры

Процедура тпФайлыФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ЭлементыФормы.тпФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла = ТекущиеДанные.Имя + "." + СтрЗаменить(ТекущиеДанные.Тип,".","");
	ДиалогВыбораФайла.Фильтр = ТекущиеДанные.Тип + "|*." + СтрЗаменить(ТекущиеДанные.Тип,".","");
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		ТекущиеДанные.Имя = Файл.ИмяБезРасширения;
		ТекущиеДанные.Тип = Файл.Расширение;
		
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		
		ТекущиеДанные.Файл = ЗначениеВСтрокуВнутр(ДвоичныеДанные);
	КонецЕсли;		
КонецПроцедуры

Процедура тпФайлыФайлОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ЭлементыФормы.тпФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Попытка
		ДвоичныеДанные = ЗначениеИзСтрокиВнутр(ТекущиеДанные.Файл);
	Исключение Возврат; КонецПопытки;
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла("." + СтрЗаменить(ТекущиеДанные.Тип,".",""));
	ДвоичныеДанные.Записать(ПолноеИмяФайла);
	ЗапуститьПриложение(ПолноеИмяФайла);
КонецПроцедуры

Процедура тпФайлыФайлНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ЭлементыФормы.тпФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные = ЗначениеИзСтрокиВнутр(ТекущиеДанные.Файл);
	Исключение Возврат; КонецПопытки;
	

	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ТекущиеДанные.Имя + "." + СтрЗаменить(ТекущиеДанные.Тип,".","");
	ДиалогВыбораФайла.Расширение = "*." + СтрЗаменить(ТекущиеДанные.Тип,".","");
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ДвоичныеДанные.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);		
	КонецЕсли;		
КонецПроцедуры

Процедура тпФайлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

Процедура _ПередВыполнениемТестовНажатие(Элемент)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Другое_ФормаВвода");
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
	Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
	Форма.ЭлементыФормы.Код.УстановитьТекст(ПередВыполнениемТестов);
	Результат = Форма.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		ПередВыполнениемТестов = Результат;
	КонецЕсли;
КонецПроцедуры

Процедура _ПослеВыполненияТестовНажатие(Элемент)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Другое_ФормаВвода");
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
	Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
	Форма.ЭлементыФормы.Код.УстановитьТекст(ПослеВыполненияТестов);
	Результат = Форма.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		ПослеВыполненияТестов = Результат;
	КонецЕсли;
КонецПроцедуры

Процедура _ПередВыполнениемТестаНажатие(Элемент)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Другое_ФормаВвода");
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
	Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
	Форма.ЭлементыФормы.Код.УстановитьТекст(ПередВыполнениемТеста);
	Результат = Форма.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		ПередВыполнениемТеста = Результат;
	КонецЕсли;
КонецПроцедуры

Процедура _ПослеВыполненияТестаНажатие(Элемент)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("Другое_ФормаВвода");
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	Описание = ПолучитьМакет("Макет_ВырожениеЗначения").ПолучитьТекст();
	Форма.ЭлементыФормы.Описание.УстановитьТекст(Описание);
	Форма.ЭлементыФормы.Код.УстановитьТекст(ПослеВыполненияТеста);
	Результат = Форма.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		ПослеВыполненияТеста = Результат;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыСозданиеРелиза(Кнопка)
	// Вставить содержимое обработчика.
	ПолучитьФорму("Форма_СозданиеРелиза").Открыть();
КонецПроцедуры



РежимРедактированияТеста = Неопределено;


