Перем ТипыSQL, РезультатыТеста, Алгоритмы, Файлы Экспорт;

Функция НайтиСсылку(ПустаяСсылка, ПараметрыПоиска) Экспорт
	Перем Запрос;
	Если ПараметрыПоиска.Количество() = 0 Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	МД = ПустаяСсылка.Метаданные();
	Имя = МД.Имя;
	ПолноеИмя = МД.ПолноеИмя();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	"+Имя+".Ссылка
	|ИЗ
	|	"+ПолноеИмя+" КАК "+Имя+"
	| ГДЕ ");
	Текст = "";
	Для Каждого Параметр ИЗ ПараметрыПоиска Цикл
		 Текст = Текст + "| И " + Имя + "." + Параметр.Ключ + "=&" + Параметр.Ключ + Символы.ПС;
		 Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + Сред(Текст, 4);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустаяСсылка;
	Иначе
		Возврат Результат.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ТаблицуВСтруктуру(Таблица, ГлобальныеПараметры, Параметры, Фильтр) Экспорт
	Результат = Новый Структура;
	
	Для Каждого Строка ИЗ Таблица Цикл
		Имя = СтрЗаменить(СокрЛП(Строка.Имя)," ", "_");
		Если Фильтр <> Неопределено Тогда
			Продолжать = Истина;
			Для Каждого Ф Из Фильтр Цикл
				Попытка
					Если Строка[Ф.Ключ] <> Ф.Значение Тогда
						Продолжать = Ложь;
						Прервать;
					КонецЕсли;
				Исключение 
					ДобавитьЗамечание("Не смог наложить фильтр", ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
			Если Не Продолжать Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		Попытка
			Значение = Строка.Значение;
			Попытка
				Если Строка.Вычислять Тогда
					Попытка
						Значение = Вычислить(Значение);
					Исключение
						ДобавитьЗамечание("Ошибка вычисления значения " + Имя, ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			Исключение
				ДобавитьЗамечание("Отсутствует поле вычислять.");
			КонецПопытки;
			
			Если Результат.Свойство(Имя) Тогда
				Результат[Имя] = Значение;
			Иначе
				Результат.Вставить(Имя, Значение);
			КонецЕсли;
		Исключение
			ДобавитьЗамечание("Не правильное имя реквизита " + Имя, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьТест(Тест, ГлобальныеПараметры, ТАлгоритмы, ТФайлы, Обработчики) Экспорт
	Файлы = ТФайлы;
	Алгоритмы = ТАлгоритмы;
	РезультатыТеста.Очистить();
	Попытка
		Выполнить(Обработчики.ПередВыполнениемТеста);
	Исключение
		ДобавитьЗамечание("В обработчике: Перед выполнением теста, произошла ошибка!", ОписаниеОшибки());
	КонецПопытки;
	
	Если Тест.ФормаРедактирования = "Форма_ПроизвольныйКод" Тогда
		ВыполнитьПроизвольныйКод(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Справочник_Запись" Тогда
		СоздатьСправочник(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Документ_Запись" Тогда
		СоздатьДокумент(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Формы_ПроверкаПараметровПриОткрытии" Тогда
		ПроферкаФормы(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Константы_Запись" Тогда
		КонстантыПроверкаИЗапись(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Документ_ПроверкаРеквизитов" Тогда
		ПроверитьДокумент(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Форма_SQL" Тогда
		_ВыполнитьSQLЗапрос(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Форма_VBS" Тогда
		ВыполнитьVBSКод(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Форма_Запроса" Тогда
		ВыполнитьЗапрос1С(Тест, ГлобальныеПараметры);
	ИначеЕсли Тест.ФормаРедактирования = "Форма_Форма" Тогда
		Попытка
			ТекущаяФорма = ПолучитьФорму(Тест.Форма);
			ЭлементыФормы = ТекущаяФорма.ЭлементыФормы;
			Выполнить(Тест.Проверка);
		Исключение
			ДобавитьЗамечание("Ошибка при проверке!",ОписаниеОшибки());
		КонецПопытки;
		
	ИначеЕсли Тест.ФормаРедактирования = "РегистрСведений_Запись" Тогда
		Попытка
			Набор = РегистрыСведений[Тест.Регистр].СоздатьНаборЗаписей();
			Для Каждого Элемент Из Тест.Отбор Цикл
				ЗаполнитьЗначенияСвойств(Набор.Отбор[Элемент.Имя], Элемент, "Использование, ВидСравнения, Значение");
			КонецЦикла;
			
			Набор.Загрузить(Тест.Записи);
				Набор.Записать(Тест.Режим);
		Исключение
			ДобавитьЗамечание("Ошибка записи набора записей регистра сведений!",ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		ДобавитьЗамечание("Вариант тестирования не реализован!");
	КонецЕсли;
	
	Попытка
		Выполнить(Обработчики.ПослеВыполненияТеста);
	Исключение
		ДобавитьЗамечание("В обработчике: После выполнения теста, произошла ошибка!", ОписаниеОшибки());
	КонецПопытки;
	Возврат РезультатыТеста;
КонецФункции

Процедура СоздатьСправочник(Тест, ГлобальныеПараметры)
	Ссылка = Тест.Объект.ПривестиЗначение();
	МетаданныеОбъекта = Ссылка.Метаданные();
	МенеджерОбъекта = Справочники[МетаданныеОбъекта.Имя];
	
	
	Если Не ПустаяСтрока(Тест.Форма) Тогда
		Форма = МенеджерОбъекта.ПолучитьФорму(Тест.Форма);
	Иначе
		Форма = Неопределено;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		Если Форма.Открыта() Тогда
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура(), Неопределено);
	
	Реквизиты = ТаблицуВСтруктуру(Тест.Реквизиты, ГлобальныеПараметры, Параметры, Неопределено);
	
	Если Не Реквизиты.Свойство("ЭтоГруппа") Тогда
		Реквизиты.Вставить("ЭтоГруппа", Ложь);
	КонецЕсли;
	
	Объект = Неопределено;
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Попытка
			Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		Исключение
			ДобавитьЗамечание("Объект не найден!",ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	
	Попытка
		Выполнить(Тест.ПередЗаполнением);
	Исключение
		ДобавитьЗамечание("Ошибка выполнения кода перед заполнением!",ОписаниеОшибки());
	КонецПопытки;
	
	Если Ссылка.Пустая() Тогда
		Если Реквизиты.ЭтоГруппа Тогда
			Объект = МенеджерОбъекта.СоздатьГруппу();
		Иначе
			Объект = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
		Ссылка = Объект.Ссылка;
	Иначе
		Попытка
			Объект = Ссылка.ПолучитьОбъект();
		Исключение
			ДобавитьЗамечание("Объект не найден!", ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Фильтр = Новый Структура("Заполнять", Истина);
	
	РеквизитыИсточник = ТаблицуВСтруктуру(Тест.Реквизиты, ГлобальныеПараметры, Параметры, Фильтр);
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыИсточник);
	
	Запрос = Новый Запрос;
	
	Для Каждого ТЧ ИЗ Тест.ТабличныеЧасти.Строки Цикл
		Если ТЧ.Вычислять Тогда
			Запрос.Текст = ТЧ.Значение;
			Попытка
				Таблица = Запрос.Выполнить().Выгрузить();
				Для Каждого Строка ИЗ Таблица Цикл
					СтрокаОбъекта = Объект[ТЧ.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Строка);
				КонецЦикла;
			Исключение
				ДобавитьЗамечание("Ошибка выполнения запроса: " + ТЧ.Имя , ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Попытка
				Таблица = ЗначениеИзСтрокиВнутр(ТЧ.Значение);
				Для Каждого Строка ИЗ Таблица Цикл
					СтрокаОбъекта = Объект[ТЧ.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Строка);
				КонецЦикла;
			Исключение
				ДобавитьЗамечание("Ошибка заполнения таблицы: " + ТЧ.Имя , ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;
	
	Если Форма = Неопределено Тогда
		Попытка
			Выполнить(Тест.ПередЗаписью);
		Исключение
			ДобавитьЗамечание("Ошибка выполнения кода перед записью!", ОписаниеОшибки());
		КонецПопытки;
		Попытка
			Объект.Записать();
			Если Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи!", "Объект " + Объект + " записан!!!");
			КонецЕсли;
		Исключение
			Если Не Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи!", ИнформацияОбОшибке().Описание);
			КонецЕсли;
		КонецПопытки;
	Иначе
		Форма = Объект.ПолучитьФорму(Тест.Форма);
		Форма.Открыть();
		Попытка
			Выполнить(Тест.ПередЗаписью);
		Исключение
			ДобавитьЗамечание("Ошибка выполнения кода перед записью!",ОписаниеОшибки());
		КонецПопытки;
		Попытка
	    	Форма.ЗаписатьВФорме();
			Если Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи в форме!", "Объект " + Объект + " записан!!!");
			КонецЕсли;
		Исключение
			Если Не Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи в форме!", ИнформацияОбОшибке().Описание);
			КонецЕсли;
			
		КонецПопытки;
		Если Форма.Открыта() Тогда
			Форма.Модифицированность = Ложь; 
			Форма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Выполнить(Тест.ПослеЗаписи);
	Исключение
		ДобавитьЗамечание("Ошибка выполнения кода после записи!",ОписаниеОшибки());
	КонецПопытки;
	

КонецПроцедуры

Процедура СоздатьДокумент(Тест, ГлобальныеПараметры)
	Ссылка = Тест.Объект.ПривестиЗначение();
	МетаданныеОбъекта = Ссылка.Метаданные();
	МенеджерОбъекта = Документы[МетаданныеОбъекта.Имя];
	
	Если Не ПустаяСтрока(Тест.Форма) Тогда
		Форма = МенеджерОбъекта.ПолучитьФорму(Тест.Форма);
	Иначе
		Форма = Неопределено;
	КонецЕсли;
	
	Если Форма <> Неопределено Тогда
		Если Форма.Открыта() Тогда
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура(), Неопределено);
	
	Реквизиты = ТаблицуВСтруктуру(Тест.Реквизиты, ГлобальныеПараметры, Параметры, Неопределено);
	
	Объект = Неопределено;
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Попытка
			Объект = Реквизиты.Ссылка.ПолучитьОбъект();
		Исключение
			ДобавитьЗамечание("Ошибка получения объекта по ссылке!",ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	
	Если Объект <> Неопределено Тогда
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	Попытка
		Выполнить(Тест.ПередЗаполнением);
	Исключение
		ДобавитьЗамечание("Ошибка выполнения кода перед заполнением!",ОписаниеОшибки());
	КонецПопытки;
	
	Если Ссылка.Пустая() Тогда
		Объект = МенеджерОбъекта.СоздатьДокумент();
		Ссылка = Объект.Ссылка;
	Иначе
		Попытка
			Объект = Ссылка.ПолучитьОбъект();
		Исключение
			ДобавитьЗамечание("Ошибка получения объекта по ссылке!",ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Фильтр = Новый Структура("Заполнять", Истина);
	
	РеквизитыИсточник = ТаблицуВСтруктуру(Тест.Реквизиты, ГлобальныеПараметры, Параметры, Фильтр);
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыИсточник);
	
	Запрос = Новый Запрос;
	
	Для Каждого ТЧ ИЗ Тест.ТабличныеЧасти.Строки Цикл
		Если ТЧ.Вычислять Тогда
			Запрос.Текст = ТЧ.Значение;
			Попытка
				Таблица = Запрос.Выполнить().Выгрузить();
				Для Каждого Строка ИЗ Таблица Цикл
					СтрокаОбъекта = Объект[ТЧ.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Строка);
				КонецЦикла;
			Исключение
				ДобавитьЗамечание("Ошибка при заполнении табличной части " + ТЧ.Имя, ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Попытка
				Таблица = ЗначениеИзСтрокиВнутр(ТЧ.Значение);
				Для Каждого Строка ИЗ Таблица Цикл
					СтрокаОбъекта = Объект[ТЧ.Имя].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Строка);
				КонецЦикла;
			Исключение
				ДобавитьЗамечание("Ошибка при заполнении табличной части " + ТЧ.Имя, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;
	
	Если Форма = Неопределено Тогда
		Попытка
			Выполнить(Тест.ПередЗаписью);
		Исключение
			ДобавитьЗамечание("Ошибка при выполнении кода перед записью!", ОписаниеОшибки());
		КонецПопытки;
		Попытка
 			Объект.Записать();
			Если Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи!", "Объект " + Объект + " записан!!!");
			КонецЕсли;
		Исключение
			Если Не Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи!", ИнформацияОбОшибке().Описание);
			КонецЕсли;
		КонецПопытки;
	Иначе
		Форма = Объект.ПолучитьФорму(Тест.Форма);
		Форма.Открыть();
		Попытка
			Выполнить(Тест.ПередЗаписью);
		Исключение
			ДобавитьЗамечание("Ошибка при выполнении кода перед записью!", ОписаниеОшибки());
		КонецПопытки;
		Попытка
	    	Форма.ЗаписатьВФорме();
			Если Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи!", "Объект " + Объект + " записан!!!");
			КонецЕсли;
		Исключение
			Если Не Тест.ОшибкаЕслиЗаписан Тогда
				ДобавитьОшибку("Ошибка записи в форме!", ИнформацияОбОшибке().Описание);
			КонецЕсли;
		КонецПопытки;
		
		Форма.Модифицированность = Ложь; 
		Форма.Закрыть();
	КонецЕсли;
	
	Попытка
		Выполнить(Тест.ПослеЗаписи);
	Исключение
		ДобавитьЗамечание("Ошибка при выполнении кода после записи!", ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ПроферкаФормы(Тест, ГлобальныеПараметры)
	
	Попытка
		Форма = ПолучитьФорму(Тест.Форма);
	Исключение
		ДобавитьОшибку("Ошибка создания формы!", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	Попытка
		Выполнить(Тест.ПередОткрытием);
	Исключение
		ДобавитьЗамечание("Перед открытием формы :" + Тест.Форма, ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Форма.Открыть();
		Если Форма.Открыта() Тогда
			Если Тест.ОшибкаЕслиОткрыта Тогда
				ДобавитьОшибку("Ошибка форма открыта: " + Тест.Форма, ОписаниеОшибки());
				Форма.Модифицированность = Ложь;
				Форма.Закрыть();
				Возврат;
			КонецЕсли;
		Иначе
			Если Не Тест.ОшибкаЕслиОткрыта Тогда
				ДобавитьОшибку("Ошибка форма не открыта: " + Тест.Форма, ОписаниеОшибки());
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		Если Не Тест.ОшибкаЕслиОткрыта Тогда
			ДобавитьОшибку("Ошибка открытия формы: " + Тест.Форма, ОписаниеОшибки());
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	Попытка
		Выполнить(Тест.ПослеОткрытия);
	Исключение
		ДобавитьЗамечание("После открытия формы :" + Тест.Форма, ОписаниеОшибки());
	КонецПопытки;
	
	Для Каждого Реквизит Из Тест.Реквизиты Цикл
		Если Реквизит.Проверять Тогда
			Значение = ?(Реквизит.Элемент,Форма.ЭлементыФормы[Реквизит.Имя].Значение,Форма[Реквизит.Имя]);
			Если Реквизит.Сравнение = ВидСравнения.Равно Тогда
				Если Значение = Реквизит.Значение И Тест.ОшибкаПриСовпадении Тогда
					ДобавитьОшибку(Реквизит.Имя + " " + Реквизит.Сравнение + " " + Значение, Реквизит.Значение);
				КонецЕсли;
			ИначеЕсли Реквизит.Сравнение = ВидСравнения.НеРавно Тогда
				Если Значение <> Реквизит.Значение И Тест.ОшибкаПриСовпадении Тогда
					ДобавитьОшибку(Реквизит.Имя + " " + Реквизит.Сравнение + " " + Значение, Реквизит.Значение);
				КонецЕсли;
			Иначе
				ДобавитьЗамечание("В реквизите " + Реквизит.Имя + " задан вид сравнения который не определен!");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Попытка
		Выполнить(Тест.ПередЗакрытием);
	Исключение
		ДобавитьЗамечание("Перед закрытием формы :" + Тест.Форма, ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		
		Если Форма.Открыта() Тогда
			Если Не Тест.ОшибкаЕслиЗакрыта Тогда
				ДобавитьОшибку("Ошибка форма открыта: " + Тест.Форма, ОписаниеОшибки());
				Форма.Модифицированность = Ложь;
				Форма.Закрыть();
				Возврат;
			КонецЕсли;
		Иначе
			Если Тест.ОшибкаЕслиЗакрыта Тогда
				ДобавитьОшибку("Ошибка форма закрыта: " + Тест.Форма, ОписаниеОшибки());
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Если Не Тест.ОшибкаЕслиЗакрыта Тогда
			ДобавитьОшибку("Ошибка при закрытии формы!", ОписаниеОшибки());
		КонецЕсли;
		
	КонецПопытки;
	
	
	Попытка
		Выполнить(Тест.ПослеЗакрытия);
	Исключение
		ДобавитьЗамечание("После закрытия формы :" + Тест.Форма, ОписаниеОшибки());
	КонецПопытки;
	
	
	
КонецПроцедуры

Процедура ДобавитьСообщение(Описание, Статус , Уровень, Информация="", Расшифровка=Неопределено)
	СтрокаСообщение = РезультатыТеста.Добавить();
	СтрокаСообщение.Описание = Описание;
	СтрокаСообщение.Статус = Статус;
	СтрокаСообщение.Расшифровка = Расшифровка;
	СтрокаСообщение.Уровень = Уровень;
	СтрокаСообщение.Информация = Информация;	
КонецПроцедуры

// Добавление информации об ошибке в таблицу результатов
//
//Параметры
//  Описание	- Строка - описание ошибки 
//	Информация	- Строка - подробная информация об ошибке
//
Процедура ДобавитьОшибку(Описание, Информация="", Расшифровка=Неопределено, Уровень = 5)
	ДобавитьСообщение(Описание, "Ошибка", Уровень, Информация, Расшифровка);
КонецПроцедуры

Процедура ДобавитьОписание(Описание, Информация="", Расшифровка=Неопределено, Уровень = 1)
	ДобавитьСообщение(Описание, "Описание", Уровень, Информация, Расшифровка);
КонецПроцедуры

// Добавление информации о замечании в таблицу результатов
//
//Параметры
//  Описание	- Строка - описание замечания 
//	Информация	- Строка - подробная информация о замечании
//
Процедура ДобавитьЗамечание(Описание, Информация="", Расшифровка=Неопределено, Уровень = 3)
	ДобавитьСообщение(Описание, "Замечание", Уровень, Информация, Расшифровка);
КонецПроцедуры

Процедура КонстантыПроверкаИЗапись(Тест, ГлобальныеПараметры)
	Фильтр = Новый Структура("Устанавливать", Истина);
	
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура(), Неопределено);
	ТестКонстанты = ТаблицуВСтруктуру(Тест.Константы, ГлобальныеПараметры, Параметры, Фильтр);
	
	
	Для Каждого Константа Из ТестКонстанты Цикл
		Попытка
			Константы[Константа.Ключ].Установить(Константа.Значение);
		Исключение
			ДобавитьОшибку("Ошибка при установки константы " + Константа.Ключ, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	
	Фильтр = Новый Структура("Проверять", Истина);
	ТестКонстанты = ТаблицуВСтруктуру(Тест.Константы, ГлобальныеПараметры, Параметры, Фильтр);
	Для Каждого Константа Из ТестКонстанты Цикл
		Попытка
			Если Константы[Константа.Ключ].Получить() <> Константа.Значение Тогда
				ДобавитьОшибку("Ошибка при проверке константы " + Константа.Ключ, "Константа не равна " + Константа.Значение);
			КонецЕсли;
		Исключение
			ДобавитьОшибку("Ошибка при проверке константы " + Константа.Имя, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПроизвольныйКод(Тест, ГлобальныеПараметры)
	
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура, Неопределено);
	ДобавитьОписание("Код 1С:", Тест.Код,,0); 
	Попытка
		Выполнить(Тест.Код);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ТекстДляЗамечания = "{ВнешняяОбработка.Тестирование.МодульОбъекта";  //+++ 30.11.2018 - ошибка в тексте теста!
		Если Найти(ТекстОшибки, ТекстДляЗамечания)>0 тогда
			ТекстОшибки = стрЗаменить(ТекстОшибки, ТекстДляЗамечания, "");
			ТекстОшибки = стрЗаменить(ТекстОшибки, "(596)}: ",""); // - номер строки Выполнить
			ДобавитьЗамечание("При выполнении кода теста - произошла ошибка.", ТекстОшибки,,3);
		Иначе	
			ДобавитьОшибку("ОШИБКА выполнения кода!", ТекстОшибки,,5);
		КонецЕсли
	КонецПопытки	
	
КонецПроцедуры

Процедура ПроверитьДокумент(Тест, ГлобальныеПараметры)
	Ссылка = Тест.Объект.ПривестиЗначение();
	МетаданныеОбъекта = Ссылка.Метаданные();
	МенеджерОбъекта = Документы[МетаданныеОбъекта.Имя];
	Попытка
		Выполнить(Тест.ПередЗаполнением);
	Исключение
		ДобавитьЗамечание("Ошибка выполнения кода перед заполнением!",ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Для Каждого СтрокаРеквизит ИЗ Тест.Реквизиты Цикл
		Попытка
			Если СтрокаРеквизит.Проверять Тогда
				Если СтрокаРеквизит.Выражение Тогда
					Если Вычислить(СтрокаРеквизит.Значение) <> Ссылка[СтрокаРеквизит.Имя] Тогда
						ДобавитьОшибку("Ошибка при проверке реквизита " + СтрокаРеквизит.Имя, "Реквизит не равен " + Вычислить(СтрокаРеквизит.Значение) + " (" +  СтрокаРеквизит.Значение + ")");
					КонецЕсли;
				Иначе
					Если СтрокаРеквизит.Значение <> Ссылка[СтрокаРеквизит.Имя] Тогда
						ДобавитьОшибку("Ошибка при проверке реквизита " + СтрокаРеквизит.Имя, "Реквизит не равен " + СтрокаРеквизит.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			ДобавитьЗамечание("Ошибка при сравнении реквизита " + СтрокаРеквизит.Имя, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьЗапрос1С(Тест, ГлобальныеПараметры)
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура, Неопределено);
	Если Не ПустаяСтрока(Тест.ПередВыполнениемЗапроса) Тогда
		ДобавитьОписание("Код перед выполнением запроса:",Тест.ПередВыполнениемЗапроса,,5);
	КонецЕсли;
	
	Попытка
		Выполнить(Тест.ПередВыполнениемЗапроса);
	Исключение
		ДобавитьЗамечание("Перед выполнением запроса произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Если Не ПустаяСтрока(Тест.ТекстЗапроса) Тогда
			ДобавитьОписание("Текст запроса:",Тест.ТекстЗапроса,,5);
		КонецЕсли;
		Запрос = Новый Запрос(Тест.ТекстЗапроса);
		Для Каждого Параметр Из ГлобальныеПараметры Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		Для Каждого Параметр Из Параметры Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Исключение
		ДобавитьЗамечание("Немогу выполнить запрос.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Попытка
		Если Не ПустаяСтрока(Тест.ПослеВыполненияЗапроса) Тогда
			ДобавитьОписание("Код после выполнения запроса запроса:", Тест.ПослеВыполненияЗапроса,,5);
		КонецЕсли;
		Выполнить(Тест.ПослеВыполненияЗапроса);
	Исключение
		ДобавитьЗамечание("После выполнением запроса произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура _ВыполнитьSQLЗапрос(Тест, ГлобальныеПараметры)
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура, Неопределено);
	Попытка
		Conn= Новый COMОбъект("ADODB.Connection");
	Исключение
		ДобавитьЗамечание("Немогу создать объеккт ADODB.Connection", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Conn.ConnectionString = Тест.СтрокаПодключения;
	Попытка
		Conn.Open();
	Исключение
		ДобавитьЗамечание("Немогу открыть соединение.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Отказ = Ложь;
	Попытка
		Выполнить(Тест.ПередВыполнениемЗапроса);
	Исключение
		ДобавитьЗамечание("Перед выполнением запроса произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда Возврат; КонецЕсли;
	Попытка
		РезультатЗапроса=ЗаполнитьТаблицуИзSQL(Conn.Execute(Тест.ТекстЗапроса));	
	Исключение
		ДобавитьЗамечание("Немогу выполнить запрос.", ОписаниеОшибки());
		Conn.Close();
		Conn = Неопределено;
		Возврат;
	КонецПопытки;
	Попытка
		Выполнить(Тест.ПослеВыполненияЗапроса);
	Исключение
		ДобавитьЗамечание("После выполнением запроса произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
	Conn.Close();
	Conn = Неопределено;
КонецПроцедуры

Процедура ВыполнитьVBSКод(Тест, ГлобальныеПараметры)
	Параметры = ТаблицуВСтруктуру(Тест.Параметры, ГлобальныеПараметры, Новый Структура, Неопределено);
	Попытка
		Если Тест.Язык = "AutoIt" Тогда
			Conn= Новый COMОбъект("AutoItX3.Control");
		Иначе
			Conn= Новый COMОбъект("MSScriptControl.ScriptControl");
			Conn.Language=Тест.Язык;
			Conn.AddObject("Test", Тест, Истина);
			Conn.AddObject("Params", Параметры, Истина);
			Conn.AddObject("GParams", ГлобальныеПараметры, Истина);
		КонецЕсли;
	Исключение
		ДобавитьЗамечание("Немогу создать объект " + Тест.Язык, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	Отказ = Ложь;
	Попытка
		Выполнить(Тест.ПередВыполнениемЗапроса);
	Исключение
		ДобавитьЗамечание("Перед выполнением "+Тест.Язык+" произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
	Если Отказ Тогда Возврат; КонецЕсли;
	Попытка
		РезультатВыполнения = Conn.Eval(Тест.ТекстЗапроса);
	Исключение
		ДобавитьЗамечание("Немогу выполнить "+Тест.Язык+".", ОписаниеОшибки());
		Conn = Неопределено;
		Возврат;
	КонецПопытки;
	Попытка
		Выполнить(Тест.ПослеВыполненияЗапроса);
	Исключение
		ДобавитьЗамечание("После выполнением "+Тест.Язык+" произошла исключительная ситуация.", ОписаниеОшибки());
	КонецПопытки;
	Conn = Неопределено;
КонецПроцедуры

Функция ВыполнитьКод(Имя, Параметры=Неопределено) Экспорт
	Тексты = Алгоритмы.НайтиСтроки(Новый Структура("Имя", Имя));
	Результаты = Новый Массив;
	Для Каждого Строка Из Тексты Цикл
		Если Строка.Тип = 0 Тогда
			Результаты.Добавить(Вычислить(Строка.Текст));
		ИначеЕсли Строка.Тип = 1 Тогда
			Выполнить(Строка.Текст);
		ИначеЕсли Строка.Тип = 2 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = Строка.Текст;
			Попытка
				Для Каждого Элемент Из Параметры Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
				КонецЦикла;
			Исключение КонецПопытки;
			Результаты.Добавить(Запрос.Выполнить());
		КонецЕсли;
	КонецЦикла;
	Возврат Результаты;
КонецФункции

Функция ЗаполнитьТаблицуИзSQL(РезультатЗапроса) Экспорт 
	ТаблицаРезультат = Новый ТаблицаЗначений;
	Если РезультатЗапроса.Fields.Count() = 0 Тогда //запрос insert/update не возвращает данных!
		Возврат ТаблицаРезультат;
	КонецЕсли;
		
	ТаблицаРезультат.Очистить();
	ТаблицаРезультат.Колонки.Очистить();
	Для Каждого Поле Из РезультатЗапроса.Fields Цикл
		Массив = Новый Массив;
		Тип = ТипыSQL["_" + Строка(Поле.Type)];
		Массив.Добавить();
		
		Если Тип("Строка") = Тип Тогда
			Квалификатор = Новый КвалификаторыСтроки(Поле.Precision);
			ОписаниеТипа = Новый ОписаниеТипов(Массив,,Квалификатор);
		ИначеЕсли Тип("Число") = Тип Тогда
			Квалификатор = Новый КвалификаторыЧисла(Поле.Precision,Поле.DefinedSize);
			ОписаниеТипа = Новый ОписаниеТипов(Массив,Квалификатор);
		ИначеЕсли ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипа = Тип;
		Иначе
			ОписаниеТипа = Новый ОписаниеТипов(Массив);
		КонецЕсли;
		
		
		ТаблицаРезультат.Колонки.Добавить(Поле.Name,ОписаниеТипа,Поле.Name);
	КонецЦикла;
	
	Пока РезультатЗапроса.EOF() = 0 Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		Попытка
			Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = РезультатЗапроса.Fields(Колонка.Заголовок).Value;
			КонецЦикла;
			РезультатЗапроса.MoveNext();    
		Исключение
			Прервать;
		КонецПопытки;
   	КонецЦикла;    
   	РезультатЗапроса.Close();
	Возврат ТаблицаРезультат;
КонецФункции

Функция ПолучитьИмяФайла1(ФайлЗначение)
	
	Если Тип("Строка") = ТипЗнч(ФайлЗначение) Тогда
		Файл = Новый Файл(ФайлЗначение);
		Если Файл.Существует() Тогда
			Возврат Файл.ПолноеИмя;
		Иначе
			Имя = ПолучитьИмяВременногоФайла();
			ДанныеФайла = ПолучитьФайлПоID(ФайлЗначение);
			Если ДанныеФайла <> Неопределено Тогда
				ДанныеФайла.Записать(Имя);
				Возврат Имя;
			Иначе
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Тип("ДвоичныеДанные") = ТипЗнч(ФайлЗначение) Тогда
		Имя = ПолучитьИмяВременногоФайла();
		ФайлЗначение.Записать(Имя);
		Возврат Имя;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ПолучитьФайлыПоИмени(Имя) Экспорт
	Массив = Файлы.НайтиСтроки(Новый Структура("Имя", Имя));
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(ЗначениеИзСтрокиВнутр(Элемент.Файл));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьФайлПоID(ID) Экспорт
	Результат = Файлы.Найти(ID,"ID");
	Если Результат <> Неопределено Тогда
		Результат = ЗначениеИзСтрокиВнутр(Результат.Файл);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СравнитьДанные(Источник, Приемник, СпособСравнения = Неопределено, ПараметрыСравнения = Неопределено) Экспорт
	Если СпособСравнения = Неопределено Тогда
		СпособСравнения = СпособСравненияФайлов.Двоичное;
	КонецЕсли;
	Если ПараметрыСравнения = Неопределено Тогда
		ПараметрыСравнения = Новый Структура("ИгнорироватьПустоеПространство, УчитыватьРазделителиСтрок, УчитыватьРегистр");
		ПараметрыСравнения.Вставить("ИгнорироватьПустоеПространство", Ложь);
		ПараметрыСравнения.Вставить("УчитыватьРазделителиСтрок", Ложь);
		ПараметрыСравнения.Вставить("УчитыватьРегистр", Ложь);
	КонецЕсли;
	Если Не ПараметрыСравнения.Свойство("ИгнорироватьПустоеПространство") Тогда
		ПараметрыСравнения.Вставить("ИгнорироватьПустоеПространство", Ложь);
	КонецЕсли;
	Если Не ПараметрыСравнения.Свойство("УчитыватьРазделителиСтрок") Тогда
		ПараметрыСравнения.Вставить("УчитыватьРазделителиСтрок", Ложь);
	КонецЕсли;
	Если Не ПараметрыСравнения.Свойство("УчитыватьРегистр") Тогда
		ПараметрыСравнения.Вставить("УчитыватьРегистр", Ложь);
	КонецЕсли;
	
	Сравнение = Новый СравнениеФайлов;
	Сравнение.ПервыйФайл = ПолучитьИмяФайла1(Источник);
	Сравнение.ВторойФайл = ПолучитьИмяФайла1(Приемник);
	Сравнение.СпособСравнения = СпособСравнения;

	Сравнение.ИгнорироватьПустоеПространство = ПараметрыСравнения.ИгнорироватьПустоеПространство;
	Сравнение.УчитыватьРазделителиСтрок = ПараметрыСравнения.УчитыватьРазделителиСтрок;
	Сравнение.УчитыватьРегистр = ПараметрыСравнения.УчитыватьРегистр;
	Попытка
		Возврат Сравнение.Сравнить();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

	


Массив = Новый Массив;
Массив.Добавить(Тип("Дата"));

ОписаниеВремя = Новый ОписаниеТипов(Массив,,,Новый КвалификаторыДаты(ЧастиДаты.Время));
ОписаниеДатаВремя = Новый ОписаниеТипов(Массив,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));

ТипыSQL = Новый Структура;

ТипыSQL.Вставить("_20",Тип("Число"));
ТипыSQL.Вставить("_128",Тип("ДвоичныеДанные"));
ТипыSQL.Вставить("_11", Тип("Булево"));
ТипыSQL.Вставить("_8",Тип("Строка"));
ТипыSQL.Вставить("_136",Тип("Строка"));
ТипыSQL.Вставить("_129",Тип("Строка"));
ТипыSQL.Вставить("_6",Тип("Число"));
ТипыSQL.Вставить("_7",Тип("Дата"));
ТипыSQL.Вставить("_133", Тип("Дата"));
ТипыSQL.Вставить("_134", ОписаниеВремя);
ТипыSQL.Вставить("_135", ОписаниеДатаВремя);
ТипыSQL.Вставить("_14", Тип("Число"));
ТипыSQL.Вставить("_5",Тип("Число"));
ТипыSQL.Вставить("_0", Тип("Неопределено"));
ТипыSQL.Вставить("_10", Тип("Неопределено"));
ТипыSQL.Вставить("_64", ОписаниеВремя);
ТипыSQL.Вставить("_72", Тип("УникальныйИдентификатор"));
//ТипыSQL.Вставить("adIDispatch", 9);
//ТипыSQL.Вставить("adInteger", 3);
//ТипыSQL.Вставить("adIUnknown", 13);
ТипыSQL.Вставить("_205", Тип("ДвоичныеДанные"));
ТипыSQL.Вставить("_201", Тип("Строка"));
ТипыSQL.Вставить("_203",Тип("Строка"));
ТипыSQL.Вставить("_131", Тип("Число"));
//ТипыSQL.Вставить("adPropVariant", 138);
//ТипыSQL.Вставить("adSingle", 4);
ТипыSQL.Вставить("_2", Тип("Число"));
ТипыSQL.Вставить("_16",Тип("Число"));
ТипыSQL.Вставить("_21",Тип("Число"));
ТипыSQL.Вставить("_19",Тип("Число"));
ТипыSQL.Вставить("_18",Тип("Число"));
ТипыSQL.Вставить("_17",Тип("Число"));
//ТипыSQL.Вставить("adUserDefined", 132);
ТипыSQL.Вставить("_204", Тип("ДвоичныеДанные"));
ТипыSQL.Вставить("_200", Тип("Строка"));
//ТипыSQL.Вставить("adVariant", 12);
ТипыSQL.Вставить("_139", Тип("Число"));
ТипыSQL.Вставить("_202", Тип("Строка"));
ТипыSQL.Вставить("_130", Тип("Строка"));
РезультатыТеста = Новый ТаблицаЗначений;
РезультатыТеста.Колонки.Добавить("Описание");
РезультатыТеста.Колонки.Добавить("Статус");
РезультатыТеста.Колонки.Добавить("Информация");
РезультатыТеста.Колонки.Добавить("Расшифровка");
РезультатыТеста.Колонки.Добавить("Уровень");

П = БиблиотекаКартинок.АктивныеПользователи;
