Перем ДанныеРасшифровки_1;


Процедура КнопкаСформироватьНажатие(Кнопка)
	СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("РезервыОдинаковыхДисков");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.КолДисков;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = КолДисков;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
		
	Параметр = СхемаКомпоновкиДанных.Параметры.ТолькоМосковские;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТолькоМосква;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	//
	Параметр = СхемаКомпоновкиДанных.Параметры.адрес;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	//
	Параметр = СхемаКомпоновкиДанных.Параметры.Литые;
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	//
	//Параметр = СхемаКомпоновкиДанных.Параметры.ТолькоШтамп;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = ТолькоШтамп;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	//
	//Параметр = СхемаКомпоновкиДанных.Параметры.Штамп;
	//Если Параметр <> Неопределено Тогда
	//	Параметр.Значение = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049");
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
		
	//Параметр = СхемаКомпоновкиДанных.Параметры.Менеджер;
	//Если Параметр <> Неопределено Тогда
	//	ПараметрМенеджер = новый СписокЗначений;
	//	ПараметрМенеджер.Добавить(глТекущийПользователь);
	//	//18.01.17 Смирнов
	//	//задача 21845
	//	Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Никитин М.И.") тогда
	//		Запрос = новый Запрос;
	//		Запрос.Текст = "ВЫБРАТЬ
	//					   |	Пользователи.Ссылка
	//					   |ИЗ
	//					   |	Справочник.Пользователи КАК Пользователи
	//					   |ГДЕ
	//					   |	Пользователи.НаправлениеПродаж = &НаправлениеПродаж";
	//		Запрос.УстановитьПараметр("НаправлениеПродаж",глТекущийПользователь.НаправлениеПродаж);			   
	//		Рез = Запрос.Выполнить().Выбрать();
	//		Пока Рез.Следующий() цикл
	//			ПараметрМенеджер.Добавить(Рез.ссылка);
	//		КонецЦикла;
	//	КонецЕсли;
	//	//Смирнов
	//	
	//	//Миронычев
	//	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "РедактированиеДокументовГруппы")  Тогда
	//		ВходитВГруппу = ПолучитьСписокГруппыПользователей(глТекущийПользователь);
	//		Если ВходитВГруппу.Количество() > 0 тогда 

	//			Запрос = новый Запрос;
	//			Запрос.Текст = "ВЫБРАТЬ
	//						   |	Пользователи.Ссылка
	//						   |ИЗ
	//						   |	Справочник.Пользователи КАК Пользователи
	//						   |ГДЕ
	//						   |	Пользователи.Ссылка В (&НаправлениеПродаж)";
	//			Запрос.УстановитьПараметр("НаправлениеПродаж",ВходитВГруппу);			   
	//			Рез = Запрос.Выполнить().Выбрать();
	//			Пока Рез.Следующий() цикл
	//				ПараметрМенеджер.Добавить(Рез.ссылка);
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//	//КонецМиронычев
	//	Параметр.Значение = ПараметрМенеджер;
	//	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Форма = Документы.ЗаказПокупателя.ПолучитьФорму("СводПоРезервамМенеджера");
	Результат =ЭлементыФормы.ПолеТабличногоДокумента;
	
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	ДанныеРасшифровки_1 = ДанныеРасшифровки;
	
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	//Форма.Открыть();

КонецПроцедуры

Процедура ПриОткрытии()
	Если РольДоступна("ПолныеПрава") Тогда
		////ЭлементыФормы.ВсеМенеджеры.Видимость = Истина;
		ЭлементыФормы.ДискиБольше.Видимость = Истина;
		ЭлементыФормы.Диски.Видимость = Истина;
	КонецЕсли;                                          
КонецПроцедуры

Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

   СтандартнаяОбработка = Ложь;
   СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет("РезервыОдинаковыхДисков");    //Создадим и инициализируем обработчик расшифровки                    
   ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки_1, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
   																	  
  ЭлементРасшифровкиДанных = ДанныеРасшифровки_1.Элементы[Расшифровка];
  ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
  ОбработкаРасшифровки.ОткрытьЗначение(ЭлементРасшифровкиДанных.Идентификатор, новый ПолеКомпоновкиДанных(ЭлементРасшифровкиДанныхПоля.Поле));
   
	
	// Вставить содержимое обработчика.
КонецПроцедуры
