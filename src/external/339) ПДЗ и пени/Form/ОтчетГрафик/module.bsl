 перем СписокДоговоровПросрочки;
 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();
	
	ДелительТекст = "рублях";
    ЭлементыФормы.ДелительТекст.СписокВыбора.Добавить("рублях");
	ЭлементыФормы.ДелительТекст.СписокВыбора.Добавить("тысячах рублей");
	ЭлементыФормы.ДелительТекст.СписокВыбора.Добавить("миллионах рублей");
	
КонецПроцедуры

Процедура ПриЗакрытии()

	//СохранитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_bf26eff6-ac95-4c84-993d-0f5bdcc1ac9b", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НачалоМесяца(НастройкаПериода.ПолучитьДатуНачала());
		КонДата = НачалоМесяца(НастройкаПериода.ПолучитьДатуОкончания());
	КонецЕсли;
КонецПроцедуры


Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести() экспорт
	КолЦифр=0; 
	Делитель=1;
	РубТекст="руб.";
	Если ДелительТекст="тысячах рублей" тогда
		Делитель=1000;
		КолЦифр=1; 
		РубТекст="тыс.руб.";
	ИначеЕсли ДелительТекст="миллионах рублей" тогда
		Делитель=1000000;
		КолЦифр=3; 
		РубТекст="млн.руб.";
	КонецЕсли;
	
	Если НачДата='00010101' тогда
		НачДата=ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),-1);
	КонецЕсли;
	Если КонДата='00010101' тогда
		КонДата=КонецДня(ТекущаяДата())+1;
	КонецЕсли;
	            // на начало вторника 
	НачДата = ?(ДеньНедели(НачДата)=2, началоДня(НачДата), началоДня(НачДата) - (ДеньНедели(НачДата) - 2)*86400 );

	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ


	//------------------------1. Проср. Дебиторка ----------------------------------------
	//------------------------2. Продажи по месяцам --------------------------------------
	//------------------------3. Оплаты по месяцам  --------------------------------------

	ТаблПросрочки  = ПолучитьТаблицуПросрочки();
	   ТаблПродаж  = ПолучитьТаблицуПродаж();
	 ТаблОплат     = ПолучитьТаблицуОплат();
	 
	 ТаблицаДоговоров.Очистить();
	// Если ОтборДог тогда
		Для i=0 По СписокДоговоровПросрочки.Количество()-1 Цикл
			стр1 = ТаблицаДоговоров.Добавить();
			стр1.Контрагент	= СписокДоговоровПросрочки[i].Значение.Владелец;
			стр1.Менеджер	= СписокДоговоровПросрочки[i].Значение.ОтветственноеЛицо;
			стр1.Договор	= СписокДоговоровПросрочки[i].Значение;
			стр1.ВидДоговора= строка(СписокДоговоровПросрочки[i].Значение.ВидДоговора);
		КонецЦикла;
	ЭлементыФормы.Панель1.Страницы.Страница3.Заголовок = "Договоры просрочки ("+СписокДоговоровПросрочки.Количество()+")";
	//КонецЕсли;
		 
		 
		 
	 //---------------объединяем в 1 таблицу---------------------------
	 ТаблПросрочки3 = новый ТаблицаЗначений;
	ТаблПросрочки3.Колонки.добавить("Дата", Новый ОписаниеТипов("Дата") );
	
	ТаблПросрочки3.Колонки.добавить("Долги",   Новый ОписаниеТипов("Число") );
	ТаблПросрочки3.Колонки.добавить("Продажи", Новый ОписаниеТипов("Число") );
	ТаблПросрочки3.Колонки.добавить("Оплаты",  Новый ОписаниеТипов("Число") );
	
	Для i=0 по ТаблПросрочки.Количество()-1 Цикл
		стрТаблПросрочки = ТаблПросрочки3.Добавить();
		стрТаблПросрочки.Дата  = ТаблПросрочки[i].Дата;
	 	стрТаблПросрочки.Долги = Окр(ТаблПросрочки[i].Долги/Делитель, КолЦифр);
		
		Если i>=ТаблПродаж.Количество() тогда
			стрТаблПросрочки.Продажи = 0; // нет такой записи - значит ноль
		Иначе	
			Если ТаблПродаж[i].Дата=ТаблПросрочки[i].Дата тогда
				стрТаблПросрочки.Продажи = Окр(ТаблПродаж[i].Продажи/Делитель, КолЦифр);
			иначе
				стрТаблПросрочки.Продажи = 0; // нет такой записи - значит ноль
			 	Дата1=ТаблПросрочки[i].Дата;
				Дата2=ТаблПродаж[i].Дата; k=0;
				пока Дата1<Дата2 цикл
				//стр1 = ТаблПродаж.Добавить();
				стр1 = ТаблПродаж.Вставить(i+k);
				стр1.Дата = Дата1;
				стр1.Продажи = 0;
				Дата1 = Дата1 + 7*86400; //ДобавитьМесяц(Дата1,1);
				k=k+1;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
			
		Если i>=ТаблОплат.Количество() тогда
			стрТаблПросрочки.оплаты = 0; // нет такой записи - значит ноль
		Иначе
			Если ТаблОплат[i].Дата=ТаблПросрочки[i].Дата тогда
				стрТаблПросрочки.оплаты = Окр(ТаблОплат[i].оплаты/Делитель, КолЦифр);
			иначе
				стрТаблПросрочки.оплаты = 0; // нет такой записи - значит ноль
				
				Дата1=ТаблПросрочки[i].Дата;
				Дата2=ТаблОплат[i].Дата; k=0;
				пока Дата1<Дата2 цикл
				//стр1 = ТаблОплат.Добавить();
				стр1 = ТаблОплат.Вставить(i+k);
				стр1.Дата = Дата1;
				стр1.оплаты = 0;
				Дата1 = Дата1 + 7*86400; //ДобавитьМесяц(Дата1,1);
				k=k+1;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;	
				
	КонецЦикла;
	
//1.--------------------------------------------------------------------------------------
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблПросрочки3);
	   
   Для каждого Колонка Из ИсточникДанных.Колонки Цикл
      Если Колонка.Имя="Дата" Тогда
    	  Колонка.Измерение = Истина;
	  ИначеЕсли Колонка.Имя="Долги" Тогда
			Колонка.Итог="СУММА(Долги)";
   //  Колонка.Измерение = Истина;
     ИначеЕсли Колонка.Имя = "Продажи" Тогда
   		Колонка.Итог="СУММА(Продажи)";
  //   Колонка.Измерение = Истина;
     ИначеЕсли Колонка.Имя = "Оплаты" Тогда
   		Колонка.Итог="СУММА(Оплаты)";
   //   Колонка.Измерение = Истина;
     КонецЕсли;
   КонецЦикла;
   //
    ПостроительОтчетаОтчет.ИсточникДанных = ИсточникДанных;
	//ПостроительОтчетаОтчет.ЗаполнитьНастройки();
    
//==========================================================================================		
	ПостроительОтчетаОтчет.Выполнить();
	
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,3,4,3).Текст = "Долги, "  +РубТекст;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,4,4,4).Текст = "Продажи, "+РубТекст;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,5,4,5).Текст = "Оплаты, " +РубТекст;
   	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,3,4,5).АвтоВысотаСтроки=истина;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,3,4,5).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,3, ЭлементыФормы.ПолеТабличногоДокумента.ВысотаТаблицы, ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы).ШиринаКолонки = 10;
	ЭлементыФормы.ПолеТабличногоДокумента.Область(4,2, ЭлементыФормы.ПолеТабличногоДокумента.ВысотаТаблицы, ЭлементыФормы.ПолеТабличногоДокумента.ШиринаТаблицы).Шрифт = новый Шрифт(,10);
	
	ЭлементыФормы.Диаграмма.Очистить();
	//ЭлементыФормы.Диаграмма.АвтоТранспонирование = истина;
//ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.Диаграмма);



//-------------рисуем линии-----------------------------------
ЭлементыФормы.Диаграмма.Обновление = ложь;

	ЭлементыФормы.Диаграмма.Серии.Добавить("Долги");
//	
	ЭлементыФормы.Диаграмма.Серии.Добавить("Продажи");
//	
	ЭлементыФормы.Диаграмма.Серии.Добавить("Оплаты");
    ЭлементыФормы.Диаграмма.Серии[2].Цвет = webЦвета.Зеленый; //зеленый, вместо светло-желтого
	
для i=0 по ТаблПросрочки3.Количество()-1 цикл
	ЭлементыФормы.Диаграмма.Точки.Добавить(Формат(ТаблПросрочки3[i].Дата,"ДФ='dd MMM'"));
КонецЦикла;

для i=0 по 2 цикл
	для j=0 по ТаблПросрочки3.Количество()-1 цикл
	//точки, серии, значения как индексы
    ЭлементыФормы.Диаграмма.УстановитьЗначение(j, i, ТаблПросрочки3[j][i+1] );
	КонецЦикла;
КонецЦикла;
ЭлементыФормы.Диаграмма.ОбластьЗаголовка.Текст = "Диаграмма, "+РубТекст;
ЭлементыФормы.Диаграмма.Обновление = истина;
  
КонецПроцедуры


Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Продажи.Период, МЕСЯЦ) КАК Дата,
	|	1000000 КАК Долги,
	|	2000000 КАК Оплаты,
	|	Продажи.Стоимость КАК Продажи
	|{ВЫБРАТЬ
	|	Дата,
	|	Долги,
	|	Оплаты,
	|	Продажи}
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Период МЕЖДУ &НачДата И &КонДата
	|	И Продажи.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|{УПОРЯДОЧИТЬ ПО
	|	Дата}
	|ИТОГИ ПО
	|	Дата,
	|	Долги,
	|	Оплаты,
	|	Продажи
	|{ИТОГИ ПО
	|	Дата,
	|	Долги,
	|	Оплаты,
	|	Продажи}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	//--------------------не надо ничего восстанавливать!---------------------------------
	//Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_bf26eff6-ac95-4c84-993d-0f5bdcc1ac9b");
	//Если Настройка <> Неопределено Тогда
	//	ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	//КонецЕсли;
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры



//1.========================идем в цикле по периоду=========================================
функция ПолучитьТаблицуПросрочки()

//Если отборДог тогда	
	Запрос0 = новый запрос;
	Запрос0.Текст = "ВЫБРАТЬ различные
	|	ВзаиморасчетыСКонтрагентамиДоговоры.ДоговорКонтрагента
	//|ПОМЕСТИТЬ ВТ_Договоры_Дебиторка
	|{ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиДоговоры.СуммаУпрОстаток}
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&КонДата, 
	//+++ только НЕ  с поставщиком +++
	|НЕ ДоговорКонтрагента.ВидДоговора = Значение(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	
	|//флМен   И ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
	|//флКонтр И ДоговорКонтрагента.Владелец = &Контрагент1
	|) КАК ВзаиморасчетыСКонтрагентамиДоговоры
	|ГДЕ
	|	ЕстьNull(ВзаиморасчетыСКонтрагентамиДоговоры.СуммаУпрОстаток,0) > 0
	|Упорядочить по 
	|ВзаиморасчетыСКонтрагентамиДоговоры.ДоговорКонтрагента.ОтветственноеЛицо,
	|ВзаиморасчетыСКонтрагентамиДоговоры.ДоговорКонтрагента.Владелец.Наименование,
	|ВзаиморасчетыСКонтрагентамиДоговоры.ДоговорКонтрагента.Наименование";
	
	Если ЗначениеЗаполнено(ОтветственноеЛицо) и флМен тогда
		Запрос0.Текст = стрЗаменить(Запрос0.Текст,"//флМен","");
		Запрос0.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);
		Если ТипЗнч(ОтветственноеЛицо)=Тип("СписокЗначений") тогда //Список!
		Запрос0.Текст = стрЗаменить(Запрос0.Текст,"ОтветственноеЛицо = &ОтветственноеЛицо","ОтветственноеЛицо В (&ОтветственноеЛицо)");
		КонецЕсли;
	КонецЕсли;
  	Если ЗначениеЗаполнено(Контрагент1) и флКонтр тогда
		Запрос0.Текст = стрЗаменить(Запрос0.Текст,"//флКонтр","");
		Запрос0.УстановитьПараметр("Контрагент1",Контрагент1);
	КонецЕсли;


запрос1 = новый запрос;
запрос1.Текст = "ВЫБРАТЬ
                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиДоговоры.СуммаУпрОстаток, 0) КАК СуммаПросрочки
                |ИЗ
                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки( &КонДата, 
                | ДоговорКонтрагента В (&СписокДоговоров)
				|//НеВсеДолги	И (Сделка.ДатаОплаты < &КонДата ИЛИ Сделка = НЕОПРЕДЕЛЕНО)
                |//флМен   		И ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
				|//флКонтр 		И ДоговорКонтрагента.Владелец = &Контрагент1
				|														 ) КАК ВзаиморасчетыСКонтрагентамиДоговоры
                |ИТОГИ
                |	СУММА(СуммаПросрочки)
                |ПО
                |	ОБЩИЕ";
				
Если НЕ ВсеДолги тогда// просроченная задолженность!
	запрос1.Текст = стрЗаменить(запрос1.Текст , "//НеВсеДолги","");
КонецЕсли;
//==============================================================================
таблЗнач = новый ТаблицаЗначений;
таблЗнач.Колонки.Добавить("Дата");
таблЗнач.Колонки.Добавить("Долги");

дата1 = НачДата;
СписокДоговоровПросрочки = новый СписокЗначений; 

неПоследнийДень = истина;
Пока дата1<=КонДата цикл   //==========================================================================
стр1 = таблЗнач.Добавить();
стр1.Дата = дата1;

запрос0.УстановитьПараметр("КонДата",дата1);
ТЗ1 = запрос0.Выполнить().Выгрузить();

списокДоговоров = новый СписокЗначений;
списокДоговоров.ЗагрузитьЗначения(ТЗ1.ВыгрузитьКолонку("ДоговорКонтрагента"));

Если НЕ ОтборДог тогда //+++ 24.11.2014 - все договора
	СписокДоговоровПросрочки.ЗагрузитьЗначения(ТЗ1.ВыгрузитьКолонку("ДоговорКонтрагента"));
ИНАЧЕЕсли ТаблицаДоговоров.Количество()>0 тогда
	СписокДоговоровПросрочки.ЗагрузитьЗначения(ТаблицаДоговоров.ВыгрузитьКолонку("Договор"));
ИначеЕсли ТаблицаДоговоров.Количество()=0 тогда
	СписокДоговоровПросрочки.ЗагрузитьЗначения(ТЗ1.ВыгрузитьКолонку("ДоговорКонтрагента"));
КонецЕсли;

запрос1.УстановитьПараметр("КонДата",дата1);
запрос1.УстановитьПараметр("списокДоговоров", СписокДоговоровПросрочки);
выборка1 = запрос1.Выполнить().Выбрать();
выборка1.Следующий();
стр1.Долги = выборка1.СуммаПросрочки;

Дата1 = Дата1+7*86400; //ДобавитьМесяц(Дата1, 1);
Если дата1>=КонДата и неПоследнийДень тогда
	Дата1 = КонДата;
	неПоследнийДень	= ложь;
КонецЕсли;

КонецЦикла;

возврат таблЗнач;
КонецФункции

функция ПолучитьТаблицуПродаж()
	
	Запрос = Новый Запрос;      
	//ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Продажи.Период, НЕДЕЛЯ), ДЕНЬ, 1) КАК Дата,
	               |	СУММА(Продажи.Стоимость) КАК Продажи
	               |ИЗ
	               |	РегистрНакопления.Продажи КАК Продажи
	               |ГДЕ
	               |	Продажи.Период МЕЖДУ &НачДата И &КонДата
				   |//ОтборДог 	И Продажи.ДоговорКонтрагента В (&СписокДоговоров)
	               |//флМен     И Продажи.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
				   |//флКонтр   И Продажи.ДоговорКонтрагента.Владелец = &Контрагент1
				   
				   |СГРУППИРОВАТЬ ПО
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Продажи.Период, НЕДЕЛЯ), ДЕНЬ, 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", НачалоДня(КонДата));
	
	Если ЗначениеЗаполнено(ОтветственноеЛицо) и флМен тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//флМен","");
		Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);
		
		Если ТипЗнч(ОтветственноеЛицо)=Тип("СписокЗначений") тогда //Список!
		Запрос.Текст = стрЗаменить(Запрос.Текст,"ОтветственноеЛицо = &ОтветственноеЛицо","ОтветственноеЛицо В (&ОтветственноеЛицо)");
		КонецЕсли;

	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент1) и флКонтр тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//флКонтр","");
		Запрос.УстановитьПараметр("Контрагент1",Контрагент1);
	КонецЕсли;
	
	Если ОтборДог тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//ОтборДог","");
		Запрос.УстановитьПараметр("СписокДоговоров",СписокДоговоровПросрочки);
	КонецЕсли;
 
	Результат = Запрос.Выполнить();
	ТаблЗнач = Результат.Выгрузить();
	
возврат ТаблЗнач;	
КонецФункции	

функция ПолучитьТаблицуОплат()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентами.Период, НЕДЕЛЯ), ДЕНЬ, 1) КАК Дата,
	               |	СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Оплаты
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &НачДата И &КонДата
	               |	И (ВзаиморасчетыСКонтрагентами.ВидДвижения = &ВидДвижения
				   |		или (ВзаиморасчетыСКонтрагентами.ВидДвижения = &Возврат и ВзаиморасчетыСКонтрагентами.СуммаУпр<0)
				   |	   )
				   //|	И (ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
				   //|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
				   //|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет)
	               |//флМен		И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
	               |//флКонтр	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Владелец = &Контрагент1
	               |//отборДог	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента В (&СписокДоговоров)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВзаиморасчетыСКонтрагентами.Период, НЕДЕЛЯ), ДЕНЬ, 1)
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |Дата
				   |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", НачалоДня(КонДата) );
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Возврат", ВидДвиженияНакопления.Приход);
	
	Если ЗначениеЗаполнено(ОтветственноеЛицо) и флМен тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//флМен","");
		Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);
		Если ТипЗнч(ОтветственноеЛицо)=Тип("СписокЗначений") тогда //Список!
		Запрос.Текст = стрЗаменить(Запрос.Текст,"ОтветственноеЛицо = &ОтветственноеЛицо","ОтветственноеЛицо В (&ОтветственноеЛицо)");
		КонецЕсли;
 	КонецЕсли;
  	Если ЗначениеЗаполнено(Контрагент1) и флКонтр тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//флКонтр","");
		Запрос.УстановитьПараметр("Контрагент1",Контрагент1);
	КонецЕсли;
	//Если отборДог тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"//отборДог","");
		Запрос.УстановитьПараметр("СписокДоговоров",СписокДоговоровПросрочки);
	//КонецЕсли;

	Результат = Запрос.Выполнить();
	ТаблЗнач = Результат.Выгрузить();
	
возврат ТаблЗнач;	
КонецФункции	

Процедура ОтветственноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	флМен = ложь;
КонецПроцедуры

Процедура Контрагент1Очистка(Элемент, СтандартнаяОбработка)
   флКонтр = ложь;
КонецПроцедуры

Процедура ОтветственноеЛицоПриИзменении(Элемент)
	флМен = ЗначениеЗаполнено(ОтветственноеЛицо);
КонецПроцедуры

Процедура Контрагент1ПриИзменении(Элемент)
	флКонтр = ЗначениеЗаполнено(Контрагент1);
КонецПроцедуры

Процедура НачДатаПриИзменении(Элемент)
	
	НачДата1 = ?(ДеньНедели(НачДата)=1, НачДата, НачДата - (ДеньНедели(НачДата) - 1)*86400 );
		
	Если НачДата1 <> НачДата тогда
	Предупреждение("Начало периода должно быть с понедельником!
	|Период будет автоматически изменен на "+Формат(НачДата1,"ДЛФ=DD"),30);
	НачДата = НачДата1;
	КонецЕсли;

КонецПроцедуры




СписокДоговоровПросрочки = новый СписокЗначений; 
