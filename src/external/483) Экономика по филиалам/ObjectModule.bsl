Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
   	СтандартнаяОбработка = Ложь;
	
	
	ТекстБонусы = ПолучитьБонусы(ложь).ТекстЗапросаБонусы;

	
	СКДНастроек = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ТекстЗапроса = СКДНастроек.НаборыДанных.НаборДанных2.Запрос;
	               
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(2017, 1, 1) КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	0 КАК Бонус
	|ПОМЕСТИТЬ втБонусы",
	ТекстБонусы);
	ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос = ТекстЗапроса;
	
	ТекстЗапроса = СКДНастроек.НаборыДанных.НаборДанных3.Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(2017, 1, 1) КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	0 КАК Бонус
	|ПОМЕСТИТЬ втБонусы",
	ТекстБонусы);
	ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Запрос = ТекстЗапроса;

	
	
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")  Тогда 
		
		ДоступноеПодразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение;
		ОтборПодразделение=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПодразделение.Использование=Истина;
		ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
		ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
		ОтборПодразделение.ПравоеЗначение=ДоступноеПодразделение;	
		
	Иначе
		
		Если СтрЧислоВхождений(ПараметрыСеанса.ТекущийПользователь.Наименование, "Лигута")> 0 Тогда 
			ДоступноеПодразделение = Справочники.Подразделения.НайтиПоКоду("00106"); // Ростов
			ОтборПодразделение=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПодразделение.Использование=Истина;
			ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
			ОтборПодразделение.ПравоеЗначение=ДоступноеПодразделение;	
		ИначеЕсли 	
			СтрЧислоВхождений(ПараметрыСеанса.ТекущийПользователь.Наименование, "Красюк")> 0 Тогда 
			ДоступноеПодразделение = Справочники.Подразделения.НайтиПоКоду("00112"); // Сп-Б
			ОтборПодразделение=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПодразделение.Использование=Истина;
			ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
			ОтборПодразделение.ПравоеЗначение=ДоступноеПодразделение;	
		ИначеЕсли 
			СтрЧислоВхождений(ПараметрыСеанса.ТекущийПользователь.Наименование, "Бармин")> 0 Тогда 
			ДоступноеПодразделение = Справочники.Подразделения.НайтиПоКоду("00138"); // Екат-Б
			ОтборПодразделение=КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПодразделение.Использование=Истина;
			ОтборПодразделение.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
			ОтборПодразделение.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Подразделение");
			ОтборПодразделение.ПравоеЗначение=ДоступноеПодразделение;			
			
			КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
			Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2); //Уровень 3
			//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1); //Уровень 2
			ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);   //Уровень 1
			
		КонецЕсли;		
	КонецЕсли;	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидТовара");
   	ПараметрСКД.Использование = Истина;
   	ПараметрСКД.Значение  = Перечисления.ВидыТоваров.Диски;
		
	КомпоновщикМакет = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакет.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, , ДанныеРасшифровки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2); //Уровень 3
	//ДокументРезультат.ПоказатьУровеньГруппировокСтрок(1); //Уровень 2
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0);   //Уровень 1

КонецПроцедуры