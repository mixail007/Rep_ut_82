Перем мТекущаяНастройка Экспорт;
Перем КоличествоФиксируемыхСтолбцов Экспорт; 
//перем ГлФорма экспорт;


// -------------- Экспортные процедуры и функции ------------------------------------------------------------

// Возвращает объект-копию текущего отчета с текущими настройками
Функция ПолучитьКопииюОтчета() Экспорт 
	Если Строка(ЭтотОбъект) = "ВнешнийОтчетОбъект." + ЭтотОбъект.Метаданные().Имя Тогда
		НовыйОтчет = ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла);
	Иначе
		НовыйОтчет = Отчеты[ЭтотОбъект.Метаданные().Имя].Создать();
	КонецЕсли;
	
	// Получим текущие настройки
	ТекущиеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// применим текущие настройки к новому отчету
	НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ТекущиеНастройки);
	
	Возврат НовыйОтчет;
КонецФункции // ПолучитьКопииюОтчета()

// Возвращает структуру настроек отчета включающую в себя имя основной формы отчета и настройки компоновщика данных
//
// Возвращаемое значение:
//   Структура   – Структура вида:
//		- НастройкиКомпоновщика	- НастройкиКомпоновкиДанных, текущие настройки компоновщика
//		- ИмяФормыОтчета - строка вида "Отчеты.<Имя>.ФормаОбъекта" или "ВнешнийОтчет.<Имя>.ФормаОбъекта"
//
Функция ПолучитьСтруктуруНастроекОтчета() Экспорт 
	
	Возврат Новый Структура("НастройкиКомпоновщика, ИмяФормыОтчета" , ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки(), ПолучитьИмяФормыОтчета());
	
КонецФункции // ПолучитьСтруктуруНастроекОтчета()

// Возвращает имя основной формы отчета для открытия с помощью метода "ОткрытьФорму"
// в виде:
// "Отчеты.<Имя>.ФормаОбъекта"
// или 
// "ВнешнийОтчет.<Имя>.ФормаОбъекта"
// 
// Возвращаемое значение:
//   Строка   – Имя основной формы отчета
//
Функция ПолучитьИмяФормыОтчета() Экспорт  
	Если Строка(ЭтотОбъект) = "ВнешнийОтчетОбъект." + ЭтотОбъект.Метаданные().Имя Тогда
		Возврат "ВнешнийОтчет." + ЭтотОбъект.Метаданные().Имя + ".ФормаОбъекта";
	Иначе
		Возврат "Отчеты." + ЭтотОбъект.Метаданные().Имя + ".ФормаОбъекта";
	КонецЕсли;
КонецФункции // ПолучитьИмяФормыОтчета()

// ----------------------------------------------------------------------------------------------------------


// -------------- Процедуры и функции предназначеные для модификации под конкретную реализацию --------------

 // В данной процедуре можно программно устанавливать настройки компоновщика настроек отчета
// процедура вызывается каждый раз при построении отчета
Процедура УстановитьПараметрыОтчета()
	// тут можно программно устанавливать параметры отчета
	
	// например передать текущую дату в запрос СКД
	
	//НайденныйПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));
	//НайденныйПараметр.Использование = Истина;
	//НайденныйПараметр.Значение = ТекущаяДата();
	
КонецПроцедуры // УстановитьПараметрыОтчета()

// В данной процедуре можно выполнять дополнительную программную обработку результата отчета
Процедура ДополнительнаяОбработкаРезультатаОтчета(ТабличныйДокумент)
	// Тут можно издеваться над табличным документом - результатом отчета.
	

КонецПроцедуры // ДополнительнаяОбработкаРезультатаОтчета()

// Формирует и выводит область "Заголовок" макета "МакетЗаголовкаОтчета" в переданный табличный документ
Процедура ПрисоединитьЗаголовокОтчетаКТабличномуДокументу(ТабличныйДокумент, ТекстЗаголовка)
	
	// получим макет заголовка отчета
	МакетЗаголовка = ПолучитьМакет("МакетЗаголовкаОтчета");
	ОбластьЗаголовка = МакетЗаголовка.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.Сформирован = "Сформирован: " + ТекущаяДата();
	ОбластьЗаголовка.Параметры.Заголовок = ТекстЗаголовка;
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);

КонецПроцедуры // ПрисоединитьЗаголовокОтчетаКТабличномуДокументу(ТабличныйДокумент, ТекстЗаголовка)

// В данной функции можно сформировать таблицу внешнего набора данных для СКД
//
// Функция должна возвращать таблицу данных (например таблицу значений)
//
Функция ПолучитьТаблицуВнешнегоНабораДанных()

	Возврат Новый ТаблицаЗначений;

КонецФункции // ПолучитьТаблицуВнешнегоНабораДанных()

// Функция устанавливает настройки отчета для экзэмпляров отчета открываемых по расшифровке,
// отбору, упорядочиванию, группировке или условному оформлению
//
// Возвращает структуру со значениями дополнительных свойств до изменения
//
Функция УстановитьДополнительныеНастройкиДляРасшифровки()
	
	ДоИзменения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.ДополнительныеСвойства Цикл
		ДоИзменения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// настройка видимости параметров
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПараметрыРазвернуты", Ложь);

	// настройка видимости отбора
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборРазвернут", Ложь);
	
	// настройка видимости заголовка в отчете
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВидимостьЗаголовкаОтчета", Истина);

	// настройка видимости параметров в отчете
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВидимостьПараметровОтчета", Истина);
	
	Возврат ДоИзменения;
	
КонецФункции // УстановитьДополнительныеНастройкиДляРасшифровки()

// ----------------------------------------------------------------------------------------------------------


// -------------- Обработчики событий отчета ----------------------------------------------------------------
 
// Перехватываем событие вывода компоновки данных в табличный документ и выводим со своим заголовком
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПарамНоменклатура();
	СформироватьОтчет(ДокументРезультат, ДанныеРасшифровки);
КонецПроцедуры

// ----------------------------------------------------------------------------------------------------------


// --------------- Поддержка вывода своего заголовка отчета -------------------------------------------------

// Функция получает текст заголовка отчета из настроек СКД
//
// Возвращаемое значение:
//   Строка   – заголовок отчета из настроек СКД
//
Функция ПолучитьТекстЗаголовкаОтчета() Экспорт
	ЗаголовокОтчета = "";
	НайденнаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	
	Если НайденнаяНастройка.Использование Тогда
		ЗаголовокОтчета = НайденнаяНастройка.Значение;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;

КонецФункции // ПолучитьТекстЗаголовкаОтчета()

// Функция опредеделяет необходимость вывода заголовка отчета.
// необходимость вывода заголовка отчета определяется типовыми настройками СКД
// 
// Возвращаемое значение:
//   Булево   – Истина - выводить заголовок.
//
Функция ВыводитьЗаголовокОтчета()
	
	ЗаголовокОтчета = ПолучитьТекстЗаголовкаОтчета();
	
	НайденнаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	
	Если НайденнаяНастройка.Использование Тогда
		Выводить = НайденнаяНастройка.Значение;
	Иначе
		Выводить = ТипВыводаТекстаКомпоновкиДанных.Авто;
	КонецЕсли;
	
	
	Если Выводить = ТипВыводаТекстаКомпоновкиДанных.Выводить Тогда
		Возврат Истина;
	ИначеЕсли Выводить = ТипВыводаТекстаКомпоновкиДанных.НеВыводить Тогда
		Возврат Ложь;
	ИначеЕсли (Выводить = ТипВыводаТекстаКомпоновкиДанных.Авто) И (ЗаголовокОтчета = "") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВыводитьЗаголовокОтчета()

// Функция находит и возвращает область с параметрами компоновки данных в результирующем табличном документе
// Если область не найдена - возвращается Неопределено
Функция НайтиОбластьПараметровТабличногоДокумента(ТабличныйДокумент)
	НайденнаяОбласть = Неопределено;
	ТекстПараметров = "Параметры";
	Для  А=1  по ТабличныйДокумент.ФиксацияСверху Цикл
		Область = ТабличныйДокумент.Область(А,1);
		Если Найти(Область.Текст, ТекстПараметров) <> 0 Тогда
			Область.Шрифт =Новый Шрифт(Область.Шрифт,,9,Ложь); 
			Область = ТабличныйДокумент.Область(А,2, А+1,2);
			Область.Шрифт =Новый Шрифт(Область.Шрифт,,9,Ложь); 
			
			НайденнаяОбласть = ТабличныйДокумент.Область( Макс(А-1,1),,А+1,);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяОбласть;
КонецФункции // НайтиОбластьПараметровТабличногоДокумента()

// Функция находит и возвращает область с отбором компоновки данных в результирующем табличном документе
// Если область не найдена - возвращается Неопределено
Функция НайтиОбластьОтбораТабличногоДокумента(ТабличныйДокумент)
	НайденнаяОбласть = Неопределено;
	ТекстПараметров = "Отбор";
	Для  А=1  по ТабличныйДокумент.ФиксацияСверху Цикл
		Область = ТабличныйДокумент.Область(А,1);
		Если Найти(Область.Текст, ТекстПараметров) <> 0 Тогда
			Область.Шрифт =Новый Шрифт(Область.Шрифт,,9,Ложь); 
			Область = ТабличныйДокумент.Область(А,2, А+1,2);
			Область.Шрифт =Новый Шрифт(Область.Шрифт,,9,Ложь); 
			
			НайденнаяОбласть = ТабличныйДокумент.Область( Макс(А-1,1),,А+1,);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НайденнаяОбласть;
КонецФункции // НайтиОбластьПараметровТабличногоДокумента()

// Устанавливает видимость заголовка отчета в результирующем табличном документе
Процедура УстановитьВидимостьЗаголовкаОтчета(ТабличныйДокумент) Экспорт 
	// получим область заголовка отчета
	ОбластьЗаголовка = ТабличныйДокумент.Области.Найти("Заголовок");
	Если ТипЗнч(ОбластьЗаголовка) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ОбластьЗаголовка.Видимость = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВидимостьЗаголовкаОтчета;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьЗаголовкаОтчета()

// Устанавливает видимость параметров и отбора компоновки данных в результирующем табличном документе
Процедура УстановитьВидимостьПараметровОтчета(ТабличныйДокумент) Экспорт 
	// получим область параметров
	ОбластьПараметров = НайтиОбластьПараметровТабличногоДокумента(ТабличныйДокумент);
	Если ТипЗнч(ОбластьПараметров) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ОбластьПараметров.Видимость = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВидимостьПараметровОтчета;
		//ОбластьПараметров.Шрифт =Новый Шрифт(ОбластьПараметров.Шрифт,,9,Ложь); 
	КонецЕсли;
	// получим область отбора
	ОбластьПараметров = НайтиОбластьОтбораТабличногоДокумента(ТабличныйДокумент);
	Если ТипЗнч(ОбластьПараметров) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ОбластьПараметров.Видимость = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВидимостьПараметровОтчета;
		//ОбластьПараметров.Шрифт =Новый Шрифт(ОбластьПараметров.Шрифт,,9,Ложь); 
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьПараметровОтчета()

// Процедура сохраняет настройки вывода заголовка
// в дополнительные свойства компоновщика настроек
//
Процедура СохранитьНастройкиВыводаЗаголовка()
	НайденнаяНастройкаВыводаЗаголовка = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокИспользование") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовокИспользование", НайденнаяНастройкаВыводаЗаголовка.Использование);
	КонецЕсли;
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокЗначение") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовокЗначение", НайденнаяНастройкаВыводаЗаголовка.Значение);
	КонецЕсли;
КонецПроцедуры // ВосстановитьНастройкиПоказаЗаголовка()

// Процедура восстанавливает настройки вывода заголовка
// сохраненные в дополнительных свойствах компоновщика настроек
// если таковые есть.
//
Процедура ВосстановитьНастройкиВыводаЗаголовка()
	НайденнаяНастройкаВыводаЗаголовка = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокИспользование") Тогда
		НайденнаяНастройкаВыводаЗаголовка.Использование = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовокИспользование;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокЗначение") Тогда
		НайденнаяНастройкаВыводаЗаголовка.Значение = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовокЗначение;
	КонецЕсли;
КонецПроцедуры // ВосстановитьНастройкиПоказаЗаголовка()

// Процедура удаляет настройки вывода заголовка
// сохраненные в дополнительных свойствах компоновщика настроек
// если таковые есть.
//
Процедура ОчиститьСохраненныеНастройкиВыводаЗаголовка()
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокИспользование") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Удалить("ВыводитьЗаголовокИспользование");
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовокЗначение") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Удалить("ВыводитьЗаголовокЗначение");
	КонецЕсли;
КонецПроцедуры // ОчиститьСохраненныеНастройкиВыводаЗаголовка()

// ----------------------------------------------------------------------------------------------------------

//+ ЧИА Чайкин И.А. 2014.04.07

//	Возвращает имя макета шапки отчета
//
Функция ПолучитьМакетШапки(ТелоМакетаКомпоновки)

	КоличествоЭлементовТела = ТелоМакетаКомпоновки.Количество();
	Для ИндексЭлемента = 0 по КоличествоЭлементовТела - 1 Цикл
		
		ЭлементТела = ТелоМакетаКомпоновки[ИндексЭлемента];
		Если ТипЗнч(ЭлементТела) = Тип("ТаблицаМакетаКомпоновкиДанных")
			И Не ПустаяСтрока(ЭлементТела.МакетШапки) Тогда
			
			Возврат ЭлементТела.МакетШапки;
			
		ИначеЕсли ТипЗнч(ЭлементТела) = Тип("ГруппировкаМакетаКомпоновкиДанных") И ИндексЭлемента > 0
			И ТипЗнч(ТелоМакетаКомпоновки[ИндексЭлемента - 1]) = Тип("МакетОбластиМакетаКомпоновкиДанных") 
			И Не ПустаяСтрока(ТелоМакетаКомпоновки[ИндексЭлемента - 1].Макет) Тогда
			
			Возврат ТелоМакетаКомпоновки[ИндексЭлемента - 1].Макет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//	Вызывается в обработчике "ПередВыводомМакета"
//
Процедура НачатьПоискОбластиШапкиОтчета(МакетКомпоновки, ПараметрыОтчета)

	ПараметрыОтчета.Вставить("МакетШапки", ПолучитьМакетШапки(МакетКомпоновки.Тело));
	
КонецПроцедуры

//	Вызывается в обработчике "ПередВыводомЭлементаМакета"
//
Процедура НайтиОбластьШапкиОтчета(Результат, ЭлементВывода, ПараметрыОтчета)
	
	Если Не ПараметрыОтчета.Свойство("ОбластьШапкиОтчета") Тогда
		Если ПустаяСтрока(ПараметрыОтчета.МакетШапки) Тогда
			ПараметрыОтчета.Вставить("ОбластьШапкиОтчета");
		ИначеЕсли Не ПараметрыОтчета.Свойство("НомерСтрокиШапкиНачало") И ЭлементВывода.Макет = ПараметрыОтчета.МакетШапки Тогда
			ПараметрыОтчета.Вставить("НомерСтрокиШапкиНачало", Результат.ВысотаТаблицы + 1);
		ИначеЕсли ПараметрыОтчета.Свойство("НомерСтрокиШапкиНачало") Тогда
			ПараметрыОтчета.Вставить("НомерСтрокиШапкиКонец", Результат.ВысотаТаблицы);
			ПараметрыОтчета.Вставить("ОбластьШапкиОтчета", Результат.Область(ПараметрыОтчета.НомерСтрокиШапкиНачало, , ПараметрыОтчета.НомерСтрокиШапкиКонец));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////////////////
//	ОБРАБОТЧИКИ СОБЫТИЙ ВЫВОДА ОТЧЕТА


Процедура ПередВыводомМакета(Результат, МакетКомпоновки, Параметры)
	
	НачатьПоискОбластиШапкиОтчета(МакетКомпоновки, Параметры);
	
КонецПроцедуры

Процедура ПередВыводомЭлементаМакета(Результат, МакетКомпоновки, ЭлементВывода, Параметры, Отказ)
	
	НайтиОбластьШапкиОтчета(Результат, ЭлементВывода, Параметры);
	
КонецПроцедуры

Процедура Отрисовать(СхемаКомпоновкиДанных, КомпоновщикНастроек, ВнешнийНабор, Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = истина)
	
	//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НайденныйПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	НайденныйПараметр.Использование = Истина;
	НайденныйПараметр.Значение = НачалоДня(НачПериода);
	
	НайденныйПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	НайденныйПараметр.Использование = Истина;
	НайденныйПараметр.Значение = КонецДня(КонПериода);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНабор, ДанныеРасшифровки);
	
	//Результат = ЭлементыФормы.Результат;
	//Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.НачатьВывод();
	
	Параметры = Новый Структура;
	
	//	Обработчик "Перед выводом макета"
	ПередВыводомМакета(Результат, МакетКомпоновки, Параметры);

	Пока Истина Цикл
		
		ЭлементВывода = ПроцессорКомпоновки.Следующий();
		Если ЭлементВывода = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Отказ = Ложь;
		
		//	Обработчик "Перед выводом элемента макета"
		ПередВыводомЭлементаМакета(Результат, МакетКомпоновки, ЭлементВывода, Параметры, Отказ);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементВывода);
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();	
	
	Результат.ВерхнийКолонтитул.Выводить = Истина;
	Результат.ВерхнийКолонтитул.НачальнаяСтраница = 2;
	Результат.ВерхнийКолонтитул.Шрифт = Новый Шрифт(Результат.ВерхнийКолонтитул.Шрифт, , , , Истина);
	Результат.ВерхнийКолонтитул.ТекстСлева = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение;;
	//Результат.ВерхнийКолонтитул.ТекстВЦентре = "Стр. [&НомерСтраницы] из [&СтраницВсего]";
	Результат.ВерхнийКолонтитул.ТекстСправа = "Дата/время печати: [&Дата]/[&Время]";
	
	Результат.НижнийКолонтитул.Выводить = Истина;
	Результат.НижнийКолонтитул.Шрифт = Новый Шрифт(Результат.ВерхнийКолонтитул.Шрифт, , , , Истина);
	//Результат.НижнийКолонтитул.ТекстВЦентре = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение;
	Результат.НижнийКолонтитул.ТекстВЦентре = "Стр. [&НомерСтраницы] из [&СтраницВсего]";
	
	Результат.ПовторятьПриПечатиСтроки = Параметры.ОбластьШапкиОтчета;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.АвтоМасштаб = Истина;
	
КонецПроцедуры

//- ЧИА Чайкин И.А. 2014.04.07




// --------------- Процедуры формирования отчета ------------------------------------------------------------

// Процедура выполняет формирование табличного документа по настройкам СКД
Процедура СформироватьОтчет(ТабличныйДокумент, ДанныеРасшифровки) 
	
	// если отчет открывается по расшифровке, отбору, упорядочиванию, 
	// группировке или условному оформлению - восстановим настройки вывода заголовка,
	// т.к., в переданных настройках при этом, вывод заголовка отключен
	// для того, чтобы не выводился встроенный заголовок компоновки.                                                                         
	ВосстановитьНастройкиВыводаЗаголовка();
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ТабличныйДокумент.Очистить();
	
	// установим обязательные настройки отчета
	УстановитьПараметрыОтчета();
	
	// Сделаем копию настроек вывода заголовка
	СохранитьНастройкиВыводаЗаголовка();
	
	ВыводитьЗаголовок = ВыводитьЗаголовокОтчета();
	Если ВыводитьЗаголовок Тогда
		ПрисоединитьЗаголовокОтчетаКТабличномуДокументу(ТабличныйДокумент, ПолучитьТекстЗаголовкаОтчета());
		
		// Отключим в настройках вывод встроенного заголовка
		НайденнаяНастройкаВыводаЗаголовка = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок");
		НайденнаяНастройкаВыводаЗаголовка.Значение		= ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		НайденнаяНастройкаВыводаЗаголовка.Использование	= Истина;
	КонецЕсли;
	
	КопияДополнительныхНастроек = УстановитьДополнительныеНастройкиДляРасшифровки();
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	// при необходимости вставим внешние наборы данных в СКД
	ВнешниеНаборыДанных = Новый Структура;
	
	ТаблицаВнешнегоНабораДанных = ПолучитьТаблицуВнешнегоНабораДанных();
	ВнешниеНаборыДанных.Вставить("ТаблицаВнешнегоНабораДанных",ТаблицаВнешнегоНабораДанных);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных,ДанныеРасшифровки);
	
	//ВывестиРезультатКомпоновкиСАвтофиксациейСтрок(ТабличныйДокумент, ПроцессорКомпоновкиДанных, ДанныеРасшифровки.Элементы,,,КоличествоФиксируемыхСтолбцов);
	
	Отрисовать(СхемаКомпоновкиДанных, КомпоновщикНастроек, , ТабличныйДокумент, ДанныеРасшифровки, Истина );
	

	ДополнительнаяОбработкаРезультатаОтчета(ТабличныйДокумент);
	
	Если ВыводитьЗаголовок Тогда
		// вернем настройки вывода заголовка на место		
		ВосстановитьНастройкиВыводаЗаголовка();
	КонецЕсли;
	
	// восстановим дополнительные настройки
	Для Каждого ЭлементСтруктуры Из КопияДополнительныхНастроек Цикл
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// сохраненные настройки нужны только при расшифровке и т.п.
	// и не будуть давать изменить вывоз заголовка при обычном формировании.
	ОчиститьСохраненныеНастройкиВыводаЗаголовка();

	Если ВыводитьЗаголовок Тогда
		ТекЗаголовок = ПолучитьТекстЗаголовкаОтчета();
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(ТекЗаголовок);
		Если ЗначениеЗаполнено(НайденнаяОбласть) Тогда
			НайденнаяОбласть.Шрифт =Новый Шрифт(НайденнаяОбласть.Шрифт,,13); 
		КонецЕсли;
	КонецЕсли;
	
	
	УстановитьВидимостьЗаголовкаОтчета(ТабличныйДокумент);
	УстановитьВидимостьПараметровОтчета(ТабличныйДокумент);
	
КонецПроцедуры // СформироватьОтчет()

// Выводит результат СКД с установкой вертикальной и горизонтальной автофиксации.
// горизонтальна автофиксация устанавливается по шапке таблицы
// Параметры:
// ТабличныйДокумент - ТабличныеДокумент, ПолеТабличногоДокумента - куда выводим отчет;
// ПроцессорКомпоновкиДанных - ПроцессорКомпоновкиДанных;
// ЭлементыРасшировки - ЭлементыРасшифровкиКомпоновкиДанных;
// МассивИгнорируемыхПолей - Массив, массив имен игнорируемых полей;
// РазрешитьПрерывание - Булево, разрешить прерывание отчета пользователем.
// КоличествоСтолбцовВертикальнойАвтофиксации - Число, количество столбцов вертикальной автофиксации.
//
Процедура ВывестиРезультатКомпоновкиСАвтофиксациейСтрок(ТабличныйДокумент, ПроцессорКомпоновкиДанных, ЭлементыРасшировки,
															Знач МассивИгнорируемыхПолей = Неопределено, РазрешитьПрерывание = Истина,
															КоличествоСтолбцовВертикальнойАвтофиксации = 0) 
 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.НачатьВывод();
	ФиксацияВыполнена = Ложь;
	Если МассивИгнорируемыхПолей = Неопределено Тогда
		
		МассивИгнорируемыхПолей = Новый Массив;
		
	КонецЕсли; 
	
	Пока Истина Цикл
		
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;

		// Автофиксация
		Если Не ФиксацияВыполнена Тогда
			
			Для Каждого ЗначениеПараметра Из ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров Цикл
				
				Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					
					ЗначенияПолейРасшифровки = ЭлементыРасшировки[ЗначениеПараметра.Значение].ПолучитьПоля();
					
					Для Каждого ЗначениеПоляРасшифровки Из ЗначенияПолейРасшифровки Цикл
						
						Если МассивИгнорируемыхПолей.Найти(ЗначениеПоляРасшифровки.Поле) = Неопределено Тогда
							
							ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ВысотаТаблицы;
							ТабличныйДокумент.ФиксацияСлева = КоличествоСтолбцовВертикальнойАвтофиксации;

							ФиксацияВыполнена = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ФиксацияВыполнена Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
		
		#Если Клиент Тогда 
		Если РазрешитьПрерывание Тогда
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
 
КонецПроцедуры // ВывестиРезультатКомпоновкиСАвтофиксациейСтрок


// ----------------------------------------------------------------------------------------------------------


// --------------- Работа с настройками отчета --------------------------------------------------------------

Процедура ИнициализироватьДополнительныеНастройкиОтчета() Экспорт 
	// настройка видимости параметров
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ПараметрыРазвернуты") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПараметрыРазвернуты", Ложь);
	КонецЕсли;

	// настройка видимости отбора
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ОтборРазвернут") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтборРазвернут", Ложь);
	КонецЕсли;
	
	// настройка видимости заголовка в отчете
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВидимостьЗаголовкаОтчета") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВидимостьЗаголовкаОтчета", Ложь);
	КонецЕсли;

	// настройка видимости параметров в отчете
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВидимостьПараметровОтчета") Тогда
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВидимостьПараметровОтчета", Ложь);
	КонецЕсли;

КонецПроцедуры // ИнициализироватьДополнительныеНастройкиОтчета()

// ----------------------------------------------------------------------------------------------------------

Процедура ЗаполнитьПарамНоменклатура() Экспорт
	
	//СпНоменклатура = Товары.ВыгрузитьКолонку("Номенклатура");
	//УстановитьПарамСКД("спТовары", СпНоменклатура);
	МасНоменклатура = спТовары.ВыгрузитьЗначения();
	УстановитьПарамСКД("спТовары", МасНоменклатура);
	
КонецПроцедуры // ЗаполнитьПарамНоменклатура()

Процедура УстановитьПарамСКД(ПарамИмя, ПарамЗначение) Экспорт
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ПарамИмя);
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ПарамЗначение;
	
КонецПроцедуры // УстановитьПарамСКД()


// для варианта при котором отсутствуют сохраненные настройки 
ИнициализироватьДополнительныеНастройкиОтчета();

// Данной  переменной можно регулировать количество столбцов автофиксации в результате отчета.
КоличествоФиксируемыхСтолбцов = 0;

//ГлФорма = Неопределено;
