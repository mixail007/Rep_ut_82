Перем мПлатежныеОперации Экспорт;
Перем мОрганизация Экспорт;
Перем ОбязательныеСвойстваПриЭкспорте Экспорт;
Перем ЗагрВидыДокументов;
Перем ЗагрРасчетныеСчета;
Перем ОбязательныеВрегЗАГРУЗКИ;
Перем ВидыОпераций;
Перем ПустаяДата;
Перем СписокЖурналов;
Перем СтруктураРеквизитов;	// Реквизиты загружаемого документа
Перем мВалютаРегламентированногоУчета;
Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике

// Структуры хранения настроечных данных при экспорте
Перем Экспорт_Выгружаемые;
Перем Экспорт_НеПустые;

// Структуры обработки текста при импорте
Перем Импорт_КоличествоСтрок;
Перем Импорт_ТекущаяСтрока;
Перем Импорт_ТекстДляРазбора;

// Структуры хранения данных при импорте
Перем Импорт_РассчетныеСчета Экспорт;
Перем Импорт_ВидыДокументов;
Перем Импорт_Заголовок;

// Структуры хранения настроечных данных при импорте
Перем Импорт_Загружаемые;
Перем Импорт_Распознаваемые;
Перем ТегиЗаголовка;
Перем ТегиРасчетногоСчета;
Перем Импорт_НеПустые;
Перем Импорт_ПризнакОбмена;

// Строки с группами реквизитов платежных документов через запятую
Перем РеквизитыПлДок_Основные;
Перем РеквизитыПлДок_ВидПлатежаОплаты;
Перем РеквизитыПлДок_Квитанция;
Перем РеквизитыПлДок_Списано;
Перем РеквизитыПлДок_Поступило;
Перем РеквизитыПлДок_Плательщик;
Перем РеквизитыПлДок_ПлательщикНПР;
Перем РеквизитыПлДок_ПлательщикНПРНеОбязательные;
Перем РеквизитыПлДок_Получатель;
Перем РеквизитыПлДок_ПолучательНПР;
Перем РеквизитыПлДок_ПолучательНПРНеОбязательные;
Перем РеквизитыПлДок_БюджетПлатеж;
Перем РеквизитыПлДок_Назначение;
Перем РеквизитыПлДок_НазначениеНеОбязательные;
Перем РеквизитыПлДок_Акредитив;
Перем РеквизитыПлДок_УсловияОпл;
Перем РеквизитыПлДок_Дополнительные;

//Информация
Перем ОбщаяСуммаЭкспорт Экспорт;
Перем СуммаКЭкспорту Экспорт;
Перем ОбщаяСуммаИмпорт Экспорт;
Перем СуммаКИмпорту Экспорт;


#Если Клиент Тогда

//Печать отчета
//
Процедура Печать(ПолеОтчета, Источник, ИмяКолонкиПометки) Экспорт
	
	МакетОтчета = ПолучитьМакет("Отчет");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс=0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		Если СтрокаИсточника[ИмяКолонкиПометки] Тогда
			
			Док = СтрокаИсточника.Документ;
			ВидДокумента = Док.Метаданные().Имя;
			Индекс = Индекс+1;
			
			Строка.Параметры.Плательщик     = СтрокаИсточника.Плательщик1;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ПлательщикСчет;
			Строка.Параметры.Получатель     = СтрокаИсточника.Получатель1;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ПолучательСчет;
			
			Строка.Параметры.Сумма          = СтрокаИсточника.Сумма;
			Строка.Параметры.Документ       = Док;
			Строка.Параметры.Индекс         = Индекс;
			
			ПолеОтчета.Вывести(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	
КонецПроцедуры	

//вызываем форму для просмотра тех, кого не нашли
Процедура ПросмотрКонтрагентов(ТипПросмотра) Экспорт	
	
	ФормаКонтрагентов =ПолучитьФорму("ФормаКонтрагентов");
	
	Если (ТипПросмотра = 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Закрыть();
	ИначеЕсли (ТипПросмотра > 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Обновить();
	ИначеЕсли (ТипПросмотра > 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		ФормаКонтрагентов.Открыть();
	ИначеЕсли (ТипПросмотра = 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		Сообщить("Все контрагенты существуют в справочнике.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры //ПросмотрКонтрагентов();

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ТаблицаКонтрагентов = Неопределено, ТекОрганизация, ОткрыватьФорму=Истина) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ

	ВыбраныйКонтрагент = СтрокаКонтрагент;
	ИскомыйКонтрагент  = Неопределено;
	НовыйКонтрагент    = Неопределено;

	Если ТаблицаКонтрагентов = Неопределено Тогда

		Для Каждого Элемент Из СписокКонтрагентов Цикл

			ТипКонтрагента = Элемент.Значение["ТИПКОНТРАГЕНТА"];
			Нашли          = Элемент.Значение.Свойство(ТипКонтрагента+"1", ИскомыйКонтрагент);

			Если Строка(ВРег(СокрЛП(ИскомыйКонтрагент))) = Строка(ВРег(СокрЛП(ВыбраныйКонтрагент))) Тогда
				НовыйКонтрагент    = Элемент;
				Индекс        = СписокКонтрагентов.Индекс(Элемент);
				ПрямыеРасчеты = НЕ(НовыйКонтрагент.Значение.Свойство(ТипКонтрагента+"2"));
				Прервать;

			КонецЕсли;

		КонецЦикла;

	Иначе
		//СОЗДАТЬ КОНТРАГЕНТА ИЗ ТАБЛИЦЫ ЗНАЧЕНИЙ
		СтрНовыйКонтрагент =Новый Структура();
		Для Каждого Элемент Из ТаблицаКонтрагентов Цикл
			ТипКонтрагента =Элемент["ТипКонтрагента"];
			СтрНовыйКонтрагент.Вставить(Элемент["Реквизит"], Элемент["Значение"]);
		КонецЦикла;

		НовыйКонтрагент    = Новый СписокЗначений();
		НовыйКонтрагент.Добавить(СтрНовыйКонтрагент);
		НовыйКонтрагент    = НовыйКонтрагент.НайтиПоЗначению(СтрНовыйКонтрагент);
		ПрямыеРасчеты = НЕ(НовыйКонтрагент.Значение.Свойство(ТипКонтрагента+"2"));

	КонецЕсли;
	
	ДанныеКонтрагента=НовыйКонтрагент.Значение;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"ИНН") Тогда
		ИННКраткий=ДанныеКонтрагента[ТипКонтрагента+"ИНН"];
	Иначе
		ИННКраткий = "";
	КонецЕсли;
	
	Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КПП") Тогда
		КПП=ДанныеКонтрагента[ТипКонтрагента+"КПП"];
	Иначе
		КПП = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КПП) Тогда
		Контрагент       =НайтиКонтрагентаПоИННиКПП("Контрагенты",ИННКраткий,КПП);
	Иначе	
		Контрагент       =НайтиКонтрагентаПоИНН("Контрагенты",ИННКраткий);
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда

		//эти элементы есть у всех справочников
		НовыйЭлемент =Справочники.Контрагенты.СоздатьЭлемент();
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"1") Тогда	
			НовыйЭлемент.Наименование =ДанныеКонтрагента[ТипКонтрагента+"1"];
			НовыйЭлемент.НаименованиеПолное=НовыйЭлемент.Наименование;
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"ИНН") Тогда	
			НовыйЭлемент.ИНН =ДанныеКонтрагента[ТипКонтрагента+"ИНН"];
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КПП") Тогда	
			НовыйЭлемент.КПП =ДанныеКонтрагента[ТипКонтрагента+"КПП"];
		КонецЕсли;
		
		
		НовыйЭлемент.Записать();
		
		НомерСчета      = ДанныеКонтрагента[ТипКонтрагента+"СЧЕТ"];
		КодВалюты=Сред(НомерСчета,6,3);
		ВалютаСчета=Справочники.Валюты.НайтиПоКоду(КодВалюты);

		Если НЕ ВалютаСчета=Справочники.Валюты.ПустаяСсылка() Тогда // Знаем валюту счета и можем создать элемент.
		
		НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйСчет.Наименование    = "Основной расчетный счет";
		НовыйСчет.НомерСчета      = НомерСчета;
		НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
		НовыйСчет.ВидСчета        = "Расчетный";
		НовыйСчет.ВалютаДенежныхСредств = ВалютаСчета;
			
		Если НЕ ПрямыеРасчеты Тогда
			
			Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БАНК1") Тогда					
				
				НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
				НовыйБанкКорр.Наименование = ДанныеКонтрагента[ТипКонтрагента+"БАНК1"];
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"БАНК2") Тогда	
					НовыйБанкКорр.Город        = ДанныеКонтрагента[ТипКонтрагента+"БАНК2"];
				КонецЕсли;
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"КОРСЧЕТ") Тогда	
					НовыйБанкКорр.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"КОРСЧЕТ"];
				КонецЕсли;
				
				НовыйБанкКорр.Записать();
				НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
			
			КонецЕсли;

			Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"3") Тогда
				
				НовыйБанк = Справочники.Банки.СоздатьЭлемент();
				НовыйБанк.Наименование = ДанныеКонтрагента[ТипКонтрагента+"3"];
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"4") Тогда	
					НовыйБанкКорр.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"4"];
				КонецЕсли;
				
				Если ДанныеКонтрагента.Свойство(ТипКонтрагента+"РАСЧСЧЕТ") Тогда	
					НовыйБанк.КоррСчет     = ДанныеКонтрагента[ТипКонтрагента+"РАСЧСЧЕТ"];
				КонецЕсли;
						
				НовыйБанк.Записать();
				
				НовыйСчет.Банк            = НовыйБанк.Ссылка;
								
			КонецЕсли;

		КонецЕсли;
		
		НовыйСчет.Записать();
		НовыйЭлемент.ОсновнойБанковскийСчет =НовыйСчет.Ссылка;
		
		КонецЕсли;
				
		//Договор контрагента
		
		Если НовыйЭлемент.Метаданные().Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда
			НовыйЭлемент.ОсновнойДоговорКонтрагента =СоздатьНужныйДоговор(НовыйЭлемент.Ссылка, ТекОрганизация,ТипКонтрагента="ПЛАТЕЛЬЩИК");
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент=НовыйЭлемент.Ссылка;
		
		НовыйЭлемент.Записать();		
		Сообщить("Элемент создан");
		
		Если ОткрыватьФорму Тогда
			ОткрытьЗначение(НовыйЭлемент);
		КонецЕсли;
		
		Контрагент =НовыйЭлемент.Ссылка;

	Иначе
		
		Предупреждение("Контрагент """+СокрЛП(Контрагент.Наименование)+""" с ИНН :"+ИННКраткий+" уже существует.", , "Контрагент создан...");
		
		Если ОткрыватьФорму Тогда
			ОткрытьЗначение(Контрагент);
		КонецЕсли;
		
	КонецЕсли;

	Возврат Контрагент;

КонецФункции //СоздатьКонтрагента(Контрагент)

// Ищет контрагента по ИНН
//
Функция НайтиКонтрагентаПоИНН(Вид,ИННКраткий)
	
	Ссылка =Справочники[Вид].НайтиПоРеквизиту("ИНН",ИННКраткий);
	
	Если Ссылка.Пустая() Тогда
		Если Вид="Контрагенты" Тогда
			Сообщить("Не найден контрагент. Проверьте ИНН "+ИННКраткий, СтатусСообщения.Информация);
		Иначе
			Сообщить("Не найдена организация. Проверьте ИНН "+ИННКраткий, СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Ищет контрагента по ИНН
//
Функция НайтиКонтрагентаПоИННиКПП(Вид,ИННКраткий,КПП)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН",ИННКраткий);
	Запрос.УстановитьПараметр("КПП",КПП);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Контрагент;
		
	Иначе // Ищем по пустому КПП
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Наименование КАК КонтрагентНаименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН И
		|	Контрагенты.КПП = &ПустойКПП";
		
		Запрос.УстановитьПараметр("ИНН",ИННКраткий);
		Запрос.УстановитьПараметр("ПустойКПП","");
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Сообщить("Контрагент с ИНН "+ ИННКраткий+" и КПП "+КПП+" не обнаружен. Обрабатывается контрагент:
			|"+Результат.КонтрагентНаименование+"(ИНН "+ИННКраткий+", КПП )");
			
			Возврат Результат.Контрагент;
			
		Иначе
			
			Возврат Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

//поиск и создание договоров
Функция СоздатьНужныйДоговор(Владелец, ТекОрганизация,Плательщик) Экспорт
	
	Если Плательщик Тогда
		// для покупателей возвращает договор типа НД
		ТаблицаДоговоровКонтрагента=ВернутьТаблицуДоговоровКонтрагента(ТекОрганизация,Владелец,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,Справочники.ТипыДоговоров.НД);
	Иначе
		// для поставщиков вовзращает любой договор с поставщиком
		ТаблицаДоговоровКонтрагента=ВернутьТаблицуДоговоровКонтрагента(ТекОрганизация,Владелец,Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;	
	
	Если ТаблицаДоговоровКонтрагента.Количество()>0 Тогда 
		Возврат ТаблицаДоговоровКонтрагента[0].ДоговорКонтрагента;
	КонецЕсли;	
	
	//+++ 02.10.2015 - ОСНОВНОЙ договор с покупателем
	//Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	оснДог = Владелец.ОсновнойДоговорКонтрагента;
	если оснДог.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		или оснДог.ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СКомиссионером тогда
     	рез = оснДог;
	иначе
		рез = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат рез;
				
КонецФункции //СоздатьНужныйДоговор(Имя, Владелец)

Процедура ЗаполнитьОбязательныеСвойстваПриЭкспорте()
	
	ОбязательныеСвойстваПриЭкспорте = Новый Соответствие;
	
	ОбязательныеСвойстваПриЭкспорте.Вставить("Номер", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("Дата", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("Сумма", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПлательщикСчет", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("Плательщик", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПлательщикИНН", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПолучательСчет", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("Получатель", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ПолучательИНН", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ВидПлатежа", Истина);
	ОбязательныеСвойстваПриЭкспорте.Вставить("ВидОплаты", Истина);
	
КонецПроцедуры

Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, ПрефиксОрганизации)

	Номер = СокрЛП(НомерДокумента);

	// удаление префикса из номера документа
	Если Найти(Номер, ПрефиксОрганизации)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл)
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить("Файла "+Файл+" не существует!");
		Возврат Неопределено;
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	Попытка
		ПотокЧтения.Прочитать(Файл);
	Исключение
		Сообщить("Файл не прочитан.", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;

	ПотокЧтения.Прочитать(Файл,Кодир);

	Если ПотокЧтения.КоличествоСтрок()<1 Тогда
		Сообщить("В файл нет данных!");
		Возврат Неопределено;
	КонецЕсли;

	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Сообщить("Указанный файл не является файлом обмена или неверно указана кодировка!");
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(Реквизиты = Неопределено, Документ = Неопределено, НовыйКонтрагент=Истина) Экспорт
	
	ТипКонтрагента =Неопределено;
	
	КопияСписокКонтрагентов =Новый СписокЗначений();
	
	Если Реквизиты = Неопределено Тогда
		КопияСписокКонтрагентов.ЗагрузитьЗначения(СписокКонтрагентов.ВыгрузитьЗначения());
		
	ИначеЕсли НЕ ТипЗнч(Реквизиты) = Тип("Структура") Тогда
		
		
		СтруктураРеквизитов =Новый Структура();
		Для Каждого Рекв Из Реквизиты Цикл
			
			СтруктураРеквизитов.Вставить("ТИПКОНТРАГЕНТА", Рекв["ТипКонтрагента"]);
			СтруктураРеквизитов.Вставить(Рекв["Реквизит"], Рекв["Значение"]);
			
		КонецЦикла;
		
		Если КопияСписокКонтрагентов.НайтиПоЗначению(СтруктураРеквизитов)=Неопределено Тогда
			
			КопияСписокКонтрагентов.Добавить(СтруктураРеквизитов);
			
		КонецЕсли;
		
		Если НовыйКонтрагент Тогда
			СписокКонтрагентов=КопияСписокКонтрагентов;
		КонецЕсли;
		
	Иначе//структура
		Если Реквизиты.Количество() = 0 Тогда
			Сообщить("Документ создан вручную.", СтатусСообщения.Информация);
			Возврат;
		КонецЕсли;
		КопияСписокКонтрагентов.Добавить(Реквизиты);
		
	КонецЕсли;
	
	ТаблицаКонтрагентов.Строки.Очистить();
	ТаблицаКонтрагентов.Колонки.Очистить();
	
	ТаблицаКонтрагентов.Колонки.Добавить("Представление");
	ТаблицаКонтрагентов.Колонки.Добавить("Значение");
	ТаблицаКонтрагентов.Колонки.Добавить("Реквизит");
	ТаблицаКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	
	КонтрагентИНН ="";
	
	Для Каждого Список Из КопияСписокКонтрагентов Цикл
		
		Индекс =КопияСписокКонтрагентов.Индекс(Список);
		
		Если НЕ Список.Значение.Свойство("ТИПКОНТРАГЕНТА", ТипКонтрагента) Тогда
			
			Если Список.Значение.Свойство("ДАТАПОСТУПИЛО") Тогда
				ТипКонтрагента ="ПЛАТЕЛЬЩИК";
			Иначе
				ТипКонтрагента ="ПОЛУЧАТЕЛЬ";
			КонецЕсли;
			
		КонецЕсли;
		
		Список.Значение.Свойство(ТипКонтрагента+"ИНН", КонтрагентИНН);
		если ТаблицаКонтрагентов.Строки.Найти(КонтрагентИНН, "Значение", истина) <> Неопределено тогда
			продолжить;
		конецесли;
				
		ТаблицаКонтрагентов.Строки.Добавить().Установить(0, Список.Значение[ТипКонтрагента+"1"]);
		
		ПрямыеРасчеты =НЕ(Список.Значение.Свойство(ТипКонтрагента+"2"));
		
		Если ПрямыеРасчеты Тогда
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, "Наименование контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, "ИНН контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"ИНН"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"ИНН");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, "КПП контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"КПП"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"КПП");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, "Р/счет контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"СЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"СЧЕТ");
						
		Иначе
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(0, "Наименование контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(1, Список.Значение[ТипКонтрагента+"1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[0].Установить(2, ТипКонтрагента+"1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(0, "ИНН контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(1, Список.Значение[ТипКонтрагента+"ИНН"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[1].Установить(2, ТипКонтрагента+"ИНН");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(0, "КПП контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(1, Список.Значение[ТипКонтрагента+"КПП"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[2].Установить(2, ТипКонтрагента+"КПП");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(0, "Р/счет контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(1, Список.Значение[ТипКонтрагента+"СЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[3].Установить(2, ТипКонтрагента+"СЧЕТ");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(0, "Банк контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(1, Список.Значение[ТипКонтрагента+"3"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[4].Установить(2, ТипКонтрагента+"3");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(0, "Город банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(1, Список.Значение[ТипКонтрагента+"4"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[5].Установить(2, ТипКонтрагента+"4");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(0, "Кор. счет банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(1, Список.Значение[ТипКонтрагента+"РАСЧСЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[6].Установить(2, ТипКонтрагента+"РАСЧСЧЕТ");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(0, "РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(1, Список.Значение[ТипКонтрагента+"БАНК1"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[7].Установить(2, ТипКонтрагента+"БАНК1");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(0, "Местонахождение РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(1, Список.Значение[ТипКонтрагента+"БАНК2"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[8].Установить(2, ТипКонтрагента+"БАНК2");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(0, "Код РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(1, Список.Значение[ТипКонтрагента+"БИК"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[9].Установить(2, ТипКонтрагента+"БИК");
			
			ТаблицаКонтрагентов.Строки[Индекс].Строки.Добавить();
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(0, "Кор. счет РЦ банка контрагента");
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(1, Список.Значение[ТипКонтрагента+"КОРСЧЕТ"]);
			ТаблицаКонтрагентов.Строки[Индекс].Строки[10].Установить(2, ТипКонтрагента+"КОРСЧЕТ");
			
		КонецЕсли;
		
	КонецЦикла;
	
	//заполняем ее
	Если Документ <> Неопределено Тогда
		//формируем пустую табличную часть
		Документ.РеквизитыКонтрагента.Очистить();
		Для Счет =0  По ТаблицаКонтрагентов.Строки[0].Строки.Количество()-1 Цикл
			Документ.РеквизитыКонтрагента.Добавить().ТипКонтрагента =ТипКонтрагента;
		КонецЦикла;
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Представление"), "Представление");
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Значение"), "Значение");
		Документ.РеквизитыКонтрагента.ЗагрузитьКолонку(ТаблицаКонтрагентов.Строки[0].Строки.ВыгрузитьКолонку("Реквизит"), "Реквизит");
	КонецЕсли;
	
КонецПроцедуры //СписокНенайденных()

Процедура ОбновитьСтруктуруТабличногоПоля(ТабПоле, СоответствиеИзменятьРазмер = Неопределено) Экспорт
	
	ТабПоле.СоздатьКолонки();
	
	Если ТипЗнч(СоответствиеИзменятьРазмер) = Тип("Соответствие") Тогда
		Для каждого КолонкаТабПоля Из ТабПоле.Колонки Цикл
			Если СоответствиеИзменятьРазмер[КолонкаТабПоля.Имя] = Ложь Тогда
				КолонкаТабПоля.ИзменениеРазмера = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////// НОВОЕ /////////////////////////////////////////////////////////////

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры


/////////////// Формирование управляющих данных ///////////////////////////

Процедура ЗаполнитьСтрокиРеквизитовПлДокументов()
	
	РеквизитыПлДок_Основные = "Номер,Дата,Сумма";
	РеквизитыПлДок_ВидПлатежаОплаты = "ВидПлатежа,ВидОплаты";
	
	РеквизитыПлДок_Квитанция = "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание";
	
	РеквизитыПлДок_Списано = "ДатаСписано";
	РеквизитыПлДок_Поступило = "ДатаПоступило";
	
	РеквизитыПлДок_Плательщик = "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1";
	РеквизитыПлДок_ПлательщикНПР = "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет";
	РеквизитыПлДок_ПлательщикНПРНеОбязательные = "Плательщик2,Плательщик3,Плательщик4";
	
	РеквизитыПлДок_Получатель = "ПолучательСчет,Получатель,ПолучательИНН,Получатель1";
	РеквизитыПлДок_ПолучательНПР = "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет";
	РеквизитыПлДок_ПолучательНПРНеОбязательные = "Получатель2,Получатель3,Получатель4";
	
	РеквизитыПлДок_БюджетПлатеж = "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,Код";
	
	РеквизитыПлДок_Назначение = "НазначениеПлатежа";
	РеквизитыПлДок_НазначениеНеОбязательные = "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6";
	
	РеквизитыПлДок_Акредитив = "СрокПлатежа,Очередность";
	
	РеквизитыПлДок_УсловияОпл = "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3";
	
	РеквизитыПлДок_Дополнительные = "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок";
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура СформироватьСоответствиеВыгружаемых()
	
	Экспорт_Выгружаемые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_ПлательщикНПРНеОбязательные + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_ПолучательНПРНеОбязательные + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НазначениеНеОбязательные + "," +
	РеквизитыПлДок_Акредитив + "," +
	РеквизитыПлДок_УсловияОпл + "," +
	РеквизитыПлДок_Дополнительные);
	
КонецПроцедуры

Процедура СформироватьСоответствиеНеПустыхПриЭкспорте()
	
	ЭкспортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР_Плательщик = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР_Получатель = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручение_НПР = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_Назначение);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Плательщик = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Получатель = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_БюджетПлатеж);
	
	Экспорт_НеПустые = Новый Массив;
	
	Экспорт_НеПустые.Добавить(СоздатьСоответствиеИзСтроки(""));
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР_Плательщик);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР_Получатель);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручение_НПР);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Плательщик);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР_Получатель);
	Экспорт_НеПустые.Добавить(ЭкспортНеПустые_ПлатежноеПоручениеБюджет_НПР);
	
КонецПроцедуры

Процедура СформироватьСоответствияНеПустыхПриИмпорте()
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// по наличию статуса составителя определяется что платеж - налоговый
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН," +
	"СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования," +
	"ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Процедура СформироватьТегиЗаголовка()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьТегиРасчетногоСчета()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьСоответствиеЗагружаемых()
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(РеквизитыПлДок_Основные + ","
	 + РеквизитыПлДок_ВидПлатежаОплаты + ","
	 + РеквизитыПлДок_Квитанция + ","
	 + РеквизитыПлДок_Списано + ","
	 + РеквизитыПлДок_Поступило + ","
	 + РеквизитыПлДок_Плательщик + ","
	 + РеквизитыПлДок_ПлательщикНПР + ","
	 + РеквизитыПлДок_ПлательщикНПРНеОбязательные + ","
	 + РеквизитыПлДок_Получатель + ","
	 + РеквизитыПлДок_ПолучательНПР + ","
	 + РеквизитыПлДок_ПолучательНПРНеОбязательные + ","
	 + РеквизитыПлДок_БюджетПлатеж + ","
	 + РеквизитыПлДок_Назначение + ","
	 + РеквизитыПлДок_НазначениеНеОбязательные + ","
	 + РеквизитыПлДок_Акредитив + ","
	 + РеквизитыПлДок_УсловияОпл + ","
	 + РеквизитыПлДок_Дополнительные));
	
КонецПроцедуры

Процедура ЗаполнитьРаспознаваемыеПриИмпорте()
	
	Импорт_Распознаваемые = Новый Массив;
	
	// определяютопреацию при для входящих документов
	Импорт_Распознаваемые.Добавить("Списано");
	Импорт_Распознаваемые.Добавить("Поступило");
	
	// Контрагент
	Импорт_Распознаваемые.Добавить("Контрагент");
	Импорт_Распознаваемые.Добавить("СчетКонтрагента");
	
	// Сумма
	Импорт_Распознаваемые.Добавить("СуммаДокумента");
	
	// Наконец, сам документ
	Импорт_Распознаваемые.Добавить("Документ");
	
	// Необязательные реквизиты, практически никогда нет
	Импорт_Распознаваемые.Добавить("ПоказательДатыДок");
	Импорт_Распознаваемые.Добавить("СрокПлатежаДок");
	Импорт_Распознаваемые.Добавить("СрокАкцептаДок");
	Импорт_Распознаваемые.Добавить("ДатаОтсылки");

КОнецПроцедуры


///////////////// Начальное формирование таблицы и поля ////////////////////

Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик, ИтогВПодвале = Ложь)
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;
	
	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
		
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
		
	КонецЕсли;
	
	Если ТабПоле <> Неопределено Тогда
		// Создаем колонку в табличном поле
		КолонкаТабПоля = ТабПоле.Колонки.Добавить(Имя, Заголовок);
		
		Если ТипКолонки = Новый ОписаниеТипов("Булево") Тогда
			// связываем её с данными флажка
			КолонкаТабПоля.ДанныеФлажка = Имя;
			КолонкаТабПоля.УстановитьЭлементУправления(Тип("Флажок"));
			
		Иначе
			// связываем её с данными
			КолонкаТабПоля.Данные = Имя;
			КолонкаТабПоля.УстановитьЭлементУправления(Тип("ПолеВвода"));
			
		КонецЕсли;
		
		Если ТипЗнч(ШиринаКолонки) = Тип("Число") Тогда
			Если ШиринаКолонки > 0 Тогда
				КолонкаТабПоля.Ширина  = ШиринаКолонки;
			КонецЕсли;
		КонецЕсли;
		
		// устанавливаем характеристики
		КолонкаТабПоля.ИзменятьНастройку = (СоответсвиеХарактеристик["ИзменятьНастройку"] <> Ложь);
		
		КолонкаТабПоля.ИзменятьПозицию   = (СоответсвиеХарактеристик["ИзменятьПозицию"] <> Ложь);
		КолонкаТабПоля.Видимость         = (СоответсвиеХарактеристик["Видимость"] <> Ложь);
		КолонкаТабПоля.Доступность       = (СоответсвиеХарактеристик["Доступность"] <> Ложь);
		КолонкаТабПоля.ТолькоПросмотр    = (СоответсвиеХарактеристик["ТолькоПросмотр"] = Истина);
		
		КолонкаТабПоля.ИзменениеРазмера  = ?((СоответсвиеХарактеристик["ИзменениеРазмера"] <> Ложь), ИзменениеРазмераКолонки.Изменять, ИзменениеРазмераКолонки.НеИзменять);
		
		//Если (ИтогВПодвале)
		//	//(ТипКолонки = Новый ОписаниеТипов("Число")) И  
		//	Тогда
		//	
		//	КолонкаТабПоля.ПоказыватьИтогВПодвале = Истина;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьСтруктуруТаблицыЭкспорта(Таб, ТабПоле) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	Видимая020   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,    3);
	Видимая080   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   10);
	Видимая120   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   15);
	Видимая160   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   20);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее");
	Т_БанкСчет  = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	Т_Контрагент  = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	//  Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Выгружать",            Т_Булево,    "_",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",           Т_Число1,    "Готовность",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок",             Т_Строка,    "№ Документа",                Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Номер",                Т_Строка,    "Номер",                      Видимая080);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Дата",                 Т_Дата,      "Дата",                       Видимая080);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",             Т_Строка,    "Операция",                   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",      Т_БанкСчет,  "Эл. Р/с организации",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаОрганизации",Т_Строка,    "Р/с организации",            Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",                Т_Строка20,  "Сумма",                      Видимая120, Истина);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",           Т_Строка,    "Контрагент",                 Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",      Т_БанкСчет,  "Р/с контрагента",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаКонтрагента",Т_Строка,    "Эл. Р/с контрагента",            Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияДата",        Т_Дата,      "Дата форм. квитанции",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияВремя",       Т_Строка,    "Время форм. квитанции",      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияСодержание",  Т_Строка,    "Содержание квитанции",       НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикСчет",       Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик",           Т_Строка,    "Плательщик",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИНН",        Т_Строка12,  "ИНН плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик1",          Т_Строка,    "Наименование плательщика",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик2",          Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик3",          Т_Строка,    "Банк плательщика",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик4",          Т_Строка,    "Город банка плательщика",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРасчСчет",   Т_Строка20,  "Корсчет банка плательщика",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк1",      Т_Строка,    "РЦ банка плательщика",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк2",      Т_Строка,    "Город РЦ банка плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИК",        Т_Строка09,   "БИК РЦ банка плательщика",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКорсчет",    Т_Строка20,  "Корсчет РЦ банка плат.",     НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательСчет",       Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель",           Т_Строка,    "Получатель",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИНН",        Т_Строка12,  "ИНН получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель1",          Т_Строка,    "Наименование получателя",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель2",          Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель3",          Т_Строка,    "Банк получателя",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель4",          Т_Строка,    "Город банка получателя",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРасчСчет",   Т_Строка20,  "Корсчет банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк1",      Т_Строка,    "РЦ банка получателя",        НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк2",      Т_Строка,    "Город РЦ банка получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИК",        Т_Строка09,   "БИК РЦ банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКорсчет",    Т_Строка20,  "Корсчет РЦ банка пол.",      НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидПлатежа",           Т_Строка,    "Вид платежа",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОплаты",            Т_Строка02,  "Вид оплаты",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусСоставителя",    Т_Строка02,  "Статус составителя",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКПП",        Т_Строка09,  "КПП плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКПП",        Т_Строка09,  "КПП получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательКБК",        Т_Строка20,  "Показатель КБК",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОКАТО",                Т_Строка11,  "ОКАТО",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательОснования",  Т_Строка02,  "Пок. основания",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательПериода",    Т_Строка10,  "Пок. нал. периода",          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательНомера",     Т_Строка,    "Пок. номера док.",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДаты",       Т_Строка,    "Пок. даты док.",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательТипа",       Т_Строка02,  "Пок. типа платежа",          НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежа",          Т_Дата,      "Срок действия аккредитива",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Очередность",          Т_Строка02,  "Очередность платежа",        НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",    Т_Строка,    "Назначение платежа",         Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа1",   Т_Строка,    "Назначение платежа, стр. 1", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа2",   Т_Строка,    "Назначение платежа, стр. 2", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа3",   Т_Строка,    "Назначение платежа, стр. 3", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа4",   Т_Строка,    "Назначение платежа, стр. 4", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа5",   Т_Строка,    "Назначение платежа, стр. 5", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа6",   Т_Строка,    "Назначение платежа, стр. 6", НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцепта",          Т_Число10,   "Срок акцепта",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидАккредитива",       Т_Строка,    "Вид аккредитива",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты1",       Т_Строка,    "Условие оплаты, стр. 1",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты2",       Т_Строка,    "Условие оплаты, стр. 2",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты3",       Т_Строка,    "Условие оплаты, стр. 3",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежПоПредст",       Т_Строка,    "Платеж по представлению",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДополнУсловия",        Т_Строка,    "Дополнительные условия",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаПоставщика", Т_Строка,    "№ счета поставщика",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылкиДок",       Т_Дата,      "Дата отсылки документов",    НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",             Т_Документ,  "Источник",                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",       Т_Строка,    "Выгрузка",                   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",       Т_Строка,    "Замечания",                  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",         Т_Число10,   "Тип пл. документа",          НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Код",				     Т_Строка,    "Код",		                НеВидимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыИмпорта(Таб, ТабПоле) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	Видимая020   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,    2);
	Видимая080   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   10);
	Видимая120   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   15);
	Видимая160   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   20);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручениеИсходящее,ДокументСсылка.ПлатежноеПоручениеВходящее,ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств,ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_ПлОрдер   = Новый ОписаниеТипов("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств");
	Т_Контрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Т_БанкСчет   = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	//  Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Загрузить",            Т_Булево,    "_",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",           Т_Число1,    "Готовность",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок",             Т_Строка,    "№ Документа",                Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Номер",                Т_Строка,    "Номер",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДок",              Т_Дата,      "Дата",                       Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Дата",                 Т_Строка,    "Дата (из файла)",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",             Т_Строка,    "Операция",                   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипОперации",          Т_Строка,    "Тип операции",               Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",      Т_БанкСчет,  "Р/с организации",            Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента",       Т_Число15_2, "Сумма",                      Видимая120, Истина);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",                Т_Строка,    "Сумма (из файла)",           НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",           Т_Контрагент,"Контрагент",                 Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",      Т_БанкСчет,  "Р/с контрагента",            Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияДата",        Т_Строка,    "Дата форм. квитанции",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияВремя",       Т_Строка,    "Время форм. квитанции",      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияСодержание",  Т_Строка,    "Содержание квитанции",       НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Списано",              Т_Дата,      "Списано",                    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаСписано",          Т_Строка,    "Списано",                    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Поступило",            Т_Дата,      "Поступило",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПоступило",        Т_Строка,    "Поступило",                  НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикСчет",       Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик",           Т_Строка,    "Плательщик",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИНН",        Т_Строка12,  "ИНН плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик1",          Т_Строка,    "Наименование плательщика",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик2",          Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик3",          Т_Строка,    "Банк плательщика",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик4",          Т_Строка,    "Город банка плательщика",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРасчСчет",   Т_Строка20,  "Корсчет банка плательщика",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк1",      Т_Строка,    "РЦ банка плательщика",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк2",      Т_Строка,    "Город РЦ банка плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИК",        Т_Строка09,  "БИК РЦ банка плательщика",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКорсчет",    Т_Строка20,  "Корсчет РЦ банка плат.",     НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательСчет",       Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель",           Т_Строка,    "Получатель",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИНН",        Т_Строка12,  "ИНН получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель1",          Т_Строка,    "Наименование получателя",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель2",          Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель3",          Т_Строка,    "Банк получателя",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель4",          Т_Строка,    "Город банка получателя",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРасчСчет",   Т_Строка20,  "Корсчет банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк1",      Т_Строка,    "РЦ банка получателя",        НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк2",      Т_Строка,    "Город РЦ банка получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИК",        Т_Строка09,   "БИК РЦ банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКорсчет",    Т_Строка20,  "Корсчет РЦ банка пол.",      НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидПлатежа",           Т_Строка,    "Вид платежа",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОплаты",            Т_Строка02,  "Вид оплаты",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусСоставителя",    Т_Строка02,  "Статус составителя",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКПП",        Т_Строка09,  "КПП плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКПП",        Т_Строка09,  "КПП получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательКБК",        Т_Строка20,  "Показатель КБК",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОКАТО",                Т_Строка11,  "ОКАТО",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательОснования",  Т_Строка02,  "Пок. основания",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательПериода",    Т_Строка10,  "Пок. нал. периода",          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательНомера",     Т_Строка,    "Пок. номера док.",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДатыДок",    Т_Дата,      "Пок. даты док.",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДаты",       Т_Строка,    "Пок. даты",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательТипа",       Т_Строка02,  "Пок. типа платежа",          НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежаДок",       Т_Дата,      "Срок действия акк.",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежа",          Т_Строка,    "Срок действия аккредитива",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Очередность",          Т_Строка02,  "Очередность (из файла)",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОчередностьПлатежа",   Т_Число1,    "Очередность",                НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",    Т_Строка,    "Назначение платежа",         Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа1",   Т_Строка,    "Назначение платежа, стр. 1", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа2",   Т_Строка,    "Назначение платежа, стр. 2", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа3",   Т_Строка,    "Назначение платежа, стр. 3", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа4",   Т_Строка,    "Назначение платежа, стр. 4", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа5",   Т_Строка,    "Назначение платежа, стр. 5", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа6",   Т_Строка,    "Назначение платежа, стр. 6", НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцептаДок",       Т_Число10,   "Срок акцепта",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцепта",          Т_Строка,    "Срок акцепта (из файла)",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидАккредитива",       Т_Строка,    "Вид аккредитива",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты1",       Т_Строка,    "Условие оплаты, стр. 1",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты2",       Т_Строка,    "Условие оплаты, стр. 2",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты3",       Т_Строка,    "Условие оплаты, стр. 3",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежПоПредст",       Т_Строка,    "Платеж по представлению",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДополнУсловия",        Т_Строка,    "Дополнительные условия",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаПоставщика", Т_Строка,    "№ счета поставщика",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылки",          Т_Дата,      "Дата отсылки",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылкиДок",       Т_Строка,    "Дата отсылки документов",    НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",             Т_Документ,  "Источник",                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежныйОрдер",       Т_ПлОрдер,   "Ордер",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",       Т_Строка,    "Выгрузка",                   НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",       Т_Строка,    "Замечания",                  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",         Т_Число10,   "Тип пл. документа",          НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Код",			         Т_Строка,    "Код",				        НеВидимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРасчСчетов(Таб) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	
	Т_Число15_2  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Строка     = Новый ОписаниеТипов("Строка");
	Т_Дата       = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Т_Справочник = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаНачала",       Т_Строка,     "Дата начала интервала",      Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаКонца",        Т_Строка,     "Дата конца интервала",       Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчСчет",         Т_Строка,     "Расчетный счет организации", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальныйОстаток", Т_Строка,     "Начальный остаток",          Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоПоступило",   Т_Строка,     "Обороты входящих платежей",  Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоСписано",     Т_Строка,     "Обороты исходящих платежей", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечныйОстаток",  Т_Строка,     "Конечный остаток",           Видимая);
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Начало",           Т_Дата,       "Начало интервала",           Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Конец",            Т_Дата,       "Конец интервала",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РассчетныйСчет",   Т_Справочник, "Рассчетный счет",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальнаяСумма",   Т_Число15_2,  "НачальнаяСумма",             Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Поступило",        Т_Число15_2,  "Всего поступило",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Списано",          Т_Число15_2,  "Всего списано",              Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечнаяСумма",    Т_Число15_2,  "Конечная сумма",             Видимая);
	
КонецПроцедуры

////////////// ОБЩИЕ //////////////////////////////////////////////////

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьАктераПлательщика(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		Возврат "Контрагент";
		
	Иначе
		Возврат "Организация";
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьАктераПолучателя(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		Возврат "Организация";
		
	Иначе
		Возврат "Контрагент";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидОплатыДокумента(СсылкаНаДокумент)
	

	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат "01";
		
	//ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Аккредитив") Тогда
	//	Возврат "08";
	//	
	//ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ИнкассовоеПоручение") Тогда
	//	Возврат "06";
	//	
	//ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеТребование") Тогда
	//	Возврат "02";
		
	КонецЕсли;

	Возврат "00";

КонецФункции

Функция ПолучитьТегСекции(СсылкаНаДокумент)
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Возврат "Платежное поручение";
		
	Иначе
		Возврат "Прочее";
		
	КонецЕсли;
	
КонецФункции

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат "Не удалось преобразовать строку в дату";
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры


////////////// ПОДОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////

Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт) Экспорт
	
	ДокументыНаЭкспорт.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПлатежноеПоручениеИсходящее.Ссылка,
	               |	ПлатежноеПоручениеИсходящее.Номер,
	               |	ПлатежноеПоручениеИсходящее.Дата,
	               |	ПлатежноеПоручениеИсходящее.ВидПлатежа,
	               |	ПлатежноеПоручениеИсходящее.ОчередностьПлатежа,
	               |	ПлатежноеПоручениеИсходящее.НазначениеПлатежа,
	               |	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	               |	ПлатежноеПоручениеИсходящее.ТекстПлательщика,
	               |	ПлатежноеПоручениеИсходящее.ТекстПолучателя,
	               |	ПлатежноеПоручениеИсходящее.ИННПлательщика,
	               |	ПлатежноеПоручениеИсходящее.КПППлательщика,
	               |	ПлатежноеПоручениеИсходящее.ИННПолучателя,
	               |	ПлатежноеПоручениеИсходящее.КПППолучателя,
	               |	ПлатежноеПоручениеИсходящее.КодБК,
	               |	ПлатежноеПоручениеИсходящее.КодОКАТО,
	               |	ПлатежноеПоручениеИсходящее.ПоказательДаты,
	               |	ПлатежноеПоручениеИсходящее.ПоказательНомера,
	               |	ПлатежноеПоручениеИсходящее.ПоказательОснования,
	               |	ПлатежноеПоручениеИсходящее.ПоказательТипа,
	               |	ПлатежноеПоручениеИсходящее.ПоказательПериода,
	               |	ПлатежноеПоручениеИсходящее.СтатусСоставителя,
	               |	ПлатежноеПоручениеИсходящее.Организация.НаименованиеПолное КАК Организация,
	               |	ПлатежноеПоручениеИсходящее.Организация.Наименование КАК ОрганизацияКратко,
	               |	ПлатежноеПоручениеИсходящее.Организация.ИНН КАК ОрганизацияИНН,
	               |	ПлатежноеПоручениеИсходящее.Организация.КПП КАК ОрганизацияКПП,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации КАК ОрганизацияСчет,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов КАК ОрганизацияБанкДляРасчетов,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
				   //|	ПлатежноеПоручениеИсходящее.Контрагент.НаименованиеПолное КАК Контрагент,
				   |	ПОДСТРОКА(ПлатежноеПоручениеИсходящее.ТекстПолучателя, 1, 100) КАК Контрагент,
				   |	ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК КонтрагентКратко,
				   |	ПлатежноеПоручениеИсходящее.Контрагент.ИНН КАК КонтрагентИНН,
	               |	ПлатежноеПоручениеИсходящее.Контрагент.КПП КАК КонтрагентКПП,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента КАК КонтрагентСчет,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов КАК КонтрагентБанкДляРасчетов,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	               |	ПлатежноеПоручениеИсходящее.ВидОперации,
	               |	ПлатежноеПоручениеИсходящее.Код
	               |ИЗ
	               |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	               |ГДЕ
	               |	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНачало
	               |	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаОкончание
	               |	И ПлатежноеПоручениеИсходящее.ПометкаУдаления = &Булево_Ложь
	               |	И (ПлатежноеПоручениеИсходящее.СчетОрганизации = &Счет1";
	
	МассивСчетов = Новый Массив;
	
	Для каждого СтрокаСчетов из ТаблицаСчетов Цикл
		Если СтрокаСчетов.Пометка Тогда
			МассивСчетов.Добавить(СтрокаСчетов.Счет);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для СчСчетов = 2 По МассивСчетов.Количество() Цикл
		ТекстЗапроса = ТекстЗапроса + "
	               |	ИЛИ ПлатежноеПоручениеИсходящее.СчетОрганизации = &Счет" + СчСчетов;
		
	КонецЦикла;
		
	ТекстЗапроса = ТекстЗапроса + ")";
		
	СчСчетов = 1;
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало", НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Булево_Ложь", Ложь);
	
	Для каждого ЭлементМассива из МассивСчетов Цикл
	ЗапросПоДокументам.УстановитьПараметр("Счет" + СчСчетов, ЭлементМассива);
		СчСчетов = СчСчетов + 1;
		
	КонецЦикла;
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выбрать();
	
	Пока ВыборкаДляЭкспорта.Следующий() Цикл
		
		СтрЭкс = ДокументыНаЭкспорт.Добавить();
		
		ЗаполнитьСтрокуЭкспорта(СтрЭкс, ВыборкаДляЭкспорта, ДокументыНаЭкспорт.Колонки);
		
		СтрЭкс.Выгружать = ПустаяСтрока(СтрЭкс.ОписаниеОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, КоллекцияСвойств)
	
	АктерПлательщика = ОпределитьАктераПлательщика(ВыборкаДляЭкспорта.Ссылка);
	АктерПолучателя  = ОпределитьАктераПолучателя( ВыборкаДляЭкспорта.Ссылка);
	
	Для каждого СвойстоЭкспорта из КоллекцияСвойств Цикл
		ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, СвойстоЭкспорта.Имя, АктерПлательщика, АктерПолучателя);
		
	КонецЦикла;
	
	Для каждого СвойстоЭкспорта из КоллекцияСвойств Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, СвойстоЭкспорта.Имя, СвойстоЭкспорта.Заголовок);
		ПроверитьНаКорректностьЗначениеЭкспорта(СтрокаЭкспорта, СвойстоЭкспорта.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, ИмяСвойства, Плательщик, Получатель)
	
	Если ИмяСвойства = "Дата" Тогда
		СтрокаЭкспорта.Дата = ВыборкаДляЭкспорта.Дата;
		
	ИначеЕсли ИмяСвойства = "НомерДок" Тогда
		СтрокаЭкспорта.НомерДок = ВыборкаДляЭкспорта.Номер;
		
	ИначеЕсли ИмяСвойства = "Номер" Тогда
		СтрокаЭкспорта.Номер = ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, мОрганизация.Префикс);
		
	ИначеЕсли ИмяСвойства = "Операция" Тогда
		СтрокаЭкспорта.Операция = Строка(ВыборкаДляЭкспорта.ВидОперации);
		
	ИначеЕсли ИмяСвойства = "СчетОрганизации" Тогда
		СтрокаЭкспорта.СчетОрганизации = ВыборкаДляЭкспорта.ОрганизацияСчет;
		СтрокаЭкспорта.НомерСчетаОрганизации = ВыборкаДляЭкспорта.ОрганизацияНомерСчета;
		
	ИначеЕсли ИмяСвойства = "Сумма" Тогда
		СтрокаЭкспорта.Сумма = Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ИмяСвойства = "Контрагент" Тогда
		СтрокаЭкспорта.Контрагент = ВыборкаДляЭкспорта.Контрагент;
		
	ИначеЕсли ИмяСвойства = "СчетКонтрагента" Тогда
		СтрокаЭкспорта.СчетКонтрагента = ВыборкаДляЭкспорта.КонтрагентСчет;
		СтрокаЭкспорта.НомерСчетаКонтрагента = ВыборкаДляЭкспорта.КонтрагентНомерСчета;
		
	ИначеЕсли ИмяСвойства = "ПлательщикСчет" Тогда
		СтрокаЭкспорта.ПлательщикСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		
	ИначеЕсли ИмяСвойства = "Плательщик" Тогда // Плательщик1 Плательщик2 Плательщик3 Плательщик4
		Значение = ВыборкаДляЭкспорта[Плательщик];
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта[Плательщик + "Кратко"];
		КонецЕсли;
		
		СтрокаЭкспорта.Плательщик1 = Значение;
		СтрокаЭкспорта.Плательщик  = Значение + СтрокаЭкспорта.Плательщик;
		
	ИначеЕсли ИмяСвойства = "ПлательщикИНН" Тогда
		Значение = ВыборкаДляЭкспорта.ИННПлательщика;
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
		КонецЕсли;
		
		СтрокаЭкспорта.ПлательщикИНН = Значение;
		СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик;
		
	ИначеЕсли ИмяСвойства = "ПлательщикРасчСчет" Тогда // ПлательщикБанк1 ПлательщикБанк2 ПлательщикБИК ПлательщикКорсчет
		// Заполняется в лучае непрямых расчетов
		НепрямыеРасчетыУПлательщика = НЕ ЗначениеНеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);

		Если НепрямыеРасчетыУПлательщика Тогда
			СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
			
			СтрокаЭкспорта.Плательщик2 = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
			СтрокаЭкспорта.Плательщик3 = ВыборкаДляЭкспорта[Плательщик + "Банк"];
			СтрокаЭкспорта.Плательщик4 = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
			
			СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
			СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
			СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
			СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
			
			СтрокаЭкспорта.Плательщик = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
			
		Иначе
			
			СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
			
			СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "Банк"];
			СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
			СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
			СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
			
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ПолучательСчет" Тогда
		СтрокаЭкспорта.ПолучательСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		
	ИначеЕсли ИмяСвойства = "Получатель" Тогда // Получатель1 Получатель2 Получатель3 Получатель4
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			Значение=ВыборкаДляЭкспорта[Плательщик];	
		Иначе	
		Значение = ВыборкаДляЭкспорта[Получатель];
		Если ПустаяСтрока(Значение) Тогда
			Значение = ВыборкаДляЭкспорта[Получатель + "Кратко"];
		КонецЕсли;
		
		КонецЕсли;	
		СтрокаЭкспорта.Получатель  = Значение;
		СтрокаЭкспорта.Получатель1 = Значение;
		
	ИначеЕсли ИмяСвойства = "ПолучательИНН" Тогда
		СтрокаЭкспорта.ПолучательИНН = ВыборкаДляЭкспорта.ИННПолучателя;
		Значение = ВыборкаДляЭкспорта.ИННПолучателя;
		Если ПустаяСтрока(Значение) Тогда
			Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
				Значение = ВыборкаДляЭкспорта.ОрганизацияИНН;
			Иначе
				Значение = ВыборкаДляЭкспорта[Получатель + "ИНН"];
			КонецЕсли;
		КонецЕсли;
		
		СтрокаЭкспорта.ПолучательИНН = Значение;
		СтрокаЭкспорта.Получатель = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель;
		
	ИначеЕсли ИмяСвойства = "ПолучательРасчСчет" Тогда //
		// Заполняется по разному в случае прямых и непрямых расчетов
		НепрямыеРасчетыУПолучателя = НЕ ЗначениеНеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);

		Если НепрямыеРасчетыУПолучателя Тогда
			СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
			
			СтрокаЭкспорта.Получатель2 = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
			СтрокаЭкспорта.Получатель3 = ВыборкаДляЭкспорта[Получатель + "Банк"];
			СтрокаЭкспорта.Получатель4 = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
			
			СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
			СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
			СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
			СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
			
			СтрокаЭкспорта.Получатель = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
			
		Иначе
			
			СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
			
			СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "Банк"];
			СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
			СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
			СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
			
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ВидПлатежа" Тогда
		СтрокаЭкспорта.ВидПлатежа = ВыборкаДляЭкспорта.ВидПлатежа;
		
	ИначеЕсли ИмяСвойства = "ВидОплаты" Тогда
		СтрокаЭкспорта.ВидОплаты = ПолучитьВидОплатыДокумента(ВыборкаДляЭкспорта.Ссылка);
		
	ИначеЕсли ИмяСвойства = "ПлательщикКПП" Тогда
		Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "ПолучательКПП" Тогда
		Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "СтатусСоставителя" Тогда // ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО ПоказательОснования ПоказательПериода ПоказательНомера ПоказательДаты ПоказательТипа
		
		Если ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
			
			Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
				СтрокаЭкспорта.СтатусСоставителя = "0";
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
				СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
				СтрокаЭкспорта.ПлательщикКПП = "0";
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
				СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
				СтрокаЭкспорта.ПолучательКПП = "0";
			КонецЕсли;
			
			СтрокаЭкспорта.ПоказательКБК       = ВыборкаДляЭкспорта.КодБК;
			СтрокаЭкспорта.ОКАТО               = ВыборкаДляЭкспорта.КодОКАТО;
			
			Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
				СтрокаЭкспорта.ПоказательОснования = "0";
			Иначе
				СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
				СтрокаЭкспорта.ПоказательПериода = "0";
			Иначе
				СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
				СтрокаЭкспорта.ПоказательНомера = "0";
			Иначе
				СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
			КонецЕсли;
			
			Если ЗначениеНеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
				СтрокаЭкспорта.ПоказательДаты = "0";
			Иначе
				СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
				СтрокаЭкспорта.ПоказательТипа = "0";
			Иначе
				СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "СрокПлатежа" Тогда
		//СтрокаЭкспорта.СрокПлатежа = ВыборкаДляЭкспорта.;
		
	ИначеЕсли ИмяСвойства = "Очередность" Тогда
		СтрокаЭкспорта.Очередность = ВыборкаДляЭкспорта.ОчередностьПлатежа;
		
	ИначеЕсли ИмяСвойства = "НазначениеПлатежа" Тогда // НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
		СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, ""), Символы.НПП, "");
		КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
		
		Если КоличествоСтрокНП > 6 Тогда
			КоличествоСтрокНП = 6;
		КонецЕсли;
		
		Для Сч = 1 По КоличествоСтрокНП Цикл
			СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрЗаменить(СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч), Символы.НПП, "");
		КонецЦикла;
		
		Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
			СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
		КонецЦикла;
		
	ИначеЕсли ИмяСвойства = "Документ" Тогда
		СтрокаЭкспорта.Документ = ВыборкаДляЭкспорта.Ссылка;
		
	ИначеЕсли ИмяСвойства = "ТипДокумента" Тогда
		
		Если ТипЗнч(ВыборкаДляЭкспорта.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			
			ПеречислениеНалога          = (ВыборкаДляЭкспорта.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
			НепрямыеРасчетыУПлательщика = НЕ ЗначениеНеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
			НепрямыеРасчетыУПолучателя  = НЕ ЗначениеНеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);
			
			ТипДокумента = ?(ПеречислениеНалога, 1, 0) * 4 + ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
			
		Иначе
			ТипДокумента = 0;
			
		КонецЕсли;
		
		СтрокаЭкспорта.ТипДокумента = ТипДокумента;
		
	ИначеЕсли ИмяСвойства = "Код" Тогда
		Если ЗначениеНеЗаполнено(СтрокаЭкспорта.Код) Тогда
			СтрокаЭкспорта.Код = ВыборкаДляЭкспорта.Код;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если Экспорт_НеПустые[СтрокаЭкспорта.ТипДокумента][ИмяСвойства] = Истина Тогда
		Если ЗначениеНеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 3);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаКорректностьЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства)
	
	Значение = СтрокаЭкспорта[ИмяСвойства];
	
	Если ИмяСвойства = "Номер" Тогда
		Если Прав(Значение, 3) = "000" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Номер должен оканчиваться на три цифры и не на ""000""!");
		КонецЕсли;
		
	ИначеЕсли ИмяСвойства = "СтатусСоставителя" Тогда
		Если НЕ ПустаяСтрока(Значение) Тогда
			Если Найти("<0><01><02><03><04><05><06><07><08><09><10><11><12><13><14><15>", "<" + Значение + ">") = 0 Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 1, "В статусе составителя указано недопустимое значение """ + Значение + """!");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////// ВЫГРУЗКА //////////////////////////////////////////////////

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов)
	
	Буфер = "";
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + ПолучитьТегСекции(СтруктураДокумента.Документ));
	
	Для каждого ВыгружаемыйРеквизит из КоллекцияРеквизитов Цикл
		Если Экспорт_Выгружаемые[ВыгружаемыйРеквизит.Имя] = Истина Тогда
			Значение = ПривестиЗначение(СтруктураДокумента[ВыгружаемыйРеквизит.Имя]);
			Если НЕ ПустаяСтрока(Значение) Тогда
				ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Имя + "=" + Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура Выгрузить(ДокументыНаЭкспорт) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.01");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + КлиентБанка);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(),"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(),"ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода,"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода,"ДЛФ=Д"));
	
	Для каждого Строка Из ТаблицаСчетов Цикл
		Если Строка.Пометка = Истина Тогда
			ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + Строка.Счет.НомерСчета);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
		КонецЕсли;	
	КонецЦикла;
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыНаЭкспорт Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			стр1 = СтрПолучитьСтроку(Буфер, Сч);
			
			//+++ 20.02.2012 - изменение КПП
			Если найти(стр1, "ПлательщикКПП")>0 тогда
				Если стр1 <>"ПлательщикКПП=760201001" тогда
					сообщить("Изменено поле: "+стр1+" на 760201001", СтатусСообщения.Информация);
				КонецЕсли;
				стр1 = "ПлательщикКПП=760201001";
			КонецЕсли;
			//+++)	
			
			ПотокВыгрузки.ДобавитьСтроку(стр1);
			
		КонецЦикла;
	КонецЦикла;
	
	// записываем на диск
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	Если Кодировка = "DOS" Тогда
		ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
		
	Иначе
		ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
		
	КонецЕсли;

	Сообщить("Данные выгружены в файл " + ФайлВыгрузки);
	
КонецПроцедуры

////////////// ПОГОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если (ТипДокумента < 3) ИЛИ (ТипДокумента = 11)  ИЛИ (ТипДокумента = 12) Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта()
	
	Буфер = "";
	
	Пока (ПустаяСтрока(Буфер)) ИЛИ (Лев(Буфер, 2) = "//") Цикл
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции


// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправиьный реквизит заголовка
		Сообщить("Неверный реквизит заголовка, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + ТекстСтрокиЗаголовка);
		
	КонецЕсли;
		
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				// неправиьный реквизит заголовка
				Сообщить("Неверный реквизит платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			// неправиьный реквизит заголовка
			Сообщить("Нарушена структура платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			// неправиьный реквизит заголовка
			Сообщить("Неверный реквизит в секции описания расчетного счета, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, РеквизитИмпорта)
	
	Если РеквизитИмпорта = "Документ" Тогда
		
		// Распознаем дату документа
		ДатаДок = ПустаяДата;
		
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
		
		СтрокаДокумента.ДатаДок = ДатаДок;
		
		Если НЕ ПустаяСтрока(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			НомерДок = Число(СтрокаДокумента.Номер);
			СтрокаДокумента.НомерДок = НомерДок;
			
		Исключение
			Возврат;
			
		КонецПопытки;
		
		// Документ распознается по виду, дате и номеру
		// При наличии нескольких предпочтении отдается первому с совпадающим номером счета
		ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			РеквизитДаты = "ДатаВходящегоДокумента";
			РеквизитНомера = "НомерВходящегоДокумента";
			
		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			РеквизитДаты = "ДатаОплаты";
			РеквизитНомера = "Номер";
			
		Иначе
			РеквизитДаты = "Дата";
			РеквизитНомера = "Номер";
			
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		                |	ПлатежноеПоручение.Ссылка,
		                |	ПлатежноеПоручение." + РеквизитНомера + ",
		                |	ПлатежноеПоручение." + РеквизитДаты + ",
		                |	ПлатежноеПоручение.Организация,
		                |	ПлатежноеПоручение.СчетОрганизации
		                |ИЗ
		                |	Документ." + ВидДокумента + " КАК ПлатежноеПоручение
		                |ГДЕ
		                |	ПлатежноеПоручение." + РеквизитДаты + " >= &НачалоДня
		                |	И ПлатежноеПоручение." + РеквизитДаты + " <= &КонецДня
		                |	И ПлатежноеПоручение.Организация = &Организация";
		
						
		//// Из 10.3
		//Если ВидДокумента = "ПлатежноеПоручениеВходящее"
		// ИЛИ ВидДокумента = "АккредитивПолученный"
		// ИЛИ ВидДокумента = "ПлатежноеТребованиеПолученное"
		// ИЛИ ВидДокумента = "ИнкассовоеПоручениеПолученное" Тогда
		//	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ПлатежноеПоручение.Контрагент = &Контрагент";
		//	
		//КонецЕсли;
		//////
		
		Если ВидДокумента = "ПлатежноеПоручениеВходящее"
		 ИЛИ ВидДокумента = "АккредитивПолученный"
		 ИЛИ ВидДокумента = "ПлатежноеТребованиеПолученное"
		 ИЛИ ВидДокумента = "ИнкассовоеПоручениеПолученное" Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации";
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + "И ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента";
			
		КонецЕсли;

		ЗапросПоискаДокумента = Новый Запрос(ТекстЗапроса);
		
		
		// ЗапросПоискаДокумента.УстановитьПараметр("Номер",НомерДок);
		ЗапросПоискаДокумента.УстановитьПараметр("НачалоДня", НачалоДня(ДатаДок));
		ЗапросПоискаДокумента.УстановитьПараметр("КонецДня", КонецДня(ДатаДок));
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		
		//// Из 10.3
		//ЗапросПоискаДокумента.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		//////
		//
		
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации", СтрокаДокумента.СчетОрганизации);
		ЗапросПоискаДокумента.УстановитьПараметр("СуммаДокумента", СтрокаДокумента.СуммаДокумента);
		

		ВыборкаПоиска = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		ДлинаНомера = СтрДлина(НомерДок);
		Если ДлинаНомера < 3 Тогда
			ДлинаНомера = 3;
		КонецЕсли;
			
		Пока ВыборкаПоиска.Следующий() Цикл
			Попытка
				Если Число(Прав(СокрЛП(ВыборкаПоиска[РеквизитНомера]), ДлинаНомера)) = Число(НомерДок) Тогда
					СтрокаДокумента.Документ = ВыборкаПоиска.Ссылка;
					СтрокаДокумента.НомерДок = ВыборкаПоиска[РеквизитНомера];
					СтрокаДокумента.ДатаДок = ВыборкаПоиска[РеквизитДаты];
					Прервать;
				КонецЕсли;
			Исключение
			КонецПопытки
			
		КонецЦикла;
		
		Если ЗначениеНеЗаполнено(СтрокаДокумента.Документ) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Документ не найден в информационной базе!");
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "ТипДокумента" Тогда
		
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
			Если Не ПустаяСтрока(Результат) Тогда
				СтрокаДокумента.Списано = ПустаяДата;
			КонецЕсли;
			
		Иначе
			СтрокаДокумента.Списано = ПустаяДата;
			
		КонецЕсли;
		
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
			Если Не ПустаяСтрока(Результат) Тогда
				СтрокаДокумента.Поступило = ПустаяДата;
			КонецЕсли;
			
		Иначе
			СтрокаДокумента.Поступило = ПустаяДата;
			
		КонецЕсли;
		
		ВидДокумента = ПолучитьВидДокумента(СтрокаДокумента.Операция, СтрокаДокумента.Списано, СтрокаДокумента.Поступило);
		
		Если ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			// платежное поручение исходящее
			СтрокаДокумента.ТипДокумента = 1;
			СтрокаДокумента.ТипОперации = "Исходящий";
			
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			СтрокаДокумента.ТипДокумента = 2;
			СтрокаДокумента.ТипОперации = "Исходящий";

		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			СтрокаДокумента.ТипДокумента = 11;
			СтрокаДокумента.ТипОперации = "Входящий";
			
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
			СтрокаДокумента.ТипДокумента = 12;
			СтрокаДокумента.ТипОперации = "Входящий";
			
		Иначе
			// платежное поручение входящее
			СтрокаДокумента.ТипДокумента = 0;
			СтрокаДокумента.ТипОперации = "Входящий";
			
		КонецЕсли;
	
		Если НЕ ПустаяСтрока(СтрокаДокумента.СтатусСоставителя) Тогда
			СтрокаДокумента.ТипДокумента = СтрокаДокумента.ТипДокумента + 5;
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "Контрагент" Тогда
		// Поиск контрагента осуществляется по ИНН
		// Предпочтение отдается первому контрагенту с совпадающим КПП
		
		ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ
		                                        |	Контрагенты.Ссылка,
		                                        |	Контрагенты.ИНН,
		                                        |	Контрагенты.Наименование,
		                                        |	Контрагенты.КПП
		                                        |ИЗ
		                                        |	Справочник.Контрагенты КАК Контрагенты
		                                        |ГДЕ
		                                        |	Контрагенты.ИНН = &КонтрагентИНН");
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", СтрокаДокумента.ПолучательИНН);
			КПП = СтрокаДокумента.ПолучательКПП;
			ИННОрганизации = СтрокаДокумента.ПлательщикИНН;
			
		Иначе
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", СтрокаДокумента.ПлательщикИНН);
			КПП = СтрокаДокумента.ПлательщикКПП;
			ИННОрганизации = СтрокаДокумента.ПолучательИНН;
			
		КонецЕсли;
		
		Если СокрЛП(Организация.ИНН) <> СокрЛП(ИННОрганизации) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 3, "В документе указан неверный ИНН организации: " + ИННОрганизации + " !");
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
		
		Кандидат = Неопределено;
		СтепеньКандидата = 0;
		
		Пока ВыборкаПоиска.Следующий() Цикл
			
			Если СтепеньКандидата = 0 Тогда
				
				Кандидат = ВыборкаПоиска.Ссылка;
				
				Если НЕ ПустаяСтрока(КПП) Тогда
					Если ВыборкаПоиска.КПП = КПП Тогда
						Прервать;
						
					Иначе
						СтепеньКандидата = 1;
						
					КонецЕсли;
					
				Иначе
					СтепеньКандидата = 1;
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли СтепеньКандидата = 1 Тогда
				
				Если ВыборкаПоиска.КПП = КПП Тогда
					Кандидат = ВыборкаПоиска.Ссылка;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДокумента.Контрагент = Кандидат;
		
	ИначеЕсли РеквизитИмпорта = "СчетКонтрагента" Тогда
		// Ищем по номеру счета среди счетов контрагента
		// Если контранета распознать не удалось ищем счет везде и подставляем в контраента его владельца
		
		ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ
		                                  |	БанковскиеСчета.Ссылка,
		                                  |	БанковскиеСчета.НомерСчета,
		                                  |	БанковскиеСчета.Владелец
		                                  |ИЗ
		                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                                  |ГДЕ
		                                  |	БанковскиеСчета.НомерСчета = &НомерСчета");
		
		Если СтрокаДокумента.ТипДокумента < 10 Тогда
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
			СчетОрганизации = СтрокаДокумента.ПлательщикСчет;
			
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетОрганизации = СтрокаДокумента.ПолучательСчет;
			
		КонецЕсли;
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Кандидат = Неопределено;
		СтепеньКандидата = 0;
		
		Пока ВыборкаПоиска.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПоиска.Владелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтепеньКандидата = 0 Тогда
				Кандидат = ВыборкаПоиска.Ссылка;
				
				Если ЗначениеНеЗаполнено(СтрокаДокумента.Контрагент) Тогда
					Прервать;
					
				КонецЕсли;
				
				Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
					Прервать;
					
				Иначе
					СтепеньКандидата = 1;
					
				КонецЕсли;
				
			Иначе
				Если ВыборкаПоиска.Владелец = СтрокаДокумента.Контрагент Тогда
					Прервать;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДокумента.СчетКонтрагента = Кандидат;
		
		// Еще определяем счет организации
		ЗапросПоискаСчета = Новый Запрос("ВЫБРАТЬ
		                                  |	БанковскиеСчета.Ссылка,
		                                  |	БанковскиеСчета.НомерСчета,
		                                  |	БанковскиеСчета.Владелец
		                                  |ИЗ
		                                  |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		                                  |ГДЕ
		                                  |	БанковскиеСчета.НомерСчета = &НомерСчета
										  |	И БанковскиеСчета.Владелец = &Организация");
		
		ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СчетОрганизации);
		ЗапросПоискаСчета.УстановитьПараметр("Организация", Организация);
		
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Если ВыборкаПоиска.Следующий() Тогда
			
			СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(СчетОрганизации, "РасчСчет");
			
			Если СтрокаРССчетов = Неопределено Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "В документе указан счет, не определенный в заголовке:" + СчетОрганизации + "!");
			КонецЕсли;
			
			СтрокаДокумента.СчетОрганизации = ВыборкаПоиска.Ссылка;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, "В документе указан счет, не принадлежащий организации!");
			
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "СуммаДокумента" Тогда
		// Преобразуем из строки в число
		Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
		
		Попытка
			СтрокаДокумента.СуммаДокумента = Число(Буфер);
			
		Исключение
			ДобавитьЗамечание(СтрокаДокумента, 3, "Указана неверная сумма документа!");
			
		КонецПопытки;
			
	ИначеЕсли РеквизитИмпорта = "ПоказательДатыДок" Тогда
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ПоказательДаты) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
			Если Не ПустаяСтрока(Результат) Тогда
				СтрокаДокумента.ПоказательДатыДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		
	ИначеЕсли РеквизитИмпорта = "СрокПлатежаДок" Тогда
		// Преобразуем в число из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.СрокПлатежа) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.СрокПлатежаДок, СтрокаДокумента.СрокПлатежа);
			Если Не ПустаяСтрока(Результат) Тогда
				СтрокаДокумента.СрокПлатежаДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитИмпорта = "СрокАкцептаДок" Тогда
		
	ИначеЕсли РеквизитИмпорта = "ОчередностьПлатежа" Тогда
		Попытка
			СтрокаДокумента.ОчередностьПлатежа = Число(СтрокаДокумента.Очередность);
		Исключение
			СтрокаДокумента.ОчередностьПлатежа = 0;
		КонецПопытки;
		
	ИначеЕсли РеквизитИмпорта = "ДатаОтсылкиДок" Тогда
		// Преобразуем в дату из строки, если не пустая
		Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаОтсылки) Тогда
			Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылкиДок, СтрокаДокумента.ДатаОтсылки);
			Если Не ПустаяСтрока(Результат) Тогда
				СтрокаДокумента.ДатаОтсылкиДок = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если ЗначениеНеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СчетПринадлежитОрганизации(НомерСчета)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ
	                              |	БанковскиеСчета.Владелец,
	                              |	БанковскиеСчета.НомерСчета,
	                              |	БанковскиеСчета.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                              |ГДЕ
	                              |	БанковскиеСчета.Владелец = &Организация
	                              |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура сборка*
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	
	ЗагрРасчетныеСчета = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	ЗагрВидыДокументов = Новый СписокЗначений;
	
	Импорт_РассчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	// Получаем исходные данные
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ФайлЗагрузки);
	
	Импорт_ТекстДляРазбора=СформироватьТекст(Импорт_ТекстДляРазбора);
	
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		Предупреждение("Файл импорта не содержит данных!");
		Возврат;
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта();
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов) Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				Предупреждение("Нарущена структура файла импорта, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + Стр);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(Значение, "РасчСчет");
			Если СтрокаРССчетов <> Неопределено Тогда
				Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов) Тогда
					Сообщить("Нарущена структура файла импорта в секции описания расчетного счета! Строка: " + (Импорт_ТекущаяСтрока - 1));
					Возврат;
				КонецЕсли;
				
			Иначе
				Сообщить("Обраружена секция описания расчетного счета, которая описывает счет, не заявленный в заголовке! Строка: " + (Импорт_ТекущаяСтрока - 1));
				Возврат;
				
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				Если СчетПринадлежитОрганизации(Значение) Тогда
					СтрокаРССчетов = Импорт_РассчетныеСчета.Найти(Значение, "РасчСчет");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = Импорт_РассчетныеСчета.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе
					Сообщить("В заголовке файла импорта указан счет, не принадлежащий организации: " + Значение + " !", СтатусСообщения.ОченьВажное);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить("В файле импорта отсутствует признак обмена ""1CClientBankExchange""!");
				Возврат;
			КонецЕсли;
			
			
			// Формируем объектные структуры данных
			Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты - порядок распознания важен
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ТипДокумента");
				
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Контрагент");
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СчетКонтрагента");
				
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СуммаДокумента");
				
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "Документ");
				
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ПоказательДатыДок");
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "СрокПлатежаДок");
				РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, "ДатаОтсылкиДок");
				
				// Для каждого реквизита (= колонка) надо проверить на пустое значение
				Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
					ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
				КонецЦикла;
				
				Если СтрокаДокумента.Готовность < 3 Тогда
					
					Если ТолькоВходящие Тогда
						
						Если ВРег(СтрокаДокумента.ТипОперации) = "ВХОДЯЩИЙ" Тогда
						
							СтрокаДокумента.Загрузить = Истина;
							
						Иначе
							
						    СтрокаДокумента.Загрузить = Ложь;
							
						КонецЕсли; 
						
					Иначе
						
						СтрокаДокумента.Загрузить = Истина;	
					
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЦикла;
			
			//Если ТолькоВходящие Тогда
			//	сч=0;
			//	Пока сч < ДокументыДляИмпорта.Количество() Цикл
			//		Если ВРЕГ(ДокументыДляИмпорта[сч].ТипОперации) ="ВХОДЯЩИЙ" Тогда
			//			сч=сч+1;	
			//		Иначе 
			//			ДокументыДляИмпорта.Удалить(сч);
			//		КонецЕсли;	
			//	КонецЦикла;
			//КонецЕсли;

			
			Сообщить("Обработка файла импорта завершена успешно.");
			
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20)="1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр);
			
		КонецЕсли;
	КонецЦикла;
	
			
КонецПроцедуры

Функция СформироватьТекст(ИсходныйТекстСтрока)
// группируем ВСЕ строки где нет знака равно	

ИсходныйТекст=Новый ТекстовыйДокумент();
ИсходныйТекст.УстановитьТекст(ИсходныйТекстСтрока);
ГотовыйТекст=Новый ТекстовыйДокумент();


СтрокаОстаток="";
Для сч=1 По ИсходныйТекст.КоличествоСтрок() Цикл
	СтрокаДляАнализа=ИсходныйТекст.ПолучитьСтроку(сч);
	
	Если сч=1 Тогда // копируем заголовок
		ГотовыйТекст.ДобавитьСтроку(СтрокаДляАнализа);
	ИначеЕсли Найти(СтрокаДляАнализа,"=")>0 Тогда
		ГотовыйТекст.ДобавитьСтроку(СтрокаДляАнализа);
	Иначе   // не найден знак '='
		Если (ВРЕГ(СтрокаДляАнализа)="СЕКЦИЯДОКУМЕНТ") ИЛИ (ВРЕГ(СтрокаДляАнализа)="КОНЕЦДОКУМЕНТА")
			ИЛИ (ВРЕГ(СтрокаДляАнализа)="СЕКЦИЯРАСЧСЧЕТ") ИЛИ (ВРЕГ(СтрокаДляАнализа)="КОНЕЦРАСЧСЧЕТ")
			 ИЛИ (ВРЕГ(СтрокаДляАнализа)="РАСЧСЧЕТ") ИЛИ (ВРЕГ(СтрокаДляАнализа)="ДОКУМЕНТ")
			 ИЛИ (ВРЕГ(СтрокаДляАнализа)="КОНЕЦФАЙЛА") Тогда
			 ГотовыйТекст.ДобавитьСтроку(СтрокаДляАнализа);
        Иначе //ничего и ни куда не добавляем

		КонецЕсли;	 
		
	КонецЕсли;	
КонецЦикла;	

Возврат ГотовыйТекст.ПолучитьТекст();

КонецФункции

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Если Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Объект[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеВходящее") Тогда
		НазваниеОбъекта = "документ ""Входящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		НазваниеОбъекта = "документ ""Исходящее платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (списание)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		НазваниеОбъекта = "документ ""Платежный ордер (поступление)"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	Иначе
		НазваниеОбъекта = "объект";
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, " помечен на удаление", " отменена пометка на удаление");
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ": " + НазваниеДействия + ".", СтатусСообщения.Информация);
		
	Исключение
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)+ ": не " + НазваниеДействия + "! Произошли ошибки при записи!", СтатусСообщения.Важное);
		
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);

	Попытка
		
		ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			Сообщить("Создан " + НазваниеОбъекта + ".");
			
		Иначе
			Сообщить("Записан " + НазваниеОбъекта + ".");
			
		КонецЕсли;
		
	Исключение
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не создан! Произошли ошибки при записи!", СтатусСообщения.Важное);
		
		Иначе
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не записан! Произошли ошибки при записи!", СтатусСообщения.Важное);
			
		КонецЕсли;
		
	КонецПопытки
	
КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 2 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидДокумента(ПлатежнаяОперация, Списано, Поступило)
	
	ПлатежноеПоручение = (СокрЛП(ВРЕГ(СтрЗаменить(ПлатежнаяОперация, " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ"));
	Списали = НЕ ЗначениеНеЗаполнено(Списано);
	Зачислили = НЕ ЗначениеНеЗаполнено(Поступило);
	
	Если Списали И Зачислили Тогда
		// Это исходящее платежное поручение с операцией "перевод на другой счет"
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
		
		
	ИначеЕсли Списали Тогда
		Если ПлатежноеПоручение Тогда
			// Списали средста платежным поручением
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			// Списали средста прочим документом
			ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств";
			
		КонецЕсли;
		
	ИначеЕсли Зачислили Тогда
		Если ПлатежноеПоручение Тогда
			// Зачислили средста платежным поручением
			ВидДокумента = "ПлатежноеПоручениеВходящее";
			
		Иначе
			// Зачислили средста прочим документом
			ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств";
			
		КонецЕсли;
		
	Иначе
		// Движение средств не произошло
		Если ПлатежноеПоручение Тогда
			// Платежное поручение исходящее - выгруженное, но не исполненное
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		Иначе
			ВидДокумента = "ПлатежноеПоручениеИсходящее";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДокумента;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежногоПорученияИсходящее" Тогда
		НовыйДокумент.Номер = Номер;
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		НовыйДокумент.Номер = Номер;
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		НовыйДокумент.Номер = Номер;
		НовыйДокумент.Дата = Дата;
		
	ИначеЕсли ВидДокумента = "ПлатежноеПорученияВходящее" Тогда
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;

	Возврат НовыйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
		
		УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			
		Если ОбъектДокумента.ЭтоНовый() Тогда
			
			ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
			
			Попытка
				ОкончаниеНомера = Строка(Число(СокрЛП(ИсходныеДанные.Номер)));
				ДлинаОкончания = СтрДлина(ОкончаниеНомера);
				ДлинаНомера = СтрДлина(ОбъектДокумента.Номер);
				Если ДлинаОкончания < 3 Тогда
					ДлинаОкончания = 3;
				КонецЕсли;
				
				ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + Формат(ОкончаниеНомера, "ЧЦ=" + ДлинаОкончания + "; ЧВН=; ЧГ=0");
					
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			Если Не ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				ОбъектДокумента.ДоговорКонтрагента =СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина);
			КонецЕсли;
		КонецЕсли;
	
		//Если НЕ (ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)) Тогда
		//	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, ОбъектДокумента.ДоговорКонтрагента);
		//	СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
			
		//КонецЕсли;
		
		//Если ЗначениеНеЗаполнено(СчетУчетаРегистр) Тогда
		//	
		//	Если ОбъектДокумента.ВалютаДокумента.Код = "810" Тогда // рубль
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда // платим мы в рублях
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		//		КонецЕСли;
		//		
		//	Иначе // валюта
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда //платим мы в валюте
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;
		//		КонецЕСли;
		//	КонецЕСли;
		//	
		//КонецЕСли;
		
		//Если ЗначениеНеЗаполнено(ОбъектДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		//	УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", СчетУчета);
		//КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	ИначеЕсли ИмяРеквизита = "СчетУчетаРасчетовСКонтрагентом" Тогда //заполняет при заполнении Контаргент

	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		//Если ЗначениеНеЗаполнено(ОбъектДокумента.СчетБанк) Тогда
		//	// счет банк
		//	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		//		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		//	Иначе
		//		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		//	КонецЕсли;
		//КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
		Иначе
			Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		
	ИначеЕсли ИмяРеквизита = "СтатусСоставителя" Тогда 
		
		//реквизиты налогового платежа
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			
			УстановитьСвойство(ОбъектДокумента, "СтатусСоставителя",   ИсходныеДанные.СтатусСоставителя);
			УстановитьСвойство(ОбъектДокумента, "КодБК",               ИсходныеДанные.ПоказательКБК);
			УстановитьСвойство(ОбъектДокумента, "КодОКАТО",            ИсходныеДанные.ОКАТО);
			УстановитьСвойство(ОбъектДокумента, "ПоказательОснования", ИсходныеДанные.ПоказательОснования);
			УстановитьСвойство(ОбъектДокумента, "ПоказательПериода",   ИсходныеДанные.ПоказательПериода);
			УстановитьСвойство(ОбъектДокумента, "ПоказательНомера",    ИсходныеДанные.ПоказательНомера);
			УстановитьСвойство(ОбъектДокумента, "ПоказательДаты",      ИсходныеДанные.ПоказательДатыДок);
			УстановитьСвойство(ОбъектДокумента, "ПоказательТипа",      ИсходныеДанные.ПоказательТипа);
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "КПППолучателя" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "КодБК" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "КодОКАТО" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательОснования" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательПериода" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательНомера" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательДаты" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательТипа" Тогда //заполняет при заполнении СтатусСоставителя
	
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		
		Если ОбъектДокумента.ЭтоНовый() Тогда
			
			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
			
			///// Из 10.3
			Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
				
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
				
				Если ВсеСНДС18 Тогда
					
					СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					ПересчитатьСуммуНДС(СтрокаРасшифровки);
					
				КонецЕсли; 
				
			ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
				
				ОбъектДокумента.РасшифровкаПлатежа[0].СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
				РассчитатьКурсИСуммуВзаиморасчетов(ОбъектДокумента.РасшифровкаПлатежа[0], ПолучитьВалютуДоговора(ОбъектДокумента.РасшифровкаПлатежа[0].ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
				
				Если ВсеСНДС18 Тогда
					
					ОбъектДокумента.РасшифровкаПлатежа[0].СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					ПересчитатьСуммуНДС(ОбъектДокумента.РасшифровкаПлатежа[0]);
					
				КонецЕсли; 
				
			КонецЕсли;
			/////

		Иначе
			//проставляем признаки того, что платеж прошел:
			Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
				УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Списано));
				
				Если ЗначениеНеЗаполнено(ИсходныеДанные.ПлатежныйОрдер) Тогда
					Если ОбъектДокумента.СуммаДокумента <> ИсходныеДанные.СуммаДокумента Тогда
						ИсходныеДанные.ПлатежныйОрдер = СоздатьПлатежныйОрдер(ОбъектДокумента, ИсходныеДанные.СуммаДокумента);
					КонецЕсли;
					
				Иначе
					ОбъектОрдера = ИсходныеДанные.ПлатежныйОрдер.ПолучитьОбъект();
					УстановитьСвойство(ОбъектОрдера, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
					
					Если ОбъектОрдера.Модифицированность() Тогда
						ЗаписатьОбъект(ОбъектОрдера);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
	
	ИначеЕсли ИмяРеквизита = "ИННПлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "ИННПлательщика", ИсходныеДанные.ПлательщикИНН);
	
	ИначеЕсли ИмяРеквизита = "КПППлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "КПППлательщика", ИсходныеДанные.ПлательщикКПП);
	
	ИначеЕсли ИмяРеквизита = "ИННПолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "ИННПолучателя", ИсходныеДанные.ПолучательИНН);
	
	ИначеЕсли ИмяРеквизита = "КПППолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "КПППолучателя", ИсходныеДанные.ПолучательКПП);
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////// Из 10.3

Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента)
	
	мТекущаяВалютаВзаиморасчетов     = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
	ОбъектДокумента.ВалютаДокумента,
	ОбъектДокумента.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
	ОбъектДокумента.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()


Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, мТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента)
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаКурса);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента);
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()


Процедура ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента)
	
	ДатаЗаполнения = ОбъектДокумента.Дата;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, мТекущаяВалютаВзаиморасчетов, ДатаЗаполнения, ОбъектДокумента);
	
	Если СтрокаРасшифровки.КурсВзаиморасчетов = 0 Тогда
		СтрокаРасшифровки.КурсВзаиморасчетов = 1;
		СтрокаРасшифровки.СуммаВзаиморасчетов = СтрокаРасшифровки.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос("ВЫБРАТЬ
	                              |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	                              |ИЗ
	                              |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                              |ГДЕ
	                              |	ДоговорыКонтрагентов.Ссылка = &Ссылка");
	
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
		
	Иначе
		Возврат мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецФункции


///////


Процедура ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		Если ЗначениеНеЗаполнено(ОбъектДокумента.Дата) Тогда
			
			// Из 10.3
			Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда
				УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);
			Иначе
				УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			КонецЕсли;

			// Старое
			//УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
		
		// Из 10.3
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
			
		КонецЕсли;
        //
		
		
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			Если Не ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				ОбъектДокумента.ДоговорКонтрагента =СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина);
				
				// Из 10.3
				СтрокаРасшифровки.ДоговорКонтрагента = ОбъектДокумента.ДоговорКонтрагента;
				ЗаполнитьСтрокуПлатежаПоДоговору(СтрокаРасшифровки, ОбъектДокумента);
				//
				
			КонецЕсли;
		КонецЕсли;
	
		//Если НЕ (ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)) Тогда
		//	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, ОбъектДокумента.ДоговорКонтрагента);
		//	СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
		//	
		//КонецЕсли;
		
		//Если ЗначениеНеЗаполнено(СчетУчетаРегистр) Тогда
		//	
		//	Если ОбъектДокумента.ВалютаДокумента.Код = "810" Тогда // рубль
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в рублях - ДЛЯ ВХОДЯЩЕГО
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		//		КонецЕСли;
		//		
		//	Иначе // валюта
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда //платят нам в валюте - ДЛЯ ВХОДЯЩЕГО
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
		//		КонецЕСли;
		//	КонецЕСли;
		//	
		//КонецЕСли;
		
		//УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	ИначеЕсли ИмяРеквизита = "СчетУчетаРасчетовСКонтрагентом" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		//// счет банк
		//Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		//Иначе
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		//КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
		
	///// Из 10.3
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			
			Если ВсеСНДС18 Тогда
				СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ПересчитатьСуммуНДС(СтрокаРасшифровки);
			КонецЕсли; 
			СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1 Тогда
			ОбъектДокумента.РасшифровкаПлатежа[0].СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
			РассчитатьКурсИСуммуВзаиморасчетов(ОбъектДокумента.РасшифровкаПлатежа[0], ПолучитьВалютуДоговора(ОбъектДокумента.РасшифровкаПлатежа[0].ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
			
			Если ВсеСНДС18 Тогда
				ОбъектДокумента.РасшифровкаПлатежа[0].СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ПересчитатьСуммуНДС(ОбъектДокумента.РасшифровкаПлатежа[0]);
			КонецЕсли; 
            ОбъектДокумента.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
	/////
		
		
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
		//проставляем признаки того, что платеж прошел:
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда
			
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			//УстановитьСвойство(ОбъектДокумента, "Дата", НачалоДня(ИсходныеДанные.Поступило));
			УстановитьСвойство(ОбъектДокумента, "ДатаОплаты", НачалоДня(ИсходныеДанные.Поступило));
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
			СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеПоступленияДенежныхСредств;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
			СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", СтатьяДДС);
		
	ИначеЕсли ИмяРеквизита = "СтатусСоставителя" Тогда 
		
		//реквизиты налогового платежа
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			
			
			УстановитьСвойство(ОбъектДокумента, "СтатусСоставителя",   ИсходныеДанные.СтатусСоставителя);
			УстановитьСвойство(ОбъектДокумента, "КодБК",               ИсходныеДанные.ПоказательКБК);
			УстановитьСвойство(ОбъектДокумента, "КодОКАТО",            ИсходныеДанные.ОКАТО);
			УстановитьСвойство(ОбъектДокумента, "ПоказательОснования", ИсходныеДанные.ПоказательОснования);
			УстановитьСвойство(ОбъектДокумента, "ПоказательПериода",   ИсходныеДанные.ПоказательПериода);
			УстановитьСвойство(ОбъектДокумента, "ПоказательНомера",    ИсходныеДанные.ПоказательНомера);
			УстановитьСвойство(ОбъектДокумента, "ПоказательДаты",      ИсходныеДанные.ПоказательДатыДок);
			УстановитьСвойство(ОбъектДокумента, "ПоказательТипа",      ИсходныеДанные.ПоказательТипа);
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "КПППолучателя" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "КодБК" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "КодОКАТО" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательОснования" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательПериода" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательНомера" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательДаты" Тогда //заполняет при заполнении СтатусСоставителя
	ИначеЕсли ИмяРеквизита = "ПоказательТипа" Тогда //заполняет при заполнении СтатусСоставителя
	
	ИначеЕсли ИмяРеквизита = "ИННПлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "ИННПлательщика", ИсходныеДанные.ПлательщикИНН);
	
	ИначеЕсли ИмяРеквизита = "КПППлательщика" Тогда
		УстановитьСвойство(ОбъектДокумента, "КПППлательщика", ИсходныеДанные.ПлательщикКПП);
	
	ИначеЕсли ИмяРеквизита = "ИННПолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "ИННПолучателя", ИсходныеДанные.ПолучательИНН);
	
	ИначеЕсли ИмяРеквизита = "КПППолучателя" Тогда
		УстановитьСвойство(ОбъектДокумента, "КПППолучателя", ИсходныеДанные.ПолучательКПП);
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	//Из 10.3	
	ИначеЕсли ИмяРеквизита = "НазначениеПлатежа" Тогда
		
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		
			НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
			Для й = 2 По 6 Цикл
				Если ЗначениеНеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
					Прервать;
				КонецЕсли;
				НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + ИсходныеДанные["НазначениеПлатежа" + й];
			КонецЦикла;
		
		Иначе
		
			НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа);
	//
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
		
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.ДатаДок);
			
		Если ОбъектДокумента.ЭтоНовый() Тогда
			
			ОбъектДокумента.УстановитьНовыйНомер(Организация.Префикс);
			
			Попытка
				ОкончаниеНомера = Строка(Число(СокрЛП(ИсходныеДанные.Номер)));
				ДлинаОкончания = СтрДлина(ОкончаниеНомера);
				ДлинаНомера = СтрДлина(ОбъектДокумента.Номер);
				Если ДлинаНомера < 3 Тогда
					ДлинаНомера = 3;
				КонецЕсли;

				Если ДлинаНомера <= ДлинаОкончания Тогда
					ОбъектДокумента.Номер = Организация.Префикс + ОкончаниеНомера;
					
				Иначе
					ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, ДлинаНомера - ДлинаОкончания) + ОкончаниеНомера;
					
				КонецЕсли;
					
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			Если Не ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				ОбъектДокумента.ДоговорКонтрагента =СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина);
			КонецЕсли;
		КонецЕсли;
	
		//Если НЕ (ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)) Тогда
		//	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, ОбъектДокумента.ДоговорКонтрагента);
		//	СчетУчетаРегистр = СчетаУчета.СчетРасчетовПокупателя;
		//	
		//КонецЕсли;
		
		//Если ЗначениеНеЗаполнено(СчетУчетаРегистр) Тогда
		//	
		//	Если ОбъектДокумента.ВалютаДокумента.Код = "810" Тогда // рубль
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда // платим мы в рублях
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		//		КонецЕСли;
		//		
		//	Иначе // валюта
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда //платим мы в валюте
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;
		//		КонецЕСли;
		//	КонецЕСли;
		//	
		//КонецЕСли;
		
		//УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	ИначеЕсли ИмяРеквизита = "СчетУчетаРасчетовСКонтрагентом" Тогда //заполняет при заполнении Контаргент

	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		//Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		//Иначе
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		//КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
		Иначе
			Если ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда
				ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		
	ИначеЕсли ИмяРеквизита = "СуммаДокумента" Тогда
		Если ОбъектДокумента.ЭтоНовый() Тогда
			УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента);

		Иначе
			//проставляем признаки того, что платеж прошел:
			Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда
				УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
				УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", ИсходныеДанные.Списано);
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ИмяРеквизита)
	
	Если ИмяРеквизита = "Организация" Тогда
		// зяполняются разом и номер и дата документа и организация
		
		УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
		
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
		Если ЗначениеНеЗаполнено(ОбъектДокумента.Дата) Тогда
			УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
			
		////информация о ДоговореВзаиморасчетов в файле не передается, но
		////она нужна для корректной записи документов
		////поэтому устанавливаем договор по умолчанию "Основной договор"
		
		Если ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) Тогда
			Если Не ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) Тогда
				ОбъектДокумента.ДоговорКонтрагента =СоздатьНужныйДоговор(ОбъектДокумента.Контрагент, Организация, Истина);
			КонецЕсли;
		КонецЕсли;
	
		//Если НЕ (ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента)) Тогда
		//	СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, ОбъектДокумента.ДоговорКонтрагента);
		//	СчетУчетаРегистр=СчетаУчета.СчетРасчетов;
		//	
		//КонецЕсли;
		
		//Если ЗначениеНеЗаполнено(СчетУчетаРегистр) Тогда
		//	
		//	Если ОбъектДокумента.ВалютаДокумента.Код = "810" Тогда // рубль
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда // платят нам в рублях - ДЛЯ ВХОДЯЩЕГО
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		//		КонецЕСли;
		//		
		//	Иначе // валюта
		//		Если ЗначениеНеЗаполнено(ИсходныеДанные.Списано) Тогда //платят нам в валюте - ДЛЯ ВХОДЯЩЕГО
		//			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;
		//		КонецЕСли;
		//	КонецЕСли;
		//	
		//КонецЕСли;
		
		//УстановитьСвойство(ОбъектДокумента, "СчетУчетаРасчетовСКонтрагентом", /СчетУчета);
	
	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда //заполняет при заполнении Контаргент
	ИначеЕсли ИмяРеквизита = "СчетУчетаРасчетовСКонтрагентом" Тогда //заполняет при заполнении Контаргент
	
	ИначеЕсли ИмяРеквизита = "СчетОрганизации" Тогда //заполняет при заполнении Контаргент
		
		УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
		
		//валюта документа
		УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
		
		// счет банк
		//Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
		//Иначе
		//	УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
		//КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "ВалютаДокумента" Тогда //заполняет при заполнении СчетОрганизации
	ИначеЕсли ИмяРеквизита = "СчетБанк" Тогда //заполняет при заполнении СчетОрганизации
	
	ИначеЕсли ИмяРеквизита = "Оплачено" Тогда
		
		//проставляем признаки того, что платеж прошел:
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.Поступило) Тогда
			УстановитьСвойство(ОбъектДокумента, "Оплачено", Истина);
			УстановитьСвойство(ОбъектДокумента, "ДатаВыписки", НачалоДня(ИсходныеДанные.Поступило));
		КонецЕсли;
	
	ИначеЕсли ИмяРеквизита = "ВидОперации" Тогда 
		
		Если НЕ ЗначениеНеЗаполнено(ИсходныеДанные.СтатусСоставителя) Тогда
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		УстановитьСвойство(ОбъектДокумента, "ВидОперации", ВидОперации);
		
	ИначеЕсли ИмяРеквизита = "Ответственный" Тогда
		//Устанавливаем ответственного как: глТекущийПользователь
		УстановитьСвойство(ОбъектДокумента, "Ответственный", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный"));
		
	Иначе
		
		Попытка
			ЗначениеРеквизита = ИсходныеДанные[ИмяРеквизита];
		Исключение
			ЗначениеРеквизита = Неопределено;
		КонецПопытки;
			
		Если ЗначениеРеквизита <> Неопределено Тогда
			УстановитьСвойство(ОбъектДокумента, ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПлатежныйОрдер(ОбъектДокумента, СуммаДокумента)
	
	НовыйОрдер = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.СоздатьДокумент();
	НовыйОрдер.ДокументОснование = ОбъектДокумента.Ссылка;
	НовыйОрдер.Заполнить(ОбъектДокумента);
	НовыйОрдер.СуммаДокумента =  СуммаДокумента;
	
	ЗаписатьОбъект(НовыйОрдер);
	
	Возврат НовыйОрдер.Ссылка;
	
КонецФункции


Функция СоздатьСтруктуруЗначенийДокумента(ИсходныеДанные, КоллецияКолонок)
	
	НоваяСтруктура = Новый Структура;
	
	Для каждого КолонкаТаблицы из КоллецияКолонок  Цикл
		НоваяСтруктура.Вставить(КолонкаТаблицы.Имя, ИсходныеДанные[КолонкаТаблицы.Имя]);
	КонецЦикла;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Процедура сборка*
Процедура Загрузить(ДокументыКИмпорту) Экспорт
	
	НачалоИнтервалаЗагрузки = ПустаяДата;
	КонецИнтервалаЗагрузки  = ПустаяДата;
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если Не ПустаяСтрока(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата начала интервала! Файл не может быть загружен!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если Не ПустаяСтрока(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата окончания интервала! Файл не может быть загружен!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	// загружаем отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		Если СтрокаСекции.Загрузить Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если ЗначениеНеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый
					ВидДокумента = ПолучитьВидДокумента(СтрокаСекции.Операция, СтрокаСекции.Списано, СтрокаСекции.Поступило);
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
					
				Иначе
					// В ИБ найден документ, необходимо получить его объект
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
				КонецЕсли;
				
				ТипДокумента = ОбъектДокумента.Метаданные().Имя;
				
				Для каждого РеквизитДокумента Из ОбъектДокумента.Метаданные().Реквизиты Цикл
					
					Если ТипДокумента = "ПлатежноеПоручениеИсходящее" Тогда
						ЗаполнитьРеквизитПлатежногоПорученияИсходящее(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя);
						
					ИначеЕсли ТипДокумента = "ПлатежноеПоручениеВходящее" Тогда
						ЗаполнитьРеквизитПлатежногоПорученияВходящее(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя);
						
					ИначеЕсли ТипДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
						ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя);
						
					ИначеЕсли ТипДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
						ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции, РеквизитДокумента.Имя);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗначениеНеЗаполнено(ОбъектДокумента.Контрагент) ИЛИ
					ЗначениеНеЗаполнено(ОбъектДокумента.ДоговорКонтрагента) ИЛИ
					ЗначениеНеЗаполнено(СтрокаСекции.СчетКонтрагента) Тогда
					
					//добавляем реквизиты в табличну часть для дальнейнего использования
					СписокНенайденных(СоздатьСтруктуруЗначенийДокумента(СтрокаСекции, ДокументыКИмпорту.Колонки), ОбъектДокумента);
					
				КонецЕсли;
				
				// Если документ вновь созданный тогда устанавливаем номер документа
				Если ОбъектДокумента.ЭтоНовый() И ЗначениеНеЗаполнено(ОбъектДокумента.Номер) Тогда
					УстановитьНомерДокумента(ОбъектДокумента);
				КонецЕсли;	
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				Если ОбъектДокумента.Модифицированность() Тогда
					ЗаписатьОбъект(ОбъектДокумента);
				КонецЕсли;
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					Если ЗначениеНеЗаполнено(СтрокаСекции.Документ) Тогда
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					
					КонецЕсли;
				КонецЕсли;
				
				
				Если НЕ (ЗначениеНеЗаполнено(СтрокаСекции.Списано) И ЗначениеНеЗаполнено(СтрокаСекции.Поступило)) Тогда
					// По прошедшим суммам необходимо синхронизировать выписки
					
				КонецЕсли;
				
			Иначе
				Сообщить("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.Номер + " от " + СтрокаСекции.Дата + " не может быть загружен:" + Символы.ПС + РезультатПроверки + "!", СтатусСообщения.ОченьВажное);
				
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	// Платежные поручения исходящие, отсутствующие в списке загруженным помечаем на удаление
	
	//Составляем список счетов
	
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РассчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ
	                                   |	ПлатежноеПоручениеИсходящее.Ссылка,
	                                   |	ПлатежноеПоручениеИсходящее.Дата,
	                                   |	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	                                   |ГДЕ
	                                   |	ПлатежноеПоручениеИсходящее.Дата >= &ДатаНач
	                                   |	И ПлатежноеПоручениеИсходящее.Дата <= &ДатаКон
	                                   |	И ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Платежные поручения входящие, отсутствующие в списке загруженным помечаем на удаление
	
	ДокументыНаУдаление = Новый Запрос("ВЫБРАТЬ
	                                   |	ПлатежноеПоручениеВходящее.Ссылка,
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента,
	                                   |	ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета
	                                   |ИЗ
	                                   |	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	                                   |ГДЕ
	                                   |	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента >= &ДатаНач
	                                   |	И ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента <= &ДатаКон
	                                   |	И ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета В(&НомераСчетов)");
	
	ДокументыНаУдаление.УстановитьПараметр("ДатаНач", НачалоИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("ДатаКон", КонецИнтервалаЗагрузки);
	ДокументыНаУдаление.УстановитьПараметр("НомераСчетов", СписокСчетов);

	ВыборкаДокументов = ДокументыНаУдаление.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ВыборкаДокументов.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено Тогда
			ОбъектДокументаКУдаление = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


///////////// Модуль     //////////////////////////////////////////////////

ПустаяДата = Дата("00010101");

ЗаполнитьСтрокиРеквизитовПлДокументов();

// Общее
СформироватьТегиЗаголовка();
СформироватьТегиРасчетногоСчета();

// Экспорт
СформироватьСоответствиеВыгружаемых();
СформироватьСоответствиеНеПустыхПриЭкспорте();
Импорт_ТекстДляРазбора = "";

ЗаполнитьОбязательныеСвойстваПриЭкспорте();

// Импорт
Импорт_РассчетныеСчета = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРасчСчетов(Импорт_РассчетныеСчета);

Импорт_ВидыДокументов = Новый Массив;

СформироватьСоответствиеЗагружаемых();
ЗаполнитьРаспознаваемыеПриИмпорте();
СформироватьСоответствияНеПустыхПриИмпорте();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
СписокКонтрагентов =Новый СписокЗначений();

#КонецЕсли
