
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	сдвигМесяца = -1; // -1   предыдущий месяц
	
	НачДата = ДобавитьМесяц( НачалоМесяца(ТекущаяДата()), сдвигМесяца);
	КонДата = КонецМесяца(НачДата);
	
	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыОтчетПоПоступлениюУслугИМаршрутамОтчет_7195565d-0bfa-416a-8ecd-22f3c8c54352", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	
	//+++
	ПостроительОтчетаОтчет.Параметры.Вставить("КонДата", КонецДня(КонДата) );
	ПостроительОтчетаОтчет.Параметры.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90161"));

	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("НачДата", НачДата);
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ПоступлениеТоваровУслуг,
	|	ВложенныйЗапрос.Маршрут КАК Маршрут,
	|	ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслуг.Содержание КАК Содержание,
	|	ПоступлениеТоваровУслуг.Подразделение КАК Подразделение,
	|	ПоступлениеТоваровУслуг.Количество КАК Количество,
	|	ПоступлениеТоваровУслуг.Сумма КАК Сумма
	|{ВЫБРАТЬ
	|	Количество,
	|	Сумма}
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕстьNull(ЗначенияСвойствОбъектов.Значение,"""") КАК Маршрут,
	|			ЗначенияСвойствОбъектов.Объект КАК Объект
	|		ИЗ
	|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ГДЕ
	|			ЗначенияСвойствОбъектов.Свойство = &Свойство) КАК ВложенныйЗапрос
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ВложенныйЗапрос.Объект
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И (НЕ ПоступлениеТоваровУслуг.Ссылка.ПометкаУдаления)
	|{ГДЕ
	|	ВложенныйЗапрос.Маршрут.*,
	|	ПоступлениеТоваровУслуг.Содержание,
	|	ПоступлениеТоваровУслуг.Ссылка.* КАК ПоступлениеТоваровУслуг,
	|	ПоступлениеТоваровУслуг.Подразделение.*,
	|	ПоступлениеТоваровУслуг.Номенклатура.* КАК Услуга,
	|	ПоступлениеТоваровУслуг.Количество,
	|	ПоступлениеТоваровУслуг.Сумма}
	|{УПОРЯДОЧИТЬ ПО
	|	Маршрут.*,
	|	Содержание,
	|	ПоступлениеТоваровУслуг.*}
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ,
	|	Маршрут,
	|	Содержание,
	|	Номенклатура,
	|	Подразделение,
	|	ПоступлениеТоваровУслуг
	|{ИТОГИ ПО
	|	Маршрут.*,
	|	Содержание,
	|	ПоступлениеТоваровУслуг.*}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	
	//+++
	структура1 = новый Структура("ПоступлениеТоваровУслуг",	"Поступление товаров и услуг");
	ПостроительОтчетаОтчет.НастроитьРасшифровку(ПостроительОтчетаОтчет, структура1);
	

	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыОтчетПоПоступлениюУслугИМаршрутамОтчет_7195565d-0bfa-416a-8ecd-22f3c8c54352");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры



