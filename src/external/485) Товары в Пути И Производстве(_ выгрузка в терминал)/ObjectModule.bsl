Перем ИмяФайлаРезультата;

Процедура ВыгрузитьВТерминал()Экспорт
	ТабНомН = Новый ТаблицаЗначений;
	
	текСхема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Рубли");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Валюты.НайтиПоКоду("643");
	
	
	ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(Период);
	
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Болты");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000702");
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Вентели");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("9190192");
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Гайки");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000713");
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Кольца");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000726");
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Камеры");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0001127");
	ПараметрСКД =  текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("ОбодныеЛенты");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0060110");
    ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Производитель");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Производители.НайтиПоКоду("3486");
	
	//+++ 21.02.2018 - остатки по заводу "ИСТ"
    ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Ист");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("94072");
	
	//+++ 21.02.2018 - остатки по клиенту "СКАД ЛМЗ"
    ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Скад"); 
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("95623");
	
	
	
	
	
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(текСхема,текСхема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабНомН);// выгружать в таблицу значений
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	ИмяФайла=КаталогВременныхФайлов()+"OnWayItems_terminal.xml"; // на сервере - своя папка...
	
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	ОбъектXML.ЗаписатьОбъявлениеXML();  //<?xml version="1.0"?>
	ОбъектXML.ЗаписатьНачалоЭлемента("ProductsOnWay");
	
	
	Для каждого запись из ТабНомН Цикл
		ОбъектXML.ЗаписатьНачалоЭлемента("Product");
		ОбъектXML.ЗаписатьАтрибут("ProductId", Запись.Код); //строка
		ОбъектXML.ЗаписатьАтрибут("ProdOrWay", Строка(Запись.Впути) ); //строка
		//ОбъектXML.ЗаписатьАтрибут("DateOfArrival", Строка(Формат(Запись.Дата,"ДФ=yyyy-MM-dd")) ); //строка
		ОбъектXML.ЗаписатьАтрибут("DateOfArrival", Строка(Формат(Запись.Дата,"ДФ=dd.MM.yyyy")) ); //строка
		
		ОбъектXML.ЗаписатьАтрибут("Count", СтрЗаменить(Строка(Запись.Количество)," ","") ); //строка
		
		ОбъектXML.ЗаписатьКонецЭлемента(); 
	конецЦикла;
	ОбъектXML.ЗаписатьКонецЭлемента(); 
	ОбъектXML.Закрыть();
	
	удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportOnWayItems", Истина, "terminal.yst.ru" );
	//	удачно = SIM_ВыгрузитьФайлНаСервер(ИмяФайла,"ImportOnWayItems", Истина, "terminal.yst.ru" );
	
	#Если Клиент Тогда
		сообщить("Сформирован файл выгрузки "+Имяфайла);
		Если удачно Тогда
			сообщить("Файл удачно выгружен в Terminal");
		конецЕсли;                                     	
	#конецесли	
	
конецПроцедуры

// + Сакулина
Функция ПолучитьДанныеСТерминала()   Экспорт
    Подключение = ПодключитьсяКсерверу();
	Если Подключение тогда
		Сообщить(Строка(ТекущаяДата())+" получение данных на Сервере завершено !", СтатусСообщения.Информация);
	Иначе	
		сообщить(Строка(ТекущаяДата())+" Ошибка при подключении к серверу!", СтатусСообщения.Внимание);
		#Если клиент тогда
		Предупреждение("Ошибка подключения к серверу!",30);
		#конецесли

	КонецЕсли;
	ТаблТерминал = РазобратьXML();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамСезонныеОстатки.Номенклатура,
	|	ЗаказыПоставщикамСезонныеОстатки.ЗаказПоставщикуСезонный.ДатаДействияПо КАК Дата,
	|	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток КАК Количество,
	|	0 КАК ВПути
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамСезонные.Остатки(
	|			,
	|			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
	|				И (ЗаказПоставщикуСезонный.ВалютаДокумента <> &Рубли
	|					ИЛИ ЗаказПоставщику.Контрагент = &СКАД
	|					ИЛИ ЗаказПоставщикуСезонный.Контрагент = &Ист)
	|				И ДОБАВИТЬКДАТЕ(ЗаказПоставщикуСезонный.ДатаДействияПо, ДЕНЬ, 30) >= &Дата) КАК ЗаказыПоставщикамСезонныеОстатки
	|ГДЕ
	|	ЗаказыПоставщикамСезонныеОстатки.КоличествоОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.Номенклатура,
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПриходаВПортИлиНаТаможнюETA,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток,
	|	1
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			&Дата,
	|			Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	|				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ
	|				И (ЗаказПоставщику.ВалютаДокумента <> &Рубли
	|					ИЛИ ЗаказПоставщику.Контрагент = &СКАД
	|					ИЛИ ЗаказПоставщику.Контрагент = &Ист)) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ВТ.Дата, ДЕНЬ) КАК Дата,
	|	СУММА(ВТ.Количество) КАК Количество,
	|	ВТ.ВПути,
	|	ВТ.Номенклатура.Код КАК Код
	|ПОМЕСТИТЬ ВТ1С
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Номенклатура,
	|	ВТ.ВПути,
	|	ВТ.Номенклатура.Код,
	|	НАЧАЛОПЕРИОДА(ВТ.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТЗТерминал.ДатаПрибытия, ДЕНЬ) КАК ДатаПредп,
	|	ТЗТерминал.Количество,
	|	ТЗТерминал.ВПути,
	|	ТЗТерминал.Код
	|ПОМЕСТИТЬ ВТТерминал
	|ИЗ
	|	&ТЗТерминал КАК ТЗТерминал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ1С.ВПути, """") = """"
	|			ТОГДА ВТТерминал.ВПути
	|		ИНАЧЕ ВТ1С.ВПути
	|	КОНЕЦ КАК ВПути,
	|	ЕСТЬNULL(ВТ1С.Количество, 0) КАК Количество1С,
	|	ЕСТЬNULL(ВТТерминал.Количество, 0) КАК КоличествоТерминал,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ1С.Дата, """") = """"
	|			ТОГДА ВТТерминал.ДатаПредп
	|		ИНАЧЕ ВТ1С.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ1С.Код, """") = """"
	|			ТОГДА ВТТерминал.Код
	|		ИНАЧЕ ВТ1С.Код
	|	КОНЕЦ КАК Код,
	|	ЕСТЬNULL(ВТ1С.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура
	|ПОМЕСТИТЬ ВТДоп
	|ИЗ
	|	ВТ1С КАК ВТ1С
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТТерминал КАК ВТТерминал
	|		ПО ВТ1С.ВПути = ВТТерминал.ВПути
	|			И ВТ1С.Дата = ВТТерминал.ДатаПредп
	|			И ВТ1С.Код = ВТТерминал.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоп.ВПути,
	|	ВТДоп.Количество1С,
	|	ВТДоп.КоличествоТерминал,
	|	ВТДоп.Дата,
	|	ВТДоп.Код,
	|	ВТДоп.Номенклатура
	|ИЗ
	|	ВТДоп КАК ВТДоп
	|ГДЕ
	|	ВТДоп.Количество1С <> ВТДоп.КоличествоТерминал";
	
	Запрос.УстановитьПараметр("ИСТ",Справочники.Контрагенты.НайтиПоКоду("94072"));
	Запрос.УстановитьПараметр("СКАД",Справочники.Контрагенты.НайтиПоКоду("95623")); // 04.04.2018
	
	Запрос.УстановитьПараметр("ТЗТерминал",ТаблТерминал);
	Запрос.УстановитьПараметр("Рубли",Справочники.Валюты.НайтиПоКоду("643"));
	Запрос.УстановитьПараметр("Дата",КонецДня(ТекущаяДата()));

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
конецфункции
// - Сакулина
// + Сакулина
Функция ПодключитьсяКсерверу()
	Попытка
		Соединение = Новый HTTPСоединение("terminal.yst.ru", 80,"admin","cegthvfhbj" );   //"http://localhost"  50876   http://terminal.yst.ru/api/onwayitems
		
		Если Соединение = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
		Заголовки = Новый Соответствие();
	
		// посылаем запрос
		ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
		
		// ТОЛЬКО ЧИТАТЬ!
		Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
		Заголовки.Вставить("Accept", "application/xml");  
		
		//  http://terminal.yst.ru
		HTTPзапрос = Новый HTTPЗапрос("/api/onwayitems", Заголовки);
		HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
			
		Соединение = Неопределено; // разорвать соединение
		
		ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
		ТекстовыйФайлОтвет = неопределено; // отключается от файла
		
		Сообщить("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+" Ответ сервера: '"+СтрокаJSONРезультат+"'" );
		
		Если HTTPОтвет.КодСостояния = 200 тогда
			Результат = Истина;
			Сообщить("Ответ находится во временном файле: "+ИмяФайлаРезультата);
		Иначе
			Результат = ЛОЖЬ;
			Сообщить("Ответ сервера - указывает о наличие ошибки!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка : "+ОписаниеОшибки() );
		Результат = ЛОЖЬ;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции
// - Сакулина

// + Сакулина
Функция РазобратьXML()
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаРезультата);
	
	КС = Новый КвалификаторыСтроки(7);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	
	ТаблицаТерминал = Новый ТаблицаЗначений;
	//ТаблицаТерминал.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТерминал.Колонки.Добавить("ДатаПрибытия",Новый ОписаниеТипов("Дата"));
	ТаблицаТерминал.Колонки.Добавить("ВПути",Новый ОписаниеТипов("Число"));
	ТаблицаТерминал.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаТерминал.Колонки.Добавить("Код", ОписаниеТиповС);

	
	Запись = Новый Структура;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Имя = ЧтениеXML.Имя;
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Запись.Вставить(Имя, ЧтениеXML.Значение);      //информацию внутри блока XML помещаем в структуру
		КонецЕсли;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "onwayitem" Тогда
				СтрокаТЗ = ТаблицаТерминал.Добавить();
				//Товар = Справочники.Номенклатура.НайтиПоКоду(Запись.ProductId);
				//Если Товар <> Справочники.Номенклатура.ПустаяСсылка() Тогда
				//	СтрокаТЗ.Номенклатура = Товар;
				//Иначе
				//	СтрокаТЗ.Номенклатура = Товар;
				//	Сообщить("Не найден товар по коду: " + Запись.ProductId,СтатусСообщения.Внимание);
				//КонецЕсли;
				
				СтрокаТЗ.ДатаПрибытия = Дата(СтрЗаменить(Лев(Запись.DateOfArrival,10),"-",""));
				Если Запись.ProdOrWay = "OnWay" Тогда
					СтрокаТЗ.ВПути = 1;
				Иначе
					СтрокаТЗ.ВПути = 0;
                КонецЕсли;
				СтрокаТЗ.Количество = Число(Запись.Count);
				
				СТрокаТЗ.Код = СокрЛП(Запись.ProductId);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXML.Закрыть();	

	Возврат ТаблицаТерминал;	
	
КонецФункции
// - Сакулина

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  =КонецДня(ТекущаяДата());
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Рубли");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = Справочники.Валюты.НайтиПоКоду("643");
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Производитель");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = Справочники.Производители.НайтиПоКоду("3486");
	
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Болты");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000702");
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Вентели");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("9190192");
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Гайки");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000713");
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Кольца");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0000726");
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Камеры");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0001127");
	ПараметрСКД =  КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОбодныеЛенты");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Номенклатура.НайтиПоКоду("0060110");
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Ист");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("94072");

	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СКАД"); //04.04.2018
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("95623");
	
КонецПроцедуры

функция ПодготовитьТабДляВыгрузки()  Экспорт
	ТабНомН = Новый ТаблицаЗначений;
	
	текСхема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Рубли");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Валюты.НайтиПоКоду("643");
	
	
	ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Период");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(Период);
	
	//21.02.2018
	ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Ист");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("94072");

	//+++ 03.04.2018 - остатки по клиенту "СКАД ЛМЗ"
    ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Скад"); 
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("95623");

	//+++ 11.10.2018 - остатки по клиенту "КиК"
    ПараметрСКД = текСхема.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("КиК"); 
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = Справочники.Контрагенты.НайтиПоКоду("95781");
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(текСхема,текСхема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабНомН);// выгружать в таблицу значений
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
    возврат ТабНомН; 	
	
конецфункции	
