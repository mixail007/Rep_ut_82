 перем ДанныеРасшифровки1;
Процедура СформироватьНажатие(Элемент)
	СхемаКомпоновкиДанных1 = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для каждого Настройка Из СхемаКомпоновкиДанных1.ВариантыНастроек Цикл
		Если Элементыформы.Кнопка1.Заголовок = Настройка.Представление тогда
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.Началопериода;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2016,01,01,0,0,0);
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.конецПериода;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2016,12,31,23,59,59);
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЛето;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаЛето;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЛето;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = КонецДня(КонПериодаЛето);
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЗима;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаЗима;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЗима;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = конецДня(КонПериодаЗима);

			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЛетоФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаФЛ;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЛетоФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = КонецДня(КонПериодаФЛ);
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЗимаФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаФЗ;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЗимаФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = конецДня(КонПериодаФЗ);

			
			
			//списокПрозрачность
			списокПрозрачность = Новый СписокЗначений;
			СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000006"));
			СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000005"));
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.СписокПрозрачность;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = СписокПрозрачность;
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.ИмпортныеШины;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000006");
			
			
			ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
			КомпоновщикМакета1 = Новый КомпоновщикМакетаКомпоновкиДанных;
			УстановитьФильтры(Настройка.Настройки);
			УстановитьВидимость(Настройка.Настройки);

			МакетКомпоновки1 = КомпоновщикМакета1.Выполнить(СхемаКомпоновкиДанных1, Настройка.Настройки, ДанныеРасшифровки1);
			
			ПроцессорКомпоновкиДанных1 = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных1.Инициализировать(МакетКомпоновки1, , ДанныеРасшифровки1,истина);
			ЭлементыФормы.Результат1.Очистить();
			ПроцессорВывода1 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода1.УстановитьДокумент(ЭлементыФормы.Результат1);
			ПроцессорВывода1.Вывести(ПроцессорКомпоновкиДанных1);
			прервать;

		конецЕсли;
		
	конецЦикла;
     ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
КонецПроцедуры

Процедура Результат1ОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	перем  ВыполненноеДействие;

	    
	
	
	
	
	
	
	
	СтандартнаяОбработка = Ложь;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
   //Создадим и инициализируем обработчик расшифровки                    
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки1, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
                                                                         
    ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
    
   // Добавляем собственные действия 
    Нов = Новый СписокЗначений;
		   ЭлементРасшифровкиДанных = ДанныеРасшифровки1.Элементы[Расшифровка];
        ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
		Если  ЭлементРасшифровкиДанныхПоля.Поле = "Контрагент"  тогда
			СпрКонтрагент = ЭлементРасшифровкиДанныхПоля.Значение;
			Нов.Добавить("Занести план");

        конецЕсли;

  //  
    
  Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,Нов);
  
  Если ВыполненноеДействие = "Занести план" Тогда
	  Форма = получитьформу("Форма");
	  Форма.Контрагент = СпрКонтрагент;
	  форма.Открыть();
  конецЕсли;
	
	
	// Обрабатываем собственные действия 
   //Если ВыполненноеДействие = "Открыть" Тогда
   //	 ЭлементРасшифровкиДанных = ДанныеРасшифровки_1.Элементы[Расшифровка];
   //	 ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
   //	 ОбработкаРасшифровки.ОткрытьЗначение(ЭлементРасшифровкиДанных.Идентификатор, новый ПолеКомпоновкиДанных(ЭлементРасшифровкиДанныхПоля.Поле));
   // КонецЕсли;
    
//	Если Настройки <> Неопределено Тогда
	//   //пользователь выбрал действие, для которого нужно менять настройки 
	//    Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
			//КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			//ПереформироватьОтчет("Реализация",Настройки,ЭлементыФормы.Результат1);
	 //     НастройкиРасшифровки = ОбработкаРасшифровки.Выполнить(Расшифровка,, ДоступныеДействия);  
	//    Иначе
	//        
	//       //при других действиях создадим новый отчет, откроем форму, сформируем отчет в ней 
	//        ЭтаФорма.Открыть();
	//        КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	//        СформироватьОтчет();
	//   КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект КАК Контрагент,
		|	ЗначенияСвойствОбъектов.Значение КАК ПервичныйКонтрагент
		|ПОМЕСТИТЬ ПервичныеКонтрагенты
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &ПервичныйКонтрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ПродажиОбороты.СтоимостьОборот) КАК продажи,
		|	СУММА(ПродажиСебестоимостьОбороты.СтоимостьОборот) КАК себестоимость,
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа.Наименование ПОДОБНО ""%зим%""
		|			ТОГДА ""Зима""
		|		ИНАЧЕ ""Лето""
		|	КОНЕЦ КАК Сезон,
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.Номенклатура.Модель.Наименование ПОДОБНО ""%Nordman%""
		|			ТОГДА &Nordman
		|		КОГДА ПродажиОбороты.Номенклатура.Модель.Наименование ПОДОБНО ""%FORMULA Energy%""
		|			ТОГДА &FORMULA
		|		ИНАЧЕ ПродажиОбороты.Номенклатура.Производитель
		|	КОНЕЦ КАК НоменклатураПроизводитель,
		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК ПродажиКоличество,
		|	ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ продажиОборот
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&Нач, &Кон, Регистратор, ) КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&Нач, &Кон, Регистратор, ) КАК ПродажиСебестоимостьОбороты
		|		ПО ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
		|			И ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура
		|			И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя
		|			И ПродажиОбороты.Подразделение = ПродажиСебестоимостьОбороты.Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа.Наименование ПОДОБНО ""%зим%""
		|			ТОГДА ""Зима""
		|		ИНАЧЕ ""Лето""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.Номенклатура.Модель.Наименование ПОДОБНО ""%Nordman%""
		|			ТОГДА &Nordman
		|		КОГДА ПродажиОбороты.Номенклатура.Модель.Наименование ПОДОБНО ""%FORMULA Energy%""
		|			ТОГДА &FORMULA
		|		ИНАЧЕ ПродажиОбороты.Номенклатура.Производитель
		|	КОНЕЦ,
		|	ПродажиОбороты.Номенклатура.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрозрачностьКонтрагентовНоменклатурныеГруппы.НоменклатурнаяГруппа,
		|	ПрозрачностьКонтрагентовПроизводители.Производитель,
		|	ПрозрачностьКонтрагентовНоменклатурныеГруппы.Ссылка
		|ПОМЕСТИТЬ ДанныеПрозрачности
		|ИЗ
		|	Справочник.ПрозрачностьКонтрагентов.НоменклатурныеГруппы КАК ПрозрачностьКонтрагентовНоменклатурныеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрозрачностьКонтрагентов.Производители КАК ПрозрачностьКонтрагентовПроизводители
		|		ПО ПрозрачностьКонтрагентовНоменклатурныеГруппы.Ссылка = ПрозрачностьКонтрагентовПроизводители.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(продажиОборот.продажи, 0)) КАК продажиСезона,
		|	СУММА(ЕСТЬNULL(продажиОборот.себестоимость, 0)) КАК себестоимостьСезона,
		|	ДанныеПрозрачности.Производитель КАК НоменклатураПроизводитель,
		|	СУММА(ЕСТЬNULL(продажиОборот.ПродажиКоличество, 0)) КАК ПродажиКоличество,
		|	ДанныеПрозрачности.Ссылка КАК Прозрачность,
		|	продажиОборот.НоменклатураПроизводитель КАК НоменклатураПроизводитель1
		|ПОМЕСТИТЬ ПоСезонам
		|ИЗ
		|	ДанныеПрозрачности КАК ДанныеПрозрачности
		|		ЛЕВОЕ СОЕДИНЕНИЕ продажиОборот КАК продажиОборот
		|		ПО (продажиОборот.НоменклатурнаяГруппа = ДанныеПрозрачности.НоменклатурнаяГруппа)
		|			И (ВЫБОР
		|				КОГДА ДанныеПрозрачности.Производитель = &Прочее
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ продажиОборот.НоменклатураПроизводитель = ДанныеПрозрачности.Производитель
		|			КОНЕЦ)
		|ГДЕ
		|	99 = 99
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПрозрачности.Ссылка,
		|	ДанныеПрозрачности.Производитель,
		|	продажиОборот.НоменклатураПроизводитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Прозрачность,
		|	НоменклатураПроизводитель1,
		|	НоменклатураПроизводитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ПоСезонам.продажиСезона) КАК продажиСезона,
		|	СУММА(ПоСезонам.себестоимостьСезона) КАК себестоимостьСезона,
		|	ПоСезонам.НоменклатураПроизводитель,
		|	СУММА(ПоСезонам.ПродажиКоличество) КАК ПродажиКоличество,
		|	ПоСезонам.Прозрачность
		|ПОМЕСТИТЬ ПоСезонам2
		|ИЗ
		|	ПоСезонам КАК ПоСезонам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоСезонам КАК ПоСезонам1
		|		ПО ПоСезонам.Прозрачность = ПоСезонам1.Прозрачность
		|			И (ВЫБОР
		|				КОГДА ПоСезонам1.НоменклатураПроизводитель = ПоСезонам1.НоменклатураПроизводитель1
		|						И ПоСезонам.НоменклатураПроизводитель <> ПоСезонам.НоменклатураПроизводитель1
		|					ТОГДА ПоСезонам.НоменклатураПроизводитель1 = ПоСезонам1.НоменклатураПроизводитель1
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ГДЕ
		|	ПоСезонам1.НоменклатураПроизводитель1 ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоСезонам.Прозрачность,
		|	ПоСезонам.НоменклатураПроизводитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Производитель,
		|	СУММА(ВЫБОР
		|			КОГДА &Сезон = ""Лето""
		|				ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|			КОГДА &Сезон = ""Зима""
		|				ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|			ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем
		|		КОНЕЦ) КАК КоличествоСезонЯШТ,
		|	СУММА(ВЫБОР
		|			КОГДА &Сезон = ""Лето""
		|				ТОГДА ВЫБОР
		|						КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛето < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|							ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|						ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛето
		|					КОНЕЦ
		|			КОГДА &Сезон = ""Зима""
		|				ТОГДА ВЫБОР
		|						КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗима < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|							ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|						ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗима
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЯШТ
		|						ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЯШТ
		|					ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоСезон,
		|	ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Прозрачность,
		|	СУММА(ВЫБОР
		|			КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.УровеньЗакупок = ""дилер""
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &Сезон = ""Лето""
		|						ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|					КОГДА &Сезон = ""Зима""
		|						ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|					ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоЯШТДилер,
		|	СУММА(ВЫБОР
		|			КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.УровеньЗакупок = ""дилер""
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &Сезон = ""Лето""
		|						ТОГДА ВЫБОР
		|								КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛето < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|									ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛетоЯШТ
		|								ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЛето
		|							КОНЕЦ
		|					КОГДА &Сезон = ""Зима""
		|						ТОГДА ВЫБОР
		|								КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗима < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|									ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗимаЯШТ
		|								ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЗима
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем < ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЯШТ
		|								ТОГДА ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоЯШТ
		|							ИНАЧЕ ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.КоличествоГодовойОбъем
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК КоличествоДилер
		|ПОМЕСТИТЬ Свод
		|ИЗ
		|	Справочник.ДополнительнаяИнформацияПоКонтрагентам.ПрозрачностьКонтрагента КАК ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПервичныеКонтрагенты КАК ПервичныеКонтрагенты
		|		ПО ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Ссылка.Владелец = ПервичныеКонтрагенты.Контрагент
		|ГДЕ
		|	ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Год = &Год
		|	И ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Полугодие = &Полугодие
		|	И ПервичныеКонтрагенты.ПервичныйКонтрагент ЕСТЬ NULL 
		|	И НЕ(ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Производитель = &Прочее
		|				И ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Прозрачность В (&СписокПрозрачность))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Прозрачность,
		|	ДополнительнаяИнформацияПоКонтрагентамПрозрачностьКонтрагента.Производитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланированиеНаценкиПоБрендам.Производитель,
		|	ПланированиеНаценкиПоБрендам.КоличествоПлан,
		|	ПланированиеНаценкиПоБрендам.НаценкаПлан,
		|	ПланированиеНаценкиПоБрендам.ПроцентБонуса,
		|	ПланированиеНаценкиПоБрендам.ПроцентСреднейЦены
		|ПОМЕСТИТЬ СозданныйПлан
		|ИЗ
		|	РегистрСведений.ПланированиеНаценкиПоБрендам КАК ПланированиеНаценкиПоБрендам
		|ГДЕ
		|	ПланированиеНаценкиПоБрендам.Дата = &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Свод.Производитель,
		|	Свод.КоличествоСезонЯШТ,
		|	ЕСТЬNULL(Свод.КоличествоСезон, 0) КАК Количество,
		|	Свод.Прозрачность,
		|	ЕСТЬNULL(Свод.КоличествоЯШТДилер, 0) КАК КоличествоЯШТДилер,
		|	ЕСТЬNULL(Свод.КоличествоДилер, 0) КАК КоличествоДилер,
		|	ЕСТЬNULL(ПоСезонам2.продажиСезона, 0) КАК СуммаПродажи,
		|	ЕСТЬNULL(ПоСезонам2.себестоимостьСезона, 0) КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Свод.КоличествоСезон, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Свод.КоличествоСезонЯШТ / Свод.КоличествоСезон * 100 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ДоляЯШТ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Свод.КоличествоДилер, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(Свод.КоличествоЯШТДилер / Свод.КоличествоДилер * 100 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ДоляЯШТДилер,
		|	ЕСТЬNULL(ПоСезонам2.продажиСезона, 0) - ЕСТЬNULL(ПоСезонам2.себестоимостьСезона, 0) КАК ВаловаяПрибыль,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоСезонам2.себестоимостьСезона, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(ПоСезонам2.продажиСезона, 0) - ЕСТЬNULL(ПоСезонам2.себестоимостьСезона, 0)) / ПоСезонам2.себестоимостьСезона * 100 КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ПроцентНаценки,
		|	ПоСезонам2.ПродажиКоличество
		|ПОМЕСТИТЬ СводСПродажами
		|ИЗ
		|	Свод КАК Свод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПоСезонам2 КАК ПоСезонам2
		|		ПО Свод.Производитель = ПоСезонам2.НоменклатураПроизводитель
		|			И Свод.Прозрачность = ПоСезонам2.Прозрачность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланируемыеБонусыОтПоставщиков.Производитель,
		|	ПланируемыеБонусыОтПоставщиков.Процент
		|ПОМЕСТИТЬ БонусПоставщиков
		|ИЗ
		|	РегистрСведений.ПланируемыеБонусыОтПоставщиков КАК ПланируемыеБонусыОтПоставщиков
		|ГДЕ
		|	ПланируемыеБонусыОтПоставщиков.Дата = &Нач
		|	И ПланируемыеБонусыОтПоставщиков.Сезон = &СезонБонуса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СводСПродажами.Производитель КАК Производитель,
		|	СводСПродажами.КоличествоСезонЯШТ КАК КоличествоЯШТ,
		|	СводСПродажами.Прозрачность КАК Группа,
		|	СводСПродажами.КоличествоЯШТДилер КАК КоличествоДилерЯШТ,
		|	СводСПродажами.КоличествоДилер КАК КоличествоДилер,
		|	ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) КАК ПлановоеКоличество,
		|	ЕСТЬNULL(СозданныйПлан.НаценкаПлан, 0) КАК ПлановыйПроцентНаценки,
		|	ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) КАК КоличествоПлан,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество)
		|			КОНЕЦ * (1 + ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) / 100) * (1 + ЕСТЬNULL(СозданныйПлан.НаценкаПлан, 0) / 100)
		|	КОНЕЦ КАК ПлановаяСуммаВыручки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ СозданныйПлан.КоличествоПлан * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество)
		|			КОНЕЦ * (1 + ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) / 100) * ЕСТЬNULL(СозданныйПлан.НаценкаПлан, 0) / 100
		|	КОНЕЦ КАК ПлановаяВаловаяПрибыль,
		|	СводСПродажами.ДоляЯШТ КАК ДоляЯШТ,
		|	СводСПродажами.ДоляЯШТДилер КАК ДоляЯШТДилер,
		|	СводСПродажами.Себестоимость КАК Себестоимость,
		|	СводСПродажами.СуммаПродажи КАК СуммаПродажи,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СводСПродажами.Себестоимость, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СводСПродажами.ВаловаяПрибыль / СводСПродажами.Себестоимость
		|	КОНЕЦ * 100 КАК ПроцентНаценки,
		|	СводСПродажами.Количество КАК Количество,
		|	СводСПродажами.ВаловаяПрибыль КАК ВаловаяПрибыль,
		|	"" КАК ВсеПродажи,
		|																																																														   "" КАК БезУчетаПрямыхПоставок,
		|	"" КАК ДанныеПродаж,
		|																																																															"" КАК Планирование,
		|	СводСПродажами.ПродажиКоличество КАК ПродажиКоличество,
		|	ЕСТЬNULL(СозданныйПлан.ПроцентБонуса, БонусПоставщиков.Процент) КАК БонусПлан,
		|	СводСПродажами.Себестоимость / 1.18 * ЕСТЬNULL(БонусПоставщиков.Процент, 0) / 100 КАК СуммаБонусаПродажи,
		|	ЕСТЬNULL(БонусПоставщиков.Процент, 0) КАК БонусПродажи,
		|	ЕСТЬNULL(СозданныйПлан.ПроцентБонуса, ЕСТЬNULL(БонусПоставщиков.Процент, 0)) * ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) * (1 + ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) / 100) / СводСПродажами.ПродажиКоличество) / 1.18
		|			КОНЕЦ / 100
		|	КОНЕЦ КАК СуммаБонусаПлан,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СводСПродажами.Себестоимость, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (СводСПродажами.ВаловаяПрибыль + СводСПродажами.Себестоимость / 1.18 * ЕСТЬNULL(БонусПоставщиков.Процент, 0) / 100) / СводСПродажами.Себестоимость
		|	КОНЕЦ * 100 КАК ПроцентНаценкиБонус,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|				ИЛИ ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ВЫБОР
		|				КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|							ТОГДА 0
		|						ИНАЧЕ СозданныйПлан.КоличествоПлан * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество)
		|					КОНЕЦ * ЕСТЬNULL(СозданныйПлан.НаценкаПлан, 0) / 100
		|			КОНЕЦ + ЕСТЬNULL(СозданныйПлан.ПроцентБонуса, ЕСТЬNULL(БонусПоставщиков.Процент, 0)) * ВЫБОР
		|				КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество) / 1.18
		|					КОНЕЦ / 100
		|			КОНЕЦ) / (ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество))
		|	КОНЕЦ * 100 КАК ПлановыйПроцентНаценкиБонус,
		|	ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) КАК ПроцентРостаСебестоимости,
		|	ЕСТЬNULL(СозданныйПлан.ПроцентБонуса, ЕСТЬNULL(БонусПоставщиков.Процент, 0)) * ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) * (1 + ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) / 100) / СводСПродажами.ПродажиКоличество) / 1.18
		|			КОНЕЦ / 100
		|	КОНЕЦ + ВЫБОР
		|		КОГДА ЕСТЬNULL(СозданныйПлан.КоличествоПлан, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(СводСПродажами.ПродажиКоличество, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ СозданныйПлан.КоличествоПлан * (ЕСТЬNULL(СводСПродажами.Себестоимость, 0) / СводСПродажами.ПродажиКоличество)
		|			КОНЕЦ * (1 + ЕСТЬNULL(СозданныйПлан.ПроцентСреднейЦены, 0) / 100) * ЕСТЬNULL(СозданныйПлан.НаценкаПлан, 0) / 100
		|	КОНЕЦ КАК ПалноваяВаловаяПрибыльСУчетомБонуса
		|ИЗ
		|	СводСПродажами КАК СводСПродажами
		|		ЛЕВОЕ СОЕДИНЕНИЕ СозданныйПлан КАК СозданныйПлан
		|		ПО СводСПродажами.Производитель = СозданныйПлан.Производитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ БонусПоставщиков КАК БонусПоставщиков
		|		ПО СводСПродажами.Производитель = БонусПоставщиков.Производитель
		|ГДЕ
		|	98 = 98
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	СводСПродажами.Производитель.Наименование
		|ИТОГИ
		|	СУММА(КоличествоЯШТ),
		|	СУММА(КоличествоДилерЯШТ),
		|	СУММА(КоличествоДилер),
		|	СУММА(ПлановоеКоличество),
		|	ВЫБОР
		|		КОГДА СУММА(ПлановаяСуммаВыручки) - СУММА(ПлановаяВаловаяПрибыль) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ПлановаяВаловаяПрибыль) / (СУММА(ПлановаяСуммаВыручки) - СУММА(ПлановаяВаловаяПрибыль))
		|	КОНЕЦ * 100 КАК ПлановыйПроцентНаценки,
		|	СУММА(КоличествоПлан),
		|	СУММА(ПлановаяСуммаВыручки),
		|	СУММА(ПлановаяВаловаяПрибыль),
		|	ВЫБОР
		|		КОГДА СУММА(Количество) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(КоличествоЯШТ) / СУММА(Количество) * 100
		|	КОНЕЦ КАК ДоляЯШТ,
		|	ВЫБОР
		|		КОГДА СУММА(КоличествоДилер) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(СводСПродажами.КоличествоЯШТДилер) / СУММА(КоличествоДилер) * 100
		|	КОНЕЦ КАК ДоляЯШТДилер,
		|	СУММА(Себестоимость),
		|	СУММА(СуммаПродажи),
		|	ВЫБОР
		|		КОГДА СУММА(Себестоимость) = 0
		|			ТОГДА 0
		|		ИНАЧЕ СУММА(ВаловаяПрибыль) / СУММА(Себестоимость) * 100
		|	КОНЕЦ КАК ПроцентНаценки,
		|	СУММА(Количество),
		|	СУММА(ВаловаяПрибыль),
		|	СУММА(ПродажиКоличество),
		|	СУММА(СуммаБонусаПродажи),
		|	СУММА(СуммаБонусаПлан),
		|	ВЫБОР
		|		КОГДА СУММА(Себестоимость) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (СУММА(ВаловаяПрибыль) + СУММА(СуммаБонусаПродажи)) / СУММА(Себестоимость) * 100
		|	КОНЕЦ КАК ПроцентНаценкиБонус,
		|	ВЫБОР
		|		КОГДА СУММА(ПлановаяСуммаВыручки) - СУММА(ПлановаяВаловаяПрибыль) = 0
		|			ТОГДА 0
		|		ИНАЧЕ (СУММА(ПлановаяВаловаяПрибыль) + СУММА(СуммаБонусаПлан)) / (СУММА(ПлановаяСуммаВыручки) - СУММА(ПлановаяВаловаяПрибыль))
		|	КОНЕЦ * 100 КАК ПлановыйПроцентНаценкиБонус
		|ПО
		|	Группа";

	Запрос.УстановитьПараметр("Год", "2016");
	Запрос.УстановитьПараметр("Полугодие", "целый год");
    Запрос.УстановитьПараметр("Дата", Дата(2017,01,01));
    Запрос.УстановитьПараметр("ПервичныйКонтрагент", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90230"));
	Запрос.УстановитьПараметр("Nordman", Справочники.Производители.НайтиПоКоду("3795"));
	Запрос.УстановитьПараметр("FORMULA", Справочники.Производители.НайтиПоКоду("3796"));
	Запрос.УстановитьПараметр("Нач",Дата(2016,1,1));
	Запрос.УстановитьПараметр("Кон",Дата(2016,12,31,23,59,59));
	Запрос.УстановитьПараметр("СезонБонуса", Сезон);
	Запрос.УстановитьПараметр("Прочее", Справочники.Производители.НайтиПоКоду("3777"));
	 Запрос.УстановитьПараметр("Сезон", "");
	Если Сезон = перечисления.ТипыСезонности.лето тОгда
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","продажиОборот.Сезон = &Сезон");
	 Запрос.УстановитьПараметр("Сезон", "Лето");
    КонецЕсли;
	Если Сезон = перечисления.ТипыСезонности.зима тОгда
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","продажиОборот.Сезон = &Сезон");
//	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"97 = 97","ПланируемыеБонусыОтПоставщиков.Сезон = &Сезон");
	 Запрос.УстановитьПараметр("Сезон", "Зима");
    КонецЕсли;
	Если ЗначениеЗаполнено(ГруппаПрозрачности) тогда
	 Запрос.Текст = СтрЗаменить(Запрос.Текст,"98 = 98","СводСПродажами.Прозрачность В иерархии (&ГруппаПрозрачность)");
	 Запрос.УстановитьПараметр("ГруппаПрозрачность", ГруппаПрозрачности);
    конецесли;
//списокПрозрачность
    списокПрозрачность = Новый СписокЗначений;
	СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000006"));
	СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000005"));
	Запрос.УстановитьПараметр("СписокПрозрачность", СписокПрозрачность);
	ЭлементыФормы.ПланированиеНаценки.Значение = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	
	
	
КонецПроцедуры


Процедура ПланированиеНаценкиПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки из Оформлениястрок Цикл
	ОформлениеСтроки.Ячейки.ВсеПродажи.Видимость = ЛожЬ; 	
	ОформлениеСтроки.Ячейки.БезУчетаПрямыхПоставок.Видимость = ЛожЬ; 
	ОформлениеСтроки.Ячейки.ДанныеПродаж.Видимость = ЛожЬ; 
	ОформлениеСтроки.Ячейки.Планирование.Видимость = ЛожЬ; 
	конецЦикла;	

КонецПроцедуры

Процедура ПланированиеНаценкиПлановоеКоличествоПриИзменении(Элемент)
    Пересчет();
КонецПроцедуры

Процедура ПланированиеНаценкиПлановыйПроцентНаценкиПриИзменении(Элемент)
	Пересчет();
КонецПроцедуры

Процедура ПланированиеНаценкиБонусПланПриИзменении(Элемент)
	Пересчет();
КонецПроцедуры

процедура Пересчет()
		стр = ЭлементыФормы.ПланированиеНаценки.текущиеДанные;
        Стр.ПлановаяСуммаВыручки = Стр.ПлановоеКоличество*Стр.Себестоимость/стр.ПродажиКоличество*(1+стр.ПроцентРостаСебестоимости/100)*(100+стр.ПлановыйПроцентНаценки)/100;
	    стр.СуммаБонусаПлан = Стр.ПлановоеКоличество*Стр.Себестоимость*(1+стр.ПроцентРостаСебестоимости/100)/стр.ПродажиКоличество/1.18*стр.БонусПлан/100;
		стр.ПлановаяВаловаяПрибыль = Стр.ПлановоеКоличество*Стр.Себестоимость/стр.ПродажиКоличество*(1+стр.ПроцентРостаСебестоимости/100)*(стр.ПлановыйПроцентНаценки)/100;
		стр.ПлановыйПроцентНаценкиБонус = (Стр.ПлановоеКоличество*Стр.Себестоимость/стр.ПродажиКоличество*(1+стр.ПроцентРостаСебестоимости/100)*(стр.ПлановыйПроцентНаценки)/100+стр.СуммаБонусаПлан)/(Стр.ПлановоеКоличество*Стр.Себестоимость/стр.ПродажиКоличество)*100;

		пересчетИтогов(стр);
конецПроцедуры
процедура 	пересчетИтогов(стр);
	РодительскаяСтрока = Стр.Родитель;
	ПлановоеКоличество =0;
	ПлановаяСуммаВыручки =0;
	СуммаБонусаПлан =0 ;
	ПлановаяВаловаяПрибыль =0;
	Если РодительскаяСтрока <> Неопределено Тогда
		Для каждого стр из РодительскаяСтрока.Строки Цикл
	ПлановоеКоличество =ПлановоеКоличество+стр.ПлановоеКоличество;
	ПлановаяСуммаВыручки =ПлановаяСуммаВыручки+стр.ПлановаяСуммаВыручки;
	СуммаБонусаПлан =СуммаБонусаПлан+стр.СуммаБонусаПлан;
	ПлановаяВаловаяПрибыль =ПлановаяВаловаяПрибыль+стр.ПлановаяВаловаяПрибыль;
    конецЦикла;
    РодительскаяСтрока.ПлановоеКоличество = ПлановоеКоличество;
	РодительскаяСтрока.ПлановаяСуммаВыручки = ПлановаяСуммаВыручки;
	РодительскаяСтрока.СуммаБонусаПлан = СуммаБонусаПлан ;
	РодительскаяСтрока.ПлановаяВаловаяПрибыль = ПлановаяВаловаяПрибыль;
    РодительскаяСтрока.ПлановыйПроцентНаценки = (ПлановаяВаловаяПрибыль)/(ПлановаяСуммаВыручки-ПлановаяВаловаяПрибыль)*100;
    РодительскаяСтрока.ПлановыйПроцентНаценкиБонус = (ПлановаяВаловаяПрибыль+СуммаБонусаПлан)/(ПлановаяСуммаВыручки-ПлановаяВаловаяПрибыль)*100;
	конецЕсли;	
конецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	Для каждого строка из ПланированиеНаценки.Строки Цикл
		Если не ЗначениеЗаполнено(строка.Производитель) Тогда
			Для каждого стр из строка.Строки Цикл
				Запись = РегистрыСведений.ПланированиеНаценкиПоБрендам.СоздатьМенеджерЗаписи();
				Запись.Дата = Дата(2017,1,1);
				Запись.Производитель = стр.Производитель;
				Запись.КоличествоПлан =стр.ПлановоеКоличество;
				Запись.НаценкаПлан = стр.ПлановыйПроцентНаценки;
				Запись.ПроцентБонуса = стр.БонусПлан;
				Запись.ПроцентСреднейЦены = стр.ПроцентРостаСебестоимости;
				Запись.Записать(истина);
			конецЦикла;
		конецЕсли;	
	конецЦикла;	
КонецПроцедуры


Процедура Кнопка1Стандартный(Кнопка)
	СхемаКомпоновкиДанных1 = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для каждого Настройка Из СхемаКомпоновкиДанных1.ВариантыНастроек Цикл
		Если Кнопка.Текст = Настройка.Представление тогда
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.Началопериода;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2016,01,01,0,0,0);
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.конецПериода;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2016,12,31,23,59,59);
			
				ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.Началопериода17;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2017,01,01,0,0,0);
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.конецПериода17;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Дата(2017,12,31,23,59,59);

			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЛето;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаЛето;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЛето;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = КонецДня(КонПериодаЛето);
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЗима;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаЗима;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЗима;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = конецДня(КонПериодаЗима);

			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЛетоФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаФЛ;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЛетоФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = КонецДня(КонПериодаФЛ);
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.НачЗимаФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = НачПериодаФЗ;
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.КонЗимаФ;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = конецДня(КонПериодаФЗ);

			
			
			//списокПрозрачность
			списокПрозрачность = Новый СписокЗначений;
			СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000006"));
			СписокПрозрачность.Добавить(Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000005"));
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.СписокПрозрачность;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = СписокПрозрачность;
			
			ПараметрСКД = СхемаКомпоновкиДанных1.Параметры.ИмпортныеШины;
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			ПараметрСКД.Значение  = Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000006");
			
			
			ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
			КомпоновщикМакета1 = Новый КомпоновщикМакетаКомпоновкиДанных;
			УстановитьФильтры(Настройка.Настройки);
			УстановитьВидимость(Настройка.Настройки);

			МакетКомпоновки1 = КомпоновщикМакета1.Выполнить(СхемаКомпоновкиДанных1, Настройка.Настройки, ДанныеРасшифровки1);
			
			ПроцессорКомпоновкиДанных1 = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных1.Инициализировать(МакетКомпоновки1, , ДанныеРасшифровки1,истина);
			ЭлементыФормы.Результат1.Очистить();
			ПроцессорВывода1 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода1.УстановитьДокумент(ЭлементыФормы.Результат1);
			ПроцессорВывода1.Вывести(ПроцессорКомпоновкиДанных1);
			
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
    ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Страница1;
   ЭлементыФормы.Кнопка1.Заголовок = Настройка.Представление; 
КонецПроцедуры

Процедура ПриОткрытии()
	ГруппаПрозрачности = Справочники.ПрозрачностьКонтрагентов.НайтиПоКоду("000000001");
	Сезон = перечисления.ТипыСезонности.лето;
	ЭлементыФормы.ВидСравненияВажности.Значение = "Меньше";
	ВсеПродажи = Истина;
	БезУчетаПрямыхПоставок = истина;
	ДанныеПродаж = Истина;
	Планирование = Истина;
	
	СхемаКомпоновкиДанных1 = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроек1.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных1)); 
    КомпоновщикНастроек1.ЗагрузитьНастройки(СхемаКомпоновкиДанных1.НастройкиПоУмолчанию); 

	Лето = Истина;
	ВсеПродажиЛето = Истина;
	ДилерЛето = Истина;
	ПланированиеЛето = Истина;
	ПланированиеСЗЛето = Истина;

	Зима = Истина;
	ВсеПродажиЗима = Истина;
	ДилерЗима = Истина;
    ПланированиеЗима = Истина;
    ПланированиеСЗЗима = Истина;
	
	ПоГоду = Истина;
	ВсеПродажиГод = Истина;
	ДилерГод = Истина;
	ПланированиеГод = Истина;
	
	продажи = Истина;
	
	НачПериодаЛето = Дата(2017,11,01);
	КонПериодаЛето = Дата(2018,03,31,23,59,59);
	НачПериодаЗима = Дата(2018,04,01);
	КонПериодаЗима = Дата(2018,10,31,23,59,59);
	
	НачПериодаФЛ = Дата(2017,11,01);
	КонПериодаФЛ = Дата(2018,04,30,23,59,59);
	НачПериодаФЗ = Дата(2018,05,01);
	КонПериодаФЗ = Дата(2018,10,31,23,59,59);
	
КонецПроцедуры

Процедура ПланированиеНаценкиПроцентРостаСебестоимостиПриИзменении(Элемент)
		Пересчет();

КонецПроцедуры

Процедура ВсеПриИзменении(Элемент)
ИзменитьНастройки();
КонецПроцедуры

Процедура ПоМенеджеруПриИзменении(Элемент)
	КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Отбор.Элементы.Очистить();
	Если ЗначениеЗаполнено(ПоМенеджеру)тогда
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ОсновнойМенеджерКонтрагента")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = ПоМенеджеру;
		КомпоновщикНастроек.Настройки.Структура[0].Отбор.Элементы.Очистить();
		Если ЗначениеЗаполнено(ПоМенеджеру)тогда
			НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("НаправлениеПродаж")).Поле;
			НовыйЭлементОтбора.ПравоеЗначение = ПоМенеджеру.НаправлениеПродаж;
		конецЕсли;	
	конецЕсли;	

КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
КонецПроцедуры

Процедура ВажностьПриИзменении(Элемент)
	ИзменитьНастройки();
КонецПроцедуры

процедура ИзменитьНастройки()
	Если ПоЗаполненности=0  и не ЗначениеЗаполнено(Важность) Тогда
		КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Очистить();
	иначеЕсли ПоЗаполненности=0  и ЗначениеЗаполнено(Важность) Тогда
		КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Очистить();
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Важность")).Поле;
		Если ЭлементыФормы.ВидСравненияВажности.Значение = "Меньше" Тогда
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	    иначе
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		конецЕсли;
		НовыйЭлементОтбора.ПравоеЗначение = Важность;
	иначеесли   ПоЗаполненности=1 Тогда
		КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Очистить();
		Если ЗначениеЗаполнено(Важность)тогда
			НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Важность")).Поле;
		Если ЭлементыФормы.ВидСравненияВажности.Значение = "Меньше" Тогда
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	    иначе
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		конецЕсли;
			НовыйЭлементОтбора.ПравоеЗначение = Важность;
		конецЕсли;	
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Заполнено")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = истина;
	иначеЕсли  ПоЗаполненности=2 Тогда
				КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Очистить();
		Если ЗначениеЗаполнено(Важность)тогда
			НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Важность")).Поле;
		Если ЭлементыФормы.ВидСравненияВажности.Значение = "Меньше" Тогда
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	    иначе
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		конецЕсли;
			НовыйЭлементОтбора.ПравоеЗначение = Важность;
		конецЕсли;	
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Структура[0].Структура[0].Структура[0].Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Заполнено")).Поле;
		НовыйЭлементОтбора.ПравоеЗначение = ложь;
	конецЕсли;	

конецПроцедуры	

Процедура ВидСравненияВажностиПриИзменении(Элемент)
	ИзменитьНастройки();
КонецПроцедуры


Процедура ВсеПродажиПриИзменении(Элемент)
	ЭлементыФормы.ПланированиеНаценки.Колонки.ВсеПродажи.Видимость = ВсеПродажи;
	ЭлементыФормы.ПланированиеНаценки.Колонки.Количество.Видимость = ВсеПродажи;
	ЭлементыФормы.ПланированиеНаценки.Колонки.КоличествоЯШТ.Видимость = ВсеПродажи;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ДоляЯШТ.Видимость = ВсеПродажи;
КонецПроцедуры


Процедура БезУчетаПрямыхПоставокПриИзменении(Элемент)
	ЭлементыФормы.ПланированиеНаценки.Колонки.БезУчетаПрямыхПоставок.Видимость = БезУчетаПрямыхПоставок;
	ЭлементыФормы.ПланированиеНаценки.Колонки.КоличествоДилер.Видимость = БезУчетаПрямыхПоставок;
	ЭлементыФормы.ПланированиеНаценки.Колонки.КоличествоДилерЯШТ.Видимость = БезУчетаПрямыхПоставок;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ДоляЯШТДилер.Видимость = БезУчетаПрямыхПоставок;
КонецПроцедуры


Процедура ДанныеПродажПриИзменении(Элемент)
	ЭлементыФормы.ПланированиеНаценки.Колонки.ДанныеПродаж.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.СуммаПродажи.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.Себестоимость.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ВаловаяПрибыль.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПроцентНаценки.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.БонусПродажи.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.СуммаБонусаПродажи.Видимость = ДанныеПродаж;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПроцентНаценкиБонус.Видимость = ДанныеПродаж;
КонецПроцедуры


Процедура ПланированиеПриИзменении(Элемент)
	ЭлементыФормы.ПланированиеНаценки.Колонки.Планирование.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПлановоеКоличество.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПроцентРостаСебестоимости.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПлановыйПроцентНаценки.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПлановаяСуммаВыручки.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПлановаяВаловаяПрибыль.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.БонусПлан.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.СуммаБонусаПлан.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПлановыйПроцентНаценкиБонус.Видимость = Планирование;
	ЭлементыФормы.ПланированиеНаценки.Колонки.ПалноваяВаловаяПрибыльСУчетомБонуса.Видимость = Планирование;
КонецПроцедуры

процедура УстановитьФильтрПоДоле(Настройки,Поле,ВидСравнения,Значение)

	 			Для каждого эл из настройки.Структура Цикл
				Если эл.Имя = "Контрагент" или эл.Имя = "Производитель" тогда
					НовыйЭлементОтбора = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
					новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВидСравнения))," ","")];
					НовыйЭлементОтбора.ПравоеЗначение = Значение;
					возврат;
				иначе
					УстановитьФильтрПоДоле(эл,Поле,ВидСравнения,Значение);
				конецЕсли;
			КонецЦикла;
конецПроцедуры
 процедура УстановитьФильтрПоОМ(Настройки,Поле,ВидСравнения,Значение)

	 			Для каждого эл из настройки.Структура Цикл
				Если эл.Имя = "Контрагент" или эл.Имя = "Контрагент_"  тогда
					НовыйЭлементОтбора = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
					новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВидСравнения))," ","")];
					НовыйЭлементОтбора.ПравоеЗначение = Значение;
					возврат;
				иначе
					УстановитьФильтрПоОМ(эл,Поле,ВидСравнения,Значение);
				конецЕсли;
			КонецЦикла;
конецПроцедуры
 процедура УстановитьФильтрПоСР(Настройки,Поле,ВидСравнения,Значение)

	 			Для каждого эл из настройки.Структура Цикл
				Если эл.Имя = "Контрагент" или эл.Имя = "Контрагент_"  тогда
			//    Если  эл.Имя = "Контрагент_"  тогда

					НовыйЭлементОтбора = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
					новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВидСравнения))," ","")];
					НовыйЭлементОтбора.ПравоеЗначение = Значение;
					возврат;
				иначе
					УстановитьФильтрПоСР(эл,Поле,ВидСравнения,Значение);
				конецЕсли;
			КонецЦикла;
конецПроцедуры




процедура ФильтрПоДолеОчистить(Настройки)
			Для каждого эл из настройки.Структура Цикл
				Если эл.Имя = "Контрагент" или эл.Имя = "Производитель" или эл.Имя = "Контрагент_" тогда
					Эл.Отбор.Элементы.Очистить();
					возврат;
				иначе
					ФильтрПоДолеОчистить(эл);
				конецЕсли;
			КонецЦикла;
конецПроцедуры

Процедура УстановитьФильтры(Настройки)
  	    Настройки.Отбор.Элементы.Очистить();
		ФильтрПоДолеОчистить(Настройки);
		//количествоЛето
		Если КЛ тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЛето"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЛето))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЛето;
		конецЕсли;
		//КоличествоЛетоЯШТ
		Если КЛЯШТ тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЛетоЯШТ"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТЛето))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТЛето;
	    конецЕсли;
	    //Доля лето
		Если ДЛ тогда
			УстановитьФильтрПоДоле(Настройки,"ДоляЛето",ВС_ДоляЯШТЛето,ДоляЯШТЛето);
		конецЕсли;
		
		
		//количествоЛетоДилер
		Если КЛД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЛетоДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЛетоДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЛетоДилер;
		конецЕсли;
		//КоличествоЛетоЯШТДилер
		Если КЛЯШТД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЛетоЯШТДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТЛетоДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТЛетоДилер;
	    конецЕсли;
	    //Доля лето дилер
		Если ДЛД тогда	
			УстановитьФильтрПоДоле(Настройки,"ДоляЛетоДилер",ВС_ДоляЯШТЛетоДилер,ДоляЯШТЛетоДилер);
		конецЕсли;
		
		
		
		//количествоЗима
		Если КЗ тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЗима"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЗима))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЗима;
		конецЕсли;
		//КоличествоЗимаЯШТ
		Если КЗЯШТ тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЗимаЯШТ"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТЗима))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТЗима;
	    конецЕсли;
	    //Доля Зима
		Если ДЗ тогда
		УстановитьФильтрПоДоле(Настройки,"ДоляЗима",ВС_ДоляЯШТЗима,ДоляЯШТЗима);
		конецЕсли;
		
		
		//количествоЗимаДилер
		Если КЗД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЗимаДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЗимаДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЗимаДилер;
		конецЕсли;
		//КоличествоЗимаЯШТДилер
		Если КЗЯШТД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЗимаЯШТДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТЗимаДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТЗимаДилер;
	    конецЕсли;
	    //Доля Зима дилер
		Если ДЗД тогда	
		УстановитьФильтрПоДоле(Настройки,"ДоляЗимаДилер",ВС_ДоляЯШТЗимаДилер,ДоляЯШТЗимаДилер);
		конецЕсли;
		
		
		
		
		//количествоПродажи
		Если КП тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Количество"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоПродажи))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоПродажи;
		конецЕсли;
		//КоличествоПродажиЯШТ
		Если КЯШТП тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЯШТ"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТПродажи))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТПродажи;
	    конецЕсли;
	    //Доля Продажи
		Если ДП тогда
		УстановитьФильтрПоДоле(Настройки,"ДоляИтого",ВС_ДоляЯШТПродажи,ДоляЯШТПродажи);
		конецЕсли;
		
		
		//количествоПродажиДилер
		Если КПД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоПродажиДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоПродажиДилер;
		конецЕсли;
		//КоличествоПродажиЯШТДилер
		Если КПЯШТД тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоЯШТДилер"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_КоличествоЯШТПродажиДилер))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = КоличествоЯШТПродажиДилер;
	    конецЕсли;
	    //Доля Продажи дилер
		Если ДПД тогда	
		УстановитьФильтрПоДоле(Настройки,"ДоляДилер",ВС_ДоляЯШТПродажиДилер,ДоляЯШТПродажиДилер);
		конецЕсли;
		
		//Важность
		Если В тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_Важность))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = Важность;
		конецЕсли;
		
		//Направление продаж
		Если НП тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаправлениеПродаж"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_НаправлениеПродаж))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = НаправлениеПродаж;
		конецЕсли;
		
		//Регион
		Если Р тогда		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регион"); 
		новыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить((Строка(ВС_Регион))," ","")];
		НовыйЭлементОтбора.ПравоеЗначение = ЭлементыФормы.Регион.Данные;
		конецЕсли;

		//Основной менеджер
		Если ОМ тогда	
		УстановитьФильтрПоОМ(Настройки,"Контрагент.ОсновнойМенеджерКонтрагента",ВС_ОсновнойМенеджер,ОсновнойМенеджер);
		конецЕсли;

		//Способ работы
		Если СР тогда	
		УстановитьФильтрПоСР(Настройки,"СистемаРаботы",ВС_СистемаРаботы,СистемаРаботы);
		конецЕсли;

		
КонецПроцедуры


Процедура СнятьФильтрНажатие(Элемент)
Кл=Ложь;
КЛЯШТ=Ложь;
ДЛ=Ложь;

КЛД = Ложь;
КЛЯШТД =Ложь;
ДЛД = Ложь;

КЗ = Ложь;
КЗЯШТ = Ложь;
ДЗ = Ложь;

КЗД = Ложь;
КЗЯШТД =Ложь;
ДЗД=Ложь;

КП =Ложь;
КЯШТП =Ложь;
ДП =Ложь;

КПД = Ложь;
КПЯШТД = Ложь;
ДПД = Ложь;

В= Ложь;
Р= Ложь;
НП = Ложь;
ОМ = Ложь;
КонецПроцедуры


Процедура КоличествоЛетоПриИзменении(Элемент)
	КЛ = Истина;
КонецПроцедуры


Процедура ПолеВвода2ПриИзменении(Элемент)
	КЛЯШТ=Истина; 
КонецПроцедуры


Процедура КоличествоЯШТЛетоПриИзменении(Элемент)
	КЛЯШТ=Истина;
КонецПроцедуры


Процедура ПолеВвода3ПриИзменении(Элемент)
	ДЛ = Истина;
КонецПроцедуры


Процедура КоличествоЯШТЛето1ПриИзменении(Элемент)
	ДЛ = Истина;
КонецПроцедуры


Процедура ПолеВвода4ПриИзменении(Элемент)
	КЛД= Истина;
КонецПроцедуры


Процедура КоличествоЛето1ПриИзменении(Элемент)
		КЛД= Истина;
КонецПроцедуры


Процедура ПолеВвода5ПриИзменении(Элемент)
	КЛЯШТД = Истина;
КонецПроцедуры


Процедура КоличествоЯШТЛетоДилерПриИзменении(Элемент)
	КЛЯШТД = Истина;
КонецПроцедуры


Процедура ПолеВвода6ПриИзменении(Элемент)
	ДЛД = Истина;
КонецПроцедуры


Процедура КоличествоЯШТЛето3ПриИзменении(Элемент)
	ДЛД = Истина;
КонецПроцедуры


Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ПолеВвода20ПриИзменении(Элемент)
	В=Истина;
КонецПроцедуры


Процедура ПолеВвода19ПриИзменении(Элемент)
	В=Истина;
КонецПроцедуры


Процедура РегионПриИзменении(Элемент)
	Р=Истина;
КонецПроцедуры


Процедура ПолеВвода21ПриИзменении(Элемент)
	НП=Истина;
КонецПроцедуры


Процедура НаправлениеПродажПриИзменении(Элемент)
   НП=Истина;
КонецПроцедуры


Процедура ЛетоПриИзменении(Элемент)
	Если Лето=Ложь Тогда
	ВсеПродажиЛето=Ложь;
	ДилерЛето = Ложь;
	планированиеЛето = Ложь;
	планированиеСЗЛето = Ложь;
    конецЕсли;
    ЭлементыФормы.ВсеПродажиЛето.Доступность =Лето;
    ЭлементыФормы.ДилерЛето.Доступность = Лето;
	ЭлементыФормы.ПланированиеЛето.Доступность = Лето;
	ЭлементыФормы.ПланированиеСЗЛето.Доступность = Лето;
	ИзменитьВидимость = Истина;
КонецПроцедуры


Процедура Зима1ПриИзменении(Элемент)
	Если Зима=Ложь Тогда
	ВсеПродажиЗима=Ложь;
	ДилерЗима = Ложь;
	ПланированиеЗима = Ложь;
	ПланированиеСЗЗима = Ложь;
    конецЕсли;
    ЭлементыФормы.ВсеПродажиЗима.Доступность =Зима;
    ЭлементыФормы.ДилерЗима.Доступность = Зима;
    ЭлементыФормы.ПланированиеЗима.Доступность = Зима;
	ЭлементыФормы.ПланированиеСЗЗима.Доступность = Зима;
   	ИзменитьВидимость = Истина;

КонецПроцедуры


Процедура ПоГоду1ПриИзменении(Элемент)
	Если ПоГоду = Ложь Тогда
	ВсеПродажиГод=Ложь;
	ДилерГод = Ложь;
	ПланированиеГод = Ложь;
    конецЕсли;
    ЭлементыФормы.ВсеПродажиГод.Доступность =ПоГоду;
    ЭлементыФормы.ДилерГод.Доступность = ПоГоду;
	ЭлементыФормы.ПланированиеГод.Доступность = ПоГоду;

    ИзменитьВидимость = Истина;

КонецПроцедуры

Процедура ПолеВвода22ПриИзменении(Элемент)
	Р = Истина;
	Если ВС_Регион = ВидСравнения.ВСписке Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СписокЗначений"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив,,);
		ЭлементыФормы.Регион.ТипЗначения = ОписаниеТиповС;       
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив,,);
		ЭлементыФормы.Регион.ТипЗначенияСписка = ОписаниеТиповС;       
		
	иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив,,);
		ЭлементыФормы.Регион.ТипЗначения = ОписаниеТиповС;       
	конецЕсли;	
КонецПроцедуры

Процедура ВсеПродажиЛетоПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ДилерЛетоПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ВсеПродажиГодПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ДилерГодПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ВсеПродажиЗимаПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ДилерЗимаПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

Процедура ПродажиПриИзменении(Элемент)
	ИзменитьВидимость = Истина;
	
КонецПроцедуры

процедура УстановитьВидимость(Настройки)
	если ИзменитьВидимость тогда
	Настройки.Структура[1].Выбор.Элементы[1].Использование=Лето;//1
	Настройки.Структура[1].Выбор.Элементы[1].Элементы[0].Использование =ВсеПродажиЛето ;
	Настройки.Структура[1].Выбор.Элементы[1].Элементы[1].Использование =ДилерЛето;
	Настройки.Структура[1].Выбор.Элементы[1].Элементы[3].Использование =ПланированиеЛето;
	Настройки.Структура[1].Выбор.Элементы[1].Элементы[4].Использование =ПланированиеСЗЛето;

    Настройки.Структура[1].Выбор.Элементы[2].Использование=Зима;//2
	Настройки.Структура[1].Выбор.Элементы[2].Элементы[0].Использование =ВсеПродажиЗима ;
	Настройки.Структура[1].Выбор.Элементы[2].Элементы[1].Использование =ДилерЗима;
	Настройки.Структура[1].Выбор.Элементы[2].Элементы[3].Использование =ПланированиеЗима;
	Настройки.Структура[1].Выбор.Элементы[2].Элементы[4].Использование =ПланированиеСЗЗима;
	
    Настройки.Структура[1].Выбор.Элементы[3].Использование=ПоГоду;//3
	Настройки.Структура[1].Выбор.Элементы[3].Элементы[0].Использование =ВсеПродажиГод ;
	Настройки.Структура[1].Выбор.Элементы[3].Элементы[1].Использование =ДилерГод;
	Настройки.Структура[1].Выбор.Элементы[3].Элементы[2].Использование =ПланированиеГод;
	
	 Настройки.Структура[1].Выбор.Элементы[4].Использование=продажи; //4
	 Для каждого эл из Настройки.Структура[1].Выбор.Элементы[4].Элементы цикл
		 Эл.Использование = Продажи;
	 конецЦикла;	 
	конецЕсли;
	
конецПроцедуры


Процедура ПланированиеЛетоПриИзменении(Элемент)
		ИзменитьВидимость = Истина;
КонецПроцедуры


Процедура ПланированиеЗимаПриИзменении(Элемент)
		ИзменитьВидимость = Истина;
КонецПроцедуры


Процедура ПланированиеГодПриИзменении(Элемент)
		ИзменитьВидимость = Истина;
КонецПроцедуры


Процедура ОсновнойМенеджерПриИзменении(Элемент)
	ОМ = Истина;
КонецПроцедуры


Процедура ВС_ОсновнойМенеджерПриИзменении(Элемент)
	ОМ = Истина;

КонецПроцедуры
Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаЛето, ?(КонПериодаЛето='0001-01-01', КонПериодаЛето, КонецДня(КонПериодаЛето)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаЛето = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаЛето = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры
Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаЗима, ?(КонПериодаЗима='0001-01-01', КонПериодаЗима, КонецДня(КонПериодаЗима)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаЗима = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаЗима = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры
Процедура СпособРаботыПриИзменении(Элемент)
	СР = Истина;
КонецПроцедуры
Процедура ВС_СпособРаботыПриИзменении(Элемент)
	СР = Истина;
КонецПроцедуры


Процедура ВыбПериодНажатие2(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаФЛ, ?(КонПериодаФЛ='0001-01-01', КонПериодаФЛ, КонецДня(КонПериодаФЛ)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаФЛ = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаФЛ = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры


Процедура ВыбПериодНажатие3(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаФЗ, ?(КонПериодаФЗ='0001-01-01', КонПериодаФЗ, КонецДня(КонПериодаФЗ)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаФЗ = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаФЗ = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

