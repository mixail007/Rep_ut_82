перем ПервыйДень,ПоследнийДень;

Процедура КоманднаяПанель1Заполнить(Кнопка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель = ЗНАЧЕНИЕ(справочник.СтатьиРасходов.пустаяСсылка)
		|			ТОГДА ПланДвиженийДенежныхСредств.Статья.Родитель
		|		ИНАЧЕ ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель
		|	КОНЕЦ КАК СтатьяРодительРодитель,
		|	ПланДвиженийДенежныхСредств.Статья.Родитель КАК СтатьяРодитель,
		|	ПланДвиженийДенежныхСредств.Статья КАК Статья,
		|	ПланДвиженийДенежныхСредств.Контрагент КАК Контрагент,
		|	ПланДвиженийДенежныхСредств.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя1, 0)) КАК Неделя1,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя2, 0)) КАК Неделя2,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя3, 0)) КАК Неделя3,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя4, 0)) КАК Неделя4,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя5, 0)) КАК Неделя5,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Перенос, 0)) КАК Перенос,
		|	ПланДвиженийДенежныхСредств.Согласован,
		|	ПланДвиженийДенежныхСредств.Утвержден,
		|	ПланДвиженийДенежныхСредств.Принят,
		|	ВЫБОР
		|		КОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель = ЗНАЧЕНИЕ(справочник.СтатьиРасходов.пустаяСсылка)
		|			ТОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Код
		|		ИНАЧЕ ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель.Код
		|	КОНЕЦ КАК Поле1,
		|	ПланДвиженийДенежныхСредств.Статья.Код КАК СтатьяКод,
		|	СУММА(ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя1, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя2, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя3, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя4, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя5, 0)) КАК Итого,
		|	ПланДвиженийДенежныхСредств.Валюта
		|ИЗ
		|	РегистрСведений.ПланДвиженийДенежныхСредств КАК ПланДвиженийДенежныхСредств
		|ГДЕ
		|	ПланДвиженийДенежныхСредств.МесяцПланирования = &МесяцПланирования
		|	И ПланДвиженийДенежныхСредств.АктивностьЗаписи = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланДвиженийДенежныхСредств.Утвержден,
		|	ПланДвиженийДенежныхСредств.Принят,
		|	ПланДвиженийДенежныхСредств.Согласован,
		|	ПланДвиженийДенежныхСредств.Контрагент,
		|	ПланДвиженийДенежныхСредств.ОтветственноеЛицо,
		|	ПланДвиженийДенежныхСредств.ПриходРасход,
		|	ПланДвиженийДенежныхСредств.Статья,
		|	ПланДвиженийДенежныхСредств.Статья.Родитель,
		|	ВЫБОР
		|		КОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель = ЗНАЧЕНИЕ(справочник.СтатьиРасходов.пустаяСсылка)
		|			ТОГДА ПланДвиженийДенежныхСредств.Статья.Родитель
		|		ИНАЧЕ ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель = ЗНАЧЕНИЕ(справочник.СтатьиРасходов.пустаяСсылка)
		|			ТОГДА ПланДвиженийДенежныхСредств.Статья.Родитель.Код
		|		ИНАЧЕ ПланДвиженийДенежныхСредств.Статья.Родитель.Родитель.Код
		|	КОНЕЦ,
		|	ПланДвиженийДенежныхСредств.Статья.Код,
		|	ПланДвиженийДенежныхСредств.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Поле1,
		|	СтатьяКод
		|ИТОГИ
		|	СУММА(Неделя1),
		|	СУММА(Неделя2),
		|	СУММА(Неделя3),
		|	СУММА(Неделя4),
		|	СУММА(Неделя5),
		|	СУММА(Перенос),
		|	СУММА(Итого)
		|ПО
		|	СтатьяРодительРодитель,
		|	СтатьяРодитель,
		|	Статья,
		|	ОтветственноеЛицо";

	Запрос.УстановитьПараметр("МесяцПланирования", МесяцПланирования);


	ЭлементыФормы.Планирование.Значение = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого приходРасход из ЭлементыФормы.Планирование.Значение.Строки Цикл
		приходРасход.статья = приходРасход.статьяРодительРодитель;
		для каждого статья из ПриходРасход.Строки Цикл
			Статья.статья = Статья.статьяРодитель;
			Для каждого строка из Статья.Строки Цикл
				Если строка.статьяРодительРодитель = справочники.СтатьиРасходов.ДОХОДЫ тогда
					Для каждого стр из Строка.Строки Цикл
					Стр.Строки.Очистить();
					конецЦикла;
				конецЕсли;
				если  строка.статьяРодительРодитель = справочники.СтатьиРасходов.РАСХОДЫ тогда
					Для каждого стр из Строка.Строки цикл
						Если (не стр.Статья.поконтрагентам) и Стр.ответственноеЛицо <> Null тогда
							Стр.Строки.Очистить();
						конецЕсли;
					конецЦикла;
				конецЕсли;	
			конецЦикла;
		конецЦикла;
	конецЦикла;
		
показатьОбщийБаланс();	
КонецПроцедуры

Процедура КоманднаяПанель1Принять(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ПланированиеПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого стр из ОформленияСтрок Цикл
		Данные =стр.ДанныеСтроки;
		Если  Данные.ответственноеЛицо = Null или (Данные.Статья.поконтрагентам и Данные.Контрагент = Null) Тогда //значит не детальные записи
			стр.ЦветФона = webцвета.БледноЗолотистый;
			если данные.статья.ЭтоГруппа Тогда
				ВыделитьЖирным = Истина;
			иначе
				ВыделитьЖирным = Ложь;
			конецЕсли;	
			Для каждого ячейка из стр.ячейки Цикл
				если ячейка.Имя <> "Итого" тогда
				Ячейка.ТолькоПросмотр = Истина;
				конецЕсли;
				Если выделитьЖирным Тогда
					Ячейка.Шрифт =  Новый Шрифт(,,Истина,,);
				конецЕсли;
			конецЦикла;	
		иначеЕсли не рольДоступна("яштФинДиректор")тогда
			Для каждого ячейка из стр.ячейки Цикл
			Ячейка.ТолькоПросмотр = Истина;
			конецЦикла;
		конецЕсли;	
	конецЦИкла;
	ПересчетИтогов();
КонецПроцедуры

Процедура ПересчетИтогов()
	итогоНеделя1 = 0;
	итогоНеделя2 = 0;
	итогоНеделя3 = 0;
	итогоНеделя4 = 0;
	итогоНеделя5 = 0;
	итогоПеренос = 0;
	итогоИтого = 0;
	Для каждого стр из ЭлементыФормы.Планирование.Значение.Строки Цикл	
		Если стр.статья = Справочники.СтатьиРасходов.РАСХОДЫ тогда
			к=-1;
		иначе	
			к=1;
		конецЕсли;
		итогоНеделя1 = итогоНеделя1+к*стр.неделя1;
		итогоНеделя2 = итогоНеделя2+к*стр.неделя2;
		итогоНеделя3 = итогоНеделя3+к*стр.неделя3;
		итогоНеделя4 = итогоНеделя4+к*стр.неделя4;
		итогоНеделя5 = итогоНеделя5+к*стр.неделя5;
		итогоПеренос = итогоПеренос+к*стр.Перенос;
		ИтогоИтого   = итогоИтого+к*стр.Итого;
	конецЦикла;	
	ЭлементыФормы.Планирование.Колонки.Неделя1.ТекстПодвала = ОстатокДенежныхСредств+итогоНеделя1;
	ЭлементыФормы.Планирование.Колонки.Неделя2.ТекстПодвала = ОстатокДенежныхСредств+итогоНеделя1+итогоНеделя2;
	ЭлементыФормы.Планирование.Колонки.Неделя3.ТекстПодвала = ОстатокДенежныхСредств+итогоНеделя1+итогоНеделя2+итогоНеделя3;
	ЭлементыФормы.Планирование.Колонки.Неделя4.ТекстПодвала = ОстатокДенежныхСредств+итогоНеделя1+итогоНеделя2+итогоНеделя3+итогоНеделя4;
	ЭлементыФормы.Планирование.Колонки.Неделя5.ТекстПодвала = ОстатокДенежныхСредств+итогоНеделя1+итогоНеделя2+итогоНеделя3+итогоНеделя4+итогоНеделя5;
	ЭлементыФормы.Планирование.Колонки.Перенос.ТекстПодвала = итогоПеренос;
    ЭлементыФормы.Планирование.Колонки.Итого.ТекстПодвала =  ОстатокДенежныхСредств+ИтогоИтого;

конецПроцедуры	

Процедура ПланированиеНеделя1ПриИзменении(Элемент)
	строка = ЭлементыФормы.Планирование.ТекущиеДанные;
	строка.Итого = Строка.Неделя1+строка.Неделя2+строка.Неделя3+строка.Неделя4+строка.Неделя5;
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПланированиеНеделя2ПриИзменении(Элемент)
	строка = ЭлементыФормы.Планирование.ТекущиеДанные;
	строка.Итого = Строка.Неделя1+строка.Неделя2+строка.Неделя3+строка.Неделя4+строка.Неделя5;
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПланированиеНеделя3ПриИзменении(Элемент)
	строка = ЭлементыФормы.Планирование.ТекущиеДанные;
	строка.Итого = Строка.Неделя1+строка.Неделя2+строка.Неделя3+строка.Неделя4+строка.Неделя5;
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПланированиеНеделя4ПриИзменении(Элемент)
	строка = ЭлементыФормы.Планирование.ТекущиеДанные;
	строка.Итого = Строка.Неделя1+строка.Неделя2+строка.Неделя3+строка.Неделя4+строка.Неделя5;
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПланированиеНеделя5ПриИзменении(Элемент)
	строка = ЭлементыФормы.Планирование.ТекущиеДанные;
	строка.Итого = Строка.Неделя1+строка.Неделя2+строка.Неделя3+строка.Неделя4+строка.Неделя5;
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПланированиеПереносПриИзменении(Элемент)
	ПересчитатьДерево();
КонецПроцедуры

Процедура ПересчитатьДерево()
	 пересчитатьИтогиПоУровню(ЭлементыФормы.Планирование.Значение);
	 ПоказатьОбщийБаланс();
 конецПроцедуры	
 
 процедура пересчитатьИтогиПоУровню(Уровень)
	 Если уровень<>ЭлементыФормы.Планирование.Значение тогда
		 Уровень.неделя1=0;
		 Уровень.неделя2=0;
		 Уровень.неделя3=0;
		 Уровень.неделя4=0;
		 Уровень.неделя5=0;
		 Уровень.перенос=0;
	 конецЕсли; 
	 Для каждого стр из Уровень.строки цикл
		 если стр.Строки.Количество()>0 тогда 	
			 пересчитатьИтогиПоУровню(стр);
		 конецЕсли;
		 Если уровень<>ЭлементыФормы.Планирование.Значение тогда
			 Уровень.неделя1=Уровень.неделя1+стр.неделя1;
			 Уровень.неделя2=Уровень.неделя2+стр.неделя2;
			 Уровень.неделя3=Уровень.неделя3+стр.неделя3;
			 Уровень.неделя4=Уровень.неделя4+стр.неделя4;
			 Уровень.неделя5=Уровень.неделя5+стр.неделя5;
			 Уровень.Итого = Уровень.неделя1+Уровень.неделя2+Уровень.неделя3+Уровень.неделя4+Уровень.неделя5;
			 Уровень.перенос=Уровень.перенос+стр.перенос;
		 конецЕсли;
	 конецЦикла;  
 конецПроцедуры

 Процедура МесяцПланированияПриИзменении(Элемент)
	МесяцПланирования = НачалоМесяца(месяцПланирования); 
	ПервыйДень = Новый Массив(6);
	ПоследнийДень= Новый Массив(6);
	
	ПервыйДень[1] = МесяцПланирования ;
	последнийДень[1] =ПервыйДень[1]+(7- ДеньНедели(МесяцПланирования))*24*60*60;
	//////////////////////////////////////////////////
	ПервыйДень[2] = последнийДень[1]+24*60*60;
	последнийДень[2] =ПервыйДень[2]+(7- ДеньНедели(ПервыйДень[2]))*24*60*60;
	/////////////////////////////////////////////////
	ПервыйДень[3] = последнийДень[2]+24*60*60;
	последнийДень[3] =ПервыйДень[3]+(7- ДеньНедели(ПервыйДень[3]))*24*60*60;
	////////////////////////////////////////////////
	ПервыйДень[4] = последнийДень[3]+24*60*60;
	последнийДень[4] =ПервыйДень[4]+(7- ДеньНедели(ПервыйДень[4]))*24*60*60;
	///////////////////////////////////////	
	ПервыйДень[5] = последнийДень[4]+24*60*60;
	последнийДень[5] =НачалоДня(конецМесяца(МесяцПланирования));

    	Если МесяцПланирования<>Дата(1,1,1) Тогда
		ЭлементыФормы.Планирование.Колонки.Неделя1.ТекстШапки = ""+Формат(ПервыйДень[1], "ДФ=dd.MM")+" - "+Формат(последнийДень[1], "ДФ=dd.MM");
		ЭлементыФормы.Планирование.Колонки.Неделя2.ТекстШапки = ""+Формат(ПервыйДень[2], "ДФ=dd.MM")+" - "+Формат(последнийДень[2], "ДФ=dd.MM");
		ЭлементыФормы.Планирование.Колонки.Неделя3.ТекстШапки = ""+Формат(ПервыйДень[3], "ДФ=dd.MM")+" - "+Формат(последнийДень[3], "ДФ=dd.MM");
		ЭлементыФормы.Планирование.Колонки.Неделя4.ТекстШапки = ""+Формат(ПервыйДень[4], "ДФ=dd.MM")+" - "+Формат(последнийДень[4], "ДФ=dd.MM");
		
		Если НачалоДня(конецМесяца(МесяцПланирования)) > последнийДень[4] тогда
			ЭлементыФормы.Планирование.Колонки.Неделя5.ТекстШапки = ""+Формат(ПервыйДень[5], "ДФ=dd.MM")+" - "+Формат(последнийДень[5], "ДФ=dd.MM");
		иначе
			ЭлементыФормы.Планирование.Колонки.Неделя5.Видимость = Ложь;
		конецесли;
	конецЕсли;
	
	
	Если МесяцПланирования<>Дата(1,1,1) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|ГДЕ
		|	КурсыВалютСрезПоследних.Валюта = &Валюта";
		
		Запрос.УстановитьПараметр("Валюта", Справочники.Валюты.НайтиПоКоду("840"));
		Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(МесяцПланирования,-1)+25*24*60*60);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() тогда
			ЭлементыФормы.курс.Заголовок  = "плановый курс $ :"+(Выборка.курс+3);
			ЗначениеКурса=  (Выборка.курс+3);
		иначе 
			ЭлементыФормы.курс.Заголовок  = "плановый курс $ еще не задан";
			ЗначениеКурса=  1;
		КонецЕсли;
	конецЕсли;

	
	
	
	
	
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница.Имя = "Страница1" Тогда
	СформироватьНажатие(Истина);	
	иначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница.Имя = "Страница2" Тогда
	КоманднаяПанель1Заполнить(Истина);	
	конецесли;	
	

	
	
 КонецПроцедуры

 Процедура СформироватьНажатие(Элемент)
	 ЭлементыФормы.Результат.Очистить();
	   СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
    Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

	ПараметрСКД = Настройки.ПараметрыДанных.Элементы[0];
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = МесяцПланирования;

	
	ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("Курс");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = ЗначениеКурса;
	
	
	//владелец
	//ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("Владелец");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение  = Справочники.Организации.НайтиПоКоду("00001");
	//родитель
	//ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("Родитель");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение  = Справочники.Кассы.НайтиПоКоду("00019");
    //ТипПокупатели 15
	СписокТиповПокупателей = Новый СписокЗначений;
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001")); //предоплата
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00015")); //предоплата по счетам
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004")); //отсрочка
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0012")); //отсрочка  ОТХ
	//СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0007")); //формула автоплюс
	//СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0006")); //шинтрейд
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0009")); //Wheels group limited
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00025")); //пени
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00015")); //предоплата по счетам
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00007")); //нераспределенные деньги
	ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("ТипПокупатели");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = СписокТиповПокупателей;
	
	//ТипУказанные 16
	СписокТиповПокупателей = Новый СписокЗначений;
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001")); //предоплата
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00015")); //предоплата по счетам
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004")); //отсрочка
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0012")); //отсрочка  ОТХ
	//СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0007")); //формула автоплюс
	//СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0006")); //шинтрейд
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0009")); //Wheels group limited
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00025")); //пени
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00015")); //предоплата по счетам
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00007")); //нераспределенные деньги
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0003"));//возмещаемые услуги
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00003")); //услуги
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0001")); //аренда недвижимого
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0002")); //аренда движимого
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00002"));//факторинг
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00005"));//факторинг предоплата
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00127"));//кредит
	ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("ТипУказанные");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = СписокТиповПокупателей;
	
	//ТипУслуги 17
	СписокТиповПокупателей = Новый СписокЗначений;
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0003"));//возмещаемые услуги
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00003")); //услуги
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0001")); //аренда недвижимого
	СписокТиповПокупателей.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("Я0002")); //аренда движимого
	ПараметрСКД = Настройки.ПараметрыДанных.Элементы.найти("ТипУслуги");
    ПараметрСКД.Использование = Истина;
    ПараметрСКД.Значение  = СписокТиповПокупателей;
	
	
	
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);

 
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
 
	 
	 
 КонецПроцедуры

 Процедура СохранитьНажатие(Элемент)
	ЗаписатьДетальныеЗаписи(ЭлементыФормы.Планирование.Значение,Ложь);
	Выборка = Документы.ПланированиеДвиженийДС.Выбрать(НачалоМесяца(МесяцПланирования),КонецМесяца(МесяцПланирования));
	пока выборка.Следующий()цикл
	Если Выборка.ПометкаУдаления = Ложь тогда	
	докОбъект = Выборка.ПолучитьОбъект();
	докОбъект.Записать(РежимЗаписиДокумента.Проведение);
	конецЕсли;
	конецЦикла;	
 КонецПроцедуры
 
 процедура ЗаписатьДетальныеЗаписи(Уровень,Принять)
	 Для каждого стр из Уровень.строки цикл
		 если стр.Строки.Количество()>0 тогда 	
			 ЗаписатьДетальныеЗаписи(стр,Принять);
		 иначе
			 если стр.Статья.видДвижения = перечисления.ВидыДвиженийПриходРасход.Расход тогда
				 
				 
				 НаборЗаписей = РегистрыСведений.ПланДвиженийДенежныхСредств.СоздатьНаборЗаписей();
				 НаборЗаписей.Отбор.МесяцПланирования.Установить(МесяцПланирования);
				 НаборЗаписей.Отбор.АктивностьЗаписи.Установить(Истина);
				 НаборЗаписей.Отбор.ПриходРасход.Установить(перечисления.ВидыДвиженийПриходРасход.Расход);
				 НаборЗаписей.Отбор.Подразделение.Установить(Справочники.Подразделения.ПустаяСсылка());
				 НаборЗаписей.Отбор.Статья.Установить(стр.Статья);
				 НаборЗаписей.Отбор.Контрагент.Установить(?(Стр.Контрагент=Null,Справочники.Контрагенты.ПустаяСсылка(),Стр.Контрагент));
				 НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(стр.ОтветственноеЛицо);
				 НаборЗаписей.Отбор.Валюта.Установить(стр.Валюта);
				 
				 НаборЗаписей.Прочитать();
				 Для каждого Запись из НаборЗаписей Цикл
					 Запись.Неделя1 = стр.Неделя1;
					 Запись.Неделя2 = стр.Неделя2;
					 Запись.Неделя3 = стр.Неделя3;
					 Запись.Неделя4 = стр.Неделя4;
					 Запись.Неделя5 = стр.Неделя5;
					 Запись.Перенос = стр.Перенос;
					 Если Принять тогда
						 Запись.Принят = Истина;
					 конецЕсли;	 
				 конецЦикла; 
				 наборЗаписей.Записать();
				 
				 
				 
			 конецесли;
		 конецЕсли;
	 конецЦикла;  
 конецПроцедуры

 Процедура ПринятьНажатие(Элемент)
	НаборЗаписей = РегистрыСведений.ПланДвиженийДенежныхСредств.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МесяцПланирования.Значение = МесяцПланирования;
	НаборЗаписей.Отбор.месяцпланирования.использование =Истина;
	НаборЗаписей.Отбор.АктивностьЗаписи.Значение = Истина;
	НаборЗаписей.Отбор.АктивностьЗаписи.использование =Истина;

	НаборЗаписей.Прочитать();
	Для каждого Запись из НаборЗаписей Цикл
		Запись.Принят = Истина;
	конецЦикла; 
	наборЗаписей.Записать();
 КонецПроцедуры
 
 процедура ПоказатьОбщийБаланс()
//остаток денежных средств	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ДенежныеСредстваОстатки.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Остатки(&Дата, ) КАК ДенежныеСредстваОстатки";

	Запрос.УстановитьПараметр("Владелец", Справочники.Организации.НайтиПоКоду("00001"));
	Запрос.УстановитьПараметр("Родитель", Справочники.Кассы.НайтиПоКоду("00019"));
	Если ТекущаяДата()< МесяцПланирования тогда
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	иначе
	Запрос.УстановитьПараметр("Дата",МесяцПланирования);
	конецЕсли;
	Результат = Запрос.Выполнить().Выгрузить();
    ОстатокДенежныхСредств = Результат[0].Сумма;
    ЭлементыФормы.ОстатокНаСчетах.Значение = "Остаток д.с. "+ ОстатокДенежныхСредств+" руб.";
	
	итогоНеделя1 = 0;
	итогоНеделя2 = 0;
	итогоНеделя3 = 0;
	итогоНеделя4 = 0;
	итогоНеделя5 = 0;
	итогоПеренос = 0;
	
	Для каждого стр из ЭлементыФормы.Планирование.Значение.Строки Цикл	
		Если стр.статья = Справочники.СтатьиРасходов.РАСХОДЫ тогда
			к=-1;
		иначе	
			к=1;
		конецЕсли;
		итогоНеделя1 = итогоНеделя1+к*стр.неделя1;
		итогоНеделя2 = итогоНеделя2+к*стр.неделя2;
		итогоНеделя3 = итогоНеделя3+к*стр.неделя3;
		итогоНеделя4 = итогоНеделя4+к*стр.неделя4;
		итогоНеделя5 = итогоНеделя5+к*стр.неделя5;
		итогоПеренос = итогоПеренос+к*стр.Перенос;
	конецЦикла;	
	 Итого = ОстатокДенежныхСредств+итогоНеделя1+итогоНеделя2+итогоНеделя3+итогоНеделя4+итогоНеделя5;
	ЭлементыФормы.ИтогоБаланс.Заголовок = "Итого баланс "+Итого+ " руб.";
конецпроцедуры	 

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ЭлементыФормы.Панель1.ТекущаяСтраница.Имя = "Страница1" Тогда
	СформироватьНажатие(Истина);	
	иначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница.Имя = "Страница2" Тогда
	КоманднаяПанель1Заполнить(Истина);	
	конецесли;	
КонецПроцедуры

Процедура ОткрытьЖурналНажатие(Элемент)
	ФормаСписка = Документы.ПланированиеДвиженийДС.ПолучитьФормуСписка();
	ФормаСписка.Открыть();
КонецПроцедуры

Процедура ПриОткрытии()
	Если не рольдоступна("яштФинДиректор") Тогда
		ЭлементыФормы.Планирование.ТолькоПросмотр = Истина;
		ЭлементыФормы.Сохранить.Доступность = Ложь;
		ЭлементыФормы.Принять.Доступность = Ложь;
	конецЕсли;	
КонецПроцедуры

Процедура СформироватьКонтрольНажатие(Элемент)
	ЭлементыФормы.КонтрольРасходов.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("КонтрольРасходов");
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = МесяцПланирования;
	//ПараметрСКД = СхемаКомпоновкиДанных.Параметры.КонПериода;
	//ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//ПараметрСКД.Значение  = КонецДня(КонПериода2);
	//ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Валюта;
	//ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//ПараметрСКД.Значение  = Валюта;
	
	ОтветственныйПолеСКД = Новый ПолеКомпоновкиДанных("Ответственный");
	
	ЭлементыОтбора =СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы;
	ОтветственныйОтбор = Неопределено;
	Для Каждого ТекОтбор Из ЭлементыОтбора Цикл
		Если ТекОтбор.ЛевоеЗначение = ОтветственныйПолеСКД Тогда
			ОтветственныйОтбор = ТекОтбор; Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если  значениеЗаполнено(Ответственный)  Тогда
		Если ОтветственныйОтбор = Неопределено Тогда
			ОтветственныйОтбор = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ОтветственныйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ответственный");
		ОтветственныйОтбор.Использование  = Истина;
		ОтветственныйОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ОтветственныйОтбор.ПравоеЗначение = Ответственный;
	Иначе
		Если НЕ ОтветственныйОтбор = Неопределено Тогда
			ОтветственныйОтбор.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;

	
	
	
	
	
	
	
	
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,истина);
	ЭлементыФормы.КонтрольРасходов.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.КонтрольРасходов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ЭлементыФормы.КонтрольРасходов.ТолькоПросмотр = Истина;

КонецПроцедуры

Процедура КонтрольРасходовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
    СтандартнаяОбработка = Ложь;
	СхемаКомпоновкиДанных = ПолучитьМакет("КонтрольРасходов");

   //Создадим и инициализируем обработчик расшифровки                    
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
                                                                         
    ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	////ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
    
    Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,);
    
   // Обрабатываем собственные действия 
   Если ВыполненноеДействие = "Открыть" Тогда
	    ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
        ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
        ОбработкаРасшифровки.ОткрытьЗначение(ЭлементРасшифровкиДанных.Идентификатор, новый ПолеКомпоновкиДанных(ЭлементРасшифровкиДанныхПоля.Поле));
    КонецЕсли;
    
КонецПроцедуры

Процедура ПланированиеИтогоОткрытие(Элемент, СтандартнаяОбработка)
	стандартнаяобработка = Ложь;
	ТекСтрока = ЭлементыФормы.Планирование.ТекущиеДанные;
	Если текСтрока.статья.принадлежитЭлементу(Справочники.СтатьиРасходов.ДОХОДЫ)тогда
		РасшифровкаДоходов(текСтрока.Статья,текСтрока.ОтветственноеЛицо,текСтрока.Контрагент);
	иначеЕсли текСтрока.статья.принадлежитЭлементу(Справочники.СтатьиРасходов.РАСХОДЫ)тогда
		РасшифровкаРасходов(текСтрока.Статья,текСтрока.ОтветственноеЛицо,текСтрока.Контрагент);
    конецЕсли;	
КонецПроцедуры

Процедура РасшифровкаРасходов(статья, ОтветственноеЛицо, Контрагент)
	Если Статья = Справочники.СтатьиРасходов.НайтиПоКоду("000000037") и ОтветственноеЛицо = Справочники.Пользователи.НайтиПоКоду("Аверкина") тогда
		
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Командировки");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.ПериодПланирования = Формат(МесяцПланирования,"ДФ=ММММгг"); 
	ТабДок.Вывести(ОбластьШапка);

		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеКомандировок.Подразделение КАК Подразделение,
		|	ПланированиеКомандировок.Сотрудник,
		|	ПланированиеКомандировок.Направление,
		|	ПланированиеКомандировок.КоличествоЧеловек КАК КоличествоЧеловек,
		|	ПланированиеКомандировок.Суточные КАК Суточные,
		|	ПланированиеКомандировок.Проезд КАК Проезд,
		|	ПланированиеКомандировок.КоличествоДней КАК КоличествоДней,
		|	ПланированиеКомандировок.ПрочиеРасходы КАК ПрочиеРасходы,
		|	ПланированиеКомандировок.Проживание КАК Проживание,
		|	ЕСТЬNULL(ПланированиеКомандировок.Суточные, 0) + ЕСТЬNULL(ПланированиеКомандировок.Проезд, 0) + ЕСТЬNULL(ПланированиеКомандировок.ПрочиеРасходы, 0) + ЕСТЬNULL(ПланированиеКомандировок.Проживание, 0) КАК Итого
		|ИЗ
		|	РегистрСведений.ПланированиеКомандировок КАК ПланированиеКомандировок
		|ГДЕ
		|	ПланированиеКомандировок.ПериодПланирования = ""Месяц""
		|	И ПланированиеКомандировок.Месяц МЕЖДУ &Нач И &Кон
		|ИТОГИ
		|	СУММА(КоличествоЧеловек),
		|	СУММА(Суточные),
		|	СУММА(Проезд),
		|	СУММА(КоличествоДней),
		|	СУММА(ПрочиеРасходы),
		|	СУММА(Проживание),
		|	СУММА(Итого)
		|ПО
		|	ОБЩИЕ,
		|	Подразделение";

	Запрос.УстановитьПараметр("Нач", НачалоМесяца(МесяцПланирования));
	Запрос.УстановитьПараметр("Кон", КонецМесяца(МесяцПланирования));
	Результат = Запрос.Выполнить();

	табДок.НачатьАвтогруппировкуСтрок();
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();		// Общий итог

    ОбластьИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДок.Вывести(ОбластьИтог,0);

	ВыборкаПодразделение = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПодразделение.Следующий() Цикл
    ОбластьИтог.Параметры.Заполнить(ВыборкаПодразделение);
	ТабДок.Вывести(ОбластьИтог,1);

		ВыборкаДетальныеЗаписи = ВыборкаПодразделение.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
	ТабДок.Вывести(ОбластьСтрока,2);
		КонецЦикла;
	КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();
//ТабДок.ИтогиСнизу = Истина;
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Защита = Ложь;
ТабДок.ТолькоПросмотр = Истина;
ТабДок.Показать("Расшифровка плана командировок");
		
	иначе	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("РасшифровкаРасходов");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодИтог = Макет.ПолучитьОбласть("ПодИтог");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.ПериодПланирования = МесяцПланирования; 
	ТабДок.Вывести(ОбластьШапка);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиРасходовСтатьиЗатрат.Ссылка КАК СтатьяРасхода,
		|	СтатьиРасходовСтатьиЗатрат.СтатьяЗатрат
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.СтатьиРасходов.СтатьиЗатрат КАК СтатьиРасходовСтатьиЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланДвиженийДенежныхСредств.Статья,
		|	ПланДвиженийДенежныхСредств.Контрагент,
		|	ПланДвиженийДенежныхСредств.ОтветственноеЛицо,
		|	ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя1, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя2, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя3, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя4, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя5, 0) КАК Сумма
		|ПОМЕСТИТЬ ВТ_План
		|ИЗ
		|	РегистрСведений.ПланДвиженийДенежныхСредств КАК ПланДвиженийДенежныхСредств
		|ГДЕ
		|	ПланДвиженийДенежныхСредств.МесяцПланирования = &МесяцПланирования
		|	И ПланДвиженийДенежныхСредств.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.расход)
		|	И 98 = 98
		|	И 99 = 99
		|	И 97 = 97
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланированиеДвиженийДСДанныеБюджета.статьяЗатрат,
		|	ПланированиеДвиженийДСДанныеБюджета.Сумма,
		|	ПланированиеДвиженийДСДанныеБюджета.Ссылка.Ответственный_,
		|	ВТ.СтатьяРасхода
		|ПОМЕСТИТЬ ВТ_ПоСтатьям
		|ИЗ
		|	Документ.ПланированиеДвиженийДС.ДанныеБюджета КАК ПланированиеДвиженийДСДанныеБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО ПланированиеДвиженийДСДанныеБюджета.статьяЗатрат = ВТ.СтатьяЗатрат
		|ГДЕ
		|	ПланированиеДвиженийДСДанныеБюджета.Ссылка.Проведен = ИСТИНА
		|	И ПланированиеДвиженийДСДанныеБюджета.Ссылка.ПлановыйПериод = &МесяцПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_План.Статья КАК СтатьяРасхода,
		|	ВЫБОР
		|		КОГДА ВТ_План.Контрагент = ЗНАЧЕНИЕ(Справочник.контрагенты.Пустаяссылка)
		|			ТОГДА ВТ_ПоСтатьям.статьяЗатрат
		|		ИНАЧЕ ВТ_План.Контрагент
		|	КОНЕЦ КАК статьяЗатрат,
		|	ВТ_План.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ЕСТЬNULL(ВТ_ПоСтатьям.Сумма, ВТ_План.Сумма) КАК Сумма
		|ИЗ
		|	ВТ_План КАК ВТ_План
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоСтатьям КАК ВТ_ПоСтатьям
		|		ПО ВТ_План.Статья = ВТ_ПоСтатьям.СтатьяРасхода
		|			И ВТ_План.ОтветственноеЛицо = ВТ_ПоСтатьям.Ответственный_
		|ИТОГИ
		|	Сумма(Сумма)
		|ПО
		|	ОБЩИЕ,
		|	СтатьяРасхода,
		|	ОтветственноеЛицо";
       Запрос.УстановитьПараметр("МесяцПланирования",МесяцПланирования);		
		Если ЗначениеЗаполнено(статья) тогда
			Если Статья.этоГруппа Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ПланДвиженийДенежныхСредств.Статья В ИЕРАРХИИ(&Статья)" );	
		    иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ПланДвиженийДенежныхСредств.Статья = &Статья" );	
		конецесли;
					Запрос.УстановитьПараметр("Статья",Статья);		

		конецЕсли;
		
		Если ЗначениеЗаполнено(ОтветственноеЛицо) тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"98 = 98","ПланДвиженийДенежныхСредств.ОтветственноеЛицо = &ОтветственноеЛицо");	
			Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);		

		конецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"97 = 97","ПланДвиженийДенежныхСредств.Контрагент = &Контрагент");	
			Запрос.УстановитьПараметр("Контрагент",Контрагент);		
		конецЕсли;

		
	Результат = Запрос.Выполнить();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ВыборкаОбщийИтог.Следующий();
	
    ОбластьПодИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДок.Вывести(ОбластьПодИтог,0);
	
	
	ВыборкаСтатьяРасхода = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтатьяРасхода.Следующий() Цикл
		
    ОбластьПодИтог.Параметры.Заполнить(ВыборкаСтатьяРасхода);
	//ОбластьПодИтог.Параметры.СтатьяРасхода = "";
	ТабДок.Вывести(ОбластьПодИтог,1,,Истина);
	
	ВыборкаОтветственноеЛицо = ВыборкаСтатьяРасхода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОтветственноеЛицо.Следующий() Цикл
		
		ОбластьПодИтог.Параметры.Заполнить(ВыборкаОтветственноеЛицо);
		//ОбластьПодИтог.Параметры.СтатьяРасхода = "";
	   // ОбластьПодИтог.Параметры.ОтветственноеЛицо = "";
	    ТабДок.Вывести(ОбластьПодИтог,2,,Ложь);
		
		   ВыборкаДетальныеЗаписи = ВыборкаОтветственноеЛицо.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				//ОбластьСтрока.Параметры.СтатьяРасхода = "";
	            ОбластьСтрока.Параметры.ОтветственноеЛицо = "";
	            ТабДок.Вывести(ОбластьСтрока,3,,Ложь);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();
//ТабДок.ИтогиСнизу = Истина;
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Защита = Ложь;
ТабДок.ТолькоПросмотр = Истина;
ТабДок.Показать("Расшифровка плана затрат");
конецЕсли;
	
	
	
	
конецПроцедуры


Процедура РасшифровкаДоходов(статья, ОтветственноеЛицо, Контрагент)
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("РасшифровкаДоходов");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодИтог = Макет.ПолучитьОбласть("ПодИтог");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ОбластьШапка.Параметры.ПериодПланирования =МесяцПланирования; 
	ТабДок.Вывести(ОбластьШапка);
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланДвиженийДенежныхСредств.Статья КАК СтатьяДоходов,
	|	ПланДвиженийДенежныхСредств.Контрагент,
	|	ПланДвиженийДенежныхСредств.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя1, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя2, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя3, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя4, 0) + ЕСТЬNULL(ПланДвиженийДенежныхСредств.Неделя5, 0) КАК Сумма,
	|	ПланДвиженийДенежныхСредств.Исполнитель КАК Исполнитель,
	|	ПланДвиженийДенежныхСредств.Дебиторка КАК Дебиторка,
	|	ПланДвиженийДенежныхСредств.Комментарий
	|ИЗ
	|	РегистрСведений.ПланДвиженийДенежныхСредств КАК ПланДвиженийДенежныхСредств
	|ГДЕ
	|	ПланДвиженийДенежныхСредств.МесяцПланирования = &МесяцПланирования
	|	И ПланДвиженийДенежныхСредств.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|	И 98 = 98
	|	И 99 = 99
	|	И 97 = 97
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(Дебиторка)
	|ПО
	|	ОБЩИЕ,
	|	Статья,
	|	ОтветственноеЛицо,
	|	Исполнитель";
	
	Запрос.УстановитьПараметр("МесяцПланирования", МесяцПланирования);
	Если ЗначениеЗаполнено(статья) тогда
		Если Статья.этоГруппа Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ПланДвиженийДенежныхСредств.Статья В ИЕРАРХИИ(&Статья)" );	
		иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","ПланДвиженийДенежныхСредств.Статья = &Статья" );	
		конецесли;
		Запрос.УстановитьПараметр("Статья",Статья);		
		
	конецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственноеЛицо) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"98 = 98","ПланДвиженийДенежныхСредств.ОтветственноеЛицо = &ОтветственноеЛицо");	
		Запрос.УстановитьПараметр("ОтветственноеЛицо",ОтветственноеЛицо);		
		
	конецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"97 = 97","ПланДвиженийДенежныхСредств.Контрагент = &Контрагент");	
		Запрос.УстановитьПараметр("Контрагент",Контрагент);		
	конецЕсли;
	Результат = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	ОбластьПодИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
	ТабДок.Вывести(ОбластьПодИтог,0);
	
	ВыборкаСтатья = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСтатья.Следующий() Цикл
		ОбластьПодИтог.Параметры.Заполнить(ВыборкаСтатья);
		ТабДок.Вывести(ОбластьПодИтог,1);
		
		ВыборкаОтветственноеЛицо = ВыборкаСтатья.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОтветственноеЛицо.Следующий() Цикл
			ОбластьПодИтог.Параметры.Заполнить(ВыборкаОтветственноеЛицо);
			областьПодИтог.Параметры.исполнитель = ВыборкаОтветственноеЛицо.ОтветственноеЛицо;
			ТабДок.Вывести(ОбластьПодИтог,2,,Ложь);
			
			ВыборкаИсполнитель = ВыборкаОтветственноеЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаИсполнитель.Следующий() Цикл
				ОбластьПодИтог.Параметры.Заполнить(ВыборкаИсполнитель);
				ТабДок.Вывести(ОбластьПодИтог,3,,Ложь);
				
				ВыборкаДетальныеЗаписи = ВыборкаИсполнитель.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ОбластьСтрока.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
					ТабДок.Вывести(ОбластьСтрока,4,,Ложь);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

ТабДок.ЗакончитьАвтогруппировкуСтрок();
//ТабДок.ИтогиСнизу = Истина;
ТабДок.ОтображатьСетку = Ложь;
ТабДок.Защита = Ложь;
ТабДок.ТолькоПросмотр = Истина;
ТабДок.Показать("Расшифровка плана затрат");

	
	
	
конецПроцедуры	

Процедура СформироватьПланФактНажатие(Элемент)
	
	
	ЭлементыФормы.КонтрольРасходов.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("планФактПриходов");
	
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.НачалоПериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НачалоМесяца(МесяцПланирования);
	
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.КонецПериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = конецМесяца(МесяцПланирования);

	
	
	список = новый списокЗначений;
	список.Добавить(Справочники.ТипыДоговоров.ОтсрочкаОТХ);
	список.Добавить(Справочники.ТипыДоговоров.ПеремещениеОТХ);
	список.Добавить(Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
	список.Добавить(Справочники.ТипыДоговоров.WheelsGroupLimited);
	список.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00007"));
	список.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00001"));
	список.Добавить(Справочники.ТипыДоговоров.НайтиПоКоду("00004"));

	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.ТипПокупатели;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = Список;
	
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,истина);
	ЭлементыФормы.ПланФакт.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.ПланФакт);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    ЭлементыФормы.ПланФакт.ТолькоПросмотр = Истина;
КонецПроцедуры
