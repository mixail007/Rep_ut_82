перем WinHttp;
перем СтруктураОтвета;
перем ПредложенияКолесаТУТ;
перем УдалятьВременныеФайлы;


Процедура ПриОткрытии()
	ЗаполнитьСписокРегионов();
	//Если ПредложенияКолесаТУТ.Количество()=0 тогда
	//	Сообщить("Заполняется список моделей Я.М.");
	//	ПолучитьПредложенияКолесаТУТ();
	//КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСписокРегионов()
	СписокРегионов = новый СписокЗначений;
	СписокРегионов.Очистить();
	//регионы с кодами яндекса
	//http://hmxblog.ya.ru/replies.xml?item_no=2780
	
	СписокРегионов = ДобавитьРегион(СписокРегионов,"213","Москва");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"2","С. Петербург");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"43","Казань");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"54","Екатеринбург");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"16","Ярославль");
	
	//ЦФО
	СписокРегионов = ДобавитьРегион(СписокРегионов,"1","Москва и Московская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10645","Белгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10650","Брянская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10658","Владимирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10672","Воронежская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10687","Ивановская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10693","Калужская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10699","Костромская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10705","Курская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10712","Липецкая область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10772","Орловская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10776","Рязанская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10795","Смоленская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10802","Тамбовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10819","Тверская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10832","Тульская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10841","Ярославская область");
	
	//Северо-Западный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10174","Санкт-Петербург и Ленинградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10176","Ненецкий автономный округ");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10842","Архангельская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10853","Вологодская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10857","Калининградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10897","Мурманская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10904","Новгородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10926","Псковская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10933","Республика Карелия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10939","Республика Коми");
	
	//Южный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10946","Астраханская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10950","Волгоградская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10995","Краснодарский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11004","Республика Адыгеяи");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11015","Республика Калмыкия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11029","Ростовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"977","Республика Крым");

	//Приволжский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11070","Кировская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11077","Республика Марий Эл");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11079","Нижегородская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11084","Оренбургская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11095","Пензенская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11108","Пермский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11111","Республика Башкортостан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11117","Республика Мордовия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11119","Республика Татарстан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11131","Самарская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11146","Саратовская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11148","Удмуртская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11153","Ульяновская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11156","Чувашская Республика");
	
	//Уральский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11158","Курганская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11162","Свердловская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11176","Тюменская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11193","Ханты-Мансийский автономный округ - Югра");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11225","Челябинская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11232","Ямало-Ненецкий автономный округ");

	//Сибирский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10231","Республика Алтай");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10233","Республика Тыв");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11235","Алтайский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11266","Иркутская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11282","Кемеровская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11309","Красноярский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11316","Новосибирская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11318","Омская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11330","Республика Бурятия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11340","Республика Хакасия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11353","Томская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"21949","Забайкальский край");

	//Дальневосточный федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10243","Еврейская автономная область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"10251","Чукотский автономный округ");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11375","Амурская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11398","Камчатский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11403","Магаданская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11409","Приморский край");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11443","Республика Саха (Якутия)");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11450","Сахалинская область");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11457","Хабаровский край");
	
	//Северо-Кавказский федеральный округ
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11010","Республика Дагестан");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11012","Республика Ингушетия");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11013","Кабардино-Балкарская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11020","Карачаево-Черкесская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11021","Республика Северная Осетия — Алания");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11024","Чеченская Республика");
	СписокРегионов = ДобавитьРегион(СписокРегионов,"11069","Ставропольский край");

	
	СписокРегионов.СортироватьПоПредставлению();
	//ЭлементыФормы.СписокРегионов.СписокВыбора=СписокРегионов;
	//Регионы.ЗагрузитьЗначения(СписокРегионов.ВыгрузитьЗначения());
	//Для каждого рег из СписокРегионов цикл
	//	нсп = Регионы.Добавить(); 
	//	ЗаполнитьЗначенияСвойств(нсп,рег);
	//КонецЦикла;	

	//Регионы.СортироватьПоПредставлению();
	
	ЭлементыФормы.СписокВыбораРегионов.СписокВыбора = СписокРегионов;
КонецПроцедуры

Функция ДобавитьРегион(Список,КодРегиона,НазваниеРегиона)
	Если Список.НайтиПоЗначению(КодРегиона)=неопределено тогда
		Список.Добавить(КодРегиона,НазваниеРегиона);
		//Регионы.Добавить(КодРегиона,НазваниеРегиона);
	КонецЕсли;
	возврат Список;
КонецФункции


Процедура СписокВыбораРегионовПриИзменении(Элемент)
//	Сообщить("" + Элемент.ВыделенныйТекст + " - " + Элемент.Значение);
КонецПроцедуры


Процедура КоманднаяПанель2кнОтобрать(Кнопка)
	ВнешниеНаборыДанных = Новый Структура;
	
	ТоварныеПредложения = ПолучитьДиски();
	
	ВнешниеНаборыДанных.Вставить("тз", ТоварныеПредложения);
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		 
		 КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Настройки = КомпоновщикНастроек.Настройки;				
		МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
		);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеТЗ = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеТЗ);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		//ЭлементыФормы.ДанныеТЗ.СоздатьКолонки();
	КонецПроцедуры
	
	
	Функция ПолучитьДиски()
		Запрос = новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	Номенклатура.Ссылка КАК Номенклатура,
		             |	Номенклатура.Код
		             |ИЗ
		             |	Справочник.Номенклатура КАК Номенклатура
		             |ГДЕ
		             |	Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)";
					 
					 Возврат Запрос.Выполнить().Выгрузить()
	КонецФункции


	Процедура кнСравнитьНажатие(Элемент)
		// Вставить содержимое обработчика.
	КонецПроцедуры


	Процедура кнПолучитьПредложенияНажатие(Элемент)
		//Если ПредложенияКолесаТУТ.Количество() = 0 тогда
		//	ПолучитьПредложенияКолесаТУТ();
		//КонецЕсли;
		
		Если не ЗначениеЗаполнено(СписокВыбораРегионов) тогда
			Сообщить("Не заполнен регион");
			возврат;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(idМодели) тогда
			Сообщить("Не заполнена модель");
			возврат;
		КонецЕсли;
		
		
		тз=новый ТаблицаЗначений;
		тз.Колонки.Добавить("Магазинid");
		тз.Колонки.Добавить("Магазин");
		тз.Колонки.Добавить("Цена");
		тз.Колонки.Добавить("Модель");
		тз.Колонки.Добавить("name");
		тз.Колонки.Добавить("url");
		тз.Колонки.Добавить("link");
		тз.Колонки.Добавить("id");
		
		ПолучитьПредложения(0,тз, СписокВыбораРегионов);
		
		Предложения=тз;
		ЭлементыФормы.Предложения.СоздатьКолонки();
		
		
		ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
		", остаток: "+СтруктураОтвета.ОстатокЛимита+
		", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
		
		ЭлементыФормы.Индикатор1.МаксимальноеЗначение = Предложения.Количество();
		ЭлементыФормы.Индикатор1.Значение = 0;
		кол = 0;
		Для каждого стр из Предложения цикл
			кол = кол+1;
			
			Магазин = ПолучитьИнформациюОПредложении(стр.id,СписокВыбораРегионов);
			
			стр.Магазин = Магазин.Name;
			стр.Магазинid = Магазин.id;
			ЭлементыФормы.Индикатор1.Значение = кол;	
			
		КонецЦикла;
		
		Предложения.Сортировать("Цена,Магазин");
		
		ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
		", остаток: "+СтруктураОтвета.ОстатокЛимита+
		", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
	КонецПроцедуры
	
	Процедура ПолучитьПредложенияКолесаТУТ()
		ПредложенияКолесаТУТ.Очистить();
		ЭлементыФормы.Индикатор1.Значение = 0;
		
		Сервер = "api.partner.market.yandex.ru";
		//Запрос Товарные предложения кампании
		магазин = "21531361";
		Ресурс = "/v2/campaigns/"+магазин+"/offers.xml?pageSize=1000&matched=1";
		
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		ВсегоСтраниц=0;
		Попытка
			
			WinHttp.Open("GET","https://api.partner.market.yandex.ru"+Ресурс,0);
			
			//WinHttp.Option(9,80);
			
			WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
			WinHttp.setRequestHeader("Content-Type","application/xml");    
			WinHttp.SetRequestHeader("Accept-Language", "ru");
			WinHttp.SetRequestHeader("Accept-Charset","utf-8");
			WinHttp.setRequestHeader("Content-Language", "ru"); 
			WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
			WinHttp.Send();
			
			Ответ = WinHttp.ResponseText();
			
			ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
			СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
			
			ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
			
			
			Текст = новый ТекстовыйДокумент;
			Текст.ДобавитьСтроку(Ответ);
			Текст.Записать(ФайлРезультата,"UTF-8 ");
			
			тз=новый ТаблицаЗначений;
			тз.Колонки.Добавить("name",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(220)));
			тз.Колонки.Добавить("id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
			тз.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			тз.Колонки.Добавить("НоменклатураКод",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(7)));
			тз.Колонки.Добавить("model_id",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
			тз.Колонки.Добавить("price",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Колонки.Добавить("currency",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
			тз.Колонки.Добавить("bid",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Колонки.Добавить("cbid",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10,2)));
			тз.Очистить();
			
			ФайлXML = Новый ЧтениеXML;
			ФайлXML.ОткрытьФайл(ФайлРезультата);
			//ФайлXML.ОткрытьФайл("C:\1c\tt.xml");
			
			Запись=новый Структура("name,id,model_id,price,currency,bid,cbid");
			
			Пока ФайлXML.Прочитать() Цикл
				Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ФайлXML.Имя="pager" тогда
						ВсегоСтраниц=Число(ФайлXML.ПолучитьАтрибут("pages-count"));
					иначеЕсли ФайлXML.Имя="offer" тогда
						Запись.id=ФайлXML.ПолучитьАтрибут("id");
						Запись.model_id=ФайлXML.ПолучитьАтрибут("model-id");
						Запись.price=ФайлXML.ПолучитьАтрибут("price");
						Запись.currency=ФайлXML.ПолучитьАтрибут("currency");
						Запись.bid=ФайлXML.ПолучитьАтрибут("bid");
						Запись.cbid=ФайлXML.ПолучитьАтрибут("cbid");
					иначеЕсли ФайлXML.Имя="name"  тогда
						ФайлXML.Прочитать();
						Запись.name=ФайлXML.Значение;
					КонецЕсли;
				КонецЕсли;    
				
				Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="offer" Тогда
					Если Найти(Запись.id,"LA")=0 тогда
						стр=ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(стр,Запись);
					КонецЕсли;
				КонецЕсли;    
			КонецЦикла;
			
			ЭлементыФормы.Индикатор1.МаксимальноеЗначение = ВсегоСтраниц;
			
			ФайлXML.Закрыть();
			Для КолСтраниц=2 по ВсегоСтраниц цикл
				ЭлементыФормы.Индикатор1.Значение = КолСтраниц;
				Ресурс = "/v2/campaigns/"+магазин+"/offers.xml?pageSize=1000&matched=1&page="+КолСтраниц;
				
				WinHttp.Open("GET","https://api.partner.market.yandex.ru"+Ресурс,0);
				WinHttp.setRequestHeader("Authorization", "OAuth oauth_token=AQAAAAAZKUkvAASadHSEMjMUzkRCqSfh4aT165w,oauth_login=KOLESATYT.RU,oauth_client_id=9bacaa9780dd418bb8448f266fff59ae");
				WinHttp.setRequestHeader("Content-Type","application/xml");    
				WinHttp.SetRequestHeader("Accept-Language", "ru");
				WinHttp.SetRequestHeader("Accept-Charset","utf-8");
				WinHttp.setRequestHeader("Content-Language", "ru"); 
				WinHttp.setRequestHeader("Content-Charset", "utf-8"); 
				
				Попытка
					//ОтветHTTP=HTTP.Получить(Ресурс, ФайлРезультата, ЗаголовокHTTP);
					WinHttp.Send();
					
					Ответ = WinHttp.ResponseText();
					
					Текст = новый ТекстовыйДокумент;
					Текст.ДобавитьСтроку(Ответ);
					Текст.Записать(ФайлРезультата,"UTF-8 ");
					
					Если WinHttp.status <>200 тогда
						ВызватьИсключение("Ответ сервера: "+WinHttp.status+" "+WinHttp.statusText);
					КонецЕсли;
					
					ФайлXML = Новый ЧтениеXML;
					ФайлXML.ОткрытьФайл(ФайлРезультата);
					Пока ФайлXML.Прочитать() Цикл
						Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
							Если ФайлXML.Имя="pager" тогда
								ВсегоСтраниц=Число(ФайлXML.ПолучитьАтрибут("pages-count"));
							иначеЕсли ФайлXML.Имя="offer" тогда
								Запись.id=ФайлXML.ПолучитьАтрибут("id");
								Запись.model_id=ФайлXML.ПолучитьАтрибут("model-id");
								Запись.price=ФайлXML.ПолучитьАтрибут("price");
								Запись.currency=ФайлXML.ПолучитьАтрибут("currency");
								Запись.bid=ФайлXML.ПолучитьАтрибут("bid");
								Запись.cbid=ФайлXML.ПолучитьАтрибут("cbid");
							иначеЕсли ФайлXML.Имя="name"  тогда
								ФайлXML.Прочитать();
								Запись.name=ФайлXML.Значение;
							КонецЕсли;
						КонецЕсли;    
						
						Если ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента и ФайлXML.Имя="offer" Тогда
							Если Найти(Запись.id,"LA")=0 тогда
								стр=ТЗ.Добавить();
								ЗаполнитьЗначенияСвойств(стр,Запись);
							КонецЕсли;
						КонецЕсли;    
					КонецЦикла;    
					ФайлXML.Закрыть();
					Если УдалятьВременныеФайлы тогда
						УдалитьФайлы(ФайлРезультата);
					КонецЕсли;
				Исключение
					Текст=Новый текстовыйДокумент;
					Текст.Прочитать(ФайлРезультата);
					Сообщить("Произошла ошибка.");
					Сообщить(Текст.ПолучитьТекст());
					
					Если УдалятьВременныеФайлы тогда
						УдалитьФайлы(ФайлРезультата);
					КонецЕсли;

				КонецПопытки;
				
			КонецЦикла;

			Запрос=новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			             |	вт.name,
			             |	вт.id,
			             |	вт.Номенклатура,
			             |	вт.model_id,
			             |	вт.price,
			             |	вт.currency,
			             |	вт.bid,
			             |	вт.cbid
			             |ПОМЕСТИТЬ втТаблица
			             |ИЗ
			             |	&вт КАК вт
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ РАЗЛИЧНЫЕ
			             |	втТаблица.name,
			             |	втТаблица.id,
			             |	втТаблица.Номенклатура,
			             |	втТаблица.model_id,
			             |	втТаблица.price,
			             |	втТаблица.currency,
			             |	втТаблица.bid,
			             |	втТаблица.cbid
			             |ПОМЕСТИТЬ втТаблица2
			             |ИЗ
			             |	втТаблица КАК втТаблица
			             |;
			             |
			             |////////////////////////////////////////////////////////////////////////////////
			             |ВЫБРАТЬ
			             |	СпрНоменклатура.Ссылка КАК Номенклатура,
			             |	втТаблица2.name,
			             |	втТаблица2.id,
			             |	втТаблица2.model_id,
			             |	втТаблица2.price,
			             |	втТаблица2.currency,
			             |	втТаблица2.bid,
			             |	втТаблица2.cbid
			             |ИЗ
			             |	втТаблица2 КАК втТаблица2
			             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			             |		ПО втТаблица2.id = СпрНоменклатура.Код";
			Запрос.УстановитьПараметр("вт",тз);
			тз=Запрос.Выполнить().Выгрузить();
			ПредложенияКолесаТУТ=тз;
			
			ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
			СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
			
			ЭтаФорма.Заголовок="Я.Маркет"+" (Лимит запросов: "+СтруктураОтвета.ЛимитРесурса+
			", остаток: "+СтруктураОтвета.ОстатокЛимита+
			", обнуление лимита: "+СтруктураОтвета.ЛимитОбнуляется+")";
		Исключение
			Текст=Новый текстовыйДокумент;
			Текст.Прочитать(ФайлРезультата);
			Сообщить("Произошла ошибка.");
			Сообщить(Текст.ПолучитьТекст());
		КонецПопытки;
	КонецПроцедуры
	
	
	Функция ПолучитьИнформациюОПредложении(Предложение,ИдРегиона)
		Магазин = новый Структура("name,id");
		ЗапросОТоварномПредложении = "https://api.content.market.yandex.ru/v2.1/offers/"+Предложение+"?format=XML&geo_id="+ИдРегиона+"&fields=SHOP"; 
		WinHttp.Open("GET",ЗапросОТоварномПредложении,0);
		WinHttp.setRequestHeader("Authorization", "HW9ULBW4JPMAHD63ZHN11CGJDZBRYK");
		WinHttp.Send();
		
		Ответ = WinHttp.ResponseText();
		
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлРезультата);
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

		ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
		СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
		
		Магазин.name = XDTO.offer.shop.name;
		Магазин.id = XDTO.offer.shop.id;
		
		Возврат Магазин;
		
	КонецФункции
	
	Процедура ПолучитьПредложения(страница, тз, idРегиона)
		Запрос = "https://api.content.market.yandex.ru/v2.1/models/"+idМодели+"/offers?&geo_id="+idРегиона+"&format=XML&count=30";
		
		Если Число(Формат(страница,"ЧН=0; ЧГ="))>0 тогда
			Запрос = "https://api.content.market.yandex.ru/v2.1/models/"+idМодели+"/offers?&geo_id="+idРегиона+"&format=XML&count=30&page="+СокрЛП(страница);
		КонецЕсли;
		
		WinHttp.Open("GET",Запрос,0);
		WinHttp.setRequestHeader("Authorization", "HW9ULBW4JPMAHD63ZHN11CGJDZBRYK");
		//WinHttp.setRequestHeader("Authorization", "31a41d2e-adb0-4287-8682-9717260763a2");
		WinHttp.Send();
		Ответ = WinHttp.ResponseText();
		
		ЗаголовкиОтвета = WinHttp.GetAllResponseHeaders();
		СтруктураОтвета = ПолучитьСтруктуруОтветаПоТексту(ЗаголовкиОтвета);
		
		ФайлРезультата = ПолучитьИмяВременногоФайла("xml");
		
		Текст = новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Ответ);
		Текст.Записать(ФайлРезультата,"UTF-8 ");
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлРезультата);
		XDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		
		Если XDTO.status="OK" тогда
			
			ВсегоСтраницОтвета = Число(XDTO.context.page.total);
			ТекущаяСтраницаОтвета = Число(XDTO.context.page.number);
			//
			Если ТипЗнч(XDTO.offers.offer) = Тип("ОбъектXDTO") тогда
				нстр = тз.Добавить();
				нстр.id = XDTO.offers.offer.id;
				нстр.name = XDTO.offers.offer.name;
				нстр.Цена = XDTO.offers.offer.price.value;
				нстр.Модель = XDTO.offers.offer.model.id;
				нстр.link = XDTO.offers.offer.link;
				нстр.url = XDTO.offers.offer.url;

			иначе
				Для каждого стр из XDTO.offers.offer цикл
					нстр = тз.Добавить();
					нстр.id = стр.id;
					нстр.name = стр.name;
					нстр.Цена = стр.price.value;
					нстр.Модель = стр.model.id;
					
					нстр.link = стр.link;
				    нстр.url = стр.url;
				КонецЦикла;
			КонецЕсли;
			
			Если ТекущаяСтраницаОтвета<ВсегоСтраницОтвета тогда
				ПолучитьПредложения(ТекущаяСтраницаОтвета+1,тз,idРегиона);
			КонецЕсли;
		ИначеЕсли XDTO.status="ERROR" тогда
			Сообщить(XDTO.errors.error.message);
		иначе
			Сообщить(XDTO.status);
		КонецЕсли;
	КонецПроцедуры

	Функция ПолучитьСтруктуруОтветаПоТексту(ТекстОтвета)
	СтруктураОтвета = новый Структура("ЛимитРесурса,ЛимитОбнуляется,ОстатокЛимита","","","");
	
	ТекстДок = новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ТекстОтвета);
	ВсегоСтрок = ТекстДок.КоличествоСтрок();
	
	к=0;
	пока к<=ВсегоСтрок цикл
		стр = ТекстДок.ПолучитьСтроку(к);
		Если Найти(стр,"X-RateLimit-Daily-Limit:")>0 тогда
			СтруктураОтвета.ЛимитРесурса = СокрЛП(стрЗаменить(стр,"X-RateLimit-Daily-Limit:",""));
		ИначеЕсли Найти(стр,"X-RateLimit-Daily-Until:")>0 тогда
			СтруктураОтвета.ЛимитОбнуляется = СокрЛП(стрЗаменить(стр,"X-RateLimit-Daily-Until:",""));
		ИначеЕсли Найти(стр,"X-RateLimit-Daily-Remaining:")>0 тогда
			СтруктураОтвета.ОстатокЛимита = СокрЛП(стрЗаменить(стр,"X-RateLimit-Daily-Remaining:",""));	
		КонецЕсли;	
		к=к+1;
	КонецЦикла;
	 Возврат СтруктураОтвета;
КонецФункции

Процедура ВыбНоменклатураПриИзменении(Элемент)
	//найденнаяСтрока =  ПредложенияКолесаТУТ.Найти(выбНоменклатура,"Номенклатура");
	//Если найденнаяСтрока<>неопределено тогда
	//	idМодели = найденнаяСтрока.model_id;
	//иначе
	//	idМодели="";
	//	Сообщить("Выбранная номенклатура не найдена в ЯМ Колесатут");
	//КонецЕсли;
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗначенияСвойствОбъектов.Объект,
	             |	ЗначенияСвойствОбъектов.Значение
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Объект = &Объект
	             |	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
				 
				 Запрос.УстановитьПараметр("Объект",выбНоменклатура);
				 Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90358"));
				 
				 Рез = Запрос.Выполнить().Выбрать();
				 Если рез.Количество()>0 тогда
					 Пока рез.Следующий() цикл
						idМодели = Рез.Значение; 
					 КонецЦикла;
				 Иначе
					 idМодели = "";
					 Сообщить("Выбранная номенклатура не найдена в ЯМ Колесатут");
				 КонецЕсли;
КонецПроцедуры
	
	WinHttp=Новый COMОбъект("Msxml2.SERVERXMLHTTP");
   УдалятьВременныеФайлы = истина;
   ПредложенияКолесаТУТ = новый ТаблицаЗначений;
