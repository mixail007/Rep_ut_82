перем СоответствиеПоставщиковАЭИПодразделенийЯШТ;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	тзСчетаДПД=Новый ТаблицаЗначений;
	тзСчетаДПД.Колонки.Добавить("НомерДПД", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(100)));
	тзСчетаДПД.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(100)));
	тзСчетаДПД.Колонки.Добавить("НомерИМ", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(100)));
	тзСчетаДПД.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	тзСчетаДПД.Колонки.Добавить("КодСклада", Новый ОписаниеТипов("Строка"	, , Новый КвалификаторыСтроки(100)));
	тзСчетаДПД.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число"));
	
		
	Номерстроки = 0;
	Пока Номерстроки<=ЭлементыФормы.ТабличныйДокумент.ВысотаТаблицы цикл
		Услуга=СокрЛП(ЭлементыФормы.ТабличныйДокумент.Область(Номерстроки,КолонкаТовар,Номерстроки,КолонкаТовар).Текст);
		Стоимость=СокрЛП(ЭлементыФормы.ТабличныйДокумент.Область(Номерстроки,КолонкаСтоимость,Номерстроки,КолонкаСтоимость).Текст);
		Содержание=СокрЛП(ЭлементыФормы.ТабличныйДокумент.Область(Номерстроки,КолонкаПримечание,Номерстроки,КолонкаПримечание).Текст);
		рез = РазобратьСодержание(Содержание);
		//Сообщить(Содержание+" "+Стоимость);

		//Сообщить(Содержание);
		//Сообщить("Номер ДПД: "+рез.НомерДПД+"    Номер ИМ: "+рез.НомерИМ);
		Если рез.НомерДПД<>"" и рез.НомерИМ<>"" и рез.КодСклада<>"" тогда
			нстр = тзСчетаДПД.Добавить();
			нстр.НомерДПД  = СокрЛП(рез.НомерДПД);
			нстр.Услуга = Услуга;
			нстр.НомерИМ = СокрЛП(рез.НомерИМ);
			нстр.КодСклада = СокрЛП(рез.КодСклада);

			нстр.Подразделение =СоответствиеПоставщиковАЭИПодразделенийЯШТ.Получить(СокрЛП(рез.КодСклада));
			нстр.Стоимость = Стоимость;
		КонецЕсли;
		Номерстроки=Номерстроки+1;
	КонецЦикла;
//тзСчетаДПД.ВыбратьСтроку();	
Запрос = новый Запрос;
Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
             |	тзСчетаДПД.НомерДПД,
             |	тзСчетаДПД.НомерИМ,
             |	тзСчетаДПД.Подразделение,
             |	тзСчетаДПД.Услуга,
             |	тзСчетаДПД.Стоимость
             |ПОМЕСТИТЬ втСчетаДПД
             |ИЗ
             |	&тзСчетаДПД КАК тзСчетаДПД
             |;
             |
             |////////////////////////////////////////////////////////////////////////////////
             |ВЫБРАТЬ
             |	втСчетаДПД.НомерДПД,
             |	втСчетаДПД.НомерИМ,
             |	СУММА(втСчетаДПД.Стоимость) КАК Стоимость,
             |	втСчетаДПД.Подразделение
             |ПОМЕСТИТЬ втОснова
             |ИЗ
             |	втСчетаДПД КАК втСчетаДПД
             |
             |СГРУППИРОВАТЬ ПО
             |	втСчетаДПД.НомерДПД,
             |	втСчетаДПД.НомерИМ,
             |	втСчетаДПД.Подразделение
             |;
             |
             |////////////////////////////////////////////////////////////////////////////////
             |ВЫБРАТЬ
             |	втОснова.НомерДПД,
             |	втОснова.НомерИМ,
             |	втОснова.Стоимость,
             |	ЗаказПокупателя.Ссылка,
             |	ЗаказПокупателя.СтоимостьДоставки
             |ПОМЕСТИТЬ вт
             |ИЗ
             |	втОснова КАК втОснова
             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
             |		ПО втОснова.НомерИМ = ЗаказПокупателя.НомерВходящегоДокумента
             |			И втОснова.Подразделение = ЗаказПокупателя.Подразделение
             |;
             |
             |////////////////////////////////////////////////////////////////////////////////
             |ВЫБРАТЬ
             |	вт.НомерДПД,
             |	вт.НомерИМ,
             |	вт.Стоимость КАК СтоимостьДПД,
             |	вт.Ссылка КАК ЗаказПокупателя,
             |	вт.СтоимостьДоставки КАК СтоимостьНаша,
             |	вт.Стоимость-вт.СтоимостьДоставки КАК Разность
             |ИЗ
             |	вт КАК вт
             |ГДЕ
             |	НЕ вт.Стоимость = вт.СтоимостьДоставки
             |ИТОГИ
             |	СУММА(СтоимостьДПД),
             |	СУММА(СтоимостьНаша),
             |	СУММА(Разность)
             |ПО
             |	ОБЩИЕ";
			 Запрос.УстановитьПараметр("тзСчетаДПД",тзСчетаДПД);
			 Рез = Запрос.Выполнить();
			 
			 Макет = ПолучитьМакет("Макет");
			 ТабДок = новый ТабличныйДокумент;
			 
			 ОбластьЗаказ = Макет.ПолучитьОбласть("СтрокаЗаказПокупателя");
			 ОбластьИтоги = Макет.ПолучитьОбласть("СтрокаИтоги");
			 
			 ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
			 Итоги = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 пока Итоги.Следующий() цикл
				 ОбластьИтоги.Параметры.Заполнить(Итоги);
				 
				 ВыборкаЗаказПокупателя = Итоги.Выбрать();
				 Пока ВыборкаЗаказПокупателя.Следующий() Цикл
					 ОбластьЗаказ.Параметры.Заполнить(ВыборкаЗаказПокупателя);
					 ТабДок.Вывести(ОбластьЗаказ);
				 КонецЦикла;
			 КонецЦикла;
			  ТабДок.Вывести(ОбластьИтоги);
			 ТабДок.ТолькоПросмотр=Истина;
			 ТабДок.Показать("Сверка счетов ДПД");
КонецПроцедуры

Процедура ОсновныеДействияФормыкнНеВыгрузили(Кнопка)
	тзГородаНПП=Новый ТаблицаЗначений;
	тзГородаНПП.Колонки.Добавить("КодГорода", Новый ОписаниеТипов("Число"));
	
	Номерстроки = 0;
	Пока Номерстроки<=ЭлементыФормы.тдГородаНПП.ВысотаТаблицы цикл
		ГородСтр=СокрЛП(ЭлементыФормы.тдГородаНПП.Область(Номерстроки,1,Номерстроки,1).Текст);
		ГородСтр=?(ГородСтр="","0",ГородСтр);
		
		Город=Число(ГородСтр);	
		Если  Город>0 тогда
		нстр=тзГородаНПП.Добавить();
		нстр.КодГорода=Город;
		КонецЕсли;
		Номерстроки=Номерстроки+1;
		
	КонецЦикла;
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	тзГородаНПП.КодГорода
	             |ПОМЕСТИТЬ втГородаНПП
	             |ИЗ
	             |	&тзГородаНПП КАК тзГородаНПП
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Города.Ссылка,
	             |	Города.Владелец КАК Регион,
	             |	Города.КодГорода
	             |ИЗ
	             |	Справочник.Города КАК Города
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГородаНПП КАК втГородаНПП
	             |		ПО Города.КодГорода = втГородаНПП.КодГорода
	             |ГДЕ
	             |	НЕ Города.Комментарий ПОДОБНО ""%+%""";
				  Запрос.УстановитьПараметр("тзГородаНПП",тзГородаНПП);
				  рез = Запрос.Выполнить().Выбрать();
				  пока рез.Следующий() цикл
					  Сообщить(""+Рез.Ссылка+"   ***   "+рез.Регион+"   ***   "+рез.КодГорода);
				  конецЦикла;
				  

КонецПроцедуры

функция РазобратьСодержание(содержание)
	Рез =новый Структура("НомерДПД,НомерИМ,КодСклада");
	рез.НомерДПД = "";
	рез.НомерИМ="";
	рез.КодСклада="";
	
	//04262746MOW-ИМ00118204_П000835-04.05.2016-PCL-Санкт-Петербург-Иваново-(9166603) HANKOOK Ventus V12 Evo2 K120 225/40R18 92Y KR - 2# (9178010) Пакет для шин/дисков 80x105 KOLESATYT.RU - 2#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              		
	СодержаниеВр = содержание;
	ПозицияРазделителя = найти(СодержаниеВр,"-");
	Если ПозицияРазделителя>0 тогда
		номерДПД = Лев(СодержаниеВр,ПозицияРазделителя-1);
		СодержаниеВр = СтрЗаменить(СодержаниеВр,НомерДПД+"-","");
		ПозицияРазделителя = найти(СодержаниеВр,"-");
		Если ПозицияРазделителя>0 тогда
			НомерИМСКодомПодразделения = Лев(СодержаниеВр,ПозицияРазделителя-1);
			ПозицияРазделителя2 = найти(СодержаниеВр,"_");
			Если ПозицияРазделителя2>0 тогда
				НомерИМ = Лев(СодержаниеВр,ПозицияРазделителя2-1);
				КодСклада = СтрЗаменить(СодержаниеВр,НомерИМ+"_","");
				ПозицияРазделителя3 = найти(КодСклада,"-");
				Если ПозицияРазделителя3>0 тогда
					КодСклада = Лев(КодСклада,ПозицияРазделителя3-1);
					рез.НомерДПД = номерДПД;
					рез.НомерИМ=НомерИМ;
					рез.КодСклада = КодСклада;
				КонецЕсли;
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	возврат рез;
КонецФункции

// Процедура - обаботчик события, при нажатии на кнопку "Открыть файл..." Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаОткрыть(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls|Табличный документ (*.mxl)|*.mxl|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Прочитать(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция считывает в табличный документ данные из файла в формате Excel
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате Excel, из которого необходимо прочитать данные
//  НомерЛистаExcel    - номер листа книги Excel, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент, ИмяФайла, НомерЛистаExcel = 1) Экспорт
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	
	ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	Для Column = 1 По ColumnCount Цикл
		ТабличныйДокумент.Область("C" + Формат(Column, "ЧГ=")).ШиринаКолонки = ExcelЛист.Columns(Column).ColumnWidth;
	КонецЦикла;
	Для Row = 1 По RowCount Цикл
		
		Для Column = 1 По ColumnCount Цикл
			ТабличныйДокумент.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Value;
		КонецЦикла;
		
	КонецЦикла;
	
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате TXT
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Попытка
		ТекстовыйДокумент.Прочитать(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	Для ТекущаяСтрока = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		ТекущаяКолонка = 0;
		Для каждого Значение Из мРазложитьСтрокуВМассивПодстрок(ТекстовыйДокумент.ПолучитьСтроку(ТекущаяСтрока),Символы.Таб) Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция считывает в табличный документ данные из файла в формате dBase III (*.dbf)
//
// Параметры:
//  ТабличныйДокумент  - ТабличныйДокумент, в который необходимо прочитать данные
//  ИмяФайла           - имя файла в формате TXT, из которого необходимо прочитать данные
//
// Возвращаемое значение:
//  Истина, если файл прочитан, Ложь - иначе
//
Функция мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ИмяФайла) Экспорт
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.OEM;
	Попытка
		XBase.ОткрытьФайл(ИмяФайла);
	Исключение
		Сообщить("Ошибка открытия файла!");
		Возврат Ложь;
	КонецПопытки;
	
	ТабличныйДокумент.Очистить();
	ТекущаяСтрока = 1;
	
	
	ТекущаяКолонка = 0;
	Для каждого Поле Из XBase.поля Цикл
		ТекущаяКолонка = ТекущаяКолонка + 1;
		ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = Поле.Имя;
	КонецЦикла;
	
	
	Рез = XBase.Первая();
	Пока Не XBase.ВКонце() Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ТекущаяКолонка = 0;
		Для каждого Поле Из XBase.поля Цикл
			ТекущаяКолонка = ТекущаяКолонка + 1;
			ТабличныйДокумент.Область("R" + Формат(ТекущаяСтрока, "ЧГ=") +"C" + Формат(ТекущаяКолонка, "ЧГ=")).Текст = XBase.ПолучитьЗначениеПоля(ТекущаяКолонка - 1);
		КонецЦикла;
		
		XBase.Следующая();
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ()

// Функция "расщепляет" строку на подстроки, используя заданный
//		разделитель. Разделитель может иметь любую длину.
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например,
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов,
//		три из которых - пустые строки, а
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры:
//		Стр - 			строка, которую необходимо разложить на подстроки.
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция мРазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Процедура ПриОткрытии()
	КолонкаТовар      = 1;
	КолонкаСтоимость  = 6;
	КолонкаПримечание = 7;
КонецПроцедуры


СоответствиеПоставщиковАЭИПодразделенийЯШТ = новый Соответствие;
СоответствиеПоставщиковАЭИПодразделенийЯШТ.Вставить("000092773",Справочники.Подразделения.НайтиПоКоду("00005"));//головное
СоответствиеПоставщиковАЭИПодразделенийЯШТ.Вставить("УТ0000494",Справочники.Подразделения.НайтиПоКоду("00138"));//Екб
СоответствиеПоставщиковАЭИПодразделенийЯШТ.Вставить("УТИМ31438",Справочники.Подразделения.НайтиПоКоду("00133"));//мск
СоответствиеПоставщиковАЭИПодразделенийЯШТ.Вставить("Ф00000010",Справочники.Подразделения.НайтиПоКоду("00106"));//рнд
СоответствиеПоставщиковАЭИПодразделенийЯШТ.Вставить("П000835",Справочники.Подразделения.НайтиПоКоду("00112"));//спб

