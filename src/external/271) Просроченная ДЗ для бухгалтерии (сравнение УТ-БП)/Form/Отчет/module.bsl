
Перем мТекущиеНастройки;
Перем мТипМенеджера;
Перем мВидДоговора;
Перем мТипыДоговоров;
Перем мПодразделения;
Перем мМенеджерОтбор;
Перем мКонтрагенты;
Перем мИсключитьКонтрагентов;
Перем мГруппироватьПоПодразделениям;
Перем СекундВСутках;

Функция ПолучитьСтроркуОтборов()
	
	СтрокаВозврата = "";
	
	
	СтрокаВозврата = СтрокаВозврата + "Настройки и отбор:" + Символы.ПС + "Менеджеры: По ответственному лицу за договор;" + Символы.ПС;
	
	
	
	Если мВидДоговора.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Вид договора: ";
		
		Для каждого ВидДоговора Из мВидДоговора Цикл
			
			СтрокаВозврата = СтрокаВозврата + Строка(ВидДоговора) + "; ";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мТипыДоговоров.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Отбор по типам договоров: ";
		
		Для каждого ТипДоговора Из мТипыДоговоров Цикл
			
			СтрокаВозврата = СтрокаВозврата + ТипДоговора.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мПодразделения.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Отбор по подразделениям менеджера: ";
		
		Для каждого Подразделение Из мПодразделения Цикл
			
			СтрокаВозврата = СтрокаВозврата + Подразделение.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мКонтрагенты.Количество() > 0 Тогда
		
		Если НЕ мИсключитьКонтрагентов Тогда
			
			СтрокаВозврата = СтрокаВозврата + "Отбор по контрагентам: ";
			
		Иначе
			
			СтрокаВозврата = СтрокаВозврата + "Исключены контрагенты: ";
			
		КонецЕсли; 
		
		
		Для каждого Контрагент Из мКонтрагенты Цикл
			
			СтрокаВозврата = СтрокаВозврата + Контрагент.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли;
	
	Если НЕ ЗначениеНеЗаполнено(мМенеджерОтбор) Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Отбор по менеджеру: ";	
		СтрокаВозврата = СтрокаВозврата + строка(мМенеджерОтбор) + ";";
		
	КонецЕсли; 
	
	Возврат СтрокаВозврата;
	
КонецФункции

Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	Если ЗначениеНеЗаполнено(ДатаНач) Тогда
		Сообщить("Необходимо заполнить начальную дату отчета (Период с:)");		
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДатаКон) Тогда
		Сообщить("Необходимо заполнить конечную дату отчета (по)");	
		Возврат;
	КОнецЕсли;	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	
//+++   18.05.2012
	началоВр = ТекущаяДата();
	
	Отчет(ТабДок);

	КонецВр = ТекущаяДата();
	ВремяВыполнения = Число(КонецВр - началоВр);
	
 	парамЗапроса = ?(Дебеторская=1,"Дебеторская","Кредиторская"); 
	Если ВремяВыполнения>0 тогда
		//общий модуль:  яштПрочее.ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки(
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 102, ВремяВыполнения, "Кнопка [Сформировать] - "+парамЗапроса+" ("+строка(ВремяВыполнения)+" Сек.)" ); //!!!!
	КонецЕсли;	
	//+++)   18.05.2012

КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	
	Если Валюта = Справочники.Валюты.НайтиПоКоду("643") Тогда
		Макет = ПолучитьМакет("Отчет");
	Иначе
		Макет = ПолучитьМакет("ОтчетВал");
	КонецЕсли;
	Запрос = Новый Запрос;              
	
	Если мВидДоговора.Количество() = 0 Тогда
		
		ИспользоватьВидДоговора = Ложь;
		
	Иначе
		
		ИспользоватьВидДоговора = Истина;
		
		ВидДоговораЗапроса = Новый Массив;
		ВидДоговораЗапроса.Очистить();
		
		Для каждого ВидДоговора Из мВидДоговора Цикл
			
			ВидДоговораЗапроса.Добавить(ВидДоговора);
			
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговораЗапроса);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипМенеджера", мТипМенеджера);
	
	Запрос.УстановитьПараметр("ДатаКон", НачалоДня(КонецДня(ДатаКон)+1));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	
	//+++ 16.01.2014
	Запрос.УстановитьПараметр("ПросрочСумма", этаФорма.ПросрочСумма );
    Запрос.УстановитьПараметр("ПросрочСрок",  этаФорма.ПросрочСрок );
    
	Если мПодразделения.Количество() > 0 Тогда
		
		ОтбиратьПоПодразделению = Истина;
		
	Иначе
		
		ОтбиратьПоПодразделению = Ложь;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОсновноеПодразделение", мПодразделения);
	
	Если мТипыДоговоров.Количество() > 0 Тогда
		
		ОтбиратьПоТипам = Истина;
		
	Иначе
		
		ОтбиратьПоТипам = Ложь;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТипДоговора", мТипыДоговоров);
	
	Если НЕ ЗначениеНеЗаполнено(мМенеджерОтбор) Тогда
		ОтбиратьПоМенеджеру = Истина;
	Иначе
		ОтбиратьПоМенеджеру = Ложь;
	КонецЕсли; 
	
		//Запрос.УстановитьПараметр("МенеджерОтбор", мМенеджерОтбор);
		Если ТипЗнч(мМенеджерОтбор)=Тип("СправочникСсылка.Пользователи") тогда
			списокМенеджеров = новый СписокЗначений;
			списокМенеджеров.Добавить(мМенеджерОтбор);
			Запрос.УстановитьПараметр("МенеджерОтбор", списокМенеджеров);
		Иначе	
			Запрос.УстановитьПараметр("МенеджерОтбор", мМенеджерОтбор);
		КонецЕсли;	

	
	Если мКонтрагенты.Количество() > 0 Тогда
		
		ОтбиратьПоКонтрагентам = Истина;
		
	Иначе
		
		ОтбиратьПоКонтрагентам = Ложь;
		
	КонецЕсли; 
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Дебеторская = ?(Дебеторская=1,"дебеторской","кредиторской");
	
	если мГруппироватьПоПодразделениям тогда
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	иначе 
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы1");
	КонецЕсли;
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьМенеджер = Макет.ПолучитьОбласть("Менеджер");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьКонтрагентБел = Макет.ПолучитьОбласть("КонтрагентБел");
	ОбластьКонтрагентКрасн = Макет.ПолучитьОбласть("КонтрагентКрасн");
	
	ОбластьПодразделение = Макет.ПолучитьОбласть("Подразделение");
	ОбластьДоговорКонтрагента = Макет.ПолучитьОбласть("ДоговорКонтрагента");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьОтборов = Макет.ПолучитьОбласть("СписокОтборов");
	
	Запрос.УстановитьПараметр("Контрагенты", мКонтрагенты);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Дебиторская", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	      
	Если Дебеторская = 1 
		или НЕ мГруппироватьПоПодразделениям Тогда
			
		Запрос.Текст ="
		|ВЫБРАТЬ
		| ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо) Менеджер,
		| ВЫБОР КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение) Есть NULL
		| ТОГДА ""Менеджеры без подразделений"" ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение) КОНЕЦ
		|КАК Подразделение,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.Владелец) КАК Контрагент,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента) КАК ДоговорКонтрагента,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0) КАК СуммаВзаиморасчетов,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка,ВыставилиПениПоСделке.Сделка) Сделка,
		|	ВЫБОР КОГДА ВыставилиПениПоСделке.Сделка ЕСТЬ NULL ТОгда 0 ИНАЧЕ ВыставилиПениПоСделке.Пени КОНЕЦ ВыставилиПеней,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	ВЫБОР
		//Смирнов для ППИ считаем просрочку не по "ДатаОплаты", а по "ОжидаемыйСрокПоставки"
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|							ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
		|							КОНЕЦ
		//Смирнов
		|		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|				ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|	КОНЕЦ 
		|	ИНАЧЕ
		|      ВЫБОР
		//Смирнов для ППИ считаем просрочку не по "ДатаОплаты", а по "ОжидаемыйСрокПоставки"
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|							ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
		|							КОНЕЦ
		//Смирнов

		|		КОГДА ЕСТЬNULL(ВыставилиПениПоСделке.Сделка.ДатаОплаты, 0) = 0
		|				ИЛИ ВыставилиПениПоСделке.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВыставилиПениПоСделке.Сделка.Дата
		|		ИНАЧЕ ВыставилиПениПоСделке.Сделка.ДатаОплаты
		|	КОНЕЦ 
		|   КОНЕЦ
		|КАК ДатаОплаты,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	ВЫБОР
		|		КОГДА (РАЗНОСТЬДАТ(ВЫБОР 
		//Смирнов для ППИ считаем просрочку не по "ДатаОплаты", а по "ОжидаемыйСрокПоставки"
		|							КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|											ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|										ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
		|										КОНЕЦ
		//Смирнов
		|					КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|							ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|				КОНЕЦ, &ДатаКон, ДЕНЬ) > 0) 
		|			ТОГДА РАЗНОСТЬДАТ(ВЫБОР
		//Смирнов для ППИ считаем просрочку не по "ДатаОплаты", а по "ОжидаемыйСрокПоставки"
		|						КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
		|							ТОГДА ВЫБОР
		|								КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|									ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|								ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
		|							КОНЕЦ
		//Смирнов
		|						КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|								ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|						ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|					КОНЕЦ, &ДатаКон, ДЕНЬ)
		|		ИНАЧЕ 0
		|	КОНЕЦ 
		|   ИНАЧЕ
		| 0
		|	КОНЕЦ
		|   КАК Просрочка,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	ВЫБОР
		|//Смирнов
		|КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ЗаказПоПрессФормам
		|			ТОГДА ВЫБОР
		|					КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказовПоПрессформам.ПолностьюЗачтен)
		|						ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|//Смирнов
		|		КОГДА (РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|							ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|				КОНЕЦ, &ДатаКон, ДЕНЬ) > 0) ИЛИ (ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата, 0) = 0) 
		|           ИЛИ (ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток " +  ?(Дебеторская = 2, ">", "<") + " 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
		|		ИНАЧЕ 0 КОНЕЦ
		|	ИНАЧЕ
		|	0
		|   КОНЕЦ КАК СуммаПросрочки,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ВидДоговора) ВидДоговора
		| Поместить А
		|ИЗ
		|//ИСТОЧНИК
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			СУММА(ВзаиморасчетовОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, СтрокаДоговорКонтрагентаВладелец И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта) КАК ВзаиморасчетовОстатки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
		|			И (ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток " +  ?(Дебеторская = 2, "<", ">") + " 0)
		|  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	Сделка,
		|	СУММА(ПениРасход)  Пени
		|	ИЗ
		|	РегистрНакопления.НачисленныеПени.Обороты(&ДатаНач,&ДатаКон,Регистратор,СтрокаКонтрагент)
		|	ГДЕ Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг  // т.е. заведомо не попадет списание
		|	СГРУППИРОВАТЬ ПО Сделка ) ВыставилиПениПоСделке
		| 	ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка=ВыставилиПениПоСделке.Сделка
		|	ГДЕ
		|	ИСТИНА	
		|	" + ?(ИспользоватьВидДоговора, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора В (&ВидДоговора)", "") + "
		|	" + ?(ОтбиратьПоТипам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ТипДоговора В(&ТипДоговора)", "") + "
		|	" + ?(ОтбиратьПоПодразделению, " И   
		|(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение В (&ОсновноеПодразделение)
		|								ИЛИ ВыставилиПениПоСделке.Сделка.ДоговорКОнтрагента.ОтветственноеЛицо.ОсновноеПодразделение  В (&ОсновноеПодразделение))", "") + "
		|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
		|								ИЛИ ВыставилиПениПоСделке.Сделка.ДоговорКОнтрагента.ОтветственноеЛицо В (&МенеджерОтбор) )", "") + "
		|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + "
		|
		|;
		|ВЫБРАТЬ  Подразделение, Менеджер, Контрагент,  
		// 15.10.2015 |
		|" + ?(мГруппироватьПоПодразделениям, "ДоговорКонтрагента",
		//+++ 11.01.2018
		"ЕстьNull(ДоговорКонтрагента.ЕстьДогорПоручительства, Ложь)")
		   + " как ДоговорКонтрагента,
		|СуммаВзаиморасчетов, Сделка , ВыставилиПеней,
		|ДатаОплаты, Просрочка, СуммаПросрочки, СуммаУпр,
		|ВЫБОР КОГДА  Просрочка<7 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_А,
		|ВЫБОР КОГДА  Просрочка>=7 И Просрочка<14 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Б,
		|ВЫБОР КОГДА  Просрочка>=14 И Просрочка<21 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_В,
		|ВЫБОР КОГДА  Просрочка>=21 И Просрочка<45 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Г,
		//от 1,5 до 3х мес.
		|ВЫБОР КОГДА  Просрочка>=45 И Просрочка<90 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Д,
		//+++ 15.10.2015 от 3 мес. до 12 мес.
		|ВЫБОР КОГДА  Просрочка>=90  ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Е,
		|ВЫБОР КОГДА  Просрочка>=365 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Ж
		
		//+++ 16.01.2014 - доп.поле по условию И
		|"+?(флПросрочСрок и флПросрочСумма, 
		", ВЫБОР КОГДА Просрочка>&ПросрочСрок ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_ПоСроку","")+"
		|ИЗ А КАК А

	//+++( 15.07.2014  				
		|	" + ?(флПросрочСумма, ?(флПросрочСрок, //"ГДЕ Просрочка>&ПросрочСрок 
		 //" (ВЫБОР КОГДА Просрочка>=&ПросрочСрок ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ) > &ПросрочСумма"	
					"ГДЕ (СуммаПросрочки>&ПросрочСумма) "+УсловиеИили+" (Просрочка>&ПросрочСрок)",
									//"ГДЕ СуммаПросрочки>&ПросрочСумма"   
									 "ГДЕ СуммаПросрочки>&ПросрочСумма"
									) ,?(флПросрочСрок, "ГДЕ Просрочка>&ПросрочСрок" //"ГДЕ Просрочка>&ПросрочСрок"
									,""))+"
	//	|"+ ?(флПросрочСрок	и не флПросрочСумма, "ГДЕ Просрочка>&ПросрочСрок","")+"		
	//+++)
	
//+++ 15.10.2015 - ТОЛЬКО *  все остальное - по типу договора делается - только с покупателем!	
		|	" + ?(ФлБезНал, ?(флПросрочСумма или флПросрочСрок, " И "," ГДЕ ")
		    +"( не ДоговорКонтрагента.Наименование подобно (""%*%"") )","") +"
	
	    |
		|УПОРЯДОЧИТЬ ПО 
		|   Менеджер,
		|	Контрагент.Наименование,
		|	ДоговорКонтрагента.Наименование,
		|	Сделка.Дата ВОЗР
		|АВТОУПОРЯДОЧИВАНИЕ
	    |
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетов),
		|	СУММА(СуммаПросрочки),
		|	СУММА(СуммаУпр),
		|	СУММА(ВыставилиПеней),
		|СУММА(Просрочка_А),
		|СУММА(Просрочка_Б),
		|СУММА(Просрочка_В),
		|СУММА(Просрочка_Г),
		|СУММА(Просрочка_Д),
	//+++ 15.10.2015 от 1,5 мес. до 6 мес.
		|СУММА(Просрочка_Е),
		|СУММА(Просрочка_Ж),
		|Максимум(Просрочка)
		|"+?(флПросрочСумма и флПросрочСрок, ", Сумма(Просрочка_ПоСроку)","")+"
		|
		|ПО
		|	ОБЩИЕ,
		|	" + ?(мГруппироватьПоПодразделениям, "Подразделение, Менеджер, Контрагент, ДоговорКонтрагента"
 						, "Контрагент, ДоговорКонтрагента") + "
		|";
		
		Если УчитыватьВзаимныеОбязательства Тогда
			СтрокаЗамены ="(ВЫБРАТЬ ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,ЗачетВзаимныхОбязательств.ДоговорКонтрагента) ДоговорКонтрагента,
			| ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка,ЗачетВзаимныхОбязательств.Сделка) Сделка,
			| ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)-ЕстьNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов,0) СуммаВзаиморасчетовОстаток,
			//*** по ввалютным контрагентам не понятно, как будет работать упр взаимозачет и будут ли такие случаи, поэтому делаю расчет СуммаУпрОстаток таким же как у СуммаВзаиморасчетовОстаток....
			| ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,0)-ЕстьNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов,0) СуммаУпрОстаток
			|ИЗ
			| РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон ) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ПОЛНОЕ СОЕДИНЕНИЕ 
			|			(ВЫБРАТЬ
			|			ДоговорКонтрагента,Сделка,
			|		СУММА(Сумма) СуммаУпрЗачетов
			|	ИЗ  Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга 
			|	ГДЕ Ссылка.Проведен И ВидЗадолженности = &Дебиторская И Ссылка.Дата<=&ДатаКон ИСсылкаКонтрагент
			|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента,Сделка) ЗачетВзаимныхОбязательств
			|	ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента=ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			|	И ВзаиморасчетыСКонтрагентамиОстатки.Сделка=ЗачетВзаимныхОбязательств.Сделка
			|ГДЕ ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)-ЕстьNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов,0) <>0) КАК ВзаиморасчетыСКонтрагентамиОстатки";
		Иначе
			СтрокаЗамены="	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон,СтрокаДоговорКонтрагентаВладелец И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта) КАК ВзаиморасчетыСКонтрагентамиОстатки";
		КонецЕсли;
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ИСТОЧНИК", СтрокаЗамены);
		
		Если мКонтрагенты.Количество() > 0 Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаДоговорКонтрагентаВладелец", "ДоговорКонтрагента.Владелец в (&Контрагенты)");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаКонтрагент", "Контрагент в (&Контрагенты)");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИСсылкаКонтрагент", "И Ссылка.КонтрагентДебитор в (&Контрагенты)");
		ИНАЧЕ
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаДоговорКонтрагентаВладелец И", "");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаКонтрагент", "");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИСсылкаКонтрагент", "");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьЗаголовок);
		
		СтрокаОтбора = СокрЛП(ПолучитьСтроркуОтборов());
		
		Если СтрДлина(СтрокаОтбора) > 0 Тогда
			
			ОбластьОтборов.Параметры.СтрокаОтборов = СтрокаОтбора;
			ТабДок.Вывести(ОбластьОтборов);
			
		КонецЕсли; 
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
СуммаБПИтог = 0;		
	Если мГруппироватьПоПодразделениям Тогда  //(по подразделениям группировать всегда)
		ВыборкаПодразделение = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока ВыборкаПодразделение.Следующий() Цикл
			
			ОбластьПодразделение.Параметры.Заполнить(ВыборкаПодразделение);
			
			ТабДок.Вывести(ОбластьПодразделение, ВыборкаПодразделение.Уровень(),, НЕ СвернутьГруппы);
			
			ВыборкаМенеджер = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаМенеджер.Следующий() Цикл
				ОбластьМенеджер.Параметры.Заполнить(ВыборкаМенеджер);
				
				КонтрагентыНеУдовлетворяютУсловию = 0;
		//		ТабДок.Вывести(ОбластьМенеджер, ВыборкаМенеджер.Уровень(),, НЕ СвернутьГруппы);
				
				ВыборкаКонтрагент = ВыборкаМенеджер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Если ВыборкаКонтрагент.Количество() > КонтрагентыНеУдовлетворяютУсловию Тогда
					ТабДок.Вывести(ОбластьМенеджер, ВыборкаМенеджер.Уровень(),, НЕ СвернутьГруппы);
				КонецЕсли;
				
				Пока ВыборкаКонтрагент.Следующий() Цикл
					
					ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
					
						ОбластьКонтрагент.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017
 		
					ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
					
					ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(ВыборкаДоговорКонтрагента);
						ТабДок.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень(),, НЕ СвернутьГруппы);
						
					Если флДок тогда
						ВыборкаДетали = ВыборкаДоговорКонтрагента.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
							ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = ВыборкаДетали.Сделка;
							ОбластьДетальныхЗаписей.Параметры.Менеджер = "#" + Строка(ОбластьДетальныхЗаписей.Параметры.Менеджер);
							
							ЦветФона=WebЦвета.Белый;	
							
							
							Если не ЗначениеНеЗаполнено(ВыборкаДетали.Просрочка) Тогда
								
								Если ВыборкаДетали.Просрочка<=7 Тогда // от 1 до 7-ми дней
									ЦветФона=WebЦвета.СветлоРозовый;	
								ИначеЕсли	ВыборкаДетали.Просрочка<=21 Тогда  // от 8-ми до 21 дня
									ЦветФона=WebЦвета.Лосось;
								Иначе
									ЦветФона=WebЦвета.Красный;
									//Иначе // долг не просрочен
									//	ЦветФона=WebЦвета.Белый;
								КонецЕсли;
							Иначе // долг на пустой аналитике
								ЦветФона=WebЦвета.Белый;
							КонецЕсли;	
							
							Попытка
								
								ОбластьДетальныхЗаписей.Параметры.ДатаОплаты = Формат(ВыборкаДетали.ДатаОплаты, "ДЛФ=Д");
								ОбластьДетальныхЗаписей.Параметры.ДатаОтгрузки = "";
								ОбластьДетальныхЗаписей.Параметры.ДатаОтгрузки = Формат(ВыборкаДетали.Сделка.ДатаОтгрузки, "ДЛФ=Д");
								
							Исключение
								;
							КонецПопытки;
							
							Если ВыборкаДетали.Сделка = Неопределено Тогда
								
								
								Структура = Новый Структура;
								Структура.Вставить("Контрагент", ВыборкаДетали.Контрагент);
								Структура.Вставить("ДоговорКонтрагента", ВыборкаДетали.ДоговорКонтрагента);
								ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = Структура;
								
							КонецЕсли; 
							
							
							ОбластьДетальныхЗаписей.Область("R1C2:R1C9").ЦветФона=ЦветФона;
							Если  ВыборкаДетали.ВыставилиПеней>0 Тогда
								ОбластьДетальныхЗаписей.Область("R1C9:R1C9").ЦветФона=WebЦвета.БледноЗеленый;
							КОнецЕсли;
							ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень(),, НЕ СвернутьГруппы);
						КонецЦикла; //Детали
					КонецЕсли;
					
					КонецЦикла; //договоры
				КонецЦикла;//Контрагент
			КонецЦикла;//Менеджер
		КонецЦикла; //Подразделение
	КонецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	Если НЕ мГруппироватьПоПодразделениям тогда //16.10.2015 - ТОЛЬКО контр и видДоговора
		
		таблБП = ПолучитьТаблБП();//получаем таблицу:  Код, Наименование, СуммаОстатокДт
		Если Дебеторская=2 тогда //+++ 24.07.2017 - НАОБОРОТ БП >> УТ!	
		ВыборкаКонтрагент = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	     сообщить("--> Выборка УТ содержит "+строка(ВыборкаКонтрагент.Количество())+" строк");//11.01.2018
		 NN=0; 
		 СумУпр = 0; СуммаБПИтог = 0; 
		 СуммаПросрочки=0;ВыставилиПеней=0; Просрочка_Д=0; Просрочка_Е=0;

		для каждого элБП из таблБП цикл
				ОбработкаПрерыванияПользователя();
				NN=NN+1; Состояние("Обрабатывается "+строка(NN)+" строка БП...");
				
				ОбластьКонтрагент.Параметры.КонтрагентИКод = элБП.Код+" : "+ СокрЛП(элБП.Наименование1); //+++ 18.07.2017
				ОбластьКонтрагент.Параметры.СуммаБП = элБП.СуммаОстатокДт;
				СуммаБПИтог = СуммаБПИтог  + элБП.СуммаОстатокДт;
				
				ВыборкаКонтрагент.Сбросить();
				флНашли=ЛОЖЬ;     
				Пока ВыборкаКонтрагент.Следующий() Цикл
					Если СокрЛП(выборкаКонтрагент.Контрагент.Код) = СокрЛП(элБП.Код) тогда
					флНашли=Истина;
					
					//расцветка	
					Если Окр(элБП.СуммаОстатокДт,2) = Окр(выборкаКонтрагент.СуммаУпр,2) тогда
						
						//+++ 11.01.2018
						Если ТолькоРазличия тогда
						  продолжить; 
						КонецЕсли;

						ОбластьКонтрагентБел.Параметры.Заполнить(ВыборкаКонтрагент);
						ОбластьКонтрагентБел.Параметры.СуммаБП =  ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
						
						ОбластьКонтрагентБел.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017

						ТабДок.Вывести(ОбластьКонтрагентБел, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
					иначеЕсли Окр(элБП.СуммаОстатокДт,2)> Окр(выборкаКонтрагент.СуммаУпр,2) тогда
						ОбластьКонтрагентКрасн.Параметры.Заполнить(ВыборкаКонтрагент);
						
						ОбластьКонтрагентКрасн.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017
					
						ОбластьКонтрагентКрасн.Параметры.СуммаБП = ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
						ТабДок.Вывести(ОбластьКонтрагентКрасн, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
					иначе   //зелёный
						ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
						ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
					КонецЕсли;
					
					//+++ 11.01.2018
                    СумУпр = СумУпр+ выборкаКонтрагент.СуммаУпр; 
					СуммаБПИтог  = СуммаБПИтог + ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
					
					СуммаПросрочки = СуммаПросрочки+ выборкаКонтрагент.СуммаПросрочки;
					ВыставилиПеней = ВыставилиПеней+ выборкаКонтрагент.ВыставилиПеней;
					Просрочка_Д = Просрочка_Д+ выборкаКонтрагент.Просрочка_Д;
					Просрочка_Е = Просрочка_Е+ выборкаКонтрагент.Просрочка_Е;
					
					//-----------------Договор--------------------------------------------------		
						ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Если ВыборкаДоговорКонтрагента.Количество()=0 тогда //+++ 11.01.2018
							ОбластьДоговорКонтрагента.Параметры.ДоговорКонтрагента	= "---";
							ОбластьДоговорКонтрагента.Параметры.СуммаУпр =  ВыборкаКонтрагент.СуммаУпр;
							ТабДок.Вывести(ОбластьДоговорКонтрагента,2,, НЕ СвернутьГруппы);
						КонецЕсли;
						
						Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
							ОбластьДоговорКонтрагента.Параметры.Заполнить(ВыборкаДоговорКонтрагента);
							ТабДок.Вывести(ОбластьДоговорКонтрагента, 2,, НЕ СвернутьГруппы);
						КонецЦикла;
						
					 прервать;//дальше искать не надо
					КонецЕсли;
				КонецЦикла;
				
				Если не флНашли тогда // Контр только в БП !!!
					
					СуммаБП = ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
					СуммаБПИтог  = СуммаБПИтог + СуммаБП;
					
					ОбластьКонтрагент.Параметры.СуммаУпр = 0;
					ОбластьКонтрагент.Параметры.СуммаБП = СуммаБП;
					ОбластьКонтрагент.Параметры.Просрочка= 0;
					ОбластьКонтрагент.Параметры.СуммаПросрочки= 0;
					ОбластьКонтрагент.Параметры.ВыставилиПеней= 0;
					ОбластьКонтрагент.Параметры.Просрочка_Д= 0;
					ОбластьКонтрагент.Параметры.Просрочка_Е= 0;
					ТабДок.Вывести(ОбластьКонтрагент,1,, НЕ СвернутьГруппы);
					
					ОбластьДоговорКонтрагента.Параметры.ДоговорКонтрагента	= "---";
					ОбластьДоговорКонтрагента.Параметры.СуммаУпр = 0;
					ОбластьДоговорКонтрагента.Параметры.Просрочка= 0;
					ОбластьДоговорКонтрагента.Параметры.СуммаПросрочки= 0;
					ОбластьДоговорКонтрагента.Параметры.ВыставилиПеней= 0;
					ОбластьДоговорКонтрагента.Параметры.Просрочка_Д= 0;
					ОбластьДоговорКонтрагента.Параметры.Просрочка_Е= 0;
					ТабДок.Вывести(ОбластьДоговорКонтрагента,2,, НЕ СвернутьГруппы);

				КонецЕсли;	
				
			КонецЦикла;	 //таблБП
			
		//+++ 11.01.2018
		ОбластьОбщийИтог.Параметры.СуммаУпр     = СумУпр;
		ОбластьОбщийИтог.Параметры.СуммаБПИтог  = СуммаБПИтог;
		
		ОбластьОбщийИтог.Параметры.СуммаПросрочки  = СуммаПросрочки;
		ОбластьОбщийИтог.Параметры.ВыставилиПеней  = ВыставилиПеней;
		ОбластьОбщийИтог.Параметры.Просрочка_Д     = Просрочка_Д;
		ОбластьОбщийИтог.Параметры.Просрочка_Е     = Просрочка_Е;
				
		Иначе //====================================== КАК БЫЛО... дебиторка берёт УТ и по ней находит БП	================================================		
		ВыборкаКонтрагент = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ВыборкаКонтрагент.Следующий() Цикл
				ОбработкаПрерыванияПользователя();
				ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
				ОбластьКонтрагент.Параметры.СуммаБП = 0;
				
				ОбластьКонтрагент.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017

//-------------------------------------------------------------------------------------------------------	
				элБП = таблБП.Найти( СокрЛП(ВыборкаКонтрагент.Контрагент.Код), "Код");
				если элБП <> неопределено тогда
					если СокрЛП(элБП.Наименование1) <> СокрЛП(ВыборкаКонтрагент.Контрагент.Наименование) тогда
						сообщить("Контрагент с кодом "+ СокрЛП(ВыборкаКонтрагент.Контрагент.Код) +" - различаются в УТ: "+ СокрЛП(ВыборкаКонтрагент.Контрагент.Наименование)
						+", а в БП: "+ СокрЛП(элБП.Наименование1), СтатусСообщения.Внимание );
					иначе	
					ОбластьКонтрагент.Параметры.СуммаБП = элБП.СуммаОстатокДт;
					СуммаБПИтог = СуммаБПИтог  + элБП.СуммаОстатокДт;
					КонецЕсли;
				КонецЕсли;	
								
				Если НЕ (ВыборкаКонтрагент.Просрочка_Д<>0 или ВыборкаКонтрагент.Просрочка_Е<>0) тогда
					продолжить;
				КонецЕсли;				
				
				Если ОбластьКонтрагент.Параметры.СуммаБП = ОбластьКонтрагент.Параметры.СуммаУпр тогда
					Если ТолькоРазличия тогда  //+++ 11.01.2018
						продолжить;
					КонецЕсли;	
					ОбластьКонтрагентБел.Параметры.Заполнить(ВыборкаКонтрагент);
					ОбластьКонтрагентБел.Параметры.СуммаБП =  ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
					
					ОбластьКонтрагентБел.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017

					ТабДок.Вывести(ОбластьКонтрагентБел, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
				иначеесли ОбластьКонтрагент.Параметры.СуммаБП > ОбластьКонтрагент.Параметры.СуммаУпр тогда
					ОбластьКонтрагентКрасн.Параметры.Заполнить(ВыборкаКонтрагент);
					
					ОбластьКонтрагентКрасн.Параметры.КонтрагентИКод = ВыборкаКонтрагент.Контрагент.Код+" : "+ строка(ВыборкаКонтрагент.Контрагент); //+++ 18.07.2017
				
					ОбластьКонтрагентКрасн.Параметры.СуммаБП = ?(элБП <> неопределено, элБП.СуммаОстатокДт, 0);
					ТабДок.Вывести(ОбластьКонтрагентКрасн, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
	            иначе
					ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
				КонецЕсли;
//-------------------------------------------------------------------------------------------------------				
				//ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
				ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(ВыборкаДоговорКонтрагента);
						ТабДок.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень(),, НЕ СвернутьГруппы);
						
						ВыборкаДетали = ВыборкаДоговорКонтрагента.Выбрать();
						
					Если флДок тогда
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
							ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = ВыборкаДетали.Сделка;
							ОбластьДетальныхЗаписей.Параметры.Менеджер = "#" + Строка(ОбластьДетальныхЗаписей.Параметры.Менеджер);
							
							ЦветФона=WebЦвета.Белый;	
							
							
							Если не ЗначениеНеЗаполнено(ВыборкаДетали.Просрочка) Тогда
								
								Если ВыборкаДетали.Просрочка<=7 Тогда // от 1 до 7-ми дней
									ЦветФона=WebЦвета.СветлоРозовый;	
								ИначеЕсли	ВыборкаДетали.Просрочка<=21 Тогда  // от 8-ми до 21 дня
									ЦветФона=WebЦвета.Лосось;
								Иначе
									ЦветФона=WebЦвета.Красный;
									//Иначе // долг не просрочен
									//	ЦветФона=WebЦвета.Белый;
								КонецЕсли;
							Иначе // долг на пустой аналитике
								ЦветФона=WebЦвета.Белый;
							КонецЕсли;	
							
							Попытка
								
								ОбластьДетальныхЗаписей.Параметры.ДатаОплаты = Формат(ВыборкаДетали.ДатаОплаты, "ДЛФ=Д");
								ОбластьДетальныхЗаписей.Параметры.ДатаОтгрузки = "";
								ОбластьДетальныхЗаписей.Параметры.ДатаОтгрузки = Формат(ВыборкаДетали.Сделка.ДатаОтгрузки, "ДЛФ=Д");
								
							Исключение
								;
							КонецПопытки;
							
							Если ВыборкаДетали.Сделка = Неопределено Тогда
								
								
								Структура = Новый Структура;
								Структура.Вставить("Контрагент", ВыборкаДетали.Контрагент);
								Структура.Вставить("ДоговорКонтрагента", ВыборкаДетали.ДоговорКонтрагента);
								ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = Структура;
								
							КонецЕсли; 
							
							
							ОбластьДетальныхЗаписей.Область("R1C2:R1C9").ЦветФона=ЦветФона;
							Если  ВыборкаДетали.ВыставилиПеней>0 Тогда
								ОбластьДетальныхЗаписей.Область("R1C9:R1C9").ЦветФона=WebЦвета.БледноЗеленый;
							КОнецЕсли;
							ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень(),, НЕ СвернутьГруппы);
						КонецЦикла;
					КонецЕсли;
					
					КонецЦикла; // договоры
				КонецЦикла; // Контрагент
		КОНЕЦЕСЛИ;	//Дебет/Кредит	
			
    КонецЕсли;// НЕ мГруппироватьПоПодразделениям
		
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.ФиксацияСлева=3;
		
		//+++ 11.01.2018
		ОбластьОбщийИтог.Параметры.СуммаБПИтог = СуммаБПИтог;
		
		ТабДок.Вывести(ОбластьОбщийИтог);
		
	Иначе // по кредиторской зад-сти  ===========================================================================================
		
		ТЗДолги= Новый ТаблицаЗначений;	
		ТЗДолги.Колонки.Добавить("Контрагент");
		ТЗДолги.Колонки.Добавить("ДоговорКонтрагента");
		ТЗДолги.Колонки.Добавить("Сделка");
		ТЗДолги.Колонки.Добавить("ДатаОплаты");
		ТЗДолги.Колонки.Добавить("ОстатокДолга");
		
		
		
		Если УчитыватьВзаимныеОбязательства Тогда
			Запрос.Текст ="ВЫБРАТЬ
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение КАК Подразделение,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
			//10.09.14 Смирнов
			|	ВЫБОР КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
			|			ТОГДА ВЫБОР КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			|						ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
			|	    		  КОНЕЦ
		    |         ИНАЧЕ
			|	         ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты 
			|		  КОНЕЦ КАК ДатаОплаты,
			//Смирнов
			|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) + ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) КАК СуммаВзаиморасчетов,
			|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) КАК СуммаУпр
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение КАК Подразделение,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
			|		ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты КАК ДатаОплаты,
			|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
			|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|				СУММА(ВзаиморасчетовОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
			|			ИЗ
			|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ) КАК ВзаиморасчетовОстатки
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
			|			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
			|				И (ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток < 0)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
			|			СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК СуммаУпрЗачетов
			|		ИЗ
			|			Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
			|		ГДЕ
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
			|			И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = &Кредиторская
			|			И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &ДатаКон
			|		
			|		СГРУППИРОВАТЬ ПО
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
			|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			|			И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка
			|ГДЕ
			|ИСТИНА
			|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
			|								)", "") + "
			|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + " 
			|	И ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) + ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) <> 0";
		Иначе
			Запрос.Текст="ВЫБРАТЬ 
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение Подразделение,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо Менеджер,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец Контрагент,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			|ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
			//10.09.14 Смирнов
			|	ВЫБОР КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
			|			ТОГДА ВЫБОР КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
			|						ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ОжидаемыйСрокПоставки
			|	    		  КОНЕЦ
		    |         ИНАЧЕ
			|	         ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты 
			|		  КОНЕЦ КАК ДатаОплаты,
			//Смирнов

			|ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток  СуммаВзаиморасчетов,
			|ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток  СуммаУпр
			|ИЗ
			| РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|				СУММА(ВзаиморасчетовОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток,
			|				СУММА(ВзаиморасчетовОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
			|			ИЗ
			|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон) КАК ВзаиморасчетовОстатки
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
			|			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
			|				И ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаВзаиморасчетовОстаток <0   
			|ГДЕ
			|ИСТИНА
			|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
			|								)", "") + "
			|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + " 
			|";
		КонецЕсли;
		
		ТЗКредиторскаяЗадолженность=Запрос.Выполнить().Выгрузить();
		
		ЗапросПоЗаказамСГрафикамиОплат=Новый Запрос;
		ЗапросПоЗаказамСГрафикамиОплат.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон	, 	ДоговорКонтрагента.ВидДоговора = &СПоставщиком
		|			И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ГрафикОплаты КАК ПоступлениеТоваровУслугГрафикОплаты
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ПоступлениеТоваровУслугГрафикОплаты.Ссылка.Сделка
		|		ГДЕ не ПоступлениеТоваровУслугГрафикОплаты.Ссылка Есть NULL
		|		УПОРЯДОЧИТЬ ПО Сделка.Дата";
		
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("ДатаКон",НачалоДня(КонецДня(ДатаКон)+1));
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("СПоставщиком",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		СписокЗаказовСГрафикамиОплат= Новый СписокЗначений;
		СписокЗаказовСГрафикамиОплат.ЗагрузитьЗначения(ЗапросПоЗаказамСГрафикамиОплат.Выполнить().Выгрузить().ВыгрузитьКолонку("Сделка"));
				
		Для каждого строкаТЗДолги ИЗ ТЗДолги Цикл
			строкаКредиторскаяЗадолженность=ТЗКредиторскаяЗадолженность.Добавить();
			строкаКредиторскаяЗадолженность.Подразделение=строкаТЗДолги.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение;
			строкаКредиторскаяЗадолженность.Менеджер=строкаТЗДолги.ДоговорКонтрагента.ОтветственноеЛицо;
			строкаКредиторскаяЗадолженность.Контрагент=строкаТЗДолги.Контрагент;
			строкаКредиторскаяЗадолженность.ДоговорКонтрагента=строкаТЗДолги.ДоговорКонтрагента;
			строкаКредиторскаяЗадолженность.Сделка=строкаТЗДолги.Сделка;
			строкаКредиторскаяЗадолженность.ДатаОплаты=строкаТЗДолги.ДатаОплаты;
			строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов=-строкаТЗДолги.ОстатокДолга;
		КонецЦикла;
		
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("СуммаПросрочки");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_А");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Б");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_В");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Г");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Д");
		
		ТЗКредиторскаяЗадолженность.ЗаполнитьЗначения(0,"Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		
		
		
		// Раскидаем  долги по срокам просрочки
		Для каждого строкаКредиторскаяЗадолженность ИЗ ТЗКредиторскаяЗадолженность Цикл
			Если не ЗначениеНеЗаполнено(строкаКредиторскаяЗадолженность.ДатаОплаты)  Тогда
				строкаКредиторскаяЗадолженность.Просрочка=(НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты)/СекундВСутках;
				Если НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты >= 45*СекундВСутках Тогда // Дата оплаты раньше чем текущая дата
					строкаКредиторскаяЗадолженность.Просрочка_Д=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
				ИначеЕсли НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты >= 21*СекундВСутках Тогда
					строкаКредиторскаяЗадолженность.Просрочка_Г=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
				ИначеЕсли НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты >= 14 *СекундВСутках Тогда
					строкаКредиторскаяЗадолженность.Просрочка_В=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
				ИначеЕсли НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты >= 7*СекундВСутках Тогда	
					строкаКредиторскаяЗадолженность.Просрочка_Б=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
				ИначеЕсли НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты >0 Тогда
					строкаКредиторскаяЗадолженность.Просрочка_А=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаВзаиморасчетов;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		ТаблицаОбщийИтог= ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаОбщийИтог.Свернуть(,"СуммаВзаиморасчетов,СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаПодразделений=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаПодразделений.Свернуть("Подразделение","СуммаВзаиморасчетов,СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаМенеджеры=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаМенеджеры.Свернуть("Подразделение,Менеджер","СуммаВзаиморасчетов,СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаКонтрагенты=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаКонтрагенты.Свернуть("Менеджер,Контрагент","СуммаВзаиморасчетов,СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаДоговоры=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаДоговоры.Свернуть("Менеджер,Контрагент,ДоговорКонтрагента","СуммаВзаиморасчетов,СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаЗаказы=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаЗаказы.Свернуть("ДоговорКонтрагента,Сделка,ДатаОплаты","СуммаВзаиморасчетов,СуммаУпр,Просрочка,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		
		ОбластьОбщийИтог.Параметры.Заполнить(ТаблицаОбщийИтог[0]);
		
		//Пока ВыборкаПодразделение.Следующий() Цикл
		Для каждого строкаПодразделение Из ТаблицаПодразделений Цикл
			
			ОбластьПодразделение.Параметры.Заполнить(строкаПодразделение);
			ТабДок.Вывести(ОбластьПодразделение,1 ,,НЕ СвернутьГруппы );
			
			ВыбранныеМенеджеры=ТаблицаМенеджеры.НайтиСтроки(Новый Структура("Подразделение",строкаПодразделение.Подразделение));
			Для каждого строкаМенеджер Из ВыбранныеМенеджеры Цикл
				
				ОбластьМенеджер.Параметры.Заполнить(строкаМенеджер);
				ТабДок.Вывести(ОбластьМенеджер, 2,, НЕ СвернутьГруппы);
				
				ВыбранныеКонтрагенты=ТаблицаКонтрагенты.НайтиСтроки(Новый Структура("Менеджер",строкаМенеджер.Менеджер));
				
				Для каждого  строкаКонтрагент ИЗ  ВыбранныеКонтрагенты Цикл
					ОбластьКонтрагент.Параметры.Заполнить(строкаКонтрагент);
					ОбластьКонтрагент.Параметры.КонтрагентИКод = строкаКонтрагент.Контрагент.Код+" : "+ строка(строкаКонтрагент.Контрагент); //+++ 18.07.2017
					ТабДок.Вывести(ОбластьКонтрагент,3,,НЕ СвернутьГруппы );
					
					ВыбранныеДоговоры=ТаблицаДоговоры.НайтиСтроки(Новый Структура("Менеджер,Контрагент",строкаМенеджер.Менеджер,строкаКонтрагент.Контрагент));	
					
					Для каждого  строкаДоговор ИЗ  ВыбранныеДоговоры Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(строкаДоговор);
						ТабДок.Вывести(ОбластьДоговорКонтрагента,4,,НЕ СвернутьГруппы );
						
						ВыбранныеЗаказы=ТаблицаЗаказы.НайтиСтроки(Новый Структура("ДоговорКонтрагента",строкаДоговор.ДоговорКонтрагента));
						
						Для каждого  строкаЗаказ ИЗ  ВыбранныеЗаказы Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(строкаЗаказ);
							ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = строкаЗаказ.Сделка;
							ОбластьДетальныхЗаписей.Параметры.ДатаОплаты = Формат(строкаЗаказ.ДатаОплаты, "ДЛФ=Д");
							
							ДнейПросрочено=0;
							Если не ЗначениеНеЗаполнено(строкаЗаказ.Просрочка) И строкаЗаказ.Просрочка>0 Тогда
								Если строкаЗаказ.Просрочка<=7 Тогда // от 1 до 7-ми дней
									ЦветФона=WebЦвета.СветлоРозовый;	
								ИначеЕсли	строкаЗаказ.Просрочка<=21 Тогда  // от 8-ми до 21 дня
									ЦветФона=WebЦвета.Лосось;
								Иначе
									ЦветФона=WebЦвета.Красный;
								КонецЕсли;
							Иначе		
								ЦветФона=WebЦвета.Белый;
							КонецЕсли;
							ОбластьДетальныхЗаписей.Область("R1C2:R1C9").ЦветФона=ЦветФона;	
							
							ТабДок.Вывести(ОбластьДетальныхЗаписей,5,,НЕ СвернутьГруппы );	
							
							
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.ФиксацияСлева=3;
		
		ТабДок.Вывести(ОбластьОбщийИтог);
		
		
	КонецЕсли;
	
	
КонецПроцедуры


		
//================================ПОДКЛЮЧЕНИЕ К БП=================================
функция ПолучитьТаблБП()
	
таблБП  = новый ТаблицаЗначений;
таблБП.Колонки.Добавить("Код");
таблБП.Колонки.Добавить("Наименование1");
таблБП.Колонки.Добавить("СуммаОстатокДт");

	базаБП = ВыполнитьПодключениеКИБПриемнику();
	Если базаБП = Неопределено Тогда
		Предупреждение("НЕТ подключения к информационной базе БП.", 10);
		Возврат таблБП;
	КонецЕсли;

ЗапросБП = базаБП.NewObject("Запрос");	
		//Субконто1 - Контрагент
		//Субконто2 - ДоговорКонтрагента
 Если Дебеторская=1 тогда
 ЗапросБП.текст = "ВЫБРАТЬ
                  |	ХозрасчетныйОстатки.Субконто1.Код КАК Код,
                  |	ХозрасчетныйОстатки.Субконто1.Наименование КАК Наименование1,
                  |	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт
                  |ИЗ
                  |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата,
                  |			Счет.Код = ""62.01""
                  |				ИЛИ Счет.Код = ""76.02"", 	,
                  |			Субконто2.ВидДоговора = ЗНАЧЕНИЕ(перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%*%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%факторинг%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%аренд%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%услуг%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%персонал%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%поставки%""
                  |				И НЕ Субконто2.Наименование ПОДОБНО ""%хранен%"") КАК ХозрасчетныйОстатки
                  |
                  |СГРУППИРОВАТЬ ПО
                  |	ХозрасчетныйОстатки.Субконто1.Код,
                  |	ХозрасчетныйОстатки.Субконто1.Наименование
                  |
                  |УПОРЯДОЧИТЬ ПО
                  |	Наименование1";
Иначе
ЗапросБП.текст = "ВЫБРАТЬ
                 |	ХозрасчетныйОстатки.Субконто1.Код КАК Код,
                 |	ХозрасчетныйОстатки.Субконто1.Наименование КАК Наименование1,
                 |	-СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокДт
                 |ИЗ
                 |	РегистрБухгалтерии.Хозрасчетный.Остатки(&Дата,
                 |			Счет.Код = ""62.02"", ,
                 |			Субконто2.ВидДоговора = ЗНАЧЕНИЕ(перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
				 //08.08.2017
			     |		или	Субконто2.ВидДоговора = ЗНАЧЕНИЕ(перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		      	 |		или Субконто2.ВидДоговора = ЗНАЧЕНИЕ(перечисление.ВидыДоговоровКонтрагентов.Прочее)
				 |) КАК ХозрасчетныйОстатки
                 |
                 |СГРУППИРОВАТЬ ПО
                 |	ХозрасчетныйОстатки.Субконто1.Код,
                 |	ХозрасчетныйОстатки.Субконто1.Наименование
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	Наименование1";
КонецЕсли;				 

//параметры2 = базаБП.NewObject("массив");
//параметры2.Добавить(КонецДня(ДатаКон));
//параметры2.Добавить(ВидГраницы.Включая);
//границаБП =базаБП.NewObject(тип("Граница"), параметры2);

запросБП.УстановитьПараметр("Дата", КонецДня(ДатаКон)+1 );
рез = запросБП.Выполнить();
выборка = рез.Выбрать();
сообщить("Выборка БП содержит "+строка( выборка.Количество() )+" строк");

пока выборка.Следующий() цикл
	стр1 = таблБП.Добавить();
	стр1.Код = СокрЛП(выборка.Код);
	стр1.Наименование1 = СокрЛП(выборка.Наименование1);
	стр1.СуммаОстатокДт = выборка.СуммаОстатокДт;
//	сообщить(стр1.Код+" - "+стр1.Наименование1 + " : "+строка(стр1.СуммаОстатокДт) );
КонецЦикла;

возврат таблБП;

КонецФункции

//+++ функции подключения к базе БП
Функция ВыполнитьПодключениеКИБПриемнику(СтрокаСообщенияОбОшибке = "") Экспорт
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
	
	Возврат ОбъектПодключения;
	
КонецФункции
//логин-пароли
Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	
	СтруктураПодключения.Вставить("АутентификацияWindows", ложь);
	
	СтруктураПодключения.Вставить("ФайловыйРежим", ложь);
	СтруктураПодключения.Вставить("КаталогИБ", "");
	СтруктураПодключения.Вставить("ИмяСервера", "server:3041");
	СтруктураПодключения.Вставить("ИмяИБНаСервере", "v83ib_yst_bp");
	СтруктураПодключения.Вставить("Пользователь", "Робот (центр - номенклатура)");
	СтруктураПодключения.Вставить("Пароль", "09876");
	СтруктураПодключения.Вставить("ВерсияПлатформы", "V83");	
	
	Возврат СтруктураПодключения;
	
КонецФункции
//подключение 
Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	Если СтруктураПодключения.ФайловыйРежим тогда
	СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	иначе	
	СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
	КонецЕсли;

	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V82" или "V83"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе "+СтруктураПодключения.ИмяИБНаСервере);
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Сообщить(строка(ТекущаяДата())+" Соединение с базой "+СтруктураПодключения.ИмяИБНаСервере+" установлено успешно.", СтатусСообщения.Информация);
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе "+СтруктураПодключения.ИмяИБНаСервере+" произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции




Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастроек = ПолучитьФорму("ФормаНастроек");
	ФормаНастроек.ТекущиеНастройки = мТекущиеНастройки;
	
	Если ФормаНастроек.ОткрытьМодально() <> Неопределено Тогда
		
		мТекущиеНастройки = ФормаНастроек.ТекущиеНастройки;
		мТипМенеджера = мТекущиеНастройки.Менеджер;
		мВидДоговора = мТекущиеНастройки.ВидДоговора;
		мТипыДоговоров = мТекущиеНастройки.ТипыДоговоров;
		мПодразделения = мТекущиеНастройки.Подразделения;
		мКонтрагенты = мТекущиеНастройки.Контрагенты;
		мМенеджерОтбор = мТекущиеНастройки.МенеджерОтбор;
		мИсключитьКонтрагентов = мТекущиеНастройки.ИсключитьКонтрагентов;
		мГруппироватьПоПодразделениям = мТекущиеНастройки.ГруппироватьПоПодразделениям;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТипыДоговоров()
	
	мТекущиеНастройки.ТипыДоговоров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыДоговоров.Ссылка,
	|	ТипыДоговоров.Наименование
	|ИЗ
	|	Справочник.ТипыДоговоров КАК ТипыДоговоров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.Инвестиции)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.Кредит)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.ПроцентыПоИнвестициям)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.ПроцентыПоКредитам) Тогда
			
			мТекущиеНастройки.ТипыДоговоров.Добавить(Выборка.Ссылка);
			
		КонецЕсли; 
		
		
	КонецЦикла;
	
	мТекущиеНастройки.ТипыДоговоров.Добавить(Справочники.ТипыДоговоров.ПустаяСсылка());
	
КонецПроцедуры


Процедура ЗаполнитьНастройкиДЗБаланса()
	
	мТекущиеНастройки.Менеджер = 3;
	
	/// Временная мера - наверно :)
	//ЗаполнитьТипыДоговоров();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Дебеторская = 1;
	настройкаНастроек = ВосстановитьЗначение("ПросроченнаяДЗКЗ_поУмоланию");
	Если настройкаНастроек=неопределено тогда
		мТекущиеНастройки = Новый Структура;
		мТекущиеНастройки.Вставить("Менеджер", 1);
		мТекущиеНастройки.Вставить("ВидДоговора", Новый Массив);
		мТекущиеНастройки.Вставить("Подразделения", Новый Массив);
		мТекущиеНастройки.Вставить("ТипыДоговоров", Новый Массив);
		мТекущиеНастройки.Вставить("Контрагенты", Новый Массив);
		мТекущиеНастройки.Вставить("МенеджерОтбор", Справочники.Пользователи.ПустаяСсылка() );  // это список!
		мТекущиеНастройки.Вставить("ИсключитьКонтрагентов", Ложь);
		мТекущиеНастройки.Вставить("ГруппироватьПоПодразделениям", Истина);
	Иначе
		
		мТекущиеНастройки = настройкаНастроек;
		
		мТипМенеджера = мТекущиеНастройки.Менеджер;
		мВидДоговора = мТекущиеНастройки.ВидДоговора;
		мТипыДоговоров = мТекущиеНастройки.ТипыДоговоров;
		мПодразделения = мТекущиеНастройки.Подразделения;
		мКонтрагенты = мТекущиеНастройки.Контрагенты;
		мМенеджерОтбор = мТекущиеНастройки.МенеджерОтбор;
		мИсключитьКонтрагентов = мТекущиеНастройки.ИсключитьКонтрагентов;
		мГруппироватьПоПодразделениям = мТекущиеНастройки.ГруппироватьПоПодразделениям;
	КонецЕсли;
	
	ЗаполнитьНастройкиДЗБаланса();
	
	мТипМенеджера = мТекущиеНастройки.Менеджер;
	мВидДоговора = мТекущиеНастройки.ВидДоговора;
	мТипыДоговоров = мТекущиеНастройки.ТипыДоговоров;
	мПодразделения = мТекущиеНастройки.Подразделения;
	мКонтрагенты = мТекущиеНастройки.Контрагенты;
	мМенеджерОтбор = мТекущиеНастройки.МенеджерОтбор;
	мИсключитьКонтрагентов = мТекущиеНастройки.ИсключитьКонтрагентов;
	мГруппироватьПоПодразделениям = мТекущиеНастройки.ГруппироватьПоПодразделениям;
	
	СвернутьГруппы = Истина;
	
//	ДатаКон = КонецДня(ТекущаяДата());
	
	ЭлементыФормы.ПросрочСумма.Видимость = ФлПросрочСумма;
	ЭлементыФормы.ПросрочСрок.Видимость  = ФлПросрочСрок;
	
	УсловиеИили = ?(УсловиеИили="", "И", УсловиеИили);
	ЭлементыФормы.УсловиеИили.СписокВыбора.Добавить("И");
	ЭлементыФормы.УсловиеИили.СписокВыбора.Добавить("ИЛИ");
	элементыФормы.УсловиеИили.Видимость = ФлПросрочСумма и ФлПросрочСрок;
	
	//***07.2015
	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	
КонецПроцедуры

Процедура ВывестиВзаиморасчетыПоДокументу(Ссылка, ПустаяСделка = Ложь)
	
	
	Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		
		СтрОтб.Использование = Ложь;	
		
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.Контрагент;
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Сделка");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	
	СтрОтб.Значение = ?(ПустаяСделка, Неопределено, Ссылка);
	
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
		
	КонецЕсли;
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.ДоговорКонтрагента;
	СтрОтб.Использование = Истина;	
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.Имя);
	
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;
	
	
КонецПроцедуры


Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить("Открыть", "Открыть документ...",,БиблиотекаКартинок.ОткрытьДокумент);
		СЗ.Добавить("ОткрытьДвижения", "Открыть взаиморасчеты по документу...",,БиблиотекаКартинок.Отчет);
		СЗ.Добавить("ОткрытьСтруктуру", "Открыть структуру подчиненности документа...",,БиблиотекаКартинок.ТолькоСкрепка);
		
		Выбор = ВыбратьИзМеню(СЗ, Элемент);
		
		Если Выбор = Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		Иначе
			
			Если Выбор.Значение <> "Открыть" Тогда
				
				Если Выбор.Значение = "ОткрытьДвижения" Тогда
					
					СтандартнаяОбработка = Ложь;
					ВывестиВзаиморасчетыПоДокументу(Расшифровка);
					
				ИначеЕсли Выбор.Значение = "ОткрытьСтруктуру" Тогда
					
					СтандартнаяОбработка = Ложь;
					ПоказатьСтруктуруПодчиненностиДокумента(Расшифровка);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
//-----------------------------График по менеджеру за год----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Пользователи")	тогда
		
		   СтандартнаяОбработка = Ложь;
		   
		   Если Дебеторская <> 1 тогда
			   Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
			   возврат;
		   КонецЕсли;	   
		   
		   формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   
		   формаГрафик.ответственноеЛицо = Расшифровка;
		   формаГрафик.ФлМен = Истина;
		   
		   формаГрафик.Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
		   формаГрафик.ФлКонтр = Ложь;
		   
		   
		   // НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		   формаГрафик.НачДата = ЭтаФорма.ДатаНач;
		   формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		   формаГрафик.Открыть();
		   формаГрафик.отчетВывести();

//-----------------------------График по группе менеджеров ----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Подразделения") тогда
		
		   СтандартнаяОбработка = Ложь;
	       формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   
		   Если Дебеторская <> 1 тогда
			   Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
			   возврат;
		   КонецЕсли;	   

		   //-------------Ограничения по подразделениям--------------------------------------
		   //Если НЕ РольДоступна("ПолныеПрава") тогда   // защита от просмотра данных по чужим подразделениям!
		   //	Если глТекущийПользователь.ОсновноеПодразделение <> Расшифровка тогда
		   // 	Предупреждение("Вам доступен просмотр только Вашего подразделения!");
		   // 	Возврат;
		   //	КонецЕсли; 	
		   //КонецЕсли; 	
		   
		   //-------------------все сотрудники подразделения----------------------
		   СписокСотрудников = новый СписокЗначений;
		   Запрос = Новый Запрос;
		   Запрос.Текст = "ВЫБРАТЬ
		   |	Пользователи.Ссылка
		   |ИЗ
		   |	Справочник.Пользователи КАК Пользователи
		   |ГДЕ
		   |	Пользователи.ОсновноеПодразделение = &ОсновноеПодразделение";
		   Запрос.УстановитьПараметр("ОсновноеПодразделение", Расшифровка);
		   Результат = Запрос.Выполнить();
		   Выборка   = Результат.Выгрузить();
		   СписокСотрудников.ЗагрузитьЗначения(Выборка.ВыгрузитьКолонку("Ссылка")); 		   
		   формаГрафик.ответственноеЛицо = СписокСотрудников;
		   
		   формаГрафик.ФлМен = Истина;
		   
		   формаГрафик.Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
		   формаГрафик.ФлКонтр = Ложь;
		  // НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		   формаГрафик.НачДата = ЭтаФорма.ДатаНач;
	   	   формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		   формаГрафик.Открыть();
		   формаГрафик.отчетВывести();

		   
		
//-----------------------------График по Контрагенту за год----------------------------		
	ИначеЕсли  ТипЗнч(Расшифровка)=тип("СправочникСсылка.Контрагенты")	тогда
		
		   СтандартнаяОбработка = Ложь;
			
		   Если Дебеторская <> 1 тогда
			   Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
			   возврат;
		   КонецЕсли;	   
			
		   формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   формаГрафик.ФлМен = Ложь;
		   формаГрафик.ответственноеЛицо = справочники.Пользователи.ПустаяСсылка();
		   
		   формаГрафик.Контрагент1 = Расшифровка;
		   формаГрафик.ФлКонтр = Истина;
		   // НачДата1 = ?(ДеньНедели(ЭтаФорма.ДатаНач)=1, ЭтаФорма.ДатаНач, ЭтаФорма.ДатаНач - (ДеньНедели(ЭтаФорма.ДатаНач) - 1)*86400 );
		   формаГрафик.НачДата = ЭтаФорма.ДатаНач;
		   формаГрафик.КонДата = КонецДня(ЭтаФорма.ДатаКон)+1;
		   формаГрафик.Открыть();
		   формаГрафик.отчетВывести();

//-------------------------взаиморасчеты по документу----------------------------------
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВывестиВзаиморасчетыПоДокументу(Расшифровка, Истина);	
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДебеторскаяПриИзменении(Элемент)
	
	Если Дебеторская = 1 Тогда
		ЭтаФорма.Заголовок = "Просроченая дебеторская задолженность";
		УстановитьВидимостьФильтраОтбора(Истина);
	Иначе
		ЭтаФорма.Заголовок = "Просроченая кредиторская задолженность";
		УстановитьВидимостьФильтраОтбора(ЛОЖЬ);
	КонецЕсли; 
	
КонецПроцедуры

процедура УстановитьВидимостьФильтраОтбора(Вкл)
	
	Если не Вкл Тогда // выключаем фильтры
		ФлПросрочСумма = Вкл;
		ФлПросрочСрок  = Вкл;
	КонецЕсли;

	элементыФормы.ФильтрОтбора.Видимость   = вкл;
	
	элементыФормы.ФлПросрочСумма.Видимость = вкл;
	элементыФормы.ФлПросрочСрок.Видимость  = вкл;
	
	элементыФормы.ПросрочСумма.Видимость   = вкл и ФлПросрочСумма;
	элементыФормы.ПросрочСрок.Видимость    = вкл и ФлПросрочСрок;
	
КонецПроцедуры


Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

//-------------кнопка График -------------------
Процедура ДействияФормыГрафик(Кнопка)
	
	   Если Дебеторская <> 1 тогда
		   Предупреждение("Графики строятся ТОЛЬКО по Дебиторской задолженности!", 10);
		   возврат;
	   КонецЕсли;	   
	
		формаГрафик = ЭтотОбъект.ПолучитьФорму("ОтчетГрафик");
		   
		   формаГрафик.ответственноеЛицо = глТекущийПользователь;
		   формаГрафик.ФлМен = Истина;
		   
		   формаГрафик.Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
		   формаГрафик.ФлКонтр = Ложь;
		   
		   Если ДатаНач='00010101' тогда
			  ДатаНач = ДобавитьМесяц( НачалоМесяца(ТекущаяДата()), -1);
		   КонецЕсли;
		   Если ДатаКон='00010101' тогда
			  ДатаКон = КонецДня(ТекущаяДата());
		   КонецЕсли;
		  
		   НачДата1 = ?(ДеньНедели(ДатаНач)=2, ДатаНач, ДатаНач - (ДеньНедели(ДатаНач) - 2)*СекундВСутках );
		   формаГрафик.НачДата = НачДата1;
		   формаГрафик.КонДата = ДатаКон;
		   формаГрафик.Открыть();
		   формаГрафик.отчетВывести();
		   
КонецПроцедуры

Процедура ФлПросрочСуммаПриИзменении(Элемент)
	элементыФормы.ПросрочСумма.Видимость   = ФлПросрочСумма;
	элементыФормы.УсловиеИили.Видимость = ФлПросрочСумма и ФлПросрочСрок;
КонецПроцедуры

Процедура ФлПросрочСрокПриИзменении(Элемент)
	элементыФормы.ПросрочСрок.Видимость = ФлПросрочСрок;
	элементыФормы.УсловиеИили.Видимость = ФлПросрочСумма и ФлПросрочСрок;
КонецПроцедуры

Процедура ДействияФормыПроверитьПодключение(Кнопка)
	рез = ВыполнитьПодключениеКИБПриемнику();
КонецПроцедуры

 СекундВСутках = 86400;