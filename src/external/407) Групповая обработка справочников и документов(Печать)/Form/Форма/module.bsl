////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

//Описание Префиксов имен:
//Ш -Реквизит шапки
//Т -Реквизит Таблицы
//С -Свойство
//К -Категория
//Д -Допольнительный предопределенный 
//О -Допольнительный из отбора 
//Р -Действие Изменить реквизит: [...]
//П -Прочее 

Перем ОписаниеТипаБулево;
Перем мСформированныйРежим;
Перем ПостроительЗапроса;
Перем ВКонфигурацииЕстьСвойства;
Перем ВКонфигурацииЕстьКатегории;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет список возможных действий для отобранных объектов
Процедура ЗаполнитьСписокДействий() Экспорт
	СписокВыбора = ЭлементыФормы.СписокДействий.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если мСформированныйРежим = Неопределено ИЛИ Не мСформированныйРежим.ДанныеОтобраны Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого ПредопределенныйРеквизит Из мСформированныйРежим.ПредопределенныеРеквизиты Цикл
		СписокВыбора.Добавить(Новый Структура("Имя,ПолеНастройки",ПредопределенныйРеквизит.Значение.Имя,ПредопределенныйРеквизит.Значение.ПолеНастройки),"Изменить: ["+ПредопределенныйРеквизит.Представление+"]");
	КонецЦикла; 
	ВсегоСвойств   = мСформированныйРежим.СтруктураСвойств.Количество();
	Если ВсегоСвойств > 0 Тогда
		СписокВыбора.Добавить(Новый Структура("Имя,ПолеНастройки,ЭтоВыбор,ВыборПоВладельцу","С",,"Свойство",Неопределено),"Изменить свойство: [...]");
	КонецЕсли; 
	ВсегоКатегорий = мСформированныйРежим.СтруктураКатегорий.Количество();
	Если ВсегоКатегорий > 0 Тогда
		СписокВыбора.Добавить(Новый Структура("Имя,ПолеНастройки,ЭтоВыбор","К",,"Категория"),"Изменить категорию: [...]");
	КонецЕсли; 
	
	Если ФлагИзмененияРеквизитов  Тогда
		СписокВыбора.Добавить(Новый Структура("Имя,ПолеНастройки,ЭтоВыбор","Р",,"Реквизит"),"Изменить реквизит: [...]");
	КонецЕсли;
	
	Если ТипОбъекта = 1 Тогда
		
		СписокВыбораДействия = Новый СписокЗначений;
		СписокВыбораДействия.Добавить("Печать с предварительным просмотром");
		СписокВыбораДействия.Добавить("Печать без предварительного просмотра");
		СписокВыбораДействия.Добавить("Реестр документов");
		
		СписокВыбора.Добавить(Новый Структура("Имя,ЭтоВыбор,СписокВыбора","П_ПечатьДокументов","ПечатьДокументов",СписокВыбораДействия),"Печать документов");
	ИначеЕсли мСформированныйРежим.ИмяВидаОдногоТипа = "Номенклатура" Тогда
		
		СписокВыбора.Добавить(Новый Структура("Имя,ЭтоВыбор,СписокВыбора","П_ПечатьЦенников","ПечатьЦенников",Новый СписокЗначений),"Печать ценников");
		
		СписокВыбора.Добавить(Новый Структура("Имя,ЭтоВыбор,СписокВыбора","П_ПечатьЭтикеток","ПечатьЭтикеток",Новый СписокЗначений),"Печать этикеток");
		
		СП = Новый СписокЗначений;
		СП.Добавить("Запретить");
		СП.Добавить("Разрешить");
		
		СписокВыбора.Добавить(Новый Структура("Имя,ЭтоВыбор,СписокВыбора","П_ДоступнаВВебПриложенииУпрЗаказами","ДоступнаВВебПриложенииУпрЗаказами",СП),"Доступность в веб-приложении ""Управление заказами""");
		
	КонецЕсли; 
	Для каждого Элемент Из СписокВыбора Цикл
		Элемент.Значение.Вставить("ТекущееПредставление",Элемент.Представление);
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьСписокДействий()

Процедура УстановитьВидимостьКолонокГрупповойОбработкиСправочников() Экспорт
	Если мСформированныйРежим = Неопределено ИЛИ Не мСформированныйРежим.ДанныеОтобраны Тогда
		Возврат;
	КонецЕсли; 
	КолонкаДействия = Неопределено;
	ТабличноеПоле = ЭлементыФормы.ТабличноеПолеДанных;
	Для каждого Колонка Из ТабличноеПоле.Колонки Цикл
		Колонка.Видимость = ПоказыватьВсеКолонки ИЛИ мСформированныйРежим.ОтображаемыеКолонки.Свойство(Колонка.Имя) ИЛИ (Не СписокДействий = Неопределено И СписокДействий.Имя = Колонка.Имя);
		Если Не СписокДействий = Неопределено И СписокДействий.Имя = Колонка.Имя Тогда
			КолонкаДействия = Колонка;
			Колонка.ЦветФонаПоля = WebЦвета.БледноБирюзовый;
		Иначе
			Колонка.ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
		КонецЕсли; 
	КонецЦикла; 
	Если Не КолонкаДействия = Неопределено Тогда
		ТабличноеПоле.Колонки.Сдвинуть(КолонкаДействия,2+2*ОбрабатыватьТабличныеЧасти-ТабличноеПоле.Колонки.Индекс(КолонкаДействия));
		//		КолонкаДействия.ЦветФонаПоля = ЦветаСтиля.АльтернативныйЦветФонаПоля;
	КонецЕсли; 
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция КраткоеОписаниеОшибки(ОписаниеОшибки);
	ПозКонцаСкобок = Найти(ОписаниеОшибки,"}");
	Если ПозКонцаСкобок = 0 Тогда
		
		Возврат ОписаниеОшибки;
		
	Иначе
		
		Возврат Сред(ОписаниеОшибки,ПозКонцаСкобок + 2);
		
	КонецЕсли;
	
КонецФункции // ()

// Процедура печати документов
Процедура ПечатьДокументов(МассивДокументов, НаПринтер)
	
	Если НаПринтер Тогда
		Ответ = Вопрос("При печати документов без предварительного просмотра будут использованы настройки, 
			|используемые при последней печати. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Ссылка Из МассивДокументов Цикл
		
		Объект = Ссылка.ПолучитьОбъект();
		МетаданныеОбъекта = Объект.Метаданные();
		
		//Если УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(Объект, , НаПринтер) Тогда
		//	Сообщить(Ссылка);
		//КонецЕсли;
		//Объект.Печать("ТОРГ-12 (Яршинторг).", 1, ложь, ложь);
		Объект.Печать(Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("ТОРГ-12 (Яршинторг)."), 1, НаПринтер);
		
		ИндикаторОбработки = ИндикаторОбработки + 1;
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	Сообщить("-----------------------------------------------------------", СтатусСообщения.БезСтатуса);
	Сообщить("Выполнение обработки завершено", СтатусСообщения.БезСтатуса);
	
КонецПроцедуры 

// Процедура выполняет изменение свойств выбранных объектов
Функция ИзменениеСвойстваОбъектов(МассивСсылок)
	СвойствоОбъекта = мСформированныйРежим.СтруктураСвойств[СписокДействий.Имя];
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Набор = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		Набор.Отбор.Свойство.Установить(СвойствоОбъекта);
		Запись = Набор.Добавить();
		
		
		Запись.Объект = Ссылка;
		Запись.Свойство = СвойствоОбъекта;
		Запись.Значение = ПолеВводаДействия;
		
		Попытка
			Набор.Записать(Истина);;
			Сообщить(Ссылка);
			
		Исключение
			ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
			Сообщить(""+Ссылка + " - " + ОписаниеОшибки, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;		
		
		ИндикаторОбработки = ИндикаторОбработки + 1;
	КонецЦикла; 
	
	Если Не ТаблицаДанных.Колонки.Найти(СписокДействий.Имя) = Неопределено Тогда
		
		Для Каждого СтрокаДанных ИЗ ТаблицаДанных Цикл
			Если СтрокаДанных.Пометка Тогда
				СтрокаДанных[СписокДействий.Имя] = ПолеВводаДействия;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	 
	
	Возврат Истина;
КонецФункции // ИзменениеСвойстваОбъектов()

// Процедура установку категорий выбранных объектов
Функция УстановкаКатегорииОбъектов(МассивСсылок)
	Категория = мСформированныйРежим.СтруктураКатегорий[СписокДействий.Имя];
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Набор = РегистрыСведений.КатегорииОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Ссылка);
		
		Набор.Отбор.Категория.Установить(Категория);
		
		Если ПолеВводаДействия Тогда
			Запись = Набор.Добавить();
			Запись.Объект = Ссылка;
			Запись.Категория = Категория;	
		КонецЕсли; 
		
		Попытка
			Набор.Записать(Истина);;
			Сообщить(""+Ссылка);
		Исключение
			ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
			Сообщить(""+Ссылка + " - " + ОписаниеОшибки, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		ИндикаторОбработки = ИндикаторОбработки + 1;
		
	КонецЦикла;
	
	Если Не ТаблицаДанных.Колонки.Найти(СписокДействий.Имя) = Неопределено Тогда
		Для Каждого СтрокаДанных ИЗ ТаблицаДанных Цикл
			Если СтрокаДанных.Пометка Тогда
				СтрокаДанных[СписокДействий.Имя] = ПолеВводаДействия;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // УстановкаКатегорииОбъектов()

Процедура НапечататьЦенникИзОбработки(МассивСсылок)

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();

	Для Каждого Ссылка Из МассивСсылок Цикл
		НоваяСтрока = ОбработкаПечатьЦенников.Товары.Добавить();
		НоваяСтрока.Номенклатура = Ссылка;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ЕдиницаИзмерения = Ссылка.ЕдиницаХраненияОстатков;
		НоваяСтрока.Печать = Истина;
	КонецЦикла;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);
	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецПроцедуры

Процедура НапечатьЭтикеткиИзОбработкиЭтикеток(МассивТоваров)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|1 КАК Количество,
	|ТипШтрихкода КАК ТипШтрихкода,
	|Штрихкод КАК Штрихкод,
	|Владелец КАК Номенклатура,
	|ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|ХарактеристикаНоменклатуры КАК Характеристика,
	|СерияНоменклатуры КАК Серия,
	|Качество КАК Качество
	|ИЗ РегистрСведений.Штрихкоды
	|ГДЕ Владелец В (&МассивТоваров)
	|";
	
	ЗАпрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	
	
	Обработка = Обработки.ПечатьЭтикеток.Создать();
	
	Форма = Обработка.ПолучитьФорму();
	Форма.Товары = Запрос.Выполнить().Выгрузить();
	Форма.Открыть()
	
КонецПроцедуры

// Процедура изменяет доступность номенклатуры в веб-приложении "Управление заказами".
// Изменяет набор записей регистра сведений НоменклатураНеиспользуемаяВВебУправленииЗаказами.
//
// Параметры:
//  МассивСсылок - Массив, СправочникСсылка.Номенклатура
//  Запретить - булево, если Истина, добавляет записи в регистр, иначе удаляет.
//
Процедура ИзменитьДоступностьВВебПриложенииНоменклатуры(МассивСсылок, Запретить)
	
	НаборНоменклатуры = РегистрыСведений.НоменклатураНеиспользуемаяВВебУправленииЗаказами.СоздатьНаборЗаписей();
	
	Если Запретить Тогда
		
		Для Каждого Номенклатура Из МассивСсылок Цикл
		
			НаборНоменклатуры.Добавить().Номенклатура = Номенклатура;
			
		КонецЦикла;
		
	Иначе
		
		НаборНоменклатуры.Прочитать();
		
		Инд = 0;
		
		Пока Инд < НаборНоменклатуры.Количество() Цикл
			
			Номенклатура = НаборНоменклатуры[Инд].Номенклатура;
			
			Ссылка = МассивСсылок.Найти(Номенклатура);
			
			Если Ссылка <> Неопределено Тогда
				
				НаборНоменклатуры.Удалить(Инд);
				МассивСсылок.Удалить(Ссылка);
				
			Иначе
				Инд = Инд + 1;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	НаборНоменклатуры.Записать(Истина);
	
КонецПроцедуры // ИзменитьДоступностьВВебПриложенииНоменклатуры()

Функция ПолучитьПредставление(ЭлементПредставления)
	Если Лев(ЭлементПредставления.Представление,2) = "К_" Тогда
		Возврат "Категория:"+ЭлементПредставления.Значение;
	ИначеЕсли Лев(ЭлементПредставления.Представление,2) = "С_" Тогда
		Возврат "Свойство:"+ЭлементПредставления.Значение;
	Иначе
		Возврат ЭлементПредставления.Значение;
	КонецЕсли; 
КонецФункции // ПолучитьПредставление(ЭлементПредставления)

//Функция возвращает представление обработанного объекта
Функция ПолучитьПредставлениеОбъекта(СтрокаТаблицыДанных)
	Возврат СтрокаТаблицыДанных.Ш_Ссылка;
КонецФункции

Функция ОчищатьРезультаты()
	Если Не мСформированныйРежим = Неопределено И мСформированныйРежим.ДанныеОтобраны Тогда
		Ответ = Вопрос("Результат отбора будет очищен. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена  Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	ОчиститьРезультаты();
	мСформированныйРежим = Неопределено;
	Возврат Истина;
КонецФункции // () 

Процедура ОчиститьРезультаты()
	ТаблицаДанных.Очистить();
	ТабличноеПоле = ЭлементыФормы.ТабличноеПолеДанных;
	
	Пока ТабличноеПоле.Колонки.Количество()>1 Цикл
		ТабличноеПоле.Колонки.Удалить(ТабличноеПоле.Колонки[ТабличноеПоле.Колонки.Количество()-1]);
	КонецЦикла;
	СписокВыбора = ЭлементыФормы.СписокДействий.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Неопределено,"<Выберите действие>");
	ПолеВводаДействия = Неопределено;
	ЭлементыФормы.ПолеВводаДействия.ВыбиратьТип = Ложь;
	СписокДействий = Неопределено;
КонецПроцедуры // () 

Процедура СоздатьКолонкиТаблицыДанных()
	
	ТабличноеПоле = ЭлементыФормы.ТабличноеПолеДанных;
	
	Пока ТабличноеПоле.Колонки.Количество()>1 Цикл
		ТабличноеПоле.Колонки.Удалить(ТабличноеПоле.Колонки[ТабличноеПоле.Колонки.Количество()-1]);
	КонецЦикла;
	
	Для каждого Элемент Из мСформированныйРежим.СписокПредставлений Цикл
		Если Элемент.Представление = "Ш_ВидПредставление" или Элемент.Представление = "Ш_Вид" Или Элемент.Представление = "Т_ТЧ" Тогда
			Продолжить;
		КонецЕсли; 
		
		КолонкаТаблицыДанных = ТаблицаДанных.Колонки.Найти(Элемент.Представление);
		Если КолонкаТаблицыДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		 
		НоваяКолонка = ТабличноеПоле.Колонки.Добавить(Элемент.Представление, ПолучитьПредставление(Элемент));
		
		Если КолонкаТаблицыДанных.ТипЗначения  = ОписаниеТипаБулево Тогда
			НоваяКолонка.ДанныеФлажка = Элемент.Представление;
			НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		Иначе
			НоваяКолонка.Данные = Элемент.Представление;
			Если Лев(Элемент.Представление,2) = "С_" Тогда
				НоваяКолонка.ЭлементУправления.ОграничениеТипа = Элемент.Значение.ТипЗначения;
			КонецЕсли; 
			НоваяКолонка.ТолькоПросмотр = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // () 

Процедура ОткрытьФормуВыбораТаблицы()
	ФормаВыбораТаблицы = ПолучитьФорму("ФормаВыбораТаблицы",ЭтаФорма);
	ФормаВыбораТаблицы.РежимВыбора = Истина;
	ФормаВыбораТаблицы.СписокВыбранных.ЗагрузитьЗначения(ТабличноеПолеВидыОбъектов.ВыгрузитьКолонку("ИмяТаблицы"));
	ФормаВыбораТаблицы.ТипОбъекта = ТипОбъекта;
	ФормаВыбораТаблицы.ОбрабатыватьТабличныеЧасти = ОбрабатыватьТабличныеЧасти;
	ФормаВыбораТаблицы.Открыть();
КонецПроцедуры // () 

Процедура ИнициализацияЗапроса()
	
	ВсегоСтрок = ТабличноеПолеВидыОбъектов.Количество();
	Если ВсегоСтрок = 0 Тогда
		Если Не ПостроительЗапроса = Неопределено И Не ПостроительЗапроса.Отбор = Неопределено Тогда
			КоличествоОтборов = ПостроительЗапроса.Отбор.Количество();
			Для Индекс = 1 По КоличествоОтборов Цикл
				ПостроительЗапроса.Отбор.Удалить(КоличествоОтборов - Индекс);
			КонецЦикла; 
		КонецЕсли; 
		ПостроительЗапроса = Неопределено;
		Возврат;
	КонецЕсли;	
	Если ПостроительЗапроса = Неопределено Тогда
		ПостроительЗапроса = Новый ПостроительЗапроса;
	КонецЕсли; 
	
	
	///============================= ИНИЦИАЛИЦАЗИЯ ПЕРЕМЕННЫХ
	
	МетаданныеОбъектов = Метаданные[?(ТипОбъекта = 1,"Документы","Справочники")];
	ИмяТипаТаблицы = ?(ТипОбъекта = 1,"Документ","Справочник");
	Префикс = ?(ОбрабатыватьТабличныеЧасти,"Ссылка.","");
	ТекстЗапроса = "";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ХранилищеЗначения"));
	ОписаниеТипаХранилище = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов              = Новый Массив;
	СписокПредставлений      = Новый СписокЗначений;
	СтруктураРеквизитовШапки = Новый Структура;
	СтруктураРеквизитовТЧ    = Новый Структура;
	СтруктураТиповОбъектов   = Новый Структура;
	СтруктураКатегорий       = Новый Структура;
	СтруктураСвойств         = Новый Структура;
	МассивНастроекОтбора     = Новый Массив;
	КоличествоТаблицВЗапросе = 0;
	
	ИмяВидаОдногоТипа = Неопределено;
	ПрошлоеЗначение   = Неопределено;
	///============================= ПОДСЧЕТ ОДОИМЕННЫХ РЕКВИЗИТОВ
	Для каждого Строка Из ТабличноеПолеВидыОбъектов Цикл
		
		КоличествоТаблицВЗапросе = КоличествоТаблицВЗапросе + 1;
		
		Если Не ОбрабатыватьТабличныеЧасти Тогда
			ИмяВида        = Строка.ИмяТаблицы;
		Иначе
			ПозТЧК  = Найти(Строка.ИмяТаблицы,".");
			ИмяВида = Лев(Строка.ИмяТаблицы,ПозТЧК-1);
			ИмяТЧ   = Сред(Строка.ИмяТаблицы,ПозТЧК+1);
			
			МетаданныеРеквизитовТЧ = МетаданныеОбъектов[ИмяВида].ТабличныеЧасти[ИмяТЧ].Реквизиты;
		КонецЕсли; 
		МетаданныеРеквизитов = МетаданныеОбъектов[ИмяВида].Реквизиты;
		
		Если ТипОбъекта = 1 Тогда
			Если МетаданныеОбъектов[ИмяВида].ДлинаНомера > 0 Тогда
				СтруктураРеквизитовШапки.Вставить("Номер",
				?(СтруктураРеквизитовШапки.Свойство("Номер",ПрошлоеЗначение)
				,ПрошлоеЗначение+1,1));
			КонецЕсли; 
			
			СтруктураРеквизитовШапки.Вставить("Дата",
			?(СтруктураРеквизитовШапки.Свойство("Дата",ПрошлоеЗначение)
			,ПрошлоеЗначение+1,1));
			
			СтруктураРеквизитовШапки.Вставить("Проведен",
			?(СтруктураРеквизитовШапки.Свойство("Проведен",ПрошлоеЗначение)
			,ПрошлоеЗначение+1,1));
		Иначе
			Если МетаданныеОбъектов[ИмяВида].ДлинаКода > 0 Тогда
				СтруктураРеквизитовШапки.Вставить("Код",
				?(СтруктураРеквизитовШапки.Свойство("Код",ПрошлоеЗначение)
				,ПрошлоеЗначение+1,1));
			КонецЕсли; 
			
			Если МетаданныеОбъектов[ИмяВида].ДлинаНаименования > 0 Тогда
				СтруктураРеквизитовШапки.Вставить("Наименование",
				?(СтруктураРеквизитовШапки.Свойство("Наименование",ПрошлоеЗначение)
				,ПрошлоеЗначение+1,1));
			КонецЕсли; 
		КонецЕсли;
		
		Если ИмяВидаОдногоТипа = Неопределено Тогда
			ИмяВидаОдногоТипа = ИмяВида;
		ИначеЕсли ИмяВидаОдногоТипа <> ИмяВида Тогда
			ИмяВидаОдногоТипа = Ложь;
		КонецЕсли; 
		
		
		Для каждого РеквизитМетаданного Из МетаданныеОбъектов[ИмяВида].Реквизиты Цикл
			
			Если РеквизитМетаданного.Тип = ОписаниеТипаХранилище Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураРеквизитовШапки.Вставить(РеквизитМетаданного.Имя,
			?(СтруктураРеквизитовШапки.Свойство(РеквизитМетаданного.Имя,ПрошлоеЗначение)
			,ПрошлоеЗначение+1,1));
			
		КонецЦикла;
		
		Если ОбрабатыватьТабличныеЧасти Тогда
			
			Для каждого РеквизитМетаданного Из МетаданныеРеквизитовТЧ Цикл
				
				Если РеквизитМетаданного.Тип = ОписаниеТипаХранилище Тогда
					Продолжить;
				КонецЕсли; 
				
				СтруктураРеквизитовТЧ.Вставить(РеквизитМетаданного.Имя,
				?(СтруктураРеквизитовТЧ.Свойство(РеквизитМетаданного.Имя,ПрошлоеЗначение)
				,ПрошлоеЗначение+1,1));
				
			КонецЦикла;
		КонецЕсли; 
		СтруктураТиповОбъектов.Вставить(МетаданныеОбъектов[ИмяВида].Имя,Тип(ИмяТипаТаблицы+"Ссылка."+ИмяВида));
	КонецЦикла;
	Если ИмяВидаОдногоТипа = Ложь Тогда
		ИмяВидаОдногоТипа = Неопределено;
	КонецЕсли; 
	ВКонфигурацииЕстьОстаткиНоменклатуры = Не Метаданные.РегистрыНакопления.Найти("ТоварыНаСкладах") = Неопределено;
	КонтрольОстатковНоменклатуры = (ТипОбъекта = 0) И (ИмяВидаОдногоТипа = "Номенклатура") И ВКонфигурацииЕстьОстаткиНоменклатуры;
	
	ДоступностьВВебПриложенииНоменклатуры = ложь; //(ТипОбъекта = 0) И (ИмяВидаОдногоТипа = "Номенклатура");
	
	///============================= ОПРЕДЕЛЕНИЕ ОБЩИХ СВОЙСТВ И КАТЕГОРИЙ
	
	Для каждого КлючИЗначение Из СтруктураТиповОбъектов Цикл
		МассивТипов.Добавить(КлючИЗначение.Значение);
	КонецЦикла; 
	ОписаниеВсехТипов = Новый ОписаниеТипов(МассивТипов);
	
	Если ВКонфигурацииЕстьКатегории Тогда
		
		Счетчик = 0;
		
		Выборка = Справочники.КатегорииОбъектов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Счетчик = Счетчик + 1;
			
			Если Не Выборка.ЭтоГруппа И Не Выборка.НазначениеКатегории.ТипЗначения = Неопределено Тогда
				ТипРазницы = Новый ОписаниеТипов(ОписаниеВсехТипов,,Выборка.НазначениеКатегории.ТипЗначения.Типы());
				Если ТипРазницы.Типы().Количество() = 0 Тогда
					СтруктураКатегорий.Вставить("К_"+Счетчик,Выборка.ссылка);
					Если ОтборПоКатегориям Тогда
						
						КоличествоТаблицВЗапросе = КоличествоТаблицВЗапросе + 1;
						
						ПостроительЗапроса.Параметры.Вставить("К_"+Счетчик,Выборка.ссылка);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ВКонфигурацииЕстьСвойства Тогда
		
		Счетчик = 0;
		
		Выборка = ПланыВидовХарактеристик.СвойстваОбъектов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Счетчик = Счетчик + 1;
			
			Если Не Выборка.ЭтоГруппа Тогда
				
				Если Не Выборка.НазначениеСвойства.ТипЗначения = Неопределено Тогда
				
					ТипРазницы = Новый ОписаниеТипов(ОписаниеВсехТипов,,Выборка.НазначениеСвойства.ТипЗначения.Типы());
					
					Если ТипРазницы.Типы().Количество() = 0 Тогда
						СтруктураСвойств.Вставить("С_"+Счетчик,Выборка.ссылка);
						Если ОтборПоСвойствам Тогда
							
							КоличествоТаблицВЗапросе = КоличествоТаблицВЗапросе + 1;
							
							ПостроительЗапроса.Параметры.Вставить("С_"+Счетчик,Выборка.ссылка);
							
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЕсли;
	
	///============================= ОПРЕДЕЛЕНИЕ СОСТАВА РЕКВИЗИТОВ
	Счетчик = 0;
	Для каждого КлючИЗначение Из СтруктураРеквизитовТЧ Цикл
		
		Если Не КлючИЗначение.Значение = ВсегоСтрок Тогда
			
			СтруктураРеквизитовТЧ.Удалить(КлючИЗначение.Ключ);
			
		Иначе
			Счетчик = Счетчик + 1;
			СтруктураРеквизитовТЧ.Вставить(КлючИЗначение.Ключ,"Т_"+КлючИЗначение.Ключ);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	
	Счетчик = 0;
	Для каждого КлючИЗначение Из СтруктураРеквизитовШапки Цикл
		
		Если Не КлючИЗначение.Значение = ВсегоСтрок Тогда
			
			СтруктураРеквизитовШапки.Удалить(КлючИЗначение.Ключ);
			
		Иначе
			Счетчик = Счетчик + 1;
			СтруктураРеквизитовШапки.Вставить(КлючИЗначение.Ключ,"Ш_"+КлючИЗначение.Ключ);
		КонецЕсли; 
		
	КонецЦикла; 
	
	///============================= ОПРЕДЕЛЕНИЕ ПОРЯДКА И ПРЕДСТАВЛЕНИЯ РЕКВИЗИТОВ
	СписокПредставлений.Добавить("Вид "+ИмяТипаТаблицы+"а","Ш_Вид");
	СписокПредставлений.Добавить("Вид "+ИмяТипаТаблицы+"а","Ш_ВидПредставление");
	СписокПредставлений.Добавить("Ссылка","Ш_Ссылка");
	
	Если ОбрабатыватьТабличныеЧасти Тогда
		
		СписокПредставлений.Добавить("Имя ТЧ","Т_ТЧ");
		СписокПредставлений.Добавить("Имя ТЧ","Т_ТЧПредставление");
		СписокПредставлений.Добавить("№ строки","Т_НомерСтроки");
		
		Для каждого КлючИЗначение Из СтруктураРеквизитовТЧ Цикл
			СписокПредставлений.Добавить(МетаданныеРеквизитовТЧ[КлючИЗначение.Ключ].Представление(),КлючИЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли; 
	
	СписокПредставлений.Добавить(Префикс + "Пометка удаления","Ш_ПометкаУдаления");
	
	Если ТипОбъекта = 0 И Не ИмяВидаОдногоТипа = Неопределено Тогда
		
		Если МетаданныеОбъектов[ИмяВидаОдногоТипа].Владельцы.Количество() > 0 Тогда
			
			СтруктураРеквизитовШапки.Вставить("Владелец","Ш_Владелец");
			
		КонецЕсли; 
		
		
		Если МетаданныеОбъектов[ИмяВидаОдногоТипа].Иерархический Тогда
			
			СтруктураРеквизитовШапки.Вставить("Родитель","Ш_Родитель");
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если КонтрольОстатковНоменклатуры Тогда
		
		КоличествоТаблицВЗапросе = КоличествоТаблицВЗапросе + 2;
		
		СписокПредставлений.Добавить(Префикс+"Остаток товара","Р_Остаток");
		СписокПредставлений.Добавить(Префикс+"Остаток-Резерв товара","Р_Резерв");
		
	КонецЕсли;
	
	Если ДоступностьВВебПриложенииНоменклатуры Тогда
		
		КоличествоТаблицВЗапросе = КоличествоТаблицВЗапросе + 1;
		СписокПредставлений.Добавить(Префикс+"Доступна в веб-приложении ""Управление заказами""","П_ДоступнаВВебПриложенииУпрЗаказами");
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитовШапки Цикл
		МетаданныеРеквизита = МетаданныеРеквизитов.Найти(КлючИЗначение.Ключ);
		Если Не МетаданныеРеквизита = Неопределено Тогда
			СписокПредставлений.Добавить(Префикс+МетаданныеРеквизита.Представление(),КлючИЗначение.Значение);
		Иначе
			СписокПредставлений.Добавить(Префикс+КлючИЗначение.Ключ,КлючИЗначение.Значение);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого КлючИЗначение Из СтруктураКатегорий Цикл
		СписокПредставлений.Добавить(КлючИЗначение.Значение,КлючИЗначение.Ключ);
	КонецЦикла; 
	
	Для каждого КлючИЗначение Из СтруктураСвойств Цикл
		СписокПредставлений.Добавить(КлючИЗначение.Значение,КлючИЗначение.Ключ);
	КонецЦикла; 
	
	
	
	///============================= ДОБАВЛЕНИЕ ОБЩИХ РЕКВИЗИТОВ
	СтруктураРеквизитовШапки.Вставить("ПометкаУдаления","Ш_ПометкаУдаления");
	
	Если ОбрабатыватьТабличныеЧасти Тогда
		СтруктураРеквизитовТЧ.Вставить("НомерСтроки","Т_НомерСтроки");
	КонецЕсли; 
	
	
	///============================= ФОРМИРОВАНИЕ ТЕКСТА ЗАПРОСА
	
	Для каждого Строка Из ТабличноеПолеВидыОбъектов Цикл
		
		Если Не ОбрабатыватьТабличныеЧасти Тогда
			ИмяВида        = Строка.ИмяТаблицы;
		Иначе
			ПозТЧК  = Найти (Строка.ИмяТаблицы,".");
			ИмяВида = Лев   (Строка.ИмяТаблицы,ПозТЧК-1);
			ИмяТЧ   = Сред  (Строка.ИмяТаблицы,ПозТЧК+1);
			
			МетаданныеРеквизитовТЧ = МетаданныеОбъектов[ИмяВида].ТабличныеЧасти[ИмяТЧ].Реквизиты;
		КонецЕсли; 
		МетаданныеРеквизитов = МетаданныеОбъектов[ИмяВида].Реквизиты;
		
		ИмяТаблицы       = ИмяТипаТаблицы + "." + Строка.ИмяТаблицы;
		ПсевдонимТаблицы = СтрЗаменить(ИмяТаблицы,".","_");
		
		///============================= ФОРМИРОВАНИЕ ТЕКСТА ЗАПРОСА ПО РЕКВИЗИТАМ
		
		ТекстЗапроса = ?(ТекстЗапроса = "","Выбрать РАЗРЕШЕННЫЕ",ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС + "ВЫБРАТЬ");
		
		ТекстЗапроса = ТекстЗапроса + ""  + Символы.ПС + "	""" +ИмяВида+ """ КАК Ш_Вид";
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	""" +МетаданныеОбъектов[ИмяВида].Представление()+ """ КАК Ш_ВидПредставление";
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	"   +ПсевдонимТаблицы+"."+Префикс+"Ссылка КАК Ш_Ссылка";
		
		Для каждого КлючИЗначение Из СтруктураРеквизитовШапки Цикл
			МетаданноеРеквизита = МетаданныеРеквизитов.Найти(КлючИЗначение.Ключ);
			Если Не МетаданноеРеквизита = Неопределено И МетаданноеРеквизита.Тип.СодержитТип(Тип("Строка")) и МетаданноеРеквизита.Тип.КвалификаторыСтроки.Длина = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	ПОДСТРОКА("+ПсевдонимТаблицы+"."+Префикс+КлючИЗначение.Ключ+",1,"+ОграничениеНаСтрокиНеограниченнойДлины+")";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	"+ПсевдонимТаблицы+"."+Префикс+КлючИЗначение.Ключ;
			КонецЕсли; 			
			ТекстЗапроса = ТекстЗапроса + " КАК " + КлючИЗначение.Значение;
		КонецЦикла; 
		
		Если ОбрабатыватьТабличныеЧасти Тогда
			
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	""" +ИмяТЧ+ """ КАК Т_ТЧ";
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	""" +МетаданныеОбъектов[ИмяВида].ТабличныеЧасти[ИмяТЧ].Представление()+ """ КАК Т_ТЧПредставление";
			
			Для каждого КлючИЗначение Из СтруктураРеквизитовТЧ Цикл
				
				МетаданноеРеквизита = МетаданныеРеквизитовТЧ.Найти(КлючИЗначение.Ключ);
				
				Если Не МетаданноеРеквизита = Неопределено И МетаданноеРеквизита.Тип.СодержитТип(Тип("Строка")) и МетаданноеРеквизита.Тип.КвалификаторыСтроки.Длина = 0 Тогда
					
					ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	ПОДСТРОКА("+ПсевдонимТаблицы+"."+КлючИЗначение.Ключ+",1,"+ОграничениеНаСтрокиНеограниченнойДлины+")";
					
				Иначе
					
					ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	"+ПсевдонимТаблицы+"."+КлючИЗначение.Ключ;
					
				КонецЕсли;
				
				ТекстЗапроса = ТекстЗапроса + " КАК " + КлючИЗначение.Значение;
				
			КонецЦикла; 
		КонецЕсли;
		
		///============================= ФОРМИРОВАНИЕ ТЕКСТА ЗАПРОСА ПО СВОЙСТВАМ И КАТЕГОРИЯМ
		Если ОтборПоКатегориям Тогда
			
			Для каждого КлючИЗначение Из СтруктураКатегорий Цикл
				
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + 
				"	ВЫБОР КОГДА Таблица_"+КлючИЗначение.Ключ+".Категория ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК " + КлючИЗначение.Ключ;
				
			КонецЦикла; 
			
		КонецЕсли;
		 
		Если ОтборПоСвойствам Тогда
			
			Для каждого КлючИЗначение Из СтруктураСвойств Цикл
				
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "	Таблица_"+КлючИЗначение.Ключ+".Значение КАК "+КлючИЗначение.Ключ;
				
			КонецЦикла; 
			
		КонецЕсли;
		 
		
		///============================= ФОРМИРОВАНИЕ ТЕКСТА ЗАПРОСА ПО ОСТАТКАМ НОМЕНКЛАТУРЫ
		Если КонтрольОстатковНоменклатуры Тогда
			
			ТекстЗапроса = ТекстЗапроса + "," + "
			|	ЕСТЬNULL(Таблица_Р_Остаток.КоличествоОстаток,0) Как Р_Остаток,
			|	ЕСТЬNULL(Таблица_Р_Остаток.КоличествоОстаток, 0) - ЕСТЬNULL(Таблица_Р_Резерв.КоличествоОстаток, 0) КАК Р_Резерв";
			
		КонецЕсли;
		
		//Если ДоступностьВВебПриложенииНоменклатуры Тогда
		//	
		//	ТекстЗапроса = ТекстЗапроса + "," + "
		//	|	ВЫБОР
		//	|		КОГДА Таблица_П_Веб.Номенклатура ЕСТЬ NULL ТОГДА Истина
		//	|		ИНАЧЕ Ложь
		//	|	КОНЕЦ КАК П_ДоступнаВВебПриложенииУпрЗаказами";
		//	
		//КонецЕсли;
		
		Если КоличествоТаблицВЗапросе > 256 Тогда
		
			ПостроительЗапроса   = Неопределено;
			мСформированныйРежим = Неопределено;
			
			Предупреждение("Количество таблиц в запросе превышает 256!
			|Уменьшите число выбранных видов объектов или отключите отбор по свойствам/категориям."); 
			
			Возврат;
			
		КонецЕсли;
		
		///============================= ФОРМИРОВАНИЕ ТЕКСТА ЗАПРОСА ПО "ИЗ" И "СОЕДИНЕНИЕ"
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + "	"+ИмяТаблицы + " КАК " + ПсевдонимТаблицы;
		Если ОтборПоКатегориям Тогда
			
			Для каждого КлючИЗначение Из СтруктураКатегорий Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК Таблица_"+КлючИЗначение.Ключ+"
				|		ПО " + ПсевдонимТаблицы + ".Ссылка = Таблица_"+КлючИЗначение.Ключ+".Объект
				|		И (Таблица_"+КлючИЗначение.Ключ+".Категория = &"+КлючИЗначение.Ключ+")";
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОтборПоСвойствам Тогда
			
			Для каждого КлючИЗначение Из СтруктураСвойств Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Таблица_"+КлючИЗначение.Ключ+"
				|		ПО " + ПсевдонимТаблицы + ".Ссылка = Таблица_"+КлючИЗначение.Ключ+".Объект
				|		И (Таблица_"+КлючИЗначение.Ключ+".Свойство = &"+КлючИЗначение.Ключ+")";
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КонтрольОстатковНоменклатуры Тогда
			
			ТекстЗапроса = ТекстЗапроса + "," + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК Таблица_Р_Остаток
			|		ПО " + ПсевдонимТаблицы + ".Ссылка = Таблица_Р_Остаток.Номенклатура
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки КАК Таблица_Р_Резерв
			|		ПО " + ПсевдонимТаблицы + ".Ссылка = Таблица_Р_Резерв.Номенклатура";
			
		КонецЕсли;
		
		//Если ДоступностьВВебПриложенииНоменклатуры Тогда
		//	
		//	ТекстЗапроса = ТекстЗапроса + "," + "
		//	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураНеиспользуемаяВВебУправленииЗаказами КАК Таблица_П_Веб
		//	|	ПО " + ПсевдонимТаблицы + ".Ссылка = Таблица_П_Веб.Номенклатура";
		//	
		//КонецЕсли;
		
		Если ТипОбъекта = 0  И МетаданныеОбъектов[ИмяВида].Иерархический И МетаданныеОбъектов[ИмяВида].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	" + ПсевдонимТаблицы + ".Ссылка.ЭтоГруппа = ЛОЖЬ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	///============================= СОХРАНЕНИЕ НАСТРОЕК ОТБОРА ПРЕДЫДУЩЕГО ЗАПРОСА
	Для Индекс = 0 По ПостроительЗапроса_Отбор.Количество() - 1 Цикл
		МассивНастроекОтбора.Добавить(ПостроительЗапроса_Отбор.Получить(Индекс));
	КонецЦикла; 
	
	///============================= ИНИЦИАЛИЗАЦИЯ ТЕКСТА И ПОЛЕЙ ЗАПРОСА
	
	Если ТипОбъекта = 1 Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ш_Дата,
		|	Ш_Ссылка";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ш_Вид,
		|	Ш_Ссылка";
		
	КонецЕсли;
	
	Если ОбрабатыватьТабличныеЧасти Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	Т_ТЧ,
		|	Т_НомерСтроки";
	КонецЕсли;
	 
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	КоличествоПолей = ПостроительЗапроса.ДоступныеПоля.Количество();
	Для к = 0 По КоличествоПолей - 1 Цикл
		ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля[КоличествоПолей - к - 1];
		
		Если ПостроительЗапроса.ВыбранныеПоля.Найти(ДоступноеПоле.Имя) = Неопределено Тогда
			ПостроительЗапроса.ДоступныеПоля.Удалить(ДоступноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПолей = ПостроительЗапроса.ВыбранныеПоля.Количество();
	Для к = 0 По КоличествоПолей - 1 Цикл
		ИмяПоля = ПостроительЗапроса.ВыбранныеПоля[КоличествоПолей - к - 1].Имя;
		ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяПоля);
		ПостроительЗапроса.ДоступныеПоля.Сдвинуть(ДоступноеПоле,-1000);
		
	КонецЦикла;
	 
	
	Для каждого ЭлементПредставления Из СписокПредставлений Цикл
		ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ЭлементПредставления.Представление);
		Если Не ДоступноеПоле = Неопределено Тогда
			
			ДоступноеПоле.Представление = ПолучитьПредставление(ЭлементПредставления);
			Если Лев(ДоступноеПоле.Имя , 2) = "С_" Тогда
				ДоступноеПоле.ТипЗначения = СтруктураСвойств[ДоступноеПоле.Имя].ТипЗначения;
			КонецЕсли; 
			
		КонецЕсли;
		 
	КонецЦикла; 
	
	ДоступныеПоляОтбора = ПостроительЗапроса.Отбор.ПолучитьДоступныеПоля();
	ДоступныеПоляОтбора.Удалить(ДоступныеПоляОтбора.Ш_ВидПредставление);
	ДоступныеПоляОтбора.Ш_Ссылка.Поля.Очистить();
	//ДоступныеПоляОтбора.Удалить(ДоступныеПоляОтбора.Ш_Ссылка);
	Если ОбрабатыватьТабличныеЧасти Тогда
		ДоступныеПоляОтбора.Удалить(ДоступныеПоляОтбора.Т_ТЧПредставление);
		ДоступныеПоляОтбора.Удалить(ДоступныеПоляОтбора.Т_ТЧ);
	КонецЕсли; 
	
	///============================= ВОССТАНОВЛЕНИЕ НАСТРОЕК ОТБОРА ПРЕДЫДУЩЕГО ЗАПРОСА
	Для каждого ЭлементОтбора Из МассивНастроекОтбора Цикл
		ДоступноеПоле = ДоступныеПоляОтбора.Найти(ЭлементОтбора.ПутьКДанным);
		Попытка
			НовыйЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлементОтбора.ПутьКДанным);
			НовыйЭлементОтбора.Использование = ЭлементОтбора.Использование;
			НовыйЭлементОтбора.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НовыйЭлементОтбора.Значение = ЭлементОтбора.Значение;
			НовыйЭлементОтбора.ЗначениеС = ЭлементОтбора.ЗначениеС;
			НовыйЭлементОтбора.ЗначениеПо = ЭлементОтбора.ЗначениеПо;
		Исключение
		КонецПопытки; 
	КонецЦикла; 
	
	
	ПредопределенныеРеквизиты = Новый СписокЗначений;
	Макет = ПолучитьМакет("ПредопределенныеРеквизиты");
	Область = Макет.Области[?(ТипОбъекта = 0,"Справочники","Документы")];
	Счетчик = 0;
	ВидОбъекта = "*";
	Для к =  Область.Верх По Область.Низ Цикл
		
		ТекВидОбъекта = СокрЛП(Макет.Область("R"+к+"C1").Текст);
		
		Если  ТекВидОбъекта <> "" Тогда
			Если ТекВидОбъекта = "*" Тогда
				ВидОбъекта = ТекВидОбъекта;
			Иначе
				ВидОбъекта = ТекВидОбъекта;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ИмяВидаОдногоТипа = ВидОбъекта ИЛИ ВидОбъекта = "*" Тогда
			
			ПолноеИмяРеквизита = СокрЛП(Макет.Область("R"+к+"C2").Текст);
			Описание = СокрЛП(Макет.Область("R"+к+"C3").Текст);
			ЧерезТочку = Ложь;
			ПозТЧК = Найти(ПолноеИмяРеквизита,".");
			ЭтоСоставнойРеквизит = Не(ПозТЧК = 0);
			ИмяКорня = "Ш_"+?(ПозТЧК = 0,ПолноеИмяРеквизита,Лев(ПолноеИмяРеквизита,ПозТЧК-1));
			ПолеНастройки = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяКорня);
			Пока Не ПозТЧК = 0 И Не ПолеНастройки = Неопределено Цикл
				ПолноеИмяРеквизита = Сред(ПолноеИмяРеквизита,ПозТЧК+1);
				ПозТЧК = Найти(ПолноеИмяРеквизита,".");
				ПолеНастройки = ПолеНастройки.Поля.Найти(?(ПозТЧК = 0,ПолноеИмяРеквизита,Лев(ПолноеИмяРеквизита,ПозТЧК-1)));
				ЧерезТочку = Истина;
			КонецЦикла; 
			Если Не ПолеНастройки = Неопределено Тогда
				Если ЭтоСоставнойРеквизит Тогда
					Счетчик = Счетчик+1;
					ПостроительЗапроса.ВыбранныеПоля.Добавить(ПолеНастройки.ПутьКДанным,"Д_"+Счетчик);
					СписокПредставлений.Добавить(Описание,"Д_"+Счетчик);
					ПредопределенныеРеквизиты.Добавить(Новый Структура("Имя,ПолеНастройки","Д_"+Счетчик,ПолеНастройки),Описание);
				Иначе
					ПредопределенныеРеквизиты.Добавить(Новый Структура("Имя,ПолеНастройки",ПолеНастройки.Имя,ПолеНастройки),Описание);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
	///============================= 
	ПостроительЗапроса_Отбор = ПостроительЗапроса.Отбор;
	ПостроительЗапроса.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	ОтображаемыеКолонки  = Новый Структура("Ш_ВидПредставление,Ш_Ссылка");
	Если ОбрабатыватьТабличныеЧасти Тогда
		ОтображаемыеКолонки.Вставить("Т_ТЧПредставление");
		ОтображаемыеКолонки.Вставить("Т_НомерСтроки");
	КонецЕсли; 
	мСформированныйРежим =  Новый Структура("СписокПредставлений,ДанныеОтобраны,ИмяВидаОдногоТипа,ПредопределенныеРеквизиты,ОтображаемыеКолонки,СтруктураСвойств,СтруктураКатегорий",СписокПредставлений,Ложь,ИмяВидаОдногоТипа,ПредопределенныеРеквизиты,ОтображаемыеКолонки,СтруктураСвойств,СтруктураКатегорий);
	
КонецПроцедуры // ИнициализацияЗапроса() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Не ОчищатьРезультаты() Тогда
		Возврат;
	КонецЕсли; 
	
	ТипОбъекта = Источник.ТипОбъекта;
	ОбрабатыватьТабличныеЧасти = Источник.ОбрабатыватьТабличныеЧасти;
	ТабличноеПолеВидыОбъектов.Очистить();
	Для каждого Значение Из ЗначениеВыбора Цикл
		
		Строка = ТабличноеПолеВидыОбъектов.Добавить();
		Строка.ИмяТаблицы = Значение.Значение;
		Строка.ПредставлениеТаблицы = Значение.Представление;
		
	КонецЦикла; 
	
	ИнициализацияЗапроса();
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	Если ОчищатьРезультаты() Тогда
		ИнициализацияЗапроса();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	МассивТипов.Добавить(Тип("Null"));
	ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипов);
	мСформированныйРежим = Неопределено;
	Если ОграничениеНаСтрокиНеограниченнойДлины = 0 Тогда
		ОграничениеНаСтрокиНеограниченнойДлины = 999;
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыВыполнитьОтбор(Кнопка)
	ОчиститьРезультаты();
	Если мСформированныйРежим = Неопределено Тогда
		ИнициализацияЗапроса();
	КонецЕсли; 
	Если мСформированныйРежим = Неопределено Тогда
		Предупреждение("Не выбрано ни одной таблицы");
		Возврат;
	КонецЕсли; 
	
	СоответствиеДанных = Новый Соответствие;
	Для каждого ВыбранноеПоле Из ПостроительЗапроса.ВыбранныеПоля Цикл
		СоответствиеДанных.Вставить(ВыбранноеПоле.ПутьКДанным,ВыбранноеПоле.Имя);
	КонецЦикла; 
	Счетчик = 0;
	Для каждого Отбор Из ПостроительЗапроса_Отбор Цикл
		
		Если Отбор.Использование И Не ПустаяСтрока(Отбор.ПутьКДанным) Тогда
			
			Счетчик = Счетчик + 1;
			ИмяДанных = СоответствиеДанных[Отбор.ПутьКДанным];
			Если ИмяДанных = Неопределено Тогда
				ИмяДанных = "О_"+Счетчик;
				ПостроительЗапроса.ВыбранныеПоля.Добавить(Отбор.ПутьКДанным,ИмяДанных);
				мСформированныйРежим.СписокПредставлений.Добавить(Отбор.Представление,ИмяДанных);
			КонецЕсли; 
			мСформированныйРежим.ОтображаемыеКолонки.Вставить(ИмяДанных,Отбор.ПутьКДанным)
		КонецЕсли;
		
	КонецЦикла; 
	
	мСформированныйРежим.ДанныеОтобраны = Истина;
	ЗаполнитьСписокДействий();
	ТаблицаДанных = ПостроительЗапроса.ПолучитьЗапрос().Выполнить().Выгрузить();
	
	ТаблицаДанных.Колонки.Вставить(0,"Пометка",ОписаниеТипаБулево);
	ТаблицаДанных.Индексы.Добавить("Пометка");
	ТаблицаДанных.ЗаполнитьЗначения(Истина, "Пометка");
	СоздатьКолонкиТаблицыДанных();
	УстановитьВидимостьКолонокГрупповойОбработкиСправочников();
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Обработка;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНастройка(Кнопка)
	ПолучитьФорму("ФормаНастройки",ЭтаФорма).Открыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ТипОбъектаПриИзменении(Элемент)
	
	ТабличноеПолеВидыОбъектов.Очистить();
	ИнициализацияЗапроса();
	
КонецПроцедуры

Процедура ТипОбъектаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элемент.Значение = ВыбранноеЗначение Или Не ОчищатьРезультаты() Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ОбрабатыватьТабличныеЧастиПриИзменении(Элемент)
	
	Если ОчищатьРезультаты() Тогда
		ТабличноеПолеВидыОбъектов.Очистить();
		ИнициализацияЗапроса();
	Иначе
		Элемент.Значение = Не Элемент.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СписокДействийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Результат = Истина;
	ТипВыбора = Неопределено;
	
	Если  Не ВыбранноеЗначение =  Неопределено И ВыбранноеЗначение.Свойство("ЭтоВыбор",ТипВыбора) Тогда
		
		СписокВыбора = ЭлементыФормы.СписокДействий.СписокВыбора;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		СтароеПредставление = ЭлементСписка.Представление;
		
		Если ТипВыбора = "Реквизит" Тогда
			
			ФормаВыбораРеквизита = ПолучитьФорму("ФормаВыбораРеквизита",ЭтаФорма);
			ФормаВыбораРеквизита.ПоляНастройки = ПостроительЗапроса_Отбор.ПолучитьДоступныеПоля();
			ФормаВыбораРеквизита.ОбрабатыватьТабличныеЧасти = ОбрабатыватьТабличныеЧасти;
			Результат = ФормаВыбораРеквизита.ОткрытьМодально();
			
			Если Не Результат = Неопределено Тогда
				
				ЭлементСписка.Представление = "Изменить реквизит["+Результат.Представление+"]";
				
				СписокДействий = ВыбранноеЗначение;
				СписокДействий.ТекущееПредставление = ЭлементСписка.Представление;
				СписокДействий.Имя = Результат.Имя;
				СписокДействий.ПолеНастройки = Результат.ПолеНастройки;
				
				ЭлементСписка.Представление = СтароеПредставление;
				
			КонецЕсли;
			
		ИначеЕсли ТипВыбора = "Свойство" Тогда
			
			СписокЗначенийВыбора = Новый СписокЗначений;
			Для каждого КлючИЗначение Из мСформированныйРежим.СтруктураСвойств Цикл
				СписокЗначенийВыбора.Добавить(КлючИЗначение,КлючИЗначение.Значение);
			КонецЦикла;
			
			Результат = СписокЗначенийВыбора.ВыбратьЭлемент("Выбор свойства");
			Если Не Результат = Неопределено Тогда
				
				ЭлементСписка.Представление = "Изменить свойство["+Результат.Представление+"]";
				
				СписокДействий = ВыбранноеЗначение;
				СписокДействий.ТекущееПредставление = ЭлементСписка.Представление;
				СписокДействий.Имя = Результат.Значение.Ключ;
				СписокДействий.ПолеНастройки = ПостроительЗапроса.ДоступныеПоля.Найти(Результат.Значение.Ключ);
				СписокДействий.ВыборПоВладельцу = Результат.Значение.Значение;
				ЭлементСписка.Представление = СтароеПредставление;
				
			КонецЕсли;
			
		ИначеЕсли ТипВыбора = "Категория" Тогда
			
			СписокЗначенийВыбора = Новый СписокЗначений;
			Для каждого КлючИЗначение Из мСформированныйРежим.СтруктураКатегорий Цикл
				СписокЗначенийВыбора.Добавить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			КонецЦикла; 
			
			Результат = СписокЗначенийВыбора.ВыбратьЭлемент("Выбор категории");
			Если Не Результат = Неопределено Тогда
				
				ЭлементСписка.Представление = "Изменить категорию["+Результат.Представление+"]";
				
				СписокДействий = ВыбранноеЗначение;
				СписокДействий.ТекущееПредставление = ЭлементСписка.Представление;
				СписокДействий.Имя = Результат.Значение;
				СписокДействий.ПолеНастройки = ПостроительЗапроса.ДоступныеПоля.Найти(Результат.Значение);
				
				ЭлементСписка.Представление = СтароеПредставление;
				
			КонецЕсли; 
		Иначе
			
			ТипВыбора = "Прочее";
		КонецЕсли; 
		
	Иначе
		
		СписокДействий = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Если ТипВыбора = "Прочее" Тогда
		СписокДействий = ВыбранноеЗначение;
		Если ТипЗНЧ(ВыбранноеЗначение.СписокВыбора) = Тип("СписокЗначений") Тогда
			
			ЭлементыФормы.ПолеВводаДействия.РежимВыбораИзСписка = Истина;
			ЭлементыФормы.ПолеВводаДействия.СписокВыбора        = ВыбранноеЗначение.СписокВыбора.Скопировать();
			Если ВыбранноеЗначение.СписокВыбора.Количество()>0 Тогда
				ПолеВводаДействия = ВыбранноеЗначение.СписокВыбора[0].Значение;
			Иначе
				ПолеВводаДействия = Неопределено;
			КонецЕсли;
			ЭлементыФормы.ПолеВводаДействия.КнопкаВыбора  = Ложь;
			ЭлементыФормы.ПолеВводаДействия.КнопкаОчистки = Ложь;
			
		Иначе
			
			ЭлементыФормы.ПолеВводаДействия.РежимВыбораИзСписка = Ложь;
			ЭлементыФормы.ПолеВводаДействия.КнопкаВыбора  = Истина;
			ЭлементыФормы.ПолеВводаДействия.КнопкаОчистки = Ложь;
			
			ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа = СписокДействий.СписокВыбора;
			ЭлементыФормы.ПолеВводаДействия.Значение = ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.ПолеВводаДействия.Значение);
			ЭлементыФормы.ПолеВводаДействия.ВыбиратьТип = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ПолеВводаДействия.РежимВыбораИзСписка = Ложь;
		ЭлементыФормы.ПолеВводаДействия.КнопкаВыбора  = Истина;
		ЭлементыФормы.ПолеВводаДействия.КнопкаОчистки = Истина;
		
		Если Не Результат = Неопределено И Не СписокДействий = Неопределено и СписокДействий.Свойство("ПолеНастройки") Тогда
			
			Если ТипВыбора = "Свойство" Тогда
				ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа = мСформированныйРежим.СтруктураСвойств[СписокДействий.Имя].ТипЗначения;
				ЭлементыФормы.ПолеВводаДействия.ВыборПоВладельцу = СписокДействий.ВыборПоВладельцу;
			ИначеЕсли ТипВыбора = "Категория" Тогда
				
				ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа = Новый ОписаниеТипов("Булево");
				
			Иначе
				 
				ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа = СписокДействий.ПолеНастройки.ТипЗначения;
			КонецЕсли; 
			
			ЭлементыФормы.ПолеВводаДействия.Значение = ЭлементыФормы.ПолеВводаДействия.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.ПолеВводаДействия.Значение);
			ЭлементыФормы.ПолеВводаДействия.ВыбиратьТип = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	УстановитьВидимостьКолонокГрупповойОбработкиСправочников();
КонецПроцедуры

Процедура ВыполнитьНажатие(Элемент)
	
	Если СписокДействий = Неопределено Тогда
		Предупреждение("Не выбрано действие для выполнения"); 
		Возврат;
	КонецЕсли; 
	
	
	Ответ = Вопрос("Выполнить """ + СписокДействий.ТекущееПредставление+ """?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПолеНастройки = Неопределено;
	ПутьКДанным = ?(СписокДействий.Свойство("ПолеНастройки",ПолеНастройки) И Не ПолеНастройки = Неопределено,ПолеНастройки.ПутьКДанным,Неопределено);
	ИмяПоляРеквизита1 = ПутьКДанным;
	
	ПозТЧК = Найти(ИмяПоляРеквизита1,".");
	Если Не ПозТЧК = 0 Тогда
		ИмяРеквизита2     = Сред(ИмяПоляРеквизита1,ПозТЧК+1);
		ИмяПоляРеквизита1 = Лев(ИмяПоляРеквизита1,ПозТЧК-1);
	Иначе
		ИмяРеквизита2 = Неопределено;
	КонецЕсли; 
	ИмяРеквизита1 = Сред(ИмяПоляРеквизита1,3);
	
	ЭтоДействиеСШапкой           = (ПутьКДанным = Неопределено) Или Не Лев(ПутьКДанным,2) = "Т_";
	ЭтоДействиеПроведение        = ИмяРеквизита2 = "Проведен"         или ИмяРеквизита2 = Неопределено и ИмяРеквизита1 = "Проведен";
	ЭтоДействиеПометкаНаУдаление = ИмяРеквизита2 = "ПометкаУдаления"  или ИмяРеквизита2 = Неопределено и ИмяРеквизита1 = "ПометкаУдаления";
	УстанавливатьРеквизит        = Не ЭтоДействиеПометкаНаУдаление и Не ЭтоДействиеПроведение;
	ЕстьКолонкаДанных            = Не ТаблицаДанных.Колонки.Найти(СписокДействий.Имя) = Неопределено;
	
	МассивСсылок          = Новый Массив;
	
	ПрошлаяСсылка  = Неопределено;
	ПрошлаяПометка = Ложь;
	Для Каждого СтрокаДанных ИЗ ТаблицаДанных Цикл
		Ш_Ссылка = СтрокаДанных.Ш_Ссылка;
		Если ПрошлаяСсылка <> Ш_Ссылка Тогда
			
			ПрошлаяПометка = СтрокаДанных.Пометка;
			Если ПрошлаяПометка Тогда
				МассивСсылок.Добавить(Ш_Ссылка);
			КонецЕсли;
			ПрошлаяСсылка  = Ш_Ссылка;
		ИначеЕсли ЭтоДействиеСШапкой И ПрошлаяПометка <> СтрокаДанных.Пометка Тогда
			
			Предупреждение("Найдены противоречивые отметки");
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	Сообщить("Выполняемое действие: " + СписокДействий.ТекущееПредставление, СтатусСообщения.Информация);
	Если Не Лев(СписокДействий.Имя,1) = "П" Тогда
		Сообщить("Новое значение: " + ПолеВводаДействия, СтатусСообщения.Обычное);
	ИначеЕсли Не ПолеВводаДействия = Неопределено Тогда
		Сообщить("Режим: " + ПолеВводаДействия, СтатусСообщения.Обычное);
	КонецЕсли;
	Сообщить("-----------------------------------------------------------", СтатусСообщения.БезСтатуса);
	
	ИндикаторОбработки = 0;
	ЭлементыФормы.ИндикаторОбработки.МаксимальноеЗначение = МассивСсылок.Количество();
	
	Если СписокДействий.Имя = "П_ПечатьДокументов"  Тогда
		
		Если ПолеВводаДействия = "Реестр документов" Тогда
			ПечатьРеестра(МассивСсылок, ИндикаторОбработки);
		ИначеЕсли ПолеВводаДействия = "Печать без предварительного просмотра" Тогда
			ПечатьДокументов(МассивСсылок,Истина)
		ИначеЕсли ПолеВводаДействия = "Печать с предварительным просмотром" Тогда
			ПечатьДокументов(МассивСсылок,Ложь)
		КонецЕсли; 
		Возврат;
		
	КонецЕсли;
	
	Если СписокДействий.Имя = "П_ПечатьЦенников" Тогда
		НапечататьЦенникИзОбработки(МассивСсылок);
		Возврат;
	КонецЕсли;
	
	Если СписокДействий.Имя =  "П_ПечатьЭтикеток" Тогда
		НапечатьЭтикеткиИзОбработкиЭтикеток(МассивСсылок);
		Возврат;
	КонецЕсли;
	
	Если СписокДействий.Имя = "П_ДоступнаВВебПриложенииУпрЗаказами" Тогда
		
		Запретить = Истина;
		
		Если ПолеВводаДействия = "Разрешить" Тогда
			Запретить = Ложь;
		КонецЕсли;
		
		ИзменитьДоступностьВВебПриложенииНоменклатуры(МассивСсылок, Запретить);
		
		ТаблицаДанных = ПостроительЗапроса.ПолучитьЗапрос().Выполнить().Выгрузить();
		
		ТаблицаДанных.Колонки.Вставить(0,"Пометка",ОписаниеТипаБулево);
		ТаблицаДанных.Индексы.Добавить("Пометка");
		ТаблицаДанных.ЗаполнитьЗначения(Истина, "Пометка");
		
		Возврат;
		
	КонецЕсли;
	
	
	ТипВыбора = Неопределено;
	
	СписокДействий.Свойство("ЭтоВыбор",ТипВыбора);
	Если ТипВыбора = "Свойство" Тогда
		
		НачатьТранзакцию();
		
		Если Не ИзменениеСвойстваОбъектов(МассивСсылок) Тогда
			ОткатТранзакции();
			Возврат;
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		Сообщить("-----------------------------------------------------------", СтатусСообщения.БезСтатуса);
		Сообщить("Выполнение обработки завершено", СтатусСообщения.БезСтатуса);
		Возврат;
	КонецЕсли;
	

	Если ТипВыбора = "Категория" Тогда
		
		НачатьТранзакцию();
		
		Если Не УстановкаКатегорииОбъектов(МассивСсылок) Тогда
			ОткатТранзакции();
			Возврат;
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		Сообщить("-----------------------------------------------------------", СтатусСообщения.БезСтатуса);
		Сообщить("Выполнение обработки завершено", СтатусСообщения.БезСтатуса);
		Возврат;
		
	КонецЕсли;
	
	МассивПомеченныхСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("Пометка",Истина));
	ПрошлаяСсылка  = Неопределено;
	Объект = Неопределено;
	СоответствиеОбъектов = Новый Соответствие;
	
	ЭлементыФормы.ИндикаторОбработки.МаксимальноеЗначение = МассивПомеченныхСтрок.Количество();
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Если ИмяРеквизита2 = Неопределено Тогда
		МассивПомеченныхСтрок.Добавить(Неопределено);
		Для Каждого СтрокаДанных ИЗ МассивПомеченныхСтрок Цикл
			Ссылка = ?(СтрокаДанных = Неопределено, Неопределено, СтрокаДанных.Ш_Ссылка);
			Если ПрошлаяСсылка <> Ссылка Тогда
				Если Не ПрошлаяСсылка = Неопределено Тогда
					Попытка
						
						Если ЭтоДействиеПроведение Тогда
							
							Если ПолеВводаДействия Тогда
								Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							Иначе
								Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
							
						ИначеЕсли ЭтоДействиеПометкаНаУдаление Тогда
							Объект.УстановитьПометкуУдаления(ПолеВводаДействия);
							
						Иначе
							
							Объект.Записать();
							
						КонецЕсли;
						Сообщить(""+ПрошлаяСсылка);
						СоответствиеОбъектов.Вставить(ПрошлаяСсылка,Истина);
					Исключение
						СоответствиеОбъектов.Вставить(ПрошлаяСсылка,Ложь);
						ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
						Сообщить(""+ ПрошлаяСсылка + " - " + ОписаниеОшибки, СтатусСообщения.Важное);
						
						Если ВыполнятьВТранзакции Тогда
							ОткатТранзакции();
							Возврат;
						КонецЕсли;
					КонецПопытки;
					
				КонецЕсли;
				
				Если Ссылка = Неопределено Тогда
					Прервать;
				КонецЕсли;
				 
				Объект = Ссылка.ПолучитьОбъект();
				ПрошлаяСсылка  = Ссылка;
				СсылкаВстречаетсяВпервыйРаз = Истина;
			Иначе
				СсылкаВстречаетсяВпервыйРаз = Ложь;
			КонецЕсли;
			
			Попытка
				
				Если ЭтоДействиеСШапкой и УстанавливатьРеквизит И СсылкаВстречаетсяВпервыйРаз Тогда
					Объект[ИмяРеквизита1] = ПолеВводаДействия;	
				КонецЕсли;
				
				Если Не ЭтоДействиеСШапкой и УстанавливатьРеквизит Тогда
					Объект[СтрокаДанных.Т_ТЧ][СтрокаДанных.Т_НомерСтроки-1][ИмяРеквизита1] = ПолеВводаДействия;
				КонецЕсли; 
				
			Исключение
				ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
				Сообщить(""+ПолучитьПредставлениеОбъекта(СтрокаДанных) + " - " + ОписаниеОшибки, СтатусСообщения.Важное);
				Если ВыполнятьВТранзакции Тогда
					ОткатТранзакции();
					Возврат;
				КонецЕсли;
			КонецПопытки; 
			
			ИндикаторОбработки = ИндикаторОбработки + 1;
			
		КонецЦикла; 
	Иначе
		Для Каждого СтрокаДанных ИЗ МассивПомеченныхСтрок Цикл
			Ш_Ссылка = ?(СтрокаДанных = Неопределено, Неопределено, СтрокаДанных.Ш_Ссылка);
			
			Если ЭтоДействиеСШапкой Тогда
				Ссылка = Ш_Ссылка[ИмяРеквизита1];
			Иначе
				Ссылка = Ш_Ссылка[СтрокаДанных.Т_ТЧ][СтрокаДанных.Т_НомерСтроки-1][ИмяРеквизита1];
			КонецЕсли;
			
			Если Ссылка = Неопределено или Ссылка.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СоответствиеОбъектов[Ссылка] = Неопределено Тогда
				Попытка
					
					Объект = Ссылка.ПолучитьОбъект();
					
					Если ЭтоДействиеПроведение Тогда
						
						Если ПолеВводаДействия Тогда
							Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						Иначе
							Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						КонецЕсли;
						
					ИначеЕсли ЭтоДействиеПометкаНаУдаление Тогда
						
						Объект.УстановитьПометкуУдаления(ПолеВводаДействия);
					Иначе
						Объект[ИмяРеквизита2] = ПолеВводаДействия;
						Объект.Записать();
					КонецЕсли;
					Сообщить(""+Ссылка);
					СоответствиеОбъектов.Вставить(Ссылка,Истина);
					
				Исключение
					СоответствиеОбъектов.Вставить(Ссылка,Ложь);
					ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
					Сообщить(""+ПолучитьПредставлениеОбъекта(СтрокаДанных) + " - " + ОписаниеОшибки, СтатусСообщения.Важное);
					
					Если ВыполнятьВТранзакции Тогда
						ОткатТранзакции();
						Возврат;
					КонецЕсли;
					
				КонецПопытки;
			КонецЕсли;
				
			ИндикаторОбработки = ИндикаторОбработки + 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Не ТаблицаДанных.Колонки.Найти(СписокДействий.Имя) = Неопределено Тогда
		Для Каждого СтрокаДанных ИЗ ТаблицаДанных Цикл
			
			
			Если ИмяРеквизита2 = Неопределено Тогда
				Ссылка = СтрокаДанных.Ш_Ссылка;
				Результат = СоответствиеОбъектов[Ссылка];
				
				Если Не Результат = Неопределено И Не Результат = Ложь Тогда
					
					Если ЭтоДействиеСШапкой Тогда
						
						СтрокаДанных[СписокДействий.Имя] = Ссылка[ИмяРеквизита1];
						
					Иначе
						
						СтрокаДанных[СписокДействий.Имя] = Ссылка[СтрокаДанных.Т_ТЧ][СтрокаДанных.Т_НомерСтроки-1][ИмяРеквизита1];
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			Иначе
				Ссылка = СтрокаДанных[ИмяПоляРеквизита1];
				Результат = СоответствиеОбъектов[Ссылка];
				
				Если Не Результат = Неопределено И Не Результат = Ложь Тогда
					СтрокаДанных[СписокДействий.Имя] = Ссылка[ИмяРеквизита2];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Сообщить("-----------------------------------------------------------", СтатусСообщения.БезСтатуса);
	Сообщить("Выполнение обработки завершено", СтатусСообщения.БезСтатуса);
	
КонецПроцедуры

Процедура ОткатТранзакции()
	
	ОтменитьТранзакцию();
	Сообщить("Отмена транзакции. Действие не выполнено!", СтатусСообщения.Важное);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличноеПолеВидыОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование)
	ОткрытьФормуВыбораТаблицы();
	Отказ = Истина;
КонецПроцедуры

Процедура ТабличноеПолеВидыОбъектовПередНачаломИзменения(Элемент, Отказ)
	ОткрытьФормуВыбораТаблицы();
	Отказ = Истина;
КонецПроцедуры

Процедура ТабличноеПолеВидыОбъектовПослеУдаления(Элемент)
	
	Если ОчищатьРезультаты() Тогда
		ИнициализацияЗапроса();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТабличноеПолеВидыОбъектовПередУдалением(Элемент, Отказ)
	Если Не ОчищатьРезультаты() Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ТабличноеПолеОтборПередНачаломИзменения(Элемент, Отказ)
	Отказ = Не ОчищатьРезультаты();
КонецПроцедуры

Процедура ТабличноеПолеОтборПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Не ОчищатьРезультаты();
КонецПроцедуры

Процедура ТабличноеПолеДанныхВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	//Если Колонка.Имя = "Ш_Ссылка" Тогда
		ВыбраннаяСтрока.Ш_Ссылка.ПолучитьФорму().Открыть();
	//КонецЕсли; 
КонецПроцедуры

Процедура ТабличноеПолеДанныхПриИзмененииФлажка(Элемент, Колонка)
	ДанныеФлажка = Колонка.ДанныеФлажка;
	Если Не ДанныеФлажка = "Пометка" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные[ДанныеФлажка] = Не ТекущиеДанные[ДанныеФлажка];
	КонецЕсли; 
КонецПроцедуры

Процедура КоманднаяПанельТабличногоПоляДанныхУстановитьФлажки(Кнопка)
	Для каждого Строка Из ТаблицаДанных Цикл
		Строка.Пометка = Истина;
	КонецЦикла; 
КонецПроцедуры

Процедура КоманднаяПанельТабличногоПоляДанныхСнятьФлажки(Кнопка)
	Для каждого Строка Из ТаблицаДанных Цикл
		Строка.Пометка = Ложь;
	КонецЦикла; 
КонецПроцедуры




ВКонфигурацииЕстьКатегории = Не Метаданные.Справочники.Найти("КатегорииОбъектов")           = Неопределено;
ВКонфигурацииЕстьСвойства  = Не Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") = Неопределено;

