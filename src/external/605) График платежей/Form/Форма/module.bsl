Перем ДанныеРасшифровки;
перем КомпоновщикМакета;
перем СхемаКомпоновкиДанных;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель3УстановитьРС(Кнопка)
ТекСтрБанк = ЭлементыФормы.РасчетныеСчета.ТекущиеДанные;	
текБанк = ТекСтрБанк.РасчетныйСчет;	

ответ = Вопрос("В выбранных заявках буден установлен рассчетный счет "+текБанк+". Продолжить?",РежимДиалогаВопрос.ДаНет,0);
Если Ответ = КодВозвратаДиалога.Да Тогда
Для каждого стр из РаспределениеЗаявок Цикл
	Если стр.Пометка Тогда
		Заявка = стр.Заявка.ПолучитьОбъект();
		СтрокаЗаявка = Заявка.РасшифровкаПлатежа.Найти(стр.НомерСтрокивЗаявке,"НомерСтроки");
		СтрокаЗаявка.РасчетныйСчетКомпании = текБанк;
		Заявка.Записать();
		стр.РасчетныйСчет = текБанк;
		стр.Пометка = Ложь;
	конецЕсли;	
конецЦикла;	
	ЗаполнитьДанныеПоБанку();
конецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель2Заполнить(Кнопка)
ЗаполнитьЗаявки();	

Список = Новый СписокЗначений;
Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));  //гонконг
Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));//турция
Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00170"));//фап
Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00171"));//шинтрейд

ЭлементыФормы.Заявки.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.НеВСписке;
ЭлементыФормы.Заявки.ОтборСтрок.Подразделение.Значение = Список;
ЭлементыФормы.Заявки.ОтборСтрок.Подразделение.Использование = Истина;
ЭлементыФормы.Заявки.ОтборСтрок.ФормаОплаты.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки.ОтборСтрок.Формаоплаты.Значение = Перечисления.ВидыДенежныхСредств.Безналичные;
ЭлементыФормы.Заявки.ОтборСтрок.ФормаОплаты.Использование = Истина;

ЭлементыФормы.Заявки1.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.НеВСписке;
ЭлементыФормы.Заявки1.ОтборСтрок.Подразделение.Значение = Список;
ЭлементыФормы.Заявки1.ОтборСтрок.Подразделение.Использование = Истина;
ЭлементыФормы.Заявки1.ОтборСтрок.ФормаОплаты.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки1.ОтборСтрок.Формаоплаты.Значение = Перечисления.ВидыДенежныхСредств.Наличные;
ЭлементыФормы.Заявки1.ОтборСтрок.ФормаОплаты.Использование = Истина;

ЭлементыФормы.Заявки2.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки2.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
ЭлементыФормы.Заявки2.ОтборСтрок.Подразделение.Использование = Истина;

ЭлементыФормы.Заявки3.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки3.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
ЭлементыФормы.Заявки3.ОтборСтрок.Подразделение.Использование = Истина;

ЭлементыФормы.Заявки4.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки4.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00171");
ЭлементыФормы.Заявки4.ОтборСтрок.Подразделение.Использование = Истина;

ЭлементыФормы.Заявки5.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.Заявки5.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00170");
ЭлементыФормы.Заявки5.ОтборСтрок.Подразделение.Использование = Истина;


КонецПроцедуры

процедура ЗаполнитьЗаявки()
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачПериода));				   
			Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонПериода));
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование КАК Заявка,
			               |	ВЫБОР
			               |		КОГДА ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику)
			               |			ТОГДА ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Получатель
			               |		ИНАЧЕ ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Контрагент
			               |	КОНЕЦ КАК Контрагент,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.СуммаДокумента КАК Сумма,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Ответственный КАК Ответственный,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Состояние КАК Состояние,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Подразделение КАК Подразделение,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.ВидОперации КАК ВидОперации,
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.ФормаОплаты как ФормаОплаты
			               |ИЗ
			               |	РегистрНакопления.ЗаявкиНаРасходованиеСредств КАК ЗаявкиНаРасходованиеСредств
			               |ГДЕ
			               |	ЗаявкиНаРасходованиеСредств.ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон
			               |	И (ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Подготовлен)
			               |			ИЛИ ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Согласован)
			               |			ИЛИ ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Утвержден))
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ЗаявкиНаРасходованиеСредств.ЗаявкаНаРасходование.Состояние УБЫВ,
			               |	Контрагент
			               |АВТОУПОРЯДОЧИВАНИЕ";
		//				   Если ФормаОплаты = "Безналичные" Тогда
		//					   Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ВидыДенежныхСредств.Безналичные);
		//				   иначе	   
		//					   Запрос.УстановитьПараметр("ФормаОплаты",Перечисления.ВидыДенежныхСредств.Наличные);
		//				   конецЕсли;
		Заявки.Загрузить(Запрос.Выполнить().Выгрузить());
	конецПроцедуры
	
	Процедура КоманднаяПанель2УтвердитьВыбранные(Кнопка)
	Для каждого СтрокаТабличнойЧасти Из Заявки Цикл
			Если РольДоступна("яштФинДиректор") Тогда
				Если СтрокаТабличнойЧасти.Пометка И НЕ СтрокаТабличнойЧасти.Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
					ЗаявкаОбъект = СтрокаТабличнойЧасти.Заявка.ПолучитьОбъект();
					ЗаявкаОбъект.Состояние = Перечисления.СостоянияОбъектов.Утвержден;
					ЗаявкаОбъект.Утвердил = ПараметрыСеанса.ТекущийПользователь; 
					ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗаявки();

КонецПроцедуры

Процедура КоманднаяПанель2Действие(Кнопка)
	
	Если ЭлементыФормы.ПанельУтверждений.ТекущаяСтраница.имя = "Страница1" Тогда
		нужнаяТаблица = ЭлементыФормы.Заявки;
	иначеЕсли ЭлементыФормы.ПанельУтверждений.ТекущаяСтраница.имя = "Страница2" Тогда	
		нужнаяТаблица = ЭлементыФормы.Заявки1;
	иначеЕсли ЭлементыФормы.ПанельУтверждений.ТекущаяСтраница.имя = "Страница3" Тогда	
		нужнаяТаблица = ЭлементыФормы.Заявки2;
	иначеЕсли ЭлементыФормы.ПанельУтверждений.ТекущаяСтраница.имя = "Страница4" Тогда	
		нужнаяТаблица = ЭлементыФормы.Заявки3;
	
	конецЕсли;	
	
	Для каждого стр из Заявки цикл
		Если НужнаяТаблица.ПроверитьСтроку(стр) и стр.Состояние <> Перечисления.СостоянияОбъектов.Утвержден Тогда
			стр.Пометка = Истина;	
		конецЕсли;
	конецЦикла;	
	
	
	
КонецПроцедуры

Процедура КоманднаяПанель2Действие1(Кнопка)
	Для каждого стр из Заявки цикл
	стр.Пометка = ложь;	
	конецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанель3УстановитьФлажки(Кнопка)
	Если ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница1" Тогда
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница2" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок1;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница3" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок2;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ФАП" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок3;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ШТЯ" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок4;
	конецЕсли;	
	
	Для каждого стр из РаспределениеЗаявок цикл
		Если НужнаяТаблица.ПроверитьСтроку(стр) и стр.УжеОплачено=Ложь Тогда
			стр.Пометка = Истина;	
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанель3СнятьФлажки(Кнопка)
	Если ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница1" Тогда
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница2" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок1;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница3" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок2;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ФАП" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок3;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ШТЯ" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок4;
	конецЕсли;	
	
	Для каждого стр из РаспределениеЗаявок цикл
		Если НужнаяТаблица.ПроверитьСтроку(стр) и стр.УжеОплачено=Ложь Тогда
			стр.Пометка = Ложь;	
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Процедура КоманднаяПанель3Инвертировать(Кнопка)
	Если ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница1" Тогда
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница2" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок1;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница3" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок2;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ФАП" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок3;
	иначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ШТЯ" Тогда	
		нужнаяТаблица = ЭлементыФормы.РаспределениеЗаявок4;
	конецЕсли;	
	
	Для каждого стр из РаспределениеЗаявок цикл
		Если НужнаяТаблица.ПроверитьСтроку(стр)и стр.УжеОплачено=Ложь Тогда
			стр.Пометка = не стр.Пометка;	
		конецЕсли;
	конецЦикла;	
                      
КонецПроцедуры

процедура ЗаполнитьДанныеПоБанку()
		 /// Заполним банковские счета и остатки
		 
	СписокОрганизаций = новый СписокЗначений;
	СписокОрганизаций.добавить(Справочники.Организации.НайтиПоКоду("00001"));
	СписокОрганизаций.добавить(Справочники.Организации.НайтиПоКоду("00005"));
	СписокОрганизаций.добавить(Справочники.Организации.НайтиПоКоду("00006"));
		 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка
		|ПОМЕСТИТЬ Счета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец В(&ЯШТ)
		|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.РасчетныйСчетКомпании,
		|	СУММА(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК Сумма
		|ПОМЕСТИТЬ СуммыВЗаявках
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&ДатаНач1, ) КАК ЗаявкиНаРасходованиеСредствОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ПО ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка
		|			И (ЗаявкиНаРасходованиеСредствОстатки.Сделка = ВЫБОР
		|				КОГДА ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка.Представление ЕСТЬ NULL 
		|					ТОГДА НЕОПРЕДЕЛЕНО
		|				ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка
		|			КОНЕЦ)
		|			И ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.РасчетныйСчетКомпании <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.РасчетныйСчетКомпании
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.БанковскийСчетКасса, Счета.Ссылка) КАК РасчетныйСчет,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) КАК ОстатокНаСчете,
		|	СуммыВЗаявках.Сумма КАК СуммаВЗаявках,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.БанковскийСчетКасса.Владелец, Счета.Ссылка.Владелец) КАК Организация,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) - ЕСТЬNULL(СуммыВЗаявках.Сумма, 0) КАК ОстатокПослеОплаты,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.БанковскийСчетКасса.Подразделение, Счета.Ссылка.Подразделение) КАК Подразделение
		|ИЗ
		|	Счета КАК Счета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(
		|				&ДатаНач,
		|				ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.видыДенежныхСредств.Безналичные)
		|					И БанковскийСчетКасса В
		|						(ВЫБРАТЬ
		|							Счета.Ссылка
		|						ИЗ
		|							Счета КАК Счета)) КАК ДенежныеСредстваОстатки
		|		ПО (ДенежныеСредстваОстатки.БанковскийСчетКасса = Счета.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыВЗаявках КАК СуммыВЗаявках
		|		ПО (СуммыВЗаявках.РасчетныйСчетКомпании = Счета.Ссылка)
		|ГДЕ
		|	(ДенежныеСредстваОстатки.СуммаОстаток > 0
		|			ИЛИ Счета.Ссылка = &Сбербанк)";

	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ЯШТ", СписокОрганизаций);
	Запрос.УстановитьПараметр("Сбербанк", Справочники.БанковскиеСчета.НайтиПоКоду("00334"));
    Запрос.УстановитьПараметр("ДатаНач1",НачПериодаРаспр+1);
    Запрос.УстановитьПараметр("ДатаНач",НачПериодаРаспр);
	Запрос.УстановитьПараметр("ДатаКон",КонецДНя(КонПериодаРаспр));	

	РасчетныеСчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
конецПроцедуры
процедура ЗаполнитьЗаявкиКРаспределению()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка КАК Заявка,
		|	ЕСТЬNULL(ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.ДоговорКонтрагента.Владелец, ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.Контрагент) КАК Контрагент,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.Подразделение,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Сделка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.СуммаВзаиморасчетов КАК Сумма,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.РасчетныйСчетКомпании КАК РасчетныйСчет,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.ДатаРасхода КАК ДатаРасхода,
		|	ЗаявкиНаРасходованиеСредствОстаткиНач.ЗаявкаНаРасходование,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.НомерСтроки КАК номерСтрокиВЗаявке,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.Ответственный,
		|	ВЫБОР
		|		КОГДА ЗаявкиНаРасходованиеСредствОстаткиКон.ЗаявкаНаРасходование ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УжеОплачено
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, 1), ) КАК ЗаявкиНаРасходованиеСредствОстаткиНач
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач
		|		ПО ЗаявкиНаРасходованиеСредствОстаткиНач.ЗаявкаНаРасходование = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка
		|			И (ЗаявкиНаРасходованиеСредствОстаткиНач.Сделка = ВЫБОР
		|				КОГДА ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Сделка.Представление ЕСТЬ NULL 
		|					ТОГДА НЕОПРЕДЕЛЕНО
		|				ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Сделка
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщикускодомКБК)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЗаявкиНаРасходованиеСредствОстаткиНач.ДоговорКонтрагента = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.ДоговорКонтрагента
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&ДатаКон, ) КАК ЗаявкиНаРасходованиеСредствОстаткиКон
		|		ПО ЗаявкиНаРасходованиеСредствОстаткиНач.ЗаявкаНаРасходование = ЗаявкиНаРасходованиеСредствОстаткиКон.ЗаявкаНаРасходование
		|			И ЗаявкиНаРасходованиеСредствОстаткиНач.Сделка = ЗаявкиНаРасходованиеСредствОстаткиКон.Сделка
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Утвержден)
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежаНач.Ссылка.ВалютаДокумента = &ВалютаДокумента
		|	И ЗаявкиНаРасходованиеСредствОстаткиНач.ЗаявкаНаРасходование.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Безналичные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	УжеОплачено,
		|	ДатаРасхода,
		|	Заявка";

	Запрос.УстановитьПараметр("ДатаНач",НачПериодаРаспр);
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(КонПериодаРаспр));
	Запрос.УстановитьПараметр("ВалютаДокумента",Валюта);

	РаспределениеЗаявок.Загрузить(Запрос.Выполнить().Выгрузить());

	
конецПроцедуры	



Процедура ВыбПериодНажатие1(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаРаспр, ?(КонПериодаРаспр='0001-01-01', КонПериодаРаспр, КонецДня(КонПериодаРаспр)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаРаспр = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаРаспр = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель3Заполнить(Кнопка)
	ЗаполнитьДанныеПоБанку();
    ЗаполнитьЗаявкиКРаспределению();
    УстановитьОтборыРаспределение();
	ЗаполнитьБанки();
КонецПроцедуры

Процедура ПриОткрытии() 

	соответствие = Константы.СоответствиеБанков.Получить().Получить();
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ФормаОплаты = "Безналичные";
	ДатаРасхода = НачалоДня(текущаяДата());
	НачПериодаРаспр = НачалоДня(текущаяДата());
	КонПериодаРаспр = КонецДня(текущаяДата());
	НачПериода = НачалоДня(текущаяДата());
	КонПериода = КонецДня(текущаяДата());
	НачПериодаСвод = НачалоДня(текущаяДата());
	КонПериодаСвод = КонецДня(текущаяДата());

	НачПериода2 = НачалоДня(текущаяДата());
	КонПериода2 = КонецДня(текущаяДата());

    КоманднаяПанель2Заполнить(истина);
//	Соответствие = новый ТаблицаЗначений;
	Если Соответствие.Колонки.Количество() =0 Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив,,);

		
		Соответствие.Колонки.Добавить("БИК",ОписаниеТиповС);
		Соответствие.Колонки.Добавить("КодРС",ОписаниеТиповС);
	конецесли;	
	
КонецПроцедуры

Процедура РасчетныеСчетаПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого  строка из ОформленияСтрок Цикл
		Если строка.данныеСтроки.СуммаВЗаявках > строка.данныеСтроки.ОстатокНаСчете тогда
		строка.ЦветТекста = WebЦвета.Красный;	
		конецЕсли;
	конецЦикла;	
КонецПроцедуры

Процедура ЗаявкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель4Заполнить(Кнопка)
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка КАК Заявка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Подразделение,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода КАК ДатаРасхода,
		|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.НомерСтроки КАК номерСтрокиВЗаявке,
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.ВидОперации
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки КАК ЗаявкиНаРасходованиеСредствОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
		|		ПО ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка
		|			И ЗаявкиНаРасходованиеСредствОстатки.Сделка = ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка
		|ГДЕ
		|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДатаРасхода = &ДатаРасхода
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбъектов.Утвержден)
		|	И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.РасчетныйСчетКомпании = &РасчетныйСчетКомпании
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРасхода,
		|	Заявка";

	Запрос.УстановитьПараметр("ДатаРасхода",ДатаРасхода);
	Запрос.УстановитьПараметр("РасчетныйСчетКомпании",РасчетныйСчет);	
	ЗаявкиНаПП.Загрузить(Запрос.Выполнить().Выгрузить());


КонецПроцедуры

Процедура КоманднаяПанель4ВыделитьВсе(Кнопка)
	Для каждого стр из ЗаявкиНаПП цикл
	стр.Пометка = Истина;	
	конецЦикла;	

КонецПроцедуры

Процедура КоманднаяПанель4СнятьВсе(Кнопка)
	Для каждого стр из ЗаявкиНаПП цикл
	стр.Пометка = Ложь;	
	конецЦикла;	
КонецПроцедуры

Процедура ЗаявкиНаПППриПолученииДанных(Элемент, ОформленияСтрок)
	ОбновитьОбщуюСумму();
КонецПроцедуры

Процедура ОбновитьОбщуюСумму()
	Сумма=0;
	Для каждого стр из ЗаявкиНаПП цикл
		Если стр.Пометка Тогда
			Сумма = Сумма + стр.Сумма;
		конецЕсли;	
	конецЦикла;	
	ЭлементыФормы.ОбщаяСумма.Заголовок = "Выбрано заявок на сумму "+сумма+" "+Валюта.Наименование;
	
	
	
конецПроцедуры	

Процедура ВыбПериодНажатие2(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода2, ?(КонПериода2='0001-01-01', КонПериода2, КонецДня(КонПериода2)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода2 = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода2 = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьНажатие(Элемент)
	ЭлементыФормы.Результат.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.НачПериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НачПериода2;
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.КонПериода;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = КонецДня(КонПериода2);
    ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Валюта;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = Валюта;
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.ПериодПланирования;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НачалоМесяца(НачПериода2);
	
	//ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Подразделение;
	//ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	//
	//Если ЭлементыФормы.подразделение.Значение = 0 тогда
	//ПараметрСКД.Значение  = Справочники.Подразделения.ПустаяСсылка();
	//ИначеЕсли ЭлементыФормы.подразделение.Значение = 1 тогда
	//ПараметрСКД.Значение  = Справочники.Подразделения.НайтиПоКоду("00171"); //ФАП
	//ИначеЕсли ЭлементыФормы.подразделение.Значение = 2 тогда
	//ПараметрСКД.Значение  = Справочники.Подразделения.НайтиПоКоду("00170"); //штя
	//конецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,истина);
	ЭлементыФормы.Результат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ЭлементыФормы.Результат.ФиксацияСлева = 3;

КонецПроцедуры

Процедура ПанельРаспределениеПриСменеСтраницы(Элемент, ТекущаяСтраница)
		УстановитьОтборыРаспределение();
КонецПроцедуры

процедура  УстановитьОтборыРаспределение()

	Если ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница1" тогда
		Список = Новый СписокЗначений;
		Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00170"));
		Список.Добавить(Справочники.Подразделения.НайтиПоКоду("00171"));
	
		
		ЭлементыФормы.РаспределениеЗаявок.ОтборСтрок.подразделение.ВидСравнения = ВидСравнения.НеВСписке;
		ЭлементыФормы.РаспределениеЗаявок.ОтборСтрок.подразделение.Значение = Список;
		ЭлементыФормы.РаспределениеЗаявок.ОтборСтрок.подразделение.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Значение = Справочники.Организации.НайтиПоКоду("00001");
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.пустаяСсылка();
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Использование = Истина;
		
		
	ИначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница2" тогда
		ЭлементыФормы.РаспределениеЗаявок1.ОтборСтрок.подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РаспределениеЗаявок1.ОтборСтрок.подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
		ЭлементыФормы.РаспределениеЗаявок1.ОтборСтрок.подразделение.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Значение = Справочники.Организации.НайтиПоКоду("00005");
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Использование = Ложь;


	ИначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "Страница3" тогда
		ЭлементыФормы.РаспределениеЗаявок2.ОтборСтрок.подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РаспределениеЗаявок2.ОтборСтрок.подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
		ЭлементыФормы.РаспределениеЗаявок2.ОтборСтрок.подразделение.Использование = Истина;

		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Значение = Справочники.Организации.НайтиПоКоду("00006");
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Использование = Ложь;

		
	ИначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ФАП" тогда
		ЭлементыФормы.РаспределениеЗаявок3.ОтборСтрок.подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РаспределениеЗаявок3.ОтборСтрок.подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00171");
		ЭлементыФормы.РаспределениеЗаявок3.ОтборСтрок.подразделение.Использование = Истина;

		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Значение = Справочники.Организации.НайтиПоКоду("00001");
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00171"); //ФАП
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Использование = Истина;
		
		

	ИначеЕсли ЭлементыФормы.ПанельРаспределение.ТекущаяСтраница.имя = "ШТЯ" тогда
		ЭлементыФормы.РаспределениеЗаявок4.ОтборСтрок.подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РаспределениеЗаявок4.ОтборСтрок.подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00170");
		ЭлементыФормы.РаспределениеЗаявок4.ОтборСтрок.подразделение.Использование = Истина;

		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Значение = Справочники.Организации.НайтиПоКоду("00001");
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Организация.Использование = Истина;
		
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.ВидСравнения = ВидСравнения.Равно;
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00170"); //ШТЯ
		ЭлементыФормы.РасчетныеСчета.ОтборСтрок.Подразделение.Использование = Истина;

	конецЕсли;	
конецПроцедуры	

Процедура СоздатьПлатежныеПорученияНажатие(Элемент)
	табНужныхЗаявок = ЗаявкиНаПП.Выгрузить(новый структура("Пометка",истина));
	Если табНужныхЗаявок.Количество()>0 тогда
		табнужныхЗаявок.Сортировать("Заявка");
		текзаявка = "";
		ДокПП = Неопределено;
		для каждого стр из табНужныхЗаявок цикл
			Если текЗаявка<> стр.заявка тогда
				Если ДокПП<> неопределено тогда
				 ДокПП.записать();
				 форма = ДокПП.получитьФорму();
				 форма.открыть();
				конецЕсли;	
				текЗаявка=стр.заявка;
				ДокПП = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
				ДокПП.Дата = ТекущаяДата();
				ДокПП.ВидПлатежа = "Электронно";
				ДокПП.ОчередностьПлатежа = 5;
				ДокПП.ДатаОплаты = НачалоДня(ТекущаяДата());
				ДокПП.Оплачено = Истина;
				ДокПП.Заполнить(стр.заявка);
				ДокПП.Организация = расчетныйСчет.Владелец;
				ДокПП.СчетОрганизации = РасчетныйСчет;
				
				ДокПП.ИННПлательщика  = ДокПП.Организация.ИНН; 
				
				Если ДокПП.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
					ДокПП.КПППлательщика = ?(ЗначениеЗаполнено(стр.заявка.ПодразделениеКПП), стр.заявка.ПодразделениеКПП.КПП, ДокПП.Организация.КПП);
				Иначе
					ДокПП.КПППлательщика  = ДокПП.Организация.КПП;
				КонецЕсли;
				
				Если НЕ ДокПП.СчетОрганизации.Пустая() Тогда
					ДокПП.ТекстПлательщика  = ДокПП.СчетОрганизации.ТекстКорреспондента;
				Иначе	
					ДокПП.ТекстПлательщика  = "";
				КонецЕсли;
				
				Если НЕ ДокПП.Контрагент.Пустая() Тогда
					
					ДокПП.ИННПолучателя = ДокПП.Контрагент.ИНН;
					ДокПП.КПППолучателя = ДокПП.Контрагент.КПП;
					
					Если НЕ ДокПП.СчетКонтрагента.Пустая() Тогда
						ДокПП.ТекстПолучателя   = ДокПП.СчетКонтрагента.ТекстКорреспондента;
					Иначе	
						ДокПП.ТекстПолучателя   = "";
					КонецЕсли;
					
				Иначе
					
					ДокПП.ИННПолучателя = "";
					ДокПП.КПППолучателя = "";
					ДокПП.СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
					
				КонецЕсли;
				
				
				
				
				
				
				ДокПП.РасшифровкаПлатежа.Очистить();
				НужнаяСтрока = текЗаявка.расшифровкаПлатежа[стр.НомерСтрокивЗаявке-1];
				строка = ДокПП.РасшифровкаПлатежа.Добавить();
				 ЗаполнитьЗначениясвойств(строка,НужнаяСтрока);
				 строка.СуммаПлатежаПлан = Нужнаястрока.СуммаПлатежа;
				 строка.ДокументПланированияПлатежа = стр.заявка;
				 Если строка.СтавкаНДС = перечисления.СтавкиНДС.НДС18 тогда
				   строка.СуммаНДС = Окр(строка.СуммаПлатежа/118*18,2);	 
				 конецЕсли;	 
			 иначе	
				 НужнаяСтрока = текЗаявка.расшифровкаПлатежа[стр.НомерСтрокивЗаявке-1];
				 строка = ДокПП.РасшифровкаПлатежа.Добавить();
				 ЗаполнитьЗначениясвойств(строка,НужнаяСтрока);
				 строка.ДокументПланированияПлатежа = стр.заявка;
				 строка.СуммаПлатежа = стр.Сумма;
				 строка.СуммаПлатежаПлан = стр.Сумма;
                 строка.КурсВзаиморасчетовПлан = 1;
                 Если строка.СтавкаНДС = перечисления.СтавкиНДС.НДС18 тогда
				   строка.СуммаНДС = Окр(строка.СуммаПлатежа/118*18,2);	 
				 конецЕсли;	 
			конецЕсли;	
			
		конецЦикла;
		         СформироватьНазначениеПлатежа(ДокПП);
				 ДокПП.записать();
				 форма = ДокПП.получитьФорму();
				 форма.открыть();

	конецЕсли;
КонецПроцедуры

Процедура СформироватьНазначениеПлатежа(ДокПП)
	
	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ДокПП.ВидОперации);
	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ДокПП.ВидОперации);


	АдресСуммы=Найти(ДокПП.НазначениеПлатежа,"Сумма");
	
	Если АдресСуммы>0 Тогда
		ТекстНазначение=Лев(ДокПП.НазначениеПлатежа,АдресСуммы-2);
	Иначе
		ТекстНазначение=ДокПП.НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение="" И НЕ ДокПП.СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = ДокПП.СчетКонтрагента.ТекстНазначения;
	КонецЕсли;	

	ТекстСумма="Сумма " + Формат(ДокПП.СуммаДокумента, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00") + Символы.ПС;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабНДС=ДокПП.РасшифровкаПлатежа.Выгрузить();
		
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС цикл
			
			ТекстСумма = ТекстСумма + "НДС(" + ?(ЗначениеНеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+Символы.ПС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокПП.НазначениеПлатежа=ТекстНазначение+Символы.ПС+ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

процедура ЗаполнитьБанки()
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	РаспределениеЗаявок.Заявка
		|ПОМЕСТИТЬ Заявки
		|ИЗ
		|	&РаспределениеЗаявок КАК РаспределениеЗаявок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ЕСТЬNULL(Заявки.Заявка.БанковскийСчетКонтрагента.Банк.Код, "" "")КАК СТРОКА(9)) КАК БИК,
		|	ЕСТЬNULL(Заявки.Заявка.БанковскийСчетКонтрагента.Банк, "" "") КАК Банк
		|ПОМЕСТИТЬ ВЗаявках
		|ИЗ
		|	Заявки КАК Заявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Соответствие.Бик КАК СТРОКА(9))  КАК БИК,
		|	Соответствие.КодРС
		|ПОМЕСТИТЬ Соответствие
		|ИЗ
		|	&Соответствие КАК Соответствие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЗаявках.БИК,
		|	ВЗаявках.Банк,
		|	Соответствие.КодРС
		|ИЗ
		|	ВЗаявках КАК ВЗаявках
		|		ЛЕВОЕ СОЕДИНЕНИЕ Соответствие КАК Соответствие
		|		ПО ВЗаявках.БИК = Соответствие.Бик";
		
		
		Запрос.УстановитьПараметр("Соответствие",Соответствие);
		Запрос.УстановитьПараметр("РаспределениеЗаявок",РаспределениеЗаявок.Выгрузить());

		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		нужноПереключать = Ложь;
		Пока Выборка.Следующий() Цикл
		строка = СоответствиеБанков.Добавить();
		строка.Бик = Выборка.бик;
		строка.Банк = Выборка.Банк;
		Строка.РасчетныйСчетОрганизации = Справочники.БанковскиеСчета.НайтиПоКоду(Выборка.КодРС);
		Если не ЗначениеЗаполнено(Строка.РасчетныйСчетОрганизации)тогда
			нужноПереключать = Истина;
		конецЕсли;	
		КонецЦикла;
		Если нужноПереключать тогда
				Элементыформы.ПанельРаспределение.ТекущаяСтраница = Элементыформы.ПанельРаспределение.Страницы.Страница4;
		конецЕсли;	
конецПроцедуры

Процедура РаспределениеЗаявокПриПолученииДанных(Элемент, ОформленияСтрок)
	ОбновитьСуммуВыбрано();
	Если ЭлементыФормы.РаспределениеЗаявок.ОтборСтрок.подразделение.Использование=Ложь тогда
	 УстановитьОтборыРаспределение();	
	конецЕсли;	
КонецПроцедуры
Процедура ОбновитьСуммуВыбрано()
	Сумма=0;
	Для каждого стр из РаспределениеЗаявок цикл
		Если стр.Пометка Тогда
			Сумма = Сумма + стр.Сумма;
		конецЕсли;	
	конецЦикла;	
	ЭлементыФормы.СуммаВыбрано.Заголовок = "Выбрано заявок на сумму "+сумма+" "+Валюта.Наименование;
	
	
	
конецПроцедуры	

Процедура РаспределениеЗаявок1ПриПолученииДанных(Элемент, ОформленияСтрок)
		Если ЭлементыФормы.РаспределениеЗаявок1.ОтборСтрок.подразделение.Использование=Ложь тогда
	 УстановитьОтборыРаспределение();	
	конецЕсли;	

КонецПроцедуры

Процедура РаспределениеЗаявок2ПриПолученииДанных(Элемент, ОформленияСтрок)
		Если ЭлементыФормы.РаспределениеЗаявок2.ОтборСтрок.подразделение.Использование=Ложь тогда
	 УстановитьОтборыРаспределение();	
	конецЕсли;	

КонецПроцедуры

Процедура РаспределениеЗаявокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.УжеОплачено = Истина Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
		ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ЭлементыФормы.Панель1.ТекущаяСтраница.имя = "Страница1" тогда
	КоманднаяПанель2Заполнить(истина);
    ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница.имя = "Страница2" тогда
	КоманднаяПанель3Заполнить(истина);
	конецЕсли;
	

КонецПроцедуры

Процедура ВыбПериодНажатие3(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериодаСвод, ?(КонПериодаСвод='0001-01-01', КонПериодаСвод, КонецДня(КонПериодаСвод)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериодаСвод = НастройкаПериода.ПолучитьДатуНачала();
		КонПериодаСвод = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура КонПериодаСводПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура СформироватьСводНажатие(Элемент)
	ЭлементыФормы.РезультатСвод.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("СводОплат");
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.ДатаНач;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = НачПериодаСвод;
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.ДатаКон;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = КонецДня(КонПериодаСвод);
    ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Валюта;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = валюта;
    ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Сбербанк;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = Справочники.БанковскиеСчета.НайтиПоКоду("00334");
	
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Подразделение;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	
	Если ЭлементыФормы.подразделениеПлан.Значение = 0 тогда
	ПараметрСКД.Значение  = Справочники.Подразделения.ПустаяСсылка();
	ИначеЕсли ЭлементыФормы.подразделениеПлан.Значение = 1 тогда
	ПараметрСКД.Значение  = Справочники.Подразделения.НайтиПоКоду("00171"); //ФАП
	ИначеЕсли ЭлементыФормы.подразделениеПлан.Значение = 2 тогда
	ПараметрСКД.Значение  = Справочники.Подразделения.НайтиПоКоду("00170"); //штя
	конецЕсли;
	
	
	
	
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, );
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,,истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.РезультатСвод);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	СтандартнаяОбработка = Ложь;
	СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
	
	//Создадим и инициализируем обработчик расшифровки                    
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	
	ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
	ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
	Если  ЭлементРасшифровкиДанныхПоля.Поле = "Контрагент"  тогда
		// Добавляем собственные действия 
		Нов = Новый СписокЗначений;
		Нов.Добавить("Оборотная ведомость");
	конецЕсли;
	
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,Нов);
	
	// Обрабатываем собственные действия 
	Если ВыполненноеДействие = "Оборотная ведомость" Тогда
		ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
		ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
		контрагент = ЭлементРасшифровкиДанныхПоля.Значение;
		
		Если типзнч(Контрагент)= тип("СправочникСсылка.Контрагенты") тогда
			Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
			Отчет.ЗаполнитьНачальныеНастройки();
			ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
			ФормаОбработки.Открыть();
			Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
				СтрОтб.Использование = Ложь;	
			КонецЦикла;
			Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
			Иначе
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
			КонецЕсли; 
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Контрагент;
			СтрОтб.Использование = Истина;
			ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
			ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
			ФормаОбработки.ПостроительОтчета.Параметры.ДатаНач =НачПериода2; 
			ФормаОбработки.ПостроительОтчета.Параметры.ДатаКон = КонецДня(КонПериода2);
			ФормаОбработки.ОбщийОтчет.ДатаНач = НачПериода2;
			ФормаОбработки.ОбщийОтчет.ДатаКон = КонецДня(КонПериода2);
			
			ФормаОбработки.ОбновитьОтчет();
		иначе
			Отчет = Отчеты.ВедомостьВзаиморасчетыСПодотчетнымиЛицами.Создать();
			Отчет.ЗаполнитьНачальныеНастройки();
			ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
			ФормаОбработки.Открыть();
			Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
				СтрОтб.Использование = Ложь;	
			КонецЦикла;
			Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ФизЛицо") = Неопределено Тогда
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ФизЛицо");
			Иначе
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ФизЛицо");
			КонецЕсли; 
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Контрагент;
			СтрОтб.Использование = Истина;
			ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
			ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
			ФормаОбработки.ПостроительОтчета.Параметры.ДатаНач =НачПериода2; 
			ФормаОбработки.ПостроительОтчета.Параметры.ДатаКон = КонецДня(КонПериода2);
			ФормаОбработки.ОбщийОтчет.ДатаНач = НачПериода2;
			ФормаОбработки.ОбщийОтчет.ДатаКон = КонецДня(КонПериода2);
			ФормаОбработки.ОбновитьОтчет();
			
			
			
		конецЕсли;
	КонецЕсли;
	
	Если Настройки <> Неопределено Тогда
		ЭлементыФормы.Результат.Очистить();
		
		
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы[3];
		ПараметрСКД.Использование = истина;
		ПараметрСКД.Значение  = НачПериода2;
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы[2];
		ПараметрСКД.Использование = истина;
		ПараметрСКД.Значение  = КонецДня(КонПериода2);
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы[4];
		ПараметрСКД.Использование = истина;
		ПараметрСКД.Значение  = Валюта;
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы[5];
	    ПараметрСКД.Использование = Истина;
	    ПараметрСКД.Значение  = НачалоМесяца(НачПериода2);

		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки,истина);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель3ЗаполнитьПоБанкуКлиента(Кнопка)

ответ = Вопрос("В заявке расчетные счета заполнятся по банкам клиентов. Продолжить?",РежимДиалогаВопрос.ДаНет,0);
Если Ответ = КодВозвратаДиалога.Да Тогда	
	Для каждого стр из РаспределениеЗаявок Цикл
	Если стр.Подразделение.Код <> "00171" и стр.Подразделение.Код <> "00170" тогда	
	текСоответствие = СоответствиеБанков.Найти(стр.Заявка.БанковскийСчетКонтрагента.Банк,"Банк");	
	Если текСоответствие <> неопределено и не ЗначениеЗаполнено(стр.РасчетныйСчет) и ЗначениеЗаполнено(ТекСоответствие.Банк) Тогда
		Заявка = стр.Заявка.ПолучитьОбъект();
		СтрокаЗаявка = Заявка.РасшифровкаПлатежа.Найти(стр.НомерСтрокивЗаявке,"НомерСтроки");
		СтрокаЗаявка.РасчетныйСчетКомпании = текСоответствие.РасчетныйСчетОрганизации;
		Заявка.Записать();
		стр.РасчетныйСчет = текСоответствие.РасчетныйСчетОрганизации;
	конецЕсли;	
	конецесли;
конецЦикла;	
	ЗаполнитьДанныеПоБанку();
конецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
	Для каждого стр из СоответствиеБанков Цикл
		
	строка = Соответствие.Найти(стр.Бик,"Бик");
	Если строка = Неопределено тогда
		стр1= Соответствие.Добавить();
		стр1.Бик= стр.Бик;
		стр1.КодРС = стр.РасчетныйСчетОрганизации.Код;
	иначе
		строка.КодРС = стр.РасчетныйСчетОрганизации.Код;
	конецЕсли;	
	конецЦикла;
	Константы.СоответствиеБанков.Установить(Новый ХранилищеЗначения(соответствие,Новый СжатиеДанных(9)) );
КонецПроцедуры

Процедура СоответствиеБанковРасчетныйСчетОрганизацииПриИзменении(Элемент)
	стр = ЭлементыФормы.СоответствиеБанков.ТекущиеДанные;
	строка = Соответствие.Найти(стр.Бик,"Бик");
	Если строка = Неопределено тогда
		стр1= Соответствие.Добавить();
		стр1.Бик= стр.Бик;
		стр1.КодРС = стр.РасчетныйСчетОрганизации.Код;
	иначе
		строка.КодРС = стр.РасчетныйСчетОрганизации.Код;
	конецЕсли;	
КонецПроцедуры
