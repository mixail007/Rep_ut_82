Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт;

//#Область СтарыеПроцедурыИФункции //Возможно будет нужно взять функционал который использовался
//Возможно будет нужно взять функционал который использовался



//процедуру надо перенести в общий модуль ИнтернетМагазин
//
//Процедура ОбъединитьЗаказыПокупателя( Контрагент, ТолькоЧтениеЗаказов=ЛОЖЬ, Подразделение=неопределено, Предупреждения=Истина) ЭКСПОРТ
//	
//	Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
//	Транзит = ?( Подразделение=справочники.Подразделения.НайтиПоКоду("00005"), ЛОЖЬ, Истина);
//	
//	Если ЗначениеНеЗаполнено(Контрагент1) тогда
//		Если (Предупреждения) Тогда 
//			Предупреждение("Не заполнен Контрагент!",10);
//		Иначе 
//			Сообщить("Не заполнен Контрагент!");
//		КонецЕсли;
//		возврат;
//	КонецЕсли;		
//	//1.находим заказы по Контрагенту и Подразделению
//	// из регистра ЗаказыПокупателей - на случай Корректировок, изменений в проведении и проверки
//	Запрос = новый Запрос;
//	Если  ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов тогда
//		//запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки) );
//		запрос.УстановитьПараметр("ДатаОтгрузки0", ДатаОтгрузки0 );
//		запрос.УстановитьПараметр("ДатаОтгрузки1", ДатаОтгрузки1 );
//		
//		запрос.УстановитьПараметр("Контрагент", Контрагент);
//		запрос.УстановитьПараметр("Транзит", Транзит  );
//		//по умолчанию - Яршинторг
//		запрос.УстановитьПараметр("Подразделение",  Подразделение );
//		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВЫБОР
//		|		КОГДА ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) = 0 
//		|		и ЗаказыПокупателя.ЗаказПокупателя.Проверен и НЕ ЗаказыПокупателя.ЗаказПокупателя.Резерв
//		|			ТОГДА ИСТИНА
//		|		ИНАЧЕ ЛОЖЬ
//		|	КОНЕЦ КАК Флаг,
//		|	ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
//		|	ЗаказыПокупателя.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
//		|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
//		|	ЗаказыПокупателя.ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.Наименование КАК Менеджер,
//		|	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
//		|	выбор когда ЗаказыПокупателя.ЗаказПокупателя.СуммаДокумента=0 тогда 0
//		|	иначе ВЫРАЗИТЬ(100 * ЗаказыПокупателя.СуммаУпрОстаток / ЗаказыПокупателя.ЗаказПокупателя.СуммаДокумента КАК ЧИСЛО(10, 0)) 
//		|	конец КАК Процент,
//		|	ЗаказыПокупателя.ЗаказПокупателя.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
//		|	ЗаказыПокупателя.ЗаказПокупателя.Комментарий КАК Комментарий,
//		|	ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОтгружается
//		|ИЗ
//		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, 
//		//+++ 17.10.2014
//		|//Комментарий  ЗаказПокупателя.Комментарий ПОДОБНО (&Комментарий) И
//		
//		|			ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки0
//		|				И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1
//		|				И ЗаказПокупателя.Контрагент = &Контрагент
//		|				И ЗаказПокупателя.Проверен
//		//+++ 02.02.2015
//		|"+?(Флажок2, " И ЗаказПокупателя.ССайта", "")+"
//		|
//		|				И (&Транзит
//		|						И ЗаказПокупателя.Транзит
//		|						И ЗаказПокупателя.Подразделение = &Подразделение
//		|					ИЛИ НЕ &Транзит
//		|						И НЕ ЗаказПокупателя.Транзит)) КАК ЗаказыПокупателя
//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
//		|				,
//		|				ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки0
//		|					И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1
//		|					И ЗаказПокупателя.Контрагент = &Контрагент
//		|					И ЗаказПокупателя.Проверен
//		|					И (&Транзит
//		|							И ЗаказПокупателя.Транзит
//		|							И ЗаказПокупателя.Подразделение = &Подразделение
//		|						ИЛИ НЕ &Транзит
//		|							И НЕ ЗаказПокупателя.Транзит)) КАК РезервНаСкладахОстатки
//		|		ПО ЗаказыПокупателя.ЗаказПокупателя = РезервНаСкладахОстатки.ЗаказПокупателя
//		|ГДЕ
//		|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ДатаОтгрузки,
//		|	НомерВходящегоДокумента
//		|АВТОУПОРЯДОЧИВАНИЕ"; 
//		
//		
//		
//		Если НЕ РольДоступна("ПолныеПрава") тогда
//			Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеру", 
//			?(Флажок2, "И ДоговорКонтрагента.Владелец.ОсновнойДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо",
//			"И (ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
//			|   ИЛИ ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)")
//			);
//			Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
//		КонецЕсли;
//		
//		//+++ 17.10.2014
//		Если СокрЛП(Комментарий)<>"" тогда
//			Запрос.Текст = стрЗаменить( Запрос.Текст,"//Комментарий", "");
//			Запрос.УстановитьПараметр("Комментарий", "%"+Комментарий+"%");
//		КонецЕсли;
//		
//		ТабличноеПоле1.Очистить();
//		ТабличноеПоле1 = запрос.Выполнить().Выгрузить();					
//		
//		СписокЗаказов = новый СписокЗначений;					
//		СписокЗаказов.ЗагрузитьЗначения( ТабличноеПоле1.ВыгрузитьКолонку("ЗаказПокупателя") );
//		#Если НаКлиенте тогда
//			Если Предупреждения Тогда 
//				Предупреждение("Найдено "+строка(СписокЗаказов.Количество())+" заказов
//				|   c указанной датой отгрузки!", 10);
//			Иначе 
//				Сообщить("Найдено "+строка(СписокЗаказов.Количество())+" заказов
//				|   c указанной датой отгрузки!");			   
//			КонецЕсли;			   
//		#КонецЕсли		   
//		Возврат; //+++ выход!
//		
//	Иначе //----------------------------Если не ТолькоЧтениеЗаказов тогда ------------------------------------------
//		СписокЗаказов = новый СписокЗначений;
//		
//		табЗнач = ТабличноеПоле1.Скопировать();
//		табЗнач.Свернуть("Флаг, Договор, Менеджер", "Количество");
//		i=0; N=табЗнач.Количество();
//		Пока i<N цикл
//			Если табЗнач[i].Флаг тогда 	i=i+1;	
//			Иначе табЗнач.Удалить(i); N=N-1;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Если ТабЗнач.Количество()>1 тогда
//			Если Предупреждения Тогда 		
//				Предупреждение("Нельзя объединять заказы покупателей 
//				|по "+строка(табЗнач.Количество())+" разным договорам
//				|или  менеджерам - в один общий заказ!", 10);
//			Иначе 
//				Сообщить("Нельзя объединять заказы покупателей 
//				|по "+строка(табЗнач.Количество())+" разным договорам
//				|или  менеджерам - в один общий заказ!");				   
//			КонецЕсли;
//			
//			Возврат;
//		КонецЕсли;	
//		
//		
//		для каждого стр1 из ТабличноеПоле1 цикл
//			если стр1.флаг тогда
//				СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	//====================================================================================
//	
//	
//	
//	Если СписокЗаказов.Количество()=0 тогда 
//		#Если НаКлиенте тогда
//			Если (Предупреждения) Тогда 
//				Предупреждение("Нет"+?(транзит," транзитных","")+" заказов покупателя 
//				|для объединения по Контрагенту: "+строка(Контрагент)+"
//				|с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy"),10);
//			Иначе 
//				Сообщить("Нет"+?(транзит," транзитных","")+" заказов покупателя 
//				|для объединения по Контрагенту: "+строка(Контрагент)+"
//				|с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy"));
//			КонецЕсли;
//		#КонецЕсли	
//		возврат;
//	иначеЕсли СписокЗаказов.Количество()=1 тогда 
//		#Если НаКлиенте тогда
//			Если (Предупреждения) Тогда
//				Предупреждение("Только один "+?(транзит," транзитный","")+" заказ покупателя:
//				|"+строка(СписокЗаказов[0].Значение)+"
//				|Объединение - не требуется!",10);
//			Иначе 
//				Сообщить("Только один "+?(транзит," транзитный","")+" заказ покупателя:
//				|"+строка(СписокЗаказов[0].Значение)+"
//				|Объединение - не требуется!");						   	
//			КонецЕсли;				   
//		#КонецЕсли	
//		возврат;
//	иначе
//		#Если НаКлиенте тогда
//			Сообщить("Выбрано: "+строка(СписокЗаказов.Количество())+?(транзит," транзитных","")+" заказов покупателя для объединения по Контрагенту: "+строка(Контрагент)+" с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" и подразделению: "+строка(Подразделение), СтатусСообщения.Информация);
//		#КонецЕсли
//	КонецЕсли;	
//	
//	
//	//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
//	запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
//	запрос.УстановитьПараметр("Дата", Конецдня(ТекущаяДата()) );  // в пределах дня!
//	
//	Запрос.Текст = "ВЫБРАТЬ различные
//	|	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
//	|	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
//	//|ЗаказыПокупателя.СуммаУпрОстаток КАК Сумма,
//	|ЗаказыПокупателя.СуммаВзаиморасчетовОстаток КАК Сумма,
//	|	ЗаказыПокупателя.ЗаказПокупателя
//	|ИЗ
//	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателя
//	|ГДЕ
//	|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ЗаказыПокупателя.Номенклатура.Производитель,
//	|	Номенклатура
//	|ИТОГИ
//	|	СУММА(Количество),
//	|	СУММА(Сумма)
//	|ПО
//	|	Номенклатура
//	|АВТОУПОРЯДОЧИВАНИЕ"; 
//	
//	
//	ОбщийЗаказТовары = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	
//	Если ОбщийЗаказТовары.Количество()=0 тогда 
//		//	#Если НаКлиенте тогда
//		Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
//		//	#КонецЕсли	
//		возврат;
//	иначе
//		//	#Если НаКлиенте тогда
//		КолТов = ОбщийЗаказТовары.Количество();
//		Сообщить("Заказано "+ строка(КолТов)+" товаров для объединения.", СтатусСообщения.Информация);
//		//	#КонецЕсли	
//	КонецЕсли;	
//	
//	
//	#Если НаКлиенте тогда
//		Если Предупреждения Тогда 	
//			Режим = РежимДиалогаВопрос.ДаНет;
//			Ответ = Вопрос("  Отменить Объединение будет уже невозможно!
//			|Вы уверены, что действительно хотите объединить
//			|"+строка(СписокЗаказов.Количество())+" заказов 
//			|c датой отгрузки "+?(ДатаОтгрузки0=НачалоДня(ДатаОтгрузки1)," = "+Формат(ДатаОтгрузки0,"ДЛФ=DD"),
//			"с "+Формат(ДатаОтгрузки0,"ДЛФ=DD")+" по "+Формат(ДатаОтгрузки1,"ДЛФ=DD") ) +"
//			|в один Общий заказ покупателя?", Режим, 30, КодВозвратаДиалога.Да, "Предупреждение!");
//			Если Ответ = КодВозвратаДиалога.Нет Тогда
//				Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	#КонецЕсли	
//	
//	
//	//2.создаем общий суммарный заказ
//	НачатьТранзакцию();
//	
//	докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
//	ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа
//	
//	
//	//12.09.14 Смирнов, если есть договор факторинга, то ставим его, автоматически меняется на другой договор!
//	догФакторинг = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(СписокЗаказов[0].Значение);
//	
//	//02.10.2015 - только если это дог.факторинга 
//	Если догФакторинг.типДоговора = справочники.ТипыДоговоров.Факторинг 
//		или (Подразделение<>неопределено и Подразделение<>СписокЗаказов[0].Значение.Подразделение) тогда
//		докОбщийЗаказ.ДоговорКонтрагента = догФакторинг;
//	КонецЕсли;
//	
//	//Смирнов
//	Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
//	докОбщийЗаказ.Подразделение = Подразделение;
//	
//	//+++ 28.10.2014 Огородников
//	докОбщийЗаказ.ТипЗаказа = 6; // объединенный заказ имеет отдельный тип
//	Преф = ?(Подразделение.Код="00005", "ТК", СокрЛП(Подразделение.ПрефиксИБ) );
//	//Преф = ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00005"), "ТК", 
//	//		  ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00106"), "РД", 
//	//			 ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00112"), "СП",
//	//			 	?(Подразделение=справочники.Подразделения.НайтиПоКоду("00120"), "ЧБ",
//	//				   ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00122"), "ЕК",
//	//					  ?(Подразделение=справочники.Подразделения.НайтиПоКоду("00133"), "МС",""))))));
//	докОбщийЗаказ.НомерВходящегоДокумента="";
//	докОбщийЗаказ.ДатаВходящегоДокумента ='00010101';
//	докОбщийЗаказ.ССайта = ложь;
//	
//	докОбщийЗаказ.Поставщик  = справочники.Контрагенты.ПустаяСсылка();
//	докОбщийЗаказ.Статус     = перечисления.СтатусыЗаказов.ПустаяСсылка();
//	докОбщийЗаказ.Согласован = ложь;
//	//+++)
//	
//	докОбщийЗаказ.Дата         = ТекущаяДата(); //мин(ТекущаяДата(), ДатаОтгрузки+8*3661);   // 08:08:08
//	ДатаОтгр = макс( НачалоДня(ТекущаяДата()), НачалоДня(ДатаОтгрузки1) );
//	докОбщийЗаказ.ДатаОтгрузки = ДатаОтгр;
//	Если ДатаОтгр > НачалоДня(ТекущаяДата()) тогда
//		#Если Клиент тогда	
//			сообщить("Дата отгрузки больше текущей даты!");
//		#КонецЕсли	
//	КонецЕсли;	
//	
//	докОбщийЗаказ.УстановитьНовыйНомер(Преф); // всегда ТК!
//	
//	
//	докОбщийЗаказ.Проверен = истина;
//	докОбщийЗаказ.АвтоРезервирование = истина;
//	
//	СписокЗак = новый СписокЗначений;
//	
//	докОбщийЗаказ.Товары.Очистить();
//	пока ОбщийЗаказТовары.Следующий() цикл
//		стр1 = докОбщийЗаказ.Товары.Добавить();
//		
//		стр1.Номенклатура = ОбщийЗаказТовары.Номенклатура;
//		стр1.Количество   = ОбщийЗаказТовары.Количество;
//		стр1.Сумма   	  = ОбщийЗаказТовары.Сумма;
//		
//		стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
//		
//		стр1.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//		стр1.СуммаНДС = Окр( стр1.Сумма * 18/118, 2);
//		
//		стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
//		стр1.Коэффициент = 1;
//		стр1.КоличествоМест = стр1.Количество;
//		выбЗак = ОбщийЗаказТовары.Выбрать();
//		пока выбЗак.Следующий() цикл
//			Если СписокЗак.Количество()>0 тогда
//				Если СписокЗак.НайтиПоЗначению(выбЗак.ЗаказПокупателя)=неопределено тогда
//					СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
//				КонецЕсли;
//			иначе
//				СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
//			КонецЕсли;	
//		КонецЦикла;	
//	КонецЦикла;
//	
//	//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
//	коммент = "";
//	
//	попытка		
//		//+++ 11.10.2013
//		Если СписокЗак.Количество()<СписокЗаказов.Количество() тогда
//			Сообщить("-----Не Все заказы из избраннных попали в объединение!-----");
//			для i=0 по СписокЗаказов.Количество()-1 цикл
//				Если СписокЗак.НайтиПоЗначению(СписокЗаказов[i].Значение)=неопределено тогда
//					Сообщить(строка(СписокЗаказов[i].Значение)+" - не будет объединен, так как по нему нет заказанных товаров!", СтатусСообщения.Внимание);
//				КонецЕсли;
//			КонецЦикла;
//			Сообщить("------------------------------------------------------------");
//		КонецЕсли;	
//		СуммаПоДокументам = 0;
//		для i=0 по СписокЗак.Количество()-1 цикл
//			докОб = СписокЗак[i].Значение.ПолучитьОбъект();
//			докОб.ПометкаУдаления = истина;
//			докОб.Комментарий = "# данные перенесены >> "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
//			
//			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОб);//+++ 19.01.2015 регистрация для обмена с МИМ
//			докОб.мПроведениеИзФормы = ЛОЖЬ;
//			докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//			
//			УдалитьКорректировкиПоДокументу(докОб.ссылка);
//			СуммаПоДокументам = СуммаПоДокументам + докОб.суммаДокумента;
//			коммент = коммент + докОб.Номер+"; ";
//			
//			ДобавитьЗаказВТЧОбщегоЗаказа(СписокЗак[i].Значение, докОбщийЗаказ);	//+++ рекурентная функция
//		КонецЦикла;	
//		
//		Если докОбщийЗаказ.Товары.Итог("Сумма")<>СуммаПоДокументам тогда
//			//	
//			//+++ 25.06.2015 - цены меняются на лету при объединении	
//			//	
//			//	ОтменитьТранзакцию();
//			Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы общего заказа: "+строка(СуммаПоДокументам)+" - "+строка( докОбщийЗаказ.Товары.Итог("Сумма") )+" = "+строка(СуммаПоДокументам -  докОбщийЗаказ.Товары.Итог("Сумма"))+"р.", СтатусСообщения.Внимание);
//			//	Сообщить(" ОБЪЕДИНЕНИЕ ОТМЕНЕНО !!!", СтатусСообщения.ОченьВажное );   //+++ 05.06.2014
//		КонецЕсли;
//		
//		докОбщийЗаказ.Комментарий = "# объединенный заказ: " + коммент;
//		ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОбщийЗаказ);//+++ 19.01.2015 регистрация для обмена с МИМ
//		докОбщийЗаказ.мПроведениеИзФормы = ЛОЖЬ;
//		докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
//		
//		ЗафиксироватьТранзакцию();
//		
//		Сообщить("+++ Успешно создан один общий заказ для "+строка(СписокЗак.Количество())+" из "+строка(СписокЗаказов.Количество())+" выбранных заказов. "+коммент, СтатусСообщения.Информация);
//		Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" объединенных документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
//		
//		ПолеВвода1 = докОбщийЗаказ.Ссылка;  //сразу для открытия
//		//КонецЕсли;
//		
//		Если СписокЗак.Количество()<>СписокЗаказов.Количество() тогда
//			Если Предупреждения Тогда 
//				Предупреждение("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов.", 30);
//			Иначе
//				Сообщить("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов.");
//			КонецЕсли;
//		КонецЕсли;
//		
//	Исключение
//		ОтменитьТранзакцию();
//		//	#Если НаКлиенте тогда
//		Сообщить("--- не удалось создать общий заказ: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
//		//	#КонецЕсли	
//	КонецПопытки;
//	
//	
//	
//КонецПроцедуры

//+++ 28.10.2014 - рекурентная функция
//Процедура ДобавитьЗаказВТЧОбщегоЗаказа(Зак1, ЗакОб)
//	
//	Если Зак1.Заказы.Количество()=0 тогда
//		стрЗак = ЗакОб.Заказы.Добавить();
//		стрЗак.ЗаказПокупателя = Зак1;
//	Иначе
//		для каждого стр1 из Зак1.Заказы цикл
//			ДобавитьЗаказВТЧОбщегоЗаказа(стр1.ЗаказПокупателя, ЗакОб);
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры





//

//Процедура УдалитьКорректировкиПоДокументу(ЗакПокСсылка)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	КорректировкаЗаказаПокупателя.Ссылка
//	|ИЗ
//	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
//	|ГДЕ
//	|	КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
//	
//	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗакПокСсылка);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		докКорр = выборка.Ссылка.ПолучитьОбъект();	
//		докКорр.ПометкаУдаления = истина;
//		докКорр.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+докКорр.Комментарий;
//		попытка
//			//	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докКорр);//+++ 19.01.2015 регистрация для обмена с МИМ
//			докКорр.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//			сообщить(" Удален документ: "+строка(докКорр)+" на сумму: "+ докКорр.СуммаДокумента);
//		исключение
//			сообщить(" Не удалось удалить док: "+строка(докКорр) , СтатусСообщения.Внимание);
//		конецПопытки;	
//	КонецЦикла;
//	
//КонецПроцедуры


//Процедура ПолеВвода2Регулирование(Элемент, Направление, СтандартнаяОбработка)
//	Если ДатаОтгрузки0>ДатаОтгрузки1 тогда
//		ДатаОтгрузки1=КонецДня(ДатаОтгрузки0);
//	КонецЕсли;
//КонецПроцедуры

//Процедура ДатаОтгрузки1Регулирование(Элемент, Направление, СтандартнаяОбработка)
//	Если ДатаОтгрузки1<ДатаОтгрузки0 тогда
//		ДатаОтгрузки0=НачалоДня(ДатаОтгрузки1);
//	КонецЕсли;
//КонецПроцедуры

//Процедура КоманднаяПанель2ВыбратьВсе(Кнопка)
//	Отметки(1);
//КонецПроцедуры

//Процедура КоманднаяПанель2ОтменитьВсе(Кнопка)
//	Отметки(0);
//КонецПроцедуры

//Процедура КоманднаяПанель2ИзменитьВсе(Кнопка)
//	Отметки(2);
//КонецПроцедуры

//Процедура ТабличноеПоле1ПередНачаломДобавления(Элемент, Отказ, Копирование)
//	Отказ=Истина;
//	Предупреждение("Прямое добавление заказов - запрещено!
//	|Выберите контрагента и период!",10);
//	
//КонецПроцедуры

//Процедура ТабличноеПоле1ПередУдалением(Элемент, Отказ)
//	Отказ=Истина;
//	Предупреждение("Прямое удаление заказов - запрещено!
//	|Выключите флажок слева от заказа!",10);
//	
//КонецПроцедуры

//Процедура Отметки(число1)
//	Для каждого стр1 из ТабличноеПоле1 Цикл
//		стр1.Флаг = ?(число1=1, TRUE, ?(число1=0, FALSE, НЕ стр1.Флаг) );
//		Если стр1.Флаг и НЕ стр1.ЗаказПокупателя.Проверен тогда  //отмечен непроделенный заказ!
//			Сообщить("Нельзя отмечать непроделенный заказ! "+строка(стр1.ЗаказПокупателя)+" - выключен!", СтатусСообщения.Внимание);
//			стр1.Флаг = ЛОЖЬ;
//		КонецЕсли;	
//	КонецЦикла;	
//КонецПроцедуры

//Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
//	
//	Если данныеСтроки.Процент>0 и данныеСтроки.Процент<100 тогда
//		ОформлениеСтроки.цветТекста = webЦвета.Синий;
//	КонецЕсли;
//	
//	Если данныеСтроки.КоличествоОтгружается>0 тогда
//		Если данныеСтроки.КоличествоОтгружается=данныеСтроки.Количество тогда
//			ОформлениеСтроки.цветФона = webЦвета.НейтральноЗеленый;
//		Иначе
//			ОформлениеСтроки.цветФона = webЦвета.светлоРозовый;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ДанныеСтроки.ЗаказПокупателя.Проверен тогда
//		Если ДанныеСтроки.ЗаказПокупателя.Резерв тогда
//			ОформлениеСтроки.Шрифт = мЖирныйКурсивШрифт;
//		Иначе
//			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
//		КонецЕсли;	
//	ИначеЕсли ДанныеСтроки.ЗаказПокупателя.Резерв тогда
//		ОформлениеСтроки.Шрифт = мКурсивШрифт;
//	КонецЕсли;	
//	
//	//+++ 31.03.2015 ++++++++++ подготовка полей для определения Условия для расскраски заказов по статусам +++++++++
//	Если условиеПоискаПоСхеме тогда //гибридная схема расскраски
//		зак = ДанныеСтроки.ЗаказПокупателя;
//		ДанныеСтрокиТранзит = зак.Транзит;
//		ДанныеСтрокиПометкаУдаления = зак.ПометкаУдаления;
//		статус = ОбменСУТИнтернетМагазин.ПолучитьСтатусЗаказаПоСхеме(зак, ДанныеСтрокиТранзит, ДанныеСтрокиПометкаУдаления);
//		
//		//Если СокрЛП(статус)<>"" тогда
//		кодСтатуса = число(лев(статус,2));
//		//сообщить(ДанныеСтроки.Номер + " - "+статус);
//		Если ЭлементыФормы.ТабличноеПоле1.Колонки.Найти("СтатусЗаказа").Видимость тогда
//			ОформлениеСтроки.Ячейки.СтатусЗаказа.ОтображатьТекст = Истина;
//			ОформлениеСтроки.Ячейки.СтатусЗаказа.текст = прав(статус, стрДлина(статус)-?(кодСтатуса<10, 2, 3) );// до 99. статуса!
//		КонецЕсли;
//		
//		//Если кодСтатуса = 1 тогда //заказан у поставщика - своя цветовая гамма
//		//   ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;
//		
//		//Если кодСтатуса = 2 тогда // подтвержден (проделен), но объединен в общий заказ... изменять уже нельзя, цвет остаётся серый
//		//   ОформлениеСтроки.ЦветФона = WebЦвета.Белый;
//		
//		Если кодСтатуса = 3 тогда // Удален или Закрыт
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
//			
//		ИначеЕсли кодСтатуса = 4 тогда  //отгружен полностью
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый;
//			ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;
//		ИначеЕсли кодСтатуса = 5 тогда //частично отгружен
//			ОформлениеСтроки.ЦветФона = WebЦвета.Белый;
//			ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;
//			
//		ИначеЕсли кодСтатуса = 6 тогда //Доставлен на склад - светло Голубой 
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
//		ИначеЕсли кодСтатуса = 7 тогда //В Пути             - ярко синий цвет       
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
//			
//		ИначеЕсли кодСтатуса = 8 тогда  //на отгрузке полностью
//			ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый;
//		ИначеЕсли кодСтатуса =9 тогда  //на отгрузке частично
//			ОформлениеСтроки.ЦветФона = WebЦвета.светлоРозовый; // недогруз! 
//		ИначеЕсли кодСтатуса =10 тогда //на отгрузке подготовка или подготовка к реализации
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый; // уже начата отгрузка! 
//			
//		ИначеЕсли кодСтатуса =11 тогда  //на перемещении полностью  ЯРКО-ЗЕЛЕНЫЙ
//			ОформлениеСтроки.ЦветФона = WebЦвета.ВесеннеЗеленый;
//		ИначеЕсли кодСтатуса =12 тогда  //на перемещении частично    ЯРКО-ОРАНЖЕВЫЙ
//			ОформлениеСтроки.ЦветФона = WebЦвета.ТемноОранжевый; // недогруз! 
//		ИначеЕсли кодСтатуса =13 тогда //на перемещении подготовка или подготовка к реализации
//			ОформлениеСтроки.ЦветФона = WebЦвета.Желтый; //  ЯРКО-ЖЕЛТЫЙ
//			
//		ИначеЕсли кодСтатуса =14 тогда //Перемещение выполнено - ничего больше не надо делать!
//			ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой; // светло-синий
//			
//		КонецЕсли; 
//		
//		//КонецЕсли;//статус<>""	
//		
//	КонецЕсли;//условие раскраски заказов	по статусам
//	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//	
//	
//	
//КонецПроцедуры


	
//Процедура условиеПоискаПоСхемеПриИзменении(Элемент)
//	ЭлементыФормы.ТабличноеПоле1.Колонки.Найти("СтатусЗаказа").Видимость = условиеПоискаПоСхеме;
//КонецПроцедуры
//#КонецОбласти


//<<<Адиянов<<<
Процедура ПриОткрытии()
	//Флажок1 = истина;
	ДатаОтгрузки =  НачалоДня( ТекущаяДата() ); // Сегодня
	
	ДатаОтгрузки0 =  ДатаОтгрузки;
	ДатаОтгрузки1 =  КонецДня ( ДатаОтгрузки );  
	
	
	//+++07.11.2014 - массив всех филиалов + 0-ой элемент - это Головное подразделение
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00005"),"Ярославль"); //Ярославль
	Филиал = яштПоставщики.ПолучитьМассивФилиалов();
	для i=1 по Филиал.Количество()-1 цикл
		назв = Филиал[i].Наименование;
		назв = стрЗаменить(назв, "Подразделение ", "");
		ЭлементыФормы.Подразделение.СписокВыбора.Добавить(Филиал[i], назв);
	КонецЦикла;
	
	////+++ 22.04.2014 специально для Федунова
	//Если ПараметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Федунов") тогда
	//	Контрагент1 = справочники.Контрагенты.НайтиПоКоду("П000382");
	//	ЭлементыФормы.Контрагент1.Доступность = ложь;
	//	
	//	ЭлементыФормы.КомментарийЗаказа.Видимость = истина;
	//	ЭлементыФормы.Комментарий.Видимость = истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура Контрагент1ПриИзменении(Элемент)
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьОграниченныеИзмененияДокументовПриходаПоОТХ") Тогда
		
		НаборЗаписей = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		ТЗКонтр = НаборЗаписей.Выгрузить();
		ТЗКонтр.Свернуть("Поставщик");
		
		Если ТЗКонтр.Найти(Элемент.Значение,"Поставщик") = Неопределено Тогда 
		
			Сообщить("Вам нельзя выбирать этого контрагента!!!");
			Контрагент1 = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
			
	КонецЕсли;
	//!УТОЧНИТЬ! возможно нужно установить ограничение по контрагентам
	//Если СокрЛП(Контрагент1.Код) = "93273" //Евротранс 
	//	или СокрЛП(Контрагент1.Код) = "П000382"//+++ 07.11.2014 Федунов
	//	тогда
	//	ЭлементыФормы.КомментарийЗаказа.Видимость = истина;
	//	ЭлементыФормы.Комментарий.Видимость = истина;
	//Иначе
	//	Комментарий = "";
	//КонецЕсли;	
	//
	//Если Контрагент1.ЗапретитьВводЗаказаПокупателя тогда
	//	Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещен ввод заказов!
	//	|Объединение заказов в Новый заказ - невозможно!", 30);
	//	Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
	//ИначеЕсли контрагент1.ЗапретОтгрузки тогда
	//	Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещены отгрузки!
	//	|Отгрузить Объединенный заказ будет - невозможно!", 30);
	//КонецЕсли;	
КонецПроцедуры

Процедура КнопкаОчисткиНажатие(Элемент)
	ДатаОтгрузки0='00010101';
	ДатаОтгрузки1='00010101';
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаОтгрузки0, ?(ДатаОтгрузки1='0001-01-01', ДатаОтгрузки1, КонецДня(ДатаОтгрузки1)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаОтгрузки0 = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОтгрузки1 = КонецДня(НастройкаПериода.ПолучитьДатуОкончания());
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьПоступленияНажатие(Элемент)
	ЗаполнитьДокументыПоступления();
КонецПроцедуры

Процедура Контрагент1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = ложь;
	//СписокКонтр = ПолучитьСписокКонтрагентов();
	//Если СписокКонтр.Количество()=0 тогда
	//	Предупреждение("У вас нет доступных контрагентов, для объединения заказов!",10);
	//	возврат;
	//КонецЕсли;
	//формаКонтр = справочники.контрагенты.ПолучитьФормуВыбора();
	//формаКонтр.СправочникСписок.Отбор.ссылка.ВидСравнения = видСравнения.ВСписке;
	//формаКонтр.СправочникСписок.Отбор.ссылка.Значение = СписокКонтр;
	//формаКонтр.СправочникСписок.Отбор.ссылка.Использование = Истина;
	//Контрагент1 = формаКонтр.ОткрытьМодально();
	
КонецПроцедуры
//-----для МИМ - берем только контрагентов с ПриниматьЗаказыЧерезСайт -------------------
//----------- и ОсновнойДоговорКонтрагента.ОтветственноеЛицо = текПользователь-----------
функция ПолучитьСписокКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.Владелец.ПометкаУдаления
	|";
	
	//Если Флажок2 тогда
	//Запрос.Текст = Запрос.Текст  + "	И ДоговорыКонтрагентов.Владелец.ПриниматьЗаказыЧерезСайт
	//|";
	//КонецЕсли;
	
	//отбор контрагентов только по себе
	Если НЕ РольДоступна("ПолныеПрава") тогда
		Запрос.Текст = Запрос.Текст + "	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
		|ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
		Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	рез = новый СписокЗначений;
	Если Выборка.Количество()>0 тогда
		рез.ЗагрузитьЗначения( Выборка.ВыгрузитьКолонку("Ссылка") );
	КонецЕсли;
	
	Возврат  рез;	
	
КонецФункции

Процедура ДеревоВТаблицу(ТекущаяСтрокаДерева,Таблица,Уровень=0)
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Если СтрокаДерева.Флаг = 0 Тогда 
				Продолжить;
			КонецЕсли;	
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаДерева);
		КонецЕсли;
		ДеревоВТаблицу(СтрокаДерева,Таблица,Уровень+1);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНомерДокумента(СтрокаКомментария)
	Номер = "";
	СтрокаПоиска = "# Задание ";
	НачалоЗадания = Найти(СтрокаКомментария,СтрокаПоиска);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	Если НачалоЗадания <> 0 Тогда 
		Номер = Сред(СтрокаКомментария,НачалоЗадания + ДлинаСтрокиПоиска,8);  //8 - Длина номера задания 
	КонецЕсли;	
	Возврат  СокрЛП(Номер);
КонецФункции	

Процедура ДополнитьТаблицуДокументовПоступления(ТаблицаДокументовПоступления)
	Для Каждого Стр Из ТаблицаДокументовПоступления Цикл 
		Если Найти(Стр.Комментарий,"# Задание") = 0 Тогда 
			Стр.НомерЗаданияНаПеревозку = "";
		Иначе
			Стр.НомерЗаданияНаПеревозку = ПолучитьНомерДокумента(Стр.Комментарий);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ОтобратьДокументыПоступления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслуг.Комментарий,
	|	""########"" КАК НомерЗаданияНаПеревозку
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	|	И ПоступлениеТоваровУслуг.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Дата1", ДатаОтгрузки0);
	Запрос.УстановитьПараметр("Дата2", ДатаОтгрузки1);
	Запрос.УстановитьПараметр("Контрагент", Контрагент1);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда 
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДокументыПоступления()
	
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
	ТаблицаДокументовПоступления = ОтобратьДокументыПоступления();
	Если ТаблицаДокументовПоступления = Неопределено Тогда Возврат; КонецЕсли;
	
	ДополнитьТаблицуДокументовПоступления(ТаблицаДокументовПоступления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТПоступления
	|ИЗ
	| &ВТПоступления Как ВТПоступления
	| ;
	|ВЫБРАТЬ
	|ЗаданиеНаОтгрузку.Ссылка КАК ЗаданиеНаОтгрузку,
	|ЗаданиеНаОтгрузку.Номер,
	|ЗаданиеНаОтгрузку.Водитель,
	|ЗаданиеНаОтгрузку.ГосНомерАвтомобиля
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
	|ГДЕ
	|	ЗаданиеНаОтгрузку.Номер В
	|			(ВЫБРАТЬ
	|				ВТПоступления.НомерЗаданияНаПеревозку
	|			ИЗ
	|				ВТПоступления КАК ВТПоступления)
	|	И ЗаданиеНаОтгрузку.Дата >= &Дата1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоступления.Комментарий,
	|	Задания.Номер,
	|	Задания.Водитель,
	|	Задания.ГосНомерАвтомобиля,
	|	ВТПоступления.ДокументПоступления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТПоступления.ДокументПоступления.СуммаДокумента СуммаДокумента,
	|	Задания.ЗаданиеНаОтгрузку,
	|   ВТПоступления.ДокументПоступления
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО ВТПоступления.НомерЗаданияНаПеревозку = Задания.Номер
	|ИТОГИ
	|СУММА(СуммаДокумента)
	|ПО
	|	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("Дата1", ДатаОтгрузки0);
	Запрос.УстановитьПараметр("ВТПоступления", ТаблицаДокументовПоступления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоговорКонтрагента = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
		нстр=ДеревоДокументов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, ВыборкаДоговорКонтрагента);
		
		ВыборкаДетальныеЗаписи = ВыборкаДоговорКонтрагента.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			нстр2=нстр.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(нстр2, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	для каждого стр1 из ДеревоДокументов.Строки цикл
		ЭлементыФормы.ДеревоДокументов.Развернуть(Стр1, Истина);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДеревоДокументовФлагПриИзменении(Элемент)
	ТекущаяСтрокаДерева=ЭлементыФормы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущаяСтрокаДерева=Неопределено Тогда Возврат КонецЕсли;
КонецПроцедуры

Функция ЕстьТоварыВДокументахПоступления(ТаблицаДокументовкОбъединению)
	КоличествоТоваров = 0;
	Для Каждого Документ Из ТаблицаДокументовкОбъединению Цикл 
		КоличествоТоваровВДокументе = Документ.ДокументПоступления.Товары.Количество(); 
		Если КоличествоТоваровВДокументе <> 0 Тогда 
			Сообщить("В документе """+ Документ.ДокументПоступления + """ есть товары",СтатусСообщения.Внимание);
			КоличествоТоваров = КоличествоТоваров + КоличествоТоваровВДокументе;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоТоваров <> 0;
КонецФункции

Процедура СоздатьИЗаполнитьДокументПоступления(ТаблицаДокументовкОбъединению,Отказ)
	
	//Если не товары тогда
	//	
	//	Отказ = ЕстьТоварыВДокументахПоступления(ТаблицаДокументовкОбъединению);
	//	
	//КонецЕсли;

	Если Отказ Тогда
		Сообщить("Операция объединения прервана",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументовкОбъединениюТЗ = новый ТаблицаЗначений;
	ТаблицаДокументовкОбъединениюТЗ.Колонки.Добавить("ДокументПоступления");
	ТаблицаДокументовкОбъединениюТЗ.Колонки.Добавить("Заказ");
	
	//ТаблицаДокументовкОбъединениюТЗ.ЗагрузитьКолонку(ТаблицаДокументовкОбъединению,"ДокументПоступления");
	
	Для каждого стр из ТаблицаДокументовкОбъединению Цикл
		стрНов = ТаблицаДокументовкОбъединениюТЗ.Добавить();
		стрНов.ДокументПоступления = стр.ДокументПоступления;
        стрНов.Заказ = стр.ДокументПоступления.сделка;
	КонецЦикла;
	
	заказпервый = ТаблицаДокументовкОбъединениюТЗ[0].Заказ;
	
	ПервыйДокумент = ТаблицаДокументовкОбъединениюТЗ[0].ДокументПоступления;
	
	НовыйДокументПоступления = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	НовыйДокументЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(НовыйДокументПоступления,ПервыйДокумент);
	
	попытка 
	
	ЗаполнитьЗначенияСвойств(НовыйДокументЗаказ,заказпервый);
	
    Исключение
	
	КонецПопытки;
	
	Преф = НовыйДокументПоступления.Подразделение.ПрефиксИБ; //"ТК"; 
	
	НовыйДокументПоступления.УстановитьНовыйНомер(Преф); 
	НовыйДокументПоступления.Дата = ПервыйДокумент.Дата;
	НовыйДокументПоступления.Комментарий = "# объединенное поступление: ";
	ГрупповойДоговор =  ПервыйДокумент.ДоговорКонтрагента;
	
	НовыйДокументЗаказ.УстановитьНовыйНомер(Преф); 
	НовыйДокументЗаказ.Дата = ПервыйДокумент.Дата;
	НовыйДокументЗаказ.Комментарий = "# объединенный заказ: ";
	//ГрупповойДоговор =  ПервыйДокумент.ДоговорКонтрагента;
	
	Для Каждого Документ Из ТаблицаДокументовкОбъединениюТЗ Цикл 
		//Заполним все табличные части из документа
		Для Каждого ТЧ Из Документ.ДокументПоступления.Метаданные().ТабличныеЧасти Цикл 
			Для Каждого СтрТЧ из Документ.ДокументПоступления[ТЧ.Имя] Цикл 
				НоваяСтрокаДокумента = НовыйДокументПоступления[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента,СтрТЧ);
			КонецЦикла;
		КонецЦикла;
		
		НовыйДокументПоступления.Поступления.Свернуть("ПоступлениеТоваровУслуг");
		Если Документ.ДокументПоступления.Поступления.Количество()=0 тогда //+++ 21.06.2016
			НовСтрНовыйДокументПоступления = НовыйДокументПоступления.Поступления.Добавить();
			НовСтрНовыйДокументПоступления.ПоступлениеТоваровУслуг = Документ.ДокументПоступления;
		КонецЕсли;
		НовыйДокументПоступления.Комментарий =  НовыйДокументПоступления.Комментарий + Документ.ДокументПоступления.Номер + "; ";
	
	КонецЦикла;
	
	Попытка
	
	Для Каждого Документ Из ТаблицаДокументовкОбъединениюТЗ Цикл 
		//Заполним все табличные части из документа
		Для Каждого ТЧ Из Документ.Заказ.Метаданные().ТабличныеЧасти Цикл 
			Для Каждого СтрТЧ из Документ.Заказ[ТЧ.Имя] Цикл 
				НоваяСтрокаДокумента = НовыйДокументЗаказ[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента,СтрТЧ);
			КонецЦикла;
		КонецЦикла;
		
		НовыйДокументЗаказ.Комментарий =  НовыйДокументЗаказ.Комментарий + Документ.Заказ.Номер + "; ";
		
		обЗаказ = Документ.Заказ.Получитьобъект();
		
		обЗаказ.ПометкаУдаления = Истина;
		
		обЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	КонецЦикла;
	
    Исключение
	
	КонецПопытки;
	
	НовыйДокументПоступления.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Цена,СтавкаНДС,СерияНоменклатуры,ХарактеристикаНоменклатуры,ЗаказПокупателя,Проект,Склад,ПриходныйОрдер,ЗаказПоставщику,КодТовараЭДО","Количество,Сумма,СуммаНДС,КоличествоМест,Вес");
	
	НовыйДокументЗаказ.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Цена,СтавкаНДС,ХарактеристикаНоменклатуры,ЗаказПокупателя,ПлановаяСебестоимость,Статус,Комментарий,Основание","Количество,Сумма,СуммаНДС,КоличествоМест,Вес");
	//НовыйДокументПоступления.Дата = ПервыйДокумент.Дата;
	
	НовыйДокументПоступления.ГрафикОплаты.Очистить();
	Нов = НовыйДокументПоступления.ГрафикОплаты.Добавить();
	нов.Дата = ТекущаяДата();
	Нов.ПроцентОплаты = 100;
	
	Попытка
		
		Если заказпервый <> Документы.ЗаказПоставщику.ПустаяСсылка() и заказпервый <> неопределено Тогда
		    НовыйДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		//Форма = НовыйДокументЗаказ.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
	Исключение
		//Сообщить(ОписаниеОшибки());
		//Отказ = Истина;
		//Возврат;
	КонецПопытки;
	
	НовыйДокументПоступления.Сделка = НовыйДокументЗаказ.Ссылка;
	
	Попытка
		НовыйДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	НовСтрСозданныеДокументы = СозданныеДокументы.Добавить();
	НовСтрСозданныеДокументы.ПоступлениеТоваровУслуг = НовыйДокументПоступления.Ссылка;
	НовСтрСозданныеДокументы.ДоговорКонтрагента      = НовыйДокументПоступления.ДоговорКонтрагента;
	НовСтрСозданныеДокументы.СуммаДокумента          = НовыйДокументПоступления.СуммаДокумента;
	НовСтрСозданныеДокументы.Комментарий             = НовыйДокументПоступления.Комментарий;
КонецПроцедуры

Процедура УдалитьДокументыПоступления(ТаблицаДокументовкОбъединению,Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	Для Каждого Документ Из ТаблицаДокументовкОбъединению Цикл 
		ДокументОбъект = Документ.ДокументПоступления.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = истина;
		ДокументОбъект.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+ДокументОбъект.Комментарий;
		попытка
			//	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докКорр);//+++ 19.01.2015 регистрация для обмена с МИМ
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			сообщить(" Документ помечен на удаление: "+строка(ДокументОбъект)+" на сумму: "+ ДокументОбъект.СуммаДокумента);
		исключение
			сообщить(" Не удалось установить пометку удаления док: "+строка(ДокументОбъект) , СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		конецПопытки;	
	КонецЦикла;

КонецПроцедуры

Процедура ОбъединитьДокументыПоступления() 
	
	ТЗДокументов = Новый  ТаблицаЗначений;
	Для каждого рКолонка из ДеревоДокументов.Колонки Цикл
			ТЗДокументов.Колонки.Добавить(рКолонка.Имя,рКолонка.ТипЗначения,рКолонка.Заголовок,рКолонка.Ширина);
	КонецЦикла;
	
	ДеревоВТаблицу(ДеревоДокументов,ТЗДокументов);
	
	ТЗГрупировкаПоДоговору = ТЗДокументов.Скопировать(,"ДоговорКонтрагента");
	ТЗГрупировкаПоДоговору.Свернуть("ДоговорКонтрагента");
	Отказ = Ложь;
	Для Каждого СтрДоговор Из ТЗГрупировкаПоДоговору Цикл 
			СтруктураПоиска = новый Структура("ДоговорКонтрагента",СтрДоговор.ДоговорКонтрагента);
			ТаблицаДокументовкОбъединению = ТЗДокументов.НайтиСтроки(СтруктураПоиска);
			Если ТаблицаДокументовкОбъединению.Количество() <> 0 Тогда 
				Если ТаблицаДокументовкОбъединению.Количество() = 1 Тогда 
					Сообщить("По договору """+ТаблицаДокументовкОбъединению[0].ДоговорКонтрагента+""" выбран один документ к объединению """+ТаблицаДокументовкОбъединению[0].ДокументПоступления+"""
					| Объединение невозможно",СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				НачатьТранзакцию();
				
				СоздатьИЗаполнитьДокументПоступления(ТаблицаДокументовкОбъединению,Отказ);
				УдалитьДокументыПоступления(ТаблицаДокументовкОбъединению,Отказ);
				
				Если Отказ Тогда 
					ОтменитьТранзакцию();	
				иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;	
				
			КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если СозданныеДокументы.Количество() <> 0 Тогда 
		Предупреждение("Для продолжения необходимо обновить список документов");
		Возврат;
	КонецЕсли;
	//+++ С.Селин
	ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ОбъединениеЗаказовОдногоКлиента);
	ОбъединитьДокументыПоступления(); 
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ОбъединениеЗаказовОдногоКлиента,ВремяНачала);
	
КонецПроцедуры

Процедура ОтметитьПодчиненные(ТекущаяСтрокаДерева)
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		СтрокаДерева.Флаг=ТекущаяСтрокаДерева.Флаг;
		ОтметитьПодчиненные(СтрокаДерева);
	КонецЦикла;
КонецПроцедуры

Процедура ОтметитьРодителей(ТекущаяСтрокаДерева)
	ТекущийРодитель=ТекущаяСтрокаДерева.Родитель;
	Если ТекущийРодитель=Неопределено Тогда 
		Возврат 
	КонецЕсли;
	Соотв=Новый Соответствие; 
	Для Каждого СтрокаДерева из ТекущийРодитель.Строки Цикл
		Соотв.Вставить(Строка(СтрокаДерева.Флаг),Истина); 
		Если Соотв.Количество()>1 Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекущийРодитель.Флаг=?(Соотв.Количество()>1,2,СтрокаДерева.Флаг);
	ОтметитьРодителей(ТекущийРодитель);
КонецПроцедуры

Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	ТекущаяСтрокаДерева=ЭлементыФормы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущаяСтрокаДерева=Неопределено Тогда
		Возврат 
	КонецЕсли;
	Если ТекущаяСтрокаДерева.Флаг = 2 Тогда
		ТекущаяСтрокаДерева.Флаг = 0
	КонецЕсли;
	ОтметитьПодчиненные(ТекущаяСтрокаДерева);
	ОтметитьРодителей(ТекущаяСтрокаДерева);
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
КонецПроцедуры

Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Родитель = Неопределено Тогда 
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель2ВыбратьВсе(Элемент)
	Для каждого СтрокаДерева Из ДеревоДокументов.Строки Цикл
		СтрокаДерева.Флаг = 1;
		ОтметитьПодчиненные(СтрокаДерева); 
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2ОтменитьВсе(Элемент)
	Для каждого СтрокаДерева Из ДеревоДокументов.Строки Цикл
		СтрокаДерева.Флаг = 0;
		ОтметитьПодчиненные(СтрокаДерева); 
	КонецЦикла;
КонецПроцедуры


мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);
