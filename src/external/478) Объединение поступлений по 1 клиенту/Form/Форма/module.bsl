Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт;

//<<<Адиянов<<<
Процедура ПриОткрытии()
	//Флажок1 = истина;
	ДатаОтгрузки =  НачалоДня( ТекущаяДата() ); // Сегодня
	
	ДатаОтгрузки0 =  ДатаОтгрузки;
	ДатаОтгрузки1 =  КонецДня ( ДатаОтгрузки );  
	
	
	//+++07.11.2014 - массив всех филиалов + 0-ой элемент - это Головное подразделение
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00005"),"Ярославль"); //Ярославль
	Филиал = яштПоставщики.ПолучитьМассивФилиалов();
	для i=1 по Филиал.Количество()-1 цикл
		назв = Филиал[i].Наименование;
		назв = стрЗаменить(назв, "Подразделение ", "");
		ЭлементыФормы.Подразделение.СписокВыбора.Добавить(Филиал[i], назв);
	КонецЦикла;
	
	////+++ 22.04.2014 специально для Федунова
	//Если ПараметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Федунов") тогда
	//	Контрагент1 = справочники.Контрагенты.НайтиПоКоду("П000382");
	//	ЭлементыФормы.Контрагент1.Доступность = ложь;
	//	
	//	ЭлементыФормы.КомментарийЗаказа.Видимость = истина;
	//	ЭлементыФормы.Комментарий.Видимость = истина;
	//КонецЕсли;
	
КонецПроцедуры

Процедура Контрагент1ПриИзменении(Элемент)
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьОграниченныеИзмененияДокументовПриходаПоОТХ") Тогда
		
		НаборЗаписей = РегистрыСведений.ОтсрочкиПлатежейПоставщикам.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		
		ТЗКонтр = НаборЗаписей.Выгрузить();
		ТЗКонтр.Свернуть("Поставщик");
		
		Если ТЗКонтр.Найти(Элемент.Значение,"Поставщик") = Неопределено Тогда 
		
			Сообщить("Вам нельзя выбирать этого контрагента!!!");
			Контрагент1 = Справочники.Контрагенты.ПустаяСсылка();
			
		КонецЕсли;
			
	КонецЕсли;
	//!УТОЧНИТЬ! возможно нужно установить ограничение по контрагентам
	//Если СокрЛП(Контрагент1.Код) = "93273" //Евротранс 
	//	или СокрЛП(Контрагент1.Код) = "П000382"//+++ 07.11.2014 Федунов
	//	тогда
	//	ЭлементыФормы.КомментарийЗаказа.Видимость = истина;
	//	ЭлементыФормы.Комментарий.Видимость = истина;
	//Иначе
	//	Комментарий = "";
	//КонецЕсли;	
	//
	//Если Контрагент1.ЗапретитьВводЗаказаПокупателя тогда
	//	Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещен ввод заказов!
	//	|Объединение заказов в Новый заказ - невозможно!", 30);
	//	Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
	//ИначеЕсли контрагент1.ЗапретОтгрузки тогда
	//	Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещены отгрузки!
	//	|Отгрузить Объединенный заказ будет - невозможно!", 30);
	//КонецЕсли;	
КонецПроцедуры

Процедура КнопкаОчисткиНажатие(Элемент)
	ДатаОтгрузки0='00010101';
	ДатаОтгрузки1='00010101';
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаОтгрузки0, ?(ДатаОтгрузки1='0001-01-01', ДатаОтгрузки1, КонецДня(ДатаОтгрузки1)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаОтгрузки0 = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОтгрузки1 = КонецДня(НастройкаПериода.ПолучитьДатуОкончания());
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьПоступленияНажатие(Элемент)
	ЗаполнитьДокументыПоступления();
КонецПроцедуры

Процедура Контрагент1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = ложь;
	//СписокКонтр = ПолучитьСписокКонтрагентов();
	//Если СписокКонтр.Количество()=0 тогда
	//	Предупреждение("У вас нет доступных контрагентов, для объединения заказов!",10);
	//	возврат;
	//КонецЕсли;
	//формаКонтр = справочники.контрагенты.ПолучитьФормуВыбора();
	//формаКонтр.СправочникСписок.Отбор.ссылка.ВидСравнения = видСравнения.ВСписке;
	//формаКонтр.СправочникСписок.Отбор.ссылка.Значение = СписокКонтр;
	//формаКонтр.СправочникСписок.Отбор.ссылка.Использование = Истина;
	//Контрагент1 = формаКонтр.ОткрытьМодально();
	
КонецПроцедуры
//-----для МИМ - берем только контрагентов с ПриниматьЗаказыЧерезСайт -------------------
//----------- и ОсновнойДоговорКонтрагента.ОтветственноеЛицо = текПользователь-----------
функция ПолучитьСписокКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.Владелец.ПометкаУдаления
	|";
	
	//Если Флажок2 тогда
	//Запрос.Текст = Запрос.Текст  + "	И ДоговорыКонтрагентов.Владелец.ПриниматьЗаказыЧерезСайт
	//|";
	//КонецЕсли;
	
	//отбор контрагентов только по себе
	Если НЕ РольДоступна("ПолныеПрава") тогда
		Запрос.Текст = Запрос.Текст + "	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
		|ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
		Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	рез = новый СписокЗначений;
	Если Выборка.Количество()>0 тогда
		рез.ЗагрузитьЗначения( Выборка.ВыгрузитьКолонку("Ссылка") );
	КонецЕсли;
	
	Возврат  рез;	
	
КонецФункции

Процедура ДеревоВТаблицу(ТекущаяСтрокаДерева,Таблица,Уровень=0)
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Если СтрокаДерева.Флаг = 0 Тогда 
				Продолжить;
			КонецЕсли;	
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаДерева);
		КонецЕсли;
		ДеревоВТаблицу(СтрокаДерева,Таблица,Уровень+1);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНомерДокумента(СтрокаКомментария)
	Номер = "";
	СтрокаПоиска = "# Задание ";
	НачалоЗадания = Найти(СтрокаКомментария,СтрокаПоиска);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	Если НачалоЗадания <> 0 Тогда 
		Номер = Сред(СтрокаКомментария,НачалоЗадания + ДлинаСтрокиПоиска,8);  //8 - Длина номера задания 
	КонецЕсли;	
	Возврат  СокрЛП(Номер);
КонецФункции	

Процедура ДополнитьТаблицуДокументовПоступления(ТаблицаДокументовПоступления)
	Для Каждого Стр Из ТаблицаДокументовПоступления Цикл 
		Если Найти(Стр.Комментарий,"# Задание") = 0 Тогда 
			Стр.НомерЗаданияНаПеревозку = "";
		Иначе
			Стр.НомерЗаданияНаПеревозку = ПолучитьНомерДокумента(Стр.Комментарий);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ОтобратьДокументыПоступления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументПоступления,
	|	ПоступлениеТоваровУслуг.Комментарий,
	|	""########"" КАК НомерЗаданияНаПеревозку
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Проведен
	|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
	|	И ПоступлениеТоваровУслуг.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Дата1", ДатаОтгрузки0);
	Запрос.УстановитьПараметр("Дата2", ДатаОтгрузки1);
	Запрос.УстановитьПараметр("Контрагент", Контрагент1);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если не РезультатЗапроса.Пустой() Тогда 
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДокументыПоступления()
	
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
	ТаблицаДокументовПоступления = ОтобратьДокументыПоступления();
	Если ТаблицаДокументовПоступления = Неопределено Тогда Возврат; КонецЕсли;
	
	ДополнитьТаблицуДокументовПоступления(ТаблицаДокументовПоступления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТПоступления
	|ИЗ
	| &ВТПоступления Как ВТПоступления
	| ;
	|ВЫБРАТЬ
	|ЗаданиеНаОтгрузку.Ссылка КАК ЗаданиеНаОтгрузку,
	|ЗаданиеНаОтгрузку.Номер,
	|ЗаданиеНаОтгрузку.Водитель,
	|ЗаданиеНаОтгрузку.ГосНомерАвтомобиля
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
	|ГДЕ
	|	ЗаданиеНаОтгрузку.Номер В
	|			(ВЫБРАТЬ
	|				ВТПоступления.НомерЗаданияНаПеревозку
	|			ИЗ
	|				ВТПоступления КАК ВТПоступления)
	|	И ЗаданиеНаОтгрузку.Дата >= &Дата1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПоступления.Комментарий,
	|	Задания.Номер,
	|	Задания.Водитель,
	|	Задания.ГосНомерАвтомобиля,
	|	ВТПоступления.ДокументПоступления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТПоступления.ДокументПоступления.СуммаДокумента СуммаДокумента,
	|	Задания.ЗаданиеНаОтгрузку,
	|   ВТПоступления.ДокументПоступления
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задания КАК Задания
	|		ПО ВТПоступления.НомерЗаданияНаПеревозку = Задания.Номер
	|ИТОГИ
	|СУММА(СуммаДокумента)
	|ПО
	|	ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("Дата1", ДатаОтгрузки0);
	Запрос.УстановитьПараметр("ВТПоступления", ТаблицаДокументовПоступления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоговорКонтрагента = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
		нстр=ДеревоДокументов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нстр, ВыборкаДоговорКонтрагента);
		
		ВыборкаДетальныеЗаписи = ВыборкаДоговорКонтрагента.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			нстр2=нстр.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(нстр2, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	для каждого стр1 из ДеревоДокументов.Строки цикл
		ЭлементыФормы.ДеревоДокументов.Развернуть(Стр1, Истина);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДеревоДокументовФлагПриИзменении(Элемент)
	ТекущаяСтрокаДерева=ЭлементыФормы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущаяСтрокаДерева=Неопределено Тогда Возврат КонецЕсли;
КонецПроцедуры

Функция ЕстьТоварыВДокументахПоступления(ТаблицаДокументовкОбъединению)
	КоличествоТоваров = 0;
	Для Каждого Документ Из ТаблицаДокументовкОбъединению Цикл 
		КоличествоТоваровВДокументе = Документ.ДокументПоступления.Товары.Количество(); 
		Если КоличествоТоваровВДокументе <> 0 Тогда 
			Сообщить("В документе """+ Документ.ДокументПоступления + """ есть товары",СтатусСообщения.Внимание);
			КоличествоТоваров = КоличествоТоваров + КоличествоТоваровВДокументе;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоТоваров <> 0;
КонецФункции

Процедура СоздатьИЗаполнитьДокументПоступления(ТаблицаДокументовкОбъединению,Отказ)
	
	//Если не товары тогда
	//	
	//	Отказ = ЕстьТоварыВДокументахПоступления(ТаблицаДокументовкОбъединению);
	//	
	//КонецЕсли;

	Если Отказ Тогда
		Сообщить("Операция объединения прервана",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументовкОбъединениюТЗ = новый ТаблицаЗначений;
	ТаблицаДокументовкОбъединениюТЗ.Колонки.Добавить("ДокументПоступления");
	ТаблицаДокументовкОбъединениюТЗ.Колонки.Добавить("Заказ");
	
	//ТаблицаДокументовкОбъединениюТЗ.ЗагрузитьКолонку(ТаблицаДокументовкОбъединению,"ДокументПоступления");
	
	Для каждого стр из ТаблицаДокументовкОбъединению Цикл
		стрНов = ТаблицаДокументовкОбъединениюТЗ.Добавить();
		стрНов.ДокументПоступления = стр.ДокументПоступления;
        стрНов.Заказ = стр.ДокументПоступления.сделка;
	КонецЦикла;
	
	заказпервый = ТаблицаДокументовкОбъединениюТЗ[0].Заказ;
	
	ПервыйДокумент = ТаблицаДокументовкОбъединениюТЗ[0].ДокументПоступления;
	
	НовыйДокументПоступления = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	НовыйДокументЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(НовыйДокументПоступления,ПервыйДокумент);
	
	попытка 
	
	ЗаполнитьЗначенияСвойств(НовыйДокументЗаказ,заказпервый);
	
    Исключение
	
	КонецПопытки;
	
	Преф = НовыйДокументПоступления.Подразделение.ПрефиксИБ; //"ТК"; 
	
	НовыйДокументПоступления.УстановитьНовыйНомер(Преф); 
	НовыйДокументПоступления.Дата = ПервыйДокумент.Дата;
	НовыйДокументПоступления.Комментарий = "# объединенное поступление: ";
	ГрупповойДоговор =  ПервыйДокумент.ДоговорКонтрагента;
	
	НовыйДокументЗаказ.УстановитьНовыйНомер(Преф); 
	НовыйДокументЗаказ.Дата = ПервыйДокумент.Дата;
	НовыйДокументЗаказ.Комментарий = "# объединенный заказ: ";
	//ГрупповойДоговор =  ПервыйДокумент.ДоговорКонтрагента;
	
	Для Каждого Документ Из ТаблицаДокументовкОбъединениюТЗ Цикл 
		//Заполним все табличные части из документа
		Для Каждого ТЧ Из Документ.ДокументПоступления.Метаданные().ТабличныеЧасти Цикл 
			Для Каждого СтрТЧ из Документ.ДокументПоступления[ТЧ.Имя] Цикл 
				НоваяСтрокаДокумента = НовыйДокументПоступления[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента,СтрТЧ);
			КонецЦикла;
		КонецЦикла;
		
		НовыйДокументПоступления.Поступления.Свернуть("ПоступлениеТоваровУслуг");
		Если Документ.ДокументПоступления.Поступления.Количество()=0 тогда //+++ 21.06.2016
			НовСтрНовыйДокументПоступления = НовыйДокументПоступления.Поступления.Добавить();
			НовСтрНовыйДокументПоступления.ПоступлениеТоваровУслуг = Документ.ДокументПоступления;
		КонецЕсли;
		НовыйДокументПоступления.Комментарий =  НовыйДокументПоступления.Комментарий + Документ.ДокументПоступления.Номер + "; ";
	
	КонецЦикла;
	
	Попытка
	
	Для Каждого Документ Из ТаблицаДокументовкОбъединениюТЗ Цикл 
		//Заполним все табличные части из документа
		Для Каждого ТЧ Из Документ.Заказ.Метаданные().ТабличныеЧасти Цикл 
			Для Каждого СтрТЧ из Документ.Заказ[ТЧ.Имя] Цикл 
				НоваяСтрокаДокумента = НовыйДокументЗаказ[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента,СтрТЧ);
			КонецЦикла;
		КонецЦикла;
		
		НовыйДокументЗаказ.Комментарий =  НовыйДокументЗаказ.Комментарий + Документ.Заказ.Номер + "; ";
		
		обЗаказ = Документ.Заказ.Получитьобъект();
		
		обЗаказ.ПометкаУдаления = Истина;
		
		обЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	КонецЦикла;
	
    Исключение
	
	КонецПопытки;
	
	НовыйДокументПоступления.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Цена,СтавкаНДС,СерияНоменклатуры,ХарактеристикаНоменклатуры,ЗаказПокупателя,Проект,Склад,ПриходныйОрдер,ЗаказПоставщику,КодТовараЭДО","Количество,Сумма,СуммаНДС,КоличествоМест,Вес");
	
	НовыйДокументЗаказ.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,ЕдиницаИзмеренияМест,Коэффициент,Цена,СтавкаНДС,ХарактеристикаНоменклатуры,ЗаказПокупателя,ПлановаяСебестоимость,Статус,Комментарий,Основание","Количество,Сумма,СуммаНДС,КоличествоМест,Вес");
	//НовыйДокументПоступления.Дата = ПервыйДокумент.Дата;
	
	НовыйДокументПоступления.ГрафикОплаты.Очистить();
	Нов = НовыйДокументПоступления.ГрафикОплаты.Добавить();
	нов.Дата = ТекущаяДата();
	Нов.ПроцентОплаты = 100;
	
	Попытка
		Если заказпервый <> Документы.ЗаказПоставщику.ПустаяСсылка() и заказпервый <> неопределено Тогда
		    НовыйДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщить("ОШИБКА! "+ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	НовыйДокументПоступления.Сделка = НовыйДокументЗаказ.Ссылка;
	
	Попытка
		НовыйДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	НовСтрСозданныеДокументы = СозданныеДокументы.Добавить();
	НовСтрСозданныеДокументы.ПоступлениеТоваровУслуг = НовыйДокументПоступления.Ссылка;
	НовСтрСозданныеДокументы.ДоговорКонтрагента      = НовыйДокументПоступления.ДоговорКонтрагента;
	НовСтрСозданныеДокументы.СуммаДокумента          = НовыйДокументПоступления.СуммаДокумента;
	НовСтрСозданныеДокументы.Комментарий             = НовыйДокументПоступления.Комментарий;
КонецПроцедуры

Процедура УдалитьДокументыПоступления(ТаблицаДокументовкОбъединению,Отказ)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	Для Каждого Документ Из ТаблицаДокументовкОбъединению Цикл 
		ДокументОбъект = Документ.ДокументПоступления.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = истина;
		ДокументОбъект.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+ДокументОбъект.Комментарий;
		попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			сообщить(" Документ помечен на удаление: "+строка(ДокументОбъект)+" на сумму: "+ ДокументОбъект.СуммаДокумента);
		исключение
			сообщить(" Не удалось установить пометку удаления док: "+строка(ДокументОбъект) , СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		конецПопытки;	
	КонецЦикла;

КонецПроцедуры

Процедура ОбъединитьДокументыПоступления() 
	
	ТЗДокументов = Новый  ТаблицаЗначений;
	Для каждого рКолонка из ДеревоДокументов.Колонки Цикл
			ТЗДокументов.Колонки.Добавить(рКолонка.Имя,рКолонка.ТипЗначения,рКолонка.Заголовок,рКолонка.Ширина);
	КонецЦикла;
	
	ДеревоВТаблицу(ДеревоДокументов,ТЗДокументов);
	
	ТЗГрупировкаПоДоговору = ТЗДокументов.Скопировать(,"ДоговорКонтрагента");
	ТЗГрупировкаПоДоговору.Свернуть("ДоговорКонтрагента");
	Отказ = Ложь;
	Для Каждого СтрДоговор Из ТЗГрупировкаПоДоговору Цикл 
			СтруктураПоиска = новый Структура("ДоговорКонтрагента",СтрДоговор.ДоговорКонтрагента);
			ТаблицаДокументовкОбъединению = ТЗДокументов.НайтиСтроки(СтруктураПоиска);
			Если ТаблицаДокументовкОбъединению.Количество() <> 0 Тогда 
				Если ТаблицаДокументовкОбъединению.Количество() = 1 Тогда 
					Сообщить("По договору """+ТаблицаДокументовкОбъединению[0].ДоговорКонтрагента+""" выбран один документ к объединению """+ТаблицаДокументовкОбъединению[0].ДокументПоступления+"""
					| Объединение невозможно",СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;
				НачатьТранзакцию();
				
				СоздатьИЗаполнитьДокументПоступления(ТаблицаДокументовкОбъединению,Отказ);
				УдалитьДокументыПоступления(ТаблицаДокументовкОбъединению,Отказ);
				
				Если Отказ Тогда 
					ОтменитьТранзакцию();	
				иначе
					ЗафиксироватьТранзакцию();
				КонецЕсли;	
				
			КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если СозданныеДокументы.Количество() <> 0 Тогда 
		Предупреждение("Для продолжения необходимо обновить список документов");
		Возврат;
	КонецЕсли;
	//+++ С.Селин
	ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ОбъединениеЗаказовОдногоКлиента);
	ОбъединитьДокументыПоступления(); 
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ОбъединениеЗаказовОдногоКлиента,ВремяНачала);
	
КонецПроцедуры

Процедура ОтметитьПодчиненные(ТекущаяСтрокаДерева)
	Для каждого СтрокаДерева из ТекущаяСтрокаДерева.Строки Цикл
		СтрокаДерева.Флаг=ТекущаяСтрокаДерева.Флаг;
		ОтметитьПодчиненные(СтрокаДерева);
	КонецЦикла;
КонецПроцедуры

Процедура ОтметитьРодителей(ТекущаяСтрокаДерева)
	ТекущийРодитель=ТекущаяСтрокаДерева.Родитель;
	Если ТекущийРодитель=Неопределено Тогда 
		Возврат 
	КонецЕсли;
	Соотв=Новый Соответствие; 
	Для Каждого СтрокаДерева из ТекущийРодитель.Строки Цикл
		Соотв.Вставить(Строка(СтрокаДерева.Флаг),Истина); 
		Если Соотв.Количество()>1 Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекущийРодитель.Флаг=?(Соотв.Количество()>1,2,СтрокаДерева.Флаг);
	ОтметитьРодителей(ТекущийРодитель);
КонецПроцедуры

Процедура ДеревоДокументовПриИзмененииФлажка(Элемент, Колонка)
	ТекущаяСтрокаДерева=ЭлементыФормы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущаяСтрокаДерева=Неопределено Тогда
		Возврат 
	КонецЕсли;
	Если ТекущаяСтрокаДерева.Флаг = 2 Тогда
		ТекущаяСтрокаДерева.Флаг = 0
	КонецЕсли;
	ОтметитьПодчиненные(ТекущаяСтрокаДерева);
	ОтметитьРодителей(ТекущаяСтрокаДерева);
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	ДеревоДокументов.Строки.Очистить();
	СозданныеДокументы.Очистить();
КонецПроцедуры

Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Родитель = Неопределено Тогда 
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель2ВыбратьВсе(Элемент)
	Для каждого СтрокаДерева Из ДеревоДокументов.Строки Цикл
		СтрокаДерева.Флаг = 1;
		ОтметитьПодчиненные(СтрокаДерева); 
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанель2ОтменитьВсе(Элемент)
	Для каждого СтрокаДерева Из ДеревоДокументов.Строки Цикл
		СтрокаДерева.Флаг = 0;
		ОтметитьПодчиненные(СтрокаДерева); 
	КонецЦикла;
КонецПроцедуры


мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);
