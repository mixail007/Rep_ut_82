
Перем СмещениеКолонок, СмещениеСтрок;
Перем КолонкаКодСклада, КолонкаПроценты;
Перем КолонкаКоличОтделы;
Перем СамаяНижняяСтрока, СамаяВерхняяСтрока, КоличествоРасчетныхКолонок;
Перем СтрокаДаты;
Перем тзКоординатыСкладов;


Процедура ПриОткрытии()
	
	ТекДата = ТекущаяДата();
	НачПериода = НачалоМесяца(ТекДата);
	КонПериода = КонецМесяца(ТекДата);
	
	СформироватьТабТовары();
	
КонецПроцедуры

Процедура ПоказатьДанныеПрошлыхДействий()
	
	ДанныеПакет = СформироватьДанныеПрошлыеСписания();
	тзДаты = ДанныеПакет[1].Выгрузить();
	Если тзДаты.Количество() > КоличествоРасчетныхКолонок Тогда
		Сообщить("В этом периоде слишком много списаний, будут показаны только первые " + КоличествоРасчетныхКолонок);
	КонецЕсли;
	
	ПоказатьДатыПрошлыхСписаний(тзДаты);
	ПоказатьКоличестваПрошлыхСписаний(тзДаты, ДанныеПакет[2].Выгрузить());
	
КонецПроцедуры // ПоказатьДанныеПрошлыхДействий()

Процедура ПоказатьКоличестваПрошлыхСписаний(тзДаты, тзСписания)
	
	СтруктОтбора = Новый Структура("Дата, СкладКод, НоменклатураКод, ПодразделениеКод");
	СчДата = 1;
	Для Каждого ТекСтрДата Из тзДаты Цикл
		ВысотаНакопит = 0;
		Для Каждого ТекСтрСклад Из тзКоординатыСкладов Цикл
			ТекСкладВерх = СамаяВерхняяСтрока - СмещениеСтрок + ВысотаНакопит;
			ТекСкладКод  = ПолучитьТекстЯчейка(ТекСкладВерх, КолонкаКодСклада);
			СчНоменкл    = 1;
			Пока СчНоменкл < ТекСтрСклад.ВысотаОбласти + 1 Цикл
				ТекСтрНоменклВерх = СтрокаДаты + СчНоменкл + ВысотаНакопит;
				ТекНоменклКод = ПолучитьТекстЯчейка(ТекСтрНоменклВерх, КолонкаКодСклада + 3);
				ТекНоменклКолич = 0;
				Для СчПодразд = 0 По ТекСтрСклад.ВысотаСтроки - 1 Цикл
					ТекСтрПодразд = ТекСтрНоменклВерх + СчПодразд;
					ТекПодраздКод = ПолучитьТекстЯчейка(ТекСтрПодразд, КолонкаПроценты - 1);
					СтруктОтбора.Дата             = ТекСтрДата.Дата;
					СтруктОтбора.СкладКод         = ТекСкладКод;
					СтруктОтбора.НоменклатураКод  = ТекНоменклКод;
					СтруктОтбора.ПодразделениеКод = ТекПодраздКод;
					МасСтр = тзСписания.НайтиСтроки(СтруктОтбора);
					Если НЕ МасСтр.Количество() = 0 Тогда
						ТекПодраздКоличИтогПоСтроке = ПолучитьЗначениеЯчейки(ТекСтрПодразд, КолонкаПроценты + 2);
						ТекПодраздКолич = МасСтр[0].Количество;
						УстановитьЗначениеВЯчейку(ТекПодраздКоличИтогПоСтроке + ТекПодраздКолич, ТекСтрПодразд, КолонкаПроценты + 2);
						ТекНоменклКолич = ТекНоменклКолич + ТекПодраздКолич;
					КонецЕсли;
				КонецЦикла;
				Обл = ПолучитьОбластьЯчейки(ТекСтрНоменклВерх, СчДата + СмещениеКолонок);
				Обл.Значение = ТекНоменклКолич;
				//Обл.Защита   = Истина;
				СчНоменкл = СчНоменкл + ТекСтрСклад.ВысотаСтроки;
			КонецЦикла;
			ВысотаНакопит = ВысотаНакопит + ТекСтрСклад.ВысотаОбласти;
		КонецЦикла;
		СчДата = СчДата + 1;
		Если СчДата > КоличествоРасчетныхКолонок Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СчДата <= КоличествоРасчетныхКолонок Тогда
		ВысотаНакопит = 0;
		Для Каждого ТекСтрСклад Из тзКоординатыСкладов Цикл
			ТекСкладВерх = СамаяВерхняяСтрока - СмещениеСтрок + ВысотаНакопит;
			СчНоменкл    = 1;
			Пока СчНоменкл < ТекСтрСклад.ВысотаОбласти + 1 Цикл
				ТекСтрНоменклВерх = СтрокаДаты + СчНоменкл + ВысотаНакопит;
				Обл = ПолучитьОбластьЯчейки(ТекСтрНоменклВерх, СчДата + СмещениеКолонок);
				Обл.Защита   = Ложь;
				СчНоменкл = СчНоменкл + ТекСтрСклад.ВысотаСтроки;
			КонецЦикла;
			ВысотаНакопит = ВысотаНакопит + ТекСтрСклад.ВысотаОбласти;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПоказатьКоличестваПрошлыхСписаний()

Процедура ПоказатьДатыПрошлыхСписаний(тзДаты)
	
	СчетчикКолонок = 1;
	Для Каждого ТекСтрДата Из тзДаты Цикл
		
		Обл = ПолучитьОбластьЯчейки(СтрокаДаты, СчетчикКолонок + СмещениеКолонок);
		Обл.Значение = ТекСтрДата.Дата;
		
		СчетчикКолонок = СчетчикКолонок + 1;
		Если СчетчикКолонок > КоличествоРасчетныхКолонок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетчикКолонок <= КоличествоРасчетныхКолонок Тогда
		Обл = ПолучитьОбластьЯчейки(СтрокаДаты, СчетчикКолонок + СмещениеКолонок);
		Обл.Защита = Ложь;
	КонецЕсли;
	//БегунокПоОстальнымКолонкам = 0;
	//Для н = СчетчикКолонок По КоличествоРасчетныхКолонок Цикл
	//	Обл = ПолучитьОбластьЯчейки(СтрокаДаты, СчетчикКолонок + БегунокПоОстальнымКолонкам + СмещениеКолонок);
	//	Обл.Защита = Ложь;
	//	БегунокПоОстальнымКолонкам = БегунокПоОстальнымКолонкам + 1;
	//КонецЦикла;
	
КонецПроцедуры // ПоказатьДатыПрошлыхСписаний()

Функция СформироватьДанныеПрошлыеСписания()
	
    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТребованиеНакладнаяМатериалы.Ссылка.Дата, ДЕНЬ) КАК Дата,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Подразделение,
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	СУММА(ТребованиеНакладнаяМатериалы.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ втОсновныеДанные
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ТребованиеНакладнаяМатериалы.Ссылка = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	ТребованиеНакладнаяМатериалы.Ссылка.Дата МЕЖДУ &НачПериода И КОНЕЦПЕРИОДА(&КонПериода, ДЕНЬ)
	|	И ТребованиеНакладнаяМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ТребованиеНакладнаяМатериалы.Номенклатура В(&Номенклатура)
	|	И ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТребованиеНакладнаяМатериалы.Номенклатура,
	|	ТребованиеНакладнаяМатериалы.Ссылка.Подразделение,
	|	НАЧАЛОПЕРИОДА(ТребованиеНакладнаяМатериалы.Ссылка.Дата, ДЕНЬ),
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Склады)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОсновныеДанные.Дата
	|ИЗ
	|	втОсновныеДанные КАК втОсновныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеДанные.Подразделение,
	|	втОсновныеДанные.Номенклатура,
	|	втОсновныеДанные.Количество,
	|	втОсновныеДанные.Подразделение.Код,
	|	втОсновныеДанные.Номенклатура.Код,
	|	втОсновныеДанные.Дата,
	|	втОсновныеДанные.Склад,
	|	втОсновныеДанные.Склад.Код
	|ИЗ
	|	втОсновныеДанные КАК втОсновныеДанные";
	
	МасНоменкл = Товары.ВыгрузитьКолонку("Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", МасНоменкл);
	Запрос.УстановитьПараметр("НачПериода"  , НачПериода);
	Запрос.УстановитьПараметр("КонПериода"  , КонПериода);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	Возврат РезультатПакет;
	
КонецФункции // СформироватьДанныеПрошлыеСписания()

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ВыполнитьСозданиеДокументов();
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Ложь;
	НастройкаПериода.РедактироватьКакПериод   = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Функция ВсеГотовоДляПоказаДанныхЗаПериод()
	
	ВсеОК = Истина;
	
	Если НачПериода = '00010101000000' Тогда
		ВсеОК = Ложь;
		Сообщить("Укажите начало периода");
	КонецЕсли;
	
	Если КонПериода = '00010101000000' Тогда
		ВсеОК = Ложь;
		Сообщить("Укажите окончание периода");
	КонецЕсли;
	
	Если НачПериода > КонПериода Тогда
		ВсеОК = Ложь;
		Сообщить("Начало периода не должно превышать его окончание");
	КонецЕсли;
	
	Возврат ВсеОК;
	
КонецФункции // ВсеГотовоДляПоказаДанныхЗаПериод()

Процедура ОсновныеДействияФормыПоказатьДанныеЗаПериод(Кнопка)
	
	Если ВсеГотовоДляПоказаДанныхЗаПериод() Тогда
		
		ЭлементыФормы.Результат.Очистить();
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ЭтотОбъект.ПолучитьМакет("Макет1");
		
		Обл = Макет.ПолучитьОбласть("Шап8");
		ТабДок.Вывести(Обл);
		
		ЭлементыФормы.Результат.Вывести(ТабДок);
		
		ПоказатьДанныеПрошлыхДействий();
		ПоказатьВедомостьЗаПериод();
		
	Иначе
		Предупреждение("Не удалось показать данны", 20);
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	СтруктКоординаты = ПолучитьКоординатыОбласти(Область);
	ПересчитатьКоличество(Область, СтруктКоординаты);
	
КонецПроцедуры

Функция ПолучитьКоординатыОбласти(Область)
	
	ИмяОбласти = Область.Имя;
	
	ПоцизицДвоеточ = Найти(ИмяОбласти, ":");
	Если ПоцизицДвоеточ = 0 Тогда
		СтруктЛевВерх = ПолучитьКоординатыСтрокиКолонки(ИмяОбласти);
		СтруктКоординаты = Новый Структура("НомерСтрокиВерх, НомерСтрокиНиз, НомерКолонки", 
							СтруктЛевВерх.НомерСтроки, СтруктЛевВерх.НомерСтроки, СтруктЛевВерх.НомерКолонки);
	Иначе						
		
		ВерхнЧастьКоординат = Лев(ИмяОбласти , ПоцизицДвоеточ - 1);
		НижнЧастьКоординат  = Сред(ИмяОбласти, ПоцизицДвоеточ + 1);
		
		СтруктЛевВерх = ПолучитьКоординатыСтрокиКолонки(ВерхнЧастьКоординат);
		СтруктПравНиз = ПолучитьКоординатыСтрокиКолонки(НижнЧастьКоординат);
		
		СтруктКоординаты = Новый Структура("НомерСтрокиВерх, НомерСтрокиНиз, НомерКолонки", 
							СтруктЛевВерх.НомерСтроки, СтруктПравНиз.НомерСтроки, СтруктЛевВерх.НомерКолонки);
		
	КонецЕсли;
	
	Возврат СтруктКоординаты;
	
КонецФункции // ПолучитьКоординатыОбласти()

Функция ПолучитьКоординатыСтрокиКолонки(ИмяОбласти)
	
	Позиция_С = Найти(ИмяОбласти, "C");
	СтрокиИмя = Лев(ИмяОбласти, Позиция_С - 1);
	НомерСтрокиСимволы = Сред(СтрокиИмя, 2);
	НомерСтрокиЧисло = Число(НомерСтрокиСимволы);
	
	НомерКолонкиСимволы = Сред(ИмяОбласти, Позиция_С + 1);
	НомерКолонкиЧисло = Число(НомерКолонкиСимволы);
	
	Структ = Новый Структура("НомерСтроки, НомерКолонки", НомерСтрокиЧисло, НомерКолонкиЧисло);
	
	Возврат Структ;
	
КонецФункции // ПолучитьКоординатыСтрокиКолонки()

Функция СформироватьТабРаспределенноеКоличество(КоличРаспределить, НомерСтрокиВерх, НомерСтрокиНиз)
	
	тзКоличПоОтделам = Новый ТаблицаЗначений; // Нужна для исправления ошибки округления
	тзКоличПоОтделам.Колонки.Добавить("Количество");
	Для н = НомерСтрокиВерх По НомерСтрокиНиз Цикл
		ТекСтрока  = н;
		ТекКолонка = КолонкаПроценты;
		ТекПроцентТекст = ПолучитьТекстЯчейка(ТекСтрока, ТекКолонка);
		Если ЗначениеЗаполнено(ТекПроцентТекст) Тогда
			ТекПроцент = Число(ТекПроцентТекст);
		Иначе
			ТекПроцент = 0;
		КонецЕсли;
		Если НЕ ТекПроцент = 0 Тогда
			КоличТекОтдел = Окр(КоличРаспределить / 100 * ТекПроцент, 0);
			НовСтрКоличПоОтделам = тзКоличПоОтделам.Добавить();
			НовСтрКоличПоОтделам.Количество = КоличТекОтдел;
		Иначе
			НовСтрКоличПоОтделам = тзКоличПоОтделам.Добавить();
			НовСтрКоличПоОтделам.Количество = 0;
		КонецЕсли;
	КонецЦикла;
	// Исправим ошибку округления
	ИтогРаспределеннаяСумма = тзКоличПоОтделам.Итог("Количество");
	Если НЕ КоличРаспределить = ИтогРаспределеннаяСумма Тогда
		тзКоличПоОтделам[0].Количество = тзКоличПоОтделам[0].Количество + КоличРаспределить - ИтогРаспределеннаяСумма;
	КонецЕсли;
	
	Возврат тзКоличПоОтделам;
	
КонецФункции // СформироватьТабРаспределенноеКоличество()

Процедура ПересчитатьКоличество(Область, СтруктКоординаты)
	
	Если КоординатыВлекутПересчетКоличества(СтруктКоординаты) И ТипЗнч(Область.Значение) = Тип("Число") Тогда
		КоличИтогПоСтроке = 0;
		Для н = 1 По КоличествоРасчетныхКолонок Цикл
			ТекКолонка = н + СмещениеКолонок;
			ТекСтрока  = СтруктКоординаты.НомерСтрокиВерх;
			ТекКолич = ПолучитьЗначениеЯчейки(ТекСтрока, ТекКолонка);
			КоличИтогПоСтроке = КоличИтогПоСтроке + ТекКолич;
		КонецЦикла;
		тзКоличПоОтделам = СформироватьТабРаспределенноеКоличество(КоличИтогПоСтроке, СтруктКоординаты.НомерСтрокиВерх, СтруктКоординаты.НомерСтрокиНиз);
		СмещениеЛок = 0;
		Для Каждого ТекСтр Из тзКоличПоОтделам Цикл
			ТекСтрока = СтруктКоординаты.НомерСтрокиВерх + СмещениеЛок;
			УстановитьЗначениеВЯчейку(ТекСтр.Количество, ТекСтрока, КолонкаКоличОтделы);
			СмещениеЛок = СмещениеЛок + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКоличество()

Функция КоординатыВлекутПересчетКоличества(СтруктКоординаты)
	
	КоординатыПодходят = Истина;
	
	Если СтруктКоординаты = Неопределено Тогда
		КоординатыПодходят = Ложь;
		Возврат КоординатыПодходят;
	КонецЕсли;
	
	Если НЕ (СтруктКоординаты.НомерКолонки >= СмещениеКолонок + 1 И СтруктКоординаты.НомерКолонки <= СмещениеКолонок + КоличествоРасчетныхКолонок И 
			СтруктКоординаты.НомерСтрокиВерх + СмещениеСтрок >= СамаяВерхняяСтрока И СтруктКоординаты.НомерСтрокиНиз + СмещениеСтрок <= СамаяНижняяСтрока) Тогда
		КоординатыПодходят = Ложь;
	КонецЕсли;
	
	Возврат КоординатыПодходят;
	
КонецФункции // КоординатыВлекутПересчетКоличества()

Функция ПолучитьЗначениеЯчейки(ТекСтрока, ТекКолонка)
	
	Обл = ПолучитьОбластьЯчейки(ТекСтрока, ТекКолонка);
	
	Возврат Обл.Значение;
	
КонецФункции // ПолучитьЗначениеЯчейки()

Функция ПолучитьТекстЯчейка(ТекСтрока, ТекКолонка)
	
	Обл = ПолучитьОбластьЯчейки(ТекСтрока, ТекКолонка);
	
	Возврат Обл.Текст;
	
КонецФункции // ПолучитьТекстЯчейка()

Функция ПолучитьОбластьЯчейки(ТекСтрока, ТекКолонка)
	
	ИмяОбласти = "R" + ТекСтрока + "C" + ТекКолонка + ":" + "R" + ТекСтрока + "C" + ТекКолонка;
	
	Обл = ЭлементыФормы.Результат.Область(ИмяОбласти);
	
	Возврат Обл;
	
КонецФункции // ПолучитьОбластьЯчейки()

Функция ПолучитьОбластьЯчеек(ВерхСтрока, ЛевКолонка, НижнСтрока, ПравКолонка)
	
	ИмяОбласти = "R" + ВерхСтрока + "C" + ЛевКолонка + ":" + "R" + НижнСтрока + "C" + ПравКолонка;
	
	Обл = ЭлементыФормы.Результат.Область(ИмяОбласти);
	
	Возврат Обл;
	
КонецФункции // ПолучитьОбластьЯчеек()

Процедура УстановитьЗначениеВЯчейку(Значение, ТекСтрока, ТекКолонка)
	
	ИмяОбласти = "R" + ТекСтрока + "C" + ТекКолонка + ":" + "R" + ТекСтрока + "C" + ТекКолонка;
	
	Обл = ЭлементыФормы.Результат.Область(ИмяОбласти);
	Обл.Значение = Значение;
	
КонецПроцедуры // УстановитьЗначениеВЯчейку()

Процедура ВыполнитьСозданиеДокументов()
	
	СоздатьДокументыПоСкладу();
	
КонецПроцедуры // ВыполнитьСозданиеДокументов()

Функция ИнициироватьТабТребованийНакладных()
	
	тзДокументы = Новый ТаблицаЗначений;
	тзДокументы.Колонки.Добавить("ДокСсылка");
	
	Возврат тзДокументы;
	
КонецФункции // ИнициироватьТабТребованийНакладных()

Процедура СоздатьДокументыПоСкладу()
	
	Для н = 1 По КоличествоРасчетныхКолонок Цикл
		ТекКолонка = н + СмещениеКолонок;
		Обл = ПолучитьОбластьЯчейки(СтрокаДаты, ТекКолонка);
		Если Обл.Защита = Ложь И (НЕ Обл.Значение = '00010101000000') Тогда
			тзДокументы = ИнициироватьТабТребованийНакладных();
			СоздатьДокументыТребованияНакладные(ТекКолонка, Обл.Значение, тзКоординатыСкладов, тзДокументы);
			ПоставитьЗадачуБухгалтеру(тзДокументы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СоздатьДокументыПоСкладу()

Процедура ПоставитьЗадачуБухгалтеру(тзДокументы)
	
	ТекДата = ТекущаяДата();
	
	ИсполнительБухгалтер = Справочники.Пользователи.НайтиПоКоду("Пьянкова А.Н.                                     ");
	//ИсполнительБухгалтер = Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е.                                    ");
	
	ОписаниеЗадачи = 
	"Провести требования-накладные на коробки:";
	Для Каждого ТекСтрДок Из тзДокументы Цикл
		ОписаниеЗадачи = ОписаниеЗадачи + "
		|  " + ТекСтрДок.ДокСсылка;
	КонецЦикла;
	
	З = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	
	З.Дата           = ТекДата;
	З.Инициатор      = глТекущийПользователь;
	З.Исполнитель    = ИсполнительБухгалтер;
	З.Наименование   = "Проведение требований-накладных на коробки";
	З.Описание       = ОписаниеЗадачи;
	З.Оповещение     = Истина;
	З.СрокИсполнения = КонецДня(ТекДата);
	З.СрокОповещения = КонецЧаса(ТекДата);
	
	З.Записать();
	
КонецПроцедуры // ПоставитьЗадачуБухгалтеру()

Функция ИнициироватьТабТоварыДляДокументов()
	
	тзТовары = Новый ТаблицаЗначений;
	тзТовары.Колонки.Добавить("Номенклатура");
	тзТовары.Колонки.Добавить("Количество");
	тзТовары.Колонки.Добавить("Подразделение");
	
	Возврат тзТовары;
	
КонецФункции // ИнициироватьТабТоварыДляДокументов()

Процедура СоздатьДокументыТребованияНакладные(ТекКолонка, ТекДата, тзКоординатыСкладов, тзДокументы)
	
	ВысотаНакопит    = 0;
	Организация      = Справочники.Организации.НайтиПоКоду("00001");
	СкладМатериалы = Справочники.Склады.НайтиПоКоду("00276");
	Для Каждого ТекСтрСклад Из тзКоординатыСкладов Цикл
		тзТоварыДок = ИнициироватьТабТоварыДляДокументов();
		ТекСкладВысота = ТекСтрСклад.ВысотаОбласти;
		ТекСкладВерх   = СамаяВерхняяСтрока - СмещениеСтрок + ВысотаНакопит;
		ТекСкладНиз    = ТекСкладВерх + ТекСкладВысота - 1;
		ОблКодСклада   = ПолучитьОбластьЯчеек(ТекСкладВерх, КолонкаКодСклада, ТекСкладНиз, КолонкаКодСклада);
		КодСклада      = ОблКодСклада.Текст;
		н = 1;
		Пока н < ТекСкладВысота + 1 Цикл
			ТекСтрВерх = СтрокаДаты + н + ВысотаНакопит;
			ТекСтрНиз  = СтрокаДаты + н + ТекСтрСклад.ВысотаСтроки + ВысотаНакопит - 1;
			ТекОбл = ПолучитьОбластьЯчеек(ТекСтрВерх, ТекКолонка, ТекСтрНиз, ТекКолонка);
			ТекКолич = ТекОбл.Значение;
			Если ТекКолич > 0 Тогда
				ТекНоменклКод = ПолучитьТекстЯчейка(ТекСтрВерх, КолонкаКодСклада + 3);
				тзКоличПоОтделам = СформироватьТабРаспределенноеКоличество(ТекКолич, ТекСтрВерх, ТекСтрНиз);
				СчетчикОтделов = 0;
				Для Каждого ТекСтрОтдел Из тзКоличПоОтделам Цикл
					Если НЕ ТекСтрОтдел.Количество = 0 Тогда
						ТекОтделКод = ПолучитьТекстЯчейка(ТекСтрВерх + СчетчикОтделов, КолонкаПроценты  - 1);
						НовСтрТовар = тзТоварыДок.Добавить();
						НовСтрТовар.Номенклатура  = Справочники.Номенклатура.НайтиПоКоду(ТекНоменклКод);
						НовСтрТовар.Количество    = ТекСтрОтдел.Количество;
						НовСтрТовар.Подразделение = Справочники.Подразделения.НайтиПоКоду(ТекОтделКод);
					КонецЕсли;
					СчетчикОтделов = СчетчикОтделов + 1;
				КонецЦикла;
			КонецЕсли;
			н = н + ТекСтрСклад.ВысотаСтроки;
		КонецЦикла;
		тзПодразделения = тзТоварыДок.Скопировать();
		тзПодразделения.Свернуть("Подразделение");
		СчетчикОтделов = 0;
		Для Каждого ТекСтрПодразделение Из тзПодразделения Цикл
			СтруктОтбораПодразделение = Новый Структура("Подразделение", ТекСтрПодразделение.Подразделение);
			МасСтрТовары = тзТоварыДок.НайтиСтроки(СтруктОтбораПодразделение);
			ДокСсылка = СоздатьТребованиеНакладную(ТекДата, Организация, ТекСтрПодразделение.Подразделение, СкладМатериалы, МасСтрТовары);
			МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект   = ДокСсылка;
			МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.Склад;
			МенеджерЗаписи.Значение = Справочники.Склады.НайтиПоКоду(КодСклада);
			МенеджерЗаписи.Записать();
			ОблПоказатьСсылку = ПолучитьОбластьЯчейки(ТекСкладВерх + СчетчикОтделов, КолонкаПроценты + 3);
			//ОблПоказатьСсылку.Значение = ДокСсылка;
			ОблПоказатьСсылку.Параметр = ДокСсылка;
			//ОблПоказатьСсылку.ПараметрРасшифровки = ДокСсылка;
			ОблПоказатьСсылку.Расшифровка = ДокСсылка;
			НовСтрДок = тзДокументы.Добавить();
			НовСтрДок.ДокСсылка = ДокСсылка;
			СчетчикОтделов = СчетчикОтделов + 1;
		КонецЦикла;
		ВысотаНакопит = ВысотаНакопит + ТекСкладВысота;
	КонецЦикла;
	
КонецПроцедуры // СоздатьДокументыТребованияНакладные()

Функция СоздатьТребованиеНакладную(ТекДата, Организация, Подразделение, СкладМатериалы, МасСтрТовары)
	
	ДокОбъект = Документы.ТребованиеНакладная.СоздатьДокумент();
	ДокОбъект.Дата                         = ТекДата;
	ДокОбъект.Комментарий                  = "Списание коробок и наклеек";
	ДокОбъект.Организация                  = Организация;
	ДокОбъект.Ответственный                = глТекущийПользователь;
	ДокОбъект.ОтражатьВБухгалтерскомУчете  = Истина;
	ДокОбъект.ОтражатьВНалоговомУчете      = Истина;
	ДокОбъект.ОтражатьВУправленческомУчете = Истина;
	ДокОбъект.Подразделение                = Подразделение;
	ДокОбъект.Склад                        = СкладМатериалы;
	
	Материалы = ДокОбъект.Материалы;
	СтатьяЗатрат = Справочники.СтатьиЗатрат.НайтиПоКоду("К0125");
	Для Каждого ТекСтр Из МасСтрТовары Цикл
		НовСтрМатериал = Материалы.Добавить();
		НовСтрМатериал.ЕдиницаИзмерения = ТекСтр.Номенклатура.ЕдиницаХраненияОстатков;
		НовСтрМатериал.Качество         = Справочники.Качество.Новый;
		НовСтрМатериал.Количество       = ТекСтр.Количество;
		НовСтрМатериал.Коэффициент      = НовСтрМатериал.ЕдиницаИзмерения.Коэффициент;
		НовСтрМатериал.Номенклатура     = ТекСтр.Номенклатура;
		НовСтрМатериал.СтатьяЗатрат     = СтатьяЗатрат;
	КонецЦикла;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции // СоздатьТребованиеНакладную()

Процедура ПоказатьВедомостьЗаПериод();
	
	СхемаСКД = ПолучитьМакет("МакетВедомость");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаСКД.НастройкиПоУмолчанию);
	
	КоллекцияПараметров = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	
	Отказать = ЛОЖЬ;
	УстановитьПараметрСКД(КоллекцияПараметров, "НачалоПериода", НачПериода, Отказать);
	УстановитьПараметрСКД(КоллекцияПараметров, "КонецПериода" , КонецДня(КонПериода), Отказать);
	СкладМатериалы = Справочники.Склады.НайтиПоКоду("00276");
	УстановитьПараметрСКД(КоллекцияПараметров, "Склад"        , СкладМатериалы, Отказать);
	МасНоменкл = Товары.ВыгрузитьКолонку("Номенклатура");
	УстановитьПараметрСКД(КоллекцияПараметров, "спТовары"     , МасНоменкл, Отказать);
	
	Если Отказать Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикМакетаСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетСКД = КомпоновщикМакетаСКД.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетСКД = КомпоновщикМакетаСКД.Выполнить(СхемаСКД, КомпоновщикНастроек.Настройки);
	
	ПроцессорКомпоновкиСКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиСКД.Инициализировать(МакетСКД);
	
	ПроцессорВыводаСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВыводаСКД.УстановитьОбъект(ЭлементыФормы.ПолеТабДокВедомость);
	ЭлементыФормы.ПолеТабДокВедомость.Очистить();
	ПроцессорВыводаСКД.УстановитьДокумент(ЭлементыФормы.ПолеТабДокВедомость);	
	ПроцессорВыводаСКД.Вывести(ПроцессорКомпоновкиСКД, ИСТИНА);
	
КонецПроцедуры // ПоказатьВедомостьЗаПериод();

Процедура УстановитьПараметрСКД(КоллекцияПараметров, ИмяПараметра, ЗначениеПараметра, Отказать)
	
	Парам = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	ПараметрСКД = КоллекцияПараметров.Найти(Парам);
	Если НЕ ПараметрСКД = Неопределено Тогда
		ПараметрСКД.Значение = ЗначениеПараметра;
		ПараметрСКД.Использование = ИСТИНА;
	Иначе
		Отказать = ИСТИНА;
		Сообщить("Не удалось обнаружить параметр """ + ИмяПараметра + """ при заполнении данных общего случая");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрСКД()





Процедура СформироватьТабТовары()
	
	ДобавитьСтрокуТовары("М013823", "400*400*190"      );  // Гофроящик 400*400*190
	ДобавитьСтрокуТовары("М014122", "410*410*210"      );  // Гофроящик 410*410*210 TREBL  Т-24 С бел., с/п .,упак.
	ДобавитьСтрокуТовары("М013159", "410*410*210"      );  // Гофроящик 410*410*210 П-32 ВС бел., упак.
	ДобавитьСтрокуТовары("М014123", "425*425*215"      );  // Гофроящик 425*425*215 TREBL  Т-24 С бел.,с/п .,упак.
	ДобавитьСтрокуТовары("М013155", "425*425*215"      );  // Гофроящик 425*425*215 П-32 ВС бел.,упак.
	ДобавитьСтрокуТовары("М013156", "470*470*225"      );  // Гофроящик 470*470*225 П-32 ВС бел.,упак.
	ДобавитьСтрокуТовары("М014121", "470*470*225 TREBL");  // Гофроящик 470*470*225 TREBL Т-24 С бел., с/п ., упак.
	ДобавитьСтрокуТовары("М013161", "490*490*235"      );  // Гофроящик 490*490*235 П-32 ВС бел.,упак.
	ДобавитьСтрокуТовары("М013162", "510*510*255"      );  // Гофроящик 510*510*255 П-32 ВС бел., упак.
	ДобавитьСтрокуТовары("М014048", "565*565*280"      );  // Гофроящик 565*565*280 П-32 ВС бел., упак.
	
КонецПроцедуры // СформироватьТабТовары()

Процедура ДобавитьСтрокуТовары(КодНоменклатуры, ИмяРазмер)
	
	НовСтр = Товары.Добавить();
	
	НовСтр.Код          = КодНоменклатуры;
	НовСтр.Наименование = ИмяРазмер;
	НовСтр.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
	
КонецПроцедуры // ДобавитьСтрокуТовары()

Функция СформироватьТабКоординатыСкладов()
	
	тзКоординаты = Новый ТаблицаЗначений();
	тзКоординаты.Колонки.Добавить("Склад");
	тзКоординаты.Колонки.Добавить("ВысотаОбласти");
	тзКоординаты.Колонки.Добавить("ВысотаСтроки");
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "Переупаковка8000";
	НовСтр.ВысотаОбласти = 30;
	НовСтр.ВысотаСтроки  = 3;
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "АнгарИ";
	НовСтр.ВысотаОбласти = 20;
	НовСтр.ВысотаСтроки  = 2;
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "Питер";
	НовСтр.ВысотаОбласти = 10;
	НовСтр.ВысотаСтроки  = 1;
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "РостовДон";
	НовСтр.ВысотаОбласти = 10;
	НовСтр.ВысотаСтроки  = 1;
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "Екатеринбург";
	НовСтр.ВысотаОбласти = 10;
	НовСтр.ВысотаСтроки  = 1;
	
	НовСтр = тзКоординаты.Добавить();
	НовСтр.Склад  = "ОбособМосква";
	НовСтр.ВысотаОбласти = 10;
	НовСтр.ВысотаСтроки  = 1;
	
	Возврат тзКоординаты;
	
КонецФункции // СформироватьТабКоординатыСкладов()

/////////////////////////////////////////////////////////////////////////

СмещениеКолонок    = 7;
СмещениеСтрок      = 1;
СамаяВерхняяСтрока = 5;
СамаяНижняяСтрока  = 94;
КолонкаКодСклада = 3;
КоличествоРасчетныхКолонок = 12;
КолонкаПроценты    = 7 + КоличествоРасчетныхКолонок + 2;
КолонкаКоличОтделы = 7 + КоличествоРасчетныхКолонок + 4;
СтрокаДаты         = 4 - СмещениеСтрок;

тзКоординатыСкладов = СформироватьТабКоординатыСкладов();
	
