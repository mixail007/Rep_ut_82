
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();
    ДатаСреза = ТекущаяДата();
	
	Если  глТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда
		Подразделение = глТекущийПользователь.ОсновноеПодразделение;
	Иначе
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_b4175fbd-82d8-4044-ac66-fd299fc178bd", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("ДатаСреза", КонецДня(ДатаСреза) );
	Если Подразделение.ОбособленноеПодразделение тогда
		ПостроительОтчетаОтчет.Параметры.Вставить("Подразделение", Подразделение );
		ПостроительОтчетаОтчет.Параметры.Вставить("Транзит", Истина );
	Иначе	
		ПостроительОтчетаОтчет.Параметры.Вставить("Подразделение", Справочники.Подразделения.ПустаяСсылка() );
		ПостроительОтчетаОтчет.Параметры.Вставить("Транзит", ЛОЖЬ );
	КонецЕсли;
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаСреза,
	|			Склад.Транзитный = &Транзит
	|				И Склад.Подразделение = &Подразделение
	|				И (Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
	|					ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски))) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	|	И ТоварыНаСкладахОстатки.КоличествоОстаток < 4
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТОВАРЫ.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток
	|{ВЫБРАТЬ
	|	ТОВАРЫ.Номенклатура.Код}
	|ИЗ
	|	ВТ_Товары КАК ТОВАРЫ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ДатаСреза,
	|				Склад.Транзитный = &Транзит
	|					И Склад.Подразделение = &Подразделение
	|					И (Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
	|						ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски))) КАК ТоварыНаСкладахОстатки
	|		ПО ТОВАРЫ.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|{ГДЕ
	|	ТОВАРЫ.Номенклатура.*,
	|	ТоварыНаСкладахОстатки.Склад.*,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Остаток}
	|
	|СГРУППИРОВАТЬ ПО
	|	ТОВАРЫ.Номенклатура,
	|	ТоварыНаСкладахОстатки.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТОВАРЫ.Остаток) < 4
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|{УПОРЯДОЧИТЬ ПО
	|	Номенклатура.*,
	|	Склад.*}
	|{ИТОГИ ПО
	|	ТОВАРЫ.Номенклатура.ВидТовара.* КАК ВидТовара,
	|	Номенклатура.*,
	|	Склад.*}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_b4175fbd-82d8-4044-ac66-fd299fc178bd");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры
