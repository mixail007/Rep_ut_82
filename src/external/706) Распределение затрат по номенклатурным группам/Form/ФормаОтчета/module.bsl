Перем ДатаЗапрета;

Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = НачПериода;
    		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(КонПериода);

	ОткрытьПериодДляРедактированияДокументов()

КонецПроцедуры

Процедура КонПериодаПриИзменении(Элемент)
		ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(КонПериода);

КонецПроцедуры

Процедура НачПериодаПриИзменении(Элемент)
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = НачПериода;
	
	ОткрытьПериодДляРедактированияДокументов()
		
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
	ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
	Если  ЭлементРасшифровкиДанныхПоля.Поле = "ДоляЗатрат"  тогда
		СтандартнаяОбработка = Ложь;
		
		попытка
		НомГруппа =ЭлементРасшифровкиДанных.ПолучитьРодителей()[1].ПолучитьПоля()[0].Значение;
	    исключение
		НомГруппа = Неопределено;
		конецПопытки;
		
		Аналитика1 =ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		попытка
			Аналитика2 = ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		исключение
			Аналитика2 = Неопределено;
		конецПопытки;
		
		попытка
			Аналитика3 = ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;
		исключение
			Аналитика3 = Неопределено;
		конецПопытки;
		
		
		
		
		Если Аналитика1<>"3. Валовая прибыль" и Аналитика1<>"2. Сумма себестоимости" и Аналитика1<>"1. Сумма продаж" тогда
			
			
			Форма = ПолучитьФорму("ФормаОтчета1");
			
			Если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
				Форма.СтатьяЗатрат = Аналитика1;
				Если Аналитика2 = "4.Затраты номенклатурной группы" тогда
					форма.НоменклатурнаяГруппа = НомГруппа;	
				иначе
					форма.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
				конецЕсли;
				форма.подразделение = неопределено;
			ИначеЕсли ТипЗнч(Аналитика1) = Тип("СправочникСсылка.Подразделения") тогда
				Если Аналитика3 = "4.Затраты номенклатурной группы" тогда
					форма.НоменклатурнаяГруппа = НомГруппа;	
				иначе
					форма.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
				конецЕсли;
				форма.подразделение = Аналитика1;	
				Форма.СтатьяЗатрат = Аналитика2;
			ИначеЕсли Аналитика1 = "4.Затраты номенклатурной группы" тогда
				форма.НоменклатурнаяГруппа = НомГруппа;	
				Форма.СтатьяЗатрат = неопределено;
				форма.подразделение = неопределено;	
			иначе
				форма.подразделение = неопределено;	
				форма.СтатьяЗатрат = Неопределено;
				форма.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			конецЕсли;
			
			форма.началоПериода = НачПериода;
			Форма.КонецПериода = КонПериода;
			форма.Открыть();
			
		иначе
			ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
			ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ХранилищеВО.Записать(ИмяФайла);
			ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
			ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
			ФормаОбработки.Открыть();
			ОбработкаДЗ.ОбщийОтчет.ДатаНач = НачПериода;
			ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(КонПериода);
			Если типЗнч(НомГруппа) = Тип("СправочникСсылка.НоменклатурныеГруппы") тогда
				ОтборНоменклатурнаяГруппа = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.НоменклатурнаяГруппа");
				ОтборНоменклатурнаяГруппа.ВидСравнения = ВидСравнения.Равно;
				ОтборНоменклатурнаяГруппа.Значение = НомГруппа;
				ОтборНоменклатурнаяГруппа.Использование = Истина;
			конецЕсли;
			
			ФормаОбработки.ОбновитьОтчет();
			
			
			
		конецесли;
		
	конецЕсли;
	
	
	
КонецПроцедуры

Процедура поОплатеПриИзменении(Элемент)
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоНачислению"));
	ПараметрСКД.Использование = Истина;
	если элементыформы.поОплате.Значение=1 тогда
		ПараметрСКД.Значение  = Истина;
	иначе
		ПараметрСКД.Значение  = ложь;

	конецесли;	

КонецПроцедуры

Процедура ДействияФормысф(Кнопка)
	
список = Новый списокЗначений;
Список.Добавить(Справочники.СтатьиЗатрат.НайтиПоКоду("О0177"));//ндс
Список.Добавить(Справочники.СтатьиЗатрат.НайтиПоКоду("О0172"));//прибыль местный
Список.Добавить(Справочники.СтатьиЗатрат.НайтиПоКоду("О0174"));//прибыль федеральный	

ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтатьиНалогов"));
ПараметрСКД.Использование = Истина;
ПараметрСКД.Значение  =список;

ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НДС"));
ПараметрСКД.Использование = истина ;
ПараметрСКД.Значение  =Справочники.СтатьиЗатрат.НайтиПоКоду("О0177");
	
//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("прибыль"));
//ПараметрСКД.Использование = Истина;
//ПараметрСКД.Значение  =Справочники.СтатьиЗатрат.НайтиПоКоду("О0172");
	
ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГруппаАксы"));
ПараметрСКД.Использование = Истина;
ПараметрСКД.Значение  =Справочники.НоменклатурныеГруппы.НайтиПоКоду("Ф0070");

ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Аксы"));
ПараметрСКД.Использование = Истина;
ПараметрСКД.Значение  =Справочники.НоменклатурныеГруппы.НайтиПоКоду("00073");

ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Бонусы"));
ПараметрСКД.Использование = Истина;
ПараметрСКД.Значение  =Справочники.Номенклатура.НайтиПоКоду("9278960");
	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоНачислению"));
	ПараметрСКД.Использование = Истина;
	если элементыформы.поОплате.Значение=1 тогда
		ПараметрСКД.Значение  = Истина;
	иначе
		ПараметрСКД.Значение  = ложь;

	конецесли;	
	
	
	
	
	
		СКДНастроек = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ТекстЗапроса = СКДНастроек.НаборыДанных.НаборДанных1.Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(2017, 1, 1) КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	0 КАК Бонус
	|ПОМЕСТИТЬ втБонусы",
	ПолучитьБонусы(ложь).ТекстЗапросаБонусы);
	
	ЭлементыФормы.Результат.Очистить();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ТекстЗапроса;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных,   ЭтотОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ЭлементыФормы.Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);

КонецПроцедуры

Процедура ОткрытьПериодДляРедактированияДокументов()
	
	//***2018.10.18
	//Проверим и откроем период при необходимости
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьНоменклатурныеГруппыВДокументахПриОтраженииВЗатратах") Тогда
		//Проверим и откроем период при необходимости
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
		Запрос.УстановитьПараметр("Роль", Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений
		               |ИЗ
		               |	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
		               |ГДЕ
		               |	ГраницыЗапретаИзмененияДанных.Роль = &Роль
		               |	И ГраницыЗапретаИзмененияДанных.Организация = &Организация";
		Результат = Запрос.Выполнить().Выбрать();
		ДатаЗапрета = Дата(1,1,1);
		Если Результат.Следующий() Тогда
			ДатаЗапрета = Результат.ГраницаЗапретаИзменений;
		КонецЕсли;
		
		Если НЕ ДатаЗапрета = Дата(1,1,1) Тогда
			
			Если НачПериода < Дата('20180101000000') Тогда
				НоваяДатаЗапрета = Дата('20180101000000');
			Иначе
				НоваяДатаЗапрета = НачПериода;
			КонецЕсли;
			
			Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
			Набор.Отбор.Роль.Установить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
			Запись = Набор.Добавить();
			Запись.Организация = Справочники.Организации.ПустаяСсылка();
			Запись.Роль = Перечисления.НаборПравПользователей.МенеджерПоЗакупкам;  
			Запись.ГраницаЗапретаИзменений = НоваяДатаЗапрета;
			Набор.Записать();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(Выборка.Организация);
				Набор.Отбор.Роль.Установить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
				Запись = Набор.Добавить();
				Запись.Организация = Выборка.Организация;
				Запись.Роль = Перечисления.НаборПравПользователей.МенеджерПоЗакупкам;
				Запись.ГраницаЗапретаИзменений = НоваяДатаЗапрета;
				Набор.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьНоменклатурныеГруппыВДокументахПриОтраженииВЗатратах") Тогда
		Если НЕ ДатаЗапрета = Дата(1,1,1) Тогда
			Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
			Набор.Отбор.Роль.Установить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
			Запись = Набор.Добавить();
			Запись.Организация = Справочники.Организации.ПустаяСсылка();
			Запись.Роль = Перечисления.НаборПравПользователей.МенеджерПоЗакупкам;  
			Запись.ГраницаЗапретаИзменений = ДатаЗапрета;
			Набор.Записать();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(Выборка.Организация);
				Набор.Отбор.Роль.Установить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
				Запись = Набор.Добавить();
				Запись.Организация = Выборка.Организация;
				Запись.Роль = Перечисления.НаборПравПользователей.МенеджерПоЗакупкам;
				Запись.ГраницаЗапретаИзменений = ДатаЗапрета;
				Набор.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

ДатаЗапрета = Дата(1,1,1);
