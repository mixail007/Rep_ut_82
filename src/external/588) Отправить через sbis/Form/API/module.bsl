&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
&НаКлиенте
Перем Заголовки Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
// Закрывает сессию	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/auth/service/", "СБИС.Выход", Новый Структура, Заголовки);
КонецФункции
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,ТекстОшибки) Экспорт 	
// Авторизуется на online.sbis.ru по логину/паролю	
	МестныйКэш = Кэш;
	
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Логин", Логин);
	СтруктураПараметровЗапроса.Вставить("Пароль", Пароль);
	Заголовки = Новый Соответствие;
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/auth/service/", "СБИС.Аутентифицировать", СтруктураПараметровЗапроса, Заголовки);
	Если Результат.Свойство("result") Тогда
		Возврат Результат.result;
	Иначе
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось авторизоваться по логину/паролю.";
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,ТекстОшибки) Экспорт
// Авторизуется на online.sbis.ru по сертификату		
	МестныйКэш = Кэш;
	
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Сертификат", Новый Структура("Отпечаток", Сертификат));
	Заголовки = Новый Соответствие;
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/auth/service/", "СБИС.Аутентифицировать", СтруктураПараметровЗапроса, Заголовки);
	Если Результат.Свойство("result") Тогда
		Возврат Результат.result;
	Иначе
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось авторизоваться по сертификату.";
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "") Экспорт
	// в апи ничего не делает		
КонецФункции
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/auth/service/", "СБИС.ПроверитьСессию", Новый Структура, Заголовки);
	Если Результат.Свойство("result") и Результат.result.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
// Получает список сертификатов для авторизации	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	СтруктураПараметровЗапроса = Новый Структура("Параметр", Новый Структура);

	Заголовки = Новый Соответствие;
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/auth/service/", "СБИС.СписокСертификатовДляАутентификации", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ Результат.Свойство("result") Тогда
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Сертификаты не найдены.";
		КонецЕсли;
		Возврат СписокСертификатов;
	КонецЕсли;

	
	Object = Результат.result;
	ObjectList = Неопределено;
	Object.Свойство("Сертификат",ObjectList);
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
                Если Сертификат.Свойство("ДействителенПо") Тогда
                    Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
                        ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
                    Иначе
                        ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
                    КонецЕсли;
                КонецЕсли;
                СписокСертификатов.Добавить(Сертификат,Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")","")
                        +", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","")
                        +?(Сертификат.Свойство("ДействителенПо"),(", действителен до "+Формат(ДействителенПо,"ДЛФ=DD")),""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
// Получает список доступных сертификатов	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Если filter=Неопределено Тогда
		filter = Новый Структура("Фильтр", Новый Структура);
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/service/?srv=1", "СБИС.СписокСертификатов", filter, Заголовки);
	Если НЕ Результат.Свойство("result") Тогда
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Сертификаты не найдены.";
		КонецЕсли;
		Возврат СписокСертификатов;
	КонецЕсли;
	
	Object = Результат.result;
	ObjectList = Неопределено;
	Object.Свойство("Сертификат",ObjectList);
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.Количество();
		Для сч=0 По Размер-1 Цикл
			Сертификат = ObjectList[сч];
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	СписокСертификатов = ПолучитьСписокСертификатов(Кэш);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
					certificate = Новый Структура;
					certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
					
					СтруктураПараметровЗапроса = Новый Структура("Сертификат", certificate);
					
					Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/service/?srv=1", "СБИС.ПолучитьКодАктивацииСертификата", СтруктураПараметровЗапроса, Заголовки);
					Если НЕ Результат.Свойство("result") Тогда
						Если Результат.Свойство("error") Тогда
							Попытка
								ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
							Исключение
							КонецПопытки;
						Иначе
							ТекстОшибки = "Не удалось получить код активации сертификата.";
						КонецЕсли;

							Возврат СписокСертификатовДляАктивации;
						КонецЕсли;
					КонецЕсли;
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
					КонецЕсли;
		КонецЦикла;
	КонецЦикла;
					
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		certificate = Новый Структура;
		certificate.Вставить("Отпечаток", Сертификат.Отпечаток);
		certificate.Вставить("КодАктивации", Сертификат.КодАктивации);
					СтруктураПараметровЗапроса = Новый Структура("Сертификат", certificate);
					
					Заголовки = Новый Соответствие;
		Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
					//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					
					Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам, МестныйКэш.СБИС, "/service/?srv=1", "СБИС.АктивироватьСертификат", СтруктураПараметровЗапроса, Заголовки);
					Если НЕ Результат.Свойство("result") Тогда
						Если Результат.Свойство("error") Тогда
							Попытка
								ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
							Исключение
							КонецПопытки;
						Иначе
							ТекстОшибки = "Не удалось активировать сертификат.";
						КонецЕсли;

						Возврат Ложь;
					КонецЕсли;
		КонецЦикла;
	Возврат Истина;
КонецФункции


//&НаСервереБезКонтекста
Функция сбисСформироватьПрокси(МестныйКэшПарам,Протокол) Экспорт
	
		Если МестныйКэшПарам.ТипПрокси = "Вручную" Тогда
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить(Протокол, МестныйКэшПарам.ПроксиСервер, МестныйКэшПарам.ПроксиПорт);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
			Прокси.Пользователь = МестныйКэшПарам.ПроксиЛогин;
			Прокси.Пароль       = МестныйКэшПарам.ПроксиПароль;
		ИначеЕсли МестныйКэшПарам.ТипПрокси = "Автоматически" Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Не использовать прокси-сервер.
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
// Получает информацию о текущем пользователе	
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Параметр", Новый Структура);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ИнформацияОТекущемПользователе", СтруктураПараметровЗапроса, Заголовки);
	Если СтруктураРезультата.Свойство("result") Тогда
		Фамилия = "";
		Имя = "";
		Отчество = "";
		СтруктураРезультата.result.Пользователь.Свойство("Фамилия", Фамилия);
		СтруктураРезультата.result.Пользователь.Свойство("Имя", Имя);
		СтруктураРезультата.result.Пользователь.Свойство("Отчество", Отчество);
		Возврат Фамилия+" "+Имя+" "+Отчество;
	Иначе
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить информацию о текущем пользователе.";
		КонецЕсли;
		Возврат "";
	КонецЕсли;
КонецФункции
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно,ДопПараметры) Экспорт
// Формирует структуру фильтра для списочных методов SDK	
	filter = Новый Структура; 
	
	filter.Вставить( "ДопПоля", "Этап");
	
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаНач) Тогда
		filter.Вставить( "ДатаС", Формат(ГлавноеОкно.ФильтрДатаНач,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
    Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаКнц) Тогда
		filter.Вставить( "ДатаПо", Формат(ГлавноеОкно.ФильтрДатаКнц,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		filter.Вставить( "Состояние", ГлавноеОкно.ФильтрСостояние ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
		org = Новый Структура; 
		Если СтрДлина(СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"))) = 12 Тогда
			СвФЛ = Новый Структура;
			СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			org.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			СвЮЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
			СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
			org.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		filter.Вставить( "НашаОрганизация", org ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
		kontr = Новый Структура; 
		ИННКонтр = ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН");
		Если ТипЗнч(ИННКонтр)=Тип("Строка") Тогда // если выбрана папка контрагентов, то ИНН получается NaN
			Если СтрДлина(СокрЛП(ИННКонтр)) = 12 Тогда
				СвФЛ = Новый Структура;
				СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН") ); 
				kontr.Вставить( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Новый Структура;
				СвЮЛ.Вставить( "ИНН", ИННКонтр ); 
				СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
				kontr.Вставить( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			filter.Вставить( "Контрагент", kontr );
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			filter.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;

	navigation = Новый Структура; 
    navigation.Вставить( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице ); 
    navigation.Вставить( "Страница", ГлавноеОкно.ФильтрСтраница-1 ); 
	filter.Вставить( "Навигация", navigation );
	
	Возврат filter;	
КонецФункции	
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
// Получает список документов реализации с online.sbis.ru 	
	СтруктураДляОбновленияФормы = Новый Структура;
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр",filter);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/?srv=1", "СБИС.СписокДокументов", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ Результат.Свойство("result") Тогда
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить список документов отгрузки.";
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Сообщить(ТекстОшибки);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	ГлавноеОкно.ФильтрЕстьЕще = Результат.result.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.result.Навигация.Страница)+1;
	Выборка = Результат.result.Документ;
	МассивДокументов = Новый Массив;	

	Размер = Выборка.Количество();
    МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("Контрагент", оДокумент.Контрагент.Название);
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
            НоваяСтр.Вставить("НашаОрганизация", оДокумент.НашаОрганизация.Название);
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
        Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
        	НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		МассивДокументов.Добавить(НоваяСтр)
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
// Получает список документов по событиям с online.sbis.ru	
    СтруктураДляОбновленияФормы = Новый Структура;
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр",filter);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/?srv=1", "СБИС.СписокДокументовПоСобытиям", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ Результат.Свойство("result") Тогда
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить список событий.";
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Сообщить(ТекстОшибки);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
		
	ГлавноеОкно.ФильтрЕстьЕще = Результат.result.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.result.Навигация.Страница)+1;
	Выборка = Результат.result.Реестр;
	МассивДокументов = Новый Массив;	
	Размер = Результат.result.Реестр.Количество();
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		//НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремя);
		оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;

		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
// Получает список документов определенного типа с online.sbis.ru	
	СтруктураДляОбновленияФормы = Новый Структура();
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с online.sbis.ru", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	СтруктураПараметровЗапроса = Новый Структура("Фильтр",filter);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/?srv=1", "СБИС.СписокДокументов", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ Результат.Свойство("result") Тогда
		Если Результат.Свойство("error") Тогда
			Попытка
				ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить список документов.";
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Сообщить(ТекстОшибки);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	Выборка = Результат.result.Документ;
	МассивДокументов = Новый Массив;	

	Размер = Выборка.Количество();
	Если Размер>0 Тогда   // такая проверка добавлена, т.к. для документов, живущих в разделе Бизнес (заказы), не возвращается навигация, если в кабинете этот раздел отсутствует
		ГлавноеОкно.ФильтрЕстьЕще = Результат.result.Навигация.ЕстьЕще="Да";
		ГлавноеОкно.ФильтрСтраница = Число(Результат.result.Навигация.Страница)+1;
	Иначе
		ГлавноеОкно.ФильтрЕстьЕще = Ложь;
		ГлавноеОкно.ФильтрСтраница = 1;
	КонецЕсли;
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Проведен", -1);
		НоваяСтр.Вставить("Статус", сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
            НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;

		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		НоваяСтр.Вставить("Склад", ?(оДокумент.Свойство("Подразделение"),оДокумент.Подразделение.Название,""));
		НоваяСтр.Вставить("Комментарий", ?(оДокумент.Свойство("Примечание"),оДокумент.Примечание,""));
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если Размер>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдПакетаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции
&НаКлиенте
функция ПрочитатьДокумент(Кэш,ИдДок) экспорт
// Получает структуру документа СБИС	
	СтруктураПараметровЗапроса = Новый Структура("Документ",Новый Структура("Идентификатор", строка(ИдДок)));
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/", "СБИС.ПрочитатьДокумент", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить список документов отгрузки.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат СтруктураРезультата.result;
КонецФункции
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
// Получает данные файла вложения	
	Результат = ПолучитьДанныеФайлаНаСервере(Кэш.Парам, Кэш.СБИС, Ссылка);
    Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
функция ПолучитьДанныеФайлаНаСервере(КэшПарам, КэшСБИС,Ссылка) экспорт
// Получает данные файла вложения	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", КэшПарам.ИдентификаторСессии);
	Результат = сбисОтправитьИОбработатьКомандуGET(КэшПарам, КэшСБИС, Ссылка, Заголовки);
	Если Результат = Ложь Тогда
		Возврат "";
	КонецЕсли;
	Текст = Новый ЧтениеТекста(Результат);
	РезультатТекст = Текст.Прочитать();
	Если Найти(РезультатТекст, "encoding=""UTF-8""")>0 Тогда
		Текст = Новый ЧтениеТекста(Результат, КодировкаТекста.UTF8);
		РезультатТекст = Текст.Прочитать();
	КонецЕсли;
	Попытка
		Если Лев(РезультатТекст,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;
	Исключение
	КонецПопытки;
    Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) экспорт //d.ch
	Результат = СохранитьВложениеПоСсылкеВФайлНаСервере(Кэш.Парам, Кэш.СБИС,Ссылка);
	Попытка
		//ПолучитьФайл(Результат,ИмяФайла,Истина);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, Результат);
	    ПолучаемыеФайлы = Новый Массив;
	    ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	    ПолученныеФайлы = Новый Массив;
	    
	    Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы,,Ложь) Тогда
	        Возврат Истина;
	    КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	Возврат Ложь;
КонецФункции
//&НаСервереБезКонтекста
функция СохранитьВложениеПоСсылкеВФайлНаСервере(КэшПарам, КэшСБИС,Ссылка) экспорт //d.ch
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", КэшПарам.ИдентификаторСессии);
	Результат = сбисОтправитьИОбработатьКомандуGET(КэшПарам, КэшСБИС, Ссылка, Заголовки);
	Если Результат = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Результат));
КонецФункции
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
// Получает html по идентификаторам пакета и вложения
// Используется при просмотре документов из реестров СБИС
	Возврат ПолучитьHTMLВложенияНаСервере(Кэш.Парам, Кэш.СБИС, Вложение);
КонецФункции
//&НаСервереБезКонтекста
функция ПолучитьHTMLВложенияНаСервере(КэшПарам, КэшСБИС, Вложение) экспорт
// Получает html по идентификаторам пакета и вложения
// Используется при просмотре документов из реестров СБИС
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", КэшПарам.ИдентификаторСессии);
	Результат = сбисОтправитьИОбработатьКомандуGET(КэшПарам, КэшСБИС, Вложение.СсылкаНаHTML, Заголовки);
	Текст = Новый ЧтениеТекста(Результат);
	Результат = Текст.Прочитать();
	Возврат Результат;
КонецФункции
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, ТекстXML) экспорт
// Получает html по xml	
// Используется при просмотре документов из реестров продаж (1С)
	МестныйКэш = Кэш;

	param = Новый Структура; 
	param.Вставить( "XML", сбисСтрокаВBASE64(ТекстXML));

	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Параметр", param);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СформироватьHTMLИзXML", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда

		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить печатную форму документа.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстXMLBase64 = СтруктураРезультата.result.HTML;
	html_text = сбисBASE64ВСтроку(ТекстXMLBase64);
	Возврат html_text;
КонецФункции
//&НаСервереБезКонтекста
функция сбисСтрокаВBASE64(строка, кодировка = "windows-1251") экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяВрФ);  
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции
//&НаСервереБезКонтекста
функция сбисBASE64ВСтроку(ТекстXMLBase64) экспорт
	ДвоичныеДанныеXML = Base64Значение(ТекстXMLBase64);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ДвоичныеДанныеXML.Записать(ИмяВрФ);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВрФ);
	html_text = ТекстДок.ПолучитьТекст();
	Попытка 
      УдалитьФайлы(ИмяВрФ); 
    Исключение 
    КонецПопытки;
	Возврат html_text;
КонецФункции
//&НаСервереБезКонтекста
функция сбисФайлВBASE64(ПолноеИмяФайла) экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции
//&НаСервереБезКонтекста
Функция сбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
// Возвращает индекс картинки по статусу электронного документа
// Картинка статуса отображается в реестре документов
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;	
	
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	
	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокумент(Кэш,Идентификатор);

    	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		Комментарий="";
		Если ИмяКоманды = "Отклонить" Тогда
			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
				   Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		//Ищем действие соответсвующее команде
		Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
			Если Действие.Название = ИмяКоманды Тогда
				Возврат сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	Если НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0 Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	Возврат сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета);
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействиеБезОбработкиСлужебных(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	certificate = Действие.Сертификат[0];

	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	action.Вставить("Сертификат", certificate);
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	document_in.Вставить( "Этап", stage );
		
	СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось подготовить действие.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	prepared_document = СтруктураРезультата.result;
	
	attachmentList = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		Размер = attachmentList.Количество();
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentList[сч];
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
				file.Вставить( "Имя", ИмяФайла ); 
			    file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					attachmentList.Удалить(НомПодтвЗаказа);
				Иначе 
					ИдВложения = строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	stage = prepared_document.Этап[0];
	action = prepared_document.Этап[0].Действие[0];
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	prepared_document.Вставить( "Этап", stage );
	
	// Завершение этапа
	СтруктураПараметровЗапроса = Новый Структура("Документ",prepared_document);
	
	// Подготовка этапа
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось выполнить действие.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	param   = Новый Структура;
	param.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Фильтр", param);
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ИнформацияОСлужебныхЭтапах", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Возврат Ложь;
	КонецЕсли;

	РезультатНеобрДок = Неопределено;
	СтруктураРезультата.result.Свойство("ЧислоНеобработанныхЭтапов",РезультатНеобрДок); // Получаем количество необработанных служебных документов
	Если РезультатНеобрДок = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Всего = Число(РезультатНеобрДок);
	
	Если Всего>0 Тогда
		Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам,МестныйКэш.СБИС, "/service/?srv=1", "СБИС.СписокСлужебныхЭтапов", СтруктураПараметровЗапроса, Заголовки);
		Если НЕ Результат.Свойство("result") Тогда

			Если Результат.Свойство("error") Тогда
				Попытка
					ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
				Исключение
				КонецПопытки;
			Иначе
				ТекстОшибки = "Не удалось получить список служебных этапов.";
			КонецЕсли;
			Сообщить(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого СоставПакета Из Результат.result.Документ Цикл
			Выполнено = сбисВыполнитьДействиеБезОбработкиСлужебных(МестныйКэш, СоставПакета, СоставПакета.Этап[0], СоставПакета.Этап[0].Действие[0], "", "");
		КонецЦикла;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП) Экспорт
// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
// Получает Информацию о контрагенте с онлайна
	kontr = Новый Структура; 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СтруктураКонтрагента.СвФЛ.ИНН ); 
		kontr.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СтруктураКонтрагента.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СтруктураКонтрагента.СвЮЛ.КПП );
		Если СтруктураКонтрагента.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Вставить( "КодФилиала", СтруктураКонтрагента.СвЮЛ.КодФилиала );
		КонецЕсли;
		kontr.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Участник", kontr);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ИнформацияОКонтрагенте", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда

		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось получить информацию о контрагенте.";
		КонецЕсли;
		//Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

    оКонтрагент = СтруктураРезультата.result;
	Возврат оКонтрагент;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
// Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
	МестныйКэш = Кэш;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	ЕстьЕще = Истина;
	ТекущаяСтраница = 0;
	МассивОрганизаций = Новый Массив;
	Пока ЕстьЕще Цикл
		filter  = Новый Структура;
		navigation = Новый Структура;
		navigation.Вставить( "Страница", ТекущаяСтраница);
		filter.Вставить( "Навигация", navigation );
		СтруктураПараметровЗапроса = Новый Структура;
		СтруктураПараметровЗапроса.Вставить("Фильтр", filter);
		Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СписокНашихОрганизаций", СтруктураПараметровЗапроса, Заголовки);
		Если НЕ Результат.Свойство("result") Тогда

			Если Результат.Свойство("error") Тогда
				Попытка
					ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
				Исключение
				КонецПопытки;
			Иначе
				ТекстОшибки = "Не удалось получить список наших организаций.";
			КонецЕсли;
			Сообщить(ТекстОшибки);
			Возврат МассивОрганизаций;
		КонецЕсли;

        Выборка = Результат.result.НашаОрганизация;
		Размер = Выборка.Количество();
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			Запись = Выборка[сч];
			оОрганизация = Выборка[сч];	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("Название", строка(Организация1С));
				
				param  = Новый Структура;
				param.Вставить( "НашаОрганизация", Запись );
				СтруктураПараметровЗапроса = Новый Структура;
				СтруктураПараметровЗапроса.Вставить("Фильтр", param);
				СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ИнформацияОСлужебныхЭтапах", СтруктураПараметровЗапроса, Заголовки);
				Если НЕ СтруктураРезультата.Свойство("result") Тогда
					Продолжить;
				КонецЕсли;
			
				РезультатНеобрДок = Неопределено;
				СтруктураРезультата.result.Свойство("ЧислоНеобработанныхЭтапов",РезультатНеобрДок); // Получаем количество необработанных служебных документов
				Если РезультатНеобрДок = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				оОрганизация.Вставить("ЧислоНеобработанныхЭтапов", Число(РезультатНеобрДок));
				Если оОрганизация.ЧислоНеобработанныхЭтапов <> 0 Тогда
					МассивОрганизаций.Добавить(оОрганизация);	
					// добавляем ИНН в список для активации серверных ключей
					Если оОрганизация.Свойство("СвФЛ") Тогда
						Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
							СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
						КонецЕсли;
					Иначе
						Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
							СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
						КонецЕсли;
					КонецЕсли;
                КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.result.Навигация.ЕстьЕще="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);	
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ФормаВводаПинкода.СертификатИмя = "Введите код активации сертификата "+Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			КодАктивации = ФормаВводаПинкода.ОткрытьМодально();
			Если Не ЗначениеЗаполнено(КодАктивации) Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого оОрганизация из МассивОрганизаций Цикл
			ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(оОрганизация);
	КонецЦикла;
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(оОрганизация)
// Обрабатывает служебные документы организации	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	param   = Новый Структура;
	Орг = оОрганизация;
	org = Новый Структура; 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", Орг.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.Вставить("НашаОрганизация",org);
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	Всего = оОрганизация.ЧислоНеобработанныхЭтапов;	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			СтруктураПараметровЗапроса = Новый Структура("Фильтр", param);;
			Результат = сбисОтправитьИОбработатьКоманду(МестныйКэш.Парам,МестныйКэш.СБИС, "/service/?srv=1", "СБИС.СписокСлужебныхЭтапов", СтруктураПараметровЗапроса, Заголовки);
			Если НЕ Результат.Свойство("result") Тогда

				Если Результат.Свойство("error") Тогда
					Попытка
						ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
					Исключение
					КонецПопытки;
				Иначе
					ТекстОшибки = "Не удалось получить список служебных этапов.";
				КонецЕсли;
				сбисСпрятатьСостояние(ГлавноеОкно);
				Сообщить(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого СоставПакета Из Результат.result.Документ Цикл
				Выполнено = сбисВыполнитьДействие(МестныйКэш, СоставПакета, СоставПакета.Этап[0], СоставПакета.Этап[0].Действие[0], "", "");
				Если Выполнено Тогда
					Обработано = Обработано + 1;
				КонецЕсли;

			КонецЦикла;
			
			ЕстьНеобработанныеИзвещения = Результат.result.Навигация.ЕстьЕще;
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если (Обработано=0 и ЕстьНеобработанныеИзвещения = "Да") или Результат.result.Документ.Количество() = 0  Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	// Отправляет сформированные пакеты документов	
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	ВсегоОтправлено = 0;
	ВсегоОшибок = 0;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
		documenty = Новый Массив;
	Для СчетчикПакетов=0 По КоличествоПакетов-1 Цикл
			СоставПакета = МассивПакетов[СчетчикПакетов];
			document = Новый Структура;
		Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
			document.Вставить( "Дата",СоставПакета.Дата);	
		КонецЕсли;
		Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
			document.Вставить( "Номер",СоставПакета.Номер);	
		КонецЕсли;
			attachmentList = Новый Массив;
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				attachment = Новый Структура;
				file = Новый Структура;
				Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
					file.Вставить( "Имя", Вложение.ИмяФайла ); 
					file.Вставить( "ДвоичныеДанные", сбисФайлВBASE64(Вложение.ПолноеИмяФайла) ); 
				Иначе  // сформирован xml
					ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					file.Вставить( "Имя", ИмяФайла ); 
					file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				КонецЕсли;
				
				Если Вложение.Свойство("Подпись") Тогда //d.ch
					ЭЦП = Новый Массив;
					Для Каждого Запись из Вложение.Подпись Цикл
						ЗаписьЭЦП = Новый Структура;
						ФайлЭЦП = Новый Структура;
						ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
						ФайлЭЦП.Вставить( "ДвоичныеДанные",сбисФайлВBASE64(Запись.Файл.ПолноеИмяФайла)); 
						ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
						ЭЦП.Добавить(ЗаписьЭЦП);
					КонецЦикла;
					attachment.Вставить( "Подпись", ЭЦП );
				КонецЕсли;
				
				attachment.Вставить( "Файл", file );
				ИдВложения = строка(Новый УникальныйИдентификатор());
				Вложение.Вставить("Идентификатор", ИдВложения);
				attachment.Вставить( "Идентификатор",  ИдВложения);
				// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
				//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
				//	attachment.Вставить( "Тип",  Вложение.Тип);
				//	attachment.Вставить( "Подтип",  Вложение.ПодТип);
				//	attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
				//		attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
				//	КонецЕсли;
				//КонецЕсли;
				attachmentList.Добавить( attachment );
			КонецЦикла;
			document.Вставить( "Тип",СоставПакета.Тип);	
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
			Иначе
				ИдПакета = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			
			СоставПакета.Вставить("Идентификатор", ИдПакета);
			document.Вставить( "Идентификатор", ИдПакета ); 
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				document.Вставить( "ПользовательскийИдентификатор", СоставПакета.ПользовательскийИдентификатор);
			КонецЕсли;
			Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
				document.Вставить( "Примечание", СоставПакета.Примечание);
			КонецЕсли;
			document.Вставить( "Вложение", attachmentList );
			
			org = Новый Структура; 
			Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
				СвФЛ = Новый Структура;
				СвФЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
				org.Вставить( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Новый Структура;
				СвЮЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
				СвЮЛ.Вставить( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
				Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") Тогда
					СвЮЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
				КонецЕсли;
				org.Вставить( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			document.Вставить( "НашаОрганизация", org );
			
			kontr = Новый Структура; 
			Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
				СвФЛ = Новый Структура;
				СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН ); 
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
					СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
					СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
					СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
				КонецЕсли;
				kontr.Вставить( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Новый Структура;
				СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
				СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") Тогда
					СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
					СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
				КонецЕсли;
				kontr.Вставить( "СвЮЛ", СвЮЛ );
			КонецЕсли;
            Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
				Подразделение = Новый Структура;
				Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
				kontr.Вставить( "Подразделение", Подразделение );
			КонецЕсли;	
			Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
				Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
					kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
				КонецЕсли;
				Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
					kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
				КонецЕсли;
			КонецЕсли;
			document.Вставить( "Контрагент", kontr );
			
			Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
				otv = Новый Структура;
				Для Каждого Элемент Из СоставПакета.Ответственный Цикл
					otv.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЦикла;
				document.Вставить( "Ответственный", otv ); 	
			КонецЕсли;
			Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
				podrazdel = Новый Структура;
				Для Каждого Элемент Из СоставПакета.Подразделение Цикл
					podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЦикла;
				document.Вставить( "Подразделение", podrazdel ); 	
			КонецЕсли;
			Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
				regl = Новый Структура;
				Для Каждого Элемент Из СоставПакета.Регламент Цикл
					regl.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЦикла;
				document.Вставить( "Регламент", regl ); 	
			КонецЕсли;
			Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
				osnovania = Новый Массив;
				Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
					osn = Новый Структура;
					doc = Новый Структура;
					Для Каждого Элемент Из ДокОсн Цикл
						doc.Вставить( Элемент.Ключ, Элемент.Значение );	
					КонецЦикла;
					osn.Вставить( "Документ", doc );
					osnovania.Добавить(osn);
				КонецЦикла;
				document.Вставить( "ДокументОснование", osnovania ); 				
			КонецЕсли;
			documenty.Добавить(document);
		КонецЦикла;	
		
			ДанныеПоСтатусам = Новый Массив;
	сч = 0;
			Для Каждого СтруктураДок Из documenty Цикл
				СтруктураПараметровЗапроса = Новый Структура("Документ",СтруктураДок);
				
				// Подготовка этапа
				СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ЗаписатьДокумент", СтруктураПараметровЗапроса, Заголовки);
				Если НЕ СтруктураРезультата.Свойство("result") Тогда
					Если СтруктураРезультата.Свойство("error") Тогда
						ТекстОшибки = СтруктураРезультата.error.message+". ";
					Иначе
						ТекстОшибки = "Не удалось записать документ";
					КонецЕсли;
					
					ВсегоОшибок = ВсегоОшибок + 1;
					Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
					ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
					Если ЭлементСписка=Неопределено Тогда
						Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
					Иначе
						ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
					КонецЕсли;
					ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
					ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
					Если ЭлементСоответствия=Неопределено Тогда
						СписокДокументов1С = Новый СписокЗначений;
						СписокДокументов1С.Добавить(ОсновнойДокумент1С,СтруктураРезультата.error.details);
						Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, СписокДокументов1С);
					Иначе
						ЭлементСоответствия.Добавить(ОсновнойДокумент1С,СтруктураРезультата.error.details);
					КонецЕсли;
					Для Каждого Вложение Из СоставПакета.Вложение Цикл
						Если Вложение.Свойство("Документы1С") Тогда
							Для Каждого Документ1С Из Вложение.Документы1С Цикл
								СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Ошибка: "+Лев(ТекстОшибки, 230));
								ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
			Если Лев(ТекстОшибки, 14) = "Ошибка WinHTTP" и НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
				Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
					КонецЕсли;
					
				Иначе
			Если МассивПакетов[0].Свойство("НеЗапускатьВДокументооборот") и МассивПакетов[0].НеЗапускатьВДокументооборот = Истина Тогда   // если не запускаем в документооборот, то сразу проставляем состояния на документах 1С и больше ничего не делаем
				Элемент = СтруктураРезультата.result;
				СоставПакета = МассивПакетов[сч];
				СоставПакета.Вставить("Отправлен", Истина);
				ВсегоОтправлено = ВсегоОтправлено + 1;
				Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Вложение.Свойство("Документы1С") Тогда
						Для Каждого Документ1С Из Вложение.Документы1С Цикл
							СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,Элемент.Состояние.Название);
							ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

			Иначе   // запускаем в документооборот
					//// Назначение действия на этап
					//action = Новый Структура;
					//action.Вставить("Название", "Отправить");
					//action.Вставить("Сертификат", certificate);
					//
					//// Назначение этапа
					//stage = Новый Структура;
					//stage.Вставить("Название", "Отправка");
					//stage.Вставить("Действие", action);
					//
					//
					//document_in = Новый Структура;
					//document_in.Вставить( "Идентификатор", СтруктураРезультата.result.Идентификатор );	
					//document_in.Вставить( "Этап", stage );
					//	
					//СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
					//
					//// Подготовка этапа
					//СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ПодготовитьДействие", СтруктураПараметровЗапроса, Заголовки);
					
					// Назначение действия на этап
					action = Новый Структура;
					action.Вставить("Название", "Отправить");
				//action.Вставить("Сертификат", Новый Структура("Отпечаток", СтруктураРезультата.result.Этап[0].Действие[0].Сертификат[0].Отпечаток));
					
					// Назначение этапа
					stage = Новый Структура;
					stage.Вставить("Название", "Отправка");
					stage.Вставить("Действие", action);
					
					
					document_in = Новый Структура;
					document_in.Вставить( "Идентификатор", СтруктураРезультата.result.Идентификатор );	
					document_in.Вставить( "Этап", stage );
					
					СтруктураПараметровЗапроса = Новый Структура("Документ",document_in);
					
					// Подготовка этапа
					СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.ВыполнитьДействие", СтруктураПараметровЗапроса, Заголовки);
					Если НЕ СтруктураРезультата.Свойство("result") Тогда
						Если СтруктураРезультата.Свойство("error") Тогда
							ТекстОшибки = СтруктураРезультата.error.message;
						Иначе
							ТекстОшибки = "Не удалось отправить документ";
						КонецЕсли;
						
						ВсегоОшибок = ВсегоОшибок + 1;
						Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
						ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
						Если ЭлементСписка=Неопределено Тогда
							Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
						Иначе
							ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
						КонецЕсли;
						ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
						Если СоставПакета.Вложение.Количество()>0 и СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
							ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
						Иначе
							ОсновнойДокумент1С = Неопределено;
						КонецЕсли;
						Если ЭлементСоответствия=Неопределено Тогда
							СписокДокументов1С = Новый СписокЗначений;
							СписокДокументов1С.Добавить(ОсновнойДокумент1С,СтруктураРезультата.error.details);
							Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, СписокДокументов1С);
						Иначе
							ЭлементСоответствия.Добавить(ОсновнойДокумент1С,СтруктураРезультата.error.details);
						КонецЕсли;
						Для Каждого Вложение Из СоставПакета.Вложение Цикл
							Если Вложение.Свойство("Документы1С") Тогда
								Для Каждого Документ1С Из Вложение.Документы1С Цикл
									СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Ошибка: "+Лев(ТекстОшибки, 230));
									ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						
					Если Лев(ТекстОшибки, 14) = "Ошибка WinHTTP" и НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
						Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
						КонецЕсли;
						
						
						
					Иначе
						
						Элемент = СтруктураРезультата.result;
						СоставПакета = МассивПакетов[сч];
						СоставПакета.Вставить("Отправлен", Истина);
						ВсегоОтправлено = ВсегоОтправлено + 1;
						Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
						Для Каждого Вложение Из СоставПакета.Вложение Цикл
							Если Вложение.Свойство("Документы1С") Тогда
								Для Каждого Документ1С Из Вложение.Документы1С Цикл
									СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,Элемент.Состояние.Название);
									ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
				КонецЕсли;
		КонецЕсли;
				сч = сч+1;
			КонецЦикла;
			фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
		
	сбисСпрятатьСостояние(ГлавноеОкно);
	
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
// Получает статусы документов сбис
	МестныйКэш = Кэш;
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
   
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Новый Структура; 
		filter.Вставить( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Вставить( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		
		navigation = Новый Структура; 
		navigation.Вставить( "РазмерСтраницы", "100" ); 
		//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатНачЧтенияСтатусов", сбисТекущаяДата(Кэш)),ГлавноеОкно.КаталогНастроек);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			navigation.Вставить( "Страница", строка(сч) ); 
			filter.Вставить( "Навигация", navigation );
			СтруктураПараметровЗапроса = Новый Структура;
			СтруктураПараметровЗапроса.Вставить("Фильтр", filter);
			Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СписокИзменений", СтруктураПараметровЗапроса, Заголовки);
			
			Если НЕ Результат.Свойство("result") Тогда
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
					filter = Новый Структура;
					filter.Вставить( "ПолныйСертификатЭП", "Нет");
					filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
					filter.Вставить( "Навигация", navigation );
					СтруктураПараметровЗапроса = Новый Структура;
					СтруктураПараметровЗапроса.Вставить("Фильтр", filter);
					Результат = сбисОтправитьИОбработатьКоманду(Кэш.Парам,Кэш.СБИС, "/service/?srv=1", "СБИС.СписокИзменений", СтруктураПараметровЗапроса, Заголовки);

					Если НЕ Результат.Свойство("result") Тогда
						Если Результат.Свойство("error") Тогда
							Попытка
								ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
							Исключение
							КонецПопытки;
						Иначе
							ТекстОшибки = "Не удалось получить список изменений.";
						КонецЕсли;
						Сообщить(ТекстОшибки);
						сбисСпрятатьСостояние(ГлавноеОкно);
						Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
						Возврат Ложь;
					КонецЕсли;	
				Иначе	
					Если Результат.Свойство("error") Тогда
						Попытка
							ТекстОшибки = Результат.error.message +?(Результат.error.details<>Результат.error.message, (" "+ Результат.error.details), ""); 
						Исключение
						КонецПопытки;
					Иначе
						ТекстОшибки = "Не удалось получить список изменений.";
					КонецЕсли;
					Сообщить(ТекстОшибки);
					сбисСпрятатьСостояние(ГлавноеОкно);
					Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			сч = сч + 1;
			СписокИзменений = Результат.result;
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), ГлавноеОкно.КаталогНастроек);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(СтруктураНастроек, ГлавноеОкно.КаталогНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	МестныйКэш.ОбщиеФункции.СохранитьПараметрыСБИС(Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(МестныйКэш)), ГлавноеОкно.КаталогНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
// Получает структуру документа СБИС	
	СтруктураПараметровЗапроса = Новый Структура("Параметр",Новый Структура("Файл", сбисСтрокаВBASE64(КаталогТоваров, "UTF-16")));
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/", "СБИС.ИмпортНоменклатурыИзCML", СтруктураПараметровЗапроса, Заголовки);
	Если НЕ СтруктураРезультата.Свойство("result") Тогда
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				ТекстОшибки = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = "Не удалось загрузить каталог товаров в личный кабинет.";
		КонецЕсли;
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат СтруктураРезультата.result;
КонецФункции

&НаКлиенте
Функция Включить(Кэш) Экспорт
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисТекущаяДата(Кэш) Экспорт
// получает текущую дату-время на сервере СБИС	
	СтруктураПараметровЗапроса = Новый Структура;
	СтруктураПараметровЗапроса.Вставить("Параметр", Новый Структура);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-SBISSessionID", Кэш.Парам.ИдентификаторСессии);
	//Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	СтруктураРезультата = сбисОтправитьИОбработатьКоманду(Кэш.Парам, Кэш.СБИС, "/service/", "СБИС.ИнформацияОВерсии", СтруктураПараметровЗапроса, Заголовки);
	Если СтруктураРезультата.Свойство("result") Тогда
		Возврат СтруктураРезультата.result.ВнешнийИнтерфейс.ДатаВремяЗапроса;
	Иначе
		Если СтруктураРезультата.Свойство("error") Тогда
			ТекстОшибки = СтруктураРезультата.error;
		КонецЕсли;
		Возврат ТекущаяДата();
	КонецЕсли;
КонецФункции
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Возврат 0;
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
// Если более часа не проверяли статусы, то выводим красное предупреждение	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	СтруктураНастроек = Кэш.ОбщиеФункции.ПолучитьПараметрыСБИС(ГлавноеОкно.КаталогНастроек);
	Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) или сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатКнцЧтенияСтатусов > 3600 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры




Функция сбисСформироватьТекстЗапроса(Метод, СтруктураПараметровЗапроса) Экспорт
	ТекстЗапроса = "{""jsonrpc"":""2.0"",""method"":"""+Метод+""",""params"":{";
	ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса);
	ТекстЗапроса = ТекстЗапроса+"},""id"":1}";	
	Возврат ТекстЗапроса;	
КонецФункции
Функция сбисЗаписатьПараметрыЗапроса(СтруктураПараметровЗапроса) Экспорт
	ТекстЗапроса = "";
	Для Каждого Элемент Из СтруктураПараметровЗапроса Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+СтрЗаменить(Элемент.Значение, """", "\""")+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""+строка(Элемент.Значение)+""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Неопределено") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":"""",";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":{"+сбисЗаписатьПараметрыЗапроса(Элемент.Значение)+"},";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ТекстЗапроса = ТекстЗапроса+""""+Элемент.Ключ+""":[";
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ТекстЗапроса = ТекстЗапроса+"{";
				ТекстЗапроса = ТекстЗапроса+сбисЗаписатьПараметрыЗапроса(ЭлементМассива);
				ТекстЗапроса = ТекстЗапроса+"},";
			КонецЦикла;
			Если Прав(ТекстЗапроса, 1) = "," Тогда
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
			КонецЕсли;
 			ТекстЗапроса = ТекстЗапроса+"],";
		КонецЕсли;
	КонецЦикла;
	Если Прав(ТекстЗапроса, 1) = "," Тогда
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1);
	КонецЕсли;
	Возврат ТекстЗапроса 	
КонецФункции
Функция сбисОтправитьИОбработатьКоманду(МестныйКэшПарам, МестныйКэшСБИС, АдресРесурса, Метод, СтруктураПараметровЗапроса, Заголовки) Экспорт
	Протокол =  "https";
	Прокси = сбисСформироватьПрокси(МестныйКэшПарам,Протокол);
	Соединение = Новый HTTPСоединение(СтрЗаменить(МестныйКэшСБИС.АдресСервера,"https://",""), , , ,Прокси,,Новый ЗащищенноеСоединениеOpenSSL());
	
	ТекстЗапроса = сбисСформироватьТекстЗапроса(Метод,СтруктураПараметровЗапроса);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса,КодировкаТекста.Системная);
	//HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса,"UTF-8");
	Если ЗначениеЗаполнено(Заголовки) Тогда
		HTTPЗапрос.Заголовки = Заголовки;
	КонецЕсли;
	Попытка
		Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
        Ошибка = ОписаниеОшибки(); 
		Сообщить(Ошибка);
	КонецПопытки;
	Соединение = Неопределено;
	СтрокаРезультата = Результат.ПолучитьТелоКакСтроку();
	СтруктураРезультата = Новый Структура;
	Попытка
		СтруктураРезультата = сбисПрочитатьJSON(СтрокаРезультата);
		Если СтруктураРезультата.Свойство("error") Тогда
			Попытка
				Ошибка = СтруктураРезультата.error.message +?(СтруктураРезультата.error.details<>СтруктураРезультата.error.message, (" "+ СтруктураРезультата.error.details), ""); 
				Сообщить(Ошибка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось получить ответ сервера.");  
	КонецПопытки;
 	Возврат СтруктураРезультата;

КонецФункции
//&НаСервереБезКонтекста
Функция сбисОтправитьИОбработатьКомандуGET(МестныйКэшПарам, МестныйКэшСБИС, АдресРесурса, Заголовки) Экспорт
	Протокол =  "https";
	Прокси = сбисСформироватьПрокси(МестныйКэшПарам,Протокол);
	Соединение = Новый HTTPСоединение(СтрЗаменить(МестныйКэшСБИС.АдресСервера,"https://",""), , , ,Прокси,,Новый ЗащищенноеСоединениеOpenSSL());
	
	Результат = КаталогВременныхФайлов() + "answ1.tmp";
	HTTPЗапрос = Новый HTTPЗапрос(СтрЗаменить(СтрЗаменить(АдресРесурса,"https://online.sbis.ru",""),"https://fix-online.sbis.ru",""));
    
	Если ЗначениеЗаполнено(Заголовки) Тогда
		HTTPЗапрос.Заголовки = Заголовки;
	КонецЕсли;
	Попытка
		Соединение.Получить(HTTPЗапрос, Результат);
	Исключение
        Ошибка = ОписаниеОшибки(); 
		Сообщить(Ошибка);
		Возврат Ложь;
	КонецПопытки;
	Соединение = Неопределено;
	Возврат Результат;

КонецФункции



Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции


// JSON парсер.   ----------------------------------------------------------------------------
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//
Функция сбисПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) 
	
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
	
КонецФункции 

// ─────────────────────────────────────────────────────────────────────────────
//  НАСТРОЙКИ

// Функция управляющая настройкой "АвтоматическоеПриведениеОбъектаКСтруктуре".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется автоматическое приведение объекта к структуре; 
//		- Ложь - автоматическое приведение объекта к структуре не выполняется, все объекты преобразуются в соответствие. 
//
// Примечание:
//  Автоматическое приведение к структуре выполняется только для объектов имена свойств которых могут быть 
//  использованы как ключи структуры, все остальные объекты преобразуются в соответствие.
//
Функция НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
	
	Возврат Истина; // Измените для использования автоматического приведения объекта к структуре.
	
КонецФункции // НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре()
// Функция управляющая настройкой "ПолноеМаскированиеСимволов".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется полное маскирование символов некорректно обрабатываемых JavaScript-ом; 
//		- Ложь - маскирование выполняется только согласно стандарту и дополнительно маскируются специальные символы. 
//
// Примечание:
//	Маскирование специальных символов из диапазона [0x0000, 0x001f] выполняется в не зависимости от настройки.
//
Функция НастройкаПолноеМаскированиеСимволов()
	
	Возврат Истина;	// Измените для неполного маскирования символов.
	
КонецФункции // НастройкаПолноеМаскированиеСимволов()
// Функция управляющая настройкой "НеявноеПриведениеПримитивныхЗначенийКлюча".
//
// Возвращаемое значение:
//  Булево. Значение настройки:
//		- Истина - выполняется неявное приведение примитивных типов значений ключей соответствий к их строковому представлению в формате 1С; 
//		- Ложь - неявное приведение примитивных типов значений ключей соответствий к строковому представлению не выполняется. 
//
// Примечание:
//	Неявно приводимые типы: Null, Булево, Число, Дата, Строка, УникальныйИдентификатор.
//
Функция НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()
	
	Возврат Ложь;	// Измените для использования неявного приведения примитивных значений ключей соответствий к строке.
	
КонецФункции // НастройкаНеявноеПриведениеПримитивныхЗначенийКлюча()


// ─────────────────────────────────────────────────────────────────────────────
//  ПАРСЕР

Функция jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("Стандарт"); 
	КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда 
		ВызватьИсключение ИсключениеНекорректныйПараметр("ПредставленияСсылок"); 
	КонецЕсли; 
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; 
	ШестнадцатиричнаяСистема = "0123456789abcdef"; 
	ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл 
		Для ПервыйРазряд = 1 По 16 Цикл 
			СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); 
			ДесятичноеЧисло = ДесятичноеЧисло + 1; 
		КонецЦикла; 
	КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура("ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре",
	Тип("Строка"),
	СхемаПодстановок,
	(НастройкаАвтоматическоеПриведениеОбъектаКСтруктуре() = Истина));
	
	// Стартовые значения.
	Индекс = 1; 
	Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда 
		СимволыФорматирования = " " + Символы.ВК + Символы.ПС + Символы.Таб; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Иначе 
		СимволыФорматирования = ""; 
	КонецЕсли;
	Если (Индекс > Длина) Тогда 
		ВызватьИсключение ИсключениеПустойПакетДанных(); 
	КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина);
	
КонецФункции // jsonПрочитатьИнициализация()
Функция jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень)
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = "[") Тогда																								// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "]") Тогда														// ] 
			// Пустой массив.
			Индекс = Индекс + 1;
		Иначе
			Пока (Индекс <= Длина) Цикл
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли (Символ = "{") Тогда																							// {
		
		// Объект.
		Индекс = Индекс + 1; 
		jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); 
		КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); 
		Если (Символ = "}") Тогда														// } 
			// Пустой объект.
			Индекс = Индекс + 1;
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			Иначе 
				РезультатСоответствие = Новый Соответствие; 
			КонецЕсли;
			
		Иначе
			
			ТолькоДопустимыеСтроки = ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре; 
			РезультатСоответствие = Новый Соответствие; 
			Если ТолькоДопустимыеСтроки Тогда 
				РезультатСтруктура = Новый Структура; 
			КонецЕсли; 
			ТипСтроки = ВспомогательныеДанные.ТипСтроки;
			
			Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; 
				КлючЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); 
				Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда 
					ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ":") Тогда																					// :
					Индекс = Индекс + 1; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
				
				// Коллекция.
				РезультатСоответствие.Вставить(КлючЭлемента, ЗначениеЭлемента);
				Если ТолькоДопустимыеСтроки Тогда 
					Попытка 
						РезультатСтруктура.Вставить(КлючЭлемента, ЗначениеЭлемента); 
					Исключение 
						ТолькоДопустимыеСтроки = Ложь; 
					КонецПопытки; 
				КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = ",") Тогда																				// ,
						Индекс = Индекс + 1; 
						jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
						Если (Индекс >= Длина) Тогда 
							ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); 
						КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		// Структуры.
		Если ТолькоДопустимыеСтроки Тогда   
			Результат = РезультатСтруктура; 
		Иначе
			Результат = РезультатСоответствие;
		КонецЕсли;
		
		// Ссылка.
		Если (ПредставленияСсылок = Истина) Или (ПредставленияСсылок = Неопределено) Тогда 
			Результат = jsonПрочитатьСсылку(Результат, ТолькоДопустимыеСтроки); 
		КонецЕсли;
		
	Иначе
		
		// Примитивные типы.
		Если (Символ = """") Или (Символ = "'") Тогда        																// " , '
			
			// Строка.
			Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; 
			Пока Истина Цикл
				Позиция = Найти(Подстрока, Символ);
				
				Если (Позиция > 0) Тогда
					Индекс = Индекс + Позиция; 
					Откат = Позиция - 1; 
					Маскировка = Ложь; 
					Пока (Сред(Подстрока, Откат, 1) = "\") И Булево(Откат) Цикл 
						Маскировка = Не Маскировка; 
						Откат = Откат - 1; 
					КонецЦикла;
					Если Маскировка Тогда 
						Подстрока = Сред(Подстрока, Позиция + 1); 
					Иначе 
						Прервать; 
					КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
				КонецЕсли;
				
			КонецЦикла;
			
			// Строка.
			Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = "'"));
			
			Если jsonПрочитатьОпределитьДату(Результат) Тогда
				// Дата.
				Результат = jsonПрочитатьДату(Результат, Начало);
			//ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
			//	// Идентификатор.
			//	Результат = jsonПрочитатьИдентификатор(Результат, Начало);
			ИначеЕсли (Стандарт = Ложь) Или (Стандарт = Неопределено) Тогда
				Если jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
					// Внутренний тип.
					Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
				КонецЕсли;
			КонецЕсли;
			
			// Корректировка индекса.
			Индекс = Индекс + 1;
			
		Иначе
			
			Если (Символ = "n") Тогда
				// Null.
				Если (Сред(Значение, Индекс, 4) = "null") Тогда 
					Индекс = Индекс + 4; Результат = Null; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "t") Тогда
				// Истина.
				Если (Сред(Значение, Индекс, 4) = "true") Тогда 
					Индекс = Индекс + 4; 
					Результат = Истина; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "f") Тогда
				// Ложь.
				Если (Сред(Значение, Индекс, 5) = "false") Тогда 
					Индекс = Индекс + 5; 
					Результат = Ложь; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); 
				КонецЕсли;
			ИначеЕсли (Символ = "u") Тогда
				// Неопределено.
				Если (Сред(Значение, Индекс, 9) = "undefined") Тогда 
					Индекс = Индекс + 9; 
					Результат = Неопределено; 
				Иначе 
					ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); 
				КонецЕсли;
			Иначе
				// Число.
				Начало = Индекс; 
				Пока Булево(Найти("-+0123456789.", Символ)) И (Индекс <= Длина) Цикл 
					Индекс = Индекс + 1; 
					Символ = Сред(Значение, Индекс, 1); 
				КонецЦикла;
				
				// Преобразование числа.
				Попытка
					Результат = Число(Сред(Значение, Начало, Индекс - Начало));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Экспоненциальная часть.
				Если (Символ = "E") Или (Символ = "e") Тогда
					
					// Степень.
					Индекс = Индекс + 1; 
					Позиция = Индекс; 
					Символ = Сред(Значение, Индекс, 1); 
					Пока Булево(Найти("-+0123456789", Символ)) И (Индекс <= Длина) Цикл 
						Индекс = Индекс + 1; 
						Символ = Сред(Значение, Индекс, 1); 
					КонецЦикла;
					
					// Преобразование степени.
					Попытка
						Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
					Исключение
						ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
					КонецПопытки;
					
					// Возвидение числа в степень.
					Результат = Результат * Pow(10, Степень);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); 
	Если ПервыйУровень Тогда 
		Если (Индекс <= Длина) Тогда 
			ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); 
		КонецЕсли; 
	Иначе 
		Если (Индекс > Длина) Тогда 
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()
Функция jsonПрочитатьОпределитьДату(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 19) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") И				// -
			(Сред(Значение, 14, 1) = ".") И				// :
			(Сред(Значение, 17, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) И
				// Час.
				Булево(Найти("0123456789", Сред(Значение, 12, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 13, 1))) И
				// Минута.
				Булево(Найти("0123456789", Сред(Значение, 15, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 16, 1))) И
				// Секунда.
				Булево(Найти("0123456789", Сред(Значение, 18, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 19, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если (СтрДлина(Значение) = 10) Тогда
		Если (Сред(Значение, 03, 1) = ".") И				// -
			(Сред(Значение, 06, 1) = ".") Тогда				// :
			// Год. 
			Если Булево(Найти("0123456789", Сред(Значение, 07, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 08, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 09, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 10, 1))) И
				// Месяц.
				Булево(Найти("0123456789", Сред(Значение, 04, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 05, 1))) И
				// День.
				Булево(Найти("0123456789", Сред(Значение, 01, 1))) И
				Булево(Найти("0123456789", Сред(Значение, 02, 1))) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()
Функция jsonПрочитатьОпределитьИдентификатор(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			(Сред(Значение, 14, 1) = "-") И					// -
			(Сред(Значение, 19, 1) = "-") И					// -
			(Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Булево(Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1))) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()
Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()
Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
	"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
	"\/",			"/"),           // x2f
	"\b",			Символ(008)),	// x08
	"\t",			Символы.Таб),   // x09
	"\n",			Символы.ПС),    // x0a
	"\f",			Символы.ПФ),    // x0c
	"\r",			Символы.ВК),    // x0d
	"\""",			"""");          // x22
	
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Булево(Позиция) Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
	
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
	
КонецФункции // jsonПрочитатьСтроку()
Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат сбисСтрокаВДату(Значение);
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()
Функция jsonПрочитатьСсылку(Значение, Структура)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Структура Тогда
			Если Значение.Свойство("Представление") И Значение.Свойство("Ссылка", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Ссылка = Значение.Получить("Ссылка"); Если (Не Ссылка = Неопределено) И (Не Значение.Получить("Представление") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()
Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Новый УникальныйИдентификатор(Значение);
	Исключение
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьИдентификатор()
Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
	#Если ВебКлиент Или ТонкийКлиент Тогда
		ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
	#Иначе
		
		// Поиск.
		Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
		
		Если (Тип = "ref") Тогда
			Попытка
				Возврат ЗначениеИзСтрокиВнутр("{""#""," + СтрЗаменить(СтрЗаменить(Данные, "×", ":"), "÷", ",") + "}");
			Исключение
				ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
			КонецПопытки;
		КонецЕсли;
		
		ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
		
	#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()
Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Если (Стандарт = Истина) Или (Стандарт = Неопределено) Тогда Пока (Индекс <= Длина) И Булево(Найти(СимволыФорматирования, Сред(Значение, Индекс, 1))) Цикл Индекс = Индекс + 1; КонецЦикла; КонецЕсли;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ

Функция Шаблон(Строка, Параметры) Экспорт
	
	Результат = Строка;
	
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Строка(Параметр.Значение));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // Шаблон()
Функция ИсключениеПустойПакетДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()
Функция ИсключениеНекорректныйПакетДанных(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйПакетДанных()
Функция ИсключениеНеожиданноеОкончаниеПакетаДанных() Экспорт 
	
	Возврат НСтр("ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'");
	
КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()
Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()
Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()
Функция ИсключениеНекорректныйТипNull(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипNull()
Функция ИсключениеНекорректныйТипБулево(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипБулево()
Функция ИсключениеНекорректныйТипНеопределено(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйТипНеопределено()
Функция ИсключениеНекорректныйФорматСтроки(Индекс) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс));
	
КонецФункции // ИсключениеНекорректныйФорматСтроки()
Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНекорректныйФорматДаты()
Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение) Экспорт 
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'"),
		Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНекорректныйФорматЧисла()
Функция ИсключениеНедопустимыйСимвол(Индекс, Символ) Экспорт 
	
	Если (Символ = Неопределено) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'"),
		Новый Структура("Индекс", Индекс));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'"),
		Новый Структура("Индекс,Символ", Индекс, Символ(034) + Символ + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйСимвол()
Функция ИсключениеНеопознанныйТип(Индекс, Тип) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'"),
	Новый Структура("Индекс,Тип", Индекс, Символ(034) + Тип + Символ(034)));
	
КонецФункции // ИсключениеНеопознанныйТип()
Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()
Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'"),
	Новый Структура("Индекс,Значение", Индекс, Символ(034) + Значение + Символ(034)));
	
КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()
Функция ИсключениеНекорректныйПараметр(Параметр) Экспорт 
	
	Возврат Шаблон(НСтр("ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'"),
	Новый Структура("Параметр", Символ(034) + Параметр+ Символ(034)));
	
КонецФункции // ИсключениеНекорректныйПараметр()
Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение) Экспорт 
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'"),
		Новый Структура("Тип", ТипЗнч(Значение)));
		
	Иначе
		
		Возврат Шаблон(НСтр("ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'"),
		Новый Структура("Индекс,Тип", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйТипКлюча()
Функция ИсключениеНевозможноВыполнитьЗапрос(Описание) Экспорт 
	
	Позиция = Найти(Описание, "}: "); Если Булево(Позиция) Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Булево(Длина) Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр("ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '") + Сред(Описание, Позиция, Длина) + ".";
	
КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()


