Перем ВысотаЗаголовка;
Перем ИдентификаторОкнаРасшифровки;
Перем СтруктураРеквизитов;
Перем НеЗаполнятьНастройкиПриОткрытии;
Перем СтруктураСвязиЭлементовСДанными;
Перем ОтборРазвернут;
Перем ФормаНастройка;

перем ТемаСообщения0, ТекстСообщения0;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	Нет.
//
Процедура УправлениеПараметрамиОтображенияЭлементовФормы()
	
	Если ПоказыватьЗаголовок Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Истина;

	Иначе
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = Ложь;

	КонецЕсли;

	// Отображение заголовка отчета
	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	Если ОтборРазвернут Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Истина;
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельОтбор.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка = Ложь;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Отбор.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеПараметрамиОтображенияЭлементовФормы()

// Обновляет таблицу отчета
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтчет() Экспорт
	
	НеЗаполнятьНастройкиПриОткрытии = Не Открыта();

	ЭтотОтчет.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка);

	Если НЕ ЗначениеНеЗаполнено(ВысотаЗаголовка) Тогда
		ЭлементыФормы.ДокументРезультат.Область(1,,ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ДокументРезультат;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры // ОбновитьОтчет()

//  Управляет выводом заголовка
//
// Параметры:
//	Нет.
//
Процедура ВыводЗаголовка()

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ЭтотОтчет.СформироватьОтчет(ЭлементыФормы.ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, Истина);
		
	КонецЕсли;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры // ВыводЗаголовка()

// Формирует текст заголовка
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовокФормы()

	Заголовок = СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, мНазваниеОтчета, Ложь);

КонецПроцедуры // СформироватьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ НАЖАТИЯ КНОПОК КОМАНДНОЙ ПАНЕЛИ

// Процедура - обработчик нажатия кнопки "Настройка".
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	ФормаНастройка = ЭтотОтчет.ПолучитьФормуНастройки();
	
	Попытка
		ФормаНастройка.ВладелецФормы = ЭтаФорма;
	Исключение	
        Предупреждение("Невозможно правильно отобразить настройки для данного отчета");
	КонецПопытки;	
		
	СтруктураСНастройками = ЭтотОтчет.СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок);

	СтараяДатаКон = ДатаКон;
	СтараяДатаНач = ДатаНач;

	РезультатОткрытия = ФормаНастройка.ОткрытьМодально();

	Если РезультатОткрытия = Истина Тогда

		ОбновитьОтчет();

	Иначе
		
		// Форму закрыли эскейпом или по "Закрыть" - восстановим настройки, отчет формировать не будем!
		// Восстанавливаем сохраненные значения
		
		ЭтотОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
		
		ДатаКон = СтараяДатаКон;
		ДатаНач = СтараяДатаНач;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Процедура - обработчик нажатия кнопки "Отбор".
//
Процедура КоманднаяПанельФормыОтбор(Кнопка)

	ОтборРазвернут = НЕ ОтборРазвернут;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Обновить".
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // ВыполнитьНажатие()

// Процедура - обработчик нажатия кнопки "Заголовок".
//
Процедура КоманднаяПанельФормыЗаголовок(Кнопка)
	
	ПоказыватьЗаголовок = Не ПоказыватьЗаголовок;
	
	ВыводЗаголовка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик обновления данных формы
//
Процедура ОбновлениеОтображения()

	СформироватьЗаголовокФормы();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события перед открытием формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ (НеЗаполнятьНастройкиПриОткрытии = Истина) Тогда

		ЭтотОтчет.ОбщийОтчет = ЭтотОбъект;

		ЭтотОтчет.ЗаполнитьНачальныеНастройки();

		ВысотаЗаголовка = 0;

		СформироватьЗаголовокФормы();
		
		// Вспоминим параметры для данной формы
		ИмяОтчета=ЭтотОтчет.Метаданные().Имя;
		ОтборРазвернут=?(ВосстановитьЗначение(ИмяОтчета + "_ОтборПомечен") = Истина, Истина, Ложь); // отбор в первый раз не показывать
		ПоказыватьЗаголовок = ?(ВосстановитьЗначение(ИмяОтчета + "_ЗаголовокПомечен") = Ложь, Ложь, Истина); // заголовок в первый раз наоборот, показывать
		
		ВыводЗаголовка();
		
	КонецЕсли;
	
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбщийОтчет.ПостроительОтчета.Отбор");
	
	ЭтотОтчет.ТемаСообщения  = ТемаСообщения0;
	ЭтотОтчет.ТекстСообщения = ТекстСообщения0;
	ЭтотОтчет.ИмяФайлаСообщения = ТемаСообщения0+".xls";
	ЭтотОтчет.ИмяОтправителя = "ЗАО ТК ""Яршинторг"", г.Ярославль";
	
	ДатаНач = НачалоДня(текущаяДата());
	ДатаКон = датаНач + 5 * 86400; // 5 дней
	ЭтотОтчет.Nmax   = 50;
	КоманднаяПанель1Действие9(неопределено);//заполним адреса
	
КонецПроцедуры // ПередОткрытием()     ЭтотОбъект

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	НеЗаполнятьНастройкиПриОткрытии = Ложь;

	УправлениеПараметрамиОтображенияЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события перед сохранением значений формы
//
Процедура ПередСохранениемЗначений(Отказ)

	СохраненныеНастройки = ЭтотОтчет.СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок);

КонецПроцедуры // ПередСохранениемЗначений()

// Процедура - обработчик события после восстановления значений формы
//
Процедура ПослеВосстановленияЗначений()

	// Если настройка восстанавливается, когда открывается форма сформровенного отчета, игнорируем
	Если НеЗаполнятьНастройкиПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		ЭтотОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок);
		
		// Очистим результат - он более не соответствует настройке
		ЭлементыФормы.ДокументРезультат.Очистить();
		ВысотаЗаголовка=0;
		
		ВыводЗаголовка();
		
		СформироватьЗаголовокФормы();
		
	КонецЕсли;

КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройки1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора С
//
Процедура ПолеНастройкиС1ПриИзменении(Элемент)

	ПолеНастройкиСПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеНастройкиС1ПриИзменении()

// Процедура - обработчик изменения данных в поле значения отбора ПО
//
Процедура ПолеНастройкиПо1ПриИзменении(Элемент)

	ПолеНастройкиПоПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры // ПолеНастройкиПо1ПриИзменении()

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент)

	ПолеВидаСравненияПриИзменении(Элемент, ПостроительОтчета.Отбор);
	
КонецПроцедуры // ПолеВидаСравнения1ПриИзменении()

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа ДокументРезультат
//
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ЭтотОтчет.ОбработкаРасшифровки(Расшифровка, Элемент, ВысотаЗаголовка, СтандартнаяОбработка);

КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

// Процедура - обработчик изменения даты начала периода
//
Процедура ДатаНачПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - обработчик изменения даты конца периода
//
Процедура ДатаКонПриИзменении(Элемент)
	
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры

// Процедура - орбаротчик события при закрытии
//
Процедура ПриЗакрытии()
	
	ИмяОтчета = ЭтотОтчет.Метаданные().Имя;
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ОтборПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Отбор.Пометка);
	
	// Запомним параметры для данной формы
	СохранитьЗначение( ИмяОтчета+ "_ЗаголовокПомечен", ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка);
	
КонецПроцедуры

// Процедура - обработчик сообщений
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененТекстЗапроса" И Источник = ФормаНастройка Тогда
		
		УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными, "ОбщийОтчет.ПостроительОтчета.Отбор");

	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОповещения()

//+++ отправка писем
Процедура КоманднаяПанельФормыОтправитьЭлПисьма(Кнопка)
	
	N = этотОтчет.СписокКОнтрагентов.Количество();
	Nmax0 = 50; // максимальное количество для отображения при отправке
	
	Если N=0 тогда
		Предупреждение("Не заполнен список рассылки! Отправка невозможна!", 10);
		Возврат;
	ИначеЕсли ЭтотОтчет.Nmax=0 или ЭтотОтчет.Nmax>Nmax0 тогда
		Предупреждение("Для рассылки необходимо ввести ограничение количества! 
						|Введено автоматическое ограничение "+строка(Nmax0)+" шт.!
						|Отчет будет пересформирован. После этого повторите
						|попытку отправки эл.писем по списку рассылки...", 30);
		ЭтотОтчет.Nmax = Nmax0;
		ОбновитьОтчет();
		Возврат;
	иначе	
	  Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Вы действительно хотите сделать рассылку на "+строка(N)+" адресов?", Режим, 30, КодВозвратаДиалога.Нет, "Рассылка по эл.почте");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли;
   	КонецЕсли;
	   
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	
	ВременнаяПапка = КаталогВременныхФайлов();  
	Если ЭтотОтчет.ИмяФайлаСообщения="" тогда
		Если ДатаНач = ДатаКон тогда
		ЭтотОтчет.ИмяФайлаСообщения = "Ожидаемое поступление на "+формат(ДатаНач,"ДЛФ=DD")+".xls";
		иначе	
		ЭтотОтчет.ИмяФайлаСообщения = "Ожидаемое поступление на период с "+формат(ДатаНач,"ДЛФ=D")+" по "+формат(ДатаКон,"ДЛФ=D")+".xls";
		КонецЕсли;
	КонецЕсли;	
	//============Файл вложения=============================================
	СписокФайловВложений = новый СписокЗначений;
	ФайлВложения = временнаяПапка + ЭтотОтчет.ИмяФайлаСообщения;
	
	Состояние("Идет сохранение отчета в файл: "+ЭтотОтчет.ИмяФайлаСообщения);
	ЭлементыФормы.ДокументРезультат.Записать(ФайлВложения, ТипФайлаТабличногоДокумента.XLS);
	СписокФайловВложений.Добавить(ФайлВложения);
	
	N = этотОтчет.СписокКОнтрагентов.Количество();
	Состояние("Идет отправка "+строка(N) + "писем...");
	началоВр = ТекущаяДата();
	Сообщить(">>>>> "+Строка(началоВр)+" Начата отправка "+строка(N)+" эл.писем");
	
	//============основной цикл по строкам=============================================
	 i=0; 	  
	 Для каждого Контрагент ИЗ этотОтчет.СписокКОнтрагентов Цикл
		   i=i+1; 	  
		  состояние("Идет отправка "+строка(i)+" / "+строка(N)+" письма для "+Строка(Контрагент.Имя) );
		  Послать(Контрагент.ЭлАдрес, СписокФайловВложений, УЗ);	  
	  КонецЦикла;	 
	   
	КонецВр = ТекущаяДата();
	Сообщить(">>>>> "+Строка(КонецВр)+" Завершена отправка "+строка(i)+" эл.писем");	
	Сообщить(" ");
	
	
	ВремяВыполнения = Число(КонецВр - началоВр);
	парамЗапроса = "период ["+Формат(ДатаНач,"ДЛФ=D")+";"+Формат(ДатаКон,"ДЛФ=D")+"], Nmax="+строка(ЭтотОтчет.Nmax)+", Отправлено: "+строка(i)+" писем"; 
	Если ВремяВыполнения>=0 тогда
		//общий модуль:  яштПрочее.ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки(
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 207, ВремяВыполнения, "Кнопка [Отправить] - "+парамЗапроса+" ("+строка(ВремяВыполнения)+" Сек.)" ); //!!!!
	КонецЕсли;	
	//+++)   18.05.2012
		
КонецПроцедуры

//+++ Главная процедура отправки почты, везде так называется :)
Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	   //ТекстПисьма = ЭтаФорма.ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
	    	
	    ИПП=Новый ИнтернетПочтовыйПрофиль;
		ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
		ИПП.ПортSMTP=УЗ.ПортSMTP;
		Если УЗ.ТребуетсяSMTPАутентификация Тогда
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
			ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
		Иначе
			ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			ИПП.ПарольSMTP         = "";
			ИПП.ПользовательSMTP   = "";
		КонецЕсли;
		Письмо=Новый ИнтернетПочтовоеСообщение;
		Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
		
		//+++( 19.12.2011 - разбор адреса на несколько адресов
		i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
		k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			
		Если i=0 и j=0 тогда
			Письмо.Получатели.Добавить(АдресПолучателя);
		иначе
			АдрОстаток = СокрЛП(АдресПолучателя);
			пока (k>0) цикл
				Адр1 = Лев(АдрОстаток, k-1);
				Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
					Письмо.Получатели.Добавить(Адр1);
				КонецЕсли;
				АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
				i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
			КонецЦикла;
			Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
				Письмо.Получатели.Добавить(АдрОстаток);
			КонецЕсли;

		КонецЕсли; //+++ )
		
		Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
			Для Каждого ТекАдр Из СписокФайловВложений Цикл
				Письмо.Вложения.Добавить(ТекАдр.Значение);
			КонецЦикла;
		КонецЕсли;
			
//------------------------------------------------------------------		
    	Письмо.ИмяОтправителя =?(этотОтчет.ИмяОтправителя="", "ЗАО ТК ""Яршинторг"", г.Ярославль", этотОтчет.ИмяОтправителя);
	    Письмо.Организация    ="ЗАО ТК ""Яршинторг"", г.Ярославль";
		
		Письмо.Тема= ?(СокрЛП(этотОтчет.ТемаСообщения)="", ТемаСообщения0, этотОтчет.ТемаСообщения);
	    Письмо.Тексты.Добавить(?( СокрЛП(этотОтчет.ТекстСообщения)="",ТекстСообщения0, СокрЛП(этотОтчет.ТекстСообщения))
								,ТипТекстаПочтовогоСообщения.простойТекст);
		
		Почта=Новый ИнтернетПочта;
		попытка
			Почта.Подключиться(ИПП);
		ОбработкаПрерыванияПользователя(); // при зависании подключения - можно остановить Ctrl+Brk
			Почта.Послать(Письмо);
	    	Почта.Отключиться();
			#Если Клиент тогда
				сообщить(" >>>  Письмо отправлено на эл.адрес: "+АдресПолучателя+".  "+строка(СписокФайловВложений.Количество())+" вложенных файлов...", СтатусСообщения.Информация);
			#КонецЕсли	
		исключение
			#Если Клиент тогда
			сообщить("xxxxx Ошибка при отправке письма на эл.адрес: "+АдресПолучателя+" - "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			#КонецЕсли	
		конецПопытки;
КонецПроцедуры

Процедура КоманднаяПанель1Действие9(Кнопка)
	
	//+++ список адресов
	макет = ЭтотОтчет.ПолучитьМакет("ПараметрыОтчетовПродажиКомпании");
	область1 = макет.ПолучитьОбласть("СписокАдресовРассылки");
    N = область1.ВысотаТаблицы; //153;
	ЭтотОтчет.СписокКОнтрагентов.Очистить();
	для i=1 по N цикл
		стр1 = ЭтотОтчет.СписокКОнтрагентов.Добавить();
		стр1.Имя     = область1.Область("R"+формат(i,"ЧГ=0")+"C1").текст;
		стр1.ЭлАдрес = область1.Область("R"+формат(i,"ЧГ=0")+"C2").текст;   //Область("R1С1");
 	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1УдалитьВсе(Кнопка)
	ЭтотОтчет.СписокКОнтрагентов.Очистить();
КонецПроцедуры


ТемаСообщения0  ="Ожидаемое поступление товаров";

ТекстСообщения0 ="   Добрый день,
						 |
						 |Высылаем Вам отчет по поступлению товаров.
						 |Ожидаемое прибытие на склад  +5 дней к указанной дате.
						 |
						 |С уважением, 
						 |ЗАО Торговая Компания ""Яршинторг"", 
						 |юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3,
						 |тел./факс: (4852) 200-200, 67-11-67
						 |Web-сайт : http://www.yst.ru
						 |"; 

// При инициализации формы необходимо заполнить реквизиты и поля основного реквизита формы 
ЗаполнитьПоляОсновногоРеквизита(ЭтотОтчет.ОбщийОтчет);

НеЗаполнятьНастройкиПриОткрытии = Ложь;
ОтборРазвернут = Ложь;