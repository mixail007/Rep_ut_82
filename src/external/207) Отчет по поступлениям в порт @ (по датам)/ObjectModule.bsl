
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПостроительОтчета = ОбщийОтчет.ПостроительОтчета;
	
	СтруктураПредставлениеПолей = Новый Структура;
	МассивОтбора = Новый Массив;
	//ЗаполнитьНачальныеНастройкиПоМакету(ПолучитьМакет("ПараметрыОтчетовПродажиКомпании"), СтруктураПредставлениеПолей, МассивОтбора, ОбщийОтчет, "СписокКроссТаблица");
	//Текст = "ВЫБРАТЬ
	//		|	СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
	//		|	СУММА(ТаблицаРегистра.КоличествоОборот * ТаблицаРегистра.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	//		|	СУММА(ТаблицаРегистра.СтоимостьОборот) КАК Стоимость,
	//		|	СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) КАК Себестоимость,
	//		|	СУММА(ВЫБОР
	//		|			КОГДА ТаблицаРегистра.СтоимостьОборот ЕСТЬ NULL 
	//		|				ТОГДА 0
	//		|			ИНАЧЕ ТаблицаРегистра.СтоимостьОборот
	//		|		КОНЕЦ) - СУММА(ВЫБОР
	//		|			КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот ЕСТЬ NULL 
	//		|				ТОГДА 0
	//		|			ИНАЧЕ ТаблицаРегистраСебестоимость.СтоимостьОборот
	//		|		КОНЕЦ) КАК ВаловаяПрибыль,
	//		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//		|				КОГДА ТаблицаРегистра.СтоимостьОборот <> 0
	//		|					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистра.СтоимостьОборот
	//		|				ИНАЧЕ 0
	//		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК РентабельностьПродаж,
	//		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	//		|				КОГДА ТаблицаРегистраСебестоимость.СтоимостьОборот <> 0
	//		|					ТОГДА 100 * (ТаблицаРегистра.СтоимостьОборот - ТаблицаРегистраСебестоимость.СтоимостьОборот) / ТаблицаРегистраСебестоимость.СтоимостьОборот
	//		|				ИНАЧЕ 0
	//		|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК ПроцентНаценки,
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец КАК Покупатель,
	//		|	ТаблицаРегистра.Номенклатура КАК Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения
	//		|{ВЫБРАТЬ
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец.* КАК Покупатель,
	//		|	ТаблицаРегистра.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	ТаблицаРегистра.ЗаказПокупателя.* КАК ЗаказПокупателя,
	//		|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	//		|	ТаблицаРегистра.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	//		|	ТаблицаРегистра.ДокументПродажи.* КАК ДокументПродажи,
	//		|	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//		|	ТаблицаРегистра.Период,
	//		|	ТаблицаРегистра.Регистратор.* КАК Регистратор,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодДень,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ)) КАК ПериодМесяц,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ)) КАК ПериодКвартал,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД)) КАК ПериодГод}
	//		|ИЗ
	//		|	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ТаблицаРегистра
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ТаблицаРегистраСебестоимость
	//		|		ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
	//		|			И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
	//		|			И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
	//		|			И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
	//		|			И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
	//		|{ГДЕ
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец.* КАК Покупатель,
	//		|	ТаблицаРегистра.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	ТаблицаРегистра.ЗаказПокупателя.* КАК ЗаказПокупателя,
	//		|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	//		|	ТаблицаРегистра.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	//		|	ТаблицаРегистра.ДокументПродажи.* КАК ДокументПродажи,
	//		|	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//		|	ТаблицаРегистра.Период,
	//		|	ТаблицаРегистра.Регистратор.* КАК Регистратор}
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец,
	//		|	ТаблицаРегистра.Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения
	//		|{УПОРЯДОЧИТЬ ПО
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец.* КАК Покупатель,
	//		|	ТаблицаРегистра.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	ТаблицаРегистра.ЗаказПокупателя.* КАК ЗаказПокупателя,
	//		|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	//		|	ТаблицаРегистра.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	//		|	ТаблицаРегистра.ДокументПродажи.* КАК ДокументПродажи,
	//		|	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//		|	ТаблицаРегистра.Период,
	//		|	ТаблицаРегистра.Регистратор.* КАК Регистратор}
	//		|ИТОГИ
	//		|	СУММА(Количество),
	//		|	СУММА(КоличествоБазовыхЕд),
	//		|	СУММА(Стоимость),
	//		|	СУММА(Себестоимость),
	//		|	СУММА(ВаловаяПрибыль),
	//		|	ВЫБОР
	//		|		КОГДА СУММА(Стоимость) > 0
	//		|			ТОГДА СУММА(ВаловаяПрибыль) / СУММА(Стоимость) * 100
	//		|		ИНАЧЕ 0
	//		|	КОНЕЦ КАК РентабельностьПродаж,
	//		|	ВЫБОР
	//		|		КОГДА СУММА(Себестоимость) > 0
	//		|			ТОГДА СУММА(ВаловаяПрибыль) / СУММА(Себестоимость) * 100
	//		|		ИНАЧЕ 0
	//		|	КОНЕЦ КАК ПроцентНаценки
	//		|ПО
	//		|	ОБЩИЕ
	//		|{ИТОГИ ПО
	//		|	ТаблицаРегистра.ДоговорКонтрагента.Владелец.* КАК Покупатель,
	//		|	ТаблицаРегистра.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	ТаблицаРегистра.ЗаказПокупателя.* КАК ЗаказПокупателя,
	//		|	ТаблицаРегистра.Номенклатура.* КАК Номенклатура,
	//		|	ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения.* КАК НоменклатураБазоваяЕдиницаИзмерения,
	//		|	ТаблицаРегистра.ХарактеристикаНоменклатуры.* КАК ХарактеристикаНоменклатуры,
	//		|	ТаблицаРегистра.ДокументПродажи.* КАК ДокументПродажи,
	//		|	ТаблицаРегистра.Подразделение.* КАК Подразделение,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ)) КАК ПериодДень,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, МЕСЯЦ)) КАК ПериодМесяц,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, КВАРТАЛ)) КАК ПериодКвартал,
	//		|	(НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ГОД)) КАК ПериодГод}
	//		|АВТОУПОРЯДОЧИВАНИЕ";
			
			
//Текст= "ВЫБРАТЬ
//| //А.ДатаПоступленияВПорт,
//| //А.Номенклатура.КОд Код,
//| //А.Номенклатура,
//| А.Количество
//| {ВЫБРАТЬ ДатаПоступленияВПорт,Номенклатура.*, Количество}
//| ИЗ
//|(ВЫБРАТЬ 
//|Поступления.ДатаПоступленияВПорт,
//|ЕстьNULL(Комплектующие.Номенклатура,Поступления.Номенклатура) Номенклатура ,
//|ВЫБОР КОГДА &ДляКлиентов И Поступления.Количество>50 ТОГДА 50 ИНАЧЕ Поступления.Количество КОНЕЦ Количество
//|ИЗ
//|(ВЫБРАТЬ //КорректировкаЗаказаПоставщику.Ссылка,
//|ЗначениеСвойствОбъектов.Значение ДатаПоступленияВПорт,
//|КорректировкаЗаказаПоставщику.Номенклатура,
//|СУММА( КорректировкаЗаказаПоставщику.Количество) Количество
//|ИЗ
//|(ВЫБРАТЬ Ссылка,Номенклатура,Количество
//|ИЗ	Документ.КорректировкаЗаказаПоставщику.Товары 
//|ГДЕ	Ссылка.Проведен  И Количество>0
//|	И Ссылка.Дата > НАЧАЛОПЕРИОДА(&ДатаНач,ГОД)	
//|	) КорректировкаЗаказаПоставщику
//|ЛЕВОЕ СОЕДИНЕНИЕ
//|(ВЫБРАТЬ ОБЪЕКТ, Значение ИЗ
//|РегистрСведений.ЗначенияСвойствОбъектов
//|ГДЕ	 Свойство=&Корректировка_ДатаПоступленияВПорт) ЗначениеСвойствОбъектов
//|ПО КорректировкаЗаказаПоставщику.Ссылка=ЗначениеСвойствОбъектов.Объект
//|ГДЕ (НЕ ЗначениеСвойствОбъектов.Значение  ЕСТЬ NULL)
//|И  ЗначениеСвойствОбъектов.Значение  МЕЖДУ &ДатаНач И &ДатаКон
//|СГРУППИРОВАТЬ ПО 	ЗначениеСвойствОбъектов.Значение , КорректировкаЗаказаПоставщику.Номенклатура
//| ) Поступления
//| ЛЕВОЕ СОЕДИНЕНИЕ
//| (ВЫБРАТЬ Номенклатура,Комплектующая
//| ИЗ РегистрСведений.КомплектующиеНоменклатуры
//| ГДЕ Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски) 
//| И Комплектующая.Видтовара=Значение(Перечисление.ВидыТоваров.Диски)) Комплектующие
//| ПО  Поступления.Номенклатура=Комплектующие.Комплектующая   ) А
//| {ГДЕ Номенклатура.* }
//|УПОРЯДОЧИТЬ ПО А.ДатаПоступленияВПорт,
//|А.Номенклатура.Наименование
//|ИТОГИ 
//|СУММА(КОличество) ПО ОБЩИЕ, 
//|ДатаПоступленияВПорт,
//|Номенклатура
//|  { ИТОГИ ПО 
//|ДатаПоступленияВПорт,
//|Номенклатура.* }";			

Текст="ВЫБРАТЬ
      |	ВЫБОР
      |		КОГДА &Nmax = 0
      |			ТОГДА А.Количество
      |		ИНАЧЕ ВЫБОР
      |				КОГДА А.Количество > &Nmax
      |					ТОГДА &Nmax
      |				ИНАЧЕ А.Количество
      |			КОНЕЦ
      |	КОНЕЦ КАК Количество
      |{ВЫБРАТЬ
      |	А.Подразделение.*,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура.*,
      |	Количество}
      |ИЗ
      |	(ВЫБРАТЬ
      |		А.ДатаПоступленияВПорт КАК ДатаПоступленияВПорт,
      |		А.Номенклатура КАК Номенклатура,
      |		СУММА(А.КоличествоОстаток) КАК Количество,
      |		ВЫБОР
      |			КОГДА А.ЗаказПоставщику.Подразделение = ЗНАЧЕНИЕ(справочник.Подразделения.пустаяСсылка)
      |				ТОГДА А.ЗаказПоставщику.Грузополучатель
      |			ИНАЧЕ А.ЗаказПоставщику.Подразделение
      |		КОНЕЦ КАК Подразделение
      |	ИЗ
      |		(ВЫБРАТЬ
      |			ЗаказыПоставщикамОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступленияВПорт,
      |			ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
      |			ЗаказыПоставщикамОстатки.Номенклатура КАК Номенклатура,
      |			ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
      |		ИЗ
      |			РегистрНакопления.ЗаказыПоставщикам.Остатки(, Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)) КАК ЗаказыПоставщикамОстатки) КАК А
      |	
      |	СГРУППИРОВАТЬ ПО
      |		А.Номенклатура,
      |		А.ДатаПоступленияВПорт,
      |		ВЫБОР
      |			КОГДА А.ЗаказПоставщику.Подразделение = ЗНАЧЕНИЕ(справочник.Подразделения.пустаяСсылка)
      |				ТОГДА А.ЗаказПоставщику.Грузополучатель
      |			ИНАЧЕ А.ЗаказПоставщику.Подразделение
      |		КОНЕЦ) КАК А
      |ГДЕ
      |	А.ДатаПоступленияВПорт МЕЖДУ &ДатаНач И &ДатаКон
      |{ГДЕ
      |	А.Подразделение.*,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура.*}
      |
      |УПОРЯДОЧИТЬ ПО
      |	А.Подразделение,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура.Наименование
      |{УПОРЯДОЧИТЬ ПО
      |	А.Подразделение.*,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура.*}
      |ИТОГИ
      |	СУММА(Количество)
      |ПО
      |	ОБЩИЕ,
      |	А.Подразделение,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура
      |{ИТОГИ ПО
      |	А.Подразделение.*,
      |	А.ДатаПоступленияВПорт,
      |	А.Номенклатура.*}
      |АВТОУПОРЯДОЧИВАНИЕ";

	СтруктураПредставлениеПолей = Новый Структура("
	|ДатаПоступленияВПорт", 
	"Дата поступления в порт");
	
		
	ПостроительОтчета.Текст = Текст;
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	
	//ДоступныеПоляОтбора = ПостроительОтчета.Отбор.ПолучитьДоступныеПоля();
	//Поле = ДоступныеПоляОтбора.Добавить("ДляКлиентов", "Для клиентов", 
	//Новый ОписаниеТипов("Булево"));
	//Поле.Отбор = Истина;
	//ПостроительОтчета.Отбор.УстановитьДоступныеПоля(ДоступныеПоляОтбора);
	//
	//МассивОтбора.Добавить("ДляКлиентов");

	
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета);
	
	ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
	ОбщийОтчет.мВыбиратьИмяРегистра = Ложь;
	ОбщийОтчет.ВыводитьПоказателиВСтроку = Истина;
	ОбщийОтчет.ВыводитьИтогиПоВсемУровням = Истина;
	
	ОбщийОтчет.ЗаполнитьПоказатели("Количество", "Количество в единицах хранения", Истина, "ЧЦ=15; ЧДЦ=0");

	ОбщийОтчет.мНазваниеОтчета = "Отчет по поступлениям в порт";
	ОбщийОтчет.мВыбиратьИспользованиеСвойств = Истина;
	ПостроительОтчета.Параметры.Вставить("Свойство_ДатаПоступленияВПорт",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90160")); //
	//ПостроительОтчета.Параметры.Вставить("ДляКлиентов",ПостроительОтчета.Отбор.ДляКлиентов.Значение ); //
	ПостроительОтчета.Параметры.Вставить("Nmax", ЭтотОбъект.Nmax);
	// Установим дату начала отчета
	//Если ЗначениеНеЗаполнено(ОбщийОтчет.ДатаНач) Тогда
	//	Если Не ЗначениеНеЗаполнено(глТекущийПользователь) Тогда
	//		ОбщийОтчет.ДатаНач = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяДатаНачалаОтчетов");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("РентабельностьПродаж", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	//ОбщийОтчет.мСтруктураСвязиПоказателейИИзмерений.Вставить("ПроцентНаценки", Новый Структура("ТакогоИзмеренияНетВОтчете")); // Рентабельность не выводится в итогах по группировкам, только в детальных записях
	
	ОбщийОтчет.ПостроительОтчета.Параметры.Вставить("Nmax", ЭтотОбъект.Nmax);//+++

	ОбщийОтчет.СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок);

КонецПРоцедуры

// Читает свойство Построитель отчета
//
// Параметры
//	Нет
//
Функция ПолучитьПостроительОтчета() Экспорт

	Возврат ОбщийОтчет.ПолучитьПостроительОтчета();

КонецФункции // ПолучитьПостроительОтчета()

// Настраивает отчет по переданной структуре параметров
//
// Параметры:
//	Нет.
//
Процедура Настроить(Параметры) Экспорт

	ОбщийОтчет.Настроить(Параметры, ЭтотОбъект);

КонецПроцедуры

// Возвращает основную форму отчета, связанную с данным экземпляром отчета
//
// Параметры
//	Нет
//
Функция ПолучитьОсновнуюФорму() Экспорт
	
	ОснФорма = ПолучитьФорму();
	ОснФорма.ОбщийОтчет = ОбщийОтчет;
	ОснФорма.ЭтотОтчет = ЭтотОбъект;
	Возврат ОснФорма;
	
КонецФункции // ПолучитьОсновнуюФорму()

// Возвращает форму настройки 
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	
//
Функция ПолучитьФормуНастройки() Экспорт
	
	ФормаНастройки = ОбщийОтчет.ПолучитьФорму("ФормаНастройка");
	Возврат ФормаНастройки;
	
КонецФункции // ПолучитьФормуНастройки()

// Процедура обработки расшифровки
//
// Параметры:
//	Нет.
//
Процедура ОбработкаРасшифровки(РасшифровкаСтроки, ПолеТД, ВысотаЗаголовка, СтандартнаяОбработка) Экспорт
	
	// Добавление расшифровки из колонки
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		// Расшифровка колонки находится в заголовке колонки
		РасшифровкаКолонки = ПолеТД.Область(ВысотаЗаголовка+2, ПолеТД.ТекущаяОбласть.Лево).Расшифровка;

		Расшифровка = Новый Структура;

		Для каждого Элемент Из РасшифровкаСтроки Цикл
			Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;

		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда

			Для каждого Элемент Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;

		КонецЕсли; 

		ОбщийОтчет.ОбработкаРасшифровкиСтандартногоОтчета(Расшифровка, СтандартнаяОбработка, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру, в которую складываются настройки
//
Функция СформироватьСтруктуруДляСохраненияНастроек(ПоказыватьЗаголовок) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ОбщийОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураНастроек, ПоказыватьЗаголовок);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки из структуры - кроме состояния панели "Отбор"
//
Процедура ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет=Неопределено) Экспорт
	
	// Если отчет, вызвавший порцедуру, не передан, то считаем, что ее вызвал этот отчет
	Если Отчет = Неопределено Тогда
		Отчет = ЭтотОбъект;
	КонецЕсли;

	ОбщийОтчет.ВосстановитьНастройкиИзСтруктуры(СохраненныеНастройки, ПоказыватьЗаголовок, Отчет);
	
КонецПроцедуры

ОбщийОтчет.ИмяРегистра = "Продажи";