
Процедура КнопкаВыполнитьНажатие(Кнопка)

	Если ТабличноеПоле.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	
	
	ТабДок=ТабличноеПоле;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		ДокУЦН=Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	Иначе
		ДокУЦН=Документы.УстановкаЦенНоменклатурыКонтрагентов.СоздатьДокумент();
		ДокУЦН.Контрагент=Контрагент;
	КонецЕсли;
	ДокУЦН.Дата=ТекущаяДата();
	
	
	Для сч=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
	строкаТипыЦен=ДокУЦН.ТипыЦен.Добавить();
	строкаТипыЦен.ТипЦен=ИспользуемыеТипыЦен[сч].ТипЦен;
	КонецЦикла;	
		
	
	//
	Для  счСтрок=0 по ТабДок.Количество()-1 Цикл
		Если ЗначениеНеЗаполнено(ТабДок[счСтрок].Номенклатура) Тогда
			Продолжить;
		КонецЕсли;	
		
		Для счКолонок=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
			   //ЗначениеЦены=ТабДок["ТипЦен"+ Строка(ИспользуемыеТипыЦен[сч].НомерКолонки)][сч];
			   ЗначениеЦены=ТабДок[счСтрок]["ТипЦен"+ Строка(ИспользуемыеТипыЦен[счКолонок].НомерСтроки)];
			  //+++ 15.04.2014
			  Если Флажок1 или (не Флажок1 и не ЗначениеНеЗаполнено(ЗначениеЦены)) Тогда
			   строкаТовары=ДокУЦН.Товары.Добавить();
			   строкаТовары.Номенклатура=ТабДок[счСтрок].Номенклатура;
			   строкаТовары.Цена=Число(ЗначениеЦены);
			   
			   //+++ 30.11.2017  строкаТовары.Валюта=Константы.ВалютаУправленческогоУчета.Получить();
			   строкаТовары.Валюта=ИспользуемыеТипыЦен[счКолонок].ТипЦен.ВалютаЦены;
			   
			   строкаТовары.ЕдиницаИзмерения=строкаТовары.Номенклатура.ЕдиницаХраненияОстатков;
			   строкаТовары.ТипЦен=ИспользуемыеТипыЦен[счКолонок].ТипЦен;
              КонецЕсли;
        КонецЦикла; 

	
	КонецЦикла;	
	
	ДокУЦН.НеПроводитьНулевыеЗначения = не Флажок1; //+++ 15.04.2014
	
	ДокУЦН.ПолучитьФорму().Открыть();

	
КонецПроцедуры

функция НоменклатураНайтиПоКодуИАртикулу(КодАртикул="", Производитель = неопределено)
	
	//НайдЭлемент=Справочники.Номенклатура.НайтиПоКоду(ПредполагаемыйКод);   //долго ищет
	//НайдЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ПредполагаемыйКод); //долго ищет
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Номенклатура.Ссылка
	                |ИЗ
	                |	Справочник.Номенклатура КАК Номенклатура
	                |ГДЕ
//+++ 24.02.2015					
					|"+?(Флажок2,?(Флажок3,"Номенклатура.Артикул ПОДОБНО ""%"" + &КодАртикул + ""%""","(Номенклатура.Артикул = &КодАртикул)"),
					 "	(Номенклатура.Код = &КодАртикул)")+"
	                |"+?(ВидТовара.Пустая(),"","И Номенклатура.ВидТовара = &ВидТовара")+"
					| и 99=99
	                |УПОРЯДОЧИТЬ ПО
	                |	Номенклатура.ВидТовара УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
	 Запрос.УстановитьПараметр("КодАртикул", КодАртикул );
	 Запрос.УстановитьПараметр("ВидТовара", ВидТовара);
	 Запрос.УстановитьПараметр("Производитель", Производитель);
	 
	 //30.01.17 Смирнов, дополнительный отбор по производителю
	 Если ЗначениеЗаполнено(Производитель) тогда
		 Запрос.Текст=СтрЗаменить(Запрос.Текст, "99=99", "Номенклатура.Производитель = &Производитель");
	 КонецЕсли;	 
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() тогда
	  НайдЭлемент = выборка.ссылка;
	  	если Выборка.Количество()>1 тогда
		  сообщить("Неоднозначное определение товара по "+?(Флажок2,"Артикулу","Коду")+?(ВидТовара.Пустая(),""," и виду товара: "+строка(ВидТовара))+": "+КодАртикул+" - найдено "+строка(Выборка.Количество())
		  +" товаров! Выбран "+строка(НайдЭлемент.Код)+" - "+строка(НайдЭлемент), СтатусСообщения.Внимание );
		конецесли;  
  	  Иначе 
	  НайдЭлемент = справочники.Номенклатура.ПустаяСсылка();
	 КонецЕсли;
возврат НайдЭлемент; 
КонецФункции

//Сакулина
Функция НайтиУцененныйТовар(КодТовара)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка как Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул ПОДОБНО &Артикул";
	Запрос.УстановитьПараметр("Артикул", КодТовара + "%") ;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выгрузить();
	Возврат Выборка;
КонецФункции
//Сакулина
 
Функция мПрочитатьТабличныйДокументИзExcel( ИмяФайла, НомерЛистаExcel = 1) Экспорт
	//ПорядковыйНомерКолонкиСКоличеством=0;
	//ЗахваченныйНомерКолонки = -1;
	//НачалоЗахваченногоНомера=0;
	//КонечныйНомерСтрокиДляПроверки=20;
	
	Ответ = Вопрос("Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
	Отказ = (Ответ = КодВозвратаДиалога.Нет);
	
	если Не отказ Тогда
		
		ТабличноеПоле.Очистить();
		
	КонецЕсли;
	
	xlLastCell = 11;
	
	ВыбФайл = Новый Файл(ИмяФайла);
	Если НЕ ВыбФайл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = Excel.Sheets(НомерЛистаExcel);
	Исключение
		Сообщить("Ошибка. Возможно неверно указан номер листа книги Excel.");
		Возврат ложь;
		
	КонецПопытки;
	
	                                       
	
	//ActiveCell = Excel.ActiveCell.SpecialCells(xlLastCell);	
	
	ActiveCell = ExcelЛист.Cells(1,1).SpecialCells(xlLastCell);
	RowCount = ActiveCell.Row;
	ColumnCount = ActiveCell.Column;
	
	Для сч=1 по RowCount Цикл
		ОбработкаПрерыванияПользователя();
		ПредполагаемыйКод=Формат(ExcelЛист.Cells(сч,НомерКолонкиСКодом).Value,"ЧГ=''");
		Если не ЗначениеНеЗаполнено(ПредполагаемыйКод) Тогда
			
		//	НайдЭлемент=Справочники.Номенклатура.НайтиПоКоду(ПредполагаемыйКод);   //долго ищет
			НайдЭлемент=НоменклатураНайтиПоКодуИАртикулу(ПредполагаемыйКод,Производитель);   //долго ищет
			
		//	Если ЗначениеНеЗаполнено(НайдЭлемент) Тогда
		//		НайдЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ПредполагаемыйКод); //долго ищет
         		Если не ЗначениеНеЗаполнено(НайдЭлемент) Тогда
					НачалоЗахваченногоНомера=сч;
					Прервать;
				КонецЕсли;
			//Иначе
			// 		НачалоЗахваченногоНомера=сч;
			//		Прервать;	
			//КонецЕсли;
		КОнецЕсли;	
	КонецЦикла;	
	
	
	//НомерКолонкиТипЦен1=0;
	//НомерКолонкиТипЦен2=0;
	//НомерКолонкиТипЦен3=0;
	//НомерКолонкиТипЦен4=0;
	//НомерКолонкиТипЦен5=0;
	//
	//массивНомеров =Новый Массив;
	//Для сч=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
	//	 массивНомеров[сч]=ИспользуемыеТипыЦен[сч].НомерСтроки; 
	//КонецЕсли;
	
	Если СтрокаС <> 0 и СтрокаС > НачалоЗахваченногоНомера Тогда
		НачалоЗахваченногоНомера = СтрокаС;
	КонецЕсли;
	
	Если СтрокаПо <> 0  и СтрокаПо < RowCount Тогда
		RowCount = СтрокаПо;
	КонецЕсли;
		
	Для Row = НачалоЗахваченногоНомера По RowCount Цикл	
		ОбработкаПрерыванияПользователя(); // нельзя! иначе Excel не закроется!
	
		// определяем номенклатуру
			ПредполагаемыйКод=Формат(ExcelЛист.Cells(Row,НомерКолонкиСКодом).Value,"ЧГ=''");
			Если ЗначениеНеЗаполнено(СокрЛП(ПредполагаемыйКод)) Тогда
				Сообщить("--- Значение не заполнено в ячейке Кода №" + Строка(НомерКолонкиСКодом)+", в строке №" +Строка(Row), СтатусСообщения.Внимание);
				Продолжить;
			КонецЕсли;	
			  
	//		    Номенклатура=Справочники.Номенклатура.НайтиПоКоду(ПредполагаемыйКод);
			Номенклатура=НоменклатураНайтиПоКодуИАртикулу(ПредполагаемыйКод, Производитель);   //долго ищет
	
				//Если ЗначениеНеЗаполнено(Номенклатура) Тогда
				//	Номенклатура=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ПредполагаемыйКод);
					Если ЗначениеНеЗаполнено(Номенклатура) Тогда
						Сообщить("ххх Не найдена номенклатура по коду или артикулу в колонке №" + Строка(НомерКолонкиСКодом)+", в строке №" +Строка(Row), СтатусСообщения.Внимание);
						Продолжить;
					КонецЕсли;
				//КонецЕсли;
			
		СтрокаЗаказа=ТабличноеПоле.Добавить();	
		СтрокаЗаказа.Номенклатура=Номенклатура;	
		СтрокаЗаказа.Код=Номенклатура.Код;
		СтрокаЗаказа.Артикул=Номенклатура.Артикул;

		Для сч=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
			Попытка 
				СтрокаЗаказа["ТипЦен"+Число(сч+1)] = Число(Строка(ExcelЛист.Cells(Row,ИспользуемыеТипыЦен[сч].НомерКолонки).Value));
				
				//ЦенаТипЦен5=Число(Строка(ExcelЛист.Cells(Row,НомерКолонкиБазовая).Value));
			Исключение
				Сообщить("В строке №" +Строка(Row)+"содержится неверный формат числа.");
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
		//Сакулина. Заполняем цены на уцененный товар
		Если ЗагрузитьЦеныУценки Тогда
			СписокНоменклатуры = НайтиУцененныйТовар("" + Номенклатура.Код + "_");
			Для Каждого СтрНоменклатура из СписокНоменклатуры Цикл
				СтрокаЗаказа=ТабличноеПоле.Добавить();	
				СтрокаЗаказа.Номенклатура=СтрНоменклатура.Номенклатура;	
				СтрокаЗаказа.Код=СтрНоменклатура.Номенклатура.Код;
				СтрокаЗаказа.Артикул=СтрНоменклатура.Номенклатура.Артикул;
				Для сч=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
					Попытка 
						СтрокаЗаказа["ТипЦен"+Число(сч+1)] = Число(Строка(ExcelЛист.Cells(Row,ИспользуемыеТипыЦен[сч].НомерКолонки).Value));
					Исключение
						Сообщить("В строке №" +Строка(Row)+"содержится неверный формат числа.");
						Продолжить;
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
        //Сакулина. Заполняем цены на уцененный товар

		
	КонецЦикла;	
	//23.08.17 Смирнов, если стоит цена ошиповки, то ищем по комплектующим неошипованную шину
	Если СтоимостьОшиповки.Количество()>0 тогда
		ДобавитьНешипованые();
	КонецЕсли;
		///
		
	Excel.WorkBooks.Close();
	Excel = 0;
	
	Возврат Истина;
	
КонецФункции // ()

Процедура ДобавитьНешипованые()
ЗапросНешипованые = новый Запрос;
ЗапросНешипованые.УстановитьПараметр("тзШипованые",ТабличноеПоле);
ЗапросНешипованые.УстановитьПараметр("тзСтоимостьОшиповки",СтоимостьОшиповки);
	ЗапросНешипованые.Текст="ВЫБРАТЬ
	                        |	тзШипованые.Номенклатура,
	                        |	тзШипованые.Код,
	                        |	тзШипованые.Артикул,
	                        |	тзШипованые.ТипЦен1,
	                        |	тзШипованые.ТипЦен2,
	                        |	тзШипованые.ТипЦен3,
	                        |	тзШипованые.ТипЦен4,
	                        |	тзШипованые.ТипЦен5,
	                        |	тзШипованые.ТипЦен6,
	                        |	тзШипованые.ТипЦен7,
	                        |	тзШипованые.ТипЦен8,
	                        |	тзШипованые.ТипЦен9,
	                        |	тзШипованые.ТипЦен10,
	                        |	тзШипованые.ТипЦен11,
	                        |	тзШипованые.ТипЦен12,
	                        |	тзШипованые.ТипЦен13,
	                        |	тзШипованые.ТипЦен14,
	                        |	тзШипованые.ТипЦен15,
	                        |	тзШипованые.ТипЦен16,
	                        |	тзШипованые.ТипЦен17,
	                        |	тзШипованые.ТипЦен18,
	                        |	тзШипованые.ТипЦен19,
	                        |	тзШипованые.ТипЦен20,
	                        |	тзШипованые.ТипЦен21
	                        |ПОМЕСТИТЬ втШипованые
	                        |ИЗ
	                        |	&тзШипованые КАК тзШипованые
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	тзСтоимостьОшиповки.Диаметр,
	                        |	тзСтоимостьОшиповки.Стоимость
	                        |ПОМЕСТИТЬ втСтоимостьОшиповки
	                        |ИЗ
	                        |	&тзСтоимостьОшиповки КАК тзСтоимостьОшиповки
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ
	                        |	КомплектующиеНоменклатуры.Комплектующая.Код КАК Код,
	                        |	КомплектующиеНоменклатуры.Комплектующая.Артикул КАК Артикул,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен1 <> 0
	                        |			ТОГДА втШипованые.ТипЦен1 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен1,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен2 <> 0
	                        |			ТОГДА втШипованые.ТипЦен2 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен2,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен3 <> 0
	                        |			ТОГДА втШипованые.ТипЦен3 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен3,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен4 <> 0
	                        |			ТОГДА втШипованые.ТипЦен4 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен4,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен5 <> 0
	                        |			ТОГДА втШипованые.ТипЦен5 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен5,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен6 <> 0
	                        |			ТОГДА втШипованые.ТипЦен6 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен6,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен7 <> 0
	                        |			ТОГДА втШипованые.ТипЦен7 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен7,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен8 <> 0
	                        |			ТОГДА втШипованые.ТипЦен8 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен8,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен9 <> 0
	                        |			ТОГДА втШипованые.ТипЦен9 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен9,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен10 <> 0
	                        |			ТОГДА втШипованые.ТипЦен10 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен10,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен11 <> 0
	                        |			ТОГДА втШипованые.ТипЦен11 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен11,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен12 <> 0
	                        |			ТОГДА втШипованые.ТипЦен12 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен12,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен13 <> 0
	                        |			ТОГДА втШипованые.ТипЦен13 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен13,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен14 <> 0
	                        |			ТОГДА втШипованые.ТипЦен14 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен14,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен15 <> 0
	                        |			ТОГДА втШипованые.ТипЦен15 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен15,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен16 <> 0
	                        |			ТОГДА втШипованые.ТипЦен16 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен16,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен17 <> 0
	                        |			ТОГДА втШипованые.ТипЦен17 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен17,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен18 <> 0
	                        |			ТОГДА втШипованые.ТипЦен18 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен18,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен19 <> 0
	                        |			ТОГДА втШипованые.ТипЦен19 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен19,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен20 <> 0
	                        |			ТОГДА втШипованые.ТипЦен20 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен20,
	                        |	ВЫБОР
	                        |		КОГДА втШипованые.ТипЦен21 <> 0
	                        |			ТОГДА втШипованые.ТипЦен21 - ЕСТЬNULL(СтоимостьОш.Стоимость, 0)
	                        |		ИНАЧЕ 0
	                        |	КОНЕЦ КАК ТипЦен21,
	                        |	КомплектующиеНоменклатуры.Комплектующая КАК Номенклатура
	                        |ИЗ
	                        |	втШипованые КАК втШипованые
	                        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	                        |		ПО втШипованые.Номенклатура = КомплектующиеНоменклатуры.Номенклатура
	                        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	                        |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                        |				втСтоимостьОшиповки.Диаметр КАК Диаметр,
	                        |				втСтоимостьОшиповки.Стоимость КАК Стоимость
	                        |			ИЗ
	                        |				втСтоимостьОшиповки КАК втСтоимостьОшиповки
	                        |			ГДЕ
	                        |				втСтоимостьОшиповки.Стоимость > 0) КАК СтоимостьОш
	                        |			ПО НоменклатураСпр.Типоразмер.Диаметр = СтоимостьОш.Диаметр
	                        |		ПО втШипованые.Номенклатура = НоменклатураСпр.Ссылка
	                        |ГДЕ
	                        |	КомплектующиеНоменклатуры.Комплектующая.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)";
							
							РезНешипованые = ЗапросНешипованые.Выполнить().Выбрать();
							
							Пока РезНешипованые.Следующий() Цикл
								СтрокаЗаказа=ТабличноеПоле.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаЗаказа,РезНешипованые);
							КонецЦикла;
							ТабличноеПоле.Сортировать("Номенклатура Возр");
	
КонецПроцедуры


Процедура Кнопка1Нажатие(Элемент)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Лист Excel (*.xls)|*.xls";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
//		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ДиалогВыбораФайла.ПолноеИмяФайла,НомерЛиста);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеНоменклатураПриИзменении(Элемент)
	Если не ЗначениеНеЗаполнено(ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Номенклатура) Тогда
	ЭлементыФормы.ТабличноеПоле.ТекущаяСтрока.Код=ЭлементыФормы.ТабличноеПоле.ТекущиеДанные.Номенклатура.Код;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти,ДокументОбъект)
	ВалютаРегламентированногоУчета=Константы.ВалютаРегламентированногоУчета.Получить();
	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета); 
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект); 
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

Процедура КоманднаяПанель1Очистить(Кнопка)
	ТабличноеПоле.Очистить();
КонецПроцедуры



Процедура ИспользуемыеТипыЦенТипЦенПриИзменении(Элемент)
		Для сч=0 по ИспользуемыеТипыЦен.Количество()-1 Цикл
		ЭлементыФормы.ТабличноеПоле.Колонки["ТипЦЕн"+Число(сч+1)].ТекстШапки=ИспользуемыеТипыЦен[сч].ТипЦен;
		КонецЦикла;
КонецПроцедуры


Процедура ИспользуемыеТипыЦенТипЦенНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Элемент.Значение=Справочники.ТипыЦенНоменклатуры.ПустаяСсылка()	;
		
	Иначе
	СтандартнаяОбработка=Ложь;
		ФормаВыбора=Справочники.ТипыЦенНоменклатурыКонтрагентов.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.РежимВыбора=Истина;
		ФормаВыбора.Отбор.Владелец.Значение=Контрагент;
		ФормаВыбора.Отбор.Владелец.Использование=Истина;
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры


Процедура ИспользуемыеТипыЦенТипЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
Элемент.Значение=ВыбранноеЗначение;	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	НомерКолонкиСКодом = 1;
	НомерЛиста=1;
КонецПроцедуры

Процедура Флажок2ПриИзменении(Элемент)
	Если Флажок2 тогда
		ЭлементыФормы.Флажок2.Заголовок = "№ колонки Артикул";
	Иначе	
		ЭлементыФормы.Флажок2.Заголовок = "№ колонки Кода";
	КонецЕсли;	
КонецПроцедуры







