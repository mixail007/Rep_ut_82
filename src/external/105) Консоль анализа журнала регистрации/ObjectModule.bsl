/// После открытия журнала содержит активный объект чтения XML
// Объект чтения всегда находится в исходном состоянии - начало чтения первого события
Перем ЖурналРегистрации;

///////////////////////////////////////////////////////////////////////////////

// признаки наличия различных полей в выгрузке журнала
Перем ЕстьУровень;
Перем ЕстьДатаВремя;
Перем ЕстьИмяПриложения;
Перем ЕстьПредставлениеПриложения;
Перем ЕстьИмяСобытия;
Перем ЕстьПредставлениеСобытия;
Перем ЕстьИдентификаторПользователя;
Перем ЕстьИмяПользователя;
Перем ЕстьКомпьютер;
Перем ЕстьИмяОбъектаМетаданных;
Перем ЕстьПредставлениеОбъектаМетаданных;
Перем ЕстьКомментарий;
Перем ЕстьДанные;
Перем ЕстьПредставлениеДанных;

// шаблон таблицы значений, обладающей структурой события
Перем ШаблонСобытий;

///////////////////////////////////////////////////////////////////////////////

// URI пространства имен и имена элементов XML выгрузки журнала регистрации
Перем ПространствоИменЖурнала;
Перем ЭлементЖурналРегистрации;
Перем ЭлементСобытие;
Перем ЭлементУровень;
Перем ЭлементДата;
Перем ЭлементИмяПриложения;
Перем ЭлементПредставлениеПриложения;
Перем ЭлементИмяСобытия;
Перем ЭлементПредставлениеСобытия;
Перем ЭлементИдентификаторПользователя;
Перем ЭлементИмяПользователя;
Перем ЭлементКомпьютер;
Перем ЭлементИмяОбъектаМетаданных;
Перем ЭлементПредставлениеОбъектаМетаданных;
Перем ЭлементКомментарий;
Перем ЭлементДанные;
Перем ЭлементПредставлениеДанных;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает журнал регистрации
Процедура ОткрытьЖурнал(ИмяФайла) Экспорт
	
	Попытка
		
		// Журнал регистрации открыт успешно
		ЖурналРегистрации = ОткрытьЖурналРегистрации(ИмяФайла);
		ИмяФайлаЖурнала = ИмяФайла;
		
		// выполняем предварительное чтение для получения уникальных значений различных полей
		ПолучитьХарактеристикиЖурнала();
		
		// выполняем настройку построителя отчетов
		НастроитьПостроительОтчетов();
		
	Исключение
		
		ЗакрытьЖурнал();
		// попытка открытия журнала регистрации не удалась
		Ошибка = "Ошибка открытия журанала регистрации: " + ИмяФайла + Символы.ПС;
		Ошибка = Ошибка + ОписаниеОшибки();
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
КонецПроцедуры	// Процедура ОткрытьЖурнал

// Выполняет закрытие журнала регистрации
Процедура ЗакрытьЖурнал() Экспорт
	
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных;
	ЖурналРегистрации = Неопределено;
	ИмяФайлаЖурнала = Неопределено;
	
	ЕстьУровень = Ложь;
	ЕстьДатаВремя = Ложь;
	ЕстьИмяПриложения = Ложь;
	ЕстьПредставлениеПриложения = Ложь;
	ЕстьИмяСобытия = Ложь;
	ЕстьПредставлениеСобытия = Ложь;
	ЕстьИдентификаторПользователя = Ложь;
	ЕстьИмяПользователя = Ложь;
	ЕстьКомпьютер = Ложь;
	ЕстьИмяОбъектаМетаданных = Ложь;
	ЕстьПредставлениеОбъектаМетаданных = Ложь;
	ЕстьКомментарий = Ложь;
	ЕстьДанные = Ложь;
	ЕстьПредставлениеДанных = Ложь;
	
	ШаблонСобытий = Неопределено;
	
КонецПроцедуры	// Процедура ЗакрытьЖурнал

// Функция определения открытия журнала регистрации
Функция ЖурналОткрыт() Экспорт
	
	Возврат ?(ЖурналРегистрации <> Неопределено, Истина, Ложь);
	
КонецФункции	// ЖурналОткрыт

// Выполняет построение отчета
Процедура ПостроитьОтчет(Отчет, РазмещениеРеквизитов, РазмещениеГруппировок, РазмещениеИтогов, ТипОформления) Экспорт
		
	Если ЖурналРегистрации = Неопределено Тогда
		
		ВызватьИсключение "Журнал регистрации не открыт";
		
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура;
	ГруппировкаСобытия = Новый Структура;
	Построитель = СоздатьПостроительОтчета(ПостроительОтчета, СтруктураСобытия, ГруппировкаСобытия);
	// читаем журнал в таблицу
	ПрочитатьЖурналВТаблицуЗначений(СтруктураСобытия, Построитель.Отбор, 
									ГруппировкаСобытия, Построитель.ИсточникДанных.ИсточникДанных);
	// устанавливаем оформление
	УстановитьОформлениеОтчета(Построитель, РазмещениеРеквизитов, РазмещениеГруппировок,
							   РазмещениеИтогов, ТипОформления);
	Построитель.Выполнить();
	Отчет.Очистить();
	Построитель.Вывести(Отчет);
	
КонецПроцедуры	// Процедура ПостроитьОтчет

// Выполняет построение своднай таблицы
Процедура ПостроитьСводнуюТаблицу(СводнаяТаблица, РазмещениеРеквизитов, РазмещениеГруппировок, РазмещениеИтогов, ТипОформления) Экспорт
	
	Если ЖурналРегистрации = Неопределено Тогда
		
		ВызватьИсключение "Журнал регистрации не открыт";
		
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура;
	ГруппировкаСобытия = Новый Структура;
	Построитель = СоздатьПостроительОтчета(ПостроительОтчета, СтруктураСобытия, ГруппировкаСобытия);
	// читаем журнал в таблицу
	ПрочитатьЖурналВТаблицуЗначений(СтруктураСобытия, Построитель.Отбор, 
									ГруппировкаСобытия, Построитель.ИсточникДанных.ИсточникДанных);
	// устанавливаем оформление
	УстановитьОформлениеОтчета(Построитель, РазмещениеРеквизитов, РазмещениеГруппировок,
							   РазмещениеИтогов, ТипОформления);
	СводнаяТаблица.ИсточникДанных = Построитель;
	
КонецПроцедуры	// Процедура ПостроитьСводнуюТаблицу

// Выполняет построение своднай таблицы
Процедура ПостроитьСводнуюДиаграмму(СводнаяДиаграмма) Экспорт
	
	Если ЖурналРегистрации = Неопределено Тогда
		
		ВызватьИсключение "Журнал регистрации не открыт";
		
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура;
	ГруппировкаСобытия = Новый Структура;
	Построитель = СоздатьПостроительОтчета(ПостроительОтчета, СтруктураСобытия, ГруппировкаСобытия);
	// читаем журнал в таблицу
	ПрочитатьЖурналВТаблицуЗначений(СтруктураСобытия, Построитель.Отбор, 
									ГруппировкаСобытия, Построитель.ИсточникДанных.ИсточникДанных);
	// устанавливаем источник данных в сводную диаграмму
	СводнаяДиаграмма.ИсточникДанных = Построитель;
	
КонецПроцедуры	// Процедура ПостроитьСводнуюДиаграмму

// Выполняет вывод результатов отчета в диаграмму
Процедура ВыполнитьАнализ(АнализДанных, ТипАнализа) Экспорт

	Если ЖурналРегистрации = Неопределено Тогда
		
		ВызватьИсключение "Журнал регистрации не открыт";
		
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура;
	ГруппировкаСобытия = Новый Структура;
	Построитель = СоздатьПостроительОтчета(ПостроительОтчета, СтруктураСобытия, ГруппировкаСобытия);
	// читаем журнал в таблицу
	ПрочитатьЖурналВТаблицуЗначений(СтруктураСобытия, Построитель.Отбор, 
									ГруппировкаСобытия, Построитель.ИсточникДанных.ИсточникДанных,
									Ложь);
	
	Построитель.Выполнить();
	
	ПостроительОтчетаАнализаДанных.ИсточникДанных = Построитель.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "");
	ПостроительОтчетаАнализаДанных.ТипАнализа = ТипАнализа;
	АнализДанных.Очистить();
	Если ТипАнализа = Тип("АнализДанныхОбщаяСтатистика") Тогда 

		ПостроительОтчетаАнализаДанных.Макет = ПолучитьМакет("МакетОбщаяСтатистика");
		
	Иначе
		
		ВызватьИсключение "Тип анализа: " + Строка(ТипАнализа) + " не поддерживается";

	КонецЕсли;
	
	ПостроительОтчетаАнализаДанных.Выполнить();
	ПостроительОтчетаАнализаДанных.Вывести(АнализДанных);
	
КонецПроцедуры	// Процедура ВыполнитьАнализ

// Активизирует или открывает форму параметров анализа данных
Функция ПараметрыАнализаДанных(Владелец) Экспорт
	
	Если ЖурналРегистрации = Неопределено Тогда
		
		ВызватьИсключение "Журнал регистрации не открыт";
		
	КонецЕсли;
	
	Если ПостроительОтчета.Результат = Неопределено Тогда
		
		ПостроительОтчета.Выполнить();
		
	КонецЕсли;
	
	Форма = ПолучитьФорму("ПараметрыАнализа", Владелец, ИмяФайлаЖурнала);
	ПостроительОтчетаАнализаДанных.ИсточникДанных = ПостроительОтчета.Результат;
	Если ПостроительОтчетаАнализаДанных.ТипАнализа = Неопределено Тогда
		
		ПостроительОтчетаАнализаДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
		
	КонецЕсли;
	
	Форма.Инициализировать(ПостроительОтчетаАнализаДанных);
	Возврат Форма;
	
КонецФункции	// Функция ПараметрыАнализаДанных

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция получения макета оформления
Функция МакетОформления(ТипОформления)
	
	Если ТипОформления = Неопределено Тогда
		Возврат ПолучитьМакетОформления(СтандартноеОформление.Интерфейс);
	Иначе
		Возврат ПолучитьМакетОформления(ТипОформления);
	КонецЕсли;

КонецФункции	// Функция МакетОформления

// Устанавливает оформление в построитель отчета
Процедура УстановитьОформлениеОтчета(Построитель, РазмещениеРеквизитов, РазмещениеГруппировок, РазмещениеИтогов, ТипОформления)
									 
	Если РазмещениеРеквизитов <> Неопределено Тогда
		
		Построитель.РазмещениеРеквизитовИзмеренийВСтроках = РазмещениеРеквизитов;
		Построитель.РазмещениеРеквизитовИзмеренийВКолонках = РазмещениеРеквизитов;
		
	Иначе
		
		Построитель.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Вместе;
		Построитель.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Вместе;
		
	КонецЕсли;
	
	Если РазмещениеГруппировок <> Неопределено Тогда
		
		Построитель.РазмещениеИзмеренийВСтроках = РазмещениеГруппировок;
		Построитель.РазмещениеИзмеренийВКолонках = РазмещениеГруппировок;
		
	Иначе
		
		Построитель.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
		Построитель.РазмещениеИзмеренийВКолонках = ТипРазмещенияИзмерений.Вместе;
	
	КонецЕсли;
	
	Если РазмещениеИтогов <> Неопределено Тогда
		
		Построитель.РазмещениеИтоговВСтроках = РазмещениеИтогов;
		
	Иначе
		
		Построитель.РазмещениеИтоговВСтроках = ТипРазмещенияИтогов.Подвал;
	
	КонецЕсли;
	
	Построитель.МакетОформления = МакетОформления(ТипОформления);
	
	// настраивание ширины колонок
	Построитель.Макет = Неопределено;
	Макет = Построитель.Макет;
	
    ТекущаяОбласть = Макет.НайтиТекст("Уровень", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 15;
		
    КонецЕсли; 
	
    ТекущаяОбласть = Макет.НайтиТекст("ИмяПриложения", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 10;
		
    КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ПредставлениеПриложения", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 20;
		
	КонецЕсли; 
	
    ТекущаяОбласть = Макет.НайтиТекст("ИмяСобытия", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 30;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ПредставлениеСобытия", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 30;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ИдентификаторПользователя", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 36;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ИмяПользователя", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 30;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("Компьютер", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 30;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ИмяОбъектаМетаданных", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 40;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ПредставлениеОбъектаМетаданных", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 40;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("Комментарий", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 50;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("Данные", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 40;
		
	КонецЕсли; 
			
    ТекущаяОбласть = Макет.НайтиТекст("ПредставлениеДанных", Неопределено, Макет.Область(), 
                                      Истина, Истина, Истина, Ложь); 
	Если ТекущаяОбласть <> Неопределено Тогда 
										  
		ТекущаяОбласть.ШиринаКолонки = 50;
		
	КонецЕсли; 
	
	Построитель.Макет = Макет;
	
КонецПроцедуры	// Процедура УстановитьОформлениеОтчета

// Функция получения шаблона событий
Функция ПолучитьШаблонСобытий()
	
	Возврат ШаблонСобытий.Скопировать();
	
КонецФункции	// Функция ПолучитьШаблонСобытий

// Создает построитель отчета используя указанные настройки
Функция СоздатьПостроительОтчета(Построитель, СтруктураСобытия, ГруппировкаСобытия)
	
	НовыйПостроитель = Новый ПостроительОтчета;
	Шаблон = СформироватьШаблонСобытияПоТекущимНастройкам(СтруктураСобытия, ГруппировкаСобытия);
	// создаем и настраиваем источник данных для построителя
	ИсточникДанных = Новый ОписаниеИсточникаДанных(Шаблон);
	НастроитьИсточникДанных(ИсточникДанных);
	НовыйПостроитель.ИсточникДанных = ИсточникДанных;
	НовыйПостроитель.УстановитьНастройки(Построитель.ПолучитьНастройки());
										 
	Возврат НовыйПостроитель;
	
КонецФункции

// Производит анализ полей построителя отчета и создает структуру шаблона события
Функция СформироватьШаблонСобытияПоТекущимНастройкам(СтруктураСобытия, ГруппировкаСобытия)
	
	Оригинал = ПолучитьШаблонСобытий();
	
	// формируем соответствие выбранных полей
	Колонки = Новый Соответствие;
	
	// производим анализ отбора построителя отчета
	Для каждого ЭлементОтбора из ПостроительОтчета.Отбор Цикл
		
		// анализируем только используемые элементы отбора
		Если НЕ ЭлементОтбора.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Колонки[ЭлементОтбора.ПутьКДанным] = Неопределено Тогда
			
			Колонки[ЭлементОтбора.ПутьКДанным] = Оригинал.Колонки.Найти(ЭлементОтбора.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// производим анализ группировок строк
	Для каждого Измерение из ПостроительОтчета.ИзмеренияСтроки Цикл
		
		ГруппировкаСобытия.Вставить(Измерение.ПутьКДанным);
		Если Колонки[Измерение.ПутьКДанным] = Неопределено Тогда
			
			Колонки[Измерение.ПутьКДанным] = Оригинал.Колонки.Найти(Измерение.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// производим анализ группировок колонок
	Для каждого Измерение из ПостроительОтчета.ИзмеренияКолонки Цикл
		
		ГруппировкаСобытия.Вставить(Измерение.ПутьКДанным);
		Если Колонки[Измерение.ПутьКДанным] = Неопределено Тогда
			
			Колонки[Измерение.ПутьКДанным] = Оригинал.Колонки.Найти(Измерение.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// производим анализ порядка
	Для каждого ЭлементПорядка из ПостроительОтчета.Порядок Цикл
		
		ГруппировкаСобытия.Вставить(ЭлементПорядка.ПутьКДанным);
		Если Колонки[ЭлементПорядка.ПутьКДанным] = Неопределено Тогда
			
			Колонки[ЭлементПорядка.ПутьКДанным] = Оригинал.Колонки.Найти(ЭлементПорядка.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// производим анализ выбранных полей
	Для каждого Поле из ПостроительОтчета.ВыбранныеПоля Цикл
		
		ГруппировкаСобытия.Вставить(Поле.ПутьКДанным);
		Если Колонки[Поле.ПутьКДанным] = Неопределено Тогда
			
			Колонки[Поле.ПутьКДанным] = Оригинал.Колонки.Найти(Поле.ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// производим анализ условного оформления
	Для каждого ЭлементОформления из ПостроительОтчета.УсловноеОформление Цикл
	//Для индекс = 0 по ПостроительОтчета.УсловноеОформление.Количество() - 1 Цикл
		
	//	ЭлементОформления = ПостроительОтчета.УсловноеОформление.Получить(индекс);
		
		Для каждого Область из ЭлементОформления.Область Цикл
		
			ГруппировкаСобытия.Вставить(Область.ПутьКДанным);
			Если Колонки[Область.ПутьКДанным] = Неопределено Тогда
			
				Колонки[Поле.ПутьКДанным] = Оригинал.Колонки.Найти(Поле.ПутьКДанным);
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	// производим анализ отбора в элементах условного оформления
	Для индекс = 0 по ПостроительОтчета.УсловноеОформление.Количество() - 1 Цикл
		
		ЭлементОформления = ПостроительОтчета.УсловноеОформление.Получить(индекс);
		
		Для каждого ЭлементОтбора из ЭлементОформления.Отбор Цикл
			
			// анализируем только используемые элементы отбора
			Если НЕ ЭлементОтбора.Использование Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ГруппировкаСобытия.Вставить(ЭлементОтбора.ПутьКДанным);
			Если Колонки[ЭлементОтбора.ПутьКДанным] = Неопределено Тогда
			
				Колонки[ЭлементОтбора.ПутьКДанным] = Оригинал.Колонки.Найти(ЭлементОтбора.ПутьКДанным);
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Шаблон = Новый ТаблицаЗначений;
	// формируем структуру шаблона
	Для каждого Колонка из Колонки Цикл 
		
		СтруктураСобытия.Вставить(Колонка.Значение.Имя);
		Шаблон.Колонки.Добавить(Колонка.Значение.Имя, Колонка.Значение.ТипЗначения,
								Колонка.Значение.Заголовок, Колонка.Значение.Ширина);
		
	КонецЦикла;
	ГруппировкаСобытия.Удалить("Количество");						
	
	Возврат Шаблон;
	
КонецФункции

// Функция получает текстовый ключ события в соответствии с отбором
Функция ПолучитьКлючСобытия(Группировка, Структура)
	
	Ключ = "";
	Для каждого Свойство из Структура Цикл
		
		Если Группировка.Свойство(Свойство.Ключ) Тогда
			
			Ключ = Ключ + Строка(Свойство.Ключ) + "=" + Строка(Свойство.Значение) + ";";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ключ;
	
КонецФункции

// Осуществляет чтение журнала регистрации в таблицу значений
Процедура ПрочитатьЖурналВТаблицуЗначений(Структура, Отбор, Группировка, Таблица, Группировать = Истина)
	
	Попытка
		
		Состояние("Чтение событий журнала регистрации...");
		// создаем новый объект чтения XML для получения структуры сообщений журнала
		ПотокXML = ОткрытьЖурналРегистрации(ИмяФайлаЖурнала);
		
		// признак наличия количества
		ЕстьКоличество = Структура.Свойство("Количество");
		
		КоличествоСобытий = 0;
		СоответствиеСобытий = Новый Соответствие;
		Пока ПрочитатьСобытиеЖурнала(ПотокXML, Структура) Цикл
			
			КоличествоСобытий = КоличествоСобытий + 1;
			// производим фильтрацию событий на этапе чтения
			Если СобытиеУдовлетворяетОтбору(Отбор, Структура) Тогда
				
				Если НЕ Группировать Тогда 
					
					// добавляем строку в таблицу
					Событие = Таблица.Добавить();
					// заполняем строки
					ЗаполнитьЗначенияСвойств(Событие, Структура);
					
				Иначе
					
					// осуществляем группировку
					Ключ = ПолучитьКлючСобытия(Группировка, Структура);
					Значение = СоответствиеСобытий.Получить(Ключ);
					Если Значение <> Неопределено Тогда
						
						Если ЕстьКоличество Тогда
							
							Значение.Количество = Значение.Количество + 1;
							
						КонецЕсли;
						
					Иначе
					
						// добавляем строку в таблицу
						Событие = Таблица.Добавить();
						// заполняем строки
						ЗаполнитьЗначенияСвойств(Событие, Структура);
						
						// устанавливаем значение для ключа в группировке
						Если Значение = Неопределено Тогда
							
							СоответствиеСобытий.Вставить(Ключ, Событие);
							
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// сообщаем о прочтении очередного события примерно каждые 1000 событий
			Если КоличествоСобытий % 1000 = 0 Тогда
				
				Состояние("Прочитано/отобрано: " + КоличествоСобытий + " / " + Таблица.Количество() + " событий журнала регистрации");
				ОбработкаПрерыванияПользователя();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		// попытка открытия журнала регистрации не удалась
		Ошибка = "Ошибка чтения журанала регистрации: " + ИмяФайлаЖурнала + Символы.ПС;
		Ошибка = Ошибка + ОписаниеОшибки();
		ВызватьИсключение Ошибка;
		
	КонецПопытки;
	
КонецПроцедуры	// Процедура ПрочитатьЖурналВТаблицуЗначений

// Выполняет предварительное чтение для получения уникальных значений различных полей
Процедура ПолучитьХарактеристикиЖурнала()
	
	// создаем структуру события открытой выгрузки
	ШаблонСобытий = СоздатьШаблонСобытий();
	
КонецПроцедуры	// Процедура ПолучитьХарактеристикиЖурнала

// Выполняет настройку источника данных построителя отчета
Процедура НастроитьИсточникДанных(ИсточникДанных)
	
	Для каждого Колонка Из ИсточникДанных.Колонки Цикл
		
		Если Колонка.Имя = "Количество" Тогда
			
			Колонка.Порядок = Истина;
			Колонка.Итог = "Сумма(Количество)";
			
		Иначе
			
			Колонка.Отбор = Истина;
			Колонка.Измерение = Истина;
			Колонка.Порядок = Истина;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Выполняет настройку построителя отчетов
Процедура НастроитьПостроительОтчетов()
	
	// настраиваем источник данных для построителя
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьШаблонСобытий());
	НастроитьИсточникДанных(ИсточникДанных);
	
	ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	
	// очищаем измерения
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	// по-умолчанию в выбранные поля попадает только количество
	ПостроительОтчета.ВыбранныеПоля.Очистить();
	ПостроительОтчета.ВыбранныеПоля.Добавить("Количество");
	
КонецПроцедуры	// Процедура НастроитьПостроительОтчетов

// Функция открыти объекта чтения XML для журанала регистрации
Функция ОткрытьЖурналРегистрации(ИмяФайла)
	
	// Создаем объект чтения XML
	ПотокXML = Новый ЧтениеXML;
	ПотокXML.ОткрытьФайл(ИмяФайла);
	ЧтениеЗаголовкаЖурнала(ПотокXML);
	
	Возврат ПотокXML;
	
КонецФункции	// Функция ОткрытьЖурналРегистрации

// Чтение XML до содержания
Функция ПропуститьДоСодержания(ПотокXML)
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.Ничего
		 И Не ПотокXML.Прочитать() Тогда
			
		Возврат Ложь;
		
	КонецЕсли;
	
	// читаем до первого элемента
	Пока ПотокXML.ТипУзла <> ТипУзлаXML.Ничего Цикл
		
		Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			 ИЛИ ПотокXML.ТипУзла = ТипУзлаXML.КонецЭлемента
			 ИЛИ ПотокXML.ТипУзла = ТипУзлаXML.Текст Тогда
			 
			 Возврат Истина;
			 
		КонецЕсли;
			 
		ПотокXML.Прочитать();
		
	КонецЦикла;
	 
	Возврат Ложь;
	
КонецФункции	// Функция ПропуститьДоСодержания

// Процедура выполняет попытку чтения корневого узла журнала регистрации
Процедура ЧтениеЗаголовкаЖурнала(ПотокXML)
	
	ПропуститьДоСодержания(ПотокXML);
	// Читаем корневой элемент выгрузки журнала
	Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		 ИЛИ ПотокXML.ЛокальноеИмя <> ЭлементЖурналРегистрации 
		 ИЛИ ПотокXML.URIПространстваИмен <> ПространствоИменЖурнала Тогда
		
		ВызватьИсключение "Неверный формат выгрузки журнала регистрации";
		
	КонецЕсли;
	
	ПотокXML.Прочитать();
	// Дочитываем до начала элемента события
	Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		 ИЛИ ПотокXML.ЛокальноеИмя <> ЭлементСобытие 
		 ИЛИ ПотокXML.URIПространстваИмен <> ПространствоИменЖурнала Тогда
		
		ВызватьИсключение "Неверный формат выгрузки журнала регистрации";
		
	КонецЕсли;
	
КонецПроцедуры	// Процедура ЧтениеЗаголовкаЖурнала

// Создает таблицу значений с структурой, соответствующей структуре события
Процедура ПропуститьЭлемент(ПотокXML)
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ЛокальноеИмя = ПотокXML.ЛокальноеИмя;
		URIПространстваИмен = ПотокXML.URIПространстваИмен;
		Пока ПотокXML.Прочитать()
			 И (ПотокXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
			 	ИЛИ ПотокXML.ЛокальноеИмя <> ЛокальноеИмя
			 	ИЛИ ПотокXML.URIПространстваИмен <> URIПространстваИмен) Цикл
			 
		КонецЦикла;
		ПотокXML.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры	// Процедура ПропуститьЭлемент

// Создает таблицу значений с структурой, соответствующей структуре события
Функция СоздатьШаблонСобытий()
	
	// создаем новый объект чтения XML для получения структуры сообщений журнала
	ПотокXML = ОткрытьЖурналРегистрации(ИмяФайлаЖурнала);
	
	ТЗ = Новый ТаблицаЗначений;
	
	ПотокXML.Прочитать();
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементУровень
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьУровень = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("Уровень", Типы, "Уровень");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементДата
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьДатаВремя = Истина;
		Типы = Новый ОписаниеТипов("Дата");
		ТЗ.Колонки.Добавить("ДатаСобытия", Типы, "Дата");
		ПропуститьЭлемент(ПотокXML);
		
		// добавляем вспомогательные колонки для обработки дат
		ТЗ.Колонки.Добавить("ДатаЧас", Типы);
		ТЗ.Колонки.Добавить("ДатаДень", Типы);
		ТЗ.Колонки.Добавить("ДатаМесяц", Типы);
		ТЗ.Колонки.Добавить("ДатаКвартал", Типы);
		ТЗ.Колонки.Добавить("ДатаГод", Типы);
		
		Типы = Новый ОписаниеТипов("Число");
		ТЗ.Колонки.Добавить("ВремяДня", Типы);
		
		Квалификаторы = Новый КвалификаторыСтроки(20);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ДеньНедели", Типы);
			 
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементИмяПриложения
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьИмяПриложения = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ИмяПриложения", Типы, "Имя приложения");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеПриложения
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьПредставлениеПриложения = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ПредставлениеПриложения", Типы, "Представление приложения");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементИмяСобытия
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьИмяСобытия = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ИмяСобытия", Типы, "Событие");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеСобытия
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьПредставлениеСобытия = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ПредставлениеСобытия", Типы, "Представление события");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементИдентификаторПользователя
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьИдентификаторПользователя = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(36);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ИдентификаторПользователя", Типы, "Идентификатор пользователя");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементИмяПользователя
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьИмяПользователя = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ИмяПользователя", Типы, "Пользователь");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементКомпьютер
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьКомпьютер = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(256);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("Компьютер", Типы, "Компьютер");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементИмяОбъектаМетаданных
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьИмяОбъектаМетаданных = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(1024);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ИмяОбъектаМетаданных", Типы, "Объект метаданных");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеОбъектаМетаданных
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьПредставлениеОбъектаМетаданных = Истина;
		Квалификаторы = Новый КвалификаторыСтроки(1024);
		Типы = Новый ОписаниеТипов("Строка", , Квалификаторы);
		ТЗ.Колонки.Добавить("ПредставлениеОбъектаМетаданных", Типы, "Представление объекта метаданных");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементКомментарий
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьКомментарий = Истина;
		Типы = Новый ОписаниеТипов("Строка");
		ТЗ.Колонки.Добавить("Комментарий", Типы);
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементДанные
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьДанные = Истина;
		ТЗ.Колонки.Добавить("Данные");
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;

	Если ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеДанных
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		 
		ЕстьПредставлениеДанных = Истина;
		Типы = Новый ОписаниеТипов("Строка");
		ТЗ.Колонки.Добавить("ПредставлениеДанных", Типы);
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;
	
	// добавляем колонку количество для подсчета итогов
	Типы = Новый ОписаниеТипов("Число");
	ТЗ.Колонки.Добавить("Количество", Типы, "Количество");
	
	Возврат ТЗ;

КонецФункции	// Функция СоздатьШаблонСобытий

// Фцнкция производит анализ события на предмет удовлетворения отбору
Функция СобытиеУдовлетворяетОтбору(Отбор, Событие)
	
	Для каждого ЭлементОтбора из Отбор Цикл
		
		// анализируем только используемые элементы отбора
		Если НЕ ЭлементОтбора.Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Значение = Неопределено;
		Если Событие.Свойство(ЭлементОтбора.ПутьКДанным, Значение) Тогда
			
			ЗначениеОтбора = ЭлементОтбора.Значение;
			ЗначениеОтбораС = ЭлементОтбора.ЗначениеС;
			ЗначениеОтбораПО = ЭлементОтбора.ЗначениеПО;
			// строки нужно анализировать без учета регистра
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Значение = Нрег(Значение);
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
					
					ЗначениеОтбора = Нрег(ЗначениеОтбора);
					
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеОтбораС) = Тип("Строка") Тогда
					
					ЗначениеОтбораС = Нрег(ЗначениеОтбораС);
					
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеОтбораПО) = Тип("Строка") Тогда
					
					ЗначениеОтбораПО = Нрег(ЗначениеОтбораПО);
					
				КонецЕсли;
				
			КонецЕсли;
				
			// анализируем значение свойства в соответствии с видом сравнения
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.Больше Тогда
				
				Если Значение <= ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
				
				Если Значение < ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
				
				ВСписке = Ложь;
				Для каждого ЭлементСписка из ЗначениеОтбора Цикл
					
					Если Значение = Нрег(ЭлементСписка.Значение) Тогда
						
						ВСписке = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ВСписке Тогда
					
					Возврат Ложь
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Интервал Тогда

				Если Значение <= ЗначениеОтбораС ИЛИ Значение >= ЗначениеОтбораПО Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
				
				Если Значение < ЗначениеОтбораС ИЛИ Значение > ЗначениеОтбораПО Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
				
				Если Значение < ЗначениеОтбораС ИЛИ Значение >= ЗначениеОтбораПО Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
				
				Если Значение <= ЗначениеОтбораС ИЛИ Значение > ЗначениеОтбораПО Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Меньше Тогда
				
				Если Значение >= ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
		
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
				
				Если Значение > ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
				
				Для каждого ЭлементСписка из ЗначениеОтбора Цикл
					
					Если Значение = Нрег(ЭлементСписка.Значение) Тогда
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
				
				Если Значение = ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
				
				Если Найти(Значение, ЗначениеОтбора) > 0 Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				
				Если Значение <> ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
				
				Если Найти(Значение, ЗначениеОтбора) = 0 Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	// СобыиеУдовлетворяетОтбору(Событие)

// Процедура чтения элемента в структуру
Функция ПрочитатьЭлемент(ПотокXML, ИмяЭлемента, URIПространстваИмен, ТипПоля, Значение)
	
	Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента 
		 ИЛИ ПотокXML.URIПространстваИмен <> URIПространстваИмен Тогда
		
		ВызватьИсключение "Неверный формат выгрузки журнала регистрации." + Символы.ПС
						  + "Ожидается: " + Символы.ПС
						  + "	элемент: " + ИмяЭлемента + Символы.ПС
						  + "	пространства имен: " + URIПространстваИмен;
		
	КонецЕсли;
	
	Если ПотокXML.ЛокальноеИмя = ИмяЭлемента Тогда
	 
		// читаем значение
		Если ТипПоля <> Неопределено Тогда
			
			Значение = ПрочитатьXML(ПотокXML, ТипПоля);
			Возврат Истина;
			
		ИначеЕсли ВозможностьЧтенияXML(ПотокXML) Тогда
			
			Значение = ПрочитатьXML(ПотокXML);
			Возврат Истина;
			
		КонецЕсли;
		
		Значение = ПрочитатьXML(ПотокXML, Тип("Строка"));
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции	// Функция ПрочитатьЭлемент

// Процедура выполняет попытку чтения узла события журнала регистрации
Функция ПрочитатьСобытиеЖурнала(ПотокXML, Структура)
	
	// если дочитали до конца журанала - возвращаем неопределено
	Если ПотокXML.ТипУзла = ТипУзлаXML.КонецЭлемента
		 И ПотокXML.ЛокальноеИмя = ЭлементЖурналРегистрации
		 И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Дочитываем до начала элемента события
	Если ПотокXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		 ИЛИ ПотокXML.ЛокальноеИмя <> ЭлементСобытие 
		 ИЛИ ПотокXML.URIПространстваИмен <> ПространствоИменЖурнала Тогда
		
		ВызватьИсключение "Неверный формат выгрузки журнала регистрации";
		
	КонецЕсли;
	
	ПотокXML.Прочитать();
	
	Значение = Неопределено;
	// Уровень
	Если Структура.Свойство("Уровень") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементУровень, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.Уровень = Значение;
			
		КонецЕсли;
		
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементУровень
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
		
	// ДатаСобытия
	Если ПрочитатьЭлемент(ПотокXML, ЭлементДата, ПространствоИменЖурнала, Тип("Дата"), Значение) Тогда
		
		Если Структура.Свойство("ДатаСобытия") Тогда
		
			Структура.ДатаСобытия = Значение;
			
		КонецЕсли;
		
		Если Структура.Свойство("ДатаЧас") Тогда
		
			Структура.ДатаЧас = НачалоЧаса(Значение);
			
		КонецЕсли;
	
		Если Структура.Свойство("ДатаДень") Тогда
		
			Структура.ДатаДень = НачалоДня(Значение);
			
		КонецЕсли;
	
		Если Структура.Свойство("ДатаМесяц") Тогда
		
			Структура.ДатаМесяц = НачалоМесяца(Значение);
			
		КонецЕсли;
	
		Если Структура.Свойство("ДатаКвартал") Тогда
		
			Структура.ДатаКвартал = НачалоКвартала(Значение);
			
		КонецЕсли;
		
		Если Структура.Свойство("ДатаГод") Тогда
		
			Структура.ДатаГод = НачалоГода(Значение);
			
		КонецЕсли;
		
		Если Структура.Свойство("ВремяДня") Тогда
		
			Структура.ВремяДня = Час(Значение);
			
		КонецЕсли;
		
		Если Структура.Свойство("ДеньНедели") Тогда
			
			День = ДеньНедели(Значение);
			Если День = 1 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Понедельник'");
				
			ИначеЕсли День = 2 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Вторник'");
				
			ИначеЕсли День = 3 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Среда'");
				
			ИначеЕсли День = 4 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Четверг'");
				
			ИначеЕсли День = 5 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Пятница'");
				
			ИначеЕсли День = 6 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Суббота'");
				
			ИначеЕсли День = 7 Тогда
				
				Структура.ДеньНедели = НСтр("ru='Воскресенье'");
				
            КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	
	// ИмяПриложения
	Если Структура.Свойство("ИмяПриложения") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементИмяПриложения, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ИмяПриложения = Значение;
			
		КонецЕсли;
		
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементИмяПриложения
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ПредставлениеПриложения
	Если Структура.Свойство("ПредставлениеПриложения") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементПредставлениеПриложения, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ПредставлениеПриложения = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеПриложения
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ИмяСобытия
	Если Структура.Свойство("ИмяСобытия") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементИмяСобытия, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ИмяСобытия = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементИмяСобытия
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ПредставлениеСобытия
	Если Структура.Свойство("ПредставлениеСобытия") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементПредставлениеСобытия, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ПредставлениеСобытия = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеСобытия
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
		
	// ИдентификаторПользователя
	Если Структура.Свойство("ИдентификаторПользователя") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементИдентификаторПользователя, ПространствоИменЖурнала, Тип("УникальныйИдентификатор"), Значение) Тогда
			
			Структура.ИдентификаторПользователя = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементИдентификаторПользователя
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ИмяПользователя
	Если Структура.Свойство("ИмяПользователя") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементИмяПользователя, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ИмяПользователя = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементИмяПользователя
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// Компьютер
	Если Структура.Свойство("Компьютер") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементКомпьютер, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.Компьютер = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементКомпьютер
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ИмяОбъектаМетаданных
	Если Структура.Свойство("ИмяОбъектаМетаданных") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементИмяОбъектаМетаданных, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ИмяОбъектаМетаданных = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементИмяОбъектаМетаданных
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ПредставлениеОбъектаМетаданных
	Если Структура.Свойство("ПредставлениеОбъектаМетаданных") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементПредставлениеОбъектаМетаданных, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ПредставлениеОбъектаМетаданных =  Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеОбъектаМетаданных
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// Комментарий
	Если Структура.Свойство("Комментарий") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементКомментарий, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.Комментарий = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементКомментарий
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// Данные
	Если Структура.Свойство("Данные") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементДанные, ПространствоИменЖурнала, Неопределено, Значение) Тогда
			
			Структура.Данные = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементДанные
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// ПредставлениеДанных
	Если Структура.Свойство("ПредставлениеДанных") Тогда
		
		Если ПрочитатьЭлемент(ПотокXML, ЭлементПредставлениеДанных, ПространствоИменЖурнала, Тип("Строка"), Значение) Тогда
			
			Структура.ПредставлениеДанных = Значение;
			
		КонецЕсли;
			
	ИначеЕсли ПотокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			  И ПотокXML.ЛокальноеИмя = ЭлементПредставлениеДанных
		 	  И ПотокXML.URIПространстваИмен = ПространствоИменЖурнала Тогда
			  
		// пропускаем элемент
		ПропуститьЭлемент(ПотокXML);
		
	КонецЕсли;		
	
	// Количество
	Если Структура.Свойство("Количество") Тогда
		
		Структура.Количество = 1;
		
	КонецЕсли;
	
	Если ПотокXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		 ИЛИ ПотокXML.URIПространстваИмен <> ПространствоИменЖурнала
		 ИЛИ ПотокXML.ЛокальноеИмя <> ЭлементСобытие Тогда
		 
		ВызватьИсключение "Неверный формат";
		
	КонецЕсли;
	ПотокXML.Прочитать();
	
	Возврат Истина;
	
КонецФункции	// Функция ПрочитатьСобытиеЖурнала

///////////////////////////////////////////////////////////////////////////////
// Инициализаци переменных, содержащих имена элементов XML для документа выгрузки журнала регистрации

ПространствоИменЖурнала = "http://v8.1c.ru/eventLog";
ЭлементЖурналРегистрации = "EventLog";
ЭлементСобытие = "Event";
ЭлементУровень = "Level";
ЭлементДата = "Date";
ЭлементИмяПриложения = "ApplicationName";
ЭлементПредставлениеПриложения = "ApplicationPresentation";
ЭлементИмяСобытия = "EventName";
ЭлементПредставлениеСобытия = "EventPresentation";
ЭлементИдентификаторПользователя = "UserID";
ЭлементИмяПользователя = "UserName";
ЭлементКомпьютер = "Computer";
ЭлементИмяОбъектаМетаданных = "MetadataName";
ЭлементПредставлениеОбъектаМетаданных = "MetadataPresentation";
ЭлементКомментарий = "Comment";
ЭлементДанные = "Data";
ЭлементПредставлениеДанных = "DataPresentation";

///////////////////////////////////////////////////////////////////////////////

ЕстьУровень = Ложь;
ЕстьДатаВремя = Ложь;
ЕстьИмяПриложения = Ложь;
ЕстьПредставлениеПриложения = Ложь;
ЕстьИмяСобытия = Ложь;
ЕстьПредставлениеСобытия = Ложь;
ЕстьИдентификаторПользователя = Ложь;
ЕстьИмяПользователя = Ложь;
ЕстьКомпьютер = Ложь;
ЕстьИмяОбъектаМетаданных = Ложь;
ЕстьПредставлениеОбъектаМетаданных = Ложь;
ЕстьКомментарий = Ложь;
ЕстьДанные = Ложь;
ЕстьПредставлениеДанных = Ложь;
