////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мФормаНастройкиПоказателей; // Форма настройки показателей

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает обработчик публикации рапорта
//
Процедура УстановитьОбработчикПубликации()
	
	//СписокВремениПубликации = ПолучитьИзКонстанты();
	//
	//Если СписокВремениПубликации.Количество() = 0 Тогда
	//	ОтключитьОбработчикОжидания("ОпубликоватьРапорт");
	//Иначе

	//	Таймер = 0;
	//	
	//	ТекВремя = ТекущаяДата();
	//	ТекВремя = Час(ТекВремя) * 3600 + Минута(ТекВремя) * 60 + Секунда(ТекВремя);
	//	
	//	Для Каждого Время Из СписокВремениПубликации Цикл
	//		Таймер = (Час(Время.Значение) * 3600 + Минута(Время.Значение) * 60 + Секунда(Время.Значение)) - ТекВремя;
	//		Если Таймер > 0 Тогда
	//		   	Таймер = Час(Время.Значение) * 3600 + Минута(Время.Значение) * 60 + Секунда(Время.Значение) - ТекВремя;
	//			   
	//			ОтключитьОбработчикОжидания("ОпубликоватьРапорт");
	//			ПодключитьОбработчикОжидания("ОпубликоватьРапорт", Таймер);
	//			
	//		  	Возврат;
	//			  
	//		КонецЕсли;
	//	КонецЦикла;

	//	ОтключитьОбработчикОжидания("ОпубликоватьРапорт");
	//	
	//КонецЕсли;
	
КонецПроцедуры // УстановитьОбработчикПубликации()

// Процедура публикования рапорта
//
Процедура ОпубликоватьРапорт()

	//Если Не (ФормироватьВПочту Или ФормироватьВФайл) Тогда
	//	Возврат;
	//КонецЕсли;

	//ОбновитьОтчет();
	//
	//Если ВидОтчета = "Таблица" Тогда
	//	ИмяФайла = СоздатьИмяФайла("mxl");
	//	ЭлементыФормы.ТабДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	//Иначе
	//	ИмяФайла = СоздатьИмяФайла("htm");
	//	ТекстДок = Новый ТекстовыйДокумент();
	//	ТекстДок.УстановитьТекст(ЭлементыФормы.HTMLДокумент.ПолучитьТекст());
	//	ТекстДок.Записать(ИмяФайла, КодировкаТекста.ANSI);
	//КонецЕсли;

	//Если ФормироватьВПочту Тогда
	//
	//	Если АдресаЭлПочты.Количество() = 0 Тогда
	//		Сообщить("Не указан список адресатов электронной почты для рассылки!", СтатусСообщения.Внимание);
	//	Иначе
	//		
	//		Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
	//		
	//			Письмо = Новый ПочтовоеСообщение();

	//			Для Каждого Адрес Из АдресаЭлПочты Цикл
	//				Письмо.Получатели.Добавить(Адрес.Адрес);
	//			КонецЦикла;
	//			
	//			Письмо.Тема = "Рапорт руководителю";
	//			Письмо.Текст = "Рапорт руководителю
	//				|
	//				|Рассылка от " + ТекущаяДата();
	//				
	//			Вложение = Письмо.Вложения.Добавить(ИмяФайла);
	//			Вложение.Наименование = "Рапорт руководителю от " + Формат( ТекущаяДата(), "ДФ=дд.МММ.гггг") + ?(ВидОтчета = "Таблица", ".mxl", ".htm");

	//			Почта = Новый Почта;
	//			Почта.Подключиться();
	//			Почта.Послать(Письмо);
	//			Почта.Отключиться();
	//			
	//			Сообщить("Рапорт руководителю от " + Формат( ТекущаяДата(), "ДФ=дд.МММ.гггг") + ?(ВидОтчета = "Таблица", ".mxl", ".htm") + " отправлен по электронной почте.");
	//			
	//		Иначе
	//			
	//			МассивЭлектронныхПисем = Новый Массив;
	//			
	//			Если ПустаяСтрока(АдресЭлектроннойПочтыУчетнойЗаписи) Тогда
	//				Сообщить("Публикация по почте не совершена, не указана учетная запись для отправления.");
	//				УстановитьОбработчикПубликации();
	//				Возврат;
	//			КонецЕсли;
	//			
	//			УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоРеквизиту("АдресЭлектроннойПочты", АдресЭлектроннойПочтыУчетнойЗаписи);
	//			Если ЗначениеНеЗаполнено(УчетнаяЗапись) Тогда
	//				Сообщить("Публикация по почте не совершена, не найдена учетная запись с адресом """ + АдресЭлектроннойПочтыУчетнойЗаписи + """.");
	//				УстановитьОбработчикПубликации();
	//				Возврат;
	//			КонецЕсли;
	//			
	//			ДоступныеУчетныеЗаписи = ПолучитьДоступныеУчетныеЗаписи(глТекущийПользователь).Отправка;
	//			Если ДоступныеУчетныеЗаписи.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
	//				Сообщить("Публикация по почте не совершена, нет доступа для отправки писем с учетной записи с адресом """ + АдресЭлектроннойПочтыУчетнойЗаписи + """.");
	//				УстановитьОбработчикПубликации();
	//				Возврат;
	//			КонецЕсли; 
	//			
	//			СтруктураПараметров = Новый Структура();
	//			СтруктураПараметров.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	//			СтруктураПараметров.Вставить("Тема", "Рапорт руководителю, рассылка от " + ТекущаяДата());
	//			Если ВидОтчета = "Таблица" Тогда
	//				СтруктураПараметров.Вставить("Тело", "Рапорт руководителю" + Символы.ПС + "Рассылка от " + ТекущаяДата());
	//			Иначе
	//				СтруктураПараметров.Вставить("ВидТекста", Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
	//				СтруктураПараметров.Вставить("Тело", ЭлементыФормы.HTMLДокумент.ПолучитьТекст());
	//			КонецЕсли;
	//			
	//			СписокКому = Новый СписокЗначений;
	//			Для каждого СтрокаТаблицы Из АдресаЭлПочты Цикл
	//				Если ПустаяСтрока(СтрокаТаблицы.Адрес) Тогда
	//					Продолжить;
	//				КонецЕсли; 
	//				СписокКому.Добавить(СтрокаТаблицы.Адрес, СокрЛП(СтрокаТаблицы.Адресат));
	//			КонецЦикла;
	//			СтруктураПараметров.Вставить("Кому", СписокКому);
	//			
	//			СписокФайловВложений = Новый СписокЗначений;
	//			СтруктураВложения = Новый Структура("ВидДанных, ИмяФайла, Наименование, Хранилище", Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл,
	//												("Рапорт руководителю от " + Формат( ТекущаяДата(), "ДФ=дд.МММ.гггг") + ?(ВидОтчета = "Таблица", ".mxl", ".htm")),
	//												("Рапорт руководителю от " + Формат( ТекущаяДата(), "ДФ=дд.МММ.гггг")),
	//												ИмяФайла);
	//			СписокФайловВложений.Добавить(СтруктураВложения);
	//			СтруктураПараметров.Вставить("СписокФайловВложений", СписокФайловВложений);
	//			
	//			НачатьТранзакцию();
	//			
	//			СтруктураПисьма = НаписатьПисьмо(глТекущийПользователь, СтруктураПараметров,,,,,, Истина, Ложь);
	//			
	//			Если ТипЗнч(СтруктураПисьма) <> Тип("Структура") Тогда
	//				Сообщить("Публикация по почте не совершена.");
	//				Если ТипЗнч(СтруктураПисьма) = Тип("Строка") Тогда
	//					Сообщить(СтруктураПисьма);
	//				КонецЕсли; 
	//				ОтменитьТранзакцию();
	//			Иначе
	//				ЗафиксироватьТранзакцию();
	//				МассивЭлектронныхПисем.Добавить(СтруктураПисьма.ПисьмоСсылка);
	//				ОтправитьПисьма(МассивЭлектронныхПисем, глСоответствиеТекстовЭлектронныхПисем, глТекущийПользователь);
	//			КонецЕсли; 
	//			
	//		КонецЕсли; 
	//		
	//	КонецЕсли;
	//	
	//	Если Не ФормироватьВФайл Тогда
	//		УдалитьФайлы(ИмяФайла);
	//	КонецЕсли;

	//КонецЕсли;

	//УстановитьОбработчикПубликации();
	
КонецПроцедуры // ОпубликоватьРапорт()

// Процедура формирования отчета
//
Процедура ОбновитьОтчет() Экспорт
	Если мСтруктураСохраненныеНастройки.Свойство("СписокТГ") И ТипЗнч(мСтруктураСохраненныеНастройки.СписокТГ)=Тип("СписокЗначений")
		И мСтруктураСохраненныеНастройки.СписокТГ.Количество()>0 Тогда
		Состояние("Идет формирование рапорта...");
	Иначе	
		Предупреждение("Должна быть выбрана хотя бы одна номенклатурная группа");
		Возврат;
	КонецЕсли;	
	
	
	мМакет = ПолучитьМакет("МакетРапорта");
	
    Если ВидОтчета = "Таблица" Тогда
		Секция = мМакет.ПолучитьОбласть("ОбщЗаголовок");
		
		мТабДокумент = ЭлементыФормы.ТабДокумент;
		
		Если мТабДокумент.Области.Количество() > 0 Тогда
			мТабДокумент.ТекущаяОбласть = мТабДокумент.Область("R1C1");
		КонецЕсли;
		
		мТабДокумент.Очистить();
		мТабДокумент.Вывести(Секция);
		мТабДокумент.ТолькоПросмотр = Истина;

		ЭлементыФормы.ТабДокумент .Видимость = Истина;
		ЭлементыФормы.HTMLДокумент.Видимость = Ложь;
		
	Иначе // HTML
		
		мHTMLДокумент = ЭлементыФормы.HTMLДокумент;
		
		ЭлементыФормы.ТабДокумент .Видимость = Ложь;
		ЭлементыФормы.HTMLДокумент.Видимость = Истина;
		
	КонецЕсли;

	СформироватьОтчет("Формирование");
	мМакет = Неопределено;

КонецПроцедуры // ОбновитьОтчет()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события при открытии формы
//
Процедура ПриОткрытии()

	ЗаполнитьНачальныеНастройки();
	
	СформироватьОтчет("Инициализация");

	Если Не НачальноеЗначениеВыбора = Неопределено И НачальноеЗначениеВыбора Тогда
		ОбновитьОтчет();
	КонецЕсли;
	
	Если ИспользоватьАвтообновление И ИнтервалАвтообновления > 0 Тогда
		ПодключитьОбработчикОжидания("ОбновитьОтчет", ИнтервалАвтообновления * 60);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьОтчет");
	КонецЕсли;

	// АвтоПубликация рапорта
	УстановитьОбработчикПубликации();

	Флаг = ФормироватьВПочту Или ФормироватьВФайл;
	//ЭлементыФормы.КоманднаяПанель.Кнопки["Опубликовать"].Доступность = Флаг;
	//ЭлементыФормы.КоманднаяПанель.Кнопки["Действия"].Кнопки["Опубликовать"].Доступность = Флаг;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник = мФормаНастройкиПоказателей Тогда
		
		Флаг = ФормироватьВПочту Или ФормироватьВФайл;
		//ЭлементыФормы.КоманднаяПанель.Кнопки["Опубликовать"].Доступность = Флаг;
		//ЭлементыФормы.КоманднаяПанель.Кнопки["Действия"].Кнопки["Опубликовать"].Доступность = Флаг;
		
		ОбновитьОтчет();
		
		//Если ИспользоватьАвтообновление И ИнтервалАвтообновления > 0 Тогда
		//	ПодключитьОбработчикОжидания("ОбновитьОтчет", ИнтервалАвтообновления * 60);
		//Иначе
		//	ОтключитьОбработчикОжидания("ОбновитьОтчет");
		//КонецЕсли;

		УстановитьОбработчикПубликации();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события нажатия кнопки настройка командной панели
//
Процедура КоманднаяПанельНастройка(Кнопка)
    Перем Форма;
	Перем Ответ;

	Форма = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая настройка показателей не завершена.
					   |Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	// Передача параметров в форму
	Форма.РежимВыбора = Истина;
	мФормаНастройкиПоказателей = Форма;
	Форма.ОткрытьМодально();
	
КонецПроцедуры // КоманднаяПанельНастройка()

// Процедура - обработчик события нажатия кнопки обновить командной панели
//
Процедура КоманднаяПанельОбновить(Кнопка)
	
	ОбновитьОтчет();
	
КонецПроцедуры // КоманднаяПанельОбновить()

// Процедура - обработчик события обработка расшифровки
//
Процедура ТабДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем Параметры;

	СтандартнаяОбработка = Ложь;

	Если Не ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаСтроки=Элемент.Область(Элемент.ТекущаяОбласть.Верх, 1).Расшифровка;
	
	Если ТипЗнч(РасшифровкаСтроки) = Тип("Структура") Тогда
		
		Для каждого ЭлементРасшифровки Из РасшифровкаСтроки Цикл
			
			Расшифровка.Вставить(ЭлементРасшифровки.Ключ, ЭлементРасшифровки.Значение);
			
		КонецЦикла;;
		
	КонецЕсли;
	
	// Для отчетов с переменным количеством колонок (в заголовке колонки содержится информация)
	Если Расшифровка.Свойство("НомерСтроки") Тогда
		
		РасшифровкаКолонки = Элемент.Область(Элемент.ТекущаяОбласть.Верх-Расшифровка.НомерСтроки+1, Элемент.ТекущаяОбласть.Лево).Расшифровка;
		
		Если ТипЗнч(РасшифровкаКолонки) = Тип("Структура") Тогда
			
			Для каждого ЭлементРасшифровки Из РасшифровкаКолонки Цикл
				Расшифровка.Вставить(ЭлементРасшифровки.Ключ, ЭлементРасшифровки.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
			
	СтандартнаяОбработка = Ложь;
	Параметры = Новый Структура;
	Параметры.Вставить("ЭтаФорма",    ЭтаФорма);
	Параметры.Вставить("Расшифровка", Расшифровка);

	СформироватьОтчет("Расшифровка", Параметры);
	
КонецПроцедуры // ТабДокументОбработкаРасшифровки()

// Процедура - обработчик события Нажатие кнопки "Опубликовать" командной панели
//
Процедура КоманднаяПанельПубликация(Кнопка)

	ОпубликоватьРапорт();

КонецПроцедуры // КоманднаяПанельПубликация

// Процедура - обработчик события ДокументСформирован html-поля
//
Процедура HTMLДокументДокументСформирован(Элемент)
	
	Элемент.Документ.body.innerHTML = мТекстHTML;
	
КонецПроцедуры // HTMLДокументДокументСформирован

