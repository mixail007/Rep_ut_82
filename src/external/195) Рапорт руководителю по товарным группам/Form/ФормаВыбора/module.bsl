// Процедура пересчитать значение пометок (установить третье состояние
// при изменении количества показателей)
//
Процедура ОбходДереваДляПересчетаЗначенийПометок(Дерево)
	
	Для Каждого Узел Из Дерево.Строки Цикл
		
		Если Узел.Строки.Количество() = 0 Тогда
			Продолжить; // В оконечных элементах ничего не изменяем
		Иначе
			ОбходДереваДляПересчетаЗначенийПометок(Узел);
			Узел.Пометка = ОпределитьЗначениеФлага(Узел);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбходДереваДляПересчетаЗначенийПометок()

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  Строки         - коллекция строк дерева значений
//
// Возвращаемое значение:
//  Число, значение флага
// 
Функция ОпределитьЗначениеФлага(Строки)

	НайденыИстина = Ложь;
	НайденыЛожь   = Ложь;

	Для каждого Строка из Строки.Строки Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если (НЕ НайденыИстина) И (Строка.Пометка) Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		Если (НЕ НайденыЛожь) И (НЕ Строка.Пометка) Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если      (НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 2;
	ИначеЕсли (НайденыИстина) И (НЕ НайденыЛожь) Тогда
		Возврат 1;
	ИначеЕсли (НЕ НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева
//
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева
//
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока                     - строка дерева значений
//  ИнтерактивнаяУстановкаПометок - флаг интерактивной установки пометки
// 
Процедура УстановитьПометкиВДереве(ТекСтрока)

	ОбходНижнихУровней (ТекСтрока);
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

// Процедура установки пометок в дереве
//
Процедура УстановитьПометки(Дерево, Пометка)
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Пометка = Пометка;
		УстановитьПометки(Строка, Пометка);
	КонецЦикла;
КонецПроцедуры // УстановитьПометки()

// Процедура - обработчик события ПриЗакрытии
//
Процедура ПриЗакрытии()
	Если Не РежимВыбора Тогда
		ОповеститьОВыборе(Истина);
	КонецЕсли;
КонецПроцедуры // ПриЗакрытии()

// Процедура снятия пометки со всех элементов
//
Процедура СнятьПометкиНажатие(Элемент)
	УстановитьПометки(Дерево, 0);
КонецПроцедуры // СнятьПометкиНажатие()

// Процедура установки пометки со всех элементов
//
Процедура УстановитьПометкиНажатие(Элемент)
	УстановитьПометки(Дерево, 1);
КонецПроцедуры // УстановитьПометкиНажатие()

// Процедура - обработчик события ПриИзмененииФлажка
//
Процедура ТабличноеПолеДеревоПоказателейПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометкиВДереве(Элемент.ТекущаяСтрока);
	
КонецПроцедуры // ТабличноеПолеДеревоПоказателейПриИзмененииФлажка()

// Процедура - обработчик события ПриОткрытии
//
Процедура ПриОткрытии()

	Дерево = ДеревоПоказателей.Скопировать();
	
	Если РежимВыбора Тогда
		ЭлементыФормы.ТабличноеПолеДеревоПоказателей.Колонки.ПредставлениеПоказателя.ДанныеФлажка = "";
		ЭлементыФормы.ТабличноеПолеДеревоПоказателей.Колонки.ПредставлениеПоказателя.ТолькоПросмотр = Истина;
		ЭлементыФормы.СнятьПометки.Видимость 	  = Ложь;
		ЭлементыФормы.УстановитьПометки.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ТабличноеПолеДеревоПоказателей.Колонки.ПредставлениеПоказателя.ДанныеФлажка = "Пометка";
		ЭлементыФормы.ТабличноеПолеДеревоПоказателей.Колонки.ПредставлениеПоказателя.ТолькоПросмотр = Ложь;
		ЭлементыФормы.СнятьПометки.Видимость 	  = Истина;
		ЭлементыФормы.УстановитьПометки.Видимость = Истина;
		// Пересчитать значение пометок (установить третье состояние при изменении количества показателей)
		ОбходДереваДляПересчетаЗначенийПометок(Дерево);
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

Процедура ВыборПоказателей(ВыбраннаяСтрока)
	
	Если ВыбраннаяСтрока.Строки.Количество() > 0 Тогда
		Ответ = Вопрос("Будут добавлены все показатели группы. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ДеревоПоказателей = Дерево.Скопировать();
	
	МассивСтрокВыбора = Новый Массив;
	Если ВыбраннаяСтрока.Строки.Количество() > 0 Тогда
		Для каждого Строка Из ВыбраннаяСтрока.Строки Цикл
			МассивСтрокВыбора.Добавить(Строка);
		КонецЦикла; 
	Иначе
		МассивСтрокВыбора.Добавить(ВыбраннаяСтрока);
	КонецЕсли; 
	
	ОповеститьОВыборе(МассивСтрокВыбора);
	
КонецПроцедуры

Процедура ТабличноеПолеДеревоПоказателейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если РежимВыбора Тогда
		ВыборПоказателей(ЭлементыФормы.ТабличноеПолеДеревоПоказателей.ТекущаяСтрока);
	Иначе
		ВыбраннаяСтрока.Пометка = Не Булево(ВыбраннаяСтрока.Пометка);
		УстановитьПометкиВДереве(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеДеревоПоказателейВыбор()

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если РежимВыбора Тогда
		Если Не ЭлементыФормы.ТабличноеПолеДеревоПоказателей.ТекущаяСтрока = Неопределено Тогда
			ВыборПоказателей(ЭлементыФормы.ТабличноеПолеДеревоПоказателей.ТекущаяСтрока);
		КонецЕсли;
	Иначе
		ДеревоПоказателей = Дерево.Скопировать();
		ОповеститьОВыборе(Истина);
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыОК()












