Перем мЖирныйШрифт, мКурсивШрифт, мЖирныйКурсивШрифт,
	флРазрешенСтопЛист;
	
функция УжеЕстьЗадача(Объект1, Тема1)
	
	рез = ЛОЖЬ;
	Запрос = Новый Запрос;  //любая задача! уже удаленная, выполненная....
	Запрос.Текст = "ВЫБРАТЬ первые 1
	|	ЗадачиПользователя.Ссылка
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Объект = &Объект1
	|	И ЗадачиПользователя.Наименование = &Тема1";
	Запрос.УстановитьПараметр("Объект1", Объект1);
	Запрос.УстановитьПараметр("Тема1", Тема1);
	Результат = Запрос.Выполнить();
	рез = НЕ результат.Пустой();
	возврат рез;

КонецФункции

процедура ПослатьЗадачу(ЗаказПокупателя , ИсполнительКод = "Смирнов А" ) //31.10.2018
	
	Тема =  "Надо РАЗРЕШИТЬ Стоп-лист по Заказу ИМ !";
	
	Если УжеЕстьЗадача(ЗаказПокупателя, Тема) тогда
		 #Если Клиент тогда
			 Сообщить("УЖЕ есть Задача-напоминание для пользователя: "+ ИсполнительКод, СтатусСообщения.Информация);
		 #КонецЕсли	 
		возврат;
	КонецЕсли;
	
	
	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
	Задача.Исполнитель = справочники.Пользователи.НайтиПоКоду(ИсполнительКод);
	Задача.Инициатор   = справочники.Пользователи.НайтиПоКоду(ИсполнительКод);
	Задача.Постановщик = ЗаказПокупателя.Ответственный;
	
	 задача.Товары.Очистить();
	 задача.НаСогласование = Ложь;
	 задача.Наименование = Тема; 
	 задача.Описание = "
	 |"+ Тема +"
	 |Для контрагента: "+строка(ЗаказПокупателя.Контрагент)+"
	 |по документу   : "+строка(ЗаказПокупателя)+"
	 |   ЕСТЬ ДИСКИ - стоп-листа, 
	 |но Заказ НЕ РАЗРЕШЕН к Отгрузке и Авто-Объединению!";	
	 
	 задача.Объект = ЗаказПокупателя;
	 задача.Дата 		    = ТекущаяДата();
	 задача.СрокИсполнения = НачалоДня( ТекущаяДата() ) + 16 * 3600; 	
	 задача.Оповещение     = истина;
	 задача.СрокОповещения = ТекущаяДата(); 
	 попытка
		 задача.Записать();
		 #Если Клиент тогда
			 Сообщить("Создана Задача-напоминание для пользователя: "+ ИсполнительКод, СтатусСообщения.Информация);
		 #КонецЕсли	 
	 исключение
		 #Если Клиент тогда
			 Сообщить("ОШИБКА при создании Задача-напоминание: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		 #КонецЕсли	 
	 КонецПопытки;
	 
КонецПроцедуры
		 
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
//+++( 25.10.2018 --- Задача № 57245 ----
	флРазрешенСтопЛист = ЛОЖЬ;
		i=0; N = ТабличноеПоле1.Количество();//29.11.2018  - Задача № 60049  от нуля начинаем! 
		пока i<N цикл
		//09.11.2018 проверяем ВСЕ ЗАКАЗЫ! 	
			стр1ЗаказПокупателя = ТабличноеПоле1[i].ЗаказПокупателя;
			Если НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя) тогда
				#Если Клиент тогда
					Сообщить("[ ]НЕ Разрешены диски Стоп-листа! Заказ "+строка(стр1ЗаказПокупателя.Номер)+ " нужно разрешить перед объединением!", СтатусСообщения.Внимание);	
				#КонецЕсли	
				ТабличноеПоле1.Удалить( i ); N=N-1; Продолжить;
			ИначеЕсли НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя, Истина) тогда //30.10.2018 [v]
				Если ТабличноеПоле1[i].Флаг тогда
	            	#Если Клиент тогда
					Сообщить("[v]Разрешены диски Стоп-листа в Заказе "+строка(стр1ЗаказПокупателя.Номер)+"! Общ. заказ - будет так же [v] разрешен!", СтатусСообщения.Информация);	
					#КонецЕсли	
				    флРазрешенСтопЛист = Истина;
				КонецЕсли;
			КонецЕсли;
			i=i+1;
		КонецЦикла;		
		//+++)
		
	//+++ С.Селин
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	
	//Миронычев
	Список = новый СписокЗначений;
	Для каждого стр1 из ТабличноеПоле1 цикл
		Если стр1.Флаг тогда  
			Список.Добавить( стр1.ЗаказПокупателя );
		КонецЕсли;	
	КонецЦикла;	
	
	Если Список.Количество()=0 тогда //29.11.2018
		Сообщить(" Нет выбранных заказов! Нечего объединять в один заказ!", СтатусСообщения.ОченьВажное);
		стоп = Истина;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	ЗаказПокупателя.ТипЗаказа
		|ИЗ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ ЗаказПокупателя.Ссылка В (&Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.ТипЗаказа";
		Запрос.УстановитьПараметр("Ссылка", Список);
		Результат = Запрос.Выполнить().Выгрузить();
		Отбор = Новый Структура();
		Отбор.Вставить("ТипЗаказа",10);
		стоп = ЛОЖЬ;
		Если Результат.Количество()>1 Тогда 
			Если Результат.НайтиСтроки(Отбор).Количество() > 0 Тогда 
				Сообщить(" Нельзя объединять Заказы Интернет-магазина (с типом 10) с другими типами в один общий заказ!", СтатусСообщения.ОченьВажное);
				стоп = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если стоп тогда
		Возврат;
	КонецЕсли;
	//КонецМиронычев
	
	Если Флажок1 тогда
		
		началоВр = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ОбъединитьЗаказыПокупателя(Контрагент1, Ложь, Подразделение, ,ОбъединятьРазныеЦены); 
		
		КонецВр = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяВыполнения = Окр( (КонецВр - началоВр)/1000, 0); //сек.
		
		парамЗапроса = "";
		Если ВремяВыполнения>0 тогда
			КолЗаказов = 0;
			Для каждого стр1 из ТабличноеПоле1 цикл
				если стр1.флаг тогда КолЗаказов = КолЗаказов +1; КонецЕсли;
			КонецЦикла;
			Время1 =ТекущаяУниверсальнаяДатаВМиллисекундах()/1000 - ВремяНачала;
			ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 352, ВремяВыполнения, "Объединение "+строка(КолЗаказов)+" заказов по точкам 1 клиенту: "+строка(Контрагент1)+" ("+формат(Время1,"ЧДЦ=3")+" Сек.)" ); //!!!!
		КонецЕсли;	
	КонецЕсли;
	
	//+++ С.Селин
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.ОбъединениеЗаказовОдногоКлиента, ВремяНачала);
	
КонецПроцедуры

//+++ 05.12.2017
функция получитьЗаказыВМаршрутах(СписЗак)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыМаршруты.ЗаказПокупателя,
	|	ЗаказыМаршруты.Маршрут.Код как НомерМаршрута
	|ИЗ
	|	РегистрСведений.ЗаказыМаршруты КАК ЗаказыМаршруты
	|ГДЕ
	|	ЗаказыМаршруты.ЗаказПокупателя В(&СписЗак)";
	
	Запрос.УстановитьПараметр("СписЗак", СписЗак);
	
	Результат = Запрос.Выполнить();
	табл = результат.Выгрузить();
	возврат табл;		
КонецФункции	

//процедуру надо перенести в общий модуль ИнтернетМагазин
//
Процедура ОбъединитьЗаказыПокупателя( Контрагент, ТолькоЧтениеЗаказов=ЛОЖЬ, Подразделение=неопределено, Предупреждение=истина, ОбъединятьРазныеЦены = истина) ЭКСПОРТ
	
	Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
	Транзит = ?( Подразделение=справочники.Подразделения.НайтиПоКоду("00005"), ЛОЖЬ, Истина);
	
	Если ЗначениеНеЗаполнено(Контрагент1) тогда
		Если Предупреждение Тогда 
			Предупреждение("Не заполнен Контрагент!");
		Иначе 
			Сообщить("Не заполнен Контрагент!");
		КонецЕсли;
		возврат;
	КонецЕсли;		
	//1.находим заказы по Контрагенту и Подразделению
	// из регистра ЗаказыПокупателей - на случай Корректировок, изменений в проведении и проверки
	Запрос = новый Запрос;
	Если  ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов тогда
		//запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ДатаОтгрузки) );
		запрос.УстановитьПараметр("ДатаОтгрузки0", ДатаОтгрузки0 );
		запрос.УстановитьПараметр("ДатаОтгрузки1", ДатаОтгрузки1 );
		
		запрос.УстановитьПараметр("Контрагент", Контрагент);
		запрос.УстановитьПараметр("Транзит", Транзит  );
		//по умолчанию - Яршинторг     
		//					|"+?(Флажок2, " И ЗаказПокупателя.ССайта", "")+"
		
		запрос.УстановитьПараметр("Подразделение",  Подразделение );
		
		Запрос.Текст = "выбрать различные рег.ЗаказПокупателя,
		| рег.КоличествоОстаток,
		| рег.СуммаУпрОстаток
		//24.07.2018 --- сразу нужные поля по Заказу
		|,  рег.ЗаказПокупателя.СпособОтгрузки как ЗаказПокупателяСпособОтгрузки
		|,  рег.ЗаказПокупателя.ДатаОтгрузки как ЗаказПокупателяДатаОтгрузки
		|,  рег.ЗаказПокупателя.Комментарий как ЗаказПокупателяКомментарий
		|,  рег.ЗаказПокупателя.НомерВходящегоДокумента как ЗаказПокупателяНомерВходящегоДокумента
		|,  рег.ЗаказПокупателя.СуммаДокумента как ЗаказПокупателяСуммаДокумента
		|,  рег.ЗаказПокупателя.ДоговорКонтрагента как ЗаказПокупателяДоговорКонтрагента
		|, ВЫРАЗИТЬ( рег.ЗаказПокупателя.АдресДоставки КАК СТРОКА(100) ) как АдресДоставки
		
		|, рег.ЗаказПокупателя.БонусПрименен как БонусПрименен
		
		|	ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(,
		|			ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки0
		|				И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1
		|				И ЗаказПокупателя.Контрагент = &Контрагент
		|				И ЗаказПокупателя.Проверен
		
		//+++ 01.12.2016	
		|	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
		|   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )
		
		|//ПодтвержденВКомментарии	
		|//ОтборПоМенедеру	
		|//СписокТочек  
		
		//22.09.2016
		|	И ЗаказПокупателя.ОтгрузкаСПодразделенияСклада = ЛОЖЬ
		|	И ЗаказПокупателя.Транзит "+?(Транзит,"
		|	И ЗаказПокупателя.Подразделение = &Подразделение", "=ЛОЖЬ")+"
	//+++ 30.03.2018 +++
		|//DPDМосква
	|
		|"+?(Флажок2, " И ЗаказПокупателя.ССайта", "")+"
		|                ) КАК рег
		
				|;
		|//////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЗаказыПокупателя.ЗаказПокупателяСуммаДокумента = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ 
		|			выбор когда 
		|				ВЫРАЗИТЬ( 100 * ЗаказыПокупателя.СуммаУпрОстаток / ЗаказыПокупателя.ЗаказПокупателяСуммаДокумента КАК ЧИСЛО(10, 0) ) < 100
		|			тогда ЛОЖЬ иначе Истина Конец
		|		КОНЕЦ
		|	КАК Флаг,
		|	ЗаказыПокупателя.ЗаказПокупателя КАК ЗаказПокупателя,
		//05.12.2017
		|	ЗаказыПокупателя.ЗаказПокупателяСпособОтгрузки как СпособОтгрузки,
		
		|	ЗаказыПокупателя.ЗаказПокупателяДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказыПокупателя.ЗаказПокупателяДоговорКонтрагента КАК Договор,
		|	ЗаказыПокупателя.ЗаказПокупателяДоговорКонтрагента.ОтветственноеЛицо.Наименование КАК Менеджер,
		|	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ЗаказыПокупателя.ЗаказПокупателяСуммаДокумента = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(100 * ЗаказыПокупателя.СуммаУпрОстаток / ЗаказыПокупателя.ЗаказПокупателяСуммаДокумента КАК ЧИСЛО(10, 0))
		|	КОНЕЦ КАК Процент,
		|	ЗаказыПокупателя.ЗаказПокупателяНомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|	ЗаказыПокупателя.ЗаказПокупателяКомментарий КАК Комментарий,
		|	ЕСТЬNULL(РезервНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОтгружается,
		//+++ 25.03.2016 ----------------------- объем --------------
		|  ТоварыОбъем.Объем как Объем,
		//24.07.2018 - поля сразу в ВТ_Заказы
		|	ЗаказыПокупателя.АдресДоставки КАК Точка
		|  ,	ЗаказыПокупателя.БонусПрименен
		
		|ИЗ ВТ_Заказы КАК ЗаказыПокупателя
		
		//+++ 25.03.2016 ----------------------- объем --------------
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(		выбрать Сумма(ЗакПок.Номенклатура.ЕдиницаХраненияОстатков.Объем * ЗакПок.КоличествоОстаток) как Объем, 
		|               ЗакПок.ЗаказПокупателя 
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя в (выбрать зак1.ЗаказПокупателя из ВТ_Заказы как зак1) ) как ЗакПок
		|Сгруппировать по ЗакПок.ЗаказПокупателя 
		| ) как ТоварыОбъем
		|ПО ТоварыОбъем.ЗаказПокупателя =  ЗаказыПокупателя.ЗаказПокупателя 
		//----------------------------------------------------------------------------
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РезервНаСкладах.Остатки(
		|				,
		|				ЗаказПокупателя.ДатаОтгрузки >= &ДатаОтгрузки0
		|					И ЗаказПокупателя.ДатаОтгрузки <= &ДатаОтгрузки1
		|					И ЗаказПокупателя.Контрагент = &Контрагент
		|					И ЗаказПокупателя.Проверен
		//+++ 01.12.2016	
		|	И ( ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.ПустаяСсылка)
		|   или ЗаказПокупателя.Статус=Значение(Перечисление.СтатусыЗаказов.Получен) )
		
		|//ПодтвержденВКомментарии	
		|//ОтборПоМенедеру	
		|//СписокТочек  
		//22.09.2016
		|	И ЗаказПокупателя.ОтгрузкаСПодразделенияСклада = ЛОЖЬ
		|	И ЗаказПокупателя.Транзит "+?(Транзит,"
		|	И ЗаказПокупателя.Подразделение = &Подразделение", "=ЛОЖЬ")+"
		|
		|"+?(Флажок2, " И ЗаказПокупателя.ССайта", "")+"
		|) КАК РезервНаСкладахОстатки
		|		ПО ЗаказыПокупателя.ЗаказПокупателя = РезервНаСкладахОстатки.ЗаказПокупателя
		
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Точка,
		|	ДатаОтгрузки
		|АВТОУПОРЯДОЧИВАНИЕ";			
		
		Если ПодтвержденВКомментарии тогда
			Запрос.Текст = стрЗаменить( Запрос.Текст,"//ПодтвержденВКомментарии", " И ЗаказПокупателя.Комментарий ПОДОБНО (""%Подтвержден%"")"
		//+++ 02.03.2018 - 13.03.2018 только для Ярославля!
			+?(DPDМосква=ЛОЖЬ и Транзит=ЛОЖЬ, " И НЕ ЗаказПокупателя.Комментарий ПОДОБНО (""%DPD Москва!%"") ","")
			); 
		КонецЕсли;
			
		
		//+++( 20.02.2018 по задаче #39696 - по тр.компании и Моск.обл - объединять отдельно
		Если DPDМосква и Транзит=ЛОЖЬ тогда
			//30.03.2018
			Запрос.Текст = стрЗаменить( Запрос.Текст,"//DPDМосква"," И ЗаказПокупателя.Комментарий ПОДОБНО (""%DPD Москва!%"") ");
		КонецЕсли;	
		//+++)
		
		ОтборПоМенеджеру = ЛОЖЬ;
		Если НЕ (РольДоступна("ПолныеПрава")
			
			//16.03.2017 - для бух. филиалов
			или (ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
			и РольДоступна("Кассир")  ) 
			
			) тогда 
			
			Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьМеханизмДележкиДляГруппы") 
				и ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда //Для руководителей филиалов + резервИМ
				
				
				ЗапросИМ = Новый Запрос;
				ЗапросИМ.Текст = 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДоговорыПоТоварнымГруппам.Договор
				|ИЗ
				|	РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
				|ГДЕ
				|	ДоговорыПоТоварнымГруппам.Подразделение = &Подразделение
				|	И ДоговорыПоТоварнымГруппам.Контрагент.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяССылка)";
				
				ЗапросИМ.УстановитьПараметр("ОтветственноеЛицо",  глТекущийПользователь);
				ЗапросИМ.УстановитьПараметр("Подразделение", Подразделение);
				
				РезультатИМ = ЗапросИМ.Выполнить().Выгрузить();
				
				СписокДоговоров = Новый СписокЗначений();
				СписокДоговоров.ЗагрузитьЗначения(РезультатИМ.ВыгрузитьКолонку("ссылка"));
				
				//+++ 20.02.2018
				Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеруDPD","И (ЗаказПокупателяDPD.ссылка.ДоговорКонтрагента В (&СписокДоговоров)
				|   ИЛИ ЗаказПокупателяDPD.ссылка.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)");
				
				Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеру", "И (ЗаказПокупателя.ДоговорКонтрагента В (&СписокДоговоров)
				|   ИЛИ ЗаказПокупателя.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)");
				Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
				Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
				ОтборПоМенеджеру = истина;
			иначе	
				//+++ 20.02.2018
				Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеруDPD", "И (ЗаказПокупателяDPD.ссылка.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
				|   ИЛИ ЗаказПокупателяDPD.ссылка.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)");
				
				//только свои заказы!
				Запрос.Текст = стрЗаменить( Запрос.Текст,"//ОтборПоМенедеру", "И (ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо
				|   ИЛИ ЗаказПокупателя.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)");
				Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
				ОтборПоМенеджеру = истина;
			конецЕсли;
		КонецЕсли;
		
		Если ЗаказыПоТочкам тогда
			Запрос.Текст = стрЗаменить( Запрос.Текст,"ВЫРАЗИТЬ( ЗаказыПокупателя.ЗаказПокупателя.АдресДоставки КАК СТРОКА(100) )",
			"ЗаказыПокупателя.ЗаказПокупателя.НомерТорговойТочкиКонтрагента");
		КонецЕсли;	
		
		
		//+++ 13.04.2015 - отбор по точкам
		Если СписокТочек.Количество()>0 и ПоТочкам тогда
			Запрос.Текст = стрЗаменить( Запрос.Текст,"//СписокТочек", 
			" И "+?(ЗаказыПоТочкам, 
			"ЗаказПокупателя.НомерТорговойТочкиКонтрагента В (&СписокТочек)",
			"выразить(ЗаказПокупателя.АдресДоставки как строка(100)) В (&СписокТочек)") );
			Если ЗаказыПоТочкам тогда
				списЧисловой = новый СписокЗначений;
				для ii=0 по СписокТочек.Количество()-1 цикл
					списЧисловой.Добавить(число(СписокТочек[ii].Значение));
				КонецЦикла;
				Запрос.УстановитьПараметр("СписокТочек", списЧисловой );  //всегда число!
			Иначе
				Запрос.УстановитьПараметр("СписокТочек", СписокТочек );  //всегда строка!
			КонецЕсли;
		КонецЕсли;
		
		
		ТабличноеПоле1.Очистить();
		ТабличноеПоле1 = запрос.Выполнить().Выгрузить();
		

		//31.05.17 Смирнов
		Если ОбъединятьРазныеЦены = Ложь тогда
			УдалитьИзСпискаЗаказыСРазнымиЦенами(ТабличноеПоле1);
		КонецЕсли;
		//Смирнов
		
			
		//+++( 23.10.2018 --- Задача № 57245 ----
		i=0; N = ТабличноеПоле1.Количество(); // 29.11.2018 - Задача № 60049  начинаем c 0 !
		флРазрешенСтопЛист = ЛОЖЬ;
		
		Пока i<N цикл
			стр1ЗаказПокупателя = ТабличноеПоле1[i].ЗаказПокупателя;
			Если НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя) тогда
				#Если Клиент тогда
					Сообщить("[ ] ЗАПРЕЩЕНЫ диски Стоп-листа! Заказ "+строка(стр1ЗаказПокупателя.Номер)+" нужно разрешить перед объединением!", СтатусСообщения.Внимание);	
				#КонецЕсли
				ПослатьЗадачу(стр1ЗаказПокупателя);  //31.10.2018 - сразу отсылаем!
				ТабличноеПоле1.Удалить( i ); N=N-1; продолжить;
			ИначеЕсли НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя, Истина) тогда //30.10.2018
  				Если ТабличноеПоле1[i].Флаг тогда
			      	#Если Клиент тогда
					Сообщить("[v]Разрешены диски Стоп-листа в заказе "+строка(стр1ЗаказПокупателя)+"! Общий заказ будет так же разрешен!", СтатусСообщения.Информация);	
					#КонецЕсли	
				 	флРазрешенСтопЛист = Истина;
				КонецЕсли;
			КонецЕсли;
			i=i+1;
		КонецЦикла;		
		//+++)
		
		//+++ 13.04.2015 --------------------точки-----------------------
		табСписокТочек = ТабличноеПоле1.Скопировать();
		СписокТочек.Очистить();
		i=0;  N = табСписокТочек.Количество();  // 29.11.2018 - Задача № 60049 - начинаем с 0
		если N>0 тогда
			СписокТочек.Добавить(СокрЛП(табСписокТочек[0].Точка));
			i=1; 
		КонецЕсли;
		пока i<N цикл
			Если СокрЛП(табСписокТочек[i].Точка) = СокрЛП(табСписокТочек[i-1].Точка) Тогда
				табСписокТочек.Удалить(i); N=N-1;
			Иначе
				СписокТочек.Добавить(СокрЛП(табСписокТочек[i].Точка)); i=i+1;
			КонецЕсли;
		КонецЦикла;
		
		СписокЗаказов = новый СписокЗначений;					
		СписокЗаказов.ЗагрузитьЗначения( ТабличноеПоле1.ВыгрузитьКолонку("ЗаказПокупателя") );
		
		//+++( 05.12.2017 по задаче № 36453 - доп.проверки и удаление заказов, которые нельзя объединять
		//сразу удаляем то, что нельзя!
		i=0; N = ТабличноеПоле1.Количество(); 
		таблМарш = получитьЗаказыВМаршрутах(СписокЗаказов);
		пока i<N цикл
			стр1 = ТабличноеПоле1[i];
			
			Если стр1.СпособОтгрузки.Код = 10 или стр1.ЗаказПокупателя.Самовывоз тогда //самовывоз  - силами покупателя за счет покупателя
				стр1.Флаг = ЛОЖЬ;
				сообщить("Нельзя объединять заказ № "+стр1.ЗаказПокупателя.Номер+" с самовывозом!", СтатусСообщения.Внимание);
			КонецЕсли;	
			
			стр2 = таблМарш.Найти(стр1.ЗаказПокупателя, "ЗаказПокупателя");
			Если стр2<>Неопределено тогда
				стр1.Флаг = ЛОЖЬ;
				сообщить("Нельзя объединять заказ № "+стр1.ЗаказПокупателя.Номер+", который уже находится в маршруте № "+стр2.НомерМаршрута, СтатусСообщения.Внимание);
			КонецЕсли;	
			
			Если не стр1.Флаг 
				Тогда ТабличноеПоле1.Удалить(i); N=N-1;
			Иначе i=i+1;
			КонецЕсли;
		КонецЦикла;
		
		СписокЗаказов = новый СписокЗначений;					
		СписокЗаказов.ЗагрузитьЗначения( ТабличноеПоле1.ВыгрузитьКолонку("ЗаказПокупателя") );
		
  //+++( 19.04.2018 запрос Миронычева для первичных заказов-------------------------------------
   ////		Анализ Типа первичных заказов - НЕЛЬЗЯ объединять 10 тип с другими!
		Запрос10 = Новый Запрос;
		Запрос10.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателя.ТипЗаказа
			|ИЗ Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ ЗаказПокупателя.Ссылка В (&Ссылка)
			|	СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателя.ТипЗаказа";
		Запрос10.УстановитьПараметр("Ссылка", СписокЗаказов);
		Результат10 = Запрос10.Выполнить();
		табл10  = Результат10.Выгрузить();
		Отбор10 = Новый Структура("ТипЗаказа",10);
		Если табл10.Количество()>1 Тогда //разные типы
			Если табл10.НайтиСтроки(Отбор10).Количество() > 0 Тогда 
				Сообщить("Нельзя объединять Заказы IM Service (10 типа) c Заказами других типов!", СтатусСообщения.Внимание);
			ВОЗВРАТ;
			КонецЕсли;
		КонецЕсли;
	//+++ ) 

		//------ 25.03.2016 ---------проверка на макс.объем--------
		КолЗак = СписокЗаказов.Количество();
		//08.06.2016 ПроверкаЗаказовПоМаксОбъему(КолЗак);
		
		#Если Клиент тогда
			Если Предупреждение Тогда 
				Предупреждение("Найдено "+строка(КолЗак)+" заказов
				|по "+строка(СписокТочек.Количество())+" различным точкам
				|с общим объемом (по каждой точке) не превышающей "+строка(МаксОбъем)+"м3
				|   c выбранной датой отгрузки!", 30);
			Иначе 
				Сообщить("Всего найдено "+строка(КолЗак)+" заказов
				|по "+строка(СписокТочек.Количество())+" различным точкам
				|с общим объемом (по каждой точке) не превышающей "+строка(МаксОбъем)+"м3
				|   c выбранной датой отгрузки !");				   
			КонецЕсли;
		#КонецЕсли			   
		Возврат; //+++ выход!
		
КонецЕсли;

//==================================================================================================================		
//2)----------------------------Если не ТолькоЧтениеЗаказов тогда ------------------------------------------
	Если НЕ (ТабличноеПоле1.Количество()=0 или ТолькоЧтениеЗаказов ) тогда
		
		
//+++( 30.10.2018 --- Задача № 57855  ----
		i=0; N = ТабличноеПоле1.Количество(); // 29.11.2018 - Задача № 60049
		флРазрешенСтопЛист = ЛОЖЬ;
		пока i<N цикл
			стр1ЗаказПокупателя = ТабличноеПоле1[i].ЗаказПокупателя;
			Если НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя) тогда
				#Если Клиент тогда
					Сообщить(строка(стр1ЗаказПокупателя)+" - [ ]НЕ Разрешены диски Стоп-листа! Заказ нужно разрешить перед объединением!", СтатусСообщения.Внимание);	
				#КонецЕсли	
				ПослатьЗадачу(стр1ЗаказПокупателя);  //31.10.2018
				ТабличноеПоле1.Удалить( i ); N=N-1; продолжить;
			ИначеЕсли НельзяОбъединятьНеПодтвержденныйЗаказВКоторомЕстьТоварыСтопЛиста(стр1ЗаказПокупателя, Истина) тогда //30.10.2018
			  	Если ТабличноеПоле1[i].Флаг тогда
	            	#Если Клиент тогда
					Сообщить(строка(стр1ЗаказПокупателя)+" - [v]Разрешены диски Стоп-листа! Общий заказ будет так же разрешен!", СтатусСообщения.Внимание);	
					#КонецЕсли	
				    флРазрешенСтопЛист = Истина;
				КонецЕсли;
			КонецЕсли;
		i=i+1;
		КонецЦикла;		
//+++)
		
		СписокЗаказов = новый СписокЗначений;
		КолЗак = ТабличноеПоле1.Количество();
		
		табЗнач = ТабличноеПоле1.Скопировать();
		табЗнач.Свернуть("Флаг, Договор, Менеджер, БонусПрименен", "Количество"); //24.07.2018
		i=0; N=табЗнач.Количество();
		Пока i<N цикл
			Если табЗнач[i].Флаг тогда 	i=i+1;	
			Иначе табЗнач.Удалить(i); N=N-1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТабЗнач.Количество()>1 тогда
			#Если Клиент тогда
				Если (Предупреждение) Тогда 		
					Предупреждение("Нельзя объединять заказы покупателей 
					|по "+строка(табЗнач.Количество())+" разным договорам
					|или  менеджерам (или бонусу)- в один общий заказ!", 10);
				Иначе 
					Сообщить("Нельзя объединять заказы покупателей 
					|по "+строка(табЗнач.Количество())+" разным договорам
					|или  менеджерам (или бонусу)- в один общий заказ!");				   
				КонецЕсли;					   
			#КонецЕсли	
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
	СписокОбщихЗаказов.Очистить();
	
	//========================================================================
	ДЛЯ k = 0 по СписокТочек.Количество()-1 цикл
		ТОЧКА = СписокТочек[k].Значение;
		
		типЗак = 0;	//+++ 08.06.2016
		максТипЗак = ?(РазделятьШД,3,1); // число "проходов"
		
		пока типЗак < максТипЗак цикл // 3 раза проходим! 
			типЗак = типЗак + 1;
			
			СписокЗаказов.Очистить();
			
			для каждого стр1 из ТабличноеПоле1 цикл
				если стр1.флаг 
					и СокрЛП(стр1.Точка) = ТОЧКА тогда
					Если не РазделятьШД тогда // 08.06.2016 - добавляем все заказы по порядку...
						СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
					Иначе // проверка по типу...
						колШ = 0; колД = 0; 
						колТов = стр1.ЗаказПокупателя.Товары.Количество();
						
						Для каждого стрТов из стр1.ЗаказПокупателя.Товары цикл
							если стрТов.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски тогда
								колД = колД + 1;
							Иначеесли стрТов.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Шины тогда
								колШ = колШ + 1;
								//ИначеЕсли стрТов.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Прочее 
							ИначеЕсли  // - не учитываем только 3 товара
								СокрЛП(стрТов.Номенклатура.Код) = "9177633" //вентиль
								или СокрЛП(стрТов.Номенклатура.Код) = "9107619" // гайка
								или СокрЛП(стрТов.Номенклатура.Код) = "9178010" // пакет-фасовка
								тогда
								колТов = колТов + 1;
							КонецЕсли;	
						КонецЦикла;
						
						если типЗак=1 и колТов=колД	тогда // все товары в заказе - Диски
							СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
						Иначеесли типЗак=2 и колТов=колШ тогда // все товары в заказе - Шины
							СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
						Иначеесли типЗак=3 и колТов<>колШ и колТов<>колД тогда // все разные товары в заказе - не все Шины, не все Диски
							СписокЗаказов.Добавить(стр1.ЗаказПокупателя );
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			// НОВАЯ ПроверкаЗаказовПоМаксОбъему (с учетом разбиения на Шины, Диски, перемешку...
			если МаксОбъем>0 и СписокЗаказов.Количество()>0 тогда
				V = 0;
				для нЗак=0 по СписокЗаказов.Количество()-1 цикл
					зак1 = СписокЗаказов[нЗак].Значение;
					для каждого стр1 из зак1.Товары цикл
						V = V + стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура);
					КонецЦикла;
					если V>МаксОбъем тогда // Превышение объема - удаляем заказы из объединения!
						N = СписокЗаказов.Количество()-1 - нЗак;
						для нн=1 по N цикл
							#Если НаКлиенте тогда
								сообщить("Превышение объема в "+строка(МаксОбъем)+" м3 требует не объединять "+строка( СписокЗаказов[нЗак].Значение ), СтатусСообщения.Внимание);
							#КонецЕсли
							СписокЗаказов.Удалить(нЗак);//каждый раз ссписок сдвигается...	
						КонецЦикла;
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
			//==============================================================
			
			Если СписокЗаказов.Количество()=0 тогда 
				#Если НаКлиенте тогда
					Если (Предупреждение) Тогда 
						Предупреждение("Нет"+?(транзит," транзитных","")+" заказов покупателя 
						|для объединения по Контрагенту: "+строка(Контрагент)+"
						|с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+"
						|по точке: "+ТОЧКА,10);
					Иначе 
						Сообщить("Нет"+?(транзит," транзитных","")+" заказов покупателя 
						|для объединения по Контрагенту: "+строка(Контрагент)+"
						|с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+"
						|по точке: "+ТОЧКА);					
					КонецЕсли;							
				#КонецЕсли	
				продолжить;
			иначеЕсли СписокЗаказов.Количество()=1 тогда 
				#Если НаКлиенте тогда
					Если (Предупреждение) Тогда 
						Предупреждение("Только один "+?(транзит," транзитный","")+" заказ покупателя:
						|"+строка(СписокЗаказов[0].Значение)+"
						|по точке: "+ТОЧКА+"
						|Объединение - не требуется!", 5);
					Иначе 
						сообщить("Только один "+?(транзит," транзитный","")+" заказ покупателя:
						|"+строка(СписокЗаказов[0].Значение)+"
						|по точке: "+ТОЧКА+"
						|Объединение - не требуется!");						   
					КонецЕсли;	
					Сообщить("По точке: "+ТОЧКА+" - объединение не требуется! Только 1 заказ: "+строка(СписокЗаказов[0].Значение) );					   
				#КонецЕсли	
				продолжить;
			иначе
				#Если НаКлиенте тогда
					Сообщить("По точке: "+ТОЧКА+" выбрано: "+строка(СписокЗаказов.Количество())+?(транзит," транзитных","")+" заказов покупателя для объединения по Контрагенту: "+строка(Контрагент)+" с датой отгрузки с "+Формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" по "+Формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" и подразделению: "+строка(Подразделение), СтатусСообщения.Информация);
				#КонецЕсли
			КонецЕсли;	
			
			
			//---------------Заказанные и неотгруженные Товары по этим заказам--------------------------------------- 
			запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
			запрос.УстановитьПараметр("Дата", ТекущаяДата() );
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ЗаказыПокупателя.ЗаказПокупателя,
			               |	ЗаказыПокупателя.Номенклатура КАК Номенклатура,
			               |	ЗаказыПокупателя.КоличествоОстаток КАК Количество,
			               |	ЗаказыПокупателя.СуммаУпрОстаток КАК Сумма,
			               |	ВЫБОР
			               |		КОГДА ЗаказыПокупателя.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
			               |			ТОГДА ЗаказыПокупателя.Номенклатура.ЕдиницаХраненияОстатков.Вес * 3
			               |		ИНАЧЕ ЗаказыПокупателя.Номенклатура.ЕдиницаХраненияОстатков.Объем
			               |	КОНЕЦ * ЗаказыПокупателя.КоличествоОстаток КАК Объем
			               |ИЗ
			               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
			               |			&Дата,
			               |			ЗаказПокупателя В (&СписокЗаказов)
			               |				И (ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.ПустаяСсылка)
			               |					ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказов.Получен))
			               |				И Номенклатура.Услуга = ЛОЖЬ) КАК ЗаказыПокупателя
			               |ГДЕ
			               |	ЕСТЬNULL(ЗаказыПокупателя.КоличествоОстаток, 0) > 0
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ЗаказыПокупателя.Номенклатура.Производитель,
			               |	Номенклатура
			               |ИТОГИ
			               |	СУММА(Количество),
			               |	СУММА(Сумма),
			               |	СУММА(Объем)
			               |ПО
			               |	Номенклатура
			               |АВТОУПОРЯДОЧИВАНИЕ"; 
			ОбщийЗаказТовары = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
			запрос.УстановитьПараметр("Дата", Конецдня(ТекущаяДата()) );  // в пределах дня!
			
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателяУслуги.Номенклатура,
			|	ЗаказПокупателяУслуги.Содержание,
			|	ЗаказПокупателяУслуги.Количество,
			|	ЗаказПокупателяУслуги.Сумма
			|ИЗ
			|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
			|ГДЕ
			|	ЗаказПокупателяУслуги.Ссылка В(&СписокЗаказов)
			|АВТОУПОРЯДОЧИВАНИЕ"; 
			
			
			ОбщийЗаказУслуги = запрос.Выполнить().Выбрать();
			
			//06.08.18 Смирнов
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ЗаказПокупателяБонусы.Номенклатура,
			               |	СУММА(ЗаказПокупателяБонусы.Количество) КАК Количество
			               |ИЗ
			               |	Документ.ЗаказПокупателя.Бонусы КАК ЗаказПокупателяБонусы
			               |ГДЕ
			               |	ЗаказПокупателяБонусы.Ссылка В(&СписокЗаказов)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЗаказПокупателяБонусы.Номенклатура
			               |АВТОУПОРЯДОЧИВАНИЕ"; 
			ТабБонусыИсходныхЗаказов = запрос.Выполнить().Выгрузить();
			//--Смирнов

			
			
			Если ОбщийЗаказТовары.Количество()=0 тогда 
				//	#Если НаКлиенте тогда
				Сообщить("--- Нет заказанных товаров для объединения! ---", СтатусСообщения.Внимание);
				//	#КонецЕсли	
				возврат;
			иначе
				//	#Если НаКлиенте тогда
				КолТов = ОбщийЗаказТовары.Количество();
				Сообщить("Заказано "+ строка(КолТов)+" товаров для объединения.", СтатусСообщения.Информация);
				//	#КонецЕсли	
			КонецЕсли;	
			
			
			#Если Клиент тогда
				Если Предупреждение	Тогда 
					Режим = РежимДиалогаВопрос.ДаНет;
					Ответ = Вопрос(" Отменить Объединение будет уже невозможно!
					|Вы уверены, что действительно хотите объединить
					|"+строка(СписокЗаказов.Количество())+" заказов 
					|c датой отгрузки "+?(ДатаОтгрузки0=НачалоДня(ДатаОтгрузки1)," = "+Формат(ДатаОтгрузки0,"ДЛФ=DD"),
					"с "+Формат(ДатаОтгрузки0,"ДЛФ=DD")+" по "+Формат(ДатаОтгрузки1,"ДЛФ=DD") ) +"
					|в один Общий заказ покупателя ("+ТОЧКА+")?", Режим, 10, КодВозвратаДиалога.Да, "Предупреждение!");
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Продолжить;//на следующую точку
					КонецЕсли;
				КонецЕсли;
			#КонецЕсли	
			
			докОбщийЗаказ = документы.ЗаказПокупателя.СоздатьДокумент();
			
			
			ЗаполнитьЗначенияСвойств(докОбщийЗаказ, СписокЗаказов[0].Значение); // по 1-му заполняем основные реквизиты Общего документа		
			
			//26.08.2016  договор - из первого заказа в списке! 
			Если НЕ ЗначениеЗаполнено(Контрагент1.КонтрагентДляРезерваИМ) тогда 
				
				//12.09.14 Смирнов, если есть договор факторинга, то ставим его, автоматически меняется на другой договор!
				докОбщийЗаказ.ДоговорКонтрагента = ОбменСУТИнтернетМагазин.найтиДоговорФакторингаПоОтветственному(СписокЗаказов[0].Значение);
			КонецЕсли;
			
			//Смирнов
			Подразделение = ?(Подразделение=неопределено, справочники.Подразделения.НайтиПоКоду("00005"), Подразделение);
			докОбщийЗаказ.Подразделение = Подразделение;
			
			//+++ 28.10.2014 Огородников
			докОбщийЗаказ.ТипЗаказа = 6; // объединенный заказ имеет отдельный тип
			Преф = ?(Подразделение.Код="00005", "ТК", СокрЛП(Подразделение.ПрефиксИБ) );
			
			докОбщийЗаказ.НомерВходящегоДокумента="";
			докОбщийЗаказ.ДатаВходящегоДокумента ='00010101';
			докОбщийЗаказ.ССайта = ложь;
			
			докОбщийЗаказ.Поставщик  = справочники.Контрагенты.ПустаяСсылка();
			докОбщийЗаказ.Статус     = перечисления.СтатусыЗаказов.ПустаяСсылка();
			докОбщийЗаказ.Согласован = ложь;
			
			докОбщийЗаказ.РазрешитьГрузитьТоварыИзСтопЛиста =  флРазрешенСтопЛист; //30.10.2018
			//+++)
			
			докОбщийЗаказ.Дата   = ТекущаяДата(); //мин(ТекущаяДата(), ДатаОтгрузки+8*3661);   // 08:08:08
			
			ДатаОтгрЗак1 = СписокЗаказов[0].Значение.ДатаОтгрузки; // по первому заказу...
			Если  ДатаОтгрЗак1='00010101' тогда
				ДатаОтгр = ДатаОтгрЗак1; 
				докОбщийЗаказ.Резерв = истина;
			Иначе
				ДатаОтгр = макс( НачалоДня(ТекущаяДата()), ДатаОтгрЗак1 ); //текущая для старых, иначе как в 1-ом заказе
				докОбщийЗаказ.Резерв = ЛОЖЬ;
			КонецЕсли;
			докОбщийЗаказ.ДатаОтгрузки =ДатаОтгр;
			
			Если ДатаОтгр > НачалоДня(ТекущаяДата()) тогда
				сообщить("Дата отгрузки больше текущей даты! Дата отгрузки общ. заказа будет: "+Формат(ДатаОтгр,"ДЛФ=D"), СтатусСообщения.Внимание );
			КонецЕсли;	
			
			
			докОбщийЗаказ.УстановитьНовыйНомер(Преф); // всегда ТК!
			
			докОбщийЗаказ.Проверен = истина;
			докОбщийЗаказ.АвтоРезервирование = истина;
			
			СписокЗак = новый СписокЗначений;
			СтавкаНДС_2019 = СтавкаНДСнаДату( ТекущаяДата() ); //28.12.2018
			чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );			
			
			докОбщийЗаказ.Товары.Очистить();
			пока ОбщийЗаказТовары.Следующий() цикл
				Если НЕ(ОбщийЗаказТовары.Номенклатура.Услуга) Тогда
					
					//06.08.18 Смирнов
					//Проверим, может это бонусы и их не надо добавлять (они тоже попадают в РН ЗаказыПокупателей)
					стрБонусов = ТабБонусыИсходныхЗаказов.Найти(ОбщийЗаказТовары.Номенклатура,"Номенклатура");
					КоличествоТовара = 0;
					Если стрБонусов<>Неопределено тогда
						КоличествоТовара = ОбщийЗаказТовары.Количество - стрБонусов.Количество; 
					КонецЕсли;
					Если КоличествоТовара>0 или стрБонусов = неопределено тогда
						стр1 = докОбщийЗаказ.Товары.Добавить();
						
						стр1.Номенклатура = ОбщийЗаказТовары.Номенклатура;
						стр1.Количество   = ОбщийЗаказТовары.Количество;
						стр1.Сумма   	  = ОбщийЗаказТовары.Сумма;
						стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
						стр1.Сумма   	  = стр1.Цена * стр1.Количество;
						
						стр1.СтавкаНДС = СтавкаНДС_2019;   //28.12.2018
						стр1.СуммаНДС = Окр( стр1.Сумма * чНДС/(100+чНДС), 2);
						
						стр1.ЕдиницаИзмерения = стр1.Номенклатура.ЕдиницаХраненияОстатков;
						стр1.Коэффициент = 1;
						стр1.КоличествоМест = стр1.Количество;
					КонецЕсли;
				КонецЕсли;
				
				выбЗак = ОбщийЗаказТовары.Выбрать();
				пока выбЗак.Следующий() цикл
					Если СписокЗак.Количество()>0 тогда
						Если СписокЗак.НайтиПоЗначению(выбЗак.ЗаказПокупателя)=неопределено тогда
							СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
						КонецЕсли;
					иначе
						СписокЗак.Добавить(выбЗак.ЗаказПокупателя);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
			
	 //+++( 19.04.2018 запрос Миронычева для первичных заказов-------------------------------------
   ////		Анализ Типа первичных заказов - НЕЛЬЗЯ объединять 10 тип с другими!
		Запрос10 = Новый Запрос;
		Запрос10.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателя.ТипЗаказа
			|ИЗ Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ ЗаказПокупателя.Ссылка В (&Ссылка)
			|	СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателя.ТипЗаказа";
		Запрос10.УстановитьПараметр("Ссылка", СписокЗак);
		Результат10 = Запрос10.Выполнить();
		табл10  = Результат10.Выгрузить();
		Отбор10 = Новый Структура("ТипЗаказа",10);
		Если табл10.Количество()>1 Тогда //разные типы
			Если табл10.НайтиСтроки(Отбор10).Количество() > 0 Тогда 
				Сообщить("Нельзя объединять первичные Заказы IM Service (10 типа) c Заказами других типов!", СтатусСообщения.Внимание);
			ВОЗВРАТ;
			КонецЕсли;
		КонецЕсли;
	//+++ ) 
		СтавкаНДС_2019 = СтавкаНДСнаДату( ТекущаяДата() ); //28.12.2018
		чНДС = ПолучитьСтавкуНДС( СтавкаНДС_2019 );
		
		Пока ОбщийЗаказУслуги.Следующий() Цикл
			стр1 = докОбщийЗаказ.Услуги.Добавить();
			
			стр1.Номенклатура = ОбщийЗаказУслуги.Номенклатура;
			стр1.Содержание   = ОбщийЗаказУслуги.Содержание;
			стр1.Количество   = ОбщийЗаказУслуги.Количество;
			стр1.Сумма   	  = ОбщийЗаказУслуги.Сумма;
			стр1.Цена = ?(стр1.Количество=0, 0, Окр(стр1.Сумма / стр1.Количество, 2) );
			
			стр1.СтавкаНДС = СтавкаНДС_2019;   //28.12.2018
			стр1.СуммаНДС = Окр( стр1.Сумма * чНДС/(100+чНДС), 2);
		КонецЦикла;
		
		//3.отменяем проведение и ставим X на старых заказах и проводим новый общий заказ в Одной Транзакции!
		коммент = "";
		комментСкладу = "";
			
			попытка	//=============================================================================================	
				//2.создаем общий суммарный заказ
				НачатьТранзакцию();
				
				//+++ 11.10.2013
				Если СписокЗак.Количество()<СписокЗаказов.Количество() тогда
					Сообщить("-----Не Все заказы из избраннных попали в объединение!-----");
					для i=0 по СписокЗаказов.Количество()-1 цикл
						Если СписокЗак.НайтиПоЗначению(СписокЗаказов[i].Значение)=неопределено тогда
							Сообщить(строка(СписокЗаказов[i].Значение)+" - не будет объединен, так как по нему нет заказанных товаров!", СтатусСообщения.Внимание);
						КонецЕсли;
					КонецЦикла;
					Сообщить("------------------------------------------------------------");
				КонецЕсли;	
				СуммаПоДокументам = 0;
				СписокПредыдущихЗаказов = Новый СписокЗначений;//Плотников
				для i=0 по СписокЗак.Количество()-1 цикл
					докОб = СписокЗак[i].Значение.ПолучитьОбъект();
					докОб.ПометкаУдаления = истина;
					докОб.Комментарий = "# данные перенесены >> "+строка(докОбщийЗаказ.Номер)+" # "+докОб.Комментарий;
					
					докОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(СписокЗак[i].Значение);//+++ 19.01.2015 регистрация для обмена с TERMINAL и МИМ
					
					УдалитьКорректировкиПоДокументу(докОб.ссылка);
					СуммаПоДокументам = СуммаПоДокументам + докОб.суммаДокумента;
					
					//+++( 13.10.2017 --- по задаче № 34504 -------- комментарии и адреса--------
					Если докОбщийЗаказ.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж = справочники.НаправленияПродаж.НайтиПоКоду(16) тогда
						коммент = коммент + докОб.Номер+"; ";
					Иначе
						коммент = коммент + строка(докОб.Номер)+": "+СокрЛП(докОб.Комментарий)+";
						|";
						Если докОбщийЗаказ.АдресДоставки ="" тогда
							докОбщийЗаказ.АдресДоставки = докОб.АдресДоставки;
							сообщить("Адрес доставки общего заказа заполнен по Заказу № "+строка( докОб.Номер ), СтатусСообщения.Информация); 
						ИначеЕсли докОб.АдресДоставки<>"" тогда
							Если докОбщийЗаказ.АдресДоставки <> докОб.АдресДоставки тогда
								сообщить(строка( докОб.Ссылка ) +" - Адрес доставки отличается от адреса доставки общего заказа!", СтатусСообщения.Внимание); 
							КонецЕсли;	
						КонецЕсли;
						Если докОбщийЗаказ.АдресДляТТН ="" тогда
							Если Найти(докОбщийЗаказ.АдресДоставки, докОб.АдресДляТТН)>0 тогда //если адрес ттн совпадает с адресом доставки
								докОбщийЗаказ.АдресДляТТН = докОб.АдресДляТТН;
								сообщить("Адрес ТТН общего заказа заполнен по Заказу № "+строка( докОб.Номер ), СтатусСообщения.Информация); 
							КонецЕсли;	
						ИначеЕсли докОб.АдресДляТТН<>"" тогда
							Если докОбщийЗаказ.АдресДляТТН <> докОб.АдресДляТТН тогда
								сообщить(строка( докОб.Ссылка ) +" - Адрес ТТН отличается от адреса ТТН общего заказа! Адрес заказа: "+строка(докОб.АдресДляТТН), СтатусСообщения.Внимание); 
							КонецЕсли;	
						КонецЕсли;
						
						Если докОбщийЗаказ.ВидАдреса.Пустая() тогда
							докОбщийЗаказ.ВидАдреса = докОб.ВидАдреса;
							Если докОбщийЗаказ.КоординатыДоставки="" тогда //по адресу
								докОбщийЗаказ.КоординатыДоставки = докОб.КоординатыДоставки;
								сообщить("Координаты Доставки общего заказа заполнены по Заказу № "+строка( докОб.Номер ), СтатусСообщения.Информация); 
							КонецЕсли;
						ИначеЕсли не докОб.ВидАдреса.пустая() тогда
							Если докОбщийЗаказ.ВидАдреса <> докОб.ВидАдреса тогда
								сообщить(строка( докОб.Ссылка ) +" - Адрес адреса отличается от Вида адреса общего заказа! Вид адреса заказа: "+строка(докОб.ВидАдреса), СтатусСообщения.Внимание); 
							КонецЕсли;	
						КонецЕсли;
						
						Если докОбщийЗаказ.НомерТорговойТочкиКонтрагента = 0 тогда
							докОбщийЗаказ.НомерТорговойТочкиКонтрагента = докОб.НомерТорговойТочкиКонтрагента;
							сообщить("Номер Торговой Точки общего заказа заполнены по Заказу № "+строка( докОб.Номер ), СтатусСообщения.Информация); 
						ИначеЕсли не докОб.НомерТорговойТочкиКонтрагента<>0 тогда
							Если докОбщийЗаказ.НомерТорговойТочкиКонтрагента <> докОб.НомерТорговойТочкиКонтрагента тогда
								сообщить(строка( докОб.Ссылка ) +" - Номер точки отличается от номера точки общего заказа! Точка заказа № "+строка(докОб.НомерТорговойТочкиКонтрагента), СтатусСообщения.Внимание); 
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;
					//+++)
					
					СписокПредыдущихЗаказов.Добавить(докОб.Ссылка);//Плотников
					ДобавитьЗаказВТЧОбщегоЗаказа(СписокЗак[i].Значение, докОбщийЗаказ);	//+++ рекурентная функция
				КонецЦикла;	
				
				//23.09.16 Смирнов в объединенном заказе ставим макс дату оплаты из начальных заказов
				Если ЗначениеЗаполнено(докОбщийЗаказ.Контрагент.КонтрагентДляРезерваИМ) тогда
					СписокЗаказов2 = докОбщийЗаказ.Заказы.ВыгрузитьКолонку("ЗаказПокупателя");
					МаксДатаОплаты = ПолучитьМаксДатуОплаты(СписокЗаказов2);
					Если МаксДатаОплаты<>"" тогда
						докОбщийЗаказ.ДатаОплаты=МаксДатаОплаты;
					иначе
					КонецЕсли;
					Для каждого Зак из докОбщийЗаказ.Заказы цикл
						комментСкладу = комментСкладу + ?(СокрЛП(Зак.ЗаказПокупателя.КомментарийДляСклада)<>"",""+СокрЛП(Зак.ЗаказПокупателя.НомерВходящегоДокумента)+": "+СокрЛП(Зак.ЗаказПокупателя.КомментарийДляСклада)+Символы.ПС,"");
					КонецЦикла;
				КонецЕсли;
				//Смирнов
				
				если докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам >1
					и докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам<-1 тогда
					
					Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы товаров и услуг общего заказа: "+строка(докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма"))+" - "+строка(СуммаПоДокументам)+" = "+строка(докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам)+"р.", СтатусСообщения.Важное);
					ОтменитьТранзакцию();
					Сообщить(" ОБЪЕДИНЕНИЕ ОТМЕНЕНО !!!", СтатусСообщения.ОченьВажное );   //+++ 05.06.2014
					
				Иначе
					если докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам <1
						и докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам>-1 тогда
						Сообщить("Сумма по товарам "+строка(СписокЗак.Количество())+" документов отличается от суммы товаров и услуг общего заказа: "+строка(докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма"))+" - "+строка(СуммаПоДокументам)+" = "+строка(докОбщийЗаказ.Товары.Итог("Сумма") + докОбщийЗаказ.Услуги.Итог("Сумма") - СуммаПоДокументам)+"р.", СтатусСообщения.Внимание);
					КонецЕсли;
					
					докОбщийЗаказ.Комментарий = "# общ. заказ ("+ТОЧКА+"): " + коммент;//+++ 13.04.2015
					//05.10.16 Смирнов
					докОбщийЗаказ.КомментарийДляСклада = комментСкладу;
					//--Смирнов
					Для Каждого стр из СписокПредыдущихЗаказов Цикл  //Плотников
						Нов = докОбщийЗаказ.СписокПредыдущихЗаказов.Добавить();
						Нов.Заказ = стр.Значение;
						
					КонецЦикла;//Плотников
					
					докОбщийЗаказ.ВМаршрут = Ложь;
					докОбщийЗаказ.Комментарий =  ?(DPDМосква,"Общ.заказ: DPD Москва!",докОбщийЗаказ.Комментарий);//20.02.2018
					
					докОбщийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
					//	ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(докОбщийЗаказ);//+++ 19.01.2015 регистрация для обмена с МИМ
					
					ЗафиксироватьТранзакцию();
					
					Если докОбщийЗаказ.ТребуютсяКрышки и докОбщийЗаказ.Подразделение = справочники.Подразделения.НайтиПоКоду("00005") Тогда 
						Попытка
							ОтправитьПисьмоСКрышки(докОбщийЗаказ.Ссылка,докОбщийЗаказ.ДатаГотовностиНаборки);
						Исключение	
						КонецПопытки;	
					КонецЕсли;
					
					Сообщить("+++ Успешно создан общ. заказ № "+строка(докОбщийЗаказ.Номер)+" ("+ТОЧКА+") с датой отгрузки: "+формат(докОбщийЗаказ.ДатаОтгрузки,"ДЛФ=D")+" для "+строка(СписокЗак.Количество())+" из "+строка(СписокЗаказов.Количество())+" заказов покупателей.", СтатусСообщения.Информация);
					Сообщить("Сумма по "+строка(КолТов)+" товарам из "+строка(СписокЗак.Количество())+" объединенных документов полностью совпадает с суммой общего заказа: "+строка(СуммаПоДокументам)+"р.", СтатусСообщения.Информация);
					
					//+++ 16.02.2016 +++ Автоэксперт (Ярославль)
					//10.03.17 Смирнов, для головного ставим категорию, для питера - свойство
					Если (ЗначениеНеЗаполнено(Подразделение) 
						или Подразделение = справочники.Подразделения.НайтиПоКоду("00005")  //19.02.2016
						) и (СокрЛП(Контрагент1.Код) = "П000382" 
						или (не Контрагент1.КонтрагентДляРезерваИМ.Пустая()
						и Контрагент1.КонтрагентДляРезерваИМ<>Контрагент1) 
						)	тогда
						
						//29.08.2016 категория отдельная !!!
						кат1 = Справочники.КатегорииОбъектов.НайтиПоКоду("00043"); //00017");
						////ставим на отгрузку ВСЕ заказы!
						
						если ПроверитьРезервыОТХ(докОбщийЗаказ) тогда
							Сообщить("--- Категорию: "+строка(кат1)+" - установить нельзя! Есть Заказанный товар, который находится на ОТХ---", СтатусСообщения.Внимание);
						иначе
							регСв = РегистрыСведений.КатегорииОбъектов.СоздатьМенеджерЗаписи();
							регСв.Объект    = докОбщийЗаказ.Ссылка;
							
							регСв.Категория = кат1;
							
							регСв.Записать();
							Сообщить("+++ Категория '"+строка(кат1)+"' - установлена +++", СтатусСообщения.Информация);
						КонецЕсли;
					КонецЕсли;
					
					//10.03.17 Смирнов, для головного ставим категорию, для питера - свойство
					Если Подразделение = справочники.Подразделения.НайтиПоКоду("00112") 
						и (не Контрагент1.КонтрагентДляРезерваИМ.Пустая()
						и Контрагент1.КонтрагентДляРезерваИМ<>Контрагент1) тогда //Спб
						если ПроверитьРезервыОТХ(докОбщийЗаказ) тогда
							Сообщить("--- Категорию: "+строка(кат1)+" - установить нельзя! Есть Заказанный товар, который находится на ОТХ---", СтатусСообщения.Внимание);
						иначе
							
							менеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
							менеджерЗаписи.Объект=докОбщийЗаказ.Ссылка;
							менеджерЗаписи.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90175"); //Направлений отгрузки (филиал)
							менеджерЗаписи.Значение = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("b0099"); //ДПД Спб
							менеджерЗаписи.Записать();
						КонецЕсли;
					КонецЕсли;
					
					СписокОбщихЗаказов.Добавить( докОбщийЗаказ.Ссылка );
				КонецЕсли;
				
				Если СписокЗак.Количество()<>СписокЗаказов.Количество() тогда
					Если Предупреждение Тогда 
						Предупреждение("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов.", 30);
					Иначе 
						Сообщить("Нельзя объединить в общий заказ "+строка(СписокЗаказов.Количество() - СписокЗак.Количество())+" выбранных заказов.", 30);
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				ОтменитьТранзакцию();
				//	#Если НаКлиенте тогда
				Сообщить("--- не удалось создать общий заказ: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				//	#КонецЕсли	
			КонецПопытки;
		КонецЦикла; //РазделятьШД
		
	КОНЕЦЦикла;//конец Цикла по точкам
КонецПроцедуры

//+++ 28.10.2014 - рекурентная функция
Процедура ДобавитьЗаказВТЧОбщегоЗаказа(Зак1, ЗакОб)
	
	Если Зак1.Заказы.Количество()=0 тогда
		стрЗак = ЗакОб.Заказы.Добавить();
		стрЗак.ЗаказПокупателя = Зак1;
	Иначе
		для каждого стр1 из Зак1.Заказы цикл
			ДобавитьЗаказВТЧОбщегоЗаказа(стр1.ЗаказПокупателя, ЗакОб);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры



Процедура ПолучитьЗаказыНажатие(Элемент)
	ТабличноеПоле1.Очистить();
	ТолькоПрочитать = истина;
	ОбъединитьЗаказыПокупателя(Контрагент1, ТолькоПрочитать, Подразделение, ,ОбъединятьРазныеЦены);  	//Автоэкперт
КонецПроцедуры

Процедура Контрагент1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	СписокКонтр = ПолучитьСписокКонтрагентов();
	Если СписокКонтр.Количество()=0 тогда
		Предупреждение("У вас нет доступных контрагентов, для объединения заказов!");
		возврат;
	КонецЕсли;
	формаКонтр = справочники.контрагенты.ПолучитьФормуВыбора();
	формаКонтр.СправочникСписок.Отбор.ссылка.ВидСравнения = видСравнения.ВСписке;
	формаКонтр.СправочникСписок.Отбор.ссылка.Значение = СписокКонтр;
	формаКонтр.СправочникСписок.Отбор.ссылка.Использование = Истина;
	Контрагент1 = формаКонтр.ОткрытьМодально();
	
	Контрагент1ПриИзменении(неопределено);		
	
КонецПроцедуры


//-----для МИМ - берем только контрагентов с ПриниматьЗаказыЧерезСайт -------------------
//----------- и ОсновнойДоговорКонтрагента.ОтветственноеЛицо = текПользователь-----------
функция ПолучитьСписокКонтрагентов()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И НЕ ДоговорыКонтрагентов.Владелец.ПометкаУдаления
	|";
	
	//Если Флажок2 тогда
	//Запрос.Текст = Запрос.Текст  + "	И ДоговорыКонтрагентов.Владелец.ПриниматьЗаказыЧерезСайт
	//|";
	//КонецЕсли;
	
	//отбор контрагентов только по себе
	Если НЕ РольДоступна("ПолныеПрава") тогда
		
		//+++ 26.08.2016
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ИспользоватьМеханизмДележкиДляГруппы") 
			и ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение тогда //Для руководителей филиалов + резервИМ
			
			
			ЗапросИМ = Новый Запрос;
			ЗапросИМ.Текст = 
			"ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыПоТоварнымГруппам.Договор
			|ИЗ
			|	РегистрСведений.ДоговорыПоТоварнымГруппам КАК ДоговорыПоТоварнымГруппам
			|ГДЕ
			|	ДоговорыПоТоварнымГруппам.Подразделение = &Подразделение
			|	И ДоговорыПоТоварнымГруппам.Контрагент.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(справочник.Контрагенты.ПустаяССылка)";
			
			ЗапросИМ.УстановитьПараметр("ОтветственноеЛицо",  глТекущийПользователь);
			ЗапросИМ.УстановитьПараметр("Подразделение", Подразделение);
			
			РезультатИМ = ЗапросИМ.Выполнить().Выгрузить();
			
			СписокДоговоров = Новый СписокЗначений();
			СписокДоговоров.ЗагрузитьЗначения(РезультатИМ.ВыгрузитьКолонку("ссылка"));
			
			Запрос.Текст = Запрос.Текст +" И (ЗаказПокупателя.ДоговорКонтрагента В (&СписокДоговоров)
			|   ИЛИ ЗаказПокупателя.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
			Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
			Запрос.УстановитьПараметр("СписокДоговоров", СписокДоговоров);
			
		иначе	
			//только свои заказы!
			
			Запрос.Текст = Запрос.Текст + "	И (ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
			|ИЛИ ДоговорыКонтрагентов.Владелец.ОсновнойМенеджерКонтрагента = &ОтветственноеЛицо)";
			Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выгрузить();
	рез = новый СписокЗначений;
	Если Выборка.Количество()>0 тогда
		рез.ЗагрузитьЗначения( Выборка.ВыгрузитьКолонку("Ссылка") );
	КонецЕсли;
	
	Возврат  рез;	
	
КонецФункции


Процедура ПриОткрытии()
	Флажок1 = истина;
	ДатаОтгрузки =  НачалоДня( ТекущаяДата() ); // Сегодня
	
	ДатаОтгрузки0 =  ДатаОтгрузки;
	ДатаОтгрузки1 =  КонецДня ( ДатаОтгрузки );  
	
	ОбъединятьРазныеЦены = истина;
	
	//+++07.11.2014 - массив всех филиалов + 0-ой элемент - это Головное подразделение
	ЭлементыФормы.Подразделение.СписокВыбора.Добавить(справочники.Подразделения.НайтиПоКоду("00005"),"Ярославль"); //Ярославль
	Филиал = яштПоставщики.ПолучитьМассивФилиалов();
	для i=1 по Филиал.Количество()-1 цикл
		назв = Филиал[i].Наименование;
		назв = стрЗаменить(назв, "Подразделение ", "");
		ЭлементыФормы.Подразделение.СписокВыбора.Добавить(Филиал[i], назв);
	КонецЦикла;
	
	//+++ 22.04.2014 специально для Федунова
	Если ПараметрыСеанса.ТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Федунов") тогда
		Контрагент1 = справочники.Контрагенты.НайтиПоКоду("П000382");
		ЭлементыФормы.Контрагент1.Доступность = ложь;
		
		ПодтвержденВКомментарии = истина;
		ЭлементыФормы.ПодтвержденВКомментарии.Видимость   = истина;
		
		ЗаказыПоТочкам = ЛОЖЬ;  //всегда по адресам!
		//	ЭлементыФормы.ЗаказыПоТочкам.Доступность = ложь;
		
		ПоТочкам = ложь;//отбор по точкам выключаем
		
	КонецЕсли;
	
	максОбъем = 10;
КонецПроцедуры


Процедура УдалитьКорректировкиПоДокументу(ЗакПокСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаЗаказаПокупателя.Ссылка,
	|	КорректировкаЗаказаПокупателя.ЗаказПокупателя
	|ИЗ
	|	Документ.КорректировкаЗаказаПокупателя КАК КорректировкаЗаказаПокупателя
	|ГДЕ
	|	КорректировкаЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗакПокСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		докКорр = выборка.Ссылка.ПолучитьОбъект();	
		докКорр.ПометкаУдаления = истина;
		докКорр.Комментарий = "Удален автоматически "+Строка(ТекущаяДата())+" # "+докКорр.Комментарий;
		попытка
			докКорр.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(выборка.ЗаказПокупателя);//+++ 01.11.2016 регистрация для обмена в Terminal и МИМ
			сообщить(" Удален документ: "+строка(докКорр)+" на сумму: "+ докКорр.СуммаДокумента);
		исключение
			сообщить(" Не удалось удалить док: "+строка(докКорр) , СтатусСообщения.Внимание);
		конецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаОтгрузки0, ?(ДатаОтгрузки1='0001-01-01', ДатаОтгрузки1, КонецДня(ДатаОтгрузки1)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаОтгрузки0 = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОтгрузки1 = КонецДня(НастройкаПериода.ПолучитьДатуОкончания());
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВвода2Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.Значение + Направление*86400 >=ДатаОтгрузки1 тогда
		ДатаОтгрузки1=КонецДня(Элемент.Значение) + 86400;
	КонецЕсли;
КонецПроцедуры

Процедура ДатаОтгрузки1Регулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Элемент.Значение + Направление*86400<=ДатаОтгрузки0 тогда
		ДатаОтгрузки0=НачалоДня(Элемент.Значение) - 86400;
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель2ВыбратьВсе(Кнопка)
	Отметки(1);
	ПроверкаЗаказовПоМаксОбъему();
КонецПроцедуры

Процедура КоманднаяПанель2ОтменитьВсе(Кнопка)
	Отметки(0);
КонецПроцедуры

Процедура КоманднаяПанель2ИзменитьВсе(Кнопка)
	Отметки(2);
	ПроверкаЗаказовПоМаксОбъему();
КонецПроцедуры

Процедура ТабличноеПоле1ПередНачаломДобавления(Элемент, Отказ, Копирование)
	//Отказ=Истина;
	Предупреждение("Прямое добавление заказов - НЕ рекомендуется!", 10);
	
КонецПроцедуры

Процедура ТабличноеПоле1ПередУдалением(Элемент, Отказ)
	//Отказ=Истина;
	Предупреждение("Прямое удаление заказов - запрещено!
	|Выключите флажок слева от заказа!");
	
КонецПроцедуры

Процедура Отметки(число1)
	Для каждого стр1 из ТабличноеПоле1 Цикл
		стр1.Флаг = ?(число1=1, TRUE, ?(число1=0, FALSE, НЕ стр1.Флаг) );
		Если стр1.Флаг и НЕ стр1.ЗаказПокупателя.Проверен тогда  //отмечен непроделенный заказ!
			Сообщить("Нельзя отмечать непроделенный заказ! "+строка(стр1.ЗаказПокупателя)+" - выключен!", СтатусСообщения.Внимание);
			стр1.Флаг = ЛОЖЬ;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если данныеСтроки.Процент>=0 и данныеСтроки.Процент<100 тогда
		ОформлениеСтроки.цветТекста = webЦвета.Синий;
	КонецЕсли;
	
	Если данныеСтроки.КоличествоОтгружается>0 тогда
		Если данныеСтроки.КоличествоОтгружается=данныеСтроки.Количество тогда
			ОформлениеСтроки.цветФона = webЦвета.НейтральноЗеленый;
		ИначеЕсли данныеСтроки.Процент=0 тогда //22.09.2016
			ОформлениеСтроки.цветФона = webЦвета.СветлоСерый;
		Иначе
			ОформлениеСтроки.цветФона = webЦвета.светлоРозовый;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ЗаказПокупателя.Проверен тогда
		Если ДанныеСтроки.ЗаказПокупателя.Резерв тогда
			ОформлениеСтроки.Шрифт = мЖирныйКурсивШрифт;
		Иначе
			ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		КонецЕсли;	
	ИначеЕсли ДанныеСтроки.ЗаказПокупателя.Резерв тогда
		ОформлениеСтроки.Шрифт = мКурсивШрифт;
	КонецЕсли;	
	
КонецПроцедуры

Процедура Контрагент1ПриИзменении(Элемент)
	
	Если Контрагент1.ЗапретитьВводЗаказаПокупателя тогда
		Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещен ввод заказов!
		|Объединение заказов в Новый заказ - невозможно!", 30);
		Контрагент1 = справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли контрагент1.ЗапретОтгрузки тогда
		Предупреждение("Покупателю "+строка(Контрагент1.НаименованиеПолное)+" - Запрещены отгрузки!
		|Отгрузить Объединенный заказ будет - невозможно!", 30);
	КонецЕсли;
	
	//	Если Контрагент1.Код = "П000382" тогда //АЭ
	Если НЕ Контрагент1.КонтрагентДляРезерваИМ.Пустая() тогда //АЭ
		ЭлементыФормы.ПодтвержденВКомментарии.Видимость   = истина;
		
		ЭлементыФормы.DPDМосква.Видимость = истина; //20.02.2018
		
		ПодтвержденВКомментарии = истина;
		
		ЗаказыПоТочкам = ЛОЖЬ;  //всегда по адресам!
		ЭлементыФормы.ЗаказыПоТочкам.Доступность = ложь;
		
		ПоТочкам = ложь;
	иначе
		ПодтвержденВКомментарии = ЛОЖЬ;
		ЭлементыФормы.ПодтвержденВКомментарии.Видимость   = ЛОЖЬ;
		ЭлементыФормы.DPDМосква.Видимость = ЛОЖЬ; //20.02.2018
		
		ЗаказыПоТочкам = Истина;  //по точкам!
		ЭлементыФормы.ЗаказыПоТочкам.Доступность = истина;
		
		ПоТочкам = ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаОчисткиНажатие(Элемент)
	ДатаОтгрузки0='00010101';
	ДатаОтгрузки1='00010101';
КонецПроцедуры

Процедура СписокТочекПриИзменении(Элемент)
	
	//если список не пустой - включаем отбор!
	ПоТочкам = (СписокТочек.Количество()>0);
	
КонецПроцедуры

//18.02.2016
Функция ПроверитьРезервыОТХ(Объект) 
	
	//+++ 11.09.2014 - проверка РЕЗЕРВА и по филиалам!
	//Если Объект.Транзит тогда //ИЛИ НЕ Объект.Проверен Тогда // 14.11.2013 - проверять все заказы!
	//	Возврат;
	//Конецесли;	
	
	//	Если СокрЛП(Объект.Контрагент.Код) ="93625"  Тогда // для резерва
	//		Возврат;
	//	Конецесли;	
	//	Если яштПоЗаказуБылиРеализации( Объект.Ссылка ) Тогда // для отгруженных заказов резерв не проверяется ?
	//		Возврат;
	//	КонецЕсли;	
	//	
	ЗапросКБазе =Новый Запрос;
	ЗапросКБазе.УстановитьПараметр( "Транзит", Объект.Транзит );//+++ 11.09.2014
	ЗапросКБазе.УстановитьПараметр( "Подразделение", Объект.Подразделение );//+++ 11.09.2014
	
	Если Объект.Транзит и (Объект.Подразделение.Пустая() или Объект.Подразделение.Код="00005") тогда // транзит на Склады с подразделением Ярославль?!
		ЗапросКБазе.УстановитьПараметр( "Подразделение", Справочники.Подразделения.НайтиПоКоду("00005") );
	КонецЕсли;
	
	ЗапросКБазе.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Количество
	|ПОМЕСТИТЬ ВТ_ЗаказТовары
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка
	|ПОМЕСТИТЬ ВТ_Склады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Транзитный = &Транзит
	|	И НЕ Склады.ЗапретитьИспользование
	|	И (НЕ &Транзит
	|			ИЛИ &Транзит
	|				И Склады.Подразделение = &Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	А.Номенклатура,
	|	СУММА(А.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(А.КоличествоНаОТХ) КАК КоличествоНаОТХ
	|ПОМЕСТИТЬ ВТ_ОстаткиНаСкладахИОТХ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		0 КАК КоличествоНаОТХ
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ЗаказТовары.Номенклатура
	|						ИЗ
	|							ВТ_ЗаказТовары)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							ВТ_Склады.Ссылка
	|						ИЗ
	|							ВТ_Склады)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаОтветственномХранении.Номенклатура,
	|		0,
	|		ТоварыНаОтветственномХранении.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ЗаказТовары.Номенклатура
	|						ИЗ
	|							ВТ_ЗаказТовары)
	|					И Склад В
	|						(ВЫБРАТЬ
	|							ВТ_Склады.Ссылка
	|						ИЗ
	|							ВТ_Склады)
	|					И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХранении) КАК А
	|
	|СГРУППИРОВАТЬ ПО
	|	А.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаказТовары.НомерСтроки,
	|	ВТ_ЗаказТовары.Номенклатура,
	|	ВТ_ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК КоличествоЗаказано,
	|	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоНаОТХ, 0) КАК КоличествоНаОТХ,
	|	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) КАК КоличествоНеХватает,
	|	ОстаткиСтороннихПоставщиков.СрокДоставки КАК СрокДоставки,
	|	ОстаткиСтороннихПоставщиков.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ОстаткиСтороннихПоставщиков.Остаток, 0) КАК КолПост
	|ИЗ
	|	ВТ_ЗаказТовары КАК ВТ_ЗаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаСкладахИОТХ КАК ВТ_ОстаткиНаСкладахИОТХ
	|		ПО ВТ_ЗаказТовары.Номенклатура = ВТ_ОстаткиНаСкладахИОТХ.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя.Проверен
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ЗаказТовары.Номенклатура
	|						ИЗ
	|							ВТ_ЗаказТовары)
	|					И ЗаказПокупателя.Транзит = &Транзит
	|					И (НЕ &Транзит
	|						ИЛИ &Транзит
	|							И ЗаказПокупателя.Подразделение = &Подразделение)) КАК ЗаказыПокупателей
	|		ПО ВТ_ЗаказТовары.Номенклатура = ЗаказыПокупателей.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСТЬNULL(СрокиДоставки.СрокДоставки, 0) КАК СрокДоставки,
	|			СрокиДоставки.Поставщик КАК Контрагент,
	|			ОстаткиНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура,
	|			ОстаткиНоменклатурыКонтрагентов.Остаток КАК Остаток
	|		ИЗ
	|			РегистрСведений.СрокиДоставки КАК СрокиДоставки
	|				ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОстНомКонтр.Контрагент КАК Контрагент,
	|					ОстНомКонтр.Номенклатура КАК Номенклатура,
	|					ОстНомКонтр.Подразделение КАК Подразделение,
	|					ОстНомКонтр.Остаток КАК Остаток
	|				ИЗ
	|					РегистрСведений.ОстаткиНоменклатурыКонтрагентов КАК ОстНомКонтр
	|				ГДЕ
	|					ОстНомКонтр.Контрагент В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								сроки.Поставщик
	|							ИЗ
	|								РегистрСведений.СрокиДоставки КАК сроки
	|							ГДЕ
	|								НЕ сроки.ОТХ)
	|					И ОстНомКонтр.Номенклатура В
	|							(ВЫБРАТЬ
	|								ВТ_ЗаказТовары.Номенклатура
	|							ИЗ
	|								ВТ_ЗаказТовары)
	|					И (НЕ &Транзит
	|								И ОстНомКонтр.Подразделение = &ПустоеПодразделение
	|							ИЛИ &Транзит
	|								И ОстНомКонтр.Подразделение = &Подразделение)
	|					И ОстНомКонтр.Остаток > 0) КАК ОстаткиНоменклатурыКонтрагентов
	|				ПО СрокиДоставки.Поставщик = ОстаткиНоменклатурыКонтрагентов.Контрагент
	|					И (НЕ СрокиДоставки.ОТХ)) КАК ОстаткиСтороннихПоставщиков
	|		ПО ВТ_ЗаказТовары.Номенклатура = ОстаткиСтороннихПоставщиков.Номенклатура
	|ГДЕ
	|	ВТ_ЗаказТовары.Количество + ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) - ЕСТЬNULL(ВТ_ОстаткиНаСкладахИОТХ.КоличествоОстаток, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗаказТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Склады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОстаткиНаСкладахИОТХ";
	
	СписокКонтрагентовОТХ = Новый СписокЗначений;
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);//+++13.10.2014
	ЗапросКБазе.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	ЗапросКБазе.УстановитьПараметр("ПустоеПодразделение",справочники.Подразделения.ПустаяСсылка() );
	
	ЗапросКБазе.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//+++ 15.01.2016 - не надо брать заказы КонтрагентаИМ - тогда св.остаток Увеличится!
	Если НЕ Объект.Ссылка.Контрагент.КонтрагентДляРезерваИМ.Пустая() тогда
		ЗапросКБазе.текст = стрЗаменить(ЗапросКБазе.текст ,"//ОстаткиРезерваИМ", " ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ
		|		РезервДляИМ.Номенклатура,
		|		РезервДляИМ.КоличествоОстаток,
		|		0
		|	ИЗ
		|		РегистрНакопления.РезервДляИМ.Остатки( ,
		|				КонтрагентДляРезерваИМ = &КлиентИМ
		|				И Подразделение = &Подразделение
		|					И Номенклатура В (ВЫБРАТЬ
		|							ВТ_ЗаказТовары.Номенклатура
		|						 ИЗ ВТ_ЗаказТовары)) КАК РезервДляИМ
		|"); //активируем!
		ЗапросКБазе.УстановитьПараметр("КлиентИМ",Объект.Ссылка.Контрагент.КонтрагентДляРезерваИМ);
		ЗапросКБазе.УстановитьПараметр("Подразделение", Объект.Ссылка.Подразделение );
	КонецЕсли;
	
	Результат=ЗапросКБазе.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл	
		Если Выборка.КоличествоНеХватает>0  и Выборка.КоличествоНаОТХ>0 Тогда
			Сообщить("Товар " + Выборка.Номенклатура.наименование+ " находится на ОТХ");
			Возврат Истина;
		КонецЕсли;		
	КонецЦикла;		
	Возврат Ложь;		
	
КонецФункции	

Процедура МаксОбъемРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление;
	ПроверкаЗаказовПоМаксОбъему();
КонецПроцедуры

Процедура МаксОбъемПриИзменении(Элемент)
	ПроверкаЗаказовПоМаксОбъему();
КонецПроцедуры

//=======================================
процедура ПроверкаЗаказовПоМаксОбъему(КолЗак=0)
	
	Если МаксОбъем=0 или ТабличноеПоле1.Количество()=0 или  СписокТочек.Количество()=0 тогда
		Предупреждение("Контроль по объёму не может быть выполнен.", 10);
		возврат;
	КонецЕсли;
	
	КолЗак=0;
	для i=0 по СписокТочек.Количество()-1 цикл
		объемПоТочке = 0;
		для каждого стр1 из ТабличноеПоле1 цикл
			Если стр1.Флаг тогда
				объемПоТочке = объемПоТочке + стр1.Объем;
				Если объемПоТочке>МаксОбъем тогда
					стр1.Флаг = ложь;
					сообщить( строка(стр1.ЗаказПокупателя) +" выключен из объединения, т.к. общий объем выбранных заказов превышает макс.объем "+строка(МаксОбъем), СтатусСообщения.Внимание);
				иначе
					КолЗак=КолЗак+1; // общее число заказов
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ТабличноеПоле1ПриПолученииДанных(Элемент, ОформленияСтрок)
	общОбъем = 0;
	для каждого стр1 из ТабличноеПоле1 цикл
		если стр1.флаг тогда
			общОбъем = общОбъем  + стр1.Объем;
		КонецЕсли;
	КонецЦикла;	
	ЭлементыФормы.ТабличноеПоле1.Колонки.Объем.ТекстПодвала = формат(общОбъем,"ЧДЦ=6; ЧГ=0");
КонецПроцедуры

Функция ПолучитьМаксДатуОплаты(СписокЗ)
	ДО="";
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказПокупателя.ДатаОплаты) КАК ДатаОплаты
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&СписокЗаказов)";
	Запрос.УстановитьПараметр("СписокЗаказов",СписокЗ);
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		ДО = Рез.ДатаОплаты;
	КонецЦикла;
	Возврат ДО;
КонецФункции

//Если есть 2 и более заказов с одной и той же номенклатурой по разным ценам, то оставляем только заказ с макс. ценой, остальные не объединяем
процедура УдалитьИзСпискаЗаказыСРазнымиЦенами(Таб)
	ТабВрем = Таб.Скопировать();
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов = Таб.выгрузитьКолонку("ЗаказПокупателя");
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаказов",СписокЗаказов);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.Ссылка КАК ЗаказПокупателя
	|ПОМЕСТИТЬ втОснова
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка В(&СписокЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОснова.ЗаказПокупателя,
	|	МаксЦена.Номенклатура
	|ПОМЕСТИТЬ втЗаказысНЕМаксЦеной
	|ИЗ
	|	втОснова КАК втОснова
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			втОснова.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(втОснова.Цена) КАК Цена
	|		ИЗ
	|			втОснова КАК втОснова
	|		
	|		СГРУППИРОВАТЬ ПО
	|			втОснова.Номенклатура) КАК МаксЦена
	|		ПО втОснова.Номенклатура = МаксЦена.Номенклатура
	|			И втОснова.Цена <> МаксЦена.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОснова.ЗаказПокупателя
	|ИЗ
	|	втОснова КАК втОснова
	|ГДЕ
	|	НЕ втОснова.ЗаказПокупателя В
	|				(ВЫБРАТЬ
	|					втЗаказысНЕМаксЦеной.ЗаказПокупателя
	|				ИЗ
	|					втЗаказысНЕМаксЦеной)";
	Рез = Запрос.Выполнить().Выбрать();
	
	Таб.Очистить();
	отб = новый Структура("ЗаказПокупателя");
	
	Пока Рез.Следующий() цикл
		отб.ЗаказПокупателя = рез.ЗаказПокупателя;
		НайденныеСтроки = ТабВрем.НайтиСтроки(отб);
		
		Для каждого стр из НайденныеСтроки цикл
			нстр = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЦикла;
	КонецЦикла;
	//выведем на всякий случай заказы которые убрали из объединения
	
	для каждого стр из табВрем Цикл
		отб.ЗаказПокупателя = стр.ЗаказПокупателя;
		НайденныеСтроки = Таб.НайтиСтроки(отб);
		#Если клиент тогда
			Если НайденныеСтроки.Количество()=0 тогда
				Сообщить(""+стр.ЗаказПокупателя+" исключен из объединения, т.к. имеются заказы с той же номенклатурой. но большей ценой (флаг <объединять разные цены> не установлен)!",СтатусСообщения.Важное);
			КонецЕсли;
		#КонецЕсли
	КонецЦикла;
КонецПроцедуры




мЖирныйШрифт = Новый Шрифт(,, Истина);
мКурсивШрифт = Новый Шрифт(,,, Истина);
мЖирныйКурсивШрифт = Новый Шрифт(,,Истина , Истина);
флРазрешенСтопЛист = ЛОЖЬ;