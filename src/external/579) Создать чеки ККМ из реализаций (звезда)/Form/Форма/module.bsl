
Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если не ЗначениеЗаполнено(ДокРеализация) или не ДокРеализация.Проведен тогда
		Предупреждение("Реализация не выбрана или помечена на удаление");
		Возврат;
	КонецЕсли;
	Если не ЗначениеЗаполнено(СкладПолучатель) тогда
		Предупреждение("Не выбран склад для пробиия чеков.");
		Возврат;
	КонецЕсли;
	ЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	
	ФормаАвторизации = ЧекККМ.ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.ДокументОбъект = ЧекККМ;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();
	
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	РеализацияТоваровУслугТовары.Номенклатура,
	             |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	             |	РеализацияТоваровУслугТовары.Склад КАК Склад,
	             |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	             |	РеализацияТоваровУслугТовары.Качество,
	             |	РеализацияТоваровУслугТовары.Коэффициент
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	             |ГДЕ
	             |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	             |	И РеализацияТоваровУслугТовары.Ссылка.Проведен
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РеализацияТоваровУслугТовары.Номенклатура,
	             |	РеализацияТоваровУслугТовары.Склад,
	             |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения,
	             |	РеализацияТоваровУслугТовары.Качество,
	             |	РеализацияТоваровУслугТовары.Коэффициент
	             |ИТОГИ ПО
	             |	Склад";
	Запрос.УстановитьПараметр("Ссылка",ДокРеализация);
	ВыборкаСклады = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗапросЯчейки = новый Запрос;
	ЗапросЯчейки.Текст="ВЫБРАТЬ
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.Ссылка,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.НомерСтроки,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.Номенклатура,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.ВремяНачала,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.ВремяОкончания,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.Склад,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.ВремяОбщ,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.АдресХранения,
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.Количество
	                   |ИЗ
	                   |	Документ.РеализацияТоваровУслуг.ТоварыАдресноеХранение КАК РеализацияТоваровУслугТоварыАдресноеХранение
	                   |ГДЕ
	                   |	РеализацияТоваровУслугТоварыАдресноеХранение.Ссылка = &Ссылка";
	ЗапросЯчейки.УстановитьПараметр("Ссылка",ДокРеализация);
	Ячейки = ЗапросЯчейки.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		РеализацияОбъект = ДокРеализация.ПолучитьОбъект();
		РеализацияОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		РеализацияОбъект.УстановитьПометкуУдаления(истина);
		РеализацияОбъект.Записать();
		
		Пока ВыборкаСклады.Следующий() Цикл
			
			ДокПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
			ДокПеремещение.ВидОперации =Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
			ЗаполнитьЗначенияСвойств(ДокПеремещение,ДокРеализация);
			ДокПеремещение.СкладОтправитель = ВыборкаСклады.Склад;
			ДокПеремещение.СкладПолучатель = СкладПолучатель;
			ДокПеремещение.МаркаАвтомобиля = "";
			ДокПеремещение.МаркаПрицепа = "";
			ДокПеремещение.ГосНомерАвтомобиля = "";
			ДокПеремещение.ГосНомерПрицепа = "";
			ДокПеремещение.Водитель = "";
			ДокПеремещение.ВодительскоеУдостоверение = "";
			ДокПеремещение.Перевозчик = "";
			ДокПеремещение.Комментарий="#Перемещение для чеков ККМ по "+ДокРеализация+" "+ДокПеремещение.Комментарий;
			ДокПеремещение.Товары.Очистить();
			ДокПеремещение.ПометкаУдаления = ложь;
			ДокПеремещение.Дата = ТекущаяДата();
			выборкаНоменклатура = ВыборкаСклады.Выбрать();
			Пока выборкаНоменклатура.Следующий() Цикл
				нстр = ДокПеремещение.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(нстр,выборкаНоменклатура);
				нстр.Склад = СкладПолучатель;
			КонецЦикла;
			отбор = новый Структура("Склад");
			Отбор.Склад = ВыборкаСклады.Склад;
			НайденныеСтроки = Ячейки.НайтиСтроки(Отбор);
			
			Для каждого стр из НайденныеСтроки цикл
				нстр = ДокПеремещение.ТоварыАдресноеХранение.Добавить();
				ЗаполнитьЗначенияСвойств(нстр,стр);
			КонецЦикла;
			
			УстановитьНомерДокумента(ДокПеремещение);
			
			//ДокПеремещение.Записать(РежимЗаписиДокумента.Запись);
			ДокПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		//ДокПеремещение.ПолучитьФорму("ФормаДокумента").Открыть();
		
		//формируем Чеки
		
		ТабТоваров = ДокРеализация.Товары.Выгрузить();
		
		Если ВидРазбиения = 1 тогда //по сумме
			ТабНоменлатуры = РаздробитьТЧ(ТабТоваров, лимит);	
		иначе   //по комплектам
			ТабНоменлатуры = РаздробитьТЧПоКомплектам(ТабТоваров);
		КонецЕсли;
		
		//ТабНоменлатуры = РаздробитьТЧ(ТабТоваров, лимит);
		
		ТабДоков = ТабНоменлатуры.Скопировать();
		ТабДоков.свернуть("НомерДока");
		отбор = новый Структура("НомерДока");
		Для Каждого стр из ТабДоков цикл
			отбор.НомерДока=стр.НомерДока;
			СтрокиДокумента = ТабНоменлатуры.НайтиСтроки(отбор);
			ТабТоваров.Очистить();
			Для каждого найденнаяСтрока из СтрокиДокумента цикл
				нстр = ТабТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(нстр,найденнаяСтрока);
			КонецЦикла;
			
			СформироватьЧекККМ(ДокРеализация,ТабТоваров);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ФормаСписок = ПолучитьФорму("СписокЧеков");
	ФормаСписок.ЗаказПокупателя = ДокРеализация.Сделка;
	ФормаСписок.Открыть();
КонецПроцедуры
		
Процедура ОсновныеДействияФормыформа(Кнопка)
	ФормаДокумента = Документы.КассоваяСмена.ПолучитьФорму("ФормаСписка",);
	ФормаДокумента.ОткрытьМодально();
КонецПроцедуры
		
Функция РаздробитьТЧПоКомплектам(Товары)
	ТоварыВрем = Товары.Скопировать();
	ТоварыВрем.Колонки.Добавить("ВидТовара");
	Для каждого стр из ТоварыВрем цикл
		стр.ВидТовара = стр.Номенклатура.ВидТовара;
	КонецЦикла;	
	
	ТоварыВрем.Сортировать("ВидТовара, Номенклатура");
	
	ТаблицаДоков = Товары.Скопировать();
	ТаблицаДоков.Очистить();
	ТаблицаДоков.Колонки.Добавить("НомерДока");
	НомерДока = 1;
	
	РазбитьЗаказПоКоличеству(ТоварыВрем,ТаблицаДоков,номерДока);
	
	
	Возврат ТаблицаДоков;
КонецФункции

Процедура РазбитьЗаказПоКоличеству(Товары,ТаблицаДоков,номерДока)
	
	к = Товары.Количество();
	
	Пока к >= 1 цикл
		строка = Товары.Получить(к-1);
		
		нстр = ТаблицаДоков.Добавить();	
		нстр.НомерДока = НомерДока;
		ЗаполнитьЗначенияСвойств(нстр, строка);
		НомерДока = НомерДока+1;
		
		Если строка.ВидТовара=Перечисления.ВидыТоваров.Шины или строка.ВидТовара=Перечисления.ВидыТоваров.Диски тогда
			МаксКол = 4;
		ИначеЕсли строка.ВидТовара=Перечисления.ВидыТоваров.АКБ тогда
			МаксКол = 1;
		ИначеЕсли строка.ВидТовара=Перечисления.ВидыТоваров.Аксессуары или  строка.ВидТовара=Перечисления.ВидыТоваров.Прочее тогда
			МаксКол = 20;
		Иначе
			МаксКол = 10;
		КонецЕсли;
		
		//Если нстр.ВидТовара=Перечисления.ВидыТоваров.Шины или нстр.ВидТовара=Перечисления.ВидыТоваров.Диски или  нстр.ВидТовара=Перечисления.ВидыТоваров.АКБ тогда
			Если нстр.Количество>МаксКол  тогда
				
				нстр.Количество = МаксКол;
				строка.Количество = строка.Количество-МаксКол;
				
				строка.Сумма = строка.Цена * строка.Количество;
				РассчитатьСуммуНДСТабЧасти(строка, ДокРеализация);
				
				//РассчитатьСуммуТабЧасти(нстр, ДокРеализация);
				нстр.Сумма = нстр.Цена * нстр.Количество;
				РассчитатьСуммуНДСТабЧасти(нстр, ДокРеализация);
				
				РазбитьЗаказПоКоличеству(Товары,ТаблицаДоков,номерДока);
			Иначе
				Товары.Удалить(строка);
			КонецЕсли;
		//иначе
		//	Если нстр.Количество>МаксКол
		//КонецЕсли;
        к = Товары.Количество();

	КонецЦикла;	
	
	//Если стр.Количество>0 тогда
	//	нстр = ТаблицаДоков.Добавить();	
	//	нстр.НомерДока = НомерДока;
	//	ЗаполнитьЗначенияСвойств(нстр, стр);
	//	НомерДока = НомерДока+1;
	//	
	//	Если нстр.ВидТовара=Перечисления.ВидыТоваров.Шины или нстр.ВидТовара=Перечисления.ВидыТоваров.Диски тогда
	//		МаксКол = 4;
	//	ИначеЕсли нстр.ВидТовара=Перечисления.ВидыТоваров.АКБ тогда
	//		МаксКол = 1;
	//	ИначеЕсли нстр.ВидТовара=Перечисления.ВидыТоваров.Аксессуары или  нстр.ВидТовара=Перечисления.ВидыТоваров.Прочее тогда
	//		МаксКол = 20;
	//	Иначе
	//		МаксКол = 10;
	//	КонецЕсли;	
	//		
	//	Если нстр.Количество>МаксКол  тогда
	//		
	//		нстр.Количество = МаксКол;
	//		стр.Количество = стр.Количество-МаксКол;
	//		
	//		РассчитатьСуммуТабЧасти(стр, ДокРеализация);
	//		РассчитатьСуммуНДСТабЧасти(стр, ДокРеализация);

	//		РазбитьСтрокуПоКоличеству(стр, ТаблицаДоков,номерДока);
	//	КонецЕсли;
	//иначе
	//КонецЕсли;
КонецПроцедуры

		
Функция РаздробитьТЧ(Товары, лимит)
	ТаблицаДоков = Товары.Скопировать();
	ТаблицаДоков.Очистить();
	ТаблицаДоков.Колонки.Добавить("НомерДока");
	НомерДока = 1;
	СуммаНовогоЗаказа = 0;
	Для каждого стр из Товары Цикл
		нстр = ТаблицаДоков.Добавить();
		нстр.НомерДока = НомерДока;
		ЗаполнитьЗначенияСвойств(нстр, стр);
		нстр.количество = 0;
		кол=1;
		КоличествоТовара=0;
		пока кол<= стр.Количество цикл
			кол=кол+1;
			КоличествоТовара=КоличествоТовара+1;
			СуммаНовогоЗаказа=СуммаНовогоЗаказа+стр.цена;
			Если СуммаНовогоЗаказа>=лимит тогда
				
				Нстр.Количество = КоличествоТовара;
				нстр.Сумма = Нстр.Количество*нстр.Цена;
				СуммаНовогоЗаказа=0;
				нстр = ТаблицаДоков.Добавить();
				ЗаполнитьЗначенияСвойств(нстр, стр);
				нстр.количество = 0; 
				НомерДока = НомерДока+1;
				КоличествоТовара = 0;
				нстр.НомерДока=НомерДока;
			КонецЕсли;
		КонецЦикла;
		Если нстр.количество = 0 тогда
			нстр.Количество = КоличествоТовара;
			нстр.Сумма = Нстр.Количество*нстр.Цена;
		КонецЕсли;
		Если нстр.Количество = 0 тогда
			ТаблицаДоков.Удалить(нстр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДоков;
КонецФункции

Процедура СформироватьЧекККМ(Реал, ТабТоваров)
	ЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	
	//ФормаАвторизации = ЧекККМ.ПолучитьФорму("ФормаАвторизации");
	//ФормаАвторизации.ДокументОбъект = ЧекККМ;
	//ВидПользователя = ФормаАвторизации.ОткрытьМодально();
	//
	//Если ВидПользователя <> Неопределено Тогда
	//	ЧекККМ.Ответственный = глТекущийПользователь;
	//	//ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);
	//КонецЕсли;
	
	
	ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ЧекККМ.Комментарий = "На основании "+ДокРеализация;
	ЧекККМ.Склад = СкладПолучатель;
	ЧекККм.Подразделение = ДокРеализация.Подразделение;
	ЧекККМ.ЗаказПокупателя = ДокРеализация.Сделка;
	ЧекККМ.Дата = ТекущаяДата();
	УстановитьНомерДокумента(ЧекККМ);
	
	ТипЦен=Константы.ТипЦенРозница.Получить();
	
	ЧекПробитНаККМ = Ложь;
	Параметры = Новый Структура;
	Ответ = "";
	КассаККМ = РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура( "Склад,Компьютер", СкладПолучатель,ИмяКомпьютера())).КассаККМ;
	ЧекККМ.КассаККМ = КассаККМ;
	мСтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
	
	глТорговоеОборудование.ПолучитьНомерЧекаСмены(мСтрокаФР, Параметры, Ответ);
	Параметры.Свойство("НомерЧека", ЧекККМ.НомерЧекаККМ);
	Параметры.Свойство("НомерСмены", ЧекККМ.НомерСменыККМ);
	
	ЗаписатьСтрокуЛогаКассы("Открываем форму оплат.(ФормаРегистрациипродажТСЦ:закрытьчек)");
	//ФормаОплат = ЧекККМ.ПолучитьФорму("ФормаОплатЧекаТСЦ", ЭтаФорма);
	
	//ТабТоваров = ДокРеализация.Товары.Выгрузить();
	ТабТоваров.ЗаполнитьЗначения(СкладПолучатель,"Склад");
	
	ЧекККМ.Товары.Загрузить(ТабТоваров);
	ТЗСклады=ЧекККМ.Товары.Выгрузить();
	ТЗСклады.Свернуть("Склад","Сумма");
	//ФормаОплат.ТаблицаОплатКредит.Очистить();
	//Для каждого стрСклады из ТЗСклады Цикл
	//	стрСтрока=ФормаОплат.ТаблицаОплатКредит.Добавить();
	//	стрСтрока.Склад=стрСклады.Склад;
	//	стрСтрока.Организация=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура( "Склад,Компьютер", стрСклады.Склад,ИмяКомпьютера())).Организация;
	//	стрСтрока.СуммаПоДокументу=стрСклады.Сумма;
	//	стрСтрока.СуммаНаличнойОплаты=стрСклады.Сумма;
	//	стрСтрока.СуммаБезналичнойОплаты=0;
	//	стрСтрока.ПроцентКомиссии=0;
	//КонецЦикла;
	
	//Результат  = ФормаОплат.ОткрытьМодально();
	Результат  = "Закрыть чек";
	//ЗаписатьСтрокуЛогаКассы("Результат формы оплат.(ФормаРегистрациипродажТСЦ:закрытьчек) " + Строка(Результат));
	//ТаблицаОплат=ФормаОплат.ТаблицаОплатКредит.Скопировать();
	//Печать=ФормаОплат.ПечатьТоварногоЧека;
	
	//Если ТаблицаОплат.Количество()>0 Тогда
	//	Для каждого стрОплата	из  ТаблицаОплат Цикл
	//		Если стрОплата.ПроцентКомиссии>0 Тогда
	//			найдСтроки=ЧекККМ.Товары.НайтиСтроки(Новый Структура("Склад",стрОплата.Склад));
	//			Для каждого стр из найдстроки Цикл
	//				стр.ПроцентСкидкиНаценки=стрОплата.ПроцентКомиссии;	
	//				РассчитатьСуммуТабЧасти(стр, ЧекККМ);
	//			КонецЦикла;		
	//		КонецЕсли	
	//	КонецЦикла;		
	//КонецЕсли;	
	
	Если Результат <> "Закрыть чек" Тогда
		
		ЗаписатьСтрокуЛогаКассы("Возврат в основную форму регистрации. (ФормаРегистрациипродажТСЦ:закрытьчек)");
		Возврат;
		
	Иначе
		Если ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			СтрокаСтатуса="";
			СоздатьНовыйЧек = Истина;
			
			// если чек проводится текущим днем и время ноль, то установить текущее время
			врТекущаяДата = ТекущаяДата();
			Если НачалоДня(ЧекККМ.Дата) = НачалоДня(врТекущаяДата)
				И Минута(ЧекККМ.Дата) = 0
				И Час(ЧекККМ.Дата) = 0
				И Секунда(ЧекККМ.Дата) = 0 Тогда
				
				ЧекККМ.Дата = врТекущаяДата;
				
			КонецЕсли; 
			
			флБылиПродажи=Ложь;
						
			Если ЧекККМ.Товары.Количество()>0 Тогда 	// товар по данному складу остался	
				ЧекККМ.СуммаНаличнойОплаты=ЧекККМ.Товары.Итог("Сумма") ;
				ЧекККМ.СуммаБезналичнойОплаты=0;//ЧекККМ.Товары.Итог("Сумма")-ЧекККМ.СуммаНаличнойОплаты ;
				Если ЧекККМ.СуммаБезналичнойОплаты>0 Тогда
					ЧекККМ.КассаККМ=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",ЧекККМ.Склад,ИмяКомпьютера())).КассаККМКредит;
				КонецЕсли;	
				

				Если (Константы.ПроводитьЧекОперативно.Получить()<>Ложь)  Тогда
				Иначе
					ЗаписатьСтрокуЛогаКассы("Попытки записи чека по складу. (ФормаРегистрациипродажТСЦ:закрытьчек) " + Строка(ЧекККМ.Склад));
					КоличествоПопыток = 1;					
					Пока (ЧекККМ.Проведен<>Истина) и (КоличествоПопыток<5) Цикл
						СоздатьНовыйЧек = Истина;
						попытка 
							//Если Константы.ПроводитьЧекОперативно.Получить() Тогда 
							//	ЧекККМ.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);	
							//Иначе 
							//	ЧекККМ.Записать(РежимЗаписиДокумента.Проведение);
							//КонецЕсли;
							ЧекККМ.Записать(РежимЗаписиДокумента.Запись);
							
						Исключение
							СоздатьНовыйЧек = Ложь;
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
						КоличествоПопыток = КоличествоПопыток + 1;
					КонецЦикла;						
					ЗаписатьСтрокуЛогаКассы("(ФормаРегистрациипродажТСЦ:закрытьчек). С попытки " + Строка(КоличествоПопыток) + " записали чек по складу " + ЧекККМ.Склад);							
				КонецЕсли;
				СтрокаСтатуса=СтрокаСтатуса+ВернутьСтатусЧекаККМ(ЧекККМ);
				флБылиПродажи=Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


Процедура ДокРеализацияПриИзменении(Элемент)
	Если найти(ДокРеализация.ДоговорКонтрагента.Наименование,"*#")=0 тогда
		Предупреждение("Неверный договор!(*#)");
		ДокРеализация=Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	//Если не ДокРеализация.Проведен тогда
	//	Предупреждение("Документ не проведен");
	//	ДокРеализация=Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	//КонецЕсли;
КонецПроцедуры


Процедура ПриОткрытии()
	Лимит = 50000;
	ВидРазбиения = 2;
	ВидРазбиенияПоКомплектамПриИзменении(неопределено);
КонецПроцедуры


Процедура ОсновныеДействияФормыкн(Кнопка)
	ФормаСписок = ПолучитьФорму("СписокЧеков");
	ФормаСписок.ЗаказПокупателя = ДокРеализация.Сделка;
	ФормаСписок.КассаККМ = РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура( "Склад,Компьютер", СкладПолучатель,ИмяКомпьютера())).КассаККМ;

	ФормаСписок.Открыть();

КонецПроцедуры


Процедура ОсновныеДействияФормыкнОРП(Кнопка)
	ФормаДокумента = Документы.ОтчетОРозничныхПродажах.ПолучитьФорму("ФормаСписка",);
	ФормаДокумента.Открыть();
КонецПроцедуры


Процедура ВидРазбиенияПоКомплектамПриИзменении(Элемент)
	Если ВидРазбиения=1 тогда
		ЭлементыФормы.Лимит.Доступность = истина;
		ЭлементыФормы.Надпись3.Доступность = истина;
	Иначе
		ЭлементыФормы.Лимит.Доступность = ложь;
		ЭлементыФормы.Надпись3.Доступность = ложь;
	КонецЕсли;
КонецПроцедуры

