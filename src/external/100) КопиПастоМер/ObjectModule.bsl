перем ТаблКодировок;

Функция ТочноеТекущееВремя() Экспорт 
	рез = ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	Возврат рез;
КонецФункции

Функция ЧтениеТекстаМодуля(ИмяФайла, Нумератор, Ранг, След, i = 0, Кодировка="ANSI")
	Текст = Новый ЧтениеТекста(ИмяФайла, ПолучитьКодировкуТекста(Кодировка) );
	Пока Истина Цикл
		Строка = Текст.ПрочитатьСтроку();
		Если Строка = Неопределено Тогда 
			Возврат i; //последняя 
		КонецЕсли; 
		i = i + 1; 
		Суть = СокрЛП(Строка); 
		Номер = Нумератор[Суть]; 
		Если Номер = Неопределено Тогда 
			Номер = Нумератор.Количество(); 
			Нумератор[Суть] = Номер; След.Добавить(Новый Массив(1)) 
		КонецЕсли; 
		Ранг.Добавить(Номер); 
		След[Номер].Добавить(Ранг.Количество() - 1) 
	КонецЦикла		                                                                                                                                                                                                                                                                                
КонецФункции

Функция ЧтениеМодулей(ПутьВыгрузки, Ранг, След,    ТипФайла = ".txt", ВклПодКаталоги=ЛОЖЬ, Кодировка="ANSI") Экспорт
	Нумератор = Новый Соответствие;
	Модули.Очистить();
	Файлы = НайтиФайлы(ПутьВыгрузки, "*"+ТипФайла, ВклПодКаталоги); // ВСЕ файлы - включая ПОДКАТАЛОГИ!
	k=0;
	Для Каждого Файл Из Файлы Цикл
		ОбработкаПрерыванияПользователя(); k=k+1;
		Состояние("Обрабатывается "+строка(k)+" файл: "+Файл.Имя);
		НовыйМодуль = Модули.Добавить();
		ПодКаталог1 = ""; 
		Если ВклПодКаталоги тогда //+++ 23.11.2018 
			ПодКаталог1 = Файл.ПолноеИмя;
			ПодКаталог1 = стрЗаменить(ПодКаталог1, ПутьВыгрузки,"");
			ПодКаталог1 = стрЗаменить(ПодКаталог1, Файл.Имя, "");
		КонецЕсли;
		НовыйМодуль.ИмяМодуля = ПодКаталог1 + Лев(Файл.Имя, СтрДлина(Файл.Имя) - стрДлина(ТипФайла) );
		НовыйМодуль.Размер = ЧтениеТекстаМодуля(Файл.ПолноеИмя, Нумератор, Ранг, След, , Кодировка )
	КонецЦикла;
	Возврат Нумератор.Количество()
КонецФункции

Процедура Перенумерация(Нумератор) Экспорт
	Список = Новый СписокЗначений;
	Для Каждого Элемент Из Нумератор Цикл
		Список.Добавить(Элемент.Ключ)
	КонецЦикла;
	
	Список.СортироватьПоЗначению();
	Для Каждого Элемент Из Список Цикл
		Нумератор[Элемент.Значение] = Список.Индекс(Элемент)	
	КонецЦикла
КонецПроцедуры

Процедура ПолучитьСуффиксныйМассив(Ранг, След, Охват = 1) Экспорт // по мотивам алгоритма Манбера и Майерса
	Верх = След.ВГраница();
	К = Ранг.Количество();
	Пока Верх < Ранг.ВГраница() Цикл
		ОбработкаПрерыванияПользователя();//+++
		Состояние("Построение суффиксного массива: " + Охват + " / " + К);
		Змея = Новый Массив(Верх + 1, 1);
		Для Каждого Шаг ИЗ След Цикл 
		ОбработкаПрерыванияПользователя();//+++
			Для j = 1 По Шаг.ВГраница() Цикл 
			i = Цел(Шаг[j] - Охват + К) % К;
			Х = Ранг[Шаг[j]]; Ящик = Змея[Ранг[i]]; 
				Если Ящик[0] = Х Тогда Ящик.Добавить(i) 
				Иначе Ящик.Добавить(i + 0.1); Ящик[0] = Х 
				КонецЕсли 
			КонецЦикла 
		КонецЦикла;
		Номер = - 1;
		След.Очистить(); След = Неопределено;
		Для Каждого Шаг Из Змея Цикл 
		ОбработкаПрерыванияПользователя();//+++
			Для j = 1 По Шаг.ВГраница() Цикл
				i = Шаг[j]; 
				Если i % 1 > 0 Тогда 
					Номер = Номер + 1; 
				КонецЕсли; 
				Ранг[i] = Номер 
			КонецЦикла;
		КонецЦикла;
        Верх = Номер;
		Охват = Охват * 2;
		След = Змея;
	КонецЦикла
КонецПроцедуры

Процедура ПолучитьДлиныНаибольшихОбщихПрефиксов(Тень, Ранг, Путь, Рост, Плюс = 0) Экспорт // алгоритм Касаи
	
	Для i = 0 По Ранг.ВГраница() Цикл Путь[Ранг[i]] = i	КонецЦикла;
	
	Для i = 0 По Ранг.ВГраница() Цикл ж = ?(Ранг[i] < Ранг.ВГраница(), Путь[Ранг[i] + 1], Ранг.Количество()); Пока Макс(i, ж) + Плюс < Тень.Количество() И Тень[i + Плюс] = Тень[ж + Плюс] Цикл Плюс = Плюс + 1 КонецЦикла; Рост[i] = Плюс; Плюс = Макс(0, Плюс - 1) КонецЦикла
	
КонецПроцедуры

Функция ОтборМестПовторов(Ранг, Путь, Рост) Экспорт
	Ответ = Повторы.ВыгрузитьКолонки();
	Для i = 0 По Рост.ВГраница() Цикл 
		у = Макс(0, i - 1); 
		j = Мин(i + 1, Рост.ВГраница()); 
		Если Порог < Рост[i] И Рост[у] <= Рост[i] И Рост[i] >= Рост[j] Тогда 
			Клон = Ответ.Добавить();
			Клон.Место = i;
			Клон.Рост  = Рост[i]; 
			Клон.Копия = Путь[Ранг[i] + 1]
		КонецЕсли 
	КонецЦикла;
	Возврат Ответ
КонецФункции

Функция ОтносительноМодуля(Знач Место)
	Для Каждого Строка Из Модули Цикл
		Если Строка.Размер >= Место + 1 Тогда
			Возврат Новый Структура("Файл, Строка", Строка.ИмяМодуля, Место + 1)
		КонецЕсли;
		Место = Место - Строка.Размер
	КонецЦикла
КонецФункции

Функция Расшифровка(Повтор, ТипФайла=".txt", Кодировка="ANSI") Экспорт
	
	Модуль1 = ОтносительноМодуля(Повтор.Место);
	Модуль2 = ОтносительноМодуля(Повтор.Копия);
	
	Детали = Новый Структура;
	Детали.Вставить("Файл1", Модуль1.Файл);
	Детали.Вставить("Строка1", Модуль1.Строка);
	Детали.Вставить("Файл2", Модуль2.Файл);
	Детали.Вставить("Строка2", Модуль2.Строка);
	
	ТекстМодуля = Новый ЧтениеТекста(ПутьВыгрузки + "\" + Модуль1.Файл + ТипФайла, ПолучитьКодировкуТекста(Кодировка) );
	
	Строки = ТекстМодуля.Прочитать();
	Текст = "";
	Для i = 0 По Повтор.Рост - 1 Цикл
		Текст = Текст + СтрПолучитьСтроку(Строки, Модуль1.Строка + i) + Символы.ПС
	КонецЦикла;
	Детали.Вставить("Текст", Текст);
	Возврат Детали
	
КонецФункции

//+++ 28.11.2018
функция ПолучитьТаблКодировок() экспорт
 	возврат ТаблКодировок;
КонецФункции

функция ПолучитьКодировкуТекста(Кодировка="ANSI")
	ТаблКодировок = ПолучитьТаблКодировок();
	стр1 = ТаблКодировок.Найти(Кодировка,"Кодировка");
	возврат стр1.КодировкаТекста;
КонецФункции	

   ТаблКодировок = новый ТаблицаЗначений;
	ТаблКодировок.Колонки.Добавить("Кодировка"); ТаблКодировок.Колонки.Добавить("КодировкаТекста");
	стр1 = ТаблКодировок.Добавить(); стр1.Кодировка = "ANSI"; стр1.КодировкаТекста = КодировкаТекста.ANSI;
	стр1 = ТаблКодировок.Добавить(); стр1.Кодировка = "UTF8"; стр1.КодировкаТекста = КодировкаТекста.UTF8;
	стр1 = ТаблКодировок.Добавить(); стр1.Кодировка = "OEM"; стр1.КодировкаТекста = КодировкаТекста.OEM;
	стр1 = ТаблКодировок.Добавить(); стр1.Кодировка = "Системная"; стр1.КодировкаТекста = КодировкаТекста.Системная;
	//стр1 = ТаблКодировок.Добавить(); стр1.Кодировка = "UTF16"; стр1.КодировкаТекста = КодировкаТекста.UTF16;
