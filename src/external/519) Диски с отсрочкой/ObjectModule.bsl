Процедура Сформировать(ТабОтчета) Экспорт
//получим средний остаток
ТабНомН = Новый ТаблицаЗначений;
ТабНомНН = Новый ТаблицаЗначений;
текСхема = ПолучитьМакет("Макет");
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(текСхема,текСхема.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ТабНомН);// выгружать в таблицу значений
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);

// получим коэф. оборачиваемости

  //передадим таблицу в другую схему	
	СхемаКомпоновкиДанных = ПолучитьМакет("макеткоф");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,СхемаКомпоновкиДанных.НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешнийНаборДанных = Новый Структура("ТабНомН", ТабНомН);
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешнийНаборДанных, ,истина);
    ПроцессорВывода.УстановитьОбъект(ТабНомНН);// выгружать в таблицу значений
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);

                                           
   ТабНомН = ТабНомНН.Скопировать();


  //Проверим на дату прихода
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.КоличествоОстаток КАК Коэфф
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗакупкиОбороты.Номенклатура
		|ПОМЕСТИТЬ ПриходЗапоследнийКвартал
		|ИЗ
		|	РегистрНакопления.Закупки.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Регистратор,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ВТ КАК ВТ)
		|				И ДоговорКонтрагента.ВалютаВзаиморасчетов <> &Рубли) КАК ЗакупкиОбороты
		|ГДЕ
		|	ЗакупкиОбороты.Регистратор ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакупкиОбороты.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Номенклатура,
		|	ВТ.Коэфф
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриходЗапоследнийКвартал КАК ПриходЗапоследнийКвартал
		|		ПО ВТ.Номенклатура = ПриходЗапоследнийКвартал.Номенклатура
		|ГДЕ
		|	ВТ.Коэфф <= &ВерхнийПредел
		|	И ПриходЗапоследнийКвартал.Номенклатура ЕСТЬ NULL 
		|	И ВТ.Номенклатура.НоменклатурнаяГруппа В (&НоменклатурнаяГруппа)";

	Запрос.УстановитьПараметр("ДатаНач", ДобавитьМесяц(НачалоДня(ТекущаяДата()),-3));
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ВерхнийПредел",ВерхнийПредел);
	Запрос.УстановитьПараметр("Рубли",Константы.ВалютаРегламентированногоУчета.Получить());

	Список = Новый СписокЗначений();
	список.Добавить(справочники.НоменклатурныеГруппы.НайтиПоКоду("00026"));//литые
	список.Добавить(справочники.НоменклатурныеГруппы.НайтиПоКоду("00022")); //кованные
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа",Список);
	
	Запрос.УстановитьПараметр("Таб", ТабНомН);
	ТабНомН = Запрос.Выполнить().Выгрузить();
	
// уберем номеклатуру, которой на остатках меньше предельно допустимого мин	
	 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.Номенклатура,
		|	Таб.Коэфф
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоЗаказано,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК СвободныйОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаОстатков,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ВТ КАК ВТ)
		|				И Склад.ЗапретитьИспользование = ЛОЖЬ
		|				И Склад.Транзитный = ЛОЖЬ) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
		|				,
		|				Номенклатура В
		|						(ВЫБРАТЬ
		|							ВТ.Номенклатура
		|						ИЗ
		|							ВТ КАК ВТ)
		|					И ЗаказПокупателя.Проверен
		|					И ЗаказПокупателя.Транзит = ЛОЖЬ) КАК ЗаказыПокупателейОстатки
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > &МинимальноДопустимыйОстаток
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Номенклатура,
		|	ВТ.Коэфф КАК Коэфф,
		|	Остатки.СвободныйОстаток,
		|	ВТ.Номенклатура.Типоразмер.Диаметр КАК Диаметр,
		|	ВТ.Номенклатура.Типоразмер.Ширина КАК Ширина,
		|	ВТ.Номенклатура.Типоразмер.Высота КАК Высота,
		|	ВТ.Номенклатура.Типоразмер.КоличествоОтверстий КАК КолвоОтверстий,
		|	ВТ.Номенклатура.Типоразмер.PCD КАК PCD,
		|	ВТ.Номенклатура.Типоразмер.Вылет КАК Вылет,
		|	ВТ.Номенклатура.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы
		|ИЗ
		|	Остатки КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО (ВТ.Номенклатура = Остатки.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Коэфф";

		
		
		
	
		


		
		
		
		
	Запрос.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	Запрос.УстановитьПараметр("МинимальноДопустимыйОстаток",МинимальныйОстаток);
	Запрос.УстановитьПараметр("Таб", ТабНомН);
	ТабНомН = Запрос.Выполнить().Выгрузить();
	
   табномН.Колонки.Добавить("Цена");
   ТабЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(контрагент, ТабномН.ВыгрузитьКолонку("Номенклатура"));//Цены ШинИнвест(Челябинск)   
   Для каждого ст из ТабЦен Цикл
	  строка = ТабНомН.Найти(ст.номенклатура,"Номенклатура"); 
	  строка.цена = ст.минимальнаяЦена;	
	конецЦикла;
   ТабНомН.Сортировать("Номенклатура");
	
   ТабОтчета = Новый ТабличныйДокумент;
   Макет = получитьМакет("МакетОтчета");
   ОбластьШапка= Макет.ПолучитьОбласть("Шапка");
   ТабОтчета.Вывести(ОбластьШапка);
   ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
   ЕщеНеДелили = Истина;
   ТабНомН.Сортировать("Коэфф");
   Для каждого стр из ТабНомН Цикл
	   Если стр.коэфф>СреднийПредел и ЕщеНеДелили Тогда
		   //ОбластьРазрыв = Макет.ПолучитьОбласть("Разрыв");
		   //ТабОтчета.Вывести(ОбластьРазрыв);
		   ТабОтчета.Показать();
           ТабОтчета = Новый ТабличныйДокумент;
		   ТабОтчета.Вывести(ОбластьШапка);
		   ещеНеДелили = Ложь;   
	   конецЕсли;
	   
	ОбластьСтрока.Параметры.Заполнить(стр);
    ОбластьСтрока.Параметры.код = стр.номенклатура.Код;
    ТабОтчета.Вывести(Областьстрока);
   конецЦикла;
	ТабОтчета.Показать();
	
	
Конецпроцедуры	