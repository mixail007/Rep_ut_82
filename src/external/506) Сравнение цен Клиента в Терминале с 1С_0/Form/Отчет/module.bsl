
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_adb554ba-862b-4b0a-b840-f8473799a3f6", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)

	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("Отчет1Настройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	
	Если ТаблЦенТерминал.Количество()>0 тогда
		Если Вопрос("Загрузить все цены заново?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
			ДействияФормыОчистить(неопределено);
	    КонецЕсли;
	КонецЕсли;
	
	//Предупреждение("Сравнение всех цен - длительная операция.
	//				|Пожалуйста подождите...",5);
	
	
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	время0=ТекущаяУниверсальнаяДатаВМиллисекундах();	
	N = ОтчетВывести();
	время1=ТекущаяУниверсальнаяДатаВМиллисекундах();	
	
	Если N=0 тогда
		Предупреждение("Нет различий в ценах!");
	иначе
		Предупреждение("Обнаружено "+строка(N)+" различий в ценах!");
	КонецЕсли;	
	сообщить( "Общее время сравнения "+строка((время1-время0)/1000)+" сек.");	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Функция ОтчетВывести() экспорт
N = -1;	
	Если ТаблЦенТерминал.Количество()=0 тогда
		ДействияФормыЗагрузить(неопределено);
		
		N =  ТаблЦенТерминал.Количество();
		Если N=0 тогда //04.09.2017
			Предупреждение("НЕТ персональных цен Клиента в системе Terminal!
			|Клиенту показываются цены по 3-ей категории.", 60);
			Возврат -10;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТаблЦен1С.Количество()=0 тогда
		ДействияФормыЦены1С(неопределено);	
	КонецЕсли;	
	
	Если ФлагСтандарт1С тогда
		файл0 = ПолучитьИмяВременногоФайла("t");
      	файл1 = ПолучитьИмяВременногоФайла("1с");
		
		таблдок0 = новый ТабличныйДокумент;
		N =  ТаблЦенТерминал.Количество();
				
		для i=1 по N цикл
			ОбработкаПрерыванияПользователя();
		таблдок0.Область(i,1,i,1).Текст = ТаблЦенТерминал[i-1].ProductId;
		таблдок0.Область(i,2,i,2).Текст = ТаблЦенТерминал[i-1].Price;
		если i%1000=0 тогда
			Состояние("Обработано "+строка(i)+" из "+строка(N)+" строк...", цел(i*100/N));
		КонецЕсли;	
		КонецЦикла;
		таблдок0.Записать( файл0);
		сообщить("Записан файл: "+файл0);
		таблдок0 = неопределено;
		
		таблдок1 = новый ТабличныйДокумент;
		N = ТаблЦен1С.Количество();
		для i=1 по N цикл
			ОбработкаПрерыванияПользователя();
		таблдок1.Область(i,1,i,1).Текст = ТаблЦен1С[i-1].Код;
		таблдок1.Область(i,2,i,2).Текст = ТаблЦен1С[i-1].Цена;
		таблдок1.Область(i,3,i,3).Текст = ТаблЦен1С[i-1].Приоритет;
		если i%1000=0 тогда
			Состояние("Обработано "+строка(i)+" из "+строка(N)+" строк...", цел(i*100/N));
		КонецЕсли;	
		КонецЦикла;
		таблдок1.Записать(файл1);
		сообщить("Записан файл: "+файл1);
		таблдок1 = неопределено;
		
		сообщить(строка(ТекущаяДата())+" Начало операции сравнения данных...");
		Сравнение = новый СравнениеФайлов;
		Сравнение.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;
		Сравнение.ПервыйФайл = файл0;
		Сравнение.ВторойФайл = файл1;
		
		Сравнение.ПоказатьРазличия();
		сообщить(строка(ТекущаяДата())+" сравнения данных завершено.");
		
		возврат - 22;
	КонецЕсли;
	
	//===============через запрос с отборами==============================
	//ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	Запрос1 = новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ
	                |	Ценыt.ProductId КАК Код,
	                |	Ценыt.Price КАК Цена
	                |ПОМЕСТИТЬ ВТ_ЦеныТ
	                |ИЗ
	                |	&ТаблЦенТерминал КАК Ценыt
	                |;
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Цены1С.Код КАК Код,
	                |	Цены1С.Цена КАК Цена,
	                |	Цены1С.Приоритет КАК Приоритет
	                |ПОМЕСТИТЬ ВТ_Цены1С
	                |ИЗ
	                |	&ТаблЦен1С КАК Цены1С
	                |;
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	спрНоменклатура.ВидТовара КАК ВидТовара,
	                |	спрНоменклатура.Код КАК Код,
	                |	спрНоменклатура.Номенклатура,
	                |	спрНоменклатура.Представление,
	                |	ЕСТЬNULL(ЦеныТ.Цена, 0) КАК ЦенаТ,
	                |	ЕСТЬNULL(Цена1С.Цена, 0) КАК Цена1С,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ЦеныТ.Цена, 0) > 0
	                |				И ЕСТЬNULL(Цена1С.Цена, 0) = 0
	                |			ТОГДА 1
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК ТолькоВтерминале,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ЦеныТ.Цена, 0) = 0
	                |				И ЕСТЬNULL(Цена1С.Цена, 0) > 0
	                |			ТОГДА 1
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК ТолькоВ1С,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ЦеныТ.Цена, 0) = ЕСТЬNULL(Цена1С.Цена, 0)
	                |			ТОГДА 1
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Одинаково,
	                |	ВЫБОР
	                |		КОГДА ЕСТЬNULL(ЦеныТ.Цена, 0) <> ЕСТЬNULL(Цена1С.Цена, 0)
	                |			ТОГДА 1
	                |		ИНАЧЕ 0
	                |	КОНЕЦ КАК Различных,
	                |	ЕСТЬNULL(ЦеныТ.Цена, 0) - ЕСТЬNULL(Цена1С.Цена, 0) КАК Разница,
					|	Цена1С.Приоритет как Приоритет
	                |ИЗ
	                |	ВТ_ЦеныТ КАК ЦеныТ
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			спрНом.Код КАК Код,
	                |			спрНом.Ссылка КАК Номенклатура,
	                |			спрНом.ВидТовара КАК ВидТовара,
	                |			спрНом.Наименование КАК Представление
	                |		ИЗ
	                |			Справочник.Номенклатура КАК спрНом
					
					|		ГДЕ спрНом.ЭтоГруппа = ЛОЖЬ
					
		 			|//ОтборПоКодам  	И (спрНом.Код в (выбрать Код из ВТ_ЦеныТ)
					|//ОтборПоКодам		   ИЛИ спрНом.Код в (выбрать Код из ВТ_Цены1С) )
						
					|) КАК спрНоменклатура
	                |		ПО ЦеныТ.Код = спрНоменклатура.Код
	                |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                |			ВТ_Цены1С.Код КАК Код,
	                |			ВТ_Цены1С.Цена КАК Цена,
	               |			ВТ_Цены1С.Приоритет КАК Приоритет
	                |		ИЗ
	                |			ВТ_Цены1С КАК ВТ_Цены1С) КАК Цена1С
	                |		ПО ЦеныТ.Код = Цена1С.Код
	                |ГДЕ
	                |	ЕСТЬNULL(ЦеныТ.Цена, 0) <> ЕСТЬNULL(Цена1С.Цена, 0)
					|//ГДЕОТБОР
	                |
					|//УПОРЯДОЧИТЬ ПО ВидТовара
					|
	                |ИТОГИ
	                |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Код),
	                |	СУММА(ТолькоВтерминале),
	                |	СУММА(ТолькоВ1С),
	                |	СУММА(Одинаково),
	                |	СУММА(Различных),
	                |	СУММА(Разница)
	                |ПО
	                |	ВидТовара
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 								
	Запрос1.УстановитьПараметр("ТаблЦенТерминал", ЭтаФорма.ТаблЦенТерминал );   // 16.09.2016
	Запрос1.УстановитьПараметр("ТаблЦен1С",       ЭтаФорма.ТаблЦен1С );         // 16.09.2016

	если ЭтаФорма.ТаблЦенТерминал.Количество()<10000 и ЭтаФорма.ТаблЦен1С.Количество()<10000 тогда
		Запрос1.Текст = стрЗаменить(Запрос1.Текст,	"//ОтборПоКодам","");
	КонецЕсли;
	
//========================По настройке===========================================	
	запрос0 = ПостроительОтчетаОтчет.ПолучитьЗапрос();
	текстГде = запрос0.Текст;
	i=найти(текстГде,"ГДЕ"); 	
	
	текстГде = стрЗаменить(текстГде, "Ссылка.", "Номенклатура.");
	
	если i>0 тогда
		текстГде = прав(текстГде, стрДлина(текстГде) - i +1);
		для каждого парам1 из запрос0.Параметры цикл
	 		Запрос1.УстановитьПараметр( строка(парам1.Ключ), парам1.Значение );
	 	КонецЦикла;
		
		текстГде = стрЗаменить(текстГде, "ГДЕ", "И ");
		//ГДЕ спрНоменклатура.Ссылка.ВидТовара = &Параметр1
		Запрос1.Текст = стрЗаменить(Запрос1.Текст,	"//ГДЕОТБОР", текстГде);
	КонецЕсли;

	j=найти(текстГде,"УПОРЯДОЧИТЬ ПО");
	если j>0 тогда // нашу сортировку убираем!
		если i=0 тогда
		текстГде = прав(текстГде, стрДлина(текстГде) - j +1);
		Запрос1.Текст = стрЗаменить(Запрос1.Текст,	"//УПОРЯДОЧИТЬ ПО ВидТовара", текстГде);
		КонецЕсли;
	Иначе
		Запрос1.Текст = стрЗаменить(Запрос1.Текст,	"//УПОРЯДОЧИТЬ ПО", "УПОРЯДОЧИТЬ ПО");
	КонецЕсли;
	
	Сообщить(Строка(ТекущаяДата())+" Начало сравнения данных...");	
	рез = Запрос1.Выполнить();
	
	Сообщить(Строка(ТекущаяДата())+" Вывод (раскраска) данных...");	
	ДеревоРазличий  = рез.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	для каждого стр1 из ДеревоРазличий.Строки цикл
		ЭлементыФормы.ДеревоРазличий.Развернуть(стр1, Истина);
	КонецЦикла;

	Сообщить(Строка(ТекущаяДата())+" Вывод данных завершен.");	
	
	если ДеревоРазличий.Строки.Количество()=0 тогда
		N=0;
	иначе	
		N = 0;
		для каждого стр1 из ДеревоРазличий.Строки цикл // по видам товаров
			N = N + стр1.Различных;
		КонецЦикла;
	КонецЕсли;

	возврат N;
	
КонецФункции

Процедура ОтчетИнициализация() экспорт
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст = "ВЫБРАТЬ
	                               |	спрНоменклатура.Код КАК Код,
								   |	спрНоменклатура.ссылка КАК Номенклатура,
	                               |	спрНоменклатура.Наименование как Представление
	                               |{ВЫБРАТЬ
	                               |	Код,
								   |	спрНоменклатура.Наименование как Представление,
                                   |	спрНоменклатура.ссылка.* КАК Номенклатура}
	                               |ИЗ
	                               |	Справочник.Номенклатура КАК спрНоменклатура
							//  |			РегистрНакопления.ТоварыНаСкладах.Остатки(,склад.ЗапретитьИспользование=ЛОЖЬ ) КАК спрНоменклатура
				
	                               |{ГДЕ
	                               |	спрНоменклатура.ссылка.* КАК Номенклатура}
	                               |{УПОРЯДОЧИТЬ ПО
	                               |	спрНоменклатура.ссылка.*}
	                               |ИТОГИ
	                               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Код)
								   |ПО
	                               |	Номенклатура
	                               |{ИТОГИ ПО
	                               |	спрНоменклатура.ссылка.* КАК Номенклатура}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_adb554ba-862b-4b0a-b840-f8473799a3f6");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры


функция ПолучитьЦеныКлиентаИзТерминала(КодКлиента="93273")
//HTTPS=Истина; //04.09.2017
Соединение = Новый HTTPСоединение("terminal.yst.ru",,"admin","cegthvfhbj",, HTTPS );   
ТабЗнач = новый ТаблицаЗначений;
Если Соединение = Неопределено Тогда
	Возврат ТабЗнач;
КонецЕсли;

Заголовки = Новый Соответствие();

ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
Ресурс = "/api/prices?partnerId="+КодКлиента;
Заголовки.Вставить("HASH", "D5790E89580D8B75927F804E738CFCE");  
Заголовки.Вставить("Accept", "application/xml");  

HTTPзапрос = Новый HTTPЗапрос(Ресурс, Заголовки);
HTTPОтвет = Соединение.Получить( HTTPзапрос, ИмяФайлаРезультата);
	
Соединение = Неопределено; // разорвать соединение

 //ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 //ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 //текстРезультата = ТекстовыйФайлОтвет.ПолучитьТекст();
 //ТекстовыйФайлОтвет.Показать();
 
 #Если Клиент тогда 
	 если HTTPОтвет.КодСостояния=200 тогда
		сообщить("Данные успешно получены с сайта..."); 
	 иначе 
 	 	сообщить("Статус ответа сайта: "+строка(HTTPОтвет.КодСостояния));
	 КонецЕсли;
 #КонецЕсли

 
 Если ТаблЦенТерминал.Количество()>0 тогда	 
	 ТаблЦенТерминал.Очистить();
 КонецЕсли;	  
 
  табЗнач = разобратьXMLвТабЗнач(ИмяФайлаРезультата);
  //ЭтаФорма.ТаблЦенТерминал = табЗнач.Скопировать();
  для каждого стр1 из табЗнач цикл
 	 стр2 = ТаблЦенТерминал.Добавить();
	  ЗаполнитьЗначенияСвойств(стр2, стр1);
 КонецЦикла;

  #Если Клиент тогда 
 сообщить("Получено: "+строка(ТабЗнач.Количество())+" строк с ценами товаров.");
 #КонецЕсли

 возврат 0;
 
 КонецФункции
 
 
 
 функция разобратьXMLвТабЗнач(ПутьКФайлу)
	 
	 Чтение = Новый ЧтениеXML; 
	 Чтение.ОткрытьФайл(ПутьКФайлу); 

 	 рез = 0;
	 ТабЗнач = новый ТаблицаЗначений;
	 ТабЗнач.Колонки.Добавить("ProductId");
	 ТабЗнач.Колонки.Добавить("Price");
	 
	 
Пока Чтение.Прочитать() Цикл 
      ОбработкаПрерыванияПользователя();
		 
      Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
        ИмяУзла = Чтение.Имя; 
		если ИмяУзла="PartnerId" тогда
			стр1 = ТабЗнач.Добавить();
			 Если табЗнач.Количество()%1000=0 тогда
			 Состояние("Обработано "+строка(табЗнач.Количество())+" строк");
			 КонецЕсли;	 
		КонецЕсли;
		// Атрибуты элементов можно читать только если текущая часть -  
        // начало элемента  
        Пока Чтение.ПрочитатьАтрибут() Цикл 
			// Прочитать данные узла атрибута.  
			ТипУзла = Чтение.ТипУзла; 
			ИмяАттрибута = Чтение.Имя; 
            ЗначениеАттр = Чтение.Значение; 
		КонецЦикла;

   	 ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда 
        // В примере просто выводим текст в окно сообщений.  
       // Сообщить("Текст:" + Чтение.Значение); 
		
	   		попытка 
		    знач1="";
				если ИмяУзла = "Price" тогда
				знач1 = Чтение.Значение; //стрЗаменить(Чтение.Значение,".", ",");
				стр1.Price = число( знач1 );
			  иначеесли ИмяУзла = "ProductId" тогда  // 7 символов=цифр должно быть!
				знач1 =формат( число(Чтение.Значение), "ЧЦ=7; ЧН=0000000; ЧВН=; ЧГ=0");
				стр1.ProductId = знач1;
			  КонецЕсли;	
			исключение
				сообщить("Нельзя записать '"+ИмяУзла+"' = "+строка(знач1) );
				рез = рез+1;
			КонецПопытки;

 //   ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
     КонецЕсли; 
 КонецЦикла;
    возврат табЗнач;
КонецФункции

 функция получитьЦеныКлиента1С(Клиент, списокТов = неопределено)
	 
	 ДатаЦены=неопределено;
	 
	 если Клиент.ДатаСрезаЦен>'00010101' тогда
		 ДатаЦены=Клиент.ДатаСрезаЦен;
	 КонецЕсли;	
	 	 
    флЭкспорт = Клиент.Экспорт и Клиент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов.Код<>"643";
	Если флЭкспорт тогда
		
		таблЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСвЭкспорт( Клиент, списокТов, ложь, неопределено, ДатаЦены );
		
	Иначе
		
	  //	ТекущаяПолитикаПравила = получитьПерсПравила(Клиент);
	  //сообщить(строка(ТекущаяДата())+" Получены "+строка(ТекущаяПолитикаПравила.Количество())+" перс.правил клиента");
		 
		таблЗнач = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв( Клиент, списокТов, ложь, неопределено, ДатаЦены);
		 
	КонецЕсли;
	сообщить(строка(ТекущаяДата())+" Получены "+строка(таблЗнач.Количество())+" цен 1C по товарам из Tereminal.");
	 
	 
	 услПредоплаты = (      Клиент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") 
	 					или Клиент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ПредоплатаПоСчетам     //14.08.2017
						или Клиент.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФакторингПредоплата ); //16.05.2017

	 таблЗнач.Колонки.Добавить("Цена");
	 Если услПредоплаты 
		 Тогда назвЦены ="ЦенаСоСкидкойПредоплаты";
	 	 Иначе назвЦены = "МинимальнаяЦена";
	 КонецЕсли;
	 Цены1 = таблЗнач.ВыгрузитьКолонку(назвЦены);
	 таблЗнач.ЗагрузитьКолонку(Цены1, "Цена");
	 сообщить(строка(ТекущаяДата())+" Вывод "+строка(таблЗнач.Количество())+" цен по товарам завершен.");
	 
	Если ТаблЦен1С.Количество()>0 тогда	 
	 ТаблЦен1С.Очистить();
 	КонецЕсли;	
 
	 для каждого стр1 из таблЗнач цикл
		стр2 = ТаблЦен1С.Добавить();
		ЗаполнитьЗначенияСвойств(стр2, стр1);
	КонецЦикла;	
	 
	 возврат 0;
	 
 КонецФункции	 
 
 функция получитьПерсПравила(Клиент)
	 
	 СтруктураПравил = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв( Клиент, , Истина);
	 
	 i=0; // удаляем общие правила!
	 пока i<СтруктураПравил.Правила.Количество() цикл
		 если СтруктураПравил.Правила[i].Приоритет>1000 тогда
			 СтруктураПравил.Правила.Удалить(i);
		 иначе i=i+1;
		 КонецЕсли;	 
	 КонецЦикла;
	 
	СтруктураПравил.Правила.Колонки.Удалить("Правило");
	СтруктураПравил.Правила.Колонки.Удалить("ОтпускнаяЦена");
	 
 	 возврат СтруктураПравил.Правила;
 КонецФункции
 
 Процедура ДействияФормыЗагрузить(Кнопка)
	Если Клиент.Пустая() тогда
		Предупреждение("Не выбран Покупатель!");
		возврат;
	КонецЕсли;
	рез = ПолучитьЦеныКлиентаИзТерминала(Клиент.Код);
КонецПроцедуры

Процедура ДействияФормыЦены1С(Кнопка) 
	Если Клиент.Пустая() тогда
		Предупреждение("Не выбран Покупатель!");
		возврат;
	КонецЕсли;
	Если ТаблЦенТерминал.Количество()>0 тогда
		СписТов = получитьТоварыТерминал();
	иначе
		списТов = получитьСписокТоваровНаОстатках(); 
	КонецЕсли;	
	сообщить("Получен список из "+строка(списТов.Количество())+" товаров");
	состояние("Идет поиск различий цен по выбранным "+строка(списТов.Количество())+" товарам...");
 	рез = получитьЦеныКлиента1С(Клиент, списТов);
КонецПроцедуры

функция получитьТоварыТерминал()
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	спрНом.Ссылка КАК Тов
	                |ИЗ
	                |	Справочник.Номенклатура КАК спрНом
	                |ГДЕ
	                |	спрНом.Код В (&масКодов)";
	 
	 Запрос.УстановитьПараметр("масКодов", ТаблЦенТерминал.ВыгрузитьКолонку("ProductId") );
	 
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 спис= новый СписокЗначений;
	  спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Тов") );
	 возврат спис; 
КонецФункции

функция получитьСписокТоваровНаОстатках()
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТоварыНаСкладахОстатки.Номенклатура
	 |ИЗ
	 |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад.ЗапретитьИспользование = ЛОЖЬ) КАК ТоварыНаСкладахОстатки";
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 
	 спис = новый СписокЗначений;
	 спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Номенклатура") );
	 
	 возврат спис;
 КонецФункции
 
 
Процедура ДеревоРазличийПриПолученииДанных(Элемент, ОформленияСтрок)
	  i=0; 
	для каждого стр1 из ОформленияСтрок цикл
		ОбработкаПрерыванияПользователя();
		стр2 = стр1.ДанныеСтроки;
		
		//Если НЕ стр2.Одинаково тогда
		//	Если стр2.Различных>0 и стр2.ТолькоВтерминале=0 и стр2.ТолькоВ1С=0 тогда // ТОЛЬКО различие!
		//	стр1.ЦветФона = webЦвета.СветлоРозовый;
		//	ИначеЕсли стр2.ТолькоВтерминале>0 и стр2.ТолькоВ1С=0 тогда
		//	стр1.ЦветФона = webЦвета.ЦианСветлый; // (LightCyan)
		//	ИначеЕсли стр2.ТолькоВ1С>0 и стр2.ТолькоВтерминале=0 тогда
		//	стр1.ЦветФона = webЦвета.НейтральноЗеленый;
		//	Иначе
		//	стр1.ЦветФона = webЦвета.СветлоЖелтый;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если СокрЛП(стр2.ЦенаТ)<>"" и СокрЛП(стр2.Цена1С)<>"" тогда
			если число(стр2.ЦенаТ)<число(стр2.Цена1С) тогда
			стр1.ЦветФона = webЦвета.СветлоРозовый;
			Иначе //в 1С цена меньше... "холоднее"
			стр1.ЦветФона = webЦвета.ЦианСветлый;
			КонецЕсли;
		КонецЕсли;
		
		i=i+1;
		если i%100=0 тогда
			Состояние("Обработано "+строка(i)+" строк...");
		КонецЕсли;	
	КонецЦикла;	
		Состояние(" ");
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	ЭтаФорма.ТаблЦенТерминал.Очистить();
	ЭтаФорма.ТаблЦен1С.Очистить();
	ЭтаФорма.ДеревоРазличий.Строки.Очистить();
КонецПроцедуры

Процедура КлиентПриИзменении(Элемент)
	ДействияФормыОчистить(неопределено)
КонецПроцедуры

Процедура КлиентНачалоВыбора(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Истина;
		
КонецПроцедуры

Процедура ТаблЦенТерминалProductIdОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ТаблЦенТерминал.ТекущиеДанные;
	попытка
		эл = справочники.Номенклатура.НайтиПоКоду(текСтр.ProductId);
		если ЗначениеЗаполнено(эл) тогда
			эл.ПолучитьФорму("ФормаЭлемента").Открыть();
		иначе
			Предупреждение("Не найден товар с кодом '"+текСтр.ProductId+"'",30);
		КонецЕсли;
	исключение
	КонецПопытки;	
КонецПроцедуры


Процедура ТаблЦен1СКодОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	текСтр = ЭлементыФормы.ТаблЦен1С.ТекущиеДанные;
	попытка
		эл = справочники.Номенклатура.НайтиПоКоду(текСтр.Код);
		если ЗначениеЗаполнено(эл) тогда
			эл.ПолучитьФорму("ФормаЭлемента").Открыть();
		иначе
			Предупреждение("Не найден товар с кодом '"+текСтр.Код+"'",30);
		КонецЕсли;
	исключение
	КонецПопытки;	
КонецПроцедуры



