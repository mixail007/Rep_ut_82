
Перем мТекущиеНастройки;
Перем мТипМенеджера;
Перем мВидДоговора;
Перем мТипыДоговоров;
Перем мПодразделения;
Перем мМенеджерОтбор;
Перем мКонтрагенты;
Перем мИсключитьКонтрагентов;
Перем мГруппироватьПоПодразделениям;
Перем СекундВСутках;

Функция ПолучитьСтроркуОтборов()
	
	СтрокаВозврата = "";
	
	
	СтрокаВозврата = СтрокаВозврата + "Настройки и отбор:" + Символы.ПС + "Менеджеры: По ответственному лицу за договор;" + Символы.ПС;
	
	
	
	Если мВидДоговора.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Вид договора: ";
		
		Для каждого ВидДоговора Из мВидДоговора Цикл
			
			СтрокаВозврата = СтрокаВозврата + Строка(ВидДоговора) + "; ";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мТипыДоговоров.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Отбор по типам договоров: ";
		
		Для каждого ТипДоговора Из мТипыДоговоров Цикл
			
			СтрокаВозврата = СтрокаВозврата + ТипДоговора.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мПодразделения.Количество() > 0 Тогда
		
		СтрокаВозврата = СтрокаВозврата + "Отбор по подразделениям менеджера: ";
		
		Для каждого Подразделение Из мПодразделения Цикл
			
			СтрокаВозврата = СтрокаВозврата + Подразделение.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли; 
	
	Если мКонтрагенты.Количество() > 0 Тогда
		
		Если НЕ мИсключитьКонтрагентов Тогда
			
			СтрокаВозврата = СтрокаВозврата + "Отбор по контрагентам: ";
			
		Иначе
			
			СтрокаВозврата = СтрокаВозврата + "Исключены контрагенты: ";
			
		КонецЕсли; 
		
		
		Для каждого Контрагент Из мКонтрагенты Цикл
			
			СтрокаВозврата = СтрокаВозврата + Контрагент.Наименование + ";";
			
		КонецЦикла; 
		
		СтрокаВозврата = СтрокаВозврата + Символы.ПС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мМенеджерОтбор) Тогда
		Если ТипЗнч(мМенеджерОтбор) = Тип("СправочникСсылка.Пользователи") тогда
			СтрокаВозврата = СтрокаВозврата + "Отбор по менеджеру: "+строка(мМенеджерОтбор)+";";	
		иначе	
			СтрокаВозврата = СтрокаВозврата + "Отбор по менеджер"+?(мМенеджерОтбор.Количество()=1,"у","ам")+": ";	
			для i=0 по мМенеджерОтбор.Количество()-1 цикл
			СтрокаВозврата = СтрокаВозврата + строка(мМенеджерОтбор[i]) + "; ";
			КонецЦикла;
		КонецЕсли;;
	КонецЕсли; 
	
	Возврат СтрокаВозврата;
	
КонецФункции

Процедура ДействияФормыОтчетСформировать(Кнопка)
	
	Если ЗначениеНеЗаполнено(ДатаНач) Тогда
		Сообщить("Необходимо заполнить начальную дату отчета (Период с:)");		
		Возврат;
	ИначеЕсли ЗначениеНеЗаполнено(ДатаКон) Тогда
		Сообщить("Необходимо заполнить конечную дату отчета (по)");	
		Возврат;
	КОнецЕсли;	
	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	
	//Отчет(ТабДок);
//+++   18.05.2012
	началоВр = ТекущаяДата();
	
	Отчет(ТабДок);

	КонецВр = ТекущаяДата();
	ВремяВыполнения = Число(КонецВр - началоВр);
	
 	парамЗапроса = ?(Дебеторская=1,"Дебеторская","Кредиторская"); 
	Если ВремяВыполнения>0 тогда
		//общий модуль:  яштПрочее.ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки(
		
		//102 - просроченная/ 222 - непросроченная ДЗ/КЗ
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 222, ВремяВыполнения, "Кнопка [Сформировать] - "+парамЗапроса+" ("+строка(ВремяВыполнения)+" Сек.)" ); //!!!!
	КонецЕсли;	
	//+++)   18.05.2012

КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	
	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;              
	
	Если мВидДоговора.Количество() = 0 Тогда
		
		ИспользоватьВидДоговора = Ложь;
		
	Иначе
		
		ИспользоватьВидДоговора = Истина;
		
		ВидДоговораЗапроса = Новый Массив;
		ВидДоговораЗапроса.Очистить();
		
		Для каждого ВидДоговора Из мВидДоговора Цикл
			
			ВидДоговораЗапроса.Добавить(ВидДоговора);
			
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("ВидДоговора", ВидДоговораЗапроса);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипМенеджера", мТипМенеджера);
	
	Запрос.УстановитьПараметр("ДатаКон", НачалоДня(КонецДня(ДатаКон)+1));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	
	
	Если мПодразделения.Количество() > 0 Тогда
		
		ОтбиратьПоПодразделению = Истина;
		
	Иначе
		
		ОтбиратьПоПодразделению = Ложь;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ОсновноеПодразделение", мПодразделения);
	
	Если мТипыДоговоров.Количество() > 0 Тогда
		
		ОтбиратьПоТипам = Истина;
		
	Иначе
		
		ОтбиратьПоТипам = Ложь;
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТипДоговора", мТипыДоговоров);
	
	Если ЗначениеЗаполнено(мМенеджерОтбор) Тогда
		
		ОтбиратьПоМенеджеру = Истина;
		
	Иначе
		
		ОтбиратьПоМенеджеру = Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(мМенеджерОтбор) = Тип("СправочникСсылка.Пользователи") тогда
		мас1 = новый СписокЗначений;
		мас1.Добавить(мМенеджерОтбор);
		Запрос.УстановитьПараметр("МенеджерОтбор", мас1);
	иначе // список или массив	
		Запрос.УстановитьПараметр("МенеджерОтбор", мМенеджерОтбор);
	КонецЕсли;
	
	Если мКонтрагенты.Количество() > 0 Тогда
		
		ОтбиратьПоКонтрагентам = Истина;
		
	Иначе
		
		ОтбиратьПоКонтрагентам = Ложь;
		
	КонецЕсли; 
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьОбщийИтог = Макет.ПолучитьОбласть("ОбщиеИтоги");
	ОбластьМенеджер = Макет.ПолучитьОбласть("Менеджер");
	ОбластьКонтрагент = Макет.ПолучитьОбласть("Контрагент");
	ОбластьПодразделение = Макет.ПолучитьОбласть("Подразделение");
	ОбластьДоговорКонтрагента = Макет.ПолучитьОбласть("ДоговорКонтрагента");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьОтборов = Макет.ПолучитьОбласть("СписокОтборов");
	
	Запрос.УстановитьПараметр("Контрагенты", мКонтрагенты);
	Запрос.УстановитьПараметр("ПустоеПодразделение", Справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Дебиторская", Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	
	Если Дебеторская =1 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ Менеджер,Подразделение, Контрагент, ДоговорКонтрагента, 
		|СуммаУпр, Сделка , ВыставилиПеней,
		|Выбор когда Сделка=Null тогда &ПустаяДата
		|иначе Выбор когда Сделка.ДатаОтгрузки = &ПустаяДата тогда Сделка.Дата
		|	   иначе Сделка.ДатаОтгрузки
		|	   конец
		|Конец как ДатаОтгрузки,
		|ДатаОплаты, Просрочка, 
		//СуммаПросрочки, 
		|ВЫБОР КОГДА  Просрочка<0 тогда СуммаПросрочки иначе 0 Конец СуммаПросрочки,
		|ВЫБОР КОГДА  Просрочка<0 и Просрочка>=-7 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_А,
		|ВЫБОР КОГДА  Просрочка<-7 И Просрочка>=-14 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Б,
		|ВЫБОР КОГДА  Просрочка<-14 И Просрочка>=-21 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_В,
		|ВЫБОР КОГДА  Просрочка<-21 И Просрочка>=-28 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Г,
		|ВЫБОР КОГДА  Просрочка<-28 ТОГДА СуммаПросрочки ИНАЧЕ 0 КОНЕЦ Просрочка_Д
		|ИЗ 
		|(ВЫБРАТЬ
		| ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо) Менеджер,
		| ВЫБОР КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение) Есть NULL
		| ТОГДА ""Менеджеры без подразделений"" ИНАЧЕ ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение) КОНЕЦ
		|КАК Подразделение,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.Владелец) КАК Контрагент,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента) КАК ДоговорКонтрагента,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,0) КАК СуммаУпр,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка,ВыставилиПениПоСделке.Сделка) Сделка,
		|	ВЫБОР КОГДА ВыставилиПениПоСделке.Сделка ЕСТЬ NULL ТОгда 0 ИНАЧЕ ВыставилиПениПоСделке.Пени КОНЕЦ ВыставилиПеней,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|				ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|	КОНЕЦ 
		|	ИНАЧЕ
		|      ВЫБОР
		|		КОГДА ЕСТЬNULL(ВыставилиПениПоСделке.Сделка.ДатаОплаты, 0) = 0
		|				ИЛИ ВыставилиПениПоСделке.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВыставилиПениПоСделке.Сделка.Дата
		|		ИНАЧЕ ВыставилиПениПоСделке.Сделка.ДатаОплаты
		|	КОНЕЦ 
		|   КОНЕЦ
		|КАК ДатаОплаты,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	ВЫБОР
		|		КОГДА (РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|							ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|				КОНЕЦ, &ДатаКон, ДЕНЬ) <= 0) 
		//---------------!!!  <0 ----------------------------------------------------------------
		|			ТОГДА 
		|				РАЗНОСТЬДАТ(ВЫБОР
		|						КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|								ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|						ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		|					КОНЕЦ, &ДатаКон, ДЕНЬ)
		|		ИНАЧЕ 0
		|	КОНЕЦ 
		|   ИНАЧЕ
		| 0
		|	КОНЕЦ  КАК Просрочка,
		|   ВЫБОР КОГДА НЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка ЕСТЬ NULL ТОГДА 
		|	  ВЫБОР
		|		КОГДА (РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, 0) = 0
		|							ИЛИ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата
		|					ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты
		//---------------!!!  <0 ----------------------------------------------------------------
		|				КОНЕЦ, &ДатаКон, ДЕНЬ) <= 0) ИЛИ (ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата, 0) = 0) 
		|           ИЛИ (ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток " +  ?(Дебеторская = 2, ">", "<") + " 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
		|		ИНАЧЕ 0 
		|   КОНЕЦ
		|	ИНАЧЕ
		|	0
		|   КОНЕЦ КАК СуммаПросрочки,
		|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора,ВыставилиПениПоСделке.Сделка.ДоговорКонтрагента.ВидДоговора) ВидДоговора
		|ИЗ
		|//ИСТОЧНИК
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			СУММА(ВзаиморасчетовОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, СтрокаДоговорКонтрагентаВладелец) КАК ВзаиморасчетовОстатки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
		|			И (ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток " +  ?(Дебеторская = 2, "<", ">") + " 0)
		|  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|	Сделка,
		|	СУММА(ПениРасход)  Пени
		|	ИЗ
		|	РегистрНакопления.НачисленныеПени.Обороты(&ДатаНач,&ДатаКон,Регистратор,СтрокаКонтрагент)
		|	ГДЕ Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг  // т.е. заведомо не попадет списание
		|	СГРУППИРОВАТЬ ПО Сделка ) ВыставилиПениПоСделке
		| 	ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка=ВыставилиПениПоСделке.Сделка
		|	ГДЕ
		|	ИСТИНА
		|	" + ?(ИспользоватьВидДоговора, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора В (&ВидДоговора)", "") + "
		|	" + ?(ОтбиратьПоТипам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ТипДоговора В(&ТипДоговора)", "") + "
		|	" + ?(ОтбиратьПоПодразделению, " И   
		|(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение В (&ОсновноеПодразделение)
		|								ИЛИ ВыставилиПениПоСделке.Сделка.ДоговорКОнтрагента.ОтветственноеЛицо.ОсновноеПодразделение  В (&ОсновноеПодразделение))", "") + "
		|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
		|								ИЛИ ВыставилиПениПоСделке.Сделка.ДоговорКОнтрагента.ОтветственноеЛицо В (&МенеджерОтбор) )", "") + "
		|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + " )А
		|УПОРЯДОЧИТЬ ПО Контрагент.Наименование,
		|	Сделка.Дата ВОЗР
		|ИТОГИ
		|	МИНИМУМ(ДатаОтгрузки),
		|	Максимум(ДатаОплаты),
		|	МИНИМУМ(Просрочка),
		|	СУММА(СуммаУпр),
		|	СУММА(СуммаПросрочки),
		|	СУММА(ВыставилиПеней),
		|СУММА(Просрочка_А),
		|СУММА(Просрочка_Б),
		|СУММА(Просрочка_В),
		|СУММА(Просрочка_Г),
		|СУММА(Просрочка_Д)
		|ПО
		|	ОБЩИЕ,
		|	" + ?(мГруппироватьПоПодразделениям, "Подразделение,", "") + "
		|	Менеджер,
		|	Контрагент,
		|	ДоговорКонтрагента";
		
		Если УчитыватьВзаимныеОбязательства Тогда
			СтрокаЗамены ="(ВЫБРАТЬ ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,ЗачетВзаимныхОбязательств.ДоговорКонтрагента) ДоговорКонтрагента,
			| ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.Сделка,ЗачетВзаимныхОбязательств.Сделка) Сделка,
			| ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,0)-ЕстьNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов,0) СуммаУпрОстаток
			|ИЗ
			| РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон ) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ПОЛНОЕ СОЕДИНЕНИЕ 
			|			(ВЫБРАТЬ
			|			ДоговорКонтрагента,Сделка,
			|		СУММА(Сумма) СуммаУпрЗачетов
			|	ИЗ  Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга 
			|	ГДЕ Ссылка.Проведен И ВидЗадолженности = &Дебиторская И Ссылка.Дата<=&ДатаКон ИСсылкаКонтрагент
			|	СГРУППИРОВАТЬ ПО ДоговорКонтрагента,Сделка) ЗачетВзаимныхОбязательств
			|	ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента=ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			|	И ВзаиморасчетыСКонтрагентамиОстатки.Сделка=ЗачетВзаимныхОбязательств.Сделка
			|ГДЕ ЕстьNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,0)-ЕстьNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов,0) <>0) КАК ВзаиморасчетыСКонтрагентамиОстатки";
		Иначе
			СтрокаЗамены="	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон,СтрокаДоговорКонтрагентаВладелец) КАК ВзаиморасчетыСКонтрагентамиОстатки";
		КонецЕсли;
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"//ИСТОЧНИК", СтрокаЗамены);
		
		Если мКонтрагенты.Количество() > 0 Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаДоговорКонтрагентаВладелец", "ДоговорКонтрагента.Владелец в (&Контрагенты)");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаКонтрагент", "Контрагент в (&Контрагенты)");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИСсылкаКонтрагент", "И Ссылка.КонтрагентДебитор в (&Контрагенты)");
		ИНАЧЕ
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаДоговорКонтрагентаВладелец", "");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"СтрокаКонтрагент", "");
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ИСсылкаКонтрагент", "");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьЗаголовок);
		
		СтрокаОтбора = СокрЛП(ПолучитьСтроркуОтборов());
		СтрокаОтбора = ?(ДатаКон='00010101', "", "на дату: "+Формат(ДатаКон,"ДЛФ=DD")+"
		|") + СтрокаОтбора;
		  
		Если СтрДлина(СтрокаОтбора) > 0 Тогда
			
			ОбластьОтборов.Параметры.СтрокаОтборов = СтрокаОтбора;
			ТабДок.Вывести(ОбластьОтборов);
			
		КонецЕсли; 
		
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		ОбластьОбщийИтог.Параметры.Заполнить(ВыборкаОбщийИтог);
		
		//	Если мГруппироватьПоПодразделениям Тогда  (по подразделениям группировать всегда)
		
		ВыборкаПодразделение = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПодразделение.Следующий() Цикл
			
			ОбластьПодразделение.Параметры.Заполнить(ВыборкаПодразделение);
			ТабДок.Вывести(ОбластьПодразделение, ВыборкаПодразделение.Уровень(),, НЕ СвернутьГруппы);
			
			ВыборкаМенеджер = ВыборкаПодразделение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаМенеджер.Следующий() Цикл
				ОбластьМенеджер.Параметры.Заполнить(ВыборкаМенеджер);
				ТабДок.Вывести(ОбластьМенеджер, ВыборкаМенеджер.Уровень(),, НЕ СвернутьГруппы);
				
				ВыборкаКонтрагент = ВыборкаМенеджер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаКонтрагент.Следующий() Цикл
					ОбластьКонтрагент.Параметры.Заполнить(ВыборкаКонтрагент);
					ТабДок.Вывести(ОбластьКонтрагент, ВыборкаКонтрагент.Уровень(),, НЕ СвернутьГруппы);
					
					ВыборкаДоговорКонтрагента = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДоговорКонтрагента.Следующий() Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(ВыборкаДоговорКонтрагента);
						ТабДок.Вывести(ОбластьДоговорКонтрагента, ВыборкаДоговорКонтрагента.Уровень(),, НЕ СвернутьГруппы);
						
						ВыборкаДетали = ВыборкаДоговорКонтрагента.Выбрать();
						
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
							ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = ВыборкаДетали.Сделка;
							ОбластьДетальныхЗаписей.Параметры.Менеджер = "#" + Строка(ОбластьДетальныхЗаписей.Параметры.Менеджер);
							
							ЦветФона=WebЦвета.Белый;	
							
							
							Если ЗначениеЗаполнено(ВыборкаДетали.Просрочка) Тогда
								
								Если ВыборкаДетали.Просрочка<0 и ВыборкаДетали.Просрочка>=-7 Тогда // от 1 до 7-ми дней
									ЦветФона=WebЦвета.СветлоРозовый;	
								ИначеЕсли	ВыборкаДетали.Просрочка>=-28 Тогда  // от 8-ми до 28 дня
									ЦветФона=WebЦвета.Лосось;
								ИначеЕсли ВыборкаДетали.Просрочка<-28 Тогда  
									ЦветФона=WebЦвета.Красный;
								Иначе // долг УЖЕ просрочен
									ЦветФона=WebЦвета.Белый;
								КонецЕсли;
								
							Иначе // долг на пустой аналитике
								ЦветФона=WebЦвета.Белый;
							КонецЕсли;	
							
							Попытка
								//Если ВыборкаДетали.ДатаОплаты<ДатаКон тогда
								//	Продолжить; // не выводим просроченный долг!
								//КонецЕсли;
								
								ОбластьДетальныхЗаписей.Параметры.ДатаОплаты = Формат(ВыборкаДетали.ДатаОплаты, "ДЛФ=Д");
								ОбластьДетальныхЗаписей.Параметры.ДатаОтгрузки = Формат(?(ВыборкаДетали.Сделка.ДатаОтгрузки='00010101',ВыборкаДетали.Сделка.Дата,ВыборкаДетали.Сделка.ДатаОтгрузки), "ДЛФ=Д");//+++
								
							Исключение
								;
							КонецПопытки;
							
							Если ВыборкаДетали.Сделка = Неопределено Тогда
								
								
								Структура = Новый Структура;
								Структура.Вставить("Контрагент", ВыборкаДетали.Контрагент);
								Структура.Вставить("ДоговорКонтрагента", ВыборкаДетали.ДоговорКонтрагента);
								ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = Структура;
								
							КонецЕсли; 
							
							
							ОбластьДетальныхЗаписей.Область("R1C2:R1C9").ЦветФона=ЦветФона;
							Если  ВыборкаДетали.ВыставилиПеней>0 Тогда
								ОбластьДетальныхЗаписей.Область("R1C9:R1C9").ЦветФона=WebЦвета.БледноЗеленый;
							КОнецЕсли;
							ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень(),, НЕ СвернутьГруппы);
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		//	КонецЕсли;
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.ФиксацияСлева=3;
		
		ТабДок.Вывести(ОбластьОбщийИтог);
		
	Иначе // по кредиторской зад-сти
		
		
		ТЗДолги= Новый ТаблицаЗначений;	
		ТЗДолги.Колонки.Добавить("Контрагент");
		ТЗДолги.Колонки.Добавить("ДоговорКонтрагента");
		ТЗДолги.Колонки.Добавить("Сделка");
		ТЗДолги.Колонки.Добавить("ДатаОплаты");
		ТЗДолги.Колонки.Добавить("ОстатокДолга");
		
		
		
		Если УчитыватьВзаимныеОбязательства Тогда
			Запрос.Текст ="ВЫБРАТЬ
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение КАК Подразделение,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
			|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты КАК ДатаОплаты,
			|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) КАК СуммаУпр
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение КАК Подразделение,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
			|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
			|		ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты КАК ДатаОплаты,
			|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
			|	ИЗ
			|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|				СУММА(ВзаиморасчетовОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
			|			ИЗ
			|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ) КАК ВзаиморасчетовОстатки
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
			|			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
			|				И (ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток < 0)) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка КАК Сделка,
			|			СУММА(УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сумма) КАК СуммаУпрЗачетов
			|		ИЗ
			|			Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга КАК УправленческийЗачетВзаимныхОбязательствСуммыДолга
			|		ГДЕ
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Проведен
			|			И УправленческийЗачетВзаимныхОбязательствСуммыДолга.ВидЗадолженности = &Кредиторская
			|			И УправленческийЗачетВзаимныхОбязательствСуммыДолга.Ссылка.Дата <= &ДатаКон
			|		
			|		СГРУППИРОВАТЬ ПО
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.ДоговорКонтрагента,
			|			УправленческийЗачетВзаимныхОбязательствСуммыДолга.Сделка) КАК ЗачетВзаимныхОбязательств
			|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ЗачетВзаимныхОбязательств.ДоговорКонтрагента
			|			И ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ЗачетВзаимныхОбязательств.Сделка
			|ГДЕ
			|ИСТИНА
			|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
			|								)", "") + "
			|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + " 
			|	И ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) + ЕСТЬNULL(ЗачетВзаимныхОбязательств.СуммаУпрЗачетов, 0) <> 0";
		Иначе
			Запрос.Текст="ВЫБРАТЬ 
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение Подразделение,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо Менеджер,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец Контрагент,
			|ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
			|ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
			|ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты ДатаОплаты,
			|ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток  СуммаУпр
			|ИЗ
			| РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон ) КАК ВзаиморасчетыСКонтрагентамиОстатки
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|				СУММА(ВзаиморасчетовОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
			|			ИЗ
			|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон) КАК ВзаиморасчетовОстатки
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ВзаиморасчетовОстатки.ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа
			|			ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.ДоговорКонтрагента
			|				И ВзаиморасчетыСКонтрагентамиОстаткиНужногоТипа.СуммаУпрОстаток <0   
			|ГДЕ
			|ИСТИНА
			|	" + ?(ОтбиратьПоМенеджеру, " И 		(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо В (&МенеджерОтбор)
			|								)", "") + "
			|	" + ?(ОтбиратьПоКонтрагентам, "И ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец " + ?(мИсключитьКонтрагентов, "НЕ ", "") + "В (&Контрагенты)", "") + " 
			|";
		КонецЕсли;
		
		ТЗКредиторскаяЗадолженность=Запрос.Выполнить().Выгрузить();
		
		ЗапросПоЗаказамСГрафикамиОплат=Новый Запрос;
		ЗапросПоЗаказамСГрафикамиОплат.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон	, 	ДоговорКонтрагента.ВидДоговора = &СПоставщиком
		|			И ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.ГрафикОплаты КАК ПоступлениеТоваровУслугГрафикОплаты
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = ПоступлениеТоваровУслугГрафикОплаты.Ссылка.Сделка
		|		ГДЕ не ПоступлениеТоваровУслугГрафикОплаты.Ссылка Есть NULL
		|		УПОРЯДОЧИТЬ ПО Сделка.Дата";
		
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("ДатаКон",НачалоДня(КонецДня(ДатаКон)+1));
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		ЗапросПоЗаказамСГрафикамиОплат.УстановитьПараметр("СПоставщиком",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		СписокЗаказовСГрафикамиОплат= Новый СписокЗначений;
		СписокЗаказовСГрафикамиОплат.ЗагрузитьЗначения(ЗапросПоЗаказамСГрафикамиОплат.Выполнить().Выгрузить().ВыгрузитьКолонку("Сделка"));
		
		
		сч=0;
		Пока сч < ТЗКредиторскаяЗадолженность.Количество()  Цикл
			Если ТипЗнч(ТЗКредиторскаяЗадолженность[сч].Сделка)=Тип("ДокументСсылка.ЗаказПоставщику")
				И СписокЗаказовСГрафикамиОплат.НайтиПоЗначению(ТЗКредиторскаяЗадолженность[сч].Сделка)<>Неопределено 
				И ТЗКредиторскаяЗадолженность[сч].СуммаУпр<0 Тогда
				ПолучитьДолгиПоставщикуПоСделке(ТЗКредиторскаяЗадолженность[сч].Сделка,-ТЗКредиторскаяЗадолженность[сч].СуммаУпр,ТЗДолги);
				//Сообщить (Строка(ТЗКредиторскаяЗадолженность[сч].Сделка)+" "+ Строка(-ТЗКредиторскаяЗадолженность[сч].СуммаУпр-ТЗДолги.Итог("ОстатокДолга")));
				//Если -ТЗКредиторскаяЗадолженность[сч].СуммаУпр-ТЗДолги.Итог("ОстатокДолга")<>0 Тогда
				//	ТЗДолги.Очистить();
				//	ПолучитьДолгиПоставщикуПоСделке(ТЗКредиторскаяЗадолженность[сч].Сделка,-ТЗКредиторскаяЗадолженность[сч].СуммаУпр,ТЗДолги);
				//КонецЕсли;  
				// ТЗДолги.Очистить();
				ТЗКредиторскаяЗадолженность.Удалить(сч);
			Иначе
				сч=сч+1;
			КонецЕсли;	
		КонецЦикла;	
		
		
		
		
		Для каждого строкаТЗДолги ИЗ ТЗДолги Цикл
			строкаКредиторскаяЗадолженность=ТЗКредиторскаяЗадолженность.Добавить();
			строкаКредиторскаяЗадолженность.Подразделение=строкаТЗДолги.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение;
			строкаКредиторскаяЗадолженность.Менеджер=строкаТЗДолги.ДоговорКонтрагента.ОтветственноеЛицо;
			строкаКредиторскаяЗадолженность.Контрагент=строкаТЗДолги.Контрагент;
			строкаКредиторскаяЗадолженность.ДоговорКонтрагента=строкаТЗДолги.ДоговорКонтрагента;
			строкаКредиторскаяЗадолженность.Сделка=строкаТЗДолги.Сделка;
			строкаКредиторскаяЗадолженность.ДатаОплаты=строкаТЗДолги.ДатаОплаты;
			строкаКредиторскаяЗадолженность.СуммаУпр=-строкаТЗДолги.ОстатокДолга;
		КонецЦикла;
		
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("СуммаПросрочки");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_А");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Б");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_В");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Г");
		ТЗКредиторскаяЗадолженность.Колонки.Добавить("Просрочка_Д");
		
		ТЗКредиторскаяЗадолженность.ЗаполнитьЗначения(0,"Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		
		
		
		// Раскидаем  долги по срокам просрочки
		Для каждого строкаКредиторскаяЗадолженность ИЗ ТЗКредиторскаяЗадолженность Цикл
			Если ЗначениеЗаполнено(строкаКредиторскаяЗадолженность.ДатаОплаты)  Тогда
				//+++  поле просрочка будет "+", так как добавлен - 
				строкаКредиторскаяЗадолженность.Просрочка = (НачалоДня(КонецДня(ДатаКон)+1)- строкаКредиторскаяЗадолженность.ДатаОплаты)/СекундВСутках;
				Если строкаКредиторскаяЗадолженность.Просрочка <-28 Тогда // Дата оплаты раньше чем текущая дата
					строкаКредиторскаяЗадолженность.Просрочка_Д=строкаКредиторскаяЗадолженность.СуммаУпр;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаУпр;
				ИначеЕсли строкаКредиторскаяЗадолженность.Просрочка < 21 Тогда
					строкаКредиторскаяЗадолженность.Просрочка_Г=строкаКредиторскаяЗадолженность.СуммаУпр;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаУпр;
				ИначеЕсли строкаКредиторскаяЗадолженность.Просрочка < 14 Тогда
					строкаКредиторскаяЗадолженность.Просрочка_В=строкаКредиторскаяЗадолженность.СуммаУпр;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаУпр;
				ИначеЕсли строкаКредиторскаяЗадолженность.Просрочка < 7 Тогда	
					строкаКредиторскаяЗадолженность.Просрочка_Б=строкаКредиторскаяЗадолженность.СуммаУпр;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаУпр;
				ИначеЕсли строкаКредиторскаяЗадолженность.Просрочка <0 Тогда   
					строкаКредиторскаяЗадолженность.Просрочка_А=строкаКредиторскаяЗадолженность.СуммаУпр;
					строкаКредиторскаяЗадолженность.СуммаПросрочки=строкаКредиторскаяЗадолженность.СуммаУпр;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		ТаблицаОбщийИтог= ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаОбщийИтог.Свернуть(,"СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаПодразделений=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаПодразделений.Свернуть("Подразделение","СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаМенеджеры=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаМенеджеры.Свернуть("Подразделение,Менеджер","СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаКонтрагенты=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаКонтрагенты.Свернуть("Менеджер,Контрагент","СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаДоговоры=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаДоговоры.Свернуть("Менеджер,Контрагент,ДоговорКонтрагента","СуммаУпр,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		ТаблицаЗаказы=ТЗКредиторскаяЗадолженность.Скопировать();
		ТаблицаЗаказы.Свернуть("ДоговорКонтрагента,Сделка,ДатаОплаты","СуммаУпр,Просрочка,СуммаПросрочки,Просрочка_А,Просрочка_Б,Просрочка_В,Просрочка_Г,Просрочка_Д");
		
		ТабДок.Очистить();
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		
		ОбластьОбщийИтог.Параметры.Заполнить(ТаблицаОбщийИтог[0]);
		
		//Пока ВыборкаПодразделение.Следующий() Цикл
		Для каждого строкаПодразделение Из ТаблицаПодразделений Цикл
			
			ОбластьПодразделение.Параметры.Заполнить(строкаПодразделение);
			ТабДок.Вывести(ОбластьПодразделение,1 ,,НЕ СвернутьГруппы );
			
			ВыбранныеМенеджеры=ТаблицаМенеджеры.НайтиСтроки(Новый Структура("Подразделение",строкаПодразделение.Подразделение));
			Для каждого строкаМенеджер Из ВыбранныеМенеджеры Цикл
				
				ОбластьМенеджер.Параметры.Заполнить(строкаМенеджер);
				ТабДок.Вывести(ОбластьМенеджер, 2,, НЕ СвернутьГруппы);
				
				ВыбранныеКонтрагенты=ТаблицаКонтрагенты.НайтиСтроки(Новый Структура("Менеджер",строкаМенеджер.Менеджер));
				
				Для каждого  строкаКонтрагент ИЗ  ВыбранныеКонтрагенты Цикл
					ОбластьКонтрагент.Параметры.Заполнить(строкаКонтрагент);
					ТабДок.Вывести(ОбластьКонтрагент,3,,НЕ СвернутьГруппы );
					
					ВыбранныеДоговоры=ТаблицаДоговоры.НайтиСтроки(Новый Структура("Менеджер,Контрагент",строкаМенеджер.Менеджер,строкаКонтрагент.Контрагент));	
					
					Для каждого  строкаДоговор ИЗ  ВыбранныеДоговоры Цикл
						ОбластьДоговорКонтрагента.Параметры.Заполнить(строкаДоговор);
						ТабДок.Вывести(ОбластьДоговорКонтрагента,4,,НЕ СвернутьГруппы );
						
						ВыбранныеЗаказы=ТаблицаЗаказы.НайтиСтроки(Новый Структура("ДоговорКонтрагента",строкаДоговор.ДоговорКонтрагента));
						
						Для каждого  строкаЗаказ ИЗ  ВыбранныеЗаказы Цикл
							ОбластьДетальныхЗаписей.Параметры.Заполнить(строкаЗаказ);
							ОбластьДетальныхЗаписей.Параметры.РасшифровкаСделка = строкаЗаказ.Сделка;
							ОбластьДетальныхЗаписей.Параметры.ДатаОплаты = Формат(строкаЗаказ.ДатаОплаты, "ДЛФ=Д");
							
							ДнейПросрочено=0;
							Если не ЗначениеНеЗаполнено(строкаЗаказ.Просрочка) И строкаЗаказ.Просрочка<0 Тогда //+++
								Если строкаЗаказ.Просрочка>=-7 и строкаЗаказ.Просрочка<0 Тогда // от 1 до 7-ми дней
									ЦветФона=WebЦвета.СветлоРозовый;	
								ИначеЕсли	строкаЗаказ.Просрочка>=-28 Тогда  // от 8-ми до 21 дня
									ЦветФона=WebЦвета.Лосось;
								Иначе
									ЦветФона=WebЦвета.Красный;
								КонецЕсли;
							Иначе		
								ЦветФона=WebЦвета.Белый;
							КонецЕсли;
							ОбластьДетальныхЗаписей.Область("R1C2:R1C9").ЦветФона=ЦветФона;	
							
							ТабДок.Вывести(ОбластьДетальныхЗаписей,5,,НЕ СвернутьГруппы );	
							
							
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		
		
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		ТабДок.ФиксацияСлева=3;
		
		ТабДок.Вывести(ОбластьОбщийИтог);
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастроек = ПолучитьФорму("ФормаНастроек");
	ФормаНастроек.ТекущиеНастройки = мТекущиеНастройки;
	
	Если ФормаНастроек.ОткрытьМодально() <> Неопределено Тогда
		
		мТекущиеНастройки = ФормаНастроек.ТекущиеНастройки;
		мТипМенеджера = мТекущиеНастройки.Менеджер;
		мВидДоговора = мТекущиеНастройки.ВидДоговора;
		мТипыДоговоров = мТекущиеНастройки.ТипыДоговоров;
		мПодразделения = мТекущиеНастройки.Подразделения;
		мКонтрагенты = мТекущиеНастройки.Контрагенты;
		мМенеджерОтбор = мТекущиеНастройки.МенеджерОтбор;
		мИсключитьКонтрагентов = мТекущиеНастройки.ИсключитьКонтрагентов;
		мГруппироватьПоПодразделениям = мТекущиеНастройки.ГруппироватьПоПодразделениям;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТипыДоговоров()
	
	мТекущиеНастройки.ТипыДоговоров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыДоговоров.Ссылка,
	|	ТипыДоговоров.Наименование
	|ИЗ
	|	Справочник.ТипыДоговоров КАК ТипыДоговоров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.Инвестиции)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.Кредит)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.ПроцентыПоИнвестициям)
			И НЕ (Выборка.Ссылка = Справочники.ТипыДоговоров.ПроцентыПоКредитам) Тогда
			
			мТекущиеНастройки.ТипыДоговоров.Добавить(Выборка.Ссылка);
			
		КонецЕсли; 
		
		
	КонецЦикла;
	
	мТекущиеНастройки.ТипыДоговоров.Добавить(Справочники.ТипыДоговоров.ПустаяСсылка());
	
КонецПроцедуры


Процедура ЗаполнитьНастройкиДЗБаланса()
	
	мТекущиеНастройки.Менеджер = 3;
	
	/// Временная мера - наверно :)
	//ЗаполнитьТипыДоговоров();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Дебеторская = 1;
	
	мТекущиеНастройки = Новый Структура;
	мТекущиеНастройки.Вставить("Менеджер", 1);
	мТекущиеНастройки.Вставить("ВидДоговора", Новый Массив);
	мТекущиеНастройки.Вставить("Подразделения", Новый Массив);
	мТекущиеНастройки.Вставить("ТипыДоговоров", Новый Массив);
	мТекущиеНастройки.Вставить("Контрагенты", Новый Массив);
	мТекущиеНастройки.Вставить("МенеджерОтбор", Справочники.Пользователи.ПустаяСсылка()); //Новый Массив);
	мТекущиеНастройки.Вставить("ИсключитьКонтрагентов", Ложь);
	мТекущиеНастройки.Вставить("ГруппироватьПоПодразделениям", Истина);
	
	ЗаполнитьНастройкиДЗБаланса();
	
	мТипМенеджера = мТекущиеНастройки.Менеджер;
	мВидДоговора = мТекущиеНастройки.ВидДоговора;
	мТипыДоговоров = мТекущиеНастройки.ТипыДоговоров;
	мПодразделения = мТекущиеНастройки.Подразделения;
	мКонтрагенты = мТекущиеНастройки.Контрагенты;
	мМенеджерОтбор = мТекущиеНастройки.МенеджерОтбор;
	мИсключитьКонтрагентов = мТекущиеНастройки.ИсключитьКонтрагентов;
	мГруппироватьПоПодразделениям = мТекущиеНастройки.ГруппироватьПоПодразделениям;
	
	СвернутьГруппы = Истина;
	
	ДатаКон = КонецДня(ТекущаяДата());
	ДатаНач = НачалоМесяца(датаКон);
КонецПроцедуры

Процедура ВывестиВзаиморасчетыПоДокументу(Ссылка, ПустаяСделка = Ложь)
	
	
	Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		
		СтрОтб.Использование = Ложь;	
		
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.Контрагент;
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Сделка");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
		
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	
	СтрОтб.Значение = ?(ПустаяСделка, Неопределено, Ссылка);
	
	СтрОтб.Использование = Истина;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
		
	КонецЕсли;
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.ДоговорКонтрагента;
	СтрОтб.Использование = Истина;	
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Регистратор.Имя);
	
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;
	
	
КонецПроцедуры


Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.Добавить("Открыть", "Открыть документ...",,БиблиотекаКартинок.ОткрытьДокумент);
		СЗ.Добавить("ОткрытьДвижения", "Открыть взаиморасчеты по документу...",,БиблиотекаКартинок.Отчет);
		СЗ.Добавить("ОткрытьСтруктуру", "Открыть структуру подчиненности документа...",,БиблиотекаКартинок.ТолькоСкрепка);
		
		Выбор = ВыбратьИзМеню(СЗ, Элемент);
		
		Если Выбор = Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		Иначе
			
			Если Выбор.Значение <> "Открыть" Тогда
				
				Если Выбор.Значение = "ОткрытьДвижения" Тогда
					
					СтандартнаяОбработка = Ложь;
					ВывестиВзаиморасчетыПоДокументу(Расшифровка);
					
				ИначеЕсли Выбор.Значение = "ОткрытьСтруктуру" Тогда
					
					СтандартнаяОбработка = Ложь;
					ПоказатьСтруктуруПодчиненностиДокумента(Расшифровка);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВывестиВзаиморасчетыПоДокументу(Расшифровка, Истина);	
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДебеторскаяПриИзменении(Элемент)
	
	Если Дебеторская = 1 Тогда
		ЭтаФорма.Заголовок = "Просроченая дебеторская задолженность";
	Иначе
		ЭтаФорма.Заголовок = "Просроченая кредиторская задолженность";
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры


СекундВСутках=86400;

