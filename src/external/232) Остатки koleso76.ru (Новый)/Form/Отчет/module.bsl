Перем мУниверсальнаяВыгрузкаДанных;

Процедура ДействияФормыОтчетСформировать(Кнопка)

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт

		Макет = ПолучитьМакет("Отчет");
		Запрос = Новый Запрос;

	
	Если ТипОтчета = 0 Тогда
		Запрос.Текст="  ВЫБРАТЬ 
		|  Код, Номенклатура, СвободныйОстаток,Цена ИЗ 
		|  (ВЫБРАТЬ А.Номенклатура.Код Код, А.Номенклатура, А.Остаток ,
		| ЗаказыПокупателейОстатки.КоличествоОстаток ,
		| ЕстьNULL( А.Остаток,0) - ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0) СвободныйОстаток,
		| ВЫБОР КОГДА А.Номенклатура.ВидТовара= Значение(Перечисление.ВидыТоваров.Шины) ТОГДА
		|	ЕстьNULL(ЦеныКрупныйОпт.ЦЕна,0)
		| ИНАЧЕ
		| ЕстьNULL(ЦеныБазовая.ЦЕна,0)
		| КОНЕЦ Цена
		|   ИЗ
		|(ВЫБРАТЬ Номенклатура, СУММА(КоличествоОстаток) Остаток  ИЗ
		|(ВЫБРАТЬ Номенклатура, КоличествоОстаток ИЗ
		|РегистрНакопления.ТоварыНаСкладах.Остатки ( , ( Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Шины) ИЛИ 
		|Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски))
		| И  НЕ Склад.ЗапретитьИспользование И НЕ Склад.Транзитный) ТоварыНаСкладахОстатки
		| ОБЪЕДИНИТЬ  ВСЕ
		|	ВЫБРАТЬ
		|		ТоварыНаОтветственномХранении.Номенклатура КАК Номенклатура,
		|		ТоварыНаОтветственномХранении.КоличествоОстаток КАК Остаток
		|	ИЗ
		|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		|			, {Номенклатура.*} (Контрагент= &БелШина ИЛИ Контрагент= &АвтоШина ИЛИ Контрагент=&ВолгаТрейд ИЛИ Контрагент=&ТДКама ИЛИ Контрагент=&Дальнобой) И 
		|		(Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Шины) ИЛИ 
		|Номенклатура.ВидТовара=Значение(Перечисление.ВидыТоваров.Диски) )) КАК ТоварыНаОтветственномХранении 
		| ОБЪЕДИНИТЬ ВСЕ 
		| ВЫБРАТЬ ТоварыНаСкладахПартнеров.Номенклатура,
		|		  ТоварыНаСкладахПартнеров.Остаток ИЗ
		|  (ВЫБРАТЬ Номенклатура, СУММА(Остаток) Остаток ИЗ РегистрСведений.ОстаткиНоменклатурыКонтрагентов 
		|	СГРУППИРОВАТЬ ПО Номенклатура ИМЕЮЩИЕ Сумма(Остаток)>0)  ТоварыНаСкладахПартнеров
		| )ВсеОстатки   
		|	СГРУППИРОВАТЬ ПО Номенклатура ) А
		| ЛЕВОЕ СОЕДИНЕНИЕ
		|РегистрНакопления.ЗаказыПокупателей.Остатки(, 
		|НЕ ЗаказПокупателя.Транзит И ЗаказПокупателя.Проверен) ЗаказыПокупателейОстатки				
		|ПО  А.Номенклатура=ЗаказыПокупателейОстатки.Номенклатура
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ТипЦен = &ТипЦенКрупныйОпт) КАК ЦеныКрупныйОпт			
		| ПО А.Номенклатура=ЦеныКрупныйОпт.Номенклатура
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,ТипЦен = &ТицЦенБазовая) КАК ЦеныБазовая			
		|  ПО А.Номенклатура=ЦеныБазовая.Номенклатура    ) А
		|ГДЕ СвободныйОстаток>0  И ЦЕна>0
		|УПОРЯДОЧИТЬ ПО А.Номенклатура.Код";
		
	Иначе
			Запрос.Текст = 
		"ВЫБРАТЬ
		|	А.Номенклатура.Код КАК Код,
		|	А.Номенклатура,
		|	А.СвободныйОстаток,
		|	А.Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварыНаОтветственномХранении.Номенклатура КАК Номенклатура,
		|		ТоварыНаОтветственномХранении.КоличествоОстаток КАК СвободныйОстаток,
		|		ВЫБОР
		|			КОГДА ТоварыНаОтветственномХранении.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
		|				ТОГДА ЕСТЬNULL(ЦеныКрупныйОпт.Цена, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЦеныБазовая.Цена, 0)
		|		КОНЕЦ КАК Цена
		|	ИЗ
		|		РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
		|				,
		|				Контрагент = &Формула
		|					И (Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
		|						ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски))) КАК ТоварыНаОтветственномХранении
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТипЦенКрупныйОпт) КАК ЦеныКрупныйОпт
		|			ПО ТоварыНаОтветственномХранении.Номенклатура = ЦеныКрупныйОпт.Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен = &ТицЦенБазовая) КАК ЦеныБазовая
		|			ПО ТоварыНаОтветственномХранении.Номенклатура = ЦеныБазовая.Номенклатура) КАК А
		|ГДЕ
		|	А.СвободныйОстаток > 0
		|	И А.Цена > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура.Код";
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТипЦенКрупныйОпт", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00005"));
	Запрос.УстановитьПараметр("ТицЦенБазовая", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008"));
	Запрос.УстановитьПараметр("Формула", Справочники.Контрагенты.НайтиПоКоду("00405"));
	Запрос.УстановитьПараметр("БелШина", Справочники.Контрагенты.НайтиПоКоду("91529"));
	Запрос.УстановитьПараметр("Дальнобой", Справочники.Контрагенты.НайтиПоКоду("92777")); // Джи Ти
    Запрос.УстановитьПараметр("АвтоШина", Справочники.Контрагенты.НайтиПоКоду("91640"));                                                                        
	Запрос.УстановитьПараметр("ВолгаТрейд", Справочники.Контрагенты.НайтиПоКоду("92098"));                                                                        
	Запрос.УстановитьПараметр("ТДКама", Справочники.Контрагенты.НайтиПоКоду("00334")); 

	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьЗаголовок.Параметры.Заголовок= ?(ТипОтчета = 0,"Яршинторг","ОТХ ФОрмула") +"  " +ТекущаяДата();
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();

	Пока ВыборкаДетали.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ОбластьДетальныхЗаписей.Параметры.Цена=Формат(ВыборкаДетали.Цена,"ЧГ=0");
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ДействияФормыСохранитьНаСайте(Кнопка)
	ТабДокумент=ЭлементыФормы.ПолеТабличногоДокумента;
	Если ТипОтчета = 0 Тогда
		ИмяФайлаСообщения ="yst.xls";
	Иначе 
		ИмяФайлаСообщения ="formula_otx.xls";
	КонецЕсли;
	ТабДокумент.Записать("c:\Обмен\"+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
	врФТП = Новый FTPСоединение("83.102.251.100",,"yst76", "yst76admin",, Истина );
	
	Если врФТП = Неопределено Тогда
		Сообщить( "Во время обмена данными произошла ошибка при подключении	к FTP. " + ОписаниеОшибки());
	КонецЕсли;
	
	врФТП.Записать("c:\Обмен\"+ИмяФайлаСообщения , "data/"+ИмяФайлаСообщения);
	

	
	
КонецПроцедуры
//Орлов ++
Процедура ДействияФормыВыгрузитьВИнтернетМагазин(Кнопка)
	
	Если СокрЛП(НачальныйКод) = "" Тогда
		Сообщить("Не заполнен начальный код!");
		Возврат;
	КонецЕсли;
	
	Если Число(НачальныйКод) < 9120402 Тогда
		Сообщить("Номенклатура с кодом  меньше 9120402 уже загружена! Будет произведено обновление всей номенклатуры...");
	//	Возврат;
	КонецЕсли;

	//Если ПустаяСтрока(ФайлВыгрузки) Тогда
	//	Предупреждение("Не указано имя файла для выгрузки данных!");
	//	Возврат;
	//КонецЕсли;
	
	ФайлВыгрузки = "c:\Обмен\loadinginIM.xml";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ИмяФайлаСообщения ="loadinginIM.xml";
	ТекстовыйДокумент.Записать(ФайлВыгрузки);	
	
	врФТП = Новый FTPСоединение("83.102.251.100",,"yst76", "yst76admin",, Истина );
	
	Если врФТП = Неопределено Тогда
		Сообщить( "Во время обмена данными произошла ошибка при подключении	к FTP. " + ОписаниеОшибки());
	КонецЕсли;
		
	
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена            			 = ФайлВыгрузки;
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор["Справочник_НоменклатураКод"].Значение = НачальныйКод;
	
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[0].НастройкиПостроителя = мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.ПолучитьНастройки();
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Строки[0].Строки[0].ИспользоватьОтбор = Истина;
	
	мУниверсальнаяВыгрузкаДанных.РежимОбмена               = "Выгрузка";
	мУниверсальнаяВыгрузкаДанных.ЭтоИнтерактивныйРежим     = Истина;
	мУниверсальнаяВыгрузкаДанных.ПараметрыИнициализированы = Истина;
		
	мУниверсальнаяВыгрузкаДанных.ФлагРежимОтладки = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
	
	врФТП.Записать(ФайлВыгрузки , "data/"+ИмяФайлаСообщения);
	УдалитьФайлы("c:\Обмен\"+ИмяФайлаСообщения);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	НачальныйКод = "9120792"; // 09.11.2012
	
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	Состояние("Выполняется загрузка правил обмена...");
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьМакет("ПравилаОбменаТекст");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);

	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();

	УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ  Объект.Ссылка КАК Ссылка ИЗ Справочник.Номенклатура КАК Объект {ГДЕ Объект.Ссылка.* КАК Справочник_Номенклатура}";
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.ЗаполнитьНастройки();
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор.Добавить("Справочник_Номенклатура.Родитель");
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[0].ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	
	СЗГруппНоменклатуры = Новый СписокЗначений;
	СЗГруппНоменклатуры.Вставить(0, Справочники.Номенклатура.НайтиПоКоду("0001752"));
	СЗГруппНоменклатуры.Вставить(1, Справочники.Номенклатура.НайтиПоКоду("0001746"));
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[0].Значение = СЗГруппНоменклатуры;
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[0].Использование = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор.Добавить("Справочник_Номенклатура.Код");
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[1].ВидСравнения = ВидСравнения.Больше;
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[1].Значение = "0";
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[1].Использование = Истина;
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор.Добавить("Справочник_Номенклатура.ВидТовара");
	
	СЗВидовТовара = Новый СписокЗначений;
	СЗВидовТовара.Вставить(0, Перечисления.ВидыТоваров.Диски);
	СЗВидовТовара.Вставить(1, Перечисления.ВидыТоваров.Шины);
	
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[2].ВидСравнения = ВидСравнения.ВСписке;
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[2].Значение = СЗВидовТовара;
	мУниверсальнаяВыгрузкаДанных.ПостроительОтчета.Отбор[2].Использование = Истина;
	
КонецПроцедуры

Процедура ФайлВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

//Орлов --
