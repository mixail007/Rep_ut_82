Перем Соединение, Команда, ТипыSQL, НаправлениеSQL;

Функция СоздатьСтруктуру()
	Тест = Новый Структура;
	Тест.Вставить("Описание", ЭлементыФормы.ОписаниеТеста.ПолучитьТекст());
	Тест.Вставить("ТекстЗапроса", ЭлементыФормы.Запрос.ПолучитьТекст());
	Тест.Вставить("ПередВыполнениемЗапроса", ЭлементыФормы.ПередВыполнениемЗапроса.ПолучитьТекст());
	Тест.Вставить("ПослеВыполненияЗапроса", ЭлементыФормы.ПослеВыполненияЗапроса.ПолучитьТекст());
	Тест.Вставить("СтрокаПодключения", СтрокаПодключения);
	Тест.Вставить("Параметры", Параметры);
	Тест.Вставить("ФормаРедактирования", "Форма_SQL");
	Возврат Тест;
КонецФункции

Процедура ЗаполнитьИзСтруктуры(СтруктураТеста) Экспорт 
	Если СтруктураТеста.Свойство("Описание") Тогда
		ЭлементыФормы.ОписаниеТеста.УстановитьТекст(СтруктураТеста.Описание);
	КонецЕсли;
	
	Если СтруктураТеста.Свойство("СтрокаПодключения") Тогда
		СтрокаПодключения = СтруктураТеста.СтрокаПодключения;
	КонецЕсли;
	
	
	Если СтруктураТеста.Свойство("Параметры") Тогда
		Параметры = СтруктураТеста.Параметры;
	КонецЕсли;
	
	Если СтруктураТеста.Свойство("ПередВыполнениемЗапроса") Тогда
		ЭлементыФормы.ПередВыполнениемЗапроса.УстановитьТекст(СтруктураТеста.ПередВыполнениемЗапроса);
	КонецЕсли;
	
	Если СтруктураТеста.Свойство("ПослеВыполненияЗапроса") Тогда
		ЭлементыФормы.ПослеВыполненияЗапроса.УстановитьТекст(СтруктураТеста.ПослеВыполненияЗапроса);
	КонецЕсли;
	Если СтруктураТеста.Свойство("ТекстЗапроса") Тогда
		ЭлементыФормы.Запрос.УстановитьТекст(СтруктураТеста.ТекстЗапроса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыТипПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекСтрока = ЭлементыФормы.Параметры.ТекущиеДанные;
	ТекСтрока.Значение = Элемент.Значение.ПривестиЗначение(ТекСтрока.Значение);
КонецПроцедуры


Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
	СтруктураТеста = СоздатьСтруктуру();
	Если МодальныйРежим Тогда 
		Закрыть(СтруктураТеста);
	Иначе
		СтрокаТеста.Описание = СтруктураТеста.Описание;
		СтрокаТеста.Тест = ЗначениеВСтрокуВнутр(СтруктураТеста);
		Закрыть(СтруктураТеста);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1СтрокаПодключения(Кнопка)
	// Вставить содержимое обработчика.
	Попытка
		Если Не СоздатьСоединение() Тогда Возврат; КонецЕсли;
		Диалог = Новый COMОбъект("DataLinks");
		Диалог.PromptEdit(Соединение);
		//Команда = Неопределено;
		//СоздатьКоманду();
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция СоздатьСоединение()
	Попытка
		Если Соединение = Неопределено Тогда
			Соединение = Новый COMОбъект("ADODB.Connection");
			Соединение.ConnectionString = СтрокаПодключения;			
			Соединение.ConnectionTimeout = 15;
		КонецЕсли;
		Возврат Истина;
	Исключение
		Предупреждение(ОписаниеОшибки());
		Соединение = Неопределено;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура КоманднаяПанель1ВыполнитьЗапрос(Кнопка)
	// Вставить содержимое обработчика.
	Попытка
		Если Не СоздатьСоединение() Тогда
			Возврат;
		КонецЕсли;
        Соединение.Open();
		Попытка
			РекордСет = Соединение.Execute(ЭлементыФормы.Запрос.ПолучитьТекст());
		Исключение
			Предупреждение(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Результат = ЗаполнитьТаблицуИзSQL(РекордСет);
		ЭлементыФормы.Результат.СоздатьКолонки();
		Соединение.Close();
		ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.Результат;
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

//Процедура КоманднаяПанель1ПолучитьПараметры(Кнопка)
//	// Вставить содержимое обработчика.
//	
//	
//	
//	ТекстЗапроса = ЭлементыФормы.Запрос.ПолучитьТекст();
//	Вквоте = Ложь;
//	Имя = "";
//	ФормируемИмя = Ложь;
//	МассивИмен = Новый Массив;
//	Для ит = 1 по СтрДлина(ТекстЗапроса) Цикл
//		Символ = Сред(ТекстЗапроса,ит,1);
//		Если Символ = """" ИЛИ Символ = "'" Тогда
//			Вквоте = Истина;
//			Продолжить;
//		КонецЕсли;
//		Если Вквоте Тогда
//			Продолжить;
//		КонецЕсли;
//		Если Символ = "@" Тогда
//			Имя = "";
//			ФормируемИмя = Истина;
//			Продолжить;
//		КонецЕсли;
//		Если ФормируемИмя Тогда
//			Если Найти("АаБбВвГгДдЕеЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯяAaNnBbOoCcPpDdQqEeRrFfSsGgTtHhUuIiVvJjWwKkXxLlYyMmZz_0123456789",Символ)>0 Тогда 
//				Имя = Имя + Символ;
//			Иначе
//				Если тпПараметры.Найти(Имя,"Имя") = Неопределено Тогда
//					СтрокаТЧ = тпПараметры.Добавить();
//					СтрокаТЧ.Имя = Имя;
//				КонецЕсли;
//				
//				Имя = "";
//				ФормируемИмя = Ложь;
//			КонецЕсли;
//		КонецЕсли;
//			
//	КонецЦикла;
//	
//	Если Не ПустаяСтрока(Имя) Тогда
//		Если тпПараметры.Найти(Имя,"Имя") = Неопределено Тогда
//			СтрокаТЧ = тпПараметры.Добавить();
//			СтрокаТЧ.Имя = Имя;
//		КонецЕсли;
//	КонецЕсли;
//	
//	
//КонецПроцедуры

Процедура ТабличноеПоле1ТипНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Элемент.СписокВыбора.Очистить();
	Для Каждого Тип Из ТипыSQL Цикл
		Элемент.СписокВыбора.Добавить(Тип.Ключ);
	КонецЦикла;
КонецПроцедуры

Процедура ТабличноеПоле1НаправлениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Элемент.СписокВыбора.Очистить();
	Для Каждого Направление Из НаправлениеSQL Цикл
		Элемент.СписокВыбора.Добавить(Направление.Ключ);
	КонецЦикла;
КонецПроцедуры

Процедура ПриОткрытии()
	// Вставить содержимое обработчика.
	Если Не ПустаяСтрока(СтрокаПодключения) Тогда
		СоздатьСоединение();
		Соединение.ConnectionString = СтрокаПодключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Попытка
		Если Не СоздатьСоединение() Тогда Возврат; КонецЕсли;
		Диалог = Новый COMОбъект("DataLinks");
		Диалог.PromptEdit(Соединение);
		СтрокаПодключения = Соединение.ConnectionString;
		СтрокаПодключенияПриИзменении(Элемент)
		//Команда = Неопределено;
		//СоздатьКоманду();
	Исключение
		Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура СтрокаПодключенияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Попытка
		Если Соединение = Неопределено Тогда
			Соединение = Новый COMОбъект("ADODB.Connection");
			Соединение.ConnectionTimeout = 15;
		КонецЕсли;
	Исключение
		Предупреждение(ОписаниеОшибки());
		Соединение = Неопределено;
		Возврат;
	КонецПопытки;
	Соединение.ConnectionString = СтрокаПодключения;			
КонецПроцедуры

НаправлениеSQL = Новый Соответствие;

НаправлениеSQL.Вставить("adParamUnknown", 0);
НаправлениеSQL.Вставить("adParamInput", 1);
НаправлениеSQL.Вставить("adParamOutput", 2);
НаправлениеSQL.Вставить("adParamInputOutput", 3);
НаправлениеSQL.Вставить("adParamReturnValue", 4);

ТипыSQL = Новый Соответствие;

ТипыSQL.Вставить("adBigInt", 20);
ТипыSQL.Вставить("adBinary", 128);
ТипыSQL.Вставить("adBoolean", 11);
ТипыSQL.Вставить("adBSTR", 8);
ТипыSQL.Вставить("adChapter", 136);
ТипыSQL.Вставить("adChar", 129);
ТипыSQL.Вставить("adCurrency", 6);
ТипыSQL.Вставить("adDate", 7);
ТипыSQL.Вставить("adDBDate", 133);
ТипыSQL.Вставить("adDBTime", 134);
ТипыSQL.Вставить("adDBTimeStamp", 135);
ТипыSQL.Вставить("adDecimal", 14);
ТипыSQL.Вставить("adDouble", 5);
ТипыSQL.Вставить("adEmpty", 0);
ТипыSQL.Вставить("adError", 10);
ТипыSQL.Вставить("adFileTime", 64);
ТипыSQL.Вставить("adGUID", 72);
ТипыSQL.Вставить("adIDispatch", 9);
ТипыSQL.Вставить("adInteger", 3);
ТипыSQL.Вставить("adIUnknown", 13);
ТипыSQL.Вставить("adLongVarBinary", 205);
ТипыSQL.Вставить("adLongVarChar", 201);
ТипыSQL.Вставить("adLongVarWChar", 203);
ТипыSQL.Вставить("adNumeric", 131);
ТипыSQL.Вставить("adPropVariant", 138);
ТипыSQL.Вставить("adSingle", 4);
ТипыSQL.Вставить("adSmallInt", 2);
ТипыSQL.Вставить("adTinyInt", 16);
ТипыSQL.Вставить("adUnsignedBigInt", 21);
ТипыSQL.Вставить("adUnsignedInt", 19);
ТипыSQL.Вставить("adUnsignedSmallInt", 18);
ТипыSQL.Вставить("adUnsignedTinyInt", 17);
ТипыSQL.Вставить("adUserDefined", 132);
ТипыSQL.Вставить("adVarBinary", 204);
ТипыSQL.Вставить("adVarChar", 200);
ТипыSQL.Вставить("adVariant", 12);
ТипыSQL.Вставить("adVarNumeric", 139);
ТипыSQL.Вставить("adVarWChar", 202);
ТипыSQL.Вставить("adWChar", 130);
	


Соединение = Неопределено;
Команда = Неопределено;