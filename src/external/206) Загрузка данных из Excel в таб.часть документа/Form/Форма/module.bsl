Перем ПрошлыйМетаданныеСсылкиИсточника;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет установку реквизитов, связанных с источником данных
//
Процедура УстановитьИсточник()
	
	Источник        = Неопределено;
	ОбъектИсточника = Неопределено;
	СпискокСохраненныхНастроек = Неопределено;
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника = Неопределено Тогда
		СпискокСохраненныхНастроек = Неопределено;
		ТаблицаЗагружаемыхРеквизитов.Очистить();
	Иначе
		СпискокСохраненныхНастроек = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа:" + МетаданныеИсточника.ПолноеИмя());
		Настройка = ПоучитьНастройкуПоУмолчанию(СпискокСохраненныхНастроек);
		ЗаполнитьНастройкиКолонок(Настройка);
	КонецЕсли;
	
	Если РежимЗагрузки = 1 И Не СсылкаИсточника = Неопределено Тогда
		ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные();
	КонецЕсли;
	
	ОбновитьДанныеТабличногоДокумента(ЭлементыФормы.ТабличныйДокумент, Истина);
	
КонецПроцедуры

// Процедура заполняет список выбора элемента управления "ТабличнаяЧастьИсточника"
//
Процедура УстановитьСписокТабличныхЧастей()
	
	СписокВыбора = ЭлементыФормы.ТабличнаяЧастьИсточника.СписокВыбора;
	СписокВыбора.Очистить();
	Если СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого ТабличнаяЧасть Из СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
	КонецЦикла;
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ОбновлениеОтображения" Формы
//
Процедура ОбновлениеОтображения()
	
	Если Не ЭлементыФормы.ПанельРежима.ТекущаяСтраница = ЭлементыФормы.ПанельРежима.Страницы[РежимЗагрузки] Тогда
		ЭлементыФормы.ПанельРежима.ТекущаяСтраница = ЭлементыФормы.ПанельРежима.Страницы[РежимЗагрузки];
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ПолеПоиска.Видимость         = РежимЗагрузки = 0;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ПолеПоиска.ИзменятьВидимость = РежимЗагрузки = 0;
	
	ЭлементыФормы.НеСоздаватьНовыхЭлементов. Видимость = РежимЗагрузки = 0;
	ЭлементыФормы.ЗамещатьСуществующиеЗаписи.Видимость = РежимЗагрузки = 2;
	
	ДоступностьКнопкиСохранитьЗначения    = Не ПолучитьМетаданныеИсточника() = Неопределено;
	ДоступностьКнопкиВосстановитьЗначения = (Не СпискокСохраненныхНастроек = Неопределено) и Не СпискокСохраненныхНастроек.Количество() = 0;
	
	ЭлементыФормы.КоманднаяПанельЗагружаемыеРеквизиты.Кнопки.СохранитьЗначения.   Доступность = ДоступностьКнопкиСохранитьЗначения;
	ЭлементыФормы.КоманднаяПанельЗагружаемыеРеквизиты.Кнопки.ВосстановитьЗначения.Доступность = ДоступностьКнопкиВосстановитьЗначения;
	
	ЭлементыФормы.КоманднаяПанельЗагружаемыеРеквизиты.Кнопки.СохранитьЗначенияВФайл.Доступность = ДоступностьКнопкиСохранитьЗначения;
	
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.НомерКолонки.Видимость = РучнаяНумерацияКолонокТабличногоДокумента;
	ЭлементыФормы.КоманднаяПанельЗагружаемыеРеквизиты.Кнопки.НумерацияКолонок.Кнопки.ПеренумероватьКолонки.Доступность = РучнаяНумерацияКолонокТабличногоДокумента;
	ЭлементыФормы.КоманднаяПанельЗагружаемыеРеквизиты.Кнопки.НумерацияКолонок.Кнопки.РучнаяНумерацияКолонокТабличногоДокумента.Пометка = РучнаяНумерацияКолонокТабличногоДокумента;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриОткрытии" Формы
//
Процедура ПриОткрытии()
	
	СписокВыбора = ЭлементыФормы.ТипОбъекта.СписокВыбора;
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		СписокВыбора.Добавить(Справочники[ОбъектМетаданных.Имя].ПустаяСсылка(), ОбъектМетаданных.Представление());
	КонецЦикла;
	МетаданныеПодчиненРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	СписокВыбора = ЭлементыФормы.ИмяВидаРегистра.СписокВыбора;
	Для каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		
		Если Не ОбъектМетаданных.РежимЗаписи = МетаданныеПодчиненРегистратору Тогда
			СписокВыбора.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Представление());
		КонецЕсли;
		
	КонецЦикла;
	
	Типы = Новый Массив;
	ВидыТипов = Новый Структура("Справочники,Документы");
	Для каждого КлючИЗначение Из ВидыТипов Цикл
		Для каждого ОбъектМетаданных Из Метаданные[КлючИЗначение.Ключ] Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Количество() Тогда
				Типы.Добавить(Тип(СтрЗаменить(ОбъектМетаданных.ПолноеИмя(),".","Ссылка.")));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЭлементыФормы.СсылкаИсточника.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	Если Не ЗначениеЗаполнено(РежимЗагрузки) И СсылкаИсточника = Неопределено И Не ЗначениеЗаполнено(ИмяВидаРегистра) Тогда 
		РежимЗагрузки           = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа: РежимЗагрузки");		
		ИмяВидаРегистра         = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа: ИмяВидаРегистра");
		СсылкаИсточника         = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа: СсылкаИсточника");
	Иначе
		ЭлементыФормы.ИмяВидаРегистра.Значение = ИмяВидаРегистра;
	КонецЕсли;	
	УстановитьСписокТабличныхЧастей();
	ТабличнаяЧастьИсточника = ВосстановитьЗначение("Обработка  Загрузка данных из табличного документа: ТабличнаяЧастьИсточника");
	
	Инициализация();
	
	УстановитьИсточник();
	
	ОбновитьДанныеТабличногоДокумента(ЭлементыФормы.ТабличныйДокумент);	

	
КонецПроцедуры

// Процедура - обаботчик события "ПриЗакрытии" Формы
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("Обработка  Загрузка данных из табличного документа: РежимЗагрузки",           РежимЗагрузки);
	СохранитьЗначение("Обработка  Загрузка данных из табличного документа: СсылкаИсточника",         СсылкаИсточника);
	СохранитьЗначение("Обработка  Загрузка данных из табличного документа: ТабличнаяЧастьИсточника", ТабличнаяЧастьИсточника);
	СохранитьЗначение("Обработка  Загрузка данных из табличного документа: ИмяВидаРегистра",         ИмяВидаРегистра);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Процедура - обаботчик события "Открытие" в: Поле выбора "ТипОбъекта"
//
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Справочники[СсылкаИсточника.Метаданные().Имя].ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

// Процедура - обаботчик события "НачалоВыбораИзСписка" в: Поле ввода "ТабличнаяЧастьИсточника"
//
Процедура ТабличнаяЧастьИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	Если СсылкаИсточника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из СсылкаИсточника.Метаданные().ТабличныеЧасти Цикл
		СписокВыбора.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Представление());
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле выбора "ТипОбъекта"
//
Процедура ТипОбъектаПриИзменении(Элемент)
	
	УстановитьИсточник();
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "СсылкаИсточника"
//
Процедура СсылкаИсточникаПриИзменении(Элемент)
	
	Если ПрошлыйМетаданныеСсылкиИсточника = Неопределено или СсылкаИсточника = Неопределено или Не ПрошлыйМетаданныеСсылкиИсточника = СсылкаИсточника.Метаданные() Тогда
		
		УстановитьСписокТабличныхЧастей();
		УстановитьИсточник();
		
	КонецЕсли;
	 
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "ТабличнаяЧастьИсточника"
//
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	
	УстановитьИсточник();
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле выбора "РежимЗагрузки"
//
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	РежимЗагрузки = 1;//+++ SAO

	ТипОбъекта              = Неопределено;
	СсылкаИсточника         = Неопределено;
	ИмяВидаРегистра         = Неопределено;
	ТабличнаяЧастьИсточника = Неопределено;
	УстановитьСписокТабличныхЧастей();
	УстановитьИсточник();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура - обаботчик события, при нажатии на кнопку "Перенумеровать колонки" Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыПеренумероватьКолонки(Кнопка)
	
	НомерКолонки = 1;
	Для каждого Реквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Реквизит.Пометка Тогда
			Если Не Реквизит.НомерКолонки = НомерКолонки Тогда
				Реквизит.НомерКолонки = НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		Иначе
			Реквизит.НомерКолонки = 0;
		КонецЕсли;
		
		Если Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Искать" Тогда
			Реквизит.РежимЗагрузки = "Устанавливать"
		ИначеЕсли Не Реквизит.НомерКолонки = 0 И Реквизит.РежимЗагрузки = "Устанавливать" Тогда
			Реквизит.РежимЗагрузки = "Искать"
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Установить флажки" Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыУстановитьФлажки(Кнопка)
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		ЗагружаемыйРеквизит.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Снять флажки" Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыСнятьФлажки(Кнопка)
	
	Для каждого ЗагружаемыйРеквизит Из ТаблицаЗагружаемыхРеквизитов Цикл
		Если Не РежимЗагрузки = 2 или Не ЗагружаемыйРеквизит.МожетБытьПолемПоиска Тогда
			ЗагружаемыйРеквизит.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Ручная нумерация колонок" Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыРучнаяНумерацияКолонокТабличногоДокумента(Кнопка)
	
	РучнаяНумерацияКолонокТабличногоДокумента = Не РучнаяНумерацияКолонокТабличногоДокумента;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "События..." Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыСобытия(Кнопка)
	
	ФормаРедактированиеСобытий = ПолучитьФорму("ФормаРедактированияСобытий");
	
	ФормаРедактированиеСобытий.РежимЗагрузки = РежимЗагрузки;
	
	ФормаРедактированиеСобытий.ЭлементыФормы.ПередЗаписьюОбъекта .УстановитьТекст(ПередЗаписьюОбъекта);
	ФормаРедактированиеСобытий.ЭлементыФормы.ПриЗаписиОбъекта    .УстановитьТекст(ПриЗаписиОбъекта);
	ФормаРедактированиеСобытий.ЭлементыФормы.ПослеДобавленияСтроки.УстановитьТекст(ПослеДобавленияСтроки);
	
	Если ФормаРедактированиеСобытий.ОткрытьМодально() = Истина Тогда
		
		ПередЗаписьюОбъекта   = ФормаРедактированиеСобытий.ЭлементыФормы.ПередЗаписьюОбъекта  .ПолучитьТекст();
		ПриЗаписиОбъекта      = ФормаРедактированиеСобытий.ЭлементыФормы.ПриЗаписиОбъекта     .ПолучитьТекст();
		ПослеДобавленияСтроки = ФормаРедактированиеСобытий.ЭлементыФормы.ПослеДобавленияСтроки.ПолучитьТекст();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Контроль заполнения" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаКонтрольЗаполнения(Кнопка)
	
	СформироватьСтруктуруКолонок();
	КонтрольЗаполнения(ЭлементыФормы.ТабличныйДокумент, ЭлементыФормы.Индикатор);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Обновить" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаОбновить(Кнопка)
	
	ОбновитьДанныеТабличногоДокумента(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Предыдущее примечание" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаПредыдущееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Следующее примечание" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаСледующееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить в файл..." Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаСохранить(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Созранить табличный документ в файл";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.MXL);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла,ТипФайлаТабличногоДокумента.TXT);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Открыть файл..." Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаОткрыть(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Прочитать(ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			мПрочитатьТабличныйДокументИзExcel(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент,ДиалогВыбораФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Выбрать значение" Командной панели "КоманднаяПанельВыбратьЗначение"
//
Процедура КоманднаяПанельВыбратьЗначениеВыбратьЗначение(Кнопка)
	
	ВыбратьЗначениеВЯчейке(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить настройки..." Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельФормыСохранитьЗначения(Кнопка)
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	ФормаСохраненияНастройки = ПолучитьФорму("ФормаСохраненияНастройки");
	Если Не СпискокСохраненныхНастроек = Неопределено Тогда
		ФормаСохраненияНастройки.СпискокНастроек = СпискокСохраненныхНастроек.Скопировать();
	КонецЕсли;
	
	ТекущиеДанные = ФормаСохраненияНастройки.ОткрытьМодально();
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные.Значение = мПолучитьНастройки();
		СпискокСохраненныхНастроек = ФормаСохраненияНастройки.СпискокНастроек.Скопировать();
		СохранитьЗначение("Обработка  Загрузка данных из табличного документа:" + МетаданныеИсточника.ПолноеИмя(),СпискокСохраненныхНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Восстановить настройки..." Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельФормыВосстановитьЗначения(Кнопка)
	
	ФормаВыбораНастройки = ПолучитьФорму("ФормаВыбораНастройки");
	ФормаВыбораНастройки.СпискокНастроек = СпискокСохраненныхНастроек;
	ТекущиеДанные = ФормаВыбораНастройки.ОткрытьМодально();
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗаполнитьНастройкиКолонок(ТекущиеДанные.Значение);
	КонецЕсли;
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	СпискокСохраненныхНастроек = ФормаВыбораНастройки.СпискокНастроек.Скопировать();
	СохранитьЗначение("Обработка  Загрузка данных из табличного документа:" + МетаданныеИсточника.ПолноеИмя(),СпискокСохраненныхНастроек);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить настройки в файл..." Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельФормыСохранитьЗначенияВФайл(Кнопка)
	
	Настройки = мПолучитьНастройки();
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Созранить значения настройки в файл";
	ДиалогВыбораФайла.Фильтр    = "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Настройки.Записать(ДиалогВыбораФайла.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Восстановить настройки из файла..." Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельФормыВосстановитьЗначенияИзФайла(Кнопка)
	Перем ИмяМетаданныхИсточникаНастройки;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = "Восстановить значения из файла";
	ДиалогВыбораФайла.Фильтр    = "Настройка загрузки в табличный документ (*.mxlz)|*.mxlz|Все файлы (*.*)|*.*|";
	
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Настройки = Новый ТабличныйДокумент;
		Настройки.Прочитать(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗаполнитьНастройкиКолонок(Настройки);
		УстановитьСписокТабличныхЧастей();
		ТабличнаяЧастьИсточника = ТабличнаяЧастьИсточника;
		ОбновитьДанныеТабличногоДокумента(ЭлементыФормы.ТабличныйДокумент, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Перечитать " Командной панели "КоманднаяПанельЗагружаемыеРеквизиты"
//
Процедура КоманднаяПанельФормыПеречитать(Кнопка)
	
	ЗаполнитьНастройкиКолонок(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Загрузить" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	ЗагрузитьДанные(ЭлементыФормы.ТабличныйДокумент, ЭлементыФормы.Индикатор, Производитель);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

// Процедура - обаботчик события "ПриИзмененииФлажка"  табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	Если Колонка.Имя = "МожетБытьПолемПоиска" Тогда
		ТекущиеДанные.ПолеПоиска = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПередНачаломИзменения"  табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	РежимЗагрузкиИскать = ТекущиеДанные.РежимЗагрузки = "Искать";
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоВладельцу,ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоТипу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоТипу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоТипу,ТекущиеДанные.СвязьПоТипу);
	КонецЕсли;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ЭлементСвязиПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ЗначениеПоУмолчанию.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
КонецПроцедуры

// Процедура - обаботчик события "ПриВыводеСтроки"  табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.МожетБытьПолемПоиска Тогда
		Если РежимЗагрузки = 0 Тогда
			ОформлениеСтроки.Ячейки.ПолеПоиска.ТолькоПросмотр = Ложь;
		ИначеЕсли РежимЗагрузки = 2 Тогда
			ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РежимЗагрузкиВычислять = ДанныеСтроки.РежимЗагрузки = "Вычислять";
	
	Если РежимЗагрузкиВычислять Тогда
		
		ОформлениеСтроки.Ячейки.ИскатьПо           .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоВладельцу   .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоТипу        .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу .Видимость = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Выражение          .Видимость = Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки.Пометка Тогда
		
		Если Не ДанныеСтроки.РежимЗагрузки = "Искать" Тогда
			
			ЦветРежимЗагрузкиИскать = ЦветаСтиля.ЦветРамки;
			
			ОформлениеСтроки.Ячейки.ИскатьПо              .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоВладельцу      .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоТипу           .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу    .ЦветТекста = ЦветРежимЗагрузкиИскать;
			
		КонецЕсли;
		
	Иначе
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события "НачалоВыбора"  колонки "ОписаниеТипов" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	Описание = ТекущиеДанные.ДоступноеОписаниеТипов;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из Описание.Типы() Цикл
		МассивТипов.Добавить(Тип);
	КонецЦикла;
	
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, Описание.КвалификаторыЧисла, Описание.КвалификаторыСтроки, Описание.КвалификаторыДаты);
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "ОписаниеТипов" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	ТекущиеДанные.ОписаниеТипов = ТекущиеДанные.ДоступноеОписаниеТипов;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ОписаниеТипов" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.ЗначениеПоУмолчанию);
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ТекущиеДанные.ИскатьПо = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоТипу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.Колонки.ЗначениеПоУмолчанию.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
КонецПроцедуры


// Процедура - обаботчик события "НачалоВыбора"  колонки "ЗначениеПоУмолчанию" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТипЗНЧ(СвязьПоВладельцу) = Тип("Строка") Тогда
		СтрокаСвязиПоВладельцу = ТаблицаЗагружаемыхРеквизитов.Найти(СвязьПоВладельцу,"ИмяРеквизита");
		
		Если Не СтрокаСвязиПоВладельцу = Неопределено Тогда
			СвязьПоВладельцу = СтрокаСвязиПоВладельцу.ЗначениеПоУмолчанию;
		Иначе
			СвязьПоВладельцу = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Элемент.ВыборПоВладельцу = СвязьПоВладельцу;
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "ЗначениеПоУмолчанию" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "НомерКолонки" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовНомерКолонкиПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	Если Не ТекущиеДанные.НомерКолонки = 0 Тогда
		ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.НомерКолонки = 0 И ТекущиеДанные.РежимЗагрузки = "Искать" Тогда
		ТекущиеДанные.РежимЗагрузки = "Устанавливать"
	ИначеЕсли Не ТекущиеДанные.НомерКолонки = 0 И ТекущиеДанные.РежимЗагрузки = "Устанавливать" Тогда
		ТекущиеДанные.РежимЗагрузки = "Искать"
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "РежимЗагрузки" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "РежимЗагрузки" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаЗагружаемыхРеквизитов.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.РежимЗагрузки) Тогда
		ТекущиеДанные.РежимЗагрузки = "Устанавливать";
	КонецЕсли;
	
	Если ТекущиеДанные.НомерКолонки = 0 И ТекущиеДанные.РежимЗагрузки = "Искать" И РучнаяНумерацияКолонокТабличногоДокумента Тогда
		Предупреждение("Не выбран номер колонки табличного документа");
		ТекущиеДанные.РежимЗагрузки = "Устанавливать"
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ИскатьПо" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) И Не Элемент.СписокВыбора.Количество() = 0 Тогда
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаВыбора"  колонки "СвязьПоВладельцу" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			Менеджер = ПолучитьМенеджераПоТипу(Тип(ВыбранноеЗначение));
			
			ФормаМенеджера = Менеджер.ПолучитьФормуВыбора(, ЭтаФорма, Элемент);
			ФормаМенеджера.НачальноеЗначениеВыбора = Элемент.Значение;
			НовоеЗначение = ФормаМенеджера.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаВыбора"  колонки "СвязьПоТипу" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоТипуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			Менеджер = ПолучитьМенеджераПоТипу(Тип(ВыбранноеЗначение));
			
			ФормаМенеджера = Менеджер.ПолучитьФормуВыбора(, ЭтаФорма, Элемент);
			ФормаМенеджера.НачальноеЗначениеВыбора = Элемент.Значение;
			НовоеЗначение = ФормаМенеджера.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
				
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обаботчик события "НачалоВыбора"  колонки "Выражение" табличного поля "ТаблицаЗагружаемыхРеквизитов"
//
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияВыражения = ПолучитьФорму("ФормаРедактированияВыражения");
	
	ПолеТекстовогоДокумента = ФормаРедактированияВыражения.ЭлементыФормы.ПолеТекстовогоДокумента;
	ПолеТекстовогоДокумента.УстановитьТекст(Элемент.Значение);
	
	Если ФормаРедактированияВыражения.ОткрытьМодально() = Истина Тогда
		Элемент.Значение = ПолеТекстовогоДокумента.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяВидаРегистраПриИзменении(Элемент)
	УстановитьИсточник();
КонецПроцедуры

Процедура ИмяВидаРегистраОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ИмяВидаРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений[ИмяВидаРегистра].ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры



ЭтотОбъект.ТаблицаЗагружаемыхРеквизитов = ЭтаФорма.ТаблицаЗагружаемыхРеквизитов;
ЭтотОбъект.ТаблицаЗагружаемыхРеквизитов.Индексы.Добавить("ПолеПоиска,Пометка");
ЭтотОбъект.ТаблицаЗагружаемыхРеквизитов.Индексы.Добавить("Пометка");
ЭтотОбъект.ТаблицаЗагружаемыхРеквизитов.Индексы.Добавить("ИмяРеквизита");
