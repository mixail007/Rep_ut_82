
Перем СтруктураПоставщиковКарт Экспорт;
Перем СтруктураЧисел;

перем KeyAPIЯндекса, ТарифДоставки;

функция ПолучитьКубатуру(Заказ1) Экспорт
	СуммаКуб = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	             	//+++ 11.07.2014     1 заменена на Объем!
		           //|				или ЗаказыПокупателей.Номенклатура.ВидТовара = Значение(перечисление.ВидыТоваров.Аксессуары)
				   |			ТОГДА ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КолКамеры,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	                |			ТОГДА 0
				
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
	               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
				//   |				ТОГДА 0  
   				//+++ 11.07.2014 -------------------------------------------------------------------------------------
	               |			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков.Объем / 0.033
				   
				   |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |			КОНЕЦ
	               |	КОНЕЦ * ЗаказПокупателяТовары.Количество КАК КолПересчета,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	               |				ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
	               |			ТОГДА ""нет""
	               |		ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |	КОНЕЦ КАК КоэффПересчета,
	               |	ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное КАК Номенклатура
	               |ИЗ
	               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
	               |		ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
	               |			И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка = &Ссылка
	               |ИТОГИ
	               |	СУММА(КолКамеры),
	               |	СУММА(КолПересчета)
	               |ПО
	               |	ОБЩИЕ ";
	
	Запрос.УстановитьПараметр("Ссылка", Заказ1);
	Запрос.УстановитьПараметр("Камеры", справочники.Номенклатура.НайтиПоКоду("0001127") );	//+++ 18.04.2012					
    Запрос.УстановитьПараметр("Крепеж", справочники.Номенклатура.НайтиПоКоду("0000701") ); //+++ 19.04.2012 "Диски - Крепежный материал"

	СуммаКуб = Заказ1.Товары.Итог("Количество");
попытка
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Выборка.Следующий();
	СуммаКуб = Выборка.КолПересчета;
	
	ВыборкаТовары = Выборка.Выбрать();
	пока ВыборкаТовары.Следующий() цикл
		если ВыборкаТовары.КоэффПересчета=0 тогда
			сообщить(" В справочнике ""Нормы загрузки"" для ТипоРазмера: "+ВыборкаТовары.Типоразмер+" - не установлен ""Коэффициент Пересчета(R13)""", СтатусСообщения.Внимание);
		КонецЕсли;	
	КонецЦикла;	
исключение
	сообщить("Требуется изменение конфигурации. Требуется добавить в справочнике Нормы Загрузки - реквизит ""КоэффициентПересчетаR13""!");
КонецПопытки;

	возврат СуммаКуб;
		
КонецФункции	

функция ПолучитьТариф(Контр) Экспорт 
	
	рез = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Объект", Контр);
	св1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ТарифДоставки);
	Запрос.УстановитьПараметр("Свойство", св1);
	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		
		Если ТипЗнч(Выборка.Значение)=Тип("СправочникСсылка.ЗначенияСвойствОбъектов") тогда
			знач1 = Выборка.Значение.Наименование;
		иначе
			знач1 = Выборка.Значение;
		КонецЕсли;
		
		попытка
		рез = Число(Знач1);
		исключение
		рез = Выборка.Значение;
		КонецПопытки;
			
	КонецЕсли;

	возврат рез;
	
КонецФункции

функция ПолучитьВесПоЗаказу(Товары1)
	
	Вес1 = 0;
	
	для каждого стр1 из Товары1 цикл
		Если ЗначениеЗаполнено(стр1.Номенклатура.ЕдиницаХраненияОстатков) тогда
		  Вес1 = Вес1 + стр1.Номенклатура.ЕдиницаХраненияОстатков.Вес * стр1.Количество;
		КонецЕсли;
	КонецЦикла;	
	           	
	возврат Вес1;
	
КонецФункции	

функция ПолучитьОбъемПоЗаказу(Товары1, Заказ=неопределено)
	
	Объем1 = 0;
	
	Если Заказ=неопределено тогда
		для каждого стр1 из Товары1 цикл
	  		Объем1 = Объем1 + ВычислитьОбъемНоменклатуры(стр1.Номенклатура,3) * стр1.Количество;    //яштПрочее
		КонецЦикла;	
	ИНАЧЕ
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество,
		               |	ЗаказыПокупателейОстатки.Номенклатура
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказыПокупателейОстатки.Номенклатура";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		  Объем1 = Объем1 + ВычислитьОбъемНоменклатуры(Выборка.Номенклатура,3) * Выборка.Количество;    //яштПрочее
		КонецЦикла;
		
	КонецЕсли;

	возврат Объем1;
	
КонецФункции	

Процедура ЗаполнитьСтроку(стр1, МенятьАдрес=Истина, неОтгружено=ЛОЖЬ, СчитатьРасстояния=ЛОЖЬ, предКоординаты="" ) Экспорт

	Если ЗначениеНЕЗаполнено(стр1.Заказ) тогда
		сообщить(строка(стр1.номерСтроки)+") не заполнен заказ!", СтатусСообщения.Внимание);
		возврат;
	КонецЕсли;	
	стр1.ДатаОтгрузки = стр1.Заказ.ДатаОтгрузки; 
	
	Если Не неОтгружено тогда
		стр1.Количество = стр1.Заказ.Товары.Итог("Количество");
		стр1.Сумма      = стр1.Заказ.Товары.Итог("Сумма"); // тов + услуги
		стр1.Кубатура   = ПолучитьКубатуру(стр1.Заказ);
		стр1.Вес        = ПолучитьВесПоЗаказу(стр1.Заказ.Товары);//+++
		стр1.Объем      = ПолучитьОбъемПоЗаказу(стр1.Заказ.Товары);//+++
		стр1.Контрагент = стр1.Заказ.Контрагент;
		стр1.Ответственный = стр1.Заказ.Ответственный;
	КонецЕсли;
	
	//+++ 21.04.2015
	тариф1 = ПолучитьТариф(стр1.Контрагент);
	стр1.СуммаДоставки = стр1.Заказ.ТрНал + стр1.Заказ.ТрБезНал + стр1.Заказ.ТрВЦене;
	Если стр1.СуммаДоставки = 0 тогда  // тогда по-старому
		
		если тариф1=0 тогда
			тариф1 = 0.00; //рублей
		КонецЕсли;
		стр1.тариф = тариф1;//+++
		
		Если тариф1>0 тогда
			стр1.СуммаДоставки =  тариф1 * стр1.Кубатура;
		иначе 
			стр1.СуммаДоставки = -тариф1 * стр1.Количество;
		КонецЕсли;
	Иначе // Есть сумма доставки...
		ДоляОтгрузки = 1;
		ОбъемПолный  = ПолучитьОбъемПоЗаказу(стр1.Заказ.Товары);
		ОбъемЗаказ   = ПолучитьОбъемПоЗаказу(стр1.Заказ.Товары, стр1.Заказ);
		ДоляОтгрузки = ?(ОбъемПолный=0, 1, ОбъемЗаказ/ОбъемПолный);
		стр1.СуммаДоставки = стр1.СуммаДоставки *  ДоляОтгрузки;
		Если тариф1>0 тогда
			тариф1 = ?(стр1.Кубатура=0,   стр1.тариф  , стр1.СуммаДоставки / стр1.Кубатура);
		иначе
			тариф1 = -?(стр1.Количество=0, стр1.тариф , стр1.СуммаДоставки / стр1.Количество);
		КонецЕсли;	
		стр1.тариф = тариф1;
	КонецЕсли;
	
	стр1.Комментарий = ПолучитьКомментарий(стр1.Заказ);//функция как в Заказе покупателя - специально так, чтобы не перепроводить Заказ!
	
Если МенятьАдрес тогда
	//----------------Находим адрес по заказу: Адрес доставки из Заказа, Адрес доставки... 02..35, Факт.Юр.-----------------------
	 сАдрес = ПолучитьСтруктуруАдреса(стр1.Заказ); 
	 
	 Если стр1.АдресДоставки <> сАдрес.Адрес тогда
		сообщить(строка(стр1.номерСтроки)+") Адрес доставки по заказу № "+стр1.Заказ.Номер+" изменен!",СтатусСообщения.Информация);  
		стр1.АдресДоставки =  сАдрес.Адрес;
	 КонецЕсли;
	
 	 стр1.Координаты    =  сАдрес.Координаты;
	 
	 Если стр1.Координаты<>"" тогда //12.03.2019 - НЕ находим!
		 
		Если СчитатьРасстояния тогда 
 			стр1.расстояние = РассчитатьРасстояниеМеждуТочкамиГугл(предКоординаты, стр1.Координаты);//считаем расстояние 1 раз!
		КонецЕсли;
		
	 Иначе // пустые координаты?!	 
		 
		 	//находим координаты по адресу И пишем их в Адрес (по виду адреса)!
			АдресФиниш = сАдрес.Регион + " " + сАдрес.Город + " " + сАдрес.Улица + " " +  сАдрес.Дом;
			Если СокрЛП(сАдрес.Регион)="" или сокрЛП(сАдрес.Город)="" или сокрЛП(сАдрес.Дом)="" тогда  //если не заполнен (улина не обязательно!)
				АдресФиниш = сАдрес.Адрес;
			КонецЕсли;	
			
			сообщить(строка(стр1.номерСтроки)+") идёт поиск координат по адресу: "+строка(АдресФиниш),СтатусСообщения.Информация); 
			стр1.Координаты    = ОбменСУТИнтернетМагазин.получитьКоординаты(АдресФиниш);//50 тыс. в день!
			
			Если стр1.Координаты="" тогда // всё равно нет!
				сообщить(строка(стр1.номерСтроки)+") НЕ определены координаты по Адресу: "+АдресФиниш+"! Не все поля адреса заполнены! Требуется установить Координаты вручную!",СтатусСообщения.Внимание);  
				стр1.расстояние = 0;
				
			иначе //нашли координаты... 
				ЗаписатьКоординатыВАдресПоЗаказу(стр1.Контрагент, сАдрес.Вид,  стр1.Координаты); //12.03.2019 - СРАЗУ пишем в нужный вид адреса!
				
				Если СчитатьРасстояния тогда //находим координаты по адресу И пишем их в Адрес (по виду адреса)!
		 			стр1.расстояние = РассчитатьРасстояниеМеждуТочкамиГугл(предКоординаты, стр1.Координаты);//считаем расстояние 1 раз!
				КонецЕсли;
				
			КонецЕсли;
		
	 КонецЕсли;
	
КонецЕсли;

КонецПроцедуры

функция КоординатыБлизки(предКоординаты,стр1Координаты, ВернутьКМ=ЛОЖЬ)
	
	дRмin = 25; // --- на расстоянии 10 - 20 км. - это близко!
	R  = 6378; // средний радиус Земли в км. от 6378.1 экваториальный до 6356.8 полярный
	pi180 = 3.1415926536/180; // градусы >> радианы	
	
	Если предКоординаты="" или стр1Координаты="" тогда // нельзя сравнивать пустые координаты
		если ВернутьКМ тогда рез = 0; иначе рез=ЛОЖЬ; КонецЕсли;
		возврат рез;
	иначеЕсли предКоординаты=стр1Координаты тогда
		если ВернутьКМ тогда рез = 0; иначе рез=Истина; КонецЕсли;
		возврат рез;
	КонецЕсли;	
		
	попытка
	з1 = найти(предКоординаты,",");        						   з2 = найти(стр1Координаты,",");
	Д1 = число(лев(предКоординаты,з1-1));  						   Д2 = число(лев(стр1Координаты,з2-1));  
	ш1 = число(прав(предКоординаты,стрДлина(предКоординаты)-з1));  ш2 = число(прав(стр1Координаты,стрДлина(стр1Координаты)-з2));
	исключение
		если ВернутьКМ тогда рез = 0; иначе рез=ЛОЖЬ; КонецЕсли;
		возврат рез;
	КонецПопытки;
	
	знакД = ?(Д2>=Д1, 1, -1);
	знакШ = ?(ш2>=ш1, 1, -1);
	дД = знакД*(Д2-Д1)*pi180*R;  // 1 градус  = 111 км  ( д2-д1 < 0.1 )
	
	Rш = R*cos( (Ш1+Ш2)* pi180 ); // радиус на средней широте 50-60 градусов 0,64 - 0.5 x R
	дШ = знакШ*(Ш2-Ш1)*pi180*Rш; // 1 градус = 56 км   (  ш2-ш1 < 0.2 )
	
	дR = 1.4 * окр( sqrt(дШ*дШ + дД*дД),1); //пифагор - сразу 2 катета и доп.коэффициент как от гипотенузы   до 0.1 км
	
	Если ВернутьКМ 
		тогда рез = дR;
		Иначе рез = (дR<=дRмin);
	КонецЕсли;
	
	возврат рез;
	
КонецФункции	

//+++ 12.03.2019 -------------------------------------------------------------------------------	
процедура ЗаписатьКоординатыВАдресПоЗаказу(стр1Контрагент, ВидАдреса, Координаты="")
	
	рс = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	рс.Объект= стр1Контрагент;
	рс.Тип   = Перечисления.ТипыКонтактнойИнформации.Адрес;
	рс.Вид   = ВидАдреса;
	рс.Поле10 = Координаты;
	попытка
		рс.Записать(Истина); // перезапись
    	сообщить("В "+строка(ВидАдреса)+" для контрагента: "+стр1Контрагент+" - успешно записаны координаты: "+Координаты, СтатусСообщения.Информация);
	исключение
    	сообщить("Ошибка при записи Координат в "+строка(ВидАдреса)+" для контрагента: "+стр1Контрагент+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
КонецПроцедуры

Функция РассчитатьРасстояниеМеждуТочкамиГугл(НачальныеКоординаты,КонечныеКоординаты) Экспорт 
	расстояниеКМ = 0;
	
	Если НачальныеКоординаты=КонечныеКоординаты или НачальныеКоординаты="" или КонечныеКоординаты="" тогда
		расстояниеКМ = 0;
	иначе	
		дR = КоординатыБлизки(НачальныеКоординаты,КонечныеКоординаты, Истина);  // уменьшаем расчеты расстояний для одинаковых адресов
		Если дR<=25 тогда  // по пифагору, c запасом на катеты
		расстояниеКМ = дR;
		сообщить("точки рядом ["+НачальныеКоординаты+" - "+КонечныеКоординаты+"] Расстояние <= "+строка(расстояниеКМ)+" км.");
		иначе			
		структура1 = ПолучитьМаршрут(НачальныеКоординаты,КонечныеКоординаты); 
		расстояниеКМ = структура1.distance;  //12.03.2019  googleapis.com
		КонецЕсли;
	КонецЕсли;
	возврат расстояниеКМ; // округляем до 10 км.
КонецФункции


//ТрКомментарий пишется в  НомерОчереди = -1 !
функция ПолучитьКомментарий(зак)
Комм = ""; 	
	Запрос = Новый Запрос;  //все отгрузки по 1 заказу
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоПроезду.Заказ КАК Заказ,
	               |	ИнформацияПоПроезду.Комментарий
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду
	               |ГДЕ
	               |	ИнформацияПоПроезду.Заказ = &Заказ
	               |	И ИнформацияПоПроезду.НомерОчереди = -1
	               |";
	
	Запрос.УстановитьПараметр("Заказ", зак);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
		Если  Выборка.Следующий() тогда
			Комм = выборка.Комментарий;
		КонецЕсли;
возврат Комм;
КонецФункции


////поиск ВСЕХ Не Отгруженных Заказов!
Функция ПроверитьОтгрузкуПоЗаказу(СсылкаЗаказ, Дата1) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	              	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ,
	              	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) КАК Количество
	              	|ИЗ
	              	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	              	|			,
	              	|			ЗаказПокупателя В (&СсылкаЗаказ)
	              	|				И ЗаказПокупателя.ДатаОтгрузки <= &Дата
	              	|				И ЗаказПокупателя.Дата <= &Дата) КАК ЗаказыПокупателейОстатки
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ЗаказыПокупателейОстатки.ЗаказПокупателя
	              	|
	              	|ИМЕЮЩИЕ
	              	|	СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) <> 0
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	Заказ
	              	|АВТОУПОРЯДОЧИВАНИЕ";
					
	Запрос.УстановитьПараметр("СсылкаЗаказ",СсылкаЗаказ);
	Запрос.УстановитьПараметр("Дата",КонецДня(Дата1));
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ"); //Выгрузить();//
	
	возврат Массив;
	
КонецФункции

//+++ только реализации 
Функция ПеречитатьСписокОтгрузок(массивЗаказов, минДатаЗаказов, максДата=неопределено) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РеализацияТоваровУслуг.ЗаказПокупателя КАК ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(
	               |			&НачалоПериода, &максДата
	               |			,
	               |			,
	               |			ЗаказПокупателя В (&МассивЗаказов)
	            //   |				И ДокументПродажи <> NULL
	           //    |				И ДокументПродажи.Проведен
			   		|) КАК РеализацияТоваровУслуг
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗаказПокупателя
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	//только если реализация проведена - !
	Запрос.УстановитьПараметр("МассивЗаказов",массивЗаказов);
	Запрос.УстановитьПараметр("НачалоПериода", минДатаЗаказов);
	Запрос.УстановитьПараметр("максДата", ?(максДата=неопределено, КонецДня(ТекущаяДата()), КонецДня(максДата) ) );
	//#Если Сервер тогда
	результат = Запрос.Выполнить();
	рез = результат.Выгрузить().ВыгрузитьКолонку("ЗаказПокупателя");
	
	возврат рез;
	//#КонецЕсли
КонецФункции



//------Распознование адреса------------------
// начиная   с n до 6 поля, 7=7
	//стр2.Колонки.Добавить("Поле1");//индекс 
	//стр2.Колонки.Добавить("Поле2");//Область
	//стр2.Колонки.Добавить("Поле3");//Район
	//стр2.Колонки.Добавить("Поле4");//город
	//стр2.Колонки.Добавить("Поле5");//село
	//стр2.Колонки.Добавить("Поле6");//улица
	//стр2.Колонки.Добавить("Поле7");//дом
//
процедура Распознать(знач1, n)
	нКон = 0;	
	знач1 = СокрЛП(знач1);
	
		Если стрДлина(СокрЛП(знач1))=6 тогда
		знач2 = "";
			попытка 
				знач2 = Формат(Число(знач1),"ЧГ=0");
			исключение 
			конецПопытки;
			
			Если СокрЛП(знач2)=СокрЛП(знач1) тогда //индекс только из цифр
			нКон = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если (Найти(знач1," обл")>0) или (Найти(нрег(знач1),"обл.")>0) или (Найти(нрег(знач1),"область")>0) 
			или (Найти(нрег(знач1),"республика")>0) или (Найти(нрег(знач1),"респ.")>0) тогда 
			нКон = 2; 
			Если ( Найти( нрег(знач1),"московская обл")>0 ) тогда
				знач1 = "Московская обл";
			КонецЕсли;	
			
		ИначеЕсли (Найти(нрег(знач1),"ярославль")>0) тогда
			нКон = 4;
			знач1 = "Ярославль"; // регион, но для нас - это Город!
		ИначеЕсли (Найти(нрег(знач1),"москва")>0) и (n<=2) тогда  //+++ 12.10.2011
			нКон = 4;
			знач1 = "Москва"; // регион, но для нас - это Город!
		ИначеЕсли (Найти(знач1,"МКАД")>0) тогда
			нКон = 4;
		иначеЕсли (знач1="МО") тогда
			нКон = 2;
			знач1 = "Московская обл"; // регион!
			
		ИначеЕсли (Найти(нрег(знач1)," р-н")>0) или (Найти(нрег(знач1)," р-он")>0) или (Найти(нрег(знач1)," район")>0) тогда
			нКон = 3;
		иначеЕсли (Найти(нрег(знач1),"г.")>0)   или (Найти(нрег(знач1),"город ")>0) или (Найти(нрег(знач1)," г")=СтрДлина(знач1)-1) тогда
			нКон = 4;
		иначеЕсли (Найти(нрег(знач1),"пос.")>0) или (Найти(нрег(знач1),"п.")=1) или (Найти(нрег(знач1),"поселок ")>0) или ( Найти(нрег(знач1)," п")=СтрДлина(знач1)-1)
			  ИЛИ (Найти(нрег(знач1),"сел.")>0) или (Найти(нрег(знач1),"с.")=1) или (Найти(нрег(знач1),"село ")>0) или ( Найти(нрег(знач1)," с")=СтрДлина(знач1)-1)
			  или (Найти(нрег(знач1),"ст.")>0)  или (Найти(нрег(знач1),"станция")>0)
			  ИЛИ (Найти(нрег(знач1),"дер.")>0) или (Найти(нрег(знач1),"деревня ")>0) тогда
			нКон = 4;
		иначеЕсли (Найти(нрег(знач1),"ул")>0)   или (Найти(нрег(знач1),"улица")>0) 
			  или (Найти(нрег(знач1),"пр-т")>0)  или (Найти(нрег(знач1),"проспект")>0)
			  или (Найти(нрег(знач1),"тр-т")>0)  или (Найти(нрег(знач1),"тракт")>0)
			  или (Найти(нрег(знач1),"пр-д")>0)  или (Найти(нрег(знач1),"проезд")>0) или (Найти(нрег(знач1),"пр.")>0)
			  или (Найти(нрег(знач1),"км.")>0)   или  (Найти(нрег(знач1),"километр")>0) 
			  или (Найти(нрег(знач1),"дор.")>0)  или  (Найти(нрег(знач1),"дорога")>0) 
			  или (Найти(нрег(знач1),"пл-дь")>0) или (Найти(нрег(знач1),"площадь")>0)
			  или (Найти(нрег(знач1),"пер.")>0)  или (Найти(нрег(знач1),"переулок")>0)
			  или (Найти(нрег(знач1),"ш.")>0)    или (Найти(нрег(знач1),"шоссе")>0) тогда
			нКон = 6;
// город, улица, дом  / или Обл., Район, деревня, дом
		иначеЕсли (Найти(нрег(знач1),"д.")>0) или (Найти(нрег(знач1),"дом")>0)
			 или  (Найти(нрег(знач1),"стр.")>0) или (Найти(нрег(знач1),"строение ")>0)или (n=7) тогда
			нКон = 7;
		КонецЕсли;	
		
	Знач1 = СокрЛП(знач1);
	Если Знач1="" тогда
		n=0;
	КонецЕсли;	
	
	n = нКон;//+++
	
Конецпроцедуры		

процедура РазбитьСтрокуНаПоля(стр0, ТаблЗнач1)
	
ТаблЗнач1 = неопределено;
ТаблЗнач1 =новый ТаблицаЗначений;
ТаблЗнач1.Колонки.Добавить("n");
ТаблЗнач1.Колонки.Добавить("Значение");

стр1 = стр0;// иначе значение меняется!

строка1 = СокрЛП(стр1);
Если строка1<>"" тогда 
		
		i=найти(строка1,","); L = стрДлина(строка1);
		n=1;
		пока i>0 и n<=7 цикл
		знач1 = СокрЛП(Лев(Строка1, i-1));
		
		//!!! распознавание - что это такое
		Распознать(знач1, n); 
		// переделывает значения n!
		
		Если n>0 тогда
			строка111 = ТаблЗнач1.Добавить();
			строка111.n = n;
			строка111.Значение = знач1; // запишем 
		иначе 
			//сообщить("Не распознано поле №"+n+" = '"+знач1+"' (для адреса: "+стр1+")");
			КонецЕсли;	
		n=n+1;
		Строка1 = Прав(Строка1, L-i);
		i=найти(строка1,","); L = стрДлина(строка1);
		КонецЦикла;	
КонецЕсли;

КонецПроцедуры


функция ОбработатьАдрес(Адрес1, НомерПоля1=2, НомерПоля2=6) Экспорт
	
	Табзнач1 = Неопределено;
	РазбитьСтрокуНаПоля(Адрес1, Табзнач1);
	рез = "";
	
	для i=0 по Табзнач1.количество()-1 цикл
		стр1 = Табзнач1[i];
	     //регион     //город
		Если (стр1.n>=НомерПоля1) и (стр1.n<=НомерПоля2) тогда
			рез = рез +СокрЛП(стр1.Значение)+", ";
		КонецЕсли;
	КонецЦикла;
	рез = Лев(рез, стрДлина(рез)-2);
	возврат рез;
	
КонецФункции	

функция ПолучитьКоординатыПоАдресуИзИнтернета(адрес1="Ярославль", Поставщик = "Яндекс") Экспорт
	
		рез = "";
		
	Если Поставщик = "Яндекс" Тогда
		рез = ПроизвестиГеокодинг_Яндекс(адрес1);
	ИначеЕсли Поставщик = "Гугл" Тогда
		рез = ПроизвестиГеокодинг_Гугл(адрес1);
	ИначеЕсли Поставщик = "2ГИС" Тогда
		рез = ПроизвестиГеокодинг_Рамблер(адрес1);
	ИначеЕсли Поставщик = "Рамблер" Тогда
		рез = ПроизвестиГеокодинг_Рамблер(адрес1);
	КонецЕсли;

		
	Возврат рез;
	
КонецФункции


//Процедура выводит в таблицу данные геокдинга Яндекса
//
//Параметры:
// ТекАдрес - Строка
функция ПроизвестиГеокодинг_Яндекс(ТекАдрес="Ярославль")
	рез = "";
	Яндекс = Новый HTTPСоединение("geocode-maps.yandex.ru");
	ВременныйФайл = КаталогВременныхФайлов() + "Yandex_geocode_" + СокрЛП(Новый УникальныйИдентификатор);
	Попытка
		Яндекс.Получить("/1.x/?geocode=" + ТекАдрес + "&results=10", ВременныйФайл);
	Исключение
		Сообщить("Ошибка при попытке геокодировать по яндексу адрес: " + ТекАдрес);
		Сообщить(ОписаниеОшибки());
		Возврат рез;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайл);
	
	ПостроительDOM 			= Новый ПостроительDOM;
	ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
	
	СписокText 				= ДокументДОМ.ПолучитьЭлементыПоИмени("text");
	СписокPos 				= ДокументДОМ.ПолучитьЭлементыПоИмени("pos");
		
	Если (СписокText.Количество() = 0) ИЛИ (СписокPos.Количество() = 0) Тогда
		Возврат рез;	
	КонецЕсли;
	
	Для i = 0 по СписокText.Количество()-1 Цикл
		Координаты = СписокPos[i].ТекстовоеСодержимое;
		Разделитель = Найти(Координаты," ");
		Широта = Число(Сред(Координаты, Разделитель + 1));
		Долгота = Число(Лев(Координаты, Разделитель - 1));
		
		Если Широта = 0 ИЛИ Долгота = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокText.Количество() > i Тогда
//			стрАдрес.Адрес = СписокText[i].ТекстовоеСодержимое;
			рез =  Долгота+","+Широта;
		КонецЕсли;		
	КонецЦикла;
возврат рез;	
КонецФункции

//Процедура выводит в таблицу данные геокдинга Гугл
//
//Параметры:
// ТекАдрес - Строка
Функция ПроизвестиГеокодинг_Гугл(ТекАдрес="Ярославль")
	
	рез = ОбменСУТИнтернетМагазин.получитьКоординаты( ТекАдрес );
	возврат рез;
	
КонецФункции


//Процедура выводит в таблицу данные геокдинга Рамблер
//
//Параметры:
// ТекАдрес - Строка
Функция ПроизвестиГеокодинг_Рамблер(ТекАдрес)
	рез = "";
	ТемпАдрес = СтрЗаменить(ТекАдрес, " ", "+");
	
	Рамблер = Новый HTTPСоединение("maps.rambler.ru");	
	ВременныйФайл = КаталогВременныхФайлов() + "Рамблер_geocode_" + СокрЛП(Новый УникальныйИдентификатор);
	Попытка
		Рамблер.Получить("/search/?&a=search&q=" + ТемпАдрес + "&n=10", ВременныйФайл);
	Исключение
		Сообщить("Ошибка при попытке геокодировать по Рамблер адрес: " + ТекАдрес);
		Сообщить(ОписаниеОшибки());
		Возврат рез;
	КонецПопытки;
	
	а = 1;
	Т = Новый ТекстовыйДокумент;
	Т.Прочитать(ВременныйФайл);
	СтрокаОтвет = Т.ПолучитьТекст();
	Результат = UnicodeEncode(СтрокаОтвет);
	Если Результат Тогда
		СтруктураJSON = ЗаполнитьСтруктуруИзОтветаJSON(СтрокаОтвет);
	КонецЕсли;
	
	МассивРезультатов = СтруктураJSON.res;
	//обрабатываем элементы массива - только адреса. POI можно обработать отдельно пожеланию
	Для Каждого Результат Из МассивРезультатов Цикл
		Для Каждого ТекРезультат Из Результат.matches Цикл				
			//стрАдрес = ТаблицаАдресов.Добавить();
			Долгота = Число(ТекРезультат.x);
			Широта = Число(ТекРезультат.y);
			рез = Долгота+","+Широта;
			
			//Если Результат.type = "addr" Тогда  //Результат.type = "poi" - содержит в себе список точек интереса
			//	стрАдрес.Адрес = ТекРезультат.addr;
			//Иначе
			//	стрАдрес.Адрес = ТекРезультат.name + " - " + ТекРезультат.addr;
			//КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	возврат рез;
КонецФункции

	
	
//---------------------------------------------------------------------- 
функция ПолучитьПредставление(Широта,Долгота) Экспорт//+++
		ШиротаЧ  = Число(Широта); 
	ДолготаЧ = Число(Долгота);
	Если ШиротаЧ>=0 тогда
		надписьШ = "с.ш. ";
	иначе 
		ШиротаЧ = -ШиротаЧ;
		надписьШ = "ю.ш. ";
	КонецЕсли;	
	Широта  = СокрЛП(Строка(Цел(ШиротаЧ)))+"°"+СокрЛП(Строка( Цел((ШиротаЧ - Цел(ШиротаЧ))*60) ))+"'"+СокрЛП(Строка(  Окр( (ШиротаЧ - Цел(ШиротаЧ) - Цел((ШиротаЧ - Цел(ШиротаЧ))*60)/60)*3600,0)  ))+""""; // 1' = 1 сухопутн. миля = 1 600 м >> 1" = 26,7 м
    	
	Если ДолготаЧ>=0 тогда
		надписьД = "в.д.";
	иначе 
		ДолготаЧ = - ДолготаЧ;
		надписьД = "з.д.";
	конецЕсли;	                  
	Долгота = СокрЛП(Строка(Цел(ДолготаЧ)))+"°"+СокрЛП(Строка( Цел((ДолготаЧ - Цел(ДолготаЧ))*60) ))+"'"+СокрЛП(Строка(  Окр( (ДолготаЧ - Цел(ДолготаЧ) - Цел((ДолготаЧ - Цел(ДолготаЧ))*60)/60)*3600,0)  ))+""""; // 1' = 1 морск. миля = 1 825 м >> 1"=30,5 м 
	
    возврат Широта+надписьШ+", "+Долгота+надписьД;
	
конецФункции	

функция получитьРасстояние12(город1, город2) Экспорт
	рез=0;
	
	Если СокрЛП(город1)="" или СокрЛП(город2)="" тогда
		возврат 0;
	КонецЕсли;
	город1 =СокрЛП(город1);
	город2 =СокрЛП(город2);
	
	если нрег(город1)=нрег(город2) тогда
		Возврат 0;
	КонецЕсли;	
		
//--------обработка удаления префиксов-------------------------
	табЗамены = новый ТаблицаЗначений;
	табЗамены.Колонки.Добавить("Значение");
	табЗамены.Колонки.Добавить("Размещение");
	стр1 = табЗамены.Добавить();
	стр1.Значение = "г."; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "пос."; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "п."; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	//стр1.Значение = "д."; стр1.Размещение="нач";
	//стр1 = табЗамены.Добавить();
	стр1.Значение = "дер."; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "г "; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "п "; стр1.Размещение="нач";
	стр1 = табЗамены.Добавить();
	стр1.Значение = " г"; стр1.Размещение="кон";
	стр1 = табЗамены.Добавить();
	стр1.Значение = " п"; стр1.Размещение="кон";
	стр1 = табЗамены.Добавить();
	стр1.Значение = " д"; стр1.Размещение="кон";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "город"; стр1.Размещение="везде";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "поселок"; стр1.Размещение="везде";
	стр1 = табЗамены.Добавить();
	стр1.Значение = "деревня"; стр1.Размещение="везде";
	
для k=0 по табЗамены.Количество()-1 цикл
стр1 = табЗамены[k];		
	i=Найти(нрег(город1),стр1.Значение); L=стрДлина(город1);  j = стрДлина(стр1.Значение);
	Если стр1.размещение="нач" тогда
		Если i=1 тогда
		город1 = Прав(город1, L - i - j + 1);
		прервать; // как только нашли - все, больше проверять не надо!
		КонецЕсли;
	иначеЕсли стр1.размещение="кон" тогда
		Если i=(L-j+1) тогда
		город1 = Лев(город1, i-1);
		прервать;
		КонецЕсли;
	иначе //Если стр1.размещение="везде" тогда
		Если i>0 тогда
		город1 = Лев(город1, i-1) + Прав(город1, L - i - j + 1);
		прервать;
		КонецЕсли;
	КонецЕсли;
//------------------------------
	i=Найти(нрег(город2),стр1.Значение); L=стрДлина(город2);  j = стрДлина(стр1.Значение);
	Если стр1.размещение="нач" тогда
		Если i=1 тогда
		город2 = Прав(город2, L - i - j + 1);
		прервать;
		КонецЕсли;
	иначеЕсли стр1.размещение="кон" тогда
		Если i=(L-j+1) тогда
		город2 = Лев(город2, i-1);
		прервать;
		КонецЕсли;
	иначе //Если стр1.размещение="везде" тогда
		Если i>0 тогда
		город2 = Лев(город2, i-1) + Прав(город2, L - i - j + 1);
		прервать;
		КонецЕсли;
	КонецЕсли;
 КонецЦикла;   	
//--------------------------------------------------------	
	город1 =СокрЛП(город1);
	город2 =СокрЛП(город2);
	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	Расстояния.Расстояние
               |ИЗ
               |	РегистрСведений.Расстояния КАК Расстояния
               |ГДЕ
               |	Расстояния.Город1 = &Город1
               |	И Расстояния.Город2 = &Город2";

Запрос.УстановитьПараметр("Город1", город1 );
Запрос.УстановитьПараметр("Город2", город2 );

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() тогда
	рез = выборка.расстояние;
КонецЕсли;	
	
	возврат рез;
	
КонецФункции

//прямой расчет напрямую  х 1.4  по "катетам" треугольника дШ х дД
функция получитьРасстояние(к1,к2) Экспорт
	рез = КоординатыБлизки(к1,к2, Истина); // гипотенуза -> по "катетам"
 	возврат рез;
КонецФункции

функция получитьМаршрут(Адрес1,Адрес2) экспорт  
	
	Если Адрес1="" или Адрес2="" или Адрес1=Адрес2 тогда
	  distance = 0;		
	иначе
	 distance = ОбменСУТИнтернетМагазин.получитьРасстояниеПоКоординатам(Адрес1,Адрес2); //11.03.2019
	КонецЕсли; 

 рез = новый Структура;
 рез.Вставить("distance", distance);
 рез.Вставить("location", Адрес2);
 
 возврат рез;
 
 КонецФункции

// поиск расстояний между всеми городами!
процедура  РассчитатьРасстояние() Экспорт
	
	i=1; город1 = "Ярославль";
	//для каждого стр0 из ЭлементыФормы.Заказы цикл  
	//стр1 = ЭлементыФормы.Заказы.ДанныеСтроки(стр0);//для порядка
   	 для каждого стр1 из Заказы цикл
		 
		город20 = ОбработатьАдрес(стр1.АдресДоставки, 4,4); //город
		Если Найти(город20,",")>0 тогда   //+++ 12.10.2011
			город20 = Лев(город20, Найти(город20,",")-1);
		КонецЕсли;
		
		город21 = город20;
		р12=0; флагМосква=Истина;
		
		Если город20="Москва" тогда//21.09.2011
			город2 = город20+", "+ОбработатьАдрес(стр1.АдресДоставки, 6, 7); // ул, дом.
			город21 = город2;
			р12 = получитьРасстояние12(город1, город2);
	 		Если р12<>0 тогда
		    стр1.Расстояние = р12;// км.
			иначе // наоборот
			р12 = получитьРасстояние12(город2, город1);
		    стр1.Расстояние = р12;// км.
			КонецЕсли;
		КонецЕсли;
		
		Если р12=0 тогда// если не нашли с улицей, ищем по городу
			город2 = город20;
			р12 = получитьРасстояние12(город1, город2);
	 		Если р12<>0 тогда
		    стр1.Расстояние = р12;// км.
			иначе // наоборот
			р12 = получитьРасстояние12(город2, город1);
		    стр1.Расстояние = р12;// км.
			КонецЕсли;
		КонецЕсли;	

		Если р12=0 и Найти(город1,",")>0 тогда// если не нашли с улицей 1го города, ищем по городу
			город11 = Лев(город1, Найти(город1,",")-1);
			р12 = получитьРасстояние12(город11, город2);
	 		Если р12<>0 тогда
		    стр1.Расстояние = р12;// км.
			иначе // наоборот
			р12 = получитьРасстояние12(город2, город11);
		    стр1.Расстояние = р12;// км.
			КонецЕсли;
		КонецЕсли;	

		Если город20="Москва" тогда//29.09.2011 сохраним для следующего шага
			город2 = город21; // ул, дом.
		КонецЕсли;

	Город1 = Город2; // для последующего хода...		
	КонецЦикла;
	
	
	//++++++++++ в последнюю строку - прибавим расстояние до Ярославля
	Город2 = "Ярославль";
	р12 = получитьРасстояние12(город1, город2);
	 Если р12<>0 тогда
		стр1 = Заказы[Заказы.Количество()-1];
	    стр1.Расстояние = стр1.Расстояние + р12;// км.
    иначе 
		р12 = получитьРасстояние12(город2, город1);
	 	Если р12<>0 тогда
		стр1 = Заказы[Заказы.Количество()-1];
	    стр1.Расстояние = стр1.Расстояние + р12;// км.
    	иначе 
		//Сообщить("Не найдено расстояние от: "+Город1+" до "+Город2, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

/////////////////////////РАБОТА С JSON //////////////////////////////////////////
Функция СформироватьСтрокуJSONИзМассива(Объект)
	
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент) + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
	
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	
	СтрокаJSON = "{";
	
	Для каждого Элемент Из Объект Цикл
		
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Элемент.Значение) + """";
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			// преобразование в unixtime
			СтрокаJSON = СтрокаJSON + Формат(ТекущаяДата() - Дата(1970,1,1,1,0,0), "ЧГ=0");
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
			
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
			
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
		
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
	
КонецФункции

Функция СформироватьСтрокуJSON(Объект) Экспорт
	
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		// преобразуем таблицу значений в массив структур - работает дольше, но кода меньше
		// если нужна скорость, то нужно отдельно обработать таблицу значений
		
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
		
	КонецЕсли;
	
	Возврат СтрокаJSON;
	
КонецФункции

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	// удалим открывающий символ структуры(массива)
	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			// вложенная структура
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		
		ИначеЕсли ПервыйСимвол = "[" Тогда
			// вложенный массив
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
			
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			// структура закончилась
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			// массив закончился
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			Если ТипДанных = "Структура" Тогда
				//ПервыйКавычка = Ложь;
				//Если Лев(ТекстJSON, 1) = """" Тогда
				//	ПервыйКавычка = Истина;
				//КонецЕсли;
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					// неверный формат, прервемся
					Прервать;
				КонецЕсли;
				
				//ПредпоследнийКавычка = Ложь;
				//Если Сред(ТекстJSON, Поз - 1, 1) = """" Тогда
				//	ПредпоследнийКавычка = Истина;
				//КонецЕсли;

				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз - 1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения, """", "");
				
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
								
				Если Лев(ТекстJSON, 1) = "{" Тогда
					// значение является структурой
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
					
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					// значение является массивом
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
					
				Иначе
					// обычное значение
					ПервыйКавычка = Ложь;
					ПредпоследнийКавычка = Ложь;
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						
						Если Символ = """" Тогда
							Если ПервыйКавычка Тогда
								ПредпоследнийКавычка = Истина;
							Иначе
								ПервыйКавычка = Истина;
							КонецЕсли;							
						КонецЕсли;
						
						Если (Символ = "," И ((ПервыйКавычка И ПредпоследнийКавычка) Или (Не ПервыйКавычка И Не ПредпоследнийКавычка))) ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//ПредпоследнийКавычка = Ложь;
					//Если Сред(ТекстJSON, Поз - 1, 1) = """" Тогда
					//	ПредпоследнийКавычка = Истина;
					//КонецЕсли;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
						
					Иначе
						Значение = Лев(ТекстJSON, Поз - 1);
						Значение = СтрЗаменить(Значение, """", "");
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));						
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
					
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);
				
			ИначеЕсли ТипДанных = "Массив" Тогда
				
				// обычное значение
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				//ПредпоследнийКавычка = Ложь;
				//Если Сред(ТекстJSON, Поз - 1, 1) = """" Тогда
				//	ПредпоследнийКавычка = Истина;
				//КонецЕсли;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
					
				Иначе
					Значение = Лев(ТекстJSON, Поз - 1);
					Значение = СтрЗаменить(Значение, """", "");
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
				
			КонецЕсли;
				
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON) Экспорт
	
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");	// заменим последовательность \" на "
	//ТекстJSON = СтрЗаменить(ТекстJSON, """", "");		// а теперь удалим все кавычки
	
	Если Лев(ТекстJSON, 1) = "{" Тогда
		// начало структуры
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
		
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		// начало массива
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция КодСимволаASCII(Символ) 
   КодUNICODE = КодСимвола(Символ); 
   Если ((КодUNICODE > 1039) И (КодUNICODE < 1104)) Тогда 
       Возврат (КодUNICODE - 848); 
   ИначеЕсли КодUNICODE = 8470 Тогда 
       Возврат 185; 
   ИначеЕсли КодUNICODE = 1105 Тогда 
       Возврат 184; 
   ИначеЕсли КодUNICODE = 1025 Тогда 
       Возврат 168; 
   Иначе 
       Возврат КодUNICODE; 
   КонецЕсли; 
КонецФункции

Функция URLEncode(value)

    table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
            "%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
            "%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
            "%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
            "%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
            "%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
            "%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
            "%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
            "%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
            "%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
            "%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
            "%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
            "%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
    
    result = "";        
            
    length = СтрДлина( value );        
    
    Для i = 1 По  length Цикл        
        symbol = Сред( value, i, 1 );        
        //code = КодСимвола( symbol );    
        code = КодСимволаASCII( symbol );
        result = result + Сред( table, code*3 + 1, 3 );        
    КонецЦикла;
    
    
    
    Возврат result;
КонецФункции
/////////////////////////РАБОТА С JSON //////////////////////////////////////////

//Функция декодирует полученный unicod текст - из ответа геокодера Рамблера
// в привычный нам
//Параметры:
// Строка
//Возвращаемое значение:
// Строка
Функция UnicodeEncode(Строка) Экспорт 
	Результат = Истина;
	
	Попытка
		//регулярное выражение
		Рег = Новый COMОбъект("VBScript.RegExp");
		Рег.IgnoreCase = Истина;
		Рег.Global = Истина;
		Рег.Multiline = Ложь;
		Рег.Pattern = "u[0-9a-f]+";
		Колекция = Рег.Execute(Строка);
		Для Каждого Элемент Из Колекция Цикл
			Если СтрДЛина(Элемент.value) = 1 Тогда
				Продолжить;
			КонецЕсли;		
			
			КодСимвола = ПереводЧислаИз16в10(Сред(ВРег(Элемент.value), 2));
			Символ = Символ(КодСимвола);
			Строка = СтрЗаменить(Строка, "\" + Элемент.value, Символ); 
		КонецЦикла;	
	Исключение
		Результат = Ложь;
		Сообщить("Ошибка преобразования из Unicode", СтатусСообщения.Информация);
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПереводЧислаИз16в10(Знач Значение)
	Результат = 0;
	
	//перевод значения в строку
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = СокрЛП(Строка(Значение));
	КонецЕсли;
	
	МаксРазрядЦелых = 0;
	МаксРазрядЦелых = СтрДлина(Значение) - 1;
	
	н = МаксРазрядЦелых;
	Ин = 1;
	Пока н >= 0 Цикл
		ТекЗначение = СтруктураЧисел.Получить(Сред(Значение, Ин, 1)) * Pow(16, н);
		Результат = Результат + ТекЗначение;
		н = н - 1;
		Ин = Ин + 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


ТарифДоставки = "Тариф доставки";


///////////////////////////
СтруктураПоставщиковКарт = Новый Соответствие;
СтруктураПоставщиковКарт.Вставить(0, "Яндекс");
СтруктураПоставщиковКарт.Вставить(1, "Гугл");
СтруктураПоставщиковКарт.Вставить(2, "2ГИС");
СтруктураПоставщиковКарт.Вставить(3, "Рамблер");


СтруктураЧисел = Новый Соответствие;
СтруктураЧисел.Вставить("0", 0);
СтруктураЧисел.Вставить("1", 1);
СтруктураЧисел.Вставить("2", 2);
СтруктураЧисел.Вставить("3", 3);
СтруктураЧисел.Вставить("4", 4);
СтруктураЧисел.Вставить("5", 5);
СтруктураЧисел.Вставить("6", 6);
СтруктураЧисел.Вставить("7", 7);
СтруктураЧисел.Вставить("8", 8);
СтруктураЧисел.Вставить("9", 9);
СтруктураЧисел.Вставить("A", 10);
СтруктураЧисел.Вставить("B", 11);
СтруктураЧисел.Вставить("C", 12);
СтруктураЧисел.Вставить("D", 13);
СтруктураЧисел.Вставить("E", 14);
СтруктураЧисел.Вставить("F", 15);
