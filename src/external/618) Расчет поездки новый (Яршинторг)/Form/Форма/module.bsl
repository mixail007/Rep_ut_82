перем нашиКоординаты, ТарифДоставки,ИмяПапки,ИмяПапки0, ИмяФАЙЛАобр, ИмяЗаголовка, СписокПолейДляСохранения, ДатаФормирования;

перем фЕстьФлаги, флВыводитьСообщенияОЧастичнойОтгрузке, КолДнейНеважности;

перем мМассивПользователейКоторымРазрешеноСохранять, мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять;

перем мСписокОтгрузок, мСписокЗаказов;

перем СписокШаблоновКомментариев;

перем РезБрак, ОбновлятьДанные;

перем суммаМин;//28.03.2019 - сумма для округления и регулирования поля СуммаПрямая

//---------------------------Печать-------------------------------------

Процедура КнопкаВыполнитьНажатие(Кнопка)     // расчет кубатуры
    	Запрос = Новый Запрос;
Если неотгруженные Тогда		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	               |	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
	               |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Артикул,
	               |	ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |			ТОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КолКамеры,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
	               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
	               |					ТОГДА ""нет""
	               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |			КОНЕЦ
	               |	КОНЕЦ КАК КоэффПересчета,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
	               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
	               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
	               |					ТОГДА 1
	               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
	               |			КОНЕЦ
	               |	КОНЕЦ * ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КолПересчета,
	               |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	               |	ЕСТЬNULL(НормыЗагрузки.Ссылка, ""НЕТ"") КАК НормаЗагрузки,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК Количество,
	               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Код,
	               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
	               |	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, ЗаказПокупателя В (&Заказы)) КАК ЗаказыПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
	               |			ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
	               |				И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
	               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
	               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура
	               |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
	               |ГДЕ
	               |	ЗаказПокупателяТовары.Ссылка В(&Заказы)
	               |	И НормыЗагрузки.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки,
	               //|	ДатаОтгрузки,
	               |	Контрагент,
	               |	Заказ
				   |ИТОГИ
	               |	СУММА(КолКамеры),
	               |	СУММА(КолПересчета),
	               |	СУММА(Количество)
	               |ПО
	               |	ОБЩИЕ,
	               |	Заказ
	               |АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("Дата", ЭлементыФормы.ДатаФормы.Значение);
иначе// все как было  - по всей табл.части
Запрос.Текст = "ВЫБРАТЬ
               |	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
               |	ЗаказПокупателяТовары.Ссылка КАК Заказ,
               |	ЗаказПокупателяТовары.Номенклатура,
               |	ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
               |	ВЫБОР
               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |			ТОГДА ЕСТЬNULL(ЗаказПокупателяТовары.Количество, 0)
               |		ИНАЧЕ 0
               |	КОНЕЦ КАК КолКамеры,
               |	ВЫБОР
               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
               |			ТОГДА 0
               |		ИНАЧЕ ВЫБОР
               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
               |					ТОГДА ""нет""
               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
               |			КОНЕЦ
               |	КОНЕЦ КАК КоэффПересчета,
               |	ВЫБОР
               |		КОГДА ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Камеры)
               |				ИЛИ ЗаказПокупателяТовары.Номенклатура В ИЕРАРХИИ (&Крепеж)
               |			ТОГДА 0
               |		ИНАЧЕ ВЫБОР
               |				КОГДА НормыЗагрузки.НормаЗагрузки = 0
               |						ИЛИ НормыЗагрузки.НормаЗагрузки = NULL
               |					ТОГДА 1
               |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
               |			КОНЕЦ
               |	КОНЕЦ * ЗаказПокупателяТовары.Количество КАК КолПересчета,
               |	ЗаказПокупателяТовары.Количество КАК Количество,
               |	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
               |	ЗаказПокупателяТовары.Номенклатура.Код КАК Артикул,
               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
               |	ЕСТЬNULL(НормыЗагрузки.Ссылка, ""НЕТ"") КАК НормаЗагрузкиСсылка,
               |	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
               |		ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
               |			И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка В(&Заказы)
               |	И НормыЗагрузки.ПометкаУдаления = ЛОЖЬ
               |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
               |
               |УПОРЯДОЧИТЬ ПО
                 |	НомерСтроки,
           // |	ДатаОтгрузки,
               |	Контрагент,
               |	Заказ
            //   |	НомерСтроки
               |ИТОГИ
               |	СУММА(КолКамеры),
               |	СУММА(КолПересчета),
               |	СУММА(Количество)
               |ПО
               |	ОБЩИЕ,
               |	Заказ
               |АВТОУПОРЯДОЧИВАНИЕ";
КонецЕсли;				   
Запрос.УстановитьПараметр("Камеры", справочники.Номенклатура.НайтиПоКоду("0001127") ); //+++ 18.04.2012
Запрос.УстановитьПараметр("Крепеж", справочники.Номенклатура.НайтиПоКоду("0000701") ); //+++ 19.04.2012
				          
	//+++( Запрос.УстановитьПараметр("Заказы", Заказы.ВыгрузитьКолонку("Заказ") );
    Мас1 = новый массив;			   
	Для Каждого стр1 из Заказы Цикл
		Если стр1.Флаг или (не фЕстьФлаги) Тогда
			мас1.Добавить(стр1.Заказ);
		КонецЕсли;
	КонецЦикла;	
	Запрос.УстановитьПараметр("Заказы", мас1);
	//+++)
	
	Результат = Запрос.Выполнить(); //ИТОГИ
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ВнешняяОбработка_РасчетКубатуры";
	
	Макет = ПолучитьМакет("Макет");
	
	// Итоги 
 	Выборка.Следующий();
	ОбластьМакетаВсего = Макет.ПолучитьОбласть("ИтогоВсего");
	ОбластьМакетаВсего.Параметры.КолПересчета = Выборка.КолПересчета;
	ОбластьМакетаВсего.Параметры.Количество   = Выборка.Количество;
	ОбластьМакетаВсего.Параметры.СуммаДоставки  = Заказы.Итог("СуммаДоставки");
	
	ВыборкаЗаказ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
  	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗаказ");
	
	АдресаДоставки = Заказы.ВыгрузитьКолонку("АдресДоставки") ;
	ном=0; ВсегоВес = 0; 	ИтогСуммаДоставки = 0; ИтогоКоличество=0; ИтогоКолПересчета=0;
	
	пока ВыборкаЗаказ.Следующий() Цикл
    ОбластьМакета.Параметры.Контрагент =  ВыборкаЗаказ.Контрагент;
	ОбластьМакета.Параметры.НомерЗаказа = ВыборкаЗаказ.Заказ.Номер;
	
	//+++ 23.09.2013
	//ОбластьМакета.Параметры.ДатаОтгрузки = Формат( ?(ВыборкаЗаказ.Заказ.ДатаОтгрузки=Дата(1,1,1), ВыборкаЗаказ.Заказ.Дата + 30 * 86400, ВыборкаЗаказ.Заказ.ДатаОтгрузки), "ДЛФ=DD");
	Если  ВыборкаЗаказ.Заказ.ДатаОтгрузки=Дата(1,1,1) тогда
		ОбластьМакета.Параметры.ДатаОтгрузки = "___.___._____г.";
	Иначе	
		ОбластьМакета.Параметры.ДатаОтгрузки = Формат( ВыборкаЗаказ.Заказ.ДатаОтгрузки, "ДЛФ=DD");    
	КонецЕсли;
	//Если СокрЛП(АдресаДоставки[ном])="" Тогда
	//	ОбластьМакета.Параметры.АдресДоставки = ВыборкаЗаказ.Заказ.АдресДоставки;
	//иначе
	//	ОбластьМакета.Параметры.АдресДоставки = АдресаДоставки[ном];
	//КонецЕсли;
	ном = ном+1;
	ТабДокумент.Вывести(ОбластьМакета);

	
	ОбластьМакетаИтого = Макет.ПолучитьОбласть("ИтогоЗаказ");
	ОбластьМакетаИтого.Параметры.КолПересчета = ВыборкаЗаказ.КолПересчета;
	ОбластьМакетаИтого.Параметры.Количество   = ВыборкаЗаказ.Количество;
		
  	 ПолныйВес = 0;  
	тариф1 = ПолучитьТариф(ВыборкаЗаказ.Контрагент);
	 Если тариф1=0 Тогда
		 тариф1 = 0.00; //рублей
	 КонецЕсли;
	 
	//+++ 20.04.2015 
	СуммаДоставкиПоЗазазу = ВыборкаЗаказ.Заказ.ТрНал +  ВыборкаЗаказ.Заказ.ТрБезНал +ВыборкаЗаказ.Заказ.ТрВЦене;
	Если СуммаДоставкиПоЗазазу = 0 тогда
		Если тариф1>0 Тогда
		 СуммаДоставкиПоЗазазу =  тариф1 * ВыборкаЗаказ.КолПересчета;
		иначе 
		 СуммаДоставкиПоЗазазу = -тариф1 * ВыборкаЗаказ.Количество;
		КонецЕсли;
	КонецЕсли;
	
	//+++ добавка суммы достаки
	стр2 = Заказы.Найти(ВыборкаЗаказ.Заказ, "Заказ");
	Если стр2.СуммаДоставки > СуммаДоставкиПоЗазазу Тогда 
	   delta = стр2.СуммаДоставки - СуммаДоставкиПоЗазазу;
	   ОбластьМакетаИтого.Параметры.СуммаДоставки = строка(СуммаДоставкиПоЗазазу)+" + "+строка(delta);
    Иначе
	   delta = 0;
	   ОбластьМакетаИтого.Параметры.СуммаДоставки = СуммаДоставкиПоЗазазу;
	КонецЕсли;
		
	
	//----------------------------------------------------------------------------
		ВыборкаТовары = ВыборкаЗаказ.выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	    ОбластьМакетаСтр = Макет.ПолучитьОбласть("СтрокаТовар");
		пока ВыборкаТовары.Следующий() Цикл
			ОбластьМакетаСтр.Параметры.Заполнить(ВыборкаТовары);
			//ОбластьМакетаСтр.Область(1,2).Расшифровка = ВыборкаТовары.Номенклатура;
			//ОбластьМакетаСтр.Область(1,3).Расшифровка = ВыборкаТовары.Номенклатура;
			//ОбластьМакетаСтр.Область(1,4).Расшифровка = ВыборкаТовары.Типоразмер;
			//ОбластьМакетаСтр.Область(1,6).Расшифровка = ВыборкаТовары.НормаЗагрузкиСсылка;
			//ОбластьМакетаСтр.Область(1,7).Расшифровка = ВыборкаТовары.НормаЗагрузкиСсылка;
			Если ЗначениеЗаполнено(ВыборкаТовары.Номенклатура.ЕдиницаХраненияОстатков) Тогда
				Вес1 = ВыборкаТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес * ВыборкаТовары.Количество;
			иначе
				Вес1 = 0;
			КонецЕсли;	
			ПолныйВес = ПолныйВес + Вес1;
			ОбластьМакетаСтр.Параметры.Вес = Формат(Вес1,"ЧДЦ=1");
			Если тариф1>0 Тогда  // тариф Для Заказа 1
				СуммаДоставки =  тариф1 * ВыборкаТовары.КолПересчета;
			иначе 
				СуммаДоставки = -тариф1 * ВыборкаТовары.Количество;
			КонецЕсли;
		ОбластьМакетаСтр.Параметры.СуммаДоставки = СуммаДоставки;
			
 		ТабДокумент.Вывести(ОбластьМакетаСтр);
 		КонецЦикла;	
	//----------------------------------------------------------------------------
	  ОбластьМакетаИтого.Параметры.Вес = Формат(ПолныйВес,"ЧДЦ=1");
	  
	   ИтогоКоличество   = ИтогоКоличество   + ВыборкаЗаказ.Количество;
       ИтогоКолПересчета = ИтогоКолПересчета + ВыборкаЗаказ.КолПересчета;
	   ИтогСуммаДоставки = ИтогСуммаДоставки + СуммаДоставкиПоЗазазу + delta; // вцелом по заказам с учетом +++
	
       ВсегоВес = ВсегоВес + ПолныйВес;
	ТабДокумент.Вывести(ОбластьМакетаИтого);
		
	КонецЦикла;
	
	ОбластьМакетаВсего.Параметры.КолПересчета = ИтогоКолПересчета;
	ОбластьМакетаВсего.Параметры.Количество   = ИтогоКоличество;
	
	ОбластьМакетаВсего.Параметры.Вес = Формат(ВсегоВес, "ЧДЦ=0");
	ОбластьМакетаВсего.Параметры.СуммаДоставки  = ИтогСуммаДоставки;
	ТабДокумент.Вывести(ОбластьМакетаВсего);
    ТабДокумент.ТолькоПросмотр      = Истина;
	ТабДокумент.Показать();
     	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечать2(Кнопка)
	//-----------------------------------------------------------------------------------
	ТабДокумент = новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ВнешняяОбработка_РасчетКубатуры_ИнформацияДляПоездки";
	
	Макет = ПолучитьМакет("МакетПроезд");
	
	//Заказы2 = новый ТаблицаЗначений;
	//Заказы2.Колонки.Добавить("Контрагент");
	//Заказы2.Колонки.Добавить("Заказ");
	//Заказы2.Колонки.Добавить("АдресДоставки");
	//Заказы2.Колонки.Добавить("СуммаДоставки");
	//Заказы2.Колонки.Добавить("Ответственный");
	Заказы2 = Заказы.Выгрузить(); 
	
	i=0;  N = Заказы2.Количество();
	пока i<N Цикл
		стр1 = Заказы2[i];
		Если фЕстьФлаги и (Не стр1.Флаг) Тогда //+++ 07.06.2012 по Флагу!!!  не фиксируем заказы без Флага!!!
			Заказы2.Удалить(i); N=N-1;
		иначе 
			i=i+1;
		КонецЕсли;  
	КонецЦикла;
	
	Заказы2.Свернуть("Точка, Контрагент, АдресДоставки, Ответственный", "СуммаДоставки, Количество, Расстояние");
	Заказы2.Сортировать("Точка, Контрагент");  // по точкам!
	
	//---------Сборка номеров в 1 поле------
	Заказы2.Колонки.Добавить("Номер");
	Заказы2.Колонки.Добавить("Комментарий");//02.04.2014
	
	N = Заказы.Количество();
	Для Каждого стр2 из Заказы2 Цикл
		
		СтрПоиска2 = Строка(стр2.Контрагент)+"-"+Строка(стр2.АдресДоставки)+"-"+Строка(стр2.Ответственный);
		номерНакл = "";
		коммент=""; //02.04.2014
		Для i=0 по N-1 Цикл
			стр1 = Заказы[i];
			Если фЕстьФлаги и (Не стр1.Флаг) Тогда
				продолжить;
			КонецЕсли;   
			
			СтрПоиска1 = Строка(стр1.Контрагент)+"-"+Строка(стр1.АдресДоставки)+"-"+Строка(стр1.Ответственный);
			Если СтрПоиска1 = СтрПоиска2 Тогда
				номерНакл = номерНакл  + Строка(стр1.Заказ.Номер)+", ";
				коммент = коммент + сокрЛП(стр1.Комментарий)+", "; //02.04.2014
			КонецЕсли;	
			
		КонецЦикла;	
		
		стр2.Номер = Лев(номерНакл, стрДлина(номерНакл) - 2);
		стр2.Комментарий = Лев(коммент, стрДлина(коммент) - 2); //02.04.2014
		
	КонецЦикла;	
	
	
	//-------------Определение автомобиля---------------------------------
	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Автомобиль");
	ТаблЗнач1.Колонки.Добавить("ГосНомерАвтомобиля");
	ТаблЗнач1.Колонки.Добавить("Водитель");
	
	
	i=0;
	Для Каждого стр1 из Заказы Цикл
		Если фЕстьФлаги и (Не стр1.Флаг) Тогда  //+++
			продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(стр1.Заказ.МаркаАвтомобиля) или ЗначениеЗаполнено(стр1.Заказ.ГосНомерАвтомобиля) Тогда
			ТаблЗнач1.Добавить();
			стр2 = ТаблЗнач1[i];
			стр2.Автомобиль = стр1.Заказ.МаркаАвтомобиля;
			стр2.ГосНомерАвтомобиля = стр1.Заказ.ГосНомерАвтомобиля;
			i=i+1;
		иначеЕсли НЕ неотгруженные Тогда  // проверим по реализации
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Сделка,
			|	РеализацияТоваровУслуг.Проведен,
			|	РеализацияТоваровУслуг.ПометкаУдаления,
			|	РеализацияТоваровУслуг.МаркаАвтомобиля,
			|	РеализацияТоваровУслуг.ГосНомерАвтомобиля,
			|	РеализацияТоваровУслуг.Водитель
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Сделка = &СсылкаЗаказ
			|	И РеализацияТоваровУслуг.Проведен
			|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
			|	И РеализацияТоваровУслуг.Сделка.ПометкаУдаления = ЛОЖЬ";
			Запрос.УстановитьПараметр("СсылкаЗаказ",стр1.Заказ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.МаркаАвтомобиля) или ЗначениеЗаполнено(Выборка.ГосНомерАвтомобиля) Тогда
						ТаблЗнач1.Добавить();
						стр2 = ТаблЗнач1[i];
						стр2.Автомобиль = СокрЛП(Выборка.МаркаАвтомобиля);
						стр2.ГосНомерАвтомобиля = СокрЛП(Выборка.ГосНомерАвтомобиля);
						Если ЗначениеЗаполнено(Выборка.Водитель) Тогда
							Водитель1 = Справочники.ФизическиеЛица.НайтиПоНаименованию(Выборка.Водитель);
							Если не (Водитель1 = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
								ЭтотОбъект.Водитель = Водитель1;	
								стр2.Водитель = Водитель1; 
							иначе 
								Сообщить("В реализации по Заказу "+Выборка.Сделка.Номер+" найден водитель: "+Выборка.Водитель);
								стр2.Водитель = ?(ЗначениеЗаполнено(ЭтотОбъект.Водитель), ЭтотОбъект.Водитель, Выборка.Водитель);
							конецЕсли;
						иначе
							стр2.Водитель = ЭтотОбъект.Водитель;
						конецЕсли;
						i=i+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Автомобиль, ГосНомерАвтомобиля, Водитель");//все телефоны вместе
	//------------------------
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры.Водитель = "Водитель:"; 
	ОбластьМакета.Параметры.ТелефонВодителя = "";
	
	NNN = ТаблЗнач1.Количество();
	Если NNN>0 Тогда // пустые тоже сворачиваются!
		ОбластьМакета.Параметры.АвтомобильГосНомерАвтомобиля = "Автомобиль: "+ТаблЗнач1[0].Автомобиль+"  "+ТаблЗнач1[0].ГосНомерАвтомобиля;
		
		водитель111 = ЭтотОбъект.Водитель;  //физ.лицо уже обновлено...
		
		ОбластьМакета.Параметры.Водитель = ОбластьМакета.Параметры.Водитель + " "+водитель111;
		телВод = ПолучитьКонтактнуюИнформацию(водитель111); //телефон водителя!
		
		ОбластьМакета.Параметры.ТелефонВодителя = ОбластьМакета.Параметры.ТелефонВодителя + телВод;
		
		Если NNN>1 Тогда
			сообщить("В выбранных заказах найдено "+строка(NNN)+" автомобилей, но будет использован только 1-ый!", СтатусСообщения.Внимание);
		КонецЕсли;
	иначе
		Если значениеЗаполнено(ЭтотОбъект.Водитель) Тогда
			ОбластьМакета.Параметры.Водитель = ОбластьМакета.Параметры.Водитель + ЭтотОбъект.Водитель;
			телВод = ПолучитьКонтактнуюИнформацию(ЭтотОбъект.Водитель,"Телефон");
			ОбластьМакета.Параметры.ТелефонВодителя = ОбластьМакета.Параметры.ТелефонВодителя + телВод;
			
			АвтомобильГосНомерАвтомобиля = ПолучитьКонтактнуюИнформацию(ЭтотОбъект.Водитель, "Другое");
			ОбластьМакета.Параметры.АвтомобильГосНомерАвтомобиля = АвтомобильГосНомерАвтомобиля;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Дата = Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD");
	
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	//------------------------
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаМенеджер");
	
	ТаблЗнач1 = новый ТаблицаЗначений;
	ТаблЗнач1.Колонки.Добавить("Менеджер");
	i=0;
	Для Каждого стр1 из Заказы Цикл
		Если фЕстьФлаги и (Не стр1.Флаг) Тогда  //+++
			продолжить;
		КонецЕсли; 
		
		ТаблЗнач1.Добавить();
		стр2 = ТаблЗнач1[i];
		стр2.Менеджер = стр1.Заказ.Ответственный;
		i=i+1;
	КонецЦикла;	
	ТаблЗнач1.Свернуть("Менеджер");//все телефоны вместе
	//---------------------------------------------------
	
	Для i=0 по ТаблЗнач1.Количество()-1 Цикл
		ОбластьМакета.Параметры.Менеджер = ТаблЗнач1[i].Менеджер;
		//-----------определение телефона-------------------------	
		Если ЗначениеЗаполнено(ТаблЗнач1[i].Менеджер.ФизЛицо) Тогда
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			значТел = "";
			Если рс<>неопределено Тогда
				значТел = рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			
			//+++ сотовый	
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Сотовый") ); //22
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			Если рс<>неопределено Тогда
				значТел =значТел +"; "+рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			
			//+++ сотовый2	
			отбор1 = новый Структура("Объект", ТаблЗнач1[i].Менеджер.ФизЛицо);
			отбор1.Вставить("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
			отбор1.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Сотовый 2") );//24
			рс = регистрыСведений.КонтактнаяИнформация.Получить(отбор1);
			Если рс<>неопределено Тогда
				значТел =значТел +"; "+рс.Представление; //ТаблЗнач1[i].Заказ.ТелефонМенеджера;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Телефон  = значТел;
			
		Иначе // по сотруднику
			сообщить("Для пользователя: "+ строка(ТаблЗнач1[i].Менеджер) +" - не установлено Физ.Лицо! Контактная информация - не доступна!", СтатусСообщения.Внимание);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
	конецЦикла;
	//----------------------------------------
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	//------------------Основная таблица заказов----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");   НомерСтроки =1;
	СуммаВсего = 0; ИтогРасстояние = 0;
	
	Заказы2.Сортировать("Точка, Ответственный"); //+++ 28.08.2015
	
	Для i=0 по Заказы2.Количество()-1 Цикл
		
		Выборка = Заказы2[i];	
		ОбластьМакета.Параметры.Номер = Выборка.Номер;
		ОбластьМакета.Параметры.Контрагент = Выборка.Контрагент;
		ОбластьМакета.Параметры.Комментарий = СокрЛП(Выборка.Комментарий); //+++ 02.04.2014
		ОбластьМакета.Параметры.Менеджер   = Выборка.Ответственный;
		
		ОбластьМакета.Параметры.НомерСтроки = ?( Выборка.Точка=0, строка(i), строка(Выборка.Точка) );//+++ 28.08.2015
		
		ОбластьМакета.Параметры.АдресТелефон = Выборка.АдресДоставки;//+" "+Выборка.Контрагент.ОсновноеКонтактноеЛицо;
		ОбластьМакета.Параметры.СуммаДоставки = Строка(Выборка.СуммаДоставки)+"р.";
		
		ОбластьМакета.Параметры.Количество = выборка.Количество;//+++ 28.08.2015
		
		СуммаВсего = СуммаВсего + Выборка.СуммаДоставки;
		ИтогРасстояние = ИтогРасстояние + Выборка.Расстояние;
		
		ТабДокумент.Вывести(ОбластьМакета);
		НомерСтроки = НомерСтроки+1;
	КонецЦикла;
	
	//------------------Конец----------------------
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	//СуммаВсего = Заказы2.Итог("СуммаДоставки"); // Сумма всего!
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию("руб.");
	ОбластьМакета.Параметры.СуммаДоставки = СуммаВсего;
	ОбластьМакета.Параметры.СуммаДоставкиПрописью = ЧислоПрописью(СуммаВсего, "L=ru_RU", Валюта.ПараметрыПрописиНаРусском);
	ОбластьМакета.Параметры.ИтогоКМ = Строка(ИтогРасстояние)+" км.";
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.Показать();
КонецПроцедуры
//------------------------------------------------------------------

Процедура КоманднаяПанель1Подбор(Кнопка)
		
	список = ЭтотОбъект.ПолучитьФорму("ФормаПодбора", ЭтаФорма);//Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	список.Открыть();
	
КонецПроцедуры

Процедура ЗаказыЗаказПриИзменении(Элемент)
	
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	ЗаполнитьСтроку(стр1, Истина, неотгруженные, ложь);
	
КонецПроцедуры

Процедура ЗаказыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
		СтандартнаяОбработка = ЛОЖЬ;
	    дата0 = НачалоДня(ЭлементыФормы.ДатаФормы.Значение);
		
		список = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
		список.отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		список.отбор.Дата.ЗначениеС = дата0;
		список.отбор.Дата.ЗначениеПо = КонецДня(дата0);
		
		
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	Если стр1.Контрагент<>Справочники.Контрагенты.ПустаяСсылка() Тогда
		//выборка = список.Выбрать(НачалоНедели(ТекущаяДата()),КонецНедели(ТекущаяДата()),новый структура("Контрагент",стр1.Контрагент));
		список.отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
		список.отбор.Контрагент.Значение = стр1.Контрагент;
		список.отбор.Контрагент.Использование = Истина; 
		
		Если ЗначениеЗаполнено(стр1.Заказ) Тогда
		список.НачальноеЗначениеВыбора = стр1.Заказ;
		
			Если стр1.Заказ.ДатаОтгрузки<>Дата(1,1,1) Тогда
				Если стр1.Заказ.ДатаОтгрузки<список.отбор.Дата.ЗначениеС Тогда
				список.отбор.Дата.ЗначениеС = началоДня(стр1.Заказ.Дата); 
				КонецЕсли;
				Если стр1.Заказ.ДатаОтгрузки>список.отбор.Дата.ЗначениеПо Тогда
				список.отбор.Дата.ЗначениеПо = КонецДня(стр1.Заказ.Дата); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		список.отбор.Дата.Использование = Истина;

	иначе	
		список.отбор.Дата.Использование = Истина;
	КонецЕсли;	

		стр1.Заказ = Список.ОткрытьМодально();
		ЗаказыЗаказПриИзменении(Элемент);
	
КонецПроцедуры

//переворот "нормальных" координат Д,Ш >> Ш,Д
функция ШД(адр1) 
	i= найти(адр1,","); L=стрДлина(адр1);
	рез = прав(адр1, L-i)+","+лев(адр1, L-i);
	возврат рез;
КонецФункции

Процедура КоманднаяПанель1Пересчет(Кнопка)
	ОбновлятьДанные  = Истина;
	ОбновлятьАдреса	 = Истина;
	
	Состояние("Идет обновление адресов и расчет расстояний...");
	Заказы.Сортировать("Флаг УБЫВ,Точка,Контрагент,АдресДоставки");
	
	естьВсеКоординаты = ОбновитьАдресаДоставки(Истина); //+++ 21.12.2017 - 12.03.2019
    			
	ПересчетКоличестваФлаг();
	ПересчетПрибыльности(); //28.03.2019 принудительно пересчет суммы!
	
	//Если естьВсеКоординаты тогда
	//	Если Вопрос("Можно построить Маршрут.(Точки 0, 1,2,3.. A, B,С,D...)
	//		|Построить маршрут на Яндекс карте?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
	//		ОсновныеДействияФормыМаршрут(неопределено);
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры


Процедура ЗаказыКоординатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;

	Если СокрЛП(стр1.Координаты)<>"" тогда	
		попытка
			 ЗапуститьПриложение("https://maps.yandex.ru/?ll="+стр1.Координаты
			 +"&spn=2.124481,0.671008&z=14&l=map&pt="+стр1.Координаты+",pmrdm1");
		исключение
		  Предупреждение("Ошибка получения карты по координатам: "+стр1.Координаты+"!
		  |"+ОписаниеОшибки() ,60);
		КонецПопытки;	
	Иначе
		СтандартнаяОбработка=Истина;
	КонецЕсли;

КонецПроцедуры

   
//------------------------------------------------------------------

 Процедура ОсновныеДействияФормыМаршрут(Кнопка)
АдресИзИнтернета = истина;	 
	 
	 //таблица точек меньше, чем заказов....
	 Заказы2 = новый ТаблицаЗначений;
	 Заказы2.Колонки.Добавить("Точка");
	 Заказы2.Колонки.Добавить("Контрагент");
	 Заказы2.Колонки.Добавить("АдресДоставки");
	 Заказы2.Колонки.Добавить("Координаты");
	 Для i=1 по Заказы.Количество() Цикл
		 Заказы2.Добавить();
	 КонецЦикла;	
	 Заказы2 = Заказы.Выгрузить();
	 
	 
	 Если (фЕстьФлаги) Тогда
			j=0; N = Заказы2.Количество();  АД="";
			пока j<N Цикл
				Если не Заказы2[j].флаг 
					или АД=Заказы2[j].адресДоставки 
					или СокрЛП(Заказы2[j].адресДоставки)="" Тогда
				Заказы2.Удалить(j); N=N-1;
				Иначе 
				АД=Заказы2[j].адресДоставки;
				j=j+1; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	 Заказы2.Свернуть("Контрагент, АдресДоставки, Координаты, Точка");
     Заказы2.Сортировать("Точка,Контрагент,АдресДоставки");
	 
    i= найти(нашиКоординаты,",");
	Долгота = лев(нашиКоординаты,i-1);
	Широта  = прав(нашиКоординаты, стрДлина(нашиКоординаты)-i);
    rtext0 = Широта+"%2C"+Долгота;
	rtext   = rtext0;   
	срКоордД = Долгота;  срКоордШ = Широта; n=1;
	текТочка = 0;
	для каждого стр1 из Заказы2 цикл 
		если стр1.Координаты = текТочка тогда //12.03.2019
			продолжить;
		КонецЕсли;	
		текТочка = стр1.Координаты;
		
		если стр1.Координаты<>"" тогда
	        i= найти(стр1.Координаты,",");
			Долгота = лев(стр1.Координаты,i-1);
			Широта  = прав(стр1.Координаты, стрДлина(стр1.Координаты)-i);
			rtext =  rtext+"~"+Широта+"%2C"+Долгота; // наоборот! 
		    срКоордД = ОКР( ( n*число(срКоордД)+число(Долгота) )/(n+1), 6);
		    срКоордШ = ОКР( ( n*число(срКоордШ)+число(Широта) )/(n+1) , 6);
			 n=n+1;
		 Иначе
			 Сообщить("У клиента: "+строка(стр1.Контрагент)+" по адресу: "+стр1.адресДоставки+" - нет координат!", СтатусСообщения.Внимание);
		 КонецЕсли; 
		 
	КонецЦикла; 
	
    rtext =  rtext+"~"+rtext0; //обратно
	срКоорд =формат(срКоордД,"ЧРД=.")+"%2C"+формат(срКоордШ,"ЧРД=."); //06.07.2017!	
	URL = "https://maps.yandex.ru/?ll="+срКоорд+"&rtext=" +rtext+ "&rtt=auto"; //&z=7  //zoom авто!
	ЗапуститьПриложение(URL);	
	 
//=================ТОЛЬКО ТОЧКИ=========================
//ПостроитьКластер(Заказы2);

//=======================================================	 
	//Результат = ПостроитьМассивКоординат(Заказы2);
	//ЭлементыФормы.Карта.Документ.parentWindow.eval("calcRoute(" + Результат + ")");

			 
КонецПроцедуры

Процедура ОчиститьКарту()
	ЭлементыФормы.Карта.Документ.parentWindow.eval("Reset()");
КонецПроцедуры


 Процедура ПоискАдреса(Адрес)
	ЭлементыФормы.Карта.Документ.parentWindow.eval("FindAdres(""" + Адрес + """);");
КонецПроцедуры

 
Функция ПолучитьКонтактнуюИнформацию(об1, тип="Телефон")
	
	Если ТипЗнч(Об1)=Тип("Строка") Тогда
		возврат "";
	КонецЕсли;	
	
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтактнаяИнформация.Представление,
               |	КонтактнаяИнформация.Вид
               |ИЗ
               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
               |ГДЕ
               |	КонтактнаяИнформация.Объект = &Объект
               |	И КонтактнаяИнформация.Тип = &Тип";

Запрос.УстановитьПараметр("Объект", Об1);
Если тип="Телефон" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);
	Тип1="Тел: ";
иначеЕсли тип="Другое" Тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Другое);
	Тип1="Доп.инфо: ";
иначеЕсли найти(тип,"Факт")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Тип1="Факт.адрес: ";
иначеЕсли найти(тип,"Юр")>0 тогда
	Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.Текст = Запрос.Текст +" И КонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Вид", справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Тип1="Юр.адрес: ";
КонецЕсли;
	
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
рез = "";
Если Выборка.Следующий() Тогда
	Если Строка(Выборка.Вид) = "Автомобиль" Тогда
		Тип1="Автомобиль: ";
	КонецЕсли;	
рез = рез + Тип1 +выборка.Представление;
КонецЕсли;

ПОКА Выборка.Следующий() ЦИКЛ
рез = рез + ", "+выборка.Представление;
КонецЦикла;

возврат рез;

КонецФункции	

Процедура КоманднаяПанель1Кубатура(Кнопка)
		
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ЗаказПокупателяТовары.Номенклатура.Типоразмер КАК Типоразмер,
               |	ЗаказПокупателяТовары.Номенклатура.ВидТовара КАК ВидТовара,
               |	НормыЗагрузки.НормаЗагрузки,
               |	НормыЗагрузки.Ссылка
               |ИЗ
               |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыЗагрузки КАК НормыЗагрузки
               |		ПО ЗаказПокупателяТовары.Номенклатура.Типоразмер = НормыЗагрузки.Типоразмер
               |			И ЗаказПокупателяТовары.Номенклатура.ВидТовара = НормыЗагрузки.ВидПродукции
               |ГДЕ
               |	ЗаказПокупателяТовары.Ссылка В (&Заказы)
               |	И НормыЗагрузки.ПометкаУдаления = ЛОЖЬ
               |	И ЗаказПокупателяТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";

			   
мас = новый массив;
Для Каждого стр1 из Заказы Цикл
	Если стр1.Флаг Тогда
		мас.Добавить(стр1.Заказ);
	КонецЕсли;
КонецЦикла;	
   списЗак = новый СписокЗначений;
   списЗак.ЗагрузитьЗначения( мас );
Запрос.УстановитьПараметр("Заказы", списЗак );

Результат = Запрос.Выполнить();
Выборка = Результат.Выгрузить();

	Форма1 = ЭтотОбъект.ПолучитьФорму("ФормаНормы", ЭтаФорма);//Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	
	попытка
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.ВидСравнения = ВидСравнения.ВСписке;
	//
	//-----------------------свертка Видов----------------------
	нов1 = новый ТаблицаЗначений; // свернем
	нов1.Колонки.Добавить("ВидТовара");	
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.ЗагрузитьКолонку(Выборка.ВыгрузитьКолонку("ВидТовара") ,"ВидТовара");
	нов1.Свернуть("ВидТовара");
	Если нов1.Количество()>0 Тогда
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.ВидСравнения = ВидСравнения.ВСписке;
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.Значение.ЗагрузитьЗначения( нов1.ВыгрузитьКолонку("ВидТовара") );
		Форма1.НормыЗагрузки.Отбор.ВидПродукции.Использование = Истина;
	КонецЕсли;
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.Значение = перечисления.ВидыТоваров.Шины;
	//Форма1.НормыЗагрузки.Отбор.ВидПродукции.Использование = Истина;
	
	нов1 = новый ТаблицаЗначений; // свернем
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.Колонки.Добавить("Типоразмер");	
	Для i=1 по Выборка.Количество() Цикл
		нов1.Добавить();
	КонецЦикла;
	нов1.ЗагрузитьКолонку(Выборка.ВыгрузитьКолонку("Типоразмер") ,"Типоразмер");
	нов1.Свернуть("Типоразмер");
	Если нов1.Количество()>0 Тогда
		Форма1.НормыЗагрузки.Отбор.Типоразмер.ВидСравнения = ВидСравнения.ВСписке;
		Форма1.НормыЗагрузки.Отбор.Типоразмер.Значение.ЗагрузитьЗначения( нов1.ВыгрузитьКолонку("Типоразмер") );
		Форма1.НормыЗагрузки.Отбор.Типоразмер.Использование = Истина;
	КонецЕсли;

	Форма1.НормыЗагрузки.Порядок.Установить("Типоразмер");
	
	исключение
	конецПопытки;
	
   	Форма1.Открыть();

КонецПроцедуры

функция ПолучитьТекстЗапросаНеотгруженные()
	ЗапросТекст = "ВЫБРАТЬ
   |	ЗакОст.ЗаказПокупателя КАК ЗаказПокупателя,
   |	ЗакОст.Номенклатура,
   |	ЗакОст.КоличествоОстаток,
   |	ЗакОст.Номенклатура.ВидТовара КАК ВидТовара,
   |	ЗакОст.Номенклатура.Типоразмер КАК Типоразмер,
   |	ЗакОст.ЗаказПокупателя.Контрагент КАК Контрагент,
   |	ЗакОст.СуммаУпрОстаток КАК СуммаДокумента,
   |	ЗакОст.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
   |	ЗакОст.Заказпокупателя.Ответственный КАК Менеджер,
   |	ЗакОст.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК Вес,
   |	ЗакОст.Номенклатура.ЕдиницаХраненияОстатков.Объем КАК Объем
   |ПОМЕСТИТЬ ВТ_Заказы
   |ИЗ
   |	РегистрНакопления.ЗаказыПокупателей.Остатки( ,
   |			ЗаказПокупателя.ДатаОтгрузки >= ДОБАВИТЬКДАТЕ(&ДатаОтгрузки0, ДЕНЬ, -31)
   |				И ВЫБОР
   |					КОГДА ЗаказПокупателя.ТипЗаказа = 10
   |							И ЗаказПокупателя.Контрагент <> &ШинтрейдСпб
   |						ТОГДА ВЫБОР
   |								КОГДА ЗаказПокупателя.ТранспортнаяКомпания = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
   |									ТОГДА ИСТИНА
   |								КОГДА ЗаказПокупателя.Комментарий ПОДОБНО ""%подтвержден%""
   |									ТОГДА ИСТИНА
   |								ИНАЧЕ ЛОЖЬ
   |							КОНЕЦ
   |					ИНАЧЕ ИСТИНА
   |				КОНЕЦ) КАК ЗакОст
   |ГДЕ
   |	ЕСТЬNULL(ЗакОст.КоличествоОстаток, 0) > 0
   |;
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	ЗаказыМаршруты.ЗаказПокупателя КАК Объект,
   |	ЗаказыМаршруты.Маршрут КАК Категория,
   |	ЗаказыМаршруты.Дата
   |ПОМЕСТИТЬ Маршруты
   |ИЗ
   |	РегистрСведений.ЗаказыМаршруты КАК ЗаказыМаршруты
   |ГДЕ
   |	ЗаказыМаршруты.ЗаказПокупателя В (ВЫБРАТЬ зак.ЗаказПокупателя ИЗ ВТ_Заказы КАК зак)
   |	И НЕ ЗаказыМаршруты.ЗаказПокупателя В(ВЫБРАТЬ РАЗЛИЧНЫЕ Категории.Объект
   |				ИЗ РегистрСведений.КатегорииОбъектов КАК Категории
   |				ГДЕ Категории.Категория В (&списокисключений) )
   |;
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	КатегорииОбъектов.Объект,
   |	КатегорииОбъектов.Категория
   |ПОМЕСТИТЬ Категории
   |ИЗ
   |	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
   |ГДЕ
   |	КатегорииОбъектов.Объект В	(ВЫБРАТЬ зак.ЗаказПокупателя ИЗ ВТ_Заказы КАК зак)
   |	И КатегорииОбъектов.Категория В(&СписокИсключенийМожно)
   |;
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	ЗначенияСвойствОбъектов.Объект,
   |	ЗначенияСвойствОбъектов.Значение
   |ПОМЕСТИТЬ Свойства
   |ИЗ
   |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
   |ГДЕ
   |	ЗначенияСвойствОбъектов.Свойство = &Свойство
   |;
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	ЗначенияСвойствОбъектов.Объект,
   |	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение) КАК Значение,
   |	МАКСИМУМ(ЗначенияСвойствОбъектов.Свойство) КАК Свойство
   |ПОМЕСТИТЬ СвойстваЗаказа
   |ИЗ
   |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
   |ГДЕ
   |	(ЗначенияСвойствОбъектов.Свойство = &Суббота
   |			ИЛИ ЗначенияСвойствОбъектов.Свойство = &Понедельник)
   |	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
   |
   |СГРУППИРОВАТЬ ПО
   |	ЗначенияСвойствОбъектов.Объект
   |;
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ РАЗЛИЧНЫЕ
   |	ЗаказыПокупателей.ЗаказПокупателя КАК Заказ,
   |	ЗаказыПокупателей.Контрагент КАК Контрагент,
   |	ЗаказыПокупателей.Менеджер КАК Ответственный,
   |	ЗаказыПокупателей.СуммаДокумента КАК Сумма,
   |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Количество,
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
   |				ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |				ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА 0
   |		ИНАЧЕ ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |	КОНЕЦ КАК КолКамеры,
   |	ВЫБОР
   |		КОГДА НЕ(ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
   |					ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |					ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ))
   |			ТОГДА 0
   |		ИНАЧЕ ВЫБОР
   |				КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
   |					ТОГДА 1
   |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
   |			КОНЕЦ
   |	КОНЕЦ * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Кубатура,
   |	ЗаказыПокупателей.Вес * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Вес,
   |	ЗаказыПокупателей.Объем * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) КАК Объем,
   |	ЗаказыПокупателей.ДатаОтгрузки КАК ДатаОтгрузки,
   |	ЗаказыПокупателей.Номенклатура,
   //ГрузШина
   |	Выбор когда ЗаказыПокупателей.Номенклатура В ИЕРАРХИИ (&масГруз) тогда Истина иначе ЛОЖЬ Конец как ГрузШина,
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |		ИНАЧЕ 0
   |	КОНЕЦ КАК КолАк,
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА ЗаказыПокупателей.Объем * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |		ИНАЧЕ 0
   |	КОНЕЦ КАК ОбАк,
   |	Свойства.Значение КАК ВремяВыгрузки,
   |	ВЫБОР
   |		КОГДА СвойстваЗаказа.Свойство = &Суббота
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ КАК Суббота,
   |	ВЫБОР
   |		КОГДА СвойстваЗаказа.Свойство = &Понедельник
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ КАК Понедельник,
   |	Маршруты.Дата КАК Дата
   |ИЗ
   |	ВТ_Заказы КАК ЗаказыПокупателей
   |		ЛЕВОЕ СОЕДИНЕНИЕ Маршруты КАК Маршруты
   |		ПО ЗаказыПокупателей.ЗаказПокупателя = Маршруты.Объект
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			норм.Ссылка КАК Ссылка,
   |			норм.ПометкаУдаления КАК ПометкаУдаления,
   |			норм.Предопределенный КАК Предопределенный,
   |			норм.Код КАК Код,
   |			норм.Наименование КАК Наименование,
   |			норм.НормаЗагрузки КАК НормаЗагрузки,
   |			норм.Типоразмер КАК Типоразмер,
   |			норм.КоэффициентИмпорта КАК КоэффициентИмпорта,
   |			норм.КоэффициентКоличества КАК КоэффициентКоличества,
   |			норм.Вес КАК Вес,
   |			норм.ВидПродукции КАК ВидПродукции
   |		ИЗ
   |			Справочник.НормыЗагрузки КАК норм
   |		ГДЕ
   |			норм.Типоразмер В
   |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
   |						ВТ_Заказы.Типоразмер
   |					ИЗ
   |						ВТ_Заказы)) КАК НормыЗагрузки
   |		ПО ЗаказыПокупателей.ВидТовара = НормыЗагрузки.ВидПродукции
   |			И ЗаказыПокупателей.Типоразмер = НормыЗагрузки.Типоразмер
   |		ЛЕВОЕ СОЕДИНЕНИЕ Свойства КАК Свойства
   |		ПО ЗаказыПокупателей.Контрагент = Свойства.Объект
   |		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваЗаказа КАК СвойстваЗаказа
   |		ПО ЗаказыПокупателей.ЗаказПокупателя = СвойстваЗаказа.Объект
   |ГДЕ
   |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) > 0
   |	И Маршруты.Категория В(&Маршруты)
   |	И (Маршруты.Дата <= &ДатаМаршрута
   |			ИЛИ Маршруты.Дата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
   |
   |ОБЪЕДИНИТЬ ВСЕ
   |
   |ВЫБРАТЬ РАЗЛИЧНЫЕ
   |	ЗаказыПокупателей.ЗаказПокупателя,
   |	ЗаказыПокупателей.Контрагент,
   |	ЗаказыПокупателей.Менеджер,
   |	ЗаказыПокупателей.СуммаДокумента,
   |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0),
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
   |				ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |				ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА 0
   |		ИНАЧЕ ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |	КОНЕЦ,
   |	ВЫБОР
   |		КОГДА НЕ(ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
   |					ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
   |					ИЛИ ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ))
   |			ТОГДА 0
   |		ИНАЧЕ ВЫБОР
   |				КОГДА ЕСТЬNULL(НормыЗагрузки.НормаЗагрузки, 0) = 0
   |					ТОГДА 1
   |				ИНАЧЕ НормыЗагрузки.НормаЗагрузки
   |			КОНЕЦ
   |	КОНЕЦ * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0),
   |	ЗаказыПокупателей.Вес * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0),
   |	ЗаказыПокупателей.Объем * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0),
   |	ЗаказыПокупателей.ДатаОтгрузки,
   |	ЗаказыПокупателей.Номенклатура,
   //ГрузШина
   |	Выбор когда ЗаказыПокупателей.Номенклатура В ИЕРАРХИИ (&масГруз) тогда Истина иначе ЛОЖЬ Конец,
   
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |		ИНАЧЕ 0
   |	КОНЕЦ,
   |	ВЫБОР
   |		КОГДА ЗаказыПокупателей.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.АКБ)
   |			ТОГДА ЗаказыПокупателей.Объем * ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0)
   |		ИНАЧЕ 0
   |	КОНЕЦ,
   |	Свойства.Значение,
   |	ВЫБОР
   |		КОГДА СвойстваЗаказа.Свойство = &Суббота
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ,
   |	ВЫБОР
   |		КОГДА СвойстваЗаказа.Свойство = &Понедельник
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ,
   |	&ТекДата
   |ИЗ
   |	ВТ_Заказы КАК ЗаказыПокупателей
   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |			норм.Ссылка КАК Ссылка,
   |			норм.ПометкаУдаления КАК ПометкаУдаления,
   |			норм.Предопределенный КАК Предопределенный,
   |			норм.Код КАК Код,
   |			норм.Наименование КАК Наименование,
   |			норм.НормаЗагрузки КАК НормаЗагрузки,
   |			норм.Типоразмер КАК Типоразмер,
   |			норм.КоэффициентИмпорта КАК КоэффициентИмпорта,
   |			норм.КоэффициентКоличества КАК КоэффициентКоличества,
   |			норм.Вес КАК Вес,
   |			норм.ВидПродукции КАК ВидПродукции
   |		ИЗ
   |			Справочник.НормыЗагрузки КАК норм
   |		ГДЕ
   |			норм.Типоразмер В (ВЫБРАТЬ 	ВТ_Заказы.Типоразмер ИЗ ВТ_Заказы)) КАК НормыЗагрузки
   |		ПО ЗаказыПокупателей.ВидТовара = НормыЗагрузки.ВидПродукции
   |			И ЗаказыПокупателей.Типоразмер = НормыЗагрузки.Типоразмер
   |		ЛЕВОЕ СОЕДИНЕНИЕ Свойства КАК Свойства
   |		ПО ЗаказыПокупателей.Контрагент = Свойства.Объект
   |		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваЗаказа КАК СвойстваЗаказа
   |		ПО ЗаказыПокупателей.ЗаказПокупателя = СвойстваЗаказа.Объект
   |		ЛЕВОЕ СОЕДИНЕНИЕ Категории КАК Категории
   |		ПО ЗаказыПокупателей.ЗаказПокупателя = Категории.Объект
   |ГДЕ
   |	ЕСТЬNULL(ЗаказыПокупателей.КоличествоОстаток, 0) > 0
   |	И Категории.Категория В (&СписокИсключенийМожно)
   |";
   //|; УНИЧТОЖИТЬ ВТ_Заказы; УНИЧТОЖИТЬ Маршруты; УНИЧТОЖИТЬ Категории; УНИЧТОЖИТЬ Свойства; УНИЧТОЖИТЬ СвойстваЗаказа;";
возврат ЗапросТекст;					   
КонецФункции

Функция ПолучитьТекстЗапросаБрак()
   ЗапросТекст = "ВЫБРАТЬ
                 |	ЗаявкаНаБрак.Ссылка КАК ЗаявкаНаБрак,
                 |	ЗаявкаНаВозвратТоваров.Ссылка КАК ЗаявкаНаВозврат
                 |ПОМЕСТИТЬ ВТ_Наоборот
                 |ИЗ
                 |	Документ.ЗаявкаНаВозвратТоваров КАК ЗаявкаНаВозвратТоваров
                 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаБрак КАК ЗаявкаНаБрак
                 |		ПО ЗаявкаНаВозвратТоваров.Ссылка = ЗаявкаНаБрак.ДокументОснование
                 |ГДЕ
                 |	НЕ ЗаявкаНаБрак.Ссылка ЕСТЬ NULL 
				 //31.01.2019 --- Заявки На Брак 2 месяца!--------
				 |	И ЗаявкаНаБрак.Дата>=&ДатаНач
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование КАК ЗаявкаНаБрак,
                 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование КАК Регистратор,
				 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.АдресДоставки как РегистраторАдресДоставки,
				 |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
                 |	СУММА(ЕСТЬNULL(ТоварыНаОтветственномХраненииОбороты.КоличествоОборот, 0)) КАК КоличествоОборот,
                 |	ТоварыНаОтветственномХраненииОбороты.Склад,
                 |	ТоварыНаОтветственномХраненииОбороты.ДоговорКонтрагента
                 |ПОМЕСТИТЬ Врем
                 |ИЗ
               	 //31.01.2019
				 |	РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&ДатаНач, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
                 |ГДЕ
                 |	ТИПЗНАЧЕНИЯ(ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование) = ТИП(Документ.ЗаявкаНавозвратТоваров)
                 |	И ТИПЗНАЧЕНИЯ(ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование) = ТИП(Документ.ЗаявкаНаБрак)
                 |	И ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование.СостояниеЗаявки = Значение(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
                 |	И ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование.СогласованВозвратКлиенту
                 |
                 |СГРУППИРОВАТЬ ПО
                 |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
                 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование,
                 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.ДокументОснование,
				 |	ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование.АдресДоставки,
                 |	ТоварыНаОтветственномХраненииОбороты.Склад,
                 |	ТоварыНаОтветственномХраненииОбороты.ДоговорКонтрагента
                 |
                 |ОБЪЕДИНИТЬ ВСЕ
                 |
                 |ВЫБРАТЬ
                 |	Наоборот.ЗаявкаНаБрак,
                 |	Наоборот.ЗаявкаНаВозврат,
				 |	Наоборот.ЗаявкаНаВозврат.АдресДоставки,
                 |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
                 |	СУММА(ЕСТЬNULL(ТоварыНаОтветственномХраненииОбороты.КоличествоОборот, 0)),
                 |	ТоварыНаОтветственномХраненииОбороты.Склад,
                 |	ТоварыНаОтветственномХраненииОбороты.ДоговорКонтрагента
                 |ИЗ
                 //31.01.2019
				 |	РегистрНакопления.ТоварыНаОтветственномХранении.Обороты(&ДатаНач, , Регистратор, ) КАК ТоварыНаОтветственномХраненииОбороты
				
                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наоборот КАК Наоборот
                 |		ПО ТоварыНаОтветственномХраненииОбороты.Регистратор.ДокументОснование = Наоборот.ЗаявкаНаВозврат
                 |ГДЕ
                 |	НЕ Наоборот.ЗаявкаНаВозврат ЕСТЬ NULL 
                 |	И Наоборот.ЗаявкаНаБрак.СостояниеЗаявки = Значение(Перечисление.СостоянияЗаявкиНаБрак.Отклонить)
				 |	И Наоборот.ЗаявкаНаБрак.СогласованВозвратКлиенту
                 |
                 |СГРУППИРОВАТЬ ПО
                 |	ТоварыНаОтветственномХраненииОбороты.Номенклатура,
                 |	ТоварыНаОтветственномХраненииОбороты.Склад,
                 |	ТоварыНаОтветственномХраненииОбороты.ДоговорКонтрагента,
                 |	Наоборот.ЗаявкаНаБрак,
                 |	Наоборот.ЗаявкаНаВозврат
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ЗаявкаНаБракРасшифровка.Ссылка,
                 |	ЗаявкаНаБракРасшифровка.Номенклатура,
                 |	СУММА(ЗаявкаНаБракРасшифровка.Количество) КАК Количество,
                 |	СУММА(ЗаявкаНаБракРасшифровка.КоличествоПринято) КАК КоличествоПринято
                 |ПОМЕСТИТЬ ЗаявкаНаБрак
                 |ИЗ
                 |	Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
				 
				 //31.01.2019 --- Заявки На Брак 2 месяца!--------
				 |ГДЕ  ЗаявкаНаБракРасшифровка.Ссылка.Дата>=&ДатаНач
                
                 |СГРУППИРОВАТЬ ПО
                 |	ЗаявкаНаБракРасшифровка.Ссылка,
                 |	ЗаявкаНаБракРасшифровка.Номенклатура
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ВЫБОР
                 |		КОГДА Врем.ЗаявкаНаБрак.НаПеремещение
                 |			ТОГДА Врем.ЗаявкаНаБрак.Филиал
                 |		ИНАЧЕ Врем.ЗаявкаНаБрак.Контрагент
                 |	КОНЕЦ КАК Контрагент,
                 |	Врем.ЗаявкаНаБрак КАК Заявка,
                 |	Врем.Регистратор КАК Регистратор,
                 |	Врем.Номенклатура,
                 |	Врем.КоличествоОборот - ЕстьNull(ЗаявкаНаБракРасшифровка.КоличествоПринято,0) КАК Количество,
                 |	Врем.Склад,
                 |	Врем.Номенклатура.ЕдиницаХраненияОстатков.Объем * (Врем.КоличествоОборот - ЕстьNull(ЗаявкаНаБракРасшифровка.КоличествоПринято,0)) КАК Объем,
                 |	Врем.Номенклатура.ЕдиницаХраненияОстатков.Вес * (Врем.КоличествоОборот - ЕстьNull(ЗаявкаНаБракРасшифровка.КоличествоПринято,0)) КАК Вес,
                 |	Врем.ДоговорКонтрагента,
                 |	ВЫБОР
                 |		КОГДА Врем.ЗаявкаНаБрак.АдресДоставки ПОДОБНО """"
                 |			ТОГДА Врем.РегистраторАдресДоставки
                 |		ИНАЧЕ Врем.ЗаявкаНаБрак.АдресДоставки
                 |	КОНЕЦ КАК Адрес
                 |ПОМЕСТИТЬ ИтогПоВсем
                 |ИЗ
                 |	Врем КАК Врем
                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаявкаНаБрак КАК ЗаявкаНаБракРасшифровка
                 |		ПО Врем.ЗаявкаНаБрак = ЗаявкаНаБракРасшифровка.Ссылка
                 |			И Врем.Номенклатура = ЗаявкаНаБракРасшифровка.Номенклатура
                 |ГДЕ
                 |	Врем.КоличествоОборот > 0
                 |	И Врем.КоличествоОборот - ЕстьNull(ЗаявкаНаБракРасшифровка.КоличествоПринято,0) > 0
                 |	И Врем.Склад.Подразделение В(&СписокПодразделений)
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
				 |	МАКСИМУМ(Истина) как Флаг,
                 |	ИтогПоВсем.Контрагент КАК Контрагент,
                 |	ИтогПоВсем.Заявка,
				 |	ВЫРАЗИТЬ(ИтогПоВсем.Адрес КАК СТРОКА(500)) КАК Адрес,
				 
                 |	ИтогПоВсем.Регистратор КАК Регистратор,
				 |	ИтогПоВсем.Номенклатура,
				 |	ИтогПоВсем.Количество,
				 |	ИтогПоВсем.Склад,
                 |	ИтогПоВсем.ДоговорКонтрагента,
				 
                 |	СУММА(ИтогПоВсем.Объем) КАК Объем,
                 |	СУММА(ИтогПоВсем.Вес) КАК Вес
                 |ИЗ
                 |	ИтогПоВсем КАК ИтогПоВсем
                 |ГДЕ
                 |	ИтогПоВсем.Контрагент В(&Контрагенты)
                 |
   	//+++ 04-11.12.2018 -> сразу в запросе!  РезБрак.свернуть("Заявка,Контрагент,Адрес", "Объем, Вес");
                 |СГРУППИРОВАТЬ ПО
                 |	ИтогПоВсем.Контрагент,
                 |	ИтогПоВсем.Заявка,
                 |	ВЫРАЗИТЬ(ИтогПоВсем.Адрес КАК СТРОКА(500))
				//11.12.2018 возвращено обратно! 
				 |	,ИтогПоВсем.Регистратор,
				 |	ИтогПоВсем.Номенклатура,
				 |	ИтогПоВсем.Количество,
				 |	ИтогПоВсем.Склад,
				 |	ИтогПоВсем.ДоговорКонтрагента
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	Контрагент";
				 
				 возврат ЗапросТекст;
КонецФункции

Процедура ДатаФормыПриИзменении(Элемент)
	//+++ 26.11.2018 +++ очистить при любом изменении!
	Обратки.Очистить();	 
	ЗаявкиНаБрак.Очистить();
	ЗаявкиНаТранспорт.Очистить();
	
	ЭлементыФормы.ДатаФормы.Значение = КонецДня(ЭлементыФормы.ДатаФормы.Значение);
	Если Заказы.Количество()>0 Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Ответ = Вопрос("Удалить текущую таблицу?", РежимДиалогаВопрос.ДаНет, 10, ответ,"Обновить таблицу заказов");
		Если (Ответ = КодВозвратаДиалога.да) Тогда
			Заказы.Очистить();
		Иначе 
			Об =ОбновитьАдресаДоставки(); //без изменения расстояний
		КонецЕсли;
	КонецЕсли;
	
	ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение;
	
	Запрос = Новый Запрос;
	Если Неотгруженные Тогда
		Запрос.Текст = ПолучитьТекстЗапросаНеотгруженные(); //04.12.2018  - 2 страницы, 5 ВТ
	Иначе  //отгруженные нет такого!! //+++ 10.10.2011
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК Ответственный,
		|	ЗаказПокупателя.СуммаДокумента КАК Сумма,
		|	ЗаказПокупателя.ДатаОтгрузки
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			регСв.Объект КАК Объект,
		|			регСв.Категория КАК Категория
		|		ИЗ РегистрСведений.КатегорииОбъектов КАК регСв
		|		ГДЕ регСв.Категория В(&СеверЮг)) КАК КатегорииОбъектов
		|		ПО ЗаказПокупателя.Ссылка = КатегорииОбъектов.Объект
		|ГДЕ
		|	ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаОтгрузки0 И &ДатаОтгрузки1
		|	И ЗаказПокупателя.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;				
	
	//-----------Север/Юг-------------------------------------------------------------------
	списЗначСЮ = Новый СписокЗначений;
	Список     = Новый СписокЗначений;
	Для каждого стрСп Из Маршруты Цикл
		Если стрСп.Пометка Тогда
		    Список.Добавить(стрСп.Маршрут);
		КонецЕсли;
	КонецЦикла;
	
	СписокКатегорийИсключений = Новый СписокЗначений;
		масИскл = новый массив;//+++ 04.12.2018  флаг - код	
		масИскл.Добавить("00043");масИскл.Добавить("00045");масИскл.Добавить("00055");масИскл.Добавить("00025");
		масИскл.Добавить("00018");масИскл.Добавить("00015");масИскл.Добавить("00054");масИскл.Добавить("00057");
		для ii=0 по масИскл.Количество()-1 цикл 
	    	СписокКатегорийИсключений.Добавить( Справочники.КатегорииОбъектов.НайтиПоКоду(масИскл[ii]) );
		КонецЦикла;
	Запрос.УстановитьПараметр("СписокИсключений",СписокКатегорийИсключений);
	
	//+++ 08.12.2017  по задаче № 37329
	масГруз = новый массив;
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001748"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0001750"));
	масГруз.Добавить( справочники.Номенклатура.НайтиПоКоду("0080631"));
	Запрос.УстановитьПараметр("масГруз", масГруз);
	
	СписокКатегорийИсключенийМожно = Новый СписокЗначений;
		списИскл = новый СписокЗначений;//+++ 04.12.2018  флаг - код			
		списИскл.Добавить(Диски, "00025");  	списИскл.Добавить(Тендеры, "00044");  списИскл.Добавить(ПЭК, "00018");
		списИскл.Добавить(Маркировка, "00054"); списИскл.Добавить(КолесаТУТ, "00043");списИскл.Добавить(КолесаТУТКарточки, "00045");
		списИскл.Добавить(КолесаТУТПИТСТОП,"00057");
		для ii=0 по списИскл.Количество()-1 цикл 
			Если списИскл[ii].Значение тогда 
				СписокКатегорийИсключенийМожно.Добавить( Справочники.КатегорииОбъектов.НайтиПоКоду(списИскл[ii].Представление)  );
			КонецЕсли;
		КонецЦикла;	
	Запрос.УстановитьПараметр("СписокИсключенийМожно",СписокКатегорийИсключенийМожно);
	Запрос.УстановитьПараметр("Маршруты", Список);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаМаршрута", КонецДня(ДатаФормы));
	Запрос.УстановитьПараметр("Свойство",    ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90219"));
	Запрос.УстановитьПараметр("Суббота",     ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90223"));
	Запрос.УстановитьПараметр("Понедельник", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90222"));
	Запрос.УстановитьПараметр("ШинтрейдСпб", Справочники.Контрагенты.НайтиПоКоду("П001549") );

	//------------------------------------------------------------------------------
	Если неотгруженные Тогда // за 3 месяца + текущий месяц
		Запрос.Текст = Запрос.Текст +"
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДатаОтгрузки,
		|	Дата,
		|	Ответственный
		|АВТОУПОРЯДОЧИВАНИЕ";
		ДатаОтгрузки0 =  ДобавитьМесяц(НачалоМесяца(ЭлементыФормы.ДатаФормы.Значение),-3);
		Запрос.УстановитьПараметр("ДатаОтгрузки0", ДатаОтгрузки0 );  
	иначе 
		Запрос.Текст = Запрос.Текст +"
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	ДатаОтгрузки
		|АВТОУПОРЯДОЧИВАНИЕ";
		ДатаОтгрузки0 =  НачалоДня(ЭлементыФормы.ДатаФормы.Значение);
		Запрос.УстановитьПараметр("ДатаОтгрузки0",ДатаОтгрузки0);
	КонецЕсли;                                 
	
	ДатаОтгрузки1 = КонецДня(ЭлементыФормы.ДатаФормы.Значение + КолДнейНеважности *86400 );
	Запрос.УстановитьПараметр("ДатаОтгрузки1", ДатаОтгрузки1 ); //!!!
	Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
	
	Состояние("Идет поиск "+?(неотгруженные,"неотгруженных","")+" заказов с датой отгрузки* с "+Формат(ДатаОтгрузки0,"ДЛФ=DD")+" по "+Формат(ДатаОтгрузки1,"ДЛФ=DD")+"...");
	
	началоВр = ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	Результат = Запрос.Выполнить();
	КонецВр = ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	ВремяВыполнения = Число(КонецВр - началоВр);
	
	парамЗапроса = стрЗаменить(Маршрут.Наименование,";","")+Формат(ДатаФормы,"ДЛФ=D");
	Если ВремяВыполнения>=0.9 Тогда
		ЗаписатьВЖурналИзмененийВремяВыполненияВнешнейОбработки( 618, Окр(ВремяВыполнения,0), "Кнопка [Обновить] - ВыполнитьЗапрос - "+парамЗапроса+" ("+формат(ВремяВыполнения,"ЧДЦ=3")+" Сек.)" ); //!!!!
	КонецЕсли;	
	
	Io = Заказы.Количество();   //количество уже введенных заказов
	тз = Результат.Выгрузить();
	//Плотников, пересчет объема дисков и добавление 30% к объему, по просьбе Фролова 08.09.2016
	Для каждого стр1 из тз Цикл
		//+++ 08.12.2017  по задаче № 37329
		//Если стр1.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		//	стр1.Объем = стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура) * 1.3;
		//ИначеЕсли стр1.Номенклатура.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Если стр1.Объем = 0 тогда
			стр1.Объем = стр1.Количество * ВычислитьОбъемНоменклатуры(стр1.Номенклатура,3);
			Сообщить("У товара "+стр1.Номенклатура.Код+" "+стр1.Номенклатура.Наименование+" - НЕ заполнен Объём! Используется объём: "+формат(стр1.Объем / стр1.Количество,"ЧДЦ=3")+"м3");
		КонецЕсли;
		Если стр1.ГрузШина тогда
			стр1.Объем = стр1.Объем * 1.3;
		КонецЕсли;
	КонецЦикла;
	//======================================================================================	
	Если Io=0 Тогда
		Если неотгруженные Тогда//+++ 10.10.2011
			тз.Свернуть("ДатаОтгрузки, Заказ, Контрагент, Ответственный, ВремяВыгрузки, Суббота, Понедельник", "Количество, Кубатура, Вес, Объем, КолКамеры, КолАк, ОбАк,Сумма");//+++ 14.04.2014 Объем,
			Тз.Колонки.Добавить("Наличка");
			Для каждого стр из ТЗ Цикл
				Если не стр.Заказ.НеЗабиратьОплатуПриВыгрузке и найти(стр.Заказ.ДоговорКонтрагента.Наименование,"*") > 0 Тогда
					стр.наличка = стр.Заказ.СуммаДокумента + стр.Заказ.ТРНал + стр.Заказ.ДолгЗаПредыдущиеОтгрузки;
				иначе
					стр.наличка = стр.Заказ.ТРНал;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Состояние("Идет проверка списка из "+тз.Количество()+" заказов...");
		Заказы.Загрузить( тз );
		
		//+++ 27.10.2017 - перепроверка !!!
		Сч=0; 
		пока Сч <=Заказы.Количество()-1 Цикл
			состояние("Проверяется "+строка(сч)+" из "+строка(Заказы.Количество())+" заказов...");
			ОбработкаПрерыванияПользователя();
			стр1 = Заказы[Сч];
			Отказ = ложь; //+++ 18.10.2017
			ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(стр1.Заказ, Отказ, стр1.Контрагент, ТекущаяДата() ); //18.10.2017
			Если Отказ тогда
				сообщить(строка(стр1.Заказ)+" - автоматически удалён из списка возможной отгрузки на "+формат(ТекущаяДата(),"ДЛФ=DD") , СтатусСообщения.Внимание);
				Заказы.Удалить(Сч);
			Иначе
				Сч = Сч+1;
			КонецЕсли;
 		КонецЦикла;
		
		
		//----------сортировка по алфавиту!------------------------
		Заказы.Сортировать("Контрагент,АдресДоставки,Ответственный");

		//------Заполнение значений строки с изменениями-----------
		ДатаОтгрузкиНеважна = КонецДня(ЭлементыФормы.ДатаФормы.Значение) + КолДнейНеважности * 86400;
		начДня =  НачалоДня(ТекущаяДата());
		предКоординаты = ""; ПредРасстояние = 0; //12.03.2019 - чтобы уменьшить число расчетов расстояний
		Для Каждого стр1 из Заказы Цикл  
			ОбработкаПрерыванияПользователя();
			ЗаполнитьСтроку(стр1, Истина, неотгруженные, ложь); //чтобы не дублить...
			стр1.Срочность = Цел( ( ?(стр1.ДатаОтгрузки='00010101', ДатаОтгрузкиНеважна, стр1.ДатаОтгрузки) - начДня  )/86400 ); //+++ 25.04.2012
		КонецЦикла;
		
		
	Иначе //------------------------------уже есть заказы-------------------------------
		Состояние("Идет поиск заказов на отгрузку "+Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD")+"...");
		
		Если неотгруженные Тогда//+++ 10.10.2011
			тз.Свернуть("ДатаОтгрузки, Заказ, Контрагент, Ответственный, ВремяВыгрузки, Суббота, Понедельник", "Количество, Кубатура, Вес, Объем, КолКамеры, КолАк, ОбАк,Сумма");//+++ 14.04.2014 Объем,
			Тз.Колонки.Добавить("Наличка");
			Для каждого стр из ТЗ Цикл
				Если не стр.Заказ.НеЗабиратьОплатуПриВыгрузке и найти(стр.Заказ.ДоговорКонтрагента.Наименование,"*") > 0 Тогда
					стр.наличка = стр.Заказ.СуммаДокумента + стр.Заказ.ТРНал + стр.Заказ.ДолгЗаПредыдущиеОтгрузки;
				иначе
					стр.наличка = стр.Заказ.ТРНал;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		i=1;
		Для i=1 по тз.Количество() Цикл
			Выборка = тз[i-1]; 
			
			ОбработкаПрерыванияПользователя();
			
			Если (i<=Io) и (Io>0) Тогда// обновление уже готовых строк
				стр222 = НайтиЗаказ(Выборка.Заказ);
				Если стр222 = Неопределено 
					Тогда стр222 = Заказы.Добавить();
					иначе сообщить("Строка № "+строка(i)+" обновлена...");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(стр222, Выборка);
				ЗаполнитьСтроку(стр222, Истина, неотгруженные, ложь);// обновим старый заказ!
				Если (i=Io) и (тз.Количество()>Io) Тогда
					стр222.Расстояние = 0; // уже не до ярославля 
				КонецЕсли;	
			Иначе
				стр222 = НайтиЗаказ(Выборка.Заказ);
				Если стр222 = Неопределено Тогда
					стр222 = Заказы.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(стр222, Выборка);
				ЗаполнитьСтроку(стр222, Истина, неотгруженные, ложь);// только Новые строки!!!
			КонецЕсли;
			
			стр222.ДатаОтгрузки = получитьПоследнююДатуУстановкиКатегории(стр222.Заказ);//+++ 23.09.2013
			стр222.Срочность = ( ?(стр222.ДатаОтгрузки='00010101', КонецДня(ЭлементыФормы.ДатаФормы.Значение)	+ КолДнейНеважности * 86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата() ) )/86400; //+++ 25.04.2012
		КонецЦикла;//тз
		заказы.Сортировать("Контрагент, Срочность");
	КонецЕсли; // обновление таблицы
		
	//----------------------Расстояние------------------
	Состояние("Идет расчет расстояний...");
	КоманднаяПанель1Пересчет(неопределено); // ЗДЕСЬ ВСЁ
	
	//---------------заново пересчитаем отгрузки по заказам-------------------------
	Состояние("Идет проверка отгрузок "+ Заказы.Количество()+" заказов");
	СписокЗаказов = новый массив;
	минДатаЗаказов = ТекущаяДата();
	Для Каждого стр1 из Заказы Цикл
		СписокЗаказов.Добавить( стр1.Заказ );
		Если минДатаЗаказов>стр1.Заказ.Дата Тогда //реализация по заказу не раньше самого заказа
			минДатаЗаказов=стр1.Заказ.Дата;
		КонецЕсли;	   
	КонецЦикла;	  
	мСписокЗаказов  = ПроверитьОтгрузкуПоЗаказу(СписокЗаказов, ДатаФормы + КолДнейНеважности * 86400);
	мСписокОтгрузок = ПеречитатьСписокОтгрузок(СписокЗаказов, минДатаЗаказов, ДатаФормы + КолДнейНеважности * 86400);
	Состояние("Список содержит "+ Заказы.Количество()+" заказов");
	ОбновитьЗаявки();	
	СписокКонтрагентов = Новый СписокЗначений; //+++ 04.12.2018  - только включенные строки!!!
	для каждого стр1 из Заказы цикл
		Если стр1.Флаг и СписокКонтрагентов.НайтиПоЗначению(стр1.Контрагент)=Неопределено тогда
			СписокКонтрагентов.Добавить( стр1.Контрагент );
		КонецЕсли;	
	КонецЦикла;	
	
	СписокПодразделений = новый СписокЗначений;
	СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
	СписокПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());
	
	ЗапросБрак = Новый Запрос;
	ЗапросБрак.УстановитьПараметр("Контрагенты",СписокКонтрагентов);
	ЗапросБрак.УстановитьПараметр("СписокПодразделений",СписокПодразделений);
	ЗапросБрак.УстановитьПараметр("ДатаНач", НачалоМесяца(минДатаЗаказов) ); 
	ЗапросБрак.Текст = ПолучитьТекстЗапросаБрак(); // 04.12.2018
	РезБрак = ЗапросБрак.Выполнить().Выгрузить();
	
	Если ЗаявкиНаБрак.Количество()=0 и РезБрак.Количество()>0 Тогда
		Сообщить("Будет добавлено в отгрузку "+строка(РезБрак.Количество())+" Заявок на брак!", СтатусСообщения.Информация);
		ЗаявкиНаБрак.Загрузить(РезБрак);  //сразу ВСЁ включено!
	иначе
		Для каждого стр из РезБрак Цикл
			стр11 = ЗаявкиНаБрак.Найти(стр.Заявка, "Заявка");
			если Стр11 = неопределено Тогда   //добавление НОВЫХ!
				НовСтр = ЗаявкиНаБрак.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Стр);  
			КонецЕсли;	  
		КонецЦикла;  
	КонецЕсли;
	//==============================================================================
	ПересчетКоличестваФлаг();
КонецПроцедуры

Функция НайтиЗаказ(заказ1)
	
	стр2 = Неопределено;
	
	Для Каждого стр1 из Заказы Цикл
	ОбработкаПрерыванияПользователя();
		Если стр1.Заказ = заказ1 Тогда
			стр2=стр1;
			прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	возврат стр2;
	
КонецФункции	

Процедура ПриОткрытии()
	АдресИзИнтернета = ЛОЖЬ; //+++ 12.03.2019 отключаем!
	
	Если ЭлементыФормы.ДатаФормы.Значение=Дата(1,1,1) Тогда
		ЭлементыФормы.ДатаФормы.Значение = КонецДня(ТекущаяДата()); //+ КолДнейНеважности*86400);  
		// ДатаФормыПриИзменении(Неопределено);
	КонецЕсли;
	
	ЭлементыФормы.неотгруженные.Значение = Истина;
	//ЭлементыФормы.ДатаФормы.Доступность = ЛОЖЬ; 
	
	//ЭлементыФормы.Север.Значение = Истина;
	
	ЭтаФорма.Заголовок = ИмяЗаголовка+"Основная";//основная
	//ПослеВосстановленияЗначений(Неопределено);
	
	//нельзя выключить оба флажка!!! 
	//Если (ЭлементыФормы.Юг.Значение=Ложь) и (ЭлементыФормы.Север.Значение=Ложь) Тогда
	//	ЭлементыФормы.Север.Значение=Истина;
	//КонецЕсли;
	ЭлементыФормы.Флажок1.Значение = Ложь;   //+++ 26.04.2012
	ЭлементыФормы.Флажок2.Значение = Истина; //+++ 02.10.2013
	
	 //+++ 01.07 - 27.07.2016
	 //ЭлементыФормы.АдресИзИнтернета.Значение = Истина;
	   ЭлементыФормы.АдресИзИнтернета.Значение = ЛОЖЬ;
	 	ЭлементыФормы.ОбновлятьАдреса.Значение = ЛОЖЬ; 
		
	Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)<>неопределено 
		или мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.найти(глТекущийПользователь)<>неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Сохранить.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.СохранитьКАК.Доступность = Истина;
	КонецЕсли;	
	
	//+++)
	
	
	ПрочитатьЗаполнитьКатегорииОбъекта();
	УстановитьКатегорииПоФлажкам();
	
	Если РольДоступна("МенеджерПоПродажамСОграничениемПравДоступа") тогда
     ЭлементыФормы.ДействияФормы.Кнопки.Тарифы.доступность = Истина;
    КонецЕсли; 
	
	ЗапонитьПеревозчиков(); //02.04.2018
КонецПроцедуры

Процедура ЗапонитьПеревозчиков() //02.04.2018
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Выразить(ЗначенияСвойствОбъектов.Объект как Справочник.Контрагенты).НаименованиеПолное КАК Контр
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &Свойство
	               |	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контр
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90332") ); // Перевозчик LOGISTIC.yst.ru
	Результат = Запрос.Выполнить();
	табл = Результат.Выгрузить();	
	ЭлементыФормы.Перевозчик.СписокВыбора.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Контр") );
КонецПроцедуры

Процедура ЗаказыКонтрагентПриИзменении(Элемент)
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	Если ЗначениеЗаполнено(стр1.Заказ) Тогда 
		Если стр1.Контрагент<>стр1.Заказ.Контрагент Тогда
			стр1.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
			стр1.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;	
		ЗаполнитьСтроку(стр1, Истина, неотгруженные, ложь);
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаказыТарифНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	стр1  = ЭлементыФормы.Заказы.ТекущиеДанные;
	
	Если Заказы.Количество()>0 Тогда
	Обработка = Обработки.ЗначенияСвойствОбъекта.Создать();
	Обработка.НазначениеСвойств    = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ТарифДоставки).НазначениеСвойства;
	Обработка.ОбъектОтбораЗначений = ЭлементыФормы.Заказы.ТекущиеДанные.Контрагент; //Заказы.ВыгрузитьКолонку("Контрагент");
	Обработка.ОбъектОтбораНазначений = Справочники.Контрагенты.НайтиПоКоду("00031  ");
	
	Обработка.ПрочитатьЗаполнитьСвойстваИЗначения();
	Обработка.ПолучитьФорму().ОткрытьМОДАЛЬНО();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаказыТарифПриИзменении(Элемент)
	 стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	 
 значНов = стр1.тариф; //число
 
 //1) пересчет
 Если стр1.тариф>0 Тогда
 стр1.СуммаДоставки = стр1.Кубатура * стр1.тариф;
 иначе 
 стр1.СуммаДоставки = - стр1.Количество * стр1.тариф;
 КонецЕсли;

ТарифДоставки1 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ТарифДоставки); 
 //2) найдем в регистре
 отбор1 = новый структура("Объект", стр1.Контрагент);
 отбор1.Вставить("Свойство", ТарифДоставки1 ); 
 рс = регистрыСведений.ЗначенияСвойствОбъектов.Получить(отбор1);
 
 
 Если рс<>неопределено Тогда
	 Если ТипЗнч(рс.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
	 	значСтар = Число(рс.Значение.Наименование);
 	 иначе
	 	значСтар = рс.Значение;
	 КонецЕсли;
	
	Если значСтар<>значНов Тогда	 
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = КодВозвратаДиалога.Да;
	Ответ = Вопрос("При записи - старое значение: "+Строка(значСтар)+" 
			   |будет заменено на новое: "+Строка(значНов)+"
			   |Продолжить выполнение операции?", Режим, 10, Ответ, "Запись нового значения");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;	

//3) запишем новое значение с замещением
Если значНов<>Цел(значНов) Тогда
	эл1 = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Строка(значНов),Истина,,);
	Если эл1 = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
		эл1 = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		эл1.Владелец  = ТарифДоставки1;
		эл1.Наименование = Строка(значНов);
		эл1.Записать();
	КонецЕсли;
иначе
	эл1 = значНов;
КонецЕсли;

	регСвЗапись = регистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
 	регСвЗапись.Объект = стр1.Контрагент;
	регСвЗапись.Свойство = ТарифДоставки1;
 	регСвЗапись.Значение = эл1;
	попытка
	регСвЗапись.Записать(Истина);
 		сообщить("В свойства контрагента: "+стр1.Контрагент+" записан Тариф доставки: "+СокрЛП(эл1), СтатусСообщения.Информация);
	исключение
	    сообщить("Ошибка при записи свойства контрагента: "+стр1.Контрагент+" - Тариф доставки: "+СокрЛП(эл1), СтатусСообщения.Внимание);
	КонецПопытки;	 
	
КонецПроцедуры

Процедура ЗаказыАдресДоставкиПриИзменении(Элемент)
	  Предупреждение("Адрес доставки нужно менять в Заказе! Здесь менять адрес нельзя!!!", 30);
КонецПроцедуры

Процедура АдресИзИнтернетаПриИзменении(Элемент)
	Если АдресИзИнтернета тогда
		Если Вопрос("Построить выбранный Маршрут на Яндекс-Карте?", РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да,"Карта маршрута",КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да тогда
			ОсновныеДействияФормыМаршрут(неопределено);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры
Процедура ОбновлятьАдресаПриИзменении(Элемент)
	Если ОбновлятьАдреса тогда
		Если Вопрос("Рассчитать Расстояние между точками по Карте?", РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да,"Расчет расстояний",КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да тогда
			КоманднаяПанель1Пересчет(неопределено);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


//процедура инициализирует карту постащика из макета
Процедура ИнициализироватьКарту(Поставщик="Гугл")
	
	ПутьКФайлу = КаталогВременныхФайлов()+"Карта1.html";
	Ф = новый Файл(ПутьКФайлу);
	Если Ф.Существует() Тогда
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли; 
	
	Т = новый ТекстовыйДокумент;
	ТД = ЭтотОбъект.ПолучитьМакет("Макет" + Поставщик);
	Т.УстановитьТекст(ТД.ПолучитьТекст());
	Т.Записать(ПутьКФайлу);
	
	ЭлементыФормы.Карта.Перейти(ПутьКФайлу);
	
КонецПроцедуры

Процедура ПостроитьКластер(Заказы1)
	ЭлементыФормы.Карта.Документ.parentWindow.eval("Reset()");
	
		i= найти(нашиКоординаты,",");
		Долгота = лев(нашиКоординаты,i-1);
		Широта = прав(нашиКоординаты, стрДлина(нашиКоординаты)-i);
		ЭлементыФормы.Карта.Документ.parentWindow.eval("addToPointArray(" + Широта + "," + Долгота + ", '0', ""Ярославль, Яршинторг"");");
	
	Для Каждого ТекСтрока Из Заказы1 Цикл
		i= найти(ТекСтрока.Координаты,",");
		если i>0 тогда
		Долгота = лев(ТекСтрока.Координаты,i-1);
		Широта = прав(ТекСтрока.Координаты, стрДлина(ТекСтрока.Координаты)-i);
		
		СодержимоеТочки = "Содерижмое точки";  //опять же можно вставить свое название
		ЭлементыФормы.Карта.Документ.parentWindow.eval("addToPointArray(" + Широта + "," + Долгота + ", '" + строка(ТекСтрока.Точка) + "', """ + ТекСтрока.АдресДоставки + """);");
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.Карта.Документ.parentWindow.eval("drawCluster();");
КонецПроцедуры

функция ПостроитьМассивКоординат12(Адр1, Адр2)
	Заказы12 = новый ТаблицаЗначений;
	Заказы12.Колонки.Добавить("Координаты");
	
	стр1 = Заказы12.Добавить();
	стр1.Координаты = Адр1;
	
	стр2 = Заказы12.Добавить();
	стр2.Координаты = Адр2;
	
	рез = ПостроитьМассивКоординат(Заказы12, ложь);
	
	возврат рез;
КонецФункции	

// возвращает массив 3х элементов:
// [ начТочка, промежуточные, конТочка ]
//  [ [ш0,д0], [ [],[],[] ], [шN,дN] ]
//
функция ПостроитьМассивКоординат(Заказы1, отНас=Истина)
	
	Рез = "[";
	
	если отНас тогда
	i= найти(нашиКоординаты,",");
		Долгота = лев(нашиКоординаты,i-1);
		Широта = прав(нашиКоординаты, стрДлина(нашиКоординаты)-i);
    опНач = Широта +","+Долгота;
	Рез = Рез+ "[" + опНач + "],";
	иначе
	i= найти(Заказы1[0].Координаты,",");
		Долгота = лев(Заказы1[0].Координаты,i-1);
		Широта = прав(Заказы1[0].Координаты, стрДлина(Заказы1[0].Координаты)-i);
    опНач = Широта +","+Долгота;
	Рез = Рез+ "[" + опНач + "],";
	КонецЕсли;

	Рез = Рез+"[";
	Если отНас тогда
		Для Каждого ТекСтрока Из Заказы1 Цикл
			i= найти(ТекСтрока.Координаты,",");
			если i>0 тогда
			Долгота = лев(ТекСтрока.Координаты,i-1);
			Широта = прав(ТекСтрока.Координаты, стрДлина(ТекСтрока.Координаты)-i);
			Рез = Рез + "[" + Широта+", "+Долгота+ "],";
			КонецЕсли;
		КонецЦикла;
		Рез = лев(Рез, стрДлина(Рез)-1);
	КонецЕсли;
	 Рез = Рез + "]";
	
	Если отНас тогда
		Рез = Рез + ",[" + опНач + "]";
    иначе
	i= найти(Заказы1[1].Координаты,",");
		Долгота = лев(Заказы1[1].Координаты,i-1);
		Широта = прав(Заказы1[1].Координаты, стрДлина(Заказы1[1].Координаты)-i);
    опКон = Широта +","+Долгота;
	Рез = Рез+ ",[" + опКон + "]";
	КонецЕсли;
	
	
Рез = Рез+"]";

возврат Рез;
КонецФункции

Процедура СеверПриИзменении(Элемент)
	// при изменении Север/Юг - нужно удалить таблицу полностью, а не обновлять!
	 ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение + 1; // другой день
	 ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, СтрДлина(ИмяЗаголовка)-3);	
	 
	 //УстановитьКатегорииПоФлажкам();
	 
	//ДатаФормыПриИзменении(неопределено);
КонецПроцедуры

 Процедура КоманднаяПанель1Контакты(Кнопка)
	форма1 = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка();
	форма1.отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	форма1.отбор.Объект.Значение = Водитель;
	форма1.отбор.Объект.Использование = Истина;
	
	форма1.отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	форма1.отбор.Тип.Значение.Добавить( Перечисления.ТипыКонтактнойИнформации.Телефон );
	форма1.отбор.Тип.Значение.Добавить( Перечисления.ТипыКонтактнойИнформации.Другое );
	форма1.отбор.Тип.Использование = Истина;
	
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие19.Доступность = ЛОЖЬ;
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие20.Доступность = ЛОЖЬ;
	форма1.ЭлементыФормы.ДействияФормы.Кнопки.Действие21.Доступность = ЛОЖЬ;
	
	форма1.ЭлементыФормы.РегистрСведенийСписок.АвтоКонтекстноеМеню = ЛОЖЬ;
	
	форма1.Открыть();
	
КонецПроцедуры

Процедура ВодительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Водитель) тогда
		
		Если Водитель.ЗапретитьИнкассацию тогда //15.11.2016
			Предупреждение("   Внимание!
			|Водителю: "+строка(Водитель)+" - ЗАПРЕЩЕНА Инкассация!",30);
		КонецЕсли;	
		 
	    Запрос = Новый Запрос;
	    Запрос.УстановитьПараметр("наим",ФамилияИнициалыФизЛица(Водитель));
		Запрос.УстановитьПараметр("ДатаТ",ТекущаяДата());
		Запрос.УстановитьПараметр("дата1",ТекущаяДата()-60*60*24*14);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаданиеНаОтгрузку.Ссылка
		               |ИЗ
		               |	Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
		               |ГДЕ
		               |	ЗаданиеНаОтгрузку.Водитель = &Наим
		               |	И ЗаданиеНаОтгрузку.Дата МЕЖДУ &дата1 И &ДатаТ
		               |	И ЗаданиеНаОтгрузку.ДатаВозвращения > &ДатаТ
		               |	И ЗаданиеНаОтгрузку.Проведен = Истина";
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество()>0 Тогда     //Водитель должен быть еще на выезде, предупреждаем
			Ответ = Вопрос("Возможно данный водитель находится в рейсе, вы уверены, что хотите выбрать именно его?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
			если Отказ Тогда
				Водитель = Справочники.ФизическиеЛица.ПустаяСсылка();
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
	ЭлементыФормы.КоманднаяПанель1.Кнопки.Контакты.Доступность = ЗначениеЗаполнено(Водитель);
	Если ЗначениеЗаполнено(Водитель) тогда
		Комментарий = "тел.водителя: "+ получитьТелефоны(Водитель);
		АвтомобильГосНомерАвтомобиля = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
		Комментарий = Комментарий +"
		|"+АвтомобильГосНомерАвтомобиля;   //автомобиль марка + госномер
		
//+++ попытаемся определить тип
		АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
		i= найти(АвтомобильГосНомерАвтомобиля, " ");
		если i>0 тогда
			МаркаАвтомобиля 	 = СокрЛП(Лев(АвтомобильГосНомерАвтомобиля, i-1));
			ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
			ГосНомерАвтомобиля = стрЗаменить(ГосНомерАвтомобиля, " ",""); // р944кн76
			если стрДлина(ГосНомерАвтомобиля)>=8 тогда
			ГосНомерАвтомобиля = сред(ГосНомерАвтомобиля, 2,3);	
			КонецЕсли;
		//+++( найдём тип авто
		Если МаркаАвтомобиля<>"" и ГосНомерАвтомобиля<>"" тогда
        Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТипАвтомобиля.Ссылка,
		|	ТипАвтомобиля.Объем,
		|	ТипАвтомобиля.Вес
		|ИЗ
		|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
		|ГДЕ
		|	ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Марка)
		|	И ТипАвтомобиля.ПолноеНаименование ПОДОБНО (&Номер)";
		Запрос.УстановитьПараметр("Марка", "%"+МаркаАвтомобиля+"%" );
		Запрос.УстановитьПараметр("Номер", "%"+ГосНомерАвтомобиля+"%" );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
			Если Выборка.Следующий() тогда
				ТипАвтомобиля = выборка.ссылка;
				ВесМакс = выборка.Вес;
				ОбъемМакс = выборка.Объем;
				ТипАвтомобиляПриИзменении(неопределено);
			КонецЕсли;
		КонецЕсли;
		//+++)
	КонецЕсли;//i>0
	
	КонецЕсли;
	
КонецПроцедуры


//----------------------Сохранение-------------------
Процедура ПередСохранениемЗначений(Отказ)
	
Если фЕстьФлаги Тогда
		Ответ = КодВозвратаДиалога.Нет;
		Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Будут Сохранены только выделенные строки.
	|Продолжить сохранение?", Режим, 30, ответ, "Сохранение ОБЩИХ настроек");
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
КонецЕсли;

Если Найти(ЭтаФорма.Заголовок," - ")>0 Тогда 
	ИмяНастройки = Прав(ЭтаФорма.Заголовок, стрДлина(ЭтаФорма.Заголовок) - стрДлина(ИмяЗаголовка)+1);
иначе	
	ИмяНастройки="Основная";
	ЭтаФорма.Заголовок = ИмяЗаголовка + ИмяНастройки;
КонецЕсли;

Если СокрЛП(ИмяНастройки = "Основная") Тогда
	
	//09.06.2017 
	 ВодительФамилия = СокрЛП(строка(Водитель));
	 фн = найти(ВодительФамилия," ");  
	 если фн>0 тогда 
		вФ = лев(ВодительФамилия, фн-1); 
		ВодительФамилия = СокрЛП(прав(ВодительФамилия, стрДлина(ВодительФамилия)-фн));
		ви = ""; во="";
		фн = найти(ВодительФамилия," ");  
		если фн>0 тогда
		ви = лев(ВодительФамилия,1); 
		ВодительФамилия = СокрЛП(прав(ВодительФамилия, стрДлина(ВодительФамилия)-фн));
		КонецЕсли;
		
		если стрДлина(ВодительФамилия)>0 тогда
		во = лев(ВодительФамилия, 1); 
		КонецЕсли;
		
		ВодительФамилия = вф + " "+ви+"."+во;
	 КонецЕсли;
	 
	ИмяНастройки = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(ЭлементыФормы.Диски.Значение," Диски","")+?(ЭлементыФормы.Тендеры.Значение," Тендеры","")+?(ЭлементыФормы.ПЭК.Значение," ПЭК","")+?(ЭлементыФормы.Маркировка.Значение," Маркировка","") +?(ЭлементыФормы.КолесаТУТ.Значение," КолесаТУТ","")
	+?(ЭлементыФормы.МаршрутыНадпись.Значение="",""," "+стрЗаменить(ЭлементыФормы.МаршрутыНадпись.Значение,";",",") )
	//+?(ЭлементыФормы.Неотгруженные.Значение," Неотгруженные","")
	//+?(ЗначениеЗаполнено(ЭлементыФормы.Водитель.Значение)," - "+строка(ЭлементыФормы.Водитель.Значение),"");
    +?(ЗначениеЗаполнено(ВодительФамилия)," - "+ВодительФамилия,"");  //09.06.2017 
	
	ИмяНастройки = стрЗаменить(ИмяНастройки, " (Ярославль)", "");
	ИмяНастройки = стрЗаменить(ИмяНастройки, ", -", " -");
	ИмяНастройки = СокрЛП(ИмяНастройки);
	Если НЕ ВвестиСтроку(ИмяНастройки, "Введите название общей настройки", 200, ЛОЖЬ) Тогда
		возврат;
	КонецЕсли;	
КонецЕсли;

//ИмяНастройки = стрЗаменить(ИмяНастройки,"\","-");
ИмяНастройки = стрЗаменить(ИмяНастройки,"/","\");
ИмяНастройки = стрЗаменить(ИмяНастройки,":",";");
ИмяНастройки = стрЗаменить(ИмяНастройки,"?",".");
ИмяНастройки = стрЗаменить(ИмяНастройки,"!",".");
ИмяНастройки = стрЗаменить(ИмяНастройки,"  "," "); //2-ые пробелы убираем!

//++++ пока не надо... с 1.04 сделаем +++

//Если СтрЧислоВхождений(ИмяНастройки,"Москва")>1 тогда //29.03.2019 Москва СВ, Москва В, Москва ЮВ, Москва Ю, Москва ЮЗ, Москва З, Москва СЗ, Москва С,  - Васичкин С.Е
//	 вх1 = найти(ИмяНастройки,"Москва ");  л1 = 6;
//	 стр111 = прав(ИмяНастройки, стрДлина(ИмяНастройки)-вх1 - л1);
//	 стр111 = СтрЗаменить(стр111,"Москва ","");
//	 ИмяНастройки1 = лев(ИмяНастройки, вх1+л1)+стр111; //29.03.2019 Москва СВ, В, ЮВ, Ю, ЮЗ, З, СЗ, С, - Васичкин С.Е
//	 Если Вопрос("Сократить название папки для сохранения до 
//		 |"+ИмяНастройки1+"?", РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Да,"Сохранить",КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да тогда
//		 ИмяНастройки = ИмяНастройки1;
//	 КонецЕсли;	 
//КонецЕсли;	

имяФайла1 = ИмяПапки+ИмяНастройки;
СоздатьКаталог(имяФайла1);

ЭтаФорма.Заголовок = "Обработка Расчет поездки в Подмосковье - "+ИмяНастройки;

	i=0; нетОшибок = Истина;
	Для Каждого эл из СписокПолейДляСохранения Цикл
	попытка 
		Если эл = "Заказы" Тогда  //4
		ТаблЗнач = ЭтотОбъект.Заказы.Выгрузить();
			//---------------------------------
			N=ТаблЗнач.Количество();

			Если (фЕстьФлаги) Тогда
				j=0;
				пока j<N Цикл
					Если не таблЗнач[j].флаг Тогда
					ТаблЗнач.Удалить(j); N=N-1;
					Иначе 
					j=j+1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ТаблЗнач.Колонки.Удалить(1);//флаг
		//------------------------------------------------------------	
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ТаблЗнач);
		иначеЕсли эл = "Обратки" Тогда  //4
		ТаблЗнач = ЭтотОбъект.Обратки.Выгрузить();
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ТаблЗнач);
		
		иначеЕсли эл = "ЗаявкиНаБрак" Тогда  //
		ТаблЗнач = ЭтотОбъект.ЗаявкиНаБрак.Выгрузить();
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ТаблЗнач);
		
		иначеЕсли эл = "Маршруты" Тогда  //
		ТаблЗнач = ЭтотОбъект.Маршруты.Выгрузить();
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ТаблЗнач);
		
		Иначе
		ЗначениеВФайл(имяФайла1+ИмяФАЙЛАобр+Строка(i)+".1с", ЭлементыФормы[эл].Значение);
				
		КонецЕсли;
		
	исключение
	Сообщить("Ошибка при сохранении "+строка(i)+"-го файла: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	нетОшибок = Ложь;
	конецПопытки;
 	i=i+1;
	КонецЦикла;	
	
	Если нетОшибок Тогда
		Если N<>Заказы.Количество() Тогда
		Сообщить("Выделенные "+Строка(N)+" строк - сохранены в настройку '"+ИмяНастройки+"' Для общего доступа...", СтатусСообщения.Информация);
    	иначе
		Сообщить("Все данные - сохранены в настройку '"+ИмяНастройки+"' Для общего доступа...", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранитьКАК(Кнопка)
	ИмяНастройки="";
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, стрДлина(ИмяЗаголовка) - 3);
			
	ПередСохранениемЗначений(ЛОЖЬ);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений(ОсновнаяНастр1=Истина)
ОбновлятьДанные = Истина;
ЭлементыФормы.ОбновлятьАдреса.Значение = ЛОЖЬ;//01.07.2016 взводим флажок обновлять адреса

//+++ записываем все настройки в общий файл
ИмяНастройки="Основная";
ИмяПапки = ИмяПапки0;
ИмяФайла0 = ИмяПапки+ИмяНастройки; //777

флВыводитьСообщенияОЧастичнойОтгрузке = Истина;

//+++ 26.11.2018 - 20.03.2019 +++ очистить!
//Обратки.Очистить();	 
//ЗаявкиНаБрак.Очистить();
//ЗаявкиНаТранспорт.Очистить();

	Если (ОсновнаяНастр1<>Неопределено ) Тогда
		//ВвестиСтроку(ИмяНастройки, "Введите название настройки", 20, ЛОЖЬ);
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяПапки;
		ДиалогОткрытияФайла.Каталог = ИмяПапки+Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\";  //+++ 23/05/2012
		//Фильтр = "Текст(*.txt)|*.1с|Все файлы(*.*)|*.*";
	    //ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите общую настройку";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			ИмяФайла0 = ДиалогОткрытияФайла.Каталог;
		иначе
			возврат;	
		КонецЕсли;
	КонецЕсли;
	ИмяНастройки = Прав(имяФайла0, стрДлина(имяФайла0) - стрДлина(ИмяПапки));

	//имя настройки "хранится" в заголовке
	ЭтаФорма.Заголовок = ИмяЗаголовка+ИмяНастройки;

	файл1 = Новый Файл(ИмяФайла0+ИмяФАЙЛАобр+"0.1с");
	Если НЕ файл1.Существует() Тогда
		Сообщить("Не найдены файлы общей настройки.");
		возврат;
	КонецЕсли;

    НетОшибок1=Истина;  
	старыйФорматКатегорий = Истина; 	
	i=0;  //        Восстановитьзначения	
	Для Каждого эл из СписокПолейДляСохранения Цикл
	  попытка
		Если эл = "Заказы" Тогда //6 табл.часть
			 ТаблЗнач = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
			 ЭтотОбъект.Заказы.Очистить();
			 ЭтотОбъект.Заказы.Загрузить(ТаблЗнач);
			 
			Для Каждого стр222 из Заказы Цикл //+++ 25.04.2012 актуализация по текущим заказам!
				стр222.Срочность = ( ?(стр222.ДатаОтгрузки='00010101', НачалоДня(ЭлементыФормы.ДатаФормы.Значение)+КолДнейНеважности*86400,стр222.ДатаОтгрузки) - НачалоДня(ТекущаяДата()) )/86400; //+++ 23.09.2013
				стр222.Флаг = Истина;
	        КонецЦикла;
			
	  ИначеЕсли эл = "Обратки" Тогда //6 табл.часть
			 ТаблЗнач = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
			 ЭтотОбъект.Обратки.Очистить();
			 ЭтотОбъект.Обратки.Загрузить(ТаблЗнач);
			 
	  ИначеЕсли эл = "ЗаявкиНаБрак" Тогда //
	    	 ТаблЗнач = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
	    	 ЭтотОбъект.ЗаявкиНаБрак.Очистить();
	    	 ЭтотОбъект.ЗаявкиНаБрак.Загрузить(ТаблЗнач);
			 
	  ИначеЕсли эл = "Маршруты" Тогда //
	    	 ТаблЗнач = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
	    	 ЭтотОбъект.Маршруты.Очистить();
	    	 ЭтотОбъект.Маршруты.Загрузить(ТаблЗнач);
	  Иначе
			ЭлементыФормы[эл].Значение = ЗначениеИзФайла(ИмяФайла0+ИмяФАЙЛАобр+Строка(i)+".1с");
	  КонецЕсли;
		
	   исключение
	    Сообщить("Не все общие значения восстановлены. Ошибка при загрузке поля №"+строка(i)+" "+строка(эл), СтатусСообщения.Внимание);
	    НетОшибок1=Ложь;
	   КонецПопытки;	 
		i=i+1;
	КонецЦикла;	
	
	ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение; // Для контроля обновления
	
	УстановитьНазваниеКатегорий();
	
	СписокЗаказов = новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения( Заказы.ВыгрузитьКолонку("Заказ"));
	минДатаЗаказов = ДатаФормирования - 60*86400;
	
	 мСписокЗаказов  = ПроверитьОтгрузкуПоЗаказу(СписокЗаказов, ДатаФормы + КолДнейНеважности * 86400);
	 мСписокОтгрузок = ПеречитатьСписокОтгрузок(СписокЗаказов, минДатаЗаказов, ДатаФормы + КолДнейНеважности * 86400);

	Если НетОшибок1 Тогда
		Сообщить("Восстановлены данные общей настройки "+ИмяНастройки, СтатусСообщения.Информация);	
	КонецЕсли;
	
  //=======================проверка сразу!=======================================
	Сч=0;
	пока Сч <= Заказы.Количество()-1 Цикл
		
		состояние("Проверяется "+строка(сч)+" из "+строка(Заказы.Количество())+" заказов...");
		
		ОбработкаПрерыванияПользователя();
		стр1 = Заказы[Сч];
		
		Отказ = ложь; //+++ 18.10.2017
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(стр1.Заказ, Отказ, стр1.Контрагент, ТекущаяДата() ); //18.10.2017
		Если Отказ тогда
			сообщить(строка(стр1.Заказ)+" - автоматически удалён из списка возможной отгрузки на "+формат(ТекущаяДата(),"ДЛФ=DD"), СтатусСообщения.Внимание);
			Заказы.Удалить(Сч);
		Иначе
			Сч = Сч+1;
		КонецЕсли;
 	КонецЦикла;
 		
 //+++ 21.12.2017
 естьВсеКоординаты=ложь;
 Если ОбновлятьДанные тогда
	  Состояние("Идет обновление адресов...");
	 естьВсеКоординаты = ОбновитьАдресаДоставки(); 
 КонецЕсли;
 
  ПересчетКоличестваФлаг();	
  
  //Если естьВсеКоординаты тогда
  //  	Если Вопрос("Можно построить Маршрут.(Точки 0,1,2,.. будут A,B,С,..)
  //  		|Построить маршрут на Яндекс карте?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
  //  		ОсновныеДействияФормыМаршрут(неопределено);
  //  	КонецЕсли;
  //КонецЕсли;	
	
КонецПроцедуры//Восстановить

//------------Флажки----------------------------------
Процедура КоманднаяПанель1Действие9(Кнопка)
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг = Истина;
			
		Отказ = ложь; //+++ 18.10.2017
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Стр1.Заказ, Отказ, Стр1.Контрагент, ТекущаяДата() ); //18.10.2017
		Если Отказ тогда
			стр1.Флаг = ЛОЖЬ; // нельзя делать перемещение, Если уже идет отгрузка!
		КонецЕсли;

		Если стр1.Флаг тогда
			УстановкаФлага(Стр1);
		КонецЕсли;
	КонецЦикла;	
	фЕстьФлаги = Истина;
	ПересчетКоличестваФлаг();
КонецПроцедуры

Процедура КоманднаяПанель1Действие10(Кнопка)
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг = Ложь;
		УстановкаФлага(Стр1);
	КонецЦикла;
	фЕстьФлаги = Ложь;
	ПересчетКоличестваФлаг();
КонецПроцедуры

Процедура КоманднаяПанель1Действие11(Кнопка)
	фЕстьФлаги = Ложь;
	Для Каждого стр1 из Заказы Цикл
		стр1.Флаг = не стр1.Флаг;
		
		Если стр1.Флаг Тогда
			Отказ = ложь; //+++ 18.10.2017
			ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Стр1.Заказ, Отказ, Стр1.Контрагент, ТекущаяДата() ); //18.10.2017
			Если Отказ тогда
				стр1.Флаг = ЛОЖЬ; // нельзя делать перемещение, Если уже идет отгрузка!
			КонецЕсли;
		КонецЕсли;	
		
		Если стр1.Флаг Тогда
			УстановкаФлага(Стр1);
			фЕстьФлаги = Истина;
        КонецЕсли;
	КонецЦикла;
	ПересчетКоличестваФлаг();
КонецПроцедуры

Процедура ЗаказыФлагПриИзменении(Элемент)
	стр1 = ЭлементыФормы.Заказы.ТекущиеДанные;
	
	Если стр1.Заказ.Резерв тогда //+++ 23.01.2015 Резерв - грузить НЕЛЬЗЯ!
    	Предупреждение("По заказу: "+строка(стр1.Заказ)+" - Включен РЕЗЕРВ! 
					   |Отгружать такой заказ - НЕ НУЖНО !?", 60);
	//пока рекомендательно!
	//	стр1.Флаг = ложь;
	КонецЕсли;
	
//+++ 17.10.2017 ---------очень тормозит но блокирует сразу-----------------------------------------	
	Отказ = ложь;
	ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа( стр1.Заказ, Отказ, стр1.Заказ.Контрагент, стр1.Заказ.ДатаОтгрузки);
	Если Отказ тогда
		стр1.Флаг = ложь;
	 	Сообщить("НЕЛЬЗЯ ставить в отгрузку документ: "+строка( стр1.Заказ) , СтатусСообщения.Внимание );
	КонецЕсли;
	
	
	Если стр1.Флаг Тогда
		Если стр1.Контрагент.ЗапретОтгрузки тогда //+++ 22.08.2014
			Предупреждение("По клиенту: "+строка(стр1.Контрагент)+" - Запрещены ВСЕ отгрузки!", 30);
			стр1.Флаг = ложь;
		Иначе
		фЕстьФлаги = Истина;
	    КонецЕсли;	
	иначе
		фЕстьФлаги = Ложь;
		Для Каждого стр2 из Заказы Цикл
			Если стр2.Флаг Тогда
				фЕстьФлаги = Истина;
				прервать;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	УстановкаФлага(Стр1);
	
	ПересчетКоличестваФлаг()
	
КонецПроцедуры

процедура УстановкаФлага(стр1)
	Если стр1.Флаг Тогда
		Отбор = новый Структура;
		Отбор.Вставить("Контрагент",стр1.Контрагент);
		Отбор.Вставить("Флаг",Ложь);
		СтрокиБрака = ЗаявкиНаБрак.НайтиСтроки(Отбор);
		Если СтрокиБрака <> Неопределено Тогда
			
			Для каждого СтрокаБрака из СтрокиБрака Цикл	
				Ответ = Вопрос("По этому контрагенту найден бракованный товар, который ему надо вернуть по адресу " + СтрокаБрака.Адрес, РежимДиалогаВопрос.ДаНет);
				Если (Ответ = КодВозвратаДиалога.да) Тогда
					
					НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
					НоваяЗадача.Исполнитель  = Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С.");
					НоваяЗадача.Наименование = "Добавлен на отгрузку возврат по браку " + Строка(СтрокаБрака.Контрагент);
					НоваяЗадача.Дата = ТекущаяДата();
					НоваяЗадача.ДатаИсполнения = ТекущаяДата();
					НоваяЗадача.Оповещение   = Истина;
					НоваяЗадача.СрокОповещения = ТекущаяДата()+60*60*8;
					НоваяЗадача.Описание = "Добавлен на отгрузку возврат по браку " + Строка(СтрокаБрака.Контрагент);
					НоваяЗадача.Записать();
					
					СтрокаБрака.Флаг = Истина;
					СтрокаБрака.КЗаказу = стр1.Заказ;
				Иначе
					
					НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
					НоваяЗадача.Исполнитель  = Справочники.Пользователи.НайтиПоКоду("Левченко Ф.С.");
					НоваяЗадача.Наименование = "Отказано в добавлении на отгрузку возврата по браку " + Строка(СтрокаБрака.Контрагент);
					НоваяЗадача.Дата = ТекущаяДата();
					НоваяЗадача.ДатаИсполнения = ТекущаяДата();
					НоваяЗадача.Оповещение   = Истина;
					НоваяЗадача.СрокОповещения = ТекущаяДата()+60*60*8;
					НоваяЗадача.Описание = "Отказано в добавлении на отгрузку возврата по браку " + Строка(СтрокаБрака.Контрагент);
					НоваяЗадача.Записать();

					
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	Иначе
		Отбор = новый Структура;
		Отбор.Вставить("Контрагент",стр1.Контрагент);
		Отбор.Вставить("КЗаказу",стр1.Заказ);
		СтрокиБрака = ЗаявкиНаБрак.НайтиСтроки(Отбор);
		Если СтрокиБрака <> Неопределено Тогда
			Для каждого СтрокаБрака из СтрокиБрака Цикл
				СтрокаБрака.Флаг = Ложь;
				СтрокаБрака.КЗаказу = Документы.ЗаказПокупателя.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

 процедура ПересчетКоличестваФлаг()
Кол=0; Кол13=0; СумДоставки=0; Сумма=0; Расстояние=0; Вес = 0; КолКамеры=0; КолАк=0; Наличка =0;

	 тзКонтр = Заказы.Выгрузить();
	 тзКонтр.Свернуть("Флаг, Контрагент, Заказ, Тариф", "Количество, Кубатура, КолКамеры, КолАк, Наличка, ОбАк, Вес, Объем, СуммаДоставки, Сумма, Расстояние");
	 i=0; N=тзКонтр.Количество();
	 
	 максРасстояние = 0; 
	 пока i<N Цикл //=========удалим то, что не отмечено флажками============
		 Если НЕ тзКонтр[i].флаг Тогда
			 тзКонтр.Удалить(i); N=N-1;
		 Иначе 
			 максРасстояние = максРасстояние + тзКонтр[i].Расстояние;
			  i=i+1;
		 КонецЕсли;	 
	 КонецЦикла;
	 ПрямойКм = максРасстояние;
	 ОбщийКм  = ПрямойКм+ОбраткаКм;
	 // Плотников, расчет объема с учетом АКБ по новой схеме ===================
	 
	 КолАКБОбщее = тзКонтр.Итог("КолАк");
	 ОбъемБезАКБ = тзКонтр.Итог("Объем") - тзКонтр.Итог("ОбАк");
	 
	 Если КолАКБОбщее > 5 Тогда //Если меньше 5 то оставляем как есть, если больше, то на каждые 30 АКБ - 2 куба
	     К = Цел(КолАКБОбщее/30);
		 Объем = (К+1)*2;
		 Объем1АКБ = Объем/КолАКБОбщее;
		 Для каждого стрТ из тзКонтр Цикл
			 стрТ.Объем = (СтрТ.Объем - СтрТ.ОбАк) + СтрТ.КолАк*Объем1АКБ;
		 КонецЦикла;
	 КонецЕсли;
	 // ========================================================================
	 
	 // Расчет объема брака ====================================================
	 
	 Отбор = Новый Структура;
	 Отбор.Вставить("Флаг",Истина);
	 
	 Таб = ЗаявкиНаБрак.Выгрузить();
	 ТабОбъем = Таб.Скопировать(Отбор);
	 ОбъемБрака = ТабОбъем.Итог("Объем");
	 ВесБрака = ТабОбъем.Итог("Вес");
	 
	 // ========================================================================

	ЭлементыФормы.Заказы.Колонки.Количество.ТекстПодвала = тзКонтр.Итог("Количество");
	ЭлементыФормы.Заказы.Колонки.Кубатура.ТекстПодвала = тзКонтр.Итог("Кубатура");
	ЭлементыФормы.Заказы.Колонки.КолКамеры.ТекстПодвала = тзКонтр.Итог("КолКамеры");
	ЭлементыФормы.Заказы.Колонки.КолАк.ТекстПодвала = тзКонтр.Итог("КолАк");
	ЭлементыФормы.Заказы.Колонки.Наличка.ТекстПодвала = тзКонтр.Итог("Наличка");
	ЭлементыФормы.Заказы.Колонки.СуммаДоставки.ТекстПодвала = тзКонтр.Итог("СуммаДоставки"); 
	ЭлементыФормы.Заказы.Колонки.Вес.ТекстПодвала = тзКонтр.Итог("Вес");
	
	ЭлементыФормы.Заказы.Колонки.Объем.ТекстПодвала = тзКонтр.Итог("Объем"); //+++ 
	
	ЭлементыФормы.ВесОбъем.Значение = "Общий объем вместе с браком: " +  Строка(тзКонтр.Итог("Объем")+ОбъемБрака);
	
	ЭлементыФормы.Заказы.Колонки.Сумма.ТекстПодвала = тзКонтр.Итог("Сумма"); // уже не актуальна!
	ЭлементыФормы.Заказы.Колонки.Расстояние.ТекстПодвала = максРасстояние;
	
	
	//+++ 08.02.2016 ====================================================
	пересчетПрибыльности(тзКонтр, ЛОЖЬ);	
	//======================================================================
	
	
	Если ВесМакс>0 и тзКонтр.Итог("Вес")/1000>ВесМакс тогда 
		Предупреждение("Превышение допустимого веса машины!
		|Вес: "+строка(тзКонтр.Итог("Вес")/1000)+" > "+строка(ВесМакс)+"т.", 10);
	КонецЕсли;	
	
	Если ОбъемМакс>0 и тзКонтр.Итог("Объем")>ОбъемМакс тогда 
		Предупреждение("Превышение допустимого объёма машины!
						|Объём: "+строка(тзКонтр.Итог("Объем"))+" > "+строка(ОбъемМакс)+"м3", 10);
	КонецЕсли;		
КонецПроцедуры

Процедура неотгруженныеПриИзменении(Элемент)
	
	//спросим перед таблицу при обновлении
//+++	ЭлементыФормы.ДатаФормы.Доступность = не Неотгруженные;
		
	Если неотгруженные Тогда
		отбор1 = ?(ЭлементыФормы.Север.Значение,"Север","");
		отбор1 =отбор1+"-"+ ?(ЭлементыФормы.Юг.Значение," Юг","");
		Предупреждение("Будет сформирован список Всех Неотгруженных заказов "+отбор1+"
		|за период с "+Формат(ДобавитьМесяц(НачалоМесяца(ЭлементыФормы.ДатаФормы.Значение),-6),"ДЛФ=D")+" по "+Формат(ЭлементыФормы.ДатаФормы.Значение + КолДнейНеважности *86400,"ДЛФ=D"),20);//!!!
	иначе
	//+++	 ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение + 1; // обязательно очистим таблицу
		Предупреждение("Будет сформирован список заказов 
					  |c Датой отгрузки - "+Формат(ЭлементыФормы.ДатаФормы.Значение,"ДЛФ=DD"),10);
	КонецЕсли;	
	ДатаФормыПриИзменении(неопределено);

КонецПроцедуры


Функция ПроверитьЗакрытиеЗаказа(СсылкаЗаказ)
	Если мСписокЗаказов.Найти(СсылкаЗаказ)=Неопределено И (СсылкаЗаказ.Проведен или СсылкаЗаказ.ПометкаУдаления) Тогда//+++ 08.11.2011
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли	
КонецФункции
 
Функция ПроверитьОтгрузкуПо1Заказу(СсылкаЗаказ)
	
	попытка
		Если мСписокОтгрузок.Найти(СсылкаЗаказ)=Неопределено Тогда//+++ 08.12.2011 нет документов
		Возврат Ложь;
		Иначе
		Возврат Истина;
		КонецЕсли	
	исключение
		возврат Ложь;
	конецПопытки;
	
КонецФункции

//+++ 27.09.2013 
// проверим есть ли документ перемещения по заказу
// за период с даты отгрузки(даты) заказа - по конец текущего дня
// при условии, что товар прибыл на Буферный склад
//
Функция ПолучитьСтруктуруРезерваПоЗаказу(СсылкаЗаказ, ДатаНачПроверки='00010101') 
	
	//Если ДатаНачПроверки='00010101' Тогда
		НачДата = НачалоДня( мин(СсылкаЗаказ.Дата, ?(СсылкаЗаказ.ДатаОтгрузки>'00010101',СсылкаЗаказ.ДатаОтгрузки,СсылкаЗаказ.Дата) ) );   //+++ 27.10.2014  мин
	//иначе
	//	НачДата = НачалоДня(ДатаНачПроверки);
	//КонецЕсли;
	
	КонДата = КонецДня( ТекущаяДата() );
	
структура1 = новый Структура;
структура1.Вставить("ЕстьРезерв", Ложь);
структура1.Вставить("ЭтоРезервПеремещения", Ложь);
структура1.Вставить("ЭтоРезервОтгрузки", Ложь);
структура1.Вставить("ПеремещениеВыполнено",Ложь);
структура1.Вставить("ОтгрузкаВыполнена",Ложь);
структура1.Вставить("ЗаданиеНаПеремещение",Ложь);

 	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоПриход) КАК КоличествоПриход,
	                |	СУММА(ТоварыНаСкладахОбороты.КоличествоРасход) КАК КоличествоРасход,
	                |	ТоварыНаСкладахОбороты.Регистратор.ДатаДокументаПервая КАК Период
	                |ИЗ
	                |	РегистрНакопления.РезервНаСкладах.Обороты(&НачДата, &КонДата, Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ТоварыНаСкладахОбороты
	                |ГДЕ
	                |	(ТоварыНаСкладахОбороты.КоличествоПриход >= 0
	                |			ИЛИ ТоварыНаСкладахОбороты.КоличествоРасход >= 0)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ТоварыНаСкладахОбороты.Регистратор,
	                |	ТоварыНаСкладахОбороты.Регистратор.ДатаДокументаПервая
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ДатаДокументаПервая
	                |ИЗ
	                |	Документ.ЗаданиеНаПеремещение.ЗаказыПокупателей КАК ЗаданиеНаПеремещениеЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаПеремещениеЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаПеремещениеЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтук,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.КоличествоШтукОтгружено,
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ДатаДокументаПервая
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
	                |ГДЕ
	                |	ЗаданиеНаОтгрузкуЗаказыПокупателей.ЗаказПокупателя = &ЗаказПокупателя
	               |	И ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.Дата >= &НачДата
	                |	И (НЕ ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка.ПометкаУдаления)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Период
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("НачДата", НачалоНедели(НачДата) ); //Задания и движение резерва - отслеживается за 2-3 дня (не более 7 дней)!
	 Запрос.УстановитьПараметр("КонДата", КонДата );
	 Запрос.УстановитьПараметр("ЗаказПокупателя", СсылкаЗаказ);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл // Если движение за период
		 
		 структура1.ЕстьРезерв = Выборка.Регистратор.Проведен;
		 
		 //Если несколько одинаковых документов - возьмется последний! 
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаПеремещение") Тогда
			 структура1.ЭтоРезервПеремещения = Истина;
			 структура1.ЗаданиеНаПеремещение = Выборка.Регистратор;
			 структура1.ПеремещениеВыполнено = (Выборка.КоличествоПриход=Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 ИначеЕсли ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаданиеНаОтгрузку") Тогда
			 структура1.ЭтоРезервОтгрузки = Истина;
		     структура1.ОтгрузкаВыполнена    =(Выборка.КоличествоПриход = Выборка.КоличествоРасход) или Выборка.Регистратор.Выполнено;
			 
		 КонецЕсли;
		 
	 КонецЦикла;	 
  
	 возврат структура1;	
	 
КонецФункции


Процедура ЗаказыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	флВыводитьСообщенияОЧастичнойОтгрузке = Ложь;
	
	Если ОбновлятьДанные тогда //+++ 27.10.2016 --- по всей таблице, а не только по видимой области!
		для каждого ДанныеСтроки из Заказы цикл
			ДанныеСтроки.ЗаказЗакрыт = ПроверитьЗакрытиеЗаказа(ДанныеСтроки.Заказ);
			
			Если НЕ ДанныеСтроки.ЗаказЗакрыт тогда //+++ 26.10.2016
				ДанныеСтроки.ЕстьРеализации = ПроверитьОтгрузкуПо1Заказу(ДанныеСтроки.Заказ); 
				
				ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу( ДанныеСтроки.Заказ, ТекущаяДата() ); //на текущую!
				ДанныеСтроки.ЕстьРезерв 		   = ЕстьРезервСтруктура.ЕстьРезерв;
				ДанныеСтроки.ЭтоРезервПеремещения = ЕстьРезервСтруктура.ЭтоРезервПеремещения;
				ДанныеСтроки.ЭтоРезервОтгрузки    = ЕстьРезервСтруктура.ЭтоРезервОтгрузки;
				ДанныеСтроки.ПеремещениеВыполнено = ЕстьРезервСтруктура.ПеремещениеВыполнено;
				ДанныеСтроки.ОтгрузкаВыполнена    = ЕстьРезервСтруктура.ОтгрузкаВыполнена;
				ДанныеСтроки.ЗаданиеНаПеремещение = ЕстьРезервСтруктура.ЗаданиеНаПеремещение;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	 
	
	
	//состояние("Идет вывод и расчет отгруженных заказов...");
	Для Каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОбработкаПрерыванияПользователя();
		
		Если Найти(ДанныеСтроки.Заказ.Комментарий,"+++ сформировано автоматически вследствие недогруза")>0 Тогда
			
			ЭтоНедогруз = Истина;
			
		иначе
			
			ЭтоНедогруз = Ложь;
			
		КонецЕсли;
		
		//Если ДанныеСтроки.Заказ.Проверен Тогда //проделен
		//	Болд = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
		//	ОформлениеСтроки.Шрифт = БОЛД;
		//КонецЕсли;
		
		//+++ 06.03.2015
		Если ДанныеСтроки.Контрагент = справочники.Контрагенты.НайтиПоКоду("92797") тогда
			Если ДанныеСтроки.Тариф<>0 или ДанныеСтроки.СуммаДоставки<>0 тогда
				ДанныеСтроки.Тариф = 0;
				ДанныеСтроки.СуммаДоставки = 0;
				Сообщить("Сумма Доставки по "+строка(ДанныеСтроки.Контрагент)+" изменена с "+строка(ДанныеСтроки.СуммаДоставки)+" на 0р. СУММА ДОЛЖНА БЫТЬ РАВНА НУЛЮ!");
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементыФормы.Флажок1.Значение Тогда //+++ 25.04.2012 - расцветка "неделька" К О Ж З Г С Ф!
			Если ДанныеСтроки.Срочность<=-14 Тогда      // 3 недели!
				ОформлениеСтроки.ЦветФона   = WebЦвета.Красный;
				//ОформлениеСтроки.Ячейки["Срочность"].ЦветТекст  = WebЦвета.Желтый;
				
			иначеЕсли ДанныеСтроки.Срочность<=0 Тогда  
				ОформлениеСтроки.ЦветФона   = WebЦвета.СветлоРозовый; // ярко красный!!!
				
			иначеЕсли ДанныеСтроки.Срочность<3 Тогда 
				ОформлениеСтроки.ЦветФона   = WebЦвета.Желтый;
				
			иначеЕсли ДанныеСтроки.Срочность<=7 Тогда 
				ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
			КонецЕсли;
			
			продолжить;
			
		ИначеЕсли ДанныеСтроки.Контрагент.ЗапретОтгрузки Тогда  
			ОформлениеСтроки.ЦветФона   = WebЦвета.СветлоРозовый; // ярко красный!!!
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Заказ) и ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Заказ.ДоговорКонтрагента.ТипДоговора) тогда
			ОформлениеСтроки.Ячейки.Организация.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.Организация.Текст = ?(ОформлениеСтроки.ДанныеСтроки.Заказ.ДоговорКонтрагента.ТипДоговора.Код = "Я0004", "ФА", 
			?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "92797", "ФА+",
			?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "П000382", "АЭ", 
			?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "93980","F",
			?(ОформлениеСтроки.ДанныеСтроки.Заказ.Контрагент.Код = "92242","KV", "ЯШТ") ) ) ) );
		КонецЕсли;
		
		
		//-------------------------------------------------------------------------------
		//только по флагу
		Если ЭлементыФормы.Флажок2.Значение Тогда // цвет по отгрузке
			
			Если ДанныеСтроки.ЗаказЗакрыт Тогда //+++ 26.10.2016
				ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний; // отгруженные!
				ОформлениеСтроки.ЦветФона = WebЦвета.СветлоСерый; // отгруженные полностью!
				
			Иначе //НЕ ЗаказЗакрыт - надо отгружать
				
				Если ДанныеСтроки.ЕстьРеализации или ЭтоНедогруз Тогда
					ОформлениеСтроки.ЦветТекста = WebЦвета.Синий; // Частично-отгруженные!
				КонецЕсли;
				
				//-------------------------------------------------------------------------------
				Если ДанныеСтроки.флаг Тогда
					Болд = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
					ОформлениеСтроки.Шрифт = БОЛД;
					
					ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;  //просто выбран, нет отгрузок
				КонецЕсли;
				
				Если ДанныеСтроки.ЕстьРезерв Тогда   //есть резерв
					Если ДанныеСтроки.ЭтоРезервПеремещения и (не ДанныеСтроки.ЭтоРезервОтгрузки) Тогда //идет перемещение!
						
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
						
						Если ЗначениеЗаполнено(ДанныеСтроки.ЗаданиеНаПеремещение) тогда //+++ 04.05.2018 по Задача № 45898 
							если ДанныеСтроки.ЗаданиеНаПеремещение.СкладПолучатель.Родитель = справочники.Склады.НайтиПоКоду("00759") тогда //ЯШТ АКБ, Аксессуары, ЦЦЛ
								Если ДанныеСтроки.ПеремещениеВыполнено Тогда
								ОформлениеСтроки.ЦветФона = WebЦвета.СинеСерый;  //темный синий
								иначе	
								ОформлениеСтроки.ЦветФона = WebЦвета.ТеплоРозовый;   //тёмно-розовый
								КонецЕсли;	
							Иначе // как обычно 
								Если ДанныеСтроки.ПеремещениеВыполнено Тогда
									ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
								иначе	
									ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;  // ИдетПеремещение, отгрузка - невозможна!
								КонецЕсли;
							КонецЕсли;	
						Иначе // нет задания на перемещение	
							Если ДанныеСтроки.ПеремещениеВыполнено Тогда
								ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
							иначе	
								ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;  // ИдетПеремещение, отгрузка - невозможна!
							КонецЕсли;
						КонецЕсли;	
						
					ИначеЕсли ДанныеСтроки.ЭтоРезервОтгрузки Тогда//это резерв отгрузки
						
						Если НЕ ДанныеСтроки.ОтгрузкаВыполнена Тогда
							ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; // =>
							ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый; // ещё идет отгрузка!
							//иначе -фон белый или серый(закрыт заказ)
						КонецЕсли;	
						
						Если ДанныеСтроки.ЭтоРезервПеремещения и не ДанныеСтроки.ПеремещениеВыполнено Тогда
							ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
							ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый; // ещё идет перемещение!
						КонецЕсли;
						
						
					Иначе // какой-то резерв.... смешанный или ручной
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  =>
						ОформлениеСтроки.ЦветФона = WebЦвета.Лосось; // !
					КонецЕсли;	
					
					
				Иначе  //нет резерва, но может быть ЗаданиеНаПеремещение 
					
					Если ДанныеСтроки.ЭтоРезервПеремещения и (не ДанныеСтроки.ЭтоРезервОтгрузки) Тогда
						
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
						
						Если ДанныеСтроки.ПеремещениеВыполнено Тогда
							ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
						иначе	
							ОформлениеСтроки.ЦветФона = WebЦвета.ТемноОранжевый; // СозданоПеремещение, но еще не распредедено по складам, ЯркоРозовый!
						КонецЕсли;
					ИначеЕсли ДанныеСтроки.ЭтоРезервОтгрузки Тогда
						
						ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  <=
						
						Если не ДанныеСтроки.ОтгрузкаВыполнена Тогда
							ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли; //Проверкарезерва
				
				//27.10.2016 - ВЫКЛЮЕНА проверка по вложенным заказам...	
				//  //+++( 02.06.2015 - вложенные заказы...
				//  Если ОформлениеСтроки.ДанныеСтроки.Заказ.Заказы.Количество()>0
				//  	и не (ДанныеСтроки.ЕстьРезерв 
				//  	  или ДанныеСтроки.ЭтоРезервПеремещения
				//  	  или ДанныеСтроки.ЭтоРезервОтгрузки) тогда
				//  	  
				//  //-------------------цикл----------------
				//  колЗакНаПеремещении = 0; 
				//  ЕстьРезервСтруктура0 = неопределено; 
				//  ЕстьРезервСтруктура1 = новый Структура("ЕстьРезерв,ЭтоРезервПеремещения,ЭтоРезервОтгрузки,ПеремещениеВыполнено,ОтгрузкаВыполнена",
				//  											ложь,ложь,ложь,ложь,ложь);
				//  
				//  Если ОбновлятьДанные тогда //+++ 26.10.2016
				//  для каждого СтрЗаказы из ОформлениеСтроки.ДанныеСтроки.Заказ.Заказы цикл
				//  	
				//   ЕстьРезервСтруктура1 = ПолучитьСтруктуруРезерваПоЗаказу(СтрЗаказы.ЗаказПокупателя, ДатаФормы);
				//  	
				//  	Если ЕстьРезервСтруктура0 = неопределено тогда
				//  		ЕстьРезервСтруктура0 = ЕстьРезервСтруктура1;
				//  		колЗакНаПеремещении = 1;
				//  		N = ЕстьРезервСтруктура0.Количество();
				//  	Иначе //-----------сравнение 2х структур---------------------
				//  		k=0;
				//  		Для каждого КлючИЗначение из ЕстьРезервСтруктура1 Цикл
				//			Если КлючИЗначение.Значение = ЕстьРезервСтруктура1[КлючИЗначение.Ключ] Тогда
				//  			k=k+1;
				//  			КонецЕсли;
				//  		КонецЦикла;
				//  		Если k=N тогда
				//  		   колЗакНаПеремещении = колЗакНаПеремещении +1;
				//  	   КонецЕсли;
				//  	КонецЕсли;   
				//  КонецЦикла;	
				//  КонецЕсли;
				//  //-----------если все заказы в 1 статусе то отразим его и у объединенного!-------------------------
				//  
				//  Если НЕ ОбновлятьДанные тогда  //26.10.2016
				//   ЕстьРезервСтруктура1.ЕстьРезерв 		   = ДанныеСтроки.ЕстьРезерв;
				//   ЕстьРезервСтруктура1.ЭтоРезервПеремещения = ДанныеСтроки.ЭтоРезервПеремещения;
				//   ЕстьРезервСтруктура1.ЭтоРезервОтгрузки    = ДанныеСтроки.ЭтоРезервОтгрузки;
				// ЕстьРезервСтруктура1.ПеремещениеВыполнено = ДанныеСтроки.ПеремещениеВыполнено;
				// ЕстьРезервСтруктура1.ОтгрузкаВыполнена    = ДанныеСтроки.ОтгрузкаВыполнена;
				//КонецЕсли;
				
				////		ЕстьРезервСтруктура = ЕстьРезервСтруктура1;
				//  
				//  Если колЗакНаПеремещении = ОформлениеСтроки.ДанныеСтроки.Заказ.Заказы.Количество() тогда
				//  	Если ЕстьРезервСтруктура.ЕстьРезерв Тогда   //есть резерв
				//  		Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не ЕстьРезервСтруктура.ЭтоРезервОтгрузки) Тогда //идет перемещение!
				//  			
				//  		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//  		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
				//  			
				//  		   Если ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
				//  			 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
				//  		   иначе	
				//  			 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;  // ИдетПеремещение, отгрузка - невозможна!
				//  		   КонецЕсли;
				//  			
				//  			
				//  		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки Тогда//это резерв отгрузки
				//  			
				//  			Если НЕ ЕстьРезервСтруктура.ОтгрузкаВыполнена Тогда
				//  				ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//  				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; // =>
				//  				ОформлениеСтроки.ЦветФона = WebЦвета.НейтральноЗеленый; // ещё идет отгрузка!
				//  			//иначе -фон белый или серый(закрыт заказ)
				//  			КонецЕсли;	
				//  			
				//  			Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и не ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
				//  				ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//  				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
				//  				ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый; // ещё идет перемещение!
				//  			КонецЕсли;
				//  			
				//  				
				//  		Иначе // какой-то резерв.... смешанный или ручной
				//  			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//  			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  =>
				//  			ОформлениеСтроки.ЦветФона = WebЦвета.Лосось; // !
				//  		КонецЕсли;	
				//  		
				//  	колЗакНаПеремещении = колЗакНаПеремещении + 1;	
				//  	Иначе  //нет резерва, но может быть ЗаданиеНаПеремещение 
				//  		
				//  		Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не ЕстьРезервСтруктура.ЭтоРезервОтгрузки) Тогда
				//  			
				//  			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1; //  <=
				//  			
				//  		   Если ЕстьРезервСтруктура.ПеремещениеВыполнено Тогда
				//  			 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоНебесноГолубой;
				//  		   иначе	
				//  			 ОформлениеСтроки.ЦветФона = WebЦвета.ТемноОранжевый; // СозданоПеремещение, но еще не распредедено по складам, ЯркоРозовый!
				//  		   КонецЕсли;
				//  		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки Тогда
				//  			
				//  			ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
				//			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0; //  <=
				//  			
				//  		   Если не ЕстьРезервСтруктура.ОтгрузкаВыполнена Тогда
				//  			 ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЗеленый;
				//  		   КонецЕсли;
				//  		 
				//  		КонецЕсли;	
				//  	КонецЕсли; //Проверкарезерва
				//  КонецЕсли;	
				//  КонецЕсли;
				//  //+++)
				
			КонецЕсли; //проверка ЗаказЗакрыт
			
			Если ОформлениеСтроки.ДанныеСтроки.Заказ.Резерв тогда //+++ Резерв - грузить НЕЛЬЗЯ!
				Курсив = новый Шрифт(ОформлениеСтроки.Шрифт,,,,Истина);
				ОформлениеСтроки.Шрифт = Курсив;
			КонецЕсли;
			
		КонецЕсли;//Флаг2
		
		Если ДанныеСтроки.НомерСтроки = Заказы.Количество() Тогда // после вывода всех строк - выключаем
			флВыводитьСообщенияОЧастичнойОтгрузке = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	//ПересчетКоличестваФлаг();  //+++ 07.06.2012
	
	ОбновлятьДанные=ЛОЖЬ;//выключается после заполнения! 2-ой и следующие "проходы" уже по данным строки!
	состояние(" ");
	 	 
КонецПроцедуры

Процедура ЗаказыСрочностьПриИзменении(Элемент)
	Сигнал();
	Предупреждение("Данная обработка - не редактирует срок отгрузки!
				   |Откройте Заказ покупателя и установите ""Дату отгрузки""!
				   |После этого нажмите [Обновить] не удаляя таблицы",30);
	
КонецПроцедуры


//+++ 23.09.2013
Функция получитьПоследнююДатуУстановкиКатегории(заказ1)
	
	ЧасОкончанияФормированияТекПоездки = 24; // +17 = до 17:00 текущего дня - на сегодня
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЖурналИзмененийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ЖурналИзменений.СрезПоследних(,
	|			Объект = &Объект
	|				И Событие = &ТекстСобытия) КАК ЖурналИзмененийСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект", заказ1);
	Запрос.УстановитьПараметр("Дата", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекстСобытия", "Изменена Категория документа.");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		датаУст = выборка.Период;
		
		Если выборка.Период >= началоДня(выборка.Период) + ЧасОкончанияФормированияТекПоездки*3600 Тогда
			датаУст = КонецДня(выборка.Период)+1;
		КонецЕсли;
		
		Если заказ1.ДатаОтгрузки=Дата(1,1,1) тогда //+++ 23.01.2015 нет даты отгрузки!
			Если заказ1.Резерв тогда
				сообщить("Заказ № "+строка(заказ1.Номер)+" - нет даты отгрузки и установлен флаг [v]РЕЗЕРВ! Отгружать - НЕ НУЖНО !?", СтатусСообщения.Внимание); 
			Иначе
				сообщить("Заказ № "+строка(заказ1.Номер)+" -> нет 'Даты отгрузки' и не установлен флаг [ ]РЕЗЕРВ. Грузить можно.", СтатусСообщения.Внимание); 
				возврат  заказ1.ДатаОтгрузки;  //'00010101';   
		    КонецЕсли;
	    КонецЕсли;
			
		Если заказ1.ДатаОтгрузки < НачалоДня(датаУст) Тогда // до 12:00 текущего дня!
			сообщить("Заказ № "+строка(заказ1.Номер)+" -> дата отгрузки сдвинута с "+Формат(заказ1.ДатаОтгрузки,"ДЛФ=D")+" на: "+строка(выборка.Период), СтатусСообщения.Внимание); 
		КонецЕсли;
		
		возврат макс(заказ1.ДатаОтгрузки, датаУст); //Если дата отгрузки - будущей датой, то берется она!
		
	иначе
	//	сообщить("Для заказа: "+строка(заказ1)+" - флаг категории Установлен ранее 24.09.2013, дата отгрузки: "+Формат(заказ1.ДатаОтгрузки,"ДЛФ=D"), СтатусСообщения.Информация); 
		возврат  заказ1.ДатаОтгрузки;  //'00010101';   
	КонецЕсли;
	
КонецФункции	



//=========================================================================

Процедура ПолеВвода1НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Форма = ЭтотОбъект.ПолучитьФорму("Форма2");
	Форма.ОткрытьМодально();
	
	СтрокаМаршрута = "";
	
	Для каждого стр из Маршруты Цикл
		Если стр.Пометка тогда
		  СтрокаМаршрута = СтрокаМаршрута + стр.маршрут.Наименование + "; ";
		КонецЕсли;
	КонецЦикла;
	
    Элемент.Значение = СтрокаМаршрута;
	//
	//ПустойЗакПок = документы.ЗаказПокупателя.ПустаяСсылка();
	//
	//Форма = ЭтотОбъект.ПолучитьФорму("ФормаКатегорий", ЭтаФорма);
	//
	//мас0 = СписокКатегорий.ВыгрузитьЗначения();
	//пом0 = новый массив;
	//Для i=0 по СписокКатегорий.Количество()-1 Цикл
	//	стр1 = СписокКатегорий[i];
	//	пом0.Добавить( стр1.Пометка );
	//КонецЦикла;	
	//	
	//рез = Форма.ОткрытьМодально();
	//
	//Если рез <> Истина Тогда
	//	СписокКатегорий.Очистить();
	//	СписокКатегорий.ЗагрузитьЗначения(мас0);
	//	Для i=0 по СписокКатегорий.Количество()-1 Цикл
	//		стр1 = СписокКатегорий[i];
	//		Если пом0[i] Тогда
	//			стр1.Пометка = пом0[i];
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;
	//
	//
	//УстановитьНазваниеКатегорий();
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, СтрДлина(ИмяЗаголовка)-3);
КонецПроцедуры

Процедура СписокКатегорийОчистка(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	
	Для каждого стр из Маршруты Цикл
		
		стр.Пометка = Ложь;
		
	КонецЦикла;
	
	ЭлементыФормы.МаршрутыНадпись.Значение = "";
	//ПрочитатьЗаполнитьКатегорииОбъекта();
	//УстановитьНазваниеКатегорий();
	
КонецПроцедуры

// Процедура заполняет СписокЗначений обработки - категориями объекта ЗаказПокупателя.
// При заполнении используются значения реквизитов обработки: 
// НазначениеКатегорий - значение реквизита, по которому отбораются категории.
//
Процедура ПрочитатьЗаполнитьКатегорииОбъекта()
	
	ЭтотОбъект.СписокКатегорий.Очистить(); 

	НазначениеКатегорий = новый СписокЗначений;                   
	//Если РольДоступна("МенеджерПоПродажам") или РольДоступна("ПолныеПрава") Тогда
	НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя);
	//	КонецЕсли;
	
	Запрос = Новый Запрос();
    Запрос.УстановитьПараметр("НазначениеКатегорий",     НазначениеКатегорий);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КатегорииОбъектов.Ссылка КАК Значение
	               |ИЗ
	               |	Справочник.КатегорииОбъектов КАК КатегорииОбъектов
	               |ГДЕ
	               |	КатегорииОбъектов.НазначениеКатегории В(&НазначениеКатегорий)
	               |	И (НЕ КатегорииОбъектов.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КатегорииОбъектов.Код
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	ЭтотОбъект.СписокКатегорий.ЗагрузитьЗначения( ТЗ.ВыгрузитьКолонку("Значение") );
		
КонецПроцедуры

Процедура УстановитьНазваниеКатегорий()
	//стрВыбранные = "";
	//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаданиеНаПеремещение.Доступность = Ложь;

	//Для Каждого стр1 из СписокКатегорий Цикл
	//	Если стр1.Пометка Тогда
	//		Если СокрЛП(стр1.Значение)<>"Юг" и
	//			 СокрЛП(стр1.Значение)<>"Север" и
	//			 СокрЛП(стр1.Значение)<>"Иваново" и
	//			 СокрЛП(стр1.Значение)<>"Владимир" Тогда
	//		стрВыбранные = стрВыбранные+стр1.Значение+";";
	//		КонецЕсли;
	//		//+++ для всех!
	//		//Если стр1.Значение.Код="00017" или  стр1.Значение.Код="00018" Тогда //Интернет-магазин
	//			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЗаданиеНаПеремещение.Доступность = Истина; //+++ 30.09.2013
	//		//	ЭлементыФормы.Флажок2.Значение = Истина;
	//		//КонецЕсли;	
	//	КонецЕсли;
	// попытка  // обратное присвоение флажкам - их значений
	//	ЭлементыФормы[Строка(стр1.Значение)].Значение = стр1.Пометка;
	// исключение
	// КонецПопытки;
	//КонецЦикла;	
	//ЭлементыФормы.НадписьКатегорий.Значение = стрВыбранные;
КонецПроцедуры
	
процедура УстановитьКатегорииПоФлажкам()
//	мас = новый массив;
//	мас.Добавить("Юг");
//	мас.Добавить("Север");
//	мас.Добавить("Иваново");
//	мас.Добавить("Владимир");
//Для i=0 по мас.Количество()-1 Цикл
//	знач1 = Справочники.КатегорииОбъектов.НайтиПоНаименованию(мас[i]);
//	стр1  = СписокКатегорий.НайтиПоЗначению(знач1);
//	если стр1<>неопределено тогда
// 		стр1.Пометка = ЭлементыФормы[мас[i]].Значение;
//	КонецЕсли;
//КонецЦикла;
    УстановитьНазваниеКатегорий();
КонецПроцедуры	

Процедура НадписьКатегорийОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	 УстановитьНазваниеКатегорий();
	 Предупреждение("Выберите категории из списка!",10);
КонецПроцедуры

функция ПроверкиПередОтгрузкой(ТЗЗаказов)
	Отказ = ложь;
//30.06.2016 обновление адресов доставки
ЗаполненныВсеКоординаты = ОбновитьАдресаДоставки();

//+++20.09.2018 - контроль последовательности точек
	Если ТЗЗаказов.Количество() = 0 Тогда
		Сообщить("Нет выбранных заказов!", СтатусСообщения.Внимание);
		Отказ = Истина;
		возврат Отказ;
	КонецЕсли;

	ЕстьНулТочки = ложь; ТЗЗаказов.Сортировать("Точка");
	Для j=0 по ТЗЗаказов.Количество()-1 цикл //сдвиг всех точек!
		Если ТЗЗаказов[j].Точка <=0 тогда
			сообщить("Не заполнен номер Точки в строке № "+строка(ТЗЗаказов[j].номерСтроки) , СтатусСообщения.Внимание);
			Отказ = Истина;
		иначеЕсли j>0 тогда  // разные адреса, менджеров или договоры - можно!
			Если ТЗЗаказов[j].Точка = ТЗЗаказов[j-1].Точка
				 и  ТЗЗаказов[j].Контрагент <> ТЗЗаказов[j-1].Контрагент тогда
				 сообщить("Точка № "+строка(ТЗЗаказов[j].Точка)+" назначена разным клиентам!", СтатусСообщения.Внимание);
			Отказ =Истина;
            КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	//+++)
	
	//+++ 20.04.2016  если общее расстояние >0,  а  первое =0 то это НЕПРАВИЛЬНО!
	Если ТЗЗаказов[0].Расстояние=0 И ОбщийКм>0 тогда
		Сообщить("Расстояние до 1 точки не может быть равным 0 км!",СтатусСообщения.Внимание);
		Предупреждение("Расстояние до 1 точки не может быть равным 0 км!
					   |Возможно общее расстояние: "+строка(ОбщийКм)+" км
					   |так же расчитано - не правильно!
					   |
					   |Измените все расстояния вручную, если нет координат
					   |и только после этого создавайте Задание на отгрузку...", 60);
		Отказ =Истина;
	КонецЕсли;	
	
//+++ 26.03.2018 +++ 	
	Если ОбщийКм=0 или ПрямойКм=0 тогда
		Сообщить("Не заполнено расстояние Прямого рейса!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;	

	Если СуммаПрямая=0 тогда
		Сообщить("Не заполнена Сумма прямого рейса!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;	

	Если ТипАвтомобиля.Пустая() тогда
		Сообщить("Не заполнен Тип автомобиля!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;	

	Если СокрЛП(Перевозчик)="" тогда
		Сообщить("Не заполнен Перевозчик!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;	
		
   
	Если ТарифПрямой=0 или ВесМакс=0 или ОбъемМакс=0 тогда
		Сообщить("Выберите сначала тип/марку Автомобиля или заполните вручную Вес, Объем, Тариф!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ДатаВыгрузки) тогда
		Сообщить("Укажите планируемую дату Прибытия автомобиля к 1-му клиенту!", СтатусСообщения.Внимание);
		Отказ =Истина;
	КонецЕсли;
	
	возврат Отказ;
КонецФункции

Процедура ОсновныеДействияФормыЗаданиеНаОтгрузку(Кнопка)
	
	Если Обратки.Количество()>0 тогда
	 сообщить("Добавлено "+строка(Обратки.Количество())+" возвратов.");
	КонецЕсли;
	
	ТЗЗаказов = Заказы.Выгрузить(Новый Структура("Флаг", Истина), );
	Если ПроверкиПередОтгрузкой(ТЗЗаказов) тогда
		возврат;
	КонецЕсли;
	
	i=0;
//+++( 20.09.2018 ----------
	ТЗЗаказов.Сортировать("Точка, Контрагент, АдресДоставки");
	i=ТЗЗаказов[0].Точка; 
	разность=0;
	Если i>1 тогда
		разность = ТЗЗаказов[0].Точка - 1;
		Сообщить("Первая точка должна быть с номером 1! Номера всех точек уменьшены на "+строка(разность) );
		Для j=0 по ТЗЗаказов.Количество()-1 цикл //сдвиг всех точек!
			ТЗЗаказов[j].Точка = ТЗЗаказов[j].Точка - разность;	
		КонецЦикла;	
	КонецЕсли;
//+++)

	ВсеЗакСоЗвездой = Истина;//11.09.2018
	водительНеКассир = водитель.ЗапретитьИнкассацию;
	нс = 0; N = ТЗЗаказов.Количество();  
	i=0; разность=0;
	для каждого стр1 из ТЗЗаказов цикл
		i=i+1; нс = нс+1;
		//11.09.2018 - по задаче № 53811
		если Найти(стр1.Заказ.ДоговорКонтрагента.Наименование,"*")=0 тогда
			ВсеЗакСоЗвездой = ЛОЖЬ;
		КонецЕсли;	
		
//+++( 20.09.2018 ----------		
		Если стр1.Точка = 0 тогда
			стр1.Точка = i;
			сообщить(строка(стр1.Заказ)+" - уставлена очередь № "+строка(i));	
		иначе 
			//точки могут повторяться
			Если стр1.Точка < i тогда
				i = стр1.Точка;
			ИначеЕсли стр1.Точка > i тогда
				разность = стр1.Точка - i;
			 	стр1.Точка = i;
				Сообщить(строка(стр1.НомерСтроки)+" стр. - номера точек сдвинуты на "+строка(разность) );
				Для j=нс+1 по N цикл //сдвиг всех точек!
					ТЗЗаказов[j-1].Точка = ТЗЗаказов[j-1].Точка - разность;	
				КонецЦикла;	
				разность = 0;
			КонецЕсли;	
		КонецЕсли;
//+++)		
			
		Если водительНеКассир и Стр1.Заказ.НеОтгружатьБезОплаты тогда //15.11.2016
			Предупреждение("     Водителю запрещена Инкассация!
							|а заказ № "+строка(Стр1.Заказ.Номер)+" - не отгружается без оплаты!");
			флПрервать = Истина;	 // нельзя делать перемещение, Если уже идет отгрузка!
			прервать;
		КонецЕсли;

		Отказ = ложь; //+++ 18.10.2017
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Стр1.Заказ, Отказ, Стр1.Контрагент, ТекущаяДата() ); //18.10.2017
		Если Отказ тогда
			флПрервать = Истина; // нельзя делать перемещение, Если уже идет отгрузка!
		КонецЕсли;

	КонецЦикла;  //---------------------------------------------------------------------------------
	
	//+++( 20.09.2018 - обратное изменение точек в таблице!
	для каждого стр1 из ТЗЗаказов цикл
		стрЗак = Заказы.Найти(стр1.НомерСтроки, "НомерСтроки");
		стрЗак.Точка = стр1.Точка;
	КонецЦикла;
	//++)
	
	//12.03.2019 обновление адресов доставки и расстояний!
	пересчетРасстояний = истина;
	Если Вопрос("Выполнить расчет Расстояний?", РежимДиалогаВопрос.ДаНет, 30,КодВозвратаДиалога.Да,"АвтоРасчет расстояний по точкам", КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет тогда
	пересчетРасстояний = ЛОЖЬ;
	КонецЕсли;
	ЗаполненныВсеКоординаты = ОбновитьАдресаДоставки(пересчетРасстояний);
			
	ТЗЗаказов.Сортировать("Точка УБЫВ"); //+++ 08.05.2015 обратный порядок !!!
	
	//+++ 26.11.2018 - ВСЕГДА НАДО ПЕРЕЗАПОЛЯТЬ без вариантов!
	 Предупреждение("Список заявок на возврат будет обновлен!", 10);
	 Обратки.Очистить();
	 
	 ПолучитьЗаявкиНаВозврат();	//+++ 26.11.2018 - ВСЕГДА НАДО ПЕРЕЗАПОЛЯТЬ!
	
//=====================проверка точек!===========================
	Если ТЗЗаказов.Количество() = 0 Тогда
		Сообщить("Нет выбранных заказов");
		Возврат;
	Иначе
		
		Если ВсеЗакСоЗвездой тогда  //11.09.2018 - по задаче № 53811
			Предупреждение("Все выбранные Заказы по договарам со *  
						|Нельзя создать задание на отгрузку!", 30); 
			Возврат;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Водитель) Тогда  //+++ 28.05.2013
			Предупреждение("Заполните обязательное поле - Водитель!"); // всегда!!!
			возврат;
		КонецЕсли;
		
		//+++ 01.10.2013--------ограничечние на создание документа "Задание на отгрузку"-------------
		флПрервать = Ложь;
		
		Для Каждого стр1 Из ТЗЗаказов Цикл
			ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(Стр1.Заказ, ДатаФормы);
			Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не  ЕстьРезервСтруктура.ПеремещениеВыполнено) Тогда
			//+++ 14.12.2018 - не надо показывать!	Сообщить("Ещё выполняется ""Задание на перемещение"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
			//	флПрервать = Истина;	
			ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки и (не ЕстьРезервСтруктура.ОтгрузкаВыполнена) Тогда
				Сообщить("Уже есть НЕ выполненное ""Задание на отгрузку"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
				//	флПрервать = Истина;	только уведомление - так как может быть несколько заданий на разные регионы по 1 заказу
			КонецЕсли;	
		КонецЦикла;
		
		Если флПрервать Тогда
			возврат;
		КонецЕсли;	
		//-------------------------------------------------------------------------------------------
		ЗаданиеСсылка = найтиЗаданиеНаОтгрузку(); 
		ЭтоИзменениеЗадания = ложь;
		
		Если ЗаданиеСсылка = Документы.ЗаданиеНаОтгрузку.ПустаяСсылка() Тогда
			Задание = Документы.ЗаданиеНаОтгрузку.СоздатьДокумент();
			Задание.Дата = ДатаФормы;
			Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
			сообщить("Создано новое задание на отгрузку.");
			//	Задание.Записать();
		иначе
			Если ЗаданиеСсылка.Проведен или ЗаданиеСсылка.Выполнено Тогда
				Предупреждение( "Уже существует задание на отгрузку:
				|"+строка(ЗаданиеСсылка)+"
				|которое уже в работе или выполнено!
				|Перезаполнение задания - невозможно!", 30);
				
				форма1 = ЗаданиеСсылка.ПолучитьФорму("ФормаДокумента");
				//форма1.ТолькоПросмотр = Истина;
				форма1.Открыть();
				возврат;
			КонецЕсли;
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос("Уже существует задание на отгрузку:
			|"+строка(ЗаданиеСсылка)+"
			|Перезаполнить задание?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			Задание = ЗаданиеСсылка.ПолучитьОбъект();
			Задание.ЗаказыПокупателей.Очистить();
			ЭтоИзменениеЗадания = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
		
	Для iii = 0 по ТЗЗаказов.Количество()-1 Цикл
		СтрокаЗаказа = ТЗЗаказов[iii];
		Если НЕ СтрокаЗаказа.Заказ.Проверен тогда //22.10.2013
			Сообщить("Нельзя грузить непроделенный заказ: "+строка(СтрокаЗаказа.Заказ), СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	
		
		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	
	Задание.Водитель              = ФамилияИнициалыФизЛица(Водитель);
	Задание.ВодителюЗапрещенаИнкассация = Водитель.ЗапретитьИнкассацию; // 16.11.2016
	
	//Миронычев
	Задание.Перевозчик            = Перевозчик;
	//конецМиронычев
	
	//Задание.Водитель              = СокрЛП( Строка(Водитель) );
	Задание.ТелефонВодителя       = получитьТелефоны(Водитель);
	АвтомобильГосНомерАвтомобиля  = ПолучитьКонтактнуюИнформацию(Водитель, "Другое");
	Если Найти(АвтомобильГосНомерАвтомобиля, "Автомобиль: ")>0 тогда
		АвтомобильГосНомерАвтомобиля = стрЗаменить(АвтомобильГосНомерАвтомобиля, "Автомобиль: ","");
		i= найти(АвтомобильГосНомерАвтомобиля, " ");
		если i>0 тогда
			Задание.МаркаАвтомобиля 	 = Лев(АвтомобильГосНомерАвтомобиля, i-1);
			Задание.ГосНомерАвтомобиля = Прав(АвтомобильГосНомерАвтомобиля, стрДлина(АвтомобильГосНомерАвтомобиля) - i);
		КонецЕсли;
	КонецЕсли;
	Задание.ВесМакс   = ВесМакс;
	Задание.ОбъемМакс = ОбъемМакс;
	
//+++ 09.02.2016 ==================================	
	Задание.Километров = ПрямойКм; 
	Задание.Тариф      = СуммаПрямая;   

	Если Обратки.Количество()>0 и Задание.Обратки.Количество()>0 тогда
		Предупреждение("УЖЕ есть Обратки в Задании на отгрузку ("+строка(Задание.Обратки.Количество())+" док.) и Есть НОВЫЕ обратки ("+строка(Обратки.Количество())+")!!!", 30);
		//Задание.Обратки.очистить(); // обратки в Задание НЕ чистим!
	КонецЕсли;
	
	Задание.СуммаОбратки = 0;
	Задание.СуммаОбраткиЯШТ = 0;
	для каждого стр1 из Обратки цикл
		стр2 = Задание.Обратки.Добавить();
		ЗаполнитьЗначенияСвойств(стр2, стр1);
		если найти(нрег(стр2.Контрагент),"яршинторг")>0 тогда // получатель
			Задание.СуммаОбраткиЯШТ = Задание.СуммаОбраткиЯШТ + стр2.Сумма;
		иначе
			Задание.СуммаОбратки = Задание.СуммаОбратки + стр2.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	для каждого стр1 из ЗаявкиНаТранспорт цикл   //ЗаявкиНаТранспорт
		Если стр1.Флажок Тогда
			Если стр1.ДокументОснование.Обратка Тогда
		        стр2 = Задание.Обратки.Добавить();
		        ЗаполнитьЗначенияСвойств(стр2, стр1);
		        Если найти(нрег(стр2.Контрагент),"яршинторг")>0 тогда // получатель
			        Задание.СуммаОбраткиЯШТ = Задание.СуммаОбраткиЯШТ + стр2.Сумма;
		        иначе
			        Задание.СуммаОбратки = Задание.СуммаОбратки + стр2.Сумма;
				КонецЕсли;
			иначе
				стр2 = Задание.ЗаявкиНаТранспорт.Добавить();
		        стр2.Заявка = стр1.ДокументОснование;
				стр2.Сумма = стр1.сумма;
				стр2.Объем = стр1.Объем;
				стр2.Маршрут = стр1.Направление;				
		    КонецЕсли;
		КонецЕсли;
	КонецЦикла;
//=================================================

//---21.06.2016 создаем в документе Задание строчку для расчета километража - возвращение в гараж
СтрВозвратВГараж = Задание.Обратки.Добавить();
СтрВозвратВГараж.Направление = "Возвращение в гараж";
СтрВозвратВГараж.Пробег = ОбраткаКм;	
СтрВозвратВГараж.Комментарий = "Создана автоматически, для расчета себестоимости маршрута. Не удалять";
СтрВозвратВГараж.Сумма = 0;
//---21.06.2016
	//+++)
	Задание.Ответственный         = глТекущийПользователь;
	
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	
	НадписьКатегорийВсе = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(ЭлементыФормы.Диски.Значение," Диски","")+?(ЭлементыФормы.Тендеры.Значение," Тендеры","")+?(ЭлементыФормы.ПЭК.Значение," ПЭК","")+?(ЭлементыФормы.Маркировка.Значение," Маркировка","") +?(ЭлементыФормы.КолесаТУТ.Значение," КолесаТУТ","")
	+?(ЭлементыФормы.МаршрутыНадпись.Значение="",""," "+стрЗаменить(ЭлементыФормы.МаршрутыНадпись.Значение,";"," ") )+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");
	
	
	Задание.Комментарий = НадписьКатегорийВсе+";
	|";
	
	Задание.Направление=""; город0 = ""; 
	контр0=справочники.Контрагенты.ПустаяСсылка();
	таблЗаказы = Заказы.Выгрузить();
	таблЗаказы.Сортировать("Точка");
	Для каждого стр1 из таблЗаказы цикл
		если стр1.Флаг тогда
			
			Если контр0<>стр1.Контрагент тогда
					Контр0 = Строка(Маршрут);
			КонецЕсли;
						
		КонецЕсли;
	КонецЦикла;
	ИмяНастройки = ""
	+?(ЭлементыФормы.Диски.Значение," Диски","")+?(ЭлементыФормы.Тендеры.Значение," Тендеры","")+?(ЭлементыФормы.ПЭК.Значение," ПЭК","")+?(ЭлементыФормы.Маркировка.Значение," Маркировка","") +?(ЭлементыФормы.КолесаТУТ.Значение," КолесаТУТ","")
	+?(ЭлементыФормы.МаршрутыНадпись.Значение="",""," "+стрЗаменить(ЭлементыФормы.МаршрутыНадпись.Значение,";",",") );
	
	ИмяНастройки = стрЗаменить(ИмяНастройки, " (Ярославль)", "");
	ИмяНастройки = стрЗаменить(ИмяНастройки, ", -", " -");
	ИмяНастройки = СокрЛП(ИмяНастройки);
	Задание.Контрагент  = ИмяНастройки;
	
	Если Задание.Направление = "" тогда
		Задание.Направление = Строка(Маршрут);
	КонецЕсли;
	//+++)
	
	сообщить("Задание на "+контр0+" по направлению: "+Задание.Направление);
	// Задание.Записать();
	
	Форма = Задание.ПолучитьФорму();
	//Запишем инфо о проезде в тз на форму
	ТЗЗаказов.Сортировать("Точка"); //+++ в нормальном порядке
	ЗаписатьИнфоПоПроезду(Форма, ТЗЗаказов);
	
	Если ЭтоИзменениеЗадания тогда
		ЗаписатьИнфоПоПроездуВРегистр(Задание.ссылка, ТЗЗаказов);
	Иначе
		ЗаписатьИнфоПоПроезду(Форма, ТЗЗаказов);  // только на форму!
	КонецЕсли;
			
	//Плотников, заявки на брак ==========================================================================
	Для Каждого стр из ЗаявкиНаБрак Цикл
		если стр.Флаг Тогда
			Отбор = Новый Структура;
			отбор.Вставить("Заявка",стр.Заявка);
			
			Отбор1 = новый Структура;
			Отбор1.Вставить("Заказ",стр.КЗаказу);
			Строки = Заказы.НайтиСтроки(Отбор1);
			Если Строки <> Неопределено Тогда
				Для каждого Строка из Строки Цикл
					Точка = Строка.Точка;
				КонецЦикла;
			КонецЕсли;
			
			ПоЗаявке = РезБрак.Скопировать(Отбор);
			Если ПоЗаявке.Количество() > 0 Тогда
				
				Для каждого стр1 из ПоЗаявке Цикл
				    НовСтр = Задание.ЗаявкиНаБрак.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,Стр1);
					НовСтр.НомерОчереди = Точка;
					сообщить("Автоматически добавлен возврат товара по Заявке на брак " + строка(стр1.заявка));
					//КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Задание.ВремяНапоминания = макс(ДатаВыгрузки, ТекущаяДата()+ 4*3600) - Цел( 3600*(ТЗЗаказов[0].Расстояние/65) /60)*60; //+++ 01.11.2017 +++ 02.04.2018
	Задание.ДатаВыгрузкиПрямогоРейса = ДатаВыгрузки;
	Задание.ДатаВозвращения = ДатаВозврата;
	// ==================================================================================================
	Форма.РаспределитьТранспортныеРасходы(); //+++ 16.04.2016 - Экспортная Функция - сразу распределяет!
	Форма.Открыть();
КонецПроцедуры //в задание на отгрузку


функция получитьТелефоны(ВодительСсылка)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтактнаяИнформация.Представление
|ИЗ
|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
|ГДЕ
|	КонтактнаяИнформация.Объект = &Объект
|	И КонтактнаяИнформация.Тип = &Тип";
Запрос.УстановитьПараметр("Объект", ВодительСсылка);
Запрос.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Телефон);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
 рез = "";
Пока Выборка.Следующий() Цикл
	Если СокрЛП(Выборка.Представление)<>"" тогда
		рез = рез+СокрЛП(Выборка.Представление)+"; ";
	КонецЕсли;	
КонецЦикла;

возврат рез;
	
КонецФункции


//+++
Функция найтиЗаданиеНаОтгрузку(этоОтгрузка=Истина)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ЗаданиеНаОтгрузку.Ссылка
	                |ИЗ
	                |	Документ.ЗаданиеНаОтгрузку КАК ЗаданиеНаОтгрузку
	                |ГДЕ
	         //       |	НАЧАЛОПЕРИОДА(ЗаданиеНаОтгрузку.Дата, ДЕНЬ) >= &Дата
	                |	(НЕ ЗаданиеНаОтгрузку.ПометкаУдаления)
	           //+++     |	И ЗаданиеНаОтгрузку.Контрагент = &Контрагент
	                |	И ЗаданиеНаОтгрузку.ВидОперации = &ВидОперации
	                |	И ЗаданиеНаОтгрузку.Комментарий ПОДОБНО &Комментарий";
					
Если не этоОтгрузка Тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст, "Документ.ЗаданиеНаОтгрузку", "Документ.ЗаданиеНаПеремещение");
	ПустойДокументСсылка = Документы.ЗаданиеНаПеремещение.пустаяСсылка();
Иначе
	ПустойДокументСсылка = Документы.ЗаданиеНаОтгрузку.пустаяСсылка();
КонецЕсли;	
	
	 Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыДвиженийПриходРасход.Расход);
	// Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаФормы) - 7*86400 ); //+++ 07.05.2015 задания делаются долго!
	 
	 Если ЗначениеЗаполнено(Водитель) Тогда  //+++ 28.05.2013
		 Запрос.УстановитьПараметр("Водитель", ФамилияИнициалыФизЛица(Водитель));
		  Запрос.Текст =  Запрос.Текст + "
		  |	И ЗаданиеНаОтгрузку.Водитель = &Водитель";
	 КонецЕсли; 
	 
	 Запрос.Текст =  Запрос.Текст + "
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаданиеНаОтгрузку.Дата УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
					
	 НадписьКатегорийВсе = 	Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(ЭлементыФормы.Диски.Значение," Диски","")+?(ЭлементыФормы.Тендеры.Значение," Тендеры","")+?(ЭлементыФормы.ПЭК.Значение," ПЭК","")+?(ЭлементыФормы.Маркировка.Значение," Маркировка","") +?(ЭлементыФормы.КолесаТУТ.Значение," КолесаТУТ","")
	+?(ЭлементыФормы.МаршрутыНадпись.Значение="",""," "+стрЗаменить(ЭлементыФормы.МаршрутыНадпись.Значение,";"," ") ); // +?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");


	//+++ Запрос.УстановитьПараметр("Контрагент",  "Подмосковье");
	 Запрос.УстановитьПараметр("Комментарий", "%"+НадписьКатегорийВсе+"%");
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Следующий() Тогда
	 	рез = Выборка.Ссылка; //первая
	иначе
		рез = ПустойДокументСсылка;
	КонецЕсли;
	
	Если Выборка.Количество()>1 Тогда
		Предупреждение("Найдено несколько документов ("+строка(Выборка.Количество())+") Для:
		|"+НадписьКатегорийВсе);
	КонецЕсли;	
		
Возврат рез;
КонецФункции

Процедура КоманднаяПанель1СуммаОтгрузкиКонтроль(Кнопка)
	
	минСуммаДоставкиДляКлиента = 750; // рублей
	ВвестиЧисло(минСуммаДоставкиДляКлиента, "Введите мин.сумму доставки");
	
	 тзКонтр = Заказы.Выгрузить();
	 тзКонтр.Свернуть("Флаг, Контрагент, Тариф", "Количество, Кубатура, КолКамеры, КолАк, Наличка, ОбАк, Вес, СуммаДоставки, Сумма, Расстояние");
	 тзКонтр.Сортировать("Флаг УБЫВ"); //Ложь
	 i=0; N=тзКонтр.Количество();
 	 пока i<N Цикл //=========удалим то, что не отмечено флажками============
		 Если НЕ тзКонтр[i].флаг Тогда
			 тзКонтр.Удалить(i); 
			 N=N-1;
		 Иначе
			 i=i+1;
		 КонецЕсли;	 
	 КонецЦикла;	 

	 Если тзКонтр.Количество()=0 Тогда
		 Предупреждение("Нет строк Для контроля суммы отгрузки!",10);
	 КонецЕсли;
	 
	 //+++ 24.05.2013 --- контроль суммы доставки
	 Для Каждого стр1 из тзКонтр Цикл
		 delta = минСуммаДоставкиДляКлиента - стр1.СуммаДоставки;
		 Если delta>0 Тогда
			 НайденныеСтроки = Заказы.НайтиСтроки(Новый Структура("Контрагент",стр1.Контрагент) );
			 стр2 = ЭтотОбъект.Заказы.Найти(НайденныеСтроки[0].Заказ, "Заказ");
			 Если стр2<>неопределено Тогда // не должно быть неопределено
				 Режим = РежимДиалогаВопрос.ДаНет;
				 Если Вопрос("Для клиента: "+строка(стр1.Контрагент)+" 
					 |сумма доставки: "+строка(стр1.СуммаДоставки)+" < "+строка(минСуммаДоставкиДляКлиента)+" р.
					 |Добавить в доставку по заказу № "+ строка( НайденныеСтроки[0].Заказ.Номер)+" дополнительно: "+строка(delta)+" р.?",
					 Режим,10) <> КодВозвратаДиалога.Нет Тогда
				 стр1.СуммаДоставки = стр1.СуммаДоставки + delta;
				 стр2.СуммаДоставки = стр2.СуммаДоставки + delta;
				 КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;	 
	 КонецЦикла;	 

КонецПроцедуры

Процедура ОсновныеДействияФормыЗаданиеНаПеремещение(Кнопка)
	
	Если (КолесаТУТКарточки или КолесаТУТ или КолесаТУТПИТСТОП или Диски или Тендеры или Маркировка или ПЭК) тогда //13.03.2019
		СуммаПрямая = ?(СуммаПрямая=0, 0.01, СуммаПрямая); 
		ПрямойКм    =?(ПрямойКм=0, 1, ПрямойКм);
		ТарифПрямой = СуммаПрямая/ПрямойКм;
	Иначе		
		//30.06.2016 обновление адресов доставки и расстояний!
		пересчетРасстояний = истина;
		Если Вопрос("Выполнить расчет Расстояний?", РежимДиалогаВопрос.ДаНет, 30,КодВозвратаДиалога.Да,"АвтоРасчет расстояний по точкам", КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет тогда
		пересчетРасстояний = ЛОЖЬ;
		КонецЕсли;

		ЗаполненныВсеКоординаты = ОбновитьАдресаДоставки(пересчетРасстояний);
		
		Если не ЗаполненныВсеКоординаты Тогда 		
			Сообщить("Не во всех строках указаны Координаты! Расстояние может быть неправильным! Нажмите ""Пересчет"" или введите расстояние вручную!", СтатусСообщения.Важное);
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ТЗЗаказов = Заказы.Выгрузить(Новый Структура("Флаг", Истина), );
	Если ТЗЗаказов.Количество() = 0 Тогда
		Сообщить("Нет выбранных заказов!");
		Возврат;
	КонецЕсли; //04.12.2018 - тут!
	
	Если мМассивПользователейКоторымРазрешеноСохранять.найти(глТекущийПользователь)=неопределено Тогда
		Предупреждение("У Вас недостаточно прав Для создания документа ""Задание на перемещение""!", СтатусСообщения.Важное);
		возврат;
	КонецЕсли;
	
	флПрервать = Ложь;
	водительНеКассир = Водитель.ЗапретитьИнкассацию;  //15.11.2016

	Для Каждого стр1 Из ТЗЗаказов Цикл
		ЕстьРезервСтруктура = ПолучитьСтруктуруРезерваПоЗаказу(Стр1.Заказ, ДатаФормы - 86400 * 7); // проверяем резерв не более 7 дней от даты в Форме, автозакрытие заказов!
		 Если ЕстьРезервСтруктура.ЭтоРезервПеремещения и (не  ЕстьРезервСтруктура.ПеремещениеВыполнено) Тогда
	    	Сообщить("Будет создано новое задание на перемещение, хотя уже есть ""Задание на перемещение"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Обычное);
		ИначеЕсли ЕстьРезервСтруктура.ЭтоРезервОтгрузки и (не  ЕстьРезервСтруктура.ОтгрузкаВыполнена) Тогда
	    	Сообщить("Уже есть ""Задание на отгрузку"" по заказу: "+строка(Стр1.Заказ), СтатусСообщения.Внимание);
			флПрервать = Истина;	 // нельзя делать перемещение, Если уже идет отгрузка!
		КонецЕсли;	
		
		Если водительНеКассир и Стр1.Заказ.НеОтгружатьБезОплаты тогда //15.11.2016
			Предупреждение("     Водителю запрещена инкассация!
							|а заказ № "+строка(Стр1.Заказ.Номер)+" - не отгружается без оплаты!");
			флПрервать = Истина;	 // нельзя делать перемещение, Если уже идет отгрузка!
			прервать;
		КонецЕсли;
		
		Отказ = ложь; //+++ 18.10.2017
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Стр1.Заказ, Отказ, Стр1.Контрагент, ТекущаяДата() ); //18.10.2017
		Если Отказ тогда
			флПрервать = Истина; // нельзя делать перемещение, Если уже идет отгрузка!
		КонецЕсли;
		
	КонецЦикла;
	
	Если флПрервать Тогда
		возврат;
	КонецЕсли;	
//-------------------------------------------------------------------------------------------
	ЗаданиеСсылка = найтиЗаданиеНаОтгрузку(Ложь); //поиск существующего задания
	
	Если ЗаданиеСсылка = Документы.ЗаданиеНаПеремещение.ПустаяСсылка() Тогда
		Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
		Задание.Дата = ДатаФормы;
		Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
		сообщить("Создано новое задание на перемещение.");
	//	Задание.Записать();
	иначе
				
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Уже существует задание на перемещение:
		|"+строка(ЗаданиеСсылка)+"
		|Перезаполнить существующее задание(Да)?
		|     или Создать новое (Нет)?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если ЗаданиеСсылка.Проведен или ЗаданиеСсылка.Выполнено Тогда
			Предупреждение( "Уже существует документ:
							|"+строка(ЗаданиеСсылка)+"
							|которое уже в работе или выполнено!
							|Перезаполнение задания - невозможно!");
			форма1 = ЗаданиеСсылка.ПолучитьФорму("ФормаДокумента");
			форма1.ТолькоПросмотр = Истина;
			форма1.Открыть();
			возврат;
			КонецЕсли;

			Задание = ЗаданиеСсылка.ПолучитьОбъект();
			Задание.ЗаказыПокупателей.Очистить();
		Иначе //нет
			Задание = Документы.ЗаданиеНаПеремещение.СоздатьДокумент();
			Задание.Дата = ДатаФормы;
			Задание.ВидОперации = Перечисления.ВидыДвиженийПриходРасход.Расход;
		КонецЕсли;
	КонецЕсли;
	
	ТЗАсортимента = Новый ТаблицаЗначений;
	ТЗАсортимента.Колонки.Добавить("ВидТовара");
	Для Каждого СтрокаЗаказа Из ТЗЗаказов Цикл
		
		Если НЕ СтрокаЗаказа.Заказ.Проверен тогда //22.10.2013
			Сообщить("Нельзя грузить непроделенный заказ: "+строка(СтрокаЗаказа.Заказ), СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	

		СтрокаЗадания = Задание.ЗаказыПокупателей.Добавить();
		СтрокаЗадания.ЗаказПокупателя   = СтрокаЗаказа.Заказ;
		
		СтрокаЗадания.НомерВорот = СтрокаЗаказа.НомерВорот; //+++ 02.06.2015
		
		СтрокаЗадания.КоличествоПозиций = СтрокаЗаказа.Заказ.Товары.Количество();
		СтрокаЗадания.КоличествоШтук    = СтрокаЗаказа.Заказ.Товары.Итог("Количество");
		Задание.НомераЗаявокВСтроку     = ?(СтрДлина(Задание.НомераЗаявокВСтроку) > 0, Задание.НомераЗаявокВСтроку+", "+СтрокаЗаказа.Заказ.Номер, СтрокаЗаказа.Заказ.Номер);  
		Для Каждого Товар Из СтрокаЗаказа.Заказ.Товары Цикл
			Если ЗначениеЗаполнено(Товар.Номенклатура.ВидТовара) Тогда
				Если ТЗАсортимента.Найти(Товар.Номенклатура.ВидТовара, "ВидТовара") = Неопределено Тогда
					НоваяСтрокаТЗАсортимента = ТЗАсортимента.Добавить();
					НоваяСтрокаТЗАсортимента.ВидТовара = Товар.Номенклатура.ВидТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТЗАсортимента Из ТЗАсортимента Цикл
		Задание.Ассортимент = ?(СтрДлина(Задание.Ассортимент) > 0, Задание.Ассортимент+", "+СтрокаТЗАсортимента.ВидТовара, СтрокаТЗАсортимента.ВидТовара);
	КонецЦикла;
	
	Задание.ИтогКоличествоПозиций = Задание.ЗаказыПокупателей.Итог("КоличествоПозиций");
	Задание.ИтогКоличествоШтук    = Задание.ЗаказыПокупателей.Итог("КоличествоШтук");
	Задание.Водитель              = ФамилияИнициалыФизЛица(Водитель);
	Задание.Ответственный         = глТекущийПользователь;
	
	Задание.ВводитьКонтрагентаВручную = Истина; // это текст!
	
	НадписьКатегорийВсе = Формат(ДатаФормы,"ДФ=MM")+" "+Формат(ДатаФормы,"ДФ=MMMM")+"\"+Формат(ДатаФормы,"ДФ=dd.MM.yyyy")
	+?(ЭлементыФормы.МаршрутыНадпись.Значение="",""," "+стрЗаменить(ЭлементыФормы.МаршрутыНадпись.Значение,";"," ") )+?(ЗначениеЗаполнено(Водитель)," - "+ФамилияИнициалыФизЛица(Водитель), "");
    
 	Задание.Контрагент  = Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Контрагент;
	Задание.Комментарий = СокрЛП(Задание.ЗаказыПокупателей[0].ЗаказПокупателя.Номер)+" : "+НадписьКатегорийВсе+";
	|";
	
	фл = 0; колФА = 0;
	для каждого стр1 из Задание.ЗаказыПокупателей цикл
		Если стр1.ЗаказПокупателя.ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс тогда
		колФА = колФА+1;	
		КонецЕсли;
	КонецЦикла;

	колАкс = 0; колАКБ=0;
	для каждого тов1 из Задание.Товары цикл
	 Если тов1.Номенклатура.ВидТовара = перечисления.ВидыТоваров.Аксессуары тогда
		 колАкс = колАкс + 1; 
	 иначеЕсли Задание.Товары[0].Номенклатура.ВидТовара = перечисления.ВидыТоваров.АКБ тогда
	 	колАКБ = колАКБ + 1;
	 КонецЕсли;
	КонецЦикла;

	Если колФА = Задание.ЗаказыПокупателей.Количество() тогда	
		Задание.СкладПолучатель = справочники.Склады.НайтиПоКоду("00385"); //ТЕНДЕРЫ
	ИначеЕсли  колАкс = Задание.Товары.Количество() тогда	 
		 Задание.СкладПолучатель = справочники.Склады.НайтиПоКоду("02090"); //Сбор аксессуаров
	ИначеЕсли  колАКБ = Задание.Товары.Количество() тогда	 
		Задание.СкладПолучатель = справочники.Склады.НайтиПоКоду("02092"); //Сбор АКБ
	Иначе
		Задание.СкладПолучатель = справочники.Склады.НайтиПоКоду("01475"); //Ангар-И
		Если колФА>0 тогда
			Предупреждение("Есть заказы ("+строка(колФА)+"шт.) для перемещения на склад ТЕНДЕРЫ!", 30);
		иначеЕсли колАкс>0 или колАКБ>0  тогда	
			Предупреждение("Есть товары для перемещения на склад ""Сбор АКБ"" или ""Сбор аксессуаров""!", 30);
		КонецЕсли;	
	КонецЕсли;
	
	// Задание.Записать();
	//Плотников, заявки на брак ==========================================================================
	Для Каждого стр из ЗаявкиНаБрак Цикл
		Если стр.Флаг Тогда
		    Отбор = Новый Структура;
		    отбор.Вставить("Заявка",стр.Заявка);
		    ПоЗаявке = РезБрак.Скопировать(Отбор);
			Если ПоЗаявке.Количество() > 0 Тогда
				Для каждого стр1 из ПоЗаявке Цикл
					Если стр1.Склад <> Справочники.Склады.НайтиПоКоду("01475")  //АНГАР-И
						И стр1.Склад <> Справочники.Склады.НайтиПоКоду("02124") //Формула-ИМ
						И стр1.Склад <> Справочники.Склады.НайтиПоКоду("02090") Тогда //сбор Аксов
					    НовСтр = Задание.ЗаявкиНаБрак.Добавить();
					    ЗаполнитьЗначенияСвойств(НовСтр,Стр1);
						сообщить("Автоматически добавлен возврат товара по Заявке на брак " + строка(стр1.заявка));
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// ==================================================================================================
	Форма = Задание.ПолучитьФорму();
	Форма.Открыть();
КонецПроцедуры

// 30.06.2016 обновить адреса доставки 
Функция ОбновитьАдресаДоставки(СчитатьРасстояния=ЛОЖЬ) Экспорт
		
	предКоординаты=нашиКоординаты; предРасстояние = 0; ЕстьВсеКоординаты=Истина;
	Если СчитатьРасстояния тогда
		естьТочки=ложь;
		Заказы.Сортировать("Флаг УБЫВ,Точка,Контрагент,АдресДоставки");
		Для каждого Стр1 из Заказы Цикл
			Если Стр1.Флаг Тогда 
			естьТочки = (стр1.Точка>0); // все отмеченные строки должны быть с номером точки!
				если не естьТочки тогда
				сообщить(строка(стр1.НомерСтроки)+") - НЕ указан № точки для Клиента: "+строка(стр1.Контрагент)+" по заказу № "+стр1.Заказ.Номер, СтатусСообщения.Внимание); 
                КонецЕсли;
			КонецЕсли;	      
		КонецЦикла;
		
		Если не естьТочки тогда
			возврат ЛОЖЬ;
		КонецЕсли;
		
		Заказы.Сортировать("Точка, Контрагент, АдресДоставки"); //чтобы правильно считать расстояния!
	КонецЕсли;
	
	максРасстояние=0;
	Для каждого Стр1 из Заказы Цикл
		Если не Стр1.Флаг Тогда 
			Продолжить;
		КонецЕсли;	      
	  ЗаполнитьСтроку(стр1, Истина, неотгруженные, СчитатьРасстояния, предКоординаты ); //от точки к точке! 1 раз!
	  
	  Если максРасстояние=0 и стр1.Расстояние=0 тогда
		  стр1.Расстояние=1; //первая точка - расстояние не 0 !
	  КонецЕсли;	  
	  предКоординаты = Стр1.Координаты;
	  предРасстояние = стр1.Расстояние;
	  максРасстояние=максРасстояние + стр1.Расстояние;
	  Если сокрЛП(Стр1.Координаты)="" или  сокрЛП(Стр1.Координаты)="," тогда
		  ЕстьВсеКоординаты = ЛОЖЬ;
	  КонецЕсли;	  
	КонецЦикла;
	ПрямойКм = максРасстояние;
	
	Если СчитатьРасстояния тогда //от последней точки... обратно!
		ОбраткаКм = РассчитатьРасстояниеМеждуТочкамиГугл(предКоординаты, нашиКоординаты);
		сообщить("Обратный путь из последней точки: "+строка(ОбраткаКм)+" км.");
	КонецЕсли;
	
    ОбщийКм = ПрямойКм + ОбраткаКм;
	ПересчетПрибыльности(,ЛОЖЬ);   //+++ 28.03.2019 - при загрузке из файлов - не нужно пересчитывать Сумму прямого!
	
	возврат ЕстьВсеКоординаты;
КонецФункции

процедура ЗаписатьИнфоПоПроездуВРегистр(ЗаданиеСсылка, ТЗ)
	
	НаборЗаписей = РегистрыСведений.ИнформацияПоПроезду.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Задание.Установить(ЗаданиеСсылка); 
	НаборЗаписей.Записать();
 	
	Для iii=0 по ТЗ.Количество()-1 Цикл
		Стр = ТЗ[iii];
		СтрокаТаб = НаборЗаписей.Добавить();
		СтрокаТаб.НомерОчереди = стр.Точка;
		СтрокаТаб.Контрагент   = стр.Контрагент;
		СтрокаТаб.Адрес        = стр.АдресДоставки;
		СтрокаТаб.Заказ        = стр.Заказ;
					
		Если СокрЛП(стр.Заказ.ДоговорКонтрагента.ТипДоговора.Код)="Я0004" тогда
			СтрокаТаб.Организация="Формула Авто";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92797" тогда  //ФА+
			СтрокаТаб.Организация= "Формула Авто Плюс";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "П000382" тогда
			СтрокаТаб.Организация= "АвтоЭксперт";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "93980" тогда
			СтрокаТаб.Организация= "Формула";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92242" тогда
			СтрокаТаб.Организация= "Корп.Волга";
		Иначе
			СтрокаТаб.Организация="Яршинторг";
		КонецЕсли;
		
		СтрокаТаб.Менеджер   = стр.Заказ.ДоговорКонтрагента.ОтветственноеЛицо; // стр.Ответственный;
		СтрокаТаб.Комментарий= СокрЛП(стр.Комментарий);
		
		СтрокаТаб.Задание   = ЗаданиеСсылка; 
	КонецЦикла; 
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры

Процедура ЗаписатьИнфоПоПроезду(Форм,тз)
	
	ТабНаФорме=Форм.ЭлементыФормы.ИнформацияПоПроезду.Значение;
	ТабНаФорме.Очистить(); //+++ 08.04.2015
	стрРасстояние=0;
 	Для iii=0 по ТЗ.Количество()-1 Цикл
		Стр = ТЗ[iii];
		СтрокаТаб = ТабНаФорме.Добавить(); // при перезаполнении - неправильно!  не добавляются строки, а берутся уже из регистра...
		СтрокаТаб.НомерОчереди = стр.Точка;
		СтрокаТаб.Контрагент = стр.Контрагент;
		СтрокаТаб.Адрес      = стр.АдресДоставки;
		СтрокаТаб.Заказ      = стр.Заказ;
		
		//+++ 20.04.2015
		суммаТр = стр.Заказ.ТРНал+стр.Заказ.ТРБезНал+стр.Заказ.ТРВЦене; 
		
		Если суммаТр>0 тогда
			Доля  = стр.СуммаДоставки / суммаТр;
			если Доля>1 тогда Доля=1; КонецЕсли; //НЕЛЬЗЯ делать больше!
			СтрокаТаб.ДоставкаНал   = стр.Заказ.ТРНал    * Доля;
			СтрокаТаб.ДоставкаБНал  = стр.Заказ.ТРБезНал * Доля;
			СтрокаТаб.ДоставкаВЦене = стр.Заказ.ТРВЦене  * Доля;
			Если стр.СуммаДоставки > суммаТр тогда // разность в цену
				СтрокаТаб.ДоставкаВЦене = СтрокаТаб.ДоставкаВЦене  + (стр.СуммаДоставки - суммаТр);
			КонецЕсли;
		Иначе
			СтрокаТаб.ДоставкаНал   = 0;
			СтрокаТаб.ДоставкаБНал  = 0;
			СтрокаТаб.ДоставкаВЦене = стр.СуммаДоставки;   //ВСЁ В ЦЕНЕ!
		КонецЕсли;	
		
		//+++ 28.03.2016
        стрРасстояние = стрРасстояние + стр.Расстояние;
		СтрокаТаб.Расстояние = стрРасстояние;
			
		Если СокрЛП(стр.Заказ.ДоговорКонтрагента.ТипДоговора.Код)="Я0004" тогда
			СтрокаТаб.Организация="Формула Авто";
		ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "92797" тогда
			СтрокаТаб.Организация= "Формула Авто Плюс";
		//ИначеЕсли  СокрЛП(стр.Заказ.Контрагент.Код) = "П000382" тогда
		//	СтрокаТаб.Организация= "Автоэксперт";
		Иначе
			СтрокаТаб.Организация="Яршинторг";
		КонецЕсли;
		
		СтрокаТаб.Менеджер   = стр.Ответственный;
		СтрокаТаб.Комментарий= стр.Комментарий;
	КонецЦикла;
	
	   //+++ 28.03.2016 // прямое расстояние и сумма сразу в Задание!
	   Форм.ЭлементыФормы.Тариф.Значение = СуммаПрямая;
	   Форм.ЭлементыФормы.Километров.Значение = ПрямойКм; 
	
КонецПроцедуры

Процедура ЗаказыКомментарийНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора=СписокШаблоновКомментариев;
КонецПроцедуры

Процедура ЗаказыСуммаДоставкиПриИзменении(Элемент)
	
	//+++ 06.03.2015
	ДанныеСтроки = ЭлементыФормы.Заказы.ТекущиеДанные;
	если ДанныеСтроки = неопределено тогда возврат; КонецЕсли;
	
	Если ДанныеСтроки.Контрагент = справочники.Контрагенты.НайтиПоКоду("92797") тогда
		Если ДанныеСтроки.Тариф<>0 или ДанныеСтроки.СуммаДоставки<>0 тогда
			ДанныеСтроки.Тариф = 0;
			ДанныеСтроки.СуммаДоставки = 0;
			Сообщить("Сумма Доставки по "+строка(ДанныеСтроки.Контрагент)+" изменена с "+строка(ДанныеСтроки.СуммаДоставки)+" на 0р. СУММА ДОЛЖНА БЫТЬ РАВНА НУЛЮ!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТипАвтомобиляПриИзменении(Элемент)
	ВесМакс   = ТипАвтомобиля.Вес;
	ОбъемМакс = ТипАвтомобиля.Объем;
						
	рез = получитьТарифы(ВесМакс);
	ТарифПрямой     = рез.Тариф;
	//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
	ТарифСебест     = рез.Себестоимость;
	
	ПересчетПрибыльности();
	
КонецПроцедуры

функция получитьТарифы(ВесМакс=2)
	//15.07.2016 г. добавили получение тарифов из регистра 
	Рез = новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВесМакс",ВесМакс);
	Запрос.Параметры.Вставить("Прямой",ПрямойКм);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ТарифыНаПеревозкиСрезПоследних.Тоннаж) КАК ТоннажТариф
		|ПОМЕСТИТЬ ВТ_определение_тоннажа
		|ИЗ
		|	РегистрСведений.ТарифыНаПеревозки.СрезПоследних(
		|			,
		|			НЕ НаемныйТранспорт
		|				И Тоннаж >= &ВесМакс) КАК ТарифыНаПеревозкиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_определение_тоннажа.ТоннажТариф,
		|	МИНИМУМ(ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража) КАК ЗонаКилометража
		|ПОМЕСТИТЬ ОпределениеКилометража
		|ИЗ
		|	ВТ_определение_тоннажа КАК ВТ_определение_тоннажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаПеревозки.СрезПоследних(
		|				,
		|				НЕ НаемныйТранспорт
		|					И ЗонаКилометража >= &Прямой) КАК ТарифыНаПеревозкиСрезПоследних
		|		ПО ВТ_определение_тоннажа.ТоннажТариф = ТарифыНаПеревозкиСрезПоследних.Тоннаж
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_определение_тоннажа.ТоннажТариф
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТарифыНаПеревозкиСрезПоследних.ТарифЗаКм как Тариф,
		|	ТарифыНаПеревозкиСрезПоследних.СебестоимостьЗаКм как Себестоимость
		|ИЗ
		|	ОпределениеКилометража КАК ОпределениеКилометража
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифыНаПеревозки.СрезПоследних КАК ТарифыНаПеревозкиСрезПоследних
		|		ПО ОпределениеКилометража.ТоннажТариф = ТарифыНаПеревозкиСрезПоследних.Тоннаж
		|			И ОпределениеКилометража.ЗонаКилометража = ТарифыНаПеревозкиСрезПоследних.ЗонаКилометража";

	Результат = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() тогда //ПЕРВЫЙ тариф!
		 Рез.Вставить("Тариф", ВыборкаДетальныеЗаписи.Тариф);
		 Рез.Вставить("Себестоимость", ВыборкаДетальныеЗаписи.Себестоимость);		
	иначе
		Рез.Вставить("Тариф",0);
		Рез.Вставить("Себестоимость", 0);
	КонецЕсли;

	Возврат ВыборкаДетальныеЗаписи;	
КонецФункции

Процедура КоманднаяПанель1Действие2(Кнопка)
	город1 = "Ярославль";
	стр0Точка = Неопределено;
	для каждого стр1 из Заказы цикл
	  сАдрес = ПолучитьСтруктуруАдреса(стр1.Заказ); 
	  город2 = сАдрес.Город;
	  R12 = получитьРасстояние12(город1, город2);		
	  если стр1.Точка<>стр0Точка и город1=город2 и R12=0 тогда
		  R12=5;
		  стр0Точка = стр1.Точка;
	  иначеЕсли город1<>город2 и R12=0 тогда
		  сообщить("Нет данных о расстоянии между '"+город1+"' и '"+город1+"' - необходимо внести данные в Регистр сведений 'Расстояния'.");
	  КонецЕсли;	  
	  стр1.Расстояние = R12;
  	  город1 = город2;
	КонецЦикла;  
КонецПроцедуры

Процедура ПрямойКмПриИзменении(Элемент)
	
	Если ВесМакс>0 и (ТарифПрямой=0 или ТарифСебест=0) тогда
		рез = получитьТарифы(ВесМакс);
		ТарифПрямой     = рез.Тариф;
		//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
		ТарифСебест     = рез.Себестоимость;
	КонецЕсли;

	ПересчетПрибыльности();
КонецПроцедуры

Процедура ОбраткаКмПриИзменении(Элемент)
	
	Если ВесМакс>0 и (ТарифПрямой=0 или ТарифСебест=0) тогда
		рез = получитьТарифы(ВесМакс);
		ТарифПрямой     = рез.Тариф;
		//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
		ТарифСебест     = рез.Себестоимость;
	КонецЕсли;
	
	ПересчетПрибыльности();
КонецПроцедуры

процедура ПересчетПрибыльности(табл=неопределено, ИзменятьСуммуПрямую=Истина)
	
	ОбщийКм = (ПрямойКм + ?(ОбраткаКм=0,ПрямойКм,ОбраткаКм));
	СуммаСебест = (ПрямойКм + ?(ОбраткаКм=0,ПрямойКм,ОбраткаКм)) * ТарифСебест;
	
	Если ЗначениеЗаполнено(ТипАвтомобиля) или ВесМакс>0 тогда 
		ВесМакс = ?(ЗначениеЗаполнено(ТипАвтомобиля), ТипАвтомобиля.Вес, ВесМакс);
		рез1 = получитьТарифы(ВесМакс);
		ТарифПрямой1     = рез1.Тариф;
	иначе
		ТарифПрямой1 = 0;
	КонецЕсли;

	//+++ 28.03.2019 - не меняем сумму Задача № 65645 
	Если ИзменятьСуммуПрямую или СуммаПрямая=0 тогда
	//28.03.2019 --------------дополнительный анализ-----------------------------------
	
	СуммаПрямая1 = ОКР(  (ПрямойКм + ?(Кругорейс,?(ОбраткаКм=0,ПрямойКм,ОбраткаКм),0) ) * ТарифПрямой/суммаМин , 0)*суммаМин; // до суммаМин рублей!
		
		Если Кругорейс и ОбраткаКм > 2 * ПрямойКм тогда
			Предупреждение("Возможно неправильно указан прямой или обратный путь!
						|Прямой путь: "+строка(ПрямойКм)+" км, Обратный: "+строка(ОбраткаКм)+" км (в 2 раза больше прямого?!)
						|Сумма кругорейса не может превышать суммы 2х Прямого рейса!",30);
			//исправляем тариф...			
			СуммаПрямая = ОКР(  (ПрямойКм + ПрямойКм ) * ТарифПрямой/суммаМин, 0)*суммаМин;// до суммаМин рублей!
			ТарифПрямой = СуммаПрямая / (ПрямойКм + ОбраткаКм);
		иначе
			СуммаПрямая = СуммаПрямая1;
		КонецЕсли;	
	КонецЕсли;	
	
	//чуть-чуть сдвигается из-за округления!
	км = (ПрямойКм + ?(Кругорейс,?(ОбраткаКм=0,ПрямойКм,ОбраткаКм),0) );
	ТарифПрямой = ?(СуммаПрямая=0, ТарифПрямой, СуммаПрямая / ?(км=0, СуммаПрямая/10, км));
			
	Если ТарифПрямой>0 тогда
		коэф = 1.5;
		Если ТарифПрямой>=коэф*ТарифПрямой1 тогда
			ЭлементыФормы.ТарифПрямой.ЦветТекстаПоля = webЦвета.Красный;
			ЭлементыФормы.ТарифПрямой.Подсказка = "Тариф: "+строка(ТарифПрямой)+" р./км БОЛЬШЕ в "+формат(ТарифПрямой/ТарифПрямой1,"ЧДЦ=1")+" раза чем
												   |Тариф(Авто): "+строка(ТарифПрямой1)+" р./км";
			
		иначеЕсли ТарифПрямой>0 и коэф*ТарифПрямой<=ТарифПрямой1 тогда
			ЭлементыФормы.ТарифПрямой.ЦветТекстаПоля = webЦвета.Синий;
			ЭлементыФормы.ТарифПрямой.Подсказка = "Тариф: "+строка(ТарифПрямой)+" р./км МЕНЬШЕ в "+формат(ТарифПрямой1/ТарифПрямой,"ЧДЦ=1")+" раза чем
												  |Тариф(Авто): "+строка(ТарифПрямой1)+" р./км";
			
		иначеЕсли ТарифПрямой>0 и ТарифПрямой=ТарифПрямой1 тогда
			ЭлементыФормы.ТарифПрямой.ЦветТекстаПоля = webЦвета.ТемноЗеленый;
			ЭлементыФормы.ТарифПрямой.Подсказка = "Тариф: "+строка(ТарифПрямой)+" р./км РАВЕН (расхождений нет)
												   |Тариф(Авто): "+строка(ТарифПрямой1)+" р./км";
		иначе
			ЭлементыФормы.ТарифПрямой.ЦветТекстаПоля = webЦвета.Черный;
			ЭлементыФормы.ТарифПрямой.Подсказка = "Тариф: "+строка(ТарифПрямой)+" р./км ОТЛИЧАЕТСЯ на "+строка(ТарифПрямой-ТарифПрямой1)+" р./км от 
												   |Тариф(Авто): "+строка(ТарифПрямой1)+" р./км ";
		КонецЕсли;
	КонецЕсли;
	
	Если Кругорейс тогда
		ЭлементыФормы.СуммаПрямая.Подсказка = "Сумма Прямого "+?(ОбраткаКм=0,"x2","и Обратного")+" рейса";
	Иначе	
	  ЭлементыФормы.СуммаПрямая.Подсказка = "Сумма Прямого рейса (по Тарифу)";
   КонецЕсли;
   
	если табл=неопределено тогда
		ПрибыльПрямая	 = Заказы.Итог("СуммаДоставки");
	иначе	
		ПрибыльПрямая	 = табл.Итог("СуммаДоставки");
	КонецЕсли;
	Если ПрибыльПрямая<СуммаПрямая тогда
		ЭлементыФормы.СуммаПрямая.ЦветТекста = webЦвета.Красный;
	ИначеЕсли ПрибыльПрямая>=СуммаПрямая тогда
		ЭлементыФормы.СуммаПрямая.ЦветТекста = webЦвета.ТемноЗеленый;
	КонецЕсли;	
	
	
	Прибыльность = СуммаПрямая + Обратки.Итог("Сумма") - СуммаСебест;
	ЭлементыФормы.Прибыльность.Подсказка = ЭлементыФормы.СуммаПрямая.Подсказка+":  "+строка(СуммаПрямая)+"р.
										    |+ Сумма Обратки: "+строка(Обратки.Итог("Сумма"))+"р.
										    |- Cебестоимость: "+строка(СуммаСебест)+"р.
										    |Прибыльность = "+строка(Прибыльность)+"р.";
	Если Прибыльность<0 тогда
		ЭлементыФормы.Прибыльность.ЦветТекста = webЦвета.Красный;
	Иначе
		ЭлементыФормы.Прибыльность.ЦветТекста = webЦвета.ТемноЗеленый;
	КонецЕсли;	
КонецПроцедуры

Процедура КоманднаяПанель2ПоискЗаявокНаВозврат(Кнопка)
	ПолучитьЗаявкиНаВозврат();		
КонецПроцедуры

Процедура ВесМаксПриИзменении(Элемент)
							
	рез = получитьТарифы(ВесМакс);
	ТарифПрямой     = рез.Тариф;
	//ТарифОбратный = рез.ТарифПустой; // пустой пробег = 0
	ТарифСебест     = рез.Себестоимость;

КонецПроцедуры

Процедура ДействияФормыТарифы(Кнопка)
		макет = ЭтотОбъект.ПолучитьМакет("Тарифы");
		макет.Показать();
КонецПроцедуры

Процедура ОбраткиСуммаПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Обратки.ТекущиеДанные;
	текСтр.Тариф = ?(текСтр.Пробег=0, 0, текСтр.Сумма /  текСтр.Пробег);
	ПересчетПрибыльности(,ЛОЖЬ); // 28.03.2019 - изменение общего тарифа!
КонецПроцедуры

Процедура ОбраткиПриПолученииДанных(Элемент, ОформленияСтрок)
		ПересчетПрибыльности(,ЛОЖЬ);
КонецПроцедуры

Процедура ТарифСебестПриИзменении(Элемент)
	ПересчетПрибыльности();
КонецПроцедуры

Процедура СуммаПрямаяПриИзменении(Элемент)
	//дистанция = (ПрямойКм + ?(Кругорейс,?(ОбраткаКм=0,ПрямойКм,ОбраткаКм),0) );
	//если дистанция=0 тогда
	//	ТарифПрямой = 0;
	//иначе 
	//	ТарифПрямой = Окр(СуммаПрямая / дистанция,2);
	//КонецЕсли;
	//
	////сразу считаем
	//Прибыльность = СуммаПрямая + Обратки.Итог("Сумма") - СуммаСебест;
	//ЭлементыФормы.Прибыльность.Подсказка = "Сумма по тарифу:  "+строка(СуммаПрямая)+"р.
	//										|+ Сумма обратки: "+строка(Обратки.Итог("Сумма"))+"р.
	//										|- Cебестоимость: "+строка(СуммаСебест)+"р.
	//										|Прибыльность = "+строка(Прибыльность)+"р.";
	//Если Прибыльность<0 тогда
	//	ЭлементыФормы.Прибыльность.ЦветТекста = webЦвета.Красный;
	//Иначе
	//	ЭлементыФормы.Прибыльность.ЦветТекста = webЦвета.ТемноЗеленый;
	//КонецЕсли;	
    ПересчетПрибыльности(,ЛОЖЬ);
КонецПроцедуры

Процедура СуммаСебестПриИзменении(Элемент)
	дистанция = (ПрямойКм + ?(ОбраткаКм=0,ПрямойКм,ОбраткаКм));
	Если  дистанция = 0 тогда 
		ТарифСебест = 0;
	иначе	
		ТарифСебест = окр(СуммаСебест / дистанция,2);
	КонецЕсли;
	ПересчетПрибыльности();
КонецПроцедуры

Процедура ОбновитьЗаявки()
    ОбновлятьДанные = Истина;

	ЗаявкиНаТранспорт.Очистить();
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
    Запрос.УстановитьПараметр("статус",Перечисления.СтатусыЗаявокНаТранспорт.Подготовлен);	//02.04.2018 - АвтомобильЗаказан>>ПеревозчикВыбран
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаТранспорт.Ссылка,
	               |	ЗаявкаНаТранспорт.ПометкаУдаления,
	               |	ЗаявкаНаТранспорт.Номер,
	               |	ЗаявкаНаТранспорт.Дата,
	               |	ЗаявкаНаТранспорт.Проведен,
	               |	ЗаявкаНаТранспорт.ДатаДоставкиС,
	               |	ЗаявкаНаТранспорт.Объем,
	               |	ЗаявкаНаТранспорт.Вес,
	               |	ЗаявкаНаТранспорт.Статус,
	               |	ЗаявкаНаТранспорт.ДокументОтгрузки,
	               |	ЗаявкаНаТранспорт.Пробег,
	               |	ЗаявкаНаТранспорт.Получатель,
	               |	ЗаявкаНаТранспорт.Отправитель,
	               |	ЗаявкаНаТранспорт.Ответственный,
	               |	ЗаявкаНаТранспорт.Выполнил,
	               |	ЗаявкаНаТранспорт.Направление,
	               |	ЗаявкаНаТранспорт.ДатаДоставкиПо,
	               |	ЗаявкаНаТранспорт.Основание,
	               |	ЗаявкаНаТранспорт.Адрес,
	               |	ЗаявкаНаТранспорт.Комментарий,
	               |	ЗаявкаНаТранспорт.Контрагент,
	               |	ЗаявкаНаТранспорт.Сумма,
	               |	ЗаявкаНаТранспорт.Представление,
	               |	ЗаявкаНаТранспорт.МоментВремени
	               |ИЗ
	               |	Документ.ЗаявкаНаТранспорт КАК ЗаявкаНаТранспорт
	               |ГДЕ
	               |	ЗаявкаНаТранспорт.Статус = &Статус";
	рез = Запрос.Выполнить().Выгрузить();
	для каждого стр из Рез Цикл
		НоваяСтрока= ЗаявкиНаТранспорт.Добавить();
		НоваяСтрока.Контрагент0 = стр.Отправитель;
		//НоваяСтрока.Контрагент = ?(ЗначениеЗаполнено(Стр.Контрагент),Стр.Контрагент,стр.Получатель);
		НоваяСтрока.Направление = стр.Направление;
		НоваяСтрока.Объем = стр.Объем;
		НоваяСтрока.Пробег = стр.Пробег;
		НоваяСтрока.Сумма = стр.Сумма;
		НоваяСтрока.Комментарий = стр.Комментарий;
		НоваяСтрока.ДокументОснование = стр.Ссылка;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаказыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчетКоличестваФлаг();
КонецПроцедуры

//миронычев
Процедура ПолучитьЗаявкиНаВозврат()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаявкаНаВозвратТоваров.Ссылка.Контрагент КАК Контрагент0,
	               |	""Яршинторг ТК"" КАК Контрагент,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ЗаявкаНаВозвратТоваров.Ссылка.АдресДоставки = """"
	               |				ТОГДА ЗаявкаНаВозвратТоваров.Реализация.Сделка.АдресДоставки
	               |			ИНАЧЕ ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваров.Ссылка.АдресДоставки КАК СТРОКА(500))
	               |		КОНЕЦ КАК СТРОКА(500)) КАК Адрес,
	               |	""Клиент-Ярославль"" КАК Направление,
	               |	&ОбраткаКм КАК Пробег,
	               |	&СуммаОбратки КАК Сумма,
	               |	ЗаявкаНаВозвратТоваров.Ссылка КАК ДокументОснование,
	               |	ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваров.Ссылка.Комментарий КАК СТРОКА(500)) КАК Комментарий
	               |ИЗ
	               |	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваров
	               |ГДЕ
	               |	ЗаявкаНаВозвратТоваров.Ссылка.Подготовлен
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.Проведен
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.Согласованно
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.Дата >= &Дата
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.Подразделение = &Подразделение
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.Контрагент В (&СписокКонтр)
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.ЗаданиеНаОтгрузку.ПустаяСсылка)
	               |	И ЗаявкаНаВозвратТоваров.Ссылка.СпособЗабора > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявкаНаВозвратТоваров.Ссылка.Контрагент,
	               |	ЗаявкаНаВозвратТоваров.Ссылка,
	               |	ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваров.Ссылка.Комментарий КАК СТРОКА(500)),
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА ЗаявкаНаВозвратТоваров.Ссылка.АдресДоставки = """"
	               |				ТОГДА ЗаявкаНаВозвратТоваров.Реализация.Сделка.АдресДоставки
	               |			ИНАЧЕ ВЫРАЗИТЬ(ЗаявкаНаВозвратТоваров.Ссылка.АдресДоставки КАК СТРОКА(500))
	               |		КОНЕЦ КАК СТРОКА(500))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Контрагент0
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(НачалоМесяца(ТекущаяДата())-1) );
	
	//----24.11.2016--убрана сумма и пробег------------------------------------------------------------
	//Запрос.УстановитьПараметр("ОбраткаКм", ?(ОбраткаКм=0, ПрямойКм, ОбраткаКм) );
	//Запрос.УстановитьПараметр("СуммаОбратки", ?(ОбраткаКм=0, ПрямойКм, ОбраткаКм) * ТарифПрямой );
	Запрос.УстановитьПараметр("ОбраткаКм", 0 );
	Запрос.УстановитьПараметр("СуммаОбратки", 0 );
	
	Запрос.УстановитьПараметр("Подразделение", справочники.Подразделения.НайтиПоКоду("00005") );
	таблЗаказы = Заказы.Выгрузить();
	
	СписокКонтр = новый СписокЗначений;
	для каждого стр1 из Заказы цикл
		  Если стр1.Флаг тогда
		  	  если списокКонтр.НайтиПоЗначению(стр1.Контрагент)=неопределено тогда
			  списокКонтр.Добавить(стр1.Контрагент);
		  	  конецЕсли;
		  КонецЕсли;
	  КонецЦикла;
	  Запрос.УстановитьПараметр("СписокКонтр",СписокКонтр);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
    Обратки.Очистить();
	Пока Выборка.Следующий() Цикл
		Для каждого стрЗак из Заказы цикл  //+++ 23.01.2019 +++ задача № 58875 +++ проверки и по Адресу!
			Если не стрЗак.Флаг тогда 
				продолжить;
			КонецЕсли;	
			Если Выборка.Контрагент0 = стрЗак.Контрагент тогда //+++ 23.01.2019
				Если СокрЛП(Выборка.Адрес) <> СокрЛП(стрЗак.АдресДоставки) тогда
					сообщить("Для покупателя: "+строка(стрЗак.Контрагент)+" есть ""обратка"", но Адрес возврата НЕ совпадает с адресом доставки по заказу!", СтатусСообщения.Важное);
				КонецЕсли;	
				
			     стр1 = Обратки.Добавить();
				 ЗаполнитьЗначенияСвойств(стр1, выборка);
			     стр1.Тариф = ?(стр1.Пробег=0, стр1.Сумма , стр1.Сумма / стр1.Пробег);
				 прервать;
				 
			 КонецЕсли; 
		КонецЦикла;//+++ 23.01.2019 - второй цикл для сообщений о расхождении адресов нужен!
	КонецЦикла;
//		 ЗаявкиНаБрак.Очистить();
//	 ЗаявкиНаТранспорт.Очистить();

//+++ 05.12.2018  исчо раз ?! Задача 60528 +++
		СписокПодразделений = новый СписокЗначений;
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00005"));
		СписокПодразделений.Добавить(Справочники.Подразделения.ПустаяСсылка());

		ЗапросБрак = Новый Запрос;
		ЗапросБрак.УстановитьПараметр("Контрагенты",СписокКонтр);
		ЗапросБрак.УстановитьПараметр("СписокПодразделений",СписокПодразделений);
		ЗапросБрак.УстановитьПараметр("ДатаНач",НачалоМесяца(НачалоМесяца(ТекущаяДата())-2)); //+++ 31.01.2019 - 2 месяца на обработку Заявок на Брак
		ЗапросБрак.Текст = ПолучитьТекстЗапросаБрак(); //05.12.2018 - единый запрос!
		РезБрак = ЗапросБрак.Выполнить().Выгрузить(); 
		колБрак = РезБрак.Количество();
		Если колБрак>0 тогда 
			Если ЗаявкиНаБрак.Количество()=0 тогда 
				сообщить("АВТОМАТИЧЕСКИ Добавлено "+строка(колБрак)+" Заяв"+?(колБрак=1,"ка",?(колБрак<5,"ки", "ок"))+" на Брак!", СтатусСообщения.Информация);
				ЗаявкиНаБрак.Загрузить(РезБрак);
			Иначе
				ЗаявкиНаБрак.Очистить();
				Для каждого стр из РезБрак Цикл
					стр11 = ЗаявкиНаБрак.Найти(стр.Заявка, "Заявка");
					Если Стр11 = неопределено Тогда   //добавление НОВЫХ!
					сообщить("АВТОМАТИЧЕСКИ Добавлена "+строка(стр.Заявка), СтатусСообщения.Информация);
						НовСтр = ЗаявкиНаБрак.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр,Стр);  
					КонецЕсли;	  
				КонецЦикла;  
			КонецЕсли;	
		КонецЕсли;	
	//+++)	

КонецПроцедуры

Процедура ДействияФормыУправлениеМаршрутами(Кнопка)
	Форма = ЭтотОбъект.ПолучитьФорму("Форма1");
	Форма.Открыть();
КонецПроцедуры

Процедура КолесаТУТПриИзменении(Элемент)
	ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение + 1; // другой день
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, СтрДлина(ИмяЗаголовка)-3);
КонецПроцедуры

//миронычев
Процедура ВодительНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	форма1 = справочники.ФизическиеЛица.ПолучитьФормуВыбора();
		// Убираем Помеченных на удаление водителей

	форма1.СправочникСписок.отбор.ПометкаУдаления.ВидСравнения  = ВидСравнения.НеРавно;
	форма1.СправочникСписок.отбор.ПометкаУдаления.Значение	    = Истина;   
	форма1.СправочникСписок.отбор.ПометкаУдаления.Использование = Истина;
	форма1.СправочникСписок.отбор.Ссылка.ВидСравнения  = ВидСравнения.ВИерархии;
	форма1.СправочникСписок.отбор.Ссылка.Значение	   = справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");   //Водители
	форма1.СправочникСписок.отбор.Ссылка.Использование = Истина;
    форма1.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = ложь;
    Водитель = форма1.ОткрытьМодально();
	ВодительПриИзменении(Водитель);
КонецПроцедуры

Процедура ПеревозчикНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	форма1 = Справочники.Контрагенты.ПолучитьФормуВыбора();
	Контр  = форма1.ОткрытьМодально();
	Перевозчик = Контр.НаименованиеПолное;
	Если ЭлементыФормы.Перевозчик.СписокВыбора.НайтиПоЗначению(Перевозчик)=неопределено тогда
		Предупреждение("ВНИМАНИЕ! Вы выбрали Контрагента, не являющегося Перевозчиком Яршинторга!!!", 30);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПеревозчикОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Предупреждение("Перевозчика нужно выбирать из списка!", 30);
	Перевозчик = "";
КонецПроцедуры

Процедура ДатаВыгрузкиПриИзменении(Элемент)
	//Если ДатаВыгрузки<ТекущаяДата() тогда
	//	Предупреждение("Дата выгрузки не может быть раньше текущей даты!
	//				  |Дата выгрузки автоматически изменена + 2 часа от текущего времени!",30);
	//	ДатаВыгрузки = ТекущаяДата() + 1*3600;
	//КонецЕсли;	
КонецПроцедуры

Процедура КолесаТУТПИТСТОППриИзменении(Элемент)
	ДатаФормирования = ЭлементыФормы.ДатаФормы.Значение;
	ЭтаФорма.Заголовок = Лев(ИмяЗаголовка, СтрДлина(ИмяЗаголовка)-3);

КонецПроцедуры

Процедура ТарифПрямойОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
Если (КолесаТУТКарточки или КолесаТУТ или КолесаТУТПИТСТОП или Диски или Тендеры или Маркировка или ПЭК) тогда //28.03.2019
	ТарифПрямой = 0.01;
	СуммаПрямая = ТарифПрямой*ПрямойКм;
Иначе
	Если ЗначениеЗаполнено(ТипАвтомобиля) или ВесМакс>0 тогда 
		ВесМакс = ?(ЗначениеЗаполнено(ТипАвтомобиля), ТипАвтомобиля.Вес, ВесМакс);
		рез1 = получитьТарифы(ВесМакс);
		ТарифПрямой = рез1.Тариф;
	иначе
		ТарифПрямой = 0;
	КонецЕсли;
КонецЕсли;

	ТарифСебестПриИзменении(неопределено);
	
КонецПроцедуры

Процедура СуммаПрямаяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	Элемент.Значение = Элемент.Значение + суммаМин*Направление;  //+-1 р.
	СуммаПрямаяПриИзменении(неопределено);
КонецПроцедуры


 суммаМин = 100;

//============================================================

//	ИмяПапки = "\\alpha\Userdir\ALL\1C\ЯШТ_настройкиДляМенеджеров\"; //777 +Формат(ТекущаяДата(),"ДФ=MM")+" "+Формат(ТекущаяДата(),"ДФ=MMMM")+"\";
//  ИмяПапки = "\\Omega\V8Bases_file\ЯШТ_настройкиДляМенеджеров\";
//18.12.2015
//ИмяПапки0 ="\\terminal\обмен\ЯШТ_настройкиДляМенеджеров\";
  ИмяПапки0 ="\\terminal\обмен\я192\";
  ИмяПапки = ИмяПапки0;

	ИмяФАЙЛАобр = "\ВнешняяОбработка_РасчетПоездкиПодмосковье_";
	//ИмяФАЙЛАобр  = "\ф";
	
	ИмяЗаголовка = "Обработка  Расчет поездки в Подмосковье - ";
	
	СписокПолейДляСохранения = новый Массив;
	СписокПолейДляСохранения.Добавить("ДатаФормы");//0
	//СписокПолейДляСохранения.Добавить("Север");
	//СписокПолейДляСохранения.Добавить("Юг");
	СписокПолейДляСохранения.Добавить("неотгруженные");
	
	СписокПолейДляСохранения.Добавить("Водитель");  //4 реквизит 
	СписокПолейДляСохранения.Добавить("АдресИзИнтернета");
	
	СписокПолейДляСохранения.Добавить("Заказы");//6
	СписокПолейДляСохранения.Добавить("МаршрутыНадпись");//6
	
	СписокПолейДляСохранения.Добавить("Диски");//6

	СписокПолейДляСохранения.Добавить("Тендеры");//6
    СписокПолейДляСохранения.Добавить("Маркировка");//6

    СписокПолейДляСохранения.Добавить("ПЭК");//6
    СписокПолейДляСохранения.Добавить("КолесаТУТ");//6
 	
	СписокПолейДляСохранения.Добавить("Комментарий");
	   //СписокПолейДляСохранения.Добавить("Иваново");
	   //СписокПолейДляСохранения.Добавить("Владимир");//9

	//СписокПолейДляСохранения.Добавить("СписокКатегорий");//10
	
	//=========================================================	
	СписокПолейДляСохранения.Добавить("ПрямойКм");//11
   	СписокПолейДляСохранения.Добавить("ТарифПрямой");//12
  	СписокПолейДляСохранения.Добавить("СуммаПрямая");//13

	СписокПолейДляСохранения.Добавить("Обратки");//14
	СписокПолейДляСохранения.Добавить("ОбраткаКм");//15
   	СписокПолейДляСохранения.Добавить("ТарифСебест");//16
  	СписокПолейДляСохранения.Добавить("СуммаСебест");//17
	
	СписокПолейДляСохранения.Добавить("ТипАвтомобиля"); // 18
	СписокПолейДляСохранения.Добавить("ВесМакс");   // 19
	СписокПолейДляСохранения.Добавить("ОбъемМакс"); // 20
	
	СписокПолейДляСохранения.Добавить("Кругорейс");
	
	СписокПолейДляСохранения.Добавить("ЗаявкиНаБрак");//
	
	СписокПолейДляСохранения.Добавить("Маршруты");//6

ДатаФормирования = ТекущаяДата();
ТарифДоставки = "Тариф доставки";

флВыводитьСообщенияОЧастичнойОтгрузке = ЛОЖЬ;

    //-- Москва -- 55.812340,37.664425 
	//             57.656500,39.838000
				   
мСписокЗаказов  = Новый Массив;
мСписокОтгрузок = Новый Массив;

	нашиКоординаты="39.838082,57.657312"; //Ярославль, ул.Базовая, д.3 - 39.838082,57.657312
    фЕстьФлаги = Ложь;
	КолДнейНеважности = 65;  //66 дней = 3 мес вперед
	
	
//+++ 23.05.2012 - жестко заданный список Для сохранения и создания заданий на отгрузку
мМассивПользователейКоторымРазрешеноСохранять = новый массив;
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Воробьев А.В."));
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бойков Д.В."));
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Вислых Л.С.")); //15.04.2016
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Зайцева С.В.")); //18.07.2016
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Плотников")); //18.07.2016
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Еникеева И.")); //11.05.2016
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Трофимов Е.В.")); //18.07.2016
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бакунин А.А.")); //18.07.2016
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Марков И.")); //11.05.2016

//++ 28.05.2015
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев Егор"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Никитин М.И."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Антонов А.В."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Плешивцева Наталья Владимировна"));


мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Огородников"));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Смирнов А.А."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Тихонов В. Э."));
мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Урванцев Д.Ю."));

//++АЧ 10.07.2015 По просьбе Владимира Лапенкова, поставить возможность Валентине Рейколес, Евгению Бондаренко, Осиповой Наталье. 
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Рейколес В.В."));
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Осипова Н.И."));
//мМассивПользователейКоторымРазрешеноСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Бондаренко"));

//02.04.2014 - кто может сохранять и править настройки
мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять = новый массив;
мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Серков"));
мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Марешева И.Г."));

мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Огородников"));
мМассивПользователейКоторымРазрешеноТОЛЬКОСохранять.Добавить(Справочники.Пользователи.НайтиПоКоду("Смирнов А.А."));

СписокШаблоновКомментариев=новый списокЗначений;
СписокШаблоновКомментариев.Добавить("отдать крышки");
СписокШаблоновКомментариев.Добавить("подписать, вернуть назад долговые документы");
СписокШаблоновКомментариев.Добавить("забрать долговые документы");
СписокШаблоновКомментариев.Добавить("отдать рекламу");
СписокШаблоновКомментариев.Добавить("забрать возврат");
СписокШаблоновКомментариев.Добавить("забрать брак");

ОбновлятьДанные = ЛОЖЬ;