
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив; 
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия);
	
	Если Настройки <> Неопределено Тогда 
		
		ФормаОтчета = ЭтотОбъект.ПолучитьФорму("ФормаОтчета", , Новый УникальныйИдентификатор); //Новый УникальныйИдентификатор - ключ уникальности нужен для получения новой формы, а не уже открытой  
		ФормаОтчета.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		ФормаОтчета.СкомпоноватьРезультат(ФормаОтчета.ЭлементыФормы.Результат, ФормаОтчета.ДанныеРасшифровки); 
		ФормаОтчета.Открыть();
		
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормысф(Кнопка)
	ВнешниеНаборыДанных = новый структура;
	Настройки = КомпоновщикНастроек.Настройки;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки,
	,ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,ДанныеРасшифровки);
	Результат = ЭлементыФормы.Результат;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
КонецПроцедуры

Процедура ПриОткрытии()
	
РазрешенныеСтатьиЗатрат = ПолучитьРазрешенныеСтатьиЗатрат(глТекущийПользователь);	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.
                                 Элементы.Найти("РазрешенныеСтатьиЗатрат");
   ПараметрСКД.Использование = Истина;
   ПараметрСКД.Значение  = РазрешенныеСтатьиЗатрат;
   
   ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.
                                 Элементы.Найти("Период");
  ПараметрСКД.Значение.ДатаНачала = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
  ПараметрСКД.Значение.ДатаОкончания = КонецМесяца(КонецМесяца(ТекущаяДата())+1);
  ПараметрСКД.Использование = Истина;


КонецПроцедуры

функция ПолучитьРазрешенныеСтатьиЗатрат(Пользователь)
	СписокСтатей = Новый СписокЗначений;
	ГруппыРазрешенные = новый СписокЗначений;
	ГруппыЗапрещенные = новый СписокЗначений;
	
	СтатьиРазрешенные = новый СписокЗначений;
	СтатьиЗапрещенные = новый СписокЗначений;
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЕСТЬNULL(ДоступыКСтатьямЗатратУпр.СтатьяЗатратУпр.ЭтоГруппа, ИСТИНА) КАК СтатьяЗатратУпрЭтоГруппа,
	|	ДоступыКСтатьямЗатратУпр.Разрешено КАК Разрешено,
	|	ДоступыКСтатьямЗатратУпр.СтатьяЗатратУпр
	|ИЗ
	|	РегистрСведений.ДоступыКСтатьямЗатратУпр КАК ДоступыКСтатьямЗатратУпр
	|ГДЕ
	|	ДоступыКСтатьямЗатратУпр.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если выборка.СтатьяЗатратУпрЭтоГруппа тогда
			Если Выборка.Разрешено тогда
				ГруппыРазрешенные.Добавить(Выборка.СтатьяЗатратУпр);
			иначе
				ГруппыЗапрещенные.Добавить(Выборка.СтатьяЗатратУпр);
			КонецЕсли;
		иначе
			Если Выборка.Разрешено тогда
				СтатьиРазрешенные.Добавить(Выборка.СтатьяЗатратУпр);
			иначе
				СтатьиРазрешенные.Добавить(Выборка.СтатьяЗатратУпр);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СтатьиЗатратУПР.Ссылка
	             |ПОМЕСТИТЬ втСтатьиЗапрещенные
	             |ИЗ
	             |	Справочник.СтатьиЗатратУПР КАК СтатьиЗатратУПР
	             |ГДЕ
	             |	(СтатьиЗатратУПР.Ссылка В ИЕРАРХИИ (&ГруппыЗапрещенные)
	             |			ИЛИ СтатьиЗатратУПР.Ссылка В (&СтатьиЗапрещенныее))
	             |	И СтатьиЗатратУПР.ЭтоГруппа = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	СтатьиЗатратУПР.Родитель,
	             |	СтатьиЗатратУПР.Ссылка
	             |ИЗ
	             |	Справочник.СтатьиЗатратУПР КАК СтатьиЗатратУПР
	             |ГДЕ
	             |	((СтатьиЗатратУПР.Ссылка В ИЕРАРХИИ (&ГруппыРазрешенные)
	             |				ИЛИ СтатьиЗатратУПР.Ссылка В (&СтатьиРазрешенные))
	             |				И СтатьиЗатратУПР.ЭтоГруппа = ЛОЖЬ
	             |				И НЕ СтатьиЗатратУПР.Ссылка В
	             |						(ВЫБРАТЬ
	             |							втСтатьиЗапрещенные.Ссылка
	             |						ИЗ
	             |							втСтатьиЗапрещенные КАК втСтатьиЗапрещенные)
	             |			ИЛИ &ПолныеПрава)";
				 
				 Запрос.УстановитьПараметр("ПолныеПрава",ложь);
				 Если РольДоступна("ПолныеПрава") тогда
					 Запрос.УстановитьПараметр("ПолныеПрава",истина);
				 КонецЕсли;
				 Запрос.УстановитьПараметр("ГруппыЗапрещенные",ГруппыЗапрещенные);
	Запрос.УстановитьПараметр("СтатьиЗапрещенныее",СтатьиЗапрещенные);
	Запрос.УстановитьПараметр("ГруппыРазрешенные",ГруппыРазрешенные);
	Запрос.УстановитьПараметр("СтатьиРазрешенные",СтатьиРазрешенные);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	пока Рез.Следующий() цикл
		СписокСтатей.Добавить(Рез.Ссылка);
	КонецЦикла;
	Возврат СписокСтатей;
КонецФункции
