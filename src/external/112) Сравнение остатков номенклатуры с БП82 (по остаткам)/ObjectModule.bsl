Перем ОбъектПодключения, РезультатПодключения Экспорт;
Перем ДеревоОтличий;

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "") Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
		
	Возврат РезультатПодключения;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = "V83";//+++ СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Процедура СообщитьОбОшибкеДляПользователю(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Сообщить(СокрЛП(ТекстСообщения), СтатусСообщения.Важное);

КонецПроцедуры

#Если Клиент Тогда
// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецЕсли

Функция ПолучитьДеревоОтличий() Экспорт
	
	ДеревоОтличий.Строки.Очистить();
	
	РезультатЗапросаКТекБазе = ВыполнитьЗапросКТекБазе();

	РезультатЗапросаКВнешнейБазе = ВыполнитьЗапросКВнешнейБазе();
	ДеревоВнешнейБазы = РезультатЗапросаКВнешнейБазе.Выгрузить(ОбъектПодключения.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УстановитьУИД(ДеревоВнешнейБазы);
	
	ВыборкаПоНоменклатуре = РезультатЗапросаКТекБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		Соответствует = Истина;
		
		СтрокаНоменклатурыВнешняя = ДеревоВнешнейБазы.Строки.Найти(Строка(ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор()),"УИД");
		Если СтрокаНоменклатурыВнешняя = Неопределено Тогда
			Соответствует = Ложь;
		ИначеЕсли НЕ(СтрокаНоменклатурыВнешняя.КоличествоОстатокВнешний = ВыборкаПоНоменклатуре.КоличествоОстатокВБазе
			//и СтрокаНоменклатурыВнешняя.СуммаОстатокВнешний = ВыборкаПоНоменклатуре.СуммаОстатокВБазе
			) Тогда
			Соответствует = Ложь;
		Иначе
			ВыборкаПоСкладу = ВыборкаПоНоменклатуре.Выбрать();
			Пока ВыборкаПоСкладу.Следующий() Цикл
				
				СтрокаСкладаВнешняя = СтрокаНоменклатурыВнешняя.Строки.Найти(Строка(ВыборкаПоСкладу.Склад.УникальныйИдентификатор()),"УИД");
				Если СтрокаСкладаВнешняя = Неопределено Тогда
					Соответствует = Ложь;
					прервать;
				ИначеЕсли НЕ(СтрокаСкладаВнешняя.КоличествоОстатокВнешний = ВыборкаПоСкладу.КоличествоОстатокВБазе
					//и СтрокаСкладаВнешняя.СуммаОстатокВнешний = ВыборкаПоСкладу.СуммаОстатокВБазе
					) Тогда
					Соответствует = Ложь;
					прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если Соответствует Тогда
			ДеревоВнешнейБазы.Строки.Удалить(СтрокаНоменклатурыВнешняя);
		Иначе
			ДобавитьСтрокиОтличий(ВыборкаПоНоменклатуре,СтрокаНоменклатурыВнешняя);
			Если НЕ СтрокаНоменклатурыВнешняя = Неопределено Тогда
				ДеревоВнешнейБазы.Строки.Удалить(СтрокаНоменклатурыВнешняя);
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
	
	//то что осталось в бухгалтерии
	Для каждого СтрокаНоменклатурыВнешняя Из ДеревоВнешнейБазы.Строки Цикл
		ДобавитьСтрокиОтличий(,СтрокаНоменклатурыВнешняя);
	КонецЦикла; 
	
 	возврат ДеревоОтличий;
	
КонецФункции

Процедура ДобавитьСтрокиОтличий(СтрокаНоменклатурыБазы = Неопределено,СтрокаНоменклатурыВнешняя = Неопределено)

	СтрокаНоменклатуры = ДеревоОтличий.Строки.Добавить();
	
	//нет в УТ
	Если СтрокаНоменклатурыБазы = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаНоменклатурыВнешняя);
		
		
		Номенклатура = ПолучитьСсылкуИзВнешнегоИсточника(СтрокаНоменклатурыВнешняя,"Номенклатура");
		СтрокаНоменклатуры.Номенклатура = Номенклатура;
		
		Для каждого строкаСкладаВнешняя Из СтрокаНоменклатурыВнешняя.Строки Цикл
			
			СтрокаСклада = СтрокаНоменклатуры.Строки.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаСклада,строкаСкладаВнешняя);
			СтрокаСклада.Номенклатура = Номенклатура;
			//СтрокаСклада.Склад		  = ПолучитьСсылкуИзВнешнегоИсточника(строкаСкладаВнешняя,"Склады");     возвращает ОбъектНеНайден
			СтрокаСклада.Склад = СтрокаСкладаВнешняя.СкладыНаименование;
			
		КонецЦикла; 
		
	//нет в БП
	ИначеЕсли СтрокаНоменклатурыВнешняя = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаНоменклатурыБазы);
		
		СтрокаСкладаБазы = СтрокаНоменклатурыБазы.Выбрать();
		Пока СтрокаСкладаБазы.Следующий() Цикл
			
			СтрокаСклада = СтрокаНоменклатуры.Строки.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаСклада,СтрокаСкладаБазы);
		
		КонецЦикла; 
		
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаНоменклатурыБазы);
		//ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаНоменклатурыВнешняя,"СуммаОстатокВнешний,КоличествоОстатокВнешний,Код");
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаНоменклатурыВнешняя,"КоличествоОстатокВнешний,Код");
		СтрокаСкладаБазы = СтрокаНоменклатурыБазы.Выбрать();
		Пока СтрокаСкладаБазы.Следующий() Цикл
			
			СтрокаСклада = СтрокаНоменклатуры.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСклада,СтрокаСкладаБазы);
			
			СтрокаСкладаВнешняя = СтрокаНоменклатурыВнешняя.Строки.Найти(Строка(СтрокаСкладаБазы.Склад.УникальныйИдентификатор()),"УИД");
			Если НЕ СтрокаСкладаВнешняя = Неопределено Тогда
				//ЗаполнитьЗначенияСвойств(СтрокаСклада,строкаСкладаВнешняя,"СуммаОстатокВнешний,КоличествоОстатокВнешний");
				ЗаполнитьЗначенияСвойств(СтрокаСклада,строкаСкладаВнешняя,"КоличествоОстатокВнешний");
				СтрокаНоменклатурыВнешняя.Строки.Удалить(строкаСкладаВнешняя);
			КонецЕсли; 
		КонецЦикла; 
		
		//оставшиеся склады в БП
		Для каждого строкаСкладаВнешняя Из СтрокаНоменклатурыВнешняя.Строки Цикл
			
			СтрокаСклада = СтрокаНоменклатуры.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСклада,строкаСкладаВнешняя);
			СтрокаСклада.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			//СтрокаСклада.Склад		  = ПолучитьСсылкуИзВнешнегоИсточника(строкаСкладаВнешняя,"Склады");     возвращает ОбъектНеНайден
			СтрокаСклада.Склад = СтрокаСкладаВнешняя.СкладыНаименование;
		
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСсылкуИзВнешнегоИсточника(СтрокаВнешняя,ИмяСпр)

	НовыйУИД = Новый УникальныйИдентификатор(СтрокаВнешняя.УИД);
	
	Ссылка = Справочники[ИмяСпр].ПолучитьСсылку(НовыйУИД);
	Если Ссылка.Пустая() Тогда
		Наименование = СтрокаВнешняя[ИмяСпр+"Наименование"];
		Сообщить(Наименование); 
		Возврат Наименование;
	Иначе
		Возврат Ссылка;
	КонецЕсли; 

КонецФункции // ПолучитьСсылкуИзВнешнегоИсточника()
 
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКТекБазе()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура.Код КАК Код,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	СУММА(ТоварыНаСкладах.КоличествоОстаток) КАК КоличествоОстатокВБазе,
	|	0 КАК СуммаОстатокВБазе
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			(Номенклатура В ИЕРАРХИИ (&Шины)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&Диски)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&Шипы)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&АКБ)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&Аксессуары)
	|				ИЛИ Номенклатура В ИЕРАРХИИ (&Дубли))
	|				И НЕ Номенклатура В ИЕРАРХИИ (&Крышки)
	|				И НЕ Склад В (&СписокСкладовРекламнойПродукции)) КАК ТоварыНаСкладах
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоОстатокВБазе УБЫВ,
	|	ТоварыНаСкладах.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(ДатаСравненияОстатков), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Шины",Справочники.Номенклатура.НайтиПоКоду("0001746"));
	Запрос.УстановитьПараметр("Диски",Справочники.Номенклатура.НайтиПоКоду("0001752"));
	Запрос.УстановитьПараметр("Шипы",Справочники.Номенклатура.НайтиПоКоду("0060001"));
	Запрос.УстановитьПараметр("АКБ",Справочники.Номенклатура.НайтиПоКоду("0080021"));
	Запрос.УстановитьПараметр("Аксессуары",Справочники.Номенклатура.НайтиПоКоду("0000001"));
	Запрос.УстановитьПараметр("Дубли",Справочники.Номенклатура.НайтиПоКоду("0040004"));
	Запрос.УстановитьПараметр("Крышки",Справочники.Номенклатура.НайтиПоКоду("0080004"));
	СписокСкладовРекламнойПродукции = Новый СписокЗначений;
	СписокСкладовРекламнойПродукции.Добавить(Справочники.Склады.НайтиПоКоду("01443"));
	СписокСкладовРекламнойПродукции.Добавить(Справочники.Склады.НайтиПоКоду("01476"));
	Запрос.УстановитьПараметр("СписокСкладовРекламнойПродукции",СписокСкладовРекламнойПродукции);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКТекБазе()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКВнешнейБазе()

	Запрос = ОбъектПодключения.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1.Код КАК Код,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто1.Наименование КАК НоменклатураНаименование,
	|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
	|	ХозрасчетныйОстатки.Субконто2.Наименование КАК СкладыНаименование,
//	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК СуммаОстатокВнешний,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоОстатокВнешний
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет.Код = ""41.01"" или Счет.Код =""41.07"", &МассивСубконто, 
	| (Субконто1 в Иерархии (&Шины) ИЛИ Субконто1 в Иерархии (&Диски) ИЛИ Субконто1 в Иерархии (&Шипы) ИЛИ Субконто1 в Иерархии (&АКБ) ИЛИ Субконто1 в Иерархии (&Аксессуары) ИЛИ Субконто1 в Иерархии (&Дубли)) И НЕ Субконто1 в Иерархии (&Крышки) 
	|	И НЕ Субконто2 В ИЕРАРХИИ(&Группа3)
	|	И НЕ Субконто2.Наименование ПОДОБНО ""%(ОТХ)%"") КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто1.Код,
	|	ХозрасчетныйОстатки.Субконто1.Наименование,
	|	ХозрасчетныйОстатки.Субконто2.Наименование
	|ИТОГИ ПО
	|	Номенклатура";
	
	МассивСубконто =  ОбъектПодключения.NewObject("Массив");
	МассивСубконто.Добавить(ОбъектПодключения.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	МассивСубконто.Добавить(ОбъектПодключения.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ДатаСравненияОстатков)+1); //остатки РН не включают последнюю секунду
	Запрос.УстановитьПараметр("Шины",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0001746"));
	Запрос.УстановитьПараметр("Диски",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0001752"));
	Запрос.УстановитьПараметр("Шипы",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0060001"));
	Запрос.УстановитьПараметр("АКБ",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0080021"));
	Запрос.УстановитьПараметр("Аксессуары",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0000001"));
	Запрос.УстановитьПараметр("Дубли",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0040004"));
	Запрос.УстановитьПараметр("Крышки",ОбъектПодключения.Справочники.Номенклатура.НайтиПоКоду("0080004"));
	Запрос.УстановитьПараметр("Группа3",ОбъектПодключения.Справочники.Склады.НайтиПоКоду("12094"));
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКВнешнейБазе()

Процедура УстановитьУИД(ДеревоВнешнейБазы)

	ДеревоВнешнейБазы.Колонки.Добавить("УИД");	
	
	Для каждого СтрокаНоменклатуры Из ДеревоВнешнейБазы.Строки Цикл
		
		СтрокаНоменклатуры.УИД = ОбъектПодключения.String(СтрокаНоменклатуры.Номенклатура.УникальныйИдентификатор());
		
		Для каждого СтрокаСклада Из СтрокаНоменклатуры.Строки Цикл
		
			СтрокаСклада.УИД = ОбъектПодключения.String(СтрокаСклада.Склад.УникальныйИдентификатор());
		
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры
 

ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";//+++ 81 на 82!!!
АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;

ДеревоОтличий = Новый ДеревоЗначений;
ДеревоОтличий.Колонки.Добавить("Код",,"Код");
ДеревоОтличий.Колонки.Добавить("Номенклатура",,"Номенклатура");
ДеревоОтличий.Колонки.Добавить("Склад",,"Склад");
ДеревоОтличий.Колонки.Добавить("КоличествоОстатокВБазе",,"Количество в УТ");
ДеревоОтличий.Колонки.Добавить("СуммаОстатокВБазе",,"Сумма в УТ");
ДеревоОтличий.Колонки.Добавить("КоличествоОстатокВнешний",,"Количество в БП");
ДеревоОтличий.Колонки.Добавить("СуммаОстатокВнешний",,"Сумма в БП");
ДеревоОтличий.Колонки.Добавить("Счет");
//ДеревоОтличий.Колонки.Добавить("Примечание");
