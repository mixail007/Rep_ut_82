Перем СписокТиповДокументов;

//Перем ИмяФайлаDll;
//Перем ApiClientId ;    // код нашей организации
//Перем ServerUrl ;
Перем BoxID; // код нашего ящика
Перем  CertificateThumbprint;
Перем  ПрефиксСайтаДиадок;


///
//
///

Процедура СоздатьСобытиеПоДокументу(ДокСсылка)
	ДокСобытие=Документы.Событие.СоздатьДокумент();
    ДокСобытие.ТипСобытия=Перечисления.ВходящееИсходящееСобытие.Входящее;
    ДокСобытие.ВидСобытия=Перечисления.ВидыСобытий.Прочее;
    
    ДокСобытие.ВидОбъекта= ДокСсылка.Контрагент;
    ДокСобытие.Контрагент= ДокСсылка.Контрагент;
    ДокСобытие.Основание=   ДокСсылка;
    ДокСобытие.ОписаниеСобытия  = "Согласование электронного документа";
    ДокСобытие.СодержаниеСобытия= "Требуется согласовать электронный документ";
    
    ДокСобытие.Важность=Перечисления.Важность.Высокая;
    ДокСобытие.СостояниеСобытия=Перечисления.СостоянияСобытий.Запланировано;
    ДокСобытие.НапомнитьОСобытии=Истина;
    ДокСобытие.Дата=ТекущаяДата();
    ДокСобытие.ВремяНапоминания=ТекущаяДата();
    ДокСобытие.НачалоСобытия=ТекущаяДата();
    ДокСобытие.ОкончаниеСобытия=КонецДня(ТекущаяДата());
	
	Если ЗначениеЗаполнено( ДокСсылка.Контрагент) Тогда
		
    ДокСобытие.Ответственный= ДокСсылка.Контрагент.ОсновнойМенеджерКонтрагента;
	КонецЕсли;
    
    ДокСобытие.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

	Функция ПолучитьПолныйСписокТиповДокументов()
			результат = Новый СписокЗначений;
			результат.Добавить("Any", "Все документы");
			результат.Добавить("XmlAcceptanceCertificate", "Акты");
			результат.Добавить("UniversalTransferDocument",			"УПД");
			результат.Добавить("XmlTorg12",							"Торг-12");
			результат.Добавить("Invoice", 							"Счет-фактура");

			
					
			Возврат результат;
		КонецФункции


Функция ОпределитьСтавкуНДСПоУслуге(СуммаБезНДС, СуммаНДС)
	Если СуммаБезНДС = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	расчетнаяСтавка = 100 * СуммаНДС / СуммаБезНДС;
	Если расчетнаяСтавка < 5 Тогда
		Возврат "0";
	ИначеЕсли расчетнаяСтавка < 14 Тогда
		Возврат "10";
	Иначе
		Возврат "18";
	КонецЕсли;
КонецФункции


Функция НоваяТаблицаДокументовДиадок() 
	
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
	ОписаниеТиповЧисло10 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
    	
	результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипДокумента");
	Результат.Колонки.Добавить("Продавец");
	Результат.Колонки.Добавить("Покупатель");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("ДатаУчета");
	Результат.Колонки.Добавить("Номер");
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("СуммаНДС");
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("СостояниеДокументооборота");
//	Результат.Колонки.Добавить("СостояниеСогласования");
//	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("ПервичныйДокумент");
	Результат.Колонки.Добавить("BoxID"				, ОписаниеТиповСтрока150);
//	Результат.Колонки.Добавить("CounterAgentBoxID"	, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("DocumentId"			, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("ЭДОбъект");
	результат.Колонки.Добавить("DocumentType"		, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("FileGUID"			, ОписаниеТиповСтрока150);
//	Результат.Колонки.Добавить("Подразделение");
	Результат.Колонки.Добавить("ЗначениеТипаДокумента");
	Результат.Колонки.Добавить("Ответственный");
	Результат.Колонки.Добавить("СтатусСогласования");
	Результат.Колонки.Добавить("PathUrl");

//	Результат.Колонки.Добавить("ЗначениеСостояниеДокументооборота");
//	Результат.Колонки.Добавить("Зашифрован", ОписаниеТиповБулево);

	//Результат.Колонки.Добавить("MessageId");
	//Результат.Колонки.Добавить("ПозицияСортировки");
	//Результат.Колонки.Добавить("ИндексИконкиПакета", ОписаниеТиповЧисло10);
		
    Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокТиповДокументовДиадок() Экспорт
	
	СписокТипов=	Новый СписокЗначений;
	СписокТипов.Добавить("Invoice", 							"Счет-фактура");
	СписокТипов.Добавить("InvoiceRevision", 					"Исправление СФ");
	СписокТипов.Добавить("InvoiceCorrection", 					"Корректировочный СФ");
	СписокТипов.Добавить("InvoiceCorrectionRevision", 			"Исправление КСФ");
	СписокТипов.Добавить("XmlAcceptanceCertificate", 			"Акт");
	СписокТипов.Добавить("NonformalizedAcceptanceCertificate",	"Акт (не формализованный)");
	СписокТипов.Добавить("NonformalizedProforma", 				"Счет на оплату");
	СписокТипов.Добавить("Nonformalized",						"Неформализованный документ");
	СписокТипов.Добавить("XmlTorg12",							"Торг-12");
	СписокТипов.Добавить("NonformalizedTorg12",					"Торг-12 (не формализованный)");
	СписокТипов.Добавить("Contract",							"Договор");
	СписокТипов.Добавить("ReconciliationAct",					"Акт сверки");
	СписокТипов.Добавить("ServiceDetails",						"Детализация");
	СписокТипов.Добавить("PriceListAgreement",					"Протокол согласования цены");
	СписокТипов.Добавить("CertificateRegistry",					"Реестр сертификатов");
	СписокТипов.Добавить("TrustConnectionRequest",				"Приглашение к ЭДО");
	СписокТипов.Добавить("UniversalTransferDocument",			"УПД");

	Возврат СписокТипов;
	
КонецФункции


Функция ПредставлениеПродавца(ЭДОбъект, НаименованиеЯщика=Неопределено) Экспорт
	Если ЭДОбъект.Direction = "Outbound"  Тогда 
		Возврат ?(НаименованиеЯщика=Неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
	Иначе 
		Возврат ЭДОбъект.CounterAgent.name;
	КонецЕсли;
КонецФункции

Функция ПредставлениеПокупателя(ЭДОбъект, НаименованиеЯщика=Неопределено) Экспорт
	Если ЭДОбъект.Direction = "Outbound"  Тогда 
		Возврат ЭДОбъект.CounterAgent.name;
	Иначе 
		Возврат ?(НаименованиеЯщика=Неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
	КонецЕсли;
КонецФункции


Функция ПредставлениеТипаЭД(Document) Экспорт
	
	// ТОРГ-12 в формате 551 приказа и Акт в формате 552 приказа пока не поддерживаются (DD1C-240)
	Если НРег(Лев(Document.AttachmentVersion, 8)) = "tovtorg_" Тогда
		тип= "Торг-12 (???)";
	ИначеЕсли НРег(Лев(Document.AttachmentVersion, 6)) = "rezru_" Тогда
		тип= "Акт (???)";
	ИначеЕсли Document.Type = "Invoice" Тогда
		тип= "Счет-фактура";
	ИначеЕсли Document.Type = "InvoiceRevision" Тогда
		тип= "Исправление СФ";
	ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
		тип= "Корректировочный СФ";
	ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
		тип= "Исправление КСФ";
	ИначеЕсли Найти(Document.Type, "AcceptanceCertificate")>0 Тогда 
		тип= "Акт";
	ИначеЕсли Document.Type = "NonformalizedProforma" Тогда
		тип= "Счет на оплату";
	ИначеЕсли Document.Type = "Nonformalized" Тогда
		тип= Document.fileName;		
	ИначеЕсли Найти(Document.Type, "Torg12")>0 Тогда
		тип= "Торг-12";
	ИначеЕсли Document.Type = "Contract" Тогда 
		тип= "Договор";
	ИначеЕсли Document.Type = "ReconciliationAct" Тогда 
		тип= "Акт сверки";
	ИначеЕсли Document.Type = "ServiceDetails" Тогда 
		тип= "Детализация";
	ИначеЕсли Document.Type = "PriceListAgreement" Тогда 
		тип= "Протокол согласования цены";
	ИначеЕсли Document.Type = "PriceList" Тогда 
		тип= "Ценовой лист";
	ИначеЕсли Document.Type = "CertificateRegistry" Тогда 
		тип= "Реестр сертификатов";			
	ИначеЕсли Document.Type = "TrustConnectionRequest"  Тогда 
		тип= "Приглашение к ЭДО";
	ИначеЕсли Document.Type = "SupplementaryAgreement"  Тогда 
		тип= "Доп. соглашение";			
	ИначеЕсли Document.Type = "UniversalTransferDocument"  Тогда 
		тип = ТипДокументаУПД(Document.Function);
	ИначеЕсли Document.Type = "UniversalCorrectionDocument"  Тогда 
		тип = ТипДокументаУКД(Document.Function);
	Иначе 
		тип= "???";
	КонецЕсли;
	
	Возврат тип + ПредставлениеТипаЭД_СтрокаВСкобках(Document);
	
КонецФункции


Функция ПредставлениеТипаЭД_СтрокаВСкобках(Document)
	
	Стр = "";
	Разделитель	   = "";
	
	Если Document.IsTest Тогда
		Стр = "тестовый";
		Разделитель = ", ";
	КонецЕсли;
	
	Если Document.IsEncryptedContent Тогда
		Стр = Стр + Разделитель + "зашифрован";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр) Тогда
		Стр = " ("+Стр+")";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции

	
	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ТипДокументаУКД(ФункцияУКД) Экспорт
		
		Если ФункцияУКД = "КСЧФДИС" ИЛИ ФункцияУКД = "InvoiceAndBasic" Тогда
			Возврат "УКД Ксчф Дис";
		ИначеЕсли ФункцияУКД = "ДИС" ИЛИ ФункцияУКД = "Basic" Тогда
			Возврат "УКД Дис";
		ИначеЕсли ФункцияУКД = "КСЧФ" ИЛИ ФункцияУКД = "Invoice" Тогда
			Возврат "УКД Ксчф";
		КонецЕсли;
		
	КонецФункции


Функция ПредсталениеНомераЭД(ЭДОбъект)
	Возврат ЭДОбъект.DocumentNumber;	
КонецФункции


Функция ПредставлениеСуммыНДС(Document)
	
	Если Document.Type = "InvoiceCorrection"
		ИЛИ Document.Type = "InvoiceCorrectionRevision"
		Или Document.Type = "UniversalCorrectionDocument" Тогда
		
		стрУв = ?(Окр(Document.VatInc, 2) <> 0, "+" + Формат(Окр(Document.VatInc, 2), "ЧДЦ=2"), "");
		стрУм = ?(Окр(Document.VatDec, 2) <> 0, "-" + Формат(Окр(Document.VatDec, 2), "ЧДЦ=2"), "");
		Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
			Возврат стрУв + " " + СтрУм;
		ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
			Возврат стрУв;
		Иначе
			Возврат стрУм;
		КонецЕсли;
		
	Иначе
		
		Попытка
			Возврат Формат(Окр(Document.Vat, 2), "ЧДЦ=2");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

  Функция ПредставлениеСуммы(Document)
	
	Если Document.Type = "InvoiceCorrection"
		ИЛИ Document.Type = "InvoiceCorrectionRevision"
		Или Document.Type = "UniversalCorrectionDocument" Тогда
		
		стрУв = ?(Окр(Document.TotalInc, 2) <> 0, "+" + Формат(Окр(Document.TotalInc, 2), "ЧДЦ=2"), "");
		стрУм = ?(Окр(Document.TotalDec, 2) <> 0, "-" + Формат(Окр(Document.TotalDec, 2), "ЧДЦ=2"), "");
		Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
			Возврат стрУв + " " + СтрУм;
		ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
			Возврат стрУв;
		Иначе
			Возврат стрУм;
		КонецЕсли;
		
	КонецЕсли;
		
		Попытка
			Возврат Формат(Окр(Document.Total, 2), "ЧДЦ=2");
		Исключение
		КонецПопытки;
		
	
	
КонецФункции

 Функция ЧислоИзXML(Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат 0;
	ИначеЕсли Значение = "без НДС" Тогда
		Возврат 0
	иначе	
		Возврат Число(Значение);
	КонецЕсли;
КонецФункции


Функция ПолучитьЗначениеТипаДокумента(Type)
	
	НайденныйТип=	СписокТиповДокументов.НайтиПоЗначению(Type);
	Если НЕ НайденныйТип = Неопределено Тогда
		Возврат НайденныйТип.Представление;
	Иначе
		Возврат "???";
	КонецЕсли;
	
КонецФункции


Функция НайтиКонтрагента(ИНН,Кпп)
	
	Запрос =Новый Запрос;                                 	
	       Запрос.Текст= "ВЫБРАТЬ Ссылка ИЗ	Справочник.Контрагенты ГДЕ	ИНН = &ИНН	И КПП = &КПП";
		   Запрос.УстановитьПараметр("ИНН",ИНН);
		   Запрос.УстановитьПараметр("КПП",КПП);
    Выборка=Запрос.Выполнить().Выбрать();		   
	
	Если Выборка.Следующий() Тогда
	Возврат 	Выборка.Ссылка;
	Иначе
		Возврат  Неопределено;
    КонецЕсли;
		   
КонецФункции

Функция НайтиПервичныйДокумент (docId)
	Запрос =Новый Запрос;
	 Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЭлектронныйДокумент.Ссылка
	 |ИЗ
	 |	Документ.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	 |ГДЕ
	 |	ЭлектронныйДокумент.documentId = &documentId";
	 
	 Запрос.УстановитьПараметр("documentId",docId);
	 
	 Выборка=Запрос.Выполнить().Выбрать();
	  Если Выборка.Следующий() Тогда
	Возврат 	Выборка.Ссылка;
	Иначе
		Возврат  Неопределено;
    КонецЕсли;

	 
	 
	 
КонецФункции

Процедура ЗаполнитьСтрокуТаблицыДокументовВходящих(Document, СтрокаТаблицы, НаименованиеЯщика = Неопределено, ЗаполнятьПервичныйДокумент = Истина) Экспорт
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТаблицы.ЭДОбъект = Document;
	КонецЕсли;
	
	СтрокаТаблицы.ТипДокумента 						= ПредставлениеТипаЭД(Document);
	СтрокаТаблицы.ЗначениеТипаДокумента				= ПолучитьЗначениеТипаДокумента(Document.Type);
	СтрокаТаблицы.BoxID                     		= Document.OrganizationID;
	СтрокаТаблицы.DocumentId                	  	= Document.DocumentId;
	СтрокаТаблицы.DocumentType						= Document.Type;
	СтрокаТаблицы.FileGUID							= Лев(Прав(Document.FileName, 40), 36);
	
	СтрокаТаблицы.Дата 								= ?(Document.DocumentDate < '20000101', '00010101', Document.DocumentDate);
	СтрокаТаблицы.Номер								= ПредсталениеНомераЭД(Document);
	СтрокаТаблицы.Продавец 							= ПредставлениеПродавца(Document, НаименованиеЯщика); 
	СтрокаТаблицы.Покупатель 						= ПредставлениеПокупателя(Document, НаименованиеЯщика); 
	СтрокаТаблицы.Сумма								= ПредставлениеСуммы(Document);
	СтрокаТаблицы.СостояниеДокументооборота 		= ПредставлениеСтатуса(Document);
	
	Контрагент=НайтиКонтрагента(Document.Counteragent.Inn,Document.Counteragent.Kpp);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтрокаТаблицы.Контрагент =  Контрагент;
		СтрокаТаблицы.Ответственный =Контрагент.ОсновнойМенеджерКонтрагента;
	КонецЕсли;
	
//	СтрокаТаблицы.ЗначениеСостояниеДокументооборота = СтатусДокументооборота(Document.Status, Document.RevocationStatus, Document.Direction);
	Если Лев(Document.Type, 7) = "Invoice" ИЛИ (Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) <> ТипДокументаУПД("ДОП"))Тогда
		СтрокаТаблицы.СуммаНДС= ПредставлениеСуммыНДС(Document);
		СтрокаТаблицы.Валюта=   Константы.ВалютаУправленческогоУчета.Получить();
		СтрокаТаблицы.ДатаУчета= Document.ConfirmationDate; 
	Иначе
		СтрокаТаблицы.ДатаУчета= Document.TimeStamp;
	КонецЕсли;
	
	ПервичныйДокумент= НайтиПервичныйДокумент(Document.DocumentId);
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		СтрокаТаблицы.ПервичныйДокумент =    ПервичныйДокумент;
		СтрокаТаблицы.СтатусСогласования = ПервичныйДокумент.СтатусСогласования;
		
	КонецЕсли;		
	//Если ЗаполнятьПервичныйДокумент Тогда 
	//	СтрокаТаблицы.ПервичныйДокумент= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(Document.DocumentId, Document.OrganizationId, Document);
	//КонецЕсли;	
	
КонецПроцедуры



Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции

	
Процедура ОткрытьФормуНеформализованногоДокумента(Document) Экспорт 
		
		Если Document.HasCustomPrintForm=Ложь Тогда
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ПолучитьРасширениеФайлаДиадок(Document.FileName));
			Document.SaveSenderContent(ИмяВременногоФайла);
		Иначе 
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
			
			Попытка
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			Исключение
				Сообщить("Что-то не так!");
				//СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		ЗапуститьПриложение(ИмяВременногоФайла);
		
	КонецПроцедуры

	
	//
	////////////////////////////////////////////////////// Подписание документа
	//
	
	
Функция DocumentType(Document, DocumentContent= Неопределено) Экспорт
	
	Если DocumentContent <> Неопределено И DocumentContent.Type <> "DocumentSignature" Тогда
		Возврат СтрЗаменить(СтрЗаменить(DocumentContent.Type, "Content", ""), "BuyerTitle", "");
	Иначе
		Возврат Document.Type;
	КонецЕсли;
	
КонецФункции

Функция ReplySendTask(Document, Type) Экспорт
	
	Если Document.IsLockedPackage Тогда
		Возврат Document.GetDocumentPackage().CreateReplySendTask(Type);
	Иначе
		Возврат Document.CreateReplySendTask(Type);
	КонецЕсли;
	
КонецФункции


Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции


Функция  ПредставлениеВизирующего(ПараметрыПодписания, ИНН = Неопределено)  
	
	фио =  ПараметрыПодписания.ФиоПодписанта;
	
	Official  = Новый Соответствие;
	Если ФИО = " " Тогда 
		Official.Вставить("Surname", " ");
		Official.Вставить("FirstName", " ");
		Official.Вставить("Patronymic", " ");
	Иначе 	 
		Official.Вставить("Surname", ВыделитьСлово(фио));
		Official.Вставить("FirstName", ВыделитьСлово(фио));
		Official.Вставить("Patronymic", ВыделитьСлово(фио));
	КонецЕсли;
	
	Official.Вставить("JobTitle" , ПараметрыПодписания.ДолжностьПодписанта);
	
	Если     ИНН <> Неопределено Тогда
		Official.Вставить("Inn" , ИНН);
	КонецЕсли;	
	
	Возврат   Official;
	
КонецФункции


Функция СформироватьТитулПолучателя(СтруктураПодписи, ЭДОбъект, DocumentType) Экспорт
	
	TitleInfo=	Новый Соответствие;
	
	Если DocumentType =  "XmlTorg12" Тогда
		
		Если СтруктураПодписи.ТипДатыПолучения = "ДатаПолученияГруза" Тогда
			TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
		Иначе
			TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(ЭДОбъект.DocumentDate));
		КонецЕсли;
		
		Если СтруктураПодписи.ГрузПолучил Тогда
			TitleInfo.Вставить("Receiver", ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания));
		Иначе
			TitleInfo.Вставить("Receiver", "");
		КонецЕсли;
		
		Если СтруктураПодписи.ГрузПринял Тогда
			ПараметрыПодписанияПринявшего=	Новый Соответствие;
			ПараметрыПодписанияПринявшего.Вставить("Surname", 		СтруктураПодписи.ФамилияГрузПринял);
			ПараметрыПодписанияПринявшего.Вставить("FirstName", 	СтруктураПодписи.ИмяГрузПринял);
			ПараметрыПодписанияПринявшего.Вставить("Patronymic", 	СтруктураПодписи.ОтчествоГрузПринял);
			ПараметрыПодписанияПринявшего.Вставить("JobTitle" , 	СтруктураПодписи.ДолжностьГрузПринял);
			TitleInfo.Вставить("Accepter", ПараметрыПодписанияПринявшего);
		Иначе
			TitleInfo.Вставить("Accepter", "");
			TitleInfo.Вставить("Attorney", "");
		КонецЕсли;
		
	ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда
		
		Если СтруктураПодписи.Signers.Количество() = 0 Тогда // для того, чтобы при массовом подписании не дублировались подписанты
			ExtendedSigner= СтруктураПодписи.Signers.Добавить();
			ExtendedSigner.BoxId=	ЭДОбъект.Organization.Id;
			ExtendedSigner.CertificateThumbprint= ЭДОбъект.Organization.Certificate.Thumbprint;
		КонецЕсли;
		
		Возврат СтруктураПодписи;
		
	Иначе
		TitleInfo.Вставить("SignatureDate", СтруктураПодписи.ДатаПодписания);
		TitleInfo.Вставить("Official", 		ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания));
	КонецЕсли;
	
	TitleInfo.Вставить("Signer", ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания,  СтруктураПодписи.ИНН));
	
	Если СтруктураПодписи.ПоДоверенности Тогда
		//	TitleInfo.Вставить("Attorney", СтруктурироватьСведенияОДоверенности(СтруктураПодписи));
	Иначе
		TitleInfo.Вставить("Attorney", "");
	КонецЕсли;
	
	Возврат TitleInfo;
	
КонецФункции

Функция СформироватьТитулПолучателяДляТорг12(ДатаПолученияГруза, ФИО, Должность, ИНН ) Экспорт 
	
	Torg12BuyerTitleInfo = Новый Соответствие;
	Torg12BuyerTitleInfo.Вставить("ShipmentReceiptDate", формат(ДатаПолученияГруза, "ДФ=dd.MM.yyyy"));
	
	параметрыПодписания = Новый Структура;
	параметрыПодписания.Вставить("ФиоПодписанта", фио);
	параметрыПодписания.Вставить("ДолжностьПодписанта", Должность);
	Torg12BuyerTitleInfo.Вставить("ReceivedBy",     ПредставлениеВизирующего(ПараметрыПодписания) );
	
	Signer = Новый Соответствие;
	Signer.Вставить("SignerDetails", ПредставлениеВизирующего(ПараметрыПодписания,  ИНН));
	Torg12BuyerTitleInfo.Вставить("Signer",Signer);
	
	Возврат  Torg12BuyerTitleInfo;
	
КонецФункции	

Функция СформироватьТитулПолучателяДляАкта(фио, Должность, ИНН) Экспорт 
	
	AcceptanceCertificateBuyerTitleInfo  = Новый Соответствие;
	параметрыПодписания = Новый Структура;
	параметрыПодписания.Вставить("ФиоПодписанта", фио);
	параметрыПодписания.Вставить("ДолжностьПодписанта", Должность);
	AcceptanceCertificateSignatureInfo   = Новый Соответствие;
	AcceptanceCertificateSignatureInfo.Вставить("Official",    ПредставлениеВизирующего(ПараметрыПодписания) );
	AcceptanceCertificateBuyerTitleInfo.Вставить("Signature",   AcceptanceCertificateSignatureInfo );
	Signer = Новый Соответствие;
	Signer.Вставить("SignerDetails",  ПредставлениеВизирующего(ПараметрыПодписания,  ИНН));
	AcceptanceCertificateBuyerTitleInfo.Вставить("Signer",Signer);
	
	Возврат    AcceptanceCertificateBuyerTitleInfo;
	
КонецФункции 



Процедура ЗаполнитьПодписанта(ТипSigner, Signer, BoxID, ПараметрыОтправкиНаСогласование = Неопределено) Экспорт
	
	Signer.Surname=		"Малышев";
	Signer.FirstName=	"Игорь";
	Signer.Patronymic=	"Иванович";
	Signer.JobTitle= 	"ген.директор";
	Signer.Inn= "7604069216";
	
КонецПроцедуры			

Функция ОтказатьВПодписиВДиадоке(Document, Комментарий= "", Асинхронно= Ложь) Экспорт
	
	ReplySendTask = ReplySendTask(Document, "RejectDocument");
	
	Если ReplySendTask.Content.Type = "XmlSignatureRejection" Тогда
		
		//	ПроверитьСертификат(Document.OrganizationID);
		
		ЗаполнитьПодписанта("Signer", ReplySendTask.Content.Signer, Document.OrganizationID);
		
	КонецЕсли;
	
	ReplySendTask.Content.Comment = Комментарий;
	
	Если Асинхронно Тогда
		Возврат ReplySendTask.SendAsync();
	Иначе
		ReplySendTask.Send();
	КонецЕсли;
	
КонецФункции


Процедура ПодписатьВДиадоке(Document, ReplySendTask= Неопределено, BuyerTitleInfo= Неопределено) Экспорт
	
	Если ReplySendTask = Неопределено Тогда
		Document.Accept();
	Иначе
		
		Если BuyerTitleInfo <> Неопределено Тогда
			
			//	ПроверитьСертификат(Document.OrganizationID);
			
			ЗаполнитьContent(BuyerTitleInfo, ReplySendTask.Content);
			
		КонецЕсли;
				
		
		ReplySendTask.Send();
		
	КонецЕсли;
	
КонецПроцедуры



Процедура ЗаполнитьContent(Источник, Приемник)
	
	Для каждого ЭлементИсточника Из Источник Цикл
		
		Попытка
			
			Если ЭлементИсточника.Ключ = "Signers" Тогда
				
				Для Каждого ExtendedSigner_1С ИЗ ЭлементИсточника.Значение Цикл
					
					ExtendedSigner_COM= Приемник.AddSigner();
					
					Если ЗначениеЗаполнено(ExtendedSigner_1С.BoxId) Тогда
						ExtendedSigner_COM.BoxId= 				  ExtendedSigner_1С.BoxId;
						ExtendedSigner_COM.CertificateThumbprint= ExtendedSigner_1С.CertificateThumbprint;
					Иначе
						ЗаполнитьContent(ЭлементИсточника.Значение, ExtendedSigner_COM.SignerDetails);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЭлементИсточника.Значение) = Тип("Соответствие") ИЛИ ТипЗнч(ЭлементИсточника.Значение) = Тип("Структура") Тогда
				ЗаполнитьContent(ЭлементИсточника.Значение, Приемник[ЭлементИсточника.Ключ]);
			Иначе
				Приемник[ЭлементИсточника.Ключ]=	ЭлементИсточника.Значение;
			КонецЕсли;
			
		Исключение КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры




Функция ПолучитьСтруктуруПодписи(ЭДОбъект, DocumentType, НеПоказыватьФормуТитула= Ложь, КоличествоДокументовНаПодпись= 1, ДатаПолученияПоДатеДокумента= Ложь) Экспорт
	
	Если DocumentType = "UniversalTransferDocument" Тогда 
		
		ФормаТитула= ПолучитьФорму("ФормаТитулПокупателяУПД");
		
		//ФормаТитула.Организация= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxIDDepartment_2_Организация(ЭДОбъект.OrganizationID, ЭДОбъект.Department);
		ФормаТитула.Организация= "ЗАО ""ТК Яршинторг""";
		
		ФормаТитула.BoxID= 			  ЭДОбъект.OrganizationId;
		ФормаТитула.DocumentDate= 	  ЭДОбъект.DocumentDate;
		
		//	ФормаТитула.ПредставлениеДокумента=		   ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПредставлениеЭД(ЭДОбъект);
		ФормаТитула.НеПоказыватьФормуТитула= 	   НеПоказыватьФормуТитула;
		ФормаТитула.КоличествоДокументовНаПодпись= КоличествоДокументовНаПодпись;
		
		Если ЭдОбъект.AttachmentVersion = "UniversalCorrectionDocument" Тогда 
			ФормаТитула.ДляКорректировки = Истина;
		Иначе
			ФормаТитула.ДляКорректировки = Ложь;
		КонецЕсли;	
		
		ФормаТитула.ОткрытьМодально();
		
		ДатаПолученияПоДатеДокумента= ФормаТитула.ДатаПолученияПоДатеДокумента;
		
		Если ФормаТитула.ТитулПокупателя <> Неопределено Тогда
			Возврат ФормаТитула.ТитулПокупателя;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "XmlTorg12" Тогда 
		ФормаПодписи = ПолучитьФорму("ФормаТитулПокупателя");
	Иначе 
		ФормаПодписи = ПолучитьФорму("ФормаТитулПокупателяАкт");
	КонецЕсли;
	
	ФИОПодписанта= "Малышев Игорь Иванович";//ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьФИОПодписанта(ЭДОбъект.OrganizationId);
	
	
КонецФункции



Функция ПодписатьДокумент(Document, Уточнение = "") Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("BoxId");
	ТЗ.Колонки.Добавить("CertificateThumbprint");
	
	стр=ТЗ.Добавить();
	
	
	стр.BoxId=BoxID;
	
	стр.CertificateThumbprint=CertificateThumbprint;
	
	
	//Если Document.IsLockedPackage Тогда
	//	РезультатВыполнения= ПодписатьЗалоченныйПакет(Document);
	//	Возврат НЕ РезультатВыполнения.Отказ;
	//КонецЕсли;
	
	Отказ = Ложь;
	
	
	
	//Если ЭтоФормализованныйДокумент(DocumentType) Тогда
	
	Если Истина Тогда	
		ReplySendTask= ReplySendTask(Document, "AcceptDocument");
		DocumentType=  DocumentType(Document, ReplySendTask.Content);
		
		//СтруктураПодписи= ПолучитьМодульПрог("Форма_Основная_Логика").ПолучитьСтруктуруПодписи(Document, DocumentType);
		//СтруктураПодписи= ПолучитьСтруктуруПодписи(Document, DocumentType);
		//
		//Если СтруктураПодписи <> Неопределено И СтруктураПодписи <> Ложь Тогда
		
		//	BuyerTitleInfo= СформироватьТитулПолучателя(СтруктураПодписи, Document, DocumentType);
		BuyerTitleInfo = Новый Структура;
		BuyerTitleInfo.Вставить("Creator","ЗАО ТК ""ЯРШИНТОРГ""");
		BuyerTitleInfo.Вставить("CreatorBase",Неопределено);
		BuyerTitleInfo.Вставить("OperationCode","");
		//+++07.12.2018
		Если ПустаяСтрока(Уточнение) тогда
			BuyerTitleInfo.Вставить("OperationContent","Товары и услуги получены, работы приняты");
		иначе			
			BuyerTitleInfo.Вставить("OperationContent",Уточнение);			
		КонецЕсли;
		//---07.12.2018     		
		BuyerTitleInfo.Вставить("AcceptanceDate",НачалоДня(ТекущаяДата()));
		BuyerTitleInfo.Вставить("AdditionalInfoId",Неопределено);
		
		BuyerTitleInfo.Вставить("Signers",ТЗ);
		
		соотв=Новый Соответствие;
		соотв.Вставить("_Signers_SignerDetails","Новый_ExtendedSignerDetails");
		
		BuyerTitleInfo.Вставить("Конструкторы",соотв);
		
		
		
		ПодписатьВДиадоке(Document, ReplySendTask, BuyerTitleInfo);
		//Иначе 
		//	Отказ = Истина;
		//	КонецЕсли;	 
		
	КонецЕсли;
КонецФункции


// Окончание подписания документа


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ИмяФайла = "D:\Temp\AddInDiadocAPI.dll";
	ИмяФайла = "D:\Diadoc_5_19_4_289.dll";
	ЗагрузитьВнешнююКомпоненту(ИмяФайла);
	
	//Создание объекта DiadocInvoiceAPI
	ДиадокАПИ_ = Новый("AddIn.DiadocInvoiceAPI");
	ДиадокАПИ  = ДиадокАпи_.CreateObject();
	
	ДиадокАпи.ApiClientId =ApiClientId; //"yst-0b3e59aa-3d04-4e13-8b16-1e45c7a0abec";
	ДиадокАпи.ServerUrl   = ServerUrl;//  "https://diadoc-api.kontur.ru:443";
	
	Certificates = ДиадокАПИ.GetPersonalCertificates(ложь);
	СертификатНайден=Ложь;
	Для сч=0 по Certificates.Count-1 Цикл
		PersonalCertificate = Certificates.GetItem(сч).Thumbprint;
		;
		// Certificates.GetItem(2).Author 
	КонецЦикла;	
	//PersonalCertificate = Certificates.GetItem(2).Thumbprint;
	ДиадокСоединение = ДиадокАПИ.CreateConnectionByCertificate(PersonalCertificate);
	
	OrganizationList = ДиадокСоединение.GetOrganizationList();
	Если OrganizationList.Count() > 0 Тогда
		Organization = OrganizationList.GetItem(0);
		Сообщить( Organization.Name);
	Иначе
		ВызватьИсключение("Нет доступных организаций");
	КонецЕсли;
	
	DocumentsTask = Organization.GetDocumentsTask();
	DocumentsTask.FromDocumentDate  = НачПериода;
	DocumentsTask.ToDocumentDate = КонПериода;
	DocumentsTask.Category = "Any.Inbound";
	//DocumentsTask.Category = "XmlAcceptanceCertificate.Inbound";
	//DocumentsTask.Category = "UniversalTransferDocument.Inbound";
	//DocumentsTask.Category = "Invoice.Inbound";
	
	DocumentList = DocumentsTask.GetDocuments();
	
	сч= 0;
	ТаблицаДокументовДиадок= НоваяТаблицаДокументовДиадок(); 
	
	
	DocumentsTask.Category = "Any.Inbound";
	
	Сообщить("===================Any.Inbound  =======================");
	Пока сч < DocumentList.Count Цикл
		Document = DocumentList.GetItem(сч);
		Сообщить("Документ №" + Document.DocumentNumber + " от " + Document.DocumentDate +" "+DocumentType(Document)+" "+ ПредставлениеПродавца(Document)+" "+Document.documentId);
		НоваяСтрока= ТаблицаДокументовДиадок.Добавить();
		
		ЗаполнитьСтрокуТаблицыДокументовВходящих(Document, НоваяСтрока, Неопределено, Ложь);
		
		сч=сч+1 ;
	КонецЦикла;
	ТаблицаДокументовДиадок.ВыбратьСтроку();
	Возврат;
	
	//DocumentsTask.Category = "XmlAcceptanceCertificate.Inbound";
	
	//Сообщить("===================XmlAcceptanceCertificate.Inbound  (Акт.)=======================");
	//Пока сч < DocumentList.Count Цикл
	//  Document = DocumentList.GetItem(сч);
	//  Сообщить("Акт №" + Document.DocumentNumber + " от " + Document.DocumentDate + ПредставлениеПродавца(Document)+" "+Document.documentId);
	//  
	//  НоваяСтрока= ТаблицаДокументовДиадок.Добавить();
	
	//			ЗаполнитьСтрокуТаблицыДокументовВходящих(Document, НоваяСтрока, Неопределено, Ложь);
	//  //  		Сообщить(ПолучитьЗначениеТипаДокумента(Document.Type));
	//   cnt=Document.GetContent();		
	//   имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
	//		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
	//		Сообщить(имяФайла_ТитулОтправителя);
	
	//   //Счет=0;
	//   //Пока Счет < cnt.InvoiceTable.Items.Count Цикл
	//   //	Item = cnt.InvoiceTable.Items.GetItem(Счет);
	//   //	
	//   //	Сообщить(Item.Product + cnt.TransferInfo.OperationInfo );
	//   //	
	//   //	Счет = Счет + 1;
	//   //КонецЦикла;
	//  
	//  сч = сч + 1;
	//  ОткрытьФормуНеформализованногоДокумента(Document);
	//КонецЦикла;
	
	//Сообщить("===================UniversalTransferDocument.Inbound (УПД Сч.ф. доп.)=======================") ;
	//DocumentsTask.Category = "UniversalTransferDocument.Inbound";
	
	//DocumentList = DocumentsTask.GetDocuments();
	
	//сч= 0;
	
	//Пока сч < DocumentList.Count Цикл
	//  Document = DocumentList.GetItem(сч);
	//  Сообщить("Акт №" + Document.DocumentNumber + " от " + Document.DocumentDate + ПредставлениеПродавца(Document)+" "+Document.documentId);
	//  
	//   имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
	//		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
	//		Сообщить(имяФайла_ТитулОтправителя);
	//   
	//  сч = сч + 1;
	//   ОткрытьФормуНеформализованногоДокумента(Document);
	//КонецЦикла;
	
	Сообщить("===================XmlTorg12.Inbound (Торг-12)=======================") ;
	DocumentsTask.Category = "XmlTorg12.Inbound";
	
	DocumentList = DocumentsTask.GetDocuments();
	
	Document=Organization.GetDocumentById("db4c350c-77f4-4baa-9e31-c4a6f564b724fe3f6f31-8220-4590-a01c-25af99bced91");
	Сообщить("Накладная №" + Document.DocumentNumber + " от " + Document.DocumentDate + ПредставлениеПродавца(Document)+" "+Document.documentId);
	
	сч= 0;
	
	Пока сч < DocumentList.Count Цикл
		Document = DocumentList.GetItem(сч);
		//Если (Document.documentId="db4c350c-77f4-4baa-9e31-c4a6f564b724fe3f6f31-8220-4590-a01c-25af99bced91") Тогда
		//Сообщить("Накладная №" + Document.DocumentNumber + " от " + Document.DocumentDate + ПредставлениеПродавца(Document)+" "+Document.documentId);
		//ПодписатьДокумент(Document);
		//КонецЕсли;
		
		имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
		Сообщить(имяФайла_ТитулОтправителя);
		
		сч = сч + 1;
		// ОткрытьФормуНеформализованногоДокумента(Document);
	КонецЦикла;
	
	
	
	//ТаблицаДокументовДиадок.ВыбратьСтроку();
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	ЭтаФорма.НачПериода=    НачалоМесяца(ТекущаяДата());
	ЭтаФорма.КонПериода=    КонецМесяца(ТекущаяДата());
	СписокТиповДокументов=		ПолучитьСписокТиповДокументовДиадок();
	ОсновныеДействияФормыДействиеЗаполнить(Неопределено);
	НастроитьСписокВыбораТипов();
	НастроитьСписокДокументооборота();
	НастроитьСтатусы1С();
	ВЧерновик = истина;
	
	
	
КонецПроцедуры

Процедура НастроитьСписокВыбораТипов()
	СписокВыбораТипов = ПолучитьПолныйСписокТиповДокументов();
	Для каждого эл из СписокВыбораТипов цикл 
		Элементыформы.ТипыДокументов.СписокВыбора.Добавить(эл.Значение, сокрЛП(Эл.Представление));
	КонецЦикла;	
	
	//ТипыДокументов = ВосстановитьЗначение("ТипыДокументовОсновнаяФормаДиадок");
	//ТипыДокументов = ?(ТипыДокументов = Неопределено, 0, ТипыДокументов);
КонецПроцедуры	

Процедура НастроитьСписокДокументооборота()
	ЭлементыФормы.СписокДокументооборота.СписокВыбора.Очистить();
	
	
	Для каждого статус из	СтатусыДокументовДиадокВходящие() Цикл
		ЭлементыФормы.СписокДокументооборота.СписокВыбора.Добавить(статус.Ключ, статус.Значение);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура НастроитьСтатусы1С()
	
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Очистить();
	
	
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Добавить("Все");
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Добавить(Перечисления.СостоянияОбъектов.Подготовлен);
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Добавить(Перечисления.СостоянияОбъектов.Согласован);
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Добавить(Перечисления.СостоянияОбъектов.Отклонен);
	ЭлементыФормы.СписокСтатусов1С.СписокВыбора.Добавить(Перечисления.СостоянияОбъектов.Утвержден);
	
	
КонецПроцедуры





Процедура ОсновныеДействияФормыДействиеПодписать(Кнопка)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст =  "ru = ""Подписать выделенные документы?"";"
	+ " en = ""Do you want to continue?""";;
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	Organization= ПодготовитьИВернутьОрганизациюCom();
	Для каждого стр ИЗ ТаблицаДокументовВходящих Цикл
		Если стр.Вкл Тогда
			
			Document=Organization.GetDocumentById(стр.DocumentId);
			BoxID = стр.BoxID;
			попытка
				CertificateThumbprint =  Organization.Certificate.Thumbprint;
			исключение
			КонецПопытки;
			//+++Шарафутдинов 07.12.2018
			Уточнение = "";
			ЕСли ЗначениеЗаполнено(стр.ПервичныйДокумент) тогда
				Если не ПустаяСтрока(СокрЛП(стр.ПервичныйДокумент.Уточнение)) тогда
					Уточнение = СокрЛП(стр.ПервичныйДокумент.Уточнение);
				КонецЕсли;
			КонецЕсли;
			//---Шарафутдинов 07.12.2018
			ПодписатьДокумент( Document, Уточнение);
			стр.СостояниеДокументооборота ="Подписан";
			
		КонецЕсли;
	КонецЦикла;
	
	
	
КонецПроцедуры



Процедура ОсновныеДействияФормыДействиеЗаполнить(Кнопка)
	
	ТаблицаДокументовВходящих.Очистить();	
	Organization= ПодготовитьИВернутьОрганизациюCom();
	DocumentsTask = Organization.GetDocumentsTask();
	DocumentsTask.FromDocumentDate  = НачПериода;
	DocumentsTask.ToDocumentDate = КонПериода;
	
	ТипДокумента = ?(ЗначениеЗаполнено(ТипыДокументов) , ТипыДокументов  ,"Any") ;
	
	
	
	Если ЗначениеЗаполнено(СписокДокументооборота) Тогда 
		DocumentsTask.Category =ТипДокумента+ "."+СписокДокументооборота;
	Иначе
		DocumentsTask.Category = ТипДокумента+".Inbound";
	Конецесли;	
	
	
	//
	//
	//Получить связанные документы можно через коллекции Document.InitialDocumentIds и Document.SubordinateDocumentIds
	//Получить печатную форму документа в формате pdf можно методом Document.GetPrintForm()
	
	//
	
	сч= 0;
	ТаблицаДокументовДиадок= НоваяТаблицаДокументовДиадок(); 
	
	DocumentList = DocumentsTask.GetDocuments();
	Пока сч < DocumentList.Count Цикл
		Document = DocumentList.GetItem(сч);
		
		НоваяСтрока= ТаблицаДокументовДиадок.Добавить();
		
		ЗаполнитьСтрокуТаблицыДокументовВходящих(Document, НоваяСтрока, Неопределено, Ложь);
		Попытка
			НоваяСтрока.PathUrl=Document.PathUrl;
		Исключение
		КонецПопытки;
		
		
		//Если (Document.type=	"XmlAcceptanceCertificate" ИЛИ Document.type=	"XmlTorg12" ) Тогда				
		//	Если (Document.SubordinateDocumentIds.Count>0)     Тогда
		//		relatedDocId=Document.SubordinateDocumentIds.GetItem(0);
		//		RelatedDocument=Organization.GetDocumentById(relatedDocId);
		//		Сообщить(RelatedDocument.type);
		//		Если(RelatedDocument.HasCustomPrintForm) Тогда
		//			ОткрытьФормуНеформализованногоДокумента(RelatedDocument);
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		//Если(Document.HasCustomPrintForm) Тогда
		//	  ОткрытьФормуНеформализованногоДокумента(Document);
		//КонецЕсли;	
		
		сч=сч+1 ;
	КонецЦикла;
	
	
		
	ТаблицаДокументовВходящих.Загрузить(ТаблицаДокументовДиадок);
	
	ЭлементыФормы.НадписьВерсия.Заголовок = "Версия компоненты: " +  ЭтотОбъект.ВерсияКомпоненты;
	
КонецПроцедуры



Функция ПолучитьСтруктуруСодержанияДокумента(Document, DocumentContent) Экспорт
	
	//	TO-DO: В связи с тем что у функции появлися входящий параметр DocumentContent,
	//		   нужно SaveSenderContent() переписать на DocumentContent по аналогии с тем как это сделано с XmlTorg12Content. 
	
	Если DocumentContent.Type = "XmlTorg12Content" Тогда
		
		стДокумент= Новый Структура("Document, Type, Items", Document, "XmlTorg12");
		
		тзТабличнаяЧасть = Новый ТаблицаЗначений();
		тзТабличнаяЧасть.Колонки.Добавить("Name");
		тзТабличнаяЧасть.Колонки.Добавить("Code");
		тзТабличнаяЧасть.Колонки.Добавить("NomenclatureArticle");
		тзТабличнаяЧасть.Колонки.Добавить("Quantity");
		тзТабличнаяЧасть.Колонки.Добавить("UnitCode");
		тзТабличнаяЧасть.Колонки.Добавить("UnitName");
		тзТабличнаяЧасть.Колонки.Добавить("Price");
		тзТабличнаяЧасть.Колонки.Добавить("SubtotalWithVatExcluded");
		тзТабличнаяЧасть.Колонки.Добавить("Vat");
		тзТабличнаяЧасть.Колонки.Добавить("Subtotal");
		тзТабличнаяЧасть.Колонки.Добавить("TaxRate");
		
		Items= DocumentContent.Items;
		Для Ц=0 по Items.Count()-1 Цикл
			
			Item= Items.GetItem(Ц);
			
			НоваяСтрока= тзТабличнаяЧасть.Добавить();
			
			НоваяСтрока.Name= 		СокрЛП(Item.Product);
			НоваяСтрока.Code= 		СокрЛП(Item.ProductCode);
			НоваяСтрока.NomenclatureArticle= ?(ЗначениеЗаполнено(Item.Article), Item.Article, Неопределено);
			НоваяСтрока.UnitCode= 	Item.UnitCode; 
			НоваяСтрока.UnitName= 	Item.UnitName; 
			НоваяСтрока.Quantity= 	Item.Quantity;
			НоваяСтрока.Price= 		Item.Price;
			НоваяСтрока.SubtotalWithVatExcluded= Item.TotalWithVatExcluded;
			НоваяСтрока.Vat= 		Item.vat;
			НоваяСтрока.Subtotal= 	Item.Total;
			НоваяСтрока.TaxRate= 	?(Item.TaxRate=Неопределено, "", Item.TaxRate);
			
		КонецЦикла;
		
		Если НЕ (ЗначениеЗаполнено(DocumentContent.GroundDate) ИЛИ ЗначениеЗаполнено(DocumentContent.GroundNumber) ИЛИ ЗначениеЗаполнено(DocumentContent.GroundName)) Тогда
			стДокумент.Вставить("ДатаДоговора", 		"");
			стДокумент.Вставить("НомерДоговора", 		"");
			стДокумент.Вставить("НаименованиеДоговора", "");
		Иначе
			стДокумент.Вставить("ДатаДоговора", 		DocumentContent.GroundDate);
			стДокумент.Вставить("НомерДоговора",		DocumentContent.GroundNumber);
			стДокумент.Вставить("НаименованиеДоговора", DocumentContent.GroundName);
		КонецЕсли;
		
		стДокумент.Вставить("Shipper",		DocumentContent.Shipper); 	//грузоотправитель
		стДокумент.Вставить("Consignee",	DocumentContent.Consignee);	//грузополучатель
		
		стДокумент.Items = тзТабличнаяЧасть;
		стДокумент.Вставить("total", Document.Total);
		стДокумент.Вставить("vat", Document.Vat);
		
		Возврат стДокумент;
		
	ИначеЕсли DocumentContent.Type = "XmlAcceptanceCertificateContent" Тогда
		
		стДокумент = Новый Структура("Document, Type, Items", Document, "XmlAcceptanceCertificate");
		
		тзТабличнаяЧасть = Новый ТаблицаЗначений();
		тзТабличнаяЧасть.Колонки.Добавить("Name");
		тзТабличнаяЧасть.Колонки.Добавить("Code");
		тзТабличнаяЧасть.Колонки.Добавить("NomenclatureArticle");
		тзТабличнаяЧасть.Колонки.Добавить("Quantity");
		тзТабличнаяЧасть.Колонки.Добавить("UnitCode");
		тзТабличнаяЧасть.Колонки.Добавить("UnitName");
		тзТабличнаяЧасть.Колонки.Добавить("Price");
		тзТабличнаяЧасть.Колонки.Добавить("SubtotalWithVatExcluded");
		тзТабличнаяЧасть.Колонки.Добавить("Vat");
		тзТабличнаяЧасть.Колонки.Добавить("Subtotal");
		тзТабличнаяЧасть.Колонки.Добавить("TaxRate");
		
		
		имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
		//имяФайла_ТитулПолучателя = ПолучитьИмяВременногоФайла("xml");
		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
		//Document.SaveRecipientContent(имяФайла_ТитулПолучателя);
		
		
		
		выборка = Новый ЧтениеXML;
		выборка.ОткрытьФайл(имяФайла_ТитулОтправителя);
		
		стр = Неопределено;
		пока выборка.Прочитать() цикл 
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("Работа")) Тогда 
				//пришли на строку 
				стр = тзТабличнаяЧасть.Добавить();
				
				стр.Name = выборка.ЗначениеАтрибута("НаимРабот");
				стр.Code = "";
				
				стр.UnitCode = выборка.ЗначениеАтрибута("ОКЕИ");
				стр.UnitName = выборка.ЗначениеАтрибута("НаимЕдИзм");
				стр.Quantity = ЧислоИзXML(выборка.ЗначениеАтрибута("Количество"));
				стр.Price = ЧислоИзXML(выборка.ЗначениеАтрибута("Цена"));
				стр.SubtotalWithVatExcluded = ЧислоИзXML(выборка.ЗначениеАтрибута("СумБезНДС"));
				стр.Vat = ЧислоИзXML(выборка.ЗначениеАтрибута("СумНДС"));
				стр.Subtotal = ЧислоИзXML(выборка.ЗначениеАтрибута("СумУчНДС"));
				стр.TaxRate = ОпределитьСтавкуНДСПоУслуге(ЧислоИзXML(стр.SubtotalWithVatExcluded), ЧислоИзXML(?(ЗначениеЗаполнено(стр.Vat), стр.Vat, 0)));
				
				Если стр.TaxRate = "0" Тогда
					стр.TaxRate = ""; //для того, чтобы выводилась ставка "Без НДС"
				КонецЕсли;
				
			ИначеЕсли  (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и (врег(выборка.имя) = врег("Описание")) Тогда 
				выборка.Прочитать();
				Если (выборка.ТипУзла =  ТипУзлаXML.Текст) Тогда 
					Если ПустаяСтрока(стр.Name) Тогда
						стр.Name = выборка.Значение;
						стр.Code = "";
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли (выборка.ТипУзла =   ТипУзлаXML.КонецЭлемента) и (врег(выборка.имя) = врег("Работа")) Тогда
				стр = Неопределено;
			КонецЕсли;
		КонецЦикла;	
		
		стДокумент.Вставить("ДатаДоговора","");
		стДокумент.Вставить("НомерДоговора","");
		стДокумент.Вставить("НаименованиеДоговора","");
		
		стДокумент.Items = тзТабличнаяЧасть;
		стДокумент.Вставить("total", Document.total);
		стДокумент.Вставить("vat", Document.vat);
		
		Возврат стДокумент;
		
	ИначеЕсли Лев(DocumentContent.Type, 7) = "Invoice" Тогда
		
		стДокумент = Новый Структура("Document, Type, Items", Document, "Invoice");
		
		тзТабличнаяЧасть = Новый ТаблицаЗначений();
		тзТабличнаяЧасть.Колонки.Добавить("LineNumber");
		тзТабличнаяЧасть.Колонки.Добавить("Name");
		тзТабличнаяЧасть.Колонки.Добавить("Code");
		тзТабличнаяЧасть.Колонки.Добавить("NomenclatureArticle");
		тзТабличнаяЧасть.Колонки.Добавить("Quantity");
		тзТабличнаяЧасть.Колонки.Добавить("UnitCode");
		тзТабличнаяЧасть.Колонки.Добавить("UnitName");
		тзТабличнаяЧасть.Колонки.Добавить("Price");
		тзТабличнаяЧасть.Колонки.Добавить("SubtotalWithVatExcluded");
		тзТабличнаяЧасть.Колонки.Добавить("Vat");
		тзТабличнаяЧасть.Колонки.Добавить("Subtotal");
		тзТабличнаяЧасть.Колонки.Добавить("TaxRate");
		тзТабличнаяЧасть.Колонки.Добавить("CountryCode");
		тзТабличнаяЧасть.Колонки.Добавить("TDNumber");
		
		имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
		выборка = Новый ЧтениеXML;
		выборка.ОткрытьФайл(имяФайла_ТитулОтправителя);
		
		пока выборка.Прочитать() цикл 
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("СведТов")) Тогда 
				//пришли на строку 
				стр = тзТабличнаяЧасть.Добавить();
				
				стр.LineNumber = выборка.ЗначениеАтрибута("НомСтр");
				стр.Name = выборка.ЗначениеАтрибута("НаимТов");
				стр.Code = выборка.ЗначениеАтрибута("КодТов");
				стр.NomenclatureArticle = выборка.ЗначениеАтрибута("АртикулТов");
				стр.UnitCode = выборка.ЗначениеАтрибута("ОКЕИ_Тов");
				стр.UnitName = выборка.ЗначениеАтрибута("НаимЕдИзм");
				стр.Quantity = ЧислоИзXML(СокрЛП(выборка.ЗначениеАтрибута("КолТов")));
				стр.Price = ЧислоИзXML(выборка.ЗначениеАтрибута("ЦенаТов"));
				стр.SubtotalWithVatExcluded = ЧислоИзXML(выборка.ЗначениеАтрибута("СтТовБезНДС"));
				стр.Subtotal = ЧислоИзXML(выборка.ЗначениеАтрибута("СтТовУчНал"));
				стр.Vat = ЧислоИзXML(Выборка.ЗначениеАтрибута("СумНДС"));
				стр.TaxRate = выборка.ЗначениеАтрибута("НалСт");
			КонецЕсли;
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("НалСт")) Тогда 
				Выб = Выборка;
				Выб.Прочитать();
				стр.TaxRate = выборка.ЗначениеАтрибута("НалСтВел");
			КонецЕсли;
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("СумНал")) Тогда
				Выб = Выборка;
				Выб.Прочитать();
				стр.Vat = ЧислоИзXML(Выборка.ЗначениеАтрибута("СумНДС"));
			КонецЕсли;
			Если (Выборка.ТипУзла = ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("СвТД")) Тогда 
				Стр.TDNumber 	= Выборка.ЗначениеАтрибута("НомерТД");
				Стр.CountryCode = Выборка.ЗначениеАтрибута("КодПроисх");
			КонецЕсли;
			Если (Выборка.ТипУзла = ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("ДопСведТов")) Тогда 
				стр.UnitName = выборка.ЗначениеАтрибута("НаимЕдИзм");
				стр.Code = выборка.ЗначениеАтрибута("КодТов");
			КонецЕсли;
		КонецЦикла;	
		
		стДокумент.Вставить("ДатаДоговора","");
		стДокумент.Вставить("НомерДоговора","");
		стДокумент.Вставить("НаименованиеДоговора","");	
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		Возврат стДокумент;
		
	ИначеЕсли DocumentContent.Type = "UniversalTransferDocument" Тогда
		
		стДокумент = Новый Структура("Document, Type, Items", Document, "UniversalTransferDocument");
		
		тзТабличнаяЧасть = Новый ТаблицаЗначений();
		тзТабличнаяЧасть.Колонки.Добавить("LineNumber");
		тзТабличнаяЧасть.Колонки.Добавить("Name");
		тзТабличнаяЧасть.Колонки.Добавить("Code");
		тзТабличнаяЧасть.Колонки.Добавить("NomenclatureArticle");
		тзТабличнаяЧасть.Колонки.Добавить("Quantity");
		тзТабличнаяЧасть.Колонки.Добавить("UnitCode");
		тзТабличнаяЧасть.Колонки.Добавить("UnitName");
		тзТабличнаяЧасть.Колонки.Добавить("Price");
		тзТабличнаяЧасть.Колонки.Добавить("SubtotalWithVatExcluded");
		тзТабличнаяЧасть.Колонки.Добавить("Vat");
		тзТабличнаяЧасть.Колонки.Добавить("Subtotal");
		тзТабличнаяЧасть.Колонки.Добавить("TaxRate");
		тзТабличнаяЧасть.Колонки.Добавить("CountryCode");
		тзТабличнаяЧасть.Колонки.Добавить("TDNumber");
		
		имяФайла_ТитулОтправителя = ПолучитьИмяВременногоФайла("xml");
		Document.SaveSenderContent(имяФайла_ТитулОтправителя);
		выборка = Новый ЧтениеXML;
		выборка.ОткрытьФайл(имяФайла_ТитулОтправителя);
		
		пока выборка.Прочитать() цикл 
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("СведТов")) Тогда 
				//пришли на строку 
				стр = тзТабличнаяЧасть.Добавить();
				
				стр.LineNumber = выборка.ЗначениеАтрибута("НомСтр");
				стр.Name = выборка.ЗначениеАтрибута("НаимТов");
				стр.Code = выборка.ЗначениеАтрибута("КодТов");
				стр.NomenclatureArticle = выборка.ЗначениеАтрибута("АртикулТов");
				стр.UnitCode = выборка.ЗначениеАтрибута("ОКЕИ_Тов");
				стр.UnitName = выборка.ЗначениеАтрибута("НаимЕдИзм");
				стр.Quantity = ЧислоИзXML(СокрЛП(выборка.ЗначениеАтрибута("КолТов")));
				стр.Price = ЧислоИзXML(выборка.ЗначениеАтрибута("ЦенаТов"));
				стр.SubtotalWithVatExcluded = ЧислоИзXML(выборка.ЗначениеАтрибута("СтТовБезНДС"));
				стр.Subtotal = ЧислоИзXML(выборка.ЗначениеАтрибута("СтТовУчНал"));
				стр.Vat = ЧислоИзXML(Выборка.ЗначениеАтрибута("СумНДС"));
				стр.TaxRate = выборка.ЗначениеАтрибута("НалСт");
			КонецЕсли;
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("НалСт")) Тогда 
				Выб = Выборка;
				Выб.Прочитать();
				стр.TaxRate = выборка.ЗначениеАтрибута("НалСтВел");
			КонецЕсли;
			Если (выборка.ТипУзла =   ТипУзлаXML.НачалоЭлемента) и   (врег(выборка.имя) = врег("СумНал")) Тогда
				Выб = Выборка;
				Выб.Прочитать();
				Выб.Прочитать();
				Если Выб.ИмеетЗначение Тогда
					стр.Vat= ЧислоИзXML(Выб.Значение);
				КонецЕсли;
			КонецЕсли;
			Если (Выборка.ТипУзла = ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("СвТД")) Тогда 
				
				Если ЗначениеЗаполнено(Стр.TDNumber) Тогда
					
					// Коллекция различных номеров ГТД в одной товарной строке не поддерживается в типовыми конфигурациями 1С.
					Если Стр.TDNumber <> Выборка.ЗначениеАтрибута("НомерТД") Тогда
						Стр.TDNumber= 	 Неопределено;
						Стр.CountryCode= Неопределено;
					КонецЕсли;
					
				Иначе
					Стр.TDNumber= 	 Выборка.ЗначениеАтрибута("НомерТД");
					Стр.CountryCode= Выборка.ЗначениеАтрибута("КодПроисх");
				КонецЕсли;
				
			КонецЕсли;
			Если (Выборка.ТипУзла = ТипУзлаXML.НачалоЭлемента) И (Врег(Выборка.Имя) = Врег("ДопСведТов")) Тогда 
				стр.UnitName = выборка.ЗначениеАтрибута("НаимЕдИзм");
				стр.Code = выборка.ЗначениеАтрибута("КодТов");
			КонецЕсли;
		КонецЦикла;	
		
		стДокумент.Вставить("ДатаДоговора","");
		стДокумент.Вставить("НомерДоговора","");
		стДокумент.Вставить("НаименованиеДоговора","");	
		
		стДокумент.Вставить("total", Document.total);
		стДокумент.Вставить("vat"  , Document.vat);
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		Возврат стДокумент;
		
	ИначеЕсли DocumentContent.Type = "UniversalCorrectionDocument" Тогда
		ВызватьИсключение "Создание УКД не предусмотрено!";
	Иначе
		ВызватьИсключение "Неизвестный Type объекта Document: """ + DocumentContent.Type + """";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтавкуНДСИзСтроки(строкаНДС)
	Если строкаНДС="18%" Тогда
		Возврат (Перечисления.СтавкиНДС.НДС18);	
	ИначеЕсли строкаНДС="без НДС" Тогда
		Возврат (Перечисления.СтавкиНДС.БезНДС);	
	КонецЕсли;	
	Возврат Перечисления.СтавкиНДС.НДС18;
	
КонецФункции

Функция НайтиНоменклатуруИзАртикула(Контрагент, Артикул)
	
	Запрос =Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Номенклатура ГДЕ ОсновнойПоставщик = &ОсновнойПоставщик И Артикул = &Артикул";
	
	Запрос.УстановитьПараметр("ОсновнойПоставщик",Контрагент);			 
	Запрос.УстановитьПараметр("Артикул",Артикул);	
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.Номенклатура.ПустаяСсылка();
КонецФункции	


Процедура ЗаполнитьДокументИзСтруктуры(Документ, структура, стр)
	
	
	Документ.documentId	= стр.documentId;
	
	Документ.Дата = стр.Дата;
	Документ.КонтрагентСтрока = стр.Продавец;//ПредставлениеПродавца(Document);
	Документ.Контрагент=стр.Контрагент;
	Документ.НомерВходящегоДокумента= стр.Номер;
	Документ.ТипДокументаСтрока=стр.ТипДокумента;
	Документ.СуммаДокумента=стр.Сумма;
	Документ.СуммаНДС=?(структура.Свойство("vat"), структура["vat"],стр.СуммаНдс);
	Документ.ТипДокумента= стр.DocumentType;
	Документ.СтатусСогласования = Перечисления.СостоянияОбъектов.Подготовлен;
	
	
	Если ЗначениеЗаполнено(Документ.Контрагент) Тогда
		Документ.ОсновнойМенеджер = Документ.Контрагент.ОсновнойМенеджерКонтрагента;
	Конецесли;
	
	
	
	Если (стр.DocumentType="XmlTorg12" ИЛИ стр.DocumentType="UniversalTransferDocument" ) Тогда
		Для каждого строка из структура.Items Цикл
			строкаДок=Документ.Товары.Добавить();
			строкаДок.НоменклатураСтрока= строка.Name;
			строкаДок.АртикулПоставщика = строка.Code;
			строкаДок.Номенклатура = НайтиНоменклатуруИзАртикула(стр.Контрагент,строка.Code );
			строкаДок.Количество= строка.Quantity;
			строкаДок.Цена= строка.Price;
			строкаДок.Сумма= строка.Subtotal;
			строкаДок.СтавкаНДС=ПолучитьСтавкуНДСИзСтроки(строка.TaxRate);					
		КонецЦикла;	
	ИначеЕсли  (стр.DocumentType="XmlAcceptanceCertificate") Тогда
		Для каждого строка из структура.Items Цикл
			строкаДок=Документ.Услуги.Добавить();
			строкаДок.НоменклатураСтрока= строка.Name;
			строкаДок.Количество= строка.Quantity;
			строкаДок.Цена= строка.Price;
			строкаДок.Сумма= строка.Subtotal;
			
			строкаДок.СтавкаНДС=ПолучитьСтавкуНДСИзСтроки(строка.TaxRate);
			
		КонецЦикла;	
		
		
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ОсновныеДействияФормыДействиеЗагрузить(Кнопка)
	
	Organization= ПодготовитьИВернутьОрганизациюCom();
	Для каждого стр ИЗ ТаблицаДокументовВходящих Цикл
		Если стр.Вкл Тогда
			
			Если ЗначениеЗаполнено(НайтиПервичныйДокумент(стр.DocumentId)) Тогда
				Продолжить;
			КонецЕсли;	
			Document=Organization.GetDocumentById(стр.DocumentId);
			
			//Если (Document.type=	"XmlAcceptanceCertificate" ИЛИ Document.type=	"XmlTorg12" ) Тогда				
			//			Если (Document.SubordinateDocumentIds.Count>0)     Тогда
			//				relatedDocId=Document.SubordinateDocumentIds.GetItem(0);
			//				RelatedDocument=Organization.GetDocumentById(relatedDocId);
			//				Сообщить(RelatedDocument.type);
			//				
			//			КонецЕсли;
			//		КонецЕсли;
			
			//  Возврат;   
			cnt=Document.GetContent();		
			
			Структура = ПолучитьСтруктуруСодержанияДокумента(Document,cnt);
			
			ДокументОбъект = Документы.ЭлектронныйДокумент.СоздатьДокумент();
			
			ЗаполнитьДокументИзСтруктуры(ДокументОбъект,Структура,стр);
			
			Попытка
				ДокументОбъект.PathUrl=Document.PathUrl;
			Исключение
			КонецПопытки;
			ДокументОбъект.Записать();
			стр.ПервичныйДокумент=ДокументОбъект.Ссылка;
			СоздатьСобытиеПоДокументу(стр.ПервичныйДокумент)
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеУдалить(Кнопка)
	ВыбДокумент.ПолучитьОбъект().Удалить();
	
КонецПроцедуры

Процедура СписокДокументооборотаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(СписокСтатусов1С) И Строка(СписокСтатусов1С)<>"Все" Тогда
		ОтборСтатусСогласования= ЭлементыФормы.ТаблицаДокументовВходящих.ОтборСтрок[28];
		ОтборСтатусСогласования.Значение = СписокСтатусов1С;
		ОтборСтатусСогласования.Использование =Истина;
	Иначе
		ОтборСтатусСогласования= ЭлементыФормы.ТаблицаДокументовВходящих.ОтборСтрок[28];
		
		ОтборСтатусСогласования.Использование =Ложь;
		
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ТипыДокументовПриИзменении(Элемент)
	
	ОсновныеДействияФормыДействиеЗаполнить(Элемент);
КонецПроцедуры

Процедура КоманднаяПанельДействияДействиеВыделитьВсе(Кнопка)
	
	ОтборСтатусСогласования= ЭлементыФормы.ТаблицаДокументовВходящих.ОтборСтрок[28];
	
	НайденныеСтроки = ТаблицаДокументовВходящих;
	Если ОтборСтатусСогласования.Использование И ЗначениеЗаполнено(ОтборСтатусСогласования.Значение) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтатусСогласования", Перечисления.СостоянияОбъектов.Отклонен);
		НайденныеСтроки = ТаблицаДокументовВходящих.НайтиСтроки(ПараметрыОтбора);
		
	КонецЕсли;
	
	Для каждого стр ИЗ НайденныеСтроки Цикл
		стр.Вкл=Истина;
		
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельДействияДействиеОтказать(Кнопка)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст =  "ru = ""Отказать в подписи по выделенным документам?"";"
	+ " en = ""Do you want to continue?""";;
	Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	Organization= ПодготовитьИВернутьОрганизациюCom();
	Для каждого стр ИЗ ТаблицаДокументовВходящих Цикл
		Если стр.Вкл Тогда
			
			Document=Organization.GetDocumentById(стр.DocumentId);
			НайдДок=НайтиПервичныйДокумент(стр.DocumentId);
			Если ЗначениеЗаполнено(НайдДок) Тогда
				ОтказатьВПодписиВДиадоке(Document,НайдДок.ПричинаОтказа);
			Иначе
				ОтказатьВПодписиВДиадоке(Document,"");		
			КонецЕсли;
			стр.СостояниеДокументооборота="Отказано в подписи";
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящихPathUrlОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=ЛОЖЬ;
	ЗапуститьПриложение(ПрефиксСайтаДиадок+Элемент.Значение);
КонецПроцедуры




Процедура КоманднаяПанельДействияОтправитьНаПодпись(Кнопка)
	
	
	//ОтправитьУПД(Organization,CounterAgentId)  ;
	ОтправитьУПД(ВЧерновик)  ;
	обновитьСтатусы();
		
КонецПроцедуры

Процедура обновитьСтатусы()
	ПрочитатьСтатусыИсходящие();
КонецПроцедуры

Процедура ПрочитатьСтатусыИсходящие()
	
	если ТаблицаДокументовИсходящих.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	свойство_статус = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДиадокСтатус") ;
	свойство_ид = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДиадокИД"); 
	если свойство_ид <> ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка() и свойство_статус <> ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка() тогда
		//статусы из Диадок
		Свойства = новый СписокЗначений;
		Свойства.Добавить(свойство_ид);
		Свойства.Добавить(свойство_статус);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект В (&Объекты)
		|	И ЗначенияСвойствОбъектов.Свойство В (&Свойства)";
		
		Запрос.УстановитьПараметр("Объекты", ТаблицаДокументовИсходящих.ВыгрузитьКолонку("РеализацияСсылка"));
		Запрос.УстановитьПараметр("Свойства", Свойства);
		
		Результат = Запрос.Выполнить();
		
		//статусы из печатных форм
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ПечатныеФормыВНаличии.Документ как Объект,
		|	ПечатныеФормыВНаличии.Статус как Значение
		|ИЗ
		|	РегистрСведений.ПечатныеФормыВНаличии КАК ПечатныеФормыВНаличии
		|ГДЕ
		|	ПечатныеФормыВНаличии.Документ В(&Объекты)
		|	И ПечатныеФормыВНаличии.ВидПечатнойФормы В(&ВидПечатнойФормы)";
		
		Запрос1.УстановитьПараметр("Объекты", ТаблицаДокументовИсходящих.ВыгрузитьКолонку("РеализацияСсылка"));
		Запрос1.УстановитьПараметр("ВидПечатнойФормы", Перечисления.ВидыПечатныхФорм.УПД);
		
		РезультатПФ = Запрос1.Выполнить();   
		
		
		Если не Результат.Пустой() или не РезультатПФ.Пустой() тогда
			
			ТЗДетальныеЗаписи = Результат.Выгрузить();
			ТЗДетальныеЗаписиПФ = РезультатПФ.Выгрузить();

			
			для каждого стр из ТаблицаДокументовИсходящих цикл
				
				
				Отбор = Новый Структура();
				Отбор.Вставить("Объект",стр.РеализацияСсылка);
				
				Строки = ТЗДетальныеЗаписи.НайтиСтроки(Отбор);
				СтрокиПФ = ТЗДетальныеЗаписиПФ.НайтиСтроки(Отбор);
				
				для каждого стр1 из Строки цикл
					если стр1.Свойство = свойство_статус тогда
						стр.СостояниеДокументооборота =  стр1.Значение;
					иначе //свойство_ид
						стр.DocumentId =  стр1.Значение;   						
					КонецЕсли;
					
				КонецЦикла;
				
				//статусы из печатных форм    
				для каждого стр1 из СтрокиПФ цикл
					стр.СостояниеСогласования =  стр1.Значение;  					
				КонецЦикла;
				
				
				Если строки.Количество() = 0 тогда  		//нет данных о статусе и ИД
					стр.СостояниеДокументооборота =  "---";				
				КонецЕсли;
				
			КонецЦикла;
			
			
		иначе
			для каждого стр из ТаблицаДокументовИсходящих цикл
				стр.СостояниеДокументооборота =  "---";				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры 
	


Процедура КоманднаяПанельДействия1ДействиеЗаполнитьИсходящие(Кнопка)
	// Вставить содержимое обработчика.
	ТаблицаДокументовИсходящих.Очистить(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов.Объект
	|ПОМЕСТИТЬ ЗСО
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК РеализацияСсылка,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Проведен,
	|	РеализацияТоваровУслуг.ВидОперации,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации,
	|	РеализацияТоваровУслуг.Подразделение,
	|	РеализацияТоваровУслуг.Комментарий,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Склад,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.ТипЦен,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	РеализацияТоваровУслуг.Ответственный,
	|	РеализацияТоваровУслуг.ВидПередачи,
	|	РеализацияТоваровУслуг.АдресДоставки,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.Грузоотправитель,
	|	РеализацияТоваровУслуг.Проверен,
	|	РеализацияТоваровУслуг.КонтрагентДляПечати,
	|	РеализацияТоваровУслуг.СрокДоставки,
	|	РеализацияТоваровУслуг.Водитель,
	|	РеализацияТоваровУслуг.Перевозчик,
	|	РеализацияТоваровУслуг.Заказчик,
	|	РеализацияТоваровУслуг.ОбщийВес КАК Вес,
	|	РеализацияТоваровУслуг.ОтгрузкаВагона,
	|	РеализацияТоваровУслуг.ИзОбработки,
	|	РеализацияТоваровУслуг.ЗаказНаряд,
	|	РеализацияТоваровУслуг.Автомобиль,
	|	РеализацияТоваровУслуг.Выгружен,
	|	РеализацияТоваровУслуг.Состояние,
	|	РеализацияТоваровУслуг.ОрганизацияДляПечати,
	|	РеализацияТоваровУслуг.ДатаДоверенности,
	|	РеализацияТоваровУслуг.НомерДоверенности,
	|	РеализацияТоваровУслуг.ОрганизацияВыдавшаяДоверенность,
	|	РеализацияТоваровУслуг.ФизЛицоДоверенности,
	|	РеализацияТоваровУслуг.Водитель2,
	|	РеализацияТоваровУслуг.Перевозчик2,
	|	РеализацияТоваровУслуг.СуммаКомпенсацииТранспорта,
	|	РеализацияТоваровУслуг.БезНал,
	|	РеализацияТоваровУслуг.НеФинансироватьФакторинг,
	|	РеализацияТоваровУслуг.ТранспортДатаРеализации,
	|	РеализацияТоваровУслуг.НомерФормулаАвто,
	|	РеализацияТоваровУслуг.УПД,
	|	РеализацияТоваровУслуг.Основание,
	|	""Реализация товаров и услуг"" КАК ЗначениеТипаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата
	|	И НЕ РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование ПОДОБНО ""%*""
	|	И РеализацияТоваровУслуг.Контрагент В
	|			(ВЫБРАТЬ
	|				ЗСО.Объект
	|			ИЗ
	|				ЗСО КАК зсо)";
	
	/// возможно соединять с СФ
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ДиадокФормироватьУПДКонтрагент"));
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонПериода));
	Запрос.УстановитьПараметр("НачДата", НачалоДня(НачПериода));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтр = ТаблицаДокументовИсходящих.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	обновитьСтатусы();
	
КонецПроцедуры

Процедура ПанельТаблицПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элемент.ТекущаяСтраница.Имя = "Исходящие" тогда
		
		КоманднаяПанельДействия1ДействиеЗаполнитьИсходящие(Элемент);
		
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаДокументовИсходящихВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ОткрытьЗначение(ВыбраннаяСтрока.РеализацияСсылка);
	
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящихВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ЗапуститьПриложение("https://diadoc.kontur.ru" + ВыбраннаяСтрока.PathUrl);
	
КонецПроцедуры


Процедура СохранитьДокументыНаДиск()
	
	МассивНайденныхСтрок = ТаблицаДокументовВходящих.НайтиСтроки(Новый Структура("Вкл", Истина));
	
	Если МассивНайденныхСтрок.Количество()=0 Тогда
		Предупреждение("Выберите хотя бы один документ.",, "Диадок");
		Возврат;
	КонецЕсли;
	
	ФормаЗапросаКаталога = ПолучитьФорму("ФормаЗапросКаталога");
	ФормаЗапросаКаталога.Заголовок = "Укажите каталог для выгрузки";
	
	КаталогДляВыгрузки = ВосстановитьЗначение("Диадок_КаталогДляВыгрузкиФайлов");
	
	Если НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		Попытка 
			WshShell = Новый COMОбъект("WScript.Shell");
			КаталогДляВыгрузки = WshShell.CurrentDirectory;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ФормаЗапросаКаталога.Каталог = КаталогДляВыгрузки;
	
	ПараметрыВыгрузкиДокументов = ФормаЗапросаКаталога.ОткрытьМодально();
	Если ПараметрыВыгрузкиДокументов = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыВыгрузкиДокументов.Каталог) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогДляВыгрузки	= ПараметрыВыгрузкиДокументов.Каталог;
	СохранятьПротокол	= ПараметрыВыгрузкиДокументов.СохранятьПротокол;
	
	СохранитьЗначение("Диадок_КаталогДляВыгрузкиФайлов", КаталогДляВыгрузки);
	
	СохранитьВыделенные(КаталогДляВыгрузки);
	
КонецПроцедуры

Процедура СохранитьВыделенные(КаталогДляВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда 
		Предупреждение("Укажите каталог, куда будут выгружаться файлы.",,"Диадок");
		Возврат;
	КонецЕсли;
	
	МассивВыгрузки = ТаблицаДокументовВходящих.НайтиСтроки(Новый Структура("вкл", Истина));
	Если МассивВыгрузки.Количество() = 0 Тогда 
		Предупреждение("Не выбрано ни одного документа для выгрузки.",, "Диадок");
		Возврат;
	КонецЕсли;
	
	РазмерВыгрузки 		= МассивВыгрузки.Количество();
	КоличествоВыгружено = 0;
	ВремяОтображения 	= ТекущаяДата();
//	Элементыформы.ПанельОбновлениеСтатуса.Видимость 	= Истина;
//	ЭлементыФормы.НадписьВыполняемоеДействие.Заголовок 	= "Производится сохранение документов";
	
	ЗапуститьВыгрузкуДокументов(КаталогДляВыгрузки);
	//ОбновитьСтатусВыгрузки();
	
КонецПроцедуры

Процедура ЗапуститьВыгрузкуДокументов(КаталогДляВыгрузки)
	
	МассивЗадач = Новый Массив();
	
	ВыборкаСтрок =  ТаблицаДокументовВходящих.НайтиСтроки(Новый Структура("Вкл", Истина));
	Organization= ПодготовитьИВернутьОрганизациюCom();
	
	Для Ц = 0 По ВыборкаСтрок.Количество()-1 Цикл
		
		Строка = ВыборкаСтрок[Ц];
		
		Попытка
			
			//Document 	= Строка.ЭДОбъект;
			Document=Organization.GetDocumentById(Строка.DocumentId);
			Подкаталог 	= "INN_" + Document.Organization.INN + "\" + Document.type + "_" + Прав(Document.DocumentId, 36);
			КаталогПакета = КаталогДляВыгрузки + "\" + Подкаталог;
			
			СоздатьКаталог(КаталогПакета);
			//СформироватьФайлСвязанныхДокументах(Document, КаталогПакета);
			Строка.Вкл 					= Ложь;
			//ТаблицаДокументовПриИзмененииФлажка("", Ложь);
			//Строка.СостояниеОбработки	= УспешноСохранен;
			
		ЗадачаВыгрузки = Document.SaveAllContentAsync(КаталогПакета,ложь);
		//	ЗадачаВыгрузки = Document.SaveContent(КаталогПакета + "\" + Document.DocumentId + ".xml");
			
			МассивЗадач.Добавить(ЗадачаВыгрузки);
			Сообщить("Документ " + Строка.ЗначениеТипаДокумента +" " + строка.Номер + " от "  + строка.Дата + " сохранен.");
			
		Исключение 
			
			//Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь; 
			
			Строка.Вкл 					= Ложь;
			//ТаблицаДокументовПриИзмененииФлажка("", Ложь);
			//Строка.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаСохранения;
			
			ТекстОшибки = ОписаниеОшибки();
			Если Найти(ТекстОшибки, "Ошибка при вызове метода контекста (СоздатьКаталог)")>0 Тогда
				Строка.ТекстОшибки = "Не удалось получить доступ к указанному каталогу. Возможно у Вас недостаточно прав.";
			Иначе
				Строка.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			Сообщить(ТекстОшибки); 
			
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДействияСохранитьНаДиск(Кнопка)
	СохранитьДокументыНаДиск();
КонецПроцедуры




