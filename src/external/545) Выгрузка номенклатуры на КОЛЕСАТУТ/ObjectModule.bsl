перем СписокИсключаемыхПапок;
функция ВыгрузитьТовары(ВыгружатьНаСайт=истина) экспорт
	
	КаталогОбмена = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	СоздатьКаталог(КаталогОбмена);
	
	//получить список товаров
	#Если клиент тогда
		Состояние("Получение остатков...");
	#КонецЕсли
	Начало = ТекущаяДата();
	Остатки = ПолучитьОстатокТоваров();
	Время = ТекущаяДата()-Начало;
	#Если клиент тогда
		Сообщить("Получение остатков: "+Время);
	#КонецЕсли
	#Если клиент тогда
		Состояние("Получение сезонного ассортимента...");
	#КонецЕсли
	Начало = ТекущаяДата();
	СезонныйАссортимент = ПолучитьСезонныйАссортимент();
	Время = ТекущаяДата()-Начало;
	#Если клиент тогда
		Сообщить("Получение сезонного ассортимента: "+Время);
	#КонецЕсли
	// offers import
	#Если клиент тогда
		Состояние("Формирование import.xml/offers.xml...");
	#КонецЕсли
	Начало = ТекущаяДата();
	СформироватьImportOffers(Остатки,СезонныйАссортимент, КаталогОбмена);
	Время = ТекущаяДата()-Начало;
	#Если клиент тогда
		Сообщить("Формирование import.xml/offers.xml: "+Время);
	#КонецЕсли

	#Если клиент тогда
		Состояние("Формирование manuf_full.xml...");
	#КонецЕсли
	Начало = ТекущаяДата();
	СформироватьПроизводителей(Остатки, КаталогОбмена);
	Время = ТекущаяДата()-Начало;
	#Если клиент тогда
		Сообщить("Формирование manuf_full.xml: "+Время);
	#КонецЕсли
	#Если клиент тогда
		Состояние("Формирование model_full.xml...");
	#КонецЕсли
	Начало = ТекущаяДата();
	СформироватьМодели(Остатки, КаталогОбмена);
	Время = ТекущаяДата()-Начало;
	#Если клиент тогда
		Сообщить("Формирование model_full: "+Время);
	#КонецЕсли
	
	
	
	Сообщить(КаталогОбмена);
	
	МассивИсходныхCMLФайлов = НайтиФайлы(КаталогОбмена, "*.xml");
	СписокФайловДляОтправки = ПолучитьСписокФайловДляОтправки(КаталогОбмена, неопределено);
	
	//Архив = ПодготовитьZIPАрхивы(СписокФайловДляОтправки, КаталогОбмена);
	//Сообщить(Архив);
	
	Если ВыгружатьНаСайт тогда
		Попытка
			//ИмяФайлаСообщения="test_rest_1c.xml";	
			ИмяФайлаСообщения="1c_offers.zip";
			//FTPсервер = "kolesatyt.ru";
			FTPсервер = "188.93.20.230";
            //FTPсервер = "31.186.103.151";
			
			//врФТП = Новый FTPСоединение(FTPсервер,,"bitrix", "eequajaiz4uNaku",, Истина );                                  
			врФТП = Новый FTPСоединение(FTPсервер,,"user1c", "oebohaCh5ohyaiko6Aer",, Истина );
			//ПутьКфайлуFTP = "www/_common/upload/new_1c/";
			ПутьКфайлуFTP = "/upload/1c/";
			
			//врФТП.Записать(Архив , ПутьКфайлуFTP+ИмяФайлаСообщения);
			Для каждого файл из СписокФайловДляОтправки цикл  //по просьбе сайтоделов, файлы отправляются незапакованные
				врФТП.Записать(файл.Значение , ПутьКфайлуFTP+файл.Представление);
			КонецЦикла;
			//запускаем скрипт
			//Соединение = Неопределено;
			//
			//СтруктураПараметровСайта = Новый Структура;
			//СтруктураПараметровСайта.Вставить("ИмяПользователя", "1cvigr");         
			//СтруктураПараметровСайта.Вставить("Пароль"		   , "$Tiptronic!13");
			//СтруктураПараметровСайта.Вставить("Сервер"		, "kolesatyt.ru");
			//СтруктураПараметровСайта.Вставить("Порт"		, неопределено);
			//СтруктураПараметровСайта.Вставить("ПроксиИспользование"  , Ложь);
			//СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение",  ЛОЖЬ);
			//СтруктураПараметровСайта.Вставить("ПроксиСервер"		 , "");
			//СтруктураПараметровСайта.Вставить("ПроксиПорт"		     , 0);
			//СтруктураПараметровСайта.Вставить("ПроксиИмяПользователя", "");
			//СтруктураПараметровСайта.Вставить("ПроксиПароль"		 , "");
			
			//СтруктураПараметровСайта.Вставить("АдресСкрипта", "/local/scripts/1c/1c_rest.php");
			//ЗапуститьСкрипт(СтруктураПараметровСайта);
		Исключение
			ТекстОшибки=ОписаниеОшибки();
			Сообщить(ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	Если ВыгружатьНаСайт тогда
		Попытка
			УдалитьФайлы(КаталогОбмена);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция СформироватьМодели(Остатки, КаталогОбмена)
	//Модели
	тзМодели = Остатки.Скопировать(,"Номенклатура,НоменклатураМодель");	
	тзМодели.Свернуть("Номенклатура,НоменклатураМодель");

	ЗаписьXML_model_full = новый ЗаписьXML;
	ЗаписьXML_model_full.ОткрытьФайл(КаталогОбмена+"\model_full.xml", "UTF-8");
	ЗаписьXML_model_full.ЗаписатьОбъявлениеXML();
	ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Модели");
	
	Запрос = новый Запрос;
	//Запрос.Текст="ВЫБРАТЬ
	//			 |	тзМодели.НоменклатураМодель
	//			 |ПОМЕСТИТЬ втМодели
	//			 |ИЗ
	//			 |	&тзМодели КАК тзМодели
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	А.НоменклатураМодель,
	//			 |	МАКСИМУМ(А.Актуальность) КАК Актуальность
	//			 |ПОМЕСТИТЬ втМоделиССезонными
	//			 |ИЗ
	//			 |	(ВЫБРАТЬ
	//			 |		втМодели.НоменклатураМодель КАК НоменклатураМодель,
	//			 |		ЛОЖЬ КАК Актуальность
	//			 |	ИЗ
	//			 |		втМодели КАК втМодели
	//			 |	
	//			 |	ОБЪЕДИНИТЬ ВСЕ
	//			 |	
	//			 |	ВЫБРАТЬ
	//			 |		СезонныйАссортимент.Номенклатура.Модель,
	//			 |		ИСТИНА
	//			 |	ИЗ
	//			 |		РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент) КАК А
	//			 |
	//			 |СГРУППИРОВАТЬ ПО
	//			 |	А.НоменклатураМодель
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	МоделиТоваров.Наименование,
	//			 |	МоделиТоваров.Производитель,
	//			 |	МоделиТоваров.Сезон,
	//			 |	МоделиТоваров.Шип,
	//			 |	МоделиТоваров.Код,
	//			 |	МоделиТоваров.Ссылка,
	//			 |	втМоделиССезонными.Актуальность,
	//			 |	МоделиТоваров.Наименование + ""\_%"" КАК НаименованиеДляПоискаВременнойКартинки
	//			 |ПОМЕСТИТЬ вт
	//			 |ИЗ
	//			 |	втМоделиССезонными КАК втМоделиССезонными
	//			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МоделиТоваров КАК МоделиТоваров
	//			 |		ПО втМоделиССезонными.НоменклатураМодель = МоделиТоваров.Ссылка
	//			 |;
	//			 |
	//			 |////////////////////////////////////////////////////////////////////////////////
	//			 |ВЫБРАТЬ
	//			 |	МоделиСВременнымиКартинками.ЕстьВременнаяКартинка,
	//			 |	вт.Наименование,
	//			 |	вт.Производитель,
	//			 |	вт.Сезон,
	//			 |	вт.Шип,
	//			 |	вт.Код,
	//			 |	вт.Ссылка,
	//			 |	вт.Актуальность,
	//			 |	вт.НаименованиеДляПоискаВременнойКартинки
	//			 |ИЗ
	//			 |	вт КАК вт
	//			 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			 |			ВложенныйЗапрос.Ссылка КАК Модель,
	//			 |			МАКСИМУМ(ВложенныйЗапрос.ЕстьВременнаяКартинка) КАК ЕстьВременнаяКартинка
	//			 |		ИЗ
	//			 |			(ВЫБРАТЬ
	//			 |				вт.Ссылка КАК Ссылка,
	//			 |				ВЫБОР
	//			 |					КОГДА ВременныеФото.ИмяФото ЕСТЬ NULL 
	//			 |						ТОГДА ЛОЖЬ
	//			 |					ИНАЧЕ ИСТИНА
	//			 |				КОНЕЦ КАК ЕстьВременнаяКартинка
	//			 |			ИЗ
	//			 |				вт КАК вт
	//			 |					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВременныеФото КАК ВременныеФото
	//			 |					ПО (ВременныеФото.ИмяФото ПОДОБНО вт.НаименованиеДляПоискаВременнойКартинки СПЕЦСИМВОЛ ""\"")) КАК ВложенныйЗапрос
	//			 |		
	//			 |		СГРУППИРОВАТЬ ПО
	//			 |			ВложенныйЗапрос.Ссылка) КАК МоделиСВременнымиКартинками
	//			 |		ПО вт.Ссылка = МоделиСВременнымиКартинками.Модель";
	//			 
	//			 Запрос.Текст="ВЫБРАТЬ
	//						  |	тзМодели.НоменклатураМодель,
	//						  |	тзМодели.Номенклатура
	//						  |ПОМЕСТИТЬ втМодели
	//						  |ИЗ
	//						  |	&тзМодели КАК тзМодели
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	А.НоменклатураМодель,
	//						  |	А.Актуальность КАК Актуальность,
	//						  |	А.Номенклатура
	//						  |ПОМЕСТИТЬ втМоделиССезонными
	//						  |ИЗ
	//						  |	(ВЫБРАТЬ
	//						  |		втМодели.НоменклатураМодель КАК НоменклатураМодель,
	//						  |		ЛОЖЬ КАК Актуальность,
	//						  |		втМодели.Номенклатура КАК Номенклатура
	//						  |	ИЗ
	//						  |		втМодели КАК втМодели
	//						  |	
	//						  |	ОБЪЕДИНИТЬ ВСЕ
	//						  |	
	//						  |	ВЫБРАТЬ
	//						  |		СезонныйАссортимент.Номенклатура.Модель,
	//						  |		ИСТИНА,
	//						  |		СезонныйАссортимент.Номенклатура
	//						  |	ИЗ
	//						  |		РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент) КАК А
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	втМоделиССезонными.НоменклатураМодель,
	//						  |	МАКСИМУМ(втМоделиССезонными.Актуальность) КАК Актуальность
	//						  |ПОМЕСТИТЬ втМодельАктуальность
	//						  |ИЗ
	//						  |	втМоделиССезонными КАК втМоделиССезонными
	//						  |
	//						  |СГРУППИРОВАТЬ ПО
	//						  |	втМоделиССезонными.НоменклатураМодель
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	МИНИМУМ(ЗакупкиОбороты.Период) КАК Период,
	//						  |	ЗакупкиОбороты.Номенклатура.Модель КАК Модель
	//						  |ПОМЕСТИТЬ втПервыеПоступления
	//						  |ИЗ
	//						  |	РегистрНакопления.Закупки.Обороты(
	//						  |			,
	//						  |			,
	//						  |			Регистратор,
	//						  |			Номенклатура В
	//						  |				(ВЫБРАТЬ
	//						  |					втМоделиССезонными.Номенклатура
	//						  |				ИЗ
	//						  |					втМоделиССезонными)) КАК ЗакупкиОбороты
	//						  |
	//						  |СГРУППИРОВАТЬ ПО
	//						  |	ЗакупкиОбороты.Номенклатура.Модель
	//						  |;
	//						  |
	//						  |////////////////////////////////////////////////////////////////////////////////
	//						  |ВЫБРАТЬ
	//						  |	втМодельАктуальность.НоменклатураМодель КАК Ссылка,
	//						  |	втМодельАктуальность.Актуальность,
	//						  |	втМодельАктуальность.НоменклатураМодель.Наименование КАК Наименование,
	//						  |	втМодельАктуальность.НоменклатураМодель.Производитель КАК Производитель,
	//						  |	втМодельАктуальность.НоменклатураМодель.Сезон КАК Сезон,
	//						  |	втМодельАктуальность.НоменклатураМодель.Шип КАК Шип,
	//						  |	втМодельАктуальность.НоменклатураМодель.Код КАК Код,
	//						  |	ЕСТЬNULL(втПервыеПоступления.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервоеПоступление,
	//						  |	ЕСТЬNULL(ФотоМоделейДисков.УрлФото, """") КАК СтрокаДляПоискаКартинки,
	//						  |	ЕСТЬNULL(ФотоМоделейДисков.Временная, ИСТИНА) КАК Временная
	//						  |ИЗ
	//						  |	втМодельАктуальность КАК втМодельАктуальность
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФотоМоделейДисков КАК ФотоМоделейДисков
	//						  |		ПО втМодельАктуальность.НоменклатураМодель = ФотоМоделейДисков.Модель
	//						  |		ЛЕВОЕ СОЕДИНЕНИЕ втПервыеПоступления КАК втПервыеПоступления
	//						  |		ПО втМодельАктуальность.НоменклатураМодель = втПервыеПоступления.Модель
	//						  |
	//						  |УПОРЯДОЧИТЬ ПО
	//						  |	Ссылка
	//						  |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст="ВЫБРАТЬ
	             |	тзМодели.НоменклатураМодель,
	             |	тзМодели.Номенклатура
	             |ПОМЕСТИТЬ втМодели
	             |ИЗ
	             |	&тзМодели КАК тзМодели
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	А.НоменклатураМодель,
	             |	А.Актуальность КАК Актуальность,
	             |	А.Номенклатура
	             |ПОМЕСТИТЬ втМоделиССезонными
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		втМодели.НоменклатураМодель КАК НоменклатураМодель,
	             |		ЛОЖЬ КАК Актуальность,
	             |		втМодели.Номенклатура КАК Номенклатура
	             |	ИЗ
	             |		втМодели КАК втМодели
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		СезонныйАссортимент.Номенклатура.Модель,
	             |		ИСТИНА,
	             |		СезонныйАссортимент.Номенклатура
	             |	ИЗ
	             |		РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент) КАК А
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втМоделиССезонными.НоменклатураМодель,
	             |	МАКСИМУМ(втМоделиССезонными.Актуальность) КАК Актуальность
	             |ПОМЕСТИТЬ втМодельАктуальность
	             |ИЗ
	             |	втМоделиССезонными КАК втМоделиССезонными
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	втМоделиССезонными.НоменклатураМодель
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	МИНИМУМ(ЗакупкиОбороты.Период) КАК Период,
	             |	ЗакупкиОбороты.Номенклатура.Модель КАК Модель
	             |ПОМЕСТИТЬ втПервыеПоступления
	             |ИЗ
	             |	РегистрНакопления.Закупки.Обороты(
	             |			,
	             |			,
	             |			Регистратор,
	             |			Номенклатура В
	             |				(ВЫБРАТЬ
	             |					втМоделиССезонными.Номенклатура
	             |				ИЗ
	             |					втМоделиССезонными)) КАК ЗакупкиОбороты
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗакупкиОбороты.Номенклатура.Модель
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втМодельАктуальность.НоменклатураМодель КАК Ссылка,
	             |	втМодельАктуальность.Актуальность,
	             |	втМодельАктуальность.НоменклатураМодель.Наименование КАК Наименование,
	             |	втМодельАктуальность.НоменклатураМодель.Производитель КАК Производитель,
	             |	втМодельАктуальность.НоменклатураМодель.Сезон КАК Сезон,
	             |	втМодельАктуальность.НоменклатураМодель.Шип КАК Шип,
	             |	втМодельАктуальность.НоменклатураМодель.Код КАК Код,
	             |	ЕСТЬNULL(втПервыеПоступления.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервоеПоступление,
	             |	ЕСТЬNULL(ФоткиМоделей.УрлФото, """") КАК СтрокаДляПоискаКартинки,
	             |	ЕСТЬNULL(ФоткиМоделей.Временная, ИСТИНА) КАК Временная,
	             |	втМодельАктуальность.НоменклатураМодель.РисунокПротектора КАК МодельРисунокПротектора,
	             |	втМодельАктуальность.НоменклатураМодель.ТипПротектора КАК МодельТипПротектора
	             |ИЗ
	             |	втМодельАктуальность КАК втМодельАктуальность
	             |		ЛЕВОЕ СОЕДИНЕНИЕ втПервыеПоступления КАК втПервыеПоступления
	             |		ПО втМодельАктуальность.НоменклатураМодель = втПервыеПоступления.Модель
	             |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |			ФотоМоделейДисков.Модель КАК Модель,
	             |			МАКСИМУМ(ФотоМоделейДисков.УрлФото) КАК УрлФото,
	             |			ФотоМоделейДисков.Временная КАК Временная
	             |		ИЗ
	             |			РегистрСведений.ФотоМоделейДисков КАК ФотоМоделейДисков
	             |		ГДЕ
	             |			ФотоМоделейДисков.Временная = ЛОЖЬ
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ФотоМоделейДисков.Модель,
	             |			ФотоМоделейДисков.Временная
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			ФотоМоделейДисков.Модель,
	             |			МАКСИМУМ(ФотоМоделейДисков.УрлФото),
	             |			ФотоМоделейДисков.Временная
	             |		ИЗ
	             |			РегистрСведений.ФотоМоделейДисков КАК ФотоМоделейДисков
	             |		ГДЕ
	             |			ФотоМоделейДисков.Временная
	             |			И НЕ ФотоМоделейДисков.Модель В
	             |						(ВЫБРАТЬ
	             |							ФотоМоделейДисковНеВрем.Модель
	             |						ИЗ
	             |							РегистрСведений.ФотоМоделейДисков КАК ФотоМоделейДисковНеВрем
	             |						ГДЕ
	             |							ФотоМоделейДисковНеВрем.Временная = ЛОЖЬ)
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			ФотоМоделейДисков.Модель,
	             |			ФотоМоделейДисков.Временная) КАК ФоткиМоделей
	             |		ПО втМодельАктуальность.НоменклатураМодель = ФоткиМоделей.Модель
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Ссылка
	             |АВТОУПОРЯДОЧИВАНИЕ";

	
	Запрос.УстановитьПараметр("тзМодели",тзМодели);
	
	ЗапросОтсутствующиеКартинки = Новый Запрос;
	ЗапросОтсутствующиеКартинки.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	ОтсутствующиеФотоМоделей.УрлФото
	                                  |ИЗ
	                                  |	РегистрСведений.ОтсутствующиеФотоМоделей КАК ОтсутствующиеФотоМоделей";
	тзОтсутствующиеФото=ЗапросОтсутствующиеКартинки.Выполнить().Выгрузить();
	
	РезЗапроса = Запрос.Выполнить();
	//Рез.ВыбратьСтроку();
	РезТЗ_СвойстваМодели = РезЗапроса.Выгрузить();
	РезТЗ_СвойствоТипПротектора = РезТЗ_СвойстваМодели.Скопировать();
	РезТЗ_СвойствоТипПротектора.Свернуть("МодельТипПротектора");
	
	РезТЗ_СвойствоРисунокПротектора = РезТЗ_СвойстваМодели.Скопировать();
	РезТЗ_СвойствоРисунокПротектора.Свернуть("МодельРисунокПротектора");
	
	ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Свойства");
		ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ТипПротектора");
		Для каждого стр из РезТЗ_СвойствоТипПротектора цикл
			Если ЗначениеЗаполнено(стр.МодельТипПротектора) тогда
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
					Индекс = Перечисления.ТипПротектора.Индекс(стр.МодельТипПротектора);
					ИмяЗначения = Метаданные.Перечисления.ТипПротектора.ЗначенияПеречисления[Индекс].Имя;

					//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", стр.МодельТипПротектора.УникальныйИдентификатор());
					
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", ИмяЗначения);
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", ""+стр.МодельТипПротектора);
				ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ЗначенияСвойства
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ТипПротектора
		
		
		ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("РисунокПротектора");
		Для каждого стр из РезТЗ_СвойствоРисунокПротектора цикл
			Если ЗначениеЗаполнено(стр.МодельРисунокПротектора) тогда
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
				    Индекс = Перечисления.РисунокПротектора.Индекс(стр.МодельРисунокПротектора);
					ИмяЗначения = Метаданные.Перечисления.РисунокПротектора.ЗначенияПеречисления[Индекс].Имя;
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", стр.МодельРисунокПротектора.УникальныйИдентификатор());
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", ИмяЗначения);
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", ""+стр.МодельРисунокПротектора);
				ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ЗначенияСвойства
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//РисунокПротектора
	ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//Свойства
	
	
	Рез = РезЗапроса.Выбрать();
	
	Пока Рез.Следующий() цикл
		//попытка
		Если ЗначениеЗаполнено(Рез.Производитель) тогда
			уидПроизводителя = Рез.Производитель.УникальныйИдентификатор();
		Иначе
			уидПроизводителя = "00000000-0000-0000-0000-000000000000";
		конецЕсли;
		Если ЗначениеЗаполнено(Рез.Ссылка) тогда
			УидМодели = Рез.Ссылка.УникальныйИдентификатор();
		Иначе
			УидМодели = "00000000-0000-0000-0000-000000000000";
		конецЕсли;

			
			ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Модель");
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", УидМодели);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", Рез.Наименование);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Производитель", уидПроизводителя);

			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Ship", Рез.Шип);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "KOD_1S", Рез.Код);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "NoveltyDate", формат(Рез.ПервоеПоступление,"ДФ=dd.MM.yyyy"));
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsActual", Рез.Актуальность);
			Если не Рез.СтрокаДляПоискаКартинки="" тогда
				ИмяФайла = СокрЛП(нрег(Рез.СтрокаДляПоискаКартинки));
				Если тзОтсутствующиеФото.Найти(ИмяФайла,"УрлФото")=неопределено тогда
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "picture_url", ИмяФайла);
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsTemporaryPicture", рез.Временная);
				иначе
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsTemporaryPicture", истина);
					Сообщить("Есть отсутствующее фото: "+ИмяФайла);
				КонецЕсли;
			иначе
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsTemporaryPicture", истина);
				//попытка
				//	КопироватьФайл(ИмяФайла, "c:\photo\"+СокрЛП(нрег(Рез.СтркаДляПоискаКартинки))+".png");
				//Исключение
				//	Сообщить(СокрЛП(нрег(Рез.СтркаДляПоискаКартинки)));
				//КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Рез.МодельТипПротектора) тогда
				Индекс = Перечисления.ТипПротектора.Индекс(Рез.МодельТипПротектора);
				ИмяЗначения = Метаданные.Перечисления.ТипПротектора.ЗначенияПеречисления[Индекс].Имя;
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", Рез.МодельТипПротектора.УникальныйИдентификатор());
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", ИмяЗначения);
			Иначе
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ТипПротектора");ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Рез.МодельРисунокПротектора) тогда
				Индекс = Перечисления.РисунокПротектора.Индекс(Рез.МодельРисунокПротектора);
				ИмяЗначения = Метаданные.Перечисления.РисунокПротектора.ЗначенияПеречисления[Индекс].Имя;
				
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "РисунокПротектора", ИмяЗначения);
			Иначе	
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("РисунокПротектора");ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "РисунокПротектора", "");
			КонецЕсли;
			
			ЗаписьXML_model_full.ЗаписатьКонецЭлемента(); //модель
		//Исключение
		//КонецПопытки;
	КонецЦикла;
	
	ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
	ЗаписьXML_model_full.Закрыть();
	
	
	//Файл со всеми фотками
	ЗаписьXML_model_full = новый ЗаписьXML;
	ЗаписьXML_model_full.ОткрытьФайл(КаталогОбмена+"\model_full_all_photo.xml", "UTF-8");
	ЗаписьXML_model_full.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Модели");
	
	ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Свойства");
		ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ТипПротектора");
		Для каждого стр из РезТЗ_СвойствоТипПротектора цикл
			Если ЗначениеЗаполнено(стр.МодельТипПротектора) тогда
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
					Индекс = Перечисления.ТипПротектора.Индекс(стр.МодельТипПротектора);
					ИмяЗначения = Метаданные.Перечисления.ТипПротектора.ЗначенияПеречисления[Индекс].Имя;

					//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", стр.МодельТипПротектора.УникальныйИдентификатор());
					
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", ИмяЗначения);
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", ""+стр.МодельТипПротектора);
				ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ЗначенияСвойства
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ТипПротектора
		
		
		ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("РисунокПротектора");
		Для каждого стр из РезТЗ_СвойствоРисунокПротектора цикл
			Если ЗначениеЗаполнено(стр.МодельРисунокПротектора) тогда
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
				    Индекс = Перечисления.РисунокПротектора.Индекс(стр.МодельРисунокПротектора);
					ИмяЗначения = Метаданные.Перечисления.РисунокПротектора.ЗначенияПеречисления[Индекс].Имя;
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", стр.МодельРисунокПротектора.УникальныйИдентификатор());
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", ИмяЗначения);
					ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", ""+стр.МодельРисунокПротектора);
				ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//ЗначенияСвойства
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//РисунокПротектора
	ЗаписьXML_model_full.ЗаписатьКонецЭлемента();//Свойства

	
	
	
	
	ЗапросКартинки = Новый Запрос;
	ЗапросКартинки.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                     |	ФотоМоделейДисков.Модель,
	                     |	ФотоМоделейДисков.УрлФото,
	                     |	ФотоМоделейДисков.Временная
	                     |ИЗ
	                     |	РегистрСведений.ФотоМоделейДисков КАК ФотоМоделейДисков";
	тзФото=ЗапросКартинки.Выполнить().Выгрузить();
	
	//Рез = Запрос.Выполнить().Выгрузить();
	//Рез.ВыбратьСтроку();
    Рез.Сбросить();
	
	отбор = новый Структура("Модель");
	Пока Рез.Следующий() цикл
		//попытка
		Если ЗначениеЗаполнено(Рез.Производитель) тогда
			уидПроизводителя = Рез.Производитель.УникальныйИдентификатор();
		Иначе
			уидПроизводителя = "00000000-0000-0000-0000-000000000000";
		конецЕсли;
		Если ЗначениеЗаполнено(Рез.Ссылка) тогда
			УидМодели = Рез.Ссылка.УникальныйИдентификатор();
		Иначе
			УидМодели = "00000000-0000-0000-0000-000000000000";
		конецЕсли;

			
			ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Модель");
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ИД", УидМодели);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Наименование", Рез.Наименование);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Производитель", уидПроизводителя);

			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "Ship", Рез.Шип);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "KOD_1S", Рез.Код);
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "NoveltyDate", формат(Рез.ПервоеПоступление,"ДФ=dd.MM.yyyy"));
			ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsActual", Рез.Актуальность);
			
			
			ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Photos");
			
			отбор.Модель = Рез.Ссылка;
			
			НайденныеКартинки = тзФото.НайтиСтроки(отбор);
			
			Для каждого найденнаяСтрока Из НайденныеКартинки цикл
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("Photo");
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "picture_url", найденнаяСтрока.УрлФото);
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "IsTemporaryPicture", найденнаяСтрока.Временная);
				ЗаписьXML_model_full.ЗаписатьКонецЭлемента(); //Photo
			КонецЦикла;
			ЗаписьXML_model_full.ЗаписатьКонецЭлемента(); //Photos
			
			Если ЗначениеЗаполнено(Рез.МодельТипПротектора) тогда
				Индекс = Перечисления.ТипПротектора.Индекс(Рез.МодельТипПротектора);
				ИмяЗначения = Метаданные.Перечисления.ТипПротектора.ЗначенияПеречисления[Индекс].Имя;
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", Рез.МодельТипПротектора.УникальныйИдентификатор());
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", ИмяЗначения);
			Иначе
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("ТипПротектора");ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "ТипПротектора", "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Рез.МодельРисунокПротектора) тогда
				Индекс = Перечисления.РисунокПротектора.Индекс(Рез.МодельРисунокПротектора);
				ИмяЗначения = Метаданные.Перечисления.РисунокПротектора.ЗначенияПеречисления[Индекс].Имя;
				
				ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "РисунокПротектора", ИмяЗначения);
			Иначе	
				ЗаписьXML_model_full.ЗаписатьНачалоЭлемента("РисунокПротектора");ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
				//ЗаписатьТекстовойУзел(ЗаписьXML_model_full, "РисунокПротектора", "");
			КонецЕсли;
			
			ЗаписьXML_model_full.ЗаписатьКонецЭлемента(); //модель
		//Исключение
		//КонецПопытки;
	КонецЦикла;
	
	ЗаписьXML_model_full.ЗаписатьКонецЭлемента();
	ЗаписьXML_model_full.Закрыть();

КонецФункции

Функция СформироватьПроизводителей(Остатки, КаталогОбмена)
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	СезонныйАссортимент.Номенклатура.Производитель КАК Производитель,
	             |	СезонныйАссортимент.Номенклатура.Производитель.Родитель КАК ПроизводительГруппа
	             |ИЗ
	             |	РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент";
	резПроизводители = Запрос.Выполнить().Выгрузить();
	//производители  из карточки номенклатуры
	тзПроизводителиНом = Остатки.Скопировать(,"Производитель,ПроизводительГруппа");
	//добавим производителей из Актуальной номенклатуры
	для каждого стр из резПроизводители цикл
		нстр = тзПроизводителиНом.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	тзПроизводителиНом.свернуть("Производитель,ПроизводительГруппа");
	
	тзПроизводителиГруппаНом = Остатки.Скопировать(,"ПроизводительГруппа");
	//добавим производителей из Актуальной номенклатуры
	для каждого стр из резПроизводители цикл
		нстр = тзПроизводителиГруппаНом.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;

	тзПроизводителиГруппаНом.Свернуть("ПроизводительГруппа");
	мПроизводителиГруппаНом = тзПроизводителиГруппаНом.ВыгрузитьКолонку("ПроизводительГруппа");
	
	//производители из модели
	тзПроизводители = Остатки.Скопировать(,"НоменклатураМодельПроизводитель,НоменклатураМодельПроизводительГруппа");
	
	Для каждого стр из тзПроизводителиНом цикл
		 нстр = тзПроизводители.Добавить();
		 нстр.НоменклатураМодельПроизводитель = стр.Производитель;
		 нстр.НоменклатураМодельПроизводительГруппа = стр.ПроизводительГруппа;
	КонецЦикла;
	
	тзПроизводители.свернуть("НоменклатураМодельПроизводитель,НоменклатураМодельПроизводительГруппа");
	
	тзПроизводителиГруппа = тзПроизводители.Скопировать(,"НоменклатураМодельПроизводительГруппа");
	тзПроизводителиГруппа.Свернуть("НоменклатураМодельПроизводительГруппа");
	мПроизводителиГруппа = тзПроизводителиГруппа.ВыгрузитьКолонку("НоменклатураМодельПроизводительГруппа");


	ЗаписьXML_Manuf_full = новый ЗаписьXML;
	ЗаписьXML_Manuf_full.ОткрытьФайл(КаталогОбмена+"\manuf_full.xml", "UTF-8");
	
	ЗаписьXML_Manuf_full.ЗаписатьОбъявлениеXML();
	ЗаписьXML_Manuf_full.ЗаписатьНачалоЭлемента("Производители");
	ЗаписьXML_Manuf_full.ЗаписатьНачалоЭлемента("Классификатор");
	
	ВыгрузитьГруппы(ЗаписьXML_Manuf_full,мПроизводителиГруппа);
	ЗаписьXML_Manuf_full.ЗаписатьКонецЭлемента(); //Классификатор
	
	ЗаписьXML_Manuf_full.ЗаписатьНачалоЭлемента("Каталог");
	ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "Ид", "manuf");
	ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "ИдКлассификатора", "manuf");
	ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "Наименование", "Производители");
	ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "БитриксКод", "manufacture"); //"xml_brends");
	ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "БитриксИндексироватьЭлементы", "true");
	Для Каждого стр Из тзПроизводители Цикл
		Если ЗначениеЗаполнено(стр.НоменклатураМодельПроизводитель) тогда
			ЗаписьXML_Manuf_full.ЗаписатьНачалоЭлемента("Производитель");
			ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "ИД", стр.НоменклатураМодельПроизводитель.УникальныйИдентификатор());
			ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "Наименование", стр.НоменклатураМодельПроизводитель);
			ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "Страна", стр.НоменклатураМодельПроизводитель.СтранаПроизводителя);
			ЗаписьXML_Manuf_full.ЗаписатьНачалоЭлемента("Группы");
			ЗаписатьТекстовойУзел(ЗаписьXML_Manuf_full, "Ид", стр.НоменклатураМодельПроизводительГруппа.УникальныйИдентификатор());
			ЗаписьXML_Manuf_full.ЗаписатьКонецЭлемента();
			ЗаписьXML_Manuf_full.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	ЗаписьXML_Manuf_full.ЗаписатьКонецЭлемента(); //каталог
	ЗаписьXML_Manuf_full.ЗаписатьКонецЭлемента(); //Производители

	ЗаписьXML_Manuf_full.Закрыть();

КонецФункции

Функция СформироватьImportOffers(Остатки, СезонныйАссортимент, КаталогОбмена)
	тзНоменклатуры = Остатки.Скопировать(,"Номенклатура,НоменклатураВидТовара");
	тзНоменклатуры.Свернуть("Номенклатура,НоменклатураВидТовара");

	тзНоменклатуры.Свернуть("Номенклатура,НоменклатураВидТовара");
	
	Для каждого стр из СезонныйАссортимент цикл
		нстр = тзНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;

	
	//тзНоменклатуры.выбратьСтроку();
	
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	тзНоменклатура.Номенклатура,
	             |	тзНоменклатура.НоменклатураВидТовара
	             |ПОМЕСТИТЬ втНоменклатура
	             |ИЗ
	             |	&тзНоменклатура КАК тзНоменклатура
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	втНоменклатура.Номенклатура,
	             |	НоменклатураСпр.Наименование КАК НоменклатураНаименование,
	             |	НоменклатураСпр.НаименованиеПолное КАК НаименованиеПолное,
	             |	НоменклатураСпр.Артикул КАК Артикул,
	             |	НоменклатураСпр.Родитель КАК Родитель,
	             |	НоменклатураСпр.Код КАК Код,
	             |	НоменклатураСпр.Модель КАК Модель,
	             |	НоменклатураСпр.ВидТовара КАК ВидТовара,
	             |	НоменклатураСпр.Типоразмер КАК Типоразмер,
	             |	НоменклатураСпр.Типоразмер.Ширина КАК Ширина,
	             |	НоменклатураСпр.Типоразмер.Высота КАК Высота,
	             |	НоменклатураСпр.Типоразмер.Диаметр КАК Диаметр,
	             |	НоменклатураСпр.Типоразмер.КоличествоОтверстий КАК КоличествоОтверстий,
	             |	НоменклатураСпр.Типоразмер.PCD КАК PCD,
	             |	НоменклатураСпр.Типоразмер.Вылет КАК Вылет,
	             |	НоменклатураСпр.Типоразмер.ДиаметрСтупицы КАК ДиаметрСтупицы,
	             |	НоменклатураСпр.СтранаПроисхождения КАК СтранаПроизводителя,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Вес КАК Вес,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Объем КАК Объем,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаНаименование,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Коэффициент КАК ЕдиницаКоэффициент,
	             |	НоменклатураСпр.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	             |	НоменклатураСпр.БазоваяЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	             |	НоменклатураСпр.Производитель КАК НоменклатураПроизводитель,
	             |	ЕСТЬNULL(взЦвета.Значение, """") КАК Цвет,
	             |	ЕСТЬNULL(взRunFlat.Значение, ЛОЖЬ) КАК RunFlat,
	             |	ЕСТЬNULL(взПровереннаяНагрузка.ПрошедшаяНагрузка, 0) КАК ПровереннаяНагрузка,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Длина КАК ЕдиницаДлина,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Ширина КАК ЕдиницаШирина,
	             |	НоменклатураСпр.ЕдиницаХраненияОстатков.Высота КАК ЕдиницаВысота,
	             |	НоменклатураСпр.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	             |ИЗ
	             |	втНоменклатура КАК втНоменклатура
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ЗначенияСвойствОбъектов.Объект КАК Объект,
	             |				ЗначенияСвойствОбъектов.Значение КАК Значение
	             |			ИЗ
	             |				РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |			ГДЕ
	             |				ЗначенияСвойствОбъектов.Свойство = &СвойствоЦвет) КАК взЦвета
	             |			ПО НоменклатураСпр.Ссылка = взЦвета.Объект
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ЗначенияСвойствОбъектов.Объект КАК Объект,
	             |				ЗначенияСвойствОбъектов.Значение КАК Значение
	             |			ИЗ
	             |				РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |			ГДЕ
	             |				ЗначенияСвойствОбъектов.Свойство = &СвойствоRunFlat
	             |				И ЗначенияСвойствОбъектов.Значение = ИСТИНА) КАК взRunFlat
	             |			ПО НоменклатураСпр.Ссылка = взRunFlat.Объект
	             |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |				ПровереннаяНагрузкаДисков.Номенклатура КАК Номенклатура,
	             |				МИНИМУМ(ПровереннаяНагрузкаДисков.ПрошедшаяНагрузка) КАК ПрошедшаяНагрузка
	             |			ИЗ
	             |				РегистрСведений.ПровереннаяНагрузкаДисков КАК ПровереннаяНагрузкаДисков
	             |			ГДЕ
	             |				ПровереннаяНагрузкаДисков.ТестПройден
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				ПровереннаяНагрузкаДисков.Номенклатура) КАК взПровереннаяНагрузка
	             |			ПО НоменклатураСпр.Ссылка = взПровереннаяНагрузка.Номенклатура
	             |		ПО втНоменклатура.Номенклатура = НоменклатураСпр.Ссылка";
	Запрос.УстановитьПараметр("тзНоменклатура",тзНоменклатуры);
	Запрос.УстановитьПараметр("СвойствоЦвет",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90166")); //цвет
	Запрос.УстановитьПараметр("СвойствоRunFlat",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90163")); //RunFlat
	Рез = Запрос.Выполнить().Выбрать();
	
	//ЗаписьXML_Offers = новый ЗаписьXML;
	//ЗаписьXML_Offers.ОткрытьФайл(КаталогОбмена+"\offers.xml", "UTF-8");
	//
	//ЗаписьXML_Offers.ЗаписатьОбъявлениеXML();
	//ЗаписьXML_Offers.ЗаписатьНачалоЭлемента("Предложения");
	
	ЗаписьXML_Import = новый ЗаписьXML;
	ЗаписьXML_Import.ОткрытьФайл(КаталогОбмена+"\import.xml", "UTF-8");
	//ЗаписьXML_Import.УстановитьСтроку();
	ЗаписьXML_Import.ЗаписатьОбъявлениеXML();
	ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Классификатор");
	//ЗаписьXML_Import группы
	
	ВыгрузитьГруппыНоменклатуры(ЗаписьXML_Import,тзНоменклатуры);
	СвойстваНом = ВыгрузитьСвойстваНоменклатуры(ЗаписьXML_Import,тзНоменклатуры);
	к=0;
	КолИтого = Рез.Количество();
	отборНоменклатура = новый Структура("Номенклатура");
	Пока Рез.Следующий() Цикл
		//offers
		//Попытка
		Если ЗначениеЗаполнено(Рез.Номенклатура) тогда
			//ЗаписьXML_Offers.ЗаписатьНачалоЭлемента("Предложение");
			//ЗаписьXML_Offers.ЗаписатьНачалоЭлемента("Ид");
			//ЗаписьXML_Offers.ЗаписатьТекст(""+Рез.Номенклатура.УникальныйИдентификатор());
			//ЗаписьXML_Offers.ЗаписатьКонецЭлемента();
			//
			//ЗаписьXML_Offers.ЗаписатьНачалоЭлемента("Наименование");
			//ЗаписьXML_Offers.ЗаписатьТекст(Рез.НоменклатураНаименование);
			//ЗаписьXML_Offers.ЗаписатьКонецЭлемента();
			//
			//ЗаписьXML_Offers.ЗаписатьНачалоЭлемента("БазоваяЕдиница");
			//ЗаписьXML_Offers.ЗаписатьАтрибут("Код",Рез.БазоваяЕдиницаКод);
			//ЗаписьXML_Offers.ЗаписатьАтрибут("НаименованиеПолное",Рез.БазоваяЕдиницаНаименованиеПолное);
			//ЗаписьXML_Offers.ЗаписатьТекст(Рез.ЕдиницаНаименование);
			//ЗаписьXML_Offers.ЗаписатьКонецЭлемента();
			//
			//ЗаписьXML_Offers.ЗаписатьКонецЭлемента(); //Предложение
			#Если клиент тогда
				Состояние(""+к+" из "+КолИтого);
				к=к+1;
			#КонецЕсли

			//import
			ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Товар");
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Ид");
					ЗаписьXML_Import.ЗаписатьТекст(""+Рез.Номенклатура.УникальныйИдентификатор());
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Штрихкод");
					ЗаписьXML_Import.ЗаписатьТекст("");
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Артикул");
					ЗаписьXML_Import.ЗаписатьТекст(""+СокрЛП(Рез.Артикул));
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
					ЗаписьXML_Import.ЗаписатьТекст(Рез.НоменклатураНаименование);
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Группы");
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ИД");
						ЗаписьXML_Import.ЗаписатьТекст(""+Рез.Родитель.УникальныйИдентификатор());
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначенияСвойств");
			
					ЗаписатьСвойство(ЗаписьXML_Import,"Code_1S",Рез.Код);
					ЗаписатьСвойство(ЗаписьXML_Import,"TypeValue",Рез.Типоразмер);
					ЗаписатьСвойство(ЗаписьXML_Import,"Width",Рез.Ширина);
					ЗаписатьСвойство(ЗаписьXML_Import,"Hight",Рез.Высота);
					ЗаписатьСвойство(ЗаписьXML_Import,"Diametre",Рез.Диаметр);
					ЗаписатьСвойство(ЗаписьXML_Import,"N",Рез.КоличествоОтверстий);
					ЗаписатьСвойство(ЗаписьXML_Import,"PCD",Рез.PCD);
					ЗаписатьСвойство(ЗаписьXML_Import,"ET",Рез.Вылет);
					ЗаписатьСвойство(ЗаписьXML_Import,"DIA",Рез.ДиаметрСтупицы);
					ЗаписатьСвойство(ЗаписьXML_Import,"MaxLoad",СокрЛП(Формат(Рез.ПровереннаяНагрузка,"ЧРД=.; ЧГ=0")));
					ЗаписатьСвойство(ЗаписьXML_Import,"СтранаПроисхождения",Рез.СтранаПроизводителя);
					ЗаписатьСвойство(ЗаписьXML_Import,"Модель",Рез.Модель.УникальныйИдентификатор());
					ЗаписатьСвойство(ЗаписьXML_Import,"ПроизводительНоменклатуры",Рез.НоменклатураПроизводитель.УникальныйИдентификатор());
					
					Если ЗначениеЗаполнено(Рез.НоменклатурнаяГруппа) тогда
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("НоменклатурнаяГруппа");
						ЗаписьXML_Import.ЗаписатьАтрибут("GUID",""+Рез.НоменклатурнаяГруппа.УникальныйИдентификатор());
						ЗаписьXML_Import.ЗаписатьТекст(""+Рез.НоменклатурнаяГруппа);

						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					КонецЕсли;

					Если СокрЛП(Рез.Цвет)<>"" тогда
						ЗаписатьСвойство(ЗаписьXML_Import,"Цвет",СокрЛП(Рез.Цвет));
					КонецЕсли;
					Если Рез.RunFlat тогда
						ЗаписатьСвойство(ЗаписьXML_Import,"RunFlat",Рез.RunFlat);
					КонецЕсли;
			
				ЗаписьXML_Import.ЗаписатьКонецЭлемента(); //ЗначенияСвойств
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("БазоваяЕдиница");
					ЗаписьXML_Import.ЗаписатьАтрибут("Код",Рез.БазоваяЕдиницаКод);
					ЗаписьXML_Import.ЗаписатьАтрибут("НаименованиеПолное",Рез.БазоваяЕдиницаНаименованиеПолное);
					ЗаписьXML_Import.ЗаписатьТекст(Рез.ЕдиницаНаименование);
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
				ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
			
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("Полное наименование");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Рез.НаименованиеПолное);
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();
			
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("Вес");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Формат(Рез.Вес,"ЧРД=.; ЧГ=0"));
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();	
			
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("Объем");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Формат(Рез.Объем,"ЧРД=.; ЧГ=0"));
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();  //ЗначениеРеквизита
					
					Если Рез.ЕдиницаДлина>0 тогда
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("ЕдиницаДлина");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Формат(Рез.ЕдиницаДлина,"ЧРД=.; ЧГ=0"));
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если Рез.ЕдиницаШирина>0 тогда
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("ЕдиницаШирина");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Формат(Рез.ЕдиницаШирина,"ЧРД=.; ЧГ=0"));
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					КонецЕсли;
					
					Если Рез.ЕдиницаВысота>0 тогда
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Наименование");
							ЗаписьXML_Import.ЗаписатьТекст("ЕдиницаВысота");
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
						ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
							ЗаписьXML_Import.ЗаписатьТекст(""+Формат(Рез.ЕдиницаВысота,"ЧРД=.; ЧГ=0"));
						ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();
					КонецЕсли;
				ЗаписьXML_Import.ЗаписатьКонецЭлемента();  //ЗначенияРеквизитов
			    //Свойства
				отборНоменклатура.Номенклатура = Рез.Номенклатура;
				НайденныеСтроки = СвойстваНом.НайтиСтроки(отборНоменклатура);
				Если НайденныеСтроки.Количество()>0 тогда
					ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Свойства");
					Для каждого НайденнаяСтрока из  НайденныеСтроки цикл
					      ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Свойство");
						  ЗаписьXML_Import.ЗаписатьАтрибут("ИД", ""+?(ТипЗнч(НайденнаяСтрока.Свойство)=Тип("Строка"),НайденнаяСтрока.Свойство, НайденнаяСтрока.Свойство.УникальныйИдентификатор()));
						  //ЗаписьXML_Import.ЗаписатьАтрибут("ИД", ""+НайденнаяСтрока.Свойство.УникальныйИдентификатор());
                          ЗаписьXML_Import.ЗаписатьНачалоЭлемента("Значение");
						   Попытка
							ИД = НайденнаяСтрока.Значение.УникальныйИдентификатор();
						   Исключение
						    ИД = НайденнаяСтрока.Значение;
						   КонецПопытки;
						  ЗаписьXML_Import.ЗаписатьАтрибут("ИД","" + ИД); 
						  ЗаписьXML_Import.ЗаписатьКонецЭлемента();//Значение
						  ЗаписьXML_Import.ЗаписатьКонецЭлемента();//Свойство
					КонецЦикла;
					ЗаписьXML_Import.ЗаписатьКонецЭлемента();//Свойства
				КонецЕсли;
				//-Свойства
			ЗаписьXML_Import.ЗаписатьКонецЭлемента(); //Товар
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	//ЗаписьXML_Offers.ЗаписатьКонецЭлемента();
	//ЗаписьXML_Offers.Закрыть();
	
	//ЗаписьXML_Import.ЗаписатьКонецЭлемента();
	ЗаписьXML_Import.ЗаписатьКонецЭлемента();
	ЗаписьXML_Import.Закрыть();
	//ТекстXML = ЗаписьXML.Закрыть();
	//Файл = Новый ЗаписьТекста(КаталогОбмена+"\import.xml", "UTF-8");
	//Файл.ЗаписатьСтроку(ТекстXML);
	//Файл.Закрыть();
КонецФункции

Процедура ЗаписатьСвойство(Запись,Свойство,ЗначениеСвойства)
	Запись.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
	
	Запись.ЗаписатьНачалоЭлемента("ИД");
	Запись.ЗаписатьТекст(""+СокрЛП(Свойство));
	Запись.ЗаписатьКонецЭлемента();
	
	Если ""+СокрЛП(ЗначениеСвойства)<>"" тогда
		Запись.ЗаписатьНачалоЭлемента("Значение");
		Запись.ЗаписатьТекст(""+СокрЛП(ЗначениеСвойства));
		Запись.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Запись.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура ВыгрузитьГруппыНоменклатуры(Запись,МассивНоменклатуры)
	
	ЗапросПоГруппам = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|	И НЕ Номенклатура.Ссылка В (&СписокИсключаемыхПапок)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	
	ЗапросПоГруппам.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросПоГруппам.УстановитьПараметр("СписокИсключаемыхПапок", СписокИсключаемыхПапок);
	ДеревоГрупп = ЗапросПоГруппам.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ВыгрузитьГруппыРекурсивно(Запись, ДеревоГрупп.Строки);
	
КонецПроцедуры

Функция ВыгрузитьСвойстваНоменклатуры(Запись,МассивНоменклатуры)
	СписокИсключаемыхСвойств = Новый СписокЗначений;
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90147")); //Кросс-код слика
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90172")); //CAE (Код Пауэр)
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90226")); //Акция
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90171")); //Завод
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90185")); //Завод
    СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90336")); //Завод
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90335")); //Заниженная нагрузка
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90335")); //Заниженная нагрузка
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90170"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90154"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90153"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90255"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00125"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00134"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90207"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90164"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90152"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00141"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00135"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("00120"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90181"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90249"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90169"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90206"));
	СписокИсключаемыхСвойств.Добавить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90165"));
	

	
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.МенеджерВременныхТаблиц = МВТ;
	ЗапросПоСвойствам.Текст ="ВЫБРАТЬ
	                         |	ЗначенияСвойствОбъектов.Свойство,
	                         |	ЗначенияСвойствОбъектов.Значение,
	                         |	НоменклатураСпр.Ссылка КАК Номенклатура
	                         |ПОМЕСТИТЬ втЗначенияСвойствОбъектов
	                         |ИЗ
	                         |	Справочник.Номенклатура КАК НоменклатураСпр
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	                         |		ПО НоменклатураСпр.Ссылка = ЗначенияСвойствОбъектов.Объект
	                         |ГДЕ
	                         |	НоменклатураСпр.Ссылка В(&МассивНоменклатуры)
	                         |	И НЕ ЗначенияСвойствОбъектов.Свойство В (&СписокИсключаемыхСвойств)
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	НоменклатураСпр.Ссылка КАК Номенклатура,
	                         |	ВЫБОР
	                         |		КОГДА НоменклатураИмпорт.Номенклатура ЕСТЬ NULL 
	                         |			ТОГДА ЛОЖЬ
	                         |		ИНАЧЕ ИСТИНА
	                         |	КОНЕЦ КАК GrayList,
	                         |	ВЫБОР
	                         |		КОГДА НоменклатураИмпорт.ЧерныйЛист
	                         |			ТОГДА ИСТИНА
	                         |		ИНАЧЕ ЛОЖЬ
	                         |	КОНЕЦ КАК BlackList
	                         |ПОМЕСТИТЬ втСерыйЧерныйСписок
	                         |ИЗ
	                         |	Справочник.Номенклатура КАК НоменклатураСпр
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	                         |		ПО (НоменклатураИмпорт.Номенклатура = НоменклатураСпр.Ссылка)
	                         |ГДЕ
	                         |	НоменклатураСпр.Ссылка В(&МассивНоменклатуры)
	                         |	И НоменклатураСпр.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	А.Свойство КАК Свойство,
	                         |	А.Значение
	                         |ИЗ
	                         |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |		втЗначенияСвойствОбъектов.Свойство КАК Свойство,
	                         |		втЗначенияСвойствОбъектов.Значение КАК Значение
	                         |	ИЗ
	                         |		втЗначенияСвойствОбъектов КАК втЗначенияСвойствОбъектов
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		""BlackList"",
	                         |		ИСТИНА
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		""BlackList"",
	                         |		ЛОЖЬ
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		""GrayList"",
	                         |		ИСТИНА
	                         |	
	                         |	ОБЪЕДИНИТЬ ВСЕ
	                         |	
	                         |	ВЫБРАТЬ
	                         |		""GrayList"",
	                         |		ЛОЖЬ) КАК А
	                         |ИТОГИ ПО
	                         |	Свойство
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	втЗначенияСвойствОбъектов.Свойство,
	                         |	втЗначенияСвойствОбъектов.Значение,
	                         |	втЗначенияСвойствОбъектов.Номенклатура
	                         |ИЗ
	                         |	втЗначенияСвойствОбъектов КАК втЗначенияСвойствОбъектов
	                         |
	                         |ОБЪЕДИНИТЬ ВСЕ
	                         |
	                         |ВЫБРАТЬ
	                         |	""GrayList"",
	                         |	втСерыйЧерныйСписок.GrayList,
	                         |	втСерыйЧерныйСписок.Номенклатура
	                         |ИЗ
	                         |	втСерыйЧерныйСписок КАК втСерыйЧерныйСписок
	                         |
	                         |ОБЪЕДИНИТЬ ВСЕ
	                         |
	                         |ВЫБРАТЬ
	                         |	""BlackList"",
	                         |	втСерыйЧерныйСписок.BlackList,
	                         |	втСерыйЧерныйСписок.Номенклатура
	                         |ИЗ
	                         |	втСерыйЧерныйСписок КАК втСерыйЧерныйСписок";
	
	ЗапросПоСвойствам.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	ЗапросПоСвойствам.УстановитьПараметр("СписокИсключаемыхСвойств", СписокИсключаемыхСвойств);

	Пакет = ЗапросПоСвойствам.ВыполнитьПакет(); 
	
	Свойства = Пакет[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запись.ЗаписатьНачалоЭлемента("Свойства");
	Пока Свойства.Следующий() цикл
		Запись.ЗаписатьНачалоЭлемента("Свойство");
		    Запись.ЗаписатьАтрибут("ИД", ""+?(ТипЗнч(Свойства.Свойство)=Тип("Строка"),Свойства.Свойство, Свойства.Свойство.УникальныйИдентификатор()));
			Запись.ЗаписатьНачалоЭлемента("Наименование");	Запись.ЗаписатьТекст(""+Свойства.Свойство); Запись.ЗаписатьКонецЭлемента();
			Запись.ЗаписатьНачалоЭлемента("Значения");
				Значения =  Свойства.Выбрать();
				Пока Значения.Следующий() цикл
					Запись.ЗаписатьНачалоЭлемента("Значение");
					Попытка
						ИД = Значения.Значение.УникальныйИдентификатор();
					Исключение
						ИД = Значения.Значение;
					КонецПопытки;
					Запись.ЗаписатьАтрибут("ИД", ""+ИД);
                    Запись.ЗаписатьНачалоЭлемента("Наименование");	Запись.ЗаписатьТекст(""+Значения.Значение); Запись.ЗаписатьКонецЭлемента();
					Запись.ЗаписатьКонецЭлемента(); //Значение
				КонецЦикла;
		Запись.ЗаписатьКонецЭлемента();  //Значения
		Запись.ЗаписатьКонецЭлемента(); //Свойство
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента(); //Свойства
	
	Возврат Пакет[3].Выгрузить();
КонецФункции


Процедура ВыгрузитьГруппы(ОбъектCML, ВыбранныеГруппы)
	
	Если ВыбранныеГруппы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектCML.ЗаписатьНачалоЭлемента("Группы");
	Для Каждого Группа Из ВыбранныеГруппы Цикл  
		
		Если ЗначениеЗаполнено(Группа) тогда //+++ 05.09.2012 - пустых не надо!
			ОбъектCML.ЗаписатьНачалоЭлемента("Группа");
			ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(ОбъектCML, Группа);
			ОбъектCML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;	
	ОбъектCML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры	

Процедура ВыгрузитьГруппыРекурсивно(ОбъектCML, ДеревоГрупп);
	
	НужноВыгружатьГруппы = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоГрупп Цикл
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не НужноВыгружатьГруппы Тогда
			
			ОбъектCML.ЗаписатьНачалоЭлемента("Группы");
			НужноВыгружатьГруппы = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ссылка) тогда //+++ 05.09.2012 - пустых не надо!
			ОбъектCML.ЗаписатьНачалоЭлемента("Группа");
			ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(ОбъектCML, СтрокаДерева);
			
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ВыгрузитьГруппыРекурсивно(ОбъектCML, СтрокаДерева.Строки);
			КонецЕсли;	
			ОбъектCML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НужноВыгружатьГруппы Тогда
		ОбъектCML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОсновныеРеквизитыГруппыДляКлассификатора(ОбъектCML, Группа)
	
	ИдГруппы = СформироватьИдентификаторТовара(Группа.Ссылка);
	ЗаписатьТекстовойУзел(ОбъектCML, "Ид", ИдГруппы);
	ИмяГруппы = Группа.Наименование;
	ЗаписатьТекстовойУзел(ОбъектCML, "Наименование", ФорматНаименованияДляCML(ИмяГруппы));
	
КонецПроцедуры

Функция СформироватьИдентификаторТовара(Номенклатура, Характеристика = Неопределено)
	
	Если Характеристика = Неопределено 
		ИЛИ Характеристика.пустая() Тогда   //характеристика - это ссылка
		Возврат Строка(Номенклатура.УникальныйИдентификатор());
	Иначе	
		Возврат Строка(Номенклатура.УникальныйИдентификатор()) + "#" + Строка(Характеристика.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

Функция ФорматНаименованияДляCML(Наименование)
	Возврат СокрЛП( Лев(СокрЛП(Наименование), 250)); //+++ 23.05.2013 - добавлен СокрЛП() - 2 раза
КонецФункции				 

Функция ПолучитьСреднююПоПартиям(СписокДиски, СписокПрочее)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахОстатки.КоличествоОстаток <> 0
	|			ТОГДА ВЫРАЗИТЬ(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток / ПартииТоваровНаСкладахОстатки.КоличествоОстаток КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Себестоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|			,
	|			НЕ Склад.ЗапретитьИспользование
	|				И (Номенклатура В (&СписокНоменклатурыДиски)
	|					ИЛИ Номенклатура В (&СписокНоменклатурыПрочее))) КАК ПартииТоваровНаСкладахОстатки";
	Запрос.УстановитьПараметр("СписокНоменклатурыДиски",СписокДиски);
	Запрос.УстановитьПараметр("СписокНоменклатурыПрочее",СписокПрочее);
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез;
конецФункции

Функция ПолучитьСезонныйАссортимент()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СезонныйАссортимент.Номенклатура,
	               |	СезонныйАссортимент.Номенклатура.ВидТовара КАК НоменклатураВидТовара
	               |ИЗ
	               |	РегистрСведений.СезонныйАссортимент КАК СезонныйАссортимент
				   //|ГДЕ
				   //|	НЕ СезонныйАссортимент.Номенклатура В
				   //|				(ВЫБРАТЬ
				   //|					НоменклатураИмпорт.Номенклатура КАК Номенклатура
				   //|				ИЗ
				   //|					РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт)
				   |";
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез;
КонецФункции

Функция ПолучитьОстатокТоваров()
	ВидыТоваров = новый СписокЗначений;
	ВидыТоваров.Добавить(Перечисления.ВидыТоваров.АКБ);
	ВидыТоваров.Добавить(Перечисления.ВидыТоваров.Аксессуары);
	ВидыТоваров.Добавить(Перечисления.ВидыТоваров.Диски);
	ВидыТоваров.Добавить(Перечисления.ВидыТоваров.Шины);
	ВидыТоваров.Добавить(Перечисления.ВидыТоваров.Прочее);
	
	СписокПапок = новый СписокЗначений;
	СписокПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("0080021"));//АКБ
	СписокПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("0000001"));//АКСЫ
	СписокПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("0001752"));//Диски
	СписокПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("0001746"));//Шины
	

	
	запрос = новый Запрос;   	   
	
	//запрос.Текст = "ВЫБРАТЬ
	//			   |	Номенклатура.Ссылка КАК Номенклатура,
	//			   |	Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	//			   |	Номенклатура.Производитель,
	//			   |	Номенклатура.Производитель.Родитель КАК ПроизводительГруппа,
	//			   |	Номенклатура.Модель КАК НоменклатураМодель
	//			   |ПОМЕСТИТЬ втНоменклатура
	//			   |ИЗ
	//			   |	Справочник.Номенклатура КАК Номенклатура
	//			   |ГДЕ
	//			   |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	//			   |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	//			   |	И Номенклатура.ВидТовара В(&ВидыТоваров)
	//			   |	И Номенклатура.Услуга = ЛОЖЬ
	//			   |	И Номенклатура.Ссылка В ИЕРАРХИИ(&СписокПапок)
	//			   |	И НЕ Номенклатура.Ссылка В
	//			   |				(ВЫБРАТЬ
	//			   |					НоменклатураИмпорт.Номенклатура КАК Номенклатура
	//			   |				ИЗ
	//			   |					РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт)
	//			   |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&СписокИсключаемыхПапок)
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ
	//			   |	ЕСТЬNULL(ВЫБОР
	//			   |			КОГДА Табл1.ПодразделениеКод = ""00005""
	//			   |				ТОГДА ""000092773""
	//			   |			КОГДА Табл1.ПодразделениеКод = ""00138""
	//			   |				ТОГДА ""УТ0000494""
	//			   |			КОГДА Табл1.ПодразделениеКод = ""00106""
	//			   |				ТОГДА ""Ф00000010""
	//			   |			КОГДА Табл1.ПодразделениеКод = ""00112""
	//			   |				ТОГДА ""П000835""
	//			   |			КОГДА Табл1.ПодразделениеКод = ""00133""
	//			   |				ТОГДА ""УТИМ31438""
	//			   |		КОНЕЦ, ""000092773"") КАК Подразделение,
	//			   |	втНоменклатура.Номенклатура.Код КАК НоменклатураКод,
	//			   |	ЕСТЬNULL(Табл1.СвободныйОстаток, 0) КАК Остаток,
	//			   |	втНоменклатура.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	//			   |	втНоменклатура.Номенклатура КАК Номенклатура,
	//			   |	ЕСТЬNULL(Табл1.Заказано, 0) КАК ВРезерве,
	//			   |	ЕСТЬNULL(Табл1.ФактКоличество, 0) КАК ФактКоличество,
	//			   |	втНоменклатура.Номенклатура.Производитель КАК Производитель,
	//			   |	втНоменклатура.Номенклатура.Производитель.Родитель КАК ПроизводительГруппа,
	//			   |	втНоменклатура.Номенклатура.Модель,
	//			   |	втНоменклатура.Номенклатура.Модель.Производитель,
	//			   |	втНоменклатура.Номенклатура.Модель.Производитель.Родитель КАК НоменклатураМодельПроизводительГруппа
	//			   |ИЗ
	//			   |	(ВЫБРАТЬ
	//			   |		А.ПодразделениеКод КАК ПодразделениеКод,
	//			   |		А.НоменклатураКод КАК НоменклатураКод,
	//			   |		А.остаток КАК остаток,
	//			   |		А.Заказано КАК Заказано,
	//			   |		А.НоменклатураВидТовара КАК НоменклатураВидТовара,
	//			   |		А.Номенклатура КАК Номенклатура,
	//			   |		А.остаток - А.Заказано КАК СвободныйОстаток,
	//			   |		А.ФактКоличество КАК ФактКоличество
	//			   |	ИЗ
	//			   |		(ВЫБРАТЬ
	//			   |			""00005"" КАК ПодразделениеКод,
	//			   |			остатки.Номенклатура.Код КАК НоменклатураКод,
	//			   |			МАКСИМУМ(остатки.КоличествоОстаток) КАК остаток,
	//			   |			СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) КАК Заказано,
	//			   |			остатки.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	//			   |			остатки.Номенклатура КАК Номенклатура,
	//			   |			СУММА(остатки.КоличествоОстаток) КАК ФактКоличество
	//			   |		ИЗ
	//			   |			(ВЫБРАТЬ
	//			   |				Остатки3.Номенклатура КАК Номенклатура,
	//			   |				СУММА(Остатки3.КоличествоОстаток) КАК КоличествоОстаток,
	//			   |				Остатки3.СторПоставщикКод КАК СторПоставщикКод
	//			   |			ИЗ
	//			   |				(ВЫБРАТЬ
	//			   |					ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	//			   |					ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	//			   |					0 КАК СторПоставщикКод
	//			   |				ИЗ
	//			   |					РегистрНакопления.ТоварыНаСкладах.Остатки(
	//			   |							,
	//			   |							НЕ Склад.Транзитный
	//			   |								И Номенклатура В
	//			   |									(ВЫБРАТЬ
	//			   |										втНоменклатура.Номенклатура
	//			   |									ИЗ
	//			   |										втНоменклатура)
	//			   |								И НЕ Склад.ЗапретитьИспользование
	//			   |								И ВЫБОР
	//			   |									КОГДА Склад.Подразделение = &ПодразделениеМСК
	//			   |										ТОГДА Склад = &СкладМоскваИМ
	//			   |									ИНАЧЕ ИСТИНА
	//			   |								КОНЕЦ) КАК ТоварыВРезервеНаСкладахОстатки
	//			   |				
	//			   |				ОБЪЕДИНИТЬ ВСЕ
	//			   |				
	//			   |				ВЫБРАТЬ
	//			   |					ТоварыНаОтветственномХраненииОстатки.Номенклатура,
	//			   |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток,
	//			   |					0
	//			   |				ИЗ
	//			   |					РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	//			   |							,
	//			   |							НЕ Склад.Транзитный
	//			   |								И Номенклатура В
	//			   |									(ВЫБРАТЬ
	//			   |										втНоменклатура.Номенклатура
	//			   |									ИЗ
	//			   |										втНоменклатура)
	//			   |								И НЕ Склад.ЗапретитьИспользование
	//			   |								И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
	//			   |				
	//			   |				ОБЪЕДИНИТЬ ВСЕ
	//			   |				
	//			   |				ВЫБРАТЬ
	//			   |					РезервДляИМОстатки.Номенклатура,
	//			   |					РезервДляИМОстатки.КоличествоОстаток,
	//			   |					0
	//			   |				ИЗ
	//			   |					РегистрНакопления.РезервДляИМ.Остатки(
	//			   |							,
	//			   |							Подразделение В (&СписокГоловное)
	//			   |								И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва) КАК РезервДляИМОстатки) КАК Остатки3
	//			   |			
	//			   |			СГРУППИРОВАТЬ ПО
	//			   |				Остатки3.Номенклатура,
	//			   |				Остатки3.СторПоставщикКод) КАК остатки
	//			   |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	//			   |						,
	//			   |						НЕ ЗаказПокупателя.Транзит
	//			   |							И ЗаказПокупателя.Проверен
	//			   |							И Номенклатура В
	//			   |								(ВЫБРАТЬ
	//			   |									втНоменклатура.Номенклатура
	//			   |								ИЗ
	//			   |									втНоменклатура)) КАК ЗаказыПокупателейОстатки
	//			   |				ПО остатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			остатки.Номенклатура.Код,
	//			   |			остатки.Номенклатура.ВидТовара,
	//			   |			остатки.Номенклатура
	//			   |		
	//			   |		ОБЪЕДИНИТЬ ВСЕ
	//			   |		
	//			   |		ВЫБРАТЬ
	//			   |			остаткиТр.Подразделение.Код,
	//			   |			остаткиТр.Номенклатура.Код,
	//			   |			МАКСИМУМ(остаткиТр.КоличествоОстаток),
	//			   |			СУММА(ЕСТЬNULL(ЗапросЗаказы.КоличествоОстаток, 0)),
	//			   |			остаткиТр.Номенклатура.ВидТовара,
	//			   |			остаткиТр.Номенклатура,
	//			   |			СУММА(остаткиТр.ФактКоличество)
	//			   |		ИЗ
	//			   |			(ВЫБРАТЬ
	//			   |				ТоварыНаСкладахТр.Подразделение КАК Подразделение,
	//			   |				ТоварыНаСкладахТр.Номенклатура КАК Номенклатура,
	//			   |				СУММА(ЕСТЬNULL(ТоварыНаСкладахТр.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	//			   |				МИНИМУМ(ТоварыНаСкладахТр.СторПоставщикКод) КАК СторПоставщикКод,
	//			   |				СУММА(ТоварыНаСкладахТр.ФактКоличество) КАК ФактКоличество
	//			   |			ИЗ
	//			   |				(ВЫБРАТЬ
	//			   |					ТоварыНаСкладахОстатки.Склад.Подразделение КАК Подразделение,
	//			   |					ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	//			   |					ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	//			   |					0 КАК СторПоставщикКод,
	//			   |					ТоварыНаСкладахОстатки.КоличествоОстаток КАК ФактКоличество
	//			   |				ИЗ
	//			   |					РегистрНакопления.ТоварыНаСкладах.Остатки(
	//			   |							,
	//			   |							НЕ Склад.Подразделение = &ПодрЕКБ
	//			   |								И Склад.Транзитный
	//			   |								И НЕ Склад.ЗапретитьИспользование
	//			   |								И НЕ Склад.Подразделение = &ПустоеПодразделение
	//			   |								И НЕ Склад.Подразделение = &Ярославль
	//			   |								И Номенклатура В
	//			   |									(ВЫБРАТЬ
	//			   |										втНоменклатура.Номенклатура
	//			   |									ИЗ
	//			   |										втНоменклатура)
	//			   |								И Склад.Подразделение В (&СписокДоступныхПодразделений)
	//			   |								И ВЫБОР
	//			   |									КОГДА Склад.Подразделение = &ПодразделениеМСК
	//			   |										ТОГДА Склад = &СкладМоскваИМ
	//			   |									ИНАЧЕ ИСТИНА
	//			   |								КОНЕЦ) КАК ТоварыНаСкладахОстатки
	//			   |				
	//			   |				ОБЪЕДИНИТЬ ВСЕ
	//			   |				
	//			   |				ВЫБРАТЬ
	//			   |					ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение,
	//			   |					ТоварыНаОтветственномХраненииОстатки.Номенклатура,
	//			   |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток,
	//			   |					0,
	//			   |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток
	//			   |				ИЗ
	//			   |					РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	//			   |							,
	//			   |							НЕ Склад.Подразделение = &ПодрЕКБ
	//			   |								И Склад.Транзитный
	//			   |								И Номенклатура В
	//			   |									(ВЫБРАТЬ
	//			   |										втНоменклатура.Номенклатура
	//			   |									ИЗ
	//			   |										втНоменклатура)
	//			   |								И НЕ Склад.ЗапретитьИспользование
	//			   |								И НЕ Склад.Подразделение = &ПустоеПодразделение
	//			   |								И НЕ Склад.Подразделение = &Ярославль
	//			   |								И Контрагент В (&СписокКонтрагентовОТХ)
	//			   |								И Склад.Подразделение В (&СписокДоступныхПодразделений)) КАК ТоварыНаОтветственномХраненииОстатки
	//			   |				
	//			   |				ОБЪЕДИНИТЬ ВСЕ
	//			   |				
	//			   |				ВЫБРАТЬ
	//			   |					РезервДляИМОстатки.Подразделение,
	//			   |					РезервДляИМОстатки.Номенклатура,
	//			   |					РезервДляИМОстатки.КоличествоОстаток,
	//			   |					0,
	//			   |					0
	//			   |				ИЗ
	//			   |					РегистрНакопления.РезервДляИМ.Остатки(
	//			   |							,
	//			   |							НЕ Подразделение В (&СписокГоловное)
	//			   |								И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва
	//			   |								И Подразделение В (&СписокДоступныхПодразделений)) КАК РезервДляИМОстатки) КАК ТоварыНаСкладахТр
	//			   |			
	//			   |			СГРУППИРОВАТЬ ПО
	//			   |				ТоварыНаСкладахТр.Подразделение,
	//			   |				ТоварыНаСкладахТр.Номенклатура) КАК остаткиТр
	//			   |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//			   |					ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение КАК Подразделение,
	//			   |					ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	//			   |					СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток
	//			   |				ИЗ
	//			   |					РегистрНакопления.ЗаказыПокупателей.Остатки(
	//			   |							,
	//			   |							ЗаказПокупателя.Транзит
	//			   |								И Номенклатура В
	//			   |									(ВЫБРАТЬ
	//			   |										втНоменклатура.Номенклатура
	//			   |									ИЗ
	//			   |										втНоменклатура)
	//			   |								И ЗаказПокупателя.Проверен
	//			   |								И НЕ ЗаказПокупателя.Подразделение = &ПустоеПодразделение
	//			   |								И НЕ ЗаказПокупателя.Подразделение = &Ярославль) КАК ЗаказыПокупателейОстатки
	//			   |				
	//			   |				СГРУППИРОВАТЬ ПО
	//			   |					ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение,
	//			   |					ЗаказыПокупателейОстатки.Номенклатура) КАК ЗапросЗаказы
	//			   |				ПО остаткиТр.Номенклатура = ЗапросЗаказы.Номенклатура
	//			   |					И остаткиТр.Подразделение = ЗапросЗаказы.Подразделение
	//			   |		
	//			   |		СГРУППИРОВАТЬ ПО
	//			   |			остаткиТр.Подразделение.Код,
	//			   |			остаткиТр.Номенклатура.Код,
	//			   |			остаткиТр.Номенклатура.ВидТовара,
	//			   |			остаткиТр.Номенклатура) КАК А
	//			   |	ГДЕ
	//			   |		А.остаток - А.Заказано >= &МинОстаток) КАК Табл1
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	//			   |		ПО (втНоменклатура.Номенклатура = Табл1.Номенклатура)
	//			   |
	//			   |УПОРЯДОЧИТЬ ПО
	//			   |	НоменклатураКод,
	//			   |	Подразделение
	//			   |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗначенияСвойствОбъектов.Объект КАК Номенклатура
	             |ПОМЕСТИТЬ втТоварыВПалетах
	             |ИЗ
	             |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	             |ГДЕ
	             |	ЗначенияСвойствОбъектов.Свойство = &СвойствоВидУпаковки
	             |	И ЗначенияСвойствОбъектов.Значение = &ЗначениеПалеты
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Номенклатура.Ссылка КАК Номенклатура,
	             |	Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	             |	Номенклатура.Производитель,
	             |	Номенклатура.Производитель.Родитель КАК ПроизводительГруппа,
	             |	Номенклатура.Модель КАК НоменклатураМодель
	             |ПОМЕСТИТЬ втНоменклатура
	             |ИЗ
	             |	Справочник.Номенклатура КАК Номенклатура
	             |ГДЕ
	             |	Номенклатура.ПометкаУдаления = ЛОЖЬ
	             |	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	             |	И Номенклатура.ВидТовара В(&ВидыТоваров)
	             |	И Номенклатура.Услуга = ЛОЖЬ
	             |	И Номенклатура.Ссылка В ИЕРАРХИИ(&СписокПапок)
				 //|	И НЕ Номенклатура.Ссылка В
				 //|				(ВЫБРАТЬ
				 //|					НоменклатураИмпорт.Номенклатура КАК Номенклатура
				 //|				ИЗ
				 //|					РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт)
	             |	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&СписокИсключаемыхПапок)
	             |	И НЕ Номенклатура.Ссылка В
	             |				(ВЫБРАТЬ
	             |					втТоварыВПалетах.Номенклатура
	             |				ИЗ
	             |					втТоварыВПалетах)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ВЫБОР
	             |			КОГДА Табл1.ПодразделениеКод = ""00005""
	             |				ТОГДА ""000092773""
	             |			КОГДА Табл1.ПодразделениеКод = ""00138""
	             |				ТОГДА ""УТ0000494""
	             |			КОГДА Табл1.ПодразделениеКод = ""00106""
	             |				ТОГДА ""Ф00000010""
	             |			КОГДА Табл1.ПодразделениеКод = ""00112""
	             |				ТОГДА ""П000835""
	             |			КОГДА Табл1.ПодразделениеКод = ""00133""
	             |				ТОГДА ""УТИМ31438""
	             |		КОНЕЦ, ""000092773"") КАК Подразделение,
	             |	втНоменклатура.Номенклатура.Код КАК НоменклатураКод,
	             |	ЕСТЬNULL(Табл1.СвободныйОстаток, 0) КАК Остаток,
	             |	втНоменклатура.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	             |	втНоменклатура.Номенклатура КАК Номенклатура,
	             |	ЕСТЬNULL(Табл1.Заказано, 0) КАК ВРезерве,
	             |	ЕСТЬNULL(Табл1.ФактКоличество, 0) КАК ФактКоличество,
	             |	втНоменклатура.Номенклатура.Производитель КАК Производитель,
	             |	втНоменклатура.Номенклатура.Производитель.Родитель КАК ПроизводительГруппа,
	             |	втНоменклатура.Номенклатура.Модель,
	             |	втНоменклатура.Номенклатура.Модель.Производитель,
	             |	втНоменклатура.Номенклатура.Модель.Производитель.Родитель КАК НоменклатураМодельПроизводительГруппа,
	             |	Табл1.КоличествоВПути,
	             |	Табл1.Номенклатура КАК Номенклатура1
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		А.ПодразделениеКод КАК ПодразделениеКод,
	             |		А.НоменклатураКод КАК НоменклатураКод,
	             |		А.остаток КАК остаток,
	             |		А.Заказано КАК Заказано,
	             |		А.НоменклатураВидТовара КАК НоменклатураВидТовара,
	             |		А.Номенклатура КАК Номенклатура,
	             |		А.остаток - А.Заказано КАК СвободныйОстаток,
	             |		А.ФактКоличество КАК ФактКоличество,
	             |		ВЫБОР
	             |			КОГДА А.КоличествоВПути > 0
	             |				ТОГДА А.КоличествоВПути
	             |			ИНАЧЕ 0
	             |		КОНЕЦ КАК КоличествоВПути
	             |	ИЗ
	             |		(ВЫБРАТЬ
	             |			""00005"" КАК ПодразделениеКод,
	             |			остатки.Номенклатура.Код КАК НоменклатураКод,
	             |			МАКСИМУМ(остатки.КоличествоОстаток) КАК остаток,
	             |			СУММА(ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0)) КАК Заказано,
	             |			остатки.Номенклатура.ВидТовара КАК НоменклатураВидТовара,
	             |			остатки.Номенклатура КАК Номенклатура,
	             |			СУММА(остатки.КоличествоОстаток) КАК ФактКоличество,
	             |			СУММА(остатки.КоличествоВПути) КАК КоличествоВПути
	             |		ИЗ
	             |			(ВЫБРАТЬ
	             |				Остатки3.Номенклатура КАК Номенклатура,
	             |				СУММА(Остатки3.КоличествоОстаток) КАК КоличествоОстаток,
	             |				Остатки3.СторПоставщикКод КАК СторПоставщикКод,
	             |				СУММА(Остатки3.КоличествоВПути) КАК КоличествоВПути
	             |			ИЗ
	             |				(ВЫБРАТЬ
	             |					ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |					ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	             |					0 КАК СторПоставщикКод,
	             |					0 КАК КоличествоВПути
	             |				ИЗ
	             |					РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |							,
	             |							НЕ Склад.Транзитный
	             |								И Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И НЕ Склад.ЗапретитьИспользование
	             |								И ВЫБОР
	             |									КОГДА Склад.Подразделение = &ПодразделениеМСК
	             |										ТОГДА Склад = &СкладМоскваИМ
	             |									ИНАЧЕ ИСТИНА
	             |								КОНЕЦ) КАК ТоварыВРезервеНаСкладахОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					ТоварыНаОтветственномХраненииОстатки.Номенклатура,
	             |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток,
	             |					0,
	             |					0
	             |				ИЗ
	             |					РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	             |							,
	             |							НЕ Склад.Транзитный
	             |								И Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И НЕ Склад.ЗапретитьИспользование
	             |								И Контрагент В (&СписокКонтрагентовОТХ)) КАК ТоварыНаОтветственномХраненииОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					РезервДляИМОстатки.Номенклатура,
	             |					РезервДляИМОстатки.КоличествоОстаток,
	             |					0,
	             |					0
	             |				ИЗ
	             |					РегистрНакопления.РезервДляИМ.Остатки(
	             |							,
	             |							Подразделение В (&СписокГоловное)
	             |								И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва) КАК РезервДляИМОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					ЗаказыПоставщикамОстатки.Номенклатура,
	             |					0,
	             |					0,
	             |					ЗаказыПоставщикамОстатки.КоличествоОстаток
	             |				ИЗ
	             |					РегистрНакопления.ЗаказыПоставщикам.Остатки(
	             |							,
	             |							Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И Подразделение В (&СписокГоловное)) КАК ЗаказыПоставщикамОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					Номенклатура.Ссылка,
	             |					0,
	             |					0,
	             |					16
	             |				ИЗ
	             |					Справочник.Номенклатура КАК Номенклатура
	             |				ГДЕ
	             |					Номенклатура.Производитель = &ПроизводительVISSOL
	             |					И Номенклатура.НоменклатурнаяГруппа = &НоменклатурнаяГруппаКованые
	             |					И Номенклатура.Ссылка В
	             |							(ВЫБРАТЬ
	             |								втНоменклатура.Номенклатура
	             |							ИЗ
	             |								втНоменклатура)) КАК Остатки3
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				Остатки3.Номенклатура,
	             |				Остатки3.СторПоставщикКод) КАК остатки
	             |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |						,
	             |						НЕ ЗаказПокупателя.Транзит
	             |							И ЗаказПокупателя.Проверен
	             |							И Номенклатура В
	             |								(ВЫБРАТЬ
	             |									втНоменклатура.Номенклатура
	             |								ИЗ
	             |									втНоменклатура)) КАК ЗаказыПокупателейОстатки
	             |				ПО остатки.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			остатки.Номенклатура.Код,
	             |			остатки.Номенклатура.ВидТовара,
	             |			остатки.Номенклатура
	             |		
	             |		ОБЪЕДИНИТЬ ВСЕ
	             |		
	             |		ВЫБРАТЬ
	             |			остаткиТр.Подразделение.Код,
	             |			остаткиТр.Номенклатура.Код,
	             |			МАКСИМУМ(остаткиТр.КоличествоОстаток),
	             |			СУММА(ЕСТЬNULL(ЗапросЗаказы.КоличествоОстаток, 0)),
	             |			остаткиТр.Номенклатура.ВидТовара,
	             |			остаткиТр.Номенклатура,
	             |			СУММА(остаткиТр.ФактКоличество),
	             |			СУММА(0)
	             |		ИЗ
	             |			(ВЫБРАТЬ
	             |				ТоварыНаСкладахТр.Подразделение КАК Подразделение,
	             |				ТоварыНаСкладахТр.Номенклатура КАК Номенклатура,
	             |				СУММА(ЕСТЬNULL(ТоварыНаСкладахТр.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	             |				МИНИМУМ(ТоварыНаСкладахТр.СторПоставщикКод) КАК СторПоставщикКод,
	             |				СУММА(ТоварыНаСкладахТр.ФактКоличество) КАК ФактКоличество
	             |			ИЗ
	             |				(ВЫБРАТЬ
	             |					ТоварыНаСкладахОстатки.Склад.Подразделение КАК Подразделение,
	             |					ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	             |					ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	             |					0 КАК СторПоставщикКод,
	             |					ТоварыНаСкладахОстатки.КоличествоОстаток КАК ФактКоличество
	             |				ИЗ
	             |					РегистрНакопления.ТоварыНаСкладах.Остатки(
	             |							,
	             |							НЕ Склад.Подразделение = &ПодрЕКБ
	             |								И Склад.Транзитный
	             |								И НЕ Склад.ЗапретитьИспользование
	             |								И НЕ Склад.Подразделение = &ПустоеПодразделение
	             |								И НЕ Склад.Подразделение = &Ярославль
	             |								И Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И Склад.Подразделение В (&СписокДоступныхПодразделений)
	             |								И ВЫБОР
	             |									КОГДА Склад.Подразделение = &ПодразделениеМСК
	             |										ТОГДА Склад = &СкладМоскваИМ
	             |									ИНАЧЕ ИСТИНА
	             |								КОНЕЦ) КАК ТоварыНаСкладахОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					ТоварыНаОтветственномХраненииОстатки.Склад.Подразделение,
	             |					ТоварыНаОтветственномХраненииОстатки.Номенклатура,
	             |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток,
	             |					0,
	             |					ТоварыНаОтветственномХраненииОстатки.КоличествоОстаток
	             |				ИЗ
	             |					РегистрНакопления.ТоварыНаОтветственномХранении.Остатки(
	             |							,
	             |							НЕ Склад.Подразделение = &ПодрЕКБ
	             |								И Склад.Транзитный
	             |								И Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И НЕ Склад.ЗапретитьИспользование
	             |								И НЕ Склад.Подразделение = &ПустоеПодразделение
	             |								И НЕ Склад.Подразделение = &Ярославль
	             |								И Контрагент В (&СписокКонтрагентовОТХ)
	             |								И Склад.Подразделение В (&СписокДоступныхПодразделений)) КАК ТоварыНаОтветственномХраненииОстатки
	             |				
	             |				ОБЪЕДИНИТЬ ВСЕ
	             |				
	             |				ВЫБРАТЬ
	             |					РезервДляИМОстатки.Подразделение,
	             |					РезервДляИМОстатки.Номенклатура,
	             |					РезервДляИМОстатки.КоличествоОстаток,
	             |					0,
	             |					0
	             |				ИЗ
	             |					РегистрНакопления.РезервДляИМ.Остатки(
	             |							,
	             |							НЕ Подразделение В (&СписокГоловное)
	             |								И КонтрагентДляРезерваИМ = &КонтрагентДляРезерва
	             |								И Подразделение В (&СписокДоступныхПодразделений)) КАК РезервДляИМОстатки) КАК ТоварыНаСкладахТр
	             |			
	             |			СГРУППИРОВАТЬ ПО
	             |				ТоварыНаСкладахТр.Подразделение,
	             |				ТоварыНаСкладахТр.Номенклатура) КАК остаткиТр
	             |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	             |					ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение КАК Подразделение,
	             |					ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	             |					СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК КоличествоОстаток
	             |				ИЗ
	             |					РегистрНакопления.ЗаказыПокупателей.Остатки(
	             |							,
	             |							ЗаказПокупателя.Транзит
	             |								И Номенклатура В
	             |									(ВЫБРАТЬ
	             |										втНоменклатура.Номенклатура
	             |									ИЗ
	             |										втНоменклатура)
	             |								И ЗаказПокупателя.Проверен
	             |								И НЕ ЗаказПокупателя.Подразделение = &ПустоеПодразделение
	             |								И НЕ ЗаказПокупателя.Подразделение = &Ярославль) КАК ЗаказыПокупателейОстатки
	             |				
	             |				СГРУППИРОВАТЬ ПО
	             |					ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение,
	             |					ЗаказыПокупателейОстатки.Номенклатура) КАК ЗапросЗаказы
	             |				ПО остаткиТр.Номенклатура = ЗапросЗаказы.Номенклатура
	             |					И остаткиТр.Подразделение = ЗапросЗаказы.Подразделение
	             |		
	             |		СГРУППИРОВАТЬ ПО
	             |			остаткиТр.Подразделение.Код,
	             |			остаткиТр.Номенклатура.Код,
	             |			остаткиТр.Номенклатура.ВидТовара,
	             |			остаткиТр.Номенклатура) КАК А
	             |	ГДЕ
	             |		(А.остаток - А.Заказано >= &МинОстаток
	             |				ИЛИ А.КоличествоВПути > 0)) КАК Табл1
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	             |		ПО (втНоменклатура.Номенклатура = Табл1.Номенклатура)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НоменклатураКод,
	             |	Подразделение
	             |АВТОУПОРЯДОЧИВАНИЕ";
	
	СписокГоловное = новый СписокЗначений;
	СписокГоловное.Добавить(справочники.Подразделения.ПустаяСсылка());
	СписокГоловное.Добавить(справочники.Подразделения.НайтиПоКоду("00005"));
	
	Запрос.УстановитьПараметр("СвойствоВидУпаковки",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90165"));
	Запрос.УстановитьПараметр("ЗначениеПалеты", Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("01593"));
	
	Запрос.УстановитьПараметр("СписокИсключаемыхПапок",СписокИсключаемыхПапок);
	
	Запрос.УстановитьПараметр("ПроизводительVISSOL",Справочники.Производители.НайтиПоКоду("3657"));
	Запрос.УстановитьПараметр("НоменклатурнаяГруппаКованые",Справочники.НоменклатурныеГруппы.НайтиПоКоду("00022"));

	Запрос.УстановитьПараметр("СписокГоловное",СписокГоловное);
	Запрос.УстановитьПараметр("ПустоеПодразделение",справочники.Подразделения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ярославль",справочники.Подразделения.НайтиПоКоду("00005") );
	Запрос.УстановитьПараметр("ПодрЕКБ",справочники.Подразделения.НайтиПоКоду("00122") );
	Запрос.УстановитьПараметр("ПодразделениеМСК",справочники.Подразделения.НайтиПоКоду("00133") );
	Запрос.УстановитьПараметр("СкладМоскваИМ",справочники.Склады.НайтиПоКоду("02136") );
	Запрос.УстановитьПараметр("ВидыТоваров",ВидыТоваров);
	Запрос.УстановитьПараметр("СписокПапок",СписокПапок);
	
	
	
	Запрос.УстановитьПараметр("МинОстаток", -2001 ); // Остаток на складах от 0 и более	
	
	СписокДоступныхПодразделений = новый СписокЗначений;
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.ПустаяСсылка());
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.НайтиПоКоду("00005"));
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.НайтиПоКоду("00138"));
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.НайтиПоКоду("00106"));
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.НайтиПоКоду("00112"));
	СписокДоступныхПодразделений.Добавить(справочники.Подразделения.НайтиПоКоду("00133"));
	
	Запрос.УстановитьПараметр("СписокДоступныхПодразделений", СписокДоступныхПодразделений); //
	
	Запрос.УстановитьПараметр("КонтрагентДляРезерва", Справочники.Контрагенты.НайтиПоКоду("П004703") ); // 
	
	СписокКонтрагентовОТХ = яштПоставщики.ПолучитьСписокПоставщиков(Истина);  //+++ 01.10.2014
	Запрос.УстановитьПараметр("СписокКонтрагентовОТХ",СписокКонтрагентовОТХ);
	
	
	Рез = Запрос.Выполнить().Выгрузить();
	возврат Рез;
КонецФункции

Процедура ЗаписатьТекстовойУзел(ОбъектXML, Имя, Значение, ОбязательнаяПроверкаНаПустуюСтроку = Истина)
	
	СтрокаЗаписи = ПолучитьСтрокуЗаписиДляXML(Значение);
	
	Если ОбязательнаяПроверкаНаПустуюСтроку
		И НЕ ЗначениеЗаполнено(СтрокаЗаписи) Тогда
		
		Возврат;		
		
	КонецЕсли;	
	
	ОбъектXML.ЗаписатьНачалоЭлемента(Имя);
	ОбъектXML.ЗаписатьТекст(СтрокаЗаписи);
	ОбъектXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ПолучитьСтрокуЗаписиДляXML(Значение)
	
	СтрокаЗаписи = Строка(Значение);
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, Символы.НПП, "");
		СтрокаЗаписи = СтрЗаменить(СтрокаЗаписи, ",", ".");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если Значение Тогда
			СтрокаЗаписи = "true";
		Иначе
			СтрокаЗаписи = "false";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЗаписи;
	
КонецФункции

Функция ПолучитьСписокФайловДляОтправки(КаталогОбмена, МассивПодкаталогов);
	
	СписокФайлов = Новый СписокЗначений;
	Маска		 = "*.*";
	
	ВсеФайлыДляВыгрузки = НайтиФайлы(КаталогОбмена, Маска);
	
	Если МассивПодкаталогов <> Неопределено Тогда
		
		Для Каждого Подкаталог Из МассивПодкаталогов Цикл
			
			ФайлыВПодкаталоге = НайтиФайлы(КаталогОбмена + "\" + Подкаталог, Маска);
			Для Каждого ТекФайл Из ФайлыВПодкаталоге Цикл
				
				Если ТекФайл.ЭтоКаталог() Тогда
					
					ФайлыВДобавочномПодкаталоге = НайтиФайлы(ТекФайл.ПолноеИмя, Маска);
					Для Каждого ТекФайлВПодкаталоге Из ФайлыВДобавочномПодкаталоге Цикл
						
						Если НЕ ТекФайлВПодкаталоге.ЭтоКаталог() Тогда	
							ВсеФайлыДляВыгрузки.Добавить(ТекФайлВПодкаталоге);  								
						КонецЕсли;	
						
					КонецЦикла;	
					
				Иначе	
					ВсеФайлыДляВыгрузки.Добавить(ТекФайл);  
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;			
				
	КонецЕсли;
	
	Для Каждого ТекФайл Из ВсеФайлыДляВыгрузки цикл
		
		Если НЕ ТекФайл.ЭтоКаталог() Тогда
			ПолноеИмяФайлаДляСервера = ПодготовитьИмяФайлаДляСервера(ТекФайл, КаталогОбмена);
			СписокФайлов.Добавить(ТекФайл.ПолноеИмя, ПолноеИмяФайлаДляСервера);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СписокФайлов;
	
КонецФункции	

Функция ПодготовитьИмяФайлаДляСервера(ФайлОбъект, КаталогОбмена)
	
	ПолноеИмяФайлаДляСервера = "";
	
	Если Найти(ФайлОбъект.Имя, ".xml") > 0 Тогда
		ПолноеИмяФайлаДляСервера = ФайлОбъект.Имя;
	Иначе	
		//у картинки надо оставить 2 папки и развернуть слэши
		ПолноеИмяФайлаДляСервера = ФайлОбъект.ПолноеИмя;
		ПутьДляУдаления 		 = КаталогОбмена + "\";
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, ПутьДляУдаления, "");
		ПолноеИмяФайлаДляСервера = СтрЗаменить(ПолноеИмяФайлаДляСервера, "\", "/");
	КонецЕсли;
	
	ПолноеИмяФайлаДляСервера = УдалитьДополнительныеРасширенияФайла(ПолноеИмяФайлаДляСервера);
	
	Возврат ПолноеИмяФайлаДляСервера;
	
КонецФункции

Функция УдалитьДополнительныеРасширенияФайла(ИсходноеИмяФайла)

	ПозицияТочки 			  = Найти(ИсходноеИмяФайла, ".");
	ИмяФайла    			  = Лев(ИсходноеИмяФайла, ПозицияТочки - 1);
	ПраваяЧастьИсходногоИмени = Прав(ИсходноеИмяФайла, СтрДлина(ИсходноеИмяФайла) - ПозицияТочки);
	ПозицияТочки 			  = Найти(ПраваяЧастьИсходногоИмени, ".");
	Расширение 				  = ПраваяЧастьИсходногоИмени;
	Если ПозицияТочки > 0 Тогда
		Расширение = Лев(ПраваяЧастьИсходногоИмени, ПозицияТочки - 1);	
	КонецЕсли;	
	
	Возврат ИмяФайла + "." + Расширение;
	
КонецФункции

Функция ПодготовитьZIPАрхивы(СписокФайлов, КаталогОбмена)
	
	ПолноеИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьАрхива   	     = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива);
	
	СоздатьКаталог(КаталогОбмена);
	Если списокФайлов = неопределено тогда
		ЗаписьАрхива.Добавить(КаталогОбмена + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Иначе
		Для каждого Файло из СписокФайлов цикл
			ЗаписьАрхива.Добавить(КаталогОбмена + "\"+Файло);
		КонецЦикла
	КонецЕсли;
	#Если клиент тогда
	Состояние("Архивирование...");
    #КонецЕсли
	ЗаписьАрхива.Записать();
	
	НовыйСписокФайлов = Новый СписокЗначений;
	НовыйСписокФайлов.Добавить(ПолноеИмяФайлаАрхива, ПолучитьИмяФайлаВ(ПолноеИмяФайлаАрхива));
	
	Возврат ПолноеИмяФайлаАрхива;
	
КонецФункции

Функция ПолучитьИмяФайлаВ(ПолноеИмяФайла)
	
	ИмяФайла = "";
		
	ПромТекст = СтрЗаменить(ПолноеИмяФайла, "/", "\");
	ПромТекст = СтрЗаменить(ПолноеИмяФайла, "\", Символы.ПС);
		
	КоличествоЭлементов = СтрЧислоСтрок(ПромТекст);
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		ИмяФайла = СтрПолучитьСтроку(ПромТекст, Счетчик);
	КонецЦикла;	
		
	Возврат ИмяФайла;
	
КонецФункции

СписокИсключаемыхПапок = новый СписокЗначений;
СписокИсключаемыхПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("9199712")); //! SALE
СписокИсключаемыхПапок.Добавить(Справочники.Номенклатура.НайтиПоКоду("9135077")); //АРХИВ
