Перем ТекстЗапросаДЗ;
Перем ТекстЗапросаКЗ;
Перем ТекстЗапросаКЗАккр;
Перем ТекстЗапросаДС;
Перем ТекстЗапросаСК;
Перем ТекстЗапросаВА;
Перем ТекстЗапросаМатериалы;
Перем ТекстЗапросаПартииТоваровПереданные ;
Перем ТекстЗапросаПО;
Перем ТекстЗапросаЗАСтатья;
Перем ТекстЗапросаКРЕД;
Перем ТекстЗапросаВП;
Перем ТекстЗапросаПУ;
Перем ТекстЗапросаПУРасш;
Перем ТекстЗапросаСПИС;
Перем ТекстЗапросаСПИСРасш;
Перем ТекстЗапросаВЗАИМ;
Перем ТекстЗапросаВЗАИМРасш;
Перем ТекстЗапросаДСПС;
Перем ТекстЗапросаДСПСРасш;
Перем ТекстЗапросаДЗБТ;
Перем ТекстЗапросаДЗБТРасш;
Перем ТекстЗапросаТрехсторонниеПП;
Перем ТекстЗапросаТрехсторонниеППРасш;
Перем ТекстЗапросаПереходящиеЗатраты;
Перем ТекстЗапросаПереходящиеЗатратыРасш;                         
Перем ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПР;
Перем ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПРРасш;
Перем ТекстЗапросаПустойСтатусПартии;
Перем ТекстЗапросаПустойСтатусПартииРасш;
Перем ТекстЗапросаВозвратыПокупателей;
Перем ТекстЗапросаВозвратыПоставщикам;
Перем ТекстЗапросаВозвратыПоставщикамРасш;
Перем ТекстЗапросаОХ;
Перем ТекстЗапросаОХОборот;
Перем ТекстЗапросаОС;
Перем ТекстЗапросаОСОборот;
Перем ТекстЗапросаОСОборотРасш;
Перем ТекстЗапросаКорректировкаНеВП;
Перем ТекстЗапросаКорректировкаНеВПРасш;
Перем ТекстЗапросаПередачаОС;
Перем СписокГруппНоменклатуры;


Перем ДатаИзменена;
Перем ДатаНачИзменена;
Перем ВыводитьЦены;


//// Форма2

Перем СтруктураПоказателейФормы2;

//// Форма2

Процедура ЗаполнитьНачальныеНастройки()	
	
	ЗаполнитьНастройкиЗапросаДЗ();				// Дебиторская задолженность
	ЗаполнитьНастройкиЗапросаКЗ();  			// Кредиторская задолженность
	ЗаполнитьНастройкиЗапросаКЗАккр();  			// Кредиторская задолженность
	ЗаполнитьНастройкиЗапросаДС();  			// Денежные средства
	ЗаполнитьНастройкиЗапросаСК();      		// Склад
	ЗаполнитьНастройкиЗапросаПартииТоваровПереданные();  // Товары переданные на комиссию
	ЗаполнитьНастройкиЗапросаПО();   			// Подотчетники
	ЗаполнитьНастройкиЗапросаКредит();      
	ЗаполнитьНастройкиЗапросаВП();          	// Валовая прибыль
	ЗаполнитьНастройкиЗапросаПУ();	        	// Поступление услуг
	ЗаполнитьНастройкиЗапросаСПИС();        	// Оприходование / списание товаров
	ЗаполнитьНастройкиЗапросаВЗАИМ();       	// Корректировка долгов и взаимозачеты 
	ЗаполнитьНастройкиЗапросаДСПС();        	// Поступление / списание ДС (прочее)
	ЗаполнитьНастройкиЗапросаДЗБТ();        	// Доп. затраты без товаров
	ЗаполнитьНастройкиЗапросаТрехсторонниеПП();
	ЗаполнитьНастройкиЗапросаПереходящиеЗатраты(); 				
	ЗаполнитьНастройкиЗапросаНесовпадающиеСуммаВЗиСуммаУПР();   // Несовпадающие суммы
	ЗаполнитьНастройкиЗапросаПустойСтатусПартии();
	ЗаполнитьНастройкиЗапросаВозвратыПокупателей();             // Не ясно
	ЗаполнитьНастройкиЗапросаВозвратыПоставщикам();
	ЗаполнитьТекстЗапросаОСоборот();
	ЗаполнитьТекстЗапросаОС();
	ЗаполнитьНастройкиЗапросаКорректировкаНеВП();               //Корректировка, не попавшая в валовую прибыль
	ЗаполнитьНастройкиЗапросаПоПередачеОС();
	ЗаполнитьНастройкиЗапросаВА();      		// Внеоборотные активы
	ЗаполнитьНастройкиЗапросаМатериалы();		// Материалы
	
КонецПроцедуры

Функция Максимум(Массив)
	
	Результат = 0;
	
	Для й = 0 по Массив.ВГраница() Цикл
		
		ЭлементМассива = Массив.Получить(й);
		Результат = ?(Результат<ЭлементМассива,ЭлементМассива,Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНастройкиЗапросаДЗ() //Дебеторская задолженность 
	
	Если НЕ ПоВсем Тогда 
		
		ТекстЗапросаДЗ =
		"ВЫБРАТЬ
		|	СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаКон,
		|			(НЕ ДоговорКонтрагента.ТипДоговора В (&ИнвестицииИКредит))
		|			    И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0) КАК ПЗ";
		
	Иначе 
		
		ТекстЗапросаДЗ = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, (НЕ ДоговорКонтрагента.ТипДоговора В (&ИнвестицииИКредит))) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0) КАК ПЗ";		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаКЗ() //Кредиторская задолженность
	
	Если Не ПоВсем Тогда 
		
		ТекстЗапросаКЗ = 
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&ДатаКон,
		|				НЕ ДоговорКонтрагента.ТипДоговора В (&ИнвестицииИКредит)
		|					И НЕ ДоговорКонтрагента.ТипДоговора = &Аккредитив
		|					И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0) КАК ПЗ";
		
	Иначе 
		
		ТекстЗапросаКЗ =
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, (НЕ ДоговорКонтрагента.ТипДоговора В (&ИнвестицииИКредит) И НЕ ДоговорКонтрагента.ТипДоговора = &Аккредитив)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0) КАК ПЗ";			
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаКЗАккр() //Кредиторская задолженность
	
	Если Не ПоВсем Тогда 
		
		ТекстЗапросаКЗАккр = 
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&ДатаКон,
		|				ДоговорКонтрагента.ТипДоговора = &Аккредитив
		|					И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0) КАК ПЗ";
		
	Иначе 
		
		ТекстЗапросаКЗАккр =
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ТипДоговора = &Аккредитив) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	ГДЕ
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0) КАК ПЗ";			
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьТекстЗапросаОС() //Основные средства
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаОС = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Стоимость - ПЗ.Амортизация) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ОС.ВидДвижения = &Приход
		|				ТОГДА ОС.Стоимость
		|			ИНАЧЕ -ОС.Стоимость
		|		КОНЕЦ КАК Стоимость,
		|		ВЫБОР
		|			КОГДА ОС.ВидДвижения = &Приход
		|				ТОГДА ОС.Амортизация
		|			ИНАЧЕ -ОС.Амортизация
		|		КОНЕЦ КАК Амортизация
		|	ИЗ
		|		РегистрНакопления.СтоимостьОС КАК ОС
		|	ГДЕ
		|		ОС.Период <= &ДатаКон
		|		И ОС.Регистратор.Организация = &Организация) КАК ПЗ";
		
	Иначе
		
		ТекстЗапросаОС = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Стоимость - ПЗ.Амортизация) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ОС.ВидДвижения = &Приход
		|				ТОГДА ОС.Стоимость
		|			ИНАЧЕ -ОС.Стоимость
		|		КОНЕЦ КАК Стоимость,
		|		ВЫБОР
		|			КОГДА ОС.ВидДвижения = &Приход
		|				ТОГДА ОС.Амортизация
		|			ИНАЧЕ -ОС.Амортизация
		|		КОНЕЦ КАК Амортизация
		|	ИЗ
		|		РегистрНакопления.СтоимостьОС КАК ОС
		|	ГДЕ
		|		ОС.Период <= &ДатаКон) КАК ПЗ";	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТекстЗапросаОСоборот()  // ОС Оборот + амортизация
	
	
	
	Если Не ПоВсем Тогда 
		
		ТекстЗапросаОСОборот = 
		"ВЫБРАТЬ
		|	П.Стоимость-П.Амортизация КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ПЗ.Стоимость) КАК Стоимость,
		|		СУММА(ПЗ.Амортизация) КАК Амортизация
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Стоимость
		|				ИНАЧЕ -СтоимостьОС.Стоимость
		|			КОНЕЦ КАК Стоимость,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Амортизация
		|				ИНАЧЕ -СтоимостьОС.Амортизация
		|			КОНЕЦ КАК Амортизация
		|		ИЗ
		|			РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ГДЕ
		|			СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И СтоимостьОС.Регистратор.Организация = &Организация
		|			И (НЕ СтоимостьОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)) КАК ПЗ) КАК П";
		
		ТекстЗапросаОСОборотРасш = 		
		"ВЫБРАТЬ
		|	П.Регистратор КАК Документ,
		|	П.Регистратор.Контрагент КАК Контрагент,
		|	П.Стоимость - П.Амортизация КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗ.Регистратор КАК Регистратор,
		|		СУММА(ПЗ.Стоимость) КАК Стоимость,
		|		СУММА(ПЗ.Амортизация) КАК Амортизация
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СтоимостьОС.Регистратор КАК Регистратор,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Стоимость
		|				ИНАЧЕ -СтоимостьОС.Стоимость
		|			КОНЕЦ КАК Стоимость,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Амортизация
		|				ИНАЧЕ -СтоимостьОС.Амортизация
		|			КОНЕЦ КАК Амортизация
		|		ИЗ
		|			РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ГДЕ
		|			СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И СтоимостьОС.Регистратор.Организация = &Организация
		|			И (НЕ СтоимостьОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)) КАК ПЗ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПЗ.Регистратор) КАК П";
		
	Иначе 
		
		ТекстЗапросаОСОборот = 
		"ВЫБРАТЬ
		|	П.Стоимость-П.Амортизация КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ПЗ.Стоимость) КАК Стоимость,
		|		СУММА(ПЗ.Амортизация) КАК Амортизация
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Стоимость
		|				ИНАЧЕ -СтоимостьОС.Стоимость
		|			КОНЕЦ КАК Стоимость,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Амортизация
		|				ИНАЧЕ -СтоимостьОС.Амортизация
		|			КОНЕЦ КАК Амортизация
		|		ИЗ
		|			РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ГДЕ
		|			СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И (НЕ СтоимостьОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)) КАК ПЗ) КАК П";	
		
		ТекстЗапросаОСОборотРасш = 
		"ВЫБРАТЬ
		|	П.Регистратор КАК документ,
		|	П.Регистратор.Контрагент КАК Контрагент,
		|	П.Стоимость - П.Амортизация КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗ.Регистратор КАК Регистратор,
		|		СУММА(ПЗ.Стоимость) КАК Стоимость,
		|		СУММА(ПЗ.Амортизация) КАК Амортизация
		|	ИЗ
		|		(ВЫБРАТЬ
		|			СтоимостьОС.Регистратор КАК Регистратор,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Стоимость
		|				ИНАЧЕ -СтоимостьОС.Стоимость
		|			КОНЕЦ КАК Стоимость,
		|			ВЫБОР
		|				КОГДА СтоимостьОС.ВидДвижения = &Приход
		|					ТОГДА СтоимостьОС.Амортизация
		|				ИНАЧЕ -СтоимостьОС.Амортизация
		|			КОНЕЦ КАК Амортизация
		|		ИЗ
		|			РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ГДЕ
		|			СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И (НЕ СтоимостьОС.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)) КАК ПЗ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПЗ.Регистратор) КАК П";	
		
	КонецЕсли;	
Конецпроцедуры

Функция ЗаполнитьНастройкиЗапросаИнвестиции(ДатаКон, ДатаНач) //Инвестиции
	
	ЗапросИнв = Новый Запрос;
	
	ДоговорыИнв = Новый СписокЗначений;
	ДоговорыИнв.Добавить(Справочники.ТипыДоговоров.Инвестиции);
	ДоговорыИнв.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
	
	ЗапросИнв.УстановитьПараметр("ДатаКон", ДатаКон);
	ЗапросИнв.УстановитьПараметр("Инвестиции", ДоговорыИнв);
	ЗапросИнв.УстановитьПараметр("Организация", Организация);
	
	//*** 30.08.2018
	//*** для организаций WG и YST-Турция в качестве ивнестиций на конец периода показываем затраты, которые производились от имени других организаций, но с указанием подразделений WG и YST (ЯШТ платит зарплату, например)
	Подразделение = Справочники.Подразделения.ПустаяСсылка();
	Если Организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		Подразделение = Справочники.Подразделения.НайтиПоКоду("00162");
	ИначеЕсли Организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		Подразделение = Справочники.Подразделения.НайтиПоКоду("00166");
	КонецЕсли;
	ЗапросИнв.УстановитьПараметр("Подразделение", Подразделение);
	ЗапросИнв.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросИнв.УстановитьПараметр("WG", Справочники.Организации.НайтиПоКоду("00005"));
	ЗапросИнв.УстановитьПараметр("Турция", Справочники.Организации.НайтиПоКоду("00006"));
	
	
	Если Не ПоВсем Тогда 	
		
		ЗапросИнв.Текст = "ВЫБРАТЬ
		                  |	СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		                  |ИЗ
		                  |	(ВЫБРАТЬ
		                  |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		                  |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		                  |	ИЗ
		                  |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		                  |				&ДатаКон,
		                  |				ДоговорКонтрагента.ТипДоговора В (&Инвестиции)
		                  |					И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ПЗ";
		
	Иначе 
		
		ЗапросИнв.Текст = "ВЫБРАТЬ
		                  |	СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		                  |ИЗ
		                  |	(ВЫБРАТЬ
		                  |		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		                  |		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		                  |	ИЗ
		                  |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ТипДоговора В (&Инвестиции)) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ПЗ";
		
	КонецЕсли;
	
	Возврат ЗапросИнв.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаполнитьНастройкиЗапросаКредит() //Кредиты 
	 если не повсем тогда
		ТекстЗапросаКРЕД =
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|				&ДатаКон,
		|				ДоговорКонтрагента.ТипДоговора В (&Кредит)
		|					И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		NULL,
		|		-ЗатратыОбороты.СуммаОборот
		|	ИЗ
		|		РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, Регистратор, Подразделение В (&СписокПодразделений)) КАК ЗатратыОбороты
		|	ГДЕ
		|		ЗатратыОбороты.Регистратор.Организация <> &Организация) КАК ПЗ";
		
	Иначе
		
		ТекстЗапросаКРЕД =
		"ВЫБРАТЬ
		|	-СУММА(ПЗ.СуммаУпрОстаток) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаКон, ДоговорКонтрагента.ТипДоговора В (&Кредит)) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК ПЗ";		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаДС() // Остатки ДС
	
	Если Не ПоВсем Тогда 
		ТекстЗапросаДС = 
		//"ВЫБРАТЬ
		//|	СУММА(П.Сумма) КАК Сумма,
		//|	СУММА(П.СуммаВал) КАК СуммаВал
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		ВЫБОР
		//|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		//|				ТОГДА ДенежныеСредства.СуммаУпр
		//|			ИНАЧЕ -ДенежныеСредства.СуммаУпр
		//|		КОНЕЦ КАК Сумма,
		//|		ВЫБОР
		//|			КОГДА НЕ ДенежныеСредства.БанковскийСчетКасса.ВалютаДенежныхСредств = &руб
		//|				ТОГДА ВЫБОР
		//|						КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		//|							ТОГДА ДенежныеСредства.Сумма
		//|						ИНАЧЕ -ДенежныеСредства.Сумма
		//|					КОНЕЦ
		//|			ИНАЧЕ 0
		//|		КОНЕЦ КАК СуммаВал
		//|	ИЗ
		//|		РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		//|	ГДЕ
		//|		ДенежныеСредства.Период <= &ДатаКон
		//|		И (ДенежныеСредства.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления
		//|				И ДенежныеСредства.Регистратор.Организация = &Организация)) КАК П";
		
		
				"ВЫБРАТЬ
				|	СУММА(П.СуммаВал) КАК СуммаВал,
				|	СУММА(П.Сумма) КАК Сумма
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств <> &Руб
				|				ТОГДА ДенежныеСредстваОстатки.СуммаОстаток
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК СуммаВал,
				|		ДенежныеСредстваОстатки.СуммаУпрОстаток КАК Сумма
				|	ИЗ
				|		РегистрНакопления.ДенежныеСредства.Остатки(&ДатаКон, ) КАК ДенежныеСредстваОстатки
				|	ГДЕ
				|		(ДенежныеСредстваОстатки.БанковскийСчетКасса.Организация = &Организация
				|				ИЛИ ДенежныеСредстваОстатки.БанковскийСчетКасса.Владелец = &Организация)) КАК П";

		
		
		
	Иначе
		ТекстЗапросаДС = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Сумма) КАК Сумма,
		|	СУММА(ПЗ.СуммаВал) КАК СуммаВал
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.СуммаУпрОстаток КАК Сумма,
		|		ВЫБОР
		|			КОГДА НЕ Остатки.БанковскийСчетКасса.ВалютаДенежныхСредств = &руб
		|				ТОГДА Остатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаВал,
		|		Остатки.БанковскийСчетКасса КАК БСК,
		|		1 КАК видрегистра
		|	ИЗ
		|		РегистрНакопления.ДенежныеСредства.Остатки(&ДатаКон, ) КАК Остатки) КАК ПЗ";	
		//ТекстЗапросаДС = 
		//"ВЫБРАТЬ
		//|	СУММА(П.Сумма) КАК Сумма
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		ВЫБОР
		//|			КОГДА ДенежныеСредства.ВидДвижения = &Приход
		//|				ТОГДА ДенежныеСредства.Сумма
		//|			ИНАЧЕ -ДенежныеСредства.Сумма
		//|		КОНЕЦ КАК Сумма
		//|	ИЗ
		//|		РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		//|	ГДЕ
		//|		ДенежныеСредства.Период <= &ДатаКон
		//|		И (ДенежныеСредства.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления
		//|				ИЛИ ДенежныеСредства.Регистратор.Организация в (&Организация))) КАК П";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаСК() // Склад 
	Если Не ПоВсем Тогда
		ТекстЗапросаСК = "ВЫБРАТЬ
		                 |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) КАК Сумма
		                 |ИЗ
		                 |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		                 |			&ДатаНач,
		                 |			НЕ Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
		                 |				И ДокументОприходования.Организация = &Организация) КАК ПартииТоваровНаСкладахОстатки";
	иначе
		ТекстЗапросаСК = "ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаНач, НЕ Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)) КАК ПартииТоваровНаСкладахОстатки";
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаВА() // Внеоборотные активы 				 
	Если Не ПоВсем Тогда
		ТекстЗапросаВА = "ВЫБРАТЬ
		                 |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) КАК Сумма
		                 |ИЗ
		                 |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		                 |			&Период,
		                 |			Номенклатура В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Номенклатура.ВнеоборотныеАктивы))
		                 |				И ДокументОприходования.Организация = &Организация) КАК ПартииТоваровНаСкладахОстатки";
	иначе
		ТекстЗапросаВА = "ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Период, Номенклатура В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Номенклатура.ВнеоборотныеАктивы))) КАК ПартииТоваровНаСкладахОстатки";
	КонецЕсли;
КонецПроцедуры
				 
Процедура ЗаполнитьНастройкиЗапросаМатериалы() // Материалы 				 
	Если Не ПоВсем Тогда
		ТекстЗапросаМатериалы = "ВЫБРАТЬ
		                        |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) КАК Сумма
		                        |ИЗ
		                        |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
		                        |			&Период,
		                        |			Номенклатура В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Номенклатура.Материалы))
		                        |				И ДокументОприходования.Организация = &Организация) КАК ПартииТоваровНаСкладахОстатки";
	иначе
		ТекстЗапросаМатериалы = "ВЫБРАТЬ
		|	ПартииТоваровНаСкладахОстатки.СтоимостьОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&Период, Номенклатура В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.Номенклатура.Материалы))) КАК ПартииТоваровНаСкладахОстатки";
	КонецЕсли;
КонецПроцедуры


Процедура ЗаполнитьНастройкиЗапросаПартииТоваровПереданные()	
	Если Не ПоВсем Тогда
		ТекстЗапросаПартииТоваровПереданные="ВЫБРАТЬ
		|	ЕСТЬNULL(ПартииТоваровПереданныеОстатки.СтоимостьОстаток, 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач, ДокументОприходования.Организация = &Организация) КАК ПартииТоваровПереданныеОстатки" ;
		
	иначе
		ТекстЗапросаПартииТоваровПереданные="ВЫБРАТЬ
		|	ЕстьNULL(СтоимостьОстаток,0) Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаНач, ) " ;
	КонецЕсли;
КонецПроцедуры	

	
Процедура ЗаполнитьНастройкиЗапросаПО() //Подотчетники
	
	Если Не ПоВсем Тогда	
		ТекстЗапросаПО = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.сум) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		таблица.ФизЛицо КАК ФизЛицо,
		|		СУММА(таблица.СуммаУпрОстаток) КАК сум
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТаблицаРегистра.ФизЛицо КАК ФизЛицо,
		|			ТаблицаРегистра.Валюта КАК Валюта,
		|			ТаблицаРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
		|			СУММА(ТаблицаРегистра.СуммаУпрОстаток) КАК СуммаУпрОстаток
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаКон, РасчетНыйдокумент.Организация = &Организация) КАК ТаблицаРегистра
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаРегистра.ФизЛицо,
		|			ТаблицаРегистра.Валюта,
		|			ТаблицаРегистра.РасчетныйДокумент) КАК таблица
		|	
		|	СГРУППИРОВАТЬ ПО
		|		таблица.ФизЛицо) КАК ПЗ";
	иначе
		ТекстЗапросаПО = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.сум) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		таблица.ФизЛицо КАК ФизЛицо,
		|		СУММА(таблица.СуммаУпрОстаток) КАК сум
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТаблицаРегистра.ФизЛицо КАК ФизЛицо,
		|			ТаблицаРегистра.Валюта КАК Валюта,
		|			ТаблицаРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
		|			СУММА(ТаблицаРегистра.СуммаУпрОстаток) КАК СуммаУпрОстаток
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ДатаКон, ) КАК ТаблицаРегистра
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаРегистра.ФизЛицо,
		|			ТаблицаРегистра.Валюта,
		|			ТаблицаРегистра.РасчетныйДокумент) КАК таблица
		|	
		|	СГРУППИРОВАТЬ ПО
		|		таблица.ФизЛицо) КАК ПЗ";				
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаВП() //Валовая прибыль 	
	Если Не ПоВсем Тогда
		ТекстЗапросаВП =
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Стоимость) КАК Стоимость,
		|	СУММА(ПЗ.ВаловаяПрибыль) КАК ВП
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
		|		СУММА(ТаблицаРегистра.СтоимостьОборот) КАК Стоимость,
		|		СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) КАК Себестоимость,
		|		ВЫБОР
		|			КОГДА СУММА(ТаблицаРегистра.СтоимостьОборот) ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(ТаблицаРегистра.СтоимостьОборот)
		|		КОНЕЦ - ВЫБОР
		|			КОГДА СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот)
		|		КОНЕЦ КАК ВаловаяПрибыль,
		|		ТаблицаРегистра.ДоговорКонтрагента.Владелец КАК Покупатель,
		|		ТаблицаРегистра.Номенклатура КАК Номенклатура,
		|		ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, Подразделение В (&СписокПодразделений)) КАК ТаблицаРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПЗВП.Номенклатура КАК Номенклатура,
		|				ПЗВП.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ПЗВП.ЗаказПокупателя КАК ЗаказПокупателя,
		|				ПЗВП.Подразделение КАК Подразделение,
		|				ПЗВП.Регистратор КАК Регистратор,
		|				СУММА(ПЗВП.КоличествоОборот) КАК КоличествоОборот,
		|				СУММА(ПЗВП.СтоимостьОборот) КАК СтоимостьОборот
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ВЫБОР
		|						КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|							ТОГДА ПродажиСебестоимость.ДокументДвижения
		|						ИНАЧЕ ПродажиСебестоимость.Регистратор
		|					КОНЕЦ КАК Регистратор,
		|					ПродажиСебестоимость.Номенклатура КАК Номенклатура,
		|					ПродажиСебестоимость.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ПродажиСебестоимость.ЗаказПокупателя КАК ЗаказПокупателя,
		|					ПродажиСебестоимость.Подразделение КАК Подразделение,
		|					ПродажиСебестоимость.Регистратор КАК Регистратор1,
		|					ПродажиСебестоимость.Количество КАК КоличествоОборот,
		|					ПродажиСебестоимость.Стоимость КАК СтоимостьОборот
		|				ИЗ
		|					РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
		|				ГДЕ
		|					ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон
		|					И Подразделение В (&СписокПодразделений)) КАК ПЗВП
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПЗВП.Номенклатура,
		|				ПЗВП.ХарактеристикаНоменклатуры,
		|				ПЗВП.ЗаказПокупателя,
		|				ПЗВП.Подразделение,
		|				ПЗВП.Регистратор) КАК ТаблицаРегистраСебестоимость
		|			ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
		|				И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
		|				И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
		|				И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
		|				И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаРегистра.ДоговорКонтрагента.Владелец,
		|		ТаблицаРегистра.Номенклатура,
		|		ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения) КАК ПЗ";
		
	иначе
		ТекстЗапросаВП =
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Стоимость) КАК Стоимость,
		|	СУММА(ПЗ.ВаловаяПрибыль) КАК ВП
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ТаблицаРегистра.КоличествоОборот) КАК Количество,
		|		СУММА(ТаблицаРегистра.СтоимостьОборот) КАК Стоимость,
		|		СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) КАК Себестоимость,
		|		ВЫБОР
		|			КОГДА СУММА(ТаблицаРегистра.СтоимостьОборот) ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(ТаблицаРегистра.СтоимостьОборот)
		|		КОНЕЦ - ВЫБОР
		|			КОГДА СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот) ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ СУММА(ТаблицаРегистраСебестоимость.СтоимостьОборот)
		|		КОНЕЦ КАК ВаловаяПрибыль,
		|		ТаблицаРегистра.ДоговорКонтрагента.Владелец КАК Покупатель,
		|		ТаблицаРегистра.Номенклатура КАК Номенклатура,
		|		ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ТаблицаРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПЗВП.Номенклатура КАК Номенклатура,
		|				ПЗВП.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|				ПЗВП.ЗаказПокупателя КАК ЗаказПокупателя,
		|				ПЗВП.Подразделение КАК Подразделение,
		|				ПЗВП.Регистратор КАК Регистратор,
		|				СУММА(ПЗВП.КоличествоОборот) КАК КоличествоОборот,
		|				СУММА(ПЗВП.СтоимостьОборот) КАК СтоимостьОборот
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ВЫБОР
		|						КОГДА ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|							ТОГДА ПродажиСебестоимость.ДокументДвижения
		|						ИНАЧЕ ПродажиСебестоимость.Регистратор
		|					КОНЕЦ КАК Регистратор,
		|					ПродажиСебестоимость.Номенклатура КАК Номенклатура,
		|					ПродажиСебестоимость.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|					ПродажиСебестоимость.ЗаказПокупателя КАК ЗаказПокупателя,
		|					ПродажиСебестоимость.Подразделение КАК Подразделение,
		|					ПродажиСебестоимость.Регистратор КАК Регистратор1,
		|					ПродажиСебестоимость.Количество КАК КоличествоОборот,
		|					ПродажиСебестоимость.Стоимость КАК СтоимостьОборот
		|				ИЗ
		|					РегистрНакопления.ПродажиСебестоимость КАК ПродажиСебестоимость
		|				ГДЕ
		|					ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПЗВП
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПЗВП.Номенклатура,
		|				ПЗВП.ХарактеристикаНоменклатуры,
		|				ПЗВП.ЗаказПокупателя,
		|				ПЗВП.Подразделение,
		|				ПЗВП.Регистратор) КАК ТаблицаРегистраСебестоимость
		|			ПО ТаблицаРегистра.Номенклатура = ТаблицаРегистраСебестоимость.Номенклатура
		|				И ТаблицаРегистра.ХарактеристикаНоменклатуры = ТаблицаРегистраСебестоимость.ХарактеристикаНоменклатуры
		|				И ТаблицаРегистра.ЗаказПокупателя = ТаблицаРегистраСебестоимость.ЗаказПокупателя
		|				И ТаблицаРегистра.Подразделение = ТаблицаРегистраСебестоимость.Подразделение
		|				И ТаблицаРегистра.Регистратор = ТаблицаРегистраСебестоимость.Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаРегистра.ДоговорКонтрагента.Владелец,
		|		ТаблицаРегистра.Номенклатура,
		|		ТаблицаРегистра.Номенклатура.БазоваяЕдиницаИзмерения) КАК ПЗ";
		
	КонецЕсли;
КонецПроцедуры 

Процедура ЗаполнитьНастройкиЗапросаПУ() //Поступление услуг
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаПУ =
		"ВЫБРАТЬ
		|	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Организация = &Организация
		|	И ПоступлениеТоваровУслугУслуги.СтатьяЗатрат = &ПустаяСтатья
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
		
		ТекстЗапросаПУРасш =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Документ,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Организация = &Организация
		|	И ПоступлениеТоваровУслугУслуги.СтатьяЗатрат = &ПустаяСтатья
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
		
	Иначе 
		
		ТекстЗапросаПУ = 
		"ВЫБРАТЬ
		|	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК сумма
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПоступлениеТоваровУслугУслуги.СтатьяЗатрат = &ПустаяСтатья
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
		
		ТекстЗапросаПУРасш =
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Ссылка КАК Документ,
		|	ПоступлениеТоваровУслугУслуги.Сумма КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПоступлениеТоваровУслугУслуги.СтатьяЗатрат = &ПустаяСтатья
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
		
	КонецЕсли;		
	
КонецПроцедуры 

Процедура ЗаполнитьНастройкиЗапросаСПИС() //Оприходование / списание товаров
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаСПИС = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|				ТОГДА ПартииТоваровНаСкладах.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	(ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|			ИЛИ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров)
		|	И ПартииТоваровНаСкладах.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|	И (НЕ ПартииТоваровНаСкладах.Регистратор.Склад В (&СписокСкладов))";	
		
		ТекстЗапросаСПИСРасш =
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладах.Регистратор КАК Документ,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|				ТОГДА ПартииТоваровНаСкладах.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|		КОНЕЦ) КАК Сумма,
		|	ПартииТоваровНаСкладах.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	(ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|			ИЛИ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров)
		|	И ПартииТоваровНаСкладах.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|	И (НЕ ПартииТоваровНаСкладах.Регистратор.Склад В (&СписокСкладов))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладах.Регистратор,
		|	ПартииТоваровНаСкладах.Регистратор.Контрагент";
		
	Иначе
		
		ТекстЗапросаСПИС = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|				ТОГДА ПартииТоваровНаСкладах.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	(ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|			ИЛИ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров)
		|	И ПартииТоваровНаСкладах.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И (НЕ ПартииТоваровНаСкладах.Регистратор.Склад В (&СписокСкладов))";	
		
		ТекстЗапросаСПИСРасш =
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладах.Регистратор КАК Документ,
		|	СУММА(ВЫБОР
		|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|				ТОГДА ПартииТоваровНаСкладах.Стоимость
		|			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|		КОНЕЦ) КАК Сумма,
		|	ПартииТоваровНаСкладах.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	(ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
		|			ИЛИ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров)
		|	И ПартииТоваровНаСкладах.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И (НЕ ПартииТоваровНаСкладах.Регистратор.Склад В (&СписокСкладов))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладах.Регистратор,
		|	ПартииТоваровНаСкладах.Регистратор.Контрагент";
		
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьНастройкиЗапросаВЗАИМ() //Корректировка долгов и взаимозачеты 
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаВЗАИМ = 
		"ВЫБРАТЬ
		|	СУММА(ПЗПКонецПроцедуры.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|				ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаУпр
		|		КОНЕЦ КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|	ГДЕ
		|		(ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет
		|				ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга)
		|		И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация) КАК ПЗПКонецПроцедуры"; 
		
		ТекстЗапросаВЗАИМРасш =
		"ВЫБРАТЬ
		|	ПЗПКонецПроцедуры.Документ,
		|	ПЗПКонецПроцедуры.Контрагент,
		|	СУММА(ПЗПКонецПроцедуры.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП123.Регистратор КАК Документ,
		|		ПЗП123.Сумма КАК Сумма,
		|		ВЫБОР
		|			КОГДА ПЗП123.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|				ТОГДА ПЗП123.Регистратор.Контрагент
		|			ИНАЧЕ ПЗП123.Регистратор.КонтрагентДебитор
		|		КОНЕЦ КАК Контрагент
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|					ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|				ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаУпр
		|			КОНЕЦ КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			(ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет
		|					ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга)
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация) КАК ПЗП123) КАК ПЗПКонецПроцедуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗПКонецПроцедуры.Документ,
		|	ПЗПКонецПроцедуры.Контрагент"; 
	Иначе
		
		ТекстЗапросаВЗАИМ = 
		"ВЫБРАТЬ
		|	СУММА(ПЗПКонецПроцедуры.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|				ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаУпр
		|		КОНЕЦ КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|	ГДЕ
		|		(ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет
		|				ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга)
		|		И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПЗПКонецПроцедуры"; 
		
		ТекстЗапросаВЗАИМРасш = 
		"ВЫБРАТЬ
		|	ПЗПКонецПроцедуры.Документ,
		|	ПЗПКонецПроцедуры.Контрагент,
		|	СУММА(ПЗПКонецПроцедуры.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП123.Регистратор КАК Документ,
		|		ПЗП123.Сумма КАК Сумма,
		|		ВЫБОР
		|			КОГДА ПЗП123.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|				ТОГДА ПЗП123.Регистратор.Контрагент
		|			ИНАЧЕ ПЗП123.Регистратор.КонтрагентДебитор
		|		КОНЕЦ КАК Контрагент
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|					ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|				ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаУпр
		|			КОНЕЦ КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			(ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет
		|					ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга)
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПЗП123) КАК ПЗПКонецПроцедуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗПКонецПроцедуры.Документ,
		|	ПЗПКонецПроцедуры.Контрагент"; 
		
	КонецЕсли;

Конецпроцедуры

Процедура ЗаполнитьНастройкиЗапросаДСПС()  //Поступление / списание ДС (прочее)
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаДСПС = 
		"ВЫБРАТЬ
		|	СУММА(ПЗП.Сумма) КАК сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДС.Регистратор КАК Регистратор,
		|		ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|		ЕСТЬNULL(Партии.Сумма, 0) КАК ПартииСумма,
		|		ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|		ЕСТЬNULL(Подотчетники.Сумма, 0) КАК ПодотчетникиСумма,
		|		ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма,
		|		ЕСТЬNULL(Продажи.Сумма, 0) КАК ПродажиСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДенежныеСредства.Регистратор КАК Регистратор,
		|			СУММА(ВЫБОР
		|					КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|						ТОГДА ДенежныеСредства.Сумма
		|					ИНАЧЕ -ДенежныеСредства.Сумма
		|				КОНЕЦ) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|		ГДЕ
		|			ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И ДенежныеСредства.Регистратор.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредства.Регистратор) КАК ДС
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход
		|							ТОГДА ПартииТоваровНаСкладах.Стоимость
		|						ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|			ГДЕ
		|				ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПартииТоваровНаСкладах.Регистратор) КАК Партии
		|			ПО ДС.Регистратор = Партии.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|			ПО ДС.Регистратор = Контрагенты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|						ИНАЧЕ -ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами КАК ВзаиморасчетыСПодотчетнымиЛицами
		|			ГДЕ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ВзаиморасчетыСПодотчетнымиЛицами.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор) КАК Подотчетники
		|			ПО ДС.Регистратор = Подотчетники.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Затраты.Регистратор КАК Регистратор,
		|				СУММА(Затраты.Сумма) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Затраты КАК Затраты
		|			ГДЕ
		|				Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И Затраты.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Затраты.Регистратор) КАК Затраты
		|			ПО ДС.Регистратор = Затраты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Продажи.Регистратор КАК Регистратор,
		|				СУММА(Продажи.Стоимость) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Продажи КАК Продажи
		|			ГДЕ
		|				Продажи.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И Продажи.Подразделение В(&списокПодразделений)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Продажи.Регистратор) КАК Продажи
		|			ПО ДС.Регистратор = Продажи.Регистратор) КАК ПЗП
		|ГДЕ
		|	ПЗП.Сумма <> -ПЗП.КонтрагентыСумма
		|	И -ПЗП.КонтрагентыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПодотчетникиСумма
		|	И ПЗП.ПодотчетникиСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПартииСумма
		|	И ПЗП.ПартииСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ЗатратыСумма
		|	И ПЗП.ЗатратыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПродажиСумма
		|	И ПЗП.ПродажиСумма = 0";
		//И (ДС.Сумма<>(Контрагенты.Сумма+Подотчетники.Сумма)) и (ДС.Сумма<>(Контрагенты.Сумма+Партии.Сумма))
		
		ТекстЗапросаДСПСРасш = 
		"ВЫБРАТЬ
		|	ПЗП.Регистратор КАК Документ,
		|	СУММА(ПЗП.Сумма) КАК сумма,
		|	"" "" КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДС.Регистратор КАК Регистратор,
		|		ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|		ЕСТЬNULL(Партии.Сумма, 0) КАК ПартииСумма,
		|		ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|		ЕСТЬNULL(Подотчетники.Сумма, 0) КАК ПодотчетникиСумма,
		|		ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма,
		|		ЕСТЬNULL(Продажи.Сумма, 0) КАК ПродажиСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДенежныеСредства.Регистратор КАК Регистратор,
		|			СУММА(ВЫБОР
		|					КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|						ТОГДА ДенежныеСредства.Сумма
		|					ИНАЧЕ -ДенежныеСредства.Сумма
		|				КОНЕЦ) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|		ГДЕ
		|			ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И ДенежныеСредства.Регистратор.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредства.Регистратор) КАК ДС
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход
		|							ТОГДА ПартииТоваровНаСкладах.Стоимость
		|						ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|			ГДЕ
		|				ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПартииТоваровНаСкладах.Регистратор) КАК Партии
		|			ПО ДС.Регистратор = Партии.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|			ПО ДС.Регистратор = Контрагенты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|						ИНАЧЕ -ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами КАК ВзаиморасчетыСПодотчетнымиЛицами
		|			ГДЕ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ВзаиморасчетыСПодотчетнымиЛицами.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор) КАК Подотчетники
		|			ПО ДС.Регистратор = Подотчетники.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Затраты.Регистратор КАК Регистратор,
		|				СУММА(Затраты.Сумма) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Затраты КАК Затраты
		|			ГДЕ
		|				Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И Затраты.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Затраты.Регистратор) КАК Затраты
		|			ПО ДС.Регистратор = Затраты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Продажи.Регистратор КАК Регистратор,
		|				СУММА(Продажи.Стоимость) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Продажи КАК Продажи
		|			ГДЕ
		|				Продажи.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И Продажи.Подразделение В(&списокПодразделений)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Продажи.Регистратор) КАК Продажи
		|			ПО ДС.Регистратор = Продажи.Регистратор) КАК ПЗП
		|ГДЕ
		|	ПЗП.Сумма <> -ПЗП.КонтрагентыСумма
		|	И -ПЗП.КонтрагентыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПодотчетникиСумма
		|	И ПЗП.ПодотчетникиСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПартииСумма
		|	И ПЗП.ПартииСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ЗатратыСумма
		|	И ПЗП.ЗатратыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПродажиСумма
		|	И ПЗП.ПродажиСумма = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗП.Регистратор";
	Иначе
		ТекстЗапросаДСПС = 
		"ВЫБРАТЬ
		|	СУММА(ПЗП.Сумма) КАК сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДС.Регистратор КАК Регистратор,
		|		ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|		ЕСТЬNULL(Партии.Сумма, 0) КАК ПартииСумма,
		|		ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|		ЕСТЬNULL(Подотчетники.Сумма, 0) КАК ПодотчетникиСумма,
		|		ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма,
		|		ЕСТЬNULL(Продажи.Сумма, 0) КАК ПродажиСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДенежныеСредства.Регистратор КАК Регистратор,
		|			СУММА(ВЫБОР
		|					КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|						ТОГДА ДенежныеСредства.Сумма
		|					ИНАЧЕ -ДенежныеСредства.Сумма
		|				КОНЕЦ) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|		ГДЕ
		|			ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредства.Регистратор) КАК ДС
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход
		|							ТОГДА ПартииТоваровНаСкладах.Стоимость
		|						ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|			ГДЕ
		|				ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПартииТоваровНаСкладах.Регистратор) КАК Партии
		|			ПО ДС.Регистратор = Партии.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|			ПО ДС.Регистратор = Контрагенты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|						ИНАЧЕ -ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами КАК ВзаиморасчетыСПодотчетнымиЛицами
		|			ГДЕ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор) КАК Подотчетники
		|			ПО ДС.Регистратор = Подотчетники.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Затраты.Регистратор КАК Регистратор,
		|				СУММА(Затраты.Сумма) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Затраты КАК Затраты
		|			ГДЕ
		|				Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Затраты.Регистратор) КАК Затраты
		|			ПО ДС.Регистратор = Затраты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Продажи.Регистратор КАК Регистратор,
		|				СУММА(Продажи.Стоимость) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Продажи КАК Продажи
		|			ГДЕ
		|				Продажи.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Продажи.Регистратор) КАК Продажи
		|			ПО ДС.Регистратор = Продажи.Регистратор) КАК ПЗП
		|ГДЕ
		|	ПЗП.Сумма <> -ПЗП.КонтрагентыСумма
		|	И -ПЗП.КонтрагентыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПодотчетникиСумма
		|	И ПЗП.ПодотчетникиСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПартииСумма
		|	И ПЗП.ПартииСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ЗатратыСумма
		|	И ПЗП.ЗатратыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПродажиСумма
		|	И ПЗП.ПродажиСумма = 0";
		//И (ДС.Сумма<>(Контрагенты.Сумма+Подотчетники.Сумма)) и (ДС.Сумма<>(Контрагенты.Сумма+Партии.Сумма))
		
		ТекстЗапросаДСПСРасш = 
		"ВЫБРАТЬ
		|	ПЗП.Регистратор КАК Документ,
		|	СУММА(ПЗП.Сумма) КАК сумма,
		|	"" "" КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДС.Регистратор КАК Регистратор,
		|		ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|		ЕСТЬNULL(Партии.Сумма, 0) КАК ПартииСумма,
		|		ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|		ЕСТЬNULL(Подотчетники.Сумма, 0) КАК ПодотчетникиСумма,
		|		ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма,
		|		ЕСТЬNULL(Продажи.Сумма, 0) КАК ПродажиСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДенежныеСредства.Регистратор КАК Регистратор,
		|			СУММА(ВЫБОР
		|					КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|						ТОГДА ДенежныеСредства.Сумма
		|					ИНАЧЕ -ДенежныеСредства.Сумма
		|				КОНЕЦ) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|		ГДЕ
		|			ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредства.Регистратор) КАК ДС
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ПартииТоваровНаСкладах.ВидДвижения = &Приход
		|							ТОГДА ПартииТоваровНаСкладах.Стоимость
		|						ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|			ГДЕ
		|				ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПартииТоваровНаСкладах.Регистратор) КАК Партии
		|			ПО ДС.Регистратор = Партии.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|			ПО ДС.Регистратор = Контрагенты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСПодотчетнымиЛицами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|						ИНАЧЕ -ВзаиморасчетыСПодотчетнымиЛицами.СуммаВзаиморасчетов
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами КАК ВзаиморасчетыСПодотчетнымиЛицами
		|			ГДЕ
		|				ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСПодотчетнымиЛицами.Регистратор) КАК Подотчетники
		|			ПО ДС.Регистратор = Подотчетники.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Затраты.Регистратор КАК Регистратор,
		|				СУММА(Затраты.Сумма) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Затраты КАК Затраты
		|			ГДЕ
		|				Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Затраты.Регистратор) КАК Затраты
		|			ПО ДС.Регистратор = Затраты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Продажи.Регистратор КАК Регистратор,
		|				СУММА(Продажи.Стоимость) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Продажи КАК Продажи
		|			ГДЕ
		|				Продажи.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Продажи.Регистратор) КАК Продажи
		|			ПО ДС.Регистратор = Продажи.Регистратор) КАК ПЗП
		|ГДЕ
		|	ПЗП.Сумма <> -ПЗП.КонтрагентыСумма
		|	И -ПЗП.КонтрагентыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПодотчетникиСумма
		|	И ПЗП.ПодотчетникиСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПартииСумма
		|	И ПЗП.ПартииСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ЗатратыСумма
		|	И ПЗП.ЗатратыСумма = 0
		|	И ПЗП.Сумма <> -ПЗП.ПродажиСумма
		|	И ПЗП.ПродажиСумма = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗП.Регистратор";
		
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьНастройкиЗапросаДЗБТ()  //Доп. затраты без товаров
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаДЗБТ = 
		"ВЫБРАТЬ
		|	СУММА(РРА.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗПР.Ссылка КАК Ссылка,
		|		ПЗПР.Сумма КАК Сумма,
		|		ПЗПР.количество КАК количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Док.Ссылка КАК Ссылка,
		|			Док.Сумма КАК Сумма,
		|			ЕСТЬNULL(ТоварыПЗ.Количество, 0) КАК количество
		|		ИЗ
		|			Документ.ПоступлениеДопРасходов КАК Док
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПЗП.Ссылка КАК Ссылка,
		|					ЕСТЬNULL(ПЗП.Количество, 0) КАК Количество
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
		|						СУММА(ПоступлениеДопРасходовТовары.Количество) КАК Количество
		|					ИЗ
		|						Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|					ГДЕ
		|						ПоступлениеДопРасходовТовары.Ссылка.Организация = &Организация
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ПоступлениеДопРасходовТовары.Ссылка) КАК ПЗП) КАК ТоварыПЗ
		|				ПО Док.Ссылка = ТоварыПЗ.Ссылка
		|		ГДЕ
		|			Док.Организация = &Организация) КАК ПЗПР
		|	ГДЕ
		|		ПЗПР.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПЗПР.Ссылка.Проведен = ИСТИНА
		//|		И ПЗПР.Ссылка.Организация = &Организация
		|		И ПЗПР.количество = 0) КАК РРА";
		
		ТекстЗапросаДЗБТРасш = 	
		"ВЫБРАТЬ
		|	РРА.Ссылка КАК Документ,
		|	СУММА(РРА.Сумма) КАК Сумма,
		|	РРА.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗПР.Ссылка КАК Ссылка,
		|		ПЗПР.Сумма КАК Сумма,
		|		ПЗПР.количество КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Док.Ссылка КАК Ссылка,
		|			Док.Сумма КАК Сумма,
		|			ЕСТЬNULL(ТоварыПЗ.Количество, 0) КАК количество
		|		ИЗ
		|			Документ.ПоступлениеДопРасходов КАК Док
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПЗП.Ссылка КАК Ссылка,
		|					ЕСТЬNULL(ПЗП.Количество, 0) КАК Количество
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
		|						СУММА(ПоступлениеДопРасходовТовары.Количество) КАК Количество
		|					ИЗ
		|						Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|					ГДЕ
		|						ПоступлениеДопРасходовТовары.Ссылка.Организация = &Организация
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ПоступлениеДопРасходовТовары.Ссылка) КАК ПЗП) КАК ТоварыПЗ
		|				ПО Док.Ссылка = ТоварыПЗ.Ссылка
		|		ГДЕ
		|			Док.Организация = &Организация) КАК ПЗПР
		|	ГДЕ
		|		ПЗПР.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПЗПР.Ссылка.Проведен = ИСТИНА
		//|		И ПЗПР.Ссылка.Организация = &Организация
		|		И ПЗПР.количество = 0) КАК РРА
		|
		|СГРУППИРОВАТЬ ПО
		|	РРА.Ссылка,
		|	РРА.Ссылка.Контрагент";
		
	Иначе
		
		ТекстЗапросаДЗБТ = 
		"ВЫБРАТЬ
		|	СУММА(РРА.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗПР.Ссылка КАК Ссылка,
		|		ПЗПР.Сумма КАК Сумма,
		|		ПЗПР.количество КАК количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Док.Ссылка КАК Ссылка,
		|			Док.Сумма КАК Сумма,
		|			ЕСТЬNULL(ТоварыПЗ.Количество, 0) КАК количество
		|		ИЗ
		|			Документ.ПоступлениеДопРасходов КАК Док
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПЗП.Ссылка КАК Ссылка,
		|					ЕСТЬNULL(ПЗП.Количество, 0) КАК Количество
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
		|						СУММА(ПоступлениеДопРасходовТовары.Количество) КАК Количество
		|					ИЗ
		|						Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ПоступлениеДопРасходовТовары.Ссылка) КАК ПЗП) КАК ТоварыПЗ
		|				ПО Док.Ссылка = ТоварыПЗ.Ссылка) КАК ПЗПР
		|	ГДЕ
		|		ПЗПР.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПЗПР.Ссылка.Проведен = ИСТИНА
		|		И ПЗПР.количество = 0) КАК РРА";
		
		ТекстЗапросаДЗБТРасш = 	
		"ВЫБРАТЬ
		|	РРА.Ссылка КАК Документ,
		|	СУММА(РРА.Сумма) КАК Сумма,
		|	РРА.Ссылка.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗПР.Ссылка КАК Ссылка,
		|		ПЗПР.Сумма КАК Сумма,
		|		ПЗПР.количество КАК количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Док.Ссылка КАК Ссылка,
		|			Док.Сумма КАК Сумма,
		|			ЕСТЬNULL(ТоварыПЗ.Количество, 0) КАК количество
		|		ИЗ
		|			Документ.ПоступлениеДопРасходов КАК Док
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПЗП.Ссылка КАК Ссылка,
		|					ЕСТЬNULL(ПЗП.Количество, 0) КАК Количество
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
		|						СУММА(ПоступлениеДопРасходовТовары.Количество) КАК Количество
		|					ИЗ
		|						Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ПоступлениеДопРасходовТовары.Ссылка) КАК ПЗП) КАК ТоварыПЗ
		|				ПО Док.Ссылка = ТоварыПЗ.Ссылка) КАК ПЗПР
		|	ГДЕ
		|		ПЗПР.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПЗПР.Ссылка.Проведен = ИСТИНА
		|		И ПЗПР.количество = 0) КАК РРА
		|
		|СГРУППИРОВАТЬ ПО
		|	РРА.Ссылка,
		|	РРА.Ссылка.Контрагент";
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьНастройкиЗапросаТрехсторонниеПП()//Трехсторонние ПП (платежные документы) 
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаТрехсторонниеПП = 
		"ВЫБРАТЬ
		|	СУММА(ПРОЛ.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП.Регистратор КАК Регистратор,
		|		ПЗП.Сумма КАК Сумма,
		|		ПЗП.КонтрагентыСумма КАК КонтрагентыСумма,
		|		ПЗП.ЗатратыСумма КАК ЗатратыСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДС.Регистратор КАК Регистратор,
		|			ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|			ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДенежныеСредства.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|							ТОГДА ДенежныеСредства.Сумма
		|						ИНАЧЕ -ДенежныеСредства.Сумма
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|			ГДЕ
		|				ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ДенежныеСредства.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ДенежныеСредства.Регистратор) КАК ДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|					СУММА(ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|							ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						КОНЕЦ) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|				ГДЕ
		|					ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|					И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|				ПО ДС.Регистратор = Контрагенты.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Затраты.Регистратор КАК Регистратор,
		|					СУММА(Затраты.Сумма) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.Затраты КАК Затраты
		|				ГДЕ
		|					Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|					И Затраты.Регистратор.Организация = &Организация
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Затраты.Регистратор) КАК Затраты
		|				ПО ДС.Регистратор = Затраты.Регистратор) КАК ПЗП
		|	ГДЕ
		|		ПЗП.Сумма = -ПЗП.КонтрагентыСумма
		|		И ПЗП.Сумма = -ПЗП.ЗатратыСумма) КАК ПРОЛ";
		
		ТекстЗапросаТрехсторонниеППРасш = 	
		"ВЫБРАТЬ
		|	ПРОЛ.Регистратор КАК Документ,
		|	СУММА(ПРОЛ.Сумма) КАК Сумма,
		|	ПРОЛ.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП.Регистратор КАК Регистратор,
		|		ПЗП.Сумма КАК Сумма,
		|		ПЗП.КонтрагентыСумма КАК КонтрагентыСумма,
		|		ПЗП.ЗатратыСумма КАК ЗатратыСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДС.Регистратор КАК Регистратор,
		|			ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|			ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДенежныеСредства.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|							ТОГДА ДенежныеСредства.Сумма
		|						ИНАЧЕ -ДенежныеСредства.Сумма
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|			ГДЕ
		|				ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				И ДенежныеСредства.Регистратор.Организация = &Организация
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ДенежныеСредства.Регистратор) КАК ДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|					СУММА(ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|							ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						КОНЕЦ) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|				ГДЕ
		|					ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|					И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|				ПО ДС.Регистратор = Контрагенты.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Затраты.Регистратор КАК Регистратор,
		|					СУММА(Затраты.Сумма) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.Затраты КАК Затраты
		|				ГДЕ
		|					Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|					И Затраты.Регистратор.Организация = &Организация
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Затраты.Регистратор) КАК Затраты
		|				ПО ДС.Регистратор = Затраты.Регистратор) КАК ПЗП
		|	ГДЕ
		|		ПЗП.Сумма = -ПЗП.КонтрагентыСумма
		|		И ПЗП.Сумма = -ПЗП.ЗатратыСумма) КАК ПРОЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПРОЛ.Регистратор,
		|	ПРОЛ.Регистратор.Контрагент";
		
	Иначе
		
		ТекстЗапросаТрехсторонниеПП = 
		"Выбрать Сумма(Сумма) как Сумма из (
		|ВЫБРАТЬ
		|	ПЗП.Регистратор,
		|	ПЗП.Сумма,
		|	ПЗП.КонтрагентыСумма,
		|	ПЗП.ЗатратыСумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДС.Регистратор КАК Регистратор,
		|		ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|		ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|		ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДенежныеСредства.Регистратор КАК Регистратор,
		|			СУММА(ВЫБОР
		|					КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|						ТОГДА ДенежныеСредства.Сумма
		|					ИНАЧЕ -ДенежныеСредства.Сумма
		|				КОНЕЦ) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|		ГДЕ
		|			ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ДенежныеСредства.Регистратор) КАК ДС
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|			ГДЕ
		|				ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|			ПО ДС.Регистратор = Контрагенты.Регистратор
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Затраты.Регистратор КАК Регистратор,
		|				СУММА(Затраты.Сумма) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.Затраты КАК Затраты
		|			ГДЕ
		|				Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Затраты.Регистратор) КАК Затраты
		|			ПО ДС.Регистратор = Затраты.Регистратор) КАК ПЗП
		|ГДЕ
		|	ПЗП.Сумма = -ПЗП.КонтрагентыСумма
		|	И ПЗП.Сумма = -ПЗП.ЗатратыСумма) ПРОЛ";
		
		ТекстЗапросаТрехсторонниеППРасш = 	
		"ВЫБРАТЬ
		|	ПРОЛ.Регистратор КАК Документ,
		|	СУММА(ПРОЛ.Сумма) КАК Сумма,
		|	ПРОЛ.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП.Регистратор КАК Регистратор,
		|		ПЗП.Сумма КАК Сумма,
		|		ПЗП.КонтрагентыСумма КАК КонтрагентыСумма,
		|		ПЗП.ЗатратыСумма КАК ЗатратыСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДС.Регистратор КАК Регистратор,
		|			ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|			ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДенежныеСредства.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|							ТОГДА ДенежныеСредства.Сумма
		|						ИНАЧЕ -ДенежныеСредства.Сумма
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|			ГДЕ
		|				ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ДенежныеСредства.Регистратор) КАК ДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|					СУММА(ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|							ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						КОНЕЦ) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|				ГДЕ
		|					ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|				ПО ДС.Регистратор = Контрагенты.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Затраты.Регистратор КАК Регистратор,
		|					СУММА(Затраты.Сумма) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.Затраты КАК Затраты
		|				ГДЕ
		|					Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Затраты.Регистратор) КАК Затраты
		|				ПО ДС.Регистратор = Затраты.Регистратор) КАК ПЗП
		|	ГДЕ
		|		ПЗП.Сумма = -ПЗП.КонтрагентыСумма
		|		И ПЗП.Сумма = -ПЗП.ЗатратыСумма) КАК ПРОЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПРОЛ.Регистратор,
		|	ПРОЛ.Регистратор.Контрагент";
		
	КонецЕсли;
	
 Конецпроцедуры
                                                                              
Процедура ЗаполнитьНастройкиЗапросаПереходящиеЗатраты() // Переходящие затраты
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаПереходящиеЗатраты = 
		"ВЫБРАТЬ
		|	СУММА(ПРОЛ.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.СтоимостьОС.Регистратор
		|					ИЗ
		|						РегистрНакопления.СтоимостьОС
		|					ГДЕ
		|						РегистрНакопления.СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И Затраты.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ";
		
		ТекстЗапросаПереходящиеЗатратыРасш =
		"ВЫБРАТЬ
		|	ПРОЛ.Регистратор КАК Документ,
		|	СУММА(ПРОЛ.Сумма) КАК Сумма,
		|	ПРОЛ.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.СтоимостьОС.Регистратор
		|					ИЗ
		|						РегистрНакопления.СтоимостьОС
		|					ГДЕ
		|						РегистрНакопления.СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И Затраты.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПРОЛ.Регистратор,
		|	ПРОЛ.Регистратор.Контрагент";
	Иначе
		ТекстЗапросаПереходящиеЗатраты = 
		"ВЫБРАТЬ
		|	СУММА(ПРОЛ.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.СтоимостьОС.Регистратор
		|					ИЗ
		|						РегистрНакопления.СтоимостьОС
		|					ГДЕ
		|						РегистрНакопления.СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ";
		
		ТекстЗапросаПереходящиеЗатратыРасш = 
		"ВЫБРАТЬ
		|	ПРОЛ.Регистратор КАК Документ,
		|	СУММА(ПРОЛ.Сумма) КАК Сумма,
		|	ПРОЛ.Регистратор.Контрагент КАК контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.СтоимостьОС.Регистратор
		|					ИЗ
		|						РегистрНакопления.СтоимостьОС
		|					ГДЕ
		|						РегистрНакопления.СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПРОЛ.Регистратор,
		|	ПРОЛ.Регистратор.Контрагент";
		
	КонецЕсли;
	
Конецпроцедуры

Процедура ЗаполнитьНастройкиЗапросаНесовпадающиеДенежныеРегистры() //Не ясно
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаПереходящиеЗатраты = 
		"ВЫБРАТЬ
		|	СУММА(ПРОЛ.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И Затраты.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ";
		
	Иначе
		
		ТекстЗапросаПереходящиеЗатраты = 
		"ВЫБРАТЬ
		|	СУММА(ПРОЛ.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		Затраты.Регистратор КАК Регистратор,
		|		СУММА(Затраты.Сумма) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.Затраты КАК Затраты
		|	ГДЕ
		|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ДенежныеСредства.Регистратор
		|					ИЗ
		|						РегистрНакопления.ДенежныеСредства
		|					ГДЕ
		|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
		|					ИЗ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
		|					ГДЕ
		|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|		И (НЕ Затраты.Регистратор В
		|					(ВЫБРАТЬ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
		|					ИЗ
		|						РегистрНакопления.ПартииТоваровНаСкладах
		|					ГДЕ
		|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Затраты.Регистратор) КАК ПРОЛ";
		
	КонецЕсли;
	
Конецпроцедуры

Процедура ЗаполнитьНастройкиЗапросаНесовпадающиеСуммаВЗиСуммаУПР() // Несовпадающие суммы
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПР = 
		"ВЫБРАТЬ
		|	СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр - ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр <> ВзаиморасчетыСКонтрагентами.СуммаУпр
		|	И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация";	
		
		ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПРРасш = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр КАК Сумма,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр <> ВзаиморасчетыСКонтрагентами.СуммаУпр
		|	И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация";	
		
	Иначе
		
		ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПР = 
		"ВЫБРАТЬ
		|	СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр - ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр <> ВзаиморасчетыСКонтрагентами.СуммаУпр
		|	И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон";	
		
		ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПРРасш = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр КАК Сумма,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр <> ВзаиморасчетыСКонтрагентами.СуммаУпр
		|	И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон";			
		
	КонецЕсли;
	
Конецпроцедуры	

Процедура ЗаполнитьНастройкиЗапросаПустойСтатусПартии() //Партии с пустым статусом
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаПустойСтатусПартии = 
		"ВЫБРАТЬ
		|	-СУММА(ПЗП.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартиИТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ВЫБОР
		|				КОГДА ПартиИТоваровНаСкладах.ВидДвижения = &Приход
		|					ТОГДА ПартиИТоваровНаСкладах.Стоимость
		|				ИНАЧЕ -ПартиИТоваровНаСкладах.Стоимость
		|			КОНЕЦ) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
		|	ГДЕ
		|		ПартиИТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус
		|		И ПартиИТоваровНаСкладах.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартиИТоваровНаСкладах.Регистратор) КАК ПЗП";	
		
		ТекстЗапросаПустойСтатусПартииРасш = 		
		"ВЫБРАТЬ
		|	ПЗП.Регистратор КАК Документ,
		|	ПЗП.Регистратор.Контрагент КАК Контрагент,
		|	-СУММА(ПЗП.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартиИТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ВЫБОР
		|				КОГДА ПартиИТоваровНаСкладах.ВидДвижения = &Приход
		|					ТОГДА ПартиИТоваровНаСкладах.Стоимость
		|				ИНАЧЕ -ПартиИТоваровНаСкладах.Стоимость
		|			КОНЕЦ) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
		|	ГДЕ
		|		ПартиИТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус
		|		И ПартиИТоваровНаСкладах.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартиИТоваровНаСкладах.Регистратор) КАК ПЗП
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗП.Регистратор,
		|	ПЗП.Регистратор.Контрагент";	
		
	Иначе
		
		ТекстЗапросаПустойСтатусПартии = 
		"ВЫБРАТЬ
		|	-СУММА(ПЗП.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартиИТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ВЫБОР
		|				КОГДА ПартиИТоваровНаСкладах.ВидДвижения = &Приход
		|					ТОГДА ПартиИТоваровНаСкладах.Стоимость
		|				ИНАЧЕ -ПартиИТоваровНаСкладах.Стоимость
		|			КОНЕЦ) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
		|	ГДЕ
		|		ПартиИТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартиИТоваровНаСкладах.Регистратор) КАК ПЗП";	
		
		ТекстЗапросаПустойСтатусПартииРасш = 		
		"ВЫБРАТЬ
		|	ПЗП.Регистратор КАК Документ,
		|	ПЗП.Регистратор.Контрагент КАК Контрагент,
		|	-СУММА(ПЗП.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартиИТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ВЫБОР
		|				КОГДА ПартиИТоваровНаСкладах.ВидДвижения = &Приход
		|					ТОГДА ПартиИТоваровНаСкладах.Стоимость
		|				ИНАЧЕ -ПартиИТоваровНаСкладах.Стоимость
		|			КОНЕЦ) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
		|	ГДЕ
		|		ПартиИТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартиИТоваровНаСкладах.Регистратор) КАК ПЗП
		|
		|СГРУППИРОВАТЬ ПО
		|	ПЗП.Регистратор,
		|	ПЗП.Регистратор.Контрагент";	
		
	КонецЕсли;
	
Конецпроцедуры	

Процедура ЗаполнитьНастройкиЗапросаВозвратыПоставщикам() //Возвраты поставщикам (Разницы)
	
	Если Не ПоВсем Тогда
		
		ТекстЗапросаВозвратыПоставщикам = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Сумма + ПЗ1.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|	ГДЕ
		|		ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|		И ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартииТоваровНаСкладах.Регистратор) КАК ПЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|			И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК ПЗ1
		|		ПО ПЗ.Регистратор = ПЗ1.Регистратор
		|ГДЕ
		|	ПЗ.Сумма <> -ПЗ1.Сумма";	
		
		ТекстЗапросаВозвратыПоставщикамРасш = 	
		"ВЫБРАТЬ
		|	ПЗ.Регистратор КАК Документ,
		|	-ПЗ1.Сумма КАК Сумма,
		|	ПЗ.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|	ГДЕ
		|		ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|		И ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартииТоваровНаСкладах.Регистратор) КАК ПЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК ПЗ1
		|		ПО ПЗ.Регистратор = ПЗ1.Регистратор
		|ГДЕ
		|	ПЗ.Сумма <> -ПЗ1.Сумма";	
		
	Иначе 
		
		ТекстЗапросаВозвратыПоставщикам = 
		"ВЫБРАТЬ
		|	СУММА(ПЗ.Сумма + ПЗ1.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|	ГДЕ
		|		ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|		И ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартииТоваровНаСкладах.Регистратор) КАК ПЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК ПЗ1
		|		ПО ПЗ.Регистратор = ПЗ1.Регистратор
		|ГДЕ
		|	ПЗ.Сумма <> -ПЗ1.Сумма";	
		
		ТекстЗапросаВозвратыПоставщикамРасш = 		
		"ВЫБРАТЬ
		|	ПЗ.Регистратор КАК Документ,
		|	-ПЗ1.Сумма КАК Сумма,
		|	ПЗ.Регистратор.Контрагент КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
		|		СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Сумма
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|	ГДЕ
		|		ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|		И ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПартииТоваровНаСкладах.Регистратор) КАК ПЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|			СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Сумма
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ
		|			ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
		|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК ПЗ1
		|		ПО ПЗ.Регистратор = ПЗ1.Регистратор
		|ГДЕ
		|	ПЗ.Сумма <> -ПЗ1.Сумма";	
		
	КонецЕсли;
	
Конецпроцедуры	

Процедура ЗаполнитьНастройкиЗапросаВозвратыПокупателей() //Не ясно
	
	//ТекстЗапросаВозвратыПокупателей = 
	//	"ВЫБРАТЬ
	//	|	СУММА(ПартиИТоваровНаСкладах.Стоимость) КАК Сумма
	//	|ИЗ
	//	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
	//	|ГДЕ
	//	|	ПартиИТоваровНаСкладах.Период МЕЖДУ (&ДатаНач) И (&ДатаКон)
	//	|	И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус";	
	
Конецпроцедуры	

Процедура ЗаполнитьНастройкиЗапросаКорректировкаНеВП() //Корректировка, не попавшая в валовую прибыль
	Если Не ПоВсем Тогда 	
		
		ТекстЗапросаКорректировкаНеВП = 
		"ВЫБРАТЬ
		|	СУММА(ПР.Стоимость) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПродажиСебестоимость.ВидДвижения = &Расход
		|				ТОГДА -ПродажиСебестоимость.Стоимость
		|			ИНАЧЕ ПродажиСебестоимость.Стоимость
		|		КОНЕЦ КАК Стоимость
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПродажиСебестоимость
		|	ГДЕ
		|		(ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.СписаниеНераспределенныхОстатков
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
		|		И ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		) КАК ПР";
		
		ТекстЗапросаКорректировкаНеВПРасш = 
		"ВЫБРАТЬ
		|	СУММА(ПР.Стоимость) КАК Сумма,
		|	ПР.Регистратор КАК Документ,
		|	"""" КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПродажиСебестоимость.ВидДвижения = &Расход
		|				ТОГДА -ПродажиСебестоимость.Стоимость
		|			ИНАЧЕ ПродажиСебестоимость.Стоимость
		|		КОНЕЦ КАК Стоимость,
		|		ПродажиСебестоимость.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПродажиСебестоимость
		|	ГДЕ
		|		(ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.СписаниеНераспределенныхОстатков
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
		|		И ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		) КАК ПР
		|
		|СГРУППИРОВАТЬ ПО
		|	ПР.Регистратор";
		
	Иначе 
		
		ТекстЗапросаКорректировкаНеВП = 
		"ВЫБРАТЬ
		|	СУММА(ПР.Стоимость) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПродажиСебестоимость.ВидДвижения = &Расход
		|				ТОГДА -ПродажиСебестоимость.Стоимость
		|			ИНАЧЕ ПродажиСебестоимость.Стоимость
		|		КОНЕЦ КАК Стоимость
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПродажиСебестоимость
		|	ГДЕ
		|		(ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.СписаниеНераспределенныхОстатков
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
		|		И ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПР";
		
		ТекстЗапросаКорректировкаНеВПРасш = 
		"ВЫБРАТЬ
		|	СУММА(ПР.Стоимость) КАК Сумма,
		|	ПР.Регистратор КАК Документ,
		|	"""" КАК Контрагент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПродажиСебестоимость.ВидДвижения = &Расход
		|				ТОГДА -ПродажиСебестоимость.Стоимость
		|			ИНАЧЕ ПродажиСебестоимость.Стоимость
		|		КОНЕЦ КАК Стоимость,
		|		ПродажиСебестоимость.Регистратор КАК Регистратор
		|	ИЗ
		|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПродажиСебестоимость
		|	ГДЕ
		|		(ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.СписаниеНераспределенныхОстатков
		|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
		|		И ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПР
		|
		|СГРУППИРОВАТЬ ПО
		|	ПР.Регистратор";	
		
	КонецЕсли;

КонецПроцедуры	

Процедура ЗаполнитьНастройкиЗапросаПоПередачеОС()
	
	ТекстЗапросаПередачаОС = ПолучитьТекстЗапросаОСПередача(Ложь);	
	
КонецПроцедуры

Функция ВернутьМоментВремениВзаиморасчеты(ДатаВозврата)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",ДатаВозврата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.Период = &ДатаНач
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата";
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		
		Возврат Новый МоментВремени(ДатаВозврата, Выб.Регистратор);
		
	Иначе 
		
		Возврат Новый МоментВремени(ДатаВозврата);
		
	КонецЕсли;
	
КонецФункции	

Функция ВернутьмоментВремениСклад(ДатаВозврата)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",ДатаВозврата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.Период = &ДатаНач
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладах.Регистратор.Дата";
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		
		Возврат Новый МоментВремени(ДатаВозврата, Выб.Регистратор);
		
	Иначе 
		
		Возврат Новый МоментВремени(ДатаВозврата);
		
	КонецЕсли;
	
КонецФункции	

Процедура КоманднаяПанельФормыОбновить(Кнопка)
		
	ДатаНач = НачалоДня(ДатаНач);	
	
//	ДатаКон = КонецДня(ДатаКон);	
	
	//Организация = Справочники.Организации.НайтиПоКоду("00001");
	
	//***20150703
	//ПоВсем = Истина;
		
	
	
	ЗаполнитьНачальныеНастройки();	
	
	Тип 			= Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Якорная");
	Себестоимость 	= 1;
	Цены = 0; 
	
	ИнвестицииИКредит = Новый СписокЗначений;
	ИнвестицииИКредит.Добавить(Справочники.ТипыДоговоров.Инвестиции);
	ИнвестицииИКредит.Добавить(Справочники.ТипыДоговоров.Кредит);
	ИнвестицииИКредит.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
	ИнвестицииИКредит.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
	
	ВалютаУправленческогоУчета = Справочники.Валюты.НайтиПоКоду("810");	
	
    ТорговаяКомпания = ?(ТорговаяКомпанияЭлемент=Справочники.Контрагенты.ПустаяСсылка(),Справочники.Контрагенты.НайтиПоКоду("00003"),ТорговаяКомпанияЭлемент);
	МассивКоличеств = Новый Массив;
	ТаблСебестоимость = Новый ТаблицаЗначений;
	ТаблСебестоимостьСвернутая = Новый ТаблицаЗначений;
	ТаблСебестоимостьСвернутая.Колонки.Добавить("Номенклатура");
	ТаблСебестоимостьСвернутая.Колонки.Добавить("Сумма");	
	
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00270"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00209"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00269"));

	// Выводим отчет за период !!!!!!!!!	
    ЗапросКЗН 			= Новый Запрос;
	ЗапросДЗН 			= Новый Запрос;
	ЗапросДСН 			= Новый Запрос;
	ЗапросСКН 			= Новый Запрос;
	ЗапросКЗК		 	= Новый Запрос;
	ЗапросДЗК		 	= Новый Запрос;
	ЗапросДСК 			= Новый Запрос;
	ЗапросСКК		 	= Новый Запрос;
	ЗапросПартииТоваровПереданные =Новый Запрос;
	ЗапросПОН			= Новый Запрос;	
	ЗапросПОК 			= Новый Запрос;		
	ЗапросЗА 			= Новый Запрос;	
	ЗапросИнвН 			= Новый Запрос;	
	ЗапросИнвК 			= Новый Запрос;	
	ЗапросКредН 		= Новый Запрос;	
	ЗапросКредК 		= Новый Запрос;	
	ЗапросВП 			= Новый Запрос;
	ЗапросПУ 			= Новый Запрос;
	ЗапросСПИС 			= Новый Запрос;
	ЗапросВЗАИМ 		= Новый Запрос; 
	ЗапросДСПС 			= Новый Запрос; 
	ЗапросДЗБТ 			= Новый Запрос;
	ЗапросТрехсторонниеПП = Новый Запрос; 
	ЗапросПереходящиеЗатраты = Новый Запрос;
	ЗапросНесовпадающиеСуммаВЗиСуммаУПР = Новый Запрос; 
	ЗапросПустойСтатусПартии = Новый Запрос;
	ЗапросВозвратыПоставщикам = Новый Запрос;
	ЗапросОХН			= Новый Запрос;
	ЗапросОХК			= Новый Запрос;
	ЗапросОХОборот 		= Новый Запрос;
	ЗапросОСН			= Новый Запрос;
	ЗапросОСК			= Новый Запрос;
	ЗапросОСОборот		= Новый Запрос;
	ЗапросОСПередача		= Новый Запрос;
	ЗапросКорректировкаНеВП = Новый Запрос;
	ЗапросВАН			= Новый Запрос;
	ЗапросВАК			= Новый Запрос;
	ЗапросМатериалыН	= Новый Запрос;
	ЗапросМатериалыК	= Новый Запрос;
    ЗапросКЗАккрН		= Новый Запрос;
    ЗапросКЗАккрК		= Новый Запрос;

	ТабДок = ЭлементыФормы.РезультатыОтчета;
	ТабДок.Очистить();
	Макет = ЭтотОбъект.ПолучитьМакет("Свернутый");
	// Сформируем информационную строку. 
	СтрокаПериода = "Период: с " + Строка(НачалоДня(ДатаНач)) + " по " + Строка(КонецДня(ДатаКон));
	Область = Макет.ПолучитьОбласть("Период");
	СтрокаЗаголовка = "Управленческий баланс за период с " + Формат(ДатаНач,"ДЛФ=Д") + " по " + Формат(ДатаКон,"ДЛФ=Д"); 
	Область.Параметры.СтрокаЗаголовок = СтрокаЗаголовка;              
	Область.Параметры.СтрокаПериода = СтрокаПериода;              
	ТабДок.Вывести(Область);					
	СтрокаОтбора = "";
						
//	СтрокаОтбора = СтрокаОтбора + ?(ЭтаФорма.ЭлементыФормы.Себестоимость.Значение = 1, ". По себестоимости", ". По типу цен:" + Тип.Наименование);
	СтрокаОтбора = СтрокаОтбора + "По себестоимости.";
					
	Область = Макет.ПолучитьОбласть("Отбор");
	Область.Параметры.СтрокаОтбора = СтрокаОтбора;
	ТабДок.Вывести(Область);	
	
	Область = Макет.ПолучитьОбласть("ТочкаАктуальности");
	Область.Параметры.ТочкаАктуальности = Последовательности.ПартионныйУчет.ПолучитьГраницу().Дата;
	ТабДок.Вывести(Область);
	
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Шапка);	
	
	ЗапросКЗН.Текст = ТекстЗапросаКЗ;      
	ЗапросКЗН.УстановитьПараметр("ДатаКон",ДатаНач);
	ЗапросКЗН.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросКЗН.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросКЗН.УстановитьПараметр("Аккредитив", Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
	ЗапросКЗН.УстановитьПараметр("Организация",Организация);
	РезультатКЗН = ЗапросКЗН.Выполнить();
	ВыборкаКЗН = РезультатКЗН.Выбрать();
					
	ЗапросКЗК.Текст = ТекстЗапросаКЗ;               
	ЗапросКЗК.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросКЗК.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросКЗК.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросКЗК.УстановитьПараметр("Аккредитив", Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
	ЗапросКЗК.УстановитьПараметр("Организация",Организация);
	РезультатКЗК = ЗапросКЗК.Выполнить();
	ВыборкаКЗК = РезультатКЗК.Выбрать();
	
	ЗапросКЗАккрН.Текст = ТекстЗапросаКЗАккр;      
	ЗапросКЗАккрН.УстановитьПараметр("ДатаКон",ДатаНач);
	ЗапросКЗАккрН.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросКЗАккрН.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросКЗАккрН.УстановитьПараметр("Аккредитив", Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
	ЗапросКЗАккрН.УстановитьПараметр("Организация",Организация);
	РезультатКЗАккрН = ЗапросКЗАккрН.Выполнить();
	ВыборкаКЗАккрН = РезультатКЗАккрН.Выбрать();
					
	ЗапросКЗАккрК.Текст = ТекстЗапросаКЗАккр;               
	ЗапросКЗАккрК.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросКЗАккрК.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросКЗАккрК.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросКЗАккрК.УстановитьПараметр("Аккредитив", Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
	ЗапросКЗАккрК.УстановитьПараметр("Организация",Организация);
	РезультатКЗАккрК = ЗапросКЗАккрК.Выполнить();
	ВыборкаКЗАккрК = РезультатКЗАккрК.Выбрать();
				
	ЗапросДЗН.Текст = ТекстЗапросаДЗ;
	ЗапросДЗН.УстановитьПараметр("ДатаКон",ДатаНач);
	//ЗапросДЗН.УстановитьПараметр("ДатаКон",ВернутьмоментВремениВзаиморасчеты(ДатаНач));
	ЗапросДЗН.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросДЗН.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросДЗН.УстановитьПараметр("Организация",Организация);
	РезультатДЗН = ЗапросДЗН.Выполнить();
	ВыборкаДЗН = РезультатДЗН.Выбрать();
					
	ЗапросДЗК.Текст = ТекстЗапросаДЗ;
	ЗапросДЗК.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросДЗК.УстановитьПараметр("ДатаКон",Новый Граница(ДатаКон+1, ВидГраницы.Включая));
	ЗапросДЗК.УстановитьПараметр("ВалютаУправленческогоУчета",ВалютаУправленческогоУчета);
	ЗапросДЗК.УстановитьПараметр("ИнвестицииИКредит",ИнвестицииИКредит);
	ЗапросДЗК.УстановитьПараметр("Организация",Организация);
	РезультатДЗК = ЗапросДЗК.Выполнить();
	ВыборкаДЗК = РезультатДЗК.Выбрать();
	
	ЗапросОрганизации = Новый Запрос("ВЫБРАТЬ
	                                 |	Организации.Ссылка
	                                 |ИЗ
	                                 |	Справочник.Организации КАК Организации");
									 
	Список = ЗапросОрганизации.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ЗапросДСН.Текст = ТекстЗапросаДС;
	ЗапросДСН.УстановитьПараметр("ДатаКон",ДатаНач);
//	ЗапросДСН.УстановитьПараметр("Организация",Организация);
	Если (ПоВсем) Тогда
		
		ЗапросДСН.УстановитьПараметр("Организация",Список);
		
	Иначе
		
		ЗапросДСН.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	ЗапросДСН.УстановитьПараметр("руб",Справочники.Валюты.НайтиПоКоду("643"));
	РезультатДСН = ЗапросДСН.Выполнить();
	ВыборкаДСН = РезультатДСН.Выбрать();
											
	ЗапросДСК.Текст = ТекстЗапросаДС;
	//ЗапросДСК.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));    Плотников исправил границу
	ЗапросДСК.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросДСК.УстановитьПараметр("Организация",Организация);
	Если (ПоВсем) Тогда
		ЗапросДСК.УстановитьПараметр("Организация",Список);
	Иначе 
		ЗапросДСК.УстановитьПараметр("Организация",Организация);
	КонецЕсли;

	ЗапросДСК.УстановитьПараметр("руб",Справочники.Валюты.НайтиПоКоду("643"));
	РезультатДСК = ЗапросДСК.Выполнить();
	ВыборкаДСК = РезультатДСК.Выбрать();
										
	ЗапросСКН.Текст = ТекстЗапросаСК;
	ЗапросСКН.УстановитьПараметр("ДатаНач",ДатаНач);	
	ЗапросСКН.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	ЗапросСКН.УстановитьПараметр("Организация",Организация);
	Если (ВыводитьЦены) Тогда 
		ЗапросСКН.УстановитьПараметр("ТипЦены",Элементыформы.Тип.Значение);
		ЗапросСКН.УстановитьПараметр("ВалютаУпрУчета",ВалютаУправленческогоУчета);
	Иначе 
	КонецЕсли;	
	РезультатСКН = ЗапросСКН.Выполнить();
	ВыборкаСКН = РезультатСКН.Выбрать();
					
	ЗапросСКК.Текст = ТекстЗапросаСК;
	ЗапросСКК.УстановитьПараметр("ДатаНач",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросСКК.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	ЗапросСКК.УстановитьПараметр("Организация",Организация);
	РезультатСКК = ЗапросСКК.Выполнить();
	ВыборкаСКК = РезультатСКК.Выбрать();				
	
	// остатки регистра ПартииТоваровПереданные 	

    ЗапросПартииТоваровПереданные.Текст = ТекстЗапросаПартииТоваровПереданные;
	ЗапросПартииТоваровПереданные.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросПартииТоваровПереданные.УстановитьПараметр("Организация",Организация);
		
	ВыборкаПартииТоваровПереданныеНач= ЗапросПартииТоваровПереданные.Выполнить().Выбрать();
	Если ВыборкаПартииТоваровПереданныеНач.Следующий() Тогда
		ПартииПереданныеНач=ВыборкаПартииТоваровПереданныеНач.Сумма;
	Иначе	
		ПартииПереданныеНач=0;
	КонецЕсли;	
	
	ЗапросПартииТоваровПереданные.УстановитьПараметр("ДатаНач",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));						
	ВыборкаПартииТоваровПереданныеКон= ЗапросПартииТоваровПереданные.Выполнить().Выбрать();
	
	Если ВыборкаПартииТоваровПереданныеКон.Следующий() Тогда
		ПартииПереданныеКон=ВыборкаПартииТоваровПереданныеКон.Сумма;
	Иначе
		ПартииПереданныеКон=0;
	КонецЕсли;	

	
	
	ЗапросПОН.Текст = ТекстЗапросаПО;
	ЗапросПОН.УстановитьПараметр("ДатаКон",ДатаНач);
	ЗапросПОН.УстановитьПараметр("Организация",Организация);
	РезультатПОН = ЗапросПОН.Выполнить();                                
	ВыборкаПОН = РезультатПОН.Выбрать();
					
	ЗапросПОК.Текст = ТекстЗапросаПО;
	ЗапросПОК.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросПОК.УстановитьПараметр("Организация",Организация);
	РезультатПОК = ЗапросПОК.Выполнить();
	ВыборкаПОК = РезультатПОК.Выбрать();
	
	ВыборкаИнвН = ЗаполнитьНастройкиЗапросаИнвестиции(Новый МоментВремени(ДатаНач), Неопределено);
	ВыборкаИнвК = ЗаполнитьНастройкиЗапросаИнвестиции(Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая), Новый МоментВремени(ДатаНач));

	Кр = Новый СписокЗначений;
	Кр.Добавить(Справочники.ТипыДоговоров.Кредит);
	Кр.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);

	ЗапросКредН.Текст = ТекстЗапросаКРЕД;
	Если Не ПоВсем Тогда 	
		списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	   ЗапросКредН.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросКредН.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросКредН.Текст = СтрЗаменить(ЗапросКредН.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросКредН.УстановитьПараметр("списокПодразделений",списокПодразделений);
	КонецЕсли;
	конецЕсли;
	ЗапросКредН.УстановитьПараметр("ДатаНач",Дата(1,1,1));
	ЗапросКредН.УстановитьПараметр("ДатаКон",Новый моментВремени(ДатаНач));

	ЗапросКредН.УстановитьПараметр("Кредит",Кр);
	ЗапросКредН.УстановитьПараметр("Организация",Организация);
	РезультатКредН = ЗапросКредН.Выполнить();
	ВыборкаКредН = РезультатКредН.Выбрать();
	
	ЗапросКредК.Текст = ТекстЗапросаКРЕД;
		Если Не ПоВсем Тогда 	
		списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	   ЗапросКредК.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросКредК.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросКредК.Текст = СтрЗаменить(ЗапросКредК.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросКредК.УстановитьПараметр("списокПодразделений",списокПодразделений);
	КонецЕсли;
	конецЕсли;
	ЗапросКредК.УстановитьПараметр("ДатаНач",Новый моментВремени(ДатаНач));

	ЗапросКредК.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросКредК.УстановитьПараметр("Кредит",Справочники.ТипыДоговоров.НайтиПоКоду("00006"));
	ЗапросКредК.УстановитьПараметр("Кредит",Кр);
	ЗапросКредК.УстановитьПараметр("Организация",Организация);
	РезультатКредК = ЗапросКредК.Выполнить();
	ВыборкаКредК = РезультатКредК.Выбрать();
	
		
	//ЗАТРАТЫ
	ВыборкаЗатраты = ПолучитьЗапросЗатраты();
	
	ЗапросОСН.Текст = ТекстЗапросаОС;
	ЗапросОСН.УстановитьПараметр("ДатаКон",ДатаНач);						
	ЗапросОСН.УстановитьПараметр("Организация",Организация);
	ЗапросОСН.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	РезультатОСН = ЗапросОСН.Выполнить();
	ВыборкаОСН = РезультатОСН.Выбрать();

	ЗапросОСК.Текст = ТекстЗапросаОС;
	ЗапросОСК.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));						
	ЗапросОСК.УстановитьПараметр("Организация",Организация);
	ЗапросОСК.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	РезультатОСК = ЗапросОСК.Выполнить();
	ВыборкаОСК = РезультатОСК.Выбрать();
	
	ЗапросОСОборот.Текст = ТекстЗапросаОСОборот;
	ЗапросОСОборот.УстановитьПараметр("ДатаНач",ДатаНач);	
	ЗапросОСОборот.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));	
	ЗапросОСОборот.УстановитьПараметр("Организация",Организация);
	ЗапросОСОборот.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	ЗапросОСОборот.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	РезультатОСОборот = ЗапросОСОборот.Выполнить();
	ВыборкаОСОборот = РезультатОСОборот.Выбрать();
	
	ЗапросОСПередача.Текст = ТекстЗапросаПередачаОС;
	ЗапросОСПередача.УстановитьПараметр("ДатаНач",ДатаНач);	
	ЗапросОСПередача.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));	
	ЗапросОСПередача.УстановитьПараметр("Организация",Организация);
	ЗапросОСПередача.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	РезультатОСПередача = ЗапросОСПередача.Выполнить();
	ВыборкаОСПередача = РезультатОСПередача.Выбрать();
	
	//***20160118
	ЗапросВАН.Текст = ТекстЗапросаВА;
	ЗапросВАН.УстановитьПараметр("Период", ДатаНач);	
	ЗапросВАН.УстановитьПараметр("Организация",Организация);
	РезультатВАН = ЗапросВАН.Выполнить();
	ВыборкаВАН = РезультатВАН.Выбрать();
					
	ЗапросВАК.Текст = ТекстЗапросаВА;
	ЗапросВАК.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросВАК.УстановитьПараметр("Организация",Организация);
	РезультатВАК = ЗапросВАК.Выполнить();
	ВыборкаВАК = РезультатВАК.Выбрать();
	
	
	
	ЗапросМатериалыН.Текст = ТекстЗапросаМатериалы;
	ЗапросМатериалыН.УстановитьПараметр("Период", ДатаНач);	
	ЗапросМатериалыН.УстановитьПараметр("Организация",Организация);
	РезультатМатериалыН = ЗапросМатериалыН.Выполнить();
	ВыборкаМатериалыН = РезультатМатериалыН.Выбрать();
					
	ЗапросМатериалыК.Текст = ТекстЗапросаМатериалы;
	ЗапросМатериалыК.УстановитьПараметр("Период", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросМатериалыК.УстановитьПараметр("Организация",Организация);
	РезультатМатериалыК = ЗапросМатериалыК.Выполнить();
	ВыборкаМатериалыК = РезультатМатериалыК.Выбрать();
	//***
	
	ЗапросВП.Текст = ТекстЗАпросаВП;
	ЗапросВП.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросВП.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросВП.Текст = СтрЗаменить(ЗапросВП.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
			
	РезультатВП = ЗапросВП.Выполнить();
	ВыборкаВП = РезультатВП.Выбрать();
	                                                                        
	ЗапросПУ.Текст = ТекстЗАпросаПУ;
	ЗапросПУ.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросПУ.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	ЗапросПУ.УстановитьПараметр("ПустаяСтатья",Справочники.СтатьиЗатрат.ПустаяСсылка());
	ЗапросПУ.УстановитьПараметр("Организация",Организация);
	ЗапросПУ.УстановитьПараметр("ПустоеПодразделение",Справочники.Подразделения.ПустаяСсылка());
	РезультатПУ = ЗапросПУ.Выполнить();
	ВыборкаПУ = РезультатПУ.Выбрать();
	
	ЗапросСПИС.Текст = ТекстЗАпросаСПИС;
	ЗапросСПИС.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросСПИС.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	ЗапросСПИС.УстановитьПараметр("Организация",Организация);
	ЗапросСПИС.УстановитьПараметр("СписокСкладов",СписокСкладов);
	РезультатСПИС = ЗапросСПИС.Выполнить();
	ВыборкаСПИС = РезультатСПИС.Выбрать();
	
	ЗапросВЗАИМ.Текст = ТекстЗапросаВЗАИМ;
	ЗапросВЗАИМ.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросВЗАИМ.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	ЗапросВЗАИМ.УстановитьПараметр("Организация",Организация);
	ЗапросВЗАИМ.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	РезультатВЗАИМ = ЗапросВЗАИМ.Выполнить();
	ВыборкаВЗАИМ = РезультатВЗАИМ.Выбрать();
	
	ЗапросДСПС.Текст = ТекстЗапросаДСПС;
	ЗапросДСПС.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросДСПС.УстановитьПараметр("Организация",Организация);
	ЗапросДСПС.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	СтатьиПКО = новый СписокЗначений;
	СтатьиПКО.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	ЗапросДСПС.УстановитьПараметр("СтатьиПКО",СтатьиПКО);
	ЗапросДСПС.УстановитьПараметр("ПолучениеДСВбанке",Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросДСПС.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросДСПС.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросДСПС.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросДСПС.Текст = СтрЗаменить(ЗапросДСПС.Текст,"Продажи.Подразделение В(&списокПодразделений)","не Продажи.Подразделение В(&списокПодразделений)");
	    ЗапросДСПС.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	//СтатьиРКО = новый СписокЗначений;
	//СтатьиРКО.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеРасходыДенежныхСредств);
	//ЗапросДСПС.УстановитьПараметр("СтатьиРКО",СтатьиРКО);
	
	ЗапросДСПС.УстановитьПараметр("ОперацияПрочийПриход",Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее);
	ЗапросДСПС.УстановитьПараметр("ОперацияПрочийРасход",Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	ЗапросДСПС.УстановитьПараметр("ОперацияПрочийПриходПП",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	ЗапросДСПС.УстановитьПараметр("ОперацияПрочийРасходПП",Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
	ЗапросДСПС.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//Лапенков
	//РезультатДСПС = ЗапросДСПС.Выполнить();
	//ВыборкаДСПС = РезультатДСПС.Выбрать();
	//--Лапенков
	
	//Лапенков
	ЗапросДЗБТ.Текст = ТекстЗапросаДЗБТ;
	ЗапросДЗБТ.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросДЗБТ.УстановитьПараметр("ДатаКон",Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросДЗБТ.УстановитьПараметр("Организация",Организация);
	ЗапросДЗБТ.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//РезультатДЗБТ = ЗапросДЗБТ.Выполнить();
	//ВыборкаДЗБТ = РезультатДЗБТ.Выбрать();
	//--Лапенков
	
	// отключил Лапенков
	//ЗапросТрехсторонниеПП.Текст = ТекстЗапросаТрехсторонниеПП;
	//ЗапросТрехсторонниеПП.УстановитьПараметр("ДатаНач",ДатаНач);
	//ЗапросТрехсторонниеПП.УстановитьПараметр("ДатаКон",ДатаКон);
	//ЗапросТрехсторонниеПП.УстановитьПараметр("Организация",Организация);
	//ЗапросТрехсторонниеПП.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//РезультатТрехсторонниеПП 	= ЗапросТрехсторонниеПП.Выполнить();
	//ВыборкаТрехсторонниеПП 		= РезультатТрехсторонниеПП.Выбрать();
	//
	//ЗапросПереходящиеЗатраты.Текст = ТекстЗапросаПереходящиеЗатраты;
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("ДатаНач",ДатаНач);
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("ДатаКон",ДатаКон);
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("Организация",Организация);
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//РезультатПереходящиеЗатраты 	= ЗапросПереходящиеЗатраты.Выполнить();
	//ВыборкаПереходящиеЗатраты 		= РезультатПереходящиеЗатраты.Выбрать();
	//
	//
	//ЗапросНесовпадающиеСуммаВЗиСуммаУПР.Текст = ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПР;
	//ЗапросНесовпадающиеСуммаВЗиСуммаУПР.УстановитьПараметр("ДатаНач",ДатаНач);
	//ЗапросНесовпадающиеСуммаВЗиСуммаУПР.УстановитьПараметр("Организация",Организация);
	//ЗапросНесовпадающиеСуммаВЗиСуммаУПР.УстановитьПараметр("ДатаКон",ДатаКон);
	//

	//РезультатНесовпадающиеСуммаВЗиСуммаУПР 		= ЗапросНесовпадающиеСуммаВЗиСуммаУПР.Выполнить();
	//ВыборкаНесовпадающиеСуммаВЗиСуммаУПР 		= РезультатНесовпадающиеСуммаВЗиСуммаУПР.Выбрать();
	//
	//ЗапросПустойСтатусПартии.Текст = ТекстЗапросаПустойСтатусПартии;
	//ЗапросПустойСтатусПартии.УстановитьПараметр("ДатаКон",ДатаКон);
	//ЗапросПустойСтатусПартии.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	//ЗапросПустойСтатусПартии.УстановитьПараметр("ДатаНач",ДатаНач);			
	//ЗапросПустойСтатусПартии.УстановитьПараметр("Организация",Организация);
	//ЗапросПустойСтатусПартии.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//
	//
	//РезультатПустойСтатусПартии = ЗапросПустойСтатусПартии.Выполнить();
	//ВыборкаПустойСтатусПартии = РезультатПустойСтатусПартии.Выбрать();				
	//-- отключил Лапенков
	
	ЗапросВозвратыПоставщикам.Текст = ТекстЗапросаВозвратыПоставщикам;
	ЗапросВозвратыПоставщикам.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	ЗапросВозвратыПоставщикам.УстановитьПараметр("ДатаНач",ДатаНач);	
	ЗапросВозвратыПоставщикам.УстановитьПараметр("Организация",Организация);
	
	РезультатВозвратыПоставщикам = ЗапросВозвратыПоставщикам.Выполнить();
	ВыборкаВозвратыПоставщикам = РезультатВозвратыПоставщикам.Выбрать();				

	//ЗапросОХН.Текст = ТекстЗапросаОХ;
	//ЗапросОХН.УстановитьПараметр("ДатаНач",ДатаНач);						
	//ЗапросОХН.УстановитьПараметр("Организация",Организация);
	//ЗапросОХН.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	//ЗапросОХН.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//ЗапросОХН.УстановитьПараметр("СписокСкладов",СписокСкладов);
	//РезультатОХН = ЗапросОХН.Выполнить();
	//ВыборкаОХН = РезультатОХН.Выбрать();

	// Лапенков 
	//ЗапросОХК.Текст = ТекстЗапросаОХ;
	//ЗапросОХК.УстановитьПараметр("ДатаНач",ДатаКон);						
	//ЗапросОХК.УстановитьПараметр("Организация",Организация);
	//ЗапросОХК.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	//ЗапросОХК.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//ЗапросОХк.УстановитьПараметр("СписокСкладов",СписокСкладов);

	//РезультатОХК = ЗапросОХК.Выполнить();
	//ВыборкаОХК = РезультатОХК.Выбрать();
	//
	//ЗапросОХОборот.Текст = ТекстЗапросаОХОборот;
	//ЗапросОХОборот.УстановитьПараметр("ДатаНач",ДатаНач);	
	//ЗапросОХОборот.УстановитьПараметр("ДатаКон",ДатаКон);	
	//ЗапросОХОборот.УстановитьПараметр("Организация",Организация);
	//ЗапросОХОборот.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	//ЗапросОХОборот.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	//ЗапросОХОборот.УстановитьПараметр("СписокСкладов",СписокСкладов);
	//РезультатОХОборот = ЗапросОХОборот.Выполнить();
	//ВыборкаОХОборот = РезультатОХОборот.Выбрать();
	
	
	ЗапросКорректировкаНеВП.ТЕкст = ТекстЗапросаКорректировкаНеВП;
	ЗапросКорректировкаНеВП.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросКорректировкаНеВП.УстановитьПараметр("ДатаКон",КонецДня(ДатаКон));
	ЗапросКорректировкаНеВП.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
	//ЗапросКорректировкаНеВП.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросКорректировкаНеВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросКорректировкаНеВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросКорректировкаНеВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросКорректировкаНеВП.Текст = СтрЗаменить(ЗапросКорректировкаНеВП.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросКорректировкаНеВП.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	//ЗапросКорректировкаНеВП.УстановитьПараметр("Документы",КолонкаДоков);
	РезультатКорректировкаНеВП = ЗапросКорректировкаНеВП.Выполнить();
	ВыборкаКорректировкаНеВП = РезультатКорректировкаНеВП.Выбрать(); 
	
	СуммаДЗН 	= 	0;
	СуммаДЗК	=	0;
	СуммаКЗН 	=   0;
	СуммаКЗК 	= 	0;
	СуммаДСН	= 	0;
	СуммаДСК	= 	0;
	СуммаДСНВал	= 	0;
	СуммаДСКВал	= 	0;
	СуммаСКН	= 	0;
	СуммаСКК	= 	0;
	СуммаПОН	= 	0;
	СуммаПОК	= 	0;
	СуммаИнвН 	=	0;
	СуммаИНВК   =   0;
	СуммаКредН  =   0;
	СуммаКредК  =   0;
	СуммаДЗБТ	= 	0;
	СуммаВАН	= 	0;
	СуммаВАК	=	0;	
	СуммаТрехсторонниеПП = 0;
	СуммаПереходящиеЗатраты = 0;
	СуммаНесовпадающиеСуммаВЗиСуммаУПР = 0;
	СуммаПустойСтатусПартии = 0;
	СуммаВозвратыПоставщикам = 0;
	СуммаОХН = 0;
	СуммаОХК = 0;
	СуммаОХОборот = 0;
	СуммаКорректировкаНеВП = 0;
	СуммаОСПередача = 0;
	
	Если (ВыборкаОСН.Следующий()) тогда 
		СуммаОСН = ВыборкаОСН.Сумма;
	КонецЕсли;
	
	Если (ВыборкаОСК.Следующий()) тогда 
		СуммаОСК = ВыборкаОСК.Сумма;
	КонецЕсли;

	Если (ВыборкаОСОборот.Следующий()) тогда 
		СуммаОСОборот = ВыборкаОСОборот.Сумма;
	КонецЕсли;
	
	Если (ВыборкаОСПередача.Следующий()) тогда 
		СуммаОСПередача = ВыборкаОСПередача.Сумма;
	КонецЕсли;

	
	//Если (ВыборкаОХН.Следующий()) тогда 
	//	СуммаОХН = ВыборкаОХН.Сумма;
	//КонецЕсли;
	
	//Если (ВыборкаОХК.Следующий()) тогда 
	//	СуммаОХК = ВыборкаОХК.Сумма;
	//КонецЕсли;
	СуммаОХК=0;

	//Лапенков
	//Если (ВыборкаОХОборот.Следующий()) тогда 
		//СуммаОХОборот = ВыборкаОХОборот.Сумма;
		  СуммаОХОборот=0;
	//КонецЕсли;
	//-Лапенков
	
	Если (ВыборкаДЗН.Следующий()) тогда 
		СуммаДЗН = ВыборкаДЗН.Сумма;
	КонецЕсли;

	Если (ВыборкаДЗК.Следующий()) тогда 
		СуммаДЗК = ВыборкаДЗК.Сумма;
	КонецЕсли;
	
    //Область = Макет.ПолучитьОбласть("Дебиторская");
	
	Область = Макет.ПолучитьОбласть("Баланс");
	Область.Параметры.ДебиторскаяНач	= СуммаДЗН;
    Область.Параметры.ДебиторскаяКон	= СуммаДЗК;
	//ТабДок.Вывести(Область);
	
	Если (ВыборкаКЗН.Следующий()) тогда 
		СуммаКЗН = ВыборкаКЗН.Сумма;
	КонецЕсли;

	Если (ВыборкаКЗК.Следующий()) тогда 
		СуммаКЗК = ВыборкаКЗК.Сумма;
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("Кредиторская");
	
	Область.Параметры.КЗНач	= СуммаКЗН;
    Область.Параметры.КЗКОн	= СуммаКЗК;
	
	Если (ВыборкаКЗАккрН.Следующий()) тогда 
		СуммаКЗАккрН = ВыборкаКЗАккрН.Сумма;
	КонецЕсли;

	Если (ВыборкаКЗАккрК.Следующий()) тогда 
		СуммаКЗАккрК = ВыборкаКЗАккрК.Сумма;
	КонецЕсли;
	
	Область.Параметры.КЗАккрНач	= СуммаКЗАккрН;
    Область.Параметры.КЗАккрКОн	= СуммаКЗАккрК;
	
	//ТабДок.Вывести(Область);
	
	Если (ВыборкаДСН.Следующий()) тогда 
		СуммаДСН = ВыборкаДСН.Сумма;
		СуммаДСНВал = ВыборкаДСН.СуммаВал;
	КонецЕсли;

	Если (ВыборкаДСК.Следующий()) тогда 
		СуммаДСК = ВыборкаДСК.Сумма;
		СуммаДСКВал = ВыборкаДСК.СуммаВал;
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("Денежные");
	
	Область.Параметры.ДСНач	= СуммаДСН;
    Область.Параметры.ДСКон	= СуммаДСК;
	
	Область.Параметры.ДСНачВал	= СуммаДСНВал;
    Область.Параметры.ДСКонВал	= СуммаДСКВал;
	
	//ТабДок.Вывести(Область);
	
	Если (ВыборкаСКН.Следующий()) тогда 
		СуммаСКН = ВыборкаСКН.Сумма;
	КонецЕсли;

	Если (ВыборкаСКК.Следующий()) тогда 
		СуммаСКК = ВыборкаСКК.Сумма;
	КонецЕсли;

	//Область = Макет.ПолучитьОбласть("Склад");
	Область.Параметры.СкладНач = СуммаСКН - ?(СуммаОХН=null,0,СуммаОХН);
    Область.Параметры.СкладКон	= СуммаСКК - ?(СуммаОХК=null,0,СуммаОХК);
	
	
	Область.Параметры.ПартииПереданныеНач = ПартииПереданныеНач;
	Область.Параметры.ПартииПереданныеКон= ПартииПереданныеКон;

	
	//ТабДок.Вывести(Область);
	
	Если (ВыборкаПОН.Следующий()) тогда 
		СуммаПОН = ВыборкаПОН.Сумма;
	КонецЕсли;

	Если (ВыборкаПОК.Следующий()) тогда 
		СуммаПОК = ВыборкаПОК.Сумма;
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("Подотчетники");
	Область.Параметры.ПодотчетникиНач 	= СуммаПОН;
    Область.Параметры.ПодотчетникиКон	= СуммаПОК;
	
	//ТабДок.Вывести(Область);

	Если (ВыборкаИнвН.Следующий()) тогда 
		СуммаИНВН = ?(ВыборкаИнвН.Сумма=неопределено,0,ВыборкаИнвН.Сумма);
	КонецЕсли;

	Если (ВыборкаИнвК.Следующий()) тогда 
		СуммаИНВК = ?(ВыборкаИнвК.Сумма=неопределено,0,ВыборкаИнвК.Сумма);
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("Инвестиции");
	Область.Параметры.ИнвестицииНач 	= СуммаИНВН;
    Область.Параметры.ИнвестицииКон		= СуммаИНВК;
	
	//ТабДок.Вывести(Область);
	
	Если (ВыборкаКредН.Следующий()) тогда 
		СуммаКредН = ?(ВыборкаКредН.Сумма=неопределено,0,ВыборкаКредН.Сумма);
	КонецЕсли;

	Если (ВыборкаКредК.Следующий()) тогда 
		СуммаКредК = ?(ВыборкаКредК.Сумма=неопределено,0,ВыборкаКредК.Сумма);
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("Кредиты");
	Область.Параметры.КредитыНач 	= СуммаКредН;
    Область.Параметры.КредитыКон	= СуммаКредК;
	//Область.Параметры.ОХНачало = СуммаОХН;
	//Область.Параметры.ОХКонец = СуммаОХК;
	Область.Параметры.ОСНач 	= ?(СуммаОСН=null,0,СуммаОСН);
    Область.Параметры.ОСКон		= ?(СуммаОСК=null,0,СуммаОСК);
	
	Если (ВыборкаВАН.Следующий()) тогда 
		СуммаВАН = ?(ВыборкаВАН.Сумма = Неопределено,0,ВыборкаВАН.Сумма);
	КонецЕсли;

	Если (ВыборкаВАК.Следующий()) тогда 
		СуммаВАК = ?(ВыборкаВАК.Сумма = Неопределено,0,ВыборкаВАК.Сумма);
	КонецЕсли;
	Область.Параметры.ВнеобАктивыНач 	= ?(СуммаВАН = null,0,СуммаВАН);
    Область.Параметры.ВнеобАктивыКон	= ?(СуммаВАК = null,0,СуммаВАК);
	
	
	Если (ВыборкаМатериалыН.Следующий()) тогда 
		СуммаМатериалыН = ?(ВыборкаМатериалыН.Сумма = Неопределено,0,ВыборкаМатериалыН.Сумма);
	КонецЕсли;

	Если (ВыборкаМатериалыК.Следующий()) тогда 
		СуммаМатериалыК = ?(ВыборкаМатериалыК.Сумма = Неопределено,0,ВыборкаМатериалыК.Сумма);
	КонецЕсли;
	Область.Параметры.МатериалыНач 	= ?(СуммаМатериалыН = null,0,СуммаМатериалыН);
    Область.Параметры.МатериалыКон	= ?(СуммаМатериалыК = null,0,СуммаМатериалыК);
	
	
	Область.Параметры.ДебиторскаяНачР = "ДЗН";
	Область.Параметры.ДебиторскаяКонР = "ДЗК";
	Область.Параметры.КредитыНачР = "КН";
	Область.Параметры.КредитыКонР = "КК";
	Область.Параметры.КЗНачР = "КЗН";
	Область.Параметры.КЗКонР = "КЗК";
	Область.Параметры.КЗАккрНачР = "КЗАккрН";
	Область.Параметры.КЗАккрКонР = "КЗАккрК";
	Область.Параметры.ИнвестицииНачР = "ИНВН";
	Область.Параметры.ИнвестицииКонР = "ИНВК";
	Область.Параметры.СкладНачР = "СКЛАДН";
	Область.Параметры.СкладКонР = "СКЛАДК";
	Область.Параметры.ПодотчетникиНачР = "ПОН";
	Область.Параметры.ПодотчетникиКонР = "ПОК";
	Область.Параметры.ППН="ППН";
	Область.Параметры.ППК="ППК";
	
	
	Область.Параметры.ДСНачР = "ДСН";
	Область.Параметры.ДСКонР = "ДСК";
	Область.Параметры.ОСР = "ОСР";
	
	Область.Параметры.ВАНР = "ВАНР";
	Область.Параметры.ВАКР = "ВАКР";
	Область.Параметры.МатериалыНР = "МатериалыНР";
	Область.Параметры.МатериалыКР = "МатериалыКР";
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Итого");
	ИтогоНач1 = ?(СуммаДЗН=NULL,0,СуммаДЗН) - ?(СуммаКЗН=NULL,0,СуммаКЗН) + ?(СуммаДСН=NULL,0,СуммаДСН) + ?(СуммаСКН=NULL,0,СуммаСКН) + ?(СуммаПОН=NULL,0,СуммаПОН) + ?(СуммаИНВН=NULL,0,СуммаИНВН) - ?(СуммаКредН=NULL,0,СуммаКредН) + ?(СуммаОСН=null,0,СуммаОСН) - ?(СуммаОХН=null,0,СуммаОХН)+ПартииПереданныеНач+СуммаВАН+СуммаМатериалыН - ?(СуммаКЗАккрН=NULL,0,СуммаКЗАккрН);
	ИтогоКон1 = ?(СуммаДЗК=NULL,0,СуммаДЗК) - ?(СуммаКЗК=NULL,0,СуммаКЗК) + ?(СуммаДСК=NULL,0,СуммаДСК) + ?(СуммаСКК=NULL,0,СуммаСКК) + ?(СуммаПОК=NULL,0,СуммаПОК) + ?(СуммаИНВК=NULL,0,СуммаИНВК) - ?(СуммаКредК=NULL,0,СуммаКредК) + ?(СуммаОСК=null,0,СуммаОСК) - ?(СуммаОХК=null,0,СуммаОХК)+ПартииПереданныеКон+СуммаВАК+СуммаМатериалыК - ?(СуммаКЗАккрК=NULL,0,СуммаКЗАккрК);
	Область.Параметры.ИтогоНач 	= ИтогоНач1;
    Область.Параметры.ИтогоКон	= ИтогоКон1;
	
	Область.Параметры.ИтогоРазница=ИтогоКон1-ИтогоНач1;

	ТабДок.Вывести(Область);
	
	Если СтруктураНастройки.СтроитьТаблицуПоказателей Тогда
		
		Область = Макет.ПолучитьОбласть("ШапкаПоказатели");
		ТабДок.Вывести(Область);
		
		
		//Область = Макет.ПолучитьОбласть("Затраты");
		Область = Макет.ПолучитьОбласть("Оборот");
		Область.Параметры.ОборотР = "ВП";
		Область.Параметры.ЗатратыР = "ЗАТРАТЫ";
		
		Если (ВыборкаЗатраты.Следующий()) тогда 
			СуммаЗатраты = ВыборкаЗатраты.Сумма;
		КонецЕсли;
		
		//ТабДок.Вывести(Область);
		
		Если (ВыборкаВП.Следующий()) тогда 
			СуммаВП 	= ВыборкаВП.ВП;
			СуммаСТЬ 	= ВыборкаВП.Стоимость;
			СуммаПрибыли = СуммаВП;
		КонецЕсли;
		
		СуммаПУ 	= 0;
		Если (ВыборкаПУ.Следующий()) тогда 
			СуммаПУ 	= ВыборкаПУ.Сумма;
		КонецЕсли;
		
		СуммаСПИС 	= 0;
		Если (ВыборкаСПИС.Следующий()) тогда 
			СуммаСПИС 	= ВыборкаСПИС.Сумма;
		КонецЕсли;
		
		СуммаВзаим	= 0;
		Если (ВыборкаВЗАИМ.Следующий()) тогда 
			СуммаВЗАИМ 	= ВыборкаВЗАИМ.Сумма;
		КонецЕсли;
		
		СуммаДСПС = 0;
		//Лапенков
		//Если (ВыборкаДСПС.Следующий()) тогда 
			//СуммаДСПС 	= ВыборкаДСПС.Сумма;
		//КонецЕсли;
		//--Лапенков
		
		//Лапенков
		СуммаДЗБТ = 0;
		//Если (ВыборкаДЗБТ.Следующий()) тогда 
		//	СуммаДЗБТ 	= ВыборкаДЗБТ.Сумма;
		//КонецЕсли;
		//--Лапенков
		СуммаТрехсторонниеПП = 0;
		
		// Отключил Лапенков
		//Если (ВыборкаТрехсторонниеПП.Следующий()) тогда 
		//	СуммаТрехсторонниеПП 	= ВыборкаТрехсторонниеПП.Сумма;
		//КонецЕсли;
		//
		//СуммаПереходящиеЗатраты = 0;
		//// Временно отключаем переходящие затраты
		////Если (ВыборкаПереходящиеЗатраты.Следующий()) тогда 
		////	СуммаПереходящиеЗатраты 	= ВыборкаПереходящиеЗатраты.Сумма;
		////КонецЕсли;
		//
		//СуммаНесовпадающиеСуммаВЗиСуммаУПР = 0;
		//Если (ВыборкаНесовпадающиеСуммаВЗиСуммаУПР.Следующий()) тогда 
		//	СуммаНесовпадающиеСуммаВЗиСуммаУПР 	= ВыборкаНесовпадающиеСуммаВЗиСуммаУПР.Сумма;
		//КонецЕсли;
		//
		//СуммаПустойСтатусПартии = 0;
		//Если (ВыборкаПустойСтатусПартии.Следующий()) тогда 
		//	СуммаПустойСтатусПартии 	= ВыборкаПустойСтатусПартии.Сумма;
		//КонецЕсли;	
		//Область = Макет.ПолучитьОбласть("Оборот");
		Область.Параметры.Оборот = СуммаСТЬ;
		//ТабДок.Вывести(Область);
		//-- Отключил Лапенков
		
		СуммаВозвратыПоставщикам = 0;
		Если (ВыборкаВозвратыПоставщикам.Следующий()) тогда 
			СуммаВозвратыПоставщикам = ВыборкаВозвратыПоставщикам.Сумма;
		КонецЕсли;	
		
		СуммаКорректировкаНеВП = 0;
		Если (ВыборкаКорректировкаНеВП.Следующий()) Тогда 
			СуммаКорректировкаНеВП = ВыборкаКорректировкаНеВП.Сумма;
		КонецЕсли;
		
		//Область = Макет.ПолучитьОбласть("ВаловаяНаценка");
		РасшПоступлениеСписаниеДС = 1;
		Область.Параметры.ВН = СуммаВП;
		Область.Параметры.Затраты = -?(СуммаЗатраты = null, 0, СуммаЗатраты);
		Область.Параметры.ПоступлениеУслуг = -?(СуммаПУ=null,0,СуммаПУ);
		Область.Параметры.СписаниеТоваров = -?(СуммаСПИС=null,0,СуммаСПИС);
		Область.Параметры.Взаимозачеты	= -?(СуммаВзаим=null,0,СуммаВзаим);
		Область.Параметры.ПоступлениеСписаниеДС	= СуммаДСПС;
		Область.Параметры.ДопЗатраты	= -?(СуммаДЗБТ=null,0,СуммаДЗБТ);
		Область.Параметры.ТрехсторонниеПП	= -?(СуммаТрехсторонниеПП=null,0,СуммаТрехсторонниеПП);
		Область.Параметры.ПереходящиеЗатраты= СуммаПереходящиеЗатраты;
		Область.Параметры.НесовпадающиеСуммы= -?(СуммаНесовпадающиеСуммаВЗиСуммаУПР=null,0,СуммаНесовпадающиеСуммаВЗиСуммаУПР);
		Область.Параметры.ПартииСПустымСтатусом = СуммаПустойСтатусПартии;
		Область.Параметры.ВозвратыПОставщикам = -?(СуммаВозвратыПоставщикам=null,0,СуммаВозвратыПоставщикам);
		Область.Параметры.ОCОборот = ?(СуммаОСОборот=null,0,СуммаОСОборот);
		Область.Параметры.ПродажаОС = СуммаОСПередача;
		Область.Параметры.СуммаКорректировкаНеВП = ?(СуммаКорректировкаНеВП=null,0,СуммаКорректировкаНеВП);
		
		Область.Параметры.Расшифровка1 = "1";
		Область.Параметры.Расшифровка2 = "2";
		Область.Параметры.Расшифровка3 = "3";
		Область.Параметры.Расшифровка4 = "4";
		Область.Параметры.Расшифровка5 = "5";
		Область.Параметры.Расшифровка6 = "6";
		Область.Параметры.Расшифровка7 = "7";
		Область.Параметры.Расшифровка8 = "8";
		Область.Параметры.Расшифровка9 = "9";
		Область.Параметры.Расшифровка10 = "10";
		Область.Параметры.Расшифровка11 = "11";
		Область.Параметры.Расшифровка12 = "12";
		Область.Параметры.ОборотРеализацииОС = "ОборотРеализацииОС";
		
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("Прибыль");
		Прибыль = ?(СуммаПрибыли=Null,0,СуммаПрибыли) - ?(СуммаЗатраты=Null,0,СуммаЗатраты) - ?(СуммаПУ=Null,0,СуммаПУ)  - ?(СуммаСПИС=Null,0,СуммаСПИС)  - ?(СуммаВЗАИМ=Null,0,СуммаВЗАИМ)  + ?(СуммаДСПС=Null,0,СуммаДСПС)  - ?(СуммаДЗБТ=Null,0,СуммаДЗБТ)  - ?(СуммаТрехсторонниеПП=Null,0,СуммаТрехсторонниеПП)  + ?(СуммаПереходящиеЗатраты=Null,0,СуммаПереходящиеЗатраты) - ?(СуммаНесовпадающиеСуммаВЗиСуммаУПР=null,0,СуммаНесовпадающиеСуммаВЗиСуммаУПР)  + ?(СуммаПустойСтатусПартии=null,0,СуммаПустойСтатусПартии) - ?(СуммаВозвратыПоставщикам=null,0,СуммаВозвратыПоставщикам) + ?(СуммаОСОборот=null,0,СуммаОСОборот) + ?(СуммаКорректировкаНеВП=null,0,СуммаКорректировкаНеВП) + СуммаОСПередача;
		Область.Параметры.Прибыль = Прибыль;
		ТабДок.Вывести(Область);
		
		РазницаОбласть = Макет.ПолучитьОбласть("Разница");
		РазницаОбласть.Параметры.Разница = ИтогоНач1 + Прибыль - ИтогоКон1;
		
		ТабДок.Вывести(РазницаОбласть);
		
	КонецЕсли; 
	
	
	
	////////// --- Форма 2
	
	Если СтруктураНастройки.СтроитьТаблицуФорма2 Тогда
	
		СформироватьФорму2(Макет, ТабДок);
			
	КонецЕсли; 
	
	////////// --- Форма 2
		
	Если СтруктураНастройки.ВыводитьСправку Тогда
		
		Примечание = Макет.ПолучитьОбласть("Примечание");
		ТабДок.Вывести(Примечание,,,Ложь);
		
	КонецЕсли; 
	
	ТабДок.Показать();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ДатаИзменена = ложь;
	ДатаНачизменена = ложь;
	ВыводитьЦены = ложь;
	ЗаполнитьпоПризнаку = ложь;
	
	Попытка 
		
		ТорговаяКомпанияЭлемент = ВосстановитьЗначение("ТорговаяКомпанияДляОтчетаПоСредствам");
		
	Исключение
		
		ТорговаяКомпанияЭлемент = справочники.контрагенты.ПустаяСсылка();
		
	КонецПопытки;
	
	Организация = Справочники.Организации.НайтиПоКоду("00001");
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("СтроитьТаблицуПоказателей", Ложь);
	СтруктураНастройки.Вставить("СтроитьТаблицуФорма2", Истина);
	СтруктураНастройки.Вставить("ВыводитьСправку", Ложь);
	
	Если глТекущийпользователь = Справочники.Пользователи.НайтиПоКоду("Никитин (WG)") или глТекущийпользователь = Справочники.Пользователи.НайтиПоКоду("Карышев Максим (WG)") тогда
		повсем = Ложь;
		Элементыформы.ПоВсем.Доступность=Ложь;
    конецесли;	
	
КонецПроцедуры

Процедура СебестоимостьПриИзменении(Элемент)
	
	Если Элемент.значение = 2 тогда 
		
		ЭлементыФормы.НадписьТип.Видимость = истина;
		Элементыформы.Тип.Видимость = истина;
		ВыводитьЦены = Истина;
		
	Иначе
		
		ЭлементыФормы.НадписьТип.Видимость = ложь;
		Элементыформы.Тип.Видимость = ложь;		
		ВыводитьЦены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонПериодаПриИзменении(Элемент)
	
	ДатаИзменена = Истина;	
	
КонецПроцедуры

Процедура НачПериодаПриИзменении(Элемент)
	
	ДатаНачИзменена = истина;
	
КонецПроцедуры

Процедура НачПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	ДатаНачИзменена = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанель1Настройка(Кнопка)
	
	ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройки");	
	ФормаНастройки.ОткрытьМодально();	
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТорговаяКомпанияДляОтчетаПоСредствам",ТорговаяКомпанияЭлемент);		
	
КонецПроцедуры

Процедура ВыбПериодНажатие1(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатыОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Сообщить(Расшифровка);
	
	ТД = Новый ТабличныйДокумент;
	СтрокаЗаголовка = "";
	
	СписокСкладов = новый СписокЗначений;
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00270"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00209"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00269"));

	СтатьиПКО = Новый СписокЗначений;
	СтатьиПКО.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());	
	
	ЗапросРасш = Новый Запрос;	
	ЗапросРасш.УстановитьПараметр("ДатаНач",ДатаНач);
	ЗапросРасш.УстановитьПараметр("ДатаКон",ДатаКон);//Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросРасш.УстановитьПараметр("СтатьиПКО",СтатьиПКО);
	ЗапросРасш.УстановитьПараметр("ПолучениеДСВбанке",Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке);
	ЗапросРасш.УстановитьПараметр("ОперацияПрочийПриход",Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее);
	ЗапросРасш.УстановитьПараметр("ОперацияПрочийРасход",Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	ЗапросРасш.УстановитьПараметр("ОперацияПрочийПриходПП",Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств);
	ЗапросРасш.УстановитьПараметр("ОперацияПрочийРасходПП",Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств);
	ЗапросРасш.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	ЗапросРасш.УстановитьПараметр("ПустаяСтатья",Справочники.СтатьиЗатрат.ПустаяСсылка());
	ЗапросРасш.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	ЗапросРасш.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
	ЗапросРасш.УстановитьПараметр("Организация",Организация);
	ЗапросРасш.УстановитьПараметр("СписокСкладов",СписокСкладов);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросРасш.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросРасш.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросРасш.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросРасш.Текст = СтрЗаменить(ЗапросРасш.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросРасш.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Если (Расшифровка = "1") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаДСПСРасш;
		СтрокаЗаголовка = "Поступление / списание ДС";
	ИначеЕсли (Расшифровка = "2") ИЛИ (Расшифровка = "ПоступлениеСписаниеТовара") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаСПИСРасш;
		СтрокаЗаголовка = "Списание / оприходование товаров";
	ИначеЕсли (Расшифровка = "3") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаВЗАИМРасш;
		СтрокаЗаголовка = "Корректировка долгов";
	ИначеЕсли (Расшифровка = "4") ИЛИ (Расшифровка = "ПоступлениеСписаниеТовара") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаОСОборотРасш; 
		СтрокаЗаголовка = "Поступление / списание осн. средств";
	ИначеЕсли (Расшифровка = "5") ИЛИ (Расшифровка = "ПоступлениеВУ") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаПУРасш;
		СтрокаЗаголовка = "Поступление возмещаемых услуг";
	ИначеЕсли (Расшифровка = "6") ИЛИ (Расшифровка = "ДопЗатратыБезТоваров") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаДЗБТРасш;
		СтрокаЗаголовка = "Доп. затраты без товаров";
	ИначеЕсли (Расшифровка = "7") ИЛИ (Расшифровка = "ТрехсторонниеПлатежныеДокументы") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаТрехсторонниеППРасш;
		СтрокаЗаголовка = "Трехсторонние ПП (платежные документы)";
	ИначеЕсли (Расшифровка = "8") ИЛИ (Расшифровка = "ПереходящиеЗатраты") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаПереходящиеЗатратыРасш;
		СтрокаЗаголовка = "Переходящие затраты";
	ИначеЕсли (Расшифровка = "9") ИЛИ (Расшифровка = "НесовпадающиеСуммы") Тогда 
		ЗапросРасш.Текст = ТекстЗапросаНесовпадающиеСуммаВЗиСуммаУПРРасш;
		СтрокаЗаголовка = "Несовпадающие суммы";
	ИначеЕсли (Расшифровка = "10") ИЛИ (Расшифровка = "ПартииСПустымСтатусом") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаПустойСтатусПартииРасш;
		СтрокаЗаголовка = "Партии с пустым статусом";
	ИначеЕсли (Расшифровка = "11") ИЛИ (Расшифровка = "ВозвратыПоставщикам") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаВозвратыПоставщикамРасш;
		СтрокаЗаголовка = "Возвраты поставщикам (разницы)";
	ИначеЕсли (Расшифровка = "12") ИЛИ (Расшифровка = "КорректировкаНеВП") Тогда 	
		ЗапросРасш.Текст = ТекстЗапросаКорректировкаНеВПРасш;
		СтрокаЗаголовка = "Корректировка, не попавшая в валовую прибыль";
	ИначеЕсли (Расшифровка = "ДЗН") Тогда 	
		// Отчет по ДЗН
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Задолженность по контрагентам");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		//ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		ОбработкаДЗ.ПереключательЗадолженность = 1;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
				//***20170815
		Если не ПоВсем тогда
			Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента.Организация") = Неопределено Тогда
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
			Иначе
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента.Организация");
			КонецЕсли;
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Организация;
			СтрОтб.Использование = Истина;
			
			ФормаОбработки.ОбновитьОтчет();
			СтандартнаяОбработка = Ложь;
			Возврат;	
		конецЕсли;
		//***

		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "ДЗК") Тогда 	
		// Отчет по ДЗК
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Задолженность по контрагентам");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		////Попытка
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		//ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		ОбработкаДЗ.ПереключательЗадолженность = 1;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		//СтрОтб.Имя = "ТипДоговора";
		//СтрОтб.ПутьКДанным = "ДоговорКонтрагента.ТипДоговора";
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
				//***20170815
		Если не ПоВсем тогда
			Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента.Организация") = Неопределено Тогда
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
			Иначе
				СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента.Организация");
			КонецЕсли;
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Организация;
			СтрОтб.Использование = Истина;
			
			ФормаОбработки.ОбновитьОтчет();
			СтандартнаяОбработка = Ложь;
			Возврат;	
		конецЕсли;
		//***

		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КЗН") Тогда 	
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		ОбработкаДЗ.ПереключательЗадолженность = 2;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
				///20170815
		Если не ПоВсем Тогда
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
		СтрОтб.ВидСравнения = ВидСравнения.Равно;
		СтрОтб.Значение = Организация;
		СтрОтб.Использование = Истина;	
		конецЕсли;

		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КЗК") Тогда 	
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		ОбработкаДЗ.ПереключательЗадолженность = 2;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		///20170815
		Если не ПоВсем Тогда
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
		СтрОтб.ВидСравнения = ВидСравнения.Равно;
		СтрОтб.Значение = Организация;
		СтрОтб.Использование = Истина;	
		конецЕсли;
		//*****************
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КЗАккрН") Тогда 	
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		ОбработкаДЗ.ПереключательЗадолженность = 2;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КЗАккрК") Тогда 	
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		ОбработкаДЗ.ПереключательЗадолженность = 2;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Аккредитивы"));
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КН") Тогда 	
		// Отчет по ДЗН
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Задолженность по контрагентам");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		////Попытка
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		//ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		ОбработкаДЗ.ПереключательЗадолженность = 3;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		//СтрОтб.Имя = "ТипДоговора";
		//СтрОтб.ПутьКДанным = "ДоговорКонтрагента.ТипДоговора";
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "КК") Тогда 	
		// Отчет по ДЗК
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Задолженность по контрагентам");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		////Попытка
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		//ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		ОбработкаДЗ.ПереключательЗадолженность = 3;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Кредит);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		//СтрОтб.Имя = "ТипДоговора";
		//СтрОтб.ПутьКДанным = "ДоговорКонтрагента.ТипДоговора";
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ИНВН") Тогда 	

		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		ОбработкаДЗ.ПереключательЗадолженность = 3;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;
		
		Если НЕ ПоВсем Тогда
			
			СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Организация;
			СтрОтб.Использование = Истина;
			
			Если Организация = Справочники.Организации.НайтиПоКоду("00006") ИЛИ  Организация = Справочники.Организации.НайтиПоКоду("00005") Тогда   //Турция, WG
				
				ОтчетЗатраты = Отчеты.Затраты.Создать();
				ФормаОтчетаЗатраты = ОтчетЗатраты.ПолучитьОсновнуюФорму();
				ФормаОтчетаЗатраты.Открыть();
				ОтчетЗатраты.ОбщийОтчет.ДатаНач = ДатаНач;
				ОтчетЗатраты.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
				ОтборПодразделение = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Подразделение"); 
				Если ОтборПодразделение = Неопределено Тогда
					ОтборПодразделение = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение");
				КонецЕсли;
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Использование = Истина;
				Если Организация = Справочники.Организации.НайтиПоКоду("00006") тогда //Турция
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
					ОтборПоОрганизации = Истина;
				ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("00005") тогда //WG
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
					ОтборПоОрганизации = Истина;
				КонецЕсли;
				
				//ОтборОрганизация = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Регистратор.Организация"); 
				//Если ОтборОрганизация = Неопределено Тогда
				//	ОтборОрганизация = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Регистратор.Организация");
				//КонецЕсли;
				//ОтборОрганизация.ВидСравнения = ВидСравнения.НеРавно;
				//ОтборОрганизация.Использование = Истина;
				//ОтборОрганизация.Значение = Организация;
				
				ОтборПериодичностьИтогов = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Периодичность"); 
				Если ОтборПериодичностьИтогов = Неопределено Тогда
					ОтборПериодичностьИтогов = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Периодичность");
				КонецЕсли;
				ОтборПериодичностьИтогов.ВидСравнения = ВидСравнения.Равно;
				ОтборПериодичностьИтогов.Использование = Истина;
				ОтборПериодичностьИтогов.Значение = 2; //Регистратор
				
				ФормаОтчетаЗатраты.ОбновитьОтчет();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ИНВК") Тогда 	

		ОбработкаДЗ = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		ОбработкаДЗ.ПереключательЗадолженность = 3;
		Для Каждого СтрОтб из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СписокТипов = новый СписокЗначений;
		СписокТипов.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		СписокТипов.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		СтрОтб.ВидСравнения = ВидСравнения.ВСписке;
		СтрОтб.Значение = СписокТипов;
		СтрОтб.Использование = Истина;	
		
		Если НЕ ПоВсем Тогда
			
			СтрОтб = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.Организация");
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Организация;
			СтрОтб.Использование = Истина;
			
			Если Организация = Справочники.Организации.НайтиПоКоду("00006") ИЛИ  Организация = Справочники.Организации.НайтиПоКоду("00005") Тогда   //Турция, WG
				
				ОтчетЗатраты = Отчеты.Затраты.Создать();
				ФормаОтчетаЗатраты = ОтчетЗатраты.ПолучитьОсновнуюФорму();
				ФормаОтчетаЗатраты.Открыть();
				ОтчетЗатраты.ОбщийОтчет.ДатаНач = ДатаНач;
				ОтчетЗатраты.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
				ОтборПодразделение = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Подразделение"); 
				Если ОтборПодразделение = Неопределено Тогда
					ОтборПодразделение = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение");
				КонецЕсли;
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Использование = Истина;
				Если Организация = Справочники.Организации.НайтиПоКоду("00006") тогда //Турция
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
					ОтборПоОрганизации = Истина;
				ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("00005") тогда //WG
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
					ОтборПоОрганизации = Истина;
				КонецЕсли;
				
				//ОтборОрганизация = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Регистратор.Организация"); 
				//Если ОтборОрганизация = Неопределено Тогда
				//	ОтборОрганизация = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Регистратор.Организация");
				//КонецЕсли;
				//ОтборОрганизация.ВидСравнения = ВидСравнения.НеРавно;
				//ОтборОрганизация.Использование = Истина;
				//ОтборОрганизация.Значение = Организация;
				
				ОтборПериодичностьИтогов = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Периодичность"); 
				Если ОтборПериодичностьИтогов = Неопределено Тогда
					ОтборПериодичностьИтогов = ОтчетЗатраты.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Периодичность");
				КонецЕсли;
				ОтборПериодичностьИтогов.ВидСравнения = ВидСравнения.Равно;
				ОтборПериодичностьИтогов.Использование = Истина;
				ОтборПериодичностьИтогов.Значение = 2; //Регистратор
				
				ФормаОтчетаЗатраты.ОбновитьОтчет();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли (Расшифровка = "СКЛАДН") Тогда 	
		// Отчет по ДЗН
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаНач-1;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		//ОбработкаДЗ = Отчеты.ВедомостьПартииТоваровНаСкладах.Создать();
		//ОбработкаДЗ.ОбщийОтчет.ИмяРегистра = "ПартииТоваровНаСкладах";
		//ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		//ФормаОбработки.ОбщийОтчет.ЗаполнитьНачальныеНастройки();
		//
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
		СтрОтб.Значение = СписокГруппНоменклатуры;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "СКЛАДК") Тогда 	
		// Отчет по ДЗН
		// Отчет по ДЗН
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаКон;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		//ОбработкаДЗ = Отчеты.ВедомостьПартииТоваровНаСкладах.Создать();
		//ОбработкаДЗ.ОбщийОтчет.ИмяРегистра = "ПартииТоваровНаСкладах";
		//ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		//ФормаОбработки.ОбщийОтчет.ЗаполнитьНачальныеНастройки();
		//
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		Если Организация = Справочники.Организации.НайтиПоКоду("00006") тогда //Турция
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Справочники.Склады.НайтиПоКоду("02142");
		иначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("00005") тогда //WG
			СтрОтб.ВидСравнения = ВидСравнения.Равно;
			СтрОтб.Значение = Справочники.Склады.НайтиПоКоду("02210");
		конецесли;

		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
		СтрОтб.Значение = СписокГруппНоменклатуры;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ВАНР") Тогда 	  //Внеоборотные активы начало
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаНач-1;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.ВИерархии;
		СтрОтб.Значение = Справочники.Номенклатура.ВнеоборотныеАктивы;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ВАКР") Тогда 	 //Внеоборотные активы конец
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаКон;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.ВИерархии;
		СтрОтб.Значение = Справочники.Номенклатура.ВнеоборотныеАктивы;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "МатериалыНР") Тогда 	   //Материалы начало
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаНач-1;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.ВИерархии;
		СтрОтб.Значение = Справочники.Номенклатура.Материалы;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "МатериалыКР") Тогда 	   //Материалы конец
        ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Стоимостная оценка склада в ценах номенклатуры");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьФорму("ГлавнаяФорма");
		ФормаОбработки.Открыть();
		ФормаОбработки.ОтчетОбъект.Режим = "неоперативный";
		ФормаОбработки.ОтчетОбъект.ЗаполнитьНачальныеНастройки();
		ФормаОбработки.ДатаОтчета = ДатаКон;
		// Удаляем лишние показатели
		Показатель1 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель1<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель1));
		КонецЕсли;
		Показатель2 = ФормаОбработки.Показатели.Найти("ТипЦенЦена","Имя");
		Если (Показатель2<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель2));
		КонецЕсли;
		Показатель3 = ФормаОбработки.Показатели.Найти("ТипЦенСтоимость","Имя");
		Если (Показатель3<>Неопределено) Тогда 
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель3));
		КонецЕсли;
		Показатель4 = ФормаОбработки.Показатели.Найти("ТипЦенНаценка","Имя");
		Если (Показатель4<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель4));
		КонецЕсли;	
		Показатель5 = ФормаОбработки.Показатели.Найти("ТипЦенРентабельность","Имя");	
		Если (Показатель5<>Неопределено) Тогда 	
			ФормаОбработки.Показатели.Удалить(ФормаОбработки.Показатели.Индекс(Показатель5));
		КонецЕсли;	
		
		Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
			СтрОтб.Использование = Ложь;	
		КонецЦикла;
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Склад");
		СтрОтб.ВидСравнения = ВидСравнения.НеВСписке;
		СтрОтб.Значение = СписокСкладов;
		СтрОтб.Использование = Истина;
		
		//***20160118
		Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		Иначе
			СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Номенклатура");
		КонецЕсли;
		СтрОтб.ВидСравнения = ВидСравнения.ВИерархии;
		СтрОтб.Значение = Справочники.Номенклатура.Материалы;
		СтрОтб.Использование = Истина;
		//***

		ФормаОбработки.Открыть();
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли Расшифровка = "ППН" ИЛИ Расшифровка = "ППК" Тогда 
		// Отчет по Партиям товарам переданных
		ОбработкаДЗ = Отчеты.ВедомостьПартииТоваровОтданных.Создать();
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;


		
	ИначеЕсли (Расшифровка = "ПОН") Тогда 	
		
		ОбработкаДЗ = Отчеты.ОтчетСписокКроссТаблица.Создать();
		ОбработкаДЗ.ИмяРегистра = "ВзаиморасчетыСПодотчетнымиЛицами";
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ДатаКон = ДатаНач-1;
		ОбработкаДЗ.ДатаНач = ДатаНач-1;
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ОбработкаДЗ.ПостроительОтчета.ВыбранныеПоля.Очистить();
		
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Добавить("Валюта","Валюта");
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Добавить("ФизЛицо");
		
		//ОбработкаДЗ.ПостроительОтчета.ВыбранныеПоля.Добавить("РасчетныйДокумент","Расчетный документ");
				
		ФормаОбработки.ОбновитьОтчет();
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ПОК") Тогда 	
		// Отчет по ДЗН
		ОбработкаДЗ = Отчеты.ОтчетСписокКроссТаблица.Создать();
		ОбработкаДЗ.ИмяРегистра = "ВзаиморасчетыСПодотчетнымиЛицами";
		ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		ОбработкаДЗ.ДатаКон = ДатаКон;
		ОбработкаДЗ.ДатаНач = ДатаКон;
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Добавить("Валюта","Валюта");
		ОбработкаДЗ.ПостроительОтчета.ИзмеренияСтроки.Добавить("ФизЛицо");
		
		ОбработкаДЗ.ПостроительОтчета.ВыбранныеПоля.Очистить();
		//ОбработкаДЗ.ПостроительОтчета.ВыбранныеПоля.Добавить("РасчетныйДокумент","Расчетный документ");
		
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли (Расшифровка = "ДСН") Тогда 	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОстаткиДС");
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Период;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = ДатаНач;                                
	
	Если не ПоВсем тогда	
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Организация;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = Организация;
	конецЕсли;
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки1);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки1,истина);
	ТабДок = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	табДок.Показать();
		
		
		
	возврат;	
		
		
		
		
		//
		//// Отчет по ДЗН
		//ОбработкаДЗ = Отчеты.ОстаткиДенежныхСредств.Создать();
		//ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		//ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаНач-1;
		//ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач-1;
		//ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		//ФормаОбработки.Открыть();

		//		//***20170815
		//Если не ПоВсем тогда
		//	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Организация") = Неопределено Тогда
		//		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Организация");
		//	Иначе
		//		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Организация");
		//	КонецЕсли;
		//	СтрОтб.ВидСравнения = ВидСравнения.Равно;
		//	СтрОтб.Значение = Организация;
		//	СтрОтб.Использование = Истина;
		//	
		//	ФормаОбработки.ОбновитьОтчет();
		//	СтандартнаяОбработка = Ложь;
		//	Возврат;	
		//конецЕсли;
		////***

		//ФормаОбработки.Открыть();
		//ФормаОбработки.ОбновитьОтчет();
		//СтандартнаяОбработка = Ложь;
		//Возврат;
		//
	ИначеЕсли (Расшифровка = "ДСК") Тогда 	
		// Отчет по ДЗН
		//ОбработкаДЗ = Отчеты.ОстаткиДенежныхСредств.Создать();
		//ОбработкаДЗ.ЗаполнитьНачальныеНастройки();
		//ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		//ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаКон;
		//ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		//ФормаОбработки.Открыть();
		////***20170815
		//Если не ПоВсем тогда
		//	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Организация") = Неопределено Тогда
		//		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Организация");
		//	Иначе
		//		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Организация");
		//	КонецЕсли;
		//	СтрОтб.ВидСравнения = ВидСравнения.Равно;
		//	СтрОтб.Значение = Организация;
		//	СтрОтб.Использование = Истина;
		//	
		//	ФормаОбработки.Открыть();
		//	ФормаОбработки.ОбновитьОтчет();
		//	СтандартнаяОбработка = Ложь;
		//	Возврат;	
		//конецЕсли;
		//***
       	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьМакет("ОстаткиДС");
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Период;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = КонецДня(ДатаКон);                                
	
	Если не ПоВсем тогда	
	ПараметрСКД = СхемаКомпоновкиДанных.Параметры.Организация;
	ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрСКД.Значение  = Организация;
	конецЕсли;
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ДанныеРасшифровки1);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки1,истина);
	ТабДок = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Истина;
	табДок.Показать();
     возврат;
	ИначеЕсли (Расшифровка = "ВП") Тогда 	
		// Отчет по ДЗН
		ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;	
	
	ИначеЕсли (ВРег(Расшифровка) = "ЗАТРАТЫ") Тогда 	
		
		ОбработкаДЗ = Отчеты.Затраты.Создать();
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
		Если НЕ ПоВсем Тогда
			ОтборПоОрганизации = Ложь;
			Если Организация = Справочники.Организации.НайтиПоКоду("00001") Тогда
				ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ПодразделениеВЭД"); 
				Если ОтборПодразделение = Неопределено Тогда
					ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение.ВЭД");
				КонецЕсли;
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Значение = Ложь;
				ОтборПодразделение.Использование = Истина;
			Иначе
				ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Подразделение"); 
				Если ОтборПодразделение = Неопределено Тогда
					ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение");
				КонецЕсли;
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Использование = Истина;
				Если Организация = Справочники.Организации.НайтиПоКоду("00006") тогда //Турция
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
					ОтборПоОрганизации = Истина;
				ИначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("00005") тогда //WG
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
					ОтборПоОрганизации = Истина;
				КонецЕсли;
				
				Если ОтборПоОрганизации и Организация = Справочники.Организации.НайтиПоКоду("00001") Тогда					
					ОтборОрганизация = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Регистратор.Организация"); 
					Если ОтборОрганизация = Неопределено Тогда
						ОтборОрганизация = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Регистратор.Организация");
					КонецЕсли;
					ОтборОрганизация.ВидСравнения = ВидСравнения.Равно;
					ОтборОрганизация.Использование = Истина;
					ОтборОрганизация.Значение = Организация;
				конецЕсли;	
					
					ОтборПериодичностьИтогов = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Периодичность"); 
					Если ОтборПериодичностьИтогов = Неопределено Тогда
						ОтборПериодичностьИтогов = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Периодичность");
					КонецЕсли;
					ОтборПериодичностьИтогов.ВидСравнения = ВидСравнения.Равно;
					ОтборПериодичностьИтогов.Использование = Истина;
					ОтборПериодичностьИтогов.Значение = 2; //Регистратор
				
			КонецЕсли;	
		КонецЕсли;

		ФормаОбработки.ОбновитьОтчет();
		СтандартнаяОбработка = Ложь;
		Возврат;	
		
	ИначеЕсли (Расшифровка = "ОСР") Тогда 	
		// Расшифровка стоимости ОС
		ОтчетОСН = Отчеты.ОтчетОстаткиИОбороты.Создать();
		ОтчетОСН.ИмяРегистра = "СтоимостьОС";
		ОтчетОСН.ДатаКон = КонецДня(ДатаКон);
		ОтчетОСН.ЗаполнитьНачальныеНастройки();
		ФормаОтчета = ОтчетОСН.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ОтчетОСН.ДатаНач = ДатаНач;
		ФормаОтчета.ОбновитьОтчет();
		Возврат;	
	
	Иначе
		
		Если НЕ ОбработкаРасшифровкиФорма2(Элемент, Расшифровка) Тогда
			
			СтандартнаяОбработка = Истина;
			Возврат;
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Выб = ЗапросРасш.Выполнить().Выбрать();
	
	Если (Выб.Количество()=0) Тогда 
		Возврат;
	КонецЕсли;		
	
	Макет = ПолучитьМакет("Расшифровка");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	
	Шапка.Параметры.Заголовок = "Расшифровка: " + СтрокаЗаголовка;
	
	Строка = Макет.ПолучитьОбласть("Строка");
	
	ТД.Вывести(Шапка);
	
	Пока Выб.Следующий() Цикл
		
		строка.Параметры.Контрагент = "";
		строка.Параметры.Комментарий = "";
		
		строка.Параметры.Документ = Выб.Документ;
		
		Если НЕ ЗначениеНеЗаполнено(Выб.Контрагент) Тогда
			
			строка.Параметры.Контрагент = Выб.Контрагент;
			
		Иначе 
			
			Попытка
			
				 строка.Параметры.Контрагент = Выб.Документ.Контрагент;
			
			Исключение
				;
			КонецПопытки; 
			
		КонецЕсли;
		
		Попытка
		
			строка.Параметры.Комментарий = Выб.Документ.Комментарий;
		
		Исключение
			;
		КонецПопытки; 
		
		строка.Параметры.Сумма = Выб.Сумма;
		
		Если (Выб.Сумма <> 0 и Выб.Сумма <> null) Тогда 
			ТД.Вывести(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	ТД.ТолькоПросмотр = Истина;
	ТД.ОтображатьСетку = Ложь;
	ТД.ОтображатьЗаголовки = Ложь;
	
	ТД.Показать();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//// Вставить содержимое обработчика.
	//Форма = ПолучитьФорму("Пароль");
	//Рез = Форма.ОткрытьМодально();
	//Если (Рез="ОК") Тогда
	//	возврат;
	//Иначе
	//	Отказ = Истина;
	//КонецЕсли;
КонецПроцедуры

Функция СформироватьСтруктуруОтбора()

	ТекстОтбора = "";
	
	Возврат ТекстОтбора;	

КонецФункции

Функция ПолучитьТекстЗапросаОборотаРеализацииПоТоварамУслугам(Расшифровка = Ложь)
	
	Если Не ПоВсем Тогда
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Номенклатура.Услуга = &Услуга
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Номенклатура.Услуга = &Услуга
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли; 
		
	Иначе 
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Номенклатура.Услуга = &Услуга) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Номенклатура.Услуга = &Услуга) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли; 
		
	КонецЕсли;		
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора(Расшифровка = Ложь) 
	
	Если Не ПоВсем Тогда
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			ДокументПродажи.ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			ДокументПродажи.ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли; 
		
	Иначе 
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , ДокументПродажи.ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , ДокументПродажи.ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли; 
		
	КонецЕсли;		
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ПолучитьТекстЗапросаОборотаРеализацииПоТоварамУслугамИТипамДоговоров(Расшифровка = Ложь)
	
	Если Не ПоВсем Тогда
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Номенклатура.Услуга = &Услуга
			|				И ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Номенклатура.Услуга = &Услуга
			|				И ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)
			|				И Подразделение В (&СписокПодразделений)) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли;  
		
	Иначе 
		
		Если НЕ Расшифровка Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|			&ДатаНач,
			|			&ДатаКон,
			|			,
			|			Номенклатура.Услуга = &Услуга
			//|				И Номенклатура <> &Номенклатура
			|				И ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)) КАК ПродажиОбороты";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма,
			|	ПродажиОбороты.ДокументПродажи КАК Документ,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(
			|		&ДатаНач,
			|		&ДатаКон,
			|		,
			|		Номенклатура.Услуга = &Услуга
			//|				И Номенклатура <> &Номенклатура
			|			И ДоговорКонтрагента.ТипДоговора В (&ТипыДоговоров)) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ПродажиОбороты.ДокументПродажи,
			|	ПродажиОбороты.ДоговорКонтрагента.Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПродажиОбороты.ДокументПродажи.Дата";
			
			
		КонецЕсли;  
		
	КонецЕсли;		
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ПолучитьТекстЗапросаВозмещаемыеУслуги(Расшифровка = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка, 
	"	ЕСТЬNULL(СУММА(ПоступлениеТоваровУслугУслуги.Сумма), 0) КАК Сумма",
	"	ПоступлениеТоваровУслугУслуги.Ссылка КАК Документ,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугУслуги.Сумма, 0) КАК Сумма,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент") + "
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	(ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеТоваровУслугУслуги.СтатьяЗатрат = &ПустаяСтатья
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА)
	|" + ?(ПоВсем, "", "И (ПоступлениеТоваровУслугУслуги.Ссылка.Организация = &Организация)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСебестоимостьРеализованногоТовара()
	
	Если Не ПоВсем Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0)) КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНач, &ДатаКон, , Подразделение В (&СписокПодразделений)) КАК ПродажиСебестоимостьОбороты";
		
	Иначе 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0) КАК Себестоимость
		|ИЗ
		|	РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНач, &ДатаКон, , ) КАК ПродажиСебестоимостьОбороты";
		
	КонецЕсли;		
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапросЗатраты()
	
	ЗапросЗатраты = Новый Запрос;
	
	Если Не ПоВсем Тогда
		ЗапросЗатраты.Текст = "ВЫБРАТЬ
		                      |	СУММА(ТаблицаРегистра.Сумма) КАК Сумма
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ЗатратыОбороты.СуммаОборот КАК Сумма
		                      |	ИЗ
		                      |		РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, 
							  |											//Регистратор 
							  |											, Подразделение В (&СписокПодразделений)) КАК ЗатратыОбороты
							//  | //ГДЕ ЗатратыОбороты.Регистратор.Организация = &Организация
							  |) КАК ТаблицаРегистра";	
		
	Иначе
		ЗапросЗатраты.Текст = "ВЫБРАТЬ
		                      |	СУММА(ТаблицаРегистра.Сумма) КАК Сумма
		                      |ИЗ
		                      |	(ВЫБРАТЬ
		                      |		ЗатратыОбороты.СуммаОборот КАК Сумма
		                      |	ИЗ
		                      |		РегистрНакопления.Затраты.Обороты(&ДатаНач, &ДатаКон, , ) КАК ЗатратыОбороты) КАК ТаблицаРегистра";
	КонецЕсли;

	ЗапросЗатраты.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросЗатраты.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	СписокПодразделений = Новый СписокЗначений;
	Если Организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		ЗапросЗатраты.Текст = СтрЗаменить(ЗапросЗатраты.Текст, "//", "");
	ИначеЕсли Организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		ЗапросЗатраты.Текст = СтрЗаменить(ЗапросЗатраты.Текст, "//", "");
	ИначеЕсли Организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	Иначе
        СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		СписокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросЗатраты.Текст = СтрЗаменить(ЗапросЗатраты.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	КонецЕсли;
	ЗапросЗатраты.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	ЗапросЗатраты.УстановитьПараметр("Организация", Организация);
	
	Возврат ЗапросЗатраты.Выполнить().Выбрать();					  
		
КонецФункции

Функция ПолучитьТекстЗапросаКорректировкиНеВП(Расшифровка = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка,
	"ЕСТЬNULL(СУММА(ПР.Стоимость), 0) КАК Сумма",
	"	ЕСТЬNULL(СУММА(ПР.Стоимость), 0) КАК Сумма,
	|	ПР.Регистратор КАК Документ,
	|	"""" КАК Контрагент") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПродажиСебестоимость.ВидДвижения = &Расход
	|				ТОГДА -ПродажиСебестоимость.Стоимость
	|			ИНАЧЕ ПродажиСебестоимость.Стоимость
	|		КОНЕЦ КАК Стоимость
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПродажиСебестоимость
	|	ГДЕ
	|		(ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров
	|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.СписаниеНераспределенныхОстатков
	|				ИЛИ ПродажиСебестоимость.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
	|" + ?(ПоВсем, "", "И ПродажиСебестоимость.Регистратор.Организация = &Организация") + "
	|		И ПродажиСебестоимость.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК ПР
	|" + ?(НЕ Расшифровка, "", "СГРУППИРОВАТЬ ПО ПР.Регистратор");
	
	Возврат ТекстЗапроса;

КонецФункции 

Функция ПолучитьТекстЗапросаПоступлениеСписаниеТовара(Расшифровка = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|			КОГДА ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|				ТОГДА -ПартииТоваровНаСкладах.Стоимость
	|			ИНАЧЕ ПартииТоваровНаСкладах.Стоимость
	|		КОНЕЦ), 0) КАК Сумма
	|" + ?(НЕ Расшифровка, 
	"",
	"	,
	|	ПартииТоваровНаСкладах.Регистратор КАК Документ,
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент КАК Контрагент") + "
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	(ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.СписаниеТоваров
	|			ИЛИ ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ОприходованиеТоваров)
	|	И ПартииТоваровНаСкладах.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|" + ?(ПоВсем, "",	"И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация") + "
	|	И (НЕ ПартииТоваровНаСкладах.Регистратор.Склад В (&СписокСкладов))
	|
	|" + ?(НЕ Расшифровка, 
	"",
	"СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Регистратор,
	|	ПартииТоваровНаСкладах.Регистратор.Контрагент");
	
	Возврат ТекстЗапроса;
	
КонецФункции
 
Функция ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Расходы = Ложь, ПрочееИспользование=Ложь, Расшифровка = Ложь)	
	
	Если НЕ Расходы И Не Расшифровка Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Затраты.Регистратор
		|ПОМЕСТИТЬ ВТ_Затраты
		|ИЗ
		|	РегистрНакопления.Затраты КАК Затраты
		|ГДЕ
		|	Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "",	"И Затраты.Регистратор.Организация = &Организация") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(А.СуммаПлатежа), 0) КАК СуммаВЗ,
		|	ЕСТЬNULL(СУММА(А.СуммаУпрОборот), 0) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот КАК СуммаУпрОборот
		|	ИЗ
		|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее)
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|//ТекстПродаж
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|		ПродажиОбороты.Регистратор,
		//|		&Бонусы,
		//|		ПродажиОбороты.СтоимостьОборот,
		//|		ПродажиОбороты.СтоимостьОборот
		//|	ИЗ
		//|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Бонусы)) КАК ПродажиОбороты
		|) КАК А";
		
	ИначеЕсли Расходы И Не Расшифровка Тогда
		
		ТекстЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Затраты.Регистратор
		|ПОМЕСТИТЬ ВТ_Затраты
		|ИЗ
		|	РегистрНакопления.Затраты КАК Затраты
		|ГДЕ
		|	Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "",	"И Затраты.Регистратор.Организация = &Организация") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(А.СуммаПлатежа), 0) КАК СуммаВЗ,
		|	ЕСТЬNULL(СУММА(А.СуммаУпрОборот), 0) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот КАК СуммаУпрОборот
		|	ИЗ
		|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)) КАК А"
		
	ИначеЕсли НЕ Расходы И Расшифровка Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Затраты.Регистратор
		|ПОМЕСТИТЬ ВТ_Затраты
		|ИЗ
		|	РегистрНакопления.Затраты КАК Затраты
		|ГДЕ
		|	Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "",	"И Затраты.Регистратор.Организация = &Организация") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(А.СуммаПлатежа), 0) КАК СуммаВз,
		|	А.Ссылка КАК Документ,
		|	А.Ссылка.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(СУММА(А.СуммаУпрОборот), 0) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот КАК СуммаУпрОборот
		|	ИЗ
		|		Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств)
		|		И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПриходДенежныхСредствПрочее)
		|		И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|//ТекстПродаж
		//|	ОБЪЕДИНИТЬ ВСЕ
		//|	
		//|	ВЫБРАТЬ
		//|		ПродажиОбороты.Регистратор,
		//|		&Бонусы,
		//|		ПродажиОбороты.СтоимостьОборот,
		//|		ПродажиОбороты.СтоимостьОборот
		//|	ИЗ
		//|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Бонусы)) КАК ПродажиОбороты
		|) КАК А
		|
		|СГРУППИРОВАТЬ ПО
		|	А.Ссылка,
		|	А.Ссылка.Контрагент";
		
	ИначеЕсли Расходы И Расшифровка Тогда
		
		ТекстЗапроса="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Затраты.Регистратор
		|ПОМЕСТИТЬ ВТ_Затраты
		|ИЗ
		|	РегистрНакопления.Затраты КАК Затраты
		|ГДЕ
		|	Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "",	"И Затраты.Регистратор.Организация = &Организация") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(А.СуммаПлатежа), 0) КАК СуммаВз,
		|	А.Ссылка КАК Документ,
		|	А.Ссылка.Контрагент КАК Контрагент,
		|	ЕСТЬNULL(СУММА(А.СуммаУпрОборот), 0) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка КАК Ссылка,
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот КАК СуммаУпрОборот
		|	ИЗ
		|		Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Оплачено
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
		|		И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа,
		|		ДвиженияДенежныхСредствОбороты.СуммаУпрОборот
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныхСредств.Обороты(&ДатаНач, &ДатаКон, Регистратор, ) КАК ДвиженияДенежныхСредствОбороты
		|			ПО РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = ДвиженияДенежныхСредствОбороты.Регистратор
		|				И РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа = ДвиженияДенежныхСредствОбороты.СуммаОборот
		|	ГДЕ
		|		РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.РасходДенежныхСредствПрочее)
		|		И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств В(&СтатьиДДС)
		|" + ?(ПоВсем, "",	"И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Организация = &Организация") + "
		|		И НЕ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка В
		|					(ВЫБРАТЬ
		|						ВТ_Затраты.Регистратор
		|					ИЗ
		|						ВТ_Затраты)) КАК А
		|
		|СГРУППИРОВАТЬ ПО
		|	А.Ссылка,
		|	А.Ссылка.Контрагент";
		
		
	КонецЕсли;	
	
	Если ПрочееИспользование Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"В(&СтатьиДДС)","НЕ В(&СтатьиДДС)");
	иначе
		ТекстЗапроса= СтрЗаменить(ТекстЗапроса,"//ТекстПродаж",
		"	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПродажиОбороты.Регистратор,
		|		&Бонусы,
		|		ПродажиОбороты.СтоимостьОборот,
		|		ПродажиОбороты.СтоимостьОборот
		|	ИЗ
		|		РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор, ДоговорКонтрагента.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.Бонусы)" + ?(ПоВсем, "",	"И ДокументПродажи.Организация = &Организация") + ") КАК ПродажиОбороты"); 
    конецесли;
		
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДопЗатратыБезТоваров(Расшифровка = Ложь)

		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(РРА.Сумма), 0) КАК Сумма
		|" + ?(НЕ Расшифровка, 
		"",
		"	,
		|	РРА.Ссылка КАК Документ,
		|	РРА.Ссылка.Контрагент КАК Контрагент") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗПР.Ссылка КАК Ссылка,
		|		ПЗПР.Сумма КАК Сумма,
		|		ПЗПР.Количество КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Док.Ссылка КАК Ссылка,
		|			Док.Сумма КАК Сумма,
		|			ЕСТЬNULL(ТоварыПЗ.Количество, 0) КАК количество
		|		ИЗ
		|			Документ.ПоступлениеДопРасходов КАК Док
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ПЗП.Ссылка КАК Ссылка,
		|					ЕСТЬNULL(ПЗП.Количество, 0) КАК Количество
		|				ИЗ
		|					(ВЫБРАТЬ
		|						ПоступлениеДопРасходовТовары.Ссылка КАК Ссылка,
		|						СУММА(ПоступлениеДопРасходовТовары.Количество) КАК Количество
		|					ИЗ
		|						Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
		|					" + ?(ПоВсем, "", "ГДЕ  ПоступлениеДопРасходовТовары.Ссылка.Организация = &Организация") + "
		|						
		|					
		|					СГРУППИРОВАТЬ ПО
		|						ПоступлениеДопРасходовТовары.Ссылка) КАК ПЗП) КАК ТоварыПЗ
		|				ПО Док.Ссылка = ТоварыПЗ.Ссылка
		|		" + ?(ПоВсем, "", "ГДЕ Док.Организация = &Организация") + ") КАК ПЗПР
		|			
		|	ГДЕ
		|		ПЗПР.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПЗПР.Ссылка.Проведен = ИСТИНА
		|" + ?(ПоВсем, "", "И ПЗПР.Ссылка.Организация = &Организация") + "
		|		И ПЗПР.Количество = 0) КАК РРА
		|
		|" + ?(НЕ Расшифровка, 
		"",
		"СГРУППИРОВАТЬ ПО
		|	РРА.Ссылка,
		|	РРА.Ссылка.Контрагент");

		Возврат ТекстЗапроса;
       КонецФункции
 
Функция ПолучитьТекстЗапросаТрехсторонниеПлатежныеДокументы(Расшифровка = Ложь)

		ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПРОЛ.Сумма), 0) КАК Сумма
		|" + ?(НЕ Расшифровка, 
		"",
		"	,
		|	ПРОЛ.Регистратор КАК Документ,
		|	ПРОЛ.Регистратор.Контрагент КАК Контрагент") + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЗП.Регистратор КАК Регистратор,
		|		ПЗП.Сумма КАК Сумма,
		|		ПЗП.КонтрагентыСумма КАК КонтрагентыСумма,
		|		ПЗП.ЗатратыСумма КАК ЗатратыСумма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДС.Регистратор КАК Регистратор,
		|			ЕСТЬNULL(ДС.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(Контрагенты.Сумма, 0) КАК КонтрагентыСумма,
		|			ЕСТЬNULL(Затраты.Сумма, 0) КАК ЗатратыСумма
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ДенежныеСредства.Регистратор КАК Регистратор,
		|				СУММА(ВЫБОР
		|						КОГДА ДенежныеСредства.ВидДвижения = &Приход
		|							ТОГДА ДенежныеСредства.Сумма
		|						ИНАЧЕ -ДенежныеСредства.Сумма
		|					КОНЕЦ) КАК Сумма
		|			ИЗ
		|				РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|			ГДЕ
		|				ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "", "И ДенежныеСредства.Регистратор.Организация = &Организация") + "
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ДенежныеСредства.Регистратор) КАК ДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
		|					СУММА(ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаУпр
		|							ИНАЧЕ -ВзаиморасчетыСКонтрагентами.СуммаУпр
		|						КОНЕЦ) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|				ГДЕ
		|					ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "", "И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация") + "
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ВзаиморасчетыСКонтрагентами.Регистратор) КАК Контрагенты
		|				ПО ДС.Регистратор = Контрагенты.Регистратор
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Затраты.Регистратор КАК Регистратор,
		|					СУММА(Затраты.Сумма) КАК Сумма
		|				ИЗ
		|					РегистрНакопления.Затраты КАК Затраты
		|				ГДЕ
		|					Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
		|" + ?(ПоВсем, "", "И Затраты.Регистратор.Организация = &Организация") + "
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Затраты.Регистратор) КАК Затраты
		|				ПО ДС.Регистратор = Затраты.Регистратор) КАК ПЗП
		|	ГДЕ
		|		ПЗП.Сумма = -ПЗП.КонтрагентыСумма
		|		И ПЗП.Сумма = -ПЗП.ЗатратыСумма) КАК ПРОЛ
		|
		|" + ?(НЕ Расшифровка, 
		"",
		"СГРУППИРОВАТЬ ПО
		|	ПРОЛ.Регистратор,
		|	ПРОЛ.Регистратор.Контрагент");
		
		Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаПереходящиеЗатраты(Расшифровка = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПРОЛ.Сумма), 0) КАК Сумма
	|" + ?(НЕ Расшифровка, 
	"",
	"	,
	|	ПРОЛ.Регистратор КАК Документ,
	|	ПРОЛ.Регистратор.Контрагент КАК Контрагент") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		Затраты.Регистратор КАК Регистратор,
	|		СУММА(Затраты.Сумма) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.Затраты КАК Затраты
	|	ГДЕ
	|		Затраты.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И (НЕ Затраты.Регистратор В
	|					(ВЫБРАТЬ
	|						РегистрНакопления.ДенежныеСредства.Регистратор
	|					ИЗ
	|						РегистрНакопления.ДенежныеСредства
	|					ГДЕ
	|						РегистрНакопления.ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|		И (НЕ Затраты.Регистратор В
	|					(ВЫБРАТЬ
	|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Регистратор
	|					ИЗ
	|						РегистрНакопления.ВзаиморасчетыСКонтрагентами
	|					ГДЕ
	|						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|		И (НЕ Затраты.Регистратор В
	|					(ВЫБРАТЬ
	|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Регистратор
	|					ИЗ
	|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами
	|					ГДЕ
	|						РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|		И (НЕ Затраты.Регистратор В
	|					(ВЫБРАТЬ
	|						РегистрНакопления.ПартииТоваровНаСкладах.Регистратор
	|					ИЗ
	|						РегистрНакопления.ПартииТоваровНаСкладах
	|					ГДЕ
	|						РегистрНакопления.ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|		И (НЕ Затраты.Регистратор В
	|					(ВЫБРАТЬ
	|						РегистрНакопления.СтоимостьОС.Регистратор
	|					ИЗ
	|						РегистрНакопления.СтоимостьОС
	|					ГДЕ
	|						РегистрНакопления.СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон))
	|" + ?(ПоВсем, "", "И Затраты.Регистратор.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Затраты.Регистратор) КАК ПРОЛ
	|
	|" + ?(НЕ Расшифровка, 
	"",
	"СГРУППИРОВАТЬ ПО
	|	ПРОЛ.Регистратор,
	|	ПРОЛ.Регистратор.Контрагент");
	
    Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаНесовпадающиеСуммы(Расшифровка = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка, 
	"ЕСТЬNULL(СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр - ВзаиморасчетыСКонтрагентами.СуммаУпр), 0) КАК Сумма",
	"
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентами.СуммаУпр, 0) КАК Сумма,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Контрагент КАК Контрагент
	|") + "
	|	
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.СуммаУпр <> ВзаиморасчетыСКонтрагентами.СуммаУпр
	|	И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|" + ?(ПоВсем, "", "И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация");	
		
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаПартииСПустымСтатусом(Расшифровка = Ложь)

	ТекстЗапроса = 		
	"ВЫБРАТЬ
	|   -ЕСТЬNULL(СУММА(ПЗП.Сумма), 0) КАК Сумма
	|" + ?(НЕ Расшифровка, 
	"",
	"	,
	|	ПЗП.Регистратор КАК Документ,
	|	ПЗП.Регистратор.Контрагент КАК Контрагент") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартиИТоваровНаСкладах.Регистратор КАК Регистратор,
	|		СУММА(ВЫБОР
	|				КОГДА ПартиИТоваровНаСкладах.ВидДвижения = &Приход
	|					ТОГДА ПартиИТоваровНаСкладах.Стоимость
	|				ИНАЧЕ -ПартиИТоваровНаСкладах.Стоимость
	|			КОНЕЦ) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартиИТоваровНаСкладах
	|	ГДЕ
	|		ПартиИТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПартиИТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|" + ?(ПоВсем, "", "И ПартиИТоваровНаСкладах.Регистратор.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПартиИТоваровНаСкладах.Регистратор) КАК ПЗП
	|
	|" + ?(НЕ Расшифровка, 
	"",
	"СГРУППИРОВАТЬ ПО
	|	ПЗП.Регистратор,
	|	ПЗП.Регистратор.Контрагент");	
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаВозвратыПоставщикам(Расшифровка = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка,
	"ЕСТЬNULL(СУММА(ПЗ.Сумма + ПЗ1.Сумма), 0) КАК Сумма",
	"	ПЗ.Регистратор КАК Документ,
	|	-ЕСТЬNULL(ПЗ1.Сумма, 0) КАК Сумма,
	|	ПЗ.Регистратор.Контрагент КАК Контрагент") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
	|		СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|	ГДЕ
	|		ПартииТоваровНаСкладах.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|		И ПартииТоваровНаСкладах.Период МЕЖДУ &ДатаНач И &ДатаКон
	|" + ?(ПоВсем, "", "И ПартииТоваровНаСкладах.Регистратор.Организация = &Организация") + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПартииТоваровНаСкладах.Регистратор) КАК ПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	|			СУММА(ВзаиморасчетыСКонтрагентами.СуммаУпр) КАК Сумма
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|		ГДЕ
	|			ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|" + ?(ПоВсем, "", "И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация") + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК ПЗ1
	|		ПО ПЗ.Регистратор = ПЗ1.Регистратор
	|ГДЕ
	|	ПЗ.Сумма <> -ПЗ1.Сумма";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаКорректировки(Расход = Ложь, Расшифровка = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка,
	"	-ЕСТЬNULL(СУММА(Корректировки.Сумма), 0) КАК Сумма",
	"	Корректировки.Сумма 	  КАК Сумма,
	|	Корректировки.Регистратор КАК Документ,
	|	Корректировки.Контрагент  КАК Контрагент") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		Взаиморасчеты.Сумма КАК Сумма,
	|		Взаиморасчеты.Регистратор КАК Регистратор,
	|		ВЫБОР
	|			КОГДА Взаиморасчеты.Регистратор ССЫЛКА Документ.КорректировкаДолга
	|				ТОГДА Взаиморасчеты.Регистратор.Контрагент
	|			ИНАЧЕ Взаиморасчеты.Регистратор.КонтрагентДебитор
	|		КОНЕЦ КАК Контрагент
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СУММА(ВЫБОР
	|					КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = &Приход
	|						ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаУпр
	|					ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаУпр
	|				КОНЕЦ) КАК Сумма,
	|			ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|		ГДЕ
	|			(ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.Взаимозачет
	|					ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
	|					ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистровНакопления)
	|			И ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &ДатаНач И &ДатаКон
	|			И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов <> 0
	|" + ?(ПоВсем, "", "И ВзаиморасчетыСКонтрагентами.Регистратор.Организация = &Организация") + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыСКонтрагентами.Регистратор) КАК Взаиморасчеты
	|	ГДЕ
	|		Взаиморасчеты.Сумма <> 0) КАК Корректировки
	|ГДЕ
	|	Корректировки.Сумма " + ?(Расход, " > ", " < ") + "0";
	
	Возврат ТекстЗапроса;
	
КонецФункции
Функция ПолучитьТекстЗапросаКурсовыеРазницы(Расход = Ложь, Расшифровка = Ложь)

ТекстЗапроса =
     "ВЫБРАТЬ
	 |"+ ?(НЕ Расшифровка,
	 "	ЕстьNULL(-СУММА(ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход = 0
	 |				ТОГДА -ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход
	 |		КОНЕЦ),0) КАК Сумма ",
	 "	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Документ,
	 |	ЕстьNULL(-(ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход = 0
	 |				ТОГДА -ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 |			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход
	 |		КОНЕЦ),0) КАК Сумма, 	 
	 |	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор,
	 |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент ") + "
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&Датанач, &ДатаКон, Запись, ) КАК ВзаиморасчетыСКонтрагентамиОбороты
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход = 0 
	 |	И ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход = 0
	 |" + ?(ПоВсем, "", "И ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Организация = &Организация") + "
	 |"+ ?(НЕ Расшифровка,"", " 
	   |УПОРЯДОЧИТЬ ПО
          |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.Дата"); 	
	
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаОСПриходРасход(Расшифровка = Ложь)
	
	ТекстЗапроса = 		
	"ВЫБРАТЬ ЕстьNULL(Сумма,0) Сумма ИЗ
|(ВЫБРАТЬ -СУММА(А.СписаннаяОстаточнаяСтоимость) Сумма ИЗ
|(ВЫБРАТЬ
| ОсновныеСредства.ОсновноеСредство,
| ОсновныеСредства.СтоимостьСписания-ЕстьNULL(ОсновныеСредстваАмортизация.НакопленнаяАмортизацияОС,0) СписаннаяОстаточнаяСтоимость 
|ИЗ
|(ВЫБРАТЬ
|	Стоимость СтоимостьСписания,
|	ОсновноеСредство
|ИЗ
|	РегистрНакопления.СтоимостьОС
|ГДЕ
|	Период МЕЖДУ &ДатаНач И &ДатаКон
|	И ВидДвижения=&Расход 
|	И Регистратор ССЫЛКА Документ.ПередачаОС
|" + ?(ПоВсем, "", "И Регистратор.Организация = &Организация") + ")ОсновныеСредства
|ЛЕВОЕ СОЕДИНЕНИЕ	
|
|(ВЫБРАТЬ
|	СтоимостьОСОбороты.ОсновноеСредство ОсновноеСредство,
|	СтоимостьОСОбороты.АмортизацияПриход КАК НакопленнаяАмортизацияОС
|ИЗ
|	РегистрНакопления.СтоимостьОС.Обороты(
|		,&ДатаКон
|		,
|		,
|		ОсновноеСредство В
|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
|				СтоимостьОС.ОсновноеСредство
|			ИЗ
|				РегистрНакопления.СтоимостьОС КАК СтоимостьОС
|			ГДЕ
|				СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
|				И СтоимостьОС.Регистратор ССЫЛКА Документ.ПередачаОС " + ?(ПоВсем, "", "И Регистратор.Организация = &Организация") + ")) КАК СтоимостьОСОбороты)
|ОсновныеСредстваАмортизация		        
|ПО ОсновныеСредства.ОсновноеСредство=ОсновныеСредстваАмортизация.ОсновноеСредство)  А)Б";
	
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаОСПередача(Расшифровка = Ложь)
	
	ТекстЗапроса = 		
	"ВЫБРАТЬ
	|" + ?(НЕ Расшифровка,
	"	ЕСТЬNULL(СУММА(П.СуммаУпр), 0) КАК Сумма",
	"	П.Регистратор КАК Документ,
	|	П.Регистратор.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(П.СуммаУпр, 0) КАК Сумма") + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПЗ.Регистратор КАК Регистратор,
	|		СУММА(ПЗ.СуммаУпр) КАК СуммаУпр
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СтоимостьОС.Регистратор КАК Регистратор,
	|			ВЫБОР
	|				КОГДА СтоимостьОС.ВидДвижения = &Приход
	|					ТОГДА СтоимостьОС.СуммаУпр
	|				ИНАЧЕ -СтоимостьОС.СуммаУпр
	|			КОНЕЦ КАК СуммаУпр
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК СтоимостьОС
	|		ГДЕ
	|			СтоимостьОС.Период МЕЖДУ &ДатаНач И &ДатаКон
	|" + ?(ПоВсем, "", "И СтоимостьОС.Регистратор.Организация = &Организация") + "
	|			И (СтоимостьОС.Регистратор ССЫЛКА Документ.ПередачаОС)) КАК ПЗ	
	|	СГРУППИРОВАТЬ ПО
	|		ПЗ.Регистратор
	|) КАК П";
	
	
	Возврат ТекстЗапроса;

КонецФункции


Процедура СформироватьФорму2(Макет, ТабДок)
	
	//// СТРУКТУРА ПОКАЗАТЕЛЕЙ
	СтруктураПоказателейФормы2 = Новый Структура("
										|ОборотРеализации,
										|ОборотРеализацииПоТоварам,
										|ОборотРеализацииАНИ, 
										|ОборотРеализацииАДИ,
										|ОборотРеализацииПени,
										|ОборотРеализацииУслуги,
										|ОборотРеализацииВУ,
										|ОборотРеализацииОС,
										|ПоступлениеВУ,
										|СебестоимостьРеализованногоТовара,
										|Затраты,
										|КорректировкаНеВП,
										|ПоступлениеСписаниеТовара,
										|ПрочиеРазницы,
										|ДопЗатратыБезТоваров,
										|ТрехсторонниеПлатежныеДокументы,
										|ПереходящиеЗатраты,
										|НесовпадающиеСуммы,
										|ПартииСПустымСтатусом,
										|ВозвратыПоставщикам,
										|ПрочийОборотРеализацииУслуг,
										|ПоступлениеСписаниеОС,
										|ПрибыльОсновнойДеятельности,
										|ПроцентыКПолучению,
										|ВнереализационныеДоходы,
										|ВнереализационныеПрочиеПоступления,
										|КорректировкиПриход,
										|ПротиворечивыеОперацииПриход,
										|ВнереализационныеРасходы,
										|КурсовыеРазницыР,
										|КурсовыеРазницыД,
										|ВнереализационныеПрочиеРасходы,
										|КорректировкиРасход,
										|ПротиворечивыеОперацииРасход,
										|ВсегоПрибыль,
										|ПоступлениеПоДоговоруД,
										|ПрочееИспользованиеПрибыли,
										|ПрочееИспользованиеПрибылиПриход,
										|ПрочееИспользованиеПрибылиРасход,
										|ИзменениеЧистыхАктивов",
										0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
										0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
										0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
										0, 0, 0, 0, 0, 0, 0);
										
	////                          ОТЧЕТ ПО ПРИБЫЛИ
	
	//// ОБОРОТ РЕАЛИЗАЦИИ ПО ТОВАРАМ
	МассивТиповДоговоров = Новый Массив;									
	МассивСтатейДДС = Новый Массив;
	
	
	ЗапросОборотРеализацииПоТоварам = Новый Запрос;
	ЗапросОборотРеализацииПоТоварам.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТоварамУслугам();
	ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("Услуга", Ложь);
	ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("Организация",Организация);
	СписокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииПоТоварам.Текст = СтрЗаменить(ЗапросОборотРеализацииПоТоварам.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииПоТоварам.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросОборотРеализацииПоТоварам.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииПоТоварам = Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ОБОРОТ РЕАЛИЗАЦИИ ПО АРЕНДЕ НЕДВИЖИМОГО ИМУЩЕСТВА
	ЗапросОборотРеализацииАНИ = Новый Запрос;
	ЗапросОборотРеализацииАНИ.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаНедвижимогоИмущества);
	
	ЗапросОборотРеализацииАНИ.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотРеализацииАНИ.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииАНИ.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииАНИ.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииАНИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииАНИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииАНИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииАНИ.Текст = СтрЗаменить(ЗапросОборотРеализацииАНИ.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииАНИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросОборотРеализацииАНИ.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииАНИ = Выборка.Сумма;	
	
	КонецЕсли;

	//// ОБОРОТ РЕАЛИЗАЦИИ ПО АРЕНДЕ ДВИЖИМОГО ИМУЩЕСТВА
	ЗапросОборотРеализацииАДИ = Новый Запрос;
	ЗапросОборотРеализацииАДИ.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаДвижимогоИмущества);
	
	ЗапросОборотРеализацииАДИ.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотРеализацииАДИ.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииАДИ.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииАДИ.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииАДИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииАДИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииАДИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииАДИ.Текст = СтрЗаменить(ЗапросОборотРеализацииАДИ.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииАДИ.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросОборотРеализацииАНИ.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииАДИ = Выборка.Сумма;	
	
	КонецЕсли;
	
	
	//// ОБОРОТ РЕАЛИЗАЦИИ ПЕНИ
	ЗапросОборотРеализацииПени = Новый Запрос;
	ЗапросОборотРеализацииПени.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Пени);
	
	ЗапросОборотРеализацииПени.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотРеализацииПени.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииПени.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииПени.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииПени.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииПени.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииПени.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииПени.Текст = СтрЗаменить(ЗапросОборотРеализацииПени.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииПени.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросОборотРеализацииПени.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииПени = Выборка.Сумма;	
	
	КонецЕсли;

	//// ОБОРОТ РЕАЛИЗАЦИИ УСЛУГИ
	ЗапросОборотРеализацииУслуги = Новый Запрос;
	ЗапросОборотРеализацииУслуги.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Услуги"));
	
	ЗапросОборотРеализацииУслуги.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотРеализацииУслуги.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииУслуги.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииУслуги.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииУслуги.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииУслуги.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииУслуги.УстановитьПараметр("списокПодразделений",списокПодразделений);
	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииУслуги.Текст = СтрЗаменить(ЗапросОборотРеализацииУслуги.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииУслуги.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросОборотРеализацииУслуги.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииУслуги = Выборка.Сумма;	
	
	КонецЕсли;

	
	//// ОБОРОТ РЕАЛИЗАЦИИ ВОЗМЕЩАЕМЫХ УСЛУГ
	ЗапросОборотРеализацииВУ = Новый Запрос;
	ЗапросОборотРеализацииВУ.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);
	
	ЗапросОборотРеализацииВУ.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотРеализацииВУ.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииВУ.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотРеализацииВУ.УстановитьПараметр("Организация",Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотРеализацииВУ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотРеализацииВУ.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотРеализацииВУ.УстановитьПараметр("списокПодразделений",списокПодразделений);

	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотРеализацииВУ.Текст = СтрЗаменить(ЗапросОборотРеализацииВУ.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотРеализацииВУ.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	
	Выборка = ЗапросОборотРеализацииВУ.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииВУ = Выборка.Сумма;	
	
	КонецЕсли;												  
	
	//// ОБОРОТ РЕАЛИЗАЦИИ ОСНОВНЫХ СРЕДСТВ
	ЗапросОборотРеализацииОС = Новый Запрос;
	ЗапросОборотРеализацииОС.Текст = ПолучитьТекстЗапросаОСПередача();
	
	ЗапросОборотРеализацииОС.УстановитьПараметр("Организация", Организация);
	ЗапросОборотРеализацииОС.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	ЗапросОборотРеализацииОС.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотРеализацииОС.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	
	Выборка = ЗапросОборотРеализацииОС.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ОборотРеализацииОС = Выборка.Сумма;	
	
	КонецЕсли;												  

	
	//// ПОСТУПЛЕНИЕ ВОЗМЕЩАЕМЫХ УСЛУГ
	ЗапросПоступленияВУ = Новый Запрос;
	ЗапросПоступленияВУ.Текст = ПолучитьТекстЗапросаВозмещаемыеУслуги();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);
	
	ЗапросПоступленияВУ.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросПоступленияВУ.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПоступленияВУ.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросПоступленияВУ.УстановитьПараметр("ПустаяСтатья", Справочники.СтатьиЗатрат.ПустаяСсылка());
	ЗапросПоступленияВУ.УстановитьПараметр("Организация", Организация);
	
	
	Выборка = ЗапросПоступленияВУ.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПоступлениеВУ = -Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ОБОРОТ РЕАЛИЗАЦИИ
	СтруктураПоказателейФормы2.ОборотРеализации = СтруктураПоказателейФормы2.ОборотРеализацииПоТоварам +
					                              СтруктураПоказателейФормы2.ОборотРеализацииАНИ +
												  СтруктураПоказателейФормы2.ОборотРеализацииАДИ +
												  СтруктураПоказателейФормы2.ОборотРеализацииПени +
												  СтруктураПоказателейФормы2.ОборотРеализацииУслуги +
												  СтруктураПоказателейФормы2.ОборотРеализацииВУ +
												  СтруктураПоказателейФормы2.ПоступлениеВУ +
												  СтруктураПоказателейФормы2.ОборотРеализацииОС;

												  
	//// СЕБЕСТОИМОСТЬ РЕАЛИЗОВАННОГО ТОВАРА
	ЗапросСебестоимостьТовара = Новый Запрос;
	ЗапросСебестоимостьТовара.Текст = ПолучитьТекстЗапросаСебестоимостьРеализованногоТовара();
	
	ЗапросСебестоимостьТовара.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросСебестоимостьТовара.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросСебестоимостьТовара.УстановитьПараметр("ПустаяСтатья", Справочники.СтатьиЗатрат.ПустаяСсылка());
	//ЗапросСебестоимостьТовара.УстановитьПараметр("Организация", Организация);
	ЗапросСебестоимостьТовара.УстановитьПараметр("Услуга", Ложь);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросСебестоимостьТовара.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросСебестоимостьТовара.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросСебестоимостьТовара.УстановитьПараметр("списокПодразделений",списокПодразделений);

	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросСебестоимостьТовара.Текст = СтрЗаменить(ЗапросСебестоимостьТовара.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросСебестоимостьТовара.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросСебестоимостьТовара.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.СебестоимостьРеализованногоТовара = -?(Выборка.Себестоимость = null,0,Выборка.Себестоимость);	
	
	КонецЕсли;

	//// ЗАТРАТЫ
	ВыборкаЗатраты = ПолучитьЗапросЗатраты();
	Если ВыборкаЗатраты.Следующий() Тогда
		СтруктураПоказателейФормы2.Затраты = -ВыборкаЗатраты.Сумма;	
	КонецЕсли;

	//// КОРРЕКТИРОВКА, НЕ ПОПАВШАЯ В ВАЛОВУЮ ПРИБЫЛЬ
	ЗапросКорректировкиНеВП = Новый Запрос;
	ЗапросКорректировкиНеВП.Текст = ПолучитьТекстЗапросаКорректировкиНеВП();
	
	ЗапросКорректировкиНеВП.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросКорректировкиНеВП.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросКорректировкиНеВП.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	ЗапросКорректировкиНеВП.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросКорректировкиНеВП.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.КорректировкаНеВП = Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ОПРИХОДОВАНИЕ / СПИСАНИЕ ТОВАРОВ
	ЗапросПоступлениеСписаниеТовара = Новый Запрос;
	ЗапросПоступлениеСписаниеТовара.Текст = ПолучитьТекстЗапросаПоступлениеСписаниеТовара();
	
	СписокСкладов = Новый СписокЗначений;
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00270"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00209"));
	СписокСкладов.Добавить(Справочники.Склады.НайтиПоКоду("00269"));

	ЗапросПоступлениеСписаниеТовара.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПоступлениеСписаниеТовара.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросПоступлениеСписаниеТовара.УстановитьПараметр("Организация", Организация);
	ЗапросПоступлениеСписаниеТовара.УстановитьПараметр("СписокСкладов", СписокСкладов);	
	
	Выборка = ЗапросПоступлениеСписаниеТовара.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПоступлениеСписаниеТовара = Выборка.Сумма;	
	
	КонецЕсли;
	
	
	//// ДОПЗАТРАТЫ БЕЗ ТОВАРОВ
	ЗапросДопЗатратыБезТоваров = Новый Запрос;
	ЗапросДопЗатратыБезТоваров.Текст = ПолучитьТекстЗапросаДопЗатратыБезТоваров();
	ЗапросДопЗатратыБезТоваров.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросДопЗатратыБезТоваров.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросДопЗатратыБезТоваров.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросДопЗатратыБезТоваров.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ДопЗатратыБезТоваров = -Выборка.Сумма;	
	
	КонецЕсли;
	
	
	//// ТРЕХСТОРОННИЕ ПЛАТЕЖНЫЕ ДОКУМЕНТЫ
	ЗапросТрехсторонниеПлатежныеДокументы = Новый Запрос;
	ЗапросТрехсторонниеПлатежныеДокументы.Текст = ПолучитьТекстЗапросаТрехсторонниеПлатежныеДокументы();
	ЗапросТрехсторонниеПлатежныеДокументы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросТрехсторонниеПлатежныеДокументы.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросТрехсторонниеПлатежныеДокументы.УстановитьПараметр("Организация", Организация);
	ЗапросТрехсторонниеПлатежныеДокументы.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	// отключил Лапенков
	//Выборка = ЗапросТрехсторонниеПлатежныеДокументы.Выполнить().Выбрать();
	
	//Если Выборка.Следующий() Тогда
	
	//	СтруктураПоказателейФормы2.ТрехсторонниеПлатежныеДокументы = -Выборка.Сумма;	
	
	//КонецЕсли;
	СтруктураПоказателейФормы2.ТрехсторонниеПлатежныеДокументы = 0;	
    // отключил Лапенков
	
	
	//// ПЕРЕХОДЯЩИЕ ЗАТРАТЫ
	//ЗапросПереходящиеЗатраты = Новый Запрос;
	//ЗапросПереходящиеЗатраты.Текст = ПолучитьТекстЗапросаПереходящиеЗатраты();
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("ДатаНач", ДатаНач);
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("ДатаКон", ДатаКон);
	//ЗапросПереходящиеЗатраты.УстановитьПараметр("Организация", Организация);
	//
	//Выборка = ЗапросПереходящиеЗатраты.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//
	//	СтруктураПоказателейФормы2.ПереходящиеЗатраты = Выборка.Сумма;	
	//
	//КонецЕсли;

	// временно
	СтруктураПоказателейФормы2.ПереходящиеЗатраты = 0;	
	// --временно
	
	//// НЕСОВПАДАЮЩИЕ СУММЫ
	ЗапросНесовпадающиеСуммы = Новый Запрос;
	ЗапросНесовпадающиеСуммы.Текст = ПолучитьТекстЗапросаНесовпадающиеСуммы();
	ЗапросНесовпадающиеСуммы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросНесовпадающиеСуммы.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросНесовпадающиеСуммы.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросНесовпадающиеСуммы.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.НесовпадающиеСуммы = -Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ПАРТИИ СПУСТЫМ СТАТУСОМ
	ЗапросПартииСПустымСтатусом = Новый Запрос;
	ЗапросПартииСПустымСтатусом.Текст = ПолучитьТекстЗапросаПартииСПустымСтатусом();
	ЗапросПартииСПустымСтатусом.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПартииСПустымСтатусом.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросПартииСПустымСтатусом.УстановитьПараметр("Организация", Организация);
	ЗапросПартииСПустымСтатусом.УстановитьПараметр("ПустойСтатус",Перечисления.СтатусыПартийТоваров.ПустаяСсылка());
	ЗапросПартииСПустымСтатусом.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	Выборка = ЗапросПартииСПустымСтатусом.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПартииСПустымСтатусом = Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ВОЗВРАТЫ ПОСТАВЩИКАМ
	ЗапросВозвратыПоставщикам = Новый Запрос;
	ЗапросВозвратыПоставщикам.Текст = ПолучитьТекстЗапросаВозвратыПоставщикам();
	ЗапросВозвратыПоставщикам.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросВозвратыПоставщикам.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросВозвратыПоставщикам.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросВозвратыПоставщикам.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ВозвратыПоставщикам = -Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ПРОЧИЙ ОБОРОТ РЕАЛИЗАЦИИ УСЛУГ
	МассивИсключаемыхТиповДоговоров = Новый Массив;
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаДвижимогоИмущества);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаНедвижимогоИмущества);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Д);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Инвестиции);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Кредит);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Пени);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Бонусы);
	МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Услуги"));
	
	МассивТиповДоговоров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыДоговоров.Ссылка КАК ТипДоговора
	|ИЗ
	|	Справочник.ТипыДоговоров КАК ТипыДоговоров
	|ГДЕ
	|	НЕ (ТипыДоговоров.Ссылка В(&МассивИсключаемыхТиповДоговоров))";
	
		
	Запрос.УстановитьПараметр("МассивИсключаемыхТиповДоговоров", МассивИсключаемыхТиповДоговоров);
	МассивТиповДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипДоговора");
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПустаяСсылка());
	
	ЗапросПрочийОборотРеализацииУслуг = Новый Запрос;
	ЗапросПрочийОборотРеализацииУслуг.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТоварамУслугамИТипамДоговоров();
		
	ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("Услуга", Истина);
	ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("Организация", Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("списокПодразделений",списокПодразделений);

	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросПрочийОборотРеализацииУслуг.Текст = СтрЗаменить(ЗапросПрочийОборотРеализацииУслуг.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросПрочийОборотРеализацииУслуг.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросПрочийОборотРеализацииУслуг.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПрочийОборотРеализацииУслуг = Выборка.Сумма;	
	
	КонецЕсли;
	
	//// ПОСТУПЛЕНИЕ / СПИСАНИЕ ОС
	ЗапросПоступлениеСписаниеОС = Новый Запрос;
	ЗапросПоступлениеСписаниеОС.Текст = ПолучитьТекстЗапросаОСПриходРасход();
	ЗапросПоступлениеСписаниеОС.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПоступлениеСписаниеОС.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросПоступлениеСписаниеОС.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	ЗапросПоступлениеСписаниеОС.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросПоступлениеСписаниеОС.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПоступлениеСписаниеОС = Выборка.Сумма;	
	
	КонецЕсли;
	
	
	//// ПРОЧИЕ РАЗНИЦЫ
 	СтруктураПоказателейФормы2.ПрочиеРазницы =    СтруктураПоказателейФормы2.КорректировкаНеВП +
												  СтруктураПоказателейФормы2.ПоступлениеСписаниеТовара +
											 	  СтруктураПоказателейФормы2.ДопЗатратыБезТоваров +
												  СтруктураПоказателейФормы2.ТрехсторонниеПлатежныеДокументы +
					                              СтруктураПоказателейФормы2.ПереходящиеЗатраты +
												  СтруктураПоказателейФормы2.НесовпадающиеСуммы +
												  СтруктураПоказателейФормы2.ПартииСПустымСтатусом +
												  СтруктураПоказателейФормы2.ВозвратыПоставщикам +
												  СтруктураПоказателейФормы2.ПрочийОборотРеализацииУслуг +
												  СтруктураПоказателейФормы2.ПоступлениеСписаниеОС;

	//// ВАЛОВАЯ ПРИБЫЛЬ
	СтруктураПоказателейФормы2.ПрибыльОсновнойДеятельности = СтруктураПоказателейФормы2.ОборотРеализации +
					                              СтруктураПоказателейФормы2.СебестоимостьРеализованногоТовара +
												  СтруктураПоказателейФормы2.Затраты +
												  СтруктураПоказателейФормы2.ПрочиеРазницы;

												  
	//////                               ПРОЦЕНТЫ
											  
	ЗапросПроцентыКПолучению = Новый Запрос;
	ЗапросПроцентыКПолучению.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
	
	ЗапросПроцентыКПолучению.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросПроцентыКПолучению.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросПроцентыКПолучению.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	ЗапросПроцентыКПолучению.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	//ЗапросПроцентыКПолучению.УстановитьПараметр("Организация", Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросПроцентыКПолучению.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросПроцентыКПолучению.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросПроцентыКПолучению.УстановитьПараметр("списокПодразделений",списокПодразделений);

	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросПроцентыКПолучению.Текст = СтрЗаменить(ЗапросПроцентыКПолучению.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросПроцентыКПолучению.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	Выборка = ЗапросПроцентыКПолучению.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПроцентыКПолучению = Выборка.Сумма;	
	
	КонецЕсли;
	
	//////                  ВНЕРИАЛИЗАЦИОННЫЕ РАСХОДЫ И ДОХОДЫ
	
	////ПРОЧИЕ ДОХОДЫ
	ЗапросВнереализационныеДоходы = Новый Запрос;
	ЗапросВнереализационныеДоходы.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы();
	МассивСтатейДДС.Очистить();
	МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
	
	ЗапросВнереализационныеДоходы.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	ЗапросВнереализационныеДоходы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросВнереализационныеДоходы.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросВнереализационныеДоходы.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.НайтиПоКоду("ЛН02398"));
	ЗапросВнереализационныеДоходы.УстановитьПараметр("Бонусы",Справочники.СтатьиДвиженияДенежныхСредств.Бонусы);
	ЗапросВнереализационныеДоходы.УстановитьПараметр("Организация",Организация);

	Выборка = ЗапросВнереализационныеДоходы.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураПоказателейФормы2.ВнереализационныеПрочиеПоступления = Выборка.Сумма;	
	Иначе	
		СтруктураПоказателейФормы2.ВнереализационныеПрочиеПоступления = 0;	
	КонецЕсли;
	
	///Курсовые разницы Доходы
	ЗапросКурсовыеРазницы = Новый Запрос;
	ЗапросКурсовыеРазницы.Текст = ПолучитьТекстЗапросаКурсовыеРазницы(Истина);
	
	ЗапросКурсовыеРазницы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросКурсовыеРазницы.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросКурсовыеРазницы.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросКурсовыеРазницы.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Сумма > 0 Тогда
			СтруктураПоказателейФормы2.КурсовыеРазницыД = Выборка.Сумма;
		КонецЕсли;
	Иначе 	
		СтруктураПоказателейФормы2.КурсовыеРазницыД = 0;
	КонецЕсли;

	
	//// КОРРЕКТИРОВКИ ПРИХОД
	
	ЗапросКорректировкиПриход = Новый Запрос;
	ЗапросКорректировкиПриход.Текст = ПолучитьТекстЗапросаКорректировки();
	
	ЗапросКорректировкиПриход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросКорректировкиПриход.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросКорректировкиПриход.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	ЗапросКорректировкиПриход.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросКорректировкиПриход.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.КорректировкиПриход = Выборка.Сумма;	
	
	КонецЕсли;

	
	// отключил Лапенков
	//// ПРОЧИЕ ПРОТИВОРЕЧИВЫЕ ДОХОДЫ
	//ЗапросВнереализационныеПротиворечивыеДоходы = Новый Запрос;
	//ЗапросВнереализационныеПротиворечивыеДоходы.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы();
	//МассивСтатейДДС.Очистить();
	//МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
	//
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("ДатаНач", ДатаНач);
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("ДатаКон", ДатаКон);
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("Организация", Организация);
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	//ЗапросВнереализационныеПротиворечивыеДоходы.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
	//
	//Выборка = ЗапросВнереализационныеПротиворечивыеДоходы.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//
	//	СтруктураПоказателейФормы2.ПротиворечивыеОперацииПриход = Выборка.Сумма;	
	//
	//КонецЕсли;
	
	СтруктураПоказателейФормы2.ПротиворечивыеОперацииПриход = 0;	
	
	// --отключил Лапенков
	
	////ВНЕРЕАЛИЗАЦИОННЫЕ ДОХОДЫ
	
	СтруктураПоказателейФормы2.ВнереализационныеДоходы = СтруктураПоказателейФормы2.ВнереализационныеПрочиеПоступления +
	                                                      СтруктураПоказателейФормы2.КорректировкиПриход +
														  СтруктураПоказателейФормы2.КурсовыеРазницыД +
														  СтруктураПоказателейФормы2.ПротиворечивыеОперацииПриход;

		////ПРОЧИЕ РАСХОДЫ
	ЗапросВнереализационныеРасходы = Новый Запрос;
	ЗапросВнереализационныеРасходы.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина);
	МассивСтатейДДС.Очистить();
	МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
	
	ЗапросВнереализационныеРасходы.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	ЗапросВнереализационныеРасходы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросВнереализационныеРасходы.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросВнереализационныеРасходы.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросВнереализационныеРасходы.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураПоказателейФормы2.ВнереализационныеПрочиеРасходы = -Выборка.Сумма;	
	Иначе
		СтруктураПоказателейФормы2.ВнереализационныеПрочиеРасходы = 0;	
	КонецЕсли;
	
	///Курсовые разницы Расходы
	ЗапросКурсовыеРазницы = Новый Запрос;
	ЗапросКурсовыеРазницы.Текст = ПолучитьТекстЗапросаКурсовыеРазницы(Истина);
	
	ЗапросКурсовыеРазницы.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросКурсовыеРазницы.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросКурсовыеРазницы.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросКурсовыеРазницы.Выполнить().Выбрать();
	
	Если Выборка.Следующий() и Выборка.Сумма <0  Тогда
	
		СтруктураПоказателейФормы2.КурсовыеРазницыР = Выборка.Сумма;	
	иначе 	
	    СтруктураПоказателейФормы2.КурсовыеРазницыР = 0;
	КонецЕсли;
	
	
	
		
	//// КОРРЕКТИРОВКИ РАСХОД
	ЗапросКорректировкиРасход = Новый Запрос;
	ЗапросКорректировкиРасход.Текст = ПолучитьТекстЗапросаКорректировки(Истина);
	
	ЗапросКорректировкиРасход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросКорректировкиРасход.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросКорректировкиРасход.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	ЗапросКорректировкиРасход.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросКорректировкиРасход.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.КорректировкиРасход = Выборка.Сумма;	
	
	КонецЕсли;


// отключил Лапенков	
	////// ПРОЧИЕ ПРОТИВОРЕЧИВЫЕ РАСХОД
	//ЗапросВнереализационныеПротиворечивыеРасходы = Новый Запрос;
	//ЗапросВнереализационныеПротиворечивыеРасходы.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина);
	//МассивСтатейДДС.Очистить();
	//МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
	//
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("ДатаНач", ДатаНач);
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("ДатаКон", ДатаКон);
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("Организация", Организация);
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	//ЗапросВнереализационныеПротиворечивыеРасходы.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
	//
	//Выборка = ЗапросВнереализационныеПротиворечивыеРасходы.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//
	//	СтруктураПоказателейФормы2.ПротиворечивыеОперацииРасход = Выборка.Сумма;	
	//
	//КонецЕсли;
	СтруктураПоказателейФормы2.ПротиворечивыеОперацииРасход = 0;	

	//-- отключил Лапенков
	////ВНЕРЕАЛИЗАЦИОННЫЕ РАСХОДЫ
	
	СтруктураПоказателейФормы2.ВнереализационныеРасходы = СтруктураПоказателейФормы2.ВнереализационныеПрочиеРасходы +
	                                                      СтруктураПоказателейФормы2.КорректировкиРасход +
														  СтруктураПоказателейФормы2.КурсовыеРазницыР +
														  СтруктураПоказателейФормы2.ПротиворечивыеОперацииРасход;
	
	
	
	//// ИТОГ - ВСЕГО ПРИБЫЛЬ
	
	СтруктураПоказателейФормы2.ВсегоПрибыль 			= СтруктураПоказателейФормы2.ПрибыльОсновнойДеятельности +
														  СтруктураПоказателейФормы2.ПроцентыКПолучению + 
                                                          СтруктураПоказателейФормы2.ВнереализационныеДоходы +
														  СтруктураПоказателейФормы2.ВнереализационныеРасходы;


	
	//////                         ИСПОЛЬЗОВАНИЕ ПРИБЫЛИ
	
	/////ДОГОВОР Д
	
	

	ЗапросОборотПоДоговоруД = Новый Запрос;
	ЗапросОборотПоДоговоруД.Текст = ПолучитьТекстЗапросаОборотаРеализацииПоТипамДоговора();
	МассивТиповДоговоров.Очистить();
	МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Д);
	
	ЗапросОборотПоДоговоруД.УстановитьПараметр("ТипыДоговоров", МассивТиповДоговоров);
	ЗапросОборотПоДоговоруД.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросОборотПоДоговоруД.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая));
	//ЗапросОборотПоДоговоруД.УстановитьПараметр("Организация", Организация);
	
	списокПодразделений = новый СписокЗначений;
	Если организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Турция 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
	    ЗапросОборотПоДоговоруД.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00005") Тогда //WG
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
	    ЗапросОборотПоДоговоруД.УстановитьПараметр("списокПодразделений",списокПодразделений);
	ИначеЕсли организация = Справочники.Организации.НайтиПоКоду("00002") Тогда //Доп 
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
	    ЗапросОборотПоДоговоруД.УстановитьПараметр("списокПодразделений",списокПодразделений);

	Иначе
        списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00162"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00166"));
		списокПодразделений.Добавить(Справочники.Подразделения.НайтиПоКоду("00167"));
		ЗапросОборотПоДоговоруД.Текст = СтрЗаменить(ЗапросОборотПоДоговоруД.Текст,"Подразделение В (&СписокПодразделений)","не Подразделение В (&СписокПодразделений)");
	    ЗапросОборотПоДоговоруД.УстановитьПараметр("списокПодразделений",списокПодразделений);
    КонецЕсли;
	
	
	Выборка = ЗапросОборотПоДоговоруД.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПоступлениеПоДоговоруД = Выборка.Сумма;	
	
	КонецЕсли;												  
	
	
	
	
	

		/////ПРОЧЕЕ ИСПОЛЬЗОВАНИЕ ПРИБЫЛИ
	
		////ПРИХОД
	ЗапросИспользованиеПрибылиПриход = Новый Запрос;
	ЗапросИспользованиеПрибылиПриход.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(,Истина);	
	МассивСтатейДДС.Очистить();
	МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
	МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);	
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.НайтиПоКоду("ЛН02398"));
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("Бонусы",Справочники.СтатьиДвиженияДенежныхСредств.Бонусы);
	ЗапросИспользованиеПрибылиПриход.УстановитьПараметр("Организация", Организация);

	
	Выборка = ЗапросИспользованиеПрибылиПриход.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПрочееИспользованиеПрибылиПриход = Выборка.Сумма;	
	
	КонецЕсли;
		
	
	
	
	
	////РАСХОД
	ЗапросИспользованиеПрибылиРасход = Новый Запрос;
	ЗапросИспользованиеПрибылиРасход.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина,Истина);	
	МассивСтатейДДС.Очистить();
	МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
	ЗапросИспользованиеПрибылиРасход.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
	ЗапросИспользованиеПрибылиРасход.УстановитьПараметр("ДатаНач", ДатаНач);
	ЗапросИспользованиеПрибылиРасход.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	ЗапросИспользованиеПрибылиРасход.УстановитьПараметр("Организация", Организация);
	
	
	Выборка = ЗапросИспользованиеПрибылиРасход.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СтруктураПоказателейФормы2.ПрочееИспользованиеПрибылиРасход = -Выборка.Сумма;	
	
	КонецЕсли;
	
	

	
//	
//
//
//
//	ВЫВОД РЕЗУЛЬТАТОВ
//
//
//
//
//
	
	
	
	////ПРИХОД + РАСХОД -> ПРОЧЕЕ ИСПОЛЬЗОВАНИЕ ПРИБЫЛИ
	
	СтруктураПоказателейФормы2.ПрочееИспользованиеПрибыли = СтруктураПоказателейФормы2.ПрочееИспользованиеПрибылиПриход +
					                              	  СтруктураПоказателейФормы2.ПрочееИспользованиеПрибылиРасход;
												  
												  
												  
	//////                                 ИТОГИ
	
	СтруктураПоказателейФормы2.ИзменениеЧистыхАктивов	= СтруктураПоказателейФормы2.ВсегоПрибыль +
														  СтруктураПоказателейФормы2.ПоступлениеПоДоговоруД + 
                                                          СтруктураПоказателейФормы2.ПрочееИспользованиеПрибыли;

	
	
	////////////////////////////////////////////////////////////////////////											  
	//// Вывод Формы 2
	
	ОсновнойСчетчик = 1;
	
	ОбластьФ2Заголовок = Макет.ПолучитьОбласть("Форма2Заголовок");
	ОбластьФ2ШапкаПараметра = Макет.ПолучитьОбласть("Форма2Шапка");
	ОбластьФ2Параметр = Макет.ПолучитьОбласть("Форма2Показатель");
	ОбластьФ2Итоги = Макет.ПолучитьОбласть("Форма2Итоги");
	ОбластьОписания = Макет.ПолучитьОбласть("СтрокаОписания");
	
	ОбластьОписания.Параметры.Имя = "Форма №2";
	ТабДок.Вывести(ОбластьОписания);
	
	////                          ОТЧЕТ ПО ПРИБЫЛИ
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ОбластьФ2Заголовок.Параметры.Имя = "Отчет по прибыли";
	ТабДок.Вывести(ОбластьФ2Заголовок, 1);
	
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Оборот реализации";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "ОборотРеализации";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ОборотРеализации;
    ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("ОборотРеализацииПоТоварам", "Оборот реализации по товарам");
	СписокПоказателей.Добавить("ОборотРеализацииАНИ", "Оборот реализации по аренде недвижимого имущества");
	СписокПоказателей.Добавить("ОборотРеализацииАДИ", "Оборот реализации по аренде движимого имущества");
	СписокПоказателей.Добавить("ОборотРеализацииПени", "Пени выставленные");
	СписокПоказателей.Добавить("ОборотРеализацииУслуги", "Оборот реализации услуг");	
	СписокПоказателей.Добавить("ОборотРеализацииОС", "Оборот реализации основных средств");
	СписокПоказателей.Добавить("ОборотРеализацииВУ", "Оборот реализации возмещаемых услуг (ТЗР, ЖД и пр.)");
	СписокПоказателей.Добавить("ПоступлениеВУ", "Поступление возмещаемых услуг (ТЗР, ЖД и пр.)");
	
	Сч = 1;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2Параметр.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2Параметр.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2Параметр.Параметры.Номер = Строка(ОсновнойСчетчик) + "." + Строка(Сч) + ".";
		ОбластьФ2Параметр.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2Параметр, 2, , Ложь);
	    Сч = Сч + 1;
		
	КонецЦикла;
	
	ОсновнойСчетчик = ОсновнойСчетчик + 1;
	СписокПоказателей.Очистить();
	СписокПоказателей.Добавить("СебестоимостьРеализованногоТовара", "Себестоимость реализованного товара");
	СписокПоказателей.Добавить("Затраты", "Затраты");
	
	Если СтруктураПоказателейФормы2.ПрочиеРазницы <> 0 Тогда
	
		СписокПоказателей.Добавить("ПрочиеРазницы", "Прочие разницы");
	
	КонецЕсли; 
	
	Сч = ОсновнойСчетчик;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2ШапкаПараметра.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(Сч) + ".";
		ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ОсновнойСчетчик = Сч - 1;
	
	СписокПоказателей.Очистить();
	
	Если СтруктураПоказателейФормы2.ПрочиеРазницы <> 0 Тогда
		
		Если СтруктураПоказателейФормы2.КорректировкаНеВП <> 0 Тогда
			
			СписокПоказателей.Добавить("КорректировкаНеВП", "Корректировка, не попавшая в валовую прибыль");
			
		КонецЕсли;
		
		Если СтруктураПоказателейФормы2.ПоступлениеСписаниеТовара <> 0 Тогда
			
			СписокПоказателей.Добавить("ПоступлениеСписаниеТовара", "Списание / оприходование товаров");
			
		КонецЕсли;
	
		
		Если СтруктураПоказателейФормы2.ДопЗатратыБезТоваров <> 0 Тогда
		
			СписокПоказателей.Добавить("ДопЗатратыБезТоваров", "Доп. затраты без товаров");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ТрехсторонниеПлатежныеДокументы <> 0 Тогда
		
			СписокПоказателей.Добавить("ТрехсторонниеПлатежныеДокументы", "Трехсторонние ПП (платежные документы)");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ПереходящиеЗатраты <> 0 Тогда
		
			СписокПоказателей.Добавить("ПереходящиеЗатраты", "Переходящие затраты");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.НесовпадающиеСуммы <> 0 Тогда
		
			СписокПоказателей.Добавить("НесовпадающиеСуммы", "Несовпадающие суммы");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ПартииСПустымСтатусом <> 0 Тогда
		
			СписокПоказателей.Добавить("ПартииСПустымСтатусом", "Партии с пустым статусом");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ВозвратыПоставщикам <> 0 Тогда
		
			СписокПоказателей.Добавить("ВозвратыПоставщикам", "Возвраты поставщикам (разницы)");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ПрочийОборотРеализацииУслуг <> 0 Тогда
		
			СписокПоказателей.Добавить("ПрочийОборотРеализацииУслуг", "Прочий оборот реализации услуг (не по договорам услуг)");
		
		КонецЕсли; 
		
		Если СтруктураПоказателейФормы2.ПоступлениеСписаниеОС <> 0 Тогда
		
			СписокПоказателей.Добавить("ПоступлениеСписаниеОС", "Поступление / списание основных средств");
		
		КонецЕсли; 

		Сч = 1;
		Для каждого СтрокаСписка Из СписокПоказателей Цикл
			
			ОбластьФ2Параметр.Параметры.Имя = СтрокаСписка.Представление;
			ОбластьФ2Параметр.Параметры.Расшифровка = СтрокаСписка.Значение;
			ОбластьФ2Параметр.Параметры.Номер = Строка(ОсновнойСчетчик) + "." + Строка(Сч) + ".";
			ОбластьФ2Параметр.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
			ТабДок.Вывести(ОбластьФ2Параметр, 2, , Ложь);
			Сч = Сч + 1;
			
		КонецЦикла;
		
		
	КонецЕсли; 
	
	ОсновнойСчетчик = ОсновнойСчетчик + 1;
	СписокПоказателей.Очистить();	
	СписокПоказателей.Добавить("ПрибыльОсновнойДеятельности", "Валовая прибыль");
	
	Сч = ОсновнойСчетчик;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2ШапкаПараметра.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
		ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
		Сч = Сч + 1;
		
	КонецЦикла;

	ОсновнойСчетчик = Сч;
	
	//////                               ПРОЦЕНТЫ
	//ОсновнойСчетчик = 1;
	ОбластьФ2Заголовок.Параметры.Имя = "Проценты";
	ТабДок.Вывести(ОбластьФ2Заголовок, 1);
	
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Проценты к получению";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "ПроцентыКПолучению";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ПроцентыКПолучению;
	ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
	
	ОсновнойСчетчик = ОсновнойСчетчик + 1;
	
	//////                  ВНЕРИАЛИЗАЦИОННЫЕ РАСХОДЫ И ДОХОДЫ
	//ОсновнойСчетчик = 1;
	ОбластьФ2Заголовок.Параметры.Имя = "Внереализационные доходы и расходы";
	ТабДок.Вывести(ОбластьФ2Заголовок, 1);
	
	//// ДОХОДЫ
	
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Доходы";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "Доходы";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ВнереализационныеДоходы;
	ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
	
	СписокПоказателей.Очистить();
	СписокПоказателей.Добавить("ВнереализационныеПрочиеПоступления", "Прочие поступления: бонусы полученные,  проценты 
									  								 |за просрочку платежа к получению");

	Если СтруктураПоказателейФормы2.КурсовыеРазницыД <> 0 Тогда																 
	СписокПоказателей.Добавить("КурсовыеРазницыД", "Курсовые разницы");
	конецЕсли;
	СписокПоказателей.Добавить("КорректировкиПриход", "Корректировка долга уменьшающая нашу задолженность");
	
	Если СтруктураПоказателейФормы2.ПротиворечивыеОперацииПриход <> 0 Тогда
		
		СписокПоказателей.Добавить("ПротиворечивыеОперацииПриход", "Операции прихода с расходными статьями движения
																   |денежных средств");
			
	КонецЕсли; 
	
	Сч = 1;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2Параметр.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2Параметр.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2Параметр.Параметры.Номер = Строка(ОсновнойСчетчик) + "." + Строка(Сч) + ".";
		ОбластьФ2Параметр.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2Параметр, 2, , Ложь);
	    Сч = Сч + 1;
		
	КонецЦикла;

	ОсновнойСчетчик = ОсновнойСчетчик + 1;
		
	//// РАСХОДЫ
	
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Расходы";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "Расходы";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ВнереализационныеРасходы;
	ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
	
	СписокПоказателей.Очистить();
	СписокПоказателей.Добавить("ВнереализационныеПрочиеРасходы", "Прочие расходы: бонусы предоставленные, проценты
									  							 |за просрочку платежа к выплате"); 
																 
	Если СтруктураПоказателейФормы2.КурсовыеРазницыР <> 0 Тогда																 
     СписокПоказателей.Добавить("КурсовыеРазницыР", "Курсовые разницы");
	конецЕсли;
															 
	СписокПоказателей.Добавить("КорректировкиРасход", "Корректировка долга увеличивающая нашу задолженность");
	
	Если СтруктураПоказателейФормы2.ПротиворечивыеОперацииРасход <> 0 Тогда
		
		СписокПоказателей.Добавить("ПротиворечивыеОперацииРасход", "Операции расхода с приходными статьями движения
																   |денежных средств");
			
	КонецЕсли; 
	
	Сч = 1;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2Параметр.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2Параметр.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2Параметр.Параметры.Номер = Строка(ОсновнойСчетчик) + "." + Строка(Сч) + ".";
		ОбластьФ2Параметр.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2Параметр, 2, , Ложь);
	    Сч = Сч + 1;
		
	КонецЦикла;

	ОсновнойСчетчик = ОсновнойСчетчик + 1;
	
	//// ИТОГ - ВСЕГО ПРИБЫЛЬ
	
	ОбластьФ2Итоги.Параметры.Имя = "Всего прибыль";
	ОбластьФ2Итоги.Параметры.Значение = СтруктураПоказателейФормы2.ВсегоПрибыль;
	ТабДок.Вывести(ОбластьФ2Итоги, 1);

	
	
	//////                         ИСПОЛЬЗОВАНИЕ ПРИБЫЛИ
	//ОсновнойСчетчик = 1;
	ОбластьФ2Заголовок.Параметры.Имя = "Использование прибыли";
	ТабДок.Вывести(ОбластьФ2Заголовок, 1);
	
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Поступление по договору ""Д""";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "ПоступлениеПоДоговоруД";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ПоступлениеПоДоговоруД;
	ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);

	ОсновнойСчетчик = ОсновнойСчетчик + 1;
	ОбластьФ2ШапкаПараметра.Параметры.Имя = "Прочее использование прибыли";
	ОбластьФ2ШапкаПараметра.Параметры.Расшифровка = "ПрочееИспользованиеПрибыли";
	ОбластьФ2ШапкаПараметра.Параметры.Номер = Строка(ОсновнойСчетчик) + ".";
	ОбластьФ2ШапкаПараметра.Параметры.Значение = СтруктураПоказателейФормы2.ПрочееИспользованиеПрибыли;
	ТабДок.Вывести(ОбластьФ2ШапкаПараметра, 1);
	
	СписокПоказателей.Очистить();
	СписокПоказателей.Добавить("ПрочееИспользованиеПрибылиПриход", "Прочее использование прибыли (Приход)");
	СписокПоказателей.Добавить("ПрочееИспользованиеПрибылиРасход", "Прочее использование прибыли (Расход)");
	
	Сч = 1;
	Для каждого СтрокаСписка Из СписокПоказателей Цикл
	
		ОбластьФ2Параметр.Параметры.Имя = СтрокаСписка.Представление;
		ОбластьФ2Параметр.Параметры.Расшифровка = СтрокаСписка.Значение;
		ОбластьФ2Параметр.Параметры.Номер = Строка(ОсновнойСчетчик) + "." + Строка(Сч) + ".";
		ОбластьФ2Параметр.Параметры.Значение = СтруктураПоказателейФормы2[СтрокаСписка.Значение];
		ТабДок.Вывести(ОбластьФ2Параметр, 2, , Ложь);
	    Сч = Сч + 1;
		
	КонецЦикла;

	
	//////                                ИТОГИ
	
	ОбластьФ2Итоги.Параметры.Имя = "ИЗМЕНЕНИЕ ЧИСТОГО АКТИВА";
	ОбластьФ2Итоги.Параметры.Значение = СтруктураПоказателейФормы2.ИзменениеЧистыхАктивов;
	ТабДок.Вывести(ОбластьФ2Итоги, 1);
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	//// Вывод Формы 2
	
КонецПроцедуры

Функция ОбработкаРасшифровкиФорма2(Элемент, Расшифровка)
	
	
	Если (Расшифровка = "ОборотРеализации") Тогда 
		
		
		Возврат Истина;
   	
		
	ИначеЕсли (Расшифровка = "ОборотРеализацииПоТоварам") ИЛИ (Расшифровка = "СебестоимостьРеализованногоТовара") Тогда
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;//ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = ДатаКон;
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга"); 
		
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Ложь;
		ОтборУслуга.Использование = Истина;
		Если не повсем тогда
			Если Организация = Справочники.Организации.НайтиПоКоду("00001") Тогда
				ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ПодразделениеВЭД"); 
				
				если ОтборПодразделение = неопределено Тогда
					
					ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение.ВЭД");
					
				КонецЕсли;
				
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Значение = Ложь;
				ОтборПодразделение.Использование = Истина;
				
			иначе			
				ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Подразделение"); 
				если ОтборПодразделение = неопределено Тогда
					ОтборПодразделение = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Подразделение");
				КонецЕсли;
				
				ОтборПодразделение.ВидСравнения = ВидСравнения.Равно;
				ОтборПодразделение.Использование = Истина;
				Если Организация = Справочники.Организации.НайтиПоКоду("00006") тогда //Турция
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00162");
				иначеЕсли  Организация = Справочники.Организации.НайтиПоКоду("00005") тогда //WG
					ОтборПодразделение.Значение = Справочники.Подразделения.НайтиПоКоду("00166");
				конецесли;
				
			конецЕсли;	
		КонецЕсли;
		
		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;

		
	ИначеЕсли (Расшифровка = "ОборотРеализацииАНИ") Тогда 	
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;//ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаНедвижимогоИмущества);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		
		
	ИначеЕсли (Расшифровка = "ОборотРеализацииАДИ") Тогда 
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаДвижимогоИмущества);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
        		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		

				
	ИначеЕсли (Расшифровка = "ОборотРеализацииПени") Тогда
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;///ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.Пени);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
        		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ОборотРеализацииУслуги") Тогда	
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;//ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Услуги"));
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
        		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ОборотРеализацииВУ") Тогда 
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;//ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = Новый Граница(КонецДня(ДатаКон), ВидГраницы.Включая);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
		
        Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
				
	ИначеЕсли (Расшифровка = "ПрочиеРазницы") Тогда 	
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ПрочийОборотРеализацииУслуг") Тогда 
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;//ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		
		КонецЕсли;
		
		ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("НоменклатураУслуга");
		ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		ОтборУслуга.Значение = Истина;
		ОтборУслуга.Использование = Истина;	
		
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура");
		
		КонецЕсли;

		ОтборНоменклатура = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура");
		ОтборНоменклатура.ВидСравнения = ВидСравнения.НеРавно;
		ОтборНоменклатура.Значение = Справочники.Номенклатура.НайтиПоКоду("ЛН02398");
		ОтборНоменклатура.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		МассивИсключаемыхТиповДоговоров = Новый Массив;
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаДвижимогоИмущества);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.АрендаНедвижимогоИмущества);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ВозмещаемыеУслуги);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Д);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Инвестиции);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Кредит);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.Пени);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоКредитам);
		МассивИсключаемыхТиповДоговоров.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Услуги"));
		
		МассивТиповДоговоров = Новый Массив;
		МассивТиповДоговоров.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТипыДоговоров.Ссылка КАК ТипДоговора
		|ИЗ
		|	Справочник.ТипыДоговоров КАК ТипыДоговоров
		|ГДЕ
		|	НЕ (ТипыДоговоров.Ссылка В(&МассивИсключаемыхТиповДоговоров))";
		
		
		Запрос.УстановитьПараметр("МассивИсключаемыхТиповДоговоров", МассивИсключаемыхТиповДоговоров);
		МассивТиповДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипДоговора");
		МассивТиповДоговоров.Добавить(Справочники.ТипыДоговоров.ПустаяСсылка());
		
		СписокТипов = Новый СписокЗначений;
		
		Для каждого СтрокаМассива Из МассивТиповДоговоров Цикл
		
			СписокТипов.Добавить(СтрокаМассива);
		
		КонецЦикла; 
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = СписокТипов;
		ОтборТипаДоговора.Использование = Истина;			
        		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ПрибыльОсновнойДеятельности") Тогда 	
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ПроцентыКПолучению") Тогда
		
		//ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		//ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		//ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		//ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = Отчеты.ВаловаяПрибыль.Создать() ;///ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		//Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура.Услуга") = Неопределено Тогда
		//
		//	ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		//
		//КонецЕсли;
		//
		//ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура.Услуга");
		//ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		//ОтборУслуга.Значение = Истина;
		//ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.ПроцентыПоИнвестициям);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
		
		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "Доходы") Тогда 
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ВнереализационныеПрочиеПоступления") Тогда 	
		
		СтрокаЗаголовка = "Прочие внереализационные доходы";

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(,,Истина);
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
	
		Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.НайтиПоКоду("ЛН02398"));
	    Запрос.УстановитьПараметр("Бонусы",Справочники.СтатьиДвиженияДенежныхСредств.Бонусы);

	ИначеЕсли (Расшифровка = "КурсовыеРазницыР") или (Расшифровка = "КурсовыеРазницыД")  Тогда 	
		
		СтрокаЗаголовка = "Курсовые разницы";

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаКурсовыеРазницы(, Истина);
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
	
			
	ИначеЕсли (Расшифровка = "КорректировкиПриход") Тогда 	
		
		СтрокаЗаголовка = "Корректировки, уменьшающие нашу задолженность";

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаКорректировки(, Истина);
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("Организация", Организация);
			
	ИначеЕсли (Расшифровка = "ПротиворечивыеОперацииПриход") Тогда 	
		
		СтрокаЗаголовка = "Операции прихода с расходными статьями ДДС";

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(,,Истина);
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
	
		Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		
	ИначеЕсли (Расшифровка = "Расходы") Тогда 	
		
		Возврат Истина;
		
	ИначеЕсли (Расшифровка = "ВнереализационныеПрочиеРасходы") Тогда
		
		СтрокаЗаголовка = "Прочие внереализационные расхода";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина,,Истина);
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
	
		Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		
	ИначеЕсли (Расшифровка = "КорректировкиРасход") Тогда 	
		
		СтрокаЗаголовка = "Корректировки, увеличивающие нашу задолженность";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаКорректировки(Истина, Истина);
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("Организация", Организация);
		
	ИначеЕсли (Расшифровка = "ПротиворечивыеОперацииРасход") Тогда 	
		
		СтрокаЗаголовка = "Операции расхода с приходными статьями ДДС";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина,,Истина);
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
	
		Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		
	ИначеЕсли (Расшифровка = "ОборотРеализацииОС") Тогда 	
		
		СтрокаЗаголовка = "Передача основных средств на сторону (контрагенту)";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаОСПередача(Истина);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);

		
	ИначеЕсли (Расшифровка = "ПоступлениеПоДоговоруД") Тогда 	
		
		ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Валовая прибыль");
		ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ХранилищеВО.Записать(ИмяФайла);
		
		ОбработкаДЗ = ВнешниеОбработки.Создать(ИмяФайла);
		ОбработкаДЗ.ОбщийОтчет.ДатаНач = ДатаНач;
		ОбработкаДЗ.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
		
		ФормаОбработки = ОбработкаДЗ.ПолучитьОсновнуюФорму();
		ФормаОбработки.Открыть();
		
		
		Для Каждого СтрокаОтбора из ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор Цикл
			СтрокаОтбора.Использование = Ложь;	
		КонецЦикла;
		
		//Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура.Услуга") = Неопределено Тогда
		//
		//	ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("Номенклатура.Услуга");
		//
		//КонецЕсли;
		//
		//ОтборУслуга = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("Номенклатура.Услуга");
		//ОтборУслуга.ВидСравнения = ВидСравнения.Равно;
		//ОтборУслуга.Значение = Истина;
		//ОтборУслуга.Использование = Истина;	

		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора") = Неопределено Тогда
		
			ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента.ТипДоговора");
		
		КонецЕсли;
		
		ОтбираемыеТипыДоговоров = Новый СписокЗначений;
		ОтбираемыеТипыДоговоров.Очистить();
		ОтбираемыеТипыДоговоров.Добавить(Справочники.ТипыДоговоров.Д);
		
		ОтборТипаДоговора = ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагентаТипДоговора");
		ОтборТипаДоговора.ВидСравнения = ВидСравнения.ВСписке;
		ОтборТипаДоговора.Значение = ОтбираемыеТипыДоговоров;
		ОтборТипаДоговора.Использование = Истина;	
        		Если ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("ДокументПродажи") = Неопределено Тогда
		
			 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить(ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].ПутьКДанным, 
			 																 ОбработкаДЗ.ОбщийОтчет.ПостроительОтчета.ДоступныеПоля["ДокументПродажи"].Имя);
		
		КонецЕсли; 
		
		Для каждого Показатель Из ФормаОбработки.Показатели Цикл
			
			///////Показатели
			//Количество
			//Стоимость
			//СтоимостьЕдиницы
			//Себестоимость
			//СебестоимостьЕдиницы
			//ВаловаяПрибыль
			//ВаловаяПрибыльЕдиницы
			//РентабельностьПродаж
			//ПроцентНаценки
			
			Если (Показатель.Имя = "Количество")
				 ИЛИ (Показатель.Имя = "Стоимость") 
				 ИЛИ (Показатель.Имя = "ВаловаяПрибыль") Тогда
				 
				 Показатель.Использование = Истина;
				 
			Иначе
				
				 Показатель.Использование = Ложь;
			
			КонецЕсли; 	
			
		КонецЦикла; 

		ФормаОбработки.ОбновитьОтчет();
		
		Возврат Истина;

		
	ИначеЕсли (Расшифровка = "ПрочееИспользованиеПрибыли") Тогда 	
		
		Возврат Истина;

	ИначеЕсли (Расшифровка = "ПрочееИспользованиеПрибылиПриход") Тогда 	
		
		СтрокаЗаголовка = "Прочее исп. прибыли (увеличение актива)";
		
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		
		МассивИсключаемыхСтатейДДС = Новый Массив;
		МассивИсключаемыхСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
		МассивИсключаемыхСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	НЕ (СтатьиДвиженияДенежныхСредств.Ссылка В(&ИсключаемыеСтатьиДДС))";
		
		
		Запрос.УстановитьПараметр("ИсключаемыеСтатьиДДС", МассивИсключаемыхСтатейДДС);
		МассивСтатейДДС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяДДС");
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(,Истина,Истина);
		
		Запрос.УстановитьПараметр("СтатьиДДС", МассивИсключаемыхСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		Запрос.УстановитьПараметр("Бонусы",Справочники.СтатьиДвиженияДенежныхСредств.Бонусы);
			
	ИначеЕсли (Расшифровка = "ПрочееИспользованиеПрибылиРасход") Тогда 	
		
		СтрокаЗаголовка = "Прочее исп. прибыли (уменьшение актива)";
		
		МассивСтатейДДС = Новый Массив;
		МассивСтатейДДС.Очистить();
		
		МассивИсключаемыхСтатейДДС = Новый Массив;
		МассивИсключаемыхСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеПоступленияДенежныхСредств);
		МассивИсключаемыхСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПрочиеВнереализационныеРасходыДенежныхСредств);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяДДС
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	НЕ (СтатьиДвиженияДенежныхСредств.Ссылка В(&ИсключаемыеСтатьиДДС))";
		
		
		Запрос.УстановитьПараметр("ИсключаемыеСтатьиДДС", МассивИсключаемыхСтатейДДС);
		МассивСтатейДДС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтатьяДДС");
		МассивСтатейДДС.Добавить(Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());

		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаВнереализационныеДоходыРасходы(Истина,,Истина);
		
		Запрос.УстановитьПараметр("СтатьиДДС", МассивСтатейДДС);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ПустойДокументДенежныйЧек", Документы.ДенежныйЧек.ПустаяСсылка());
		Запрос.УстановитьПараметр("Бонусы",Справочники.СтатьиДвиженияДенежныхСредств.Бонусы);

	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТД = Новый ТабличныйДокумент;
	
	Если ТипЗнч(Запрос) <> Тип("ТаблицаЗначений") Тогда
		
		Выб = Запрос.Выполнить().Выбрать();
		
		Если (Выб.Количество()=0) Тогда 
			
			Возврат Истина;
			
		КонецЕсли;		
		
		Макет = ПолучитьМакет("Расшифровка");
		Шапка = Макет.ПолучитьОбласть("Шапка");
		
		Шапка.Параметры.Заголовок = "Расшифровка: " + СтрокаЗаголовка;
		
		Строка = Макет.ПолучитьОбласть("Строка");
		
		ТД.Вывести(Шапка);
		
		Пока Выб.Следующий() Цикл
			
			строка.Параметры.Контрагент = "";
			строка.Параметры.Комментарий = "";
			
			строка.Параметры.Документ = Выб.Документ;
			
			Если НЕ ЗначениеНеЗаполнено(Выб.Контрагент) Тогда
				
				строка.Параметры.Контрагент = Выб.Контрагент;
				
			Иначе 
				
				Попытка
					
					строка.Параметры.Контрагент = Выб.Документ.Контрагент;
					
				Исключение
					;
				КонецПопытки; 
				
			КонецЕсли;
			
			Попытка
				
				строка.Параметры.Комментарий = Выб.Документ.Комментарий;
				
			Исключение
				;
			КонецПопытки; 
			Попытка
				
				строка.Параметры.Регистратор = Выб.Регистратор;
				
			Исключение
				;
			КонецПопытки; 

			
			строка.Параметры.Сумма = Выб.Сумма;
			
			Если (Выб.Сумма <> 0 и Выб.Сумма <> null) Тогда 
				ТД.Вывести(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		ТД.ТолькоПросмотр = Истина;
		ТД.ОтображатьСетку = Ложь;
		ТД.ОтображатьЗаголовки = Ложь;
		
		ТД.Показать();
		
		
	КонецЕсли; 
	
	
	Возврат Истина;
	
КонецФункции

Процедура ПоВсемПриИзменении(Элемент)
	Если ПоВсем  Тогда
		
		организация = Справочники.Организации.НайтиПоКоду("00001");
		
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	если Организация <> Справочники.Организации.НайтиПоКоду("00001") Тогда
		ПоВсем = Ложь;
		
	КонецЕсли;
Если (глТекущийпользователь = Справочники.Пользователи.НайтиПоКоду("Никитин (WG)") или глТекущийпользователь = Справочники.Пользователи.НайтиПоКоду("Карышев Максим (WG)")) и Организация = Справочники.Организации.НайтиПоКоду("00001") тогда
	Сообщить("Вам не разрешено смотреть данные по этой организации.");
	Организация = справочники.Организации.ПустаяСсылка();
конецесли;	

КонецПроцедуры


СписокГруппНоменклатуры = Новый СписокЗначений;
СписокГруппНоменклатуры.Добавить(Справочники.Номенклатура.ВнеоборотныеАктивы);
СписокГруппНоменклатуры.Добавить(Справочники.Номенклатура.Материалы);
