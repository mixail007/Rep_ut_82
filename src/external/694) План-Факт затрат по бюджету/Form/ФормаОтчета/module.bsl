
//Процедура ВыбПериодНажатие(Элемент)
//	НастройкаПериода = Новый НастройкаПериода;
//	НастройкаПериода.РедактироватьКакИнтервал = Истина;
//	НастройкаПериода.РедактироватьКакПериод = Истина;
//	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
//	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
//	Если НастройкаПериода.Редактировать() Тогда
//		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
//		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
//	КонецЕсли;
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = НачПериода;
//	
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = КонецДня(КонПериода);

//	
//КонецПроцедуры

//Процедура НачПериодаПриИзменении(Элемент)
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = НачПериода;
//	
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = КонецДня(КонПериода);
//КонецПроцедуры

//Процедура КонПериодаПриИзменении(Элемент)
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = НачПериода;
//	
//	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
//	ПараметрСКД.Использование = Истина;
//	ПараметрСКД.Значение  = КонецДня(КонПериода);
//КонецПроцедуры

Процедура ПриОткрытии()
	ПериодПланирования = Справочники.ПериодыПланирования.НайтиПоКоду("000000018");
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ПериодПланирования.ДатаНачала;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(ПериодПланирования.ДатаКонца);
	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодПланирования");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ПериодПланирования;
	
	
	//	Если не рольДоступна("ПравоЗавершенияРаботыПользователей") или (глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Межерицкая") и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев")) тогда
	Если (глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Межерицкая") и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев")и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е.")и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Лапенков")) тогда
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Менеджер");
		НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = глТекущийПользователь;
		Элементыформы.ДействияФормы.Кнопки.Действие1.Доступность = Ложь;				
		Элементыформы.ДействияФормы.Кнопки.Действие2.Доступность = Ложь;				
	конецЕсли;
	
	
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ЭлементРасшифровкиДанных = ДанныеРасшифровки.Элементы[Расшифровка];
	ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
	Если  ЭлементРасшифровкиДанныхПоля.Поле = "СуммаФакт"  тогда
		СтандартнаяОбработка = Ложь;
		
			Попытка
				Аналитика1 =ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьПоля()[0].Значение;  //ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].получитьполя()[0]
			исключение
				Аналитика1 = Неопределено;
			конецпопытки;
		
		Если ЭлементыФормы.ПоОтветственным.Заголовок =  "По ответственным" тогда
			
			
			Подразделение = Неопределено;
			СтатьяЗатрат = Неопределено;
			Ответственный = Неопределено;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.Подразделения") тогда
				Подразделение = Аналитика1;
				СтатьяЗатрат =  ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].получитьполя()[0].Значение;
			конецЕсли;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
				СтатьяЗатрат = Аналитика1;
			конецЕсли;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.Пользователи") тогда
				Ответственный = Аналитика1;
			конецЕсли;	
			
			
			
			
			
			попытка
				МесяцЗатрат =ЭлементРасшифровкиДанных.ПолучитьРодителей()[1].ПолучитьПоля()[0].Значение;
			исключение
				МесяцЗатрат = Неопределено;
			конецпопытки;
			
			Список =  Новый СписокЗначений;
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Межерицкая"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е."));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Лапенков"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Яковлева"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Соковых Е.С."));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Симонова"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Пятницкая"));
			
			Форма = ПолучитьФорму("ФормаОтчета1");
			Если статьяЗатрат <> неопределено тогда
				Форма.СтатьяЗатрат = СтатьяЗатрат;
			иначеЕсли Список.НайтиПоЗначению(глТекущийПользователь)= Неопределено тогда
				Форма.ответственный = глТекущийПользователь;
			конецЕсли;
			//	Если МесяцЗатрат <> неопределено тогда
			Форма.МесяцЗатрат = МесяцЗатрат;
			форма.началоПериода = ПериодПланирования.ДатаНачала;
			Форма.КонецПериода = ПериодПланирования.ДатаКонца;
			//	конецЕсли;
			
			Если статьяЗатрат <> неопределено тогда
				Форма.СтатьяЗатрат = СтатьяЗатрат;
			конецЕсли;
			
			Если подразделение <> неопределено тогда
				Форма.Подразделение = Подразделение;
			конецЕсли;
			
			Если ответственный <> неопределено тогда
				Форма.ответственный = ответственный;
			конецЕсли;
			
			
			
			
			
			
			
			
			форма.Открыть();
			
		ИначеЕсли ЭлементыФормы.ПоОтветственным.Заголовок =  "По подразделениям" тогда
			Подразделение = Неопределено;
			СтатьяЗатрат = Неопределено;
			Ответственный = Неопределено;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.СтатьиЗатрат") тогда
				СтатьяЗатрат = Аналитика1;
				Подразделение = ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].получитьПоля()[0].Значение;
			конецЕсли;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.Пользователи") тогда
				Ответственный = Аналитика1;
				Подразделение =  ЭлементРасшифровкиДанных.ПолучитьРодителей()[0].ПолучитьРодителей()[0].ПолучитьРодителей()[0].получитьполя()[0].Значение;
			конецЕсли;
			
			если ТипЗнч(Аналитика1) = Тип("СправочникСсылка.Подразделения") тогда
				Подразделение = Аналитика1;
			конецЕсли;	
			
			попытка
				МесяцЗатрат =ЭлементРасшифровкиДанных.ПолучитьРодителей()[1].ПолучитьПоля()[0].Значение;
			исключение
				МесяцЗатрат = Неопределено;
			конецпопытки;

			
			
			
			Список =  Новый СписокЗначений;
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Межерицкая"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Алексеева А.Е."));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Лапенков"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Яковлева"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Соковых Е.С."));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Симонова"));
			Список.Добавить(Справочники.Пользователи.НайтиПоКоду("Пятницкая"));
			
			Форма = ПолучитьФорму("ФормаОтчета1");
			Если статьяЗатрат <> неопределено тогда
				Форма.СтатьяЗатрат = СтатьяЗатрат;
			иначеЕсли Список.НайтиПоЗначению(глТекущийПользователь)= Неопределено тогда
				Форма.ответственный = глТекущийПользователь;
			конецЕсли;
			//	Если МесяцЗатрат <> неопределено тогда
			Форма.МесяцЗатрат = МесяцЗатрат;
			форма.началоПериода = ПериодПланирования.ДатаНачала;
			Форма.КонецПериода = ПериодПланирования.ДатаКонца;
			//	конецЕсли;
			
			Если статьяЗатрат <> неопределено тогда
				Форма.СтатьяЗатрат = СтатьяЗатрат;
			конецЕсли;
			
			Если подразделение <> неопределено тогда
				Форма.Подразделение = Подразделение;
			конецЕсли;
			
			Если ответственный <> неопределено тогда
				Форма.ответственный = ответственный;
			конецЕсли;
			
			
			форма.Открыть();
			
			
		конецЕсли;	
	конецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	
	//  
	//  
	//  СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	// //Создадим и инициализируем обработчик расшифровки                    
	//  ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки1, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//																	   
	//  ДоступныеДействия = Новый Массив();
	//  ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	//  ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
	//  //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	//  ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	//  ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
	//  //ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
	//  
	// // Добавляем собственные действия 
	//  Нов = Новый СписокЗначений;
	//  	   ЭлементРасшифровкиДанных = ДанныеРасшифровки1.Элементы[Расшифровка];
	//	  ЭлементРасшифровкиДанныхПоля = ЭлементРасшифровкиДанных.ПолучитьПоля()[0];
	//  	Если  ЭлементРасшифровкиДанныхПоля.Поле = "Контрагент"  тогда
	//  		СпрКонтрагент = ЭлементРасшифровкиДанныхПоля.Значение;
	//  		Нов.Добавить("Занести план");
	
	//	  конецЕсли;
	
	////  
	//  
	//Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия,Нов);
	//
	//Если ВыполненноеДействие = "Занести план" Тогда
	//	Форма = получитьформу("Форма");
	//	Форма.Контрагент = СпрКонтрагент;
	//	форма.Открыть();
	//конецЕсли;
	
КонецПроцедуры

Процедура ПериодПланированияПриИзменении(Элемент)
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ПериодПланирования.ДатаНачала;
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = КонецДня(ПериодПланирования.ДатаКонца);
	
	
	ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодПланирования");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ПериодПланирования;
	
КонецПроцедуры


Процедура ПоОтветственнымПоОтветственным(Кнопка)
	Для каждого Настройка Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Кнопка.Текст = Настройка.Представление тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройка.Настройки);
			
			ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ПериодПланирования.ДатаНачала;
			
			ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = КонецДня(ПериодПланирования.ДатаКонца);
			
			
			ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПериодПланирования");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ПериодПланирования;
			
			
			ЭлементыФормы.ПоОтветственным.Заголовок= Настройка.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
