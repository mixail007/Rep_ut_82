Перем ОбъектПодключения, РезультатПодключения Экспорт;
Перем ДеревоОтличий;
Перем мФакторинг;

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "") Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
		
	Возврат РезультатПодключения;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ТипПодключения", 1);
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		#Если Клиент Тогда
		Состояние("Выполняется подключение к информационной базе ...");
		#КонецЕсли
		Если  СтруктураПодключения.ТипПодключения = 0 Тогда
			ОбъектПодключения = ОбъектПодключения +".Application";
			ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект.Connect(СтрокаПодключения);
		Иначе
			ОбъектПодключения = ОбъектПодключения +".COMConnector";
			ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
			ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		КонецЕсли;
			
		#Если Клиент Тогда
			Состояние("Соединение установлено");
			Состояние();
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостсточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Процедура СообщитьОбОшибкеДляПользователю(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Сообщить(СокрЛП(ТекстСообщения), СтатусСообщения.Важное);

КонецПроцедуры

#Если Клиент Тогда
// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецЕсли

Функция ПолучитьДеревоОтличий() Экспорт
	
	ДеревоОтличий.Строки.Очистить();
	
	Если мФакторинг.Пустая() Тогда
		мФакторинг = Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг");
		Если мФакторинг.Пустая() Тогда
			Сообщить("Не найден тип договора ""Факторинг"""); 
			Возврат ДеревоОтличий;
		КонецЕсли; 
	КонецЕсли; 
	
	РезультатЗапросаКТекБазе = ВыполнитьЗапросКТекБазе();

	РезультатЗапросаКВнешнейБазе = ВыполнитьЗапросКВнешнейБазе();
	ДеревоВнешнейБазы = РезультатЗапросаКВнешнейБазе.Выгрузить(ОбъектПодключения.ОбходРезультатаЗапроса.ПоГруппировкам);
	
	УстановитьУИД(ДеревоВнешнейБазы);
	
	ВыборкаПоКонтрагентам = РезультатЗапросаКТекБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		
		Соответствует = Истина;
		
		СтрокаКонтрагентаВнешняя = ДеревоВнешнейБазы.Строки.Найти(Строка(ВыборкаПоКонтрагентам.Контрагент.УникальныйИдентификатор()),"УИД");
		Если СтрокаКонтрагентаВнешняя = Неопределено Тогда
			Соответствует = Ложь;
		ИначеЕсли НЕ (СтрокаКонтрагентаВнешняя.ДебетВнешний = ВыборкаПоКонтрагентам.Дебет
			И СтрокаКонтрагентаВнешняя.КредитВнешний = ВыборкаПоКонтрагентам.Кредит) Тогда
			Соответствует = Ложь;
		Иначе
			ВыборкаПоДоговору = ВыборкаПоКонтрагентам.Выбрать();
			Пока ВыборкаПоДоговору.Следующий() Цикл
				
				СтрокаДоговораВнешняя = НайтиСоответствиеДоговоров(ВыборкаПоДоговору,СтрокаКонтрагентаВнешняя);
				Если СтрокаДоговораВнешняя = Неопределено Тогда
					Соответствует = Ложь;
					прервать;
				ИначеЕсли НЕ(СтрокаДоговораВнешняя.ДебетВнешний = ВыборкаПоДоговору.Дебет
					и СтрокаДоговораВнешняя.КредитВнешний = ВыборкаПоДоговору.Кредит) Тогда
					Соответствует = Ложь;
					прервать;
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если Соответствует Тогда
			ДеревоВнешнейБазы.Строки.Удалить(СтрокаКонтрагентаВнешняя);
		Иначе
			ДобавитьСтрокиОтличий(ВыборкаПоКонтрагентам,СтрокаКонтрагентаВнешняя);
			Если НЕ СтрокаКонтрагентаВнешняя = Неопределено Тогда
				ДеревоВнешнейБазы.Строки.Удалить(СтрокаКонтрагентаВнешняя);
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
	
	//то что осталось в бухгалтерии
	Для каждого СтрокаКонтрагентаВнешняя Из ДеревоВнешнейБазы.Строки Цикл
		ДобавитьСтрокиОтличий(,СтрокаКонтрагентаВнешняя);
	КонецЦикла; 
	
	возврат ДеревоОтличий;
	
КонецФункции

Процедура ДобавитьСтрокиОтличий(СтрокаКонтрагентаБазы = Неопределено,СтрокаКонтрагентаВнешняя = Неопределено)

	СтрокаКонтрагента = ДеревоОтличий.Строки.Добавить();
	
	//нет в УТ
	Если СтрокаКонтрагентаБазы = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента,СтрокаКонтрагентаВнешняя);
		
		Контрагент = ПолучитьСсылкуИзВнешнегоИсточника(СтрокаКонтрагентаВнешняя,"Контрагенты");
		СтрокаКонтрагента.Контрагент = Контрагент;
		
		Для каждого строкаДоговораВнешняя Из СтрокаКонтрагентаВнешняя.Строки Цикл
			
			СтрокаДоговора = СтрокаКонтрагента.Строки.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаДоговора,строкаДоговораВнешняя);
			СтрокаДоговора.Контрагент = Контрагент;
			СтрокаДоговора.Договор    = ПолучитьПредставлениеИзВнешнегоИсточника(строкаДоговораВнешняя);
			
		КонецЦикла; 
		
	//нет в БП
	ИначеЕсли СтрокаКонтрагентаВнешняя = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента,СтрокаКонтрагентаБазы);
		
		СтрокаДоговораБазы = СтрокаКонтрагентаБазы.Выбрать();
		Пока СтрокаДоговораБазы.Следующий() Цикл
			
			СтрокаДоговора = СтрокаКонтрагента.Строки.Добавить();
		
			ЗаполнитьЗначенияСвойств(СтрокаДоговора,СтрокаДоговораБазы);
			СтрокаДоговора.Договор = ПолучитьПредставлениеДоговора(СтрокаДоговораБазы);
			
		КонецЦикла; 
		
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента,СтрокаКонтрагентаБазы);
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента,СтрокаКонтрагентаВнешняя,"ДебетВнешний,КредитВнешний");
		
		СтрокаДоговораБазы = СтрокаКонтрагентаБазы.Выбрать();
		Пока СтрокаДоговораБазы.Следующий() Цикл
			
			СтрокаДоговора = СтрокаКонтрагента.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоговора,СтрокаДоговораБазы);
			
			СтрокаДоговора.Договор = ПолучитьПредставлениеДоговора(СтрокаДоговораБазы);
			
			СтрокаДоговораВнешняя = НайтиСоответствиеДоговоров(СтрокаДоговораБазы,СтрокаКонтрагентаВнешняя);
			Если НЕ СтрокаДоговораВнешняя = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДоговора,СтрокаДоговораВнешняя,"ДебетВнешний,КредитВнешний");
				СтрокаКонтрагентаВнешняя.Строки.Удалить(СтрокаДоговораВнешняя);
			КонецЕсли; 
		КонецЦикла; 
		
		//оставшиеся склады в БП
		Для каждого СтрокаДоговораВнешняя Из СтрокаКонтрагентаВнешняя.Строки Цикл
			
			СтрокаДоговора = СтрокаКонтрагента.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоговора,СтрокаДоговораВнешняя);
			СтрокаДоговора.Контрагент = СтрокаКонтрагента.Контрагент;
			СтрокаДоговора.Договор	  = ПолучитьПредставлениеИзВнешнегоИсточника(СтрокаДоговораВнешняя);
		
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция НайтиСоответствиеДоговоров(ВыборкаПоДоговору,СтрокаКонтрагентаВнешняя)

	Отбор = ОбъектПодключения.NewObject("Структура");
	Отбор.Вставить("КодВалюты",ВыборкаПоДоговору.КодВалюты);
	Отбор.Вставить("Наименование",ВыборкаПоДоговору.Наименование + " (" + ВыборкаПоДоговору.ВидДоговора + ")");
	Отбор.Вставить("ВидДоговора",Строка(ВыборкаПоДоговору.ВидДоговора));

	МассивСтрок = СтрокаКонтрагентаВнешняя.Строки.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивСтрок.Get(0); 
	КонецЕсли; 
	
КонецФункции // НайтиСоответствиеДоговоров()

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьПредставлениеДоговора(СтрокаДоговораБазы)

	Возврат СтрокаДоговораБазы.Наименование + " (" + 	СтрокаДоговораБазы.ВидДоговора + ")";

КонецФункции // ПолучитьПредставлениеДоговора()
 

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьПредставлениеИзВнешнегоИсточника(СтрокаДоговораВнешняя)

	Возврат СтрокаДоговораВнешняя.Наименование;	

КонецФункции // ПолучитьПредставлениеИзВнешнегоИсточника()
 

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСсылкуИзВнешнегоИсточника(СтрокаВнешняя,ИмяСпр)

	НовыйУИД = Новый УникальныйИдентификатор(СтрокаВнешняя.УИД);
	
	Ссылка = Справочники[ИмяСпр].ПолучитьСсылку(НовыйУИД);
	Если Ссылка.Пустая() Тогда
		Наименование = СтрокаВнешняя[ИмяСпр+"Наименование"];
		Сообщить(Наименование); 
		Возврат Наименование;
	Иначе
		Возврат Ссылка;
	КонецЕсли; 

КонецФункции // ПолучитьСсылкуИзВнешнегоИсточника()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКТекБазе()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток < 0
	|				ТОГДА -ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Кредит,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ТипДоговора = &Факторинг
	|			ТОГДА ""Договор факторинга""
	|		ИНАЧЕ ""Основной договор""
	|	КОНЕЦ КАК Наименование,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК КодВалюты,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0
	|				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Дебет
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Владелец,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ТипДоговора = &Факторинг
	|			ТОГДА ""Договор факторинга""
	|		ИНАЧЕ ""Основной договор""
	|	КОНЕЦ,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Организация,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВидДоговора,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код
	|ИТОГИ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаСравненияОстатков);
	Запрос.УстановитьПараметр("Факторинг", мФакторинг);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКТекБазе()
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыполнитьЗапросКВнешнейБазе()

	Запрос = ОбъектПодключения.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто1.Наименование КАК КонтрагентыНаименование,
	|	ХозрасчетныйОстатки.Организация,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК ДебетВнешний,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК КредитВнешний,
	|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов.Код КАК КодВалюты,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2.ВидДоговора) КАК ВидДоговора,
	|	ХозрасчетныйОстатки.Субконто2.Наименование КАК Наименование
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, , &МассивСубконто, ) КАК ХозрасчетныйОстатки
    |
	|СГРУППИРОВАТЬ ПО
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2.ВидДоговора),
	|	ХозрасчетныйОстатки.Субконто2.ВалютаВзаиморасчетов.Код,
	|	ХозрасчетныйОстатки.Субконто2.Наименование,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Субконто1
	|ИТОГИ ПО
	|	Контрагент
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	МассивСубконто =  ОбъектПодключения.NewObject("Массив");
	МассивСубконто.Добавить(ОбъектПодключения.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ОбъектПодключения.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаСравненияОстатков);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ВыполнитьЗапросКВнешнейБазе()

Процедура УстановитьУИД(ДеревоВнешнейБазы)

	ДеревоВнешнейБазы.Колонки.Добавить("УИД");	
	
	Для каждого СтрокаКонтрагента Из ДеревоВнешнейБазы.Строки Цикл
		
		СтрокаКонтрагента.УИД = ОбъектПодключения.String(СтрокаКонтрагента.Контрагент.УникальныйИдентификатор());
	
	КонецЦикла; 

КонецПроцедуры
 

ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";
АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;

ДеревоОтличий = Новый ДеревоЗначений;
ДеревоОтличий.Колонки.Добавить("Контрагент",,"Контрагент");
ДеревоОтличий.Колонки.Добавить("Договор",,"Договор");
ДеревоОтличий.Колонки.Добавить("Дебет");
ДеревоОтличий.Колонки.Добавить("Кредит");
ДеревоОтличий.Колонки.Добавить("ДебетВнешний");
ДеревоОтличий.Колонки.Добавить("КредитВнешний");
ДеревоОтличий.Колонки.Добавить("Счет");
//ДеревоОтличий.Колонки.Добавить("Примечание");

мФакторинг = Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг");