
Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
	
	Если DocumentType = "NonformalizedProforma" Тогда
		Возврат "ИдентификаторДокументаВДиадокСч";
	ИначеЕсли DocumentType = "Invoice" Тогда
		Возврат "ИдентификаторДокументаВДиадокСФ";
	Иначе
		Возврат "ИдентификаторДокументаВДиадок";
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
	
	Если DocumentType = "NonformalizedProforma" Тогда
		Возврат "ИдентификаторЯщикДокументаВДиадокСч"
	ИначеЕсли DocumentType = "Invoice" Тогда
		Возврат "ИдентификаторЯщикДокументаВДиадокСФ"
	Иначе	
		Возврат "ИдентификаторЯщикДокументаВДиадок"
	КонецЕсли;	
	
КонецФункции 

Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Возврат ДокументСсылка.НомерДокумента;
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегистрацияСчетаФактуры") Тогда
		Возврат ДокументСсылка.НомерСчетаФактуры;
	Иначе
		Возврат ОмРаботаСФормами.ПолучитьНомерНаПечать(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
КонецФункции

Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Покупка);
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Продажа);
	КонецЕсли;
	
	Возврат СписокВидовДоговоров;
КонецФункции

Процедура ЗаполнитьТабличнуюЧасть(ДокументОбъект, ДанныеТабличнойЧасти, ВидОперации)
	
	Если ВидОперации= "ПокупкаКомиссия" Тогда
		
		Для каждого СтрокаТЗ ИЗ ДанныеТабличнойЧасти Цикл
			
			НоваяСтрока= ДокументОбъект.Состав.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
			НоваяСтрока.КоличествоПоДокументу= НоваяСтрока.Количество;
			НоваяСтрока.Коэффициент= 1;
			
			ОмРаботаСФормами.РассчитатьВсегоТабЧасти(НоваяСтрока, ДокументОбъект.ВариантРасчетаНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ДанныеТабличнойЧасти = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда 
		НовыйДокумент = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	Иначе 	
		НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
	КонецЕсли;	
	
	НовыйДокумент.СтруктурнаяЕдиница= ПараметрыСеанса.ТекущаяСтруктурнаяЕдиница;
	
	НовыйДокумент.Договор= Параметры.ДоговорКонтрагента;
	НовыйДокумент.Валюта=  НовыйДокумент.Договор.Валюта;
	НовыйДокумент.КурсВалютыДоговора= 1;
	
	НовыйДокумент.Склад= Параметры.Склад;
	
	Если ВидОперации <> "ВозвратОтПокупателя" Тогда
		НовыйДокумент.ДатаДокумента  = параметры.ДатаВходящегоДокумента;
		НовыйДокумент.НомерДокумента = параметры.НомерВходящегоДокумента;
	КонецЕсли;
	    
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		НовыйДокумент.Фирма = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		НовыйДокумент.Контрагент = стВероятныеПоля.Контрагент;
		//ПриИзмененииЗначенияДоговора(НовыйДокумент, Неопределено, ВалютаРегламентированногоУчета, ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(НовыйДокумент), "Покупка", "Товары");
	КонецЕсли;
	
	НовыйДокумент.ВариантРасчетаНДС= Перечисления.ВариантыРасчетаНДС.НДСвТомЧисле;
	
	Если ДанныеТабличнойЧасти <> Неопределено Тогда
		ЗаполнитьТабличнуюЧасть(НовыйДокумент, ДанныеТабличнойЧасти, ВидОперации);
	КонецЕсли;
	
	Возврат НовыйДокумент;
	
КонецФункции


Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	НовыйДокумент= Документы.РегистрацияСчетаФактуры.СоздатьДокумент();
	
	ЗаполнитьОснованием_СчетФактураПолученный(НовыйДокумент, ДокументОснование);
	ЗаполнитьРеквизиты_СчетФактураПолученный(НовыйДокумент, Document, ПараметрыЗаполнения);
	
	ОбработкаСобытияПодключаемогоМодуля("ПослеСозданияСчетФактуры", Новый Структура("СчетФактураОбъект, РеализацииСсылка, Document", НовыйДокумент, ДокументОснование, Document));
	
	Возврат НовыйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	Реквизиты= Новый Структура;
	
	Если Document.Type = "InvoiceRevision" Тогда
		
		ДокументОбъект.НомерСчетаФактуры= Document.OriginalDocumentNumber;
		ДокументОбъект.ДатаСчетаФактуры=  Document.OriginalDocumentDate;
		
		ДокументОбъект.Исправление= Истина;
		
		ДокументОбъект.НомерИсправления= Document.DocumentNumber;
		ДокументОбъект.ДатаИсправления=  Document.DocumentDate;
		
	ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
		
		ДокументОбъект.КорректировочныйСФ= Истина;
		
		ДокументОбъект.НомерСчетаФактуры= Document.DocumentNumber;
		ДокументОбъект.ДатаСчетаФактуры=  Document.DocumentDate;
		
		ДокументОбъект.НомерИсходногоДокумента= Document.OriginalDocumentNumber;
		ДокументОбъект.ДатаИсходногоДокумента=  Document.OriginalDocumentDate;
		
		Если ЗначениеЗаполнено(Document.OriginalInvoiceRevisionNumber) Тогда
			
			ДокументОбъект.УчитыватьИсправлениеИсходногоДокумента= Истина;
			
			ДокументОбъект.НомерИсправленияИсходногоДокумента= Document.OriginalInvoiceRevisionNumber;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента=  Document.OriginalInvoiceRevisionDate;
			
		КонецЕсли;
		
	ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
		
		ДокументОбъект.КорректировочныйСФ= Истина;
		
		ДокументОбъект.НомерСчетаФактуры= Document.OriginalInvoiceCorrectionNumber;
		ДокументОбъект.ДатаСчетаФактуры=  Document.OriginalInvoiceCorrectionDate;
		
		ДокументОбъект.НомерИсходногоДокумента= Document.OriginalDocumentNumber;
		ДокументОбъект.ДатаИсходногоДокумента=  Document.OriginalDocumentDate;
		
		Если ЗначениеЗаполнено(Document.OriginalInvoiceRevisionNumber) Тогда
			
			ДокументОбъект.УчитыватьИсправлениеИсходногоДокумента= Истина;
			
			ДокументОбъект.НомерИсправленияИсходногоДокумента= Document.OriginalInvoiceRevisionNumber;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента=  Document.OriginalInvoiceRevisionDate;
			
		КонецЕсли;
		
		ДокументОбъект.Исправление= Истина;
		
		ДокументОбъект.НомерИсправления= Document.DocumentNumber;
		ДокументОбъект.ДатаИсправления=  Document.DocumentDate;
		
	Иначе
		ДокументОбъект.НомерСчетаФактуры= Document.DocumentNumber;
		ДокументОбъект.ДатаСчетаФактуры=  Document.DocumentDate;
	КонецЕсли;
	
	ДокументОбъект.Дата= ТекущаяДата();
	
	ДокументОбъект.КодВидаОперации= "01";
	ДокументОбъект.КодСпособаПолучения= 2;
	
	Если ПараметрыЗаполнения <> Неопределено И ПараметрыЗаполнения.Свойство("Реквизиты") Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполнения.Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОснованием_СчетФактураПолученный(ДокументОбъект, ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("Массив") Тогда
		ДокументыОснования= ДокументОснование;
	Иначе
		
		ДокументыОснования= Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументыОснования.Добавить(ДокументОснование);
		КонецЕсли;
	
	КонецЕсли;
	
	ДокументыОснованияВГраница= ДокументыОснования.ВГраница();
	
	Если ДокументыОснованияВГраница = -1 Тогда // Документов основания нет
		Возврат;
	КонецЕсли;
	
	// Заполняем табличную часть ДокументыОснования без последнего документа,
	// для того чтобы вызвать этим документом стандартную обработку заполнения шапки
	Для ИндексЦикла= 0 ПО ДокументыОснованияВГраница - 1 Цикл
		ДокументОбъект.СоставНДС.Добавить().ДокументОснование= ДокументыОснования[ИндексЦикла];
	КонецЦикла;
	
	Попытка
		// Заполняем шапку документа с помощью последнего документа основания
		ДокументОбъект.Заполнить(ДокументыОснования[ДокументыОснованияВГраница]);
	Исключение
		ДокументОбъект.СоставНДС.Добавить().ДокументОснование = ДокументыОснования[ДокументыОснованияВГраница];
	КонецПопытки;
	
КонецПроцедуры


/////////////////////////////////////////////////////////////
// Связи объектов
/////////////////////////////////////////////////////////////

Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Если ПустаяСтрока(TaxRate) Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	Иначе
		Попытка
			СтавкаНДСЧислом= Число(TaxRate);
		Исключение КонецПопытки;
	КонецЕсли;
	
	Запрос= Новый Запрос(
	"ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС
	|ГДЕ
	|	Ставка = &СтавкаНДСЧислом И НЕ Предопределенный");
	
	Запрос.УстановитьПараметр("СтавкаНДСЧислом", СтавкаНДСЧислом);
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
	
	ПодходящаяЕИ = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕИ.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения ЕИ
		|ГДЕ
		|	ЕИ.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		пока  Выборка.Следующий() Цикл
			ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
			Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
				Возврат  Выборка.Ссылка;
			КонецЕсли;	
            Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
			Если коэф <> Неопределено Тогда 
				ПодходящаяЕИ = выборка.ссылка;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции

Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции

Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;	
КонецФункции

Функция Документ_Организация(Документ) Экспорт

	Возврат Документ.Фирма

КонецФункции

Функция Организация_КПП(Организация) Экспорт

	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);

КонецФункции

Функция ПолучитьДатуНомерВходящейНакладной(ДокументСсылка) Экспорт 
	
	Результат= Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента");
	
	Результат.ДатаВходящегоДокумента=  ДокументСсылка.ДатаДокумента;
	Результат.НомерВходящегоДокумента= ДокументСсылка.НомерДокумента;
	
	Возврат Результат;
	
КонецФункции


//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.Договоры.ПолучитьФормуВыбора(,Элемент,);
	
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    	 = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение							 = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.ТипДоговора.ВидСравнения                    	 = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ТипДоговора.Значение.Добавить(Перечисления.ТипыДоговоров.КупляПродажа);
	ФрмВыбора.СправочникСписок.Отбор.ТипДоговора.Значение.Добавить(Перечисления.ТипыДоговоров.Комиссия);
	ФрмВыбора.СправочникСписок.Отбор.ТипДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ТипДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.Фирма.Установить(Организация);
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Фирма.Доступность = Ложь;

	ФрмВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Возврат ФрмВыбора;	
	
КонецФункции


//{ СвязиМеждуДокументами
	 
	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		МассивСодержитРТУ= Ложь;
		Для Каждого СсылкаРНК ИЗ МассивСсылокРНК Цикл
			Если ТипЗнч(СсылкаРНК) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
				МассивСодержитРТУ= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСодержитРТУ Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка 
			|ИЗ
			|	Документ.СчетФактура
			|ГДЕ
			|	ДокументОснование В (&МассивСсылокРНК)");
			
		Иначе
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка 
			|ИЗ
			|	Документ.РегистрацияСчетаФактуры.СоставНДС
			|ГДЕ
			|	Основание В (&МассивСсылокРНК)");
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка; 
		КонецЕсли;
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Возврат Новый ТаблицаЗначений;
		
	КонецФункции

//} Приглашение Контрагентов
