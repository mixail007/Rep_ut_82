Перем Размервыгрузки;
Перем закрыватьФорму;
Перем Количествовыгружено;

Перем МаксимальноеКоличествоОдновременныхЗаданий;
Перем МассивЗаданийОтправкиПакета;

Перем КэшированныеПараметрыОтправки;
Перем ОтправкаДокументаНаСогласование;
Перем ResolutionRequestType;

Перем КэшСпискаДокументовДляВыгрузки;

Перем ТаблицаСоответствияCustomIdСсылке1С;
Перем ЗаблокированныеДокументы;

Перем СоответствиеТиповДокументов;

Перем НумераторПакетов;

Перем НастройкиШифрования, СертификатыОрганизаций;

////////////////////////////////////////////////////////////////
//// инициализация формы при открытии
//////////////////////////////////////////////////////////////

Процедура ПрикрепитьФайлы(ParentDocument) Экспорт
	
	УстановитьРежимСверткиЭлементаУправления(Элементыформы.ПанельНадписиОснование, РежимСверткиЭлементаУправления.Нет, Ложь);
	
	Если ParentDocument <> Неопределено Тогда
		ПредставлениеДокументаОснования = "Документы будут связаны с: " + ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПредставлениеЭД(ParentDocument);
		ParentID = ParentDocument.DocumentId;
		DepartmentKpp = ?(ParentDocument.FromDepartment<>Неопределено, ParentDocument.FromDepartment.Kpp, "");
		ОрганизацияОтправитель = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(ParentDocument.OrganizationID, DepartmentKpp);
		Организация = ОрганизацияОтправитель;
		CounteragentID = ParentDocument.Counteragent.ID;
		КонтрагентПредставление = ParentDocument.Counteragent.Name;
		Контрагент = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(CounteragentID);
		ЭлементыФормы.ОрганизацияОтправитель.Доступность = Ложь;
		ЭлементыФормы.Организация.Доступность = Ложь;
		ЭлементыФормы.КонтрагентПредставление.Доступность = Ложь;
		//ЭлементыФормы.Контрагент.Доступность = Ложь;
		
		Если  ЗначениеЗаполнено(Контрагент)=Ложь Тогда 
			предупреждение("С контрагентом "+КонтрагентПредставление+"
			|не сопоставлено ни одной карточки контрагента в 1С!", , НаименованиеСистемы);
			Возврат 
		КонецЕсли;	
	КонецЕсли;
	Открыть();
КонецПроцедуры

Процедура НачатьВыгрузку(стПараметры) Экспорт
	
	Организация = стПараметры.Организация;
	
	УстановитьРежимСверткиЭлементаУправления(Элементыформы.ПанельНадписиОснование, РежимСверткиЭлементаУправления.Верх, Ложь);

	Открыть();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ОбновитьПоложениеФлажковВПриложенииВерсии81();
	
	ЭтаФорма.Заголовок = "Отправка документов через "+НаименованиеСистемы;
	
	НадписьПодвалОтправкаИз1С_СкрытьПоказать();
	
	КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
	ЭлементыФормы.СписокДокументовДляВыгрузки.Колонки.Найти("КартинкаПакета").КартинкиСтрок= 	 		 ЭДО_БиблиотекаКартинок().КартинкиПакетов;
	ЭлементыФормы.СписокДокументовДляВыгрузки.Колонки.Найти("КартинкаСостояниеДокумента").КартинкиСтрок= ЭДО_БиблиотекаКартинок().СостоянияДокумента;
	
	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(1, "Накладные");
	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(2, "Счета-фактуры");
	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(5, ТипДокументаУПД("СЧФДОП"));
	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(6, ТипДокументаУКД("КСЧФДИС"));
 	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(3, "Счета на оплату");
	Если ПолучитьПрофильКонфигурации().ХранениеНастроекПользователей.Вариант <> "Рарус" тогда 
		Элементыформы.ТипыДокументов.СписокВыбора.Добавить(4, "Акты сверок");
	КонецЕсли;	
	
	Элементыформы.ТипыДокументов.СписокВыбора.Добавить(0, "Все документы");
	
	Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
	
	ТипыДокументов = ВосстановитьЗначение("ТипыДокументовФормаВыгрузкиДиадок");
	ТипыДокументов = ?(ТипыДокументов = Неопределено, 0, ТипыДокументов);
	
	УстановитьПериодВыборкиДокументов();
	
	Если ЗначениеЗаполнено(организация) = Ложь Тогда
		Организация = "Все";                            	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Контрагент) = Ложь Тогда
		Контрагент = "Все";                            	
	КонецЕсли;	
	
	Попытка
		ОбновитьСписокСтраницыОтправкиВДиадок();	
	Исключение
		Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
			"Внимание!",
			"При формировании списка документов к отправке обнаружены ошибки",
			ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	ОбновитьГотовностьКОтправке();
	
	КэшированныеПараметрыОтправки = Новый ТаблицаЗначений;
	КэшированныеПараметрыОтправки.Колонки.Добавить("Организация");
	КэшированныеПараметрыОтправки.Колонки.Добавить("ResolutionRequestType");
	КэшированныеПараметрыОтправки.Колонки.Добавить("ПараметрыОтправки");
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СписокДокументовДляВыгрузки.Очистить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////
//// общая логика
////////////////////////////////////////////////////////////

Функция ПолучитьЗначениеОрганизации()
	Если ТипЗнч(Организация)=тип("Строка") Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	Возврат Организация;
КонецФункции

Функция ПолучитьЗначениеКонтрагента()
	Если ТипЗнч(Контрагент)=тип("Строка") Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	Возврат Контрагент;
КонецФункции

Функция НовыйИдентификаторПакета()
	
	НумераторПакетов= НумераторПакетов + 1;
	
	Возврат НумераторПакетов;
	
КонецФункции

///////////////////////////////////////////////////////////////
//// построение списка документов
///////////////////////////////////////////////////////

Функция СоответствиеТиповДокументов()
	
	Если СоответствиеТиповДокументов <> Неопределено Тогда
		Возврат СоответствиеТиповДокументов;
	КонецЕсли;
	
	СоответствиеТиповДокументов= Новый Соответствие;
	
	СоответствиеТиповДокументов.Вставить("Счет-фактура"			, "Invoice");
	СоответствиеТиповДокументов.Вставить("Исправление СФ"		, "InvoiceRevision");
	СоответствиеТиповДокументов.Вставить("Корректировочный СФ"	, "InvoiceCorrection");
	СоответствиеТиповДокументов.Вставить("Исправление КСФ"		, "InvoiceCorrectionRevision");
	
	СоответствиеТиповДокументов.Вставить("Акт"					, "XmlAcceptanceCertificate");
	СоответствиеТиповДокументов.Вставить("Торг-12"				, "XmlTorg12");
	СоответствиеТиповДокументов.Вставить("Счет на оплату"		, "NonformalizedProforma");
	СоответствиеТиповДокументов.Вставить("Акт сверки"			, "ReconciliationAct");
	
	СоответствиеТиповДокументов.Вставить(ТипДокументаУПД("СЧФДОП"), "UniversalTransferDocument");
	СоответствиеТиповДокументов.Вставить(ТипДокументаУПД("ДОП")	  , "UniversalTransferDocument");
	СоответствиеТиповДокументов.Вставить(ТипДокументаУПД("СЧФ")	  , "UniversalTransferDocument");
	
	СоответствиеТиповДокументов.Вставить(ТипДокументаУКД("КСЧФДИС")	, "UniversalCorrectionDocument");
	СоответствиеТиповДокументов.Вставить(ТипДокументаУКД("ДИС")	  	, "UniversalCorrectionDocument");
	СоответствиеТиповДокументов.Вставить(ТипДокументаУКД("КСЧФ")	, "UniversalCorrectionDocument");
	
	Возврат СоответствиеТиповДокументов;
	
КонецФункции

Функция ОпределитьDocumentType(Документ, ТипДокумента)
	
	Возврат СоответствиеТиповДокументов()[ТипДокумента];
	
	//Если DocumentType = Неопределено Тогда
	//	DocumentType= "";
	//КонецЕсли;
	//
	//Возврат DocumentType;
	//
	//Если ТипДокумента = "Счет-фактура" Тогда
	//	Возврат "Invoice";
	//ИначеЕсли ТипДокумента = "Исправление СФ" Тогда
	//	Возврат "InvoiceRevision";
	//ИначеЕсли ТипДокумента = "Корректировочный СФ" Тогда
	//	Возврат "InvoiceCorrection";
	//ИначеЕсли ТипДокумента = "Исправление КСФ" Тогда
	//	Возврат "InvoiceCorrectionRevision";
	//ИначеЕсли ТипДокумента = "Акт сверки" Тогда
	//	Возврат "ReconciliationAct";
	//ИначеЕсли ТипДокумента = "Акт" Тогда
	//	Возврат "XmlAcceptanceCertificate";
	//ИначеЕсли ТипДокумента = "Торг-12" Тогда			
	//	Возврат "XmlTorg12";
	//ИначеЕсли ТипДокумента = "Счет" Тогда
	//	Возврат  "NonformalizedProforma";
	//КонецЕсли;
	//
	//Возврат "";
	
КонецФункции

Функция ЭтоТестовыйДокумент(Строка,отношенияСКонтрагентами )
	СтрокиОтношения = отношенияСКонтрагентами.найтистроки(Новый Структура("Организация, Контрагент",строка.Продавец, строка.Покупатель));
	Если СтрокиОтношения.Количество() > 0 Тогда
		Возврат СтрокиОтношения[0].ЭтоТестоваяОрганизация <> Ложь ИЛИ СтрокиОтношения[0].ЭтоТестовыйКонтрагент <> Ложь;
	иначе 
		Возврат Ложь
	КонецЕсли;

КонецФункции	

Функция ПолучитьСтрокуКлючЗначение(Организация, DocumentType, ШаблонКлючей)
	
	ДопСведения = "";
	
	ТаблицаКлючейЗначений =	ВосстановитьЗначение("Диадок_ТаблицаОбязательныхЗначенийКлючей");
	
	Если ТаблицаКлючейЗначений <> Неопределено Тогда
		ОтборСтрок = Новый Структура("Организация, DocumentType", Организация, DocumentType);
		НайденныеСтроки = ТаблицаКлючейЗначений.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДопСведения = НайденныеСтроки[0].СтрокаКлючЗначение;
		Иначе
			ДопСведения = ШаблонКлючей;
		КонецЕсли;
	Иначе
		ДопСведения = ШаблонКлючей;
	КонецЕсли;
	
	Возврат ДопСведения;
	
КонецФункции

Процедура ОбновитьСписокСтраницыОтправкиВДиадок()
	
	ОтборОрганизация= ПолучитьЗначениеОрганизации();
	Если ОтборОрганизация = Неопределено Тогда
		ОтборОрганизация= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПолучитьОрганизацииНезаблокированныеПоAPI();
	КонецЕсли;
			
	СписокДокументовДляВыгрузки.Загрузить(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьТаблицуЗначенийДокументовДляОтправкиДиадок(
										  ДатаНачала, ДатаОкончания, ТипыДокументов, ОтборОрганизация, ПолучитьЗначениеКонтрагента()));
	
	ПараметрыИспользованияБелыйЛистДоговоров= Новый Соответствие;
	
	ОбратныйИндекс= СписокДокументовДляВыгрузки.Количество() - 1;
	Пока ОбратныйИндекс > -1 Цикл
		
		СтрокаТЧ= СписокДокументовДляВыгрузки[ОбратныйИндекс];
		
		Если СписокДокументовДляВыгрузки_ПроверитьБелыйЛистДоговоров(СтрокаТЧ, ПараметрыИспользованияБелыйЛистДоговоров) = Ложь Тогда
			СписокДокументовДляВыгрузки.Удалить(ОбратныйИндекс);
			ОбратныйИндекс= ОбратныйИндекс - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ПервичныйИдентификаторПакета = НовыйИдентификаторПакета();
		
		Если ФормироватьСфНаОснованииРТУ() = Истина И СтрокаТЧ.ТипДокумента = "Счет-фактура" Тогда
			СтрокаТЧ.ВидДокумента = "Счет-фактура выданный";
			СтрокаТЧ.DocumentType = "Invoice";
		Иначе
			СтрокаТЧ.ВидДокумента = СтрокаТЧ.Документ.Метаданные().Представление();
			СтрокаТЧ.DocumentType = ОпределитьDocumentType(СтрокаТЧ.документ, СтрокаТЧ.ТипДокумента);
		КонецЕсли;
		
		Если ЛЕВ(СтрокаТЧ.DocumentType, 7) = "Invoice" И ПустаяСтрока(СтрокаТЧ.ФункцияУПД) Тогда
			СтрокаТЧ.УстаревшийФормат = Истина;
		КонецЕсли;
		
		Если СтрокаТЧ.ЭтоТестовыйДокумент Тогда
			СтрокаТЧ.ТипДокумента = СтрокаТЧ.ТипДокумента + " (тестовый)";
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ЭтоТестовыйДокумент И Модуль_РаботаССерверомДиадок.ПолучитьDiadocConnection().AuthenticateType = "Login" Тогда
			СтрокаТЧ.ОшибкаОтправки = "Отправка юридически значимого документа возможна только по сертификату";
		КонецЕсли;
		
		СтрокаТЧ.ТребуетсяНомерЗаказа= ВернутьСписокОрганизацийТребующихНомерЗаказа().НайтиПоЗначению(СтрокаТЧ.CounteragentID) <> Неопределено;
		
		ШаблонКлючей= ПолучитьШаблонКлючейДопСведений(СтрокаТЧ.CounteragentID, СтрокаТЧ.DocumentType);
		Если ЗначениеЗаполнено(ШаблонКлючей) Тогда
			СтрокаТЧ.ДопСведения= ПолучитьСтрокуКлючЗначение(СтрокаТЧ.Продавец, СтрокаТЧ.DocumentType, ШаблонКлючей);
		КонецЕсли;
		
		СтрокаТЧ.ТребуетсяКлючЗначение =	Истина;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДопСведения) = Истина Тогда
			Если НеобходимоЗаполнятьШаблонДопПолейЗначениями(СтрокаТЧ.CounteragentID) Тогда
				ПолучитьМодульПрог("Модуль_Кастомизация").ЗаполнитьШаблонДопПолейДанными(СтрокаТЧ.CounteragentID, СтрокаТЧ.DocumentType, СтрокаТЧ.Документ, СтрокаТЧ.ДопСведения);	
			КонецЕсли;
		КонецЕсли;
		
		ОбратныйИндекс= ОбратныйИндекс - 1;
		
	КонецЦикла;
	
	ПараметрыИспользованияБелыйЛистДоговоров= Неопределено;
	
	СписокДокументовДляВыгрузки_СформироватьПакеты();
	
	СписокДокументовДляВыгрузки_ДобавитьВПФ();
	
	Элементыформы.СписокДокументовДляВыгрузки.Колонки.НомерЗаказа.Видимость= СписокДокументовДляВыгрузки.Найти(Истина, "ТребуетсяНомерЗаказа") <> Неопределено;
	
	Этаформа.Заголовок = "Список документов для отправки через "+НаименованиеСистемы+" ("+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПредставлениеПериодаДД(ДатаНачала,датаокончания)+")";
	
	ОбновитьВклВсе();
	
	КэшСпискаДокументовДляВыгрузки=	СписокДокументовДляВыгрузки.Выгрузить();
		
	СписокДокументовДляВыгрузки.Сортировать("ЭтоПакет Убыв, ПервичныйИдентификаторПакета, ПозицияСортировки Возр");
	
	СписокДокументовДляВыгрузки_Заполнить_ИндексИконкиПакета();
	
КонецПроцедуры 	

Процедура СписокДокументовДляВыгрузки_СформироватьПакеты()
	
	КэшИспользуютУПДСЧФДОП = Новый ТаблицаЗначений;
	КэшИспользуютУПДСЧФДОП.Колонки.Добавить("Продавец");
	КэшИспользуютУПДСЧФДОП.Колонки.Добавить("Покупатель");
	КэшИспользуютУПДСЧФДОП.Колонки.Добавить("Используют");
	
	Для Каждого СтрокаТЧ ИЗ СписокДокументовДляВыгрузки Цикл
		
		Если СтрокаТЧ.DocumentType = "NonformalizedProforma" Тогда
			
			СчетНаОплатуВПакет(СтрокаТЧ, КэшИспользуютУПДСЧФДОП);
			
		ИначеЕсли СтрокаТЧ.DocumentType = "Invoice" 
			  ИЛИ СтрокаТЧ.DocumentType = "InvoiceRevision" 
			  ИЛИ СтрокаТЧ.DocumentType = "InvoiceCorrectionRevision" 
			  ИЛИ СтрокаТЧ.DocumentType = "UniversalTransferDocument" И ФункцияУПД(СтрокаТЧ.ТипДокумента) = "СЧФ"
			  ИЛИ СтрокаТЧ.DocumentType = "UniversalCorrectionDocument" И СтрокаТЧ.ФункцияУПД = "КСЧФ" Тогда
			
			СчетФактуруВПакет(СтрокаТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СписокДокументовДляВыгрузки_Заполнить_ИндексИконкиПакета()
	
	ВГраница= СписокДокументовДляВыгрузки.Количество() - 1;
	
	Для ИндексСтроки=0 ПО ВГраница Цикл
		
		Если СписокДокументовДляВыгрузки[ИндексСтроки].ЭтоПакет Тогда
			
			ИдентификаторПакетаТекущаяСтрока= СписокДокументовДляВыгрузки[ИндексСтроки].ПервичныйИдентификаторПакета;
			ИдентификаторПакетаСтрокаВыше= 	  ?(ИндексСтроки-1 > -1		  , СписокДокументовДляВыгрузки[ИндексСтроки-1].ПервичныйИдентификаторПакета, Неопределено);
			ИдентификаторПакетаСтрокаНиже= 	  ?(ИндексСтроки+1 <= ВГраница, СписокДокументовДляВыгрузки[ИндексСтроки+1].ПервичныйИдентификаторПакета, Неопределено);
			
			Если  ИдентификаторПакетаТекущаяСтрока <> ИдентификаторПакетаСтрокаВыше 
				И ИдентификаторПакетаТекущаяСтрока = ИдентификаторПакетаСтрокаНиже Тогда
				
				СписокДокументовДляВыгрузки[ИндексСтроки].ИндексИконкиПакета= 1; // Начало пакета
				
			ИначеЕсли ИдентификаторПакетаТекущаяСтрока = ИдентификаторПакетаСтрокаВыше
					И ИдентификаторПакетаТекущаяСтрока = ИдентификаторПакетаСтрокаНиже Тогда
					
				СписокДокументовДляВыгрузки[ИндексСтроки].ИндексИконкиПакета= 2; // Середина пакета
				
			ИначеЕсли ИдентификаторПакетаТекущаяСтрока = ИдентификаторПакетаСтрокаВыше
					И ИдентификаторПакетаТекущаяСтрока <> ИдентификаторПакетаСтрокаНиже Тогда
					
				СписокДокументовДляВыгрузки[ИндексСтроки].ИндексИконкиПакета= 3; // Окончание пакета
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура СписокДокументовДляВыгрузки_ПервичныйИдентификаторПакета_Заполнить_ИндексИконкиПакета(ПервичныйИдентификаторПакета)
	
	НайденныеСтроки= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ПервичныйИдентификаторПакета", ПервичныйИдентификаторПакета));
	
	ВГраница= НайденныеСтроки.ВГраница();
	
	Если ВГраница = 0 Тогда
		
		НайденныеСтроки[0].ИндексИконкиПакета= 0;
		
	ИначеЕсли ВГраница > 0 Тогда
		
		НайденныеСтроки[0].ИндексИконкиПакета= 1;
		НайденныеСтроки[ВГраница].ИндексИконкиПакета= 3;
		
		Для ИндексЦикла=1 ПО ВГраница-1 Цикл
			НайденныеСтроки[ИндексЦикла].ИндексИконкиПакета= 2;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СписокДокументовДляВыгрузки_ПроверитьБелыйЛистДоговоров(СтрокаТаблицы, ПараметрыИспользованияБелыйЛистДоговоров)
	
	ПараметрыИспользования= ПараметрыИспользованияБелыйЛистДоговоров[СтрокаТаблицы.Покупатель];
	
	Если ПараметрыИспользования = Неопределено Тогда
		ПараметрыИспользования= Новый Структура;
		ПараметрыИспользования.Вставить("Использовать_Организация", ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(СтрокаТаблицы.Покупатель, "ДиадокИспользоватьБелыйСписокДоговоров", Ложь) = Истина);
		ПараметрыИспользования.Вставить("Использовать_Договор"	  , Новый Соответствие);
		ПараметрыИспользованияБелыйЛистДоговоров.Вставить(СтрокаТаблицы.Покупатель, ПараметрыИспользования);
	КонецЕсли;
	
	Если ПараметрыИспользования.Использовать_Организация Тогда
		
		Договор= Модуль_ИнтеграцияОбщий.ПолучитьДоговорПоДокументу(СтрокаТаблицы.Документ);
		
		Использовать_Договор= ПараметрыИспользования.Использовать_Договор[Договор];
		
		Если Использовать_Договор = Неопределено Тогда
			Использовать_Договор= ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Договор, "Дог_ИспользоватьБелыйЛист", Ложь) = Истина;
			ПараметрыИспользования.Использовать_Договор.Вставить(Договор, Использовать_Договор);
		КонецЕсли;
		
		Возврат Использовать_Договор;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура СписокДокументовДляВыгрузки_ДобавитьВПФ()
	
	СоответствиеВПФ= Новый Соответствие;
	
	ОбратныйИндекс= СписокДокументовДляВыгрузки.Количество() - 1;
	
	Пока ОбратныйИндекс > -1 Цикл
		
		СтрокаТЧ =  СписокДокументовДляВыгрузки[ОбратныйИндекс];
		
		Если СтрокаТЧ.DocumentType = "UniversalTransferDocument" И СтрокаТЧ.ФункцияУПД = "СЧФДОП" Тогда
			
			ДобавитьВСписокДопВПФ_УПДСчфДоп(СтрокаТЧ, ОбратныйИндекс, СоответствиеВПФ);
									
		ИначеЕсли СтрокаТЧ.DocumentType = "XmlTorg12"
			ИЛИ   СтрокаТЧ.DocumentType = "XmlAcceptanceCertificate" 
			ИЛИ   СтрокаТЧ.DocumentType = "UniversalTransferDocument" И СтрокаТЧ.ФункцияУПД = "ДОП" Тогда 
				
			ДобавитьВСписокДопВПФ(СтрокаТЧ, ОбратныйИндекс, СоответствиеВПФ);
							
		КонецЕсли;
						
		ОбратныйИндекс= ОбратныйИндекс - 1;
		
	КонецЦикла;	

КонецПроцедуры

Процедура ДобавитьВСписокДопВПФ_УПДСчфДоп(СтрокаТЧ, ОбратныйИндекс, СоответствиеВПФ)
	
	МассивДокументыОснование= Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СтрокаТЧ.Документ);
			
	Для каждого ДокументОснование из МассивДокументыОснование Цикл
		
		МассивОтправленныхДополнительныхВПФ= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьСписокОтправленныхПФ(ДокументОснование, "");
		
		ДополнительныеВПФ = СоответствиеВПФ[СтрокаТЧ.Продавец];
		Если ДополнительныеВПФ = Неопределено Тогда
			ДополнительныеВПФ = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").МассивДополнительныхВПФ(СтрокаТЧ.Продавец);
			СоответствиеВПФ.Вставить(СтрокаТЧ.Продавец, ДополнительныеВПФ);
		КонецЕсли;
		
		Если ДополнительныеВПФ.Количество() > 0 Тогда
										
			СтрокаТЧ.ЭтоПакет= Истина;
			СтрокаТЧ.ПозицияСортировки= "2";
						
			Для Каждого ВПФ ИЗ ДополнительныеВПФ Цикл
				
				Если ВПФ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторВПФ = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Идентификатор(ДокументОснование, ВПФ);
				
				ПараметрыОтправки = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_РезультатФункции(ИдентификаторВПФ, "ПолучитьПараметрыОтправкиЧерезДиадок", ДокументОснование);
				
				Если ТипЗнч(ПараметрыОтправки) <> Тип("Структура") Тогда
					ПараметрыОтправки= Новый Структура;
				КонецЕсли;
				
				Если ПараметрыОтправки.Свойство("Выгружать") И ПараметрыОтправки.Выгружать <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока= СписокДокументовДляВыгрузки.Вставить(ОбратныйИндекс + 1);
				
				НоваяСтрока.ТипДокумента= 			Строка(ВПФ);
				НоваяСтрока.Документ= 				ДокументОснование;
				НоваяСтрока.Проведен= 				СтрокаТЧ.Проведен;
				НоваяСтрока.Продавец= 				СтрокаТЧ.Продавец;
				НоваяСтрока.Покупатель= 			СтрокаТЧ.Покупатель;
				НоваяСтрока.ВПодразделение= 		СтрокаТЧ.ВПодразделение;
				НоваяСтрока.ВидДокумента= 			ДокументОснование.Метаданные().Представление();
				НоваяСтрока.ToDepartmentID= 		СтрокаТЧ.ToDepartmentID;
				НоваяСтрока.CounteragentID= 		СтрокаТЧ.CounteragentID;
				НоваяСтрока.Дата= 					ДокументОснование.Дата; 	
				НоваяСтрока.Номер= 					ДокументОснование.Номер; 	
				НоваяСтрока.ВнешняяПечатнаяФорма= 	ИдентификаторВПФ;
				НоваяСтрока.Id= 					?(МассивОтправленныхДополнительныхВПФ.Найти(ВПФ) <> Неопределено, "отпр", "");
				НоваяСтрока.ВыгружатьEXEL= 			ПараметрыОтправки.Свойство("ВыгружатьEXEL") И ПараметрыОтправки.ВыгружатьEXEL = Истина;
				НоваяСтрока.ЭтоТестовыйДокумент= 	СтрокаТЧ.ЭтоТестовыйДокумент;
				НоваяСтрока.Грузополучатель= 		СтрокаТЧ.Грузополучатель;
				НоваяСтрока.ДокументОснованиеДляУПДСчфДоп= СтрокаТЧ.Документ;
										
				НоваяСтрока.ЭтоПакет= 				СтрокаТЧ.ЭтоПакет;
				НоваяСтрока.ПервичныйИдентификаторПакета= СтрокаТЧ.ПервичныйИдентификаторПакета;
				НоваяСтрока.ПозицияСортировки= 		"3";
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСписокДопВПФ(СтрокаТЧ, ОбратныйИндекс, СоответствиеВПФ)
	
	МассивОтправленныхДополнительныхВПФ= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьСписокОтправленныхПФ(СтрокаТЧ.Документ, СтрокаТЧ.СостояниеОтправкиДополнительныхВПФ);
			
	ДополнительныеВПФ = СоответствиеВПФ[СтрокаТЧ.Продавец];
	Если ДополнительныеВПФ = Неопределено Тогда
		ДополнительныеВПФ = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").МассивДополнительныхВПФ(СтрокаТЧ.Продавец);
		СоответствиеВПФ.Вставить(СтрокаТЧ.Продавец, ДополнительныеВПФ);
	КонецЕсли;
	
	Если ДополнительныеВПФ.Количество() > 0 Тогда
		
		СтрокаТЧ.ЭтоПакет= Истина;
		СтрокаТЧ.ПозицияСортировки= "2";
						
		Для Каждого ВПФ ИЗ ДополнительныеВПФ Цикл
			
			Если ВПФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторВПФ = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Идентификатор(СтрокаТЧ.Документ, ВПФ);
			
			ПараметрыОтправки = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_РезультатФункции(ИдентификаторВПФ, "ПолучитьПараметрыОтправкиЧерезДиадок", СтрокаТЧ.Документ);
			
			Если ТипЗнч(ПараметрыОтправки) <> Тип("Структура") Тогда
				ПараметрыОтправки= Новый Структура;
			КонецЕсли;
			
			Если ПараметрыОтправки.Свойство("Выгружать") И ПараметрыОтправки.Выгружать <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока= СписокДокументовДляВыгрузки.Вставить(ОбратныйИндекс + 1);
			
			НоваяСтрока.ТипДокумента= 			Строка(ВПФ);
			НоваяСтрока.Документ= 				СтрокаТЧ.Документ;
			НоваяСтрока.Проведен= 				СтрокаТЧ.Проведен;
			НоваяСтрока.Продавец= 				СтрокаТЧ.Продавец;
			НоваяСтрока.Покупатель= 			СтрокаТЧ.Покупатель;
			НоваяСтрока.ВПодразделение= 		СтрокаТЧ.ВПодразделение;
			НоваяСтрока.ВидДокумента= 			СтрокаТЧ.ВидДокумента;
			НоваяСтрока.ToDepartmentID= 		СтрокаТЧ.ToDepartmentID;
			НоваяСтрока.CounteragentID= 		СтрокаТЧ.CounteragentID;
			НоваяСтрока.Дата= 					СтрокаТЧ.Дата;
			НоваяСтрока.Номер= 					СтрокаТЧ.Номер;
			НоваяСтрока.ВнешняяПечатнаяФорма= 	ИдентификаторВПФ;
			НоваяСтрока.Id= 					?(МассивОтправленныхДополнительныхВПФ.Найти(ВПФ) <> Неопределено, "отпр", "");
			НоваяСтрока.ВыгружатьEXEL= 			ПараметрыОтправки.Свойство("ВыгружатьEXEL") И ПараметрыОтправки.ВыгружатьEXEL = Истина;
			НоваяСтрока.ЭтоТестовыйДокумент= 	СтрокаТЧ.ЭтоТестовыйДокумент;
			НоваяСтрока.Грузополучатель= 		СтрокаТЧ.Грузополучатель;
			
			НоваяСтрока.ЭтоПакет= 				СтрокаТЧ.ЭтоПакет;
			НоваяСтрока.ПервичныйИдентификаторПакета= СтрокаТЧ.ПервичныйИдентификаторПакета;
			НоваяСтрока.ПозицияСортировки= 		"3";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетНаОплатуВПакет(СтрСпискаДокументов, КэшИспользуютУПДСЧФДОП)
	
	Перем ФункцияУПД;
	
	ВидДокумента 	= СтрСпискаДокументов.ВидДокумента;
	ТипДокумента 	= СтрСпискаДокументов.ТипДокумента;
	Документ		= СтрСпискаДокументов.Документ;
	
	ЕстьУПД_СЧФДОП = ИспользуютУПДСЧФДОП(СтрСпискаДокументов, КэшИспользуютУПДСЧФДОП);
	
	Если Найти(ВидДокумента, "Реализация товаров и услуг")>0 И Найти(ТипДокумента, "Счет на оплату")>0 Тогда
		
		Если ЕстьУПД_СЧФДОП Тогда
			Объединить_Счет_УПДПолный_ВОдинПакет(Документ, СтрСпискаДокументов);
		Иначе
			Объединить_Счет_ДокументРеализации_ВОдинПакет(Документ, СтрСпискаДокументов, Истина);
		КонецЕсли;
		
	Иначе
		
		// Настройка "Счет как самостоятельный документ"
		МассивРТУ = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРТУПоСчетуНаОплату(СтрСпискаДокументов.Документ);
		Для каждого СтрокаМассиваРТУ из МассивРТУ Цикл
			
			Если ЕстьУПД_СЧФДОП Тогда
				Объединить_Счет_УПДПолный_ВОдинПакет(СтрокаМассиваРТУ, СтрСпискаДокументов);
			Иначе
				Объединить_Счет_ДокументРеализации_ВОдинПакет(СтрокаМассиваРТУ, СтрСпискаДокументов);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрСпискаДокументов.ЭтоПакет Тогда
		СтрСпискаДокументов.ПозицияСортировки = "1";	
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетФактуруВПакет(СтрСпискаДокументов)
	
	МассивРТУ = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СтрСпискаДокументов.Документ);
				
	Для каждого СтрокаМассиваРТУ из МассивРТУ Цикл
		
		МассивСтрокРеализацийНаОтправку = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", СтрокаМассиваРТУ));
		Для каждого СтрокаСРеализацией из МассивСтрокРеализацийНаОтправку Цикл
					
			Если ЗначениеЗаполнено(СтрокаСРеализацией.ID) = Ложь Тогда
				ОбъединитьВПакет(СтрокаСРеализацией, СтрСпискаДокументов);
			КонецЕсли;
						
		КонецЦикла;
								
	КонецЦикла;
	
	Если СтрСпискаДокументов.ЭтоПакет Тогда
		СтрСпискаДокументов.ПозицияСортировки = "4";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьВПакет(СтрокаСРеализацией, СтрОбрабатываемыйДокумент)
	
	Если НЕ СтрОбрабатываемыйДокумент.ЭтоПакет И НЕ СтрокаСРеализацией.ЭтоПакет Тогда //оба не в пакете - создаем новый пакет
		
		СтрОбрабатываемыйДокумент.ЭтоПакет	= Истина;
		СтрокаСРеализацией.ЭтоПакет			= Истина;
		
		ПервичныйИдентификаторПакета 							= НовыйИдентификаторПакета();
		СтрОбрабатываемыйДокумент.ПервичныйИдентификаторПакета 	= ПервичныйИдентификаторПакета;
		СтрокаСРеализацией.ПервичныйИдентификаторПакета 		= ПервичныйИдентификаторПакета;
		
	ИначеЕсли НЕ СтрОбрабатываемыйДокумент.ЭтоПакет И СтрокаСРеализацией.ЭтоПакет Тогда //счет/сф не в пакете, торг уже в пакете - берем идентификатор пакета торг	
		
		СтрОбрабатываемыйДокумент.ЭтоПакет = Истина;
		СтрОбрабатываемыйДокумент.ПервичныйИдентификаторПакета = СтрокаСРеализацией.ПервичныйИдентификаторПакета;
		
	ИначеЕсли СтрОбрабатываемыйДокумент.ЭтоПакет И НЕ СтрокаСРеализацией.ЭтоПакет Тогда //счет/сф в пакете, торг еще нет - берем идентификатор пакета счета/сф 
		
		СтрокаСРеализацией.ЭтоПакет	= Истина;
		СтрокаСРеализацией.ПервичныйИдентификаторПакета = СтрОбрабатываемыйДокумент.ПервичныйИдентификаторПакета;
		
	Иначе //оба документа в пакете - всем документам пакета торга присвайваем идентификатор пакета счета/сф
		
		Если НЕ СтрОбрабатываемыйДокумент.ПервичныйИдентификаторПакета = СтрокаСРеализацией.ПервичныйИдентификаторПакета Тогда
			
			МассивДокументовИзПакетаРеализации = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ЭтоПакет, ПервичныйИдентификаторПакета", Истина, СтрокаСРеализацией.ПервичныйИдентификаторПакета));
			
			Для каждого ДокументПакетаРеализации из МассивДокументовИзПакетаРеализации Цикл
				ДокументПакетаРеализации.ПервичныйИдентификаторПакета = СтрОбрабатываемыйДокумент.ПервичныйИдентификаторПакета;	
			КонецЦикла;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСРеализацией.ВнешняяПечатнаяФорма) = Истина Тогда
		СтрокаСРеализацией.ПозицияСортировки = "3";
	ИначеЕсли СтрокаСРеализацией.DocumentType = "NonformalizedProforma" Тогда
		СтрокаСРеализацией.ПозицияСортировки = "1";
	Иначе
		СтрокаСРеализацией.ПозицияСортировки = "2";
	КонецЕсли;
	
КонецПроцедуры

Процедура Объединить_Счет_УПДПолный_ВОдинПакет(ДокументОснование, СтрСпискаДокументов)
	
	СчетФактураВыданныйСсылка = Модуль_ИнтеграцияОбщий.ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(ДокументОснование);
	МассивСтрокУПДПолныйНаОтправку = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ, DocumentType", СчетФактураВыданныйСсылка, "UniversalTransferDocument"));
	
	Для каждого СтрокаС_УПДПолный из МассивСтрокУПДПолныйНаОтправку Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаС_УПДПолный.ID) Тогда
			ОбъединитьВПакет(СтрокаС_УПДПолный, СтрСпискаДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрСпискаДокументов.ДокументОснованиеДляУПДСчфДоп = СчетФактураВыданныйСсылка;
	
КонецПроцедуры

Процедура Объединить_Счет_ДокументРеализации_ВОдинПакет(ДокументРеализации, СтрСпискаДокументов, СчетНаОснованииРеализации = Ложь)
	
	МассивСтрокРеализацийНаОтправку = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", ДокументРеализации));
	Для каждого СтрокаСРеализацией из МассивСтрокРеализацийНаОтправку Цикл
		
		Если СчетНаОснованииРеализации И СтрокаСРеализацией = СтрСпискаДокументов Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаСРеализацией.ID) Тогда
			ОбъединитьВПакет(СтрокаСРеализацией, СтрСпискаДокументов);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуютУПДСЧФДОП(СтрСпискаДокументов, КэшИспользуютУПДСЧФДОП) 
	
	//Логика такая: в разрезе настроек контрагента, ему отправляют УПД полный, тогда в строке на отправку в разрезе Организации, Контрагента для документов УПД ФункцияУПД = "СЧФДОП",
	//либо не отправляют, тогда ФункцияУПД <> "СЧФДОП". Исключение составляет документ Счет-фактура на аванс. При использовании УПД, ФункцияУПД для такого документа будет "СЧФ".  
	
	// необходимо понять какие настройки работы с УПД у нас выставлены в рамках организации и контрагента
	МассивСтрокКэша = КэшИспользуютУПДСЧФДОП.НайтиСтроки(Новый Структура("Продавец, Покупатель", СтрСпискаДокументов.Продавец, СтрСпискаДокументов.Покупатель));
	Если МассивСтрокКэша.Количество() = 0 Тогда
		
		//возможно такую настройку еще не закэшировали, поэтому ищем среди строк на отправку
		МассивСтрокСпискаВыгрузки = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Продавец, Покупатель, DocumentType, ФункцияУПД", СтрСпискаДокументов.Продавец, СтрСпискаДокументов.Покупатель, "UniversalTransferDocument", "СЧФДОП"));
		Если МассивСтрокСпискаВыгрузки.Количество() = 0 Тогда
			ВозвращаемоеЗначение = Ложь;
		Иначе
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		НоваяСтрокаКэшИспользуютУПДСЧФДОП = КэшИспользуютУПДСЧФДОП.Добавить();
		НоваяСтрокаКэшИспользуютУПДСЧФДОП.Продавец		= СтрСпискаДокументов.Продавец;
		НоваяСтрокаКэшИспользуютУПДСЧФДОП.Покупатель	= СтрСпискаДокументов.Покупатель;
		НоваяСтрокаКэшИспользуютУПДСЧФДОП.Используют	= ВозвращаемоеЗначение;
		
		Возврат ВозвращаемоеЗначение; 
		
	Иначе
		
		Возврат МассивСтрокКэша[0].Используют;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// обработка интерфейсных элементов
/////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВвестиСтрокуКлючЗначение(Организация, DocumentType, ИсходнаяСтрока, ПоказыватьКнопкуШаблонов=Истина, ПокупательId)
	
	ФормаВводаТаблицыЗначений=	ПолучитьМодульПрог("ФормаВводаТаблицыЗначений");
	ФормаВводаТаблицыЗначений.СтрокаКлючЗначение= ИсходнаяСтрока;
	ФормаВводаТаблицыЗначений.Организация		= Организация;
	ФормаВводаТаблицыЗначений.DocumentType		= DocumentType;
	Если ПоказыватьКнопкуШаблонов = Истина Тогда
		ФормаВводаТаблицыЗначений.ШаблонКлючей = ПолучитьШаблонКлючейДопСведений(ПокупательId, DocumentType);

	Иначе
		ФормаВводаТаблицыЗначений.ШаблонКлючей = "";
	КонецЕсли;
	
	СтрокаКлючЗначение=	ФормаВводаТаблицыЗначений.ОткрытьМодально();
	Если СтрокаКлючЗначение<> Неопределено Тогда
		Возврат СтрокаКлючЗначение;
	Иначе
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПериодВыборкиДокументов()
	
	НастройкаПериода=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СброситьНастройкуПериода("ДиадокНастройкаПериодаВыгрузить");
	ДатаНачала=			НастройкаПериода.ДатаНачала;
	ДатаОкончания=		НастройкаПериода.ДатаОкончания;
	
	СохранитьЗначение("ДиадокНастройкаПериодаВыгрузить", НастройкаПериода);
	
КонецПроцедуры

Процедура КоманднаяПанель1УстановитьИнтервал(Кнопка)
	
	НастройкаПериода=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВосстановитьНастройкуПериода(ДатаНачала, ДатаОкончания, "ДиадокНастройкаПериодаВыгрузить");
	Если НастройкаПериода.Редактировать() Тогда 
		
		СохранитьЗначение("ДиадокНастройкаПериодаВыгрузить", НастройкаПериода);
		
		ДатаНачала = НастройкаПериода.ДатаНачала;
		ДатаОкончания = Настройкапериода.ДатаОкончания;
		ОбновитьСписокСтраницыОтправкиВДиадок()
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1Обновить(Кнопка)
	ОбновитьСписокСтраницыОтправкиВДиадок();
КонецПроцедуры

Процедура КоманднаяПанель1ПросмотрФормы(Кнопка)
	
	ТекДанные = Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Предупреждение("Выберите документ.",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
		
	МассСтрокНаВыгрузку	= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ПервичныйИдентификаторПакета", ТекДанные.ПервичныйИдентификаторПакета));
	
	МассивДокументовПакета = Новый Массив;
	ЗаполнитьМассивДокументовПакета(МассивДокументовПакета, МассСтрокНаВыгрузку);
	
	ДокументВладелец 	= ТекДанные.Документ;
	MyBoxId 			= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(ДокументВладелец.Организация);
			
	DiadocConnection = Модуль_РаботаССерверомДиадок.ПолучитьDiadocConnection();
	
	Если  ФормироватьСфНаОснованииРТУ() = Истина 
		И Строка(ТипЗнч(ТекДанные.Документ)) <> ТекДанные.ВидДокумента Тогда
		
		ПолучитьМодульПрог("Модуль_Кастомизация").ВизуализироватьСФНаОснованииРТУ(ТекДанные, MyBoxId, DiadocConnection);
	Иначе
		
		НоваяФорма = ПолучитьФорму("ФормаПечатногоДокумента", Этаформа, ТекДанные.ПервичныйИдентификаторПакета);
		НоваяФорма.ОтправкаНевозможна 			 = НЕ ТекДанные.ЭтоТестовыйДокумент И DiadocConnection.AuthenticateType = "Login";
		НоваяФорма.ЗакрыватьПриЗакрытииВладельца = Истина;
		НоваяФорма.СформироватьИПоказатьПечатнуюФорму(МассивДокументовПакета, MyBoxId, , Новый Структура("ID, Наименование", ТекДанные.ToDepartmentID, ТекДанные.ВПодразделение), ДокументВладелец);
						
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовДляВыгрузкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ИндексИконкиПакета > 0 Тогда
		ОформлениеСтроки.Ячейки.КартинкаПакета.ОтображатьКартинку= Истина;
		ОформлениеСтроки.Ячейки.КартинкаПакета.ИндексКартинки= ДанныеСтроки.ИндексИконкиПакета;
	КонецЕсли;
	
	Если  ДанныеСтроки.ЭтоПакет И Элемент.ТекущиеДанные <> Неопределено 
		И ДанныеСтроки.ПервичныйИдентификаторПакета = Элемент.ТекущиеДанные.ПервичныйИдентификаторПакета Тогда
		
		ОформлениеСтроки.ЦветФона = Новый Цвет(255, 240, 230);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ID) И Лев(ДанныеСтроки.ID, 4) <> "усл:" Тогда
		
		ОформлениеСтроки.Ячейки.Вкл.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.Вкл.ОтображатьТекст  = Истина;
		ОформлениеСтроки.Ячейки.Вкл.Текст = "отпр";
		
	ИначеЕсли НЕ ПустаяСтрока(ДанныеСтроки.ОшибкаОтправки) Тогда
		
		ОформлениеСтроки.ЦветТекста = WEBЦвета.СветлоСерый;
		
	КонецЕсли;
	
	Если ДанныеСтроки.ТребуетсяНомерЗаказа И НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерЗаказа) Тогда
		ОформлениеСтроки.Ячейки.НомерЗаказа.ЦветФона = WEBЦвета.СветлоРозовый;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.КартинкаСостояниеДокумента.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Проведен Тогда
		ОформлениеСтроки.Ячейки.КартинкаСостояниеДокумента.ИндексКартинки= 1;
	Иначе
		ОформлениеСтроки.Ячейки.КартинкаСостояниеДокумента.ИндексКартинки= 0;
	КонецЕсли;
	
	Если ДанныеСтроки.ЭтоТестовыйДокумент Тогда
		ОформлениеСтроки.Ячейки.ТипДокумента.ЦветФона = WebЦвета.Оранжевый;
	КонецЕсли;
	
	Если ДанныеСтроки.УстаревшийФормат Тогда
		ОформлениеСтроки.Ячейки.ТипДокумента.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущаяКолонка.Имя = "Вкл" Тогда 
		
		ТекСтрока = Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные;
		Если 	ЗначениеЗаполнено(ТекСтрока.ID) = Ложь 
			ИЛИ Найти(ТекСтрока.ID, "усл:")>0 
		Тогда	
			ТекСтрока.вкл = НЕ ТекСтрока.вкл; 
			Если  ЗначениеЗаполнено(ТекСтрока.ВнешняяПечатнаяФорма) = Истина 
				И ТекСтрока.вкл 
				И ОтправлятьВПФБезРТУ() = Ложь 
			Тогда
				
				Если ЗначениеЗаполнено(ТекСтрока.ДокументОснованиеДляУПДСчфДоп) Тогда
					ВыборкаСтрок= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", ТекСтрока.ДокументОснованиеДляУПДСчфДоп));
				Иначе
					ВыборкаСтрок= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", ТекСтрока.Документ));
				КонецЕсли;
				
				Для каждого Стр из ВыборкаСтрок Цикл
					Если  ЗначениеЗаполнено(Стр.ID) = Ложь 
						И ЗначениеЗаполнено(Стр.ВнешняяПечатнаяФорма) = Ложь 
					Тогда
						Стр.вкл = Истина;
					КонецЕсли;	
				КонецЦикла
								
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ВнешняяПечатнаяФорма) = Ложь И ТекСтрока.Вкл = Ложь Тогда
			
				Если ТекСтрока.DocumentType = "UniversalTransferDocument" И ФункцияУПД(ТекСтрока.ТипДокумента) = "СЧФДОП" Тогда
					ВыборкаСтрок= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ДокументОснованиеДляУПДСчфДоп", ТекСтрока.Документ));
				Иначе
					ВыборкаСтрок= СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", ТекСтрока.Документ));
				КонецЕсли;
				
				Для каждого Стр из ВыборкаСтрок Цикл 
					Если ЗначениеЗаполнено(стр.ВнешняяПечатнаяФорма) = Истина Тогда 
						Стр.вкл = Ложь
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли	
		КонецЕсли;	
		
		ОбновитьВклВсе();
		
	ИначеЕсли Элементыформы.СписокДокументовДляВыгрузки.ТекущаяКолонка.Имя = "ВПодразделение" Тогда 
				
		ТекущиеДанные = ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные;
		
		BoxID			= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(ТекущиеДанные.Продавец);
		Получатель 		= ?(ЗначениеЗаполнено(ТекущиеДанные.Грузополучатель)=Истина, ТекущиеДанные.Грузополучатель, ТекущиеДанные.Покупатель);
		CounteragentID 	= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(Получатель, BoxID);
		стОрганизация 	= ПолучитьФорму("ФормаВыбораОрганизацииПодразделения").ВыбратьПодразделениеКонтрагентаДиадок(BoxID,CounteragentID, ТекущиеДанные.ToDepartmentID);
						
		Если НЕ стОрганизация = Неопределено Тогда
			
			ПредставлениеГрузополучателя 	= ?(ЗначениеЗаполнено(ТекущиеДанные.Грузополучатель)=Истина, ТекущиеДанные.Грузополучатель.Наименование, "");
			ПредставлениеПодразделения 		= ?(ЗначениеЗаполнено(стОрганизация.ПредставлениеПодразделения)=Истина, стОрганизация.ПредставлениеПодразделения, "");
			
			ВПодразделениеЗначение = ПредставлениеГрузополучателя + ?(ЗначениеЗаполнено(ПредставлениеГрузополучателя)=Истина и ЗначениеЗаполнено(ПредставлениеПодразделения)=Истина, " / ", "") + ПредставлениеПодразделения;
			
			Если ТекущиеДанные.ЭтоПакет Тогда
				
				ВременныйИдентификаторПакета = ТекущиеДанные.ПервичныйИдентификаторПакета;
				МассивСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ПервичныйИдентификаторПакета", ВременныйИдентификаторПакета));
				Для каждого СтрокаМассива из МассивСтрок Цикл
					СтрокаМассива.ВПодразделение = ВПодразделениеЗначение;
					СтрокаМассива.ToDepartmentID = стОрганизация.DepartmentID;
				КонецЦикла;
				
			Иначе
				ТекущиеДанные.ВПодразделение = ВПодразделениеЗначение;
				ТекущиеДанные.ToDepartmentID = стОрганизация.DepartmentID;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли элементыформы.СписокДокументовДляВыгрузки.ТекущаяКолонка.Имя = "ДопСведения" Тогда 
		
		Если ЗначениеЗаполнено(Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные.ВнешняяПечатнаяФорма) Тогда
			Предупреждение("Для дополнительных печатных форм указание данного параметра невозможно.", ,НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные=	Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные;
		
		ДопСведения = ТекущиеДанные.ДопСведения;
		
		Покупатель 		= ТекущиеДанные.Покупатель;
		ПокупательId 	= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_BoxID(Покупатель);
		
		ИспользоватьМеханизмШаблоновДопПолей = Ложь;
		DocumentType = ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные.DocumentType;
		ШаблонКлючей = ПолучитьШаблонКлючейДопСведений(ПокупательId, DocumentType); 
		Если ЗначениеЗаполнено(ШаблонКлючей) = Истина Тогда
			ИспользоватьМеханизмШаблоновДопПолей = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.ТребуетсяКлючЗначение = Истина Тогда
			
			ТекущиеДанные.ДопСведения =	ВвестиСтрокуКлючЗначение(ТекущиеДанные.Документ.Организация, ТекущиеДанные.DocumentType, ДопСведения, ИспользоватьМеханизмШаблоновДопПолей, ПокупательId);
			
			Если ИспользоватьМеханизмШаблоновДопПолей Тогда
				ОбновитьКлючиЗначения();
			КонецЕсли;
			
		Иначе
			Если ВвестиСтроку(ДопСведения, "Укажите дополнительные сведения",1900, Истина) Тогда
				ТекущиеДанные.ДопСведения = ДопСведения;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли элементыформы.СписокДокументовДляВыгрузки.ТекущаяКолонка.Имя = "НомерЗаказа" Тогда 
		НомерЗаказа = Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные.НомерЗаказа;
		Если ввестиСтроку(НомерЗаказа, "Укажите номер заказа",256 ) Тогда 
			Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные.НомерЗаказа = НомерЗаказа;
			Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные.ДопСведения= "номер_заказа:"+СокрЛП(НомерЗаказа);
			ОбновитьНомерЗаказа();
		КонецЕсли;	
	Иначе 
		КоманднаяПанель1ПросмотрФормы("")
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ОткрытьДокумент1С(Кнопка)
	Если Элементыформы.СписокДокументовДляВыгрузки.ТекущиеДанные = Неопределено Тогда
		предупреждение("Выберите документ.",, НаименованиеСистемы);
	иначе 	
		Элементыформы.СписокДокументовДляВыгрузки.текущиеданные.Документ.получитьформу().Открыть();
    КонецЕсли;
КонецПроцедуры

Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ТипыДокументовПриИзменении(Элемент) Экспорт
	ОбновитьСписокСтраницыОтправкиВДиадок();
	СохранитьЗначение("ТипыДокументовФормаВыгрузкиДиадок", ТипыДокументов);
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь; 
	
	выбраннаяОрганизация = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьОрганизациюИзСопоставленныхДиадок( ПолучитьЗначениеОрганизации() );
	Если выбраннаяОрганизация <> Неопределено Тогда 
		Организация = выбраннаяОрганизация; 
		ОбновитьСписокСтраницыОтправкиВДиадок();
	КонецЕсли;	
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь;
	Организация = "Все"; 
	ОбновитьСписокСтраницыОтправкиВДиадок();
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь; 
	
	выбранныйКонтрагент = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьКонтрагентаИзСопоставленныхДиадок( ПолучитьЗначениеКонтрагента(), CounteragentId );
	
	Если выбранныйКонтрагент <> Неопределено Тогда 
		Контрагент = выбранныйКонтрагент; 
		ОбновитьСписокСтраницыОтправкиВДиадок();
	КонецЕсли;	
КонецПроцедуры

Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(CounteragentId) Тогда 
		Возврат
	КонецЕсли;	
	Контрагент = "Все"; 
	ОбновитьСписокСтраницыОтправкиВДиадок();
КонецПроцедуры

Процедура КоманднаяПанель1выгрузить(Кнопка)
	ВыполнитьВыгрузку(Ложь);
КонецПроцедуры

Процедура КоманднаяПанель1ПередатьНаСогласование(Кнопка)
	КэшированныеПараметрыОтправки.Очистить();
	ВыполнитьВыгрузку(Истина, "ApprovementRequest");
КонецПроцедуры

Процедура КоманднаяПанель1ПередатьНаПодпись(Кнопка)
	КэшированныеПараметрыОтправки.Очистить();
	ВыполнитьВыгрузку(Истина, "SignatureRequest");
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// массовая выгрузка документов (асинхронная)
///////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура СообщитьОНевозможностиОтправкиДокумента(ТекстОшибкиОтправки)
	
	ФормаОшибки = ПолучитьФорму("ФормаОбработкиОшибкиВыгрузкиДокумента");
	ФормаОшибки.ТекстОшибки 	 = ТекстОшибкиОтправки;
	ФормаОшибки.РежимОтображения = "ТолькоКнопкаЗакрыть";
	ФормаОшибки.ОткрытьМодально();  
	
КонецПроцедуры	

Функция ПроверитьВозможностьЗапускаВыгрузки(ОтправкаДокументаНаСогласование)
	
	Для Каждого стр из СписокДокументовДляВыгрузки Цикл 
		стр.ПропускатьПриВыгрузке = Ложь;
		Если НЕ ОтправкаДокументаНаСогласование И Стр.вкл и НЕ ПустаяСтрока(стр.ОшибкаОтправки) Тогда
			ТекстОНевозможнсотиОтправки = "Отправка данного документа невозможна " + Стр.ТипДокумента + " №" + Стр.Номер + " от " + Стр.Дата
											+ Символы.ПС + Стр.ОшибкаОтправки;
			СообщитьОНевозможностиОтправкиДокумента(ТекстОНевозможнсотиОтправки);								
			Стр.вкл = Ложь;
			ОбновитьВклВсе();
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	ВыборкаСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Вкл", Истина));
	Если ВыборкаСтрок.Количество()=0 Тогда
		Предупреждение("Выберите хотя бы один документ.",, НаименованиеСистемы);
		Возврат Ложь;
	КонецЕсли;	
	
	ВыборкаСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Вкл, ТребуетсяНомерЗаказа, НомерЗаказа", Истина, Истина, "" ));
	Если ВыборкаСтрок.Количество()>0 Тогда 
		Предупреждение("Необходимо указать номер заказа для 
		|"+ВыборкаСтрок[0].Документ, , НаименованиеСистемы);
		Возврат Ложь;
	КонецЕсли;	
	
	ПредыдущийИдПакета = "";
	
	Для каждого стр из СписокДокументовДляВыгрузки Цикл 
		Если стр.вкл и (Найти(стр.ТипДокумента, "Исправление")>0 или Найти(стр.ТипДокумента, "Корректировочный")>0) Тогда
			ДокОснование = Модуль_ИнтеграцияОбщий.ПолучитьСФОснованиеДляИСФДиадок(Стр.Документ) ;
			Если СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ, Вкл", ДокОснование, Истина)).Количество()<>0 Тогда 
				Предупреждение("Отправка документа "+стр.ТипДокумента+" "+стр.Документ+"
				|одновременно с его основанием "+ДокОснование+" невозможно!", , НаименованиеСистемы);
				Возврат Ложь;
            КонецЕсли;
		КонецЕсли;
		
		Если Стр.Вкл Тогда
			Если ПредыдущийИдПакета = "" Тогда
				РазмерВыгрузки = 1;
			Иначе
				Если НЕ стр.ПервичныйИдентификаторПакета = ПредыдущийИдПакета Тогда
					РазмерВыгрузки = РазмерВыгрузки + 1;
				КонецЕсли;
			КонецЕсли;
			ПредыдущийИдПакета = стр.ПервичныйИдентификаторПакета;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;

КонецФункции

Процедура ВыполнитьВыгрузку(РежимСогласования, RequestType = "")
	
	Если ПроверитьВозможностьЗапускаВыгрузки(РежимСогласования) Тогда
		
    	ЗакрыватьФорму = Истина;
 		
		МассивЗаданийОтправкиПакета = Новый Массив;
		ТаблицаСоответствияCustomIdСсылке1С = ИнициироватьТаблицуСоответствияCustomIdСсылке1С();
		
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
		
		КоличествоВыгружено 			= 1;
		ОтправкаДокументаНаСогласование = РежимСогласования;
		ResolutionRequestType 			= RequestType;
		
		НастройкиШифрования    = Неопределено;
		СертификатыОрганизаций = Неопределено;
		
		ЗапуститьИтерациюВыгрузки();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗапуститьИтерациюВыгрузки()
	
	Если КоличествоВыгружено <= РазмерВыгрузки Тогда
		Элементыформы.НадписьОтправка.Значение = "Производится отправка пакетов документов ("+КоличествоВыгружено+" из "+ РазмерВыгрузки+")";
	КонецЕсли;	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента", 0.1, Истина);
	
КонецПроцедуры

Функция ДокументыЕстьВТекущихЗаданияхНаОтправку(МассивДокументов)
	
	Для каждого Документ из МассивДокументов Цикл
		Для Каждого Задача из МассивЗаданийОтправкиПакета Цикл
			
			МассивСтрокНаВыгрузку = Задача.МассивСтрок;
			Для Каждого СтрокаТаски из МассивСтрокНаВыгрузку Цикл
				Если Документ = СтрокаТаски.Документ Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
			 
	Возврат Ложь;
	
 КонецФункции
 
Функция Документ_ЕстьВТекущихЗаданияхНаОтправку(ИскомыйДокумент)
	
	Для Каждого Задача из МассивЗаданийОтправкиПакета Цикл
		
		МассивСтрокНаВыгрузку = Задача.МассивСтрок;
		Для Каждого СтрокаТаски из МассивСтрокНаВыгрузку Цикл
			Если ИскомыйДокумент = СтрокаТаски.Документ Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
 
 Функция ДокументВыгруженВСеансе(Документ)
	  выборкаСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", Документ));
	  Для каждого стр из выборкаСтрок цикл 
		  Если ЗначениеЗаполнено(Стр.ВнешняяПечатнаяФорма)=Ложь Тогда 
			  Возврат ЗначениеЗаполнено(стр.id)
		  КонецЕсли;
	  КонецЦикла;
	  
	  Возврат Ложь;
 КонецФункции
 
 Функция ПолучитьМассивСсылок(массивСтруктур)
	 
	 результат = Новый массив;
	 Для каждого эл из массивСтруктур цикл 
	 	Результат.Добавить(Эл.ссылка)
	КонецЦикла;
	
	Возврат результат;
 КонецФункции
 
Функция ПолучитьСтрокуДляВыгрузки(ВыборкаСтрок)
	
	Ц = 0;
	
	Пока Ц < ВыборкаСтрок.Количество() Цикл
		
		ТекСтрока = ВыборкаСтрок[ц];
		
		МассивПодчиненныхДокументов=	Новый Массив();
		МассивРодительскихДокументов=	Новый Массив();
		
		Если ЗначениеЗаполнено(ТекСтрока.ВнешняяПечатнаяФорма) Тогда 
			Возврат ТекСтрока;
		ИначеЕсли МассивПодчиненныхДокументов.Количество() = 0  Тогда 
			МассивПодчиненныхДокументов= 	ПолучитьМассивСсылок(Модуль_РаботаССерверомДиадок.ПолучитьМассивПодчиненныхДокументов(ТекСтрока.Документ, ТекСтрока.DocumentType, ТекСтрока.ДокументОснованиеДляУПДСчфДоп));
			МассивРодительскихДокументов= 	ПолучитьМассивСсылок(Модуль_РаботаССерверомДиадок.ПолучитьМассивРодительскихДокументов(ТекСтрока.Документ, ТекСтрока.DocumentType));
		КонецЕсли;
		
		Если 	ДокументыЕстьВТекущихЗаданияхНаОтправку(МассивПодчиненныхДокументов)
			ИЛИ ДокументыЕстьВТекущихЗаданияхНаОтправку(МассивРодительскихДокументов)
			ИЛИ Документ_ЕстьВТекущихЗаданияхНаОтправку(ТекСтрока.Документ) Тогда 
			
			Ц = Ц + 1;
		Иначе 
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла;	 
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьПараметрыОтправкиНаСогласование(Организация, ResolutionRequestType)
	
	НайденныеПараметрыОтправки=	КэшированныеПараметрыОтправки.НайтиСтроки(Новый Структура("Организация", Организация));
	Если НайденныеПараметрыОтправки.Количество() = 0 Тогда
		Organization=		Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(Организация);
		UserPermissions= 	Organization.GetUserPermissions();
		Если UserPermissions.CanRequestResolutions Тогда
			Если Organization.GetUsers().count = 0 Тогда
				СообщитьОНевозможностиОтправкиДокумента("В организации " + Организация.Наименование + " нет пользователей с правом " + ?(ResolutionRequestType = "ApprovementRequest", "согласования", "подписи"));
				Возврат Неопределено;
			Иначе
				ПараметрыОтправкиНаСогласование=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(Организация, Organization, ResolutionRequestType, "ГрупповаяПередачаНаОбработку");
				Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
					НовыеКэшированныеПараметрыОтправки=							КэшированныеПараметрыОтправки.Добавить();
					НовыеКэшированныеПараметрыОтправки.Организация=				Организация;
					НовыеКэшированныеПараметрыОтправки.ResolutionRequestType=	ResolutionRequestType;
					НовыеКэшированныеПараметрыОтправки.ПараметрыОтправки=		ПараметрыОтправкиНаСогласование;
					Возврат ПараметрыОтправкиНаСогласование;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстОшибкиПодписания=	"У пользователя в организации " + Организация + " отсутствует право передачи на подпись или согласование.";
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ПараметрыОтправкиНаСогласование=	НайденныеПараметрыОтправки.Получить(0).ПараметрыОтправки;
		Возврат ПараметрыОтправкиНаСогласование;
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьИнформациюОСпискеДополнительныхВПФ(Документ)
	
	МассивДополинтельныхВПФ = Новый Массив;
	ВыборкаСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Документ", Документ));
	Для каждого стр из ВыборкаСтрок цикл 
		Если ЗначениеЗаполнено(стр.ВнешняяПечатнаяФорма) Тогда
			МассивДополинтельныхВПФ.Добавить(стр.ВнешняяПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДополинтельныхВПФ.Количество()>0 Тогда
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ЗафиксироватьСписокДополинтельныхВПФПоДокументу(Документ, МассивДополинтельныхВПФ);
	КонецЕсли;	
	
КонецФункции	

Процедура ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента()
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента");
	ОшибокНеВозникло = ОбработатьВыполненныеЗадания(Истина);
	
	Если ОшибокНеВозникло = Ложь Тогда
		Возврат;
	ИначеЕсли МассивЗаданийОтправкиПакета.Количество() >= МаксимальноеКоличествоОдновременныхЗаданий Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ЗаблокированныеДокументы = Неопределено Тогда
		ЗаблокированныеДокументы = Новый Соответствие;
	КонецЕсли;
		
	ВыборкаСтрок = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Вкл, ПропускатьПриВыгрузке", Истина, Ложь));
	Если Выборкастрок.Количество() > 0 Тогда
		Строка = ПолучитьСтрокуДляВыгрузки(ВыборкаСтрок);
		Если Строка = Неопределено Тогда
			ЗапуститьИтерациюВыгрузки();
		Иначе
			Если ОтправкаДокументаНаСогласование Тогда
				ПараметрыОтправкиНаСогласование = ПолучитьПараметрыОтправкиНаСогласование(Строка.Документ.Организация, ResolutionRequestType);
				Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
					ЗакрыватьФорму = Ложь;
					ПодключитьОбработчикОжидания("КоманднаяПанельФинализироватьОтправку", 0.1, Истина);
					Возврат;
				КонецЕсли;
			Иначе 	
				ПараметрыОтправкиНаСогласование = Неопределено;
			КонецЕсли;
		
			Попытка
				
				Элементыформы.НадписьСтатус.Значение 	= "Подготовка пакета документов";
								
				ПараметрыSendTask =	Новый Структура();
				
				//Заполняем параметры одинаковые для всего пакета
				ПараметрыSendTask.Вставить("Получатель", 						?(ЗначениеЗаполнено(Строка.Грузополучатель), Строка.Грузополучатель, Строка.Покупатель));
				ПараметрыSendTask.Вставить("CounteragentID", 					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(ПараметрыSendTask.Получатель));
				ПараметрыSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
				ПараметрыSendTask.Вставить("ParentDocumentId", 					ParentID);
				ПараметрыSendTask.Вставить("IdОтправленого", 					"");
				ПараметрыSendTask.Вставить("Организация", 						Строка.Документ.Организация);
				
				ГрузополучательСсылка = Модуль_ИнтеграцияОбщий.ПолучитьГрузополучателяПоДокументу(Строка.Документ);
				ПараметрыSendTask.Вставить("Грузополучатель",					ГрузополучательСсылка);
				
				МассивСтрокДляВыгрузки = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("Вкл, ПропускатьПриВыгрузке, ПервичныйИдентификаторПакета", Истина, Ложь, Строка.ПервичныйИдентификаторПакета));
				
				МассивДокументовПакета = Новый Массив;
				ЗаполнитьМассивДокументовПакета(МассивДокументовПакета, МассивСтрокДляВыгрузки);
											
				ПараметрыSendTask.Вставить("МассивДокументовПакета", 			МассивДокументовПакета);
				
				ДобавитьСертификатыДляШифрования(ПараметрыSendTask);
								
				ЗаполненныйSendTask = Модуль_РаботаССерверомДиадок.ПолучитьЗаполненныйPackageSendTask(ПараметрыSendTask, ТаблицаСоответствияCustomIdСсылке1С);	
				
				ПрерватьОтправку = Ложь;
				
				Для каждого СтрокаНаОтправку из МассивДокументовПакета Цикл
					
					ТекущаяБлокировка = Неопределено;
					Если НЕ ЗаблокированныеДокументы[СтрокаНаОтправку.Документ] = Неопределено Тогда 
						ТекущаяБлокировка = ЗаблокированныеДокументы.Получить(СтрокаНаОтправку.Документ);						
					КонецЕсли;	
					
					ЗаблокированныйОбъект = Модуль_РаботаССерверомДиадок.ЗаблокироватьДокументПриВыгрузкеПакетаВДиадок(СтрокаНаОтправку.Документ, СтрокаНаОтправку.DocumentType, СтрокаНаОтправку.ВнешняяПечатнаяФорма, ТекущаяБлокировка);
					Если НЕ ЗаблокированныйОбъект = Неопределено Тогда
						ЗаблокированныеДокументы.Вставить(СтрокаНаОтправку.Документ, ЗаблокированныйОбъект);
					КонецЕсли;					
					
					Если ЗначениеЗаполнено(СтрокаНаОтправку.ВнешняяПечатнаяФорма) = Истина Тогда
						Если НЕ ОтправлятьВПФБезРТУ() Тогда
							
							//разрешаем отправку ВПФ, если док основание либо в пакете, либо уже был отправлен ранее
							Если ЗначениеЗаполнено(СтрокаНаОтправку.ДокументОснованиеДляУПДСчфДоп) Тогда
								МассивДоковОснований= ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("ДокументСсылкаВ1С, ЭтоВПФ", СтрокаНаОтправку.ДокументОснованиеДляУПДСчфДоп, Ложь));
							Иначе
								МассивДоковОснований= ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("ДокументСсылкаВ1С, ЭтоВПФ", СтрокаНаОтправку.Документ, Ложь));
							КонецЕсли;
							
							Если МассивДоковОснований.Количество() = 0 Тогда
								IDДокументаОснования = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(СтрокаНаОтправку.Документ);
								Если ЗначениеЗаполнено(IDДокументаОснования) = Ложь Тогда
									ПрерватьОтправку = Истина;	
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						ЗаписатьИнформациюОСпискеДополнительныхВПФ(СтрокаНаОтправку.Документ);
					КонецЕсли;	
					
				КонецЦикла;
								
				Если НЕ ПрерватьОтправку Тогда                                                                                                                                   
					
					Элементыформы.НадписьСтатус.Значение = "Отправка пакета документов";
										
					AsyncTask =	Модуль_РаботаССерверомДиадок.ВыполнитьАсинхроннуюОтправкуПакета(ЗаполненныйSendTask.SendTask, ЗаполненныйSendTask.Organization, ТаблицаСоответствияCustomIdСсылке1С, ЗаблокированныеДокументы);
					
					Для каждого СтрокаВыгрузки из МассивСтрокДляВыгрузки Цикл
						СтрокаВыгрузки.ПропускатьПриВыгрузке = Истина;
					КонецЦикла;
					
					МассивЗаданийОтправкиПакета.Добавить(Новый Структура("AsyncTask, OrganizationId, МассивСтрок, ПараметрыОтправкиНаСогласование", AsyncTask, ЗаполненныйSendTask.Organization.id, МассивСтрокДляВыгрузки, ПараметрыОтправкиНаСогласование));
					
				Иначе
					Для Каждого СтрокаНаОтправку из МассивСтрокДляВыгрузки Цикл
						СтрокаНаОтправку.ПропускатьПриВыгрузке = Истина;
					КонецЦикла;
				КонецЕсли;
								
				ЗапуститьИтерациюВыгрузки();
				
			Исключение
				
				ДанныеОшибки = ОписаниеОшибки();
				
				Если Найти(ДанныеОшибки, "<Structure")>0 Тогда
					//возвращается структура сериализованная в xml
					ДанныеОшибки = Сред(ДанныеОшибки, Найти(ДанныеОшибки, "<Structure"), СтрДлина(ДанныеОшибки));
					
					СтруктураОшибки 	= ДесериализоватьДанные(ДанныеОшибки); 
					ТекстОшибки 		= СтруктураОшибки.СписокОшибок;
					ДокументИнициатор 	= СтруктураОшибки.ДокументСсылка;
				Иначе
					//возвращается обычная строка
					ТекстОшибки 		= ДанныеОшибки;
					ДокументИнициатор 	= Неопределено;	
				КонецЕсли;
												
				ОбработатьОшибку(МассивСтрокДляВыгрузки, ТекстОшибки, ДокументИнициатор);
				
			КонецПопытки	
		КонецЕсли;
	Иначе	
		КоманднаяПанельФинализироватьОтправку();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивДокументовПакета(МассивДокументовПакета, МассивСтрокДляВыгрузки);
	
	Для Каждого СтрокаСпискаДляВыгрузки из МассивСтрокДляВыгрузки Цикл
					
		СтруктураПараметров= ПолучитьСтруктуруПараметровДляОтправкиПакета();
							
		СтруктураПараметров.Вкл= 					СтрокаСпискаДляВыгрузки.Вкл;
		СтруктураПараметров.DocumentType= 			СтрокаСпискаДляВыгрузки.DocumentType;
		СтруктураПараметров.ToDepartmentId= 		СтрокаСпискаДляВыгрузки.ToDepartmentID;
		СтруктураПараметров.ВыгружатьExel= 			СтрокаСпискаДляВыгрузки.ВыгружатьEXEL;
		СтруктураПараметров.CustomDocumentId= 		СтрокаСпискаДляВыгрузки.CustomDocumentId;
		СтруктураПараметров.Id= 					СтрокаСпискаДляВыгрузки.Id;
		
		СтруктураПараметров.Документ= 				СтрокаСпискаДляВыгрузки.Документ;
		СтруктураПараметров.ТипДокумента= 			СтрокаСпискаДляВыгрузки.ТипДокумента;
		СтруктураПараметров.ВидДокумента= 			СтрокаСпискаДляВыгрузки.ВидДокумента;
		СтруктураПараметров.ЭтоТестовыйДокумент= 	СтрокаСпискаДляВыгрузки.ЭтоТестовыйДокумент;
		СтруктураПараметров.ТребуетсяНомерЗаказа= 	СтрокаСпискаДляВыгрузки.ТребуетсяНомерЗаказа;
		СтруктураПараметров.НомерЗаказа= 			СтрокаСпискаДляВыгрузки.НомерЗаказа;
		СтруктураПараметров.ДопСведения= 			СтрокаСпискаДляВыгрузки.ДопСведения;
		СтруктураПараметров.ВнешняяПечатнаяФорма= 	СтрокаСпискаДляВыгрузки.ВнешняяПечатнаяФорма;
		СтруктураПараметров.ФункцияУПД=             СтрокаСпискаДляВыгрузки.ФункцияУПД;
		
		СтруктураПараметров.Отправитель=            СтрокаСпискаДляВыгрузки.Продавец;
		СтруктураПараметров.Получатель= 			?(ЗначениеЗаполнено(СтрокаСпискаДляВыгрузки.Грузополучатель), СтрокаСпискаДляВыгрузки.Грузополучатель, СтрокаСпискаДляВыгрузки.Покупатель);
		
		СтруктураПараметров.ДокументОснованиеДляУПДСчфДоп= СтрокаСпискаДляВыгрузки.ДокументОснованиеДляУПДСчфДоп;
									
		МассивДокументовПакета.Добавить(СтруктураПараметров);
					
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСертификатыДляШифрования(ПараметрыSendTask)
	
	Если НастройкиШифрования = Неопределено Тогда
		НастройкиШифрования = Новый Соответствие;
	КонецЕсли;
	
	ШифроватьДокументы = НастройкиШифрования[ПараметрыSendTask.Организация];
	Если ШифроватьДокументы = Неопределено Тогда
		ШифроватьДокументы = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ПараметрыSendTask.Организация, "ДиадокШифроватьДокументы", "");
		НастройкиШифрования.Вставить(ПараметрыSendTask.Организация, ШифроватьДокументы);
	КонецЕсли;
	
	ШифроватьДокументыКонтрагент = НастройкиШифрования[ПараметрыSendTask.Получатель];
	Если ШифроватьДокументыКонтрагент = Неопределено Тогда
		ШифроватьДокументыКонтрагент = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ПараметрыSendTask.Получатель, "ДиадокШифроватьДокументыКонтрагент", "");
		НастройкиШифрования.Вставить(ПараметрыSendTask.Получатель, ШифроватьДокументыКонтрагент);
	КонецЕсли;
	
	Если ШифроватьДокументыКонтрагент = "ДА" ИЛИ (ШифроватьДокументы = "ДА" И ШифроватьДокументыКонтрагент <> "НЕТ") Тогда
		
		Если СертификатыОрганизаций = Неопределено Тогда
			СертификатыОрганизаций = Новый Соответствие;
		КонецЕсли;
		
		ПараметрыSendTask.Вставить("СертификатыДляШифрования", Новый Структура("СертификатыОтправителя, СертификатыПолучателя"));
		
		// Сертификаты отправителя
		МассивСертификатов = СертификатыОрганизаций[ПараметрыSendTask.Организация];
		Если МассивСертификатов = Неопределено Тогда
			МассивСертификатов = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СертификатыОрганизации(ПараметрыSendTask.Организация);
			СертификатыОрганизаций.Вставить(ПараметрыSendTask.Организация, МассивСертификатов);
		КонецЕсли;
		
		ПараметрыSendTask.СертификатыДляШифрования.СертификатыОтправителя = МассивСертификатов;
		
		// Сертификаты получателя
		МассивСертификатов = СертификатыОрганизаций[ПараметрыSendTask.CounteragentID];
		Если МассивСертификатов = Неопределено Тогда
			МассивСертификатов = ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СертификатыОрганизации(ПараметрыSendTask.Организация, ПараметрыSendTask.CounteragentID);
			СертификатыОрганизаций.Вставить(ПараметрыSendTask.CounteragentID, МассивСертификатов);
		КонецЕсли;
		
		ПараметрыSendTask.СертификатыДляШифрования.СертификатыПолучателя = МассивСертификатов;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
//// обработка результатов выгрузки документов
/////////////////////////////////////////////////////////////////////////////////

Процедура ОбработатьОшибку(МассивСтрок, ТекстОшибки, ДокументИнициатор=Неопределено)
	
	ФормаОшибки = ПолучитьФорму("ФормаОбработкиОшибкиВыгрузкиДокумента");
	 
	Если НЕ Найти(ТекстОшибки, "Документ уже выгружен")=0 Тогда
		
		Для Каждого СтрокаВыгрузки Из МассивСтрок Цикл
			СтрокаВыгрузки.ID 	= "отпр";
			СтрокаВыгрузки.вкл 	= Ложь;
		КонецЦикла;
		Если МассивСтрок.Количество()>1 Тогда
			ОтображаемыйТекст = "Среди документов пакета есть уже отправленные.";
			ОтображаемыйТекст = ОтображаемыйТекст + Символы.ПС + Символы.ПС + "Пакет:";
			Для Каждого СтрокВыгрузки Из МассивСтрок Цикл
				ОтображаемыйТекст = ОтображаемыйТекст + Символы.ПС + " - " + ?(ЗначениеЗаполнено(СтрокВыгрузки.ВнешняяПечатнаяФорма), СтрокВыгрузки.ВнешняяПечатнаяФорма, СтрокВыгрузки.Документ) + ",";
			КонецЦикла;
		Иначе
			ПроблеммныйДокумент = МассивСтрок[0].Документ;
			ОтображаемыйТекст = "Документ " + ПроблеммныйДокумент + " уже отправлен";
		КонецЕсли;
		
		ФормаОшибки.ТекстОшибки 	 = ОтображаемыйТекст;
		ФормаОшибки.РежимОтображения = "ТолькоКнопкиПропуститьПрекратить";
		
	ИначеЕсли Найти(ТекстОшибки, "<head>") = 0 Тогда
		
		Если МассивСтрок.Количество()>1 Тогда
			
			ОтображаемыйТекст = "Произошла ошибка при выгрузке пакета, состоящего из документов:";
			Для Каждого СтрокВыгрузки Из МассивСтрок Цикл
				ОтображаемыйТекст = ОтображаемыйТекст + Символы.ПС + " - " + ?(ЗначениеЗаполнено(СтрокВыгрузки.ВнешняяПечатнаяФорма), СтрокВыгрузки.ВнешняяПечатнаяФорма, СтрокВыгрузки.Документ) + ",";
			КонецЦикла;
			ОтображаемыйТекст = ОтображаемыйТекст + Символы.ПС + ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ТекстОшибки);
						
		Иначе
			
			ОтображаемыйТекст = "При выгрузке документа "+МассивСтрок[0].Документ+" произошла ошибка: 
			|"+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ТекстОшибки);
			
		КонецЕсли;
		
		Если Найти(ОтображаемыйТекст, "Не настроены параметры подписания!") > 0 Тогда
			
			ОтображаемыйТекст = ОтображаемыйТекст + Символы.ПС + Символы.ПС + "Для отправки документов заполните параметры подписания.";
			
			
			
			ФормаОшибки.РежимОтображения = "КнопкаЗаполнитьПараметрыПодписанияУПД";
			ФормаОшибки.ДополнительныеПараметры = Новый Структура;
			ФормаОшибки.ДополнительныеПараметры.Вставить("Исходящие",		 	Истина);
			ФормаОшибки.ДополнительныеПараметры.Вставить("ДляКорректировки", 	МассивСтрок[0].ФункцияУПД = "КСЧФ"
																			  	ИЛИ МассивСтрок[0].ФункцияУПД = "ДИС"
																			  	ИЛИ МассивСтрок[0].ФункцияУПД = "КСЧФДИС");
			ФормаОшибки.ДополнительныеПараметры.Вставить("Организация",		 	МассивСтрок[0].Продавец);
			
		КонецЕсли;
		
		ФормаОшибки.ТекстОшибки = ОтображаемыйТекст;
				
	Иначе
		
		ФормаОшибки.ДополнительныеПараметры = Новый Структура;
		ФормаОшибки.ДополнительныеПараметры.Вставить("МассивДокументовПакета", Новый Массив);
		ЗаполнитьМассивДокументовПакета(ФормаОшибки.ДополнительныеПараметры.МассивДокументовПакета, МассивСтрок);
		
		Если МассивСтрок.Количество() > 1 Тогда
			
			ТекстОшибки = "При формировании файла для пакета документов обнаружены ошибки." + Символы.ПС + Символы.ПС + "Откройте пакет документов для получения подробной информации.";
			
			ФормаОшибки.РежимОтображения = "КнопкаОткрытьПакет";
			ФормаОшибки.ДополнительныеПараметры.Вставить("Документ", ДокументИнициатор);
			
		Иначе
			
			ТекстОшибки = "При формировании файла для " + МассивСтрок[0].Документ + " обнаружены ошибки." + Символы.ПС + Символы.ПС + "Перейдите в карточку документа для получения более подробной информации.";
			
			ФормаОшибки.РежимОтображения = "КнопкаОткрытьДокумент";
			ФормаОшибки.ДополнительныеПараметры.Вставить("Документ"	   , МассивСтрок[0].Документ);
			ФормаОшибки.ДополнительныеПараметры.Вставить("ТипДокумента", МассивСтрок[0].ТипДокумента);
			
		КонецЕсли;
		
		ФормаОшибки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;	
	
	// ошибка платформы 8.3.9.1850
	ОтключитьОбработчикОжидания("ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента");
	
	Результат = ФормаОшибки.ОткрытьМодально();
	
	Если Результат = 1 Тогда //повторить 
		
		Для каждого Строка из МассивСтрок Цикл
			Строка.ПропускатьПриВыгрузке = Ложь;
		КонецЦикла;
		ЗапуститьИтерациюВыгрузки();
		
	ИначеЕсли Результат = 2 Тогда //пропустить 
		
		Для каждого Строка из МассивСтрок Цикл
			Строка.ПропускатьПриВыгрузке = Истина;
		КонецЦикла;
		
		ЗакрыватьФорму 		= Ложь;
		КоличествоВыгружено = КоличествоВыгружено + 1;
		
		ЗапуститьИтерациюВыгрузки();
		
	ИначеЕсли Результат = Неопределено Тогда //прекратить
		
		ЗакрыватьФорму = Ложь; 
		ПодключитьОбработчикОжидания("КоманднаяПанельФинализироватьОтправкуПослеОшибки", 0.1, Истина);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда // документы были отправлены из формы визуализации
		
		ЗакрыватьФорму = Ложь;
		
		Для Каждого Document из Результат Цикл
			DocumentId 			= Document.DocumentId;
			CustomDocumentId 	= Document.CustomDocumentId;
			
			Для каждого Строка из МассивСтрок Цикл
				Если Строка.CustomDocumentId = CustomDocumentId Тогда
					Строка.вкл	= Ложь;
					Строка.ID 	= DocumentId;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		КоличествоВыгружено = КоличествоВыгружено + 1;
		
		ЗапуститьИтерациюВыгрузки();
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОбработатьРезультатОтправкиПакетаДокументов(ЗаданиеНаОтправку, ВыводитьОшибки)
	
	Попытка
		
		МассивСтрокСпискаВыгрузки = ЗаданиеНаОтправку.МассивСтрок;
				
		РезультатОтправки 	= ЗаданиеНаОтправку.AsyncTask.Result;
		PackageDocuments 	= РезультатОтправки.Documents;
		
		Модуль_РаботаССерверомДиадок.ОбработатьОтправленныйПакетДокументов(РезультатОтправки, ТаблицаСоответствияCustomIdСсылке1С, ЗаданиеНаОтправку.ПараметрыОтправкиНаСогласование, ЗаблокированныеДокументы);
		
		Для Каждого СтрокаСпискаВыгрузки Из МассивСтрокСпискаВыгрузки Цикл
			СтрокаСпискаВыгрузки.Вкл = Ложь;
			DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(СтрокаСпискаВыгрузки.Документ);
			СтрокаСпискаВыгрузки.Id = DocumentId;
		КонецЦикла;
				
		КоличествоВыгружено = КоличествоВыгружено + 1;
        	
		ЗапуститьИтерациюВыгрузки();

	Исключение
		Если ВыводитьОшибки Тогда
			ОтключитьОбработчикОжидания("ОбработчикОжиданияЗапуститьВыгрузкуСледующегоДокумента");
			
			ТекстОшибки = ОписаниеОшибки();
			ОбработатьОшибку(МассивСтрокСпискаВыгрузки, ТекстОшибки);
			
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьВыполненныеЗадания(выводитьОшибки)
	
	ц = 0;
	Пока ц < МассивЗаданийОтправкиПакета.Количество() Цикл 
		
		Если МассивЗаданийОтправкиПакета[ц].AsyncTask.isCompleted Тогда
			
			Результат = ОбработатьРезультатОтправкиПакетаДокументов(МассивЗаданийОтправкиПакета[ц], ВыводитьОшибки);
			МассивЗаданийОтправкиПакета.Удалить(ц);
			
			Если НЕ Результат И ВыводитьОшибки Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			ц = ц + 1;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции 


Процедура КоманднаяПанельФинализироватьОтправку()
	
	Если МассивЗаданийОтправкиПакета.Количество()=0 Тогда
			
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
		 
		Если ЗакрыватьФорму Тогда
			Оповестить("ОбновитьФормуДиадок", , ЭтаФорма);
			Если ЭтаФорма.Открыта() Тогда
				Этаформа.Закрыть();
			КонецЕсли;	
		КонецЕсли;	

	Иначе
		
		Результат = ОбработатьВыполненныеЗадания(Истина);
		Если результат Тогда 
			ПодключитьОбработчикОжидания("КоманднаяПанельФинализироватьОтправку", 0.1, Истина);
		Иначе 	
			ПодключитьОбработчикОжидания("КоманднаяПанельФинализироватьОтправкуПослеОшибки", 0.1, Истина);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФинализироватьОтправкуПослеОшибки()
	
	ОбработатьВыполненныеЗадания(Ложь);
	
	Если МассивЗаданийОтправкиПакета.Количество()=0 Тогда 
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
	Иначе
		Результат = ОбработатьВыполненныеЗадания(Ложь);
		ПодключитьОбработчикОжидания("КоманднаяПанельФинализироватьОтправкуПослеОшибки", 0.1, Истина);
	КонецЕсли;
	
 КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ОбновитьВклВсе()
	
	ВклВсе= СписокДокументовДляВыгрузки.Количество() > 0;
	
	Для Каждого СтрокаТаблицы ИЗ СписокДокументовДляВыгрузки Цикл
		Если НЕ СтрокаТаблицы.Вкл Тогда
			ВклВсе= Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВклВсеПриИзменении(Элемент)
	
	ДокументовСОшибками = 0;
	Для каждого СтрокаСписка Из ЭлементыФормы.СписокДокументовДляВыгрузки.Значение Цикл
		Если ЭлементыФормы.СписокДокументовДляВыгрузки.ПроверитьСтроку(СтрокаСписка) = Истина Тогда
			Если ВклВсе И НЕ (ПустаяСтрока(СтрокаСписка.ID) или (найти(СтрокаСписка.ID, "усл")>0)) Тогда
			Иначе
				СтрокаСписка.Вкл = ВклВсе;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НадписьПодвалОтправкаИз1С_СкрытьПоказать();
	
КонецПроцедуры

Функция КомментарийПроТестовыйДокумент(СтрокаДанных)
	Если СтрокаДанных.ЭтоТестовыйДокумент Тогда
		Возврат "Электронный документ будет тестовым.";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСертификата" Тогда 
		
		ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "ДокументОтправлен" Тогда 
		
		//Параметр - Таблица значений
		//колонки:
		//	ДокументСсылка  - Ссылка на документ 1С
		//	ТипДокумента 	- Строка
		
		ПервичныйИдентификаторПакета = Неопределено;
				
		Для Каждого Строка Из СписокДокументовДляВыгрузки Цикл
			
			МассивНайденныхСтрок = Параметр.НайтиСтроки(Новый Структура("ДокументСсылка", Строка.Документ));
			Для Каждого НайденнаяСтрока из МассивНайденныхСтрок Цикл
				Если Найти(Строка.ТипДокумента, НайденнаяСтрока.ТипДокумента)>0 Тогда
					Строка.ID  = "отпр";
					Строка.вкл = Ложь;
					Если Строка.ЭтоПакет Тогда
						ПервичныйИдентификаторПакета = Строка.ПервичныйИдентификаторПакета;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
		КонецЦикла;
		
		Если НЕ ПервичныйИдентификаторПакета = Неопределено Тогда
			
			//1. отделим отправленный пакет от не отправленных документов
			МассСтрокБывшегоПакета = СписокДокументовДляВыгрузки.НайтиСтроки(Новый Структура("ПервичныйИдентификаторПакета", ПервичныйИдентификаторПакета));
			МинимальныйНомерСтроки = МассСтрокБывшегоПакета[0].НомерСтроки;
			
			Для каждого СтрокаБывшегоПакета из МассСтрокБывшегоПакета Цикл
				
				Если СтрокаБывшегоПакета.ID = "отпр" И СтрокаБывшегоПакета.вкл = Ложь Тогда // это реально отправленный пакет
					
					Дэльта = СтрокаБывшегоПакета.НомерСтроки - МинимальныйНомерСтроки;
					Если Дэльта=0 Тогда
						МинимальныйНомерСтроки = МинимальныйНомерСтроки + 1;	
					ИначеЕсли Дэльта>0 Тогда
						//соответственно надо двигать строку наверх на количество позиций равной Дэльта
						СписокДокументовДляВыгрузки.Сдвинуть(СтрокаБывшегоПакета, -1 * Дэльта);
						МинимальныйНомерСтроки = СтрокаБывшегоПакета.НомерСтроки + 1;
					КонецЕсли;
				Иначе
					// еще не отправлен
					СтрокаБывшегоПакета.ИндексИконкиПакета = 0;
					СтрокаБывшегоПакета.ЭтоПакет = Ложь;
					СтрокаБывшегоПакета.ПервичныйИдентификаторПакета = НовыйИдентификаторПакета();
					
				КонецЕсли;
				
			КонецЦикла;
			
			СписокДокументовДляВыгрузки_ПервичныйИдентификаторПакета_Заполнить_ИндексИконкиПакета(ПервичныйИдентификаторПакета);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель2Комментарий(Кнопка)
	ТекСтрока = ЭлементыФормы.ТаблицаФайлыДляОтправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Предупреждение("Выберите файл",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	НовыйКомментарий = ПолучитьФорму("ФормаВводаКомментария").ИзменитьКомментарий(ТекСтрока.Комментарий);
	Если НовыйКомментарий <> Неопределено Тогда
		ТекСтрока.Комментарий = СокрЛП(НовыйКомментарий);
	КонецЕсли;
КонецПроцедуры


Процедура ТаблицаФайлыДляОтправкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ= Истина;
	
	ТаблицаФайлыДляОтправки_ДобавитьФайлы();
	
КонецПроцедуры


Процедура ОрганизацияОтправительНачалоВыбора(Элемент, СтандартнаяОбработка)
	стандартнаяОбработка = Ложь; 
	
	рез = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьОрганизациюИзСопоставленныхДиадок( ПолучитьЗначениеОрганизации() );
	Если рез <>Неопределено Тогда
		ОрганизацияОтправитель = рез;
		КонтрагентПредставление = "";
		CounteragentId = "";
		ОбновитьГотовностьКОтправке();
	КонецЕсли;	
КонецПроцедуры

Процедура КонтрагентПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ОрганизацияОтправитель) = Ложь Тогда
		предупреждение("Выберите организацию", ,НаименованиеСистемы);
		Возврат
	КонецЕсли;	
	стКонтрагент = ПолучитьФорму("ФормаВыбораКонтрагентаДиадок", ЭтаФорма).ВыбратьКонтрагентаДиадок(CounteragentId, ОрганизацияОтправитель, "IsMyCounteragent");
	Если стКонтрагент <> Неопределено Тогда
		КонтрагентПредставление = стКонтрагент.Наименование;
		CounteragentId = стКонтрагент.ID;
	КонецЕсли;
	ОбновитьГотовностьКОтправке();
КонецПроцедуры

Процедура ОбновитьГотовностьКОтправке()
	
	Если ЗначениеЗаполнено(ОрганизацияОтправитель) И НЕ ПустаяСтрока(CounteragentId) Тогда
		
		Organization= Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ОрганизацияОтправитель);
		Counteragent= Organization.GetCounteragentById(CounteragentId);
		
		ЭтоТестовый = Organization.IsTest ИЛИ Counteragent.IsTest;
		
		Если НЕ ЭтоТестовый И Organization.AuthenticateType <> "Certificate" Тогда
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПодвалОтправкаСДиска, РежимСверткиЭлементаУправления.Нет, Ложь);
			
			ЭлементыФормы.НадписьПодвалОтправкаСДиска.Заголовок= "Отправка юридически значимого документа возможна только по сертификату!";
			ЭлементыФормы.НадписьПодвалОтправкаСДиска.ЦветФона= Новый Цвет;
			
			ЭлементыФормы.КоманднаяПанель3.Кнопки.ОтправитьФайлы.Доступность= Ложь;
			
		ИначеЕсли ЭтоТестовый Тогда
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПодвалОтправкаСДиска, РежимСверткиЭлементаУправления.Нет, Ложь);
			
			ЭлементыФормы.НадписьПодвалОтправкаСДиска.Заголовок= "Отправляемые файлы будут тестовыми";
			ЭлементыФормы.НадписьПодвалОтправкаСДиска.ЦветФона= WebЦвета.Желтый;
			
			ЭлементыФормы.КоманднаяПанель3.Кнопки.ОтправитьФайлы.Доступность= Истина;
			
		Иначе
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПодвалОтправкаСДиска, РежимСверткиЭлементаУправления.Низ, Ложь);
			ЭлементыФормы.КоманднаяПанель3.Кнопки.ОтправитьФайлы.Доступность= Истина;
		КонецЕсли;
	Иначе
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельПодвалОтправкаСДиска, РежимСверткиЭлементаУправления.Низ, Ложь);
		ЭлементыФормы.КоманднаяПанель3.Кнопки.ОтправитьФайлы.Доступность= Истина;
	КонецЕсли;
	
КонецПроцедуры

// отправка нф 
Процедура ОтправитьНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель)  Тогда
		Предупреждение("Выберите отправителя.",,НаименованиеСистемы);
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(CounteragentId) Тогда
		Предупреждение("Выберите получателя.",,НаименованиеСистемы);
		Возврат;
	КонецЕсли;
		
	Если ТаблицаФайлыДляОтправки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтправкиНаСогласование=	Неопределено;
	
	ДанныеФайловДляОтправки = Новый Массив;
	Для каждого стр Из ТаблицаФайлыДляОтправки Цикл
		ДанныеФайловДляОтправки.Добавить(Новый Структура("ИмяФайла, ПутьКФайлу, Комментарий", стр.Файл, стр.ПутьКФайлу, стр.Комментарий));
	КонецЦикла;
	
	
	ДокументыОтправлены = Модуль_РаботаССерверомДиадок.ОтправитьНеформализованныеДокументы(ОрганизацияОтправитель, CounteragentId, "", ДанныеФайловДляОтправки, ParentID, НЕ ПараметрыОтправкиНаСогласование = Неопределено, , ЗапрашиватьОтветнуюПодпись);
	Если НЕ ДокументыОтправлены Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();

	Оповестить("ОбновитьФормуДиадок","Неформализованные" , ЭтаФорма);
	
КонецПроцедуры

Процедура ПанельРежимыОтправкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = 0 Тогда
		Заголовок = "Список документов для отправки через "+НаименованиеСистемы+" ("+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПредставлениеПериодаДД(ДатаНачала,датаокончания)+")";
	Иначе
		Заголовок = "Отправка документов с диска через "+НаименованиеСистемы;
	КонецЕсли;
КонецПроцедуры

Процедура Assert(УсловиеКотороеДолжноБытьИстино, ТекстИсключенияЕслиПлохо)
	Если НЕ УсловиеКотороеДолжноБытьИстино Тогда
		ВызватьИсключение ТекстИсключенияЕслиПлохо;
	КонецЕсли;
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Функция ДокументыСвязаны(ПервыйДокумент, ВторойДокумент) 
	Возврат Модуль_ИнтеграцияОбщий.ПервыйДокументСсылаетсяНаВторой(ПервыйДокумент, ВторойДокумент) или Модуль_ИнтеграцияОбщий.ПервыйДокументСсылаетсяНаВторой(ВторойДокумент, ПервыйДокумент)
КонецФункции

Процедура ОбновитьНомерЗаказа()
		ТекущийДокумент = ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные.Документ;
		НомерЗаказа =  ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные.НомерЗаказа;
		для каждого  стр из СписокДокументовДляВыгрузки цикл 
			Если (стр.НомерЗаказа<>НомерЗаказа) И ДокументыСвязаны(ТекущийДокумент, стр.Документ) Тогда
				стр.НомерЗаказа = НомерЗаказа;
				Если стр.ТипДокумента = "Счет-фактура"  Тогда 
					стр.ДопСведения = "номер_заказа:"+СокрЛП(НомерЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	

КонецПроцедуры

Процедура ОбновитьКлючиЗначения()
	
	ТекущиеДанные= ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные;
	Для каждого СтрокаТаблицы Из СписокДокументовДляВыгрузки Цикл
		Если СтрокаТаблицы.DocumentType = ТекущиеДанные.DocumentType 
			И СтрокаТаблицы.Документ.Организация = ТекущиеДанные.Документ.Организация 
			И СтрокаТаблицы.Документ.Контрагент = ТекущиеДанные.Документ.Контрагент Тогда
			СтрокаТаблицы.ДопСведения = ТекущиеДанные.ДопСведения;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура КоманднаяПанель2ПросмотрФайла(Кнопка)
	
	Если НЕ ЭлементыФормы.ТаблицаФайлыДляОтправки.ТекущиеДанные = Неопределено Тогда
		ЗапуститьПриложение(ЭлементыФормы.ТаблицаФайлыДляОтправки.ТекущиеДанные.ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСпискаДокументов()
	
	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").УстановитьОтборТабличнойЧасти(ЭлементыФормы.СписокДокументовДляВыгрузки, ОсновнойОтбор, КэшСпискаДокументовДляВыгрузки, ДополнительныйОтбор);
	
КонецПроцедуры
	
Процедура КоманднаяПанель1КнопкаОтбора(Кнопка)
	
	ФормаНастройкиОтбора=	ПолучитьФорму("ФормаНастройкиОтбора", Этаформа);
	ФормаНастройкиОтбора.НачальныйОтборСтрок=	ЭлементыФормы.СписокДокументовДляВыгрузки.ОтборСтрок;
	ФормаНастройкиОтбора.ИмяСписка=				"СписокДокументовДляВыгрузки";
	
	Результат=	ФормаНастройкиОтбора.ОткрытьМодально();
	
	Если Результат = Истина Тогда
		
		ДополнительныйОтбор=	ФормаНастройкиОтбора.ДополнительныйОтбор;
		ОсновнойОтбор=			ФормаНастройкиОтбора.ОсновнойОтбор;
		
		УстановитьОтборСпискаДокументов();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1ОтключитьОтбор(Кнопка)
	
	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СброситьОтборТабличнойЧасти(ЭлементыФормы.СписокДокументовДляВыгрузки, КэшСпискаДокументовДляВыгрузки);
	ВклВсеПриИзменении("");
	
КонецПроцедуры

Процедура ОбновитьПоложениеФлажковВПриложенииВерсии81()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2") = "ПерваяВерсияМладше"
		ИЛИ Строка(Метаданные.РежимСовместимости) = "Версия8_1" Тогда
		
		ЭлементыФормы.ВклВсе.Лево= 						9;
		ЭлементыФормы.ВклВсе.Верх= 						53;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура КоманднаяПанель3ОтправитьФайлы(Кнопка)
	
	Отказ= Ложь;
	
	ОтправкаФайлов_ПроверитьВозможностьОтправки(Отказ);
	
	Если НЕ Отказ Тогда
		ОтправкаФайлов_ОтправитьФайлы(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Оповестить("ОбновитьФормуДиадок","Неформализованные", ЭтаФорма);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель4ПередатьНаСогласование(Кнопка)
	
	Отказ= Ложь;
	
	ОтправкаФайлов_ПроверитьВозможностьОтправки(Отказ);
	
	Если НЕ Отказ Тогда
		ПараметрыResolutionRequestTask= ПолучитьПараметрыОтправкиНаСогласование(ОрганизацияОтправитель, "ApprovementRequest");
		Отказ= ПараметрыResolutionRequestTask = Неопределено;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОтправкаФайлов_ОтправитьФайлы(Отказ, ПараметрыResolutionRequestTask);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Оповестить("ОбновитьФормуДиадок","Неформализованные", ЭтаФорма);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель4ПередатьНаПодпись(Кнопка)
	
	Отказ= Ложь;
	
	ОтправкаФайлов_ПроверитьВозможностьОтправки(Отказ);
	
	Если НЕ Отказ Тогда
		ПараметрыResolutionRequestTask= ПолучитьПараметрыОтправкиНаСогласование(ОрганизацияОтправитель, "SignatureRequest");
		Отказ= ПараметрыResolutionRequestTask = Неопределено;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ОтправкаФайлов_ОтправитьФайлы(Отказ, ПараметрыResolutionRequestTask);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Оповестить("ОбновитьФормуДиадок","Неформализованные", ЭтаФорма);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


Процедура ОтправкаФайлов_ПроверитьВозможностьОтправки(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияОтправитель)  Тогда
		Сообщить("Не выбран отправитель!", СтатусСообщения.Важное);
		Отказ= Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(CounteragentId) Тогда
		Сообщить("Не выбран получатель!", СтатусСообщения.Важное);
		Отказ= Истина;
	КонецЕсли;	
	
	Если ТаблицаФайлыДляОтправки.Количество()=0 Тогда
		Сообщить("Нет файлов для отправки!", СтатусСообщения.Важное);
		Отказ= Истина;
	КонецЕсли;

	Для Каждого СтрокаТаблицы ИЗ ТаблицаФайлыДляОтправки Цикл
		
		Файл= Новый Файл(СтрокаТаблицы.ПутьКФайлу);
		
		Если НЕ Файл.Существует() Тогда
			Сообщить("Не найден файл!"+Символы.ПС+СтрокаТаблицы.ПутьКФайлу, СтатусСообщения.Важное);
		    Отказ= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправкаФайлов_ОтправитьФайлы(Отказ, ПараметрыResolutionRequestTask= Неопределено)
	
	ПараметрыPackageSendTask= Новый Структура;
	ПараметрыPackageSendTask.Вставить("Организация"  		  , ОрганизацияОтправитель);
	ПараметрыPackageSendTask.Вставить("CounterAgentID"		  , CounteragentId);
	ПараметрыPackageSendTask.Вставить("InitialDocuments"	  , ParentID);
	ПараметрыPackageSendTask.Вставить("DelaySend"	   		  , ПараметрыResolutionRequestTask <> Неопределено);
	ПараметрыPackageSendTask.Вставить("NonformalizedDocuments", Новый Массив);
	
	Если ПараметрыResolutionRequestTask <> Неопределено Тогда
		ПараметрыPackageSendTask.Вставить("ResolutionRequestTask", ПараметрыResolutionRequestTask);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаФайлыДляОтправки Цикл
		
		ПараметрыNonformalizedDocument= Новый Структура("FileName, Path, Comment, NeedRecipientSignature, DocumentDate, CustomDocumentId",
		СтрокаТаблицы.Файл, СтрокаТаблицы.ПутьКФайлу, СтрокаТаблицы.Комментарий, ЗапрашиватьОтветнуюПодпись, ТекущаяДата(), Строка(Новый УникальныйИдентификатор));
		
		Если ЗначениеЗаполнено(ParentID) Тогда
			ПараметрыNonformalizedDocument.Вставить("InitialDocuments", ParentID);
		КонецЕсли;
		
		ПараметрыPackageSendTask.NonformalizedDocuments.Добавить(ПараметрыNonformalizedDocument);
		
	КонецЦикла;
	
	Модуль_РаботаССерверомДиадок.ОтправитьПакетФайлов(ПараметрыPackageSendTask);
	
КонецПроцедуры

Процедура ТаблицаФайлыДляОтправкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Комментарий" Тогда
		КоманднаяПанель2Комментарий("");
	ИначеЕсли Колонка.Имя = "Файл" Тогда
		ЗапуститьПриложение(ЭлементыФормы.ТаблицаФайлыДляОтправки.ТекущиеДанные.ПутьКФайлу);
	ИначеЕсли Колонка.Имя = "ПутьКФайлу" Тогда
		ТаблицаФайлыДляОтправки_ДобавитьФайлы(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаФайлыДляОтправки_ДобавитьФайлы(СтрокаТаблицы= Неопределено)
	
	ДиалогВыбораФайла= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок= "Выбор файлов для отправки";
	ДиалогВыбораФайла.Фильтр= "Все файлы(*.*)|*.*";
	
	Если СтрокаТаблицы = Неопределено Тогда
		ДиалогВыбораФайла.Заголовок= "Выбор файлов для отправки";
		ДиалогВыбораФайла.МножественныйВыбор= Истина;
	Иначе
		ДиалогВыбораФайла.Заголовок= "Выбор файла для отправки";
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
	КонецЕсли;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Для Каждого ПолноеИмяФайла ИЗ ДиалогВыбораФайла.ВыбранныеФайлы Цикл
			
			Файл= Новый Файл(ПолноеИмяФайла);
			
			Если Файл.Размер() > 5*1024*1024 Тогда
				Сообщить("Недопустимый размер файла (более 5МБ)!" + Символы.ПС + ПолноеИмяФайла, СтатусСообщения.Важное);
			Иначе
				
				Если СтрокаТаблицы = Неопределено Тогда
					НоваяСтрока= ТаблицаФайлыДляОтправки.Добавить();
				Иначе
					НоваяСтрока= СтрокаТаблицы;
				КонецЕсли;
			
				НоваяСтрока.Файл=		Файл.Имя;
				НоваяСтрока.ПутьКФайлу= Файл.ПолноеИмя;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьПодвалОтправкаИз1С_СкрытьПоказать()
	
	ТекущиеДанные= ЭлементыФормы.СписокДокументовДляВыгрузки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И (ЗначениеЗаполнено(ТекущиеДанные.ОшибкаОтправки) ИЛИ ТекущиеДанные.ЭтоТестовыйДокумент) Тогда
		
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьПодвалОтправкаИз1С, РежимСверткиЭлементаУправления.Нет, Ложь);
		
		ТекстНадписи= ТекущиеДанные.ОшибкаОтправки;
		
		Если ТекущиеДанные.ЭтоТестовыйДокумент Тогда
			ТекстНадписи= ТекстНадписи + ?(ЗначениеЗаполнено(ТекстНадписи), " ", "") + "Электронный документ будет тестовым.";
		КонецЕсли;
		
		ЭлементыФормы.НадписьПодвалОтправкаИз1С.Заголовок= ТекстНадписи;
		
	Иначе
		УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельНадписьПодвалОтправкаИз1С, РежимСверткиЭлементаУправления.Низ, Ложь);
		ЭлементыФормы.НадписьПодвалОтправкаИз1С.Заголовок= "";
	КонецЕсли;
	
КонецПроцедуры

МаксимальноеКоличествоОдновременныхЗаданий = 10;
ЗапрашиватьОтветнуюПодпись = истина;
НумераторПакетов= 0;