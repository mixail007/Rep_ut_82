
//{ ТЕЛО МОДУЛЯ

	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, ЭтоСФ=Ложь) Экспорт 
		Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда 
			Возврат "без НДС"
		ИначеЕсли ЗначениеЗаполнено(СтавкаНДС)=Ложь Тогда 
			Возврат "";
		Иначе 
			Возврат Строка(СтавкаНДС.Ставка);
		КонецЕсли;	
	КонецФункции 

	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		Возврат дкПолучитьНомерДляПечати(ДокументСсылка);
	КонецФункции

	Функция ЭтоСчетФактуранаАванс(СФ) Экспорт
		Возврат Ложь;
	КонецФункции	

	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт 
		Возврат ДокументСсылка.СуммаДокумента;
	КонецФункции

	Процедура ПерезаполнитьСуммыПоУЕвРублях(СтрокиСчетаФактуры, ТекущееОснование, ДанныеШапки) Экспорт 
		
	КонецПроцедуры

	Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура=Неопределено, ФормированиеСФ=Ложь) Экспорт 
		Возврат Ложь;
	КонецФункции	

	Функция ПолучитьПредставлениеХарактеристикиИСерии(выборка) Экспорт 
		Возврат "";
	КонецФункции

	Функция Документ_Организация(Документ) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Документ_Организация(Документ);
		
	КонецФункции

	Функция Организация_КПП(Организация) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);
		
	КонецФункции

	Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
		
		Результат= Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента");
		
		Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда 
			Результат.ДатаВходящегоДокумента=  ДокСсылка.ВхДокДата;
			Результат.НомерВходящегоДокумента= ДокСсылка.ВхДокНомер;
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
		
		Результат= Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента");
		
		Результат.ДатаВходящегоДокумента=  ДокСсылка.ВхДокДата;
		Результат.НомерВходящегоДокумента= ДокСсылка.ВхДокНомер;
		
		Возврат Результат;
		
	КонецФункции


	Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		Если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.ПоступлениеТоваров") 
			И (ДокСсылка.ВхДокДата <> ДатаВходящегоДокумента 
			ИЛИ ДокСсылка.ВхДокНомер <> НомерВходящегоДокумента) Тогда
			
			Объект= ДокСсылка.ПолучитьОбъект();
			Объект.ВхДокДата=  ДатаВходящегоДокумента;
			Объект.ВхДокНомер= НомерВходящегоДокумента;
			
			Попытка
				Объект.Записать();
				Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
				|у документа: " + докСсылка);
			Исключение
				Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
				|у документа: " + докСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
		
	Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		Если ДокСсылка.ВхДокДата <> ДатаВходящегоДокумента ИЛИ ДокСсылка.ВхДокНомер <> НомерВходящегоДокумента Тогда
			
			Объект= ДокСсылка.ПолучитьОбъект();
			Объект.ВхДокДата=  ДатаВходящегоДокумента;
			Объект.ВхДокНомер= НомерВходящегоДокумента;
			
			Попытка
				Объект.Записать();
				Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
				|у документа: " + докСсылка);
			Исключение
				Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
				|у документа: " + докСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры

	Функция ЭтоУслуга(НоменклатураСсылка) Экспорт
		
		Если НоменклатураСсылка.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции

	Функция ВернутьСсылкуНаНоменклатуру(НоменклатураСсылка) Экспорт
		
		Если ТипЗнч(НоменклатураСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			Возврат НоменклатураСсылка;
		ИначеЕсли ТипЗнч(НоменклатураСсылка) = Тип("СправочникСсылка.Автоработы") Тогда
			Возврат НоменклатураСсылка.Номенклатура;
		Иначе
			Возврат Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
	КонецФункции


	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции

	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат Справочники.ГТД.ПустаяСсылка();
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ

//{ ПОЛУЧЕНИЕ ДАННЫХ

//{ Получить...

	Функция ПолучитьНаименованиеКолонкиКодаТовара() Экспорт
		Возврат "Код"
	КонецФункции

	Функция ПолучитьВалютуРегламентированногоУчета() Экспорт 
		Возврат Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецФункции

	Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт
		Возврат Новый Массив;
	КонецФункции

	Функция ПолучитьНомерГТД(НомерГТД) Экспорт
		
		Возврат ?(значениеЗаполнено(НомерГТД),  ?(типЗнч(НомерГТД)=тип("Строка"), СокрЛП(НомерГТД), сокрЛП(НомерГТД.Наименование)), "");;
		
	КонецФункции

	Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
		Договор = ДокументСсылка.ДоговорВзаиморасчетов;
		Возврат Новый Структура("ДоговорНомер, ДоговорДата", Договор.НомерДоговора, Договор.ДатаНачала);
	КонецФункции

//} Получить...

//{ ТЧПолучитьТекстЗапроса...

Функция ПолучитьДанныеТЧ_СФ(СсылкаНаОбъект, ЭтоКСФ)
	
	Запрос = Новый Запрос;
	
	Если ЭтоКСФ Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.ДокументОснование КАК КорректировкаРеализации
		|ПОМЕСТИТЬ СчФ
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка
		|	И СчетФактураВыданный.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ТЧ.Номенклатура.НаименованиеПолное, 1, 1) = """"
		|			ТОГДА ТЧ.Номенклатура.Наименование
		|		ИНАЧЕ ТЧ.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	ТЧ.Номенклатура КАК НоменклатураСсылка,
		|	ТЧ.Номенклатура.Артикул КАК КодНоменклатуры,
		|	ТЧ.Количество,
		|	ТЧ.КоличествоПоДокументуРеализации КАК КоличествоДоИзменения,
		|	ТЧ.ЕдиницаИзмерения,
		|	ТЧ.ЕдиницаИзмеренияПоДокументуРеализации КАК ЕдиницаИзмеренияДоИзменения,
		|	ТЧ.Цена,
		|	ТЧ.СтавкаНДС,
		|	ТЧ.СтавкаНДСПоДокументуРеализации КАК СтавкаНДСДоИзменения,
		|	ТЧ.СуммаНДС,
		|	ТЧ.СуммаНДСПоДокументуРеализации КАК СуммаНДСДоИзменения,
		|	ТЧ.СуммаВсего КАК Сумма,
		|	ТЧ.СуммаВсегоПоДокументуРеализации КАК СуммаДоИзменения,
		|	ИСТИНА КАК СуммаВключаетНДС,
		|	ТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
		|	ТЧ.ЕдиницаИзмеренияПоДокументуРеализации.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмеренияДоИзменения,
		|	ВЫБОР
		|		КОГДА ТЧ.КоличествоПоДокументуРеализации = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ТЧ.СуммаВсегоПоДокументуРеализации - ТЧ.СуммаНДСПоДокументуРеализации) / ТЧ.КоличествоПоДокументуРеализации КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаДоИзменения
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &Ссылка
		|	И ТЧ.КоличествоРазница <> 0
		|	И ТЧ.СуммаВсегоРазница <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ТЧ.Работа.НаименованиеПолное, 1, 1) = """"
		|			ТОГДА ТЧ.Работа.Наименование
		|		ИНАЧЕ ТЧ.Работа.НаименованиеПолное
		|	КОНЕЦ,
		|	ТЧ.Работа,
		|	ТЧ.Работа.Артикул,
		|	ТЧ.Количество,
		|	ТЧ.КоличествоПоДокументуРеализации,
		|	ТЧ.Нормочас,
		|	ТЧ.Нормочас,
		|	ТЧ.Цена,
		|	ТЧ.СтавкаНДС,
		|	ТЧ.СтавкаНДСПоДокументуРеализации,
		|	ТЧ.СуммаНДС,
		|	ТЧ.СуммаНДСПоДокументуРеализации,
		|	ТЧ.СуммаВсего,
		|	ТЧ.СуммаВсегоПоДокументуРеализации,
		|	ИСТИНА,
		|	ТЧ.Нормочас,
		|	ТЧ.Нормочас,
		|	ВЫБОР
		|		КОГДА ТЧ.КоличествоПоДокументуРеализации = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ((ТЧ.СуммаВсегоПоДокументуРеализации - ТЧ.СуммаНДСПоДокументуРеализации) / ТЧ.КоличествоПоДокументуРеализации КАК ЧИСЛО(15, 2))
		|	КОНЕЦ
		|ИЗ
		|	Документ.КорректировкаРеализации.Работы КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &Ссылка
		|	И (ТЧ.КоличествоРазница <> 0
		|			ИЛИ ТЧ.СуммаВсегоРазница <> 0)";
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда // в случае УКД Дис
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);			   
		Иначе
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект.ДокументОснование);			   
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(ТЧ.Номенклатура.НаименованиеПолное, 1, 10) = """"
		|			ТОГДА ТЧ.Номенклатура.Наименование
		|		ИНАЧЕ ТЧ.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	ТЧ.Номенклатура КАК НоменклатураСсылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ТЧ.Номенклатура) <> ТИП(Справочник.Автомобили)
		|			ТОГДА ТЧ.Номенклатура.Артикул
		|	КОНЕЦ КАК КодНоменклатуры,
		|	ЕСТЬNULL(ОКЕИ.Ссылка, ЕдиницыИзмерения_ОКЕИ.Ссылка) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ОКЕИ.Код, ЕдиницыИзмерения_ОКЕИ.Код) КАК КодЕдиницыИзмерения,
		|	ТЧ.Цена,
		|	ТЧ.Количество,
		|	0 КАК КоличествоМест,
		|	0 КАК КоличествоВОдномМесте,
		|	ТЧ.СуммаВсего КАК Сумма,
		|	ТЧ.СтавкаНДС,
		|	ТЧ.СуммаНДС,
		|	ИСТИНА КАК СуммаВключаетНДС,
		|	ТЧ.ГТД КАК НомерГТД,
		|	Спр_ГТД.Страна КАК СтранаПроисхождения
		|ИЗ
		|	Документ.СчетФактураВыданный.Товары КАК ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГТД КАК Спр_ГТД
		|		ПО ТЧ.ГТД = Спр_ГТД.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ОКЕИ
		|		ПО ТЧ.ЕдиницаИзмерения = ОКЕИ.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТЧ.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК ЕдиницыИзмерения_ОКЕИ
		|		ПО (ЕдиницыИзмерения.ЕдиницаПоКлассификатору = ЕдиницыИзмерения_ОКЕИ.Ссылка)
		|ГДЕ
		|	ТЧ.Ссылка = &Ссылка";
		
		Если Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Товары.Реквизиты.Найти("Цена") = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТЧ.Цена,", "0 КАК Цена,");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);			   
		
	КонецЕсли;	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция  ПолучитьДанныеТЧ_ТоварныйДок(ДокСсылка)
	ТабличнаяЧасть = ИнициализироватьТабличнуюЧасть(Ложь);
	
	
	СуммаНДС = 0;
	Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено И ТипЗнч(ДокСсылка)= тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.Наименование КАК Номенклатура,
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.Ссылка КАК НоменклатураСсылка,
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.VIN КАК КодНоменклатуры,
		|	ЗНАЧЕНИЕ(справочник.КлассификаторЕдиницИзмерения.шт) КАК ЕдиницаИзмерения,
		|	""796"" КАК КодЕдиницыИзмерения,
		|	1 КАК Количество,
		|	1 КАК КоличествоМест,
		|	1 КАК КоличествоВОдномМесте,
		|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаВсего - РеализацияАвтомобилейАвтомобили.СуммаНДС КАК Цена,
		|	РеализацияАвтомобилейАвтомобили.СуммаВсего как Сумма ,
		|    Истина как суммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
		Возврат Запрос.Выполнить();
		
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РеализацияТоваровТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
		|			Тогда РеализацияТоваровТовары.Номенклатура.Наименование
		|		ИНАЧЕ РеализацияТоваровТовары.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	РеализацияТоваровТовары.Номенклатура КАК НоменклатураСсылка,
		|	РеализацияТоваровТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору как ЕдиницаИзмерения,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
		|	РеализацияТоваровТовары.Цена,
		|	РеализацияТоваровТовары.Количество,
		|	РеализацияТоваровТовары.Количество КАК КоличествоМест,
		|	1 КАК КоличествоВОдномМесте,
		|	РеализацияТоваровТовары.Коэффициент,
		|	РеализацияТоваровТовары.СтавкаНДС,
		|	РеализацияТоваровТовары.СуммаНДС,
		|	РеализацияТоваровТовары.СуммаВсего КАК сумма,
		|	Истина КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
		Возврат Запрос.Выполнить();
	КонецЕсли;
	
	Возврат  ТабличнаяЧасть;
КонецФункции	

Функция  ПолучитьДанныеТЧ_СчетНаОплату(ДокументСсылка)
	
	Запрос= Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ТЧ.Номенклатура.НаименованиеПолное, 1, 10) = """"
	|			ТОГДА ТЧ.Номенклатура.Наименование
	|		ИНАЧЕ ТЧ.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК Номенклатура,
	|	ТЧ.Номенклатура КАК НоменклатураСсылка,
	|	ТЧ.Номенклатура.Код КАК КодНоменклатуры,
	|	ТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ТЧ.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
	|	ТЧ.Цена,
	|	ТЧ.Количество,
	|	ТЧ.Коэффициент,
	|	ТЧ.СтавкаНДС,
	|	ТЧ.СуммаНДС,
	|	ТЧ.СуммаВсего КАК сумма,
	|	ИСТИНА КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплату.Товары КАК ТЧ
	|ГДЕ
	|	ТЧ.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции	

Функция ПолучитьДанныеТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ)
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		Возврат ПолучитьДанныеТЧ_СФ(СчетФактура, ЭтоКСФ);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		Возврат ПолучитьДанныеТЧ_СчетНаОплату(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда // в случае УКД Дис
		
		Возврат ПолучитьДанныеТЧ_СФ(ДокументСсылка, Истина);
		
	Иначе 
		
		Возврат ПолучитьДанныеТЧ_ТоварныйДок(ДокументСсылка);
		
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ) Экспорт
	Возврат 	ПолучитьДанныеТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ);
КонецФункции

Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
	Возврат ТекущийКод
КонецФункции

//} ТЧПолучитьТекстЗапроса...

//{ ПолучитьДанныеШапки...

Функция ПолучитьСтруктуруШапки(ДокументСсылка, СчетФактура = Неопределено)   Экспорт 
	
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("Организация"	  , ДокументСсылка.Организация);
	СтруктураШапки.Вставить("Контрагент"	  , ДокументСсылка.Контрагент);
	СтруктураШапки.Вставить("ВалютаДокумента" , ДокументСсылка.ВалютаДокумента);
	СтруктураШапки.Вставить("СуммаВключаетНДС", Истина);
	СтруктураШапки.Вставить("ДопИнфо"		  , Новый Массив);
	СтруктураШапки.Вставить("АдресДоставки"	  , "");
		
	Если СчетФактура = Неопределено Тогда 
		
		СтруктураШапки.Вставить("Дата" , ДокументСсылка.Дата);
		СтруктураШапки.Вставить("Номер", ДокументСсылка.Номер);
		
		СтруктураШапки.Вставить("Грузоотправитель", СтруктураШапки.Организация);
		СтруктураШапки.Вставить("Грузополучатель" , СтруктураШапки.Контрагент);
		
	Иначе 
		
		СтруктураШапки.Вставить("Дата" , СчетФактура.Дата);
		СтруктураШапки.Вставить("Номер", СчетФактура.Номер);
		
		СтруктураШапки.Вставить("Грузоотправитель", "он же");
		
		Грузополучатель = СчетФактура.Грузополучатель;
		СтруктураШапки.Вставить("Грузополучатель", ?(ЗначениеЗаполнено(Грузополучатель), Грузополучатель, СтруктураШапки.Контрагент));
		
		Если СчетФактура.Метаданные().Реквизиты.Найти("ИдентификаторГосударственногоКонтракта") <> Неопределено Тогда
			СтруктураШапки.Вставить("ИдентификаторГосконтракта", СчетФактура.ИдентификаторГосударственногоКонтракта);
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураШапки;
	
КонецФункции

//} ПолучитьДанныеШапки...

//{ ПолучитьДанныеСФ...

Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт
	Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляКСФ(СчетФактура);
КонецФункции

Функция ПолучитьНомераДляСФ(СсылкаНаОбъект)  Экспорт 
	ДанныеДляПечати = Новый Структура;
	Если СсылкаНаОбъект.метаданные().реквизиты.найти("Исправление")<>Неопределено и СсылкаНаОбъект.исправление Тогда
		ДанныеДляПечати.вставить("НомерДокумента", СсылкаНаОбъект.НомерИсходногоДокумента);
		ДанныеДляПечати.Вставить("ДатаДокумента", СсылкаНаОбъект.ДатаИсходногоДокумента);
		ДанныеДляПечати.Вставить("ЭтоИСФ", Истина);
		ДанныеДляПечати.Вставить("НомерИсправления", строка(СсылкаНаОбъект.НомерИсправления));
		ДанныеДляПечати.Вставить("ДатаИсправления",  СсылкаНаОбъект.Дата);
	Иначе 
		ДанныеДляПечати.вставить("НомерДокумента", ПолучитьНомерНаПечатьДиадок(СсылкаНаОбъект));
		ДанныеДляПечати.Вставить("ДатаДокумента",  СсылкаНаОбъект.Дата);
		ДанныеДляПечати.Вставить("ЭтоИСФ", Ложь);
	КонецЕсли;	
	Возврат ДанныеДляПечати;
КонецФункции

Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
	Возврат "";
КонецФункции

//} ПолучитьДанныеСФ...

//} ПОЛУЧЕНИЕ ДАННЫХ

//{ ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьТипДокумента(ДокСсылка, НаименованиеТипа)
	Возврат (метаданные.документы.найти(НаименованиеТипа)<>Неопределено) и (ТипЗнч(ДокСсылка)=тип("ДокументСсылка."+НаименованиеТипа))
КонецФункции

Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД) Экспорт
	
	Если ЗначениеЗаполнено(ФункцияУПД) Тогда
		
		ТипДокумента = ТипДокументаУПД(ФункцияУПД);
		
		Если ЗначениеЗаполнено(ТипДокумента) Тогда
			Возврат ТипДокумента;
		Иначе
			ТипДокумента = ТипДокументаУКД(ФункцияУПД);
			Если ЗначениеЗаполнено(ТипДокумента) Тогда
				Возврат ТипДокумента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		
		Справочники_ХозОпераци_СчетФактураВыданныйКорректировка= ПредопределенныйЭлемент(Справочники.ХозОперации, "СчетФактураВыданныйКорректировка");
		
		Если Справочники_ХозОпераци_СчетФактураВыданныйКорректировка <> Неопределено И Док.ХозОперация = Справочники_ХозОпераци_СчетФактураВыданныйКорректировка Тогда
			Если Док.Исправление Тогда
				Если ЗначениеЗаполнено(Док.НомерИсправляемогоКорректировочногоДокумента) Тогда
					Возврат "Исправление КСФ";
				Иначе
					Возврат "Исправление СФ";
				КонецЕсли;
			Иначе
				Возврат "Корректировочный СФ";
			КонецЕсли;
		Иначе
			Возврат "Счет-фактура";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваров") или ПроверитьТипДокумента(Док, "КорректировкаРеализации") Тогда 
		//Настройка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Док.Организация);
		СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
		Если СтрокиНастрек.количество()=0 Тогда 
			ФормаДляУслуг = "Акт";
			ФормаДляТоваров = "Торг-12";
		иначе 
			ФормаДляТоваров =  ?(СтрокиНастрек[0].ПечатнаяФормаДляТоваров="", "Торг-12" , СтрокиНастрек[0].ПечатнаяФормаДляТоваров);
			ФормаДляУслуг  =   ?(СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ="", "Акт"		, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  );
		КонецЕсли;	
		Возврат ФормаДляТоваров;
	ИначеЕсли Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено И ТипЗнч(Док) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		Возврат   "Торг-12";
	ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.СчетНаОплату") Тогда
		Возврат "Счет на оплату";
	Иначе 
		Возврат "";
	КонецЕсли;	
	
КонецФункции
	
Функция ПолучитьПараметрыСФ(Док) Экспорт
	
	Возврат Неопределено;
	
КонецФункции
	
Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
	
	СуммаДокумента = Док.СуммаДокумента;
	СуммаУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаУвеличение")<>Неопределено, Док.СуммаУвеличение, 0);
	СуммаУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаУменьшение")<>Неопределено, Док.СуммаУменьшение,0);
	
	Стр1 = "";
	Стр2 = "";
	
	Стр1 = ?(СуммаУвеличение = 0, "", "+" + Формат(СуммаУвеличение, "ЧДЦ=2"));
	Стр2 = ?(СуммаУменьшение = 0, "", "-" + Формат(СуммаУменьшение, "ЧДЦ=2"));
	
	Если СуммаУвеличение = 0 И СуммаУменьшение = 0 Тогда
		Если СуммаДокумента <> 0 Тогда
			Стр1 = Формат(СуммаДокумента, "ЧДЦ=2");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
		Возврат Стр1 + " " + Стр2;
	ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
		Возврат Стр1;
	Иначе
		Возврат Стр2;
	КонецЕсли;
КонецФункции

Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
	
	СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДС")<>Неопределено, Док.СуммаНДС, 0);
	СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДСДокумента")<>Неопределено, Док.СуммаНДСДокумента, 0);
	СуммаНДСУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУвеличение")<>Неопределено, Док.СуммаНДСУвеличение, 0);
	СуммаНДСУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУменьшение")<>Неопределено, Док.СуммаНДСУменьшение,0);
	
	Стр1 = "";
	Стр2 = "";
	
	Стр1 = ?(СуммаНДСУвеличение = 0, "", "+" + Формат(СуммаНДСУвеличение, "ЧДЦ=2"));
	Стр2 = ?(СуммаНДСУменьшение = 0, "", "-" + Формат(СуммаНДСУменьшение, "ЧДЦ=2"));
	
	Если СуммаНДСУвеличение = 0 И СуммаНДСУменьшение = 0 Тогда
		Если СуммаНДСДокумента <> 0 Тогда
			Стр1 = Формат(СуммаНДСДокумента, "ЧДЦ=2");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
		Возврат Стр1 + " " + Стр2;
	ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
		Возврат Стр1;
	Иначе
		Возврат Стр2;
	КонецЕсли;
КонецФункции

	//{ Подготовка временных таблиц
	
		Функция ПодготовитьВТ_СпискаОтправкиДокументов(ТипыДокументов, Запрос) Экспорт
			
			МассивВременныхТаблиц= Новый Массив;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 ИЛИ ТипыДокументов = 2 ИЛИ ТипыДокументов = 5 ИЛИ ТипыДокументов = 6 Тогда
				ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц);
				ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
				ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 Тогда
				ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 2 Тогда
				ПодготовитьВТ_СчетаФактуры_СчетФактураВыданный(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 3 Тогда
				ПодготовитьВТ_СчетаНаОплату_СчетНаОплату(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Возврат МассивВременныхТаблиц;
			
		КонецФункции
		
		
		Процедура ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц) Экспорт
			
			Если Метаданные.Документы.СчетФактураВыданный.Реквизиты.Найти("СуммаНДСДокумента") = Неопределено Тогда
				ПодготовитьВТ_СЧФ_Основная_НетРеквизитаСуммаНДСДокумента(Запрос, МассивВременныхТаблиц);
			Иначе
				ПодготовитьВТ_СЧФ_Основная_ЕстьРеквизитСуммаНДСДокумента(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СЧФ_Основная_ЕстьРеквизитСуммаНДСДокумента(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.СуммаНДСДокумента КАК СуммаНДСЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ХозОперация,
			|	Т.Исправление,
			|	Т.НомерИсправляемогоКорректировочногоДокумента,
			|	Т.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадокДокументОснование.Значение, """") КАК ДокументОснованиеID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД
			|ПОМЕСТИТЬ СЧФ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадокСф)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадокДокументОснование
			|		ПО (Т.ДокументОснование = ИдентификаторДокументаВДиадокДокументОснование.Объект)
			|			И (ИдентификаторДокументаВДиадокДокументОснование.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.СуммаНДСДокумента,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ХозОперация,
			|	Т.Исправление,
			|	Т.НомерИсправляемогоКорректировочногоДокумента,
			|	Т.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадокДокументОснование.Значение, """"),
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД)
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадокСф)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадокДокументОснование
			|		ПО (Т.ДокументОснование = ИдентификаторДокументаВДиадокДокументОснование.Объект)
			|			И (ИдентификаторДокументаВДиадокДокументОснование.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")";
			
			Запрос.Выполнить();
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СЧФ_Основная_НетРеквизитаСуммаНДСДокумента(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ХозОперация,
			|	Т.Исправление,
			|	Т.НомерИсправляемогоКорректировочногоДокумента,
			|	Т.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадокДокументОснование.Значение, """") КАК ДокументОснованиеID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД
			|ПОМЕСТИТЬ СЧФ_Основная_Шаг1
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадокСф)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадокДокументОснование
			|		ПО (Т.ДокументОснование = ИдентификаторДокументаВДиадокДокументОснование.Объект)
			|			И (ИдентификаторДокументаВДиадокДокументОснование.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	Т.ХозОперация,
			|	Т.Исправление,
			|	Т.НомерИсправляемогоКорректировочногоДокумента,
			|	Т.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадокДокументОснование.Значение, """"),
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД)
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадокСф)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадокДокументОснование
			|		ПО (Т.ДокументОснование = ИдентификаторДокументаВДиадокДокументОснование.Объект)
			|			И (ИдентификаторДокументаВДиадокДокументОснование.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СЧФ_Основная_Шаг1.Документ,
			|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	СЧФ_Основная_Шаг1 КАК СЧФ_Основная_Шаг1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Товары КАК Товары
			|		ПО СЧФ_Основная_Шаг1.Документ = Товары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	СЧФ_Основная_Шаг1.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СЧФ_Основная_Шаг1.*,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение
			|ПОМЕСТИТЬ СЧФ_Основная
			|ИЗ
			|	СЧФ_Основная_Шаг1 КАК СЧФ_Основная_Шаг1
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО СЧФ_Основная_Шаг1.Документ = ВТ_СуммаНДСЗначение.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СЧФ_Основная_Шаг1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ
			|	СЧФ_Основная.Документ
			|ПОМЕСТИТЬ ВТ_ПодходящиеСЧФ
			|ИЗ
			|	СЧФ_Основная КАК СЧФ_Основная
			|ГДЕ
			|	СЧФ_Основная.ФормироватьУПД = &СЧФДОП
			|	И НЕ СЧФ_Основная.Исправление
			|	И СЧФ_Основная.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданный)
			|
			|СГРУППИРОВАТЬ ПО
			|	СЧФ_Основная.Документ
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВЫБОР
			|			КОГДА СЧФ_Основная.ID = СЧФ_Основная.ДокументОснованиеID
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СЧФ_Основная.Документ,
			|	СЧФ_Основная.Продавец,
			|	СЧФ_Основная.Покупатель,
			|	СЧФ_Основная.СуммаДокументаЗначение,
			|	СЧФ_Основная.СуммаНДСЗначение,
			|	СЧФ_Основная.Валюта,
			|	СЧФ_Основная.Проведен,
			|	СЧФ_Основная.Дата,
			|	СЧФ_Основная.Номер,
			|	СЧФ_Основная.ID,
			|	СЧФ_Основная.CounteragentID,
			|	&СЧФДОП КАК ФункцияУПД,
			|	СЧФ_Основная.ДокументОснование,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ УПД_СЧФДОП
			|ИЗ
			|	ВТ_ПодходящиеСЧФ КАК ВТ_ПодходящиеСЧФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ СЧФ_Основная КАК СЧФ_Основная
			|		ПО ВТ_ПодходящиеСЧФ.Документ = СЧФ_Основная.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ПодходящиеСЧФ";
			
			Запрос.Выполнить();
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 5 Тогда
				МассивВременныхТаблиц.Добавить("УПД_СЧФДОП");
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УКД_КСЧФДИС(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			Запрос.Текст=
			"ВЫБРАТЬ
			|	СЧФ_Основная.Документ
			|ПОМЕСТИТЬ ВТ_ПодходящиеСЧФ
			|ИЗ
			|	СЧФ_Основная КАК СЧФ_Основная
			|ГДЕ
			|	СЧФ_Основная.ФормироватьУПД = &СЧФДОП
			|	И НЕ СЧФ_Основная.Исправление
			|	И СЧФ_Основная.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СЧФ_Основная.Документ
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВЫБОР
			|			КОГДА СЧФ_Основная.ID = СЧФ_Основная.ДокументОснованиеID
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СЧФ_Основная.Документ,
			|	СЧФ_Основная.Продавец,
			|	СЧФ_Основная.Покупатель,
			|	СЧФ_Основная.СуммаДокументаЗначение,
			|	СЧФ_Основная.СуммаНДСЗначение,
			|	СЧФ_Основная.Валюта,
			|	СЧФ_Основная.Проведен,
			|	СЧФ_Основная.Дата,
			|	СЧФ_Основная.Номер,
			|	СЧФ_Основная.ID,
			|	СЧФ_Основная.CounteragentID,
			|	&КСЧФДИС КАК ФункцияУПД,
			|	СЧФ_Основная.ДокументОснование,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ УКД_КСЧФДИС
			|ИЗ
			|	ВТ_ПодходящиеСЧФ КАК ВТ_ПодходящиеСЧФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ СЧФ_Основная КАК СЧФ_Основная
			|		ПО ВТ_ПодходящиеСЧФ.Документ = СЧФ_Основная.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ПодходящиеСЧФ";
			
			Запрос.Выполнить();
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 6 Тогда
				МассивВременныхТаблиц.Добавить("УКД_КСЧФДИС");
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаФактуры_СчетФактураВыданный(Запрос, МассивВременныхТаблиц, ТипыДокументов) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СЧФ_Основная.Документ,
			|	СЧФ_Основная.Продавец,
			|	СЧФ_Основная.Покупатель,
			|	СЧФ_Основная.СуммаДокументаЗначение,
			|	СЧФ_Основная.СуммаНДСЗначение,
			|	СЧФ_Основная.Валюта,
			|	СЧФ_Основная.Проведен,
			|	СЧФ_Основная.Дата,
			|	СЧФ_Основная.Номер,
			|	СЧФ_Основная.ID,
			|	СЧФ_Основная.CounteragentID,
			|	ВЫБОР
			|		КОГДА СЧФ_Основная.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА СЧФ_Основная.ФормироватьУПД В (&СФ, &СФТОРГ12АКТ)
			|						ТОГДА 
			|							ВЫБОР
			|								КОГДА СЧФ_Основная.Исправление И СЧФ_Основная.НомерИсправляемогоКорректировочногоДокумента = """"
			|									ТОГДА &СФ
			|								ИНАЧЕ &КСФ
			|							КОНЕЦ
			|					КОГДА НЕ СЧФ_Основная.Исправление И СЧФ_Основная.ФормироватьУПД В (&СЧФДОП, &СЧФ, &СЧФ_ДОП)
			|						ТОГДА &КСЧФ
			|					ИНАЧЕ """"
			|				КОНЕЦ 
			|		КОГДА СЧФ_Основная.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданный)
			|			ТОГДА 
			|				ВЫБОР
			|					КОГДА СЧФ_Основная.ФормироватьУПД В (&СФ, &СФТОРГ12АКТ)
			|						ТОГДА &СФ
			|					КОГДА НЕ СЧФ_Основная.Исправление И СЧФ_Основная.ФормироватьУПД В (&СЧФДОП, &СЧФ, &СЧФ_ДОП)
			|						ТОГДА &СЧФ
			|					ИНАЧЕ """"
			|				КОНЕЦ
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ФункцияУПД,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ СчетаФактуры_СчетФактураВыданный
			|ИЗ
			|	СЧФ_Основная КАК СЧФ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
			|		ПО СЧФ_Основная.Документ = УПД_СЧФДОП.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ УКД_КСЧФДИС КАК УКД_КСЧФДИС
			|		ПО СЧФ_Основная.Документ = УКД_КСЧФДИС.Документ
			|ГДЕ
			|	УПД_СЧФДОП.Документ ЕСТЬ NULL
			|	И УКД_КСЧФДИС.Документ ЕСТЬ NULL
			|	И ВЫБОР
			|		КОГДА СЧФ_Основная.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.СчетФактураВыданныйКорректировка)
			|			И НЕ СЧФ_Основная.Исправление И СЧФ_Основная.ФормироватьУПД = &ДОП
			|				ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СЧФ_Основная";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("СчетаФактуры_СчетФактураВыданный");
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаНаОплату_СчетНаОплату(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	ИСТИНА КАК Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплату КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	СУММА(Т.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплату.Товары КАК Т
			|		ПО ВТ_Основная.Документ = Т.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Основная.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.CounteragentID,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	"""" КАК ФункцияУПД,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ СчетаНаОплату_СчетНаОплату
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("СчетаНаОплату_СчетНаОплату");
			
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПодготовитьВТ_Накладные_РеализацияТоваров(Запрос, МассивВременныхТаблиц);
			
			Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
				ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
			Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено Тогда
				ПодготовитьВТ_Накладные_РеализацияАвтомобилей(Запрос, МассивВременныхТаблиц);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияТоваров(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА &ДОП
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
			|			ТОГДА &ТОРГ12АКТ
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ФункцияУПД,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
			|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА &ДОП
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
			|			ТОГДА &ТОРГ12АКТ
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
			|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	СУММА(Товары.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК Товары
			|		ПО ВТ_Основная.Документ = Товары.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Основная.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ПОМЕСТИТЬ ВТ_ЕстьСЧФ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (СЧФ.Проведен)
			|ГДЕ
			|	НЕ ВТ_Основная.ОтпрНеПроведенные
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (НЕ СЧФ.ПометкаУдаления)
			|ГДЕ
			|	ВТ_Основная.ОтпрНеПроведенные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ФункцияУПД,
			|	ВТ_Основная.CounteragentID,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ Накладные_РеализацияТоваров
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕстьСЧФ КАК ВТ_ЕстьСЧФ
			|		ПО ВТ_Основная.Документ = ВТ_ЕстьСЧФ.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
			|ГДЕ
			|	(ВТ_ЕстьСЧФ.Документ ЕСТЬ НЕ NULL 
			|			ИЛИ ВТ_Основная.ФормироватьУПД <> &СЧФДОП
			|			ИЛИ ВТ_Основная.ФормироватьУПД = &СЧФДОП
			|				И ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) = 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ЕстьСЧФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("Накладные_РеализацияТоваров");
			
		КонецПроцедуры
			
		Процедура ПодготовитьВТ_Накладные_КорректировкаРеализации(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			И Т.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон)
			|				ТОГДА &ДИС
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ФункцияУПД,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УКД_КСЧФДИС КАК УКД_КСЧФДИС
			|		ПО (Т.Ссылка = УКД_КСЧФДИС.ДокументОснование)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И УКД_КСЧФДИС.ДокументОснование ЕСТЬ NULL
			|	И ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА Т.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			И Т.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон)
			|				ТОГДА &ДИС
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УКД_КСЧФДИС КАК УКД_КСЧФДИС
			|		ПО (Т.Ссылка = УКД_КСЧФДИС.ДокументОснование)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И УКД_КСЧФДИС.ДокументОснование ЕСТЬ NULL
			|	И ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА Т.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Документ,
			|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_Основная.Документ КАК Документ,
			|		Т.СуммаНДС КАК СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК Т
			|			ПО ВТ_Основная.Документ = Т.Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_Основная.Документ,
			|		Т.СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Работы КАК Т
			|			ПО ВТ_Основная.Документ = Т.Ссылка) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ПОМЕСТИТЬ ВТ_ЕстьСЧФ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (СЧФ.Проведен)
			|ГДЕ
			|	НЕ ВТ_Основная.ОтпрНеПроведенные
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (НЕ СЧФ.ПометкаУдаления)
			|ГДЕ
			|	ВТ_Основная.ОтпрНеПроведенные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ФункцияУПД,
			|	ВТ_Основная.CounteragentID,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ Накладные_КорректировкаРеализации
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕстьСЧФ КАК ВТ_ЕстьСЧФ
			|		ПО ВТ_Основная.Документ = ВТ_ЕстьСЧФ.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
			|ГДЕ
			|	(ВТ_ЕстьСЧФ.Документ ЕСТЬ НЕ NULL 
			|			ИЛИ ВТ_Основная.ФормироватьУПД <> &СЧФДОП
			|			ИЛИ ВТ_Основная.ФормироватьУПД = &СЧФДОП
			|				И ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) = 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ЕстьСЧФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("Накладные_КорректировкаРеализации");
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияАвтомобилей(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА &ДОП
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
			|			ТОГДА &ТОРГ12АКТ
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ФункцияУПД,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
			|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	ОтборКонтрагенты.CounteragentID,
			|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
			|			ТОГДА &ДОП
			|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
			|			ТОГДА &ТОРГ12АКТ
			|		ИНАЧЕ """"
			|	КОНЕЦ,
			|	ОтборОрганизации.ОтпрНеПроведенные
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
			|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
			|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Документ,
			|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
			|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
			|ИЗ
			|	(ВЫБРАТЬ
			|		ВТ_Основная.Документ КАК Документ,
			|		Т.СуммаНДС КАК СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Товары КАК Т
			|			ПО ВТ_Основная.Документ = Т.Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ВТ_Основная.Документ,
			|		Т.СуммаНДС
			|	ИЗ
			|		ВТ_Основная КАК ВТ_Основная
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей.Автомобили КАК Т
			|			ПО ВТ_Основная.Документ = Т.Ссылка) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.Документ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ПОМЕСТИТЬ ВТ_ЕстьСЧФ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (СЧФ.Проведен)
			|ГДЕ
			|	НЕ ВТ_Основная.ОтпрНеПроведенные
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Основная.Документ
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
			|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
			|			И (НЕ СЧФ.ПометкаУдаления)
			|ГДЕ
			|	ВТ_Основная.ОтпрНеПроведенные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Основная.Покупатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ФункцияУПД,
			|	ВТ_Основная.CounteragentID,
			|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
			|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
			|	ЛОЖЬ КАК ЭтоСчет
			|ПОМЕСТИТЬ Накладные_РеализацияАвтомобилей
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕстьСЧФ КАК ВТ_ЕстьСЧФ
			|		ПО ВТ_Основная.Документ = ВТ_ЕстьСЧФ.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
			|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
			|ГДЕ
			|	(ВТ_ЕстьСЧФ.Документ ЕСТЬ НЕ NULL 
			|			ИЛИ ВТ_Основная.ФормироватьУПД <> &СЧФДОП
			|			ИЛИ ВТ_Основная.ФормироватьУПД = &СЧФДОП
			|				И ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) = 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ЕстьСЧФ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
			
			Запрос.Выполнить();
			
			МассивВременныхТаблиц.Добавить("Накладные_РеализацияАвтомобилей");
			
		КонецПроцедуры
		
	//} Подготовка временных таблиц

//} ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

///////////////////////////////////////
// функции для генерации контента 
/////////////////////////////////////////


Функция ПолучитьБанковскийСчетПоДокументу(ДокСсылка) Экспорт 
	Если (докСсылка.метаданные().реквизиты.найти("РасчетныйСчетОрганизации")<>Неопределено ) и (ТипЗнч(ДокСсылка.РасчетныйСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда
		Возврат  ДокСсылка.РасчетныйСчетОрганизации
	иначе 
		Возврат Неопределено
	КонецЕсли;	 
КонецФункции	

/////////////////////////////////////////////////////////////////////////////
// функции генерации сотруктуры для генерации торг-12 или акта выполненных работ
//////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
	Возврат киПолучитьПредставлениеАдреса(записьрегистра) 
КонецФункции

Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
	Возврат Справочники.ВидыКонтактнойИнформации.АдресЮридический;
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес = Ложь, АдресСтрокой = "") Экспорт
	
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо,,АдресСтрокой);
		
	Иначе
		
		Если ИспользоватьЮрАдрес Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
		Иначе
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресФактический;
		КонецЕсли;
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо, ВидАдреса);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСтруктурированноеОписаниеЮрФизЛица( ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес)
	результат = Новый Структура("Name, Inn, Kpp, IsSoleProprietor, Okpo, Phone, Fax, BankAccountNumber, BankName, BankId, Address");
	НаименованиеОрганизации = юрФизЛицо.НаименованиеПолное;
	ЭтоИП = (юрФизЛицо.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо) ;
	
	результат.Name = НаименованиеОрганизации;
	результат.Inn = СокрЛП(юрФизЛицо.ИНН);
	результат.Kpp= СокрЛП(юрФизЛицо.КПП);
	результат.IsSoleProprietor = ЭтоИП;
	результат.Okpo = юрФизЛицо.КодПоОкпо;
	результат.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(  спПолучитьПредставление(юрФизЛицо, Новый Структура("ТелефонРабочий", ""))   );
	результат.Fax =   "" ;
	результат.BankAccountNumber =    спПолучитьПредставление(юрФизЛицо, Новый Структура("БанковскийСчет", ""));
	результат.BankName  =   спПолучитьПредставление(юрФизЛицо, Новый Структура("Банк", ""));
	результат.BankId =    СокрЛП(спПолучитьПредставление(юрФизЛицо, Новый Структура("БИК", "")));
	
	Возврат результат;
КонецФункции

Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "")  Экспорт 

	НаименованиеОрганизации = юрФизЛицо.НаименованиеПолное;
	ЭтоИП = (юрФизЛицо.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо) ;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.Inn = СокрЛП(юрФизЛицо.ИНН);
	OrganizationInfo.Kpp= СокрЛП(юрФизЛицо.КПП);
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, ЮрАдрес, АдресСтрокой);
	OrganizationInfo.IsSoleProprietor = ЭтоИП;
	
	Если АдресДляСФ=Ложь Тогда
		
		OrganizationInfo.Okpo = юрФизЛицо.КодПоОкпо;
		OrganizationInfo.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(  спПолучитьПредставление(юрФизЛицо, Новый Структура("ТелефонРабочий", ""))   );
		OrganizationInfo.Fax =   "" ;
		OrganizationInfo.BankAccountNumber =    спПолучитьПредставление(юрФизЛицо, Новый Структура("БанковскийСчет", ""));
		OrganizationInfo.BankName  =   спПолучитьПредставление(юрФизЛицо, Новый Структура("Банк", ""));
		OrganizationInfo.BankId =    СокрЛП(спПолучитьПредставление(юрФизЛицо, Новый Структура("БИК", "")));
	КонецЕсли;
	
	OrganizationInfo.вставить("Ссылка",  ЮрФизЛицо);
	
КонецПроцедуры	

Процедура Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет= Неопределено, АдресСтрокой = "") Экспорт
	
	ЭтоОрганизация= ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации");
	
	ExtendedOrganizationInfo.Name= спПолучитьПредставление(ЮрФизЛицо, Новый Структура("Наименование"));
	ExtendedOrganizationInfo.Inn=  СокрЛП(спПолучитьПредставление(ЮрФизЛицо, Новый Структура("ИНН")));
	ExtendedOrganizationInfo.Kpp=  спПолучитьПредставление(ЮрФизЛицо, Новый Структура("КПП"));
	
	ExtendedOrganizationInfo.CorrespondentAccount= спПолучитьПредставление(ЮрФизЛицо, Новый Структура("КоррСчет"));
	ExtendedOrganizationInfo.Type= ?(ЮрФизЛицо.ФормаСобственности = Перечисления.ФормыСобственности.ЮридическоеЛицо, "LegalEntity", "IndividualEntity");
	
	ExtendedOrganizationInfo.Okpo=  			спПолучитьПредставление(ЮрФизЛицо, Новый Структура("ОКПО"));
	ExtendedOrganizationInfo.BankAccountNumber= спПолучитьПредставление(ЮрФизЛицо, Новый Структура("БанковскийСчет"));
	ExtendedOrganizationInfo.BankName=   		спПолучитьПредставление(ЮрФизЛицо, Новый Структура("Банк"));
	ExtendedOrganizationInfo.BankId=    		СокрЛП(спПолучитьПредставление(ЮрФизЛицо, Новый Структура("БИК")));
	ExtendedOrganizationInfo.Phone= 			ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента").ПредставлениеТелефона(спПолучитьПредставление(ЮрФизЛицо, Новый Структура("ТелефонРабочий")), "Телефон", 255);
	
	ExtendedOrganizationInfo.Email = ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").АдресЭлектроннойПочты(ЮрФизЛицо, Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий);
	
	ЗаполнитьСтруктуруАдреса(ExtendedOrganizationInfo.Address, ЮрФизЛицо, ИспользоватьЮрАдрес, АдресСтрокой);
		
	ExtendedOrganizationInfo.Вставить("Ссылка",  ЮрФизЛицо);
	
КонецПроцедуры	

Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)  Экспорт 
	НаименованиеОрганизации = контрагент.НаименованиеПолное;
	Возврат Новый Структура("Наименование, ИНН, КПП", НаименованиеОрганизации, СокрЛП(контрагент.ИНН),  СокрЛП(контрагент.КПП));
КонецФункции

Функция ДобавитьРазделитель(Стр, Префикс = "") 
	Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
КонецФункции

Функция СформироватьПредставлениеАдреса(СведенияОбАдресе)
	Если СведенияОбАдресе.IsForeign = Ложь Тогда
		КодРегиона 	= СведенияОбАдресе.RegionCode;
		Индекс 		= СведенияОбАдресе.ZipCode;
		Район 		= СведенияОбАдресе.Territory;
		Город 		= СведенияОбАдресе.City;
		НаселПункт  = СведенияОбАдресе.Locality;
		Улица       = СведенияОбАдресе.Street;
		Дом         = СведенияОбАдресе.Building;
		Корпус      = СведенияОбАдресе.Block;
		Кварт       = СведенияОбАдресе.Apartment;
		
		ПредставлениеАдреса = ДобавитьРазделитель(Индекс)+ДобавитьРазделитель(НаименованиеРегиона(КодРегиона))+ДобавитьРазделитель(Район)+
		ДобавитьРазделитель(Город)+ДобавитьРазделитель(НаселПункт)+ДобавитьРазделитель(Улица)+
		ДобавитьРазделитель(Дом, "дом №")+ДобавитьРазделитель(Корпус, "корпус ")+ДобавитьРазделитель(Кварт,"кв ");
		Возврат лев(ПредставлениеАдреса, СтрДлина(ПредставлениеАдреса)-2);
	Иначе
		Возврат ""
	КонецЕсли;	
КонецФункции	

Функция ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации, СведенияОбАдресе=Неопределено)
	СтрОписаниеЮрлица = "";
	СтрОписаниеЮрлица = СтрОписаниеЮрлица+ СведенияОбОрганизации.Name;
	СтрОписаниеЮрлица = СтрОписаниеЮрлица + ", ИНН "+СведенияОбОрганизации.Inn;
	СтрОписаниеЮрлица = СтрОписаниеЮрлица+", " + "КПП "+СведенияОбОрганизации.Kpp;
	
	Если СведенияОбАдресе<>Неопределено Тогда 
		СтрОписаниеЮрлица = СтрОписаниеЮрлица+", "+СформироватьПредставлениеАдреса(СведенияОбАдресе);
	КонецЕсли;	
	
	Возврат СтрОписаниеЮрлица;
КонецФункции


Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
	
	СведенияОбОрганизации = ПолучитьСтруктурированноеОписаниеЮрФизЛица( Контрагент, датаОперации, БанковскийСчет,  Истина);
	
	СведенияОбАдресе = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AddressInfo();
	ЗаполнитьСтруктуруАдреса(СведенияОбАдресе, Контрагент, Истина);
	
	Возврат ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации, СведенияОбАдресе)
	
КонецФункции

Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСтруктурированноеОписаниеЮрФизЛица( Контрагент, датаОперации, Неопределено,  Истина);
	Возврат ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации)
	
КонецФункции	

Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)  Экспорт 
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкССылка = БанковскийСчетОрганизации;
		Если БанкСсылка<>Неопределено Тогда 
			мБанк = ?(НЕ ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов), БанкСсылка.Банк, БанкСсылка.БанкДляРасчетов);
			мГородБанка = мБанк.Город;
			мКоррСчет   = мБанк.КоррСчет;
			мБИК        = мБанк.Код;
			мНомерСчета = ?(БанкСсылка.БанкДляРасчетов.Пустая(), БанкСсылка.НомерСчета,БанкСсылка.Банк.КоррСчет);
			
			мТекстПолучателя = Организация.НаименованиеПолное;
			Если ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов) Тогда
				мТекстПолучателя = мТекстПолучателя + " р/с " + БанкСсылка.НомерСчета + " в " + БанкСсылка.Банк + " " + БанкСсылка.Банк.Город;
			КонецЕсли;	
			
		КонецЕсли;
		Возврат Новый Структура ("Банк,БИК,КоррСчет,ГородБанка,НомерМсета,ТекстПолучателя,НомерСчета",мБанк,мБИК,мКоррСчет,мГородБанка,мНомерСчета,мТекстПолучателя,мНомерСчета);
	иначе 
		Возврат Неопределено
	КонецЕсли;		
КонецФункции

Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт = Ложь, ЭтоУПД = Ложь)  Экспорт 
	ДоговорКонтрагента = ДокСсылка.ДоговорВзаиморасчетов;
	
	Ground = Новый Структура;
	Ground.Вставить("GroundName", 	"");
	Ground.Вставить("GroundNumber", "");
	Ground.Вставить("GroundDate", 	"");
	Ground.Вставить("Основание", 	"");
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
			
		Если ЭтоУПД Тогда
			ПредставлениеДоговора= "Договор";
		Иначе
			ПредставлениеДоговора= ДоговорКонтрагента.Наименование;
		КонецЕсли;
			
		Ground.Вставить("GroundName", 	ПредставлениеДоговора);
		Ground.Вставить("GroundNumber", ДоговорКонтрагента.НомерДоговора);
		Ground.Вставить("GroundDate", 	ДоговорКонтрагента.ДатаНачала);
		Ground.Вставить("Основание", 	ДоговорКонтрагента);
		
	КонецЕсли;	 
	
	Возврат  Ground;
КонецФункции	

Функция  ИнициализироватьТабличнуюЧасть(ЭтоКСФ);
	ТабличнаяЧасть = Новый таблицаЗначений;
	ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
	ТабличнаяЧасть.Колонки.Добавить("КодНоменклатуры");
	ТабличнаяЧасть.Колонки.Добавить("КодЕдиницыИзмерения");
	ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧасть.Колонки.Добавить("ВидУпаковки");
	ТабличнаяЧасть.Колонки.Добавить("КоличествоВОдномМесте");
	ТабличнаяЧасть.Колонки.Добавить("КоличествоМест");
	ТабличнаяЧасть.Колонки.Добавить("масса");
	ТабличнаяЧасть.Колонки.Добавить("Количество");
	ТабличнаяЧасть.Колонки.Добавить("Цена");
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.Добавить("СуммаНДС");
	ТабличнаяЧасть.Колонки.Добавить("Сумма");
	ТабличнаяЧасть.Колонки.Добавить("СуммаВключаетНДС");
	ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхождения");
	ТабличнаяЧасть.Колонки.Добавить("НомерГТД");
	
	Если ЭтоКСФ Тогда 
		ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхожденияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("НомерГТДДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("КоличествоДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмеренияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("КодЕдиницыИзмеренияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("ЦенаДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СтавкаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СуммаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СуммаДоИзменения");
	КонецЕсли;	
	
	
	Возврат табличнаяЧасть;
КонецФункции

Функция ПолучитьЕИПоКлассификатору(ЕдиницаИзмерения)
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) и (ТипЗнч(ЕдиницаИзмерения)= тип("СправочникСсылка.ЕдиницыИзмерения")) Тогда 
		Возврат ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
	Иначе 
		Возврат ЕдиницаИзмерения
	КонецЕсли; 
	
КонецФункции	


Функция ПолучитьОтветственноеЛицо(ДатаДокумента, Организация, ВидОтвественногоЛица)
	
	СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(ДатаДокумента, Новый Структура("Организация,Объект", Организация, ВидОтвественногоЛица));
	Возврат СтруктураСведений.Значение;
	
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция ДобавитьВедущиеНули(стр, длина)
	результат = стр;
	пока стрДлина(результат)<длина цикл 
		результат = "0"+результат
	КонецЦикла;
	Возврат результат;
	
КонецФункции	

Функция СвернутьтаблицуПоКлючам(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.удалить(ТабличнаяЧасть.Колонки.XmlTorg12_Item);
	СписокКлючей = Новый СписокЗначений();
	СтрокаСвертки = "";
	Для каждого колонка из ТабличнаяЧасть.колонки цикл 
		Если найти("Количество, Сумма, СуммаНДС, Всего, XmlTorg12_ItemSubtotal, XmlTorg12_ItemSubtotalWithVatExcluded,  НомерСтроки", колонка.имя)=0 Тогда 
			СписокКлючей.Добавить(колонка.имя);
			СтрокаСвертки =  ?(СтрокаСвертки="", "", СтрокаСвертки+", ")+ колонка.имя;
		КонецЕсли;	
	КонецЦикла;;	
	
	Результат = ТабличнаяЧасть.скопировать();
	Результат.свернуть(СтрокаСвертки, "Количество, Сумма, СуммаНДС, Всего, XmlTorg12_ItemSubtotal, XmlTorg12_ItemSubtotalWithVatExcluded,  НомерСтроки");
	
	Если результат.количество() = ТабличнаяЧасть.количество() Тогда
		//сворачивать нечего
		Возврат    ТабличнаяЧасть
	КонецЕсли;
	
	//расставим номера в свернутой таблице
	Для каждого стр из результат цикл 
		Ключ = Новый Структура;
		Для каждого колонка из  СписокКлючей цикл 
			Ключ.Вставить(колонка.Значение, стр[колонка.Значение]);
		КонецЦикла;
		
		выборка =  ТабличнаяЧасть.найтистроки(Ключ);
		стр.номерСтроки = ДобавитьВедущиеНули(выборка[0].НомерСтроки, 4);
	КонецЦикла;	
	
	результат.сортировать("НомерСтроки");
	Возврат результат;  
КонецФункции

Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧастьВходящая = Неопределено, СуммаВключаетНДС = Истина, видОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если ТабличнаяЧастьВходящая = Неопределено Тогда
		ТабличнаяЧасть =	Неопределено;
	Иначе
		ТабличнаяЧасть =  ТабличнаяЧастьВходящая.скопировать();
	КонецЕсли;
	
	
	Если видОперации = "ПоступлениеДопРасходов" Тогда
		ДокОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
	ИначеЕсли видОперации = "ПоступлениеАвтомобилей" Тогда
		ДокОбъект = Документы.ПоступлениеАвтомобилей.СоздатьДокумент();	
	Иначе
		ДокОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		
		Если ТабличнаяЧасть<>Неопределено Тогда 
			ТабличнаяЧасть = СвернутьтаблицуПоКлючам(ТабличнаяЧастьВходящая);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение возможных полей
	Если видОперации = "ПоступлениеДопРасходов" Тогда
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов;
	ИначеЕсли видОперации = "ПоступлениеАвтомобилей" Тогда
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей;
	Иначе
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваров;
	КонецЕсли;
	
	
	
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.BoxInfo.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
		
		Если ЗначениеЗаполнено(параметры.ДоговорКонтрагента) Тогда 
			ДокОбъект.ДоговорВзаиморасчетов= параметры.ДоговорКонтрагента;
			ДокОбъект.ВалютаДокумента= ДокОбъект.ДоговорВзаиморасчетов.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
	дкФормаПриОткрытии(ДокОбъект.ПолучитьФорму());
	
	
	ДокОбъект.ВхДокДата = параметры.ДатаВходящегоДокумента;
	ДокОбъект.ВхДокНомер = параметры.НомерВходящегоДокумента;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для каждого стр Из ТабличнаяЧасть Цикл
			Если видОперации = "ПоступлениеАвтомобилей" Тогда
				стрОбъект = ДокОбъект.Автомобили.Добавить();
				стрОбъект.Автомобиль = стр.Номенклатура;
				стрОбъект.АвтомобильБезЗаказа = Истина;
				стрОбъект.ИдентификаторАвтомобиля=Новый УникальныйИдентификатор;
				стрОбъект.Количество = 1;
			Иначе
				
				стрОбъект = ДокОбъект.Товары.Добавить();
				стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
					стрОбъект.Коэффициент = стр.ЕдиницаИзмерения.Коэффициент;
				КонецЕсли;
				
				стрОбъект.Номенклатура = стр.Номенклатура;
				стрОбъект.Количество = стр.Количество;
				Если видОперации = "ПоступлениеДопРасходов" Тогда
					стрОбъект.ЕдиницаИзмерения =  стрОбъект.Номенклатура.ОсновнаяЕдиницаИзмерения;
					Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
						стрОбъект.Коэффициент = стрОбъект.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
				Иначе
					стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
					Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
						стрОбъект.Коэффициент = стр.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					стрОбъект.КоличествоБазовое = стр.Количество * стрОбъект.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
			стрОбъект.СуммаНДС = стр.СуммаНДС;
			стрОбъект.СуммаВсего = стр.Всего;
			стрОбъект.СтавкаНДС = стр.СтавкаНДС;

			Если (ДокОбъект.Организация.ОсвобожденОтНДС) и (стрОбъект.СтавкаНДС <> справочники.СтавкиНДС.БезНДС) Тогда 
				стрОбъект.СтавкаНДС = справочники.СтавкиНДС.БезНДС;
				стрОбъект.СуммаНДС = 0;
			КонецЕсли;	
			
			Если ДокОбъект.ТипЦен.ЦенаВключаетНДС Тогда
				стрОбъект.Сумма = стрОбъект.СуммаВсего ;
			Иначе
				стрОбъект.Сумма = стрОбъект.СуммаВсего  - стрОбъект.СуммаНДС;
			КонецЕсли;
			
			Если ЗаполнениеГТД Тогда
				стрОбъект.ГТД = НайтиИлиСоздатьГТД(стр.ГТД,стр.СтранаПроисхождения);
			КонецЕсли;
			
			стрОбъект.Цена = стрОбъект.Сумма / ?(стрОбъект.Количество = 0, 1, стрОбъект.Количество);
			
			стрОбъект.СуммаНДС = стр.СуммаНДС;
			стрОбъект.СуммаВсего = стр.Всего;
			стрОбъект.СтавкаНДС = стр.СтавкаНДС;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокОбъект;
КонецФункции

Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
	
	ДокОбъект = Документы.ВозвратОтПокупателя.СоздатьДокумент();
	//ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	//ДокОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
	КонецЕсли;
	
	//мСписокВидовДоговоров = Новый СписокЗначений;
	//мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//Если ДокОбъект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
	//мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//КонецЕсли;
	//СтруктураПараметровДляПолученияДоговора=	Новый Структура();
	//СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокВидовДоговоров);
	
	ДокОбъект.ОбработкаРеквизита("Контрагент", ,);
	
	Возврат ДокОбъект;
	
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция НайтиИлиСоздатьГТД(номерГТД,СтранаПроисхождения)
	
	Если значениеЗаполнено(НомерГТД)=Ложь Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГТД.Ссылка
		|ИЗ
		|	Справочник.ГТД КАК ГТД
		|ГДЕ
		|	ГТД.Страна = &СтранаПроисхождения
		|	И ГТД.Наименование = &НомерГТД";
	
	Запрос.УстановитьПараметр("СтранаПроисхождения",СтранаПроисхождения );
	Запрос.УстановитьПараметр("НомерГТД",НомерГТД );
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ссылка;
	Иначе
		элементГТДОбъект = Справочники.ГТД.СоздатьЭлемент();
		элементГТДОбъект.Наименование = номерГТД;
		элементГТДОбъект.Страна = СтранаПроисхождения;
		элементГТДОбъект.УстановитьНовыйКод();
		Попытка
			элементГТДОбъект.Записать();
			Возврат элементГТДОбъект.Ссылка;
		Исключение
			Сообщить("Ошибка при записи ГТД:
			|"+ ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции



Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
	СчетФактура.ОбработкаРеквизита("Контрагент",,СчетФактура.ПолучитьФорму());
КонецПроцедуры


Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
		
	ПодходящаяЕИ = Неопределено;
	Если типЗнч(Номенклатура) = тип("СправочникСсылка.Номенклатура") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕИ.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения ЕИ
		|ГДЕ
		|	ЕИ.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.ТипНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		пока  Выборка.Следующий() Цикл
			ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
			Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
				Возврат  Выборка.Ссылка;
			КонецЕсли;	
			Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
			Если коэф <> Неопределено Тогда 
				ПодходящаяЕИ = выборка.ссылка;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции


Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции


Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Если Лев(TaxRate, 2) = "10" Тогда
		
		Возврат Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 10);
		
	ИначеЕсли Лев(TaxRate, 2) = "18" Тогда
		
		Возврат Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 18);
		
	ИначеЕсли Лев(TaxRate, 1) = "0" Тогда
		
		Запрос= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.СтавкиНДС ГДЕ НЕ Предопределенный И Наименование ПОДОБНО &Наименование");
		Запрос.УстановитьПараметр("Наименование", "0%");
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(TaxRate) ИЛИ НРег(TaxRate) = "без ндс" Тогда
		
		Возврат Справочники.СтавкиНДС.БезНДС;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Покупка);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Прочее);
	Возврат СписокВидовДоговоров;
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Если Метаданные.Справочники.ДоговорыВзаиморасчетов.Реквизиты.Найти("Основной") = Неопределено Тогда
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ОсновнойДоговорВзаиморасчетов КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|		ПО Контрагенты.ОсновнойДоговорВзаиморасчетов = ДоговорыВзаиморасчетов.Ссылка
		|			И (ДоговорыВзаиморасчетов.Организация = &Организация)
		|			И (НЕ ДоговорыВзаиморасчетов.ПометкаУдаления)
		|			И (ДоговорыВзаиморасчетов.ВидДоговора В (&СписокДоговоров))
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент");
		
	Иначе
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыВзаиморасчетов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		|	ДоговорыВзаиморасчетов.Владелец = &Контрагент
		|	И ДоговорыВзаиморасчетов.Организация = &Организация
		|	И ДоговорыВзаиморасчетов.Основной
		|	И НЕ ДоговорыВзаиморасчетов.ПометкаУдаления
		|	И ДоговорыВзаиморасчетов.ВидДоговора В(&СписокДоговоров)");
		
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Контрагент"	   ,Контрагент);
	Запрос.УстановитьПараметр("Организация"	   ,Организация);
	Запрос.УстановитьПараметр("СписокДоговоров",СписокВидовДоговоров);
	
	РезультатЗапроса= Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	КонецЕсли;
		
КонецФункции

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыВзаиморасчетов.ПолучитьФормуСписка(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.РежимВыбора = Истина;
	
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	
	
	ФрмВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФрмВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФрмВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.Значение                             = ТекущаяДата();
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.Использование                        = Истина;
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.ВидСравнения                         = ВидСравнения.МеньшеИлиРавно;
	
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.Значение                              = ДатаДокумента;
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.Использование                         = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.ВидСравнения                          = ВидСравнения.БольшеИлиРавно;
	
	
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("Организация",Организация);
	//СтруктураОтбора.Вставить("ДатаНачала",ДатаДокумента);
	
	Возврат ФрмВыбора;
КонецФункции

//////////////////////////////////////////////////////
//функции генерации структуры для ФУФ счета-фактуры
///////////////////////////////////////////////////////

Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ)   Экспорт 
	результат = Новый Структура;
	
	ДокОснование = ИСФ.ДокументОснование;
	Если ДокОснование.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда 
		Докоснование = ДокОснование.ДокументОснование;
	иначе 	
		пока (ТипЗнч(Докоснование) = Тип("ДокументСсылка.КорректировкаРеализации")) и (ДокОснование.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах) цикл 
			ДокОснование = ДокОснование.ДокументОснование;
		КонецЦикла;
	КонецЕсли;	
	
	результат.Вставить("ПервичныйДокументОснование",  ДокОснование);
	//ищем СФ
	запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = Ложь
	|	И СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("Документоснование", ДокОснование);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда 
		Возврат  выборка.ссылка;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СформироватьСведенияОПодписанте(юрФизЛицо)
	СведенияОПодписанте = Новый Структура;
	
	ОбъектДляОтбора = ЮрФизЛицо;
	
	//формируем данные для элемента ИдСвед
	//	ИдСвед = Новый Структура;	
	Если стрДлина(СокрЛП(юрФизЛицо.ИНН))=12 Тогда 
		//это физлицо 
		СведенияФЛ = Новый Структура;
		СведенияФЛ.Вставить("ИННФЛ", СокрЛП(юрФизЛицо.ИНН));
		
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			//для нашей организации - данные берем из нормализованного представления физлица
			ПредставлениеФИО  = юрФизЛицо.наименованиеПолное;
			ОбъектДляОтбора = юрФизЛицо;
			//сформируем сведения, необходимые для формирования данных о подписанте 
			ИП = Новый Структура;
			ИП.Вставить("ИННФЛ", СокрЛП(юрФизЛицо.ИНН));
			//  Если ЗначениеЗаполнено(ЮрФизЛицо.СвидетельствоСерияНомер) и ЗначениеЗаполнено(ЮрФизЛицо.СвидетельствоДатавыдачи) Тогда 
			//  	ИП.Вставить("СвГосРегИП", ЮрФизЛицо.СвидетельствоСерияНомер+" от "+Формат(ЮрФизЛицо.СвидетельствоДатавыдачи, "ДФ=dd.MM.yyyy"))
			//КонецЕсли;
			СведенияОПодписанте.Вставить("ИП", ИП);
		Иначе 
			ПредставлениеФИО  = юрФизЛицо.НаименованиеПолное 
		КонецЕсли;	  
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", ВыделитьСлово(ПредставлениеФИО));
		ФИО.Вставить("Имя", ВыделитьСлово(ПредставлениеФИО));
		ФИО.Вставить("Отчество", ВыделитьСлово(ПредставлениеФИО));
		СведенияФЛ.Вставить("ФИОИП", ФИО);
	Иначе 
		//это юрлицо 
		СведенияЮЛ = Новый Структура;
		СведенияЮЛ.Вставить("НаимОрг", юрФизЛицо.НаименованиеПолное); 
		СведенияЮЛ.Вставить("ИННЮЛ", СокрЛП(юрФизЛицо.ИНН));
		СведенияЮЛ.Вставить("КПП", юрФизЛицо.КПП);
		
		
		//формируем сведения, необходимые для тэга Подписант
		ЮЛ = Новый Структура;
		ЮЛ.Вставить("ИННЮЛ",  СокрЛП(юрФизЛицо.ИНН));
		СведенияОПодписанте.Вставить("ЮЛ", ЮЛ);
	КонецЕсли;	  
	
	Возврат СведенияОПодписанте;
КонецФункции


Функция сформироватьДанныеДляПечати(СсылкаНаОбъект, ЭтоКСФ) Экспорт  
	ДанныеДляПечати = Новый Структура;
	ДанныеДляпечати.Вставить("Дата"				, СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("Номер"			, ССылкаНаОбъект.Номер);
	
	Если  ЭтоКСФ = Ложь Тогда
		ДанныеДляПечати.Вставить("ДатаНомерДокументовОплаты", Новый массив);
		ДанныеДляПечати.Вставить("Валюта", СсылкаНаОбъект.ВалютаДокумента);
		ДанныеДляПечати.Вставить("Покупатель", СсылкаНаОбъект.Контрагент);
		ДанныеДляПечати.Вставить("Поставщик", СсылкаНаОбъект.Организация);
		ДанныеДляПечати.Вставить("Грузоотправитель", ?(СсылкаНаОбъект.Организация = СсылкаНаОбъект.ПодразделениеКомпании.Организация,"он же",СсылкаНаОбъект.ПодразделениеКомпании.Организация));
		ДанныеДляПечати.Вставить("Грузополучатель", СсылкаНаОбъект.Грузополучатель);
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", ПолучитьДанныеТЧ(СсылканаОбъект, ЭтоКСФ, Истина));
	Иначе 
		ДанныеДляПечати.Вставить("ДатаНомерДокументовОплаты", Новый массив);
		ДанныеДляПечати.Вставить("Валюта", СсылкаНаОбъект.ВалютаДокумента);
		ДанныеДляПечати.Вставить("Покупатель", СсылкаНаОбъект.Контрагент);
		ДанныеДляПечати.Вставить("Поставщик", СсылкаНаОбъект.Организация);
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", ПолучитьДанныеТЧ(СсылканаОбъект, ЭтоКСФ, Истина));
	КонецЕсли;
	
	
	Возврат ДанныеДляПечати;
КонецФункции

Функция ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
	Если стрДлина(СокрЛП(юрФизЛицо.ИНН))=12 Тогда 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			НаименованиеОрганизации  = юрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
			НаименованиеОрганизации  = юрФизЛицо.НаименованиеПолное 
		КонецЕсли;	  
		ЭтоИП = Истина
	Иначе 
		НаименованиеОрганизации =    юрФизЛицо.НаименованиеПолное;
		ЭтоИП = Ложь;
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	OrganizationInfo.Ссылка = ЮрФизЛицо;
	OrganizationInfo.SameAsSellerOrBuyer = Ложь;
	
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, Ложь, АдресСтрокой);
	
	
КонецФункции

Функция СФОтправлена(ДокСсылка)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСсылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокОснование";
	ЗапросСФ.УстановитьПараметр("ДокОснование", ДокСсылка);
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	Пока ВыборкаСФ.Следующий() Цикл
		DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ВыборкаСФ.ДокСсылка);
		Если ЗначениеЗаполнено(DocumentId) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьПоследнееИсправление(КоррСтарт, ПоследнееОтправленное) Экспорт
	текКор = КоррСтарт;
	
	Пока Истина Цикл
		// получаем следующего кандидата, проверям его
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокСсылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.ДокументОснование = &ДокСсылка
		|	И Док.ХозОперация = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", текКор);
		Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Проверяем кандидата
			Если ПоследнееОтправленное И НЕ СФОтправлена(Выборка.ДокСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
		текКор = Выборка.ДокСсылка;
	КонецЦикла;
	
	Возврат текКор;
КонецФункции

Функция ПолучитьДочернееИсправление(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка
	|	И Док.ХозОперация = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокССылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
	КорректировкаОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
		КорректировкаОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
	Иначе
		КорректировкаОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
	КорректировкаОбъект.ДокументОснование = КорректировкаРеализацииОснование;
	
	Возврат КорректировкаОбъект;
КонецФункции

Функция СчетФактураПолученныйДокументаОснования(ДокументОснование) Экспорт
	
	Запрос= Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК Т
	|ГДЕ
	|	Т.ДокументОснование = &ДокументОснование И НЕ Т.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса= Запрос.Выполнить();
	Запрос= Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		РезультатЗапроса= Неопределено;
		
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНеотправленнуюКорректировку(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка
	|	И Док.ХозОперация = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ СФОтправлена(Выборка.ДокССылка) Тогда
			Возврат Выборка.ДокССылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
	
	Если ЗначениеЗаполнено(ПоследняяКорректировка) Тогда
		
		XMLИмяТипа= XMLТипЗнч(ПоследняяКорректировка).ИмяТипа;
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления
		|ГДЕ
		|	ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах)
		|	И ДокументОснование = &ДокументОснование");
		
		Если 	XMLИмяТипа = "DocumentRef.ПоступлениеАвтомобилей"
			ИЛИ XMLИмяТипа = "DocumentRef.КорректировкаПоступленияАвтомобилей" Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "КорректировкаПоступления", "КорректировкаПоступленияАвтомобилей");
		КонецЕсли;
		
		Пока Истина Цикл
			
			Запрос.УстановитьПараметр("ДокументОснование", ПоследняяКорректировка);
			
			РезультатЗапроса= Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПоследняяКорректировка;
			Иначе
				Выборка= РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ПоследняяКорректировка= Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПоследняяКорректировка;
	
КонецФункции

Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
	Если Document.type =  "InvoiceRevision" Тогда 
		запрос = Новый запрос;
		запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученный.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
		|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
		|	И СчетФактураПолученный.Исправление = Ложь";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));		
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Док =  результат.ДокументОснование;
			Возврат 	ПолучитьПоследнююКорректировкуПоступления(Док); 
		иначе 
			Возврат Неопределено 
		КонецЕсли;	
	ИначеЕсли Document.type = "InvoiceCorrection"  Тогда 
		запрос = Новый Запрос;
		Если ЗначениеЗаполнено(Document.OriginalInvoicerevisionNumber)=Ложь Тогда 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
			|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
			|	И СчетФактураПолученный.Исправление = Ложь";
		Иначе 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
			|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
			|	И СчетФактураПолученный.Исправление
			|	И СчетФактураПолученный.НомерИсправления = &НомерИсправления";
			Запрос.УстановитьПараметр("НомерИсправления", число(Document.OriginalInvoicerevisionNumber));		
		КонецЕсли;				
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	ИначеЕсли Document.type = "InvoiceCorrectionRevision"  Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученный.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
		|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalInvoiceCorrectionDate));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalInvoiceCorrectionNumber);
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	Иначе 
		Возврат Неопределено
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
	Возврат обЧислоПрописью(Total,ВалютаДокумента)
КонецФункции	

Функция ПолучитьПодразделениеИзДокумента(ДокССылка) Экспорт 
	Возврат ""
КонецФункции	

Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(Организация) Экспорт 
	Возврат ""
КонецФункции	

Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	
	Если Видоперации = "ПокупкаКомиссия"
		ИЛИ Видоперации = "ПоступлениеОборудования"
		ИЛИ Видоперации = "ВозвратОтПокупателя"
		ИЛИ Видоперации = "ПоступлениеАвтомобилей" Тогда
		
		Если ПолучитьФорму("Форма_Диадок_ЭД").ДляDocumentЕстьГТД(ЭДОбъект) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;
КонецФункции

Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
	ДокПоступление = СчетФактура.ДокументОснование;
КонецФункции

//{ СвязиМеждуДокументами

	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка 
		|ИЗ
		|	Документ.СчетФактураПолученный
		|ГДЕ
		|	ДокументОснование В (&МассивСсылокРНК)");
		
		МассивСодержитРТУ= Ложь;
		Для Каждого СсылкаРНК ИЗ МассивСсылокРНК Цикл
			Если ТипЗнч(СсылкаРНК) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
				МассивСодержитРТУ= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСодержитРТУ Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "СчетФактураПолученный", "СчетФактураВыданный");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка; 
		КонецЕсли;
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Результат= Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументОснование КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный
		|ГДЕ
		|	Ссылка = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		РезультатЗапроса= Запрос.Выполнить(); Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать(); РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный
		|ГДЕ
		|	ДокументОснование = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли; 
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Результат= Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ.РеализацияТоваров
		|ГДЕ
		|	НЕ ПометкаУдаления И ДокументОснование = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		РезультатЗапроса= Запрос.Выполнить(); Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать(); РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат СсылкаНаОбъект.ДокументОснование;
		
	КонецФункции
	
	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт
		
		Если ЗначениеЗаполнено(ДокРеализации) 
			И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументОснование);
		Иначе
			Возврат ДокРеализации;
		КонецЕсли;	
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусКонтрагентаНеПодходит
		|ГДЕ
		|	СтатусКонтрагентаНеПодходит.Объект В(&МассивОрганизаций1С)
		|	И СтатусКонтрагентаНеПодходит.Свойство = &ПриглашенияДатаСтатусНеПодходит
		|	И ТИПЗНАЧЕНИЯ(СтатусКонтрагентаНеПодходит.Значение) = ТИП(ДАТА)
		|	И СтатусКонтрагентаНеПодходит.Значение > &ПериодАнализаДокументов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.РеализацияТоваров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL ");
		
		Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + РазделительОбъединенияЗапросов(Истина) +
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.РеализацияАвтомобилей КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
			|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
			|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
			|			И (ЯщикиКонтрагентов.Значение <> """")
			|ГДЕ
			|	Т.Дата >= &ПериодАнализаДокументов
			|	И Т.Организация В(&МассивОрганизаций1С)
			|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL"; 
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОрганизаций1С"			   , МассивОрганизаций1С);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"		   , ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"  					   , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ПриглашенияДатаСтатусНеПодходит", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДиадокПриглашенияДатаСтатусНеПодходит"));
	
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции

	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.ИНН,
		|	ЯщикиОрганизаций.Значение КАК BoxID
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиОрганизаций
		|		ПО Организации.Ссылка = ЯщикиОрганизаций.Объект
		|			И (ЯщикиОрганизаций.Свойство = &ЯщикДиадокДляОрганизации)
		|			И (ЯщикиОрганизаций.Значение В (&BoxID))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.BoxID,
		|	ВложенныйЗапрос.Контрагент,
		|	СУММА(ВложенныйЗапрос.КоличествоДокументов) КАК КоличествоДокументов
		|ПОМЕСТИТЬ ВТ_СтатистикаДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Организации.BoxID КАК BoxID,
		|		Т.Контрагент КАК Контрагент,
		|		1 КАК КоличествоДокументов
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)";
		
		Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + РазделительОбъединенияЗапросов() +
			"	ВЫБРАТЬ
			|		ВТ_Организации.BoxID,
			|		Т.Контрагент,
			|		1
			|	ИЗ
			|		ВТ_Организации КАК ВТ_Организации
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияАвтомобилей КАК Т
			|			ПО ВТ_Организации.Организация = Т.Организация
			|				И (Т.Дата >= &ПериодАнализаДокументов)";
		КонецЕсли;
	
	    Запрос.Текст= Запрос.Текст + РазделительОбъединенияЗапросов() +
		"	ВЫБРАТЬ
		|		ВТ_Организации.BoxID,
		|		Т.Контрагент,
		|		1
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.BoxID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Организации.BoxID,
		|	ВТ_Организации.ИНН
		|ПОМЕСТИТЬ ВТ_BoxID
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент1С,
		|	Контрагенты.Код КАК Контрагент1С_Код,
		|	Контрагенты.ИНН КАК Контрагент1С_ИНН,
		|	Контрагенты.КПП КАК Контрагент1С_КПП,
		|	ЕСТЬNULL(ЯщикиКонтрагентов.Значение, """") КАК КонтрагентЭДО_ID,
		|	ЕСТЬNULL(ВТ_СтатистикаДокументов.КоличествоДокументов, 0) КАК КоличествоДокументов,
		|	ВТ_BoxID.BoxID КАК ОрганизацияЭДО_ID,
		|	ВЫБОР
		|		КОГДА ЯщикиКонтрагентов.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Сопоставлен
		|ИЗ
		|	ВТ_BoxID КАК ВТ_BoxID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_BoxID.ИНН <> Контрагенты.ИНН
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатистикаДокументов КАК ВТ_СтатистикаДокументов
		|		ПО ВТ_BoxID.BoxID = ВТ_СтатистикаДокументов.BoxID
		|			И (Контрагенты.Ссылка = ВТ_СтатистикаДокументов.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО (Контрагенты.Ссылка = ЯщикиКонтрагентов.Объект)
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)";
		
		Запрос.УстановитьПараметр("BoxID"					, BoxID);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"	, ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"				, ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ЯщикДиадокДляОрганизации", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ЯщикДиадокДляОрганизации"));
																   
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
//{ Приглашение Контрагентов

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ВнешняяОбработкаПоGUID(GUID);
		
	КонецФункции

//} Внешние обработки