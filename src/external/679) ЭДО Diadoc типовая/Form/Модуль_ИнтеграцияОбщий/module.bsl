//{ ОбщегоНазначения
	
	Функция ПолучитьИмяМодуляИнтеграции(ПринудительныйВыбор = ложь ) Экспорт
		
		Если не ПринудительныйВыбор и  Найти(Метаданные.Синоним, "Бухгалтерия предприятия, редакция 2.0") > 0 Тогда
			Возврат "Модуль_ИнтеграцияБух";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "10.3") > 0 Тогда
			Возврат "Модуль_ИнтеграцияУТ103";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "10.2") > 0 Тогда
			Возврат "Модуль_ИнтеграцияУТ102";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "Управление торговлей") > 0 Тогда
			Возврат "Модуль_ИнтеграцияУТ103";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "Комплексная автоматизация") > 0 Тогда
			Возврат "Модуль_ИнтеграцияКА";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "Управление производственным предприятием, редакция 1.3") > 0 Тогда
			Возврат "Модуль_ИнтеграцияУПП13";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "Альфа-Авто") > 0 И Найти(Метаданные.Синоним, "4.1") > 0 Тогда
			Возврат "Модуль_ИнтеграцияАльфаАвто41";
		ИначеЕсли не ПринудительныйВыбор и Найти(Метаданные.Синоним, "Альфа-Авто") > 0 И Найти(Метаданные.Синоним, "5") > 0 Тогда
			Возврат "Модуль_ИнтеграцияАльфаАвто41";
		ИначеЕсли не ПринудительныйВыбор и Найти(ВРЕГ(Метаданные.Синоним), "ТКПТ") > 0 Тогда
			Возврат "Модуль_ИнтеграцияТКПТ";
		ИначеЕсли не ПринудительныйВыбор и Метаданные.Имя = "ДАЛИОНУправлениеМагазином" ИЛИ Метаданные.Имя = "ДАЛИОНУправлениеМагазиномПРО" Тогда
			Возврат "Модуль_ИнтеграцияДалионУМ";
		ИначеЕсли не ПринудительныйВыбор и Метаданные.Имя = "ТорговыйДом" И Метаданные.Поставщик = "ООО «АСТ СОФТ»" Тогда
			Возврат "Модуль_ИнтеграцияАсторТД";
		Иначе 
		
			СписокБазовыхМодулей=	Новый СписокЗначений;
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияБух", 			"Бухгалтерия предприятия, редакция 2.0");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияУТ103", 		"Управление торговлей, редакция 10.3");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияУТ102", 		"Управление торговлей, редакция 10.2");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияКА", 			"Комплексная автоматизация, редакция 1.1");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияУПП13", 		"Управление производственным предприятием, редакция 1.3");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияАльфаАвто41", 	"Альфа-Авто: Автосалон+Автосервис+Автозапчасти");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияДалионУМ", 		"ДАЛИОН: Управление магазином, редакция 1.2");
			СписокБазовыхМодулей.Добавить("Модуль_ИнтеграцияАсторТД", 		"Астор: Торговый дом 7 SE");

			ИмяБазовогоМодуля=	?(ПринудительныйВыбор, неопределено, ВосстановитьЗначение("ДиадокИмяБазовогоМодуля"));
			Если СписокБазовыхМодулей.НайтиПоЗначению(ИмяБазовогоМодуля) = Неопределено Тогда
				
				ФормаВыбора= ЭтотОбъект.ПолучитьФорму("ФормаВыбораБазовогоМодуля");
				ФормаВыбора.СписокБазовыхМодулей = СписокБазовыхМодулей;
				
				ИмяБазовогоМодуля=	ФормаВыбора.ОткрытьМодально();
				Если НЕ ИмяБазовогоМодуля = Неопределено Тогда
					СохранитьЗначение("ДиадокИмяБазовогоМодуля", ИмяБазовогоМодуля);
					Возврат ИмяБазовогоМодуля;
				Иначе
					Предупреждение("Модуль интеграции не выбран", , "Диадок");
					Возврат Неопределено;
				КонецЕсли;
				
			Иначе
				Возврат ИмяБазовогоМодуля;
			КонецЕсли;
			
		КонецЕсли;

	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат Модуль_Интеграция.ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат Модуль_Интеграция.ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
//} ОбщегоНазначения

//{ ИдентификацияДокументов
	
	Функция ЭтоЗаказПокупателя(ДокументСсылка) Экспорт 
		Возврат 
		(  (Метаданные.Документы.Найти("СчетНаОплатуПокупателю")<>Неопределено ) и  (типЗнч(ДокументСсылка) = тип("ДокументСсылка.СчетНаОплатуПокупателю"))) 
		или
		(  (Метаданные.Документы.Найти("СчетНаОплату")<>Неопределено ) и  (типЗнч(ДокументСсылка) = тип("ДокументСсылка.СчетНаОплату"))) 
		или
		(  (Метаданные.Документы.Найти("ЗаказПокупателя")<>Неопределено ) и  (типЗнч(ДокументСсылка) = тип("ДокументСсылка.ЗаказПокупателя"))) 
	КонецФункции	
	
	Функция ЭтоКорректировкаРеализации(ДокументСсылка) Экспорт 
		Возврат (Метаданные.Документы.найти("КорректировкаРеализации")<>Неопределено) и (ТипЗнч(ДокументСсылка)=тип("ДокументСсылка.КорректировкаРеализации")) 
	КонецФункции
	
	Функция ЭтоКСФ(СсылкаНаДокумент) Экспорт 
		
		МетаданныеДокумента= СсылкаНаДокумент.Метаданные();
		
		Возврат 
		
		(МетаданныеДокумента.Реквизиты.Найти("ВидСчетаФактуры") <> Неопределено
			И Строка(СсылкаНаДокумент.ВидСчетаФактуры) = "Корректировочный")
		ИЛИ (МетаданныеДокумента.Реквизиты.Найти("ХозОперация") <> Неопределено
			 И МетаданныеДокумента.Реквизиты.Найти("Исправление") <> Неопределено
			 И СсылкаНаДокумент.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка
			 И НЕ СсылкаНаДокумент.Исправление)
		ИЛИ (МетаданныеДокумента.Реквизиты.Найти("НомерИсправляемогоКорректировочногоДокумента") <> Неопределено
			 И ЗначениеЗаполнено(СсылкаНаДокумент.НомерИсправляемогоКорректировочногоДокумента)
			 И СокрЛП(СсылкаНаДокумент.НомерИсправляемогоКорректировочногоДокумента) <> "0")
			 
	КонецФункции
	
	Функция ЭтоРТУ_ДД(СсылкаНаОбъект) Экспорт
		Возврат 
		( (Метаданные.Документы.Найти("РеализацияТоваровУслуг") <> Неопределено) И (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")))
		ИЛИ
		( (Метаданные.Документы.Найти("РеализацияТоваров") <> Неопределено)       И (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваров")))
	КонецФункции 
	
	Функция ЭтоСФ(Документ) Экспорт 
		Возврат ТипЗнч(Документ) = ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураВыданный();
	КонецФункции	
	
	Функция ЭтоСФПолученный(Документ) Экспорт 
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			Возврат Ложь
		Иначе
			Возврат (ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный"));
		КонецЕсли;
		
	КонецФункции	
	
	Функция ЭтоСчетНаОплату(ДокументСсылка) Экспорт 
		Возврат 
		(  (Метаданные.Документы.Найти("СчетНаОплатуПокупателю")<>Неопределено ) и  (типЗнч(ДокументСсылка) = тип("ДокументСсылка.СчетНаОплатуПокупателю"))) 
		или
		(  (Метаданные.Документы.Найти("СчетНаОплату")<>Неопределено ) и  (типЗнч(ДокументСсылка) = тип("ДокументСсылка.СчетНаОплату"))) 
	КонецФункции	
	
	Функция ЭтоСчетФактуранаАванс(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ЭтоСчетФактуранаАванс(СчетФактура);	
	КонецФункции	
	
//} ИдентификацияДокументов

//{ ФормированиеТЗВыгрузкиВДиадок

    Функция ПолучитьПараметрыСФ(Док) Экспорт
		
		Возврат Модуль_Интеграция.ПолучитьПараметрыСФ(Док);
		
	КонецФункции

	Функция ПолучитьТаблицуЗначенийДокументовДляОтправкиДиадок(ДатаНачала, ДатаОкончания, ТипыДокументов, Организация, Контрагент) Экспорт 
		
		ТаблицаДокументов= ТаблицаВыгрузкиВДиадок(ДатаНачала,  ДатаОкончания, ТипыДокументов, Организация, Контрагент);
		
		ТаблицаДокументов.Колонки.Добавить("ЭтоТестовыйДокумент", Новый ОписаниеТипов("Булево"));
		ТаблицаДокументов.Колонки.Добавить("ВПодразделение"		, Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ToDepartmentID"		, Новый ОписаниеТипов("Строка"));
		
		КэшМаршрутизация= Новый Соответствие;
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументов Цикл
			
			СтрокаТаблицы.ЭтоТестовыйДокумент= СтрокаТаблицы.IsTest ИЛИ Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(СтрокаТаблицы.Продавец).IsTest;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Грузополучатель) Тогда
				СтрокаТаблицы.ВПодразделение = Строка(СтрокаТаблицы.Грузополучатель);
			КонецЕсли;
			
			Маршрутизация= Маршрутизация(ПолучитьДоговорПоДокументу(СтрокаТаблицы.Документ), СтрокаТаблицы.Грузополучатель, СтрокаТаблицы.Покупатель, КэшМаршрутизация);
			Если Маршрутизация <> Неопределено Тогда
				СтрокаТаблицы.ВПодразделение= Маршрутизация.ВПодразделение;
				СтрокаТаблицы.ToDepartmentID= Маршрутизация.ToDepartmentID;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыСобытия = Новый Структура;
		ПараметрыСобытия.Вставить("Организация"		 , Организация);
		ПараметрыСобытия.Вставить("Контрагент"		 , Контрагент);
		ПараметрыСобытия.Вставить("ДатаНачала"		 , ДатаНачала);
		ПараметрыСобытия.Вставить("ДатаОкончания"	 , ДатаОкончания);
		ПараметрыСобытия.Вставить("ТипыДокументов"	 , ТипыДокументов);
		ПараметрыСобытия.Вставить("ТаблицаДокументов", ТаблицаДокументов);
		
		ОбработкаСобытияПодключаемогоМодуля("ПослеПолученияТаблицыДокументовДляОтправки", ПараметрыСобытия);
			
		Возврат ТаблицаДокументов;
		
	КонецФункции	
	
	Функция Маршрутизация(ДоговорКонтрагента, Грузополучатель, Контрагент, КэшМаршрутизация)
		
		Маршрутизация= МаршрутизацияПоДоговору(ДоговорКонтрагента, КэшМаршрутизация);
		
		Если Маршрутизация = Неопределено Тогда 
			Маршрутизация= МаршрутизацияПоКонтрагенту(Грузополучатель, КэшМаршрутизация);
		КонецЕсли;	
		
		Если Маршрутизация = Неопределено Тогда 
			Маршрутизация= МаршрутизацияПоКонтрагенту(Контрагент, КэшМаршрутизация);
		КонецЕсли;	
		
		Возврат Маршрутизация;
		
	КонецФункции
	
	Функция МаршрутизацияПоДоговору(ДоговорКонтрагента, КэшМаршрутизация)
		
		ПодразделениеПолучателя= КэшМаршрутизация[ДоговорКонтрагента];
		
		Если ПодразделениеПолучателя = Неопределено Тогда 
			
			ПодразделениеПолучателя= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыМаршрутизацииПоДоговору(ДоговорКонтрагента);
			
			КэшМаршрутизация.Вставить(ДоговорКонтрагента, ?(ПодразделениеПолучателя= Неопределено, Ложь, ПодразделениеПолучателя));
			
		КонецЕсли;
		
		Возврат ?(ПодразделениеПолучателя= Ложь, Неопределено, ПодразделениеПолучателя);
		
	КонецФункции
	
	Функция МаршрутизацияПоКонтрагенту(Контрагент, КэшМаршрутизация)
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ПодразделениеПолучателя= КэшМаршрутизация[Контрагент];
			
			Если ПодразделениеПолучателя = Неопределено Тогда 
				
				ПодразделениеПолучателя= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыМаршрутизацииПоКонтрагенту(Контрагент);
				
				КэшМаршрутизация.Вставить(Контрагент, ?(ПодразделениеПолучателя= Неопределено, Ложь, ПодразделениеПолучателя));
				
			ИначеЕсли ПодразделениеПолучателя = Ложь Тогда
				
				ПодразделениеПолучателя= Неопределено;
				
			КонецЕсли;
			
			Возврат ПодразделениеПолучателя;
			
		КонецЕсли;
		
	КонецФункции


	Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
		
		Возврат Модуль_Интеграция.ПредставлениеСуммы(Док, ПараметрыСФ);
		
	КонецФункции
	
	Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
		
		Возврат Модуль_Интеграция.ПредставлениеСуммыНДС(Док, ПараметрыСФ);
		
	КонецФункции
	
	Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
		
		Возврат Модуль_Интеграция.ОчиститьГрузополучателя(СтрокаТаблицы)
		
	КонецФункции
	
	Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД = "") Экспорт
		
		Возврат Модуль_Интеграция.ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД);
		
	КонецФункции
	
	Функция ТаблицаВыгрузкиВДиадок(ДатаНачала, ДатаОкончания, ТипыДокументов, Организация, Контрагент)
		
		Запрос= Новый Запрос;
		Запрос.МенеджерВременныхТаблиц= Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаНачала"	 , ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ТекущаяДата())));
		
		Запрос.УстановитьПараметр("ИдентификаторЯщикаКонтрагента"  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваЯщикКонтрагентаПрефикс()));
		Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок"  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадокСч", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадокСФ", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваИдентификаторДокументаВДиадок("Invoice")));
		
		Запрос.УстановитьПараметр("СвойствоДиадокСтатусОтправляемыхВПФ"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваСтатусОтправляемыхВПФ()));
		
		ТаблицаВыгрузкиВДиадок_ПодготовитьВременныеТаблицы_Отборы(Запрос, Организация, Контрагент);
		
		Запрос.УстановитьПараметр("СЧФДОП" , "СЧФДОП");
		Запрос.УстановитьПараметр("ДОП"	   , "ДОП");
		Запрос.УстановитьПараметр("СЧФ"	   , "СЧФ");
		Запрос.УстановитьПараметр("СЧФ_ДОП", "СЧФ_ДОП");
		
		Запрос.УстановитьПараметр("КСЧФДИС", "КСЧФДИС");
		Запрос.УстановитьПараметр("ДИС"	   , "ДИС");
		Запрос.УстановитьПараметр("КСЧФ"   , "КСЧФ");
		
		Запрос.УстановитьПараметр("СФ"	   	   , "СФ");
		Запрос.УстановитьПараметр("ТОРГ12АКТ"  , "ТОРГ12АКТ");
		Запрос.УстановитьПараметр("СФТОРГ12АКТ", "СФТОРГ12АКТ");
		Запрос.УстановитьПараметр("КСФ"	   	   , "КСФ");
		
		МассивВременныхТаблиц= Модуль_Интеграция.ПодготовитьВТ_СпискаОтправкиДокументов(ТипыДокументов, Запрос);
		
		ТаблицаВыгрузкиВДиадок_ПодготовитьВременнуюТаблицу_ОтборIsMyCounteragent_Записать_ПриглашенияДатаСтатусНеПодходит(Запрос, МассивВременныхТаблиц);
		
		Запрос.Текст= ТаблицаВыгрузкиВДиадок_ТекстЗапроса_РезультатыЗапросов(МассивВременныхТаблиц);
		МассивВременныхТаблиц= Неопределено;
		
		ТаблицаНастроекПечати= ТаблицаВыгрузкиВДиадок_ТаблицаНастроекПечати(Организация);
		
		ТаблицаВыгрузки= ТаблицаВыгрузкиВДиадок_НоваяТаблицаВыгрузки();
		
		Выборка= Запрос.Выполнить().Выбрать();
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		Запрос= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ДокументТип= ТипЗнч(Выборка.Документ);
			
			НоваяСтрока= ТаблицаВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.ТипДокумента = ПолучитьТипДокумента(НоваяСтрока.Документ, ТаблицаНастроекПечати, НоваяСтрока.ЭтоСчет, НоваяСтрока.ФункцияУПД);
			
			Если НоваяСтрока.ФункцияУПД = "СФ" Тогда
				НоваяСтрока.ФункцияУПД = "СЧФ";
			ИначеЕсли НоваяСтрока.ФункцияУПД = "КСФ" Тогда
				НоваяСтрока.ФункцияУПД = "КСЧФ";
			ИначеЕсли НоваяСтрока.ФункцияУПД = "ТОРГ12АКТ" Тогда
				НоваяСтрока.ФункцияУПД = "ДОП";
			КонецЕсли;
			
			Если ДокументТип = ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураВыданный() Тогда
				
				ПараметрыСФ= ПолучитьПараметрыСФ(НоваяСтрока.Документ);
				НоваяСтрока.СуммаДокумента=	ПредставлениеСуммы(НоваяСтрока.Документ, ПараметрыСФ);
				НоваяСтрока.СуммаНДС=		ПредставлениеСуммыНДС(НоваяСтрока.Документ, ПараметрыСФ);
				
			ИначеЕсли XMLТип(ДокументТип).ИмяТипа <> "DocumentRef.КорректировкаРеализации" Тогда
				
				НоваяСтрока.СуммаДокумента=	Формат(НоваяСтрока.СуммаДокументаЗначение, "ЧДЦ=2");
				НоваяСтрока.СуммаНДС=	    Формат(НоваяСтрока.СуммаНДСЗначение		 , "ЧДЦ=2");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаВыгрузки;
		
	КонецФункции
	
	Процедура ТаблицаВыгрузкиВДиадок_ПодготовитьВременныеТаблицы_Отборы(Запрос, Организация, Контрагент)
		
		Запрос.Текст=
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ЯщикиКонтрагентов.Значение КАК CounteragentID,
		|	ФормироватьУПД.Значение КАК ФормироватьУПД,
		|	Контрагенты.ИНН
		|ПОМЕСТИТЬ ОтборКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Контрагенты.Ссылка = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ИдентификаторЯщикаКонтрагента)
		|			И (НЕ ЯщикиКонтрагентов.Значение В (&МассивПустыхЗначений))		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ФормироватьУПД
		|		ПО Контрагенты.Ссылка = ФормироватьУПД.Объект
		|			И (ФормироватьУПД.Свойство = &СвойствоДиадокФормироватьУПДКонтрагент)
		|			И (НЕ ФормироватьУПД.Значение В (&МассивПустыхЗначений))
		|ГДЕ
		|	(&Контрагент = НЕОПРЕДЕЛЕНО
		|			ИЛИ Контрагенты.Ссылка = &Контрагент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ОтборКонтрагенты.Контрагент КАК Грузополучатель,
		|	ОтборКонтрагенты.CounteragentID,
		|	ОтборКонтрагенты.ФормироватьУПД
		|ПОМЕСТИТЬ ОтборГрузополучатели
		|ИЗ
		|	ОтборКонтрагенты КАК ОтборКонтрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ОтборКонтрагенты.ИНН = Контрагенты.ИНН
		|			И ОтборКонтрагенты.Контрагент <> Контрагенты.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ОтборКонтрагенты.Контрагент,
		|	Контрагенты.Ссылка,
		|	ЯщикиКонтрагентов.Значение,
		|	ФормироватьУПДКонтрагент.Значение
		|ИЗ
		|	ОтборКонтрагенты КАК ОтборКонтрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ОтборКонтрагенты.ИНН = Контрагенты.ИНН
		|			И ОтборКонтрагенты.Контрагент <> Контрагенты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО (НЕ ЯщикиКонтрагентов.Значение В (&МассивПустыхЗначений))
		|			И (ЯщикиКонтрагентов.Свойство = &ИдентификаторЯщикаКонтрагента)
		|			И (Контрагенты.Ссылка = ЯщикиКонтрагентов.Объект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ФормироватьУПДКонтрагент
		|		ПО (ФормироватьУПДКонтрагент.Свойство = &СвойствоДиадокФормироватьУПДКонтрагент)
		|			И (НЕ ФормироватьУПДКонтрагент.Значение В (&МассивПустыхЗначений))
		|			И (Контрагенты.Ссылка = ФормироватьУПДКонтрагент.Объект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОтправкаНепроведенных.Значение, """") = ""Да""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОтпрНеПроведенные,
		|	ЕСТЬNULL(СпособОтправкиСчета.Значение, ""СчетНаОплату"") КАК СпособОтправкиСчета,
		|	ЕСТЬNULL(СпособОтправкиСверки.Значение, ""АктСверкиВзаиморасчетов"") КАК СпособОтправкиСверки,
		|	ЕСТЬNULL(ФормироватьУПД.Значение, ""НЕТ"") КАК ФормироватьУПД
		|ПОМЕСТИТЬ ОтборОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикДиадокДляОрганизации
		|		ПО Организации.Ссылка = ЯщикДиадокДляОрганизации.Объект
		|			И (ЯщикДиадокДляОрганизации.Свойство = &СвойствоЯщикДиадокДляОрганизации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ОтправкаНепроведенных
		|		ПО Организации.Ссылка = ОтправкаНепроведенных.Объект
		|			И (ОтправкаНепроведенных.Свойство = &СвойствоДиадокОтправкаНепроведенных)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СпособОтправкиСчета
		|		ПО Организации.Ссылка = СпособОтправкиСчета.Объект
		|			И (СпособОтправкиСчета.Свойство = &СвойствоДиадокСпособОтправкиСчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СпособОтправкиСверки
		|		ПО Организации.Ссылка = СпособОтправкиСверки.Объект
		|			И (СпособОтправкиСверки.Свойство = &СвойствоДиадокСпособОтправкиСверки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ФормироватьУПД
		|		ПО Организации.Ссылка = ФормироватьУПД.Объект
		|			И (ФормироватьУПД.Свойство = &СвойствоДиадокФормироватьУПД)
		|ГДЕ
		|	Организации.Ссылка В (&Организация)";
		
		МассивПустыхЗначений = Новый Массив;
		МассивПустыхЗначений.Добавить("");
		МассивПустыхЗначений.Добавить(Неопределено);
		
		Запрос.УстановитьПараметр("МассивПустыхЗначений", МассивПустыхЗначений);
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент" , Контрагент);
			
		Запрос.УстановитьПараметр("СвойствоЯщикДиадокДляОрганизации"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваЯщикОрганизации()));
		Запрос.УстановитьПараметр("СвойствоДиадокОтправкаНепроведенных"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваОтправлятьНеПроведенные()));
		Запрос.УстановитьПараметр("СвойствоДиадокСпособОтправкиСчета"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификатрСвойстваСпособОтправкиСчета()));
		Запрос.УстановитьПараметр("СвойствоДиадокСпособОтправкиСверки"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификатрСвойстваСпособОтправкиСверки()));
		Запрос.УстановитьПараметр("СвойствоДиадокФормироватьУПД"		  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваФормироватьУПД()));
		Запрос.УстановитьПараметр("СвойствоДиадокФормироватьУПДКонтрагент", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваФормироватьУПДКонтрагент()));
		
		Запрос.Выполнить();
		
		Запрос.Параметры.Удалить("Организация");
		Запрос.Параметры.Удалить("Контрагент");
		
		Запрос.Параметры.Удалить("СвойствоЯщикДиадокДляОрганизации"	  	 );
		Запрос.Параметры.Удалить("СвойствоДиадокОтправкаНепроведенных"	 );
		Запрос.Параметры.Удалить("СвойствоДиадокСпособОтправкиСчета"  	 );
		Запрос.Параметры.Удалить("СвойствоДиадокСпособОтправкиСверки" 	 );
		Запрос.Параметры.Удалить("СвойствоДиадокФормироватьУПД"		  	 );
		Запрос.Параметры.Удалить("СвойствоДиадокФормироватьУПДКонтрагент");
		
	КонецПроцедуры
	
	Процедура ТаблицаВыгрузкиВДиадок_ПодготовитьВременнуюТаблицу_ОтборIsMyCounteragent_Записать_ПриглашенияДатаСтатусНеПодходит(Запрос, МассивВременныхТаблиц)
		
		ОтборIsMyCounteragent= Новый ТаблицаЗначений;
		ОтборIsMyCounteragent.Колонки.Добавить("Продавец"	   , Справочники.ТипВсеСсылки());
		ОтборIsMyCounteragent.Колонки.Добавить("CounteragentID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)));
		ОтборIsMyCounteragent.Колонки.Добавить("IsTest"		   , Новый ОписаниеТипов("Булево"));
		
		Запрос.Текст= ТаблицаВыгрузкиВДиадок_ТекстЗапроса_ПродавецCounteragentID(МассивВременныхТаблиц);
		
		ВыборкаПродавец= Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПродавец.Следующий() Цикл
			
			ЕстьКонтрагентыСтатусНеПодходит= Ложь;
			СоответствиеCounteragentID= Новый Соответствие;
			
			Выборка= ВыборкаПродавец.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствиеCounteragentID.Вставить(Выборка.CounteragentID, NULL);
			КонецЦикла;
			
			ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").Заполнить_СоответствиеCounteragentID_Значением_IsTest_Только_IsMyCounteragent(ВыборкаПродавец.Продавец, СоответствиеCounteragentID);
			
			Для Каждого КлючИЗначение ИЗ СоответствиеCounteragentID Цикл
				
				Если КлючИЗначение.Значение = NULL Тогда
					ЕстьКонтрагентыСтатусНеПодходит= Истина;
				Иначе
					НоваяСтрока= ОтборIsMyCounteragent.Добавить();
					НоваяСтрока.Продавец= 		ВыборкаПродавец.Продавец;
					НоваяСтрока.CounteragentID= КлючИЗначение.Ключ;
					НоваяСтрока.IsTest= 		КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьКонтрагентыСтатусНеПодходит И ВыборкаПродавец.Дата > ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ВыборкаПродавец.Продавец, "ДиадокПриглашенияДатаСтатусНеПодходит", '00010101') Тогда
				ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(ВыборкаПродавец.Продавец, "ДиадокПриглашенияДатаСтатусНеПодходит", ВыборкаПродавец.Дата);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ОтборIsMyCounteragent", ОтборIsMyCounteragent);
		
		Запрос.Текст= "ВЫБРАТЬ Продавец, CounteragentID, IsTest ПОМЕСТИТЬ ОтборIsMyCounteragent ИЗ &ОтборIsMyCounteragent КАК Т";
		
		Запрос.Выполнить();
		
		Запрос.Параметры.Удалить("ОтборIsMyCounteragent");
		
	КонецПроцедуры
	
	Функция ТаблицаВыгрузкиВДиадок_ТекстЗапроса_ПродавецCounteragentID(МассивВременныхТаблиц)
		
		ТекстЗапроса= "";
		Разделитель= "";
		
		Для Каждого ИмяВременнойТаблицы ИЗ МассивВременныхТаблиц Цикл
			
			ТекстЗапроса= ТекстЗапроса + Разделитель + 
			
			"ВЫБРАТЬ
			|	Продавец,
			|	CounteragentID,
			|	МАКСИМУМ(Дата) КАК Дата
			|ИЗ
			|	" + ИмяВременнойТаблицы + "
			|
			|СГРУППИРОВАТЬ ПО
			|	CounteragentID,
			|	Продавец";
			
			Разделитель= РазделительОбъединенияЗапросов(Истина);
			
		КонецЦикла;
		
		ТекстЗапроса= ТекстЗапроса + "
		|ИТОГИ
		|	МАКСИМУМ(Дата)
		|ПО
		|	Продавец";
		
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	Функция ТаблицаВыгрузкиВДиадок_ТекстЗапроса_РезультатыЗапросов(МассивВременныхТаблиц)
		
		ТекстЗапроса= "";
		Разделитель=  "";
		
		Для Каждого ИмяВременнойТаблицы ИЗ МассивВременныхТаблиц Цикл
			
			ТекстЗапроса= ТекстЗапроса + Разделитель + 
			
			"ВЫБРАТЬ
			|	Т.Документ,
			|	Т.Продавец,
			|	Т.Покупатель,
			|	Т.СуммаДокументаЗначение,
			|	Т.СуммаНДСЗначение,
			|	Т.Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	Т.ID,
			|	Т.CounteragentID,
			|	Т.Грузополучатель,
			|	Т.СостояниеОтправкиДополнительныхВПФ,
			|	Т.ФункцияУПД,
			|	Т.ЭтоСчет
			|ИЗ
			|	ОтборIsMyCounteragent КАК ОтборIsMyCounteragent
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВременнойТаблицы + " КАК Т
			|		ПО ОтборIsMyCounteragent.Продавец = Т.Продавец
			|			И ОтборIsMyCounteragent.CounteragentID = Т.CounteragentID";
			
			Разделитель= РазделительОбъединенияЗапросов();
			
		КонецЦикла;
		
		ТекстЗапроса= ТекстЗапроса + "
		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Номер";
		
		Возврат ТекстЗапроса;
		
	КонецФункции

	Функция ТаблицаВыгрузкиВДиадок_НоваяТаблицаВыгрузки()
		
		СправочникиТипВсеСсылки= 	 Справочники.ТипВсеСсылки();
		ДокументыТипВсеСсылки= 	 	 Документы.ТипВсеСсылки();
		ОписаниеТиповМоментВремени=	 Новый ОписаниеТипов("МоментВремени");
		ОписаниеТиповСтрока=	 	 Новый ОписаниеТипов("Строка");
		ОписаниеТиповБулево=	 	 Новый ОписаниеТипов("Булево");
		ОписаниеТиповЧисло= 	 	 Новый ОписаниеТипов("Число");
		ОписаниеТиповДата=	 	 	 Новый ОписаниеТипов("Дата");
		
		НоваяТаблицаВыгрузки= Новый ТаблицаЗначений;
		
		НоваяТаблицаВыгрузки.Колонки.Добавить("Документ"				, ДокументыТипВсеСсылки);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Продавец"				, СправочникиТипВсеСсылки);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Покупатель"				, СправочникиТипВсеСсылки);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Грузополучатель"			, СправочникиТипВсеСсылки);
		НоваяТаблицаВыгрузки.Колонки.Добавить("СуммаДокументаЗначение"	, ОписаниеТиповЧисло);
		НоваяТаблицаВыгрузки.Колонки.Добавить("СуммаНДСЗначение"		, ОписаниеТиповЧисло);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Валюта"					, СправочникиТипВсеСсылки);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Проведен"				, ОписаниеТиповБулево);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Дата"					, ОписаниеТиповДата);
		НоваяТаблицаВыгрузки.Колонки.Добавить("Номер"					, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("ID"						, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("ФункцияУПД"				, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("МоментВремени"			, ОписаниеТиповМоментВремени);
		НоваяТаблицаВыгрузки.Колонки.Добавить("CounteragentID"			, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("СуммаДокумента"			, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("СуммаНДС"				, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("ТипДокумента"			, ОписаниеТиповСтрока);
		НоваяТаблицаВыгрузки.Колонки.Добавить("ЭтоСчет"					, ОписаниеТиповБулево);
		НоваяТаблицаВыгрузки.Колонки.Добавить("IsTest"					, ОписаниеТиповБулево);
		НоваяТаблицаВыгрузки.Колонки.Добавить("СостояниеОтправкиДополнительныхВПФ", ОписаниеТиповСтрока);
		
		Возврат НоваяТаблицаВыгрузки;
		
	КонецФункции
	
	Функция ТаблицаВыгрузкиВДиадок_ТаблицаНастроекПечати(Организация)
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(ПечатныеФормыДляТоваров.Значение, ""Торг-12"") КАК ПечатнаяФормаДляТоваров,
		|	ЕСТЬNULL(ПечатныеФормыДляУслуг.Значение, ""Акт"") КАК ПечатнаяФормаДляУслуг
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиДиадок
		|		ПО Организации.Ссылка = ЯщикиДиадок.Объект
		|			И (ЯщикиДиадок.Свойство = &СвойствоЯщикДиадокДляОрганизации)
		|			И (ЯщикиДиадок.Значение <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ПечатныеФормыДляТоваров
		|		ПО Организации.Ссылка = ПечатныеФормыДляТоваров.Объект
		|			И (ПечатныеФормыДляТоваров.Объект ССЫЛКА Справочник.Организации)
		|			И (ПечатныеФормыДляТоваров.Свойство = &СвойствоПечатнаяФормаДляТоваров)
		|			И (ПечатныеФормыДляТоваров.Значение <> """")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ПечатныеФормыДляУслуг
		|		ПО Организации.Ссылка = ПечатныеФормыДляУслуг.Объект
		|			И (ПечатныеФормыДляУслуг.Объект ССЫЛКА Справочник.Организации)
		|			И (ПечатныеФормыДляУслуг.Свойство = &СвойствоПечатнаяФормаДляУслуг)
		|			И (ПечатныеФормыДляУслуг.Значение <> """")
		|ГДЕ
		|	Организации.Ссылка В (&Организация)");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.УстановитьПараметр("СвойствоЯщикДиадокДляОрганизации",ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваЯщикОрганизации()));
		Запрос.УстановитьПараметр("СвойствоПечатнаяФормаДляТоваров"	,ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваПечатнаяФормаДляТоваров()));
		Запрос.УстановитьПараметр("СвойствоПечатнаяФормаДляУслуг"	,ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ИдентификаторСвойстваПечатнаяФормаДляУслуг()));
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
//} ФормированиеТЗВыгрузкиВДиадок

//{ ОтправкаДокументов
	
	Процедура УстановитьПризнакВыставленияСФ(ДокументСсылка, ТекстКомментарияДиадок) Экспорт 
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		записать = Ложь;
		Реквизиты = ДокументОбъект.Метаданные().Реквизиты;
		Если реквизиты.найти("Выставлен")<>Неопределено Тогда 
			ДокументОбъект.выставлен = Истина;
			записать = Истина;
		КонецЕсли;
		Если реквизиты.найти("КодСпособаВыставления")<>Неопределено Тогда 
			ДокументОбъект.КодСпособаВыставления = 2;
			записать = Истина;
		КонецЕсли;
		Если реквизиты.найти("ДатаВыставления")<>Неопределено Тогда 
			ДокументОбъект.ДатаВыставления = ТекущаяДата();
			записать = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда 
			ДокументОбъект.комментарий =?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий+" ","")+ТекстКомментарияДиадок;
			записать = Истина
		КонецЕсли;	 
		Если записать Тогда 
			Попытка
				ДокументОбъект.Записать(?(ДокументОбъект.проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись) );
			Исключение
				ДокументОбъект.записать();
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
		
//} ОтправкаДокументов

//{ ПолучениеДанныхДляФУФ
	
	Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьКПППокупателя(СчетФактура);	
	КонецФункции
	
	Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьДатуНомерДокументовОплаты(СчетФактура);	
	КонецФункции
	
	Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(СчетФактура);	
	КонецФункции	
	
	Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
		Возврат Модуль_Интеграция.ПолучитьДатуНомерДоговора(ДокументСсылка);	
	КонецФункции
		
	Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьНомераДляКСФ(СчетФактура);	
	КонецФункции	
	
	Функция ПолучитьНомераДляСФ(СчетФактура) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьНомераДляСФ(СчетФактура);	
	КонецФункции	
	
	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ = Истина) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ);
	КонецФункции
	
	Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура = Неопределено, ЭтоКСФ = Ложь) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ);
	КонецФункции
	
	Функция ПолучитьПредставлениеХарактеристикиИСерии(Выборка) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьПредставлениеХарактеристикиИСерии(Выборка);
	КонецФункции 
	
	Функция Документ_Организация(Документ) Экспорт
		
		Возврат Модуль_Интеграция.Документ_Организация(Документ);
		
	КонецФункции 
	
	Функция Организация_КПП(Организация) Экспорт
		
		Возврат Модуль_Интеграция.Организация_КПП(Организация);
		
	КонецФункции

	Функция ПолучитьСтруктуруШапки(ДокументОснование, СчетФактура = Неопределено) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьСтруктуруШапки(ДокументОснование, СчетФактура);
	КонецФункции
	
	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		Возврат Модуль_Интеграция.ПолучитьНомерНаПечатьДиадок(ДокументСсылка);
	КонецФункции
	
	Функция ПолучитьБанковскийСчетПоДокументу(ДокТоварный) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьБанковскийСчетПоДокументу(ДокТоварный)
	КонецФункции
	
	Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
		Возврат Модуль_Интеграция.ПолучитьВидЮрАдресаКонтрагента()
	КонецФункции
	
	Функция ПолучитьГрузополучателяПоДокументу(ДокументСсылка) Экспорт 
		Если ЭтоРТУ(ДокументСсылка) Тогда 
			Если ДокументСсылка.Метаданные().Реквизиты.Найти("Грузополучатель") <> Неопределено Тогда
				Возврат ДокументСсылка.Грузополучатель;
			Иначе
				Возврат ДокументСсылка.Контрагент;
			КонецЕсли;
		иначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокументСсылка) = Истина   Тогда
			Если 	(ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено 
				И ДокументСсылка.ДокументыОснования.количество()>0 
				и (типЗнч(ДокументСсылка.ДокументыОснования[0].ДокументОснование) = тип("ДокументСсылка.РеализацияТоваровУслуг")
				ИЛИ типЗнч(ДокументСсылка.ДокументыОснования[0].ДокументОснование) = тип("ДокументСсылка.КорректировкаРеализации")
				ИЛИ типЗнч(ДокументСсылка.ДокументыОснования[0].ДокументОснование) = тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))) Тогда
				Возврат ДокументСсылка.ДокументыОснования[0].ДокументОснование.Грузополучатель;
			ИначеЕсли (Метаданные.Документы.Найти("РеализацияТоваров") <> Неопределено И ТипЗнч(ДокументСсылка.ДокументОснование) = тип("ДокументСсылка.РеализацияТоваров")) Тогда 
				Возврат ДокументСсылка.ДокументОснование.Контрагент;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат Неопределено
	КонецФункции	
	
	Функция ПолучитьДанныеДляФормированияАктаСверки(ДокСсылка) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьДанныеДляФормированияАктаСверки(ДокСсылка)
	КонецФункции	
	
	Функция ПолучитьДоговорПоДокументу(ДокументСсыдка) Экспорт 
		Возврат ?(ДокументСсыдка.метаданные().реквизиты.найти("ДоговорКонтрагента")<>Неопределено, ДокументСсыдка.ДоговорКонтрагента, ДокументСсыдка.ДоговорВзаиморасчетов);
	КонецФункции	
	
	Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет) 
	КонецФункции	
	
	Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьПредставлениеАдресаДляДиадок(записьрегистра)
	КонецФункции	
	
	Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)
	КонецФункции
	
	Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)
	КонецФункции
	
	Функция ПолучитьСуммуДокумента(ДокументСсылка) Экспорт 
		Если ДокументСсылка.метаданные().реквизиты.найти("СуммаДокумента")<>Неопределено  Тогда
			Возврат ДокументСсылка.СуммаДокумента
		Иначе 
			Возврат 0;
		КонецЕсли;
	КонецФункции	
	
	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка);	
	КонецФункции	
	
	Функция ПолучитьСуммуНДС(ДокументСсылка) Экспорт 
		
		результат = 0;
		
		Если ДокументСсылка.метаданные().ТабличныеЧасти.Найти("Товары")<>Неопределено Тогда 
			Если ДокументСсылка.метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("СуммаНДС") <> Неопределено Тогда
				результат = результат + ДокументСсылка.Товары.Итог("СуммаНДС");
			ИначеЕсли ДокументСсылка.метаданные().ТабличныеЧасти.Товары.Реквизиты.Найти("СтавкаНДСВознаграждения") <> Неопределено Тогда
				результат = результат + ДокументСсылка.Товары.Итог("СтавкаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументСсылка.метаданные().ТабличныеЧасти.Найти("Услуги")<>Неопределено Тогда 
			результат = результат+  ДокументСсылка.Услуги.Итог("СуммаНДС")
		КонецЕсли;
		
		Возврат результат;
		
	КонецФункции	
	
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат Модуль_Интеграция.ДокументБезНДС(СсылкаНаОбъект);	
		
	КонецФункции
	    	
	Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт, ЭтоУПД) Экспорт
		Возврат Модуль_Интеграция.ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт, ЭтоУПД)
	КонецФункции	
	
	Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   
	КонецФункции
	
	Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента)
	КонецФункции	
	
	Функция ПолучитьПодразделениеИзДокумента(ДокументСсылка) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьПодразделениеИзДокумента(ДокументСсылка);
	КонецФункции
	
	Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка);
	КонецФункции            
	
	Функция ПолучитьНомерГТД(НомерГТД) Экспорт
		
		Возврат Модуль_Интеграция.ПолучитьНомерГТД(НомерГТД);
		
	КонецФункции
	
	Функция ПолучитьФИОРуководителяДляСчета(ДанныеШапки, ПараметрыОтправкиНаСогласование) Экспорт
		
		Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияБух" Тогда 
			
			ФИОРуководителя = Модуль_Интеграция.ПолучитьФИОРуководителяДляСчета(ДанныеШапки);
			
		Иначе
			
			Если ПараметрыОтправкиНаСогласование <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта) Тогда
					ФИОРуководителя = ?(ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПодписанта), ПараметрыОтправкиНаСогласование.ФИОПодписанта, "_");
				Иначе
					ФИОРуководителя = ?(ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.ФИОПолучателя), ПараметрыОтправкиНаСогласование.ФИОПолучателя, "_");
				КонецЕсли;
			Иначе 	
				BoxId= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(ДанныеШапки.Организация);
				ФИОРуководителя = Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(BoxId);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ФИОРуководителя; 
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат Модуль_Интеграция.ПустаяСсылкаНаНомерГТД();
		
	КонецФункции
	
//} ПолучениеДанныхДляФУФ

//{ ЗаполнениеСтруктурДляФУФ

	Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура = Неопределено, ФормированиеСФ = Ложь) Экспорт
		Возврат Модуль_Интеграция.ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура, ФормированиеСФ);	
	КонецФункции
	
	Процедура ПерезаполнитьСуммыПоУЕвРублях(ТабличнаяЧасть, ДокументРеализации, ДанныеШапки = Неопределено) Экспорт 
		Модуль_Интеграция.ПерезаполнитьСуммыПоУЕвРублях(ТабличнаяЧасть, ДокументРеализации, ДанныеШапки);
	КонецПроцедуры
	
	Процедура ЗаполнитьСтруктуруАдреса(AddressContent, ЮрФизЛицо, ЮрАдрес = Ложь, АдресСтрокой = "") Экспорт  
		Модуль_Интеграция.ЗаполнитьСтруктуруАдреса(AddressContent, ЮрФизЛицо, ЮрАдрес, АдресСтрокой)
	КонецПроцедуры 
	
	Процедура ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
		Модуль_Интеграция.ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой)
	КонецПроцедуры	

	Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации = Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "") Экспорт 
		Модуль_Интеграция.ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации,  ЮрАдрес, АдресДляСФ, АдресСтрокой)
	КонецПроцедуры	
	
	Процедура Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет= Неопределено, АдресСтрокой = "") Экспорт 
		
		Модуль_Интеграция.Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет, АдресСтрокой)
		
	КонецПроцедуры	

//} ЗаполнениеСтруктурДляФУФ

//{ СвязиМеждуДокументами
	
	Функция ПервыйДокументСсылаетсяНаВторой(ПервыйДокумент, ВторойДокумент ) Экспорт 
		Если первыйДокумент = ВторойДокумент Тогда
			Возврат Истина
		ИначеЕсли (ПервыйДокумент.Метаданные().реквизиты.найти("ДокументОснование")<>Неопределено) 	и (ПервыйДокумент.ДокументОснование = ВторойДокумент) Тогда
			Возврат Истина
		ИначеЕсли (первыйДокумент.метаданные().ТабличныеЧасти.найти("ДокументыОснования")<>Неопределено) и
			(ПервыйДокумент.метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.Найти("ДокументОснование")<>Неопределено) Тогда
			Для каждого стр из ПервыйДокумент.ДокументыОснования цикл 
				Если стр.ДокументОснование = ВторойДокумент Тогда
					Возврат Истина
				КонецЕсли;
			конецЦикла;
		КонецЕсли;
		
		Возврат Ложь
	КонецФункции
	
	//{ СвязиИСФ_КСФ
		
		//{ Входящие
			
			Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
				Возврат Модуль_Интеграция.получитьДокументОснованиеДляКорректировкиПоступления(Document)
			КонецФункции
			
			Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
				Возврат Модуль_Интеграция.ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка)	
			КонецФункции
			
		//} Входящие
		
		//{ Исходящие
			
			Функция ПолучитьДокОснованиеКорректировкиРеализациии(ДокументСсылка) Экспорт 
				Если НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументРеализации") = Неопределено Тогда
					Возврат ДокументСсылка.ДокументРеализации
				Иначе
					Возврат ДокументСсылка.ДокументОснование
				КонецЕсли;
			КонецФункции
			
			Функция ПолучитьСсылкиДляСозданияКорректировкиРеализации(КорректировкаРеализацииОснование, ТипНовогоДокумента) Экспорт 
				Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
					Корр = Модуль_Интеграция.ПолучитьПоследнееИсправление(КорректировкаРеализацииОснование, Истина);
					КорректировкаРеализацииСсылка = Модуль_Интеграция.ПолучитьДочернееИсправление(Корр);
				Иначе
					Корр = Модуль_Интеграция.ПолучитьПоследнееИсправление(КорректировкаРеализацииОснование, Ложь);
					КорректировкаРеализацииСсылка = Модуль_Интеграция.ПолучитьНеотправленнуюКорректировку(Корр);
				КонецЕсли;
				ИсправленныйСчетФактураСсылка = Модуль_Интеграция.ПолучитьСчетФактуруПоКорректировкеРеализации(КорректировкаРеализацииСсылка);
				
				Результат = Новый Структура("КорректировкаРеализацииОснование, КорректировкаРеализацииСсылка, ИсправленныйСчетФактураСсылка");
				Результат.КорректировкаРеализацииОснование =   Корр;
				Результат.КорректировкаРеализацииСсылка =   КорректировкаРеализацииСсылка;
				Результат.ИсправленныйСчетФактураСсылка =   ИсправленныйСчетФактураСсылка;
				Возврат Результат;
			КонецФункции
			
			Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ) Экспорт   
				Возврат Модуль_Интеграция.ПолучитьСФОснованиеДляИСФДиадок(ИСФ);
			КонецФункции	
			
		//} Исходящие
		
	//} СвязиИСФ_КСФ
	
	//{ СвязиРТУ
		
		Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
			
			Возврат Модуль_Интеграция.НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
			
		КонецФункции
		
		Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
			Возврат  Модуль_Интеграция.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект)
		КонецФункции
		
		Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт 
			Возврат  Модуль_Интеграция.ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект)
		КонецФункции	
		
		Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
			Возврат Модуль_Интеграция.ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект)
		КонецФункции
		
		Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
			Возврат Модуль_Интеграция.ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект)
		КонецФункции
		
		Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт
			
			Возврат Модуль_Интеграция.ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
			
		КонецФункции
		
	//} СвязиРТУ
	
//} СвязиМеждуДокументами

//{ СозданиеДокументов1С
	
	Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
		
		Возврат Модуль_Интеграция.ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров)
		
	КонецФункции
	
	Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
		
		Возврат Модуль_Интеграция.ПолучитьДатуНомерВходящейНакладной(ДокСсылка)
		
	КонецФункции
	
	Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
		
		Возврат Модуль_Интеграция.ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка)
		
	КонецФункции
	
	Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
		Возврат Модуль_Интеграция.ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура)
	КонецФункции
	
	Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
		Возврат Модуль_Интеграция.ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование)  
	КонецФункции
	
	Функция СчетФактураПолученныйДокументаОснования(ДокументОснование) Экспорт
		Возврат Модуль_Интеграция.СчетФактураПолученныйДокументаОснования(ДокументОснование);
	КонецФункции
	
	Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения) Экспорт 
		Возврат Модуль_Интеграция.ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)	
	КонецФункции	
	
	Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
		Возврат Модуль_Интеграция.ПолучитьСписокВидовДоговоров(ВидОперации) 
	КонецФункции
	
	Функция ТекстЗапросаПодборНакладных(Direction) Экспорт
		
		Если ПолучитьПрофильКонфигурации().НастройкиПоступления.ПоступлениеНМА = Истина И Direction = "Inbound" Тогда
			
			ПоступлениеНМА = "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Контрагент,
			|		Т.Организация,
			|		Т.Ссылка,
			|		Т.Проведен,
			|		Т.Дата,
			|		Т.Номер,
			|		Т.СуммаДокумента,
			|		Т.ДатаВходящегоДокумента,
			|		Т.НомерВходящегоДокумента,
			|		Т.МоментВремени КАК МоментВремени,
			|		Т.Комментарий
			|	ИЗ
			|		Документ.ПоступлениеНМА КАК Т
			|	ГДЕ
			|		Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|		И Т.Организация = &Организация
			|		И НЕ Т.ПометкаУдаления
			|		И Т.Контрагент В (&СписокКонтрагентов)";
		Иначе
			ПоступлениеНМА = "";
		КонецЕсли;
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41" И Метаданные.Документы.Найти("ПоступлениеАвтомобилей") <> Неопределено Тогда
			ПоступлениеАвтомобилей = "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Контрагент,
			|		Т.Организация,
			|		Т.Ссылка,
			|		Т.Проведен,
			|		Т.Дата,
			|		Т.Номер,
			|		Т.СуммаДокумента,
			|		Т.Дата,
			|		Т.Номер,
			|		Т.МоментВремени,
			|		Т.Комментарий
			|	ИЗ
			|		Документ.ПоступлениеАвтомобилей КАК Т
			|	ГДЕ
			|		Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|		И Т.Организация = &Организация
			|		И НЕ Т.ПометкаУдаления
			|		И Т.Контрагент В (&СписокКонтрагентов)";
		Иначе 
			ПоступлениеАвтомобилей = "";
		КонецЕсли;
		
		Если Метаданные.Документы.Найти("ПоступлениеДопРасходов") <> Неопределено Тогда
			ПоступлениеДопРасходов= "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Т.Контрагент,
			|		Т.Организация,
			|		Т.Ссылка,
			|		Т.Проведен,
			|		Т.Дата,
			|		Т.Номер,
			|		Т.СуммаДокумента,
			|		Т.ДатаВходящегоДокумента,
			|		Т.НомерВходящегоДокумента,
			|		Т.МоментВремени,
			|		Т.Комментарий
			|	ИЗ
			|		Документ.ПоступлениеДопРасходов КАК Т
			|	ГДЕ
			|   	Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|		И Т.Организация = &Организация
			|		И НЕ Т.ПометкаУдаления
			|  		И Т.Контрагент В (&СписокКонтрагентов)";
		Иначе
			ПоступлениеДопРасходов= "";
		КонецЕсли;
		
		Если Метаданные.Документы.Найти("СчетФактураПолученный") <> Неопределено Тогда
			
			Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
				
				ЗапросДокументыОснования = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Т.Ссылка,
				|	Т.ДокументОснование
				|ПОМЕСТИТЬ ДокОснование
				|ИЗ
				|	Документ.СчетФактураПолученный КАК Т
				|ГДЕ
				|	Т.Организация = &Организация
				|;";
				
			Иначе
				
				ЗапросДокументыОснования = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
				|	Т.Ссылка,
				|	Т.ДокументОснование
				|ПОМЕСТИТЬ ДокОснование
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
				|ГДЕ
				|	Т.Ссылка.Организация = &Организация
				|;";
				
			КонецЕсли;
			
		ИначеЕсли Метаданные.Документы.Найти("РегистрацияСчетаФактуры") <> Неопределено Тогда
			
			ЗапросДокументыОснования = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	Т.Ссылка,
			|	Т.Основание КАК ДокументОснование
			|ПОМЕСТИТЬ ДокОснование
			|ИЗ
			|	Документ.РегистрацияСчетаФактуры.СоставНДС КАК Т
			|ГДЕ
			|	Т.Ссылка.Фирма = &Организация
			|;";
			
		Иначе
			
			ЗапросДокументыОснования= 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка,
			|	Т.Ссылка КАК ДокументОснование
			|ПОМЕСТИТЬ ДокОснование
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК Т
			|ГДЕ
			|	Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И Т.Фирма = &Организация
			|	И Т.НомерСчетаФактуры <> """"
			|	И НЕ Т.ПометкаУдаления
			|	И Т.Контрагент В (&СписокКонтрагентов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Ссылка
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя КАК Т
			|ГДЕ
			|	Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И Т.Фирма = &Организация
			|	И Т.НомерСчетаФактуры <> """"
			|	И НЕ Т.ПометкаУдаления
			|	И Т.Контрагент В (&СписокКонтрагентов)
			|;";
			
		КонецЕсли;
		
		ТекстЗапроса = ЗапросДокументыОснования + "
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.ДокументСсылка,
		|	ВложенныйЗапрос.Комментарий,
		|	ВложенныйЗапрос.Проведен,
		|	ВложенныйЗапрос.Дата,
		|	ВложенныйЗапрос.Номер,
		|	ВложенныйЗапрос.Сумма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДокОснование.ДокументОснование,0) = 0
		|			Тогда Ложь		
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК ЕстьОснование,
		|    Ложь как ВКЛ,
		|	ВложенныйЗапрос.ДатаВходящегоДокумента,
		|	ВложенныйЗапрос.НомерВходящегоДокумента
		|ИЗ
		|(ВЫБРАТЬ
		|		Т.Контрагент КАК Контрагент,
		|		Т.Организация КАК Организация,
		|		Т.Ссылка КАК ДокументСсылка,
		|		Т.Проведен КАК Проведен,
		|		Т.Дата КАК Дата,
		|		Т.Номер КАК Номер,
		|		Т.СуммаДокумента КАК Сумма,
		|		Т.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|		Т.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|		Т.МоментВремени КАК МоментВремени,
		|		Т.Комментарий КАК Комментарий
		|	ИЗ
		|		Документ.ПоступлениеТоваровУслуг КАК Т
		|	ГДЕ
		|	    Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И Т.Организация = &Организация
		|		И НЕ Т.ПометкаУдаления
		|    	И Т.Контрагент В (&СписокКонтрагентов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.Контрагент,
		|		Т.Организация,
		|		Т.Ссылка,
		|		Т.Проведен,
		|		Т.Дата,
		|		Т.Номер,
		|		Т.СуммаДокумента,
		|		Т.Дата,
		|		Т.Номер,
		|		Т.МоментВремени,
		|		Т.Комментарий
		|	ИЗ
		|		Документ.ВозвратТоваровОтПокупателя КАК Т
		|	ГДЕ
		|	    Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И Т.Организация = &Организация
		|		И НЕ Т.ПометкаУдаления
		|    	И Т.Контрагент В (&СписокКонтрагентов)"
		+ ПоступлениеНМА
		+ ПоступлениеАвтомобилей
		+ ПоступлениеДопРасходов + ") КАК ВложенныйЗапрос
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДокОснование КАК ДокОснование
		|	ПО ВложенныйЗапрос.ДокументСсылка = ДокОснование.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.МоментВремени УБЫВ";
		
		
		Если Direction = "Outbound" Тогда 
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ПоступлениеТоваровУслуг" 	 , "Документ.РеализацияТоваровУслуг");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ВозвратТоваровОтПокупателя", "Документ.ВозвратТоваровПоставщику");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.СчетФактураПолученный" 	 , "Документ.СчетФактураВыданный");
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.ДатаВходящегоДокумента"  , "Т.Дата");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.НомерВходящегоДокумента" , "Т.Номер");
			
		КонецЕсли;	
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41" Тогда
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ПоступлениеТоваровУслуг" 	 , "Документ.ПоступлениеТоваров");	
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ВозвратТоваровОтПокупателя", "Документ.ВозвратОтПокупателя");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.РеализацияТоваровУслуг" 	 , "Документ.РеализацияТоваров");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ВозвратТоваровПоставщику"  , "Документ.ВозвратПоставщику");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураПолученный.ДокументыОснования","Документ.СчетФактураПолученный");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.СчетФактураВыданный.ДокументыОснования"  ,"Документ.СчетФактураВыданный");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Т.ДатаВходящегоДокумента" ,"Т.ВхДокДата");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Т.НомерВходящегоДокумента","Т.ВхДокНомер");
			
		КонецЕсли;
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ПоступлениеТоваровУслуг", "Документ.ПриходнаяНакладная");
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.Организация"				, "Т.Фирма");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.ДатаВходящегоДокумента" 	, "Т.ДатаСчетаФактуры");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.НомерВходящегоДокумента" , "Т.ВходящийНомер");
			
		КонецЕсли;
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ПоступлениеТоваровУслуг" 	 , "Документ.ПриходнаяНакладная");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Документ.ВозвратТоваровОтПокупателя", "Документ.ВозвратнаяНакладная");
			
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.Организация" 			, "Т.Фирма");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.ДатаВходящегоДокумента" 	, "Т.ДатаДокумента");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.НомерВходящегоДокумента" , "Т.НомерДокумента");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Т.СуммаДокумента" 			, "Т.ИтогоВсего");
			
		КонецЕсли;
		
		
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	Функция ТекстЗапросаПодборСчетовФактур(Direction) Экспорт
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Док.ДокументОснование.Контрагент КАК Контрагент,
			|	Док.Организация КАК Организация,
			|	Док.Ссылка КАК ДокументСсылка,
			|	Док.Проведен КАК Проведен,			
			|	Док.Дата КАК Дата,
			|	Док.Номер КАК Номер,
			|	Док.ДокументОснование.СуммаДокумента КАК Сумма,
			|	Док.Комментарий КАК Комментарий,
			|	Док.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	Док.НомерВходящегоДокумента КАК НомерВходящегоДокумента
			|ИЗ
			|	Документ.СчетФактураПолученный КАК Док
			|ГДЕ
			|	Док.Организация = &Организация
			|	И Док.ДокументОснование.Контрагент В(&СписокКонтрагентов)
			|	И Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания"	
			
		ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
				
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Док.Контрагент КАК Контрагент,
			|	Док.Фирма КАК Организация,
			|	Док.Ссылка КАК ДокументСсылка,
			|	Док.Проведен КАК Проведен,
			|	Док.Дата КАК Дата,
			|	Док.Номер КАК Номер,
			|	Док.СуммаДокумента КАК Сумма,
			|	Док.Комментарий КАК Комментарий,
			|	Док.ДатаСчетаФактуры КАК ДатаВходящегоДокумента,
			|	Док.НомерСчетаФактуры КАК НомерВходящегоДокумента
			|ИЗ
			|	Документ.ПриходнаяНакладная КАК Док
			|ГДЕ
			|	Док.Фирма = &Организация
			|	И Док.Контрагент В(&СписокКонтрагентов)
			|	И Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания"	
			
		Иначе
			ТекстЗапроса = 	
			"ВЫБРАТЬ
			|	Док.Контрагент КАК Контрагент,
			|	Док.Организация КАК Организация,
			|	Док.Ссылка КАК ДокументСсылка,
			|	Док.Проведен КАК Проведен,
			|	Док.Дата КАК Дата,
			|	Док.Номер КАК Номер,
			|	Док.СуммаДокумента КАК Сумма,
			|	Док.Комментарий КАК Комментарий,
			|	Док.ДатаВходящегоДокумента как ДатаВходящегоДокумента,
			|	Док.НомерВходящегоДокумента  как  НомерВходящегоДокумента
			|ИЗ
			|	Документ.СчетФактураПолученный КАК Док
			|ГДЕ
			|	Док.Организация = &Организация
			|	И Док.Контрагент В(&СписокКонтрагентов)
			|	И Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
		
		Если Direction = "Outbound" Тогда 
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"СчетФактураПолученный" , "СчетФактураВыданный");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Док.ДатаВходящегоДокумента" , "Док.Дата");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Док.НомерВходящегоДокумента" , "Док.Номер");
		ИначеЕсли 	ПолучитьПрофильКонфигурации().ХранениеНастроекПользователей.Вариант = "Рарус" Тогда
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Док.ДатаВходящегоДокумента" , "Док.ВхДокДата");
			ТекстЗапроса = стрЗаменить(ТекстЗапроса,"Док.НомерВходящегоДокумента" , "Док.ВхДокНомер");
		КонецЕсли;	
		
		Возврат ТекстЗапроса;
		
	КонецФункции
	
	Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
		Возврат Модуль_Интеграция.ПолучитьСтавкуНДСДиадок(TaxRate)
	КонецФункции
	
	Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
		Возврат Модуль_Интеграция.СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект)
	КонецФункции
	
	Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
		
		ДокументОбъект= Модуль_Интеграция.СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть, СуммаВключаетНДС , ВидОперации, ЗаполнениеГТД);
		
		ОбработкаСобытияПодключаемогоМодуля("ПослеЗаполненияНовогоДокументаПоступления", Новый Структура("ДокументОбъект, Document", ДокументОбъект, ЭДОбъект));
		
		Возврат ДокументОбъект;
		
	КонецФункции
	
	Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения= Неопределено) Экспорт
		
		Модуль_Интеграция.ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
		
	КонецПроцедуры
	
	Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения= Неопределено) Экспорт
		
		Возврат Модуль_Интеграция.СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения)
		
	КонецФункции
	
	Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения= Неопределено) Экспорт
		
		Возврат Модуль_Интеграция.СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения)
		
	КонецФункции
	
	Процедура УстановитьДатуНомерВходящегоДокумента(докСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		Если ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").СформироватьПрофильКонфигурации().ХранениеНастроекПользователей.Вариант = "Рарус" Тогда
			Если (ТипЗнч(докСсылка) = Тип("ДокументСсылка.ПоступлениеТоваров")  )
				И (докСсылка.ВхДокДата <> ДатаВходящегоДокумента ИЛИ докСсылка.ВхДокНомер <> НомерВходящегоДокумента) Тогда
				Попытка
					Объект = докСсылка.ПолучитьОбъект();
					Объект.ВхДокДата = ДатаВходящегоДокумента;
					Объект.ВхДокНомер = НомерВходящегоДокумента;
					Объект.Записать();
					
					Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
					|у документа: " + докСсылка);
				Исключение
					Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
					|у документа: " + докСсылка);
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			
			Если ( (докСсылка.метаданные().реквизиты.найти("ДатаВходящегоДокумента")<>Неопределено) и (докСсылка.метаданные().реквизиты.найти("НомерВходящегоДокумента")<>Неопределено) ) 
				И (докСсылка.ДатаВходящегоДокумента <> ДатаВходящегоДокумента ИЛИ докСсылка.НомерВходящегоДокумента <> НомерВходящегоДокумента) Тогда
				Попытка
					Объект = докСсылка.ПолучитьОбъект();
					Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
					Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
					Объект.Записать();
					
					Сообщить("Изменены следующие реквизиты: "+СписокОтличающихсяРеквизитов+" 
					|у документа: " + докСсылка);
				Исключение
					Сообщить("Не удалось изменить следующие реквизиты: "+СписокОтличающихсяРеквизитов+"
					|у документа: " + докСсылка);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры	
	
	Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		Модуль_Интеграция.УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры
	
	Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		Модуль_Интеграция.УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры
	
	Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
		Модуль_Интеграция.УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура)
	КонецПроцедуры
	
	Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
		Модуль_Интеграция.ПолучитьДокументПоступленияПоСФ(СчетФактура);
	КонецФункции
		
	Функция ПолучитьГрузоотправителяГрузополучателя1С(Параметры) Экспорт
		
		//Делаем по запросу только для бухгалтерии.
		Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияБух" Тогда
			Возврат Модуль_Интеграция.ПолучитьГрузоотправителяГрузополучателя1С(Параметры);	
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
		
	КонецФункции
		
	//} СозданиеДокументов1С

//{ Управление ГТД

	Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
		
		Возврат Модуль_Интеграция.ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект);
		
	КонецФункции
	
	Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
		
		Возврат Модуль_Интеграция.ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект);
		
	КонецФункции

//} Управление ГТД

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Возврат Модуль_Интеграция.ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов);
		
	КонецФункции
	
	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Возврат Модуль_Интеграция.ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов);
		
	КонецФункции

//} Приглашение Контрагентов

//{Внешние печатные формы

	Функция ВПФ_Печать(СсылкаНаОбъект, ИдентификаторВПФ) Экспорт
		
		ВнешняяОбработка = ВПФ_ВнешняяОбработка(ИдентификаторВПФ);
		
		ДополнительныеПараметры = ВПФ_ДополнительныеПараметры(ИдентификаторВПФ);
		
		Если ТипЗнч(ВнешняяОбработка) = Тип("Строка") Тогда
			ВызватьИсключение "Не удалось создать внешнюю обработку: " + ВнешняяОбработка;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВнешняяОбработка, Новый Структура("СсылкаНаОбъект, ДополнительныеПараметры", СсылкаНаОбъект, ДополнительныеПараметры));
		
		ВПФ = ВПФ_СсылкаНомерСтроки(ИдентификаторВПФ).Ссылка;
		
		Попытка
			ТабДокумент = ВнешняяОбработка.Печать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ВызватьИсключение("Не удалось сформировать внешнюю печатную форму " + ВПФ + " для документа " + СсылкаНаОбъект + " по причине: " + Символы.ПС + ОписаниеОшибки);
		КонецПопытки;
		
		Если НЕ ТипЗнч(ТабДокумент) = Тип("ТабличныйДокумент") Тогда
			ВызватьИсключение
			"
			|Документ: " + СсылкаНаОбъект + "
			|Внешняя печатная форма: " + ВПФ + "
			|Вместо табличного документа получено значение: " + ТипЗнч(ТабДокумент);
		КонецЕсли;
		
		Возврат ТабДокумент;
		
	КонецФункции
	
	Функция ВПФ_РезультатФункции(ИдентификаторВПФ, ИмяФункции, ПараметрыФункции) Экспорт
		
		ВнешняяОбработка = ВПФ_ВнешняяОбработка(ИдентификаторВПФ);
		
		Если ТипЗнч(ВнешняяОбработка) = Тип("Строка") Тогда
			ВызватьИсключение "Не удалось создать внешнюю обработку: " + ВнешняяОбработка;
		КонецЕсли;
		
		Попытка
			Результат = Вычислить("ВнешняяОбработка." + ИмяФункции + "(ПараметрыФункции)");
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Возврат Результат
		
	КонецФункции

	Функция ВПФ_Идентификатор(СсылкаНаОбъект, ВПФ) Экспорт
		
		ПолноеИмяВПФ = ВПФ.Метаданные().ПолноеИмя();
		
		НомерСтроки = 0;
		
		Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность") Тогда
			
			ПолноеИмяОбъекта = СсылкаНаОбъект.Метаданные().ПолноеИмя();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВПФ", ВПФ);
			
			Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность.Реквизит.МетаданныеОбъекта") Тогда
				
				УсловиеПоДокументу = " И МетаданныеОбъекта = &МетаданныеОбъекта";
				Запрос.УстановитьПараметр("МетаданныеОбъекта", ПолноеИмяОбъекта);
				
			ИначеЕсли СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность.Реквизит.СсылкаОбъекта") Тогда
				
				УсловиеПоДокументу = " И СсылкаОбъекта = &СсылкаОбъекта";
				Запрос.УстановитьПараметр("СсылкаОбъекта", ПредопределенноеЗначение(ПолноеИмяОбъекта + ".ПустаяСсылка"));
				
			Иначе
				УсловиеПоДокументу = "";
			КонецЕсли;
			
			Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность.Реквизит.НастройкиПостроителяДляОтбора") Тогда
				
				НастройкиПостроителяДляОтбора = "НастройкиПостроителяДляОтбора";
				
				ПостроительОтчета = Новый ПостроительОтчета;
				ПостроительОтчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ИСТИНА ИЗ " + ПолноеИмяОбъекта + " ГДЕ Ссылка = &СсылкаНаОбъект {ГДЕ Ссылка.*}";
				ПостроительОтчета.Параметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
				
			Иначе
				НастройкиПостроителяДляОтбора = "НЕОПРЕДЕЛЕНО КАК НастройкиПостроителяДляОтбора";
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ НомерСтроки, " + НастройкиПостроителяДляОтбора + " ИЗ " + ПолноеИмяВПФ + ".Принадлежность ГДЕ Ссылка = &ВПФ" + УсловиеПоДокументу + " УПОРЯДОЧИТЬ ПО НомерСтроки";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.НастройкиПостроителяДляОтбора <> Неопределено Тогда
						
						НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
						
						Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
							
							ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
							ПостроительОтчета.Выполнить();
							Если ПостроительОтчета.Результат.Пустой() Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					НомерСтроки = Выборка.НомерСтроки;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;

		Возврат Строка(ВПФ.УникальныйИдентификатор()) + "_" + Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
	КонецФункции

	Функция ВПФ_ДополнительныеПараметры(ИдентификаторВПФ) Экспорт
		
		ДополнительныеПараметры = ПараметрыВПФ(ИдентификаторВПФ).ДополнительныеПараметры;
		
		//Если измененных параметров нет, то пробуем прочитать параметры из базы.
		Если ДополнительныеПараметры = Неопределено Тогда
			
			СсылкаНомерСтроки = ВПФ_СсылкаНомерСтроки(ИдентификаторВПФ);
			
			// Вычитываем параметры из базы, если в базе есть соответствующая строка.
			Если СсылкаНомерСтроки.НомерСтроки > 0 Тогда
				ДополнительныеПараметры = СсылкаНомерСтроки.Ссылка.Принадлежность[СсылкаНомерСтроки.НомерСтроки - 1].ДополнительныеПараметрыОбработки.Получить();
			КонецЕсли;
			
			ПараметрыВПФ(ИдентификаторВПФ).ДополнительныеПараметры = ДополнительныеПараметры;
			
		КонецЕсли;
		
		Возврат ДополнительныеПараметры;
		
	КонецФункции

	Функция ВПФ_СсылкаНомерСтроки(ИдентификаторВПФ) Экспорт
		
		ПозицияРазделителя = Найти(ИдентификаторВПФ, "_");
		
		Если ПозицияРазделителя > 0 Тогда
			НомерСтроки = Число(Сред(ИдентификаторВПФ, ПозицияРазделителя + 1));
			GUID = Лев(ИдентификаторВПФ, ПозицияРазделителя - 1);
		Иначе
			НомерСтроки = 0;
			GUID = ИдентификаторВПФ;
		КонецЕсли;
		
		СсылкаНомерСтроки = Новый Структура;
		СсылкаНомерСтроки.Вставить("Ссылка"		, ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВнешняяОбработкаПоGUID(GUID));
		СсылкаНомерСтроки.Вставить("НомерСтроки", НомерСтроки);
		
		Возврат СсылкаНомерСтроки;
		
	КонецФункции

	Функция ВПФ_ВнешняяОбработка(ИдентификаторВПФ)
		
		ВнешняяОбработка = ПараметрыВПФ(ИдентификаторВПФ).ВнешняяОбработка;
		Если ВнешняяОбработка <> Неопределено Тогда
			Возврат ВнешняяОбработка;
		КонецЕсли;
		
		СсылкаНомерСтроки = ВПФ_СсылкаНомерСтроки(ИдентификаторВПФ);
		ПолноеИмяВПФ = СсылкаНомерСтроки.Ссылка.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СсылкаНомерСтроки.Ссылка);
		
		Разделитель  = "";
		
		Если СсылкаНомерСтроки.НомерСтроки > 0 И СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность.Реквизит.ХранилищеВнешнейОбработки") Тогда
			
			Запрос.Текст = Запрос.Текст + Разделитель + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ХранилищеВнешнейОбработки ИЗ " + ПолноеИмяВПФ + ".Принадлежность ГДЕ Ссылка = &Ссылка И НомерСтроки = &НомерСтроки";
			Разделитель = РазделительПакетаЗапросов();
			
			Запрос.УстановитьПараметр("НомерСтроки", СсылкаНомерСтроки.НомерСтроки);
			
		КонецЕсли;
		
		Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".Реквизит.ХранилищеВнешнейОбработки") Тогда
			
			Запрос.Текст = Запрос.Текст + Разделитель + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ХранилищеВнешнейОбработки ИЗ " + ПолноеИмяВПФ + " ГДЕ Ссылка = &Ссылка";
			Разделитель = РазделительПакетаЗапросов();
			
		КонецЕсли;
		
		Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".Реквизит.Хранилище") Тогда
			
			Запрос.Текст = Запрос.Текст + Разделитель + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Хранилище КАК ХранилищеВнешнейОбработки ИЗ " + ПолноеИмяВПФ + " ГДЕ Ссылка = &Ссылка";
			Разделитель = РазделительПакетаЗапросов();
			
		КонецЕсли;
		
		// вариант на крайний случай, читаем первую строку табличной части.
		Если СуществуетОбъектМетаданных(ПолноеИмяВПФ + ".ТабличнаяЧасть.Принадлежность.Реквизит.ХранилищеВнешнейОбработки") Тогда
			
			Запрос.Текст = Запрос.Текст + Разделитель + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 ХранилищеВнешнейОбработки ИЗ " + ПолноеИмяВПФ + ".Принадлежность ГДЕ Ссылка = &Ссылка И НомерСтроки = 1";
			Разделитель = РазделительПакетаЗапросов();
			
		КонецЕсли;
		
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		ВГраница = РезультатыЗапросов.ВГраница();
		Для Сч = 0 По ВГраница Цикл
			
			Если НЕ РезультатыЗапросов[Сч].Пустой() Тогда
				
				Выборка = РезультатыЗапросов[Сч].Выбрать();
				Выборка.Следующий();
				
				ДвоичныеДанные = Выборка.ХранилищеВнешнейОбработки.Получить();
				
				Выборка = Неопределено;
				
				Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатыЗапросов = Неопределено;
		
		Если ДвоичныеДанные = Неопределено Тогда
			Возврат "Отсутствуют двоичные данные обработки";
		КонецЕсли;
		
		
		ИмяФайла = ПолучитьИмяВременногоФайла("epf");
		
		Попытка
			
			ДвоичныеДанные.Записать(ИмяФайла); ДвоичныеДанные = Неопределено;
			
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			УдалитьФайлы(ИмяФайла);
			
			ПараметрыВПФ(ИдентификаторВПФ).ВнешняяОбработка = ВнешняяОбработка;
			
		Исключение
			ВнешняяОбработка = ОписаниеОшибки();
		КонецПопытки;
		
		Возврат ВнешняяОбработка;
		
	КонецФункции

//}Внешние печатные формы

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат Модуль_Интеграция.ВнешняяОбработкаПоGUID(GUID);
		
	КонецФункции

//} Внешние обработки
