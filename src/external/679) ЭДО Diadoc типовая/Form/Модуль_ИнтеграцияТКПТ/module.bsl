
////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ

	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, ЭтоСФ=Ложь) Экспорт 
		Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда 
			Возврат "без НДС"
		ИначеЕсли ЗначениеЗаполнено(СтавкаНДС)=Ложь Тогда 
			Возврат "";
		Иначе 
			Возврат Строка(СтавкаНДС.Ставка);
		КонецЕсли;	
	КонецФункции 

	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		Сообщить("Функция ""дкПолучитьНомерДляПечати"" не поддерживается в ткпт");
	КонецФункции

	Функция ЭтоСчетФактуранаАванс(СФ) Экспорт
		Возврат Ложь;
	КонецФункции	

	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт 
		Возврат ДокументСсылка.СуммаДокумента;
	КонецФункции

	Процедура ПерезаполнитьСуммыПоУЕвРублях(СтрокиСчетаФактуры, ТекущееОснование, ДанныеШапки) Экспорт 
		
	КонецПроцедуры

	Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура=Неопределено, ФормированиеСФ=Ложь) Экспорт 
		Возврат Ложь;
	КонецФункции	

	Функция ПолучитьПредставлениеХарактеристикиИСерии(выборка) Экспорт 
		Возврат "";
	КонецФункции

	Функция Документ_Организация(Документ) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Документ_Организация(Документ);
		
	КонецФункции

	Функция Организация_КПП(Организация) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);
		
	КонецФункции

	Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящейНакладной(ДокСсылка)
		
	КонецФункции

	Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка)
		
	КонецФункции

	Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры

	Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
		
	КонецПроцедуры


	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции

	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
		
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ПОЛУЧЕНИЕ ДАННЫХ

//{ Получить...

	Функция ПолучитьНаименованиеКолонкиКодаТовара() Экспорт
		Возврат "Код"
	КонецФункции

	Функция ПолучитьВалютуРегламентированногоУчета() Экспорт 
		Возврат Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить();
	КонецФункции

	Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт
		Возврат Новый Массив;
	КонецФункции

	Функция ПолучитьНомерГТД(НомерГТД) Экспорт
			
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомерГТД(НомерГТД);
			
	КонецФункции
    
	Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
		Договор = ДокументСсылка.ДоговорКонтрагента;
		Возврат Новый Структура("ДоговорНомер, ДоговорДата", Договор.НомерДоговора, Договор.ДатаНачала);
	КонецФункции


//} Получить...

//{ ТЧПолучитьТекстЗапроса...

Функция ПолучитьДанныеТЧ_СФ(СсылкаНаОбъект, ЭтоКСФ)
	
	Если ЭтоКСФ = Ложь Тогда 
		Запрос = Новый запрос;
		Если найти(Метаданные.Синоним, "Автосалон")>0 тогда 
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(СчетФактураВыданныйТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда СчетФактураВыданныйТовары.Номенклатура.Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	СчетФактураВыданныйТовары.Номенклатура КАК НоменклатураСсылка,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			Тогда СчетФактураВыданныйТовары.ЕдиницаИзмерения
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору
			|	КОНЕЦ КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА СчетФактураВыданныйТовары.ЕдиницаИзмерения ССЫЛКА Справочник.КлассификаторЕдиницИзмерения
			|			Тогда СчетФактураВыданныйТовары.ЕдиницаИзмерения.Код
			|		ИНАЧЕ СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код
			|	КОНЕЦ КАК КодЕдиницыИзмерения,
			|	СчетФактураВыданныйТовары.Количество,
			|	0 КАК КоличествоМест,
			|	0 КАК КоличествоВОдномМесте,
			|	СчетФактураВыданныйТовары.Сумма,
			|	СчетФактураВыданныйТовары.СтавкаНДС,
			|	СчетФактураВыданныйТовары.СуммаНДС,
			|	Истина КАК СуммаВключаетНДС,
			|	СчетФактураВыданныйТовары.ГТД КАК НомерГТД,
			|	СчетФактураВыданныйТовары.ГТД.Страна КАК СтранаПроисхождения
			|ИЗ
			|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
			|ГДЕ
			|	СчетФактураВыданныйТовары.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст = "ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(СчетФактураВыданныйТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			ТОГДА СчетФактураВыданныйТовары.Номенклатура.Наименование
			|		ИНАЧЕ СчетФактураВыданныйТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	СчетФактураВыданныйТовары.Номенклатура КАК НоменклатураСсылка,
			|	СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|	СчетФактураВыданныйТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|	СчетФактураВыданныйТовары.Количество,
			|	0 КАК КоличествоМест,
			|	0 КАК КоличествоВОдномМесте,
			|	СчетФактураВыданныйТовары.Сумма,
			|	СчетФактураВыданныйТовары.СтавкаНДС,
			|	СчетФактураВыданныйТовары.СуммаНДС,
			|	ИСТИНА КАК СуммаВключаетНДС,
			|	СчетФактураВыданныйТовары.ГТД КАК НомерГТД,
			|	СчетФактураВыданныйТовары.ГТД.Страна КАК СтранаПроисхождения
			|ИЗ
			|	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
			|ГДЕ
			|	СчетФактураВыданныйТовары.Ссылка = &Ссылка";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);			   
		Возврат Запрос.Выполнить();
		
	иначе 
		ТабличнаяЧасть =ИнициализироватьТабличнуюЧасть(Истина);	
		
		ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ВыборкаТабличнойЧасти = ДокументОбъект.ПолучитьВыборку();
		
		Для каждого СтрокаТоваров из ВыборкаТабличнойЧасти цикл
			
			СтрокаСписка = ТабличнаяЧасть.Добавить();
			
			СтрокаСписка.Номенклатура = спПолучитьНаименование(СтрокаТоваров.Номенклатура);
			
			СтрокаСписка.ЕдиницаИзмеренияДоИзменения	=	ПолучитьЕИПоКлассификатору(СтрокаТоваров.ЕдиницаИзмерения);
			СтрокаСписка.ЕдиницаИзмерения				=	ПолучитьЕИПоКлассификатору(СтрокаТоваров.ЕдиницаИзмерения);
			
			СтрокаСписка.КоличествоДоИзменения = СтрокаТоваров.КоличествоПоДокументуРеализации;
			СтрокаСписка.Количество = СтрокаТоваров.Количество;
			
			СтрокаСписка.СтавкаНДСДоИзменения =  ПолучитьПредставлениеСтавкиНДС(СтрокаТоваров.СтавкаНДС);
			СтрокаСписка.СтавкаНДС 			  =  ПолучитьПредставлениеСтавкиНДС(СтрокаТоваров.СтавкаНДС);
			
			СтрокаСписка.СуммаДоИзменения    = СтрокаТоваров.СуммаВсегоПоДокументуРеализации;
			СтрокаСписка.Сумма				 = СтрокаТоваров.СуммаВсего;
			
			СтрокаСписка.СуммаНДСДоИзменения     = СтрокаТоваров.СуммаНДСПоДокументуРеализации;
			СтрокаСписка.СуммаНДС					 = СтрокаТоваров.СуммаНДС;
			
			СтрокаСписка.СуммаВключаетНДС = Истина;
		КонецЦикла;
		
		
	КонецЕсли;	
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Функция  ПолучитьДанныеТЧ_ТоварныйДок(ДокСсылка)
	ТабличнаяЧасть = ИнициализироватьТабличнуюЧасть(Ложь);
	
	
	СуммаНДС = 0;
	Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено И ТипЗнч(ДокСсылка)= тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.Наименование КАК Номенклатура,
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.Ссылка КАК НоменклатураСсылка,
		|	РеализацияАвтомобилейАвтомобили.Автомобиль.VIN КАК КодНоменклатуры,
		|	ЗНАЧЕНИЕ(справочник.КлассификаторЕдиницИзмерения.шт) КАК ЕдиницаИзмерения,
		|	""796"" КАК КодЕдиницыИзмерения,
		|	1 КАК Количество,
		|	1 КАК КоличествоМест,
		|	1 КАК КоличествоВОдномМесте,
		|	РеализацияАвтомобилейАвтомобили.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияАвтомобилейАвтомобили.СуммаНДС,
		|	РеализацияАвтомобилейАвтомобили.Сумма - РеализацияАвтомобилейАвтомобили.СуммаНДС КАК Цена,
		|	РеализацияАвтомобилейАвтомобили.Сумма ,
		|    Истина как суммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияАвтомобилей.Автомобили КАК РеализацияАвтомобилейАвтомобили
		|ГДЕ
		|	РеализацияАвтомобилейАвтомобили.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
		Возврат Запрос.Выполнить();
		
	Иначе 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПОДСТРОКА(РеализацияТоваровТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
		|			Тогда РеализацияТоваровТовары.Номенклатура.Наименование
		|		ИНАЧЕ РеализацияТоваровТовары.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	РеализацияТоваровТовары.Номенклатура КАК НоменклатураСсылка,
		|	РеализацияТоваровТовары.Номенклатура.Код КАК КодНоменклатуры,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору как ЕдиницаИзмерения,
		|	РеализацияТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
		|	РеализацияТоваровТовары.Количество,
		|	РеализацияТоваровТовары.Коэффициент,
		|	РеализацияТоваровТовары.СтавкаНДС,
		|	РеализацияТоваровТовары.СуммаНДС,
		|	РеализацияТоваровТовары.СуммаВсего КАК сумма,
		|	Истина КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокСсылка);			   
		Возврат Запрос.Выполнить();
	КонецЕсли;
	
	Возврат  ТабличнаяЧасть;
КонецФункции	

Функция ПолучитьДанныеТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ)
	Если ЗначениеЗаполнено(СчетФактура)  Тогда 
		Возврат ПолучитьДанныеТЧ_СФ(СчетФактура, ЭтоКСФ)
	иначе 
		Возврат ПолучитьДанныеТЧ_ТоварныйДок(ДокументСсылка)
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ) Экспорт
	Возврат 	ПолучитьДанныеТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ);
КонецФункции

Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
	Возврат ТекущийКод
КонецФункции

//} ТЧПолучитьТекстЗапроса...

//{ ПолучитьДанныеШапки...

Функция ПолучитьДанныеШапкиТоварногоДокумента(ДокССылка)
	
	результат = Новый Структура("Организация, Контрагент, Грузоотправитель, Грузополучатель, ВалютаДокумента, Дата, Номер, ДопИнфо");
	результат.Организация 		= ДокСсылка.Организация;
	результат.Грузоотправитель  = ДокСсылка.Организация;
	Результат.Контрагент        = докСсылка.Контрагент;
	Результат.Грузополучатель   = докСсылка.Контрагент;
	Результат.ВалютаДокумента   = докСсылка.ВалютаДокумента;
	Результат.Дата 				= докСсылка.Дата;
	Результат.Номер				= докСсылка.Номер;
	
	Возврат результат;
	
КонецФункции	

Функция ПолучитьСтруктуруШапки(ДокументСсылка, СчетФактура = Неопределено)   Экспорт 
	Возврат ПолучитьДанныеШапкиТоварногоДокумента(ДокументСсылка)
КонецФункции

//} ПолучитьДанныеШапки...

//{ ПолучитьДанныеСФ...

Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт
	Возврат получитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьНомераДляКСФ(СчетФактура);
КонецФункции

Функция ПолучитьНомераДляСФ(СсылкаНаОбъект)  Экспорт 
	ДанныеДляПечати = Новый Структура;
	Если СсылкаНаОбъект.метаданные().реквизиты.найти("Исправление")<>Неопределено и СсылкаНаОбъект.исправление Тогда
		ДанныеДляПечати.вставить("НомерДокумента", СсылкаНаОбъект.НомерИсходногоДокумента);
		ДанныеДляПечати.Вставить("ДатаДокумента", СсылкаНаОбъект.ДатаИсходногоДокумента);
		ДанныеДляПечати.Вставить("ЭтоИСФ", Истина);
		ДанныеДляПечати.Вставить("НомерИсправления", строка(СсылкаНаОбъект.НомерИсправления));
		ДанныеДляПечати.Вставить("ДатаИсправления",  СсылкаНаОбъект.Дата);
	Иначе 
		ДанныеДляПечати.вставить("НомерДокумента", ПолучитьНомерНаПечатьДиадок(СсылкаНаОбъект));
		ДанныеДляПечати.Вставить("ДатаДокумента",  СсылкаНаОбъект.Дата);
		ДанныеДляПечати.Вставить("ЭтоИСФ", Ложь);
	КонецЕсли;	
	Возврат ДанныеДляПечати;
КонецФункции

Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
	Возврат "";
КонецФункции

//} ПолучитьДанныеСФ...

//} ПОЛУЧЕНИЕ ДАННЫХ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьТипДокумента(ДокСсылка, НаименованиеТипа)
	Возврат (метаданные.документы.найти(НаименованиеТипа)<>Неопределено) и (ТипЗнч(ДокСсылка)=тип("ДокументСсылка."+НаименованиеТипа))
КонецФункции

Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД) Экспорт
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		
		ЭтоКСФ=	Ложь;
		Если НЕ Док.Метаданные().Реквизиты.Найти("ХозОперация") = Неопределено Тогда
			ЭтоКСФ = ((док.метаданные().реквизиты.найти("НомерИсправляемогоКорректировочногоДокумента")<>Неопределено) и ЗначениеЗаполнено(док.НомерИсправляемогоКорректировочногоДокумента));
			//ЭтоКСФ = (найти(строка(Док.ХозОперация), "Коррект")>0)  // ( (Док.ХозОперация = Справочники.ХозОперации.СчетФактураВыданныйКорректировка)  и (Док.ДокументОснование.ХозОперация=Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон) );
		КонецЕсли;
		
		Если ЭтоКСФ Тогда
			Возврат ?(Док.Метаданные().Реквизиты.найти("Исправление") <> Неопределено И Док.Исправление, "Исправление КСФ", "Корректировочный СФ");
		Иначе 	
			Возврат  ?(Док.Метаданные().Реквизиты.найти("Исправление") <> Неопределено И Док.Исправление, "Исправление СФ", "Счет-фактура");
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваров") или ПроверитьТипДокумента(Док, "КорректировкаРеализации") Тогда 
		//Настройка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Док.Организация);
		СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
		Если СтрокиНастрек.количество()=0 Тогда 
			ФормаДляУслуг = "Акт";
			ФормаДляТоваров = "Торг-12";
		иначе 
			ФормаДляТоваров =  ?(СтрокиНастрек[0].ПечатнаяФормаДляТоваров="", "Торг-12" , СтрокиНастрек[0].ПечатнаяФормаДляТоваров);
			ФормаДляУслуг  =   ?(СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ="", "Акт"		, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  );
		КонецЕсли;	
		Возврат ФормаДляТоваров;
	ИначеЕсли Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено И ТипЗнч(Док) = Тип("ДокументСсылка.РеализацияАвтомобилей") Тогда
		Возврат   "Торг-12";
	ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.СчетНаОплату") Тогда
		Возврат "Счет на оплату";
	Иначе 
		Возврат "";
	КонецЕсли;	
	
КонецФункции
	
Функция ПолучитьПараметрыСФ(Док) Экспорт
	
	Возврат Неопределено;
	
КонецФункции
	
Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
	
	СуммаДокумента = Док.СуммаДокумента;
	СуммаУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаУвеличение")<>Неопределено, Док.СуммаУвеличение, 0);
	СуммаУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаУменьшение")<>Неопределено, Док.СуммаУменьшение,0);
	
	Стр1 = "";
	Стр2 = "";
	
	Стр1 = ?(СуммаУвеличение = 0, "", "+" + Формат(СуммаУвеличение, "ЧДЦ=2"));
	Стр2 = ?(СуммаУменьшение = 0, "", "-" + Формат(СуммаУменьшение, "ЧДЦ=2"));
	
	Если СуммаУвеличение = 0 И СуммаУменьшение = 0 Тогда
		Если СуммаДокумента <> 0 Тогда
			Стр1 = Формат(СуммаДокумента, "ЧДЦ=2");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
		Возврат Стр1 + " " + Стр2;
	ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
		Возврат Стр1;
	Иначе
		Возврат Стр2;
	КонецЕсли;
КонецФункции

Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
	
	СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДС")<>Неопределено, Док.СуммаНДС, 0);
	СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДСДокумента")<>Неопределено, Док.СуммаНДСДокумента, 0);
	СуммаНДСУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУвеличение")<>Неопределено, Док.СуммаНДСУвеличение, 0);
	СуммаНДСУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУменьшение")<>Неопределено, Док.СуммаНДСУменьшение,0);
	
	Стр1 = "";
	Стр2 = "";
	
	Стр1 = ?(СуммаНДСУвеличение = 0, "", "+" + Формат(СуммаНДСУвеличение, "ЧДЦ=2"));
	Стр2 = ?(СуммаНДСУменьшение = 0, "", "-" + Формат(СуммаНДСУменьшение, "ЧДЦ=2"));
	
	Если СуммаНДСУвеличение = 0 И СуммаНДСУменьшение = 0 Тогда
		Если СуммаНДСДокумента <> 0 Тогда
			Стр1 = Формат(СуммаНДСДокумента, "ЧДЦ=2");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
		Возврат Стр1 + " " + Стр2;
	ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
		Возврат Стр1;
	Иначе
		Возврат Стр2;
	КонецЕсли;
КонецФункции

//{ ТЗПолучитьТекстЗапроса...

Функция ТЗПолучитьТекстПодзапроса(ТипыДокументов) Экспорт
	
	ТекстПодзапроса=	"";
	
	Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 Тогда
		ТекстПодзапроса=	ТЗПолучитьТекстЗапросаНакладные();
		Если ТипыДокументов = 0 Тогда
			ТекстПодзапроса=	ТекстПодзапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 2 Тогда
		ТекстПодзапроса=	ТекстПодзапроса + ТЗПолучитьТекстЗапросаСчетаФактуры();
		Если ТипыДокументов = 0 Тогда
			ТекстПодзапроса=	ТекстПодзапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
	КонецЕсли;
	
	Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 3 Тогда
		ТекстПодзапроса=	ТекстПодзапроса + ТЗПолучитьТекстЗапросаСчетаНаОплату();
	КонецЕсли;
	
	Возврат ТекстПодзапроса;
	
КонецФункции

Функция ТЗПолучитьТекстЗапросаСчетаФактуры()
	
	ТекстЗапроса=	
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Документ,
	|	СчетФактураВыданный.Организация КАК Продавец,
	|	СчетФактураВыданный.Контрагент КАК покупатель,
	|	СчетФактураВыданный.СуммаДокумента СуммаДокументаЗначение,
	|	0 КАК СуммаНДСТовары,
	|	СчетФактураВыданный.ВалютаДокумента КАК Валюта,
	|	ЗначенияСвойствОбъектов.Значение КАК ID_,
	|	Ложь КАК ЭтоСчет,
	|  """" как СостояниеОтправкиДополнительныхВПФ,
	|	""СчетФактураВыданный"" КАК Тип
	|
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО СчетФактураВыданный.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадокСф)
	|		СОЕДИНЕНИЕ фильтрПоОрганизациям
	|		ПО
	|			СчетФактураВыданный.Организация = фильтрПоОрганизациям.Организация
	|ГДЕ
	|	((фильтрПоОрганизациям.ОтпрНеПроведенные И СчетФактураВыданный.ПометкаУдаления=Ложь) ИЛИ (НЕ фильтрПоОрганизациям.ОтпрНеПроведенные И СчетФактураВыданный.Проведен))
	|	И СчетФактураВыданный.Дата МЕЖДУ &ДатаНачала И &Датаокончания
	|	И СчетФактураВыданный.Контрагент В(&Контрагент)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТЗПолучитьТекстЗапросаСчетаНаОплату()
	
	ТекстЗапроса=	
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка Документ,
	|	СчетНаОплату.Организация Продавец,
	|	СчетНаОплату.Контрагент Покупатель,
	|	СчетНаОплату.СуммаДокумента СуммаДокументаЗначение,
	|	ЕСТЬNULL(СУММА(ТоварыТЧ.СуммаНДС), 0) СуммаНДСЗначение,
	|	СчетНаОплату.ВалютаДокумента Валюта,
	|	ЗначенияСвойствОбъектов.Значение КАК ID_,
	|	Истина КАК ЭтоСчет,
	|   """" как СостояниеОтправкиДополнительныхВПФ,
	|	""СчетНаОплату"" КАК Тип
	|
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО СчетНаОплату.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадокСч)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплату.Товары КАК ТоварыТЧ
	|		ПО ТоварыТЧ.Ссылка = СчетНаОплату.Ссылка
	|		СОЕДИНЕНИЕ фильтрПоОрганизациям
	|		ПО
	|			СчетНаОплату.Организация = фильтрПоОрганизациям.Организация
	|ГДЕ
	|	СчетНаОплату.ПометкаУдаления=Ложь
	|	И СчетНаОплату.Дата МЕЖДУ &ДатаНачала И &Датаокончания
	|	И СчетНаОплату.Контрагент В(&Контрагент)
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплату.Ссылка,
	|	СчетНаОплату.Организация,
	|	СчетНаОплату.Контрагент,
	|	СчетНаОплату.СуммаДокумента,
	|	СчетНаОплату.ВалютаДокумента,
	|	ЗначенияСвойствОбъектов.Значение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТЗПолучитьТекстЗапросаНакладные()
	
	ТекстЗапроса=	"";
	
	ТекстЗапроса=	ТЗТекстЗапросаРеализацияТоваровУслуг();
	
	Если Метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда
		ТекстЗапроса=	ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТЗТекстЗапросаКорректировкаРеализации();
	КонецЕсли;
	
	Если Метаданные.Документы.Найти("РеализацияАвтомобилей") <> Неопределено Тогда
		ТекстЗапроса=	ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТЗТекстЗапросаРеализацияАвтомобилей();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//{ ТЗТекстЗапросаНакладные...

Функция ТЗТекстЗапросаРеализацияТоваровУслуг()
	
	ТекстЗапроса=	
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Организация КАК Продавец,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокументаЗначение,
	|	ЕСТЬNULL(СУММА(ТоварыТЧ.СуммаНДС), 0) КАК СуммаНДСЗначение,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	ЗначенияСвойствОбъектов.Значение КАК ID_,
	|	Ложь КАК ЭтоСчет,
	|   """" как СостояниеОтправкиДополнительныхВПФ,
	|	""РеализацияТоваровУслуг"" КАК Тип
	|
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияТоваровУслуг.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК ТоварыТЧ
	|		ПО (ТоварыТЧ.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ фильтрПоОрганизациям КАК фильтрПоОрганизациям
	|		ПО РеализацияТоваровУслуг.Организация = фильтрПоОрганизациям.Организация
	|ГДЕ
	|	(фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И РеализацияТоваровУслуг.ПометкаУдаления = Ложь
	|			ИЛИ НЕ фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И РеализацияТоваровУслуг.Проведен)
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &Датаокончания
	|	И РеализацияТоваровУслуг.Контрагент В(&Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	ЗначенияСвойствОбъектов.Значение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТЗТекстЗапросаКорректировкаРеализации()
	
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ТоварныеСтроки.СуммаНДС), 0) + ЕСТЬNULL(СУММА(ТоварныеСтроки.суммаНДСУслуги), 0),
	|	КорректировкаРеализации.ВалютаДокумента,
	|	МАКСИМУМ(ЗначенияСвойствОбъектов.Значение),
	|	Ложь КАК ЭтоСчет,
	|   """" как СостояниеОтправкиДополнительныхВПФ,
	|	""КорректировкаРеализации"" КАК Тип
	|
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО КорректировкаРеализации.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыТЧ.Ссылка КАК Ссылка,
	|			ТоварыТЧ.СуммаНДС КАК СуммаНДС,
	|			0 КАК суммаНДСУслуги
	|		ИЗ
	|			Документ.КорректировкаРеализации.Товары КАК ТоварыТЧ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			УслугиТЧ.Ссылка,
	|			0,
	|			УслугиТЧ.СуммаНДС
	|		ИЗ
	|			Документ.КорректировкаРеализации.Работы КАК УслугиТЧ) КАК ТоварныеСтроки
	|		ПО (ТоварныеСтроки.Ссылка = КорректировкаРеализации.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ фильтрПоОрганизациям КАК фильтрПоОрганизациям
	|		ПО КорректировкаРеализации.Организация = фильтрПоОрганизациям.Организация
	|ГДЕ
	|	(фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И КорректировкаРеализации.ПометкаУдаления = Ложь
	|			ИЛИ НЕ фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И КорректировкаРеализации.Проведен)
	|	И КорректировкаРеализации.Дата МЕЖДУ &ДатаНачала И &Датаокончания
	|	И КорректировкаРеализации.Контрагент В(&Контрагент)
	|	И КорректировкаРеализации.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.СуммаДокумента,
	|	КорректировкаРеализации.ВалютаДокумента";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТЗТекстЗапросаРеализацияАвтомобилей()
	
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	РеализацияАвтомобилей.Ссылка,
	|	РеализацияАвтомобилей.Организация,
	|	РеализацияАвтомобилей.Контрагент,
	|	РеализацияАвтомобилей.СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ТоварныеСтроки.СуммаНДС), 0),
	|	РеализацияАвтомобилей.ВалютаДокумента,
	|	ЗначенияСвойствОбъектов.Значение,
	|	Ложь КАК ЭтоСчет,
	|   """" как СостояниеОтправкиДополнительныхВПФ,
	|	""РеализацияАвтомобилей"" КАК Тип
	|
	|ИЗ
	|	Документ.РеализацияАвтомобилей КАК РеализацияАвтомобилей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияАвтомобилей.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &ИдентификаторДокументаВДиадок)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыТЧ.Ссылка КАК Ссылка,
	|			ТоварыТЧ.СуммаНДС КАК СуммаНДС
	|		ИЗ
	|			Документ.РеализацияАвтомобилей.Товары КАК ТоварыТЧ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			АвтомобилиТЧ.Ссылка,
	|			АвтомобилиТЧ.СуммаНДС
	|		ИЗ
	|			Документ.РеализацияАвтомобилей.Автомобили КАК АвтомобилиТЧ) КАК ТоварныеСтроки
	|		ПО (ТоварныеСтроки.Ссылка = РеализацияАвтомобилей.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ фильтрПоОрганизациям КАК фильтрПоОрганизациям
	|		ПО РеализацияАвтомобилей.Организация = фильтрПоОрганизациям.Организация
	|ГДЕ
	|	(фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И РеализацияАвтомобилей.ПометкаУдаления = Ложь
	|			ИЛИ НЕ фильтрПоОрганизациям.ОтпрНеПроведенные
	|				И РеализацияАвтомобилей.Проведен)
	|	И РеализацияАвтомобилей.Дата МЕЖДУ &ДатаНачала И &Датаокончания
	|	И РеализацияАвтомобилей.Контрагент В(&Контрагент)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияАвтомобилей.Ссылка,
	|	РеализацияАвтомобилей.Организация,
	|	РеализацияАвтомобилей.Контрагент,
	|	РеализацияАвтомобилей.СуммаДокумента,
	|	РеализацияАвтомобилей.ВалютаДокумента,
	|	ЗначенияСвойствОбъектов.Значение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//} ТЗТекстЗапросаНакладные...

//} ТЗПолучитьТекстЗапроса...

//} ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////
// функции для генерации контента 
/////////////////////////////////////////


Функция ПолучитьБанковскийСчетПоДокументу(ДокСсылка) Экспорт 
	Если (докСсылка.метаданные().реквизиты.найти("РасчетныйСчетОрганизации")<>Неопределено ) и (ТипЗнч(ДокСсылка.РасчетныйСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда
		Возврат  ДокСсылка.РасчетныйСчетОрганизации
	иначе 
		Возврат Неопределено
	КонецЕсли;	 
КонецФункции	

/////////////////////////////////////////////////////////////////////////////
// функции генерации сотруктуры для генерации торг-12 или акта выполненных работ
//////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
	Возврат киПолучитьПредставлениеАдреса(записьрегистра) 
КонецФункции

Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
	Возврат Справочники.ВидыКонтактнойИнформации.АдресЮридический;
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес = Ложь, АдресСтрокой = "") Экспорт
	
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо,,АдресСтрокой);
		
	Иначе
		
		Если ИспользоватьЮрАдрес Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресЮридический;
		Иначе
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресФактический;
		КонецЕсли;
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо, ВидАдреса);
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьСтруктурированноеОписаниеЮрФизЛица( ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес)
	результат = Новый Структура("Name, Inn, Kpp, IsSoleProprietor, Okpo, Phone, Fax, BankAccountNumber, BankName, BankId, Address");
	НаименованиеОрганизации = юрФизЛицо.НаименованиеПолное;
	ЭтоИП = (юрФизЛицо.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо) ;
	
	результат.Name = НаименованиеОрганизации;
	результат.Inn = СокрЛП(юрФизЛицо.ИНН);
	результат.Kpp= СокрЛП(юрФизЛицо.КПП);
	результат.IsSoleProprietor = ЭтоИП;
	результат.Okpo = юрФизЛицо.КодПоОкпо;
	результат.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(  спПолучитьПредставление(юрФизЛицо, Новый Структура("ТелефонРабочий", ""))   );
	результат.Fax =   "" ;
	результат.BankAccountNumber =    спПолучитьПредставление(юрФизЛицо, Новый Структура("БанковскийСчет", ""));
	результат.BankName  =   спПолучитьПредставление(юрФизЛицо, Новый Структура("Банк", ""));
	результат.BankId =    СокрЛП(спПолучитьПредставление(юрФизЛицо, Новый Структура("БИК", "")));
	
	Возврат результат;
КонецФункции

Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "")  Экспорт 

	НаименованиеОрганизации = юрФизЛицо.НаименованиеПолное;
	ЭтоИП = (юрФизЛицо.ФормаСобственности <> Перечисления.ФормыСобственности.ЮридическоеЛицо) ;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.Inn = СокрЛП(юрФизЛицо.ИНН);
	OrganizationInfo.Kpp= СокрЛП(юрФизЛицо.КПП);
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, ЮрАдрес, АдресСтрокой);
	OrganizationInfo.IsSoleProprietor = ЭтоИП;
	
	Если АдресДляСФ=Ложь Тогда
		
		OrganizationInfo.Okpo = юрФизЛицо.КодПоОкпо;
		OrganizationInfo.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(  спПолучитьПредставление(юрФизЛицо, Новый Структура("ТелефонРабочий", ""))   );
		OrganizationInfo.Fax =   "" ;
		OrganizationInfo.BankAccountNumber =    спПолучитьПредставление(юрФизЛицо, Новый Структура("БанковскийСчет", ""));
		OrganizationInfo.BankName  =   спПолучитьПредставление(юрФизЛицо, Новый Структура("Банк", ""));
		OrganizationInfo.BankId =    СокрЛП(спПолучитьПредставление(юрФизЛицо, Новый Структура("БИК", "")));
	КонецЕсли;
	
	OrganizationInfo.вставить("Ссылка",  ЮрФизЛицо);
	
	
	
КонецПроцедуры	


Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)  Экспорт 
	НаименованиеОрганизации = контрагент.НаименованиеПолное;
	Возврат Новый Структура("Наименование, ИНН, КПП", НаименованиеОрганизации, СокрЛП(контрагент.ИНН),  СокрЛП(контрагент.КПП));
КонецФункции

Функция ДобавитьРазделитель(Стр, Префикс = "") 
	Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
КонецФункции

Функция СформироватьПредставлениеАдреса(СведенияОбАдресе)
	Если СведенияОбАдресе.IsForeign = Ложь Тогда
		КодРегиона 	= СведенияОбАдресе.RegionCode;
		Индекс 		= СведенияОбАдресе.ZipCode;
		Район 		= СведенияОбАдресе.Territory;
		Город 		= СведенияОбАдресе.City;
		НаселПункт  = СведенияОбАдресе.Locality;
		Улица       = СведенияОбАдресе.Street;
		Дом         = СведенияОбАдресе.Building;
		Корпус      = СведенияОбАдресе.Block;
		Кварт       = СведенияОбАдресе.Apartment;
		
		ПредставлениеАдреса = ДобавитьРазделитель(Индекс)+ДобавитьРазделитель(НаименованиеРегиона(КодРегиона))+ДобавитьРазделитель(Район)+
		ДобавитьРазделитель(Город)+ДобавитьРазделитель(НаселПункт)+ДобавитьРазделитель(Улица)+
		ДобавитьРазделитель(Дом, "дом №")+ДобавитьРазделитель(Корпус, "корпус ")+ДобавитьРазделитель(Кварт,"кв ");
		Возврат лев(ПредставлениеАдреса, СтрДлина(ПредставлениеАдреса)-2);
	Иначе
		Возврат ""
	КонецЕсли;	
КонецФункции	

Функция ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации, СведенияОбАдресе=Неопределено)
	СтрОписаниеЮрлица = "";
	СтрОписаниеЮрлица = СтрОписаниеЮрлица+ СведенияОбОрганизации.Name;
	СтрОписаниеЮрлица = СтрОписаниеЮрлица + ", ИНН "+СведенияОбОрганизации.Inn;
	СтрОписаниеЮрлица = СтрОписаниеЮрлица+", " + "КПП "+СведенияОбОрганизации.Kpp;
	
	Если СведенияОбАдресе<>Неопределено Тогда 
		СтрОписаниеЮрлица = СтрОписаниеЮрлица+", "+СформироватьПредставлениеАдреса(СведенияОбАдресе);
	КонецЕсли;	
	
	Возврат СтрОписаниеЮрлица;
КонецФункции


Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
	
	СведенияОбОрганизации = ПолучитьСтруктурированноеОписаниеЮрФизЛица( Контрагент, датаОперации, БанковскийСчет,  Истина);
	
	СведенияОбАдресе = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_AddressInfo();
	ЗаполнитьСтруктуруАдреса(СведенияОбАдресе, Контрагент, Истина);
	
	Возврат ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации, СведенияОбАдресе)
	
КонецФункции

Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСтруктурированноеОписаниеЮрФизЛица( Контрагент, датаОперации, Неопределено,  Истина);
	Возврат ОписаниеЮрЛица_ВСтроку(СведенияОбОрганизации)
	
КонецФункции	

Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)  Экспорт 
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкССылка = БанковскийСчетОрганизации;
		Если БанкСсылка<>Неопределено Тогда 
			мБанк = ?(НЕ ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов), БанкСсылка.Банк, БанкСсылка.БанкДляРасчетов);
			мГородБанка = мБанк.Город;
			мКоррСчет   = мБанк.КоррСчет;
			мБИК        = мБанк.Код;
			мНомерСчета = ?(БанкСсылка.БанкДляРасчетов.Пустая(), БанкСсылка.НомерСчета,БанкСсылка.Банк.КоррСчет);
			
			мТекстПолучателя = Организация.НаименованиеПолное;
			Если ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов) Тогда
				мТекстПолучателя = мТекстПолучателя + " р/с " + БанкСсылка.НомерСчета + " в " + БанкСсылка.Банк + " " + БанкСсылка.Банк.Город;
			КонецЕсли;	
			
		КонецЕсли;
		Возврат Новый Структура ("Банк,БИК,КоррСчет,ГородБанка,НомерМсета,ТекстПолучателя,НомерСчета",мБанк,мБИК,мКоррСчет,мГородБанка,мНомерСчета,мТекстПолучателя,мНомерСчета);
	иначе 
		Возврат Неопределено
	КонецЕсли;		
КонецФункции



Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт = Ложь, ЭтоУПД = Ложь)  Экспорт 
	
	ДоговорКонтрагента = ДокСсылка.ДоговорВзаиморасчетов;
	
	Ground = Новый Структура;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента)=Ложь  Тогда 
		
		Ground.Вставить("GroundName", 	"");
		Ground.Вставить("GroundNumber", "");
		Ground.Вставить("GroundDate", 	"");
		Ground.Вставить("Основание",  	"");
		
	Иначе 
			
		Если ЭтоУПД Тогда
			ПредставлениеДоговора= "Договор";
		Иначе
			ПредставлениеДоговора= ДоговорКонтрагента.Наименование;
		КонецЕсли;
			
		Ground.Вставить("GroundName", 	ПредставлениеДоговора);
		Ground.Вставить("GroundNumber", ДоговорКонтрагента.НомерДоговора);
		Ground.Вставить("GroundDate", 	ДоговорКонтрагента.ДатаНачала);
		Ground.Вставить("Основание",  	ДоговорКонтрагента);
		
	КонецЕсли;	 
	
	Возврат  Ground;
	
КонецФункции	

Функция  ИнициализироватьТабличнуюЧасть(ЭтоКСФ);
	ТабличнаяЧасть = Новый таблицаЗначений;
	ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
	ТабличнаяЧасть.Колонки.Добавить("КодНоменклатуры");
	ТабличнаяЧасть.Колонки.Добавить("КодЕдиницыИзмерения");
	ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмерения");
	ТабличнаяЧасть.Колонки.Добавить("ВидУпаковки");
	ТабличнаяЧасть.Колонки.Добавить("КоличествоВОдномМесте");
	ТабличнаяЧасть.Колонки.Добавить("КоличествоМест");
	ТабличнаяЧасть.Колонки.Добавить("масса");
	ТабличнаяЧасть.Колонки.Добавить("Количество");
	ТабличнаяЧасть.Колонки.Добавить("Цена");
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.Добавить("СуммаНДС");
	ТабличнаяЧасть.Колонки.Добавить("Сумма");
	ТабличнаяЧасть.Колонки.Добавить("СуммаВключаетНДС");
	ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхождения");
	ТабличнаяЧасть.Колонки.Добавить("НомерГТД");
	
	Если ЭтоКСФ Тогда 
		ТабличнаяЧасть.Колонки.Добавить("СтранаПроисхожденияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("НомерГТДДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("КоличествоДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("ЕдиницаИзмеренияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("КодЕдиницыИзмеренияДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("ЦенаДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СтавкаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СуммаНДСДоИзменения");
		ТабличнаяЧасть.Колонки.Добавить("СуммаДоИзменения");
	КонецЕсли;	
	
	
	Возврат табличнаяЧасть;
КонецФункции

Функция ПолучитьЕИПоКлассификатору(ЕдиницаИзмерения)
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) и (ТипЗнч(ЕдиницаИзмерения)= тип("СправочникСсылка.ЕдиницыИзмерения")) Тогда 
		Возврат ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
	Иначе 
		Возврат ЕдиницаИзмерения
	КонецЕсли; 
	
КонецФункции	

Функция ПолучитьОтветственноеЛицо(ДатаДокумента, Организация, ВидОтвественногоЛица)
	
	СтруктураСведений = РегистрыСведений.СведенияКомпании.ПолучитьПоследнее(ДатаДокумента, Новый Структура("Организация,Объект", Организация, ВидОтвественногоЛица));
	Возврат СтруктураСведений.Значение;
	
КонецФункции


/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция ДобавитьВедущиеНули(стр, длина)
	результат = стр;
	пока стрДлина(результат)<длина цикл 
		результат = "0"+результат
	КонецЦикла;
	Возврат результат;
	
КонецФункции	

Функция СвернутьтаблицуПоКлючам(ТабличнаяЧасть)
	ТабличнаяЧасть.Колонки.удалить(ТабличнаяЧасть.Колонки.XmlTorg12_Item);
	СписокКлючей = Новый СписокЗначений();
	СтрокаСвертки = "";
	Для каждого колонка из ТабличнаяЧасть.колонки цикл 
		Если найти("Количество, Сумма, СуммаНДС, Всего, XmlTorg12_ItemSubtotal, XmlTorg12_ItemSubtotalWithVatExcluded,  НомерСтроки", колонка.имя)=0 Тогда 
			СписокКлючей.Добавить(колонка.имя);
			СтрокаСвертки =  ?(СтрокаСвертки="", "", СтрокаСвертки+", ")+ колонка.имя;
		КонецЕсли;	
	КонецЦикла;;	
	
	Результат = ТабличнаяЧасть.скопировать();
	Результат.свернуть(СтрокаСвертки, "Количество, Сумма, СуммаНДС, Всего, XmlTorg12_ItemSubtotal, XmlTorg12_ItemSubtotalWithVatExcluded,  НомерСтроки");
	
	Если результат.количество() = ТабличнаяЧасть.количество() Тогда
		//сворачивать нечего
		Возврат    ТабличнаяЧасть
	КонецЕсли;
	
	//расставим номера в свернутой таблице
	Для каждого стр из результат цикл 
		Ключ = Новый Структура;
		Для каждого колонка из  СписокКлючей цикл 
			Ключ.Вставить(колонка.Значение, стр[колонка.Значение]);
		КонецЦикла;
		
		выборка =  ТабличнаяЧасть.найтистроки(Ключ);
		стр.номерСтроки = ДобавитьВедущиеНули(выборка[0].НомерСтроки, 4);
	КонецЦикла;	
	
	результат.сортировать("НомерСтроки");
	Возврат результат;  
КонецФункции

Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧастьВходящая = Неопределено, СуммаВключаетНДС = Истина, видОперации, ЗаполнениеГТД = Ложь) Экспорт
	
	Если ТабличнаяЧастьВходящая = Неопределено Тогда
		ТабличнаяЧасть =	Неопределено;
	Иначе
		ТабличнаяЧасть =  ТабличнаяЧастьВходящая.скопировать();
	КонецЕсли;
	
	
	Если видОперации = "ПоступлениеДопРасходов" Тогда
		ДокОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
	ИначеЕсли видОперации = "ПоступлениеАвтомобилей" Тогда
		ДокОбъект = Документы.ПоступлениеАвтомобилей.СоздатьДокумент();	
	Иначе
		ДокОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		
		Если ТабличнаяЧасть<>Неопределено Тогда 
			ТабличнаяЧасть = СвернутьтаблицуПоКлючам(ТабличнаяЧастьВходящая);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение возможных полей
	Если видОперации = "ПоступлениеДопРасходов" Тогда
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеДопРасходов;
	ИначеЕсли видОперации = "ПоступлениеАвтомобилей" Тогда
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеАвтомобилей;
	Иначе
		ДокОбъект.ХозОперация = Справочники.ХозОперации.ПоступлениеТоваров;
	КонецЕсли;
	
	
	
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.BoxInfo.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
		
		Если ЗначениеЗаполнено(параметры.ДоговорКонтрагента) Тогда 
			ДокОбъект.ДоговорВзаиморасчетов= параметры.ДоговорКонтрагента;
			ДокОбъект.ВалютаДокумента= параметры.ДоговорКонтрагента.ВалютаВзаимоРасчетов;
		КонецЕсли;
	КонецЕсли;
	
	дкФормаПриОткрытии(ДокОбъект.ПолучитьФорму());
	
	
	ДокОбъект.ВхДокДата = параметры.ДатаВходящегоДокумента;
	ДокОбъект.ВхДокНомер = параметры.НомерВходящегоДокумента;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для каждого стр Из ТабличнаяЧасть Цикл
			Если видОперации = "ПоступлениеАвтомобилей" Тогда
				стрОбъект = ДокОбъект.Автомобили.Добавить();
				стрОбъект.Автомобиль = стр.Номенклатура;
				стрОбъект.АвтомобильБезЗаказа = Истина;
				стрОбъект.ИдентификаторАвтомобиля=Новый УникальныйИдентификатор;
				стрОбъект.Количество = 1;
			Иначе
				
				стрОбъект = ДокОбъект.Товары.Добавить();
				стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
				Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
					стрОбъект.Коэффициент = стр.ЕдиницаИзмерения.Коэффициент;
				КонецЕсли;
				
				стрОбъект.Номенклатура = стр.Номенклатура;
				стрОбъект.Количество = стр.Количество;
				Если видОперации = "ПоступлениеДопРасходов" Тогда
					стрОбъект.ЕдиницаИзмерения =  стрОбъект.Номенклатура.ОсновнаяЕдиницаИзмерения;
					Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
						стрОбъект.Коэффициент = стрОбъект.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
				Иначе
					стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
					Если ЗначениеЗаполнено(стр.ЕдиницаИзмерения) Тогда
						стрОбъект.Коэффициент = стр.ЕдиницаИзмерения.Коэффициент;
					КонецЕсли;
					стрОбъект.КоличествоБазовое = стр.Количество * стрОбъект.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокОбъект.ТипЦен.ЦенаВключаетНДС Тогда
				стрОбъект.Сумма = стр.Всего;
			Иначе
				стрОбъект.Сумма = стр.Всего - стр.СуммаНДС;
			КонецЕсли;
			
			Если ЗаполнениеГТД Тогда
				стрОбъект.ГТД = НайтиИлиСоздатьГТД(стр.ГТД,стр.СтранаПроисхождения);
			КонецЕсли;
			
			
			стрОбъект.Цена = стрОбъект.Сумма / ?(стрОбъект.Количество = 0, 1, стрОбъект.Количество);
			
			стрОбъект.СуммаНДС = стр.СуммаНДС;
			стрОбъект.СуммаВсего = стр.Всего;
			стрОбъект.СтавкаНДС = стр.СтавкаНДС;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокОбъект;
КонецФункции

Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
	
	ДокОбъект = Документы.ВозвратОтПокупателя.СоздатьДокумент();
	//ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	//ДокОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
	КонецЕсли;
	
	//мСписокВидовДоговоров = Новый СписокЗначений;
	//мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//Если ДокОбъект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
	//мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//КонецЕсли;
	//СтруктураПараметровДляПолученияДоговора=	Новый Структура();
	//СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокВидовДоговоров);
	
	ДокОбъект.ОбработкаРеквизита("Контрагент", ,);
	
	Возврат ДокОбъект;
	
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция НайтиИлиСоздатьГТД(номерГТД,СтранаПроисхождения)
	
	Если значениеЗаполнено(НомерГТД)=Ложь Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГТД.Ссылка
	|ИЗ
	|	Справочник.ГТД КАК ГТД
	|ГДЕ
	|	ГТД.Страна = &СтранаПроисхождения
	|	И ГТД.Наименование = &НомерГТД";
	
	Запрос.УстановитьПараметр("СтранаПроисхождения",СтранаПроисхождения );
	Запрос.УстановитьПараметр("НомерГТД",НомерГТД );
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ссылка;
	Иначе
		элементГТДОбъект = Справочники.ГТД.СоздатьЭлемент();
		элементГТДОбъект.Наименование = номерГТД;
		элементГТДОбъект.Страна = СтранаПроисхождения;
		элементГТДОбъект.УстановитьНовыйКод();
		Попытка
			элементГТДОбъект.Записать();
			Возврат элементГТДОбъект.Ссылка;
		Исключение
			Сообщить("Ошибка при записи ГТД:
			|"+ ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецФункции



Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
	СчетФактура.ОбработкаРеквизита("Контрагент",,СчетФактура.ПолучитьФорму());
КонецПроцедуры


Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
	
	ПодходящаяЕИ = Неопределено;
	Если типЗнч(Номенклатура) = тип("СправочникСсылка.Номенклатура") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕИ.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения ЕИ
		|ГДЕ
		|	ЕИ.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура.ТипНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		пока  Выборка.Следующий() Цикл
			ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
			Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
				Возврат  Выборка.Ссылка;
			КонецЕсли;	
			Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
			Если коэф <> Неопределено Тогда 
				ПодходящаяЕИ = выборка.ссылка;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции


Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции


Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Если Лев(TaxRate, 2) = "10" Тогда
		
		Возврат Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 10);
		
	ИначеЕсли Лев(TaxRate, 2) = "18" Тогда
		
		Возврат Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 18);
		
	ИначеЕсли Лев(TaxRate, 1) = "0" Тогда
		
		Запрос= Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.СтавкиНДС ГДЕ НЕ Предопределенный И Наименование ПОДОБНО &Наименование");
		Запрос.УстановитьПараметр("Наименование", "0%");
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(TaxRate) ИЛИ НРег(TaxRate) = "без ндс" Тогда
		
		Возврат Справочники.СтавкиНДС.БезНДС;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Покупка);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоров.Прочее);
	Возврат СписокВидовДоговоров;
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров);
	
КонецФункции

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыВзаиморасчетов.ПолучитьФормуСписка(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.РежимВыбора = Истина;
	
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	
	
	ФрмВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФрмВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФрмВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.Значение                             = ТекущаяДата();
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.Использование                        = Истина;
	ФрмВыбора.СправочникСписок.Отбор.ДатаНачала.ВидСравнения                         = ВидСравнения.МеньшеИлиРавно;
	
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.Значение                              = ДатаДокумента;
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.Использование                         = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ДатаКонца.ВидСравнения                          = ВидСравнения.БольшеИлиРавно;
	
	
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	//СтруктураОтбора = Новый Структура;
	//СтруктураОтбора.Вставить("Организация",Организация);
	//СтруктураОтбора.Вставить("ДатаНачала",ДатаДокумента);
	
	Возврат ФрмВыбора;
КонецФункции

//////////////////////////////////////////////////////
//функции генерации структуры для ФУФ счета-фактуры
///////////////////////////////////////////////////////

Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ)   Экспорт 
	результат = Новый Структура;
	
	ДокОснование = ИСФ.ДокументОснование;
	Если ДокОснование.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон Тогда 
		Докоснование = ДокОснование.ДокументОснование;
	иначе 	
		пока (ТипЗнч(Докоснование) = Тип("ДокументСсылка.КорректировкаРеализации")) и (ДокОснование.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах) цикл 
			ДокОснование = ДокОснование.ДокументОснование;
		КонецЦикла;
	КонецЕсли;	
	
	результат.Вставить("ПервичныйДокументОснование",  ДокОснование);
	//ищем СФ
	запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = Ложь
	|	И СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("Документоснование", ДокОснование);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда 
		Возврат  выборка.ссылка;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СформироватьСведенияОПодписанте(юрФизЛицо)
	СведенияОПодписанте = Новый Структура;
	
	ОбъектДляОтбора = ЮрФизЛицо;
	
	//формируем данные для элемента ИдСвед
	//	ИдСвед = Новый Структура;	
	Если стрДлина(СокрЛП(юрФизЛицо.ИНН))=12 Тогда 
		//это физлицо 
		СведенияФЛ = Новый Структура;
		СведенияФЛ.Вставить("ИННФЛ", СокрЛП(юрФизЛицо.ИНН));
		
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			//для нашей организации - данные берем из нормализованного представления физлица
			ПредставлениеФИО  = юрФизЛицо.наименованиеПолное;
			ОбъектДляОтбора = юрФизЛицо;
			//сформируем сведения, необходимые для формирования данных о подписанте 
			ИП = Новый Структура;
			ИП.Вставить("ИННФЛ", СокрЛП(юрФизЛицо.ИНН));
			//  Если ЗначениеЗаполнено(ЮрФизЛицо.СвидетельствоСерияНомер) и ЗначениеЗаполнено(ЮрФизЛицо.СвидетельствоДатавыдачи) Тогда 
			//  	ИП.Вставить("СвГосРегИП", ЮрФизЛицо.СвидетельствоСерияНомер+" от "+Формат(ЮрФизЛицо.СвидетельствоДатавыдачи, "ДФ=dd.MM.yyyy"))
			//КонецЕсли;
			СведенияОПодписанте.Вставить("ИП", ИП);
		Иначе 
			ПредставлениеФИО  = юрФизЛицо.НаименованиеПолное 
		КонецЕсли;	  
		ФИО = Новый Структура;
		ФИО.Вставить("Фамилия", ВыделитьСлово(ПредставлениеФИО));
		ФИО.Вставить("Имя", ВыделитьСлово(ПредставлениеФИО));
		ФИО.Вставить("Отчество", ВыделитьСлово(ПредставлениеФИО));
		СведенияФЛ.Вставить("ФИОИП", ФИО);
	Иначе 
		//это юрлицо 
		СведенияЮЛ = Новый Структура;
		СведенияЮЛ.Вставить("НаимОрг", юрФизЛицо.НаименованиеПолное); 
		СведенияЮЛ.Вставить("ИННЮЛ", СокрЛП(юрФизЛицо.ИНН));
		СведенияЮЛ.Вставить("КПП", юрФизЛицо.КПП);
		
		
		//формируем сведения, необходимые для тэга Подписант
		ЮЛ = Новый Структура;
		ЮЛ.Вставить("ИННЮЛ",  СокрЛП(юрФизЛицо.ИНН));
		СведенияОПодписанте.Вставить("ЮЛ", ЮЛ);
	КонецЕсли;	  
	
	Возврат СведенияОПодписанте;
КонецФункции


Функция сформироватьДанныеДляПечати(СсылкаНаОбъект, ЭтоКСФ) Экспорт  
	ДанныеДляПечати = Новый Структура;
	ДанныеДляпечати.Вставить("Дата"				, СсылкаНаОбъект.Дата);
	ДанныеДляПечати.Вставить("Номер"			, ССылкаНаОбъект.Номер);
	
	Если  ЭтоКСФ = Ложь Тогда
		ДанныеДляПечати.Вставить("ДатаНомерДокументовОплаты", Новый массив);
		ДанныеДляПечати.Вставить("Валюта", СсылкаНаОбъект.ВалютаДокумента);
		ДанныеДляПечати.Вставить("Покупатель", СсылкаНаОбъект.Контрагент);
		ДанныеДляПечати.Вставить("Поставщик", СсылкаНаОбъект.Организация);
		ДанныеДляПечати.Вставить("Грузоотправитель", ?(СсылкаНаОбъект.Организация = СсылкаНаОбъект.ПодразделениеКомпании.Организация,"он же",СсылкаНаОбъект.ПодразделениеКомпании.Организация));
		ДанныеДляПечати.Вставить("Грузополучатель", СсылкаНаОбъект.Грузополучатель);
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", ПолучитьДанныеТЧ(СсылканаОбъект, ЭтоКСФ, Истина));
	Иначе 
		ДанныеДляПечати.Вставить("ДатаНомерДокументовОплаты", Новый массив);
		ДанныеДляПечати.Вставить("Валюта", СсылкаНаОбъект.ВалютаДокумента);
		ДанныеДляПечати.Вставить("Покупатель", СсылкаНаОбъект.Контрагент);
		ДанныеДляПечати.Вставить("Поставщик", СсылкаНаОбъект.Организация);
		ДанныеДляПечати.Вставить("ТабличнаяЧасть", ПолучитьДанныеТЧ(СсылканаОбъект, ЭтоКСФ, Истина));
	КонецЕсли;
	
	
	Возврат ДанныеДляПечати;
КонецФункции

Функция ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
	Если стрДлина(СокрЛП(юрФизЛицо.ИНН))=12 Тогда 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
			НаименованиеОрганизации  = юрФизЛицо.ИндивидуальныйПредприниматель.Наименование;
		Иначе 
			НаименованиеОрганизации  = юрФизЛицо.НаименованиеПолное 
		КонецЕсли;	  
		ЭтоИП = Истина
	Иначе 
		НаименованиеОрганизации =    юрФизЛицо.НаименованиеПолное;
		ЭтоИП = Ложь;
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	OrganizationInfo.Ссылка = ЮрФизЛицо;
	OrganizationInfo.SameAsSellerOrBuyer = Ложь;
	
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, Ложь, АдресСтрокой);
	
	
КонецФункции

Функция СФОтправлена(ДокСсылка)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСсылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокОснование";
	ЗапросСФ.УстановитьПараметр("ДокОснование", ДокСсылка);
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	Пока ВыборкаСФ.Следующий() Цикл
		DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ВыборкаСФ.ДокСсылка);
		Если ЗначениеЗаполнено(DocumentId) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьПоследнееИсправление(КоррСтарт, ПоследнееОтправленное) Экспорт
	текКор = КоррСтарт;
	
	Пока Истина Цикл
		// получаем следующего кандидата, проверям его
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокСсылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.ДокументОснование = &ДокСсылка
		|	И Док.ХозОперация = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", текКор);
		Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Проверяем кандидата
			Если ПоследнееОтправленное И НЕ СФОтправлена(Выборка.ДокСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
		текКор = Выборка.ДокСсылка;
	КонецЦикла;
	
	Возврат текКор;
КонецФункции

Функция ПолучитьДочернееИсправление(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка
	|	И Док.ХозОперация = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокССылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
	КорректировкаОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
		КорректировкаОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииИсправлениеВПервичныхДокументах;
	Иначе
		КорректировкаОбъект.ХозОперация = Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон;
	КонецЕсли;
	
	КорректировкаОбъект.ДокументОснование = КорректировкаРеализацииОснование;
	
	Возврат КорректировкаОбъект;
КонецФункции

Функция ПолучитьНеотправленнуюКорректировку(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка
	|	И Док.ХозОперация = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Справочники.ХозОперации.КорректировкаРеализацииКорректировкаПоСогласованиюСторон);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ СФОтправлена(Выборка.ДокССылка) Тогда
			Возврат Выборка.ДокССылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокКорректировка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Док
		|ГДЕ
		|	Док.ДокументОснование = &ДокСсылка
		|	И Док.ХозОперация = &ХозОперация";
		Запрос.УстановитьПараметр("ДокСсылка", ПоследняяКорректировка);
		Запрос.УстановитьПараметр("ХозОперация", Справочники.ХозОперации.КорректировкаПоступленияИсправлениеВПервичныхДокументах);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследняяКорректировка = Выборка.ДокКорректировка;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследняяКорректировка;
	
КонецФункции

Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
	Если Document.type =  "InvoiceRevision" Тогда 
		запрос = Новый запрос;
		запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученный.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
		|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
		|	И СчетФактураПолученный.Исправление = Ложь";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));		
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Док =  результат.ДокументОснование;
			Возврат 	ПолучитьПоследнююКорректировкуПоступления(Док); 
		иначе 
			Возврат Неопределено 
		КонецЕсли;	
	ИначеЕсли Document.type = "InvoiceCorrection"  Тогда 
		запрос = Новый Запрос;
		Если ЗначениеЗаполнено(Document.OriginalInvoicerevisionNumber)=Ложь Тогда 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
			|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
			|	И СчетФактураПолученный.Исправление = Ложь";
		Иначе 
			Запрос.Текст ="ВЫБРАТЬ
			|	СчетФактураПолученный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
			|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента
			|	И СчетФактураПолученный.Исправление
			|	И СчетФактураПолученный.НомерИсправления = &НомерИсправления";
			Запрос.УстановитьПараметр("НомерИсправления", число(Document.OriginalInvoicerevisionNumber));		
		КонецЕсли;				
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	ИначеЕсли Document.type = "InvoiceCorrectionRevision"  Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураПолученный.ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ВхДокДата = &ДатаВходящегоДокумента
		|	И СчетФактураПолученный.ВхДокНомер = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalInvoiceCorrectionDate));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalInvoiceCorrectionNumber);
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	Иначе 
		Возврат Неопределено
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
	Возврат обЧислоПрописью(Total,ВалютаДокумента)
КонецФункции	

Функция ПолучитьПодразделениеИзДокумента(ДокССылка) Экспорт 
	Возврат ""
КонецФункции	

Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(Организация) Экспорт 
	Возврат ""
КонецФункции	

//{ Управление ГТД
Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;
КонецФункции
//} Управление ГТД

Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
	ДокПоступление = СчетФактура.ДокументОснование;
КонецФункции

//{ СвязиМеждуДокументами

	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции
	
	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Результат= Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ.РеализацияТоваров
		|ГДЕ
		|	НЕ ПометкаУдаления И ДокументОснование = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		РезультатЗапроса= Запрос.Выполнить(); Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать(); РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Результат.Добавить(Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат СсылкаНаОбъект.ДокументОснование;
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Возврат Новый ТаблицаЗначений;
		
	КонецФункции

//} Приглашение Контрагентов

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ВнешняяОбработкаПоGUID(GUID);
		
	КонецФункции

//} Внешние обработки