Перем ОписаниеПоведенияФлажков;
Перем Размервыгрузки;
Перем ВремяОтображения;
Перем закрыватьФорму;
Перем Количествовыгружено;
Перем ДатаПолученияГруза;
Перем ФИО;
Перем Должность;



// Параметры:
//   ТаблицаДокументов - ТаблицаЗначений, таблица документов
Процедура НачатьПроцесс(ТаблицаДокументов) Экспорт
	
	Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено Тогда
		Предупреждение("Функция не поддерживается для текущей конфигурации.",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументовОтображаемая = ТаблицаДокументов.Скопировать();
	ТаблицаДокументовОтображаемая.Колонки.Добавить("ПервичныйДокументДляСопоставления");
	ТаблицаДокументовОтображаемая.Колонки.Добавить("Сопоставлен");
	УстановитьПоведениеТаблицыДокументовОтображаемой(ЭлементыФормы.ТаблицаДокументовОтображаемая, 
	Новый Структура("ИмяКолонки, ЭлементФормы, ПроверкаВозможности, ТекстНевозможности" , 
	"Вкл", ЭлементыФормы.ВклВсе, "ПроверитьВозможностьСопоставления", "нет"));
	
	ЗаполнитьПредлагаемыеСоответствия(ТаблицаДокументовОтображаемая);
	
	Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьПредлагаемыеСоответствия(ТаблицаДокументов)  Экспорт
	
	СтрокиДляУдаления= Новый Массив;
	
	Для каждого стр Из ТаблицаДокументов Цикл
		
		Если ЗначениеЗаполнено(стр.ПервичныйДокумент)
			ИЛИ Найти(стр.DocumentType, "Nonformalized") > 0 Тогда
			СтрокиДляУдаления.Добавить(стр);
			Продолжить;
		КонецЕсли;

		Попытка
			СуммаВсего = Окр(стр.ЭДОбъект.Total, 2);
		Исключение
			// Нет поля Total
			Продолжить;
		КонецПопытки;
		
		ТипДокументов = ?(Найти(стр.ЭДОбъект.Type, "Invoice") > 0, "СчетФактураПолученный", "ПоступлениеТоваровУслуг");
		ДатаDocument = стр.ЭДОбъект.DocumentDate;
		
		СтФильтр= Новый Структура();
		
		СтФильтр.Вставить("Организация", стр.Организация);
		СтФильтр.Вставить("Контрагент", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(стр.ЭДОбъект.Counteragent.Id, стр.ЭДОбъект.Organization.id));
		СтФильтр.Вставить("ДатаВходящегоДокумента", ДатаDocument);
		СтФильтр.Вставить("СуммаДокумента", СуммаВсего);
		
		СписокОрганизацийНеТребующихСверкиПоНомеру=	ВернутьСписокОрганизацийНеТребующихСверкиПоНомеру();
		Если СписокОрганизацийНеТребующихСверкиПоНомеру.НайтиПоЗначению(стр.ЭДОбъект.Counteragent.Id) = Неопределено Тогда
			СтФильтр.Вставить("НомерВходящегоДокумента", стр.ЭДОбъект.documentNumber);
		КонецЕсли;
		
		Если ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСопоставлятьСкладыИПодразделенияДД") = Истина Тогда 
			
			НазваниеРеквизитаСклад = "";
			Если  ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияБух"  Тогда
				НазваниеРеквизитаСклад = "Склад"
			Иначе
				НазваниеРеквизитаСклад = "СкладОрдер"
			КонецЕсли;
			
			МассивСкладовПоИД = Новый Массив();
			Если стр.ЭДОбъект.Department = Неопределено Тогда
				МассивСкладовПоИД = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DepartmentID_2_МассивСкладов("00000000-0000-0000-0000-000000000000");
			Иначе
				МассивСкладовПоИД = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DepartmentID_2_МассивСкладов(стр.ЭДОбъект.Department.Id); 	
			КонецЕсли;
			
			МассивСкладов = Новый Массив();
			Для каждого Склад Из МассивСкладовПоИД Цикл
				ПодразделениеВДД=	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Склад_2_DepartmentName(Склад);
				Если НЕ ПустаяСтрока(ПодразделениеВДД) Тогда
					МассивСкладов.Добавить(Склад);
				КонецЕсли;
			КонецЦикла;
			
			СтФильтр.Вставить(НазваниеРеквизитаСклад, МассивСкладов);
			
		КонецЕсли;
		
		стр.ПервичныйДокументДляСопоставления = НайтиДокумент(ТипДокументов, стФильтр,стр.ЭДОбъект);
		стр.Сопоставлен = Истина;
		
	КонецЦикла;
	
	Для каждого стрНаУдаление Из СтрокиДляУдаления Цикл
		ТаблицаДокументов.Удалить(стрНаУдаление);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиДокумент(ТипДокументов, стФильтр,Document)
	
	Док = Неопределено;
	Если ТипДокументов = "СчетФактураПолученный" Тогда
		массивСсылокРНК = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(Document);
		Док = Модуль_ИнтеграцияОбщий.НайтиПодходящийСчетФактуруИзРНК(массивСсылокРНК);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Док) Тогда
		Возврат Док;
	Иначе
		Если НЕ ТипДокументов = "СчетФактураПолученный" 
			И НЕ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" Тогда
			Запрос = СформироватьЗапросДляВыборкиДокументов(ТипДокументов, стФильтр);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Возврат Выборка.Док;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьЗапросДляВыборкиДокументов(ТипДокументов, стФильтр)
	Запрос = Новый Запрос;
	Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка Док
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен";
		Для каждого парФильтр Из стФильтр Цикл
			Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|	И Док."+ парФильтр.Ключ+" В (&пар" + парФильтр.Ключ+")";
				Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
			Иначе 
				Запрос.Текст = Запрос.Текст + "
				|	И Док." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
				Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Док.Ссылка Док
		|ИЗ
		|	Документ.ПоступлениеДопРасходов КАК Док
		|ГДЕ
		|	Док.Проведен";
		Для каждого парФильтр Из стФильтр Цикл
			Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
				Продолжить;
			Иначе 
				Запрос.Текст = Запрос.Текст + "
				|	И Док." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
				Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка Док
		|ИЗ
		|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
		|ГДЕ
		|   Док.Ссылка.Проведен";
		
		Для каждого парФильтр Из стФильтр Цикл
			Если парФильтр.Значение <> Неопределено Тогда
				Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Док.ДокументОснование."+парФильтр.Ключ+" В (&пар" + парФильтр.Ключ+")";
					Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
				Иначе	
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ОсвободитьРесурсы()
	ТаблицаДокументовОтображаемая.Колонки.Удалить("ПервичныйДокументДляСопоставления");
КонецПроцедуры

Процедура ЗаполнитьСтатусыСогласования(стФильтр)
	ПолучитьТаблицуДокументовПоСтатусуИУстановитьСтатусСогласования(стФильтр, 22, "отказано в соглас");
	ПолучитьТаблицуДокументовПоСтатусуИУстановитьСтатусСогласования(стФильтр, 21, "согласовано");
КонецПроцедуры

Процедура ПолучитьТаблицуДокументовПоСтатусуИУстановитьСтатусСогласования(стФильтр, статус, ТекстСтатуса)
	ТаблицаСогласованных = Модуль_РаботаССерверомДиадок.ВернутьВыборкуРНКИСчетовФактурДиадок(
		стФильтр.ДатаНачала, 
		стФильтр.ДатаОкончания, 
		стФильтр.Организация, 
		стФильтр.КонтрагентID, 
		стФильтр.Направление, 
		статус,
		1, 
		стФильтр.DepertmentID, 
		стФильтр.ВключатьПодчиненныеПодазделения);
		
	Для каждого стр Из ТаблицаСогласованных Цикл
		строкаСогласованного = ТаблицаДокументовОтображаемая.Найти(стр.DocumentId, "DocumentId");
		строкаСогласованного.СтатусСогласования = ТекстСтатуса;
	КонецЦикла;
КонецПроцедуры


Функция ПроверитьВозможностьСопоставления(стр)
	Если НЕ ЗначениеЗаполнено(стр.ПервичныйДокумент) И ЗначениеЗаполнено(стр.ПервичныйДокументДляСопоставления) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции


Процедура СопоставитьВыделенные()
	строкиДляСопоставления = ТаблицаДокументовОтображаемая.НайтиСтроки(Новый Структура(ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ, Истина));
	Если строкиДляСопоставления.Количество() = 0 Тогда
		Предупреждение("Выберите хотя бы один документ.",, НаименованиеСистемы);
		Возврат;
	КонецЕсли;
	
	размервыгрузки = строкиДляСопоставления.Количество();	
    закрыватьФорму = Истина;
	
	Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
	КоличествоВыгружено = 1;
	ВремяОтображения = ТекущаяДата();
	ОбновитьСтатусПроцесса();
КонецПроцедуры
	
Процедура ОбновитьСтатусПроцесса()
	
	Если количествоВыгружено <= размервыгрузки Тогда
		Элементыформы.НадписьОтправка.Значение ="Производится подписание документов ("+КоличествоВыгружено+" из "+ размервыгрузки+")";
		ПодключитьОбработчикОжидания("КоманднаяПанель1выгрузитьОбработчик", 0.1, Истина);
	Иначе
		
		ОтключитьОбработчикОжидания("КоманднаяПанель1выгрузитьОбработчик");
		
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
		Если закрыватьФорму Тогда
	 		Оповестить("ОбновитьФормуДиадок", , ЭтаФорма);
	 		этаформа.Закрыть();
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель1выгрузитьОбработчик()
	ц = 0;
	строкиДляСопоставления = ТаблицаДокументовОтображаемая.НайтиСтроки(Новый Структура(ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ, Истина));
	
	Если строкиДляСопоставления.Количество()>0 Тогда
		стр = строкиДляСопоставления[ц];
		
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(стр.ПервичныйДокументДляСопоставления, стр.ЭДОбъект.DocumentId, стр.ЭДОбъект.OrganizationId);
		стр.ПервичныйДокумент = стр.ПервичныйДокументДляСопоставления;
		
		Попытка
			Объект = стр.ПервичныйДокументДляСопоставления.ПолучитьОбъект();
			Если Объект.Метаданные().Реквизиты.Найти("КодСпособаПолучения")<>Неопределено Тогда 
				Если Объект.КодСпособаПолучения <> 2 Тогда
					Объект.КодСпособаПолучения = 2;
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщить("Не удалось изменить реквизиты: способ получения
			|у документа: " + стр.ПервичныйДокументДляСопоставления);
		КонецПопытки;
		
		ц = ц +1;
		КоличествоВыгружено = КоличествоВыгружено + 1; 
		ОбновитьСтатусПроцесса();
		
		УстановитьФлажокДляСтроки(стр, Ложь);
		Оповестить("ОбновитьСтроку", стр.ЭДОбъект, ЭтаФорма);

	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьСтроку" Тогда 
		// Параметр - ЭДОбъект
		ОбновитьСтрокуДокумента(Параметр);
	КонецЕсли; 	  
КонецПроцедуры

Процедура ОбновитьСтрокуДокумента(ЭДОбъект)
	Если ТаблицаДокументовОтображаемая.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
	стОтбора = Новый Структура("BoxId, DocumentId",ЭДОбъект.OrganizationId, ЭДОбъект.DocumentId);
	строки = ТаблицаДокументовОтображаемая.НайтиСтроки(стОтбора);
	Если строки.Количество() > 0 Тогда
		строкаТабличногоПоля = строки[0];
		Попытка 
			Модуль_РаботаССерверомДиадок.ЗаполнитьСтрокуТаблицыДокумента(ЭДОбъект, строкаТабличногоПоля);
			ОформлениеСтроки = ЭлементыФормы.ТаблицаДокументовОтображаемая.ОформлениеСтроки(строкаТабличногоПоля);
			ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(ОформлениеСтроки, ЭДОбъект);
		Исключение 
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			Возврат
		КонецПопытки;	
	КонецЕсли;

КонецПроцедуры



/////////////////////////////////////////////////////////////////////////
// Логика элементов формы

Процедура КоманднаяПанель1ПодписатьВыделенные(Кнопка)
	СопоставитьВыделенные();
КонецПроцедуры

Процедура ПриЗакрытии()
	ОсвободитьРесурсы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////
// Поведение таблицы документов

Процедура УстановитьПоведениеТаблицыДокументовОтображаемой(ЭлементФормы, стФлажки = Неопределено)
	ЭлементФормы.УстановитьДействие("ПередНачаломИзменения", Новый Действие("ДействиеПередНачаломИзменения"));
	ЭлементФормы.УстановитьДействие("ПриИзмененииФлажка", Новый Действие("ДействиеПриИзмененииФлажка"));
	ЭлементФормы.УстановитьДействие("ПриПолученииДанных", Новый Действие("ДействиеПриПолученииДанных"));
	ЭлементФормы.УстановитьДействие("ПередУдалением", Новый Действие("действиеОтказ"));
	
	Если стФлажки <> Неопределено Тогда
		имяКолонкиВТЗ = ДобавитьКолонкуВТаблицуВкл(ЭлементФормы.Данные);
		ЭлементФормы.Колонки[стФлажки.ИмяКолонки].ДанныеФлажка = имяКолонкиВТЗ;
		ЭлементФормы.Колонки[стФлажки.ИмяКолонки].РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		ЭлементФормы.Колонки[стФлажки.ИмяКолонки].ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
		
		стФлажки.ЭлементФормы.УстановитьДействие("ПриИзменении", Новый Действие("действиеВклВсе"));
		ОписаниеПоведенияФлажков = стФлажки;
		ОписаниеПоведенияФлажков.Вставить("ИмяКолонкиВТЗ", имяКолонкиВТЗ);
		ОписаниеПоведенияФлажков.Вставить("ИмяТаблицыЗначений", ЭлементФормы.Данные);
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьКолонкуВТаблицуВкл(ИмяРеквизита)
	Добавлено = Ложь;
	Для Инд = 0 По 10 Цикл
		имяКолонки = "Вкл" + Инд;
		Если ДобавитьЕслиКолонкуЕслиЕеНет(ИмяРеквизита, имяКолонки) Тогда
			Возврат имяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ДобавитьЕслиКолонкуЕслиЕеНет(ИмяРеквизита, имяКолонки)
	Если Вычислить(ИмяРеквизита + ".Колонки.Найти(имяКолонки)") = Неопределено Тогда
		Выполнить(ИмяРеквизита + ".Колонки.Добавить(имяКолонки, Новый ОписаниеТипов(""Булево""))");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ДействиеПередНачаломИзменения(Элемент, Отказ)
	Если ОписаниеПоведенияФлажков <> Неопределено И 
		ЭлементыФормы.ТаблицаДокументовОтображаемая.ТекущаяКолонка.Имя = ОписаниеПоведенияФлажков.ИмяКолонки Тогда
	Иначе
		Отказ = Истина;
		ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);
 	КонецЕсли;
КонецПроцедуры

Процедура ДействиеПриПолученииДанных(Элемент, ОформленияСтрок)
	ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокЭД(ОформленияСтрок);
	
	Если ОписаниеПоведенияФлажков <> Неопределено Тогда
		ОформитьСтрокиСФлажками(ОформленияСтрок);
	КонецЕсли;
КонецПроцедуры

Процедура ДействиеОтказ(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

// Флажки

Процедура ОформитьСтрокиСФлажками(ОформленияСтрок)
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если НЕ Вычислить(ОписаниеПоведенияФлажков.ПроверкаВозможности + "(ОформлениеСтроки.ДанныеСтроки)") Тогда
			УстановитьТекстВместоФлажка(ОформлениеСтроки, ОписаниеПоведенияФлажков.ТекстНевозможности);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьТекстВместоФлажка(ОформлениеСтроки, текст)
	ячейка = Вычислить("ОформлениеСтроки.Ячейки." + ОписаниеПоведенияФлажков.ИмяКолонки);
	ячейка.УстановитьТекст(текст);
	ячейка.ОтображатьФлажок = Ложь;
КонецПроцедуры

Процедура ДействиеПриИзмененииФлажка(Элемент, Отказ)
	ОбновитьЗначениеВклВсе();
КонецПроцедуры

Процедура ДействиеВклВсе(Элемент)
	УстановитьФлажкиВсехСтрок(Вычислить(Элемент.Данные));
КонецПроцедуры

Процедура ОбновитьЗначениеВклВсе()
	Выполнить(ОписаниеПоведенияФлажков.ЭлементФормы.Данные + " = " + ?(ПроверитьУстановкуВсехФлажков(), "Истина", "Ложь"));
КонецПроцедуры

Функция ПроверитьУстановкуВсехФлажков()
	тз = Вычислить(ОписаниеПоведенияФлажков.ИмяТаблицыЗначений);
	Для каждого стр Из тз Цикл
		Если Вычислить(ОписаниеПоведенияФлажков.ПроверкаВозможности + "(стр)") Тогда
			Если НЕ Вычислить("стр." + ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ) Тогда
				Выполнить(ОписаниеПоведенияФлажков.ЭлементФормы.Данные + " = Ложь");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции

Функция ПроверитьУстановкуФлажкаСтроки(стр)
	Если Вычислить(ОписаниеПоведенияФлажков.ПроверкаВозможности + "(стр)") 
		И Вычислить("стр." + ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура УстановитьФлажкиВсехСтрок(Значение)
	тз = Вычислить(ОписаниеПоведенияФлажков.ИмяТаблицыЗначений);
	Для каждого стр Из тз Цикл
		Если Вычислить(ОписаниеПоведенияФлажков.ПроверкаВозможности + "(стр)") Тогда
			Выполнить("стр." + ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ + " = " + ?(Значение, "Истина", "Ложь"));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьФлажокДляСтроки(Стр, ЗначениеФлажка)
	Выполнить("стр." + ОписаниеПоведенияФлажков.ИмяКолонкиВТЗ + " = " + ?(ЗначениеФлажка, "Истина", "Ложь"));
КонецПроцедуры

Процедура КоманднаяПанель1ОткрытьДокумент1С(Кнопка)
Если Элементыформы.ТаблицаДокументовОтображаемая.ТекущиеДанные = Неопределено Тогда
		предупреждение("Выберите документ.",, НаименованиеСистемы);
	иначе 
		Если Элементыформы.ТаблицаДокументовОтображаемая.текущиеданные.ПервичныйДокументДляСопоставления = Неопределено   Тогда
			Предупреждение("Нет соответствующего документа в 1С для открытия.",,НаименованиеСистемы);
		Иначе
			Элементыформы.ТаблицаДокументовОтображаемая.текущиеданные.ПервичныйДокументДляСопоставления.получитьформу().Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТаблицаДокументовОтображаемаяПередУдалением(Элемент, Отказ)
	Отказ=	Истина;
КонецПроцедуры

Процедура ТаблицаДокументовОтображаемаяПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ=	Истина;
КонецПроцедуры

Процедура КоманднаяПанель1Закрыть(Кнопка)
	ЭтаФорма.Закрыть();
КонецПроцедуры

Процедура ПриОткрытии()
		КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
КонецПроцедуры
