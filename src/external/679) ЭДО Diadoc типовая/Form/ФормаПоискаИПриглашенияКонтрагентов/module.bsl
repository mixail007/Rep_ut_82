
//{ КЭШ ФОРМЫ

	Перем КэшФормы;

	Функция КэшФормы()
		
		Если КэшФормы = Неопределено Тогда
			КэшФормы= Новый Структура;
		КонецЕсли;
		
		Возврат КэшФормы;	
		
	КонецФункции

	Функция КэшФормы_Удалить(Ключ)
		
		КэшФормы().Удалить(Ключ);
		
	КонецФункции
	
	Функция КэшФормы_Получить(Ключ, ПараметрыКонструктора= Неопределено)
		
		Если НЕ КэшФормы().Свойство(Ключ) Тогда
			
			КэшФормы().Вставить(Ключ, КэшФормы_Создать(Ключ, ПараметрыКонструктора));
			
		КонецЕсли;
		
		Возврат КэшФормы()[Ключ];
		
	КонецФункции
	
	Функция КэшФормы_Создать(Ключ, ПараметрыКонструктора)
		
		Если 	  Ключ = "ЭлементыФормы_Доступность" Тогда
			
			Возврат Новый_ЭлементыФормы_Доступность(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "Статусы_Представление" Тогда
			
			Возврат Новый_Статусы_Представление(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "Статусы_МожноОтправитьПриглашение" Тогда
			
			Возврат Новый_Статусы_МожноОтправитьПриглашение(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "КлючиСортировкиПоУмолчанию" Тогда
			
			Возврат Новый_КлючиСортировкиПоУмолчанию(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "ОчередьЗадач" Тогда
			
			Возврат Новый_ОчередьЗадач(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "ОрганизацииДиадока" Тогда
			
			Возврат Новый_ОрганизацииДиадока(ПараметрыКонструктора);
			
		ИначеЕсли Ключ = "СхемаОтбора" Тогда
			
			Возврат Новый_СхемаОтбора(ПараметрыКонструктора);
			
		КонецЕсли;
		
	КонецФункции
	
	
	Функция Новый_ЭлементыФормы_Доступность(ПараметрыКонструктора)
		
		Результат= Новый Соответствие;
		
		Для Каждого ЭлементФормы ИЗ ЭлементыФормы Цикл
			Если ЭлементФормы.Имя <> "НадписьСостояния" Тогда
				Результат.Вставить(ЭлементФормы, ЭлементФормы.Доступность);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	Функция Новый_Статусы_Представление(ПараметрыКонструктора)
		
		Результат= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").КэшФормы_Получить("ПредставлениеСтатусовВзаимоотношений");
		
		Результат.Вставить("НекорректныйИНН"			 , "Некорректный ИНН");
		Результат.Вставить("ОжидаетсяОтветБольше6Месяцев", "Ожидается ответ (больше 6 месяцев)");
		Результат.Вставить("ИностраннаяОрганизация"		 , "Иностранная организация");
		
		Возврат Результат;
		
	КонецФункции

	Функция Новый_Статусы_МожноОтправитьПриглашение(ПараметрыКонструктора)
		
		Результат= Новый Соответствие;
		
		Результат.Вставить("IsActive"			 		 , Истина);
		Результат.Вставить("NotInCounteragentList"		 , Истина);
		Результат.Вставить("RejectsMe"			 		 , Истина);
		Результат.Вставить("IsRejectedByMe"				 , Истина);
		Результат.Вставить("InvitesMe"				 	 , Истина);
		Результат.Вставить("IsInvitedByMe"				 , Ложь);
		Результат.Вставить("ОжидаетсяОтветБольше6Месяцев", Истина);
		
		Возврат Результат;
		
	КонецФункции

	Функция Новый_КлючиСортировкиПоУмолчанию(ПараметрыКонструктора)
		
		Результат= Новый Соответствие;
		
		Результат.Вставить("IsActive"					 , 1);
		Результат.Вставить("NotInCounteragentList"	   	 , 2);
		Результат.Вставить("RejectsMe"				   	 , 3);
		Результат.Вставить("IsRejectedByMe"			   	 , 4);
		Результат.Вставить("InvitesMe"				   	 , 5);
		Результат.Вставить("ОжидаетсяОтветБольше6Месяцев", 6);
		Результат.Вставить("IsInvitedByMe"			   	 , 7);
		Результат.Вставить("IsMyCounteragent"	  		 , 8);
		Результат.Вставить("НекорректныйИНН"			 , 9);
		Результат.Вставить("ИностраннаяОрганизация"	   	 , 10);
		
		Возврат Результат;
		
	КонецФункции

	Функция Новый_ОчередьЗадач(ПараметрыКонструктора)
		
		Результат= Новый Структура;
		
		Результат.Вставить("МаксимальныйУровеньПараллелизации", 10);
		Результат.Вставить("ТекущийУровеньПараллелизации"	  , 0);
		
		Результат.Вставить("Задачи", Новый Структура);
		Результат.Задачи.Вставить("НачатьВызов"	  , Новый Массив);
		Результат.Задачи.Вставить("ЗавершитьВызов", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

	Функция Новый_ОрганизацииДиадока(ПараметрыКонструктора)
		
		Результат= Новый Соответствие;
		
		НайденныеСтроки= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации().НайтиСтроки(Новый Структура("КПППодразделения", ""));
		
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
			Результат.Вставить(НайденнаяСтрока.Значение, НайденнаяСтрока.Представление);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция Новый_СхемаОтбора(ПараметрыКонструктора)
		
		СхемаОтбора= ПолучитьМакет("СКД_Отбор_СписокПриглашенийКонтрагентам");
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("Статус").УстановитьДоступныеЗначения(Отбор_СписокВыбора_Статус());
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("ОрганизацияЭДО_ID").УстановитьДоступныеЗначения(Отбор_СписокВыбора_ОрганизацияЭДО());
		
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("ОрганизацияЭДО_ID").Заголовок= "Организация в " + НаименованиеСистемы;
		
		КонтрагентЭДО_ПредставлениеЗаголовок= "Контрагент в " + НаименованиеСистемы;
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("КонтрагентЭДО_Представление").Заголовок= 						  КонтрагентЭДО_ПредставлениеЗаголовок;
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("КонтрагентЭДО_Представление.КонтрагентЭДО_Роуминговый").Заголовок= КонтрагентЭДО_ПредставлениеЗаголовок + ".Роуминговый";
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("КонтрагентЭДО_Представление.КонтрагентЭДО_Тестовый").Заголовок= 	  КонтрагентЭДО_ПредставлениеЗаголовок + ".Тестовый";
		СхемаОтбора.НаборыДанных.ТаблицаДанных.Поля.Найти("КонтрагентЭДО_Представление.КонтрагентЭДО_ID").Заголовок= 		  КонтрагентЭДО_ПредставлениеЗаголовок + ".ID";
		
		Возврат СхемаОтбора;
		
	КонецФункции
	
//} КЭШ ФОРМЫ


//{ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ

	Процедура ПриОткрытии()
		
		ЗафиксироватьСобытиеGA("ФормаПоискаИПриглашенияКонтрагента");
		
		УправлениеФормой();
		
		ПриглашенияДатаНапоминания_УстановитьСледующуюДату();
		
		Отбор_Инициализировать();
		
		СписокПриглашенийКонтрагентам_Заполнить();
		
	КонецПроцедуры

	Процедура ПриЗакрытии()
		
		СписокПриглашенийКонтрагентам.Очистить();
		
	КонецПроцедуры


	Процедура СписокПриглашенийКонтрагентам_ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
		ОформлениеСтроки.Ячейки.ГруппаКонтрагент1С.Видимость= Ложь;
		
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр= НЕ ДанныеСтроки.МожноОтправитьПриглашение;
		
		Если ДанныеСтроки.Статус = "НекорректныйИНН" Тогда
			
			ОформлениеСтроки.ЦветТекста=							 WEBЦвета.Серый;
			ОформлениеСтроки.Ячейки.ПредставлениеСтатуса.ЦветТекста= WEBЦвета.Красный;
			ОформлениеСтроки.Ячейки.Контрагент1С_ИНН.ЦветТекста=	 WEBЦвета.Красный;
			
		ИначеЕсли ДанныеСтроки.Статус = "ИностраннаяОрганизация" Тогда
			
			ОформлениеСтроки.ЦветТекста= WEBЦвета.Серый;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ТекстОшибки) Тогда
			ОформлениеСтроки.Ячейки.Пометка.Картинка= ЭДО_БиблиотекаКартинок().ВниманиеОшибка;
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьКартинку= Истина;
		КонецЕсли;
		
		Если ДанныеСтроки.КонтрагентЭДО_Тестовый Тогда
			ОформлениеСтроки.Ячейки.КонтрагентЭДО_Представление.ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_ПриАктивизацииСтроки(Элемент)
		
		ПанельТекстОшибки_Показать();
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_ПередНачаломДобавления(Элемент, Отказ, Копирование)
		
		Отказ= Истина;
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_ПередУдалением(Элемент, Отказ)
		
		Отказ= Истина;
		
		Для Каждого СтрокаТЧ ИЗ Элемент.ВыделенныеСтроки Цикл
			
			СтрокаТЧ.Видимость= Ложь;
			СтрокаТЧ.Пометка= 	Ложь;
			
		КонецЦикла;
		
		СписокПриглашенийКонтрагентам_ОтборСтрок_УстановитьВидимость();
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_ПриИзмененииФлажка(Элемент, Колонка)
		
		Если Колонка.Имя = "Пометка" Тогда
			
			Если Элемент.ТекущиеДанные.Пометка Тогда
				СписокПриглашенийКонтрагентам_ЗаполнитьПометку("МожноОтправитьПриглашение", Элемент.ВыделенныеСтроки);
			Иначе
				СписокПриглашенийКонтрагентам_ЗаполнитьПометку(Ложь, Элемент.ВыделенныеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
		
		Если Колонка.Имя = "Контрагент1С" Тогда
			
			ВыбраннаяСтрока.Контрагент1С.ПолучитьФорму().Открыть();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	
	Процедура КоманднаяПанель_КнопкаВключитьВсе_Нажатие(Кнопка)
		
		СписокПриглашенийКонтрагентам_ЗаполнитьПометку("МожноОтправитьПриглашение");
		
	КонецПроцедуры
	
	Процедура КоманднаяПанель_КнопкаВыключитьВсе_Нажатие(Кнопка)
		
		СписокПриглашенийКонтрагентам_ЗаполнитьПометку(Ложь);
		
	КонецПроцедуры
	
	Процедура КоманднаяПанель_КнопкаПрименитьОтбор_Нажатие(Кнопка)
		
		СписокПриглашенийКонтрагентам_ЗаполнитьПометку(Ложь);
		
		Отбор_Применить();
		
	КонецПроцедуры
	
	Процедура КоманднаяПанель_КнопкаОтправитьПриглашения_Нажатие(Кнопка)
		
		ПриглашенияКонтрагентам= Новый Соответствие;
		
		НайденныеСтроки= СписокПриглашенийКонтрагентам.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Для Каждого СтрокаТЧ ИЗ НайденныеСтроки Цикл
			
			СтруктураПриглашения= ПриглашенияКонтрагентам[СтрокаТЧ.ОрганизацияЭДО_ID];
			
			Если СтруктураПриглашения = Неопределено Тогда
				
				СтруктураПриглашения= Новый Структура;
				СтруктураПриглашения.Вставить("КоличествоПриглашений"		, 0);
				СтруктураПриглашения.Вставить("ТекстПриглашения"	 		, "");
				СтруктураПриглашения.Вставить("ИмяФайла"			 		, "");
				СтруктураПриглашения.Вставить("ОтправитьПриглашение" 		, Ложь);
				СтруктураПриглашения.Вставить("ОрганизацияЭДО_Представление", СтрокаТЧ.ОрганизацияЭДО_Представление);
				
				ПриглашенияКонтрагентам.Вставить(СтрокаТЧ.ОрганизацияЭДО_ID, СтруктураПриглашения);
				
			КонецЕсли;
			
			СтруктураПриглашения.КоличествоПриглашений= СтруктураПриглашения.КоличествоПриглашений + 1;
			
		КонецЦикла;
		
		
		Для Каждого КлючИЗначение ИЗ ПриглашенияКонтрагентам Цикл
			
			СтруктураПриглашения= КлючИЗначение.Значение;
			
			Если СтруктураПриглашения.КоличествоПриглашений > 0 Тогда
				
				ФормаПриглашения= ПолучитьФорму("ФормаРедактированияПриглашения", ЭтаФорма);
				
				ФормаПриглашения.КоличествоПриглашений= 	   СтруктураПриглашения.КоличествоПриглашений;
				ФормаПриглашения.ОрганизацияЭДО_ID= 		   КлючИЗначение.Ключ;
				ФормаПриглашения.ОрганизацияЭДО_Представление= СтруктураПриглашения.ОрганизацияЭДО_Представление;
				
				ПараметрыПриглашения= ФормаПриглашения.ОткрытьМодально();
				
				Если ПараметрыПриглашения <> Неопределено Тогда
					СтруктураПриглашения.ОтправитьПриглашение= Истина;
					СтруктураПриглашения.ТекстПриглашения= ПараметрыПриглашения.ТекстПриглашения;
					СтруктураПриглашения.ИмяФайла= 		   ПараметрыПриглашения.ИмяФайла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПриглашенияКонтрагентам.Количество() > 0 Тогда
			ОтправитьПриглашенияКонтрагентам(ПриглашенияКонтрагентам);
		КонецЕсли;
		
	КонецПроцедуры

	
	Процедура НадписьТекстОшибки_Нажатие(Элемент)
		
		Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку("Ошибка приглашения контрагента", Элемент.Заголовок);
		
	КонецПроцедуры

//} ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ


//{ ОТБОР В СПИСКЕ

	Процедура Отбор_Инициализировать()
		
		СхемаОтбора= КэшФормы_Получить("СхемаОтбора");
		
		КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаОтбора.НастройкиПоУмолчанию);
		
	КонецПроцедуры

	Процедура Отбор_Применить(СкрытьВсе= Ложь)
		
		Для Каждого СтрокаТЧ ИЗ СписокПриглашенийКонтрагентам Цикл
			СтрокаТЧ.Видимость= Ложь;
		КонецЦикла;
		
		Если НЕ СкрытьВсе Тогда
			
			РезультатОтбора= Отбор_РезультатОтбора();
			
			Для Каждого Стр Из РезультатОтбора Цикл
				СписокПриглашенийКонтрагентам[Стр.НомерСтроки-1].Видимость = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		СписокПриглашенийКонтрагентам_ОтборСтрок_УстановитьВидимость();
		
	КонецПроцедуры
	
	Функция   Отбор_РезультатОтбора()

		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Макет = КомпоновщикМакета.Выполнить(КэшФормы_Получить("СхемаОтбора"), КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(Макет, Новый Структура("ТаблицаДанных", СписокПриглашенийКонтрагентам));
		ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		РезультатОтбора= Новый ТаблицаЗначений;
		
		ПроцессорВывода.УстановитьОбъект(РезультатОтбора);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		Возврат РезультатОтбора;
		
	КонецФункции
	
	Функция   Отбор_СписокВыбора_Статус()
		
		Результат= Новый СписокЗначений;
		
		Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("Статусы_Представление") Цикл
			Результат.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение); 
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция   Отбор_СписокВыбора_ОрганизацияЭДО()
		
		Результат= Новый СписокЗначений;
		
		Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("ОрганизацииДиадока") Цикл
			Результат.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
//} ОТБОР В СПИСКЕ


//{ ЗАПОЛНЕНИЕ СПИСКА ПРИГЛАШЕНИЙ КОНТРАГЕНТАМ

	Процедура СписокПриглашенийКонтрагентам_Заполнить()
		
		СписокПриглашенийКонтрагентам.Очистить();
		
		СписокПриглашенийКонтрагентам_ЗаполнитьДанными1С();
		
		СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока();
		
	КонецПроцедуры


	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДанными1С()

		НадписьСостояния_Показать("Сбор данных из 1С...");
		
		Массив_ОрганизацияЭДО_ID= Новый Массив;
		Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("ОрганизацииДиадока") Цикл
			Массив_ОрганизацияЭДО_ID.Добавить(КлючИЗначение.Ключ);  
		КонецЦикла;
		
		ТаблицаКонтрагентовДляПриглашения= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ТаблицаКонтрагентовДляПриглашения(Массив_ОрганизацияЭДО_ID, ДобавитьМесяц(ТекущаяДата(), -3));
		
		ОрганизацииДиадока= КэшФормы_Получить("ОрганизацииДиадока");
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаКонтрагентовДляПриглашения Цикл
			
			НоваяСтрока= СписокПриглашенийКонтрагентам.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.Контрагент1С_ИНН= СокрЛП(НоваяСтрока.Контрагент1С_ИНН);
			НоваяСтрока.Контрагент1С_КПП= СокрЛП(НоваяСтрока.Контрагент1С_КПП);
			
			Если Лев(НоваяСтрока.Контрагент1С_ИНН, 2) = "99" Тогда
				НоваяСтрока.Статус= "ИностраннаяОрганизация";
			ИначеЕсли НЕ КорректныйИНН(НоваяСтрока.Контрагент1С_ИНН) Тогда
				НоваяСтрока.Статус= "НекорректныйИНН";
			Иначе
				НоваяСтрока.Статус= "NotInCounteragentList"; // Статус по умолчанию
			КонецЕсли;
			
			НоваяСтрока.ОрганизацияЭДО_Представление= ОрганизацииДиадока[НоваяСтрока.ОрганизацияЭДО_ID];
			
		КонецЦикла;
		
		НадписьСостояния_Показать();
		
		Отбор_Применить(Истина);
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьПометку(Пометка, КоллекцияСтрок= Неопределено)
		
		Если КоллекцияСтрок = Неопределено Тогда
			КоллекцияСтрок= СписокПриглашенийКонтрагентам;
		КонецЕсли;
		
		Если ТипЗнч(Пометка) = Тип("Булево") Тогда
			
			Для Каждого Стр ИЗ КоллекцияСтрок Цикл
				Если Стр.Видимость Тогда
					Стр.Пометка= Пометка;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для Каждого Стр ИЗ КоллекцияСтрок Цикл
				Если Стр.Видимость Тогда
					Стр.Пометка= Стр[Пометка];
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_Заполнить_ПредставлениеСтатуса_МожноОтправитьПриглашение_ПометкаПоУмолчанию_СортировкаПоУмолчанию()
		
		Для Каждого СтрокаТаблицы ИЗ СписокПриглашенийКонтрагентам Цикл
			
			СписокПриглашенийКонтрагентам_ЗаполнитьСтрокуТаблицы(СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьСтрокуТаблицы(СтрокаТаблицы)
		
		СтрокаТаблицы.ПредставлениеСтатуса		= КэшФормы_Получить("Статусы_Представление")[СтрокаТаблицы.Статус];
		СтрокаТаблицы.МожноОтправитьПриглашение	= НЕ СтрокаТаблицы.КонтрагентЭДО_Роуминговый И КэшФормы_Получить("Статусы_МожноОтправитьПриглашение")[СтрокаТаблицы.Статус] = Истина;
		СтрокаТаблицы.ПометкаПоУмолчанию		= СтрокаТаблицы.МожноОтправитьПриглашение И СтрокаТаблицы.КоличествоДокументов > 0 И СтрокаТаблицы.Статус <> "IsInvitedByMe";
		СтрокаТаблицы.СортировкаПоУмолчанию		= ?(СтрокаТаблицы.ПометкаПоУмолчанию, 0, КэшФормы_Получить("КлючиСортировкиПоУмолчанию")[СтрокаТаблицы.Статус]);
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_МассивСтрок_УстановитьТекстОшибки(МассивСтрок, ТекстОшибки)
		
		Для Каждого Стр ИЗ МассивСтрок Цикл
			Стр.ТекстОшибки= ТекстОшибки;
		КонецЦикла;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ОтборСтрок_УстановитьВидимость()
		
		ЭлементыФормы.СписокПриглашенийКонтрагентам.ОтборСтрок.Видимость.Установить(Ложь, Ложь);
		ЭлементыФормы.СписокПриглашенийКонтрагентам.ОтборСтрок.Видимость.Установить(Истина);
		
	КонецПроцедуры
	

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока()
		
		КэшФормы_Удалить("ОчередьЗадач");
		
		КэшФормы_Получить("ОчередьЗадач").Вставить("ОбработчикЗавершения", Обработчик_Описание("СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьЗаполнение", Неопределено));
		КэшФормы_Получить("ОчередьЗадач").Вставить("НадписьСостояния", "Получение данных с сервера "+КраткоеНаименованиеСистемы+"...");
		
		СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_ЗаполнитьОчередьЗадач();
		
		ОчередьЗадач_ВыполнитьЗадачи();
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_ЗаполнитьОчередьЗадач()
		
		МаксимальныйРазмерПорции= 100;
		
		ПорцииЗадач= Новый Соответствие;
		
		Для Каждого СтрокаТаблицы ИЗ СписокПриглашенийКонтрагентам Цикл
			
			Если СтрокаТаблицы.Статус = "НекорректныйИНН" ИЛИ СтрокаТаблицы.Статус = "ИностраннаяОрганизация" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяПорция= ПорцииЗадач[СтрокаТаблицы.ОрганизацияЭДО_ID];
			
			Если ТекущаяПорция = Неопределено Тогда
				
				ТекущаяПорция= Новый Структура;
				ТекущаяПорция.Вставить("ОбработанныеИНН", Новый Соответствие);
				ТекущаяПорция.Вставить("МассивИНН"		, Новый Массив);
				ТекущаяПорция.Вставить("РазмерПорции"	, 0);
				
				ПорцииЗадач.Вставить(СтрокаТаблицы.ОрганизацияЭДО_ID, ТекущаяПорция);
				
			КонецЕсли;
			
			Если ТекущаяПорция.ОбработанныеИНН[СтрокаТаблицы.Контрагент1С_ИНН] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяПорция.МассивИНН.Добавить(СтрокаТаблицы.Контрагент1С_ИНН);
			ТекущаяПорция.РазмерПорции= ТекущаяПорция.РазмерПорции + 1;
			ТекущаяПорция.ОбработанныеИНН.Вставить(СтрокаТаблицы.Контрагент1С_ИНН, Истина);
			
			Если ТекущаяПорция.РазмерПорции = МаксимальныйРазмерПорции Тогда
				СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_ЗаполнитьОчередьЗадач_ДобавитьПорциюВОчередь(СтрокаТаблицы.ОрганизацияЭДО_ID, ТекущаяПорция);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ ПорцииЗадач Цикл
			
			ОрганизацияЭДО_ID= КлючИЗначение.Ключ;
			ТекущаяПорция= 	   КлючИЗначение.Значение;
			
			Если ТекущаяПорция.РазмерПорции > 0 Тогда
				СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_ЗаполнитьОчередьЗадач_ДобавитьПорциюВОчередь(ОрганизацияЭДО_ID, ТекущаяПорция);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_ЗаполнитьОчередьЗадач_ДобавитьПорциюВОчередь(ОрганизацияЭДО_ID, ТекущаяПорция)
		
		ОчередьЗадач_ДобавитьЗадачу_НачатьВызов(Обработчик_Описание("СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_НачатьВызов",
																	 Новый Структура("ОрганизацияЭДО_ID, МассивИНН", ОрганизацияЭДО_ID, ТекущаяПорция.МассивИНН)));
		
		ТекущаяПорция.Вставить("МассивИНН", Новый Массив);
		ТекущаяПорция.РазмерПорции= 0;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_НачатьВызов(ПараметрыОбработчика)
		
		РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СписокКонтрагентовПоСпискуИНН_НачатьВызов(ПараметрыОбработчика.ОрганизацияЭДО_ID, ПараметрыОбработчика.МассивИНН);
		
		Если РезультатВыполнения.Отказ Тогда
			
			СообщенияПользователям_ПоказатьСообщениеОбОшибке("Ошибка получения данных сервера " + КраткоеНаименованиеСистемы, РезультатВыполнения.ОписаниеОшибки);
			
			ПараметрыОбработчика.Вставить("Отказ");
		
		Иначе
			
			ОчередьЗадач_ДобавитьЗадачу_ЗавершитьВызов(Обработчик_Описание("СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьВызов",
																				   Новый Структура("AsyncResult, ОрганизацияЭДО_ID", РезультатВыполнения.AsyncResult, ПараметрыОбработчика.ОрганизацияЭДО_ID)));
			
			ПараметрыОбработчика.Вставить("ОбработчикВыполнен");
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьВызов(ПараметрыОбработчика)
		
		РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").СписокКонтрагентовПоСпискуИНН_ЗавершитьВызов(ПараметрыОбработчика.AsyncResult, "Name, ID, INN, KPP, FnsParticipantId, IsActive, CurrentStatus, LastEventTimestampTicks, IsTest, IsPilot, IsRoaming");
		
		Если РезультатВыполнения.Отказ Тогда
			
			СообщенияПользователям_ПоказатьСообщениеОбОшибке("Ошибка получения данных сервера " + КраткоеНаименованиеСистемы, РезультатВыполнения.ОписаниеОшибки);
			
			ПараметрыОбработчика.Вставить("Отказ");
		
		Иначе
			
			Если РезультатВыполнения.Свойство("Результат") Тогда
				
				Дата6МесяцевНазад= ДобавитьМесяц(ТекущаяДата(), -6);
				
				// Поиск сопоставленных контрагентов
				СтруктураОтбора= Новый Структура("ОрганизацияЭДО_ID, КонтрагентЭДО_ID");
				СтруктураОтбора.ОрганизацияЭДО_ID= ПараметрыОбработчика.ОрганизацияЭДО_ID;
				Для Каждого КонтрагентЭДО ИЗ РезультатВыполнения.Результат Цикл
					
					СтруктураОтбора.КонтрагентЭДО_ID= КонтрагентЭДО.ID;
					
					СтрокиТЧ= СписокПриглашенийКонтрагентам.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаТЧ ИЗ СтрокиТЧ Цикл
						
						Если СтрокаТЧ.Контрагент1С_ИНН = КонтрагентЭДО.INN Тогда
							СписокПриглашенийКонтрагентам_СтрокаТаблицы_ЗаполнитьДаннымиДиадока(СтрокаТЧ, КонтрагентЭДО, Дата6МесяцевНазад);
						Иначе
							СтрокаТЧ.Статус= "НекорректныйИНН";
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				// Поиск новых контрагентов по ИНН и КПП
				СтруктураОтбора= Новый Структура("ОрганизацияЭДО_ID, КонтрагентЭДО_ID, Контрагент1С_ИНН, Контрагент1С_КПП");
				СтруктураОтбора.ОрганизацияЭДО_ID= ПараметрыОбработчика.ОрганизацияЭДО_ID;
				СтруктураОтбора.КонтрагентЭДО_ID=  "";
				Для Каждого КонтрагентЭДО ИЗ РезультатВыполнения.Результат Цикл
					
					СтруктураОтбора.Контрагент1С_ИНН= КонтрагентЭДО.INN;
					СтруктураОтбора.Контрагент1С_КПП= КонтрагентЭДО.KPP;
					
					СтрокиТЧ= СписокПриглашенийКонтрагентам.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаТЧ ИЗ СтрокиТЧ Цикл
						
						Если ЗначениеЗаполнено(СтрокаТЧ.КонтрагентЭДО_ID) Тогда
							НоваяСтрока= СписокПриглашенийКонтрагентам.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ,,"КонтрагентЭДО_Представление, КонтрагентЭДО_ID, КонтрагентЭДО_Роуминговый, КонтрагентЭДО_Тестовый, Статус");
							СписокПриглашенийКонтрагентам_СтрокаТаблицы_ЗаполнитьДаннымиДиадока(НоваяСтрока, КонтрагентЭДО, Дата6МесяцевНазад);
						Иначе
							СписокПриглашенийКонтрагентам_СтрокаТаблицы_ЗаполнитьДаннымиДиадока(СтрокаТЧ, КонтрагентЭДО, Дата6МесяцевНазад);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				// Поиск новых контрагентов только по ИНН (TO-DO: обходить только головные организации, будет возможно после проброса во внешней компоненте поля IsBranch структуры Organization)
				СтруктураОтбора= Новый Структура("ОрганизацияЭДО_ID, КонтрагентЭДО_ID, Контрагент1С_ИНН");
				СтруктураОтбора.ОрганизацияЭДО_ID= ПараметрыОбработчика.ОрганизацияЭДО_ID;
				СтруктураОтбора.КонтрагентЭДО_ID=  "";
				Для Каждого КонтрагентЭДО ИЗ РезультатВыполнения.Результат Цикл
					
					СтруктураОтбора.Контрагент1С_ИНН= КонтрагентЭДО.INN;
					
					СтрокиТЧ= СписокПриглашенийКонтрагентам.НайтиСтроки(СтруктураОтбора);
					Для Каждого СтрокаТЧ ИЗ СтрокиТЧ Цикл
						СписокПриглашенийКонтрагентам_СтрокаТаблицы_ЗаполнитьДаннымиДиадока(СтрокаТЧ, КонтрагентЭДО, Дата6МесяцевНазад);
					КонецЦикла;
					
				КонецЦикла;
				
				ПараметрыОбработчика.Вставить("ОбработчикВыполнен");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьЗаполнение(ПараметрыОбработчика)
		
		СписокПриглашенийКонтрагентам_Заполнить_ПредставлениеСтатуса_МожноОтправитьПриглашение_ПометкаПоУмолчанию_СортировкаПоУмолчанию();
		
		СписокПриглашенийКонтрагентам.Сортировать("СортировкаПоУмолчанию, Контрагент1С");
		
		Отбор_Применить();
		
		СписокПриглашенийКонтрагентам_ЗаполнитьПометку("ПометкаПоУмолчанию");
		
	КонецПроцедуры

	Процедура СписокПриглашенийКонтрагентам_СтрокаТаблицы_ЗаполнитьДаннымиДиадока(СтрокаТаблицы, КонтрагентЭДО, Дата6МесяцевНазад)
		
		СтрокаТаблицы.КонтрагентЭДО_ID				 = КонтрагентЭДО.ID;
		СтрокаТаблицы.КонтрагентЭДО_FnsParticipantId = КонтрагентЭДО.FnsParticipantId;
		СтрокаТаблицы.КонтрагентЭДО_Роуминговый		 = КонтрагентЭДО.IsRoaming;
		СтрокаТаблицы.КонтрагентЭДО_Тестовый		 = КонтрагентЭДО.IsTest ИЛИ КонтрагентЭДО.IsPilot;
		
		Разделитель= "";
		ТекстДополнения= "";
		Если СтрокаТаблицы.КонтрагентЭДО_Тестовый Тогда
			ТекстДополнения= "тестовый";
			Разделитель= ", ";
		КонецЕсли;
		Если СтрокаТаблицы.КонтрагентЭДО_Роуминговый Тогда
			ТекстДополнения= ТекстДополнения + Разделитель + "роуминговый";
		КонецЕсли;
		СтрокаТаблицы.КонтрагентЭДО_Представление= КонтрагентЭДО.Name + ?(ЗначениеЗаполнено(ТекстДополнения), " (" + ТекстДополнения + ")", "");
				
		Если КонтрагентЭДО.IsActive И (КонтрагентЭДО.CurrentStatus = "NotInCounteragentList" ИЛИ ПустаяСтрока(КонтрагентЭДО.CurrentStatus)) Тогда
			СтрокаТаблицы.Статус= "IsActive";
		Иначе
			СтрокаТаблицы.Статус= КонтрагентЭДО.CurrentStatus;
		КонецЕсли;
		
		Если СтрокаТаблицы.Статус = "IsInvitedByMe" И КонтрагентЭДО.LastEventTimestampTicks < Дата6МесяцевНазад Тогда
			СтрокаТаблицы.Статус= "ОжидаетсяОтветБольше6Месяцев";
		КонецЕсли;
		
	КонецПроцедуры
	
//} ЗАПОЛНЕНИЕ СПИСКА ПРИГЛАШЕНИЙ КОНТРАГЕНТАМ


//{ ОТПРАВКА ПРИГЛАШЕНИЙ КОНТРАГЕНТАМ

	Процедура ОтправитьПриглашенияКонтрагентам(ПриглашенияКонтрагентам)
		
		КэшФормы_Удалить("ОчередьЗадач");
		
		КэшФормы_Получить("ОчередьЗадач").Вставить("ОбработчикЗавершения", Обработчик_Описание("ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьОтправку", Неопределено));
		КэшФормы_Получить("ОчередьЗадач").Вставить("НадписьСостояния", "Отправка приглашений...");
		
		ОтправитьПриглашенияКонтрагентам_ЗаполнитьОчередьЗадач(ПриглашенияКонтрагентам);
		
		ОчередьЗадач_ВыполнитьЗадачи();
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_СопоставитьКонтрагентов()
		
		СопоставленныеКонтрагенты= Новый Соответствие;
		
		Для Каждого СтрокаТаблицы ИЗ СписокПриглашенийКонтрагентам Цикл
			
			Если НЕ СтрокаТаблицы.Сопоставлен И ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентЭДО_ID) Тогда
				
				Если СопоставленныеКонтрагенты[СтрокаТаблицы.Контрагент1С] = Неопределено Тогда
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_CounteragentBoxID_для_Контрагент(СтрокаТаблицы.Контрагент1С, СтрокаТаблицы.КонтрагентЭДО_ID);
					ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(СтрокаТаблицы.Контрагент1С, "ДиадокИдентификаторЭДО", СтрокаТаблицы.КонтрагентЭДО_FnsParticipantId);
					СопоставленныеКонтрагенты.Вставить(СтрокаТаблицы.Контрагент1С, Истина);
				КонецЕсли;
				
				СтрокаТаблицы.Сопоставлен= Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_ОтменитьСтароеПриглашение(ОрганизацияЭДО_ID, КонтрагентЭДО_ID)
		
		РезультатВыплонения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").РазорватьОтношениеПартнерства(ОрганизацияЭДО_ID, КонтрагентЭДО_ID, "Приглашение устарело");
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_ЗаполнитьОчередьЗадач(ПриглашенияКонтрагентам)
		
		Для Каждого КлючИЗначение ИЗ ПриглашенияКонтрагентам Цикл
			
			ОрганизацияЭДО_ID=	  КлючИЗначение.Ключ;
			СтруктураПриглашения= КлючИЗначение.Значение;
			
			Если СтруктураПриглашения.ОтправитьПриглашение Тогда
				
				ДобавленныеСтроки= Новый Соответствие; // коллекция массивов строк с одинаковым ящиком
				
				НайденныеСтроки= СписокПриглашенийКонтрагентам.НайтиСтроки(Новый Структура("ОрганизацияЭДО_ID, Пометка", ОрганизацияЭДО_ID, Истина));
				
				Для Каждого Стр ИЗ НайденныеСтроки Цикл
					
					// В списке приглашений ящик контрагента может дублироватся,
					// поэтому в параметры обработчика добавляем массив строк, а не строку.
					МассивСтрок= ДобавленныеСтроки[Стр.КонтрагентЭДО_ID];
					
					Если МассивСтрок = Неопределено Тогда // это первая строка, а значит задача на отправку приглашения в этот ящик еще не добавлена.
						
						МассивСтрок= Новый Массив;
						МассивСтрок.Добавить(Стр);
						
						ДобавленныеСтроки.Вставить(Стр.КонтрагентЭДО_ID, МассивСтрок);
						
						ОчередьЗадач_ДобавитьЗадачу_НачатьВызов(Обработчик_Описание("ОтправитьПриглашенияКонтрагентам_Обработчик_НачатьВызов",
																Новый Структура("МассивСтрок, СтруктураПриглашения", МассивСтрок, СтруктураПриглашения)));
						
					Иначе
						МассивСтрок.Добавить(Стр);
						Продолжить;
					КонецЕсли;
					
					
				КонецЦикла;
				
				ДобавленныеСтроки= Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_Обработчик_НачатьВызов(ПараметрыОбработчика)
		
		Стр= ПараметрыОбработчика.МассивСтрок[0];
		
		Если Стр.Статус = "ОжидаетсяОтветБольше6Месяцев" Тогда
			ОтправитьПриглашенияКонтрагентам_ОтменитьСтароеПриглашение(Стр.ОрганизацияЭДО_ID, Стр.КонтрагентЭДО_ID);
		КонецЕсли;
		
		РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПриглашениеКонтрагенту_НачатьВызов(Стр.ОрганизацияЭДО_ID,
							 Стр.КонтрагентЭДО_ID, Стр.Контрагент1С_ИНН, ПараметрыОбработчика.СтруктураПриглашения.ТекстПриглашения, ПараметрыОбработчика.СтруктураПриглашения.ИмяФайла);
							 
		Если РезультатВыполнения.Отказ Тогда
			СписокПриглашенийКонтрагентам_МассивСтрок_УстановитьТекстОшибки(ПараметрыОбработчика.МассивСтрок, РезультатВыполнения.ОписаниеОшибки);
		Иначе
			ОчередьЗадач_ДобавитьЗадачу_ЗавершитьВызов(Обработчик_Описание("ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьВызов",
																   Новый Структура("AsyncResult, МассивСтрок", РезультатВыполнения.AsyncResult, ПараметрыОбработчика.МассивСтрок)));
		КонецЕсли;
		
		ПараметрыОбработчика.Вставить("ОбработчикВыполнен");
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьВызов(ПараметрыОбработчика)
		
		РезультатВыполнения= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").ПриглашениеКонтрагенту_ЗавершитьВызов(ПараметрыОбработчика.AsyncResult);
		
		Если РезультатВыполнения.Отказ Тогда
			
			СписокПриглашенийКонтрагентам_МассивСтрок_УстановитьТекстОшибки(ПараметрыОбработчика.МассивСтрок, РезультатВыполнения.ОписаниеОшибки);
			
			ПараметрыОбработчика.Вставить("ОбработчикВыполнен");
			
		ИначеЕсли РезультатВыполнения.Свойство("Результат") Тогда
			
			Для Каждого Стр ИЗ ПараметрыОбработчика.МассивСтрок Цикл
				
				Стр.Пометка= Ложь;
				Стр.Статус=  "IsInvitedByMe";
				
				СписокПриглашенийКонтрагентам_ЗаполнитьСтрокуТаблицы(Стр);
				
			КонецЦикла;
			
			ПараметрыОбработчика.Вставить("ОбработчикВыполнен");
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьОтправку(ПараметрыОбработчика)
		
		ОтправитьПриглашенияКонтрагентам_СопоставитьКонтрагентов();
		
		ПанельТекстОшибки_Показать();
		
	КонецПроцедуры

//} ОТПРАВКА ПРИГЛАШЕНИЙ КОНТРАГЕНТАМ


//{ ОЧЕРЕДЬ ЗАДАЧ В ДИАДОК

	Процедура ОчередьЗадач_ВыполнитьЗадачи()
		
		ОчередьЗадач= КэшФормы_Получить("ОчередьЗадач");
		
		КоличествоЗадач_НачатьВызов= 	ОчередьЗадач.Задачи.НачатьВызов.Количество();
		КоличествоЗадач_ЗавершитьВызов= ОчередьЗадач.Задачи.ЗавершитьВызов.Количество();
		
		Если КоличествоЗадач_НачатьВызов > 0 ИЛИ КоличествоЗадач_ЗавершитьВызов > 0 Тогда
			
			УстановитьДоступностьФормы(Ложь);
			
			Если ОчередьЗадач.Свойство("НадписьСостояния") Тогда
				НадписьСостояния_Показать(ОчередьЗадач.НадписьСостояния);
			КонецЕсли;
			
			Если КоличествоЗадач_НачатьВызов > 0 И ОчередьЗадач.ТекущийУровеньПараллелизации < ОчередьЗадач.МаксимальныйУровеньПараллелизации Тогда
				
				ОчередьЗадач_ВыполнитьЗадачи_НачатьВызов();
				
				КоличествоЗадач_НачатьВызов= 	ОчередьЗадач.Задачи.НачатьВызов.Количество();
				КоличествоЗадач_ЗавершитьВызов= ОчередьЗадач.Задачи.ЗавершитьВызов.Количество();
				
			КонецЕсли;
			
			Если КоличествоЗадач_ЗавершитьВызов > 0 Тогда
				
				ОчередьЗадач_ВыполнитьЗадачи_ЗавершитьВызов();
				
				КоличествоЗадач_НачатьВызов= 	ОчередьЗадач.Задачи.НачатьВызов.Количество();
				КоличествоЗадач_ЗавершитьВызов= ОчередьЗадач.Задачи.ЗавершитьВызов.Количество();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоЗадач_НачатьВызов = 0 И КоличествоЗадач_ЗавершитьВызов = 0 Тогда
			
			Если ОчередьЗадач.Свойство("ОбработчикЗавершения") Тогда
				Обработчик_Выполнить(ОчередьЗадач.ОбработчикЗавершения);
				ОчередьЗадач.Удалить("ОбработчикЗавершения");
			КонецЕсли;
			
			УстановитьДоступностьФормы(Истина);
			
			НадписьСостояния_Показать();
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ОчередьЗадач_ВыполнитьЗадачи_НачатьВызов()
		
		ОчередьЗадач= КэшФормы_Получить("ОчередьЗадач");
		
		ОбратныйИндекс= ОчередьЗадач.Задачи.НачатьВызов.ВГраница();
		
		Пока ОбратныйИндекс > -1 Цикл
			
			ОписаниеОбработчика= ОчередьЗадач.Задачи.НачатьВызов[ОбратныйИндекс];
			
			Обработчик_Выполнить(ОписаниеОбработчика);
			
			Если ОписаниеОбработчика.ПараметрыОбработчика.Свойство("ОбработчикВыполнен") Тогда
				ОчередьЗадач.ТекущийУровеньПараллелизации= ОчередьЗадач.ТекущийУровеньПараллелизации + 1;
			ИначеЕсли ОписаниеОбработчика.ПараметрыОбработчика.Свойство("Отказ") Тогда
				КэшФормы_Удалить("ОчередьЗадач");
				Возврат;
			КонецЕсли;
			
			ОписаниеОбработчика= Неопределено;
			
			ОчередьЗадач.Задачи.НачатьВызов.Удалить(ОбратныйИндекс);
			
			ОбратныйИндекс= ОбратныйИндекс -1;
			
			Если ОчередьЗадач.ТекущийУровеньПараллелизации = ОчередьЗадач.МаксимальныйУровеньПараллелизации Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	Процедура ОчередьЗадач_ВыполнитьЗадачи_ЗавершитьВызов()
		
		ОчередьЗадач= КэшФормы_Получить("ОчередьЗадач");
		
		ИсходныйУровеньПараллелизации= ОчередьЗадач.ТекущийУровеньПараллелизации;
		
		ОбратныйИндекс= ОчередьЗадач.Задачи.ЗавершитьВызов.ВГраница();
		
		Пока ОбратныйИндекс > -1 Цикл
			
			ОписаниеОбработчика= ОчередьЗадач.Задачи.ЗавершитьВызов[ОбратныйИндекс];
			
			Обработчик_Выполнить(ОписаниеОбработчика);
			
			Если ОписаниеОбработчика.ПараметрыОбработчика.Свойство("ОбработчикВыполнен") Тогда
				ОчередьЗадач.Задачи.ЗавершитьВызов.Удалить(ОбратныйИндекс);
				ОчередьЗадач.ТекущийУровеньПараллелизации= ОчередьЗадач.ТекущийУровеньПараллелизации - 1;
			КонецЕсли;
			
			ОписаниеОбработчика= Неопределено;
			
			ОбратныйИндекс= ОбратныйИндекс -1;
			
		КонецЦикла;
		
		Если ОчередьЗадач.ТекущийУровеньПараллелизации = ИсходныйУровеньПараллелизации Тогда
			ПодключитьОбработчикОжидания("ОчередьЗадач_ВыполнитьЗадачи", 0.1, Истина);
		Иначе
			ОчередьЗадач_ВыполнитьЗадачи();
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ОчередьЗадач_ДобавитьЗадачу_НачатьВызов(ОписаниеОбработчика)
		
		КэшФормы_Получить("ОчередьЗадач").Задачи.НачатьВызов.Добавить(ОписаниеОбработчика);
		
	КонецПроцедуры

	Процедура ОчередьЗадач_ДобавитьЗадачу_ЗавершитьВызов(ОписаниеОбработчика)
		
		КэшФормы_Получить("ОчередьЗадач").Задачи.ЗавершитьВызов.Вставить(0, ОписаниеОбработчика);
		
	КонецПроцедуры


	Функция   Обработчик_Описание(Обработчик, ПараметрыОбработчика)
		
		Возврат Новый Структура("Обработчик, ПараметрыОбработчика", Обработчик, ПараметрыОбработчика);
		
	КонецФункции

	Процедура Обработчик_Выполнить(ОписаниеОбработчика)
		
		Если ОписаниеОбработчика.Обработчик= "СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьЗаполнение" Тогда
			
			СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьЗаполнение(ОписаниеОбработчика.ПараметрыОбработчика);
			
		ИначеЕсли ОписаниеОбработчика.Обработчик= "СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_НачатьВызов" Тогда
			
			СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_НачатьВызов(ОписаниеОбработчика.ПараметрыОбработчика);
			
		ИначеЕсли ОписаниеОбработчика.Обработчик= "СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьВызов" Тогда
			
			СписокПриглашенийКонтрагентам_ЗаполнитьДаннымиДиадока_Обработчик_ЗавершитьВызов(ОписаниеОбработчика.ПараметрыОбработчика);
			
		ИначеЕсли ОписаниеОбработчика.Обработчик= "ОтправитьПриглашенияКонтрагентам_Обработчик_НачатьВызов" Тогда
			
			ОтправитьПриглашенияКонтрагентам_Обработчик_НачатьВызов(ОписаниеОбработчика.ПараметрыОбработчика);
			
		ИначеЕсли ОписаниеОбработчика.Обработчик= "ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьВызов" Тогда
			
			ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьВызов(ОписаниеОбработчика.ПараметрыОбработчика);
			
		ИначеЕсли ОписаниеОбработчика.Обработчик= "ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьОтправку" Тогда
			
			ОтправитьПриглашенияКонтрагентам_Обработчик_ЗавершитьОтправку(ОписаниеОбработчика.ПараметрыОбработчика);
			
		КонецЕсли;
		
	КонецПроцедуры

//{ ОЧЕРЕДЬ ЗАДАЧ В ДИАДОК


//{ СЛУЖЕБНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ

	Процедура УправлениеФормой()
		
		КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
		
		ЭлементыФормы.СписокПриглашенийКонтрагентам.Колонки.КонтрагентЭДО_Представление.ТекстШапки=  "Контрагент в " + НаименованиеСистемы;
		ЭлементыФормы.СписокПриглашенийКонтрагентам.Колонки.ОрганизацияЭДО_Представление.ТекстШапки= "Организация в " + НаименованиеСистемы;
		
		ПанельТекстОшибки_Показать();
		
	КонецПроцедуры

	Процедура УстановитьДоступностьФормы(ДоступностьФормы)
		
		Если ДоступностьФормы Тогда
			
			Если ЭтаФорма.ТолькоПросмотр Тогда
				
				ЭтаФорма.ТолькоПросмотр= Ложь;
				
				Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("ЭлементыФормы_Доступность") Цикл
					КлючИЗначение.Ключ.Доступность= КлючИЗначение.Значение;
				КонецЦикла;
				
				КэшФормы_Удалить("ЭлементыФормы_Доступность");
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
				
				ЭтаФорма.ТолькоПросмотр= Истина;
				
				Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("ЭлементыФормы_Доступность") Цикл
					КлючИЗначение.Ключ.Доступность= Ложь;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры

	Процедура НадписьСостояния_Показать(НадписьСостояния="")
		
		Если ЭлементыФормы.НадписьСостояния.Заголовок <> НадписьСостояния Тогда
			ЭлементыФормы.НадписьСостояния.Заголовок= НадписьСостояния;
		КонецЕсли;
		
		ВидимостьНадписи= ЗначениеЗаполнено(НадписьСостояния);
		
		Если ЭлементыФормы.НадписьСостояния.Видимость <> ВидимостьНадписи Тогда
			ЭлементыФормы.НадписьСостояния.Видимость= ВидимостьНадписи;
		КонецЕсли;
		
	КонецПроцедуры

	Процедура ПриглашенияДатаНапоминания_УстановитьСледующуюДату()
		
		МассивОрганизаций1С= Новый Массив;
		
		ТаблицаЯщиков= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
		
		Для Каждого КлючИЗначение ИЗ КэшФормы_Получить("ОрганизацииДиадока") Цикл
			
			НайденныеСтроки= ТаблицаЯщиков.НайтиСтроки(Новый Структура("Значение", КлючИЗначение.Ключ));
			
			Для Каждого Стр ИЗ НайденныеСтроки Цикл
				МассивОрганизаций1С.Добавить(Стр.Объект);
			КонецЦикла;
			
		КонецЦикла;
		
		ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьПриглашенияДатаНапоминания(МассивОрганизаций1С, ДобавитьМесяц(ТекущаяДата(), 1));
		
	КонецПроцедуры

	Процедура ПанельТекстОшибки_Показать()
		
		ТекущиеДанные= ЭлементыФормы.СписокПриглашенийКонтрагентам.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибки) Тогда
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Нет);
			
			ЭлементыФормы.НадписьТекстОшибки.Заголовок= ТекущиеДанные.ТекстОшибки;
			
		Иначе
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельТекстОшибки, РежимСверткиЭлементаУправления.Низ);
			
			ЭлементыФормы.НадписьТекстОшибки.Заголовок= "";
			
		КонецЕсли;
		
		
	КонецПроцедуры

//} СЛУЖЕБНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ