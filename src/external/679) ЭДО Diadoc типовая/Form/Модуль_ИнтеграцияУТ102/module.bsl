Перем ВалютаРегламентированногоУчета;

//{ ТЕЛО МОДУЛЯ
	
	Функция ПолучитьПредставлениеСтавкиНДС(СтавкаНДС, дляСФ=Истина) Экспорт 
		Если СтавкаНДС = перечисления.СтавкиНДС.НДС0 Тогда 
			Возврат "0"
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.НДС10 Тогда 
			Возврат "10"
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.НДС18 Тогда 
			Возврат "18"
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.НДС20 Тогда 
			Возврат "20"
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.НДС10_110 Тогда 
			Возврат ?(ДляСФ, "10/110","##");
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.НДС18_118 Тогда 
			Возврат ?(ДляСФ, "18/118", "##");
		ИначеЕсли СтавкаНДС = перечисления.СтавкиНДС.БезНДС Тогда 
			Возврат ?(ДляСФ, "без НДС", "");
		ИначеЕсли ЗначениеЗаполнено(СтавкаНДС)=Ложь Тогда 
			Возврат "";
		Иначе 
			Возврат "##"
		КонецЕсли;	
		
	КонецФункции 
	
	Функция ПолучитьНомерНаПечатьДиадок(ДокументСсылка) Экспорт
		Возврат ПолучитьНомерНаПечать(ДокументСсылка);
	КонецФункции
	
	Функция ЭтоСчетФактуранаАванс(СФ) Экспорт
		
		Возврат
		
		ТипЗнч(СФ) = Тип("ДокументСсылка.СчетФактураВыданный")
		И ((СуществуетОбъектМетаданных("Документ.СчетФактураВыданный.Реквизит.НаАванс") И СФ.НаАванс)
		 	 ИЛИ (СуществуетОбъектМетаданных("Перечисление.ВидСчетаФактурыВыставленного")
		 			И СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс));
		
	КонецФункции	
	
	Функция ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументСсылка) Экспорт 
		Возврат ДокументСсылка.СуммаДокумента;
	КонецФункции
	
	Процедура ПерезаполнитьСуммыПоУЕвРублях(СтрокиСчетаФактуры, ТекущееОснование, ДанныеШапки) Экспорт 
		
	КонецПроцедуры
	
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ДокументБезНДС(СсылкаНаОбъект) Экспорт
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПустаяСсылкаНаНомерГТД() Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПустаяСсылкаНаНомерГТД(); 
		
	КонецФункции
	
//} ТЕЛО МОДУЛЯ

//{ ПОЛУЧЕНИЕ ДАННЫХ
	
	//{ Получить...
		
		Функция ПолучитьНаименованиеКолонкиКодаТовара() Экспорт
			КолонкаКодаТовара = "Код";
			
			Попытка
				Если Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить() = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
					КолонкаКодаТовара = "Артикул";
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Возврат КолонкаКодаТовара;
			
		КонецФункции
		
		Функция ПолучитьВалютуРегламентированногоУчета() 
			Возврат Константы.ВалютаРегламентированногоУчета.Получить();
		КонецФункции
		
		Функция ПолучитьДатуНомерДокументовОплаты(СчетФактура) Экспорт
			Результат = Новый Массив;
			Если ЗначениеЗаполнено( СчетФактура.ДатаПлатежноРасчетногоДокумента) или ЗначениеЗаполнено(СчетФактура.НомерПлатежноРасчетногоДокумента) Тогда
				Эл =  Новый Структура("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", СчетФактура.ДатаПлатежноРасчетногоДокумента, СчетФактура.НомерПлатежноРасчетногоДокумента);
				Результат.Добавить(Эл);
			КонецЕсли;	
			Возврат Результат;
		КонецФункции
		
		Функция ПолучитьНомерГТД(НомерГТД) Экспорт
	
			Возврат ?(значениеЗаполнено(НомерГТД),  ?(типЗнч(НомерГТД)=тип("Строка"), СокрЛП(НомерГТД), сокрЛП(НомерГТД.Код)), "");
		
		КонецФункции

		Функция ПолучитьДатуНомерДоговора(ДокументСсылка) Экспорт
			Договор = ДокументСсылка.ДоговорКонтрагента;
			Возврат Новый Структура("ДоговорНомер, ДоговорДата", Договор.Номер, Договор.Дата);
		КонецФункции
					
	//} Получить...
	
	//{ ТЧПолучитьТекстЗапроса...
		
		Функция ТЧПолучитьТекстЗапросаОтчетКомитентуОПродажах() Экспорт
			Возврат  "ВЫБРАТЬ
			|	подзапрос.Сумма,
			|	подзапрос.СуммаНДС,
			|	подзапрос.Количество,
			|	подзапрос.Цена,
			|	подзапрос.НомерГТД,
			|	подзапрос.СтранаПроисхождения,
			|	подзапрос.СуммаВключаетНДС,
			|	подзапрос.ЕдиницаИзмерения,
			|	"""" КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" КАК КоличествоМест,
			|	0 КАК Масса,
			|	"""" КАК Характеристика,
			|	"""" КАК Серия,
			|	подзапрос.ЭтоУслуга,
			|	""Комиссионное вознаграждение"" как Номенклатура,
			|	"""" как  НоменклатураСсылка,
			|	"""" как  КодНоменклатуры,
			|	подзапрос.Ссылка.СтавкаНДСВознаграждения КАК СтавкаНДС
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(ОтчетКомитентуОПродажахТовары.СуммаВознаграждения) КАК Сумма,
			|		СУММА(ОтчетКомитентуОПродажахТовары.СуммаНДСВознаграждения) КАК СуммаНДС,
			|		ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка,
			|		0 КАК Количество,
			|		"""" КАК Цена,
			|		"""" КАК НомерГТД,
			|		"""" КАК СтранаПроисхождения,
			|		Истина КАК СуммаВключаетНДС,
			|		"""" КАК ЕдиницаИзмерения,
			|		Истина КАК ЭтоУслуга
			|	ИЗ
			|		Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
			|	ГДЕ
			|		ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ОтчетКомитентуОПродажахТовары.Ссылка) КАК подзапрос"; 		
			
		КонецФункции	
		
		Функция ТекстЗапросаТара() Экспорт
			
			Возврат "ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда РеализацияТоваровУслугТовары.Номенклатура.Наименование
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	РеализацияТоваровУслугТовары.Номенклатура.Ссылка КАК НоменклатураСсыла,
			|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодНоменклатуры,
			|	"""" КАК Характеристика,
			|	"""" КАК серия,
			|	РеализацияТоваровУслугТовары.Количество КАК Количество,
			|	РеализацияТоваровУслугТовары.Цена КАК Цена,
			|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
			|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
			|	0 КАК СуммаНДС,
			|	"""" КАК НомерГТД,
			|	"""" КАК СтранаПроисхождения,
			|	РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	РеализацияТоваровУслугТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" КАК КоличествоМест,
			|	0 КАК Масса,
			|	Ложь КАК ЭтоУслуга,
			|	2 КАК порядок
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
			
		КонецФункции	
		
		Функция ТЧПолучитьТекстЗапросаРеализацияТоваровУслуг(ФормированиеСФ) Экспорт
			Возврат		"ВЫБРАТЬ
			|	подзапрос.НомерСтроки КАК НомерСтроки,
			|	подзапрос.Номенклатура,
			|	подзапрос.НоменклатураСсылка,
			|	подзапрос.КодНоменклатуры,
			|	подзапрос.Характеристика,
			|	подзапрос.Серия,
			|	подзапрос.Количество,
			|	подзапрос.Цена,
			|	подзапрос.Сумма,
			|	подзапрос.СтавкаНДС,
			|	подзапрос.СуммаНДС,
			|	подзапрос.НомерГТД,
			|	подзапрос.СтранаПроисхождения,
			|	подзапрос.СуммаВключаетНДС,
			|	подзапрос.УчитыватьНДС,
			|	подзапрос.ЕдиницаИзмерения,
			|	подзапрос.КодЕдиницыИзмерения,
			|	подзапрос.ВидУпаковки,
			|	подзапрос.КоличествоВОдномМесте,
			|	подзапрос.КоличествоМест,
			|	подзапрос.Масса,
			|	подзапрос.ЭтоУслуга,
			|	подзапрос.порядок КАК порядок
			|ИЗ
			|	(ВЫБРАТЬ
			|		РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда РеализацияТоваровУслугТовары.Номенклатура.Наименование
			|			ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		РеализацияТоваровУслугТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|		РеализацияТоваровУслугТовары.Номенклатура.Код  КАК КодНоменклатуры,
			|		РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры  КАК Характеристика,
			|		РеализацияТоваровУслугТовары.СерияНоменклатуры КАК серия,
			|		РеализацияТоваровУслугТовары.Количество КАК Количество,
			|		РеализацияТоваровУслугТовары.Цена КАК Цена,
			|		РеализацияТоваровУслугТовары.Сумма КАК Сумма,
			|		РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
			|		РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
			|		РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
			|		РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
			|		РеализацияТоваровУслугТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		РеализацияТоваровУслугТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|		РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|		РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест КАК ВидУпаковки,
			|		ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.Коэффициент = 0
			|				Тогда 0
			|			ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест.Коэффициент / РеализацияТоваровУслугТовары.Коэффициент
			|		КОНЕЦ КАК КоличествоВОдномМесте,
			|		РеализацияТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
			|		ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.КоличествоМест > 0
			|				Тогда РеализацияТоваровУслугТовары.КоличествоМест * РеализацияТоваровУслугТовары.ЕдиницаИзмеренияМест.Вес
			|			ИНАЧЕ РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Вес
			|		КОНЕЦ КАК Масса,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|	ГДЕ
			|		РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|		  "+?(ФормированиеСФ, "", " ОБЪЕДИНИТЬ ВСЕ
			|  "+ТекстЗапросаТара()) +"
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		РеализацияТоваровУслугУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(РеализацияТоваровУслугУслуги.Содержание, 1, 10) = """"
			|				Тогда РеализацияТоваровУслугУслуги.Номенклатура.Наименование
			|			ИНАЧЕ РеализацияТоваровУслугУслуги.Содержание
			|		КОНЕЦ,
			|		РеализацияТоваровУслугУслуги.Номенклатура.Ссылка,
			|		РеализацияТоваровУслугУслуги.Номенклатура.Код ,
			|		""""  КАК Характеристика,
			|		"""" КАК серия,
			|		РеализацияТоваровУслугУслуги.Количество,
			|		РеализацияТоваровУслугУслуги.Цена,
			|		РеализацияТоваровУслугУслуги.Сумма,
			|		РеализацияТоваровУслугУслуги.СтавкаНДС,
			|		РеализацияТоваровУслугУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		РеализацияТоваровУслугУслуги.Ссылка.СуммаВключаетНДС,
			|		РеализацияТоваровУслугУслуги.Ссылка.УчитыватьНДС,
			|		РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		"""",
			|		"""",
			|		"""",
			|		0,
			|		Истина,
			|		3
			|	ИЗ
			|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
			|	ГДЕ
			|		РеализацияТоваровУслугУслуги.Ссылка = &Ссылка) КАК подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаСчетФактураВыданный() Экспорт
			
			Если СуществуетОбъектМетаданных("Документ.СчетФактураВыданный.Авансы") Тогда
				
				Возврат
				
				"ВЫБРАТЬ
				|	СчетФактураВыданныйАвансы.НомерСтроки КАК НомерСтроки,
				|	ВЫБОР
				|		КОГДА ПОДСТРОКА(СчетФактураВыданныйАвансы.Содержание, 1, 10) <> """" Тогда СчетФактураВыданныйАвансы.Содержание
				|		КОГДА СчетФактураВыданныйАвансы.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка) и 
				|           ПОДСТРОКА(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное, 1, 10) <> """"
				|			Тогда СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное
				|		КОГДА СчетФактураВыданныйАвансы.Номенклатура <> Значение(Справочник.Номенклатура.ПустаяСсылка)  
				|			Тогда СчетФактураВыданныйАвансы.Номенклатура.Наименование
				|  Иначе ""Предварительная оплата""
				|	КОНЕЦ КАК Номенклатура,
				|  СчетФактураВыданныйАвансы.Номенклатура.Ссылка КАК НоменклатураСсылка,
				|  СчетФактураВыданныйАвансы.Номенклатура.Код КАК КодНоменклатуры,
				|	0 как Количество,
				|	0 как Цена,
				|	СчетФактураВыданныйАвансы.Сумма,
				|	СчетФактураВыданныйАвансы.СтавкаНДС,
				|	СчетФактураВыданныйАвансы.СуммаНДС,
				|	"""" КАК НомерГТД,
				|	"""" КАК СтранаПроисхождения,
				|	"""" КАК Характеристика,
				|	"""" КАК Серия,
				|	0,
				|	Истина КАК СуммаВключаетНДС,
				|	Истина КАК УчитыватьНДС,
				|	"""" КАК ЕдиницаИзмерения,
				|	"""" КАК КодЕдиницыИзмерения,
				|	"""" КАК ВидУпаковки,
				|	0 КАК КоличествоВОдномМесте,
				|	0  как КоличествоМест,
				|	Истина КАК ЭтоУслуга
				|ИЗ
				|	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
				|ГДЕ
				|	СчетФактураВыданныйАвансы.Ссылка = &СчетФактура
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				
			Иначе
				
				Возврат
				
				"ВЫБРАТЬ
				|	""Предварительный платеж"" КАК Номенклатура,
				|	Т.Сумма,
				|	Т.СтавкаНДС,
				|	Т.СуммаНДС,
				|	ИСТИНА КАК СуммаВключаетНДС,
				|	ИСТИНА КАК УчитыватьНДС,
				|	"""" КАК КодЕдиницыИзмерения
				|ИЗ
				|	Документ.СчетФактураВыданный КАК Т
				|ГДЕ
				|	Т.Ссылка = &СчетФактура";
				
			КонецЕсли;
			
			
		КонецФункции 
		
		Функция ТЧПолучитьТекстЗапросаСчетНаоплатуПокупателю() Экспорт 
			Возврат  "ВЫБРАТЬ
			|	подзапрос.НомерСтроки КАК НомерСтроки,
			|	подзапрос.Номенклатура,
			|	подзапрос.НоменклатураСсылка,
			|	подзапрос.КодНоменклатуры,
			|	подзапрос.Характеристика,
			|	подзапрос.Серия,
			|	подзапрос.Количество,
			|	подзапрос.Цена,
			|	подзапрос.Сумма,
			|	подзапрос.СтавкаНДС,
			|	подзапрос.СуммаНДС,
			|	подзапрос.НомерГТД,
			|	подзапрос.СтранаПроисхождения,
			|	подзапрос.СуммаВключаетНДС,
			|	подзапрос.УчитыватьНДС,
			|	подзапрос.ЕдиницаИзмерения,
			|	подзапрос.КодЕдиницыИзмерения,
			|	подзапрос.ВидУпаковки,
			|	подзапрос.КоличествоВОдномМесте,
			|	подзапрос.КоличествоМест,
			|	подзапрос.Масса,
			|	подзапрос.ЭтоУслуга,
			|	подзапрос.порядок КАК порядок
			|ИЗ
			|	(ВЫБРАТЬ
			|		СчетНаоплатуТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(СчетНаоплатуТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда СчетНаоплатуТовары.Номенклатура.Наименование
			|			ИНАЧЕ СчетНаоплатуТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		СчетНаоплатуТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|		СчетНаоплатуТовары.Номенклатура.Код  КАК КодНоменклатуры,
			|		СчетНаоплатуТовары.ХарактеристикаНоменклатуры  КАК Характеристика,
			|		"""" КАК серия,
			|		СчетНаоплатуТовары.Количество КАК Количество,
			|		СчетНаоплатуТовары.Цена КАК Цена,
			|		СчетНаоплатуТовары.Сумма КАК Сумма,
			|		СчетНаоплатуТовары.СтавкаНДС КАК СтавкаНДС,
			|		СчетНаоплатуТовары.СуммаНДС КАК СуммаНДС,
			|		"""" КАК НомерГТД,
			|		"""" КАК СтранаПроисхождения,
			|		СчетНаоплатуТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		СчетНаоплатуТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		СчетНаоплатуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|		СчетНаоплатуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|		СчетНаоплатуТовары.ЕдиницаИзмеренияМест КАК ВидУпаковки,
			|		ВЫБОР
			|			КОГДА СчетНаоплатуТовары.Коэффициент = 0
			|				Тогда 0
			|			ИНАЧЕ СчетНаоплатуТовары.ЕдиницаИзмеренияМест.Коэффициент / СчетНаоплатуТовары.Коэффициент
			|		КОНЕЦ КАК КоличествоВОдномМесте,
			|		СчетНаоплатуТовары.КоличествоМест КАК КоличествоМест,
			|		ВЫБОР
			|			КОГДА СчетНаоплатуТовары.КоличествоМест > 0
			|				Тогда СчетНаоплатуТовары.КоличествоМест * СчетНаоплатуТовары.ЕдиницаИзмеренияМест.Вес
			|			ИНАЧЕ СчетНаоплатуТовары.Количество * СчетНаоплатуТовары.ЕдиницаИзмерения.Вес
			|		КОНЕЦ КАК Масса,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаоплатуТовары
			|	ГДЕ
			|		СчетНаоплатуТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СчетНаОплатуУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(СчетНаОплатуУслуги.Содержание, 1, 10) = """"
			|				Тогда СчетНаОплатуУслуги.Номенклатура.Наименование
			|			ИНАЧЕ СчетНаОплатуУслуги.Содержание
			|		КОНЕЦ,
			|		СчетНаОплатуУслуги.Номенклатура.Ссылка ,
			|		СчетНаОплатуУслуги.Номенклатура.Код ,
			|		""""  КАК Характеристика,
			|		"""" КАК серия,
			|		СчетНаОплатуУслуги.Количество,
			|		СчетНаОплатуУслуги.Цена,
			|		СчетНаОплатуУслуги.Сумма,
			|		СчетНаОплатуУслуги.СтавкаНДС,
			|		СчетНаОплатуУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС,
			|		СчетНаОплатуУслуги.Ссылка.УчитыватьНДС,
			|		СчетНаОплатуУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		СчетНаОплатуУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		"""",
			|		"""",
			|		"""",
			|		0,
			|		Истина,
			|		2
			|	ИЗ
			|		Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
			|	ГДЕ
			|		СчетНаОплатуУслуги.Ссылка = &Ссылка) КАК подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
		КонецФункции		
		
		Функция ТЧПолучитьТекстЗапросаОтчетКомиссионераОПродажах() Экспорт
			Возврат	"ВЫБРАТЬ
			|	ВложенныйЗапрос.НомерСтроки,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.НоменклатураСсылка,
			|	ВложенныйЗапрос.КодНоменклатуры,
			|	ВложенныйЗапрос.Количество,
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Сумма,
			|	ВложенныйЗапрос.СтавкаНДС,
			|	ВложенныйЗапрос.НомерГТД,
			|	ВложенныйЗапрос.СтранаПроисхождения,
			|	ВложенныйЗапрос.СуммаВключаетНДС,
			|	ВложенныйЗапрос.УчитыватьНДС,
			|	ВложенныйЗапрос.ЕдиницаИзмерения,
			|	ВложенныйЗапрос.КодЕдиницыИзмерения,
			|	ВложенныйЗапрос.ВидУпаковки,
			|	ВложенныйЗапрос.КоличествоВОдномМесте,
			|	ВложенныйЗапрос.КоличествоМест,
			|	ВложенныйЗапрос.Масса,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Серия,
			|	ВложенныйЗапрос.ЭтоУслуга,
			|	ВложенныйЗапрос.Порядок,
			|	ВложенныйЗапрос.СуммаНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОтчетКомиссионераОПродажахТовары.НомерСтроки,
			|			ВЫБОР
			|				КОГДА ПОДСТРОКА(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|					Тогда ОтчетКомиссионераОПродажахТовары.Номенклатура.Наименование
			|				ИНАЧЕ ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное
			|			КОНЕЦ КАК Номенклатура,
			|			ОтчетКомиссионераОПродажахТовары.Номенклатура.Ссылка как  НоменклатураСсылка,
			|			ОтчетКомиссионераОПродажахТовары.Номенклатура.Код как  КодНоменклатуры,
			|			ОтчетКомиссионераОПродажахТовары.Количество,
			|			ОтчетКомиссионераОПродажахТовары.Цена,
			|			ОтчетКомиссионераОПродажахТовары.Сумма,
			|			ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
			|			ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
			|			ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
			|			ОтчетКомиссионераОПродажахТовары.Ссылка.СуммаВключаетНДС,
			|			ОтчетКомиссионераОПродажахТовары.Ссылка.УчитыватьНДС,
			|			ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору как ЕдиницаИзмерения,
			|			ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|			"""" КАК ВидУпаковки,
			|			"""" КАК КоличествоВОдномМесте,
			|			"""" КАК КоличествоМест,
			|			0 КАК Масса,
			|			"""" КАК Характеристика,
			|			"""" КАК Серия,
			|			Ложь КАК ЭтоУслуга,
			|			1 КАК Порядок,
			|			ОтчетКомиссионераОПродажахТовары.СуммаНДС,
			|			ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки
			|		ИЗ
			|			Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|		ГДЕ
			|			ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка) КАК ВложенныйЗапрос
			|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВложенныйЗапрос.КлючСтроки
			|ГДЕ
			|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &СчетФактура";			
			
		КонецФункции 
		
		Функция ТЧПолучитьТекстЗапроса(Документ, СчетФактура, ЭтоКСФ)
			
			ТекстЗапроса=	"";
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Возврат ТЧПолучитьТекстЗапросаРеализацияТоваровУслуг(НЕ СчетФактура = Неопределено);
				
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
				
				Возврат ТЧПолучитьТекстЗапросаОтчетКомиссионераОПродажах();
				
			ИначеЕсли ТипЗнч(Документ)= Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 
				
				Возврат ТЧПолучитьТекстЗапросаОтчетКомитентуОПродажах();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаВозвратТоваровПоставщику();
				
			ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаОтражениеРеализацииТоваровИУслугНДС();
				
			ИначеЕсли ЭтоСчетФактуранаАванс(СчетФактура)  Тогда
				
				Возврат	ТЧПолучитьТекстЗапросаСчетФактураВыданный();
				
			ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.СчетНаоплатуПокупателю") Тогда
				
				Возврат 	ТЧПолучитьТекстЗапросаСчетНаоплатуПокупателю();
				
			ИначеЕсли ТипЗнч(Документ) = тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				Возврат 	ТЧПолучитьТекстЗапросаЗаказПокупателя();
				
			КонецЕсли;
			
			Возврат ТекстЗапроса;
			
			ВызватьИсключение "Не удалось сформировать текст запроса к табличной части документа " + Документ;
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаВозвратТоваровПоставщику() Экспорт
			Возврат "ВЫБРАТЬ
			|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПОДСТРОКА(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда ВозвратТоваровПоставщикуТовары.Номенклатура.Наименование
			|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ВозвратТоваровПоставщикуТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК КодНоменклатуры,
			|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
			|	ВозвратТоваровПоставщикуТовары.Количество,
			|	ВозвратТоваровПоставщикуТовары.Цена,
			|	ВозвратТоваровПоставщикуТовары.Сумма,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС,
			|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК суммаНДС,
			|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмеренияМест КАК ВидУпаковки,
			|	ВЫБОР
			|		КОГДА ВозвратТоваровПоставщикуТовары.Коэффициент = 0
			|			Тогда 0
			|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.ЕдиницаИзмеренияМест.Коэффициент / ВозвратТоваровПоставщикуТовары.Коэффициент
			|	КОНЕЦ КАК КоличествоВОдномМесте,
			|	ВозвратТоваровПоставщикуТовары.КоличествоМест КАК КоличествоМест,
			|	ВЫБОР
			|		КОГДА ВозвратТоваровПоставщикуТовары.КоличествоМест > 0
			|			Тогда ВозвратТоваровПоставщикуТовары.КоличествоМест * ВозвратТоваровПоставщикуТовары.ЕдиницаИзмеренияМест.Вес
			|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Количество * ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Вес
			|	КОНЕЦ КАК Масса,
			|	ВозвратТоваровПоставщикуТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	ВозвратТоваровПоставщикуТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|	Ложь КАК ЭтоУслуга
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			|ГДЕ
			|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецФункции 
		
		Функция ТЧПолучитьТекстЗапросаОтражениеРеализацииТоваровИУслугНДС() Экспорт
			Возврат  "ВЫБРАТЬ
			|	ОтражениеРеализацииТоваровИУслугНДС.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|  когда ОтражениеРеализацииТоваровИУслугНДС.Номенклатура ссылка справочник.ОбъектыСтроительства
			|  Тогда ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.наименование
			|		КОГДА ПОДСТРОКА(ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|			Тогда ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.Наименование
			|		ИНАЧЕ ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.НаименованиеПолное
			|	КОНЕЦ КАК Номенклатура,
			|	ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|	ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.Код  КАК КодНоменклатуры,
			|	ОтражениеРеализацииТоваровИУслугНДС.ХарактеристикаНоменклатуры КАК Характеристика,
			|	ОтражениеРеализацииТоваровИУслугНДС.СерияНоменклатуры КАК Серия,
			|	ОтражениеРеализацииТоваровИУслугНДС.Количество,
			|	ОтражениеРеализацииТоваровИУслугНДС.Цена,
			|	ОтражениеРеализацииТоваровИУслугНДС.Сумма,
			|	ОтражениеРеализацииТоваровИУслугНДС.СтавкаНДС,
			|	ОтражениеРеализацииТоваровИУслугНДС.СерияНоменклатуры.НомерГТД КАК НомерГТД,
			|	ОтражениеРеализацииТоваровИУслугНДС.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ОтражениеРеализацииТоваровИУслугНДС.СуммаНДС КАК суммаНДС,
			|	ОтражениеРеализацииТоваровИУслугНДС.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|	ОтражениеРеализацииТоваровИУслугНДС.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|	"""" КАК ВидУпаковки,
			|	"""" КАК КоличествоВОдномМесте,
			|	"""" КАК КоличествоМест,
			|	0 КАК Масса,
			|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	Истина КАК УчитыватьНДС,
			|	выбор когда ОтражениеРеализацииТоваровИУслугНДС.Номенклатура.видНоменклатуры.ТипНоменклатуры=значение(Перечисление.ТипыНоменклатуры.Услуга) Тогда Истина иначе Ложь конец КАК ЭтоУслуга
			|ИЗ
			|	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДС
			|ГДЕ
			|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			
		КонецФункции
		
		Функция ТЧПолучитьТекстЗапросаЗаказПокупателя() Экспорт
			Возврат "ВЫБРАТЬ
			|	подзапрос.НомерСтроки КАК НомерСтроки,
			|	подзапрос.Номенклатура,
			|	подзапрос.НоменклатураСсылка,
			|	подзапрос.КодНоменклатуры,
			|	подзапрос.Характеристика,
			|	подзапрос.Серия,
			|	подзапрос.Количество,
			|	подзапрос.Цена,
			|	подзапрос.Сумма,
			|	подзапрос.СтавкаНДС,
			|	подзапрос.СуммаНДС,
			|	подзапрос.НомерГТД,
			|	подзапрос.СтранаПроисхождения,
			|	подзапрос.СуммаВключаетНДС,
			|	подзапрос.УчитыватьНДС,
			|	подзапрос.ЕдиницаИзмерения,
			|	подзапрос.КодЕдиницыИзмерения,
			|	подзапрос.ВидУпаковки,
			|	подзапрос.КоличествоВОдномМесте,
			|	подзапрос.КоличествоМест,
			|	подзапрос.Масса,
			|	подзапрос.ЭтоУслуга,
			|	подзапрос.порядок КАК порядок
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное, 1, 10) = """"
			|				Тогда ЗаказПокупателяТовары.Номенклатура.Наименование
			|			ИНАЧЕ ЗаказПокупателяТовары.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Номенклатура,
			|		ЗаказПокупателяТовары.Номенклатура.Ссылка КАК НоменклатураСсылка,
			|		ЗаказПокупателяТовары.Номенклатура.Код  КАК КодНоменклатуры,
			|		ЗаказПокупателяТовары.ХарактеристикаНоменклатуры  КАК Характеристика,
			|		"""" КАК серия,
			|		ЗаказПокупателяТовары.Количество КАК Количество,
			|		ЗаказПокупателяТовары.Цена КАК Цена,
			|		ЗаказПокупателяТовары.Сумма КАК Сумма,
			|		ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|		ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|		"""" КАК НомерГТД,
			|		"""" КАК СтранаПроисхождения,
			|		ЗаказПокупателяТовары.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|		ЗаказПокупателяТовары.Ссылка.УчитыватьНДС КАК УчитыватьНДС,
			|		ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
			|		ЗаказПокупателяТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК КодЕдиницыИзмерения,
			|		ЗаказПокупателяТовары.ЕдиницаИзмеренияМест КАК ВидУпаковки,
			|		ВЫБОР
			|			КОГДА ЗаказПокупателяТовары.Коэффициент = 0
			|				Тогда 0
			|			ИНАЧЕ ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Коэффициент / ЗаказПокупателяТовары.Коэффициент
			|		КОНЕЦ КАК КоличествоВОдномМесте,
			|		ЗаказПокупателяТовары.КоличествоМест КАК КоличествоМест,
			|		ВЫБОР
			|			КОГДА ЗаказПокупателяТовары.КоличествоМест > 0
			|				Тогда ЗаказПокупателяТовары.КоличествоМест * ЗаказПокупателяТовары.ЕдиницаИзмеренияМест.Вес
			|			ИНАЧЕ ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.ЕдиницаИзмерения.Вес
			|		КОНЕЦ КАК Масса,
			|		Ложь КАК ЭтоУслуга,
			|		1 КАК порядок
			|	ИЗ
			|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|	ГДЕ
			|		ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗаказПокупателяУслуги.НомерСтроки,
			|		ВЫБОР
			|			КОГДА ПОДСТРОКА(ЗаказПокупателяУслуги.Содержание, 1, 10) = """"
			|				Тогда ЗаказПокупателяУслуги.Номенклатура.Наименование
			|			ИНАЧЕ ЗаказПокупателяУслуги.Содержание
			|		КОНЕЦ,
			|		ЗаказПокупателяУслуги.Номенклатура.Ссылка, 
			|		ЗаказПокупателяУслуги.Номенклатура.Код , 
			|		""""  КАК Характеристика,
			|		"""" КАК серия,
			|		ЗаказПокупателяУслуги.Количество,
			|		ЗаказПокупателяУслуги.Цена,
			|		ЗаказПокупателяУслуги.Сумма,
			|		ЗаказПокупателяУслуги.СтавкаНДС,
			|		ЗаказПокупателяУслуги.СуммаНДС,
			|		"""",
			|		"""",
			|		ЗаказПокупателяУслуги.Ссылка.СуммаВключаетНДС,
			|		ЗаказПокупателяУслуги.Ссылка.УчитыватьНДС,
			|		ЗаказПокупателяУслуги.Номенклатура.БазоваяЕдиницаИзмерения,
			|		ЗаказПокупателяУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
			|		"""",
			|		"""",
			|		"""",
			|		0,
			|		Истина,
			|		2
			|	ИЗ
			|		Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
			|	ГДЕ
			|		ЗаказПокупателяУслуги.Ссылка = &Ссылка) КАК подзапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	порядок,
			|	НомерСтроки";
			
			
		КонецФункции				
		
		Функция ПолучитьРезультатЗапросаТЧ(ДокументСсылка, СчетФактура, ЭтоКСФ) Экспорт
			
			ЗапросТЧ = Новый Запрос;
			ЗапросТЧ.Текст=	ТЧПолучитьТекстЗапроса(ДокументСсылка, СчетФактура, ЭтоКСФ);
			ЗапросТЧ.УстановитьПараметр("СчетФактура", СчетФактура);
			ЗапросТЧ.УстановитьПараметр("Ссылка", ДокументСсылка);
			Возврат ЗапросТЧ.Выполнить();
			
		КонецФункции
		
		Функция ПолучитьКодНоменклатурыДляТорг12(ТекущийКод, НоменклатураСсылка) Экспорт 
			КолонкаКодаТовара=	ПолучитьНаименованиеКолонкиКодаТовара();
			Если ЗначениеЗаполнено(НоменклатураСсылка) И КолонкаКодаТовара <> "Код" Тогда
				Возврат НоменклатураСсылка[КолонкаКодаТовара];
			Иначе 
				Возврат ТекущийКод;
			КонецЕсли;
		КонецФункции
		
		Функция ТребуетсяПерезаполнитьСуммыПоУЕвРублях(ДокументРеализации, СчетФактура=Неопределено, ФормированиеСФ=Ложь) Экспорт 
			Возврат Ложь;
		КонецФункции	
		
	//} ТЧПолучитьТекстЗапроса...
	
	//{ ПолучитьДанныеШапки...
		
		Функция ШапкаПолучитьТекстЗапросаОсновной()
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслуг.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(справочник.контрагенты.ПустаяСсылка)
			|			Тогда ""он же""
			|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	РеализацияТоваровУслуг.Контрагент,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(справочник.контрагенты.пустаяСсылка)
			|			Тогда РеализацияТоваровУслуг.Контрагент
			|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
			|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
			|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
			|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОтражениеРеализацииТоваровИУслугНДС.Организация,
			|	""он же"",
			|	ОтражениеРеализацииТоваровИУслугНДС.Контрагент,
			|	ОтражениеРеализацииТоваровИУслугНДС.Контрагент,
			|	NULL,
			|	"""",
			|	Ложь,
			|	Истина
			|ИЗ
			|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
			|ГДЕ
			|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВозвратТоваровПоставщику.Организация,
			|	ВЫБОР
			|		КОГДА ВозвратТоваровПоставщику.Грузоотправитель = ЗНАЧЕНИЕ(справочник.контрагенты.ПустаяСсылка)
			|			Тогда ""он же""
			|		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
			|	КОНЕЦ,
			|	ВозвратТоваровПоставщику.Контрагент,
			|	ВЫБОР
			|		КОГДА ВозвратТоваровПоставщику.Грузополучатель = ЗНАЧЕНИЕ(справочник.контрагенты.пустаяСсылка)
			|			Тогда ВозвратТоваровПоставщику.Контрагент
			|		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
			|	КОНЕЦ,
			|	NULL,
			|	ВозвратТоваровПоставщику.ВалютаДокумента,
			|	ВозвратТоваровПоставщику.СуммаВключаетНДС,
			|	ВозвратТоваровПоставщику.УчитыватьНДС
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
			|ГДЕ
			|	ВозвратТоваровПоставщику.Ссылка = &ДокументСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажах.Организация,
			|	""он же"",
			|	ОтчетКомиссионераОПродажах.Контрагент,
			|	ОтчетКомиссионераОПродажах.Контрагент,
			|	"""",
			|	ОтчетКомиссионераОПродажах.ВалютаДокумента,
			|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС,
			|	ОтчетКомиссионераОПродажах.УчитыватьНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОтчетКомитентуОПродажах.Организация,
			|	"""",
			|	ОтчетКомитентуОПродажах.Контрагент,
			|	"""",
			|	"""",
			|	ОтчетКомитентуОПродажах.ВалютаДокумента,
			|	Истина,
			|	Истина
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
			|ГДЕ
			|	ОтчетКомитентуОПродажах.Ссылка = &ДокументСсылка";
			
			Если метаданные.Документы.Найти("КорректировкаРеализации") <> Неопределено Тогда 
				ТекстЗапроса  = ТекстЗапроса  +"
				|Объединить все  
				|"+"ВЫБРАТЬ
				|	КорректировкаРеализации.Организация КАК Организация,
				|	ВЫБОР
				|		КОГДА КорректировкаРеализации.Грузоотправитель = ЗНАЧЕНИЕ(справочник.контрагенты.ПустаяСсылка)
				|			Тогда ""он же""
				|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
				|	КОНЕЦ КАК Грузоотправитель,
				|	КорректировкаРеализации.Контрагент,
				|	ВЫБОР
				|		КОГДА КорректировкаРеализации.Грузополучатель = ЗНАЧЕНИЕ(справочник.контрагенты.пустаяСсылка)
				|			Тогда КорректировкаРеализации.Контрагент
				|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
				|	КОНЕЦ КАК Грузополучатель,
				|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
				|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
				|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
				|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС
				|ИЗ
				|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
				|ГДЕ
				|	КорректировкаРеализации.Ссылка = &ДокументСсылка";
			КонецЕсли;	
			
			Если Метаданные.Документы.Найти("СчетНаОплатуПокупателю") <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СчетНаОплату.Организация,
				|	"""",
				|	СчетНаОплату.Контрагент,
				|	"""",
				|	"""",
				|	СчетНаОплату.ВалютаДокумента,
				|	СчетНаОплату.СуммаВключаетНДС,
				|	СчетНаОплату.УчитыватьНДС
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплату
				|ГДЕ
				|	СчетНаОплату.Ссылка = &ДокументСсылка";
			КонецЕсли;
			
			Если Метаданные.Документы.Найти("ЗаказПокупателя") <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса  + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗаказПокупателя.Организация,
				|	"""",
				|	ЗаказПокупателя.Контрагент,
				|	"""",
				|	"""",
				|	ЗаказПокупателя.ВалютаДокумента,
				|	ЗаказПокупателя.СуммаВключаетНДС,
				|	ЗаказПокупателя.УчитыватьНДС
				|ИЗ
				|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				|ГДЕ
				|	ЗаказПокупателя.Ссылка = &ДокументСсылка";
			КонецЕсли;
			
			Возврат ТекстЗапроса;
		КонецФункции	
		
		Функция ШапкаПолучитьТекстЗапросаСФ()  Экспорт 
			Возврат 			"ВЫБРАТЬ
			|	СчетФактураВыданный.Организация,
			|	"""" как Грузоотправитель,
			|	СчетФактураВыданный.Контрагент,
			|	"""" КАК Грузополучатель,
			|	"""" как АдресДоставки,
			|	СчетФактураВыданный.ВалютаДокумента,
			|	Истина как СуммаВключаетНДС,
			|	Истина КАК УчитыватьНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &СчетФактура"; 
		КонецФункции	
		
		Функция ШапкаПолучитьТекстЗапроса(ДокументСсылка, СчетФактура)
			
			Если ЭтоСчетФактуранаАванс(СчетФактура) = Истина Тогда
				Возврат ШапкаПолучитьТекстЗапросаСФ();
			Иначе 
				Возврат ШапкаПолучитьТекстЗапросаОсновной();
			КонецЕсли;
		КонецФункции
		
		Функция ШапкаПолучитьРезультатЗапроса(ДокументСсылка, СчетФактура = Неопределено) 
			
			Запрос= Новый Запрос;
			Запрос.Текст=	ШапкаПолучитьТекстЗапроса(ДокументСсылка, СчетФактура);
			Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
			Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
			
			РезультатЗапроса=	Запрос.Выполнить();
			
			Возврат РезультатЗапроса;
			
		КонецФункции
		
		Функция ПолучитьВалютуДокумента(ВалютаДокумента, СчетФактура)
			
			Возврат ВалютаДокумента;
			
		КонецФункции 
		
		Функция ПолучитьСтруктуруШапки(ДокументСсылка, СчетФактура = Неопределено)   Экспорт 
			
			РезультатЗапроса=	ШапкаПолучитьРезультатЗапроса(ДокументСсылка, СчетФактура);
			Если РезультатЗапроса.Пустой() Тогда
				ВызватьИсключение "Ошибка получения данных шапки, ДокументСсылка - " + ДокументСсылка + ", СчетФактура - " + СчетФактура;
			КонецЕсли;
			
			ТаблицаДанныхШапки= РезультатЗапроса.Выгрузить();
			ДанныеШапки=		ТаблицаДанныхШапки[0];
			
			СтруктураШапки=	Новый Структура();
			
			СтруктураШапки.Вставить("Организация", 		ДанныеШапки.Организация);
			СтруктураШапки.Вставить("Грузоотправитель", ДанныеШапки.Грузоотправитель);
			СтруктураШапки.Вставить("Контрагент", 		ДанныеШапки.Контрагент);
			СтруктураШапки.Вставить("Грузополучатель", 	ДанныеШапки.Грузополучатель);
			СтруктураШапки.Вставить("АдресДоставки", 	ДанныеШапки.АдресДоставки);
			СтруктураШапки.Вставить("ВалютаДокумента", 	ДанныеШапки.ВалютаДокумента);
			СтруктураШапки.Вставить("СуммаВключаетНДС", ДанныеШапки.СуммаВключаетНДС);
			СтруктураШапки.Вставить("УчитыватьНДС", 	ДанныеШапки.УчитыватьНДС);
			СтруктураШапки.Вставить("ДопИнфо", 			Новый Массив);
						
			Если СчетФактура = Неопределено Тогда
				
				СтруктураШапки.Вставить("Дата", ДокументСсылка.Дата);
				СтруктураШапки.Вставить("Номер", ДокументСсылка.Номер);
				
			Иначе
				
				СтруктураШапки.Вставить("Дата", СчетФактура.Дата);
				СтруктураШапки.Вставить("Номер", СчетФактура.Номер);
				СтруктураШапки.ВалютаДокумента  =  ПолучитьВалютуДокумента(СтруктураШапки.ВалютаДокумента, СчетФактура);
				
				Если СчетФактура.Метаданные().Реквизиты.Найти("ИдентификаторГосконтракта") <> Неопределено Тогда
					СтруктураШапки.Вставить("ИдентификаторГосконтракта", СчетФактура.ИдентификаторГосконтракта);
				КонецЕсли;
				
			КонецЕсли;	
			
			Возврат СтруктураШапки;
			
		КонецФункции
		
	//} ПолучитьДанныеШапки...
	
	//{ ПолучитьДанныеСФ...
		
		Функция ПолучитьНомераДляКСФ(СчетФактура) Экспорт
			Возврат "";
		КонецФункции
		
		Функция ПолучитьНомераДляСФ(СчетФактура)  Экспорт 
			ДанныеДляПечати = Новый Структура;
			ДанныеДляПечати.вставить("НомерДокумента", ПолучитьНомерНаПечатьДиадок(СчетФактура));
			ДанныеДляПечати.Вставить("ДатаДокумента",  СчетФактура.Дата);
			ДанныеДляПечати.Вставить("ЭтоИСФ", Ложь);
			Возврат ДанныеДляПечати
		КонецФункции
		
		Функция ПолучитьКПППокупателя(СчетФактура) Экспорт 
			Возврат ""
		КонецФункции	
		
	//} ПолучитьДанныеСФ...
	
//} ПОЛУЧЕНИЕ ДАННЫХ

//{ ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ
	
	Функция ОчиститьГрузополучателя(СтрокаТаблицы) Экспорт
		
		Возврат Ложь;
		
	КонецФункции

	Функция ПолучитьТипДокумента(Док, ТаблицаНастроекПечати, ЭтоСчет, ФункцияУПД) Экспорт
		
		Если ЗначениеЗаполнено(ФункцияУПД) Тогда
			
			ТипДокумента = ТипДокументаУПД(ФункцияУПД);
			
			Если ЗначениеЗаполнено(ТипДокумента) Тогда
				Возврат ТипДокумента;
			Иначе
				ТипДокумента = ТипДокументаУКД(ФункцияУПД);
				Если ЗначениеЗаполнено(ТипДокумента) Тогда
					Возврат ТипДокумента;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Док) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
			
			Возврат  ?( Док.метаданные().реквизиты.найти("Исправление")<>Неопределено и Док.исправление, "Исправление СФ", "Счет-фактура");
			
		ИначеЕсли ТипЗнч(Док)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Торг-12", ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляТоваров)=Ложь, "Торг-12"	, СтрокиНастрек[0].ПечатнаяФормаДляТоваров  ) ); 
		ИначеЕсли (ТипЗнч(Док)=Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда 
			//Настройка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Док.Организация);
			РНК = Док;
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", РНК.Организация));
			Если СтрокиНастрек.количество()=0 Тогда 
				ФормаДляУслуг = "Акт";
				ФормаДляТоваров = "Торг-12";
			иначе 
				ФормаДляТоваров =  ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляТоваров)=Ложь, "Торг-12" , СтрокиНастрек[0].ПечатнаяФормаДляТоваров);
				ФормаДляУслуг  =   ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляУслуг)=Ложь, "Акт"		, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  );
			КонецЕсли;	
			Возврат ?(РНК.товары.количество()=0 и ( (РНК.Услуги.Количество()>0)  ),  ФормаДляУслуг, ФормаДляТоваров);
		ИначеЕсли  (ТипЗнч(Док)=Тип("ДокументСсылка.ОтчетКомитентуОПродажах"))  Тогда 
			СтрокиНастрек = ТаблицаНастроекПечати.найтистроки(Новый Структура("Организация", Док.Организация));
			Возврат ?(  СтрокиНастрек.количество()=0,  "Акт", ?(ЗначениеЗаполнено(СтрокиНастрек[0].ПечатнаяФормаДляУслуг) =Ложь, "Акт"	, СтрокиНастрек[0].ПечатнаяФормаДляУслуг  ) ); 
			
		Иначе
			Возврат "";
		КонецЕсли;	
		
	КонецФункции
	
	Функция ПолучитьПараметрыСФ(Док) Экспорт
		
		ПараметрыСФ = Неопределено;
		ПолучитьПараметрыСчетаФактуры(Док, ВалютаРегламентированногоУчета, ПараметрыСФ);
		
		Возврат ПараметрыСФ;
		
	КонецФункции
	
	Функция ПредставлениеСуммы(Док, ПараметрыСФ) Экспорт
		
		СуммаДокумента = Док.СуммаДокумента;
		СуммаУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаУвеличение")<>Неопределено, Док.СуммаУвеличение, 0);
		СуммаУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаУменьшение")<>Неопределено, Док.СуммаУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаУвеличение")) и (СуммаУвеличение <> ПараметрыСФ.СуммаУвеличение) Тогда
				СуммаУвеличение = ПараметрыСФ.СуммаУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаУвеличение = 0, "", "+" + Формат(СуммаУвеличение, "ЧДЦ=2"));
			
			Если (ПараметрыСФ.свойство("СуммаУменьшение")) и ( СуммаУменьшение <> ПараметрыСФ.СуммаУменьшение) Тогда
				СуммаУменьшение = ПараметрыСФ.СуммаУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаУменьшение = 0, "", "-" + Формат(СуммаУменьшение, "ЧДЦ=2"));
			
			Если СуммаУвеличение = 0 И СуммаУменьшение = 0 Тогда
				Если СуммаДокумента <> ПараметрыСФ.СуммаДокумента Тогда
					СуммаДокумента = ПараметрыСФ.СуммаДокумента;
				КонецЕсли;
				
				Если СуммаДокумента <> 0 Тогда
					Стр1 = Формат(СуммаДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	Функция ПредставлениеСуммыНДС(Док, ПараметрыСФ) Экспорт
		
		СуммаНДСДокумента = ?(Док.метаданные().реквизиты.найти("СуммаНДС")<>Неопределено, Док.СуммаНДС, 0);
		Если Док.метаданные().реквизиты.найти("СуммаНДСДокумента")<>Неопределено и СуммаНДСДокумента = 0 Тогда
			СуммаНДСДокумента = Док.СуммаНДСДокумента;
		КонецЕсли;
		СуммаНДСУвеличение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУвеличение")<>Неопределено, Док.СуммаНДСУвеличение, 0);
		СуммаНДСУменьшение = ?(Док.метаданные().реквизиты.найти("СуммаНДСУменьшение")<>Неопределено, Док.СуммаНДСУменьшение,0);
		
		Стр1 = "";
		Стр2 = "";
		
		Если ПараметрыСФ <> Неопределено Тогда
			Если (ПараметрыСФ.свойство("СуммаНДСУвеличение")) и ( СуммаНДСУвеличение <> ПараметрыСФ.СуммаНДСУвеличение) Тогда
				СуммаНДСУвеличение = ПараметрыСФ.СуммаНДСУвеличение;
			КонецЕсли;
			Стр1 = ?(СуммаНДСУвеличение = 0, "", "+" + Формат(СуммаНДСУвеличение, "ЧДЦ=2"));
			
			Если  (ПараметрыСФ.свойство("СуммаНДСУменьшение")) и (  СуммаНДСУменьшение <> ПараметрыСФ.СуммаНДСУменьшение) Тогда
				СуммаНДСУменьшение = ПараметрыСФ.СуммаНДСУменьшение;
			КонецЕсли;
			Стр2 = ?(СуммаНДСУменьшение = 0, "", "-" + Формат(СуммаНДСУменьшение, "ЧДЦ=2"));
			
			Если СуммаНДСУвеличение = 0 И СуммаНДСУменьшение = 0 Тогда
				Если (ПараметрыСФ.свойство("СуммаНДСДокумента")) и  (СуммаНДСДокумента <> ПараметрыСФ.СуммаНДСДокумента) Тогда
					СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
				КонецЕсли;
				
				Если СуммаНДСДокумента <> 0 Тогда
					Стр1 = Формат(СуммаНДСДокумента, "ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Стр1) И НЕ ПустаяСтрока(Стр2) Тогда
			Возврат Стр1 + " " + Стр2;
		ИначеЕсли НЕ ПустаяСтрока(Стр1) Тогда
			Возврат Стр1;
		Иначе
			Возврат Стр2;
		КонецЕсли;
	КонецФункции
	
	//{ Подготовка временных таблиц для списка отправки документов...
	
		Функция ПодготовитьВТ_СпискаОтправкиДокументов(ТипыДокументов, Запрос) Экспорт
			
			МассивВременныхТаблиц= Новый Массив;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 ИЛИ ТипыДокументов = 2 ИЛИ ТипыДокументов = 5 Тогда
				ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц);
				ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 1 Тогда
				ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 2 Тогда
				ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов);
			КонецЕсли;
			
			Возврат МассивВременныхТаблиц;
			
		КонецФункции
		
		
		Процедура ПодготовитьВТ_СЧФ_Основная(Запрос, МассивВременныхТаблиц) Экспорт
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.Ссылка КАК Документ,
			|	Т.Организация КАК Продавец,
			|	Т.Контрагент КАК Покупатель,
			|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
			|	Т.СуммаНДС КАК СуммаНДСЗначение,
			|	Т.ВалютаДокумента КАК Валюта,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
			|	Т.ДокументОснование,
			|	ОтборОрганизации.ФормироватьУПД КАК ОрганизацияФормироватьУПД,
			|	Т.НаАванс
			|ПОМЕСТИТЬ ВТ_Основная
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (Т.Проведен)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	НЕ ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка,
			|	Т.Организация,
			|	Т.Контрагент,
			|	Т.СуммаДокумента,
			|	Т.СуммаНДС,
			|	Т.ВалютаДокумента,
			|	Т.Проведен,
			|	Т.Дата,
			|	Т.Номер,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
			|	Т.ДокументОснование,
			|	ОтборОрганизации.ФормироватьУПД,
			|	Т.НаАванс
			|ИЗ
			|	ОтборОрганизации КАК ОтборОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Т
			|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|			И (Т.Организация = ОтборОрганизации.Организация)
			|			И (НЕ Т.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|ГДЕ
			|	ОтборОрганизации.ОтпрНеПроведенные
			|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
			|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТИПЗНАЧЕНИЯ(ВТ_Основная.ДокументОснование) КАК ДокументОснованиеТип
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная";
			
			ТекстЗапросаКонтрагенты= "";
			РезультатЗапроса= Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка= РезультатЗапроса.Выбрать();
				РезультатЗапроса= Неопределено;
				
				Пока Выборка.Следующий() Цикл
					
					МетаданныеДокумента= Метаданные.НайтиПоТипу(Выборка.ДокументОснованиеТип);
					
					Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
						
						ТекстЗапросаКонтрагенты= ТекстЗапросаКонтрагенты + "
						|	
						|	ОБЪЕДИНИТЬ
						|	
						|ВЫБРАТЬ
						|	ВТ_Основная.Документ,
						|	Т.Контрагент,
						|	ОтборКонтрагенты.CounteragentID,
						|	ОтборКонтрагенты.ФормироватьУПД
						|ИЗ
						|	ВТ_Основная КАК ВТ_Основная
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+МетаданныеДокумента.ПолноеИмя()+" КАК Т
						|		ПО ВТ_Основная.ДокументОснование = Т.Ссылка
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
						|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)";
						
					КонецЕсли;
					
					МетаданныеДокумента= Неопределено;
					
				КонецЦикла;
			КонецЕсли;
			
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	NULL КАК Документ,
			|	NULL КАК Контрагент,
			|	NULL КАК CounteragentID,
			|	NULL КАК КонтрагентФормироватьУПД
			|ПОМЕСТИТЬ ВТ_Контрагенты
			|ГДЕ
			|	ЛОЖЬ "+ТекстЗапросаКонтрагенты+"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Основная.Документ,
			|	ВТ_Основная.Продавец,
			|	ВТ_Контрагенты.Контрагент КАК Покупатель,
			|	ВТ_Основная.СуммаДокументаЗначение,
			|	ВТ_Основная.СуммаНДСЗначение,
			|	ВТ_Основная.Валюта,
			|	ВТ_Основная.Проведен,
			|	ВТ_Основная.Дата,
			|	ВТ_Основная.Номер,
			|	ВТ_Основная.ID,
			|	ВТ_Основная.ДокументОснование,
			|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ДокументОснованиеID,
			|	ВТ_Контрагенты.CounteragentID,
			|	ЕСТЬNULL(ВТ_Контрагенты.КонтрагентФормироватьУПД, ВТ_Основная.ОрганизацияФормироватьУПД) КАК ФормироватьУПД,
			|	ВТ_Основная.НаАванс
			|ПОМЕСТИТЬ СЧФ_Основная
			|ИЗ
			|	ВТ_Основная КАК ВТ_Основная
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
			|		ПО ВТ_Основная.Документ = ВТ_Контрагенты.Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
			|		ПО (ВТ_Основная.ДокументОснование = ИдентификаторДокументаВДиадок.Объект)
			|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Основная
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_Контрагенты";
			
			Запрос.Выполнить();
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_УПД_СЧФДОП(Запрос, МассивВременныхТаблиц, ТипыДокументов)
				
				Запрос.Текст=
				"ВЫБРАТЬ
				|	СЧФ_Основная.Документ
				|ПОМЕСТИТЬ ВТ_ПодходящиеСЧФ
				|ИЗ
				|	СЧФ_Основная КАК СЧФ_Основная
				|ГДЕ
				|	СЧФ_Основная.ФормироватьУПД = &СЧФДОП
				|	И НЕ СЧФ_Основная.НаАванс
				|
				|СГРУППИРОВАТЬ ПО
				|	СЧФ_Основная.Документ
				|
				|ИМЕЮЩИЕ
				|	МИНИМУМ(ВЫБОР
				|			КОГДА СЧФ_Основная.ID = СЧФ_Основная.ДокументОснованиеID
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ) = ИСТИНА
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СЧФ_Основная.Документ,
				|	СЧФ_Основная.Продавец,
				|	СЧФ_Основная.Покупатель,
				|	СЧФ_Основная.СуммаДокументаЗначение,
				|	СЧФ_Основная.СуммаНДСЗначение,
				|	СЧФ_Основная.Валюта,
				|	СЧФ_Основная.Проведен,
				|	СЧФ_Основная.Дата,
				|	СЧФ_Основная.Номер,
				|	СЧФ_Основная.ID,
				|	СЧФ_Основная.CounteragentID,
				|	СЧФ_Основная.ДокументОснование,
				|	&СЧФДОП КАК ФункцияУПД,
				|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
				|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
				|	ЛОЖЬ КАК ЭтоСчет
				|ПОМЕСТИТЬ УПД_СЧФДОП
				|ИЗ
				|	ВТ_ПодходящиеСЧФ КАК ВТ_ПодходящиеСЧФ
				|		ЛЕВОЕ СОЕДИНЕНИЕ СЧФ_Основная КАК СЧФ_Основная
				|		ПО ВТ_ПодходящиеСЧФ.Документ = СЧФ_Основная.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_ПодходящиеСЧФ";
				
				Запрос.Выполнить();
				
				Если ТипыДокументов = 0 ИЛИ ТипыДокументов = 5 Тогда
					МассивВременныхТаблиц.Добавить("УПД_СЧФДОП");
				КонецЕсли;
				
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_СчетаФактуры(Запрос, МассивВременныхТаблиц, ТипыДокументов)
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СЧФ_Основная.Документ,
				|	СЧФ_Основная.Продавец,
				|	СЧФ_Основная.Покупатель,
				|	СЧФ_Основная.СуммаДокументаЗначение,
				|	СЧФ_Основная.СуммаНДСЗначение,
				|	СЧФ_Основная.Валюта,
				|	СЧФ_Основная.Проведен,
				|	СЧФ_Основная.Дата,
				|	СЧФ_Основная.Номер,
				|	СЧФ_Основная.ID,
				|	СЧФ_Основная.CounteragentID,
				|	ВЫБОР
				|		КОГДА СЧФ_Основная.ФормироватьУПД В (&СФ, &СФТОРГ12АКТ)
				|			ТОГДА &СФ
				|		КОГДА НЕ СЧФ_Основная.НаАванс
				|				И СЧФ_Основная.ФормироватьУПД В (&СЧФДОП, &СЧФ, &СЧФ_ДОП)
				|			ТОГДА &СЧФ
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ФункцияУПД,
				|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
				|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
				|	ЛОЖЬ КАК ЭтоСчет
				|ПОМЕСТИТЬ СчетаФактуры_СчетФактураВыданный
				|ИЗ
				|	СЧФ_Основная КАК СЧФ_Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО СЧФ_Основная.Документ = УПД_СЧФДОП.Документ
				|ГДЕ
				|	УПД_СЧФДОП.Документ ЕСТЬ NULL
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ СЧФ_Основная";
				
				Запрос.Выполнить();
				
				МассивВременныхТаблиц.Добавить("СчетаФактуры_СчетФактураВыданный");
				
		КонецПроцедуры
		
		
		Процедура ПодготовитьВТ_Накладные(Запрос, МассивВременныхТаблиц, ТипыДокументов)
			
			ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц);
			ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц);
			
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_РеализацияТоваровУслуг(Запрос, МассивВременныхТаблиц)
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Т.Ссылка КАК Документ,
				|	Т.Организация КАК Продавец,
				|	Т.Контрагент КАК Покупатель,
				|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
				|	Т.ВалютаДокумента КАК Валюта,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ФункцияУПД,
				|	ОтборОрганизации.ОтпрНеПроведенные КАК ОтпрНеПроведенные
				|ПОМЕСТИТЬ ВТ_Основная
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (Т.Проведен)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|ГДЕ
				|	НЕ ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Ссылка,
				|	Т.Организация,
				|	Т.Контрагент,
				|	Т.СуммаДокумента,
				|	Т.ВалютаДокумента,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ,
				|	ОтборОрганизации.ОтпрНеПроведенные
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (НЕ Т.ПометкаУдаления)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|ГДЕ
				|	ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Документ,
				|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС
				|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВТ_Основная.Документ КАК Документ,
				|		Т.СуммаНДС КАК СуммаНДС
				|	ИЗ
				|		ВТ_Основная КАК ВТ_Основная
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК Т
				|			ПО ВТ_Основная.Документ = Т.Ссылка
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВТ_Основная.Документ,
				|		Т.СуммаНДС
				|	ИЗ
				|		ВТ_Основная КАК ВТ_Основная
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК Т
				|			ПО ВТ_Основная.Документ = Т.Ссылка) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_Основная.Документ
				|ПОМЕСТИТЬ ВТ_ЕстьСЧФ
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
				|			И (СЧФ.Проведен)
				|ГДЕ
				|	НЕ ВТ_Основная.ОтпрНеПроведенные
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_Основная.Документ
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО ВТ_Основная.Документ = СЧФ.ДокументОснование
				|			И (НЕ СЧФ.ПометкаУдаления)
				|ГДЕ
				|	ВТ_Основная.ОтпрНеПроведенные
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	ВТ_Основная.Продавец,
				|	ВТ_Основная.Покупатель,
				|	ВТ_Основная.СуммаДокументаЗначение,
				|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
				|	ВТ_Основная.Валюта,
				|	ВТ_Основная.Проведен,
				|	ВТ_Основная.Дата,
				|	ВТ_Основная.Номер,
				|	ВТ_Основная.ID,
				|	ВТ_Основная.ФункцияУПД,
				|	ВТ_Основная.CounteragentID,
				|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
				|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
				|	ЛОЖЬ КАК ЭтоСчет
				|ПОМЕСТИТЬ Накладные_РеализацияТоваровУслуг
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
				|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕстьСЧФ КАК ВТ_ЕстьСЧФ
				|		ПО ВТ_Основная.Документ = ВТ_ЕстьСЧФ.Документ
				|ГДЕ
				|	(ВТ_ЕстьСЧФ.Документ ЕСТЬ НЕ NULL 
				|			ИЛИ ВТ_Основная.ФормироватьУПД <> &СЧФДОП
				|			ИЛИ ВТ_Основная.ФормироватьУПД = &СЧФДОП
				|				И ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) = 0)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_Основная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
				
				Запрос.Выполнить();
				
				МассивВременныхТаблиц.Добавить("Накладные_РеализацияТоваровУслуг");
				
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ВозвратТоваровПоставщику(Запрос, МассивВременныхТаблиц)
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Т.Ссылка КАК Документ,
				|	Т.Организация КАК Продавец,
				|	Т.Контрагент КАК Покупатель,
				|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
				|	Т.ВалютаДокумента КАК Валюта,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ФункцияУПД
				|ПОМЕСТИТЬ ВТ_Основная
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (Т.Проведен)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО (Т.Ссылка = СЧФ.ДокументОснование)
				|			И (СЧФ.Проведен)
				|ГДЕ
				|	НЕ ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
				|	И (СЧФ.ДокументОснование ЕСТЬ НЕ NULL 
				|			ИЛИ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) <> &СЧФДОП)
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Ссылка,
				|	Т.Организация,
				|	Т.Контрагент,
				|	Т.СуммаДокумента,
				|	Т.ВалютаДокумента,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (НЕ Т.ПометкаУдаления)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО (Т.Ссылка = СЧФ.ДокументОснование)
				|			И (НЕ СЧФ.ПометкаУдаления)
				|ГДЕ
				|	ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
				|	И (СЧФ.ДокументОснование ЕСТЬ НЕ NULL 
				|			ИЛИ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) <> &СЧФДОП)
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	СУММА(Т.СуммаНДС) КАК СуммаНДС
				|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК Т
				|		ПО ВТ_Основная.Документ = Т.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_Основная.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	ВТ_Основная.Продавец,
				|	ВТ_Основная.Покупатель,
				|	ВТ_Основная.СуммаДокументаЗначение,
				|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
				|	ВТ_Основная.Валюта,
				|	ВТ_Основная.Проведен,
				|	ВТ_Основная.Дата,
				|	ВТ_Основная.Номер,
				|	ВТ_Основная.ID,
				|	ВТ_Основная.ФункцияУПД,
				|	ВТ_Основная.CounteragentID,
				|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
				|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
				|	ЛОЖЬ КАК ЭтоСчет
				|ПОМЕСТИТЬ Накладные_ВозвратТоваровПоставщику
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
				|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_Основная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
				
				Запрос.Выполнить();
				
				МассивВременныхТаблиц.Добавить("Накладные_ВозвратТоваровПоставщику");
				
		КонецПроцедуры
		
		Процедура ПодготовитьВТ_Накладные_ОтчетКомитентуОПродажах(Запрос, МассивВременныхТаблиц)
				
				Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Т.Ссылка КАК Документ,
				|	Т.Организация КАК Продавец,
				|	Т.Контрагент КАК Покупатель,
				|	Т.СуммаДокумента КАК СуммаДокументаЗначение,
				|	Т.ВалютаДокумента КАК Валюта,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") КАК ID,
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) КАК ФормироватьУПД,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ФункцияУПД
				|ПОМЕСТИТЬ ВТ_Основная
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (Т.Проведен)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО (Т.Ссылка = СЧФ.ДокументОснование)
				|			И (СЧФ.Проведен)
				|ГДЕ
				|	НЕ ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
				|	И (СЧФ.ДокументОснование ЕСТЬ НЕ NULL 
				|			ИЛИ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) <> &СЧФДОП)
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Ссылка,
				|	Т.Организация,
				|	Т.Контрагент,
				|	Т.СуммаДокумента,
				|	Т.ВалютаДокумента,
				|	Т.Проведен,
				|	Т.Дата,
				|	Т.Номер,
				|	ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """"),
				|	ОтборКонтрагенты.CounteragentID,
				|	ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД),
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&СЧФДОП, &ДОП, &СЧФ_ДОП)
				|			ТОГДА &ДОП
				|		КОГДА ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) В (&ТОРГ12АКТ, &СФТОРГ12АКТ)
				|			ТОГДА &ТОРГ12АКТ
				|		ИНАЧЕ """"
				|	КОНЕЦ
				|ИЗ
				|	ОтборОрганизации КАК ОтборОрганизации
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах КАК Т
				|		ПО (Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
				|			И (Т.Организация = ОтборОрганизации.Организация)
				|			И (НЕ Т.ПометкаУдаления)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборКонтрагенты КАК ОтборКонтрагенты
				|		ПО (Т.Контрагент = ОтборКонтрагенты.Контрагент)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ИдентификаторДокументаВДиадок
				|		ПО (Т.Ссылка = ИдентификаторДокументаВДиадок.Объект)
				|			И (ИдентификаторДокументаВДиадок.Свойство = &ИдентификаторДокументаВДиадок)
				|		ЛЕВОЕ СОЕДИНЕНИЕ УПД_СЧФДОП КАК УПД_СЧФДОП
				|		ПО (Т.Ссылка = УПД_СЧФДОП.ДокументОснование)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СЧФ
				|		ПО (Т.Ссылка = СЧФ.ДокументОснование)
				|			И (НЕ СЧФ.ПометкаУдаления)
				|ГДЕ
				|	ОтборОрганизации.ОтпрНеПроведенные
				|	И УПД_СЧФДОП.ДокументОснование ЕСТЬ NULL 
				|	И (СЧФ.ДокументОснование ЕСТЬ НЕ NULL 
				|			ИЛИ ЕСТЬNULL(ОтборКонтрагенты.ФормироватьУПД, ОтборОрганизации.ФормироватьУПД) <> &СЧФДОП)
				|	И (ЕСТЬNULL(ИдентификаторДокументаВДиадок.Значение, """") = """"
				|			ИЛИ ИдентификаторДокументаВДиадок.Значение ПОДОБНО ""усл:%"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	СУММА(Т.СуммаНДСВознаграждения) КАК СуммаНДС
				|ПОМЕСТИТЬ ВТ_СуммаНДСЗначение
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах.Товары КАК Т
				|		ПО ВТ_Основная.Документ = Т.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_Основная.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Основная.Документ,
				|	ВТ_Основная.Продавец,
				|	ВТ_Основная.Покупатель,
				|	ВТ_Основная.СуммаДокументаЗначение,
				|	ЕСТЬNULL(ВТ_СуммаНДСЗначение.СуммаНДС, 0) КАК СуммаНДСЗначение,
				|	ВТ_Основная.Валюта,
				|	ВТ_Основная.Проведен,
				|	ВТ_Основная.Дата,
				|	ВТ_Основная.Номер,
				|	ВТ_Основная.ID,
				|	ВТ_Основная.ФункцияУПД,
				|	ВТ_Основная.CounteragentID,
				|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
				|	"""" КАК СостояниеОтправкиДополнительныхВПФ,
				|	ЛОЖЬ КАК ЭтоСчет
				|ПОМЕСТИТЬ Накладные_ОтчетКомитентуОПродажах
				|ИЗ
				|	ВТ_Основная КАК ВТ_Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДСЗначение КАК ВТ_СуммаНДСЗначение
				|		ПО ВТ_Основная.Документ = ВТ_СуммаНДСЗначение.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_Основная
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТ_СуммаНДСЗначение";
				
				Запрос.Выполнить();
				
				МассивВременныхТаблиц.Добавить("Накладные_ОтчетКомитентуОПродажах");
				
		КонецПроцедуры
		
	//} Подготовка временных таблиц для списка отправки документов...
	
//} ФОРМИРОВАНИЕ СПИСКА ВЫГРУЗКИ

//////////////////////////////////////////////////////
//функции генерации структуры для ФУФ счета-фактуры
///////////////////////////////////////////////////////

Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

Функция ЭтоПБОЮЛ(Организация)
	
	Возврат ?(ЗначениеЗаполнено(Организация) , (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо), Ложь) ;
	
КонецФункции

Функция ПолучитьСФОснованиеДляИСФДиадок(ИСФ)  Экспорт  
    результат = Новый Структура;
	
	ДокОснование = ИСФ.ДокументОснование;
	Если ДокОснование.Видоперации =перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда 
		Докоснование = ДокОснование.ДокументРеализации
	иначе 	
		пока (ТипЗнч(Докоснование) = Тип("ДокументСсылка.КорректировкаРеализации")) и (ДокОснование.ВидОперации = перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки) цикл 
			ДокОснование = ДокОснование.ДокументРеализации
		КонецЦикла;
	КонецЕсли;	
	
	результат.Вставить("ПервичныйДокументОснование",  ДокОснование);
	//ищем СФ
	запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	               |	СчетФактураВыданныйДокументыОснования.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданныйДокументыОснования
	               |ГДЕ
	               |	СчетФактураВыданныйДокументыОснования.ПометкаУдаления = Ложь
	               |	И СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("Документоснование", ДокОснование);
	выборка = запрос.Выполнить().Выбрать();
	Если выборка.Следующий() Тогда 
		Возврат выборка.ссылка;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

Функция СФОтправлена(ДокСсылка)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСсылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокОснование";
	ЗапросСФ.УстановитьПараметр("ДокОснование", ДокСсылка);
	ВыборкаСФ = ЗапросСФ.Выполнить().Выбрать();
	Пока ВыборкаСФ.Следующий() Цикл
		DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ВыборкаСФ.ДокСсылка);
		Если ЗначениеЗаполнено(DocumentId) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьПоследнееИсправление(КоррСтарт, ПоследнееОтправленное) Экспорт
	текКор = КоррСтарт;
	
	Пока Истина Цикл
		// получаем следующего кандидата, проверям его
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокСсылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.ДокументРеализации = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", текКор);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Проверяем кандидата
			Если ПоследнееОтправленное И НЕ СФОтправлена(Выборка.ДокСсылка) Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
		текКор = Выборка.ДокСсылка;
	КонецЦикла;
	
	Возврат текКор;
КонецФункции

Функция ПолучитьДочернееИсправление(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокССылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСчетФактуруПоКорректировкеРеализации(ДокССылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокСчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.ДокументОснование = &ДокСсылка";
	Запрос.УстановитьПараметр("ДокСсылка", ДокССылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокСчетФактура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНеотправленнуюКорректировку(ДокСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка ДокССылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокСсылка
	|	И Док.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ СФОтправлена(Выборка.ДокССылка) Тогда
			Возврат Выборка.ДокССылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьКорректировкуОбъект(ТипНовогоДокумента, КорректировкаРеализацииОснование) Экспорт
	КорректировкаОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	Если ТипНовогоДокумента = "InvoiceRevision" ИЛИ ТипНовогоДокумента = "InvoiceCorrectionRevision" Тогда
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		КорректировкаОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	КорректировкаОбъект.Заполнить(КорректировкаРеализацииОснование);
	
	Возврат КорректировкаОбъект;
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// функции генерации сотруктуры для генерации торг-12 или акта выполненных работ
//////////////////////////////////////////////////////////////////////////////

Функция ПолучитьОписаниеОрганизацииДляСчетаНаОплату(Контрагент, датаОперации, БанковскийСчет = Неопределено) Экспорт 
	СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации_ДД(Контрагент,датаОперации,  БанковскийСчет);
	Возврат ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
КонецФункции	

Функция ПолучитьРеквизитыОрганизацииДляСчетаНаОплату(контрагент, ДатаОперации)  Экспорт 
	  СведенияОбОрганизации 	  = ПолучитьСведенияОбОрганизации_ДД(Контрагент,датаОперации);
      Возврат Новый Структура("Наименование, ИНН, КПП", СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ИНН, СведенияОбОрганизации.КПП);
КонецФункции

Функция ПолучитьБанковскийСчетПоДокументу(ДокТоварный) Экспорт 
	БанковскийСчетОрганизации = ?(ДокТоварный.Метаданные().Реквизиты.найти("БанковскийСчетОрганизации")=Неопределено, Неопределено, ДокТоварный.БанковскийСчетОрганизации);
	Если (ДокТоварный.Метаданные().Реквизиты.найти("СтруктурнаяЕдиница")<>Неопределено) и (ТипЗнч(ДокТоварный.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.СтруктурнаяЕдиница;
	ИначеЕсли (ДокТоварный.Метаданные().Реквизиты.найти("Банковскийсчет")<>Неопределено) и (ТипЗнч(ДокТоварный.Банковскийсчет) = Тип("СправочникСсылка.БанковскиеСчета")) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.Банковскийсчет;
	КонецЕсли;	 
	Если (ЗначениеЗаполнено(БанковскийСчетОрганизации) = Ложь) и ЗначениеЗаполнено(ДокТоварный.Организация.ОсновнойБанковскийСчет) Тогда 
		 БанковскийСчетОрганизации = ДокТоварный.Организация.ОсновнойБанковскийСчет
	 КонецЕсли;	
	 Возврат БанковскийСчетОрганизации;
КонецФункции


Функция ПолучитьСведенияОбОрганизации_ДД(Организация, Дата, Банковскийсчет=Неопределено) 
	 Возврат СведенияОЮрФизЛице(Организация, Дата,, Банковскийсчет);
 КонецФункции	
 
 Функция ПолучитьПредставлениеАдресаДляДиадок(записьрегистра) Экспорт 
	Возврат ПолучитьПредставлениеАдреса(записьрегистра);
КонецФункции	

 Функция ПолучитьВидЮрАдресаКонтрагента() Экспорт 
	 Возврат Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
КонецФункции

Процедура ЗаполнитьСтруктуруАдреса(AddressInfo, ЮрФизЛицо, ИспользоватьЮрАдрес = Ложь, АдресСтрокой = "") Экспорт
	
	Если ЗначениеЗаполнено(АдресСтрокой) Тогда
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо,,АдресСтрокой);
		
	Иначе
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			ПринадлежностьАдреса = "Организации";
		Иначе
			ПринадлежностьАдреса = "Контрагента";
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[?(ИспользоватьЮрАдрес, "ЮрАдрес", "ФактАдрес") + ПринадлежностьАдреса];
		
		ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьAddressInfo(AddressInfo, ЮрФизЛицо, ВидАдреса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруГрузоПолучателяОтправителя(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, АдресСтрокой = "") Экспорт 
	СведенияОбОрганизации =  ПолучитьСведенияОбОрганизации_ДД(ЮрФизЛицо, ДатаДокумента);
 	 Если стрДлина(СведенияОбОрганизации.ИНН)<>12 Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ЭтоИП = Ложь;
	Иначе 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
		  //для нашей организации - данные берем из нормализованного представления физлица
		  НаименованиеОрганизации  = юрФизЛицо.наименованиеПолное;
		Иначе 
		  НаименованиеОрганизации  = СведенияОбОрганизации.ПолноеНаименование 
		КонецЕсли;	  
		ЭтоИП = Истина;
	КонецЕсли;

	OrganizationInfo.Name = НаименованиеОрганизации;
    OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	OrganizationInfo.Ссылка = ЮрФизЛицо;
	OrganizationInfo.SameAsSellerOrBuyer = Ложь;
	
    ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, Ложь, АдресСтрокой);

КонецПроцедуры	

Процедура ЗаполнитьСтруктурируЮрФизЛица(OrganizationInfo, ЮрФизЛицо, ДатаДокумента, БанковскийСчетОрганизации=Неопределено,  ЮрАдрес, АдресДляСФ = Ложь, АдресСтрокой = "")  Экспорт

	СведенияОбОрганизации = ПолучитьСведенияОбОрганизации_ДД(ЮрФизЛицо, ДатаДокумента,  БанковскийСчетОрганизации);

	Если стрДлина(СведенияОбОрганизации.ИНН)<>12 Тогда 
		НаименованиеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
		ЭтоИП = Ложь;
	Иначе 
		Если типЗнч(юрФизЛицо) = тип("СправочникСсылка.Организации") Тогда 
		  //для нашей организации - данные берем из нормализованного представления физлица
		  НаименованиеОрганизации  = юрФизЛицо.наименованиеПолное;
		Иначе 
		  НаименованиеОрганизации  = СведенияОбОрганизации.ПолноеНаименование 
		КонецЕсли;	  
		ЭтоИП = Истина;
	КонецЕсли;
	
	OrganizationInfo.Name = НаименованиеОрганизации;
	OrganizationInfo.Inn  = СведенияОбОрганизации.ИНН;
	Если ЗначениеЗаполнено(ЮрФизЛицо.ЮрФизЛицо) Тогда
		OrganizationInfo.Kpp  = СведенияОбОрганизации.КПП;
	Иначе
		OrganizationInfo.Kpp  = ЮрФизЛицо.КПП;
	КонецЕсли;
	
	ЗаполнитьСтруктуруАдреса(OrganizationInfo.Address, ЮрФизЛицо, ЮрАдрес, АдресСтрокой);
	OrganizationInfo.IsSoleProprietor  =  ЭтоИП;
	
	Если АдресДляСФ=Ложь Тогда
		OrganizationInfo.Okpo  = СведенияОбОрганизации.КодПоОкпо;
		
		Если найти(СведенияОбОрганизации.Телефоны, "факс:")>0 Тогда 
			телефон = СокрЛП(лев(СведенияОбОрганизации.Телефоны, найти(СведенияОбОрганизации.Телефоны, "факс:")-1));
			Если прав(телефон,1) = ","  Тогда
				телефон = лев(телефон, стрДлина(телефон)-1);
			КонецЕсли;
			факс = СокрЛП(прав(СведенияОбОрганизации.Телефоны, СтрДлина(СведенияОбОрганизации.Телефоны) - найти(СведенияОбОрганизации.Телефоны, "факс:")- 5));
		Иначе 
			Телефон =СведенияОбОрганизации.Телефоны;
			Факс = "";
		КонецЕсли;	
		OrganizationInfo.Phone = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Телефон);
		OrganizationInfo.Fax   = Модуль_ЗаполнениеКонтента.СократитьПредставлениеТелефона(Факс) ;
		OrganizationInfo.BankAccountNumber = ?(ЗначениеЗаполнено(СведенияОбОрганизации.НомерСчета),  СведенияОбОрганизации.НомерСчета, "") ;
		OrganizationInfo.BankName  =   ?(ЗначениеЗаполнено(СведенияОбОрганизации.Банк), СведенияОбОрганизации.Банк.наименование, "");
		OrganizationInfo.BankId =  ?(ЗначениеЗаполнено(СведенияОбОрганизации.БИК),  СокрЛП(СведенияОбОрганизации.БИК), "");
	КонецЕсли;
	OrganizationInfo.вставить("Ссылка",  ЮрФизЛицо);
//	OrganizationInfo.Department  =  "";
КонецПроцедуры	

Процедура Заполнить_ExtendedOrganizationInfo(ExtendedOrganizationInfo, ЮрФизЛицо, ДатаДокумента, ИспользоватьЮрАдрес, БанковскийСчет= Неопределено, АдресСтрокой = "") Экспорт
	
	СведенияОбОрганизации= ПолучитьСведенияОбОрганизации_ДД(ЮрФизЛицо, ДатаДокумента, БанковскийСчет);
	СведенияОбОрганизации.Вставить("Ссылка", ЮрФизЛицо);
	
	ЭтоОрганизация= ТипЗнч(СведенияОбОрганизации.Ссылка) = Тип("СправочникСсылка.Организации");
	ЭтоИП= СтрДлина(СведенияОбОрганизации.ИНН) = 12;
	
	Если ЭтоИП И ЭтоОрганизация Тогда
		// Для нашей организации, полное наименование берем из нормализованного представления физлица
		СведенияОбОрганизации.ПолноеНаименование= СведенияОбОрганизации.Ссылка.ИндивидуальныйПредприниматель.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП) И НЕ ЗначениеЗаполнено(СведенияОбОрганизации.Ссылка.ЮрФизЛицо) Тогда
		СведенияОбОрганизации.КПП= СведенияОбОрганизации.Ссылка.КПП;
	КонецЕсли;
	
	ExtendedOrganizationInfo.Name= 					СведенияОбОрганизации.ПолноеНаименование;
	ExtendedOrganizationInfo.Inn=  					СведенияОбОрганизации.ИНН;
	ExtendedOrganizationInfo.Kpp=  					СведенияОбОрганизации.КПП;
	ExtendedOrganizationInfo.Okpo= 					СведенияОбОрганизации.КодПоОкпо;
	ExtendedOrganizationInfo.CorrespondentAccount=	СведенияОбОрганизации.КоррСчет;
	
	ExtendedOrganizationInfo.BankAccountNumber= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.НомерСчета);
	ExtendedOrganizationInfo.BankName=   		ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.Банк);
	ExtendedOrganizationInfo.BankId=  			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Значение1C_В_СтрокаCOM(СведенияОбОрганизации.БИК);
	ExtendedOrganizationInfo.Phone= 			ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента").ПредставлениеТелефона(СведенияОбОрганизации.Телефоны, "Телефон", 255);
	
	ExtendedOrganizationInfo.Type= 				?(ЭтоИП, "IndividualEntity", "LegalEntity");
	
	ЗаполнитьСтруктуруАдреса(ExtendedOrganizationInfo.Address, СведенияОбОрганизации.Ссылка, ИспользоватьЮрАдрес, АдресСтрокой);	
	
	ExtendedOrganizationInfo.Вставить("Ссылка", СведенияОбОрганизации.Ссылка);
	
КонецПроцедуры	

Функция ПолучитьСтруктуруОснования(ДокСсылка, ЭтоАкт = Ложь, ЭтоУПД = Ложь)  Экспорт 
	
	ДоговорКонтрагента = ДокСсылка.ДоговорКонтрагента;
	
	Ground = Новый Структура;
	Ground.Вставить("GroundName", 	"");
	Ground.Вставить("GroundNumber", "");
	Ground.Вставить("GroundDate", 	"");
	Ground.Вставить("Основание", 	"");
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ЭтоАкт = Ложь
			И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			И НЕ ДокСсылка.Метаданные().Реквизиты.Найти("Сделка") = Неопределено 
			И ТипЗнч(ДокСсылка.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ЗначениеЗаполнено(ДокСсылка.Сделка) Тогда
			
			НомерЗаказаПокупателя=	ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").ПолучитьНомерНаПечатьДиадок(ДокСсылка.Сделка);
			
			Если ЭтоУПД Тогда
				ПредставлениеЗаказаПокупателя= ДокСсылка.Сделка.Метаданные().Представление();
			Иначе
				ПредставлениеЗаказаПокупателя= ДокСсылка.Сделка.Метаданные().Представление() + " № " + НомерЗаказаПокупателя + " от " + Формат(ДокСсылка.Сделка.Дата, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
			Ground.Вставить("GroundName", 	ПредставлениеЗаказаПокупателя);
			Ground.Вставить("GroundNumber", НомерЗаказаПокупателя);
			Ground.Вставить("GroundDate", 	ДокСсылка.Сделка.Дата);
			Ground.Вставить("Основание", 	ДокСсылка.Сделка);
			
		Иначе
			
			Если ЭтоУПД Тогда
				ПредставлениеДоговора= "Договор";
			Иначе
				ПредставлениеДоговора= ДоговорКонтрагента.Наименование;
			КонецЕсли;
			
			Ground.Вставить("GroundName", 	ПредставлениеДоговора);
			Ground.Вставить("GroundNumber", ДоговорКонтрагента.Номер);
			Ground.Вставить("GroundDate", 	ДоговорКонтрагента.Дата);
			Ground.Вставить("Основание", 	ДоговорКонтрагента);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат  Ground;
	
КонецФункции
 
Функция ПолучитьСтруктуруБанковскогоСчета(Организация, БанковскийСчетОрганизации)  Экспорт 
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанкССылка = БанковскийСчетОрганизации;
		Если БанкСсылка<>Неопределено Тогда 
			мБанк = ?(НЕ ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов), БанкСсылка.Банк, БанкСсылка.БанкДляРасчетов);
			мГородБанка = мБанк.Город;
			мКоррСчет   = мБанк.КоррСчет;
			мБИК        = мБанк.Код;
			мНомерСчета = ?(БанкСсылка.БанкДляРасчетов.Пустая(), БанкСсылка.НомерСчета,БанкСсылка.Банк.КоррСчет);
			
			Если ПустаяСтрока(БанкСсылка.ТекстКорреспондента) Тогда
				мТекстПолучателя = Организация.НаименованиеПолное;
				Если ЗначениеЗаполнено(БанкСсылка.БанкДляРасчетов) Тогда
					мТекстПолучателя = мТекстПолучателя + " р/с " + БанкСсылка.НомерСчета + " в " + БанкСсылка.Банк + " " + БанкСсылка.Банк.Город;
				КонецЕсли;	
			Иначе
				мТекстПолучателя = БанкСсылка.ТекстКорреспондента;
			КонецЕсли;		
			
		КонецЕсли;
		Возврат Новый Структура ("Банк,БИК,КоррСчет,ГородБанка,НомерМсета,ТекстПолучателя,НомерСчета",мБанк,мБИК,мКоррСчет,мГородБанка,мНомерСчета,мТекстПолучателя,мНомерСчета);
	иначе 
		Возврат Неопределено
	КонецЕсли;		
КонецФункции


Функция ПолучитьПодразделениеИзДокумента(ДокСсылка)  Экспорт
	
	ПодразделениеСсылка = ДокСсылка.Подразделение;

	Возврат подразделениеССылка.наименование;
КонецФункции

Функция ПолучитьПредставлениеХарактеристикиИСерии(Выборка) Экспорт

	Возврат "";

КонецФункции

Функция Документ_Организация(Документ) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Документ_Организация(Документ);
	
КонецФункции

Функция Организация_КПП(Организация) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").Организация_КПП(Организация);
	
КонецФункции

Функция ПолучитьДатуНомерВходящейНакладной(ДокСсылка) Экспорт 
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящейНакладной(ДокСсылка)
	
КонецФункции

Функция ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка) Экспорт 
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьДатуНомерВходящегоСчетаФактуры(ДокСсылка)
	
КонецФункции

Процедура УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящейНакладной(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
	
КонецПроцедуры

Процедура УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов) Экспорт 
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").УстановитьДатуНомерВходящегоСчетаФактуры(ДокСсылка, ДатаВходящегоДокумента, НомерВходящегоДокумента, СписокОтличающихсяРеквизитов);
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// функции для работы с формами 1С
//////////////////////////////////////////////////////////

Функция ПолучитьФормуВыбораДоговораКонтрагента(Элемент,Организация,ДатаДокумента,Контрагент,ВидыДоговоров,ДоговорКонтрагента) Экспорт
	
	ФрмВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);
	ФрмВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговоров;
	ФрмВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	
	ФрмВыбора.СправочникСписок.Отбор.Организация.Значение                            = Организация;
	ФрмВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
	ФрмВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
	ФрмВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
    	
	ФрмВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	Возврат ФрмВыбора;	
КонецФункции

/////////////////////////////////////////////////////////////
// функции создания новых доков на основании данных ДД
/////////////////////////////////////////////////////////////

Функция СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, видОперации, ЗаполнениеГТД = Ложь) Экспорт
	Если видОперации = "ВозвратОтПокупателя" Тогда 
		ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	//	ДокОбъект.ВидОперации = перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
ИначеЕсли видОперации = "ПоступлениеДопРасходов" Тогда
	    ДокОбъект = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
	Иначе 	
		ДокОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	КонецЕсли;	
	Если видОперации <> "ВозвратОтПокупателя" Тогда 
		ДокОбъект.ДатаВходящегоДокумента = параметры.ДатаВходящегоДокумента;
		ДокОбъект.НомерВходящегоДокумента = параметры.НомерВходящегоДокумента;
	КонецЕсли;
	
	ДокОбъект.ДоговорКонтрагента= параметры.ДоговорКонтрагента;
	ДокОбъект.ВалютаДокумента= ДокОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ДокОбъект.КратностьВзаиморасчетов= 1;
	
	//заполним склад и подразделение
	Если ДокОбъект.Метаданные().Реквизиты.Найти("СкладОрдер")<>Неопределено Тогда
		ДокОбъект.ВидПоступления = перечисления.ВидыПоступленияТоваров.НаСклад;
		ДокОбъект.СкладОрдер = параметры.Склад;
	КонецЕсли;	
	
	Если ДокОбъект.Метаданные().Реквизиты.найти("Подразделение")<>Неопределено Тогда 
		ДокОбъект.Подразделение = параметры.Подразделение;
	КонецЕсли;	

	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
		
		//Заполним договор
		мСтруктураПараметровДляПолученияДоговора =  ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
		ПриИзмененииЗначенияКонтрагента_Новая(ДокОбъект, мСтруктураПараметровДляПолученияДоговора);
	КонецЕсли;
	Если ВидОперации = "ПоступлениеДопРасходов"  Тогда
		ДокОбъект.Сумма = ?(СуммаВключаетНДС,ЭДОбъект.total,ЭДОбъект.total-ЭДОбъект.vat);
		ДокОбъект.СуммаНДС = ЭДОбъект.vat;
	Иначе
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для каждого стр Из ТабличнаяЧасть Цикл
			Если стр.Тип = "Товар" Тогда
				стрОбъект = ДокОбъект.Товары.Добавить();
				стрОбъект.ЕдиницаИзмерения = стр.ЕдиницаИзмерения;
				стрОбъект.Коэффициент = 1;
			Иначе
				стрОбъект = ДокОбъект.Услуги.Добавить();
				стрОбъект.Содержание = стр.НоменклатураИзЭД;
				стрОбъект.Номенклатура = стр.Номенклатура;
				Если НЕ ЗначениеЗаполнено(стрОбъект.СтатьяЗатрат) Тогда
					стрОбъект.СтатьяЗатрат = стрОбъект.Номенклатура.СтатьяЗатрат;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(стрОбъект.НоменклатурнаяГруппа) Тогда
					стрОбъект.НоменклатурнаяГруппа = стрОбъект.Номенклатура.НоменклатурнаяГруппаЗатрат;
				КонецЕсли;
				
				Если ДокОбъект.Метаданные().Реквизиты.найти("Подразделение")<>Неопределено Тогда 
					стрОбъект.Подразделение = ДокОбъект.Подразделение;
				КонецЕсли;
				
			КонецЕсли;
			
			стрОбъект.Номенклатура = стр.Номенклатура;
			стрОбъект.Количество = стр.Количество;
			стрОбъект.Цена = стр.Цена;
			стрОбъект.Сумма = стр.Сумма;
			стрОбъект.СуммаНДС = стр.СуммаНДС;
			стрОбъект.СтавкаНДС = стр.СтавкаНДС;
		КонецЦикла;
	КонецЕсли;
	КонецЕсли;
	
	ДокОбъект.СуммаВключаетНДС = СуммаВключаетНДС;
	ДокОбъект.УчитыватьНДС = Истина;
	
	Возврат ДокОбъект;
КонецФункции

Функция СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
	ДокОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	//ДокОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	
	ДокОбъект.КратностьВзаиморасчетов = 1;
	
	// Заполнение возможных полей
	Если стВероятныеПоля.Организация = Неопределено Тогда
		Сообщить("Организация в системе Диадок: """ + ЭДОбъект.Organization.Name + """, ИНН/КПП: " + ЭДОбъект.Organization.Inn + "/" + ЭДОбъект.Organization.Kpp + " не ассоциирована с организацияей в 1С");
	Иначе
		ДокОбъект.Организация = стВероятныеПоля.Организация;
	КонецЕсли;
	Если стВероятныеПоля.Контрагент = Неопределено Тогда
		Сообщить("Контрагент в системе Диадок: """ + ЭДОбъект.counterAgent.Name + """, ИНН/КПП: " + ЭДОбъект.counterAgent.Inn + "/" + ЭДОбъект.counterAgent.Kpp + " не ассоциирован с контрагентом в 1С");
	Иначе
		ДокОбъект.Контрагент = стВероятныеПоля.Контрагент;
	КонецЕсли;
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//Если ДокОбъект.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
	//	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	//КонецЕсли;
	
	СтруктураПараметровДляПолученияДоговора=	Новый Структура();
	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокВидовДоговоров);
	
	ПриИзмененииЗначенияКонтрагента_Новая(ДокОбъект,СтруктураПараметровДляПолученияДоговора);
	
	Возврат ДокОбъект;
КонецФункции

Процедура ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения) Экспорт
	
	ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ЗаполнитьРеквизиты_СчетФактураПолученный(ДокументОбъект, Document, ПараметрыЗаполнения);
	
КонецПроцедуры

Функция СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураПолученный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Функция СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").СоздатьДокумент_СчетФактураВыданный(Document, ДокументОснование, ПараметрыЗаполнения);
	
КонецФункции

Процедура УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура) Экспорт
	мСписокВидовДоговоров = Новый СписокЗначений;
	Если ТипЗнч(СчетФактура) = тип("ДокументОбъект.СчетФактураПолученный") Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
 	 	Иначе 
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		КонецЕсли;	
	СтруктураПараметровДляПолученияДоговора = Новый Структура;
    СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров",мСписокВидовДоговоров);

	 ПриИзмененииЗначенияКонтрагента_Новая(СчетФактура,СтруктураПараметровДляПолученияДоговора);
	
 КонецПроцедуры
 
Функция ПолучитьСписокВидовДоговоров(ВидОперации = Неопределено) Экспорт
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	Если ВидОперации = "ВозвратОтПокупателя" Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
    Возврат СписокВидовДоговоров;
КонецФункции

Функция ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ДиадокПолучитьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров);
	
КонецФункции

/////////////////////////////////////////////////////////////
// Связи объектов
/////////////////////////////////////////////////////////////

Функция ПолучитьСтавкуНДСДиадок(TaxRate) Экспорт
	
	Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСтавкуНДСДиадок(TaxRate);
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
	
	//перебираем все ИЕ для номенклатуры, и ищем по полному совпадению, либо по наличию коэффициента пересчета
	
	ПодходящаяЕИ = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕИ.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения ЕИ
		|ГДЕ
		|	ЕИ.Владелец = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		пока  Выборка.Следующий() Цикл
			ЕИ_ПоКлассификатору =  Выборка.Ссылка.ЕдиницаПоКлассификатору;
			Если (ЕИ_ПоКлассификатору.код = КодЕИ) или (ЕИ_ПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
				Возврат  Выборка.Ссылка;
			КонецЕсли;	
            Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, ЕИ_ПоКлассификатору.Код);
			Если коэф <> Неопределено Тогда 
				ПодходящаяЕИ = выборка.ссылка;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат ?(ПодходящаяЕИ=Неопределено, справочники.ЕдиницыИзмерения.ПустаяСсылка(), ПодходящаяЕИ);
	
КонецФункции

Функция ПолучитьКоэффициентПересчета(КодЕИ, НаименованиеЕИ, НоваяЕдиницаИзмерения)  Экспорт 
	Если (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код = КодЕИ) или (НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.наименование = НаименованиеЕИ) Тогда 
		Возврат  1;
	КонецЕсли;	
	
	Коэф = получитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПолучитьКоэффициентПересчета(КодЕИ, НоваяЕдиницаИзмерения.ЕдиницаПоКлассификатору.код);
	Возврат ?(коэф=Неопределено, 1, коэф);
	
	
КонецФункции

// Формирует структуру параметров для получения договора покупки со значениями по умолчанию.
//
// Возвращаемое значение:
//   Стуртура – Структура параметров для получения договора покупки.
//
Функция ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()   

	СтруктураПараметровДляПолученияДоговора = Новый Структура();

	СписокДопустимыхВидовДоговоров = Новый СписокЗначений();
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
	Возврат СтруктураПараметровДляПолученияДоговора;

КонецФункции // ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки()


// Процедура выполняет общие действия при изменнении контрагента
//
// Параметры:
//  ДокументОбъект                          - объект редактируемого документа,
//  СтруктураПараметровДляПолученияДоговора - Структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых видов взаиморасчетов, не обязательный.
//
Процедура ПриИзмененииЗначенияКонтрагента_Новая(ДокументОбъект, СтруктураПараметровДляПолученияДоговора = Неопределено) 

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ЕстьДоговорКонтрагента        =  ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ЕстьКонтактноеЛицоКонтрагента =  ЕстьРеквизитДокумента("КонтактноеЛицоКонтрагента", МетаданныеДокумента);
	
	Если ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) Тогда
		 КонтрагентСсылка=ДокументОбъект.Контрагент;
	Иначе 
		 КонтрагентСсылка=ДокументОбъект.ДокументОснование.Контрагент; 
	КонецЕсли;
	
	Если КонтрагентСсылка = Неопределено Тогда
		КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 

	Если ТипЗнч(КонтрагентСсылка) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Если ТипЗнч(КонтрагентСсылка) = Тип("Строка") Тогда
				КонтактноеЛицоКонтрагента = "";
			Иначе
				КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
	Иначе

		// Если в документе уже выбран "правильный" договор, то не будем его менять.
		Если ЕстьДоговорКонтрагента Тогда
			Если  МожноИспользоватьДоговорДляДокумента(ДокументОбъект.ДоговорКонтрагента, КонтрагентСсылка, ДокументОбъект.Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
			Иначе
				ДоговорКонтрагента = ПолучитьДоговорПоОрганизацииИКонтрагенту(ДокументОбъект.Организация, КонтрагентСсылка, СтруктураПараметровДляПолученияДоговора);
			КонецЕсли;
		КонецЕсли;

		Если ЕстьКонтактноеЛицоКонтрагента Тогда
			//Если НЕ ЗначениеЗаполнено(ДокументОбъект.КонтактноеЛицоКонтрагента)
			// ИЛИ ТипЗнч(ДокументОбъект.КонтактноеЛицоКонтрагента) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
			//	КонтактноеЛицоКонтрагента =  ПолучитьОсновноеКонтактноеЛицоКонтрагента(КонтрагентСсылка);
			//Иначе
			//	Если ДокументОбъект.КонтактноеЛицоКонтрагента.Владелец <> КонтрагентСсылка Тогда
			//		КонтактноеЛицоКонтрагента =  ПолучитьОсновноеКонтактноеЛицоКонтрагента(КонтрагентСсылка);
			//	КонецЕсли; 
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	Если ЕстьДоговорКонтрагента Тогда
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если  ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		   И ДоговорКонтрагента <> Неопределено 
		   И (НЕ ЗначениеЗаполнено(ДокументОбъект.Организация)) Тогда
			ДокументОбъект.Организация        = ДоговорКонтрагента.Организация;
			Если Не ПустаяСтрока(ДокументОбъект.Номер) Тогда
				ДокументОбъект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьКонтактноеЛицоКонтрагента 
	    И КонтактноеЛицоКонтрагента <> Неопределено Тогда
	//	ДокументОбъект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
	КонецЕсли; 

	Если  ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента) Тогда
		ДокументОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	КонецЕсли;

	Если  ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.ТипЦен)
	   И ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов"
	   И Не ДокументОбъект.ТипЦен.Владелец = КонтрагентСсылка Тогда
		// очистим тип цен
		ДокументОбъект.ТипЦен =  Неопределено;
	КонецЕсли;

	Если  ЕстьРеквизитДокумента("БанковскийСчетКонтрагента", МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчетКонтрагента = КонтрагентСсылка.ОсновнойБанковскийСчет;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()


// Проверяет. можно ли использовать переданный договор в соответствии с переданными параметрами.
//
// Параметры
//  Договор                                 – ссылка на договор, который нужно проверить,
//  Контрагент                              - ссылка на контрагента, которому должен принадлежать договор,
//  Организация                             - ссылка на организацию, от имени которой должен быть выписан договор,
//  СтруктураПараметровДляПолученияДоговора - Структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов.
//
// Возвращаемое значение:
//   Логическое, Истина - можно использовать, Ложь - нельзя.
//
Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) 

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;


	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, Если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

// Функция определяет договор, соответствующий указанным значениям
// организации и контрагента, а также переданным параметрам.
// Если всем параметрам удовлетворяет основной договор, то выбирается он.
//
// Параметры
//  Организация                             - организация, по которой определяется договор
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - Структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
//
// Возвращаемое значение:
//  Договор - договор контрагентов
//
Функция ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора = Неопределено) 

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Если не передана организация, то проверим, можно ли использовать основной договор. 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Договор = ПолучитьОсновнойДоговорКонтрагента(Контрагент);
		Если МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Тогда
			Возврат Договор;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	РезультатЗапроса = ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, Истина, Организация );
	ТаблицаДоговоров = РезультатЗапроса.Выгрузить();

	Если ТаблицаДоговоров.Количество() = 1 Тогда
		Возврат ТаблицаДоговоров[0].Договор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

// Функция возвращает таблицу договоров данного контрагента, доступных для выбора
//
// Параметры
//  Контрагент                              - конрагент, по которому определяется договор
//  СтруктураПараметровДляПолученияДоговора - Структура, содержащая параметры для определения договора:
//                                            список допустимых видов договоров и
//                                            список допустимых способов ведения взаиморасчетов, не обязательный.
// 	ВозвращатьТолькоПервые                  - булево, Истина - нужно вернуть только первые два договора,
//                                          - Ложь - нужно вернуть весь список.
//  Организация                             - необязательный, организация, по которой определяется договор,
//                                            Если не передана, то возвращается список договоров по всем орагнизациям.
//  ДополнительныеРеквизиты                 - необязательный, массив дополнительных реквизитов договора,
//                                            которые необходимо вернуть в результате запроса.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция ПолучитьДоступныеДоговорыКонтрагента(Контрагент, СтруктураПараметровДляПолученияДоговора, ВозвращатьТолькоПервые, Организация = Неопределено, ДополнительныеРеквизиты = Неопределено) 

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент",  Контрагент);
	Запрос.УстановитьПараметр("ПарВидДоговора", СписокДопустимыхВидовДоговоров);
	Запрос.УстановитьПараметр("ПарВидВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
	Запрос.УстановитьПараметр("ПарВалютаВзаиморасчетов", ВалютаВзаиморасчетовДоговора);
	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	ПсевдонимТаблицы = "ДоговорыКонтрагентов"; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ"
	+?(ВозвращатьТолькоПервые," ПЕРВЫЕ 2","") + "
	|	ДоговорыКонтрагентов.Ссылка КАК Договор";
	
	Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		
		Для Каждого НаименованиеРеквизита Из ДополнительныеРеквизиты Цикл
		
			Запрос.Текст = Запрос.Текст  + ", " + ПсевдонимТаблицы + "." + НаименованиеРеквизита;
		
		КонецЦикла; 		
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст  + "
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК " + ПсевдонимТаблицы + "
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)"
	+?(ЗначениеЗаполнено(Организация), "	И ДоговорыКонтрагентов.Организация = &ПарОрганизация", "") + "
	|	И ДоговорыКонтрагентов.Владелец    = &ПарКонтрагент"
	+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов " 
	+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "(&ПарВалютаВзаиморасчетов)
	|")
	+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&ПарВидДоговора)
	|")
	+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
	|	И ДоговорыКонтрагентов.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
	|");

	Если ЗначениеЗаполнено(Организация) Тогда 

		Запрос.Текст = Запрос.Текст + "
		|	И (ВЫБОР КОГДА ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.Организация = &ПарОрганизация"
		+?(ВалютаВзаиморасчетовДоговора = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов " 
		+?(ВидСравненияВалютыВзаиморасчетов = Неопределено, "=", ВидСравненияВалютыВзаиморасчетов) + "&ПарВалютаВзаиморасчетов
		|")
		+?(СписокДопустимыхВидовДоговоров = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВидДоговора В (&ПарВидДоговора)
		|")
		+?(СписокДопустимыхВидовВзаиморасчетов = Неопределено, "", "
		|	И ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента.ВедениеВзаиморасчетов В (&ПарВидВзаиморасчетов)
		|")
		+ "
		|	         Тогда ДоговорыКонтрагентов.Ссылка  = ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента
		|	         ИНАЧЕ ДоговорыКонтрагентов.Ссылка <> ДоговорыКонтрагентов.Владелец.ОсновнойДоговорКонтрагента КОНЕЦ)";

	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // ПолучитьДоступныеДоговорыКонтрагента()

Функция ПолучитьПоследнююКорректировкуПоступления(ПоследняяКорректировка) Экспорт
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка ДокКорректировка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК Док
		|ГДЕ
		|	Док.ДокументПоступления = &ДокСсылка
		|	И Док.ВидОперации = &ВидОперации";
		Запрос.УстановитьПараметр("ДокСсылка", ПоследняяКорректировка);
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследняяКорректировка = Выборка.ДокКорректировка;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследняяКорректировка;
	
КонецФункции

Функция получитьДокументОснованиеДляКорректировкиПоступления(Document) Экспорт 
	Если Document.type =  "InvoiceRevision" Тогда 
		 запрос = Новый запрос;
		 запрос.Текст = "ВЫБРАТЬ
		                |	СчетФактураПолученныйДокументыОснования.ДокументОснование
		                |ИЗ
		                |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		                |ГДЕ
		                |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь";
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));		
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			 Док =  результат.ДокументОснование;
			 Возврат 	ПолучитьПоследнююКорректировкуПоступления(Док); 
		иначе 
			Возврат Неопределено 
		КонецЕсли;	
	ИначеЕсли Document.type = "InvoiceCorrection"  Тогда 
	  запрос = Новый Запрос;
	  	Если ЗначениеЗаполнено(Document.OriginalInvoicerevisionNumber)=Ложь Тогда 
	 		 Запрос.Текст ="ВЫБРАТЬ
		                |	СчетФактураПолученныйДокументыОснования.ДокументОснование
		                |ИЗ
		                |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		                |ГДЕ
		                |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
		                |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
		                |	И (СчетФактураПолученныйДокументыОснования.Ссылка.Исправление = Ложь)";
		Иначе 
			 Запрос.Текст ="ВЫБРАТЬ
			               |	СчетФактураПолученныйДокументыОснования.ДокументОснование,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.Исправление,
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления
			               |ИЗ
			               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			               |ГДЕ
			               |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.Исправление
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.ДатаИсправления = &ДатаИсправления
			               |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления = &НомерИсправления";
			Запрос.УстановитьПараметр("НомерИсправления", число(Document.OriginalInvoicerevisionNumber));		
			Запрос.УстановитьПараметр("ДатаИсправления", НачалоДня(Document.OriginalInvoicerevisionDate));		
		КонецЕсли;				
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalDocumentNumber);		
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalDocumentdate));
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	ИначеЕсли Document.type = "InvoiceCorrectionRevision"  Тогда 
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	СчетФактураПолученныйДокументыОснования.ДокументОснование
	                  |ИЗ
	                  |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	                  |ГДЕ
	                  |	СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	                  |	И СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента = &НомерВходящегоДокумента";
		Запрос.УстановитьПараметр("ДатаВходящегоДокумента", НачалоДня(Document.OriginalInvoiceCorrectionDate));
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", Document.OriginalInvoiceCorrectionNumber);
		результат = запрос.Выполнить().Выбрать();
		Если результат.следующий() Тогда 
			Возврат результат.ДокументОснование;
		Иначе 
			Возврат Неопределено
		КонецЕсли;
	Иначе 
		Возврат Неопределено
	КонецЕсли;	
		
КонецФункции	

Функция ПолучитьСуммуПрописьюДиадок(Total, ВалютаДокумента) Экспорт 
	Возврат СформироватьСуммуПрописью(Total, ВалютаДокумента);
КонецФункции	

Функция ДобавитьРазделитель(Стр, Префикс = "") 
	Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
КонецФункции

Функция ОтрезатьПравуюЗапятую(стр)
	результат = сокрЛП(стр);
	пока прав(результат, 1)="," цикл 
		Результат = лев(результат, стрДлина(результат)-1);
	КонецЦикла;	
	
	Возврат результат;
КонецФункции

Функция ПолучитьПредставлениеКонтрагентаДляАкта(Контрагент, ДатаОперации)   Экспорт 
	СведенияОбОрганизации = ПолучитьСведенияОбОрганизации_ДД(Контрагент, ДатаОперации);
	Возврат ОтрезатьПравуюЗапятую(ДобавитьРазделитель(СведенияОбОрганизации.ПолноеНаименование)+ДобавитьРазделитель(СведенияОбОрганизации.ИНН, "ИНН: ")+ДобавитьРазделитель(СведенияОбОрганизации.КПП, "КПП: "));
КонецФункции


Функция ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП(Организация) Экспорт 
  Если (Организация.Метаданные().реквизиты.найти("СвидетельствоСерияНомер")<>Неопределено) и ЗначениеЗаполнено(Организация.СвидетельствоСерияНомер) и ЗначениеЗаполнено(Организация.СвидетельствоДатавыдачи) Тогда 
		Возврат  Организация.СвидетельствоСерияНомер+" от "+Формат(Организация.СвидетельствоДатавыдачи, "ДФ=dd.MM.yyyy")
	Иначе 
		Возврат "";
  КонецЕсли;
	
КонецФункции

Функция СформироватьЗапросВыборкаНезависимыхСФ(ТипДокументов, СтруктураФильтры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.Ссылка КАК Док
	|ИЗ
	|	Документ." + ТипДокументов + " КАК Док
	|ГДЕ
	|   Док.Ссылка.Проведен";
	
	ТипДокументаОснованияУстановлен = Ложь;
	
	Для каждого Фильтр из СтруктураФильтры Цикл
		Если НЕ Фильтр.Значение = Неопределено Тогда
			
			Если Найти(Фильтр.Ключ, "Склад")>0 Тогда 
				Если НЕ ТипДокументаОснованияУстановлен Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг	
					|	И Док.Ссылка.ДокументОснование."+Фильтр.Ключ+" В (&пар" + Фильтр.Ключ+")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);
					ТипОснованияУстановлен = Истина;
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование."+Фильтр.Ключ+" В (&пар" + Фильтр.Ключ+")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);
				КонецЕсли;
			ИначеЕсли Найти(Фильтр.Ключ, "Сумма")>0 Тогда 
				Если НЕ ТипДокументаОснованияУстановлен Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|	И Док.Ссылка.ДокументОснование." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
					ТипОснованияУстановлен = Истина;
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
				КонецЕсли;
			ИначеЕсли Найти(Фильтр.Ключ, "Контрагент")>0 Тогда 
				Если НЕ ТипДокументаОснованияУстановлен Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|	И Док.Ссылка.ДокументОснование." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
					ТипОснованияУстановлен = Истина;
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И Док.Ссылка.ДокументОснование." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
				КонецЕсли;
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|	И Док.Ссылка." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
				Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
			КонецЕсли;
			
		КонецЕсли;				
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

//{ Управление ГТД
Функция ЕстьВозможностьЗаполненияГТД(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;	
КонецФункции

Функция ЕстьВозможностьЗаполненияСерий(Видоперации, ЭДОбъект) Экспорт
	Возврат Ложь;
КонецФункции
//} Управление ГТД

Функция ПолучитьДокументПоступленияПоСФ(СчетФактура) Экспорт	
	ДокПоступление = СчетФактура.ДокументОснование;
КонецФункции

//{ СвязиМеждуДокументами

	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
		
	КонецФункции

	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
		
	КонецФункции
	
	Функция ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(СсылкаНаОбъект);
		
	КонецФункции
	
	Функция ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект) Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьМассивСсылокРТУПоСчетуНаОплату(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьСчетНаОплатуНаОснованииРТУ(СсылкаНаОбъект);
		
	КонецФункции

	Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации) Экспорт 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияУниверсальнаяЛогика").ПолучитьИсправляемыйДокументРеализации(ДокРеализации);
		
	КонецФункции
	
//} СвязиМеждуДокументами

//{ Приглашение Контрагентов

	Функция ЕстьНовыеКонтрагентыДляПриглашения(МассивОрганизаций1С, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК СтатусКонтрагентаНеПодходит
		|ГДЕ
		|	СтатусКонтрагентаНеПодходит.Объект В(&МассивОрганизаций1С)
		|	И СтатусКонтрагентаНеПодходит.Свойство = &ПриглашенияДатаСтатусНеПодходит
		|	И ТИПЗНАЧЕНИЯ(СтатусКонтрагентаНеПодходит.Значение) = ТИП(ДАТА)
		|	И СтатусКонтрагентаНеПодходит.Значение > &ПериодАнализаДокументов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И Т.ОтражатьВБухгалтерскомУчете
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО Т.Контрагент = ЯщикиКонтрагентов.Объект
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)
		|			И (ЯщикиКонтрагентов.Значение <> """")
		|ГДЕ
		|	Т.Дата >= &ПериодАнализаДокументов
		|	И Т.Организация В(&МассивОрганизаций1С)
		|	И Т.ОтражатьВБухгалтерскомУчете
		|	И ЯщикиКонтрагентов.Объект ЕСТЬ NULL ");
		
		Запрос.УстановитьПараметр("МассивОрганизаций1С"			   , МассивОрганизаций1С);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"		   , ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"  					   , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ПриглашенияДатаСтатусНеПодходит", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДиадокПриглашенияДатаСтатусНеПодходит"));
	
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции

	Функция ТаблицаКонтрагентовДляПриглашения(BoxID, ПериодАнализаДокументов) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.ИНН,
		|	ЯщикиОрганизаций.Значение КАК BoxID
		|ПОМЕСТИТЬ ВТ_Организации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиОрганизаций
		|		ПО Организации.Ссылка = ЯщикиОрганизаций.Объект
		|			И (ЯщикиОрганизаций.Свойство = &ЯщикДиадокДляОрганизации)
		|			И (ЯщикиОрганизаций.Значение В (&BoxID))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.BoxID,
		|	ВложенныйЗапрос.Контрагент,
		|	СУММА(ВложенныйЗапрос.КоличествоДокументов) КАК КоличествоДокументов
		|ПОМЕСТИТЬ ВТ_СтатистикаДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Организации.BoxID КАК BoxID,
		|		Т.Контрагент КАК Контрагент,
		|		1 КАК КоличествоДокументов
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Организации.BoxID,
		|		Т.Контрагент,
		|		1
		|	ИЗ
		|		ВТ_Организации КАК ВТ_Организации
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Т
		|			ПО ВТ_Организации.Организация = Т.Организация
		|				И (Т.Дата >= &ПериодАнализаДокументов)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.BoxID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Организации.BoxID,
		|	ВТ_Организации.ИНН
		|ПОМЕСТИТЬ ВТ_BoxID
		|ИЗ
		|	ВТ_Организации КАК ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент1С,
		|	Контрагенты.Код КАК Контрагент1С_Код,
		|	Контрагенты.ИНН КАК Контрагент1С_ИНН,
		|	Контрагенты.КПП КАК Контрагент1С_КПП,
		|	ЕСТЬNULL(ЯщикиКонтрагентов.Значение, """") КАК КонтрагентЭДО_ID,
		|	ЕСТЬNULL(ВТ_СтатистикаДокументов.КоличествоДокументов, 0) КАК КоличествоДокументов,
		|	ВТ_BoxID.BoxID КАК ОрганизацияЭДО_ID,
		|	ВЫБОР
		|		КОГДА ЯщикиКонтрагентов.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Сопоставлен
		|ИЗ
		|	ВТ_BoxID КАК ВТ_BoxID
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_BoxID.ИНН <> Контрагенты.ИНН
		|			И (НЕ Контрагенты.ЭтоГруппа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатистикаДокументов КАК ВТ_СтатистикаДокументов
		|		ПО ВТ_BoxID.BoxID = ВТ_СтатистикаДокументов.BoxID
		|			И (Контрагенты.Ссылка = ВТ_СтатистикаДокументов.Контрагент)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЯщикиКонтрагентов
		|		ПО (Контрагенты.Ссылка = ЯщикиКонтрагентов.Объект)
		|			И (ЯщикиКонтрагентов.Свойство = &ДДКонтр_)");
		
		Запрос.УстановитьПараметр("BoxID"					, BoxID);
		Запрос.УстановитьПараметр("ПериодАнализаДокументов"	, ПериодАнализаДокументов);
		Запрос.УстановитьПараметр("ДДКонтр_"				, ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ДДКонтр_"));
		Запрос.УстановитьПараметр("ЯщикДиадокДляОрганизации", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство("ЯщикДиадокДляОрганизации"));
																   
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
//{ Приглашение Контрагентов

//{ Внешние обработки

	Функция ВнешняяОбработкаПоGUID(GUID) Экспорт
		
		Возврат СсылкаПоGUID(Справочники.ДополнительныеПечатныеФормы, GUID);
		
	КонецФункции

//} Внешние обработки

ВалютаРегламентированногоУчета = ПолучитьВалютуРегламентированногоУчета();