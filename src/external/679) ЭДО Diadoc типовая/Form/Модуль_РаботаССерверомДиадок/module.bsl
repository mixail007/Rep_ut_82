Перем КонтекстДиадока;

Перем КэшМетокВремени;
Перем МассивСтруктурСЗадачами;
Перем ТаблицаСоответствийHTMLСсылок;
Перем ThirtySecondsToCache;

Перем DiadocInvoiceAPI Экспорт;
Перем DiadocInvoiceAPITest Экспорт;
Перем DiadocConnectionDefault Экспорт;
Перем ПредставлениеПользователяПоУмолчанию Экспорт;

Перем СписокТиповДокументов;
Перем СтатусыДокументовДиадок;
Перем СтатусыАнулированияДокументовДиадок;

//{ КЭШ ФОРМЫ

	Перем КэшФормы;

	Функция КэшФормы()
		
		Если КэшФормы = Неопределено Тогда
			КэшФормы= Новый Структура;
		КонецЕсли;
		
		Возврат КэшФормы;	
		
	КонецФункции

	Функция КэшФормы_Удалить(Ключ)
		
		КэшФормы().Удалить(Ключ);
		
	КонецФункции
	
	Функция КэшФормы_Получить(Ключ, ПараметрыКонструктора= Неопределено) Экспорт
		
		Если НЕ КэшФормы().Свойство(Ключ) Тогда
			
			КэшФормы().Вставить(Ключ, КэшФормы_Создать(Ключ, ПараметрыКонструктора));
			
		КонецЕсли;
		
		Возврат КэшФормы()[Ключ];
		
	КонецФункции
	
	Функция КэшФормы_Создать(Ключ, ПараметрыКонструктора)
		
		Если Ключ = "ПредставлениеСтатусовВзаимоотношений" Тогда
			
			Возврат Новый_ПредставлениеСтатусовВзаимоотношений(ПараметрыКонструктора);
			
		КонецЕсли;
		
	КонецФункции

	
	Функция Новый_ПредставлениеСтатусовВзаимоотношений(ПараметрыКонструктора)
		
		Результат= Новый Соответствие;
		Результат.Вставить("IsMyCounteragent"	  , "Партнерские отношения"	  );
		Результат.Вставить("InvitesMe"			  , "Получен запрос"		  );
		Результат.Вставить("IsInvitedByMe"		  , "Ожидается ответ"		  );
		Результат.Вставить("RejectsMe"			  , "Заблокировал меня"		  );
		Результат.Вставить("IsRejectedByMe"		  , "Заблокирован мной"		  );
		Результат.Вставить("IsOrganization"		  , "Совпадает с организацией");
		Результат.Вставить("NotInCounteragentList", "Имеет доступ в "+ КраткоеНаименованиеСистемы				);
		Результат.Вставить("IsActive"			  , "Работает в "	 + КраткоеНаименованиеСистемыПредложныйПадеж);
		
		Возврат Результат;
		
	КонецФункции

//} КЭШ ФОРМЫ


//{ РАБОТА С КОНТЕКСТОМ ДИАДОКА
	
	//{ ИНИЦИАЛИЗАЦИЯ КОНТЕКСТА
		
		Процедура ИнициализироватьКонтекстДиадока() Экспорт
			
			Если КонтекстДиадока = Неопределено Тогда
				КонтекстДиадока = Новый ТаблицаЗначений;
				КонтекстДиадока.Колонки.Добавить("Организация");
				КонтекстДиадока.Колонки.Добавить("Connection");
				КонтекстДиадока.Колонки.Добавить("ОтпечатокСертификата");
				КонтекстДиадока.Колонки.Добавить("ОшибкаСертификата");
				КонтекстДиадока.Колонки.Добавить("Box");
				КонтекстДиадока.Колонки.Добавить("BoxId");
				КонтекстДиадока.Колонки.Добавить("Magic");
				КонтекстДиадока.Колонки.Добавить("ДанныеСотрудника");
				КонтекстДиадока.Колонки.Добавить("ЗаблокированаПоAPI");
			Иначе
				КонтекстДиадока_Очистить();
				КонтекстОрганизации= Неопределено;
			КонецЕсли;
			
			//получаем массив всех организаций и их подразделений 
			МассивOrganizationDepartment = Новый Массив;
			Organizations = DiadocConnectionDefault.GetOrganizationList();
			
			Для ц = 0 По Organizations.Count-1 Цикл 
				Organization = Organizations.GetItem(ц);
				
				МассивOrganizationDepartment.Добавить(Новый Структура("OrganizationId, DepartmentKpp", Organization.Id));
				
				Для цц = 0 по Organization.Departments.Count-1 Цикл
					department = Organization.Departments.GetItem(цц);
					Если НЕ ПустаяСтрока(department.Kpp) И department.Kpp <> Organization.Kpp Тогда
						МассивOrganizationDepartment.Добавить(Новый Структура("OrganizationId, DepartmentKpp", Organization.Id, department.Kpp));
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			//проверяем ранее заполненный массив на наличие сопоставленной организации в 1С и добавляем в контекст
			Для Каждого ТекОрганизация Из МассивOrganizationDepartment Цикл
				
				Организация = ПолучитьФорму("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(ТекОрганизация.OrganizationId, ТекОрганизация.DepartmentKpp);
				Если Организация <> Неопределено Тогда 
					
					Если КонтекстДиадока.Найти(Организация, "Организация") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОрганизации = КонтекстДиадока.Добавить();
					
					СтрокаОрганизации.BoxID 		= ТекОрганизация.OrganizationId;
					СтрокаОрганизации.Организация	= Организация;
					
					УстановитьDiadocConnectionВСтроке(СтрокаОрганизации, DiadocConnectionDefault);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура ИнициализироватьMagic() Экспорт
			
			ОбработанныеBoxId= Новый Соответствие;
			
			Для каждого СтрокаКонтекста Из КонтекстДиадока Цикл
				
				Если ОбработанныеBoxId[СтрокаКонтекста.BoxId] = Истина
					ИЛИ СтрокаКонтекста.ЗаблокированаПоAPI Тогда
					Продолжить;
				КонецЕсли;
				
				Если  СтрокаКонтекста.Box.AuthenticateType = "Certificate"
					И СтрокаКонтекста.Magic = Неопределено
					И НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
					
					Попытка
						СтрокаКонтекста.Magic = СтрокаКонтекста.Box.GetReceiptGenerationProcess();
						СтрокаКонтекста.Magic.Start();
					Исключение КонецПопытки;
					
				КонецЕсли;
				
				ОбработанныеBoxId.Вставить(СтрокаКонтекста.BoxId, Истина);
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура КонтекстДиадока_Очистить() Экспорт
			
			ОбратныйИндекс = КонтекстДиадока.Количество() - 1;
			
			Пока ОбратныйИндекс > -1 Цикл
				
				КонтекстДиадока_УдалитьСтроку(КонтекстДиадока[ОбратныйИндекс]);
				
				ОбратныйИндекс = ОбратныйИндекс - 1;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура КонтекстДиадока_УдалитьСтроку(СтрокаКонтекста)
			
			Если СтрокаКонтекста.Magic <> Неопределено Тогда
				Попытка
					СтрокаКонтекста.Magic.Stop();
				Исключение КонецПопытки;
			КонецЕсли;
			
			КонтекстДиадока.Удалить(СтрокаКонтекста);
			
		КонецПроцедуры
		
	//} ИНИЦИАЛИЗАЦИЯ КОНТЕКСТА

	//{ ИЗМЕНЕНИЕ ДАННЫХ КОНТЕКСТА
				
		Процедура УстановитьDiadocConnection(BoxId, Connection = Неопределено) Экспорт
			
			Если Connection = Неопределено Тогда
				Connection=	DiadocConnectionDefault;
			КонецЕсли;
			
			НайденныеСтроки=	КонтекстДиадока.НайтиСтроки(Новый Структура("BoxId", BoxId));
			Для каждого СтрокаКонтекста Из НайденныеСтроки Цикл
				УстановитьDiadocConnectionВСтроке(СтрокаКонтекста, Connection);
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура УстановитьDiadocConnectionВСтроке(СтрокаКонтекста, Connection) Экспорт
			
			СтрокаКонтекста.ОтпечатокСертификата= Неопределено;
			СтрокаКонтекста.ОшибкаСертификата= 	  Неопределено;
			
			Если СтрокаКонтекста.Magic <> Неопределено Тогда
				СтрокаКонтекста.Magic.Stop();
				СтрокаКонтекста.Magic = Неопределено;
			КонецЕсли;
			
			СтрокаКонтекста.Connection=	Connection;
			СтрокаКонтекста.Box= 		Connection.GetOrganizationById(СтрокаКонтекста.BoxID);
			
			//проверяем заблокированна ли организация. Для этого вызываем блокируемый метод по API
			ЗаблокированаПоAPI = Ложь;
			Попытка
				СтрокаКонтекста.Box.GetUserPermissions();
			Исключение
				ЗаблокированаПоAPI = Истина;
			КонецПопытки;
			СтрокаКонтекста.ЗаблокированаПоAPI = ЗаблокированаПоAPI;
			
			Если Connection.AuthenticateType = "Certificate" Тогда
				СтрокаКонтекста.ОтпечатокСертификата = Connection.Certificate.Thumbprint;
				Если Не СтрокаКонтекста.Box.IsPilot И Не СтрокаКонтекста.Box.IsTest И Не ЗаблокированаПоAPI Тогда
					СтрокаКонтекста.ОшибкаСертификата = СтрокаКонтекста.Box.CanSendInvoice(СтрокаКонтекста.ОтпечатокСертификата);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаКонтекста.ДанныеСотрудника = ДанныеСотрудника(СтрокаКонтекста);

		КонецПроцедуры
		
		Процедура УдалитьОрганизациюИзКонтекста(Организация) Экспорт
			
			НайденныеСтроки= КонтекстДиадока.НайтиСтроки(Новый Структура("Организация", Организация));
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				КонтекстДиадока_УдалитьСтроку(НайденнаяСтрока);
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура ПроверитьСертификат(BoxId)
			
			СтрокаКонтекста= СтрокаКонтекста(BoxId);
			
			Если НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
				Возврат;
			КонецЕсли;
			
			Если	Найти(СтрокаКонтекста.ОшибкаСертификата, "FNS reg message was not sent for box") > 0
				ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "is not registered in FNS for box") > 0
				ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "No registration message to FNS found for boxId") > 0 
				ИЛИ Найти(СтрокаКонтекста.ОшибкаСертификата, "Unknown FnsRegStatus") > 0 Тогда
			
				СтрокаКонтекста.Box.SendFnsRegistrationMessage(СтрокаКонтекста.ОтпечатокСертификата);
				
				Если Не СтрокаКонтекста.Box.IsPilot И Не СтрокаКонтекста.Box.IsTest И Не СтрокаКонтекста.ЗаблокированаПоAPI Тогда
					СтрокаКонтекста.ОшибкаСертификата= СтрокаКонтекста.Box.CanSendInvoice(СтрокаКонтекста.ОтпечатокСертификата);
				КонецЕсли;
				
				ИнициализироватьMagic();
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
				ВызватьИсключение "##9[]" + СтрокаКонтекста.ОшибкаСертификата;
			КонецЕсли;
			
		КонецПроцедуры
		
	//} ИЗМЕНЕНИЕ ДАННЫХ КОНТЕКСТА
	
	//{ ПОЛУЧЕНИЕ ДАННЫХ КОНТЕКСТА
	
		Функция СтрокаКонтекста(BoxID_или_Организация1С) Экспорт
			
			Если ТипЗнч(BoxID_или_Организация1С) = Тип("Строка") Тогда
				Возврат КонтекстДиадока.Найти(BoxID_или_Организация1С, "BoxID");
			Иначе
				Возврат КонтекстДиадока.Найти(BoxID_или_Организация1С, "Организация");
			КонецЕсли;
			
		КонецФункции
		
		Функция ПолучитьЯщикДиадокДляОрганизации(Организация) Экспорт
			
			НайденнаяСтрока= КонтекстДиадока.Найти(Организация, "Организация");
			Если НайденнаяСтрока <> Неопределено Тогда 
				Возврат НайденнаяСтрока.Box;
			Иначе
				ВызватьИсключение "Ошибка получения Organization из контекста";
			КонецЕсли;
			
		КонецФункции
		
		Функция Organization(BoxID_или_Организация1С) Экспорт
			
			Возврат СтрокаКонтекста(BoxID_или_Организация1С).Box;
			
		КонецФункции
		
		Функция ДанныеСотрудника(СтрокаКонтекста)
			
			Результат = Новый Структура;
			
			ConnectionUser = СтрокаКонтекста.Connection.GetMyUser();
			
			Результат.Вставить("Фамилия" , ConnectionUser.LastName);
			Результат.Вставить("Имя"	 , ConnectionUser.FirstName);
			Результат.Вставить("Отчество", ConnectionUser.MiddleName);
			
			ФИО = "";
			Разделитель = "";
			Если ЗначениеЗаполнено(Результат.Фамилия) Тогда
				ФИО = ФИО + Разделитель + Результат.Фамилия;
				Разделитель = " ";
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат.Имя) Тогда
				ФИО = ФИО + Разделитель + Результат.Имя;
				Разделитель = " ";
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат.Отчество) Тогда
				ФИО = ФИО + Разделитель + Результат.Отчество;
				Разделитель = " ";
			КонецЕсли;
			Результат.Вставить("ФИО", ФИО);
			
			Если НЕ СтрокаКонтекста.ЗаблокированаПоAPI Тогда
				
				UserPermissions = СтрокаКонтекста.Box.GetUserPermissions();
				
				Результат.Вставить("Должность", UserPermissions.JobTitle);
				
				Результат.Вставить("ПраваДоступа", Новый Структура);
				Результат.ПраваДоступа.Вставить("IsAdministrator"	   , UserPermissions.IsAdministrator);
				Результат.ПраваДоступа.Вставить("CanSignDocuments"	   , UserPermissions.CanSignDocuments);
				Результат.ПраваДоступа.Вставить("CanAddResolutions"	   , UserPermissions.CanAddResolutions);
				Результат.ПраваДоступа.Вставить("CanRequestResolutions", UserPermissions.CanRequestResolutions);
				Результат.ПраваДоступа.Вставить("DocumentsAccessLevel" , UserPermissions.DocumentsAccessLevel);
				
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции

		Функция DefaultConnectionUser() Экспорт
			
			ConnectionUser= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").НовыйContent("User");
			
			ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьСтруктуруПоКонтенту(DiadocConnectionDefault.GetMyUser(), ConnectionUser);
			
			Возврат ConnectionUser;
			
		КонецФункции
		
		Функция ПолучитьФИОПодписанта(BoxID) Экспорт
			
			Возврат СтрокаКонтекста(BoxID).ДанныеСотрудника.ФИО;
			
		КонецФункции
		
		Функция ПолучитьДолжностьПодписанта(BoxID) Экспорт
			
			Возврат СтрокаКонтекста(BoxID).ДанныеСотрудника.Должность;
			
		КонецФункции
		
		Функция ПолучитьОтпечатокСертификатаПоОрганизации(Организация) Экспорт
			
			НайденнаяСтрока= КонтекстДиадока.Найти(Организация, "Организация");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока.ОтпечатокСертификата
			КонецЕсли;
			
		КонецФункции	
		
		
		
	//} ПОЛУЧЕНИЕ ДАННЫХ КОНТЕКСТА

//} РАБОТА С КОНТЕКСТОМ ДИАДОКА

//{ АВТОРИЗАЦИЯ

	Функция АвторизоватьсяИЗаполнитьКонтекст_ВнешнийЗапуск(Логин, Пароль) Экспорт 
	   	ПараметрыDiadocConnection=	Новый Структура();
		ПараметрыDiadocConnection.Вставить("DiadocConnection", 		CreateDiadocConnectionLogin(Логин, Пароль));
		ПараметрыDiadocConnection.Вставить("ОтпечатокСертификата", 	 "login:"+Логин);
		CreateDiadocConnectionDefault(ПараметрыDiadocConnection);
		
		возврат Истина;
	КонецФункции
	
	Функция АвторизоватьсяИЗаполнитьКонтекст()
		
		DiadocConnectionDefault=	Неопределено;
		
		ОтпечатокСертификата= ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПоследнийСертификатПользователя");
		Если Лев(ОтпечатокСертификата, 6) = "login:" Тогда
			Логин = Сред(ОтпечатокСертификата, 7);
			Режим = "АвторизацияПоЛогину";
		Иначе
			Режим = "АвторизацияПоСертификату";
		КонецЕсли;
		
		Если ПустаяСтрока(ОтпечатокСертификата) = Ложь
			И Режим = "АвторизацияПоСертификату" Тогда
			Попытка
				ПараметрыDiadocConnection=	Новый Структура();
				ПараметрыDiadocConnection.Вставить("DiadocConnection", 		CreateDiadocConnectionCertificate(ОтпечатокСертификата));
				ПараметрыDiadocConnection.Вставить("ОтпечатокСертификата", 	ОтпечатокСертификата);
				CreateDiadocConnectionDefault(ПараметрыDiadocConnection);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если DiadocConnectionDefault = Неопределено Тогда
			
			ФормаАвторизации=	ПолучитьФорму("Форма_ОкноАвторизации");
			ФормаАвторизации.Логин=	Логин;
			ФормаАвторизации.Режим=	Режим;
			ФормаАвторизации.CollectionPersonalCertificates=	DiadocInvoiceAPI.GetPersonalCertificates();
			
			ПараметрыDiadocConnection=	ФормаАвторизации.ОткрытьМодально();
			Если НЕ ПараметрыDiadocConnection = Неопределено Тогда
				CreateDiadocConnectionDefault(ПараметрыDiadocConnection);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат DiadocConnectionDefault <> Неопределено;
		
	КонецФункции
	
	Функция ИнициализироватьИмяПользователя(Connection)
		
		user = Connection.GetMyUser();
		ПредставлениеПользователяПоУмолчанию =  user.LastName +" "+user.FirstName +" "+user.MiddleName;

	КонецФункции	
	
	Процедура CreateDiadocConnectionDefault(ПараметрыDiadocConnection)
		
		DiadocConnectionDefault=	ПараметрыDiadocConnection.DiadocConnection;
		ИнициализироватьИмяПользователя(DiadocConnectionDefault);
		
		ТекущийОтпечаток = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПоследнийСертификатПользователя");
		Если ТекущийОтпечаток<>ПараметрыDiadocConnection.ОтпечатокСертификата Тогда
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследнийСертификатПользователя", ПараметрыDiadocConnection.ОтпечатокСертификата);
		КонецЕсли;	
		
	КонецПроцедуры
	
	Функция CreateDiadocConnectionCertificate(ОтпечатокСертификатаПользователя) Экспорт
		
		Возврат DiadocInvoiceAPI.CreateConnectionByCertificate(ОтпечатокСертификатаПользователя);

	КонецФункции
	
	Функция CreateDiadocConnectionLogin(Логин, Пароль) Экспорт
		
		Возврат DiadocInvoiceAPI.CreateConnectionByLogin(Логин, Пароль);
		
	КонецФункции
	
	Функция ПроверитьДоступПоСертификату(ОтпечатокСертификатаПользователя) Экспорт
		
		Возврат DiadocInvoiceAPI.VerifyThatUserHasAccessToAnyBox(ОтпечатокСертификатаПользователя) = Истина;
		
	КонецФункции
	
	Процедура АвторизоватьсяПоДопСертификатам(Отказ)
		
		Если ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ДополнительныеСертификаты_Используются()Тогда
			
			Отказ = ПолучитьФорму("Форма_ОкноАвторизацииДопСертификатов").ОткрытьМодально() <> Истина;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ВыбратьСертификатДляОрганизации(ПредставлениеОрганизации, OrganizationId) Экспорт
		
		ФормаАвторизации=	ПолучитьФорму("Форма_ОкноАвторизации");
		ФормаАвторизации.Режим=								"ВыборСертификата";
		ФормаАвторизации.ПредставлениеОрганизации=			ПредставлениеОрганизации;
		ФормаАвторизации.CollectionPersonalCertificates=	DiadocInvoiceAPI.GetPersonalCertificates();
		ФормаАвторизации.OrganizationId=					OrganizationId;
		
		Возврат ФормаАвторизации.ОткрытьМодально();
		
	КонецФункции
	
	Функция ВыполнитьАвторизациюПоДопСертификату(Организация, ОтпечатокСертификата) Экспорт
		
		СтруктураРезультата=	Новый Структура("Результат, СписокОшибок", Истина, "");
		
		BoxID = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(Организация);
		Если BoxID = Неопределено Тогда
			СтруктураРезультата.Вставить("Результат", Ложь);
			СтруктураРезультата.Вставить("СписокОшибок", "Ошибка в структуре данных, не найдена ID организации " + Организация);
			Возврат СтруктураРезультата;
		КонецЕсли;
		
		ОтборПоСертификату = Новый Структура();
		ОтборПоСертификату.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		ОтборПоСертификату.Вставить("ЗаблокированаПоAPI", 	Ложь);
		
		НайденныеСтроки = КонтекстДиадока.НайтиСтроки(ОтборПоСертификату);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;
		
		Попытка
			Connection=	CreateDiadocConnectionCertificate(ОтпечатокСертификата);
			УстановитьDiadocConnection(BoxID, Connection);
		Исключение
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок("Не удалось авторизовать дополнительный сертификат" + Символы.ПС + ОписаниеОшибки());
			СтруктураРезультата.Вставить("Результат", Ложь);
			СтруктураРезультата.Вставить("СписокОшибок", "Ошибка авторизации сертификата");
			Возврат СтруктураРезультата;
		КонецПопытки;
		
		Возврат СтруктураРезультата;
		
	КонецФункции
	
	Процедура ВыполнитьОчисткуДопСертификата(Организация) Экспорт
		
		НайденныеСтроки=	КонтекстДиадока.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НайденныеСтроки.Количество() > 0 Тогда
			УстановитьDiadocConnection(НайденныеСтроки);
		КонецЕсли;
		
	КонецПроцедуры
	
//} АВТОРИЗАЦИЯ

//{ РАБОТА С КОНТРАГЕНТАМИ
	
	Процедура ПринятьПриглашение(Counteragent, Комментарий) Экспорт
		
		Counteragent.AcquireCounteragent(Комментарий);
			
	КонецПроцедуры
	
	Функция ОбработатьНажатиеКнопкиПринять(ОбъектДД, ТекущийСтатус, ОрганизацияСсылка) Экспорт
		
		Если ТекущийСтатус = "InvitesMe" Тогда
			
			Попытка
				ПринятьПриглашение(ОбъектДД, "");
				Возврат	Истина;
			Исключение
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
				Возврат	Ложь;
			КонецПопытки;
			
		ИначеЕсли ТекущийСтатус = "RejectsMe" 
			  ИЛИ ТекущийСтатус = "IsRejectedByMe" Тогда
			
			ФормаВводаКомментария=				ПолучитьФорму("ФормаВводаКомментария", ЭтаФорма);
			ФормаВводаКомментария.Заголовок=	"Комментарий к отправке приглашения для контрагента " + ОбъектДД.Name;
			ФормаВводаКомментария.ВыборФайла=	Истина;
			ФормаВводаКомментария.Комментарий=	"Предлагаем обмениваться электронными документами.";
			ФормаВводаКомментария.ОткрытьМодально();
			
			Если ФормаВводаКомментария.НажатОК Тогда
				
				РезультатВыполнения= ПриглашениеКонтрагенту_НачатьВызов(ПолучитьЯщикДиадокДляОрганизации(ОрганизацияСсылка).ID, ОбъектДД.ID, "", ФормаВводаКомментария.Комментарий, ФормаВводаКомментария.ИмяФайла);
				
				Если РезультатВыполнения.Отказ Тогда
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(РезультатВыполнения.ОписаниеОшибки);
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ОбработатьНажатиеКнопкиЗаблокировать(ОбъектДД) Экспорт
		
		ФормаВводаКомментария=				ПолучитьФорму("ФормаВводаКомментария", ЭтаФорма);
		ФормаВводаКомментария.Заголовок=	"Блокировка контрагента: " + ОбъектДД.Name;
		ФормаВводаКомментария.ВыборФайла=	Ложь;
		ФормаВводаКомментария.Комментарий=	"";
		ФормаВводаКомментария.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыВыполнить.Текст=	"Заблокировать";
		ФормаВводаКомментария.ОткрытьМодально();
		
		Если ФормаВводаКомментария.НажатОК Тогда
			Попытка
				ОбъектДД.BreakWithCounteragent(ФормаВводаКомментария.Комментарий);
				Возврат Истина;
			Исключение 
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Процедура Заполнить_СоответствиеCounteragentID_Значением_IsTest_Только_IsMyCounteragent(Организация, СоответствиеCounteragentID) Экспорт
		
		Organization= ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		Если СоответствиеCounteragentID.Количество() > 10 Тогда
			
			Counteragents= Organization.GetCounteragentListByStatus("IsMyCounteragent");
			
			ВГраница= Counteragents.Count - 1;
			Для ИндексЦикла= 0 ПО ВГраница Цикл
				
				Counteragent= Counteragents.GetItem(ИндексЦикла);
				CounteragentID= Counteragent.ID;
				
				Если СоответствиеCounteragentID[CounteragentID] = NULL Тогда
					СоответствиеCounteragentID.Вставить(CounteragentID, Counteragent.IsTest);
				КонецЕсли;
				
			КонецЦикла;
			
			CounteragentID= Неопределено;
			Counteragent=	Неопределено;
			Counteragents= 	Неопределено;
			
		Иначе
			
			Для Каждого КлючИЗначение ИЗ СоответствиеCounteragentID Цикл
				
				Попытка
					Counteragent= Organization.GetCounteragentById(КлючИЗначение.Ключ);
				Исключение; КонецПопытки;
				
				Если Counteragent <> Неопределено Тогда
					Если Counteragent.GetStatus() = "IsMyCounteragent" Тогда
						СоответствиеCounteragentID.Вставить(КлючИЗначение.Ключ, Counteragent.IsTest);
					КонецЕсли;
				КонецЕсли;
				
				Counteragent= Неопределено;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция СписокКонтрагентовПоСпискуИНН_НачатьВызов(BoxID, СписокИНН, Отказ= Ложь) Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
	
		Если ТипЗнч(СписокИНН) = Тип("Массив") Тогда
			СтрокаИНН= МассивВСтроку(СписокИНН);
		Иначе
			СтрокаИНН= СписокИНН;
		КонецЕсли;
		
		Попытка
			РезультатВыполнения.Вставить("AsyncResult", Organization(BoxID).GetCounteragentListByInnList(СтрокаИНН));
		Исключение
			РезультатВыполнения.Отказ= Истина;
			РезультатВыполнения.ОписаниеОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	Функция СписокКонтрагентовПоСпискуИНН_ЗавершитьВызов(AsyncResult, ПоляCounteragent= "") Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
		
		Попытка
			ВызовЗвершен= AsyncResult.IsCompleted;
		Исключение
			РезультатВыполнения.Отказ= Истина;
			РезультатВыполнения.ОписаниеОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Если НЕ РезультатВыполнения.Отказ И ВызовЗвершен Тогда
			
			РезультатВыполнения.Вставить("Результат", Новый Массив);
			
			ВГраница= AsyncResult.Result.Count-1;
			
			Для ИндексЦикла= 0 ПО ВГраница Цикл
				
				Item= AsyncResult.Result.GetItem(ИндексЦикла);
				
				Если Item.Counteragent = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйContent= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").НовыйContent("Counteragent");
				
				Если ЗначениеЗаполнено(ПоляCounteragent) Тогда
					СократитьСтруктуру(НовыйContent, ПоляCounteragent, "Конструкторы");
				КонецЕсли;
				
				Counteragent= Item.Counteragent;
								
				ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьСтруктуруПоКонтенту(Counteragent, НовыйContent, "Counteragent");
				
				НовыйContent.Удалить("Конструкторы");
				
				Если НЕ ЗначениеЗаполнено(ПоляCounteragent) ИЛИ Найти(ПоляCounteragent, "CurrentStatus") > 0 Тогда
					НовыйContent.Вставить("CurrentStatus", Item.Counteragent.GetStatus());
				КонецЕсли;
				
				РезультатВыполнения.Результат.Добавить(НовыйContent);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	Функция ПриглашениеКонтрагенту_НачатьВызов(BoxID, CounteragentID, INN, Message, FileName) Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
	
		Попытка
			
			Файл = Новый Файл(FileName);
			Если Файл.Существует() Тогда
				AcquireCounteragentTask= Organization(BoxID).CreateAcquireCounteragentTask(FileName);
				AcquireCounteragentTask.FileName= Файл.Имя;
			Иначе 
				AcquireCounteragentTask= Organization(BoxID).CreateAcquireCounteragentTask();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(CounteragentID) Тогда
				AcquireCounteragentTask.CounteragentBoxId= CounteragentID;
			КонецЕсли;
			
			AcquireCounteragentTask.Inn= 	  INN;
			AcquireCounteragentTask.Message=  Message; 
						
			РезультатВыполнения.Вставить("AsyncResult", AcquireCounteragentTask.SendAsync());
			
		Исключение
			РезультатВыполнения.Отказ= Истина;
			РезультатВыполнения.ОписаниеОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	Функция ПриглашениеКонтрагенту_ЗавершитьВызов(AsyncResult) Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
		
		Попытка
			
			Если AsyncResult.IsCompleted Тогда
				РезультатВыполнения.Вставить("Результат", AsyncResult.Result);
			КонецЕсли;
			
		Исключение
			РезультатВыполнения.Отказ= Истина;
			РезультатВыполнения.ОписаниеОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	Функция РазорватьОтношениеПартнерства(BoxID, CounteragentID, Комментарий) Экспорт
		
		РезультатВыполнения= ШаблонРезультатаВыполненияФункции();
		
		Попытка
			Counteragent= Organization(BoxID).GetCounteragentById(CounteragentID);
			Counteragent.BreakWithCounteragent(Комментарий);
		Исключение
			РезультатВыполнения.Отказ= Истина;
			РезультатВыполнения.ОписаниеОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат РезультатВыполнения;
		
	КонецФункции
	
	// Получает ИдентификаторЭДО по BoxID с любого доступного ящика.
	//
	// Параметры:
	//  BoxID - Строка.
	//
	Функция ИдентификаторЭДО(BoxID) Экспорт
		
		Для Каждого СтрокаКонтекста Из КонтекстДиадока Цикл
			
			Если НЕ СтрокаКонтекста.ЗаблокированаПоAPI Тогда 
				Попытка
					FnsParticipantId = СтрокаКонтекста.Box.GetCounteragentById(BoxID).FnsParticipantId;
				Исключение КонецПопытки;
				
				Если ЗначениеЗаполнено(FnsParticipantId) Тогда
					Возврат FnsParticipantId;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат "";
		
	КонецФункции
	
//} РАБОТА С КОНТРАГЕНТАМИ

//{ РАБОТА С ЛЕНТОЙ СОБЫТИЙ

	Функция ИнициализироватьСтруктуруСобытия()
		
		СтруктураСобытия=	Новый Структура("ГруппаСобытий, ИмяСобытия, НаименованиеСобытия, СтруктураПараметров");
		
		Возврат СтруктураСобытия;
		
	КонецФункции
	
	Процедура ДобавитьСобытиеПригласилиМеня(МассивСобытий, Organization, InvitesList)
		
		Для Индекс = 0 По InvitesList.Count - 1 Цикл
			
			Counteragent=	InvitesList.GetItem(Индекс);
			
			ПараметрыСобытия=	Новый Структура();
			ПараметрыСобытия.Вставить("Counteragent", Counteragent);
			ПараметрыСобытия.Вставить("Organization", Organization);
			
			СтруктураСобытия=	ИнициализироватьСтруктуруСобытия();
			СтруктураСобытия.Вставить("ГруппаСобытий", "ТребуетОтвета");
			СтруктураСобытия.Вставить("ИмяСобытия", "ПригласилМеня");
			СтруктураСобытия.Вставить("НаименованиеСобытия", "Контрагент " + Counteragent.Name + " (" + Counteragent.INN + ") " + " хочет обмениваться электронными документами.");
			СтруктураСобытия.Вставить("ПараметрыСобытия", ПараметрыСобытия);
			
			МассивСобытий.Добавить(СтруктураСобытия);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьПоследниеСобытия()
		
		Попытка //Если ранее в базе дата сохранилась в неправильном формате - до введения типизации настроек ПВХ
			ПоследняяДатаАпдейта= Дата(ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПоследняяДатаОбновленияСпискаКонтрагентов", ТекущаяДата()));
		Исключение
			ПоследняяДатаАпдейта = ТекущаяДата();
		КонецПопытки;
		
		ТекПоследняяДата = ПоследняяДатаАпдейта;
		
		ТабДанные=	Новый ТаблицаЗначений;
		ТабДанные.Колонки.Добавить("LastEventTimestampTicks");
		ТабДанные.Колонки.Добавить("Organization");
		ТабДанные.Колонки.Добавить("Counteragent");
		ТабДанные.Колонки.Добавить("Новое");
		ТабДанные.Колонки.Добавить("Действие");
		
		Для каждого СтруктураСЗадачами Из МассивСтруктурСЗадачами Цикл
			
			InvitesTask=		СтруктураСЗадачами.ЗадачиПоСпискам.InvitesTask;
			InvitesList=		InvitesTask.Result;
			
			Для Индекс = 0 По InvitesList.Count - 1 Цикл
				
				Counteragent=	InvitesList.GetItem(Индекс);
				
				Если КэшПротух(СтруктураСЗадачами.Organization.Id, Counteragent.Id) = Истина Тогда
					
					НовоеСобытие=							ТабДанные.Добавить();
					НовоеСобытие.LastEventTimestampTicks=	Counteragent.LastEventTimestampTicks;
					НовоеСобытие.Organization=				СтруктураСЗадачами.Organization;
					НовоеСобытие.Counteragent=				Counteragent;
					Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
						НовоеСобытие.Новое=	Истина;
					Иначе
						НовоеСобытие.Новое=	Ложь;
					КонецЕсли;
					НовоеСобытие.Действие=	"пригласил";
					
				КонецЕсли;
				
			КонецЦикла;
			
			MyCounteragentTask=	СтруктураСЗадачами.ЗадачиПоСпискам.MyCounteragentTask;
			MyCounteragentList=	MyCounteragentTask.Result;
			
			Для Индекс = 0 По MyCounteragentList.Count - 1 Цикл
				
				Counteragent=	MyCounteragentList.GetItem(Индекс);
				
				НовоеСобытие=							ТабДанные.Добавить();
				НовоеСобытие.LastEventTimestampTicks=	Counteragent.LastEventTimestampTicks;
				НовоеСобытие.Organization=				СтруктураСЗадачами.Organization;
				НовоеСобытие.Counteragent=				Counteragent;
				Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
					НовоеСобытие.Новое=	Истина;
				Иначе
					НовоеСобытие.Новое=	Ложь;
				КонецЕсли;
				НовоеСобытие.Действие=	"принял";
				
			КонецЦикла;
			
			RejectedTask=		СтруктураСЗадачами.ЗадачиПоСпискам.RejectedTask;
			RejectedList=		RejectedTask.Result;
			
			Для Индекс = 0 По RejectedList.Count - 1 Цикл
				
				Counteragent=	RejectedList.GetItem(Индекс);
				
				Если Counteragent.GetStatus() = "RejectsMe" Тогда
					
					НовоеСобытие=							ТабДанные.Добавить();
					НовоеСобытие.LastEventTimestampTicks=	Counteragent.LastEventTimestampTicks;
					НовоеСобытие.Organization=				СтруктураСЗадачами.Organization;
					НовоеСобытие.Counteragent=				Counteragent;
					Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
						НовоеСобытие.Новое=	Истина;
					Иначе
						НовоеСобытие.Новое=	Ложь;
					КонецЕсли;
					НовоеСобытие.Действие=	"заблокировал";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТабДанные.Сортировать("LastEventTimestampTicks Убыв");
		
		МассивСтрок=	Новый Массив();
		Для Индекс = 0 По ТабДанные.Количество() - 1 Цикл
			
			Если Индекс = 15 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаДанных=	ТабДанные[Индекс];
			МассивСтрок.Добавить(СтрокаДанных);
			
			Если СтрокаДанных.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
				ПоследняяДатаАпдейта=	СтрокаДанных.LastEventTimestampTicks;
			КонецЕсли;
			
		КонецЦикла;

		ПоследниеСобытия=	ТабДанные.Скопировать(МассивСтрок);
				
		Если ТекПоследняяДата <> ПоследняяДатаАпдейта Тогда
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПоследняяДатаОбновленияСпискаКонтрагентов", ПоследняяДатаАпдейта);
		КонецЕсли;	

		Возврат ПоследниеСобытия;
		
	КонецФункции
	
	Функция КэшПротух(OrganizationId, CounteragentId)
		
		ОтборСтрок=	Новый Структура("OrganizationId, CounteragentId", OrganizationId, CounteragentId);
		
		НайденныеСтроки=	ThirtySecondsToCache.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаКэша=	НайденныеСтроки[0];
			Если СтрокаКэша.TimeUpdate < (ТекущаяДата() - 30) Тогда
				ThirtySecondsToCache.Удалить(СтрокаКэша);
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Процедура ЗапуститьПолучениеСписковКонтрагентов() Экспорт
		
		МассивСтруктурСЗадачами = Новый Массив();
		
		Для каждого ТекОрганизация Из КонтекстДиадока Цикл
			
			Если НЕ ТекОрганизация.ЗаблокированаПоAPI Тогда 
				
				Organization = ТекОрганизация.Box;
			
				MyCounteragentTask = Organization.GetCounteragentListByStatusAsync("IsMyCounteragent");
				RejectedTask =		 Organization.GetCounteragentListByStatusAsync("Rejected");
				InvitesTask =		 Organization.GetCounteragentListByStatusAsync("InvitesMe");
				
				ЗадачиПоСпискам =	Новый Структура();
				ЗадачиПоСпискам.Вставить("MyCounteragentTask", 	MyCounteragentTask);
				ЗадачиПоСпискам.Вставить("RejectedTask", 		RejectedTask);
				ЗадачиПоСпискам.Вставить("InvitesTask", 		InvitesTask);
				
				СтруктураСоСписками =	Новый Структура();
				СтруктураСоСписками.Вставить("Organization", 	Organization);
				СтруктураСоСписками.Вставить("ЗадачиПоСпискам", ЗадачиПоСпискам);
				
				МассивСтруктурСЗадачами.Добавить(СтруктураСоСписками);
				
			КонецЕсли;

		КонецЦикла;
		
	КонецПроцедуры
	
	Функция СпискиПолучены() Экспорт
		
		Для каждого ЭлементМассива Из МассивСтруктурСЗадачами Цикл
			ЗадачиПоСпискам=	ЭлементМассива.ЗадачиПоСпискам;
			Если ЗадачиПоСпискам.InvitesTask.IsCompleted = Ложь
				ИЛИ ЗадачиПоСпискам.MyCounteragentTask.IsCompleted = Ложь
				ИЛИ ЗадачиПоСпискам.RejectedTask.IsCompleted = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат Истина;
		
	КонецФункции
	
	Функция ЕстьНовыеСобытия() Экспорт
		
		Попытка //Если ранее в базе дата сохранилась в неправильном формате - до введения типизации настроек ПВХ
			ПоследняяДатаАпдейта= Дата(ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПоследняяДатаОбновленияСпискаКонтрагентов", ТекущаяДата()));
		Исключение
			ПоследняяДатаАпдейта = ТекущаяДата();
		КонецПопытки;
		
		Для каждого СтруктураСЗадачами Из МассивСтруктурСЗадачами Цикл
			
			ЗадачиПоСпискам=	СтруктураСЗадачами.ЗадачиПоСпискам;
			
			InvitesList=	ЗадачиПоСпискам.InvitesTask.Result;
			Для Индекс = 0 По InvitesList.Count - 1 Цикл
				Counteragent=	InvitesList.GetItem(Индекс);
				Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
			MyCounteragentList=	ЗадачиПоСпискам.MyCounteragentTask.Result;
			Для Индекс = 0 По MyCounteragentList.Count - 1 Цикл
				Counteragent=	MyCounteragentList.GetItem(Индекс);
				Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
			RejectedList=	ЗадачиПоСпискам.RejectedTask.Result;
			Для Индекс = 0 По RejectedList.Count - 1 Цикл
				Counteragent=	RejectedList.GetItem(Индекс);
				Если Counteragent.LastEventTimestampTicks > ПоследняяДатаАпдейта Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПолучитьГуидСсылки(Organization, Counteragent)
		
		ГуидСсылки=	Строка(Новый УникальныйИдентификатор());
		
		НоваяСтрока=				ТаблицаСоответствийHTMLСсылок.Добавить();
		НоваяСтрока.Гуид=			ГуидСсылки;
		НоваяСтрока.Organization=	Organization;
		НоваяСтрока.Counteragent=	Counteragent;
		
		Возврат ГуидСсылки;
		
	КонецФункции
	
	Функция СформироватьHTMLПредставлениеЛенты() Экспорт
		
		ТаблицаСоответствийHTMLСсылок=	Новый ТаблицаЗначений;
		ТаблицаСоответствийHTMLСсылок.Колонки.Добавить("ГУИД");
		ТаблицаСоответствийHTMLСсылок.Колонки.Добавить("Organization");
		ТаблицаСоответствийHTMLСсылок.Колонки.Добавить("Counteragent");
		
		ТаблицаПоследнихСобытий=	ПолучитьПоследниеСобытия();
		
		HTMLДокумент= 	
		"<style>
		|
		|p1 {font-family: 'Arial', Arial, serif; font-size: 11pt; }
		|p2 {margin-top: 0.2em; margin-bottom: 0.2em; font-family: 'Arial', Arial, serif; font-size: 10pt; }
		|p {margin-top: 0.2em; margin-bottom:0.2em; font-family: 'Arial', Arial, serif; font-size: 9pt;}
		|
		|h1
		|
		|.left_block {
		|display: block;
		|float: left; 
		|}
		|
		|.block_event {
		|display: block;
		|margin-bottom: 10px;
		|margin-top: 10px;
		|}
		|
		|.block_event_date {
		|display: block;
		|margin-bottom: 1px;
		|margin-top: 1px;
		|color: gray;
		|}
		|
		|.new_event_message {
		|display: block;
		|margin-bottom: 1px;
		|margin-top: 1px;
		|color: black;
		|}
		|
		|.old_event_message {
		|display: block;
		|margin-bottom: 1px;
		|margin-top: 1px;
		|color: gray;
		|}
		|
		|.block_old_event {
		|border-top-width: 1px;
		|border-top-style: solid;
		|border-top-color:  Gray;
		|margin-bottom: 5px;
		|margin-top:5px;
		|color:Gray !important;
		|}
		|
		|.message_locked {
		|color:Firebrick;
		|}
		|
		|.message_accept {
		|color:ForestGreen;
		|}
		|
		|.button_accept {
		|width: 90px;
		|height: 26px;
		|background-image:url(data:image/png;base64,"+Base64Строка(ЭДО_БиблиотекаКартинок().КартинкаКнопкиПринятьПриглашение.ПолучитьДвоичныеДанные())+");
		|cursor:pointer;
		|float: left;
		|}
		|
		|.button_reject {
		|width: 90px;
		|height: 26px;
		|background-image:url(data:image/png;base64,"+Base64Строка(ЭДО_БиблиотекаКартинок().КартинкаКнопкиОтказатьсяОтПриглашения.ПолучитьДвоичныеДанные())+");
		|cursor:pointer;			|
		|</style>";
			
		HTMLДокумент= HTMLДокумент + "<body>";
		
		HTMLДокумент= HTMLДокумент +
		"<div class=""block_left""><h3>Уведомления</h3>" +
		"<div>";
				
		БлокНовых=	Истина;
		КоличествоПриглашений = 0;
		КоличесствоНовыхПриглашений = 0;
		Для каждого СтрокаПоследнегоСобытия Из ТаблицаПоследнихСобытий Цикл
			
			Если БлокНовых И СтрокаПоследнегоСобытия.Новое = Ложь Тогда
				HTMLДокумент=	HTMLДокумент + "<div class=""block_old_event""></div>";
				БлокНовых=		Ложь;
			КонецЕсли;
			
			HTMLДокумент=	HTMLДокумент + "<div class=""block_event"">";
				HTMLДокумент=	HTMLДокумент + "<div class=""block_event_date""><p>" + Формат(СтрокаПоследнегоСобытия.LastEventTimestampTicks, "ДФ='dd MMMM ЧЧ:мм'") + "</p></div>";
				HTMLДокумент=	HTMLДокумент + "<div " + ?(СтрокаПоследнегоСобытия.Новое, "class=""new_event_message""", "class=""old_event_message""") + ">";
					Если СтрокаПоследнегоСобытия.Действие = "заблокировал" Тогда
						HTMLДокумент=	HTMLДокумент + 
							"<p>" + СтрокаПоследнегоСобытия.Counteragent.Name + " (" + СтрокаПоследнегоСобытия.Counteragent.INN + ") " 
							+ "<span " + ?(СтрокаПоследнегоСобытия.Новое, "class=""message_locked""", "")+ ">заблокировал вас</span></p>";
					ИначеЕсли СтрокаПоследнегоСобытия.Действие = "принял" Тогда
						HTMLДокумент=	HTMLДокумент + 
							"<p>" + СтрокаПоследнегоСобытия.Counteragent.Name + " (" + СтрокаПоследнегоСобытия.Counteragent.INN + ") " 
							+ "<span " + ?(СтрокаПоследнегоСобытия.Новое, "class=""message_accept""", "") + ">принял приглашение</span></p>";
					ИначеЕсли СтрокаПоследнегоСобытия.Действие = "пригласил" Тогда
						ГуидСсылки=		ПолучитьГуидСсылки(СтрокаПоследнегоСобытия.Organization, СтрокаПоследнегоСобытия.Counteragent);
						HTMLДокумент=	HTMLДокумент + "<p>" + СтрокаПоследнегоСобытия.Counteragent.Name + " (" + СтрокаПоследнегоСобытия.Counteragent.INN + ") приглашает обмениваться документами<br>" + 
														"<div class=""button_accept""" + " onclick=""location.href='#Принять&" + ГуидСсылки + "#'""></div>" + 
														"<div class=""button_reject""" + " onclick=""location.href='#Отказать&" + ГуидСсылки + "#'""></div></br></p>";
						КоличествоПриглашений = КоличествоПриглашений +1;
						Если  БлокНовых Тогда
							КоличесствоНовыхПриглашений = КоличесствоНовыхПриглашений +1;
						КонецЕсли;	
					КонецЕсли;
				HTMLДокумент=	HTMLДокумент + "</div>";
			HTMLДокумент=	HTMLДокумент + "</div>";
			
		КонецЦикла;
		
		HTMLДокумент=	HTMLДокумент + 
		"</div></div>
		|
		|</<body>";
		
		Возврат Новый Структура("HTMLДокумент, КоличествоПриглашений, КоличесствоНовыхПриглашений",HTMLДокумент, КоличествоПриглашений, КоличесствоНовыхПриглашений) ;
		
	КонецФункции

	Процедура ОбработатьДействиеЛенты(ТекстСсылки) Экспорт
		
		Если Найти(ТекстСсылки, "Принять&") > 0 Тогда
			Действие=	"Принять&";
		Иначе
			Действие=	"Отказать&";
		КонецЕсли;
		ТекстСсылки=	СтрЗаменить(ТекстСсылки, Действие, "");
		Действие=		СтрЗаменить(Действие, "&", "");
		
		НайденноеСоответствие=	ТаблицаСоответствийHTMLСсылок.Найти(ТекстСсылки);
		Если НЕ НайденноеСоответствие = Неопределено Тогда
			
			Если Действие = "Принять" Тогда
				Ответ=	Вопрос("Принять приглашение контрагента " + НайденноеСоответствие.Counteragent.Name + " (" + НайденноеСоответствие.Counteragent.Inn + ")?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Да, "Диадок");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПринятьПриглашение(НайденноеСоответствие.Counteragent, "");
					СтрокаКэша=	ThirtySecondsToCache.Добавить();
					СтрокаКэша.OrganizationId=	НайденноеСоответствие.Organization.Id;
					СтрокаКэша.CounteragentId=	НайденноеСоответствие.Counteragent.Id;
					СтрокаКэша.Действие=		"принял";
					СтрокаКэша.TimeUpdate=		ТекущаяДата();
					ЗафиксироватьСобытиеGA("Форма_Основная",   "invitation-accepted",1 );
				КонецЕсли;
			Иначе
				Если ОбработатьНажатиеКнопкиЗаблокировать(НайденноеСоответствие.Counteragent) = Истина Тогда
					СтрокаКэша=	ThirtySecondsToCache.Добавить();
					СтрокаКэша.OrganizationId=	НайденноеСоответствие.Organization.Id;
					СтрокаКэша.CounteragentId=	НайденноеСоответствие.Counteragent.Id;
					СтрокаКэша.Действие=		"заблокировал";
					СтрокаКэша.TimeUpdate=		ТекущаяДата();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} РАБОТА С ЛЕНТОЙ СОБЫТИЙ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	Процедура Assert(УсловиеКотороеДолжноБытьИстино, ТекстИсключенияЕслиПлохо)
		Если НЕ УсловиеКотороеДолжноБытьИстино Тогда
			ВызватьИсключение ТекстИсключенияЕслиПлохо;
		КонецЕсли;
	КонецПроцедуры
	
	Функция ПолучитьOrganizationId(Организация) 
		OrganizationId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(Организация);
		Assert(НЕ ПустаяСтрока(OrganizationId), "Организация """ + Организация + """ не сопоставлена с организацией в Диадоке");
		Возврат OrganizationId
	КонецФункции
	
	Функция ПолучитьCounteragentId(Контрагент)
		
		CounteragentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(Контрагент);
		Assert(НЕ ПустаяСтрока(CounteragentId), "Контрагент """ + Контрагент + """ не сопоставлен с контрагентом в Диадоке");
		
		Возврат CounteragentId;
		
	КонецФункции
	
	Функция МассивДокументов_2_массивDocumentId(МассивДокументов)
		
		МассивDocumentId = Новый Массив;
		Для каждого Док из МассивДокументов Цикл 
			Если Док.ЭтоСчетНаОплату Тогда 
				DocId =   ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Док.Ссылка, "NonformalizedProforma");
			Иначе 	
				DocId =   ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Док.Ссылка);
			КонецЕсли;	
			Если ЗначениеЗаполнено(DocId) Тогда
				МассивDocumentId.Добавить(DocId);
			КонецЕсли;
		КонецЦикла;	  
		
		Возврат МассивDocumentId;
		
	КонецФункции	
	
	Функция  ПолучитьМассивParentDocumentId(ДокументСсылка, Organization, DocumentType, ParentDocumentId, ЭтоКорректировкаИсправление =Ложь)
		МассивРодительскихДокументов =  ПолучитьМассивРодительскихДокументов(ДокументСсылка, DocumentType,  ЭтоКорректировкаИсправление);
		массивParentDocumentId = МассивДокументов_2_массивDocumentId(МассивРодительскихДокументов);
		
		Если ЗначениеЗаполнено(ParentDocumentId) и (массивParentDocumentId.найти(ParentDocumentId)=Неопределено) Тогда 
			массивParentDocumentId.добавить(ParentDocumentId)
		КонецЕсли;	
		Возврат  массивParentDocumentId
	КонецФункции 
	
	Функция ПолучитьМассивПодчиненныхДокументов(ДокументСсылка, DocumentType, ДокументОснованиеДляУПДСчфДоп = Неопределено) Экспорт 
		
		МассивПодчиненныхДокументов = Новый Массив;
		
		Если DocumentType <> "NonformalizedProforma" Тогда
			
			СсылкаСФ = Модуль_ИнтеграцияОбщий.ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию(ДокументСсылка);
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СсылкаСФ, Ложь));
			
		ИначеЕсли ЗначениеЗаполнено(ДокументОснованиеДляУПДСчфДоп) Тогда 
			
			//счет на оплату в пакете с УПД СчфДоп
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументОснованиеДляУПДСчфДоп, Ложь));
			
		ИначеЕсли ЭтоРТУ(ДокументСсылка) Тогда 
			
			//счет на оплату на основании рту
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументСсылка, Ложь));
			
		ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоСчетНаОплату(ДокументСсылка) Тогда 
			
			//счет на оплату на основании счета на оплату
			МассивРТУ = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРТУПоСчетуНаОплату(ДокументСсылка);
			Для Каждого Док Из МассивРТУ Цикл 
				МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаоплату", Док, Ложь));
			КонецЦикла;
			
		ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоЗаказПокупателя(ДокументСсылка)  Тогда 
			
			//счет на оплату на основании заказа покупателя
			МассивРТУ = Модуль_ИнтеграцияОбщий.ПолучитьМассивСсылокРТУПоСчетуНаОплату(ДокументСсылка);
			Для Каждого Док Из МассивРТУ Цикл 
				МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаоплату", Док, Ложь));
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат  МассивПодчиненныхДокументов;
		
	КонецФункции	
	
	Функция ПолучитьмассивSubordinateDocumentId(ДокументСсылка, Organization, DocumentType)
		МассивПодчиненныхДокументов =  ПолучитьМассивПодчиненныхДокументов(ДокументСсылка, DocumentType);
		массивSubordinateDocumentId = МассивДокументов_2_массивDocumentId(МассивПодчиненныхДокументов);
		Возврат массивSubordinateDocumentId;
	КонецФункции	
	
	Функция ОбновитьметкуВремени(Document) Экспорт 
		выборка = КэшМетокВремени.НайтиСтроки(Новый Структура("DocumentType, OrganizationId",Document.Type, Document.Organization.Id ));
		Если (выборка.Количество()>0) и ( выборка[0].Timestamp < Document.Timestamp) Тогда 
			выборка[0].Timestamp = Document.Timestamp;
			выборка[0].UpdateTime = текущаяДата();
		КонецЕсли;
	КонецФункции	
	
	Функция ПолучитьМеткуВремениИзКэша( DocumentType, Organization) 
		Гуид = строка(Новый уникальныйИдентификатор());
		выборка = КэшМетокВремени.НайтиСтроки(Новый Структура("DocumentType, OrganizationId",DocumentType, Organization.Id ));
		Если (выборка.Количество()>0) и (выборка[0].UpdateTime +15>текущаяДата() )  Тогда
			Timestamp = выборка[0].Timestamp
		иначе 
			UpdateTime =  текущаяДата();
			Timestamp =   ПолучитьМеткуВремениПоDocumentType(DocumentType, Organization);
			Если  выборка.Количество()=0 Тогда 
				стр = КэшМетокВремени.Добавить();
				стр.DocumentType =  DocumentType;
				стр.OrganizationId =  Organization.Id ;
			иначе 
				стр =  выборка[0];
			КонецЕсли;
			стр.Timestamp = Timestamp;
			стр.UpdateTime = UpdateTime;
		КонецЕсли;	 
		Возврат Timestamp;
		
	КонецФункции 
	
	Функция ПолучитьМеткуВремениПоDocumentType(DocumentType, Organization)
		//DocumentTypeFilter = ?(Найти(DocumentType, "Invoice") <> 0, "Invoice", DocumentType);
		Попытка
			
			getDocumentsTask =  Organization.getDocumentsTask();
			getDocumentsTask.FromSendDate 	=  ТекущаяДата()- 3600 * 24 * 10;
			getDocumentsTask.ToSendDate 	=  ТекущаяДата() + 3600 * 24 * 10;
			getDocumentsTask.Category		=  DocumentType + ".Outbound";
			getDocumentsTask.Top100			=  Истина;
			Docs		 				=  getDocumentsTask.getDocuments();
			Возврат ?(Docs.Count>0, Docs.GetItem(0).Timestamp, Дата("00010101"));
			
		Исключение
			Вызватьисключение(ОписаниеОшибки());
		КонецПопытки;
		
	КонецФункции
	
	Функция НайтиDepartmentПоКППВДереве(массивDepartment, КПП)
		
		Для Счетчик = 0 По (массивDepartment.Count - 1) Цикл
			department=	массивDepartment.GetItem(Счетчик);
			Если department.Kpp = КПП Тогда
				Возврат department;
			КонецЕсли;
			
			department = НайтиDepartmentПоКППВДереве(department.Subdepartments, КПП);
			Если department <> Неопределено Тогда
				Возврат department;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
	Функция ПодучитьИдПодразделениеОтправителя(Organization, DepartmentKpp) 
		Если ПустаяСтрока(DepartmentKpp) Тогда
			Возврат "";
		КонецЕсли;
		
		department = НайтиDepartmentПоКППВДереве(Organization.Departments, DepartmentKpp);
		
		Если department <> Неопределено Тогда
			Возврат department.Id;
		иначе 
			Возврат "";
		КонецЕсли;
	КонецФункции
	
	Функция ВыделитьСлово(ИсходнаяСтрока)
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, " ");
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;
		
	КонецФункции
	
	Процедура DocumentToSend_ДобавитьСвязиСДокументами(DocumentToSend, ПараметрыDocument)
		
		Если ПараметрыDocument.Свойство("InitialDocuments") Тогда
			
			Если ТипЗнч(ПараметрыDocument.InitialDocuments) = Тип("Массив") Тогда
				
				Для Каждого InitialDocument ИЗ ПараметрыDocument.InitialDocuments Цикл
					DocumentToSend.AddInitialDocument(InitialDocument);
				КонецЦикла;
				
			Иначе
				DocumentToSend.AddInitialDocument(ПараметрыDocument.InitialDocuments);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыDocument.Свойство("InitialDocumentsFromPackage") Тогда
			
			Если ТипЗнч(ПараметрыDocument.InitialDocuments) = Тип("Массив") Тогда
				
				Для Каждого InitialDocumentFromPackage ИЗ ПараметрыDocument.InitialDocumentsFromPackage Цикл
					DocumentToSend.AddInitialDocumentFromPackage(InitialDocumentFromPackage);
				КонецЦикла;
				
			Иначе
				DocumentToSend.AddInitialDocumentFromPackage(ПараметрыDocument.InitialDocumentsFromPackage);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыDocument.Свойство("SubordinateDocuments") Тогда
			
			Если ТипЗнч(ПараметрыDocument.SubordinateDocuments) = Тип("Массив") Тогда
				
				Для Каждого SubordinateDocument ИЗ ПараметрыDocument.SubordinateDocuments Цикл
					DocumentToSend.AddSubordinateDocument(SubordinateDocument);
				КонецЦикла;
				
			Иначе
				DocumentToSend.AddSubordinateDocument(ПараметрыDocument.SubordinateDocuments);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыDocument.Свойство("SubordinateDocumentsFromPackage") Тогда
			
			Если ТипЗнч(ПараметрыDocument.SubordinateDocumentsFromPackage) = Тип("Массив") Тогда
				
				Для Каждого SubordinateDocumentFromPackage ИЗ ПараметрыDocument.SubordinateDocumentsFromPackage Цикл
					DocumentToSend.AddSubordinateDocumentFromPackage(SubordinateDocumentFromPackage);
				КонецЦикла;
				
			Иначе
				DocumentToSend.AddSubordinateDocumentFromPackage(ПараметрыDocument.SubordinateDocumentsFromPackage);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция СертификатыОрганизации(Организация1С, BoxID = Неопределено) Экспорт
		
		МассивСертификатов = Новый Массив;
		
		СтрокаКонтекста = СтрокаКонтекста(Организация1С);
		
		Если BoxID = Неопределено Тогда
			BoxID = СтрокаКонтекста.BoxID;
		КонецЕсли;
		
		Certificates = СтрокаКонтекста.Box.GetCounteragentById(BoxID).GetCertificates();
		
		ВГраница = Certificates.Count - 1;
		Для ИндексЦикла = 0 ПО ВГраница Цикл
			МассивСертификатов.Добавить(Certificates.GetItem(ИндексЦикла));
		КонецЦикла;
		
		Возврат МассивСертификатов;
		
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{ ОПЕРАЦИИ С ДОКУМЕНТАМИ
	
	//{ ОТПРАВКА ДОКУМЕНТА
						
		Функция SendNonformalizedDocument(Organization, ПутьКФайлу, ИмяФайла, Комментарий, CounteragentId, ДатаДокумента, номерДокумента, ТребуетсяПодпись, InitialDocumentId, SubordinateDocumentId="", ToDepartmentId="", DelaySend, IsTest)
			
			SendTask = Organization.CreateSendTaskFromFile(ПутьКФайлу, "NonformilizedDocumentContent");
			SendTask.CounterAgentId = CounteragentId;
			SendTask.Comment = Комментарий;
			SendTask.ToDepartmentId = ToDepartmentId;
			SendTask.DelaySend = DelaySend;
			SendTask.FileName = ИмяФайла;
			
			Если ЗначениеЗаполнено(InitialDocumentId) Тогда 
				SendTask.AddInitialDocument(InitialDocumentId)
			КонецЕсли;
			
			Если ЗначениеЗаполнено(SubordinateDocumentId) Тогда 
				SendTask.AddSubordinateDocument(SubordinateDocumentId)
			КонецЕсли;
			
			
			SendTask.Content.date =  ДатаДокумента;
			SendTask.Content.Number  =  номерДокумента;
			SendTask.Content.NeedRecipientSignature  =  ТребуетсяПодпись;
			
			Doc = SendTask.Send();
			
			Возврат Doc.DocumentId;
		КонецФункции
		
		Функция ОтправитьНеформализованныеДокументы1(Организация, CounteragentId, ПодразделениеКонтрагента, МассивФайлов, ParentIDпар, ОтправкаДокументаНаСогласование, isTest = Неопределено, ЗапрашиватьОтветнуюПодпись = истина) Экспорт
			
			OrganizationId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(Организация);
			Assert(НЕ ПустаяСтрока(OrganizationId), "Организация """ + Организация + """ не сопоставлена с организацией в Диадоке");
			Organization = ПолучитьЯщикДиадокДляОрганизации(Организация); 
			
			Если isTest = Неопределено Тогда
				isTest = ?(Organization.IsTest ИЛИ Organization.GetCounteragentById(CounteragentId).IsTest, Истина, Ложь);
			КонецЕсли;
			
			Если НЕ isTest И Organization.AuthenticateType <> "Certificate" и НЕ ОтправкаДокументаНаСогласование Тогда
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок("Пользователь под логином может отправлять только тестовые документы");
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				ParentId = SendNonformalizedDocument(Organization, МассивФайлов[0].ПутьКФайлу, МассивФайлов[0].ИмяФайла,МассивФайлов[0].Комментарий,CounteragentId, Строка(ТекущаяДата()), " ", ЗапрашиватьОтветнуюПодпись,?(ПустаяСтрока(ParentIDпар),Null,ParentIDпар),,,ОтправкаДокументаНаСогласование,isTest);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Если Найти(ТекстОшибки, "MessageToPost.FromBoxId and MessageToPost.ToBoxId properties should differ")>0 Тогда 
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок("Отправитель и Получатель должны быть различными. Файлы не переданы.");
					Возврат Ложь;
				Иначе
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ТекстОшибки);
					Возврат Ложь;
				КонецЕсли;
			КонецПопытки;
			
			Если МассивФайлов.Количество() > 1 Тогда
				Для К = 1 по МассивФайлов.Количество()-1 Цикл
					Попытка
						Если ПодразделениеКонтрагента = Неопределено Тогда
							ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", ЗапрашиватьОтветнуюПодпись, ?(ПустаяСтрока(ParentIDпар), ParentId, ParentIDпар), , , ОтправкаДокументаНаСогласование, isTest);
						Иначе
							ID = SendNonformalizedDocument(Organization, МассивФайлов[К].ПутьКФайлу, МассивФайлов[К].ИмяФайла,МассивФайлов[К].Комментарий, CounteragentId, Строка(ТекущаяДата()), " ", ЗапрашиватьОтветнуюПодпись, ?(ПустаяСтрока(ParentIDпар), ParentId, ParentIDпар), , ПодразделениеКонтрагента, ОтправкаДокументаНаСогласование, isTest);
						КонецЕсли;
					Исключение
						ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
						Возврат Ложь;
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
			
			Возврат Истина;
			
		КонецФункции
		
		Процедура ОтправитьПакетФайлов(ПараметрыPackageSendTask, Отказ= Ложь) Экспорт
			
			PackageSendTask= ПолучитьЯщикДиадокДляОрганизации(ПараметрыPackageSendTask.Организация).CreatePackageSendTask();
			
			PackageSendTask.CounterAgentID= ПараметрыPackageSendTask.CounterAgentID;
			
			ПараметрыPackageSendTask.Свойство("FromDepartmentID", PackageSendTask.FromDepartmentID);
			ПараметрыPackageSendTask.Свойство("ToDepartmentID"	, PackageSendTask.ToDepartmentID  );
			ПараметрыPackageSendTask.Свойство("IsDraft"			, PackageSendTask.IsDraft		  );
			ПараметрыPackageSendTask.Свойство("IsInternal"		, PackageSendTask.IsInternal	  );
			ПараметрыPackageSendTask.Свойство("LockPackage"		, PackageSendTask.LockPackage	  );
			ПараметрыPackageSendTask.Свойство("DelaySend"		, PackageSendTask.DelaySend		  );
			ПараметрыPackageSendTask.Свойство("OperationId"		, PackageSendTask.OperationId	  );
			
			Для Каждого NonformalizedDocument ИЗ ПараметрыPackageSendTask.NonformalizedDocuments Цикл
				ОтправитьПакетФайлов_ДобавитьФайлВПакет(PackageSendTask, NonformalizedDocument);
			КонецЦикла;
			
			Попытка
				DocumentPackage= PackageSendTask.Send();
			Исключение
				СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаОтправкиФайлов", ОписаниеОшибки());
				Отказ= Истина;
			КонецПопытки;
			
			Если НЕ Отказ И ПараметрыPackageSendTask.Свойство("ResolutionRequestTask") Тогда
				ОтправитьПакетНаОбработку(ПараметрыPackageSendTask.ResolutionRequestTask, DocumentPackage);
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ОтправитьПакетФайлов_ДобавитьФайлВПакет(PackageSendTask, ПараметрыNonformalizedDocument)
			
			NonformalizedDocumentToSend= PackageSendTask.AddDocumentFromFile("Nonformalized", ПараметрыNonformalizedDocument.Path);
			
			NonformalizedDocumentToSend.DocumentDate= ПараметрыNonformalizedDocument.DocumentDate;
			
			ПараметрыNonformalizedDocument.Свойство("FileName"			   	, NonformalizedDocumentToSend.FileName			   	);
			ПараметрыNonformalizedDocument.Свойство("DocumentNumber"	   	, NonformalizedDocumentToSend.DocumentNumber		);
			ПараметрыNonformalizedDocument.Свойство("Comment"			   	, NonformalizedDocumentToSend.Comment			   	);
			ПараметрыNonformalizedDocument.Свойство("CustomDocumentId"	   	, NonformalizedDocumentToSend.CustomDocumentId	   	);
			ПараметрыNonformalizedDocument.Свойство("NeedRecipientSignature", NonformalizedDocumentToSend.NeedRecipientSignature);
			
			DocumentToSend_ДобавитьСвязиСДокументами(NonformalizedDocumentToSend, ПараметрыNonformalizedDocument);
			
		КонецПроцедуры
		
	//} ОТПРАВКА ДОКУМЕНТА
	
	//{ ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ
	
		Функция ОтправитьПакет(ПараметрыSendTask, ТаблицаСоответствияCustomIdСсылке1С) Экспорт
			
			ЗаполненныйSendTask = ПолучитьЗаполненныйPackageSendTask(ПараметрыSendTask, ТаблицаСоответствияCustomIdСсылке1С);
			
			ЗаблокированныеДокументы 	= Новый Соответствие;
			МассивСтрокНаВыгрузку 		= ПараметрыSendTask.МассивДокументовПакета;
			
			Для каждого СтрокаНаОтправку из МассивСтрокНаВыгрузку Цикл
				
				ТекущаяБлокировка = Неопределено;
				Если НЕ ЗаблокированныеДокументы[СтрокаНаОтправку.Документ] = Неопределено Тогда 
					ТекущаяБлокировка = ЗаблокированныеДокументы.Получить(СтрокаНаОтправку.Документ);
				КонецЕсли;
					
				ЗаблокированныйОбъект = ЗаблокироватьДокументПриВыгрузкеПакетаВДиадок(СтрокаНаОтправку.Документ, СтрокаНаОтправку.DocumentType, СтрокаНаОтправку.ВнешняяПечатнаяФорма, ТекущаяБлокировка);
				Если НЕ ЗаблокированныйОбъект = Неопределено Тогда
					ЗаблокированныеДокументы.Вставить(СтрокаНаОтправку.Документ, ЗаблокированныйОбъект);
				КонецЕсли;
				
			КонецЦикла;
			
			Package = ВыполнитьОтправкуПакетаДокументов(ЗаполненныйSendTask.SendTask, ЗаполненныйSendTask.Organization, ТаблицаСоответствияCustomIdСсылке1С, ЗаблокированныеДокументы);
		
			ОбработатьОтправленныйПакетДокументов(Package, ТаблицаСоответствияCustomIdСсылке1С, ПараметрыSendTask.ПараметрыОтправкиНаСогласование, ЗаблокированныеДокументы);
			
			МассивDocuments = Новый Массив;
			Для Ц=0 по Package.Documents.Count - 1 Цикл
				Document = Package.Documents.GetItem(Ц);
				МассивDocuments.Добавить(Document); 
			КонецЦикла;
								
			Возврат МассивDocuments;
			
		КонецФункции
		
		Функция ВыполнитьОтправкуПакетаДокументов(PackageSendTask, Organization, ТаблицаСоответствияCustomIdСсылке1С, ЗаблокированныеДокументы)
			
			Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
				DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
				Если ЭтоФормализованныйДокумент(DocumentType(DocumentToSend)) Тогда
					ПроверитьСертификат(Organization.Id);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//транзакция по отправке пакета документов   
			Попытка

				Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
					
					DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
					
					CustomDocumentId = DocumentToSend.CustomDocumentId;
					
					МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
					ДокументСсылка 			= МассивСсылокВ1С[0].ДокументСсылкаВ1С;
					ВнешняяПечатнаяФорма 	= МассивСсылокВ1С[0].ВнешняяПечатнаяФорма;

					УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentToSend.Type, Organization, PackageSendTask.CounteragentId, CustomDocumentId, ВнешняяПечатнаяФорма);

				КонецЦикла;
				
				Если PackageSendTask.DocumentsToSend.Count > 1 Тогда 
					Комментарий = PackageSendTask.OperationId;
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.НачалоОтправки", УровеньЖурналаРегистрации.Информация, , , Комментарий);
				Иначе
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаДокумента.НачалоОтправки", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка);	
				КонецЕсли;
				
				Package = PackageSendTask.Send();
								
				Если PackageSendTask.DocumentsToSend.Count > 1 Тогда 
					Комментарий = PackageSendTask.OperationId;
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.ПакетОтправлен", УровеньЖурналаРегистрации.Информация, , , Комментарий);
				Иначе
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаДокумента.ДокументОтправки", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка);	
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
								
				Если Найти(ТекстОшибки, "##200") = 0 И Найти(ТекстОшибки, "##400") = 0 Тогда
					
					Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
						DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
						
						CustomDocumentId = DocumentToSend.CustomDocumentId;
						
						МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
						ДокументСсылка 			= МассивСсылокВ1С[0].ДокументСсылкаВ1С;
						ВнешняяПечатнаяФорма 	= МассивСсылокВ1С[0].ВнешняяПечатнаяФорма;
						
						ОбнулитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentToSend.Type, ВнешняяПечатнаяФорма, "Н");
					КонецЦикла;
									
				КонецЕсли;
				
				Если PackageSendTask.DocumentsToSend.Count > 1 Тогда
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.ОшибкаОтправки", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Иначе
					ЗаписьЖурналаРегистрации("Диадок.Отправка.ОшибкаОтправки", УровеньЖурналаРегистрации.Ошибка, ДокументСсылка.Метаданные(), ДокументСсылка, ТекстОшибки);	
				КонецЕсли;
				
				Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
					
					DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
					
					CustomDocumentId = DocumentToSend.CustomDocumentId;
					
					МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
					
					Для Каждого СтрокаМассиваСсылокВ1С из МассивСсылокВ1С Цикл
						ДокументСсылка = СтрокаМассиваСсылокВ1С.ДокументСсылкаВ1С;
						Если НЕ ЗаблокированныеДокументы[ДокументСсылка] = Неопределено Тогда
							ЗаблокированныеДокументы.Удалить(ДокументСсылка);	
						КонецЕсли;
					КонецЦикла;
										
				КонецЦикла;
				
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
			Возврат Package; 
			
		КонецФункции
		
		Процедура ОбработатьОтправленныйПакетДокументов(Package, ТаблицаСоответствияCustomIdСсылке1С, ПараметрыОтправкиНаСогласование = Неопределено, ЗаблокированныеДокументы) Экспорт
			
			ПолныйТекстОшибки = "";
			
			Для Ц=0 по Package.Documents.Count - 1 Цикл
				
				Document = Package.Documents.GetItem(Ц);
				
				CustomDocumentId 	= Document.CustomDocumentId;
				DocumentType		= Document.Type;
				
				НайденнаяСтрока = ТаблицаСоответствияCustomIdСсылке1С.Найти(CustomDocumentId, "CustomDocumentId");
				ДокументСсылка 			= НайденнаяСтрока.ДокументСсылкаВ1С;
				ВнешняяПечатнаяФорма 	= НайденнаяСтрока.ВнешняяПечатнаяФорма;
				
				Попытка
					ТекстОшибки = "";
					Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Ложь Тогда
						
						Если (Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП"))
							ИЛИ (Document.Type = "UniversalCorrectionDocument" И ТипДокументаУКД(Document.Function) = ТипДокументаУКД("КСЧФДИС")) Тогда
							
							МассивСсылокРНК= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(ДокументСсылка);
							
							Для Каждого ДокументОснование ИЗ МассивСсылокРНК Цикл
								Установить_DocumentID_Для_Документ_ПриОтправке(ДокументОснование, Document, DocumentType);
							КонецЦикла;
							
						КонецЕсли;
						
						Установить_DocumentID_Для_Документ_ПриОтправке(ДокументСсылка, Document, DocumentType); 
						
					Иначе 
						ОбнулитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, ВнешняяПечатнаяФорма, "В"); 
					КонецЕсли;
					
				Исключение
					ТекстОшибки = ОписаниеОшибки();
				КонецПопытки;
				
				Если НЕ ЗаблокированныеДокументы[ДокументСсылка] = Неопределено Тогда
					ЗаблокированныеДокументы.Удалить(ДокументСсылка);	
				КонецЕсли;
								
				Если ЗначениеЗаполнено(ТекстОшибки) = Ложь Тогда
					Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Ложь Тогда
						Оповестить("ИзменениеСвязиДД1С", Новый Структура("ТипСущности, Ссылка1С, СсылкаДД", "Документ", ДокументСсылка, Document));
					КонецЕсли;
					
					Если НЕ ((DocumentType="NonformalizedProforma") И (ЭтоРТУ(ДокументСсылка))) Тогда
						//для счета на оплату на основании РТУ коммент не пишем - негде
						
						Если (DocumentType = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП"))
							ИЛИ (DocumentType = "UniversalCorrectionDocument" И ТипДокументаУКД(Document.Function) = ТипДокументаУКД("КСЧФДИС")) Тогда
							// для самой СФ
							ОтразитьИзмененияВДокументе1С(ДокументСсылка);
							
							Для Каждого ДокументОснование ИЗ МассивСсылокРНК Цикл
								// для документа реализация
								ОтразитьИзмененияВДокументе1С(ДокументОснование);	
							КонецЦикла;
						Иначе
							ОтразитьИзмененияВДокументе1С(ДокументСсылка);
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;
				
				ПолныйТекстОшибки = ПолныйТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки)=Истина, Символы.ПС, "") + ТекстОшибки;
				
				ПараметрыСобытия= Новый Структура;
				ПараметрыСобытия.Вставить("Document"			, Document);
				ПараметрыСобытия.Вставить("ДокументСсылка"		, ДокументСсылка);
				ПараметрыСобытия.Вставить("ВнешняяПечатнаяФорма", ВнешняяПечатнаяФорма);
				ПараметрыСобытия.Вставить("ОписаниеОшибки"		, ТекстОшибки);
				
				ОбработкаСобытияПодключаемогоМодуля("ПослеОтправкиДокумента", ПараметрыСобытия);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПолныйТекстОшибки) = Истина Тогда
				ВызватьИсключение(ПолныйТекстОшибки);
			Иначе
				ОтправитьПакетНаОбработку(ПараметрыОтправкиНаСогласование, Package);
			КонецЕсли;		
			                                                                           
		КонецПроцедуры
		
		Функция ВыполнитьАсинхроннуюОтправкуПакета(PackageSendTask, Organization, ТаблицаСоответствияCustomIdСсылке1С, ЗаблокированныеДокументы) Экспорт 
			
			Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
				DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
				Если ЭтоФормализованныйДокумент(DocumentType(DocumentToSend)) Тогда
					ПроверитьСертификат(Organization.Id);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			//транзакция по отправке пакета
			//если пакет отправлен, то отправлены все документы пакета,
			//если пакет отправить не удалось, то не отправлен ни один документ пакета
			Попытка

				Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
					DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
					
					CustomDocumentId = DocumentToSend.CustomDocumentId;
					
					МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
					ДокументСсылка 			= МассивСсылокВ1С[0].ДокументСсылкаВ1С;
					ВнешняяПечатнаяФорма 	= МассивСсылокВ1С[0].ВнешняяПечатнаяФорма;

					Если (DocumentToSend.Type = "UniversalTransferDocument" И ТипДокументаУПД(DocumentToSend.Content.Function) = ТипДокументаУПД("СЧФДОП"))
						ИЛИ (DocumentToSend.Type = "UniversalCorrectionDocument" И ТипДокументаУКД(DocumentToSend.Content.Function) = ТипДокументаУКД("КСЧФДИС")) Тогда

						МассивСсылокРНК= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(ДокументСсылка);
						
						Для Каждого ДокументОснование ИЗ МассивСсылокРНК Цикл
							УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументОснование, DocumentToSend.Type, Organization, PackageSendTask.CounteragentId, CustomDocumentId);
						КонецЦикла;
							
					КонецЕсли;

					УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentToSend.Type, Organization, PackageSendTask.CounteragentId, CustomDocumentId, ВнешняяПечатнаяФорма);

				КонецЦикла;
				
				Если PackageSendTask.DocumentsToSend.Count > 1 Тогда
					Комментарий = PackageSendTask.OperationId;
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, , , Комментарий);
				Иначе
					ЗаписьЖурналаРегистрации("Диадок.Отправка.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка);	
				КонецЕсли;
				
				AsyncTask = PackageSendTask.SendAsync();
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
												
				Если Найти(ТекстОшибки, "##200") = 0 И Найти(ТекстОшибки, "##400") = 0 Тогда
					
					Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
						DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
						
						CustomDocumentId = DocumentToSend.CustomDocumentId;
						
						МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
						ДокументСсылка 			= МассивСсылокВ1С[0].ДокументСсылкаВ1С;
						ВнешняяПечатнаяФорма 	= МассивСсылокВ1С[0].ВнешняяПечатнаяФорма;
						
						ОбнулитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentToSend.Type, ВнешняяПечатнаяФорма, "Н");
					КонецЦикла;
									
				КонецЕсли;
				
				Если PackageSendTask.DocumentsToSend.Count > 1 Тогда
					ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.ОшибкаЗапускаАнинхроннойОтправки", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Иначе
					ЗаписьЖурналаРегистрации("Диадок.Отправка.ОшибкаЗапускаАнинхроннойОтправки", УровеньЖурналаРегистрации.Ошибка, ДокументСсылка.Метаданные(), ДокументСсылка, ТекстОшибки);	
				КонецЕсли;
								
				Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
					DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Ц);
					
					CustomDocumentId = DocumentToSend.CustomDocumentId;
					
					МассивСсылокВ1С = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
					
					Для Каждого СтрокаМассиваСсылокВ1С Из МассивСсылокВ1С Цикл
						ДокументСсылка = СтрокаМассиваСсылокВ1С.ДокументСсылкаВ1С;	
						
						Если НЕ ЗаблокированныеДокументы[ДокументСсылка] = Неопределено Тогда
							ЗаблокированныеДокументы.Удалить(ДокументСсылка);
						КонецЕсли;
					КонецЦикла;
										
				КонецЦикла;
				
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
			Возврат  AsyncTask;
			
		КонецФункции
			
	//{ ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ
	
	//{ РАБОТА С ДОКУМЕНТАМИ
		
		Функция СформироватьМассивСсылокДляДиадок(СсылкаНаОбъект, ЭтоКорректировкаИсправление)  Экспорт 
			
			формаФормирования = Модуль_ИнтеграцияОбщий;
			Если не ЭтоКорректировкаИсправление Тогда
				//формируем ссылки на РНК
				массивСсылокРНК = формаФормирования.ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному(СсылкаНаОбъект);
				результат = Новый Массив;
				Для каждого ссылкаРНК Из массивСсылокРНК Цикл
					Если ЗначениеЗаполнено(ссылкаРНК)Тогда
						результат.Добавить( ссылкаРНК);
					КонецЕсли;
				КонецЦикла;
			иначе 
				//ищем сф - основание 
				результат = Новый Массив;
				Докоснование =  Модуль_ИнтеграцияОбщий.ПолучитьСФОснованиеДляИСФДиадок(СсылкаНаОбъект) ;
				Если ЗначениеЗаполнено(Докоснование) Тогда 
					результат.Добавить( Докоснование);
				КонецЕсли;
			КонецЕсли;
			
			Возврат результат
		КонецФункции	
		
		Функция ПолучитьМассивРодительскихДокументов(ДокументСсылка, DocumentType, ЭтоКорректировкаИсправление= Ложь)   Экспорт 
			
			МассивРодительскихДокументов =  Новый Массив;
			
			Если Лев(DocumentType, 7) = "Invoice" ИЛИ DocumentType = "UniversalTransferDocument" ИЛИ DocumentType = "UtdInvoice"
				ИЛИ DocumentType = "UniversalCorrectionDocument" ИЛИ DocumentType = "UcdInvoiceCorrection" Тогда
				
				МассивДокументов = СформироватьМассивСсылокДляДиадок(ДокументСсылка, ЭтоКорректировкаИсправление);
				Для каждого Док из МассивДокументов Цикл 
					МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", Док, Ложь));
				КонецЦикла;
				
			ИначеЕсли Модуль_ИнтеграцияОбщий.ЭтоКорректировкаРеализации(ДокументСсылка) Тогда 
				
				РТУ = Модуль_ИнтеграцияОбщий.ПолучитьДокОснованиеКорректировкиРеализациии(ДокументСсылка);
				Если ЗначениеЗаполнено(РТУ) Тогда 
					МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаоплату", РТУ, Ложь));
				КонецЕсли;	
				
			ИначеЕсли ЭтоРТУ(Документссылка) Тогда 
				Если  DocumentType <> "NonformalizedProforma" Тогда 
					
					СчетНаОплату = Модуль_ИнтеграцияОбщий.ПолучитьСчетНаОплатуНаОснованииРТУ(ДокументСсылка);
					Если ЗначениеЗаполнено(СчетНаОплату) Тогда 
						МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату",СчетНаОплату, Истина));
					КонецЕсли;	
					МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументСсылка, Истина));
					
				КонецЕсли;	
			КонецЕсли;	
			
			Возврат МассивРодительскихДокументов;
			
		КонецФункции	
		
		Функция ДокументУжеОтправленВДиадок(ДокументСсылка, DocumentType, ВнешняяПечатнаяФорма)
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда 
				docId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ДокументСсылка, DocumentType);
				Возврат ЗначениеЗаполнено(docId)
			Иначе 
				Отметка = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьОтметкуДополнительнойВПФ(ДокументСсылка, ВнешняяПечатнаяФорма);
				Возврат (Отметка = "В")
			КонецЕсли;	
			
		КонецФункции
		
		Функция ЗаблокироватьДокументДляВыгрузкиВДиадок(ДокументСсылка, Organization, DocumentType, ВнешняяПечатнаяФорма = "", СуществующаяБлокировка = Неопределено)    Экспорт 
			Если СуществующаяБлокировка = Неопределено Тогда 
				ДокБлокировка = ДокументСсылка.ПолучитьОбъект();
				Попытка
					ДокБлокировка.заблокировать();
				Исключение 	
					Вызватьисключение("Документ заблокирован другим пользователем");
				КонецПопытки;
			КонецЕсли;
			
			Если ДокументУжеОтправленВДиадок(ДокументСсылка, DocumentType, ВнешняяпечатнаяФорма ) Тогда 
				Если СуществующаяБлокировка = Неопределено Тогда 
					ДокБлокировка.разблокировать();
				КонецЕсли;
				Вызватьисключение("Документ уже выгружен");
			КонецЕсли;	
			
			Возврат ?(СуществующаяБлокировка=Неопределено, ДокБлокировка, СуществующаяБлокировка);
			
		КонецФункции 
		
		Функция ЗаблокироватьДокументПриВыгрузкеПакетаВДиадок(ДокументСсылка, DocumentType, ВнешняяПечатнаяФорма=Неопределено, ТекущаяБлокировка=Неопределено) Экспорт
			
			ДокОбъект = Неопределено;
						
			Если ДокументУжеОтправленВДиадок(ДокументСсылка, DocumentType, ВнешняяпечатнаяФорма) Тогда 
											
				Если НЕ ТекущаяБлокировка = Неопределено Тогда
					ТекущаяБлокировка.Разблокировать();
				КонецЕсли;
				ВызватьИсключение("Документ уже выгружен");
				
			Иначе
				
				Если ТекущаяБлокировка = Неопределено Тогда 
					Попытка
						ДокОбъект = ДокументСсылка.ПолучитьОбъект();
						ДокОбъект.Заблокировать();
					Исключение 	
						ВызватьИсключение("Документ заблокирован другим пользователем");
					КонецПопытки;
				КонецЕсли;
								
			КонецЕсли;
						
			Возврат ДокОбъект;
			
		КонецФункции
				
		Процедура ЗаполнитьПодписанта(ТипSigner, Signer, BoxID, ПараметрыОтправкиНаСогласование = Неопределено) Экспорт
			
			СтрокаКонтекста = СтрокаКонтекста(BoxID);
			
			Если ТипSigner = "ExtendedSigner" Тогда
				
				Если ПараметрыОтправкиНаСогласование <> Неопределено Тогда 
					
					Если ПараметрыОтправкиНаСогласование.ResolutionRequestType = "SignatureRequest" Тогда
						ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПолучателя;
					Иначе
						ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПодписанта;
					КонецЕсли;
						
					Если ЗначениеЗаполнено(ФИОПодписанта) Тогда
						Signer.SignerDetails.Surname=	 ВыделитьСлово(ФИОПодписанта);
						Signer.SignerDetails.FirstName=  ВыделитьСлово(ФИОПодписанта);
						Signer.SignerDetails.Patronymic= ВыделитьСлово(ФИОПодписанта);
					Иначе
						Signer.SignerDetails.Surname=	 "-";
						Signer.SignerDetails.FirstName=	 "-";
					КонецЕсли;
					
					Signer.SignerDetails.SignerType= ?(СтрДлина(УдалитьЛишниеНулиИНН(СтрокаКонтекста.Box.Inn)) = 12, "IndividualEntity", "LegalEntity");
					Signer.SignerDetails.Status= 	 "InformationCreatorEmployee";
					
					Signer.SignerDetails.Powers= 	 "PersonDocumentedOperation";
					Signer.SignerDetails.Inn= 	 	 СтрокаКонтекста.Box.Inn;

				
				ИначеЕсли ЗначениеЗаполнено(СтрокаКонтекста.ОтпечатокСертификата) Тогда
					
					Signer.BoxId= BoxID;
					Signer.CertificateThumbprint= СтрокаКонтекста.ОтпечатокСертификата;
					
				Иначе
					
					Если НЕ СтрокаКонтекста.ДанныеСотрудника.ПраваДоступа.CanSignDocuments Тогда
						
						Signer.SignerDetails.Surname=	 "-";
						Signer.SignerDetails.FirstName=	 "-";
						
						Signer.SignerDetails.SignerType= "IndividualEntity";
						Signer.SignerDetails.Status= 	 "InformationCreatorEmployee";
						Signer.SignerDetails.Powers= 	 "PersonDocumentedOperation";
						Signer.SignerDetails.Inn= 	 	 "999999999950";
						
					Иначе
						
						Signer.SignerDetails.Surname=	 СтрокаКонтекста.ДанныеСотрудника.Фамилия;
						Signer.SignerDetails.FirstName=  СтрокаКонтекста.ДанныеСотрудника.Имя;
						Signer.SignerDetails.Patronymic= СтрокаКонтекста.ДанныеСотрудника.Отчество;
						
						Signer.SignerDetails.SignerType= ?(СтрДлина(УдалитьЛишниеНулиИНН(СтрокаКонтекста.Box.Inn)) = 12, "IndividualEntity", "LegalEntity");
						Signer.SignerDetails.Status= 	 "SellerEmployee";
						Signer.SignerDetails.JobTitle=   СтрокаКонтекста.ДанныеСотрудника.Должность;
						Signer.SignerDetails.Powers=   	 "ResponsibleForOperationAndSignerForInvoice";
						Signer.SignerDetails.Inn= 		 СтрокаКонтекста.Box.Inn;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипSigner = "Signer" Тогда
				
				Если НЕ СтрокаКонтекста.ДанныеСотрудника.ПраваДоступа.CanSignDocuments Тогда
					
					Signer.Surname=		"-";
					Signer.FirstName=	"-";
					
				Иначе
					
					Signer.Surname=		СтрокаКонтекста.ДанныеСотрудника.Фамилия;
					Signer.FirstName=	СтрокаКонтекста.ДанныеСотрудника.Имя;
					Signer.Patronymic=	СтрокаКонтекста.ДанныеСотрудника.Отчество;
					Signer.JobTitle= 	СтрокаКонтекста.ДанныеСотрудника.Должность;
					
				КонецЕсли;
				
				Signer.Inn= СтрокаКонтекста.Box.Inn;
				
			КонецЕсли;
			
		КонецПроцедуры		
		
		Функция ПолучитьЗаполненныйPackageSendTask(Знач ПараметрыSendTask, ТаблицаСоответствияCustomIdСсылке1С) Экспорт
			
			// параметры общие для всего пакета
			
			Получатель						= ПараметрыSendTask.Получатель;
			Грузополучатель					= ПараметрыSendTask.Грузополучатель;
			ПараметрыОтправкиНаСогласование	= ПараметрыSendTask.ПараметрыОтправкиНаСогласование;
			ParentDocumentId				= ПараметрыSendTask.ParentDocumentId;
			IdОтправленого					= ПараметрыSendTask.IdОтправленого;
			Организация						= ПараметрыSendTask.Организация;
			
			МассивДокументовПакета			= ПараметрыSendTask.МассивДокументовПакета;
									
			OrganizationId	= ПолучитьOrganizationId(Организация);
			Organization	= ПолучитьЯщикДиадокДляОрганизации(Организация);
			
			ЭтоКорректировкаИсправление = Ложь;
									
			СоответствиеCustomId = Новый Соответствие; //будем использовать для упорядоченного хранения CustomId, что нужно для формирования однозначно интерпретируемого OperationId пакета
			
			PackageSendTask = Organization.CreatePackageSendTask();
			
			PackageSendTask.CounteragentId = ПараметрыSendTask.CounteragentId;
			
			departmentKpp = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_DepartmentKpp(Организация); 
			PackageSendTask.FromDepartmentId = ПодучитьИдПодразделениеОтправителя(Organization, DepartmentKpp);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПараметрыСогласования"		, ПараметрыSendTask.ПараметрыОтправкиНаСогласование);
			ДопПараметры.Вставить("ДанныеСотрудника"			, СтрокаКонтекста(ПараметрыSendTask.Организация).ДанныеСотрудника);
			ДопПараметры.Вставить("Отправитель_FnsParticipantId", Organization.FnsParticipantId);
			ДопПараметры.Вставить("Получатель_FnsParticipantId" , ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ПараметрыSendTask.Получатель, "ДиадокИдентификаторЭДО"));
			
			Для каждого ДокументПакета из МассивДокументовПакета Цикл
				// параметры характерные только для текущего документа
				ТекущийДокументСсылка	= ДокументПакета.Документ;
				DocumentType			= ДокументПакета.DocumentType;
				ReceiverDepartmentId	= ДокументПакета.ToDepartmentID;
				isTest					= ДокументПакета.ЭтоТестовыйДокумент;
				НомерЗаказа				= ДокументПакета.НомерЗаказа;
				ДопСведения				= ДокументПакета.ДопСведения;
				
				ВнешняяПечатнаяФорма 	= ДокументПакета.ВнешняяПечатнаяФорма;
				ВыгружатьEXEL			= ДокументПакета.ВыгружатьEXEL;
				
				ДопПараметры.Вставить("ФункцияУПД" , ДокументПакета.ФункцияУПД);
				ДопПараметры.Вставить("ДопСведения", ДокументПакета.ДопСведения);
				
				Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина Тогда
					
					СтруктураДокумент = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").КонтентВПФ(ТекущийДокументСсылка, ВнешняяПечатнаяФорма, ДокументПакета.ТипДокумента, ВыгружатьEXEL);
					
					DocumentToSend = PackageSendTask.AddDocumentFromFile("Nonformalized", СтруктураДокумент.ИмяВременногоФайла);
					
					DocumentToSend.DocumentDate 	= СтруктураДокумент.Дата;
					DocumentToSend.DocumentNumber	= СтруктураДокумент.Номер;
					DocumentToSend.Filename			= СтруктураДокумент.ИмяФайла;
					DocumentToSend.NeedRecipientSignature = Истина;
					
				ИначеЕсли ДокументПакета.DocumentType = "XmlTorg12" Тогда
					
					Если ЗначениеЗаполнено(ДокументПакета.ФункцияУПД) Тогда
						DocumentToSend = PackageSendTask.AddDocument("UtdTorg12");
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUTD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
						ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
					Иначе
						DocumentToSend = PackageSendTask.AddDocument("XmlTorg12");
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlTorg12(DocumentToSend.Content, ТекущийДокументСсылка, НомерЗаказа, ДопСведения, ПараметрыОтправкиНаСогласование);
						ЗаполнитьПодписанта("Signer", DocumentToSend.Content.Signer, OrganizationId, ПараметрыОтправкиНаСогласование);
					КонецЕсли;
					
					DocumentToSend.CustomDocumentId = Строка(Новый УникальныйИдентификатор);
																								
				ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда
					
					НастройкиВнешнихПечатныхФорм 	= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(Организация);
					ДиадокВнешняяПечатнаяФормаАкта 	= НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаАкта;
					Если ЗначениеЗаполнено(ДиадокВнешняяПечатнаяФормаАкта) = Истина Тогда 
						
						СтруктураДокумент = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").КонтентВПФ(ТекущийДокументСсылка, ДиадокВнешняяПечатнаяФормаАкта, "Акт");
						
						DocumentToSend = PackageSendTask.AddDocumentFromFile("AcceptanceCertificate", СтруктураДокумент.ИмяВременногоФайла);//запросить изменить параметры местами в компоненте
						
						DocumentToSend.DocumentDate		= СтруктураДокумент.Дата;
						DocumentToSend.DocumentNumber	= СтруктураДокумент.Номер;
						DocumentToSend.Total			= СтруктураДокумент.Сумма;
						
						Если НЕ СтруктураДокумент.ДокументБезНДС Тогда 
							DocumentToSend.Vat			= СтруктураДокумент.СуммаНДС;
						КонецЕсли;
						
						DocumentToSend.Filename			= СтруктураДокумент.ИмяФайла;
						DocumentToSend.NeedRecipientSignature = Истина;
						
						ПараметрыФункции = Новый Структура();
						ПараметрыФункции.Вставить("ДокументСсылка", ТекущийДокументСсылка);
						СтруктураРезультата = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_РезультатФункции(ДиадокВнешняяПечатнаяФормаАкта, "ПолучитьПараметрыОтправкиЧерезДиадок", ПараметрыФункции);
						
						Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
							Если СтруктураРезультата.Свойство("ТребоватьОтветнойПодписи")
								И ТипЗнч(СтруктураРезультата.ТребоватьОтветнойПодписи) = Тип("Булево") Тогда
								DocumentToSend.NeedRecipientSignature = СтруктураРезультата.ТребоватьОтветнойПодписи;
							КонецЕсли;
						КонецЕсли;
						
					Иначе 
						
						Если ЗначениеЗаполнено(ДокументПакета.ФункцияУПД) Тогда
							DocumentToSend = PackageSendTask.AddDocument("UtdAcceptanceCertificate");
							ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUTD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
							ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
						Иначе
							DocumentToSend = PackageSendTask.AddDocument("XmlAcceptanceCertificate");
							ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlAcceptanceCertificate(DocumentToSend.Content, ТекущийДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения);
							ЗаполнитьПодписанта("Signer", DocumentToSend.Content.Signer, OrganizationId, ПараметрыОтправкиНаСогласование);
						КонецЕсли;

					КонецЕсли;
															
				ИначеЕсли ДокументПакета.DocumentType = "NonformalizedProforma" Тогда
					
					НастройкиВнешнихПечатныхФорм 	= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(Организация);
					ДиадокВнешняяПечатнаяФормаСчета = НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаСчета;
					Если ЗначениеЗаполнено(ДиадокВнешняяПечатнаяФормаСчета) = Истина Тогда 
						СтруктураДокумент = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").КонтентВПФ(ТекущийДокументСсылка, ДиадокВнешняяПечатнаяФормаСчета, "Счет на оплату");
					Иначе 
						СтруктураДокумент = Модуль_ЗаполнениеКонтента.СформироватьПечатнуюФормуСчетаНаОплату(ТекущийДокументСсылка, ПараметрыОтправкиНаСогласование);
					КонецЕсли;	
															
					DocumentToSend = PackageSendTask.AddDocumentFromFile("NonformalizedProforma", СтруктураДокумент.ИмяВременногоФайла);
					
					DocumentToSend.DocumentDate 	= СтруктураДокумент.Дата;
					DocumentToSend.DocumentNumber	= СтруктураДокумент.Номер;
					DocumentToSend.Total 			= СтруктураДокумент.Сумма;
					
					Если НЕ СтруктураДокумент.ДокументБезНДС Тогда
						DocumentToSend.Vat			= СтруктураДокумент.СуммаНДС;
					КонецЕсли;
					
					DocumentToSend.Filename			= СтруктураДокумент.ИмяФайла;
															
				ИначеЕсли 	DocumentType = "ReconciliationAct"  Тогда
					
					НастройкиВнешнихПечатныхФорм		= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(Организация);
					ДиадокВнешняяПечатнаяФормаСверки	= НастройкиВнешнихПечатныхФорм.ДиадокВнешняяПечатнаяФормаСверки;
					
					Если ЗначениеЗаполнено(ДиадокВнешняяПечатнаяФормаСверки) Тогда 
						СтруктураДокумент = ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").КонтентВПФ(ТекущийДокументСсылка, ДиадокВнешняяПечатнаяФормаСверки, "Акт сверки взаиморасчетов");
					Иначе 
						СтруктураДокумент = Модуль_ЗаполнениеКонтента.СформироватьПечатнуюФормуАктаСверки(ТекущийДокументСсылка);
					КонецЕсли;	
					
					DocumentToSend = PackageSendTask.AddDocumentFromFile("ReconciliationAct", СтруктураДокумент.ИмяВременногоФайла);
					
					DocumentToSend.DocumentDate 	= СтруктураДокумент.Дата;
					DocumentToSend.DocumentNumber 	= СтруктураДокумент.Номер;
					DocumentToSend.Filename 		= СтруктураДокумент.ИмяФайла;
				ИначеЕсли DocumentType = "UniversalTransferDocument"  Тогда
					
					DocumentToSend = PackageSendTask.AddDocument("UniversalTransferDocument");
					ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUTD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
					
					ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
					
				ИначеЕсли DocumentType = "UniversalCorrectionDocument"  Тогда
					
					DocumentToSend = PackageSendTask.AddDocument("UniversalCorrectionDocument");
					ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUCD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
					
					ЭтоКорректировкаИсправление = ДокументПакета.ФункцияУПД = "КСЧФ" ИЛИ ДокументПакета.ФункцияУПД = "КСЧФДИС";
					
					ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
					
				ИначеЕсли  Модуль_ИнтеграцияОбщий.ЭтоКСФ(ТекущийДокументСсылка)  Тогда
					
					Если ЗначениеЗаполнено(ДокументПакета.ФункцияУПД) Тогда
						
						DocumentToSend = PackageSendTask.AddDocument("UcdInvoiceCorrection");
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUCD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
						ЭтоКорректировкаИсправление = Истина;
						ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
						
					Иначе
						
						Если DocumentType = "InvoiceCorrectionRevision" Тогда
							DocumentToSend = PackageSendTask.AddDocument("InvoiceCorrectionRevision");
						Иначе
							DocumentToSend = PackageSendTask.AddDocument("InvoiceCorrection");
						КонецЕсли;
											
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляInvoiceCorrection(DocumentToSend.Content, ТекущийДокументСсылка, ДопСведения, ПараметрыОтправкиНаСогласование);
						ЭтоКорректировкаИсправление = Истина;
						ЗаполнитьПодписанта("Signer", DocumentToSend.Content.Signer, OrganizationId);
						
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(ДокументПакета.ФункцияУПД) Тогда
						
						DocumentToSend = PackageSendTask.AddDocument("UtdInvoice");
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляXmlUTD(DocumentToSend.Content, ТекущийДокументСсылка, ДопПараметры);
						ЭтоКорректировкаИсправление = ЗначениеЗаполнено(DocumentToSend.Content.RevisionDate);
						ЗаполнитьПодписанта("ExtendedSigner", DocumentToSend.Content.AddSigner(), OrganizationId, ПараметрыОтправкиНаСогласование);
						
					Иначе
						
						Если DocumentType = "InvoiceRevision" Тогда
							DocumentToSend = PackageSendTask.AddDocument("InvoiceRevision");
						Иначе
							DocumentToSend = PackageSendTask.AddDocument("Invoice");
						КонецЕсли;
						
						ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьКонтентДляInvoice(DocumentToSend.Content, ТекущийДокументСсылка, ДопСведения, ПараметрыОтправкиНаСогласование, OrganizationId);
						ЭтоКорректировкаИсправление = ЗначениеЗаполнено(DocumentToSend.Content.InvoiceRevisiondate);
						ЗаполнитьПодписанта("Signer", DocumentToSend.Content.Signer, OrganizationId);
						
					КонецЕсли;

				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина Тогда
					
					ВПФId = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ТекущийДокументСсылка, "ИдентификаторВПФВДиадок");
					
					Если НЕ ЗначениеЗаполнено(ВПФId) Тогда
						ВПФId = Новый УникальныйИдентификатор();
						ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьИдентификаторВПФ(ВПФId, ТекущийДокументСсылка);
					КонецЕсли;
				
					DocumentToSend.CustomDocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьИдентификаторОтправленнойВПФ(ВПФId, ВнешняяПечатнаяФорма);
					
				Иначе 
					OperationId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТекущийOperationID(ТекущийДокументСсылка, DocumentType);
					Если ЗначениеЗаполнено(OperationId) = Истина Тогда
						DocumentToSend.CustomDocumentId = OperationId;
					Иначе 
						DocumentToSend.CustomDocumentId = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
				КонецЕсли;
				
				ДокументПакета.CustomDocumentId = DocumentToSend.CustomDocumentId;
				
				Если ДокументПакета.ВидДокумента = "Реализация товаров и услуг"
					И Найти(НРег(ДокументПакета.ТипДокумента), "счет на оплату")>0 Тогда
					
					ЗаполненНаОсновании = Истина;
				Иначе
					ЗаполненНаОсновании = Ложь;
				КонецЕсли;
												
				ДобавитьСтрокуВТаблицуСоответствия( DocumentToSend.CustomDocumentId, 
													ДокументПакета.DocumentType, 
													ТекущийДокументСсылка,
													ДокументПакета.ДокументОснованиеДляУПДСчфДоп,
													ВнешняяПечатнаяФорма, 
													ЭтоКорректировкаИсправление, 
													ЗаполненНаОсновании, 
													ТаблицаСоответствияCustomIdСсылке1С);
								
				СоответствиеCustomId.Вставить(DocumentToSend.CustomDocumentId);
				
			КонецЦикла;
			
			Для Ц=0 по PackageSendTask.DocumentsToSend.Count-1 Цикл
				
				Document = PackageSendTask.DocumentsToSend.GetItem(Ц);
				
				УстановитьСвязиДляDocument(Document, ТаблицаСоответствияCustomIdСсылке1С, ParentDocumentId);
								
			КонецЦикла;
			
			PackageSendTask.DelaySend = (ПараметрыОтправкиНаСогласование <> Неопределено);
			
			Если ПустаяСтрока(ReceiverDepartmentId) = Истина Тогда
				ReceiverDepartmentId = ОпределитьReceiverDepartmentId(Получатель, Грузополучатель, DocumentType);
			КонецЕсли;
			PackageSendTask.ToDepartmentId = ReceiverDepartmentId;
			
			OperationIdПакета = "";
			Для каждого CustomIdДокументаСтрокой из СоответствиеCustomId Цикл
				OperationIdПакета = OperationIdПакета + CustomIdДокументаСтрокой.Ключ;
			КонецЦикла;
			PackageSendTask.OperationId = OperationIdПакета;
			
			Если ПараметрыSendTask.Свойство("СертификатыДляШифрования") Тогда
				
				ДобавленныеСертификаты = Новый Соответствие;
				
				Для Каждого PersonalCertificate ИЗ ПараметрыSendTask.СертификатыДляШифрования.СертификатыОтправителя Цикл
					PackageSendTask.AddEncryptCertificate(PersonalCertificate);
				КонецЦикла;
				
				Для Каждого PersonalCertificate ИЗ ПараметрыSendTask.СертификатыДляШифрования.СертификатыПолучателя Цикл
					PackageSendTask.AddEncryptCertificate(PersonalCertificate);
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураПараметровСобытия= Новый Структура;
			СтруктураПараметровСобытия.Вставить("PackageSendTask"  , PackageSendTask);
			СтруктураПараметровСобытия.Вставить("ПараметрыSendTask", ПараметрыSendTask);
			ОбработкаСобытияПодключаемогоМодуля("ПередОтправкойPackageSendTask", СтруктураПараметровСобытия);
									
			Возврат Новый Структура("SendTask, Organization", PackageSendTask, Organization);
			
		КонецФункции
		
		Процедура ДобавитьСтрокуВТаблицуСоответствия(CustomDocumentId, DocumentType, ДокументСсылкаВ1С, ДокументОснованиеДляУПДСчфДоп= Неопределено, ВнешняяПечатнаяФорма, ЭтоКорректировкаИсправление, ЗаполненНаОсновании, ТаблицаСоответствия)
		
			НоваяСтрокаТаблицыСоответствия= ТаблицаСоответствия.Добавить();
			
			НоваяСтрокаТаблицыСоответствия.CustomDocumentId=				CustomDocumentId;
			НоваяСтрокаТаблицыСоответствия.Type= 							DocumentType;
			НоваяСтрокаТаблицыСоответствия.ДокументСсылкаВ1С= 				ДокументСсылкаВ1С;
			НоваяСтрокаТаблицыСоответствия.ДокументОснованиеДляУПДСчфДоп= 	ДокументОснованиеДляУПДСчфДоп;
			НоваяСтрокаТаблицыСоответствия.ЭтоВПФ= 							?(ЗначениеЗаполнено(ВнешняяПечатнаяФорма)=Истина, Истина, Ложь);
			НоваяСтрокаТаблицыСоответствия.ВнешняяПечатнаяФорма= 			ВнешняяПечатнаяФорма;
			НоваяСтрокаТаблицыСоответствия.ЭтоКорректировкаИсправление= 	ЭтоКорректировкаИсправление;
			НоваяСтрокаТаблицыСоответствия.ЗаполненНаОсновании= 			ЗаполненНаОсновании;
					
		КонецПроцедуры
		
		Процедура УстановитьСвязиДляDocument(Document, ТаблицаСоответствияCustomIdСсылке1С, ParentDocumentId= Неопределено)
			
			//1. связанный документ может быть в пакете, который еще не отправлен
			//2. связанный документ может быть уже отправлен ранее
			
			DocumentType		= Document.Type;
			CustomDocumentId 	= Document.CustomDocumentId;
			
			МассивСоответствия 			= ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("CustomDocumentId", CustomDocumentId));
			СтрокаТаблицыСоответствия 	= МассивСоответствия[0];
			
			ЭтоВПФ 						= ?(ЗначениеЗаполнено(СтрокаТаблицыСоответствия.ВнешняяПечатнаяФорма)=Истина, Истина, Ложь);
			ЭтоКорректировкаИсправление = СтрокаТаблицыСоответствия.ЭтоКорректировкаИсправление;
			Если ЭтоВПФ И ЗначениеЗаполнено(СтрокаТаблицыСоответствия.ДокументОснованиеДляУПДСчфДоп) Тогда
				// Это ВПФ для УПД СчфДоп. Для установления корректных связей, необходимо использовать ссылку на СФ 
				DocumentСсылкаВ1С= СтрокаТаблицыСоответствия.ДокументОснованиеДляУПДСчфДоп;	
			Иначе
				DocumentСсылкаВ1С= СтрокаТаблицыСоответствия.ДокументСсылкаВ1С;
			КонецЕсли;
						
			Если ЭтоВПФ Тогда
				
				МассивДокументовОснований = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("ДокументСсылкаВ1С, ЭтоВПФ", DocumentСсылкаВ1С, Ложь));
				Если МассивДокументовОснований.Количество()>0 Тогда 
					СтрокаМассиваДокОснование 	= МассивДокументовОснований[0];
					IdДокументаОснования		= СтрокаМассиваДокОснование.CustomDocumentId;
					
					Document.AddInitialDocumentFromPackage(IdДокументаОснования);
				Иначе
					IdДокументаОснования = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(DocumentСсылкаВ1С);	
					Если ЗначениеЗаполнено(IdДокументаОснования) = Истина Тогда
						Document.AddInitialDocument(IdДокументаОснования);
					КонецЕсли;
				КонецЕсли;
													
				Если ЗначениеЗаполнено(ParentDocumentId) И ParentDocumentId <> IdДокументаОснования Тогда 
					Document.AddInitialDocument(ParentDocumentId);
				КонецЕсли;
								
			Иначе
				
				//*** Подчиненные доки
				МассивПодчиненныхДокументов = ПолучитьМассивПодчиненныхДокументов(DocumentСсылкаВ1С, DocumentType, СтрокаТаблицыСоответствия.ДокументОснованиеДляУПДСчфДоп);
				
				//1. сперва проверяем наличие подчиненного документа среди документов пакета
				Для каждого ПодчиненныйДокумент из МассивПодчиненныхДокументов Цикл //строка структуры("ссылка, ЭтоСчетНаОплату")
					
					ПодчиненныйДокСсылка = ПодчиненныйДокумент.Ссылка;
											
					МассивДоковТаблицыСоответствия = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("ДокументСсылкаВ1С, ЭтоВПФ", ПодчиненныйДокСсылка, Ложь));//проверить, может ссылаться на счет
					
					Для каждого СтрокаДокТаблицыСоответствия из МассивДоковТаблицыСоответствия Цикл
						Если НЕ Document.CustomDocumentId = СтрокаДокТаблицыСоответствия.CustomDocumentId Тогда
							Document.AddSubordinateDocumentFromPackage(СтрокаДокТаблицыСоответствия.CustomDocumentId);
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
				//2. вторым шагом ищем среди уже отправленных документов
				МассивSubordinateDocumentId = МассивДокументов_2_массивDocumentId(МассивПодчиненныхДокументов);
				Для каждого SubordinateDocumentId из МассивSubordinateDocumentId Цикл 
					Document.AddSubordinateDocument(SubordinateDocumentId);
				КонецЦикла;
				
				//*** Родительские доки
				МассивРодительскихДокументов = ПолучитьМассивРодительскихДокументов(DocumentСсылкаВ1С, DocumentType, ЭтоКорректировкаИсправление);
				
				//1. сперва проверяем наличие подчиненного документа среди документов пакета
				Для каждого РодительскийДокумент из МассивРодительскихДокументов Цикл
					
					РодительскийДокСсылка = РодительскийДокумент.Ссылка;
					
					МассивДоковТаблицыСоответствия = ТаблицаСоответствияCustomIdСсылке1С.НайтиСтроки(Новый Структура("ДокументСсылкаВ1С, ЭтоВПФ", РодительскийДокСсылка, Ложь));
					
					Для каждого СтрокаДокТаблицыСоответствия из МассивДоковТаблицыСоответствия Цикл
						Если НЕ Document.CustomDocumentId = СтрокаДокТаблицыСоответствия.CustomDocumentId 
							И НЕ СтрокаДокТаблицыСоответствия.ЗаполненНаОсновании Тогда
						
							Document.AddInitialDocumentFromPackage(СтрокаДокТаблицыСоответствия.CustomDocumentId);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				//2. вторым шагом ищем среди уже отправленных документов
				МассивInitialDocumentId = МассивДокументов_2_массивDocumentId(МассивРодительскихДокументов);
				
				Если ЗначениеЗаполнено(ParentDocumentId) И МассивInitialDocumentId.Найти(ParentDocumentId) = Неопределено Тогда 
					МассивInitialDocumentId.Добавить(ParentDocumentId);
				КонецЕсли;
				
				Для каждого InitialDocumentId из МассивInitialDocumentId Цикл 
					Document.AddInitialDocument(InitialDocumentId);
				КонецЦикла;
												
			КонецЕсли;
			
		КонецПроцедуры
				
		Процедура ЗаполнитьContent(Источник, Приемник)
			
			Для каждого ЭлементИсточника Из Источник Цикл
				
				Попытка
					
					Если ЭлементИсточника.Ключ = "Signers" Тогда
						
						Для Каждого ExtendedSigner_1С ИЗ ЭлементИсточника.Значение Цикл
							
							ExtendedSigner_COM= Приемник.AddSigner();
							
							Если ЗначениеЗаполнено(ExtendedSigner_1С.BoxId) Тогда
								ExtendedSigner_COM.BoxId= 				  ExtendedSigner_1С.BoxId;
								ExtendedSigner_COM.CertificateThumbprint= ExtendedSigner_1С.CertificateThumbprint;
							Иначе
								ЗаполнитьContent(ЭлементИсточника.Значение, ExtendedSigner_COM.SignerDetails);
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(ЭлементИсточника.Значение) = Тип("Соответствие") ИЛИ ТипЗнч(ЭлементИсточника.Значение) = Тип("Структура") Тогда
						ЗаполнитьContent(ЭлементИсточника.Значение, Приемник[ЭлементИсточника.Ключ]);
					Иначе
						Приемник[ЭлементИсточника.Ключ]=	ЭлементИсточника.Значение;
					КонецЕсли;
					
				Исключение КонецПопытки;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура УстановитьРеальныйСтатусУсловноОтправленногоДокумента(ДокументСсылка, Organization, стУсловноОтправленный, DocumentType = Неопределено)
			getDocumentsTask =  Organization.getDocumentsTask();
			getDocumentsTask.FromSendDate =  Дата(стУсловноОтправленный.ПоследняяМеткаВремени);
			getDocumentsTask.ToSendDate   =  Дата(стУсловноОтправленный.ПоследняяМеткаВремени)+5*60;
			getDocumentsTask.Category	  =  стУсловноОтправленный.Type + ".Outbound";
			getDocumentsTask.counterAgentId		 	=  стУсловноОтправленный.CounteragentId;
			Docs = getDocumentsTask.getDocuments();
			
			Для ц = 0 по Docs.count-1 цикл 
				Document = Docs.getItem(ц);
				Если document.CustomDocumentId = стУсловноОтправленный.FileGUID Тогда
					ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусОпределен.Отправлен.ЗаписьИдентификаторов.НачалоЗаписи", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка, "{Document" + стУсловноОтправленный.OrganizationId + "/" + document.DocumentId + "}");
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументСсылка, document.DocumentId, стУсловноОтправленный.OrganizationId, DocumentType); 
					ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусОпределен.Отправлен.ЗаписьИдентификаторов.ЗаписьВыполнена", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка, "{Document" + стУсловноОтправленный.OrganizationId + "/" + document.DocumentId + "}");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусСброшен.НачалоЗаписи", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_ПризнакУсловноОтправленный_Для_Документ(ДокументСсылка, "", "", "", "", "", DocumentType);
			ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусСброшен.ЗаписьВыполнена", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
		КонецПроцедуры
		
		Функция  ПолучитьМассивПодчиненныхДокументовПоДокмуенту(DocumentID, Organization)
			результат = Новый Массив;
			InitialDocument = Organization.GetDocumentByID(DocumentID);
			Для ц = 0 по InitialDocument.SubordinateDocumentIds.count-1 цикл 
				docid = InitialDocument.SubordinateDocumentIds.getItem(ц);
				результат.Добавить( Organization.GetDocumentByID(docid));
			КонецЦикла;	
			
			Возврат результат;
		КонецФункции	
		
		Функция ПредставлениеДанныхУсловноОтправленногоДокумента(стДанныеУсловноОтправленно)
			Возврат "{Параметры условноотправленного: " + стДанныеУсловноОтправленно.ПоследняяМеткаВремени + "/" + стДанныеУсловноОтправленно.Type + "/" + стДанныеУсловноОтправленно.OrganizationId + "/" + стДанныеУсловноОтправленно.CounteragentId + "/" + стДанныеУсловноОтправленно.FileGUID + "}";
		КонецФункции
		
		Процедура УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, Organization, CounteragentId, FileGUID, ВнешняяПечатнаяФорма = "")
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				
				ПоследняяМеткаВремени = ""; 
				ЗаписьЖурналаРегистрации(
				"Диадок.Отправка.УсловноОтправленный.СтатусУстановлен.НачалоЗаписи", 
				УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), 
				ДокументСсылка.Ссылка, 
				"{Параметры условноотправленного: " + ПоследняяМеткаВремени + "/" + DocumentType + "/" + Organization.Id + "/" + CounteragentId + "/" + FileGUID + "}");
				
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_ПризнакУсловноОтправленный_Для_Документ(ДокументСсылка, ПоследняяМеткаВремени, DocumentType, Organization.Id, CounteragentId, FileGUID, DocumentType);
				
				ЗаписьЖурналаРегистрации(
				"Диадок.Отправка.УсловноОтправленный.СтатусУстановлен.ЗаписьВыполнена", 
				УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), 
				ДокументСсылка.Ссылка, 
				"{Параметры условноотправленного: " + ПоследняяМеткаВремени + "/" + DocumentType + "/" + Organization.Id + "/" + CounteragentId + "/" + FileGUID + "}");
			Иначе 
				ЗаписьЖурналаРегистрации(
				"Диадок.Отправка.УсловноОтправленныйВПФ.СтатусУстановлен.НачалоЗаписи", 
				УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), 
				ДокументСсылка, 
				ВнешняяПечатнаяФорма);
				
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьОтметкуДополнительнойВПФ(ДокументСсылка, ВнешняяПечатнаяФорма, "У");
				
				ЗаписьЖурналаРегистрации(
				"Диадок.Отправка.УсловноОтправленныйВПФ.СтатусУстановлен.ЗаписьВыполнена", 
				УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), 
				ДокументСсылка, 
				ВнешняяПечатнаяФорма);
				
			КонецЕсли;		
		КонецПроцедуры
		
		Процедура ОбнулитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка,  DocumentType, ВнешняяПечатнаяФорма = "", СтатусВнешнейПечатнойФормы = "Н")
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусСброшен.НачалоЗаписи", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_ПризнакУсловноОтправленный_Для_Документ(ДокументСсылка, "", "", "", "", "", DocumentType);
				ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленный.СтатусСброшен.ЗаписьВыполнена", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
			Иначе 
				ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленныйВПФ.СтатусСброшен.НачалоЗаписи", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").УстановитьОтметкуДополнительнойВПФ(ДокументСсылка,ВнешняяПечатнаяФорма, СтатусВнешнейПечатнойФормы );
				ЗаписьЖурналаРегистрации("Диадок.Отправка.УсловноОтправленныйВПФ.СтатусСброшен.ЗаписьВыполнена", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка);
				
			КонецЕсли;	
		КонецПроцедуры 	
		
		Процедура Установить_DocumentID_Для_Документ_ПриОтправке(ДокументСсылка, Document, DocumentType)
			ЗаписьЖурналаРегистрации("Диадок.Отправка.ДокументОтправлен.НачалоЗаписи", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка, "{Document" + Document.Organization.Id + "/" +  Document.DocumentId + "}");
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументСсылка, Document.DocumentId, Document.Organization.Id, DocumentType, Document); 
			ЗаписьЖурналаРегистрации("Диадок.Отправка.ДокументОтправлен.ЗаписьВыполнена", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка.Ссылка, "{Document" + Document.Organization.Id + "/" +  Document.DocumentId + "}");
		КонецПроцедуры	
		
		Процедура ОтразитьИзмененияВДокументе1С(ДокументСсылка)
			
			ТекстКомментарияДиадок= ПолучитьМодульпрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТекстКомментарияДиадок(ДокументСсылка.Организация);
			Если Модуль_ИнтеграцияОбщий.ЭтоСФ(ДокументСсылка) Тогда
				Попытка 
					Модуль_ИнтеграцияОбщий.УстановитьПризнакВыставленияСФ(ДокументСсылка, ТекстКомментарияДиадок);
				Исключение 
					Сообщить("Не удалось установить данные о способе выставления для документа " + ДокументСсылка);
				КонецПопытки;	 
			Иначе 
				ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
				Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда 
					ДокументОбъект.Комментарий= ?(ЗначениеЗаполнено(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
					Попытка 
						Попытка
							ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
						Исключение
							ДокументОбъект.Записать();
						КонецПопытки;
					Исключение 	
						Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
					КонецПопытки;	 
				КонецЕсли;	 
			КонецЕсли;
			
		КонецПроцедуры
		
	//} РАБОТА С ДОКУМЕНТАМИ
	
//} ОПЕРАЦИИ С ДОКУМЕНТАМИ

//{ ИНИЦИАЛИЗАЦИЯ КОМПОНЕНТЫ
	
	Функция ПолучитьВерсиюКомпоненты() Экспорт
		Возврат DiadocInvoiceAPI.GetVersion();
	КонецФункции
	
	Функция ПолноеИмяФайлаВнешнейКомпоненты() Экспорт
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		Если Найти(Строка(СистемнаяИнформация.ТипПлатформы), "64") > 0 Тогда
			СтрокаТипПлатформы = "_x86_64";
		Иначе
			СтрокаТипПлатформы = "_x86";
		КонецЕсли;
		
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		Если Прав(КаталогВременныхФайлов, 1) <> "\" Тогда
			КаталогВременныхФайлов = КаталогВременныхФайлов + "\";
		КонецЕсли;
		
		Возврат КаталогВременныхФайлов + "AddInDiadocAPI_" + СтрЗаменить(ВерсияКомпоненты, ".","_") + СтрокаТипПлатформы + ".dll";
		
	КонецФункции
	
	Функция ПолучитьСвязанныйInvoice(Document) Экспорт
		
		Результат = Неопределено;
		
		Organization		   = Document.Organization;
		InitialDocumentIds	   = Document.InitialDocumentIds;
		SubordinateDocumentIds = Document.SubordinateDocumentIds;
		
		TimeStamp = '00010101';
		
		ВГраница = InitialDocumentIds.Count - 1;
		Для Ц = 0 По ВГраница Цикл
			
			Попытка
				InitialDocument = Organization.GetDocumentById(InitialDocumentIds.GetItem(Ц));
				// берем последнюю по времени СФ
				Если (InitialDocument.Type = "Invoice" 
					ИЛИ (InitialDocument.Type = "UniversalTransferDocument"
					И ТипДокументаУПД(InitialDocument.Function) = ТипДокументаУПД("СЧФ")))
					И TimeStamp < InitialDocument.TimeStamp Тогда
					TimeStamp = InitialDocument.TimeStamp; 
					Результат = InitialDocument; 
				КонецЕсли;
			Исключение				
				//Не получить документ по ID можем по разным причинам: нет доступа в подразделение документа, либо документ еще на подписи/согласовании у отправителя.
				//Определить тип недоступного документа в таких ситуациях мы не можем. 
				//Поэтому вызывать исключение в таких ситуациях не всегда правильно.
				//Будем исходить допущения: если нет доступа к документу, то эти данные для нас не значимы в контексте получения ГТД из СФ. 				
			КонецПопытки;			
			
		КонецЦикла;
		
		ВГраница = SubordinateDocumentIds.Count - 1;
		Для Ц = 0 По ВГраница Цикл
			
			Попытка
				SubordinateDocument = Organization.GetDocumentById(SubordinateDocumentIds.GetItem(Ц));
				// берем последнюю по времени СФ
				Если (SubordinateDocument.Type = "Invoice" 
					ИЛИ (SubordinateDocument.Type = "UniversalTransferDocument"
					И ТипДокументаУПД(SubordinateDocument.Function) = ТипДокументаУПД("СЧФ")))
					И TimeStamp < SubordinateDocument.TimeStamp Тогда
					TimeStamp = SubordinateDocument.TimeStamp; 
					Результат = SubordinateDocument; 
				КонецЕсли;
			Исключение
				//Не получить документ по ID можем по разным причинам: нет доступа в подразделение документа, либо документ еще на подписи/согласовании у отправителя.
				//Определить тип недоступного документа в таких ситуациях мы не можем. 
				//Поэтому вызывать исключение в таких ситуациях не всегда правильно.
				//Будем исходить допущения: если нет доступа к документу, то эти данные для нас не значимы в контексте получения ГТД из СФ.
			КонецПопытки;
			
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			
			// Пробуем получить счет-фактуру из сообщения, при условии что он там единственный.
			
			Попытка
				PackageDocuments = Document.GetDocumentPackage().Documents;
			Исключение КонецПопытки;
			
			Если PackageDocuments <> Неопределено Тогда
				
				ВГраница = PackageDocuments.Count - 1;
				Для Ц = 0 По ВГраница Цикл
				
					DocPackage = PackageDocuments.GetItem(Ц);
					
					Если DocPackage.Type = "Invoice" 
						ИЛИ (DocPackage.Type = "UniversalTransferDocument"
						И ТипДокументаУПД(DocPackage.Function) = ТипДокументаУПД("СЧФ")) Тогда
						
						Если Результат = Неопределено Тогда
							Результат = DocPackage;
						Иначе
							// Счетов-фактур в сообщении больше одного.
							Результат = Неопределено;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Возврат Результат;		
		
	КонецФункции
	
	Процедура ЗаполнитьСписокКонтрагентов(ТаблицаСКонтрагентами, ОрганизацияСсылка, СписокВзаимоотношений) Экспорт
		
		Перем Status;
		
		Organization= ПолучитьЯщикДиадокДляОрганизации(ОрганизацияСсылка);
		Если Organization = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаСКонтрагентами.Очистить();
		Если ТаблицаСКонтрагентами.Колонки.Найти("ОбъектДД") = Неопределено Тогда
			ТаблицаСКонтрагентами.Колонки.Добавить("ОбъектДД");
		КонецЕсли;	
		Если ТаблицаСКонтрагентами.Колонки.Найти("CounteragentId") = Неопределено Тогда
			ТаблицаСКонтрагентами.Колонки.Добавить("CounteragentId", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(300)));
		КонецЕсли;	
		
		Если СписокВзаимоотношений = "RejectsMe" ИЛИ СписокВзаимоотношений = "IsRejectedByMe" Тогда
			Status= "Rejected";
		ИначеЕсли СписокВзаимоотношений <> "All" Тогда
			Status= СписокВзаимоотношений;
		КонецЕсли;
		
		CounteragentList= Organization.GetCounteragentListByStatus(Status);
		
		ВГраница= CounteragentList.Count - 1;
		Для ИндексЦикла= 0 ПО ВГраница Цикл
			
			НоваяСтрока= ТаблицаСКонтрагентами.Добавить();
			НоваяСтрока.ОбъектДД= CounteragentList.GetItem(ИндексЦикла);
			
			НоваяСтрока.CounteragentId= НоваяСтрока.ОбъектДД.Id;
			ТекстДополнения= "";
			Если НоваяСтрока.ОбъектДД.IsTest или НоваяСтрока.ОбъектДД.IsPilot Тогда
				ТекстДополнения= "тестовый";	
			КонецЕсли;
			Если НоваяСтрока.ОбъектДД.IsRoaming Тогда
				ТекстДополнения= ТекстДополнения + ?(ЗначениеЗаполнено(ТекстДополнения), ", ", "") + "роуминговый";	
			КонецЕсли;
			НоваяСтрока.Контрагент=		НоваяСтрока.ОбъектДД.Name + ?(ЗначениеЗаполнено(ТекстДополнения), " (" + ТекстДополнения + ")", "");
			НоваяСтрока.ИНН=			НоваяСтрока.ОбъектДД.Inn;
			НоваяСтрока.КПП=			НоваяСтрока.ОбъектДД.Kpp;
			НоваяСтрока.ТекущийСтатус=  НоваяСтрока.ОбъектДД.GetStatus();
			
		КонецЦикла;
		
		ТаблицаСКонтрагентами.Сортировать("Контрагент");
		
		ОдинСАдаптер_Заполнить_ТаблицуКонтрагентовДиадок_Контрагентами1С(ТаблицаСКонтрагентами);
		
	КонецПроцедуры
	
	Процедура ОбновитьСтрокуКонтрагента(ТаблицаЗначений, ОбновленныйОбъектДД) Экспорт
		
		СтрокиПоId = ТаблицаЗначений.НайтиСтроки(Новый Структура("CounteragentId", ОбновленныйОбъектДД.Id));
		
		Для каждого стр из СтрокиПоId цикл 
			стр.КонтрагентВ1С = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(стр.CounteragentId, стр.ОбъектДД.Organization.Id);
			стр.ТекущийСтатус = ОбновленныйОбъектДД.GetStatus();
		КонецЦикла;	
		
	КонецПроцедуры
	
	Функция ИнициализироватьВК() Экспорт
		
		DiadocInvoiceAPI=		Неопределено;
		DiadocInvoiceAPITest=	Неопределено;
		
		ЗагрузитьКомпонентуИСоздатьОбъектыАПИ();
		Если DiadocInvoiceAPI = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Функция ИнициализироватьКонтекст(Логин= Неопределено, Пароль = Неопределено) Экспорт
		
		Отказ = Ложь;
		
		Если Логин <> Неопределено Тогда
			Отказ = АвторизоватьсяИЗаполнитьКонтекст_ВнешнийЗапуск(Логин, Пароль) <> Истина;
		Иначе
			Отказ = АвторизоватьсяИЗаполнитьКонтекст() <> Истина;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ИнициализироватьКонтекстДиадока();
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			АвторизоватьсяПоДопСертификатам(Отказ);
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ИнициализироватьMagic();
		КонецЕсли;
		
		Возврат НЕ Отказ;

 	КонецФункции
	
	Функция ПолучитьDiadocConnection() Экспорт
		Возврат DiadocConnectionDefault;
	КонецФункции
	
	Функция ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности) Экспорт
		стРасшифровкаОшибки = Новый Структура;
		Поз = Найти(Подробности, "##");
		Если (Поз = 0) и (найти(Подробности, "WinHttpSendRequest")=0) и (найти(Подробности, "DENIED")=0) Тогда
			ВызватьИсключение Подробности;
		КонецЕсли;
		
		ТекстОшибкиCOM = Сред(Подробности, Поз);
		КодОшибкиCOM = Сред(ТекстОшибкиCOM, 3, 3);
		ПояснениеКодаОшибкиCOM = Сред(ТекстОшибкиCOM, 7, Найти(ТекстОшибкиCOM, "]") - 7);
		ПояснениеОшибкиCOM = Сред(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, "]") + 1);
		стРасшифровкаОшибки.Вставить("Заголовок", ПояснениеКодаОшибкиCOM);
		стРасшифровкаОшибки.Вставить("Текст", ПояснениеОшибкиCOM);
		стРасшифровкаОшибки.Вставить("Подробности", Подробности);
		стРасшифровкаОшибки.Вставить("Спецификатор");
		
		Если Лев(КодОшибкиCOM, 1) = "1" Тогда 
			// Ошибка сервера диадок
			HttpCode = Сред(ПояснениеОшибкиCOM, 6, 3);
			ПояснениеОшибкиCOM = Сред(ПояснениеОшибкиCOM, 11);
			
			Если HttpCode = "401" Тогда
				// Ошибка авторизации на сервере
				Если ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "certificate", "not", "valid") Тогда
					стРасшифровкаОшибки.Текст = "Невозможно войти в "+НаименованиеСистемы+" с данным сертификатом.";
					стРасшифровкаОшибки.Спецификатор = "AuthorizationBadCertificate";
				ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "login", "not", "found") Тогда
					стРасшифровкаОшибки.Текст = "Не существует пользователя в Диадоке с данным логином.";
					стРасшифровкаОшибки.Спецификатор = "AuthorizationBadLogin";
				ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "wrong", "password") Тогда
					стРасшифровкаОшибки.Текст = "Введен неправильный логин или пароль.";
					стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
				ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "not found") Тогда
					стРасшифровкаОшибки.Текст = "Не существует пользователя в "+НаименованиеСистемы+" с данным сертификатом.";
					стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
				Иначе
					стРасшифровкаОшибки.Текст = "Ошибка входа в "+НаименованиеСистемы+".";
					стРасшифровкаОшибки.Спецификатор = "AuthorizationBad";
				КонецЕсли;
			ИначеЕсли HttpCode = "407" ИЛИ HttpCode = "502" Тогда
				// Ошибка авторизации на прокси
				стРасшифровкаОшибки.Спецификатор = "InternetError";
				стРасшифровкаОшибки.Заголовок = "Ошибка прокси-сервера";
				стРасшифровкаОшибки.Текст = "Неправильный логин или пароль для прокси-сервера.";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "already", "signed") Тогда
				стРасшифровкаОшибки.Текст = "Данный документ уже подписан.";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "requested", "signature", "rejection")
				ИЛИ ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "RequestedSignatureRejection", "document", "already", "has") Тогда
				
				стРасшифровкаОшибки.Текст = "По данному документу уже сформирован отказ в подписи.";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "access", "box", "denied") Тогда
				стРасшифровкаОшибки.Текст = "Отсутствует доступ к данному ящику Диадока.";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "fns", "box", "not", "sent") Тогда
				стРасшифровкаОшибки.Текст = "Сертификат не зарегистрирован в ФНС.";
			КонецЕсли;
		ИначеЕсли Лев(КодОшибкиCOM, 1) = "2" или (найти(Подробности, "WinHttpSendRequest")>0) или (найти(Подробности, "DENIED")>0) Тогда 
			стРасшифровкаОшибки.Спецификатор = "InternetError";
		КонецЕсли;
		
		Возврат стРасшифровкаОшибки;
		
	КонецФункции
	
	Функция ИнициализироватьОбъектыАПИ() Экспорт
		
		стПрокси = ПолучитьНастройкиПрокси();
		НастройкиПроксиЗначение = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокНастройкиПрокси");
		
		DiadocInvoiceAPI.ApiClientId = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().КлючРазработчика;
		DiadocInvoiceAPI.ServerUrl = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().АдресАПИ;
		DiadocInvoiceAPI.OneSConfigaration  = ПолучитьОписаниеКонфигурацииДляДиадок();
		
		Если НастройкиПроксиЗначение = "ИспользоватьПроксиСервер" Тогда	
			DiadocInvoiceAPI.ProxyMode ="UseProxy";
			DiadocInvoiceAPI.ProxySettings.Url 		=  стПрокси.Адрес;
			DiadocInvoiceAPI.ProxySettings.Login 	=  стПрокси.Логин;
			DiadocInvoiceAPI.ProxySettings.Password =  стПрокси.Пароль;
		ИначеЕсли НастройкиПроксиЗначение = "НеИспользовать" Тогда	
			DiadocInvoiceAPI.ProxyMode ="NoProxy";
		Иначе
			DiadocInvoiceAPI.ProxyMode ="UseDefaultProxy";
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	Процедура ЗагрузитьКомпонентуИСоздатьОбъектыАПИ()
		
		ВКПодключена = ПодключитьВнешнююКомпоненту("AddIn.DiadocInvoiceAPI");
		
		Если ВКПодключена Тогда
			
			Попытка
				AddInDiadocInvoiceAPI = Новый("AddIn.DiadocInvoiceAPI");
				УстановленнаяВерсияВК = AddInDiadocInvoiceAPI.CreateObject().GetVersion();
				AddInDiadocInvoiceAPI = Неопределено;
			Исключение
				ВКПодключена = Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ВКПодключена ИЛИ УстановленнаяВерсияВК <> ВерсияКомпоненты Тогда
			
			СистемнаяИнформация = Новый СистемнаяИнформация;
			
			Если Найти(Строка(СистемнаяИнформация.ТипПлатформы), "64") > 0 Тогда
				СтрокаТипПлатформы = "_x86_64";
			Иначе
				СтрокаТипПлатформы = "_x86";
			КонецЕсли;
			
			ПолноеИмяФайла = ПолноеИмяФайлаВнешнейКомпоненты();
			
			ФайлВнешнейКомпоненты = Новый Файл(ПолноеИмяФайла);
			Если НЕ ФайлВнешнейКомпоненты.Существует() Тогда
				ПолучитьМакет("AddInDiadocAPI" + СтрокаТипПлатформы).Записать(ПолноеИмяФайлаВнешнейКомпоненты());
			КонецЕсли;
			
			// Утилита RegSvr32 гарантировано устанавливает компоненту в профиль пользователя,
			// без необходимости повышения прав до административных используя только DLLInstall.
			ЗапуститьПриложение("RegSvr32 """+ПолноеИмяФайла+""" /s /n /i:user");
			
			Если ЗначениеЗаполнено(УстановленнаяВерсияВК) И УстановленнаяВерсияВК <> ВерсияКомпоненты Тогда
				
				Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
				"Обновление внешней компоненты AddIn.DiadocInvoiceAPI",
				"Внешняя компонента обновлена. Необходимо перезапустить программу 1С:Предприятие.",
				"Версия внешней компоненты AddIn.DiadocInvoiceAPI обновлена " + УстановленнаяВерсияВК + " -> " + ВерсияКомпоненты + ".
				|Для того чтобы использовать новую версию, необходимо перезапустить программу 1С:Предприятие.");
				
				Возврат;
				
			Иначе
				
				// Таймаут 5 секунд для завершения установки внешней компоненты через утилиту RegSvr32.
				// Дожидаться завершения через параметр метода ЗапуститьПриложение нельзя, 
				// т.к. в Windows XP утилита RegSvr32 по окончанию установки не завершает свою работу.
				Таймаут2(5000);
				
				ВКПодключена = ПодключитьВнешнююКомпоненту("AddIn.DiadocInvoiceAPI");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВКПодключена Тогда
			
			AddInDiadocInvoiceAPI = Новый("AddIn.DiadocInvoiceAPI");
			DiadocInvoiceAPI	  = AddInDiadocInvoiceAPI.CreateObject();
			DiadocInvoiceAPITest  = AddInDiadocInvoiceAPI.CreateObject();
			
			СохранитьИнформациюДляТПВоВременныйКаталог();
			
		Иначе
			
			СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаПодключенияВнешнейКомпоненты", "Ошибка подключения внешней компоненты AddIn.DiadocInvoiceAPI версии " + ВерсияКомпоненты);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	
//} ИНИЦИАЛИЗАЦИЯ КОМПОНЕНТЫ

//{ РАБОТА С ПОДКЛЮЧЕНИЕМ
	
	Функция ПолучитьНастройкиПрокси() Экспорт
		
		Адрес=	ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокАдресПроксиСервера");
		Логин=	ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПользовательПроксиСервера");
		Пароль=	ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокПарольПроксиСервера");
		
		Возврат Новый Структура("Адрес, Логин, Пароль", Адрес, Логин, Пароль);
		
	КонецФункции
	
	Процедура УстановитьНастройкиПрокси(СтруктураНастроек) Экспорт
		
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокАдресПроксиСервера",			СтруктураНастроек.Адрес);
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПользовательПроксиСервера",	СтруктураНастроек.Логин);
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку("ДиадокПарольПроксиСервера",			СтруктураНастроек.Пароль);
		
		DiadocInvoiceAPI.ApiClientId= 				ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().КлючРазработчика;
		DiadocInvoiceAPI.ServerUrl= 				ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().АдресАПИ;
		DiadocInvoiceAPI.ProxyMode=					"UseProxy";
		DiadocInvoiceAPI.ProxySettings.Url=			СтруктураНастроек.Адрес;
		DiadocInvoiceAPI.ProxySettings.Login=		СтруктураНастроек.Логин;
		DiadocInvoiceAPI.ProxySettings.Password=	СтруктураНастроек.Пароль;
		
	КонецПроцедуры
	
	Процедура УстановитьНастройкиIE(стПрокси, ИспользоватьНастройкиПроксиIE) Экспорт
		
		DiadocInvoiceAPI.ApiClientId = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().КлючРазработчика;
		DiadocInvoiceAPI.ServerUrl = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().АдресАПИ;
		DiadocInvoiceAPI.ProxyMode = ?(ИспользоватьНастройкиПроксиIE=1, "UseDefaultProxy", "NoProxy");
		
		DiadocInvoiceAPI.ProxySettings.Url=		 "";
		DiadocInvoiceAPI.ProxySettings.Login=	 "";
		DiadocInvoiceAPI.ProxySettings.Password= "";
		
	КонецПроцедуры
	
	Процедура ПроверитьПодключениеДиадок(НастройкиПрокси, СтруктураНастроек) Экспорт
		
		Если НастройкиПрокси = "ИспользоватьПроксиСервер" Тогда
			ПроверитьПодключениеПрокси(СтруктураНастроек);
		ИначеЕсли НастройкиПрокси = "ИспользоватьНастройкиIE" Тогда
			ПроверитьПодключениеIE(,1);
		Иначе
			ПроверитьПодключениеIE(,0);
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ПроверитьПодключениеПрокси(СтруктураНастроек) Экспорт
		
		DiadocInvoiceAPITest.ApiClientId = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().КлючРазработчика;
		DiadocInvoiceAPITest.ServerUrl = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().АдресАПИ;
		DiadocInvoiceAPITest.ProxyMode = "UseProxy";
		DiadocInvoiceAPITest.ProxySettings.Url=			СтруктураНастроек.Адрес;
		DiadocInvoiceAPITest.ProxySettings.Login=		СтруктураНастроек.Логин;
		DiadocInvoiceAPITest.ProxySettings.Password=	СтруктураНастроек.Пароль;
		
		Если НЕ DiadocInvoiceAPITest.TestConnection() Тогда
			ВызватьИсключение("Текущие настройки не позволяют подключиться к серверу " + НаименованиеСистемы);
		КонецЕсли;	
		
		Возврат Истина;
		
	КонецФункции
	
	Функция ПроверитьПодключениеIE(стПрокси,ИспользоватьНастройкиIE) Экспорт
		
		DiadocInvoiceAPITest.ApiClientId = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().КлючРазработчика;
		DiadocInvoiceAPITest.ServerUrl = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПараметрыПодключения().АдресАПИ;
		DiadocInvoiceAPITest.ProxyMode = ?(ИспользоватьНастройкиIE=1, "UseDefaultProxy", "NoProxy");
		
		Если НЕ DiadocInvoiceAPITest.TestConnection() Тогда 
			вызватьИсключение("Текущие настройки не позволяют подключиться к серверу "+НаименованиеСистемы);
		КонецЕсли;	
		
		Возврат Истина;
		
	КонецФункции
	
	Функция ПроверитьПодключение() Экспорт
		
		Возврат DiadocInvoiceAPI.TestConnection();
		
	КонецФункции
	
//} РАБОТА С ПОДКЛЮЧЕНИЕМ

//{ ОРГАНИЗАЦИИ
	
	Функция ПолучитьОрганизацииНезаблокированныеПоAPI() Экспорт
		
		СписокОрганизаций =  Новый Массив;
		Если КонтекстДиадока <> Неопределено Тогда
			Для Каждого ТекОрганизация Из КонтекстДиадока Цикл
				Если НЕ ТекОрганизация.ЗаблокированаПоAPI Тогда
					СписокОрганизаций.Добавить(ТекОрганизация.Организация);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	Функция ПолучитьКонтекстДиадока() Экспорт
		
		Возврат КонтекстДиадока;
		
	КонецФункции
	
//} ОРГАНИЗАЦИИ

Функция ОпределитьReceiverDepartmentId(КонтрагентСсылка, ГрузополучательСсылка, DocumentType)

	ReceiverDepartmentId = Неопределено;
	Если ЗначениеЗаполнено(ГрузополучательСсылка) И КонтрагентСсылка.инн = ГрузополучательСсылка.инн Тогда 
		ReceiverDepartmentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ОпределитьReceiverDepartmentIdПоКонтрагенту(ГрузополучательСсылка);
		Если НЕ ПустаяСтрока(ReceiverDepartmentId) Тогда
			Возврат ReceiverDepartmentId;
		КонецЕсли;
	КонецЕсли;
	
	ReceiverDepartmentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ОпределитьReceiverDepartmentIdПоКонтрагенту(КонтрагентСсылка);
	Если НЕ ПустаяСтрока(ReceiverDepartmentId) Тогда
		Возврат ReceiverDepartmentId;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ReplySendTask(Document, Type) Экспорт
	
	Если Document.IsLockedPackage Тогда
		Возврат Document.GetDocumentPackage().CreateReplySendTask(Type);
	Иначе
		Возврат Document.CreateReplySendTask(Type);
	КонецЕсли;
	
КонецФункции

Процедура ПодписатьВДиадоке(Document, ReplySendTask= Неопределено, BuyerTitleInfo= Неопределено) Экспорт
	
	Если ReplySendTask = Неопределено Тогда
		Document.Accept();
	Иначе
		
		Если BuyerTitleInfo <> Неопределено Тогда
			
			ПроверитьСертификат(Document.OrganizationID);
			
			ЗаполнитьContent(BuyerTitleInfo, ReplySendTask.Content);
			
		КонецЕсли;
		
		ReplySendTask.Send();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтказатьВПодписиВДиадоке(Document, Комментарий= "", Асинхронно= Ложь) Экспорт
	
	ReplySendTask = ReplySendTask(Document, "RejectDocument");
	
	Если ReplySendTask.Content.Type = "XmlSignatureRejection" Тогда
		
		ПроверитьСертификат(Document.OrganizationID);
		
		ЗаполнитьПодписанта("Signer", ReplySendTask.Content.Signer, Document.OrganizationID);
		
	КонецЕсли;
	
	ReplySendTask.Content.Comment = Комментарий;
	
	Если Асинхронно Тогда
		Возврат ReplySendTask.SendAsync();
	Иначе
		ReplySendTask.Send();
	КонецЕсли;
	
КонецФункции

Процедура ПодписатьЗалоченныйПакетВДиадоке(ReplySendTask, СтруктурыПодписей) Экспорт 
	
	PackageContentItems= ReplySendTask.Content.ContentItems;
	
	ВГраница= PackageContentItems.Count-1;
	
	Для ИндексЦикла= 0 ПО ВГраница Цикл
		
		PackageContentItem = PackageContentItems.GetItem(ИндексЦикла);
		
		DocumentType= DocumentType(PackageContentItem.Document, PackageContentItem.Content);
		
		Если ЭтоФормализованныйДокумент(DocumentType) Тогда
			ПроверитьСертификат(PackageContentItem.Document.OrganizationID);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для ИндексЦикла= 0 ПО ВГраница Цикл
		
		PackageContentItem= PackageContentItems.GetItem(ИндексЦикла);
		
		DocumentType= DocumentType(PackageContentItem.Document, PackageContentItem.Content);
		
		BuyerTitleInfo= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").СформироватьТитулПолучателя(СтруктурыПодписей[DocumentType], PackageContentItem.Document, DocumentType);
		
		ЗаполнитьContent(BuyerTitleInfo, PackageContentItem.Content);
		
	КонецЦикла;
	
	ReplySendTask.Send();
	
КонецПроцедуры

Функция ОтказатьВПодписиЗалоченногоПакетаВДиадоке(ReplySendTask, ТекстОтказа= "", Асинхронно= Ложь) Экспорт 
	
	PackageContentItems = ReplySendTask.Content.ContentItems;
	ВГраница = PackageContentItems.Count-1;
	
	Для Ц = 0 по ВГраница Цикл
		PackageContentItem = PackageContentItems.GetItem(Ц);
		Если ЭтоФормализованныйДокумент(DocumentType(PackageContentItem.Document)) Тогда
			ПроверитьСертификат(PackageContentItem.Document.OrganizationID);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Ц = 0 ПО ВГраница Цикл
		
		PackageContentItem = PackageContentItems.GetItem(Ц);
		PackageContentItem.Content.Comment = ТекстОтказа;
		
		Если PackageContentItem.Content.Type = "XmlSignatureRejection" Тогда
			ЗаполнитьПодписанта("Signer", PackageContentItem.Content.Signer, PackageContentItem.Document.OrganizationID);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Асинхронно Тогда
		Возврат ReplySendTask.SendAsync();
	Иначе
		ReplySendTask.Send();
	КонецЕсли;
	
КонецФункции

Функция ПодписатьВДиадокеАсинхронно(СтрокаТаблицы, BuyerTitleInfo, МассивЗаданийОтправкаТитулаПокупателя) Экспорт
	
	Если BuyerTitleInfo = Неопределено Тогда
		
		СтрокаТаблицы.ЭДОбъект.Accept();
		
		СтрокаТаблицы.ЭДОбъект = ПолучитьДокументДиадок(СтрокаТаблицы.ЭДОбъект.DocumentId, СтрокаТаблицы.ЭДОбъект.OrganizationID);
		
		Оповестить("ОбновитьСтроку", СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
		
	Иначе
		
		ПроверитьСертификат(СтрокаТаблицы.ЭДОбъект.OrganizationID);
		
		ReplySendTask= СтрокаТаблицы.ЭДОбъект.CreateReplySendTask();
		
		ЗаполнитьContent(BuyerTitleInfo, ReplySendTask.Content);
		
		МассивЗаданийОтправкаТитулаПокупателя.Добавить(Новый Структура("DocumentId, BoxId, ReplySendTask, СтрокаТаблицы", СтрокаТаблицы.ЭДОбъект.DocumentId, СтрокаТаблицы.ЭДОбъект.OrganizationID, ReplySendTask.SendAsync(), СтрокаТаблицы));
		
	КонецЕсли;	
	
	ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").События_ПриИзмененииСтатусаДокумента(СтрокаТаблицы.ЭДОбъект.DocumentId, СтрокаТаблицы.ЭДОбъект.OrganizationID);
	
КонецФункции

Функция ОтправитьЗапросНаАннулирование(Document, КомментарийКЗапросу = "") Экспорт
	
	Document.SendRevocationRequest(КомментарийКЗапросу);
	
КонецФункции

Функция ОбработатьЗапросНаАннулирование(Аннулирование, Document, КомментарийКОтвету = "") Экспорт
	
	Если Аннулирование Тогда
		Document.AcceptRevocationRequest();
	Иначе
		Document.RejectRevocationRequest(КомментарийКОтвету);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросНаУточнение(Document, Комментарий = "", Асинхронно = Ложь) Экспорт 
	
	ПроверитьСертификат(Document.OrganizationID);

	ReplySendTask = ReplySendTask(Document, "CorrectionRequest");
	
	ReplySendTask.Content.Comment = Комментарий;
	
	ЗаполнитьПодписанта("Signer", ReplySendTask.Content.Signer, Document.OrganizationID);
	
	Если Асинхронно Тогда
		Возврат ReplySendTask.SendAsync();
	Иначе
		ReplySendTask.Send();
	КонецЕсли;
	
КонецФункции	

Функция ПодписатьЗапрошенныйДокумент(Document) Экспорт 
	
	OutDocumentSignTask = Document.CreateOutDocumentSignTask();
	
	Если ПолучитьТипКонтента(Document.AttachmentVersion, Document.Type) = "UniversalTransferDocument" 
		ИЛИ ПолучитьТипКонтента(Document.AttachmentVersion, Document.Type) = "UniversalCorrectionDocument" Тогда
		ТипSigner= "ExtendedSigner";
		Signer= OutDocumentSignTask.AddExtendedSigner();
	Иначе
		ТипSigner= "Signer";
		Signer= OutDocumentSignTask.Signer;
	КонецЕсли;
	
	ЗаполнитьПодписанта(ТипSigner, Signer, Document.OrganizationID);
	
	OutDocumentSignTask.Send();
	
КонецФункции


////////////////////////////////////////////////////////////////////
//// получение списка документов
///////////////////////////////////////////////////////////////////

Процедура ЗаполнитьПараметрыДокументаВДереве(СтрокаДерева, ОбъектДиадок, ОтпечатокСертификата = "")  Экспорт
	СтрокаДерева.ЭДОбъект = ОбъектДиадок;
	СтрокаДерева.ТипДокумента = ПредставлениеТипаЭД(ОбъектДиадок);
	
	СтрокаДерева.Дата= 		ОбъектДиадок.DocumentDate;
	Если ОбъектДиадок.Type = "Invoice" Тогда
		СтрокаДерева.ДатаУчета = ОбъектДиадок.ConfirmationDate;
	Иначе
		СтрокаДерева.ДатаУчета = ОбъектДиадок.Timestamp;
	КонецЕсли;
	СтрокаДерева.Номер 						= ПредсталениеНомераЭД(ОбъектДиадок);
	СтрокаДерева.Сумма						= ПредставлениеСуммы(ОбъектДиадок);
	
	СтрокаДерева.СостояниеДокументооборота 	= ПредставлениеСтатуса(ОбъектДиадок);
	СтрокаДерева.DocumentId = ОбъектДиадок.DocumentId;
	СтрокаДерева.BoxId = ОбъектДиадок.OrganizationId;
	СтрокаДерева.ПервичныйДокумент = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(ОбъектДиадок.DocumentId, ОбъектДиадок.OrganizationId, ОбъектДиадок);
	СтрокаДерева.Направление = ?(ОбъектДиадок.Direction = "Inbound", "Входящий", "Исходящий");
	СтрокаДерева.Продавец 						= ПредставлениеПродавца(ОбъектДиадок);
	СтрокаДерева.Покупатель 					= ПредставлениеПокупателя(ОбъектДиадок);
	Department = ОбъектДиадок.Department;
	СтрокаДерева.Подразделение					= ?(Department<>Неопределено, ОбъектДиадок.Department.Name, "");
КонецПроцедуры

Функция ПолучитьВершинуДеревоDocument(Document, СоответствиеДокументов= Неопределено)
	
	Если СоответствиеДокументов = Неопределено Тогда
		СоответствиеДокументов= Новый Соответствие;
	КонецЕсли;
	
	ТабПроверки=	Новый ТаблицаЗначений;
	ТабПроверки.Колонки.Добавить("DocumentID");
	
	ТекущийDocument=	Document;
	Пока ТекущийDocument.InitialDocumentIds.Count > 0 И ТабПроверки.Найти(ТекущийDocument.DocumentID, "DocumentID") = Неопределено Цикл
		
		НоваяСтрока=			ТабПроверки.Добавить();
		НоваяСтрока.DocumentID=	ТекущийDocument.DocumentID;
		
		РодительскийДокумент= ПолучитьОбъектДиадок(ТекущийDocument.InitialDocumentIds.GetItem(0), ТекущийDocument.Organization, СоответствиеДокументов);
		Если РодительскийДокумент = Неопределено Тогда
			Продолжить;
		Иначе
			ТекущийDocument=	РодительскийДокумент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекущийDocument;
	
КонецФункции

Процедура ОбработатьУзелДерева(Document, ParentId, ТЗ)
	
	Если Document = Неопределено ИЛИ  ТЗ.Найти(Document.DocumentID,"DocumentID") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	строка = ТЗ.Добавить();
	Если Document.Type = "Invoice" Тогда
		строка.Порядок = "1";
		строка.Уровень = 1;
	ИначеЕсли Document.Type = "InvoiceRevision" Тогда
		строка.Порядок = "2";
		строка.Уровень = 2;
	ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
		строка.Порядок = "3:" + Document.DocumentId;
		строка.Уровень = 1;
	ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
		строка.Порядок = "3:" + ParentId;
		строка.Уровень = 2;
	ИначеЕсли Document.Type = "Nonformalized" Тогда	
		Если Document.InitialDocumentIds.Count = 0 ИЛИ ParentId = "" Тогда
			строка.Порядок = "4";
			строка.Уровень = 1;
		Иначе
			ParentDoc  =  Document.Organization.GetDocumentById(ParentId);
			Если ParentDoc.Type = "Invoice" Тогда
				строка.Порядок = "1";
				строка.Уровень = 2;	
			ИначеЕсли ParentDoc.Type = "InvoiceRevision" Тогда
				строка.Порядок = "2";
				строка.Уровень = 3;
			ИначеЕсли ParentDoc.Type = "InvoiceRevision" Тогда	
				строка.Порядок = "3:" + Document.DocumentId;
				строка.Уровень = 2;
			ИначеЕсли ParentDoc.Type = "InvoiceCorrectionRevision" Тогда
				строка.Порядок = "3:" + ParentId;
				строка.Уровень = 3;
			ИначеЕсли ParentDoc.Type = "Nonformalized" Тогда
				строка.Порядок = "4";
				строка.Уровень = 2;
			Иначе
				строка.Порядок = "0";
				строка.Уровень = 2;
			КонецЕсли;
		КонецЕсли;
    Иначе
		строка.Порядок = "0";
		строка.Уровень = 1;
	КонецЕсли;
	строка.Document = Document;
	строка.IsDeleted = 	Document.isDeleted;
		
	строка.DocumentID = Document.DocumentID;
	
	СоответствиеДокументов=	Новый Соответствие;
	Для ц = 0 по Document.SubordinateDocumentIds.count -1  Цикл
		стрSubordinateId =  Document.SubordinateDocumentIds.GetItem(ц);
		ПодчиненныйУзелДерева=	ПолучитьОбъектДиадок(стрSubordinateId, Document.Organization, СоответствиеДокументов);
		Если НЕ ПодчиненныйУзелДерева = Неопределено Тогда
			ОбработатьУзелДерева(ПодчиненныйУзелДерева, Document.DocumentId, ТЗ);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеДокументов=	Новый Соответствие;
	Для ц = 0 по Document.InitialDocumentIds.count -1 Цикл
		стрParentID = Document.InitialDocumentIds.getItem(ц);
		РодительскийУзелДерева=	ПолучитьОбъектДиадок(стрParentID, Document.Organization, СоответствиеДокументов);
		Если НЕ РодительскийУзелДерева = Неопределено Тогда
			ОбработатьУзелДерева(РодительскийУзелДерева, Document.DocumentId, ТЗ);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДеревоСвязейДокументов(Document, ДеревоДокументов, ФормироватьТаблицуЗначений = Ложь) Экспорт
	Если ДеревоДокументов.Колонки.Найти("ЭДОбъект") = Неопределено Тогда
		ДеревоДокументов.Колонки.Добавить("ЭДОбъект");
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Порядок");
	ТЗ.Колонки.Добавить("Уровень");
	ТЗ.Колонки.Добавить("Document");
	ТЗ.Колонки.Добавить("DocumentID");
	ТЗ.Колонки.Добавить("IsDeleted");
	
	ОбработатьУзелДерева(ПолучитьВершинуДеревоDocument(Document), "", ТЗ);
	
	СтрокиДляУдаления = ТЗ.НайтиСтроки(Новый Структура("IsDeleted", Истина));
	Для Каждого СтрУдалить из СтрокиДляУдаления Цикл
		ТЗ.Удалить(СтрУдалить);	
	КонецЦикла;
	
	ТЗ.Сортировать("Порядок, Уровень");
	
	Если ФормироватьТаблицуЗначений Тогда
		Для каждого СтрокаДанных Из ТЗ Цикл
			стр = ДеревоДокументов.Добавить();
			ЗаполнитьПараметрыДокументаВДереве(стр, СтрокаДанных.Document);
		КонецЦикла;
	Иначе
		ПоследняяСтрокаРодитель = ДеревоДокументов;
		Для каждого СтрокаДанных Из ТЗ Цикл
			Если СтрокаДанных.Уровень = 1 Тогда
				стр = ДеревоДокументов.Строки.Добавить();
				ЗаполнитьПараметрыДокументаВДереве(стр, СтрокаДанных.Document);
				ПоследняяСтрокаРодитель = стр;
			Иначе
				стр = ПоследняяСтрокаРодитель.Строки.Добавить();
				ЗаполнитьПараметрыДокументаВДереве(стр, СтрокаДанных.Document);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПредставлениеЭД(ЭДОбъект) Экспорт
	Если ЭДОбъект.Type = "Invoice" Тогда
		Возврат "Счет-фактура №" + ЭДОбъект.DocumentNumber + " от " + Формат(ЭДОбъект.DocumentDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
		Возврат "Исправление №" + ЭДОбъект.DocumentNumber + " от " + ЭДОбъект.DocumentDate + " счета-фактуры №" + ЭДОбъект.OriginalDocumentNumber + " от " + Формат(ЭДОбъект.OriginalDocumentDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
		Возврат "Корректировочный счет-фактура №" + ЭДОбъект.DocumentNumber + " от " + ЭДОбъект.DocumentDate;
	ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
		Возврат "Исправление №" + ЭДОбъект.DocumentNumber + " от " + ЭДОбъект.DocumentDate 
			+ " корректировочного счета-фактуры №" + + ЭДОбъект.OriginalInvoiceCorrectionNumber + " от " + Формат(ЭДОбъект.OriginalInvoiceCorrectionDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли найти(ЭДОбъект.Type, "Torg12")>0 Тогда
		Возврат "Торг-12 №" + ЭДОбъект.DocumentNumber + " от " + Формат(ЭДОбъект.DocumentDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли найти(ЭДОбъект.Type, "AcceptanceCertificate")>0 Тогда
		Возврат "Акт №" + ЭДОбъект.DocumentNumber + " от " + Формат(ЭДОбъект.DocumentDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" Тогда
		Возврат ТипДокументаУПД(ЭДОбъект.Function)+ " №" + ЭДОбъект.DocumentNumber + " от " + Формат(ЭДОбъект.DocumentDate, "ДФ=dd.MM.yyyy");
	ИначеЕсли ЭДОбъект.Type = "UniversalCorrectionDocument" Тогда
		Возврат ТипДокументаУКД(ЭДОбъект.Function)+ " №" + ЭДОбъект.DocumentNumber + " от " + Формат(ЭДОбъект.DocumentDate, "ДФ=dd.MM.yyyy");
	Иначе 
		Возврат ЭДОбъект.FileName;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокТиповДокументовДиадок() Экспорт
	
	СписокТипов=	Новый СписокЗначений;
	СписокТипов.Добавить("Invoice", 							"Счет-фактура");
	СписокТипов.Добавить("InvoiceRevision", 					"Исправление СФ");
	СписокТипов.Добавить("InvoiceCorrection", 					"Корректировочный СФ");
	СписокТипов.Добавить("InvoiceCorrectionRevision", 			"Исправление КСФ");
	СписокТипов.Добавить("XmlAcceptanceCertificate", 			"Акт");
	СписокТипов.Добавить("NonformalizedAcceptanceCertificate",	"Акт (не формализованный)");
	СписокТипов.Добавить("NonformalizedProforma", 				"Счет на оплату");
	СписокТипов.Добавить("Nonformalized",						"Неформализованный документ");
	СписокТипов.Добавить("XmlTorg12",							"Торг-12");
	СписокТипов.Добавить("NonformalizedTorg12",					"Торг-12 (не формализованный)");
	СписокТипов.Добавить("Contract",							"Договор");
	СписокТипов.Добавить("ReconciliationAct",					"Акт сверки");
	СписокТипов.Добавить("ServiceDetails",						"Детализация");
	СписокТипов.Добавить("PriceListAgreement",					"Протокол согласования цены");
	СписокТипов.Добавить("CertificateRegistry",					"Реестр сертификатов");
	СписокТипов.Добавить("TrustConnectionRequest",				"Приглашение к ЭДО");
	СписокТипов.Добавить("UniversalTransferDocument",			"УПД");

	Возврат СписокТипов;
	
КонецФункции

Функция ПолучитьЗначениеТипаДокумента(Type)
	
	НайденныйТип=	СписокТиповДокументов.НайтиПоЗначению(Type);
	Если НЕ НайденныйТип = Неопределено Тогда
		Возврат НайденныйТип.Представление;
	Иначе
		Возврат "???";
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеТипаЭД(Document) Экспорт
	
	// ТОРГ-12 в формате 551 приказа и Акт в формате 552 приказа пока не поддерживаются (DD1C-240)
	Если НРег(Лев(Document.AttachmentVersion, 8)) = "tovtorg_" Тогда
		тип= "Торг-12 (???)";
	ИначеЕсли НРег(Лев(Document.AttachmentVersion, 6)) = "rezru_" Тогда
		тип= "Акт (???)";
	ИначеЕсли Document.Type = "Invoice" Тогда
		тип= "Счет-фактура";
	ИначеЕсли Document.Type = "InvoiceRevision" Тогда
		тип= "Исправление СФ";
	ИначеЕсли Document.Type = "InvoiceCorrection" Тогда
		тип= "Корректировочный СФ";
	ИначеЕсли Document.Type = "InvoiceCorrectionRevision" Тогда
		тип= "Исправление КСФ";
	ИначеЕсли Найти(Document.Type, "AcceptanceCertificate")>0 Тогда 
		тип= "Акт";
	ИначеЕсли Document.Type = "NonformalizedProforma" Тогда
		тип= "Счет на оплату";
	ИначеЕсли Document.Type = "Nonformalized" Тогда
		тип= Document.fileName;		
	ИначеЕсли Найти(Document.Type, "Torg12")>0 Тогда
		тип= "Торг-12";
	ИначеЕсли Document.Type = "Contract" Тогда 
		тип= "Договор";
	ИначеЕсли Document.Type = "ReconciliationAct" Тогда 
		тип= "Акт сверки";
	ИначеЕсли Document.Type = "ServiceDetails" Тогда 
		тип= "Детализация";
	ИначеЕсли Document.Type = "PriceListAgreement" Тогда 
		тип= "Протокол согласования цены";
	ИначеЕсли Document.Type = "PriceList" Тогда 
		тип= "Ценовой лист";
	ИначеЕсли Document.Type = "CertificateRegistry" Тогда 
		тип= "Реестр сертификатов";			
	ИначеЕсли Document.Type = "TrustConnectionRequest"  Тогда 
		тип= "Приглашение к ЭДО";
	ИначеЕсли Document.Type = "SupplementaryAgreement"  Тогда 
		тип= "Доп. соглашение";			
	ИначеЕсли Document.Type = "UniversalTransferDocument"  Тогда 
		тип = ТипДокументаУПД(Document.Function);
	ИначеЕсли Document.Type = "UniversalCorrectionDocument"  Тогда 
		тип = ТипДокументаУКД(Document.Function);
	Иначе 
		тип= "???";
	КонецЕсли;
	
	Возврат тип + ПредставлениеТипаЭД_СтрокаВСкобках(Document);
	
КонецФункции

Функция ПредставлениеТипаЭД_СтрокаВСкобках(Document)
	
	Стр = "";
	Разделитель	   = "";
	
	Если Document.IsTest Тогда
		Стр = "тестовый";
		Разделитель = ", ";
	КонецЕсли;
	
	Если Document.IsEncryptedContent Тогда
		Стр = Стр + Разделитель + "зашифрован";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Стр) Тогда
		Стр = " ("+Стр+")";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции

Функция ПредсталениеНомераЭД(ЭДОбъект)
	Возврат ЭДОбъект.DocumentNumber;
	
	//Если ЭДОбъект.Type = "InvoiceRevision" Тогда
	//	Возврат ЭДОбъект.DocumentNumber + " на СФ №" + ЭДОбъект.OriginalDocumentNumber + " от " + Формат(ЭДОбъект.OriginalDocumentDate, "ДЛФ=Д");
	//ИначеЕсли ЭДОбъект.Type = "InvoiceCorrection" Тогда
	//	Возврат ЭДОбъект.DocumentNumber;
	//ИначеЕсли ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
	//	Возврат ЭДОбъект.DocumentNumber + " на КСФ №" + ЭДОбъект.OriginalInvoiceCorrectionNumber + " от " + Формат(ЭДОбъект.OriginalInvoiceCorrectionDate, "ДЛФ=Д");
	//Иначе
	//	Возврат ЭДОбъект.DocumentNumber;
	//КонецЕсли;
КонецФункции

Функция РасшифровкаТекущегоСостоянияВзаимоотношений(Статус) Экспорт
	
	Возврат КэшФормы_Получить("ПредставлениеСтатусовВзаимоотношений")[Статус];
	
КонецФункции

//{ Получить списки
	
	Функция ПолучитьСписокОрганизацийДиадок() Экспорт
		
		СписокОрганизаций=	Новый СписокЗначений;
		
		ТаблицаОрганизаций=	Новый ТаблицаЗначений;
		ТаблицаОрганизаций.Колонки.Добавить("Представление");
		
		ТаблицаЯщиков = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации(Неопределено);
		
		Для каждого СтрокаТаблицы Из ТаблицаЯщиков Цикл
			СтрокаТаблицыОрганизаций=	ТаблицаОрганизаций.Добавить();
			СтрокаТаблицыОрганизаций.Представление=	СтрокаТаблицы.Представление;
		КонецЦикла;
		
		ТаблицаОрганизаций.Свернуть("Представление");
		
		МассивПредставлений=	ТаблицаОрганизаций.ВыгрузитьКолонку("Представление");
		СписокОрганизаций.ЗагрузитьЗначения(МассивПредставлений);
		СписокОрганизаций.СортироватьПоЗначению();
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	Функция ПолучитьСписокАктивныхКонтрагентовДиадок() Экспорт
		
		СписокКонтрагентов=	Новый СписокЗначений;
		
		ТаблицаКонтрагентов=	Новый ТаблицаЗначений;
		ТаблицаКонтрагентов.Колонки.Добавить("Представление");
		
		ТаблицаЯщиков= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
		Для каждого СтрокаТаблицы Из ТаблицаЯщиков Цикл
			
			Box = ПолучитьЯщикДиадокДляОрганизации(СтрокаТаблицы.Объект);
			CounteragentList = Box.GetCounteragentListByStatus("IsMyCounteragent");
			
			Для Ц = 0 По CounteragentList.Count-1 Цикл
				Counteragent = CounteragentList.GetItem(Ц);
				СтрокаТаблицыКонтрагентов=	ТаблицаКонтрагентов.Добавить();
				СтрокаТаблицыКонтрагентов.Представление=	Counteragent.Name;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаКонтрагентов.Свернуть("Представление");
		
		МассивПредставлений=	ТаблицаКонтрагентов.ВыгрузитьКолонку("Представление");
		СписокКонтрагентов.ЗагрузитьЗначения(МассивПредставлений);
		СписокКонтрагентов.СортироватьПоЗначению();
		
		Возврат СписокКонтрагентов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадокВходящие()
		
		СоответствиеСтатусов= Новый Соответствие;
		
		СоответствиеСтатусов.Вставить("InboundNotFinished"						, "Документооборот не завершен");
		СоответствиеСтатусов.Вставить("InboundFinished"							, "Документооборот завершен");
		СоответствиеСтатусов.Вставить("InboundWaitingForRecipientSignature"		, "Требуется подпись");
		СоответствиеСтатусов.Вставить("InboundWithRecipientSignature"			, "Подписан");
		СоответствиеСтатусов.Вставить("InboundRecipientSignatureRequestRejected", "Отказано в подписи");
		СоответствиеСтатусов.Вставить("InboundInvalidRecipientSignature"		, "Ошибка подписи");
		СоответствиеСтатусов.Вставить("InboundNoRecipientSignatureRequest"		, "Доставлен");
		СоответствиеСтатусов.Вставить("Inbound"									, "Получен");

		Возврат СоответствиеСтатусов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадокИсходящие()
		
		СоответствиеСтатусов=	Новый Соответствие;
		
		СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceipt"		 , "Ожидается извещение от покупателя");
		СоответствиеСтатусов.Вставить("OutboundNotFinished"						 , "Документооборот не завершен");
		СоответствиеСтатусов.Вставить("OutboundFinished"						 , "Документооборот завершен");
		СоответствиеСтатусов.Вставить("OutboundWaitingForRecipientSignature"	 , "Требуется подпись");
		СоответствиеСтатусов.Вставить("OutboundWithRecipientSignature"			 , "Подписан");
		СоответствиеСтатусов.Вставить("OutboundRecipientSignatureRequestRejected", "Отказано в подписи");
		СоответствиеСтатусов.Вставить("OutboundWaitingForSenderSignature"		 , "Требуется подписать и отправить");// через сайт " + НаименованиеСистемы);
		СоответствиеСтатусов.Вставить("OutboundInvalidSenderSignature"			 , "Ошибка подписи");
		СоответствиеСтатусов.Вставить("OutboundNoRecipientSignatureRequest"		 , "Доставлен");
		СоответствиеСтатусов.Вставить("Outbound"								 , "Отправлен");
		СоответствиеСтатусов.Вставить("OutboundWaitingForReceipt"		         , "Ожидается извещение от покупателя");
		СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceiptAndRecipientSignature", "Ожидается извещение и подпись от покупателя");
		
		Возврат СоответствиеСтатусов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадокВнутренние()
		
		СписокСтатусов=	Новый Соответствие;
		
		//...
		
		Возврат СписокСтатусов;
		
	КонецФункции
	
	Функция СтатусыДокументовДиадок() Экспорт
		
		Если СтатусыДокументовДиадок <> Неопределено Тогда
			Возврат СтатусыДокументовДиадок;
		КонецЕсли;
		
		СтатусыДокументовДиадок= Новый Структура;
		СтатусыДокументовДиадок.Вставить("Inbound" , СтатусыДокументовДиадокВходящие());
		СтатусыДокументовДиадок.Вставить("Outbound", СтатусыДокументовДиадокИсходящие());
		СтатусыДокументовДиадок.Вставить("Internal", СтатусыДокументовДиадокВнутренние());
		
		Возврат СтатусыДокументовДиадок;
		
	КонецФункции
	
	Функция СтатусыАнулированияДокументовДиадок()
		
		Если СтатусыАнулированияДокументовДиадок <> Неопределено Тогда
			Возврат СтатусыАнулированияДокументовДиадок;
		КонецЕсли;
		
		СтатусыАнулированияДокументовДиадок= Новый Соответствие;
		
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationIsRequestedByMe", "Ожидается аннулирование");
		СтатусыАнулированияДокументовДиадок.Вставить("RequestsMyRevocation"		, "Требуется аннулирование");
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationRejected"		, "Отказано в аннулировании");
		СтатусыАнулированияДокументовДиадок.Вставить("RevocationAccepted"		, "Аннулирован");
		
		Возврат СтатусыАнулированияДокументовДиадок;
		
	КонецФункции
	
//} Получить списки

Функция СтатусДокументооборота(Status, RevocationStatus, Direction)
	
	Перем СтатусДокументооборота;
	
	Если RevocationStatus <> "RevocationAccepted" Тогда
		СтатусДокументооборота= СтатусыДокументовДиадок()[Direction][Status];
	КонецЕсли;
	
	Возврат Строка(СтатусДокументооборота);
	
КонецФункции

Функция СтатусАнулированияДокумента(RevocationStatus)
	
	Возврат Строка(СтатусыАнулированияДокументовДиадок()[RevocationStatus]);
	
КонецФункции

Функция РасшифровкаСтатусаСчета(МассивРезолюций) Экспорт
	Если МассивРезолюций.количество()= 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если МассивРезолюций[0].ResolutionType = "Approve" Тогда 
		Возврат "Документ согласован";
	ИначеЕсли МассивРезолюций[0].ResolutionType = "Disapprove" Тогда 
		Возврат "Отказано в согласовании";
	Иначе
		Возврат ""
	КонецЕсли;	
КонецФункции

Функция ПредставлениеТипаРезолюции(ResolutionType) Экспорт
	
	Если ResolutionType = "ResolutionApprove" Тогда
		Действие=	"Согласовано";
	ИначеЕсли ResolutionType = "ResolutionDisapprove" Тогда
		Действие=	"Отказано в согласовании";
	ИначеЕсли ResolutionType = "ResolutionRequest" Тогда
		Действие=	"Отправлен запрос на согласование";
	ИначеЕсли ResolutionType = "SignatureApprove" Тогда
		Действие=	"Подписан";
	ИначеЕсли ResolutionType = "SignatureDisapprove" Тогда
		Действие=	"Отказано в подписи";
	ИначеЕсли ResolutionType = "SignatureRequest" Тогда
		Действие=	"Отправлен запрос на подпись";
	ИначеЕсли ResolutionType = "RevocationRequest" Тогда
		Действие=	"Отправлен запрос на аннулирование";
	ИначеЕсли ResolutionType = "RevocationApprove" Тогда
		Действие=	"Аннулирован";
	ИначеЕсли ResolutionType = "RevocationDisapprove" Тогда
		Действие=	"Отказано в аннулировании";
	ИначеЕсли ResolutionType = "InvoiceCorrectionRequest" Тогда
		Действие=	"Запрошено уточнение";
	Иначе
		Действие=	"Тип согласования не определен";
	КонецЕсли;
	
	Возврат Действие;
	
КонецФункции

Функция ПредставлениеСтатуса(ЭДОбъект) Экспорт
	
	ПредставлениеСтатуса= СтатусДокументооборота(ЭДОбъект.Status, ЭДОбъект.RevocationStatus, ЭДОбъект.Direction);
	
	Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
		ДополнитьСтатусДокументооборотаЗалоченнымПакетом(ЭДОбъект, ПредставлениеСтатуса);
	КонецЕсли;
	
	СтатусАнулированияДокумента= СтатусАнулированияДокумента(ЭДОбъект.RevocationStatus);
	Если НЕ ПустаяСтрока(СтатусАнулированияДокумента) Тогда
		Разделитель= ?(ПустаяСтрока(ПредставлениеСтатуса), "", ". ");
		ПредставлениеСтатуса= ПредставлениеСтатуса + Разделитель + СтатусАнулированияДокумента;
	КонецЕсли;
	
	ДополнитьПредставлениеСтатусаСчетаФактуры(ЭДОбъект, ПредставлениеСтатуса);
	
	Возврат ПредставлениеСтатуса;
	
КонецФункции

Процедура ДополнитьСтатусДокументооборотаЗалоченнымПакетом(ЭДОбъект, СтатусДокументооборота)
	
	Если НЕ ЭДОбъект.IsLockedPackage Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусДокументооборота = "Требуется подпись" Тогда
		СтатусДокументооборота= СтатусДокументооборота + " пакета";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПредставлениеСтатусаСчетаФактуры(ЭДОбъект, ПредставлениеСтатуса)
	
	Если ЭтоЛюбойТипСчетаФактуры(ЭДОбъект.Type) Тогда
		
		Если ЭДОбъект.Corrected Тогда
			ПредставлениеСтатуса = ПредставлениеСтатуса + ". Откорректирован";
		ИначеЕсли ЭДОбъект.Revised Тогда
			ПредставлениеСтатуса = ПредставлениеСтатуса + ". Исправлен";
		ИначеЕсли ЭДОбъект.AmendmentRequested
			И ЭДОбъект.RevocationStatus = "RevocationStatusNone" Тогда //добавляем "Требует уточнения" только если документ не аннулирован и не на стадии аннулирования.
			ПредставлениеСтатуса = ПредставлениеСтатуса + ?(ЭДОбъект.Direction = "Outbound", ". Требуется уточнение", ". Ожидается уточнение");
		КонецЕсли;
		
	ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" ИЛИ ЭДОбъект.Type = "UniversalCorrectionDocument" Тогда 
		
		Если ЭДОбъект.AmendmentRequested
			И ЭДОбъект.RevocationStatus = "RevocationStatusNone" Тогда //добавляем "Требует уточнения" только если документ не аннулирован и не на стадии аннулирования.
			ПредставлениеСтатуса = ПредставлениеСтатуса + ?(ЭДОбъект.Direction = "Outbound", ". Требуется уточнение", ". Ожидается уточнение");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеСтатусаСогласования(Document) Экспорт
	
	СтатусСогласования=	"";
	ResolutionStatus=	Document.ResolutionStatus;
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить("InboundWaitingForRecipientSignature");
	МассивСтатусов.Добавить("InboundWaitingForResolution");
	МассивСтатусов.Добавить("OutboundWaitingForRecipientSignature");
	МассивСтатусов.Добавить("OutboundWaitingForSenderSignature");
	
	Если НЕ ResolutionStatus = Неопределено Тогда
		
		Если ResolutionStatus.Type = "Approved" Тогда
		    СтатусСогласования=	"Согласовано";
		ИначеЕсли ResolutionStatus.Type = "Disapproved" Тогда
		    СтатусСогласования=	"Отказано в согласовании";
		ИначеЕсли ResolutionStatus.Type = "ApprovementRequested" И МассивСтатусов.Найти(Document.status) <> Неопределено Тогда
			СтатусСогласования=	"На согласовании";
		ИначеЕсли ResolutionStatus.Type = "SignatureRequested" И МассивСтатусов.Найти(Document.status) <> Неопределено Тогда
			СтатусСогласования=	"На подписании";
		КонецЕсли;
		
		Если СтатусСогласования <> "" Тогда 
			СтатусСогласования=	СтатусСогласования 	+ ?(НЕ ResolutionStatus.TargetDepartment = Неопределено, ": " + ResolutionStatus.TargetDepartment.Name, "")
							+ ?(НЕ ResolutionStatus.TargetUser = Неопределено, ?(НЕ ResolutionStatus.TargetDepartment = Неопределено, "; " , ": ") + ФамилияСИнициалами(ResolutionStatus.TargetUser.Name), "");
		КонецЕсли;					
							
 	КонецЕсли;
	
	Возврат СтатусСогласования;
	
КонецФункции

Функция ПредставлениеСуммы(Document)
	
	Если Document.Type = "InvoiceCorrection"
		ИЛИ Document.Type = "InvoiceCorrectionRevision"
		Или Document.Type = "UniversalCorrectionDocument" Тогда
		
		стрУв = ?(Окр(Document.TotalInc, 2) <> 0, "+" + Формат(Окр(Document.TotalInc, 2), "ЧДЦ=2"), "");
		стрУм = ?(Окр(Document.TotalDec, 2) <> 0, "-" + Формат(Окр(Document.TotalDec, 2), "ЧДЦ=2"), "");
		Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
			Возврат стрУв + " " + СтрУм;
		ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
			Возврат стрУв;
		Иначе
			Возврат стрУм;
		КонецЕсли;
		
	ИначеЕсли ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЭтоНеформализованныйДокументБезМетаданных(Document) Тогда
		Возврат "";	
	Иначе
		
		Попытка
			Возврат Формат(Окр(Document.Total, 2), "ЧДЦ=2");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСуммыНДС(Document)
	
	Если Document.Type = "InvoiceCorrection"
		ИЛИ Document.Type = "InvoiceCorrectionRevision"
		Или Document.Type = "UniversalCorrectionDocument" Тогда
		
		стрУв = ?(Окр(Document.VatInc, 2) <> 0, "+" + Формат(Окр(Document.VatInc, 2), "ЧДЦ=2"), "");
		стрУм = ?(Окр(Document.VatDec, 2) <> 0, "-" + Формат(Окр(Document.VatDec, 2), "ЧДЦ=2"), "");
		Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
			Возврат стрУв + " " + СтрУм;
		ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
			Возврат стрУв;
		Иначе
			Возврат стрУм;
		КонецЕсли;
		
	Иначе
		
		Попытка
			Возврат Формат(Окр(Document.Vat, 2), "ЧДЦ=2");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеПродавца(ЭДОбъект, НаименованиеЯщика=Неопределено) Экспорт
	Если ЭДОбъект.Direction = "Outbound"  Тогда 
		Возврат ?(НаименованиеЯщика=Неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
	Иначе 
		Возврат ЭДОбъект.CounterAgent.name;
	КонецЕсли;
КонецФункции

Функция ПредставлениеПокупателя(ЭДОбъект, НаименованиеЯщика=Неопределено) Экспорт
	Если ЭДОбъект.Direction = "Outbound"  Тогда 
		Возврат ЭДОбъект.CounterAgent.name;
	Иначе 
		Возврат ?(НаименованиеЯщика=Неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
	КонецЕсли;
КонецФункции

Функция ПредставлениеСертификата(Certificate) Экспорт
	
	Возврат Certificate.Name + " (" + Certificate.OrganizationName + ") до " + Формат(Certificate.EndDate, "ДФ=dd.MM.yyyy");
	
КонецФункции

Функция ДанныеСертифкатаАвторизации(BoxID_или_Организация1С) Экспорт
	
	Значение1С= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_PersonalCertificate();
	
	ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьСтруктуруПоКонтенту(Organization(BoxID_или_Организация1С).Certificate, Значение1С);
	
	Возврат Значение1С;
	
КонецФункции

Функция ПолучитьDepartmentByKpp(Organization, DepartmentKpp)
	Для ц = 0 по Organization.Departments.count-1 Цикл
		dep = Organization.Departments.GetItem(ц);
		Если dep.Kpp = DepartmentKpp Тогда
			Возврат dep.Id;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

Функция ПолучитьМассивФилиалов()
	
	МассивФилиалов = Новый Массив;
	ДанныеСопоставленныхОрганизаций = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
	Для каждого данныеСопоставления Из данныеСопоставленныхОрганизаций Цикл
		Organization = ПолучитьЯщикДиадокДляОрганизации(данныеСопоставления.Объект);
		Если НЕ ПустаяСтрока(данныеСопоставления.КПППодразделения) Тогда
			МассивФилиалов.Добавить(РаботаССерверомДиадок_ПолучитьDepartment(Organization, ДанныеСопоставления.КПППодразделения).Id);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивФилиалов;
	
КонецФункции

Процедура ЗаполнитьСтрокуТаблицыДокумента(Document, СтрокаТаблицы, НаименованиеЯщика = Неопределено, ЗаполнятьПервичныйДокумент = Истина) Экспорт
	
	Если ТипЗнч(СтрокаТаблицы) = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТаблицы.ЭДОбъект = Document;
	КонецЕсли;
	
	СтрокаТаблицы.ТипДокумента 						= ПредставлениеТипаЭД(Document);
	СтрокаТаблицы.ЗначениеТипаДокумента				= ПолучитьЗначениеТипаДокумента(Document.Type);
	СтрокаТаблицы.BoxID                     		= Document.OrganizationID;
	СтрокаТаблицы.DocumentId                	  	= Document.DocumentId;
	СтрокаТаблицы.DocumentType						= Document.Type;
	СтрокаТаблицы.FileGUID							= Лев(Прав(Document.FileName, 40), 36);
	
	СтрокаТаблицы.Дата 								= ?(Document.DocumentDate < '20000101', '00010101', Document.DocumentDate);
	СтрокаТаблицы.Номер								= ПредсталениеНомераЭД(Document);
	СтрокаТаблицы.Продавец 							= ПредставлениеПродавца(Document, НаименованиеЯщика); 
	СтрокаТаблицы.Покупатель 						= ПредставлениеПокупателя(Document, НаименованиеЯщика); 
	СтрокаТаблицы.Сумма								= ПредставлениеСуммы(Document);
	СтрокаТаблицы.СостояниеДокументооборота 		= ПредставлениеСтатуса(Document);
	СтрокаТаблицы.ЗначениеСостояниеДокументооборота = СтатусДокументооборота(Document.Status, Document.RevocationStatus, Document.Direction);
	СтрокаТаблицы.СостояниеСогласования				= ПредставлениеСтатусаСогласования(Document);
	СтрокаТаблицы.Подразделение						= ?(Document.Department<>Неопределено, Document.Department.Name, "");

	Если Лев(Document.Type, 7) = "Invoice" ИЛИ (Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) <> ТипДокументаУПД("ДОП"))Тогда
		СтрокаТаблицы.СуммаНДС= ПредставлениеСуммыНДС(Document);
		СтрокаТаблицы.Валюта=   ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").КлассификаторВалютПолучитьНаименованиеПоКоду(Document.Currency);
		СтрокаТаблицы.ДатаУчета= Document.ConfirmationDate; 
	Иначе
		СтрокаТаблицы.ДатаУчета= Document.TimeStamp;
	КонецЕсли;
	
	Если ЗаполнятьПервичныйДокумент Тогда 
		СтрокаТаблицы.ПервичныйДокумент= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(Document.DocumentId, Document.OrganizationId, Document);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьВСписокФильтр(СписокФильтров, МассивТиповФильтруемыхДокументов, СтрокаФильтра)
	
	Для каждого ТипДокумента Из МассивТиповФильтруемыхДокументов Цикл
		
		СтруктураФильтра=	Новый Структура();
		СтруктураФильтра.Вставить("ТипДокумента", 	ТипДокумента);
		СтруктураФильтра.Вставить("Фильтр", 		СтрокаФильтра);
		
		СписокФильтров.Добавить(СтруктураФильтра);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивТиповДокументов(ФильтрПоТипамДокументов, ВидТипаДокумента) 
   //ВидТипаДокумента = 0  все виды 	
   //ВидТипаДокумента = 1  документооборот СФ
   //ВидТипаДокумента = 2  строго двусторонний документ
   //ВидТипаДокумента = 3  строго односторонний документ
   //ВидТипаДокумента = 4  односторонний или двусторонний документ
   
  
   
	
   результат = Новый массив;
   Если (ФильтрПоТипамДокументов=0) и (ВидТипаДокумента=0) Тогда
	   результат.Добавить("Any");
	   Возврат результат;
   КонецЕсли;	   
   Если  (ФильтрПотипамДокументов = 0) или (ФильтрПотипамДокументов = 1) Тогда // Накладная
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("NonformalizedTorg12");
			результат.Добавить("NonformalizedAcceptanceCertificate");
			результат.Добавить("XmlTorg12");
			результат.Добавить("XmlAcceptanceCertificate");
			результат.Добавить("UniversalTransferDocument");
			результат.Добавить("UniversalCorrectionDocument");
		КонецЕсли;	
   ИначеЕсли  ФильтрПотипамДокументов = 11 Тогда // торг12
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("NonformalizedTorg12");
			результат.Добавить("XmlTorg12");
			результат.Добавить("UniversalTransferDocument");
		КонецЕсли;	
   ИначеЕсли  ФильтрПотипамДокументов = 12 Тогда // акт
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("NonformalizedAcceptanceCertificate");
			результат.Добавить("XmlAcceptanceCertificate");
		КонецЕсли;	
   ИначеЕсли  ФильтрПотипамДокументов = 13 Тогда // УПД (ПД)
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("UniversalTransferDocument");
		КонецЕсли;
   ИначеЕсли  ФильтрПотипамДокументов = 14 Тогда // УКД (ДИС)
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("UniversalCorrectionDocument");
		КонецЕсли;	
   КонецЕсли;		
   Если (ФильтрПотипамДокументов = 0) или (ФильтрПотипамДокументов = 2) Тогда // СФ
	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
	       результат.Добавить("AnyInvoiceDocumentType");
		   результат.Добавить("UniversalTransferDocument");
		   результат.Добавить("UniversalCorrectionDocument");
	   КонецЕсли;
   ИначеЕсли ФильтрПотипамДокументов = 21 Тогда // СФ
	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
		   результат.Добавить("Invoice");
	   КонецЕсли;	   
   ИначеЕсли ФильтрПотипамДокументов = 22 Тогда // ИСФ
   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
		   результат.Добавить("InvoiceRevision");
	   КонецЕсли; 	   
   ИначеЕсли ФильтрПотипамДокументов = 23 Тогда // КСФ/ИКСФ
   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
		   результат.Добавить("InvoiceCorrection");
		   результат.Добавить("InvoiceCorrectionRevision");
	   КонецЕсли;   
   ИначеЕсли ФильтрПотипамДокументов = 24 Тогда // УПД (СФ)
   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
		   результат.Добавить("UniversalTransferDocument");
	   КонецЕсли; 
   ИначеЕсли ФильтрПотипамДокументов = 25 Тогда // УКД (КСЧФ)
   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
		   результат.Добавить("UniversalCorrectionDocument");
	   КонецЕсли;   
   КонецЕсли;	   
   Если  (ФильтрПотипамДокументов = 0) или (ФильтрПотипамДокументов = 3) Тогда // Счет на оплату
  	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 3 Тогда
			результат.Добавить("NonformalizedProforma");
		КонецЕсли;	
   КонецЕсли;	
   Если   (ФильтрПотипамДокументов = 0) или (ФильтрПотипамДокументов = 4) Тогда // Неформализованные документы
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда //строго двусторонний док
			результат.Добавить("ReconciliationAct"); //акт сверки
			результат.Добавить("Contract");  //договор
			результат.Добавить("TrustConnectionRequest"); //приглашение к ЭДО
			результат.Добавить("PriceList");    //ценовой лист
		КонецЕсли;	
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 3 Тогда //строго односторонний док
			результат.Добавить("ServiceDetails"); //детализация
		КонецЕсли;	
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 4 Тогда //как односторонний так и двусторонний док
			результат.Добавить("PriceListAgreement"); //протокол согласования цены
			результат.Добавить("CertificateRegistry"); //реестр сертификатов
			результат.Добавить("Nonformalized");  //прочее
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 41 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("ReconciliationAct"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 42 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 3 Тогда
			результат.Добавить("ServiceDetails"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 43 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("Contract"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 44 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 4 Тогда
			результат.Добавить("PriceListAgreement"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 45 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("TrustConnectionRequest"); 	
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 46 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 4 Тогда
			результат.Добавить("CertificateRegistry"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 47 Тогда
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
			результат.Добавить("PriceList"); 
		КонецЕсли;	
	ИначеЕсли  ФильтрПотипамДокументов = 48 Тогда 
		Если ВидТипаДокумента = 0 или ВидТипаДокумента = 4 Тогда
			результат.Добавить("Nonformalized"); 
		КонецЕсли;	
	ИначеЕсли ФильтрПотипамДокументов = 5 Тогда
		Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
			результат.Добавить("UniversalTransferDocument");
		КонецЕсли;
	ИначеЕсли ФильтрПотипамДокументов = 6 Тогда
		Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
			результат.Добавить("UniversalCorrectionDocument");
		КонецЕсли;
	КонецЕсли;	
	Возврат результат;
		
КонецФункции	
		 
Функция ПолучитьСписокФильтровДляДокументовДиадок(Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов) 
	
	СписокФильтров = Новый Массив;
	фильтрDirection =?( направление = "НаПодписании", "Outbound", направление);
	
	СписокОтборов = Новый массив;
	Если ФильтрПоСостояниюДокументооборота = 0 Тогда 
      	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection);
	ИначеЕсли ФильтрПоСостояниюДокументооборота = 1 Тогда //документооборот завершен
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"Finished"); //сф
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 3), фильтрDirection+""); //строго односторонние
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WithRecipientSignature"); //строго двусторонние
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WithRecipientSignature"); //односторонние или двусторонние
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"NoRecipientSignatureRequest"); //односторонние или двусторонние
		
	ИначеЕсли ФильтрПоСостояниюДокументооборота = 2 Тогда //документооборот не завершен
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"NotFinished"); //сф
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WaitingForRecipientSignature"); //строго двусторонние
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WaitingForRecipientSignature"); //односторонние или двусторонние
		
	ИначеЕсли ФильтрПоСостояниюДокументооборота = 3 Тогда //документооборот прекращен
     	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");
		Если фильтрDirection = "Outbound" Тогда
			 ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"InvalidSenderSignature");
  		КонецЕсли;
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"RecipientSignatureRequestRejected"); //строго двусторонние
 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"RecipientSignatureRequestRejected"); //односторонние или двусторонние
	ИначеЕсли ФильтрПоСостояниюДокументооборота = 4 Тогда //Требуется уточнение
     	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"InvoiceAmendmentRequested"); //сф
  	ИначеЕсли ФильтрПоСостояниюДокументооборота = 21 Тогда 
    	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationIsRequestedByMe");  //ожидается Аннулирование
	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 22 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RequestsMyRevocation");  //запрошено Аннулирование
	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 23 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");  //Документ аннулирован
	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 24 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationRejected");  //отказано в аннулировании
	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 11 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"WaitingForResolution");  //передано на согласование
	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 12 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Approved");  //согласовано		
   	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 13 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Disapproved");  //отказано в согласованияя		
    ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 14 Тогда 
		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"SignatureRequestRejected");  //отказано в подписании		
	КонецЕсли;	
		
	
	Возврат СписокФильтров;
//КонецЕсли;	
КонецФункции

Функция НоваяТаблицаДокументовДиадок() 
	
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
	ОписаниеТиповЧисло10 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
    	
	результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипДокумента");
	Результат.Колонки.Добавить("Продавец");
	Результат.Колонки.Добавить("Покупатель");
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("ДатаУчета");
	Результат.Колонки.Добавить("Номер");
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("СуммаНДС");
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("СостояниеДокументооборота");
	Результат.Колонки.Добавить("СостояниеСогласования");
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("ПервичныйДокумент");
	Результат.Колонки.Добавить("BoxID"				, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("CounterAgentBoxID"	, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("DocumentId"			, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("ЭДОбъект");
	результат.Колонки.Добавить("DocumentType"		, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("FileGUID"			, ОписаниеТиповСтрока150);
	Результат.Колонки.Добавить("Подразделение");
	Результат.Колонки.Добавить("ЗначениеТипаДокумента");
	Результат.Колонки.Добавить("ЗначениеСостояниеДокументооборота");
	Результат.Колонки.Добавить("Зашифрован", ОписаниеТиповБулево);

	Результат.Колонки.Добавить("MessageId");
	Результат.Колонки.Добавить("ПозицияСортировки");
	Результат.Колонки.Добавить("ИндексИконкиПакета", ОписаниеТиповЧисло10);
		
    Возврат Результат;
	
КонецФункции

Функция ВернутьМассивDepartmentId(стрЯщик, Box, DepertmentID, ВключатьПодчиненныеПодазделения)
	
	DepertmentID_текущее = DepertmentID;
	Если ПустаяСтрока(DepertmentID) Тогда
		Если НЕ ПустаяСтрока(стрЯщик.КПППодразделения) Тогда
			DepertmentID_текущее = ПолучитьDepartmentByKpp(Box, стрЯщик.КПППодразделения);   
		КонецЕсли;
	КонецЕсли;

	массивDepartmentId = Новый Массив;
	Если DepertmentID_текущее = "" Тогда
		ФилиаловDepartmentId = ПолучитьМассивФилиалов();
		ЕстьПодразделенеКоторыеНужноОбходить = Ложь;
		массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", Ложь));
		Если ВключатьПодчиненныеПодазделения Тогда
			Для ц = 0 по  Box.Departments.count-1 Цикл
				Dep = Box.Departments.GetItem(ц);
				Если ФилиаловDepartmentId.Найти(dep.Id) = Неопределено Тогда
					массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", dep.Id, Истина));
				Иначе
					ЕстьПодразделенеКоторыеНужноОбходить = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЕстьПодразделенеКоторыеНужноОбходить = Ложь Тогда
			массивDepartmentId.Очистить();
		КонецЕсли;
	Иначе
		массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", DepertmentID_текущее, ВключатьПодчиненныеПодазделения));
	КонецЕсли;
	
	Если массивDepartmentId.Количество()=0 Тогда 
		массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", ВключатьПодчиненныеПодазделения));
	КонецЕсли;	
	
	Возврат  массивDepartmentId;
	
КонецФункции	

Функция ПолучитьМассивДокументов(Направление, ДатаНачала, ДатаОкончания, СписокФильтров, СписокЯщиков, counterAgentId , DepertmentID, ВключатьПодчиненныеПодазделения)
	
	результат = Новый массив;
	массивЗадач = Новый массив;
	
	Для каждого стрЯщик из СписокЯщиков цикл 
		Box =   ПолучитьЯщикДиадокДляОрганизации(стрЯщик.Объект);
		НаименованиеЯщика = Box.name;
    	массивDepartmentId = ВернутьМассивDepartmentId(стрЯщик, Box, DepertmentID, ВключатьПодчиненныеПодазделения);
		
		// Используется для исключения дублирования запросов по УПД пока нет фильтров по Function
		ПримененныеФильтры= Новый Соответствие;

		Для Каждого ФильтрАпи Из СписокФильтров Цикл
			
			Category= ФильтрАпи.ТипДокумента+"."+ФильтрАпи.Фильтр;
			
			Если ПримененныеФильтры[Category] = Истина Тогда
				Продолжить;
			Иначе
				ПримененныеФильтры.Вставить(Category, Истина);
			КонецЕсли;
			
			Для Каждого depId Из массивDepartmentId Цикл
				getDocumentsTask =  Box.getDocumentsTask();
				Если направление <> "НаПодписании" Тогда 
					getDocumentsTask.FromSendDate 		 	=  ДатаНачала;
					getDocumentsTask.ToSendDate 	 	=   КонецДня(Датаокончания);
				Иначе 	
					getDocumentsTask.FromSendDate 		 	=  Дата("20500101");
				КонецЕсли;
				getDocumentsTask.Category			 	=  Category;
				getDocumentsTask.counterAgentId		 	=  counterAgentId;
				getDocumentsTask.DepartmentId		 	=  depId.DepartmentId;
				getDocumentsTask.ExcludeSubdepartments	=  не depId.вклДочерниеПодразделения;
				массивЗадач.Добавить(Новый Структура("НаименованиеЯщика, Организация, Task",  Box.name, стрЯщик.Объект,  getDocumentsTask.GetDocumentsAsync()));
			КонецЦикла;
		КонецЦикла;
	Конеццикла;  
	
	пока массивЗадач.Количество()>0 цикл 
		ц = 0;
		пока ц < массивЗадач.Количество() цикл 
			Если массивЗадач[ц].task.IsCompleted Тогда
				Задача =   массивЗадач[ц];
				Docs = Задача.Task.Result;
				Для цц = 0 по Docs.count-1 цикл 
					Document = Docs.GetItem(цц);
					результат.Добавить(Новый Структура("Док, наименованиеЯщика, Организация",Document , Задача.НаименованиеЯщика,Задача.Организация ));
				конецЦикла;	
				массивЗадач.Удалить(ц);
			Иначе 
				ц = ц+1;
			КонецЕсли;
		КонецЦикла
	конецЦикла;	
	
	Возврат результат;
КонецФункции

Функция ВернутьВыборкуРНКИСчетовФактурДиадок(ДатаНачала, ДатаОкончания, Организация = Неопределено, КонтрагентID = "", Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов, DepertmentID, ВключатьПодчиненныеПодазделения) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = Дата("20500101");
	КонецЕсли;
	
	СписокФильтров = ПолучитьСписокФильтровДляДокументовДиадок(Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов);
	
	ТаблицаДокументовДиадок= НоваяТаблицаДокументовДиадок(); 
	
	СписокЯщиков = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации(Организация);
		
	ЛокальныйКэш_ДоступностьКонтрагентов= Новый Соответствие;
	
	МассивДокументов = ПолучитьМассивДокументов(Направление, ДатаНачала, ДатаОкончания, СписокФильтров, СписокЯщиков, КонтрагентID , DepertmentID, ВключатьПодчиненныеПодазделения);
	Для каждого Элемент Из массивДокументов Цикл
		
		// Сурогатные фильтры УПД, пока в API нет фильтров по Function.
		Если ФильтрПотипамДокументов <> 0 И Элемент.Док.Type = "UniversalTransferDocument" Тогда
			
			ТипДокумента = ТипДокументаУПД(Элемент.Док.Function);
			
			Если 	ТипДокумента = ТипДокументаУПД("СЧФДОП")
					И ФильтрПотипамДокументов <> 5
				ИЛИ ТипДокумента = ТипДокументаУПД("СЧФ")
					И ФильтрПотипамДокументов <> 2
					И ФильтрПотипамДокументов <> 24
				ИЛИ ТипДокумента = ТипДокументаУПД("ДОП")
					И ФильтрПотипамДокументов <> 1
					И ФильтрПотипамДокументов <> 13
			Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Сурогатные фильтры УКД, пока в API нет фильтров по Function.
		Если ФильтрПотипамДокументов <> 0 И Элемент.Док.Type = "UniversalCorrectionDocument" Тогда
			
			ТипДокумента = ТипДокументаУКД(Элемент.Док.Function);
			
			Если 	ТипДокумента = ТипДокументаУКД("КСЧФДИС")
					И ФильтрПотипамДокументов <> 6
				ИЛИ ТипДокумента = ТипДокументаУКД("КСЧФ")
					И ФильтрПотипамДокументов <> 2
					И ФильтрПотипамДокументов <> 25
				ИЛИ ТипДокумента = ТипДокументаУКД("ДИС")
					И ФильтрПотипамДокументов <> 1
					И ФильтрПотипамДокументов <> 14
			Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		CounteragentID= Элемент.Док.Counteragent.Id;
		Контрагент1СДоступен= ЛокальныйКэш_ДоступностьКонтрагентов[CounteragentID];
		Если Контрагент1СДоступен= Неопределено Тогда
			
			Контрагент1СДоступен= Истина;
			
			Контрагент1С= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(CounteragentID);
			Если ЗначениеЗаполнено(Контрагент1С) Тогда
				Попытка
					Контрагент1СКод= Контрагент1С.Код;
				Исключение 
					Контрагент1СДоступен= Ложь;
				КонецПопытки;
			КонецЕсли;
			Контрагент1С= Неопределено;
			
			ЛокальныйКэш_ДоступностьКонтрагентов.Вставить(CounteragentID, Контрагент1СДоступен);
			
		КонецЕсли;
		
		Если Контрагент1СДоступен Тогда
			НоваяСтрока= ТаблицаДокументовДиадок.Добавить();
			НоваяСтрока.Организация= Элемент.Организация;
			ЗаполнитьСтрокуТаблицыДокумента(Элемент.док, НоваяСтрока, Элемент.НаименованиеЯщика, Ложь);
		КонецЕсли;
			
	КонецЦикла;
	МассивДокументов= Неопределено;
	
	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ЗаполнитьТаблицуДокументовДиадокДокументами1С(ТаблицаДокументовДиадок);
	
	Если Направление = "Outbound" Тогда
		УсловноОтправленныеДокументы = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьДанныеУсловноОтправленныхДокументов(ТаблицаДокументовДиадок);
	КонецЕсли;
	
	ТаблицаДокументовДиадок.Колонки.Добавить("ДатаСортировки");
		
	Для каждого стр из ТаблицаДокументовДиадок цикл 
		Если НЕ ЗначениеЗаполнено(Стр.ПервичныйДокумент) Тогда
			// Проверяем, является ли докумет условно отправленным
			Если Направление = "Outbound" И ЗначениеЗаполнено(УсловноОтправленныеДокументы) Тогда
				условноОтправленныеДокументыДляТекущегоДокумента =  УсловноОтправленныеДокументы.найтиСтроки(Новый Структура("DocumentId, OrganizationId", стр.DocumentId, стр.BoxID) ) ;
				Если условноОтправленныеДокументыДляТекущегоДокумента.Количество() = 1 Тогда
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(условноОтправленныеДокументы[0].ДокументСсылка, условноОтправленныеДокументыДляТекущегоДокумента[0].DocumentId, условноОтправленныеДокументыДляТекущегоДокумента[0].OrganizationId); 
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_ПризнакУсловноОтправленный_Для_Документ(условноОтправленныеДокументыДляТекущегоДокумента[0].ДокументСсылка, "", "", "", "", "");
					ЗаписьЖурналаРегистрации("Диадок.РаботаСоСписком.УсловноОтправленный.СтатусОпределен.Отправлен", УровеньЖурналаРегистрации.Информация, условноОтправленныеДокументы[0].ДокументСсылка.Метаданные(), условноОтправленныеДокументы[0].ДокументСсылка, "{Document: " + условноОтправленныеДокументыДляТекущегоДокумента[0].DocumentId + "/" + условноОтправленныеДокументыДляТекущегоДокумента[0].OrganizationId + "}");
					стр.ПервичныйДокумент = условноОтправленныеДокументыДляТекущегоДокумента[0].ДокументСсылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Стр.ДатаСортировки = ?(ЗначениеЗаполнено(Стр.ДатаУчета), НачалоДня(Стр.ДатаУчета), '20010101');
		
		Стр.MessageId = Сред(СокрЛП(Стр.DocumentId), 1, 36);
		
		Если Стр.DocumentType = "NonformalizedProforma" Тогда
			Стр.ПозицияСортировки = "1";
		ИначеЕсли Стр.DocumentType = "XmlTorg12" ИЛИ Стр.DocumentType = "XmlAcceptanceCertificate" ИЛИ (Стр.DocumentType = "UniversalTransferDocument" И ФункцияУПД(Стр.ТипДокумента) = "ДОП") Тогда
			Стр.ПозицияСортировки = "2";
		ИначеЕсли Стр.DocumentType = "Invoice" ИЛИ (Стр.DocumentType = "UniversalTransferDocument" И ФункцияУПД(Стр.ТипДокумента) = "СЧФДОП") ИЛИ (Стр.DocumentType = "UniversalTransferDocument" И ФункцияУПД(Стр.ТипДокумента) = "СЧФ") Тогда
			Стр.ПозицияСортировки = "4";
		Иначе
			Стр.ПозицияСортировки = "3";
		КонецЕсли;
				
	КонецЦикла;	
	
	ТаблицаДокументовДиадок.Сортировать("ДатаСортировки Убыв, MessageId, ПозицияСортировки");
	
	Для каждого Стр из ТаблицаДокументовДиадок Цикл
		
		ТекущийMessageId = Стр.MessageId;
		
		МассивСтрок = ТаблицаДокументовДиадок.НайтиСтроки(Новый Структура("MessageId", ТекущийMessageId));
		Если МассивСтрок.Количество()>1 Тогда
			Для Ц=0 по МассивСтрок.ВГраница() Цикл
				
				СтрокаМассива = МассивСтрок[Ц];
				
				Если ЗначениеЗаполнено(СтрокаМассива.ИндексИконкиПакета) = Ложь Тогда
					Если Ц=0 Тогда
						СтрокаМассива.ИндексИконкиПакета = 1;
					ИначеЕсли Ц=МассивСтрок.ВГраница() Тогда
						СтрокаМассива.ИндексИконкиПакета = 3;
					Иначе
						СтрокаМассива.ИндексИконкиПакета = 2;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
		
	СвернутьТаблицуДокументовДиадок(ТаблицаДокументовДиадок);
	
	Возврат ТаблицаДокументовДиадок;
	
КонецФункции	

Процедура СвернутьТаблицуДокументовДиадок(ТаблицаДокументовДиадок)
	
	// УПД - документ с квантовой запутанностью, может существовать сразу в двух статусах (InboundFinished и InboundWithRecipientSignature)
	// Поэтому в ТаблицаДокументовДиадок он может попадать дважды (DDSUPPORT-10335).
	// Вот здесь и будем искать дубли.
	// Алгоритм будет общий для ОФ и УФ, поэтому предполагаем, что в ТаблицаДокументовДиадок может быть как ТаблицаЗначений, так и Массив из Структур (&НаКлиенте).
	
	СоответствиеУПД = Новый Соответствие;
	
	ОбратныйИндекс = ТаблицаДокументовДиадок.Количество()-1;
	
	Пока ОбратныйИндекс > -1 Цикл
		
		Строка= ТаблицаДокументовДиадок[ОбратныйИндекс];
		
		Если Строка.DocumentType = "UniversalTransferDocument" Тогда
			
			DocumentIdBoxId = Строка.DocumentId + Строка.BoxId;
			
			// Если документ уже есть в СоответствиеУПД значит текущий можно удалить.
			Если СоответствиеУПД[DocumentIdBoxId] = Истина Тогда
				ТаблицаДокументовДиадок.Удалить(ОбратныйИндекс);
			Иначе
				СоответствиеУПД.Вставить(DocumentIdBoxId, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьЭДОбъектНаСогласование(Организация, ЭДОбъект, ResolutionRequestType, Режим) Экспорт
	
	ПараметрыОтправкиНаСогласование=	ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(Организация, ЭДОбъект.Organization, ResolutionRequestType, Режим);
	
	Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтправитьНаОбработку(ПараметрыОтправкиНаСогласование, ЭДОбъект);
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьНаОбработку(ПараметрыОтправкиНаСогласование, ЭДОбъект) Экспорт
	
	Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
		
		Если ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetUserId) И ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
			ТекстОшибкиПодписания=	"Не указан получатель документа.";
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
		Иначе
			
			Попытка
				
				ЗаданиеНаСогласование=							ЭДОбъект.CreateResolutionRequestTask();
				ЗаданиеНаСогласование.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
				Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetUserId) Тогда
					ЗаданиеНаСогласование.TargetUserId=			ПараметрыОтправкиНаСогласование.TargetUserId;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
					ЗаданиеНаСогласование.TargetDepartmentId=	ПараметрыОтправкиНаСогласование.TargetDepartmentId;
				КонецЕсли;
				ЗаданиеНаСогласование.Comment=					ПараметрыОтправкиНаСогласование.Комментарий;
				ЗаданиеНаСогласование.Send();
				
			Исключение
				
				ТекстОшибкиПодписания = ОписаниеОшибки();
				Если Найти(ТекстОшибкиПодписания, "Resolution request author user id and target user id must differ")>0 Тогда
					Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
					"Ошибка отправки", 					
					"Нельзя отправить документ на согласование или подписание самому себе",
					ТекстОшибкиПодписания);
				ИначеЕсли Найти(ТекстОшибкиПодписания, "User can not add signature request to document")>0
					ИЛИ Найти(ТекстОшибкиПодписания, "User can not add approvement request to document")>0 Тогда
					Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
					"Ошибка отправки", 					
					"Документ уже отправлен на подписание или согласование",
					ТекстОшибкиПодписания);
				Иначе
					Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
					"Ошибка отправки", 					
					"Ошибка отправки на подписание или согласование",
					ТекстОшибкиПодписания);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПакетНаОбработку(ПараметрыОтправкиНаСогласование, Package)
	
	Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
		
		Если ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetUserId) И ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
			ТекстОшибкиПодписания =	"Не указан получатель документа.";
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
		Иначеесли 	ПараметрыОтправкиНаСогласование.ЭтоТекущийПользователь=истина Тогда 
			//ничего не делаем
			//передать на согласование/подписание текущему пользователю нельзя,
			//в этой ситуации документ просто попадет в исходящие неотправленные 
		Иначе
			
			Попытка
				
				ЗаданиеНаСогласование =	Package.CreateResolutionRequestTask();
				ЗаданиеНаСогласование.ResolutionRequestType = ПараметрыОтправкиНаСогласование.ResolutionRequestType;
				Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetUserId) Тогда
					ЗаданиеНаСогласование.TargetUserId = ПараметрыОтправкиНаСогласование.TargetUserId;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
					ЗаданиеНаСогласование.TargetDepartmentId = ПараметрыОтправкиНаСогласование.TargetDepartmentId;
				КонецЕсли;
				ЗаданиеНаСогласование.Comment = ПараметрыОтправкиНаСогласование.Комментарий;
				ЗаданиеНаСогласование.Send();
				
			Исключение
				
				ТекстОшибкиПодписания 	= ОписаниеОшибки();
				ФормаВыводаОшибки 		= Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки");
				
				Если Найти(ТекстОшибкиПодписания, "Resolution request author user id and target user id must differ")>0 Тогда
					
					ФормаВыводаОшибки.ПоказатьОшибку( "Ошибка отправки", "Нельзя отправить документ на согласование или подписание самому себе", ТекстОшибкиПодписания);
					
				ИначеЕсли Найти(ТекстОшибкиПодписания, "User can not add signature request to document")>0
					  ИЛИ Найти(ТекстОшибкиПодписания, "User can not add approvement request to document")>0 Тогда
										
					ФормаВыводаОшибки.ПоказатьОшибку("Ошибка отправки", "Документ уже отправлен на подписание или согласование", ТекстОшибкиПодписания);
				Иначе
					ФормаВыводаОшибки.ПоказатьОшибку("Ошибка отправки", "Ошибка отправки на подписание или согласование", ТекстОшибкиПодписания);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДанныеПодписанта(Организация, IsSeller, forCorrection) Экспорт
	
	ExtendedSignerDetails_1С= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").Новый_ExtendedSignerDetails();
	
	Organization= ПолучитьЯщикДиадокДляОрганизации(Организация);
	
	Попытка
		ExtendedSignerDetails_COM= Organization.GetExtendedSignerDetails(Organization.Certificate.thumbprint, IsSeller, forCorrection);
	Исключение
		
		ОписаниеОшибки= ОписаниеОшибки();
		
		Если Найти(ОписаниеОшибки, "Signer details not found") = 0 Тогда
			ВызватьИсключение ОписаниеОшибки;
		Иначе
			Возврат ExtendedSignerDetails_1С;
		КонецЕсли;
	
	КонецПопытки;
	
	ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьСтруктуруПоКонтенту(ExtendedSignerDetails_COM, ExtendedSignerDetails_1С, "ExtendedSignerDetailsToPost");
	
	Возврат ExtendedSignerDetails_1С;
	
КонецФункции

Процедура ЗаписатьДанныеПодписанта(Организация, ExtendedSignerDetailsToPost_1С, IsSeller, forCorrection) Экспорт
	
	Organization= ПолучитьЯщикДиадокДляОрганизации(Организация);
	
	SetExtendedSignerDetailsTask= Organization.CreateSetExtendedSignerDetailsTask(Organization.Certificate.thumbprint);
	
	ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ЗаполнитьContentПоСтруктуре(SetExtendedSignerDetailsTask.ExtendedSignerDetailsToPost, ExtendedSignerDetailsToPost_1С, "ExtendedSignerDetailsToPost");
	
	SetExtendedSignerDetailsTask.IsSeller= IsSeller;
	SetExtendedSignerDetailsTask.forCorrection 	= forCorrection;
	
	SetExtendedSignerDetailsTask.Send();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
//// работа с отдельным документом
////////////////////////////////////////////////////////////////////

Функция ПолучитьДокументДиадок(DocumentId, BoxId) Экспорт     
	
	Попытка
		
		Возврат Organization(BoxId).GetDocumentById(DocumentId);
		
	Исключение
		
		ТекстОшибки= ОписаниеОшибки();
		
		Если Найти(ТекстОшибки, "are not accessible by user") > 0 Тогда
			Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
			"Ошибка получения документа",
			"У вас нет доступа к документу данного подразделения",
			ТекстОшибки);
		Иначе
			Получитьформу("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку(
			"Ошибка получения документа",
			"Не удалось получить документ",
			ТекстОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновитьЭДоОбъектДиадока(ЭДОбъект, ФормаИнициатор) Экспорт
	
	ЭДОбъект= ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
	
	Оповестить("ОбновитьСтроку", ЭДОбъект, ФормаИнициатор);
	
	Возврат ЭДОбъект;
	
КонецФункции

Функция ПолучитьОбъектДиадок(Id, Box, СоответствиеДокументов) Экспорт
	
	Рез = СоответствиеДокументов[Id];
	Если Рез = Неопределено Тогда
		Попытка
			Рез = Box.GetDocumentById(Id);
		Исключение
			текстОшибки = ОписаниеОшибки();
			Если Найти(текстОшибки, "code:403") > 0
				ИЛИ Найти(текстОшибки, "code:404") > 0 Тогда
				Возврат Неопределено;
			Иначе
				ВызватьИсключение текстОшибки;
			КонецЕсли;
		КонецПопытки;
		
		СоответствиеДокументов[Id] = Рез;
		Возврат Рез;
	Иначе
		Возврат Рез;
	КонецЕсли;
КонецФункции

Функция ПолучитьСтруктуруПредставленияЭД(док) Экспорт
	Box = Док.Organization;
	стЭД = Новый Структура;
	
	стЭД.Вставить("ЭДОбъект", док);
	стЭД.Вставить("ТипДокумента", ПредставлениеТипаЭД(док));
	стЭД.Вставить("BoxID", док.OrganizationID);
	стЭД.Вставить("DocumentId", док.DocumentId);
	стЭД.Вставить("Организация", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxIDDepartment_2_Организация(док.OrganizationID, док.Department));
	стЭД.Вставить("Контрагент", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(док.CounterAgent.Id, док.OrganizationID));
	стЭД.Вставить("Дата",?(док.DocumentDate<'20000101', '00010101000000', док.DocumentDate));
	стЭД.Вставить("Номер", док.DocumentNumber);
	Если док.Direction = "Outbound"  Тогда 
		стЭД.Вставить("Покупатель", док.CounterAgent.name);
		стЭД.Вставить("Продавец", Box.name);
	Иначе 
		стЭД.Вставить("Продавец", док.CounterAgent.name);
		стЭД.Вставить("Покупатель", Box.name);
	КонецЕсли;	
	стЭД.Вставить("Сумма", ПредставлениеСуммы(док));
	стЭД.Вставить("ПервичныйДокумент", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(док.DocumentId, док.OrganizationID, док));
	
	Если док.Type = "Invoice" Тогда
		стЭД.Вставить("ДатаУчета", док.ConfirmationDate);
	Иначе
		стЭД.Вставить("ДатаУчета", док.Timestamp);
	КонецЕсли;
	
	Возврат стЭД;
КонецФункции

Функция СформироватьHTMLПредставлениеОшибок(Document, Организация, МассивОшибок) Экспорт
	
	HTMLДокумент=	"";
	
	HTMLДокумент= 	"<style>
					|
					|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
					|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
					|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt;}
					|
					|.left_block {
					|display: block;
					|float: left; 
					|}
					|
					|.right_block {
					|display: block;
					|float: right;
					|}
					|
					|.bottom_brd {
					|border-bottom-width: 1px;
					|border-bottom-style: solid;
					|border-bottom-color: black;
					|}
					|
					|.block_comment {
					|width: 98%;
					|float: right;
					|}
                    |
					|</style>";
							
					
	HTMLДокумент=	HTMLДокумент + "<body>" +
					"<div>" +
							"<div>" +
							
								"<div>" + 
								
									"<div>" +
										"<div class=""bottom_brd"">" +
											"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
											"<h4 style=""margin-bottom: -15px;"">" + ?(Document.Direction = "Inbound", "Получатель: ", "Отправитель: ") + Document.Organization.Name + "</h4>" +
											"<h4>" + ?(Document.Direction = "Inbound", "Отправитель: ", "Получатель: ") + Document.Counteragent.Name + "</h4>" +
										"</div>" +
									"</div>";

	НомерОшибки=				0;
	ПредыдущаяКатегорияОшибки=	"";
	
	Для каждого Ошибка Из МассивОшибок Цикл
 
		Если НЕ ПредыдущаяКатегорияОшибки = Ошибка.КатегорияОшибки Тогда
			
			НомерОшибки=				0;
			ПредыдущаяКатегорияОшибки=	Ошибка.КатегорияОшибки;
			
			HTMLДокумент=	HTMLДокумент +
				"<div>" +
				
					"<div>" +
					
						"<div style= ""color = red"">" +
							"<p2 align=""left"">" + Ошибка.КатегорияОшибки + "</p2>" + 
						"</div>"
						
					"</div>" +
					
				"</div>";
				
		КонецЕсли;
			
		НомерОшибки=	НомерОшибки + 1;
				
		HTMLДокумент=	HTMLДокумент +
			"<div>" + 
				"<div class=""block_comment"" style= ""white-space: normal; word-wrap: break-word"">" +
					"<p>" + НомерОшибки + ". " + Ошибка.ТекстОшибки + "</p>" +
				"</div>" + 
			"</div>";

	КонецЦикла;
	
	HTMLДокумент=	HTMLДокумент + "</div></div></div></<body>";

	Возврат HTMLДокумент;
	
КонецФункции

Функция СформироватьHTMLПредставлениеРезолюций(Document, Организация) Экспорт
	
	//Верстальщик бы меня на рее повесил...
	
	HTMLДокумент=	"";
	
	HTMLДокумент= 	"<style>	
					|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
					|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
					|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt; color = #828282; 
					|}
					|
					|.background.block_creationdate {
					|height: auto !important;
					|padding-bottom: 0;
					|right: 0;
					|width: 50%;
					|}
					|
					|.block_creationdate {
					|width: 30%;
					|padding-bottom: 0px;
					|text-align: right; 
					|}
					|
					|.block_resolutiontype {
					|width: 70%;
					|display: block;
					|float: left;
					|}
					|
					|.block_author {
					|width: 98%;
					|display: block;
					|float: left;
					|}
					|
					|.left_block {
					|display: block;
					|float: left; 
					|}
					|
					|.right_block {
					|display: block;
					|float: right;
					|}
					|
					|.bottom_brd {
					|border-bottom-width: 1px;
					|border-bottom-style: solid;
					|border-bottom-color: black;
					|}
					|
					|.block_comment {
					|width: 96%;
					|float: right; 
					|}
					|
					|</style>";
							
					
	HTMLДокумент=	HTMLДокумент + "<body>" +
					"<div>" +
							"<div>" +
							
								"<div>" + 
								
									"<div>" +
										"<div class=""bottom_brd"">" +
											"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
											"<h4 style=""margin-bottom: -15px;"">" + ?(Document.Type = "Inbound", "Отправитель: ", "Получатель: ") + Document.Organization.Name + "</h4>" +
											"<h4>" + ?(Document.Type = "Inbound", "Получатель: ", "Отправитель: ") + Document.Counteragent.Name + "</h4>" +
										"</div>" +
									"</div>";

	Resolutions=	Document.Resolutions;
	
	Для ц = 0 по Resolutions.Count-1 Цикл
		Резолюция =  Resolutions.GetItem(ц);
		Color=	"#0000FF";
		Если Резолюция.ResolutionType = "ResolutionApprove"
			ИЛИ Резолюция.ResolutionType = "SignatureApprove" Тогда
			Color=	"#00D403";
		ИначеЕсли  Резолюция.ResolutionType = "ResolutionDisapprove"
			ИЛИ Резолюция.ResolutionType = "SignatureDisapprove" Тогда
			Color=	"#FF0000";
		КонецЕсли;
		
		ResolutionType=	ПредставлениеТипаРезолюции(Резолюция.ResolutionType);
		
		Если Резолюция.ResolutionType = "ResolutionApprove" Тогда
			Пояснение=		"Согласовал: " + Резолюция.Author;
		ИначеЕсли Резолюция.ResolutionType = "ResolutionDisapprove" Тогда
			Пояснение=		"Отклонил: " + Резолюция.Author;
		ИначеЕсли Резолюция.ResolutionType = "SignatureApprove" Тогда
			Пояснение=		"Подписал: " + Резолюция.Author;
		ИначеЕсли Резолюция.ResolutionType = "SignatureDisapprove" Тогда
			Пояснение=		"Отказал: " + Резолюция.Author;
		ИначеЕсли Резолюция.ResolutionType = "ResolutionRequest" ИЛИ 
			Резолюция.ResolutionType = "SignatureRequest" Тогда
			ПолучательРезолюции=	?(Резолюция.TargetDepartment = Неопределено, "", " " + Резолюция.TargetDepartment.Name) + 
									?(Резолюция.TargetUser = Неопределено, "", ?(Резолюция.TargetDepartment = Неопределено, " ",", ") + ФамилияСИнициалами(Резолюция.TargetUser.Name));
			
			Пояснение=				"" + ФамилияСИнициалами(Резолюция.Author) + ?(НЕ ПустаяСтрока(ПолучательРезолюции), " &rarr; " + ПолучательРезолюции, "");
		Иначе
			Пояснение=		"";
		КонецЕсли;

		HTMLДокумент=	HTMLДокумент +
		        "<div class=""block_left"">" +
				
					"<div>" +
					
						"<div class= ""right_block"">" +
						
							"<div class=""block_resolutiontype"" style= ""color: " + Color + """>" +
								"<p2 align=""left"">" + ResolutionType + "</p2>" + 
							"</div>"
							
							"<div class=""right_block block_creationdate"" >" + 
								"<div>" +
									"<p2 align=""right""  style=""vertical-align: baseline"" > &nbsp; " + Формат(Резолюция.CreationDate, "ДФ='dd.MM.yy HH:mm'") + "</p2>" +
								"</div>" +
							"</div>" +
							
						"</div>" +
						
					"</div>" +
					
					"<div>" +
						"<div class=""block_author"">" +
						    "<p1>" + Пояснение + "</p1>" +
						"</div>" +
					"</div>" +
					
					"<div>" + 
						"<div class=""block_comment"" style= ""background-color: #FFFBF0; white-space: normal; word-wrap: break-word"">" +
							"<p><pre>" + Резолюция.Comment + "</pre></p>" +
						"</div>" + 
						
						"<div class=""block_comment"">" + 
							"<p>&nbsp</p>" +
						"</div>" + 
						
					"</div>"+
					
				"</div>";

	КонецЦикла;
	
	HTMLДокумент=	HTMLДокумент + "</div></div></div></div></<body>";

	Возврат HTMLДокумент;
	
КонецФункции

Функция ПолучитьПодсказкуПредставленияПодразделения(Department, Подсказка) Экспорт
	
	Если НЕ Department.ParentDepartment = Неопределено Тогда
		Подсказка= Department.ParentDepartment.Name + ?(ЗначениеЗаполнено(Подсказка), " - " + Подсказка, Подсказка);
		ПолучитьПодсказкуПредставленияПодразделения(Department.ParentDepartment, Подсказка);
	Иначе
		Подсказка= "Головное подразделение" + ?(ЗначениеЗаполнено(Подсказка)," - " + Подсказка, Подсказка);
	КонецЕсли;
	
	Возврат Подсказка;
	
КонецФункции

Функция СформироватьHTMLПредставлениеЗапросаНаУточнение(Document, Организация) Экспорт
	
	HTMLДокумент=	"";
	
	HTMLДокумент= 	"<style>	
					|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
					|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
					|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt; color = #828282; 
					|}
					|
					|.background.block_creationdate {
					|height: auto !important;
					|padding-bottom: 0;
					|right: 0;
					|width: 50%;
					|}
					|
					|.block_creationdate {
					|width: 30%;
					|padding-bottom: 0px;
					|text-align: right; 
					|}
					|
					|.block_resolutiontype {
					|width: 70%;
					|display: block;
					|float: left;
					|}
					|
					|.block_author {
					|width: 98%;
					|display: block;
					|float: left;
					|}
					|
					|.left_block {
					|display: block;
					|float: left; 
					|}
					|
					|.right_block {
					|display: block;
					|float: right;
					|}
					|
					|.bottom_brd {
					|border-bottom-width: 1px;
					|border-bottom-style: solid;
					|border-bottom-color: black;
					|}
					|
					|.block_comment {
					|width: 96%;
					|float: right; 
					|}
					|
					|</style>";
							
					
	HTMLДокумент=	HTMLДокумент + "<body>" +
					"<div>" +
							"<div>" +
							
								"<div>" + 
								
									"<div>" +
										"<div class=""bottom_brd"">" +
											"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
											"<h4 style=""margin-bottom: -15px;"">" + ?(Document.Type = "Inbound", "Отправитель: ", "Получатель: ") + Document.Organization.Name + "</h4>" +
											"<h4>" + ?(Document.Type = "Inbound", "Получатель: ", "Отправитель: ") + Document.Counteragent.Name + "</h4>" +
										"</div>" +
									"</div>";
									
	ЗапросУточнения= Document.GetAmendmentRequestedComment();								
	
	HTMLДокумент=	HTMLДокумент + "<body>" +
		"<div class=""block_left"">" +
			"<div class=""block_comment"" style= ""background-color: #FFFBF0; white-space: normal; word-wrap: break-word"">" +
				"<p><pre>" + ЗапросУточнения + "</pre></p>" +
			"</div>"+
		"</div>";
								
	HTMLДокумент=	HTMLДокумент + "</<body>";
	
	Возврат HTMLДокумент;
	
КонецФункции

Функция DocumentType(Document, DocumentContent= Неопределено) Экспорт
	
	Если DocumentContent <> Неопределено И DocumentContent.Type <> "DocumentSignature" Тогда
		Возврат СтрЗаменить(СтрЗаменить(DocumentContent.Type, "Content", ""), "BuyerTitle", "");
	Иначе
		Возврат Document.Type;
	КонецЕсли;
	
КонецФункции

//////////////////////////////////////////////////////////////////
//// переход на сайт Диадока
///////////////////////////////////////////////////////////////

Функция РазвернутьGUID(стрнач)
	СтрРез = "";
	Если СтрДлина(Стрнач) > 36 Тогда
		СтрРез = лев(Стрнач, 32);
		СтрРез = Сред(СтрРез, 1, 8) + "-" + Сред(СтрРез, 9, 4) + "-" + Сред(СтрРез, 13, 4) + "-" + Сред(СтрРез, 17, 4) + "-" + Сред(СтрРез, 21, 12);
	ИначеЕсли СтрДлина(Стрнач) < 36 Тогда
		СтрРез = Сред(Стрнач, 1, 8) + "-" + Сред(Стрнач, 9, 4) + "-" + Сред(Стрнач, 13, 4) + "-" + Сред(Стрнач, 17, 4) + "-" + Сред(Стрнач, 21, 12);
	Иначе
		СтрРез = СтрНач;
	КонецЕсли;
	Возврат СтрРез;
КонецФункции

Функция ПолучитьURLНаДокументДиадока(BoxId, DocumentId)  
	
	MessageId = Сред(DocumentId, 1, 36);
	EntityId = Сред(DocumentId, 37, 36);
	
	Возврат  РазвернутьGUID(BoxId) + "/Document/Show?letterId=" + РазвернутьGUID(MessageId) + "&documentId=" + РазвернутьGUID(EntityId);
	
КонецФункции

Функция ПолучитьURLНаСтраницуСотрудников(BoxId)
	
	Возврат РазвернутьGUID(BoxId) + "/EmployeesList";
	
КонецФункции


Процедура ОткрытьСтраницуВДиадоке(ПутьПослеСлэша) Экспорт 
	
	текстURL = ПолучитьМодульПрог("Модуль_Логика_Версия").ПолучитьПутьКWEBСерверу() + ПутьПослеСлэша;
 
	//Открытие ссылки в IE
	//Теперь неактуально, работает и в других браузерах
	//Попытка
	//	ie= Новый COMОбъект("InternetExplorer.Application"); 
	//Исключение
	//	Сообщить("Ошибка при открытии приложения Internet Explorer");
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//ie.Visible=True; 
	//ie.Navigate2(текстURL);

	ЗапуститьПриложение(текстURL);
	
КонецПроцедуры 

Процедура ПоказатьДокументВДиадоке(ЭДООбъект) Экспорт 
	
	текстURL = ПолучитьURLНаДокументДиадока(ЭДООбъект.OrganizationId, ЭДООбъект.DocumentId);
	ОткрытьСтраницуВДиадоке(текстURL)
	
КонецПроцедуры 

Процедура ПоказатьСтраницуСотрудниковВДиадоке(OdganizationId) Экспорт
	
	ТекстURL=	ПолучитьURLНаСтраницуСотрудников(OdganizationId);
	ОткрытьСтраницуВДиадоке(ТекстURL);
	
КонецПроцедуры

Функция получитьМассивЯщиковДиадокПоИНН(Organization, ИННКонтрагента, КППКонтрагента="") Экспорт 
	Если Organization <> Неопределено Тогда
		масЯщики = Новый Массив;
		Если НЕ ПустаяСтрока(СокрЛП(ИННКонтрагента)) Тогда
			CounteragentList = Organization.GetCounteragentListByInnKpp(СокрЛП(ИННКонтрагента), сокрЛП(КППКонтрагента));
			Для ц = 0 по CounteragentList.count-1 цикл 
				масЯщики.Добавить( CounteragentList.GetItem(ц));
			КонецЦикла;	
		КонецЕсли;
	Иначе 
		масЯщики = Неопределено
	КонецЕсли;
	
	Возврат МасЯщики;
КонецФункции 	

Функция ПолучитьDepartment(Organization, DepartmentKpp) Экспорт
	Если ПустаяСтрока(DepartmentKpp) Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайтиDepartmentПоКППВДереве(Organization.Departments, DepartmentKpp);
	КонецЕсли;
КонецФункции

Функция ПолучитьОписаниеКонфигурацииДляДиадок() 
	Возврат Метаданные.Синоним + " ("+Метаданные.Версия+")";
КонецФункции

Функция ВСтрокеНРегЕстьСлова(стрПар, слово1, слово2 = "", слово3 = "", слово4 = "")
	стр = НРег(стрПар);
	Если Найти(стр, слово1) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово2) И Найти(стр, слово2) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(слово3) И Найти(стр, слово3) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(слово4) И Найти(стр, слово4) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

СписокТиповДокументов=		ПолучитьСписокТиповДокументовДиадок();

КэшМетокВремени = Новый ТаблицаЗначений;
КэшМетокВремени.Колонки.Добавить("DocumentType");
КэшМетокВремени.Колонки.Добавить("OrganizationId");
КэшМетокВремени.Колонки.Добавить("Timestamp");
КэшМетокВремени.Колонки.Добавить("UpdateTime");

ThirtySecondsToCache = Новый ТаблицаЗначений;
ThirtySecondsToCache.Колонки.Добавить("OrganizationId");
ThirtySecondsToCache.Колонки.Добавить("CounteragentId");
ThirtySecondsToCache.Колонки.Добавить("Действие");
ThirtySecondsToCache.Колонки.Добавить("TimeUpdate");