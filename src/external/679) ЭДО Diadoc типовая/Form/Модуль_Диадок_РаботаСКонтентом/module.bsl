Перем ТаблицаПересчета;

//{ТЕЛО МОДУЛЯ
	
	//{ОБЩИЕ ФУНКЦИИ
		
		Функция ЭтоНеформализованныйДокументБезМетаданных(Document) Экспорт 
			
			Возврат
			
				Document.Type = "Nonformalized"
			ИЛИ	Document.Type = "Contract"
			ИЛИ Document.Type = "ReconciliationAct"
			ИЛИ Document.Type = "ServiceDetails"
			ИЛИ Document.Type = "PriceList"
			ИЛИ Document.Type = "PriceListAgreement"
			ИЛИ Document.Type = "TrustConnectionRequest"
			ИЛИ Document.Type = "SupplementaryAgreement"
			ИЛИ Document.Type = "CertificateRegistry"
			
		КонецФункции	
		
		Процедура Дополнить_StructedAdditionalInfos_ДопСведениями(StructedAdditionalInfos, ДопСведения) Экспорт
			
			МассивДопСведений= ПреобразоватьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);
			
			Для Каждого ДопСведение Из МассивДопСведений Цикл
				
				ПозицияРазделителя= Найти(ДопСведение, "=");
				
				Если ПозицияРазделителя > 0 Тогда
					
					_Key=   Лев(ДопСведение,  ПозицияРазделителя - 1);
					_Value= Сред(ДопСведение, ПозицияРазделителя + 1);
					
					Если НЕ ПустаяСтрока(_Key) И НЕ ПустаяСтрока(_Value) Тогда
						StructedAdditionalInfos.Добавить(Новый Структура("Key, Value", СокрЛП(_Key), СокрЛП(_Value)));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Функция ВыделитьСлово(ИсходнаяСтрока)
			
			Буфер = СокрЛ(ИсходнаяСтрока);
			ПозицияПослПробела = Найти(Буфер, " ");
			
			Если ПозицияПослПробела = 0 Тогда
				ИсходнаяСтрока = "";
				Возврат Буфер;
			КонецЕсли;
			
			ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
			ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
			
			Возврат ВыделенноеСлово;
			
		КонецФункции
		
		Функция ДобавитьРазделитель(Стр, Префикс = "") 
			Возврат ?(ЗначениеЗаполнено(стр), Префикс+сокрЛП(Стр)+", ", "");
		КонецФункции
		
		Процедура ЗаполнитьContentПоСтруктуре(content, СтруктураДанных, описаниеСтруктурыДанных = "") Экспорт 
			
			Если типЗнч(СтруктураДанных) = тип("Структура") Тогда 
				
				Для каждого Элемент из СтруктураДанных цикл 
					
					Если Элемент.Ключ= "Конструкторы" Тогда
						Продолжить;
					КонецЕсли;
					
					Если (Элемент.ключ="Totals") или (Элемент.ключ="TotalGrossQuantity") или (Элемент.ключ="TotalParcelsQuantity")  или (Элемент.ключ="TotalSum") 
						или (Элемент.ключ="TotalsInc")  или (Элемент.ключ="TotalsDec") Тогда
						//итоги не инициализируем в объекте
					ИначеЕсли типЗнч(Элемент.значение)=тип("Структура") Тогда 
						попытка
							ЭлементКонтента =  content[Элемент.ключ];
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьContentПоСтруктуре(ЭлементКонтента, Элемент.Значение, описаниеСтруктурыДанных+"."+Элемент.ключ);
					ИначеЕсли Элемент.ключ = "Items" Тогда 
						для каждого стр из СтруктураДанных.items цикл 
							попытка 
								item =content.addItem();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(item, стр, описаниеСтруктурыДанных+".Items");
						конеццикла;
					ИначеЕсли Элемент.ключ = "PaymentDocuments"  Тогда 
						для каждого стр из СтруктураДанных.PaymentDocuments цикл 
							попытка 
								PaymentDocument =content.addPaymentDocument();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(PaymentDocument, стр, описаниеСтруктурыДанных+".PaymentDocuments");
						конеццикла;
					ИначеЕсли Элемент.ключ = "StructedAdditionalInfos" Тогда
						Для каждого стр из СтруктураДанных.StructedAdditionalInfos Цикл
							Попытка 
								AdditionalInfo = content.addStructedAdditionalInfo();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
						КонецЦикла;	
					ИначеЕсли Элемент.ключ = "OriginalInvoices" Тогда 
						Для каждого стр из СтруктураДанных.OriginalInvoices Цикл 
							Попытка 
								OriginalInvoice = content.addOriginalInvoice();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(OriginalInvoice, стр, описаниеСтруктурыДанных+".OriginalInvoices");
						КонецЦикла;	
					ИначеЕсли Элемент.ключ = "AdditionalInfoId" И ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
						Для каждого стр из СтруктураДанных.AdditionalInfoId.StructedAdditionalInfos Цикл
							Попытка 
								AdditionalInfo = content.AdditionalInfoId.addStructedAdditionalInfo();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
						КонецЦикла;	
					ИначеЕсли Элемент.ключ = "TransferBases" Тогда
						Для каждого стр из СтруктураДанных.TransferBases Цикл
							Попытка 
								TransferBase = content.addTransferBase();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(TransferBase, стр, описаниеСтруктурыДанных+".TransferBases");
						КонецЦикла;	
					ИначеЕсли Элемент.ключ = "Waybills" Тогда
						Для каждого стр из СтруктураДанных.Waybills Цикл
							Попытка 
								Waybill = content.addWaybill();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(Waybill, стр, описаниеСтруктурыДанных+".Waybills");
						КонецЦикла;	
					ИначеЕсли Элемент.ключ = "Invoices" Тогда
						Для каждого стр из СтруктураДанных.Invoices Цикл
							Попытка 
								Invoice = content.addInvoice();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(Invoice, стр, описаниеСтруктурыДанных+".Invoices");
						КонецЦикла;
					ИначеЕсли Элемент.ключ = "CorrectionBases" Тогда
						Для каждого стр из СтруктураДанных.CorrectionBases Цикл
							Попытка 
								CorrectionBase = content.addCorrectionBase();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(CorrectionBase, стр, описаниеСтруктурыДанных+".CorrectionBases");
						КонецЦикла;
					ИначеЕсли Элемент.ключ = "Signers" Тогда
						Для каждого стр из СтруктураДанных.Signers Цикл
							Попытка 
								Signer = content.addSigner();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(Signer, стр, описаниеСтруктурыДанных+".Signers");
						КонецЦикла;	
					ИначеЕсли (найти(Элемент.ключ, "Ссылка")=0) и (Элемент.Значение<>неопределено) Тогда  
						попытка
							content[Элемент.ключ] =  ?(типЗнч(Элемент.Значение)=тип("Строка"), СокрЛП(Элемент.Значение), Элемент.Значение);
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки
					КонецЕсли;
				КонецЦикла;	
			иначе //это строка таблицы
				Для каждого колонка из СтруктураДанных.владелец().колонки цикл 
					Если (колонка.имя="AmountsDec") или (колонка.имя="AmountsInc") Тогда 
						//итоги пропускаем
					ИначеЕсли (колонка.Имя = "OriginalValues") или    (колонка.Имя = "CorrectedValues") Тогда 
						попытка
							ЭлементКонтента =  content[колонка.Имя];
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит "+колонка.Имя+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьContentПоСтруктуре(ЭлементКонтента,СтруктураДанных[колонка.имя], описаниеСтруктурыДанных+"."+колонка.имя);
					
					ИначеЕсли Колонка.Имя = "StructedAdditionalInfos" Тогда
						Для каждого стр из СтруктураДанных.StructedAdditionalInfos Цикл
							Попытка 
								StructedAdditionalInfos = content.addStructedAdditionalInfo();
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Колонка.Имя+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(StructedAdditionalInfos, стр, описаниеСтруктурыДанных+".StructedAdditionalInfos");
						КонецЦикла;
					ИначеЕсли Колонка.Имя = "CustomDeclarations" И СтруктураДанных.CustomDeclarations <> Неопределено Тогда
						Для каждого стр из СтруктураДанных.CustomDeclarations Цикл
							Попытка 
								CustomDeclaration = content.addCustomDeclaration();
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Колонка.Имя+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(CustomDeclaration, стр, описаниеСтруктурыДанных+".CustomDeclarations");
						КонецЦикла;
					ИначеЕсли Колонка.Имя = "InvoiceRevisions" И СтруктураДанных.InvoiceRevisions <> Неопределено Тогда
						Для каждого стр из СтруктураДанных.InvoiceRevisions Цикл
							Попытка 
								InvoiceRevision = content.addInvoiceRevision();  
							Исключение 	
								ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
							КонецПопытки;
							ЗаполнитьContentПоСтруктуре(InvoiceRevision, стр, описаниеСтруктурыДанных+".InvoiceRevisions");
						КонецЦикла;
					ИначеЕсли типЗнч(СтруктураДанных[колонка.имя])=тип("Структура") Тогда 
						попытка
							ЭлементКонтента =  content[колонка.имя];
						Исключение
							ВызватьИсключение("Не удается инициализировать реквизит "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						КонецПопытки;
						ЗаполнитьContentПоСтруктуре(ЭлементКонтента, СтруктураДанных[колонка.имя], описаниеСтруктурыДанных+"."+колонка.имя);
					ИначеЕсли (найти(колонка.имя, "Ссылка")=0) и (СтруктураДанных[колонка.имя]<>неопределено) Тогда   
						попытка 
							content[колонка.Имя] =  ?(типЗнч(СтруктураДанных[колонка.имя])=Тип("Строка"), СокрЛП(СтруктураДанных[колонка.имя]), СтруктураДанных[колонка.имя]);
						исключение 
							ВызватьИсключение("Не удается инициализировать реквизит "+колонка.имя+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки() );
						конецПопытки	
					КонецЕсли;	
				конецЦикла;	
			КонецЕсли;
		КонецПроцедуры
		
		Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, ПолноеИмяРодителя= "", Конструкторы= Неопределено) Экспорт
			
			Если Content = Неопределено Тогда
				Возврат
			КонецЕсли;
			
			Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
				
				Если СтруктураДанных.Свойство("Конструкторы") Тогда
					Конструкторы= СтруктураДанных.Конструкторы;
				КонецЕсли;
				
				Для Каждого Элемент ИЗ СтруктураДанных Цикл
					
					Ключ= Элемент.Ключ;
					
					Если Ключ = "Конструкторы" Тогда
						Продолжить;
					КонецЕсли;
					
					ПолноеИмя= ПолноеИмяРодителя + "." + Ключ;
					
					Конструктор= Конструктор(ПолноеИмя, Конструкторы);
					Если Конструктор <> Неопределено Тогда
						СтруктураДанных[Ключ]= НовыйЭлементContent(Ключ, Конструктор, Конструкторы, ПолноеИмяРодителя);
					КонецЕсли;
					
					ТипЭлемента= ТипЗнч(СтруктураДанных[Ключ]);
						
					Если ТипЭлемента = Тип("Структура") Тогда 
						
						ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента(Content, Ключ, ПолноеИмя), СтруктураДанных[Ключ], ПолноеИмя, Конструкторы);
						
					ИначеЕсли ТипЭлемента = Тип("ТаблицаЗначений") ИЛИ ТипЭлемента = Тип("Массив") Тогда 
						
						ЗаполнитьКоллекциюЭлементаСтруктурыПоКонтенту(Content[Ключ], СтруктураДанных[Ключ], Ключ, ПолноеИмяРодителя, Конструкторы)
						
					ИначеЕсли Найти(Ключ, "Ссылка") = 0 Тогда
						
						СтруктураДанных[Ключ]= ЭлементКонтента(Content, Ключ, ПолноеИмя);
						
					КонецЕсли;
					
				КонецЦикла;	
				
			Иначе // Строка таблицы значений
				
				ТаблицаЗначений= СтруктураДанных.Владелец();
				
				Для Каждого Колонка ИЗ ТаблицаЗначений.Колонки Цикл
					
					Ключ= Колонка.Имя;
					
					ПолноеИмя= ПолноеИмяРодителя + "." + Ключ;
					
					Конструктор= Конструктор(ПолноеИмя, Конструкторы);
					Если Конструктор <> Неопределено Тогда
						СтруктураДанных[Ключ]= НовыйЭлементContent(Ключ, Конструктор, Конструкторы, ПолноеИмяРодителя);
					КонецЕсли;
					
					ТипЭлемента= ТипЗнч(СтруктураДанных[Ключ]);
					
					Если ТипЭлемента = Тип("Структура") Тогда 
						
						ЗаполнитьСтруктуруПоКонтенту(ЭлементКонтента(Content, Ключ, ПолноеИмя), СтруктураДанных[Ключ], ПолноеИмя);
						
					ИначеЕсли ТипЭлемента = Тип("ТаблицаЗначений") ИЛИ ТипЭлемента = Тип("Массив") Тогда 
						
						ЗаполнитьКоллекциюЭлементаСтруктурыПоКонтенту(ЭлементКонтента(Content, Ключ, ПолноеИмя), СтруктураДанных[Ключ], Ключ, ПолноеИмяРодителя, Конструкторы)
						
					ИначеЕсли Найти(Ключ, "Ссылка") = 0 Тогда   
					
						СтруктураДанных[Ключ] = ЭлементКонтента(Content, Ключ, ПолноеИмя);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецПроцедуры
		
		Функция ЭлементКонтента(Content, Ключ, ПолноеИмя)
			
			Попытка
				Возврат Content[Ключ];
			Исключение
				ВызватьИсключение("Ошибка чтения """ + ПолноеИмя + """: " + ОписаниеОшибки());
			КонецПопытки
			
		КонецФункции
		
		Процедура ЗаполнитьКоллекциюЭлементаСтруктурыПоКонтенту(Content, Коллекция, Ключ, ПолноеИмяРодителя, Конструкторы)
			
			ТипКоллекцииТаблицаЗначений= ТипЗнч(Коллекция) = Тип("ТаблицаЗначений");
			
			ПолноеИмя= ПолноеИмяРодителя + "." + Ключ;
			
			ВГраница= Content.Count-1;
			Для ИндексЦикла= 0 ПО ВГраница Цикл
				
				Попытка 
					ЭлементContent= Content.GetItem(ИндексЦикла);
				Исключение 	
					ВызватьИсключение("Ошибка чтения коллекции """ + ПолноеИмя + """: " + ОписаниеОшибки());
				КонецПопытки;
				
				Если ТипКоллекцииТаблицаЗначений Тогда
					
					НовыйЭлемент= Коллекция.Добавить();
					
					ЗаполнитьСтруктуруПоКонтенту(ЭлементContent, НовыйЭлемент, ПолноеИмя, Конструкторы);
					
				Иначе // Массив
					
					Конструктор= Конструктор(ПолноеИмя + "_Item", Конструкторы);
					
					Если Конструктор <> Неопределено Тогда
						
						НовыйЭлемент= НовыйЭлементContent(Ключ, Конструктор, Конструкторы, ПолноеИмяРодителя);
						
						ЗаполнитьСтруктуруПоКонтенту(ЭлементContent, НовыйЭлемент, ПолноеИмя, Конструкторы);
						
						Коллекция.Добавить(НовыйЭлемент);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Функция СформироватьДанныеОПодписях(Document, Титулы) Экспорт
			
			Подписи = ИнициализироватьСтруктуруДанныхПодписей();
			
			Подписи.DocumentMetaData.DocumentID			   = Document.DocumentID;
			Подписи.DocumentMetaData.TimeStamp  		   = Document.TimeStamp;
			Подписи.DocumentMetaData.SenderSignatureStatus = Document.SenderSignatureStatus;
			
			Если Титулы.Content.Свойство("Signer") Тогда
				
				Подписи.SellerSigner = Титулы.Content.Signer;
				
			ИначеЕсли Титулы.Content.Свойство("Signers") И ЗначениеЗаполнено(Титулы.Content.Signers) Тогда
				
				Подписи.SellerSigner = Титулы.Content.Signers[0].SignerDetails;
				
			КонецЕсли;
			
			Если Титулы.Свойство("BuyerContent") Тогда
				
				Если Титулы.BuyerContent.Свойство("Signer") Тогда
					
					Подписи.BuyerSigner = Титулы.BuyerContent.Signer;
					
				ИначеЕсли Титулы.BuyerContent.Свойство("Signers") И ЗначениеЗаполнено(Титулы.BuyerContent.Signers) Тогда
						
					Подписи.BuyerSigner = Титулы.BuyerContent.Signers[0].SignerDetails;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьСтруктуруПоКонтенту(Document.GetSenderSignature()	 , Подписи.SenderSignature);
			ЗаполнитьСтруктуруПоКонтенту(Document.GetRecipientSignature(), Подписи.RecipientSignature);
			
			Возврат Подписи;
			
		КонецФункции	
		
		Функция ИнициализироватьСтруктуруДанныхПодписей()
			
			Результат=	Новый Структура("SellerSigner, BuyerSigner, SenderSignature, RecipientSignature, DocumentMetaData");
			
			Результат.SellerSigner=		  Новый_Signer();
			Результат.BuyerSigner=		  Новый_Signer();
			Результат.SenderSignature=	  Новый_Signature();
			Результат.RecipientSignature= Новый_Signature();
			Результат.DocumentMetaData=   Новый Структура("Timestamp, DocumentID, SenderSignatureStatus");

			Возврат Результат;
			
		КонецФункции
		
		Функция ВизуализироватьДопПоля(нечто) Экспорт
			
			Если ТипЗнч(нечто) = ОдинСАдаптер_Документы_ПолучитьТипСправочникаОрганизации() Тогда
				Организация = нечто;
				BoxId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(Организация)
			Иначе 
				Document = нечто;
				BoxId = ?(Document.Direction = "Inbound", Document.Counteragent.id, Document.Organization.Id);
			КонецЕсли;
			
			СписокОрганизацийНеТребующихВизуализацииДопПоля=	ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля();
			Если (ЗначениеЗаполнено(BoxId)) и  (СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(BoxId) <> Неопределено) Тогда 
				Возврат Ложь
			Иначе 
				Возврат Истина;
			КонецЕсли;	
		КонецФункции
		
		Функция ПроверитьВДокументеНаличиеНДС(DocumentContent) Экспорт
										
			// Документ "Акт о выполнении работ в формате ФНС" не содержит поле "Ставка НДС" (TaxRate), поэтому ориентируемся на поле "Сумма НДС" (Vat).
			Если DocumentContent.Type = "XmlAcceptanceCertificateContent" Тогда
				ИмяПоля= "Vat";
			Иначе
				ИмяПоля= "TaxRate";
			КонецЕсли;
			
			ВГраница= DocumentContent.Items.Count-1;
			
			Для ИндексЦикла= 0 ПО ВГраница Цикл
				
				ЗначениеПоля= DocumentContent.Items.GetItem(ИндексЦикла)[ИмяПоля];
				
				Если ЗначениеЗаполнено(ЗначениеПоля) 
					И (ИмяПоля= "Vat"                             // Для поля "Vat" достаточно того что значение заполнено.
					   ИЛИ НРег(СокрЛП(ЗначениеПоля))<>"без ндс") // Для поля "TaxRate" нужно проверить, что ставка НДС не равна "без ндс".
				Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Истина;
		
		КонецФункции
		
		Функция НовыйContent(Имя) Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content= Вычислить("Новый_" + Имя + "(""" + Имя + """, Конструкторы)");
			
			Если Конструкторы.Количество() > 0 Тогда
				Content.Вставить("Конструкторы", Конструкторы);
			КонецЕсли;
			
			Возврат Content;
			
		КонецФункции
		
		Функция НовыйЭлементContent(ИмяЭлемента, Конструктор, Конструкторы= Неопределено, Родитель= "")
			
			Возврат Вычислить(Конструктор + "(""" + СтрЗаменить(Родитель, ".", "_") + "_" + ИмяЭлемента + """, Конструкторы)");
			
		КонецФункции
		
		Процедура ДобавитьКонструктор(ИмяЭлемента, Конструктор, Конструкторы, Родитель="", КонструкторЭлементов= "")
			
			Если ЗначениеЗаполнено(ИмяЭлемента) И Конструкторы <> Неопределено Тогда
				
				Конструкторы.Вставить(Родитель + "_" + ИмяЭлемента, Конструктор);
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ДобавитьКонструкторЭлементаМассива(Конструктор, Конструкторы, ПолноеИмя)
			
			Если Конструкторы <> Неопределено Тогда
				
				Конструкторы.Вставить(ПолноеИмя + "_Item", Конструктор);
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Функция Конструктор(Ключ, Конструкторы)
			
			Если Конструкторы <> Неопределено Тогда
				
				Возврат Конструкторы[СтрЗаменить(Ключ, ".", "_")];
				
			КонецЕсли;
			
		КонецФункции
		
		Функция Значение1C_В_СтрокаCOM(Значение1С, ФорматнаяСтрока= "") Экспорт
			
			Если НЕ ЗначениеЗаполнено(Значение1С) Тогда
				Возврат "";
			ИначеЕсли НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
				Возврат Формат(Значение1С, ФорматнаяСтрока);
			Иначе
				Возврат СокрЛП(Значение1С);
			КонецЕсли;
			
		КонецФункции
	
		Функция СформироватьПредставлениеАдресаПоContent(AddressContent) Экспорт 
			
			Результат = "";
			
			Если AddressContent.IsForeign = Ложь И ЗначениеЗаполнено(AddressContent.RegionCode) = Истина Тогда
				
				КодРегиона 	= AddressContent.RegionCode;
				Индекс 		= AddressContent.ZipCode;
				Район 		= AddressContent.Territory;
				Город 		= AddressContent.City;
				НаселПункт  = AddressContent.Locality;
				Улица       = AddressContent.Street;
				Дом         = AddressContent.Building;
				Корпус      = AddressContent.Block;
				Кварт       = AddressContent.Apartment;
				
				ПредставлениеАдреса = ДобавитьРазделитель(Индекс)+ДобавитьРазделитель(НаименованиеРегиона(КодРегиона))+ДобавитьРазделитель(Район)+
										ДобавитьРазделитель(Город)+ДобавитьРазделитель(НаселПункт)+ДобавитьРазделитель(Улица)+
										ДобавитьРазделитель(Дом, "дом №")+ДобавитьРазделитель(Корпус, "корпус ")+ДобавитьРазделитель(Кварт,"кв ");
										
				Результат = Лев(ПредставлениеАдреса, СтрДлина(ПредставлениеАдреса)-2);
				
			ИначеЕсли ЗначениеЗаполнено(AddressContent.AddressText) = Истина Тогда
				НаименованиеСтраны = НаименованиеСтраны(AddressContent.CountryCode);
				Результат = ?(ЗначениеЗаполнено(НаименованиеСтраны), НаименованиеСтраны, Строка(AddressContent.CountryCode))+", "+AddressContent.AddressText; 
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции	
		
		Функция СформироватьПредставлениеИННКПП(Inn, Kpp) Экспорт
			Если ЗначениеЗаполнено(Kpp) Тогда 
				Возврат "ИНН/КПП: "+Inn+"/"+Kpp
			ИначеЕсли ЗначениеЗаполнено(inn) Тогда 
				Возврат "ИНН: "+Inn
			Иначе 
				Возврат ""
			КонецЕсли;	
		КонецФункции
		
		Функция ПредставлениеИННКПП(CounteragentContent) Экспорт
			ИНН =   CounteragentContent.inn;
			КПП =   CounteragentContent.kpp;
			Если стрДлина(ИНН)=10  Тогда 
				Возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/"+?(ЗначениеЗаполнено(КПП), КПП, "-");
			Иначе 
				Возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/-";    
			КонецЕсли;
		КонецФункции	
		
		Функция ПредставлениеГОП(Counteragent);
			Если  СтруктураКонтентаЗаполнена(Counteragent) Тогда
				НаимОрг = Counteragent.name;                                  	
				Адрес =  СформироватьПредставлениеАдресаПоContent(Counteragent.address);
				
				Возврат НаимОрг + ?(ЗначениеЗаполнено(Адрес), ", "+Адрес, Адрес);
			иначе 
				Возврат ""
			КонецЕсли;	
		КонецФункции	
		
	//}ОБЩИЕ ФУНКЦИИ
	
	//{ФУНКЦИИ РАБОТЫ С ОБЩЕРОССИЙСКИМИ КЛАССИФИКАТОРАМИ
		
		Процедура 	ДобавитьВТаблицуПересчета(Код1, Наименование1, Код2, Наименование2, Коэффициент);
			стр =  ТаблицаПересчета.Добавить();
			Стр.Код1 			= Код1;
			Стр.Наименование1 	= Наименование1;
			Стр.Код2 			= Код2;
			Стр.Наименование2 	= Наименование2;
			Стр.Коэффициент		= Коэффициент;
		КонецПроцедуры	
		
		Процедура ЗаполнитьТаблицуПересчета()
			ТаблицаПересчета = Новый ТаблицаЗначений;
			Таблицапересчета.Колонки.Добавить("Код1");
			Таблицапересчета.Колонки.Добавить("Наименование1");
			Таблицапересчета.Колонки.Добавить("Код2");
			Таблицапересчета.Колонки.Добавить("Наименование2");
			Таблицапересчета.Колонки.Добавить("Коэффициент");
			Таблицапересчета.Колонки.Индекс(Таблицапересчета.Колонки.Код1);
			Таблицапересчета.Колонки.Индекс(Таблицапересчета.Колонки.Код2);
			
			
			//длина
			ДобавитьВТаблицуПересчета("009", "Мм", "008", "Км", 1000);
			ДобавитьВТаблицуПересчета("009", "Мм", "006", "М" , 1000000);
			ДобавитьВТаблицуПересчета("009", "Мм", "005", "Дм", 10000000);
			ДобавитьВТаблицуПересчета("009", "Мм", "004", "См", 100000000);
			ДобавитьВТаблицуПересчета("009", "Мм", "003", "мм", 1000000000);
			ДобавитьВТаблицуПересчета("008", "Км", "006", "М" , 1000);
			ДобавитьВТаблицуПересчета("008", "Км", "005", "Дм", 10000);
			ДобавитьВТаблицуПересчета("008", "Км", "004", "См", 100000);
			ДобавитьВТаблицуПересчета("008", "Км", "003", "мм", 1000000);
			ДобавитьВТаблицуПересчета("006", "М", "005", "Дм", 10);
			ДобавитьВТаблицуПересчета("006", "М", "004", "См", 100);
			ДобавитьВТаблицуПересчета("006", "М", "003", "мм", 1000);
			ДобавитьВТаблицуПересчета("005", "Дм", "004", "См", 10);
			ДобавитьВТаблицуПересчета("005", "Дм", "003", "мм", 100);
			ДобавитьВТаблицуПересчета("004", "См", "003", "мм", 10);
			
			//прощадь
			ДобавитьВТаблицуПересчета("061", "Км2", "059", "га"    , 100);
			ДобавитьВТаблицуПересчета("061", "Км2", "058", "тыс м2", 1000);
			ДобавитьВТаблицуПересчета("061", "Км2", "109", "ар"    , 10000);
			ДобавитьВТаблицуПересчета("061", "Км2", "055", "м2"    , 1000000);
			ДобавитьВТаблицуПересчета("061", "Км2", "053", "дм2"   , 100000000);
			ДобавитьВТаблицуПересчета("061", "Км2", "051", "см2"   , 10000000000);
			ДобавитьВТаблицуПересчета("061", "Км2", "051", "мм2"   , 1000000000000);
			ДобавитьВТаблицуПересчета("059", "га", "058", "тыс м2", 10);
			ДобавитьВТаблицуПересчета("059", "га", "109", "ар"    , 100);
			ДобавитьВТаблицуПересчета("059", "га", "055", "м2"    , 10000);
			ДобавитьВТаблицуПересчета("059", "га", "053", "дм2"   , 1000000);
			ДобавитьВТаблицуПересчета("059", "га", "051", "см2"   , 100000000);
			ДобавитьВТаблицуПересчета("059", "га", "051", "мм2"   , 10000000000);
			ДобавитьВТаблицуПересчета("058", "тыс м2", "109", "ар"    , 10);
			ДобавитьВТаблицуПересчета("058", "тыс м2", "055", "м2"    , 1000);
			ДобавитьВТаблицуПересчета("058", "тыс м2", "053", "дм2"   , 100000);
			ДобавитьВТаблицуПересчета("058", "тыс м2", "051", "см2"   , 10000000);
			ДобавитьВТаблицуПересчета("058", "тыс м2", "051", "мм2"   , 1000000000);
			ДобавитьВТаблицуПересчета("109", "ар", "055", "м2"    , 100);
			ДобавитьВТаблицуПересчета("109", "ар", "053", "дм2"   , 10000);
			ДобавитьВТаблицуПересчета("109", "ар", "051", "см2"   , 1000000);
			ДобавитьВТаблицуПересчета("109", "ар", "051", "мм2"   , 100000000);
			ДобавитьВТаблицуПересчета("055", "м2", "053", "дм2"   , 100);
			ДобавитьВТаблицуПересчета("055", "м2", "051", "см2"   , 10000);
			ДобавитьВТаблицуПересчета("055", "м2", "051", "мм2"   , 1000000);
			ДобавитьВТаблицуПересчета("053", "дм2", "051", "см2"   , 100);
			ДобавитьВТаблицуПересчета("053", "дм2", "051", "мм2"   , 10000);
			ДобавитьВТаблицуПересчета("051", "см2", "051", "мм2"   , 100);
			
			//объем
			ДобавитьВТаблицуПересчета("113", "м3" , "112", "л"   , 1000);
			ДобавитьВТаблицуПересчета("113", "м3" , "111", "см3" , 1000000);
			ДобавитьВТаблицуПересчета("113", "м3" , "110", "мм3" , 1000000000);
			ДобавитьВТаблицуПересчета("112", "л"  , "111", "см3" , 1000);
			ДобавитьВТаблицуПересчета("112", "л" ,"110", "мм3"   , 1000000);
			ДобавитьВТаблицуПересчета("111", "см3" ,"110", "мм3"  , 1000);
			
			//вес
			ДобавитьВТаблицуПересчета("168", "тн" ,"206", "ц"   , 10);
			ДобавитьВТаблицуПересчета("168", "тн" ,"166", "кг"  , 1000);
			ДобавитьВТаблицуПересчета("168", "тн" ,"163", "г"   , 1000000);
			ДобавитьВТаблицуПересчета("168", "тн" ,"162", "кар" , 5000000);
			ДобавитьВТаблицуПересчета("168", "тн" ,"161", "мг"  , 1000000000);
			ДобавитьВТаблицуПересчета("206", "ц" ,"166", "кг"  , 100);
			ДобавитьВТаблицуПересчета("206", "ц" ,"163", "г"   , 100000);
			ДобавитьВТаблицуПересчета("206", "ц" ,"162", "кар" , 500000);
			ДобавитьВТаблицуПересчета("206", "ц" ,"161", "мг"  , 100000000);
			ДобавитьВТаблицуПересчета("166", "кг" ,"163", "г"   , 1000);
			ДобавитьВТаблицуПересчета("166", "кг" ,"162", "кар" , 5000);
			ДобавитьВТаблицуПересчета("166", "кг" ,"161", "мг"  , 1000000);
			ДобавитьВТаблицуПересчета("163", "г" ,"162", "кар" , 5);
			ДобавитьВТаблицуПересчета("163", "г" ,"161", "мг"  , 1000);
			ДобавитьВТаблицуПересчета("162", "кар" ,"161", "мг"  , 200);
			
			//кВт
			ДобавитьВТаблицуПересчета("215", "мВт" ,"214", "кВт" , 1000);
			ДобавитьВТаблицуПересчета("215", "мВт" ,"212", "Вт"  , 1000000);
			ДобавитьВТаблицуПересчета("214", "кВт" ,"212", "Вт"  , 1000);
			
			ДобавитьВТаблицуПересчета("247", "гВт.ч" ,"246", "мВт.ч" , 1000);
			ДобавитьВТаблицуПересчета("247", "гВт.ч" ,"245", "кВт.ч" , 1000000);
			ДобавитьВТаблицуПересчета("247", "гВт.ч" ,"243", "Вт.ч"  , 1000000000);
			ДобавитьВТаблицуПересчета("246", "мВт.ч" ,"245", "кВт.ч" , 1000);
			ДобавитьВТаблицуПересчета("246", "мВт.ч" ,"243", "Вт.ч"  , 1000000);
			ДобавитьВТаблицуПересчета("245", "кВт.ч" ,"243", "Вт.ч"  , 1000);
			
			//калории
			ДобавитьВТаблицуПересчета("234", "1000 ГКал" ,"233", "Гкал" , 1000);
			ДобавитьВТаблицуПересчета("234", "1000 ГКал" ,"232", "ккал" , 1000000);
			ДобавитьВТаблицуПересчета("233", "Гкал ГКал" ,"232", "ккал" , 1000);
		КонецПроцедуры	
		
		Функция ПолучитьКоэффициентПересчета(КодЕИ1, КодЕИ2) Экспорт
			выборкаСтрок =  ТаблицаПересчета.найтиСтроки(Новый Структура("Код1, Код2", КодЕИ1, КодЕИ2));
			Возврат ?(ВыборкаСтрок.количество()=0, Неопределено, ВыборкаСтрок[0].Коэффициент);
		КонецФункции	
		
		Функция УбратьНеважныеСимволы(Стр)
			
			Результат= СтрЗаменить(Стр, ".", "");
			Результат= СтрЗаменить(Результат, " ", "");
			
			Возврат СокрЛП(Результат);
			
		КонецФункции
		
		Функция Эквивалентны(Стр1, Стр2) 
			
			Если ЗначениеЗаполнено(Стр1) = Ложь ИЛИ ЗначениеЗаполнено(Стр2) = Ложь Тогда 
				Возврат Ложь;
			Иначе 	
				Возврат ВРЕГ(УбратьНеважныеСимволы(Стр1)) = ВРЕГ(УбратьНеважныеСимволы(Стр2));
			КонецЕсли;
			
		КонецФункции 
		
		Функция строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
			Если ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод=Ложь Тогда
				Возврат "наименования"
			ИначеЕсли 	ОшибкаВалютыНеНайдена=Ложь и   ОшибкаВалютыНеТотКод Тогда
				Возврат "коды"
			ИначеЕсли 	ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод Тогда
				Возврат "наименования и коды"
			Иначе 
				Возврат ""
			КонецЕсли;	
			
		КонецФункции
		
		Функция ПроверитьЕИ(ЕИ, КодЕИ, ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод) Экспорт
			
			Результат = "";
			
			Если Не ЗначениеЗаполнено(ЕИ) Тогда
				Возврат Результат;
			КонецЕсли;
			
			ПодходящиеЕИ = Модуль_РаботаСКонтентом.ПодходящиеЕдиницыИзмерения(ЕИ.Наименование);
			
			Для Каждого СтрокаОКЕИ ИЗ ПодходящиеЕИ Цикл
				Если СтрокаОКЕИ.Код = КодЕИ Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;	
			
			Если ПодходящиеЕИ.Количество() = 0 Тогда
				
				ОшибкаЕИНеНайдена = Истина;
				
				Результат = "
				|Единица измерения  «<a href=""ЕДИНИЦА:" + ЕИ.Метаданные().Имя + ":" + ЕИ.уникальныйИдентификатор()+""">"+ЕИ+"</a>»
				|не найдена в <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a></br>";
				
			ИначеЕсли ПодходящиеЕИ.Количество() = 1 Тогда
				
				ОшибкаЕИНеТотКод = Истина;
				
				Результат = "
				|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.Метаданные().Имя + ":" + ЕИ.уникальныйИдентификатор()+""">"+ЕИ+"</a>» - "+КодЕИ+"
				|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> - "+ПодходящиеЕИ[0].код+"</br>";
				
			Иначе 
				
				ОшибкаЕИНеТотКод = Истина;
				
				Результат = "
				|Код единицы измерения «<a href=""ЕДИНИЦА:" + ЕИ.Метаданные().Имя + ":" + ЕИ.уникальныйИдентификатор()+""">"+ЕИ+"</a>» - "+КодЕИ+"
				|не соответствует коду по <a href=""Открыть_ОКЕИ"" title=""Общероссийский классификатор единиц измерения"">ОКЕИ</a> </br>";
				
				Для Каждого СтрокаОКЕИ ИЗ ПодходящиеЕИ Цикл
					Результат = Результат + Символы.ПС + "Единице измерения «"+СтрокаОКЕИ.НаименованиеПолное+"», ("+СтрокаОКЕИ.НаименованиеКраткое+") соответствует код ОКЕИ "+ СтрокаОКЕИ.код+"</br>";
				КонецЦикла;
				
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции 
		
		Функция ПроверитьСтрану(СтранаПроисхождения, КодПроисх, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод)
			
			Результат = "";
			
			Если Не ЗначениеЗаполнено(СтранаПроисхождения) Тогда
				Возврат Результат;
			КонецЕсли;
			
			ПодходящиеСтраны = Модуль_РаботаСКонтентом.ПодходящиеСтраны(СтранаПроисхождения);
			
			Для Каждого СтрокаОКСМ Из ПодходящиеСтраны Цикл
				Если СтрокаОКСМ.Код = КодПроисх Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			
			Если ПодходящиеСтраны.Количество() = 0 Тогда
				
				ОшибкаСтраныНеНайдена = Истина;
				
				Результат = "
				|Страна происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>»
				|не найдена в <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a></br>";
				
			ИначеЕсли ПодходящиеСтраны.Количество() = 1 Тогда
				
				ОшибкаСтраныНеТотКод = Истина;
				
				Результат = "
				|Код страны происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>» - " + КодПроисх + "
				|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> - " + ПодходящиеСтраны[0].Код + "</br>";
				
			Иначе 
				
				ОшибкаСтраныНеТотКод = Истина;
				
				Результат = "
				|Код страны происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>» - " + КодПроисх + "
				|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> </br>";
				
				Для каждого СтрокаОКСМ из ПодходящиеСтраны Цикл 
					Результат = Результат + Символы.ПС + "Стране «" + СтрокаОКСМ.НаименованиеКраткое + "» соответствует код ОКСМ " + СтрокаОКСМ.Код + "</br>";
				КонецЦикла;
				
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции
		
		Функция ПроверитьВалюту(валюта, ВалютаКод, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
			
			Результат = "";
			
			НаименованиеВалюты = Новый Массив;
			НаименованиеВалюты.Добавить(Валюта.Наименование);
			НаименованиеВалюты.Добавить(Валюта.НаименованиеПолное);
			ПодходящаяВалюта = Модуль_РаботаСКонтентом.ПодходящаяВалюта(НаименованиеВалюты);
			
			Для Каждого СтрокаОКВ ИЗ ПодходящаяВалюта Цикл
				Если СтрокаОКВ.Код = ВалютаКод Тогда 
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			
			Если ПодходящаяВалюта.Количество() = 0 Тогда
				
				ОшибкаВалютыНеНайдена = Истина;
				
				Результат = "
				|Валюта «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» 
				|не найдена в <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a></br>";
				
			ИначеЕсли ПодходящаяВалюта.Количество() = 1 Тогда
				
				ОшибкаВалютыНеТотКод = Истина;
				
				Результат = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a> -"+ПодходящаяВалюта[0].Код+"</br>";
				
			Иначе
				
				ОшибкаВалютыНеТотКод = Истина;
				
				Результат = "
				|Код валюты «<a href=""ВАЛЮТА:"+валюта.уникальныйИдентификатор()+""">"+Валюта.наименование+"</a>» - "+ВалютаКод+
				" не соответствует коду по <a href=""Открыть_ОКВ"" title=""Общероссийский классификатор валют"">ОКВ</a><br>";
				
				Для Каждого СтрокаОКВ ИЗ ПодходящаяВалюта Цикл 
					Результат = Результат + Символы.ПС + "Валюте «"+СтрокаОКВ.Наименование+"», ("+СтрокаОКВ.КодСимвольный+") соответствует код ОКВ "+СтрокаОКВ.Код+"</br>";
				КонецЦикла;	
				
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции		
		
		Функция КлассификаторВалютПолучитьНаименованиеПоКоду(Код) Экспорт
			Если СокрЛП(Строка(Код)) = "643" Тогда
				Возврат "RUB";
			ИначеЕсли СокрЛП(Строка(Код)) = "978" Тогда
				Возврат "EUR";
			Иначе
				Возврат "";
			КонецЕсли;
		КонецФункции
		
	//}ФУНКЦИИ РАБОТЫ С ОБЩЕРОССИЙСКИМИ КЛАССИФИКАТОРАМИ
	
	//{КОНТЕНТ ВНЕШНИХ ПЕЧАТНЫХ ФОРМ
		
		Функция КонтентВПФ(СсылкаНаОбъект, ИдентификаторВПФ, ТипДокумента, ВыгружатьEXEL=Ложь) Экспорт 
			
			ТабДокумент = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_Печать(СсылкаНаОбъект, ИдентификаторВПФ);
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			НомерДокумента = ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьНомерНаПечатьДиадок(СсылкаНаОбъект);
			ДатаДокумента  = СсылкаНаОбъект.Дата;
			
			ИмяФайла = ТипДокумента + " №" + КонтентВПФ_НомерДокументаДляФайла(НомерДокумента) + " от " + Формат(ДатаДокумента, "ДФ=dd.MM.yyyy") + ?(ВыгружатьEXEL, ".xlsx",".pdf");
			
			ТабДокумент.Записать(ИмяВременногоФайла, ?(ВыгружатьEXEL, ТипФайлаТабличногоДокумента.XLSX , ТипФайлаТабличногоДокумента.PDF));
			
			Результат= Новый Структура;
			Результат.Вставить("Таблица", 			 ТабДокумент);
			Результат.Вставить("СписокОшибок",		 "");
			Результат.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
			Результат.Вставить("ИмяФайла", 			 ИмяФайла);
			Результат.Вставить("Дата", 				 ДатаДокумента);
			Результат.Вставить("Номер", 			 НомерДокумента);
			Результат.Вставить("Сумма",  			 ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьСуммуДокумента(СсылкаНаОбъект));
			Результат.Вставить("СуммаНДС",  		 ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ПолучитьСуммуНДС(СсылкаНаОбъект));
			Результат.Вставить("ДокументБезНДС",	 ?(Результат.СуммаНДС = 0, ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ДокументБезНДС(СсылкаНаОбъект), Ложь));		
						
			Возврат Результат;
			
		КонецФункции	
		
		Функция КонтентВПФ_НомерДокументаДляФайла(НомерДокумента)
			
			Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(НомерДокумента, """", "_"), "|", "_"), ">", "_"), "<", "_"), "?", "_"), "*", "_"), ":", "_"), "/", "_"), "\", "_");
			
		КонецФункции
		
	//}КОНТЕНТ ВНЕШНИХ ПЕЧАТНЫХ ФОРМ
	
	//{ГЕНЕРАЦИЯ ТИТУЛА ПОЛУЧАТЕЛЯ
		
		Функция  ПредставлениеВизирующего(ПараметрыПодписания, ИНН = Неопределено)  
			
			фио =  ПараметрыПодписания.ФиоПодписанта;
			
			Official  = Новый Соответствие;
			Если ФИО = " " Тогда 
				Official.Вставить("Surname", " ");
				Official.Вставить("FirstName", " ");
				Official.Вставить("Patronymic", " ");
			Иначе 	 
				Official.Вставить("Surname", ВыделитьСлово(фио));
				Official.Вставить("FirstName", ВыделитьСлово(фио));
				Official.Вставить("Patronymic", ВыделитьСлово(фио));
			КонецЕсли;
			
			Official.Вставить("JobTitle" , ПараметрыПодписания.ДолжностьПодписанта);
			
			Если     ИНН <> Неопределено Тогда
				Official.Вставить("Inn" , ИНН);
			КонецЕсли;	
			
			Возврат   Official;
			
		КонецФункции
		
		Функция ПредставлениеПолучившегоДоверенность(СтруктураПодписи, ИНН = Неопределено)
			
			Official = Новый Соответствие;
									
			Official.Вставить("Surname", 	СтруктураПодписи.ФамилияГрузПринял);
			Official.Вставить("FirstName", 	СтруктураПодписи.ИмяГрузПринял);
			Official.Вставить("Patronymic", ?(ЗначениеЗаполнено(СтруктураПодписи.ОтчествоГрузПринял) = Истина, СтруктураПодписи.ОтчествоГрузПринял, ""));
			
			Official.Вставить("JobTitle" , 	СтруктураПодписи.ДолжностьГрузПринял);

			Если ИНН <> Неопределено Тогда
				Official.Вставить("Inn" , ИНН);
			КонецЕсли;
			
			Возврат Official;
			
		КонецФункции
				
		Функция СтруктурироватьСведенияОДоверенности(СтруктураПодписи) Экспорт
			
			СтруктураДоверенности=	СтруктураПодписи.СтруктураДоверенности;
			
			СведенияОДоверенности=	Новый Соответствие;
			СведенияОДоверенности.Вставить("Number", 	СтруктураДоверенности.Номер);
			СведенияОДоверенности.Вставить("Date", 		СтруктураДоверенности.Дата);
			
			КемВыдана=	Новый Соответствие;
			КемВыдана.Вставить("Surname",		СтруктураДоверенности.ФамилияДоверенностьВыдал);
			КемВыдана.Вставить("FirstName", 	СтруктураДоверенности.ИмяДоверенностьВыдал);
			КемВыдана.Вставить("Patronymic", 	СтруктураДоверенности.ОтчествоДоверенностьВыдал);
			КемВыдана.Вставить("JobTitle" , 	СтруктураДоверенности.ДолжностьДоверенностьВыдал);
			
			СведенияОДоверенности.Вставить("Issuer", 					КемВыдана);
			СведенияОДоверенности.Вставить("IssuerOrganizationName", 	СтруктураДоверенности.ОрганизацияДоверенностьВыдал);
			СведенияОДоверенности.Вставить("IssuerAdditionalInfo", 		СтруктураДоверенности.ДополнительныеСведенияВыдал);
			
			Если СтруктураПодписи.Свойство("ФамилияГрузПринял") = Истина
				И СтруктураПодписи.Свойство("ИмяГрузПринял") = Истина
				И СтруктураПодписи.Свойство("ОтчествоГрузПринял") = Истина
				И СтруктураПодписи.Свойство("ДолжностьГрузПринял") = Истина Тогда
				
				СведенияОДоверенности.Вставить("Recipient", ПредставлениеПолучившегоДоверенность(СтруктураПодписи));
			Иначе
				СведенияОДоверенности.Вставить("Recipient", ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания));	
			КонецЕсли;
			
			СведенияОДоверенности.Вставить("RecipientAdditionalInfo", "");
			
			Возврат СведенияОДоверенности;
			
		КонецФункции
		
		Функция СформироватьТитулПолучателя(СтруктураПодписи, ЭДОбъект, DocumentType) Экспорт
			
			TitleInfo=	Новый Соответствие;
			
			Если DocumentType =  "XmlTorg12" Тогда
				
				Если СтруктураПодписи.ТипДатыПолучения = "ДатаПолученияГруза" Тогда
					TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(СтруктураПодписи.ДатаПолученияГруза));
				Иначе
					TitleInfo.Вставить("ShipmentReceiptDate", 	НачалоДня(ЭДОбъект.DocumentDate));
				КонецЕсли;
				
				Если СтруктураПодписи.ГрузПолучил Тогда
					TitleInfo.Вставить("Receiver", ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания));
				Иначе
				    TitleInfo.Вставить("Receiver", "");
				КонецЕсли;
								
				Если СтруктураПодписи.ГрузПринял Тогда
					ПараметрыПодписанияПринявшего=	Новый Соответствие;
					ПараметрыПодписанияПринявшего.Вставить("Surname", 		СтруктураПодписи.ФамилияГрузПринял);
					ПараметрыПодписанияПринявшего.Вставить("FirstName", 	СтруктураПодписи.ИмяГрузПринял);
					ПараметрыПодписанияПринявшего.Вставить("Patronymic", 	СтруктураПодписи.ОтчествоГрузПринял);
					ПараметрыПодписанияПринявшего.Вставить("JobTitle" , 	СтруктураПодписи.ДолжностьГрузПринял);
					TitleInfo.Вставить("Accepter", ПараметрыПодписанияПринявшего);
				Иначе
					TitleInfo.Вставить("Accepter", "");
					TitleInfo.Вставить("Attorney", "");
				КонецЕсли;
				
			ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда
				
				Если СтруктураПодписи.Signers.Количество() = 0 Тогда // для того, чтобы при массовом подписании не дублировались подписанты
					ExtendedSigner= СтруктураПодписи.Signers.Добавить();
					ExtendedSigner.BoxId=	ЭДОбъект.Organization.Id;
					ExtendedSigner.CertificateThumbprint= ЭДОбъект.Organization.Certificate.Thumbprint;
				КонецЕсли;
				
				Возврат СтруктураПодписи;
				
			Иначе
				TitleInfo.Вставить("SignatureDate", СтруктураПодписи.ДатаПодписания);
				TitleInfo.Вставить("Official", 		ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания));
			КонецЕсли;
			
			TitleInfo.Вставить("Signer", ПредставлениеВизирующего(СтруктураПодписи.ПараметрыПодписания,  СтруктураПодписи.ИНН));
			
			Если СтруктураПодписи.ПоДоверенности Тогда
				TitleInfo.Вставить("Attorney", СтруктурироватьСведенияОДоверенности(СтруктураПодписи));
			Иначе
				TitleInfo.Вставить("Attorney", "");
			КонецЕсли;
			
			Возврат TitleInfo;
			
		КонецФункции
		
		Функция СформироватьТитулПолучателяДляТорг12(ДатаПолученияГруза, ФИО, Должность, ИНН ) Экспорт 
			
			Torg12BuyerTitleInfo = Новый Соответствие;
			Torg12BuyerTitleInfo.Вставить("ShipmentReceiptDate", формат(ДатаПолученияГруза, "ДФ=dd.MM.yyyy"));
			
			параметрыПодписания = Новый Структура;
			параметрыПодписания.Вставить("ФиоПодписанта", фио);
			параметрыПодписания.Вставить("ДолжностьПодписанта", Должность);
			Torg12BuyerTitleInfo.Вставить("ReceivedBy",     ПредставлениеВизирующего(ПараметрыПодписания) );
			
			Signer = Новый Соответствие;
			Signer.Вставить("SignerDetails", ПредставлениеВизирующего(ПараметрыПодписания,  ИНН));
			Torg12BuyerTitleInfo.Вставить("Signer",Signer);
			
			Возврат  Torg12BuyerTitleInfo;
			
		КонецФункции	
		
		Функция СформироватьТитулПолучателяДляАкта(фио, Должность, ИНН) Экспорт 
			
			AcceptanceCertificateBuyerTitleInfo  = Новый Соответствие;
			параметрыПодписания = Новый Структура;
			параметрыПодписания.Вставить("ФиоПодписанта", фио);
			параметрыПодписания.Вставить("ДолжностьПодписанта", Должность);
			AcceptanceCertificateSignatureInfo   = Новый Соответствие;
			AcceptanceCertificateSignatureInfo.Вставить("Official",    ПредставлениеВизирующего(ПараметрыПодписания) );
			AcceptanceCertificateBuyerTitleInfo.Вставить("Signature",   AcceptanceCertificateSignatureInfo );
			Signer = Новый Соответствие;
			Signer.Вставить("SignerDetails",  ПредставлениеВизирующего(ПараметрыПодписания,  ИНН));
			AcceptanceCertificateBuyerTitleInfo.Вставить("Signer",Signer);
			
			Возврат    AcceptanceCertificateBuyerTitleInfo;
			
		КонецФункции 
		
		Функция ПроверитьТитулПолучателяТорг12(СтруктураДляТитула) Экспорт 
			ТекстОшибки =   ПроверитьФорматДатыПрото(СтруктураДляТитула.получить("ShipmentReceiptDate"), "дата получения груза");
			
			// Получаем из строки html теги абзаца.
			Если текстОшибки <>"" Тогда 
				Если найти(текстОшибки, "<p>")>0 Тогда 
					текстОшибки = прав(текстОшибки, стрДлина(ТекстОшибки)-найти(текстОшибки, "<p>")-2);
				КонецЕсли;
				Если найти(текстОшибки, "</p>")>0 Тогда 
					текстОшибки = лев(текстОшибки, найти(текстОшибки, "</p>")-1);
				КонецЕсли;
			КонецЕсли;
			Возврат текстОшибки;			
			
		КонецФункции
		
	//}ГЕНЕРАЦИЯ ТИТУЛА ПОЛУЧАТЕЛЯ
	
//}ТЕЛО МОДУЛЯ

//{КОНТЕНТ
	
	//{ФУНКЦИИ, ВОЗВРАЩАЮЩИЕ ПУСТЫЕ СТРУКТУРЫ ДЛЯ ИНИЦИАЛИЗАЦИИ КОНТЕНТА
	
		Функция Новый_Torg12SellerContent(ПолноеИмя="") Экспорт 
			
			Конструкторы= Новый Соответствие;
			
			Content= Новый Структура(
			"Date, Number, WaybillDate, WaybillNumber, OperationCode, GroundName, GroundDate, GroundNumber,
			|Seller, Buyer, Shipper, Consignee, ShipperDepartment, ShipperOkdp, SupplyDate, AttachmentSheetsQuantity,
			|ChiefAccountant, AdditionalInfo, SupplyAllowedBy, ChiefAccountant, SupplyPerformedBy, Commons, Totals, Items, Signer");
			
			Content.Seller=  		   НовыйЭлементContent("Seller"			  , "Новый_OrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Buyer=  		   НовыйЭлементContent("Buyer"			  , "Новый_OrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Shipper=  		   НовыйЭлементContent("Shipper"		  , "Новый_OrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Consignee=  	   НовыйЭлементContent("Consignee"		  , "Новый_OrganizationInfo", Конструкторы, ПолноеИмя);
			Content.SupplyAllowedBy=   НовыйЭлементContent("SupplyAllowedBy"  , "Новый_Official"		, Конструкторы, ПолноеИмя);
			Content.ChiefAccountant=   НовыйЭлементContent("ChiefAccountant"  , "Новый_Official"		, Конструкторы, ПолноеИмя);
			Content.SupplyPerformedBy= НовыйЭлементContent("SupplyPerformedBy", "Новый_Official"		, Конструкторы, ПолноеИмя);
			Content.Commons=  		   НовыйЭлементContent("Commons"		  , "Новый_Torg12Commons"	, Конструкторы, ПолноеИмя);
			Content.Totals=  		   НовыйЭлементContent("Totals"			  , "Новый_Torg12Totals"	, Конструкторы, ПолноеИмя);
			Content.Items=  		   НовыйЭлементContent("Items"			  , "Новый_Torg12Items"		, Конструкторы, ПолноеИмя);
			Content.Signer=  		   НовыйЭлементContent("Signer"			  , "Новый_Signer"			, Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_Torg12BuyerContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content = Новый Структура("ShipmentReceiptDate, Attorney, Receiver, Accepter, Signer, AdditionalInfo, Type");
			
			Content.Attorney= НовыйЭлементContent("Attorney", "Новый_Attorney", Конструкторы, ПолноеИмя);
			Content.Receiver= НовыйЭлементContent("Receiver", "Новый_Official", Конструкторы, ПолноеИмя);
			Content.Accepter= НовыйЭлементContent("Accepter", "Новый_Official", Конструкторы, ПолноеИмя);
			Content.Signer=   НовыйЭлементContent("Signer"	, "Новый_Signer"  , Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_AcceptanceCertificateSellerContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content= Новый Структура(
			"Date, Number, Title, SignatureDate, Seller,
			|Items, Official, Attorney, Signer, AdditionalInfo, Type");
			
			Content.Seller=   НовыйЭлементContent("Seller"	, "Новый_OrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Official= НовыйЭлементContent("Official", "Новый_Official"		  , Конструкторы, ПолноеИмя);
			Content.Attorney= НовыйЭлементContent("Attorney", "Новый_Attorney"		  , Конструкторы, ПолноеИмя);
			Content.Signer=   НовыйЭлементContent("Signer"	, "Новый_Signer"		  , Конструкторы, ПолноеИмя);
			
			Content.Items=    НовыйЭлементContent("Items"	, "Новый_AcceptanceCertificateItems", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции	
		
		Функция Новый_AcceptanceCertificateBuyerContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content = Новый Структура("Complaints, SignatureDate, Official, Attorney, Signer, AdditionalInfo, Type");
			
			Content.Official= НовыйЭлементContent("Official", "Новый_Official", Конструкторы, ПолноеИмя);
			Content.Attorney= НовыйЭлементContent("Attorney", "Новый_Attorney", Конструкторы, ПолноеИмя);
			Content.Signer=   НовыйЭлементContent("Signer"	, "Новый_Signer"  , Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_InvoiceContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content = Новый Структура(
			"Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber,
			|Currency, PaymentDocuments, Seller, Shipper, Consignee,Buyer,
			|Signer, StructedAdditionalInfos, Totals, Items, ВалютаСсылка");
			
			Content.Seller=    НовыйЭлементContent("Seller"			  , "Новый_OrganizationInfo"		, Конструкторы, ПолноеИмя);
			Content.Buyer=     НовыйЭлементContent("Buyer"			  , "Новый_OrganizationInfo"		, Конструкторы, ПолноеИмя);
			Content.Shipper=   НовыйЭлементContent("Shipper"		  , "Новый_ShipperOrConsigneeInfo"	, Конструкторы, ПолноеИмя);
			Content.Consignee= НовыйЭлементContent("Consignee"		  , "Новый_ShipperOrConsigneeInfo"	, Конструкторы, ПолноеИмя);
			Content.Totals=    НовыйЭлементContent("Totals"			  , "Новый_InvoiceTotals"			, Конструкторы, ПолноеИмя);
			Content.Signer=    НовыйЭлементContent("Signer"			  , "Новый_Signer"					, Конструкторы, ПолноеИмя);
			Content.Items= 	   НовыйЭлементContent("Items"			  , "Новый_InvoiceItems"			, Конструкторы, ПолноеИмя);
			
			Content.PaymentDocuments= 		 НовыйЭлементContent("PaymentDocuments" 	  , "Новый_PaymentDocuments"	   , Конструкторы, ПолноеИмя);
			Content.StructedAdditionalInfos= НовыйЭлементContent("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат content;
			
		КонецФункции
		
		Функция Новый_InvoiceCorrectionContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			
			Content = Новый Структура(
			"InvoiceCorrectionDate, InvoiceCorrectionNumber, 
			|InvoiceCorrectionRevisionDate, InvoiceCorrectionRevisionNumber,
			|Currency, ВалютаСсылка, Seller, Buyer, Signer, StructedAdditionalInfos,
			|OriginalInvoices, Items, TotalsDec, TotalsInc");
			
			Content.Seller=    НовыйЭлементContent("Seller"	  , "Новый_OrganizationInfo" , Конструкторы, ПолноеИмя);
			Content.Buyer=     НовыйЭлементContent("Buyer"	  , "Новый_OrganizationInfo" , Конструкторы, ПолноеИмя);
			Content.Signer=    НовыйЭлементContent("Signer"	  , "Новый_Signer"			 , Конструкторы, ПолноеИмя);
			Content.TotalsDec= НовыйЭлементContent("TotalsDec", "Новый_InvoiceTotalsDiff", Конструкторы, ПолноеИмя);
			Content.TotalsInc= НовыйЭлементContent("TotalsInc", "Новый_InvoiceTotalsDiff", Конструкторы, ПолноеИмя);
			
			Content.Items= НовыйЭлементContent("Items", "Новый_InvoiceCorrectionItems", Конструкторы, ПолноеИмя);
			
			Content.OriginalInvoices=    	 НовыйЭлементContent("OriginalInvoices"		  , "Новый_OriginalInvoices"	   , Конструкторы, ПолноеИмя);
			Content.StructedAdditionalInfos= НовыйЭлементContent("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_UTDSellerContent(ПолноеИмя="") Экспорт
			
			Конструкторы= Новый Соответствие;
			                          
			Content= Новый Структура(
			"Function, СчетФактураСсылка, Name, Date, Number, Seller, Buyer, Shipper, Consignee, InvoiceTable,
			|Currency, ВалютаСсылка, CurrencyRate, RevisionDate, RevisionNumber, AdditionalInfoId, TransferInfo,
			|Creator, CreatorBase, GovernmentContractInfo, Signers, PaymentDocuments");
			
			Content.Seller=  		  НовыйЭлементContent("Seller"			, "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Buyer=  		  НовыйЭлементContent("Buyer"			, "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Consignee=  	  НовыйЭлементContent("Consignee"		, "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Shipper=  		  НовыйЭлементContent("Shipper"			, "Новый_Shipper"				  , Конструкторы, ПолноеИмя);
			Content.TransferInfo=  	  НовыйЭлементContent("TransferInfo"	, "Новый_TransferInfo"			  , Конструкторы, ПолноеИмя);
			Content.InvoiceTable=	  НовыйЭлементContent("InvoiceTable"	, "Новый_InvoiceTable"			  , Конструкторы, ПолноеИмя);
			Content.PaymentDocuments= НовыйЭлементContent("PaymentDocuments", "Новый_PaymentDocuments"		  , Конструкторы, ПолноеИмя);
			Content.AdditionalInfoId= НовыйЭлементContent("AdditionalInfoId", "Новый_AdditionalInfoId"		  , Конструкторы, ПолноеИмя);
			Content.Signers= 		  НовыйЭлементContent("Signers"			, "Новый_ExtendedSigners"		  , Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_UTDBuyerContent(ПолноеИмя="") Экспорт 
			
			Конструкторы= Новый Соответствие;
			                          
			Content= Новый Структура("Creator, CreatorBase, OperationCode, OperationContent, AcceptanceDate, Employee, OtherIssuer, AdditionalInfoId, Signers");
			
			Content.Employee=  	 НовыйЭлементContent("Employee"   , "Новый_Employee"	   , Конструкторы, ПолноеИмя);
			Content.OtherIssuer= НовыйЭлементContent("OtherIssuer", "Новый_OtherIssuer"	   , Конструкторы, ПолноеИмя);
			Content.Signers= 	 НовыйЭлементContent("Signers"	  , "Новый_ExtendedSigners", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_UCDSellerContent(ПолноеИмя = "") Экспорт
			
			Конструкторы = Новый Соответствие;
			                          
			Content = Новый Структура(
			"Function, СчетФактураСсылка, Name, Date, Number, Invoices, Seller, Buyer, Signers, EventContent,
			|InvoiceCorrectionTable, Currency, ВалютаСсылка, CurrencyRate, RevisionDate, RevisionNumber,
			|AdditionalInfoId, Creator, CreatorBase, GovernmentContractInfo");
			
			Content.Invoices	= НовыйЭлементContent("Invoices", "Новый_InvoiceForCorrectionInfo", Конструкторы, ПолноеИмя);
			Content.Seller		= НовыйЭлементContent("Seller", "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Buyer		= НовыйЭлементContent("Buyer", "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			Content.Signers		= НовыйЭлементContent("Signers", "Новый_ExtendedSigners", Конструкторы, ПолноеИмя);
			
			Content.EventContent			= НовыйЭлементContent("EventContent", "Новый_EventContent", Конструкторы, ПолноеИмя);
			Content.InvoiceCorrectionTable	= НовыйЭлементContent("InvoiceCorrectionTable", "Новый_InvoiceCorrectionTable", Конструкторы, ПолноеИмя);
			Content.AdditionalInfoId		= НовыйЭлементContent("AdditionalInfoId", "Новый_AdditionalInfoId", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_UCDBuyerContent(ПолноеИмя = "") Экспорт 
			
			Конструкторы = Новый Соответствие;
			                          
			Content = Новый Структура("Creator, CreatorBase, OperationCode, OperationContent, AcceptanceDate, Employee, OtherIssuer, AdditionalInfoId, Signers");
			
			Content.Employee	= НовыйЭлементContent("Employee", "Новый_Employee", Конструкторы, ПолноеИмя);
			Content.OtherIssuer	= НовыйЭлементContent("OtherIssuer", "Новый_OtherIssuer", Конструкторы, ПолноеИмя);
			Content.Signers		= НовыйЭлементContent("Signers", "Новый_ExtendedSigners", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Конструкторы", Конструкторы);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_AddressInfo(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура(
			"IsForeign, ZipCode, RegionCode, Territory, City, Locality, Street,
			|Building, Block, Apartment, CountryCode, AddressText, AddressCode");
			
		КонецФункции
		
		Функция Новый_OrganizationInfo(ПолноеИмя="", Конструкторы= Неопределено) 
			
			Content= Новый Структура(
			"IsSoleProprietor, Name, Inn, Kpp,  Address,
			|BankAccountNumber, BankName, BankId, Phone, Fax, Okopf, Okpo");
			
			Content.Address= НовыйЭлементContent("Address", "Новый_AddressInfo", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_ExtendedOrganizationInfo(ПолноеИмя="", Конструкторы= Неопределено) Экспорт 
			
			Content= Новый Структура(
			"BoxId, Name, Inn, Kpp,  Address, FnsParticipantId, Type,
			|Okopf, Okpo, Okdp, Phone, Email, CorrespondentAccount,
			|BankAccountNumber, BankName, BankId,  Department, AdditionalInfo,
			|OrganizationOrPersonInfo, IndividualEntityRegistrationCertificate");
			
			Content.Address= НовыйЭлементContent("Address", "Новый_AddressInfo", Конструкторы, ПолноеИмя);
			
			Content.Вставить("Ссылка");
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_Shipper(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("OrganizationInfo, SameAsSeller");
			
			Content.OrganizationInfo= НовыйЭлементContent("OrganizationInfo", "Новый_ExtendedOrganizationInfo", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_ShipperOrConsigneeInfo(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("IsSoleProprietor, Name, Address, SameAsSellerOrBuyer, Ссылка");
			
			Content.Address= НовыйЭлементContent("Address", "Новый_AddressInfo", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
				
		Функция Новый_InvoiceForCorrectionInfo(ПолноеИмя = "", Конструкторы = Неопределено) Экспорт
			
			ДобавитьКонструктор("InvoiceRevisions", "Новый_InvoiceRevisionInfo", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений("InvoiceDate, InvoiceNumber, InvoiceRevisions");
			
		КонецФункции
		
		Функция Новый_InvoiceRevisionInfo(ПолноеИмя = "", Конструкторы = Неопределено) Экспорт
			
			Возврат НоваяТаблицаЗначений("RevisionDate, RevisionNumber");
			
		КонецФункции

		Функция Новый_InvoiceTable(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("TotalWithVatExcluded, Vat, Total, TotalNet, Items");
			
			Content.Items= НовыйЭлементContent("Items", "Новый_ExtendedInvoiceItems", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_Torg12Items(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат НоваяТаблицаЗначений(
			"Product, UnitCode, Quantity, Price, TaxRate, TotalWithVatExcluded,
			|Vat, Total, Feature, Sort, Article, ProductCode, UnitName, ParcelType,
			|ParcelCapacity, ParcelsQuantity, GrossQuantity, AdditionalInfo, СсылкаНаЕИ");
			
		КонецФункции
		
		Функция Новый_ExtendedInvoiceItems(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструктор("CustomDeclarations"	 , "Новый_CustomDeclarations"	  , Конструкторы, ПолноеИмя);
			ДобавитьКонструктор("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений(
			"Product, UnitCode, UnitName, Quantity, Price, Excise, TaxRate,
			|SubtotalWithVatExcluded, Vat, Subtotal, ItemMark, AdditionalProperty,
			|VendorCode, ToRelease, AccountDebit, AccountCredit, CustomDeclarations, StructedAdditionalInfos, ЕдиницаИзмеренияСсылка");
			
		КонецФункции

		Функция Новый_InvoiceCorrectionTable(ПолноеИмя = "", Конструкторы = Неопределено)
			
			Content = Новый Структура("TotalsInc, TotalsDec, Items");
			
			Content.TotalsDec	= НовыйЭлементContent("TotalsDec", "Новый_InvoiceTotalsDiff", Конструкторы, ПолноеИмя);
			Content.TotalsInc	= НовыйЭлементContent("TotalsInc", "Новый_InvoiceTotalsDiff", Конструкторы, ПолноеИмя);
			Content.Items 		= НовыйЭлементContent("Items", "Новый_ExtendedInvoiceCorrectionItems", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_ExtendedInvoiceCorrectionItems(ПолноеИмя = "", Конструкторы = Неопределено)
			
			ДобавитьКонструктор("OriginalValues" , "Новый_InvoiceItemFields", Конструкторы, ПолноеИмя);
			ДобавитьКонструктор("CorrectedValues", "Новый_InvoiceItemFields", Конструкторы, ПолноеИмя);
			
			ДобавитьКонструктор("AmountsInc", "Новый_AmountsDiff", Конструкторы, ПолноеИмя);
			ДобавитьКонструктор("AmountsDec", "Новый_AmountsDiff", Конструкторы, ПолноеИмя);
			
			ДобавитьКонструктор("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений(
			"Product, OriginalValues, CorrectedValues, AmountsInc, AmountsDec,
			|ItemAccountDebit, ItemAccountCredit, StructedAdditionalInfos");
			
		КонецФункции
		
		Функция Новый_EventContent(ПолноеИмя = "", Конструкторы = Неопределено)
			
			Content = Новый Структура("CostChangeInfo, TransferDocDetails, OperationContent, NotificationDate, CorrectionBases");
			
			Content.CorrectionBases = НовыйЭлементContent("CorrectionBases", "Новый_CorrectionBases", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_CorrectionBases(ПолноеИмя = "", Конструкторы = Неопределено) Экспорт
			
			Возврат НоваяТаблицаЗначений("BaseDocumentName, BaseDocumentNumber, BaseDocumentDate, AdditionalInfo");
			
		КонецФункции
		
		Функция Новый_TransferInfo(ПолноеИмя="", Конструкторы= Неопределено)
			
		 	Content = Новый Структура(
			"OperationInfo, OperationType, TransferDate, TransferTextInfo,
			|Carrier, Employee, OtherIssuer, CreatedThingTransferDate,
			|CreatedThingInfo, AdditionalInfoId, TransferBases, Waybills");
			
			Content.TransferBases= 	  НовыйЭлементContent("TransferBases"	, "Новый_TransferBases"				, Конструкторы, ПолноеИмя);
			Content.Waybills= 		  НовыйЭлементContent("Waybills"		, "Новый_Waybills"					, Конструкторы, ПолноеИмя);
			Content.Carrier= 		  НовыйЭлементContent("Carrier" 		, "Новый_ExtendedOrganizationInfo"	, Конструкторы, ПолноеИмя);
			Content.Employee= 		  НовыйЭлементContent("Employee"		, "Новый_Employee"					, Конструкторы, ПолноеИмя);
			Content.OtherIssuer= 	  НовыйЭлементContent("OtherIssuer"		, "Новый_OtherIssuer"				, Конструкторы, ПолноеИмя);
			Content.AdditionalInfoId= НовыйЭлементContent("AdditionalInfoId", "Новый_AdditionalInfoId"			, Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_ExtendedSigners(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			ДобавитьКонструктор("SignerDetails", "Новый_ExtendedSignerDetails", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений("BoxId, CertificateThumbprint, SignerDetails");
			
		КонецФункции
		
		Функция Новый_Official(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("JobTitle, Surname, FirstName, Patronymic");
			
		КонецФункции
		
		Функция Новый_Attorney(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("Date, Number, Issuer, IssuerAdditionalInfo, IssuerOrganizationName, Recipient, RecipientAdditionalInfo");
			
			Content.Issuer=    НовыйЭлементContent("Issuer"   , "Новый_Official", Конструкторы, ПолноеИмя);
			Content.Recipient= НовыйЭлементContent("Recipient", "Новый_Official", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_PersonalCertificate(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("BeginDate, EndDate, Inn, IsKontur, IsQualifiedElectronicSignature, IssuerName, Kpp, Name, OrganizationName, SerialNumber, Thumbprint, JobTitle");
			
		КонецФункции
		
		Функция Новый_Signature(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("Certificate, SignDate, SignatureAuthenticityDate");
			
			Content.Certificate= НовыйЭлементContent("Issuer"   , "Новый_PersonalCertificate", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_AcceptanceCertificateItems(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат НоваяТаблицаЗначений(
			"Name, Description, UnitCode, UnitName, 
			|Quantity, Price, TotalWithVatExcluded, 
			|Vat, Total, AdditionalInfo, СсылкаНаЕИ");
			
		КонецФункции	
		
		Функция Новый_InvoiceItems(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструктор("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений(
			"Product, UnitCode, ЕдиницаИзмеренияСсылка, Quantity, Price,
			|CountriesOfOrigin, СтранаПроисхожденияСсылка, CustomsDeclarationNumbers,
			|Excise, TaxRate, TotalWithVatExcluded, Vat, Total, StructedAdditionalInfos, СсылкаНаЕИ");
			
		КонецФункции
		
		Функция Новый_TransferBases(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат НоваяТаблицаЗначений("DocumentName, DocumentNumber, DocumentDate, DocumentInfo");
			
		КонецФункции
		
		Функция Новый_Waybills(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат НоваяТаблицаЗначений("DocumentNumber, DocumentDate");
			
		КонецФункции
		
		Функция Новый_AmountsDiff(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("Excise, TotalWithVatExcluded, Vat, Total");
			
		КонецФункции
		
		Функция Новый_InvoiceTotalsDiff(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("TotalWithVatExcluded, Vat, Total");
			
		КонецФункции
		
		Функция Новый_InvoiceItemFields(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("Excise, TotalWithVatExcluded, Vat, Total, Quantity, Price, UnitCode, Taxrate, ЕдиницаИзмеренияСсылка");
			
		КонецФункции
		
		Функция Новый_InvoiceCorrectionItems(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструктор("OriginalValues" , "Новый_InvoiceItemFields", Конструкторы, ПолноеИмя);
			ДобавитьКонструктор("CorrectedValues", "Новый_InvoiceItemFields", Конструкторы, ПолноеИмя);
			
			ДобавитьКонструктор("AmountsInc", "Новый_AmountsDiff", Конструкторы, ПолноеИмя);
			ДобавитьКонструктор("AmountsDec", "Новый_AmountsDiff", Конструкторы, ПолноеИмя);
			
			ДобавитьКонструктор("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений("Product, StructedAdditionalInfos, AmountsDec, AmountsInc, OriginalValues, CorrectedValues");
			
		КонецФункции
		
		Функция Новый_PaymentDocuments(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат НоваяТаблицаЗначений("Date, Number");
			
		КонецФункции
		
		Функция Новый_Torg12Commons(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("TotalGrossQuantity, TotalGrossQuantityInWords, TotalParcelsQuantity, TotalParcelsQuantityInWords, TotalQuantity, TotalQuantityInWords, TotalSum, TotalSumInWords");
			
		КонецФункции
		
		Функция Новый_Torg12Totals(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("GrossQuantity, Quantity, ParcelsQuantity, TotalWithVatExcluded, Total, Vat");
			
		КонецФункции
		
		Функция Новый_Signer(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("Surname, FirstName, Patronymic, INN, IsSoleProprietor, SoleProprietorRegistrationCertificate, JobTitle");
			
		КонецФункции

		Функция Новый_OriginalInvoices(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструкторЭлементаМассива("Новый_OriginalInvoice", Конструкторы, ПолноеИмя);
			
			Возврат Новый Массив;
			
		КонецФункции
		
		Функция Новый_OriginalInvoice(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("Date, Number, InvoiceRevisionDate, InvoiceRevisionNumber");
			
		КонецФункции
		
		Функция Новый_CustomDeclarations(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			//ДобавитьКонструкторЭлементаМассива("Новый_CustomDeclaration", Конструкторы, ПолноеИмя);
			
			Возврат НоваяТаблицаЗначений("CountryCode, DeclarationNumber, СтранаПроисхожденияСсылка");
			
		КонецФункции
		
		Функция Новый_ExtendedSignerDetails(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("Surname, FirstName, Patronymic, JobTitle, inn, RegistrationCertificate, SignerType, OrganizationName, SignerInfo, Powers, Status, PowersBase, OrganizationPowersBase"); 
			
		КонецФункции
		
		Функция Новый_AdditionalInfoId(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("InfoFileId, StructedAdditionalInfos");
			
			Content.StructedAdditionalInfos= НовыйЭлементContent("StructedAdditionalInfos", "Новый_StructedAdditionalInfos", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_StructedAdditionalInfos(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструкторЭлементаМассива("Новый_StructedAdditionalInfo", Конструкторы, ПолноеИмя);
			
			Возврат Новый Массив;
			
		КонецФункции
		
		Функция Новый_StructedAdditionalInfo(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("Key, Value");
			
		КонецФункции
		
		Функция Новый_Employee(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("EmployeePosition, EmployeeInfo, EmployeeBase, Surname, FirstName, Patronymic");
			
		КонецФункции
		
		Функция Новый_OtherIssuer(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("EmployeePosition, EmployeeInfo, OrganizationName, OrganizationBase, EmployeeBase, Surname, FirstName, Patronymic");
			
		КонецФункции
		
		Функция Новый_InvoiceTotals(ПолноеИмя="", Конструкторы= Неопределено)
			
			Возврат Новый Структура("TotalWithVatExcluded, Total, Vat");
			
		КонецФункции
		
		Функция Новый_ExtendedSignerDetailsToPost(ПолноеИмя="", Конструкторы= Неопределено) Экспорт
			
			Возврат Новый Структура("JobTitle, RegistrationCertificate, SignerType, SignerInfo, Powers, Status, PowersBase, OrganizationPowersBase");
			
		КонецФункции
		
		Функция Новый_Departments(ПолноеИмя="", Конструкторы= Неопределено)
			
			ДобавитьКонструкторЭлементаМассива("Новый_Department", Конструкторы, ПолноеИмя);
			
			Возврат Новый Массив;
			
		КонецФункции
		
		Функция Новый_Department(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("Id, Name, Abbreviation, Kpp, Subdepartments");
			
			Content.Subdepartments= НовыйЭлементContent("Subdepartments", "Новый_Departments", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_Organization(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("Id, Name, Inn, Kpp, Departments, FnsParticipantId, FnsRegistrationDate, IsTest, IsPilot");
			
			Content.Departments= НовыйЭлементContent("Departments", "Новый_Departments", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_Counteragent(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура("Id, Name, Inn, Kpp, Address, Departments, LastEventTimestampTicks, MessageFromCounteragent, Organization, IsTest, IsPilot, IsActive, IsRoaming, FnsParticipantId");
			
			Content.Address=	  НовыйЭлементContent("Address"		, "Новый_AddressInfo" , Конструкторы, ПолноеИмя);
			Content.Departments=  НовыйЭлементContent("Departments"	, "Новый_Departments" , Конструкторы, ПолноеИмя);
			Content.Organization= НовыйЭлементContent("Organization", "Новый_Organization", Конструкторы, ПолноеИмя);
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_OrganizationUser(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура;
			
			Content.Вставить("Id"  			);
			Content.Вставить("Name"			);
			Content.Вставить("Position"		);
			Content.Вставить("IsCurrentUser");
			
			Content.Вставить("Permissions", НовыйЭлементContent("Permissions", "Новый_UserPermissions", Конструкторы, ПолноеИмя));
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_UserPermissions(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура;
			
			Content.Вставить("IsAdministrator"         );
			Content.Вставить("DocumentsAccessLevel"	   );
			Content.Вставить("CanSignDocuments"        );
			Content.Вставить("CanAddResolutions"   	   );
			Content.Вставить("CanRequestResolutions"   );
			
			Content.Вставить("UserDepartment"	  , НовыйЭлементContent("UserDepartment"	 , "Новый_Department"	, Конструкторы, ПолноеИмя));
			Content.Вставить("SelectedDepartments", НовыйЭлементContent("SelectedDepartments", "Новый_Departments", Конструкторы, ПолноеИмя));
			
			Возврат Content;
			
		КонецФункции
		
		Функция Новый_User(ПолноеИмя="", Конструкторы= Неопределено)
			
			Content= Новый Структура;
			
			Content.Вставить("Id"     	 );
			Content.Вставить("LastName"  );
			Content.Вставить("FirstName" );
			Content.Вставить("MiddleName");
			
			Возврат Content;
			
		КонецФункции
		
	//}ФУНКЦИИ, ВОЗВРАЩАЮЩИЕ ПУСТЫЕ СТРУКТУРЫ ДЛЯ ИНИЦИАЛИЗАЦИИ КОНТЕНТА
	
	//{ВАЛИДАЦИЯ xmlTorg12Content
		
		Функция ПроверитьФорматДатыПрото(ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение = Ложь)  
			Если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) Тогда 
				Возврат  "<p>не указана "+ПредставлениеПоля+"</p>
				|"
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеПоля) = тип("Дата") Тогда 
				Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') Тогда 
					Возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") Тогда 	
				ДатаГод = прав(ЗначениеПоля, 4);
				Если (ДатаГод <"1800") или (ДатаГод >"2099") Тогда 
					Возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
				КонецЕсли;
			КонецЕсли;
			
			Возврат ""
		КонецФункции
		
		Функция ПроверитьМаксимальнуюДлинуПрото(ЗначениеПоля, ПредставлениеПоля, МаксимальнаяДлина, род="м", ОбязательноеЗаполнение = Ложь)
			Если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) Тогда 
				Если род = "ж" Тогда 
					глагол = "указана"
				ИначеЕсли род="с" Тогда 
					глагол = "указано"
				Иначе 
					глагол = "указан"
				КонецЕсли;
				Возврат  "<p>не "+глагол+" "+ПредставлениеПоля+"</p>
				|"
			КонецЕсли;
			
			Если род = "ж" Тогда 
				глагол = "должна"
			ИначеЕсли род="с" Тогда 
				глагол = "должно"
			Иначе 
				глагол = "должен"
			КонецЕсли;	
			
			Если стрДлина(сокрЛП(ЗначениеПоля))>МаксимальнаяДлина Тогда 
				Возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") не "+глагол+" быть длиннее "+МаксимальнаяДлина+" символов</p>"
			иначе 
				Возврат ""
			КонецЕсли;	
		КонецФункции
		
		Функция СтруктураКонтентаЗаполнена(СтруктураКонтента)
			
			естьЗаполненноеПоле = Ложь;
			Для каждого Элемент из  СтруктураКонтента цикл 
				Если ТипЗнч(Элемент.значение) = тип("Структура") Тогда
					естьЗаполненноеПоле = естьЗаполненноеПоле или  СтруктураКонтентаЗаполнена(Элемент.значение)
				Иначе 
					естьЗаполненноеПоле = естьЗаполненноеПоле или  (ЗначениеЗаполнено(Элемент.значение) и (Элемент.значение<> Ложь)) 
				КонецЕсли;
			КонецЦикла;	
			
			Возврат  естьЗаполненноеПоле
			
		КонецФункции 	
		
		Функция ДиадокТолькоЦифры(строкаПроверки)
			ПослеЗамены = стрЗаменить(строкаПроверки, "1", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "2", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "3", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "4", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "5", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "6", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "7", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "8", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "9", "");
			ПослеЗамены = стрЗаменить(ПослеЗамены 	, "0", "");
			
			Возврат (послеЗамены = "");
			
		КонецФункции
		
		Функция УмножитьВектора(ИНН, Множители)
			Результат = 0;
			н=0;
			пока найти(Множители, ":")>0 цикл 
				н = н+1;
				Множитель = число(лев(Множители, найти(Множители, ":")-1));
				Множители = прав(Множители, СтрДлина(Множители)- найти(Множители, ":"));
				
				Результат = Результат + Множитель * число(сред(ИНН, н, 1));
			КонецЦикла;	
			
			Возврат Результат;
			
		КонецФункции
		
		Функция КонтрольнаяСуммаИННЮЛСовпадает(ИНН)
			КС_Диадок = умножитьВектора(ИНН, "2:4:10:3:5:9:4:6:8:");
			Возврат ((КС_Диадок % 11) % 10)=число(сред(ИНН, 10, 1))
		КонецФункции
		
		Функция КонтрольнаяСуммаИННФЛСовпадает(ИНН)
			КС1_Диадок = УмножитьВектора(ИНН, "7:2:4:10:3:5:9:4:6:8:");
			КС2_Диадок = УмножитьВектора(ИНН, "3:7:2:4:10:3:5:9:4:6:8:");
			Возврат  (((КС1_Диадок % 11) % 10)=число(сред(ИНН, 11, 1))) и (((КС2_Диадок % 11) % 10)=число(сред(ИНН, 12, 1)))
		КонецФункции
		
		Функция  КонтрольнаяСуммаОКПОСовпадает(ОКПО)
			Возврат Истина;
			Если стрДлина(ОКПО)=10 Тогда 
				КС1_Диадок = УмножитьВектора(ОКПО, "1:2:3:4:5:6:7:8:9:");
				КС2_Диадок = УмножитьВектора(ОКПО, "3:4:5:6:7:8:9:10:1:");
			иначе 
				КС1_Диадок = УмножитьВектора(ОКПО, "1:2:3:4:5:6:7:");
				КС2_Диадок = УмножитьВектора(ОКПО, "3:4:5:6:7:8:9:");
			КонецЕсли;	
			
			Если КС1_Диадок%11=10 Тогда 
				Если КС2_Диадок%11=10 Тогда 
					КС_Диадок = 0;
				Иначе 
					КС_Диадок=КС2_Диадок%11
				КонецЕсли;	
			Иначе 
				КС_Диадок = КС1_Диадок%11
			КонецЕсли;	
			
			Возврат (КС_Диадок = число(прав(ОКПО, 1)))
			
		КонецФункции 	
		
		Функция ПроверитьСтруктуруАдреса(Address, ПроверкаДляСФ=Ложь, ЭтоУПД = Ложь) Экспорт 

			ТекстОшибкиАдрес = "";
			Если СтруктураКонтентаЗаполнена(Address) Тогда 
				Если Address.IsForeign = Ложь Тогда 
					ZipCode  = Address.ZipCode;
					Если ЗначениеЗаполнено( ZipCode) = Ложь Тогда 
					ИначеЕсли СтрДлина(сокрЛП(ZipCode))<>6 Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен иметь длину 6 цифр</p>
						|";		
					ИначеЕсли  ДиадокТолькоЦифры(сокрЛП(ZipCode)) = Ложь Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Индекс ("+ZipCode+") должен состоять из цифр</p>
						|";	
					КонецЕсли; 
					
					Region  =Address.RegionCode;
					Если ЗначениеЗаполнено(Region)=Ложь Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>В адресе не указан регион по классификатору</p>
						|";		
					ИначеЕсли Region = "##" Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Наименование региона указано не по классификатору</p>
						|";		
					ИначеЕсли (стрДлина(Region)>2)  или (стрДлина(Region)=0) Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен иметь длину 2 символа</p>
						|";		
					ИначеЕсли ДиадокТолькоЦифры(Region)=Ложь Тогда 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код региона должен состоять из цифр</p>
						|";		
					КонецЕсли;	
					
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Territory,"наименование района", 50, "с");
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.City,"наименование города", 50, "с");
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Locality,"наименование населенного пункта", 50, "с");
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Street,"наименование улицы", 50, "с");
					
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Building, 	"номер дома", 20);
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Block, 	"номер корпуса", 20);
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(Address.Apartment, "номер квартиры", 20);
										
				ИначеЕсли СтруктураКонтентаЗаполнена(Address) Тогда 
					Country  = Address.CountryCode;
					AddressName  = Address.AddressText;
					
					Если ЗначениеЗаполнено(Country) Тогда 
						Если стрДлина(Country)<>3 Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен иметь длину 3 символа</p>
							|";		
						ИначеЕсли ДиадокТолькоЦифры(Country)=Ложь Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Код страны должен состоять из цифр</p>
							|";
						ИначеЕсли Country = "643" и Не РазрешитьНеструктурированныеАдреса И Не ЭтоУПД Тогда
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Российский адрес задан как иностранный</p>
							|";
						КонецЕсли;	
						
						Если ЗначениеЗаполнено(AddressName) = Ложь  Тогда 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Не указан адрес внутри страны</p>
							|";	
						Иначе 
							ТекстОшибкиАдрес = ТекстОшибкиАдрес +ПроверитьМаксимальнуюДлинуПрото(AddressName,"строковое представление адреса", 255, "с");
						КонецЕсли;	
					Иначе 
						ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>Адрес должен быть указан как ""Российский адрес""</p>
						|";	
					КонецЕсли;	
				Иначе 
					ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>необходимо заполнить адрес по КЛАДР</p>"
				КонецЕсли;	
			Иначе
				ТекстОшибкиАдрес = ТекстОшибкиАдрес +"<p>отсутствуют сведения об адресе</p>"
			КонецЕсли;	
			
			Возврат  ТекстОшибкиАдрес
		КонецФункции	
		
		Функция ПроверитьСтруктуруКонтрагентаДляТОРГ12(OrganizationInfo, ТипСтруктуры, ПроверкаДляСФ=Ложь)
			//ТипСтруктуры =1 : юридический адрес
			//ТипСтруктуры =2 : фактический адрес
			
			списокОшибок = "";
			
			//проверяем наименование
			Если ЗначениеЗаполнено(OrganizationInfo.Name)=Ложь Тогда 
				СписокОшибок = СписокОшибок +"<p>не указано название организации</p>";
			ИначеЕсли (OrganizationInfo.IsSoleProprietor=Истина) и (найти(OrganizationInfo.Name, " ")=0) Тогда 
				СписокОшибок = СписокОшибок +"<p>не указано имя индивудуального предпринимателя</p>";
			Иначе 
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Name,"наименование контрагента", 1000, "с");
			КонецЕсли; 
			
			Если не(ПроверкаДляСФ и (типСтруктуры=2) ) Тогда 
				//проверяем ИНН
				Если ЗначениеЗаполнено(OrganizationInfo.Inn) Тогда 
					ИНН = OrganizationInfo.Inn;
					Если OrganizationInfo.IsSoleProprietor=Ложь Тогда 
						//ЮЛ
						Если стрДлина(ИНН)<>10 Тогда 
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен иметь длину 10 цифр</p>
							|";		
						ИначеЕсли ДиадокТолькоЦифры(ИНН) = Ложь Тогда
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2)="00"	Тогда 
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
							|";	
						ИначеЕсли  КонтрольнаяСуммаИННЮЛСовпадает(ИНН)  =Ложь Тогда
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
							|";	
						КонецЕсли;	
					Иначе
						//ФЛ
						Если стрДлина(ИНН)<>12 Тогда 
							списокОшибок = списокОшибок +"<p>ИНН контрагента-индивидуального предпринимателя ("+ИНН+") должен иметь длину 12 цифр</p>
							|";		
						ИначеЕсли ДиадокТолькоЦифры(ИНН) = Ложь Тогда
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2)="00"	Тогда 
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") не должен начинаться с двух нулей</p>
							|";	
						ИначеЕсли  КонтрольнаяСуммаИННФЛСовпадает(ИНН)  =Ложь Тогда
							списокОшибок = списокОшибок +"<p>ИНН контрагента ("+ИНН+") неверный (не совпадает контрольная сумма)</p>
							|";	
						КонецЕсли;	
					КонецЕсли;
				ИначеЕсли ТипСтруктуры = 1 Тогда 
					списокОшибок = списокОшибок +"<p>ИНН контрагента не указан</p>";
					
				КонецЕсли;	
				
				//проверяем КПП
				Если ЗначениеЗаполнено(OrganizationInfo.Kpp) Тогда 
					КПП = OrganizationInfo.Kpp;
					Если стрДлина(КПП)<>9 Тогда 
						списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен иметь длину 9 цифр</p>
						|";		
					ИначеЕсли ДиадокТолькоЦифры(КПП) = Ложь Тогда
						списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") должен состоять из цифр</p>
						|";	
					ИначеЕсли лев(ИНН, 2)="00"	Тогда 
						списокОшибок = списокОшибок +"<p>КПП контрагента ("+КПП+") не должен начинаться с двух нулей</p>
						|";	
					КонецЕсли;
				ИначеЕсли OrganizationInfo.IsSoleProprietor=Ложь
					И ПроверкаДляСФ Тогда
					списокОшибок = списокОшибок +"<p>КПП контрагента не указано</p>";
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибкиАдрес = ПроверитьСтруктуруАдреса(OrganizationInfo.Address, ПроверкаДляСФ);

			Если ТекстОшибкиАдрес <> "" Тогда 
				списокОшибок = списокОшибок + "<p><b>Ошибки в "+?(ТипСтруктуры=1, "юридическом", "фактическом")+" адресе:</b></p>"+ТекстОшибкиАдрес;
			КонецЕсли; 
			
			Если ПроверкаДляСФ=Ложь Тогда
				//проверяем ОКОПФ
				Если ЗначениеЗаполнено(OrganizationInfo.Okopf) Тогда 
					ОКОПФ = OrganizationInfo.Okopf;
					Если стрДлина(ОКОПФ)<>2 Тогда 
						списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
						|";		
					ИначеЕсли ДиадокТолькоЦифры(ОКОПФ) = Ложь Тогда
						списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
						|";	
					КонецЕсли;
				КонецЕсли;
				
				//проверяем ОКПО
				Если ЗначениеЗаполнено(OrganizationInfo.Okpo) Тогда 
					ОКПО = OrganizationInfo.Okpo;
					Если стрДлина(ОКПО)<>8 и стрДлина(ОКПО)<>10 Тогда 
						списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен иметь длину 8 или 10 цифр</p>
						|";		
					ИначеЕсли ДиадокТолькоЦифры(ОКПО) = Ложь Тогда
						списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") должен состоять из цифр</p>
						|";	
						//ИначеЕсли  КонтрольнаяСуммаОКПОСовпадает(ОКПО)  =Ложь Тогда
						//		списокОшибок = списокОшибок +"<p>ОКПО контрагента ("+ОКПО+") неверный (не совпадает контрольная сумма)</p>
						//		|";	
					КонецЕсли;		
				КонецЕсли;
				
				//проверяем ОКДП
				//Если ЗначениеЗаполнено(OrganizationInfo.Okdp) Тогда 
				//	списокОшибок = списокОшибок +ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Okdp, "ОКДП контрагента", 7);
				// КонецЕсли;
				
				//проверяем Телефон
				Если ЗначениеЗаполнено(OrganizationInfo.Phone) Тогда 
					ОшибкиТелефона = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Phone, "Номер телефона контрагента", 20);
					Если ОшибкиТелефона <>"" Тогда 
						списокОшибок = списокОшибок +  ОшибкиТелефона +"<p>Для передачи через "+НаименованиеСистемы+"части строки поставьте разделитель «;» </p>";
					КонецЕсли;
				КонецЕсли;
				
				//проверяем факс
				Если ЗначениеЗаполнено(OrganizationInfo.Fax) Тогда 
					ОшибкиФакса = ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Fax, "Номер факса контрагента", 20);
					Если ОшибкиФакса <>"" Тогда 
						списокОшибок = списокОшибок +  ОшибкиФакса +"<p>Для передачи через "+НаименованиеСистемы+" части строки поставьте разделитель «;» </p>";
					КонецЕсли;
				КонецЕсли;
				
				//проверяем БИК Бманка 
				Если ЗначениеЗаполнено(OrganizationInfo.BankId) Тогда 
					BankId = OrganizationInfo.BankId;
					Если стрДлина(BankId)<>9 Тогда 
						списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен иметь длину 9 цифр</p>
						|";		
					ИначеЕсли ДиадокТолькоЦифры(BankId) = Ложь Тогда
						списокОшибок = списокОшибок +"<p>БИК банка контрагента ("+BankId+") должен состоять из цифр</p>
						|";	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Возврат СписокОшибок;
		КонецФункции	
		
		Функция ВалидацияXmlTorg12Content(XmlTorg12Content) Экспорт
			
			СписокОшибок= "";
			
			Если ЗначениеЗаполнено(XmlTorg12Content.Date) = Ложь Тогда 
				СписокОшибок= СписокОшибок + "<p>Не указана дата документа</p>";
			Иначе 
				СписокОшибок= СписокОшибок + ПроверитьФорматДатыПрото(XmlTorg12Content.Date, "дата документа");
			КонецЕсли;
			
			СписокОшибок= СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(XmlTorg12Content.Number, "номер документа", 256);
			
			Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Seller) Тогда 
				
				ОшибкиКонтрагента= ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Seller, 1);
				Если ОшибкиКонтрагента <> "" Тогда
					Поставщик= XmlTorg12Content.Seller.Ссылка;
					СписокОшибок= СписокОшибок + "<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
												 |"+ ОшибкиКонтрагента;
				КонецЕсли;	
				
				Если Не ЗапущенКакВнешнийМодуль Тогда
					
					ПараметрыПодписания= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыПодписанияТ12вДиадок(XmlTorg12Content.Seller.Ссылка);
					Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
						
						СписокОшибок= СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
						СписокОшибок= СписокОшибок + "<p>Отсутствует ФИО подписанта</p>";
						СписокОшибок= СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						
					КонецЕсли;
					
					Если  НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта)
						И НЕ ПараметрыПодписания.СпособПодписания = "2" Тогда
						
						СписокОшибок= СписокОшибок + "<p>Отсутствует должность подписанта</p>";
						СписокОшибок= СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА"">настройки сотрудника Диадока</a> и заполните должность</p>";
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				СписокОшибок= СписокОшибок + "<p>Отсутствуют данные о поставщике</p>";
			КонецЕсли;		
			
			Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Shipper) Тогда 
				ОшибкиКонтрагента= ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Shipper, 2);
				Если ОшибкиКонтрагента <> "" Тогда
					Грузоотправитель= XmlTorg12Content.Shipper.Ссылка;
					СписокОшибок= СписокОшибок + "<h3>Ошибки в данных о <a href="""+?(типЗнч(Грузоотправитель)=тип("СправочникСсылка.Контрагенты"), "КОНТРАГЕНТ:", "ОРГАНИЗАЦИЯ:")+Грузоотправитель.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
												 |"+ ОшибкиКонтрагента;
				КонецЕсли;	
			КонецЕсли;		
			
			Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Buyer) Тогда 
				ОшибкиКонтрагента= ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Buyer, 1);
				Если ОшибкиКонтрагента <> "" Тогда
					Покупатель= XmlTorg12Content.Buyer.Ссылка;
					СписокОшибок= СписокОшибок + "<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Покупатель.УникальныйИдентификатор()+""">покупателе</a></h3>
												 |"+ ОшибкиКонтрагента;
				КонецЕсли;	
			КонецЕсли;		
			
			Если СтруктураКонтентаЗаполнена(XmlTorg12Content.Consignee) Тогда 
				ОшибкиКонтрагента= ПроверитьСтруктуруКонтрагентаДляТОРГ12(XmlTorg12Content.Consignee, 2);
				Если ОшибкиКонтрагента <> "" Тогда
					Грузополучатель= XmlTorg12Content.Consignee.Ссылка;
					СписокОшибок= СписокОшибок + "<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+Грузополучатель.УникальныйИдентификатор()+""">грузополучателе</a></h3>
												 |"+ ОшибкиКонтрагента;
				КонецЕсли;	
			КонецЕсли;		
			
			//основание 
			Если ЗначениеЗаполнено( XmlTorg12Content.GroundDate) Тогда 
				СписокОшибок= СписокОшибок + ПроверитьФорматДатыПрото( XmlTorg12Content.GroundDate, "дата договора");
			КонецЕсли;
			
			Если XmlTorg12Content.Items.Количество() = 0 Тогда
				СписокОшибок= СписокОшибок +"<p>отсутствует табличная часть документа</p>"
			Иначе 
				СписокОшибокВКлассификаторах= "";
				ц= 0;
				ОшибкаЕИНеНайдена= 		Ложь;
				ОшибкаЕИНеТотКод= 		Ложь;
				
				Для каждого Item из XmlTorg12Content.Items Цикл 
					
					ОшибкиВСтроке= "";
					ц= ц+1;
					Если ЗначениеЗаполнено(Item.Product) = Ложь Тогда
						ОшибкиВСтроке= ОшибкиВСтроке + "<p>не указано наименование товара</p>";
					КонецЕсли;	  
					Если ЗначениеЗаполнено(Item.UnitName) = Ложь Тогда
						ОшибкиВСтроке= ОшибкиВСтроке + "<p>не указано наименование единицы измерения товара</p>";
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(Item.UnitCode) Тогда 
						
						// валидацию ЕИ проводим при заполнении контента XmlTorg12
												
						Если 	СтрДлина(СокрЛП(Item.UnitCode)) < 3 
							ИЛИ СтрДлина(СокрЛП(Item.UnitCode)) > 4 Тогда 
							
							ОшибкиВСтроке= ОшибкиВСтроке + "<p>Код единицы измерения ("+СокрЛП(Item.UnitCode)+") должен иметь длину 3-4 символа</p>";
						КонецЕсли;
						
					КонецЕсли;	  
					
					Если ЗначениеЗаполнено(Item.Quantity) И Item.Quantity < 0 Тогда 
						ОшибкиВСтроке = ОшибкиВСтроке + 
						"<p>Количество не может быть отрицательным</p>
						|";
					КонецЕсли;	
					Если ЗначениеЗаполнено(Item.Quantity) = Ложь Тогда
						ОшибкиВСтроке= ОшибкиВСтроке + "<p>не указано количество товара</p>";
					КонецЕсли;	  
					Если ЗначениеЗаполнено(Item.TaxRate) = Ложь Тогда
						//ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана ставка налога</p>"
					ИначеЕсли Item.TaxRate = "##" Тогда 
						ОшибкиВСтроке= ОшибкиВСтроке + "<p>указана недопустимая ставка налога</p>";
					КонецЕсли;	  
					Если ЗначениеЗаполнено(Item.Total) = Ложь Тогда
						//ОшибкиВСтроке = ОшибкиВСтроке  + "<p>не указана общая сумма по строке</p>"
					КонецЕсли;	  
					
					Если ОшибкиВСтроке <> "" Тогда 
						СписокОшибок= СписокОшибок + "<h3>Ошибки в строке " + ц + " табличной части</h3>
													 |"+ОшибкиВСтроке;
					КонецЕсли;	
					
				КонецЦикла;
				
				Если СписокОшибокВКлассификаторах <> "" Тогда 
					СписокОшибок= СписокОшибок + 
						"<h3>Ошибки в классификаторах: </h3> 			
						|<p>"+СписокОшибокВКлассификаторах+"</p>
						|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите " + СтрокаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод) + " единиц в соответствие с классификатором</p>";
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				
				Если  НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyAllowedBy)
					И НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.ChiefAccountant)
					И НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyPerformedBy) Тогда
					
					СписокОшибок= СписокОшибок + "<p>Не указано ни одного лица, подписавшего документ. Заполните ответственных лиц организации: руководителя или главного бухгалтера. </p>";
				КонецЕсли;
				
			КонецЕсли;
			
			Если СписокОшибок <> "" Тогда 
				СписокОшибок= "
					|<head>
				
					|<style type=""text/css"">
					| h3 {
					|  margin-top: 0.5em; /* Отступ сверху */
					|  margin-bottom: 0em; /* Отступ снизу */
					| }
					| p {
					|  margin-top: 0.2em; /* Отступ сверху */
					|  margin-bottom: 0em; /* Отступ снизу */
					| }
					|</style>
					|</head>
					|<body>
					|<h2>При формировании файла накладной обнаружены следующие ошибки</h2>" + СписокОшибок + "
					|</body>";
							
			КонецЕсли;	
			
			Возврат СписокОшибок;
			
		КонецФункции	
		
	//}ВАЛИДАЦИЯ xmlTorg12Content
	
	//{РАБОТА С xmlTorg12Content
		
		Функция ПолучитьXmlTorg12Content(ДокСсылка, НомерЗаказа="", ДопСведения, ПараметрыОтправкиНаСогласование=Неопределено) Экспорт

			XmlTorg12Content = 	Новый_Torg12SellerContent();
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентXmlTorg12(XmlTorg12Content, ДокССылка, НомерЗаказа,ДопСведения, ПараметрыОтправкиНаСогласование) ;

			Возврат XmlTorg12Content;
		КонецФункции
		
		Функция ЗаполнитьКонтентДляXmlTorg12(Content, ДокументСсылка, НомерЗаказа, ДопСведения, ПараметрыОтправкиНаСогласование) Экспорт 
			
			СтруктураДокумента 	= ПолучитьXmlTorg12Content(ДокументСсылка, НомерЗаказа, ДопСведения, ПараметрыОтправкиНаСогласование);
			СписокОшибок 		= ВалидацияXmlTorg12Content(СтруктураДокумента);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли; 
			
			ЗаполнитьContentПоСтруктуре(Content, СтруктураДокумента, "XmlTorg12Content");
						
		КонецФункции	
		
	//}РАБОТА С xmlTorg12Content
	
	//{ВАЛИДАЦИЯ xmlAcceptanceCertificateContent
		
		Функция ВалидацияXmlAcceptanceCertificateContent(xmlAcceptanceCertificateContent) Экспорт
			списокОшибок = "";
			
			Если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Date)=Ложь  Тогда 
				СписокОшибок = списокОшибок +  "<p>Не указана дата документа</p>";
			иначе 
				СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(xmlAcceptanceCertificateContent.Date, "дата документа");
			КонецЕсли;
			
			СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Number, "номер документа", 256);
			
			Если ЗначениеЗаполнено(xmlAcceptanceCertificateContent.Title)=Ложь  Тогда 
				СписокОшибок = списокОшибок +  "<p>Не указан заголовок документа</p>";
			иначе 
				СписокОшибок = СписокОшибок +  ПроверитьМаксимальнуюДлинуПрото(xmlAcceptanceCertificateContent.Title, "заголовок документа", 2000);
			КонецЕсли;
			
			Если ( СтруктураКонтентаЗаполнена(xmlAcceptanceCertificateContent.Seller)=Ложь)  Тогда 
				СписокОшибок = СписокОшибок +  "отсутствуют данные о продавце"
			Иначе 
				ОшибкиКонтрагента = ПроверитьСтруктуруКонтрагентаДляТОРГ12(xmlAcceptanceCertificateContent.Seller, 1);
				Если ОшибкиКонтрагента <> "" Тогда
					Поставщик =  xmlAcceptanceCertificateContent.Seller.Ссылка;
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href=""ОРГАНИЗАЦИЯ:"+Поставщик.УникальныйИдентификатор()+""">поставщике</a></h3>
					|"+ ОшибкиКонтрагента;
				КонецЕсли;
				
				Если Не ЗапущенКакВнешнийМодуль Тогда
					параметрыПодписания =  ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьПараметрыПодписанияТ12вДиадок(xmlAcceptanceCertificateContent.Seller.Ссылка);
					Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
						
						СписокОшибок = СписокОшибок + "<h3>Не настроены параметры подписания документа</h3>";
						СписокОшибок = СписокОшибок + "<p>Отсутствует ФИО подписанта</p>";
						СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ"">окно настройки</a> и заполните отсутствующие поля</p>";
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта) Тогда
						
						СписокОшибок = СписокОшибок + "<p>Отсутствует должность подписанта</p>";
						СписокОшибок = СписокОшибок + "<p>Перейдите в <a href=""НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА"">настройки сотрудника Диадока</a> и заполните должность</p>";
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; 
			
			//валидируем строки 
			номерСтроки = 0;
			
			СписокОшибокВКлассификаторах = "";
			ОшибкаЕИНеНайдена = Ложь;
			ОшибкаЕИНеТотКод = Ложь;
			
			Если (xmlAcceptanceCertificateContent.Items.Количество()=0) Тогда
				СписокОшибок = СписокОшибок +"<p>отсутствует табличная часть документа</p>"
			Иначе
				
				для каждого Строка из xmlAcceptanceCertificateContent.Items	 цикл 
					НомерСтроки = НомерСтроки +1; 
					СписокОшибокСтроки = "";
					
					//Если ЗначениеЗаполнено(строка.получить("UnitName"))=Ложь Тогда 
					//	СписокОшибокСтроки = СписокОшибокСтроки +
					//	"<p>Не указано наименование единицы измерения</p>
					//	|";
					//КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.UnitCode) Тогда 
						
						// валидацию ЕИ проводим при заполнении контента XmlAcceptanceCertificate
												
						Если СтрДлина(СокрЛП(Строка.UnitCode))<3 ИЛИ СтрДлина(СокрЛП(Строка.UnitCode))>4 Тогда
							СписокОшибокСтроки = СписокОшибокСтроки  + "<p>Код единицы измерения ("+СокрЛП(Строка.UnitCode)+") должен иметь длину 3-4 символа</p>";
						КонецЕсли;	
					КонецЕсли;	
					
					//Если строка.TaxRate = "##"	  Тогда 
					//  СписокОшибокСтроки = СписокОшибокСтроки  + "<p>указана недопустимая ставка налога</p>"
					//КонецЕсли;
					//Если ЗначениеЗаполнено(строка.Price) И (строка.Price<0) Тогда 
					//	СписокОшибокСтроки = СписокОшибокСтроки + 
					//	"<p>Цена не может быть отрицательной</p>
					//	|";
					//КонецЕсли;	
					
					//Если ЗначениеЗаполнено(строка.Quantity) И (строка.Quantity<0)  Тогда 
					//	СписокОшибокСтроки = СписокОшибокСтроки + 
					//	"<p>Количество не может быть отрицательным</p>
					//	|";
					//КонецЕсли;	
					//Если ЗначениеЗаполнено(строка.TotalWithVatExcluded) И (строка.TotalWithVatExcluded<0) Тогда 
					//	СписокОшибокСтроки = СписокОшибокСтроки + 
					//	"<p>Сумма не может быть отрицательной</p>
					//	|";
					//КонецЕсли;	
					
					//Если ЗначениеЗаполнено(строка.Total)=Ложь Тогда
					//	СписокОшибокСтроки = СписокОшибокСтроки  + "<p>не указана общая сумма по строке</p>"
					//КонецЕсли;	
					
					Если СписокОшибокСтроки <> "" Тогда 
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в строке "+номерСтроки+" табличной части</h3>
						|"+СписокОшибокСтроки;
					КонецЕсли;	
				Конеццикла;	
			КонецЕсли;
			
			
			Если 	СписокОшибокВКлассификаторах <> "" Тогда 
				СписокОшибок = СписокОшибок +  "<h3>Ошибки в классификаторах: </h3> 			
				|<p>"+СписокОшибокВКлассификаторах+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
			КонецЕсли;	
			
			Если списокОшибок <> "" Тогда 
				списокОшибок = "
				|<head>
				|<style type=""text/css"">
				| h3 {
				|  margin-top: 0.5em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				| p {
				|  margin-top: 0.2em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				|</style>
				|</head>
				|<body>
				|<h2>При формировании файла акта выполненных работ обнаружены следующие ошибки</h2>"+списокОшибок+"
				|</body>";
			КонецЕсли;	
			
			
			Возврат СписокОшибок;
			
		КонецФункции	                                                         
		
	//}ВАЛИДАЦИЯ xmlAcceptanceCertificateContent
	
	//{РАБОТА С xmlAcceptanceCertificateContent
		
		Функция ПолучитьxmlAcceptanceCertificateContent(ДокСсылка, ПараметрыОтправкиНаСогласование = Неопределено, Допсведения) Экспорт
			xmlAcceptanceCertificateContent = 	Новый_AcceptanceCertificateSellerContent();
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентXmlAcceptanceCertificate(xmlAcceptanceCertificateContent, ДокССылка, ПараметрыОтправкиНаСогласование, ДопСведения) ;
			
			Возврат xmlAcceptanceCertificateContent;
			
		КонецФункции	
		
		Функция ЗаполнитьКонтентДляXmlAcceptanceCertificate(Content, ДокументСсылка, ПараметрыОтправкиНаСогласование, допСведения) Экспорт 
			
			СтруктураДокумента 	= ПолучитьxmlAcceptanceCertificateContent(ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопСведения);
			СписокОшибок 		= ВалидацияXmlAcceptanceCertificateContent(СтруктураДокумента);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда 
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли;	 
			
			ЗаполнитьContentПоСтруктуре(Content, СтруктураДокумента, "XmlAcceptanceCertificateContent");
			
		КонецФункции	
		
	//}РАБОТА С xmlAcceptanceCertificateContent
	
	//{ВАЛИДАЦИЯ InvoiceContent
	
		Функция  ПроверитьОшибкиВСтрокеСФ(item) 
			СписокОшибокСтроки = "";
			
			Если значениеЗаполнено(Item.Product)=Ложь Тогда 
				СписокОшибокСтроки = СписокОшибокСтроки +
				"<p>Не указано наименование товара</p>
				|";
			Иначе 
				СписокОшибокСтроки = СписокОшибокСтроки +ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с");
			КонецЕсли;
			
			ПроверитьОшибкиВ_UnitCode_TaxRate(СписокОшибокСтроки, item.UnitCode, item.TaxRate);
			
			Если ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) = Истина
				И ЗначениеЗаполнено(Item.CountriesOfOrigin) = Ложь Тогда
				
				СписокОшибокСтроки = СписокОшибокСтроки +
				"<p>Для номенклатуры " + """"+Item.Product+""""+" не заполнена страна происхождения товара</p>
				|";
				
			ИначеЕсли ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) = Ложь
					И ЗначениеЗаполнено(Item.CountriesOfOrigin) = Истина
					И НЕ СокрЛП(Item.CountriesOfOrigin) = "643" Тогда
					
				СписокОшибокСтроки = СписокОшибокСтроки +
				"<p>Для номенклатуры " + """"+Item.Product+""""+" не заполнен номер ГТД</p>
				|";
					
			КонецЕсли;
						
			Если (стрДлина(сокрЛП(Item.CustomsDeclarationNumbers))>29)  Тогда 
				СписокОшибокСтроки = СписокОшибокСтроки +
				"<p>Длина номера ГТД превышает максимальное органичение в 29 символов</p>
				|";
			КонецЕсли;		
			
			//Если строка.свойство("КодПроисх") и (сокрЛП(строка.кодПроисх)<>"" ) Тогда 
			//	Если стрДлина(сокрЛП(строка.кодПроисх))<>3  Тогда 
			//		СписокОшибокСтроки = СписокОшибокСтроки +
			//		"<p>Код страны происхождения товара ("+строка.кодПроисх+") должен иметь длину 3 симола</p>
			//		|";
			//	ИначеЕсли 	ДиадокТолькоЦифры(сокрЛП(строка.кодПроисх)) = Ложь Тогда 
			//		СписокОшибокСтроки = СписокОшибокСтроки +
			//		"<p>Код страны происхождения товара ("+строка.кодПроисх+") должен состоять из цифр</p>
			//		|";
			//	КонецЕсли;
			//	
			//КонецЕсли;
			
			
			Возврат СписокОшибокСтроки ;
		КонецФункции 
		
		Функция СформироватьСсылкуНаДокумент(ИдЯщика, ИдДокумента, ТекстСсылки) 
			Возврат "<a href=""КАРТОЧКА:"+ИдЯщика+":"+ИдДокумента+"""a>"+ТекстСсылки+"</a>"
		КонецФункции
		
		Функция ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка)
			
			//Если у нас есть основание в ДД- проверяем совпадение реквизитов
			//на нет - и суда нет. 
			Докоснование =  Модуль_ИнтеграцияОбщий.ПолучитьСФОснованиеДляИСФДиадок(ДокументССылка) ;
			Если ЗначениеЗаполнено(Докоснование)=Ложь Тогда
				Возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
			КонецЕсли;
			
			docId =     ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Докоснование);
			Если ЗначениеЗаполнено(DocId)=Ложь Тогда 
				Возврат ""; //"Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через Диадок"
			КонецЕсли;
			
			Organization = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
			Document =  Organization.getDocumentById(docId);
			
			ТекстОшибки = "";

			Если  НачалоДня(Document.DocumentDate)<>началоДня(InvoiceContent.date) Тогда 
				ТекстОшибки = ТекстОшибки + "
				|Дата исправляемого счета-фактуры: " +  формат(Document.DocumentDate, "ДФ=dd.MM.yyyy")+"</p>";
			КонецЕсли;
			Если  Document.DocumentNumber<>InvoiceContent.Number Тогда 
				ТекстОшибки = ТекстОшибки + "
				|Номер исправляемого счета-фактуры: " +  Document.DocumentNumber+"</p>";
			КонецЕсли;
			
			Если ТекстОшибки<>"" Тогда 
				ТекстОшибки = 
				" <h3>В исправлении неверно указаны реквизиты исправляемого"+ СформироватьСсылкуНаДокумент(Organization.Id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
			КонецЕсли;
			
			Возврат ТекстОшибки;
			
			
		КонецФункции	
		
		Функция ПроверитьКлассификаторыСФ(InvoiceContent)
			
			СписокОшибокЕИ = "";
			ОшибкаЕИНеНайдена = Ложь;
			ОшибкаЕИНеТотКод = Ложь;
			ПроверенныеЕИ = Новый Соответствие;
			
			СписокОшибокВСтранах = "";
			ОшибкаСтраныНеНайдена = Ложь;
			ОшибкаСтраныНетотКод = Ложь;
			ПроверенныеСтраны = Новый Соответствие;
			
			Для каждого item из InvoiceContent.Items цикл
				Если ЗначениеЗаполнено(Item.UnitCode) И ПроверенныеЕИ[Item.ЕдиницаИзмеренияССылка] <> Истина Тогда
					СписокОшибокЕИ = СписокОшибокЕИ + ПроверитьЕИ(Item.ЕдиницаИзмеренияССылка, СокрЛП(Item.UnitCode), ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					ПроверенныеЕИ.Вставить(Item.ЕдиницаИзмеренияССылка, Истина);
				КонецЕсли;
				Если ЗначениеЗаполнено(Item.CountriesOfOrigin) И ПроверенныеСтраны[Item.СтранаПроисхожденияССылка] <> Истина Тогда 
					СписокОшибокВСтранах = СписокОшибокВСтранах + ПроверитьСтрану(Item.СтранаПроисхожденияССылка, Item.CountriesOfOrigin, ОшибкаСтраныНеНайдена, ОшибкаСтраныНетотКод);
					ПроверенныеСтраны.Вставить(Item.СтранаПроисхожденияССылка, Истина);
				КонецЕсли;
			конецЦикла;
			
			ОшибкаВалютыНеНайдена = Ложь;
			ОшибкаВалютыНеТотКод = Ложь;	
			СписокОшибокВалюта =  ПроверитьВалюту(InvoiceContent.ВалютаСсылка, InvoiceContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
			
			Если  СписокОшибокВалюта<>"" Тогда 
				СписокОшибокВалюта = "
				//|<h3>При указании валюты документа: </h3>
				|<p>"+СписокОшибокВалюта+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
			КонецЕсли;
			
			
			Если 	СписокОшибокЕИ <> "" Тогда 
				СписокОшибокЕИ = "
				|<p>"+СписокОшибокЕИ+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
			КонецЕсли;	  
			
			Если  СписокОшибокВСтранах<>"" Тогда 
				СписокОшибокВСтранах = "
				//|<h3>При указании Страны происхождения: </h3>
				|<p>"+СписокОшибокВСтранах+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКСТРАН"">справочник стран мира</a> и приведите "+строкаЧтоМенять(ОшибкаСтраныНеНайдена, ОшибкаСтраныНетотКод)+" стран в соответствие с классификатором</p>";
			КонецЕсли;
			
			Если СписокОшибокЕИ<>""  или 	 СписокОшибокВСтранах<>""  Или  СписокОшибокВалюта<>""  Тогда 
				Возврат  "<h3>Ошибки в классификаторах: </h3> 
				|"+	СписокОшибокЕИ+СписокОшибокВСтранах+ СписокОшибокВалюта;
			Иначе 
				Возврат "";
			КонецЕсли;	
			
		КонецФункции
		
		Функция ВалидацияInvoiceContent(InvoiceContent, ДокументСсылка) Экспорт
			
			//Функция фозвращает список ошибок 
			СписокОшибок= "";
			
			Если InvoiceContent.Signer.IsSoleProprietor = Истина Тогда
				СвГосРегИП= InvoiceContent.Signer.SoleProprietorRegistrationCertificate;
				Если НЕ ЗначениеЗаполнено(СвГосРегИП) Тогда
					СписокОшибок = СписокОшибок + 
						"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации) </p>
						|
						|";
				Иначе
					Если СтрДлина(СвГосРегИП) > 128 Тогда
						СписокОшибок= СписокОшибок + "<p>Реквизиты свидетельства о регистрации должны иметь длину менее 128 символов</p>";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если InvoiceContent.items.Количество() = 0 Тогда
				СписокОшибок= СписокОшибок+ "<p>Отсутствует табличная часть документа</p>";
			КонецЕсли;
			
			//проверяем сведения об участниках сделки
			Если СтруктураКонтентаЗаполнена(InvoiceContent.seller) Тогда
				Ошибка= ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Seller, 1, Истина);
				Если Ошибка <> "" Тогда
					ТипПродавца= ?(ТипЗнч(InvoiceContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"), "КОНТРАГЕНТ:", "ОРГАНИЗАЦИЯ:");  
					СписокОшибок= СписокОшибок + 
						"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
						|"+ ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок= СписокОшибок + 
					"<p>Отсутствуют данные о продавце</p>
					|";
			КонецЕсли;	
			
			Если СтруктураКонтентаЗаполнена(InvoiceContent.Shipper) Тогда 
				Если InvoiceContent.Shipper.SameAsSellerOrBuyer = Ложь Тогда
					Ошибка= ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Shipper, 2, Истина);
					Если Ошибка <> "" Тогда
						ТипГрузоотправителя= ?(ТипЗнч(InvoiceContent.Shipper.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок= СписокОшибок + 
							"<h3>Ошибки в данных о <a href="+ТипГрузоотправителя+InvoiceContent.Shipper.Ссылка.УникальныйИдентификатор()+""">грузоотправителе</a></h3>
							|"+ Ошибка;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			Если СтруктураКонтентаЗаполнена(InvoiceContent.Buyer) Тогда
				Ошибка= ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Buyer, 1, Истина);
				Если Ошибка <> "" Тогда
					СписокОшибок= СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
						|"+ Ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок= СписокОшибок + 
					"<p>Отсутствуют данные о покупателе</p>
					|";
			КонецЕсли;	
			
			Если СтруктураКонтентаЗаполнена(InvoiceContent.Consignee) Тогда 
				Ошибка= ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceContent.Consignee, 2, Истина);
				Если ошибка <> "" Тогда
					СписокОшибок= СписокОшибок + 
						"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceContent.Consignee.Ссылка.УникальныйИдентификатор()+""">грузополучателе</a></h3>
						|"+ Ошибка;
				КонецЕсли;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(InvoiceContent.Number) = Ложь Тогда
				СписокОшибок= СписокОшибок + 
					"<p>Не указан номер счета-фактуры</p>
					|";
			Иначе  
				СписокОшибок= СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.Number, "номер счета-фактуры", 256, "м");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(InvoiceContent.date) = Ложь Тогда
				СписокОшибок= СписокОшибок + 
					"<p>Не укзана дата счета-фактуры</p>
					|";
			Иначе	
				СписокОшибок= СписокОшибок + ПроверитьФорматДатыПрото(InvoiceContent.date,"дата счета-фактуры");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) ИЛИ ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber) Тогда 
				СписокОшибок= СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(InvoiceContent.InvoiceRevisionNumber,"номер исправления счета-фактуры", 3, "м"); 
				СписокОшибок= СписокОшибок + ПроверитьФорматДатыПрото(InvoiceContent.InvoiceRevisionDate,"дата исправления счета-фактуры");
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber) = Истина
				И ДиадокТолькоЦифры(СокрЛП(InvoiceContent.InvoiceRevisionNumber)) = Ложь Тогда
				
				СписокОшибок= СписокОшибок + 
					"<p>Номер исправления счета-фактуры должен состоять из цифр</p>
					|";
			КонецЕсли;
			
			Если InvoiceContent.PaymentDocuments.Количество() > 10 Тогда
				СписокОшибок= СписокОшибок + 
					"<p>Количество платежно-расчетных документов не может быть более 10</p>
					|";	
			КонецЕсли;
				
			
			Если ЗначениеЗаполнено(InvoiceContent.Currency) = Ложь Тогда 
				СписокОшибок= СписокОшибок + 
					"<p>Не указан код валюты счета-фактуры</p>
					|";
			ИначеЕсли СтрДлина(сокрЛП(InvoiceContent.Currency)) <> 3 Тогда
				СписокОшибок= СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.Currency+") должен иметь длину 3 символа</p>
					|";
			ИначеЕсли ДиадокТолькоЦифры(сокрЛП(InvoiceContent.Currency)) = Ложь Тогда		
				СписокОшибок= СписокОшибок + 
					"<p>Код валюты счета-фактуры ("+InvoiceContent.Currency+") должен состоять из цифр</p>
					|";	
			КонецЕсли;
			
			Для каждого стр из InvoiceContent.PaymentDocuments Цикл 
				СписокОшибок= СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(стр.Number, "номер платежно-расчетного документа", 30, "м");
				СписокОшибок= СписокОшибок + ПроверитьФорматДатыПрото(стр.Date, "дата платежно-расчетного документа");
			КонецЦикла;
			
			////валидируем ТЧ
			ц= 0;
			
			Для каждого item из InvoiceContent.Items Цикл 
				ц= ц + 1;
				ОшибкиВСтроке= ПроверитьОшибкиВСтрокеСФ(item);
				Если ОшибкиВСтроке <> "" Тогда 
					СписокОшибок= СписокОшибок + 
						"<h3>Ошибки в строке "+ц+" табличной части</h3>
						|"+ОшибкиВСтроке
				КонецЕсли;	
			КонецЦикла;	
			
			СписокОшибок= СписокОшибок + ПроверитьКлассификаторыСФ(InvoiceContent);
			
			Если ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionDate) ИЛИ ЗначениеЗаполнено(InvoiceContent.InvoiceRevisionNumber) Тогда 
				СписокОшибок= СписокОшибок + ПроверитьСвязиИСФ(InvoiceContent, ДокументСсылка);
			КонецЕсли;
			
			Если СписокОшибок <> "" Тогда 
				
				СписокОшибок= "
					|<head>
				
					|<style type=""text/css"">
					| h3 {
					|  margin-top: 0.5em; /* Отступ сверху */
					|  margin-bottom: 0em; /* Отступ снизу */
					| }
					| p {
					|  margin-top: 0.2em; /* Отступ сверху */
					|  margin-bottom: 0em; /* Отступ снизу */
					| }
					|</style>
					|</head>
					|<body>
					|<h2>При формировании файла счета-фактуры обнаружены следующие ошибки</h2>"+списокОшибок+"
					|</body>";
						
			КонецЕсли;	
			
			Возврат СписокОшибок;
			
		КонецФункции
		
	//}ВАЛИДАЦИЯ InvoiceContent
	
	//{РАБОТА С Invoice
		
		Функция ПолучитьInvoiceContent(ДокСсылка, Допсведения , ПараметрыОтправкиНаСогласование=Неопределено, BoxID) Экспорт
			
			InvoiceContent= Новый_InvoiceContent();
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентInvoice(InvoiceContent, ДокССылка, ДопСведения, ПараметрыОтправкиНаСогласование, BoxID) ;
			
			Возврат InvoiceContent;
			
		КонецФункции
		
		Функция ЗаполнитьКонтентДляInvoice(Content, ДокументСсылка, ДопСведения, ПараметрыОтправкиНаСогласование, BoxID) Экспорт 
			
			СтруктураДокумента 	= ПолучитьInvoiceContent(ДокументСсылка, ДопСведения, ПараметрыОтправкиНаСогласование, BoxID);
			СписокОшибок 		= ВалидацияInvoiceContent(СтруктураДокумента, ДокументСсылка);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли;	 
			
			ЗаполнитьContentПоСтруктуре(Content, СтруктураДокумента, "InvoiceContent");
			
		КонецФункции	 
		
	//}РАБОТА С Invoice
	
	//{ВАЛИДАЦИЯ InvoiceCorrection
		
	Функция ПроверитьОшибкиВСтрокеКСФ(Item)
		
			СписокОшибокСтроки  = "";
			СписокОшибокСтроки = СписокОшибокСтроки + ПроверитьМаксимальнуюДлинуПрото(Item.Product,"наименование товара", 1000, "с", Истина);
			
			ПроверитьОшибкиВ_UnitCode_TaxRate(СписокОшибокСтроки, Item.OriginalValues.UnitCode, Item.OriginalValues.TaxRate);
			ПроверитьОшибкиВ_UnitCode_TaxRate(СписокОшибокСтроки, Item.CorrectedValues.UnitCode, Item.CorrectedValues.TaxRate);
			
			Возврат СписокОшибокСтроки;
			
		КонецФункции	
		
		Функция ПроверитьСвязиКСФ(InvoiceContent, ДокументСсылка, Маппинг) 
			
			//Если у нас есть основание в ДД- проверяем совпадение реквизитов
			//на нет - и суда нет. 
			ДокОснование =  Модуль_ИнтеграцияОбщий.ПолучитьСФОснованиеДляИСФДиадок(ДокументССылка);
			Если Не ЗначениеЗаполнено(ДокОснование) Тогда
				Возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
			КонецЕсли;
			
			docId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ДокОснование);
			Если Не ЗначениеЗаполнено(DocId) Тогда 
				Возврат ""; //  "Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через Диадок"
			КонецЕсли;
			
			Organization 	= Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
			Document 		= Organization.getDocumentById(docId);
			
			Если Не ЗначениеЗаполнено(InvoiceContent[Маппинг["RevisionDate"]]) И Не ЗначениеЗаполнено(InvoiceContent[Маппинг["RevisionNumber"]]) Тогда
				
				//это ксф
				Если Найти(Document.Type, "Correction") > 0 Тогда 
					Возврат "Корректировочный счет-фактура не может выставляться на основании другого " + СформироватьСсылкуНаДокумент(Organization.id, docId, "корректировочного счета-фактуры") + "</p>"
				КонецЕсли;
				
				Если Document.Type = "Invoice" ИЛИ Document.Type = "UniversalTransferDocument" Тогда 
					ДатаСФОриг  = Document.DocumentDate;
					НомерСФОриг = Document.DocumentNumber;
					ЕстьИсправленияОриг = Ложь;
				Иначе 	
					//смотрим реквизиты в нынешнем и предыдущем документе 
					ДатаСФОриг  = Document.OriginalDocumentDate;
					НомерСФОриг = Document.OriginalDocumentNumber;
					ЕстьИсправленияОриг = ЗначениеЗаполнено(Document.DocumentNumber);
				КонецЕсли;	
				
				OriginalInvoice = InvoiceContent[Маппинг["OriginalInvoices"]][0];
				
				ДатаСФ 	= OriginalInvoice[Маппинг["OriginalInvoicesDate"]];
				НомерСФ = OriginalInvoice[Маппинг["OriginalInvoicesNumber"]];
				
				ДатаИСФ  = Неопределено;
				НомерИСФ = Неопределено;
				
				Если Маппинг["OriginalInvoicesИсправленияСписком"] = Истина Тогда
					Если OriginalInvoice.InvoiceRevisions.Количество() > 0 Тогда
						InvoiceRevision = OriginalInvoice.InvoiceRevisions[0];
						ДатаИСФ  = InvoiceRevision[Маппинг["OriginalInvoicesRevisionDate"]];
						НомерИСФ = InvoiceRevision[Маппинг["OriginalInvoicesRevisionNumber"]];
					КонецЕсли;
				Иначе
					ДатаИСФ  = OriginalInvoice[Маппинг["OriginalInvoicesRevisionDate"]];
					НомерИСФ = OriginalInvoice[Маппинг["OriginalInvoicesRevisionNumber"]];
				КонецЕсли;
				
				ЕстьИсправления = ЗначениеЗаполнено(ДатаИСФ) ИЛИ ЗначениеЗаполнено(НомерИСФ);
								
				ТекстОшибки = "";
				Если НачалоДня(ДатаСФОриг) <> ДатаСФ Тогда 
					ТекстОшибки = ТекстОшибки + "
					|Дата корректируемого счета-фактуры: " + Формат(ДатаСФОриг,"ДФ=dd.MM.yyyy") + "</p>";
				КонецЕсли;
				
				Если СокрЛП(НомерСФОриг) <> СокрЛП(НомерСФ) Тогда 
					ТекстОшибки = ТекстОшибки + "
					|Номер корректируемого счета-фактуры: " + НомерСФОриг + "</p>";
				КонецЕсли;
				
				Если ЕстьИсправленияОриг И Не ЕстьИсправления Тогда
					
					ТекстОшибки = ТекстОшибки + "
					|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
					
				ИначеЕсли Не ЕстьИсправленияОриг И ЕстьИсправления Тогда 
					
					ТекстОшибки = ТекстОшибки + "
					|Корректируемый счет-фактура не исправлялся, что не соответствует данным, указанным в корректировочном счете-фактуре</p>";
					
				ИначеЕсли ЕстьИсправленияОриг И  ЕстьИсправления Тогда
					
					//проверим что данные исправления совпадают
					ДатаИСФОриг  = Document.DocumentDate;
					НомерИСФОриг = Document.DocumentNumber;
										
					Если ДатаИСФОриг <> ДатаИСФ Тогда 
						ТекстОшибки = ТекстОшибки + "
						|Дата исправления корректируемого счета-фактуры: " + Формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy")+"</p>";
					КонецЕсли;
					Если НомерИСФОриг <> НомерИСФ Тогда 
						ТекстОшибки = ТекстОшибки + "
						|Номер исправления корректируемого счета-фактуры: " + НомерИСФОриг+"</p>";
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда 
					ТекстОшибки = 
					"<h3>В документе неверно указаны реквизиты корректируемого" + СформироватьСсылкуНаДокумент(Organization.id, docId, " счета-фактуры") + "</h3></p>" + ТекстОшибки;
				КонецЕсли;
				
				Возврат ТекстОшибки;
			Иначе
				
				//это ИКСФ
				Если Найти(Document.Type, "Correction") = 0 Тогда 
					Возврат "Исправление корректировочного счета-фактуры может выставляться только на основании корректировочного счета-фактуры</p>"
				КонецЕсли;
				
				//смотрим реквизиты в нынешнем и предыдущем документе
				Если Document.Type = "UniversalCorrectionDocument" Тогда
					ДатаСФОриг  = Document.OriginalInvoiceDate;
					НомерСФОриг = Document.OriginalInvoiceNumber;
				Иначе
					ДатаСФОриг  = Document.OriginalDocumentDate;
					НомерСФОриг = Document.OriginalDocumentNumber;
				КонецЕсли;
				
				OriginalInvoice = InvoiceContent[Маппинг["OriginalInvoices"]][0];
								
				ДатаСФ 	= OriginalInvoice[Маппинг["OriginalInvoicesDate"]];
				НомерСФ = OriginalInvoice[Маппинг["OriginalInvoicesNumber"]];
								
				ДатаКСФОриг  = Document.DocumentDate;
				НомерКСФОриг = Document.DocumentNumber;
				
				ДатаКСФ 	 = InvoiceContent[Маппинг["Date"]];
				НомерКСФ     = InvoiceContent[Маппинг["Number"]];
				
				ЕстьИсправленияОриг = ЗначениеЗаполнено(Document.OriginalInvoiceRevisionNumber);     //поле пока не заполняется
				
				ДатаИСФ  = Неопределено;
				НомерИСФ = Неопределено;
				
				Если Маппинг["OriginalInvoicesИсправленияСписком"] = Истина Тогда
					Если OriginalInvoice.InvoiceRevisions.Количество() > 0 Тогда
						InvoiceRevision = OriginalInvoice.InvoiceRevisions[0];
						ДатаИСФ  = InvoiceRevision[Маппинг["OriginalInvoicesRevisionDate"]];
						НомерИСФ = InvoiceRevision[Маппинг["OriginalInvoicesRevisionNumber"]];
					КонецЕсли;
				Иначе
					ДатаИСФ  = OriginalInvoice[Маппинг["OriginalInvoicesRevisionDate"]];
					НомерИСФ = OriginalInvoice[Маппинг["OriginalInvoicesRevisionNumber"]];
				КонецЕсли;
				
				ЕстьИсправления = ЗначениеЗаполнено(ДатаИСФ) ИЛИ ЗначениеЗаполнено(НомерИСФ);
								
				ТекстОшибки = "";
				
				Если НачалоДня(ДатаСФОриг) <> ДатаСФ Тогда 
					ТекстОшибки = ТекстОшибки + "
					|Дата корректируемого счета-фактуры: " + Формат(ДатаСФОриг, "ДФ=dd.MM.yyyy") + "</p>";
				КонецЕсли;
				
				Если СокрЛП(НомерСФОриг) <> СокрЛП(НомерСФ) Тогда
					ТекстОшибки = ТекстОшибки + "
					|Номер корректируемого счета-фактуры: " + НомерСФОриг + "</p>";
				КонецЕсли;
				
				Если ДатаКСФОриг <> ДатаКСФ Тогда 
					ТекстОшибки = ТекстОшибки + "
					|Дата исправляемого корректировочного счета-фактуры: " + Формат(ДатаСФОриг, "ДФ=dd.MM.yyyy") + "</p>";
				КонецЕсли;
				
				Если СокрЛП(НомерКСФОриг) <> СокрЛП(НомерКСФ) Тогда 
					ТекстОшибки = ТекстОшибки + "
					|Номер исправляемого корректировочного счета-фактуры: " + НомерКСФОриг + "</p>";
				КонецЕсли;
				
				Если ЕстьИсправленияОриг И Не ЕстьИсправления Тогда
					
					ТекстОшибки = ТекстОшибки + "
					|Корректируемый счет-фактура исправлялся, о чем не указано в корректировочном счете-фактуре</p>";
					
				ИначеЕсли Не ЕстьИсправленияОриг И ЕстьИсправления Тогда 
					
					ТекстОшибки = ТекстОшибки + "
					|Корректируемый счет-фактура не исправлялся, что не соотвкетствует данным, указанным в корректировочном счете-фактуре</p>";
					
				ИначеЕсли ЕстьИсправленияОриг И ЕстьИсправления Тогда 
					
					//проверим что данные исправления совпадают
					ДатаИСФОриг  = Document.OriginalInvoiceRevisionDate;
					НомерИСФОриг = Document.OriginalInvoiceRevisionNumber;
					                    					
					Если ДатаИСФОриг <> ДатаИСФ Тогда 
						ТекстОшибки = ТекстОшибки + "
						|Дата исправления корректируемого счета-фактуры: " + Формат(ДатаИСФОриг, "ДФ=dd.MM.yyyy") + "</p>";
					КонецЕсли;
					Если НомерИСФОриг <> НомерИСФ Тогда 
						ТекстОшибки = ТекстОшибки + "
						|Номер исправления корректируемого счета-фактуры: " + НомерИСФОриг + "</p>";
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда 
					ТекстОшибки = 
					"<h3>В документе неверно указаны реквизиты исправляемого" + СформироватьСсылкуНаДокумент(Organization.id, docId, " корректировочного счета-фактуры") + "</h3></p>" + ТекстОшибки;
				КонецЕсли;
				
				Возврат ТекстОшибки;
				
			КонецЕсли;
			
		КонецФункции	
		
		Функция ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent, Items)
			
			
			СписокОшибокЕИ = "";
			ОшибкаЕИНеНайдена = Ложь;
			ОшибкаЕИНеТотКод = Ложь;
			ПроверенныеЕИ = Новый Соответствие;
			
			Для каждого item Из Items цикл 
				
				Если ЗначениеЗаполнено(Item.OriginalValues.UnitCode) И Item.OriginalValues.UnitCode <> "0000" И ПроверенныеЕИ[Item.OriginalValues.ЕдиницаИзмеренияССылка] <> Истина Тогда 
					СписокОшибокЕИ = СписокОшибокЕИ + ПроверитьЕИ(Item.OriginalValues.ЕдиницаИзмеренияССылка,СокрЛП(Item.OriginalValues.UnitCode), ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					ПроверенныеЕИ.Вставить(Item.OriginalValues.ЕдиницаИзмеренияССылка, Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Item.CorrectedValues.UnitCode) И Item.CorrectedValues.UnitCode <> "0000" И ПроверенныеЕИ[Item.CorrectedValues.ЕдиницаИзмеренияССылка] <> Истина Тогда 
					СписокОшибокЕИ = СписокОшибокЕИ + ПроверитьЕИ(Item.CorrectedValues.ЕдиницаИзмеренияССылка, СокрЛП(Item.CorrectedValues.UnitCode), ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					ПроверенныеЕИ.Вставить(Item.CorrectedValues.ЕдиницаИзмеренияССылка, Истина);
				КонецЕсли;
				
			конецЦикла;	
			
			ОшибкаВалютыНеНайдена = Ложь;
			ОшибкаВалютыНеТотКод = Ложь;	
			СписокОшибокВалюта =  ПроверитьВалюту(InvoiceCorrectionContent.ВалютаСсылка, InvoiceCorrectionContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
			
			Если  СписокОшибокВалюта<>"" Тогда 
				СписокОшибокВалюта = "
				//|<h3>При указании валюты документа: </h3>
				|<p>"+СписокОшибокВалюта+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
			КонецЕсли;
			
			
			Если 	СписокОшибокЕИ <> "" Тогда 
				СписокОшибокЕИ = "
				|<p>"+СписокОшибокЕИ+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
			КонецЕсли;	  
			
			Если СписокОшибокЕИ<>""  или 	СписокОшибокВалюта<>""  Тогда 
				Возврат  "<h3>Ошибки в классификаторах: </h3> 
				|"+	СписокОшибокЕИ+ СписокОшибокВалюта;
			Иначе 
				Возврат "";
			КонецЕсли;	
			
		КонецФункции
		
		Функция ВалидацияInvoiceCorrectionContent(InvoiceCorrectionContent, ДокументСсылка) Экспорт
			
			СписокОшибок = "";
			
			Если InvoiceCorrectionContent.Signer.IsSoleProprietor = Истина Тогда
				СвГосРегИП = InvoiceCorrectionContent.Signer.SoleProprietorRegistrationCertificate;
				Если НЕ ЗначениеЗаполнено(СвГосРегИП) Тогда
					СписокОшибок = СписокОшибок + 
					"<p>Не указаны данные о государственной регистрации продавца-индивидуального предпринимателя
						|(номер и дата свидетельства о госрегистрации) </p>
						|
						|";
				Иначе
					Если СтрДлина(СвГосРегИП) > 128 Тогда
						СписокОшибок = СписокОшибок + 
						"<p>Реквизиты свидетельства о регистрации должны иметь длину менее 128 символов</p>";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если InvoiceCorrectionContent.items.Количество()=0 Тогда
				СписокОшибок = СписокОшибок+ "<p>Нет строк, по которым происходит корректировка суммовых или количественных показателей</p> ";
			КонецЕсли;
			
			
			//проверяем сведения об участниках сделки
			Если  СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.seller ) Тогда 
				ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Seller, 1, Истина);
				Если ошибка <> "" Тогда
					ТипПродавца =?(ТипЗнч(InvoiceCorrectionContent.seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href="+ТипПродавца+InvoiceCorrectionContent.seller.Ссылка.УникальныйИдентификатор()+""">продавце</a></h3>
					|"+ ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок = СписокОшибок + 
				"<p>Отсутствуют данные о продавце</p>
				|";
			КонецЕсли;	
			
			Если     СтруктураКонтентаЗаполнена(InvoiceCorrectionContent.Buyer) Тогда 
				ошибка = ПроверитьСтруктуруКонтрагентаДляТОРГ12(InvoiceCorrectionContent.Buyer, 1, Истина);
				Если ошибка <> "" Тогда
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:"+InvoiceCorrectionContent.Buyer.Ссылка.УникальныйИдентификатор()+""">покупателе</a></h3>
					|"+ ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок = СписокОшибок + 
				"<p>Отсутствуют данные о покупателе</p>
				|";
			КонецЕсли;
			
			OriginalInvoice = InvoiceCorrectionContent.OriginalInvoices[0];
						
			СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionNumber,"номер корректировочного счета-фактуры", 256, "м", Истина);
			СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionDate, "дата корректировочного счета-фактуры", Истина);
			СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.Number, "номер счета-фактуры", 256, "м", Истина);
			СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(OriginalInvoice.Date, "дата счета-фактуры", Истина);
			
			
			Если ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber) или ЗначениеЗаполнено(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate) Тогда 
				СписокОшибок = СписокОшибок +ПроверитьМаксимальнуюДлинуПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionNumber,"номер исправления корректировочного счета-фактуры", 3, "м", Истина);		
				СписокОшибок = СписокОшибок +ПроверитьФорматДатыПрото(InvoiceCorrectionContent.InvoiceCorrectionRevisionDate,"дата исправления корректировочного счета-фактуры", Истина);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber)=Истина 
				или ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionDate)=Истина Тогда 
				
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(OriginalInvoice.InvoiceRevisionNumber, "номер исправления счета-фактуры", 3, "м", Истина);		
				СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(OriginalInvoice.InvoiceRevisionDate, "дата исправления счета-фактуры", Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(OriginalInvoice.InvoiceRevisionNumber)=Истина
				И ДиадокТолькоЦифры(СокрЛП(OriginalInvoice.InvoiceRevisionNumber))=Ложь Тогда
				
				СписокОшибок = СписокОшибок + 
				"<p>Номер исправления счета-фактуры должен состоять из цифр</p>
				|";
			КонецЕсли;
						
			Если ЗначениеЗаполнено(InvoiceCorrectionContent.Currency)=Ложь  Тогда 
				СписокОшибок = СписокОшибок + 
				"<p>Не указан код валюты счета-фактуры</p>
				|";
			ИначеЕсли СтрДлина(сокрЛП(InvoiceCorrectionContent.Currency))<>3 Тогда
				СписокОшибок = СписокОшибок + 
				"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен иметь длину 3 символа</p>
				|";
			ИначеЕсли ДиадокТолькоЦифры(сокрЛП(InvoiceCorrectionContent.Currency))=Ложь Тогда		
				СписокОшибок = СписокОшибок + 
				"<p>Код валюты счета-фактуры ("+InvoiceCorrectionContent.СвСчФакт.КодОКВ+") должен состоять из цифр</p>
				|";	
			КонецЕсли;
			
			ц = 0 ;
			Для каждого item из InvoiceCorrectionContent.items цикл 
				ц = ц+1;
				ОшибкиВСтроке = ПроверитьОшибкиВСтрокеКСФ(Item);
				Если ОшибкиВСтроке <> "" Тогда 
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в строке "+ц+" табличной части</h3>
					|"+ОшибкиВСтроке
				КонецЕсли;	
				
			Конеццикла;
			
			СписокОшибок = СписокОшибок + ПроверитьКлассификаторыКСФ(InvoiceCorrectionContent, InvoiceCorrectionContent.items);	
			
			Если Не ЗапущенКакВнешнийМодуль Тогда
				
				Маппинг = Новый Соответствие;
				Маппинг.Вставить("Date", 								"InvoiceCorrectionDate");
				Маппинг.Вставить("Number", 								"InvoiceCorrectionNumber");
				Маппинг.Вставить("RevisionDate", 						"InvoiceCorrectionRevisionDate");
				Маппинг.Вставить("RevisionNumber", 						"InvoiceCorrectionRevisionNumber");
				Маппинг.Вставить("OriginalInvoices", 					"OriginalInvoices");
				Маппинг.Вставить("OriginalInvoicesDate", 				"Date");
				Маппинг.Вставить("OriginalInvoicesNumber", 				"Number");
				Маппинг.Вставить("OriginalInvoicesИсправленияСписком", 	Ложь);
				Маппинг.Вставить("OriginalInvoicesRevisionDate", 		"InvoiceRevisionDate");
				Маппинг.Вставить("OriginalInvoicesRevisionNumber",		"InvoiceRevisionNumber");
				
				СписокОшибок = СписокОшибок + ПроверитьСвязиКСФ(InvoiceCorrectionContent, ДокументСсылка, Маппинг); 
				
			КонецЕсли;
			
			Если списокОшибок <> "" Тогда 
				списокОшибок = "
				|<head>
				
				|<style type=""text/css"">
				| h3 {
				|  margin-top: 0.5em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				| p {
				|  margin-top: 0.2em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				|</style>
				|</head>
				|<body>
				|<h2>При формировании файла счета-фактуры обнаружены следующие ошибки</h2>"+списокОшибок+"
				|</body>";
				
				
			КонецЕсли;	
			
			Возврат СписокОшибок;
			
			
		КонецФункции	
		
	//}ВАЛИДАЦИЯ InvoiceCorrection
	
	//{РАБОТА С InvoiceCorrection
		
		Функция ПолучитьInvoiceCorrectionContent(ДокСсылка, ПараметрыОтправкиНаСогласование = Неопределено, ДопСведения) Экспорт
			InvoiceCorrectionContent = 	Новый_InvoiceCorrectionContent();
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентInvoiceCorrection(InvoiceCorrectionContent, ДокССылка, ПараметрыОтправкиНаСогласование, ДопСведения) ;
			Возврат InvoiceCorrectionContent;
		КонецФункции
		
		Функция ЗаполнитьКонтентДляInvoiceCorrection(Content, ДокументСсылка, ДопСведения, ПараметрыОтправкиНаСогласование) Экспорт 
			
			СтруктураДокумента 	= ПолучитьInvoiceCorrectionContent(ДокументСсылка, ПараметрыОтправкиНаСогласование, Допсведения);
			СписокОшибок 		=  ВалидацияInvoiceCorrectionContent(СтруктураДокумента, ДокументСсылка);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли;	 
			
			ЗаполнитьContentПоСтруктуре(Content, СтруктураДокумента, "InvoiceCorrectionContent");
			
		КонецФункции	
		
		Функция Разобрать_AdditionalInfo(AdditionalInfo)
			
			СтруктураДопПолей=    Новый Структура("head, top, bottom, ground");
			
			НашлиТег=    Ложь;
			
			Для каждого ДопПоле Из СтруктураДопПолей Цикл
				
				ОткрывающийТег= "<" + ДопПоле.Ключ + ">";
				ЗакрывающийТег=	"</" + ДопПоле.Ключ + ">";
				
				Если НЕ Найти(AdditionalInfo, ОткрывающийТег) = 0
					И НЕ Найти(AdditionalInfo, ЗакрывающийТег) = 0 Тогда
					
					НачалоДопПоля=    Найти(ВРег(AdditionalInfo), ВРег(ОткрывающийТег)) + СтрДлина(ОткрывающийТег);
					
					ТекстДопПоля=    Сред(AdditionalInfo, НачалоДопПоля, СтрДлина(AdditionalInfo));
					
					ТекстДопПоля= 	Сред(ТекстДопПоля, 0, Найти(ТекстДопПоля, "</") - 1);
					СтруктураДопПолей.Вставить(ДопПоле.Ключ, СокрЛП(ТекстДопПоля));
					
					НашлиТег=    	Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ НашлиТег И ЗначениеЗаполнено(AdditionalInfo) Тогда
				СтруктураДопПолей.Вставить("top", СокрЛП(AdditionalInfo));
			КонецЕсли;
			
			Возврат СтруктураДопПолей;
			
		КонецФункции
		
	//}РАБОТА С InvoiceCorrection
	
	//{ВАЛИДАЦИЯ UTD
	
	   	Функция ПроверитьСтруктуруКонтрагентаДляУПД(OrganizationInfo, ТипСтруктуры)
			//ТипСтруктуры =1 : юридический адрес
			//ТипСтруктуры =2 : фактический адрес
			
			списокОшибок = "";
			
			//проверяем наименование
			Если Не ЗначениеЗаполнено(OrganizationInfo.Name) Тогда 
				СписокОшибок = СписокОшибок + "<p>не указано название организации</p>";
			ИначеЕсли OrganizationInfo.Type = "IndividualEntity"  и (найти(OrganizationInfo.Name, " ") = 0) Тогда 
				СписокОшибок = СписокОшибок + "<p>не указано имя индивудуального предпринимателя</p>";
			Иначе 
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(OrganizationInfo.Name, "наименование контрагента", 1000, "с");
			КонецЕсли; 
			
			Если ТипСтруктуры = 1 Тогда 
				//проверяем ИНН
				Если ЗначениеЗаполнено(OrganizationInfo.Inn) Тогда 
					ИНН = OrganizationInfo.Inn;
					Если OrganizationInfo.Type = "LegalEntity" Тогда 
						//ЮЛ
						Если стрДлина(ИНН) <> 10 Тогда 
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен иметь длину 10 цифр</p>
							|";		
						ИначеЕсли Не ДиадокТолькоЦифры(ИНН) Тогда
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2)="00"	Тогда 
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") не должен начинаться с двух нулей</p>
							|";	
						ИначеЕсли Не КонтрольнаяСуммаИННЮЛСовпадает(ИНН) Тогда
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") неверный (не совпадает контрольная сумма)</p>
							|";	
						КонецЕсли;	
					ИначеЕсли OrganizationInfo.Type = "IndividualEntity" Тогда
						//ИП
						Если стрДлина(ИНН) <> 12 Тогда 
							списокОшибок = списокОшибок + "<p>ИНН контрагента-индивидуального предпринимателя (" + ИНН + ") должен иметь длину 12 цифр</p>
							|";		
						ИначеЕсли Не ДиадокТолькоЦифры(ИНН) Тогда
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") должен состоять из цифр</p>
							|";	
						ИначеЕсли лев(ИНН, 2) = "00" Тогда 
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") не должен начинаться с двух нулей</p>
							|";	
						ИначеЕсли Не КонтрольнаяСуммаИННФЛСовпадает(ИНН) Тогда
							списокОшибок = списокОшибок + "<p>ИНН контрагента (" + ИНН + ") неверный (не совпадает контрольная сумма)</p>
							|";	
						КонецЕсли;	
					КонецЕсли;
				Иначе 
					списокОшибок = списокОшибок + "<p>ИНН контрагента не указан</p>";
				КонецЕсли;	
				
				//проверяем КПП
				Если ЗначениеЗаполнено(OrganizationInfo.Kpp) Тогда 
					КПП = OrganizationInfo.Kpp;
					Если стрДлина(КПП) <> 9 Тогда 
						списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") должен иметь длину 9 цифр</p>
						|";		
					ИначеЕсли Не ДиадокТолькоЦифры(КПП) Тогда
						списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") должен состоять из цифр</p>
						|";	
					ИначеЕсли лев(КПП, 2)="00"	Тогда 
						списокОшибок = списокОшибок + "<p>КПП контрагента (" + КПП + ") не должен начинаться с двух нулей</p>
						|";	
					КонецЕсли;
				ИначеЕсли OrganizationInfo.Type = "LegalEntity" Тогда
					списокОшибок = списокОшибок + "<p>КПП контрагента не указано</p>";
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибкиАдрес = ПроверитьСтруктуруАдреса(OrganizationInfo.Address, Истина, Истина);

			Если ТекстОшибкиАдрес <> "" Тогда 
				списокОшибок = списокОшибок + "<p><b>Ошибки в " + ?(ТипСтруктуры = 1, "юридическом", "фактическом") + " адресе:</b></p>" + ТекстОшибкиАдрес;
			КонецЕсли; 
			
			//проверяем ОКОПФ
			Если ЗначениеЗаполнено(OrganizationInfo.Okopf) Тогда 
				ОКОПФ = OrganizationInfo.Okopf;
				Если стрДлина(ОКОПФ)<>2 Тогда 
					списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен иметь длину 2 цифры</p>
					|";		
				ИначеЕсли ДиадокТолькоЦифры(ОКОПФ) = Ложь Тогда
					списокОшибок = списокОшибок +"<p>ОКОПФ контрагента ("+ОКОПФ+") должен состоять из цифр</p>
					|";	
				КонецЕсли;
			КонецЕсли;

			Возврат СписокОшибок;
			
		КонецФункции	

		Функция ПроверитьСвязиИУПД(UTDContent, ДокументСсылка) 
			
			//Если у нас есть основание в ДД- проверяем совпадение реквизитов
			//на нет - и суда нет. 
			Докоснование =  Модуль_ИнтеграцияОбщий.ПолучитьСФОснованиеДляИСФДиадок(ДокументССылка);
			Если ЗначениеЗаполнено(Докоснование)=Ложь Тогда
				Возврат ""; // "Отстутствует счет-фактура, который должен являться основанием данного документа.";
			КонецЕсли;
			
			docId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Докоснование);
			Если ЗначениеЗаполнено(DocId)=Ложь Тогда 
				Возврат ""; //"Первоначальный документ <a href=""СЧЕТФАКТУРАВЫДАННЫЙ:"+Докоснование.УникальныйИдентификатор()+"""a>"+ДокОснование+"</a> не передавался через Диадок"
			КонецЕсли;
			
			Organization = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(ДокументСсылка.Организация);
			Document = Organization.getDocumentById(docId);
			
			ТекстОшибки = "";

			Если НачалоДня(Document.DocumentDate) <> началоДня(UTDContent.date) Тогда 
				ТекстОшибки = ТекстОшибки + "
				|Дата исправляемого счета-фактуры: " + формат(Document.DocumentDate, "ДФ=dd.MM.yyyy")+"</p>";
			КонецЕсли;
			Если Document.DocumentNumber <> UTDContent.Number Тогда 
				ТекстОшибки = ТекстОшибки + "
				|Номер исправляемого счета-фактуры: " + Document.DocumentNumber + "</p>";
			КонецЕсли;
			
			Если ТекстОшибки<>"" Тогда 
				ТекстОшибки = 
				" <h3>В исправлении неверно указаны реквизиты исправляемого" + СформироватьСсылкуНаДокумент(Organization.Id, docId, " счета-фактуры")+"</h3></p>" +ТекстОшибки;
			КонецЕсли;
			
			Возврат ТекстОшибки;
			
			
		КонецФункции	
		
		Процедура ПроверитьОшибкиВ_UnitCode_TaxRate(СписокОшибок, UnitCode, TaxRate)
			
			Если ЗначениеЗаполнено(UnitCode) Тогда 
				
				ДлинаСтрUnitCode = СтрДлина(СокрЛП(UnitCode));
				
				Если ДлинаСтрUnitCode < 3 ИЛИ ДлинаСтрUnitCode > 4 Тогда 
					СписокОшибок = СписокОшибок +
								   "<p>Код единицы измерения (" + UnitCode + ") должен иметь длину 3-4 символа</p>"
								   + Символы.ПС;
				ИначеЕсли Не ДиадокТолькоЦифры(СокрЛП(UnitCode)) Тогда 
					СписокОшибок = СписокОшибок +
								   "<p>Код единицы измерения (" + UnitCode + ") должен состоять из цифр</p>"
								   + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			Если TaxRate = "##"	Тогда 
				СписокОшибок = СписокОшибок + "<p>указана недопустимая ставка налога</p>"
			КонецЕсли;
			
			Если TaxRate = "20/120" Тогда 
				СписокОшибок = СписокОшибок + "<p>Указана недопустимая ставка НДС</p>" + Символы.ПС;
			ИначеЕсли Не ЗначениеЗаполнено(TaxRate) Тогда 
				СписокОшибок = СписокОшибок + "<p>Ставка НДС не указана</p>" + Символы.ПС;
			КонецЕсли;
			
		КонецПроцедуры
		
		Функция ПроверитьОшибкиВСтрокеУПД(item) 

			СписокОшибокСтроки = "";
			
			Если Не ЗначениеЗаполнено(Item.Product) Тогда 
				СписокОшибокСтроки = СписокОшибокСтроки +
				"<p>Не указано наименование товара</p>
				|";
			Иначе 
				СписокОшибокСтроки = СписокОшибокСтроки + ПроверитьМаксимальнуюДлинуПрото(Item.Product, "наименование товара", 1000, "с");
			КонецЕсли;
			
			ПроверитьОшибкиВ_UnitCode_TaxRate(СписокОшибокСтроки, item.UnitCode, item.TaxRate);
			
			Если item.CustomDeclarations <> Неопределено Тогда
				
				Для Каждого CustomsDeclaration Из item.CustomDeclarations Цикл 
			
					Если ЗначениеЗаполнено(CustomsDeclaration.DeclarationNumber)
						И Не ЗначениеЗаполнено(CustomsDeclaration.CountryCode) Тогда
						
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для номенклатуры " + """" + Item.Product + """" + " не заполнена страна происхождения товара</p>
						|";
						
					ИначеЕсли Не ЗначениеЗаполнено(CustomsDeclaration.DeclarationNumber)
							И ЗначениеЗаполнено(CustomsDeclaration.CountryCode)
							И СокрЛП(CustomsDeclaration.CountryCode) <> "643" Тогда
							
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Для номенклатуры " + """" + Item.Product + """" + " не заполнен номер ГТД</p>
						|";
							
					КонецЕсли;
								
					Если (стрДлина(сокрЛП(CustomsDeclaration.DeclarationNumber))>29)  Тогда 
						СписокОшибокСтроки = СписокОшибокСтроки +
						"<p>Длина номера ГТД превышает максимальное органичение в 29 символов</p>
						|";
					КонецЕсли;		
					
				КонецЦикла;
				
			КонецЕсли;
			
			Возврат СписокОшибокСтроки;
			
		КонецФункции 
		
		Функция ПроверитьКлассификаторыУПД(InvoiceContent)			
			
			СписокОшибокЕИ = "";
			ОшибкаЕИНеНайдена = Ложь;
			ОшибкаЕИНеТотКод = Ложь;
			ПроверенныеЕИ = Новый Соответствие;
			
			СписокОшибокВСтранах = "";
			ОшибкаСтраныНеНайдена = Ложь;
			ОшибкаСтраныНетотКод = Ложь;
			ПроверенныеСтраны = Новый Соответствие;

			Для каждого item из InvoiceContent.InvoiceTable.Items цикл
				Если ЗначениеЗаполнено(Item.UnitCode) И Item.UnitCode <> "0000" И ПроверенныеЕИ[Item.ЕдиницаИзмеренияССылка] <> Истина Тогда
					СписокОшибокЕИ = СписокОшибокЕИ + ПроверитьЕИ(Item.ЕдиницаИзмеренияССылка, СокрЛП(Item.UnitCode), ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод);
					ПроверенныеЕИ.Вставить(Item.ЕдиницаИзмеренияССылка, Истина);
				КонецЕсли;
				Если item.CustomDeclarations <> Неопределено Тогда
					Для Каждого CustomsDeclaration Из item.CustomDeclarations Цикл 
						Если ЗначениеЗаполнено(CustomsDeclaration.CountryCode) И ПроверенныеСтраны[CustomsDeclaration.СтранаПроисхожденияССылка] <> Истина Тогда 
							СписокОшибокВСтранах = СписокОшибокВСтранах + ПроверитьСтрану(CustomsDeclaration.СтранаПроисхожденияССылка, CustomsDeclaration.CountryCode, ОшибкаСтраныНеНайдена, ОшибкаСтраныНетотКод);
							ПроверенныеСтраны.Вставить(CustomsDeclaration.СтранаПроисхожденияССылка, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ОшибкаВалютыНеНайдена = Ложь;
			ОшибкаВалютыНеТотКод = Ложь;	
			СписокОшибокВалюта =  ПроверитьВалюту(InvoiceContent.ВалютаСсылка, InvoiceContent.Currency, ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод);
			
			Если СписокОшибокВалюта <> "" Тогда 
				СписокОшибокВалюта = "
				//|<h3>При указании валюты документа: </h3>
				|<p>"+СписокОшибокВалюта+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКВАЛЮТ"">справочник валют</a> и приведите "+строкаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)+" валют в соответствие с классификатором</p>";
			КонецЕсли;
			
			
			Если СписокОшибокЕИ <> "" Тогда 
				СписокОшибокЕИ = "
				|<p>"+СписокОшибокЕИ+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКЕДИНИЦ"">справочник единиц измерения</a> и приведите "+строкаЧтоМенять(ОшибкаЕИНеНайдена, ОшибкаЕИНеТотКод)+" единиц в соответствие с классификатором</p>";
			КонецЕсли;	  
			
			Если СписокОшибокВСтранах <> "" Тогда 
				СписокОшибокВСтранах = "
				//|<h3>При указании Страны происхождения: </h3>
				|<p>"+СписокОшибокВСтранах+"</p>
				|<p>Перейдите в <a href=""СПРАВОЧНИКСТРАН"">справочник стран мира</a> и приведите "+строкаЧтоМенять(ОшибкаСтраныНеНайдена, ОшибкаСтраныНетотКод)+" стран в соответствие с классификатором</p>";
			КонецЕсли;
			
			Если СписокОшибокЕИ <> "" или СписокОшибокВСтранах <> "" Или СписокОшибокВалюта <> "" Тогда 
				Возврат  "<h3>Ошибки в классификаторах: </h3> 
				|" + СписокОшибокЕИ+СписокОшибокВСтранах + СписокОшибокВалюта;
			Иначе 
				Возврат "";
			КонецЕсли;	
			
		КонецФункции
		
		Процедура ПроверитьОшибкиВШапкеУПД_УКД(СписокОшибок, Content)
			
			Если Не ЗначениеЗаполнено(Content.Number) Тогда
				СписокОшибок = СписокОшибок + 
				"<p>Не указан номер счета-фактуры</p>
				|";
			Иначе  
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(Content.Number, "номер счета-фактуры", 256, "м");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Content.Date) Тогда
				СписокОшибок = СписокОшибок + 
				"<p>Не укзана дата счета-фактуры</p>
				|";
			Иначе	
				СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(Content.Date, "дата счета-фактуры");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Content.RevisionDate) или  значениеЗаполнено(Content.RevisionNumber) Тогда 
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(Content.RevisionNumber, "номер исправления счета-фактуры", 3, "м"); 
				СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(Content.RevisionDate, "дата исправления счета-фактуры");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Content.RevisionNumber)
			  И Не ДиадокТолькоЦифры(СокрЛП(Content.RevisionNumber)) Тогда
				СписокОшибок = СписокОшибок + 
				"<p>Номер исправления счета-фактуры должен состоять из цифр</p>
				|";
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(Content.Currency) Тогда 
				СписокОшибок = СписокОшибок + 
				"<p>Не указан код валюты счета-фактуры</p>
				|";
			ИначеЕсли СтрДлина(сокрЛП(Content.Currency)) <> 3 Тогда
				СписокОшибок = СписокОшибок + 
				"<p>Код валюты счета-фактуры (" + Content.Currency + ") должен иметь длину 3 символа</p>
				|";
			ИначеЕсли Не ДиадокТолькоЦифры(сокрЛП(Content.Currency)) Тогда		
				СписокОшибок = СписокОшибок + 
				"<p>Код валюты счета-фактуры (" + Content.Currency + ") должен состоять из цифр</p>
				|";	
			КонецЕсли;
			
			//проверяем сведения об участниках сделки
			Если  СтруктураКонтентаЗаполнена(Content.Seller) Тогда
				Ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(Content.Seller, 1);
				Если Ошибка <> "" Тогда
					ТипПродавца  = ?(ТипЗнч(Content.Seller.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href=" + ТипПродавца + Content.Seller.Ссылка.УникальныйИдентификатор() + """>продавце</a></h3>
					|" + Ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок = СписокОшибок + 
				"<p>Отсутствуют данные о продавце</p>
				|";
			КонецЕсли;

			Если  СтруктураКонтентаЗаполнена(Content.Buyer) Тогда
				Ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(Content.Buyer, 1);
				Если Ошибка <> "" Тогда
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:" + Content.Buyer.Ссылка.УникальныйИдентификатор() + """>покупателе</a></h3>
					|" + Ошибка;
				КонецЕсли;	
			Иначе 
				СписокОшибок = СписокОшибок + 
				"<p>Отсутствуют данные о покупателе</p>
				|";
			КонецЕсли;	
			
			
		КонецПроцедуры
		
		Функция ВалидацияUTD(UTDContent, ДокументСсылка) Экспорт
			
			//Функция возвращает список ошибок 
			списокОшибок = "";
			
			Если UTDContent.InvoiceTable.Items.Количество() = 0 Тогда
				СписокОшибок = СписокОшибок+ "<p>Отсутствует табличная часть документа</p> ";
			КонецЕсли;
			
			ПроверитьОшибкиВШапкеУПД_УКД(СписокОшибок, UTDContent);
			
			Если  СтруктураКонтентаЗаполнена(UTDContent.Shipper.OrganizationInfo) Тогда 
				Если Не UTDContent.Shipper.SameAsSeller Тогда
					ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Shipper.OrganizationInfo, 2);
					Если ошибка <> "" Тогда
						ТипГрузоотправителя = ?(ТипЗнч(UTDContent.Shipper.OrganizationInfo.Ссылка) = Тип("СправочникСсылка.Контрагенты"),"КОНТРАГЕНТ:","ОРГАНИЗАЦИЯ:");  
						СписокОшибок = СписокОшибок + 
						"<h3>Ошибки в данных о <a href=" + ТипГрузоотправителя + UTDContent.Shipper.OrganizationInfo.Ссылка.УникальныйИдентификатор() + """>грузоотправителе</a></h3>
						|" + ошибка;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			
			Если  СтруктураКонтентаЗаполнена(UTDContent.Consignee) Тогда 
				ошибка = ПроверитьСтруктуруКонтрагентаДляУПД(UTDContent.Consignee, 2);
				Если ошибка <> "" Тогда
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в данных о <a href=""КОНТРАГЕНТ:" + UTDContent.Consignee.Ссылка.УникальныйИдентификатор() + """>грузополучателе</a></h3>
					|" + ошибка;
				КонецЕсли;	
			КонецЕсли;
			
			Для каждого стр из UTDContent.PaymentDocuments цикл 
				СписокОшибок = СписокОшибок + ПроверитьМаксимальнуюДлинуПрото(стр.Number, "номер платежно-расчетного документа", 30, "м");
				СписокОшибок = СписокОшибок + ПроверитьФорматДатыПрото(стр.Date, "дата платежно-расчетного документа");
			КонецЦикла;
			
			//валидируем ТЧ
			ц = 0;
			Для каждого item из UTDContent.InvoiceTable.Items цикл 
				ц = ц+1;
				ОшибкиВСтроке = ПроверитьОшибкиВСтрокеУПД(item);
				Если ОшибкиВСтроке <> "" Тогда 
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в строке "+ц+" табличной части</h3>
					|"+ОшибкиВСтроке
				КонецЕсли;	
			конецЦикла;	
			
			СписокОшибок = СписокОшибок + ПроверитьКлассификаторыУПД(UTDContent);
			
			Если (значениеЗаполнено(UTDContent.RevisionDate) или значениеЗаполнено(UTDContent.RevisionNumber))
			  И UTDContent.свойство("СчетФактураСсылка") И ЗначениеЗаполнено(UTDContent.СчетФактураСсылка) Тогда
				списокОшибок = СписокОшибок +  ПроверитьСвязиИУПД(UTDContent, UTDContent.СчетФактураСсылка) 
			КонецЕсли;
			
			Если списокОшибок <> "" Тогда 
				списокОшибок = "
				|<head>
				
				|<style type=""text/css"">
				| h3 {
				|  margin-top: 0.5em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				| p {
				|  margin-top: 0.2em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				|</style>
				|</head>
				|<body>
				|<h2>При формировании файла счета-фактуры обнаружены следующие ошибки</h2>"+списокОшибок+"
				|</body>";
				
				
			КонецЕсли;	
			
			Возврат СписокОшибок;
			
		КонецФункции

	//}ВАЛИДАЦИЯ UTD
	
	//{РАБОТА С УПД
	
		Функция ПолучитьUTDSellerContent(ДокументСсылка, ДопПараметры) Экспорт

			UTDSellerContent= Новый_UTDSellerContent();
			
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентUTDSellerContent(UTDSellerContent, ДокументСсылка, ДопПараметры);

			Возврат UTDSellerContent;
			
		КонецФункции
		
		Функция ЗаполнитьКонтентДляXmlUTD(Content, ДокументСсылка, ДопПараметры) Экспорт 
			
			UTDSellerContent= ПолучитьUTDSellerContent(ДокументСсылка, ДопПараметры);
			
			СписокОшибок 	 = ВалидацияUTD(UTDSellerContent, ДокументСсылка);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли; 
			
			ЗаполнитьContentПоСтруктуре(Content, UTDSellerContent, "XmlUTDContent");
			
		КонецФункции	
		
	//}РАБОТА С УПД
	
	//{ВАЛИДАЦИЯ UCD
	
		Функция ВалидацияUCD(UCDContent, ДокументСсылка) Экспорт
			
			СписокОшибок = "";
			
			Если UCDContent.InvoiceCorrectionTable.Items.Количество() = 0 Тогда
				СписокОшибок = СписокОшибок+ "<p>Нет строк, по которым происходит корректировка суммовых или количественных показателей</p> ";
			КонецЕсли;
			
			ПроверитьОшибкиВШапкеУПД_УКД(СписокОшибок, UCDContent);
			
			//валидируем ТЧ
			ц = 0;
			Для Каждого item Из UCDContent.InvoiceCorrectionTable.Items Цикл 
				ц = ц+1;
				ОшибкиВСтроке = ПроверитьОшибкиВСтрокеКСФ(Item);
				Если ОшибкиВСтроке <> "" Тогда 
					СписокОшибок = СписокОшибок + 
					"<h3>Ошибки в строке " + ц + " табличной части</h3>
					|" + ОшибкиВСтроке;        
				КонецЕсли;	
				
			КонецЦикла;
	
			СписокОшибок = СписокОшибок + ПроверитьКлассификаторыКСФ(UCDContent, UCDContent.InvoiceCorrectionTable.Items);
			
			Если Не ЗапущенКакВнешнийМодуль И UCDContent.Function <> "Basic" Тогда
				
				Маппинг = Новый Соответствие;
				Маппинг.Вставить("Date", 								"Date");
				Маппинг.Вставить("Number", 								"Number");
				Маппинг.Вставить("RevisionDate", 						"RevisionDate");
				Маппинг.Вставить("RevisionNumber", 						"RevisionNumber");
				Маппинг.Вставить("OriginalInvoices", 					"Invoices");
				Маппинг.Вставить("OriginalInvoicesDate", 				"InvoiceDate");
				Маппинг.Вставить("OriginalInvoicesNumber", 				"InvoiceNumber");
				Маппинг.Вставить("OriginalInvoicesИсправленияСписком", 	Истина);
				Маппинг.Вставить("OriginalInvoicesRevisionDate", 		"RevisionDate");
				Маппинг.Вставить("OriginalInvoicesRevisionNumber",		"RevisionNumber");
				
				СписокОшибок = СписокОшибок + ПроверитьСвязиКСФ(UCDContent, ДокументСсылка, Маппинг); 
				
			КонецЕсли;
			
			Если СписокОшибок <> "" Тогда
				
				СписокОшибок = "
				|<head>
				|<style type=""text/css"">
				| h3 {
				|  margin-top: 0.5em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				| p {
				|  margin-top: 0.2em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				|</style>
				|</head>
				|<body>
				|<h2>При формировании файла счета-фактуры обнаружены следующие ошибки</h2>" + СписокОшибок + "
				|</body>";
				
			КонецЕсли;	
			
			Возврат СписокОшибок;
			
		КонецФункции
		
	//}ВАЛИДАЦИЯ UCD
	
	//{РАБОТА С УКД
		
		Функция ПолучитьUCDSellerContent(ДокументСсылка, ДопПараметры, ПараметрыОтправкиНаСогласование = Неопределено) Экспорт

			UCDSellerContent = Новый_UCDSellerContent("UCDSellerContent");
			
			Модуль_ЗаполнениеКонтента.ЗаполнитьКонтентUCDSellerContent(UCDSellerContent, ДокументСсылка, ПараметрыОтправкиНаСогласование, ДопПараметры);
			
			Возврат UCDSellerContent;
			
		КонецФункции
		
		Функция ЗаполнитьКонтентДляXmlUCD(Content, ДокументСсылка, ДопПараметры) Экспорт 
			
			UCDSellerContent = ПолучитьUCDSellerContent(ДокументСсылка, ДопПараметры);
			
			СписокОшибок 	 = ВалидацияUCD(UCDSellerContent, ДокументСсылка);
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				
				СтруктураОшибки = Новый Структура("ДокументСсылка, СписокОшибок", ДокументСсылка, СписокОшибок);
				СтрокаXML = СериализоватьДанные(СтруктураОшибки);
				
				ВызватьИсключение(СтрокаXML);
    							
			КонецЕсли; 
			
			ЗаполнитьContentПоСтруктуре(Content, UCDSellerContent, "XmlUCDContent");
			
		КонецФункции	
		
	//}РАБОТА С УКД
	
//}КОНТЕНТ

ЗаполнитьТаблицуПересчета();