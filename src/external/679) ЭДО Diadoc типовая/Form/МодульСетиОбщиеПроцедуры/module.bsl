Функция ЕстьБумажныйСФ(ПНК) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПНК) Тогда
		Возврат Ложь;
	ИначеЕсли ПНК.Метаданные().Реквизиты.Найти("ПредъявленСчетФактура") <> Неопределено И ПНК.ПредъявленСчетФактура Тогда
		Возврат ПНК.ПредъявленСчетФактура;
	ИначеЕсли ПНК.Метаданные().Реквизиты.Найти("НомерСчетаФактуры") <> Неопределено Тогда
		Возврат ЗначениеЗаполнено(ПНК.НомерСчетаФактуры);
	КонецЕсли;
	
	СФ = НайтиПодходящийСчетФактуруИзРНК(ПНК);
	Если (СФ<>Неопределено) и (СФ.КодСпособаПолучения=1) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтранаПроисхожденияЗаполнена(КодСтраныПроисхождения) Экспорт
	Возврат (ЗначениеЗаполнено(КодСтраныПроисхождения) и (СокрЛП(КодСтраныПроисхождения)<>"643"));	
КонецФункции

//{ ПОИСК ДОКУМЕНТОВ
	
	Функция НайтиПодходящийСчетФактуруИзРНК(ПНК) Экспорт
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			Если ЗначениеЗаполнено(ПНК.НомерСчетаФактуры) Тогда
				Возврат ПНК;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если Метаданные.Документы.Найти("РегистрацияСчетаФактуры") <> Неопределено Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Ссылка 
			|ИЗ
			|	Документ.РегистрацияСчетаФактуры.СоставНДС
			|ГДЕ
			|	Основание = &ПНК И НЕ Ссылка.ПометкаУдаления";
		
		ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41"
			ИЛИ Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ссылка 
			|ИЗ
			|	Документ.СчетФактураПолученный
			|ГДЕ
			|	ДокументОснование = &ПНК И НЕ ПометкаУдаления";

		Иначе 
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ссылка 
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования
			|ГДЕ
			|	ДокументОснование = &ПНК И Ссылка.ПометкаУдаления";
			
		КонецЕсли;    	
		
		Запрос.УстановитьПараметр("ПНК", ПНК);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецФункции
	
//} ПОИСК ДОКУМЕНТОВ

//{ ПОЛУЧЕНИЕ НОМЕРА АКТА
	
	Функция ПолучитьНомерАктаИзСФ(ЭДОбъект) Экспорт
		
		Organization = ЭДОбъект.Organization;
		
		SubordinateDocumentIds =  ЭДОбъект.SubordinateDocumentIds;
		Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(SubordinateDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		InitialDocumentIds = ЭДОбъект.InitialDocumentIds;
		Для ц = 0 по InitialDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(InitialDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;	
		
		ВызватьИсключение("Ошибка валидации: Для Торг-12 не нашли связанную счет-фактуру"); 
		
	КонецФункции
	
	Функция ПолучитьНомерАктаПоDocument(Document, DocumentContent=Неопределено) Экспорт 
		
		Если НЕ DocumentContent=Неопределено Тогда
			Content = DocumentContent;
		Иначе
			Content = Document.GetContent();
		КонецЕсли;
		
		DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(Document, Content);
		
		Если 	DocumentType = "Invoice"
			ИЛИ DocumentType = "InvoiceRevision"
			ИЛИ DocumentType = "InvoiceCorrection"
			ИЛИ DocumentType = "InvoiceCorrectionRevision" Тогда
			
			СтрокаДопСвойств = ПолучитьСтрокуДопПолей(Content.StructedAdditionalInfos);
			
		ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда
			СтрокаДопСвойств = ПолучитьСтрокуДопПолей(Content.AdditionalInfoId.StructedAdditionalInfos);
		Иначе		
			СтрокаДопСвойств = Content.AdditionalInfo;
		КонецЕсли;
				
		НомерАкта = ПолучитьДопСвойство(СтрокаДопСвойств, "номер_акта");
		
		Возврат НомерАкта;
		
	КонецФункции
	
	Функция ПолучитьСтрокуДопПолей(StructuredAdditionalInfos)
		
		СтрокаДопСвойств = "";
		
		Для Ц=0 По StructuredAdditionalInfos.Count-1 Цикл
			
			Item = StructuredAdditionalInfos.GetItem(Ц);
			
			Если Item.Key = "_" Тогда
				СтрокаДопСвойств = СтрокаДопСвойств + Item.Value;
			Иначе
				СтрокаДопСвойств = СтрокаДопСвойств + " " + Item.Key + ":" + Item.Value + ";";
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтрокаДопСвойств;		
		
	КонецФункции
		
	Функция ПолучитьДопСвойство(СтрокаДопИнфо, НаименованиеСвойства)
		Если Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))>0 Тогда
			Результат= Сред(СтрокаДопИнфо, Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства)) + СтрДлина(НаименованиеСвойства) + 1);
			Если Лев(Результат, 1)=":" Тогда
				Результат = Прав(Результат, СтрДлина(Результат)-1);
			КонецЕсли;	
			Если Найти(Результат, ";")>0 Тогда
				Результат = Лев(Результат, Найти(Результат, ";")-1);
			КонецЕсли;
			Возврат Результат;
		Иначе 
			ВызватьИсключение("Ошибка валидации: В счете-фактуре не указан дополнительный параметр "+ НаименованиеСвойства);
		КонецЕсли;	
	КонецФункции
	
//} ПОЛУЧЕНИЕ НОМЕРА АКТА

//{ ПРОВЕРКА ПАКЕТА
	
	Функция ПолучитьIDСопоставленныйПНК(ПервичныйДокумент, СписокДокументовНаПодпись) Экспорт
		
		DocID = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(ПервичныйДокумент);
		Если ЗначениеЗаполнено(DocID) Тогда
			Возврат DocID;
		КонецЕсли;
		
		//поищем такой документ, который мы хотим подписать
		Результат = СписокДокументовНаПодпись.НайтиПоЗначению(ПервичныйДокумент);
		Если Результат<>Неопределено Тогда 
			Возврат Результат.Представление;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;	
		
	КонецФункции
	
	Функция ПолучитьМассивПодчиненныхDocument(Doc) Экспорт 
		результат = Новый массив;
		
		SubordinateDocumentIds = doc.SubordinateDocumentIds;
		Для ц=0 по SubordinateDocumentIds.count-1 Цикл 
			id = SubordinateDocumentIds.GetItem(ц);
			док =  Модуль_РаботаССерверомДиадок.ПолучитьОбъектДиадок(id, doc.organization, Новый соответствие);
			Если Док <> Неопределено Тогда 
				результат.Добавить(док)
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат результат;
	КонецФункции
	
	Функция ПолучитьМассивРодительскихDocument(Doc) Экспорт 
		результат = Новый массив;
		
		InitialDocumentIds = doc.InitialDocumentIds;
		Для ц=0 по InitialDocumentIds.count-1 Цикл 
			id = InitialDocumentIds.GetItem(ц);
			док =  Модуль_РаботаССерверомДиадок.ПолучитьОбъектДиадок(id, doc.organization, Новый соответствие);
			Если Док <> Неопределено Тогда 
				результат.Добавить(док)
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат результат;
	КонецФункции
	
//} ПРОВЕРКА ПАКЕТА
