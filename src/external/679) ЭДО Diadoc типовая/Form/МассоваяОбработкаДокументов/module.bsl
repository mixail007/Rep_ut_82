Перем ИсходнаяТаблица;
Перем СтруктураФильтровДляGetDocuments;

Перем РазмерВыгрузки;
Перем КоличествоВыгружено;
Перем ВремяОтображения;

Перем СтруктурыПодписей;

Перем ЗакрыватьФорму;

Перем СтруктураФормированияСценарияСопоставления;
Перем НаборСостоянийОбработки;

Перем НаборРежимовРаботы;
Перем СтруктураДействийПоДокументу;
Перем ПараметрыХраненияНомераАкта;

Перем ТаблицаКонтентов;

Перем ДатаСтартаПроцесса;
Перем ДатаСтартаОбработкиДокумента;
Перем ДатаСтартаОперации;
Перем ТекущаяОперация;
Перем КоличествоОбработанныхДокументов;
Перем ОбрабатываемыйДокументСсылка;
Перем ТаблицаСобытий;

Перем МассивЗадачНаОтказ;

Перем МассивЗаданийОтправкаТитулаПокупателя;
Перем МаксимальноеКоличествоЗаданий;

Перем КэшЗаголовковСтраниц;
Перем ТекущийСценарий;
Перем СтруктураСостояниеОбработки;

Перем ИдентификаторыОшибок;

// Признак для изменения AcceptanceDate в BuyerTitleInfo, при массовом подписании документов с контентом УПД 
Перем ДатаПолученияПоДатеДокумента;

Функция ПолучитьПредставлениеСценария()
	
	Если ТекущийСценарий = "Подписать" Тогда
		возврат "Подписать документы"
	ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
		возврат "Сопоставить документы"
	ИначеЕсли ТекущийСценарий = "СоздатьВ1С" Тогда
		возврат "Создать документы в 1С"
	ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
		возврат "Подписать и создать документы"
	ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" Тогда
		возврат "Сохранить документы на диск"
	ИначеЕсли ТекущийСценарий = "СопоставитьИПодписать" Тогда
		возврат "сопоставить и подписать"
	Иначе 
		возврат ""
	КонецЕсли;

КонецФункции


Процедура ПриОткрытии()
	
	ОбновитьПоложениеФлажковВПриложенииВерсии81();
	
	КартинкаЗаголовка = ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
	
	ПредставлениеСценария	= ПолучитьПредставлениеСценария();
	ЭтаФорма.Заголовок 		= "Групповая обработка входящих документов"+?(ПредставлениеСценария="", "", ". "+ПредставлениеСценария);
	
	УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельСписокПредупреждений, РежимСверткиЭлементаУправления.Лево);
	
	ВыполнитьПереключениеВкладок();
	
	ДатаПолученияПоДатеДокумента = Ложь;
				
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		СохранитьЗначение("Диадок_КаталогДляВыгрузкиФайлов", КаталогДляВыгрузки);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПоказатьПанельМассовойОбработкиВходящихДокументов(Сценарий, СтруктураТаблицыДокументов, СтруктураФильтров = Неопределено) Экспорт
		
	ТекущийСценарий = Сценарий;
	
	Если КэшЗаголовковСтраниц = Неопределено Тогда
		КэшЗаголовковСтраниц = Новый ТаблицаЗначений;
		КэшЗаголовковСтраниц.Колонки.Добавить("ИмяСтраницы");
		КэшЗаголовковСтраниц.Колонки.Добавить("ЗаголовокСтраницы");
	КонецЕсли;
	ЗаполнитьКэшЗаголовковСтраниц();
	
	ЗаполнитьСтруктуруДействийПоДокументу();
	
	Если ТаблицаВыбораДокументов.Колонки.Найти("ДокументЭДО") = Неопределено Тогда
		ТаблицаВыбораДокументов.Колонки.Добавить("ДокументЭДО");
	КонецЕсли;
	
	Если ТаблицаВыбораДокументов.Колонки.Найти("ДокументВ1С") = Неопределено Тогда
		ТаблицаВыбораДокументов.Колонки.Добавить("ДокументВ1С");
	КонецЕсли;
	
	Если НЕ СтруктураФильтров = Неопределено Тогда
		СтруктураФильтровДляGetDocuments = СтруктураФильтров;
	КонецЕсли;
				
	Если ТекущийСценарий = "Подписать" Тогда
		
		ПодготовитьТаблицуПодписать(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуОбработкаЗавершена(СтруктураТаблицыДокументов.ТаблицаПодписать);
		
	ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
		
		ПодготовитьТаблицуСопоставитьСДокументамиПоступления(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуСопоставитьСчетФактуры(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуОбработкаЗавершена(СтруктураТаблицыДокументов.ТаблицаСопоставитьДокументыПоступления);
					
	ИначеЕсли ТекущийСценарий = "СоздатьВ1С" Тогда
		
		ПодготовитьТаблицуСоздатьДокументыПоступления(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуСоздатьСчетФактуры(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуОбработкаЗавершена(СтруктураТаблицыДокументов.ТаблицаСоздатьДокументыПоступления);
					
	ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
		
		ПодготовитьТаблицуПодписать(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуСоздатьДокументыПоступления(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуСоздатьСчетФактуры(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуОбработкаЗавершена(СтруктураТаблицыДокументов.ТаблицаПодписать);
		
	ИначеЕсли ТекущийСценарий = "СопоставитьИПодписать" Тогда
		
		ПодготовитьТаблицуСопоставитьСДокументамиПоступления(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуПодписать(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуСоздатьСчетФактуры(СтруктураТаблицыДокументов);
		ПодготовитьТаблицуОбработкаЗавершена(СтруктураТаблицыДокументов.ТаблицаСопоставитьДокументыПоступления);
											
	ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" ИЛИ ТекущийСценарий = "ТорговыеСети" Тогда
		
		ПодготовитьТаблицуДокументов(СтруктураТаблицыДокументов);
		
		Если ТекущийСценарий = "ТорговыеСети" Тогда
			
			Если НаборРежимовРаботы = Неопределено Тогда
				НаборРежимовРаботы = Новый Структура;
				НаборРежимовРаботы.Вставить("АнализДанных", "Выполнить анализ");
				НаборРежимовРаботы.Вставить("ОбработкаДанных", "Выполнить");
			КонецЕсли;
			
			РежимРаботы = НаборРежимовРаботы.АнализДанных;
		
		КонецЕсли;
						
	КонецЕсли;
	
	ЭлементыФормы.ПанельОбновлениеСтатуса.Видимость = Ложь;
	НастроитьСтраницы();
					
	Открыть();
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруДействийПоДокументу()
		
	СтруктураДействийПоДокументу = Новый  Структура;
	СтруктураДействийПоДокументу.Вставить("ОшибкаОбработки", 	"Ошибка");
	СтруктураДействийПоДокументу.Вставить("ПроведитеДокумент", 	"Проведите документ");
	СтруктураДействийПоДокументу.Вставить("ЗаполнитеДанные", 	"Заполните данные");
	СтруктураДействийПоДокументу.Вставить("ВыберитеДокументПоступления", "Выберите документ поступления");
	
	СтруктураДействийПоДокументу.Вставить("УспешноСохранен", "Успешно сохранен");
	СтруктураДействийПоДокументу.Вставить("ОшибкаСохранения", "Ошибка сохранения");
	
	СтруктураДействийПоДокументу.Вставить("СопоставитьКА",		 	"Сопоставить контрагента");
	СтруктураДействийПоДокументу.Вставить("СопоставитьИПодписать", 	"Сопоставить и подписать");
	СтруктураДействийПоДокументу.Вставить("СопоставитьСФ",		 	"Сопоставить");
	СтруктураДействийПоДокументу.Вставить("СоздатьОтсутствующиеСФ", "Создать СФ и сопоставить");
	СтруктураДействийПоДокументу.Вставить("ОтказатьВПодписи", 		"Отказать в подписи");
	СтруктураДействийПоДокументу.Вставить("ЗапроситьУточнение",		"Запросить уточнение");
	СтруктураДействийПоДокументу.Вставить("Пропустить",		 		"Не обрабатывать");
			
	СтруктураДействийПоДокументу.Вставить("НайденоНесколькоПодходящихДокументов", 	"Найдено несколько документов");
	СтруктураДействийПоДокументу.Вставить("Документ1СДляСопоставленияНеНайден", 	"Документ в 1С не найден");
	СтруктураДействийПоДокументу.Вставить("ГотовКСопоставлению", 					"Готов к сопоставлению");
	СтруктураДействийПоДокументу.Вставить("НеНайденСопоставленныйДокОснование",		"Не сопоставлен док. основание");
	СтруктураДействийПоДокументу.Вставить("НеСовпадаютСуммы",						"Не совпадают суммы документа");
	СтруктураДействийПоДокументу.Вставить("ДокументНеНайден",						"Не найден");
	    			
	СтруктураДействийПоДокументу.Вставить("Обработано", 							"Обработано");
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораТипСоздаваемогоДокумента()
	
	ПрофильКонфигурации = ПолучитьПрофильКонфигурации();
	
	ЭлементыФормы.ТипСоздаваемогоДокумента.СписокВыбора.Очистить();
	
	ЭлементыФормы.ТипСоздаваемогоДокумента.СписокВыбора.Добавить("ПокупкаКомиссия", "Покупка, комиссия");
			
	Если ПрофильКонфигурации.НастройкиПоступления.ПоступлениеОборудования = Истина Тогда 
		ЭлементыФормы.ТипСоздаваемогоДокумента.СписокВыбора.Добавить("ПоступлениеОборудования", "Поступление оборудования");
	КонецЕсли;	
	
	Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияБух" Тогда
		ЭлементыФормы.ТипСоздаваемогоДокумента.СписокВыбора.Добавить("ПокупкаКомиссияАгент", "Агент(комиссионер): покупка, комиссия");
	КонецЕсли;
	
	Если ПолучитьПрофильКонфигурации().ХранениеНастроекПользователей.Вариант = "Рарус" Тогда
		ЭлементыФормы.ТипСоздаваемогоДокумента.СписокВыбора.Добавить("ПоступлениеАвтомобилей", "Поступление автомобилей");
	КонецЕсли;
					
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораСценарийСопоставленияДокументыПоступления()
	
	ЭлементыФормы.СценарийСопоставленияДокументыПоступления.СписокВыбора.Очистить();
	ЭлементыФормы.СценарийСопоставленияДокументыПоступления.СписокВыбора.Добавить("СценарийБазовыйСуммаИДата", "по Сумме и Дате вх. документа");
	ЭлементыФормы.СценарийСопоставленияДокументыПоступления.СписокВыбора.Добавить("СценарийБазовыйДатаИНомер", "по Дате и Номеру вх. документа");
	ЭлементыФормы.СценарийСопоставленияДокументыПоступления.СписокВыбора.Добавить("СценарийБазовыйСуммаИСклад", "по Сумме и Складу");	
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораСценарийСопоставленияСчетФактуры()
	
	ЭлементыФормы.СценарийСопоставленияСчетФактуры.СписокВыбора.Очистить();
	ЭлементыФормы.СценарийСопоставленияСчетФактуры.СписокВыбора.Добавить("СценарийБазовыйСуммаИДата", "по Сумме и Дате вх. документа");
	ЭлементыФормы.СценарийСопоставленияСчетФактуры.СписокВыбора.Добавить("СценарийБазовыйДатаИНомер", "по Дате и Номеру вх. документа");
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "ИзменениеДокумента1С" ИЛИ ИмяСобытия = "ОбновитьСтроку" Тогда
		
		МассивТаблицыДокументов = Новый Массив;
		
		Если ТекущийСценарий = "Подписать" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаПодписать);
			МассивТаблицыДокументов.Добавить(ТаблицаОбработкаЗавершена);
		ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаСопоставитьДокументыПоступления);
			МассивТаблицыДокументов.Добавить(ТаблицаСопоставитьСчетФактуры);
			МассивТаблицыДокументов.Добавить(ТаблицаОбработкаЗавершена);
		ИначеЕсли ТекущийСценарий = "СоздатьВ1С" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаСоздатьДокументыПоступления);
			МассивТаблицыДокументов.Добавить(ТаблицаСоздатьСчетФактуры);
			МассивТаблицыДокументов.Добавить(ТаблицаОбработкаЗавершена);
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаПодписать);
			МассивТаблицыДокументов.Добавить(ТаблицаСоздатьДокументыПоступления);
			МассивТаблицыДокументов.Добавить(ТаблицаСоздатьСчетФактуры);
			МассивТаблицыДокументов.Добавить(ТаблицаОбработкаЗавершена);
		ИначеЕсли ТекущийСценарий = "СопоставитьИПодписать" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаСопоставитьДокументыПоступления);
			МассивТаблицыДокументов.Добавить(ТаблицаПодписать);
			МассивТаблицыДокументов.Добавить(ТаблицаСоздатьСчетФактуры);
			МассивТаблицыДокументов.Добавить(ТаблицаОбработкаЗавершена);
		ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" ИЛИ ТекущийСценарий = "ТорговыеСети" Тогда
			МассивТаблицыДокументов.Добавить(ТаблицаДокументов);
		КонецЕсли;
		
		Для Каждого ТаблицаСтрокиМассива из МассивТаблицыДокументов Цикл
			ОбновитьСтрокуДокумента(Параметр, ТаблицаСтрокиМассива);	
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ОбновитьСтрокуДокумента(ЭДОбъект, ОбрабатываемаяТаблицаДокументов = Неопределено)
	
	СтОтбора = Новый Структура("BoxId, DocumentId", ЭДОбъект.OrganizationId, ЭДОбъект.DocumentId);
	
	Если ОбрабатываемаяТаблицаДокументов = Неопределено Тогда
		ОбрабатываемаяТаблицаДокументов = ТаблицаДокументов;
	КонецЕсли;
		
	Строки = ОбрабатываемаяТаблицаДокументов.НайтиСтроки(СтОтбора);
	Если Строки.Количество() > 0 Тогда
		СтрокаТабличногоПоля = Строки[0];
		Попытка 
			Модуль_РаботаССерверомДиадок.ЗаполнитьСтрокуТаблицыДокумента(ЭДОбъект, СтрокаТабличногоПоля);
			ОформлениеСтроки = ЭлементыФормы.ТаблицаДокументов.ОформлениеСтроки(строкаТабличногоПоля);
			ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСтрокуДанныхЭД(ОформлениеСтроки, ЭДОбъект);
			
			//проверяем, что мы спозиционированы на этой строке 
			ТекСписок = ЭлементыФормы.ТаблицаДокументов;
			Если (текСписок.ТекущиеДанные=Неопределено) или (текСписок.ТекущиеДанные.DocumentId<> ЭДОбъект.DocumentId)  или  (текСписок.ТекущиеДанные.BoxId<> ЭДОбъект.OrganizationId) Тогда
				//это другая строка - ничего не делаем 
			ИначеЕсли строкаТабличногоПоля <> Неопределено Тогда
				РасшифровкаОшибок = строкаТабличногоПоля.ТекстОшибки;
			Иначе
				РасшифровкаОшибок = "";
			КонецЕсли;
			
		Исключение 
			ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			Возврат;
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	Процедура НастроитьКолонкиТаблицыПоСценарию(ТаблицаДокументов) 
			
		Если ТаблицаДокументов.Колонки.Найти("вкл")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("вкл");
		КонецЕсли;
		Если ТаблицаДокументов.Колонки.Найти("СостояниеОбработки")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("СостояниеОбработки");
		КонецЕсли;
		Если ТаблицаДокументов.Колонки.Найти("ПервичныйДокументДляСопоставления")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("ПервичныйДокументДляСопоставления");
		КонецЕсли;
		Если ТаблицаДокументов.Колонки.Найти("КомментарийКДействию")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("КомментарийКДействию");
		КонецЕсли;
		
		Если ТаблицаДокументов.Колонки.Найти("СтатусСогласования")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("СтатусСогласования");
		КонецЕсли;
		Если ТаблицаДокументов.Колонки.Найти("Сопоставлен")=Неопределено Тогда
			ТаблицаДокументов.Колонки.Добавить("Сопоставлен");
		КонецЕсли;
		
		Если ТекущийСценарий = "ТорговыеСети" Тогда
			
			Если ТаблицаДокументов.Колонки.Найти("НомерАкта")=Неопределено Тогда
				ТаблицаДокументов.Колонки.Добавить("НомерАкта");
			КонецЕсли;
			Если ТаблицаДокументов.Колонки.Найти("ЕстьОтклонения")=Неопределено Тогда
				ТаблицаДокументов.Колонки.Добавить("ЕстьОтклонения");
			КонецЕсли;
			Если ТаблицаДокументов.Колонки.Найти("СписокОшибок")=Неопределено Тогда
				ТаблицаДокументов.Колонки.Добавить("СписокОшибок", Новый ОписаниеТипов("СписокЗначений"));
			КонецЕсли;
			
		Иначе
			
			Если ТаблицаОбработкаЗавершена.Колонки.Найти("ЭДОбъект") = Неопределено Тогда
				ТаблицаОбработкаЗавершена.Колонки.Добавить("ЭДОбъект");
			КонецЕсли;
				
		КонецЕсли;
			
	КонецПроцедуры	
	
	Процедура НастроитьСтраницы()
	
		СтраницаПодписать 							= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаПодписать;
		СтраницаСопоставитьСДокументамиПоступления 	= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСДокументамиПоступления;
		СтраницаСопоставитьСчетФактуры 				= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСчетФактуры;
		СтраницаСоздатьДокументыПоступления 		= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьДокументыПоступления;
		СтраницаСоздатьСчетФактуры 					= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьСчетФактуры; 
		СтраницаОбработкаЗавершена 					= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаОбработкаЗавершена;
		СтраницаСтарыйИнтерфейс 					= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСтарыйИнтерфейс;
		
		СтраницаПодписать.Видимость 							= Ложь;
		СтраницаСопоставитьСДокументамиПоступления.Видимость 	= Ложь;
		СтраницаСопоставитьСчетФактуры.Видимость 				= Ложь;
		СтраницаСоздатьДокументыПоступления.Видимость 			= Ложь;
		СтраницаСоздатьСчетФактуры.Видимость 					= Ложь;
		СтраницаОбработкаЗавершена.Видимость 					= Ложь;
		СтраницаСтарыйИнтерфейс.Видимость 						= Ложь;
		
		Если ТекущийСценарий = "Подписать" Тогда
			
			ПодготовитьСтраницуПодписать(СтраницаПодписать);
			ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена);
						
		ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
			
			ПодготовитьСтраницуСопоставитьСДокументамиПоступления(СтраницаСопоставитьСДокументамиПоступления);
			ПодготовитьСтраницуСопоставитьСчетФактуры(СтраницаСопоставитьСчетФактуры);
			ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена);
							
		ИначеЕсли ТекущийСценарий = "СоздатьВ1С" Тогда
			
			ПодготовитьСтраницуСоздатьДокументыПоступления(СтраницаСоздатьДокументыПоступления);
			ПодготовитьСтраницуСоздатьСчетФактуры(СтраницаСоздатьСчетФактуры);
			ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена);
										
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			
			ПодготовитьСтраницуПодписать(СтраницаПодписать);
			ПодготовитьСтраницуСоздатьДокументыПоступления(СтраницаСоздатьДокументыПоступления);
			ПодготовитьСтраницуСоздатьСчетФактуры(СтраницаСоздатьСчетФактуры);
			ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена);
							
		ИначеЕсли ТекущийСценарий = "СопоставитьИПодписать" Тогда
			
			ПодготовитьСтраницуСопоставитьСДокументамиПоступления(СтраницаСопоставитьСДокументамиПоступления);
			ПодготовитьСтраницуПодписать(СтраницаПодписать);
			ПодготовитьСтраницуСоздатьСчетФактуры(СтраницаСоздатьСчетФактуры);
			ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена);
			
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСопоставитьСДокументамиПоступления;
											
		ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" ИЛИ ТекущийСценарий = "ТорговыеСети" Тогда	
			
			ПодготовитьСтраницуСтарыйИнтерфейс(СтраницаСтарыйИнтерфейс);
						
		КонецЕсли;
					
	КонецПроцедуры
	
	Процедура ПодготовитьТаблицуПодписать(СтруктураТаблицыДокументов)
		ТаблицаПодписать = СтруктураТаблицыДокументов.ТаблицаПодписать.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаПодписать);
		ЗаполнитьСтатусыСогласования(СтруктураФильтровДляGetDocuments);
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуПодписать(СтраницаПодписать)
		
		СтраницаПодписать.Видимость = Истина;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаПодписать.Имя);
		
		Если ТекущийСценарий = "СопоставитьИПодписать" Тогда
			СтраницаПодписать.Заголовок = ИсходныйЗаголовок + " сопоставленные (" + Строка(ТаблицаПодписать.Количество()) + ")";
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.Сдвинуть(СтраницаПодписать, 1);
		Иначе
			СтраницаПодписать.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаПодписать.Количество()) + ")";
		КонецЕсли;
					
	КонецПроцедуры
			
	Процедура ПодготовитьТаблицуСопоставитьСДокументамиПоступления(СтруктураТаблицыДокументов)
		ТаблицаСопоставитьДокументыПоступления 	= СтруктураТаблицыДокументов.ТаблицаСопоставитьДокументыПоступления.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаСопоставитьДокументыПоступления);	
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуСопоставитьСДокументамиПоступления(СтраницаСопоставитьСДокументамиПоступления)
			
		СтраницаСопоставитьСДокументамиПоступления.Видимость 	= Истина;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаСопоставитьСДокументамиПоступления.Имя);
		СтраницаСопоставитьСДокументамиПоступления.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСопоставитьДокументыПоступления.Количество()) + ")";
		
		ЗаполнитьСписокВыбораСценарийСопоставленияДокументыПоступления();
		
		СохраненноеЗначение = ВосстановитьЗначение("Диадок_СценарийСопоставленияДокументовПоступления");
		Если ЗначениеЗаполнено(СохраненноеЗначение) = Истина Тогда
			СценарийСопоставления = СохраненноеЗначение;
		Иначе
			СценарийСопоставления = "СценарийБазовыйСуммаИДата";
		КонецЕсли;

		ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Текст 			= "Найти документы";
		ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Подсказка 		= "Найти документы для сопоставления";
		ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Отображение 	= ОтображениеКнопкиКоманднойПанели.Надпись;
					
	КонецПроцедуры
	
	Процедура ПодготовитьТаблицуСопоставитьСчетФактуры(СтруктураТаблицыДокументов)
		ТаблицаСопоставитьСчетФактуры = СтруктураТаблицыДокументов.ТаблицаНеСопоставленныеСчетФактуры.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаСопоставитьСчетФактуры);	
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуСопоставитьСчетФактуры(СтраницаСопоставитьСчетФактуры)
		
		СтраницаСопоставитьСчетФактуры.Видимость = Истина;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаСопоставитьСчетФактуры.Имя);
		СтраницаСопоставитьСчетФактуры.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСопоставитьСчетФактуры.Количество()) + ")";
		
		ЗаполнитьСписокВыбораСценарийСопоставленияСчетФактуры();
		
		СохраненноеЗначение = ВосстановитьЗначение("Диадок_СценарийСопоставленияСФ");
		Если ЗначениеЗаполнено(СохраненноеЗначение) = Истина Тогда
			СценарийСопоставленияСФ = СохраненноеЗначение;
		Иначе
			СценарийСопоставленияСФ = "СценарийБазовыйСуммаИДата";
		КонецЕсли;
					
		ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Текст 			= "Найти документы";
		ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Подсказка		= "Найти документы для сопоставления";
		ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Отображение 	= ОтображениеКнопкиКоманднойПанели.Надпись;
								
	КонецПроцедуры
	
	Процедура ПодготовитьТаблицуСоздатьДокументыПоступления(СтруктураТаблицыДокументов)
		
		ТаблицаСоздатьДокументыПоступления 	= СтруктураТаблицыДокументов.ТаблицаСоздатьДокументыПоступления.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаСоздатьДокументыПоступления);
		
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуСоздатьДокументыПоступления(СтраницаСоздатьДокументыПоступления)
		
		СтраницаСоздатьДокументыПоступления.Видимость = Истина;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаСоздатьДокументыПоступления.Имя);
		СтраницаСоздатьДокументыПоступления.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСоздатьДокументыПоступления.Количество()) + ")";
		
		ЗаполнитьСписокВыбораТипСоздаваемогоДокумента();
		
		СохраненноеЗначение = ВосстановитьЗначение("Диадок_ТипСоздаваемогоДокумента");
		Если ЗначениеЗаполнено(СохраненноеЗначение) = Истина Тогда
			ТипСоздаваемогоДокумента = СохраненноеЗначение;
		Иначе
			ТипСоздаваемогоДокумента = "ПокупкаКомиссия";
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПодготовитьТаблицуСоздатьСчетФактуры(СтруктураТаблицыДокументов)
		
		ТаблицаСоздатьСчетФактуры = СтруктураТаблицыДокументов.ТаблицаСоздатьСчетФактуры.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаСоздатьСчетФактуры);	
		
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуСоздатьСчетФактуры(СтраницаСоздатьСчетФактуры)
		
		СтраницаСоздатьСчетФактуры.Видимость = Истина;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаСоздатьСчетФактуры.Имя);
		СтраницаСоздатьСчетФактуры.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСоздатьСчетФактуры.Количество()) + ")";
		
	КонецПроцедуры
	
	Процедура ПодготовитьТаблицуДокументов(СтруктураТаблицыДокументов)
		
		ТаблицаДокументов = СтруктураТаблицыДокументов.ТаблицаДокументовВходящие.Скопировать();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаДокументов);
		
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуСтарыйИнтерфейс(СтраницаСтарыйИнтерфейс)
				
		Если ТекущийСценарий = "СохранитьНаДиск" Тогда
							
			СтраницаСтарыйИнтерфейс.Заголовок = "Сохранить документы на диск";
		
			ЭлементыФормы.ПолеВыбораДействия.СписокВыбора.Очистить();
			ЭлементыФормы.ПолеВыбораДействия.СписокВыбора.Добавить("Сохранить", "Сохранить на диск");
			
			ПолеВыбораДействия = "Сохранить";
											
		ИначеЕсли ТекущийСценарий = "ТорговыеСети" Тогда
			
			СтраницаСтарыйИнтерфейс.Заголовок = "Комплексная обработка для торговых сетей";
			
			ЭлементыФормы.ПолеВыбораДействия.СписокВыбора.Очистить();
			ЭлементыФормы.ПолеВыбораДействия.СписокВыбора.Добавить("КомплекснаяОбработкаДляТорговыхСетей", "Комплексная обработка для торговых сетей");
			
			ПолеВыбораДействия = "КомплекснаяОбработкаДляТорговыхСетей";
											
			ЭлементыФормы.ПолеВыбораСценарий.СписокВыбора.Очистить();
		    ЭлементыФормы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьВсеАвтоматически"			, "Выполнить все действия автоматически");
			ЭлементыФормы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьТолькоКорректныеДокументы", "Обработать корректные документы");
			ЭлементыФормы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьТолькоДокументыСОшибками"	, "Обработать документы с ошибками");
		
			ПолеВыбораСценарий = "";
		
			ЭлементыФормы.КоманднаяПанель7.Кнопки.ВыполнитьОперацию.Текст = "Выполнить анализ";	
			ЭлементыФормы.НадписьРасшифровка.Заголовок = "";
														
		КонецЕсли;
		
		ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		СтраницаСтарыйИнтерфейс.Видимость 	= Истина;
		
		ЭлементыФормы.ПолеВыбораДействия.Доступность = Ложь;
		ЭлементыФормы.ПолеВыбораСценарий.Доступность = Ложь;
		
		ВклВсеФлажки = Истина;
		ВклВсеПриИзменении(ЭлементыФормы.ВклВсеФлажки);
		
	КонецПроцедуры		
	
	Процедура ПодготовитьТаблицуОбработкаЗавершена(ТаблицаЗначений)
		
		ТаблицаОбработкаЗавершена = ТаблицаЗначений.СкопироватьКолонки();
		НастроитьКолонкиТаблицыПоСценарию(ТаблицаОбработкаЗавершена);
				
	КонецПроцедуры
	
	Процедура ПодготовитьСтраницуОбработкаЗавершена(СтраницаОбработкаЗавершена)
		
		СтраницаОбработкаЗавершена.Видимость = Истина;
						
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(СтраницаОбработкаЗавершена.Имя);
		СтраницаОбработкаЗавершена.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаОбработкаЗавершена.Количество()) + ")";
		
		Если ТекущийСценарий = "Подписать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать" ИЛИ ТекущийСценарий = "СопоставитьИПодписать" Тогда
			ЭлементыФормы.ТаблицаОбработкаЗавершена.Колонки.СтатусСогласования.Видимость 	= Истина;
			ЭлементыФормы.ТаблицаОбработкаЗавершена.Колонки.СтатусСогласования.Доступность 	= Истина;
		КонецЕсли;
				
	КонецПроцедуры
	
	Процедура ОбновитьПоложениеФлажковВПриложенииВерсии81()
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		Если СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2") = "ПерваяВерсияМладше"
			ИЛИ Строка(Метаданные.РежимСовместимости) = "Версия8_1" Тогда
			
			ЭлементыФормы.ВклВсеФлажкиПодписание.Лево= 						9;
			ЭлементыФормы.ВклВсеФлажкиСопоставитьДокументыПоступления.Лево= 9;
			ЭлементыФормы.ВклВсеФлажкиСопоставитьСчетФактуры.Лево= 			9;
			ЭлементыФормы.ВклВсеФлажкиСоздатьДокументыПоступления.Лево= 	9;
			ЭлементыФормы.ВклВсеФлажкиСоздатьСчетФактуры.Лево= 				9;
			ЭлементыФормы.ВклВсеФлажки.Лево= 								9;
			
			ЭлементыФормы.ВклВсеФлажкиПодписание.Верх= 						34;
			ЭлементыФормы.ВклВсеФлажкиСопоставитьДокументыПоступления.Верх= 34;
			ЭлементыФормы.ВклВсеФлажкиСопоставитьСчетФактуры.Верх= 			34;
			ЭлементыФормы.ВклВсеФлажкиСоздатьДокументыПоступления.Верх= 	34;
			ЭлементыФормы.ВклВсеФлажкиСоздатьСчетФактуры.Верх= 				34;
			ЭлементыФормы.ВклВсеФлажки.Верх= 								34;
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ


//{ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
	
	//////////////////////////////////////////////////
	//{ Таблица подписать
			
		Процедура ТаблицаПодписатьПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокумент") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено) 
						И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокумент) = Истина Тогда
						
					ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаПодписатьПередНачаломИзменения(Элемент, Отказ)
			
			Если ЭлементыФормы.ТаблицаПодписать.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда 	
				Отказ = Истина;
				Если ЗначениеЗаполнено(ЭлементыФормы.ТаблицаПодписать.ТекущиеДанные.КомментарийКДействию) = Истина Тогда
					Предупреждение(ЭлементыФормы.ТаблицаПодписать.ТекущиеДанные.КомментарийКДействию, 120, КраткоеНаименованиеСистемы);
				КонецЕсли;
			Иначе
				Если НЕ НРег(ЭлементыФормы.ТаблицаПодписать.ТекущаяКолонка.Имя) = "вкл" Тогда
					Отказ = Истина;
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);	
				КонецЕсли;
			КонецЕсли;
					
		КонецПроцедуры
		
		Процедура ТаблицаПодписатьПриИзмененииФлажка(Элемент, Колонка)
		
			МассивВыбранныхСтрок = ТаблицаПодписать.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если МассивВыбранныхСтрок.Количество() = ТаблицаПодписать.Количество() Тогда
				ЭлементыФормы.ВклВсеФлажкиПодписание.Значение = Истина;
			Иначе
				ЭлементыФормы.ВклВсеФлажкиПодписание.Значение = Ложь;
			КонецЕсли;
					
		КонецПроцедуры
		
		Процедура ВклВсеФлажкиПодписаниеПриИзменении(Элемент)
		
			Для каждого СтрокаТаблицыПодписать Из ТаблицаПодписать Цикл
						
				Если Элемент.Значение Тогда
					СтрокаТаблицыПодписать.Вкл = ПроверитьВозможностьПодписи(СтрокаТаблицыПодписать);
				Иначе
					СтрокаТаблицыПодписать.Вкл = Ложь;				
				КонецЕсли;
														
			КонецЦикла;	
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель2КнопкаПодписать(Кнопка)
			ПодписатьВыделенные();
		КонецПроцедуры
		
		Процедура КоманднаяПанель2КнопкаОткрытьДокумент1С(Кнопка)
			
			Если Элементыформы.ТаблицаПодписать.ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
			Иначе 
				Если Элементыформы.ТаблицаПодписать.ТекущиеДанные.ПервичныйДокумент = Неопределено Тогда
					Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
				Иначе
					Элементыформы.ТаблицаПодписать.ТекущиеДанные.ПервичныйДокумент.Получитьформу().Открыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель2КнопкаОбновить(Кнопка)
			ОбновитьТаблицуДокументовПодписать("Сброс");
		КонецПроцедуры

	//} Таблица подписать
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Таблица сопоставить с документами поступления
				
		Процедура ТаблицаСопоставитьДокументыПоступленияПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокументДляСопоставления") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель8.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено)
					И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокументДляСопоставления) = Истина Тогда
					
					ЭлементыФормы.КоманднаяПанель8.Кнопки.ОткрытьДокумент_1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель8.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСопоставитьДокументыПоступленияПередНачаломИзменения(Элемент, Отказ)
			
			Если ЭлементыФормы.ТаблицаСопоставитьДокументыПоступления.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда
				
				Если Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов Тогда
					
					Document = Элемент.ТекущаяСтрока.ЭДОбъект;
					НайденныеДокументы = ТаблицаВыбораДокументов.НайтиСтроки(Новый Структура("ДокументЭДО", Document.DocumentId));
					Если НЕ НайденныеДокументы.Количество()=0 Тогда
						ФормаВыбораДокумента = ПолучитьФорму("ФормаВыбораДокумента");
						Для каждого НайденныйДокумент из НайденныеДокументы Цикл
							СтрокаДокумент = ФормаВыбораДокумента.ТаблицаДокументовДляВыбора.Добавить();
							СтрокаДокумент.Документ = НайденныйДокумент.ДокументВ1С;
						КонецЦикла;
						
						ВыбранныйДокумент = ФормаВыбораДокумента.ОткрытьМодально();
						Если НЕ ВыбранныйДокумент = Неопределено Тогда
							Элемент.ТекущаяСтрока.Вкл = Истина;
							Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ГотовКСопоставлению;
							Элемент.ТекущаяСтрока.ПервичныйДокументДляСопоставления = ВыбранныйДокумент;
							Элемент.ТекущаяСтрока.КомментарийКДействию = "Документ готов к сопоставлению";
							
							МассивСтрок = ТаблицаВыбораДокументов.НайтиСтроки(Новый Структура("ДокументВ1С", ВыбранныйДокумент));
							Для каждого УдаляемаяСтрока из МассивСтрок Цикл
								ТаблицаВыбораДокументов.Удалить(УдаляемаяСтрока);	
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					ОбновитьТаблицуСопоставитьДокументыПоступления();
					
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.Документ1СДляСопоставленияНеНайден Тогда
					Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);					
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ГотовКСопоставлению Тогда
					Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.НеНайденСопоставленныйДокОснование Тогда
					ТекстРасшифровки = "Поступление, на основании которого создана счет-фактура, не сопоставлено с поступлением в " + КраткоеНаименованиеСистемы + "." + Символы.ПС
										+ "Необходимо осуществить сопоставление документа основания.";
					Предупреждение(ТекстРасшифровки, , КраткоеНаименованиеСистемы);
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктурадействийПоДокументу.НеСовпадаютСуммы Тогда
					Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);	
				КонецЕсли;
									
			Иначе
				Если НЕ НРег(ЭлементыФормы.ТаблицаСопоставитьДокументыПоступления.ТекущаяКолонка.Имя) = "вкл" Тогда
					Отказ = Истина;
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);	
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСопоставитьДокументыПоступленияПриИзмененииФлажка(Элемент, Колонка)
			
			Если Элемент.ТекущаяСтрока.Вкл = Истина Тогда											
				
				ЕстьНеЗаконченноеСопоставление = ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("СостояниеОбработки", СтруктураДействийПоДокументу.ГотовКСопоставлению)).Количество()>0
												ИЛИ ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("СостояниеОбработки", СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов)).Количество()>0;
											
				Если ЕстьНеЗаконченноеСопоставление 
					И Элемент.ТекущаяСтрока.СостояниеОбработки <> СтруктураДействийПоДокументу.ГотовКСопоставлению
					И Элемент.ТекущаяСтрока.СостояниеОбработки <> СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов Тогда
					
					Элемент.ТекущаяСтрока.вкл = Ложь;
					Предупреждение("В таблице есть строки с неоконченным сопоставлением. Для возможности поиска документов необходимо закончить сопоставление, либо обновить таблицу.", 120, НаименованиеСистемы);
													
				КонецЕсли;
			КонецЕсли;
						
			МассивВыбранныхСтрок = ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если МассивВыбранныхСтрок.Количество() = ТаблицаСопоставитьДокументыПоступления.Количество() Тогда
				ЭлементыФормы.ВклВсеФлажкиСопоставитьДокументыПоступления.Значение = Истина;
			Иначе
				ЭлементыФормы.ВклВсеФлажкиСопоставитьДокументыПоступления.Значение = Ложь;
			КонецЕсли;	
			
		КонецПроцедуры
			
		Процедура ВклВсеФлажкиСопоставитьДокументыПоступленияПриИзменении(Элемент)
			ТаблицаСопоставитьДокументыПоступления.ЗаполнитьЗначения(ВклВсеФлажкиСопоставитьДокументыПоступления, "вкл");
		КонецПроцедуры

		Процедура СценарийСопоставленияДокументыПоступленияПриИзменении(Элемент)
			ОбновитьТаблицуСопоставитьДокументыПоступления("Сброс");
			ТаблицаВыбораДокументов.Очистить();
			Если ЗначениеЗаполнено(Элемент.Значение) = Истина Тогда
				СохранитьЗначение("Диадок_СценарийСопоставленияДокументовПоступления", Элемент.Значение);	
			КонецЕсли;
		КонецПроцедуры
		
		Процедура КоманднаяПанель10КнопкаСопоставить(Кнопка)
			СопоставитьВыделенные("ДокументыПоступления");
		КонецПроцедуры
		
		Процедура КоманднаяПанель8ОткрытьДокумент_1С(Кнопка)
			
			Если Элементыформы.ТаблицаСопоставитьДокументыПоступления.ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
			Иначе 
				Если Элементыформы.ТаблицаСопоставитьДокументыПоступления.ТекущиеДанные.ПервичныйДокумент = Неопределено Тогда
					Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
				Иначе
					Элементыформы.ТаблицаСопоставитьДокументыПоступления.ТекущиеДанные.ПервичныйДокумент.Получитьформу().Открыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель8ОбновитьТаблицу(Кнопка)
			ОбновитьТаблицуСопоставитьДокументыПоступления("Сброс");
		КонецПроцедуры
				
	//} Таблица сопоставить с документами поступления
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Таблица сопоставить счет-фактуры
		
		Процедура ТаблицаСопоставитьСчетФактурыПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокументДляСопоставления") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель9.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено)
					И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокументДляСопоставления) = Истина Тогда
					
					ЭлементыФормы.КоманднаяПанель9.Кнопки.ОткрытьДокумент_1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель9.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСопоставитьСчетФактурыПередНачаломИзменения(Элемент, Отказ)
			
			Если ЭлементыФормы.ТаблицаСопоставитьСчетФактуры.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда
				
				Если Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов Тогда
					
					Document = Элемент.ТекущаяСтрока.ЭДОбъект;
					НайденныеДокументы = ТаблицаВыбораДокументов.НайтиСтроки(Новый Структура("ДокументЭДО", Document.DocumentId));
					Если НЕ НайденныеДокументы.Количество()=0 Тогда
						ФормаВыбораДокумента = ПолучитьФорму("ФормаВыбораДокумента");
						Для каждого НайденныйДокумент из НайденныеДокументы Цикл
							СтрокаДокумент = ФормаВыбораДокумента.ТаблицаДокументовДляВыбора.Добавить();
							СтрокаДокумент.Документ = НайденныйДокумент.ДокументВ1С;
						КонецЦикла;
						
						ВыбранныйДокумент = ФормаВыбораДокумента.ОткрытьМодально();
						Если НЕ ВыбранныйДокумент = Неопределено Тогда
							Элемент.ТекущаяСтрока.Вкл = Истина;
							Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ГотовКСопоставлению;
							Элемент.ТекущаяСтрока.ПервичныйДокументДляСопоставления = ВыбранныйДокумент;
							Элемент.ТекущаяСтрока.КомментарийКДействию = "Документ готов к сопоставлению";
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.Документ1СДляСопоставленияНеНайден Тогда
					ТекстРасшифровка = "Не найдена счет-фактура, удовлетворяющая заданным критериям поиска.";
					Предупреждение(ТекстРасшифровка, , КраткоеНаименованиеСистемы);					
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ГотовКСопоставлению Тогда
					Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.НеНайденСопоставленныйДокОснование Тогда
					ТекстРасшифровки = "Документ 1С, на основании которого создана счет-фактура, не сопоставлен с документом в " + КраткоеНаименованиеСистемы + "." + Символы.ПС
										+ "Необходимо осуществить сопоставление документа основания.";
					Предупреждение(ТекстРасшифровки, , КраткоеНаименованиеСистемы);
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ДокументНеНайден Тогда
					ТекстРасшифровки = "В базе 1С не найдены счета-фактуры, удовлетворяющие сценарию сопоставления.";
					Предупреждение(ТекстРасшифровки, , КраткоеНаименованиеСистемы);
				ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктурадействийПоДокументу.НеСовпадаютСуммы Тогда
					Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);	
				КонецЕсли;
									
			Иначе
				Если НЕ НРег(ЭлементыФормы.ТаблицаСопоставитьСчетФактуры.ТекущаяКолонка.Имя) = "вкл" Тогда
					Отказ = Истина;
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);	
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСопоставитьСчетФактурыПриИзмененииФлажка(Элемент, Колонка)
			
			Если Элемент.ТекущиеДанные.Вкл = Истина
				И Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов Тогда
				
				Элемент.ТекущиеДанные.Вкл = Ложь;
				Предупреждение("Необходимо выбрать счет-фактуру из списка возможных.", , КраткоеНаименованиеСистемы);
			Иначе
				МассивВыбранныхСтрок = ТаблицаСопоставитьСчетФактуры.НайтиСтроки(Новый Структура("Вкл", Истина));
				Если МассивВыбранныхСтрок.Количество() = ТаблицаСопоставитьСчетФактуры.Количество() Тогда
					ЭлементыФормы.ВклВсеФлажкиСопоставитьСчетФактуры.Значение = Истина;
				Иначе
					ЭлементыФормы.ВклВсеФлажкиСопоставитьСчетФактуры.Значение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ВклВсеФлажкиСопоставитьСчетФактурыПриИзменении(Элемент)
			ТаблицаСопоставитьСчетФактуры.ЗаполнитьЗначения(ВклВсеФлажкиСопоставитьСчетФактуры, "вкл");
		КонецПроцедуры
		
		Процедура КоманднаяПанель11КнопкаСопоставить(Кнопка)
			СопоставитьВыделенные("СчетФактуры");
		КонецПроцедуры
		
		Процедура КоманднаяПанель9ОткрытьДокумент_1С(Кнопка)
			
			Если Элементыформы.ТаблицаСопоставитьСчетФактуры.ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
			Иначе 
				Если Элементыформы.ТаблицаСопоставитьСчетФактуры.ТекущиеДанные.ПервичныйДокументДляСопоставления = Неопределено Тогда
					Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
				Иначе
					Элементыформы.ТаблицаСопоставитьСчетФактуры.ТекущиеДанные.ПервичныйДокументДляСопоставления.Получитьформу().Открыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель9ОбновитьТаблицу(Кнопка)
			ОбновитьТаблицуСопоставитьСчетФактуры("Сброс");
		КонецПроцедуры
		
		Процедура СценарийСопоставленияСчетФактурыПриИзменении(Элемент)
			Если ЗначениеЗаполнено(Элемент.Значение) = Истина Тогда
				СохранитьЗначение("Диадок_СценарийСопоставленияСФ", Элемент.Значение);	
			КонецЕсли;
		КонецПроцедуры
		
	//} Таблица сопоставить счет-фактуры
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Таблица создать документы поступления
		
		Процедура ТаблицаСоздатьДокументыПоступленияПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокумент") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено) 
						И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокумент) = Истина Тогда
						
					ЭлементыФормы.КоманднаяПанель5.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель5.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСоздатьДокументыПоступленияПередНачаломИзменения(Элемент, Отказ)
		
			Если ЭлементыФормы.ТаблицаСоздатьДокументыПоступления.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда 	
				
				Отказ = Истина;
				
				Если Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.ЗаполнитеДанные Тогда
					ОбработатьСостояниеЗаполнитеДанные(Элемент.ТекущиеДанные);
				ИначеЕсли Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент Тогда
					ОбработатьСостояниеПроведитеДокумент(Элемент.ТекущиеДанные);
				КонецЕсли;
				
			Иначе
				Если НЕ НРег(ЭлементыФормы.ТаблицаСоздатьДокументыПоступления.ТекущаяКолонка.Имя) = "вкл" Тогда
					Отказ = Истина;
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);	
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСоздатьДокументыПоступленияПриИзмененииФлажка(Элемент, Колонка)
			
			Если Элемент.ТекущаяСтрока.вкл = Истина Тогда
				
				Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ПервичныйДокумент) = Истина
					И Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент Тогда
					
					Элемент.ТекущаяСтрока.вкл = Ложь;
					Предупреждение("Документ в базе 1С уже создан. Перейти в документ можно через карточку электронного документа.", 120, НаименованиеСистемы); 
					
				КонецЕсли;
					
			КонецЕсли;
						
			МассивВыбранныхСтрок = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если МассивВыбранныхСтрок.Количество() = ТаблицаСоздатьДокументыПоступления.Количество() Тогда
				ЭлементыФормы.ВклВсеФлажкиСоздатьДокументыПоступления.Значение = Истина;
			Иначе
				ЭлементыФормы.ВклВсеФлажкиСоздатьДокументыПоступления.Значение = Ложь;
			КонецЕсли;
			
		КонецПроцедуры
        		
		Процедура ТипСоздаваемогоДокументаПриИзменении(Элемент)
		
			Если ЗначениеЗаполнено(Элемент.Значение) = Истина Тогда
				СохранитьЗначение("Диадок_ТипСоздаваемогоДокумента", Элемент.Значение);	
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ВклВсеФлажкиСоздатьДокументыПоступленияПриИзменении(Элемент)
			
			Если Элемент.Значение = Истина Тогда
			
				Для каждого СтрокаТаблицы из ТаблицаСоздатьДокументыПоступления Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) = Истина Тогда
						СтрокаТаблицы.вкл = Ложь;
					Иначе
						СтрокаТаблицы.вкл = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ТаблицаСоздатьДокументыПоступления.ЗаполнитьЗначения(Элемент.Значение, "вкл");	
			КонецЕсли;
			
		КонецПроцедуры
						
		Процедура КоманднаяПанель4Создать(Кнопка)
			СоздатьВыделенныеВ1С("ДокументыПоступления");
		КонецПроцедуры
		
		Процедура КоманднаяПанель5КнопкаОбновить(Кнопка)
			ОбновитьТаблицуСоздатьДокументыПоступления("Сброс");
		КонецПроцедуры
		
	//} Таблица создать документы поступления
	//////////////////////////////////////////////////	
		
	//////////////////////////////////////////////////
	//{ Таблица создать счет-фактуры
		
		Процедура ТаблицаСоздатьСчетФактурыПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокумент") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель2.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено) 
						И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокумент) = Истина Тогда
						
					ЭлементыФормы.КоманднаяПанель5.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель5.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаСоздатьСчетФактурыПередНачаломИзменения(Элемент, Отказ)
			
			Если ЭлементыФормы.ТаблицаСоздатьСчетФактуры.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда
				
				Если Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.ВыберитеДокументПоступления Тогда
					
					Document= Элемент.ТекущиеДанные.ЭДОбъект;
					ДокументыОснования= ПолучитьФорму("ФормаВыбораДокументаДляСопоставленияСНакладной").ВыбратьДокумент(Document, "СоздатьСФНаОсновании");
					
					Если ДокументыОснования <> Неопределено Тогда
						
						НайденнаяСтрока= ТаблицаСоздатьСчетФактуры.НайтиСтроки(Новый Структура("BoxId, DocumentId", Document.OrganizationId, Document.DocumentId))[0];
						
						СоздатьСчетФактуруНаОснованииДокументаПоступления(НайденнаяСтрока, Document, ДокументыОснования);
						
						ОбновитьТаблицуСоздатьСчетФактуры();
						ОбновитьТаблицуОбработкаЗавершена();
						
					КонецЕсли;
					
				ИначеЕсли Элемент.ТекущиеДанные.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент Тогда
					
					ТекущиеДанные 	= Элемент.ТекущиеДанные;
					ДокументОбъект 	= ТекущиеДанные.ПервичныйДокумент.ПолучитьОбъект();
					ДокументОбъект.ПолучитьФорму().ОткрытьМодально();

					Если ДокументОбъект.Проведен Тогда
						
						НайденнаяСтрока= ТаблицаСоздатьСчетФактуры.НайтиСтроки(Новый Структура("BoxId, DocumentID", ТекущиеДанные.ЭДОбъект.OrganizationId, ТекущиеДанные.ЭДОбъект.DocumentId))[0];
						НайденнаяСтрока.СостояниеОбработки= "";
						
						ОбновитьТаблицуСоздатьСчетФактуры();
						ОбновитьТаблицуОбработкаЗавершена();
						
					КонецЕсли;
										
				КонецЕсли;
									
			Иначе
				
				Если НРег(ЭлементыФормы.ТаблицаСоздатьСчетФактуры.ТекущаяКолонка.Имя) <> "вкл" Тогда
					Отказ = Истина;
					ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецПроцедуры
		
		Процедура ТаблицаСоздатьСчетФактурыПриИзмененииФлажка(Элемент, Колонка)
			
			Если Элемент.ТекущаяСтрока.вкл = Истина Тогда
				
				Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ПервичныйДокумент) = Истина
					И Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент Тогда
					
					Элемент.ТекущаяСтрока.вкл = Ложь;
					Предупреждение("Документ в базе 1С уже создан. Перейти в документ можно через карточку электронного документа.", 120, НаименованиеСистемы); 
					
				КонецЕсли;
					
			КонецЕсли;
			
			МассивВыбранныхСтрок = ТаблицаСоздатьСчетФактуры.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если МассивВыбранныхСтрок.Количество() = ТаблицаСоздатьСчетФактуры.Количество() Тогда
				ЭлементыФормы.ВклВсеФлажкиСоздатьСчетФактуры.Значение = Истина;
			Иначе
				ЭлементыФормы.ВклВсеФлажкиСоздатьСчетФактуры.Значение = Ложь;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ВклВсеФлажкиСоздатьСчетФактурыПриИзменении(Элемент)
						
			Если Элемент.Значение = Истина Тогда
			
				Для каждого СтрокаТаблицы из ТаблицаСоздатьСчетФактуры Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) = Истина Тогда
						СтрокаТаблицы.вкл = Ложь;
					Иначе
						СтрокаТаблицы.вкл = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ТаблицаСоздатьСчетФактуры.ЗаполнитьЗначения(Элемент.Значение, "вкл");	
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель6КнопкаСоздатьСчетФактуры(Кнопка)
			СоздатьВыделенныеВ1С("СчетФактуры");
		КонецПроцедуры
		
		Процедура КоманднаяПанель6КнопкаОбновить(Кнопка)
			ОбновитьТаблицуСоздатьСчетФактуры("Сброс");
		КонецПроцедуры
        		
	//} Таблица создать счет-фактуры
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Таблица обработка завершена
		
		Процедура ТаблицаОбработкаЗавершенаПриАктивизацииСтроки(Элемент)
			
			Если Элемент.Колонки.Найти("ПервичныйДокумент") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель3.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено)
					И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокумент) = Истина Тогда
					
					ЭлементыФормы.КоманднаяПанель3.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель3.Кнопки.КнопкаОткрытьДокумент1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ТаблицаОбработкаЗавершенаПередНачаломИзменения(Элемент, Отказ)
			
			Отказ = Истина;
		    ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);

		КонецПроцедуры
		
		Процедура КоманднаяПанель3КнопкаОткрытьДокумент1С(Кнопка)
		
			Если Элементыформы.ТаблицаОбработкаЗавершена.ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
			Иначе 
				Если Элементыформы.ТаблицаОбработкаЗавершена.ТекущиеДанные.ПервичныйДокумент = Неопределено Тогда
					Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
				Иначе
					Элементыформы.ТаблицаОбработкаЗавершена.ТекущиеДанные.ПервичныйДокумент.Получитьформу().Открыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ОбновитьТаблицуОбработкаЗавершена()
			ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаОбработкаЗавершена.Имя);
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаОбработкаЗавершена.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаОбработкаЗавершена.Количество()) + ")";	
		КонецПроцедуры
		
	//} Таблица обработка завершена
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Таблица документов(старый интерфейс)
		
		Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
		
			Если Элемент.Колонки.Найти("ПервичныйДокументДляСопоставления") = Неопределено Тогда
				ЭлементыФормы.КоманднаяПанель7.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
			Иначе
				Если (НЕ Элемент.ТекущиеДанные = Неопределено)
					И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокументДляСопоставления)
					ИЛИ  ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПервичныйДокумент)) Тогда
					
					ЭлементыФормы.КоманднаяПанель7.Кнопки.ОткрытьДокумент_1С.Доступность = Истина;
				Иначе
					ЭлементыФормы.КоманднаяПанель7.Кнопки.ОткрытьДокумент_1С.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		
		КонецПроцедуры
		
		Процедура ТаблицаДокументовПередНачаломИзменения(Элемент, Отказ)
			
			Если ЭлементыФормы.ТаблицаДокументов.ТекущаяКолонка.Имя = "СостояниеОбработки" Тогда
			
				Если ТекущийСценарий = "СохранитьНаДиск" Тогда
					Если Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.УспешноСохранен Тогда
						Предупреждение("Сохранение документа прошло успешно.", , КраткоеНаименованиеСистемы);	
					ИначеЕсли Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаСохранения Тогда	
						Предупреждение(Элемент.ТекущаяСтрока.КомментарийКДействию, , КраткоеНаименованиеСистемы);
					КонецЕсли;	
								
				ИначеЕсли ТекущийСценарий = "ТорговыеСети" Тогда
				
					Если ЗначениеЗаполнено(Элемент.ТекущаяСтрока.СостояниеОбработки) = Истина Тогда
						ТекстПредупреждения = Элемент.ТекущаяСтрока.КомментарийКДействию;
						Предупреждение(ТекстПредупреждения, , КраткоеНаименованиеСистемы);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЭлементыФормы.ТаблицаДокументов.ТекущаяКолонка.Имя = "вкл" Тогда
				
				Если Элемент.ТекущаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано Тогда
					Отказ = Истина;
					ОбъяснитьПользователю(Элемент.ТекущаяСтрока);
				КонецЕсли;
					
			Иначе
				Отказ = Истина;
				ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОткрытьКарточкуДокументаДД(Элемент.ТекущиеДанные.ЭДОбъект, ЭтаФорма);	
			КонецЕсли;			
			
		КонецПроцедуры
        		
		Процедура ТаблицаДокументовПриИзмененииФлажка(Элемент, Отказ)
	
			МассивВыбранныхСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
			Если МассивВыбранныхСтрок.Количество() = ТаблицаДокументов.Количество() Тогда
				ЭлементыФормы.ВклВсеФлажки.Значение = Истина;
			Иначе
				ЭлементыФормы.ВклВсеФлажки.Значение = Ложь;
			КонецЕсли;	
	
		КонецПроцедуры
						
		Процедура ПолеВыбораСценарийПриИзменении(Элемент)
		
			ТаблицаВыбораДокументов.Очистить();
			
			Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
				
				Если ПолеВыбораСценарий = "ОбработатьТолькоКорректныеДокументы" Тогда
					
					Если ЭтоУсловноКорректныйДокумент(СтрокаТаблицыДокументов) Тогда
						СтрокаТаблицыДокументов.Вкл = Истина;
					Иначе
						СтрокаТаблицыДокументов.Вкл = Ложь;	
					КонецЕсли;
					
				ИначеЕсли ПолеВыбораСценарий = "ОбработатьТолькоДокументыСОшибками" Тогда
					
					Если ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицыДокументов) Тогда
						СтрокаТаблицыДокументов.Вкл = Истина;			
					Иначе
						СтрокаТаблицыДокументов.Вкл = Ложь;			
					КонецЕсли;
					
				ИначеЕсли ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
					
					Если ЭтоУсловноКорректныйДокумент(СтрокаТаблицыДокументов) 
						ИЛИ ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицыДокументов) Тогда
						
						СтрокаТаблицыДокументов.Вкл = Истина;
					Иначе
						СтрокаТаблицыДокументов.Вкл = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;						
			
		КонецПроцедуры
        		
		Процедура ВклВсеПриИзменении(Элемент)
			ТаблицаДокументов.ЗаполнитьЗначения(ВклВсеФлажки, "вкл");	
		КонецПроцедуры
		
		Процедура КоманднаяПанель7ВыполнитьОперацию(Кнопка)
			
			Если ТекущийСценарий = "СохранитьНаДиск" Тогда
				СохранитьДокументыНаДиск();
			ИначеЕсли ТекущийСценарий = "ТорговыеСети" Тогда
				КомплекснаяОбработкаДляТорговыхСетей();	
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура КоманднаяПанель7ОбновитьТаблицу(Кнопка)
			
			Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументов Цикл
				СтрокаТаблицы.СписокОшибок.Очистить();
			КонецЦикла;
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельСписокПредупреждений, РежимСверткиЭлементаУправления.Лево);
			
			ТаблицаДокументов.ЗаполнитьЗначения("", "СостояниеОбработки");
			ВклВсеФлажки = Истина;
			ВклВсеПриИзменении(ЭлементыФормы.ВклВсеФлажки);
			
			Если ТекущийСценарий = "ТорговыеСети" Тогда
				ПолеВыбораСценарий = "";
				ЭлементыФормы.ПолеВыбораСценарий.Доступность = Ложь;
				РежимРаботы = НаборРежимовРаботы.АнализДанных;
				ЭлементыФормы.КоманднаяПанель7.Кнопки.ВыполнитьОперацию.Текст = "Выполнить анализ";
			КонецЕсли;
							
		КонецПроцедуры
		
		Процедура КоманднаяПанель7ОткрытьДокумент_1С(Кнопка)
			
			Если Элементыформы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
				Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
			Иначе 
				Если Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент <> Неопределено Тогда
					Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент.Получитьформу().Открыть();
				ИначеЕсли Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокументДляСопоставления <> Неопределено Тогда
					Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокументДляСопоставления.Получитьформу().Открыть();
				Иначе
					Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
				КонецЕсли;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура НадписьСписокПредупрежденийНажатие(Элемент)
			
			ТаблицаПредупреждений= ТаблицаДокументов.СкопироватьКолонки();
			
			Если ТаблицаПредупреждений.Колонки.Найти("КлючОшибки") = Неопределено Тогда
				ТаблицаПредупреждений.Колонки.Добавить("КлючОшибки");
			КонецЕсли;
			Если ТаблицаПредупреждений.Колонки.Найти("СинонимОшибки") = Неопределено Тогда
				ТаблицаПредупреждений.Колонки.Добавить("СинонимОшибки");
			КонецЕсли;
			Если ТаблицаПредупреждений.Колонки.Найти("ОписаниеОшибки") = Неопределено Тогда
				ТаблицаПредупреждений.Колонки.Добавить("ОписаниеОшибки");
			КонецЕсли;
			Если ТаблицаПредупреждений.Колонки.Найти("BoxIDDocumentId") = Неопределено Тогда
				ТаблицаПредупреждений.Колонки.Добавить("BoxIDDocumentId");
			КонецЕсли;
			
			Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументов Цикл
				
				Если СтрокаТаблицы.СписокОшибок.Количество() > 0 Тогда
					
					Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
						
						СтруктураОшибки= ЭлементСписка.Значение;
						
						Если СтруктураОшибки.ТипОшибки = "Предупреждение" Тогда
							
							НоваяСтрока= ТаблицаПредупреждений.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы	 );
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОшибки);
							
							Если ПустаяСтрока(НоваяСтрока.СинонимОшибки) Тогда
								НоваяСтрока.СинонимОшибки= НоваяСтрока.КлючОшибки;
							КонецЕсли;
							
							Если СтрокаТаблицы.ЭДОбъект <> Неопределено Тогда
								НоваяСтрока.BoxIDDocumentId= СтрокаТаблицы.BoxID + СтрокаТаблицы.DocumentId;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ФормаСпискаПредупреждений= ПолучитьФорму("ФормаСпискаПредупреждений", ЭтаФорма);
			ФормаСпискаПредупреждений.ЗакрыватьПриЗакрытииВладельца= Истина;
			ФормаСпискаПредупреждений.ТаблицаПредупреждений= ТаблицаПредупреждений;
			ФормаСпискаПредупреждений.Открыть();
			
		КонецПроцедуры
		
	//} Таблица документов(старый интерфейс)
	//////////////////////////////////////////////////
	
//} ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


//{ СОЗДАТЬ ДОКУМЕНТЫ В БАЗЕ 1С
	
	Процедура СоздатьВыделенныеВ1С(Направление)
			
		Если Направление = "ДокументыПоступления" Тогда
			
			МассивПомеченныхСтрок = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("вкл", Истина));
			
			ЗаголовокДляТекущегоСостоянияОбработки = "Создание документов поступления";
			ПоказатьТекущееСостояниеОбработки(МассивПомеченныхСтрок, ЗаголовокДляТекущегоСостоянияОбработки);
									
			Для Каждого ПомеченнаяСтрока Из МассивПомеченныхСтрок Цикл
				
				КоличествоВыгружено = КоличествоВыгружено + 1;
				ОбновитьТекущееСостояниеОбработки(ЗаголовокДляТекущегоСостоянияОбработки);
				
				//1. получаем данные документа
				Document 				= ПомеченнаяСтрока.ЭДОбъект;
				ЗаготовкаДокумента1С	= СформироватьЗаготовкуДокумента1С(Document);
				
				//2. проверяем заполненность полученных данных документа
				ПоляЗаполнены = ВыполнитьКонтрольЗаполненияПолей(ЗаготовкаДокумента1С);
				
				//3. создаем документ
				Если ПоляЗаполнены Тогда
					
					ДокументОбъект = СоздатьДокументПоступления(Document, ЗаготовкаДокумента1С);
					
					Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
						ДокументОбъект.Дата = ТекущаяДата();	
					КонецЕсли;
					
                    Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						Если ДокументОбъект.Модифицированность() Тогда
							ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
						ПомеченнаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент;
					КонецПопытки;
					
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументОбъект.Ссылка, Document.DocumentId, Document.OrganizationId, Document.Type);
					
					ПомеченнаяСтрока.вкл 				= Ложь;
					ПомеченнаяСтрока.ПервичныйДокумент 	= ДокументОбъект.Ссылка;
					
				Иначе
					ПомеченнаяСтрока.вкл 					= Ложь;
					ПомеченнаяСтрока.СостояниеОбработки 	= СтруктураДействийПоДокументу.ЗаполнитеДанные;
					ПомеченнаяСтрока.КомментарийКДействию 	= ЗаготовкаДокумента1С;
				КонецЕсли;
								
			КонецЦикла;
								
			ОбновитьТаблицуСоздатьДокументыПоступления();
			ОбновитьТаблицуОбработкаЗавершена();
			
		ИначеЕсли Направление = "СчетФактуры" Тогда	
			
			МассивПомеченныхСтрок = ТаблицаСоздатьСчетФактуры.НайтиСтроки(Новый Структура("вкл", Истина));
			
			ЗаголовокДляТекущегоСостоянияОбработки = "Создание счетов-фактур";
			ПоказатьТекущееСостояниеОбработки(МассивПомеченныхСтрок, ЗаголовокДляТекущегоСостоянияОбработки);
			
			Для Каждого ПомеченнаяСтрока Из МассивПомеченныхСтрок Цикл
				
				КоличествоВыгружено = КоличествоВыгружено + 1;
				ОбновитьТекущееСостояниеОбработки(ЗаголовокДляТекущегоСостоянияОбработки);
				
				Document = ПомеченнаяСтрока.ЭДОбъект; 
				
				Если Document.Type = "Invoice" Тогда
					
					//1. попробуем найти связанный сопоставленный документ
					МассивСвязанныхДокументов = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(Document);
					
					//2. возможно СФ уже существует
					ПодходящийСФ = Модуль_ИнтеграцияОбщий.НайтиПодходящийСчетФактуруИзРНК(МассивСвязанныхДокументов);
					
					Если НЕ ПодходящийСФ = Неопределено Тогда
						ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ПодходящийСФ, Document.DocumentId, Document.OrganizationId, Document.Type);	
						ПомеченнаяСтрока.вкл					= Ложь;
						ПомеченнаяСтрока.СостояниеОбработки		= "";
						ПомеченнаяСтрока.ПервичныйДокумент 		= ПодходящийСФ;
						Продолжить;
					КонецЕсли;
																	
					ДокументОснованиеСсылка = НайтиОснованиеСФВМассивеСвязанныхДокументов(МассивСвязанныхДокументов);
											
					Если ДокументОснованиеСсылка <> Неопределено Тогда
						
						СоздатьСчетФактуруНаОснованииДокументаПоступления(ПомеченнаяСтрока, Document, ДокументОснованиеСсылка);
													
					Иначе
						
						ПомеченнаяСтрока.вкл = Ложь;
						ПомеченнаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ВыберитеДокументПоступления;
						
					КонецЕсли;
																		
				КонецЕсли;
										
			КонецЦикла;
			
			ОбновитьТаблицуСоздатьСчетФактуры();
			ОбновитьТаблицуОбработкаЗавершена();
								
		КонецЕсли;
		
		СкрытьТекущееСостояниеОбработки();
			
	КонецПроцедуры
			
	Процедура ОбработатьСостояниеПроведитеДокумент(ТекущиеДанные)
	
		ДокументОбъект = ТекущиеДанные.ПервичныйДокумент.ПолучитьОбъект();
		ДокументОбъект.ПолучитьФорму().ОткрытьМодально();

		Если ДокументОбъект.Проведен Тогда
			МассивОтбора 	= ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("BoxId, DocumentID", ТекущиеДанные.ЭДОбъект.OrganizationId, ТекущиеДанные.ЭДОбъект.DocumentId));
			ИскомаяСтрока 	= МассивОтбора[0];
			ИскомаяСтрока.СостояниеОбработки = "";
			
			ОбновитьТаблицуСоздатьДокументыПоступления();
			ОбновитьТаблицуОбработкаЗавершена();	
		КонецЕсли;
       			
	КонецПроцедуры
	
	//////////////////////////////////////////////////
	//{ Документы поступления
							
		Функция СоздатьДокументПоступления(Document, ЗаготовкаДокумента1С)
			
			ПараметрыШапки = Новый Структура("Дата, ДатаВходящегоДокумента, НомерВходящегоДокумента, ДоговорКонтрагента, Склад, Подразделение");
			ПараметрыШапки.Вставить("Дата", ТекущаяДата());
			ПараметрыШапки.Вставить("ДатаВходящегоДокумента", Document.DocumentDate);
			ПараметрыШапки.Вставить("НомерВходящегоДокумента", Document.DocumentNumber);
			ПараметрыШапки.Вставить("ДоговорКонтрагента", ЗаготовкаДокумента1С.ДоговорКонтрагента);
			ПараметрыШапки.Вставить("Склад", ЗаготовкаДокумента1С.Склад);
			ПараметрыШапки.Вставить("Подразделение", ЗаготовкаДокумента1С.Подразделение);
			
			Если ЗаготовкаДокумента1С.Свойство("ОтражатьВБухУчете") = Истина Тогда
				ПараметрыШапки.Вставить("ОтражатьВБухУчете", ЗаготовкаДокумента1С.ОтражатьВБухУчете);
			КонецЕсли;
			Если ЗаготовкаДокумента1С.Свойство("ОтражатьВУпрУчете") = Истина Тогда
				ПараметрыШапки.Вставить("ОтражатьВУпрУчете", ЗаготовкаДокумента1С.ОтражатьВУпрУчете);
			КонецЕсли;
			Если ЗаготовкаДокумента1С.Свойство("ОтражатьВНалУчете") = Истина Тогда
				ПараметрыШапки.Вставить("ОтражатьВНалУчете", ЗаготовкаДокумента1С.ОтражатьВНалУчете);
			КонецЕсли;
						
			ВерояныеПоля = Новый Структура("Организация, Контрагент", ЗаготовкаДокумента1С.Организация, ЗаготовкаДокумента1С.Контрагент);
			
			ВидОперации 		= ЗаготовкаДокумента1С.ВидОперации;
			СуммаВключаетНДС 	= ЗаготовкаДокумента1С.СуммаВключаетНДС;
			ТабличнаяЧасть 		= ЗаготовкаДокумента1С.ТабличнаяЧасть;
			
			Если Модуль_ИнтеграцияОбщий.ЕстьВозможностьЗаполненияГТД(ВидОперации, Document)
				ИЛИ Модуль_ИнтеграцияОбщий.ЕстьВозможностьЗаполненияСерий(ВидОперации, Document) Тогда
				
				ВозможностьЗаполненияГТД = Истина;
				
			Иначе
				ВозможностьЗаполненияГТД = Ложь;
				
			КонецЕсли;
			
			ДокументОбъект = Модуль_ИнтеграцияОбщий.СоздатьДокументПоступлениеТоваровУслуг(ПараметрыШапки, ВерояныеПоля, Document, ТабличнаяЧасть, СуммаВключаетНДС, Видоперации, ВозможностьЗаполненияГТД);
			
			Возврат ДокументОбъект;
			
		КонецФункции
			
		Функция ВыполнитьКонтрольЗаполненияПолей(СтруктураДанныеДокумента1С)
		
			ВсеОК = Истина;
						
			ВидОперации 					= СтруктураДанныеДокумента1С.ВидОперации;
			Контрагент 						= СтруктураДанныеДокумента1С.Контрагент;
			Склад 							= СтруктураДанныеДокумента1С.Склад;
			ИспользоватьЕдиницуИзмерения 	= СтруктураДанныеДокумента1С.ИспользоватьЕдиницуИзмерения;
			
			ТабличнаяЧасть 					= СтруктураДанныеДокумента1С.ТабличнаяЧасть;
			
			Если ЗначениеЗаполнено(Контрагент) = Ложь Тогда
				ВсеОК = Ложь;
			КонецЕсли;
			
			Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияКА" 
				ИЛИ ИмяМодуляИнтеграции = "Модуль_ИнтеграцияУПП13" Тогда
				
				ОтражатьВБухУчете= ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С("Отражать документы в бухгалтерском учете");
				Если НЕ ОтражатьВБухУчете = Неопределено Тогда
					СтруктураДанныеДокумента1С.Вставить("ОтражатьВБухУчете", ОтражатьВБухУчете);
				КонецЕсли;
				
				ОтражатьВУпрУчете= ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С("Отражать документы в управленческом учете");
				Если НЕ ОтражатьВБухУчете = Неопределено Тогда
					СтруктураДанныеДокумента1С.Вставить("ОтражатьВУпрУчете", ОтражатьВУпрУчете);
				КонецЕсли;
				
				ОтражатьВНалУчете= ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С("Отражать документы в налоговом учете");
				Если НЕ ОтражатьВБухУчете = Неопределено Тогда
					СтруктураДанныеДокумента1С.Вставить("ОтражатьВНалУчете", ОтражатьВНалУчете);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Склад) = Ложь И НЕ СтруктураДанныеДокумента1С.DocumentType = "XmlAcceptanceCertificate" Тогда
			
				СкладПоУмолчанию= ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С_СкладПоУмолчанию();
				
				Если ЗначениеЗаполнено(СкладПоУмолчанию) = Ложь Тогда
					ВсеОК = Ложь;
				Иначе
					СтруктураДанныеДокумента1С.Склад = СкладПоУмолчанию;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ВидОперации = "ПоступлениеДопРасходов" 
				ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41" Тогда
				
				Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
					
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) = Ложь 
						И СтрокаТЧ.Тип <> "Услуга" Тогда
						
						ВсеОК = Ложь;
					КонецЕсли;
					
					Если (ИспользоватьЕдиницуИзмерения И ВидОперации <> "ПоступлениеАвтомобилей")
						И (ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) = Ложь И СтрокаТЧ.Тип <> "Услуга") Тогда
						
						ВсеОК = Ложь;
					КонецЕсли;
			
				КонецЦикла;
		
			КонецЕсли;
			
			Если ВидОперации = "ВозвратОтПокупателя"
				И ТабличнаяЧасть.НайтиСтроки(Новый Структура("тип", "Услуга")).Количество()>0 Тогда
				
				ВсеОК = Ложь;
			КонецЕсли;
			
			Возврат ВсеОК;
						
		КонецФункции
		
		Функция СформироватьЗаготовкуДокумента1С(Document)
		
			ЗаготовкаДокумента1С = Модуль_ЗаполнениеКонтента.ИницализироватьИЗаполнитьСтруктуруДокумента1С(Document, Document.GetContent());	
			
			Если ЗначениеЗаполнено(ТипСоздаваемогоДокумента) = Истина Тогда
				ЗаготовкаДокумента1С.ВидОперации = ТипСоздаваемогоДокумента;
			КонецЕсли;
							
			ПараметрыЗаполнения = Новый Структура();                                                                    
			ПараметрыЗаполнения.Вставить("Контрагент", 						ЗаготовкаДокумента1С.Контрагент);            
			ПараметрыЗаполнения.Вставить("ВидОперации", 					ЗаготовкаДокумента1С.ВидОперации);           
			ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", 				ЗаготовкаДокумента1С.СуммаВключаетНДС);      
			ПараметрыЗаполнения.Вставить("ИспользоватьЕдиницуИзмерения", 	ЗаготовкаДокумента1С.ИспользоватьЕдиницуИзмерения); 
			ПараметрыЗаполнения.Вставить("Type", 							Document.Type);                             
			
			Модуль_ЗаполнениеКонтента.ЗаполнитьДанными1С(ЗаготовкаДокумента1С.ТабличнаяЧасть, ПараметрыЗаполнения);
			
			Возврат ЗаготовкаДокумента1С; 
			
		КонецФункции
		
		Процедура ОбновитьТаблицуСоздатьДокументыПоступления(ПараметрОбновления = Неопределено)
			
			Ц = 0;	
			Пока Ц <= ТаблицаСоздатьДокументыПоступления.Количество() - 1 Цикл
										
				СтрокаДокиПоступления = ТаблицаСоздатьДокументыПоступления[Ц];
				
				Если ЗначениеЗаполнено(СтрокаДокиПоступления.ПервичныйДокумент) = Истина 
					И ЗначениеЗаполнено(СтрокаДокиПоступления.СостояниеОбработки) = Ложь Тогда
					
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокиПоступления);
					
					ТаблицаСоздатьДокументыПоступления.Удалить(СтрокаДокиПоступления);
					
				Иначе
					Если ПараметрОбновления = "Сброс" Тогда
						СтрокаДокиПоступления.СостояниеОбработки 	= "";
						СтрокаДокиПоступления.ТекстОшибки 			= "";
						СтрокаДокиПоступления.КомментарийКДействию 	= "";
					КонецЕсли;
					
					Ц = Ц + 1;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если ВклВсеФлажкиСоздатьДокументыПоступления И ТаблицаСоздатьДокументыПоступления.Количество()=0 Тогда
				ВклВсеФлажкиСоздатьДокументыПоступления = Ложь;
			КонецЕсли;
			
			ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьДокументыПоступления.Имя);
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьДокументыПоступления.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСоздатьДокументыПоступления.Количество()) + ")";
			
			ВыполнитьПереключениеВкладок();
			
		КонецПроцедуры
		
		Процедура ОбработатьСостояниеЗаполнитеДанные(ТекущиеДанные)
			
			Document 				= ТекущиеДанные.ЭДОбъект;
			ЗаготовкаДокумента1С 	= ТекущиеДанные.КомментарийКДействию;
			ДокументСсылка 			= ПолучитьФорму("ФормаВводаНакладной",, Document.OrganizationId + Document.DocumentId).ЗаполнитьИОткрытьФормуСозданияДокументаВ1С(Document, Document.GetContent(), ЗаготовкаДокумента1С);
			
			Если ЗначениеЗаполнено(ДокументСсылка) = Истина Тогда
				
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(ДокументССылка.Ссылка, Document.DocumentId, Document.OrganizationId, Document.Type);
				
				МассивСтрок = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("BoxID, DocumentId", Document.OrganizationId, Document.DocumentId));
				Если МассивСтрок.Количество()>0 Тогда
					СтрокаТаблицы = МассивСтрок[0];
					СтрокаТаблицы.СостояниеОбработки 	= "";
					СтрокаТаблицы.КомментарийКДействию 	= "";
					СтрокаТаблицы.ПервичныйДокумент 	= ДокументСсылка; 
				КонецЕсли;
			КонецЕсли;
			
			//возможно после заполнения данных можно создать остальные документы
			МассивСтрок = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("СостояниеОбработки", СтруктураДействийПоДокументу.ЗаполнитеДанные));
			Для Каждого ОтобраннаяСтрока Из МассивСтрок Цикл
				
				Document = ОтобраннаяСтрока.ЭДОбъект;
				НоваяЗаготовкаДокумента1С = СформироватьЗаготовкуДокумента1С(Document);
				
				ПоляЗаполнены = ВыполнитьКонтрольЗаполненияПолей(НоваяЗаготовкаДокумента1С);
				Если ПоляЗаполнены Тогда
					
					ОтобраннаяСтрока.вкл 				= Истина;
					ОтобраннаяСтрока.СостояниеОбработки = "";
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновитьТаблицуСоздатьДокументыПоступления();
			ОбновитьТаблицуОбработкаЗавершена();
			
	КонецПроцедуры
	
	//} Документы поступления
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Счет фактуры
				
		Процедура ОбновитьТаблицуСоздатьСчетФактуры(ПараметрОбновления=Неопределено)
			
			Ц = 0;	
			Пока Ц <= ТаблицаСоздатьСчетФактуры.Количество() - 1 Цикл
										
				СтрокаСчетФактуры = ТаблицаСоздатьСчетФактуры[Ц];
								
				Если ЗначениеЗаполнено(СтрокаСчетФактуры.ПервичныйДокумент) = Истина 
					И ЗначениеЗаполнено(СтрокаСчетФактуры.СостояниеОбработки) = Ложь Тогда
					
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетФактуры);
					
					ТаблицаСоздатьСчетФактуры.Удалить(СтрокаСчетФактуры);
					
				Иначе
					Если ПараметрОбновления = "Сброс" Тогда
						СтрокаСчетФактуры.СостояниеОбработки 	= "";
						СтрокаСчетФактуры.ТекстОшибки 			= "";
						СтрокаСчетФактуры.КомментарийКДействию 	= "";
					КонецЕсли;
					
					Ц = Ц + 1;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если ВклВсеФлажкиСоздатьСчетФактуры И ТаблицаСоздатьСчетФактуры.Количество()=0 Тогда
				ВклВсеФлажкиСоздатьСчетФактуры = Ложь;
			КонецЕсли;
			
			ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьСчетФактуры.Имя);
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьСчетФактуры.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСоздатьСчетФактуры.Количество()) + ")";
			
			ВыполнитьПереключениеВкладок();
			
		КонецПроцедуры
			
		Функция НайтиОснованиеСФВМассивеСвязанныхДокументов(МассивСвязанныхДокументов)
			
			ДокументОснованиеСсылка = Неопределено;
			
			Для Каждого СвязанныйДокументСсылка Из МассивСвязанныхДокументов Цикл
				
				Если НЕ Метаданные.Документы.Найти("ПриходнаяНакладная") = Неопределено Тогда
					Если ТипЗнч(СвязанныйДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
						ДокументОснованиеСсылка = СвязанныйДокументСсылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено Тогда
					Если ТипЗнч(СвязанныйДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
						ДокументОснованиеСсылка = СвязанныйДокументСсылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Метаданные.Документы.Найти("ПоступлениеНМА") = Неопределено Тогда
					Если ТипЗнч(СвязанныйДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
						ДокументОснованиеСсылка = СвязанныйДокументСсылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Метаданные.Документы.Найти("ПоступлениеДопРасходов") = Неопределено Тогда
					Если ТипЗнч(СвязанныйДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
						ДокументОснованиеСсылка = СвязанныйДокументСсылка;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Метаданные.Документы.Найти("ВозвратТоваровОтПокупателя") = Неопределено Тогда	
					Если ТипЗнч(СвязанныйДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
						ДокументОснованиеСсылка = СвязанныйДокументСсылка;
						Прервать;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат ДокументОснованиеСсылка;
			
		КонецФункции
			
		Процедура СоздатьСчетФактуруНаОснованииДокументаПоступления(СтрокаТаблицыДокументов, Document, ДокументыОснования)
			
			НовыйДокумент= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").СоздатьДокумент_СчетФактураПолученный(Document, ДокументыОснования);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				СтрокаТаблицыДокументов.СостояниеОбработки = "";
			Исключение
				
				Если НовыйДокумент.Модифицированность() Тогда
					НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
				СтрокаТаблицыДокументов.СостояниеОбработки = СтруктураДействийПоДокументу.ПроведитеДокумент;
				
			КонецПопытки;
			
			СтрокаТаблицыДокументов.вкл 				= Ложь;
			СтрокаТаблицыДокументов.ПервичныйДокумент 	= НовыйДокумент.Ссылка;
			
			НовыйДокумент= Неопределено;
			
			ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СтрокаТаблицыДокументов.ПервичныйДокумент, Document.DocumentId, Document.OrganizationId, Document.Type);
						
		КонецПроцедуры
			
	//} Счет фактуры
	//////////////////////////////////////////////////
		
//} СОЗДАТЬ ДОКУМЕНТЫ В БАЗЕ 1С

	
//{ ПОДПИСАНИЕ
		
	Процедура ОбновитьТаблицуДокументовПодписать(ПараметрОбновления = Неопределено)
		
		Ц = 0;	
		Пока Ц <= ТаблицаПодписать.Количество() - 1 Цикл
						
			СтрокаТаблицыПодписать = ТаблицаПодписать[Ц];
			
			Если НЕ ПроверитьВозможностьПодписи(СтрокаТаблицыПодписать) Тогда
				
				Document = СтрокаТаблицыПодписать.ЭДОбъект;
				
				Если (ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type)) 
					И ЗначениеЗаполнено(СтрокаТаблицыПодписать.ПервичныйДокумент) = Ложь Тогда
					
					Если ТекущийСценарий = "Подписать" Тогда
						НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
					Иначе //это сценарий ПодписатьИСоздать
						НоваяСтрока = ТаблицаСоздатьДокументыПоступления.Добавить();
					КонецЕсли;
					
				Иначе
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПодписать);
				
				ТаблицаПодписать.Удалить(СтрокаТаблицыПодписать);
			Иначе
				Если ПараметрОбновления = "Сброс" Тогда
					СтрокаТаблицыПодписать.СостояниеОбработки 	= "";
					СтрокаТаблицыПодписать.КомментарийКДействию = "";
					СтрокаТаблицыПодписать.ТекстОшибки 			= "";
				КонецЕсли;
				
				Ц = Ц + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВклВсеФлажкиПодписание И ТаблицаПодписать.Количество()=0 Тогда
			ВклВсеФлажкиПодписание = Ложь;
		КонецЕсли;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаПодписать.Имя);
		Если ТекущийСценарий = "СопоставитьИПодписать" Тогда
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаПодписать.Заголовок = ИсходныйЗаголовок + " сопоставленные (" + Строка(ТаблицаПодписать.Количество()) + ")";
		Иначе
			ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаПодписать.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаПодписать.Количество()) + ")";  
		КонецЕсли;
					
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры
    	
	Процедура ВыполнитьСобытиеПослеПодписания()
							
		ОбновитьТаблицуДокументовПодписать();
		Если ТекущийСценарий = "ПодписатьИСоздать" Тогда
			ОбновитьТаблицуСоздатьДокументыПоступления();				
		КонецЕсли;
		ОбновитьТаблицуОбработкаЗавершена();
		            			
	КонецПроцедуры
	
	Процедура ЗаполнитьСтатусыСогласования(СтруктураФильтры)
		
		ТаблицаСогласованных = Модуль_РаботаССерверомДиадок.ВернутьВыборкуРНКИСчетовФактурДиадок(
		СтруктураФильтры.ДатаНачала, 
		СтруктураФильтры.ДатаОкончания, 
		СтруктураФильтры.Организация, 
		СтруктураФильтры.КонтрагентID, 
		СтруктураФильтры.Направление, 
		СтруктураФильтры.фильтр,
		СтруктураФильтры.ФильтрПотипам, 
		СтруктураФильтры.DepertmentID, 
		СтруктураФильтры.ВключатьПодчиненныеПодазделения);
		
		Для каждого Стр Из ТаблицаСогласованных Цикл
			
			СтатусСогласования = Модуль_РаботаССерверомДиадок.ПредставлениеСтатусаСогласования(Стр.ЭДОбъект);
			
			СтрокаСогласованного = ТаблицаПодписать.Найти(Стр.DocumentId, "DocumentId");
			Если НЕ СтрокаСогласованного = Неопределено Тогда
				СтрокаСогласованного.СтатусСогласования = СтатусСогласования;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПроверитьВозможностьПодписи(Стр)
		
		Если Стр.ЭДОбъект.Type<>"NonformalizedProforma" И Стр.ЭДОбъект.Status = "InboundWaitingForRecipientSignature" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Процедура ПодписатьВыделенные()
		
		ОбрабатываемаяТаблицаДокументов = ВернутьОбрабатываемуюТаблицу();
				
		ВыборкаСтрок = ОбрабатываемаяТаблицаДокументов.НайтиСтроки(Новый Структура("вкл", Истина));
		Если ВыборкаСтрок.Количество()=0 Тогда
			Предупреждение("Выберите хотя бы один документ.",, КраткоеНаименованиеСистемы);
			Возврат;
		КонецЕсли;	
		
		РазмерВыгрузки = ВыборкаСтрок.Количество();	
		ЗакрыватьФорму = Ложь;
		
		Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
		КоличествоВыгружено = 1;
		ВремяОтображения = ТекущаяДата();
		
		СтруктурыПодписей.Очистить();
		
		ОбновитьСтатусПроцессаПодписания();
		
	КонецПроцедуры
	
	Процедура ОбновитьСтатусПроцессаПодписания()
		
		Если КоличествоВыгружено <= РазмерВыгрузки Тогда
			Элементыформы.НадписьВыполняемоеДействие.Значение ="Производится подписание документов ("+КоличествоВыгружено+" из "+ размервыгрузки+")";
		КонецЕсли;	
		
		ПодключитьОбработчикОжидания("ПодключаемыйОбработчикПодписатьВыделенные", 0.1, Истина);
		
	КонецПроцедуры
	
	Процедура ПодключаемыйОбработчикПодписатьВыделенные()
		
		ОтключитьОбработчикОжидания("ПодключаемыйОбработчикПодписатьВыделенные");
		
		Если МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
			МассивЗаданийОтправкаТитулаПокупателя = Новый Массив;
		КонецЕсли;
		
		ОбрабатываемаяТаблицаДокументов = ВернутьОбрабатываемуюТаблицу();
				
		ВыборкаСтрок = ОбрабатываемаяТаблицаДокументов.НайтиСтроки(Новый Структура("вкл", Истина));
		
		РазмерМассиваЗаданий = МассивЗаданийОтправкаТитулаПокупателя.Количество();
		Если РазмерМассиваЗаданий >= МаксимальноеКоличествоЗаданий или ВыборкаСтрок.Количество()=0 Тогда
			ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателя();
		КонецЕсли;
				
		Если РазмерМассиваЗаданий >= МаксимальноеКоличествоЗаданий Тогда
			ПодключитьОбработчикОжидания("ПодключаемыйОбработчикПодписатьВыделенные", 0.1, Истина);
			Возврат;
		КонецЕсли;
				
		Если ВыборкаСтрок.Количество()>0 Тогда
			
			Строка = ВыборкаСтрок[0];
			
			Если ПроверитьВозможностьПодписи(Строка) Тогда
				
				Попытка
					
					Если Строка.ЭДОбъект.isLockedPackage Тогда
						ПодписатьЗалоченныйПакет(Строка);
					Иначе
						
						DocumentType = Строка.ЭДОбъект.Type;
						
						Если DocumentType = "XmlTorg12" ИЛИ DocumentType = "XmlAcceptanceCertificate" ИЛИ DocumentType = "UniversalTransferDocument" Тогда
							BuyerTitleInfo = ПолучитьBuyerTitleInfo(Строка.ЭДОбъект);
						Иначе
							BuyerTitleInfo = Неопределено;
						КонецЕсли;
						
						Модуль_РаботаССерверомДиадок.ПодписатьВДиадокеАсинхронно(Строка, BuyerTitleInfo, МассивЗаданийОтправкаТитулаПокупателя);
						
						УстановитьФлажокДляСтроки(Строка, Ложь);
						
						КоличествоВыгружено = КоличествоВыгружено+1; 
						
					КонецЕсли;
								
					ОбновитьСтатусПроцессаПодписания();
					
				Исключение
					ТекстОшибки =  ОписаниеОшибки();
					СтруктураТолкованияОшибки = ВыполнитьТолкованиеТекстаОшибки(Строка, ТекстОшибки);
					
					ЗакрыватьФорму = Ложь;
					
					ОбработатьОшибку(Строка, СтруктураТолкованияОшибки);
					
					Если Найти(ТекстОшибки, "Пользователь отменил подписание")=0 Тогда
						Строка.СостояниеОбработки 	= СтруктурадействийПоДокументу.ОшибкаОбработки;
						Строка.КомментарийКДействию = ТекстОшибки;
					КонецЕсли;
															
				КонецПопытки;
				
			Иначе
				КоличествоВыгружено = КоличествоВыгружено+1;
				УстановитьФлажокДляСтроки(Строка, Ложь);
				ОбновитьСтатусПроцессаПодписания();
			КонецЕсли;
		Иначе 
			
			ВклВсеФлажки = Ложь;
			
			Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
			Если ЗакрыватьФорму Тогда
				Оповестить("ОбновитьФормуДиадок", , ЭтаФорма);
				ЭтаФорма.Закрыть();
			КонецЕсли;
			
			ВыполнитьСобытиеПослеПодписания();
			
		КонецЕсли;	
		
	КонецПроцедуры
	
	Процедура ПодписатьЗалоченныйПакет(Строка, НеПоказыватьФормуТитула=Ложь)
		
		РезультатВыполнения= ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПодписатьЗалоченныйПакет(Строка.ЭДОбъект, НеПоказыватьФормуТитула);
		
		Если НЕ РезультатВыполнения.Отказ Тогда
			
			Для Каждого Document ИЗ РезультатВыполнения.Documents Цикл
				
				НайденныеСтроки= ВернутьОбрабатываемуюТаблицу().НайтиСтроки(Новый Структура("DocumentID", Document.DocumentID));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
						
						УстановитьФлажокДляСтроки(НайденнаяСтрока, Ложь);
						
						НайденнаяСтрока.ЭДОбъект= Document;
						
					КонецЦикла;
					
					КоличествоВыгружено = КоличествоВыгружено+1; 
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ВызватьИсключение РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателя()
		
		ц = 0;
		Пока ц < МассивЗаданийОтправкаТитулаПокупателя.Количество() Цикл 
			СтрокаМассиваЗаданий = МассивЗаданийОтправкаТитулаПокупателя[ц];
			Если СтрокаМассиваЗаданий.ReplySendTask.isCompleted Тогда 
				
				Попытка
					Result = СтрокаМассиваЗаданий.ReplySendTask.Result;
										
					Если Result Тогда
						СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы; 
						СтрокаТаблицы.ЭДОбъект = Модуль_РаботаССерверомДиадок.ОбновитьЭДоОбъектДиадока(СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
						Оповестить("ОбновитьСтроку", СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
											
						СтрокаТаблицы.СостояниеДокументооборота = Модуль_РаботаССерверомДиадок.ПредставлениеСтатуса(СтрокаТаблицы.ЭДОбъект);	
						
						Если ТекущийСценарий = "МассоваяОбработкаСети" Тогда
							СтрокаТаблицы.СостояниеОбработки = ПолучитьЗаголовкиНабораСостоянийОбработки("УспешноПодписан").ЗаголовокСсылки;
						КонецЕсли;
						
						МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
					Иначе
						ц = ц+1;
					КонецЕсли;
					
				Исключение
					СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы;
					СтрокаТаблицы.вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ОписаниеОшибки());
					
					ц = ц + 1;
				КонецПопытки;
				
							
			Иначе 
				ц = ц+1;
				ПодключитьОбработчикОжидания("ПодключаемыйОбработчикПодписатьВыделенные", 0.1, Истина);
				
			КонецЕсли;
		КонецЦикла;	
				
	КонецПроцедуры
	
	Процедура ОбработатьОшибку(Строка, СтруктураТолкованияОшибки)
		
		Результат = СтруктураТолкованияОшибки.Результат;
		
		Если Результат = 1 Тогда 
			ОбновитьСтатусПроцессаПодписания();
		ИначеЕсли Результат = 2 Тогда 
			Строка.вкл = Ложь;
			КоличествоВыгружено = КоличествоВыгружено+1; 
			ОбновитьСтатусПроцессаПодписания();
		ИначеЕсли Результат = 4 Тогда
			Строка.ID = СтруктураТолкованияОшибки.ID;
			Строка.вкл = Ложь;
			КоличествоВыгружено = КоличествоВыгружено+1; 
			ОбновитьСтатусПроцессаПодписания();
		Иначе 
			Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ВыполнитьТолкованиеТекстаОшибки(Строка, ТекстОшибки)
		
		ВозвращаемаяСтруктура = Новый Структура("Результат, ID", 0, "");
		
		Если Найти(ТекстОшибки, "Не настроены параметры подписания")> 0 Тогда
			Предупреждение("Массовое подписание прервано.", , КраткоеНаименованиеСистемы);
			ВозвращаемаяСтруктура.Результат = 3;
		
		ИначеЕсли Найти(ТекстОшибки, "Пользователь отменил подписание")>0 Тогда
			Предупреждение("Пользователь прервал массовое подписание.", , КраткоеНаименованиеСистемы);
			ВозвращаемаяСтруктура.Результат = 3;
		
		ИначеЕсли найти(ТекстОшибки, "<head>")=0 Тогда
			
			ТекстОшибки = "При выгрузке документа "+строка.ТипДокумента+"№ "+строка.Номер+" от"+строка.Дата +" произошла ошибка: 
			|"+ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СформироватьТекстОшибкиДиадок(ТекстОшибки);
						
			ВозвращаемаяСтруктура.Результат = 2;
			ВозвращаемаяСтруктура.ID = "";
			
		Иначе 
			
			ТекстОшибки = "При формировании файла для " + Строка.Документ + " обнаружены ошибки.
			|Перейдите в карточку просмотра документа для получения подробной информации.";
			
			ФормаОшибки = ПолучитьФорму("ФормаОбработкиОшибкиВыгрузкиДокумента");
			ФормаОшибки.ТекстОшибки = ТекстОшибки;
			ВозвращаемаяСтруктура.Результат = ФормаОшибки.ОткрытьМодально();
			
		КонецЕсли;
		
		Возврат ВозвращаемаяСтруктура;
	КонецФункции
	
	Функция ПолучитьBuyerTitleInfo(ЭДОбъект, НеПоказыватьФормуТитула=Ложь)
		
		DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(ЭДОбъект, ЭДОбъект.GetContent());
		
		СтруктураПодписи= СтруктурыПодписей[DocumentType];
		
		Если СтруктураПодписи = Неопределено Тогда
			
			СтруктураПодписи= ПолучитьМодульПрог("Форма_Основная_Логика").ПолучитьСтруктуруПодписи(ЭДОбъект, DocumentType, НеПоказыватьФормуТитула, , ДатаПолученияПоДатеДокумента);
			
			Если СтруктураПодписи = Ложь Тогда
				ВызватьИсключение("Пользователь отменил подписание");
			ИначеЕсли СтруктураПодписи = Неопределено Тогда
				ВызватьИсключение("Не настроены параметры подписания накладных");
			КонецЕсли;
			
		КонецЕсли;
		
		// Принудительно выставляем AcceptanceDate, т.к. в массовое подписание могут попасть документы за разные даты
		Если СтруктураПодписи.Свойство("AcceptanceDate") И ДатаПолученияПоДатеДокумента Тогда
			СтруктураПодписи.AcceptanceDate= ЭДОбъект.DocumentDate;	
		КонецЕсли;
		
		СтруктурыПодписей.Вставить(DocumentType, СтруктураПодписи);
		
		Возврат ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").СформироватьТитулПолучателя(СтруктураПодписи, ЭДОбъект, DocumentType);
		
	КонецФункции
	
//} ПОДПИСАНИЕ

//{ СОПОСТАВИТЬ
		
	Процедура ОбновитьТаблицуСопоставитьДокументыПоступления(ПараметрОбновления = Неопределено)
		
		Ц = 0;	
		Пока Ц <= ТаблицаСопоставитьДокументыПоступления.Количество() - 1 Цикл		
			
			СтрокаДокиПоступления = ТаблицаСопоставитьДокументыПоступления[Ц];
											
			Если ЗначениеЗаполнено(СтрокаДокиПоступления.ПервичныйДокумент) = Истина 
				И ЗначениеЗаполнено(СтрокаДокиПоступления.СостояниеОбработки) = Ложь Тогда
				
				Если ТекущийСценарий = "СопоставитьИПодписать"
					И СтрокаДокиПоступления.ЭДОбъект.Status = "InboundWaitingForRecipientSignature" Тогда
					
					НоваяСтрока = ТаблицаПодписать.Добавить();
				Иначе //это сценарий "сопоставить"
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
				КонецЕсли;
										
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокиПоступления);
				ТаблицаСопоставитьДокументыПоступления.Удалить(СтрокаДокиПоступления);
				
			Иначе
				Если ПараметрОбновления = "Сброс" Тогда
					СтрокаДокиПоступления.вкл 					= Ложь;
					СтрокаДокиПоступления.СостояниеОбработки 	= "";
					СтрокаДокиПоступления.ПервичныйДокументДляСопоставления = Неопределено;
					СтрокаДокиПоступления.ТекстОшибки 			= "";
					СтрокаДокиПоступления.КомментарийКДействию 	= "";
				КонецЕсли;
				
				Ц = Ц + 1;
			КонецЕсли;
								
		КонецЦикла;
		
		ПризнакПереключенияНаПоиск = (ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("вкл", Истина)).Количество()=0
									И ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("СостояниеОбработки", СтруктураДействийПоДокументу.ГотовКСопоставлению)).Количество()=0
									И ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("СостояниеОбработки", СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов)).Количество()=0);
		
		Если ПараметрОбновления = "Сброс" ИЛИ ПризнакПереключенияНаПоиск Тогда
			
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Текст 			= "Найти документы";
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Подсказка 		= "Найти документы для сопоставления";
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.Надпись;
			
			ВклВсеФлажкиСопоставитьДокументыПоступления = Ложь;
		Иначе
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Текст			= "Сопоставить";
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Подсказка		= "Сопоставить найденные документы";	
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли;
					
		Если ВклВсеФлажкиСопоставитьДокументыПоступления И ТаблицаСопоставитьДокументыПоступления.Количество()=0 Тогда
			ВклВсеФлажкиСопоставитьДокументыПоступления = Ложь;
		КонецЕсли;
		
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСДокументамиПоступления.Имя);
		ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСДокументамиПоступления.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСопоставитьДокументыПоступления.Количество()) + ")";
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры
		
	Процедура ОбновитьТаблицуСопоставитьСчетФактуры(ПараметрОбновления = Неопределено)
		
		Ц = 0;	
		Пока Ц <= ТаблицаСопоставитьСчетФактуры.Количество() - 1 Цикл		
			
			СтрокаДокиСчетФактуры = ТаблицаСопоставитьСчетФактуры[Ц];
			
			Если ЗначениеЗаполнено(СтрокаДокиСчетФактуры.ПервичныйДокумент) = Истина 
				И ЗначениеЗаполнено(СтрокаДокиСчетФактуры.СостояниеОбработки) = Ложь Тогда
				
				НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокиСчетФактуры);
				
				ТаблицаСопоставитьСчетФактуры.Удалить(СтрокаДокиСчетФактуры);
				
			Иначе
				Если ПараметрОбновления = "Сброс" Тогда
					СтрокаДокиСчетФактуры.вкл 					= Ложь;
					СтрокаДокиСчетФактуры.СостояниеОбработки 	= "";
					СтрокаДокиСчетФактуры.ПервичныйДокументДляСопоставления = Неопределено;
					СтрокаДокиСчетФактуры.ТекстОшибки 			= "";
					СтрокаДокиСчетФактуры.КомментарийКДействию 	= "";
					
					ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Текст 			= "Найти документы";
					ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Подсказка 		= "Найти документы для сопоставления";
					ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.Надпись;
				КонецЕсли;
				
				Ц = Ц + 1;
			КонецЕсли;	
				
		КонецЦикла;
		
		ОтмеченныеСтроки = ТаблицаСопоставитьСчетФактуры.НайтиСтроки(Новый Структура("вкл", Истина));
		Если ОтмеченныеСтроки.Количество() = 0 Тогда
			ВклВсеФлажкиСопоставитьСчетФактуры = Ложь;
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Текст 			= "Найти документы";
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Подсказка 		= "Найти документы для сопоставления";
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.Надпись;
		КонецЕсли;
				
		ИсходныйЗаголовок = ПолучитьЗаголовокСтраницыИзКэш(ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСчетФактуры.Имя);
		ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСчетФактуры.Заголовок = ИсходныйЗаголовок + " (" + Строка(ТаблицаСопоставитьСчетФактуры.Количество()) + ")";
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры
	
	
	Функция НайтиДокумент(ТипДокументов, СтруктураФильтры, Document, ТекстСостояния)
		
		Док = Неопределено;
		МассивНайденныхДокументов = Новый Массив;
				
		Если ТипДокументов = "СчетФактураПолученный" И Document.InitialDocumentIds.Count = 0 Тогда
					
			Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" Тогда
				Запрос = ПолучитьМодульПрог("Модуль_ИнтеграцияУТ102").СформироватьЗапросВыборкаНезависимыхСФ(ТипДокументов, СтруктураФильтры);
			Иначе
				Запрос = СформироватьЗапросВыборкаНезависимыхСФ(ТипДокументов, СтруктураФильтры);
			КонецЕсли;
			ВыборкаДокументов = Запрос.Выполнить().Выбрать();
			Если НЕ ВыборкаДокументов.Количество()=0 Тогда
				Пока ВыборкаДокументов.Следующий() Цикл
					МассивНайденныхДокументов.Добавить(ВыборкаДокументов.Док);					
				КонецЦикла;
			КонецЕсли;
			Если МассивНайденныхДокументов.Количество()=1 Тогда
				ТекстСостояния = СтруктураДействийПоДокументу.ГотовКСопоставлению;
			ИначеЕсли МассивНайденныхДокументов.Количество()>1 Тогда
				ТекстСостояния = СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов;
			ИначеЕсли МассивНайденныхДокументов.Количество()=0 Тогда
				ТекстСостояния = СтруктураДействийПоДокументу.Документ1СДляСопоставленияНеНайден;
			КонецЕсли;
					
		Иначе		
		
			Если ТипДокументов = "СчетФактураПолученный" Тогда
				массивСсылокРНК = ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(Document);
				Док = Модуль_ИнтеграцияОбщий.НайтиПодходящийСчетФактуруИзРНК(массивСсылокРНК);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Док) Тогда
				МассивНайденныхДокументов.Добавить(Док);
				ТекстСостояния = СтруктураДействийПоДокументу.ГотовКСопоставлению;
				Возврат МассивНайденныхДокументов;
			Иначе
				Если ТипДокументов <> "СчетФактураПолученный" И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияУТ102" Тогда
					
					Запрос = СформироватьЗапросДляВыборкиДокументов(ТипДокументов, СтруктураФильтры);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если НЕ Выборка.Количество() = 0 Тогда
						Пока Выборка.Следующий() Цикл
							DocumentId = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(Выборка.Док);
							Если ЗначениеЗаполнено(DocumentId) = Ложь Тогда
								МассивНайденныхДокументов.Добавить(Выборка.Док);	
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипДокументов = "СчетФактураПолученный" Тогда
				Если МассивСсылокРНК.Количество()=0 Тогда
					ТекстСостояния = СтруктураДействийПоДокументу.НеНайденСопоставленныйДокОснование;	
				Иначе
					ТекстСостояния = СтруктураДействийПоДокументу.ДокументНеНайден;	
				КонецЕсли;
			Иначе
				Если МассивНайденныхДокументов.Количество()=1 Тогда
					ТекстСостояния = СтруктураДействийПоДокументу.ГотовКСопоставлению;
				ИначеЕсли МассивНайденныхДокументов.Количество()>1 Тогда
					ТекстСостояния = СтруктураДействийПоДокументу.НайденоНесколькоПодходящихДокументов;
				ИначеЕсли МассивНайденныхДокументов.Количество()=0 Тогда
					ТекстСостояния = СтруктураДействийПоДокументу.Документ1СДляСопоставленияНеНайден;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат МассивНайденныхДокументов;
		
	КонецФункции
	
	Функция СформироватьЗапросВыборкаНезависимыхСФ(ТипДокументов, СтруктураФильтров)
		
		Запрос = Новый Запрос;
			
		Если ПолеВыбораСценарий = "СценарийБазовыйСуммаИСклад" Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка КАК Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.Проведен";
			
			Для каждого Фильтр из СтруктураФильтров Цикл
				Если НЕ Фильтр.Значение = Неопределено Тогда
					
					Если Найти(Фильтр.Ключ, "Склад")>0 Тогда 
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование ССЫЛКА Документ.ПоступлениеТоваровУслуг
						|	И Док.ДокументОснование."+Фильтр.Ключ+" В (&пар" + Фильтр.Ключ+")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
					Иначе
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
						Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);	
					КонецЕсли;
					
				КонецЕсли;				
			КонецЦикла;
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка КАК Док
			|ИЗ
			|	Документ." + ТипДокументов + " КАК Док
			|ГДЕ
			|   Док.Ссылка.Проведен";
			
			Для каждого Фильтр Из СтруктураФильтров Цикл
				Если НЕ Фильтр.Значение = Неопределено Тогда
					Если Найти(Фильтр.Ключ,"Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка."+Фильтр.Ключ+" В (&пар" + Фильтр.Ключ+")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Ключ + " = &пар" + Фильтр.Ключ;
						Запрос.УстановитьПараметр("пар" + Фильтр.Ключ, Фильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияАльфаАвто41" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг", "Документ.ПоступлениеТоваров");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаВходящегоДокумента", ".ВхДокДата");
		КонецЕсли;
						
		Возврат Запрос;
		
	КонецФункции
	
	Функция СформироватьЗапросДляВыборкиДокументов(ТипДокументов, стФильтр)
		Запрос = Новый Запрос;
		Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК Док
			|ГДЕ
			|	Док.Проведен";
			Для каждого парФильтр Из стФильтр Цикл
				Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Док."+ парФильтр.Ключ+" В (&пар" + парФильтр.Ключ+")";
					Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
				Иначе 
					Запрос.Текст = Запрос.Текст + "
					|	И Док." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
					Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Если  ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАсторТД"
				И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияДалионУМ" Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	Док.Ссылка Док
				|ИЗ
				|	Документ.ПоступлениеДопРасходов КАК Док
				|ГДЕ
				|	Док.Проведен";
				Для каждого парФильтр Из стФильтр Цикл
					Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
						Продолжить;
					Иначе 
						Запрос.Текст = Запрос.Текст + "
						|	И Док." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
						Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ Метаданные.Документы.Найти("ПоступлениеНМА") = Неопределено Тогда //!! проверить по конфигурациям
				
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	Док.Ссылка Док
				|ИЗ
				|	Документ.ПоступлениеНМА КАК Док
				|ГДЕ
				|	Док.Проведен";
				Для каждого парФильтр Из стФильтр Цикл
					Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
						Продолжить;
					Иначе 
						Запрос.Текст = Запрос.Текст + "
						|	И Док." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
						Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
						
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.Проведен";
			
			Для каждого парФильтр Из стФильтр Цикл
				Если парФильтр.Значение <> Неопределено Тогда
					Если Найти(парФильтр.Ключ,"Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование."+парФильтр.Ключ+" В (&пар" + парФильтр.Ключ+")";
						Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + парФильтр.Ключ + " = &пар" + парФильтр.Ключ;
						Запрос.УстановитьПараметр("пар" + парФильтр.Ключ, парФильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяМодуляИнтеграции = "Модуль_ИнтеграцияАльфаАвто41" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг", "Документ.ПоступлениеТоваров");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаВходящегоДокумента", ".ВхДокДата");
		ИначеЕсли ИмяМодуляИнтеграции = "Модуль_ИнтеграцияДалионУМ" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Организация", ".Фирма");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СкладОрдер", ".Склад");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг", "Документ.ПриходнаяНакладная");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаВходящегоДокумента", ".ДатаСчетаФактуры");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".НомерВходящегоДокумента", ".ВходящийНомер");
		ИначеЕсли ИмяМодуляИнтеграции = "Модуль_ИнтеграцияАсторТД" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.СчетФакутраПолученный.ДокументыОснования", "Документ.РегистрацияСчетаФактуры.СоставНДС");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Организация", ".Фирма");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СуммаДокумента", ".ИтогоВсего");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СкладОрдер", ".Склад");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПоступлениеТоваровУслуг", "Документ.ПриходнаяНакладная");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаВходящегоДокумента", ".ДатаДокумента");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".НомерВходящегоДокумента", ".НомерДокумента");
		КонецЕсли;
		
		Возврат Запрос;
		
	КонецФункции
	
	Процедура СопоставитьВыделенные(ВидДокумента)
		
		Если НЕ ЗначениеЗаполнено(СценарийСопоставления) Тогда
			Предупреждение("Выберите сценарий, по которому будет происходить поиск документов в 1С.", , КраткоеНаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		Если ВидДокумента = "ДокументыПоступления" Тогда
			СтрокиДляСопоставления = ТаблицаСопоставитьДокументыПоступления.НайтиСтроки(Новый Структура("вкл", Истина));
		Иначе
			СтрокиДляСопоставления = ТаблицаСопоставитьСчетФактуры.НайтиСтроки(Новый Структура("вкл", Истина));
		КонецЕсли;
		
		
		Если СтрокиДляСопоставления.Количество() = 0 Тогда
			Предупреждение("Выберите хотя бы один документ.",, КраткоеНаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		КоличествоВыгружено = 0;
		РазмерВыгрузки = СтрокиДляСопоставления.Количество();	
		ЗакрыватьФорму = Ложь;
		
		Для каждого СтрокаСопоставления из СтрокиДляСопоставления Цикл
			
			Document = СтрокаСопоставления.ЭДОбъект;
			
			Если ЗначениеЗаполнено(СтрокаСопоставления.ПервичныйДокументДляСопоставления) Тогда
				
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(
				СтрокаСопоставления.ПервичныйДокументДляСопоставления, Document.DocumentId, Document.OrganizationId, Document.Type);
				
				СтрокаСопоставления.ПервичныйДокумент  = СтрокаСопоставления.ПервичныйДокументДляСопоставления;
				СтрокаСопоставления.СостояниеОбработки = "";
				СтрокаСопоставления.Вкл = Ложь;
				
				ДокументОбъект = Неопределено;
				ДокументМетаданные = СтрокаСопоставления.ПервичныйДокумент.Метаданные();
				
				Если ДокументМетаданные.Реквизиты.Найти("КодСпособаПолучения") <> Неопределено
					И СтрокаСопоставления.ПервичныйДокумент.КодСпособаПолучения <> 2 Тогда
					
					Если ДокументОбъект = Неопределено Тогда
						ДокументОбъект = СтрокаСопоставления.ПервичныйДокумент.ПолучитьОбъект();
					КонецЕсли;
					
					ДокументОбъект.КодСпособаПолучения = 2;
					
				КонецЕсли;
				
				Если ДокументМетаданные.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено
					И СокрЛП(СтрокаСопоставления.ПервичныйДокумент.НомерВходящегоДокумента) <> СокрЛП(СтрокаСопоставления.Номер) Тогда
					
					Если ДокументОбъект = Неопределено Тогда
						ДокументОбъект = СтрокаСопоставления.ПервичныйДокумент.ПолучитьОбъект();
					КонецЕсли;
					
					ДокументОбъект.НомерВходящегоДокумента = СокрЛП(СтрокаСопоставления.Номер);
					
				КонецЕсли;
				
				Если ДокументМетаданные.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено
					И НачалоДня(СтрокаСопоставления.ПервичныйДокумент.ДатаВходящегоДокумента) <> НачалоДня(СтрокаСопоставления.Дата) Тогда
					
					Если ДокументОбъект = Неопределено Тогда
						ДокументОбъект = СтрокаСопоставления.ПервичныйДокумент.ПолучитьОбъект();
					КонецЕсли;
					
					ДокументОбъект.ДатаВходящегоДокумента = СтрокаСопоставления.Дата;
					
				КонецЕсли;
				
				Если ДокументОбъект <> Неопределено И ДокументОбъект.Модифицированность() Тогда
					
					Попытка
						ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						Сообщить("Не удалось обновить реквизиты документа " + СтрокаСопоставления.ПервичныйДокумент + "!" + Символы.ПС + ОписаниеОшибки);
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли ДокументМожноСопоставлять(СтрокаСопоставления.ЭДОбъект) Тогда 		   
				
				ТипДокументов = ?(Найти(Document.Type, "Invoice") > 0, "СчетФактураПолученный", "ПоступлениеТоваровУслуг");
				
				СтруктураФильтров = СформироватьНаборФильтровДляПоискаДокументав1С(СтрокаСопоставления, ВидДокумента);
				
				ТекстСостояния = "";
				МассивНайденныхДокументов = НайтиДокумент(ТипДокументов, СтруктураФильтров, Document, ТекстСостояния);
				
				Если МассивНайденныхДокументов.Количество()=1 Тогда
					
					СтрокаСопоставления.ПервичныйДокументДляСопоставления = МассивНайденныхДокументов[0];
					СтрокаСопоставления.Вкл 					= Истина;
					СтрокаСопоставления.СостояниеОбработки 		= ТекстСостояния;
					СтрокаСопоставления.КомментарийКДействию 	= "Документ готов к сопоставлению";
					
					Если (СтрокаСопоставления.ПервичныйДокументДляСопоставления.метаданные().реквизиты.найти("СуммаДокумента")<>неопределено) и 
						(СтрокаСопоставления.ПервичныйДокументДляСопоставления.СуммаДокумента <> Окр(Document.total, 2)) 
					Тогда 
						 СтрокаСопоставления.Вкл = ложь;
						 СтрокаСопоставления.СостояниеОбработки = СтруктураДействийПоДокументу.НеСовпадаютСуммы;
						 СтрокаСопоставления.КомментарийКДействию = "Сумма электронного документа - " + Окр(Document.total, 2) 
						 												+ Символы.ПС + "Сумма документа 1С - " + СтрокаСопоставления.ПервичныйДокументДляСопоставления.СуммаДокумента;
					КонецЕсли;	 
						
				ИначеЕсли МассивНайденныхДокументов.Количество()>1 Тогда
																	
					Для каждого СтрокаМассива из МассивНайденныхДокументов Цикл
						НайденныеСтроки = ТаблицаВыбораДокументов.НайтиСтроки(Новый Структура("ДокументВ1С, ДокументЭДО", СтрокаМассива, Document.DocumentId));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаТаблВыбора = ТаблицаВыбораДокументов.Добавить();
							НоваяСтрокаТаблВыбора.ДокументЭДО = Document.DocumentId;
							НоваяСтрокаТаблВыбора.ДокументВ1С = СтрокаМассива;
						КонецЕсли;
					КонецЦикла;
					
					СтрокаСопоставления.СостояниеОбработки = ТекстСостояния;
					СтрокаСопоставления.Вкл = Ложь;
					
				ИначеЕсли МассивНайденныхДокументов.Количество()<1 Тогда
					
					СтрокаСопоставления.Вкл = Ложь;
					СтрокаСопоставления.СостояниеОбработки = ТекстСостояния;
					СтрокаСопоставления.КомментарийКДействию = "В базе 1С не найдены не сопоставленные документы, удовлетворяющие сценарию сопоставления";
										
				КонецЕсли;
				
			КонецЕсли;
				
			Элементыформы.ПанельОбновлениеСтатуса.Видимость = Истина;
			КоличествоВыгружено = КоличествоВыгружено + 1;
			ВремяОтображения 	= ТекущаяДата();
			ОбновитьСтатусПроцессаСопоставления();
			
		КонецЦикла;
		
		Если НЕ РазмерВыгрузки = 0 Тогда
			КоличествоВыгружено = КоличествоВыгружено + 1;
			ОбновитьСтатусПроцессаСопоставления();		
		КонецЕсли;
				
		Если ВидДокумента = "ДокументыПоступления" Тогда
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Текст			= "Сопоставить";
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Подсказка		= "Сопоставить найденные документы";
			ЭлементыФормы.КоманднаяПанель10.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
			
			ОбновитьТаблицуСопоставитьДокументыПоступления();
		Иначе
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Текст			= "Сопоставить";
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Подсказка		= "Сопоставить найденные документы";
			ЭлементыФормы.КоманднаяПанель11.Кнопки.КнопкаСопоставить.Отображение	= ОтображениеКнопкиКоманднойПанели.НадписьКартинка;	
			
			ОбновитьТаблицуСопоставитьСчетФактуры();
		КонецЕсли;

		Если ТекущийСценарий = "СопоставитьИПодписать" Тогда
			ОбновитьТаблицуДокументовПодписать();
		КонецЕсли;
		ОбновитьТаблицуОбработкаЗавершена();
				
	КонецПроцедуры
	
	Процедура ОбновитьСтатусПроцессаСопоставления()
		
		Если КоличествоВыгружено <= РазмерВыгрузки Тогда
			Элементыформы.НадписьВыполняемоеДействие.Значение = "Производится сопоставление документов ("+КоличествоВыгружено+" из "+ РазмерВыгрузки+")";
		Иначе
			Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
			Если ЗакрыватьФорму Тогда
				Оповестить("ОбновитьФормуДиадок", , ЭтаФорма);
				ЭтаФорма.Закрыть();
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецПроцедуры
	
	Процедура КнопкаОткрытьДокумент1СНажатие(Элемент)
		
		Если Элементыформы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
			Предупреждение("Выберите документ.",, КраткоеНаименованиеСистемы);
		Иначе 
			Если Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокументДляСопоставления = Неопределено Тогда
				Предупреждение("Нет соответствующего документа в 1С для открытия.",,КраткоеНаименованиеСистемы);
			Иначе
				Элементыформы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокументДляСопоставления.Получитьформу().Открыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
		
	Функция ПроверитьВозможностьСопоставления(стр)
		
		Если НЕ ЗначениеЗаполнено(стр.ПервичныйДокумент) И ЗначениеЗаполнено(стр.ПервичныйДокументДляСопоставления) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
		
	Функция ЭтоУсловноКорректныйДокумент(СтрокаТаблицыДокументов)
		
		ВозвращаемоеЗначение = Ложь;
		
		Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьИПодписать
			ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьСФ Тогда
			
			ВозвращаемоеЗначение = Истина;
			
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецФункции
	
	Функция ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицыДокументов)
		
		ВозвращаемоеЗначение = Ложь;
		
		Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СоздатьОтсутствующиеСФ
			ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ОтказатьВПодписи 
			ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
			
			ВозвращаемоеЗначение = Истина;
			
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецФункции
	
	Функция ДокументЕщеНеОбработан(СтрокаТаблицыДокументов)
		
		ВозвращаемоеЗначение = Ложь;
		
		Если ЭтоФормализованныйТОРГ12(Лев(СтрокаТаблицыДокументов.ЭДОбъект.Type, 7)) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Лев(СтрокаТаблицыДокументов.ЭДОбъект.Type, 7)) Тогда
			
			ВозвращаемоеЗначение = ?(ЭтоВходящийДокЕщеБезПодписиИОтказа(СтрокаТаблицыДокументов.ЭДОбъект.Status), Истина, Ложь);		
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтрокаТаблицыДокументов.ЭДОбъект.Type, 7)) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.ПервичныйДокумент) ИЛИ СтрокаТаблицыДокументов.ЭДОбъект.AmendmentRequested Тогда	
				ВозвращаемоеЗначение = Ложь;
			Иначе
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецФункции
	
	Функция СформироватьНаборФильтровДляПоискаДокументаВ1С(СтрокаТаблицыДокументов, ВидДокумента)
		
		СтруктураФильтров = Новый Структура;
		
		ЭлементыФормы.НадписьРасшифровка.Заголовок = "";
		
		Если ВидДокумента = "ДокументыПоступления" Тогда
			ВыбранныйСценарий= СценарийСопоставления;
		Иначе
			ВыбранныйСценарий= СценарийСопоставленияСФ;
		КонецЕсли;
			
		СтруктураФильтров = СформироватьБазовыйНаборФильтровДляПоискаДокументаВ1С(СтрокаТаблицыДокументов, СтруктураФильтров);
		
		Если ВыбранныйСценарий = "СценарийБазовыйСуммаИДата" Тогда
			
			СтруктураФильтров.Вставить("ДатаВходящегоДокумента", СтрокаТаблицыДокументов.ЭДОбъект.DocumentDate);
			
			Попытка
				СуммаВсего = Окр(СтрокаТаблицыДокументов.ЭДОбъект.Total, 2);
			Исключение
				СуммаВсего = 0;
			КонецПопытки;
			
			СтруктураФильтров.Вставить("СуммаДокумента", СуммаВсего);
			
			ЭлементыФормы.НадписьРасшифровка.Заголовок = "Сопоставление по полям: Организация, Контрагент, Сумма, Дата вх. документа";
			
		ИначеЕсли ВыбранныйСценарий = "СценарийБазовыйДатаИНомер" Тогда
			
			СтруктураФильтров.Вставить("ДатаВходящегоДокумента", СтрокаТаблицыДокументов.ЭДОбъект.DocumentDate);
			СтруктураФильтров.Вставить("НомерВходящегоДокумента", СтрокаТаблицыДокументов.ЭДОбъект.documentNumber);
			ЭлементыФормы.НадписьРасшифровка.Заголовок = "Сопоставление по полям: Организация, Контрагент, Дата вх. документа, Номер вх. документа";
			
		ИначеЕсли ВыбранныйСценарий = "СценарийБазовыйСуммаИСклад" Тогда
			
			Попытка
				СуммаВсего = Окр(СтрокаТаблицыДокументов.ЭДОбъект.Total, 2);
			Исключение
				СуммаВсего = 0;
			КонецПопытки;
			
			СтруктураФильтров.Вставить("СуммаДокумента", СуммаВсего);
			
			ДобавитьФильтПоСкладу(СтрокаТаблицыДокументов, СтруктураФильтров);
			ЭлементыФормы.НадписьРасшифровка.Заголовок = "Сопоставление по полям: Организация, Контрагент, Сумма, Склад";
			
		КонецЕсли;
		
		Возврат СтруктураФильтров;
		
	КонецФункции
	
	Функция СформироватьБазовыйНаборФильтровДляПоискаДокументаВ1С(СтрокаТаблицыДокументов, СтруктураФильтров)
		
		СтруктураФильтров.Вставить("Организация", СтрокаТаблицыДокументов.Организация);
		СтруктураФильтров.Вставить("Контрагент", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(СтрокаТаблицыДокументов.ЭДОбъект.Counteragent.Id, СтрокаТаблицыДокументов.ЭДОбъект.Organization.id));
				
		Возврат СтруктураФильтров;
		
	КонецФункции
	
	Процедура ДобавитьФильтПоСкладу(СтрокаТаблицыДокументов, СтруктураФильтров)
		
		НазваниеРеквизитаСклад = "";
		Если  ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияБух"  Тогда
			НазваниеРеквизитаСклад = "Склад"
		Иначе
			НазваниеРеквизитаСклад = "СкладОрдер"
		КонецЕсли;
		
		МассивСкладовПоИД = Новый Массив();
		Если СтрокаТаблицыДокументов.ЭДОбъект.Department = Неопределено Тогда
			МассивСкладовПоИД = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DepartmentID_2_МассивСкладов("00000000-0000-0000-0000-000000000000");
		Иначе
			МассивСкладовПоИД = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DepartmentID_2_МассивСкладов(СтрокаТаблицыДокументов.ЭДОбъект.Department.Id); 	
		КонецЕсли;
		
		МассивСкладов = Новый Массив();
		Для каждого Склад Из МассивСкладовПоИД Цикл
			ПодразделениеВДД = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Склад_2_DepartmentName(Склад);
			Если НЕ ПустаяСтрока(ПодразделениеВДД) Тогда
				МассивСкладов.Добавить(Склад);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураФильтров.Вставить(НазваниеРеквизитаСклад, МассивСкладов);
		
	КонецПроцедуры
	
	Функция ДокументМожноСопоставлять(Document)
		
		Возврат     (Найти(Document.Type, "Invoice") > 0) или 
					(Найти(Document.Type, "Torg12") > 0) или
					(Найти(Document.Type, "AcceptanceCertificate") > 0);

	КонецФункции
	
//} СОПОСТАВИТЬ

//{ СТАРЫЙ ИНТЕРФЕЙС
    		
	//{ СОХРАНИТЬ ДОКУМЕНТЫ
			
		Процедура СохранитьДокументыНаДиск()
			
			МассивНайденныхСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		
			Если МассивНайденныхСтрок.Количество()=0 Тогда
				Предупреждение("Выберите хотя бы один документ.",, КраткоеНаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			ФормаЗапросаКаталога = ПолучитьФорму("ФормаЗапросКаталога");
			ФормаЗапросаКаталога.Заголовок = "Укажите каталог для выгрузки";
			
			КаталогДляВыгрузки = ВосстановитьЗначение("Диадок_КаталогДляВыгрузкиФайлов");
			
			Если НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
				Попытка 
					WshShell = Новый COMОбъект("WScript.Shell");
					КаталогДляВыгрузки = WshShell.CurrentDirectory;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			ФормаЗапросаКаталога.Каталог = КаталогДляВыгрузки;
			
			ПараметрыВыгрузкиДокументов = ФормаЗапросаКаталога.ОткрытьМодально();
			Если ПараметрыВыгрузкиДокументов = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(ПараметрыВыгрузкиДокументов.Каталог) Тогда
				Возврат;
			КонецЕсли;
			
			КаталогДляВыгрузки	= ПараметрыВыгрузкиДокументов.Каталог;
			СохранятьПротокол	= ПараметрыВыгрузкиДокументов.СохранятьПротокол;
			
			СохранитьЗначение("Диадок_КаталогДляВыгрузкиФайлов", КаталогДляВыгрузки);
			
			СохранитьВыделенные();
			
		КонецПроцедуры
		
		Процедура СохранитьВыделенные()
	
			Если НЕ ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда 
				Предупреждение("Укажите каталог, куда будут выгружаться файлы.",,КраткоеНаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			МассивВыгрузки = ТаблицаДокументов.НайтиСтроки(Новый Структура("вкл", Истина));
			Если МассивВыгрузки.Количество() = 0 Тогда 
				Предупреждение("Не выбрано ни одного документа для выгрузки.",, КраткоеНаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			РазмерВыгрузки 		= МассивВыгрузки.Количество();
			КоличествоВыгружено = 0;
			ВремяОтображения 	= ТекущаяДата();
			Элементыформы.ПанельОбновлениеСтатуса.Видимость 	= Истина;
			ЭлементыФормы.НадписьВыполняемоеДействие.Заголовок 	= "Производится сохранение документов";
			
			ЗапуститьВыгрузкуДокументов();
			ОбновитьСтатусВыгрузки();
			
		КонецПроцедуры
		
		Процедура ЗапуститьВыгрузкуДокументов()
	
			МассивЗадач = Новый Массив();
			
			ВыборкаСтрок =  ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
			
			Для Ц = 0 По ВыборкаСтрок.Количество()-1 Цикл
				
				Строка = ВыборкаСтрок[Ц];
				
				Попытка
											
					Document 	= Строка.ЭДОбъект;
					Подкаталог 	= "INN_" + Document.Organization.INN + "\" + Document.type + "_" + Прав(Document.DocumentId, 36);
					КаталогПакета = КаталогДляВыгрузки + "\" + Подкаталог;
					
					СоздатьКаталог(КаталогПакета);
					СформироватьФайлСвязанныхДокументах(Document, КаталогПакета);
					Строка.Вкл 					= Ложь;
					ТаблицаДокументовПриИзмененииФлажка("", Ложь);
					Строка.СостояниеОбработки	= СтруктураДействийПоДокументу.УспешноСохранен;
					
					ЗадачаВыгрузки = Document.SaveAllContentAsync(КаталогПакета, СохранятьПротокол);
					
					МассивЗадач.Добавить(ЗадачаВыгрузки);
					
				Исключение 
					
					Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь; 
					
					Строка.Вкл 					= Ложь;
					ТаблицаДокументовПриИзмененииФлажка("", Ложь);
					Строка.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаСохранения;
					
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "Ошибка при вызове метода контекста (СоздатьКаталог)")>0 Тогда
						Строка.КомментарийКДействию = "Не удалось получить доступ к указанному каталогу. Возможно у Вас недостаточно прав.";
					Иначе
						Строка.КомментарийКДействию = ТекстОшибки;
					КонецЕсли;
					
				КонецПопытки;	
				
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура СформироватьФайлСвязанныхДокументах(Document, КаталогПакета, ПризнакОшибки=Неопределено)
	
			Файл = Новый ЗаписьXML;
			
			Файл.ОткрытьФайл(КаталогПакета + "\RelatedDocuments_" + Document.DocumentId + ".xml",  "UTF-8");
			
			Файл.ЗаписатьОбъявлениеXML();
			Файл.ЗаписатьКомментарий("Список связанных документов");
			
			Файл.ЗаписатьНачалоЭлемента("V8Data");
			Файл.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
			
			Файл.ЗаписатьКомментарий("Данный документ");
			Файл.ЗаписатьНачалоЭлемента("Document");
			Файл.ЗаписатьАтрибут("OrganizationId",	Document.OrganizationId);
			Файл.ЗаписатьАтрибут("DocumentId",		Document.DocumentId);
			Файл.ЗаписатьКонецЭлемента(); //Document
			
			Файл.ЗаписатьКомментарий("Список идентификаторов документов, на которые ссылается данный");
			Файл.ЗаписатьНачалоЭлемента("ParentDocumentIds");
			InitialDocumentIds=	Document.InitialDocumentIds;
			Для ц = 0 по  InitialDocumentIds.Count-1 Цикл
				InitialDocument = InitialDocumentIds.GetItem(ц); 
				Файл.ЗаписатьНачалоЭлемента("ParentDocument");
				Файл.ЗаписатьАтрибут("DocumentId", InitialDocument);
				Файл.ЗаписатьКонецЭлемента(); //ParentDocument
			КонецЦикла;
			Файл.ЗаписатьКонецЭлемента(); //ParentDocumentIds
			
			Файл.ЗаписатьКомментарий("Список идентификаторов документов, которые ссылаются на данный");
			Файл.ЗаписатьНачалоЭлемента("SubordinateDocumentIds");
			SubordinateDocumentIds=	Document.SubordinateDocumentIds;
			Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
				SubordinateDocument =  SubordinateDocumentIds.getItem(ц);
				Файл.ЗаписатьНачалоЭлемента("SubordinateDocument");
				Файл.ЗаписатьАтрибут("DocumentId", SubordinateDocument);
				Файл.ЗаписатьКонецЭлемента(); //SubordinateDocument
			КонецЦикла;
			Файл.ЗаписатьКонецЭлемента(); //SubordinateDocumentIds
			
			Файл.ЗаписатьКонецЭлемента();//V8Data
			
		КонецПроцедуры
		
		Процедура ОбновитьСтатусВыгрузки() 
		
				Если КоличествоВыгружено <= МассивЗадач.Количество() Тогда
					Элементыформы.НадписьВыполняемоеДействие.Значение = "Производится сохранение документов (" + КоличествоВыгружено + " из " + РазмерВыгрузки + ")";
				Иначе
					Элементыформы.ПанельОбновлениеСтатуса.Видимость = Ложь;
					Возврат;
				КонецЕсли;
				
				Для Индекс = 0 По МассивЗадач.Количество()-1 Цикл
					
					ЗадачаВыгрузки=	МассивЗадач[Индекс];
					Если ЗадачаВыгрузки.IsCompleted = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоВыгружено = КоличествоВыгружено + 1; 
					
				КонецЦикла;
				
				ПодключитьОбработчикОжидания("ОбновитьСтатусВыгрузки", 0.1, Истина);
				
			КонецПроцедуры
			
	//} СОХРАНИТЬ ДОКУМЕНТЫ	
	
	//{ ТОРГОВЫЕ СЕТИ
			
		Процедура КомплекснаяОбработкаДляТорговыхСетей()
			
			Если РежимРаботы = НаборРежимовРаботы.АнализДанных Тогда
			
				НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ЭлементыФормы.ПанельОбновлениеСтатуса.Видимость 	= Истина;
					ЭлементыФормы.НадписьВыполняемоеДействие.Заголовок 	= "Производится обработка документов";
					
					ЗаполнитьТаблицуКонтентов();
					
					ЭлементыФормы.ПанельОбновлениеСтатуса.Видимость = Ложь;
					
					ПровестиАнализДокументов(НайденныеСтроки);
										
					ЭлементыФормы.ПолеВыбораСценарий.Доступность = Истина;
					ПолеВыбораСценарий = "ОбработатьВсеАвтоматически";
					РежимРаботы = НаборРежимовРаботы.ОбработкаДанных;
					ЭлементыФормы.КоманднаяПанель7.Кнопки.ВыполнитьОперацию.Текст = "Выполнить обработку";
					
					ТаблицаКонтентов.Очистить();
					
				Иначе
					Предупреждение("Выберите хотя бы один документ", , КраткоеНаименованиеСистемы);
					Возврат;
				КонецЕсли;
				
			ИначеЕсли РежимРаботы = НаборРежимовРаботы.ОбработкаДанных Тогда
				
				DiadocConnection =	Модуль_РаботаССерверомДиадок.ПолучитьDiadocConnection();
				Если DiadocConnection.AuthenticateType = "Login" Тогда
					Предупреждение("Обработка юридически значимых документов возможна только при авторизации по сертификату");
					Возврат;
				КонецЕсли;
				
				Если Вопрос("По выбранным документам будут выполнены действия: подписания, отказы, уточнения. Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				
				ВыполнитьОбработкуДокументов(); 
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ЗаполнитьТаблицуКонтентов()
	
			МассивЗадачКонтента= Новый Массив;
			
			ТаблицаКонтентов = Новый ТаблицаЗначений;
			ТаблицаКонтентов.Колонки.Добавить("DocumentId");
			ТаблицаКонтентов.Колонки.Добавить("BoxId");
			ТаблицаКонтентов.Колонки.Добавить("Content");
			
			НомерСтрокиТаблицыДокументов = 0;
			
			Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
				
				ОбработкаПрерыванияПользователя();
				
				Если РежимРаботы = НаборРежимовРаботы.АнализДанных
					И Не СтрокаТаблицы.Вкл Тогда 
					Продолжить;
				КонецЕсли;
				
				Пока МассивЗадачКонтента.Количество() = МаксимальноеКоличествоЗаданий Цикл
					ОбработатьМассивЗадачКонтента(МассивЗадачКонтента);
				КонецЦикла;

				Попытка
					ДобавитьЗадачуПолучитьКонтент(МассивЗадачКонтента, СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId, СтрокаТаблицы.ЭДОбъект);
				Исключение
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = "Ошибка получения документа:" + ОписаниеОшибки();
				КонецПопытки;
				
			КонецЦикла;
			
			Пока НЕ МассивЗадачКонтента.Количество() = 0 Цикл
				ОбработатьМассивЗадачКонтента(МассивЗадачКонтента);
			КонецЦикла;
			
			ТаблицаКонтентов.Индексы.Добавить("DocumentId, BoxId");

		КонецПроцедуры
		
		Процедура ДобавитьЗадачуПолучитьКонтент(МассивЗадачКонтент, DocumentId, BoxId, ЭДОбъект)
			
			Попытка
				
				Если НЕ ЭтоНеформализованныйДокумент(ЭДОбъект.Type) Тогда
				
					СтруктураЗадачи=	Новый Структура();
					СтруктураЗадачи.Вставить("DocumentId", DocumentId);
					СтруктураЗадачи.Вставить("BoxId", BoxId);
					СтруктураЗадачи.Вставить("Task", ЭДОбъект.GetContentAsync());
				
					МассивЗадачКонтент.Добавить(СтруктураЗадачи);
				
				КонецЕсли;
				
			Исключение
				УстановитьОшибкуВСтроке(BoxId, DocumentId, ОписаниеОшибки());
			КонецПопытки;
			
		КонецПроцедуры
		
		Процедура ОбработатьМассивЗадачКонтента(МассивЗадачКонтента)
			
			МассивУдаляемых=	Новый Массив();
			
			Для каждого СтруктураКонтент Из МассивЗадачКонтента Цикл
				Если СтруктураКонтент.Task.IsCompleted Тогда
					
					Попытка
						
						DocumentContent = СтруктураКонтент.Task.Result;
						
						НоваяСтрока = ТаблицаКонтентов.Добавить();
						НоваяСтрока.DocumentId 	= СтруктураКонтент.DocumentId;
						НоваяСтрока.BoxId 		= СтруктураКонтент.BoxId;
						НоваяСтрока.Content 	= DocumentContent;
						
					Исключение
						УстановитьОшибкуВСтроке(СтруктураКонтент.BoxId, СтруктураКонтент.DocumentId, ОписаниеОшибки());
					КонецПопытки;		
					
					МассивУдаляемых.Добавить(СтруктураКонтент);
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
				Индекс=	МассивЗадачКонтента.Найти(УдаляемыйЭлемент);
				Если НЕ Индекс = Неопределено Тогда
					МассивЗадачКонтента.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
			
		КонецПроцедуры
		
		Процедура УстановитьОшибкуВСтроке(BoxId, DocumentId, ОписаниеОшибки)
			
			ОтборСтрок=	Новый Структура("BoxId, DocumentId", BoxId, DocumentId);
			НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока=	НайденныеСтроки[0];
				НайденнаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				НайденнаяСтрока.КомментарийКДействию = "Ошибка получения документа Диадок:" + ОписаниеОшибки;
			КонецЕсли;
			
		КонецПроцедуры
		
	//} ТОРГОВЫЕ СЕТИ
	
	//{ ТОРГОВЫЕ СЕТИ - АНАЛИЗ ДОКУМЕНТОВ
		
		Процедура ПровестиАнализДокументов(НайденныеСтроки)
		
			Состояние("Идет анализ документов");
			
			ЗаголовокДляТекущегоСостоянияОбработки = "Производится анализ документов";
			ПоказатьТекущееСостояниеОбработки(НайденныеСтроки, ЗаголовокДляТекущегоСостоянияОбработки);
			
			КоличествоДокументовСПредупреждениями= 0;
			
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				Если НЕ ЭтоСчетФактура(Лев(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда 
					
					АнализСтрокиСтрокиТаблицы(СтрокаТаблицы);
					
					КоличествоВыгружено = КоличествоВыгружено + 1;
					
					ОбновитьТекущееСостояниеОбработки(ЗаголовокДляТекущегоСостоянияОбработки);
					
					Если СтрокаТаблицы.СписокОшибок.Количество() > 0 Тогда
						Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
							Если ЭлементСписка.Значение.ТипОшибки = "Предупреждение" Тогда
								КоличествоДокументовСПредупреждениями= КоличествоДокументовСПредупреждениями + 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;	
			КонецЦикла;
			
			Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				
				Если ЭтоСчетФактура(Лев(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда 
					
					АнализСтрокиСтрокиТаблицы(СтрокаТаблицы);
					
					КоличествоВыгружено= КоличествоВыгружено + 1;
					
					ОбновитьТекущееСостояниеОбработки(ЗаголовокДляТекущегоСостоянияОбработки);
					
					Если СтрокаТаблицы.СписокОшибок.Количество() > 0 Тогда
						Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
							Если ЭлементСписка.Значение.ТипОшибки = "Предупреждение" Тогда
								КоличествоДокументовСПредупреждениями= КоличествоДокументовСПредупреждениями + 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли
					
				КонецЕсли;	
				
			КонецЦикла;
			
			ЭлементыФормы.НадписьСписокПредупреждений.Заголовок= "Есть документы с предупреждениями " + "(" + КоличествоДокументовСПредупреждениями + ")";
			
			УстановитьРежимСверткиЭлементаУправления(ЭлементыФормы.ПанельСписокПредупреждений,
			?(КоличествоДокументовСПредупреждениями > 0, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Лево));
			
			ТаблицаДокументовПриИзмененииФлажка("", Ложь);
			
			СкрытьТекущееСостояниеОбработки();
			
		КонецПроцедуры
		
		Процедура АнализСтрокиСтрокиТаблицы(СтрокаТаблицы)
			
			ОбработкаПрерыванияПользователя();
			
			СтрокаТаблицы.КомментарийКДействию= "";
			СтрокаТаблицы.СписокОшибок.Очистить();
			
			КоллекцияОшибок= Новый Соответствие;
			
			DocumentType= ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок").DocumentType(СтрокаТаблицы.ЭДОбъект, DocumentContent(СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId));
			
			// ТОРГ-12 в формате 551 приказа и Акт в формате 552 приказа пока не поддерживаются (DD1C-240)
			Если 	НРег(Лев(СтрокаТаблицы.ЭДОбъект.AttachmentVersion, 8)) = "tovtorg_"
				Или НРег(Лев(СтрокаТаблицы.ЭДОбъект.AttachmentVersion, 6)) = "rezru_" Тогда
				
				СтрокаТаблицы.Вкл= Ложь;
				СтрокаТаблицы.СостояниеОбработки= СтруктурадействийПоДокументу.Пропустить;
				СтрокаТаблицы.КомментарийКДействию= "Неизвестный формат документа.";
				
			
			ИначеЕсли DocumentType = "UniversalTransferDocument" Тогда // Групповая обработка УПД не поддерживается
				
				СтрокаТаблицы.Вкл= Ложь;
				СтрокаТаблицы.СостояниеОбработки= СтруктурадействийПоДокументу.Пропустить;
				СтрокаТаблицы.КомментарийКДействию= "Текущая версия модуля не поддерживает массовую обработку УПД.";
				
			ИначеЕсли ЭтоСчетФактура(Лев(DocumentType, 7)) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) Тогда
				
				АнализСтрокиСчетФактура(СтрокаТаблицы, КоллекцияОшибок);
				ПроверкаСтрокиСчетФактура(СтрокаТаблицы, КоллекцияОшибок);
				
			ИначеЕсли (ЭтоФормализованныйТОРГ12(DocumentType) 
						ИЛИ ЭтоФормализованныйАктОВыполненииРабот(DocumentType))
					  И ЭтоВходящийДокЕщеБезПодписиИОтказа(СтрокаТаблицы.ЭДОбъект.Status) Тогда
				
				АнализСтрокиАктНакладная(СтрокаТаблицы, КоллекцияОшибок);
				ПроверкаСтрокиАктНакладная(СтрокаТаблицы, КоллекцияОшибок);
				
			ИначеЕсли ЭтоНеформализованныйДокумент(DocumentType) Тогда // Обработка УПД не поддерживается
				
				СтрокаТаблицы.Вкл= Ложь;
				СтрокаТаблицы.СостояниеОбработки= СтруктурадействийПоДокументу.Пропустить;
				СтрокаТаблицы.КомментарийКДействию= "Текущая версия модуля не поддерживает массовую обработку неформализованных документов.";
				
			Иначе
				СтрокаТаблицы.Вкл= Ложь;
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура АнализСтрокиСчетФактура(СтрокаТаблицы, КоллекцияОшибок)
			
			Попытка
				
				СтрокаТаблицы.НомерАкта= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаПоDocument(СтрокаТаблицы.ЭДОбъект, DocumentContent(СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId));
				
				Если ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(СтрокаТаблицы.ЭДОбъект.Counteragent.Id, СтрокаТаблицы.ЭДОбъект.Organization.id) = Неопределено Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "НеСопоставленКонтрагент", "Контрагент """ + СтрокаТаблицы.ЭДОбъект.Counteragent.Name + """ не сопоставлен контрагенту в 1С");
					Возврат;
				КонецЕсли;
				
				Если ПоДокументуВыставленЗапросНаУточнение(СтрокаТаблицы.ЭДОбъект) Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ВыставленЗапросНаУточнение", "По документу выставлен запрос на уточнение");
					Возврат;
				КонецЕсли;	
				
				Если ОрганизацияНаУСН(СтрокаТаблицы.BoxID) Тогда 
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОрганизацияНаУСН", "Организация на упрощённой системе налогообложения");
					Возврат;
				КонецЕсли;	
				
				НайтиПервичныйДокументДляСопоставленияСчетФактура(СтрокаТаблицы, КоллекцияОшибок);
				
			Исключение 
				
				ТекстОшибки = ОписаниеОшибки();
				
				Если Найти(ТекстОшибки, "Ошибка валидации") > 0 Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", ФорматироватьТекстОшибки(ТекстОшибки));
				Иначе
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецПроцедуры
		
		Процедура АнализСтрокиАктНакладная(СтрокаТаблицы, КоллекцияОшибок)
			
			Попытка
				
				DocumentContent= DocumentContent(СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId);
				
				Если DocumentContent = Неопределено Тогда
					
					Попытка
						DocumentContent = СтрокаТаблицы.ЭДОбъект.GetContet();
					Исключение
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "ОшибкаПолученияДанныхДокумента", "Не удалось получить данные документа");
						Возврат;
					КонецПопытки;
					
				КонецЕсли;
				
				ДокументБезНДС= ПолучитьМодульПрог("Модуль_Диадок_РаботаСКонтентом").ПроверитьВДокументеНаличиеНДС(DocumentContent);
				
				Если ДокументБезНДС Тогда
					
					СтрокаТаблицы.НомерАкта= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаПоDocument(СтрокаТаблицы.ЭДОбъект, DocumentContent);
					
				Иначе
					
					СвязаннаяСФ = НайтиСвязаннуюСФВТаблицеДокументов(СтрокаТаблицы.ЭДОбъект);
					
					Если СвязаннаяСФ <> Неопределено Тогда
						
						DocumentContent= DocumentContent(СвязаннаяСФ.DocumentId, СтрокаТаблицы.BoxId);
						
						СтрокаТаблицы.НомерАкта= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаПоDocument(СвязаннаяСФ, DocumentContent);
						
					Иначе
						
						МассивСвязанныхДокументов= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьМассивПодчиненныхDocument(СтрокаТаблицы.ЭДОбъект);
						
						Если МассивСвязанныхДокументов.Количество() = 0 Тогда
							МассивСвязанныхДокументов= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьМассивРодительскихDocument(СтрокаТаблицы.ЭДОбъект);
						КонецЕсли;
						
						Если МассивСвязанныхДокументов.Количество() > 0 И (ЭтоСчетФактура(МассивСвязанныхДокументов[0].Type) ИЛИ ЭтоСчетФактураИсправленная(МассивСвязанныхДокументов[0].Type)) Тогда
							СвязанныйДокумент= МассивСвязанныхДокументов[0];
							DocumentContent=   DocumentContent(СвязанныйДокумент.DocumentId, СвязанныйДокумент.Organization.Id);
						Иначе
							ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", "Для Торг-12 нет связанного счета-фактуры");
							Возврат;
						КонецЕсли;
						
						СтрокаТаблицы.НомерАкта = ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаПоDocument(СтрокаТаблицы.ЭДОбъект, DocumentContent);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(СтрокаТаблицы.ЭДОбъект.Counteragent.Id, СтрокаТаблицы.ЭДОбъект.Organization.id) = Неопределено Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "НеСопоставленКонтрагент", "Контрагент """ + СтрокаТаблицы.ЭДОбъект.Counteragent.Name + """ не сопоставлен контрагенту в 1С");
					Возврат;
				КонецЕсли;
				
				НайтиПервичныйДокументДляСопоставленияАктНакладная(СтрокаТаблицы, КоллекцияОшибок);
				
			Исключение 
				
				ТекстОшибки = ОписаниеОшибки();
				
				Если Найти(ТекстОшибки, "Ошибка валидации") > 0 Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", ФорматироватьТекстОшибки(ТекстОшибки));
				Иначе
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецПроцедуры
		
		Процедура ПроверкаСтрокиСчетФактура(СтрокаТаблицы, КоллекцияОшибок)
			
			СписокДокументовНаПодпись= Новый СписокЗначений;
			
			Если СтрокаТаблицы.ПервичныйДокументДляСопоставления <> Неопределено Тогда
				ВыполнитьПроверку(КоллекцияОшибок, СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись);
			Иначе
				ПодключаемыйМодульТорговыеСетиПослеПроверкиДокумента(КоллекцияОшибок, СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись, DocumentContent(СтрокаТаблицы.ЭДОбъект.documentId, СтрокаТаблицы.ЭДОбъект.Organization.Id));
			КонецЕсли;
			
			Ошибка= 					   Ложь;
			ИсключительнаяОшибка=		   Ложь;
			Предупреждение=				   Ложь;
			СчетФактураВБазе1СОтсутствует= Ложь;
			Разделитель=                   "";
			
			Для Каждого КлючИЗначение ИЗ КоллекцияОшибок Цикл
				
				СтруктураОшибки= КлючИЗначение.Значение;
				
				Если КлючИЗначение.Ключ = "СчетФактураВБазе1СОтсутствует" Тогда
					СчетФактураВБазе1СОтсутствует= Истина;
				КонецЕсли;
				
				Если СтруктураОшибки.ТипОшибки = "ИсключительнаяОшибка" Тогда
					ИсключительнаяОшибка= Истина;
				ИначеЕсли СтруктураОшибки.ТипОшибки = "Ошибка" Тогда
					Ошибка= Истина;
				ИначеЕсли СтруктураОшибки.ТипОшибки = "Предупреждение" Тогда
					Предупреждение= Истина;
				КонецЕсли;
				
				СтрокаТаблицы.СписокОшибок.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
				
				Если НЕ ПустаяСтрока(СтруктураОшибки.ОписаниеОшибки) Тогда
					СтрокаТаблицы.КомментарийКДействию= СтруктураОшибки.ОписаниеОшибки + Разделитель + СтрокаТаблицы.КомментарийКДействию;
					Разделитель= Символы.ПС;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицы.ПервичныйДокументДляСопоставления <> Неопределено Тогда
				
				Разделитель= Разделитель + "Ошибка в связанном Торг-12:" + Символы.ПС;
				
				КоллекцияОшибокВСвязанныхДокументах= ПроверитьСвязанныеДокументыСчетаФактуры(СтрокаТаблицы, СписокДокументовНаПодпись, ТаблицаДокументов);
				
				Для Каждого КлючИЗначение ИЗ КоллекцияОшибокВСвязанныхДокументах Цикл
					
					СтруктураОшибки= КлючИЗначение.Значение;
					
					Если СтруктураОшибки.ТипОшибки = "Информация" Тогда
						Продолжить;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "ИсключительнаяОшибка" Тогда
						ИсключительнаяОшибка= Истина;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "Ошибка" Тогда
						Ошибка= Истина;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "Предупреждение" Тогда
						Предупреждение= Истина;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтруктураОшибки.ОписаниеОшибки) Тогда
						СтрокаТаблицы.КомментарийКДействию= СтруктураОшибки.ОписаниеОшибки + Разделитель + СтрокаТаблицы.КомментарийКДействию;
						Разделитель= Символы.ПС;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИсключительнаяОшибка Тогда
				СтрокаТаблицы.Вкл= Ложь;
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.Пропустить;
			ИначеЕсли Ошибка Тогда
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.ЗапроситьУточнение;
			ИначеЕсли Предупреждение Тогда
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.Пропустить;
			ИначеЕсли СчетФактураВБазе1СОтсутствует Тогда
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ;
			Иначе
				
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.СопоставитьСФ;
				
				Если ПустаяСтрока(СтрокаТаблицы.КомментарийКДействию) Тогда 
					СтрокаТаблицы.КомментарийКДействию= "В документе ошибок не найдено. Для того, чтобы подписать документ Диадок и сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПроверкаСтрокиАктНакладная(СтрокаТаблицы, КоллекцияОшибок)
			
			СписокДокументовНаПодпись= Новый СписокЗначений;
			
			Если СтрокаТаблицы.ПервичныйДокументДляСопоставления <> Неопределено Тогда
				ВыполнитьПроверку(КоллекцияОшибок, СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись);
			Иначе
				ПодключаемыйМодульТорговыеСетиПослеПроверкиДокумента(КоллекцияОшибок, СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись, DocumentContent(СтрокаТаблицы.ЭДОбъект.documentId, СтрокаТаблицы.ЭДОбъект.Organization.Id));
			КонецЕсли;
			
			ИсключительнаяОшибка=  Ложь;
			Ошибка= 			   Ложь;
			Предупреждение=		   Ложь;
			Разделитель=            "";
			РазделительТекстОшибки= "";
			
			Для Каждого КлючИЗначение ИЗ КоллекцияОшибок Цикл
				
				СтруктураОшибки= КлючИЗначение.Значение;
				
				Если СтруктураОшибки.ТипОшибки = "ИсключительнаяОшибка" Тогда
					ИсключительнаяОшибка= Истина;
				ИначеЕсли СтруктураОшибки.ТипОшибки = "Ошибка" Тогда
					Ошибка= Истина;
				ИначеЕсли СтруктураОшибки.ТипОшибки = "Предупреждение" Тогда
					Предупреждение= Истина;
				КонецЕсли;
				
				СтрокаТаблицы.СписокОшибок.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
				
				Если НЕ ПустаяСтрока(СтруктураОшибки.ОписаниеОшибки) Тогда
					СтрокаТаблицы.КомментарийКДействию= СтруктураОшибки.ОписаниеОшибки + Разделитель + СтрокаТаблицы.КомментарийКДействию;
					Разделитель= Символы.ПС;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаТаблицы.ПервичныйДокументДляСопоставления <> Неопределено Тогда
				
				Разделитель= Разделитель + "Ошибка в связанном счете-фактуры:" + Символы.ПС;
				
				КоллекцияОшибокВСвязанныхДокументах= ПроверитьСвязанныеДокументыАктаНакладной(СтрокаТаблицы, СписокДокументовНаПодпись);
				
				Для Каждого КлючИЗначение ИЗ КоллекцияОшибокВСвязанныхДокументах Цикл
					
					СтруктураОшибки= КлючИЗначение.Значение;
					
					Если СтруктураОшибки.ТипОшибки = "Информация" Тогда
						Продолжить;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "ИсключительнаяОшибка" Тогда
						ИсключительнаяОшибка= Истина;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "Ошибка" Тогда
						Ошибка= Истина;
					ИначеЕсли СтруктураОшибки.ТипОшибки = "Предупреждение" Тогда
						Предупреждение= Истина;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтруктураОшибки.ОписаниеОшибки) Тогда
						СтрокаТаблицы.КомментарийКДействию= СтруктураОшибки.ОписаниеОшибки + Разделитель + СтрокаТаблицы.КомментарийКДействию;
						Разделитель= Символы.ПС;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ИсключительнаяОшибка Тогда
				СтрокаТаблицы.Вкл= Ложь;
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.Пропустить;
			ИначеЕсли Ошибка Тогда
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.ОтказатьВПодписи;
			ИначеЕсли Предупреждение Тогда
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.Пропустить;
			Иначе
				
				СтрокаТаблицы.СостояниеОбработки= СтруктураДействийПоДокументу.СопоставитьИПодписать;
				
				Если ПустаяСтрока(СтрокаТаблицы.КомментарийКДействию) Тогда 
					СтрокаТаблицы.КомментарийКДействию= "В документе ошибок не найдено. Для того, чтобы подписать документ Диадок и сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура НайтиПервичныйДокументДляСопоставленияАктНакладная(СтрокаТаблицы, КоллекцияОшибок)
			
			Попытка 
				СтрокаТаблицы.ПервичныйДокументДляСопоставления = НайтиДокументВ1С(СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы);
			Исключение 
				
				ТекстОшибки = ОписаниеОшибки();
				
				Если Найти(ТекстОшибки, "Ошибка валидации") > 0 Тогда
					ТекстОшибки= ФорматироватьТекстОшибки(ТекстОшибки);
					ТекстОшибки= СтрЗаменить(ТекстОшибки, "В счете-фактуре не указан дополнительный параметр", "В связанном счете-фактуре не указан дополнительный параметр");
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", ТекстОшибки);
				Иначе
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецПроцедуры
		
		Процедура НайтиПервичныйДокументДляСопоставленияСчетФактура(СтрокаТаблицы, КоллекцияОшибок)
			
			Попытка 
				СтрокаТаблицы.ПервичныйДокументДляСопоставления = НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, ТаблицаДокументов, КоллекцияОшибок);
			Исключение 
				
				ТекстОшибки = ОписаниеОшибки();
				
				Если Найти(ТекстОшибки, "Ошибка валидации") > 0 Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", ФорматироватьТекстОшибки(ТекстОшибки));
				Иначе
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецПроцедуры
		
		Функция НайтиДокументВ1С(ЭДОбъект, СтрокаТаблицы)
			
			РезультатЗапроса= НайтиДокументВ1С_Запрос(СтрокаТаблицы, ЭДОбъект).Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка= РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Возврат Выборка.Ссылка;
			Иначе 
				ВызватьИсключение("Ошибка валидации: В базе не найден документ контрагента """ + СтрокаТаблицы.Продавец + """ акт приемки №" + СтрокаТаблицы.НомерАкта);
			КонецЕсли;
			
		КонецФункции
		
		Функция DocumentContent(DocumentId, BoxId)
			
			НайденныеСтроки= ТаблицаКонтентов.НайтиСтроки(Новый Структура("DocumentId, BoxId", DocumentId, BoxId));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Возврат НайденныеСтроки[0].Content;
			КонецЕсли;
			
		КонецФункции
		
		Функция НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, ТаблицаДокументов, КоллекцияОшибок)
			
			МассивСсылокРНК = НайтиМассивСсылокДокументовОснований(СтрокаТаблицы, ТаблицаДокументов);
			
			Если МассивСсылокРНК.Количество() > 0 Тогда 
				Возврат МассивСсылокРНК[0];
			Иначе
				ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаВалидации", "Для счет-фактуры нет связанного Торг-12");
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецФункции
		
		Функция НайтиМассивСсылокДокументовОснований(СтрокаТаблицы, ТаблицаДокументов=Неопределено)
			
			Результат = Новый Массив;
			
			Organization = СтрокаТаблицы.ЭДОбъект.Organization;
			
			InitialDocumentIds = СтрокаТаблицы.ЭДОбъект.InitialDocumentIds;
			Для Ц=0 по InitialDocumentIds.count-1 Цикл
				Id = InitialDocumentIds.GetItem(Ц);
				
				НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId",Id, Organization.Id));
				Если НЕ НайденныеСтроки.Количество()=0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					Document = НайденнаяСтрока.ЭДОбъект;
				Иначе
					Попытка
						Document = Organization.GetDocumentById(InitialDocumentIds.GetItem(Ц));
					Исключение
						Document = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
				Если НЕ Document = Неопределено И ЭтоФормализованныйТОРГ12(Document.Type) Тогда
					СсылкаРНК =	НайтиДокументВ1С(Document, СтрокаТаблицы);
					Если НЕ СсылкаРНК = Неопределено Тогда
						Результат.Добавить(СсылкаРНК);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			SubordinateDocumentIds = СтрокаТаблицы.ЭДОбъект.SubordinateDocumentIds;
			Для Ц=0 по SubordinateDocumentIds.count-1 Цикл
				Id = SubordinateDocumentIds.GetItem(Ц);
				
				НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId",Id, Organization.Id));
				Если НЕ НайденныеСтроки.Количество()=0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					Document = НайденнаяСтрока.ЭДОбъект;
				Иначе
					Попытка
						Document = Organization.GetDocumentById(SubordinateDocumentIds.GetItem(Ц));
					Исключение
						Document = Неопределено;
					КонецПопытки;	
				КонецЕсли;
				
				Если НЕ Document = Неопределено И ЭтоФормализованныйТОРГ12(Document.Type) Тогда
					СсылкаРНК =	НайтиДокументВ1С(Document, СтрокаТаблицы);
					Если НЕ СсылкаРНК = Неопределено Тогда
						Результат.Добавить(СсылкаРНК);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			Возврат Результат;
			
		КонецФункции
		
		//{ Поиск документов
			
			Функция НайтиДокументВ1С_Запрос(СтрокаТаблицы, ЭДОбъект)
				
				DocumentType= ЭДОбъект.Type;
				
				Запрос= Новый Запрос;
				
				ТекстОтбораДопСвойство= НайтиДокументВ1С_Запрос_ТекстОтбораДопСвойство(Запрос, DocumentType, СтрокаТаблицы, ЭДОбъект);
				ТекстОсновногоОтбора=	НайтиДокументВ1С_Запрос_ТекстОсновногоОтбора(Запрос, ТекстОтбораДопСвойство, DocumentType, СтрокаТаблицы, ЭДОбъект);
				
				Если Лев(DocumentType, 7) <> "Invoice" Тогда
					
					ИмяТаблицы= НайтиДокументВ1С_Запрос_ИмяТаблицы(DocumentType);
					
					Запрос.Текст= 
					"ВЫБРАТЬ
					|	Т.Ссылка
					|ИЗ
					|	" + ИмяТаблицы + " КАК Т" + ТекстОтбораДопСвойство + "
					|ГДЕ
					|	" + ТекстОсновногоОтбора;
					
				Иначе
					
					Запрос.Текст= 
					"ВЫБРАТЬ
					|	Т.Ссылка
					|ИЗ
					|	Документ.СчетФактураПолученный.ДокументыОснования КАК ДокументыОснования
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК Т
					|		ПО ДокументыОснования.Ссылка = Т.Ссылка
					|			И " + ТекстОсновногоОтбора + ТекстОтбораДопСвойство;
					
				КонецЕсли;
				
				Возврат Запрос;
				
			КонецФункции
			
			Функция НайтиДокументВ1С_Запрос_ИмяТаблицы(DocumentType)
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда 
					
					Возврат "Документ.ПриходнаяНакладная";
								
				ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41" ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ" Тогда 
								
					Возврат "Документ.ПоступлениеТоваров";
					
				Иначе
					
					Возврат "Документ.ПоступлениеТоваровУслуг";
					
				КонецЕсли;
				
			КонецФункции
			
			Функция НайтиДокументВ1С_Запрос_ТекстОтбораДопСвойство(Запрос, DocumentType, СтрокаТаблицы, ЭДОбъект)
				
				ТекстОтбораДопСвойство= "";
				
				Если  Лев(DocumentType, 7) <> "Invoice" 
					И ПараметрыХраненияНомераАкта <> Неопределено
					И ПараметрыХраненияНомераАкта.Хранилище = "ДополнительноеСвойство" Тогда
					
					ТекстОтбораДопСвойство= "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ДопСвойство
					|	ПО Т.Ссылка = ДопСвойство.Объект
					|		И ДопСвойство.Свойство = &Свойство
					|		И ДопСвойство.Значение = &Значение";
					
					Запрос.УстановитьПараметр("Свойство", ПараметрыХраненияНомераАкта.Ключ);
					Запрос.УстановитьПараметр("Значение", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта), СтрокаТаблицы.НомерАкта, ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаИзСФ(ЭДОбъект)));
					
				КонецЕсли;
				
				Возврат ТекстОтбораДопСвойство;
				
			КонецФункции
			
			Функция НайтиДокументВ1С_Запрос_ТекстОсновногоОтбора(Запрос, ТекстОтбораДопСвойство, DocumentType, СтрокаТаблицы, ЭДОбъект)
				
				НастройкиОсновногоОтбора= НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора(DocumentType, ЭДОбъект, СтрокаТаблицы);
				НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора_ДополнитьНомеромАкта(НастройкиОсновногоОтбора, DocumentType, СтрокаТаблицы, ЭДОбъект);
				НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора_ДополнитьОтборСчетаФактуры(НастройкиОсновногоОтбора, DocumentType, СтрокаТаблицы, ЭДОбъект);
				
				Если ПустаяСтрока(ТекстОтбораДопСвойство) Тогда
					ТекстОсновногоОтбора= "НЕ Т.ПометкаУдаления";
				Иначе
					ТекстОсновногоОтбора= "Т.Проведен";
				КонецЕсли;
				
				Для Каждого ТекстОтбора ИЗ НастройкиОсновногоОтбора.Текст Цикл
					ТекстОсновногоОтбора = ТекстОсновногоОтбора + " И " + ТекстОтбора;
				КонецЦикла;
				
				Для Каждого КлючИЗначение ИЗ НастройкиОсновногоОтбора.Параметры Цикл
					Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				
				Возврат ТекстОсновногоОтбора;
				
			КонецФункции
			
			Функция НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора(DocumentType, ЭДОбъект, СтрокаТаблицы)
			
				НастройкиОсновногоОтбора= Новый Структура("Текст, Параметры", Новый Массив, Новый Структура);
				
				НастройкиОсновногоОтбора.Параметры.Вставить("Дата", НачалоГода(ЭДОбъект.DocumentDate));
				
				Если ЭтоФормализованныйТОРГ12(DocumentType) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(DocumentType) Тогда
					НастройкиОсновногоОтбора.Текст.Добавить("НАЧАЛОПЕРИОДА(Т.Дата, ГОД) = &Дата");
				КонецЕсли;
				
				Если 	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" 
					ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
					ПолеОрганизация= "Фирма";
				Иначе
					ПолеОрганизация= "Организация";
				КонецЕсли;
				
				НастройкиОсновногоОтбора.Текст.Добавить("Т." + ПолеОрганизация + " = &Организация");
				НастройкиОсновногоОтбора.Параметры.Вставить("Организация", СтрокаТаблицы.Организация);
				
				НастройкиОсновногоОтбора.Текст.Добавить("Т.Контрагент = &Контрагент");
				НастройкиОсновногоОтбора.Параметры.Вставить("Контрагент" , ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(ЭДОбъект.Counteragent.Id, ЭДОбъект.Organization.id));
				
				Если ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку("ДиадокСопоставлятьСкладыИПодразделенияДД") = Истина Тогда 
				   				
					ПолеСклад = "";
					
					Если 	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияБух" 
						ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ"
						ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
						ПолеСклад = "Склад"
					Иначе
						ПолеСклад = "СкладОрдер"
					КонецЕсли;
					
					Если Лев(DocumentType, 7) = "Invoice" Тогда
						НастройкиОсновногоОтбора.Текст.Добавить("ДокументыОснования.ДокументОснование." + ПолеСклад + " В (&МассивСкладов)");
					Иначе
						НастройкиОсновногоОтбора.Текст.Добавить("Т." + ПолеСклад + " В (&МассивСкладов)");
					КонецЕсли;
					
					НастройкиОсновногоОтбора.Параметры.Вставить("МассивСкладов", ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DepartmentID_2_МассивСкладов(?(ЭДОбъект.Department = Неопределено, "00000000-0000-0000-0000-000000000000", ЭДОбъект.Department.Id)));
					
				КонецЕсли;
				
				Возврат НастройкиОсновногоОтбора;
				
			КонецФункции
			
			Процедура НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора_ДополнитьНомеромАкта(НастройкиОсновногоОтбора, DocumentType, СтрокаТаблицы, ЭДОбъект)
				
				Если ПараметрыХраненияНомераАкта <> Неопределено Тогда
					
					// В основной отбор попадает только реквизит документа, фильтр по свойству добавляется в отдельный отбор.
					Если ПараметрыХраненияНомераАкта.Хранилище = "РеквизитДокумента" Тогда
						
						НастройкиОсновногоОтбора.Текст.Добавить("ВЫРАЗИТЬ(Т."+ПараметрыХраненияНомераАкта.Ключ+" КАК Строка(255)) = &НомерАкта");
						НастройкиОсновногоОтбора.Параметры.Вставить("НомерАкта", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта), СтрокаТаблицы.НомерАкта, ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаИзСФ(ЭДОбъект)));
						
					КонецЕсли;
					
				
				ИначеЕсли ЭтоФормализованныйТОРГ12(DocumentType) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(DocumentType) Тогда
					
					НастройкиОсновногоОтбора.Параметры.Вставить("НомерАкта", ?(ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта), СтрокаТаблицы.НомерАкта, ПолучитьНомерАктаИзСФ(ЭДОбъект)));
					
					Если 	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41"
						ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ" Тогда
						
						НастройкиОсновногоОтбора.Текст.Добавить("Т.ВхДокНомер = &НомерАкта");
						
					ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
						
						НастройкиОсновногоОтбора.Текст.Добавить("Т.ВходящийНомер = &НомерАкта");
						
					ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
						
						НастройкиОсновногоОтбора.Текст.Добавить("Т.НомерДокумента = &НомерАкта");
						
					Иначе
						
						НастройкиОсновногоОтбора.Текст.Добавить("Т.НомерВходящегоДокумента = &НомерАкта");
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецПроцедуры
			
			Процедура НайтиДокументВ1С_Запрос_НастройкиОсновногоОтбора_ДополнитьОтборСчетаФактуры(НастройкиОсновногоОтбора, DocumentType, СтрокаТаблицы, ЭДОбъект)
				
				Если Лев(DocumentType, 7) <> "Invoice" Тогда
					Возврат;
				КонецЕсли;
					
				НастройкиОсновногоОтбора.Параметры.Вставить("НомерВходящегоДокумента", ЭДОбъект.DocumentNumber);
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
					
					НастройкиОсновногоОтбора.Текст.Добавить("Т.ВходящийНомер = &НомерВходящегоДокумента");
					НастройкиОсновногоОтбора.Текст.Добавить("НАЧАЛОПЕРИОДА(Т.ДатаСчетаФактуры, ГОД) = &Дата");
					
				ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
					
					НастройкиОсновногоОтбора.Текст.Добавить("Т.НомерДокумента = &НомерВходящегоДокумента");
					НастройкиОсновногоОтбора.Текст.Добавить("НАЧАЛОПЕРИОДА(Т.ДатаДокумента, ГОД) = &Дата");
					
				Иначе
					
					НастройкиОсновногоОтбора.Текст.Добавить("Т.НомерВходящегоДокумента = &НомерВходящегоДокумента");
					НастройкиОсновногоОтбора.Текст.Добавить("НАЧАЛОПЕРИОДА(Т.ДатаВходящегоДокумента, ГОД) = &Дата");
					
				КонецЕсли;
				
			КонецПроцедуры
			
		//} Поиск документов
		
		//{ Проверка
			
			Функция ПроверитьСвязанныеДокументыСчетаФактуры(СтрокаТаблицы, СписокДокументовНаПодпись, ТаблицаДокументов)
				
				КоллекцияОшибок= 		   Новый СписокЗначений;
				МассивСвязанныхДокументов= ПолучитьМассивСвязанныхДокументов(СтрокаТаблицы.ЭДОбъект, ТаблицаДокументов);
				
				Для Каждого СвязанныйDocument ИЗ МассивСвязанныхДокументов Цикл
					
					Если ЭтоФормализованныйТОРГ12(СвязанныйDocument.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СвязанныйDocument.Type) Тогда
						ВыполнитьПроверку(КоллекцияОшибок, СвязанныйDocument, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись);
					КонецЕсли;
					
				КонецЦикла;	
				
				Возврат КоллекцияОшибок;
				
			КонецФункции
			
			Функция ПроверитьСвязанныеДокументыАктаНакладной(СтрокаТаблицы, СписокДокументовНаПодпись)
				
				КоллекцияОшибок= Новый Соответствие;
				
				Если НЕ ОрганизацияНаУСН(СтрокаТаблицы.ЭДОбъект.OrganizationID) Тогда
					
					МассивСвязанныхДокументов= ПолучитьМассивСвязанныхДокументов(СтрокаТаблицы.ЭДОбъект, ТаблицаДокументов);
					
					Для Каждого СвязанныйDocument ИЗ МассивСвязанныхДокументов Цикл
						
						Если ЭтоСчетФактура(Лев(СвязанныйDocument.Type, 7)) Тогда
							ВыполнитьПроверку(КоллекцияОшибок, СвязанныйDocument, СтрокаТаблицы.ПервичныйДокументДляСопоставления, СписокДокументовНаПодпись);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;	
				
				Возврат КоллекцияОшибок;
				
			КонецФункции
			
			Функция ВыполнитьПроверку(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись)
				
				DocumentContent= DocumentContent(Document.documentId, Document.Organization.Id);
				
				Если DocumentContent <> Неопределено Тогда
					
					ПроверитьДокумент(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись, DocumentContent);
					
					ПодключаемыйМодульТорговыеСетиПослеПроверкиДокумента(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись, DocumentContent);
					
				Иначе
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "ОшибкаПолученияДанныхДокумента", "Не удалось получить данные документа");
					
				КонецЕсли;
				
				Возврат КоллекцияОшибок;
				
			КонецФункции
			
			Процедура ПроверитьДокумент(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись, DocumentContent)
				
				ПроверкаПоддержкиФункционала(КоллекцияОшибок, Document);
				ПроверкаОрганизации(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent);
				ПроверкаКонтрагента(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent);
				
				Если ЭтоФормализованныйТОРГ12(Document.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(Document.Type) Тогда 
					
					ПроверкаПринятияКУчетуТорг12Акта(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись);
					ПроверкаСуммыНДСТорг12Акта(КоллекцияОшибок, Document, ПервичныйДокумент);
					ПроверкаДатыПолученияГруза(КоллекцияОшибок, Document, ПервичныйДокумент);
					
				ИначеЕсли ЭтоСчетФактура(Лев(Document.Type, 7)) Тогда
					
					ИмяФормыПрикладногоРешенияДляИнтеграцииДиадок= ИмяФормыПрикладногорешенияДляИнтеграцииДиадок();
					
					Если  ИмяФормыПрикладногоРешенияДляИнтеграцииДиадок <> "Модуль_ИнтеграцияУТ102" 
						И ИмяФормыПрикладногоРешенияДляИнтеграцииДиадок <> "Модуль_ИнтеграцияАльфаАвто41" 
						И ИмяФормыПрикладногоРешенияДляИнтеграцииДиадок <> "Модуль_ИнтеграцияТКПТ"
					Тогда
						ПроверкаПериодаУчетаСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент);
					КонецЕсли;
					
					ПроверкаПринятияКУчетуСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент);
					ПроверкаДатыПоставкиСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент);
					ПроверкаПоляКодВалюты(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent);
					ПроверкаСуммыНДССчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent);
					ДиадокПроверкаГТД(КоллекцияОшибок, Document, DocumentContent);
					ПроверкаСвидетельстваОРегстрацииИП(КоллекцияОшибок, DocumentContent);
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, ТипОшибки, КлючОшибки, ОписаниеОшибки="")
				
				СтруктураОшибки= Новый Структура;
				СтруктураОшибки.Вставить("ТипОшибки"	 , ТипОшибки	 );
				СтруктураОшибки.Вставить("КлючОшибки"	 , КлючОшибки	 );
				СтруктураОшибки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
				
				ДобавитьСинонимОшибки(СтруктураОшибки);
				
				КоллекцияОшибок.Вставить(КлючОшибки, СтруктураОшибки);
				
			КонецПроцедуры
			
			Процедура ДобавитьСинонимОшибки(СтруктураОшибки)
				
				Если СтруктураОшибки.КлючОшибки = "НеСопоставленКонтрагент" Тогда
					СтруктураОшибки.Вставить("СинонимОшибки", "Не сопоставлен контрагент");
				Иначе
					СтруктураОшибки.Вставить("СинонимОшибки", СтруктураОшибки.КлючОшибки);
				КонецЕсли;
				
			КонецПроцедуры
	
			
			Процедура ПроверкаПоддержкиФункционала(КоллекцияОшибок, Document)
				
				Если ИмяФормыПрикладногоРешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияУТ102" И ЭтоСчетФактураИсправленная(Document.Type) Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "УТ102НеПоддерживаетсяИСФ", "В конфигурации УТ 10.2 массовая обработка пакетов, содержащих СФ исправленную, не поддерживается.");
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаОрганизации(КоллекцияОшибок, Document, Документ1С, DocumentContent)
				
				Документ1СОрганизация= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").Документ_Организация(Документ1С);
				
				Если Документ1СОрганизация <> ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxIDDepartment_2_Организация(Document.OrganizationID, Document.Department) Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеСоответcтвуетОрганизация", "Разные организации документа 1С и Диадока");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Документ1СОрганизация) Тогда
					
					Если ЭтоФормализованныйАктОВыполненииРабот(Document.Type) Тогда
						Inn= Document.Organization.Inn;
						Kpp= Document.Organization.Kpp;
					Иначе
						Inn= DocumentContent.buyer.Inn;
						Kpp= DocumentContent.buyer.Kpp;
					КонецЕсли;
					
					ИНН= СокрЛП(Документ1СОрганизация.ИНН);
					КПП= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").Организация_КПП(Документ1СОрганизация);
					
					Если ИНН <> Inn Тогда
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеправильныйИННОрганизации", "Неверный ИНН у покупателя. Ожидаемое значение: " + ИНН);
					КонецЕсли;
					
					Если КПП <> Kpp Тогда
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеправильныйКППОрганизации", "Неверный КПП у покупателя. Ожидаемое значение: " + КПП);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаКонтрагента(КоллекцияОшибок, Document, Документ1С, DocumentContent)
				
				Документ1СКонтрагент= Документ1С.Контрагент;
				
				Если Документ1СКонтрагент <> ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(Document.counterAgent.Id, Document.Organization.Id) Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеСоответcтвуетКонтрагент", "Разные контрагенты документа 1С и Диадока");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Документ1СКонтрагент) Тогда
					
					ИНН= СокрЛП(Документ1СКонтрагент.ИНН);
					КПП= СокрЛП(Документ1СКонтрагент.КПП);
					
					Если ИНН <> DocumentContent.Seller.Inn Тогда
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеправильныйИННКонтрагента", "Неверный ИНН поставщика. Ожидаемое значение: " + ИНН);
					КонецЕсли;
					
					Если КПП <> DocumentContent.Seller.Kpp Тогда
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеправильныйКППКонтрагента", "Неверный КПП поставщика. Ожидаемое значение: " + КПП);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаПринятияКУчетуТорг12Акта(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись)
				
				DocID = ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьIDСопоставленныйПНК(ПервичныйДокумент, СписокДокументовНаПодпись);
				
				Если ЗначениеЗаполнено(DocID) И Document.Documentid <> DocID Тогда 
					
					ПредыдущийДок = Document.Organization.getDocumentByID(DocID);
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ПовторноеПринятиеКУчетуТорг12Акта", "Данный документ уже был учтен в электронном виде (дата " + Формат(ПредыдущийДок.DocumentDate, "ДФ=dd.MM.yyyy") + ", номер " + ПредыдущийДок.DocumentNumber + ", получен " + ПредыдущийДок.Timestamp + ")");
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаСуммыНДСТорг12Акта(КоллекцияОшибок, Document, ПервичныйДокумент)
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
					ОтклонениеПоСуммеСНДС= Окр(Document.Total, 2) - Окр(ПервичныйДокумент.ИтогоВсего, 2);
				Иначе
					ОтклонениеПоСуммеСНДС= Окр(Document.Total, 2) - Окр(ПервичныйДокумент.СуммаДокумента, 2);
				КонецЕсли;
				
				Если Макс(ОтклонениеПоСуммеСНДС, -ОтклонениеПоСуммеСНДС) > ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").Документ_Организация(ПервичныйДокумент)) Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОтклонениеСуммыНДСБольшеДопустимого", "Ошибка в сумме с НДС. Ожидаемое значение: " + ПервичныйДокумент.СуммаДокумента);
					
				ИначеЕсли ОтклонениеПоСуммеСНДС <> 0 Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Информация", "ОтклонениеСуммыНДСВПределахДопустимого", "Расхождение между документом Диадок и Документом 1С.");
					
				КонецЕсли;	
				
			КонецПроцедуры
			
			Процедура ПроверкаДатыПолученияГруза(КоллекцияОшибок, Document, ПервичныйДокумент)
				
				Если НачалоДня(Document.DocumentDate) > НачалоДня(ПервичныйДокумент.Дата) Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаДатыЭлектронногоДокумента", "Дата электронного документа (" + формат(Document.DocumentDate, "ДФ=dd.MM.yyyy") + ") больше даты фактического получения груза (" + Формат(ПервичныйДокумент.Дата, "ДФ=dd.MM.yyyy") + ")");
					
				КонецЕсли;	
				
			КонецПроцедуры
			
			Процедура ПроверкаПериодаУчетаСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент)
				
				ЕстьБумажнаяСчетФактура 			= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ЕстьБумажныйСФ(ПервичныйДокумент);
				РазницаВМесяцах 					= ?(Месяц(ТекущаяДата())-Месяц(ПервичныйДокумент.Дата), Месяц(ТекущаяДата())-Месяц(ПервичныйДокумент.Дата), -1*(Месяц(ТекущаяДата())-Месяц(ПервичныйДокумент.Дата)));
				ПервичныйДокументНеИзЭтогоМесяца 	= ?(ПервичныйДокумент.Дата < НачалоМесяца(ТекущаяДата()), Истина, Ложь);
				ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила = ?(НачалоДня(ТекущаяДата()) >= НачалоМесяца(ТекущаяДата()) + ПолучитьКоличествоДнейОтсрочки(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").Документ_Организация(ПервичныйДокумент))*24*60*60, Истина, Ложь);
				
				Если ЕстьБумажнаяСчетФактура И ПервичныйДокументНеИзЭтогоМесяца И (ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила ИЛИ РазницаВМесяцах > 1) Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаПериодаУчетаСчетаФактуры", "Бумажный экземпляр документа был учтен в прошлом периоде");
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаПринятияКУчетуСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент)
				
				СчетФактура= ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").НайтиПодходящийСчетФактуруИзРНК(ПервичныйДокумент);
				
				Если СчетФактура <> Неопределено Тогда 
					
					DocumentID = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Документ_2_DocumentID(СчетФактура, Document.Type);
					
					Если ЗначениеЗаполнено(DocumentID) И DocumentID <> Document.Documentid Тогда
						
						ПредыдущийДок = Document.Organization.getDocumentByID(DocumentID);
						
						ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ЭлектронныйСчетФактураУжеУчтен", "Данный документ уже был учтен в электронном виде (дата " + Формат(ПредыдущийДок.DocumentDate, "ДФ=dd.MM.yyyy") + ", номер " + ПредыдущийДок.DocumentNumber + ", получен " + ПредыдущийДок.Timestamp + ")");
						
					КонецЕсли;
					
				Иначе
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Информация", "СчетФактураВБазе1СОтсутствует", "По поступлению №" + ПервичныйДокумент.Номер + " от " + ПервичныйДокумент.Дата + " не найдено подчиненного счета-фактуры, соответствующего текущему документу Диадок.
					|Для создания в базе 1С нового счета-фактуры и его сопоставления с документом Диадок, нажмите кнопку ""Выполнить обработку"".");
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаДатыПоставкиСчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент)
				
				ДатаСФ= ?(Document.type = "InvoiceRevision", Document.OriginalDocumentDate, Document.DocumentDate);
				
				Если НачалоДня(ДатаСФ) > НачалоДня(ПервичныйДокумент.Дата)+5*24*60*60 Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ДатаОформленияСчетаФактурыБольшеДатыПоставки", "Дата счета-фактуры превышает дату поставки на 5 дней. Дата поставки:" + Формат(ПервичныйДокумент.Дата, "ДФ=dd.MM.yyyy"));
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаПоляКодВалюты(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent)
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
					ПервичныйДокументВалютаДокументаКод= ПервичныйДокумент.Валюта.Код;
				Иначе
					ПервичныйДокументВалютаДокументаКод= ПервичныйДокумент.ВалютаДокумента.Код;
				КонецЕсли;
				
				Если DocumentContent.Currency  <>  ПервичныйДокументВалютаДокументаКод Тогда 
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОшибкаКодаВалюты", "Неверно заполнено поле ""код валюты"". Ожидаемое значение:" + ПервичныйДокументВалютаДокументаКод);
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПроверкаСуммыНДССчетаФактуры(КоллекцияОшибок, Document, ПервичныйДокумент, DocumentContent)
				
				ТаблицаНДС=    ПолучитьТаблицуСуммНДС(DocumentContent, ПервичныйДокумент);
				ОтклонениеНДС= Окр(ТаблицаНДС.Итог("СуммаНДС"), 2) - Окр(ТаблицаНДС.Итог("СуммаНДС_1С"), 2);
				
				Если Макс(ОтклонениеНДС, -ОтклонениеНДС) > ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").Документ_Организация(ПервичныйДокумент)) Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "ОтклонениеСуммыНДСБольшеДопустимого", "Неверная сумма НДС. По данным сети сумма НДС - " + Формат(Окр(ТаблицаНДС.Итог("СуммаНДС_1С"), 2), "ЧДЦ=2") + ", в электронном документе поставщика - "
					+?(ЗначениеЗаполнено(Формат(Окр(ТаблицаНДС.Итог("СуммаНДС"), 2), "ЧДЦ=2")), Формат(Окр(ТаблицаНДС.Итог("СуммаНДС"), 2), "ЧДЦ=2"), 0));
					
				ИначеЕсли ОтклонениеНДС <> 0 Тогда
					
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Информация", "ОтклонениеСуммыНДСВПределахДопустимого", "Расхождение между документом Диадок и Документом 1С.");
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ДиадокПроверкаГТД(КоллекцияОшибок, Document, DocumentContent)
				
				ВГраница= DocumentContent.Items.count - 1;
				
				Для ИндексЦикла= 0 ПО ВГраница Цикл 
					
					Item= DocumentContent.Items.getItem(ИндексЦикла);
					
					Если ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда
						Если НЕ ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin) Тогда
							ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеУказанаСтранаПроисхождения", "Для товара " + Item.Product + " в строке " + формат(ИндексЦикла + 1, "ЧЦ=10") + " указан номер ГТД, но не указана страна происходения");
						КонецЕсли;
					Иначе
						Если ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin) Тогда
							ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеУказанНомерГТД", "Для товара " + Item.Product + " в строке " + Формат(ИндексЦикла + 1, "ЧЦ=10") + " указана страна происходения, но не указан номер ГТД");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецПроцедуры
			
			Процедура ПроверкаСвидетельстваОРегстрацииИП(КоллекцияОшибок, DocumentContent)
				
				Если DocumentContent.Signer.IsSoleProprietor
					И НЕ ЗначениеЗаполнено(DocumentContent.Signer.SoleProprietorRegistrationCertificate) Тогда
					ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "НеЗаполненоСвидетельствоИП", "Не заполнено поле ""свидетельство о регистрации Индивидуального Предпринимателя""");
				КонецЕсли;
				
			КонецПроцедуры
			
			//{ ВСПОМОГАТЕЛЬНЫЕ
				
				Функция ПолучитьКоличествоДнейОтсрочки(Организация)
					
					Результат = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "РазрешенныйПериодКорректировки");
					
					Если ЗначениеЗаполнено(Результат) Тогда
						Возврат Число(Результат);
					Иначе 
						Возврат 15;
					КонецЕсли;
					
				КонецФункции
				
				Функция ПолучитьТаблицуСуммНДС(content,ПервичныйДокумент)
					
					//вычислим сумму по ставкам ндс
					ТаблицаНДС = Новый ТаблицаЗначений;
					ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
					ТаблицаНДС.Колонки.Добавить("СуммаНДС");
					ТаблицаНДС.Колонки.Добавить("СуммаСНДС");
					ТаблицаНДС.Колонки.Добавить("СуммаБезНДС");
					ТаблицаНДС.Колонки.Добавить("СуммаНДС_1С");
					
					Для ц = 0 по content.Items.count -1 Цикл 
						item = content.Items.getItem(ц);
						стр = ТаблицаНДС.Добавить();
						стр.СтавкаНДС	= Item.TaxRate;
						стр.СуммаНДС 	= Item.Vat ;
						стр.СуммаСНДС 	= Item.total;
						стр.СуммаБезНДС = Item.TotalWithVatExcluded ;
					КонецЦикла;
					
					Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
						ТабЧастьДокумента= ПервичныйДокумент.Состав;
					Иначе
						ТабЧастьДокумента= ПервичныйДокумент.Товары;
					КонецЕсли;
					
					Для каждого стрДок из ТабЧастьДокумента Цикл 
						стр = ТаблицаНДС.Добавить();
						стр.ставкаНДС 	= ПредставлениеСтавкиНДС(стрДок.СтавкаНДС);
						стр.СуммаНДС_1С = стрДок.суммаНДС;
					КонецЦикла;
					
					Если  ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАльфаАвто41"
						И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияТКПТ"
						И ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() <> "Модуль_ИнтеграцияАсторТД" Тогда
						
						Для каждого стрДок из ПервичныйДокумент.Услуги Цикл 
							стр =  ТаблицаНДС.Добавить();
							стр.ставкаНДС 	= ПредставлениеСтавкиНДС(стрДок.СтавкаНДС);
							стр.СуммаНДС_1С = стрДок.суммаНДС;
						КонецЦикла;
						
					КонецЕсли;
					
					ТаблицаНДС.Свернуть("СтавкаНДС", "СуммаНДС, СуммаСНДС, СуммаБезНДС, СуммаНДС_1С");
					
					Возврат ТаблицаНДС;
					
				КонецФункции
				
				Функция ПредставлениеСтавкиНДС(СтавкаНДС)
					
					Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
						Возврат "не корректная ставка ндс";
					КонецЕсли;
					
					Если 	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41" 
						ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ"
						ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
						
						Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
							Возврат "без НДС";
						КонецЕсли;
						
						Возврат Формат(СтавкаНДС.Ставка, "ЧН=0");
						
					Иначе
						
						Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
							Возврат "18";
						ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда 
							Возврат "10";
						ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда 
							Возврат "0";
						ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда 
							Возврат "без НДС";
						Иначе 
							Возврат "некорректнаяставка ндс";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецФункции
				
				Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(Организация)
					
					Результат = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "МаксимальноеОтклонениеСуммыНДС");
					
					Если ЗначениеЗаполнено(Результат) Тогда
						Возврат Число(Результат)/100;
					Иначе 
						Возврат 0;
					КонецЕсли;	
					
				КонецФункции
				
				Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(Организация)
					
					Результат = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, "МаксимальноеОтклонениеСуммыСНДС");
					
					Если ЗначениеЗаполнено(Результат) Тогда
						Возврат Число(Результат)/100
					Иначе 
						Возврат 0;
					КонецЕсли;
					
				КонецФункции
				
			//} ВСПОМОГАТЕЛЬНЫЕ

		//} Проверка		
		
	//} ТОРГОВЫЕ СЕТИ - АНАЛИЗ ДОКУМЕНТОВ
	
	//{ ТОРГОВЫЕ СЕТИ - ОБРАБОТКА ДОКУМЕНТОВ
	
		Процедура ВыполнитьОбработкуДокументов()
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
			
			Если Не НайденныеСтроки.Количество()=0 Тогда
				
				ПоказатьТекущееСостояниеОбработки(НайденныеСтроки, "");
				
				ЛогироватьНачалоПроцесса();
				
					Если ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
						Для каждого ОбрабатываемаяСтрока из НайденныеСтроки Цикл
							ОбработатьВсеАвтоматически(ОбрабатываемаяСтрока);	
						КонецЦикла;
						
						Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
							Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
								ОбработатьМассивЗадачНаОтказ();	
							КонецЦикла;
						КонецЕсли;
						
						Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
							Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
								ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
							КонецЦикла;
						КонецЕсли;
						
					ИначеЕсли ПолеВыбораСценарий = "ОбработатьТолькоКорректныеДокументы" Тогда
						Для каждого ОбрабатываемаяСтрока из НайденныеСтроки Цикл
							Если ОбрабатываемаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьИПодписать 
								ИЛИ ОбрабатываемаяСтрока.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ Тогда
								СопоставитьИПодписать(ОбрабатываемаяСтрока);
							КонецЕсли;
						КонецЦикла;
						
						Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
							Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
								ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
							КонецЦикла;
						КонецЕсли;
						
					ИначеЕсли ПолеВыбораСценарий = "ОбработатьТолькоДокументыСОшибками" Тогда
						
						Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
							Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда
								СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы);
							ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
								ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
								ОтказВПодписи(СтрокаТаблицы);
							КонецЕсли;
						КонецЦикла;
						
						Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
							Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
								ОбработатьМассивЗадачНаОтказ();	
							КонецЦикла;
						КонецЕсли;
					
					КонецЕсли;
					
					ПодключаемыйМодульТорговыеСетиПослеВыполненияОбработкиДокументов(НайденныеСтроки);
					
				СкрытьТекущееСостояниеОбработки();
				ЛогироватьКонецПроцесса();
				
			КонецЕсли;
			
		КонецПроцедуры
		
		Процедура ПоказатьТекущееСостояниеОбработки(ОбрабатываемыеСтроки, ЗаголовокДляТекущегоСостоянияОбработки)
			
			РазмерВыгрузки = ОбрабатываемыеСтроки.Количество();
			КоличествоВыгружено = 0;
			Если НЕ РазмерВыгрузки = 0 Тогда
				ЭлементыФормы.ПанельОбновлениеСтатуса.Видимость = Истина;
				ЭлементыФормы.НадписьВыполняемоеДействие.Заголовок = ЗаголовокДляТекущегоСостоянияОбработки;
			КонецЕсли;	
			
		КонецПроцедуры
		
		Процедура ОбновитьТекущееСостояниеОбработки(ЗаголовокДляТекущегоСостоянияОбработки)
			Если ЗаголовокДляТекущегоСостоянияОбработки = "" Тогда
				ЗаголовокДляТекущегоСостоянияОбработки = "Идет обработка документов";
			КонецЕсли;
			ЭлементыФормы.НадписьВыполняемоеДействие.Заголовок = ЗаголовокДляТекущегоСостоянияОбработки+". Обработано ("+КоличествоВыгружено+" из "+РазмерВыгрузки+")";	
		КонецПроцедуры
		
		Процедура СкрытьТекущееСостояниеОбработки()
			ЭлементыФормы.ПанельОбновлениеСтатуса.Видимость = Ложь;
		КонецПроцедуры	
		
		//////////////////////////////////////////////////
		//{ Корректные документы
			
			Процедура СопоставитьИПодписать(СтрокаТаблицы) Экспорт
				
				ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.ПервичныйДокументДляСопоставления);
				
				Если МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
					МассивЗаданийОтправкаТитулаПокупателя = Новый Массив;
				КонецЕсли;
				
				Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.ЭДОбъект.Type) или ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.ЭДОбъект.Type) Тогда
					
					Пока МассивЗаданийОтправкаТитулаПокупателя.Количество()=МаксимальноеКоличествоЗаданий Цикл
						ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
					КонецЦикла;
					
					Попытка
						ПодписатьДокумент(СтрокаТаблицы);
						СтрокаТаблицы.Вкл = Ложь;
					Исключение
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
						СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
																
				ИначеЕсли ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда
					
					ДокументПоступления = СтрокаТаблицы.ПервичныйДокументДляСопоставления;
					СчетФактураДляСопоставления = НайтиПодходящийСчетФактуруИзСуществующихПоступлений(СтрокаТаблицы.ПервичныйДокументДляСопоставления);
					
					Если СтрокаТаблицы.ЭДОбъект.Type = "InvoiceRevision" Тогда
						СчетФактураОбъект = СчетФактураДляСопоставления.ПолучитьОбъект();
						ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураОбъект, СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.ДатаУчета); 
						
						Попытка
							СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
							СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
							Сообщить(ОписаниеОшибки());	
						КонецПопытки;
						
					КонецЕсли;
									
					СтрокаТаблицы.ПервичныйДокументДляСопоставления = СчетФактураДляСопоставления;
					
					Если Не СтрокаТаблицы.ПервичныйДокументДляСопоставления=Неопределено Тогда
						СопоставитьДокумент(СтрокаТаблицы);
						
						СтрокаТаблицы.Вкл = Ложь;
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
						СтрокаТаблицы.КомментарийКДействию = "Документ успешно сопоставлен";
					Иначе
						СтрокаТаблицы.Вкл = Ложь;
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
						СтрокаТаблицы.КомментарийКДействию = "Для поступления №"+ДокументПоступления.Номер+" от "+ДокументПоступления.Дата+" не найдено подчиненных счет фактур";
					КонецЕсли;
					
					КоличествоВыгружено = КоличествоВыгружено + 1;
					ОбновитьТекущееСостояниеОбработки("Идет обработка документов с ошибками");
					
				КонецЕсли;
				
				ЛогироватьКонецОбработкиДокумента();
				
			КонецПроцедуры
			
			Процедура ПодписатьДокумент(СтрокаТаблицы)
				
				ЛогироватьНачалоОперации("Подписание документа в ДД");	
				
				Попытка
					
					Если СтрокаТаблицы.ЭДОбъект.isLockedPackage Тогда
						ПодписатьЗалоченныйПакет(СтрокаТаблицы);
					Иначе
						BuyerTitleInfo = ПолучитьBuyerTitleInfo(СтрокаТаблицы.ЭДОбъект, Истина);
						Модуль_РаботаССерверомДиадок.ПодписатьВДиадокеАсинхронно(СтрокаТаблицы, BuyerTitleInfo, МассивЗаданийОтправкаТитулаПокупателя);
						СтрокаТаблицы.ЭДОбъект = Модуль_РаботаССерверомДиадок.ОбновитьЭДоОбъектДиадока(СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
					КонецЕсли;
					
				Исключение
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
				ЛогироватьКонецОперации();	
				
				Оповестить("ОбновитьСтроку", СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
				
			КонецПроцедуры
					
			Процедура ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети()
					
				ц = 0;
				Пока ц < МассивЗаданийОтправкаТитулаПокупателя.Количество() Цикл 
					СтрокаМассиваЗаданий = МассивЗаданийОтправкаТитулаПокупателя[ц];
					Если СтрокаМассиваЗаданий.ReplySendTask.isCompleted Тогда 
									
						Попытка
							Result = СтрокаМассиваЗаданий.ReplySendTask.Result;
							
							Если Result Тогда 
								СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы; 
							
								СопоставитьДокумент(СтрокаТаблицы);
								
								СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
								СтрокаТаблицы.КомментарийКДействию = "Документ успешно подписан и сопоставлен";
													
								МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
							
								КоличествоВыгружено = КоличествоВыгружено + 1;
								ОбновитьТекущееСостояниеОбработки("Обработка корректных документов");
							Иначе
								ц = ц+1;
							КонецЕсли;
								
						Исключение
							
							СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы;
							ТекстОшибкиПодписания = ОписаниеОшибки();
							ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
							
							СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
							СтрокаТаблицы.КомментарийКДействию 	= ТекстОшибкиПодписания;						
							
							МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
							
						КонецПопытки;
						
					Иначе 
						ц = ц+1;
					КонецЕсли;
				КонецЦикла;	
				
			КонецПроцедуры
					
			Функция СформироватьПараметрыПодписанта(Наименование) 
				
				Инд = 1;
				
				Фамилия = "";
				Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
					Фамилия = Фамилия + Сред(Наименование, Инд, 1);
					Инд = Инд + 1;
				КонецЦикла;
				Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
					Инд = Инд + 1;
				КонецЦикла;
				
				Имя = "";
				Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
					Имя = Имя + Сред(Наименование, Инд, 1);
					Инд = Инд + 1;
				КонецЦикла;
				Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
					Инд = Инд + 1;
				КонецЦикла;
				
				Отчество = "";
				Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
					Отчество = Отчество + Сред(Наименование, Инд, 1);
					Инд = Инд + 1;
				КонецЦикла;
				
				Рез = Новый Структура;
				Рез.Вставить("Фамилия", Фамилия);
				Рез.Вставить("Имя", Имя);
				Рез.Вставить("Отчество", Отчество);
				
				Возврат Рез;
			КонецФункции
			
			Функция НайтиПодходящийСчетФактуруИзСуществующихПоступлений(ПриходнаяНакладная)
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
					Возврат ПриходнаяНакладная;
				КонецЕсли;
				
				Запрос= Новый Запрос;
				
				Если Метаданные.Документы.Найти("РегистрацияСчетаФактуры") <> Неопределено Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Ссылка 
					|ИЗ
					|	Документ.РегистрацияСчетаФактуры.СоставНДС
					|ГДЕ
					|	Основание = &ПриходнаяНакладная";
					
				ИначеЕсли ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41"
					ИЛИ Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Ссылка 
					|ИЗ
					|	Документ.СчетФактураПолученный
					|ГДЕ
					|	ДокументОснование = &ПриходнаяНакладная";
					
				Иначе 
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Ссылка 
					|ИЗ
					|	Документ.СчетФактураПолученный.ДокументыОснования
					|ГДЕ
					|	ДокументОснование = &ПриходнаяНакладная";
					
				КонецЕсли;    	
				
				Запрос.УстановитьПараметр("ПриходнаяНакладная", ПриходнаяНакладная);
				
				РезультатЗапроса= Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка= РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					Возврат Выборка.Ссылка;
				КонецЕсли;
				
			КонецФункции
			
			Процедура СопоставитьДокумент(СтрокаТаблицы)
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокументДляСопоставления) Тогда
					
					Если ЭтоСчетФактура(Лев(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда
						ЗаголовокПроведения = "Изменить реквизит КодСпособаПолучения у счет-фактуры";
						ЗаголовокСопоставления = "Сопоставить счет-фактуру";
					Иначе
						ЗаголовокПроведения = "Изменить реквизит КодСпособаПолучения у приходной накладной";
						ЗаголовокСопоставления = "Сопоставить приходную накладную";
					КонецЕсли;
					
					ЛогироватьНачалоОперации(ЗаголовокПроведения);	
					ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_DocumentID_Для_Документ(СтрокаТаблицы.ПервичныйДокументДляСопоставления, СтрокаТаблицы.ЭДОбъект.DocumentId, СтрокаТаблицы.ЭДОбъект.OrganizationID, СтрокаТаблицы.ЭДОбъект.Type);
					
					ИзменитьУДокументаРеквизитКодСпособаПолучения(СтрокаТаблицы.ПервичныйДокументДляСопоставления, СтрокаТаблицы.ЭДОбъект.Type);
					
					ПодключаемыйМодульТорговыеСетиПослеСопоставленияДокумента(СтрокаТаблицы);
					
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
					
					ЛогироватьКонецОперации();
					
				КонецЕсли;
				
				ЛогироватьНачалоОперации(ЗаголовокСопоставления);	
				СтрокаТаблицы.ЭДОбъект = Модуль_РаботаССерверомДиадок.ОбновитьЭДоОбъектДиадока(СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
				
				ЛогироватьКонецОперации();
				
				Оповестить("ОбновитьСтроку", СтрокаТаблицы.ЭДОбъект, ЭтаФорма);		
				
			КонецПроцедуры
			
			Процедура ИзменитьУДокументаРеквизитКодСпособаПолучения(ДокументСсылка, ТипДокумента)
				
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				
				Если (Не ДокументОбъект.Метаданные().Реквизиты.Найти("КодСпособаПолучения")=Неопределено) и (Не ДокументОбъект.КодСпособаПолучения=2) Тогда
					
					ДокументОбъект.КодСпособаПолучения = 2;
					Если ДокументОбъект.Проведен=Ложь и ДокументОбъект.ПометкаУдаления=Ложь Тогда
						
						ПровестиИлиЗаписатьДокумент(ДокументОбъект);
						
					ИначеЕсли ЭтоСчетФактура(ТипДокумента) И ДокументОбъект.ПометкаУдаления=Ложь Тогда	
						
						ПровестиИлиЗаписатьДокумент(ДокументОбъект);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецПроцедуры
			
			Процедура ПровестиИлиЗаписатьДокумент(ДокументОбъект)
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Исключение
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						Сообщить("Не удалось изменить реквизиты: способ получения
						|у документа: " + ДокументОбъект.Ссылка);	
					КонецПопытки;
				КонецПопытки;	
			КонецПроцедуры
			
		//} Корректные документы
		//////////////////////////////////////////////////
		
		//////////////////////////////////////////////////
		//{ Документы с ошибками
			
			Процедура СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы) Экспорт
				
				Если ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда	
					
					ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.ПервичныйДокументДляСопоставления);
					
					Если СтрокаТаблицы.ЭДОбъект.Vat > 0 Тогда // сф без ндс не обрабатываем
						
						СчетФактураПолученный= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").DocumentID_2_Документ(СтрокаТаблицы.ЭДОбъект.DocumentId, СтрокаТаблицы.ЭДОбъект.OrganizationID);
						
						Если ЗначениеЗаполнено(СчетФактураПолученный) Тогда
							
							СтрокаТаблицы.ПервичныйДокументДляСопоставления= СчетФактураПолученный.Ссылка;
							СтрокаТаблицы.Вкл= Ложь;
							СтрокаТаблицы.СостояниеОбработки=	СтруктураДействийПоДокументу.Обработано;
							СтрокаТаблицы.КомментарийКДействию= "Документ успешно сопоставлен";
							
						Иначе
							
							ЛогироватьНачалоОперации("Проведение ПНК");
							
							ПредъявленСчетФактура= Ложь;
							ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы.ПервичныйДокументДляСопоставления, "ПредъявленСчетФактура", ПредъявленСчетФактура);
							Если ПредъявленСчетФактура Тогда
								
								ПриходнаяНакладнаяОбъект= СтрокаТаблицы.ПервичныйДокументДляСопоставления.ПолучитьОбъект();
								ПриходнаяНакладнаяОбъект.ПредъявленСчетФактура= Ложь;
								
								ЗаписатьПриходнуюНакладную(ПриходнаяНакладнаяОбъект, Истина);
								
								ПриходнаяНакладнаяОбъект= Неопределено;
								
							ИначеЕсли НЕ СтрокаТаблицы.ПервичныйДокументДляСопоставления.Проведен И НЕ СтрокаТаблицы.ПервичныйДокументДляСопоставления.ПометкаУдаления Тогда
								
								ЗаписатьПриходнуюНакладную(СтрокаТаблицы.ПервичныйДокументДляСопоставления.ПолучитьОбъект(), Истина);
								
							КонецЕсли;
								
							ЛогироватьКонецОперации();
							
							ЛогироватьНачалоОперации("Создание новой счет фактуры");
							СчетФактураПолученный 	= СоздатьНовыйСчетФактуру(СтрокаТаблицы, СтрокаТаблицы.ПервичныйДокументДляСопоставления);
							ЛогироватьКонецОперации();
							
							ЛогироватьНачалоОперации("Сопоставить счет фактуру");
							Если ЗначениеЗаполнено(СчетФактураПолученный) Тогда
								СтрокаТаблицы.ПервичныйДокументДляСопоставления= СчетФактураПолученный;
								СопоставитьДокумент(СтрокаТаблицы);
								Если СтрокаТаблицы.СостояниеОбработки=СтруктураДействийПоДокументу.Обработано Тогда
									СтрокаТаблицы.КомментарийКДействию = "Документ успешно сопоставлен";
								КонецЕсли;
							Иначе
								СтрокаТаблицы.Вкл = Ложь;
								СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
								СтрокаТаблицы.КомментарийКДействию = "На основании поступления №"+ПриходнаяНакладнаяОбъект.Номер+" от "+ПриходнаяНакладнаяОбъект.Дата+" не удалось создать новую счет фактуру";
							КонецЕсли;
							ЛогироватьКонецОперации();
							
						КонецЕсли;
						
					КонецЕсли;
					
					ЛогироватьКонецОбработкиДокумента();
					
				КонецЕсли;
				
				КоличествоВыгружено = КоличествоВыгружено + 1;
				ОбновитьТекущееСостояниеОбработки("Идет обработка документов с ошибками");
				
			КонецПроцедуры
			
			Функция ЗаписатьПриходнуюНакладную(ДокОбъект, Проведение = Ложь)
				
				Попытка
					
					Если Проведение Тогда 
						ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Иначе	
						ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;	
					Возврат Истина;
					
				Исключение
					
					Сообщить(?(Проведение, "Не удалось провести документ ", "Не удалось установить код способа получения для документа ")+ДокОбъект);
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецФункции
			
			Функция СоздатьНовыйСчетФактуру(СтрокаТаблицы, _ДокументОснование)
				
				Если _ДокументОснование = Неопределено Тогда
					ДокументОснование = НайтиМассивСсылокДокументовОснований(СтрокаТаблицы);
				Иначе
					ДокументОснование = _ДокументОснование;
				КонецЕсли;
				
				Если ТипЗнч(ДокументОснование) = Тип("Массив") Тогда
					ДатаПоставки= ДокументОснование[0].Дата;
				Иначе
					ДатаПоставки= ДокументОснование.Дата;
				КонецЕсли;
				
				ПараметрыЗаполнения= Новый Структура("Реквизиты", Новый Структура);
				ПараметрыЗаполнения.Реквизиты.Вставить("Дата", ПолучитьДатуУчетаСФ(ДатаПоставки, СтрокаТаблицы.ЭДОбъект.DocumentDate, СтрокаТаблицы.ДатаУчета));
				
				Если СтрокаТаблицы.ЭДОбъект.Direction = "Inbound" Тогда    
					НовыйДокумент= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").СоздатьДокумент_СчетФактураПолученный(СтрокаТаблицы.ЭДОбъект, ДокументОснование, ПараметрыЗаполнения);
				Иначе
					НовыйДокумент= ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").СоздатьДокумент_СчетФактураВыданный(СтрокаТаблицы.ЭДОбъект, ДокументОснование, ПараметрыЗаполнения);
				КонецЕсли;	
				
				Попытка
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					Возврат НовыйДокумент.Ссылка;
				Исключение
					ПолучитьМодульПрог("Модуль_СообщенияДляПользователей_Форма_ВыводОшибки").ПоказатьОшибку("Ошибка", "Не удалось записать счет-фактуру", ОписаниеОшибки());
					Возврат Неопределено;
				КонецПопытки;
				
			КонецФункции
			
			Процедура ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокРНК)
				
				Инд = 1;
				Для каждого Эл Из МассивСсылокРНК Цикл
					Если Инд = 1 Тогда
						СчетФактураПолученный.Заполнить(МассивСсылокРНК[0]);
					Иначе
						СтрОсн = СчетФактураПолученный.ДокументыОснования.Добавить();
						СтрОсн.ДокументОснование = Эл;
					КонецЕсли;
					
					Инд = Инд + 1;
				КонецЦикла;
				
			КонецПроцедуры
			
			Процедура ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, ЭДОбъект, ДатаУчета)
				
				Если ЭДОбъект.Direction = "Inbound" Тогда
					Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("НомерВходящегоДокумента")=Неопределено Тогда
						
						Если ЭДОбъект.Type = "Invoice" Тогда
							СчетФактураПолученный.НомерВходящегоДокумента 	= ЭДОбъект.DocumentNumber;
							СчетФактураПолученный.ДатаВходящегоДокумента 	= ЭДОбъект.DocumentDate;	
						ИначеЕсли ЭДОбъект.Type = "InvoiceRevision" Тогда
							СчетФактураПолученный.Исправление 		= Истина;
							СчетФактураПолученный.НомерИсправления 	= ЭДОбъект.DocumentNumber;
							СчетФактураПолученный.ДатаИсправления 	= ЭДОбъект.DocumentDate;
													
							СчетФактураПолученный.НомерВходящегоДокумента = ЭДОбъект.OriginalDocumentNumber;
							СчетФактураПолученный.ДатаВходящегоДокумента  = ЭДОбъект.OriginalDocumentDate;
						КонецЕсли;
										
					ИначеЕсли НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("ВхДокНомер")=Неопределено Тогда
						СчетФактураПолученный.ВхДокНомер 	= ЭДОбъект.DocumentNumber;
						СчетФактураПолученный.ВхДокДата 	= ЭДОбъект.DocumentDate;
					КонецЕсли;
				КонецЕсли;	
				
				СтруктураВероятныеПоля = ОпределитьВероятныеПараметрыДокумента(ЭДОбъект);
				Если ЗначениеЗаполнено(СтруктураВероятныеПоля.Контрагент)=Истина И (НЕ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок()="Модуль_ИнтеграцияУТ102") Тогда 
					СчетФактураПолученный.Контрагент = СтруктураВероятныеПоля.Контрагент;
				КонецЕсли;	
				Если ЗначениеЗаполнено(СтруктураВероятныеПоля.Организация)=Истина Тогда 
					СчетФактураПолученный.Организация = СтруктураВероятныеПоля.Организация;
				КонецЕсли;
				
				Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодВидаОперации")=Неопределено Тогда 
					СчетФактураПолученный.КодВидаОперации = "01";
				КонецЕсли;
				
				Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодСпособаПолучения")=Неопределено Тогда 
					СчетФактураПолученный.КодСпособаПолучения = 2;
				КонецЕсли;
				
				Если ЭДОбъект.Direction = "Outbound" Тогда
					//проставим реквизиты выставления
					Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("Выставлен")=Неопределено Тогда 
						СчетФактураПолученный.Выставлен = Истина;
					КонецЕсли;
					Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("КодСпособаВыставления")=Неопределено Тогда 
						СчетФактураПолученный.КодСпособаВыставления = 2;
					КонецЕсли;
					Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("ДатаВыставления")=Неопределено Тогда 
						СчетФактураПолученный.ДатаВыставления = ЭДОбъект.ConfirmationDate;
					КонецЕсли;
				КонецЕсли;	 
				
				УстановитьДоговорВСчетеФактуреДляДиадок(СчетФактураПолученный);
				
				Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАльфаАвто41"
					ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияТКПТ" Тогда
					
					ДатаПоставки = ?(НЕ СчетФактураПолученный.ДокументОснование = Неопределено, СчетФактураПолученный.ДокументОснование.Дата, Неопределено);
					ДатаВходящегоДокумента = СчетФактураПолученный.ВхДокДата;
				Иначе
					ДатаПоставки = ?(СчетФактураПолученный.ДокументыОснования.Количество()>0,  СчетФактураПолученный.ДокументыОснования[0].ДокументОснование.Дата, Неопределено);
					ДатаВходящегоДокумента = СчетФактураПолученный.ДатаВходящегоДокумента;
				КонецЕсли;
							
				СчетФактураПолученный.Дата = ПолучитьДатуУчетаСФ(ДатаПоставки, ДатаВходящегоДокумента, ДатаУчета);
				
			КонецПроцедуры
			
			Функция ПолучитьДатуУчетаСФ(ДатаПоставки, ДатаСФ, ДатаПолученияСФ)
				
				Если (ДатаПоставки <> Неопределено) И (ДатаСФ>='20150101') 
					И (КонецКвартала(ДатаПоставки) + 15*24*60*60 >= НачалоДня(ТекущаяДата())) Тогда
				
					Возврат  ДатаПоставки;
				ИначеЕсли ЗначениеЗаполнено(ДатаПолученияСФ)=Истина Тогда
					Возврат ДатаПолученияСФ;
				Иначе
					Возврат ТекущаяДата();
				КонецЕсли;
		
			КонецФункции
		
			Функция ОпределитьВероятныеПараметрыДокумента(ОбъектДиадок, Организация = Неопределено, Контрагент = Неопределено)
				
				ВероятныйКонтрагент = Контрагент;
				Если НЕ ЗначениеЗаполнено(ВероятныйКонтрагент) Тогда
					ВероятныйКонтрагент = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").CounteragentBoxID_2_Контрагент(ОбъектДиадок.counterAgent.Id, ОбъектДиадок.Organization.Id);
				КонецЕсли;
				
				ВероятнаяОрганизация = Организация;
				Если НЕ ЗначениеЗаполнено(вероятнаяОрганизация) Тогда
					ВероятнаяОрганизация = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(ОбъектДиадок.Organization.Id);
				КонецЕсли;
				
				Возврат Новый Структура("Организация, Контрагент", ВероятнаяОрганизация, ВероятныйКонтрагент);
				
			КонецФункции
			
			Процедура ОтказВПодписи(СтрокаТаблицы) Экспорт
				
				ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.ПервичныйДокументДляСопоставления);
				
				ЗаголовокОперации = "";
				Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) или ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
					ЗаголовокОперации = "Отказать в подписи в Диадок"
				ИначеЕсли ЭтоСчетФактура(СтрокаТаблицы.ЭДОбъект.Type) или ЭтоСчетФактураИсправленная(СтрокаТаблицы.ЭДОбъект.Type) Тогда
					ЗаголовокОперации = "Запросить уточнение в Диадок";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗаголовокОперации)=Истина Тогда
					ОбработатьЗадачуОтказа(СтрокаТаблицы);
				КонецЕсли;
				
				ЛогироватьКонецОбработкиДокумента();
				
			КонецПроцедуры
			
			Процедура ОбработатьЗадачуОтказа(СтрокаТаблицы)
				
				Если МассивЗадачНаОтказ = Неопределено Тогда
					МассивЗадачНаОтказ=	Новый Массив;
				КонецЕсли;
				
				Пока МассивЗадачНаОтказ.Количество() = МаксимальноеКоличествоЗаданий Цикл
					ОбработатьМассивЗадачНаОтказ();
				КонецЦикла;
				
				Попытка
					Если ЭтоСчетФактура(Лев(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда
						
						ЛогироватьНачалоОперации("Запросить уточнение в Диадок");
						
						RejectTask=	СтрокаТаблицы.ЭДОбъект.SendCorrectionRequestAsync(СтрокаТаблицы.КомментарийКДействию);
						
						МассивЗадачНаОтказ.Добавить(Новый Структура("СтрокаТаблицы, Task", СтрокаТаблицы, RejectTask));
						
					Иначе
						
						ЛогироватьНачалоОперации("Отказать в подписи в Диадок");
						
						RejectTask= ПолучитьМодульПрог("Модуль_Логика_ПоведениеФорм").ОтказатьВПодписи(СтрокаТаблицы.ЭДОбъект, СтрокаТаблицы.КомментарийКДействию, Истина);
						
						МассивЗадачНаОтказ.Добавить(Новый Структура("СтрокаТаблицы, Task", СтрокаТаблицы, RejectTask));
						
					КонецЕсли;
				Исключение
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
					Сообщить(ОписаниеОшибки());
				КонецПопытки;

				ЛогироватьКонецОперации();
				
			КонецПроцедуры
			
			Процедура ОбработатьМассивЗадачНаОтказ()
				
				ЛогироватьНачалоОперации("Обработка задач отказа Диадок");
				
				МассивУдаляемых=	Новый Массив();
				
				Индекс=	0;
				Для каждого ЭлементМассива Из МассивЗадачНаОтказ Цикл
					
					Task=	ЭлементМассива.Task;
					
					Если Task.IsCompleted = Истина Тогда
						
						СтрокаТаблицы=	ЭлементМассива.СтрокаТаблицы;
						Попытка
							Result=	Task.Result;
							СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
							Если ЭтоСчетФактура(Лев(СтрокаТаблицы.ЭДОбъект.Type, 7)) Тогда
								СтрокаТаблицы.КомментарийКДействию = "Сформирован запрос на уточнение";
							Иначе
								СтрокаТаблицы.КомментарийКДействию = "Сформирован отказ в подписи";
							КонецЕсли;
							СтрокаТаблицы.ЭДОбъект = Модуль_РаботаССерверомДиадок.ОбновитьЭДоОбъектДиадока(СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
						Исключение
							СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
							СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
						КонецПопытки;
						
						СтрокаТаблицы.Вкл = Ложь;
						
						МассивУдаляемых.Добавить(ЭлементМассива);
						
						КоличествоВыгружено = КоличествоВыгружено + 1;
						ОбновитьТекущееСостояниеОбработки("Идет обработка документов с ошибками");
						
						Оповестить("ОбновитьСтроку", СтрокаТаблицы.ЭДОбъект, ЭтаФорма);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
					Индекс=	МассивЗадачНаОтказ.Найти(УдаляемыйЭлемент);
					Если НЕ Индекс = Неопределено Тогда
						МассивЗадачНаОтказ.Удалить(Индекс);
					КонецЕсли;
				КонецЦикла;
				
				ЛогироватьКонецОперации();
				
			КонецПроцедуры
			
		//} Документы с ошибками
		//////////////////////////////////////////////////
		
		Процедура ОбработатьВсеАвтоматически(СтрокаТаблицы) Экспорт
			
			Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьИПодписать 
				ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ Тогда
				СопоставитьИПодписать(СтрокаТаблицы);	
			ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда
				СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы);
			ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
				ИЛИ СтрокаТаблицы.СостояниеОбработки=СтруктураДействийПоДокументу.ЗапроситьУточнение Тогда
				ОтказВПодписи(СтрокаТаблицы);	
			КонецЕсли;
			
		КонецПроцедуры
		
	//} ТОРГОВЫЕ СЕТИ - ОБРАБОТКА ДОКУМЕНТОВ

//} СТАРЫЙ ИНТЕРФЕЙС


//{ ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	Функция ВернутьОбрабатываемуюТаблицу()
		
		Если ТекущийСценарий = "Подписать" 
			ИЛИ ТекущийСценарий = "ПодписатьИСоздать"
			ИЛИ ТекущийСценарий = "СопоставитьИПодписать" Тогда
			
			Возврат ТаблицаПодписать;
		Иначе
			Возврат ТаблицаВыбораДокументов;
		КонецЕсли;	
			
	КонецФункции
		
	Процедура ОбрабатываемаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование)
		Отказ = Истина;
	КонецПроцедуры

	Процедура ОбрабатываемаяТаблицаПередУдалением(Элемент, Отказ)
		Отказ = Истина;
	КонецПроцедуры
	
	Процедура ОбрабатываемаяТаблицаПриПолученииДанных(Элемент, ОформленияСтрок)
		ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокЭД(ОформленияСтрок);	
	КонецПроцедуры
	
	Процедура ЗаполнитьКэшЗаголовковСтраниц()
	
		СтраницыПанели = ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы;
		
		Для Каждого Страница из СтраницыПанели Цикл
			
			НайденныеСтроки = КэшЗаголовковСтраниц.НайтиСтроки(Новый Структура("ИмяСтраницы", Страница.Имя));
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрокаКеш = КэшЗаголовковСтраниц.Добавить();
				НоваяСтрокаКеш.ИмяСтраницы 			= Страница.Имя;
				НоваяСтрокаКеш.ЗаголовокСтраницы 	= Страница.Заголовок;
			КонецЕсли;
						
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьЗаголовокСтраницыИзКэш(ИмяСтраницы)
		
		НайденныеСтроки = КэшЗаголовковСтраниц.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяСтраницы));
		
		Если НайденныеСтроки.Количество()=0 Тогда
			Возврат "";
		Иначе
			Возврат НайденныеСтроки[0].ЗаголовокСтраницы;
		КонецЕсли;
		
	КонецФункции

	Процедура ВыполнитьПереключениеВкладок()
		
		СтраницаПодписать 							= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаПодписать;
		СтраницаСопоставитьСДокументамиПоступления 	= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСДокументамиПоступления;
		СтраницаСопоставитьСчетФактуры 				= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСопоставитьСчетФактуры;
		СтраницаСоздатьДокументыПоступления 		= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьДокументыПоступления;
		СтраницаСоздатьСчетФактуры 					= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаСоздатьСчетФактуры; 
		СтраницаОбработкаЗавершена 					= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.Страницы.СтраницаОбработкаЗавершена;
		
		АктивнаяСтраница 							= ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница;
		
		Если ТекущийСценарий = "Подписать" Тогда
			
			Если ТаблицаПодписать.Количество() = 0 Тогда
				ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
							
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаСопоставитьСДокументамиПоступления;	
			КонецЕсли;
			
			Если АктивнаяСтраница = СтраницаСопоставитьСДокументамиПоступления Тогда
				
				Если ТаблицаСопоставитьДокументыПоступления.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСопоставитьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСопоставитьСчетФактуры Тогда						
				
				Если ТаблицаСопоставитьСчетФактуры.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;	
				
			КонецЕсли;				
			
		ИначеЕсли ТекущийСценарий = "СоздатьВ1С" Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаСоздатьДокументыПоступления;
			КонецЕсли;
			
			Если АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда						
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаПодписать;
			КонецЕсли;				
			
			Если АктивнаяСтраница = СтраницаПодписать Тогда
				
				Если ТаблицаПодписать.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьДокументыПоступления;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = "СопоставитьИПодписать" Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаСопоставитьСДокументамиПоступления;
			КонецЕсли;				
			
			Если АктивнаяСтраница = СтраницаСопоставитьСДокументамиПоступления Тогда
				
				Если ТаблицаСопоставитьДокументыПоступления.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаПодписать;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаПодписать Тогда
				
				Если ТаблицаПодписать.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
												
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					ЭлементыФормы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецПроцедуры

	
	Функция ПолучитьЗаголовкиНабораСостоянийОбработки(КлючНабора)
		
		Если НаборСостоянийОбработки.Свойство(КлючНабора) Тогда
			Возврат НаборСостоянийОбработки[КлючНабора];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
		
	Процедура ОбъяснитьПользователю(ОбрабатываемаяСтрока)
		
		Если ПолеВыбораДействия = "Подписать" Тогда
			Если ОбрабатываемаяСтрока.DocumentType="Invoice" Тогда
				Предупреждение(ПолучитьЗаголовкиНабораСостоянийОбработки("НеТребуетПодписания").ТекстРасшифровки,,КраткоеНаименованиеСистемы);
			ИначеЕсли ОбрабатываемаяСтрока.ЭДОбъект.Status = "InboundWithRecipientSignature" Тогда
				Предупреждение(ПолучитьЗаголовкиНабораСостоянийОбработки("ПодписанРанее").ТекстРасшифровки,,КраткоеНаименованиеСистемы);
			Иначе 
				Предупреждение(ПолучитьЗаголовкиНабораСостоянийОбработки("НеТребуетПодписания").ТекстРасшифровки,,КраткоеНаименованиеСистемы);
			КонецЕсли;
			
		ИначеЕсли ПолеВыбораДействия = "Сопоставить" Тогда
			Если ДокументМожноСопоставлять(ОбрабатываемаяСтрока.ЭДОбъект)=ложь Тогда
				Предупреждение("В групповом сопоставлении участвуют только Торг-12 и Счет-фактура",,КраткоеНаименованиеСистемы);
			ИначеЕсли ЗначениеЗаполнено(ОбрабатываемаяСтрока.ПервичныйДокумент) Тогда
				Предупреждение(ПолучитьЗаголовкиНабораСостоянийОбработки("УжеСопоставлен").ТекстРасшифровки,,КраткоеНаименованиеСистемы);
			ИначеЕсли ОбрабатываемаяСтрока.СостояниеОбработки = ПолучитьЗаголовкиНабораСостоянийОбработки("НеНайденСопоставленныйДокОснованиеПТУ").ЗаголовокСсылки Тогда
				Предупреждение(ПолучитьЗаголовкиНабораСостоянийОбработки("НеНайденСопоставленныйДокОснованиеПТУ").ТекстРасшифровки,,КраткоеНаименованиеСистемы);
			КонецЕсли;
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаДляТорговыхСетей" Тогда
			Если ОбрабатываемаяСтрока.СостояниеОбработки = "" Тогда
				Предупреждение("Документ уже обработан",,КраткоеНаименованиеСистемы);	
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ТаблицаДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
		
		ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокЭД(ОформленияСтрок);
		
	КонецПроцедуры
	
	Функция ПолучитьМассивВидимыхКолонок()
		
		МассивВидимыхКолонок = Новый Массив();
		МассивВидимыхКолонок.Добавить("вкл");
		МассивВидимыхКолонок.Добавить("СостояниеОбработки");
		МассивВидимыхКолонок.Добавить("ТипДокумента");
		МассивВидимыхКолонок.Добавить("Номер");
		МассивВидимыхКолонок.Добавить("Дата");
		МассивВидимыхКолонок.Добавить("Покупатель");
		МассивВидимыхКолонок.Добавить("Подразделение");
		МассивВидимыхКолонок.Добавить("ДатаУчета");
		МассивВидимыхКолонок.Добавить("Сумма");
		МассивВидимыхКолонок.Добавить("СостояниеДокументооборота");
		МассивВидимыхКолонок.Добавить("ПервичныйДокумент");
		
		Если ПолеВыбораДействия = "Сопоставить" Тогда
			МассивВидимыхКолонок.Добавить("ПервичныйДокументДляСопоставления");
		ИначеЕсли ПолеВыбораДействия = "Подписать"
			ИЛИ ПолеВыбораДействия = "ПодписатьСопоставленные" Тогда
			МассивВидимыхКолонок.Добавить("СтатусСогласования");
		ИначеЕсли ПолеВыбораДействия = "КомплекснаяОбработкаДляТорговыхСетей" Тогда
			МассивВидимыхКолонок.Добавить("ПервичныйДокументДляСопоставления");
			МассивВидимыхКолонок.Добавить("НомерАкта");
			МассивВидимыхКолонок.Добавить("ЕстьОтклонения");
		КонецЕсли;
		
		Возврат МассивВидимыхКолонок;
		
	КонецФункции
			
	Функция ПроверитьУстановкуВсехФлажковСопоставление()
		
		Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
			Если СтрокаТаблицыДокументов.Вкл Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;	
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПроверитьУстановкуВсехФлажковПодписание()
		
		Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
			Если ПроверитьВозможностьПодписи(СтрокаТаблицыДокументов) Тогда
				Если СтрокаТаблицыДокументов.Вкл Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		Возврат Ложь;
		
	КонецФункции
			
	Функция ПроверитьУстановкуВсехФлажковКомплекснаядляСетей()
		
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		
		Если НЕ НайденныеСтроки.Количество()=0 Тогда
			Возврат Истина;
		Иначе	
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
			
	Процедура УстановитьФлажокДляСтроки(Стр, ЗначениеФлажка)
		Выполнить("стр.вкл" + " = " + ?(ЗначениеФлажка, "Истина", "Ложь"));
	КонецПроцедуры
	
	Процедура ТаблицаВыгружаемыхДокументовПриИзмененииФлажка(Элемент, Колонка)
		ВклВсеФлажки = ОпределитьВключеныЛиВсеФлажки(ТаблицаДокументов);
	КонецПроцедуры
	
	Функция ОпределитьВключеныЛиВсеФлажки(тз)
		
		Для каждого стр Из тз Цикл
			Если стр.вкл <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	Функция ОрганизацияНаУСН(OrganizationID)
	
		Если Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаОрганизаций")=Неопределено Тогда 
			Возврат Ложь;
		Иначе 		
			
			Организация = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(OrganizationID);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения
			               |ИЗ
			               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
						   
			Запрос.УстановитьПараметр("Организация", организация);
			
			РезультатВыполненияЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатВыполненияЗапроса.Следующий() Тогда
				Возврат (РезультатВыполненияЗапроса.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
			Иначе 
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции

	Функция ПоДокументуВыставленЗапросНаУточнение(ЭДОбъект)
		Возврат ЭДОбъект.AmendmentRequested;	
	КонецФункции
	
	Функция ФорматироватьТекстОшибки(ТекстОшибки)
		
		Маркер ="Ошибка валидации:";
		Результат = ТекстОшибки;
		Если Найти(Врег(Результат), Врег(Маркер))>0 Тогда
			Результат = Прав(Результат, СтрДлина(Результат) - Найти(Врег(Результат), Врег(Маркер)) - СтрДлина(Маркер)+1);
		КонецЕсли;
		
		Возврат СокрЛП(результат);
		
	КонецФункции
	
	Функция ПолучитьНомерАктаИзСФ(ЭДОбъект)
		Возврат ПолучитьМодульПрог("МодульСетиОбщиеПроцедуры").ПолучитьНомерАктаИзСФ(ЭДОбъект);
	КонецФункции
	
	Функция НайтиСвязаннуюСФВТаблицеДокументов(Document)
		
		SubordinateDocumentIds = Document.SubordinateDocumentIds;
		Для ц=0 по SubordinateDocumentIds.count-1 Цикл 
			id = SubordinateDocumentIds.GetItem(ц);
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", id, Document.Organization.Id));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					Если ЭтоСчетФактура(НайденнаяСтрока.DocumentType) Тогда
						Возврат НайденнаяСтрока.ЭДОбъект;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		InitialDocumentIds = Document.InitialDocumentIds;
		Для ц=0 по InitialDocumentIds.count-1 Цикл 
			id = InitialDocumentIds.GetItem(ц);
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", id, Document.Organization.Id));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					Если ЭтоСчетФактура(НайденнаяСтрока.DocumentType) Тогда
						Возврат НайденнаяСтрока.ЭДОбъект;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
	Функция ПолучитьМассивСвязанныхДокументов(Doc, ТаблицаДокументов)
		
		МассивПодчиненныхDocument=  ПолучитьМассивПодчиненныхDocument (Doc, ТаблицаДокументов);
		МассивРодительскихDocument= ПолучитьМассивРодительскихDocument(Doc, ТаблицаДокументов);
		
		Для каждого РодительскийDocument из МассивРодительскихDocument Цикл 
			МассивПодчиненныхDocument.Добавить(РодительскийDocument);
		КонецЦикла;
		
		Возврат МассивПодчиненныхDocument;
		
	КонецФункции
	
	Функция ПолучитьМассивПодчиненныхDocument(Doc, ТаблицаДокументов)
		
		результат = Новый массив;
		
		SubordinateDocumentIds = doc.SubordinateDocumentIds;
		Для ц=0 по SubordinateDocumentIds.count-1 Цикл 
			id = SubordinateDocumentIds.GetItem(ц);
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", id, doc.Organization.Id));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				Для каждого НайденнаяСтрока из НайденныеСтроки цикл
					Если ЭтоСчетФактура(НайденнаяСтрока.DocumentType) ИЛИ ЭтоСчетФактураИсправленная(НайденнаяСтрока.DocumentType) Тогда
						результат.Добавить(НайденнаяСтрока.ЭДОбъект);
					КонецЕсли;
				КонецЦикла;
			Иначе
				док =  Модуль_РаботаССерверомДиадок.ПолучитьОбъектДиадок(id, doc.organization, Новый соответствие);
				Если Док <> Неопределено Тогда 
					результат.Добавить(док)
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
		
		Возврат результат;	
		
	КонецФункции
	
	Функция ПолучитьМассивРодительскихDocument(Doc, ТаблицаДокументов)
		
		результат = Новый массив;
		
		InitialDocumentIds = doc.InitialDocumentIds;
		Для ц=0 по InitialDocumentIds.count-1 Цикл 
			id = InitialDocumentIds.GetItem(ц);
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", id, doc.Organization.Id));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				Для каждого НайденнаяСтрока из НайденныеСтроки цикл
					Если ЭтоСчетФактура(НайденнаяСтрока.DocumentType) ИЛИ ЭтоСчетФактураИсправленная(НайденнаяСтрока.DocumentType) Тогда
						результат.Добавить(НайденнаяСтрока.ЭДОбъект);
					КонецЕсли;
				КонецЦикла;
			Иначе
				док =  Модуль_РаботаССерверомДиадок.ПолучитьОбъектДиадок(id, doc.organization, Новый соответствие);
				Если Док <> Неопределено Тогда 
					результат.Добавить(док)
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
		
		Возврат результат;
		
	КонецФункции
	
//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ


//{ ЛОГИРОВАНИЕ
	
	Процедура ЛогироватьНачалоПроцесса()
		
		ДатаСтартаПроцесса = ТекущаяДата();
		КоличествоОбработанныхДокументов = 0;
		
		ТаблицаСобытий = Новый ТаблицаЗначений;
		ТаблицаСобытий.Колонки.Добавить("Событие");
		ТаблицаСобытий.Колонки.Добавить("Количество");
		ТаблицаСобытий.Колонки.Добавить("Длительность");
		ЗаписатьВЛог("Начало массовой обработки документов");
		
	КонецПроцедуры
	
	Процедура ЛогироватьКонецПроцесса()
		
		ДлительностьОбработки =  ТекущаяДата() - ДатаСтартаПроцесса;
		ЗаписатьВЛог("КонецМассовогоПодписания","Обработано документов - "+КоличествоОбработанныхДокументов+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки));
		ВывестиДанныеСтатистики();
	КонецПроцедуры
	
	Процедура ЛогироватьНачалоОбработкиДокумента(ДокументСсылка)
		
		ОбрабатываемыйДокументСсылка = ДокументСсылка;
		ДатаСтартаОбработкиДокумента = ТекущаяДата();
		ЗаписатьВЛог("Начало обработки документа",  , ДокументСсылка)
		
	КонецПроцедуры
	
	Процедура ЛогироватьКонецОбработкиДокумента()
		
		КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
		ДлительностьОбработки =  ТекущаяДата() - ДатаСтартаОбработкиДокумента;
		ЗаписатьВЛог("Конец обработки документа", "Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка) ;
		Если  КоличествоОбработанныхДокументов % 10 = 0 Тогда 
			ВывестиДанныеСтатистики();
		КонецЕсли;	
		
	КонецПроцедуры
	
	Процедура ЛогироватьНачалоОперации(ИдентификаторОперации)
		
		ДатаСтартаОперации = ТекущаяДата();
		ЗаписатьВЛог("Начало операции", ИдентификаторОперации, ОбрабатываемыйДокументСсылка);
		ТекущаяОперация = ИдентификаторОперации;
		
	КонецПроцедуры
	
	Процедура ЛогироватьКонецОперации()
		
		ДлительностьОбработки =  ТекущаяДата() - ДатаСтартаОперации;
		ЗаписатьВЛог("Конец операции", ТекущаяОперация+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка);
		СтрСтатистики = ТаблицаСобытий.Добавить();
		СтрСтатистики.Событие = ТекущаяОперация;
		СтрСтатистики.Количество = 1;
		СтрСтатистики.Длительность  = ДлительностьОбработки;
		
	КонецПроцедуры
	
	Процедура ЗаписатьВЛог(ИдентификаторСобытия, Комментарий = "", ДокументСсылка = Неопределено)
		ЗаписьЖурналаРегистрации("Диадок."+СтрЗаменить(ИдентификаторСобытия, " ", "_"),  ,  , ДокументСсылка, Комментарий);
	КонецПроцедуры
	
	Процедура ВывестиДанныеСтатистики()
		
		ТаблицаСобытий.Свернуть("Событие", "Количество, Длительность");
		РезультатыСтатистики = "Обработано документов: "+КоличествоОбработанныхДокументов;
		Для каждого СтрокаСтатистики из ТаблицаСобытий Цикл 
			РезультатыСтатистики = РезультатыСтатистики +"
			| Событие "+СтрокаСтатистики.Событие+" обработано "+СтрокаСтатистики.Количество+" раз,
			|общая длительность "+ДлительностьСтрока(СтрокаСтатистики.Длительность)+", средняя длительность "+ДлительностьСтрока(?(СтрокаСтатистики.Количество=0, 0, СтрокаСтатистики.Длительность /СтрокаСтатистики.Количество) );
		конецЦикла;
		
		ЗаписатьВЛог("Данные статистики", РезультатыСтатистики);	
	КонецПроцедуры
	
	Функция ДлительностьСтрока(Длительность)
		Возврат  Формат(НачалоДня(ТекущаяДата())+Длительность, "ДФ=HH:mm:ss");
	КонецФункции
        			
//} ЛОГИРОВАНИЕ

//{ ПОДКЛЮЧАЕМЫЙ МОДУЛЬ
	
	Процедура ПодключаемыйМодульТорговыеСетиПослеПроверкиДокумента(КоллекцияОшибок, Document, ПервичныйДокумент, СписокДокументовНаПодпись, DocumentContent)
		
		ПараметрыСобытия= Новый Структура;
		ПараметрыСобытия.Вставить("КоллекцияОшибок"		 	 , КоллекцияОшибок);
		ПараметрыСобытия.Вставить("Document"				 , Document);
		ПараметрыСобытия.Вставить("DocumentContent"			 , DocumentContent);
		ПараметрыСобытия.Вставить("Документ1С"				 , ПервичныйДокумент);
		ПараметрыСобытия.Вставить("СписокДокументовНаПодпись", СписокДокументовНаПодпись);
		
		ОбработкаСобытияПодключаемогоМодуля("ТорговыеСетиПослеПроверкиДокумента", ПараметрыСобытия);
		
	КонецПроцедуры
	
	Процедура ПодключаемыйМодульТорговыеСетиПослеСопоставленияДокумента(СтрокаТаблицы)
		
		ПараметрыСобытия= Новый Структура;
		ПараметрыСобытия.Вставить("СтрокаТаблицы"  , СтрокаТаблицы);
		ОбработкаСобытияПодключаемогоМодуля("ТорговыеСетиПослеСопоставленияДокумента", ПараметрыСобытия);
		
	КонецПроцедуры
	
	Процедура ПодключаемыйМодульТорговыеСетиПослеВыполненияОбработкиДокументов(НайденныеСтроки)
		
		Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
			ПараметрыСобытия= Новый Структура;
			ПараметрыСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
			ОбработкаСобытияПодключаемогоМодуля("ТорговыеСетиПослеВыполненияОбработкиДокумента", ПараметрыСобытия);
		КонецЦикла;
		
		
	КонецПроцедуры

	
//} ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

МаксимальноеКоличествоЗаданий = 100;
ПараметрыХраненияНомераАкта= ОбработкаСобытияПодключаемогоМодуля("ТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта");
СтруктурыПодписей= Новый Соответствие;