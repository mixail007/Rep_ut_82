//{ ИДЕНТИФИКАТОРЫ СВОЙСТВ
	
	Функция ИдентификаторСвойстваЯщикОрганизации() Экспорт
		Возврат "ЯщикДиадокДляОрганизации"
	КонецФункции	
	
	Функция ИдентификаторСвойстваСклада()
		Возврат "DepartmentID"
	КонецФункции
	
	Функция ИдентификаторСвойстваСкладаПредставление()
		Возврат "DepartmentName"
	КонецФункции
	
	Функция ИдентификаторСвойстваПодразделения()
		Возврат "Подр_DepartmentID"
	КонецФункции
	
	Функция ИдентификаторСвойстваПодразделенияПредставление()
		Возврат "Подр_DepartmentName"
	КонецФункции
	
	Функция ИдентификаторСвойстваПодразделениеОрганизации() Экспорт
		Возврат "ПодрДиадокДляОрганизации"
	КонецФункции	
	
	Функция ИдентификаторСвойстваЯщикОрганизацииПредставление()  
		Возврат "ЯщикДиадокДляОрганизацииПредставление"
	КонецФункции
	
	Функция ИдентификаторСвойстваЯщикКонтрагентаПрефикс() Экспорт 
		Возврат "ДДКонтр_";
	КонецФункции
	
	Функция ИдентификаторСвойстваЯщикКонтрагента(BoxId)   
		Возврат ИдентификаторСвойстваЯщикКонтрагентаПрефикс() + BoxId;
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() 
		Возврат "ДДНП_";
	КонецФункции	
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента(BoxId) 
		Возврат ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции	
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору()
		
		Возврат "Дог_DepartmentName";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору()
		
		Возврат "Дог_DepartmentID";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИспользоватьДоговорВБеломЛисте()
		
		Возврат "Дог_ИспользоватьБелыйЛист";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() 
		Возврат "ДДИДП_";
	КонецФункции
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагента(BoxId) 
		Возврат ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() + BoxId;
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType= "") Экспорт
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ИдентификаторСвойстваИдентификаторВПФДиадок(DocumentType="") Экспорт
			Возврат "ИдентификаторВПФВДиадок";	
	КонецФункции 
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет() Экспорт
		Возврат "ИдентификаторДокументаВДиадокСч"
	КонецФункции 
	
	Функция ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок() 
		Возврат "ИдентификаторДопДокументаВДиадок"
	КонецФункции 
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок() 
		Возврат "ИдентификаторЯщикДопДокументаВДиадок"
	КонецФункции 
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType="") 
		
		Возврат ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType);
		
	КонецФункции 
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет() 
		Возврат "ИдентификаторЯщикДокументаВДиадокСч"
	КонецФункции 
	
	Функция ИдентификаторСвойстваУсловноОтправленныйFileGUID()
		Возврат "УсловноОтправленныйFileGUID";
	КонецФункции
	
	Функция ИдентификаторСвойстваПредставлениеСертификатаПользователя()  
		Возврат "ДиадокПредставлениеСертификатаПользователя"
	КонецФункции
	
	Функция ИдентификаторСвойстваНастройкиПрокси()
		Возврат "ДиадокНастройкиПрокси"
	КонецФункции
	
	Функция ИдентификаторСвойстваАдреспроксиСервера()  
		Возврат "ДиадокАдресПроксиСервера"
	КонецФункции
	
	Функция ИдентификаторСвойстваПользовательПроксиСервера()  
		Возврат "ДиадокПользовательПроксиСервера"
	КонецФункции
	
	Функция ИдентификаторСвойстваПарольПроксиСервера()  
		Возврат "ДиадокПарольПроксиСервера"
	КонецФункции
	
	Функция ИдентификаторСвойстваСпособПодписанияТ12() Экспорт
		
		Возврат "ДиадокСпособПодписанияТ12"
		
		// Возможные значения свойства:
		// 1 - "Отпуск груза разрешил"
		// 2 - "Главный (старший) бухгалтер"
		// 3 - "Отпуск груза произвел"
		// 4 - Все три подписи
		
	КонецФункции

	Функция ИдентификаторСвойстваДолжностьПодписанта()
		Возврат "ДиадокИдентификаторСвойстваДолжностьПодписанта"
	КонецФункции	
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляТоваров() Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров"
	КонецФункции
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляУслуг() Экспорт
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг"
	КонецФункции
	
	Функция ИдентификаторСвойстваОтправлятьНеПроведенные() Экспорт
		Возврат "ДиадокОтправкаНепроведенных"
	КонецФункции
	
	Функция ИдентификаторСвойстваОтправкаСчетовНаОплату()
		Возврат "ДиадокОтправкаСчетовНаОплату"
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФорма()
		Возврат "ДиадокВнешняяПечатнаяФорма"
	КонецФункции
	
	Функция ИдентификатрСвойстваСпособОтправкиСчета() Экспорт
		Возврат "ДиадокСпособОтправкиСчета"
	КонецФункции	
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАкта()
		Возврат "ДиадокВнешняяПечатнаяФормаАкта"
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаСверки()
		Возврат "ДиадокВнешняяПечатнаяФормаСверки"
	КонецФункции
	
	Функция ИдентификатрСвойстваСпособОтправкиСверки() Экспорт
		Возврат "ДиадокСпособОтправкиСверки"
	КонецФункции	
	
	Функция ИдентификатрСвойстваТекстКомментарияДиадок()
		Возврат "ТекстКомментарияДиадок"
	КонецФункции	
	
	Функция ИдентификаторСвойстваФИОПодписантаСогласование()
		Возврат "ДиадокФИОПодписантаОтправкаНаСогласование"
	КонецФункции
	
	Функция ИдентификаторСвойстваДолжностьПодписантаСогласование()
		Возврат "ДиадокДолжностьПодписантаОтправкаНаСогласование"
	КонецФункции
	
	Функция ИдентификаторСвойстваНомерВПФ()
		Возврат "ДиадокНомерВПФ";
	КонецФункции	
	
	Функция ИдентификаторСвойстваСписокДопВПФ()
		Возврат "ДиадокСписокДополнительныхВПФ"
	КонецФункции
	
	Функция ИдентификаторСвойстваСтатусОтправляемыхВПФ() Экспорт
		Возврат "СтатусОтправляемыхВПФ_Диадок"
	КонецФункции	
	
	Функция ИдентификаторСвойстваИспользованиеБелогоСписка()
		
		Возврат "ДиадокИспользоватьБелыйСписокДоговоров";
		
	КонецФункции

	Функция ИдентификаторСвойстваФормироватьУПД() Экспорт
		Возврат "ДиадокФормироватьУПД"
	КонецФункции
	
	Функция ИдентификаторСвойстваФормироватьУПДКонтрагент() Экспорт
		Возврат "ДиадокФормироватьУПДКонтрагент"
	КонецФункции

//} ИДЕНТИФИКАТОРЫ СВОЙСТВ

//{ РАБОТА С КОНТРАГЕНТАМИ
	
	Функция Контрагент_2_CounteragentBoxID(Контрагент, BoxID = Неопределено) Экспорт 
		CounteragentID = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		Если ПустаяСтрока(CounteragentID) Тогда
			//Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагента(BoxId));
			Возврат Неопределено 
		Иначе
			Возврат CounteragentID;
		КонецЕсли;
	КонецФункции	
	
	Функция CounteragentBoxID_2_Контрагент(CounteragentID, BoxID = Неопределено) Экспорт 
		КонтрагентСсылка = ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Возврат КонтрагентСсылка;
		Иначе
			//Возврат ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикКонтрагента(BoxId), CounteragentID);
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции	
	
	Функция ПолучитьТаблицуКонтрагентов1С(МассивИД) Экспорт
		Возврат ОдинСАдаптер_НайтиОбъектыПоМассивуЗначений(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), МассивИД);
	КонецФункции
	
	Процедура Установить_CounteragentBoxID_для_Контрагент(Контрагент, CounteragentID, BoxID = Неопределено) Экспорт 
		//ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваЯщикКонтрагента(BoxID), "");
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);
	КонецПроцедуры	
	
	Функция ПолучитьСписокАссоциированныхКонтрагентовДиадок(CounteragentId=Неопределено) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ различные
			|	ЗначенияСвойствОбъектов.Объект как Контрагент
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект  ССЫЛКА Справочник.Контрагенты
			|	И ЗначенияСвойствОбъектов.Значение <> """"
			|	И ПОДСТРОКА(ЗначенияСвойствОбъектов.Свойство.Наименование, 1, " 
			+ СтрДлина(ИдентификаторСвойстваЯщикКонтрагентаПрефикс()) 
			+ ") = &НаименованиеСвойстваПрефикс";
			
			Если ЗначениеЗаполнено(CounteragentId)	Тогда 
				Запрос.Текст = Запрос.Текст + "
				|и  (ЗначенияСвойствОбъектов.Значение = &CounteragentId)";
				Запрос.УстановитьПараметр("CounteragentId", CounteragentId);
			КонецЕсли;	
			
		Запрос.УстановитьПараметр("НаименованиеСвойстваПрефикс", ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		сп = Новый СписокЗначений;
		
		Попытка
			мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
			сп.ЗагрузитьЗначения(мас);
		Исключение
		КонецПопытки;
				
		Возврат сп;
		
	КонецФункции
	
	Функция ПолучитьтаблицуОтношенийСКонтрагентами(Организация=Неопределено) Экспорт 
		ящики = ПолучитьТаблицуЯщиковДиадокОрганизации(Организация);
		ТаблицаОтношений = Новый ТаблицаЗначений;
		ТаблицаОтношений.Колонки.Добавить("Организация");
		ТаблицаОтношений.Колонки.Добавить("Контрагент");
		ТаблицаОтношений.Колонки.Добавить("Статус");
		
		Для каждого строка из Ящики цикл 
			ящик =  Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(строка.Объект); 
			
			//масКонтр  = ящик.GetCounteragentListManager().GetCounteragents();
			масКонтр  = ящик.GetCounteragentListByStatus();
			
			Для ц = 0 по  масКонтр.count-1 цикл 
				элКонтр = масКонтр.getItem(ц);
				КонтрагентСсылка = CounteragentBoxID_2_Контрагент(элКонтр.id, ящик.id );
				Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
					строкаТаблицы = ТаблицаОтношений.добавить();
					СтрокаТаблицы.Организация =   строка.Объект;
					СтрокаТаблицы.Контрагент = КонтрагентСсылка;
					СтрокаТаблицы.Статус = элКонтр.GetStatus();
				КонецЕсли;
			КонецЦикла;
			
		Конеццикла;
		
		Возврат ТаблицаОтношений;
	КонецФункции	
	
	Функция  ПолучитьтаблицуМаршрутизацииПоДоговорам(Организация, Контрагент)
		
		запрос = Новый запрос;
		запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ПОМЕСТИТЬ ТаблицаДоговоров
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДоговоров.Ссылка КАК Договор,
		|	ЗначенияСвойствОбъектов.Значение КАК ToDepartmentID,
		|	ЗначенияСвойствОбъектов1.Значение КАК НаименованиеПодразделения,
		|	ЗначенияСвойствОбъектов2.Значение КАК НаименованиеИспользоватьДоговорВБеломЛисте
		|ИЗ
		|	ТаблицаДоговоров КАК ТаблицаДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ТаблицаДоговоров.Ссылка = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = &ИдПодразделения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
		|		ПО ТаблицаДоговоров.Ссылка = ЗначенияСвойствОбъектов1.Объект
		|			И (ЗначенияСвойствОбъектов1.Свойство.Наименование = &НаименованиеПодразделения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
		|		ПО ТаблицаДоговоров.Ссылка = ЗначенияСвойствОбъектов2.Объект
		|			И (ЗначенияСвойствОбъектов2.Свойство.Наименование = &НаименованиеИспользоватьДоговорВБеломЛисте)
		|ГДЕ
		|	(ЗначенияСвойствОбъектов.Значение <> """"
		|			ИЛИ ЗначенияСвойствОбъектов2.Значение = ИСТИНА)";
		
		НаименованиеСправочникаДоговоров = ПолучитьПрофильКонфигурации().НаименованиеСправочникаДоговоров;
		Если НаименованиеСправочникаДоговоров  <> "ДоговорыКонтрагентов"  Тогда
			запрос.Текст = стрЗаменить(Запрос.Текст, "ДоговорыКонтрагентов",  НаименованиеСправочникаДоговоров);
		КонецЕсли;	
		
		Если 	ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ"
			ИЛИ ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияАсторТД" Тогда
			Запрос.Текст = стрЗаменить(Запрос.Текст, ".Организация",  ".Фирма");
		КонецЕсли;	
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);

		запрос.УстановитьПараметр("Организация", организация);
		запрос.УстановитьПараметр("Контрагент", Контрагент);
		запрос.УстановитьПараметр("ИдПодразделения", ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору());
		запрос.УстановитьПараметр("НаименованиеПодразделения", ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору());
		запрос.УстановитьПараметр("НаименованиеИспользоватьДоговорВБеломЛисте", ИдентификаторСвойстваИспользоватьДоговорВБеломЛисте());
		
		Возврат запрос.ВыполнитьПакет()[1].выгрузить();
		
	КонецФункции	
	
	Функция ПолучитьПараметрыМаршрутизацииПоДоговору(ДоговорКонтрагента) Экспорт 
		
		ToDepartmentID = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ДоговорКонтрагента,  ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору());
		НаименованиеПодразделения = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ДоговорКонтрагента,  ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору());
		
		Если ЗначениеЗаполнено(ToDepartmentID) Тогда 
			Возврат Новый Структура("ToDepartmentID, ВПодразделение", ToDepartmentID, НаименованиеПодразделения);
		Иначе 
			Возврат Неопределено
		КонецЕсли;	 
	КонецФункции	
	
	Функция ПолучитьПараметрыМаршрутизацииПоКонтрагенту(Контрагент) Экспорт 
		
		ToDepartmentID= ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс());
		
		Если ЗначениеЗаполнено(ToDepartmentID) Тогда 
			
			НаименованиеПодразделения= ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс());
			
			Возврат Новый Структура("ToDepartmentID, ВПодразделение", ToDepartmentID, НаименованиеПодразделения);
			
		КонецЕсли;
		
	КонецФункции	
	
	Функция ВернутьТаблицуМаршрутизацииДляКонтрагента(Организация, CounteragentID, BoxID = Неопределено)  Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	Контрагенты.Контрагент
			|ПОМЕСТИТЬ ТаблицаКонтрагентов
			|ИЗ
			|(
			|ВЫБРАТЬ
			|	ЗначенияСвойствОбъектов.Объект КАК Контрагент
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Контрагенты
			|	И ЗначенияСвойствОбъектов.Значение = &ИдентификаторЯщика
			|	И (
			|		ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоИДЯщикаСтарое
			|		ИЛИ ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоИДЯщика
			|	)
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияСвойствОбъектов.Объект
			|) Контрагенты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаКонтрагентов.Контрагент,
			|	Isnull(ЗначенияСвойствОбъектов.Значение, """") КАК НаименованиеПодразделения , 
			|	isnull(ЗначенияСвойствОбъектов2.Значение, """")  КАК ToDepartmentID
			|ИЗ
			|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО (ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Контрагенты)
			|			И ТаблицаКонтрагентов.Контрагент = ЗначенияСвойствОбъектов.Объект
			|			И ((ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоНаименованиеПодразделенияСтарое
			|					И Isnull(ЗначенияСвойствОбъектов.Значение, """") <> """")
			|				ИЛИ (ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоНаименованиеПодразделения
			|					И Isnull(ЗначенияСвойствОбъектов.Значение, """") <> """")
			|			)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
			|		ПО (ЗначенияСвойствОбъектов2.Объект ССЫЛКА Справочник.Контрагенты)
			|			И ТаблицаКонтрагентов.Контрагент = ЗначенияСвойствОбъектов2.Объект
			|			И ((ЗначенияСвойствОбъектов2.Свойство.Наименование = &СвойствоИДПодразделенияСтарое
			|					И isnull(ЗначенияСвойствОбъектов2.Значение, """") <> """")
			|				ИЛИ (ЗначенияСвойствОбъектов2.Свойство.Наименование = &СвойствоИДПодразделения
			|					И isnull(ЗначенияСвойствОбъектов2.Значение, """") <> """")
			|			)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКонтрагентов.Контрагент,
			|	Isnull(ЗначенияСвойствОбъектов.Значение, """"), 
			|	isnull(ЗначенияСвойствОбъектов2.Значение, """")";
		
		Запрос.УстановитьПараметр("СвойствоИДЯщикаСтарое", ИдентификаторСвойстваЯщикКонтрагента(BoxId));
		Запрос.УстановитьПараметр("СвойствоИДЯщика", ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		Запрос.УстановитьПараметр("СвойствоНаименованиеПодразделенияСтарое", ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента(BoxId));
		Запрос.УстановитьПараметр("СвойствоНаименованиеПодразделения", ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс());
		Запрос.УстановитьПараметр("СвойствоИДПодразделенияСтарое", ИдентификаторСвойстваИДПодразделенияКонтрагента(BoxId));
		Запрос.УстановитьПараметр("СвойствоИДПодразделения", ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс());
		Запрос.УстановитьПараметр("ИдентификаторЯщика", CounteragentID);
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);

		Попытка
			результат = Запрос.ВыполнитьПакет()[1].Выгрузить();
		Исключение
			результат = Новый ТаблицаЗначений;
			результат.Колонки.Добавить("Контрагент");
			результат.Колонки.Добавить("НаименованиеПодразделения");
			результат.Колонки.Добавить("ToDepartmentID");
		КонецПопытки;
		
		Результат.колонки.добавить("ТаблицаМаршрутизацииПоДоговорам");
		Для каждого стр из Результат цикл 
			стр.ТаблицаМаршрутизацииПоДоговорам = ПолучитьтаблицуМаршрутизацииПоДоговорам(Организация, стр.Контрагент)
		КонецЦикла;
		
		Возврат результат;
		
	КонецФункции		
	
	Функция ОпределитьReceiverDepartmentIdПоКонтрагенту(Контрагент) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс());
	КонецФункции
	
	Функция ПолучитьТаблицуСвойств()
		
		ТаблицаСвойств=	Новый ТаблицаЗначений;
		
		КС_строки = Новый КвалификаторыСтроки(100);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС_строки); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвойстваОбъектов.Ссылка  как Свойство_ИдКонтрагента
		|ИЗ
		|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.Наименование ПОДОБНО ""ДДКонтр_%""";
		
		ТаблицаСвойств= запрос.Выполнить().Выгрузить();
		ТаблицаСвойств.Колонки.Добавить("BoxID", ОписаниеТиповС);
		для Каждого СтрокаТаблицы из ТаблицаСвойств Цикл 
			СтрокаТаблицы.BoxID = прав(СтрокаТаблицы.Свойство_ИдКонтрагента, стрДлина(СтрокаТаблицы.Свойство_ИдКонтрагента)-стрДлина("ДДКонтр_"));
		КонецЦикла;
		
		Возврат ТаблицаСвойств;
		
	КонецФункции
	
	Функция ПолучитьТаблицуОтношенийКонтрагентов(ТаблицаСвойств)
		
		ТаблицаОтношенийКонтрагентов=	Новый ТаблицаЗначений;
		
		Запрос = Новый запрос;
		Запрос.Текст = 
		//{
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗначенияСвойствОбъектов.Объект КАК Организация,
			|	ЗначенияСвойствОбъектов.Значение КАК ИдентификаторОрганизации,
			|	НастройкиПФДляТоваров.Значение КАК ПечатнаяФормаДляТоваров,
			|	НастройкиПФДляУслуг.Значение КАК ПечатнаяФормаДляУслуг
			|ПОМЕСТИТЬ ТаблицаДанныхОрганизаций
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК НастройкиПФДляТоваров
			|		ПО ЗначенияСвойствОбъектов.Объект = НастройкиПФДляТоваров.Объект
			|			И (НастройкиПФДляТоваров.Свойство = &ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК НастройкиПФДляУслуг
			|		ПО ЗначенияСвойствОбъектов.Объект = НастройкиПФДляУслуг.Объект
			|			И (НастройкиПФДляУслуг.Свойство = &ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг)
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Организации
			|	ЗначенияСвойствОбъектов.Свойство = &ЯщикДиадокДляОрганизации
			|	И ЗначенияСвойствОбъектов.Значение <> """"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЗ.Свойство_ИдКонтрагента,
			|	ТЗ.BoxID
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&ТЗ КАК ТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Свойство_ИдКонтрагента,
			|	ВТ.BoxID,
			|	СвойстваОбъектов.Ссылка КАК Свойство_ИдПодразделенияКонтрагента,
			|	СвойстваОбъектов2.Ссылка КАК Свойство_НаименованиеПодразделенияКонтрагента
			|ПОМЕСТИТЬ ТаблицаСвойствКонтрагентов
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
			|		ПО (""ДДИДП_"" + ВТ.BoxID = СвойстваОбъектов.Наименование)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов2
			|		ПО (""ДДНП_"" + ВТ.BoxID = СвойстваОбъектов2.Наименование)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаДанныхОрганизаций.Организация,
			|	ТаблицаДанныхОрганизаций.ИдентификаторОрганизации,
			|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляТоваров,
			|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляУслуг,
			|	ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента,
			|	ТаблицаСвойствКонтрагентов.Свойство_ИдПодразделенияКонтрагента,
			|	ТаблицаСвойствКонтрагентов.Свойство_НаименованиеПодразделенияКонтрагента,
			|	ТаблицаСвойствИДКонтрагента.Объект КАК Контрагент,
			|	ТаблицаСвойствИДКонтрагента.Значение КАК ИдКонтрагента
			|ПОМЕСТИТЬ ТаблицаСКонтрагентами
			|ИЗ
			|	ТаблицаДанныхОрганизаций КАК ТаблицаДанныхОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствКонтрагентов КАК ТаблицаСвойствКонтрагентов
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ТаблицаСвойствИДКонтрагента
			|			ПО ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента = ТаблицаСвойствИДКонтрагента.Свойство
			|				И (ТаблицаСвойствИДКонтрагента.Объект ССЫЛКА Справочник.Контрагенты)
			|				И (ТаблицаСвойствИДКонтрагента.Значение <> """")
			|		ПО Истина
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСКонтрагентами.Организация,
			|	ТаблицаСКонтрагентами.ИдентификаторОрганизации,
			|	ЕстьNull(ТаблицаСКонтрагентами.ПечатнаяФормаДляТоваров, """") как ПечатнаяФормаДляТоваров ,
			|	ЕстьNull(ТаблицаСКонтрагентами.ПечатнаяФормаДляУслуг, """") как ПечатнаяФормаДляУслуг,
			|	ТаблицаСКонтрагентами.Свойство_ИдКонтрагента,
			|	ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента,
			|	ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента,
			|	ТаблицаСКонтрагентами.Контрагент,
			|	ТаблицаСКонтрагентами.ИдКонтрагента,
			|	ЗначенияСвойствОбъектов.Значение КАК ИдПодразделенияКонтрагента,
			|	ЗначенияСвойствОбъектов1.Значение  как НаименованиеПодразделенияКонтрагента
			|ИЗ
			|	ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ТаблицаСКонтрагентами.Контрагент = ЗначенияСвойствОбъектов.Объект
			|			И ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента = ЗначенияСвойствОбъектов.Свойство
			|			И (ЗначенияСвойствОбъектов.Объект ССЫЛКА Справочник.Контрагенты)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
			|		ПО ТаблицаСКонтрагентами.Контрагент = ЗначенияСвойствОбъектов1.Объект
			|			И (ЗначенияСвойствОбъектов1.Объект ССЫЛКА Справочник.Контрагенты)
			|			И ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента = ЗначенияСвойствОбъектов1.Свойство";
		//}	
			
		Запрос.УстановитьПараметр("ЯщикДиадокДляОрганизации",							ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваЯщикОрганизации()));
		Запрос.УстановитьПараметр("ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваПечатнаяФормаДляТоваров()));
		Запрос.УстановитьПараметр("ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг",   ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваПечатнаяФормаДляУслуг()));
		Запрос.УстановитьПараметр("ТЗ", ТаблицаСвойств);
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "Справочник.Организации", "Справочник.Фирмы");
		КонецЕсли;
		
		Попытка
			ТаблицаОтношенийКонтрагентов = Запрос.ВыполнитьПакет()[4].Выгрузить();
		Исключение
			ВызватьИсключение;	
		КонецПопытки;
		
		ТаблицаОтношенийКонтрагентов.Колонки.Добавить("Статус");
		ТаблицаОтношенийКонтрагентов.Колонки.Добавить("ЭтоТестоваяОрганизация");
		ТаблицаОтношенийКонтрагентов.Колонки.Добавить("ЭтоТестовыйКонтрагент");
		ТаблицаОтношенийКонтрагентов.Колонки.Добавить("КонтрагентЕстьВДиадоке");
		
		Возврат ТаблицаОтношенийКонтрагентов;
		
	КонецФункции
	
	функция ПолучитьСписокКонтрагентовПоЯщику(ящик, КэшСписковКонтрагентов)
		
		СписокИзКэша =  КэшСписковКонтрагентов.Получить(ящик.Id); 
		 Если СписокИзКэша <> неопределено Тогда 
			 возврат СписокИзКэша
		 Иначе 
			 СписокКонтрагентов =    ящик.GetCounteragentListByStatus("IsMyCounteragent");
			 КэшСписковКонтрагентов.Вставить(ящик.Id, СписокКонтрагентов);
			 возврат  СписокКонтрагентов;
		 КонецЕсли;	 
					
	КонецФункции
	
	Процедура ОбновитьСтатусыКонтрагентов(ТаблицаОтношенийКонтрагентов, Организация, CounteragentList, Статус, ящик)
		Для ц = 0 по  CounteragentList.count-1 цикл 
			Countragent =  CounteragentList.GetItem(ц);
			выборка = ТаблицаОтношенийКонтрагентов.найтистроки(Новый Структура("Организация, ИдКонтрагента", Организация, Countragent.ID));
			для каждого строка из выборка цикл 
				строка.Статус = статус;
				строка.ЭтоТестовыйКонтрагент = countragent.IsTest;
				строка.КонтрагентЕстьВДиадоке = Истина;
				строка.ЭтоТестоваяОрганизация = ящик.isTest;
			КонецЦикла
		КонецЦикла;
	КонецПроцедуры
	
	Функция УстановитьПараметрыМаршрутизацииДляКонтрагента(Контрагент, BoxID = Неопределено, НаименованиеПодразделения, ИДПодразделения)    Экспорт 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(	Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс(), НаименованиеПодразделения);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(	Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс(), ИДПодразделения);
		
	КонецФункции	
	
	Функция УстановитьПараметрыМаршрутизацииДляДоговора(Договор, НаименованиеПодразделения, ИДПодразделения, ИспользоватьДоговорВБеломЛисте) Экспорт 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору(), НаименованиеПодразделения);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору(), ИДПодразделения);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваИспользоватьДоговорВБеломЛисте(), ИспользоватьДоговорВБеломЛисте);
		
	КонецФункции	
	
	Процедура УстановитьСоотвествиеДоговора(Договор,ДоговорСвойство) Экспорт
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Договор, "DDContract", ДоговорСвойство);
		
	КонецПроцедуры
	
	Процедура УстановитьИспользованиеБелогоСпискаДоговоров(Контрагент, ИспользоватьБелыйСписок) Экспорт
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИспользованиеБелогоСписка(), ИспользоватьБелыйСписок);
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеИспользованияБелогоСпискаДоговоров(Контрагент) Экспорт
		
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИспользованиеБелогоСписка());
		
	КонецФункции
	
	Функция ПолучитьЗначениеИспользоватьДоговорВБеломЛисте(ДоговорКонтрагент) Экспорт
		
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ДоговорКонтрагент, ИдентификаторСвойстваИспользоватьДоговорВБеломЛисте());
		
	КонецФункции

	Процедура УстановитьПриглашенияДатаНапоминания(МассивОрганизаций1С, ДатаНовогоПоиска) Экспорт
		
		Для Каждого Организация1С ИЗ МассивОрганизаций1С Цикл
			
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация1С, "ДиадокПриглашенияДатаНапоминания", ДатаНовогоПоиска);
			
		КонецЦикла;
		
	КонецПроцедуры
	
//} РАБОТА С КОНТРАГЕНТАМИ

//{ РАБОТА С ОРГАНИЗАЦИЯМИ
	
	Функция Организация_2_BoxID(Организация) Экспорт 
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация,  ИдентификаторСвойстваЯщикОрганизации() );
	КонецФункции	
	
	Функция Организация_2_DepartmentKpp(Организация) Экспорт 
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация,  ИдентификаторСвойстваПодразделениеОрганизации());
	КонецФункции	
	
	Функция BoxID_2_Организация(BoxID, DepartmentKpp = "") Экспорт 
		Возврат ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикОрганизации(), BoxID, ИдентификаторСвойстваПодразделениеОрганизации(), DepartmentKpp);
	КонецФункции	
	
	Функция BoxIDDepartment_2_Организация(BoxID, Department = Неопределено) Экспорт 
		Если Department = Неопределено Тогда
			Возврат ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикОрганизации(), BoxID, ИдентификаторСвойстваПодразделениеОрганизации(), "");
		Иначе
			тз = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
			DepartmentKpp = "";
			Для каждого данныеСопоставленныхОрганизаций Из тз Цикл
				Если DepartmentВходитВТекущееДеревоПодразделений(Department, данныеСопоставленныхОрганизаций) Тогда
					DepartmentKpp = данныеСопоставленныхОрганизаций.КПППодразделения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Возврат ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").BoxID_2_Организация(BoxID, DepartmentKpp);
		КонецЕсли;
	КонецФункции	
	
	Функция Склад_2_DepartmentName(Склад) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Склад,  ИдентификаторСвойстваСкладаПредставление()); 	
	КонецФункции
	
	Функция Склад_2_DepartmentID(Склад) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Склад,  ИдентификаторСвойстваСклада()); 	
	КонецФункции
	
	Функция ПолучитьТаблицуСвойствСкладов() Экспорт
		
		ИдентификаторыСвойств = Новый Структура;
		
		ИдентификаторыСвойств.Вставить("ПредставлениеСклада",ИдентификаторСвойстваСкладаПредставление());
		ИдентификаторыСвойств.Вставить("ИдентификаторСклада",ИдентификаторСвойстваСклада());
		
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьТаблицуСвойствСкладов(ИдентификаторыСвойств); 	
		
	КонецФункции
	
	Функция Контрагент_2_BoxID(Контрагент) Экспорт 
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
	КонецФункции
	
	Функция DepartmentID_2_МассивСкладов(DepartmentID) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_НайтиОбъекты(ИдентификаторСвойстваСклада(), DepartmentID);	
	КонецФункции
	
	Функция Установить_DepartmentID_для_Склада(Склад,DepartmentID) Экспорт
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Склад, ИдентификаторСвойстваСклада(), DepartmentID)
	КонецФункции
	
	Функция Установить_DepartmentName_для_Склада(Склад,DepartmentName) Экспорт
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Склад, ИдентификаторСвойстваСкладаПредставление(), DepartmentName)
	КонецФункции
	
	Функция DepartmentID_2_МассивПодразделений(DepartmentID) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_НайтиОбъекты(ИдентификаторСвойстваПодразделения(), DepartmentID);	
	КонецФункции
	
	Функция Подразделение_2_DepartmentName(Склад) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Склад,  ИдентификаторСвойстваПодразделенияПредставление()); 	
	КонецФункции
	
	Функция Подразделение_2_DepartmentID(Склад) Экспорт
		Возврат ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Склад,  ИдентификаторСвойстваПодразделения()); 	
	КонецФункции
	
	Функция Установить_DepartmentID_для_Подразделения(Склад,DepartmentID) Экспорт
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Склад, ИдентификаторСвойстваПодразделения(), DepartmentID)
	КонецФункции
	
	Функция Установить_DepartmentName_для_Подразделения(Склад,DepartmentName) Экспорт
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Склад, ИдентификаторСвойстваПодразделенияПредставление(), DepartmentName)
	КонецФункции
	
	Функция DepartmentВходитВТекущееДеревоПодразделений(department, данныеСопоставленнойОрганизации)
		Organization = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(данныеСопоставленнойОрганизации.Объект);
		Если НЕ ПустаяСтрока(данныеСопоставленнойОрганизации.КПППодразделения) Тогда
			rootDepartment = РаботаССерверомДиадок_ПолучитьDepartment(Organization, данныеСопоставленнойОрганизации.КПППодразделения);
			departments = rootDepartment.SubDepartments;
			Если rootDepartment.Id = department.Id Тогда
				Возврат Истина;
			КонецЕсли;
			СопоставленныеDepartmentId = Неопределено;
		Иначе
			departments = Organization.Departments;
			СопоставленныеDepartmentId = ПолучитьСопоставленныеDepartmentId();
		КонецЕсли;
		
		Возврат DepartmentВходитВDepartments(department, departments, СопоставленныеDepartmentId);
	КонецФункции
	
	Функция DepartmentВходитВDepartments(departmentИскомый, departments, СопоставленныеDepartmentId = Неопределено)
		Для ц = 0 по departments.Count-1 цикл 
			Department = Departments.getItem(ц);
			Если СопоставленныеDepartmentId <> Неопределено Тогда
				Если СопоставленныеDepartmentId.Найти(department.Id) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если department.Id = departmentИскомый.Id Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если DepartmentВходитВDepartments(departmentИскомый, department.SubDepartments) Тогда
				Возврат Истина;
			КонецЕсли;
		Конеццикла;	
		
		Возврат Ложь;
	КонецФункции
	
	Функция ПолучитьСопоставленныеDepartmentId()
		СопоставленныеDepartmentId = Новый Массив;
		данныеСопоставленныхОрганизаций = ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ПолучитьТаблицуЯщиковДиадокОрганизации();
		Для каждого данныеСопоставления Из данныеСопоставленныхОрганизаций Цикл
			Organization = Модуль_РаботаССерверомДиадок.ПолучитьЯщикДиадокДляОрганизации(данныеСопоставления.Объект);
			Если НЕ ПустаяСтрока(данныеСопоставления.КПППодразделения) Тогда
				СопоставленныеDepartmentId.Добавить(РаботаССерверомДиадок_ПолучитьDepartment(Organization, данныеСопоставления.КПППодразделения).Id);
			КонецЕсли;
		КонецЦикла;
		
		Возврат СопоставленныеDepartmentId;
	КонецФункции
	
	Процедура Установить_BoxID_для_Организация(Организация, BoxID, НаименованиеЯщика, DepartmentKpp = "") Экспорт 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваЯщикОрганизации(), BoxID);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПодразделениеОрганизации(), DepartmentKpp);
		
		Длина_на_30 = СтрДлина(НаименованиеЯщика) / 30;
		Кол = Цел(Длина_на_30) + ?(Длина_на_30 - Цел(Длина_на_30) > 0, 1, 0);
		
		Если Кол > 3 ИЛИ Кол=0 Тогда
			НаименованиеЯщика = Лев(НаименованиеЯщика,57)+?(Кол = 0,"","...");
			Кол=2;
		КонецЕсли;
		
		Для Инд = 1 По Кол Цикл
			Текст = Сред(НаименованиеЯщика, 30 * (Инд - 1) + 1, 30);
			Постфикс = ?(Инд = 1, "", Инд);
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваЯщикОрганизацииПредставление() + Постфикс, Текст);
		КонецЦикла;
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация,ИдентификаторСвойстваЯщикОрганизацииПредставление() + Строка(Кол + 1), "");
		
	КонецПроцедуры	
	
	Функция ПолучитьНастройкиПечатныхФормДляОрганизацииДиадок(Организация) Экспорт 
		
		Возврат 
		
		Новый Структура(
		"ФормаДляТоваров, ФормаДляУслуг",
		ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляТоваров(), "Торг-12"),
		ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляУслуг(), "Акт"));
		
	КонецФункции
	
	Функция ПолучитьПредставлениеДопСертификата(Организация) Экспорт
		
		ТаблицаОтпечатков=	ВосстановитьЗначение("ТаблицаОтпечатковОрганизацийДиадок");
		
		Если НЕ ТаблицаОтпечатков = Неопределено Тогда
			
			НайденныеСтроки=	ТаблицаОтпечатков.НайтиСтроки(Новый Структура("Организация", Организация));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Возврат "";
			Иначе
				Возврат НайденныеСтроки[0].ПредставлениеСертификата;
			КонецЕсли;
		КонецЕсли;
		
		Возврат "";
		
	КонецФункции
	
	Функция ДополнительныеСертификаты_Используются() Экспорт
		
		ТаблицаОтпечатков = ВосстановитьЗначение("ТаблицаОтпечатковОрганизацийДиадок");
		
		Возврат ТаблицаОтпечатков <> Неопределено И ТаблицаОтпечатков.Количество() > 0;
		
	КонецФункции
	
	Процедура УстановитьРеквизитыСертификатаДляОрганизации(Организация, Certificate = Неопределено) Экспорт
		
		ТаблицаОтпечатков=	ВосстановитьЗначение("ТаблицаОтпечатковОрганизацийДиадок");
		
		Если ТаблицаОтпечатков = Неопределено Тогда
			ТаблицаОтпечатков= Новый ТаблицаЗначений;
			ТаблицаОтпечатков.Колонки.Добавить("Организация");
			ТаблицаОтпечатков.Колонки.Добавить("ОтпечатокСертификата");
			ТаблицаОтпечатков.Колонки.Добавить("ПредставлениеСертификата");
		Иначе
			ОбратныйИндекс= ТаблицаОтпечатков.Количество() - 1;
			Пока ОбратныйИндекс > -1 Цикл
				Если ТаблицаОтпечатков[ОбратныйИндекс].Организация = Организация
					ИЛИ НЕ ЗначениеЗаполнено(ТаблицаОтпечатков[ОбратныйИндекс].Организация) Тогда
					ТаблицаОтпечатков.Удалить(ОбратныйИндекс);
				КонецЕсли;
				ОбратныйИндекс= ОбратныйИндекс - 1;
			КонецЦикла;
		КонецЕсли;
		
		Если Certificate <> Неопределено Тогда
			НоваяСтрока= ТаблицаОтпечатков.Добавить();
			НоваяСтрока.Организация= Организация;
			НоваяСтрока.ОтпечатокСертификата= Certificate.Thumbprint;
			НоваяСтрока.ПредставлениеСертификата= Модуль_РаботаССерверомДиадок.ПредставлениеСертификата(Certificate);
		КонецЕсли;
		
		СохранитьЗначение("ТаблицаОтпечатковОрганизацийДиадок", ТаблицаОтпечатков);
		
	КонецПроцедуры
	
	Функция УстановитьНастройкиДляОрганизацииДиадок(Организация, Настройки) Экспорт 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляТоваров(), Настройки.НакладныеСТоварами);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляУслуг()	, Настройки.НакладныеСУслугамиБезТоваров);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификатрСвойстваТекстКомментарияДиадок()	, Настройки.ТекстКомментарияДиадок);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, "ДиадокОтправкаНепроведенных", Настройки.ОтправлятьНеПроведенные);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, "ДиадокФормироватьУПД"	   , Настройки.ФормироватьУПД);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, "ДиадокШифроватьДокументы"   , Настройки.ШифроватьДокументы);
		
	КонецФункции
	
	Функция ПолучитьНастройкиВнешнихПечатныхФормДляДиадок(Организация) Экспорт 
		результат = Новый Структура;
		ДиадокСпособОтправкиСчета =  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификатрСвойстваСпособОтправкиСчета());
		ДиадокСпособОтправкиСверки =  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификатрСвойстваСпособОтправкиСверки());
		
		результат.Вставить("ДиадокВнешняяПечатнаяФормаСчета",  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФорма()));
		результат.Вставить("ДиадокСпособОтправкиСчета",  ?(ЗначениеЗаполнено(ДиадокСпособОтправкиСчета), ДиадокСпособОтправкиСчета, "СчетНаОплату"));
		результат.Вставить("ДиадокВнешняяПечатнаяФормаАкта",  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта()));
		Результат.Вставить("ДиадокВнешняяПечатнаяФормаСверки",  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСверки()));
		Результат.Вставить("ДиадокСпособОтправкиСверки", ?(ЗначениеЗаполнено(ДиадокСпособОтправкиСверки), ДиадокСпособОтправкиСверки, "АктСверкиВзаиморасчетов"));
		Результат.Вставить("МассивДополнительныхВПФ", МассивДополнительныхВПФ(Организация));
		
		Возврат результат
	КонецФункции   
	
	Функция УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляСчета(Организация, Настройки)   Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФорма(),   Настройки.ДиадокВнешняяПечатнаяФормаСчета);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификатрСвойстваСпособОтправкиСчета(),   Настройки.ДиадокСпособОтправкиСчета);
	КонецФункции
	
	Функция УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляСверки(Организация, Настройки)   Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСверки(),   Настройки.ДиадокВнешняяПечатнаяФормаСверки);
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификатрСвойстваСпособОтправкиСверки(),   Настройки.ДиадокСпособОтправкиСверки);
	КонецФункции	
	
	Процедура УстановитьНастройкиДополнительныхВПФДляОрганизации(Организация, МассивВПФ)
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваСписокДопВПФ(), НастройкаСписокДопВПФ(МассивВПФ))

	КонецПроцедуры 
	
	Функция УстановитьНастройкиВПФДляОрганизации(Организация, Настройки) Экспорт 
		УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляСчета(Организация, настройки);
		УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляАкта(Организация, настройки);
		УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляСверки(Организация, настройки);
		УстановитьНастройкиДополнительныхВПФДляОрганизации(Организация, настройки.МассивДополнительныхВПФ)
	КонецФункции
	
	Функция УстановитьНастройкиВнешнихПечатныхФормДляДиадокДляАкта(Организация, Настройки)   Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта(),   Настройки.ДиадокВнешняяПечатнаяФормаАкта);
	КонецФункции	
	
	Процедура УстановитьНастройкиПечатиСчетаНаОплату(Организация, ОтправлятьСчетНаОплату) Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваОтправкаСчетовНаОплату(),   ОтправлятьСчетНаОплату);
	КонецПроцедуры
	
	Функция УстановитьНастройкиВнешнихПечатныхФорм(Организация, UUIDВнешнейПечФормы) Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФорма()  ,   UUIDВнешнейПечФормы);	
	КонецФункции
	
	Функция ПолучитьТаблицуЯщиковДиадокОрганизации(Организация = Неопределено) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Орг.Наименование,
		|	подзапрос.Объект,
		|	подзапрос.Значение,
		|	подзапрос.КПППодразделения,
		|	ВЫРАЗИТЬ(подзапрос.представление КАК СТРОКА(500)) КАК представление,
		|	подзапрос.представление2,
		|	подзапрос.представление3,
		|	подзапрос.представление4
		|ИЗ
		|	(ВЫБРАТЬ
		|		Подзапрос.Объект КАК Объект,
		|		МАКСИМУМ(Подзапрос.Значение) КАК Значение,
		|		МАКСИМУМ(Подзапрос.КПППодразделения) КАК КПППодразделения,
		|		МАКСИМУМ(Подзапрос.представление) КАК представление,
		|		МАКСИМУМ(Подзапрос.представление2) КАК представление2,
		|		МАКСИМУМ(Подзапрос.представление3) КАК представление3,
		|		МАКСИМУМ(Подзапрос.представление4) КАК представление4
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Объект,
		|			ЗначенияСвойствОбъектов.Значение КАК Значение,
		|			"""" КАК КПППодразделения,
		|			"""" КАК представление,
		|			"""" КАК представление2,
		|			"""" КАК представление3,
		|			"""" КАК представление4
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
		|			И ЗначенияСвойствОбъектов.Объект = &Организация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект,
		|			"""",
		|			ЗначенияСвойствОбъектов.Значение,
		|			"""",
		|			"""",
		|			"""",
		|			""""
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПодразделение
		|			И ЗначенияСвойствОбъектов.Объект = &Организация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект,
		|			"""",
		|			"""",
		|			ЗначенияСвойствОбъектов.Значение,
		|			"""",
		|			"""",
		|			""""
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление
		|			И ЗначенияСвойствОбъектов.Объект = &Организация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект,
		|			"""",
		|			"""",
		|			"""",
		|			ЗначенияСвойствОбъектов.Значение,
		|			"""",
		|			""""
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление2
		|			И ЗначенияСвойствОбъектов.Объект = &Организация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект,
		|			"""",
		|			"""",
		|			"""",
		|			"""",
		|			ЗначенияСвойствОбъектов.Значение,
		|			""""
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление3
		|			И ЗначенияСвойствОбъектов.Объект = &Организация
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект,
		|			"""",
		|			"""",
		|			"""",
		|			"""",
		|			"""",
		|			ЗначенияСвойствОбъектов.Значение
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство.Наименование = &СвойствоПредставление4
		|			И ЗначенияСвойствОбъектов.Объект = &Организация) КАК Подзапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Подзапрос.Объект) КАК подзапрос,
		|	Справочник.Организации КАК Орг
		|ГДЕ
		|	подзапрос.Значение <> """"
		|	И Орг.Ссылка = подзапрос.Объект";
		Запрос.УстановитьПараметр("Свойство", ИдентификаторСвойстваЯщикОрганизации());
		Запрос.УстановитьПараметр("СвойствоПодразделение", ИдентификаторСвойстваПодразделениеОрганизации());
		Запрос.УстановитьПараметр("СвойствоПредставление", ИдентификаторСвойстваЯщикОрганизацииПредставление());
		Запрос.УстановитьПараметр("СвойствоПредставление2", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "2");
		Запрос.УстановитьПараметр("СвойствоПредставление3", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "3");
		Запрос.УстановитьПараметр("СвойствоПредставление4", ИдентификаторСвойстваЯщикОрганизацииПредставление() + "4");
		
		Если НЕ ЗначениеЗаполнено(организация) Тогда 
			Запрос.Текст = стрЗаменить(запрос.Текст, "И ЗначенияСвойствОбъектов.Объект = &Организация", "");
		Иначе 
			Запрос.УстановитьПараметр("Организация", организация);
		КонецЕсли;	
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "Справочник.Организации", "Справочник.Фирмы");
		КонецЕсли;
		
		Результат =  Запрос.Выполнить().выгрузить();
		
		ц = 0;
		Пока ц < Результат.Количество() цикл 
			строка = результат[ц];
			ОрганизацииФилиалыСопоставленныеСДиадоком=	Модуль_РаботаССерверомДиадок.ПолучитьОрганизацииНезаблокированныеПоAPI();
			Если ОрганизацииФилиалыСопоставленныеСДиадоком.Найти(Строка.Объект) = Неопределено Тогда
				Результат.Удалить(ц);
			Иначе
				ц = ц+1;	
				BoxID=	Организация_2_BoxID(Строка.Объект);
				Строка.Представление 				= СклеитьПредставлениеОрганизацииДиадок(Строка);
			КонецЕсли;	
		конецЦикла;	
		
		Возврат Результат;
		
	КонецФункции 
	
	Функция СклеитьПредставлениеОрганизацииДиадок(Строка)
		Результат = СокрЛП(Строка.Представление);
		Если НЕ ПустаяСтрока(Строка.Представление2) Тогда
			Результат = Результат + СокрЛП(Строка.Представление2);
			Если НЕ ПустаяСтрока(Строка.Представление3) Тогда
				Результат = Результат + СокрЛП(Строка.Представление3);
				Если НЕ ПустаяСтрока(Строка.Представление4) Тогда
					Результат = Результат + СокрЛП(Строка.Представление4);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат Результат
	КонецФункции 		
	
	Функция ПолучитьСписокПодключенныхКДиадокуОрганизаций(ВыводитьБезСертификата = Ложь) Экспорт 
		
		Таблица =   ПолучитьТаблицуЯщиковДиадокОрганизации();
		мас = Таблица.ВыгрузитьКолонку("Объект");
		
		сп = Новый СписокЗначений;
		сп.ЗагрузитьЗначения(мас);
		
		Возврат сп;
	КонецФункции	
	
	Функция ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку() Экспорт
		
		Если ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() = "Модуль_ИнтеграцияДалионУМ" Тогда
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Организация,
			|	Организации.ИНН КАК ИНН,
			|	ИсторияКПП.ЗначениеРеквизита КАК КПП
			|ИЗ
			|	Справочник.Фирмы КАК Организации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойствоЯщикОрганизации
			|		ПО Организации.Ссылка = СвойствоЯщикОрганизации.Объект
			|			И (СвойствоЯщикОрганизации.Свойство.Наименование = &ИдентификаторСвойстваЯщикОрганизации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеРеквизитыОбъектов.СрезПоследних КАК ИсторияКПП
			|		ПО Организации.Ссылка = ИсторияКПП.Объект
			|			И (ИсторияКПП.ИмяРеквизита = ""КПП"")
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления И ЕСТЬNULL(СвойствоЯщикОрганизации.Значение, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, """")");
			
		Иначе
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Организация,
			|	Организации.ИНН КАК ИНН,
			|	Организации.КПП КАК КПП
			|ИЗ
			|	Справочник.Организации КАК Организации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК СвойствоЯщикОрганизации
			|		ПО Организации.Ссылка = СвойствоЯщикОрганизации.Объект
			|			И (СвойствоЯщикОрганизации.Свойство.Наименование = &ИдентификаторСвойстваЯщикОрганизации)
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления И ЕСТЬNULL(СвойствоЯщикОрганизации.Значение, НЕОПРЕДЕЛЕНО) В (НЕОПРЕДЕЛЕНО, """")");
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИдентификаторСвойстваЯщикОрганизации", ИдентификаторСвойстваЯщикОрганизации());
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Результат= Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаРезультата ИЗ Результат Цикл
			СтрокаРезультата.ИНН= СокрЛП(СтрокаРезультата.ИНН);
			СтрокаРезультата.КПП= СокрЛП(СтрокаРезультата.КПП);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьТекстКомментарияДиадок(Организация) Экспорт 
		Возврат  ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификатрСвойстваТекстКомментарияДиадок());
	КонецФункции	
	
//} РАБОТА С ОРГАНИЗАЦИЯМИ

//{ РАБОТА С ДОКУМЕНТАМИ
	
	Функция Документ_2_DocumentID(Документ, DocumentType= Неопределено) Экспорт 
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов
		|ГДЕ
		|	Свойство.Наименование = &ИдентификаторДокументаВДиадок
		|	И Объект = &Объект И НЕ Значение ПОДОБНО ""усл:%""");
		
		Запрос.УстановитьПараметр("Объект", Документ);
		Запрос.УстановитьПараметр("ИдентификаторДокументаВДиадок", ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если ЗначениеЗаполнено(Выборка.Значение) Тогда
				Возврат ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьЧисло64вГуид(Выборка.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции	 
	
	Функция DocumentID_2_Документ(DocumentID, BoxID, Document= Неопределено) Экспорт 
		
		УсловиеТипОбъекта= "";
		
		Если Document <> Неопределено И ((Document.Type = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП"))
			ИЛИ (Document.Type = "UniversalCorrectionDocument" И ТипДокументаУКД(Document.Function) = ТипДокументаУКД("КСЧФДИС"))) Тогда
			
			Если Document.Direction = "Inbound" Тогда
				
				Если ЗначениеЗаполнено(ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураПолученный()) Тогда
					УсловиеТипОбъекта= "И DocumentId.Объект ССЫЛКА " + ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураПолученный();
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураВыданный()) Тогда
					УсловиеТипОбъекта= "И DocumentId.Объект ССЫЛКА " + ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураВыданный();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	DocumentId.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК DocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК BoxId
		|		ПО DocumentId.Объект = BoxId.Объект
		|			И (BoxId.Значение = &BoxId)
		|			И (BoxId.Свойство В (&СвойствоBoxId, &СвойствоBoxIdСчет, &СвойствоBoxIdСФ))
		|ГДЕ
		|	DocumentId.Значение = &DocumentId
		|	И DocumentId.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет, &СвойствоDocumentIdСФ)
		|	" + УсловиеТипОбъекта);
		
		Запрос.УстановитьПараметр("DocumentId", ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(DocumentID));
		Запрос.УстановитьПараметр("BoxId"	  , BoxId);
		
		Запрос.УстановитьПараметр("СвойствоDocumentId"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоDocumentIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоDocumentIdСФ"  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок("Invoice")));
		
		Запрос.УстановитьПараметр("СвойствоBoxIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоBoxId"	 , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоBoxIdСФ"  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок("Invoice")));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			РезультатЗапроса= Неопределено;
			
			Выборка.Следующий();
			
			Возврат Выборка.Объект;
			
		КонецЕсли;
		
	КонецФункции	
	
	Функция DocumentID_2_МассивДокументов(DocumentID, BoxID) Экспорт
		
		МассивДокументов= Новый Массив;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	DocumentId.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК DocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК BoxId
		|		ПО DocumentId.Объект = BoxId.Объект
		|			И (BoxId.Значение = &BoxId)
		|			И (BoxId.Свойство В (&СвойствоBoxId, &СвойствоBoxIdСчет))
		|ГДЕ
		|	DocumentId.Значение = &DocumentId
		|	И DocumentId.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет)");
		
		Запрос.УстановитьПараметр("DocumentId", ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(DocumentID));
		Запрос.УстановитьПараметр("BoxId"	  , BoxId);
		
		Запрос.УстановитьПараметр("СвойствоDocumentId"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоDocumentIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
		
		Запрос.УстановитьПараметр("СвойствоBoxIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоBoxId"	 , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				МассивДокументов.Добавить(Выборка.Объект);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат МассивДокументов;
		
	КонецФункции
	
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, DocumentType = Неопределено, Document = Неопределено) Экспорт 
		
		base64DocId =   ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(DocumentID) ;
		
		Если НЕ ЗначениеЗаполнено(DocumentID) И Document <> Неопределено 
			И ((DocumentType = "UniversalTransferDocument" И ТипДокументаУПД(Document.Function) = ТипДокументаУПД("СЧФДОП"))
			ИЛИ (DocumentType = "UniversalCorrectionDocument" И ТипДокументаУКД(Document.Function) = ТипДокументаУКД("КСЧФДИС"))) Тогда
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ
			|	ВсеОбъекты_BoxId.Объект
			|ИЗ
			|	РегистрСведений.ЗначенияСвойствОбъектов КАК DocumentId
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК BoxId
			|		ПО DocumentId.Объект = BoxId.Объект
			|			И (BoxId.Свойство = &СвойствоBoxId)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ВсеОбъекты_DocumentId
			|		ПО (ВсеОбъекты_DocumentId.Свойство = &СвойствоDocumentId)
			|			И DocumentId.Значение = ВсеОбъекты_DocumentId.Значение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ВсеОбъекты_BoxId
			|		ПО (ВсеОбъекты_DocumentId.Объект = ВсеОбъекты_BoxId.Объект)
			|			И (ВсеОбъекты_BoxId.Свойство = &СвойствоBoxId)
			|			И (BoxId.Значение = ВсеОбъекты_BoxId.Значение)
			|ГДЕ
			|	DocumentId.Объект = &Документ
			|	И DocumentId.Свойство = &СвойствоDocumentId");
			
			Запрос.УстановитьПараметр("СвойствоDocumentId", ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType)));
			Запрос.УстановитьПараметр("СвойствоBoxId"	  , ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType)));
			
			Запрос.УстановитьПараметр("Документ", Документ);
			
			Выборка= Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Выборка.Объект, ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType), ""); 
				ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Выборка.Объект, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType), ""); 
			КонецЦикла;
			
		Иначе
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType), base64DocId); 
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок(DocumentType), BoxID); 
		КонецЕсли;
		
		Если Document = Неопределено И ЗначениеЗаполнено(DocumentID) И ЗначениеЗаполнено(BoxID) Тогда
			Document= Модуль_РаботаССерверомДиадок.ПолучитьДокументДиадок(DocumentID, BoxID);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Документ) Тогда
			ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").События_ПриИзмененииСтатусаДокумента(DocumentID, BoxID, Document, Документ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(DocumentID) И ЗначениеЗаполнено(BoxID) Тогда
			Оповестить("ИзменениеСвязиДД1С", Новый Структура("ТипСущности, Ссылка1С, СсылкаДД", "Документ", Документ, Document));
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция DocumentID_2_ДопДокумент(DocumentID, BoxID) Экспорт
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	DocumentId.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК DocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК BoxId
		|		ПО DocumentId.Объект = BoxId.Объект
		|			И (BoxId.Значение = &BoxId)
		|			И (BoxId.Свойство = &СвойствоBoxId)
		|ГДЕ
		|	DocumentId.Значение = &DocumentId
		|	И DocumentId.Свойство = &СвойствоDocumentId");
		
		Запрос.УстановитьПараметр("DocumentId", ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(DocumentID));
		Запрос.УстановитьПараметр("BoxId"	  , BoxId);
		
		Запрос.УстановитьПараметр("СвойствоDocumentId", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоBoxId"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок()));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		РезультатЗапроса= Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка= РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Объект;
		КонецЕсли;
		
	КонецФункции	
	
	Процедура Установить_DocumentID_Для_ДопДокумент(Документ, DocumentID, BoxID) Экспорт 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок(), ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(DocumentID)); 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок()	   , BoxID); 
		
	КонецПроцедуры	
	
	Функция ПолучитьТаблицуДокументовПоИдДиадока(ТаблицаИД) Экспорт 
		//таблица ИД - таблица с колонками    DocumentId,  BoxId
		таблица2 =  ТаблицаИД.скопировать();
		
		КС_Строки = Новый КвалификаторыСтроки(150);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС_Строки);
		
		Таблица2.колонки.добавить("DocumentId_64", ОписаниеТиповС);
		Для каждого стр из Таблица2 цикл 
			Стр.DocumentId_64 = ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(Стр.DocumentId);
		КонецЦикла;
		
		запрос = Новый Запрос;
		
		запрос.Текст  = "ВЫБРАТЬ
		|	ТЗ.DocumentId,
		|	ТЗ.DocumentId_64,
		|	ТЗ.BoxId
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.DocumentId,
		|	ВТ.DocumentId_64,
		|	ВТ.BoxId,
		|	ЗначенияСвойствОбъектов.Объект
		|ПОМЕСТИТЬ Таблица1
		|ИЗ
		|	ВТ КАК ВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВТ.DocumentId_64 = ЗначенияСвойствОбъектов.Значение
		|			И (ЗначенияСвойствОбъектов.Свойство В (&СвойствоИдентификаторДокументаВДиадок, &СвойствоИдентификаторДокументаВДиадокСчет, &СвойствоИдентификаторДокументаВДиадокСф))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица1.DocumentId,
		|	Таблица1.DocumentId_64,
		|	Таблица1.BoxId,
		|	Таблица1.Объект КАК ссылка
		|ИЗ
		|	Таблица1 КАК Таблица1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО Таблица1.BoxId = ЗначенияСвойствОбъектов.Значение
		|			И Таблица1.Объект = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство В (&СвойствоИдентификаторЯщикДокументаВДиадок, &СвойствоИдентификаторЯщикДокументаВДиадокСчет, &СвойствоИдентификаторЯщикДокументаВДиадокСф))";
		
		запрос.УстановитьПараметр("ТЗ", таблица2);
		
		Запрос.УстановитьПараметр("СвойствоИдентификаторДокументаВДиадок", 			ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоИдентификаторДокументаВДиадокСчет", 		ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоИдентификаторЯщикДокументаВДиадок", 		ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоИдентификаторЯщикДокументаВДиадокСчет", 	ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоИдентификаторДокументаВДиадокСф", 		ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок("Invoice")));
		Запрос.УстановитьПараметр("СвойствоИдентификаторЯщикДокументаВДиадокСф", 	ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок("Invoice")));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		результат = Запрос.ВыполнитьПакет()[2].выгрузить();
		Возврат результат;
		
	КонецФункции	
	
	Процедура ЗаполнитьТаблицуДокументовДиадокДокументами1С(ТаблицаДокументовДиадок) Экспорт
		
		Запрос= Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументов.ИндексСтроки,
		|	ТаблицаДокументов.DocumentID,
		|	ТаблицаДокументов.BoxID,
		|	ТаблицаДокументов.ТипОбъекта
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.ИндексСтроки,
		|	Свойство_DocumentID.Объект
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство_DocumentID
		|		ПО (Свойство_DocumentID.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет))
		|			И ТаблицаДокументов.DocumentID = Свойство_DocumentID.Значение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК Свойство_BoxID
		|		ПО (Свойство_DocumentID.Объект = Свойство_BoxID.Объект)
		|			И (Свойство_BoxID.Свойство В (&СвойствоBoxId, &СвойствоBoxIdСчет))
		|			И ТаблицаДокументов.BoxID = Свойство_BoxID.Значение
		|ГДЕ
		|	(ТаблицаДокументов.ТипОбъекта = """"
		|			ИЛИ ТаблицаДокументов.ТипОбъекта = ""СчетФактураПолученный""
		|				И ТИПЗНАЧЕНИЯ(Свойство_DocumentID.Объект) = &ТипДокументаСчетФактураПолученный
		|			ИЛИ ТаблицаДокументов.ТипОбъекта = ""СчетФактураВыданный""
		|				И ТИПЗНАЧЕНИЯ(Свойство_DocumentID.Объект) = &ТипДокументаСчетФактураВыданный)");
		
		Запрос.УстановитьПараметр("СвойствоDocumentId"	  , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
		Запрос.УстановитьПараметр("СвойствоDocumentIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
		
		Запрос.УстановитьПараметр("СвойствоBoxIdСчет", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
		Запрос.УстановитьПараметр("СвойствоBoxId"	 , ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
		
		Запрос.УстановитьПараметр("ТипДокументаСчетФактураПолученный", ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураПолученный());
		Запрос.УстановитьПараметр("ТипДокументаСчетФактураВыданный"	 , ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураВыданный());
		
		Запрос.УстановитьПараметр("ТаблицаДокументов", Новый ТаблицаЗначений);
		
		Запрос.Параметры.ТаблицаДокументов.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
		Запрос.Параметры.ТаблицаДокументов.Колонки.Добавить("DocumentID"  , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
		Запрос.Параметры.ТаблицаДокументов.Колонки.Добавить("BoxID"		  , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
		Запрос.Параметры.ТаблицаДокументов.Колонки.Добавить("ТипОбъекта"  , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(30)));
		
		ИндексСтроки= 0;
		Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументовДиадок Цикл
			
			НоваяСтрока= Запрос.Параметры.ТаблицаДокументов.Добавить();
			
			НоваяСтрока.ИндексСтроки= ИндексСтроки;
			ИндексСтроки= ИндексСтроки + 1;
			
			НоваяСтрока.DocumentID= ПолучитьМодульПрог("Модуль_Логика_РаботаСBase64").КонвертироватьГуидВЧисло64(СтрокаТаблицы.DocumentID);
			НоваяСтрока.BoxID= 		СтрокаТаблицы.BoxID;
			
			Если (СтрокаТаблицы.DocumentType = "UniversalTransferDocument" И ТипДокументаУПД(СтрокаТаблицы.ЭДОбъект.Function) = ТипДокументаУПД("СЧФДОП"))
				ИЛИ (СтрокаТаблицы.DocumentType = "UniversalCorrectionDocument" И ТипДокументаУКД(СтрокаТаблицы.ЭДОбъект.Function) = ТипДокументаУКД("КСЧФДИС")) Тогда
				
				Если СтрокаТаблицы.ЭДОбъект.Direction = "Inbound" Тогда
					
					Если ЗначениеЗаполнено(Запрос.Параметры.ТипДокументаСчетФактураПолученный) Тогда
						НоваяСтрока.ТипОбъекта= "СчетФактураПолученный";
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Запрос.Параметры.ТипДокументаСчетФактураВыданный) Тогда
						НоваяСтрока.ТипОбъекта= "СчетФактураВыданный";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				ТаблицаДокументовДиадок[Выборка.ИндексСтроки].ПервичныйДокумент= Выборка.Объект;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} РАБОТА С ДОКУМЕНТАМИ

//{ РАБОТА С ДОПОЛНИТЕЛЬНЫМИ ВНЕШНИМИ ПЕЧАТНЫМИ ФОРМАМИ
	
	Функция ПолучитьОтметкуДополнительнойВПФ(Документ, ВнешняяПечатнаяФорма)  Экспорт
		СтатусОтправляемыхВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ());
		Если ЗначениеЗаполнено(СтатусОтправляемыхВПФ)=Ложь Тогда
			Возврат ""
		КонецЕсли;
		
		НомерВПФ = ПорядковыйНомерДопВПФ(ВнешняяПечатнаяФорма);
		Возврат ?(СтрДлина(СтатусОтправляемыхВПФ)< НомерВПФ, "", сред(СтатусОтправляемыхВПФ, НомерВПФ, 1) );
		
	КонецФункции
	
	Процедура  ВставитьВСтроку_Диадок(МодифицируемаяСтрока, НомерПозиции, Символ);
		Пока СтрДлина(МодифицируемаяСтрока)<номерПозиции цикл
			МодифицируемаяСтрока = МодифицируемаяСтрока + "_";
		КонецЦикла;	
		МодифицируемаяСтрока = лев(МодифицируемаяСтрока, номерПозиции-1)+Символ +прав(МодифицируемаяСтрока, СтрДлина(МодифицируемаяСтрока)-номерПозиции);
		
	КонецПроцедуры
	
	Процедура УстановитьОтметкуДополнительнойВПФ(Документ, ВнешняяПечатнаяФорма, Отметка)  Экспорт 
		
		СтатусОтправляемыхВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ());
		Если НЕ ЗначениеЗаполнено(СтатусОтправляемыхВПФ) Тогда 
			СтатусОтправляемыхВПФ = "";
		КонецЕсли;	
		
		НомерВПФ = ПорядковыйНомерДопВПФ(ВнешняяПечатнаяФорма);
		ВставитьВСтроку_Диадок(СтатусОтправляемыхВПФ, НомерВПФ, Отметка);
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ(), СтатусОтправляемыхВПФ);
		
	КонецПроцедуры
	
	Функция ПолучитьИдентификаторОтправленнойВПФ(DocumentID, ВнешняяПечатнаяФорма)      Экспорт 
		Возврат   "" + DocumentID+":"+формат(ПорядковыйНомерДопВПФ(ВнешняяПечатнаяФорма), "ЧГ=0");
	КонецФункции	
	
	Процедура ЗафиксироватьСписокДополинтельныхВПФПоДокументу(Документ, МассивДополинтельныхВПФ) Экспорт
		СтатусОтправляемыхВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ());
		Если ЗначениеЗаполнено(СтатусОтправляемыхВПФ) Тогда 
			//Если список форм уже проинициализирован - то ничего не делаем
			Возврат
		КонецЕсли;
		
		Результат = "";
		Для каждого ИдентификаторВПФ из  МассивДополинтельныхВПФ цикл 
			НомерВПФ =  ПорядковыйНомерДопВПФ(ИдентификаторВПФ);
			ВставитьВСтроку_Диадок(Результат, НомерВПФ, "Н");
		КонецЦикла;	 
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ(), Результат);
		
	КонецПроцедуры
	
	Функция ПолучитьСписокОтправленныхПФ(Документ, СостояниеОтправкиДополнительныхВПФ)  Экспорт 
	
		МассивВПФ = Новый Массив;
		НомераВПФ = Новый Массив;
		
		СписокДопВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Документ, ИдентификаторСвойстваСтатусОтправляемыхВПФ());
		РазмерСписка = СтрДлина(СписокДопВПФ);
		
		Для Сч = 1 По РазмерСписка цикл 
			Если Сред(СписокДопВПФ, Сч, 1) = "В" Тогда
				НомераВПФ.Добавить(Формат(Сч, "ЧГ=0"));
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Объект ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Свойство = &СвойствоНомерВПФ И Значение В (&НомераВПФ)");
		Запрос.УстановитьПараметр("СвойствоНомерВПФ", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваНомерВПФ()));
		Запрос.УстановитьПараметр("НомераВПФ" 		, НомераВПФ);
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивВПФ.Добавить(Выборка.Объект);
		КонецЦикла;	
		
		Возврат МассивВПФ;
		
	КонецФункции	
	
	Функция МассивДополнительныхВПФ(Организация) Экспорт
		
		МассивВПФ = Новый Массив;
		НомераВПФ = Новый Массив;
		
		СписокДопВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваСписокДопВПФ());
		РазмерСписка = СтрДлина(СписокДопВПФ);
		
		Для Сч = 1 По РазмерСписка цикл 
			Если Сред(СписокДопВПФ, Сч, 1) = "1" Тогда
				НомераВПФ.Добавить(Формат(Сч, "ЧГ=0"));
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Объект ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Свойство = &СвойствоНомерВПФ И Значение В (&НомераВПФ)");
		Запрос.УстановитьПараметр("СвойствоНомерВПФ", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваНомерВПФ()));
		Запрос.УстановитьПараметр("НомераВПФ" 		, НомераВПФ);
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивВПФ.Добавить(Выборка.Объект);
		КонецЦикла;	
		
		Возврат МассивВПФ;
		
	КонецФункции
	
	
	Функция ПорядковыйНомерДопВПФ(ИдентификаторВПФ)
		
		НомерВПФ = ПараметрыВПФ(ИдентификаторВПФ).НомерВПФ;
		
		Если НомерВПФ = Неопределено Тогда
			
			НомерВПФ = НомерВПФ(ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий").ВПФ_СсылкаНомерСтроки(ИдентификаторВПФ).Ссылка);
			
			ПараметрыВПФ(ИдентификаторВПФ).НомерВПФ = НомерВПФ;
			
		КонецЕсли;
		
		Возврат НомерВПФ;
		
	КонецФункции
	
	Функция НомерВПФ(ВПФ)
		
		НомерВПФ = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(ВПФ, ИдентификаторСвойстваНомерВПФ());
		
		Если ЗначениеЗаполнено(НомерВПФ) Тогда
			
			НомерВПФ = Число(НомерВПФ);
			
		Иначе
			
			// Если не нашли номер в базе, присваиваем следующий по порядку номер и записываем его в базу
			Запрос = Новый Запрос("ВЫБРАТЬ Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Свойство = &СвойствоНомерВПФ И Значение <> """"");
			Запрос.УстановитьПараметр("СвойствоНомерВПФ", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваНомерВПФ()));
			
			ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
			
			НомерВПФ = 0;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				НомерВПФ = Макс(Число(Выборка.Значение), НомерВПФ);
			КонецЦикла;
			
			НомерВПФ = НомерВПФ + 1;
			
			ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(ВПФ, ИдентификаторСвойстваНомерВПФ(), Формат(НомерВПФ, "ЧГ=0"));
			
		КонецЕсли;
		
		Возврат НомерВПФ;
		
	КонецФункции
	
	Функция НастройкаСписокДопВПФ(МассивДополнительныхВПФ)
		
		Результат = "";
		
		НомераВПФ = Новый Соответствие;
		
		Для каждого ВПФ Из МассивДополнительныхВПФ Цикл
			НомераВПФ.Вставить(НомерВПФ(ВПФ));
		КонецЦикла; 
		
		РазмерСписка = 0;
		
		Для каждого КлючИЗначение Из НомераВПФ Цикл
			
			НомерВПФ = КлючИЗначение.Ключ;
			
			КоличествоНулей = НомерВПФ - РазмерСписка - 1;
			
			Результат = Результат + ?(КоличествоНулей > 0, Формат(0, "ЧЦ=" + (КоличествоНулей) + "; ЧН=; ЧВН=; ЧГ=0"), "") + "1";
			
			РазмерСписка = НомерВПФ;
		
		КонецЦикла; 
		
		Возврат Результат;
		
	КонецФункции

	
//} РАБОТА С ДОПОЛНИТЕЛЬНЫМИ ВНЕШНИМИ ПЕЧАТНЫМИ ФОРМАМИ

//{ РАБОТА С ПАРАМЕТРАМИ ПОЛЬЗОВАТЕЛЯ
	
	Процедура УстановитьПараметрыПодписанияТ12вДиадок(Организация, ПараметрыПодписания) Экспорт 
		
		Если ПараметрыПодписания.Свойство("СпособПодписания") Тогда
			ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваСпособПодписанияТ12(), ПараметрыПодписания.СпособПодписания);
		КонецЕсли;
		
	КонецПроцедуры	

	Функция ПолучитьТекущийOperationID(Документ, DocumentType) Экспорт 
		
		OperationID = "";
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение ИЗ РегистрСведений.ЗначенияСвойствОбъектов ГДЕ Объект = &Объект И Свойство = &Свойство И Значение <> """"");
		Запрос.УстановитьПараметр("Объект"	, Документ);
		Запрос.УстановитьПараметр("Свойство", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType)));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если ЗначениеЗаполнено(Выборка.Значение) Тогда
				
				OperationID = Выборка.Значение;
				
				Если Лев(OperationID, 4) = "усл:" Тогда
					OperationID = Сред(OperationID, 5);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат OperationID;			
		
	КонецФункции
	
	Процедура УстановитьИдентификаторВПФ(ВПФId, Документ)Экспорт
		
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторВПФДиадок(), ВПФId);
		
	КонецПроцедуры
	
	Процедура СброситьСвойствоДолжностьПодписанта() Экспорт
		
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваДолжностьПодписанта(), "");
		
	КонецПроцедуры
	
	Функция ПолучитьСвойствоДолжностьПодписанта() Экспорт
		
		Возврат ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваДолжностьПодписанта());
		
	КонецФункции
	
	Процедура Установить_ПризнакУсловноОтправленный_Для_Документ(ДокументСсылка, ПоследняяМеткаВремени, Type, OrganizationId, CounteragentId, FileGUID, DocumentType = Неопределено) Экспорт 
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(ДокументСсылка, ИдентификаторСвойстваИдентификаторДокументаВДиадок(DocumentType), "усл:"+FileGUID); 
	КонецПроцедуры	
	
	Процедура УстановитьПараметрыПроксиСервераДиадок(АдресПроксиСервера,ЛогинПроксиСервера,ПарольПроксиСервера ) Экспорт 
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваАдреспроксиСервера(), 			 АдресПроксиСервера);
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваПользовательПроксиСервера(), 	 ЛогинПроксиСервера);
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваПарольПроксиСервера(),			 ПарольПроксиСервера);
		
	КонецПроцедуры	
	
	Функция ПолучитьПараметрыПодписанияТ12вДиадок(Организация) Экспорт
		
		СпособПодписания = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваСпособПодписанияТ12());
		Если НЕ ЗначениеЗаполнено(СпособПодписания) Тогда
			СпособПодписания = ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваСпособПодписанияТ12());
		КонецЕсли;
		СпособПодписания = ?(НЕ ЗначениеЗаполнено(СпособПодписания), "1", СпособПодписания);
		
		BoxId= ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Организация_2_BoxID(Организация);
		
		ФИОПодписанта= 			Модуль_РаботаССерверомДиадок.ПолучитьФИОПодписанта(BoxId);
		ДолжностьПодписанта=	Модуль_РаботаССерверомДиадок.ПолучитьДолжностьПодписанта(BoxId);
		
		Результат = Новый Структура;
		Результат.Вставить("СпособПодписания", СпособПодписания);
		Результат.Вставить("ДолжностьПодписанта",  ДолжностьПодписанта);
		Результат.Вставить("ФИОПодписанта", ФИОПодписанта);
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьПараметрыНастроекПроксиДляДиадок() Экспорт 
		Результат = Новый Структура;
		
		Результат.Вставить("АдресПроксиСервера", 		ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваАдреспроксиСервера()));
		Результат.Вставить("ПользовательПроксиСервера", ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваПользовательПроксиСервера()));
		Результат.Вставить("ПарольПроксиСервера", 		ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваПарольПроксиСервера()));
		
		Возврат Результат;
	КонецФункции	
	
	Функция ПолучитьДанныеУсловноОтправленныхДокументов(ТаблицаЭД) Экспорт
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЭД.DocumentId,
		|	ТаблицаЭД.FileGUID,
		|	ТаблицаЭД.DocumentType,
		|	ТаблицаЭД.BoxId OrganizationId,
		|	ТаблицаЭД.CounterAgentBoxID CounteragentId
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаЭД КАК ТаблицаЭД
		|;
		|ВЫБРАТЬ
		|	ВТ.OrganizationId,
		|	ВТ.DocumentId,
		|	ЗнчСвFileGUID.Объект ДокументСсылка
		|ИЗ
		|	ВТ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗнчСвFileGUID
		|	ПО
		|		ЗнчСвFileGUID.Свойство = &СвойствоУсловноОтправленныйFileGUID
		|		И ВТ.FileGUID = ЗнчСвFileGUID.Значение";
		
		Запрос.УстановитьПараметр("ТаблицаЭД", ТаблицаЭД);
		Запрос.УстановитьПараметр("СвойствоУсловноОтправленныйFileGUID", ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойстваУсловноОтправленныйFileGUID()));
		
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПривестиТекстЗапросаКПодсистемеКонтурDiadoc(Запрос.Текст);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПечатьСчетовПоЗаказу()
		Возврат "ДиадокПечатьСчетовПоЗаказу"
	КонецФункции
	
	Функция УстановитьНастройкуПечатиСчетаПоЗаказу(Организация,ФормироватьСчетНаОплату) Экспорт
		ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатьСчетовПоЗаказу(),   ФормироватьСчетНаОплату);
	КонецФункции
	
	Функция ПолучитьНастройкуПечатиСчетаПоЗаказу(Организация) Экспорт
		Результат = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатьСчетовПоЗаказу());
		Возврат Результат;
	КонецФункции
	
	Функция УстановитьНастройкиПодписантаСогласование(ФИОПодписантаПолучателя, ДолжностьПодписанта) Экспорт
		
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваФИОПодписантаСогласование(), ФИОПодписантаПолучателя);
		ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(ИдентификаторСвойстваДолжностьПодписантаСогласование(), ДолжностьПодписанта);
		
	КонецФункции
	
	Функция ПолучитьНастройкиПодписантаСогласование() Экспорт
		
		Настройки=	Новый Структура;
		
		Настройки.Вставить("ФИОПодписанта", ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваФИОПодписантаСогласование()));
		Настройки.Вставить("ДолжностьПодписанта", ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(ИдентификаторСвойстваДолжностьПодписантаСогласование()));
		
		Возврат Настройки;
		
	КонецФункции
	
//} РАБОТА С ПАРАМЕТРАМИ ПОЛЬЗОВАТЕЛЯ

Функция ItemStruct_2_СтавкаНДС(XmlTorg12_Item) Экспорт
	Возврат Модуль_ИнтеграцияОбщий.ПолучитьСтавкуНДСДиадок(XmlTorg12_Item.TaxRate);
КонецФункции

Функция ItemStruct_2_ЕдиницаИзмерения(XmlTorg12_Item, Номенклатура) Экспорт
	Если  XmlTorg12_Item=Неопределено Тогда 
		Возврат Модуль_ИнтеграцияОбщий.ПолучитьЕдиницуИзмерения("", "", Номенклатура);
 	Иначе	
		Возврат Модуль_ИнтеграцияОбщий.ПолучитьЕдиницуИзмерения(XmlTorg12_Item.UnitCode, XmlTorg12_Item.UnitName, Номенклатура);
	КонецЕсли;	
КонецФункции

Функция ПолучитьКоэффициентпересчетаПоItemStruct(XmlTorg12_Item, НоваяЕдиницаИзмерения) Экспорт
	Если  XmlTorg12_Item=Неопределено Тогда 
		Возврат Модуль_ИнтеграцияОбщий.ПолучитьКоэффициентПересчета("", "", НоваяЕдиницаИзмерения);
 	Иначе	
		Возврат Модуль_ИнтеграцияОбщий.ПолучитьКоэффициентПересчета(XmlTorg12_Item.UnitCode, XmlTorg12_Item.UnitName, НоваяЕдиницаИзмерения);
	КонецЕсли;	
КонецФункции

