Перем СписокКонтрагентовПолный;

Процедура СписокКонтрагентовПриПолученииДанных(Элемент, ОформленияСтрок)
	ПолучитьМодульПрог("Модуль_Логика_СверкаДанных").ОформитьСписокКА(ОформленияСтрок);
КонецПроцедуры

Процедура СписокКонтрагентовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ=	Истина;
КонецПроцедуры

Процедура СписокКонтрагентовПередУдалением(Элемент, Отказ)
	Отказ=	Истина;
КонецПроцедуры

Процедура ОбновитьСписокКонтрагентов()
	Модуль_РаботаССерверомДиадок.ЗаполнитьСписокКонтрагентов(СписокКонтрагентов, ОрганизацияСсылка, СписокВзаимоотношений);
	Модуль_РаботаССерверомДиадок.ЗаполнитьСписокКонтрагентов(СписокКонтрагентовПолный, ОрганизацияСсылка, СписокВзаимоотношений);
КонецПроцедуры

Процедура ОбновитьСостояниеОбработкиВПолнойТаблице()
	Для каждого стр из   СписокКонтрагентовПолный цикл 
		стр.СостояниеОбработки = "";
		стр.ТекстОшибкиОбработки = "";
	КонецЦикла;	
	для каждого строкаТаблицы из СписокКонтрагентов цикл 
		НаборСтрок =  СписокКонтрагентовПолный.найтиСтроки(Новый Структура("ИдентификаторСтроки", Строкатаблицы.ИдентификаторСтроки));
		для каждого СтрокаПолнойТаблицы из 	НаборСтрок цикл 
			 СтрокаПолнойТаблицы.СостояниеОбработки =  строкаТаблицы.СостояниеОбработки;
			 СтрокаПолнойТаблицы.ТекстОшибкиОбработки = строкаТаблицы.ТекстОшибкиОбработки; 
		КонецЦикла;	
	КонецЦикла;
	ФильтрСостояниеОбработки = "";
КонецПроцедуры	

Процедура ДобавитьКолонкиВСписокКонтрагентов()
		Если СписокКонтрагентов.Колонки.Найти("Пометка") = Неопределено Тогда
			СписокКонтрагентов.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	
		Если СписокКонтрагентов.Колонки.Найти("СостояниеОбработки") = Неопределено Тогда
			СписокКонтрагентов.Колонки.Добавить("СостояниеОбработки", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	
		Если СписокКонтрагентов.Колонки.Найти("ТекстОшибкиОбработки") = Неопределено Тогда
			СписокКонтрагентов.Колонки.Добавить("ТекстОшибкиОбработки", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		Если  СписокКонтрагентов.Колонки.Найти("ИдентификаторСтроки")=Неопределено Тогда
			СписокКонтрагентов.Колонки.Добавить("ИдентификаторСтроки");
		КонецЕсли;	
		
		Для каждого СтрокаТаблицы из СписокКонтрагентов цикл 
			СтрокаТаблицы.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор());
		КонецЦикла;
КонецПроцедуры

Процедура ОткрытьСписокКонтрагентов(парСписокКонтрагентов, парОрганизацияССылка, парСписокВзаимоотношений) Экспорт
	
	
	Если Этаформа.Открыта() = Ложь Тогда
		СписокКонтрагентов = парСписокКонтрагентов.Скопировать();
		ОрганизацияСсылка = парОрганизацияССылка;
		СписокВзаимоотношений = парСписокВзаимоотношений;
		Этаформа.Заголовок = "Групповая обработка контрагентов организации "+ОрганизацияССылка;
		ДобавитьКолонкиВСписокКонтрагентов();
		СписокКонтрагентовПолный = СписокКонтрагентов.Скопировать();	
		ПолеВыбораДействия = "Сопоставление"  ;
    	РасставитьГалочкиПоУмолчанию();

		Открыть();
	Иначе 
		Этаформа.Активизировать();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВклВсеПриИзменении(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из СписокКонтрагентов Цикл
		СтрокаТабличнойЧасти.Пометка=	ВклВсе;
	КонецЦикла;

КонецПроцедуры

Процедура СписокКонтрагентовПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭлементыФормы.СписокКонтрагентов.ТекущаяКолонка.Имя = "СостояниеОбработки"
		И НЕ ПустаяСтрока(Элемент.ТекущиеДанные.СостояниеОбработки) Тогда
		
		Отказ = Истина;
		Если найти(Элемент.ТекущиеДанные.ТекстОшибкиОбработки, "head")=0 Тогда
			Предупреждение(Элемент.ТекущиеДанные.ТекстОшибкиОбработки+".", 120, "Результат обработки");
		Иначе 
			фрм = ЭтотОбъект.ПолучитьФорму("ФормаHTMLСообщения");
			фрм.HTMLТекст = Элемент.ТекущиеДанные.ТекстОшибкиОбработки;
			фрм.ЗаголовокФормы = "Ошибки в адресе";
			фрм.Открыть();
		КонецЕсли;	
		
	ИначеЕсли Не ЭлементыФормы.СписокКонтрагентов.ТекущаяКолонка.Имя = "Пометка" Тогда
		
		Отказ = Истина;
		
		ТекДанные = ЭлементыФормы.СписокКонтрагентов.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Предупреждение("Выберите контрагента.",, НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ОбъектДД = ТекДанные.ОбъектДД;
		ПолучитьФорму("ФормаКарточкаКонтрагента",ЭтаФорма, ОбъектДД.Organization.Id + ОбъектДД.Id).ОткрытьКарточку(текДанные.ОбъектДД, ОрганизацияССылка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьКАВ1С(ТаблицаЗначений, ОбновленныйОбъектДД)
	
	Модуль_РаботаССерверомДиадок.ОбновитьСтрокуКонтрагента(ТаблицаЗначений, ОбновленныйОбъектДД);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокКААктивныеСтрокаКА" Тогда
		ОбновитьКАВ1С(СписокКонтрагентов, Параметр);
		ОбновитьКАВ1С(СписокКонтрагентовПолный, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьМассивКонтрагентовПоИНН(ИНН)
	
	Запрос=	Новый Запрос;
	Запрос.Текст=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		
КонецФункции

Процедура СопоставитьСКонтрагентом1С(СтрокаСписка)
	
	//Если НЕ СтрокаСписка.ТекущийСтатус = "IsMyCounteragent" Тогда
	//	СтрокаСписка.СостояниеОбработки=	"Ошибка обработки";
	//	СтрокаСписка.ТекстОшибкиОбработки=	"С контрагентом не установлены партнерские отношения, сопоставление с контрагентом 1С невозможно";
	//	Возврат;
	//КонецЕсли;
	
	МассивКонтрагентов=	ВернутьМассивКонтрагентовПоИНН(СтрокаСписка.ИНН);
	Если МассивКонтрагентов.Количество() = 0  Тогда
		СтрокаСписка.СостояниеОбработки=	"Ошибка сопоставления";
		СтрокаСписка.ТекстОшибкиОбработки=	"Не найден контрагент 1С с ИНН " + СтрокаСписка.ИНН;
	Иначе
		Для каждого Контрагент Из МассивКонтрагентов Цикл
			СопоставленныйКА1С=	ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Контрагент_2_CounteragentBoxID(Контрагент, СтрокаСписка.ОбъектДД.OrganizationId);
			Если НЕ ЗначениеЗаполнено(СопоставленныйКА1С) Тогда
				ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").Установить_CounteragentBoxID_для_Контрагент(Контрагент, СтрокаСписка.ОбъектДД.Id, СтрокаСписка.ОбъектДД.Organization.Id);
				ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Контрагент, "ДиадокИдентификаторЭДО", СтрокаСписка.ОбъектДД.FnsParticipantId);
			КонецЕсли;
		КонецЦикла;
		СтрокаСписка.СостояниеОбработки=	"Контрагент сопоставлен";
		СтрокаСписка.ТекстОшибкиОбработки=	"Контрагент сопоставлен";
		

	КонецЕсли;
	
КонецПроцедуры

Процедура ПринятьПриглашение(СтрокаСписка)
	
	Если СтрокаСписка.ТекущийСтатус = "InvitesMe" Тогда
		Попытка
			Модуль_РаботаССерверомДиадок.ПринятьПриглашение(СтрокаСписка.ОбъектДД, "");
			СтрокаСписка.ОбъектДД=	СтрокаСписка.ОбъектДД.Organization.GetCounteragentById(СтрокаСписка.ОбъектДД.Id);
			
			СтрокаСписка.СостояниеОбработки=	"Приглашение принято";
			СтрокаСписка.ТекстОшибкиОбработки=	"Приглашение принято";
		Исключение
			СтрокаСписка.СостояниеОбработки=	"Ошибка";
			СтрокаСписка.ТекстОшибкиОбработки=	ОписаниеОшибки();
		КонецПопытки;
	Иначе
		СтрокаСписка.СостояниеОбработки=	"Ошибка обработки";
		СтрокаСписка.ТекстОшибкиОбработки=	"Контрагент " + СтрокаСписка.Контрагент + " не отправлял запрос на установление партнерских взаимоотношений";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСписокКонтрагентов(РежимОбработки)
	
	для каждого СтрокаСписка из СписокКонтрагентов цикл 
		СтрокаСписка.СостояниеОбработки = "";
		СтрокаСписка.ТекстОшибкиОбработки = "";
	КонецЦикла;
	
	СписокОтмеченныхКонтрагентов=	СписокКонтрагентов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаСписка Из СписокОтмеченныхКонтрагентов Цикл
		
		СтрокаСписка.Пометка=	Ложь;
		
		Если РежимОбработки = "Сопоставление" Тогда
			СопоставитьСКонтрагентом1С(СтрокаСписка);
		ИначеЕсли РежимОбработки = "ПриемПриглашений" Тогда
			ПринятьПриглашение(СтрокаСписка);
		КонецЕсли;
		
		Оповестить("ОбновитьСписокКААктивныеСтрокаКА", СтрокаСписка.ОбъектДД, ЭтаФорма);
		
	КонецЦикла;
	ОбновитьСостояниеОбработкиВПолнойТаблице();
	ВклВсе=	Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанель1Сопоставить(Кнопка)
	
	ОбработатьСписокКонтрагентов("Сопоставить");
	
КонецПроцедуры

Процедура КоманднаяПанель1ПринятьПриглашение(Кнопка)
	
	ОбработатьСписокКонтрагентов("ПриемПриглашения");
	
КонецПроцедуры

Функция HTML_Оформление(ТекстОшибки)
	
		Если ТекстОшибки <> "" Тогда 
				ТекстОшибки = "
				|<head>
				
				|<style type=""text/css"">
				| h3 {
				|  margin-top: 0.5em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				| p {
				|  margin-top: 0.2em; /* Отступ сверху */
				|  margin-bottom: 0em; /* Отступ снизу */
				| }
				|</style>
				|</head>
				|<body>
				|"+ТекстОшибки+"
				|</body>";
				
			КонецЕсли;
		Возврат ТекстОшибки;	
КонецФункции	

Функция ТипОшибкиАдреса(ТекстОшибки)
	Если найти(врег(текстОшибки), врег("отсутствуют сведения"))>0 Тогда 
		Возврат "Адрес не указан"
	ИначеЕсли найти(врег(текстОшибки), врег("Адрес должен быть указан"))>0 Тогда 
		Возврат "Адрес указан произвольной строкой"
	Иначе 
		Возврат "Ошибки в адресе"
	КонецЕсли;	
		
	
КонецФункции	

Процедура ПроверитьКорректностьАдресаКонтрагента(СтрокаСписка)
	 ТаблицаЗначенийДляМаршрутизации =   ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ВернутьТаблицуМаршрутизацииДляКонтрагента(ОрганизацияСсылка, СтрокаСписка.ОбъектДД.id,СтрокаСписка.ОбъектДД.Organization.id);
	 ТекстОшибки = "";
	 Для каждого строкаКА из ТаблицаЗначенийДляМаршрутизации цикл 
		 Контрагент =  строкаКА.контрагент;
		 AddressContent = ПолучитьМодульпрог("Модуль_Диадок_РаботаСКонтентом").Новый_AddressInfo();
		 Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктуруАдреса(AddressContent, Контрагент, Истина);
		 ТекстОшибкиАдреса = ПолучитьМодульпрог("Модуль_Диадок_РаботаСКонтентом").ПроверитьСтруктуруАдреса(AddressContent, Истина);
		 Если ТекстОшибкиАдреса<>"" Тогда 
			 ТекстОшибки = ТекстОшибки +
					"<h3>Ошибки в юридическом адресе контрагента <a href=""КОНТРАГЕНТ:"+контрагент.УникальныйИдентификатор()+""">"+Контрагент.наименование+"</a></h3>
					|"+ ТекстОшибкиАдреса;

		 КонецЕсли;	 
	 КонецЦикла;	 
     Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	 	СтрокаСписка.ТекстОшибкиОбработки = HTML_Оформление(ТекстОшибки);
	 	СтрокаСписка.СостояниеОбработки = ?(ЗначениеЗаполнено(ТекстОшибки),ТипОшибкиАдреса(ТекстОшибки), "");
	ИначеЕсли  ТаблицаЗначенийДляМаршрутизации.количество()>0 Тогда
	 	СтрокаСписка.ТекстОшибкиОбработки = "Адрес корректен";
	 	СтрокаСписка.СостояниеОбработки = "Адрес корректен"
	Иначе
	 	СтрокаСписка.ТекстОшибкиОбработки = "Контрагент в 1С не сопоставлен";
	 	СтрокаСписка.СостояниеОбработки = "Контрагент в 1С не сопоставлен"
	КонецЕсли;	
КонецПроцедуры	
	
Процедура КоманднаяПанель1ПроверкаЮридическогоАдреса(Кнопка)
	// Вставить содержимое обработчика.
	СписокОтмеченныхКонтрагентов=	СписокКонтрагентов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого СтрокаСписка Из СписокОтмеченныхКонтрагентов Цикл
		СтрокаСписка.Пометка=	Ложь;
		ПроверитьКорректностьАдресаКонтрагента(СтрокаСписка);		
	КонецЦикла;
	
	ОбновитьСостояниеОбработкиВПолнойТаблице();
	ВклВсе=	Ложь;
КонецПроцедуры

Процедура  	ЗагрузитьЮрадрес(СтрокаСписка)
	Address = СтрокаСписка.ОбъектДД.Address;
	Если ЗначениеЗаполнено(Address.regionCode)=Ложь Тогда 
		строкаСписка.СостояниеОбработки = "Адрес в "+НаименованиеСистемы+" не указан";
		строкаСписка.ТекстОшибкиОбработки = "Адрес в "+НаименованиеСистемы+" не указан";
	Иначе
		попытка 
			ТаблицаЗначенийДляМаршрутизации =   ПолучитьМодульПрог("Модуль_Данные1С_СвязиОбъектов").ВернутьТаблицуМаршрутизацииДляКонтрагента(ОрганизацияСсылка, СтрокаСписка.ОбъектДД.id,СтрокаСписка.ОбъектДД.Organization.id);
	 		Для каждого строкаКА из ТаблицаЗначенийДляМаршрутизации цикл 
				Контрагент =  строкаКА.контрагент;
	 			Модуль_ЗаполнениеКонтента.УстановитьАдресКонтрагента(Контрагент,  Address);
				строкаСписка.СостояниеОбработки = "Обновлена информация об адресе";
				строкаСписка.ТекстОшибкиОбработки = "Обновлена информация об адресе";
			конецЦикла;
		исключение
			строкаСписка.СостояниеОбработки = "Ошибка при обновлении адреса";
			строкаСписка.ТекстОшибкиОбработки = ОписаниеОшибки();
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры	

Процедура ЗагрузитьЮридическиеАдреса(Кнопка)
	// Вставить содержимое обработчика.
	СписокОтмеченныхКонтрагентов=	СписокКонтрагентов.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для каждого СтрокаСписка Из СписокОтмеченныхКонтрагентов Цикл
		СтрокаСписка.Пометка=	Ложь;
		ЗагрузитьЮрадрес(СтрокаСписка);		
	КонецЦикла;
	
	ОбновитьСостояниеОбработкиВПолнойТаблице();
	ВклВсе=	Ложь;
КонецПроцедуры



Процедура ОбновитьФильтрСостояниеОбработки()
	Элементыформы.ФильтрСостояниеОбработки.СписокВыбора.Очистить();
	Элементыформы.ФильтрСостояниеОбработки.СписокВыбора.Добавить("Все строки");
	Для каждого СтрокаСписка Из СписокКонтрагентов Цикл
		Если ЗначениеЗаполнено(СтрокаСписка.СостояниеОбработки) и (ЭлементыФормы.ФильтрСостояниеОбработки.СписокВыбора.НайтиПоЗначению(СтрокаСписка.СостояниеОбработки)=Неопределено) Тогда 
			Элементыформы.ФильтрСостояниеОбработки.СписокВыбора.Добавить(СтрокаСписка.СостояниеОбработки);
	    КонецЕсли;
	КонецЦикла;
	
	ДоступностьФильтра = ( (Элементыформы.ФильтрСостояниеОбработки.СписокВыбора.Количество()>1) или (СписокКонтрагентов.количество()<СписокКонтрагентовПолный.Количество() ) );
	ЭлементыФормы.ФильтрСостояниеОбработки.Доступность  = ДоступностьФильтра;
	ЭлементыФормы.НадписьСостояниеОбработки.Доступность = ДоступностьФильтра;
КонецПроцедуры

Процедура ВыполнитьНажатие(Элемент)
	//сбросим все статусы
	СписокОтмеченныхКонтрагентов=	СписокКонтрагентов.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если (СписокОтмеченныхКонтрагентов.Количество()=0) Тогда 
		предупреждение("Не выбрано ни одного контрагента", , НаименованиеСистемы);
		Возврат
	КонецЕсли;	
	Если (ПолеВыбораДействия = "ЗагрузкаАдреса") и (вопрос("Обновить данные о юридических адресах для "+СписокОтмеченныхКонтрагентов.Количество()+" контрагента(ов)?",РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НаименованиеСистемы)=КодВозвратаДиалога.Нет) Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Стр из СписокКонтрагентов цикл 
		Стр.СостояниеОбработки = "";
		Стр.ТекстОшибкиОбработки = "";
	КонецЦикла;	
	Если  ПолеВыбораДействия = "Сопоставление" Тогда
		  ОбработатьСписокКонтрагентов("Сопоставление");
	ИначеЕсли  ПолеВыбораДействия = "ПриемПриглашений" Тогда
		  ОбработатьСписокКонтрагентов("ПриемПриглашений");
	ИначеЕсли  ПолеВыбораДействия = "ПроверкаАдреса" Тогда 
		   КоманднаяПанель1ПроверкаЮридическогоАдреса(Элемент)
	ИначеЕсли  ПолеВыбораДействия = "ЗагрузкаАдреса" Тогда 
		   ЗагрузитьЮридическиеАдреса(Элемент);
	Иначе 
		   вызватьИсключение("неизвестное действие: "+ПолеВыбораДействия)
	   КонецЕсли;
	   
	ОбновитьФильтрСостояниеОбработки();	
КонецПроцедуры

Процедура ФильтрСостояниеОбработкиПриИзменении(Элемент)
	Если  ФильтрСостояниеОбработки="Все строки" Тогда 
		НаборДляЗагрузки =  СписокКонтрагентовПолный
	Иначе 
		НаборДляЗагрузки =  СписокКонтрагентовПолный.найтиСтроки(Новый Структура("СостояниеОбработки", ФильтрСостояниеОбработки))
	КонецЕсли;
	
	СписокКонтрагентов.Очистить();
	Для каждого СтрокаНабора из НаборДляЗагрузки цикл 
		Стр = СписокКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(Стр, СтрокаНабора);
	КонецЦикла;
КонецПроцедуры

Процедура ПриОткрытии()
		ОбновитьФильтрСостояниеОбработки();
		КартинкаЗаголовка= ЭДО_БиблиотекаКартинок().КартинкаЗаголовка;
КонецПроцедуры

Функция ЗначениеПоУмолчаниюВзависимостиОтВидаДействия(ВидДействия, ТекущийСтатус, КонтрагентВ1С, СостояниеОбработки)
	Если ВидДействия = "Сопоставление"  Тогда
		Возврат Истина
	ИначеЕсли ВидДействия =  "ПриемПриглашений"	Тогда
		Возврат ТекущийСтатус = "InvitesMe"
	ИначеЕсли (ВидДействия =  "ПроверкаАдреса") Тогда
		Возврат ЗначениеЗаполнено(КонтрагентВ1С)
	ИначеЕсли (ВидДействия = "ЗагрузкаАдреса")	Тогда
		Возврат (ЗначениеЗаполнено( СостояниеОбработки)) и (СостояниеОбработки<>"Адрес корректен")   и  ЗначениеЗаполнено(КонтрагентВ1С) 
	иначе 	
		 вызватьИсключение("неизвестное действие: "+ВидДействия)
	   КонецЕсли;

КонецФункции	

Процедура РасставитьГалочкиПоУмолчанию()
	для каждого СтрокаТаблицы из СписокКонтрагентов цикл 
		СтрокаТаблицы.Пометка = ЗначениеПоУмолчаниюВзависимостиОтВидаДействия(ПолеВыбораДействия, СтрокаТаблицы.ТекущийСтатус, Строкатаблицы.КонтрагентВ1С, Строкатаблицы.СостояниеОбработки)
	КонецЦикла;
КонецПроцедуры	

Процедура ПолеВыбораДействияПриИзменении(Элемент)
	РасставитьГалочкиПоУмолчанию()
КонецПроцедуры


