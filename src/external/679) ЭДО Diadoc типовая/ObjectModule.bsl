Перем КэшВПФ Экспорт;

Перем ИнтеграционнаяОбработка;
Перем контекстПрограммныхМодулей;
Перем ПрофильКонфигурации;

Перем Контекст1САдаптерКонфигурации;

Перем НаименованиеСистемы Экспорт;
Перем КраткоеНаименованиеСистемы Экспорт;
Перем КраткоеНаименованиеСистемыПредложныйПадеж Экспорт;
Перем ТелефонТехПоддержки Экспорт;
Перем ТочкаВходаВеб Экспорт; 
Перем ВерсияОбработки Экспорт;
Перем ВерсияКомпоненты Экспорт;
Перем ИспользоватьИконкуСистемы Экспорт;

Перем Модуль_ИнтеграцияОбщий Экспорт;
Перем Модуль_ЗаполнениеКонтента Экспорт;
Перем Модуль_Интеграция Экспорт;
Перем Модуль_РаботаССерверомДиадок Экспорт;
Перем ИмяМодуляИнтеграции Экспорт;

Перем ИспользуетсяПодключаемыйМодуль Экспорт;
Перем ВнешнийМодуль Экспорт; //объект обработки - подключаемого модуля.

Перем РазрешитьНеструктурированныеАдреса Экспорт; 

Перем ИдентификаторGA; 
Перем ВремяСобытияGA;
Перем ФиксироватьВремяСобытияGA;

Перем ИспользоватьПодсистемуКонтурDiadoc Экспорт;

Перем DiadocUserId Экспорт;

Перем НомерВерсииОС;

Перем ЭДО_БиблиотекаКартинок;

Перем ЗапущенКакВнешнийМодуль Экспорт;  // признак того, что модуль запущен из версии Pro в качестве источника данных.

Перем НаименованияРегионовРоссии;

Перем КэшОбъектыМетаданныхСуществуют;

Перем ФорматыДокументовНаОтправку;

Перем Модуль_РаботаСКонтентом Экспорт;

Функция ПреобразоватьвСистему(Число10,система)
	
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	//!!!!!!!!
	//[
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	//]
	Возврат СтрокаСистема;
КонецФункции

Функция ПреобразоватьКURL(Стр)
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
КонецФункции

Функция ДобавитьПараметрВGA(Ключ, Значение);
	возврат сокрЛП(Ключ)+"="+СокрЛП(ПреобразоватьКURL(Значение))+"&";
КонецФункции	

Функция  ПолучитьСтрокуЗапросаGA(ИмяСобытия, ИмяФормы, ДлительностьСобытия, ЦенностьСобытия)
	  Результат = 	ДобавитьПараметрВGA("v", "1")+                    
					ДобавитьПараметрВGA("cid", ИдентификаторGA)+ 
					ДобавитьПараметрВGA("cd1", DiadocUserId)+   
					ДобавитьПараметрВGA("cd2", ИдентификаторGA)+   
					ДобавитьПараметрВGA("t", "event")+
					ДобавитьПараметрВGA("ec", "1C_82_ОФ")+               
					ДобавитьПараметрВGA("ea", ИмяСобытия)+            
					ДобавитьПараметрВGA("el", ИмяФормы+"/"+ИмяСобытия)+              
					ДобавитьПараметрВGA("dp", "/"+ИмяФормы)+
					ДобавитьПараметрВGA("cm1", Формат(ДлительностьСобытия, "ЧДЦ=0; ЧГ=0"))+
					?(ЗначениеЗаполнено(ЦенностьСобытия),ДобавитьПараметрВGA("ev", Формат(ЦенностьСобытия, "ЧДЦ=0; ЧГ=0"))  ,"")+
					ДобавитьПараметрВGA("an", метаданные.Синоним)+
					ДобавитьПараметрВGA("av", метаданные.Версия)+
					ДобавитьПараметрВGA("aiid", ВерсияОбработки)
					;
					
	Возврат лев(Результат, СтрДлина(Результат)-1);				
КонецФункции	

Функция ВерсияМеньше_8_2_17(ВерсияПриложения)
	
	Если лев(ВерсияПриложения, 4) = "8.2." Тогда
		ВерсияПриложения = сред(ВерсияПриложения, 5);
		ВерсияПриложения = лев(ВерсияПриложения, найти(ВерсияПриложения, ".")-1);
		Возврат Число(ВерсияПриложения) < 17
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВремяВМиллисекундах()
	
	Если ФиксироватьВремяСобытияGA = неопределено Тогда
		СистемнаяИнформация=	Новый СистемнаяИнформация;
        ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
		ФиксироватьВремяСобытияGA = (ВерсияМеньше_8_2_17(ВерсияПриложения)=ложь);
	КонецЕсли;	
	
	Если ФиксироватьВремяСобытияGA тогда 	
	 	Попытка
			Возврат Вычислить("ТекущаяУниверсальнаяДатаВМиллисекундах()");		
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		возврат 0
	КонецЕсли;
	
КонецФункции

Процедура ЗафиксироватьСобытиеGA(ИмяФормы, ИмяСобытия="show-form", Ценность = неопределено, ФиксироватьВремяЗагрузки = ложь)  экспорт 
	
	ВремяСобытия = ПолучитьВремяВМиллисекундах();
	СтрокаЗапроса = ПолучитьСтрокуЗапросаGA(ИмяСобытия, ИмяФормы, ?(ФиксироватьВремяЗагрузки,ВремяСобытия - ВремяСобытияGA, 0) , Ценность);
	Модуль_РаботаССерверомДиадок.DiadocInvoiceAPI.SendGoogleAnalyticsRequest(СтрокаЗапроса, "UA-71427828-2"); 
	ВремяСобытияGA = ВремяСобытия;
	
КонецПроцедуры

Функция ПриОкончанииРаботыМодуля() Экспорт
	
	ИнтеграционнаяОбработка=		Неопределено;
	КонтекстПрограммныхМодулей=		Неопределено;
	ПрофильКонфигурации=			Неопределено;
	
	Контекст1САдаптерКонфигурации=	Неопределено;
	
	Модуль_РаботаССерверомДиадок=	Неопределено;
	Модуль_ИнтеграцияОбщий=			Неопределено;
	Модуль_ЗаполнениеКонтента=		Неопределено;
	Модуль_Интеграция=				Неопределено;
	
	ВнешнийМодуль = Неопределено;
		
КонецФункции

Функция ИнициализироватьМодулиЯдра() Экспорт
	
	Модуль_ИнтеграцияОбщий=			ПолучитьМодульПрог("Модуль_ИнтеграцияОбщий");
	Модуль_ЗаполнениеКонтента=		ПолучитьМодульПрог("Модуль_ЗаполнениеКонтента");
	Модуль_РаботаССерверомДиадок=	ПолучитьМодульПрог("Модуль_РаботаССерверомДиадок");
	
	Модуль_РаботаСКонтентом = СоздатьМодуль("Модуль_РаботаСКонтентом");
	
	Если ИнициализированМодульИнтеграции() = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьМодульИнтеграции()
	
	
КонецФункции

Функция ИнициализированМодульИнтеграции()
	
	ИмяМодуляИнтеграции= ПолучитьИмяМодуляИнтеграции();
	
	Если ИмяМодуляИнтеграции = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока Модуль_Интеграция = Неопределено Цикл
		
		Попытка
			Модуль_Интеграция= ПолучитьМодульПрог(ИмяМодуляИнтеграции);
		Исключение 
			ОписаниеОшибки= ОписаниеОшибки();
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецПопытки;
		
		Если Модуль_Интеграция = Неопределено Тогда
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				Если Вопрос("Ошибка при загрузке модуля интеграции.
					 		|		Изменить модуль интеграции?",
					 РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да, "Диадок") = КодВозвратаДиалога.Да
				Тогда
					ИмяМодуляИнтеграции= ПолучитьИмяМодуляИнтеграции(Истина);
				Иначе 
					Прервать;
				КонецЕсли;
				
			#Иначе
				Прервать;
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Модуль_Интеграция <> Неопределено;
	
КонецФункции
		

Функция УспешноВыполненаИнициализация(Логин = неопределено, Пароль = неопределено) Экспорт
	
	Если НЕ ЗаполнитьПрофильКонфигурации() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПолучитьФорму("Модуль_1САдаптер").Инициализировать(Контекст1САдаптерКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Модуль_РаботаССерверомДиадок.ИнициализироватьОбъектыАПИ() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Модуль_РаботаССерверомДиадок.ИнициализироватьКонтекст(Логин, Пароль) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьМодуль(ИмяМодуля)
	
	Если ЗапущенКакВнешнийМодуль = Истина Тогда
		ИмяМодуля = "ТиповойМодульДиадок_" + ИмяМодуля;
	КонецЕсли;
	
	Обработка = ПолучитьМакет(ИмяМодуля);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	
	Обработка.Записать(ИмяФайла);
	
	Модуль = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Модуль;
	
КонецФункции

Функция ПолучитьМодульПрог(ИмяМодуля) Экспорт 
	
	Если КонтекстПрограммныхМодулей = Неопределено Тогда 
		КонтекстПрограммныхМодулей = Новый Соответствие;
	КонецЕсли;
	
	ФормаМодуля = КонтекстПрограммныхМодулей[ИмяМодуля];
	
	Если ФормаМодуля = Неопределено Тогда
		
		ФормаМодуля = ПолучитьФорму(ИмяМодуля);
		
		КонтекстПрограммныхМодулей.Вставить(ИмяМодуля, ФормаМодуля);
		
	КонецЕсли;
	
	Возврат ФормаМодуля;
		
КонецФункции

Функция ЭтоЛюбойТипСчетаФактуры(Type) Экспорт
	
	Возврат Лев(Type, 7) = "Invoice";
	
КонецФункции

Функция ЭтоСчетФактура(Type) Экспорт
	
	Возврат Type = "Invoice";
	
КонецФункции

Функция ЭтоФормализованныйДокумент(Type) Экспорт
	
	Возврат
	
	ЛЕВ(Type, 7) = "Invoice"
	ИЛИ Type = "XmlTorg12"
	ИЛИ Type = "XmlAcceptanceCertificate"
	ИЛИ Type = "UniversalTransferDocument"
	ИЛИ Type = "UtdInvoice"
	ИЛИ Type = "UtdTorg12"
	ИЛИ Type = "UtdAcceptanceCertificate"
	ИЛИ Type = "UniversalCorrectionDocument"
	ИЛИ Type = "UniversalCorrectionDocument"
	ИЛИ Type = "UcdInvoiceCorrection";
	
КонецФункции

Функция ЭтоСчетФактураИсправленная(Type) Экспорт
	
	Возврат Type = "InvoiceRevision";
	
КонецФункции

Функция ЭтоФормализованныйТОРГ12(Type) Экспорт
	
	Возврат Type = "XmlTorg12";
	
КонецФункции

Функция ЭтоФормализованныйАктОВыполненииРабот(Type) Экспорт
	
	Возврат Type = "XmlAcceptanceCertificate";
	
КонецФункции

Функция ЭтоНеформализованныйДокумент(Type) Экспорт
	
	Возврат
	
		Type = "Contract"
	ИЛИ Type = "CertificateRegistry"
	ИЛИ Type = "PriceListAgreement"
	ИЛИ Type = "ReconciliationAct"
	ИЛИ Type = "ServiceDetails"
	ИЛИ	Лев(Type, 13) = "Nonformalized";
	
КонецФункции

Функция ЭтоВходящийДокЕщеБезПодписиИОтказа(Status) Экспорт
	
	Возврат Status = "InboundWaitingForRecipientSignature";
	
КонецФункции

Функция СуществуетОбъектМетаданных(ПолноеИмяОбъекта) Экспорт
	
	Если КэшОбъектыМетаданныхСуществуют = Неопределено Тогда
		КэшОбъектыМетаданныхСуществуют = Новый Соответствие;
	КонецЕсли;
	
	ОбъектСуществует = КэшОбъектыМетаданныхСуществуют[ПолноеИмяОбъекта];
	
	Если ОбъектСуществует = Неопределено Тогда
		ОбъектСуществует = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) <> Неопределено;
		КэшОбъектыМетаданныхСуществуют.Вставить(ПолноеИмяОбъекта, ОбъектСуществует);
	КонецЕсли;
	
	Возврат ОбъектСуществует;
	
КонецФункции

Функция НаименованиеРегиона(КодРегиона) Экспорт
	
	Возврат Модуль_РаботаСКонтентом.НаименованиеРегиона(КодРегиона);
	
КонецФункции	 

Функция КодРегиона(Знач НаименованиеРегиона) Экспорт
	
	НаименованиеРегиона= НРег(НаименованиеРегиона);
	КодРегиона= "";
	
	Если 	  Найти(НаименованиеРегиона, "адыгея") > 0 Тогда 
		КодРегиона= "01"
	ИначеЕсли Найти(НаименованиеРегиона, "башкортостан") > 0 Тогда 
		КодРегиона= "02"
	ИначеЕсли Найти(НаименованиеРегиона, "алтайский") > 0 Тогда 
		КодРегиона= "22" 
	ИначеЕсли Найти(НаименованиеРегиона, "алтай") > 0 Тогда 
		КодРегиона= "04"
	ИначеЕсли Найти(НаименованиеРегиона, "ингушетия") > 0 Тогда 
		КодРегиона= "06"
	ИначеЕсли Найти(НаименованиеРегиона, "кабардино") > 0 Тогда 
		КодРегиона= "07"
	ИначеЕсли Найти(НаименованиеРегиона, "карачаево") > 0 Тогда 
		КодРегиона= "09"
	ИначеЕсли Найти(НаименованиеРегиона, "карелия") > 0 Тогда 
		КодРегиона= "10"
	ИначеЕсли Найти(НаименованиеРегиона, "коми") > 0 Тогда 
		КодРегиона= "11"
	ИначеЕсли Найти(НаименованиеРегиона, "марий") > 0 Тогда 
		КодРегиона= "12" 
	ИначеЕсли Найти(НаименованиеРегиона, "мордовия") > 0 Тогда 
		КодРегиона= "13" 
	ИначеЕсли Найти(НаименованиеРегиона, "татарстан") > 0 Тогда 
		КодРегиона= "16" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "удмуртская") > 0 Тогда 
		КодРегиона= "18" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "хакасия") > 0 Тогда 
		КодРегиона= "19" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашская") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашия") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "краснодарский") > 0 Тогда 
		КодРегиона= "23" 
	ИначеЕсли Найти(НаименованиеРегиона, "приморский") > 0 Тогда 
		КодРегиона= "25" 
	ИначеЕсли Найти(НаименованиеРегиона, "ставропольский") > 0 Тогда 
		КодРегиона= "26" 
	ИначеЕсли Найти(НаименованиеРегиона, "хабаровский") > 0 Тогда 
		КодРегиона= "27" 
	ИначеЕсли Найти(НаименованиеРегиона, "амурская") > 0 Тогда 
		КодРегиона= "28" 
	ИначеЕсли Найти(НаименованиеРегиона, "архангельская") > 0 Тогда 
		КодРегиона= "29" 
	ИначеЕсли Найти(НаименованиеРегиона, "астраханская") > 0 Тогда 
		КодРегиона= "30" 
	ИначеЕсли Найти(НаименованиеРегиона, "белгородская") > 0 Тогда 
		КодРегиона= "31" 
	ИначеЕсли Найти(НаименованиеРегиона, "брянская") > 0 Тогда 
		КодРегиона= "32"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "владимирская") > 0 Тогда 
		КодРегиона= "33"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "волгоградская") > 0 Тогда 
		КодРегиона= "34" 
	ИначеЕсли Найти(НаименованиеРегиона, "вологодская") > 0 Тогда 
		КодРегиона= "35" 
	ИначеЕсли Найти(НаименованиеРегиона, "воронежская") > 0 Тогда 
		КодРегиона= "36" 
	ИначеЕсли Найти(НаименованиеРегиона, "ивановская") > 0 Тогда 
		КодРегиона= "37" 
	ИначеЕсли Найти(НаименованиеРегиона, "иркутская") > 0 Тогда 
		КодРегиона= "38" 
	ИначеЕсли Найти(НаименованиеРегиона, "калининградская") > 0 Тогда 
		КодРегиона= "39" 
	ИначеЕсли Найти(НаименованиеРегиона, "калужская") > 0 Тогда 
		КодРегиона= "40" 
	ИначеЕсли Найти(НаименованиеРегиона, "камчатский") > 0 Тогда 
		КодРегиона= "41" 
	ИначеЕсли Найти(НаименованиеРегиона, "кемеровская") > 0 Тогда 
		КодРегиона= "42" 
	ИначеЕсли Найти(НаименованиеРегиона, "кировская") > 0 Тогда 
		КодРегиона= "43" 
	ИначеЕсли Найти(НаименованиеРегиона, "костромская") > 0 Тогда 
		КодРегиона= "44" 
	ИначеЕсли Найти(НаименованиеРегиона, "курганская") > 0 Тогда 
		КодРегиона= "45"   
	ИначеЕсли Найти(НаименованиеРегиона, "курская") > 0 Тогда 
		КодРегиона= "46" 		
	ИначеЕсли Найти(НаименованиеРегиона, "ленинградская") > 0 Тогда 
		КодРегиона= "47" 
	ИначеЕсли Найти(НаименованиеРегиона, "липецкая") > 0 Тогда 
		КодРегиона= "48" 
	ИначеЕсли Найти(НаименованиеРегиона, "магаданская") > 0 Тогда 
		КодРегиона= "49" 
	ИначеЕсли Найти(НаименованиеРегиона, "московская") > 0 Тогда 
		КодРегиона= "50"
	ИначеЕсли Найти(НаименованиеРегиона, "мурманская") > 0 Тогда 
		КодРегиона= "51"
	ИначеЕсли Найти(НаименованиеРегиона, "нижегородская") > 0 Тогда 
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "новосибирская") > 0 Тогда 
		КодРегиона= "54"
	ИначеЕсли Найти(НаименованиеРегиона, "томская") > 0 Тогда 
		КодРегиона= "70"
	ИначеЕсли Найти(НаименованиеРегиона, "омская") > 0 Тогда 
		КодРегиона= "55"
	ИначеЕсли Найти(НаименованиеРегиона, "оренбургская") > 0 Тогда 
		КодРегиона= "56"
	ИначеЕсли Найти(НаименованиеРегиона, "орловская") > 0 Тогда 
		КодРегиона= "57"
	ИначеЕсли Найти(НаименованиеРегиона, "пензенская") > 0 Тогда 
		КодРегиона= "58"
	ИначеЕсли Найти(НаименованиеРегиона, "пермский") > 0 Тогда 
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "псковская") > 0 Тогда 
		КодРегиона= "60"
	ИначеЕсли Найти(НаименованиеРегиона, "ростовская") > 0 Тогда 
		КодРегиона= "61"
	ИначеЕсли Найти(НаименованиеРегиона, "рязанская") > 0 Тогда 
		КодРегиона= "62"
	ИначеЕсли Найти(НаименованиеРегиона, "самарская") > 0 Тогда 
		КодРегиона= "63"
	ИначеЕсли Найти(НаименованиеРегиона, "саратовская") > 0 Тогда 
		КодРегиона= "64"
	ИначеЕсли Найти(НаименованиеРегиона, "сахалинская") > 0 Тогда 
		КодРегиона= "65"
	ИначеЕсли Найти(НаименованиеРегиона, "саха") > 0 Тогда 
		КодРегиона= "14" 
	ИначеЕсли Найти(НаименованиеРегиона, "якутия") > 0 Тогда 
		КодРегиона= "14"	
	ИначеЕсли Найти(НаименованиеРегиона, "смоленская") > 0 Тогда 
		КодРегиона= "67"
	ИначеЕсли Найти(НаименованиеРегиона, "тамбовская") > 0 Тогда 
		КодРегиона= "68"
	ИначеЕсли Найти(НаименованиеРегиона, "тверская") > 0 Тогда 
		КодРегиона= "69"
	ИначеЕсли Найти(НаименованиеРегиона, "тульская") > 0 Тогда 
		КодРегиона= "71"
	ИначеЕсли Найти(НаименованиеРегиона, "тюменская") > 0 Тогда 
		КодРегиона= "72"
	ИначеЕсли Найти(НаименованиеРегиона, "ульяновская") > 0 Тогда 
		КодРегиона= "73"
	ИначеЕсли Найти(НаименованиеРегиона, "челябинская") > 0 Тогда 
		КодРегиона= "74"
	ИначеЕсли Найти(НаименованиеРегиона, "забайкальский") > 0 Тогда 
		КодРегиона= "75"
	ИначеЕсли Найти(НаименованиеРегиона, "ярославская") > 0 Тогда 
		КодРегиона= "76"
	ИначеЕсли Найти(НаименованиеРегиона, "еврейская") > 0 Тогда 
		КодРегиона= "79"
	ИначеЕсли Найти(НаименованиеРегиона, "ненецкий") > 0 Тогда 
		КодРегиона= ?(Найти(НаименованиеРегиона, "ямало") > 0, "89", "83")
	ИначеЕсли Найти(НаименованиеРегиона, "мансийский") > 0 Тогда 
		КодРегиона= "86"
	ИначеЕсли Найти(НаименованиеРегиона, "чукотский") > 0 Тогда 
		КодРегиона= "87"
	ИначеЕсли Найти(НаименованиеРегиона, "чеченская") > 0 Тогда 
		КодРегиона= "20"
	ИначеЕсли Найти(НаименованиеРегиона, "свердловская") > 0 Тогда 
		КодРегиона= "66"
	ИначеЕсли Найти(НаименованиеРегиона, "новгородская") > 0 Тогда 
		КодРегиона= "53"
	ИначеЕсли Найти(НаименованиеРегиона, "горьковская") > 0 Тогда   //синоним нижегородской
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "бурятия") > 0 Тогда 
		КодРегиона= "03"
	ИначеЕсли Найти(НаименованиеРегиона, "пермская") > 0 Тогда     //Пермская обл - синоним Пермского края
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "красноярский") > 0 Тогда 
		КодРегиона= "24"
	ИначеЕсли Найти(НаименованиеРегиона, "северная осетия") > 0 Тогда 
		КодРегиона= "15"
	ИначеЕсли Найти(НаименованиеРегиона, "камчатская") > 0 Тогда //Камчатская обл - синоним Камчатского края
		КодРегиона= "41"                                                                                                  
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "читинская") > 0 Тогда   //Забайкальский край
		КодРегиона= "75"                                                                           
	ИначеЕсли Найти(НаименованиеРегиона, "москва") > 0 Тогда 
		КодРегиона= "77"
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "дагестан") > 0 Тогда 
		КодРегиона= "05"
	ИначеЕсли Найти(НаименованиеРегиона, "санкт-петербург") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "ленинград") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "крым") > 0 Тогда 
		КодРегиона= "91"
	ИначеЕсли Найти(НаименованиеРегиона, "севастополь") > 0 Тогда 
		КодРегиона= "92"
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции	

//{ ОБЩИЕ ПРОЦЕДУРЫ И ФУНКУЦИИ

	Функция ПреобразоватьСтрокуВМассивПодстрок(Знач Строка, Разделитель= ",", ПропускатьПустыеСтроки= Ложь, ПрименятьСокрЛП= Ложь)Экспорт
		
		МассивПодстрок= Новый Массив;
		
		ДлинаРазделителя= СтрДлина(Разделитель);
		
		ПозицияРазделителя= Найти(Строка, Разделитель);
		
		Пока ПозицияРазделителя > 0 Цикл
			
			Подстрока= Лев(Строка, ПозицияРазделителя - 1);
			
			Если НЕ ПропускатьПустыеСтроки ИЛИ ЗначениеЗаполнено(Подстрока) Тогда
				МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Подстрока), Подстрока));
			КонецЕсли;
			
			Строка= Сред(Строка, ПозицияРазделителя + ДлинаРазделителя);
			
			ПозицияРазделителя= Найти(Строка, Разделитель);
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Строка) Тогда
			МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Строка), Строка));
		КонецЕсли;
		
		Возврат МассивПодстрок;
		
	КонецФункции 

	Функция МассивВСтроку(Массив, СимволРазделителя= ",") Экспорт
		
		Результат=	 "";
		Разделитель= "";
		
		Для Каждого ТекущееЗначение ИЗ Массив Цикл
			Результат= Результат + Разделитель + ТекущееЗначение;
			Разделитель= СимволРазделителя;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СериализоватьДанные(Структура) Экспорт
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
			
		ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Структура); 
        ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);	
		
		Возврат ЗаписьXML.Закрыть();
		
	КонецФункции
	
	Функция ДесериализоватьДанные(Данные) Экспорт
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Данные);
					
		Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
	КонецФункции
	
	Функция ПолучитьСтруктуруПараметровДляОтправкиПакета() Экспорт
				
		Возврат Новый Структура("Вкл, Документ, ТипДокумента, DocumentType, ToDepartmentId, ЭтоТестовыйДокумент, ТребуетсяНомерЗаказа, 
								|НомерЗаказа, ДопСведения, ВнешняяПечатнаяФорма, ВыгружатьExel, Отправитель, Получатель, CustomDocumentId, 
								|Id, ВидДокумента, ДокументОснованиеДляУПДСчфДоп, ФункцияУПД");
				
	КонецФункции
	
	Функция ИнициироватьТаблицуСоответствияCustomIdСсылке1С() Экспорт
		
		ТаблицаСоответствияCustomIdСсылке1С= Новый ТаблицаЗначений;
		
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("CustomDocumentId");
		
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("Type");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ДокументСсылкаВ1С");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ДокументОснованиеДляУПДСчфДоп");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ЭтоВПФ");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ВнешняяПечатнаяФорма");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ЭтоКорректировкаИсправление");
		ТаблицаСоответствияCustomIdСсылке1С.Колонки.Добавить("ЗаполненНаОсновании");
				
		Возврат ТаблицаСоответствияCustomIdСсылке1С;
		
	КонецФункции
	
	Функция СравнитьВерсии(Знач ПерваяВерсия, Знач ВтораяВерсия) Экспорт
		
		Пока НЕ ПустаяСтрока(ПерваяВерсия) ИЛИ НЕ ПустаяСтрока(ВтораяВерсия) Цикл
			
			ПозицияРазделителя= Найти(ПерваяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерПервойВерсии= Число(Лев(ПерваяВерсия, ПозицияРазделителя-1));
				ПерваяВерсия= Сред(ПерваяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерПервойВерсии= ?(ПустаяСтрока(ПерваяВерсия), 0, Число(ПерваяВерсия));
				ПерваяВерсия= "";
			КонецЕсли;
			
			ПозицияРазделителя= Найти(ВтораяВерсия, ".");
			Если ПозицияРазделителя > 0 Тогда
				НомерВторойВерсии=	Число(Лев(ВтораяВерсия, ПозицияРазделителя-1));
				ВтораяВерсия= Сред(ВтораяВерсия, ПозицияРазделителя+1);
			Иначе
				НомерВторойВерсии= ?(ПустаяСтрока(ВтораяВерсия), 0, Число(ВтораяВерсия));
				ВтораяВерсия= "";
			КонецЕсли;
			
			Если НомерПервойВерсии > НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияСтарше";
			ИначеЕсли НомерПервойВерсии < НомерВторойВерсии Тогда
				Возврат "ПерваяВерсияМладше";
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат "ВерсииРавны";
		
	КонецФункции
	
	Функция СтруктураФИО(ФИО) Экспорт
		
		СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
		
		МассивПодстрок = ПреобразоватьСтрокуВМассивПодстрок(ФИО, " ", Ложь, Истина);
		
		РазмерМассива = МассивПодстрок.Количество();
		
		Если РазмерМассива > 0 Тогда
			СтруктураФИО.Фамилия = МассивПодстрок[0];
		КонецЕсли;
		
		Если РазмерМассива > 1 Тогда
			СтруктураФИО.Имя = МассивПодстрок[1];
		КонецЕсли;
		
		Если РазмерМассива > 2 Тогда
			СтруктураФИО.Отчество = МассивПодстрок[2];
		КонецЕсли;
		
		Возврат СтруктураФИО;
		
	КонецФункции
	
	Функция РазделительПакетаЗапросов() Экспорт
		
		Возврат "		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		
	КонецФункции
	
	Функция РазделительОбъединенияЗапросов(БезДубликатов= Ложь) Экспорт
		
		Возврат "		
		|
		|ОБЪЕДИНИТЬ " + ?(БезДубликатов, "", "ВСЕ") + "
		|
		|"
		
	КонецФункции
	
	Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита, ЗначениеРеквизита= Неопределено) Экспорт
		
		КлючУникальности   = Новый УникальныйИдентификатор;
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
		
		Если СтруктураРеквизита[ИмяРеквизита] = КлючУникальности Тогда
			Возврат Ложь;
		Иначе
			ЗначениеРеквизита= СтруктураРеквизита[ИмяРеквизита];
			Возврат Истина;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПредопределенныйЭлемент(Менеджер, ИмяПредопределенногоЭлемента) Экспорт
		
		Попытка 
			Возврат Менеджер[ИмяПредопределенногоЭлемента];
		Исключение КонецПопытки;
		
	КонецФункции
	
	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ТипДокументаУКД(ФункцияУКД) Экспорт
		
		Если ФункцияУКД = "КСЧФДИС" ИЛИ ФункцияУКД = "InvoiceAndBasic" Тогда
			Возврат "УКД Ксчф Дис";
		ИначеЕсли ФункцияУКД = "ДИС" ИЛИ ФункцияУКД = "Basic" Тогда
			Возврат "УКД Дис";
		ИначеЕсли ФункцияУКД = "КСЧФ" ИЛИ ФункцияУКД = "Invoice" Тогда
			Возврат "УКД Ксчф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ФункцияУПД(ТипДокументаУПД) Экспорт
		
		Если Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("СЧФДОП"))) = ТипДокументаУПД("СЧФДОП") Тогда
			Возврат "СЧФДОП";
		ИначеЕсли Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("ДОП"))) = ТипДокументаУПД("ДОП") Тогда
			Возврат "ДОП";
		ИначеЕсли Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("СЧФ"))) = ТипДокументаУПД("СЧФ") Тогда
			Возврат "СЧФ";
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьБазовыйТипAttachmentVersion(AttachmentVersion) Экспорт
                               
       Результат = "";
	   
	   Если НРег(Лев(AttachmentVersion, 4)) = "utd_" Тогда
		   
		   Результат = "UniversalTransferDocument";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 4)) = "ucd_" Тогда
		   
		   Результат = "UniversalCorrectionDocument";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 8)) = "tovtorg_" тогда
		   
		   Результат = "TovTorg";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 6)) = "rezru_" Тогда
		   
		   Результат = "Act552";
		   
	   ИначеЕсли AttachmentVersion = "UniversalCorrectionDocument" Тогда
		   
		   Результат = "UniversalCorrectionDocument";
		   
	   ИначеЕсли AttachmentVersion = "UniversalTransferDocument" Тогда
		   
		   Результат = "UniversalTransferDocument";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 8)) = "invoice_" Тогда
		   
		   Результат = "Invoice";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 11)) = "invoicecor_" Тогда
		   
		   Результат = "InvoiceCorrection";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 7)) = "torg12_" Тогда
		   
		   Результат = "XmlTorg12";
		   
	   ИначеЕсли НРег(Лев(AttachmentVersion, 4)) = "act_" Тогда
		   
		   Результат = "XmlAcceptanceCertificate";
		   
       КонецЕсли;
       
       Возврат Результат;
       
   КонецФункции
   
   Функция ПолучитьТипКонтента(AttachmentVersion, DocumentType) Экспорт
	   
	   ТипыКонтентов = Новый Соответствие;
	   ТипыКонтентов.Вставить("TovTorg"						, "TovTorgSellerContent");
	   ТипыКонтентов.Вставить("Act552"						, "Act552SellerContent");
	   ТипыКонтентов.Вставить("UniversalTransferDocument"	, "UtdSellerContent");
	   ТипыКонтентов.Вставить("UniversalCorrectionDocument"	, "UcdSellerContent");
	   ТипыКонтентов.Вставить("XmlTorg12"					, "Torg12SellerContent");
	   ТипыКонтентов.Вставить("XmlAcceptanceCertificate"	, "AcceptanceCertificateSellerContent");
	   ТипыКонтентов.Вставить("Invoice"						, "InvoiceContent");
	   ТипыКонтентов.Вставить("InvoiceRevision"				, "InvoiceContent");
	   ТипыКонтентов.Вставить("InvoiceCorrection"			, "InvoiceCorrectionContent");
	   ТипыКонтентов.Вставить("InvoiceCorrectionRevision"	, "InvoiceCorrectionContent");
	   
	   Результат = ТипыКонтентов[ПолучитьБазовыйТипAttachmentVersion(AttachmentVersion)];
	   
	   Если НЕ ЗначениеЗаполнено(Результат) Тогда
		   Результат = ТипыКонтентов[DocumentType];
	   КонецЕсли;
	   
	   Возврат Результат;
	   
   КонецФункции
   
	Функция НоваяТаблицаЗначений(КолонкиСтрокой) Экспорт
		
		ТаблицаЗначений= Новый ТаблицаЗначений;
		
		СтруктураКолонок= Новый Структура(КолонкиСтрокой);
		
		Для Каждого КлючИЗначение ИЗ СтруктураКолонок Цикл
			ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		Возврат ТаблицаЗначений;
		
	КонецФункции
	
	// функция убирает из ИНН 2 лидирующих нуля, если ИНН начинается с 00
	Функция УдалитьЛишниеНулиИНН(Знач ИНН) Экспорт
		
		Если Лев(ИНН, 2) = "00" Тогда
			Возврат Сред(ИНН, 3);
		Иначе
			Возврат ИНН;
		КонецЕсли;
	
	КонецФункции
	
	Функция КорректныйИНН(ИНН) Экспорт
		
		Если ИНН = "0000000000" ИЛИ ИНН = "000000000000" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДлинаИНН= СтрДлина(ИНН);
		
		Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			Возврат Ложь; // Строка ИНН не допустимой длины
		КонецЕсли;
		
		Если СтрДлина(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(
					  ИНН, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) > 0
		Тогда
			Возврат Ложь; // Строка ИНН содержит недопустимые символы
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			
			КонтрольноеЧисло10= КорректныйИНН_СуммаКонтрольногоЧисла10(ИНН) % 11;
			КонтрольноеЧисло10= ?(КонтрольноеЧисло10 > 9, КонтрольноеЧисло10 % 10, КонтрольноеЧисло10);
			
			Возврат КонтрольноеЧисло10 = Число(Сред(ИНН,10,1));
			
		ИначеЕсли ДлинаИНН = 12 Тогда
			
			КонтрольноеЧисло11= (Число(Сред(ИНН,1,1))*7 + КорректныйИНН_СуммаКонтрольногоЧисла10(Сред(ИНН,2,9))) % 11;
			КонтрольноеЧисло11= ?(КонтрольноеЧисло11 > 9, КонтрольноеЧисло11 % 10, КонтрольноеЧисло11);
			
			КонтрольноеЧисло12= (Число(Сред(ИНН,1,1))*3 + Число(Сред(ИНН,2,1))*7 + КорректныйИНН_СуммаКонтрольногоЧисла10(Сред(ИНН,3,9))) % 11;
			КонтрольноеЧисло12= ?(КонтрольноеЧисло12 > 9, КонтрольноеЧисло12 % 10, КонтрольноеЧисло12);
			
			Возврат КонтрольноеЧисло11 = Число(Сред(ИНН,11,1)) И КонтрольноеЧисло12 = Число(Сред(ИНН,12,1));
			
		КонецЕсли;
		
	КонецФункции
	
	Функция КорректныйИНН_СуммаКонтрольногоЧисла10(ИНН)
		
		Возврат Число(Сред(ИНН,1,1))*2 + Число(Сред(ИНН,2,1))*4 + Число(Сред(ИНН,3,1))*10 + Число(Сред(ИНН,4,1))*3 +
				Число(Сред(ИНН,5,1))*5 + Число(Сред(ИНН,6,1))*9 + Число(Сред(ИНН,7,1))*4  + Число(Сред(ИНН,8,1))*6 + Число(Сред(ИНН,9,1))*8;
		
	КонецФункции
	
	Функция ШаблонРезультатаВыполненияФункции() Экспорт
		
		Возврат Новый Структура("Отказ, ОписаниеОшибки", Ложь, "");
		
	КонецФункции
	
	Процедура СократитьСтруктуру(Структура, НеобходимыеПоля, ОбязательныеПоля= "") Экспорт
		
		ОбязательныеКлючи= Новый Структура(ОбязательныеПоля);
		НеобходимыеКлючи=  Новый Структура(НеобходимыеПоля);
		УдаляемыеКлючи=    Новый Массив;
		
		Для Каждого КлючИЗначение ИЗ Структура Цикл
			Если НЕ НеобходимыеКлючи.Свойство(КлючИЗначение.Ключ) И НЕ ОбязательныеКлючи.Свойство(КлючИЗначение.Ключ) Тогда
				УдаляемыеКлючи.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ключ ИЗ УдаляемыеКлючи Цикл
			Структура.Удалить(Ключ);
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ЭДО_БиблиотекаКартинок() Экспорт
		
		Если ЭДО_БиблиотекаКартинок = Неопределено Тогда
			
			ЭДО_БиблиотекаКартинок = Новый Структура;
			
			Для Каждого Рисунок Из ПолучитьМакет("БиблиотекаКартинок").Рисунки Цикл
				ЭДО_БиблиотекаКартинок.Вставить(Рисунок.Имя, Рисунок.Картинка);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ЭДО_БиблиотекаКартинок;
		
	КонецФункции
	
	Функция ВалютаРубльПараметрыПрописи() Экспорт
		
		Возврат "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
		
	КонецФункции
	
	Функция ФамилияСИнициалами(ФИО) Экспорт
		
		Перем Фамилия, Имя, Отчество;
		
		Если ТипЗнч(ФИО) = Тип("Структура") Тогда
			
			ФИО.Свойство("FirstName", Имя);
			
			Если ФИО.Свойство("Surname", Фамилия) Тогда
				ФИО.Свойство("Patronymic", Отчество);
			ИначеЕсли ФИО.Свойство("LastName", Фамилия) Тогда
				ФИО.Свойство("MiddleName", Отчество);
			КонецЕсли;
			
		Иначе
			
			СтруктураФИО = СтруктураФИО(ФИО);
			
			Имя 	 = СтруктураФИО.Имя;
			Фамилия  = СтруктураФИО.Фамилия;
			Отчество = СтруктураФИО.Отчество;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Фамилия) Тогда
			
			Инициалы = ?(ЗначениеЗаполнено(Имя), ВРег(Лев(Имя, 1)) + ".", "") + ?(ЗначениеЗаполнено(Отчество), ВРег(Лев(Отчество, 1)) + ".", "");
 			
			Возврат Фамилия + ?(ЗначениеЗаполнено(Инициалы), " " + Инициалы, "");
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	КонецФункции
	
	Процедура СкопироватьКнопки(КнопкиИсточника, КнопкиПриемника) Экспорт
		
		КнопкиПриемника.Очистить();
		
		ПредыдущаяКнопкаРазделитель = Ложь;
		
		Для Каждого КнопкаИсточника ИЗ КнопкиИсточника Цикл
			
			Если КнопкаИсточника.Доступность ИЛИ КнопкаИсточника.КнопкаПоУмолчанию = Истина Тогда
				
				Если КнопкаИсточника.КнопкаПоУмолчанию = Истина Тогда
					ИмяКнопкиПоУмолчанию = КнопкаИсточника.Имя;
				КонецЕсли;
				
				Если ПредыдущаяКнопкаРазделитель И КнопкаИсточника.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяКнопка = КнопкиПриемника.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяКнопка, КнопкаИсточника,,"Кнопки");
				
				Если КнопкаИсточника.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
					
					СкопироватьКнопки(КнопкаИсточника.Кнопки, НоваяКнопка.Кнопки);
					
					Если НоваяКнопка.Кнопки.Количество() = 0 Тогда
						КнопкиПриемника.Удалить(НоваяКнопка);
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				ПредыдущаяКнопкаРазделитель = НоваяКнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяКнопкиПоУмолчанию) Тогда
			КнопкиПриемника.Найти(ИмяКнопкиПоУмолчанию).КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция СсылкаПоGUID(Менеджер, GUID) Экспорт
		
		Попытка
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
		Исключение КонецПопытки;
		
		ИмяТаблицы = Метаданные.НайтиПоТипу(ТипЗнч(Менеджер)).ПолноеИмя();
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА ИЗ " + ИмяТаблицы + " ГДЕ Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Если Запрос.Выполнить().Пустой() Тогда
			ВызватьИсключение "Не удалось найти ссылку по уникальному идентификатору!
			|Таблица: " + ИмяТаблицы + "
			|Уникальный идентификатор: " + GUID;
		КонецЕсли;
		
		Возврат Ссылка;
		
	КонецФункции
	
	Функция СтрокаКоличествоДокументов(КоличествоДокументов) Экспорт
		
		Возврат Строка(КоличествоДокументов) + " " + СтрЗаменить(ЧислоПрописью(КоличествоДокументов,,"документ, документа, документов, м,,,,,0"), ЧислоПрописью(КоличествоДокументов,,",,,,,,,,0"), "");
		
	КонецФункции
	
	Процедура ОбновитьСостояниеИндикатора(Индикатор) Экспорт
		
		Индикатор.Счетчик = Индикатор.Счетчик + 1;
		
		ТекущийПрогресс = ЦЕЛ(Индикатор.Счетчик / Индикатор.Количество * 100);
		
		Если ТекущийПрогресс > Индикатор.Прогресс Тогда
			
			Если Индикатор.Прерывание Тогда
				ОбработкаПрерыванияПользователя();
			КонецЕсли;
			
			Индикатор.Прогресс = ТекущийПрогресс;
			
			Состояние(ТекстСостоянияИндикатора(Индикатор));
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция НовыйИндикатор(Представление, МаксимальноеЗначение) Экспорт
		
		Индикатор = Новый Структура;
		Индикатор.Вставить("Представление", "Заполнение идентификаторов ЭДО");
		Индикатор.Вставить("ДатаНачала"	  , ТекущаяДата());
		Индикатор.Вставить("Количество"	  , МаксимальноеЗначение);
		Индикатор.Вставить("Счетчик"   	  , 0);
		Индикатор.Вставить("Прогресс"	  , 0);
		Индикатор.Вставить("Прерывание"	  , Истина);
		
		Возврат Индикатор;
		
	КонецФункции
	
	Функция ТекстСостоянияИндикатора(Индикатор) Экспорт
		
		Если Индикатор.Счетчик < Индикатор.Количество Тогда
			
			Осталось = (ТекущаяДата() - Индикатор.ДатаНачала) * (Индикатор.Количество / Индикатор.Счетчик - 1);
			
			ОсталосьДней = Цел(Осталось / (24*60*60));
			
			ТекстОсталось = ", Осталось: ~";
			
			Если ОсталосьДней > 0 Тогда
				ТекстОсталось = ТекстОсталось + ОсталосьДней + "д";
			КонецЕсли;
			
			ТекстОсталось = ТекстОсталось + Формат('00010101' + Осталось, "ДЛФ=T");
			
		Иначе
			ТекстОсталось = "";
		КонецЕсли;
		
		Возврат Индикатор.Представление + ": " + Формат(Индикатор.Счетчик / Индикатор.Количество * 100, "ЧЦ=3; ЧДЦ=0; ЧН=") + "%" + ТекстОсталось;
		
	КонецФункции // ПолучитьТекстСостоянияИндикатораЛкс()
	
//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКУЦИИ

//} КЛАССИФИКАТОРЫ

	Функция КодСтраны(НаименованиеСтраны) Экспорт
		
		Возврат Модуль_РаботаСКонтентом.КодСтраны(НаименованиеСтраны);
		
	КонецФункции
	
	Функция НаименованиеСтраны(КодСтраны) Экспорт
		
		Возврат Модуль_РаботаСКонтентом.НаименованиеСтраны(КодСтраны);
		
	КонецФункции

//{ КЛАССИФИКАТОРЫ
	
	Функция ПараметрыВПФ(ИдентификаторВПФ) Экспорт
		
		Если КэшВПФ = Неопределено Тогда
			КэшВПФ = Новый Соответствие;
		КонецЕсли;
		
		ПараметрыОбработки = КэшВПФ[ИдентификаторВПФ];
		
		Если ПараметрыОбработки = Неопределено Тогда
			ПараметрыОбработки = Новый Структура("ВнешняяОбработка, ДополнительныеПараметры, НомерВПФ");
			КэшВПФ.Вставить(ИдентификаторВПФ, ПараметрыОбработки);
		КонецЕсли;
		
		Возврат ПараметрыОбработки;
		
	КонецФункции
	
//} ОБЩИЕ ПРОЦЕДУРЫ И ФУНКУЦИИ

//{ РАБОТА С СЕРВЕРОМ ДИАДОК
	
	Функция РаботаССерверомДиадок_ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности) Экспорт
		Возврат Модуль_РаботаССерверомДиадок.ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности);
	КонецФункции
	
	Функция РаботаССерверомДиадок_ПолучитьDepartment(Organization, DepartmentKpp) Экспорт
		Возврат Модуль_РаботаССерверомДиадок.ПолучитьDepartment(Organization, DepartmentKpp);
	КонецФункции
	
//} РАБОТА С СЕРВЕРОМ ДИАДОК

//{ РАБОТА С 1С АДАПТЕРОМ
	
	Функция ОдинСАдаптер_Инициализировать() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Инициализировать(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипСправочникаГТД() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипСправочникаГТД(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипСправочникаОрганизации() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипСправочникаОрганизации(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураВыданный() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипДокументаСчетФактураВыданный(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипДокументаСчетФактураПолученный() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипДокументаСчетФактураПолученный(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипДокументаРеализацияТоваровУслуг() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипДокументаРеализацияТоваровУслуг(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолучитьТипСправочникаДоговоров() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьТипСправочникаДоговоров(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураВыданный() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьПолноеИмяДокументаСчетФактураВыданный(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_Документы_ПолноеИмяДокументаСчетФактураПолученный() Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").Документы_ПолучитьПолноеИмяДокументаСчетФактураПолученный(Контекст1САдаптерКонфигурации);
	КонецФункции
	
	Функция ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку(НаименованиеНастройки, ЗначениеПоУмолчанию= Неопределено) Экспорт
	
		Если Контекст1САдаптерКонфигурации = Неопределено Тогда
			ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
		КонецЕсли;
		
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").НастройкиТекущегоПользователя_ПолучитьНастройку(Контекст1САдаптерКонфигурации, НаименованиеНастройки, ЗначениеПоУмолчанию);
		
	КонецФункции
	
	Функция ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С(НаименованиеНастройки) Экспорт
	
		Если Контекст1САдаптерКонфигурации = Неопределено Тогда
			ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
		КонецЕсли;
		
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").НастройкиТекущегоПользователя_ПолучитьНастройку1С(Контекст1САдаптерКонфигурации, НаименованиеНастройки);
		
	КонецФункции
	
	Функция ОдинСАдаптер_НастройкиТекущегоПользователя_ПолучитьНастройку1С_СкладПоУмолчанию() Экспорт
		
		Если Контекст1САдаптерКонфигурации = Неопределено Тогда
			ВызватьИсключение "Модуль 1С-адаптер не инициализирован";
		КонецЕсли;
		
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").НастройкиТекущегоПользователя_ПолучитьНастройку1С_СкладПоУмолчанию(Контекст1САдаптерКонфигурации);
		
	КонецФункции
	
	Процедура ОдинСАдаптер_НастройкиТекущегоПользователя_УстановитьНастройку(НаименованиеНастройки, Значение) Экспорт
		
		Если Контекст1САдаптерКонфигурации = Неопределено Тогда
			ВызватьИсключение "Адаптер 1С конфигурации не инициализирован";
		КонецЕсли;
		
		ПолучитьФорму("Модуль_1САдаптер").НастройкиТекущегоПользователя_УстановитьНастройку(Контекст1САдаптерКонфигурации, НаименованиеНастройки, Значение);
		
	КонецПроцедуры
		
	Функция ОдинСАдаптер_СвойстваОбъектов_НайтиОбъект(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2 = Неопределено, ЗначениеСвойства2 = Неопределено) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_НайтиОбъект(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2, ЗначениеСвойства2);
	КонецФункции
	
	Функция ОдинСАдаптер_СвойстваОбъектов_НайтиОбъекты(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_НайтиОбъекты(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2, ЗначениеСвойства2);
	КонецФункции
	
	Функция ОдинСАдаптер_СвойстваОбъектов_НайтиСвойство(НаименованиеСвойства) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_НайтиСвойство(Контекст1САдаптерКонфигурации, НаименованиеСвойства);
	КонецФункции
	
	Функция ОдинСАдаптер_НайтиОбъектыПоМассивуЗначений(НаименованиеСвойства, ЗначениеСвойства) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_НайтиОбъектыПоМассивуЗначений(Контекст1САдаптерКонфигурации, НаименованиеСвойства, ЗначениеСвойства);
	КонецФункции
	
	Процедура ОдинСАдаптер_Заполнить_ТаблицуКонтрагентовДиадок_Контрагентами1С(ТаблицаСКонтрагентами) Экспорт
		ПолучитьМодульПрог("Модуль_1САдаптер").Заполнить_ТаблицуКонтрагентовДиадок_Контрагентами1С(Контекст1САдаптерКонфигурации, ТаблицаСКонтрагентами);
	КонецПроцедуры
	
	Процедура ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, ЗначениеСвойства) Экспорт
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_УстановитьЗначениеСвойства(Контекст1САдаптерКонфигурации, Объект, НаименованиеСвойства, ЗначениеСвойства);
	КонецПроцедуры
	
	Функция ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, ЗначениеПоУмолчанию= Неопределено) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПолучитьЗначениеСвойства(Контекст1САдаптерКонфигурации, Объект, НаименованиеСвойства, ЗначениеПоУмолчанию);
	КонецФункции
	
	Функция ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначенияСвойстваОбъектов(Объекты, НаименованиеСвойства) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПолучитьЗначенияСвойстваОбъектов(Контекст1САдаптерКонфигурации, Объекты, НаименованиеСвойства);
	КонецФункции
	
	Процедура ОдинСАдаптер_СвойстваОбъектов_УстановитьЗначениеКонстанты(НаименованиеКонстанты,ЗначениеКонстанты) Экспорт
		ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_УстановитьЗначениеКонстанты(Контекст1САдаптерКонфигурации, НаименованиеКонстанты, ЗначениеКонстанты);
	КонецПроцедуры
	
	Функция ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты(НаименованиеКонстанты, ЗначениеПоУмолчанию= Неопределено) Экспорт
		Возврат	ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПолучитьЗначениеКонстанты(Контекст1САдаптерКонфигурации, НаименованиеКонстанты, ЗначениеПоУмолчанию);
	КонецФункции
		
	Функция ОдинСАдаптер_СвойстваОбъектов_ПолучитьСсылкуНаСвойство(ИдентификаторСвойства) Экспорт
		Возврат ПолучитьФорму("Модуль_1САдаптер").СвойстваОбъектов_ПолучитьСсылкуНаСвойство(Контекст1САдаптерКонфигурации, ИдентификаторСвойства);
	КонецФункции
	
	Функция ОдинСАдаптер_СвойстваОбъектов_ПолучитьТаблицуСвойствСкладов(ИдентификаторыСвойств) Экспорт
		Возврат ПолучитьМодульПрог("Модуль_1САдаптер").СвойстваОбъектов_ПолучитьТаблицуСвойстваСкладов(Контекст1САдаптерКонфигурации, ИдентификаторыСвойств);
	КонецФункции
	
	Процедура ВнешнийАдаптер_СопоставлятьДокументыФоном(ДатаНачала, ДатаОкончания) Экспорт
		ПолучитьМодульПрог("Модуль_ВнешнийАдаптер").СопоставитьДокументыФоном(ДатаНачала,ДатаОкончания);	
	КонецПроцедуры
	
//} РАБОТА С 1С АДАПТЕРОМ

//{ РАБОТА С НОМЕНКЛАТУРОЙ
	
	Процедура Номенклатура_УстановитьСоответствие(Номенклатура, Контрагент, Code, NomenclatureArticle, Name) Экспорт
		ПолучитьФорму("Модуль_Номенклатура").УстановитьСоответствие(Номенклатура, Контрагент, Code, NomenclatureArticle, Name);
	КонецПроцедуры
	
	Функция Номенклатура_ПолучитьНоменклатуруПоставщика(Контрагент, Name, Code, NomenclatureArticle) Экспорт
		Возврат ПолучитьФорму("Модуль_Номенклатура").ПолучитьНоменклатуруПоставщика(Контрагент, Name, Code, NomenclatureArticle);
	КонецФункции
	
	Функция Номенклатура_ПолучитьНоменклатуруПоАртикулу(NomenclatureArticle) Экспорт
		Возврат ПолучитьФорму("Модуль_Номенклатура").ПолучитьНоменклатуруПоАртикулу(NomenclatureArticle);
	КонецФункции
	
	Функция Номенклатура_ПолучитьАвтомобильПоVIN(NomenclatureName) Экспорт
		Возврат ПолучитьФорму("Модуль_1САдаптерПолучениеДокументов_Рарус").ПолучитьАвтомобильПоVIN(NomenclatureName);
	КонецФункции
	
	Функция Номенклатура_ПолучитьVINИзНаименования(NomenclatureName) Экспорт
		Возврат ПолучитьФорму("Модуль_1САдаптерПолучениеДокументов_Рарус").НайтиVINВНаименовании(NomenclatureName);
	КонецФункции
	
//} РАБОТА С НОМЕНКЛАТУРОЙ


//{ РАБОТА С ШАБЛОНАМИ ДОП ПОЛЕЙ
	
	Функция ПолучитьШаблонКлючейДопСведений(ИдКонтрагента, DocumentType) Экспорт
		
		СловарьШаблоновКлючейДопСведений = ПолучитьСловарьШаблоновКлючейДопСведений();
		
		ОтборСтрок=			Новый Структура("ИдКонтрагента, DocumentType", ИдКонтрагента, DocumentType);
		НайденныеСтроки=	СловарьШаблоновКлючейДопСведений.НайтиСтроки(ОтборСтрок);

		Если НайденныеСтроки.Количество() > 0 Тогда
			ШаблонКлючей = НайденныеСтроки[0].ШаблонКлючей;
		Иначе
			ШаблонКлючей = "";
		КонецЕсли;
		
		Возврат ШаблонКлючей;
		
	КонецФункции
	
	Функция ПолучитьСловарьШаблоновКлючейДопСведений() 
		
		СловарьШаблонов = Новый ТаблицаЗначений;
		
		СловарьШаблонов.Колонки.Добавить("ИдКонтрагента");
		СловарьШаблонов.Колонки.Добавить("DocumentType");
		СловарьШаблонов.Колонки.Добавить("ШаблонКлючей");
		
		//проктер Тестовая организация
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
		
		//проктер
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "03288824e3374f509fe2e5503742cd88@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "03288824e3374f509fe2e5503742cd88@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "03288824e3374f509fe2e5503742cd88@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
		
		//авто
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
		
		//апатит
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");

		//апатит (балаковский ф-л)
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");

		//фосагро
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		
		//метахим
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		
		//фосагро (череповец)
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		
		//Папирус (для тестирования группы Фосагро)
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
		
		//Тестовое Юрлицо 2 (Для тестирования группы S7)
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "ed60fb4bcc2a46c49452ea21582f59ad@diadoc.ru", "Invoice", "ДоговорНомер=;ДоговорДата=;");
		// S7 - ПАО "Авиакомпания Сибирь"
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "bd79cbf7708f45e1891fb398affa6fc6@diadoc.ru", "Invoice", "ДоговорНомер=;ДоговорДата=;");
		// S7 - ООО Глобус
		ДобавитьСтрокуВСловарь(СловарьШаблонов, "c9768a6086f64e1690d4bc81f09ca86a@diadoc.ru", "Invoice", "ДоговорНомер=;ДоговорДата=;");
		
		
		Возврат СловарьШаблонов;
		
	КонецФункции // ()
	
	Процедура ДобавитьСтрокуВСловарь(СловарьШаблонов, ИдКонтрагента, DocumentType, ШаблонКлючей)
	
		НоваяСтрока = СловарьШаблонов.Добавить();
		
		НоваяСтрока.ИдКонтрагента = ИдКонтрагента; 
		НоваяСтрока.DocumentType = DocumentType;
		НоваяСтрока.ШаблонКлючей = ШаблонКлючей;
	
	КонецПроцедуры // ДобавитьСтрокуВСловарь()
		
	Функция НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) Экспорт 
		
		Если ИдКонтрагента = "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru" //апатит
			ИЛИ ИдКонтрагента = "aa1b1962b50d42349d310acb27fa5760@diadoc.ru" //апатит (балаковский ф-л)
			ИЛИ ИдКонтрагента = "64d1058f69f74ab4bee0e15567860044@diadoc.ru" //фосагро
			ИЛИ ИдКонтрагента = "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru" //метахим
			ИЛИ ИдКонтрагента = "200ad0208fe84e488ef4575dac492b65@diadoc.ru" //фосагро (череповец)
			ИЛИ ИдКонтрагента = "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru" Тогда //Папирус
			КонвертироватьДопСвойста = Истина;
		Иначе
		    КонвертироватьДопСвойста = Ложь;
		КонецЕсли;
		
		Возврат КонвертироватьДопСвойста;
		
	КонецФункции
	
	Функция НеобходимоЗаполнятьШаблонДопПолейЗначениями(ИдКонтрагента) Экспорт
		
		Если ИдКонтрагента = "ed60fb4bcc2a46c49452ea21582f59ad@diadoc.ru" //Тестовое юрлицо 2 -> Тестирование группы S7 
			ИЛИ ИдКонтрагента = "bd79cbf7708f45e1891fb398affa6fc6@diadoc.ru" //S7 - ПАО "Авиакомпания Сибирь"
			ИЛИ ИдКонтрагента = "c9768a6086f64e1690d4bc81f09ca86a@diadoc.ru" Тогда // S7 - ООО Глобус 
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	
//} РАБОТА С ШАБЛОНАМИ ДОП ПОЛЕЙ	

//{ РАБОТА С ДОГОВОРАМИ КОНТРАГЕНТОВ
	
	Процедура Договор_УстановитьСоответствие(Договор, ДоговорСвойство) Экспорт
		ПолучитьФорму("Модуль_Данные1С_СвязиОбъектов").УстановитьСоотвествиеДоговора(Договор, ДоговорСвойство);
	КонецПроцедуры
	
//} РАБОТА С ДОГОВОРАМИ КОНТРАГЕНТОВ

//{ РАБОТА С СООБЩЕНИЯМИ ПОЛЬЗОВАТЕЛЕЙ
	
	Функция  СообщенияПользователям_ПоказатьСообщениеОбОшибке(Ошибка, Подробности, Параметр = Неопределено) Экспорт
		Возврат ПолучитьФорму("Модуль_СообщенияДляПользователей").ПоказатьСообщениеОбОшибке(Ошибка, Подробности, Параметр);
	КонецФункции
	
//} РАБОТА С СООБЩЕНИЯМИ ПОЛЬЗОВАТЕЛЕЙ

//{ РАБОТА С ПРОФИЛЕМ КОНФИГУРАЦИИ
	
	Функция ПолучитьПрофильКонфигурации() Экспорт
		Возврат ПрофильКонфигурации;
	КонецФункции
	
	Функция ЗаполнитьПрофильКонфигурации() Экспорт
		ПрофильКонфигурации = ПолучитьМодульПрог("Модуль_Логика_ПрофилиКонфигурации").СформироватьПрофильКонфигурации();
		Если ПрофильКонфигурации <> Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецФункции
	
//} РАБОТА С ПРОФИЛЕМ КОНФИГУРАЦИИ

//{ ФУНКЦИИ ИНТЕГРАЦИИ С ПРИКЛАДНЫМИ РЕШНИЯМИ
	
	Функция ПолучитьИмяМодуляИнтеграции(ПринудительныйВыбор = ложь)
		Возврат Модуль_ИнтеграцияОбщий.ПолучитьИмяМодуляИнтеграции(ПринудительныйВыбор);
	КонецФункции
	
	Функция ИмяФормыПрикладногорешенияДляИнтеграцииДиадок() Экспорт
		
		Возврат ИмяМодуляИнтеграции;
		
	КонецФункции 
	
	Функция ПолучитьТекстПоддерживаемыхКонфигураций() Экспорт
		Возврат 
		"    Бухгалтерия предприятия,
		|    Комплексная автоматизация,
		|    Управление торговлей,
		|    Управление производственным предприятием";
	КонецФункции
	
	Функция ПолучитьТекущуюВерсиюПлатформы() Экспорт
		системнаяИнформация = Новый СистемнаяИнформация;
		Возврат системнаяИнформация.ВерсияПриложения;
	КонецФункции
		
	Функция СоздатьДокументВ1СПоступление(Параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть = Неопределено, СуммаВключаетНДС = Истина, ВидОперации, ЗаполнениеГТД = Ложь) Экспорт
		
		ДокументОбъект = Модуль_ИнтеграцияОбщий.СоздатьДокументПоступлениеТоваровУслуг(параметры, стВероятныеПоля, ЭДОбъект, ТабличнаяЧасть, СуммаВключаетНДС, Видоперации, ЗаполнениеГТД);
		ДокументОбъект.ПолучитьФорму().ОткрытьМодально();
		Если НЕ ДокументОбъект.Модифицированность() Тогда
			Возврат ДокументОбъект.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции	
	
	Функция СоздатьДокументВ1СВозврат(параметры, стВероятныеПоля, ЭДОбъект) Экспорт
		ДокументОбъект = Модуль_ИнтеграцияОбщий.СоздатьДокументВозвратТоваровОтПокупателя(параметры, стВероятныеПоля, ЭДОбъект);
		ДокументОбъект.ПолучитьФорму().ОткрытьМодально();
		Если ДокументОбъект.Модифицированность() = Ложь Тогда
			Возврат ДокументОбъект.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции
	
	Процедура УстановитьДоговорВСчетеФактуреДляДиадок(СчетФактура) Экспорт 
		ИнтОбработка = 	Модуль_ИнтеграцияОбщий;
		ИнтОбработка.УстановитьДоговорВСчетеФактуреДляДиадокПР(СчетФактура);
	КонецПроцедуры
	
	Функция  ПолучитьСуммуДокументаВВалютеРегламентированногоУчетаДиадок(ДокументССылка) Экспорт 
		Возврат  Модуль_ИнтеграцияОбщий.ПолучитьСуммуДокументаВВалютеРегламентированногоУчета_Диадок(ДокументССылка);
	КонецФункции	
	
	Функция ЭтоРТУ(СсылкаНаОбъект)   Экспорт
		Возврат  Модуль_ИнтеграцияОбщий.ЭтоРТУ_ДД(СсылкаНаОбъект);
 	КонецФункции 
	
//} ФУНКЦИИ ИНТЕГРАЦИИ С ПРИКЛАДНЫМИ РЕШНИЯМИ

//{ РАБОТА С "ВНЕШНИМИ" КОМПОНЕНТАМИ
	
	Функция ВнешнийАдаптер_ПолучитьСобытияИзмененийСтатусовДокументов(ОрганизацияСсылка, ИдентификаторПоследнейПорции = Неопределено) Экспорт
		Возврат ПолучитьФорму("Модуль_ВнешнийАдаптер").ПолучитьСобытияИзмененийСтатусовДокументов(ОрганизацияСсылка, ИдентификаторПоследнейПорции);
	КонецФункции
	
	Функция ВнешнийАдаптер_ПолучитьИдентификаторПоследнейПорции(ОрганизацияСсылка) Экспорт
		Возврат ПолучитьФорму("Модуль_ВнешнийАдаптер").ПолучитьИдентификаторПоследнейПорции(ОрганизацияСсылка);
	КонецФункции
	
	Процедура ВнешнийАдаптер_ЗагрузитьФайлыИзДД(Организация=Неопределено) Экспорт
		ПолучитьФорму("Модуль_ВнешнийАдаптер").ЗагрузитьФайлыИзДДВ1С(Организация);
	КонецПроцедуры
	
//} РАБОТА С "ВНЕШНИМИ" КОМПОНЕНТАМИ

//{ КОНСТАНТЫ
	
	Функция ВернутьСписокОрганизацийТребующихНомерЗаказа() Экспорт
		СписокОрганизаций = Новый списокЗначений;
		СписокОрганизаций.Добавить("53717c42b4f74fd384330094aeb0f15a@diadoc.ru");
		СписокОрганизаций.Добавить("ca7fe457542f467987df60bb9997208f@diadoc.ru");
		СписокОрганизаций.Добавить("481f205217df46d9bc21b0d8f02b6f2b@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции	
	
	Функция ВернутьСписокОрганизацийНеТребующихСверкиПоНомеру() Экспорт
		
		СписокОрганизаций=	Новый СписокЗначений;
		//СписокОрганизаций.Добавить("8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru");
		СписокОрганизаций.Добавить("7c25b4816a974cca9b33884611b38cda@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	Функция ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля() Экспорт
		
		СписокОрганизаций = Новый списокЗначений;
		СписокОрганизаций.Добавить("c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	Функция ОтправлятьВПФБезРТУ() Экспорт
		//Возврат Истина;		
		Возврат Ложь;		
	КонецФункции 
	
	Функция ФормироватьСфНаОснованииРТУ() Экспорт
		Возврат Ложь;
		//Возврат Истина;
	КонецФункции 	
	
//} КОНСТАНТЫ

//{ ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

	Функция ПолучитьСсылкуНаПодключаемыйМодуль() Экспорт
		
		ИмяСправочника = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульВидСправочника");
		GUIDСсылка	   = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульGUID");

		Если ЗначениеЗаполнено(ИмяСправочника) И ЗначениеЗаполнено(GUIDСсылка) Тогда
			
			НовыйGUID = Новый УникальныйИдентификатор(GUIDСсылка);
			СсылкаМодуль = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйGUID);
			
			Если ЗначениеЗаполнено(СсылкаМодуль) Тогда
				Возврат СсылкаМодуль;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции

	Функция ИнициализироватьВнешнийПодключаемыйМодуль() Экспорт
		
		Если ИспользуетсяПодключаемыйМодуль=Ложь Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Если Не ВнешнийМодуль = Неопределено Тогда
			Возврат ВнешнийМодуль;
		КонецЕсли;
			
		ВнешнийМодуль 					= Неопределено;
		ИспользуетсяПодключаемыйМодуль 	= Ложь;
		
		ПодключаемыйМодульТип = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульТип");                
		
		Если ЗначениеЗаполнено(ПодключаемыйМодульТип) И НЕ ПодключаемыйМодульТип = "Нет" Тогда
			
			Если ПодключаемыйМодульТип = "Диск" Тогда
				
				ПодключаемыйМодульПуть = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульПуть");
				Если ЗначениеЗаполнено(ПодключаемыйМодульПуть) Тогда
					Попытка
						
						УстановитьПривилегированныйРежим(Истина); 
						ВнешнийМодуль = ВнешниеОбработки.Создать(СокрЛП(ПодключаемыйМодульПуть), Ложь); //в небезопасном режиме, т.к. ПМ может содержать небезопасный код
						
						ВнешнийМодуль.Инициализировать(ЭтотОбъект);
						ИспользуетсяПодключаемыйМодуль = Истина;
					Исключение
						СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаИнициализацииПодключаемогоМодуля", ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	
				
			ИначеЕсли ПодключаемыйМодульТип = "1С" Тогда
					
				Попытка
					Модуль = ПолучитьСсылкуНаПодключаемыйМодуль();
					Если ЗначениеЗаполнено(Модуль) Тогда
						МетаданныеСправочника = Модуль.Метаданные();
						ИмяРеквизита = "";
						ИмяТиповогоРеквизита = "";
						
						Если ИмяРеквизита = "" Тогда //вдруг его переименуют
							ИмяРеквизита = "";
							Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
								Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
									ИмяРеквизита = Реквизит.Имя;
									//будем брать последний реквизит такого типа т.к. это более вероятно, если найдем наш - гуд
									Если ИмяТиповогоРеквизита=Реквизит.Имя Тогда
										Прервать;  //найден ожидаемый реквизит нужного типа
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
							МодульОбъект 	= Модуль.ПолучитьОбъект();
							ИмяФайла 		= ПолучитьИмяВременногоФайла();
							ДвоичныеДанные 	= МодульОбъект[ИмяРеквизита].Получить();
							ДвоичныеДанные.Записать(ИмяФайла);
							
							ВнешнийМодуль = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
														
							ВнешнийМодуль.Инициализировать(ЭтотОбъект);
							ИспользуетсяПодключаемыйМодуль = Истина;
							УдалитьФайлы(ИмяФайла);
						КонецЕсли;
					КонецЕсли;
				Исключение
					СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаИнициализацииПодключаемогоМодуля", ОписаниеОшибки());
				КонецПопытки;
				
			ИначеЕсли ПодключаемыйМодульТип = "Конфигурация" Тогда
				
				ПодключаемыйМодульИмяОбработки = ОдинСАдаптер_СвойстваОбъектов_ПолучитьЗначениеКонстанты("ДиадокПодключаемыйМодульИмяОбработки");
				Если ЗначениеЗаполнено(ПодключаемыйМодульИмяОбработки) Тогда
					Попытка
						ВнешнийМодуль = Обработки[ПодключаемыйМодульИмяОбработки].Создать();
						ВнешнийМодуль.Инициализировать(ЭтотОбъект);
						ИспользуетсяПодключаемыйМодуль = Истина;
					Исключение
						СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаИнициализацииПодключаемогоМодуля", ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат ВнешнийМодуль;
		
	КонецФункции

	//	ИмяСобытия 				     - 	Тип: Строка.
	//									Идентификатор события, которое необходимо обработать
	//
	//	ПараметрыПодключаемогоМодуля - 	Тип: Структура. Необязательный
	//									Параметры, которые будут доступны подключаемому модулю.
	//
	//	СтандартнаяОбработкаДиадок   - 	Тип: Булево. Необязательный
	//									Передается признак выполнения стандартной обработки события. 
	//									Если в теле процедуры указать ему значение Ложь, стандартная обработка события производиться не будет.
	Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия, ПараметрыПодключаемогоМодуля = Неопределено, СтандартнаяОбработкаДиадок = Неопределено) Экспорт
		
		Если ИспользуетсяПодключаемыйМодуль = Истина Тогда
			Попытка
				РезультатОбработки = ВнешнийМодуль.ОбработатьСобытиеДиадок(ИмяСобытия, ПараметрыПодключаемогоМодуля, СтандартнаяОбработкаДиадок);
				Возврат РезультатОбработки;
			Исключение
				ТекстОшибки = "Ошибка при обработке события """ +ИмяСобытия+ """ подключаемого модуля. " + Символы.ПС + ОписаниеОшибки();
				ВызватьИсключение(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецФункции

//} ПОДКЛЮЧАЕМЫЙ МОДУЛЬ

Функция ПолучитьВидКлиента()
		
	видКлиента = "не определен";	
	
	#Если ТонкийКлиент Тогда
		ВидКлиента=	"Тонкий клиент";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		ВидКлиента=	"Толстый клиент обычное приложение";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		ВидКлиента=	"Толстый клиент управляемые формы";
	#ИначеЕсли ВебКлиент Тогда
		ВидКлиента=	"Веб клиент";
	#ИначеЕсли НаСервере Тогда
		ВидКлиента=	"Сервер";
	#ИначеЕсли ВнешнееСоединение Тогда
		ВидКлиента=	"Внешнее соединение";
	#КонецЕсли

	возврат ВидКлиента;
	
КонецФункции
	
Функция ПолучитьИнформациюДляТехподдержки() Экспорт 
	
	Результат = новый структура("ВерсияОбработки, ВерсияКомпоненты, ФайлКомпоненты, ВерсияОС, ТипПлатформы, ВерсияПлатформы, ВидКлиента, СтрокаСоединения, МодульИнтеграции, ИспользованиеПодключаемогоМодуля, ИнформацияОКонфигурации");
	
	Результат.ВерсияОбработки  = ВерсияОбработки;
	Результат.ВерсияКомпоненты = ВерсияКомпоненты;
	Результат.ФайлКомпоненты   = Модуль_РаботаССерверомДиадок.ПолноеИмяФайлаВнешнейКомпоненты();
	
	СистемнаяИнформация=	Новый СистемнаяИнформация;
	Результат.ВерсияОС = СистемнаяИнформация.ВерсияОС;
	Результат.ТипПлатформы = СистемнаяИнформация.ТипПлатформы;
	Результат.ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
    Результат.ВидКлиента =  ПолучитьВидКлиента();
	Результат.СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
    Результат.МодульИнтеграции =  Модуль_ИнтеграцияОбщий.ПолучитьИмяМодуляИнтеграции();
    Результат.ИспользованиеПодключаемогоМодуля = ?(ИспользуетсяПодключаемыйМодуль = Истина, "Используется", "Не используется");
	Результат.ИнформацияОКонфигурации = Метаданные.ПодробнаяИнформация + " (" + Метаданные.Версия + ")";

	
	возврат Результат;
	
КонецФункции	
	
Функция СохранитьИнформациюДляТПВоВременныйКаталог(ДополнительнаяИнформация="") Экспорт
	
	ТекстовыйДокумент=	Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку("ДатаСоздания: " + Формат(ТекущаяДата(), "ДФ='yyyy-MM-ddT HH.mm.ss'"));
	
	ИнформацияДляТп=  ПолучитьИнформациюДляТехподдержки();
	
	Для каждого Элемент из ИнформацияДляТп цикл
		ТекстовыйДокумент.ДобавитьСтроку(Элемент.Ключ+": "+Элемент.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДополнительнаяИнформация) тогда 
		ТекстовыйДокумент.ДобавитьСтроку(ДополнительнаяИнформация);
	КонецЕсли; 
	
	Попытка
		ТекстовыйДокумент.Записать(КаталогВременныхФайлов() + "\DiadocSupport.txt");
	Исключение
	КонецПопытки;
	
КонецФункции 


Функция ПолучитьСловарьЛайф()
	Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
	Результат.НаименованиеСистемы = "Лайф Факторинг";
	Результат.КраткоеНаименованиеСистемы = "Лайф";
	Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Лайфе";
	Результат.ТочкаВходаВеб = "life.kontur.ru";
	Результат.ТелефонТехподдержки = "8 (495) 645-10-51";
	Результат.ИспользоватьИконкуСистемы = Ложь;
	Возврат Результат;	
КонецФункции	

Функция ПолучитьСловарьСеоДок()
	Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
	Результат.НаименованиеСистемы = "Сеодок";
	Результат.КраткоеНаименованиеСистемы = "Сеодок";
	Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Сеодоке";
	Результат.ТочкаВходаВеб = "ceodoc.kontur.ru";
	Результат.ТелефонТехподдержки = "8 351 309-38-43";
	Результат.ИспользоватьИконкуСистемы = Истина;
	Возврат Результат;	
КонецФункции

Функция ПолучитьСловарьНФК()
	Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
	Результат.НаименованиеСистемы = "ЭДО-Факторинг";
	Результат.КраткоеНаименованиеСистемы = "ЭДО-Факторинг";
	Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "ЭДО-Факторинге";
	Результат.ТочкаВходаВеб = "edifactoring.ru";
	Результат.ТелефонТехподдержки = "Если у Вас возникли какие-либо сложности при обмене электронными документами с НФК и последующим получением факторинговых услуг, обратитесь к вашему клиентскому менеджеру в НФК";
	Результат.ИспользоватьИконкуСистемы = Ложь;
	Возврат Результат;	
КонецФункции	

Функция ПолучитьСловарьДиадок()
	Результат = Новый Структура("НаименованиеСистемы, КраткоеНаименованиеСистемы, КраткоеНаименованиеСистемыПредложныйПадеж, ТочкаВходаВеб, ТелефонТехподдержки, ИспользоватьиконкуСистемы");
	Результат.НаименованиеСистемы = "Диадок";
	Результат.КраткоеНаименованиеСистемы = "Диадок";
	Результат.КраткоеНаименованиеСистемыПредложныйПадеж = "Диадоке";
	Результат.ТочкаВходаВеб = "diadoc.kontur.ru";
	Результат.ТелефонТехподдержки = "8 800 500-10-18";
	Результат.ИспользоватьИконкуСистемы = Истина;
	Возврат Результат;	
КонецФункции	

Процедура Таймаут2(ДлительностьВМилиСекундах) Экспорт

   Попытка
      WshShell= Новый COMОбъект("WScript.Shell");
      WshShell.Run("ping -n 1 -w "+Формат(ДлительностьВМилиСекундах, "ЧГ=0")+" 127.255.255.255", 0, -1);
   Исключение
   КонецПопытки;
    
КонецПроцедуры

Функция ПолучитьВТ(МенеджерВремТаб, ИмяВремтаб ="", Порядок = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВремТаб КАК ВремТаб
	|
	|УПОРЯДОЧИТЬ ПО Порядок";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВремТаб",ИмяВремтаб); 
	Если Порядок = "" тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО Порядок","");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Порядок",Порядок);
	КонецЕсли; 
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	
	Возврат ТЗ; 
	
КонецФункции

Функция ФорматыДокументовНаОтправку() Экспорт
	
	Если ФорматыДокументовНаОтправку = Неопределено Тогда
		
		ФорматыДокументовНаОтправку = Новый Соответствие;
		ФорматыДокументовНаОтправку.Вставить("СФТОРГ12АКТ",	"Формировать СФ, ТОРГ12, АКТ в формате 155 приказа; КСФ в формате 189 приказа");
		ФорматыДокументовНаОтправку.Вставить("ТОРГ12АКТ"  , "Формировать ТОРГ12/Акт в формате 155 приказа");
		ФорматыДокументовНаОтправку.Вставить("СФ",			"Формировать СФ в формате 155 приказа, КСФ в формате 189 приказа");
		ФорматыДокументовНаОтправку.Вставить("СЧФДОП", 		"Формировать УПД, УКД для комплектов передаточных документов и счетов-фактур");
		ФорматыДокументовНаОтправку.Вставить("ДОП", 		"Формировать УПД, УКД только для передаточных документов");
		ФорматыДокументовНаОтправку.Вставить("СЧФ", 		"Формировать УПД, УКД только для счетов-фактур");
		ФорматыДокументовНаОтправку.Вставить("СЧФ_ДОП", 	"Формировать УПД, УКД раздельно для каждого передаточного документа и счета-фактуры");
		ФорматыДокументовНаОтправку.Вставить("НЕТ", 		"Формировать СФ, КСФ в устаревшем формате");
		
	КонецЕсли;
	
	Возврат ФорматыДокументовНаОтправку;
	
КонецФункции

Функция ФорматДокументовНаОтправкуСписокВыбора(ДляКонтрагента = Ложь) Экспорт
	
	ФорматыДокументовНаОтправку = ФорматыДокументовНаОтправку();
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ДляКонтрагента Тогда
		СписокВыбора.Добавить("", "Использовать настройку по умолчанию");
	КонецЕсли;
	
	СписокВыбора.Добавить("СФТОРГ12АКТ", 	ФорматыДокументовНаОтправку["СФТОРГ12АКТ"]);
	СписокВыбора.Добавить("ТОРГ12АКТ", 		ФорматыДокументовНаОтправку["ТОРГ12АКТ"]);
	СписокВыбора.Добавить("СФ", 			ФорматыДокументовНаОтправку["СФ"]);
	СписокВыбора.Добавить("Разделитель", 	"----------------------------------------------------------------------------------------------------------------------");
	СписокВыбора.Добавить("СЧФДОП", 		ФорматыДокументовНаОтправку["СЧФДОП"]);
	СписокВыбора.Добавить("ДОП",			ФорматыДокументовНаОтправку["ДОП"]);
	СписокВыбора.Добавить("СЧФ", 			ФорматыДокументовНаОтправку["СЧФ"]);
	СписокВыбора.Добавить("СЧФ_ДОП", 		ФорматыДокументовНаОтправку["СЧФ_ДОП"]);
	СписокВыбора.Добавить("Разделитель", 	"----------------------------------------------------------------------------------------------------------------------");
	СписокВыбора.Добавить("НЕТ", 			ФорматыДокументовНаОтправку["НЕТ"]);
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ФорматДокументовНаОтправкуПредставление(ФорматДокументовНаОтправку) Экспорт
	
	Возврат ФорматыДокументовНаОтправку()[ФорматДокументовНаОтправку];
	
КонецФункции

Функция ФорматДокументовНаОтправкуУстаревшийФормат(ФорматДокументовНаОтправку) Экспорт
	
	Возврат
	
		ФорматДокументовНаОтправку = "НЕТ"
	ИЛИ ФорматДокументовНаОтправку = "ДОП"
	ИЛИ ФорматДокументовНаОтправку = "ТОРГ12АКТ";
	
КонецФункции

Процедура УстановитьРежимСверткиЭлементаУправления(ЭлементУправления, РежимСвертки, ОбновитьПривязки = Истина) Экспорт
	
	Если ОбновитьПривязки Тогда
		Привязки = ПривязкиЭлементаУправления(ЭлементУправления);
	КонецЕсли;
	
	Если ЭлементУправления.Свертка <> РежимСвертки Тогда
		ЭлементУправления.Свертка = РежимСвертки;
	КонецЕсли;
	
	// Обновляем привязки, для того чтобы избежать ошибки расположения элементов на форме (DDSUPPORT-14526).
	Если ОбновитьПривязки Тогда
		ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Верх,  Привязки.Верх.ПервыйЭлемент,  Привязки.Верх.ГраницаПервогоЭлемента,  Привязки.Верх.ВторойЭлемент,  Привязки.Верх.ГраницаВторогоЭлемента);
		ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Низ,   Привязки.Низ.ПервыйЭлемент,   Привязки.Низ.ГраницаПервогоЭлемента,   Привязки.Низ.ВторойЭлемент,   Привязки.Низ.ГраницаВторогоЭлемента);
		ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Лево,  Привязки.Лево.ПервыйЭлемент,  Привязки.Лево.ГраницаПервогоЭлемента,  Привязки.Лево.ВторойЭлемент,  Привязки.Лево.ГраницаВторогоЭлемента);
		ЭлементУправления.УстановитьПривязку(ГраницаЭлементаУправления.Право, Привязки.Право.ПервыйЭлемент, Привязки.Право.ГраницаПервогоЭлемента, Привязки.Право.ВторойЭлемент, Привязки.Право.ГраницаВторогоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

Функция ПривязкиЭлементаУправления(ЭлементУправления) Экспорт
	
	Привязки = Новый Структура;
	Привязки.Вставить("Верх" , Новый Структура("ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента"));
	Привязки.Вставить("Низ"	 , Новый Структура("ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента"));
	Привязки.Вставить("Лево" , Новый Структура("ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента"));
	Привязки.Вставить("Право", Новый Структура("ПервыйЭлемент, ГраницаПервогоЭлемента, ВторойЭлемент, ГраницаВторогоЭлемента"));
	
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Верх,  Привязки.Верх.ПервыйЭлемент,  Привязки.Верх.ГраницаПервогоЭлемента,  Привязки.Верх.ВторойЭлемент,  Привязки.Верх.ГраницаВторогоЭлемента);
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Низ, 	Привязки.Низ.ПервыйЭлемент,   Привязки.Низ.ГраницаПервогоЭлемента,   Привязки.Низ.ВторойЭлемент,   Привязки.Низ.ГраницаВторогоЭлемента);
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Лево,  Привязки.Лево.ПервыйЭлемент,  Привязки.Лево.ГраницаПервогоЭлемента,  Привязки.Лево.ВторойЭлемент,  Привязки.Лево.ГраницаВторогоЭлемента);
	ЭлементУправления.ПолучитьПривязку(ГраницаЭлементаУправления.Право, Привязки.Право.ПервыйЭлемент, Привязки.Право.ГраницаПервогоЭлемента, Привязки.Право.ВторойЭлемент, Привязки.Право.ГраницаВторогоЭлемента);
	
	Возврат Привязки;
	
КонецФункции
	

ВерсияОбработки  = "5.20.01";
ВерсияКомпоненты = "5.19.2.283";

Контекст1САдаптерКонфигурации	= Новый Структура;

Если Метаданные.Константы.Найти("ВалютаРегламентированногоУчетаОрганизаций") <> Неопределено Тогда
	ИдентификаторGA = Строка(Константы.ВалютаРегламентированногоУчетаОрганизаций.Получить().УникальныйИдентификатор());
ИначеЕсли Метаданные.Константы.Найти("ВалютаРегламентированногоУчета") <> Неопределено Тогда
	ИдентификаторGA = Строка(Константы.ВалютаРегламентированногоУчета.Получить().УникальныйИдентификатор());
Иначе
	ИдентификаторGA = Вычислить("Строка(ВалютаРегламентированногоУчета.УникальныйИдентификатор())");	
КонецЕсли;
ФиксироватьВремяСобытияGA 	= Неопределено;
ВремяСобытияGA 				= ПолучитьВремяВМиллисекундах();

ИнтеграционнаяОбработка = Неопределено;
ПрофильКонфигурации 	= Неопределено;

Словарь = ПолучитьСловарьДиадок();

НаименованиеСистемы 						= Словарь.НаименованиеСистемы;
КраткоеНаименованиеСистемы 					= Словарь.КраткоеНаименованиеСистемы;
КраткоеНаименованиеСистемыПредложныйПадеж 	= Словарь.КраткоеНаименованиеСистемыПредложныйПадеж;
ТочкаВходаВеб 						        = Словарь.ТочкаВходаВеб;
ТелефонТехподдержки 						= Словарь.ТелефонТехподдержки;
ИспользоватьИконкуСистемы					= Словарь.ИспользоватьИконкуСистемы;
ИспользоватьПодсистемуКонтурDiadoc			= Метаданные.Подсистемы.Найти("КонтурDiadoc") <> Неопределено;

ЗапущенКакВнешнийМодуль = Ложь;