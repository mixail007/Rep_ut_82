
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
КонецПроцедуры

Процедура ПриЗакрытии()
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)

	ТабДок = ЭлементыФормы.ПолеТабличногоДокумента;
	Отчет(ТабДок);

КонецПроцедуры

Процедура Отчет(ТабДок) Экспорт
	
	СтрокаФильтраЗапроса="";
	Если ТолькоНераспределенныеПлатежи Тогда
		СтрокаФильтраЗапроса="ИМЕЮЩИЕ СУММА(СуммаПлатежа)- СУММА(СуммаЗаказов) > 0";	
	КонецЕсли;
			
	Макет = ПолучитьМакет("Отчет");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	А.Регистратор КАК Документ,
	               |	А.Контрагент,
	               |	А.ДоговорКонтрагента,
	               |	А.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
	               |	СУММА(А.СуммаЗаказов) КАК СуммаЗаказов,
	               |	СУММА(А.СуммаПлатежа) КАК СуммаПлатежа,
	               |	СУММА(А.СуммаПлатежа) - СУММА(А.СуммаЗаказов) КАК Разность,
	               |	А.Комментарий,
	               |	А.НазначениеПлатежа
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Сделка,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.Регистратор КАК Регистратор,
	               |		ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Сделка ССЫЛКА Документ.ЗаказПокупателя
	               |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Сделка ССЫЛКА Документ.ЗаказПокупателяСезонный
	               |						ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход
	               |					ИНАЧЕ 0
	               |				КОНЕЦ
	               |		КОНЕЦ КАК СуммаЗаказов,
	               |		ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовРасход КАК СуммаПлатежа,
	               |		ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.НазначениеПлатежа КАК СТРОКА(200))
	               |			ИНАЧЕ """"
	               |		КОНЕЦ КАК НазначениеПлатежа,
	               |		ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.Комментарий КАК СТРОКА(200))
	               |			ИНАЧЕ """"
	               |		КОНЕЦ КАК Комментарий
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	               |				&НачДата,
	               |				&КонДата,
	               |				Регистратор,
	               |				ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам
	               |					И 11=11
				   |                "+ ?(ТолькоПоСвоимДоговорам," И ДоговорКонтрагента.ОтветственноеЛицо=&ОтветственноеЛицо ","")+"
				   |) КАК ВзаиморасчетыСКонтрагентамиОбороты
	               |	ГДЕ
	               |		(ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	               |					И ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ВидОперации = &ОплатаОтПокупателяБезНал
	               |				ИЛИ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	               |					И ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ВидОперации = &ОплатаОтПокупателяНал)
	               |		И ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.Организация В(&СписокОрганизаций)) КАК А
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	А.Регистратор,
	               |	А.Контрагент,
	               |	А.ДоговорКонтрагента,
	               |	А.ДоговорКонтрагента.ОтветственноеЛицо,
	               |	А.Комментарий,
	               |	А.НазначениеПлатежа
				   |
				   |"+СтрокаФильтраЗапроса+"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	А.Регистратор.Дата,
	               |	А.Регистратор";

	
	//, КонДата, НачДата, Пени, ПеревыставлУслуги
		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"11=11","ДоговорКонтрагента.Владелец = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	//+++Шарафутдинов по задаче 47131
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
		
		СЗКонтрагенты = ПолучитьСписокКонтрагентовМенеджераПоРегиону(ПараметрыСеанса.ТекущийПользователь);
		
		Если ЗначениеЗаполнено(Контрагент) и СЗКонтрагенты.НайтиПоЗначению(Контрагент) <> Неопределено тогда
		иначе
			Запрос.УстановитьПараметр("Контрагент", СЗКонтрагенты);
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДоговорКонтрагента.Владелец = &Контрагент","ДоговорКонтрагента.Владелец В (&Контрагент)");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДоговорКонтрагента.ОтветственноеЛицо=&ОтветственноеЛицо","ДоговорКонтрагента.Владелец В (&Контрагент)");
		
	КонецЕсли; 	
	//---Шарафутдинов по задаче 47131 
	
	СписокОрганизаций = Новый СписокЗначений;
	Если РольДоступна("ДополнительныеПраваВЭД") Тогда
		СписокОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("00005"));
		СписокОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("00006"));
	иначе
		СписокОрганизаций.Добавить(Справочники.Организации.НайтиПоКоду("00001"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонДата));
	Запрос.УстановитьПараметр("НачДата", НачалоДня(НачДата));
	Запрос.УстановитьПараметр("ОплатаОтПокупателяБезНал", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ОплатаОтПокупателяНал", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	Запрос.УстановитьПараметр("ПоЗаказам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", глТекущийПользователь);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
			
	Результат = Запрос.Выполнить();

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ПериодСтр=ПредставлениеПериода(НачалоДня(НачДата),КонецДня(Кондата), "ФП=Истина");
	ОбластьЗаголовок.Параметры.ОтветственноеЛицо=Строка(глТекущийПользователь);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");

	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	ВыборкаДетали = Результат.Выбрать();
    номПП=0;
	Пока ВыборкаДетали.Следующий() Цикл
		номПП=номПП+1;
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетали);
		ОбластьДетальныхЗаписей.Параметры.НомПП=НомПП;
		ОбластьДетальныхЗаписей.Параметры.Комментарий = СокрЛП(ВыборкаДетали.Комментарий);
		ОбластьДетальныхЗаписей.Параметры.НазначениеПлатежа = СокрЛП(ВыборкаДетали.НазначениеПлатежа);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетали.Уровень());
	КонецЦикла;

	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	НачДата=НачалоДня(НачалоМесяца(ТекущаяДата()));
	КонДата=КонецДня(КонецМесяца(ТекущаяДата()));
	ЭлементыФормы.ТолькоНераспределенныеПлатежи.Значение=Истина;
	ЭлементыФормы.ТолькоПоСвоимДоговорам.Значение=Истина;
	
	Если яштАдминистративныеФункцииДоступны() Тогда
		ЭлементыФормы.ТолькоПоСвоимДоговорам.Доступность=Истина;
	Иначе
		ЭлементыФормы.ТолькоПоСвоимДоговорам.Доступность=Ложь;
	КонецЕсли;	
	
	
КонецПроцедуры




