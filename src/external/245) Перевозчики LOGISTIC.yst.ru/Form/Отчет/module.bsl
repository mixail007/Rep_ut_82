перем КодСвойства;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_82e96c99-4834-4a35-90a3-6f37fe2170c0", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры


//=======================Кнопки=====================================
Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ДействияФормыНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешнийОтчетОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыВыгрузить(Кнопка)
	
	СписокКонтр = получитьПеревозчиков();
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
//	ВвестиСтроку(ИмяФайла,"Введите Пути и Имя файла");
	ВыгрузитьПеревозчиковВФайл(СписокКонтр, ИмяФайла);
	
	#Если Клиент тогда
	сообщить("Перевозчики сохранены в файл: "+ИмяФайла);
	#КонецЕсли
	
//====================ВЫГРУЗКА==============================================	
	Сервер = "logistic.yst.ru";
	Метод  = "/api/carriers";
		
	попытка
		удачно6 = лок_SIM_ВыгрузитьФайлНаСервер(ИмяФайла, Метод, Истина, Сервер); //, Метод, УдалятьФайл, Сервер, SSL=ЛОЖЬ
		#Если Клиент тогда
			Предупреждение("Успешно выгружена на сайт "+Сервер, 30);
		#КонецЕсли
	исключение
		#Если Клиент тогда
		Сообщить("ОШИБКА при выгрузке на сайт "+Сервер+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
		#КонецЕсли
	КонецПопытки;
	
	
КонецПроцедуры



//	ПостроительОтчетаОтчет.Параметры.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90332") );

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвойства) );
	
	ПостроительОтчетаОтчет.УсловноеОформление.Очистить();
	
	ЭлементУслОформления = ПостроительОтчетаОтчет.УсловноеОформление.Добавить("Жирный");
    ЭлементУслОформления.Использование = Истина;
	
    ЭлементОбласть = ЭлементУслОформления.Область.Добавить("Код", "Код", ТипОбластиОформления.Поле);
    ЭлементОбласть = ЭлементУслОформления.Область.Добавить("Перевозчик", "Перевозчик", ТипОбластиОформления.Поле);
    ЭлементОбласть = ЭлементУслОформления.Область.Добавить("Вкл", "Вкл", ТипОбластиОформления.Поле);
   
    ЭлементОтбор = ЭлементУслОформления.Отбор.Добавить("Вкл");
        ЭлементОтбор.ВидСравнения = ВидСравнения.Равно;
        ЭлементОтбор.Значение = ЛОЖЬ;
	    ЭлементОтбор.Использование = Истина;
		
	//ЭлементУслОформления.Оформление.Шрифт.Значение = Новый Шрифт(ЭлементУслОформления.Оформление.Шрифт.Значение,,,Истина);
	//ЭлементУслОформления.Оформление.Шрифт.Использование = Истина;
	
    ЭлементУслОформления.Оформление.ЦветТекста.Значение	= WebЦвета.Красный;	
	ЭлементУслОформления.Оформление.ЦветТекста.Использование = Истина;
	
  
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты).Код КАК Код,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты) КАК Перевозчик,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК БУЛЕВО) КАК Вкл
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	//|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Перевозчик
	|АВТОУПОРЯДОЧИВАНИЕ";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОтчетыВнешнийОтчет1Отчет_82e96c99-4834-4a35-90a3-6f37fe2170c0");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

//====================================================================================

процедура ВыгрузитьПеревозчиковВФайл(СписокКонтр, ИмяФайла)

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
		
ЗаписьXML.ЗаписатьНачалоЭлемента("ArrayOfCarrier");
для i=0 по СписокКонтр.Количество()-1 цикл
	выборка = СписокКонтр[i].Значение;
	ЗаписьXML.ЗаписатьНачалоЭлемента("Carrier");
	ЗаписьXML.ЗаписатьНачалоЭлемента("FullName");
			ЗаписьXML.ЗаписатьТекст( СокрЛП(выборка.НаименованиеПолное) );
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Id");
			ЗаписьXML.ЗаписатьТекст( СокрЛП(выборка.Код) );
		ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Inn");
			ЗаписьXML.ЗаписатьТекст( СокрЛП(выборка.ИНН) );
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Kpp");
			ЗаписьXML.ЗаписатьТекст( СокрЛП(выборка.КПП) );
		ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();//Carrier
КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента(); //ArrayOfCarrier
	ЗаписьXML.Закрыть();
	сообщить("---------------");
КонецПроцедуры

функция получитьПеревозчиков()
	Запрос = новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты).Код КАК Код,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Объект КАК Справочник.Контрагенты) КАК Перевозчик,
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК БУЛЕВО) КАК Вкл
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90332") );
	рез = Запрос.Выполнить();
    табл =рез.Выгрузить();
	спис = новый СписокЗначений;
	спис.ЗагрузитьЗначения( табл.ВыгрузитьКолонку("Перевозчик") );
	возврат спис;
КонецФункции	

Функция лок_SIM_ВыгрузитьФайлНаСервер(ИмяФайла="", Ресурс="/api/carriers", УдалитьФайлПослеУдачнойВыгрузки = Истина, сайт1="logistic.yst.ru", SSL=ЛОЖЬ )
	
	Если ИмяФайла="" или Ресурс="" Тогда 
		возврат ЛОЖЬ 
	КонецЕсли;
		
//СтрокаПодключения =	"LAPENKOV_vi:8090";
СтрокаПодключения =	сайт1; //+":80";
login="admin"; password="cegthvfhbj";

Соединение = Новый HTTPСоединение(СтрокаПодключения, , login, password, , SSL);    //+++ 15.08.2017  https (SSL)!

Если Соединение = Неопределено Тогда
	Возврат Ложь;
КонецЕсли;


Заголовки = Новый Соответствие();
Заголовки.Вставить("Content-Type", "text/xml; charset=utf-8");
//Заголовки.Вставить("Content-Type", "application/xml");
 
	// посылаем запрос
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла();
	HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла, Ресурс, ИмяФайлаРезультата, Заголовки );
    //HTTPОтвет = Соединение.ОтправитьДляОбработки( ИмяФайла, Ресурс, ИмяФайлаРезультата );
 

Соединение = Неопределено; // разорвать соединение

 ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
 ТекстовыйФайлОтвет.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
 СтрокаJSONРезультат = ТекстовыйФайлОтвет.ПолучитьТекст();
 ТекстовыйФайлОтвет = Неопределено; // отключается от файла

	Если HTTPОтвет.КодСостояния=200 Тогда
		рез = Истина;
			файл = новый ФАЙЛ(ИмяФайлаРезультата);
	 		УдалитьФайлы(файл.Путь, файл.Имя);	
			//сообщить("удален временный файл ответа "+ИмяФайлаРезультата);
		
		Если УдалитьФайлПослеУдачнойВыгрузки Тогда
			файл = новый ФАЙЛ(ИмяФайла);
			Если файл.Существует() Тогда
				путь = файл.Путь;
				УдалитьФайлы(путь, файл.Имя);
				#Если Клиент Тогда
				сообщить("После удачной выгрузки - удален временный файл: "+ИмяФайла, СтатусСообщения.Информация);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		рез = ЛОЖЬ;
		сообщитьобОшибке("Статус ответа: "+строка(HTTPОтвет.КодСостояния)+"
			  		     |Ответ сервера: '"+СтрокаJSONРезультат+"'" );
	КонецЕсли;

возврат рез;

КонецФункции

Процедура ДействияФормыВключить(Кнопка)
	
	Стр1 = ЭлементыФормы.ПолеТабличногоДокумента.ТекущаяОбласть;
	Если стр1=неопределено тогда
		Контр1 = справочники.Контрагенты.ПустаяСсылка();
		ВвестиЗначение(Контр1, "Выберите Перевозчика для включения");
	Иначе
		код1 = СокрЛП(ЭлементыФормы.ПолеТабличногоДокумента.Область(стр1.Верх,2,стр1.Верх,2).Текст);
		Если Код1 = "" тогда
			Контр1 = справочники.Контрагенты.ПустаяСсылка();
			ВвестиЗначение(Контр1, "Выберите Перевозчика для включения");
        Иначе
			Контр1 = справочники.Контрагенты.НайтиПоКоду(код1);
		КонецЕсли;
	КонецЕсли;
	
	ВклВыкл( Истина , Контр1)
КонецПроцедуры

Процедура ДействияФормыВыключить(Кнопка)
	
	Стр1 = ЭлементыФормы.ПолеТабличногоДокумента.ТекущаяОбласть;
	Если стр1=неопределено тогда
		Предупреждение("Выберите Перевозчика для выключения...", 30);
		ВОЗВРАТ;
	КонецЕсли;
	
	код1 = СокрЛП(ЭлементыФормы.ПолеТабличногоДокумента.Область(стр1.Верх,2,стр1.Верх,2).Текст);
	Контр1 = справочники.Контрагенты.НайтиПоКоду(код1);

	  ВклВыкл( ЛОЖЬ , Контр1)
КонецПроцедуры

процедура ВклВыкл(Вкл=Истина, Контр1)
	
	регСв  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	регСв.Объект = Контр1;
	регСв.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(КодСвойства);
	регСв.Значение = Вкл;
	регСв.Записать();
	
	ОтчетВывести();

КонецПроцедуры	

КодСвойства = "90332";


