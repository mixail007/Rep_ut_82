перем неПересчитыватьКлиентов, таблПродажИОстатки, таблНач, СмирновА;


//1-я вспомогательная функции для Анализа пересечений 
функция НайтиПересеченияСписок(спис0, спис1)
	спис01 = новый СписокЗначений;
	
	Если спис1.Количество()=0 тогда
		Возврат спис01; //нечего искать!
	КонецЕсли;

	состояние("Обрабатывается пересечение списков товаров из "+строка(спис0.Количество())+" и "+строка(спис1.Количество())+" элементов");
	 Запрос = Новый Запрос;   //------------через запрос быстрее!--------
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Номенклатура.Ссылка КАК Товар
	                |ИЗ
	                |	Справочник.Номенклатура КАК Номенклатура
	                |ГДЕ
	                |	Номенклатура.Ссылка В (&Спис0)
	                |	И Номенклатура.Ссылка В (&Спис1)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Товар
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("спис0", спис0);
	 Запрос.УстановитьПараметр("спис1", спис1);
	 
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 спис01 = табл.ВыгрузитьКолонку("Товар");
	состояние(" ");
возврат спис01;

КонецФункции

//2-я вспомогательная функции для Анализа пересечений 
Процедура ВырезатьИзСпискаСписок(спис0, спис1)
	ii=0; 
	Если спис1.Количество()=0 тогда 
		Возврат; //нечего вырезать!
	КонецЕсли;
	
	состояние("Обрабатывается список товаров из "+строка(спис0.Количество())+" удаляются "+строка(спис1.Количество())+" элементов.");
	
	Запрос = Новый Запрос;   //------------через запрос быстрее!--------
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Номенклатура.Ссылка КАК Товар
	                |ИЗ
	                |	Справочник.Номенклатура КАК Номенклатура
	                |ГДЕ
	                |	Номенклатура.Ссылка В (&Спис0)
	                |	И НЕ Номенклатура.Ссылка В (&Спис1)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Товар
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("спис0", спис0);
	 Запрос.УстановитьПараметр("спис1", спис1);
	 
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 спис0 = табл.ВыгрузитьКолонку("Товар"); //уменьшаем список при наличие пересечений!

	состояние(" ");	
	
возврат;

КонецПроцедуры

// Анализ пересечений с предыдущими интервалами
процедура АнализПересечений( рез1, РезультатФункции )
	
	//Если рез1.СписокНоменклатуры.Количество()=0 тогда
	//	возврат;
	//КонецЕсли;
	
	N = РезультатФункции.Количество()-1; 
	Дата0N = рез1.Дата0;
	Дата1N = рез1.Дата1;
	СписN  = рез1.СписокНоменклатуры;
	
	СписNкон = новый СписокЗначений;
	СписNкон.ЗагрузитьЗначения( СписN.Выгрузитьзначения() );
	
	для i=0 по N цикл
		Дата0i = РезультатФункции[i].Дата0;
		Колi   = РезультатФункции[i].СписокНоменклатуры.Количество();
		
		Списi = РезультатФункции[i].СписокНоменклатуры;
		списПересечений = НайтиПересеченияСписок(Списi, СписN );
		
		ВырезатьИзСпискаСписок( СписNкон, Списi ); //остаток нового списка

		Если списПересечений.Количество() = 0 тогда // нет пересечений
			РезультатФункции[i].Дата1 = Дата1N;     //тогда продляем интервал на все товары Списi
			
		ИначеЕсли списПересечений.Количество() = Колi тогда //Полное пересечение
			РезультатФункции[i].Дата1 = Дата0N;             //до этого интервала - на весь список
			
	    Иначе //частичное пересечение
			ВырезатьИзСпискаСписок(Списi, списПересечений); 
			РезультатФункции[i].Дата1 = Дата1N;     //продляем интервал для товаров, которых нет в СписN
			РезультатФункции[i].СписокНоменклатуры = Списi;
			 
			//ДОБАВЛЯЕМ для Пересечения - берем "смешанный" интервал c [i].дата0 до [N].Дата0
			Рез1 = новый Структура("СписокНоменклатуры, Дата0, Дата1", списПересечений, Дата0i, Дата0N);
 			РезультатФункции.Добавить(рез1);//в конец списка
			
		КонецЕсли;
		
			
	КонецЦикла;
	
	//остаток новых товаров, то, чего нет ни в одном из предыдущих периодов
	Рез1.СписокНоменклатуры = СписNкон;
	
КонецПроцедуры

//получаем массив, каждый элемент которого - структура:
//СписокНоменклатуры - список 
//Дата0
//Дата1
функция ПолучитьСписокИзмененныхТоваров(ФиксСписок)
	
	Рез1 = новый Структура("СписокНоменклатуры, Дата0, Дата1", новый СписокЗначений, ДатаНач, ДатаКон );
    РезультатФункции = новый массив;
	
	Запрос = Новый Запрос;
	
	// много ступенек  - определяем дату первого изменения...
	Запрос.Текст = "ВЫБРАТЬ
	               |	Цены0.Номенклатура КАК Номенклатура,
	               |	Цены0.Период КАК Период,
	               |	Цены0.Цена КАК ЦенаКон,
	               |	Цены0.Период КАК Период1,
	               |	Цены0.Регистратор.Ответственный КАК Менеджер
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК Цены0
	               |ГДЕ
	               |	Цены0.Период МЕЖДУ &ДатаНач1 И &ДатаКон1
	               |	И Цены0.ТипЦен = &ТипЦен
	               |	И Цены0.Номенклатура.ВидТовара = &ВидТовара
				   
				   //+++ 07.09.2017 -------Здесь нужны ТОЛЬКО Установленные Цены!-------------
			       |		И Цены0.Регистратор.Ответственный = &СмирновА

	               |//ФиксСписок И Цены0.Номенклатура в (&ФиксСписок)
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период1
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	МИНИМУМ(Период),
	               |	МАКСИМУМ(ЦенаКон),
	               |	МАКСИМУМ(Менеджер)
	               |ПО
	               |	ОБЩИЕ,
	               |	Период1";
	Запрос.УстановитьПараметр("СмирновА",СмирновА);					   
	Запрос.УстановитьПараметр("ДатаНач1", ДатаНач - 1);
	Запрос.УстановитьПараметр("ДатаКон1", ДатаКон + 1);
	Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );  // Базовая
	Запрос.УстановитьПараметр("ВидТовара", перечисления.ВидыТоваров.Диски ); //ТОЛЬКО Диски!
	
	Если ФиксСписок.Количество()>0 тогда //если ограничен список!
	Запрос.Текст = стрЗаменить(Запрос.Текст , "//ФиксСписок","");
	Запрос.УстановитьПараметр("ФиксСписок", ФиксСписок);
	КонецЕсли;	
	выборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если выборкаИтог.Следующий() тогда
		
		Если выборкаИтог.Менеджер<>СмирновА тогда
			Предупреждение("Нет ни одного документа установки цен (по дискам) за выбранный период, в котором Ответственный = "+строка(СмирновА),30);
			ВОЗВРАТ РезультатФункции;
		КонецЕсли;	
		
	Сообщить("Первое изменение цен произошло "+строка(выборкаИтог.Период)+". Всего "+строка(выборкаИтог.Номенклатура)+" измененных товаров.");
	    выборкаПериод = выборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			//Дата0 = ДатаНач;
		   
		    Дата0 = ДатаКон;
		   	рез1.Дата0 = Дата0;
		   
			СписТов = новый СписокЗначений;
			Пока выборкаПериод.Следующий() цикл
				
				Если рез1.Дата0 = ДатаКон тогда
					Если  выборкаПериод.Менеджер = СмирновА тогда //от первой установки - до любого изменения... любым менеджером
						рез1.Дата0 = выборкаПериод.Период1;
						     Дата0 = рез1.Дата0;
						Сообщить("Первая установка цен менеджером "+строка(СмирновА)+" было "+строка(рез1.Дата0));
					Иначе//ничего не делаем!
						Продолжить;
					КонецЕсли;
				КонецЕсли;


				рез1.Дата1 = выборкаПериод.Период1;  // МЕНЯЕМ нач.дату!
				рез1.СписокНоменклатуры = СписТов;
				
				Если рез1.Дата0 < рез1.Дата1 тогда //попали в дату установки
					АнализПересечений( рез1, РезультатФункции );
					
					Если рез1.СписокНоменклатуры.Количество()>0 тогда
						Если рез1.Дата0 = Дата0  //первый интервал!
							// добавка новых интервалов для новых товаров, которых не было в предыдущих интервалах!
							или выборкаПериод.Менеджер = СмирновА тогда
 							РезультатФункции.Добавить(рез1);
						КонецЕсли;	
					КонецЕсли;
				
					Рез1 = новый Структура("СписокНоменклатуры, Дата0, Дата1", новый СписокЗначений, ДатаНач, ДатаКон);
					
 				КонецЕсли;	
				
				Сообщить("Изменение цен произошло "+строка(выборкаПериод.Период1)+" для "+строка(выборкаПериод.Номенклатура)+" товаров");
				ВыборкаТов = выборкаПериод.Выбрать();
			
			//следующее изменение
				СписТов = новый СписокЗначений;
				пока выборкаТов.Следующий() цикл
					Если  выборкаТов.Менеджер = СмирновА тогда //02.08.2017
					СписТов.Добавить( выборкаТов.Номенклатура );
					КонецЕсли;
				КонецЦикла;
			
			рез1.Дата0 = выборкаПериод.Период1;
			
			КонецЦикла;	
		
			Если СписТов.Количество()>0 тогда
				рез1.Дата1 = ДатаКон;  // МЕНЯЕМ нач.дату!
				рез1.СписокНоменклатуры = СписТов;
				АнализПересечений( рез1, РезультатФункции);
				РезультатФункции.Добавить(рез1);
			КонецЕсли;

			
	//Иначе //0 строка
		//РезультатФункции.Добавить(рез1);
	КонецЕсли;
	
	//===============Получение ЦЕН по интервалам и Клиентов!=================================================
 Сообщить(строка(ТекущаяДата())+" --- обработка "+строка(РезультатФункции.Количество())+" интервалов, "+строка(РезультатФункции.Количество())+"------------");
для i=0 по РезультатФункции.Количество()-1 цикл		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Цены0.Номенклатура,
				   |	Цены0.Цена КАК ЦенаНач,
				   |	ПродажиОбороты.КоличествоОборот
				   |ИЗ
				   |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних( &ДатаНач1, ТипЦен = &ТипЦен
				   |//ОтборТов				И Номенклатура в (&СписТов) 
				   |//ОтборВид				И Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) 
				   |		) КАК Цены0
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач1, &ДатаКон1, , 
				   |//ОтборТов				Номенклатура в (&СписТов) 
				   |//ОтборВид				Номенклатура.ВидТовара = Значение(Перечисление.ВидыТоваров.Диски) 
				   |						 ) КАК ПродажиОбороты
				   |		ПО Цены0.Номенклатура = ПродажиОбороты.Номенклатура
				   |ГДЕ
				   |	ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) <> 0";

   	Запрос.УстановитьПараметр("ДатаНач1", РезультатФункции[i].Дата0 - 1);
	Запрос.УстановитьПараметр("ДатаКон1", РезультатФункции[i].Дата1 );
	Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );  // Базовая
	
	Если РезультатФункции[i].СписокНоменклатуры.Количество()=0 тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборВид", "");
		Запрос.УстановитьПараметр("ВидТовара", перечисления.ВидыТоваров.Диски ); //ТОЛЬКО Диски!
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ОтборТов", "");
		Запрос.УстановитьПараметр("СписТов",  РезультатФункции[i].СписокНоменклатуры);
   	КонецЕсли;
	Результат = Запрос.Выполнить();
	таблЦен = Результат.Выгрузить();

	списТов = новый СписокЗначений;
	списТов.ЗагрузитьЗначения( таблЦен.ВыгрузитьКолонку("Номенклатура") );
	РезультатФункции[i].СписокНоменклатуры = списТов;
КонецЦикла;

	возврат РезультатФункции;
	 
КонецФункции


//получаем массив, каждый элемент которого - структура:
//СписокНоменклатуры - список 
//Дата0
//Дата1
функция ПолучитьСписокИзмененныхТоваровСНачалаГода(ФиксСписок, ДатаКон1)
	
	
//1) найдем измененные товары c начала года по которым были продажи за интервал [&ДатаНач1, &ДатаКон1]-------------------------------	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыПоПериодам.Номенклатура КАК Номенклатура,
	               |	ТоварыПоПериодам.Дата0 КАК Дата0
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Цены0.Номенклатура КАК Номенклатура,
	               |		МАКСИМУМ(Цены0.Период) КАК Дата0
	               |	ИЗ
	               |		РегистрСведений.ЦеныНоменклатуры КАК Цены0
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНач1, &ДатаКон1, , 
				   |					Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
				    |//ФиксСписок	 И Номенклатура в (&ФиксСписок)
					|) КАК ПродажиОбороты
	               |			ПО Цены0.Номенклатура = ПродажиОбороты.Номенклатура
	               |	ГДЕ
	               |		Цены0.Период МЕЖДУ &ДатаНачГода И &ДатаКонЦен
	               |		И Цены0.ТипЦен = &ТипЦен
	               |		И Цены0.Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски)
	        	       |//ФиксСписок И Цены0.Номенклатура в (&ФиксСписок)
	             |		И Цены0.Регистратор.Ответственный = &СмирновА
	               |		И ЕСТЬNULL(ПродажиОбороты.КоличествоОборот, 0) > 0
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Цены0.Номенклатура) КАК ТоварыПоПериодам
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
	               |ПО
	               |	Дата0";
				   
							
	Запрос.УстановитьПараметр("СмирновА",СмирновА);  //ТОЛЬКО по 1 менеджеру!
	Запрос.УстановитьПараметр("ДатаНачГода", НачалоГода(ДатаНач) - 1);
	Запрос.УстановитьПараметр("ДатаКонЦен", НачалоДня(ДатаКон1) - 1 );
	
	Запрос.УстановитьПараметр("ДатаНач1", ДатаНач );     // продажи за интервал !!!
	Запрос.УстановитьПараметр("ДатаКон1", ДатаКон1 );
	Запрос.УстановитьПараметр("ТипЦен", справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008") );  // Базовая
	
	Если ФиксСписок.Количество()>0 тогда //если ограничен список!
	Запрос.Текст = стрЗаменить(Запрос.Текст , "//ФиксСписок","");
	Запрос.УстановитьПараметр("ФиксСписок", ФиксСписок);
	КонецЕсли;	
	
	
	РезультатФункции = новый массив;
	
	выборкаДата = Запрос.Выполнить().выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	пока выборкаДата.Следующий() цикл
		выборкаНом = выборкаДата.Выбрать();
		спис = новый СписокЗначений;
		пока выборкаНом.Следующий() цикл
			спис.Добавить( выборкаНом.Номенклатура );
		КонецЦикла;
		
	Рез1 = новый Структура("СписокНоменклатуры, Дата0, Дата1", Спис, выборкаДата.Дата0, ДатаКон1 );
    РезультатФункции.Добавить(	рез1 );
	КонецЦикла;
	
	возврат РезультатФункции;
	 
КонецФункции


функция ПолучитьПродажиИОстатки(СписокТов, Дата0, Дата1)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	таблПродаж.ДоговорКонтрагента.Владелец.Код КАК КонтрагентКод,
	               |	таблПродаж.Номенклатура.Код КАК НоменклатураКод,
	               |	МАКСИМУМ(ЕСТЬNULL(таблПродаж.КоличествоОборот, 0)) КАК КоличествоПродано,
	               |	МАКСИМУМ(ЕСТЬNULL(таблПродаж.СтоимостьОборот, 0)) КАК СуммаПродано,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(таблПродаж.КоличествоОборот, 0) <> 0
	               |				ТОГДА ВЫРАЗИТЬ(таблПродаж.СтоимостьОборот / таблПродаж.КоличествоОборот КАК ЧИСЛО(10, 2))
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ЦенаПродажи,
	               |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток, 0)) КАК КоличествоНач,
	               |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток, 0)) КАК КоличествоКон,
	               |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход, 0)) КАК КоличествоПриход,
	               |	МАКСИМУМ(ЕСТЬNULL(ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход, 0)) КАК КоличествоРасход,
	               |	МАКСИМУМ(&ДатаНач) КАК ДатаНач,
				   |	МАКСИМУМ(&ДатаКон) КАК ДатаКон
	               |ИЗ
	               |	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Номенклатура В (&СписокТов)) КАК таблПродаж
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ДвиженияИГраницыПериода, Номенклатура В (&СписокТов)) КАК ТоварыНаСкладахОстаткиИОбороты
	               |		ПО таблПродаж.Номенклатура = ТоварыНаСкладахОстаткиИОбороты.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	таблПродаж.ДоговорКонтрагента.Владелец.Код,
	               |	таблПродаж.Номенклатура.Код";
	Запрос.УстановитьПараметр("ДатаНач",Дата0);			   
	Запрос.УстановитьПараметр("ДатаКон",Дата1);			   
	Запрос.УстановитьПараметр("СписокТов",СписокТов);			   
	Результат = Запрос.Выполнить();   
	табл = Результат.Выгрузить();
	
	возврат табл;
	
КонецФункции


процедура ДобавитьВОбщуюТабл(Табл0=неопределено, Табл1)
	Если Табл0=неопределено тогда
		Табл0=табл1.Скопировать();
	Иначе
		Для каждого стр1 из табл1 цикл
			стр0 = табл0.Добавить();
			ЗаполнитьЗначенияСвойств( стр0, стр1);
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	


//ГЛАВНАЯ ФУНКЦИЯ
//переход на ступеньки
// 1) определяем число изменений цен и списки измененных товаров
// 2) за период от начала до изм. - находим  таблПродажИОстатки(Спис, Дата[i-1], Дата[i] ) и Спис2 по ним
// 3) находим все
//
Процедура ДействияФормыОтчетСформировать(Кнопка)
сообщить( строка(неПересчитыватьКлиентов) );		
таблПродажИОстатки = неопределено;

	Если неПересчитыватьКлиентов=ЛОЖЬ тогда 
		
	// 1) получим список товаров, на которые изменилась цена за период в 2 таблицы: таблНач и таблПродажИОстатки 
		СписокНоменклатурыИДаты1 = ПолучитьСписокИзмененныхТоваров(СписокНоменклатуры);
		КолТов = 0;
			
		для j=0 по СписокНоменклатурыИДаты1.Количество()-1 цикл
		КолТов = КолТов +СписокНоменклатурыИДаты1[j].СписокНоменклатуры.Количество()
		КонецЦикла;
		
		Если КолТов=0 тогда
			Предупреждение("Нет товар, у которых изменилась цена
			|за период с "+формат(ДатаНач,"ДЛФ=DD")+" по "+формат(ДатаКон,"ДЛФ=DD")+"
			|Будет произведен расчет по всем измененным товарам с начала года
			|Установленных менеджером "+строка(СмирновА)+" в обратном порядке!", 30);
			СписокНоменклатурыИДаты = ПолучитьСписокИзмененныхТоваровСНачалаГода(СписокНоменклатуры, ДатаКон);
			//Возврат;
		Иначе
			СписокНоменклатурыИДаты = новый Массив; //склеиваем 0 и 1 массивы!
			
			//первый интервал.... ищем назад!
			Если СписокНоменклатурыИДаты1[0].Дата0>ДатаНач тогда
				СписокНоменклатурыИДаты0 = ПолучитьСписокИзмененныхТоваровСНачалаГода(СписокНоменклатуры, СписокНоменклатурыИДаты1[0].Дата0-1);
				для k=0 по СписокНоменклатурыИДаты0.Количество()-1 цикл
				СписокНоменклатурыИДаты.Добавить( СписокНоменклатурыИДаты0[k] );
				КонецЦикла;
			КонецЕсли;
		
			для k=0 по СписокНоменклатурыИДаты1.Количество()-1 цикл
				СписокНоменклатурыИДаты.Добавить( СписокНоменклатурыИДаты1[k] );
			КонецЦикла;
			
			Если Вопрос("Найдено "+строка(СписокНоменклатурыИДаты.Количество())+" интервалов для расчета изменения цен
			|за период с "+формат(ДатаНач,"ДЛФ=DD")+" по "+формат(ДатаКон,"ДЛФ=DD")+" 
			|Хотите Продолжить (Да)? Для изменения фикс.списка нажмите (НЕТ).", РежимДиалогаВопрос.ДаНет,10) = КодВозвратаДиалога.Нет тогда
			возврат;
			КонецЕсли;
		КонецЕсли;
		
	сообщить(строка(ТекущаяДата())+" начало обработки "+строка( СписокНоменклатурыИДаты.Количество() )+" интервалов...");
	
	таблНач = новый ТаблицаЗначений;
	таблНач.Колонки.Добавить("КонтрагентКод", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(7)) );
	таблНач.Колонки.Добавить("НоменклатураКод", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(7)) );
	таблНач.Колонки.Добавить("МинимальнаяЦена", Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(7,2)) );
	таблНач.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(6,0)) );
	
	таблНач.Колонки.Добавить("ДатаНач", Новый ОписаниеТипов("Дата",,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
	таблНач.Колонки.Добавить("ДатаКон", Новый ОписаниеТипов("Дата",,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) );
	
	таблПродажИОстатки = неопределено;
	
	ДЛЯ i=0 по СписокНоменклатурыИДаты.Количество()-1 цикл	
		
	// 2) - найдём все продажи и изменение товаров на складе за этот период по этому списку товаров
	Дата00 = макс( СписокНоменклатурыИДаты[i].Дата0, ДатаНач );
	ДатаСрезаЦен = СписокНоменклатурыИДаты[i].Дата0-1;
	
	таблПродажИОстатки1 = ПолучитьПродажиИОстатки(СписокНоменклатурыИДаты[i].СписокНоменклатуры, Дата00, СписокНоменклатурыИДаты[i].Дата1);
	// СписокНоменклатуры - меняется !!!
	
	таблКонтр = таблПродажИОстатки1.Скопировать();
	таблКонтр.Свернуть("КонтрагентКод");
	сообщить(строка(i+1)+") найдено "+строка( таблКонтр.Количество() )+" клиентов, у которых были продажи по "
								+строка(СписокНоменклатурыИДаты[i].СписокНоменклатуры.Количество())+" товарам за период с "
								+ формат(Дата00,"ДЛФ=D")+" по "+ формат( СписокНоменклатурыИДаты[i].Дата1,"ДЛФ=D") +", а цены изменились "+формат(СписокНоменклатурыИДаты[i].Дата0,"ДЛФ=D") );
	ДобавитьВОбщуюТабл(таблПродажИОстатки, таблПродажИОстатки1); 
	
	
	// 3) - получаем цены клиентов на ДатаСрезаЦен и пишем их в общую таблНач
	
	таблКон = таблНач.Скопировать();
	в0 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	 j=0;    N = таблКонтр.Количество(); 
	 t1 = Цел ( СписокНоменклатурыИДаты[i].СписокНоменклатуры.Количество() / 1000 ) + 1; //приблизительно... 
	 T = 0; T2 = t1 * N; // 2-3 сек
	 Для каждого стр1 из таблКонтр цикл
		ОбработкаПрерыванияПользователя();
		j=j+1; //Состояние
				
		Контр = справочники.Контрагенты.НайтиПоКоду(стр1.КонтрагентКод);
		Состояние(строка(j)+"/"+строка(N)+" >> осталось около "+строка( Цел(T2/60) )+" мин. "+строка(Цел(T2%60))+" сек. Текущий клиент: "+строка(стр1.КонтрагентКод)+" "+строка(Контр));
		таблНач1 = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контр, СписокНоменклатурыИДаты[i].СписокНоменклатуры, ЛОЖЬ, Неопределено,  ДатаСрезаЦен);
		
		//добавляем строки в общую табл
		 флПредоплаты = (Контр.ОсновнойДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001") ); // предоплата
		 
		для каждого стрНач1 из таблНач1 цикл
		 ОбработкаПрерыванияПользователя();
			стрНач = таблНач.Добавить();
			ЗаполнитьЗначенияСвойств(стрНач, стрНач1);
			стрНач.КонтрагентКод = стр1.КонтрагентКод;
			стрНач.НоменклатураКод = стрНач1.Код;
			стрНач.ДатаНач = Дата00; //ДатаСрезаЦен+1;
			стрНач.ДатаКон = СписокНоменклатурыИДаты[i].Дата1;
			
			Если флПредоплаты тогда
				стрНач.МинимальнаяЦена = стрНач1.ЦенаСоСкидкойПредоплаты;
			КонецЕсли;
		КонецЦикла;	
		
	в1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	T = (в1 - в0)/1000;  T2 =T *( N/j - 1);
	КонецЦикла;
	
	сообщить(строка(ТекущаяДата())+" получены цены для "+строка( таблКонтр.Количество() )+" клиентов на дату "+формат(ДатаСрезаЦен,"ДЛФ=D"));
	КОНЕЦЦИКЛА;

   КонецЕсли;
   
   //4) ---------- склиеваем все таблицы в 1 запросе-----------------------------------
   Если таблПродажИОстатки = неопределено тогда
	   Предупреждение("Нет товаров в выбранном интервале!", 60);
	   ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	   Возврат;
   КонецЕсли;	   
	Состояние("  >> Идет заполнение ВСЕХ цен и расчет прибыли..." );
	Запрос = новый Запрос;
 	Запрос.Параметры.Вставить("таблПродажИОстатки", таблПродажИОстатки);
	Запрос.Параметры.Вставить("таблНач", таблНач);
	//Запрос.Параметры.Вставить("таблКон", таблКон);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	таблПиО.КонтрагентКод,
	               |	таблПиО.НоменклатураКод,
	               |	таблПиО.КоличествоНач,
	               |	таблПиО.КоличествоКон,
	               |	таблПиО.КоличествоПриход,
	               |	таблПиО.КоличествоРасход,
	               |	таблПиО.КоличествоПродано,
	               |	таблПиО.СуммаПродано,
	               |	таблПиО.ЦенаПродажи,
				   
				   |	таблПиО.ДатаНач,
				   |	таблПиО.ДатаКон
					  
	               |ПОМЕСТИТЬ ВТ_таблПродажИОстатки
	               |ИЗ
	               |	&таблПродажИОстатки КАК таблПиО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	т0.КонтрагентКод,
	               |	т0.НоменклатураКод,
	               |	т0.МинимальнаяЦена КАК ЦенаНач,
			   	   |	т0.ДатаНач,
				   |	т0.ДатаКон,

	               |	т0.Приоритет
	               |ПОМЕСТИТЬ ВТ_таблНач
	               |ИЗ
	               |	&таблНач КАК т0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ  РАЗЛИЧНЫЕ
	               |	т.НоменклатураКод КАК НоменклатураКод,
	               |	т.КонтрагентКод КАК КонтрагентКод,
	               |	т.КоличествоНач КАК КоличествоНач,
	               |	т.КоличествоПриход КАК КоличествоПриход,
	               |	т.КоличествоРасход КАК КоличествоРасход,
	               |	т.КоличествоКон КАК КоличествоКон,
	               |	т.КоличествоПродано КАК КоличествоПродано,
	               |	т.СуммаПродано КАК СуммаПродано,
				   
				   |	т.ДатаНач,
				   |	т.ДатаКон,
				   
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(т.КоличествоПродано, 0) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫРАЗИТЬ(т.СуммаПродано / т.КоличествоПродано КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК ЦенаПродажи,
	               |	ЕСТЬNULL(т0.ЦенаНач, 0) КАК ЦенаНач,
	               |	ЕСТЬNULL(т.СуммаПродано, 0) - ЕСТЬNULL(т0.ЦенаНач, 0) * ЕСТЬNULL(т.КоличествоПродано, 0) КАК СуммаПрибыли,
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ИЗ
	               |	ВТ_таблПродажИОстатки КАК т
				   
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ВТ_таблНач.КонтрагентКод КАК КонтрагентКод,
	               |			ВТ_таблНач.НоменклатураКод КАК НоменклатураКод,
	               |			ВТ_таблНач.ЦенаНач КАК ЦенаНач,
	               |			ВТ_таблНач.Приоритет КАК Приоритет,
				   
				   |			ВТ_таблНач.ДатаНач КАК ДатаНач,
	               |			ВТ_таблНач.ДатаКон КАК ДатаКон
	            
				   
	               |		ИЗ
	               |			ВТ_таблНач КАК ВТ_таблНач) КАК т0
	               |		ПО т.КонтрагентКод = т0.КонтрагентКод
	               |			И т.НоменклатураКод = т0.НоменклатураКод
				    |			И т.ДатаНач = т0.ДатаНач
				    |			И т.ДатаКон = т0.ДатаКон
				 
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО т.КонтрагентКод = Контрагенты.Код
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	               |		ПО т.НоменклатураКод = Номенклатура.Код
				   
	                |//Флажок1 ГДЕ  ЕстьNull(т.СуммаПродано,0) > выбор когда ЕСТЬNULL(т.КоличествоПродано,0)<0 
					|//Флажок1 									тогда -ЕСТЬNULL(т.КоличествоПродано,0)*ЕСТЬNULL(т0.ЦенаНач, 0)
					|//Флажок1 									иначе ЕСТЬNULL(т.КоличествоПродано,0)*ЕСТЬNULL(т0.ЦенаНач, 0) Конец
				   
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(КонтрагентКод),
	               |	МАКСИМУМ(КоличествоНач),
	               |	МАКСИМУМ(КоличествоПриход),
	               |	МАКСИМУМ(КоличествоРасход),
	               |	МАКСИМУМ(КоличествоКон),
	               |	СУММА(КоличествоПродано),
	               |	СУММА(СуммаПродано),
	               |	ВЫБОР
	               |		КОГДА СУММА(ЕСТЬNULL(т.КоличествоПродано, 0)) = 0
	               |			ТОГДА 0
	               |		ИНАЧЕ ВЫРАЗИТЬ(СУММА(т.СуммаПродано) / СУММА(т.КоличествоПродано) КАК ЧИСЛО(15, 2))
	               |	КОНЕЦ КАК ЦенаПродажи,
	               |	МАКСИМУМ(ЦенаНач),
	               |	СУММА(СуммаПрибыли),
	               |	МАКСИМУМ(Номенклатура)
				   
				   |	, МИНИМУМ(т.ДатаНач)
				   |	, МАКСИМУМ(т.ДатаКон)
				   
	               |ПО
	               |	ОБЩИЕ,
	               |	НоменклатураКод";
	Если Флажок1 тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст, "//Флажок1","");
	КонецЕсли;
	 результат = Запрос.Выполнить();
	 
//------------------Вывод результатов----------------------------------------	 
	выборкаИтог = результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	выборкаИтог.Следующий();
	
	Макет = ЭтотОбъект.ПолучитьМакет("Макет");
 	ОбластьМакетаИ = Макет.ПолучитьОбласть("СтрокаИтого");
	ЗаполнитьЗначенияСвойств(ОбластьМакетаИ.Параметры, выборкаИтог);
	СуммаПрибылиИтог = выборкаИтог.СуммаПрибыли;
	ОбластьМакетаИ.Параметры.ПроцентПрибыли = формат(100*СуммаПрибылиИтог / выборкаИтог.СуммаПродано,"ЧДЦ=1");
	
	 выборкаТов = выборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	 
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	
 	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ДатаНач = формат(ДатаНач,"ДЛФ=D");
	ОбластьМакета.Параметры.ДатаКон = формат(ДатаКон,"ДЛФ=D");
	ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьМакета);
	
	ОбластьМакетаТ = Макет.ПолучитьОбласть("СтрокаТовар");
	ОбластьМакетаК = Макет.ПолучитьОбласть("СтрокаКлиент");
	
     БПроцИтого=0; 
	 Пока выборкаТов.Следующий() цикл
		 ЗаполнитьЗначенияСвойств(ОбластьМакетаТ.Параметры, выборкаТов);
		 ОбластьМакетаТ.Параметры.ПроцентПрибыли = формат( 100*выборкаТов.СуммаПрибыли / выборкаТов.СуммаПродано,"ЧДЦ=1");
		 
 // +++++++++++++++++ средний остаток за период: [ДатаНач,ДатаКон]    Дельта = КоличествоКон - КоличествоНач - КоличествоПродано  +++++++++++
		 попытка 
			 ЧислоДней = Цел(НачалоДня(выборкаТов.ДатаКон)-выборкаТов.ДатаНач)/86400;
		 исключение
			 ЧислоДней = 30;
			 сообщить(строка(выборкаТов.Номенклатура.Код)+") период: "+строка(выборкаТов.ДатаНач)+" - "+строка(выборкаТов.ДатаКон)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание );
		 КонецПопытки;	 
		 Кмес = 365 /(1 + ЧислоДней );
ОстатокСр = ПолучитьСреднийОстатокПоДням(выборкаТов.Номенклатура, выборкаТов.ДатаНач, выборкаТов.ДатаКон); 
     	// ОстатокСр = (выборкаТов.КоличествоКон + выборкаТов.КоличествоНач)/2; 
		 //1) Коэффициент оборачиваемости
   		 КобМес = выборкаТов.КоличествоПродано / ?(ОстатокСр=0, выборкаТов.КоличествоПродано, ОстатокСр);  
		 Коб1 = Окр( КобМес * Кмес, 2);
	   	 ОбластьМакетаТ.Параметры.Коб = Коб1;
		 ОбластьМакетаТ.Область(1,13).Расшифровка = "К.об = (Кол-во продано / Ср.Остаток) / 365 х Число дней
		 											|"+строка(Коб1)+" = ("+строка(выборкаТов.КоличествоПродано)+"шт. / "+формат(ОстатокСр,"ЧДЦ=1")+"шт.) /365 х "+формат(365/Кмес,"ЧДЦ=0");
	 
		 //2) Банковский % в рублях от средней себестоимости х средний остаток - если больше ничего не продастся
		 Если Коб1 < Коб тогда
СебестоимостьСр = ПолучитьСреднююСебестоимость(выборкаТов.Номенклатура, выборкаТов.ДатаНач, выборкаТов.ДатаКон); 
			//СебестоимостьСр = выборкаТов.ЦенаНач / (1 + 0.40); // 40% наценка!
		 	БПроцентМес = ОстатокСр * СебестоимостьСр * (БПроцент/100) / Кмес;
		    Расшифровка = "Банк % (в руб.) = Ср.Остаток х Ср.Себестоимость х (Банк%/100) / 365 х Число дней
		  											 |"+Формат(БПроцентМес,"ЧДЦ=2")+"р. = "+формат(ОстатокСр,"ЧДЦ=1")+"шт. х "+формат(СебестоимостьСр,"ЧДЦ=2")
											 +"р. х ("+формат(БПроцент,"ЧДЦ=1")+"%/100) /365 х "+формат(365/Кмес,"ЧДЦ=0");
		    ОбластьМакетаТ.Область(1,14).Расшифровка = Расшифровка;
	     											 
		 Иначе											 
		 	ОбластьМакетаТ.Область(1,14).Расшифровка = "0 р.";
		 	БПроцентМес = 0;
		 КонецЕсли;
	   	 ОбластьМакетаТ.Параметры.БПроц = Окр(БПроцентМес, 2);
		 
		 //3) Прибыль - БПроцент
		 ОбластьМакетаТ.Параметры.СуммаПрибылиБПроц = выборкаТов.СуммаПрибыли - Окр(БПроцентМес, 2);
		 
		 БПроцИтого = БПроцИтого + Окр(БПроцентМес, 2); 
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		  ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьМакетаТ);
	  
		 ЭлементыФормы.ПолеТабличногоДокумента.НачатьГруппуСтрок();
		 выборкаКлиент = выборкаТов.Выбрать();
		 
		 Пока выборкаКлиент.Следующий() цикл
		 ЗаполнитьЗначенияСвойств(ОбластьМакетаК.Параметры, выборкаКлиент);
		 ОбластьМакетаК.Параметры.ПроцентПрибыли = формат(100*выборкаКлиент.СуммаПрибыли / выборкаКлиент.СуммаПродано,"ЧДЦ=1");
		 ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьМакетаК);
	 	 КонецЦикла;
	 
	     ЭлементыФормы.ПолеТабличногоДокумента.ЗакончитьГруппуСтрок();
	 КонецЦикла;	

 	ОбластьМакетаИ.Параметры.БПроц = БПроцИтого;
	ОбластьМакетаИ.Параметры.СуммаПрибылиБПроц = СуммаПрибылиИтог - БПроцИтого;

	 ЭлементыФормы.ПолеТабличногоДокумента.Вывести(ОбластьМакетаИ);
	 
    сообщить(строка(ТекущаяДата())+" обработка завершена ===========================");
	Состояние(" " );
	неПересчитыватьКлиентов = Истина; // для [v] не учитывать цены<ЦеныНач
	
КонецПроцедуры


функция ПолучитьСреднийОстатокПоДням(Тов, Дата0, Дата1)
	рез = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
	               |	ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК Кол0,
	               |	ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК Кол1
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНач,	&ДатаКон, День,
	               |			ДвиженияИГраницыПериода,
	               |			Номенклатура = &Номенклатура
				   |И Склад.ЗапретитьИспользование=ЛОЖЬ
	   		   |) КАК ТоварыНаСкладахОстаткиИОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	Запрос.УстановитьПараметр("ДатаНач", Дата0 );
	Запрос.УстановитьПараметр("ДатаКон", Дата1 );
	Запрос.УстановитьПараметр("Номенклатура", Тов );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Дата = Дата0; Кол1=0; колДней=0;
	Пока Выборка.Следующий() Цикл
		колДней = Цел( (Выборка.Период - Дата) / 86400 );
		Если рез=0 тогда
		   рез = Выборка.Кол0 * 1;
		Иначе
			рез = рез + Кол1 * колДней;
		КонецЕсли;	
	//	сообщить(строка(Выборка.Период)+"  "+ строка(Кол1)+"шт. х "+строка(колДней)+" дн. = "+строка(Кол1 * колДней)+"р.");
		Кол1  = Выборка.Кол1;  //на конец дня...
		Дата = Выборка.Период;
	КонецЦикла;
    	
	числоДнейВПериоде = 1 + Цел( (Дата1 - Дата0)/86400 );
	рез = Окр(рез / числоДнейВПериоде, 2);
	
	возврат рез;
КонецФункции

функция ПолучитьСреднююСебестоимость(Тов, Дата0, Дата1)
	рез = 0;               //Кол>>Стоимость, ТоварыНаСкладах >> ПартииТоваровНаСкладах
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстаткиИОбороты.Период КАК Период,
	               |	ВЫРАЗИТЬ(ТоварыНаСкладахОстаткиИОбороты.СтоимостьНачальныйОстаток / 
				   |		выбор когда ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток=0 тогда 1 
			   	   |			  иначе ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток Конец КАК ЧИСЛО(15, 2)) КАК Кол0,
	               |	ВЫРАЗИТЬ(ТоварыНаСкладахОстаткиИОбороты.СтоимостьКонечныйОстаток / 
				   |		выбор когда ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток=0 тогда 1 
			   	   |			  иначе ТоварыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток Конец КАК ЧИСЛО(15, 2)) КАК Кол1
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладах.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода,
				   |   Номенклатура = &Номенклатура
				   	|И Склад.ЗапретитьИспользование=ЛОЖЬ
					| ) КАК ТоварыНаСкладахОстаткиИОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	Запрос.УстановитьПараметр("ДатаНач", Дата0 );
	Запрос.УстановитьПараметр("ДатаКон", Дата1 );
	Запрос.УстановитьПараметр("Номенклатура", Тов );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Дата = Дата0; Кол1=0; колДней=0;
	Пока Выборка.Следующий() Цикл
		колДней = Цел( (Выборка.Период - Дата) / 86400 );
		Если рез=0 тогда
		   рез = Выборка.Кол0 * 1;
		Иначе
		   рез = рез + Кол1 * колДней;
		КонецЕсли;
	//	сообщить(строка(Выборка.Период)+"  "+ строка(Кол1)+"р. х "+строка(колДней)+" дн. = "+строка(Кол1 * колДней)+"р.");
			
		Кол1  = Выборка.Кол1;  //на конец дня...
		Дата = Выборка.Период;
	КонецЦикла;
	
	числоДнейВПериоде = 1 + Цел( (Дата1 - Дата0)/86400 );
	рез = Окр(рез / числоДнейВПериоде, 2);
	
	возврат рез;
КонецФункции


//19.07.2017
Процедура Кнопка1Нажатие(Элемент)
	
	СписокКодов = "";
	спис = новый СписокЗначений;
	Если ВвестиСтроку(СписокКодов,"Скопируйте список кодов") тогда
		СписокНоменклатуры.Очистить();
		разделитель = "¶"; //перенос строки!
		ВвестиСтроку(разделитель,"Введите разделитель");
		
		i=найти(СписокКодов,разделитель); L=стрДлина(СписокКодов);
		пока i>0 цикл
			код1 = лев( СписокКодов, i-1);
			СписокКодов = прав(СписокКодов, L-i);
			тов1 = справочники.Номенклатура.НайтиПоКоду( код1 );
			Если тов1=неопределено тогда
				сообщить("не найден товар по коду: "+код1, СтатусСообщения.Внимание);
			иначе	
				СписокНоменклатуры.Добавить( тов1 );
			КонецЕсли;	
		i=найти(СписокКодов,разделитель); L=стрДлина(СписокКодов);
		КонецЦикла;	
	КонецЕсли;
	Предупреждение("Загружен список из "+строка(СписокНоменклатуры.Количество())+" товаров", 10);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//пред.месяц
	ДатаНач = НачалоМесяца( НачалоМесяца( ТекущаяДата() ) - 1);
	ДатаКон = НачалоМесяца( ТекущаяДата() ) - 1;
	Флажок1 = истина;
	неПересчитыватьКлиентов = ложь;
	
	БПроцент = 12.5;
	Коб = 1;
КонецПроцедуры



Процедура ДатаКонПриИзменении(Элемент)
	неПересчитыватьКлиентов = ложь;
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(ДатаНач, ?(ДатаКон='0001-01-01', ДатаКон, КонецДня(ДатаКон)));
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНач = НастройкаПериода.ПолучитьДатуНачала();
		ДатаКон = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	неПересчитыватьКлиентов = ложь;

КонецПроцедуры


Процедура СписокНоменклатурыПриИзменении(Элемент)
	неПересчитыватьКлиентов = ложь;
КонецПроцедуры

СмирновА = справочники.Пользователи.НайтиПоКоду("Смирнов А");