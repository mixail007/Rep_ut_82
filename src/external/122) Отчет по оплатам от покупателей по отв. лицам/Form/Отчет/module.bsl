
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОтчетИнициализация();

КонецПроцедуры

Процедура ПриЗакрытии()

	СохранитьЗначение("НастройкаВнешниеОбработкиВнешняяОбработка1Отчет_2ca9805e-5957-4dd6-856e-559dcaf3f376", ПостроительОтчетаОтчет.ПолучитьНастройки());

КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Форма = ВнешняяОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_НАСТРОЙКА
КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ОтчетВывести();

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();

	ПостроительОтчетаОтчет.Параметры.Вставить("ОплатаОтПокупателяБезНал", Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	ПостроительОтчетаОтчет.Параметры.Вставить("ОплатаОтПокупателяНал", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ПостроительОтчетаОтчет.Параметры.Вставить("КонДата", КонецДня(КонДата));
	ПостроительОтчетаОтчет.Параметры.Вставить("НачДата", НачалоДня(НачДата));
    ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет по поступлениям от покупателей за "+ ПредставлениеПериода(НачалоДня(НачДата),КонецДня(КонДата),"ФП=Истина");
	ПостроительОтчетаОтчет.Выполнить();
	
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ОтчетИнициализация()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	ПостроительОтчетаОтчет.Текст =
	"ВЫБРАТЬ  
	|ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Период,
	|ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственныйМенеджер,
	|ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Владелец КАК Контрагент,
	|ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|ВзаиморасчетыСКонтрагентами.Регистратор,
	|ВзаиморасчетыСКонтрагентами.СуммаОплаты КАК СуммаОплаты
	|   ИЗ
	|(ВЫБРАТЬ
	|ДоговорКонтрагента,
	|СуммаВзаиморасчетовРасход СуммаОплаты,
	|Регистратор
	|ИЗ
	|РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(&НачДата, &КонДата, Регистратор, ) 
	|ГДЕ (Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
	|И Регистратор.ВидОперации=&ОплатаОтПокупателяБезНал )ИЛИ
	|(Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер 
	|И Регистратор.ВидОперации=&ОплатаОтПокупателяНал)) ВзаиморасчетыСКонтрагентами 
	|{ГДЕ
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ОтветственноеЛицо.*,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.Владелец.*,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|{УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ОтветственныйМенеджер.*,
	|	Контрагент.*}
	|ИТОГИ
	|	СУММА(СуммаОплаты)
	|ПО
	|	ОБЩИЕ,
	|	Период,
	|	ОтветственныйМенеджер
	|{ИТОГИ ПО
	|	Период,
	|	ОтветственныйМенеджер.*,Контрагент}";
	ПостроительОтчетаОтчет.ЗаполнитьНастройки();
	ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	
	Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиВнешняяОбработка1Отчет_2ca9805e-5957-4dd6-856e-559dcaf3f376");
	Если Настройка <> Неопределено Тогда
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;
    СтруктураПредставлениеПолей = Новый Структура("
	|ОтветственныйМенеджер,
	|Регистратор,
	|ДоговорКонтрагента,
	|СуммаОплаты", 
	"Лицо отв. за договор ",
	"Документ платежа",
	"Договор контрагента",
	"Сумма");
	ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчетаОтчет);

	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ИНИЦИАЛИЗАЦИЯ
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачДата, ?(КонДата='0001-01-01', КонДата, КонецДня(КонДата)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачДата = НастройкаПериода.ПолучитьДатуНачала();
		КонДата = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры
