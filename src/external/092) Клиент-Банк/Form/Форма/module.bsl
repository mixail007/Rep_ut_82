////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ЗНАЧЕНИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура ЗаполнитьСписокКлиентовБанка()
	
	СписокКБ = Новый СписокЗначений;
	СписокКБ.Добавить("DiasoftCLIENT 4x4 for Windows Диасофт");
	СписокКБ.Добавить("Клиент-Банк РФК");
	СписокКБ.Добавить("LanVisit DOS 4.90 Ланит");
	СписокКБ.Добавить("ДБО BS-Client v.3 BSS");
	СписокКБ.Добавить("Система клиент-банк TIVAL");
	СписокКБ.Добавить("Клиент банка InterBank v.5.1 R-Style Software Lab");
	СписокКБ.Добавить("""Электронный клиент"" АКБ Автобанк");
	СписокКБ.Добавить("""Клиент-ТЕЛЕБАНК"" АОЗТ Степ Ап");
	СписокКБ.Добавить("ИНИСТ Банк-Клиент ЗАО ИНИСТ");
	СписокКБ.Добавить("Клиент-банк МИБ");
	СписокКБ.Добавить("Система Клиент-Банк ""BClient""");
	СписокКБ.Добавить("Система электронных расчетов QuickPay ЗАО АО Кворум");
	СписокКБ.Добавить("Комплекс обмена платежными документами Курьер. АОЗТ АстраСофт");
	СписокКБ.Добавить("WinClient фирмы МПИ-Банк");
	СписокКБ.Добавить("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
	СписокКБ.Добавить("Система ""MailBank"" фирмы ""Системные технологии"" Минск");
	СписокКБ.Добавить("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
	СписокКБ.Добавить("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
	СписокКБ.Добавить("Система  ""iBank 2"" ООО ""БИФИТ""");
	СписокКБ.Добавить("""Yugo-Vostok Online"" ОАО БАНК ""ЮГО-ВОСТОК""");
	СписокКБ.Добавить("Банк-клиент АКБ ""Лефко-Банк""");
	СписокКБ.Добавить("Система Банк-Клиент АКБ ""София""");
	СписокКБ.Добавить("Клиент-банк ""BARS"" фирмы ""Оникс Капитал""");
	
	ЭлементыФормы.КлиентБанка.СписокВыбора=СписокКБ;
	
КонецПроцедуры

Процедура ЗаполнитьСписокКодировок()
	
	СписокКодировок=Новый СписокЗначений;
	СписокКодировок.Добавить("Windows");
	СписокКодировок.Добавить("DOS");
	
	ЭлементыФормы.Кодировка.СписокВыбора=СписокКодировок;
	
КонецПроцедуры

Процедура ЗаполнитьВидыДокументов()
	
	Макет = ПолучитьМакет("ВидыДокументов");
	ОбластьДокументов = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		
		Если ВидДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Документы.Найти(ВидДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		  
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        =Истина;
		Стр.Документ       =ВидДокумента;
		Стр.Название       =Название;
		Стр.Корреспондент  =Корреспондент;
		Стр.ДокументКратко =Кратко;
		
	КонецЦикла;
	
КонецПроцедуры

// ЗаполнениеБанковскихСчетов()
//
// Описание:
//  Процедура заполняет таблицу значений счетами выбранной организации
Процедура ЗаполнитьБанковскиеСчета()
	
	ТаблицаСчетов.Очистить();
	
	Если НЕ Организация.Пустая() Тогда
		СпрБанковскиеСчета = Справочники.БанковскиеСчета.Выбрать(,Организация);
		Пока СпрБанковскиеСчета.Следующий() Цикл
			Если СокрЛП(СпрБанковскиеСчета.НомерСчета) = "" Тогда
				Продолжить;
			КонецЕсли;
			Стр = ТаблицаСчетов.Добавить();
			Стр.Пометка = Истина;
			Стр.Счет = СпрБанковскиеСчета.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеПлатежныхОпераций()
	
	мПлатежныеОперации = Новый Соответствие;
	
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику, "Платежное поручение");
	//мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет, "Платежное поручение");
	//мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами, "Платежное поручение");
	мПлатежныеОперации.Вставить(Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами, "Платежное поручение");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИмяОбработки = Метаданные().Имя;
	
	Организация =ВосстановитьЗначение(ИмяОбработки + "Организация");
	
	Если (Организация = Неопределено) ИЛИ Организация.Пустая() Тогда
		ВыборкаОрганизаций = Справочники.Организации.Выбрать();
		Если ВыборкаОрганизаций.Следующий() Тогда
			Организация = ВыборкаОрганизаций.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	мОрганизация = Организация.ПолучитьОбъект();
	ЗаполнитьБанковскиеСчета();
	
	НачПериода = РабочаяДата;
	КонПериода = РабочаяДата;
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	
	ПрмКлиентБанка = ВосстановитьЗначение(ИмяОбработки + "КлиентБанка");
	Если ПрмКлиентБанка = Неопределено Тогда
		КлиентБанка =ЭлементыФормы.КлиентБанка.СписокВыбора.Получить(0);
		
	Иначе
		КлиентБанка = ПрмКлиентБанка;
		
	КонецЕсли;
	
	ПрмФайлВыгрузки = ВосстановитьЗначение(ИмяОбработки+"ФайлВыгрузки");
	Если ПрмФайлВыгрузки = Неопределено Тогда
		ФайлВыгрузки = КаталогПрограммы() + "1c_to_kl.txt";
		
	Иначе
		ФайлВыгрузки = ПрмФайлВыгрузки;
		
	КонецЕсли;
	
	ПрмФайлЗагрузки = ВосстановитьЗначение(ИмяОбработки+"ФайлЗагрузки");
	Если ПрмФайлЗагрузки = Неопределено Тогда
		ФайлЗагрузки = КаталогПрограммы() + "kl_to_1c.txt";
		
	Иначе
		ФайлЗагрузки = ПрмФайлЗагрузки;
		
	КонецЕсли;
	
	ПрмКодировка = ВосстановитьЗначение(ИмяОбработки+"КодировкаФайла");
	Если ПрмКодировка = Неопределено Тогда
		Кодировка =ЭлементыФормы.Кодировка.СписокВыбора.Получить(0);
		
	Иначе
		Кодировка = ПрмКодировка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ИмяОбработки = ЭтотОбъект.Метаданные().Имя;
	СохранитьЗначение(ИмяОбработки + "Организация",    Организация);
	СохранитьЗначение(ИмяОбработки + "КлиентБанка",    КлиентБанка);
	СохранитьЗначение(ИмяОбработки + "ФайлВыгрузки",   ФайлВыгрузки);
	СохранитьЗначение(ИмяОбработки + "ФайлЗагрузки",   ФайлЗагрузки);
	СохранитьЗначение(ИмяОбработки + "КодировкаФайла", Кодировка);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Если Не Организация.Пустая() Тогда
		ЗаполнитьБанковскиеСчета();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Событие возникающее при изменении реквизита: Организация
// 
Процедура ОрганизацияПриИзменении(Элемент)
	
	мОрганизация = Организация.ПолучитьОбъект();
	ЗаполнитьБанковскиеСчета();
	
КонецПроцедуры

Процедура ФайлВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогФыбораФайла.Заголовок                   = "Выберите файл для выгрузки данных из клиента банка";
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.Расширение                  = "txt";
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогФыбораФайла.Заголовок                   = "Выберите файл для загрузки данных из клиента банка";
	ДиалогФыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогФыбораФайла.Расширение                  = "txt";
	ДиалогФыбораФайла.ИндексФильтра               = 0;
	ДиалогФыбораФайла.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

// Открывает для просмотра текстовой документ
//  
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение("Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Элемент.Имя,Элемент.Значение);
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//  
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение("Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Элемент.Имя,Элемент.Значение);
	
КонецПроцедуры

// ВыбПериодНажатие(Элемент)
//
// Описание:
//  Вызывает стандартную обработку выбор переиода
Процедура ВыбПериодНажатие(Элемент)	
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	
КонецПроцедуры

Процедура КоманднаяПанельСчетовУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаСчета из ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСчетовСнятьФлажки(Кнопка)
	
	Для каждого СтрокаСчета из ТаблицаСчетов Цикл
		СтрокаСчета.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументовСнятьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ТаблицаДокументов Цикл
		СтрокаДокумента.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортОбновить(Кнопка)
	
	ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт);
	
	//+++ 25.06.2015 - сортировка
	если ДокументыНаЭкспорт.Колонки.Найти("СуммаЧисло")=неопределено тогда
		ДокументыНаЭкспорт.Колонки.Добавить("СуммаЧисло");
	КонецЕсли;
	для каждого стр1 из ДокументыНаЭкспорт цикл
		стр1.СуммаЧисло = число(стр1.Сумма);
	КонецЦикла;
	ДокументыНаЭкспорт.Сортировать("Операция УБЫВ, СуммаЧисло");
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортВыгрузить(Кнопка)
	
	Выгрузить(ДокументыНаЭкспорт);
	
	Если ВыводитьОтчет Тогда
		ПолеОтчета = Новый ТабличныйДокумент;
		Печать(ПолеОтчета, ДокументыНаЭкспорт, "Выгружать");
		ПолеОтчета.Показать("Отчет о выгрузке платежных документов " + ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаОбновить(Кнопка)
	
	ЗаполнитьДокументыНаИмпорт(ДокументыКИмпорту);
	
	ЭлементыФормы.КоманднаяПанельДокументыДляИмпорта.Кнопки.ИнформацияПоСчетам.Доступность = 
	(Импорт_РассчетныеСчета.Количество() > 0);
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаЗагрузить(Кнопка)
	
	Если ДокументыКИмпорту.Количество() = 0 Тогда
		ЗаполнитьДокументыНаИмпорт(ДокументыКИмпорту);
	
		ЭлементыФормы.КоманднаяПанельДокументыДляИмпорта.Кнопки.ИнформацияПоСчетам.Доступность = 
		(Импорт_РассчетныеСчета.Количество() > 0);
		
	КонецЕсли;
	
	Загрузить(ДокументыКИмпорту);
	
	//+++ 25.06.2015 - сортировка
	если ДокументыКИмпорту.Колонки.Найти("СуммаЧисло")=неопределено тогда
		ДокументыКИмпорту.Колонки.Добавить("СуммаЧисло");
	КонецЕсли;
	для каждого стр1 из ДокументыКИмпорту цикл
		стр1.СуммаЧисло = число(стр1.Сумма);
	КонецЦикла;
	ДокументыКИмпорту.Сортировать("ТипОперации УБЫВ, СуммаЧисло");
	
		
	Если ВыводитьОтчет Тогда
		ПолеОтчета = Новый ТабличныйДокумент;
		Печать(ПолеОтчета, ДокументыКИмпорту, "Загрузить");
		ПолеОтчета.Показать("Отчет о загрузке платежных документов " + ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Колонка.Имя = "Выгружать" Тогда
		ВыбраннаяСтрока.Выгружать = НЕ (ВыбраннаяСтрока.Выгружать);
		
	ИначеЕсли Колонка.Имя = "ОписаниеОшибок" Тогда
		Сообщить(ВыбраннаяСтрока.ОписаниеОшибок);
	
	ИначеЕсли Колонка.Имя = "НазначениеПлатежа" Тогда
		Сообщить(ВыбраннаяСтрока.НазначениеПлатежа);
		
	Иначе
		ОбъектДокумента = ВыбраннаяСтрока.Документ.ПолучитьОбъект();
		ОбъектДокумента.ПолучитьФорму().Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Колонка.Имя = "Загрузить" Тогда
		ВыбраннаяСтрока.Загрузить = НЕ (ВыбраннаяСтрока.Загрузить);
		
	ИначеЕсли Колонка.Имя = "ОписаниеОшибок" Тогда
		Сообщить(ВыбраннаяСтрока.ОписаниеОшибок);
	
	ИначеЕсли Колонка.Имя = "НазначениеПлатежа" Тогда
		Сообщить(ВыбраннаяСтрока.НазначениеПлатежа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыНаЭкспортПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность > 0 Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыКИмпортуПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Неопределено Тогда
		Если ДанныеСтроки.Готовность > 0 Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаИнформацияПоСчетам(Кнопка)
	
	Импорт_РассчетныеСчета.ВыбратьСтроку();
	
КонецПроцедуры

Процедура ФайлЗагрузкиПриИзменении(Элемент)
	
	ЭлементыФормы.КоманднаяПанельДокументыДляИмпорта.Кнопки.ИнформацияПоСчетам.Доступность = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортСнятьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ДокументыНаЭкспорт Цикл
		СтрокаДокумента.Выгружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаУстановитьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загрузить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыДляИмпортаСнятьФлажки(Кнопка)
	
	Для каждого СтрокаДокумента из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загрузить = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЭлементыФормы.ПанельОбработки.ТекущаяСтраница = ЭлементыФормы.ПанельОбработки.Страницы.Экспорт Тогда
		
		ОбщаяСуммаЭкспорт = 0;
		СуммаКЭкспорту = 0;
		
		Если ДокументыНаЭкспорт.Количество() > 0 Тогда
			
			Для каждого СтрЭкспорта Из ДокументыНаЭкспорт Цикл
				
				ОбщаяСуммаЭкспорт = ОбщаяСуммаЭкспорт + Число(СтрЭкспорта.Сумма);
				
				Если СтрЭкспорта.Выгружать Тогда
					
					СуммаКЭкспорту = СуммаКЭкспорту + Число(СтрЭкспорта.Сумма); 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ОбщаяСуммаЭкспорт > 0 Тогда
				
				ЭлементыФормы.ИнформацияЭкспорта.Заголовок = "Общая сумма документов: " + Строка(ОбщаяСуммаЭкспорт) +
				"; Сумма к экспорту: " + Строка(СуммаКЭкспорту);
				
			Иначе
				
				ЭлементыФормы.ИнформацияЭкспорта.Заголовок = "";
				
			КонецЕсли; 
			
		Иначе
			
			ЭлементыФормы.ИнформацияЭкспорта.Заголовок = "";
			
		КонецЕсли; 
		
	Иначе
		
		ОбщаяСуммаИмпорт = 0;
		СуммаКИмпорту = 0;
		
		Если ДокументыКИмпорту.Количество() > 0 Тогда
			
			Для каждого СтрИмпорта Из ДокументыКИмпорту Цикл
				
				ОбщаяСуммаИмпорт = ОбщаяСуммаИмпорт + СтрИмпорта.СуммаДокумента;
				
				Если СтрИмпорта.Загрузить Тогда
					
					СуммаКИмпорту = СуммаКИмпорту + СтрИмпорта.СуммаДокумента; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ОбщаяСуммаИмпорт > 0 Тогда
				
				ЭлементыФормы.ИнформацияИмпорта.Заголовок = "Общая сумма документов: " + Строка(ОбщаяСуммаИмпорт) +
				"; Сумма к импорту: " + Строка(СуммаКИмпорту);
				
			Иначе
				
				ЭлементыФормы.ИнформацияИмпорта.Заголовок = "";
				
			КонецЕсли; 
			
		Иначе
			
			ЭлементыФормы.ИнформацияИмпорта.Заголовок = "";
			
		КонецЕсли; 
		
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортРеестр(Кнопка)
	Макет = ПолучитьМакет("Реестр");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСправа = 5;
	ТабДокумент.ПолеСлева = 5;
	Шапка = Макет.ПолучитьОбласть("Шапка1");
	ТабДокумент.Вывести(Шапка);
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(Шапка);
	итого = Макет.ПолучитьОбласть("итого");
	Кол = 0;
	Сум = 0;
	Т = Новый Массив;
	Для каждого стр из ДокументыНаЭкспорт Цикл
		Если стр.Выгружать Тогда
			НовСтр = Макет.ПолучитьОбласть("Строка");
			Новстр.Параметры.дата = Формат(стр.Дата,"ДФ=dd.MM.yyyy");
			Новстр.Параметры.Номер = стр.Номер;
			Новстр.Параметры.Плательщик = стр.НомерСчетаОрганизации + " " + стр.Документ.Организация.Наименование + "(" + стр.Документ.СчетОрганизации.Банк + " " + стр.Документ.СчетОрганизации.Банк.Город + ")";
			Новстр.Параметры.ИННПл = стр.Документ.Организация.ИНН;
			Новстр.Параметры.Получатель = Строка(стр.Документ.СчетКонтрагента.НомерСчета) + " " + стр.Документ.Контрагент.НаименованиеПолное; 
			Новстр.Параметры.ИННПол = стр.Документ.Контрагент.ИНН;
			Новстр.Параметры.Банк = стр.Документ.СчетКонтрагента.Банк.Код + "/" + стр.Документ.СчетКонтрагента.Банк.КоррСчет + " " + стр.Документ.СчетКонтрагента.Банк.Наименование + " " + стр.Документ.СчетКонтрагента.Банк.Город;
			Новстр.Параметры.очр = стр.Документ.ОчередностьПлатежа;
			Новстр.Параметры.Сумма = Формат(стр.Документ.СуммаДокумента,"ЧДЦ=2");
			Новстр.Параметры.Назначение = ?(стр.НазначениеПлатежа1 = "",стр.НазначениеПлатежа1,стр.НазначениеПлатежа1+ Символы.ПС) + ?(стр.НазначениеПлатежа2 = "",стр.НазначениеПлатежа2,стр.НазначениеПлатежа2+ Символы.ПС) + стр.НазначениеПлатежа3;
			Новстр.Параметры.Поля = "102:"+Строка(стр.Документ.Контрагент.ИНН) + " 103:" + Строка(стр.Документ.Контрагент.КПП);
			т.добавить(НовСтр);
			т.Добавить(Итого);
			Если ТабДокумент.ПроверитьВывод(Т) Тогда
				ТабДокумент.Вывести(НовСтр);
				//Закончено = Истина;
			Иначе
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				//Закончено = Ложь;
				ТабДокумент.Вывести(НовСтр);
			КонецЕсли;
			Т.Очистить();
						
			Кол = Кол +1;
			сум = сум +стр.Документ.СуммаДокумента;
		КонецЕсли;
	КонецЦикла;
	
	
	
	Итого.Параметры.кол = кол;
	Итого.Параметры.Сум = Формат(сум,"ЧДЦ=2");
	ТабДокумент.Вывести(Итого);
	
	
	
	ТабДокумент.Показать();

КонецПроцедуры

Процедура КоманднаяПанельДокументыНаЭкспортВыгрузитьВалютные(Кнопка)
	ВыгрузитьВалютные(ДокументыНаЭкспорт);
	
	Если ВыводитьОтчет Тогда
		ПолеОтчета = Новый ТабличныйДокумент;
		Печать(ПолеОтчета, ДокументыНаЭкспорт, "Выгружать");
		ПолеОтчета.Показать("Отчет о выгрузке платежных документов " + ТекущаяДата());
	КонецЕсли;
КонецПроцедуры

// Подготовка формы к работе

ЗаполнитьВидыДокументов();
ЗаполнитьСписокКлиентовБанка();
ЗаполнитьСписокКодировок();
ЗаполнитьНаименованиеПлатежныхОпераций();
// Формируем таблицу экспорта
СформироватьСтруктуруТаблицыЭкспорта(ДокументыНаЭкспорт, ЭлементыФормы.ДокументыНаЭкспорт);
СформироватьСтруктуруТаблицыИмпорта(ДокументыКИмпорту, ЭлементыФормы.ДокументыКИмпорту);
Нераспределенка = Истина;
ТолькоВходящие = Истина;
ВсеСНДС18 = Истина;