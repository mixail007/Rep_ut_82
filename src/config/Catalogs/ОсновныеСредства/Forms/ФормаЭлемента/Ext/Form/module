////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Документы и даты изменения состояний ОС
// Документы - регистраторы событий. Даты документов - даты реальных событий
// и в общем случае могут отличаться от дат регистраторов

Перем ДокументПринятияКУчетуУУ;
Перем ДокументПринятияКУчетуУУДата;

Перем ДокументВводаВЭксплуатациюУУ;
Перем ДокументВводаВЭксплуатациюУУДата;

Перем ДокументСнятоСУчетаУУ;
Перем ДокументСнятоСУчетаУУДата;

Перем ДокументПринятияКУчетуБУ;
Перем ДокументПринятияКУчетуБУДата;

Перем ДокументВводаВЭксплуатациюБУ;
Перем ДокументВводаВЭксплуатациюБУДата;

Перем ДокументСнятоСУчетаБУ;
Перем ДокументСнятоСУчетаБУДата;

Перем ТекОрганизация;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Для работы с документами по учету имущества и транспорта
Перем ДокументПринятияКУчетуИмущДекл;
Перем ДокументПринятияКУчетуИмущДеклНалоговыйОрган;

Перем ДокументПринятияКУчетуТранспортДекл;
Перем ДокументПринятияКУчетуТранспортДеклНалоговыйОрган;

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписания()

	//// Данные для заполнения закладки Управленческий учет
	ВалютаУУ = Константы.ВалютаУправленческогоУчета.Получить();

	ЭлементыФормы.УпрВалюта.Заголовок  = ВалютаУУ;
	ЭлементыФормы.УпрВалюта1.Заголовок = ВалютаУУ;
	ЭлементыФормы.УпрВалюта2.Заголовок = ВалютаУУ;

	ВыборкаЗаписей = РегистрыНакопления.СтоимостьОС.Остатки(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.ТекущаяСтоимостьУУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Стоимость,0);
	ЭлементыФормы.ТекАмортизазияУУ.Значение   = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Амортизация,0);

	ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.ПервоначальнаяСтоимостьУУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ПервоначальнаяСтоимость,0);
	ЭлементыФормы.СпособАмортизацииУУ.Значение       = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособНачисленияАмортизации,0);
	ЭлементыФормы.ПараметрВыработкиУУ.Значение       = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ПараметрВыработки,0);
	ЭлементыФормы.ЕдиницаПараметраВыработкиУУ.Заголовок = ?(ЗначениеНеЗаполнено(ЭлементыФормы.ПараметрВыработкиУУ.Значение),"",ЭлементыФормы.ПараметрВыработкиУУ.Значение.ЕдиницаИзмерения);
	//
	ВыборкаЗаписей = РегистрыСведений.СоставОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.ВСоставе.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ВСоставе,0);

	ВыборкаЗаписей = РегистрыСведений.МестонахождениеОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.МОЛУУ.Значение           = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.МОЛ,0);
	ЭлементыФормы.ПодразделениеУУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Местонахождение,0);

	ВыборкаЗаписей = РегистрыСведений.НоменклатураОсновныхСредств.Получить(Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.Номенклатура.Значение   = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Номенклатура,0);
	ЭлементыФормы.Характеристика.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Характеристика,0);

	ВыборкаЗаписей = РегистрыСведений.ПараметрыАмортизацииОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.СрокИспользованияУУ.Значение         = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СрокПолезногоИспользования,0);
	ЭлементыФормы.ОбъемРаботУУ.Значение                = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ОбъемПродукцииРабот,0);
	ЭлементыФормы.ПроцентГодовойАмортизацииУУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.КоэффициентАмортизации,0);
	ЭлементыФормы.КоэфУскоренияУУ.Значение             = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.КоэффициентУскорения,0);

	//ВыборкаЗаписей = РегистрыСведений.ГрафикиАмортизацииОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	//ЭлементыФормы.ГодовойГрафикУУ.Значение             = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ГрафикАмортизации,0);

	ВыборкаЗаписей = РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	ЭлементыФормы.НаправленияАмортизацииУУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособыОтраженияРасходовПоАмортизации,0);

	//// Данные для заполнения закладки Бухгалтерский учет
	ВалютаБУ = Константы.ВалютаРегламентированногоУчета.Получить();
	ЭлементыФормы.РеглВалюта.Заголовок  = ВалютаБУ;
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаБУ;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаБУ;

	//ВыборкаЗаписей = РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка,"Организация",ТекОрганизация));
	//ЭлементыФормы.ТекущаяСтоимостьБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Стоимость,0);
	//ЭлементыФормы.ТекАмортизазияБУ.Значение   = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Амортизация,0);
	//
	//ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));

	//ТекОрганизация = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,0);

	//ЭлементыФормы.Организация.Значение               = ТекОрганизация;
	  ЭлементыФормы.ИнвентарныйНомер.Значение =Код;
	//ЭлементыФормы.ИнвентарныйНомер.Значение          = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
	//ЭлементыФормы.СпособПоступленияБУ.Значение       = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособПоступления,0);
	//ЭлементыФормы.СпособАмортизацииБУ.Значение       = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособНачисленияАмортизации,0);
	//ЭлементыФормы.ПервоначальнаяСтоимостьБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ПервоначальнаяСтоимость,0);
	//ЭлементыФормы.ПараметрВыработкиБУ.Значение       = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ПараметрВыработки,0);
	//ЭлементыФормы.ЕдиницаПараметраВыработкиБУ.Заголовок = ?(ЗначениеНеЗаполнено(ЭлементыФормы.ПараметрВыработкиБУ.Значение),"",ЭлементыФормы.ПараметрВыработкиБУ.Значение.ЕдиницаИзмерения);

	//ВыборкаЗаписей = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка,"Организация",ТекОрганизация));
	//ЭлементыФормы.МОЛБУ.Значение           = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.МОЛ,0);
	//ЭлементыФормы.ПодразделениеБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Местонахождение,0);
	//
	//ВыборкаЗаписей = РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка,"Организация",ТекОрганизация));
	//ЭлементыФормы.СрокИспользованияБУ.Значение         = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СрокПолезногоИспользования,0);
	//ЭлементыФормы.ОбъемРаботБУ.Значение                = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ОбъемПродукцииРабот,0);
	//ЭлементыФормы.ПроцентГодовойАмортизацииБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.КоэффициентАмортизации,0);
	//ЭлементыФормы.КоэфУскоренияБУ.Значение             = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.КоэффициентУскорения,0);

	//ВыборкаЗаписей = РегистрыСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	//ЭлементыФормы.ГодовойГрафикБУ.Значение             = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ГрафикАмортизации,0);

	//ВыборкаЗаписей = РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка,"Организация",ТекОрганизация));
	//ЭлементыФормы.НаправленияАмортизацииБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособыОтраженияРасходовПоАмортизации,0);

	//ВыборкаЗаписей = РегистрыСведений.СчетаБухгалтерскогоУчетаОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка,"Организация",ТекОрганизация));
	//ЭлементыФормы.СчетУчетаСтоимостиБУ.Значение   = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетУчета,0);
	//ЭлементыФормы.СчетУчетаАмортизацииБУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетНачисленияАмортизации,0);
	//
	//// Данные для заполнения закладки Налоговый учет
	//ВалютаНУ = Константы.ВалютаРегламентированногоУчета.Получить();
	//ЭтоУСН   = ПрименениеУСН(ТекОрганизация, ДатаСведений);
	//
	//Если НЕ ЭтоУСН тогда
	//
	//	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаНУ;
	//	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаНУ;
	//	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаНУ;

	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	*
	//	|ИЗ
	//	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство=&ОсновноеСредство и Организация=&Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр( "ДатаСведений",     ДатаСведений);
	//	Запрос.УстановитьПараметр( "Организация",      ТекОрганизация);
	//	Запрос.УстановитьПараметр( "ОсновноеСредство", Ссылка);
	//	
	//	Результат = Запрос.Выполнить();
	//	ВыборкаЗаписей = Результат.Выгрузить();
	//	
	//	ЭлементыФормы.ПринятоКУчетуНУ.Значение                            = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].Период,                     0);
	//	ЭлементыФормы.СпособАмортизацииНУ.Значение                        = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].МетодНачисленияАмортизации, 0);
	//	ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Значение                  = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].ПервоначальнаяСтоимостьНУ,  0);
	//	ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовНУ.Значение = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].ПорядокВключенияСтоимостиВСоставРасходов,  0);

	//	ВыборкаЗаписей = РегистрыСведений.ПараметрыАмортизацииОСНалоговыйУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство,Организация",Ссылка,ТекОрганизация));
	//	ЭлементыФормы.СрокИспользованияНУ.Значение         = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СрокПолезногоИспользования,0);

	//	ВыборкаЗаписей = РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство,Организация",Ссылка,ТекОрганизация));
	//	ЭлементыФормы.НаправленияАмортизацииНУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпособыОтраженияРасходовПоАмортизации,0);

	//	ВыборкаЗаписей = РегистрыСведений.СчетаНалоговогоУчетаОС.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство,Организация",Ссылка,ТекОрганизация));
	//	ЭлементыФормы.СчетУчетаСтоимостиНУ.Значение   = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетУчета,0);
	//	ЭлементыФормы.СчетУчетаАмортизацииНУ.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетНачисленияАмортизации,0);

	//	СчетУчетаНУ = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетУчета,0);
	//	СчетНачисленияАмортизацииНУ = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СчетНачисленияАмортизации,0);

	//	ВыборкаЗаписей = РегистрыНакопления.СтоимостьОСНалоговыйУчет.Остатки( ДатаСведений, Новый Структура("ОсновноеСредство", Ссылка, "Организация", ТекОрганизация));
	//	ЭлементыФормы.ТекущаяСтоимостьНУ.Значение = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].Стоимость,   0);
	//	ЭлементыФормы.ТекАмортизазияНУ.Значение   = ?(ВыборкаЗаписей.Количество() > 0, ВыборкаЗаписей[0].Амортизация, 0);
	//	
	//	ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение;
	//	ЭлементыФормы.СнятоСУчетаНУ.Значение          = ЭлементыФормы.СнятоСУчетаБУ.Значение;

	//	ВыборкаЗаписей = РегистрыСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство,Организация",Ссылка,ТекОрганизация));
	//	ЭлементыФормы.СпецКоэффициентНУ.Значение  = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.СпециальныйКоэффициент,0);
	//Иначе
	//	// Данные для заполнения закладки Налоговый учет (УСН)
	//	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаНУ;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	*
	//	|ИЗ
	//	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(&ДатаСведений, ОсновноеСредство=&ОсновноеСредство и Организация=&Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних";
	//	
	//	Запрос.УстановитьПараметр("ДатаСведений",ДатаСведений);
	//	Запрос.УстановитьПараметр("Организация",ТекОрганизация);
	//	Запрос.УстановитьПараметр("ОсновноеСредство",Ссылка);
	//	
	//	Результат = Запрос.Выполнить();
	//	ВыборкаЗаписей = Результат.Выгрузить();
	//	
	//	ЭлементыФормы.ПринятоКУчетуУСН.Значение           = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].Период,0);
	//	ЭлементыФормы.ПервоначальнаяСтоимостьУСН.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].ПервоначальнаяСтоимостьУСН,0);
	//	ЭлементыФормы.СрокИспользованияУСН.Значение 	  = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].СрокПолезногоИспользования,0);
	//	ЭлементыФормы.ДатаПриобретения.Значение			  = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].ДатаПриобретения,0);
	//	ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Значение = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей[0].ПорядокВключенияСтоимостиВСоставРасходовУСН, Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ПустаяСсылка());
	//	
	//	ЭлементыФормы.ВведеноВЭксплуатациюУСН.Значение = ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение;
	//	ЭлементыФормы.СнятоСУчетаУСН.Значение          = ЭлементыФормы.СнятоСУчетаБУ.Значение;
	//КонецЕсли;
	//
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();

КонецПроцедуры // ЗаполнитьПоляУчета()

Процедура ЗаполнитьТекстПроДокументы() Экспорт
	
	//ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
	//ЕстьНалоговый = ВыборкаЗаписей.ПервоначальнаяСтоимостьНУ>0;

	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуУУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуУУ.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУУ.Заголовок = Строка(ДокументПринятияКУчетуУУ);
		ЭлементыФормы.ПринятоКУчетуУУ.Значение = ДокументПринятияКУчетуУУДата;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуБУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуУСН.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		ЭлементыФормы.ПринятоКУчетуБУ.Значение = ДокументПринятияКУчетуБУДата;
		
		//Если ЕстьНалоговый Тогда
		//
		//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		//	ЭлементыФормы.ПринятоКУчетуНУ.Значение = ДокументПринятияКУчетуБУДата;
		//Иначе
		//	
		//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = "Ввести документ принятия к учету";
		//	ЭлементыФормы.ПринятоКУчетуНУ.Значение = 0;
		//
		//КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		ЭлементыФормы.ПринятоКУчетуУСН.Значение = ДокументПринятияКУчетуБУДата;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ДокументСнятоСУчетаУУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаУУ.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУУ.Заголовок = Строка(ДокументСнятоСУчетаУУ);
		ЭлементыФормы.СнятоСУчетаУУ.Значение = ДокументСнятоСУчетаУУДата;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ДокументСнятоСУчетаБУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаУСН.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		ЭлементыФормы.СнятоСУчетаБУ.Значение = ДокументСнятоСУчетаБУДата;
		
		//Если ЕстьНалоговый Тогда
		//
		//	ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		//	ЭлементыФормы.СнятоСУчетаНУ.Значение = ДокументСнятоСУчетаБУДата;
		//Иначе
		//	
		//	ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = "Ввести документ списания";
		//	ЭлементыФормы.СнятоСУчетаНУ.Значение = 0;
		//
		//КонецЕсли;
		
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		ЭлементыФормы.СнятоСУчетаУСН.Значение = ДокументСнятоСУчетаБУДата;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ДокументВводаВЭксплуатациюУУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюУУ.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУУ.Заголовок = Строка(ДокументВводаВЭксплуатациюУУ);
		ЭлементыФормы.ВведеноВЭксплуатациюУУ.Значение = ДокументВводаВЭксплуатациюУУДата;
	КонецЕсли;
	Если ЗначениеНеЗаполнено(ДокументВводаВЭксплуатациюБУ) Тогда
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюБУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУСН.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюУСН.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюБУ.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
		ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение = ДокументВводаВЭксплуатациюБУДата;
		
		//Если ЕстьНалоговый Тогда
		//
		//	ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
		//	ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = ДокументВводаВЭксплуатациюБУДата;
		//Иначе
		//	
		//	ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		//	ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = 0;
		//
		//КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУСН.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
		ЭлементыФормы.ВведеноВЭксплуатациюУСН.Значение = ДокументВводаВЭксплуатациюБУДата;
	КонецЕсли;
	//Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуИмущДекл) Тогда
	//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуДеклИмущ.Заголовок = "Ввести документ учета";
	//	ЭлементыФормы.РегистрацияВОрганахФНСИмущество.Значение = Неопределено;
	//Иначе
	//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуДеклИмущ.Заголовок = Строка(ДокументПринятияКУчетуИмущДекл);
	//	ЭлементыФормы.РегистрацияВОрганахФНСИмущество.Значение = ДокументПринятияКУчетуИмущДеклНалоговыйОрган;
	//КонецЕсли;

	//Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуТранспортДекл) Тогда
	//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуДеклТранспорт.Заголовок = "Ввести документ учета";
	//	ЭлементыФормы.РегистрацияВОрганахФНСТранспорт.Значение = Неопределено;
	//Иначе
	//	ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуДеклТранспорт.Заголовок = Строка(ДокументПринятияКУчетуТранспортДекл);
	//	ЭлементыФормы.РегистрацияВОрганахФНСТранспорт.Значение = ДокументПринятияКУчетуТранспортДеклНалоговыйОрган;
	//КонецЕсли;

КонецПроцедуры

Процедура ПолучитьДокументыСостоянияОС()
	
	СтруктПараметров   			 	 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,Истина);
	ДокументПринятияКУчетуУУ 	 	 = СтруктПараметров.Регистратор;
	ДокументПринятияКУчетуУУДата 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Истина);
	ДокументВводаВЭксплуатациюУУ 	 = СтруктПараметров.Регистратор;
	ДокументВводаВЭксплуатациюУУДата = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,Истина);
	ДокументСнятоСУчетаУУ 		 	 = СтруктПараметров.Регистратор;
	ДокументСнятоСУчетаУУДата	 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,Ложь,Организация);
	ДокументПринятияКУчетуБУ 	 	 = СтруктПараметров.Регистратор;
	ДокументПринятияКУчетуБУДата 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Ложь,Организация);
	ДокументВводаВЭксплуатациюБУ 	 = СтруктПараметров.Регистратор;
	ДокументВводаВЭксплуатациюБУДата = СтруктПараметров.Дата;
	
	СтруктПараметров   				 = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,Ложь,Организация);
	ДокументСнятоСУчетаБУ 			 = СтруктПараметров.Регистратор;
	ДокументСнятоСУчетаБУДата		 = СтруктПараметров.Дата;

	//СтруктПараметров				   = ПолучитьДокументУчетаДляДекларирования("Имущество");
	//ДокументПринятияКУчетуИмущДекл     = СтруктПараметров.Регистратор;
	//ДокументПринятияКУчетуИмущДеклНалоговыйОрган = СтруктПараметров.НалоговыйОрган;

	//СтруктПараметров				   = ПолучитьДокументУчетаДляДекларирования("Транспорт");
	//ДокументПринятияКУчетуТранспортДекл     = СтруктПараметров.Регистратор;
	//ДокументПринятияКУчетуТранспортДеклНалоговыйОрган = СтруктПараметров.НалоговыйОрган;

КонецПроцедуры

Процедура УстановитьВидимость()
	
	//ЭтоУСН  = ПрименениеУСН(ТекОрганизация, ДатаСведений);
	//Если ЭтоУСН Тогда
	//	ЭтоРасходыУСН = НЕ ПрименениеУСНДоходы(ТекОрганизация, ДатаСведений);
	//Иначе
	//	ЭтоРасходыУСН = Ложь
	//КонецЕсли;
	
	// Установка видимости страниц панелей в зависимости от вида учета
	//ЭлементыФормы.Панель.Страницы.Страница3.Видимость = НЕ ЭтоУСН;
	//ЭлементыФормы.Панель.Страницы.Страница4.Видимость = ЭтоРасходыУСН;
	//
	//Если ЭтоРасходыУСН Тогда
	//	ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (ДатаСведений < Дата("20060101"));
	//	ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (ДатаСведений < Дата("20060101"));
	//КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ДействияФормыДокументыКомплектацииОС(Кнопка)

	ФормаСпискаДокументов = Документы.КомплектацияОС.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	ФормаСпискаДокументов.Открыть();

КонецПроцедуры // ДействияФормыДокументыКомплектацииОС()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ПодлежитАмортизации = Истина;
	КонецЕсли;
	ДатаСведений = РабочаяДата;
	ЗаполнитьОписания();
	
	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

Процедура ПриЗаписи(Отказ)
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры

Процедура ПослеЗаписи()
	УстановитьКнопкиПечати();
КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
Процедура ПриИзмененииДанных()
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

Процедура КодПоОКОФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.АмортизационнаяГруппа.Значение) тогда
		ЭлементыФормы.АмортизационнаяГруппа.Значение = ВыбранноеЗначение.АмортизационнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаПросмотраПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ТекущаяДата();
	КонецЕсли;
	
	ЗаполнитьОписания();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ГиперссылкаДокументПринятияКУчетуУУНажатие(Элемент)
	
	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуУУ) Тогда
		ДокументПринятияКУчетуУУ = Документы["ПринятиеКУчетуОС"].СоздатьДокумент();
		ДокументПринятияКУчетуУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументПринятияКУчетуУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументСнятияСУчетаУУНажатие(Элемент)
	
	Если ЗначениеНеЗаполнено(ДокументСнятоСУчетаУУ) Тогда
		ДокументСнятоСУчетаУУ = Документы["СписаниеОС"].СоздатьДокумент();
		ДокументСнятоСУчетаУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументСнятоСУчетаУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументВводаВЭксплуатациюУУНажатие(Элемент)
	Если ЗначениеНеЗаполнено(ДокументВводаВЭксплуатациюУУ) Тогда
		ДокументВводаВЭксплуатациюУУ = Документы["ИзменениеСостоянияОС"].СоздатьДокумент();
		ДокументВводаВЭксплуатациюУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументВводаВЭксплуатациюУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументПринятияКУчетуБУНажатие(Элемент)
	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуБУ) Тогда
		ДокументПринятияКУчетуБУ = Документы["ПринятиеКУчетуОС"].СоздатьДокумент();
		ДокументПринятияКУчетуБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументПринятияКУчетуБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
КонецПроцедуры

Процедура ГиперссылкаДокументСнятияСУчетаБУНажатие(Элемент)
	Если ЗначениеНеЗаполнено(ДокументСнятоСУчетаБУ) Тогда
		ДокументСнятоСУчетаБУ = Документы["СписаниеОС"].СоздатьДокумент();
		ДокументСнятоСУчетаБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументСнятоСУчетаБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
КонецПроцедуры

Процедура ГиперссылкаДокументВводаВЭксплуатациюБУНажатие(Элемент)
	
	Если ЗначениеНеЗаполнено(ДокументВводаВЭксплуатациюБУ) Тогда
		ДокументВводаВЭксплуатациюБУ = Документы["ИзменениеСостоянияОС"].СоздатьДокумент();
		ДокументВводаВЭксплуатациюБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументВводаВЭксплуатациюБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// ГиперссылкаДокументПринятияКУчетуДеклИмущНажатие
//
Процедура ГиперссылкаДокументПринятияКУчетуДеклИмущНажатие(Элемент)
	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуИмущДекл) Тогда
		ДокументПринятияКУчетуИмущДекл = Документы["ИмуществоДляЦелейДекларирования"].СоздатьДокумент();
		ДокументПринятияКУчетуИмущДекл.Заполнить(Ссылка);
	КонецЕсли;

	ФормаДок = ДокументПринятияКУчетуИмущДекл.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект));

	Если ФормаДок.Открыта() Тогда
		СообщитьОбОшибке("Предыдущая операция по вводу/корректировки документа учета объекта имущества не завершена.");
		Возврат;
	КонецЕсли;

	ФормаДок.НачальноеЗначениеВыбора = Новый Структура("Организация", Организация);
	ФормаДок.ОткрытьМодально();
	ЗаполнитьОписания();
	//ПолучитьДокументыСостоянияОС();
	//ЗаполнитьТекстПроДокументы();
КонецПроцедуры // ГиперссылкаДокументПринятияКУчетуДеклИмущНажатие

// ГиперссылкаДокументПринятияКУчетуДеклТранспортНажатие
//
Процедура ГиперссылкаДокументПринятияКУчетуДеклТранспортНажатие(Элемент)

	Если ЗначениеНеЗаполнено(ДокументПринятияКУчетуТранспортДекл) Тогда
		ДокументПринятияКУчетуТранспортДекл = Документы["ТранспортДляЦелейДекларирования"].СоздатьДокумент();
		ДокументПринятияКУчетуТранспортДекл.Заполнить(Ссылка);
	КонецЕсли;
	ФормаДок = ДокументПринятияКУчетуТранспортДекл.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект));
	Если ФормаДок.Открыта() Тогда
		СообщитьОбОшибке("Предыдущая операция по вводу/корректировки документа учета объекта транспортных средств не завершена.");
		Возврат;
	КонецЕсли;

	ФормаДок.НачальноеЗначениеВыбора = Новый Структура("Организация", Организация);
	ФормаДок.ОткрытьМодально();
	ЗаполнитьОписания();

КонецПроцедуры // ГиперссылкаДокументПринятияКУчетуДеклТранспортНажатие

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СВЯЗАННЫЕ С УЧЕТОМ ОБЪЕКТОВ ОС В ЦЕЛЯХ ДЕКЛАРИРОВАНИЯ

// ПолучитьДокументУчетаДляДекларирования
// Функция определяет последний документ, по объекту
// Параметры:
//  Параметр       - строка, указывает какого типа необходимо вернуть документ, варианты Имущество, Транспорт, Земля
// Возвращаемое значение:
//  Регистратор, документ.
//
Функция ПолучитьДокументУчетаДляДекларирования(Параметр)
	//Если Параметр = "Имущество" Тогда
	//	Регистр = "УчетОСИмуществаДляЦелейДекларирования";
	//ИначеЕсли Параметр = "Транспорт" Тогда
	//	Регистр = "УчетОСТранспортаДляЦелейДекларирования";
	//КонецЕсли;

	//Сведения = РегистрыСведений[Регистр].СрезПоследних(ДатаСведений, Новый Структура("ОсновноеСредство", Ссылка));
	//Если Сведения.Количество() > 0 Тогда
	//	Возврат Новый Структура("Регистратор, НалоговыйОрган", Сведения.Получить(0).Регистратор, Сведения.Получить(0).НалоговыйОрган);
	//Иначе
	//	Возврат Новый Структура("Регистратор, НалоговыйОрган", Неопределено, Неопределено);
	//КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

Процедура ДействияФормыДействие1(Кнопка)

	//ОС = Ссылка;
	//Если ЗначениеНеЗаполнено(ОС) Тогда
	//	ОС = Справочники.ОсновныеСредства.ПустаяСсылка();
	//КонецЕсли;
	//
	//ФормаРегистра = РегистрыНакопления.ОплатыОСДляУСН.ПолучитьФормуСписка();
	//ФормаРегистра.Отбор.ОсновноеСредство.Использование = Истина;
	//ФормаРегистра.Отбор.ОсновноеСредство.Значение = ОС;
	//ФормаРегистра.Открыть();
	
КонецПроцедуры

