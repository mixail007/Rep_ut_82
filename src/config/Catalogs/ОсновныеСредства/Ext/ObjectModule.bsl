#Если Клиент Тогда
	
// сумма амортизации и остаточная стоимость ОС  непосредственно перед моментом передачи- списания
// амортизация за текущий месяц может начисляться самим документом передача ОС (в случае, если не было подготовки к передаче),
// поэтому получаем остатки на секунду раньше и добавляем к ним амортизацию из табличной части передачи ОС
// передача ОС спишет и остатки и амортизацию из регистров стоимость ОС в момент проведения,
// поэтому остатки на момент проведения передачи -списания нам ничем не помогут
Процедура ПолучитьСтоимостьИАмортизациюОС (НазваниеРегистраСтоимость,ДатаСписания,
										   ПервоначальнаяСтоимость,СуммаНачисленнойАмортизации)	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "
	|	ВЫБРАТЬ
	|	ВЫБОР КОГДА НЕ СтоимостьОСОстатки.СтоимостьОстаток ЕСТЬ NULL 
	|	ТОГДА СтоимостьОСОстатки.СтоимостьОстаток ИНАЧЕ 0 КОНЕЦ КАК Стоимость,
	|	ВЫБОР КОГДА НЕ СтоимостьОСОстатки.АмортизацияОстаток ЕСТЬ NULL 
	|	ТОГДА СтоимостьОСОстатки.АмортизацияОстаток ИНАЧЕ 0 КОНЕЦ КАК Амортизация,
	|	ВЫБОР КОГДА НЕ СтоимостьОСАмортизация.АмортизацияПриход ЕСТЬ NULL 
	|	ТОГДА СтоимостьОСАмортизация.АмортизацияПриход ИНАЧЕ 0 КОНЕЦ КАК АмортизацияЗаМесяц
	|ИЗ
	|	РегистрНакопления."+НазваниеРегистраСтоимость+".Остатки(&МоментОстатков, ОсновноеСредство = &ОС) КАК СтоимостьОСОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления."+НазваниеРегистраСтоимость+".Обороты(&МоментАмортизации) КАК СтоимостьОСАмортизация
	|		ПО СтоимостьОСОстатки.ОсновноеСредство = СтоимостьОСАмортизация.ОсновноеСредство
	|";
	
	Запрос.УстановитьПараметр( "МоментОстатков", ДатаСписания -1);
	Запрос.УстановитьПараметр( "МоментАмортизации", ДатаСписания);
	Запрос.УстановитьПараметр( "ОС",      Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ПервоначальнаяСтоимость     = РезультатЗапроса.Стоимость;  
		СуммаНачисленнойАмортизации = РезультатЗапроса.Амортизация + РезультатЗапроса.АмортизацияЗаМесяц;
		
	КонецЦикла;
			
КонецПроцедуры

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОС-6)
// Утверждена постановлением Госкомстата России от 21.01.2003 № 7
// Возвращаемое значение:
// Табличный документ - печатная форма инвентарной карточки ОС
Функция ПечатьОС6_2003(ДатаСведений,ПечатьПоДаннымУпрУчета = Истина) 
	
	Макет = ПолучитьМакет("ОС6_2003");
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ШапкаРазделов1и2  = Макет.ПолучитьОбласть("ШапкаРазделов1и2");
	ШапкаРаздела3     = Макет.ПолучитьОбласть("ШапкаРаздела3");
	СтрокиРаздела3    = Макет.ПолучитьОбласть("СтрокиРаздела3");
	ШапкаРаздела4     = Макет.ПолучитьОбласть("ШапкаРаздела4");
	СтрокаРаздела4    = Макет.ПолучитьОбласть("СтрокаРаздела4");
	ПодвалСтраницы1   = Макет.ПолучитьОбласть("ПодвалСтраницы1");
	ШапкаРазделов5и6  = Макет.ПолучитьОбласть("ШапкаРазделов5и6");
	СтрокаРазделов5и6 = Макет.ПолучитьОбласть("СтрокаРазделов5и6");
	ШапкаРаздела7_1   = Макет.ПолучитьОбласть("ШапкаРаздела7_1");
	ШапкаРаздела7_2   = Макет.ПолучитьОбласть("ШапкаРаздела7_2");
	ПодвалСтраницы2   = Макет.ПолучитьОбласть("ПодвалСтраницы2");
	
	ТабДок = Новый ТабличныйДокумент();
	
	НазваниеРегистраСтоимость = "СтоимостьОС";
	НазваниеРегистраСобытия   = "СобытияОС";
	НазваниеСуммыЗатрат		  = "СуммаЗатрат";	
	Организация = Неопределено;

	Если ПечатьПоДаннымУпрУчета тогда
		кВидуУчета   = "управленческому";
		cВидаУчета   = "управленческого";
		ВалютаПечати = Константы.ВалютаУправленческогоУчета.Получить().Наименование;
		ВидУчета 	 = "Упр" ;
	Иначе
		кВидуУчета   = "бухгалтерскому";
		cВидаУчета   = "бухгалтерского";
		ВалютаПечати = Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
		НазваниеРегистраСтоимость = НазваниеРегистраСтоимость + "БухгалтерскийУчет";
		НазваниеРегистраСобытия   = НазваниеРегистраСобытия   + "Организаций";
		НазваниеСуммыЗатрат		  = НазваниеСуммыЗатрат +"БУ";
		ВидУчета 	 = "Бух";
		ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ДатаСведений,Новый Структура("ОсновноеСредство",Ссылка));
		Организация    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.Организация,Справочники.Организации.ПустаяСсылка());
	КонецЕсли;	
	
	СведенияОбОС = ПолучитьСведенияОбОС(Ссылка,ДатаСведений,Организация,ВидУчета); 
	Если СведенияОбОС <> Неопределено тогда
		 Если Не ПечатьПоДаннымУпрУчета и ЗначениеНеЗаполнено(СведенияОбОС.ОсновноеСредство) Тогда
			Сообщить("На момент печати основное средство не принималось к учету в указанной организации."+Символы.ПС+
			"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
			Возврат Неопределено;
		 КонецЕсли;
    	Шапка.Параметры.Заполнить(СведенияОбОС);
		Шапка.Параметры.ДатаДок  = Лев(Строка(ДатаСведений),10);
		Шапка.Параметры.НомерДок = Шапка.Параметры.ИнвентарныйНомер;
		Шапка.Параметры.НаименованиеОС = ? (ЗначениеНеЗаполнено(СведенияОбОС.НаименованиеПолное),
										    СведенияОбОС.Наименование,СведенияОбОС.НаименованиеПолное);
	Иначе
		Сообщить("На момент печати основное средство не принималось к учету."+Символы.ПС+
		"Нельзя сформировать инвентарную карточку объекта!",СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	// получим даты  и документы изменения состояний ос
	СтруктПараметров = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,Организация);
	ДокументПринятия = СтруктПараметров["ИмяДок"];
	ДатаПринятия     = СтруктПараметров["Дата"];
	
	СтруктПараметров   = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,Организация);
	ДатаВвода          = СтруктПараметров["Дата"];
	ДокументВвода      = СтруктПараметров["ИмяДок"];
	ДокументВводаНомер = СтруктПараметров["НомерДок"];
	
	СтруктПараметров   = ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,ПечатьПоДаннымУпрУчета,Организация);
	ДатаСписания       = СтруктПараметров["Дата"];;
	ДокументСписания   = СтруктПараметров["ИмяДок"];;
	
	//	получим дату и документ последней модернизации
	Если ПечатьПоДаннымУпрУчета тогда
		ВыборкаЗаписей = РегистрыСведений.СобытияОС.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	Иначе
		ВыборкаЗаписей = РегистрыСведений.СобытияОСОрганизаций.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	КонецЕсли;
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВыборкаЗаписей.Событие.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация Тогда
			ДатаПоследнейМодернизации     = Лев(Строка(ВыборкаЗаписей.Период),10);
			ДокументПоследнейМодернизации = ВыборкаЗаписей.НазваниеДокумента;
		КонецЕсли;
	КонецЦикла;
	
	Шапка.Параметры.ДатаВвода    = ДатаПринятия;	
	Шапка.Параметры.ДатаСписания = ДатаСписания;
	Шапка.Параметры.кВидуУчета 	 = кВидуУчета;
	Шапка.Параметры.cВидаУчета 	 = cВидаУчета;
	
	ТабДок.Вывести(Шапка);
	
	ШапкаРазделов1и2.Параметры.кВидуУчета = кВидуУчета;
	
	// Сведения об объекте ОС на дату передачи	
	Если Не ЗначениеНеЗаполнено(ДокументСписания) Тогда
		
		ШапкаРазделов1и2.Параметры.ДатаВыпуска        		  = ДатаВыпуска;
		ШапкаРазделов1и2.Параметры.ДатаКапремонта     		  = ДатаПоследнейМодернизации;
		ШапкаРазделов1и2.Параметры.ДокументВвода		      = ДокументВвода; 
		ШапкаРазделов1и2.Параметры.ДокументВводаНомер		  = ДокументВводаНомер;
		ШапкаРазделов1и2.Параметры.ДокументВводаДата  		  = ДатаВвода;
		ШапкаРазделов1и2.Параметры.СрокПолезногоИспользования = СведенияОбОС.СрокПолезногоИспользования;
		
		Если ДокументСписания = "Передача ОС" Тогда 
			ШапкаРазделов1и2.Параметры.СрокЭксплуатации = Цел((ДатаСписания - ДатаВвода) / 2592000);
			
			ПервоначальнаяСтоимость     = 0;
			СуммаНачисленнойАмортизации = 0;	
			
			ПолучитьСтоимостьИАмортизациюОС(НазваниеРегистраСтоимость,ДатаСписания,ПервоначальнаяСтоимость,СуммаНачисленнойАмортизации);
			
			ОстаточнаяСтоимость = ПервоначальнаяСтоимость-СуммаНачисленнойАмортизации;
			ШапкаРазделов1и2.Параметры.СуммаНачисленнойАмортизации = СуммаНачисленнойАмортизации;
			ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость         = ОстаточнаяСтоимость;
		Иначе // списание
			
			ШапкаРазделов1и2.Параметры.СуммаНачисленнойАмортизации = "";
			ШапкаРазделов1и2.Параметры.ОстаточнаяСтоимость         = "";
		КонецЕсли;
	КонецЕсли;
	
	// Балансовая стоимость ОС на момент поступления
	ШапкаРазделов1и2.Параметры.ПервоначальнаяСтоимость = СведенияОбОС.ПервоначальнаяСтоимость;
	ШапкаРазделов1и2.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов1и2);
	
	ШапкаРаздела3.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела3);
	ТабДок.Вывести(СтрокиРаздела3);
	
	// Сведения о приемке, внутренних перемещениях и выбытии	
	ШапкаРаздела4.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРаздела4);
	
	Отбор  = Новый Структура( "ОсновноеСредство", Ссылка);

	ВыборкаЗаписей = РегистрыСведений.СобытияОС.Выбрать(,КонецДня(РабочаяДата),Новый Структура("ОсновноеСредство",Ссылка));
	Пока ВыборкаЗаписей.Следующий() Цикл
		ТекущаяОперация = ВыборкаЗаписей.Событие;
		
		Если (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.ПринятиеКУчету)
			 И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.ВнутреннееПеремещение)
			 И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.Списание) 
			 И (ТекущаяОперация.ВидСобытияОС <> Перечисления.ВидыСобытийОС.Передача) 
			 Тогда
			 Продолжить;
		КонецЕсли;
		
		СтрокаРаздела4.Параметры.ДатаНомерДокумента = ВыборкаЗаписей.НазваниеДокумента + " № "+ВыборкаЗаписей.НомерДокумента+" от "+Формат(ВыборкаЗаписей.Период,"ДФ=dd.MM.yyyy");
		СтрокаРаздела4.Параметры.ВидОперации        = ТекущаяОперация;
		СтрокаРаздела4.Параметры.ФИОМОЛДвижения     = "";
		СтрокаРаздела4.Параметры.Подразделение      = "";

		Если ПечатьПоДаннымУпрУчета тогда		
			ВыборкаЗаписейМОЛ = РегистрыСведений.МестонахождениеОС.СрезПоследних(ВыборкаЗаписей.Регистратор.Ссылка.Дата,Отбор);
		Иначе
			ВыборкаЗаписейМОЛ = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(ВыборкаЗаписей.Регистратор.Ссылка.Дата,Отбор);
		КонецЕсли;
		
		Если НЕ (ВыборкаЗаписейМОЛ = Неопределено) Тогда
			
			Если ВыборкаЗаписейМОЛ.Количество() > 0 Тогда;
				ВыборкаЗаписейМОЛ.Сортировать("Период Убыв");
				Для каждого СтрокаМОЛ Из ВыборкаЗаписейМОЛ Цикл
					
					Если Не ПечатьПоДаннымУпрУчета И  СтрокаМОЛ.Организация <> Организация Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаРаздела4.Параметры.ФИОМОЛДвижения = СтрокаМОЛ.МОЛ;
					СтрокаРаздела4.Параметры.Подразделение = СтрокаМОЛ .Местонахождение;
					Прервать;
					
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяОперация.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание 
			или ТекущаяОперация.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача Тогда
			Если ДокументСписания = "Передача ОС" Тогда 
				//Параметры выбытия уже определены в таблице СостояниеНаМоментПередачи
			Иначе
				ПервоначальнаяСтоимость     = 0;
				СуммаНачисленнойАмортизации = 0;	
				ПолучитьСтоимостьИАмортизациюОС(НазваниеРегистраСтоимость,ДатаСписания,ПервоначальнаяСтоимость,СуммаНачисленнойАмортизации);
				ОстаточнаяСтоимость = ПервоначальнаяСтоимость-СуммаНачисленнойАмортизации;
			КонецЕсли;
			СтрокаРаздела4.Параметры.ОстаточнаяСтоимость = ОстаточнаяСтоимость;
			
		КонецЕсли;
		ТабДок.Вывести(СтрокаРаздела4);
		
	КонецЦикла;	
	
	ТабДок.Вывести(ПодвалСтраницы1);
	
	// модернизация ос и ремонт
	ТаблицаМодернизаций = Новый ТаблицаЗначений;
	ТаблицаМодернизаций.Колонки.Добавить("ВидОперации");
	ТаблицаМодернизаций.Колонки.Добавить("Название");
	ТаблицаМодернизаций.Колонки.Добавить("Дата");
	ТаблицаМодернизаций.Колонки.Добавить("Номер");
	ТаблицаМодернизаций.Колонки.Добавить("Сумма");
	
	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("ВидОперации");
	ТаблицаРемонтов.Колонки.Добавить("Название");
	ТаблицаРемонтов.Колонки.Добавить("Дата");
	ТаблицаРемонтов.Колонки.Добавить("Номер");
	ТаблицаРемонтов.Колонки.Добавить("Сумма");
	
	ШапкаРазделов5и6.Параметры.Валюта = ВалютаПечати;
	ТабДок.Вывести(ШапкаРазделов5и6);
	
	СписокМодернизаций = Новый Массив;
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Достройка);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Реконструкция);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.Дооборудование);
	СписокМодернизаций.Добавить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	
	СписокРемонтов = Новый Массив;
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.СреднийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.ТекущийРемонт);
	СписокРемонтов.Добавить(Перечисления.ВидыСобытийОС.КапитальныйРемонт);

	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ОсновноеСредство",    Ссылка);
	Запрос.УстановитьПараметр("УсловиеМодернизаций", СписокМодернизаций);
	Запрос.УстановитьПараметр("УсловиеРемонтов",	 СписокРемонтов);
	Запрос.УстановитьПараметр("ВидОперацииОС",       Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеМодернизаций) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратМодернизаций,
	|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС В (&УсловиеРемонтов) 
	|		  ТОГДА ОперацииОС."+НазваниеСуммыЗатрат+" ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратРемонтов,
	|	ОперацииОС.Регистратор КАК Регистратор,
	|	ОперацииОС.Период КАК Период,
	|	ОперацииОС.Событие КАК Операция,
	|	ОперацииОС.НомерДокумента КАК НомерДокумента,
	|	ОперацииОС.НазваниеДокумента КАК НазваниеДокумента
	|ИЗ
	|	РегистрСведений."+НазваниеРегистраСобытия+" КАК ОперацииОС
	|
	|ГДЕ
	|	ОперацииОС.Событие.ВидСобытияОС <> &ВидОперацииОС И
	|	ОперацииОС.ОсновноеСредство = &ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииОС.Период,
	|	ОперацииОС.Регистратор,
	|	ОперацииОС.Событие,
	|	ОперацииОС.НомерДокумента,
	|	ОперацииОС.НазваниеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
	
	// все ремонты, модернизации и т.д. произведенные документом модернизация размещаем в 5 разделе
	// до тех пор, пока не доказано обратное 
	// все действия проведенные документом модернизация
	// могут влиять на первоначальную стоимость и таким образом должны отражаться в 5 разделе
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		СуммаМодернизаций = ?(ВыборкаРегистраторов.СуммаЗатратМодернизаций = NULL, 0, ВыборкаРегистраторов.СуммаЗатратМодернизаций);
		СуммаРемонтов = ?(ВыборкаРегистраторов.СуммаЗатратРемонтов = NULL, 0, ВыборкаРегистраторов.СуммаЗатратРемонтов);
		
		Если СуммаМодернизаций+СуммаРемонтов<> 0 Тогда		
			СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
			СтрокаТаблицыМодернизаций.ВидОперации = ВыборкаРегистраторов.Операция;
			СтрокаТаблицыМодернизаций.Название    = ВыборкаРегистраторов.НазваниеДокумента;
			СтрокаТаблицыМодернизаций.Номер       = ВыборкаРегистраторов.НомерДокумента;
			СтрокаТаблицыМодернизаций.Дата        = ВыборкаРегистраторов.Период;
			СтрокаТаблицыМодернизаций.Сумма       = СуммаМодернизаций + СуммаРемонтов;
		КонецЕсли;
		//Если СуммаРемонтов <> 0 Тогда		
		//	СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
		//	СтрокаТаблицыРемонтов.ВидОперации = ВыборкаРегистраторов.Операция;
		//	СтрокаТаблицыРемонтов.Название    = ВыборкаРегистраторов.НазваниеДокумента;
		//	СтрокаТаблицыРемонтов.Номер       = ВыборкаРегистраторов.НомерДокумента;
		//	СтрокаТаблицыРемонтов.Дата        = ВыборкаРегистраторов.Период;
		//	СтрокаТаблицыРемонтов.Сумма       = СуммаРемонтов;
		//КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = Макс(ТаблицаМодернизаций.Количество(),ТаблицаРемонтов.Количество()); 
	Для СчетСтрок = 1 По КоличествоСтрок Цикл
		Если СчетСтрок <= ТаблицаМодернизаций.Количество() Тогда
			СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок-1);
			СтрокаРазделов5и6.Параметры.Модернизация          = СтрокаТаблицы.ВидОперации;
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = СтрокаТаблицы.Название;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = СтрокаТаблицы.Дата;
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = СтрокаТаблицы.Номер;
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = СтрокаТаблицы.Сумма; 
		Иначе
			СтрокаРазделов5и6.Параметры.Модернизация          = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизации       = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииДата   = "";
			СтрокаРазделов5и6.Параметры.ДокМодернизацииНомер  = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаМодернизацию = ""; 
		КонецЕсли;
		
		//Если СчетСтрок <= ТаблицаРемонтов.Количество() Тогда
		//	СтрокаТаблицы = ТаблицаРемонтов.Получить(СчетСтрок-1);
		//	СтрокаРазделов5и6.Параметры.Ремонт          = СтрокаТаблицы.ВидОперации;
		//	СтрокаРазделов5и6.Параметры.ДокРемонта      = СтрокаТаблицы.Название;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = СтрокаТаблицы.Дата;
		//	СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = СтрокаТаблицы.Номер;
		//	СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = СтрокаТаблицы.Сумма;
		//Иначе
			СтрокаРазделов5и6.Параметры.Ремонт          = "";
			СтрокаРазделов5и6.Параметры.ДокРемонта		= "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаДата  = "";
			СтрокаРазделов5и6.Параметры.ДокРемонтаНомер = "";
			СтрокаРазделов5и6.Параметры.ЗатратыНаРемонт = ""; 
		//КонецЕсли;
		
		ТабДок.Вывести(СтрокаРазделов5и6);		
	КонецЦикла;
	
	ТабДок.Вывести(ШапкаРаздела7_1);
	ТабДок.Вывести(ШапкаРаздела7_2);
	ТабДок.Вывести(ПодвалСтраницы2);
	
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСнизу = 0;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОС6_2003() 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ФормаЭлемента = Неопределено) Экспорт
     // { Лапенков
	Если ФормаЭлемента = Неопределено Тогда
		ДатаСведений  = РабочаяДата;
	Иначе
		ДатаСведений  = ФормаЭлемента.ДатаСведений;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ОС6_2003упр" тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений);
	ИначеЕсли ИмяМакета = "ОС6_2003бух" тогда
		ТабДокумент = ПечатьОС6_2003(ДатаСведений,Ложь);
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Инвентарная карточка ОС (Форма ОС-6)");
    // } Лапенков
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ОС6_2003упр,ОС6_2003бух","Форма ОС-6(упр. учет)","Форма ОС-6(бух. учет)");

КонецФункции // ПолучитьТаблицуПечатныхФорм()

#КонецЕсли

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	// {Лапенков
	//ДобавитьПрефиксУзла(Префикс);
	// }Лапенков
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры
