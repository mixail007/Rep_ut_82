
Процедура ПриОткрытии()
	
	Если ГрафикРаботы.Количество() = 0 Тогда 
		Для Каждого День из Перечисления.ДниНедели Цикл 
			НовСтрГрафикРаботы = ГрафикРаботы.Добавить();
			НовСтрГрафикРаботы.ДеньНедели = День;
		КонецЦикла;
	КонецЕсли;
	
	Если ГрафикРаботы2.Количество() = 0 Тогда 
		Для Каждого День из Перечисления.ДниНедели Цикл 
			НовСтрГрафикРаботы = ГрафикРаботы2.Добавить();
			НовСтрГрафикРаботы.ДеньНедели = День;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ГрафикРаботыСезон.Видимость = Сезон;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ГрафикРаботы.Видимость = не Сезон;
	
КонецПроцедуры

Процедура ГородаРегионНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент);
	ФормаВыбора.ОтобратьТолькоРегионы();
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ГородаРегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры

Процедура ГородаГородНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент);
	ФормаВыбора.УстановитьРодителя(ЭлементыФормы.Города.ТекущиеДанные.Регион, "", "", "");
	ФормаВыбора.ОтобратьТолькоГорода();
	ФормаВыбора.отбор.КодРайонаВКоде.Использование = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ГородаГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если Не Отказ Тогда 
		ПроверитьНомерМаршрутаНаУникальность(Отказ);
	КонецЕсли;
	
	если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Подразделение = глТекущийПользователь.ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНомерМаршрутаНаУникальность(Отказ)
	
	Если Не ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НовМаршруты.Представление
		|ИЗ
		|	Справочник.НовМаршруты КАК НовМаршруты
		|ГДЕ
		|	НовМаршруты.НомерМаршрута = &НомерМаршрута";
	
	Запрос.УстановитьПараметр("НомерМаршрута", НомерМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Предупреждение("Не уникальный номер маршрута");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновлениеОтображения()
	
	ТекстИнформационнаяСтрока1 = "Отправка по дням: ";
	естьГрафик = ЛОЖЬ; 
	Если Сезон тогда
		Для Каждого Стр Из ГрафикРаботы2 Цикл 
			Если Стр.Используется Тогда 
				естьГрафик = истина;  
				ТекстИнформационнаяСтрока1 = ТекстИнформационнаяСтрока1 + Стр.ДеньНедели +" до " + Формат(Стр.ВремяНачала, "ДЛФ=T") ; 
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Для Каждого Стр Из ГрафикРаботы Цикл 
			Если Стр.Используется Тогда 
				естьГрафик = истина;
				ТекстИнформационнаяСтрока1 = ТекстИнформационнаяСтрока1 + Стр.ДеньНедели +" до " + Формат(Стр.ВремяНачала, "ДЛФ=T") ; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементыФормы.ИнформационнаяСтрока1.Заголовок = ТекстИнформационнаяСтрока1 + ?(естьГрафик=ЛОЖЬ, "ОТСУТСТВУЕТ!","");
	
	
	
	ТекстИнформационнаяСтрока2 = "Города направления: ";
	МаксКм=0;
	Для Каждого Стр Из Города Цикл 
		ТекстИнформационнаяСтрока2 = ТекстИнформационнаяСтрока2 + Стр.Город+ " ;"; 
		Если МаксКм<стр.Расстояние тогда
			МаксКм = стр.Расстояние;
		КонецЕсли;	
	КонецЦикла;
	ЭлементыФормы.ИнформационнаяСтрока2.Заголовок = ТекстИнформационнаяСтрока2+?(Города.Количество()=0,"ОТСУТСТВУЮТ!","")
					+ " Макс.расстояние: " +МаксКм + " км.";
					
					
					
	КоличествоПодходящихАвто = ПолучитьПодходящиеАвтомобили(Ложь);
	ЭлементыФормы.ИнформационнаяСтрока3.Заголовок  = "Подходящих автомобилей: " + КоличествоПодходящихАвто;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ГрафикРаботыСезон.Видимость = Сезон;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ГрафикРаботы.Видимость = не Сезон;
	
КонецПроцедуры

Функция ПолучитьПодходящиеАвтомобили(ДетальноПоАвтомобилям)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипАвтомобиля.Код,
		|	ТипАвтомобиля.Представление КАК Наименование,
		|	ТипАвтомобиля.Вес,
		|	ТипАвтомобиля.Объем
		|ИЗ
		|	Справочник.ТипАвтомобиля КАК ТипАвтомобиля
		|ГДЕ
		|	ТипАвтомобиля.ссылка В (&ТипТранспорта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	
	Запрос.УстановитьПараметр("ТипТранспорта", ТипыАвтомобилей.ВыгрузитьКолонку("ТипАвтомобиля"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если Не ДетальноПоАвтомобилям Тогда 
		Возврат ВыборкаДетальныеЗаписи.Количество();
	КонецЕсли;	
		
	Возврат РезультатЗапроса.Выгрузить();	
	
КонецФункции	

Процедура ИнформационнаяСтрока3Нажатие(Элемент)
	
	ПодходящиеАвто = ПолучитьПодходящиеАвтомобили(Истина);
	ПострПечать = Новый ПостроительОтчета;
	ПострПечать.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПодходящиеАвто);
	ПострПечать.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Интерфейс);
	ПострПечать.ТекстЗаголовка = "Автомобили маршрута " + Наименование; 
	ПострПечать.Вывести();
	
КонецПроцедуры

Процедура вклОтбор(формаВыбора, Текст)
	
	текст1 = Лев( СокрЛП(Текст), найти(СокрЛП(Текст)," ")-1);
	текст1 = ?(текст1 = "", текст, текст1 );
	ФормаВыбора.РегистрСведенийСписок.Отбор.Наименование.ВидСравнения =ВидСравнения.Содержит;
	ФормаВыбора.РегистрСведенийСписок.Отбор.Наименование.Значение = Текст1;
	ФормаВыбора.РегистрСведенийСписок.Отбор.Наименование.Использование = истина;
	
КонецПроцедуры

Процедура ГородаРегионОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Предупреждение("Выберите значение из списка!
	| Ввод вручную - запрещен!",10);
	//ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	//ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент);
	//ФормаВыбора.ОтобратьТолькоРегионы();
	//	
	//вклОтбор(формаВыбора, Элемент.Значение);
	//
	//ФормаВыбора.Открыть();

КонецПроцедуры


Процедура ГородаГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Предупреждение("Выберите значение из списка!
	| Ввод вручную - запрещен!",10);
	//ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	//ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент);
	//ФормаВыбора.УстановитьРодителя(ЭлементыФормы.Города.ТекущиеДанные.Регион, "", "", "");
	//ФормаВыбора.ОтобратьТолькоГорода();
	//
	//вклОтбор(формаВыбора, Элемент.Значение);
	//
	//ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельГородаЗаполнитьРасстояние(Кнопка)
	
	НачальныеКоординаты = НашеМестоположнеиеНаКарте();
	
	Для Каждого Стр Из Города Цикл 
		
		КонечныеКоординаты = Стр.Регион + ", " + Стр.Город;
		
		Стр.Расстояние = РассчитатьРасстояниеМеждуТочкамиГугл(НачальныеКоординаты,КонечныеКоординаты);
		
	КонецЦикла;
	
	Города.Сортировать("Расстояние Убыв");
	
КонецПроцедуры

Процедура ТипыАвтомобилейТипАвтомобиляПриИзменении(Элемент)
	ЭлементыФормы.ТипыАвтомобилей.ТекущиеДанные.Вес = Элемент.значение.Вес;
    ЭлементыФормы.ТипыАвтомобилей.ТекущиеДанные.Объем = Элемент.значение.Объем;	
КонецПроцедуры



