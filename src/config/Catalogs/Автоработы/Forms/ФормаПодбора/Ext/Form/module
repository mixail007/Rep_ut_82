Перем ЦеныРабот;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет стандартные действия при открытии формы.
//  Вызывается при открытии, при повторном открытии 
//
Процедура ДействияПриОткрытии()
	Если НачальноеЗначениеВыбора<>Неопределено Тогда
		ЭлементыФормы.ДеревоРабот.ТекущаяСтрока=НачальноеЗначениеВыбора;
		ЭлементыФормы.РаботыДляПодбора.ТекущийРодитель=?(ЭлементыФормы.ДеревоРабот.ТекущаяСтрока.Пустая(),Неопределено,ЭлементыФормы.ДеревоРабот.ТекущаяСтрока);
	КонецЕсли; 
КонецПроцедуры // ДейтствияПриОткрытии()

// Процедура выполняет действия при изменении иерархического просмотра
Процедура ПриИзменииИерархическогоПросмотра()
	ИерархическийПросмотр = ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка;
	Если ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка=Истина Тогда
		ЭлементыФормы.РаботыДляПодбора.ИерархическийПросмотр = Истина;
	Иначе
		ЭлементыФормы.РаботыДляПодбора.ИерархическийПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьДерево(Показать)
	Если Показать Тогда
		ЭлементыФормы.ДеревоРабот.Доступность=Истина;
		ЭлементыФормы.РазделительДерева.Доступность=Истина;
		ЭлементыФормы.РаботыДляПодбора.Высота=ЭлементыФормы.РаботыДляПодбора.Высота-(ЭлементыФормы.ДеревоРабот.Высота+ЭлементыФормы.РазделительДерева.Высота);
		ЭлементыФормы.РаботыДляПодбора.Верх=ЭлементыФормы.РазделительДерева.Верх+ЭлементыФормы.РазделительДерева.Высота;
		ЭлементыФормы.РаботыДляПодбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.РазделительДерева,ГраницаЭлементаУправления.Низ,,);
		
		//ЭлементыФормы.ДеревоРабот.Свертка=РежимСверткиЭлементаУправления.Верх;
		//ЭлементыФормы.РазделительДерева.Свертка=РежимСверткиЭлементаУправления.Верх;
		//ЭлементыФормы.РазделительДерева.Верх=ЭлементыФормы.ДеревоРабот.Верх;
		//НоваяВысота=ЭлементыФормы.РаботыДляПодбора.Верх-ЭлементыФормы.ДеревоРабот.Верх+ЭлементыФормы.РаботыДляПодбора.Высота;
		//ЭлементыФормы.РаботыДляПодбора.Верх=ЭлементыФормы.ДеревоРабот.Верх;
		//ЭлементыФормы.РаботыДляПодбора.Высота=НоваяВысота;
	Иначе
		//ЭлементыФормы.ДеревоРабот.Свертка=РежимСверткиЭлементаУправления.Нет;
		//ЭлементыФормы.РазделительДерева.Свертка=РежимСверткиЭлементаУправления.Нет;
		//ЭлементыФормы.РазделительДерева.Верх=ЭлементыФормы.ДеревоРабот.Высота+ЭлементыФормы.ДеревоРабот.Верх;
		ЭлементыФормы.ДеревоРабот.Доступность=Ложь;
		ЭлементыФормы.РазделительДерева.Доступность=Ложь;
		ЭлементыФормы.РаботыДляПодбора.Верх=ЭлементыФормы.ДеревоРабот.Верх;
		ЭлементыФормы.РаботыДляПодбора.Высота=ЭлементыФормы.РаботыДляПодбора.Высота+ЭлементыФормы.ДеревоРабот.Высота+ЭлементыФормы.РазделительДерева.Высота;
		ЭлементыФормы.РаботыДляПодбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх,ЭлементыФормы.КоманднаяПанельНоменклатураСправочник,ГраницаЭлементаУправления.Низ,,);
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	РежимВыбора        = Истина;
	ЗакрыватьПриВыборе = Ложь;
	
	Если ВладелецФормы=Неопределено Тогда Отказ=Истина; Возврат; КонецЕсли; 
	Если ЗначениеНеЗаполнено(ТабличноеПоле) Тогда Отказ=Истина; Возврат; КонецЕсли; 
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	// Восстановим значения что надо запрашивать при подборе.
	// Это надо сделать до управления диалогом.
	ЗапрашиватьЦену       = ВосстановитьЗначение("ЗапрашиватьЦенуПриПодборе");
	ЗапрашиватьКоличество = ВосстановитьЗначение("ЗапрашиватьКоличествоПриПодборе");
	ОтображатьДерево = ВосстановитьЗначение("ПодборОтображатьДерево");
	
	//Если владелец не заявка на ремонт или заказ-наряд, удалим кнопку авбора связанных работ
	ВидимостьВыбораСвязанных=Ложь;
	Если РежимВыбора Тогда
		Попытка
			ДокументВладелец=ВладелецФормы.ДокументОбъект;
			Если ТипЗнч(ДокументВладелец)=Тип("ДокументОбъект.ЗаявкаНаРемонт") ИЛИ
				 ТипЗнч(ДокументВладелец)=Тип("ДокументОбъект.ЗаказНаряд") Тогда
				 ВидимостьВыбораСвязанных=Истина;
			КонецЕсли; 
		Исключение
		КонецПопытки; 
	КонецЕсли; 
	Если НЕ ВидимостьВыбораСвязанных Тогда
		ИндексКнопки=0;
		Для каждого КнопкаПанели Из ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки Цикл
			Если КнопкаПанели.Имя="ВыборСвязанных" Тогда
				ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Удалить(ИндексКнопки);
				Прервать;
			КонецЕсли; 
			ИндексКнопки=ИндексКнопки+1;
		КонецЦикла; 
	КонецЕсли;
	
	ИерархическийПросмотр = Истина;
	ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка = ИерархическийПросмотр;
	ПриИзменииИерархическогоПросмотра();
	
	ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка=(ОтображатьДерево=Неопределено ИЛИ ОтображатьДерево);
	
	ДействияПриОткрытии();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии()
	
	Если ВладелецФормы=Неопределено Тогда Отказ=Истина; Возврат; КонецЕсли; 
	Если ЗначениеНеЗаполнено(ТабличноеПоле) Тогда Отказ=Истина; Возврат; КонецЕсли; 

	ДействияПриОткрытии();

КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Перем ФормаДокумента;
	Перем ИмяТабличнойЧасти;

	// Сохраним номер текущего вида подбора
	СохранитьЗначение("ЗапрашиватьЦенуПриПодборе", ЗапрашиватьЦену);
	СохранитьЗначение("ЗапрашиватьКоличествоПриПодборе", ЗапрашиватьКоличество);
	СохранитьЗначение("ПодборОтображатьДерево",ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка);
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Выбор" табличного поля дерева номенклатуры.
//

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля таблицы номенклатуры.
//
Процедура РаботыДляПодбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если НЕ ДанныеСтроки.ЭтоГруппа Тогда
		Если ОформлениеСтроки.Ячейки.Нормочас.Видимость ИЛИ ОформлениеСтроки.Ячейки.Время.Видимость Тогда
			СтрокаЦеныРаботы=ЦеныРабот.Найти(ДанныеСтроки.Ссылка,"Работа");
			НормочасРаботы=""; ВремяРаботы=0;
			Если СтрокаЦеныРаботы=Неопределено Тогда
				ДанныеСтроки.Ссылка.ПолучитьОбъект().ПолучитьЦенуРаботыВНормочасах(НормочасРаботы,ВремяРаботы,КлассАвтомобиля);
				СтрокаЦеныРаботы=ЦеныРабот.Добавить();
				СтрокаЦеныРаботы.Работа=ДанныеСтроки.Ссылка;
				СтрокаЦеныРаботы.Нормочас=НормочасРаботы;
				СтрокаЦеныРаботы.Время=ВремяРаботы;
			Иначе
				НормочасРаботы=СтрокаЦеныРаботы.Нормочас;
				ВремяРаботы=СтрокаЦеныРаботы.Время;
			КонецЕсли; 
			ОформлениеСтроки.Ячейки.Нормочас.ОтображатьТекст=Истина;
			ОформлениеСтроки.Ячейки.Нормочас.Текст=НормочасРаботы;
			ОформлениеСтроки.Ячейки.Время.ОтображатьТекст=Истина;
			ОформлениеСтроки.Ячейки.Время.Текст=ВремяРаботы;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // РаботыДляПодбораПриВыводеСтроки()

Процедура РаботыДляПодбораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Перемещение Тогда
		СтандартнаяОбработкаВыбора=Истина;
		РаботыДляПодбораВыбор(Элемент, Элемент.ТекущаяСтрока, Элемент.ТекущаяКолонка, СтандартнаяОбработкаВыбора)
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля таблицы
// номенклатуры для подбора. Запрещает изменение значений в ячейках строк табличного поля.
//
Процедура РаботыДляПодбораПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // РаботыДляПодбораПередНачаломИзменения()

// Процедура - обработчик события "Выбор" табличного поля РаботыДляПодбора.
//
Процедура РаботыДляПодбораВыбор(Элемент, ВыбСтрока, Колонка, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь; 
	//Если выбрана группа - переход
	Если ВыбСтрока.ЭтоГруппа Тогда
		ЭлементыФормы.ДеревоРабот.ТекущаяСтрока = ВыбСтрока;
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	Работа=ВыбСтрока;
	
	//Поищем такую строку в документе
	СтрокаДокумента=ВладелецФормы[ТабличноеПоле].Найти(Работа,"Работа");
	Если СтрокаДокумента<>Неопределено Тогда
		//Если строка есть, возмем из нее цену
//		НормочасРаботы=СтрокаДокумента.Нормочас;
		ВремяРаботы=СтрокаДокумента.Коэффициент;
		ЦенаРаботы=СтрокаДокумента.Цена;
	Иначе
		//Попробуем заменить пустую строку
		СтрокаДокумента=ВладелецФормы[ТабличноеПоле].Найти(Справочники.Автоработы.ПустаяСсылка(),"Работа");
		//В противном случае получим цену работы
		НормочасРаботы=0;
		ВремяРаботы=0;
		ЦенаРаботы=0;
		Попытка
			КлассАвтомобиля=ВладелецФормы.Автомобиль.Модель.КлассАвтомобиля;
		Исключение
			КлассАвтомобиля=Неопределено;
		КонецПопытки; 
		ТекущаяРаботаОбъект=Работа.ПолучитьОбъект();
		Попытка
			Контрагент=ВладелецФормы.Контрагент;
		Исключение
			Контрагент=ВладелецФормы.Заказчик;
		КонецПопытки; 
		//ТекущаяРаботаОбъект.ПолучитьЦенуРаботыВВалюте(НормочасРаботы,ВремяРаботы,ЦенаРаботы,ВладелецФормы.ВалютаДокумента,ВладелецФормы.КурсДокумента,ВладелецФормы.Дата,Контрагент,КлассАвтомобиля);
		ЦенаРаботы=ПолучитьЦенуЗаЧасАвтоработы(КлассАвтомобиля);
		ВремяРаботы=ПолучитьНормочасыАвтоработы(Работа,КлассАвтомобиля) ;
	КонецЕсли;
	КоличествоРабот=1;
	
	Если ЗапрашиватьКоличество ИЛИ ЗапрашиватьЦену Тогда
		//Если требуется запрос цены и/или количества
		ФормаВводКоличестваИЦены=ПолучитьФорму("ВводКоличестваИЦены",ЭтаФорма);
		ФормаВводКоличестваИЦены.Авторабота 		= Работа;
		ФормаВводКоличестваИЦены.Валюта				= ВладелецФормы.ВалютаДокумента;
		ФормаВводКоличестваИЦены.Количество			= КоличествоРабот;
		//ФормаВводКоличестваИЦены.Нормочас			= НормочасРаботы;
		ФормаВводКоличестваИЦены.Коэффициент		= ВремяРаботы;
		ФормаВводКоличестваИЦены.Цена				= ЦенаРаботы;
		СтруктураПараметров=ФормаВводКоличестваИЦены.ОткрытьМодально();
		Если ТипЗнч(СтруктураПараметров)=Тип("Структура") Тогда
			СтруктураПараметров.Свойство("Количество", КоличествоРабот);
			СтруктураПараметров.Свойство("Коэффициент", ВремяРаботы);
			СтруктураПараметров.Свойство("Цена"      , ЦенаРаботы);
		Иначе
			Возврат; // форма ввода количества(количества и цены) закрыта не по кнопке "ОК"
		КонецЕсли;
		Если КоличествоРабот<=0 Тогда Возврат; КонецЕсли;
		Если ВремяРаботы<=0 Тогда //Возврат; 
			// 
			Сообщить("Для данной работы кол-во нормочасов не задано.",СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли; 
	
	//Если строки в документе нет - добавим ее
	Если СтрокаДокумента=Неопределено ИЛИ ЗначениеНеЗаполнено(СтрокаДокумента.Работа) Тогда
		Если СтрокаДокумента=Неопределено Тогда
			СтрокаДокумента=ВладелецФормы[ТабличноеПоле].Добавить();
		КонецЕсли; 
		СтрокаДокумента.Работа=ВыбСтрока;
		//Установим требуемое количество
		СтрокаДокумента.Количество=КоличествоРабот;
//		СтрокаДокумента.Нормочас=НормочасРаботы;
		СтрокаДокумента.Коэффициент=ВремяРаботы;
		СтрокаДокумента.Цена=ЦенаРаботы;
		//Заполнение ставок налогов
	//	СтрокаДокумента.СтавкаНДС=СтрокаДокумента.Работа.Номенклатура.СтавкаНДС;
		ВладелецФормы.ЭлементыФормы[ТабличноеПоле].ТекущаяСтрока=СтрокаДокумента;
		омПересчитатьСтоимостьРаботСкидкиНаценки(СтрокаДокумента,ВладелецФормы.ДокументОбъект);

		//зфЗНРаботыПриАктивизацииСтроки(ВладелецФормы);
		//зфЗНЗаполнениеИсполнителей(ВладелецФормы,СтрокаДокумента.Работа);
		//Предложим выбрать связанные работы
	//	ФормаВыбора=РегистрыСведений.СвязанныеРаботы.ПолучитьФорму("ФормаВыбора",ВладелецФормы);
		//Если НЕ ФормаВыбора.Открыта() Тогда
		//	ФормаВыбора.НачальноеЗначениеВыбора=СтрокаДокумента.Работа;
		//	ФормаВыбора.РежимВыбора=Истина;
		//	ФормаВыбора.ОткрытьМодально();
		//КонецЕсли; 
	Иначе
		ВладелецФормы.ЭлементыФормы[ТабличноеПоле].ТекущаяСтрока=СтрокаДокумента;
		//зфЗНРаботыПриАктивизацииСтроки(ВладелецФормы);
		//Или увеличим количество на нужную величину
		СтрокаДокумента.Количество=СтрокаДокумента.Количество+КоличествоРабот;
	//	СтрокаДокумента.Нормочас=НормочасРаботы;
		СтрокаДокумента.Коэффициент=ВремяРаботы;
		СтрокаДокумента.Цена=ЦенаРаботы;
		омПересчитатьСтоимостьРаботСкидкиНаценки(СтрокаДокумента,ВладелецФормы.ДокументОбъект);
	КонецЕсли; 
	
	//ВладелецФормы.ДокументОбъект.ОбработкаРеквизита("Работы.Количество",СтрокаДокумента,ВладелецФормы);
	ОтменаРедактирования=Ложь;
	//ВладелецФормы.РаботыПриОкончанииРедактирования(ВладелецФормы.ЭлементыФормы.Работы,СтрокаДокумента,ОтменаРедактирования);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Отображение дерева номенклатур
Процедура КоманднаяПанельРаботыДляПодбораДерево(Кнопка)
	ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка=Не ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка;
	ПоказатьДерево(ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка);
	Если (Не ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка) И (ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.Дерево.Пометка) Тогда
		КоманднаяПанельРаботыДляПодбораИерархическийПросмотр(ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр);
	КонецЕсли;
КонецПроцедуры

//Иерархический просмотр
Процедура КоманднаяПанельРаботыДляПодбораИерархическийПросмотр(Кнопка)
	ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка=Не ЭлементыФормы.КоманднаяПанельНоменклатураСправочник.Кнопки.ИерархическийПросмотр.Пометка;
	ПриИзменииИерархическогоПросмотра();
КонецПроцедуры

Процедура ДеревоРаботВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Используется только для иерархических справочников и планов видов характеристик
	СтандартнаяОбработка=Ложь;
	ЭлементыФормы.РаботыДляПодбора.ТекущийРодитель=?(ВыбраннаяСтрока.Пустая(),Неопределено,ВыбраннаяСтрока);
КонецПроцедуры

Процедура КоманднаяПанельНоменклатураСправочникВыборСвязанных(Кнопка)
	//Предложим выбрать связанные работы
	ФормаВыбора=РегистрыСведений.СвязанныеРаботы.ПолучитьФорму("ФормаВыбора",ВладелецФормы);
	Если НЕ ФормаВыбора.Открыта() Тогда
		ФормаВыбора.НачальноеЗначениеВыбора=ЭлементыФормы.РаботыДляПодбора.ТекущаяСтрока;
		ФормаВыбора.РежимВыбора=Истина;
		ФормаВыбора.ОткрытьМодально();
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

КоэффициентРаботыПоУмолчанию=Неопределено;

// Зададим возможные состояния окна.
СоединяемоеОкно                 = Истина;
РазрешитьСостояниеПрикрепленное = Истина;
РазрешитьСостояниеСвободное     = Истина;

// Положение окна по умолчанию.
СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;

ЦеныРабот=Новый ТаблицаЗначений;
ЦеныРабот.Колонки.Добавить("Работа");
ЦеныРабот.Колонки.Добавить("Нормочас");
ЦеныРабот.Колонки.Добавить("Время");
