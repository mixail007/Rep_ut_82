Перем мОснование;

Перем мПраваДоступаПользователей Экспорт;

// Обработчик события ПриКопировании
//
Процедура ПриКопировании(ОбъектКопирования)

	Если НЕ ЭтотОбъект.ЭтоГруппа Тогда
		Если НЕ ОбменДанными.Загрузка И НЕ ЗначениеНеЗаполнено(ОбъектКопирования) Тогда
			ПрочитатьПраваДоступаКОбъекту(мПраваДоступаПользователей, ОбъектКопирования.Ссылка);
		КонецЕсли;
		ЭтотОбъект.ОсновнойДоговорКонтрагента = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает результат запроса по справочнику контрагентов с заданным головным контрагентом
//
// Параметры:
//  ГоловнойКонтрагент - заданный головной контрагент
//
// Возвращаемое значение:
//  Результат - результат работы запроса
// 
Функция ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(ГоловнойКонтрагент) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту()

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Организации") Тогда
		
		Наименование           = Основание.Наименование;
		ЮрФизЛицо              = Основание.ЮрФизЛицо;
		НаименованиеПолное     = Основание.НаименованиеПолное;
		ОсновнойБанковскийСчет = Основание.ОсновнойБанковскийСчет;
		ИНН                    = Основание.ИНН;
		КПП                    = Основание.КПП;
		КодПоОКПО              = Основание.КодПоОКПО;
		мОснование             = Основание;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ)
	
	// Проверим основной вид деятельности контрагента
	
	Если НЕ ЗначениеНеЗаполнено(ОсновнойВидДеятельности) И ВидыДеятельности.Найти(ОсновнойВидДеятельности, "ВидДеятельности") = Неопределено Тогда
		ОсновнойВидДеятельности = Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда // 26.03.2015 - никаких проверок не надо!
		возврат;
	КонецЕсли;	
	
	#Если Клиент тогда
	ПроверитьПраваПередЗаписью(ЭтотОбъект, Отказ);

	//+++ 27.08.2012 - нельзя менять Родителя с Потенциального на другого
	Если не ЭтоНовый() тогда
		Если (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) и Ссылка.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели тогда
			мИзменитьДатуДействияПоДоговору(Ссылка); // 06.04.2016
		иначе 
			Если РольДоступна("МенеджерПоПродажамИМ") и ЭтотОбъект.Родитель <> справочники.Контрагенты.КлиентыИМ и Ссылка.Родитель = справочники.Контрагенты.КлиентыИМ тогда
				сообщить("Вам не разрешено менять Группу контрагентов """+строка(справочники.Контрагенты.КлиентыИМ)+""" на другую!", СтатусСообщения.Внимание);
				ЭтотОбъект.Родитель = справочники.Контрагенты.КлиентыИМ;
			КонецЕсли;
		КонецЕсли;
		
		//20.08.2018 - 1 или 2 точки в конце комментарий
		таблКат1 = КатегорияСкидок.Выгрузить(); 
		таблКат0 = ссылка.КатегорияСкидок.Выгрузить(); 
		Если ЕстьРазличияВТаблицахКатегорий(таблКат0, таблКат1) тогда
			Комментарий = Комментарий+"."; //1, 2, 3
			Комментарий = стрЗаменить(Комментарий, "....","."); //4>>1
		КонецЕсли;
	
		
	//+++ 03.09.2012 создавать разрешено тоже только в этой группе!		
	иначеЕсли ЭтоНовый() тогда
		
		//+++ 13.08.2018 --- задача № 52399 --- не ставим родителя!
		//Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) и не РольДоступна("МенеджерПоПродажамИМ") тогда
		//	ЭтотОбъект.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели;
		//иначе
		Если РольДоступна("МенеджерПоПродажамИМ") тогда
			ЭтотОбъект.Родитель = справочники.Контрагенты.КлиентыИМ;
		КонецЕсли;
		
		Если не ЭтотОбъект.ЭтоГруппа тогда //30.03.2017
		ТекущаяДатаСервер = ОценкаПроизводительностиВызовСервераПолныеПрава.ДатаИВремяНаСервере();
		этотОбъект.ДатаСоздания = ТекущаяДатаСервер;//27.03.2017
		КонецЕсли;
	
	КонецЕсли;
 	#КонецЕсли

Если НЕ ЭтотОбъект.ЭтоГруппа тогда
  Если НЕ ЭтотОбъект.Экспорт тогда 	// для экспортных - нет проверки!
	//+++ Поиск дублей +++++++++++++++++++++++++++++++++++++++++++++++++++
	Усл = "";
	Запрос = Новый Запрос;
	Если СокрЛП(ИНН)<>"" тогда
	 Запрос.УстановитьПараметр("ИНН", ИНН);
	 Усл = "Контрагенты.ИНН = &ИНН";
 	КонецЕсли;
    Если СокрЛП(КПП)<>"" тогда
	 Запрос.УстановитьПараметр("КПП", КПП);
	 Усл = Усл+?(Усл="",""," И ")+"Контрагенты.КПП = &КПП";
 	КонецЕсли;
	
	//Если НЕ ЭтотОбъект.ЭтоГруппа тогда //уже проверено выше!
		Если Усл = "" тогда
			#Если Клиент тогда
				Если Родитель<>Справочники.Контрагенты.НайтиПоКоду("П000001") тогда
					сообщить("Не заполнены обязательные поля: ИНН и КПП !", СтатусСообщения.Внимание);
				КонецЕсли;	
			#КонецЕсли
			
			//попробуем найти дубль по полному наименованию	
			Запрос.УстановитьПараметр("Имя",СокрЛП(Наименование)); //02.08.2017 при быстом вводе - нет полного наименования?!
			//30.11.16 Смирнов   снова вкючен поиск
			Усл = "Выразить(Контрагенты.НаименованиеПолное как Строка(1000)) = &Имя";
			
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ первые 1
		|	Контрагенты.Ссылка как Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка <> &Ссылка
		//05.02.2016 - для групп - не нужна проверка!
		|	И НЕ Контрагенты.ЭтоГруппа
		|  И "+Усл;
		Запрос.УстановитьПараметр("ссылка", ссылка);
		
		Если Усл<>"" тогда
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий()тогда
			#Если Клиент тогда
				сообщить("Уже существует контрагент с кодом: "+сокрЛП(выборка.Ссылка.Код)+" - "+выборка.Ссылка.Наименование+" (ИНН/КПП: "+СокрЛП(выборка.Ссылка.ИНН)+"/"+СокрЛП(выборка.Ссылка.КПП)+")" , СтатусСообщения.Внимание);
			#КонецЕсли
				Если ЭтоНовый() или НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) тогда
					Отказ = истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;
		//+++)
	//КонецЕсли;	
  КонецЕсли;
КонецЕсли;//конец не Экспортных

	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
				
	КонецЕсли; 

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		возврат;
	КонецЕсли;
	
		Если НЕ ЗначениеНеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда

			Если Не ЗначениеНеЗаполнено(ГоловнойКонтрагент.ГоловнойКонтрагент) И ГоловнойКонтрагент.ГоловнойКонтрагент <> ГоловнойКонтрагент Тогда
				СообщитьОбОшибке("Контрагент "+СокрЛП(ГоловнойКонтрагент)+" не может быть выбран головным, 
								|так как для него уже был назначен головной контрагент "+СокрЛП(ГоловнойКонтрагент.ГоловнойКонтрагент)+"!");
				Отказ = Истина;
				Возврат;
			Иначе

				// надо проверить, что если указываем головного контрагента, то этот элемент уже не был установлен
				// в качестве головного у другого контрагента.
				ВыборкаПоГоловномуКонтрагенту = ПолучитьКонтрагентовПоЗаданномуГоловномуКонтрагенту(Ссылка).Выбрать();
				Если ВыборкаПоГоловномуКонтрагенту.Количество() <> 0 Тогда

					СообщениеОНевозможностиЗаписи = "Rонтрагент "+СокрЛП(ЭтотОбъект)+" не может иметь головного контрагента!
													|Этот контрагент уже установлен головным для: ";
					Пока ВыборкаПоГоловномуКонтрагенту.Следующий() Цикл
						СообщениеОНевозможностиЗаписи = СообщениеОНевозможностиЗаписи + Символы.ПС + СокрЛП(ВыборкаПоГоловномуКонтрагенту.Контрагент);
					КонецЦикла;

					СообщитьОбОшибке(СообщениеОНевозможностиЗаписи);
					Отказ = Истина;
					Возврат;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	
		Если НЕ ЗначениеНеЗаполнено(мОснование) Тогда
			НаборЗаписей = РегистрыСведений.СобственныеКонтрагенты.СоздатьНаборЗаписей();
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Контрагент = Ссылка;
			ЗаписьРегистра.ВидСвязи   = Перечисления.ВидыСобственныхКонтрагентов.Организация;
			ЗаписьРегистра.Объект     = мОснование;
			НаборЗаписей.Записать(Ложь);
			мОснование = "";
		КонецЕсли;
		
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(мПраваДоступаПользователей, Родитель, Ссылка);
		
		НеобходимоПереписыватьПодчиненных = ПроверитьНеобходимостьПереписыватьПраваДоступаДляПодчиненныхЭлементов(Ссылка, мПраваДоступаПользователей);
		
		ЗаписатьПраваДоступаКОбъекту(мПраваДоступаПользователей, Ссылка, Отказ);
		
		Если НеобходимоПереписыватьПодчиненных И НЕ Отказ Тогда
			УстановитьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ЭтотОбъект.Метаданные().Имя, Отказ);
		КонецЕсли; 
				
КонецПроцедуры

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	Если Родитель=Справочники.Контрагенты.ПотенциальныеПокупатели Тогда
		Префикс = "П";
	Иначе
		#Если Клиент тогда
		Префикс = ПолучитьПрефиксНомера();
		#КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры // ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)

Процедура ОчиститьДвиженияПоТипуЦен() Экспорт
	
	Отбор = Новый Структура("Контрагент", Ссылка);
	Выборка = РегистрыСведений.ДоступныеЦеныКонтрагентов.Выбрать(Отбор);
	Пока Выборка.Следующий() Цикл
	
		Выборка.ПолучитьМенеджерЗаписи().Удалить();	
	
	КонецЦикла;
   
КонецПроцедуры
 

Процедура ПередУдалением(Отказ)
	
	ОчиститьДвиженияПоТипуЦен();

КонецПроцедуры

//06.04.2016 -------------------для Горохова В. --------------------
Процедура мИзменитьДатуДействияПоДоговору(Контрагент) Экспорт
	
	//***2018.02.28 было:
	//Запрос1 = новый Запрос;
	//Запрос1.текст = "ВЫБРАТЬ
	//				|	БД.Период,
	//				|	БД.Контрагент,
	//				|	БД.Номер,
	//				|	БД.ДатаОкончанияДействия,
	//				|	БД.Состояние,
	//				|	БД.ЕстьДоговорПоручительства,
	//				|	БД.ЕстьКопииПравоустанавливающихДокументов,
	//				|	БД.ПутьКФайлуДоговора,
	//				|	БД.ДопустимоеЧислоДнейЗадолженности,
	//				|	БД.Пролонгируется
	//				|ИЗ
	//				|	РегистрСведений.БумажныеДоговоры.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК БД";
	//Запрос1.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()) );
	//Запрос1.УстановитьПараметр("Контрагент", Контр);
	//
	//рез = Запрос1.Выполнить();
	//Если рез.Пустой() Тогда
	//	#Если Клиент тогда
	//		Сообщить("Нет информации по Бумажным договорам.", СтатусСообщения.Внимание);
	//	#КонецЕсли	
	//КонецЕсли;
	//
	//ДатаОкончания = КонецДня(ТекущаяДата())+1 + 2*86400;
	//регСв = рез.Выбрать();
	//пока регСв.Следующий() цикл
	//	
	//	регСвОб = РегистрыСведений.БумажныеДоговоры.СоздатьМенеджерЗаписи();                
	//	ЗаполнитьЗначенияСвойств( регСвОб, регСв );
	//	регСвОб.ДатаОкончанияДействия = ДатаОкончания;
	//	
	//	Попытка
	//		регСвОб.Записать( Истина );
	//	Исключение
	//		Сообщить( ОписаниеОшибки(), СтатусСообщения.ОченьВажное );
	//	КонецПопытки;
	//	
	//КонецЦикла;
	//
	////------------Обратное изменение всех реквизитов всех договоров!-----
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ДоговорыКонтрагентов.Ссылка,
	//			   |	ДоговорыКонтрагентов.ДатаОкончанияДействия
	//			   |ИЗ
	//			   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//			   |ГДЕ
	//			   |	ДоговорыКонтрагентов.Владелец = &Владелец";
	//Запрос.УстановитьПараметр("Владелец", Контр);
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//  дог = выборка.Ссылка.ПолучитьОбъект();
	//  Если дог.ТипДоговора <> Справочники.ТипыДоговоров.НайтиПоКоду("00015") тогда
	//  дог.ДатаОкончанияДействия = ДатаОкончания;
	//  конецЕсли;
	//	Попытка
	//  дог.ОбменДанными.Загрузка = истина;
	//	  дог.Записать();
	//  дог.ОбменДанными.Загрузка = ЛОЖЬ;
	//  #Если Клиент тогда
	//	  сообщить("Изменен договор "+строка(дог.Код)+" "+строка(дог.Наименование)
	//	  +" - "+строка(дог.ОтветственноеЛицо), СтатусСообщения.Информация);
	//  #КонецЕсли	  
	//	Исключение
	//	  сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
	//	КонецПопытки;  
	// КонецЦикла;
	// 
	// #Если Клиент тогда
	// Сообщить("Срок действия по "+строка(Выборка.Количество())+" договорам  - установлен до "+формат(ДатаОкончания,"ДФ=dd.MM.yyyy")+" по покупателю: "+строка(Контр));
	// #КонецЕсли	  
	
	
	//стало: бум договоры не перезаписываем, работаем с ними лишь для получения даты окончания действия
	ЗапросБумД = Новый Запрос;
	ЗапросБумД.Текст = "ВЫБРАТЬ
	               |	БД.Номер,
	               |	БД.ДатаОкончанияДействия
	               |ИЗ
	               |	РегистрСведений.БумажныеДоговоры.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК БД";
	ЗапросБумД.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	ЗапросБумД.УстановитьПараметр("Контрагент", Контрагент);
	ТаблицаБумД = ЗапросБумД.Выполнить().Выгрузить();
	
	ЗапросДК = Новый Запрос;
	ЗапросДК.Текст = "ВЫБРАТЬ
	                 |	ДоговорыКонтрагентов.Ссылка,
	                 |	ДоговорыКонтрагентов.Номер,
	                 |	ДоговорыКонтрагентов.ДатаОкончанияДействия
	                 |ИЗ
	                 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                 |ГДЕ
	                 |	ДоговорыКонтрагентов.Владелец = &Владелец";
	ЗапросДК.УстановитьПараметр("Владелец", Контрагент);
	Выборка = ЗапросДК.Выполнить().Выбрать();
	
	ДатаОкончания = КонецДня(ТекущаяДата())+1 + 2*86400;
	
	Если ТаблицаБумД.Количество() = 0 Тогда
		
		//бумажных договоров нет, во всех договорах контрагентов устанавливаем одинаковую универсальную дату
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.ТипДоговора <> Справочники.ТипыДоговоров.НайтиПоКоду("00015") Тогда  //<>Предоплата по счетам
				ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДоговорОбъект.ДатаОкончанияДействия = ДатаОкончания;
				Попытка
					ДоговорОбъект.ОбменДанными.Загрузка = Истина;
					ДоговорОбъект.Записать();
					ДоговорОбъект.ОбменДанными.Загрузка = Ложь;
					#Если Клиент тогда
						Сообщить("Изменен договор " + Строка(ДоговорОбъект.Код) + " " + Строка(ДоговорОбъект.Наименование) + " отв. " + Строка(ДоговорОбъект.ОтветственноеЛицо) + ": дата окончания действия установлена на " + Лев(Строка(ДатаОкончания),10), СтатусСообщения.Информация);
					#КонецЕсли	  
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				КонецПопытки;  
			КонецЕсли;
		КонецЦикла;
		
	Иначе //есть бум договоры, тогда дату берем из них. Если не заполнена, то устанавливаем одинаковую универсальную дату в договорах контрагентов
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Ссылка.ТипДоговора <> Справочники.ТипыДоговоров.НайтиПоКоду("00015") Тогда  //<>Предоплата по счетам
				
				НайденнаяСтрока = ТаблицаБумД.Найти(Выборка.Номер);
				Если НайденнаяСтрока = Неопределено Тогда
					//не найден бумажных договор с таким номером
					Если Выборка.ДатаОкончанияДействия < ТекущаяДата() Тогда
						Продолжить;
					Иначе
						ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
						ДоговорОбъект.ДатаОкончанияДействия = ДатаОкончания;
					КонецЕсли;
				Иначе
					Если НайденнаяСтрока.ДатаОкончанияДействия < ТекущаяДата() Тогда
						//дата окончания бум договора меньше текущей, сверяем, чтоб у договора контрагента была такая же
						Если НайденнаяСтрока.ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия Тогда
							Продолжить;
						Иначе
							//перезапишем договору контрагента дату из бум договора
							ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
							ДоговорОбъект.ДатаОкончанияДействия = НайденнаяСтрока.ДатаОкончанияДействия;
						КонецЕсли;
					ИначеЕсли НайденнаяСтрока.ДатаОкончанияДействия = Дата(1,1,1) Тогда
						Если Выборка.ДатаОкончанияДействия < ТекущаяДата() Тогда
							Продолжить;
						Иначе
							ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
							ДоговорОбъект.ДатаОкончанияДействия = ДатаОкончания;
						КонецЕсли;
					Иначе
						Если НайденнаяСтрока.ДатаОкончанияДействия = Выборка.ДатаОкончанияДействия Тогда
							Продолжить;
						Иначе
							//перезапишем договору контрагента дату из бум договора
							ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
							ДоговорОбъект.ДатаОкончанияДействия = НайденнаяСтрока.ДатаОкончанияДействия;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Попытка
					ДоговорОбъект.ОбменДанными.Загрузка = Истина;
					ДоговорОбъект.Записать();
					ДоговорОбъект.ОбменДанными.Загрузка = Ложь;
					#Если Клиент тогда
						Сообщить("Изменен договор " + Строка(ДоговорОбъект.Код) + " " + Строка(ДоговорОбъект.Наименование) + " отв. " + Строка(ДоговорОбъект.ОтветственноеЛицо) + ": дата окончания действия установлена на " + Лев(Строка(ДатаОкончания),10), СтатусСообщения.Информация);
					#КонецЕсли	  
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				КонецПопытки;  
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

//+++ 20.08.2018 - для выгрузки в терминал - важно!
функция ЕстьРазличияВТаблицахКатегорий(таблКат0, таблКат1) 
	рез = ложь;
	N0 = таблКат0.Количество();
	N1 = таблКат1.Количество(); 
	Если N0<>N1 тогда //сразу есть различия!
		возврат Истина;
	КонецЕсли;
	
	для i=0 по N1-1 цикл //одинаковое число строк...
		Если 	 таблКат0[i].ВидТовара<>таблКат1[i].ВидТовара
			или  таблКат0[i].Категория<>таблКат1[i].Категория
			или  таблКат0[i].ТрКлиента<>таблКат1[i].ТрКлиента тогда
			рез = Истина;
			прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	возврат рез;
КонецФункции	


мПраваДоступаПользователей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
Если НЕ Ссылка.Пустая() Тогда
	ПрочитатьПраваДоступаКОбъекту(мПраваДоступаПользователей, Ссылка);
КонецЕсли;


