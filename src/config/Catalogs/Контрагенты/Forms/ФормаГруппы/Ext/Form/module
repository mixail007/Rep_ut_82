
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет параметрами отображения таблицы настройки прав доступа.
// 
Процедура ОбслужитьТаблицуНастройкиПравДоступа()

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.НаборПравПользователей.МенеджерПоПродажам);
	СписокОтбора.Добавить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
	
	ОбластиДанныхДоступа.Отбор.Ссылка.Использование = Истина;
	ОбластиДанныхДоступа.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ОбластиДанныхДоступа.Отбор.Ссылка.Значение      = СписокОтбора;
	ЭлементыФормы.ОбластиДанныхДоступа.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - вызывается при открытии формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	КонецЕсли;
	
	ОбслужитьТаблицуНастройкиПравДоступа();
	
	//+++ 26.12.2012
	Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) 
		   или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
		ЭлементыФормы.ДействияФормы.Видимость = ложь;
        ЭлементыФормы.ДействияФормы.Доступность = ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеВыбора = "ЗаписанРодительПравДоступа" Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
		ОбслужитьТаблицуНастройкиПравДоступа();
		УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи()
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе("ЗаписанРодительПравДоступа");
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ ОГРАНИЧЕНИЯ ПРАВ ДОСТУПА

// Обработчик события ПриВыводеСтроки элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаОбластьДанных(Элемент, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока, Истина);
	УстановитьСписокПоляВыбора(Элемент.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаГруппы());
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, Модифицированность);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Родитель.
//
Процедура РодительПриИзменении(Элемент)
	
	ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		ОткрытьФормуРодителяПравообладателя(Элемент.ТекущиеДанные, Родитель, ЭтаФорма);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) Тогда
		Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		Предупреждение("Запись удалить невозможно, она наследутся от родителя.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

ПраваДоступаПользователей = мПраваДоступаПользователей;