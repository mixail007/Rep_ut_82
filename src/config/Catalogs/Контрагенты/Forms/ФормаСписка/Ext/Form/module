
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура открывает форму нового документ Контакт.
//
Процедура ВвестиНовоеСобытие(ВыбранныйВидСобытия)

	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если ЗначениеНеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли; 

	Док = Документы.Событие.СоздатьДокумент();
	
	Док.ВидСобытия     = ВыбранныйВидСобытия;
	Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
	Док.Контрагент     = ТекущаяСсылка;
	Док.КонтактноеЛицо = ТекущаяСсылка.ОсновноеКонтактноеЛицо;

	ФормаСобытия       = Док.ПолучитьФорму(,ЭтаФорма);
	
	ФормаСобытия.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы СправочникСписок.
//
Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	ЭлементыФормы.СправочникДерево.ТекущаяСтрока = ЭлементыФормы.СправочникСписок.ТекущийРодитель;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы СправочникСписок.
//
Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
 	
	//Если Элемент.Колонки.ГоловнойКонтрагент.Видимость И ДанныеСтроки.ГоловнойКонтрагент = ДанныеСтроки.Ссылка Тогда
	//	ОформлениеСтроки.Ячейки.ГоловнойКонтрагент.УстановитьТекст("");
	//КонецЕсли; 
	//Если ДанныеСтроки.Ссылка.этоГруппа =ложь Тогда
	//Отбор1 = Новый Структура();
	//Отбор1.Вставить("Объект",ДанныеСтроки.Ссылка);
	//Отбор1.Вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
	//данные = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор1);	
	//ОформлениеСтроки.Ячейки.Статус.Текст = ДАнные.Значение;
	//ОформлениеСтроки.Ячейки.Статус.ОтображатьТекст = Истина;

	//конецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события нажатие по кнопке СписокСобытий командной панели ДействияФормы.
//
Процедура ДействияФормыСписокСобытий(Кнопка)

	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.Пустая() Тогда
	
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();

		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;

		ФормаСпискаСобытий.Открыть();
		
	Иначе

		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Файлы командной панели ДействияФормы.
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Отчет командной панели ДействияФормы.
//
Процедура ДействияФормыОтчет(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
			
			Предупреждение("Нельзя формировать отчет по группе!");
			Возврат;
			
		Иначе
			
			Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
			Отчет.КонтрагентОтчета = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
			Отчет.ДатаОтчета = ТекущаяДата();
			
			ФормаОтчета = Отчет.ПолучитьФорму();
			
			Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
			
			ФормаОтчета.Открыть();
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ТелефонныйЗвонок командной панели ДействияФормы.
//
Процедура ДействияФормыТелефонныйЗвонок(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЛичнаяВстреча командной панели ДействияФормы.
//
Процедура ДействияФормыЛичнаяВстреча(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронноеПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронноеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ПочтовоеПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыПочтовоеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Прочее командной панели ДействияФормы.
//
Процедура ДействияФормыПрочее(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.Прочее);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НовыйЗаказПокупателя командной панели ДействияФормы.
//
Процедура ДействияФормыНовыйЗаказПокупателя(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если ЗначениеНеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСсылка.Покупатель Тогда
		Предупреждение("Контрагент не является покупателем.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйЗаказ.Контрагент = ТекущаяСсылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НовыйЗаказПоставщику командной панели ДействияФормы.
//
Процедура ДействияФормыНовыйЗаказПоставщику(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если ЗначениеНеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСсылка.Поставщик Тогда
		Предупреждение("Контрагент не является поставщиком.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	НовыйЗаказ.Контрагент = ТекущаяСсылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НаписатьПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	НаписатьПисьмоОбъекту(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, глТекущийПользователь);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронныеПисьма командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронныеПисьма(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронныеПисьмаПлюсКонтактныеЛица командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронныеПисьмаПлюсКонтактныеЛица(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Ссылка
	|";
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	СписокКонтактныхЛиц.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокКонтактныхЛиц.Вставить(0, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(СписокКонтактныхЛиц);
	
КонецПроцедуры

Процедура КоманднаяПанель1Действие(Кнопка)
	
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Не ЭлементыФормы.СправочникСписок.ИерархическийПросмотр;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьОтборВСправочникКонтрагенты(Отбор, ЭлементыФормы.СправочникСписок);	
	
	 //+++ 26.12.2012
	//Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава"))  или
	
Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда

	//+++( 04.04.2014
	Если РольДоступна("Кассир") тогда  // для бухгалтеров - надо видеть всех клиентов по своей группе... 
		
		группа = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов");
		СписокПользователей = новый СписокЗначений;
		
		Если группа<>неопределено и группа<>справочники.ГруппыПользователей.ПустаяСсылка() тогда
			для каждого стр1 из группа.ПользователиГруппы цикл
				СписокПользователей.Добавить(стр1.Пользователь);
			КонецЦикла;
		Иначе //только по себе!
			СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
		
		СписокКонтрагентовМенеджера = ПолучитьСписокКонтрагентовМенеджера(СписокПользователей);
		Отбор["Ссылка"].Значение = СписокКонтрагентовМенеджера;

	КонецЕсли;
    //+++)
	
	//- печать НЕ ограничена по контрагентам пользователя
	Если (РольДоступна("МенеджерПоПродажам")) тогда // нельзя 
	  ЭлементыФормы.ДействияФормы.Кнопки.Печать.Кнопки.ДействиеЗадолженность.Доступность = ложь; 
	  ЭлементыФормы.ДействияФормы.Кнопки.Печать.Кнопки.Отчет.Доступность = ложь;
	  ЭлементыФормы.ДействияФормы.Кнопки.Печать.Кнопки.Карточка.Доступность = ложь;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.Файлы.Доступность 	= ложь;
	  
	Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ИспользоватьНапоминания") тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.СписокСобытий.Доступность 	= ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.ТелефонныйЗвонок.Доступность  = ложь;
	    ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.ЛичнаяВстреча.Доступность  	= ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.ЭлектронноеПисьмо.Доступность = ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.ПочтовоеПисьмо.Доступность 	= ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.Создать.кнопки.Прочее.Доступность 			= ложь;
	КонецЕсли;

КонецЕсли;

Если  не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РезрешитьДобавлятьКонтрагентовИМ") тогда
	
	ЭлементыФормы.ДействияФормы.Кнопки.СоздатьКонтрагентаИМ.Доступность = Ложь;
	
КонецЕсли;

  	СписокВидыСравнения = Новый СписокЗначений;
	СписокВидыСравнения.Добавить(ВидСравнения.Равно);
	СписокВидыСравнения.Добавить(ВидСравнения.НеРавно);
	СписокВидыСравнения.Добавить(ВидСравнения.ВСписке);
	СписокВидыСравнения.Добавить(ВидСравнения.НеВСписке);
	
	ЭлементыФормы.ВидОтбора.СписокВыбора = СписокВидыСравнения;
	ЭлементыФормы.ВидОтбора.Значение     = СписокВидыСравнения[0].Значение;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииКонтрагентов"));
	ЭлементыФормы.статус.ТипЗначения = Новый ОписаниеТипов(МассивТипов);

    отборПоКатегории = Ложь;
КонецПроцедуры

Процедура ДействияФормыДействиеЗадолженность(Кнопка)
	Отчет = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	Отчет.ПереключательЗадолженность=3;
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаКон = КонецДня(ТекущаяДата());
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		СтрОтб.Использование = Ложь;	
	КонецЦикла;
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	СтрОтб.Использование = Истина;
	
	ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("ДоговорКонтрагента");
	ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Сделка");
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	ФормаОбработки.ОбновитьОтчет();
КонецПроцедуры

Процедура ДействияФормыКарточка(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
			Предупреждение("Нельзя формировать отчет по группе!");
			Возврат;
		Иначе
			Обр = обработки.ПечатьКарточкиКонтрагента.Создать(); //+++ 03.09.2012
			Обр.Контрагент =  ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
			Обр.Печать()
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыДействиеЦены(Кнопка)
	
	ссылка1 = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
Если НЕ (ссылка1=Null или ссылка1=неопределено или ссылка1.ЭтоГруппа) тогда
	Если ссылка1.Экспорт тогда  //+++ 12.01.2015
		
    ФормаПравила=РегистрыСведений.ПравилаЦенообразованияЭкспорт.ПолучитьФормуСписка();
	ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.Значение = 	ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
	
	ФормаПравила.ОткрытьМодально();	
	
	Иначе		

//	 Если Вопрос("Открыть НОВЫЕ Правила ценообразования?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
	Если константы.ЦенообразованиеПоКатегориям.Получить() тогда //16.02.2017 без вопроса
		ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = ссылка1;
		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);

	 Иначе	
		ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = ссылка1;
	КонецЕсли;
	
	ФормаПравила.ОткрытьМодально();	//17.09.2017 - ОБЯЗАТЕЛЬНО модально!
	
	КонецЕсли;
КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыИсторияЗвонков(Кнопка)
	ТД = ПолучитьТаблицуЗвонков(3, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка,ДобавитьМесяц(ТекущаяДата(),-6),ТекущаяДата());
	ТД.Открыть();
КонецПроцедуры

Процедура ДействияФормыСоздатьКонтрагентаИМ(Кнопка)
	
	Форма = Справочники.Контрагенты.ПолучитьФорму("ФормаКонтрагентИМ");
	Рез = Форма.ОткрытьМодально();
	
	Если Рез <> Неопределено ТОгда
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Родитель = Справочники.Контрагенты.КлиентыИМ;
		Контрагент.Наименование = Рез.Наименование;
		Контрагент.НаименованиеПолное = Рез.наименование;
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Контрагент.ДокументУдостоверяющийЛичность = "Паспорт Серия: " + Рез.Серия + ", Номер: " + Рез.Номер+ ", Выдан:  " + Рез.КемВыдан + " " + Рез.Код + "; Телефон: " + Рез.Телефон;
		Контрагент.КатегорияПокупателя = Справочники.КатегорииПокупателей.ИнтернетМагазин;
		Контрагент.ОсновнойМенеджерКонтрагента = глТекущийПользователь;
		Контрагент.Покупатель = Истина;
		Контрагент.Записать();
		
		дог = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Дог.Владелец = Контрагент.Ссылка;
		дог.Наименование = "Договор продажи";
		дог.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00004");
		дог.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		дог.Организация = Справочники.Организации.НайтиПоКоду("00001");
		дог.ОтветственноеЛицо = глТекущийПользователь;
		дог.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		дог.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
		дог.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду("643");
		дог.Записать();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыБыстрыйВВод(Кнопка)
	форма=Справочники.контрагенты.ПолучитьФорму("ФормаБыстрыйВвод");
	форма.открыть();
КонецПроцедуры

Процедура ДействияФормыЗагрузитьАнкету(Кнопка)
			  ТекСсылка = Справочники.ВнешниеОбработки.НайтиПоКоду("560"); 
			  ИмяФайла = ПолучитьИмяВременногоФайла(); 
			  ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
			  ДвоичныеДанные.Записать(ИмяФайла); 
			  ЗагрузкаАнкеты = ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
			  ЗагрузкаАнкеты.Загрузить();

КонецПроцедуры

Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Данныестроки = ОформлениеСтроки.Данныестроки;
		Если ДанныеСтроки.Ссылка.этоГруппа =ложь Тогда
			Отбор1 = Новый Структура();
			Отбор1.Вставить("Объект",ДанныеСтроки.Ссылка);
			Отбор1.Вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
			данные = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор1);	
			ОформлениеСтроки.Ячейки.Статус.Текст = ДАнные.Значение;
			ОформлениеСтроки.Ячейки.Статус.ОтображатьТекст = Истина;
			Отбор1 = Новый Структура();
			Отбор1.Вставить("Объект",ДанныеСтроки.Ссылка);
			Отбор1.Вставить("Свойство",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90184"));
			данные = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор1);	
			ОформлениеСтроки.Ячейки.Важность.Текст = ДАнные.Значение;
			ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст = Истина;
		конецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ДействияФормыОтборПоСтатусу(Кнопка)
	справочники.Контрагенты.ПолучитьФорму("Отбор").Открыть();
КонецПроцедуры


Процедура ВидОтбораПриИзменении(Элемент)
 Если ВидОтбора = ВидСравнения.Равно или ВидОтбора = ВидСравнения.неРавно Тогда
 МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииКонтрагентов"));
ЭлементыФормы.статус.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
Иначе
МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("списокЗначений"));
ЭлементыФормы.статус.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
МассивТиповП = Новый Массив;
МассивТиповП.Добавить(Тип("ПеречислениеСсылка.КатегорииКонтрагентов"));
ЭлементыФормы.статус.ТипЗначенияСписка = Новый ОписаниеТипов(МассивТиповП);
КонецЕсли;
КонецПроцедуры


Процедура ОтобратьНажатие(Элемент)
	Если ОтборПоКатегории тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	99=99
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И 98=98";
		
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
		Если типЗНЧ(ЭлементыФормы.статус.Значение)= Тип("СписокЗначений") тогда
			Запрос.УстановитьПараметр("списокЗначение", ЭлементыФормы.статус.Значение);
		иначе
			списокстатус = Новый списокЗначений;
			списокстатус.Добавить(ЭлементыФормы.статус.Значение);
			Запрос.УстановитьПараметр("списокЗначение",списокстатус);
		конецЕсли;
		Если ВидОтбора = ВидСравнения.Равно или ВидОтбора = ВидСравнения.ВСписке тогда
			Запрос.Текст = стрЗаменить(Запрос.Текст,"98=98","ЗначенияСвойствОбъектов.Значение В(&списокЗначение)");
		ИначеЕсли ВидОтбора = ВидСравнения.неРавно или ВидОтбора = ВидСравнения.неВСписке тогда
			Запрос.Текст = стрЗаменить(Запрос.Текст,"98=98","не ЗначенияСвойствОбъектов.Значение В(&списокЗначение)");
        конецЕсли;

		Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьПолныйСписокКонтрагентов") Тогда 
			Запрос.Текст = стрЗаменить(Запрос.Текст,"99=99","ЗначенияСвойствОбъектов.Объект В(&списокДокументов)");
			списокДокументов = Отбор["Ссылка"].Значение;
			Запрос.УстановитьПараметр("списокДокументов", списокДокументов);
		КонецЕсли;
		Результат = Запрос.Выполнить().Выгрузить();
		
		//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьПолныйСписокКонтрагентов") Тогда 
		//	Отбор.Добавить("Ссылка");
		//КонецЕсли;
		списокОтбор = Новый списокЗначений;
		СписокОтбор.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Объект"));
		Отбор["Ссылка"].Использование = Истина;
		Отбор["Ссылка"].ВидСравнения = ВидСравнения.ВСписке;
		Отбор["Ссылка"].Значение = списокОтбор;
	иначе
		//восстановим первоначальный отбор
	
		УстановитьОтборВСправочникКонтрагенты(Отбор, ЭлементыФормы.СправочникСписок);	
		Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
			Если РольДоступна("Кассир") тогда  // для бухгалтеров - надо видеть всех клиентов по своей группе... 
				группа = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов");
				СписокПользователей = новый СписокЗначений;
				Если группа<>неопределено и группа<>справочники.ГруппыПользователей.ПустаяСсылка() тогда
					для каждого стр1 из группа.ПользователиГруппы цикл
						СписокПользователей.Добавить(стр1.Пользователь);
					КонецЦикла;
				Иначе //только по себе!
					СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли;
				СписокКонтрагентовМенеджера = ПолучитьСписокКонтрагентовМенеджера(СписокПользователей);
				Отбор["Ссылка"].Значение = СписокКонтрагентовМенеджера;
			КонецЕсли;
			
		КонецЕсли;
	    конецЕсли;
	
КонецПроцедуры


Процедура ОтборПоКатегорииПриИзменении(Элемент)
	ЭлементыФормы.ВидОтбора.Доступность = ОтборПоКатегории;
	ЭлементыФормы.статус.Доступность = ОтборПоКатегории;
	Элементыформы.Отобрать.Доступность = ОтборПоКатегории;
	Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьПолныйСписокКонтрагентов") Тогда 
	Отбор["Ссылка"].Использование = Ложь;
	конецЕсли;
	если не отборпокатегории тогда
				УстановитьОтборВСправочникКонтрагенты(Отбор, ЭлементыФормы.СправочникСписок);	
		Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
			Если РольДоступна("Кассир") тогда  // для бухгалтеров - надо видеть всех клиентов по своей группе... 
				группа = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ГруппаПользователейДляРаспределенияЗаказов");
				СписокПользователей = новый СписокЗначений;
				Если группа<>неопределено и группа<>справочники.ГруппыПользователей.ПустаяСсылка() тогда
					для каждого стр1 из группа.ПользователиГруппы цикл
						СписокПользователей.Добавить(стр1.Пользователь);
					КонецЦикла;
				Иначе //только по себе!
					СписокПользователей.Добавить(ПараметрыСеанса.ТекущийПользователь);
				КонецЕсли;
				СписокКонтрагентовМенеджера = ПолучитьСписокКонтрагентовМенеджера(СписокПользователей);
				Отбор["Ссылка"].Значение = СписокКонтрагентовМенеджера;
			КонецЕсли;
			
		КонецЕсли;
   конецЕсли;
КонецПроцедуры


Процедура ДействияФормыАнализРаботыКлиента(Кнопка)
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
			
			Предупреждение("Нельзя формировать отчет по группе!");
			Возврат;
			
		Иначе			
						
			Отчет = Отчеты.АнализРаботыКлиента.Создать();
			
			ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекКонтрагент");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
			
			//
			ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДата");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ТекущаяДата();
			
			ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Год3");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = НачалоГода(ТекущаяДата()-63072000);
			
			ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДатаМинусГод");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ТекущаяДата()-3600*24*365;
			
			ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДатаМинус1_5Года");
			ПараметрСКД.Использование = Истина;
			ПараметрСКД.Значение  = ТекущаяДата()-3600*24*548;
			
			
			ФормаОтчета = Отчет.ПолучитьФорму();
			ФормаОтчета.ЭлементыФормы.Результат.Очистить();
			
			Отчет.СкомпоноватьРезультат(ФормаОтчета.ЭлементыФормы.Результат, ФормаОтчета.ДанныеРасшифровки);
			ФормаОтчета.Открыть();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

