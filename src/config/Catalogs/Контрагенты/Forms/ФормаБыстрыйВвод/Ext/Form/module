перем СпрКонт,КонтрагентЗаписан,СпрКонтЛица,
         новаяСсылка, новаяСсылкаКЛ;

Процедура ОсновноеНаправлениеПродажПриИзменении(Элемент)
	
	Если ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ОптовыйПокупательСРозницей 
		или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.СпециализированнаяРозничнаяСеть 
		или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.СреднийМелкийОптСРозницей 
		или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ДилерАвтоПроизводителя    	//+++ 02.05.2017 Задача № 26441 - для 8.Автосалон
		тогда
		ЭлементыФормы.НадписьНазваниеРТТ.Видимость = Истина;
		ЭлементыФормы.НазваниеРТТ.Видимость = Истина;
		Элементыформы.НадписьКоличествоРТТ.Видимость = Истина;
		ЭлементыФормы.КоличествоРТТ.Видимость = Истина;
		Элементыформы.НадписьПлощадьРТТ.Видимость = истина;
		ЭлементыФормы.ПлощадьРТТ.видимость = Истина;
	иначе
		ЭлементыФормы.НадписьНазваниеРТТ.Видимость = Ложь;
		ЭлементыФормы.НазваниеРТТ.Видимость = Ложь;
		Элементыформы.НадписьКоличествоРТТ.Видимость = Ложь;
		ЭлементыФормы.КоличествоРТТ.Видимость = Ложь;
		Элементыформы.НадписьПлощадьРТТ.Видимость = Ложь;
		ЭлементыФормы.ПлощадьРТТ.видимость = Ложь;
	конецЕсли;
	
	Если ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ДилерАвтоПроизводителя Тогда
		//ЭлементыФормы.НадписьНазваниеАвтосалона.Видимость = Истина;
		//ЭлементыФормы.НазваниеАвтосалона.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;
		ЭлементыФормы.ПродаваемыеМаркиАвто.Видимость = истина;
	иначе
		//ЭлементыФормы.НадписьНазваниеАвтосалона.Видимость = Ложь;
		//ЭлементыФормы.НазваниеАвтосалона.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;
		ЭлементыФормы.ПродаваемыеМаркиАвто.Видимость = Ложь;
	конецЕсли;
КонецПроцедуры

Процедура ПродаетАксыПриИзменении(Элемент)
	Если продаетАксы Тогда
		ЭлементыФормы.НадписьПлощадьАксы.Видимость = Истина;
		ЭлементыФормы.ПлощадьАксы.Видимость = Истина;
	иначе
		ЭлементыФормы.НадписьПлощадьАксы.Видимость = Ложь;
		ЭлементыФормы.ПлощадьАксы.Видимость = Ложь;
	конецЕсли;	
	РазвиватьАксы = ПродаетАксы;
	ЭлементыФормы.РазвиватьАксы.Доступность = не ПродаетАксы;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	Отказ = Ложь;
	//проверка обязательных полей
	Если Не значениеЗаполнено(КраткоеНаименование)Тогда
		Сообщить("Не заполнено краткое наименование!");
		отказ = Истина;
	конецЕсли;
	Если СпособЗнакомства <> "Тендер"  тогда                                                                                                                                                       
		Если Не значениеЗаполнено(СпособЗнакомства)Тогда
			Сообщить("Не заполнен способ знакомства!");
			отказ = Истина;
		конецЕсли;	
		Если не ЭкспортЗн  тогда
			Если Не значениеЗаполнено(Основноенаправлениепродаж)Тогда
				Сообщить("Не заполнено основное направление продаж!");
				отказ = Истина;
			конецЕсли;	
			Если не (ПродаетШины или ПродаетДиски или ПродаетАКБ или ПродаетАксы или ПродаетПрочее) Тогда
				Сообщить("Не выбрана ни одна товарная группа, представленная у контрагента!");
				отказ = Истина;
			конецЕсли;	
			
			Если ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ИнтернетМагазин или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ДилерАвтоПроизводителя Тогда
				Если не значениеЗаполнено(НазваниеСайта)тогда
					Сообщить("Не заполнено название сайта!");
					отказ = Истина;
				конецЕсли;
			конецЕсли;
			Если ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ОптовыйПокупательСРозницей или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.СпециализированнаяРозничнаяСеть или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.СреднийМелкийОптСРозницей или ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ДилерАвтоПроизводителя тогда
				Если не значениеЗаполнено(НазваниеРТТ)тогда
					Сообщить("Не заполнено название РТТ!");
					отказ = Истина;
				конецЕсли;
				Если не значениеЗаполнено(КоличествоРТТ)тогда
					Сообщить("Не заполнено количество РТТ!");
					отказ = Истина;
				конецЕсли;
				Если не значениеЗаполнено(ПлощадьРТТ)тогда
					Сообщить("Не заполнена площадь РТТ!");
					отказ = Истина;
				конецЕсли;
			конецЕсли;
			Если ОсновноеНаправлениеПродаж = Справочники.КатегорииПокупателей.ДилерАвтоПроизводителя Тогда
				//Если не значениеЗаполнено(НазваниеАвтосалона)тогда
				//	Сообщить("Не заполнено название автосалона!");
				//	отказ = Истина;
				//конецЕсли;
				Если ПродаваемыеМаркиАвто.Количество()=0 тогда
					Сообщить("Не заполнена ни одна марка продаваемого авто!");
					отказ = Истина;
				конецЕсли;
			конецЕсли;
			
			Если ОсновноеНаправлениеПродаж <> Справочники.КатегорииПокупателей.ИнтернетМагазин  Тогда
				Если не значениеЗаполнено(АдресФактический)и не ЭкспортЗн тогда
					Сообщить("Не заполнен фактический адрес!");
					отказ = Истина;
				конецЕсли;
			конецЕсли;
			Если Важность<1 или Важность>5 тогда
				Сообщить("Укажите важность(от 1 до 4)!");
				отказ = Истина;
			конецЕсли;
		конецЕсли;
	конецЕсли;
	//контактное лицо
	Если (не значениеЗаполнено(Фамилия) или не ЗначениеЗаполнено(Имя)) и Контакты.Количество()=0 Тогда
		Сообщить("Не заполнены ФИО контактного лица");
		Отказ = истина;
	конецЕсли; 
	Если (не значениеЗаполнено(должность))и Контакты.Количество()=0 тогда
		Сообщить("Не заполнена должность контактного лица");
		Отказ = истина;
	КонецЕсли;
	Если (не значениеЗаполнено(роль))и Контакты.Количество()=0 тогда
		Сообщить("Не заполнена роль контактного лица");
		Отказ = истина;
	КонецЕсли;
	Если (не значениеЗаполнено(телефон))и Контакты.Количество()=0 тогда
		Сообщить("Не заполнена телефон контактного лица");
		Отказ = истина;
	КонецЕсли;
	Если ЭкспортЗн и не ЗначениеЗаполнено(страна)тогда
		сообщить("Для экспортных контрагентов укажите страну!");
		отказ = Истина;
	конецЕсли;
	
	 строки = ОтветственныеЗаТовГруппы.НайтиСтроки(Новый Структура("Ответственный",Справочники.Пользователи.ПустаяСсылка()));
	Если Строки.Количество()=4 тогда
		сообщить("Не заполненны ответственные ни по одной товарной группе!");
		отказ = Истина;
	конецЕсли;
	
	
	Если не Отказ тогда
		попытка
						
			Если РольДоступна("МенеджерФормулы") тогда
				СпрКонт.Родитель = Справочники.Контрагенты.НайтиПоКоду("00031"); //Покупатели			
			Иначе
				СпрКонт.Родитель = Справочники.Контрагенты.НайтиПоКоду("П000001"); 			
			КонецЕсли;
			
			СпрКонт.Наименование = КраткоеНаименование;
			спрКонт.КатегорияПокупателя = ОсновноеНаправлениеПродаж;
			спрКонт.Покупатель = Истина;
			спрКонт.ОсновнойМенеджерКонтрагента = глТекущийПользователь;
			спрКонт.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			спрКонт.КоличествоРТТ = КоличествоРТТ;
			спрКонт.Экспорт = ЭкспортЗн;
			спрКонт.страна = страна;
			спрКонт.УсловияОплаты  = УсловияОплаты;
			спрКонт.Нал = нал;
			спрКонт.Безнал = Безнал;
			//спрКонт.ЧислоДнейОтсрочкиПоДоговору = ЧислоДнейОтсрочкиПоДоговору;
			спрКонт.Суд = "Третейский суд";
			спрКонт.УведомлениеПДЗ = Истина;
			спрКонт.УведомлениеДолжнику = Истина;
			спрКонт.способОтгрузки = способОтгрузки;
			спрКонт.ДопустимоеЧислоДнейЗадолженности = ЧислоДнейОтсрочкиПоДоговору;
		
			Для каждого стр из КатегорииЦен  цикл
				строка = спрКонт.КатегорияСкидок.добавить();
				ЗаполнитьЗначенияСвойств(строка,стр);
			конецЦикла;
			
			
			Если ЗначениеЗаполнено(ИннПроверка) Тогда
				спрКонт.ИНН = ИннПроверка;
			КонецЕсли;
			Если ЗначениеЗаполнено(КппПроверка) Тогда
				спрКонт.КПП = КппПроверка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
				спрКонт.НаименованиеПолное = ПолноеНаименование;
			КонецЕсли;
			
			//СпрКонт.УстановитьСсылкуНового(новаяСсылка);
			СпрКонт.записать();
			
			//запишем свойство "Важность"
			Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
			Запись.Объект = СпрКонт.ссылка;
			Запись.Свойство = ПланывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90184");
			Запись.Значение = Важность;
			Запись.Записать();
			
			//запишем свойство "РабочаяГруппа"
			Если РабочаяГруппа <> Справочники.Контрагенты.ПустаяСсылка() тогда
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = СпрКонт.ссылка;
				Запись.Свойство = ПланывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90230");
				Запись.Значение = РабочаяГруппа;
				Запись.Записать();
			конецЕсли;
			
			
			
			//запишем свойство категория контрагентов
			Если РабочаяГруппа <> Справочники.Контрагенты.ПустаяСсылка() тогда
				Отбор = Новый структура;
				Отбор.Вставить("Объект",РабочаяГруппа);
				Отбор.Вставить("Свойство",ПланывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218"));
				ГлавнаяЗапись = РегистрыСведений.ЗначенияСвойствОбъектов.Получить(Отбор);
				
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = СпрКонт.ссылка;
				Запись.Свойство = ПланывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218");
				Запись.Значение = ГлавнаяЗапись.значение;
				Запись.Записать();
			иначе
				Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = СпрКонт.ссылка;
				Запись.Свойство = ПланывидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90218");
				Запись.Значение = Перечисления.КатегорииКонтрагентов.Потенциальные;
				Запись.Записать();
			конецЕсли;
			
			///запишем ответственных по товарным группам
			Для каждого стр из ОтветственныеЗаТовГруппы цикл
				Запись = РегистрыСведений.СтатусыКонтрагентовПоТоварнымГруппам.СоздатьМенеджерЗаписи();
				Запись.Контрагент = СпрКонт.ссылка;
				Запись.ТоварнаяГруппа = стр.ТоварнаяГруппа;
				Запись.Ответственный = стр.Ответственный;
				Запись.Записать();
			конецЦикла;
			
			Выборка = Справочники.ДополнительнаяИнформацияПоКонтрагентам.Выбрать( ,СпрКонт.ссылка,,);
			Если Выборка.Следующий() тогда
				ДопИнфо = Выборка.ПолучитьОбъект();	
			иначе	
				ДопИнфо = Справочники.ДополнительнаяИнформацияПоКонтрагентам.СоздатьЭлемент();
			конецЕсли;
			ДопИнфо.Владелец = спрКонт.ссылка;
			ДопИнфо.НазваниеСайта = НазваниеСайта;
			//ДопИнфо.НазваниеАвтосалона = НазваниеАвтосалона;
			ДопИнфо.НазваниеРТТ = НазваниеРТТ;
			ДопИнфо.КоличествоРТТ = КоличествоРТТ;
			ДопИнфо.ПлощадьАКСЫ = ПлощадьАксы;
			ДопИнфо.ПлощадьРТТ = ПлощадьРТТ;
			ДопИнфо.ПродаетДиски = ПродаетДиски;
			ДопИнфо.ПродаетШины = ПродаетШины;
			ДопИнфо.ПродаетАКБ = ПродаетАКБ;
			ДопИнфо.ПродаетАксы = ПродаетАксы;
			ДопИнфо.ПродаетПрочее = ПродаетПрочее;
			ДопИнфо.СпособЗнакомства = СпособЗнакомства;
			//продаваемые марки авто
			Для каждого стр из ПродаваемыеМаркиАвто Цикл
				строка = ДопИнфо.ПродаваемыеМаркиАвто.Добавить();
				строка.МаркаАвто = стр.МаркаАвто;
			конецЦикла;
			
			ДопИнфо.П_РазвиватьШины = РазвиватьШины;
			ДопИнфо.П_РазвиватьДиски =РазвиватьДиски;
			ДопИнфо.П_РазвиватьАксы = РазвиватьАксы;
			ДопИнфо.П_РазвиватьАКБ = РазвиватьАКБ;
			ДопИнфо.П_РазвиватьЗапчасти = РазвиватьЗапчасти;
			ДопИнфо.П_РазвиватьАвтомасла = РазвиватьАвтомасла;
			ДопИнфо.П_РазвиватьПрочее = РазвиватьПрочее;
			ДопИнфо.П_РазвиватьНичего = РазвиватьНичего;
			
			
			
			
			
			
			
			ДопИнфо.Записать();
			
			//Адрес сайта
			Если ЗначениеЗаполнено(НазваниеСайта) тогда
				РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				РегКИ1.Объект = спрКонт.Ссылка;
				РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
				//РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00018");
				РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Веб-страница");
				РегКИ1.Представление = НазваниеСайта;
				РегКИ1.Записать(Истина);	
			конецЕсли;
			
			если  ЗначениеЗаполнено(Фамилия)и ЗначениеЗаполнено(имя) тогда
				СпрКонтЛица.Фамилия = Фамилия;
				СпрКонтЛица.Имя = Имя;
				СпрКонтЛица.Отчество = Отчество;
				СпрКонтЛица.Должность = Должность;
				СпрКонтЛица.ВидКонтактногоЛица = перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
				СпрКонтЛица.наименование = Фамилия+" "+Имя+" "+Отчество;
				СпрКонтЛица.Роль= Роль;
				
				СпрКонтЛица.записать();
				
				//Телефон
				Если сокрЛП(телефон)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СпрКонтЛица.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					РегКИ1.Представление = телефон;
					РегКИ1.Записать(Истина);
				конецЕсли;
				
				//Почта
				Если сокрЛП(почта)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СпрКонтЛица.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
					РегКИ1.Представление = почта;
					РегКИ1.Записать(Истина);	
				конецЕсли;
				
				//скайп
				Если сокрЛП(Скайп)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СпрКонтЛица.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
					РегКИ1.Представление = Скайп;
					РегКИ1.Записать(Истина);		
				конецЕсли;
			конецЕсли;
			
			//АдресЭлектроннойПочтыДляОбменаДокументами
			Если сокрЛП(АдресЭлектроннойПочтыДляОбменаДокументами)<> "" тогда
				РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				РегКИ1.Объект = спрКонт.Ссылка;
				РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
				РегКИ1.Представление = АдресЭлектроннойПочтыДляОбменаДокументами;
				РегКИ1.Записать(Истина);	
			конецЕсли;
			
			Для каждого стр из Контакты цикл
				СПКЛ = Справочники.КонтактныеЛица.СоздатьЭлемент();
				СПКЛ.ОбъектВладелец = СпрКонт.ссылка;
				СПКЛ.Фамилия = стр.Фамилия;
				СПКЛ.Имя = стр.Имя;
				СПКЛ.Отчество = стр.Отчество;
				СПКЛ.Должность = стр.Должность;
				СПКЛ.Роль = стр.Роль;
				СПКЛ.ВидКонтактногоЛица = перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
				СПКЛ.наименование = стр.Фамилия+" "+стр.Имя+" "+стр.Отчество;
				СПКЛ.записать();
				//телефон
				Если сокрЛП(стр.телефон)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СПКЛ.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					РегКИ1.Представление = стр.телефон;
					РегКИ1.Записать(Истина);
				конецЕсли;
				//почта
				Если сокрЛП(стр.почта)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СПКЛ.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
					РегКИ1.Представление = стр.почта;
					РегКИ1.Записать(Истина);
					
				конецЕсли;
				//скайп
				Если сокрЛП(стр.скайп)<> "" тогда
					РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					РегКИ1.Объект = СПКЛ.Ссылка;
					РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
					РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
					РегКИ1.Представление = стр.скайп;
					РегКИ1.Записать(Истина);
					
				конецЕсли;
			конецЦикла;
			///+++ Шарафутдинов по задаче  47084 
			//запишем Помощник менеджера
			Если ПомщникМенеджера <>"Нет" тогда
				Запись = РегистрыСведений.СоответствиеМенеджеровРегионам.СоздатьМенеджерЗаписи();
				Запись.Пользователь = ПомщникМенеджера;
				Запись.Регион = СпрКонт.ссылка;
				Запись.ВидСотрудника = Перечисления.ВидыСотрудниковОтделаПродаж.Помощник;
				Запись.Записать();
			КонецЕсли;
			///--- Шарафутдинов по задаче  47084 
			
			
			//СпрКонт.получитьФорму().Открыть();
			//Если формула, скопируем ФактАдрес в ЮрАдрес
			Если РольДоступна("МенеджерФормулы") тогда
				АдресФ = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
				АдресФ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				АдресФ.Вид = справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				АдресФ.Объект = СпрКонт.ссылка;
				АдресФ.Прочитать();
				Если АдресФ.Выбран() тогда
					РегКИЮр=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(РегКИЮр,АдресФ);
					РегКИЮр.Вид = справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					РегКИЮр.Записать();
				КонецЕсли;
			КонецЕсли;		
	
			
			КонтрагентЗаписан= Истина;                                        
		исключение
		Сообщить("Не удалось записать контрагента!");	
		конецПопытки;
	конецЕсли;
	Если  КонтрагентЗаписан тогда
		Ответ = Вопрос("Перейти в карточку контрагента?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
				Форма =СпрКонт.получитьФорму();
				Форма.Открыть();
	            Закрыть();
				Форма.записатьвФорме();
		КонецЕсли;
	конецесли;
КонецПроцедуры

Процедура АдресФактическийНачалоВыбора(Элемент, СтандартнаяОбработка)
	РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	
	
	Если не КонтрагентЗаписан  и ЭкспортЗн тогда
		сообщить("Для занесения адреса по экспортным контрагентам, необходимо сначала записать карточку!");	
	иначеЕсли  КонтрагентЗаписан тогда	
		РегКИ1.Объект = спрКонт.Ссылка;
	иначе
		//РегКИ1.Объект = спрКонт.ПолучитьСсылкуНового();
		//РегКИ1.Объект = спрКонт.Ссылка;
		РегКИ1.Объект = НоваяСсылка;
	конецЕсли;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	//ОбработкаРедактирования.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ОбработкаРедактирования.Вид = справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ОбработкаРедактирования.РедактироватьЗапись(РегКИ1,Истина,ЭтаФорма);
КонецПроцедуры

Процедура ПриОткрытии()
	//создадим ссылку нового контрагента (и запомним её)
	новаяСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор());	
	спрКонт = справочники.Контрагенты.СоздатьЭлемент();	
	СпрКонт.УстановитьСсылкуНового(новаяСсылка);
	//создадим ссылку нового контактного лица
	новаяСсылкаКЛ = Справочники.КонтактныеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор());
	спрКонтЛица = справочники.КонтактныеЛица.СоздатьЭлемент();
	СпрКонтЛица.УстановитьСсылкуНового(новаяСсылкаКЛ);
	СпрКонтЛица.ОбъектВладелец = новаяСсылка;
	КонтрагентЗаписан = Ложь;
	//заполним ответственных за тов.группы
	стр =ОтветственныеЗаТовГруппы.Добавить();
	стр.ТоварнаяГруппа = Перечисления.ВидыТоваров.Диски;
	стр =ОтветственныеЗаТовГруппы.Добавить();
	стр.ТоварнаяГруппа = Перечисления.ВидыТоваров.Шины;
	стр =ОтветственныеЗаТовГруппы.Добавить();
	стр.ТоварнаяГруппа = Перечисления.ВидыТоваров.Акб;
	стр =ОтветственныеЗаТовГруппы.Добавить();
	стр.ТоварнаяГруппа = Перечисления.ВидыТоваров.Аксессуары;
	//УсловияОплаты
	УсловияОплаты = "Предоплата по счетам";
    безнал = Истина;	
	СпособОтгрузки = Справочники.СпособыОтгрузкиТовара.НайтиПоКоду("6");
	//+++ Шарафутдинов по задаче 47084 
	ЗаполнитьСписокВыбораПомощникМенеджера();
	//--- Шарафутдинов по задаче 47084 
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		еСЛИ Параметр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Адрес;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = новаяСсылка; //+++ 09.11.2018 было: спрКонт.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			Если РегКИ1.Количество()>0 тогда
				АдресФактический = РегКИ1[0].Представление;
				//+++ Шарафутдинов    20.07.2018
				СпрКонт.Регион = Справочники.Регионы.НайтиПоНаименованию(СокрЛП(РегКИ1[0].Поле2));				
				//--- Шарафутдинов    20.07.2018
			конецЕсли;
		иначеЕсли Параметр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Телефон;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = новаяСсылкаКЛ; //+++ 09.11.2018 было: спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			Если РегКИ1.Количество()>0 тогда
				Телефон = РегКИ1[0].Представление;
			конецЕсли;
		иначеЕсли Параметр.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Другое;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = новаяСсылкаКЛ; //+++ 09.11.2018 было: спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			
			РегКИ1.Прочитать();
			Если РегКИ1.Количество()>0 тогда
				Скайп = РегКИ1[0].Представление;
			конецЕсли;
		иначеЕсли Параметр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = новаяСсылкаКЛ; //+++ 09.11.2018 было: спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			
			РегКИ1.Прочитать();
			Если РегКИ1.Количество()>0 тогда
				Почта = РегКИ1[0].Представление;
			конецЕсли;
			
			РегКИ1.Отбор.Объект.Значение = новаяСсылка; //+++ 09.11.2018 было: спрКонт.ПолучитьСсылкуНового();
			
			РегКИ1.Прочитать();
			Если РегКИ1.Количество()>0 тогда
				АдресЭлектроннойПочтыДляОбменаДокументами = РегКИ1[0].Представление;
			конецЕсли;
		конецЕсли;
		
		
	конецЕсли;
	
КонецПроцедуры

Процедура телефонНачалоВыбора(Элемент, СтандартнаяОбработка)
	РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	РегКИ1.Объект = спрКонтЛица.ПолучитьСсылкуНового();
	РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.РедактироватьЗапись(РегКИ1,Истина,ЭтаФорма);
	
КонецПроцедуры

Процедура СкайпНачалоВыбора(Элемент, СтандартнаяОбработка)
	РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	РегКИ1.Объект = спрКонтЛица.ПолучитьСсылкуНового();
	РегКИ1.Тип = Перечисления.ТипыКонтактнойИнформации.Другое;
	РегКИ1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.РедактироватьЗапись(РегКИ1,Истина,ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	Если не КонтрагентЗаписан Тогда
		//удалим контактную информацию изрегистра сведений
		Если ЗначениеЗаполнено(АдресФактический) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Адрес;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонт.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;
		Если ЗначениеЗаполнено(Телефон) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Телефон;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;	
		Если ЗначениеЗаполнено(Скайп) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Другое;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;	
		Если ЗначениеЗаполнено(Почта) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;
	иначе	
	//	СпрКонт.получитьФорму().Открыть();
	конецЕсли;	
КонецПроцедуры

Процедура ДобавитьНажатие(Элемент)
	Отказ = Ложь;
	
	Если (не значениеЗаполнено(Фамилия) или не ЗначениеЗаполнено(Имя))  Тогда
		Сообщить("Не заполнены ФИО контактного лица");
		Отказ = истина;
	конецЕсли; 
	Если (не значениеЗаполнено(должность)) тогда
		Сообщить("Не заполнена должность контактного лица");
		Отказ = истина;
	КонецЕсли;
	Если (не значениеЗаполнено(роль)) тогда
		Сообщить("Не заполнена роль контактного лица");
		Отказ = истина;
	КонецЕсли;
	Если (не значениеЗаполнено(телефон)) тогда
		Сообщить("Не заполнена телефон контактного лица");
		Отказ = истина;
	КонецЕсли;
	
	Если не Отказ Тогда
		
		Если ЗначениеЗаполнено(Телефон) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Телефон;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;	
		Если ЗначениеЗаполнено(Скайп) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.Другое;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00017");
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;	
		Если ЗначениеЗаполнено(Почта) Тогда
			РегКИ1=РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
			РегКИ1.Отбор.Тип.Значение = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			РегКИ1.Отбор.Тип.Использование = Истина;
			РегКИ1.Отбор.Вид.Значение =справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами;
			РегКИ1.Отбор.Вид.Использование = Истина;
			РегКИ1.Отбор.Объект.Значение = спрКонтЛица.ПолучитьСсылкуНового();
			РегКИ1.Отбор.Объект.Использование = Истина;
			РегКИ1.Прочитать();
			РегКИ1.Очистить();
			РегКИ1.Записать();
		конецЕсли;
		стр = Контакты.Добавить();
		стр.Фамилия = Фамилия;
		стр.Имя = Имя;
		стр.Отчество = Отчество;
		стр.Должность = Должность;
		стр.телефон = телефон;
		стр.Почта = почта;
		стр.Скайп = Скайп;
		стр.роль= роль;
		фамилия ="";
		Имя ="";
		Отчество ="";
		Должность ="";
		телефон ="";
		почта = "";
		скайп="";
		роль = справочники.РолиКонтактныхЛиц.ПустаяСсылка();	
	конецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры


   Процедура ВажностьПриИзменении(Элемент)
	   Если Элемент.Значение>4 тогда
		   Важность =4;
	   иначеЕсли Элемент.Значение<0 тогда
		   Важность =0;
	   конецесли;	   
   КонецПроцедуры

Процедура ЭкспортПриИзменении(Элемент)
	СпрКонт.экспорт = ЭкспортЗн;
	ЭлементыФормы.Надписьстрана.Видимость = ЭкспортЗн;
	ЭлементыФормы.страна.Видимость = ЭкспортЗн;
	Если не ЭкспортЗн тогда
		страна = Справочники.КлассификаторСтранМира.ПустаяСсылка();
	конецЕсли;
КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	КатегорииЦен.Очистить();
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	для каждого вид1 из списокВидов цикл
		стр1 = КатегорииЦен.Добавить();
		стр1.видТовара = вид1.Значение;
		стр1.Категория = перечисления.КатегорииСкидок.к3;
	КонецЦикла;				   
КонецПроцедуры

Процедура ПродаетШиныПриИзменении(Элемент)
	РазвиватьШины = ПродаетШины;
	ЭлементыФормы.РазвиватьШины.Доступность = не ПродаетШины;
КонецПроцедуры

Процедура ПродаетДискиПриИзменении(Элемент)
	РазвиватьДиски = ПродаетДиски;
	ЭлементыФормы.РазвиватьДиски.Доступность = не ПродаетДиски;
КонецПроцедуры

Процедура ПродаетПрочееПриИзменении(Элемент)
	РазвиватьПрочее = ПродаетПрочее;
	ЭлементыФормы.РазвиватьПрочее.Доступность = не ПродаетПрочее;
КонецПроцедуры

Процедура ПродаетАКБПриИзменении(Элемент)
	РазвиватьАКБ = ПродаетАКБ;
	ЭлементыФормы.РазвиватьАКБ.Доступность = не ПродаетАКБ;
КонецПроцедуры

Процедура АдресЭлектроннойПочтыДляОбменаДокументамиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	
	Контакты1 = Контакты.Скопировать();
	Контакты1.Свернуть("Почта");
	
	Для каждого СрокаКонтактов из Контакты1 Цикл
		Список.Добавить(СрокаКонтактов.Почта);	
	КонецЦикла;
	Если ЗначениеЗаполнено(почта) Тогда
		Список.Добавить(почта);
	КонецЕсли;
	
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры

Процедура почтаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
		
	Список = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочтыДляОбменаДокументами) Тогда
	Список.Добавить(АдресЭлектроннойПочтыДляОбменаДокументами);	
	КонецЕсли;
	
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры

Процедура УсловияОплатыПриИзменении(Элемент)
	Если  УсловияОплаты ="Предоплата по счетам"  тогда
		нал = Ложь;	
		ЭлементыФормы.нал.Доступность = Ложь;
	иначе 
		ЭлементыФормы.нал.Доступность = Истина;
	конецЕсли;
	
	если УсловияОплаты = "Предоплата" или УсловияОплаты = "Предоплата по счетам" тогда
		ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Ложь;
		ЧислоДнейОтсрочкиПоДоговору=0;
	иначе
		ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Истина;
	конецЕсли;
	если УсловияОплаты = "Отсрочка до 14 дн." и ЧислоДнейОтсрочкиПоДоговору>14 тогда	
		ЧислоДнейОтсрочкиПоДоговору=14;
	КонецЕсли;

КонецПроцедуры

Процедура ДопустимоеЧи(Элемент)
	если условияоплаты = "Отсрочка до 14 дн." и ЧислоДнейОтсрочкиПоДоговору>14 тогда	
		Предупреждение("Значение не может превышать 14 дней!", 30);
		ЧислоДнейОтсрочкиПоДоговору=14;
	ИначеЕсли ЧислоДнейОтсрочкиПоДоговору>999 тогда
		Предупреждение("Значение не может превышать 999 дней!", 30);
		ЧислоДнейОтсрочкиПоДоговору=999;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИНН_КПП()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И 11 = 11";
	
	Если ЗначениеЗаполнено(ИннПроверка) Тогда
		Запрос.УстановитьПараметр("ИНН", ИннПроверка);
		Если ЗначениеЗаполнено(КппПроверка) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "11 = 11", "Контрагенты.КПП=&КПП");
			Запрос.УстановитьПараметр("КПП", КппПроверка); 
		КонецЕсли;
		
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество() > 0 Тогда
			ЭлементыФормы.ИнфоОПроверке.Заголовок = "Клиет с такими ИНН или ИНН/КПП в базе ЯШТ уже есть!";
			ЭлементыФормы.ИнфоОПроверке.ЦветТекста = Новый Цвет(255, 0, 0);
		Иначе
			ЭлементыФормы.ИнфоОПроверке.Заголовок = "Клиента с таким ИНН / КПП в базе ЯШТ НЕТ!";
			ЭлементыФормы.ИнфоОПроверке.ЦветТекста = Новый Цвет(0, 140, 0);
		КонецЕсли;
	Иначе
		ЭлементыФормы.ИнфоОПроверке.Заголовок = "Введите ИНН, КПП (необязательно) для проверки";
		ЭлементыФормы.ИнфоОПроверке.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
КонецПроцедуры

Процедура ИннПроверкаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ИннПроверка = Текст;
	ПроверитьИНН_КПП();
КонецПроцедуры

Процедура КппПроверкаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	КппПроверка = Текст;
	ПроверитьИНН_КПП();
КонецПроцедуры


Процедура ЗаполнитьСписокВыбораПомощникМенеджера()
	    

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Код,
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Заблокирован";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ЭлементыФормы.ПомщникМенеджера.СписокВыбора.Добавить("Нет", "Нет");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		 ЭлементыФормы.ПомщникМенеджера.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	 КонецЦикла;
	 ЭлементыФормы.ПомщникМенеджера.Значение = "Нет";

	

КонецПроцедуры
