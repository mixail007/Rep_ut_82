Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

//Миронычев

Перем СтИНН;
Перем СтКПП;
Перем мКнопкаРедактироватьКИВДиалоге;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

перем КодСвойстваВажность;
Перем СтЗначение; //Сакулина
Перем КомуМожно;
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВидимостьГоловногоКонтрагента()
	
	ЭлементыФормы.ГоловнойКонтрагент.Видимость = ВходитВХолдинг;
	
КонецПроцедуры

Процедура ОбновитьТелефоныКонтактногоЛица()

	СтрокаТелефонов = "";
	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные <> Неопределено 
		И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ
		|
		|";
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Объект", ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		КонецЦикла;
	
	КонецЕсли;
	
	//Если Не ПустаяСтрока(СтрокаТелефонов) Тогда   //11.02.2016 - не надо!
	//	СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	//КонецЕсли;
	
	ЭлементыФормы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;

КонецПроцедуры

// Процедура контолирует длину ИНН и выводит сообщение.
//
Процедура ПроверитьИНН()

	Если ЗначениеНеЗаполнено(ИНН) Тогда
		Возврат;
	КонецЕсли;

	ИНН = СтрЗаменить(ИНН," ","");
	
	ДлинаИНН       = СтрДлина(ИНН);
	ТекстСообщения = "";

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ДлинаИНН = 12 Тогда
			ТекстСообщения = """ИНН"" физического лица 12 символов!";
		КонецЕсли;
	Иначе
		Если НЕ ДлинаИНН = 10 Тогда
			ТекстСообщения = """ИНН"" юридического лица 10 символов!";
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ТекстСообщения) Тогда
		СообщитьОбОшибке("Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Процедура управляет доступностью кнопок ввода новых заказов с контрагентом.
//
Процедура ДоступностьВводаНовыхЗаказов()

	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.Кнопки.НовыйЗаказПокупателя.Доступность           = Покупатель;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.Кнопки.НовыйЗаказПоставщику.Доступность           = Поставщик;
//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.Создать.Кнопки.НовыйЗаказПокупателя.Доступность = Покупатель;
//	ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.Создать.Кнопки.НовыйЗаказПоставщику.Доступность = Поставщик;

КонецПроцедуры

// Процедура изменяет доступность закладок в зависимости от записанности объекта.
//
Процедура ДоступностьЗакладок()
	ЭлементыФормы.Панель.Страницы.Категории.Доступность      = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.События.Доступность        = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.Свойства.Доступность       = НЕ ЭтоНовый();
	
//22.03.2018 по задаче №
ЭлементыФормы.КомментарийПоТерминалу.Доступность = (РольДоступна("ПравоЗавершенияРаботыПользователей")
									или  СокрЛП(глТекущийПользователь.Код)="Малышев Егор"
									или  СокрЛП(глТекущийПользователь.Код)="Бондаренко Е.Д. (снабжение)"
									или  СокрЛП(глТекущийПользователь.Код)="Пефти Сергей");

ЭлементыФормы.Панель.Страницы.СчетаИДоговоры.Доступность = НЕ ЭтоНовый();

    для каждого кнопка из ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки Цикл
      кнопка.доступность = Ложь;
  конецЦикла;
  
  Если РольДоступна("МенеджерФормулы") тогда
	 ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СоздатьДоговор.Доступность = истина; 
  КонецЕсли;

//09.09.2016  НЕЛЬЗЯ ВСЕМ ОТКРЫВАТЬ!!! 	
	Если НЕ ЭтоНовый()
	И (СокрЛП(глТекущийПользователь.Код) = "Лаврентьева"      // Секретарь
	   ИЛИ СокрЛП(глТекущийПользователь.Код) = "Цуканова Т.С."   
	   ИЛИ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") 
	   ИЛИ СокрЛП(глТекущийПользователь.Код) = "Глухова Т."   
	
	   ИЛИ РольДоступна("яштФинДиректор")   //ФИН ОТДЕЛ
	   ИЛИ КомуМожно.НайтиПоЗначению(глТекущийПользователь)<> неопределено  //23.09.2016
	   ИЛИ РольДоступна("ПравоЗавершенияРаботыПользователей")
	
	  )тогда //-----------------------даём доступ и снимаем только просмотр с таблицы------------------
	
		ЭлементыФормы.КоманднаяПанельДоговоры.Доступность = Истина;
		ЭлементыФормы.Договоры.ТолькоПросмотр = ложь;
		
	КонецЕсли;

КонецПроцедуры

// Процедура открывает форму нового документ Контакт.
//
Процедура ВвестиНовоеСобытие(Копирование = Ложь, Элемент = Неопределено, ВыбранныйВидСобытия = Неопределено)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 

	Если Копирование Тогда
		Если Элемент.ТекущаяСтрока <> Неопределено И НЕ Элемент.ТекущаяСтрока.Пустая() Тогда
			Элемент.ТекущаяСтрока.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		
		Если ВыбранныйВидСобытия = Неопределено Тогда
			
			СписокВыбора = Новый СписокЗначений;
			Для каждого ВидСобытия Из Перечисления.ВидыСобытий Цикл
				ЭлементСписка = СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
				ЭлементСписка.Картинка = ПолучитьКартинкуНапоминания(ВидСобытия);
			КонецЦикла; 

			Если Элемент <> Неопределено И Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
				ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.ВидСобытия;
			КонецЕсли;

			НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначенияПоискаВСписке);
			ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите тип документа", НайденныйЭлементСписка);
			
			Если ВыбранныйЭлемент <> Неопределено Тогда
				ВыбранныйВидСобытия = ВыбранныйЭлемент.Значение;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ВыбранныйВидСобытия <> Неопределено Тогда
			
			Док = Документы.Событие.СоздатьДокумент();
			
			Док.ВидСобытия     = ВыбранныйВидСобытия;
			Док.Контрагент     = Ссылка;
			Док.КонтактноеЛицо = ОсновноеКонтактноеЛицо;
			Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;

			ФормаСобытия       = Док.ПолучитьФорму(,ЭтаФорма);
			
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.События;
			ФормаСобытия.СтруктураОбъектКонтрагент = Новый Структура("Объект, ЗаписыватьОбъект", ЭтотОбъект, Истина);
			
			ФормаСобытия.Открыть();
			
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура считывает стадию взаимоотношений с контрагентом
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьСтадиюВзаимоотношений() Экспорт

	СтруктураСтадии = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьПоследнее(РабочаяДата, Новый Структура("Контрагент",Ссылка));
	СтадияРегистра  = СтруктураСтадии.Стадия;
	КлассПостоянногоПокупателя  = СтруктураСтадии.КлассПостоянногоПокупателя;
	
	Если НЕ ЗначениеНеЗаполнено(СтадияРегистра) Тогда
		Если СтадияРегистра = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
			СтадияВзаимоотношений = "Постоянный (" + СокрЛП(?(КлассПостоянногоПокупателя.Пустая(),"класс не выбран",КлассПостоянногоПокупателя)) + ")";
			
			//10.04.2019 - расцветка
			Если КлассПостоянногоПокупателя=Перечисления.XYZКлассификация.XКласс тогда
				элементыФормы.СтадияВзаимоотношений.ЦветТекста = webЦвета.ТемноКрасный;
			ИначеЕсли КлассПостоянногоПокупателя=Перечисления.XYZКлассификация.YКласс тогда
				элементыФормы.СтадияВзаимоотношений.ЦветТекста = webЦвета.ТемноСиний;
			ИначеЕсли КлассПостоянногоПокупателя=перечисления.XYZКлассификация.ZКласс тогда
				элементыФормы.СтадияВзаимоотношений.ЦветТекста = webЦвета.ТемноЗеленый;
			КонецЕсли;
			
		Иначе
			СтадияВзаимоотношений = СтадияРегистра;
		КонецЕсли; 
	Иначе
		СтадияВзаимоотношений = "Стадия взаимоотношений не указана";
	КонецЕсли;

КонецПроцедуры



Процедура ПрочитатьЗакрепленныхЗаКонтрагентом()
	
	ЭлементыФормы.Закрепленные.Заголовок = "";

	ТекстЗаголовка = "";
	
	оператор = "Оператор: ";
	Помощник = "Помощник: ";
	
	ЗакрепленныеОператорПомощник = ПолучитьЗакрпленныхЗаРегиономОператораПомощника(ЭтотОбъект.Регион, ЭтотОбъект.Ссылка);
	
	оператор = ?(ЗакрепленныеОператорПомощник.Оператор = "", оператор, оператор + ЗакрепленныеОператорПомощник.Оператор + "; ");
	Помощник = ?(ЗакрепленныеОператорПомощник.Помощник = "", Помощник, Помощник + ЗакрепленныеОператорПомощник.Помощник + "; ");

	ТекстЗаголовка = оператор + Помощник;
	ЭлементыФормы.Закрепленные.Заголовок = ТекстЗаголовка;		
	
КонецПроцедуры

// Процедура считывает стадию взаимоотношений с контрагентом
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьABCКлассПокупателя() Экспорт

	СтрокаКласса = "АВС-класс не указан";
	
	СтруктураКласса = РегистрыСведений.ABCКлассификацияПокупателей.ПолучитьПоследнее(РабочаяДата, Новый Структура("Контрагент",Ссылка));
	Если СтруктураКласса <> Неопределено И НЕ ЗначениеНеЗаполнено(СтруктураКласса.ABCКлассПокупателя) Тогда
		СтрокаКласса = СтруктураКласса.ABCКлассПокупателя;
		//10.04.2019 - расцветка
		Если СтрокаКласса=перечисления.ABCКлассификация.AКласс тогда
			элементыФормы.ABCКлассПокупателя.ЦветТекста = webЦвета.ТемноКрасный;
		ИначеЕсли СтрокаКласса=перечисления.ABCКлассификация.BКласс тогда
			элементыФормы.ABCКлассПокупателя.ЦветТекста = webЦвета.ТемноСиний;
		ИначеЕсли СтрокаКласса=перечисления.ABCКлассификация.CКласс тогда
			элементыФормы.ABCКлассПокупателя.ЦветТекста = webЦвета.ТемноЗеленый;
		КонецЕсли;	
	КонецЕсли;
	
	ABCКлассПокупателя = СтрокаКласса;
	
КонецПроцедуры

// Процедура считывает стадию надежность поставщика
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьНадежность() Экспорт

	СтруктураСтадии = РегистрыСведений.НадежностьПоставщиков.ПолучитьПоследнее(РабочаяДата, Новый Структура("Контрагент",Ссылка));
	Если СтруктураСтадии <> Неопределено И НЕ ЗначениеНеЗаполнено(СтруктураСтадии.Надежность) Тогда
		НадежностьПоставщика = СтруктураСтадии.Надежность;
	Иначе
		НадежностьПоставщика = "Надежность не указана";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
Процедура ОбновитьСвойства()

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	
	Свойства.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

//15.03.2016
процедура ОбновитьЧислоДнейОтсрочкиПоДоговору()
	
	//Если ЭтоНовый() Тогда
	//	ЧислоДнейОтсрочкиПоДоговору = 0;
	//КонецЕсли; 

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности  как ЧислоДней
	//|ИЗ
	//|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	//|ГДЕ
	//|	БумажныеДоговоры.Контрагент = &Контрагент
	//|	И БумажныеДоговоры.Номер = &Номер
	//|	И БумажныеДоговоры.Период = &Период";
	//
	//Запрос.УстановитьПараметр("Контрагент", ссылка);
	//дог = ссылка.ОсновнойДоговорКонтрагента;
	//Запрос.УстановитьПараметр("Номер",  дог.Номер);
	//Запрос.УстановитьПараметр("Период", дог.Дата );
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//Если Выборка.Следующий() тогда
	//	ЧислоДнейОтсрочкиПоДоговору = выборка.ЧислоДней;
	//	ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Ложь;         //09.06.2016
	//	ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.АвтоОтметкаНезаполненного = ложь;
	//КонецЕсли;
	ЧислоДнейОтсрочкиПоДоговору = ДопустимоеЧислоДнейЗадолженности;
КонецПроцедуры
	
// Процедура обновляет информацию в таблице категорий объекта.
//
Процедура ОбновитьКатегории()

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;

	Категории.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	Категории.ОбъектОтбораКатегорий = Ссылка;

	Категории.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельЮрФизЛицо.
//
Процедура ВидимостьПанелейЮрФизЛица()

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо;
		НеВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо;

	Иначе
		ВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо;
		НеВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо;
		
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница <> ВидимаяСтраница Тогда
		ВидимаяСтраница.Видимость = Истина;
		НеВидимаяСтраница.Видимость = Ложь;
		ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница = ВидимаяСтраница;
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельПокупательПоставщик.
//
Процедура ВидимостьПанелейПоставщикПокупатель()
	
	СтраницыПанели = ЭлементыФормы.ПанельПокупательПоставщик.Страницы;
	
	Если СтраницыПанели.КакПокупатель.Видимость <> Покупатель Тогда
		СтраницыПанели.КакПокупатель.Видимость = Покупатель;
	КонецЕсли; 

	Если СтраницыПанели.КакПоставщик.Видимость <> Поставщик Тогда
		СтраницыПанели.КакПоставщик.Видимость = Поставщик;
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает основной договор контрагента контрагента.
//
Процедура ПроверитьОсновнойДоговорКонтрагента(Отказ, НовыйОсновнойДоговорУказан)

	Если НЕ ЗначениеНеЗаполнено(ОсновнойДоговорКонтрагента) 
		 или Отказ //+++ 09.06.2016 - не писать договор... пока не все поля заполнены...
	 Тогда
		Возврат;
	КонецЕсли;

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Ссылка);
	Если ВыборкаДоговоров.Следующий() Тогда
		ОсновнойДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
	Иначе
		НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	//	НайденныйДоговорОбъект.ВедениеВзаиморасчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеВедениеВзаиморасчетовПоДоговорам");
	//	Если ЗначениеНеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
	//	КонецЕсли;

		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		Если ЗначениеНеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;

		НайденныйДоговорОбъект.Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		Если ЗначениеНеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Выборка = Справочники.Организации.Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
        
		НайденныйДоговорОбъект.Владелец           = Ссылка;
		НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
		НайденныйДоговорОбъект.ОтветственноеЛицо  = ?(ЗначениеНеЗаполнено(ОсновнойМенеджерКонтрагента), //+++ 11.01.2016 - договор на ОсновнойМенеджерКонтрагента!
		глТекущийПользователь, ОсновнойМенеджерКонтрагента); 
		
		Если Покупатель Тогда
	//		Если ЗначениеНеЗаполнено(УсловияОплаты) Тогда
				НайденныйДоговорОбъект.Наименование = "Договор предоплаты";
				НайденныйДоговорОбъект.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
	//		иначе
				Если УсловияОплаты ="Отсрочка" Тогда
					НайденныйДоговорОбъект.Наименование = "Договор отсрочки";
					НайденныйДоговорОбъект.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00004"); //отсрочка
				ИначеЕсли УсловияОплаты ="Отсрочка до 14 дн." Тогда
					НайденныйДоговорОбъект.Наименование = "Договор отсрочки до 14 дн.";
					НайденныйДоговорОбъект.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
				ИначеЕсли УсловияОплаты ="Предоплата по счетам" Тогда
					безнал =Истина;
					НайденныйДоговорОбъект.Наименование = "Договор предоплаты по счетам";
					НайденныйДоговорОбъект.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00015"); //предоплата
				КонецЕсли;	
	//		конецесли;
			
			Если не Безнал и Нал тогда
				НайденныйДоговорОбъект.Наименование = НайденныйДоговорОбъект.Наименование + "*";
			конецЕсли;
			Если Безнал и Нал и УсловияОплаты <>"Предоплата по счетам" тогда
				Ответ = Вопрос("Основной договор будет со *?", РежимДиалогаВопрос.ДаНет, 0);
				Если Ответ = КодВозвратаДиалога.Да Тогда
				НайденныйДоговорОбъект.Наименование = НайденныйДоговорОбъект.Наименование + "*";	
			    конецесли;	
			конецЕсли;

 			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
			
			Если ЭтотОбъект.Экспорт и НайденныйДоговорОбъект.Ссылка.Пустая() тогда //18.03.2016 - только для нового договора!
				НайденныйДоговорОбъект.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоНаименованию("USD");
			КонецЕсли;
			
			
			ДатаДог = ТекущаяДата();
			если НайденныйДоговорОбъект.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение тогда
				преф = НайденныйДоговорОбъект.ОтветственноеЛицо.ОсновноеПодразделение.ПрефиксИБ;
				если преф="Ео" или преф="ЕК" тогда преф = "ЕКТ";
				КонецЕсли;	
			иначе  преф = "ТК";
			КонецЕсли;
			НайденныйДоговорОбъект.Дата = ДатаДог;
			номер = преф+"-"+формат(день(ДатаДог),"ЧЦ=2; ЧВН=")+"/"
							+формат(месяц(ДатаДог),"ЧЦ=2; ЧВН=")+"/"
							+прав(формат(год(ДатаДог),"ДФ=dd.MM.yyyy"),2)+"-";
			Запрос = Новый Запрос; //все договоры за сегодня
			Запрос.Текст = "ВЫБРАТЬ ДоговорыКонтрагентов.Номер
			               |ИЗ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			               |ГДЕ ДоговорыКонтрагентов.Дата = &Дата
			               |	И ДоговорыКонтрагентов.Номер ПОДОБНО (&Номер1)
			               |УПОРЯДОЧИТЬ ПО ДоговорыКонтрагентов.Номер УБЫВ
			               |АВТОУПОРЯДОЧИВАНИЕ";
			Запрос.УстановитьПараметр("Дата",  НачалоДня(ДатаДог) );
			Запрос.УстановитьПараметр("Номер1",  номер+"%");
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ном=1;  L=стрДлина(номер);
			Пока Выборка.Следующий() Цикл
				ном1 = прав(выборка.Номер, стрДлина(выборка.Номер)-L);
				попытка 
					ном11 = число(ном1);
					если ном11>=ном тогда ном = ном11+1;
					КонецЕсли;
				исключение
					сообщить("Неверный номер "+выборка.Номер, СтатусСообщения.Внимание);
				КонецПопытки;	
			КонецЦикла;
			Если НайденныйДоговорОбъект.ТипДоговора <> справочники.ТипыДоговоров.НайтиПоКоду("00015")тогда 
			НайденныйДоговорОбъект.Номер = номер + строка(ном);
			конецЕсли;
			НайденныйДоговорОбъект.ДопустимоеЧислоДнейЗадолженности = ЧислоДнейОтсрочкиПоДоговору; //+++ 09.06.2016
			

			
	//-----------------------сразу бум.договор-----------------------------	
	Если НЕ ЭтотОбъект.Экспорт  и УсловияОплаты <>"Предоплата по счетам" тогда  //+++ 18.03.2016 - экспортным - не надо!!!
		
		попытка
			регСв = РегистрыСведений.БумажныеДоговоры.СоздатьМенеджерЗаписи();
			регСв.Период	=НайденныйДоговорОбъект.Дата;
			регСв.Номер 	=НайденныйДоговорОбъект.Номер;
			регСв.Контрагент=Ссылка; 
			
			регСв.ВидДоговора = НайденныйДоговорОбъект.ВидДоговора;//16.02.2018
			
			регСв.ДопустимоеЧислоДнейЗадолженности = НайденныйДоговорОбъект.ДопустимоеЧислоДнейЗадолженности; //+++ 09.06.2016
			
			//регСв.ДатаОкончанияДействия = '00010101';
			регСв.Записать();
			Сообщить("Автоматически создана запись о новом бумажном договоре № "+регСв.Номер+" от "+формат(регСв.Период,"ДЛФ=D"), СтатусСообщения.Информация);
		исключение
			Сообщить("У Вас недостаточно прав для записи данных о бумажном договоре!", СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЕсли;						//+++)
			
       ИначеЕсли Поставщик Тогда
	        НайденныйДоговорОбъект.Наименование = "Договор поставки";

			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;

		Попытка
			НайденныйДоговорОбъект.Записать();
			
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
			Отказ = Истина;
			Возврат;
		КонецПопытки;

		ОсновнойДоговорКонтрагента = НайденныйДоговорОбъект.Ссылка;
		НовыйОсновнойДоговорУказан = Истина;

	КонецЕсли;

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета()

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.БанковскиеСчета.ТекущаяСтрока.Ссылка = ОсновнойБанковскийСчет);
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного договора взаиморасчетов.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора()

	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
	//	ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Ложь;
	Иначе
		Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
		Иначе
			//+++ 05.06.2013 - ограничение выбора для ПриниматьЗаказыЧерезСайт
			Если НЕ РольДоступна("ПолныеПрава")   тогда
				ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка = ОсновнойДоговорКонтрагента);
				ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Ложь;
				ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СоздатьДоговор.Доступность = истина;
			Иначе
				ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка = ОсновнойДоговорКонтрагента);
				ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Истина;
                ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СоздатьДоговор.Доступность = истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного контактного лица.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()
	
	//15.03.2016 - выключено!
	//Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельКонтактныеЛица.Кнопки.СделатьОсновным.Доступность = Ложь;
	//Иначе
	//	ЭлементыФормы.КоманднаяПанельКонтактныеЛица.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка = ОсновноеКонтактноеЛицо);
	//КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного вида деятельности.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности()

	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельВидыДеятельности.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельВидыДеятельности.Кнопки.СделатьОсновным.Доступность = (НЕ (ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности = ОсновнойВидДеятельности) И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
	ПараметрыСеанса.ПустойКонтрагент = справочники.Контрагенты.ПустаяСсылка();//+++ 12.11.2015
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
		
	Если Не ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	  
	Если ТипЗнч(ПараметрОснование) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
		Запрос.УстановитьПараметр("Основание" , ПараметрОснование);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|   Контрагент
		|ИЗ
		|   РегистрСведений.СобственныеКонтрагенты 
		|ГДЕ Объект     = &Основание
		|    И ВидСвязи = &ВидСвязи";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Отказ = Истина;
			Если Вопрос("Для данной организации уже существует контрагент. Открыть форму?",
				        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Форма = Выборка.Контрагент.ПолучитьФорму("ФормаЭлемента");
				Форма.Открыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//+++( 03.09.2012 по умолчанию - потенциальные покупатели
	Если ЭтоНовый() и 
		НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) тогда
		Родитель = справочники.Контрагенты.ПотенциальныеПокупатели;
		ОсновнойМенеджерКонтрагента = параметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ПроверитьПрава(ЭтотОбъект, ЭтаФорма, Отказ);
	
КонецПроцедуры // ПередОткрытием

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
    Если условияоплаты = "Предоплата" или условияоплаты = "Предоплата по счетам" тогда
		ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Доступность = Ложь;
	конецЕсли;
	Если ЗначениеЗаполнено(Подписант) Тогда
		осн = Подписант.ОснованиеДляДоговора;
		Если осн <>"" тогда
		ЭлементыФормы.РаботаетНаОсновании.Значение ="Работает на основании: "+осн;
		иначе
		ЭлементыФормы.РаботаетНаОсновании.Значение ="Работает на основании: НЕ ЗАПОЛНЕНО";
	    ЭлементыФормы.РаботаетНаОсновании.ЦветТекста = webцвета.Красный;
		конецЕсли;
	конецЕсли;
	
//11.10.2018 ----------снято ограничение для всех!----------------------------------	
	//Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор") 
	//	или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Марешева И.Г.")
	//	или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Серков")
	//	или глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)")
	//Тогда
	//иначе	
	//	Элементыформы.ВыгружатьСерыйСписокВTerminal.Доступность  = Ложь; //РазрешитьГрузитьТоварыИзСтопЛиста
	//	Элементыформы.ВыгружатьЧерныйСписокВTerminal.Доступность = Ложь; //10.10.2018
	//конецЕсли;
	
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	
	ЗаполнитьТипыЦен();
	
	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 
	
	ПрочитатьСтадиюВзаимоотношений();
	ПрочитатьНадежность();
	ПрочитатьABCКлассПокупателя();
	
	ОбновитьСвойства();
	
	ОбновитьКатегории();
		
	Если ЭтоНовый() Тогда
		
		Если ЗначениеНеЗаполнено(ЮрФизЛицо) Тогда
			ЮрФизЛицо   = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		ВидДоставки = Перечисления.ВидыДоставкиНоменклатуры.НетДоставки;
		
		// установим флаги Покупатель и Поставщик в зависимости от настроек пользоватлеи
		ОсновнойСтатусКонтрагента = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСтатусКонтрагента");
		Покупатель = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		Поставщик  = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
	иначе
		//+++ 05.06.2013 - ограничение измения для ПриниматьЗаказыЧерезСайт
		Если ПриниматьЗаказыЧерезСайт и НЕ РольДоступна("ПолныеПрава") тогда
			ЭлементыФормы.ПриниматьЗаказыЧерезСайт.Доступность = ложь;
		КонецЕсли;
		
		//+++( 23.03.2015 - находим договоры поручительства по договорам с покупателем или С Комиссионером
		Если Покупатель тогда 
			Если ЗапретОтгрузки тогда
				Предупреждение("Все Отгрузки - запрещены!",3); 
			ИначеЕсли ЗапретитьВводЗаказаПокупателя тогда	
				Предупреждение("Ввод заказов покупателя - запрещен!",3); 
			Иначе
				запрос1 = новый Запрос;
				запрос1.Текст = "ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
				|	И ДоговорыКонтрагентов.ЕстьДогорПоручительства
				|	И (ДоговорыКонтрагентов.ВидДоговора = &СПокупателем 
				|		или ДоговорыКонтрагентов.ВидДоговора =&СКомиссионером) ";
				запрос1.УстановитьПараметр("Владелец", Ссылка);
				запрос1.УстановитьПараметр("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				запрос1.УстановитьПараметр("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				
				рез1 = запрос1.Выполнить();
				ЕстьДоговорПоручительства = НЕ рез1.Пустой(); //отображаем в карточке клиента
				//	
				//	//Если ЕстьДоговорПоручительства и ЕстьПодписаннаяСлужебнаяЗаписка тогда
				//     ЕстьПодписаннаяСлужебнаяЗаписка = ложь;  //выключаем автоматически
				//	   ЭлементыФормы.ЕстьПодписаннаяСлужебнаяЗаписка.Доступность = ЛОЖЬ; 
				//	//КонецЕсли;
				
				//-----------------------сообщение пользователю-------------------
				//		Если не ЕстьДоговорПоручительства 
				// 			и не ЕстьПодписаннаяСлужебнаяЗаписка 
				//			и не СтрДлина(ИНН)=12 тогда //ИП
				//		Предупреждение("   У Покупателя нет Договора Поручительства!
				//					   |Отгрузки (без предоплаты) будет заблокированы!",3); 
				//	    КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		//+++)
		
		//перенесено в приЗаписи
		////***2015.10.14
		//Если НЕ ЗначениеЗаполнено(ПроцентПени) Тогда
		//	ЭлементыФормы.ПроцентПени.Значение = яштПени.ПолучитьСтавкуПениПоКонтрагенту(Ссылка, ТекущаяДата());
		//	ЭтаФорма.Модифицированность = Ложь;
		//КонецЕсли;
		
		
		//+++ Шарафутдинов 11.05.2018  по задачам  43163 , 43169
		
		ПрочитатьЗакрепленныхЗаКонтрагентом();
		
		//--- Шарафутдинов 11.05.2018  по задачам  43163 , 43169
		
	КонецЕсли;
	
	ВидимостьПанелейПоставщикПокупатель();
	
	
	ВидимостьКонтрольДебиторскойЗадолженности();
	
	ДоступностьКонтрольЛимитаДебиторскойЗадолженности() ;
	
	ДоступностьРеквизитовДляМенеджеров();
	ДоступностьРеквизитовОбщее();
	
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.Файлы);
	ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
	ДоступностьЗакладок();
	ДоступностьВводаНовыхЗаказов();
	
	События.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	События.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
	События.Отбор.ДокументыПоКонтрагенту.ВидСравнения  = ВидСравнения.Равно;
	
	ЭлементыФормы.События.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
	
	КонтактныеЛица.Отбор.ОбъектВладелец.Значение      = Ссылка;
	КонтактныеЛица.Отбор.ОбъектВладелец.Использование = Истина;
	
	// Права доступа
	Если ЭтоНовый() Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	КонецЕсли;
	
	ОбслужитьТаблицуНастройкиПравДоступа();
	
	//Если НЕ ЭтоНовый() Тогда
	//	ВходитВХолдинг = НЕ(ГоловнойКонтрагент = Ссылка);
	//КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
	Если (КонтрагентПринадлежитСотрудникам(Ссылка) и ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда 
		ФизЛицо = НайтиФизЛицо(Ссылка);
		ЭлементыФормы.ФизЛицо.Доступность = Истина;
	Иначе 
		ЭлементыФормы.ФизЛицо.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьОтборВСправочникДоговорыКонтрагентов(Договоры.Отбор, ЭлементыФормы.Договоры);
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
	
	//+++( 03.09.2012 для всех можно
	Если ЭтоНовый() и 
		НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) тогда
		Родитель = справочники.Контрагенты.ПотенциальныеПокупатели;
		//16.12.16 Смирнов
		Если РольДоступна("МенеджерПоПродажамИМ") тогда
			Родитель = справочники.Контрагенты.КлиентыИМ;
		КонецЕсли;
		
		ОсновнойМенеджерКонтрагента = параметрыСеанса.ТекущийПользователь;
		ЭлементыФормы.Цены.ТолькоПросмотр = ложь;
		ЭлементыФормы.ФизЛицо.Доступность = Истина;
	КонецЕсли;
	
		
	Если НЕ Родитель = справочники.Контрагенты.ПотенциальныеПокупатели тогда //+++ 27.08.2012
		//ЭлементыФормы.Цены.ТолькоПросмотр = не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "КонтрагентыРазрешитьРедактировать");
		//28.10.2015 типы цен - только для менеджеров по закупкам 
		ЭлементыФормы.Цены.ТолькоПросмотр = не ( РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа") 
												или РольДоступна("яштФинДиректор")
												или РольДоступна("ПолныеПрава") );
	КонецЕсли; 
	//+++)
	
	//15.02.19  Для Филатовой доступ к ценам
	Если глТекущийПользователь= Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") тогда
		ЭлементыФормы.Цены.ТолькоПросмотр = Ложь;
	конецЕсли;	
	
	
	//+++ 26.12.2012
	//Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава"))  или
	Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
		
		//+++ 01.08.2013
		//ЭлементыФормы.ДействияФормы.Видимость = ложь;
		//ЭлементыФормы.ДействияФормы.Доступность = ложь;
		
		//- печать НЕ ограничена по контрагентам пользователя
		Если (РольДоступна("МенеджерПоПродажам")) тогда // нельзя 
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Печать.Кнопки.ДействиеЗадолженность.Доступность = ложь; 
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Печать.Кнопки.Отчет.Доступность    = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Печать.Кнопки.Карточка.Доступность = ложь;
		КонецЕсли;
		
		
		Если не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ИспользоватьНапоминания") тогда
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.СписокСобытий.Доступность 	   = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.ТелефонныйЗвонок.Доступность  = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.ЛичнаяВстреча.Доступность     = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.ЭлектронноеПисьмо.Доступность = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.ПочтовоеПисьмо.Доступность    = ложь;
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Создать.кнопки.Прочее.Доступность 		   = ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	//+++ 19.09.2014 если ПриниматьЗаказыЧерезСайт - показываем логин и пароль
	//Если ПриниматьЗаказыЧерезСайт тогда
	
	//04.12.2015 ---------видно всем, доступ у избранных-------------------
	//Если глТекущийПользователь = ОсновнойМенеджерКонтрагента							 // ответственный за договор
	//	или глТекущийПользователь = ЭтотОбъект.ОсновнойДоговорКонтрагента.ОтветственноеЛицо // основной менеджер
	//	или РольДоступна("ПолныеПрава") тогда
	
	флМожно = ЭтотОбъект.Покупатель 
	и ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЖурналыОтборПоРегиону")  //есть ОтборПоРегиону, раз открыл карточку - значит уже этот контрагент в разрешенных
		или глТекущийПользователь = ОсновнойМенеджерКонтрагента					    // ответственный за договор
		или глТекущийПользователь = ЭтотОбъект.ОсновнойДоговорКонтрагента.ОтветственноеЛицо // основной менеджер
		или РольДоступна("ПолныеПрава") 
		или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьАвтокомплектацию")  //Руководители направлений и менеджеры по дискам (для Экспортных клиентов)
	  );
	
		Если НЕ ЭтоНовый() тогда		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Авторизация.Наименование КАК База,
			|	Авторизация.Логин,
			|	Авторизация.Пароль
			|ИЗ
			|	Справочник.Авторизация КАК Авторизация
			|ГДЕ
			|	Авторизация.Владелец = &Владелец";
			
			Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
			Результат   = Запрос.Выполнить();
			Авторизация = Результат.Выгрузить();
			ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Заголовок = "Авторизация ("+строка(Авторизация.Количество())+")";
			
			//+++ 30.09.2014 - кнопка назначения авторизации
			Если Авторизация.Количество()=0 
			//	и ( РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоВзаимозачетам") или РольДоступна("яштФинДиректор") ) 
			тогда
				ЭлементыФормы.Store.Видимость = флМожно;// не всем!
				ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = ЛОЖЬ;
			иначе  
				ЭлементыФормы.Store.Видимость = ложь;
				ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = флМожно;
			КонецЕсли;	
			
		КонецЕсли;
		
		//+++ 04.12.2015 - только для покупателей!!!
		ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Видимость   = ЭтотОбъект.Покупатель;

//	КонецЕсли;
	//КонецЕсли;	
	
	
	//+++ 08.10.2014 -  (Ира Пятницкая, Оксана Петровна) и IT-отдел
	спецРоль =  РольДоступна("яштФинДиректор") 
	//или найти("Малышев Егор;Никитин М.И.;Алексеева О.С.;Гиззатуллина;",  //+++ 18.03.2016 фикс.набор менеджеров
	//		   СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)+";")>0    
	или РольДоступна("ПравоЗавершенияРаботыПользователей")
	//Адиянов<<< 
	Или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЭкспортныхКонтрагентов"); 
	//Адиянов>>>
	
	ЭлементыФормы.ДатаСрезаЦен.Доступность = спецРоль;
	ЭлементыФормы.Экспорт.Доступность 	   = спецРоль; //+++ 19.01.2015
	
	Если Не РольДоступна("Юристы") Тогда
		ЭлементыФормы.СудебныеРазбирательства.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанель1.Доступность = Ложь;
		
		//12.11.2015 --- только юристы могут обновлять! -------------
		ЭлементыФормы.ДанныеПоСудебнымДелам.Доступность = ложь;
		ЭлементыФормы.КоманднаяПанель4.Доступность = ложь;
	КонецЕсли;
	
//+++ 23.03.2015 доп.разрешения на изменение - ФИН отдел, Горохов, Красникова	
	Если РольДоступна("яштФинДиректор") //фин.отдел
		ИЛИ РольДоступна("ПравоЗавершенияРаботыПользователей") 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Горохов"
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Малышев Егор" 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Голубева В.С." 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Бондаренко Е.Д. (снабжение)" 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Филатова С.В." 

		Тогда
		
		ЭлементыФормы.ЗапретОтгрузки.Доступность = истина;
//		ЭлементыФормы.ЗапретитьВводЗаказаПокупателя.Доступность = истина;
		
		ЭлементыФормы.РазрешитьГрузитьПриПДЗБолееСемиДней.Доступность = истина;
	    ЭлементыФормы.ЕстьПодписаннаяСлужебнаяЗаписка.Доступность     = истина;
		
//+++ 11.01.2016 - новый реквизит		
		ЭлементыФормы.НадписьКонтрагентДляРезерваИМ.Видимость = истина;
		ЭлементыФормы.КонтрагентДляРезерваИМ.Видимость = истина;
		
//+++ 01.11.2016 - по задаче "Открытие доступа (задача №18773)"
	ИначеЕсли СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Смирнов А" тогда
		ЭлементыФормы.ЗапретОтгрузки.Доступность = истина;
		
	ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Лаврентьева" или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Глухова Т." или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код) = "Цуканова Т.С."  тогда      //персонально для Красниковой!
	    ЭлементыФормы.ЕстьПодписаннаяСлужебнаяЗаписка.Доступность     = истина;
		Элементыформы.ЕстьДоговорДПД.Доступность = Истина;

	КонецЕсли;
	
//+++ 08,06,2018 - установка скидки за продажи по *
	Если  СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Серков"
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Филатова С.В." 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Бондаренко Е.Д. (снабжение)" 
		ИЛИ СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Марешева (Новый)"  
		ИЛИ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"СтаршийМенеджерПодразделения")  //03.09.2018 -> для Лигуты и др. рук. Задача № 53627
		тогда
		ЭлементыФормы.ПроцентСкидкиНал.Доступность = Истина;
	конецЕсли;
	
	
	
	
//Лукьяненков 20.09.2017 - Разрешить видимость закладки "данные для договора" секретарям Красниковой и Лаврентьевой

	//Если СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Красникова" или СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Лаврентьева" Тогда
	//	ЭлементыФормы.способОтгрузки.Доступность = Истина;
	//	ЭлементыФормы.Нал.Доступность = Истина;
	//	ЭлементыФормы.Безнал.Доступность = Истина;
	//	ЭлементыФормы.УсловияОплаты.Доступность = Истина;
	//	ЭлементыФормы.ЖелаемыйЛимит.Доступность = Истина;
	//	ЭлементыФормы.ПроцентПени.Доступность = Истина;
	//	ЭлементыФормы.ПроцентПени1.Доступность = Истина;
	//	ЭлементыФормы.Подписант.Доступность = Истина;
	//	ЭлементыФормы.Суд.Доступность = Истина;
	//Иначе
	//	ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Ложь;
	//КонецЕсли;

//+++)

//ОЛ 11.02.2015 - для экспортных клиентов нужно указывать название ИНН в их стране
	ВидимостьНаименованиеИННЭкспорт();

// АЧ 16.07.2015 - отбор по судебным делам
	УстановитьОтборПоСудебнымДелам();
//+++ 14.12.2015	УстановитьОтборПоФайламДоверенностей();
	
	УстановитьОтборПоСудебнымРазбирательствамСДебиторами();

	//-------------Доступ ТОЛЬКО для Ани и Отдела ИТ-------------------
	//26.11.2015 - доступ для всех, но ограничение по полям
	
	//ЭлементыФормы.рсБумажныеДоговора.ТолькоПросмотр = НЕ 
	//			(СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Красникова"
	//			или РольДоступна("ПравоЗавершенияРаботыПользователей"));
	
	//+++ 05.02.2016 - для Серкова и менеджеров 
	Если ЭтоНовый() тогда
		ЭлементыФормы.Важность.Доступность = ложь;
	Иначе	
		ЭлементыФормы.Важность.Доступность = Истина;
		Важность = ПолучитьСвойство(КодСвойстваВажность,0);
	КонецЕсли;
	
	//23.03.2016 ---- для Бондаренко -----------------
	ЗаполнитьПунктыПроработки();
	
	//30.03.2016
	если не ЭтоНовый() тогда
		заполнитьТочки();
		ЭлементыФормы.Панель.Страницы.Точки.Заголовок = "Точки ("+строка(Точки.Количество())+")";
		
		// Сакулина
		БумажныеДоговораДействующие.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БумажныеДоговоры.Период КАК ДатаДоговора,
		|	БумажныеДоговоры.ДатаОкончанияДействия КАК ДатаОкончания,
		|	БумажныеДоговоры.Состояние,
		|	БумажныеДоговоры.ЕстьДоговорПоручительства,
		|	БумажныеДоговоры.Номер КАК НомерДоговора,
		|	БумажныеДоговоры.Пролонгируется
		|ИЗ
		|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
		|ГДЕ
		|	БумажныеДоговоры.Контрагент = &Контрагент
		|	И (НАЧАЛОПЕРИОДА(БумажныеДоговоры.ДатаОкончанияДействия, ДЕНЬ) > &ТекДата
		|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата
		|				И БумажныеДоговоры.Пролонгируется)"    ;
		Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101'));
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
		Запрос.УстановитьПараметр("Контрагент",Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовСтр  = БумажныеДоговораДействующие.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
		КонецЦикла;
		
		// Сакулина
	КонецЕсли;
	
	ОбновитьЧислоДнейОтсрочкиПоДоговору(); //+++ 15.03.2016
	
	Если КомуМожно.НайтиПоЗначению(ПараметрыСеанса.ТекущийПользователь)<> неопределено Тогда
		ЭлементыФормы.УведомлениеДолжнику.Доступность = Истина;
		ЭлементыФормы.УведомлениеПДЗ.Доступность = Истина;

	Иначе 
       	ЭлементыФормы.УведомлениеДолжнику.Доступность = Ложь;
		ЭлементыФормы.УведомлениеПДЗ.Доступность = Ложь;
    КонецЕсли; 
	
	 //Контур фокус
	яшт_КонтурФокус.КонтурФокусПоказатьИнформациюОКонтрагентеНаФорме(ЭтаФорма);
	
	//+++ 09.02.2017 для выгрузки прайсов в Terminal, если нет перс.правил - доступ ТОЛЬКО для IT-отдела!
	ЭлементыФормы.НеВыгружать.Доступность = РольДоступна("ПравоЗавершенияРаботыПользователей");
	
	если глТекущийПользователь <> справочники.Пользователи.НайтиПоКоду("Малышев Егор") тогда
	ЭлементыФормы.ПриоритетАвтокомплектации.Доступность = Ложь;
    конецесли;

    Если ЭтоНовый() и РольДоступна("ДополнительныеПраваВЭД") тогда
		ЭтотОбъект.Экспорт = Истина;
	КонецЕсли;
	
	ОбновитьДатуСозданияЭлемента();
	
	Если ЭтоНовый() Тогда
		ЗаполнитьПунктыСамовывоза();
	КонецЕсли;
	
	//20.02.2018
	Если АвтоматическиОбъединятьЗаказы тогда
	//	ЭлементыФормы.НеОбъединятьРазныеТовГруппы.Доступность = истина;
		ЭлементыФормы.АвтоматическиСтавитьВМаршрут.Доступность = АвтоматическиОбъединятьЗаказы; //13.03.2018
 	КонецЕсли;

	//+++ 27.03.2018 Филатова #
	ЭлементыФормы.РазрешитьСезоннуюОтсрочку.Доступность = ЕстьДогОтсрочки();
	
 КонецПроцедуры  //приоткрытии

 
//+++ 27.03.2018 --- Есть действующий дог.Отсрочки (не предоплаты) с покупателем
функция ЕстьДогОтсрочки()
	 Если ЭтоНовый() или НЕ Покупатель тогда
		 возврат ЛОЖЬ;
	 КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	               |	И НЕ ДоговорыКонтрагентов.ТипДоговора В (&СписДогПредоплаты)
	               |	И ( ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |		ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия >= &ТекДата )";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	Запрос.УстановитьПараметр("ВидДоговора", перечисления.ВидыДоговоровКонтрагентов.СПокупателем );
	СписДогПредоплаты = новый СписокЗначений;
	СписДогПредоплаты.Добавить( справочники.ТипыДоговоров.НайтиПоКоду("00001") ); //Предоплата
	СписДогПредоплаты.Добавить( справочники.ТипыДоговоров.НайтиПоКоду("00005") ); //Факторинг Предоплата
	СписДогПредоплаты.Добавить( справочники.ТипыДоговоров.НайтиПоКоду("00015") ); //Предоплата по счетам
	Запрос.УстановитьПараметр("СписДогПредоплаты", СписДогПредоплаты);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );
	
	Результат = Запрос.Выполнить();
	
	возврат НЕ результат.Пустой();
	 
 КонецФункции
 
 //Контур фокус
Процедура кнОткрытьОтчетКонтурФокус(Элемент)
	
	яшт_КонтурФокус.ОткрытьОтчетКонтурФокус(ЭтотОбъект);
	
КонецПроцедуры

 
 процедура заполнитьТочки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Точки.Номер,
	               |	Точки.Наименование,
	               |	Точки.Адрес,
	               |	Точки.КонтактноеЛицо,
	               |	Точки.ИнформацияДляВодителя,
	               |	Точки.Согласован,
	               |	Точки.Дата,
	               |	Точки.Тема,
	               |	Точки.Результат
	               |ИЗ
	               |	Справочник.Точки КАК Точки
	               |ГДЕ
	               |	Точки.Владелец = &Владелец
	               |	И Точки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	
	Результат = Запрос.Выполнить();
	точки = Результат.Выгрузить();
КонецПроцедуры  
Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПередЗаписью(Отказ)
	///признак для редактирования карточки контрагента
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БумажныеДоговоры.Период,
	|	БумажныеДоговоры.Контрагент,
	|	БумажныеДоговоры.Номер,
	|	БумажныеДоговоры.ДатаОкончанияДействия,
	|	БумажныеДоговоры.Состояние,
	|	БумажныеДоговоры.ЕстьДоговорПоручительства,
	|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
	|	БумажныеДоговоры.ПутьКФайлуДоговора,
	|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности,
	|	БумажныеДоговоры.Пролонгируется,
	|	БумажныеДоговоры.Комментарий
	|ИЗ
	|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	|ГДЕ
	|	БумажныеДоговоры.Контрагент = &Контрагент
	|	И (БумажныеДоговоры.ДатаОкончанияДействия > &ТекущаяДата
	|			ИЛИ БумажныеДоговоры.Пролонгируется)";
	
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатПоБумажнымДоговорам = Запрос.Выполнить();
	
	Если ЭтоНовый() тогда
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
			Если не ЭтотОбъект.Экспорт тогда
				Если Не ЗначениеЗаполнено(ОПФ) тогда
					Если ОПФ <> Справочники.ОПФ.НайтиПоКоду("000000003")тогда
						Если СтрДлина(СтрЗаменить(СокрЛП(Инн)," ", ""))<> 10 Тогда
							Сообщить("Длинна поля ИНН Контрагента у Юр.Лица должна быть 10 знаков");
							Отказ = Истина;
						КонецЕсли;
						Если СтрДлина(СтрЗаменить(СокрЛП(КПП)," ", ""))<> 9 Тогда
							Сообщить("Длинна поля Кпп Контрагента у Юр.Лица должна быть 9 знаков");
							Отказ = Истина;
						КонецЕсли;
					Иначе 
						Если СтрДлина(СтрЗаменить(СокрЛП(Инн)," ", ""))<> 12 Тогда
							Сообщить("Длинна поля ИНН Контрагента у Физ.Лица должна быть 12 знаков");
							Отказ = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	 

	//+++ проверка дублей +++
	таблКат = КатегорияСкидок.Выгрузить();
	таблКат.Свернуть("ВидТовара");
	Если таблКат.Количество()<> КатегорияСкидок.Количество() тогда
		Сообщить("Нельзя делать несколько Категорий скидок по одному Виду товара!",СтатусСообщения.Важное);
		Отказ	= Истина;
	КонецЕсли;	
		
	Если НЕ ВходитВХолдинг Тогда
		ГоловнойКонтрагент = Ссылка;
		Модифицированность = Ложь;
	КонецЕсли;
	Если  Константы.ОплатыРаспределяютМенеджеры.Получить() И ЗначениеНеЗаполнено(ОсновнойМенеджерКонтрагента) Тогда
		Сообщить("Основной менеджер контрагента должен быть указан.",СтатусСообщения.Важное);
		Отказ	= Истина;
	КонецЕсли;	
	
	Если Покупатель И ЗначениеНеЗаполнено(КатегорияПокупателя) и не ЭтотОбъект.Экспорт Тогда //18.03.2016 не Экспорт
		Сообщить("Не указано Основное направление продаж покупателя!",СтатусСообщения.Важное); //02.03.2016
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;  //+++ 10.03.2015
		Отказ	= Истина;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ЮрФизЛицо) тогда
		Сообщить("Не указано юр/физ лицо!",СтатусСообщения.Важное); //27.09.2018
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;  
		Отказ	= Истина;		
	КонецЕсли;
	
	//01.09.17 Смирнов
	Если не ЭтоНовый()  //+++ 15.02.2018 - невозможно установить Важность ДО записи!
			И Покупатель И Важность=0 
			И ЭтотОбъект.экспорт = Ложь 
			И Родитель<>Справочники.Контрагенты.КлиентыИМ //НайтиПоНаименованию("Клиенты ИМ") 
	Тогда 
		Сообщить("Не указана Важность покупателя!!!", СтатусСообщения.Внимание); //02.03.2016
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;  //+++ 10.03.2015
		Отказ	= Истина;
	КонецЕсли;


//+++ 05.02.2016 - ОБЯЗАТЕЛЬНЫЕ ПОЛЯ ============================================	
//	По заданию Серкова (декабрь) - добавлена проверка "обязательных" полей
//только для покупателей: Адреса и Контактные данные - для всех кроме "Полных прав", 
//контроль уникальности Наименования клиента
//добавлено свойство Важность на 1 закладку, добавлены картинки в кнопках сверху
	Если не Покупатель и не Поставщик тогда
		Сообщить("У контрагента - не указано, кем он для нас является. Включите [v]Покупатель или [v]Поставщик",СтатусСообщения.Важное);
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;  
		Отказ	= Истина;
	КонецЕсли;
	
	//Уникальное название без пробелов в начале и в конце!
	Наименование = СокрЛП(Наименование); 
	КолДублей = КолДругихКлиентов(Наименование);
	Если КолДублей>0 тогда
		Сообщить("Уже есть "+строка(КолДублей)+" контрагентов с таким названием '"+Наименование+"'",СтатусСообщения.Важное);
//		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;  
		Отказ	= Истина;
	КонецЕсли;
	
	Если ПроцентПени=0 тогда //09.06.2016
		ПроцентПени = яштПени.ПолучитьСтавкуПениПоКонтрагенту(Ссылка, ТекущаяДата());
	КонецЕсли;
	
	
		Если не РезультатПоБумажнымДоговорам.Пустой() Тогда  //пока нет бумажного договора можно редактировать частично
			
			//---------------- адреса и контакты ПОКУПАТЕЛЕЙ (НЕ Экспортные)! ----------------
			Если НЕ ЭтоНовый() и Покупатель и не ЭтотОбъект.Экспорт  
				и Родитель <> Справочники.Контрагенты.КлиентыИМ тогда
				НЕРазреноБезДанных = НЕ (РольДоступна("ПолныеПрава") или РольДоступна("ПравоЗавершенияРаботыПользователей"));
				
				//---( 09.06.2016 --------------------------
				Если НЕРазреноБезДанных тогда
					Если ОсновнойБанковскийСчет.Пустая() тогда
						Сообщить("У контрагента - не указан Основной банковский счет!",СтатусСообщения.Важное);
						ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.СчетаИДоговоры;  
						Отказ	= Истина;
					КонецЕсли;
				КонецЕсли;	
				//---)
				
				
				//===================проверка Адресов и Контактной информации=====================================	
				табл = НаборКонтактнойИнформации.Выгрузить();
				табл.Свернуть("Представление");
				Если табл.Количество()=1 и табл[0].Представление="" тогда
					Сообщить("Не заполнены Адреса контрагента!",СтатусСообщения.Важное);
					ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
					Отказ	= НЕРазреноБезДанных;
				Иначе
					табл = НаборКонтактнойИнформации.Выгрузить();
					для каждого стр1 из табл цикл
						Если стр1.Вид = справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
							и стр1.Представление = "" тогда
							Сообщить("Не заполнен Юридический Адрес контрагента!",СтатусСообщения.Важное);
							ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
							Отказ	= НЕРазреноБезДанных;
						КонецЕсли;					
						Если стр1.Вид = справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
							и стр1.Представление = "" тогда
							Сообщить("Не заполнен Фактический Адрес контрагента!",СтатусСообщения.Важное);
							ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
							Отказ	= НЕРазреноБезДанных;
						КонецЕсли;	
						
						Если стр1.Вид = справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00015") //Почтовый адрес
							и стр1.Представление = "" тогда
							Сообщить("Не заполнен Почтовый Адрес контрагента!",СтатусСообщения.Важное);
							ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
							Отказ	= НЕРазреноБезДанных;
						КонецЕсли;
						
						Если стр1.Вид = справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента //Телефон
							и стр1.Представление = "" тогда
							Сообщить("Не заполнен Телефон контрагента!",СтатусСообщения.Важное);
							ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
							Отказ	= НЕРазреноБезДанных;
						КонецЕсли;
						
						//+Лукьяненков 11.10.2017
						Если стр1.Вид = справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами //Телефон
							и стр1.Представление = "" тогда
							Сообщить("Не заполнен E-mail для обмена док-тами!",СтатусСообщения.Важное);
							ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
							Отказ	= НЕРазреноБезДанных;
						КонецЕсли;
						//-Лукьяненков 11.10.2017
						
					КонецЦикла;
				КонецЕсли;
				
				
				//-----------------Менеджер должен заполять еще и адреса с контактными лицами----------------		
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	КонтактныеЛица.Ссылка,
				|	КонтактныеЛица.Роль,
				|	КонтактнаяИнформация.Представление КАК Представление,
				|	КонтактнаяИнформация.Тип КАК ТипКонтактнойИнформации
				|ИЗ
				|	Справочник.КонтактныеЛица КАК КонтактныеЛица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО (КонтактнаяИнформация.Объект = КонтактныеЛица.Ссылка)
				|ГДЕ
				|	КонтактныеЛица.ОбъектВладелец = &ЭтаСсылка";
				Запрос.УстановитьПараметр("ЭтаСсылка", Ссылка);
				//Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() тогда
					Сообщить("Не заполнены Контактные Лица.",СтатусСообщения.Внимание);
					ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
					Отказ	= НЕРазреноБезДанных;
				Иначе
					выборка = результат.Выбрать();
					нетРуководителя = истина;
					нетБухгалтера = истина;
					нетМенеджера = истина;
					нетТелефонаМенеджера = Истина;
					пока выборка.Следующий() цикл
						Если  выборка.Роль = Справочники.РолиКонтактныхЛиц.Директор тогда
							нетРуководителя = ложь;
						КонецЕсли;
						Если выборка.Роль = Справочники.РолиКонтактныхЛиц.ГлавныйБухгалтер тогда
							нетБухгалтера = ложь;
						КонецЕсли;
						Если выборка.Роль = Справочники.РолиКонтактныхЛиц.Менеджер тогда
							Если Выборка.Представление <> ""  и  Выборка.Представление <> NULL  и Выборка.ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
								нетТелефонаМенеджера = Ложь;
							КонецЕсли;
							нетМенеджера = ложь;
						КонецЕсли;
					КонецЦикла;	
					Если нетРуководителя тогда 
						Сообщить("В таблице ""Контактные Лица"" - нет ни одного человека
						|с ролью Руководитель, Директор или Генеральный директор!",СтатусСообщения.Внимание);
						ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
						Отказ	= НЕРазреноБезДанных;
					КонецЕсли;
					Если нетБухгалтера тогда 
						Сообщить("В таблице ""Контактные Лица"" - нет ни одного человека
						|с ролью Главный Бухгалтер!",СтатусСообщения.Внимание);
						ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
						Отказ	= НЕРазреноБезДанных;
					КонецЕсли;
					Если нетМенеджера тогда 
						Сообщить("В таблице ""Контактные Лица"" - нет ни одного человека
						|с ролью 'Основное контактное лицо (Менеджер)'!",СтатусСообщения.Внимание);
						ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
						Отказ	= НЕРазреноБезДанных;
					КонецЕсли;
					Если нетТелефонаМенеджера тогда 
						Сообщить("В таблице ""Контактные Лица"" у основного контактного лица
						|должен быть обязательно занесен телефон!",СтатусСообщения.Внимание);
						ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Контакты;  
						Отказ	= НЕРазреноБезДанных;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				спецРоль = РольДоступна("яштФинДиректор") 
						или РольДоступна("ПравоЗавершенияРаботыПользователей")
						Или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЭкспортныхКонтрагентов"); 
				
				Если не СпецРоль тогда
					Сообщить("После записи клиента "+Наименование+" - обязательно заполните Адреса и Контактные данные..."); 
				иначе
					Сообщить("Клиент: "+Наименование+" - успешно записан."); 
				КонецЕсли;	
				
			КонецЕсли;
		конецЕсли;
		
//==================================================================================
// { 03.06.2016 проверка на "плохие" символы (/,\,?,<,>,|,") в Наименовании	при создании нового элемента
//справочника	
	Если ЭтоНовый() Тогда 
		масЗапретСимволов = новый массив;
		масЗапретСимволов.Добавить("/");
		масЗапретСимволов.Добавить("\");
		масЗапретСимволов.Добавить(":");
		масЗапретСимволов.Добавить("*");
		масЗапретСимволов.Добавить("?");
		масЗапретСимволов.Добавить("""");
		масЗапретСимволов.Добавить("|");
			
		масЗапретСимволов.Добавить("&");  //таких тоже не должно быть
		масЗапретСимволов.Добавить("%");
		масЗапретСимволов.Добавить("@");
		масЗапретСимволов.Добавить("~");
		масЗапретСимволов.Добавить("#");  		
			
		ВсегоУдаленоСимволов = 0 ;
		Для каждого Элемент из масЗапретСимволов Цикл 
			//проверка Наименование
			ЧислоВхождений = СтрЧислоВхождений(Наименование,Элемент); 
			ВсегоУдаленоСимволов = ВсегоУдаленоСимволов + ЧислоВхождений;
			Если не ЧислоВхождений = 0 Тогда 
				Наименование = СтрЗаменить(Наименование,Элемент,"");			
			КонецЕсли;			
			//проверка НаименованиеПолное
			ЧислоВхождений2 = СтрЧислоВхождений(НаименованиеПолное,Элемент);
			ВсегоУдаленоСимволов = ВсегоУдаленоСимволов + ЧислоВхождений2;
			Если не ЧислоВхождений2 = 0 Тогда 
				НаименованиеПолное = СтрЗаменить(НаименованиеПолное,Элемент,"");			
			КонецЕсли;			
		КонецЦикла;		
		Если не ВсегоУдаленоСимволов = 0 Тогда 
			Сообщить("Из Наименования удалены " + ВсегоУдаленоСимволов + " некорректных символов.");
		КонецЕсли;	
	КонецЕсли;
// } 03.06.2016 
//==============================================================================================	
	
//+++ 10.03.2015 из формы
	Если  Покупатель и не ЭтоНовый() тогда  // все, а не только не экспортные ?!
		
	// при повторной записи - спрашивает категории	
		Если НЕ ( РольДоступна("яштФинДиректор") 
				   или РольДоступна("МенеджерПоЗакупкам")
				   или РольДоступна("ПолныеПрава") ) тогда
			флКатегория = ложь;
			для каждого стр1 из Категории.КатегорииОбъекта цикл
				если Найти(строка(стр1.Категория), "Продажа")>0 и стр1.Принадлежность тогда
				флКатегория = истина;
				прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ флКатегория и не ЭтотОбъект.Экспорт тогда // не экспортные!
			Сообщить("Не выбран Вид товаров для продаж покупателя!
					 |Отметьте одну или несколько категорий: ""Продажа Шины, Диски, АКБ или Аксессуары""
					 |На закладке ""Категории""...",СтатусСообщения.Важное);
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Категории;
			Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	//при любой перезаписи покупателя из формы - заполняются пункты самовывоза!	
		Если ПунктыСамовывоза.Количество()=0 тогда 
			ЗаполнитьПунктыСамовывоза();
		КонецЕсли;
		
//-----------------------Сразу даётся логин и пароль---------------------------------
		Покупатели=справочники.Контрагенты.НайтиПоКоду("00031");
		
//только при переносе в папку покупатели...		
	Если ЭтотОбъект.Родитель = Покупатели 
		   и ссылка.Родитель <> Покупатели тогда
		   
		   Если Авторизация.Количество()=0 тогда
//---------------------еще раз проверим наличие какого-либо пароля-----------
		Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Авторизация.Наименование КАК База,
			|	Авторизация.Логин,
			|	Авторизация.Пароль
			|ИЗ
			|	Справочник.Авторизация КАК Авторизация
			|ГДЕ
			|	Авторизация.Владелец = &Владелец";

			Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
			Результат = Запрос.Выполнить();
			Авторизация = Результат.Выгрузить();
			
			//Create
			Если Авторизация.Количество()=0 
				и ЭтотОбъект.Родитель = Покупатели тогда //ТОЛЬКО при переносе из ПотенциальныеПокупатели в Покупатели!
			элПароль = справочники.Авторизация.СоздатьЭлемент();
			элПароль.Наименование = "Store.YST.ru";
			элПароль.Владелец = ссылка;
			элПароль.Записать();
			элПароль.Логин = "Client"+формат(элПароль.Код,"ЧГ=0");
			элПароль.Пароль = элПароль.СлучайныйНабор();// 6 англ.букв, Букв или цифр
			элПароль.Записать();
			
			стр1 = Авторизация.Добавить();
			ЗаполнитьЗначенияСвойств(стр1, элПароль);
			стр1.База = элПароль.Наименование; 
			
			ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Заголовок   = "Авторизация (1)";
			ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = Истина;
			ЭтаФорма.Модифицированность = ложь;
	 		Сообщить("Успешно создана учетная запись системы Store для клиента '"+СокрЛП(ссылка.Наименование)+"'", СтатусСообщения.Информация);
			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	КонецЕсли;	
 //+++)
 
 //+++ 30.08.2016 - при попытке изменить категорию - уходит задача на согласование!
 Если НЕ ЭтоНовый() и не Отказ тогда
	 
	таблСогл = новый ТаблицаЗначений;
	таблСогл.Колонки.Добавить("Исполнитель");
	таблСогл.Колонки.Добавить("ВидТовара");
	таблСогл.Колонки.Добавить("Категория0");
	таблСогл.Колонки.Добавить("Категория");
	
	
	Для каждого стр1 из КатегорияСкидок цикл
		стр0 = ссылка.КатегорияСкидок.Найти(стр1.ВидТовара, "ВидТовара");
		Если стр0=Неопределено тогда // не было такой категории - значит использовалась 3-я
				стр0 = новый Структура("ВидТовара, Категория, ТрКлиента",   //17.03.2017
			стр1.ВидТовара, стр1.Категория, стр1.ТрКлиента);
		КонецЕсли;
		
		Если стр0.Категория <> стр1.Категория тогда
			
			Если стр1.Категория=перечисления.КатегорииСкидок.к1
				и ( стр0.Категория=перечисления.КатегорииСкидок.к2 или стр0.Категория=перечисления.КатегорииСкидок.к3) Тогда
				// согласование для Руководителя!
				
				Руководитель = получитьРуководителя(ГлТекущийПользователь);
				МенТовГруппы = ПолучитьМенеджераТовГруппы(глТекущийПользователь, стр1.ВидТовара); //яштПрочее
				
				//для задачи на согласование категории Руководителю
				Если НЕ (Руководитель = глТекущийПользователь
						 или МенТовГруппы = глТекущийПользователь // мен.тов.группы ТЕМ БОЛЕЕ может!!!
					     или РольДоступна("ПравоЗавершенияРаботыПользователей")
						) тогда
				Сообщить("Категорию "+строка(стр1.Категория )+" для "+строка(стр1.ВидТовара)+" - должен согласовать Ваш Руководитель: "+строка(Руководитель), СтатусСообщения.Внимание);
				стрСогл = таблСогл.Добавить();
				ЗаполнитьЗначенияСвойств( стрСогл, стр1); // Вид и Категория
				стрСогл.Исполнитель = Руководитель;
				стрСогл.Категория0 = стр0.Категория;
				стр1.Категория = стр0.Категория; // заменяем обратно до согласования!!!
				КонецЕсли;
			
			ИначеЕсли стр1.Категория=перечисления.КатегорииСкидок.VIP тогда
				// согласование для менеджера тов.группы или, для филиалов и 5,6,7,8 - на Руководителя тов.группы!
				
				МенТовГруппы = ПолучитьМенеджераТовГруппы(глТекущийПользователь, стр1.ВидТовара); //яштПрочее
				
				//для задачи на согласование категории Руководителю или МенТовГруппы
				Если НЕ (МенТовГруппы = глТекущийПользователь 
					     или РольДоступна("ПравоЗавершенияРаботыПользователей")
						) тогда
				Сообщить("Категорию "+строка(стр1.Категория )+" для "+строка(стр1.ВидТовара)+" - должен согласовать Менеджер тов.группы: "+строка(МенТовГруппы), СтатусСообщения.Внимание);
				стрСогл = таблСогл.Добавить();
				ЗаполнитьЗначенияСвойств( стрСогл, стр1 ); // Вид и Категория
				стрСогл.Исполнитель = МенТовГруппы;
				стрСогл.Категория0 = стр0.Категория;
				стр1.Категория     = стр0.Категория; // заменяем обратно до согласования!!!
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	 
	
	
	//=================Создание задач=====================
	Если таблСогл.Количество()>0 тогда
		таблСогл.Сортировать("Исполнитель");
		табл1 = таблСогл.Скопировать(); 
		табл1.Свернуть("Исполнитель");
		для каждого стр1 из табл1 цикл
			назв1 = "Согласование категорий скидок клиента: "+СокрЛП(ссылка.Наименование)+" (для "+строка(стр1.Исполнитель)+")";
			задСсылка = задачи.ЗадачиПользователя.НайтиПоНаименованию(назв1);
			Если задСсылка = неопределено 
				или задСсылка = задачи.ЗадачиПользователя.ПустаяСсылка() тогда
				зад1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
			Иначе
				если НЕ задСсылка.Выполнена тогда // есть задача, но уже выполнена (давно..)
					зад1 = задСсылка.ПолучитьОбъект();
					сообщить("Будет изменена ещё не выполненная задача: " + назв1);
				иначе
					зад1 = задачи.ЗадачиПользователя.СоздатьЗадачу();
				КонецЕсли;	
			КонецЕсли;
			
			зад1.Наименование = назв1;
			содержание = "Менеджер: "+строка(ЭтотОбъект.ОсновнойМенеджерКонтрагента)+" ("+строка(ЭтотОбъект.ОсновнойМенеджерКонтрагента.ОсновноеПодразделение)+") запрешивает изменение Категории скидок:
			|";
			для каждого стр2 из таблСогл цикл
				Если стр2.Исполнитель = стр1.Исполнитель тогда
					содержание = содержание +" "+строка(стр2.ВидТовара)
					+" категория: "+строка(стр2.Категория0)+" >> "+строка(стр2.Категория)+"
					|";
					
				//07.03.2017 ------------------------------------------------------------
					стрЗад1 = зад1.Товары.Добавить();
					стрЗад1.Номенклатура = "Вид товара: "+строка(стр2.ВидТовара);
					стрЗад1.Скидка    = ?(стр2.Категория=перечисления.КатегорииСкидок.VIP, 0, число( строка(стр2.Категория) ) ); //переводим категорию в число
					стрЗад1.СкидкаМин = ?(стр2.Категория0=перечисления.КатегорииСкидок.VIP, 0, число( строка(стр2.Категория0) ) );
				//	стрЗад1.НомерСтрокиОснования = стр2.НомерСтроки;
					
				КонецЕсли;	
			КонецЦикла;
			зад1.Описание = содержание;
			зад1.Исполнитель = стр1.Исполнитель;
			зад1.Инициатор   = глТекущийПользователь;
			зад1.Постановщик = ЭтотОбъект.ОсновнойМенеджерКонтрагента;
			зад1.Объект = ссылка; // этот Контрагент
			
			зад1.НаСогласование = Истина; //09.12.2016
			зад1.РеквизитДляСогласования = "";
						
			зад1.Дата = ТекущаяДата();
			зад1.ДатаИсполнения = ТекущаяДата();
			
			зад1.СрокИсполнения = НачалоДня(ТекущаяДата()) + 17*3600; // до 5 вечера
			зад1.СрокОповещения = ТекущаяДата();
			зад1.Оповещение = истина;
			попытка
				зад1.Записать(); 
				сообщить("Создана задача на согласование Категории '"+строка(стр2.Категория)+"' по виду товара: "+строка(стр2.ВидТовара)+" для "+строка( стр1.Исполнитель) , СтатусСообщения.Информация );
				
			исключение
				сообщить("Не удалось создать задачу для "+строка( стр1.Исполнитель) , СтатусСообщения.Внимание);
			КонецПопытки;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
 КонецЕсли;//неНовый	
 //+++)
 
 
 
 Если Отказ тогда //09.02.2016 - для особо одарённных кто не видит надписей внизу...
	 Предупреждение(" Ошибка при записи контрагента!
	 				|Возможно Не все поля заполнены...",10);
 КонецЕсли;
				
/////////////Плотников				
 Если Покупатель и НЕ (КонтролироватьСуммуЗадолженности) Тогда
	 КонтролироватьСуммуЗадолженности = Истина;  // ТОЛЬКО по предоплате!  сумма = 0 руб.
 КонецЕсли;

 //+++ 23.03.2016
 Если не Отказ тогда
	ЗаписатьИзмененныеПунктыПроработки();	 
 КонецЕсли;

ДопустимоеЧислоДнейЗадолженности=ЧислоДнейОтсрочкиПоДоговору;

	СтИнн = Инн;
	СтКпп = Кпп;

КонецПроцедуры
		

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	
	Если НЕ Отказ Тогда
		
		//плотников, 06.04.2017 обновление адресов для точек
		
		Таблица = НаборКонтактнойИнформации.Выгрузить();
		Таблица.Свернуть("Вид,Представление,Комментарий");
		
		запрос = Новый Запрос;
		запрос.УстановитьПараметр("Таблица",Таблица);
		запрос.УстановитьПараметр("Контр",Ссылка);
		запрос.УстановитьПараметр("ПустойАдрес",Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
		запрос.Текст = "ВЫБРАТЬ
		               |	Таблица.Вид,
		               |	Таблица.Представление,
		               |	Таблица.Комментарий
		               |ПОМЕСТИТЬ Врем
		               |ИЗ
		               |	&Таблица КАК Таблица
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Точки.Ссылка,
		               |	Врем.Представление КАК Представление,
		               |	Врем.Комментарий
		               |ИЗ
		               |	Справочник.Точки КАК Точки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Врем КАК Врем
		               |		ПО Точки.ВидАдреса = Врем.Вид
		               |ГДЕ
		               |	Точки.Владелец = &Контр
		               |	И Точки.ВидАдреса <> &ПустойАдрес";
					   
		Рез = Запрос.Выполнить().Выгрузить();
		
		Для каждого стр из Рез Цикл
			Если Строка(стр.ссылка.Адрес) <> СокрЛП(стр.представление) + " ~ " +СокрЛП(стр.комментарий) тогда  //24.07.2018
				
				об = стр.ссылка.получитьОбъект();
				об.адрес = СокрЛП(стр.представление) + " ~ " +СокрЛП(стр.комментарий);   //24.07.2018
				об.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	КонецЕсли;
	
	КонтактныеЛица.Отбор.ОбъектВладелец.Значение = Ссылка;
	
	Если НЕ Отказ Тогда
		Свойства.ЗаписатьЗначенияСвойств();
		Категории.ЗаписатьКатегорииОбъекта();

		ОбновитьСвойства();
		ОбновитьКатегории();
		
		ПрочитатьABCКлассПокупателя();
		ПрочитатьСтадиюВзаимоотношений();
		ПрочитатьНадежность();
		
		События.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		События.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
		События.Отбор.ДокументыПоКонтрагенту.ВидСравнения  = ВидСравнения.Равно;

	КонецЕсли;

	// Права доступа
	ОбслужитьТаблицуНастройкиПравДоступа();
	УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
	
	ДоступностьВводаНовыхЗаказов();
	
	Если НЕ ВходитВХолдинг Тогда
		Если ЗначениеНеЗаполнено(ГоловнойКонтрагент) Тогда
			ГоловнойКонтрагент = Ссылка;
		КонецЕсли; 
	Иначе
		Если ЗначениеНеЗаполнено(ГоловнойКонтрагент) Тогда
			СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	НовыйОсновнойДоговорУказан = Ложь;
	
	Если НЕ Отказ тогда //+++ 09.06.2016 +++++++++++++как было, но для НЕ новых покупателей...++++++++++++++++++++++
		Если НЕ ( Покупатель и ЭтоНовый() и не ЭтотОбъект.Экспорт) тогда
			ПроверитьОсновнойДоговорКонтрагента(Отказ, НовыйОсновнойДоговорУказан);
			ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйОсновнойДоговорУказан Тогда
		Если Отказ Тогда
			ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			Попытка
				ЗаписатьВФорме();
			Исключение
				СообщитьОбОшибке(ОписаниеОшибки(),, "Элемент не записан!");
				ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Отказ Тогда
		ДоступностьЗакладок();
	КонецЕсли; 
	
	Если (ФизЛицо<>Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
		// 1. Если есть уже соответствие такого физлица и какого - либо контрагента, то ошибка
		НФЛ = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("ФизЛицо",ФизЛицо);
		Если НФЛ <> Справочники.СотрудникиОрганизаций.ПустаяСсылка() и НФЛ.Контрагент<> Справочники.Контрагенты.ПустаяСсылка() Тогда 
			СообщитьОбОшибке("Для данного физического лица уже есть соответствие с контрагентом.",, "Элемент не записан.");
			Отказ = Истина;
		Иначе 
			// 2. Запишем
			НК = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Контрагент",Ссылка);
			Если (НК = Справочники.СотрудникиОрганизаций.ПустаяСсылка()) Тогда 
				НК = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
			Иначе 
				НК = НК.ПолучитьОбъект();
			КонецЕсли;
			НК.Контрагент = Ссылка;
			НК.ФизЛицо = ФизЛицо;
			НК.Записать();
		КонецЕсли;
	Иначе 
	// 2. Если есть соответствие, и физ лицо очистили, то 
			//НК = Справочники.СотрудникиОрганизаций.НайтиПоРеквизиту("Контрагент",Ссылка);
			//Если (НК <> Справочники.СотрудникиОрганизаций.ПустаяСсылка()) Тогда 
			//	НК = НК.ПолучитьОбъект();
			//	НК.Удалить();	
			//КонецЕсли;
		КонецЕсли;
		
	Если НЕ Отказ Тогда
		Если ПроцентПени <> яштПени.ПолучитьСтавкуПениПоКонтрагенту(Ссылка, ТекущаяДата()) И ПроцентПени <> Константы.ПроцентПени.Получить() И ПроцентПени > 0
			или ПроцентПени42 <> яштПени.ПолучитьСтавкуПениПоКонтрагенту42(Ссылка, ТекущаяДата()) И ПроцентПени42 > 0 Тогда
			яштПени.ЗаписатьСтавкуПени(Ссылка, ПроцентПени, ПроцентПени42, ТекущаяДата());
		КонецЕсли;
		
	//+++( 18.03.2016  не закрывая формы - сразу показываем кнопку...Store	
	флМожно = ЭтотОбъект.Покупатель 
	и ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЖурналыОтборПоРегиону")
		или глТекущийПользователь = ОсновнойМенеджерКонтрагента					    // ответственный за договор
		или глТекущийПользователь = ЭтотОбъект.ОсновнойДоговорКонтрагента.ОтветственноеЛицо // основной менеджер
		или РольДоступна("ПолныеПрава") 
		или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьАвтокомплектацию")  //Руководители направлений и менеджеры по дискам (для Экспортных клиентов)
	  );
	
	  	Если ЭтоНовый() тогда		
			ЭлементыФормы.Store.Видимость = флМожно;// не всем!
			ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = ЛОЖЬ;
        Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Авторизация.Наименование КАК База,
			               |	Авторизация.Логин,
			               |	Авторизация.Пароль
			               |ИЗ
			               |	Справочник.Авторизация КАК Авторизация
			               |ГДЕ
			               |	Авторизация.Владелец = &Владелец";
			
			Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
			Результат   = Запрос.Выполнить();
			Авторизация = Результат.Выгрузить();
			ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Заголовок = "Авторизация ("+строка(Авторизация.Количество())+")";
			
			//+++ 30.09.2014 - кнопка назначения авторизации
			Если Авторизация.Количество()=0 
			//	и ( РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоВзаимозачетам") или РольДоступна("яштФинДиректор") ) 
			тогда
				ЭлементыФормы.Store.Видимость = флМожно;// не всем!
				ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = ЛОЖЬ;
			иначе  
				ЭлементыФормы.Store.Видимость = ложь;
				ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = флМожно;
			КонецЕсли;	
		КонецЕсли;
	//+++)	
		
		
		//+++ 04.12.2015 - только для покупателей!!!
		ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Видимость   = ЭтотОбъект.Покупатель;


	КонецЕсли;   
	
	Если РольДоступна("Юристы") Тогда
		ЗаписатьСудебныеРазбирательстваСДебиторами();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		Свойства.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.Свойства);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		Категории.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	//Если НЕ ЭтоНовый() Тогда
	//	ВходитВХолдинг = НЕ(ГоловнойКонтрагент = Ссылка);
	//КонецЕсли;
	
	//ВидимостьГоловногоКонтрагента();

КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
		Если ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки[0].Кнопки.Файлы);
			ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		ИначеЕсли ЗначениеВыбора = "ОбновлениеКонтактнойИнформации" Тогда
			ОбновитьТелефоныКонтактногоЛица();
		ИначеЕсли ЗначениеВыбора = "ЗаписанРодительПравДоступа" Тогда
			ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
			ОбслужитьТаблицуНастройкиПравДоступа();
			УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
//15.03.2016	
//КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);	
 Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);   // из модуля КонтактнаяИнформация
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку=истина;
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("Вид",ДанныеСтроки.Вид);
	запрос.УстановитьПараметр("Контр",Ссылка);
	
	запрос.Текст = "ВЫБРАТЬ
	               |	Точки.Ссылка
	               |ИЗ
	               |	Справочник.Точки КАК Точки
	               |ГДЕ
	               |	Точки.Владелец = &Контр
	               |	И Точки.ВидАдреса = &Вид";
	
	Рез = Запрос.Выполнить().Выгрузить();

	Если Рез.Количество() > 0 Тогда
	    ОформлениеСтроки.Ячейки.Точка.Значение=Рез[0].Ссылка;
		ОформлениеСтроки.Ячейки.Точка.Текст=Рез[0].Ссылка.Наименование;
	//Иначе
	//	Элемент.Очистить();
    КонецЕсли;

	//ОформлениеСтроки.Ячейки.ВыгружатьВТерминал.ОтображатьФлажок =Истина;
	//ОформлениеСтроки.Ячейки.ВыгружатьВТерминал.Текст=Рез[0].Ссылка.Наименование;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
//19.11.2015	
 Если НЕ РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
	//Миронычев
	Если Копирование тогда
		КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
    Иначе
		Предупреждение("Вносите данные в уже имеющиеся виды контактной информации.", 10);
		Отказ = истина;
	КонецЕсли;
	//КонецМиронычев

 иначе
	КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
 КонецЕсли;
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СОБЫТИЯ

// Обработчик события ПриВыводеСтроки элемента формы События.
//
Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 4;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Отменено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 5;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		ОформлениеСтроки.Ячейки.ТипСобытия.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		ОформлениеСтроки.Ячейки.ТипСобытия.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьТекст    = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ИндексКартинки     = ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидСобытия);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы События.
//
Процедура СобытияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ВвестиНовоеСобытие(Копирование, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
//
Процедура КоманднаяПанельБанковскиеСчетаСделатьОсновным(Кнопка)

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.СделатьОсновным.
//
Процедура КоманднаяПанельКонтактныеЛицаСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеКонтактноеЛицо = ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.КоманднаяПанельДоговоры.
//
Процедура КоманднаяПанельДоговорыСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;
    ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка;
 	
	ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора();

	ОбновитьЧислоДнейОтсрочкиПоДоговору(); //+++ 15.03.2016

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.СписокСобытий.
//
Процедура КоманднаяПанельФормыСписокСобытий(Кнопка)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	Иначе
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаСпискаСобытий.Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Файлы.
//
Процедура КоманднаяПанельФормыФайлы(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Отчет.
//
Процедура КоманднаяПанельФормыОтчет(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
	Отчет.КонтрагентОтчета = Ссылка;
	Отчет.ДатаОтчета = ТекущаяДата();
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
	
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ТелефонныйЗвонок.
//
Процедура КоманднаяПанельФормыТелефонныйЗвонок(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ТелефонныйЗвонок);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЛичнаяВстреча.
//
Процедура КоманднаяПанельФормыЛичнаяВстреча(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЭлектронноеПисьмо.
//
Процедура КоманднаяПанельФормыЭлектронноеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ПочтовоеПисьмо.
//
Процедура КоманднаяПанельФормыПочтовоеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ПочтовоеПисьмо);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.РаботаСДебиторором//
Процедура КоманднаяПанельФормыРаботаСдебитором(Кнопка)
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.КомментарийПДЗ);
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.Прочее.
//
Процедура КоманднаяПанельФормыПрочее(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.Прочее);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.НовыйЗаказПокупателя.
//
Процедура КоманднаяПанельФормыНовыйЗаказПокупателя(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Покупатель Тогда
		Предупреждение("Контрагент не является покупателем.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйЗаказ.Контрагент = Ссылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.НовыйЗаказПоставщику.
//
Процедура КоманднаяПанельФормыНовыйЗаказПоставщику(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Поставщик Тогда
		Предупреждение("Контрагент не является поставщиком.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	НовыйЗаказ.Контрагент = Ссылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельВидыДеятельности.СделатьОсновным.
//
Процедура КоманднаяПанельВидыДеятельностиСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойВидДеятельности = ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности;
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.НаписатьПисьмо.
//
Процедура КоманднаяПанельФормыНаписатьПисьмо(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждение("   Не рекомендуется создавать письма в 1С,
					|это увеличивает базу и замедляет её работу...", 10);
					
	НаписатьПисьмоОбъекту(Ссылка, глТекущийПользователь);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.НаписатьПисьмо.
//
Процедура КоманднаяПанельКонтактныеЛицаНаписатьПисьмо(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаписатьПисьмоОбъекту(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка, глТекущийПользователь);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЭлектронныеПисьма.
//
Процедура КоманднаяПанельФормыЭлектронныеПисьма(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.СписокСобытий.
//
Процедура КоманднаяПанельКонтактныеЛицаСписокСобытий(Кнопка)

	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка.Пустая() Тогда
	
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();

		ФормаСпискаСобытий.Отбор.КонтактноеЛицо.Значение      = ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка;
		ФормаСпискаСобытий.Отбор.КонтактноеЛицо.Использование = Истина;

		ФормаСпискаСобытий.Открыть();
		
	Иначе

		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.ЭлектронныеПисьма.
//
Процедура КоманднаяПанельКонтактныеЛицаЭлектронныеПисьма(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЭлектронныеПисьмаПлюсКонтактныеЛица.
//
Процедура КоманднаяПанельФормыЭлектронныеПисьмаПлюсКонтактныеЛица(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ОбъектВладелец = &Ссылка
	|";
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	СписокКонтактныхЛиц.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокКонтактныхЛиц.Вставить(0, Ссылка);
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(СписокКонтактныхЛиц);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА СВОЙСТВ

// Обработчик события ПередНачаломДобавления элемента формы Свойства.
//
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Свойства.
//
Процедура СвойстваПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы Свойства.
//
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
    СтЗначение = Элемент.ТекущиеДанные.Значение;
		
	Свойства.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Свойства.
//
Процедура СвойстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;
	
	текСтр = ЭлементыФормы.Свойства.ТекущиеДанные; //05.02.2016
	Если текСтр.Свойство.Код = КодСвойстваВажность тогда 
	  Важность = текСтр.Значение;
    КонецЕсли;
  
	пользовательКод = СокрЛП(глТекущийПользователь.Код);
	
	Если текСтр.Свойство.Код = "90354" тогда  //01.10.2018 Задача № 55225 - Только Егор
		если не (	пользовательКод = "Малышев Егор"
				или РольДоступна("ПравоЗавершенияРаботыПользователей") 
				) тогда
			Предупреждение("Изменять свойство: "+строка(текСтр.Свойство) +" может только Егор Малышев!", 30);
			текСтр.Значение = СтЗначение;//старое значение!
		КонецЕсли;	
	КонецЕсли;
	
	Если текСтр.Свойство.Код = "90360" тогда  //+++ 02.04.2019 - по # Бондаренко 
		если не (пользовательКод="Малышев Егор"
			или  пользовательКод="Бондаренко Е.Д. (снабжение)"
			или  пользовательКод="Марешева (Новый)" 
			ИЛИ РольДоступна("ПравоЗавершенияРаботыПользователей")
				) тогда
			Предупреждение("У Вас нет разрешения на изменение свойства: "+строка(текСтр.Свойство) +"!", 30);
			текСтр.Значение = СтЗначение;//старое значение!
		КонецЕсли;	
	КонецЕсли;
		

КонецПроцедуры

// Обработчик события Очистка элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	текСтр = ЭлементыФормы.Свойства.ТекущиеДанные; //05.02.2016

	Если текСтр.Свойство.Код = "90354" тогда  //01.10.2018 Задача № 55225 - Только Егор
		если не (глТекущийПользователь = справочники.Пользователи.НайтиПоКоду("Малышев Егор")
			или РольДоступна("ПравоЗавершенияРаботыПользователей") ) тогда
			Предупреждение("Изменять это свойство может только Егор Малышев!", 30);
			текСтр.Значение = СтЗначение;//старое значение!
			возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ЭлементыФормы.Свойства.ТекущиеДанные.Значение = Неопределено;

	Свойства.ПривестиТипЗначенияСвойства(ЭлементыФормы.Свойства.ТекущиеДанные);
	
	текСтр = ЭлементыФормы.Свойства.ТекущиеДанные; //05.02.2016
	Если текСтр.Свойство.Код = КодСвойстваВажность тогда 
	  Важность = 0;
    КонецЕсли;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента формы Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Предупреждение("У вас недостаточно прав для добавления новых категорий!
					|   Отметьте одну или несколько категорий...", 10);
	Отказ = истина;
	
	//Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
	//	Возврат;
	//КонецЕсли;

	//Категории.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Категории.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы СтадияВзаимоотношений.
//
Процедура СтадияВзаимоотношенийНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием стадии взаимоотношений необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Договоры.
//
Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.Ссылка) И ЭтотОбъект.ОсновнойДоговорКонтрагента = ДанныеСтроки.Ссылка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ОсновнойБанковскийСчет = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Возврат;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)

	ВидимостьПанелейЮрФизЛица();
	//ПроверитьИНН();
	
	Если (Элемент.Значение = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
		ЭлементыФормы.ФизЛицо.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ФизЛицо.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события Нажатие элемента формы Надежность.
//
Процедура НадежностьНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием надежности поставщика необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.НадежностьПоставщиков.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Покупатель.
//
Процедура ПокупательПриИзменении(Элемент)

	ВидимостьПанелейПоставщикПокупатель();
	ДоступностьВводаНовыхЗаказов();
	ВидимостьКонтрольДебиторскойЗадолженности();

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Поставщик.
//
Процедура ПоставщикПриИзменении(Элемент)

	ВидимостьПанелейПоставщикПокупатель();
	ДоступностьВводаНовыхЗаказов();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ABCКлассПокупателя.
//
Процедура ABCКлассПокупателяНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием АВС-класса клиента необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.ABCКлассификацияПокупателей.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

  Если ЭлементыФормы.НаименованиеПолное.СписокВыбора.Количество()=0 тогда //+++ 30.06.2016 только если еще не заполнен список выбора
		
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;
  //иначе - при выборе ОПФ
  КонецЕсли;
КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Договоры.
//
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
	Если НЕ Отказ Тогда
		Отказ = Истина;
		Если Копирование Тогда
			НовыйОбъект = Элемент.ТекущиеДанные.Ссылка.Скопировать();
		Иначе
			НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			НовыйОбъект.ОбъектВладелец = Ссылка;
		КонецЕсли; 
		НовыйОбъект.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы Договоры.
//
Процедура ДоговорыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ЗначениеНеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		ОсновнойДоговорКонтрагента = Элемент.ТекущаяСтрока.Ссылка;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы Договоры.
//
Процедура ДоговорыПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоДоговора();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
	ОбновитьТелефоныКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ОсновнойВидДеятельности = ДанныеСтроки.ВидДеятельности Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ВидыДеятельности.Количество() = 1 И ЗначениеНеЗаполнено(ОсновнойВидДеятельности) И НЕ ЗначениеНеЗаполнено(ВидыДеятельности[0].ВидДеятельности) Тогда
	
		ОтветНаВопрос = Вопрос("Установить текущий вид деятельности основным ?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ОсновнойВидДеятельности = ВидыДеятельности[0].ВидДеятельности;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПередУдалением(Элемент, Отказ)
	
	//Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности = ОсновнойВидДеятельности Тогда
	//	ОтветНаВопрос = Вопрос("Данный вид деятельности является основным. Продолжить?", РежимДиалогаВопрос.ДаНет);
	//	Отказ = (ОтветНаВопрос <> КодВозвратаДиалога.Да);
	//	Если НЕ Отказ Тогда
	//		ОсновнойВидДеятельности = Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
	//	КонецЕсли; 
	//КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ВидДеятельности)
	   И ВидыДеятельности.НайтиСтроки(Новый Структура("ВидДеятельности", Элемент.ТекущиеДанные.ВидДеятельности)).Количество() > 1 Тогда
	
		Если ОтменаРедактирования Тогда
			ВидыДеятельности.Удалить(Элемент.ТекущаяСтрока);
		Иначе
			Предупреждение("Выбранный вид деятельности уже есть в списке.");
			Отказ = Истина;
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтактныеЛица/Обновить.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтактныеЛицаОбновить(Кнопка)
	
	КонтактныеЛица.Обновить();
	ОбновитьТелефоныКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//15.03.2016
	//Если НЕ ЗначениеНеЗаполнено(ОсновноеКонтактноеЛицо)
	//	И ДанныеСтроки.Ссылка = ОсновноеКонтактноеЛицо Тогда
	//	ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	//КонецЕсли; 
	
//------------------Спец.Картинка-------------------------------------	
Если значениеЗаполнено(ДанныеСтроки.Роль) тогда
	Если ДанныеСтроки.Роль =справочники.РолиКонтактныхЛиц.Директор
		или ДанныеСтроки.Роль =справочники.РолиКонтактныхЛиц.ГлавныйБухгалтер
		или ДанныеСтроки.Роль =справочники.РолиКонтактныхЛиц.Менеджер тогда
	//	ОформлениеСтроки.Ячейки.Картинка.Картинка =  БиблиотекаКартинок["ОтветитьНаЭлектронноеПисьмо"];
		ОформлениеСтроки.Ячейки.Картинка.отображатьКартинку = истина;
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
	КонецЕсли;
КонецЕсли;

	Если ДанныеСтроки.Ссылка.ПометкаУдаления Тогда // 27.07.2017  - задача № 30463
		ОформлениеСтроки.ЦветТекста = webЦвета.СветлоСерый;
	КонецЕсли; 

КонецПроцедуры

Процедура ВходитВХолдингПриИзменении(Элемент)
	
	Если не Элемент.Значение Тогда
		ГоловнойКонтрагент = Ссылка;
	КонецЕсли;
	//
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

Процедура РодительПриИзменении(Элемент)
	
	//+++ 27.08.2012 - нельзя менять Родителя с Потенциального на другого
	Если не ЭтоНовый() тогда
		Если РольДоступна("яштФинДиректор") или РольДоступна("МенеджерПоВзаимозачетам") или РольДоступна("ПолныеПрава")
			// 21.03.2017
			или (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
			и глТекущийПользователь = глТекущийПользователь.ОсновноеПодразделение.Руководитель )
		Тогда
			Кнопка1Нажатие(неопределено); // автоУстановка авторизации для Store
		Иначе
			Если РольДоступна("МенеджерПоПродажамИМ") и ссылка.Родитель = справочники.Контрагенты.КлиентыИМ
				и ЭтотОбъект.Родитель <> справочники.Контрагенты.КлиентыИМ тогда
				Родитель = справочники.Контрагенты.КлиентыИМ;
				сообщить("Вам не разрешено менять Группу контрагентов """+строка(справочники.Контрагенты.КлиентыИМ)+""" на другую!", СтатусСообщения.Внимание);
		//+++ 13.08.2018 --- задача № 52399 --- можно всем!
			//ИначеЕсли не РольДоступна("МенеджерПоПродажамИМ") и ссылка.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели
			//	и ЭтотОбъект.Родитель <> справочники.Контрагенты.ПотенциальныеПокупатели тогда
			//	сообщить("Вам не разрешено менять Группу контрагентов """+строка(справочники.Контрагенты.ПотенциальныеПокупатели)+""" на другую!", СтатусСообщения.Внимание);
			//	Родитель = справочники.Контрагенты.ПотенциальныеПокупатели;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Сакулина
	Если не ЭтоНовый()
		и ссылка.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели
		и ЭтотОбъект.Родитель <> справочники.Контрагенты.ПотенциальныеПокупатели тогда
		УведомлениеДолжнику = Истина;
		УведомлениеПДЗ = Истина;
	КонецЕсли;
	//Сакулина
	
	ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(мПраваДоступаПользователей, Родитель, Ссылка);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН1.
//
Процедура ИНН1ПриИзменении(Элемент)
	//ПроверитьИНН();
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН.
//
Процедура ИННПриИзменении(Элемент)
	//ПроверитьИНН();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ ОГРАНИЧЕНИЯ ПРАВ ДОСТУПА

// Процедура управляет параметрами отображения таблицы настройки прав доступа.
// 
Процедура ОбслужитьТаблицуНастройкиПравДоступа()

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.НаборПравПользователей.МенеджерПоПродажам);
	СписокОтбора.Добавить(Перечисления.НаборПравПользователей.МенеджерПоЗакупкам);
	
	ОбластиДанныхДоступа.Отбор.Ссылка.Использование = Истина;
	ОбластиДанныхДоступа.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ОбластиДанныхДоступа.Отбор.Ссылка.Значение      = СписокОтбора;
	ЭлементыФормы.ОбластиДанныхДоступа.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока);
	УстановитьСписокПоляВыбора(Элемент.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаЭлемента());
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		ОткрытьФормуРодителяПравообладателя(Элемент.ТекущиеДанные, Родитель, ЭтаФорма);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) Тогда
		Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		Предупреждение("Запись удалить невозможно, она наследутся от родителя.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаОбластьДанных(Элемент, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, Модифицированность);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	
КонецПроцедуры

Процедура ЗаполнитьТипыЦен()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК Тип
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления";
	
	
	Если НЕ ЭтоНовый() Тогда
		
		ЗапросТипов = Новый Запрос;
		
		ЗапросТипов.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		
		ЗапросТипов.Текст =
		"ВЫБРАТЬ
		|	ДоступныеЦеныКонтрагентов.ТипЦены КАК Тип
		|ИЗ
		|	РегистрСведений.ДоступныеЦеныКонтрагентов КАК ДоступныеЦеныКонтрагентов
		|ГДЕ
		|	ДоступныеЦеныКонтрагентов.Контрагент = &Ссылка";
		
		ТаблицаТипов = ЗапросТипов.Выполнить().Выгрузить()
		
		
	КонецЕсли; 
	
	СписокЦен = Новый СписокЗначений;
	
	ВыборкаЦен = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦен.Следующий() Цикл
		
		Признак = Ложь;
		
		Если НЕ ЭтоНовый() Тогда
			
			
			Если ТаблицаТипов.Найти(ВыборкаЦен.Тип, "Тип") <> Неопределено Тогда
				
				Признак = Истина;	
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
		НовСтр = Цены.Добавить();
		НовСтр.Значение = ВыборкаЦен.Тип;
		НовСтр.Представление = ВыборкаЦен.Тип.Наименование;
		НовСтр.Пометка = Признак;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаписатьТипыЦенКонтрагента()

    ОчиститьДвиженияПоТипуЦен();
	
	Для каждого СтрокаТипов Из Цены Цикл
	
		Если СтрокаТипов.Пометка Тогда
		
			МенеджерТипов = РегистрыСведений.ДоступныеЦеныКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерТипов.Контрагент = ЭтотОбъект.Ссылка;
			МенеджерТипов.ТипЦены = СтрокаТипов.Значение;
			МенеджерТипов.Записать();
		
		КонецЕсли; 	
	
	КонецЦикла; 

КонецПроцедуры

Процедура ПослеЗаписи()
	
	ЗаписатьТипыЦенКонтрагента();
	
	ЭлементыФормы.Важность.Доступность = Истина;
	Важность = ПолучитьСвойство(КодСвойстваВажность, 0);
	
	//+++ 05.06.2017 --- добавляем доступный тип цен - Базовая для любого (нормального) покупателя ----
	Если Покупатель и ПометкаУдаления = ЛОЖЬ и ЭтотОбъект.Экспорт = ЛОЖЬ тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоступныеЦеныКонтрагентов.Контрагент
		               |ИЗ
		               |	РегистрСведений.ДоступныеЦеныКонтрагентов КАК ДоступныеЦеныКонтрагентов
		               |ГДЕ
		               |	ДоступныеЦеныКонтрагентов.ТипЦены = &ТипЦены
		               |	И ДоступныеЦеныКонтрагентов.Контрагент = &Контрагент";
		типЦенБазовая = справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00008");
		Запрос.УстановитьПараметр("ТипЦены", типЦенБазовая);  //Базовая
		Запрос.УстановитьПараметр("Контрагент", Ссылка );//Базовая
		Результат = Запрос.Выполнить();
		Если результат.Пустой() тогда
			регСв = РегистрыСведений.ДоступныеЦеныКонтрагентов.СоздатьМенеджерЗаписи();
			регСв.Контрагент = ссылка;
			регСв.ТипЦены = типЦенБазовая;
			регСв.Записать();
			Сообщить("Добавлен доступный тип цен 'Базовая'");
			
			//отражение на форме
			эл = ЭлементыФормы.Цены.Значение.НайтиПоЗначению( типЦенБазовая );
			эл.Пометка = Истина;
			
		КонецЕсли;
	КонецЕсли;
	//Миронычев
	
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("Контрагент");
	Контрагенты.Колонки.Добавить("ИНН");
	Контрагенты.Колонки.Добавить("КПП");
	Ст = Контрагенты.Добавить();
	Ст.Контрагент = Ссылка;
	Ст.Инн = Инн;
	Ст.Кпп = Кпп;
	
	Если Инн <> СтИНН или кпп <> СтКпп Тогда
		ПроверитьКонтрагентаВ_ФНС(Контрагенты);
	КонецЕсли;
	
	ОбновитьСвойства();	
КонецПроцедуры
 
Функция НайтиФизЛицо(Ссылка)
	// Вставить содержимое обработчика.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Сотрудники.ФизЛицо как ФизЛицо
	                      |ИЗ
	                      |	Справочник.СотрудникиОрганизаций КАК Сотрудники
	                      |ГДЕ
	                      |	Сотрудники.Контрагент = &Контрагент");	
						  
	Запрос.УстановитьПараметр("Контрагент",Ссылка);					 
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.ФизЛицо;
	КонецЕсли;
	
	Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	
КонецФункции
 
Функция КонтрагентПринадлежитСотрудникам(Ссылка)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Ссылка в Иерархии (&Папка)");	
						  
	Запрос.УстановитьПараметр("Папка",Ссылка);					 
	Выб = Запрос.Выполнить().Выбрать();
	
	Возврат (Выб.Следующий());	
КонецФункции

Процедура КонтролироватьСуммуЗадолженностиПриИзменении(Элемент)
	ВидимостьКонтрольДебиторскойЗадолженности();
КонецПроцедуры

Процедура КонтролироватьЧислоДнейЗадолженностиПриИзменении(Элемент)
	ВидимостьКонтрольДебиторскойЗадолженности();
КонецПроцедуры

Процедура ВидимостьКонтрольДебиторскойЗадолженности()
	
	ЭлементыФормы.ДопустимаяСуммаЗадолженности.Видимость = КонтролироватьСуммуЗадолженности И Покупатель;
	ЭлементыФормы.КонтролироватьСуммуЗадолженности.Видимость = Покупатель;
	
	Если КонтролироватьСуммуЗадолженности И Покупатель Тогда
		ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Лимит дебиторской задолженности по договорам с покупателем, сумма(руб.) :";
	Иначе
		ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Лимит дебиторской задолженности по договорам с покупателем";
	КонецЕсли;
	
	ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Видимость = КонтролироватьСуммуЗадолженности И Покупатель;
	ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Видимость = КонтролироватьЧислоДнейЗадолженности И Покупатель;

КонецПроцедуры	

Процедура ДоступностьКонтрольЛимитаДебиторскойЗадолженности()
	
	Если НЕ ЭтоНовый() И НЕ Ссылка.ПринадлежитЭлементу(Справочники.Контрагенты.ПотенциальныеПокупатели) Тогда
		ЭлементыФормы.КонтролироватьСуммуЗадолженности.Доступность = РольДоступна("ПолныеПрава") 
																	или РольДоступна("яштФинДиректор") 
																	или (ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж = Справочники.НаправленияПродаж.Тендеры) //+++ 17.07.2014
																	ИЛИ глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") //***2019.03.14 Задача № 64857
																	;
		ЭлементыФормы.ДопустимаяСуммаЗадолженности.Доступность = РольДоступна("ПолныеПрава")
																	или РольДоступна("яштФинДиректор") 
																	или (ПараметрыСеанса.ТекущийПользователь.НаправлениеПродаж = Справочники.НаправленияПродаж.Тендеры)
																	ИЛИ глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") //***2019.03.14 Задача № 64857
																	;
	КОнецЕсли;
	
КонецПроцедуры		


Процедура ДоступностьРеквизитовОбщее()
		
	//Если НЕ ЭтоНовый() и НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "КонтрагентыРазрешитьРедактировать_Полн_Наименование_ИНН_КПП_ОГРН") Тогда 
	Если ЭтоНовый() 
		или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "КонтрагентыРазрешитьРедактировать_Полн_Наименование_ИНН_КПП_ОГРН") Тогда 
		возврат;
	КонецЕсли;	
		
		ЗапросБумДоговор = Новый Запрос;
		ЗапросБумДоговор.Текст = 
		"ВЫБРАТЬ
		|	""ДА"" КАК Да
		|ИЗ
		|	(ВЫБРАТЬ
		|		""ДА"" КАК Поле1,
		|		ДоговорыКонтрагентов.Владелец КАК Владелец
		|	ИЗ
		|		Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|	ГДЕ
		|		ДоговорыКонтрагентов.Владелец = &Контрагент
		|		И (ДоговорыКонтрагентов.ДоговорПодписанОбеимиСторонами
		|				ИЛИ ДоговорыКонтрагентов.СостояниеДоговора = &СтатусДоговора)) КАК Договор
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			""ДА"" КАК Поле1,
		|			БумажныеДоговоры.Контрагент КАК Контрагент
		|		ИЗ
		|			РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
		|		ГДЕ
		|			БумажныеДоговоры.Контрагент = &Контрагент
		|			И (БумажныеДоговоры.Пролонгируется
		|					ИЛИ БумажныеДоговоры.ПутьКФайлуДоговора ПОДОБНО ""%omega%""
		|					ИЛИ БумажныеДоговоры.ЕстьДоговорПоручительства)) КАК ДоговорБум
		|		ПО Договор.Владелец = ДоговорБум.Контрагент";
		ЗапросБумДоговор.УстановитьПараметр("СтатусДоговора", Справочники.СостояниеДокументов.НайтиПоКоду("2"));
		ЗапросБумДоговор.УстановитьПараметр("Контрагент", ЭтотОбъект.Ссылка);
		
		//ДоговорЕсть = (ЗапросБумДоговор.Выполнить().Выгрузить().Количество() > 0);
		ДоговорЕсть = НЕ ЗапросБумДоговор.Выполнить().Пустой();
		
		Если ДоговорЕсть или ЕстьПодписаннаяСлужебнаяЗаписка Тогда
	 		ЭлементыФормы.НаименованиеПолное.Доступность = Ложь;
			ЭлементыФормы.ИНН.Доступность = Ложь;
			ЭлементыФормы.ИНН1.Доступность = Ложь; 
			ЭлементыФормы.ОГРН.Доступность = Ложь;
			ЭлементыФормы.КПП.Доступность = Ложь;
			ЭлементыФормы.КодПоОкпо.Доступность = Ложь;
		КонецЕсли;
		
    //КонецЕсли;
КонецПроцедуры

Процедура ДоступностьРеквизитовДляМенеджеров()
	Если НЕ ЭтоНовый() И НЕ Ссылка.ПринадлежитЭлементу(Справочники.Контрагенты.ПотенциальныеПокупатели) Тогда
		ФлагПолныеПрава = РольДоступна("ПолныеПрава") или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "КонтрагентыРазрешитьРедактировать_Полн_Наименование_ИНН_КПП_ОГРН") ;
		
		ЭлементыФормы.ОГРН.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.НаименованиеПолное.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.ИНН.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.КПП.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.КодПоОкпо.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.ОсновнойМенеджерКонтрагента.Доступность = ФлагПолныеПрава
		//+++ 02.08.2018 --- разрешение для руководителей филиалов Задача № 51888 от Марешевой И.
				или ( ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.ОбособленноеПодразделение // для филиалов
					и ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.Руководитель = ПараметрыСеанса.ТекущийПользователь)// ТОЛЬКО руководитель филиала!
                    ;
					
		//Плтников, добавил Смирнову доступ 18.05.2017 +++
		ЭлементыФормы.ЗапретитьВводЗаказаПокупателя.Доступность = ФлагПолныеПрава или ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Смирнов А";
		
		ЭлементыФормы.ЗапретШины.Доступность = ФлагПолныеПрава или ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Смирнов А";
		ЭлементыФормы.ЗапретДиски.Доступность = ФлагПолныеПрава или ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Смирнов А";
		ЭлементыФормы.ЗапретАКБ.Доступность= ФлагПолныеПрава или ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Смирнов А";
		ЭлементыФормы.ЗапретАксы.Доступность = ФлагПолныеПрава или ПользователиИнформационнойБазы.ТекущийПользователь().Имя = "Смирнов А";
		
		Если РольДоступна("МенеджерПоПродажам") Тогда
			ЭлементыФормы.ВходитВХолдинг.Доступность = Истина;
		Иначе
			ЭлементыФормы.ВходитВХолдинг.Доступность = ФлагПолныеПрава;
		КонецЕсли;
		ЭлементыФормы.НеКонтроллироватьЦеныПродажи.Доступность = ФлагПолныеПрава;
		ЭлементыФормы.ПриниматьЗаказыЧерезСайт.Доступность = ФлагПолныеПрава;
		
    КонецЕсли;
КонецПроцедуры		

Процедура КоманднаяПанельФормыДействиеЗадолженность(Кнопка)
	Отчет = Отчеты.ЗадолженностьПоКонтрагентам.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	Отчет.ПереключательЗадолженность=3;
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	Отчет.ОбщийОтчет.ДатаКон = КонецДня(ТекущаяДата());
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		СтрОтб.Использование = Ложь;	
	КонецЦикла;
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка;
	СтрОтб.Использование = Истина;
	
	ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("ДоговорКонтрагента");
	ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Сделка");
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	ФормаОбработки.ОбновитьОтчет();
	
	
КонецПроцедуры

Процедура КоманднаяПанельФормыКарточка(Кнопка)
	Обр = обработки.ПечатьКарточкиКонтрагента.Создать(); //+++ 03.09.2012
	Обр.Контрагент = ссылка;
	Обр.Печать();
КонецПроцедуры

Процедура КоманднаяПанельФормыДействиеАналитика(Кнопка)
	
	ФормаАналитика=ПолучитьФорму("ФормаАналитика");
	ФормаАналитика.Контрагент = Ссылка;
	
	ФормаАналитика.Открыть();

КонецПроцедуры

Функция ЕстьВалютныйДоговор()
	Если ЭтоНовый() тогда 
		возврат ЛОЖЬ; 
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ДоговорыКонтрагентов.Ссылка
	 |ИЗ
	 |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	 |ГДЕ
	 |	ДоговорыКонтрагентов.Владелец = &Владелец
	 |	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов <> &Руб";
	 Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
	 Запрос.УстановитьПараметр("Руб", справочники.Валюты.НайтиПоКоду("643") );
	 Результат = Запрос.Выполнить();
		 
	возврат НЕ Результат.Пустой();
КонецФункции

Процедура КоманднаяПанельФормыДействие6(Кнопка)
	
Если ЭтотОбъект.Экспорт 
	и ЕстьВалютныйДоговор() тогда	//10.04.2019 экснортные Валютные!
	//+++ 16.02.2015 - двойные правила!	
	Если Вопрос("Открыть Правила для Валютных договоров?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
 		ФормаПравила=РегистрыСведений.ПравилаЦенообразованияЭкспорт.ПолучитьФормуСписка();
		ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
		ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.Значение = 	Ссылка;
		ФормаПравила.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
	Иначе
		//==============новые рублевые правила!===============================
		//Если Вопрос("Открыть НОВЫЕ Правила ценообразования?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
		Если Константы.ЦенообразованиеПоКатегориям.Получить() тогда
			ИмяФайла = ПолучитьИмяВременногоФайла();
			файл = новый файл(ИмяФайла);
			обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила
			ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
		
	 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
			ФормаПравила = Обработка.ПолучитьФорму("Форма");
			ФормаПравила.Контрагент = Ссылка;
	   		ФормаПравила.флТолькоПерсональные = Истина;
			ФормаПравила.КоманднаяПанель1Обновить(неопределено);
	 	Иначе		
			ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
			ФормаПравила.Контрагент = Ссылка;
		КонецЕсли;
 	КонецЕсли;

	//17.09.2017 - открыть модально чтобы не "плодили" окон
	ФормаПравила.ОткрытьМодально();	
			
Иначе //14.02.2017 - без вопроса - а по константе!	
	//Если Вопрос("Открыть НОВЫЕ Правила ценообразования?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
	Если Константы.ЦенообразованиеПоКатегориям.Получить() тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		файл = новый файл(ИмяФайла);
		обр = справочники.ВнешниеОбработки.НайтиПоКоду("500"); // перс.правила
		ДвоичныеДанные = обр.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
	
 		Обработка    = ВнешниеОбработки.Создать(ИмяФайла);
		ФормаПравила = Обработка.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = Ссылка;
   		ФормаПравила.флТолькоПерсональные = Истина;
		ФормаПравила.КоманднаяПанель1Обновить(неопределено);
	Иначе		
		ФормаПравила=Обработки.ПравилаЦенообразования.ПолучитьФорму("Форма");
		ФормаПравила.Контрагент = Ссылка;
	КонецЕсли;

	ФормаПравила.ОткрытьМодально();//17.09.2017 модально!	
КонецЕсли;

КонецПроцедуры



//Орлов++ 13122013
Процедура УведомлениеОЗадолженностиПриИзменении(Элемент)
	ПроверкаНаличияЭлПочты(Элемент);
КонецПроцедуры
//Орлов-- 13122013

// Сакулина
Процедура ПроверкаНаличияЭлПочты(Элемент)
	Если Элемент.Значение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК АдресПочты,
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Объект = Контрагенты.Ссылка)
		|			И (КонтактнаяИнформация.Тип = &Тип)
		|			И (КонтактнаяИнформация.Вид = &Вид)
		|			И (Контрагенты.Покупатель = ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент", Ссылка);
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Результат = Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		Если СокрЛП(Результат.АдресПочты) = "" Тогда
			Сообщить("Необходимо установить адрес электронной почты!");
			Элемент.Значение = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



Процедура ЗапретОтгрузкиПриИзменении(Элемент)
		//+++ 22.08.2014 - только для фин.отдела и IT-отдела !
		Если НЕ (РольДоступна("яштФинДиректор") 
			или РольДоступна("ПравоЗавершенияРаботыПользователей")) тогда
		Предупреждение("У вас недостаточно прав для изменения Запрета отгрузок!
					   |          Обратитесь в финансовый отдел.", 30);
        ЗапретОтгрузки = НЕ ЗапретОтгрузки;  // обратно как было!
		
		иначеЕсли ЗапретОтгрузки тогда //+++ 23.03.2015 - авто-выключение 2х флагов
			РазрешитьГрузитьПриПДЗБолееСемиДней = ложь;
			ЕстьПодписаннаяСлужебнаяЗаписка     = ложь;
		КонецЕсли;
КонецПроцедуры

Процедура ПриниматьЗаказыЧерезСайтПриИзменении(Элемент)
	
	//----------------для Коннект-24------------------------
		Если НЕ (РольДоступна("ПравоЗавершенияРаботыПользователей")) тогда
		Предупреждение("У вас недостаточно прав для изменения признака 'ПриниматьЗаказыЧерезСайт'!
					   |          Обратитесь в IT-отдел.", 30);
		ПриниматьЗаказыЧерезСайт = НЕ ПриниматьЗаказыЧерезСайт;  // обратно как было!
		
		//Иначе //вкл. видимость
		//	ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Видимость   = ПриниматьЗаказыЧерезСайт;
		//	ЭлементыФормы.ПанельПокупательПоставщик.Страницы.Авторизация.Доступность = ПриниматьЗаказыЧерезСайт;
		КонецЕсли;
	
КонецПроцедуры

Процедура НеВыгружатьПриИзменении(Элемент)
	Если НЕ РольДоступна("ПолныеПрава") тогда
		  НеВыгружать = НЕ НеВыгружать;
		Предупреждение("У Вас Недостаточно прав для изменения флага!",30);
	ИначеЕсли не ПриниматьЗаказыЧерезСайт тогда
		Предупреждение("Данный флажок нужен только для выгрузки документов в Коннект-24...",60);
	КонецЕсли;
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
		
//---------------------еще раз проверим наличие какого-либо пароля-----------
	Если Авторизация.Количество()=0 тогда
		Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Авторизация.Наименование КАК База,
			|	Авторизация.Логин,
			|	Авторизация.Пароль
			|ИЗ
			|	Справочник.Авторизация КАК Авторизация
			|ГДЕ
			|	Авторизация.Владелец = &Владелец";

			Запрос.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
			Результат = Запрос.Выполнить();
			Авторизация = Результат.Выгрузить();
			
			Если Авторизация.Количество()=0 тогда
				
			элПароль = справочники.Авторизация.СоздатьЭлемент();
			элПароль.Наименование = "Store.YST.ru"; // НЕ МЕНЯТЬ!
			элПароль.Владелец = ссылка;
			элПароль.Записать();
			
			элПароль.Логин = "Client"+формат(элПароль.Код,"ЧГ=0");
			
		//+++( 14.01.2019
			//элПароль.Пароль = элПароль.СлучайныйНабор();// 6 англ.букв, Букв или цифр
			//элПароль.Записать();
			форма1 = элПароль.ПолучитьФорму("ФормаЭлемента");
			форма1.Открыть();
			//ничего менять нельзя!
			форма1.ЭлементыФормы.Логин.ТолькоПросмотр = Истина;
			форма1.ЭлементыФормы.Владелец.ТолькоПросмотр = Истина;
			Отказ1=ложь;
			форма1.ПередЗаписью(Отказ1); //ОБЯЗАТЕЛЬНЫЙ ВЫЗОВ - создание пароля!
			Если не Отказ1 тогда
				элПароль.Записать();
			КонецЕсли;	
		//+++)
			
			Иначе
				Сообщить("Уже существует логин и пароль для входа в Terminal.YST.ru !");
			КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

Процедура УстановитьОтборПоСудебнымРазбирательствамСДебиторами()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СудебныеРазбирательстваСДебиторами.ДатаПередачиДокументовВЮрОтдел КАК ДатаПередачиДокументовВЮрОтдел,
	                      |	СудебныеРазбирательстваСДебиторами.ДатаНачалаСудебногоПроцесса,
	                      |	СудебныеРазбирательстваСДебиторами.ДатаОкончанияСудебногоПроцесса,
	                      |	СудебныеРазбирательстваСДебиторами.РезультатСудебногоПроцесса,
	                      |	СудебныеРазбирательстваСДебиторами.Комментарий
	                      |ИЗ
	                      |	РегистрСведений.СудебныеРазбирательстваСДебиторами КАК СудебныеРазбирательстваСДебиторами
	                      |ГДЕ
	                      |	СудебныеРазбирательстваСДебиторами.Контрагент = &Контрагент
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	СудебныеРазбирательстваСДебиторами.НомерЗаписи
	                      |АВТОУПОРЯДОЧИВАНИЕ");

	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Ссылка);
	
	Попытка 
		Выгрузка = Запрос.Выполнить().Выгрузить();	
		ДанныеПоСудебнымРазбирательствамСДебиторами.Очистить();
		
		Для каждого СтрХ из Выгрузка Цикл
			СтрУ = ДанныеПоСудебнымРазбирательствамСДебиторами.Добавить();
			ЗаполнитьЗначенияСвойств(Стру,стрх);
		КонеЦЦикла;
	Исключение
		;
	Конецпопытки;
	
КонецПроцедуры

Процедура ЗаписатьСудебныеРазбирательстваСДебиторами()
	
	НаборЗаписей = РегистрыСведений.СудебныеРазбирательстваСДебиторами.СоздатьНаборЗаписей(); 
	
	НаборЗаписей.Отбор.Контрагент.Установить(ЭтотОбъект.Ссылка); 
	
	Для каждого СтрТЗ ИЗ ДанныеПоСудебнымРазбирательствамСДебиторами Цикл
		НовЗапись = НаборЗаписей.Добавить(); 
		ЗаполнитьЗначенияСвойств(НовЗапись,СтрТЗ);
		НовЗапись.Контрагент = ЭтотОбъект.Ссылка; 
		НовЗапись.НомерЗаписи = ДанныеПоСудебнымРазбирательствамСДебиторами.Индекс(СтрТЗ);
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина); 
	
КонецПроцедуры

Процедура СформироватьПисьмоДолжнику(Кнопка)
	
	ОбщаяЗадолженностьНаДатуФормирования = 0;
	МаксимальнаяДатаОплатыПоВсемНакладным = "";
	ПросроченнаяЗадолженность = 0;
	Пени = 0;
	
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Предупредительное письмо должнику";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Звездочка", "%*%");   //исключаются договоры за наличку
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	//               |	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты) КАК МаксДатаОплаты,
	//               |	А.Просрочка КАК Просрочка
	//               |ИЗ
	//               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	//               |			,
	//               |			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	//               |				И ДоговорКонтрагента.Владелец = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки,
	//               |	(ВЫБРАТЬ
	//               |		СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК Просрочка
	//               |	ИЗ
	//               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	//               |				,
	//               |				ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	//               |					И ДоговорКонтрагента.Владелец = &Контрагент
	//               |					И Сделка.ДатаОплаты < &ТекДата
	//			   |					И НЕ ДоговорКонтрагента.Наименование ПОДОБНО &Звездочка) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК А
	//               |
	//			   |ГДЕ
	//			   | НЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование ПОДОБНО &Звездочка
	//               |СГРУППИРОВАТЬ ПО
	//               |	А.Просрочка";
	
	
	Запрос.Текст =  "ВЫБРАТЬ
	 |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	 |	СУММА(ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &ТекДата
	 |					И НЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%""
	 |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК Просрочка,
	 |	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты) КАК МаксДатаОплаты
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |			,
	 |			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 |				И ДоговорКонтрагента.Владелец = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки" ;
	
	
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ОбщаяЗадолженностьНаДатуФормирования = Результат.СуммаУпрОстаток;
		МаксимальнаяДатаОплатыПоВсемНакладным = Лев(Результат.МаксДатаОплаты,10);
		ПросроченнаяЗадолженность = Результат.Просрочка;
	КонецЕсли;
	
	//Начисленные пени
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("Пени", Справочники.ТипыДоговоров.Пени);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(А.ПениОстаток, 0)) КАК Пени
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	               |		НачисленныеПениОстатки.ПениОстаток КАК ПениОстаток
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	               |				,
	               |				ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	               |					И ДоговорКонтрагента.Владелец = &Контрагент
	               |					И Сделка.ДатаОплаты < &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	               |			ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = НачисленныеПениОстатки.Сделка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	               |		НачисленныеПениОстатки.ПениОстаток
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		NULL,
	               |		ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0)
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	               |				&ТекДата,
	               |				ДоговорКонтрагента.Владелец = &Контрагент
	               |					И ДоговорКонтрагента.ТипДоговора = &Пени) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК А";
	Результат = Запрос.Выполнить().Выбрать();
	СуммаПени = 0;
	Если Результат.Следующий() Тогда
		СуммаПени = Результат.Пени;
	КонецЕсли;
	
	
	ЗапросАдреса = Новый Запрос;
	ЗапросАдреса.УстановитьПараметр("Объект", Ссылка);
	ЗапросАдреса.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗапросАдреса.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ЗапросАдреса.Текст = "ВЫБРАТЬ
	                     |	КонтактнаяИнформация.Представление
	                     |ИЗ
	                     |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                     |ГДЕ
	                     |	КонтактнаяИнформация.Объект = &Объект
	                     |	И КонтактнаяИнформация.Тип = &Тип
	                     |	И КонтактнаяИнформация.Вид = &Вид";
	Результат = ЗапросАдреса.Выполнить().Выбрать();
	Адрес = "";
	Если Результат.Следующий() Тогда
		Адрес = Результат.Представление;
	КонецЕсли;
	Если Адрес = "" Тогда
		Сообщить("Не заполнен юридический адрес контрагента!", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПредупредительноеПисьмоДолжнику");
	ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПисьма = Макет.ПолучитьОбласть("Основная");
	
	//// Вариант подключения компоненты из файла
	//Компонента = "C:\Program Files (x86)\1cv82\8.2.19.83\bin\NAMEDECL.DLL"; 
	//Попытка
	//	ЗагрузитьВнешнююКомпоненту(Компонента); 
	//	Объект = Новый("AddIn.NameDeclension");
	//Исключение
	//	Сообщить("Не удалось загрузить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	//КонецПопытки;
	
	//УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО");
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 3; //Дательный: кому? чему? 
	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
		Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	Иначе
		СтрокаФИО = ОсновноеКонтактноеЛицо.Наименование; 
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		

	//склонение должности
	РезультатДолжность = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо.Должность) Тогда
		Сообщить("Не заполнена должность основного контактного лица контрагента!", СтатусСообщения.Важное);
	Иначе
		МассивСтрок = РазложитьСтрокуВМассивПодстрок(ОсновноеКонтактноеЛицо.Должность, " ");
		// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
		НомерНесклоняемогоСимвола = 4;
		Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
			Попытка
				Рез = Объект.Просклонять(МассивСтрок[Номер-1], Падеж);
			Исключение
				Рез = МассивСтрок[Номер-1];
			КонецПопытки;
			РезультатДолжность = РезультатДолжность + ?(Номер > 1, " ", "") + Рез;
		КонецЦикла;
	КонецЕсли;

	ОбластьШапка.Параметры.Дата = Лев(ТекущаяДата(),10);
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьШапка.Параметры.ДолжностьРуководителя = РезультатДолжность;
	ОбластьШапка.Параметры.ФИОРуководителя = РезультатФИО;
	ОбластьШапка.Параметры.АдресКонтрагента = Адрес;
	
	ОбластьПисьма.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьПисьма.Параметры.НомерДоговора = ОсновнойДоговорКонтрагента.Номер;
	ОбластьПисьма.Параметры.ДатаДоговора = Лев(ОсновнойДоговорКонтрагента.Дата,10);
	ОбластьПисьма.Параметры.ОбщаяЗадолженностьНаДатуФормирования = ОбщаяЗадолженностьНаДатуФормирования;
	ОбластьПисьма.Параметры.МаксимальнаяДатаОплатыПоВсемНакладным = МаксимальнаяДатаОплатыПоВсемНакладным;
	ОбластьПисьма.Параметры.ПросроченнаяЗадолженность = ПросроченнаяЗадолженность;
	ОбластьПисьма.Параметры.Пени = СуммаПени;
	ОбластьПисьма.Параметры.ПросрочкаПлюсПени = СуммаПени + ПросроченнаяЗадолженность;
	ОбластьПисьма.Параметры.ТекущийПользователь = глТекущийПользователь;
	
	ТабДок.Вывести(ОбластьБланк);
	ТабДок.Вывести(ОбластьШапка);
	ТабДок.Вывести(ОбластьПисьма);  
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Предупредительное письмо " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить данные о формировании письма должнику?" + Символы.ПС + "Эти данные будут использованы при анализе работы с ПДЗ.";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Предупредительное письмо " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Предупредительное письмо от " + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Предупредительное письмо " +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура КоманднаяПанельФормыЖурналНачисленийПени(Кнопка)
	
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		ФормаСпискаПени = Документы.НачислениеПени.ПолучитьФормуСписка();
		ФормаСпискаПени.ДокументСписок.Отбор.Контрагент.Значение = ЭтотОбъект.Ссылка; 
		ФормаСпискаПени.ДокументСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаПени.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		ФормаСпискаПени.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельФормыНачислитьПени(Кнопка)
	
	ЭлементСправочника = Справочники.ВнешниеОбработки.НайтиПоКоду("265");  //расчет пени
	ХранилищеВО = ЭлементСправочника.ХранилищеВнешнейОбработки.Получить();
	ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
	ХранилищеВО.Записать(ИмяФайла);
	ОбработкаПени = ВнешниеОтчеты.Создать(ИмяФайла);
	ФормаОбработки = ОбработкаПени.ПолучитьФорму("ФормаОтчета");
	ФормаОбработки.Открыть();
	ФормаОбработки.Контрагент = Ссылка;
	
КонецПроцедуры

Процедура ВидимостьНаименованиеИННЭкспорт()
	
	//ЭлементыФормы.НадписьИНН1.Видимость = НЕ ЭлементыФормы.Экспорт.Значение;
	//ЭлементыФормы.НадписьИНН.Видимость = НЕ ЭлементыФормы.Экспорт.Значение;;
    ЭлементыФормы.НаименованиеИННэкспорт.Видимость = ЭлементыФормы.Экспорт.Значение;
	ЭлементыФормы.НаименованиеИННэкспорт1.Видимость = ЭлементыФормы.Экспорт.Значение;
	Если ЭлементыФормы.Экспорт.Значение Тогда
		ЭлементыФормы.НадписьИНН.Заголовок = "Название ИНН";
		ЭлементыФормы.НадписьИНН1.Заголовок = "Название ИНН";
		ЭлементыФормы.ДвуязычныйЭкспорт.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьИНН.Заголовок = "ИНН:";
		ЭлементыФормы.НадписьИНН1.Заголовок = "ИНН:";
		ЭлементыФормы.ДвуязычныйЭкспорт.Видимость = Ложь;
	КонецЕсли;	
	
	//26.04.2018
	//25.12.2018 Регион нужен для всех
	//ЭлементыФормы.НадписьРегион.Видимость = НЕ ЭлементыФормы.Экспорт.Значение;
	//ЭлементыФормы.Регион.Видимость        = НЕ ЭлементыФормы.Экспорт.Значение;

	ЭлементыФормы.НадписьСтрана.Доступность = ЭлементыФормы.Экспорт.Значение;
	ЭлементыФормы.Страна.Доступность = ЭлементыФормы.Экспорт.Значение;
	
КонецПроцедуры	

Процедура ЭкспортПриИзменении(Элемент)
	
	ВидимостьНаименованиеИННЭкспорт();
	
КонецПроцедуры

Процедура ДатаСрезаЦенПриИзменении(Элемент)
	
	Если НЕ ЭтоНовый() и ДатаСрезаЦен>'00010101' тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Авторизация.Логин,
		|	NULL КАК Приоритет
		|ИЗ
		|	Справочник.Авторизация КАК Авторизация
		|ГДЕ
		|	Авторизация.Владелец = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ПравилаЦенообразования.Приоритет
		|ИЗ
		|	РегистрСведений.ПравилаЦенообразования КАК ПравилаЦенообразования
		|ГДЕ
		|	ПравилаЦенообразования.Контрагент = &Контрагент";
		
		Запрос.УстановитьПараметр("Контрагент", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если  Выборка.Следующий() Тогда	 // есть авторизация в Store или Перс.правила	 
			если не НеВыгружать тогда
				Предупреждение("Автоматически включена выгрузка прайсов в Store",10);
			КонецЕсли;
			НеВыгружать = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЕстьДоговорПоручительстваПриИзменении(Элемент)
	Предупреждение("Флаг определяется по договорам контрагента!",30);
	ЕстьДоговорПоручительства=НЕ ЕстьДоговорПоручительства;
КонецПроцедуры

// АЧ
Процедура УстановитьОтборПоСудебнымДелам()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	данныепосудебнымделам.Дата,
	                      |	данныепосудебнымделам.НомерДела,
	                      |	данныепосудебнымделам.ИННИстца,
	                      |	данныепосудебнымделам.ИННОтветчика,
	                      |	данныепосудебнымделам.НаименованиеИстца,
	                      |	данныепосудебнымделам.НаименованиеОтветчика,
	                      |	данныепосудебнымделам.СудебныйОрган,
	                      |	данныепосудебнымделам.ТипДела,
	                      |	данныепосудебнымделам.АдресИстца,
	                      |	данныепосудебнымделам.АдресОтветчика
	                      |ИЗ
	                      |	РегистрСведений.ДанныеПоСудебнымДелам КАК данныепосудебнымделам Где ИННИстца = &ИНН или ИННОтветчика = &ИНН упорядочить по дата убыв");

	Запрос.УстановитьПараметр("ИНН",ИНН);
	
	Попытка 
		Выгрузка = Запрос.Выполнить().Выгрузить();	
		ДанныеПоСудебнымДелам.Очистить();
		
		Для каждого СтрХ из Выгрузка Цикл
			СтрУ = ДанныеПоСудебнымДелам.Добавить();
			ЗаполнитьЗначенияСвойств(Стру,стрх);
		КонеЦЦикла;
	Исключение
		;
	Конецпопытки;
КонецПроцедуры

Процедура КоманднаяПанель4ЗагрузитьДела(Кнопка)
	// Вставить содержимое обработчика.
	ЗагрузитьСудебныеДелаПоИНН(ИНН);
	УстановитьОтборПоСудебнымДелам();
КонецПроцедуры

Процедура ФильтрПоИННИстца(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ДанныеПоСудебнымДеламПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанельФормыПисьмоДолжнику(Кнопка)
	ОбщаяЗадолженностьНаДатуФормирования = 0;
	МаксимальнаяДатаОплатыПоВсемНакладным = "";
	ПросроченнаяЗадолженность = 0;
	Пени = 0;
	
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Предупредительное письмо должнику";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	//13.07.2016 добавлен тип договоров "пени" для расчета задолженности
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	//
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	 	Запрос.Текст =  "ВЫБРАТЬ
	 |	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
	 |	СУММА(ВЫБОР
	 |			КОГДА ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты < &ТекДата
	 |					И НЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"" //исключая договоры за наличку
	 |				ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	 |			ИНАЧЕ 0
	 |		КОНЕЦ) КАК Просрочка,
	 |	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты) КАК МаксДатаОплаты
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |			,
	 |			ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 |				И ДоговорКонтрагента.Владелец = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки" ;
	

	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ОбщаяЗадолженностьНаДатуФормирования = Результат.СуммаУпрОстаток;
		МаксимальнаяДатаОплатыПоВсемНакладным = Лев(Результат.МаксДатаОплаты,10);
		ПросроченнаяЗадолженность = Результат.Просрочка;
	КонецЕсли;
	
	//Начисленные пени
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("Пени", Справочники.ТипыДоговоров.Пени);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(А.ПениОстаток, 0)) КАК Пени
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	               |		НачисленныеПениОстатки.ПениОстаток КАК ПениОстаток
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	               |				,
	               |				ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	               |					И ДоговорКонтрагента.Владелец = &Контрагент
	               |					И Сделка.ДатаОплаты < &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленныеПени.Остатки КАК НачисленныеПениОстатки
	               |			ПО ВзаиморасчетыСКонтрагентамиОстатки.Сделка = НачисленныеПениОстатки.Сделка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	               |		НачисленныеПениОстатки.ПениОстаток
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		NULL,
	               |		ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0)
	               |	ИЗ
	               |		РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	               |				&ТекДата,
	               |				ДоговорКонтрагента.Владелец = &Контрагент
	               |					И ДоговорКонтрагента.ТипДоговора = &Пени) КАК ВзаиморасчетыСКонтрагентамиОстатки) КАК А";
	Результат = Запрос.Выполнить().Выбрать();
	СуммаПени = 0;
	Если Результат.Следующий() Тогда
		СуммаПени = Результат.Пени;
	КонецЕсли;
	
	
	ЗапросАдреса = Новый Запрос;
	ЗапросАдреса.УстановитьПараметр("Объект", Ссылка);
	ЗапросАдреса.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗапросАдреса.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ЗапросАдреса.Текст = "ВЫБРАТЬ
	                     |	КонтактнаяИнформация.Представление
	                     |ИЗ
	                     |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                     |ГДЕ
	                     |	КонтактнаяИнформация.Объект = &Объект
	                     |	И КонтактнаяИнформация.Тип = &Тип
	                     |	И КонтактнаяИнформация.Вид = &Вид";
	Результат = ЗапросАдреса.Выполнить().Выбрать();
	Адрес = "";
	Если Результат.Следующий() Тогда
		Адрес = Результат.Представление;
	КонецЕсли;
	Если Адрес = "" Тогда
		Сообщить("Не заполнен юридический адрес контрагента!", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("ПредупредительноеПисьмоДолжнику");
	Макет = ПолучитьОбщийМакет("ПредупредительноеПисьмоДолжнику");
	ОформитьОтФАП = Ложь;
	ОбластьБланк = ПолучитьОбластьПисьмаБланк(Макет, ОформитьОтФАП);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПисьма = Макет.ПолучитьОбласть("Основная");
	
	
	//// Вариант подключения компоненты из файла
	//Компонента = "C:\Program Files (x86)\1cv82\8.2.19.83\bin\NAMEDECL.DLL"; 
	//Попытка
	//	ЗагрузитьВнешнююКомпоненту(Компонента); 
	//	Объект = Новый("AddIn.NameDeclension");
	//Исключение
	//	Сообщить("Не удалось загрузить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	//КонецПопытки;
	
	//УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО");
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 3; //Дательный: кому? чему? 
	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
	//	Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	Иначе
		СтрокаФИО = ОсновноеКонтактноеЛицо.Наименование; 
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		

	//склонение должности
	РезультатДолжность = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо.Должность) Тогда
	//	Сообщить("Не заполнена должность основного контактного лица контрагента!", СтатусСообщения.Важное);
	Иначе
		МассивСтрок = РазложитьСтрокуВМассивПодстрок(ОсновноеКонтактноеЛицо.Должность, " ");
		// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
		НомерНесклоняемогоСимвола = 4;
		Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
			Попытка
				Рез = Объект.Просклонять(МассивСтрок[Номер-1], Падеж);
			Исключение
				Рез = МассивСтрок[Номер-1];
			КонецПопытки;
			РезультатДолжность = РезультатДолжность + ?(Номер > 1, " ", "") + Рез;
		КонецЦикла;
	КонецЕсли;

	ОбластьШапка.Параметры.Дата = Лев(ТекущаяДата(),10);
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	//ОбластьШапка.Параметры.ДолжностьРуководителя = РезультатДолжность;
	//ОбластьШапка.Параметры.ФИОРуководителя = РезультатФИО;
	ОбластьШапка.Параметры.АдресКонтрагента = Адрес;
	
	ОбластьПисьма.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьПисьма.Параметры.НомерДоговора = ОсновнойДоговорКонтрагента.Номер;
	ОбластьПисьма.Параметры.ДатаДоговора = Лев(ОсновнойДоговорКонтрагента.Дата,10);
	ОбластьПисьма.Параметры.ОбщаяЗадолженностьНаДатуФормирования = ОбщаяЗадолженностьНаДатуФормирования;
	ОбластьПисьма.Параметры.МаксимальнаяДатаОплатыПоВсемНакладным = МаксимальнаяДатаОплатыПоВсемНакладным;
	ОбластьПисьма.Параметры.ПросроченнаяЗадолженность = ПросроченнаяЗадолженность;
	ОбластьПисьма.Параметры.Пени = СуммаПени;
	Если ПросроченнаяЗадолженность = NULL Тогда
		ПросроченнаяЗадолженность = 0;
	КонецЕсли;
	ОбластьПисьма.Параметры.ПросрочкаПлюсПени = СуммаПени + ПросроченнаяЗадолженность;
	
	ТабДок.Вывести(ОбластьБланк);
	
	ТабДок.Вывести(ОбластьШапка);
	ОрганизацияПредставлениеРодитПадеж = ПолучитьПредставлениеОрганизацииДляПисьмаРодитПадеж(ОформитьОтФАП);
	ОрганизацияСтр = ПолучитьПредставлениеОрганизацииДляПисьма(ОформитьОтФАП);
	ОбластьПисьма.Параметры.ОрганизацияПредставлениеРодитПадеж = ОрганизацияПредставлениеРодитПадеж;
	ОбластьПисьма.Параметры.Организация                        = ОрганизацияСтр;
	ТабДок.Вывести(ОбластьПисьма);  
	
	ОблПодписи = ПолучитьОбластьПодписиДляПисьма(Макет, ОформитьОтФАП);
	ОблПодписи.Параметры.Организация         = ОрганизацияСтр;
	ОблПодписи.Параметры.ТекущийПользователь = глТекущийПользователь;
	ТабДок.Вывести(ОблПодписи);
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Предупредительное письмо " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить данные о формировании письма должнику?" + Символы.ПС + "Эти данные будут использованы при анализе работы с ПДЗ.";
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Предупредительное письмо " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Предупредительное письмо от " + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Предупредительное письмо " +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельФормыПриложение1(Кнопка)
	
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Письмо о приближении срока оплаты";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата);
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	 	Запрос.Текст =  "ВЫБРАТЬ
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ КАК Реализация,
	 	                |	СУММА(ВЫБОР
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	 	                |		КОНЕЦ) КАК СуммаДокумента,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ
	 	                |ИЗ
	 	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	 	                |			,
	 	                |			,
	 	                |			Регистратор,
	 	                |			Сделка В
	 	                |				(ВЫБРАТЬ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |				ИЗ
	 	                |					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.Владелец = &Контрагент
	 	                |						И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |						И Сделка.ДатаОплаты > &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |				ГДЕ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	 	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	 	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	 	                |
	 	                |СГРУППИРОВАТЬ ПО
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	 	                |
	 	                |УПОРЯДОЧИТЬ ПО
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	 	                |	Заказ" ;
	

	
	РезультатПоДолгам = Запрос.Выполнить().Выгрузить();
	
	ЗапросАдреса = Новый Запрос;
	ЗапросАдреса.УстановитьПараметр("Объект", Ссылка);
	ЗапросАдреса.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗапросАдреса.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ЗапросАдреса.Текст = "ВЫБРАТЬ
	                     |	КонтактнаяИнформация.Представление
	                     |ИЗ
	                     |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                     |ГДЕ
	                     |	КонтактнаяИнформация.Объект = &Объект
	                     |	И КонтактнаяИнформация.Тип = &Тип
	                     |	И КонтактнаяИнформация.Вид = &Вид";
	Результат = ЗапросАдреса.Выполнить().Выбрать();
	Адрес = "";
	Если Результат.Следующий() Тогда
		Адрес = Результат.Представление;
	КонецЕсли;
	Если Адрес = "" Тогда
		Сообщить("Не заполнен юридический адрес контрагента!", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Приложение1");
	ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 1; //Именительный. 
	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
	//	Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	Иначе
		СтрокаФИО = ОсновноеКонтактноеЛицо.Наименование; 
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		

	ОбластьШапка.Параметры.Дата = ТекущаяДата();
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьШапка.Параметры.АдресКонтрагента = Адрес;
	//ОбластьШапка.Параметры.КонтактноеЛицо = РезультатФИО;
	ТабДок.Вывести(ОбластьБланк);
	ТабДок.Вывести(ОбластьШапка);

	Для каждого стр из РезультатПоДолгам Цикл
		Если стр.Реализация <> Null Тогда
		ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.Заказ.ДатаОтгрузки;
		ОбластьСтрока.Параметры.НомерЗаказа = Стр.Заказ.Номер;
		ОбластьСтрока.Параметры.НомерТТН  = Стр.Реализация.Номер;
		ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
		ОбластьСтрока.Параметры.ДатаОплаты = Стр.Заказ.ДатаОплаты;
		ТабДок.Вывести(ОбластьСтрока);
		КонецЕсли;
	конецЦикла;	
	ОбластьПодвал.Параметры.ТекДата = ТекущаяДата();
	ОбластьПодвал.Параметры.Пени = Ссылка.ПроцентПени;
	Если ПроцентПени42 > 0 Тогда
	ОбластьПодвал.Параметры.Пени42 = "(Начиная с 42 дня просрочки ставка повышается до " +Строка(ПроцентПени42)+ "%)";
    иначе
	ОбластьПодвал.Параметры.Пени42 = "";
	КонецЕсли;
	ОбластьПодвал.Параметры.ТекущийПользователь = глТекущийПользователь;
	
	//02.06.2016 выводится остаток долга в письмо    	
	ЗапросОстатокДолга = Новый запрос;
	ЗапросОстатокДолга.УстановитьПараметр("Контрагент", Ссылка);
	ЗапросОстатокДолга.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	ЗапросОстатокДолга.УстановитьПараметр("ТекДата", ТекущаяДата());	
	ЗапросОстатокДолга.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК ОсталосьОплатить
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			,
		|			ДоговорКонтрагента.Владелец = &Контрагент
		|				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
		|				И Сделка.ДатаОплаты > &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = ЗапросОстатокДолга.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОсталосьОплатить = ВыборкаДетальныеЗаписи.ОсталосьОплатить;
	КонецЦикла;                                                  	
	ОбластьПодвал.Параметры.ОсталосьОплатить = ОсталосьОплатить; 	
	//конец 02.06.2016
	
	ТабДок.Вывести(ОбластьПодвал);  
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Письмо о приближении срока оплаты " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить данные о формировании письма должнику?" ;
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Письмо о приближении срока оплаты " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Письмо о приближении срока оплаты" + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Письмо о приближении срока оплаты" +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельФормыПриложение2(Кнопка)
	
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Письмо о возникновении ПДЗ";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	//СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("пени",Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));

	 	Запрос.Текст =  "ВЫБРАТЬ
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ КАК Реализация,
	 	                |	СУММА(ВЫБОР
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	 	                |		КОНЕЦ) КАК СуммаДокумента,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
	 	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) + 1 КАК Днейпросрочки,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	 	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаОстаток,
	 	                |	СУММА(ВЫБОР
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента.ТипДоговора = &Пени
	 	                |				ТОГДА ВЫБОР
	 	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |							ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |							ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |						КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |							ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	 	                |					КОНЕЦ
	 	                |			ИНАЧЕ 0
	 	                |		КОНЕЦ) КАК СуммаПени
	 	                |ИЗ
	 	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	 	                |			,
	 	                |			,
	 	                |			Регистратор,
	 	                |			Сделка В
	 	                |				(ВЫБРАТЬ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |				ИЗ
	 	                |					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.Владелец = &Контрагент
	 	                |						И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |						И (Сделка.ДатаОплаты < КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	 	                |							ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	 	                |						И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |				ГДЕ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	 	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	 	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	 	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 	                |				&ТекДата,
	 	                |				Сделка В
	 	                |					(ВЫБРАТЬ
	 	                |						ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |					ИЗ
	 	                |						РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.Владелец = &Контрагент
	 	                |							И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |							И (Сделка.ДатаОплаты < КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
	 	                |								ИЛИ сделка ССЫЛКА Документ.НачислениеПени)
	 	                |							И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |					ГДЕ
	 	                |						ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	 	                |			И ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |
	 	                |СГРУППИРОВАТЬ ПО
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	 	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) + 1,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.ДоговорКонтрагента,
	 	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0)
	 	                |
	 	                |УПОРЯДОЧИТЬ ПО
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	 	                |	Заказ" ;
	

	
	РезультатПросрочка = Запрос.Выполнить().Выгрузить();
	
	ЗапросАдреса = Новый Запрос;
	ЗапросАдреса.УстановитьПараметр("Объект", Ссылка);
	ЗапросАдреса.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗапросАдреса.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ЗапросАдреса.Текст = "ВЫБРАТЬ
	                     |	КонтактнаяИнформация.Представление
	                     |ИЗ
	                     |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                     |ГДЕ
	                     |	КонтактнаяИнформация.Объект = &Объект
	                     |	И КонтактнаяИнформация.Тип = &Тип
	                     |	И КонтактнаяИнформация.Вид = &Вид";
	Результат = ЗапросАдреса.Выполнить().Выбрать();
	Адрес = "";
	Если Результат.Следующий() Тогда
		Адрес = Результат.Представление;
	КонецЕсли;
	Если Адрес = "" Тогда
		Сообщить("Не заполнен юридический адрес контрагента!", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	//Макет = ПолучитьМакет("Приложение2");
	Макет = ПолучитьОбщийМакет("УведомлениеОПДЗ");

	//ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
	ОформитьОтФАП = Ложь;
	ОбластьБланк = ПолучитьОбластьПисьмаБланк(Макет, ОформитьОтФАП);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПросрочка");
	ОбластьШапкаОплата = Макет.ПолучитьОбласть("ШапкаОплаты");
	ОбластьСтрокаОплата = Макет.ПолучитьОбласть("СтрокаОплаты");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 1; //Дательный: кому? чему? 
	
	РезультатФИО = "";
	Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
	//	Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	Иначе
		СтрокаФИО = ОсновноеКонтактноеЛицо.Наименование; 
		РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	КонецЕсли;		

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента) КАК ДоговорКонтрагента,
		|	СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ТекДата,
		|			ДоговорКонтрагента.Владелец = &Контрагент
		|				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
		|				И (Сделка.ДатаОплаты < КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)
		|					ИЛИ сделка ССЫЛКА Документ.НачислениеПени) И НЕ ДоговорКонтрагента.Наименование ПОДОБНО ""%*%"") КАК ВзаиморасчетыСКонтрагентамиОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер";
	
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));

	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ЗначДог = "";
	СуммаДолга = 0;
	
	Пока Выборка.Следующий() Цикл
		Если  ЗначДог <> "" Тогда
			ЗначДог = ЗначДог+", ";
		КонецЕсли;
		Если Не ПустаяСтрока(Выборка.Договорконтрагента.Номер) Тогда
			ЗначДог =ЗначДог+"№ "+ Выборка.Договорконтрагента.Номер +" от " +Формат(Выборка.Договорконтрагента.Дата,"ДФ=dd.MM.yyyy");
		КонецЕсли;
		СуммаДолга= СуммаДолга+ Выборка.СуммаУпрОстаток;
	КонецЦикла;
	
	ОбластьШапка.Параметры.Дата = ТекущаяДата();
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьШапка.Параметры.АдресКонтрагента = Адрес;
//	ОбластьШапка.Параметры.КонтактноеЛицо = РезультатФИО;
	ОбластьШапка.Параметры.задолженность = суммаДолга;
	ОбластьШапка.Параметры.ЗначДог = ЗначДог;
	ОбластьШапка.Параметры.ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ТабДок.Вывести(ОбластьБланк);
	
	ОрганизацияСтр = ПолучитьПредставлениеОрганизацииДляПисьма(ОформитьОтФАП);
	ОбластьШапка.Параметры.Организация = ОрганизацияСтр;
	ТабДок.Вывести(ОбластьШапка);
	СуммаДолга = 0;
	ИтогоДолг = 0;
	
	Отбор = новый Структура("Реализация",Null);
	пустыеРЕал  = РезультатПросрочка.НайтиСтроки(отбор);
	Для каждого стр из ПустыеРеал Цикл
	РезультатПросрочка.Удалить(стр);	
	конецЦикла;

	
	Для каждого стр из РезультатПросрочка Цикл
		Если ТипЗнч(Стр.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")Тогда
			Если  Стр.Реализация <> Null Тогда
				отбор = новый Структура("Заказ",стр.Заказ);
				СтрокиСЗаказом= РезультатПросрочка.НайтиСтроки(отбор);
				Если СтрокиСЗаказом.Количество() > 1 Тогда
					СуммаДолга = Стр.СуммаОстаток;
					для каждого ст из СтрокиСЗаказом цикл
						Если ст = стр Тогда
							Если ст.СуммаДокумента< СуммаДолга Тогда
								ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаДокумента;
								ИтогоДолг = ИтогоДолг+Стр.СуммаДокумента;
							иначе	
								ОбластьСтрока.Параметры.СуммаОстаток = СуммаДолга;
								ИтогоДолг = ИтогоДолг+СуммаДолга;
							конецЕсли;	
						КонецЕсли;
						Если ст.СуммаДокумента < СуммаДолга Тогда
							СуммаДолга= СуммаДолга-Стр.СуммаДокумента;	
						иначе	
							СуммаДолга=0;
						конецЕсли;	
					конецЦикла;	
				иначе
					ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
					ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
				конецЕсли;	
				ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.Заказ.ДатаОтгрузки;
				ОбластьСтрока.Параметры.НомерЗаказа = Стр.Заказ.Номер;
				ОбластьСтрока.Параметры.НомерТТН  = Стр.Реализация.Номер;
				ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
				ОбластьСтрока.Параметры.ДатаОплаты = Стр.Заказ.ДатаОплаты;
				ОбластьСтрока.Параметры.ДнейПросрочки = Стр.ДнейПросрочки;
				ОбластьСтрока.Параметры.СуммаПени = Стр.суммаПени;
			конецЕсли;
		иначе
			Если  Стр.Реализация <> Null Тогда
				ОбластьСтрока.Параметры.ДатаОтгрузки = Стр.Реализация.Дата;
				ОбластьСтрока.Параметры.НомерЗаказа = Неопределено;
				ОбластьСтрока.Параметры.НомерТТН  = Стр.Реализация.Номер;
				ОбластьСтрока.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
				ОбластьСтрока.Параметры.СуммаОстаток = Стр.СуммаОстаток;
				ИтогоДолг = ИтогоДолг+Стр.СуммаОстаток;
				ОбластьСтрока.Параметры.ДатаОплаты = Стр.Реализация.Дата;
				ОбластьСтрока.Параметры.ДнейПросрочки = 0;
				//	ОбластьСтрока.Параметры.СуммаПени = 0;
				ОбластьСтрока.Параметры.СуммаПени = Стр.СуммаПени;

			конецЕсли;
		конецЕсли;	
		ТабДок.Вывести(ОбластьСтрока);
	конецЦикла;	
	ОбластьИтогПросрочка =  Макет.ПолучитьОбласть("ИтогПросрочка");
    ОбластьИтогПросрочка.Параметры.СуммаОтгрузки =РезультатПросрочка.Итог("суммаДокумента"); 
    ОбластьИтогПросрочка.Параметры.СуммаПени = РезультатПросрочка.Итог("суммаПени");
    ОбластьИтогПросрочка.Параметры.СуммаОстаток = ИтогоДолг;
	ТабДок.Вывести(ОбластьИтогПросрочка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Факторинг"));
	СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФакторингПредоплата);
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	 	Запрос.Текст =  "ВЫБРАТЬ
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ КАК Реализация,
	 	                |	СУММА(ВЫБОР
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |				ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход
	 	                |			КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |				ТОГДА -ВозвратТоваровОтПокупателяТовары.Сумма
	 	                |		КОНЕЦ) КАК СуммаДокумента,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Заказ,
	 	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0) КАК СуммаОстаток
	 	                |ИЗ
	 	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(
	 	                |			,
	 	                |			,
	 	                |			Регистратор,
	 	                |			Сделка В
	 	                |				(ВЫБРАТЬ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |				ИЗ
	 	                |					РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ТекДата, ДоговорКонтрагента.Владелец = &Контрагент
	 	                |						И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |						И Сделка.ДатаОплаты > &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |				ГДЕ
	 	                |					ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток > 0)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	 	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	 	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Регистратор = ВозвратТоваровОтПокупателяТовары.Ссылка
	 	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 	                |				&ТекДата,
	 	                |				ДоговорКонтрагента.Владелец = &Контрагент
	 	                |					И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |					И Сделка.ДатаОплаты > &ТекДата) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |		ПО ВзаиморасчетыСКонтрагентамиОбороты.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	 	                |
	 	                |СГРУППИРОВАТЬ ПО
	 	                |	ВЫБОР
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ИсправляемыйДокументРеализации
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	 	                |			ТОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор
	 	                |		КОГДА ВзаиморасчетыСКонтрагентамиОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	 	                |			ТОГДА ВозвратТоваровОтПокупателяТовары.ДокументПартии
	 	                |	КОНЕЦ,
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка,
	 	                |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток, 0)
	 	                |
	 	                |УПОРЯДОЧИТЬ ПО
	 	                |	ВзаиморасчетыСКонтрагентамиОбороты.Сделка.ДатаОплаты,
	 	                |	Заказ" ;
	

	
	РезультатПоДолгам = Запрос.Выполнить().Выгрузить();
	
	Если РезультатПоДолгам.Количество()> 0 Тогда
		
	ТабДок.Вывести(ОбластьШапкаОплата);
	
	Для каждого стр из РезультатПоДолгам Цикл
		Если  Стр.Реализация <> Null Тогда
		ОбластьСтрокаОплата.Параметры.ДатаОтгрузки = Стр.Заказ.ДатаОтгрузки;
		ОбластьСтрокаОплата.Параметры.НомерЗаказа = Стр.Заказ.Номер;
		ОбластьСтрокаОплата.Параметры.НомерТТН  = Стр.Реализация.Номер;
		ОбластьСтрокаОплата.Параметры.СуммаОтгрузки = Стр.СуммаДокумента;
		ОбластьСтрокаОплата.Параметры.СуммаОстаток = Стр.СуммаОстаток;

		ОбластьСтрокаОплата.Параметры.ДатаОплаты = Стр.Заказ.ДатаОплаты;
		ТабДок.Вывести(ОбластьСтрокаОплата);
		конецЕсли;
	конецЦикла;	
	
	ОбластьИтогОплаты =  Макет.ПолучитьОбласть("ИтогОплаты");
    ОбластьИтогОплаты.Параметры.СуммаОтгрузки =РезультатПоДолгам.Итог("СуммаДокумента"); 
	ОбластьИтогОплаты.Параметры.СуммаОстаток =РезультатПоДолгам.Итог("СуммаОстаток"); 

	ТабДок.Вывести(ОбластьИтогОплаты);
	
	КонецЕсли;
	ОбластьПодвал.Параметры.ТекДата = ТекущаяДата();
	ОбластьПодвал.Параметры.Организация = ОрганизацияСтр;
	ОбластьПодвал.Параметры.ТекущийПользователь = глТекущийПользователь;
	
	ТабДок.Вывести(ОбластьПодвал);  
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Письмо о возникновении ПДЗ " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить данные о формировании письма должнику?" ;
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Письмо о возникновении ПДЗ " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Письмо о возникновении ПДЗ " + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Письмо о возникновении ПДЗ" +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельФормыДействие(Кнопка)
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.Прочее;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Служебная записка о возбуждении судебного процесса";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	СписокТиповДоговора = Новый СписокЗначений;
	ОформитьОтФАП = ДействоватьОтОрганизацииФАП();
	Если ОформитьОтФАП = Истина Тогда
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
	Иначе
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Отсрочка"));
		СписокТиповДоговора.Добавить(Справочники.ТипыДоговоров.НайтиПоНаименованию("Предоплата"));
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокТиповДоговора", СписокТиповДоговора);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	 	Запрос.Текст =  "ВЫБРАТЬ
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Заказ,
	 	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) + 1 КАК Днейпросрочки,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо КАК Менеджер,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Номер,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	 	                |ИЗ
	 	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 	                |			&ТекДата,
	 	                |			ДоговорКонтрагента.Владелец = &Контрагент
	 	                |				И ДоговорКонтрагента.ТипДоговора В (&СписокТиповДоговора)
	 	                |				И Сделка.ДатаОплаты < КОНЕЦПЕРИОДА(&ТекДата, ДЕНЬ)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |
	 	                |СГРУППИРОВАТЬ ПО
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ОтветственноеЛицо,
	 	                |	РАЗНОСТЬДАТ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты, &ТекДата, ДЕНЬ) + 1,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Дата,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.Номер,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	 	                |
	 	                |УПОРЯДОЧИТЬ ПО
	 	                |	Заказ,
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.Сделка.ДатаОплаты" ;
	

	
	РезультатПросрочка = Запрос.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоНаименованию("Пени"));
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Запрос.Текст =  "ВЫБРАТЬ
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток
	 	                |ИЗ
	 	                |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 	                |			&ТекДата,
	 	                |			ДоговорКонтрагента.Владелец = &Контрагент
	 	                |				И ДоговорКонтрагента.ТипДоговора = &ТипДоговора) КАК ВзаиморасчетыСКонтрагентамиОстатки
	 	                |
	 	                |СГРУППИРОВАТЬ ПО
	 	                |	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток" ;
	

	
	РезультатПени = Запрос.Выполнить().Выгрузить();
	
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОНачалеСуда");
	//ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПросрочка");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	//
	//Попытка
	//	ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
	//	Объект = Новый("AddIn.Decl.CNameDecl");
	//Исключение
	//	Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	//КонецПопытки;
	//
	//Падеж = 1; //Дательный: кому? чему? 
	//
	//РезультатФИО = "";
	//Если НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
	//	Сообщить("Не заполнено основное контактное лицо контрагента!", СтатусСообщения.Важное);
	//Иначе
	//	СтрокаФИО = ОсновноеКонтактноеЛицо.Наименование; 
	//	РезультатФИО = Объект.Просклонять(СтрокаФИО, Падеж);
	//КонецЕсли;		

	
	Если ОформитьОтФАП Тогда
		ОтКогоДолжность = "менеджера по тендерам";
		ОтКогоФИО       = "Кураповой Е.А.";
	Иначе
		ОтКогоДолжность = "";//"____________________________________________";
		ОтКогоФИО       = "";//_____________________________________________________________________";
	КонецЕсли;
	ОбластьШапка.Параметры.ОтКогоДолжность = ОтКогоДолжность;
	ОбластьШапка.Параметры.ОтКогоФИО       = ОтКогоФИО;
	
//	ОбластьШапка.Параметры.Дата = ТекущаяДата();
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
//	ОбластьШапка.Параметры.АдресКонтрагента = Адрес;
//	ОбластьШапка.Параметры.КонтактноеЛицо = РезультатФИО;
	ОбластьШапка.Параметры.Сумма = ""+РезультатПросрочка.Итог("СуммаУпрОстаток")+" руб.";//суммаДолга;
	ОбластьШапка.Параметры.Пени = ""+РезультатПени.Итог("СуммаУпрОстаток")+" руб.";//суммаПени;
	ОбластьШапка.Параметры.СуммаПрописью = ЧислоПрописью(РезультатПросрочка.Итог("СуммаУпрОстаток"), "Л=ru_RU;ДП=Истина","рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");;
	//ОбластьШапка.Параметры.ТекДата = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ТабДок.Вывести(ОбластьБланк);
	
	//ОрганизацияСтр = ПолучитьПредставлениеОрганизацииДляПисьма(ОформитьОтФАП);
	//ОбластьШапка.Параметры.Организация = ОрганизацияСтр;
	ТабДок.Вывести(ОбластьШапка);

	Для каждого стр из РезультатПросрочка Цикл
		ОбластьСтрока.Параметры.ДатаЗаказа= Стр.СделкаДата;
		ОбластьСтрока.Параметры.НомерЗаказа = Стр.СделкаНомер;
		ОбластьСтрока.Параметры.НомерТТН  = яштПени.ПолучитьНомераРасходов(стр.заказ);
		ОбластьСтрока.Параметры.СуммаПДЗ = Стр.СуммаУпрОстаток;
		ОбластьСтрока.Параметры.ДатаОплаты = Стр.СделкаДатаОплаты;
		ОбластьСтрока.Параметры.ДнейПросрочки = Стр.ДнейПросрочки;
		ОбластьСтрока.Параметры.Менеджер = Стр.Менеджер;
		ТабДок.Вывести(ОбластьСтрока);
	конецЦикла;	
	
	
	ОбластьПодвал.Параметры.ТекДата = ТекущаяДата();
	//ОбластьПодвал.Параметры.РуководительПредставление = ПолучитьПредставлениеРуководителяДляПисьма(ОформитьОтФАП);
	ОбластьПодвал.Параметры.ТекущийПользователь       = глТекущийПользователь;
	
	ТабДок.Вывести(ОбластьПодвал);  
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Служебная записка о возбуждении судебного процесса " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить служебную записку о возбуждении судебного процесса?" ;
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Служебная записка о возбуждении судебного процесса " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Служебная записка о возбуждении судебного процесса " + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Служебная записка о возбуждении судебного процесса" +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	// Вставить содержимое обработчика.

КонецПроцедуры

Процедура КоманднаяПанельФормыДействие1(Кнопка)
	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.Прочее;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Служебная записка о завершении судебного процесса";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОЗавершенииСуда");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.ТекДата = ТекущаяДата();
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьШапка.Параметры.ТекущийПользователь = глТекущийПользователь;
	
	ТабДок.Вывести(ОбластьШапка); 
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Служебная записка о завершении судебного процесса " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить служебную записку о завершении судебного процесса?" ;
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Служебная записка о завершении судебного процесса " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Служебная записка о завершении судебного процесса " + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Служебная записка о завершении судебного процесса" +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	// Вставить содержимое обработчика.

КонецПроцедуры

Процедура КоманднаяПанельФормыОЗакрытииПени(Кнопка)
СписокЗначений = Новый СписокЗначений;
СписокЗначений.Добавить("клиент отказывается платить.");
СписокЗначений.Добавить("клиент оперативно закрыл долг.");
СписокЗначений.Добавить("невозможно взыскать начисленные пени, работать с данным клиентом больше не будем.");
СписокЗначений.Добавить("неверная отсрочка.");
СписокЗначений.Добавить("деньги отправлены на карту.");
СписокЗначений.Добавить("возврат товара,не проведен взаимозачет.");
СписокЗначений.Добавить("водитель не привез деньги.");
СписокЗначений.Добавить("не правильно разнесены деньги.");
СписокЗначений.Добавить("другое...(ввести свою причину)");
ВыбранныйЭлемент = СписокЗначений.ВыбратьЭлемент("Выберите причину закрытия пеней");
Если выбранныйЭлемент.Значение = "другое...(ввести свою причину)" Тогда
	 ВыбранныйЭлемент = Неопределено;
	ВвестиСтроку(ВыбранныйЭлемент,"Введите причину для закрытия пени",0,истина);
конецЕсли;
Если ВыбранныйЭлемент <> Неопределено Тогда
	
 	НовСобытие = Документы.Событие.СоздатьДокумент();
	НовСобытие.Дата = ТекущаяДата();
	НовСобытие.ВидСобытия = Перечисления.ВидыСобытий.Прочее;
	НовСобытие.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	НовСобытие.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
	НовСобытие.Контрагент = Ссылка;
	НовСобытие.Ответственный = глТекущийПользователь;
	НовСобытие.ОписаниеСобытия = "Служебная о закрытии пени";
	НовСобытие.Важность = Перечисления.Важность.Высокая;
	
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ЗакрытиеПени");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.ТекДата = ТекущаяДата();
	ОбластьШапка.Параметры.Причина = ВыбранныйЭлемент;
	ОбластьШапка.Параметры.НазваниеКонтрагента = НаименованиеПолное;
	ОбластьШапка.Параметры.ТекущийПользователь = глТекущийПользователь;
	
	Попытка
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl", ТипВнешнейКомпоненты.Native); 
		Объект = Новый("AddIn.Decl.CNameDecl");
	Исключение
		Сообщить("Не удалось подключить внешнюю компоненту по причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Падеж = 2; //Родительный: кого? 	
	ФИОТекущийПользователь = "";
	СтрокаФИО = глТекущийПользователь.Наименование; 
	ФИОТекущийПользователь = Объект.Просклонять(СтрокаФИО, Падеж);
	ОбластьШапка.Параметры.ФИОТекущийПользователь = ФИОТекущийПользователь;
	
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(НачисленныеПениОстатки.ПениОстаток) КАК ПениОстаток
		|ИЗ
		|	РегистрНакопления.НачисленныеПени.Остатки(&текДата, Контрагент = &Контрагент) КАК НачисленныеПениОстатки";
	
	Запрос.УстановитьПараметр("Контрагент", ссылка);
	Запрос.УстановитьПараметр("текДата", текущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
    РезультатЗапроса.Следующий();	
	ОбластьШапка.Параметры.Пени = РезультатЗапроса.ПениОстаток;
	
	ТабДок.Вывести(ОбластьШапка); 
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Показать();
	
	ИмяКаталога = ПолучитьИмяКаталога(глТекущийПользователь);
	ТабДок.Записать(ИмяКаталога + "\Служебная записка о закрытии пени " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf", ТипФайлаТабличногоДокумента.PDF);	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить служебную записку о закрытии пени?" ;
	Ответ = Вопрос(Текст, Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НовСобытие.Записать(РежимЗаписиДокумента.Проведение);
		
		Попытка
			ЛокХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяКаталога + "\Служебная записка о закрытии пени " +Ссылка.Наименование+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf"));
			СправочникХЗН = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			СправочникХЗН.Наименование = "Служебная записка о закрытии пени" + ТекущаяДата();
			СправочникХЗН.Хранилище = ЛокХранилище;
			СправочникХЗН.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
			СправочникХЗН.Объект = НовСобытие.Ссылка;
			СправочникХЗН.ИмяФайла = "Служебная записка о закрытии пени" +Ссылка.Наименование
			+ " от " +Лев(ТекущаяДата(), 10)+ ".pdf";
			СправочникХЗН.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
   
КонецЕсли;


КонецПроцедуры

Процедура ОсновныеДействияФормыДействие(Кнопка)
      Режим = РежимДиалогаВопрос.ДаНет;
      Ответ = Вопрос("Создать задачу на согласование лимита контрагента?", Режим, 0);
      Если Ответ = КодВозвратаДиалога.Нет Тогда
      Возврат;
      КонецЕсли;
	
	НовыйЛимит =0;
	ВвестиЧисло(НовыйЛимит,"Введите лимит для согласования", 15, 0); 
	Если НовыйЛимит <> 0 Тогда
	//-------новая задача------------
	задача = задачи.ЗадачиПользователя.СоздатьЗадачу();
	
		Если НовыйЛимит >= 5000000 Тогда
			Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Малышев");
		иначеЕсли глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00106") или  //ростов
				глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00112") или   // питер
				глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00133") или   // москва
				глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00107") или   // москва
				глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00122") или // екатеринбург
				глТекущийпользователь.ОсновноеПодразделение  = справочники.Подразделения.НайтиПоКоду("00138")Тогда  // екатеринбург
			   //Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Серков");
			   Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)");
		иначе
			  Задача.Исполнитель = Справочники.Пользователи.НайтиПоКоду("Горохов");
		конецЕсли;
	задача.Товары.Очистить();
	задача.НаСогласование = ИСТИНА;
	задача.Наименование = "Согласуйте лимит для клиента: "+строка(ссылка.НаименованиеПолное); 
	задача.Описание = "Утвердите новый лимит для контрагента "+строка(ссылка.НаименованиеПолное)+" "+НовыйЛимит + " руб. Лимит, установленный на текущий момент "+ ДопустимаяСуммаЗадолженности + " руб.";
	задача.Инициатор   = глТекущийПользователь;
	задача.Объект   	 = ссылка;
	Задача.РеквизитДляСогласования = "ДопустимаяСуммаЗадолженности";
	Задача.ЗначениеРеквизитаДляСогласования = НовыйЛимит;
	задача.Дата 		    = ТекущаяДата();
	задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
	задача.Оповещение     = истина;
	задача.СрокОповещения = ТекущаяДата(); 
	           попытка
	            задача.Записать();
				Сообщить(" + Сформирована ""Задача на согласование"" для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Информация );	
			  исключение
				Сообщить(" - Не удалось сформировать электронную Задачу на согласование для сотрудника: "+строка(задача.Исполнитель), СтатусСообщения.Внимание );	
			КонецПопытки;
	КонецЕсли;		
КонецПроцедуры

Процедура рсБумажныеДоговораПутьКФайлуДоговораОткрытие(Элемент, СтандартнаяОбработка)
	эл = ЭлементыФормы.рсБумажныеДоговора.ТекущиеДанные;
	СтандартнаяОбработка = ложь;
	ЗапуститьПриложение(  эл.ПутьКФайлуДоговора );
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Истина;	
	Если ЭлементыФормы.Панель.Страницы[ ТекущаяСтраница ].Имя = "БумажныеДоговоры" тогда
		если ЭтоНовый() тогда
			рсБумажныеДоговора.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсБумажныеДоговора.Отбор.Контрагент.Использование = истина;
			рсБумажныеДоговора.Отбор.Контрагент.Значение = справочники.Контрагенты.ПустаяСсылка() ;
			
			рсДоверенности.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсДоверенности.Отбор.Контрагент.Использование = истина;
			рсДоверенности.Отбор.Контрагент.Значение = справочники.Контрагенты.ПустаяСсылка() ;
			Предупреждение("Контрагент еще не записан, информация по договорам - недоступна!", 10);
		иначе	
			рсБумажныеДоговора.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсБумажныеДоговора.Отбор.Контрагент.Использование = истина;
			рсБумажныеДоговора.Отбор.Контрагент.Значение = ссылка;
			
			рсДоверенности.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсДоверенности.Отбор.Контрагент.Использование = истина;
			рсДоверенности.Отбор.Контрагент.Значение = ссылка;
		КонецЕсли;	
		ЭлементыФормы.рсБумажныеДоговора.НастройкаОтбора.Контрагент.Доступность = ложь;
		ЭлементыФормы.рсДоверенности.НастройкаОтбора.Контрагент.Доступность = ложь;
	ИначеЕсли  ЭлементыФормы.Панель.Страницы[ ТекущаяСтраница ].Имя = "Общие" тогда
		Если ЭтоНовый() = Ложь Тогда
			БумажныеДоговораДействующие.Очистить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БумажныеДоговоры.Период КАК ДатаДоговора,
			|	БумажныеДоговоры.ДатаОкончанияДействия КАК ДатаОкончания,
			|	БумажныеДоговоры.Состояние,
			|	БумажныеДоговоры.ЕстьДоговорПоручительства,
			|	БумажныеДоговоры.Номер КАК НомерДоговора,
			|	БумажныеДоговоры.Пролонгируется
			|ИЗ
			|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
			|ГДЕ
			|	БумажныеДоговоры.Контрагент = &Контрагент
			|	И (НАЧАЛОПЕРИОДА(БумажныеДоговоры.ДатаОкончанияДействия, ДЕНЬ) > &ТекДата
			|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата
			|				И БумажныеДоговоры.Пролонгируется)"    ;
			Запрос.УстановитьПараметр("ПустаяДата",Дата('00010101'));
			Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
			Запрос.УстановитьПараметр("Контрагент",Ссылка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НовСтр  = БумажныеДоговораДействующие.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Выборка);
			КонецЦикла;
		КонецЕсли; 
		
	ИначеЕсли  ЭлементыФормы.Панель.Страницы[ ТекущаяСтраница ].Имя = "Контакты" тогда  //+++ 27.07.2017
	ЭлементыФормы.КонтактныеЛица.Значение.Отбор.ПометкаУдаления.ВидСравнения = ВидСравнения.Равно;
    ЭлементыФормы.КонтактныеЛица.Значение.Отбор.ПометкаУдаления.значение = ЛОЖЬ;
    ЭлементыФормы.КонтактныеЛица.Значение.Отбор.ПометкаУдаления.использование = Истина;
	КонецЕсли;	
	
	ЭлементыФормы.рсБумажныеДоговора.НастройкаОтбора.Контрагент.Доступность = ложь;
	ЭлементыФормы.рсДоверенности.НастройкаОтбора.Контрагент.Доступность = ложь;


КонецПроцедуры

Процедура рсБумажныеДоговораПередНачаломДобавления(Элемент, Отказ, Копирование)
Если Копирование Тогда
	Предупреждение("Нельзя добавлять договор копированием!", 10);
	Отказ = Истина;
КонецЕсли;

Если ЭтоНовый() тогда
	Предупреждение("Нельзя добавлять договор, пока Элемент не записан!", 10);
	Отказ = Истина;
КонецЕсли;	

//+++ 26.11.2015 - запрет прямого добавления
Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") 
	или  СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Лаврентьева"
	или  СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Цуканова Т.С."
	или РольДоступна("ПравоЗавершенияРаботыПользователей")
	) тогда
	Предупреждение("Записи о бумажном договоре появляются автоматически 
	|при записи нового Договора контрагента с номером и датой договора.
	|Прямое добавление бумажных договоров - запрещено!", 30);
	Отказ = Истина;
КонецЕсли;

ПараметрыСеанса.ПустойКонтрагент = ссылка; //+++ 12.11.2015

КонецПроцедуры

Процедура рсБумажныеДоговораПриПолученииДанных(Элемент, ОформленияСтрок)
	
Для каждого стр1 из ОформленияСтрок цикл
ЕстьЦвет = ложь;
	Если стр1.ДанныеСтроки.ДатаОкончанияДействия>'00010101' тогда
		числоДней = (стр1.ДанныеСтроки.ДатаОкончанияДействия - НачалоДня(ТекущаяДата())) / 86400;
		Если числоДней < 0 тогда
			стр1.цветФона = webЦвета.СветлоСерый; // закрыт!
			ЕстьЦвет = истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если не стр1.ДанныеСтроки.Состояние.Пустая() и не ЕстьЦвет тогда
	стр1.цветФона =webЦвета[ стр1.ДанныеСтроки.Состояние.ЦветСостояния ];
	КонецЕсли;
КонецЦикла;

	ОбновитьЧислоДнейОтсрочкиПоДоговору(); //+++ 15.03.2016

КонецПроцедуры

Процедура рсБумажныеДоговораПередУдалением(Элемент, Отказ)
	
	//+++ 26.11.2015 - запрет прямого добавления
	Если ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") 
		или РольДоступна("ПравоЗавершенияРаботыПользователей")
			) тогда
		Если Вопрос("Вы действительно хотите удалить запись о бумажном договоре?", РежимДиалогаВопрос.ДаНет, 30)
		 	<> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе		
	Предупреждение("У Вас Недостаточно прав для удаления 
				   |  записей о бумажных договорах!", 30);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура рсДоверенностиПередУдалением(Элемент, Отказ)
	
	//+++ 26.11.2015 - запрет прямого удаления
	Если ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") 
		или РольДоступна("ПравоЗавершенияРаботыПользователей")
			) тогда
		Если Вопрос("Вы действительно хотите удалить запись о доверенности?", РежимДиалогаВопрос.ДаНет, 30)
		 	<> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	Иначе		
	Предупреждение("У Вас Недостаточно прав для удаления 
				   |  записей о доверенностях!", 30);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура рсДоверенностиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого стр1 из ОформленияСтрок цикл
		Если стр1.ДанныеСтроки.ДатаПо>'00010101' тогда
			числоДней = (стр1.ДанныеСтроки.ДатаПо - НачалоДня(ТекущаяДата())) / 86400;
			Если числоДней < 0 тогда
				стр1.цветФона = webЦвета.СветлоСерый; // закрыт!
				ЕстьЦвет = истина;
			ИначеЕсли числоДней < 30 тогда // скоро закончится!
				стр1.цветФона = webЦвета.СветлоРозовый;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура рсДоверенностиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭтоНовый() тогда
		Предупреждение("Нельзя добавлять доверенность, пока не записан Контрагент!", 10);
		Отказ = Истина;
	КонецЕсли;	
	
	//+++ 26.11.2015 - запрет прямого добавления
	//Если НЕ ( СокрЛП(ПараметрыСеанса.ТекущийПользователь.Код)="Красникова"
	//			или РольДоступна("ПолныеПрава")
	//			или РольДоступна("яштФинДиректор")
	//			или РольДоступна("ПравоЗавершенияРаботыПользователей")
	//		) тогда
	
	//+++ 05.05.2016
	Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьДанныеПоФайламДоверенностей")
		      или РольДоступна("ПравоЗавершенияРаботыПользователей") ) тогда
    	Предупреждение("У Вас недостаточно прав для добавления доверенностей!", 30);
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыСеанса.ПустойКонтрагент = ссылка; //+++ 12.11.2015
	
КонецПроцедуры

Процедура ВыгрузитьВStorНажатие(Элемент)
	
	Если этаФорма.Модифицированность тогда
		Предупреждение("Перед выгрузкой следует записать клиента!",10);
		Возврат;
	КонецЕсли;
	
	ТаблицаЦен = ПолучитьЦеныПоВсемТоварамКлиента(Ссылка.Код);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВременныхФайлов()+"document.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();  
	ЗаписьXML.ЗаписатьНачалоЭлемента("Root");  
	ЗаписьXML.ЗаписатьНачалоЭлемента("PartnerId");
	ЗаписьXML.ЗаписатьТекст(ссылка.Код);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Prices");  
	
	Для Каждого Строка Из таблицаЦен Цикл
		
		Если строка.цена>0 Тогда //24.09.2018 - строго больше 0! появились 2 товара с ценой -1!
		ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
			
		ЗаписьXML.ЗаписатьАтрибут("ProductId", строка.Код);
		ЗаписьXML.ЗаписатьАтрибут("Price", Строка(Формат(строка.Цена,"ЧРД=.; ЧГ=0")));  // через ТОЧКУ (для цен USD)!
		
		//+++ 26.09.2017
		ценаПредоплаты = ?( строка.Цена = строка.ЦенаСоСкидкойПредоплаты, 0, строка.ЦенаСоСкидкойПредоплаты);
		ЗаписьXML.ЗаписатьАтрибут("Price2", Строка(Формат(ценаПредоплаты,"ЧРД=.; ЧН=0; ЧГ=0")));  //26-27.09.2017

		ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	
	КонецЦикла;  
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.Закрыть(); 
	сообщить("Прайс сохранен в файл: "+КаталогВременныхФайлов()+"document.xml");
	
	удачно = ОбменСУТИнтернетМагазин.SIM_ВыгрузитьФайлНаСервер(КаталогВременныхФайлов()+"document.xml","importpricesforoneclient",Ложь,"terminal.yst.ru"); // выгружаем, 
	Если удачно Тогда
		Сообщить("Выгрузка прайса в Terminal прошла успешно.", СтатусСообщения.Информация);
	иначе
		Сообщить("Ошибка при выгрузке прайса в Terminal!", СтатусСообщения.Внимание);
	конецЕсли;	


КонецПроцедуры


функция ПолучитьСвойство(Код="00119", ПустоеЗнач=0)
	
	рез = ПустоеЗнач;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство.Код = &Код";
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Код", Код);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		рез = выборка.Значение;
	КонецЕсли;
	
	возврат рез;
	
КонецФункции	

процедура ЗаписатьСвойство(Код="00119",знач1=0)	
	регСв = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	регСв.Объект  = Ссылка;
	регСв.Свойство= ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду(Код);
	регСв.Значение= знач1;
	попытка 
		регСв.Записать(Истина); // ПОВЕРХ
		
		ОбновитьСвойства();     // обратно в таблицу всех свойств

	Исключение
		Сообщить("Ошибка при записи свойства: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
КонецПроцедуры


Процедура ВажностьПриИзменении(Элемент)
	Если Важность>4 тогда
		Предупреждение("Важность не может быть больше 4",10);
		Важность=4;
	КонецЕсли;	
	ЗаписатьСвойство(КодСвойстваВажность,Важность);
КонецПроцедуры

Процедура ВажностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Важность = Важность + Направление;
	Если Важность>4 тогда
		Важность=4;
	КонецЕсли;	
	Если Важность<0 тогда
		Важность=0;
	КонецЕсли;	
	ЗаписатьСвойство(КодСвойстваВажность,Важность);
КонецПроцедуры

Процедура КоманднаяПанель2ОбновитьВсеСвойства(Кнопка)
ОбновитьСвойства();	
КонецПроцедуры

функция КолДругихКлиентов(назв)
	
	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	Контрагенты.Ссылка
	 |ИЗ
	 |	Справочник.Контрагенты КАК Контрагенты
	 |ГДЕ
	 |	Контрагенты.Ссылка <> &Ссылка
	 |	И Контрагенты.Наименование = &Наименование
	 |	И НЕ Контрагенты.ЭтоГруппа";
	 Запрос.УстановитьПараметр("Наименование", Наименование);
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 рез = выборка.Количество();
	 
	возврат рез;
КонецФункции

Процедура КонтактныеЛицаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого стр1 из ОформленияСтрок цикл
	эл = стр1.ДанныеСтроки.Ссылка;

		стр1.ячейки.Телефоны.ОтображатьТекст = истина;
		стр1.ячейки.Телефоны.текст = ПолучитьДанныеКонтактногоЛица(эл, "Телефон");
		
		стр1.ячейки.email.ОтображатьТекст = истина;
		стр1.ячейки.email.текст = ПолучитьДанныеКонтактногоЛица(эл, "АдресЭлектроннойПочты");
		
		стр1.ячейки.Skype.ОтображатьТекст = истина;
		стр1.ячейки.Skype.текст = ПолучитьДанныеКонтактногоЛица(эл, "Другое", "skype");
	КонецЦикла;	

КонецПроцедуры


Функция ПолучитьДанныеКонтактногоЛица(Эл=неопределено, Тип1="", Вид1="")

	СтрокаТелефонов = "";
	Если Эл <> Неопределено И НЕ ЗначениеНеЗаполнено(Эл) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|//Тип1	И КонтактнаяИнформация.Тип = &Тип
		|//Вид1	И КонтактнаяИнформация.Вид = &Вид
	    |
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ
		|
		|";
		Запрос.УстановитьПараметр("Объект", Эл);
	
		Если Тип1<>"" тогда
			Запрос.Текст = стрЗаменить(Запрос.Текст , "//Тип1","");
			Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации[Тип1]);
		КонецЕсли;	
		Если вид1<>"" тогда
			Запрос.Текст = стрЗаменить(Запрос.Текст , "//Вид1","");
			Запрос.УстановитьПараметр("Вид"   , справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Вид1));
		КонецЕсли;	
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ?(СтрокаТелефонов="","",", ") + Выборка.Представление;
		КонецЦикла;
	
	КонецЕсли;
	
	//Если Тип1="Телефон" и Не ПустаяСтрока(СтрокаТелефонов) Тогда
	//	СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	//КонецЕсли;
	
	возврат СтрокаТелефонов;
КонецФункции

Процедура КонтактнаяИнформацияПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ДопустимоеЧислоДнейЗадолженностиПриИзменении(Элемент)
	
	если условияоплаты = "Отсрочка до 14 дн." и ЧислоДнейОтсрочкиПоДоговору>14 тогда	
    	Предупреждение("Значение не может превышать 14 дней!", 30);
		ЧислоДнейОтсрочкиПоДоговору=14;
	ИначеЕсли ЧислоДнейОтсрочкиПоДоговору>999 тогда   // +1 запасная цифра... 
		Предупреждение("Значение не может превышать 999 дней!", 30);
		ЧислоДнейОтсрочкиПоДоговору=999;
	КонецЕсли;
	
КонецПроцедуры

//+++ 23.03.2016
процедура ЗаполнитьПунктыПроработки()
	
	мас = новый массив;
	мас.Добавить("1т.Научить всех менеджеров и продавцов в РТТ клиента пользоваться ТЕРМИНАЛОМ (Подбор по авто и параметрам)");          //0
				 
	мас.Добавить("2т.Обязательная подгрузка остатков двух складов, с указанием сроков доставки. Контроль подгрузки ассортимента ЯШТ (шины, диски, АКБ, аксессуары)"); //1
				 
	мас.Добавить("3т.Ценообразование: ДИСКИ: залить входное ЦО для клиента в '1С' и проконтролировать правильность заливки ЦО для конечного потребителя (не ниже РРЦ). Показать расчет клиенту сколько он будет зарабатывать на наших дисках по сравнению с конкурентами."); //2
				 
	мас.Добавить("4т.Отсрочка по системе ТЕРМИНАЛ не должна превышать 14 дней."); //3
	мас.Добавить("5т.Заказы от клиентов должны поступать ежедневно."); //4
	
	
	мас.Добавить("1и.Подгрузка всех брендов: логотипы"); //5
	мас.Добавить("2и.Фото"); //6
	мас.Добавить("3и.Остатки головного и ближайшего склада"); //7
	мас.Добавить("4и.Ценообразование (входное и цена на сайте)."); //8
	мас.Добавить("5и.Логистика, срок доставки"); //9
	мас.Добавить("6и.Подбор по авто/по производителю"); //10
	мас.Добавить("7и.Рейтинг при подборе (по авто, по цене. По популярности). Мы на 1-2 странице максимально представлены."); //11
				 
	ПунктыПроработки.Очистить();
   	начП = 0; КонП =  мас.Количество()-1;
	
	Если НЕ ЭтотОбъект.ЯШТТерминал и НЕ ЭтотОбъект.ЯШТИнтернет и НЕ ЭтотОбъект.ИМ тогда  //29.03.2018
		Возврат; // ничего, всё чистим
	ИначеЕсли ЭтотОбъект.ЯШТТерминал и НЕ ЭтотОбъект.ЯШТИнтернет тогда
		КонП = 4;
	ИначеЕсли НЕ ЭтотОбъект.ЯШТТерминал и ЭтотОбъект.ЯШТИнтернет тогда
		начП = 5;
	КонецЕсли;	

	для i=начП по КонП цикл
		стр1 = ПунктыПроработки.Добавить();
		стр1.Номер = i+1;
		стр1.ПунктыДляПроработки = мас[i];
		стр1.Проработан  = ЛОЖЬ; 
		стр1.Комментарий = "";
		стр1.КомментарийПред = "";
	КонецЦикла;	
	
	Если НЕ ЭтоНовый() тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	табл.Номер,
	               |	табл.ПунктыДляПроработки,
	               |	табл.Проработан,
	               |	табл.Комментарий,
	               |	табл.КомментарийПред,
				   |	табл.ДатаИзменения
	               |ПОМЕСТИТЬ ВТ_ФиксТабл
	               |ИЗ
	               |	&Табл КАК табл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФиксТабл.Номер КАК Номер,
	               |	ФиксТабл.ПунктыДляПроработки,
	               |	ВЫБОР
	               |		КОГДА КонтрагентыПунктыДляПроработки.Проработан ЕСТЬ NULL 
	               |			ТОГДА ФиксТабл.Проработан
	               |		ИНАЧЕ КонтрагентыПунктыДляПроработки.Проработан
	               |	КОНЕЦ КАК Проработан,
	               |	ВЫБОР
	               |		КОГДА КонтрагентыПунктыДляПроработки.Комментарий ЕСТЬ NULL 
	               |			ТОГДА ФиксТабл.Комментарий
	               |		ИНАЧЕ КонтрагентыПунктыДляПроработки.Комментарий
	               |	КОНЕЦ КАК Комментарий,
	               |	ВЫБОР
	               |		КОГДА КонтрагентыПунктыДляПроработки.КомментарийПред ЕСТЬ NULL 
	               |			ТОГДА ФиксТабл.КомментарийПред
	               |		ИНАЧЕ КонтрагентыПунктыДляПроработки.КомментарийПред
	               |	КОНЕЦ КАК КомментарийПред,
				   |	ВЫБОР
	               |		КОГДА КонтрагентыПунктыДляПроработки.ДатаИзменения ЕСТЬ NULL 
	               |			ТОГДА ФиксТабл.ДатаИзменения
	               |		ИНАЧЕ КонтрагентыПунктыДляПроработки.ДатаИзменения
	               |	КОНЕЦ КАК ДатаИзменения

	               |ИЗ
	               |	ВТ_ФиксТабл КАК ФиксТабл
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (выбрать * из Справочник.Контрагенты.ПунктыДляПроработки как таблКлиента ГДЕ таблКлиента.Ссылка = &Ссылка) КАК КонтрагентыПунктыДляПроработки
	               |		ПО ФиксТабл.Номер = КонтрагентыПунктыДляПроработки.Номер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номер
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Табл", ПунктыПроработки);
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	ПунктыПроработки = Результат.Выгрузить();
	
	//------------------анализ--------------------
	всеТерминал = 0;  всеИнтернет=0;
	для каждого стр1 из ПунктыПроработки цикл
		Если стр1.Номер<=5 тогда
			всеТерминал = всеТерминал + ?(стр1.Проработан,1,0);
		иначе //если стр1.Номер<=5+7 тогда
			всеИнтернет = всеТерминал + ?(стр1.Проработан,1,0);
		КонецЕсли;	
	КонецЦикла;
	
	Если всеТерминал=5 тогда
		ЭлементыФормы.Терминал.Шрифт = новый Шрифт(ЭлементыФормы.Терминал.Шрифт,,,Истина);
	КонецЕсли;	
	Если всеИнтернет=7 тогда
		ЭлементыФормы.Интернет.Шрифт = новый Шрифт(ЭлементыФормы.Интернет.Шрифт,,,Истина);
	КонецЕсли;	
КонецЕсли;

КонецПроцедуры

//+++ 23.03.2016
процедура ЗаписатьИзмененныеПунктыПроработки()
	ЭтотОбъект.ПунктыДляПроработки.Очистить();
	для каждого стр1 из ПунктыПроработки цикл
		если стр1.Проработан
			или СокрЛП(стр1.Комментарий)<>""
			или СокрЛП(стр1.КомментарийПред)<>"" тогда
			стр2 = ЭтотОбъект.ПунктыДляПроработки.Добавить();
			ЗаполнитьЗначенияСвойств(стр2 , стр1);
			стр2.Наименование = стр1.ПунктыДляПроработки; //Наименование фиксированное
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//+++ 23.03.2016 - Комментарий из Ссылки становится Старым
Процедура ПунктыПроработкиКомментарийПриИзменении(Элемент)
	стр1 = ЭлементыФормы.ПунктыПроработки.ТекущиеДанные;
	стрКонтр = Ссылка.ПунктыДляПроработки.Найти(стр1.Номер, "Номер");
	стр1.ДатаИзменения = ТекущаяДата(); //30.03.2018
	если стрКонтр <> неопределено тогда
	стр1.КомментарийПред = стрКонтр.Комментарий;
	КонецЕсли;
КонецПроцедуры

//+++ 23.03.2016 - Да  - жирным
Процедура ПунктыПроработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Проработан тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);
	КонецЕсли;	
КонецПроцедуры

//Запреты добавления и удаления строк
Процедура ПунктыПроработкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Предупреждение("Список Пунктов для проработки - фиксированный!
					|Включите флаг [v]Терминал или [v]Интернет или [v]ИМ
					|для изменения списка пунктов проработки...", 10);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Терминал;
					
	Отказ = Истина;				
КонецПроцедуры

Процедура ПунктыПроработкиПередУдалением(Элемент, Отказ)
	Предупреждение("Список Пунктов для проработки - фиксированный!
					|Включите флаг [v]Терминал или [v]Интернет или [v]ИМ
					|для изменения списка пунктов проработки...", 10);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Терминал;
	Отказ = Истина;		
КонецПроцедуры

Процедура ТерминалПриИзменении(Элемент)
	
	Если ПунктыПроработки.Количество()>0 и Модифицированность() тогда
		Предупреждение("Все не записанные Пункты для проработки - будут очищены!
		               |Проверьте пункты для проработки на закладке ""Категории"".",10);
	иначе
		Предупреждение("Заполните Пункты для проработки на закладке ""Категории"".", 5);
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПунктыПроработки;

	ЗаполнитьПунктыПроработки()
КонецПроцедуры

//---03.06.2016 добавили поле ОПФ на форму, при изменении меняется НаименованиеПолное
//добавляет ОПФ в наименование перед первым пробелом
Процедура ОПФПриИзменении(Элемент)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОПФ.Наименование,
		|	ОПФ.НаименованиеПолное,
		|	ОПФ.Код КАК Код
		|ИЗ
		|	Справочник.ОПФ КАК ОПФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//--- убираем существующее наименование типа ООО с пробелом после букв 
		// не подходит - т.к. может попасться к примеру ИП Ипатов - останется "атов"

		НаименованиеОПФДлина = СтрДлина(ВыборкаДетальныеЗаписи.Наименование);		
		Если Лев(НаименованиеПолное,НаименованиеОПФДлина +1) = ВыборкаДетальныеЗаписи.Наименование + " "  и НаименованиеОПФДлина>0 Тогда 			
			ДлинаНаименования = СтрДлина(НаименованиеПолное);
			НаименованиеПолное = Прав(НаименованиеПолное,ДлинаНаименования - НаименованиеОПФДлина-1);			
			Прервать;
		КонецЕсли;
		
		//НаименованиеПолное = СтрЗаменить(НаименованиеПолное,ВыборкаДетальныеЗаписи.Наименование,"");
		//НаименованиеПолное = СтрЗаменить(НаименованиеПолное,ВыборкаДетальныеЗаписи.НаименованиеПолное,"");
				
		////+++ 30.06.2016 ----------"ООО" заменяем на Полное наименование! "Общество с ограниченной ответственностью"------------------------------
		НаименованиеОПФДлинаПолная = СтрДлина(ВыборкаДетальныеЗаписи.НаименованиеПолное);
		Если (Лев(НаименованиеПолное,НаименованиеОПФДлинаПолная+1) = ВыборкаДетальныеЗаписи.НаименованиеПолное + " " и НаименованиеОПФДлинаПолная>0) тогда
			ДлинаНаименования = СтрДлина(НаименованиеПолное);
			НаименованиеПолное = Прав(НаименованиеПолное,ДлинаНаименования - НаименованиеОПФДлинаПолная-1);
			Прервать; // замена одного полного наименования на другое!
		КонецЕсли;
	КонецЦикла; 
	
	НаименованиеПолное = СокрЛП(НаименованиеПолное);	
	Если не ОПФ = Справочники.опф.ПустаяСсылка() Тогда 
//	НаименованиеПолное = ОПФ.Наименование + " " + НаименованиеПолное;
	
	//ЭлементыФормы.НаименованиеПолное.СписокВыбора.Очистить();
	//ЭлементыФормы.НаименованиеПолное.СписокВыбора.Добавить( НаименованиеПолное );  // Имя
	//ЭлементыФормы.НаименованиеПолное.СписокВыбора.Добавить( ОПФ.Наименование       + " " + НаименованиеПолное );  //краткое + Имя
	//ЭлементыФормы.НаименованиеПолное.СписокВыбора.Добавить( ОПФ.НаименованиеПолное + " " + НаименованиеПолное ); //полное   + Имя
	
	НаименованиеПолное = ОПФ.НаименованиеПолное + " " + НаименованиеПолное; // 30.06.2016
	
КонецЕсли;	

	Если ОПФ = Справочники.ОПФ.НайтиПоКоду("000000003") Тогда 		
		ЭлементыФормы.ИНН.Маска = "999999999999";
		ЭлементыФормы.Кпп.Маска = "";
	Иначе
		ЭлементыФормы.ИНН.Маска = "9999999999";
		ЭлементыФормы.Кпп.Маска = "999999999";
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыИсторияЗвонков(Кнопка)
	ТД = ПолучитьТаблицуЗвонков(3, ЭтотОбъект.Ссылка,ДобавитьМесяц(ТекущаяДата(),-6),ТекущаяДата());
	попытка ТД.Открыть(); //BugFix - Задача № 62132 п.1
	исключение Предупреждение("Нет звонков!", 60); 
	КонецПопытки;	
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	                 
	Если Элементыформы.Панель1.ТекущаяСтраница.имя = "ДоговорыПоТоварнымГруппам" Тогда
		Если ЭтоНовый() Тогда
		    рсДоговораДляПодстановки.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсДоговораДляПодстановки.Отбор.Контрагент.Использование = истина;
			рсДоговораДляПодстановки.Отбор.Контрагент.Значение = справочники.Контрагенты.ПустаяСсылка() ;
			
			Предупреждение("Контрагент еще не записан, информация по договорам - недоступна!", 10);
		иначе
		    рсДоговораДляПодстановки.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
			рсДоговораДляПодстановки.Отбор.Контрагент.Использование = истина;
			рсДоговораДляПодстановки.Отбор.Контрагент.Значение = ссылка ;
		конецЕсли;
				ЭлементыФормы.рсБумажныеДоговора.НастройкаОтбора.Контрагент.Доступность = ложь;
			иначеЕсли  Элементыформы.Панель1.ТекущаяСтраница.имя = "ДоговорыКонтрагентов"  тогда
				Если КомуМожно.НайтиПоЗначению(ПараметрыСеанса.ТекущийПользователь)<> неопределено или ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение = Справочники.Подразделения.НайтиПоКоду("00009") тогда
					ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Истина;
				Иначе 
				     ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.ПеренестиНаДействующий.доступность = Ложь;
				конецЕсли;	
				
	 КонецЕсли;	
			
КонецПроцедуры

Процедура рсДоговораДляПодстановкиПередНачаломДобавления(Элемент, Отказ, Копирование)
		Если ЭтоНовый() Тогда
         Сообщить("Сначала запишите контрагента!");
		 отказ = истина;
		иначе	
		ПараметрыСеанса.ПустойКонтрагент = ссылка; 
		конецЕсли;
КонецПроцедуры

Процедура рсДоговораДляПодстановкиПриПолученииДанных(Элемент, ОформленияСтрок)
		Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Данныестроки = ОформлениеСтроки.Данныестроки;
		ОформлениеСтроки.Ячейки.Ответственный.ОтображатьТекст = истина;
		ОформлениеСтроки.Ячейки.Ответственный.Текст = Данныестроки.Договор.ОтветственноеЛицо;
	   КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанель8ДляСпискаВидовТоваров(Кнопка)
	Форма = Ссылка.ПолучитьФорму("ФормаУстановкиДоговоровПоТоварнымГруппам",,Ссылка);
	Форма.Открыть();
КонецПроцедуры

Процедура КоманднаяПанель7Установить(Кнопка)
	
	Если КатегорияСкидок.Количество()>0 тогда
		Если Вопрос("Очистить существующие категории?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Нет Тогда
    		Возврат;
		КонецЕсли;
		КатегорияСкидок.Очистить();
	КонецЕсли;
	
	кат3 = перечисления.КатегорииСкидок.к3; //10.04.2019 - категория сразу на всё!
	Если НЕ ВвестиЗначение(кат3, "Выберите категорию") тогда
		возврат;
	КонецЕсли;
	
	списокВидов = ПолучитьСписокВыгружаемыхТоваров();
	для каждого вид1 из списокВидов цикл
		стр1 = КатегорияСкидок.Добавить();
		стр1.видТовара = вид1.Значение;
		стр1.Категория = Кат3;
	КонецЦикла;				   
    КатегорияСкидок.Сортировать("ВидТовара УБЫВ"); //как в правилах!
	
КонецПроцедуры

Процедура КоманднаяПанельДоговорыПеренестиНаДействующий(Кнопка)
	ссылка.ПолучитьФорму("ФормаПереносДоговоров",ЭтаФорма).Открыть();
КонецПроцедуры

Процедура СвойстваПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
   	//Сакулина
	Если Элемент.ТекущиеДанные.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90208")
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор") Тогда
		Сообщить("Допустимый срок возврата дисков может устанавливать только Егор Малышев");
		ОтменаРедактирования = Истина;
		Элемент.ТекущиеДанные.Значение =СтЗначение;
	КонецЕсли;
    //Сакулина	
	//Алексеева
	Если Элемент.ТекущиеДанные.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90212")
		и (Элемент.ТекущиеДанные.Значение<10 или Элемент.ТекущиеДанные.Значение>75) и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)") 
    Тогда
		Сообщить("Значение должно быть от 10 до 75!");
		ОтменаРедактирования = Истина;
		Элемент.ТекущиеДанные.Значение =СтЗначение;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90183")//распродажа
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор") и Элемент.ТекущиеДанные.Значение =  Истина Тогда
		Сообщить("Доступ к распродаже может устанавливать только Егор Малышев");
		ОтменаРедактирования = Истина;
		Элемент.ТекущиеДанные.Значение =СтЗначение;
	КонецЕсли;

    //Алексеева	

	
	Если (Элемент.ТекущиеДанные.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90210") или
		Элемент.ТекущиеДанные.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90211"))	
		и (глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор")
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Марешева И.Г.")
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Серков")
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Горохов") 
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Бондаренко") 
		и глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Филатова С.В.")) Тогда		
		Сообщить("Вы не имеете права отменять автоматическую отправку писем должнику. Обратитесь к руководителю.");
		ОтменаРедактирования = Истина;
		Элемент.ТекущиеДанные.Значение =СтЗначение;
	КонецЕсли;
    //Сакулина	


КонецПроцедуры

Процедура СвойстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//08.02.19 Смирнов
	Если Элемент.ТекущиеДанные.Свойство	 = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90230") тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение) тогда
			РабочаяГруппа = Элемент.ТекущиеДанные.Значение;
		иначе
			РабочаяГруппа = ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Сакулина
Процедура УведомлениеДолжникуПриИзменении(Элемент)
	ПроверкаНаличияЭлПочты(Элемент);
КонецПроцедуры

Процедура УведомлениеПДЗПриИзменении(Элемент)
	ПроверкаНаличияЭлПочты(Элемент);
КонецПроцедуры

Процедура ТочкиНомерОткрытие(Элемент, СтандартнаяОбработка)
	стр1 = ЭлементыФормы.Точки.ТекущиеДанные;
	если стр1<>Неопределено тогда
		СтандартнаяОбработка = ложь;
		эл1 = справочники.Точки.НайтиПоРеквизиту("Номер", стр1.Номер);
		Если эл1 = справочники.Точки.ПустаяСсылка() Тогда
			СообщитьОбОшибке("Не найдено точки с номером " + стр1.Номер);
		иначе			
			эл1.ПолучитьФорму().ОткрытьМодально(); 			
			заполнитьТочки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// Сакулина

Процедура КоманднаяПанельФормыДопИнформация(Кнопка)
	Инфо = Справочники.ДополнительнаяИнформацияПоКонтрагентам.Выбрать(,ссылка,,);
	Если  Инфо.Следующий() Тогда
	ИнфоОбъект  = Инфо.ПолучитьОбъект();	
	ИнфоОбъект.Получитьформу().Открыть();
	иначе
	ИнфоОбъект  = Справочники.ДополнительнаяИнформацияПоКонтрагентам.СоздатьЭлемент();
	ИнфоОбъект.Владелец = Ссылка;
	ИнфоОбъект.Наименование = Ссылка.Наименование;
	ИнфоОбъект.Получитьформу().Открыть();
	конецЕсли;	
КонецПроцедуры

Процедура СудебныеРазбирательстваПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаписатьСудебныеРазбирательстваСДебиторами();
	//Смирнов 05.07.17 задача 29246, если есть судебные дела, то пени автоматически не начисляем
	Для каждого СтрТЗ ИЗ ДанныеПоСудебнымРазбирательствамСДебиторами Цикл
		МенеджерЗаписи = РегистрыСведений.КонтрагентыДляИсключенияИзАвтоначисленияПени.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Контрагент = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.Прочитать();
		Если не МенеджерЗаписи.Выбран() тогда
			МенеджерЗаписи.Контрагент = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.ДатаДобавления = ТекущаяДата();
			МенеджерЗаписи.Ответственный = глТекущийПользователь;
			МенеджерЗаписи.Основание = "Суд - автоматически";
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ФакторингПриИзменении(Элемент)
	Если НЕ РольДоступна("яштФинДиректор") тогда
		факторинг = ссылка.Факторинг; // как было
		Предупреждение("У Вас недостаточно прав для установки признака 'Факторинг'!", 60);
	Иначе
		
		Если Факторинг тогда //проверяем договоры
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ ДоговорыКонтрагентов.Ссылка
		                |ИЗ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		                |ГДЕ
		                |	ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(справочник.ТипыДоговоров.Факторинг)
		                |	И ДоговорыКонтрагентов.Владелец = &Владелец
		                |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
		                |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия > &ТекДата
		                |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия = &Пустая)";
		 Запрос.УстановитьПараметр("Владелец", Ссылка);
		 Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );
		 Запрос.УстановитьПараметр("Пустая",  дата(1,1,1) );

		 Результат = Запрос.Выполнить();
		 Если Результат.Пустой() тогда
			Предупреждение("У контрагента '"+строка(Ссылка)+"' нет ни одного договора с типом договора 'Факторинг'!
							|Установка признака - невозможна!", 60);
			Факторинг = ЛОЖЬ;
		 КонецЕсли;
		 
		//27.03.2017 - проверка основного договора
		Если ЭтотОбъект.ОсновнойДоговорКонтрагента.ТипДоговора <> справочники.ТипыДоговоров.Факторинг тогда
			Предупреждение("У контрагента '"+строка(Ссылка)+"' - основной договор должен быть с типом 'Факторинг'!
							|Установка признака - невозможна!", 60);
			Факторинг = ЛОЖЬ;
		КонецЕсли;
		
		//27.03.2017 - проверка договоров по подразделениям
		 Запрос = Новый Запрос;
		 Запрос.Текст = "ВЫБРАТЬ
		                |	Дог.Контрагент,
		                |	Дог.ВидТовара,
		                |	Дог.Подразделение,
		                |	Дог.КлиентКОЛЕСАТУТ,
		                |	Дог.Договор,
		                |	Дог.Договор.ТипДоговора КАК ТипДоговора
		                |ИЗ
		                |	РегистрСведений.ДоговорыПоТоварнымГруппам КАК Дог";
       	 Результат = Запрос.Выполнить();
		 Если не Результат.Пустой() тогда
			 выборка = результат.Выбрать();
			 пока выборка.Следующий() цикл
				 если выборка.ТипДоговора <> справочники.ТипыДоговоров.Факторинг тогда
					 сообщить("По виду товаров "+строка(выборка.ВидТовара)+" и Подразделению "+строка(выборка.Подразделение)+" - договор должен быть с типом Факторинг!", СтатусСообщения.Внимание);
					 Факторинг = ЛОЖЬ;
				 КонецЕсли;	 
			 КонецЦикла;	 
		 КонецЕсли;
		 
	 КонецЕсли;
		 
	КонецЕсли;	
КонецПроцедуры

//Миронычев
Процедура КоманднаяПанельКонтактнаяИнформацияКопированиеАдресов(Кнопка)
	Адрес = Справочники.ВидыКонтактнойИнформации.ПолучитьФормуСписка("ФормаВыбора").ОткрытьМодально();
	Если Адрес <> Неопределено тогда
	ЭлементыФормы.КонтактнаяИнформация.СкопироватьСтроку();
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма,,Адрес);
	КонецЕсли;
КонецПроцедуры
//КонецМиронычев

Процедура РазрешитьГрузитьПриПДЗБолееСемиДнейПриИзменении(Элемент)
	если РазрешитьГрузитьПриПДЗБолееСемиДней тогда
		срок= неопределено; 	
		Ответ = Вопрос("Разрешить грузить на постоянной основе?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВвестиДату(Срок,"Введите срок, до которого будет дейтвовать разрешение.",ЧастиДаты.Дата);	
			Если Срок  = неопределено тогда
				срок = НачалоДня(ТекущаяДата())+24*60*60;
			КонецЕсли;
			Запись = РегистрыСведений.ВременныеКонрагентыСотгрузкойПДЗ.СоздатьМенеджерЗаписи();
			Запись.Контрагент = ссылка;
			Запись.Дата = срок;
			Запись.Записать(Истина);
			Сообщить("Установлен срок разрешения отгрузки при ПДЗ > 7 до " + срок);
		конецЕсли;
	конецЕсли;
КонецПроцедуры

Процедура КатегорияСкидокКатегорияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.КатегорияСкидок.ТекущиеДанные;
	Если текСтр.категория = перечисления.КатегорииСкидок.B2B    //+++ 29.05.2017
		//и текСтр.ВидТовара<>перечисления.ВидыТоваров.Шины
		тогда
		Предупреждение("Категорию B2B - можно назначать ТОЛЬКО для Импортных ШИН в перс.правилах!", 30);
		текСтр.категория = перечисления.КатегорииСкидок.к3;
	КонецЕсли;	
		
КонецПроцедуры

Функция ПолучитьДоговорыФАП()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)";
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	Результат = Запрос.Выполнить();
	Выгрузка  = Результат.Выгрузить();
	МасДоговоры = Выгрузка.ВыгрузитьКолонку("Ссылка");
	
	Возврат МасДоговоры;
	
КонецФункции // ПолучитьДоговорыФАП()

//---конец 03.06.2016 добавили поле ОПФ на форму, при изменении меняется НаименованиеПолное

Функция ПолучитьОбластьПисьмаБланк(Макет, ОформитьОтФАП)
	
	МасДоговорыФАП = ПолучитьДоговорыФАП();
	
	Если МасДоговорыФАП.Количество() = 0 Тогда
		ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
	Иначе
		Ткст = "Письмо должно быть от организации ""Формула Авто Плюс""?";
		ДелатьОтФАП = Вопрос(Ткст, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Выбор организации", КодВозвратаДиалога.Нет);
		Если ДелатьОтФАП = КодВозвратаДиалога.Нет Тогда
			ОбластьБланк = Макет.ПолучитьОбласть("БланкЯШТ");
		Иначе
			ОбластьБланк = Макет.ПолучитьОбласть("БланкФАП");
			ОформитьОтФАП = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбластьБланк;
	
КонецФункции // ПолучитьОбластьПисьмаБланк()

Функция ДействоватьОтОрганизацииФАП()
	
	МасДоговорыФАП = ПолучитьДоговорыФАП();
	
	Если МасДоговорыФАП.Количество() = 0 Тогда
		ДействоватьОтФАП = Ложь;
	Иначе
		Ткст = "Письмо должно быть от организации ""Формула Авто Плюс""?";
		ДелатьОтФАП = Вопрос(Ткст, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет, "Выбор организации", КодВозвратаДиалога.Нет);
		Если ДелатьОтФАП = КодВозвратаДиалога.Нет Тогда
			ДействоватьОтФАП = Ложь;
		Иначе
			ДействоватьОтФАП = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДействоватьОтФАП;
	
КонецФункции // ДействоватьОтОрганизацииФАП()

Функция ПолучитьПредставлениеОрганизацииДляПисьма(ОформитьОтФАП)
	
	Если ОформитьОтФАП Тогда
		ОрганизацияСтр = "ООО «Формула Авто Плюс»";
	Иначе
		ОрганизацияСтр = "ЗАО ТК «Яршинторг»";
	КонецЕсли;
	
	Возврат ОрганизацияСтр;
	
КонецФункции // ПолучитьПредставлениеОрганизацииДляПисьма()

Функция ПолучитьПредставлениеОрганизацииДляПисьмаРодитПадеж(ОформитьОтФАП)
	
	Если ОформитьОтФАП Тогда
		ОрганизацияСтр = "Обществом с ограниченной ответственностью ""Формула Авто Плюс"" (ООО ""Формула Авто Плюс"")";
	Иначе
		ОрганизацияСтр = "Закрытым акционерным обществом Торговая Компания ""Яршинторг"" (ЗАО ТК ""Яршинторг"")";
	КонецЕсли;
	
	Возврат ОрганизацияСтр;
	
КонецФункции // ПолучитьПредставлениеОрганизацииДляПисьмаРодитПадеж()

Функция ПолучитьОбластьПодписиДляПисьма(Макет, ОформитьОтФАП)
	
	Если ОформитьОтФАП Тогда
		ОблПодписи = Макет.ПолучитьОбласть("ПдпсФАП");
	Иначе
		ОблПодписи = Макет.ПолучитьОбласть("Подписи");
	КонецЕсли;
	
	Возврат ОблПодписи;
	
КонецФункции // ПолучитьОбластьПодписиДляПисьма()

Функция ПолучитьПредставлениеРуководителяДляПисьма(ОформитьОтФАП)
	
	Если ОформитьОтФАП Тогда
		РуководительПредставление = "Курапова Е.А.";
	Иначе
		РуководительПредставление = "Горохов В.А.";
	КонецЕсли;
	
	Возврат РуководительПредставление;
	
КонецФункции // ПолучитьПредставлениеРуководителяДляПисьма()

Процедура КоманднаяПанельДоговорыСоздатьДоговор(Кнопка)
	
	Список =  Новый СписокЗначений; // названия договоров
	
	//18.08.17 Смирнов, для роли Логисты только договор услуг ФА
	Если РольДоступна("Логисты") тогда
		Если не Ссылка.Поставщик  тогда
			Сообщить("Контрагент не является Поставщиком, договор поставки услуг добавлять нельзя!");
			Возврат;
		КонецЕсли;
		Список.Добавить("Договор поставки услуг ФА+");
		Список.Добавить("Договор поставки услуг ШТЯ");
		ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;//+++ 15.02.2018
	КонецЕсли;
	
	Если ЭтотОбъект.Покупатель и не ЭтотОбъект.Поставщик тогда	
		ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли не ЭтотОбъект.Покупатель и ЭтотОбъект.Поставщик тогда	
		ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ИначеЕсли ЭтотОбъект.Покупатель и ЭтотОбъект.Поставщик тогда
		ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ВвестиЗначение(ВидДоговораБумДог, "Выберите Вид договора"); //!!!
	КонецЕсли;
	
	//найдем бумажный договор
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	//|	БумажныеДоговоры.Контрагент,
	|	БумажныеДоговоры.Номер,
	|	БумажныеДоговоры.Период как Дата,
	|	БумажныеДоговоры.ДатаОкончанияДействия,
	|	БумажныеДоговоры.Состояние как СостояниеДоговора,
	//15.02.2018 - ошибка в договорах!
	|	БумажныеДоговоры.ЕстьДоговорПоручительства как ЕстьДогорПоручительства,
	|	выбор когда (БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности>0) тогда Истина иначе ЛОЖЬ Конец как  КонтролироватьЧислоДнейЗадолженности,
	
	|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
	|	БумажныеДоговоры.ПутьКФайлуДоговора,
	|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности,
	|	БумажныеДоговоры.Пролонгируется
	// !!! комментарий НЕ нужно писать !!!
	//|	,БумажныеДоговоры.Комментарий
	|ИЗ
	|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	|ГДЕ
	|	БумажныеДоговоры.Контрагент = &Контрагент
	//18.09.18 Смирнов
	//Если пользователь формулы, то бумажные договоры не смотрим
	|   И  &ЭтоНЕФормула
	|	И (БумажныеДоговоры.ДатаОкончанияДействия > &ТекущаяДата
	|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата)
	
	//+++ 15.02.2018 - отбор по виду договора... не везде заполнен!
	|	И (БумажныеДоговоры.ВидДоговора = &ВидДоговора
	|	   или БумажныеДоговоры.ВидДоговора = Значение(Перечисление.ВидыДоговоровКонтрагентов.ПустаяСсылка)
	|	   )";
	Запрос.УстановитьПараметр("ВидДоговора",  ВидДоговораБумДог);
	
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	//18.09.18 Смирнов
	Запрос.УстановитьПараметр("ЭтоНЕФормула", не РольДоступна("МенеджерФормулы"));
	
	РезультатБумДог = Запрос.Выполнить();
	Если ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПокупателем тогда	
		Если ЭтотОбъект.Экспорт тогда
			Список.Добавить("Договор продажи (Экспорт)");
			Список.Добавить("Договор продажи (Экспорт) $");
		Иначе	
			Если безнал тогда
				Если Не РезультатБумДог.Пустой() Тогда	
					Список.Добавить("Договор отсрочки");
					Список.Добавить("Договор предоплаты");
					Список.Добавить("Договор отсрочки до 14 дн.");
				иначе
					Список.Добавить("Договор предоплаты по счетам");
				конецЕсли;	
			конецЕсли;
			
			Если нал Тогда
				Если Не РезультатБумДог.Пустой() Тогда	
					Список.Добавить("Договор отсрочки*");
					Список.Добавить("Договор отсрочки до 14 дн.*");
				конецЕсли;
				Список.Добавить("Договор предоплаты*");
			конецЕсли;
		КонецЕсли;	
		//=====================================================================================	
	ИначеЕсли ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
		Если безнал тогда
			Список.Добавить("Договор поставки");
			Список.Добавить("Договор поставки услуг");
		КонецЕсли;		
		Если нал Тогда
			Список.Добавить("Договор поставки*");
			Список.Добавить("Договор поставки услуг*");
		КонецЕсли;
	Иначе //---------------------------------------------------------
		Если безнал тогда
			Список.Добавить("Договор ("+строка(ВидДоговораБумДог)+")");
		КонецЕсли;		
		Если нал Тогда
			Список.Добавить("Договор ("+строка(ВидДоговораБумДог)+")*");
		КонецЕсли;
	КонецЕсли;	
	
	Если Список.Количество()=0 тогда //BugFix: может и такое быть!
		возврат;
	ИначеЕсли Список.Количество()=1 тогда // если 1 вариает - нечего выбирать!
		ВыбЭлемент = Список[0];
	Иначе	
		ВыбЭлемент = список.ВыбратьЭлемент("Выберите Тип договора");
		Если ВыбЭлемент=неопределено тогда
		возврат;
		КонецЕсли;
	КонецЕсли;
	
	имя = ВыбЭлемент.Значение;
	Ответственный = Параметрысеанса.ТекущийПользователь;
	
	Если Параметрысеанса.ТекущийПользователь = ОсновнойМенеджерКонтрагента тогда
		Ответ = Вопрос("Завести договор на другого менеджера?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			текОтветственный = Справочники.Пользователи.ПустаяСсылка();
			Ввели = ВвестиЗначение(текОтветственный,"Выберите ответсвенного по договору");
			Если Ввели Тогда
				Ответственный = текОтветственный;
			конецЕсли;	
		КонецЕсли;
	конецЕсли;	
	
	//***2018.08.20 ограничение для договора продажи - ответственными могут быть только менеджеры
	Если ВидДоговораБумДог = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИЛИ ВидДоговораБумДог = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТЗРазрешенных = ПолучитьСписокМенеджеровИРуководителей();
		Если ТЗРазрешенных.Найти(Ответственный) = Неопределено Тогда
			Сообщить("У договора """ + Строка(ВидДоговораБумДог) + """ Ответственным может быть только менеджер (у пользователя должно быть заполнено Направление продаж) или руководитель. Договор не создан.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = справочники.ДоговорыКонтрагентов.Выбрать( ,Ссылка,новый структура("Наименование",Имя),);
	ужеЕстьДоговор = Ложь;
	Пока выборка.Следующий() цикл
		Если Выборка.ОтветственноеЛицо = Ответственный тогда
			ужеЕстьДоговор = Истина;
		конецЕсли;
	КонецЦикла;	
	Если ужеЕстьДоговор тогда
		сообщить(Имя+" на "+строка(Ответственный)+" - УЖЕ есть!", СтатусСообщения.Внимание);
		возврат;
	КонецЕсли;
	
	//=============Создание нового договора!======================================		
	новДог = справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	новДог.Организация = справочники.Организации.НайтиПоКоду("00001"); //??? всегда  1 ???
	новДог.Наименование = Имя;
	Новдог.Владелец = Ссылка; 
	новДог.ОтветственноеЛицо = Ответственный;                   //USD = 840
	новДог.ВалютаВзаиморасчетов = ?(найти(имя,"$")>0, справочники.Валюты.НайтиПоКоду("840"),константы.ВалютаРегламентированногоУчета.Получить());
	новДог.ВидУсловийДоговора = перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	новДог.УстановитьНовыйКод();
	новДог.ОбменДанными.Загрузка = Истина;
	
	новДог.ВидДоговора = ВидДоговораБумДог; //+++ 15.02.2018 
	
	Если ВидДоговораБумДог = перечисления.ВидыДоговоровКонтрагентов.СПоставщиком и Найти(имя,"услуг")>0 тогда//поставщик Услуг (для Логистов)
		новДог.ВедениеВзаиморасчетов = перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		новДог.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоНаименованию("Услуги");
	Иначе	
		новДог.ВедениеВзаиморасчетов = перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		Если Найти(имя,"по счетам")<>0 тогда
			новДог.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00015");//предоплата по счетам
		ИначеЕсли Найти(имя,"отсрочки до 14 дн.")<>0 или Найти(имя,"предоплаты")<>0 тогда
			новДог.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001");//предоплата	
		иначе
			новДог.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00004");//отсрочка
		конецесли;
	КонецЕсли;
	
	Если не РезультатБумДог.Пустой()тогда //БУМАЖНЫЕ договоры - и для покупателей и для Поставщиков!
		таблБумДог = РезультатБумДог.Выгрузить();
		Если таблБумДог.Количество()=0 тогда//BugFix: и такое может быть 
			Предупреждение("НЕ Найдено ни одного документа!",10);
			Возврат;
		ИначеЕсли таблБумДог.Количество()>1 тогда //15.02.2018 --- выбрать договор!
			Предупреждение("Найдено "+строка(таблБумДог.Количество())+" действующих договоров "+строка(ВидДоговораБумДог)+"!
			|Выберите нужный номер договора!",30);
			списНомБумДог = новый СписокЗначений;
			для каждого стр1 из таблБумДог цикл
				списНомБумДог.Добавить(стр1.Номер, стр1.Номер+" от "+формат(стр1.Дата,"ДЛФ=D")+"г. ("+строка(стр1.СостояниеДоговора)+")");			   
			КонецЦикла;
			ВыбЭлемент = списНомБумДог.ВыбратьЭлемент("Выберите Номер договора");
			Если ВыбЭлемент=Неопределено тогда // BugFix: когда отмена выбора
				Предупреждение("Не выбрано ни одного документа из списка!",30);
				Возврат;
			КонецЕсли;	
			строкаБумДог = таблБумДог.Найти(ВыбЭлемент.Значение,"Номер");
		Иначе//=1
			строкаБумДог = таблБумДог[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(новДог, строкаБумДог); //все поля в Запросе названы как надо!
	конецЕсли;
	
	Попытка
		новДог.Записать();
		Сообщить("Договор '"+имя+"' на менеджера: "+строка(Ответственный)+" - успешно создан.", СтатусСообщения.Информация);
	Исключение
		Сообщить("Ошибка при создани Договора: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;	
	
КонецПроцедуры

Процедура УсловияОплатыПриИзменении(Элемент)
	если условияоплаты = "Предоплата" или условияоплаты = "Предоплата по счетам" тогда
		ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Ложь;
		ЧислоДнейОтсрочкиПоДоговору=0;
	иначе
		ЭлементыФормы.ЧислоДнейОтсрочкиПоДоговору.Доступность = Истина;
	конецЕсли;
		если условияоплаты = "Отсрочка до 14 дн." и ЧислоДнейОтсрочкиПоДоговору>14 тогда	
		ЧислоДнейОтсрочкиПоДоговору=14;
	    КонецЕсли;
КонецПроцедуры

Процедура СогласоватьНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПодписантНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Ссылка);
КонецПроцедуры

Процедура СудНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	    Сп=Новый СписокЗначений;
        Сп.Добавить("Третейский суд");
        Сп.Добавить("Арбитражный суд по месту нахождения истца");
		Элемент.СписокВыбора=Сп;
КонецПроцедуры

Процедура ПроцентПениПриИзменении(Элемент)
	если ПроцентПени>0.5 тогда	
    	Предупреждение("Значение не может превышать 0.5!", 30);
		ПроцентПени=0.5;
	иначеесли ПроцентПени<0.056 тогда	
    	Предупреждение("Значение не может быть меньше 0.056!", 30);
		ПроцентПени=0.056;
	конецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельФормыАнализРаботыКлиента(Кнопка)
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.АнализРаботыКлиента.Создать();
	
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекКонтрагент");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = Ссылка;
	
	//
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДата");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ТекущаяДата();
	
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Год3");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = НачалоГода(ТекущаяДата()-63072000);
	
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДатаМинусГод");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ТекущаяДата()-3600*24*365;
	
	ПараметрСКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекДатаМинус1_5Года");
	ПараметрСКД.Использование = Истина;
	ПараметрСКД.Значение  = ТекущаяДата()-3600*24*548;
	
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ЭлементыФормы.Результат.Очистить();
	
	Отчет.СкомпоноватьРезультат(ФормаОтчета.ЭлементыФормы.Результат, ФормаОтчета.ДанныеРасшифровки);
	ФормаОтчета.Открыть();
КонецПроцедуры

Процедура ПодписантПриИзменении(Элемент)
		Если ЗначениеЗаполнено(Подписант) Тогда
		осн = Подписант.ОснованиеДляДоговора;
		Если осн <>"" тогда
		ЭлементыФормы.РаботаетНаОсновании.Значение ="Работает на основании: "+осн;
		ЭлементыФормы.РаботаетНаОсновании.ЦветТекста = webцвета.Синий;
		иначе
		ЭлементыФормы.РаботаетНаОсновании.Значение ="Работает на основании: НЕ ЗАПОЛНЕНО";
	    ЭлементыФормы.РаботаетНаОсновании.ЦветТекста = webцвета.Красный;
		конецЕсли;
	конецЕсли;

КонецПроцедуры

Процедура КонтактнаяИнформацияТочкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Элемент.СписокВыбора.Количество()=0  тогда 
		
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Точки.Ссылка
	               |ИЗ
	               |	Справочник.Точки КАК Точки
	               |ГДЕ
	               |	Точки.Владелец = &Контрагент";
	Рез = запрос.Выполнить().Выгрузить();
	Массив = Рез.ВыгрузитьКолонку("ссылка");

	Список.ЗагрузитьЗначения(массив);
	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, Элемент);

	Если РезультатВыбора <> Неопределено Тогда
		Если Найти(элементыФормы.Контактнаяинформация.текущиеДанные.Вид.Наименование,"Адрес доставки") > 0 Тогда
		    Точка = РезультатВыбора.Значение.ПолучитьОбъект();
            Точка.Видадреса = элементыФормы.Контактнаяинформация.текущиеДанные.Вид; 
			
			ЗаполнитьПоляПоВиду(Точка,элементыФормы.Контактнаяинформация.текущиеДанные.Вид);
			
		    Точка.Записать();
			
			ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.ВыгружатьВТерминал = Истина;
			элементыФормы.Контактнаяинформация.текущиеДанные.ПодразделениеЛогистики = ОсновнойМенеджерКонтрагента.ОсновноеПодразделение;
		Иначе
			Сообщить("Точку можно привязывать только к адресу доставки!!!");
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

ЭлементыФормы.КонтактнаяИнформация.ЗакончитьРедактированиеСтроки(Истина); 

ЭлементыФормы.КонтактнаяИнформация.ОбновитьСтроки();

КонецПроцедуры

Процедура ЗаполнитьПоляПоВиду(Точка,ВидАдреса)
	 Запрос1 = Новый Запрос;
	 Запрос1.Текст = "ВЫБРАТЬ
	                 |	КонтактнаяИнформация.Представление КАК Адрес,
	                 |	КонтактнаяИнформация.Поле2 КАК Регион,
	                 |	КонтактнаяИнформация.Поле4 КАК Город,
	                 |	КонтактнаяИнформация.Поле5 КАК Село,
	                 |	КонтактнаяИнформация.Поле6 КАК Улица,
	                 |	КонтактнаяИнформация.Поле7 КАК Дом,
	                 |	КонтактнаяИнформация.Комментарий
	                 |ИЗ
	                 |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                 |ГДЕ
	                 |	КонтактнаяИнформация.Объект = &Объект
	                 |	И КонтактнаяИнформация.Тип = &Тип
	                 |	И КонтактнаяИнформация.Вид = &Вид";
	 
	 Запрос1.УстановитьПараметр("Объект", Ссылка);
	 Запрос1.УстановитьПараметр("Тип", перечисления.ТипыКонтактнойИнформации.Адрес);
	 Запрос1.УстановитьПараметр("Вид", ВидАдреса);
	 
	 Результат1 = Запрос1.Выполнить();
	 Если не Результат1.Пустой() тогда
		 Выборка = Результат1.Выбрать();
		 Выборка.Следующий();
		 ЗаполнитьЗначенияСвойств( Точка, Выборка);
		 
		 Адрес = Выборка.Адрес + " ~ " + Выборка.Комментарий;  
		 
		 Если выборка.Город="" тогда 
			 Город = выборка.Село;
		 КонецЕсли;	
		 
		 Если выборка.Регион="МО" тогда
			 выборка.Регион="Московская обл";
		 КонецЕсли;
		 
		 Если Найти(выборка.Регион, "Москва")>0 тогда
			 Город = "Москва г";
		 ИначеЕсли Найти(выборка.Регион, "Санкт-Петербург")>0 тогда
			 Город = "Санкт-Петербург г";
		 ИначеЕсли Найти(выборка.Регион, "Севастополь")>0 тогда
			 Город = "Севастополь г";
		 КонецЕсли;	 
	 КонецЕсли;
		 
КонецПроцедуры

Процедура ОбновитьДатуСозданияЭлемента()

	Если Не ЭтоНовый() Тогда
		вр = ПолучитьМоментСозданияСсылки(Ссылка);
		Если вр <> '00010101' Тогда
			//ЭлементыФормы.НадписьДатаСозданияЭлемента.Заголовок = "Дата создания: " + ПолучитьМоментСозданияСсылки(Ссылка);
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Заголовок = "Дата создания: " + вр;
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Истина;
		Иначе	
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Ложь;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьМоментСозданияСсылки(Ссылка) Экспорт
	
	УИ = "" + Ссылка.УникальныйИдентификатор();
	
	Результат = ПолучитьМоментСозданияУникальногоИдентификатора(УИ);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМоментСозданияУникальногоИдентификатора(УИ) Экспорт
	
	УИ = СокрЛП(ВРег(СтрЗаменить("" + УИ, "-", "")));
	Если Не Сред(УИ, 13, 1) = "1" Тогда
		Возврат '00010101';
	КонецЕсли;
	интервал16 = ВРег(Сред(УИ, 14, 3) + Сред(УИ, 9, 4) + Сред(УИ, 1, 8));
	интервал10 = HexToDec(интервал16);
	интервал10сек = интервал10 / 10000000;
	
	Результат = Дата(1582, 10, 15) + интервал10сек;
	
	Возврат Результат + 3 * 3600;   //часовой пояс Москвы!
	
КонецФункции

Функция HexToDec(знч16) Экспорт
	знч10 = 0;
	длн = СтрДлина(знч16);
	Для й = 1 По СтрДлина(знч16) Цикл
		знч10 = знч10 + Pow(16, длн - й) * ByteToDec(Сред(знч16, й, 1));
	КонецЦикла;
	Возврат знч10;
КонецФункции

Функция ByteToDec(знч16) Экспорт
	Если знч16 = "0" Тогда
		Возврат 0;
	ИначеЕсли знч16 = "1" Тогда
		Возврат 1;
	ИначеЕсли знч16 = "2" Тогда
		Возврат 2;
	ИначеЕсли знч16 = "3" Тогда
		Возврат 3;
	ИначеЕсли знч16 = "4" Тогда
		Возврат 4;
	ИначеЕсли знч16 = "5" Тогда
		Возврат 5;
	ИначеЕсли знч16 = "6" Тогда
		Возврат 6;
	ИначеЕсли знч16 = "7" Тогда
		Возврат 7;
	ИначеЕсли знч16 = "8" Тогда
		Возврат 8;
	ИначеЕсли знч16 = "9" Тогда
		Возврат 9;
	ИначеЕсли знч16 = "A" Тогда
		Возврат 10;
	ИначеЕсли знч16 = "B" Тогда
		Возврат 11;
	ИначеЕсли знч16 = "C" Тогда
		Возврат 12;
	ИначеЕсли знч16 = "D" Тогда
		Возврат 13;
	ИначеЕсли знч16 = "E" Тогда
		Возврат 14;
	ИначеЕсли знч16 = "F" Тогда
		Возврат 15;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура КонтактнаяИнформацияПриИзмененииФлажка(Элемент, Колонка)
	
	Если Найти(элементыФормы.Контактнаяинформация.текущиеДанные.Вид.Наименование,"Адрес доставки") = 0 Тогда
		
		элементыФормы.Контактнаяинформация.текущиеДанные.ВыгружатьВТерминал = Ложь;
	иначеЕсли элементыФормы.Контактнаяинформация.текущиеДанные.ВыгружатьВТерминал Тогда 
		
		элементыФормы.Контактнаяинформация.текущиеДанные.ПодразделениеЛогистики = ОсновнойМенеджерКонтрагента.ОсновноеПодразделение;
		
	иначеЕсли элементыФормы.Контактнаяинформация.текущиеДанные.ВыгружатьВТерминал = Ложь Тогда
		
		элементыФормы.Контактнаяинформация.текущиеДанные.ПодразделениеЛогистики = Справочники.Подразделения.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДоговорНажатие(Элемент)
	//проверим на заполнение необходимые поля
	отказ = Ложь;
	Если не значениеЗаполнено(способОтгрузки) тогда  
		Сообщить("Не заполнен способ отгрузки!");
		отказ = Истина;
	конецЕсли;
	Если не значениеЗаполнено(УсловияОплаты) тогда  
		Сообщить("Не заполнено условие оплаты!");
		отказ = Истина;
	конецЕсли;
	Если не значениеЗаполнено(ПроцентПени) тогда  
		Сообщить("Не заполнен процент пени!");
		отказ = Истина;
	конецЕсли;
	//Если не значениеЗаполнено(Подписант) тогда  
	//	Сообщить("Не заполнен подписант!");
	//	отказ = Истина;
	//конецЕсли;
	Если не значениеЗаполнено(Суд) тогда  
		Сообщить("Не заполнен суд!");
		отказ = Истина;
	конецЕсли;
	Если ДопустимоеЧислоДнейЗадолженности=0 и Найти(УсловияОплаты,"тсроч")<>0 тогда  
		Сообщить("Не заполнено число дней отсрочки платежа!");
		отказ = Истина;
	конецЕсли;
	
	
	//Определим приставку к договору
	
	ПриставкаНал = "%";
	
	Если не Безнал и Нал тогда
		ПриставкаНал = "*";
	ИначеЕсли Безнал и не Нал Тогда
		ПриставкаНал = "[^*]";
	КонецЕсли;
	
	
	
	Если не Отказ Тогда	
		
		//1. Проверим есть ли уже созданный бумажный договор	
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БумажныеДоговоры.Период,
		|	БумажныеДоговоры.Контрагент,
		|	БумажныеДоговоры.Номер,
		|	БумажныеДоговоры.ДатаОкончанияДействия,
		|	БумажныеДоговоры.Состояние,
		|	БумажныеДоговоры.ЕстьДоговорПоручительства,
		|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
		|	БумажныеДоговоры.ПутьКФайлуДоговора,
		|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности,
		|	БумажныеДоговоры.Пролонгируется,
		|	БумажныеДоговоры.Комментарий
		|ИЗ
		|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
		|ГДЕ
		|	БумажныеДоговоры.Контрагент = &Контрагент
		|	И (БумажныеДоговоры.ДатаОкончанияДействия > &ДатаОкончанияДействия
		|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата)";
		
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
		Запрос.УстановитьПараметр("ДатаОкончанияДействия", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("Контрагент", ссылка);
		
		Результат = Запрос.Выполнить();
		Если не Результат.Пустой() Тогда	
			Сообщить("Запись о бумажном договоре уже существует!");
			БумДог = Результат.Выгрузить()[0].номер;
		Иначе
			//2. Если нет , тогда создадим запись	
			
			
			если ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ОбособленноеПодразделение тогда
				преф = ОсновнойМенеджерКонтрагента.ОсновноеПодразделение.ПрефиксИБ;
				если преф="Ео" или преф="ЕК" тогда преф = "ЕКТ";
				КонецЕсли;	
			иначе  преф = "ТК";
			КонецЕсли;
			номер = преф+"-"+формат(день(ТекущаяДата()),"ЧЦ=2; ЧВН=")+"/"
			+формат(месяц(ТекущаяДата()),"ЧЦ=2; ЧВН=")+"/"
			+прав(формат(год(ТекущаяДата()),"ДФ=dd.MM.yyyy"),2)+"-";
			
			Запрос = Новый Запрос; //все договоры за сегодня
			Запрос.Текст = "ВЫБРАТЬ
			|	БумажныеДоговоры.Номер
			|ИЗ
			|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
			|ГДЕ
			|	БумажныеДоговоры.Номер ПОДОБНО &Номер1
			|	И БумажныеДоговоры.Период = &Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	БумажныеДоговоры.Номер УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
			Запрос.УстановитьПараметр("Дата",  НачалоДня(ТекущаяДата()) );
			Запрос.УстановитьПараметр("Номер1",  номер+"%");
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			ном=1;  L=стрДлина(номер);
			Пока Выборка.Следующий() Цикл
				ном1 = прав(выборка.Номер, стрДлина(выборка.Номер)-L);
				попытка 
					ном11 = число(ном1);
					если ном11>=ном тогда ном = ном11+1;
					КонецЕсли;
				исключение
					сообщить("Неверный номер "+выборка.Номер, СтатусСообщения.Внимание);
				КонецПопытки;	
			КонецЦикла;
			попытка
				регСв = РегистрыСведений.БумажныеДоговоры.СоздатьМенеджерЗаписи();
				регСв.Период	= НачалоДня(ТекущаяДата());
				регСв.Номер 	= номер + строка(ном);
				регСв.Контрагент=Ссылка; 
				регСв.ДопустимоеЧислоДнейЗадолженности = ЧислоДнейОтсрочкиПоДоговору; //+++ 09.06.2016
				//регСв.ДатаОкончанияДействия = '00010101';
				регСв.Записать();
				БумДог = РегСВ.Номер;
				Сообщить("Автоматически создана запись о новом бумажном договоре № "+регСв.Номер+" от "+формат(регСв.Период,"ДЛФ=D"), СтатусСообщения.Информация);
			исключение
				Сообщить("У Вас недостаточно прав для записи данных о бумажном договоре!", СтатусСообщения.Внимание);
			КонецПопытки;
		конецЕсли;
		
		номер = БумДог;
		
		//3. Проверим есть карточка договора
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
		|	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
		|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование";
		
		Запрос.УстановитьПараметр("Владелец", ссылка);
		Запрос.УстановитьПараметр("ОтветственноеЛицо",основнойМенеджерКонтрагента);
		
		Если УсловияОплаты = "Отсрочка" тогда
			Запрос.УстановитьПараметр("Наименование", "%отсрочк%"+ПриставкаНал);
			Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00004"));//отсрочка
		ИначеЕсли УсловияОплаты = "Предоплата" тогда
			Запрос.УстановитьПараметр("Наименование", "%предоплат%"+ПриставкаНал);
			Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
		ИначеЕсли УсловияОплаты = "Предоплата по счетам" тогда
			Запрос.УстановитьПараметр("Наименование", "%по счетам%");
			Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00015"));//предоплата  по счетам
		ИначеЕсли УсловияОплаты = "Отсрочка до 14 дн." тогда
			Запрос.УстановитьПараметр("Наименование", "%до 14 дн%"+ПриставкаНал);
			Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
			
		конецЕсли;	
		Результат = Запрос.Выполнить();
		Если  результат.Пустой() тогда		
			//4. Если нет,то создадим карточку
			НовДоговор = справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			НовДоговор.Владелец = Ссылка;
			НовДоговор.Организация = Справочники.Организации.НайтиПоКоду("00001");
			НовДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			НовДоговор.ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
			НовДоговор.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
			НовДоговор.ОтветственноеЛицо  = ?(ЗначениеНеЗаполнено(ОсновнойМенеджерКонтрагента), //+++ 11.01.2016 - договор на ОсновнойМенеджерКонтрагента!
			глТекущийПользователь, ОсновнойМенеджерКонтрагента); 
			Если Покупатель Тогда
				НовДоговор.Наименование = "Договор предоплаты";
				НовДоговор.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
				Если УсловияОплаты ="Отсрочка" Тогда
					НовДоговор.Наименование = "Договор отсрочки";
					НовДоговор.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00004"); //отсрочка
				ИначеЕсли УсловияОплаты ="Отсрочка до 14 дн." Тогда
					НовДоговор.Наименование = "Договор отсрочки до 14 дн.";
					НовДоговор.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00001"); //предоплата
				ИначеЕсли УсловияОплаты ="Предоплата по счетам" Тогда
					безнал =Истина;
					НовДоговор.Наименование = "Договор предоплаты по счетам";
					НовДоговор.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("00015"); //предоплата
				КонецЕсли;	
				
				Если не Безнал и Нал тогда
					НовДоговор.Наименование = НовДоговор.Наименование + "*";
				конецЕсли;
				Если Безнал и Нал и УсловияОплаты <>"Предоплата по счетам" тогда
					Ответ = Вопрос("Договор будет со *?", РежимДиалогаВопрос.ДаНет, 0);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						НовДоговор.Наименование = НовДоговор.Наименование + "*";	
					конецесли;	
				конецЕсли;
				НовДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				НовДоговор.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
				
				Если ЭтотОбъект.Экспорт и НовДоговор.Ссылка.Пустая() тогда //18.03.2016 - только для нового договора!
					НовДоговор.ВалютаВзаиморасчетов = справочники.Валюты.НайтиПоНаименованию("USD");
				КонецЕсли;
				
				НовДоговор.Дата = ТекущаяДата();
				Если НовДоговор.ТипДоговора <> справочники.ТипыДоговоров.НайтиПоКоду("00015")тогда 
					НовДоговор.Номер = номер + строка(ном);
				конецЕсли;
				НовДоговор.ДопустимоеЧислоДнейЗадолженности = ЧислоДнейОтсрочкиПоДоговору; //+++ 09.06.2016
				НовДоговор.Записать();
			конецЕсли;	
		конецЕсли;	
	конецЕсли;	
КонецПроцедуры

Процедура ПросмотрДоговораНажатие(Элемент)
	
	Если ЭтотОбъект.Модифицированность() Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "Перед просмотром договора необходимо записать карточку клиента! Продолжить?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ЗаписатьВФорме();
		КонецЕсли;
		
	КонецЕсли;
	
	//Определим приставку для договора
	Если не Безнал и Нал тогда
		ПриставкаНал = "*";
	ИначеЕсли Безнал и не Нал Тогда
		ПриставкаНал = "[^*]";
	КонецЕсли;
	
	//Проверим есть ли бумажный договор
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БумажныеДоговоры.Период,
	|	БумажныеДоговоры.Контрагент,
	|	БумажныеДоговоры.Номер,
	|	БумажныеДоговоры.ДатаОкончанияДействия,
	|	БумажныеДоговоры.Состояние,
	|	БумажныеДоговоры.ЕстьДоговорПоручительства,
	|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
	|	БумажныеДоговоры.ПутьКФайлуДоговора,
	|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности,
	|	БумажныеДоговоры.Пролонгируется,
	|	БумажныеДоговоры.Комментарий
	|ИЗ
	|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	|ГДЕ
	|	БумажныеДоговоры.Контрагент = &Контрагент
	|	И (БумажныеДоговоры.ДатаОкончанияДействия > &ДатаОкончанияДействия
	|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата)";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Контрагент", ссылка);
	
	РезультатБ = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	|	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
	|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ссылка);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",основнойМенеджерКонтрагента);
	
	Если УсловияОплаты = "Отсрочка" тогда
		Запрос.УстановитьПараметр("Наименование", "%отсрочк%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00004"));//отсрочка
	ИначеЕсли УсловияОплаты = "Предоплата" тогда
		Запрос.УстановитьПараметр("Наименование", "%предоплат%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
	ИначеЕсли УсловияОплаты = "Предоплата по счетам" тогда
		Запрос.УстановитьПараметр("Наименование", "%по счетам%");
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00015"));//предоплата  по счетам
	ИначеЕсли УсловияОплаты = "Отсрочка до 14 дн." тогда
		Запрос.УстановитьПараметр("Наименование", "%до 14 дн%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
		
	конецЕсли;	
	РезультатД = Запрос.Выполнить();
	
	Если РезультатБ.Пустой() Тогда
		Предупреждение("Нет бумажного договора, перед открытием его необходимо создать | Кнопка: ""Подготовить ПФ""");
		Возврат;
	КонецЕсли;
	Если РезультатД.Пустой() Тогда
		Предупреждение("Нет договора контрагента, перед открытием его необходимо создать | Кнопка: ""Подготовить ПФ""");
		Возврат;
	КонецЕсли;
	
	Договор = РезультатД.Выгрузить()[0].Ссылка;
	
	////------------------ НОВЫЙ ШАБЛОН договора? ----------------------------------
	НаимОбработки = "Печать договора в Word";
	ТекСсылка=Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(НаимОбработки); 
	Если ТекСсылка.Пустая() Тогда
		сообщить("Не найден файл внешней печатной формы: "+НаимОбработки);
		возврат;
	КонецЕсли;	
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		ОбработкаПечатьДоговора = ВнешниеОбработки.Создать(ИмяФайла);  //,ЛОЖЬ Безопасный режим
		ОбработкаПечатьДоговора.Договор = Договор;
		ОбработкаПечатьДоговора.Руководитель = ПолучитьРуководителяПодразделения(Договор);
		состояние("Идет формирование договора во временный файл и запись его в хранилище 1С...");		
		ОбработкаПечатьДоговора.ПечатьДоговораВорд(истина, Истина); // с записью
		сообщить("Создан новый договор по шаблону Word. Все данные перезаполнены.", СтатусСообщения.Информация);
		состояние(" ");
		//	ОсновныеДействияФормыДействиеПечатьВорд(неопределено); // повторно уже открываем!
	Исключение
		сообщить("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура СогласоватьНажатие1(Элемент)
	//Определим приставку для договора
	Если не Безнал и Нал тогда
		ПриставкаНал = "*";
	ИначеЕсли Безнал и не Нал Тогда
		ПриставкаНал = "[^*]";
	КонецЕсли;
	
	//Проверим есть ли бумажный договор
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БумажныеДоговоры.Период,
	|	БумажныеДоговоры.Контрагент,
	|	БумажныеДоговоры.Номер,
	|	БумажныеДоговоры.ДатаОкончанияДействия,
	|	БумажныеДоговоры.Состояние,
	|	БумажныеДоговоры.ЕстьДоговорПоручительства,
	|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
	|	БумажныеДоговоры.ПутьКФайлуДоговора,
	|	БумажныеДоговоры.ДопустимоеЧислоДнейЗадолженности,
	|	БумажныеДоговоры.Пролонгируется,
	|	БумажныеДоговоры.Комментарий
	|ИЗ
	|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	|ГДЕ
	|	БумажныеДоговоры.Контрагент = &Контрагент
	|	И (БумажныеДоговоры.ДатаОкончанияДействия > &ДатаОкончанияДействия
	|			ИЛИ БумажныеДоговоры.ДатаОкончанияДействия = &ПустаяДата)";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Контрагент", ссылка);
	
	РезультатБ = Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
	|	И ДоговорыКонтрагентов.ОтветственноеЛицо = &ОтветственноеЛицо
	|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ссылка);
	Запрос.УстановитьПараметр("ОтветственноеЛицо",основнойМенеджерКонтрагента);
	
	Если УсловияОплаты = "Отсрочка" тогда
		Запрос.УстановитьПараметр("Наименование", "%отсрочк%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00004"));//отсрочка
	ИначеЕсли УсловияОплаты = "Предоплата" тогда
		Запрос.УстановитьПараметр("Наименование", "%предоплат%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
	ИначеЕсли УсловияОплаты = "Предоплата по счетам" тогда
		Запрос.УстановитьПараметр("Наименование", "%по счетам%");
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00015"));//предоплата  по счетам
	ИначеЕсли УсловияОплаты = "Отсрочка до 14 дн." тогда
		Запрос.УстановитьПараметр("Наименование", "%до 14 дн%"+ПриставкаНал);
		Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.НайтиПоКоду("00001"));//предоплата
		
	конецЕсли;	
	РезультатД = Запрос.Выполнить();
	
	Если РезультатБ.Пустой() Тогда
		Предупреждение("Нет бумажного договора, перед отправкой клиенту его необходимо создать | Кнопка: ""Подготовить ПФ""");
		Возврат;
	КонецЕсли;
	Если РезультатД.Пустой() Тогда
		Предупреждение("Нет договора контрагента, перед отправкой клиенту его необходимо создать | Кнопка: ""Подготовить ПФ""");
		Возврат;
	КонецЕсли;
	
	Договор = РезультатД.Выгрузить()[0].Ссылка;
	
	////------------------ НОВЫЙ ШАБЛОН договора? ----------------------------------
	НаимОбработки = "Печать договора в Word";
	ТекСсылка=Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(НаимОбработки); 
	Если ТекСсылка.Пустая() Тогда
		сообщить("Не найден файл внешней печатной формы: "+НаимОбработки);
		возврат;
	КонецЕсли;
	ДокументWord = неопределено;
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		ОбработкаПечатьДоговора = ВнешниеОбработки.Создать(ИмяФайла);  //,ЛОЖЬ Безопасный режим
		ОбработкаПечатьДоговора.Договор = Договор;
		ОбработкаПечатьДоговора.Руководитель = ПолучитьРуководителяПодразделения(Договор);		
		ДокументWord = ОбработкаПечатьДоговора.ПечатьДоговораВорд(Ложь, Истина, Истина);
		//ДокументWord.Activate();

	Исключение
		сообщить("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если ДокументWord = неопределено Тогда
		Предупреждение("Ошибка, не сформировался договор. Отправить невозможно.");
		Возврат;
	КонецЕсли;
	
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	
	//======================Получим адрес эл.почты=================
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("00013"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	АдресЭлПочтыКонтрагента = "";
	Если Выборка.Следующий() Тогда
		АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
	Иначе
		сигнал();
		Предупреждение("Не задан ""E-mail для обмена документами""
		|Отправка письма - не возможна!",30);
		Возврат;
	КонецЕсли;
	
	//============================================================		
	Ответ = КодВозвратаДиалога.Нет;
	Если Вопрос("Вы действительно хотите отправить договор на согласование клиенту?
		|Для "+строка(ЭтотОбъект)+"
		|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Тема = "Договор";
	ТекстСообщения = "Добрый день!"+Символы.ПС+
	"Направляем Вам договор на согласование";
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("doc");
	ДокументWord.SaveAs(ПутьКФайлу); //ActiveDocument();
	ДокументWord.Close();
	
	МассивФайлов = новый СписокЗначений;
	МассивФайлов.Добавить(ПутьКФайлу);
	яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресЭлПочтыКонтрагента, МассивФайлов, УЗ, ТекстСообщения, Тема);	  
	
	Состояние(" ");
	сигнал();
	
	Сообщить("Для "+строка(ЭтотОбъект)+" на эл.адрес: "+АдресЭлПочтыКонтрагента+" отправка завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

Процедура ОформитьПФНажатие(Элемент)
	СписокСекретарей = Новый Массив;
	СписокСекретарей.Добавить(Справочники.Пользователи.НайтиПоКоду("Красникова"));
	СписокСекретарей.Добавить(Справочники.Пользователи.НайтиПоКоду("Лаврентьева"));
	СписокСекретарей.Добавить(Справочники.Пользователи.НайтиПоКоду("Цуканова Т.С."));
	СписокСекретарей.Добавить(Справочники.Пользователи.НайтиПоКоду("Заводчикова С."));
	
	Для каждого Секретарь из СписокСекретарей Цикл
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		НоваяЗадача.Исполнитель  = Секретарь;
		НоваяЗадача.Наименование = "Нужно оформить договор по клиенту: "+ЭтотОбъект.ПолноеНаименование();
		НоваяЗадача.Объект = ЭтотОбъект.Ссылка;
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаИсполнения = КонецДня(ТекущаяДата());
		НоваяЗадача.Оповещение   = Истина;
		НоваяЗадача.СрокОповещения = ТекущаяДата()+60;
		НоваяЗадача.Описание = "Нужно оформить договор по клиенту: "+ЭтотОбъект.ПолноеНаименование();
		НоваяЗадача.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПунктыСамовывоза() 
	
	Нов = ПунктыСамовывоза.Добавить();
	Нов.Наименование = "Ярославль";
	
	Нов = ПунктыСамовывоза.Добавить();
	Нов.Наименование = "Екатеринбург";
	
	Нов = ПунктыСамовывоза.Добавить();
	Нов.Наименование = "Ростов на Дону";
	
	Нов = ПунктыСамовывоза.Добавить();
	Нов.Наименование = "Санкт-Петербург";
	
	Нов = ПунктыСамовывоза.Добавить();
	Нов.Наименование = "Москва";
		
КонецПроцедуры

Процедура ПунктыСамовывозаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПунктыСамовывозаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = НЕ РольДоступна("ПолныеПрава"); //08.08.2018 -чтобы руками можно было добавить?!
	
КонецПроцедуры

Процедура ОтправитьДанныеТерминалаКлиентуНажатие(Элемент)
			
	УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
	
	Если ЭтоНовый() Тогда
		сигнал();
		Предупреждение("Перед отправкой письма - сохраните текущий документ!",30);
		Возврат;
	КонецЕсли;
	
	//======================Получим адрес эл.почты=================
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("38823"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	АдресЭлПочтыКонтрагента = "";
	Если Выборка.Следующий() Тогда
		АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
	Иначе
		сигнал();
		Предупреждение("Не задан ""E-mail для рассылки уведомлений""
		|Отправка письма - не возможна!",30);
		Возврат;
	КонецЕсли;
	
	//============================================================		
	Ответ = КодВозвратаДиалога.Нет;
	Если Вопрос("Вы действительно хотите отправить доступа в Терминал на почту клиента
		|Для "+строка(ЭтотОбъект)+"
		|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАвт = Новый Запрос;
	ЗапросАвт.Текст = "ВЫБРАТЬ
	                  |	Авторизация.Ссылка
	                  |ИЗ
	                  |	Справочник.Авторизация КАК Авторизация
	                  |ГДЕ
	                  |	Авторизация.Владелец = &Владелец";
	ЗапросАвт.УстановитьПараметр("Владелец", ЭтотОбъект.Ссылка);
	Результат = ЗапросАвт.Выполнить();
	Выборка = Результат.Выбрать();
	АвторизацияСпр = "";
	Если Выборка.Следующий() Тогда
		АвторизацияСпр = Выборка.Ссылка;
	Иначе
		сигнал();
		Предупреждение("Нет данный для входа в Терминал
		|Отправка письма - не возможна!",30);
		Возврат;
	КонецЕсли;
	
	Состояние("Идет отправка письма...");  i=0;
	
	Тема = "Доступ в Сервис Terminal";
	ТекстСообщения = "Добрый день!"+Символы.ПС+Символы.ПС+
	"Направляем Вам доступ в Сервис Terminal"+Символы.ПС+Символы.ПС+
	"1. Переходите по ссылке  http://terminal.yst.ru/"+Символы.ПС+Символы.ПС+
	"2. Вход в систему:"+Символы.ПС+Символы.ПС+
	"Логин: "+АвторизацияСпр.Логин+Символы.ПС+
	"Пароль: "+АвторизацияСпр.Пароль+Символы.ПС+Символы.ПС+
	"ВНИМАНИЕ!!! Цена в терминале будет актуальна только на следующий день после регистрации на сайте!!!!";
	МассивФайлов = Новый Массив;
	яштРезервыПоТоварам.ПослатьЭлектронноеПисьмо(АдресЭлПочтыКонтрагента, МассивФайлов, УЗ, ТекстСообщения, Тема);	  
	
	Состояние(" ");
	сигнал();
	
	Сообщить("Для "+строка(ЭтотОбъект)+" на эл.адрес: "+АдресЭлПочтыКонтрагента+" отправка завершена", СтатусСообщения.Информация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
Функция ПолучитьРуководителяПодразделения(ДоговорКонтр)
	
	Если ЗначениеЗаполнено(ДоговорКонтр.ОтветственноеЛицо) 
		И ЗначениеЗаполнено(ДоговорКонтр.ОтветственноеЛицо.ОсновноеПодразделение) 
		И ЗначениеЗаполнено(ДоговорКонтр.ОтветственноеЛицо.ОсновноеПодразделение.Руководитель) Тогда
		
		Если ДоговорКонтр.ОтветственноеЛицо.ОсновноеПодразделение.Код = "00138" Тогда // "Обособленное подразделение Екатеринбург"
			//Рукль = Справочники.Пользователи.НайтиПоКоду("Серков");
			Рукль = Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)");
		Иначе
			Рукль = ДоговорКонтр.ОтветственноеЛицо.ОсновноеПодразделение.Руководитель;
		КонецЕсли;
		
	Иначе
		Рукль = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Рукль;
	
КонецФункции

//13.03.2018 - разделены галки авто-объединения и авто-постановки в маршрут
Процедура СтавитьВМаршрутПриИзменении(Элемент)
	Если АвтоматическиСтавитьВМаршрут  и Родитель = справочники.Контрагенты.ПотенциальныеПокупатели тогда
		Предупреждение("Нельзя ставить в маршрут заказы Потенциального покупателя!", 30);
		АвтоматическиСтавитьВМаршрут = ЛОЖЬ;
	КонецЕсли;	
КонецПроцедуры

Процедура АвтоматическиОбъединятьЗаказыПриИзменении(Элемент)
	Если не АвтоматическиОбъединятьЗаказы тогда
		АвтоматическиСтавитьВМаршрут = ЛОЖЬ;
	КонецЕсли;	
	ЭлементыФормы.АвтоматическиСтавитьВМаршрут.Доступность = АвтоматическиОбъединятьЗаказы;
КонецПроцедуры

Процедура РабочаяГруппаПриИзменении(Элемент)
	//08.02.19 Смирнов
	Если ЗначениеЗаполнено(РабочаяГруппа) и Ссылка <> РабочаяГруппа тогда
		Для каждого св из Свойства.СвойстваИЗначения цикл
			Если св.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90230") тогда
				св.Значение = РабочаяГруппа;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДопустимаяСуммаЗадолженностиПриИзменении(Элемент)
	
	//***2019.03.14 Задача № 64857
	Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Филатова С.В.") Тогда
		Если ДопустимаяСуммаЗадолженности > 750000 Тогда
			Сообщить("Вы можете устанавливать лимиты не более 750 000 рублей");
			ДопустимаяСуммаЗадолженности = Ссылка.ДопустимаяСуммаЗадолженности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КатегорияСкидокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Категория = перечисления.КатегорииСкидок.VIP тогда
		ОформлениеСтроки.Шрифт = новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);//Жирный!
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////

ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо.Видимость = Ложь;
ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо.Видимость = Истина;

ВидимостьПанелейЮрФизЛица();

мЖирныйШрифт = Новый Шрифт(,, Истина);
мОбычныйШрифт = Новый Шрифт();

ПраваДоступаПользователей = мПраваДоступаПользователей;

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
КодСвойстваВажность = "90184"; //НОВОЕ СВ-ВО!

//список кому можно переносить договора
КомуМожно = новый СписокЗначений;
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Красникова"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Лаврентьева"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Цуканова Т.С."));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Глухова Т."));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Заводчикова С."));

КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Горохов"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Серков"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Малышев Егор"));

КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Марешева (Новый)"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Филатова С.В."));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Антонов А.В."));

//+++ по задаче 50641
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Курапова Е.А."));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Балагаева Инесса"));
КомуМожно.Добавить(Справочники.Пользователи.НайтиПоКоду("Коршунова Ю."));
//--- по задаче 50641

//Миронычев
	СтИнн = Инн;
	СтКпп = Кпп;
