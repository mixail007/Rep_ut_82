Перем мВалютаРегламентированногоУчета;
Перем УстановкаСкидокНоменклатуры;
Перем ОтменаСкидок;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет реквизиты нового элемента справочника.
//
Процедура ЗаполнитьНовыйЭлемент()

	Если ЗначениеНеЗаполнено(ВедениеВзаиморасчетов) Тогда
		ВедениеВзаиморасчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновноеВедениеВзаиморасчетовПоДоговорам");
		Если ЗначениеНеЗаполнено(ВедениеВзаиморасчетов) Тогда
			ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяВалютаВзаиморасчетов");
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
		Если ЗначениеНеЗаполнено(Организация) Тогда
			Выборка = Справочники.Организации.Выбрать();
			Пока ЗначениеНеЗаполнено(Организация) И Выборка.Следующий() Цикл
				Если Выборка.Ссылка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				Организация = Выборка.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(ВидУсловийДоговора) Тогда
		ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	КонецЕсли;

	ЗаполнитьСписокВыбораВидаДоговора();

	Если ЗначениеНеЗаполнено(ВидДоговора) Тогда
		Если ЗначениеНеЗаполнено(ЭтотОбъект.Владелец) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		Иначе
			Если (ЭтотОбъект.Владелец.Покупатель И ЭтотОбъект.Владелец.Поставщик) ИЛИ (ЭтотОбъект.Владелец.Покупатель) Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ИначеЕсли ЭтотОбъект.Владелец.Поставщик Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УстановитьТипЦенДоговора();

КонецПроцедуры // ЗаполнитьНовыйЭлемент()

// Процедура рассчитывает скидки контрагента.
//
Процедура ПоказатьСкидки()
	//Заполним таблицу скидок по договору.
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателей.Добавить(Владелец);
	СписокПолучателей.Добавить(Ссылка);
	СписокПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПолучателей" , СписокПолучателей);
	Запрос.УстановитьПараметр("ПустаяДата"        , '00010101000000');
	Запрос.УстановитьПараметр("ДатаНачалаПериода"        , ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода"        , ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("УсловиеСуммы"        , Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);

	Текст = "ВЫБРАТЬ
	|	Записи.ПолучательСкидки,
	|	Записи.ПроцентСкидкиНаценки КАК Процент,
	|	Записи.Номенклатура.Представление КАК Номенклатура,
	|	Записи.ХарактеристикаНоменклатуры.Представление КАК Характеристика,
	|	Записи.Качество.Представление КАК Качество,
	|	Записи.Условие,
	|	Записи.ЗначениеУсловия КАК ЗначениеУсловия,
	|	Записи.Регистратор.Ссылка КАК УстановкаСкидокНоменклатуры,
	|	Записи.Регистратор.Представление,
	|	Записи.Период КАК Начало,
	|	ВЫБОР КОГДА Записи.ДатаОкончания > ОтменыСкидок.ДатаОтмены
	|			ИЛИ Записи.ДатаОкончания = &ПустаяДата 
	|			ИЛИ Записи.ДатаОкончания ЕСТЬ NULL ТОГДА
	|		ОтменыСкидок.ДатаОтмены
	|	ИНАЧЕ
	|		Записи.ДатаОкончания КОНЕЦ КАК Окончание,
	|	ВремяДействия.ДеньНедели,
	|	ВремяДействия.ВремяНачала,
	|	ВремяДействия.ВремяОкончания,
	|	Записи.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	|	ОтменыСкидок.Регистратор КАК ОтменаСкидок,
	|	ВЫБОР КОГДА Записи.Условие = &УсловиеСуммы ТОГДА
	|		Записи.Валюта.Представление
	|	ИНАЧЕ Неопределено КОНЕЦ КАК Валюта
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры КАК Записи
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|
	|	(ВЫБРАТЬ
	|		ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры,
	|		ВложенныйЗапрос.Регистратор,
	|		ВложенныйЗапрос.Период КАК ДатаОтмены
	|		ИЗ
	|		(ВЫБРАТЬ
	|			СкидкиНаценкиНоменклатуры.Регистратор КАК Регистратор,
	|			СкидкиНаценкиНоменклатуры.Период КАК Период
	|			ИЗ
	|			РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиНоменклатуры
	|			ГДЕ
	|			СкидкиНаценкиНоменклатуры.Период <= &ДатаОкончанияПериода
	|			И НЕ Выразить (СкидкиНаценкиНоменклатуры.Регистратор КАК Документ.ОтменаСкидокНоменклатуры) ЕСТЬ NULL
	|		) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
	|		ПО ВложенныйЗапрос.Регистратор = ОтменаСкидокНоменклатурыДокументы.Ссылка
	|	)КАК ОтменыСкидок
	|	ПО Записи.Регистратор.Ссылка = ОтменыСкидок.УстановкаСкидокНоменклатуры
	|Левое СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО Записи.Регистратор = ВремяДействия.Регистратор
	|
	//|ГДЕ
	//|	(ВремяДействия.Регистратор ЕСТЬ NULL ИЛИ ВремяДействия.ДеньНедели = &ДеньНедели И ВремяДействия.ВремяНачала <= &ТекущееВремя И ВремяДействия.ВремяОкончания >= &ТекущееВремя) И
	//|	(Скидки.ПроцентСкидкиНаценки > 0) И
	//|	(Скидки.ДатаОкончания = &ПустаяДата ИЛИ Скидки.ДатаОкончания > &Дата)
	|
	|ГДЕ ПолучательСкидки В (&СписокПолучателей)
	|	И (Записи.ПроцентСкидкиНаценки > 0)
	|	И (
	// Начало периода скидок меньше начала выбранного периода и окончание периода скидок больше начала выбранного периода.
	|		((Записи.Период < &ДатаНачалаПериода) И (Записи.ДатаОкончания >= &ДатаНачалаПериода ИЛИ Записи.ДатаОкончания = &ПустаяДата ИЛИ Записи.ДатаОкончания ЕСТЬ NULL))
	|	ИЛИ ((Записи.Период >= &ДатаНачалаПериода) И (Записи.Период <= &ДатаОкончанияПериода)))
	|УПОРЯДОЧИТЬ ПО ПолучательСкидки,
	|	Номенклатура,
	|	Характеристика,
	|	Качество,
	|	Условие,
	|	ЗначениеУсловия,
	|	ВремяДействия.ДеньНедели,
	|	ВремяДействия.ВремяНачала,
	|	ВремяДействия.ВремяОкончания,
	|	Процент УБЫВ,
	|	Начало ВОЗР
	
	|	АВТОУПОРЯДОЧИВАНИЕ 
	|";

	Запрос.Текст           = Текст;
	Скидки = Запрос.Выполнить().Выгрузить();
	ПредыдущаяСкидка = Неопределено;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСкидка Из Скидки Цикл
		Если ПредыдущаяСкидка <> Неопределено Тогда
			Если ТекСкидка.Номенклатура = ПредыдущаяСкидка.Номенклатура
			   И ТекСкидка.Характеристика = ПредыдущаяСкидка.Характеристика
			   И ТекСкидка.Качество = ПредыдущаяСкидка.Качество
			   И ТекСкидка.Условие = ПредыдущаяСкидка.Условие
			   И ТекСкидка.ЗначениеУсловия = ПредыдущаяСкидка.ЗначениеУсловия
			   И ТекСкидка.ДеньНедели = ПредыдущаяСкидка.ДеньНедели
			   И ТекСкидка.ВремяНачала = ПредыдущаяСкидка.ВремяНачала
			   И ТекСкидка.ВремяОкончания = ПредыдущаяСкидка.ВремяОкончания
			   И ТекСкидка.Начало > ПредыдущаяСкидка.Начало
			   Тогда
				СтрокиКУдалению.Добавить(ПредыдущаяСкидка);
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСкидка = ТекСкидка;
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Скидки.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура заполняет список значений для выбора ЭУ ВидДоговора
//
Процедура ЗаполнитьСписокВыбораВидаДоговора()

	Если ЗначениеНеЗаполнено(ЭтотОбъект.Владелец) Тогда
		УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее());
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	Иначе
		Если ЭтотОбъект.Владелец.Покупатель И ЭтотОбъект.Владелец.Поставщик Тогда
			УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ПолучитьСписокЭлементовПеречисления("ВидыДоговоровКонтрагентов"));
		ИначеЕсли ЭтотОбъект.Владелец.Покупатель Тогда
			УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя());
		ИначеЕсли ЭтотОбъект.Владелец.Поставщик Тогда
			УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика());
		Иначе
			УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее());
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает видимость и доступность для элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Управление видимостью элементов формы

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда

		ВидимостьОбщихЭлементов     = Истина;
		ВидимостьКонтроляДней       = Истина;
		ВидимостьПроцентаПредоплаты = Ложь;
		ВидимостьУчетаТоваров       = Ложь;
    //Федорова Ек
	ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		Если Константы.ИспользоватьКонтрольДнейЗадолженностиВДоговоре.Получить() Тогда
			ВидимостьОбщихЭлементов     = Истина;
			ВидимостьКонтроляДней       = Истина;
			ВидимостьПроцентаПредоплаты = Ложь;
			ВидимостьУчетаТоваров       = Истина;
		Иначе
			ВидимостьОбщихЭлементов     = Истина;
			ВидимостьКонтроляДней       = Ложь;
			ВидимостьПроцентаПредоплаты = Истина;
			ВидимостьУчетаТоваров       = Истина;
		КонецЕсли;
	//\	
	ИначеЕсли ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		  ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда

		ВидимостьОбщихЭлементов     = Истина;
		ВидимостьКонтроляДней       = Истина;
		ВидимостьПроцентаПредоплаты = Истина;
		ВидимостьУчетаТоваров       = Истина;

	Иначе

		ВидимостьОбщихЭлементов     = Ложь;
		ВидимостьКонтроляДней       = Ложь;
		ВидимостьПроцентаПредоплаты = Ложь;
		ВидимостьУчетаТоваров       = Ложь;

	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ВидимостьПроцентаПредоплаты = Ложь;
	КонецЕсли;

	Если ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ЭлементыФормы.ВедениеВзаиморасчетов.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ВедениеВзаиморасчетов.Доступность = Истина;
	КонецЕсли;

	// Установка видимости общих реквизитов контроля
	ЭлементыФормы.РамкаГруппыКонтрольДебиторскойЗадолженности.Видимость = ВидимостьОбщихЭлементов;
	ЭлементыФормы.КонтролироватьСуммуЗадолженности.Видимость            = ВидимостьОбщихЭлементов;
	Если ВидимостьОбщихЭлементов Тогда
		ЭлементыФормы.ДопустимаяСуммаЗадолженности.Видимость            = КонтролироватьСуммуЗадолженности;
	Иначе
		ЭлементыФормы.ДопустимаяСуммаЗадолженности.Видимость            = ВидимостьОбщихЭлементов;
	КонецЕсли;

	// Установка видимости реквизитов контроля дней
	ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Видимость        = ВидимостьКонтроляДней;
	Если ВидимостьКонтроляДней Тогда
		ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Видимость        = КонтролироватьЧислоДнейЗадолженности;
	Иначе
		ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Видимость        = ВидимостьКонтроляДней;
	КонецЕсли;

	// Установка видимости реквизитов процента предоплаты
	ЭлементыФормы.НадписьПроцентПредоплаты.Видимость                    = ВидимостьПроцентаПредоплаты;
	ЭлементыФормы.ПроцентПредоплаты.Видимость                           = ВидимостьПроцентаПредоплаты;

	// Установка видимости реквизитов учета Товаров
	//ЭлементыФормы.РамкаГруппыУчетТоваров.Видимость                      = ВидимостьУчетаТоваров;
	ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Видимость     = ВидимостьУчетаТоваров;
	Если ВидимостьУчетаТоваров Тогда
		ЭлементыФормы.ЧислоДнейРезерваБезОплаты.Видимость               = ДержатьРезервБезОплатыОграниченноеВремя;
	Иначе
		ЭлементыФормы.ЧислоДнейРезерваБезОплаты.Видимость               = ВидимостьУчетаТоваров;
	КонецЕсли;
//	ЭлементыФормы.ОбособленныйУчетТоваровПоЗаказамПокупателей.Видимость = ВидимостьУчетаТоваров;

	// Страницы условий договора
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее ИЛИ ВидДоговора.Пустая() Тогда
		ЭлементыФормы.ВидУсловийДоговора.Доступность            = Ложь;
		ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Ложь;
		ЭлементыФормы.Панель.Страницы.Дополнительно.Видимость   = Ложь;
	Иначе
		ЭлементыФормы.ВидУсловийДоговора.Доступность = Истина;
		Если ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий ИЛИ ВидУсловийДоговора.Пустая() Тогда
			ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Ложь;
		Иначе
			ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Истина;
		КонецЕсли; 
		ЭлементыФормы.Панель.Страницы.Дополнительно.Видимость = Истина;
	КонецЕсли;

	// Закладка "Дополнительно"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Истина;
		ЭлементыФормы.УчетАгентскогоНДС.Видимость = Истина;
		Если УчетАгентскогоНДС Тогда
			ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Истина;
			ЭлементыФормы.ТекстВидАгентскогоДоговора.Видимость = Истина;
		Иначе
			ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Ложь;
			ЭлементыФормы.ТекстВидАгентскогоДоговора.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Ложь;
		ЭлементыФормы.УчетАгентскогоНДС.Видимость = Ложь;
		ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Ложь;
		ЭлементыФормы.ТекстВидАгентскогоДоговора.Видимость = Ложь;
	КонецЕсли;

	// Закладка "Скидки"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ЭлементыФормы.Панель.Страницы.Скидки.Видимость= Истина;
	Иначе
		ЭлементыФормы.Панель.Страницы.Скидки.Видимость= Ложь;
	КонецЕсли;

	//Видимость и доступность флага "Расчеты в условных единицах"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		ИначеЕсли УчетАгентскогоНДС тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		Иначе  
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Истина;
		Конецесли;
	Иначе
		ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
	КонецЕсли;

	ДоговорКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭлементыФормы.КонтролироватьДенежныеСредстваКомитента.Доступность  = ДоговорКомиссии;
	ЭлементыФормы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ДоговорКомиссии;
	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность       = ДоговорКомиссии;

	ЭлементыФормы.КонтролироватьДенежныеСредстваКомитента.Заголовок  = ?(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером,
	                                                                   "Контролировать денежные средства комиссионера",
	                                                                   "Контролировать денежные средства комитента");
																	   
    //21.08.14 Смирнов
	Если ТипДоговора=Справочники.ТипыДоговоров.Факторинг тогда
		ЭлементыФормы.ДеньгиПоФакторингу.Видимость=Истина;
	Иначе
		ЭлементыФормы.ДеньгиПоФакторингу.Видимость=ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает тип значения для типа цен договора в зависимости от вида контрагента (поставщик, покупатель)
// 
Процедура УстановитьТипЦенДоговора()

	Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И ТипЗнч(ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	ИначеЕсли (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И ТипЗнч(ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
		ТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием".
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПроверитьПрава(ЭтотОбъект, ЭтаФорма, Отказ);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии()
	    Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОграниченныйИнтерфейс") = Истина Тогда
         		Элементыформы.ДействияФормы.Кнопки.Действие1.доступность = Ложь;
        конецесли;
	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	
	Если СправочникОбъект.ЭтоНовый() Тогда

		ЗаполнитьНовыйЭлемент();

	КонецЕсли;

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = Ссылка;
	
	ЭлементыФормы.ДокументыУсловияДоговора.НастройкаОтбора.ДокументыПоДоговоруКонтрагента.Доступность = Ложь;
	
	//+++ 14.09.2016
	ДатаНачалаПериода = ТекущаяДата();
	ДатаОкончанияПериода = ДатаНачалаПериода;
	ПоказатьСкидки();

	УстановитьВидимость();
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("90013"); // Справочник "Договоры контрагентов"
	ОбновитьСвойства();

//для филиалов - закрыто!
	Если  НЕ ( РольДоступна("яштФинДиректор") 
		        или РольДоступна("ПолныеПрава") 
				или (сокрЛП(глТекущийПользователь.Код) = "Симонова") 
			 )
		или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя")
		тогда
		ЭлементыФормы.ДействияФормы.Видимость = ложь;
        ЭлементыФормы.ДействияФормы.Доступность = ложь;
	КонецЕсли;

//+++( 28.05.2015 по служебке от Ани Красниковой - доступ ТОЛЬКО ей (и фин.отделу) !
	//Если сокрЛП(глТекущийПользователь.Код) = "Красникова" тогда
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") тогда
		//или РольДоступна("яштФинДиректор") //22.10.2015 - убрано!
		ЭлементыФормы.Состояние.Доступность = Истина;
		ЭлементыФормы.ЕстьКопииПравоустанавливающихДокументов.Доступность = Истина;
		ЭлементыФормы.ЕстьДогорПоручительства.Доступность = Истина;
	ИНАЧЕ //22.10.2015 - никому другому - недоступно!
		ЭлементыФормы.Состояние.Доступность = ЛОЖЬ;
		ЭлементыФормы.ЕстьКопииПравоустанавливающихДокументов.Доступность = ЛОЖЬ;
		ЭлементыФормы.ЕстьДогорПоручительства.Доступность = ЛОЖЬ;
	КонецЕсли;	

	
//--------------------если есть состояние - доступ ТОЛЬКО у Красниковой------------------------------------
	//если что-то заполнено - то уже нельзя менять номер, дату договора!
	Если  (ЕстьДогорПоручительства               
			или ЕстьКопииПравоустанавливающихДокументов 
		    или  ЗначениеЗаполнено(СостояниеДоговора)
		    ) тогда
			
		флДоступ = ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами") или сокрЛП(глТекущийПользователь.Код) = "Лаврентьева" или сокрЛП(глТекущийПользователь.Код) = "Цуканова Т.С." или сокрЛП(глТекущийПользователь.Код) = "Глухова Т."
		 //до 13.05.2016  или РольДоступна("яштФинДиректор") или РольДоступна("МенеджерПоВзаимозачетам")  //с 04.02.2016 - для Фин.Отдела!
		           );
		ЭлементыФормы.Номер.Доступность = флДоступ;
		ЭлементыФормы.Дата.Доступность  = флДоступ;
		ЭлементыФормы.ДатаОкончанияДействия.Доступность = флДоступ;
		
	Иначе // не заполнено ничего из нижнего... 
		
			
		Если  сокрЛП(глТекущийПользователь.Код) = "Лаврентьева" 
			или сокрЛП(глТекущийПользователь.Код) = "Цуканова Т.С."
			или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРаботуСБумажнымиДоговорами")
			или сокрЛП(глТекущийПользователь.Код) = "Глухова Т."
			//или РольДоступна("ПолныеПрава") // бух.

			//+++ 04.02.2016 - пока нет статуса - редактировать ТОЛЬКО дату окончания - может еще и ФинОтдел
			или РольДоступна("яштФинДиректор") //или РольДоступна("МенеджерПоВзаимозачетам")
			или РольДоступна("ПравоЗавершенияРаботыПользователей") //IT-отдел
			
			//+++ с 30.03.2015 для филиалов
		    или (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя")
				и	РольДоступна("Кассир")  // только бух филиала! 
		        ) тогда 
			
				// 14.09.2016 - ТОЛЬКО для НОВОГО договора, а  не скопированного !				
				Если (ЭтотОбъект.ДатаСозданияДоговора='00010101') тогда 
					ЭлементыФормы.ВидДоговора.Доступность = Истина;
					ЭлементыФормы.Номер.Доступность = Истина;
					ЭлементыФормы.Дата.Доступность  = Истина;
					ЭлементыФормы.ДатаОкончанияДействия.Доступность = Истина;
				КонецЕсли;
			
		  Иначе //ВООБЩЕ НЕЛЬЗЯ НИЧЕГО!
			  
			  ЭтаФорма.ТолькоПросмотр = ИСТИНА;	
			  
		  КонецЕсли;

		  
	КонецЕсли;
	
//КонецЕсли;	
//+++)

	//+++ 18.02.2015
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Word.Доступность = (ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль );

	Если (типДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс или типДоговора = Справочники.ТипыДоговоров) и РольДоступна("ПолныеПрава") тогда
	  Элементыформы.ПереводМеждуСчетами.Видимость = Истина;
	  Элементыформы.ВнутренниеВзаиморасчеты.Видимость = Истина;
	конецесли;
  	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПриИзмененииДанных".
//
Процедура ПриИзмененииДанных()
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
	
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения".
//
Процедура ОбновлениеОтображения()

	Если КонтролироватьСуммуЗадолженности Тогда
		Если ВалютаВзаиморасчетов.Пустая() Тогда
			ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности, сумма :";
		Иначе
			ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности, сумма (" + ВалютаВзаиморасчетов + ") не более:";
		КонецЕсли; 
	Иначе
		ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности";
	КонецЕсли; 

	Если КонтролироватьЧислоДнейЗадолженности Тогда
		ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Заголовок = "Контролировать число дней задолженности, число дней не более:";
	Иначе
		ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Заголовок = "Контролировать число дней задолженности";
	КонецЕсли; 

	Если ДержатьРезервБезОплатыОграниченноеВремя Тогда
		ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Заголовок = "Держать резерв без оплаты ограниченное время, дней не более:";
	Иначе
		ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Заголовок = "Держать резерв без оплаты ограниченное время";
	КонецЕсли; 

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Ссылка);
	КонецЕсли; 
	
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = Ссылка;
	
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();
	ОбновитьСвойства();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" переключателя ведения взаиморасчетов.
//
Процедура ВедениеВзаиморасчетовПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ВедениеВзаиморасчетовПриИзменении

// Процедура - обработчик события "ПриИзменении" флажка "КонтролироватьСуммуЗадолженности".
//
Процедура КонтролироватьСуммуЗадолженностиПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "КонтролироватьЧислоДнейЗадолженности".
//
Процедура КонтролироватьЧислоДнейЗадолженностиПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ДержатьРезервБезОплатыОграниченноеВремя".
//
Процедура ДержатьРезервБезОплатыОграниченноеВремяПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ВедениеВзаиморасчетов".
//
Процедура ВедениеВзаиморасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам[ВыбранноеЗначение]

КонецПроцедуры

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы УсловияДоговора.
//
Процедура УсловияДоговораПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы ВидУсловийДоговора.
//
Процедура ВидУсловийДоговораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ВидУсловийДоговора.
//
Процедура ВидУсловийДоговораПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий
		И ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.УсловияДоговора Тогда
	
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Свойства;
	
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы ДокументыУсловияДоговора.
//
Процедура ДокументыУсловияДоговораПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Копирование Тогда
	
		Отказ = Истина;
		
		ДокОбъект = Документы.УсловияПоставокПоДоговорамКонтрагентов.СоздатьДокумент();
		
		ДокОбъект.Контрагент            = ЭтотОбъект.Владелец;
		ДокОбъект.ДоговорКонтрагента = Ссылка;
		
		ДокОбъект.ПолучитьФорму().Открыть();
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ВидДоговора.
//
Процедура ВидДоговораПриИзменении(Элемент)

	Если ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВидУсловийДоговора                       = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
		ВедениеВзаиморасчетов                    = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		ТипЦен                                   = Неопределено;
		СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПустаяСсылка();
		ПроцентКомиссионногоВознаграждения       = 0;
	КонецЕсли;

	//Зачистка флага "Расчеты в условных единицах" для всех видов договоров кроме договоров в поставщиком и с покупателем
	Если не (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьТипЦенДоговора();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы ТипЦенПокупки.
//
Процедура ТипЦенПокупкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УстановитьТипЦенДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы ТипЦенПокупки.
//
Процедура ТипЦенПокупкиОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьТипЦенДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВидДоговора.
//
Процедура ВидДоговораНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "УчетАгентскогоНДС".
//
Процедура УчетАгентскогоНДСПриИзменении(Элемент)
	
	Если (ЗначениеНеЗаполнено(ВидАгентскогоДоговора)) И УчетАгентскогоНДС Тогда
		// Установим значение "по умолчанию"
		ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда;
	КонецЕсли;
	Если РасчетыВУсловныхЕдиницах И УчетАгентскогоНДС тогда
		//Зачистка флага "Расчеты в условных единицах" при исполнении обязанности налогового агента по уплате НДС
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	УстановитьВидимость();	
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельДокументыУсловияДоговора.Анализ".
//
Процедура КоманднаяПанельДокументыУсловияДоговораАнализ(Кнопка)
	
	Если ЭлементыФормы.ДокументыУсловияДоговора.ТекущиеДанные <> Неопределено Тогда
		СформироватьАнализУсловийДоговораВзаиморасчетов(глТекущийПользователь, ЭлементыФормы.ДокументыУсловияДоговора.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета  Тогда
	//Зачистка флага "Расчеты в условных единицах" для валюты, совпадающей с валютой рег. учета
		Если РасчетыВУсловныхЕдиницах тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЕсли;
    УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "Скидки".
//
Процедура СкидкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "Скидки".
//
Процедура СкидкиПередНачаломИзменения(Элемент, Отказ)

	Если ЭлементыФормы.Скидки.ТекущаяКолонка.Имя = "ОтменаСкидок" Тогда
		Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ОтменаСкидок) Тогда
			Отказ = Истина;
		Иначе
			ОтменаСкидок = Элемент.ТекущиеДанные.ОтменаСкидок;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.Скидки.ТекущаяКолонка.Имя = "УстановкаСкидокНоменклатуры" Тогда
		Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры) Тогда
			Отказ = Истина;
		Иначе
			УстановкаСкидокНоменклатуры = Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" элемента формы "Скидки".
//
Процедура СкидкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура КнопкаПоказатьНажатие(Элемент)
	ПоказатьСкидки();
КонецПроцедуры

Процедура СкидкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатуры;
	Элемент.ТекущиеДанные.ОтменаСкидок = ОтменаСкидок;
КонецПроцедуры

Процедура КнопкаПоказатьСтавкуНажатие(Элемент)
// показываем форму регистра сведений
ФормаСписка=РегистрыСведений.СтавкиПенейПоДоговорам.ПолучитьФормуСписка();

ФормаСписка.Отбор["ДоговорКонтрагента"].Использование = Истина;
ФормаСписка.Отбор["ДоговорКонтрагента"].ВидСравнения = ВидСравнения.Равно;
ФормаСписка.Отбор["ДоговорКонтрагента"].Значение = Ссылка;
			
//ФормаСписка.НастройкаОтбора["ДоговорКонтрагента"].Доступность = Ложь;

ФормаСписка.Открыть();

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	//+++( 06.04.2012 - ВСЕГДА должен быть указан Менеджер, ответственный за договор
	Если  ЗначениеНеЗаполнено(ОтветственноеЛицо) Тогда
		Сообщить("Не указано ответственное лицо по договору.",СтатусСообщения.Важное);
		Отказ = Истина;
	КОнецЕсли;

	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		//Если  ЗначениеНеЗаполнено(ОтветственноеЛицо) Тогда
		//	Сообщить("Не указано ответственное лицо по договору.",СтатусСообщения.Важное);
		//	Отказ = Истина;
		//КОнецЕсли;
	//+++)
		
		Если  ТипДоговора=Справочники.ТипыДоговоров.НД Тогда
			Если ЭтоНовый() Тогда
				ТаблицаДоговоров = ВернутьТаблицуДоговоровКонтрагента(ЭтотОбъект.Организация,ЭтотОбъект.Владелец,,Справочники.ТипыДоговоров.НД);
				Если ТаблицаДоговоров.Количество()>0 Тогда
					Сообщить("Договор не будет записан. По данному контрагенту уже есть договор типа 'НД'.",СтатусСообщения.Важное);
					Отказ=Истина;
				КонецЕсли;	
			КонецЕсли;	
			
			// проверка: по договору НД - ведение взаиморасчетов по договору в целом
			Если ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
				Сообщить("Договор не будет записан. По договорам типа 'НД' ведение взаиморасчетов должно быть 'По договору в целом'.",СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли  ТипДоговора=Справочники.ТипыДоговоров.Пени Тогда
			Если ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				Сообщить("Договор не будет записан. По договорам типа 'ПЕНИ' ведение взаиморасчетов должно быть 'По расчетным документам'.",СтатусСообщения.Важное);
			КонецЕсли;
		ИначеЕсли  ТипДоговора=Справочники.ТипыДоговоров.Факторинг И ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			Если ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				Сообщить("Договор не будет записан. По договорам с покупателем типа 'Факторинг' ведение взаиморасчетов должно быть 'По заказам'.",СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	//+++ 15.07.2016 ==================
    ПроверитьБумДоговор(Отказ);
		  
КонецПроцедуры

процедура ПроверитьБумДоговор(Отказ1 = ложь)
	
	Если НЕ ЭтоНовый() тогда // разрешаем копировать! 
		Если ( (ЭтотОбъект.СостояниеДоговора <> ссылка.СостояниеДоговора)
		  или  (ЭтотОбъект.ЕстьКопииПравоустанавливающихДокументов <> ссылка.ЕстьКопииПравоустанавливающихДокументов)
		  или  (ЭтотОбъект.ЕстьДогорПоручительства <> ссылка.ЕстьДогорПоручительства)
		     )
		//09.09.2016/ ЕЩЕ РАЗ ПРОВЕРЯЕМ И ЗАПРЕЩАЕМ при записи из формы 
		//и сокрЛП(глТекущийПользователь.Код) <> "Красникова" ТОГДА
		и не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РазрешитьРаботуСБумажнымиДоговорами") тогда
	   		Предупреждение("Вам запрещено менять поля группы 'Контроль наличия основных документов'", 30);
			Отказ1 = Истина;
	 		возврат;
		 КонецЕсли;
	КонецЕсли;		
	
	Если СокрЛП(Номер)<>"" и Дата>'00010101'
		и Владелец.Покупатель 
		и ВидДоговора = перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		и ВедениеВзаиморасчетов = перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам тогда
		
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БумажныеДоговоры.Период,
	|	БумажныеДоговоры.Контрагент,
	|	БумажныеДоговоры.Номер,
	
	|	БумажныеДоговоры.ДатаОкончанияДействия,
	|	БумажныеДоговоры.Состояние,
	|	БумажныеДоговоры.ЕстьДоговорПоручительства,
	|	БумажныеДоговоры.ЕстьКопииПравоустанавливающихДокументов,
	
	|	БумажныеДоговоры.ПутьКФайлуДоговора
	|ИЗ
	|	РегистрСведений.БумажныеДоговоры КАК БумажныеДоговоры
	|ГДЕ
	|	БумажныеДоговоры.Период = &Период
	|	И БумажныеДоговоры.Контрагент = &Контрагент
	|	И БумажныеДоговоры.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Контрагент", Владелец);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НЕвипМенедер = Истина; //15.07.2016  все - не вип! никому нельзя править договор контрагента (из формы!)
	
	Если Выборка.Следующий() тогда // пока только сообщения о несоответствии!!!
		//уже существует запись о бум.дог.
		
	  Если НЕвипМенедер тогда //вот так - запрещаем всем! (менять из формы!)
		Если Выборка.Состояние<>СостояниеДоговора тогда
			Сообщить("Нельзя менять 'Состояние', которое в Записи о бумажном договоре равно:"+строка(Выборка.Состояние), СтатусСообщения.Внимание);
			Отказ1 = Истина;
		КонецЕсли;	
		Если Выборка.ДатаОкончанияДействия<>ДатаОкончанияДействия тогда
			Сообщить("Нельзя менять 'Дату Окончания Действия', которая в Записи о бумажном договоре равна: "+формат(Выборка.ДатаОкончанияДействия,"ДЛФ=D; ДП='Пустая дата'"), СтатусСообщения.Внимание);
				Отказ1 = Истина;
		КонецЕсли;	
		Если Выборка.ЕстьДоговорПоручительства<>ЕстьДогорПоручительства тогда
			Сообщить("Нельзя менять флаг 'Есть Договор Поручительства', который в Записи о бумажном договоре равен: "+формат(Выборка.ЕстьДоговорПоручительства,"БЛ=Нет; БИ=Да"), СтатусСообщения.Внимание);
			Отказ1 = Истина;
		КонецЕсли;	
		Если Выборка.ЕстьКопииПравоустанавливающихДокументов<>ЕстьКопииПравоустанавливающихДокументов тогда
			Сообщить("Нельзя менять флаг 'Есть Копии Правоустанавливающих Документов', который в Записи о бумажном договоре равен: "+формат(Выборка.ЕстьКопииПравоустанавливающихДокументов,"БЛ=Нет; БИ=Да"), СтатусСообщения.Внимание);
			Отказ1 = Истина;
		КонецЕсли;	
	  КонецЕсли;
	
	Иначе	//=============== запись нового бум.договора ================
		попытка
			регСв = РегистрыСведений.БумажныеДоговоры.СоздатьМенеджерЗаписи();
			регСв.Период	=Дата;
			регСв.Номер 	=Номер;
			регСв.Контрагент=ссылка.Владелец; //17.11.2015
			регСв.ДатаОкончанияДействия = ДатаОкончанияДействия;
			
			//+++ 15.07.2016 - автоотключение пролонгирования... при установке даты окончания!
			Если ДатаОкончанияДействия <> '00010101' тогда 
				регСв.Пролонгируется = Ложь;
			КонецЕсли;	
			
			регСв.Записать();
			
			Сообщить("Автоматически создана запись о новом бумажном договоре № "+Номер+" от "+формат(Дата,"ДЛФ=D")+" по "+формат(ДатаОкончанияДействия,"ДЛФ=D; ДП=..."), СтатусСообщения.Информация);
		исключение
		//	Сообщить("У Вас недостаточно прав для записи данных о бумажном договоре!", СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЕсли;
КонецЕсли;
КонецПроцедуры


Процедура ТипДоговораПриИзменении(Элемент)
	Если ТипДоговора=Справочники.ТипыДоговоров.Факторинг тогда
		ЭлементыФормы.ДеньгиПоФакторингу.Видимость=Истина;
	Иначе
		ДеньгиПоФакторингу=ложь;
		ЭлементыФормы.ДеньгиПоФакторингу.Видимость=ложь;
	КонецЕсли;
	
	//+++ 18.02.2015
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Word.Доступность = (ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль );
	
	//+++ 10.09.2015
	Если ТипДоговора=Справочники.ТипыДоговоров.НайтиПоКоду("00001") 
		и Найти(нрег(Наименование), "предоплаты")=0 тогда
		ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00004"); // отсрочка!
		Предупреждение("Нельзя выбирать тип - Предоплата для "+Наименование, 10);
	//Лукьяненков 13.09.2017
	ИначеЕсли Найти(нрег(Наименование), "14")>0 тогда 
		ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001"); // Предоплата!
		Предупреждение("Можно указать тип только - Предоплата для "+Наименование, 10);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДействиеПечатьВорд(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Договор = ЭтотОбъект;
	Наименование1 = "Договор продажи № "+Договор.Номер+" от "+Формат(Договор.Дата,"ДФ=dd.MM.yyyy");
	НовСпр = Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию(Наименование1,Истина,,Договор);

	если НЕ (НовСпр=неопределено или НовСпр= Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка()) тогда
		
		ДвоичныеДанные = НовСпр.Хранилище.Получить();
		ИмяФайла = КаталогВременныхФайлов() + "ДоговорНаЭкспорт"+СокрЛП(Договор.Код)+".doc";
		
состояние("Идет запись договора во временный файл: "+ИмяФайла);		
		ДвоичныеДанные.Записать(ИмяФайла); //во внешний файл
		            
состояние("Идет открытие  Word-документа..."); 
		MSWord = Новый COMОбъект("Word.Application");
	    MSWord.Application.Documents.Open(ИмяФайла);
		
		Документ = MSWord.Application.Documents(MSWord.Application.Documents.Count());
		
	Предупреждение("Для записи изменений Word-документа в 1С 
					|нажмите кнопку ""Записать договор в 1С"".");
	
		MsWord.Application.Visible = 1;
		MSWord.Activate();
		
		состояние(" ");
	//ПолученныйФайл = Новый Файл(ИмяФайла);
	////этот файл в хранилище доп. информации записываем
	//НовСпр.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла), Новый СжатиеДанных());
	//НовСпр.Записать();
	Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			Текст = "ru = ""Нет word-документа для договора:
			|"+Наименование1+" 
			|Создать новый договор?"";"
			     + " en = ""Do you want to continue?""";
			Ответ = Вопрос(НСтр(Текст), Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
			    Возврат;
			КонецЕсли;
 

	////------------------ НОВЫЙ ШАБЛОН договора? ----------------------------------
		НаимОбработки = "Печать договора в Word";
		ТекСсылка=Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(НаимОбработки); 
		Если ТекСсылка.Пустая() Тогда
			сообщить("Не найден файл внешней печатной формы: "+НаимОбработки);
			возврат;
		КонецЕсли;	
	Попытка
		ИмяФайла = ПолучитьИмяВременногоФайла(); 
		//ЭтотОбъект.Наименование = "Договор продажи № "+Договор.Номер+" от "+Формат(Договор.Дата,"ДФ=dd.MM.yyyy");
		//ЭтотОбъект.Записать();
		ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
		ДвоичныеДанные.Записать(ИмяФайла); 
		ОбработкаПечатьДоговора = ВнешниеОбработки.Создать(ИмяФайла);  //,ЛОЖЬ Безопасный режим
		ОбработкаПечатьДоговора.Договор = Ссылка;
		ОбработкаПечатьДоговора.Руководитель = ПолучитьРуководителяПодразделения();
	состояние("Идет формирование договора во временный файл и запись его в хранилище 1С...");		
		ОбработкаПечатьДоговора.ПечатьДоговораВорд(истина); // с записью
		сообщить("Создан новый договор по шаблону Word. Все данные перезаполнены.", СтатусСообщения.Информация);
	состояние(" ");
	//	ОсновныеДействияФормыДействиеПечатьВорд(неопределено); // повторно уже открываем!
	Исключение
		сообщить("Ошибка: "+ОписаниеОшибки());
	КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписатьДоговор(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	Договор = ЭтотОбъект;
	
	ИмяФайла = КаталогВременныхФайлов() + "ДоговорНаЭкспорт"+СокрЛП(Договор.Код)+".doc";
	ПолученныйФайл = Новый Файл(ИмяФайла);
	
	Если НЕ ПолученныйФайл.Существует() тогда
		Предупреждение("Нет файла договора для сохранения!
		|"+ИмяФайла,30);
		возврат;
	КонецЕсли;
	
	Договор = ЭтотОбъект;
	Наименование1 = "Договор продажи № "+Договор.Номер+" от "+Формат(Договор.Дата,"ДФ=dd.MM.yyyy");
	НовСпрСсылка = Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию(Наименование1,Истина,,Договор);
	
	//если в Хранилище ничего нет - создаём запись в Хранилище
	Если (НовСпрСсылка=неопределено или НовСпрСсылка=Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка()) тогда
	НовСпр = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	НовСпр.Объект = Договор.Ссылка;
	НовСпр.ВидДанных = Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл;
	НовСпр.ИмяФайла  = ПолученныйФайл.Имя;
	НовСпр.Наименование = Наименование1;//может меняться!!!
	Иначе
	НовСпр = НовСпрСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НовСпр.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолученныйФайл.ПолноеИмя), Новый СжатиеДанных());  //обновляем хранилище!
    НовСпр.Записать();

КонецПроцедуры

Процедура ОсновныеДействияФормыУдалитьДоговор(Кнопка)
	Договор = ЭтотОбъект;
	Наименование1 = "Договор продажи № "+Договор.Номер+" от "+Формат(Договор.Дата,"ДФ=dd.MM.yyyy");
	НовСпрСсылка = Справочники.ХранилищеДополнительнойИнформации.НайтиПоНаименованию(Наименование1,Истина,,Договор);
	
	если (НовСпрСсылка=неопределено или НовСпрСсылка= Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка()) тогда
		Предупреждение("Нет word-файла в хранилище 1С: "+Наименование1, 30);
		возврат;
		
	Иначе
		Если НЕ РольДоступна("ПолныеПрава") тогда
			Предупреждение("У Вас недостаточно прав для удаления Word-документа договора!", 30);
			возврат;
		КонецЕсли;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "ru = ""Вы действительно хотите безвозвратно удалить Word-файл договора из хранилища 1С?"";"
		     + " en = ""Do you want to continue?""";
		Ответ = Вопрос(НСтр(Текст), Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
		    Возврат;
		КонецЕсли;

		
	НовСпр = НовСпрСсылка.ПолучитьОбъект();
	КонецЕсли;
	двоичныеДанные = НовСпр.Хранилище.Получить(); 
	НовСпр.Хранилище = неопределено;
	НовСпр.ПометкаУдаления = истина;
	НовСпр.Записать();
    попытка
		НовСпр.Удалить();
		Предупреждение("Договор полностью удалён из Хранилища 1С!",30);
	исключение
		Предупреждение("Договор помечен на удаление! Договор остался в базе данных!",30);
	НовСпр.Хранилище = двоичныеДанные;
	НовСпр.Записать();
	КонецПопытки;	
	
КонецПроцедуры

Процедура НомерПриИзменении(Элемент)
	Если ЕстьДогорПоручительства или ЗначениеЗаполнено(СостояниеДоговора) тогда
		Предупреждение("НЕЛЬЗЯ МЕНЯТЬ НОМЕР И ДАТУ ДОКУМЕНТА
						|Если уже есть договор поручительства 
						|или установлено Состояние документа!", 60);
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыИсторияИзменения(Кнопка)
	
	формаИзменений = РегистрыСведений.ЖурналИзменений.ПолучитьФормуСписка();
	формаИзменений.Отбор.Объект.ВидСравнения = ВидСравнения.Равно;
	формаИзменений.Отбор.Объект.Значение = Ссылка;
	формаИзменений.Отбор.Объект.Использование = Истина;
	//блокируем изменение отбора по документу
	формаИзменений.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Объект.Доступность = Ложь;
	Состояние("Идет формирование истории изменений...");
	формаИзменений.Открыть();
	Состояние("");

КонецПроцедуры

Процедура ДействияФормыКредитныйДоговор(Кнопка)
	// Вставить содержимое обработчика.
	Форма = ПолучитьФорму("КредитныйДоговор");
	Форма.СправочникОбъект = ЭтотОбъект;
	Форма.ОткрытьМодально();
КонецПроцедуры

Процедура СостояниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	форма = справочники.СостояниеДокументов.ПолучитьФормуВыбора();
	форма.СправочникСписок.Отбор.ДляКонтрагента.Использование = Истина;
	форма.СправочникСписок.Отбор.ДляКонтрагента.ВидСравнения = видСравнения.Равно;
	форма.СправочникСписок.Отбор.ДляКонтрагента.Значение = Истина;
	СостояниеДоговора = форма.ОткрытьМодально();

КонецПроцедуры

Процедура СостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ СостояниеДокументов.Ссылка
		|ИЗ Справочник.СостояниеДокументов КАК СостояниеДокументов
		|ГДЕ СостояниеДокументов.ДляКонтрагента";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Список= Новый СписокЗначений;
	Массив = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	Список.ЗагрузитьЗначения(Массив);
	
	ВыбранныйЭлемент = ВыбратьИзСписка(Список,Элементыформы.Состояние);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Элемент.Значение = ВыбранныйЭлемент.Значение;
	КонецЕсли;


КонецПроцедуры

//+++ 13.11.2015 - поиск или создание записи в рег.Св.БумажныеДоговора
Процедура ПослеЗаписи()
	
	справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	//***2018.10.05 Задача № 55833
	//при создании договора предоплата или отсрочка закрывать договоры предоплаты по счетам
	Если (ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001") ИЛИ ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00004"))
		И (ДатаОкончанияДействия > ТекущаяДата() ИЛИ ДатаОкончанияДействия = Дата(1,1,1))		
		И Найти(Наименование, "*") = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПредоплатаПоСчетам", Справочники.ТипыДоговоров.ПредоплатаПоСчетам);
		Запрос.УстановитьПараметр("ДатаСозданияДоговора", ДатаСозданияДоговора);
		Запрос.УстановитьПараметр("Формула", Справочники.НаправленияПродаж.НайтиПоКоду("34"));
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |ГДЕ
		               |	ДоговорыКонтрагентов.ТипДоговора = &ПредоплатаПоСчетам
		               |	И (ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ ДоговорыКонтрагентов.ДатаОкончанияДействия > &ДатаСозданияДоговора)
		               |	И НЕ ДоговорыКонтрагентов.ОтветственноеЛицо.НаправлениеПродаж = &Формула
		               |	И ДоговорыКонтрагентов.Владелец = &Владелец";
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ДоговорОбъект = Результат.Ссылка.ПолучитьОбъект();
			ДоговорОбъект.ДатаОкончанияДействия = КонецДня(ТекущаяДата());
			ДоговорОбъект.Комментарий = ДоговорОбъект.Комментарий + " Закрыт автоматически (есть действующий договор предопл/отср)";
			ДоговорОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
Процедура ОбновитьСвойства()

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	//НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("90013"); // Справочник "Договоры контрагентов"
	Если НЕ ОбработкаОбъектЗначенияСвойств.НазначениеСвойств.Пустая() Тогда
		//ОбработкаОбъектЗначенияСвойств.НазначениеСвойств      = НазначениеСвойства;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанель1ОбновитьВсеСвойства(Кнопка)
	
	ОбновитьСвойства();
	
КонецПроцедуры

Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

Функция ПолучитьРуководителяПодразделения()
	
	Если ЗначениеЗаполнено(ОтветственноеЛицо) 
		И ЗначениеЗаполнено(ОтветственноеЛицо.ОсновноеПодразделение) 
		И ЗначениеЗаполнено(ОтветственноеЛицо.ОсновноеПодразделение.Руководитель) Тогда
		
		Если ОтветственноеЛицо.ОсновноеПодразделение.Код = "00138" Тогда // "Обособленное подразделение Екатеринбург"
			//Рукль = Справочники.Пользователи.НайтиПоКоду("Серков");
			Рукль = Справочники.Пользователи.НайтиПоКоду("Бондаренко Е.Д. (снабжение)");
		Иначе
			Рукль = ОтветственноеЛицо.ОсновноеПодразделение.Руководитель;
		КонецЕсли;
		
	Иначе
		Рукль = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Рукль;
	
КонецФункции

Процедура ДопустимоеЧислоДнейЗадолженностиПриИзменении(Элемент)
	Если ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("00001") тогда  //Предоплата
		Если Найти(Наименование,"Отсрочка до 14 дней")>0 и  ДопустимоеЧислоДнейЗадолженности>14 и не РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
			Предупреждение("У данного договора число дней отсрочки не может быть больше 14 дней");
			ДопустимоеЧислоДнейЗадолженности = 14;
		иначеЕсли Найти(Наименование,"Отсрочка до 14 дней")>0 и  ДопустимоеЧислоДнейЗадолженности>14 и РольДоступна("ПравоЗавершенияРаботыПользователей")	тогда //ИТ - можно
			Предупреждение("У данного договора не рекомендуется ставить число дней отсрочки больше 14 дней");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОтветственноеЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВидДоговора) Тогда
		
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			СтандартнаяОбработка = Ложь;
			ФормаВыбора = Справочники.Пользователи.ПолучитьФормуВыбора();
			
			ТЗРазрешенных = ПолучитьСписокМенеджеровИРуководителей();
			СписокРазрешенных = Новый СписокЗначений;
			Для каждого СтрТЗ ИЗ ТЗРазрешенных Цикл
				СписокРазрешенных.Добавить(СтрТЗ.Ссылка);
			КонецЦикла;
			
			ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение = СписокРазрешенных;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
			
			ФормаВыбора.Открыть();
			
		КонецЕсли;
	Иначе
		Сообщить("Не заполнен Вид договора");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

ЗаполнитьСписокВыбораВидаДоговора();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
