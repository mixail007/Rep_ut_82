
Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем текФамилия;
Перем текИмя;
Перем текОтчество;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура оповещает владельца об изменениях,
// реализовано для оповещения формы контрагента, и обновления отображения телефонов контактного лица.
//
Процедура ОбновитьВладельца()

	Если ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе("ОбновлениеКонтактнойИнформации");
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью закладки События панели ПанельФормы.
// 
Процедура ВидимостьЗакладкиСобытия()

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда
		ЭлементыФормы.ПанельФормы.Страницы.События.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельФормы.Страницы.События.Видимость   = Истина;
		ЭлементыФормы.ПанельФормы.Страницы.События.Доступность = НЕ ЭтоНовый();
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает событие ПриИзменении реквизита ВидКонтактногоЛица.
// 
Процедура ПриИзмененииВидаКонтактногоЛица()

	Если ЗначениеНеЗаполнено(ВидКонтактногоЛица) Тогда
		ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
	КонецЕсли;
	
	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		Если ТипЗнч(ОбъектВладелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектВладелец = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли; 
	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда
		Если ОбъектВладелец <> глТекущийПользователь Тогда
			ОбъектВладелец = глТекущийПользователь;
		КонецЕсли; 
	Иначе
		Если ТипЗнч(ОбъектВладелец) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОбъектВладелец = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура управляет доступностью поля ввода ОбъектВладелец.
// 
Процедура ДоступностьОтветственного()

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		ЭлементыФормы.НадписьОбъектВладелец.Заголовок = "Контрагент:";
		ЭлементыФормы.НадписьОбъектВладелец.Доступность = Истина;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр = Ложь;
	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда
		ЭлементыФормы.НадписьОбъектВладелец.Заголовок = "Ответственный:";
		ЭлементыФормы.НадписьОбъектВладелец.Доступность = Ложь;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр = Истина;
	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо Тогда
		ЭлементыФормы.НадписьОбъектВладелец.Заголовок = "Ответственный:";
		ЭлементыФормы.НадписьОбъектВладелец.Доступность = Истина;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Процедура управляет видимостью панели данных (роль, должность).
// 
Процедура ВидимостьДопонительнойИнформации()

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		ЭлементыФормы.ПанельДопКонтрагент.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельДопКонтрагент.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает свойства ReadOnly для элементоф формы, относящихся к дате рождения контактного
// лица и напоминаниям о дне рождения
//
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
//
Процедура ДоступностьДанныхНапоминанияОДнеРождения()

	Если ДатаРождения = '00010101000000' Тогда
	
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Ложь;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = Ложь;
		ЭлементыФормы.НадписьДней.Доступность                 = Ложь;
		
	Иначе
		
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Истина;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = НапоминатьОДнеРождения;
		ЭлементыФормы.НадписьДней.Доступность                 = НапоминатьОДнеРождения;
		
	КонецЕсли; 

КонецПроцедуры

// Функция определяет номера позиций пробелов в строке реквизита Наименование
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке
//
Функция ОпределитьПозицииПробелов()

	Пробелы = Новый Массив;

	Для а = 1 По 2 Цикл
	
		Пробелы.Добавить(0);
	
	КонецЦикла; 
	
	КолПробелов = 0;
	
	Для а = 1 По СтрДлина(Наименование) Цикл
	
		Если Сред(Наименование, а, 1) = " " Тогда

			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;
		
		КонецЕсли; 

		Если КолПробелов = 2 Тогда
		
			Прервать;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Пробелы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()
	
	ВидимостьЗакладкиСобытия();
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	
	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 
	
	События.Отбор.КонтактноеЛицо.Значение                            = Ссылка;
	События.Отбор.КонтактноеЛицо.Использование                       = Истина;
	ЭлементыФормы.События.НастройкаОтбора.КонтактноеЛицо.Доступность = Ложь;
	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		События.Отбор.Контрагент.Значение                            = ОбъектВладелец;
		События.Отбор.Контрагент.Использование                       = Истина;
		ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность = Ложь;
	Иначе
		События.Отбор.Контрагент.Использование                       = Ложь;
		ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность = Истина;
	КонецЕсли; 

	текФамилия = Фамилия;
	текИмя = Имя;
	текОтчество = Отчество;
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	ДоступностьОтветственного();
	ВидимостьДопонительнойИнформации();
	ВидимостьЗакладкиСобытия();
	
	// Установим ЭУ по умолчанию
	Если ЗначениеНеЗаполнено(ВидКонтактногоЛица) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ВидКонтактногоЛица;
	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента И ЗначениеНеЗаполнено(ОбъектВладелец) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектВладелец;
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Фамилия;
	КонецЕсли; 
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
		//+++ 09.06.2016 может это уже директор...
		флВидимость = (Роль =Справочники.РолиКонтактныхЛиц.Директор);
		ЭлементыФормы.Надпись1.Видимость = флВидимость;
		ЭлементыФормы.ОснованиеДляДоговора.Видимость = флВидимость;
		
	КонецЕсли; 

	ЭлементыФормы.ОснованиеДляДоговора.СписокВыбора.Добавить("Устава");
	ЭлементыФормы.ОснованиеДляДоговора.СписокВыбора.Добавить("Приказа №");
	ЭлементыФормы.ОснованиеДляДоговора.СписокВыбора.Добавить("Доверенности № ");
	
//---------------список всех должностей----------------------------------------------	
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Директор");
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Генеральный директор");
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Управляющий директор");
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Заведующий магазином");
	
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Бухгалтер");
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Главный бухгалтер");
	
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Менеджер");
	ЭлементыФормы.Должность.СписокВыбора.Добавить("Менеджер по закупкам");

КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ)
	
	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента 
		И ЗначениеНеЗаполнено(ОбъектВладелец) Тогда
		Предупреждение("Не указан контрагент.");
		Отказ = Истина;
	КонецЕсли; 
	
//+++ обязательные поля +++
	Если СокрЛП(Фамилия)="" тогда
	Предупреждение("Не заполнена Фамилия контактного лица!", 10);
	Отказ = истина;
	КонецЕсли;	
 	Если Роль = Справочники.РолиКонтактныхЛиц.ПустаяСсылка() тогда
	Предупреждение("Не заполнена Роль контактного лица!", 10);
	Отказ = истина;
	КонецЕсли;	
	Если СокрЛП(Должность)="" тогда
	Предупреждение("Не заполнена Должность контактного лица!", 10);
	Отказ = истина;
	КонецЕсли;	
	
//+++ СРАЗУ проверяет телефон! +++	
	Если Роль = Справочники.РолиКонтактныхЛиц.Менеджер тогда
		фл = истина;
		для каждого стр1 из НаборКонтактнойИнформации цикл
			если стр1.Тип = перечисления.ТипыКонтактнойИнформации.Телефон 
				и СокрЛП(стр1.Представление)<>"" тогда
					фл = ложь;
					Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если фл тогда 
			Предупреждение("Заполните телефон контактного лица!", 10);
			Отказ = истина;
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	События.Отбор.КонтактноеЛицо.Значение                            = Ссылка;
	События.Отбор.КонтактноеЛицо.Использование                       = Истина;
	ЭлементыФормы.События.НастройкаОтбора.КонтактноеЛицо.Доступность = Ложь;
	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		События.Отбор.Контрагент.Значение                            = ОбъектВладелец;
		События.Отбор.Контрагент.Использование                       = Истина;
		ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность = Ложь;
	Иначе
		События.Отбор.Контрагент.Использование                       = Ложь;
		ЭлементыФормы.События.НастройкаОтбора.Контрагент.Доступность = Истина;
	КонецЕсли; 
	
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	Если НЕ Отказ Тогда
		ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ПриИзмененииВидаКонтактногоЛица();
	
	Если Не ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	ПрочитатьЗаполнитьКатегории();
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ДействияФормы.НаписатьПисьмо.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	НаписатьПисьмоОбъекту(Ссылка, глТекущийПользователь);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЭлектронныеПисьма.
//
Процедура ДействияФормыЭлектронныеПисьма(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Контакты.
//
Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 4;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Отменено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 5;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ТипСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		ОформлениеСтроки.Ячейки.ТипСобытия.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		ОформлениеСтроки.Ячейки.ТипСобытия.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьТекст    = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ИндексКартинки     = ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидСобытия);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы События.
//
Процедура СобытияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 

	Если Копирование Тогда
		Если Элемент.ТекущаяСтрока <> Неопределено И НЕ Элемент.ТекущаяСтрока.Пустая() Тогда
			Элемент.ТекущаяСтрока.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Для каждого ВидСобытия Из Перечисления.ВидыСобытий Цикл
			СписокВыбора.Добавить(ВидСобытия, Строка(ВидСобытия));
		КонецЦикла; 

		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
			ЗначенияПоискаВСписке = Элемент.ТекущиеДанные.ВидСобытия;
		КонецЕсли;

		НайденныйЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначенияПоискаВСписке);
		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите тип документа", НайденныйЭлементСписка);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			
			Док = Документы.Событие.СоздатьДокумент();
			
			Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
				Док.Контрагент = ОбъектВладелец;
			Иначе
				Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
			КонецЕсли; 
			
			Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Док.ВидСобытия     = ВыбранныйЭлемент.Значение;
			Док.КонтактноеЛицо = Ссылка;

			Док.ПолучитьФорму(,ЭтаФорма).Открыть();
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Очистка элемента Владелец.
//
Процедура ВладелецОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Фамилия.
//
Процедура ФамилияПриИзменении(Элемент)
	
	///////////Плотников
	Если найти(элемент.Значение,"@") > 0 
		или найти(элемент.Значение,"1") > 0 
		или найти(элемент.Значение,"2") > 0 
		или найти(элемент.Значение,"3") > 0 
		или найти(элемент.Значение,"4") > 0 
		или найти(элемент.Значение,"5") > 0 
		или найти(элемент.Значение,"6") > 0 
		или найти(элемент.Значение,"7") > 0
		или найти(элемент.Значение,"8") > 0
		или найти(элемент.Значение,"9") > 0
		или найти(элемент.Значение,"0") > 0 Тогда
		
		Сообщить("Недопустимый знак, запись невозможна!!!",СтатусСообщения.Внимание);
		Элемент.Значение = "";
		
	Иначе
		
	//ПозицииПробелов = ОпределитьПозицииПробелов();

	//Если ПозицииПробелов[0] > 0 Тогда
	//
	//	ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));
	//	
	//	Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
	//	
	//		текФамилия = СокрЛП(Элемент.Значение);
	//		//Возврат;
	//	
	//	КонецЕсли;

	//	Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);

	//Иначе

	//	Если ПустаяСтрока(Наименование) Тогда
	//		
	//		Наименование = СокрЛП(Элемент.Значение);

	//	Иначе

	//		Если СокрЛП(Наименование) = текФамилия Тогда
	//		
	//			Наименование = СокрЛП(Элемент.Значение);
	//		
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//
	//КонецЕсли;
	//
	//текФамилия = СокрЛП(Элемент.Значение);
	
	Наименование = СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество);   //Плотников +++ 13.05.2016
	
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента Имя.
//
Процедура ИмяПриИзменении(Элемент)

	///////////Плотников
	Если найти(элемент.Значение,"@") > 0 
		или найти(элемент.Значение,"1") > 0 
		или найти(элемент.Значение,"2") > 0 
		или найти(элемент.Значение,"3") > 0 
		или найти(элемент.Значение,"4") > 0 
		или найти(элемент.Значение,"5") > 0 
		или найти(элемент.Значение,"6") > 0 
		или найти(элемент.Значение,"7") > 0
		или найти(элемент.Значение,"8") > 0
		или найти(элемент.Значение,"9") > 0
		или найти(элемент.Значение,"0") > 0 Тогда
		
		Сообщить("Недопустимый знак, запись невозможна!!!",СтатусСообщения.Внимание);
		Элемент.Значение = "";
		
	Иначе
	
	//ПозицииПробелов = ОпределитьПозицииПробелов();

	//Если ПозицииПробелов[0] > 0 Тогда
	//
	//	ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));
	//	
	//	Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
	//	
	//		текФамилия = СокрЛП(Элемент.Значение);
	//		//Возврат;
	//	
	//	КонецЕсли;

	//	Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);

	//Иначе

	//	Если ПустаяСтрока(Наименование) Тогда
	//		
	//		Наименование = СокрЛП(Элемент.Значение);

	//	Иначе

	//		Если СокрЛП(Наименование) = текФамилия Тогда
	//		
	//			Наименование = СокрЛП(Элемент.Значение);
	//		
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//
	//КонецЕсли;
	//
	//текФамилия = СокрЛП(Элемент.Значение);
	
	Наименование = СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество); //Плотников +++ 13.05.2016

	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Отчество.
//
Процедура ОтчествоПриИзменении(Элемент)

	///////////Плотников
	Если найти(элемент.Значение,"@") > 0 
		или найти(элемент.Значение,"1") > 0 
		или найти(элемент.Значение,"2") > 0 
		или найти(элемент.Значение,"3") > 0 
		или найти(элемент.Значение,"4") > 0 
		или найти(элемент.Значение,"5") > 0 
		или найти(элемент.Значение,"6") > 0 
		или найти(элемент.Значение,"7") > 0
		или найти(элемент.Значение,"8") > 0
		или найти(элемент.Значение,"9") > 0
		или найти(элемент.Значение,"0") > 0 Тогда
		
		Сообщить("Недопустимый знак, запись невозможна!!!",СтатусСообщения.Внимание);
		Элемент.Значение = "";
		
	Иначе
	
	//ПозицииПробелов = ОпределитьПозицииПробелов();

	//Если ПозицииПробелов[0] > 0 Тогда
	//
	//	ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));
	//	
	//	Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
	//	
	//		текФамилия = СокрЛП(Элемент.Значение);
	//		//Возврат;
	//	
	//	КонецЕсли;

	//	Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);

	//Иначе

	//	Если ПустаяСтрока(Наименование) Тогда
	//		
	//		Наименование = СокрЛП(Элемент.Значение);

	//	Иначе

	//		Если СокрЛП(Наименование) = текФамилия Тогда
	//		
	//			Наименование = СокрЛП(Элемент.Значение);
	//		
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//
	//КонецЕсли;
	//
	//текФамилия = СокрЛП(Элемент.Значение);
	
	Наименование = СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество);   //Плотников +++ 13.05.2016

	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;

	Если НЕ ПустаяСтрока(Фамилия) Тогда
		СписокВыбора.Добавить(СокрЛП(Фамилия));
	КонецЕсли;

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "."));
	КонецЕсли; 

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли; 

	ЭлементыФормы.Наименование.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ДатаРождения.
//
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Если ДатаРождения = '00010101000000' Тогда
		НапоминатьОДнеРождения = Ложь;
	КонецЕсли; 
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента НапоминатьОДнеРождения.
//
Процедура НапоминатьОДнеРожденияПриИзменении(Элемент)
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриИзменении элемента ВидКонтактногоЛица.
//
Процедура ВидКонтактногоЛицаПриИзменении(Элемент)
	
	ПриИзмененииВидаКонтактногоЛица();
	ДоступностьОтветственного();
	ВидимостьДопонительнойИнформации();
	ВидимостьЗакладкиСобытия();
	
КонецПроцедуры

// Обработчик события Очистка элемента ВидКонтактногоЛица.
//
Процедура ВидКонтактногоЛицаОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ОбъектВладелец.
//
Процедура ОбъектВладелецПриИзменении(Элемент)
	
	ПриИзмененииВидаКонтактногоЛица();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

Процедура РольПриИзменении(Элемент)
//+++	Должность = Роль.Наименование;

//+++ 09.06.2016
	флВидимость = (Роль =Справочники.РолиКонтактныхЛиц.Директор);
	ЭлементыФормы.Надпись1.Видимость = флВидимость;
	ЭлементыФормы.ОснованиеДляДоговора.Видимость = флВидимость;

КонецПроцедуры

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
