////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	Макет = Справочники.ТорговоеОборудование.ПолучитьМакет("СписокТорговогоОборудования");

	Макет.Параметры.Расшифровка = Истина; // чтобы работала расшифровка

	ТабличныйДокумент = ЭлементыФормы.ПолеТабличногоДокумента;

	ТабличныйДокумент.Вывести(Макет);

	ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.Области.ОбластьРасшифровкиДисплей.Верх - 2;

	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку     = Ложь;
	ТабличныйДокумент.ТолькоПросмотр      = Истина;

КонецПроцедуры

// Обработчик события ОбработкаРасшифровки элемента ПолеТабличногоДокумента.
//
Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Получение значений полей выбранной строки.

	ТабличныйДокумент = ЭлементыФормы.ПолеТабличногоДокумента;
	ТекущаяОбласть    = ТабличныйДокумент.ТекущаяОбласть;

	ОбластьКодТО                   = ТабличныйДокумент.Области.КодТО;
	ОбластьВидТО                   = ТабличныйДокумент.Области.ВидТО;
	ОбластьИмяТО                   = ТабличныйДокумент.Области.ИмяТО;
	ОбластьКомпонентаТО            = ТабличныйДокумент.Области.КомпонентаТО;
	ОбластьОбработкаТО             = ТабличныйДокумент.Области.ОбработкаТО;
	ОбластьПрогИДТО                = ТабличныйДокумент.Области.ПрогИДТО;
	ОбластьДополнительныеПараметры = ТабличныйДокумент.Области.ДополнительныеПараметры;

	КодТО                   = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКодТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьКодТО.Право       ).Текст;
	ВидТО                   = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьВидТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьВидТО.Право       ).Текст;
	ИмяТО                   = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьИмяТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьИмяТО.Право       ).Текст;
	КомпонентаТО            = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьКомпонентаТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьКомпонентаТО.Право).Текст;
	ОбработкаТО             = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьОбработкаТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьОбработкаТО.Право ).Текст;
	ПрогИДТО                = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьПрогИДТО.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьПрогИДТО.Право    ).Текст;
	ДополнительныеПараметры = ТабличныйДокумент.Область(ТекущаяОбласть.Верх, ОбластьДополнительныеПараметры.Лево,
	                                                    ТекущаяОбласть.Низ, ОбластьДополнительныеПараметры.Право    ).Текст;

	Если ЗначениеНеЗаполнено(ВидТО) ИЛИ ЗначениеНеЗаполнено(ОбработкаТО) Тогда
		Возврат;
	КонецЕсли;

	// Проверка наличия выбранного ТО.

	Ссылка = Справочники.ТорговоеОборудование.НайтиПоКоду(КодТО);

	Если НЕ Ссылка.Пустая() Тогда
		Вопрос = "В справочнике ""Торговое оборудование"" уже существует элемент с кодом """ + КодТО + """! Открыть существующий?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена, );

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Ссылка.ПолучитьФорму( , ВладелецФормы, ).Открыть();
			Возврат;

		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Создание новой модели.

	ФормаНовогоЭлемента = Справочники.ТорговоеОборудование.ПолучитьФормуНовогоЭлемента(, ВладелецФормы, );

	ФормаНовогоЭлемента.Код                      = КодТО;
	ФормаНовогоЭлемента.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования[ВидТО];
	ФормаНовогоЭлемента.Наименование             = ИмяТО;
	ФормаНовогоЭлемента.ВнешняяКомпонента        = КомпонентаТО;
	ФормаНовогоЭлемента.ОбработкаОбслуживания    = Перечисления.ОбработкиТорговогоОборудования[ОбработкаТО];
	ФормаНовогоЭлемента.ПрограммныйИдентификатор = ПрогИДТО;
	Если ВидТО = "ККМOffLine" Тогда
		ОкончаниеПараметра                   = Найти(ДополнительныеПараметры, ";");
		ККМДлинаНаименованияТовара           = Лев(ДополнительныеПараметры, ОкончаниеПараметра-1);
		ККМДлинаНаименованияТовара           = ?(ККМДлинаНаименованияТовара = "", 0, Число(ККМДлинаНаименованияТовара));
		ДополнительныеПараметры              = Сред(ДополнительныеПараметры, ОкончаниеПараметра + 1);
		ОкончаниеПараметра                   = Найти(ДополнительныеПараметры, ";");
		ККМКонтролироватьЗаполнениеШтрихКода = Лев(ДополнительныеПараметры, ОкончаниеПараметра-1);
		ККМКонтролироватьЗаполнениеШтрихКода = ?(ККМКонтролироватьЗаполнениеШтрихКода = "1", Истина, Ложь);
		ДополнительныеПараметры              = Сред(ДополнительныеПараметры, ОкончаниеПараметра + 1);
		//СписокТиповШтрихкодов                = Новый СписокЗначений;
		Пока (НЕ ПустаяСтрока(ДополнительныеПараметры)
		   И НЕ ОкончаниеПараметра = 0 )Цикл
			ОкончаниеПараметра = Найти(ДополнительныеПараметры, ";");
			НаименованиеТипаШтрихкода = Лев(ДополнительныеПараметры, ОкончаниеПараметра-1);
			ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоНаименованию(НаименованиеТипаШтрихкода);
			Если Не ЗначениеНеЗаполнено(ТипШтрихкода) Тогда
				СтрокаТипаШтрихКода = ФормаНовогоЭлемента.ККМТипыШтрихКодов.Добавить();
				СтрокаТипаШтрихКода.ТипШтрихКода = ТипШтрихкода;
			КонецЕсли;
			ДополнительныеПараметры = Сред(ДополнительныеПараметры, ОкончаниеПараметра + 1);
		КонецЦикла;
		ФормаНовогоЭлемента.ККМДлинаНаименованияТовара           = ККМДлинаНаименованияТовара;
		ФормаНовогоЭлемента.ККМКонтролироватьЗаполнениеШтрихКода = ККМКонтролироватьЗаполнениеШтрихКода;
	КонецЕсли;

	ФормаНовогоЭлемента.Открыть();

КонецПроцедуры



