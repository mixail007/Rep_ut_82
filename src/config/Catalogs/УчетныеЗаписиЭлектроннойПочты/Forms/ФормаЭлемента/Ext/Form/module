
Перем мОбновлятьСписокАвтополучения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПроверитьОсновнуюУчетнуюЗаписьПользователя()

	ОснавнаяУчетнаяЗаписьПользователя = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
	Если ЗначениеНеЗаполнено(ОснавнаяУчетнаяЗаписьПользователя) Тогда
	
		ОтветНаВопрос = Вопрос("Установить данную учетную запись основной для пользователя?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.Пользователь.Использование = Истина;
		Набор.Отбор.Пользователь.Значение      = глТекущийПользователь;
		Набор.Отбор.Настройка.Использование    = Истина;
		Набор.Отбор.Настройка.Значение         = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись;
		Набор.Прочитать();
		Набор.Очистить();
		НоваяЗапись = Набор.Добавить();
		НоваяЗапись.Пользователь = глТекущийПользователь;
		НоваяЗапись.Настройка    = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяУчетнаяЗапись;
		НоваяЗапись.Значение     = Ссылка;
		
		Попытка
			Набор.Записать();
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки(),, "Учетная запись не установлена в качестве основной.");
		КонецПопытки;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автосохранения писем
//
Процедура ДоступностьАвтосохраненияПисем()

	ЭлементыФормы._ИнтервалАвтосохраненияПисем.Доступность = АвтосохранениеПисем;
	ЭлементыФормы.ИнтервалАвтосохраненияПисем_.Доступность = АвтосохранениеПисем;
	ЭлементыФормы.ИнтервалАвтосохраненияПисем.Доступность  = АвтосохранениеПисем;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автополучения/отправки писем
//
Процедура ДоступностьПараметровАвтополучения()

	ЭлементыФормы.НадписьИнтервалАвтоПолученияОтправкиСообщенийДо.Доступность      = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ИнтервалАвтоПолученияОтправкиСообщений.Доступность               = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьИнтервалАвтоПолученияОтправкиСообщенийПосле.Доступность   = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ОтветственныйЗаАвтоПолучениеОтправкуСообщений.Доступность        = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.НадписьДействиеАвтополученияОтправкиСообщений.Доступность        = АвтоПолучениеОтправкаСообщений;
	ЭлементыФормы.ДействиеАвтополученияОтправкиСообщений.Доступность               = АвтоПолучениеОтправкаСообщений;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом атентификации при доступе к SMTP серверу электронной почты
//
Процедура ДоступностьSMTPАутентификации()

	ЭлементыФормы.ПарольSMTP.Доступность = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ЛогинSMTP.Доступность  = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.Надпись19.Доступность  = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.Надпись20.Доступность  = ТребуетсяSMTPАутентификация;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом автоустановки рассмотренности писем электронной почты
//
Процедура ДоступностьИнтервалаАвтопометкиРассмотрено()

	ЭлементыФормы.ИнтервалАвтоматическойУстановкиОтметкиРассмотрено.Доступность         = АвтоматическаяУстановкаПометкиРассмотрено;
	ЭлементыФормы.НадписьИнтервалАвтоматическойУстановкиОтметкиРассмотрено.Доступность  = АвтоматическаяУстановкаПометкиРассмотрено;

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом классификации писем по предметам
//
Процедура ДоступностьПредметовПисем()
	
	ЭлементыФормы.ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма.Доступность                                        = ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет.Доступность                 = ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма.Доступность   = ИспользоватьКлассификациюПисемПоПредметам;
	ЭлементыФормы.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма.Доступность = ИспользоватьКлассификациюПисемПоПредметам;
	
КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом настройки получения/удаления писем с сервера
//
Процедура ДоступностьНастройкиПолученияПисемССервера()

	ЭлементыФормы.УдалятьПисьмаССервераЧерез.Доступность          = ОставлятьКопииСообщенийНаСервере;
	ЭлементыФормы.КоличествоДнейУдаленияПисемССервера.Доступность = УдалятьПисьмаССервераЧерез;
	ЭлементыФормы.НадписьДней.Доступность                         = УдалятьПисьмаССервераЧерез;

КонецПроцедуры

// Процедура управляет доступностью страниц панели.
//
Процедура ДоступностьСтраниц()

	ЭлементыФормы.ПанельНастройки.Страницы.ГруппыПисем.Доступность   = НЕ ЭтоНовый();
	ЭлементыФормы.ПанельНастройки.Страницы.Дополнительно.Доступность = НЕ ЭтоНовый();
	ЭлементыФормы.ПанельНастройки.Страницы.Фильтры.Доступность       = НЕ ЭтоНовый();

КонецПроцедуры

// Процедура управляет доступностью элементов управления, связанных с
// механизмом настройкой подписи электронных писем
//
Процедура ДоступностьФлажковИспользованияПодписи()
	
	ЭлементыФормы.ДобавлятьПодписьКОтветамИПересылкам.Доступность = ДобавлятьПодписьКИсходящимПисьмам;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
			Предупреждение("В настройках учета не установлено использование встроенного почтового клиента.");
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		ПортSMTP = 25;
		ПортPOP3 = 110;
		ВремяОжиданияСервера = 60;
		ФорматТекстаПисьмаПоУмолчанию = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
		ИнтервалАвтоматическойУстановкиОтметкиРассмотрено = 5;
		ИнтервалАвтосохраненияПисем = 30;
		
		Администратор = ДоступКУчетнойЗаписи.Добавить();
		Администратор.Пользователь = глТекущийПользователь;
		Администратор.Администрирование = Истина;
		Администратор.Транспорт         = Истина;
		Администратор.Отправка          = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда
		ЭлементыФормы.Подпись.УстановитьТекст(ТекстПодписи);
	КонецЕсли; 
	
	ДоступностьНастройкиПолученияПисемССервера();
	ДоступностьСтраниц();
	ДоступностьПредметовПисем();
	ДоступностьАвтосохраненияПисем();
	ДоступностьФлажковИспользованияПодписи();
	ДоступностьSMTPАутентификации();
	ДоступностьПараметровАвтополучения();
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ГруппыПисем.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	ГруппыПисем.Порядок.Установить("Порядок ВОЗР");
	
	Для каждого ЭлементНастройкиПорядка Из ЭлементыФормы.ФильтрыПисем.НастройкаПорядка Цикл
		ЭлементНастройкиПорядка.Доступность = Ложь;
	КонецЦикла;
	ФильтрыПисем.Порядок.Установить("Порядок ВОЗР");
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	ДоступностьСтраниц();
	
	Если мОбновлятьСписокАвтополучения Тогда
		глОбработкаАвтоПолученияОтправкиЭлектронныхПисем.ОбновитьСписокУчетныхЗаписей();
		мОбновлятьСписокАвтополучения = Ложь;
	КонецЕсли;
	
	Если ПолучитьДоступныеУчетныеЗаписи(глТекущийПользователь).Чтение.НайтиПоЗначению(Ссылка) <> Неопределено Тогда
		ПроверитьОсновнуюУчетнуюЗаписьПользователя();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	ТекстПодписи = ЭлементыФормы.Подпись.ПолучитьТекст();
	
	Если ЭтоНовый() Тогда
		Если АвтоПолучениеОтправкаСообщений И ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глТекущийПользователь Тогда
			мОбновлятьСписокАвтополучения = Истина;
		КонецЕсли; 
	Иначе
		Если АвтоПолучениеОтправкаСообщений <> Ссылка.АвтоПолучениеОтправкаСообщений
		 ИЛИ ИнтервалАвтоПолученияОтправкиСообщений <> Ссылка.ИнтервалАвтоПолученияОтправкиСообщений 
		 ИЛИ ДействиеАвтополученияОтправкиСообщений <> Ссылка.ДействиеАвтополученияОтправкиСообщений 
		 ИЛИ (ОтветственныйЗаАвтоПолучениеОтправкуСообщений <> Ссылка.ОтветственныйЗаАвтоПолучениеОтправкуСообщений
		    И (ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глТекущийПользователь ИЛИ Ссылка.ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глТекущийПользователь)) Тогда
			мОбновлятьСписокАвтополучения = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельГруппыПисем.ПереместитьВверх".
//
Процедура КоманднаяПанельГруппыПисемПереместитьВверх(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисем.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементыФормы.ГруппыПисем.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельГруппыПисем.ПереместитьВниз".
//
Процедура КоманднаяПанельГруппыПисемПереместитьВниз(Кнопка)
	
	Если ЭлементыФормы.ГруппыПисем.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементыФормы.ГруппыПисем.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельФильтрыПисем.ПереместитьВверх".
//
Процедура КоманднаяПанельФильтрыПисемПереместитьВверх(Кнопка)
	
	Если ЭлементыФормы.ФильтрыПисем.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементыФормы.ФильтрыПисем.ТекущиеДанные.Ссылка, "Вверх");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельФильтрыПисем.ПереместитьВниз".
//
Процедура КоманднаяПанельФильтрыПисемПереместитьВниз(Кнопка)
	
	Если ЭлементыФормы.ФильтрыПисем.ТекущиеДанные <> Неопределено Тогда
		ИзменитьПорядок(ЭлементыФормы.ФильтрыПисем.ТекущиеДанные.Ссылка, "Вниз");
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтоматическаяУстановкаПометкиРассмотрено".
//
Процедура АвтоматическаяУстановкаПометкиРассмотреноПриИзменении(Элемент)
	
	ДоступностьИнтервалаАвтопометкиРассмотрено();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ИспользоватьКлассификациюПисемПоПредметам".
//
Процедура ИспользоватьКлассификациюПисемПоПредметамПриИзменении(Элемент)
	
	Если НЕ ИспользоватьКлассификациюПисемПоПредметам Тогда
		ЗаполнятьПустойПредметДляНовыхПисемИзТемыПисьма                                        = Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет                 = Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма   = Ложь;
		ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма = Ложь;
	КонецЕсли;
	
	ДоступностьПредметовПисем();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтосохранениеПисем".
//
Процедура АвтосохранениеПисемПриИзменении(Элемент)
	
	ДоступностьАвтосохраненияПисем();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ОставлятьКопииСообщенийНаСервере".
//
Процедура ОставлятьКопииСообщенийНаСервереПриИзменении(Элемент)
	
	УдалятьПисьмаССервераЧерез = Элемент.Значение;
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "УдалятьПисьмаССервераЧерез".
//
Процедура УдалятьПисьмаССервераЧерезПриИзменении(Элемент)
	
	ДоступностьНастройкиПолученияПисемССервера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АдресЭлектроннойПочты".
//
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Элемент.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ДобавлятьПодписьКИсходящимПисьмам".
//
Процедура ДобавлятьПодписьКИсходящимПисьмамПриИзменении(Элемент)
	
	ДобавлятьПодписьКОтветамИПересылкам = Элемент.Значение;
	ДоступностьФлажковИспользованияПодписи();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "ТребуетсяSMTPАутентификация".
//
Процедура ТребуетсяSMTPАутентификацияПриИзменении(Элемент)
	
	ДоступностьSMTPАутентификации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "АвтоПолучениеОтправкаСообщений".
//
Процедура АвтоПолучениеОтправкаСообщенийПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(ОтветственныйЗаАвтоПолучениеОтправкуСообщений) Тогда
		ОтветственныйЗаАвтоПолучениеОтправкуСообщений = глТекущийПользователь;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ИнтервалАвтоПолученияОтправкиСообщений) Тогда
		ИнтервалАвтоПолученияОтправкиСообщений = 15;
	КонецЕсли; 
	
	Если ЗначениеНеЗаполнено(ДействиеАвтополученияОтправкиСообщений) Тогда
		ДействиеАвтополученияОтправкиСообщений = Перечисления.ВидыДействийАвтоПолученияОтправкиЭлектронныхПисем.ПолучениеИОтправка;
	КонецЕсли; 
	
	ДоступностьПараметровАвтополучения();
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "ГруппыПисем".
//
Процедура ГруппыПисемПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
	Иначе
		Если ЗначениеНеЗаполнено(ДанныеСтроки.Владелец) Тогда
			ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
		Иначе
			Если НЕ ЗначениеНеЗаполнено(ГруппаВходящие) И ГруппаВходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 3;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(ГруппаИсходящие) И ГруппаИсходящие = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 2;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(ГруппаУдаленные) И ГруппаУдаленные = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 0;
			ИначеЕсли НЕ ЗначениеНеЗаполнено(ГруппаЧерновики) И ГруппаЧерновики = ДанныеСтроки.Ссылка Тогда
				ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 5;
			Иначе
				Если ДанныеСтроки.ПометкаУдаления Тогда
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 4;
				Иначе
					ОформлениеСтроки.Ячейки.Наименование.ИндексКартинки = 1;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииКолонки" элемента формы "ФильтрыПисем".
//
Процедура ФильтрыПисемПриАктивизацииКолонки(Элемент)
	
	Если Элемент.ТекущаяКолонка = Элемент.Колонки.Использование Тогда
		Элемент.СпособРедактирования = СпособРедактированияСписка.ВСписке;
	Иначе
		Элемент.СпособРедактирования = СпособРедактированияСписка.ВДиалоге;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КнопкаПроверитьНастройкиУчетнойЗаписи".
//
Процедура КнопкаПроверитьНастройкиУчетнойЗаписиНажатие(Элемент)
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = POP3Сервер;
	Профиль.АдресСервераSMTP = SMTPСервер;
	Если ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = Пароль;
	Профиль.Пользователь     = Логин;
	Профиль.ПортPOP3         = ПортPOP3;
	Профиль.ПортSMTP         = ПортSMTP;
	
	Если ТребуетсяSMTPАутентификация Тогда
		Профиль.ПарольSMTP       = ПарольSMTP;
		Профиль.ПользовательSMTP = ЛогинSMTP;
	Иначе
		Профиль.ПарольSMTP       = Пароль;
		Профиль.ПользовательSMTP = Логин;
	КонецЕсли; 
	
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Проверка = ПроверитьЗаполнениеОбязательныхПолей();
		Если НЕ ЗначениеНеЗаполнено(Проверка) Тогда
			СообщитьОбОшибке("" + Проверка);
		КонецЕсли; 
		Предупреждение("Произошли ошибки при проверке настроек учетной записи.
					   |Описание ошибки приведено в окне сообщения.");
		Возврат;
	КонецПопытки;
	
	Предупреждение("Проверка подключения к почтовому серверу с заданными параметрами выполнена успешно.");
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КнопкаУдалитьПомеченныеНаУдаление".
//
Процедура КнопкаУдалитьПомеченныеНаУдалениеНажатие(Элемент)
	
	ОбработкаУдаления = Обработки.УдалениеПисемЭлектроннойПочты.Создать();
	ОбработкаУдаления.УчетнаяЗапись = Ссылка;
	ФормаПоискаДокументов = ОбработкаУдаления.ПолучитьФорму(, ЭтаФорма);
	ФормаПоискаДокументов.Заголовок = "Удаление электронных писем, учетная запись """ + Наименование + " <" + АдресЭлектроннойПочты + ">""";
	ФормаПоискаДокументов.Открыть();
	
КонецПроцедуры

Процедура ДоступКУчетнойЗаписиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Чтение.ОтображатьФлажок = Истина;
	ОформлениеСтроки.Ячейки.Чтение.Флажок = 1;
	
КонецПроцедуры

Процедура ДоступКУчетнойЗаписиПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Транспорт" И Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.Транспорт Тогда
		Элемент.ТекущиеДанные.Отправка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Сформируем список выбора возможных видов текстов электронных писем
ЭлементыФормы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.HTML);
ЭлементыФормы.ФорматТекстаПисьмаПоУмолчанию.СписокВыбора.Добавить(Перечисления.ВидыТекстовЭлектронныхПисем.Текст);

ГруппыПисем.Колонки.Добавить("Владелец", Ложь);
ГруппыПисем.Колонки.Добавить("Порядок", Ложь);

ФильтрыПисем.Колонки.Добавить("Порядок", Ложь);

мОбновлятьСписокАвтополучения = Ложь;
