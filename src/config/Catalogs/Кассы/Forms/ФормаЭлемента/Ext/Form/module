////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ПрочитатьОтветственноеЛицо();
	
	// Права доступа
	Если ЭтоНовый() Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	КонецЕсли;
	ОбслужитьТаблицуНастройкиПравДоступа();
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	ЗаписатьОтветственноеЛицо(Отказ);
	
	// Права доступа
	ОбслужитьТаблицуНастройкиПравДоступа();
	УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка")
	   И ЗначениеВыбора = "ЗаписанРодительПравДоступа" Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
		ОбслужитьТаблицуНастройкиПравДоступа();
		УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ ОГРАНИЧЕНИЯ ПРАВ ДОСТУПА

// Процедура управляет параметрами отображения таблицы настройки прав доступа.
// 
Процедура ОбслужитьТаблицуНастройкиПравДоступа()

	ОбластиДанныхДоступа.Отбор.Ссылка.Использование = Истина;
	ОбластиДанныхДоступа.Отбор.Ссылка.ВидСравнения  = ВидСравнения.Равно;
	ОбластиДанныхДоступа.Отбор.Ссылка.Значение      = Перечисления.НаборПравПользователей.Кассир;
	ЭлементыФормы.ОбластиДанныхДоступа.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока);
	УстановитьСписокПоляВыбора(Элемент.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаЭлемента());
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		ОткрытьФормуРодителяПравообладателя(Элемент.ТекущиеДанные, Родитель, ЭтаФорма);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) Тогда
		Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		Предупреждение("Запись удалить невозможно, она наследутся от родителя.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаОбластьДанных(Элемент, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, Модифицированность);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура читает данные о текущем ответсвенном лице.
//
Процедура ПрочитатьОтветственноеЛицо()

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.ОтветственноеЛицо.Значение = Неопределено;
	Иначе
		ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура записывает данные об Ответственном лице.
//
// Параметры:
//  Отказ - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьОтветственноеЛицо(Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если ЗначениеНеЗаполнено(ЭлементыФормы.ОтветственноеЛицо.Значение) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;


	МенеджерЗаписи = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             = ТекущаяДата();
	МенеджерЗаписи.СтруктурнаяЕдиница = Ссылка;
	МенеджерЗаписи.ФизическоеЛицо     = ЭлементыФормы.ОтветственноеЛицо.Значение;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

// Обработчик события пришедшего оповещения
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" 
	   И (Источник = Ссылка Или (ТипЗнч(Источник) = Тип("СправочникСсылка.Кассы") И Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

		Если ИмяОбновляемогоЭлемента = "ОтветственноеЛицо" Тогда
			ПрочитатьОтветственноеЛицо();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаОповещения()

// Обработчик события "Нажатие" конопки "История...".
//
Процедура КнопкаИсторияНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				Сообщить("Не удалось записать элемент!", СтатусСообщения.Важное);
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛица.ПолучитьФормуСписка();
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Значение = Ссылка;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.ВидСравнения = ВидСравнения.Равно;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;

		ФормаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура РодительПриИзменении(Элемент)
	
	ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	
КонецПроцедуры

ПраваДоступаПользователей = мПраваДоступаПользователей;
