
Процедура ДействияФормыРедактироватьКод(Кнопка)
	//ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Процедура ПриОткрытии()
	//МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "Эквайрер".
//
Процедура ЭквайрерПриИзменении(Элемент)

	Если ДоговорВзаиморасчетов.Владелец <> Эквайрер Тогда
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

		Если МожноИспользоватьДоговорДляДокумента(Эквайрер.ОсновнойДоговорКонтрагента, Эквайрер, Неопределено, Новый Структура("СписокДопустимыхВидовДоговоров", СЗ)) Тогда
			ДоговорВзаиморасчетов = Эквайрер.ОсновнойДоговорКонтрагента;
		Иначе
			ДоговорВзаиморасчетов = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЭквайрерПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорВзаиморасчетов".
//
Процедура ДоговорВзаиморасчетовПриИзменении(Элемент)

	Если ДоговорВзаиморасчетов.Владелец <> Эквайрер Тогда
		Эквайрер = ДоговорВзаиморасчетов.Владелец;
	КонецЕсли;

КонецПроцедуры // ДоговорВзаиморасчетовПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ВидОплаты" в ТЧ "ТарифыЗаРасчетноеОбслуживание".
//
Процедура ТарифыЗаРасчетноеОбслуживаниеВидОплатыПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ТарифыЗаРасчетноеОбслуживание.ТекущиеДанные;

	ПроверитьКорректностьВидаОплаты(ТекущаяСтрока.ВидОплаты, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);

КонецПроцедуры // ТарифыЗаРасчетноеОбслуживаниеВидОплатыПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ВидОплаты" в ТЧ "ТарифыЗаРасчетноеОбслуживание".
//
Процедура ТарифыЗаРасчетноеОбслуживаниеВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
    СписокВидовОплат = новый СписокЗначений;
	СписокВидовОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	СписокВидовОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	
	НачалоВыбораВидаОплатыЧекаККМ(Элемент, СписокВидовОплат, СтандартнаяОбработка);

КонецПроцедуры // ТарифыЗаРасчетноеОбслуживаниеВидОплатыНачалоВыбора()

Процедура ДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	ВидДоговора_Прочее  		= Новый СписокЗначений;
	ВидДоговора_Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Эквайрер, ДоговорВзаиморасчетов,
			ВидДоговора_Прочее, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПослеЗаписи()
	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Функция МожноИспользоватьДоговорДляДокумента(Договор, Контрагент, Организация, СтруктураПараметровДляПолученияДоговора) Экспорт

	Перем СписокДопустимыхВидовДоговоров, СписокДопустимыхВидовВзаиморасчетов, ВалютаВзаиморасчетовДоговора, ВидСравненияВалютыВзаиморасчетов;


	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь; // Если не передали параметры, то считаем, что нельзя использовать.
	КонецЕсли;

	Если СтруктураПараметровДляПолученияДоговора <> Неопределено Тогда
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовДоговоров", СписокДопустимыхВидовДоговоров);
		СтруктураПараметровДляПолученияДоговора.Свойство("СписокДопустимыхВидовВзаиморасчетов", СписокДопустимыхВидовВзаиморасчетов);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВалютаВзаиморасчетовДоговора", ВалютаВзаиморасчетовДоговора);
		СтруктураПараметровДляПолученияДоговора.Свойство("ВидСравненияВалютыВзаиморасчетов", ВидСравненияВалютыВзаиморасчетов);
	КонецЕсли;

	// Организация должна совпадать.
	Если ЗначениеЗаполнено(Организация)
	   И Организация <> Договор.Организация Тогда
		Возврат Ложь;
	КонецЕсли;

	// Контрагент должен совпадать, если в документе невыбран контрагент, то любой договор не подходит.
	Если Контрагент <> Договор.Владелец Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду договора.
	Если СписокДопустимыхВидовДоговоров <> Неопределено 
	   И СписокДопустимыхВидовДоговоров.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по виду взаиморасчетов.
	Если СписокДопустимыхВидовВзаиморасчетов <> Неопределено 
	   И СписокДопустимыхВидовВзаиморасчетов.НайтиПоЗначению(Договор.ВедениеВзаиморасчетов) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверка по валюте взаиморасчетов.
	Если ВалютаВзаиморасчетовДоговора <> Неопределено
	   И ВидСравненияВалютыВзаиморасчетов <> Неопределено Тогда
		Если ВидСравненияВалютыВзаиморасчетов = "=" Тогда
			Если Договор.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВидСравненияВалютыВзаиморасчетов может принимать только два значения: "=" и "<>".
			Если Договор.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовДоговора Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции // МожноИспользоватьДоговорДляДокумента()

Процедура ПроверитьКорректностьВидаОплаты(ВидОплаты, ТипОплаты) Экспорт

	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		Если ВидОплаты.ТипОплаты <> ТипОплаты Тогда
			ВидОплаты = Неопределено;
			ТекстСообщения = "В данном контексте можно выбирать только вид оплаты с типом """ + ТипОплаты + """.";
			СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьВидаОплаты()

Процедура НачалоВыбораВидаОплатыЧекаККМ(ЭлементФормы, ТипОплаты, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.ВидыОплатЧекаККМ.ПолучитьФормуВыбора(, ЭлементФормы);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ЭлементФормы.ВыборГруппИЭлементов;
	ЭлементОтбора = ФормаВыбора.СправочникСписок.Отбор.ТипОплаты;
	Если ТипЗнч(ТипОплаты) = Тип("СписокЗначений") Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение = ТипОплаты;
		ЭлементОтбора.Использование = Истина;
	Иначе
		ЭлементОтбора.Установить(ТипОплаты);
	КонецЕсли;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ТипОплаты.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораВидаОплатыЧекаККМ()



