
Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

// Хранит список видов настроек, для которых разрешен выбор группы
Перем мСписокНастроекВыбораГруппы;

Перем мЗаписыватьОсновногоОтветственного;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обновляет информацию в таблице настроек
Процедура ЗаполнитьДерево()
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	ЗначенияПоУмолчанию.Вставить(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии, Истина);
	
	ДеревоНастроек.Строки.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст="
	|Выбрать Родитель, Ссылка, ЭтоГруппа, ЗначениеНастроек.Значение Из ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|ПО ЗначениеНастроек.Настройка=Настройки.Ссылка
	|И  ЗначениеНастроек.Пользователь=&Пользователь
	|УПОРЯДОЧИТЬ По Настройки.ЭтоГруппа ИЕРАРХИЯ, Настройки.Наименование
	|";
	Запрос.УстановитьПараметр("Пользователь", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если  Не Выборка.Родитель.Пустая() Тогда
			СтрокаГруппы = ДеревоНастроек.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = ДеревоНастроек.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;
		Иначе
			СтрокаГруппы = ДеревоНастроек;
		КонецЕсли;		
		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		Если ЭтоНовый() Тогда
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(ЗначенияПоУмолчанию[Выборка.Ссылка]);
		Иначе
			СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		КонецЕсли;
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений
Процедура ОбновитьНастройки()
	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение = Ссылка;
	ЗаполнитьНаборЗаписей(ДеревоНастроек.Строки, Набор);
	Набор.Записать();
КонецПроцедуры
   
// Процедура заполняет набор записей регистра сведений значениями настроек
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Не СтрокаДерева.ЭтоГруппа Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Ссылка;
			Запись.Настройка = СтрокаДерева.Настройка;
			Запись.Значение = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
			ЕСли мЗаписыватьОсновногоОтветственного И Запись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный 
				 И Запись.Значение.Пустая() Тогда
				 Запись.Значение = Ссылка;
			КонецЕсли;
				
		Иначе
			ЗаполнитьНаборЗаписей(СтрокаДерева.Строки, НаборЗаписей)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
              
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ДействияФормыПеречитать Формы.
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	// Контактная информация
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения Формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии Формы.
//
Процедура ПриОткрытии()
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	
	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 
	
	мЗаписыватьОсновногоОтветственного = ЭтоНовый();
	
	// Права доступа
	Если ЭтоНовый() Тогда
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
	КонецЕсли;
	
	ОбслужитьТаблицуНастройкиПравДоступа();
	
	Если ПолучитьСписокНабораПрав(Ссылка).НайтиПоЗначению(Перечисления.НаборПравПользователей.ПолныеПрава) <> Неопределено
	 ИЛИ ЭтоНовый() Тогда
		ЭлементыФормы.ПанельЗакладок.Страницы.ДоступКОбъектам.Видимость = Ложь;
	КонецЕсли; 
	
	//
    ЭлементыФормы.ДеревоНастроек.ТолькоПросмотр = Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьНастройкиПользователей");
	ЭлементыФормы.ТабГруппыНоменклатуры.ТолькоПросмотр = Не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьНастройкиПользователей");
	
	ТаблицаГруппНоменклатуры.Отбор.Пользователь.Значение = ЭтотОбъект.Ссылка;
	ТаблицаГруппНоменклатуры.Отбор.Пользователь.Использование = Истина;
	
	//Штрихкоды.Отбор.Владелец.Значение      = ЭтотОбъект.Ссылка;
	//Штрихкоды.Отбор.Владелец.Использование = Истина;

	
	УстановитьВидимостьНастройкиГруппНоменклатуры();
	
	Если РольДоступна("яштФинДиректор") ИЛИ РольДоступна("ПолныеПрава") Тогда
		ЭлементыФормы.НадписьКвалификация.Видимость = Истина;
		ЭлементыФормы.Квалификация.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьКвалификация.Видимость = Ложь;
		ЭлементыФормы.Квалификация.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Обработчик события ПриЗакрытии Формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Обработчик события ПередОткрытием для Формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
	   И НЕ ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи для Формы.
//
Процедура ПриЗаписи(Отказ)
	
	ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	
	ОбновитьНастройки();

	ЭлементыФормы.ПанельЗакладок.Страницы.ДоступКОбъектам.Видимость = (ПолучитьСписокНабораПрав(Ссылка).НайтиПоЗначению(Перечисления.НаборПравПользователей.ПолныеПрава) = Неопределено);
	
	// Права доступа
	ОбслужитьТаблицуНастройкиПравДоступа();
	
КонецПроцедуры

// Обработчик события ПослеЗаписи для Формы.
//
Процедура ПослеЗаписи()
	
	ПроверитьПодключениеОбработчикаОжидания();
	
КонецПроцедуры

// Обработчик события ПриИзмененииДанных для Формы.
Процедура ПриИзмененииДанных()
	
	ЗаполнитьДерево();
	
КонецПроцедуры

Процедура УстановитьВидимостьНастройкиГруппНоменклатуры()
	
	СтрокаДобавлятьНоменклатуру = ДеревоНастроек.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей["РазрешитьДобавлятьЭлементыНоменклатуры"], "Настройка", Истина);
	СтрокаРедактироватьНоменклатуру = ДеревоНастроек.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей["РазрешитьРедактироватьЭлементыНоменклатуры"], "Настройка", Истина);
	
	РазрешениеДобавлять = Ложь;
	РазрешениеРедактировать = Ложь;
	
	Если (СтрокаДобавлятьНоменклатуру <> Неопределено) Тогда
	
		Если СтрокаДобавлятьНоменклатуру.Значение = Истина Тогда
		
			РазрешениеДобавлять = Истина;
			
		Иначе
			
			РазрешениеДобавлять = Ложь;
		
		КонецЕсли; 	 
	
	КонецЕсли; 	
	
	Если (СтрокаРедактироватьНоменклатуру <> Неопределено) Тогда
	
		Если СтрокаРедактироватьНоменклатуру.Значение = Истина Тогда
		
			РазрешениеРедактировать = Истина;
			
		Иначе
			
			РазрешениеРедактировать = Ложь;
		
		КонецЕсли; 	 
	
	КонецЕсли; 	

	ЭлементыФормы.ПанельЗакладок.Страницы.ГруппыНоменклатуры.Видимость = РазрешениеДобавлять ИЛИ РазрешениеРедактировать;

КонецПроцедуры

Процедура ОбновитьТаблицуГруппНоменклатуры()
	
	//ЭлементыФормы.ТабГруппыНоменклатуры.
	

КонецПроцедуры
 
 

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ ПОЛЬЗОВАТЕЛЯ

// Обработчик события ПриВыводеСтроки элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Настройка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки=0
	Иначе
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки=1
	КонецЕсли;
	Если ДанныеСтроки.Настройка.ТипЗначения.СодержитТип(Тип("Булево"))
		 И ДанныеСтроки.Настройка.ТипЗначения.Типы().Количество()=1 Тогда
		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Значение.Флажок = ДанныеСтроки.Настройка.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриИзмененииФлажка(Элемент, Колонка)
	СтрокаДерева = ДеревоНастроек.Строки.Найти(Элемент.ТекущиеДанные.Настройка, "Настройка", Истина);
	СтрокаДерева.Значение = Не СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);
	ЭтаФорма.Модифицированность = Истина;
	
	УстановитьВидимостьНастройкиГруппНоменклатуры();
		
КонецПроцедуры

// Обработчик события НачалоВыбора значения настройки
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;		
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКаталогФайлов Тогда		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Каталог = Элемент.Значение;
		Диалог.Заголовок = "Укажите каталог...";
		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;
		Элемент.Значение = Диалог.Каталог;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;		
КонецПроцедуры

// Обработчик события ПриИзменении значения настройки
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА НАСТРОЕК ПРАВ ДОСТУПА

Процедура ОбновитьПраваДоступа(Кнопка)
	УстановитьИзменяемыеПараметрыСеансаПользователя();
	УстановитьПараметрГраницыЗапретаИзмененияДанных();
КонецПроцедуры

// Процедура обслуживает механизм настройки прав доступа к объектам.
//
Процедура ОбслужитьТаблицуНастройкиПравДоступа()
	
	ОбластиДанныхДоступа.Отбор.Ссылка.Использование = Истина;
	ОбластиДанныхДоступа.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ОбластиДанныхДоступа.Отбор.Ссылка.Значение      = ПолучитьСписокНабораПрав(Ссылка);
	ЭлементыФормы.ОбластиДанныхДоступа.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	
КонецПроцедуры

Процедура ОбслужитьТаблицуГруппНоменклатуры()

	//ОтборНоменклатура
	//ЭлементыФормы.ТабГруппыНоменклатуры.НастройкаОтбора.Добавить(ОтборНоменклатура);	

КонецПроцедуры
 

// Обработчик события ПриВыводеСтроки элемента формы ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаОбластьДанных(Элемент, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока);
	УстановитьСписокПоляВыбора(Элемент.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаВФормеПользователя(?(Элемент.ТекущиеДанные <> Неопределено, Элемент.ТекущиеДанные.ОбъектДоступа, Неопределено)));
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента формы ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента формы ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, Модифицированность);
	
КонецПроцедуры

Процедура КоманднаяПанельПраваДоступаПользователейГруппыПользователя(Кнопка)
	
	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаГруппПользователя = ПолучитьФорму("ФормаНастройкиГруппПользователя");
	ФормаГруппПользователя.Пользователь = Ссылка;
	ФормаГруппПользователя.ОткрытьМодально();
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		ОткрытьФормуРодителяПравообладателя(Элемент.ТекущиеДанные, Родитель, ЭтаФорма);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) Тогда
		Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента ПраваДоступаПользователей.
//
Процедура ПраваДоступаПользователейПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = Перечисления.ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя Тогда
		Предупреждение("Запись удалить невозможно, она наследутся от родителя.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПраваДоступаПользователейОбъектДоступаПриИзменении(Элемент)
	
	УстановитьСписокПоляВыбора(ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления, ПолучитьСписокДоступныхДляРедактированияВидовНаследованияПравДоступаВФормеПользователя(Элемент.Значение));
	Если ЭлементыФормы.ПраваДоступаПользователей.ТекущиеДанные <> Неопределено
	   И ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.ПраваДоступаПользователей.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников) = Неопределено
	   И ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления.СписокВыбора.Количество() > 0 Тогда
		ЭлементыФормы.ПраваДоступаПользователей.ТекущиеДанные.ВидНаследованияПравДоступаИерархическихСправочников = ЭлементыФормы.ПраваДоступаПользователей.Колонки.ВидНаследованияПравДоступаИерархическихСправочников.ЭлементУправления.СписокВыбора[0].Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПраваДоступаПользователейПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭлементыФормы.ОбластиДанныхДоступа.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбрана область данных.");
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТабГруппыНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование)
	Если (ЭтоНовый()) Тогда
		Если Не ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабГруппыНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Пользователь         = ЭтотОбъект.Ссылка;
	КонецЕсли;
КонецПроцедуры

Процедура ТабГруппыНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекЗапись = Элемент.ТекущиеДанные;
	КонецЕсли;

КонецПроцедуры

Процедура ТабГруппыНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ГруппаНоменклатуры.Ссылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		
		ОформлениеСтроки.Ячейки.ГруппаНоменклатуры.Текст = "Все содержимое";
	
	КонецЕсли; 
	
КонецПроцедуры


// Чтобы избежать чтения при выводе строки, заполним признак группы сразу запросом
ДеревоНастроек.Колонки.Добавить("ЭтоГруппа");
мСписокНастроекВыбораГруппы = Новый СписокЗначений;

ПраваДоступаПользователей = мПраваДоступаПользователей;

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
