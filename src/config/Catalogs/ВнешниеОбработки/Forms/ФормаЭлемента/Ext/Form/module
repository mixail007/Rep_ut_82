
Перем мСпискиПечатныхФормОбъектов;

Перем мОбновитьФайлОбработки, мТекущаяСтрока, мПредыдущийВидОбработки;

Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(ЗначениеНеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

Процедура ПринадлежностьПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	Форма = ПолучитьФорму("ФормаВыбораПринадлежности", Элемент);
	Форма.РежимВыбора = Истина;
	Если не(ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.АлгоритмЦенообразования) Тогда 
		Форма.УжеВыбранные = СтуктураЗаполненных();
	КонецЕсли;
	мТекущаяСтрока = Неопределено;
	Если Форма.Открыта() Тогда
		Форма.СписокДокументов.Очистить();
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ПринадлежностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЕСли мТекущаяСтрока = Неопределено Тогда
		НоваяСтрока = Принадлежность.Добавить();
	Иначе
		НоваяСтрока = мТекущаяСтрока;
	КонецЕсли;			
	//НоваяСтрока.ИмяОбъектаМетаданных = ВыбранноеЗначение.ПолноеИмя();
	Если Метаданные.Документы.Содержит(ВыбранноеЗначение) Тогда
		НоваяСтрока.СсылкаОбъекта = Документы[ВыбранноеЗначение.Имя].ПустаяСсылка();
		НоваяСтрока.ПредставлениеОбъекта = "Документ """ + ?(ВыбранноеЗначение.Синоним="", ВыбранноеЗначение.Имя, ВыбранноеЗначение.Синоним)+"""";
	ИначеЕсли Метаданные.Справочники.Содержит(ВыбранноеЗначение) Тогда
		НоваяСтрока.СсылкаОбъекта = Справочники[ВыбранноеЗначение.Имя].ПустаяСсылка();
		НоваяСтрока.ПредставлениеОбъекта = "Справочник """ + ?(ВыбранноеЗначение.Синоним="", ВыбранноеЗначение.Имя, ВыбранноеЗначение.Синоним)+"""";
	КонецЕслИ;	
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПодменяемыхФорм()
	
	//ЭлементыФормы.Принадлежность.Колонки.ЗаменяемаяПечатнаяФорма.ЭлементУправления.СписокВыбора.Очистить();
	//Если ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
	//	
	//	Если ЭлементыФормы.Принадлежность.ТекущаяСтрока <> Неопределено Тогда
	//		ЭлементыФормы.Принадлежность.Колонки.ЗаменяемаяПечатнаяФорма.ЭлементУправления.СписокВыбора = ПолучитьСписокПечатныхФормОбъектов(ЭлементыФормы.Принадлежность.ТекущиеДанные.СсылкаОбъекта);
	//	КонецЕсли;

	//
	//КонецЕсли; 
КонецПроцедуры

Функция СтуктураЗаполненных(ТекущийОбъект = Неопределено)
	Результат = Новый Соответствие;
	Если ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
		Возврат Результат;
	КонецЕсли; 
	Для Каждого СтрокаПринадлежности ИЗ Принадлежность Цикл
		ЕСли ТекущийОбъект = Неопределено Тогда
			Результат.Вставить(СтрокаПринадлежности.СсылкаОбъекта.Метаданные(), Истина);
		ИначеЕсли ТекущийОбъект <> Неопределено И СтрокаПринадлежности.СсылкаОбъекта <> ТекущийОбъект Тогда
			Результат.Вставить(СтрокаПринадлежности.СсылкаОбъекта.Метаданные(), Истина);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ПередЗаписью(Отказ)	
	
	Если ВидОбработки.Пустая() Тогда
		Предупреждение("Не заполнено поле: Вид обработки");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если мОбновитьФайлОбработки Тогда
		Если ИмяФайлаВнешнейОбработки = "" Тогда
			Предупреждение("Не выбран файл внешней обработки");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаВнешнейОбработки));
		
	КонецЕсли;
	
	//Если ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда	
	//	
	//	Если НЕ ВТестировании Тогда
	//		
	//		Режим = РежимДиалогаВопрос.ДаНет;
	//		
	//		Ответ = Вопрос("Пометить данную обработку, как обработку в тестирование?", Режим, 0);
	//		
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			ВТестировании = Истина;
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ВыбратьФайл()
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Если ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
		
		ДиалогФайла.Фильтр = "Внешний отчет(*.erf)|*.erf";
		
	Иначе
		
		ДиалогФайла.Фильтр = "Внешняя обработка(*.epf)|*.epf";
		
	КонецЕсли;
	
	ВнешняяОбработка = Неопределено;

	ЕСли ДиалогФайла.Выбрать() Тогда
		ПолноеИмяФайлаОбработки = ДиалогФайла.ПолноеИмяФайла;
		Попытка
			ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайлаОбработки);
			Если ЗначениеНеЗаполнено(Наименование) Тогда
				Наименование = ВнешняяОбработка.Метаданные().Синоним;
			КонецЕсли;
		Исключение
			Предупреждение("Выбранный файл не является внешней обработкой.
						   |Либо, данная обработка не предназначена для
						   |запуска в этой конфигурации.");
			ПолноеИмяФайлаОбработки = "";
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ДиалогФайла.ПолноеИмяФайла);
	
	КомментарийКФайлуИсточнику = "Исходный файл: " + Файл.Имя + Символы.ПС + "размер:" + Файл.Размер()+"; изменен:" + Файл.ПолучитьВремяИзменения() + "; сохранен в ИБ:" + ТекущаяДата();
	
	СтруктураВозврата = Новый Структура("КомментарийКФайлуИсточнику,ПолноеИмяФайлаОбработки,ИмяФайлаОбработки,ВнешняяОбработка", КомментарийКФайлуИсточнику, ПолноеИмяФайлаОбработки, Файл.Имя, ВнешняяОбработка);
	
	Возврат СтруктураВозврата;

	
КонецФункции // ВыбратьФайл()

Процедура ВыборФайлаНажатие(Элемент)
	
	ЗначениеВозврата = ВыбратьФайл();
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяФайлаВнешнейОбработки = ЗначениеВозврата.ПолноеИмяФайлаОбработки;
	
	Если ЗначениеВозврата.ВнешняяОбработка.Метаданные().Макеты.Найти("Параметры_Авторегистрации")<>Неопределено Тогда
		Макет = ЗначениеВозврата.ВнешняяОбработка.ПолучитьМакет("Параметры_Авторегистрации");
		ТаблицаПринадлежности = Новый ТаблицаЗначений;
		ТаблицаПринадлежности.Колонки.Добавить("СсылкаОбъекта");
		ТаблицаПринадлежности.Колонки.Добавить("ТабличнаяЧастьИмя");
		Для индекс = 1 по Макет.ВысотаТаблицы Цикл
			Попытка
				ВидОбъектаСтр = Макет.Область(индекс, 1, индекс, 1).Текст;
				ИмяТЧ         = ?(ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей,Макет.Область(индекс, 2, индекс, 2).Текст,"");
				ЕСли Лев(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ".")-1) = "Документы" Тогда
					Попытка
						СсылкаНаОбъект = Документы[Сред(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ".")+1)].ПустаяСсылка();
						СтрокаТаблицыПринадлежности = ТаблицаПринадлежности.Добавить();
						СтрокаТаблицыПринадлежности.СсылкаОбъекта     = СсылкаНаОбъект;
						СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя = ИмяТЧ;
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ".")-1)  = "Справочники" Тогда
					Попытка
						СсылкаНаОбъект = Справочники[Сред(ВидОбъектаСтр, Найти(ВидОбъектаСтр, ".")+1)].ПустаяСсылка();
						СтрокаТаблицыПринадлежности = ТаблицаПринадлежности.Добавить();
						СтрокаТаблицыПринадлежности.СсылкаОбъекта     = СсылкаНаОбъект;
						СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя = ИмяТЧ;
					Исключение
					КонецПопытки;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		Если ТаблицаПринадлежности.Количество() > 0 Тогда
			Ответ = Вопрос("Указанная внешняя печатная форма содержит параметры авторегистрации. Использовать их при регистрации?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для Каждого СтрокаТаблицыПринадлежности Из ТаблицаПринадлежности Цикл
					Если Принадлежность.НайтиСтроки(Новый Структура("СсылкаОбъекта,ТабличнаяЧастьИмя", СтрокаТаблицыПринадлежности.СсылкаОбъекта, СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя)).Количество() = 0 Тогда
						НоваяСтрока = Принадлежность.Добавить();
						НоваяСтрока.СсылкаОбъекта = СтрокаТаблицыПринадлежности.СсылкаОбъекта;
						МетаданныеОбъекта = СтрокаТаблицыПринадлежности.СсылкаОбъекта.Метаданные();
						Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
							НоваяСтрока.ПредставлениеОбъекта = "Документ """ + ?(МетаданныеОбъекта.Синоним = "", МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним) + """";
						ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
							НоваяСтрока.ПредставлениеОбъекта = "Справочник """ + ?(МетаданныеОбъекта.Синоним = "", МетаданныеОбъекта.Имя, МетаданныеОбъекта.Синоним) + """";
						КонецЕсли;
						НоваяСтрока.ТабличнаяЧастьИмя = СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя;
						НайденнаяТЧ = МетаданныеОбъекта.ТабличныеЧасти.Найти(СтрокаТаблицыПринадлежности.ТабличнаяЧастьИмя);
						Если НайденнаяТЧ = Неопределено Тогда
							НоваяСтрока.ТабличнаяЧастьПредставление = НоваяСтрока.ТабличнаяЧастьИмя;
						Иначе
							НоваяСтрока.ТабличнаяЧастьПредставление = НайденнаяТЧ.Синоним;
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕСли;
	
	КомментарийКФайлуИсточнику = ЗначениеВозврата.КомментарийКФайлуИсточнику;
	ответственный = ПараметрыСеанса.ТекущийПользователь; 
	мОбновитьФайлОбработки = Истина;
	
КонецПроцедуры

Процедура ПриОткрытии()	
	Если ЭтоНовый() Тогда
		КомментарийКФайлуИсточнику = "Укажите файл внешней обработки";		
		мОбновитьФайлОбработки = Истина;
	КонецЕсли;
	//ЭлементыФормы.ВидОбработки.Доступность = ВидОбработки.Пустая();
	//мПредыдущийВидОбработки = ВидОбработки;
	//ЭлементыФормы.ВидОбработки.Значение = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	ЭлементыФормы.ВидОбработки.Доступность = Истина;
	ОбновитьДоступностьИЗаголовок();
	ОбслужитьТаблицуНастройкиПравДоступа();
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

Процедура ОбновитьДоступностьИЗаголовок()
		Заголовок = "Регистрация внешней обработки";
КонецПроцедуры // () 

Процедура ВидОбработкиПриИзменении(Элемент)
	ОбновитьДоступностьИЗаголовок();
КонецПроцедуры


Функция СтуктураЗаполненныхТЧ(ТекущиеДанные)
	Массив = Принадлежность.НайтиСтроки(Новый Структура("СсылкаОбъекта",ТекущиеДанные.СсылкаОбъекта));
	Результат = Новый Соответствие;
	Для Каждого СтрокаПринадлежности ИЗ Массив Цикл
		Если Не СтрокаПринадлежности = ТекущиеДанные Тогда
			Результат.Вставить(СтрокаПринадлежности.ТабличнаяЧастьИмя, Истина);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ПринадлежностьТабличнаяЧастьНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.Принадлежность.ТекущиеДанные;
	Форма = ПолучитьФорму("ФормаВыбораТЧПринадлежности", ЭлементыФормы.Принадлежность);
	Форма.РежимВыбора = Истина;
	Если  ТекущиеДанные.СсылкаОбъекта  = Неопределено Тогда
		Предупреждение("Не выбрана принадлежность к объекту");
		Возврат;
	КонецЕсли; 
	Форма.СсылкаОбъекта = ТекущиеДанные.СсылкаОбъекта;
	Форма.УжеВыбранные  = СтуктураЗаполненныхТЧ(ТекущиеДанные);
	мТекущаяСтрока = ЭлементыФормы.Принадлежность.ТекущиеДанные;
	Если Форма.Открыта() Тогда
		Форма.СписокТабличныхЧастей.Очистить();
	КонецЕсли;
	Форма.Открыть();
КонецПроцедуры

Процедура СохранитьВнешнийФайлНажатие(Элемент)
	
	ДвоичныеДанные = ХранилищеВнешнейОбработки.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		Предупреждение("Внешний файл отсутствует в хранилище"); 
		Возврат;
	КонецЕсли; 
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Если ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
		ДиалогФайла.Фильтр = "Внешний отчет(*.erf)|*.erf";
	Иначе
		ДиалогФайла.Фильтр = "Внешняя обработка(*.epf)|*.epf";
	КонецЕсли;
	
	ДвоичныеДанные = ХранилищеВнешнейОбработки.Получить();
	Если ДвоичныеДанные = Неопределено Тогда
		Предупреждение("Внешний файл отсутствует в хранилище"); 
		Возврат;
	КонецЕсли; 
	
	ДиалогФайла.ПолноеИмяФайла = Наименование;
	Если ДиалогФайла.Выбрать() Тогда
		ИмяФайла = ДиалогФайла.ПолноеИмяФайла;
		Попытка
			ДвоичныеДанные.Записать(ИмяФайла);
		Исключение
			Предупреждение("Внешний файл не сохранен
			|"+ОписаниеОшибки()); 
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПраваДоступаПользователейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиПраваДоступа(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ОбластиДанныхДоступаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборНаОбластьДанных(Элемент, ЭлементыФормы.ПраваДоступаПользователей);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
		Если ЗначениеВыбора = "ЗаписанРодительПравДоступа" Тогда
			ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(ПраваДоступаПользователей, Родитель, Ссылка);
			ОбслужитьТаблицуНастройкиПравДоступа();
			УстановитьОтборНаОбластьДанных(ЭлементыФормы.ОбластиДанныхДоступа, ЭлементыФормы.ПраваДоступаПользователей);
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура управляет параметрами отображения таблицы настройки прав доступа.
// 
Процедура ОбслужитьТаблицуНастройкиПравДоступа()

	СписокОтбора = Новый СписокЗначений;
	//СписокОтбора.Добавить(Перечисления.НаборПравПользователей.Бухгалтер);
	//СписокОтбора.Добавить(Перечисления.НаборПравПользователей.ГлавныйБухгалтер);
	ОбластиДанныхДоступа.Отбор.Ссылка.Использование = Истина;
	ОбластиДанныхДоступа.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ОбластиДанныхДоступа.Отбор.Ссылка.Значение      = СписокОтбора;
	//ЭлементыФормы.ОбластиДанныхДоступа.НастройкаОтбора.Ссылка.Доступность = Ложь;
	
	//ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Значение = Перечисления.НаборПравПользователей.ПустаяСсылка();
	//ЭлементыФормы.ПраваДоступаПользователей.ОтборСтрок.ОбластьДанных.Использование = Истина;
	//ЭлементыФормы.ПраваДоступаПользователей.НастройкаОтбораСтрок.ОбластьДанных.Доступность = Ложь;
	
КонецПроцедуры

// Обработчик события Перетаскивание элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПеретаскиваниеВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, ПраваДоступаПользователей, Модифицированность);
	
КонецПроцедуры

// Обработчик события ПроверкаПеретаскивания элемента ОбластиДанныхДоступа.
//
Процедура ОбластиДанныхДоступаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ПроверкаПеретаскиванияВНовуюОбластьДанных(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка);
	
КонецПроцедуры

Процедура РедактироватьДополнительныеУсловия()

	Если ЭлементыФормы.Принадлежность.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементыФормы.Принадлежность.ТекущиеДанные.СсылкаОбъекта)) Тогда
		МетаданныеОбъекта = ЭлементыФормы.Принадлежность.ТекущиеДанные.СсылкаОбъекта.Метаданные();
		ИмяТаблицы     = "Документ." + МетаданныеОбъекта.Имя;
		СинонимТаблицы = МетаданныеОбъекта.Синоним;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементыФормы.Принадлежность.ТекущиеДанные.СсылкаОбъекта)) Тогда
		МетаданныеОбъекта = ЭлементыФормы.Принадлежность.ТекущиеДанные.СсылкаОбъекта.Метаданные();
		ИмяТаблицы     = "Справочник." + МетаданныеОбъекта.Имя;
		СинонимТаблицы = МетаданныеОбъекта.Синоним;
	Иначе
		Сообщить("Указан неверный тип объекта в текущей строке или объект не выбран!");
		Возврат;
	КонецЕсли;
	
	ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы);
	
	ЗначениеХранилища = ЭлементыФормы.Принадлежность.ТекущиеДанные.НастройкиПостроителяДляОтбора.Получить();
	Если ТипЗнч(ЗначениеХранилища) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета.УстановитьНастройки(ЗначениеХранилища, Истина, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройкиПостроителя");
	ФормаНастройки.Построитель = ПостроительОтчета;
	ЗначениеВозврата = ФормаНастройки.ОткрытьМодально();
	
	Если ЗначениеВозврата <> Неопределено Тогда
		Если ТипЗнч(ЗначениеВозврата) = Тип("ПостроительОтчета") Тогда
			ЭлементыФормы.Принадлежность.ТекущиеДанные.НастройкиПостроителяДляОтбора = Новый ХранилищеЗначения(ЗначениеВозврата.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
			ЭлементыФормы.Принадлежность.ТекущиеДанные.ПредставлениеОтбораПостроителя = Строка(ЗначениеВозврата.Отбор);
		Иначе
			ЭлементыФормы.Принадлежность.ТекущиеДанные.НастройкиПостроителяДляОтбора = Новый ХранилищеЗначения(Неопределено);
			ЭлементыФормы.Принадлежность.ТекущиеДанные.ПредставлениеОтбораПостроителя = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПринадлежностьИмяФайлаПечатнойФормыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеВозврата = ВыбратьФайл();
	
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ЗначениеВозврата.ИмяФайлаОбработки + " (" + КомментарийКФайлуИсточнику + ")";
	ЭлементыФормы.Принадлежность.ТекущиеДанные.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеВозврата.ПолноеИмяФайлаОбработки));
	
КонецПроцедуры

Процедура ПринадлежностьИмяФайлаПечатнойФормыОчистка(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы.Принадлежность.ТекущиеДанные.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Неопределено);
	
КонецПроцедуры

Процедура ПринадлежностьПредставлениеОтбораПостроителяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РедактироватьДополнительныеУсловия();
	
КонецПроцедуры

Процедура ПринадлежностьПредставлениеОтбораПостроителяОчистка(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы.Принадлежность.ТекущиеДанные.НастройкиПостроителяДляОтбора = Новый ХранилищеЗначения(Неопределено);
	
КонецПроцедуры

Процедура ПринадлежностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьСписокВыбораПодменяемыхФорм();
	
КонецПроцедуры

Процедура ПринадлежностьПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого Оформление Из ОформленияСтрок Цикл
		Если Оформление.ДанныеСтроки.СсылкаОбъекта <> Неопределено И ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
			СписокВыбора = ПолучитьСписокПечатныхФормОбъектов(Оформление.ДанныеСтроки.СсылкаОбъекта);
			НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(Оформление.ДанныеСтроки.ЗаменяемаяПечатнаяФорма);
			Если НайденныйЭлемент <> Неопределено Тогда
				Оформление.Ячейки.ЗаменяемаяПечатнаяФорма.УстановитьТекст(НайденныйЭлемент.Представление);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСписокПечатныхФормОбъектов(ОбъектСсылка)

	СписокФорм = мСпискиПечатныхФормОбъектов.Получить(ОбъектСсылка);
	
	Если ТипЗнч(СписокФорм) = Тип("СписокЗначений") Тогда
		Возврат СписокФорм.Скопировать();
	Иначе
		СписокФорм = Новый СписокЗначений;
	КонецЕсли; 
	
	Объект = Неопределено;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		Объект = Документы[ОбъектСсылка.Метаданные().Имя].СоздатьДокумент();
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		Объект = Справочники[ОбъектСсылка.Метаданные().Имя].СоздатьЭлемент();
	КонецЕсли; 
	
	Если Объект <> Неопределено Тогда
		
		Попытка
			СтруктураПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм();
		Исключение
			Возврат СписокФорм;
		КонецПопытки;
		
		Для каждого КлючИЗначение Из СтруктураПечатныхФорм Цикл
			СписокФорм.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		мСпискиПечатныхФормОбъектов.Вставить(ОбъектСсылка, СписокФорм);
		
	КонецЕсли;
	
	Возврат СписокФорм;
	
КонецФункции // ()

Процедура ПриЗаписи(Отказ)

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеВнешнихОбработок") Тогда
	
		Предупреждение("Вам не разрешено редактировать внешние обработки!", 5);
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПраваДоступаПользователейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УстановитьЗначенияДляНовойСтрокиПравДоступа(Элемент, НоваяСтрока);
КонецПроцедуры

Процедура ПраваДоступаПользователейПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПраваДоступаПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПринадлежностьСсылкаОбъектаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
		
КонецПроцедуры

Процедура ПарольНажатие(Элемент)
	
	ФормаПароля = ПолучитьФорму("ФормаВводаПароля");
	
	Пароль = "";
	
	ТекстЗаголовка = "";
	
	Если НЕ ЗначениеНеЗаполнено(ПарольДляОткрытия) Тогда
		
		Если Вопрос("Данная обработка уже имеет пароль, хотите его сменить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			
			ТекстЗаголовка = "Введите старый пароль для " + Наименование;
			
			ФормаПароля.ЗаголовокНадписи = ТекстЗаголовка;
			
			Пароль = ФормаПароля.ОткрытьМодально();
			
			Если Пароль <> ПарольДляОткрытия Тогда
				
				Предупреждение("Внимание! Введен неверный пароль!
				| Необходимо ввести правильный пароль!", 5);
				
				Возврат;
				
			КонецЕсли; 
			
		Иначе 
			
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли;
			
	ТекстЗаголовка = "Введите" + ?(СтрДлина(ТекстЗаголовка) > 0," новый","") + " пароль для " + Наименование;
	
	ФормаПароля.ЗаголовокНадписи = ТекстЗаголовка;
	
	Пароль = ФормаПароля.ОткрытьМодально();
	
	Если (Пароль <> "") И
		 (Пароль <> Неопределено) Тогда
	     	
		ПарольДляОткрытия = Пароль;
	
	КонецЕсли; 
		
КонецПроцедуры

Процедура КоманднаяПанель1ДобавитьВсехПользователей(Кнопка)
	
	Если Разрешения.Количество() > 0 Тогда
		
		Если Вопрос("Перед заполнением очистить список всех Пользователей?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да  Тогда
			
			Разрешения.Очистить();
					
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОсновноеПодразделение = справочники.Подразделения.ПустаяСсылка();
	Если не ВвестиЗначение(ОсновноеПодразделение,"Введите подразделение") тогда
		Предупреждение("Не выбрано подразделение, список не изменен!",30);
		Возврат;
	КонецЕсли;	
			
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Ссылка.Код КАК ИмяПользователя
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ЭтоГруппа
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Заблокирован
	|	И Пользователи.ОсновноеПодразделение = &ОсновноеПодразделение";	
	Запрос.УстановитьПараметр("ОсновноеПодразделение", ОсновноеПодразделение);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Выборка.ИмяПользователя));
		Исключение
			НайденныйПользователь = Неопределено;
		КонецПопытки; 
		
		
		Если НайденныйПользователь <> Неопределено Тогда
			Если НайденныйПользователь.ПоказыватьВСпискеВыбора Тогда
				СтрокаРазрешений = Разрешения.Добавить();
				СтрокаРазрешений.Пользователь = Выборка.Пользователь;
			КонецЕсли;
		КонецЕсли; 
	
	КонецЦикла; 
		
	
КонецПроцедуры

мОбновитьФайлОбработки = Ложь;

мСпискиПечатныхФормОбъектов = Новый Соответствие;