Перем мСписокОбработокПользователя;
Перем мСписокНеотображаемыхРодителей;
Перем мРазрешениеРедактирования;

Процедура ЗаполнитьСписокРазрешенныхОбработок(Пользователь)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеОбработкиРазрешения.Ссылка
	|ИЗ
	|	Справочник.ВнешниеОбработки.Разрешения КАК ВнешниеОбработкиРазрешения
	|ГДЕ
	|	(ВнешниеОбработкиРазрешения.Пользователь = &Пользователь
	|			ИЛИ Выбор когда &ТолькоСвои тогда Ложь иначе
	|               ВнешниеОбработкиРазрешения.Ссылка.РазрешенДляВсехПользователейЯрославля
	|				И &ПодразделениеПользователяЯрославль
	|				И ВнешниеОбработкиРазрешения.Ссылка.ЭтоГруппа = ЛОЖЬ конец) 
	//|                   "+
	//
	//?(ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.Код = "00009", " ", "	И НЕ ВнешниеОбработкиРазрешения.Ссылка В ИЕРАРХИИ (&ССылка) ")
	//+"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗапросСПустымиПользователями.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВнешниеОбработки.Ссылка КАК Ссылка,
	|		ЕСТЬNULL(КОЛИЧЕСТВО(ВнешниеОбработкиРазрешения.Пользователь), 0) КАК КоличествоПользователей
	|	ИЗ
	|		Справочник.ВнешниеОбработки.Разрешения КАК ВнешниеОбработкиРазрешения
	|			ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|			ПО ВнешниеОбработкиРазрешения.Ссылка = ВнешниеОбработки.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВнешниеОбработки.Ссылка) КАК ЗапросСПустымиПользователями
	|ГДЕ
	|	ЗапросСПустымиПользователями.КоличествоПользователей = &Кол
	|	И ЗапросСПустымиПользователями.Ссылка.ЭтоГруппа = ЛОЖЬ
	|	И &ТолькоСвои = ЛОЖЬ "+
	
	?(ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.Код = "00009", "", "	И НЕ ЗапросСПустымиПользователями.Ссылка В ИЕРАРХИИ (&ССылка)")+"";
	
	//+++( 26.03.2012 - если УчетТолькоПоПодразделениюПользователя - то недоступны отчеты без ограничений
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		и НЕ РольДоступна("ПолныеПрава") тогда
		Запрос.УстановитьПараметр("Кол", 999);  //внешние отчеты без ограничений НЕДОСТУПНЫ !
	иначе
		Запрос.УстановитьПараметр("Кол", 0); //доступны все отчеты без ограничений для Ярославских менеджеров
	КонецЕсли;
	
	//+++ 02.06.2014 - отдельный флаг для всех пользователей Ярославля (не удаленных и не заблокированных!)	
	// справочники.Подразделения.НайтиПоКоду("00005") - нельзя делать, так как есть еще бухгалтерия, фин, юр и прочие подразделения
	ПодразделениеПользователяЯрославль = (  ( ?(ЗначениеЗаполнено(глТекущийПользователь.ОсновноеПодразделение),
													(глТекущийПользователь.ОсновноеПодразделение.ПрефиксИБ="") 
													   или (глТекущийПользователь.ОсновноеПодразделение.ПрефиксИБ="ТК")	//+++ 14.10.2014
													   или (глТекущийПользователь.ОсновноеПодразделение.ПрефиксИБ="00"), ЛОЖЬ)
											или РольДоступна("ПолныеПрава") )
										И  НЕ глТекущийПользователь.Заблокирован И НЕ глТекущийПользователь.ПометкаУдаления);
	Запрос.УстановитьПараметр("ПодразделениеПользователяЯрославль", ПодразделениеПользователяЯрославль);					
	//+++)
	
	Если ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение.Код <> "00009" Тогда 
		Запрос.УстановитьПараметр("ССылка", Справочники.ВнешниеОбработки.НайтиПоКоду("603"));	
	КонецЕсли;	
	
		
	
	 Запрос.УстановитьПараметр("ТолькоСвои", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОграниченныйИнтерфейс") = Истина  или РольДоступна("ТолькоПросмотрНоменклатура"));
	
	//Если не РольДоступна() Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"99 = 99","НЕ ВнешниеОбработкиРазрешения.Ссылка В ИЕРАРХИИ (&Неиспользуемые)");
	//	Запрос.УстановитьПараметр("ССылка", Справочники.ВнешниеОбработки.НайтиПоКоду("603"));	
	//
	//конецЕсли;
	мСписокОбработокПользователя = Запрос.Выполнить().Выгрузить();
	
	//ЗаполнитьCписокНеОтображаемыхРодителей();
	
КонецПроцедуры

Процедура СправочникСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Если Не ЭтоГруппа Тогда
		ВидОбработкиЗначение = Отбор.ВидОбработки.Значение;
		Форма = Справочники.ВнешниеОбработки.ПолучитьФормуНовогоЭлемента(,ЭтаФорма,ВидОбработкиЗначение);
		Форма.ВидОбработки = ВидОбработкиЗначение;
		Форма.Открыть();
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
 Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		
		ЭтоОбработка = ?(ВыбраннаяСтрока.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка, Истина, Ложь);
		ЭтоОтчет = ?(ВыбраннаяСтрока.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет, Истина, Ложь);
		
		Если НЕ (ЭтоОбработка ИЛИ ЭтоОтчет) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если ВыбраннаяСтрока.Разрешения.Количество() > 0 Тогда
			
			Если ВыбраннаяСтрока.Разрешения.Найти(глТекущийПользователь, "Пользователь") = Неопределено Тогда
				
				//+++( 02.06.2014
				ПодразделениеПользователяЯрославль = (  ( ?(ЗначениеЗаполнено(глТекущийПользователь.ОсновноеПодразделение),
													(глТекущийПользователь.ОсновноеПодразделение.ПрефиксИБ="") 
													   или (глТекущийПользователь.ОсновноеПодразделение.ПрефиксИБ="00"), ЛОЖЬ)
											или РольДоступна("ПолныеПрава") )
										И  НЕ глТекущийПользователь.Заблокирован И НЕ глТекущийПользователь.ПометкаУдаления);

				Если не ПодразделениеПользователяЯрославль тогда
				//+++)		
					Предупреждение("Вам не разрешено открывать данную обработку!", 5);
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если СтрДлина(ВыбраннаяСтрока.ПарольДляОткрытия) > 0 Тогда
			
			ФормаПароля = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаВводаПароля");
			ФормаПароля.ЗаголовокНадписи = "Введите пароль для открытия обработки";
			ФормаПароля.Заголовок = "Ввод пароля";
			
			Пароль = ФормаПароля.ОткрытьМодально();
			
			Если (Пароль = "")
				ИЛИ (Пароль = Неопределено) Тогда 
				
				Отказ = Истина;
				Возврат;
				
			ИначеЕсли (Пароль <> ВыбраннаяСтрока.ПарольДляОткрытия) Тогда
				
				Предупреждение("Для открытия обработки необходимо ввести правильный пароль!");
				Отказ = Истина;
				Возврат;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ВыбраннаяСтрока.ВТестировании Тогда
			
			Предупреждение("Внимание! Данный отчет находится в тестировании, и результаты" + Символы.ПС +
			"правильности отображаемых данных отчетом не были подтверждены!", 5);
			
		КонецЕсли;	
		
		Попытка
			
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ВыбраннаяСтрока.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			
			Если ЭтоОбработка Тогда
				
				Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
				
			Иначе
				
				Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
				
			КонецЕсли;
			
			Если Не Форма = Неопределено Тогда
				
				Форма.Открыть();
				
			Иначе
				
				Если ЭтоОбработка Тогда
					ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
				Иначе
					ВнешнийОтчет = ВнешниеОтчеты.Создать(ИмяФайла);
				КонецЕсли;
				
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайла);
			
		Исключение
			
			Если ЭтоОбработка Тогда
				
				Предупреждение("Выбранный файл не является внешней обработкой.
							   |Либо, данная обработка не предназначена для
							   |запуска в этой конфигурации.");
			Иначе
				Предупреждение("Выбранный файл не является внешним отчетом.
							   |Либо, данный отчет не предназначена для
							   |запуска в этой конфигурации.");
			КонецЕсли;
			
		КонецПопытки;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

	


Функция ПолучитьРодителейОбработок()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|ГДЕ
	|	ВнешниеОбработки.ЭтоГруппа = ИСТИНА";
	
	СписокРодителей = Новый СписокЗначений;
	СписокРодителей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокРодителей;
	
КонецФункции // ()
 
Процедура ЗаполнитьCписокНеОтображаемыхРодителей()
	
	СписокРодителей = ПолучитьРодителейОбработок();
	мСписокНеотображаемыхРодителей.Очистить();
	
	Для каждого СтрокаДоступных Из мСписокОбработокПользователя Цикл
		
		Если НЕ (СписокРодителей.НайтиПоЗначению(СтрокаДоступных.Ссылка.Родитель) = Неопределено) Тогда
			
			СписокРодителей.Удалить(СписокРодителей.НайтиПоЗначению(СтрокаДоступных.Ссылка.Родитель));
			
		КонецЕсли; 
		
	КонецЦикла;
	
	мСписокНеОтображаемыхРодителей = СписокРодителей.Скопировать();

КонецПроцедуры


Функция ПолучитьСписокВсехОбработок()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешниеОбработки.Ссылка
	|ИЗ
	|	Справочник.ВнешниеОбработки КАК ВнешниеОбработки";
	
	СписокОбработок = Новый СписокЗначений;
	МассивОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокОбработок.ЗагрузитьЗначения(МассивОбработок);
	
	Возврат  СписокОбработок;
	

КонецФункции // ()
 

Процедура УстановитьОтборСписка()
	
	Если НЕ мРазрешениеРедактирования Тогда
		
		МассивОтображаемыхОбработок = мСписокОбработокПользователя.ВыгрузитьКолонку("Ссылка");
		
		Если СправочникСписок.Отбор.Найти("Ссылка") = Неопределено Тогда 
			СправочникСписок.Отбор.Добавить("Ссылка");
		КонецЕсли;
		
		СписокОтображаемыхОбработок = Новый СписокЗначений;
		СписокОтображаемыхОбработок.ЗагрузитьЗначения(МассивОтображаемыхОбработок);
		
		СписокНеОтображаемых = Новый СписокЗначений;
		СписокНеОтображаемых.Очистить();
		
		СписокВсехОбработок = ПолучитьСписокВсехОбработок();
		
		Для каждого СтрокаСписка Из СписокВсехОбработок Цикл
		
			Если НЕ (СписокОтображаемыхОбработок.НайтиПоЗначению(СтрокаСписка.Значение) = Неопределено) Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если НЕ (мСписокНеотображаемыхРодителей.НайтиПоЗначению(СтрокаСписка.Значение) = Неопределено) Тогда
			
				Продолжить;
			
			КонецЕсли; 

			СписокНеОтображаемых.Добавить(СтрокаСписка.Значение);
		
		КонецЦикла; 
		
		
		СправочникСписок.Отбор["Ссылка"].Использование = Истина;
		СправочникСписок.Отбор["Ссылка"].ВидСравнения = ВидСравнения.НеВСписке;
		СправочникСписок.Отбор["Ссылка"].Значение = СписокНеОтображаемых; //СписокОтображаемыхОбработок;
		
		ЭлементыФормы.СправочникСписок.НастройкаОтбора["Ссылка"].Доступность = Ложь;
		конецЕсли;	
	
КонецПроцедуры

Процедура ПриОткрытии()
	//Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОграниченныйИнтерфейс") = Истина  или РольДоступна("ТолькоПросмотрНоменклатура")   Тогда
	//	Закрыть();
	//	возврат;
	//конецЕсли;	
	
	мРазрешениеРедактирования = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеВнешнихОбработок");
	
	ЗаполнитьСписокРазрешенныхОбработок(глТекущийПользователь);
	
	УстановитьОтборСписка();
	
	Если Отбор.ВидОбработки.Использование Тогда
		Если Отбор.ВидОбработки.Значение = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
			Заголовок = "Внешние печатные формы";
		ИначеЕсли Отбор.ВидОбработки.Значение = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
			Заголовок = "Внешние обработки заполнения табличных частей";
		ИначеЕсли Отбор.ВидОбработки.Значение = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
			Заголовок = "Внешние обработки";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка.ЭтоГруппа Тогда
		
		Если НЕ мРазрешениеРедактирования Тогда
			
			Если НЕ (мСписокНеотображаемыхРодителей.НайтиПоЗначению(ДанныеСтроки.Ссылка) = Неопределено) Тогда
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;	
				
			КонецЕсли;
			
		КонецЕсли; 
		
		
		Возврат;
		
	КонецЕсли; 
	
	Если СтрДлина(ДанныеСтроки.Ссылка.ПарольДляОткрытия) > 0 Тогда
		
		ОформлениеСтроки.Ячейки.ПР.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПР.ИндексКартинки     = 0;
		
	Иначе
		
		ОформлениеСтроки.Ячейки.ПР.ОтображатьКартинку = Ложь;
	
	КонецЕсли;
	
	Если ТипЗнч(мСписокОбработокПользователя) = Тип("ТаблицаЗначений") Тогда
		
		Если мСписокОбработокПользователя.Найти(ДанныеСтроки.Ссылка, "Ссылка") = Неопределено Тогда
			
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СправочникСписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьСписокРазрешенныхОбработок(глТекущийПользователь);
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура СправочникСписокОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	ЗаполнитьСписокРазрешенныхОбработок(глТекущийПользователь);
	УстановитьОтборСписка();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

мСписокНеОтображаемыхРодителей = Новый СписокЗначений;
