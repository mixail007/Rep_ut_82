
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура получает данные об объектах рассылки, принадлежащих определенной
// группе рассылки
// 
// Параемтры:
//  СсылкаЗаполнения - СправочникСсылка.ГруппыПочтовойРассылки, для которой производится поиск объектов
//  
Процедура ЗаполнитьДеревоИзРегистра(СсылкаЗаполнения)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГруппаРассылки" , СсылкаЗаполнения);
	Запрос.УстановитьПараметр("ТекПользователь", глТекущийПользователь);
	
	// Такой сложный запрос, чтобы отсеять неразрешенные записи
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СоставГруппРассылкиЭлектроннойПочты.Объект КАК Объект
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки КАК Объект
	|	ИЗ
	|		РегистрСведений.СоставГруппРассылкиЭлектроннойПочты КАК СоставГруппРассылкиЭлектроннойПочты
	|	ГДЕ
	|		НЕ СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки ССЫЛКА Справочник.КонтактныеЛица
	|		И
	|		СоставГруппРассылкиЭлектроннойПочты.ГруппаРассылки = &ГруппаРассылки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки КАК Объект
	|	ИЗ
	|		РегистрСведений.СоставГруппРассылкиЭлектроннойПочты КАК СоставГруппРассылкиЭлектроннойПочты
	|	СОЕДИНЕНИЕ
	|		Справочник.КонтактныеЛица КАК КонтактныеЛица
	|	ПО
	|		КонтактныеЛица.Ссылка = СоставГруппРассылкиЭлектроннойПочты.ОбъектРассылки
	|		И
	|		СоставГруппРассылкиЭлектроннойПочты.ГруппаРассылки = &ГруппаРассылки
	|	) КАК СоставГруппРассылкиЭлектроннойПочты
	|";
	
	ЗаполнитьДеревоСостава(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

// Процедура заполняет дерево значений СоставГруппыРассылки данными из регистра.
//
// Параметры
//  ТаблицаОбъектов - ТаблицаЗначений, объекты рассылки
//
Процедура ЗаполнитьДеревоСостава(ТаблицаОбъектов)

	Для каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
	
		СтрокаДерева = СоставГруппыРассылки.Строки.Найти(ТипЗнч(СтрокаТаблицы.Объект), "ТипОбъекта");
		
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.Объект = СтрокаТаблицы.Объект;
		Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.КонтактныеЛица") И НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.Объект.ОбъектВладелец) Тогда
			НоваяСтрока.Владелец = СтрокаТаблицы.Объект.ОбъектВладелец;
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

// Процедура записывает состав группы рассылки в регистр сведений.
//
// Параметры
//  Отказ - Булево, отказ от записи регистра
//
Процедура ЗаписатьСоставГруппы(Отказ)

	НаборЗаписей = РегистрыСведений.СоставГруппРассылкиЭлектроннойПочты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаРассылки.Значение      = Ссылка;
	НаборЗаписей.Отбор.ГруппаРассылки.Использование = Истина;
	
	Для каждого Строка1 Из СоставГруппыРассылки.Строки Цикл
		ЗаписанныеОбъекты = Новый Соответствие;
		Для каждого Строка2 Из Строка1.Строки Цикл
			Если ЗаписанныеОбъекты.Получить(Строка2.Объект) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ГруппаРассылки = Ссылка;
			НоваяЗапись.ОбъектРассылки = Строка2.Объект;
			ЗаписанныеОбъекты.Вставить(Строка2.Объект, Строка2.Объект);
		КонецЦикла; 
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

// Процедура записывает состав состав учетных записей, для которых
//  действует данная группа рассылки в регистр сведений.
//
// Параметры
//  Отказ - Булево, отказ от записи регистра
//
Процедура ЗаписатьСоставУчетныхЗаписей(Отказ)

	НаборЗаписей = РегистрыСведений.ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаРассылки.Значение      = Ссылка;
	НаборЗаписей.Отбор.ГруппаРассылки.Использование = Истина;
	
	Для каждого СтрокаТаблицы Из УчетныеЗаписи Цикл
		Если СтрокаТаблицы.Использование Тогда
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ГруппаРассылки = Ссылка;
			НоваяЗапись.УчетнаяЗапись  = СтрокаТаблицы.УчетнаяЗапись;
		
		КонецЕсли; 
	КонецЦикла;

	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры

// Процедура собирает данные из регистра сведений и справочника о доступных
// учетных записях, для которых можно формировать состав данной группы рассылки.
//
// Параметры
//  ЭлементСсылка - ГруппаРассылки, для которой определяются учетные записи
//
Процедура ЗаполнитьУчетныеЗаписи(ЭлементСсылка)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекОтветственный", Ответственный);
	Запрос.УстановитьПараметр("ЭлементСсылка"   , ЭлементСсылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись,
	|	ВЫБОР КОГДА ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.ГруппаРассылки ЕСТЬ NULL ТОГДА Ложь ИНАЧЕ Истина КОНЕЦ КАК Использование
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты КАК ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты
	|	ПО
	|		ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		И
	|		ГруппыРассылкиУчетныхЗаписейЭлектроннойПочты.ГруппаРассылки = &ЭлементСсылка
	|
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи.Пользователь = &ТекОтветственный
	|	И
	|	УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи.Администрирование = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка.Наименование
	|";
	
	УчетныеЗаписи.Очистить();
	
	УчетныеЗаписи = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		Ответственный = глТекущийПользователь;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		ЗаполнитьДеревоИзРегистра(Ссылка);
		ЗаполнитьУчетныеЗаписи(Ссылка);
	ИначеЕсли мКопирование И НЕ ЗначениеНеЗаполнено(мСсылкаОснование) Тогда
		ЗаполнитьДеревоИзРегистра(мСсылкаОснование);
		ЗаполнитьУчетныеЗаписи(мСсылкаОснование);
	ИначеЕсли ЭтоНовый() Тогда
		ЗаполнитьУчетныеЗаписи(Неопределено);
	КонецЕсли;
	
	СоставГруппыРассылки.Строки.Сортировать("Объект ВОЗР", Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
	ЗаписатьСоставГруппы(Отказ);
	
	Если НЕ Отказ Тогда
		ЗаписатьСоставУчетныхЗаписей(Отказ);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущийПользователь", глТекущийПользователь);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи.Пользователь = &ТекущийПользователь
		|";
		
		Если Запрос.Выполнить().Пустой() Тогда
			Предупреждение("Вы не являетесь администратором ни одной учетной записи.
						   |Группы почтовой рассылки могут создавать и редактировать только администраторы учетных записей.");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") И НЕ ЗначениеНеЗаполнено(Ссылка) Тогда
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельУчетныеЗаписи.УстановитьФлажки".
//
Процедура КоманднаяПанельУчетныеЗаписиУстановитьФлажки(Кнопка)
	
	Для каждого Строка Из УчетныеЗаписи Цикл
		Строка.Использование = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельУчетныеЗаписи.СнятьФлажки".
//
Процедура КоманднаяПанельУчетныеЗаписиСнятьФлажки(Кнопка)
	
	Для каждого Строка Из УчетныеЗаписи Цикл
		Строка.Использование = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельСоставГруппыРассылки.Подбор".
//
Процедура КоманднаяПанельСоставГруппыРассылкиПодбор(Кнопка)
	
	АдрКнига = Обработки.АдреснаяКнига.Создать();
	АдрКнига.ПодборОбъектов = Истина;
	ФормаПодбора = АдрКнига.ПолучитьФорму("ФормаПодбора");
	СтруктураВозврата = ФормаПодбора.ОткрытьМодально();
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		ЗаполнитьДеревоСостава(СтруктураВозврата.Объекты);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы "СоставГруппыРассылки".
//
Процедура СоставГруппыРассылкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Уровень() = 0 Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "СоставГруппыРассылки".
//
Процедура СоставГруппыРассылкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = (Элемент.ТекущиеДанные.Уровень() = 0);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы "СоставГруппыРассылки.Объект".
//
Процедура СоставГруппыРассылкиОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = Новый(ЭлементыФормы.СоставГруппыРассылки.ТекущиеДанные.Родитель.ТипОбъекта);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "СоставГруппыРассылки".
//
Процедура СоставГруппыРассылкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Родитель <> Неопределено И (Родитель.Уровень() = 0 ИЛИ Родитель.Уровень() = 1) Тогда
		
		Если НЕ Копирование Тогда
		
			Отказ = Истина;
	
			Если Родитель.Уровень() = 0 Тогда
				НужныйРодитель = Родитель;
			Иначе
				НужныйРодитель = Родитель.Родитель;
			КонецЕсли;
			
			ПустаяСсылка = Новый(НужныйРодитель.ТипОбъекта);
			ФормаВыбора = Справочники[ПустаяСсылка.Метаданные().Имя].ПолучитьФормуВыбора(, ЭтаФорма);
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			ЗначениеВозврата = ФормаВыбора.ОткрытьМодально();
			
			Если ТипЗнч(ЗначениеВозврата) = НужныйРодитель.ТипОбъекта Тогда
				НоваяСтрока = НужныйРодитель.Строки.Добавить();
				НоваяСтрока.Объект = ЗначениеВозврата;
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" элемента формы "СоставГруппыРассылки".
//
Процедура СоставГруппыРассылкиПередУдалением(Элемент, Отказ)
	
	Если ЭлементыФормы.СоставГруппыРассылки.ТекущиеДанные <> Неопределено И ЭлементыФормы.СоставГруппыРассылки.ТекущиеДанные.Уровень() = 0 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" элемента формы "СоставГруппыРассылки".
//
Процедура УчетныеЗаписиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "СоставГруппыРассылки".
//
Процедура УчетныеЗаписиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "СоставГруппыРассылки".
//
Процедура УчетныеЗаписиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка = Элемент.Колонки.УчетнаяЗапись И Элемент.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.УчетнаяЗапись) Тогда
		Отказ = Истина;
		Элемент.ТекущиеДанные.УчетнаяЗапись.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если ЭтоНовый() Тогда
		ЗаполнитьУчетныеЗаписи(Неопределено);
	Иначе
		ЗаполнитьУчетныеЗаписи(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

ДоступныеТипы = Метаданные.РегистрыСведений.СоставГруппРассылкиЭлектроннойПочты.Измерения.ОбъектРассылки.Тип.Типы();
СоставГруппыРассылки.Колонки.Добавить("ТипОбъекта");
Для каждого ДоступныйТип Из ДоступныеТипы Цикл
	ПустаяСсылкаТипа = Новый(ДоступныйТип);
	НоваяСтрока = СоставГруппыРассылки.Строки.Добавить();
	НоваяСтрока.Объект     = ПустаяСсылкаТипа.Метаданные().Синоним;
	НоваяСтрока.ТипОбъекта = ДоступныйТип;
КонецЦикла;
