Перем ОписаниеТиповБулево;
Перем ОписаниеТиповДата;
Перем ОписаниеТиповОтбор;

Перем ЗаменятьИмена;
Перем СтруктураТегов;
Перем СтруктураИменСистемныхРеквизитов;
Перем СтруктураИменСистемныхПолейРегистров;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ


//Вспомогательные

// Получает список планов обмена, имеющихся в конфигурации
Функция ПолучитьСписокПлановОбмена()
	
	СписокПлановОбмена = Новый СписокЗначений();
	
	Для Каждого ПланОбмена из Метаданные.ПланыОбмена Цикл		       
		МенеджерПланаОбмена = ПланыОбмена[ПланОбмена.Имя];
		СписокПлановОбмена.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);		
	КонецЦикла;	
	
	Возврат СписокПлановОбмена;
	
КонецФункции	

// Кстанавливает доступность выбора плана обмена
Процедура УстановитьДоступностьПланаОбмена()
	
	Если ИспользуетсяПланОбмена Тогда
		ЭлементыФормы.ИмяПланаОбмена.Доступность = Истина;
	Иначе	
		ИмяПланаОбмена = "";
		ЭлементыФормы.ИмяПланаОбмена.Доступность = Ложь;
	КонецЕсли;	

КонецПроцедуры

//Получает для строки дерева имя общего класса (Справочники, Документы и т.д.)
Функция ПолучитьИмяОбщегоКлассаОбъекта(СтрокаДерева)
		
	Если СтрокаДерева.Уровень() > 1 Тогда  
		Возврат ПолучитьИмяОбщегоКлассаОбъекта(СтрокаДерева.Родитель)
	ИначеЕсли СтрокаДерева.Уровень() = 1 Тогда  // ветвь общего класса (справочники, документы и т.д.)
		Возврат СтрокаДерева.Имя;
	КонецЕсли;	
	
КонецФункции

// Обрабатывает дерево метаданных, сформированное на основании XML с перечнем объектов
Процедура ОбработатьДеревоМетаданных()
			
	Если ИспользуетсяПланОбмена Тогда
		СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	Иначе	
		СоставПланаОбмена = Неопределено;
	КонецЕсли;	
	
	МетаданныеКонстант = Метаданные.Константы;
	МетаданныеСправочников = Метаданные.Справочники;
	МетаданныеДокументов = Метаданные.Документы;
	МетаданныеРегистровСведений = Метаданные.РегистрыСведений;
	
	
	ДеревоМетаданных.Колонки.Добавить("РегистрируютсяИзменения", ОписаниеТиповБулево);
	ДеревоМетаданных.Колонки.Добавить("ДопускаетУправлениеВыгрузкой", ОписаниеТиповБулево); 
	ДеревоМетаданных.Колонки.Добавить("ДопускаетФлагВыгрузки", ОписаниеТиповБулево); 
	ДеревоМетаданных.Колонки.Добавить("ФлагВыгрузки", ОписаниеТиповБулево); 
	ДеревоМетаданных.Колонки.Добавить("Выгружать", ОписаниеТиповБулево); 
	ДеревоМетаданных.Колонки.Добавить("ВыгружатьТолькоИзменения", ОписаниеТиповБулево);
	ДеревоМетаданных.Колонки.Добавить("ОчищатьДанные", ОписаниеТиповБулево);	
	ДеревоМетаданных.Колонки.Добавить("ДопускаетОчистку", ОписаниеТиповБулево);
	ДеревоМетаданных.Колонки.Добавить("ДопускаетУсловиеОтбора", ОписаниеТиповБулево);
	ДеревоМетаданных.Колонки.Добавить("ДопускаетУсловиеОчистки", ОписаниеТиповБулево);
	ДеревоМетаданных.Колонки.Добавить("УсловиеОчистки", ОписаниеТиповОтбор);
	ДеревоМетаданных.Колонки.Добавить("УсловиеОтбора", ОписаниеТиповОтбор);		
	ДеревоМетаданных.Колонки.Добавить("ОписаниеТипов");
		
	ВеткиКлассов = ДеревоМетаданных.Строки[0].Строки;
	
	Если ЗаменятьИмена Тогда		
		ДеревоМетаданных.Строки[0].Синоним = "Метаданные";
	Иначе		
		ДеревоМетаданных.Строки[0].Синоним = "Metadata";
	КонецЕсли;	
					
	ВеткаПеречислений = ВеткиКлассов.Найти("Enumerations","Имя");
	Если ВеткаПеречислений<>Неопределено Тогда
		ВеткиКлассов.Удалить(ВеткаПеречислений);
	КонецЕсли;	
	
	Синоним = "";
	
	Для Каждого ВеткаКласса из ВеткиКлассов Цикл		
		
		Если ЗаменятьИмена И СтруктураТегов.Свойство(ВеткаКласса.Имя,Синоним) Тогда
			ВеткаКласса.Синоним = Синоним;
		Иначе	
			ВеткаКласса.Синоним = ВеткаКласса.Имя;
		КонецЕсли;	
		
		ИмяКласса =  ВеткаКласса.Имя;

		ВеткаКласса.ДопускаетУправлениеВыгрузкой = Истина; 
		ВеткаКласса.ДопускаетФлагВыгрузки = Истина; 
		ВеткаКласса.ФлагВыгрузки = Истина; 
		ВеткаКласса.Выгружать = Истина; 
		
		Если ИмяКласса <> "Constants" Тогда
			ВеткаКласса.ДопускаетОчистку = Истина;
		КонецЕсли;
        		
		ВеткиОбъектов = ВеткаКласса.Строки;
		
		Для Каждого ВеткаОбъекта из ВеткиОбъектов Цикл
						
			Если ИмяКласса = "Constants" Тогда				
				МетаданныеОбъекта = МетаданныеКонстант[ВеткаОбъекта.Имя];
				ВеткаОбъекта.Синоним = ВеткаОбъекта.Имя;
			ИначеЕсли ИмяКласса = "Catalogs" Тогда				
				МетаданныеОбъекта = МетаданныеСправочников[ВеткаОбъекта.Имя];
				ОбработатьОбъект(ВеткаОбъекта, МетаданныеОбъекта, ИмяКласса);
			ИначеЕсли ИмяКласса = "Documents" Тогда				
				МетаданныеОбъекта = МетаданныеДокументов[ВеткаОбъекта.Имя];
				ОбработатьОбъект(ВеткаОбъекта, МетаданныеОбъекта, ИмяКласса);  
			ИначеЕсли ИмяКласса = "InformationRegisters" Тогда
				МетаданныеОбъекта = МетаданныеРегистровСведений[ВеткаОбъекта.Имя];
				ОбработатьВеткуРегистраСведений(ВеткаОбъекта, МетаданныеОбъекта);
			КонецЕсли;	
			
			ВеткаОбъекта.ДопускаетУправлениеВыгрузкой = Истина;
			ВеткаОбъекта.ДопускаетФлагВыгрузки = Истина; 
			ВеткаОбъекта.ФлагВыгрузки = Истина; 
			ВеткаОбъекта.Выгружать = Истина;
			
			Если ИмяКласса <> "Constants" Тогда
            	ВеткаОбъекта.ДопускаетОчистку = Истина;
			КонецЕсли;	
			
			// Для объектов, входящих в состав плана обмена, можно указать выгружать только изменения
						
			Если СоставПланаОбмена <> Неопределено Тогда
				Если СоставПланаОбмена.Найти(МетаданныеОбъекта)<>Неопределено Тогда
					ВеткаОбъекта.РегистрируютсяИзменения = Истина;
					// По умолчанию, если объект входит в состав плана обмена, предлагаем выгружать только изменения
					ВеткаОбъекта.ВыгружатьТолькоИзменения = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;		
				
	КонецЦикла;	
    	
КонецПроцедуры	

// Обрабатывает строку дерева с конкретным объектом (справочником, документом)
Процедура ОбработатьОбъект(ВеткаОбъекта, МетаданныеОбъекта, ИмяКласса)
	
	Синоним = "";
	
	ВеткаОбъекта.Синоним = ВеткаОбъекта.Имя;
	
	Для Каждого Строка из ВеткаОбъекта.Строки Цикл
		
		Если ЗаменятьИмена И СтруктураТегов.Свойство(Строка.Имя,Синоним) Тогда
			Строка.Синоним = Синоним;
		Иначе	
			Строка.Синоним = Строка.Имя;
		КонецЕсли;	
				
		Если Строка.Имя = "Attributes" Тогда
			// По реквизитам возможно задание условий отбора и очистки 	
			Для Каждого СтрокаРеквизита из Строка.Строки Цикл
				СтрокаРеквизита.ДопускаетУсловиеОтбора = Истина;
				СтрокаРеквизита.ДопускаетУсловиеОчистки = Истина;
				СтрокаРеквизита.ДопускаетФлагВыгрузки = Истина; 
				СтрокаРеквизита.ФлагВыгрузки = Истина; 

				Если ИмяКласса = "Catalogs" Тогда
					ДобавитьОписаниеТиповРеквизитаСправочника(СтрокаРеквизита, МетаданныеОбъекта);
				ИначеЕсли ИмяКласса = "Documents" Тогда	
					ДобавитьОписаниеТиповРеквизитаДокумента(СтрокаРеквизита, МетаданныеОбъекта);
				КонецЕсли;	
				ДобавитьОтборы(СтрокаРеквизита);				
			КонецЦикла;
		ИначеЕсли Строка.Имя = "TabularParts" Тогда
	        Если ЗаменятьИмена И СтруктураТегов.Свойство(Строка.Имя,Синоним) Тогда
				Строка.Синоним = Синоним;
			Иначе	
				Строка.Синоним = Строка.Имя;
			КонецЕсли;	
			
			Для Каждого ТЧ из Строка.Строки Цикл				
				ТЧ.Синоним = ТЧ.Имя;
				Для Каждого РеквизитТЧ из ТЧ.Строки Цикл
					РеквизитТЧ.Синоним = РеквизитТЧ.Имя;
				КонецЦикла;	
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
			 
КонецПроцедуры	

// Обрабатывает строку деерева с регистром сведений
Процедура ОбработатьВеткуРегистраСведений(ВеткаРегистраСведений, МетаданныеОбъекта)
	
	Синоним = "";
	ВеткаРегистраСведений.Синоним = ВеткаРегистраСведений.Имя;	
	
	Если Не МетаданныеОбъекта.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		СтрокаИзмерения = ВеткаРегистраСведений.Строки.Добавить();		
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Period", ОписаниеТиповДата);
	КонецЕсли;
    	
	ИзмеренияРегистра = МетаданныеОбъекта.Измерения;	
		
	Для Каждого Измерение из ИзмеренияРегистра Цикл
		СтрокаИзмерения = ВеткаРегистраСведений.Строки.Добавить(); 
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, Измерение.Имя, Измерение.Тип);
	КонецЦикла; 
	
КонецПроцедуры	

// Добавляет в дерево строку измерения для регистра сведений
Процедура ДобавитьСтрокуИзмерения(СтрокаИзмерения, Имя, Тип)
	
	Синоним = "";
	СтрокаИзмерения.Имя = Имя;
	
	Если ЗаменятьИмена И СтруктураИменСистемныхПолейРегистров.Свойство(Имя,Синоним) Тогда
		СтрокаИзмерения.Синоним = Синоним;		
	Иначе
		СтрокаИзмерения.Синоним = Имя;
	КонецЕсли;

	СтрокаИзмерения.ДопускаетУсловиеОтбора = Истина;
	СтрокаИзмерения.ДопускаетУсловиеОчистки = Истина;
	СтрокаИзмерения.ДопускаетФлагВыгрузки = Истина;
	СтрокаИзмерения.ФлагВыгрузки = Истина;
	
	СтрокаИзмерения.ОписаниеТипов = Тип;
	ДобавитьОтборы(СтрокаИзмерения);

КонецПроцедуры	

// Для реквизитов справочника добавляет описание типов
Процедура ДобавитьОписаниеТиповРеквизитаСправочника(СтрокаРеквизита, МетаданныеОбъекта)

	ИмяРеквизита = СтрокаРеквизита.Имя;
	Синоним="";
	
	Если ЗаменятьИмена И СтруктураИменСистемныхРеквизитов.Свойство(ИмяРеквизита,Синоним) Тогда
		СтрокаРеквизита.Синоним = Синоним;		
	Иначе
		СтрокаРеквизита.Синоним = ИмяРеквизита;
	КонецЕсли;
    	
	ТипСсылки = ТипЗнч(Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипСсылки);	
	ОписаниеТиповСсылки = Новый ОписаниеТипов(МассивТипов);
    	
	Если ИмяРеквизита = "Ref" Тогда
		
		ОписаниеТипов = ОписаниеТиповСсылки;
		
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда	
		
		ОписаниеТипов = ОписаниеТиповБулево;
		
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		
		ДлинаКода = МетаданныеОбъекта.ДлинаКода;
		Если МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
			ПараметрыСтроки = Новый КвалификаторыСтроки(ДлинаКода);
			ОписаниеТипов = Новый ОписаниеТипов("Строка",,ПараметрыСтроки);			
		Иначе
			ПараметрыЧисла = Новый КвалификаторыЧисла(ДлинаКода);
			ОписаниеТипов = Новый ОписаниеТипов("Число", ПараметрыЧисла);			
		КонецЕсли;		
		
	ИначеЕсли ИмяРеквизита = "Description" Тогда		
		
		ДлинаНаименования = МетаданныеОбъекта.ДлинаНаименования;
		ПараметрыСтроки = Новый КвалификаторыСтроки(ДлинаНаименования);
		ОписаниеТипов = Новый ОписаниеТипов("Строка",,ПараметрыСтроки);		
		
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда			
		
		ОписаниеТипов = ОписаниеТиповБулево;
		
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		
		ОписаниеТипов = ОписаниеТиповСсылки;		
		
	ИначеЕсли ИмяРеквизита = "Owner" Тогда			
		
		МассивТипов = Новый Массив();
		Для Каждого ВладелецОбъекта из МетаданныеОбъекта.Владельцы Цикл
			// ПВХ не рассматриваем
			Если Метаданные.Справочники.Содержит(ВладелецОбъекта) Тогда
				ТипСсылкиВладельца = ТипЗнч(Справочники[ВладелецОбъекта.Имя].ПустаяСсылка());
				МассивТипов.Добавить(ТипСсылкиВладельца);				
			КонецЕсли;	
		КонецЦикла;		
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
	Иначе
		
		ОписаниеТипов = МетаданныеОбъекта.Реквизиты[СтрокаРеквизита.Имя].Тип;		
		
	КонецЕсли;
	
	СтрокаРеквизита.ОписаниеТипов = ОписаниеТипов;
	
КонецПроцедуры

// Для реквизитов документа добавляет описание типов
Процедура ДобавитьОписаниеТиповРеквизитаДокумента(СтрокаРеквизита, МетаданныеОбъекта)

	ИмяРеквизита = СтрокаРеквизита.Имя;
	Синоним="";
	
	Если ЗаменятьИмена И СтруктураИменСистемныхРеквизитов.Свойство(ИмяРеквизита,Синоним) Тогда
		СтрокаРеквизита.Синоним = Синоним;		
	Иначе
		СтрокаРеквизита.Синоним = ИмяРеквизита;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипСсылки);	
	ОписаниеТиповСсылки = Новый ОписаниеТипов(МассивТипов);
	
	Если ИмяРеквизита = "Ref" Тогда
		
		ОписаниеТипов = ОписаниеТиповСсылки;
		
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		
		ОписаниеТипов = ОписаниеТиповБулево; 
		
	ИначеЕсли ИмяРеквизита = "Number" Тогда		
		
		ДлинаНомера = МетаданныеОбъекта.ДлинаНомера;
		Если МетаданныеОбъекта.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
			ПараметрыСтроки = Новый КвалификаторыСтроки(ДлинаНомера);
			ОписаниеТипов = Новый ОписаниеТипов("Строка",,ПараметрыСтроки);			
		Иначе
			ПараметрыЧисла = Новый КвалификаторыЧисла(ДлинаНомера);
			ОписаниеТипов = Новый ОписаниеТипов("Число",ПараметрыЧисла);			
		КонецЕсли;	
		
	ИначеЕсли ИмяРеквизита = "Date" Тогда		
		
		ОписаниеТипов = ОписаниеТиповДата;
		
	ИначеЕсли ИмяРеквизита = "Posted" Тогда			
		
		ОписаниеТипов = ОписаниеТиповБулево;	
		
	Иначе
		
		ОписаниеТипов = МетаданныеОбъекта.Реквизиты[СтрокаРеквизита.Имя].Тип;		
				
	КонецЕсли;
	
	СтрокаРеквизита.ОписаниеТипов = ОписаниеТипов;
	
КонецПроцедуры

// Добавялет отборы для соотв. строки дерева
Процедура ДобавитьОтборы(СтрокаДерева)
		
	ИнициализироватьОтбор(СтрокаДерева, СтрокаДерева.УсловиеОтбора);
	ИнициализироватьОтбор(СтрокаДерева, СтрокаДерева.УсловиеОчистки);	
		
КонецПроцедуры	

// Инициализирует отборы
Процедура ИнициализироватьОтбор(СтрокаДерева, Отбор)
	
	// Если что-то есть, очистим
	Пока Отбор.Количество()>0 Цикл
		Отбор.Удалить(Отбор.Количество()-1);
	КонецЦикла;	
	
	ОписаниеТипов = СтрокаДерева.ОписаниеТипов;
	ПоляНастройки = Отбор.ПолучитьДоступныеПоля();
	Поле = ПоляНастройки.Добавить(СтрокаДерева.Синоним,СтрокаДерева.Синоним, ОписаниеТипов);
	Поле.Отбор = Истина;
		
	Отбор.УстановитьДоступныеПоля(ПоляНастройки);			
	ЭлементОтбора = Отбор.Добавить(СтрокаДерева.Синоним,СтрокаДерева.Синоним);
	              	
	МассивТипов = ОписаниеТипов.Типы();
	
	Если (МассивТипов.Количество()=1) И (ОписаниеТипов.СодержитТип(Тип("Строка"))) И (ОписаниеТипов.КвалификаторыСтроки.Длина = 0) Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;	
	КонецЕсли;	
	
КонецПроцедуры	

// В зависимости от заданных условий вкл/выкл. испрользование условий отбора/очистки
Процедура ИзменитьФлагИспользованияУсловий(СтрокаДерева, ИмяКолонки)
	
	Если ИмяКолонки = "ДопускаетУсловиеОтбора" Тогда         
		ИнициализироватьОтбор(СтрокаДерева, СтрокаДерева.УсловиеОтбора);
		Возврат;
	КонецЕсли;	
	
	Если (ИмяКолонки = "ОчищатьДанные") И (СтрокаДерева.ДопускаетУсловиеОчистки) Тогда
		ИнициализироватьОтбор(СтрокаДерева, СтрокаДерева.УсловиеОчистки);
	Конецесли;
    		
	Если (ИмяКолонки = "ФлагВыгрузки") И (СтрокаДерева.ДопускаетУсловиеОтбора) Тогда 
		ИнициализироватьОтбор(СтрокаДерева, СтрокаДерева.УсловиеОтбора);
	КонецЕсли;
	
КонецПроцедуры

//Изменяет знгачение соотв. колонки в подчиненных строках
Процедура ИзменитьФлагДляПодчиненных(СтрокаДерева, ИмяКолонки)
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл		
		
		Если (ИмяКолонки = "ОчищатьДанные") И (Строка.ДопускаетОчистку) Тогда
			Строка[ИмяКолонки] = СтрокаДерева[ИмяКолонки];
		ИначеЕсли ИмяКолонки = "ФлагВыгрузки" Тогда
			Строка[ИмяКолонки] = СтрокаДерева[ИмяКолонки];
			Если Строка.ДопускаетУправлениеВыгрузкой Тогда
				Строка.Выгружать = СтрокаДерева.ФлагВыгрузки;
			КонецЕсли;			
		ИначеЕсли ИмяКолонки = "ДопускаетУсловиеОтбора" Тогда
			Если Строка.ДопускаетФлагВыгрузки Тогда
				ИзменитьФлагИспользованияУсловий(Строка, ИмяКолонки);	
			КонецЕсли;	
		КонецЕсли;	
				
		Если Не Строка[ИмяКолонки] Тогда
			
			Если ИмяКолонки = "ФлагВыгрузки" Тогда // Если флаг выгрузки сняли, то очистим условия и флаги изменений
				ИзменитьФлагИспользованияУсловий(Строка, ИмяКолонки);  
				Строка.ВыгружатьТолькоИзменения = Строка[ИмяКолонки];
			ИначеЕсли ИмяКолонки = "ОчищатьДанные" Тогда
				ИзменитьФлагИспользованияУсловий(Строка, ИмяКолонки);				
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьФлагДляПодчиненных(Строка, ИмяКолонки);
	КонецЦикла;
	
КонецПроцедуры	

// Проверяет, Содержат ли подчиненные строки установленные отборы
Функция СодержитОтбор(СтрокиДерева, СтруктураПоиска, ИмяОтбора)
	
	МассивСтрок =  СтрокиДерева.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого Строка Из МассивСтрок Цикл
		Отбор = Строка[ИмяОтбора];
		
		Для Каждого Элемент Из Отбор Цикл
			Если Элемент.Использование Тогда
				Возврат Истина;				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

// Проверяет,заданы ли в подчиненных строках условия отбора/очистки
Процедура ОпределитьНаличиеУсловий(ДанныеСтроки, ЕстьУсловияОчистки, ЕстьУсловияОтбора)
	
	СтрокиВетки = ДанныеСтроки.Строки;
	
	СтруктураПоискаПоОчистке = Новый Структура("ДопускаетУсловиеОчистки", Истина);
	СтруктураПоискаПоОтбору = Новый Структура("ДопускаетУсловиеОтбора", Истина);
	
	ЕстьУсловияОчистки = СодержитОтбор(СтрокиВетки, СтруктураПоискаПоОчистке, "УсловиеОчистки");
	ЕстьУсловияОтбора  = СодержитОтбор(СтрокиВетки, СтруктураПоискаПоОтбору, "УсловиеОтбора");	
	    	
КонецПроцедуры	

// Получает для заданной строки в дереве строку объекта (справочника, документа и т.д.)
Функция ПолучитьСтрокуОбъекта(Знач СтрокаДерева)
	
	Если СтрокаДерева.Уровень() > 2 Тогда 
		Возврат ПолучитьСтрокуОбъекта(СтрокаДерева.Родитель);
	ИначеЕсли СтрокаДерева.Уровень() = 2 Тогда  // ветвь конкретного класса (справочника, документа и т.д.)
		Возврат СтрокаДерева;
	КонецЕсли;			
		
КонецФункции

// Открывает форму отбора задания условий отбора/очистки
Процедура ОткрытьФормуОтбора(ЗаголовокФормы, Отбор, ИмяКласса="", ОграничиватьСписокВидовСравнения = Ложь)
	
	ФормаОтбора = ПолучитьФорму("ФормаОтбора");
	ФормаОтбора.Заголовок = ЗаголовокФормы;
				
	ФормаОтбора.Отбор = Отбор;
	ФормаОтбора.ОграничиватьСписокВидовСравнения = ОграничиватьСписокВидовСравнения;
	// Для регистров сведений - отборы только на равенство
	Если ИмяКласса = "InformationRegisters" Тогда
		ФормаОтбора.СравнениеТолькоНаРавенство = Истина;
	КонецЕсли;	
	
	ФормаОтбора.ОткрытьМодально();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповОтбор = Новый ОписаниеТипов("Отбор");
	
	СписокПлановОбмена = ПолучитьСписокПлановОбмена();
	ЭлементыФормы.ИмяПланаОбмена.СписокВыбора = СписокПлановОбмена;
	
	Если СписокПлановОбмена.Количество()=0 Тогда
		ИспользуетсяПланОбмена = Ложь;
		ЭлементыФормы.ИспользуетсяПланОбмена.Доступность = Ложь;
	КонецЕсли;	
		
	Если ЭтоНовый() Тогда
		ЭлементыФормы.ИмяПланаОбмена.Доступность = Ложь;
	Иначе		
		ДеревоМетаданных = ДеревоСхемы.Получить();
		
		МассивПараметровОбмена = ПараметрыОбмена.Получить();
		МассивПроизвольныхДанных = Произвольныеданные.Получить();
		
		УстановитьДоступностьПланаОбмена();		
	КонецЕсли;	
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ЗаменятьИмена = Истина;	
	Иначе
		ЗаменятьИмена = Ложь;		
	КонецЕсли;	
    	
	СтруктураТегов = Новый Структура();
	СтруктураТегов.Вставить("Metadata","Метаданные");
	СтруктураТегов.Вставить("Constants","Константы");
	СтруктураТегов.Вставить("Catalogs","Справочники");
	СтруктураТегов.Вставить("Documents","Документы");
	СтруктураТегов.Вставить("InformationRegisters","РегистрыСведений");
	СтруктураТегов.Вставить("Attributes","Реквизиты");
	СтруктураТегов.Вставить("TabularParts","ТабличныеЧасти");
		
	СтруктураИменСистемныхРеквизитов = Новый Структура();
	СтруктураИменСистемныхРеквизитов.Вставить("Ref","Ссылка");
	СтруктураИменСистемныхРеквизитов.Вставить("Code","Код");
	СтруктураИменСистемныхРеквизитов.Вставить("Description","Наименование");
	СтруктураИменСистемныхРеквизитов.Вставить("IsFolder","ЭтоГруппа");
	СтруктураИменСистемныхРеквизитов.Вставить("Owner","Владелец");
	СтруктураИменСистемныхРеквизитов.Вставить("Parent","Родитель");
	СтруктураИменСистемныхРеквизитов.Вставить("DeletionMark","ПометкаУдаления");
	СтруктураИменСистемныхРеквизитов.Вставить("Date","Дата");
	СтруктураИменСистемныхРеквизитов.Вставить("Number","Номер");
	СтруктураИменСистемныхРеквизитов.Вставить("Posted","Проведен");

	СтруктураИменСистемныхПолейРегистров = Новый Структура();
	СтруктураИменСистемныхПолейРегистров.Вставить("Period","Период");
	СтруктураИменСистемныхПолейРегистров.Вставить("Recorder","Регистратор");	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ТекстСообщения = "";
	
	Если Владелец.Пустая() Тогда
		ТекстСообщения = "Не указано мобильное приложение";
	ИначеЕсли ВерсияМобильногоПриложения.Пустая() Тогда
		ТекстСообщения = "Не указана версия мобильного приложения";
	ИначеЕсли (ИспользуетсяПланОбмена) И (ИмяПланаОбмена="") Тогда
		ТекстСообщения = "Не указан используемый план обмена";
	ИначеЕсли ДеревоМетаданных.Строки.Количество()= 0 Тогда
		ТекстСообщения = "Не определена структура схемы обмена";	
	КонецЕсли;
			
	Если ТекстСообщения<>"" Тогда
		СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;	
		
	ДеревоСхемы = Новый ХранилищеЗначения(ДеревоМетаданных);
	
	ПараметрыОбмена = Новый ХранилищеЗначения(МассивПараметровОбмена);
	ПроизвольныеДанные = Новый ХранилищеЗначения(МассивПроизвольныхДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// При изменении плана обмена
Процедура ИспользуетсяПланОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьПланаОбмена();
	
КонецПроцедуры

// При изменении владельца (приложения)
Процедура ВладелецПриИзменении(Элемент)
	
	ВерсияМобильногоПриложения = Справочники.ВерсииМобильныхПриложений.ПустаяСсылка();
	
КонецПроцедуры

//Очищать имя плана обмена не позволяем
Процедура ИмяПланаОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

 // Начальное формирование схемы обмена
Процедура КоманднаяПанельДереваМетаданныхСформироватьДеревоСхемыОбмена(Кнопка)
	
	ТекстСообщения="";
	Если Владелец.Пустая() Тогда
		ТекстСообщения = "Не указано мобильное приложение";
	ИначеЕсли ВерсияМобильногоПриложения.Пустая() Тогда
		ТекстСообщения = "Не указана версия мобильного приложения";
	ИначеЕсли (ИспользуетсяПланОбмена) И (ИмяПланаОбмена="") Тогда
		ТекстСообщения = "Не указан используемый план обмена";	
	КонецЕсли;

	Если ТекстСообщения<>"" Тогда
		СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;	
    	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("МобильноеПриложение", Владелец);
	СтруктураОтбора.Вставить("ВерсияМобильногоПриложения", ВерсияМобильногоПриложения);
		
	СтрокаИспользуемыхОбъектовМетаданных = ПолучитьПереченьИспользуемыхМетаданных(СтруктураОтбора); 
		
	СтрокаСообщенияОбОшибке = "";
	ВключатьПодчиненныеВетвиОбъектов = Истина;	
	ДеревоМетаданных = СоздатьДеревоОбъектовДляМетаданныхПодлежащихВыгрузке(СтрокаИспользуемыхОбъектовМетаданных, СтрокаСообщенияОбОшибке, ВключатьПодчиненныеВетвиОбъектов);
	
	Если ДеревоМетаданных = Неопределено Тогда
		
		Если ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
			
			СтрокаСообщенияОбОшибке = "Произошла ошибка при получении настроек обмена данными";
		КонецЕсли;
		
		// произошла какая-то ошибка при получении настроек обмена данными
		СообщитьОбОшибке(СтрокаСообщенияОбОшибке);	
		
	КонецЕсли;
	
	МассивПараметровОбмена = Новый Массив();
	МассивПроизвольныхДанных = Новый Массив();
	
	// Из полученного дерева удалим ветви параметров и произвольных данных,
	// а данные этих ветвей сохраним в отдельные массивы
	СтрокаПараметровОбмена = ДеревоМетаданных.Строки[0].Строки.Найти("DataExchangeParams","Имя");
	СтрокаПроизвольныхДанных = ДеревоМетаданных.Строки[0].Строки.Найти("PersistentDataList","Имя");
	
	Если СтрокаПараметровОбмена <> Неопределено Тогда
		ЗанестиСтрокиВМассив(СтрокаПараметровОбмена, МассивПараметровОбмена);
		ДеревоМетаданных.Строки[0].Строки.Удалить(СтрокаПараметровОбмена);
	КонецЕсли;	
	
	Если СтрокаПроизвольныхДанных <> Неопределено Тогда
		ЗанестиСтрокиВМассив(СтрокаПроизвольныхДанных, МассивПроизвольныхДанных);
		ДеревоМетаданных.Строки[0].Строки.Удалить(СтрокаПроизвольныхДанных);
	КонецЕсли;	
	
	ОбработатьДеревоМетаданных();
	ЭтаФорма.Модифицированность = Истина;
			
КонецПроцедуры

// Заносит строки ветки дерева в массив
Процедура ЗанестиСтрокиВМассив(СтрокаДерева, Массив)
	
	Для Каждого Строка из СтрокаДерева.Строки Цикл
		Массив.Добавить(Строка.Имя);
	КонецЦикла;	
	
КонецПроцедуры

// Обработка изменения/задания условий очистки/отбора
Процедура ДеревоМетаданныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ИмяКласса = ПолучитьИмяОбщегоКлассаОбъекта(Элемент.ТекущиеДанные);
		
	Если Элемент.ТекущаяКолонка.Имя = "УсловиеОчистки" Тогда
		
		ОткрытьФормуОтбора("Условие очистки таблицы данных", Элемент.ТекущиеДанные.УсловиеОчистки, ИмяКласса, Истина);
							
	ИначеЕсли Элемент.ТекущаяКолонка.Имя = "УсловиеОтбора" Тогда 	
		
		ОткрытьФормуОтбора("Условие отбора данных для обмена", Элемент.ТекущиеДанные.УсловиеОтбора, ИмяКласса);
	
	КонецЕсли;
			
КонецПроцедуры

// Обработка открытия условия очистки
Процедура ДеревоМетаданныхУсловиеОчисткиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИмяКласса = ПолучитьИмяОбщегоКлассаОбъекта(ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные);	
	ОткрытьФормуОтбора("Условие очистки таблицы данных", Элемент.Значение, ИмяКласса, Истина);		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработка открытия условия отбора
Процедура ДеревоМетаданныхУсловиеОтбораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИмяКласса = ПолучитьИмяОбщегоКлассаОбъекта(ЭлементыФормы.ДеревоМетаданных.ТекущиеДанные);	
	ОткрытьФормуОтбора("Условие отбора данных для обмена", Элемент.Значение, ИмяКласса);	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// При смене флажка в колонках дерева
Процедура ДеревоМетаданныхПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Выгружать" Тогда
		
		ФлагВыгрузки = Элемент.ТекущаяСтрока.Выгружать;
		Элемент.ТекущаяСтрока.ФлагВыгрузки = ФлагВыгрузки; 		
		
		Если Не ФлагВыгрузки Тогда
			Элемент.ТекущаяСтрока.ВыгружатьТолькоИзменения = ФлагВыгрузки;			
		КонецЕсли;
						
		ИзменитьФлагДляПодчиненных(Элемент.ТекущаяСтрока, "ФлагВыгрузки");
		
	ИначеЕсли Колонка.Имя = "ОчищатьДанные" Тогда
		
		ИзменитьФлагДляПодчиненных(Элемент.ТекущаяСтрока, "ОчищатьДанные");
		
	ИначеЕсли (Колонка.Имя = "ВыгружатьТолькоИзменения") И (Элемент.ТекущаяСтрока.ВыгружатьТолькоИзменения) Тогда
		
		ИзменитьФлагДляПодчиненных(Элемент.ТекущаяСтрока, "ДопускаетУсловиеОтбора");
		
	КонецЕсли;	

КонецПроцедуры

// При выводе строк устанавливается доступность соотв. ячеек
Процедура ДеревоМетаданныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Выгружать.ТолькоПросмотр = НЕ ДанныеСтроки.ДопускаетУправлениеВыгрузкой;
	СтрокаОбъекта = ПолучитьСтрокуОбъекта(ДанныеСтроки);
		
	Если Не ДанныеСтроки.ДопускаетОчистку Тогда 		
		// Указывать, какие данные подлежат очистке, имеет смысл только для объектов в целом
		ОформлениеСтроки.Ячейки.ОчищатьДанные.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Если данные не очищаются, то и фильтр очистки нельзя указывать
	Если (ДанныеСтроки.ДопускаетУсловиеОчистки) И (СтрокаОбъекта.ОчищатьДанные) Тогда
		ОформлениеСтроки.Ячейки.УсловиеОчистки.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.УсловиеОчистки.ТолькоПросмотр = Истина;
	КонецЕсли;	
		
	Если ДанныеСтроки.Уровень() = 2 Тогда
		
		ЕстьУсловияОчистки = Ложь;
		ЕстьУсловияОтбора = Ложь;
		
		ОпределитьНаличиеУсловий(ДанныеСтроки, ЕстьУсловияОчистки, ЕстьУсловияОтбора);
		
		Если ЕстьУсловияОчистки Тогда
			ОформлениеСтроки.Ячейки.УсловиеОчистки.УстановитьТекст("Заданы условия очистки");
		КонецЕсли;	
		
		Если ЕстьУсловияОтбора Тогда
			ОформлениеСтроки.Ячейки.УсловиеОтбора.УстановитьТекст("Заданы условия отбора");
		КонецЕсли;	
        		
	КонецЕсли;	
    	
	Если (НЕ ДанныеСтроки.ДопускаетФлагВыгрузки) ИЛИ (Не ДанныеСтроки.ФлагВыгрузки) Тогда	
		ОформлениеСтроки.Ячейки.ВыгружатьТолькоИзменения.ТолькоПросмотр = Истина;	
		ОформлениеСтроки.Ячейки.УсловиеОтбора.ТолькоПросмотр = Истина;
		Возврат;	
	КонецЕсли;	
				
	// Указывать, что выгрузке подлежат только изменения, можно только для объектов,
	// входящих в состав плана обмена
	Если Не ДанныеСтроки.РегистрируютсяИзменения Тогда		
		ОформлениеСтроки.Ячейки.ВыгружатьТолькоИзменения.ТолькоПросмотр = Истина;	
	КонецЕсли;	
		
	// Отбор возможен только по реквизитам и для тех объектов, которые выгружаются не через план обмена
	Если (Не ДанныеСтроки.ДопускаетУсловиеОтбора) ИЛИ (СтрокаОбъекта.ВыгружатьТолькоИзменения) Тогда
		ОформлениеСтроки.Ячейки.УсловиеОтбора.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры
