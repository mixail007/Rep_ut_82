////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;

	Если ТипЗнч(ПараметрОбъектКопирования) = ТипЗнч(Ссылка) Тогда
		Характеристика = ПараметрОбъектКопирования;  //скопируем значения источника
	Иначе
		Характеристика = Ссылка;
	КонецЕсли;
	
	ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика);

	ПодключитьОбработчикИзмененияДанных("Владелец", "ПрочитатьЗаполнитьСвойстваИЗначения", Ложь);

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	ПрочитатьЗаполнитьСвойстваИЗначения(Ссылка);

КонецПроцедуры

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ)

	Если ЭтоНовый() Тогда
		АналогичныеХарактеристики = АналогичныеХарактеристики();

		Если АналогичныеХарактеристики.Количество() > 0 Тогда
			Вопрос = "В информационной базе уже имеются характеристики с аналогичными свойствами.
			         |Использовать одну из существующих характеристик вместо создаваемой вновь?";
			Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНетОтмена);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;

				ЗаголовокВыбора = "Выберите одну из существующих характеристик вместо создаваемой вновь.";
				ВыбраннаяСтрока = АналогичныеХарактеристики.ВыбратьСтроку(ЗаголовокВыбора);

				Если ВыбраннаяСтрока <> Неопределено Тогда
					СправочникОбъектХарактеристикиНоменклатуры = ВыбраннаяСтрока.Характеристика.ПолучитьОбъект();
				КонецЕсли;

			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	// Передача ссылки для впервые записанного элемента.
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;

	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Наименование = СформироватьНаименование(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения);

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);

	Наименование = СформироватьНаименование(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения);

КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений();

	Список.Добавить(СформироватьНаименование(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения));

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.Наименование);

	Если РезультатВыбора <> Неопределено Тогда
		Наименование = РезультатВыбора.Значение;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Характеристика - ссылка на справочник Характеристик, значения свойства которого надо прочитать.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(Характеристика)

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием, поскольку в этом случае Владелец пустой.
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры Тогда

		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Характеристика;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Владелец;

		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Функция проверяет, есть ли характеристики с аналогичными значениями свойств.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений, содержащая аналогичные характеристики. 
//  Таблица состоит из одной колонки, содержащей ссылку на характеристики.
//
Функция АналогичныеХарактеристики()

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ВладелецХарактеристики", Владелец);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Характеристика                   КАК Характеристика
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ 
	|		Справочник.ХарактеристикиНоменклатуры.Ссылка            КАК Характеристика
	|
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры
	|
	|	ГДЕ
	|		Справочник.ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики
	|
	|	)                                                           КАК ХарактеристикиНоменклатуры
	|";

	Для каждого Строка Из ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения Цикл
		Если НЕ ЗначениеНеЗаполнено(Строка.Значение) Тогда
			Индекс = ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Индекс(Строка);

			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);

			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЗначенияСвойствОбъектов             КАК ЗначенияСвойствОбъектов" + Индекс + "
			|
			|ПО
			|	ЗначенияСвойствОбъектов" + Индекс + ".Объект = ХарактеристикиНоменклатуры.Характеристика
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс +"
			|	И
			|	ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс +"
			|";
		КонецЕсли;
	КонецЦикла;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	
