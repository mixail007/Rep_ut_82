
Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

// Процедура считывает данные о ФИО ПБОЮЛа
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ОбновитьФИО()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",Ссылка);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ФИОФизЛицСрезПоследних.Имя,
	               |	ФИОФизЛицСрезПоследних.Отчество,
	               |	ФИОФизЛицСрезПоследних.Фамилия,
	               |	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицоФИО
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &Ссылка) КАК ФИОФизЛицСрезПоследних
	               |		ПО Организации.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	               |
	               |ГДЕ
	               |	Организации.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ФизЛицоФИО <> Неопределено Тогда
			Фамилия = Выборка.Фамилия;
			Имя = Выборка.Имя;
			Отчество = Выборка.Отчество;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПрочитатьпреобразуемыеДанные

// Процедура читает данные об ответственном лице.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать.
//
Процедура ПрочитатьОтветственноеЛицо(ОтветственноеЛицо)

	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы[ОтветственноеЛицо].Значение = Неопределено;
	Иначе
		ЭлементыФормы[ОтветственноеЛицо].Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура записывает данные об ответственном лице.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать,
//  Отказ             - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьОтветственноеЛицо(ОтветственноеЛицо, Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если ЗначениеНеЗаполнено(ЭлементыФормы[ОтветственноеЛицо].Значение) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ЭлементыФормы[ОтветственноеЛицо].Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизации.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             = ТекущаяДата();
	МенеджерЗаписи.СтруктурнаяЕдиница = Ссылка;
	МенеджерЗаписи.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	МенеджерЗаписи.ФизическоеЛицо     = ЭлементыФормы[ОтветственноеЛицо].Значение;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : """ + ОтветственноеЛицо + """" 
		         + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

// Процедура показывает историю изменения ответственного лица.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать.
//
Процедура ПросмотрИсторииОтветственногоЛица(ОтветственноеЛицо)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
		Отбор.СтруктурнаяЕдиница = Ссылка;
		Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];

		Форма = РегистрыСведений.ОтветственныеЛицаОрганизации.ПолучитьФорму("ФормаСписка", ЭтаФорма );
		Форма.ПараметрОтборПоИзмерению = Отбор;
		Форма.ЭлементыФормы.РегистрСведенийСписок.Колонки.СтруктурнаяЕдиница.Доступность = Ложь;
		Форма.ЭлементыФормы.РегистрСведенийСписок.Колонки.ОтветственноеЛицо.Доступность = Ложь;
		Форма.Открыть();

	КонецЕсли;

КонецПроцедуры // ПросмотрИсторииОтветственногоЛица()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	//Заполним руководителя
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.Руководитель;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.Руководитель.Значение = Неопределено;
	Иначе
		ЭлементыФормы.Руководитель.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

	//Заполним главного бухгалтера
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.ГлавныйБухгалтер.Значение = Неопределено;
	Иначе
		ЭлементыФормы.ГлавныйБухгалтер.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

	//Заполним кассира
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.Кассир;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.Кассир.Значение = Неопределено;
	Иначе
		ЭлементыФормы.Кассир.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры //ПриИзмененииДанных()

// Обработчик события Перечитать формы.
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	// Контактная информация
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	Если (ЭлементыФормы.ПанельФИО.Свертка = РежимСверткиЭлементаУправления.Нет) <>
		(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		
		ЭтоФизЛицо = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
		ЭлементыФормы.ПанельФИО.Свертка = ?(ЭтоФизЛицо, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		
		ЭлементыФормы.КодПоОКПО.Видимость = НЕ ЭтоФизЛицо;
		ЭлементыФормы.НадписьКодПоОКПО.Видимость = НЕ ЭтоФизЛицо;
		
		//ЭлементыФормы.КодИМНС.Видимость = НЕ ЭтоФизЛицо;
		//ЭлементыФормы.НадписьКодИМНС.Видимость = НЕ ЭтоФизЛицо;
		
		//ЭлементыФормы.КодПоОКАТО.Видимость = НЕ ЭтоФизЛицо;
		//ЭлементыФормы.НадписьКодПоОКАТО.Видимость = НЕ ЭтоФизЛицо;
		
		ЭлементыФормы.КПП.Видимость = НЕ ЭтоФизЛицо;
		ЭлементыФормы.НадписьКПП.Видимость = НЕ ЭтоФизЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;

	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 

	ОбновитьФИО();

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество);
	Иначе  // для юрлица очистим записи в рег-ре
		НаборФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
		НаборФИО.Отбор.ФизЛицо.Значение = Ссылка;
		НаборФИО.Отбор.ФизЛицо.Использование = Истина;
		НаборФИО.Записать();
	КонецЕсли;

	ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);

	ЗаписатьОтветственноеЛицо("Руководитель", Отказ);
	ЗаписатьОтветственноеЛицо("ГлавныйБухгалтер", Отказ);
	ЗаписатьОтветственноеЛицо("Кассир", Отказ);

КонецПроцедуры

// Процедура - обработчик пришедшего оповещения.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") и Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

		Если ИмяОбновляемогоЭлемента = "ФИО" Тогда
			ОбновитьФио();
		ИначеЕсли ИмяОбновляемогоЭлемента = "Руководитель" Тогда

			//Заполним руководителя
			ПрочитатьОтветственноеЛицо("Руководитель");

		ИначеЕсли ИмяОбновляемогоЭлемента = "Главный бухгалтер" Тогда

			//Заполним главного бухгалтера
			ПрочитатьОтветственноеЛицо("ГлавныйБухгалтер");

		ИначеЕсли ИмяОбновляемогоЭлемента = "Кассир" Тогда

			//Заполним кассира
			ПрочитатьОтветственноеЛицо("Кассир");

		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


// Обработчик события НачалоВыбора элемента формы ОсновнойБанковскийСчет.
//
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры


// Процедура открывает для редактирования форму списка регистра сведений, хранящего ФИО физлиц
Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)

	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед переходом к дополнительным данным о физ. лице необходимо записать элемент. Записать?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Не Отказ Тогда
			ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаРегистра = РегистрыСведений.ФИОФизЛиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = Ссылка;
		
	ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка));

	Если ТаблицаРегистра.Количество() > 0 Тогда
		
		ФормаРегистра.Период   = ТаблицаРегистра[0].Период;
		ФормаРегистра.Фамилия  = ТаблицаРегистра[0].Фамилия;
		ФормаРегистра.Имя      = ТаблицаРегистра[0].Имя;
		ФормаРегистра.Отчество = ТаблицаРегистра[0].Отчество;
		
	Иначе
		ФормаРегистра.Период = '19000101';
	КонецЕсли;
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		НаименованиеПлательщикаПриПеречисленииНалогов=Наименование;
	КонецЕсли;
	
	ФИО = Наименование;
	
	Если ПустаяСтрока(Фамилия)
	 ИЛИ ЭтоНовый() Тогда
		Фамилия  = ВыделитьСлово(ФИО);
		Имя      = ВыделитьСлово(ФИО);
		Отчество = ВыделитьСлово(ФИО);
	КонецЕсли;

КонецПроцедуры

// Обработчик события Нажатие кнопки КнопкаИсторияРуководитель.
//
Процедура КнопкаИсторияРуководительНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("Руководитель");

КонецПроцедуры // КнопкаИсторияРуководительНажатие()

// Обработчик события Нажатие кнопки КнопкаИсторияГлавныйБухгалтер.
//
Процедура КнопкаИсторияГлавныйБухгалтерНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("ГлавныйБухгалтер");

КонецПроцедуры // КнопкаИсторияГлавныйБухгалтерНажатие()

// Обработчик события Нажатие кнопки КнопкаИсторияКассир.
//
Процедура КнопкаИсторияКассирНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("Кассир");

КонецПроцедуры // КнопкаИсторияКассирНажатие()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

Процедура ДействияФормыДействие1(Кнопка)
	Если ЭтотОбъект.Код = "00001" тогда
		ПечатьКартыПатнера(ЭтотОбъект);
	иначе
	    Предупреждение("Карта партнера печатается только для Яршинторга!",30);
	КонецЕсли;	
КонецПроцедуры

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
