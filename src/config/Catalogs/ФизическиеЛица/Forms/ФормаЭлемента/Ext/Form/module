Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем мТекущееОсновноеИзображение;
Перем мПустаяКартинка;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает в поле картинки основное изображение
//
Процедура ПоказатьОсновноеИзображение()

	Если мТекущееОсновноеИзображение = Неопределено Тогда
		ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
	Иначе
		ЭлементыФормы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
	КонецЕсли;

КонецПроцедуры // ПоказатьОсновноеИзображение()

// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьФИО()

	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	Фамилия  = ФИОСрез.Фамилия;
	Имя      = ФИОСрез.Имя;
	Отчество = ФИОСрез.Отчество;
	
КонецПроцедуры // ПрочитатьФИО()

// Процедура считывает информацию об удостоверении личности
//
Процедура ПрочитатьУдостоверениеЛичности()

	Паспорт = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	УдостоверениеЛичности = "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
							+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
							+ Паспорт.ДокументКемВыдан + ", № подр. " + Паспорт.ДокументКодПодразделения;
	Если УдостоверениеЛичности = ", серия: , № , выдан: Не указано года, , № подр. " Тогда
		УдостоверениеЛичности = "Ввести данные об удостоверении личности";
	Иначе
		УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
	КонецЕсли;

КонецПроцедуры // ПрочитатьУдостоверениеЛичности()


Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ДействияФормыПеречитать(Кнопка)
	
	// Контактная информация
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
  
	Если ЭтоНовый() и не ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ФизЛицаРазрешитьДобавлять") Тогда
		Сообщить("Вам не разрешено добавлять физические лица.",СтатусСообщения.Важное);
		Отказ=Истина;
	КонецЕсли;	
	
	Если Не ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

// Процедура - вызывается при открытии формы
Процедура ПриОткрытии()

	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;

	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 

	ПрочитатьФИО();
	ПрочитатьУдостоверениеЛичности();
	
	Заголовок = "Личные данные физического лица: " + Наименование;

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	// Выведем картинку на первой странице
	мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
	ПоказатьОсновноеИзображение();

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбработкаВыбора" формы.
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		
		Если НЕ ОсновноеИзображение = РезультатВыбора Тогда
			ОсновноеИзображение = РезультатВыбора;
		КонецЕсли;
		
		мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
		ПоказатьОсновноеИзображение();
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик пришедшего оповещения
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") и Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

		Если ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
			ПрочитатьУдостоверениеЛичности()

		ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
			ПрочитатьФИО();

		ИначеЕсли ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
			
			// обновляем картинку на первой странице
			Если мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
				мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение();
			КонецЕсли;
					
		ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДанных()

	ПрочитатьЗаполнитьСвойстваИЗначения();
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	
	ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество);

	// Обработка записи свойств и категорий

	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыФайлы(Кнопка)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед вводом файлов и изображений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

 	Если НЕ Отказ Тогда

		СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
		ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
		
		ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура формирует список вариантов для наименования элемента
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВозможныхНаименований = Новый СписокЗначений;
	Если Не ЗначениеНеЗаполнено(Фамилия) Тогда
		СписокВозможныхНаименований.Добавить(Фамилия);
		Если Не ЗначениеНеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");
			Если Не ЗначениеНеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
 			КонецЕсли;
		 КонецЕсли;
	Иначе
		Если Не ЗначениеНеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(Имя);
			Если Не ЗначениеНеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		Иначе
			Если Не ЗначениеНеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхНаименований;
КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)

	ФИО = Наименование;

	Если ПустаяСтрока(Фамилия) ИЛИ ЭтоНовый() Тогда
		Фамилия  = ВыделитьСлово(ФИО);
		Имя      = ВыделитьСлово(ФИО);
		Отчество = ВыделитьСлово(ФИО);
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)

	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед переходом к дополнительным данным о физ. лице необходимо записать элемент. Записать?", РежимДиалогаВопрос.ДаНет);
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Не Отказ Тогда
			ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаРегистра = РегистрыСведений.ФИОФизЛиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = Ссылка;

	ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка));

	Если ТаблицаРегистра.Количество() > 0 Тогда
		
		ФормаРегистра.Период   = ТаблицаРегистра[0].Период;
		ФормаРегистра.Фамилия  = ТаблицаРегистра[0].Фамилия;
		ФормаРегистра.Имя      = ТаблицаРегистра[0].Имя;
		ФормаРегистра.Отчество = ТаблицаРегистра[0].Отчество;
		
	Иначе
		
		ФормаРегистра.Период   = '19000101';
		ФИО = Наименование;
		ФормаРегистра.Фамилия  = ВыделитьСлово(ФИО);
		ФормаРегистра.Имя	   = ВыделитьСлово(ФИО);
		ФормаРегистра.Отчество = ВыделитьСлово(ФИО);
		
	КонецЕсли;
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед вводом паспортных данных необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		
		ФормаРегистра = РегистрыСведений.ПаспортныеДанныеФизЛиц.ПолучитьФорму("ФормаЗаписи", ЭтаФорма);
		ФормаРегистра.Физлицо  = Ссылка;
		
		ТаблицаРегистра = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка));

		Если ТаблицаРегистра.Количество() > 0 Тогда
			
			ФормаРегистра.Период   				   = ТаблицаРегистра[0].Период;
			ФормаРегистра.ДокументВид 			   = ТаблицаРегистра[0].ДокументВид;
			ФормаРегистра.ДокументСерия 		   = ТаблицаРегистра[0].ДокументСерия;
			ФормаРегистра.ДокументНомер			   = ТаблицаРегистра[0].ДокументНомер;
			ФормаРегистра.ДокументДатаВыдачи       = ТаблицаРегистра[0].ДокументДатаВыдачи;
			ФормаРегистра.ДокументКемВыдан         = ТаблицаРегистра[0].ДокументКемВыдан;
			ФормаРегистра.ДокументКодПодразделения = ТаблицаРегистра[0].ДокументКодПодразделения;
			
		Иначе
			ФормаРегистра.Период = '19000101';
		КонецЕсли;
		
		ФормаРегистра.Открыть();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура открывает основное изображение в отдельном окне.
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	Отказ = Ложь;
	Если ЭтоНовый() Тогда
		Вопрос = "Перед вводом основного изображения необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОткрытьФормуИзображения(ЭтаФорма, ОсновноеИзображение, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаТайпингаВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпингаВидаКИ, мТекстТайпингаВидаКИ, мПоследнееЗначениеЭлементаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстТайпингаВидаКИ, мОбработкаТайпингаВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если РольДоступна("Логисты") тогда
		Родитель = Справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");
	КонецЕсли;
КонецПроцедуры

мПустаяКартинка = Новый Картинка;

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;
