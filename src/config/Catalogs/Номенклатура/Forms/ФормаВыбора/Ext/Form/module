Перем ТаблицаРезультатов;

Перем мКнопкаПереключенияРежима;

Перем мПустаяКартинка;

// Устанавливает режим списка справочника, или выбора номенклатуры контрагента
//
Процедура УстановитьРежимОтображенияФормы()

	Если мКнопкаПереключенияРежима.Пометка Тогда
		ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныхПолей.Страницы.ВыборНоменклатурыКонтрагента;
		ЭлементыФормы.ДействияФормы.ИсточникДействий = ЭлементыФормы.СписокНоменклатурыКонтрагента;
	Иначе
		ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныхПолей.Страницы.ВыборНоменклатуры;
		ЭлементыФормы.ДействияФормы.ИсточникДействий = ЭлементыФормы.СправочникСписок;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	
	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры

// Обновляет содержимое картинки
//
Процедура ПоказатьОсновноеИзображение()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = Истина Тогда
		
		Если НЕ мКнопкаПереключенияРежима.Пометка Тогда
			ЭлементКартинки = ЭлементыФормы.ОсновноеИзображение;
			Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено
			   И НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа
			   И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ОсновноеИзображение) Тогда
				ОсновноеИзображение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.ОсновноеИзображение;
			Иначе
				ОсновноеИзображение = Неопределено;
			КонецЕсли; 
		Иначе
			ЭлементКартинки = ЭлементыФормы.ОсновноеИзображениеКонтрагента;
			Если ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные <> Неопределено Тогда
				ТекНоменклатура = ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные.Номенклатура;
				Если НЕ ЗначениеНеЗаполнено(ТекНоменклатура)
				   И НЕ ТекНоменклатура.ЭтоГруппа
				   И НЕ ЗначениеНеЗаполнено(ТекНоменклатура.ОсновноеИзображение) Тогда
					ОсновноеИзображение = ТекНоменклатура.ОсновноеИзображение;
				Иначе
					ОсновноеИзображение = Неопределено;
				КонецЕсли; 
			Иначе
				ОсновноеИзображение = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ЗначениеНеЗаполнено(ОсновноеИзображение) Тогда
			ЭлементКартинки.Картинка = ОсновноеИзображение.Хранилище.Получить();
		Иначе
			ЭлементКартинки.Картинка = мПустаяКартинка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Показывает или прячет панель основного изображения в зависимости от пометки кнопки изображения
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка Тогда
		
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОсновногоИзображения.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОсновногоИзображения.Верх;
			ЭлементыФормы.ПанельОсновногоИзображения.Верх = ТекущийВерх - 144;
			ЭлементыФормы.ПанельОсновногоИзображения.Высота = ТекущийВерх - ЭлементыФормы.ПанельОсновногоИзображения.Верх;
		КонецЕсли;
		
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Низ);
		
	Иначе
		
		// Картинка основного грида
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		// Картинка грида номенклатуры контрагента
		ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельТабличныхПолей, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.РазделительКонтрагента.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.РазделительКонтрагента.Свертка = РежимСверткиЭлементаУправления.Лево;
		
	КонецЕсли;
		
	ПоказатьОсновноеИзображение();
	
КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Перем ВремТовар, ВремЕдиница, ВремКоличество;

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда
			Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(Данные, ВремТовар) Тогда
				ОповеститьОВыборе(ВремТовар);
				Если Не ЗакрыватьПриВыборе Тогда
					ТекущийЭлемент.ТекущаяСтрока = ВремТовар.Номенклатура;
				КонецЕсли;
			КонецЕсли;

			глТорговоеОборудование.СканерПосылкаДанных(1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик нажатия на кнопку Изображения
//
Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;

	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры // ДействияФормыИзображение()

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента СправочникСписок.
//
Процедура СправочникСписокПриАктивизацииСтроки(Элемент)

	ПоказатьОсновноеИзображение();
	ЭлементыФормы.СправочникДерево.ТекущаяСтрока = ЭлементыФормы.СправочникСписок.ТекущийРодитель;

КонецПроцедуры // СправочникСписокПриАктивизацииСтроки()

Функция ЗапросОстатков(Дата, Склад, ТипЦен)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ
	|	Подбор.Код                                      КАК Код,
	|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
	|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
	|	Подбор.Услуга                                   КАК Услуга,
	|	Подбор.Номенклатура                             КАК Номенклатура,
	|	Подбор.Номенклатура.Ссылка						КАК Ссылка,
	|	Подбор.Родитель                                 КАК Родитель,
	|	ВЫБОР
	|		КОГДА Подбор.Цена ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ Подбор.Цена											
	|	КОНЕЦ              								КАК Цена,
	|	ВЫБОР
	|		КОГДА Подбор.КоличествоСвободныйОстаток ЕСТЬ NULL ТОГДА 0
	|		ИНАЧЕ Подбор.КоличествоСвободныйОстаток
	|	КОНЕЦ              								КАК КоличествоСвободныйОстаток,
	|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
	|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
	|	Подбор.ЕдиницаИзмерения.Представление           КАК ПредставлениеЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
	|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Код                               КАК Код,
	|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
	|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
	|	СправочникНоменклатура.Набор                             КАК Набор,
	|	СправочникНоменклатура.Услуга                            КАК Услуга,
	|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
	|	СправочникНоменклатура.Родитель                          КАК Родитель,
	|	СУММА(Остатки.КоличествоСвободныйОстаток)                КАК КоличествоСвободныйОстаток,
	|	МАКСИМУМ(СправочникНоменклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЦеныСрезПоследних.Цена)						 КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ	
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныСрезПоследних
	|	ПО
	|		ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ                  КАК Номенклатура,
	|		СУММА(ВЫБОР КОГДА ТоварыНаСкладах.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.КоличествоОстаток КОНЕЦ) КАК КоличествоСвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад)  КАК ТоварыНаСкладах
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ
	|	) КАК Остатки
	|
	|ПО
	|	Остатки.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	((СправочникНоменклатура.Ссылка.ЭтоГруппа ИЛИ СправочникНоменклатура.Набор)
	|	ИЛИ
	|	(НЕ СправочникНоменклатура.Ссылка.ЭтоГруппа И СправочникНоменклатура.Ссылка.Услуга = Истина)
	|	ИЛИ
	|	(Остатки.КоличествоСвободныйОстаток > 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.Ссылка
	|
	|) КАК Подбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подбор.ЭтоГруппа УБЫВ,
	|	Подбор.Номенклатура.Наименование
	|";	
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // ЗапросОстатков()


Процедура ПолучитьОстаткиТоваров()
	
	Дата = ТекущаяДата();
	
	Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
	
	ТипЦен = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойТипЦенПродажи");
	
	Запрос = ЗапросОстатков(Дата, Склад, ТипЦен);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если ЗначениеНеЗаполнено(КонтрагентОтбораНоменклатуры) Тогда
		мКнопкаПереключенияРежима.Доступность = Ложь;
		мКнопкаПереключенияРежима.Пометка = Ложь;
	Иначе
		мКнопкаПереключенияРежима.Доступность = Истина;
		Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОткрыватьФормуВыбораСправочникаНоменклатураСОтборомПоПоставщику") = Истина Тогда
			мКнопкаПереключенияРежима.Пометка = Истина;
		КонецЕсли;
		СписокНоменклатурыКонтрагента.Отбор.Контрагент.Значение = КонтрагентОтбораНоменклатуры;
		СписокНоменклатурыКонтрагента.Отбор.Контрагент.Использование = Истина;
		ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаОтбора.Контрагент.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьРежимОтображенияФормы();
	
	//ПоказыватьКартинку = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.Изображение");
	// Если ПоказыватьКартинку = Неопределено Тогда
		ПоказыватьКартинку = ЛОЖЬ; //24.06.2015 - выкл. всегда!
	//КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = ПоказыватьКартинку;
	ПоказатьСпрятатьПанельОсновногоИзображения();
	
	ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаПорядка.Номенклатура.Доступность                   = Истина;
	ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаПорядка.АртикулНоменклатурыКонтрагента.Доступность = Истина;
	
	СписокНоменклатурыКонтрагента.Порядок.Установить("Номенклатура ВОЗР");
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если ПользовательИБ <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	   И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира
	   
	   ПолучитьОстаткиТоваров();
	   ЭлементыФормы.СправочникСписок.Колонки.Остаток.Видимость = Истина;
	   ЭлементыФормы.СправочникСписок.Колонки.Цена.Видимость = Истина;
	   
    Иначе 
		
		ЭлементыФормы.СправочникСписок.Колонки.Остаток.Видимость = Ложь;
	   	ЭлементыФормы.СправочникСписок.Колонки.Цена.Видимость = Ложь;

	   
	КонецЕсли; 
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПродажаАвтозапчастей") Тогда
		
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр=Истина; 
		ЭлементыФормы.СправочникСписок.ИзменятьИерархическийПросмотр=Ложь;		
		ЭлементыФормы.СправочникДерево.РодительВерхнегоУровня=Справочники.Номенклатура.Автозапчасти;
		ЭлементыФормы.СправочникСписок.РодительВерхнегоУровня=Справочники.Номенклатура.Автозапчасти;
		
	КонецЕсли;
	
	СправочникиОтборПомеченныхНаУдаление(СправочникСписок.Отбор, ЭлементыФормы.СправочникСписок);

КонецПроцедуры // ПриОткрытии()

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанЭлементНоменклатуры" Тогда
		Если Параметр = ЭлементыФормы.Список.ТекущиеДанные.Ссылка Тогда
			ПоказатьОсновноеИзображение();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.Изображение", ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		ПоказатьОсновноеИзображение();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы ДействияФормы.НоменклатураКонтрагента.
//
Процедура ДействияФормыНоменклатураКонтрагента(Кнопка)
	
	мКнопкаПереключенияРежима.Пометка = НЕ мКнопкаПереключенияРежима.Пометка;
	УстановитьРежимОтображенияФормы();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ДействияФормы.Действие.
//
Процедура ДействияФормыДействие(Кнопка)
	
	Если мКнопкаПереключенияРежима.Пометка Тогда
		Если ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НоменклатураВыбора = ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные.Номенклатура;
	Иначе
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НоменклатураВыбора = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ПолеВвода") Тогда
		Если НоменклатураВыбора.ЭтоГруппа И ЭтаФорма.ВладелецФормы.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ОповеститьОВыборе(НоменклатураВыбора);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображение.
//
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	ТекущиеДанныеСписка = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено ИЛИ ТекущиеДанныеСписка.ЭтоГруппа Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписка.ОсновноеИзображение.Пустая() Тогда
		Предупреждение("Основное изображение номенклатуры не задано!");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуИзображения(ЭтаФорма, ТекущиеДанныеСписка.ОсновноеИзображение, ТекущиеДанныеСписка.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображение.
//
Процедура СписокНоменклатурыКонтрагентаПриАктивизацииСтроки(Элемент)

	ПоказатьОсновноеИзображение();

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" элемента формы СписокНоменклатурыКонтрагента.
//
Процедура СписокНоменклатурыКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоказатьОсновноеИзображение();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображениеКонтрагента.
//
Процедура ОсновноеИзображениеКонтрагентаНажатие(Элемент)
	
	ТекущиеДанныеСписка = ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ТекущиеДанныеСписка.Номенклатура) ИЛИ ТекущиеДанныеСписка.Номенклатура.ЭтоГруппа Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписка.Номенклатура.ОсновноеИзображение.Пустая() Тогда
		Предупреждение("Основное изображение номенклатуры не задано!");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуИзображения(ЭтаФорма, ТекущиеДанныеСписка.Номенклатура.ОсновноеИзображение, ТекущиеДанныеСписка.Номенклатура);
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" элемента формы СписокНоменклатурыКонтрагента.
//
Процедура СписокНоменклатурыКонтрагентаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОповеститьОВыборе(ВыбраннаяСтрока.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СкрытаяКоманднаяПанельПереключитьИерархическийПросмотр(Кнопка)
	
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Не ЭлементыФормы.СправочникСписок.ИерархическийПросмотр;
	
КонецПроцедуры

Процедура ВыводСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	// Вставить содержимое обработчика.
	
	//ТаблицаРезультатов.ВыбратьСтроку();
	Если ТаблицаРезультатов.Количество() = 0 Тогда
	
			Возврат;
	
	КонецЕсли; 
	
	ТекЭлемент = ТаблицаРезультатов.Найти(ДанныеСтроки.Ссылка, "Ссылка");
	
	
	Если ТекЭлемент <> Неопределено Тогда
		Если НЕ ТекЭлемент.ЭтоГруппа Тогда
		
			//Сообщить(ТекЭлемент.КоличествоСвободныйОстаток);
		    ОформлениеСтроки.Ячейки.Остаток.Значение = ТекЭлемент.КоличествоСвободныйОстаток;
		    ОформлениеСтроки.Ячейки.Цена.Значение = Формат(ТекЭлемент.Цена, "ЧДЦ = 2");
				
			Если (ТекЭлемент.Цена = 0) Тогда
			
				ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;	
				
			КонецЕсли;
			
			Если ТекЭлемент.КоличествоСвободныйОстаток = 0 Тогда
			
				ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;	
				
			КонецЕсли;

			
			
		КонецЕсли; 
	Иначе
		
		Если НЕ ДанныеСтроки.ЭтоГруппа Тогда
		
			ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
		КонецЕсли; 
		
		//
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура СправочникСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Вставить содержимое обработчика.
	//ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	//
	//Предупреждение("11111");
	//
	//Если ПользовательИБ <> Неопределено
	//	И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
	//	И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира
	//	
	//	Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Остаток.Значение <= 0 Тогда
	//		Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка") Тогда 
	//			Предупреждение("Данного товара нет на остатках!", 3); 
	//			СтандартнаяОбработка = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	//Предупреждение("11111");
	
	Если ПользовательИБ <> Неопределено
		И ПользовательИБ.ОсновнойИнтерфейс <> Неопределено
		И ПользовательИБ.ОсновнойИнтерфейс.Имя = "ИнтерфейсКассира" Тогда //Задействуем интерфейс кассира
		ТекЭлемент = ТаблицаРезультатов.Найти(ВыбраннаяСтрока.Ссылка, "Ссылка");
		Если ТекЭлемент = Неопределено Тогда
			Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка") Тогда 
				Предупреждение("Данного товара нет на остатках!", 3); 
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ДействияФормыНормыЗагрузки(Кнопка)
	
	Если (ЭлементыФормы.СправочникСписок.ТекущаяСтрока.ЭтоГруппа = Истина) Тогда
		Возврат;
	КонецЕсли;
	Если (ЭлементыФормы.СправочникСписок.ТекущаяСтрока.ТипоРазмер = Справочники.Типоразмеры.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;
	//Норма 				= Справочники.НормыЗагрузки.НайтиПоРеквизиту("Типоразмер",ЭлементыФормы.Список.ТекущаяСтрока.Типоразмер);
	Норма					= НайтиСсылкуНаНормуЗагрузки(ЭлементыФормы.СправочникСписок.ТекущаяСтрока);
	Если (Норма = Справочники.НормыЗагрузки.ПустаяСсылка()) Тогда 
		Норма						= Справочники.НормыЗагрузки.СоздатьЭлемент();
		Норма.Типоразмер			= ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Типоразмер;
		Норма.КоэффициентИмпорта 	= 1;
		Норма.КоэффициентКоличества = 1;
		Норма.ВидПродукции			= ЭлементыФормы.СправочникСписок.ТекущаяСтрока.ВидТовара;
		Норма.Записать();
		Норма = Норма.Ссылка;
	КонецЕсли;
	Форма						= Справочники.НормыЗагрузки.ПолучитьФормуСписка();
	Форма.ЭлементТек 			= Норма;
	Форма.РедактированиеИзФорм 	= Истина;
	Форма.Открыть();

КонецПроцедуры

Функция НайтиСсылкуНаНормуЗагрузки(Ссылка) 
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
	
	Запрос.УстановитьПараметр("ВидПродукции",Ссылка.ВидТовара);
	Запрос.УстановитьПараметр("Типоразмер",Ссылка.ТипоРазмер);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.НормыЗагрузки.ПустаяСсылка(); 
	
КонецФункции

мПустаяКартинка = Новый Картинка;

мКнопкаПереключенияРежима = ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НоменклатураКонтрагента;

СправочникСписок.Колонки.Добавить("ОсновноеИзображение");

ТаблицаРезультатов = Новый ТаблицаЗначений;

ТаблицаРезультатов.Очистить();
