Перем НовыйВидТовара Экспорт;
перем проверка; 

Процедура ПриОткрытии()
	Проверка = Ложь;
	Если ЗначениеЗаполнено(Типоразмер) Тогда
		ШиринаП = Типоразмер.Ширина;
		//Вылет = Типоразмер.Вылет;
		//Нагрузка = Типоразмер.Нагрузка;
		ВысотаП = Типоразмер.Высота;
		Диаметр = Типоразмер.Диаметр;
		//ПЦД = Типоразмер.PCD;
		//Ступица = Типоразмер.ДиаметрСтупицы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Модель) Тогда
		Сезонность = Модель.Сезон;
		Шиповка = Модель.Шиповка;
		Экологичность = Модель.Экологичность;
		Камерная = Модель.Камерная;
		Конструкция = Модель.Конструкция;
	    РисунокПротектора = Модель.РисунокПротектора;
	    ТипПротектора = Модель.ТипПротектора;
	КонецЕсли;
	//
	//
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Run Flat"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		RunFlat = стр.Значение;
	КонецЦикла;

	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("XL"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		XL = стр.Значение;
	КонецЦикла;

	
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Конструкция"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Конструкция = стр.Значение;
	//КонецЦикла;

	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ось"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Ось = стр.Значение;
	КонецЦикла;

	
	//
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Рисунок протектора"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	РисунокПротектора = стр.Значение;
	//КонецЦикла;

	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Слойность"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Слойность = стр.Значение;
	КонецЦикла;

	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет букв на боковине"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Цвет = стр.Значение;
	КонецЦикла;
	
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип протектора"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	ТипПротектора = стр.Значение;
	//КонецЦикла;
	

	//
	//ОтборПоКомплектующим = КомплектующиеПоле.Отбор.Номенклатура;
	//ОтборПоКомплектующим.Значение      = Ссылка;
	//ОтборПоКомплектующим.Использование = Истина;
	
	Вес = ЕдиницаХраненияОстатков.Вес;
	Объем = ЕдиницаХраненияОстатков.Объем;
	
	Попытка
		RegExp = Новый COMОбъект("VBScript.RegExp");   //для определения индексов
	Исключение
	КонецПопытки;
	
	Индексы=ПолучитьИндексыСкоростиНагрузки(RegExp,Наименование);
	Если Индексы.ИндексСкорости <> "" Тогда
	    Скорость = СокрЛП(Индексы.ИндексСкорости);
		ЭлементыФормы.Скорость.Доступность = Ложь;
	КонецЕсли;
	Если Индексы.ИндексНагрузки <> "" Тогда
	     Нагрузка = СокрЛП(Индексы.ИндексНагрузки);
		 ЭлементыФормы.Нагрузка.Доступность = Ложь;
	КонецЕсли;
	 
	Если ЗначениеНеЗаполнено(Скорость) Тогда 
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс скорости"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		скорость = стр.Значение;
	КонецЦикла;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Нагрузка) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс нагрузки"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Нагрузка = стр.Значение;
	КонецЦикла;
	КонецЕсли;

	   
КонецПроцедуры


Процедура ТипоразмерПриИзменении(Элемент)
	    ШиринаП = Элемент.Значение.Ширина;
		ВысотаП = Элемент.Значение.Высота;
		Диаметр = Элемент.Значение.Диаметр;

		//Ступица = Элемент.Значение.ДиаметрСтупицы;
КонецПроцедуры


Процедура ТипоразмерНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.Типоразмеры.ПолучитьФормуВыбора(, Элемент);
	Если ШиринаП <> "" Тогда
        нФормаВыбора.Отбор.Ширина.ВидСравнения = ВидСравнения.Равно;
        нФормаВыбора.Отбор.Ширина.Значение = ШиринаП;
        нФормаВыбора.Отбор.Ширина.Использование = Истина;
	КонецЕсли;
	Если ВысотаП <> "" Тогда
        нФормаВыбора.Отбор.Высота.ВидСравнения = ВидСравнения.Равно;
        нФормаВыбора.Отбор.Высота.Значение = ВысотаП;
        нФормаВыбора.Отбор.Высота.Использование = Истина;
	КонецЕсли;
	Если Диаметр <> "" Тогда
        нФормаВыбора.Отбор.Диаметр.ВидСравнения = ВидСравнения.Равно;
        нФормаВыбора.Отбор.Диаметр.Значение = Диаметр;
        нФормаВыбора.Отбор.Диаметр.Использование = Истина;
	КонецЕсли;
		//Если ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
	//	нФормаВыбора.Отбор.Родитель.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Родитель.Значение = Справочники.Типоразмеры.НайтиПоКоду("232");
	//	нФормаВыбора.Отбор.Родитель.Использование = Истина;
	//иначеЕсли ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
	//	нФормаВыбора.Отбор.Родитель.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Родитель.Значение = Справочники.Типоразмеры.НайтиПоКоду("11");
	//	нФормаВыбора.Отбор.Родитель.Использование = Истина;
	//КонецЕсли;
    нФормаВыбора.Открыть();
КонецПроцедуры


Процедура Кнопка1Нажатие(Элемент)
	Ответ = Вопрос("Вы уверены что хотите создать новый элемент
	| справочника ТИПОРАЗМЕРЫ?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда

	НовЭлемент = Справочники.Типоразмеры.СоздатьЭлемент();
	Если ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски");
	ИначеЕсли ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Шины");
	КонецЕсли;
	//НовЭлемент = Справочники.Типоразмеры.СоздатьЭлемент();
	НовЭлемент.Ширина = ШиринаП;
	//НовЭлемент.Нагрузка = Нагрузка;
	НовЭлемент.Диаметр = Диаметр;
	НовЭлемент.Высота = ВысотаП;
	//НовЭлемент.PCD = ПЦД;
	//НовЭлемент.Вылет = Вылет;
	//НовЭлемент.ДиаметрСтупицы = Ступица;
	
	
	//Если НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски") Тогда
	//	
	//	НовЭлемент.Наименование = ШиринаП+"x"+Диаметр+"/"+КолКр+"x"+ПЦД+" ET"+Вылет+" D"+Ступица;
	//	
	////ИначеЕсли Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски") Тогда
	////	
	////	Наименование = 		
	//КонецЕсли;
    НовЭлемент.Записать();
	Типоразмер = НовЭлемент.Ссылка;
    ФормаР = Типоразмер.ПолучитьФорму("ФормаЭлемента",);
	ФормаР.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//Если ЗначениеЗаполнено(RunFlat) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Run Flat"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Run Flat");
	Нов.Значение = RunFlat;
	НаборЗаписей.Записать();
	//КонецЕсли;
	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("XL"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("XL");
	Нов.Значение = XL;
	НаборЗаписей.Записать();
		
	//Если ЗначениеЗаполнено(Конструкция) Тогда
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Конструкция"));
	//Нов = НаборЗаписей.Добавить();
	//Нов.Объект = ЭтотОбъект.Ссылка;
	//Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Конструкция");
	//Нов.Значение = Конструкция;
	//НаборЗаписей.Записать();
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Ось) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ось"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ось");
	Нов.Значение = Ось;
	НаборЗаписей.Записать();
	КонецЕсли;
	//
	//Если ЗначениеЗаполнено(РисунокПротектора) Тогда
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Рисунок протектора"));
	//Нов = НаборЗаписей.Добавить();
	//Нов.Объект = ЭтотОбъект.Ссылка;
	//Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Рисунок протектора");
	//Нов.Значение = РисунокПротектора;
	//НаборЗаписей.Записать();
	//КонецЕсли;
		
	Если Слойность <> 0 Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Слойность"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Слойность");
	Нов.Значение = Слойность;
	НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Цвет) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет букв на боковине"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет букв на боковине");
	Нов.Значение = Цвет;
	НаборЗаписей.Записать();
    КонецЕсли;


    Если ЗначениеЗаполнено(Нагрузка) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс нагрузки"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс нагрузки");
	Нов.Значение = Нагрузка;
	НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Скорость) Тогда
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс скорости"));
	Нов = НаборЗаписей.Добавить();
	Нов.Объект = ЭтотОбъект.Ссылка;
	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Индекс скорости");
	Нов.Значение = Скорость;
	НаборЗаписей.Записать();
    КонецЕсли;

	//Если ЗначениеЗаполнено(ТипПротектора) Тогда
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип протектора"));
	//Нов = НаборЗаписей.Добавить();
	//Нов.Объект = ЭтотОбъект.Ссылка;
	//Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип протектора");
	//Нов.Значение = ТипПротектора;
	//НаборЗаписей.Записать();
	//КонецЕсли;
			
	Если Вес <> ЕдиницаХраненияОстатков.Вес Тогда
		Об = ЕдиницаХраненияОстатков.ПолучитьОбъект();
		об.Вес = Вес;
		об.Записать();
	КонецЕсли;
	
	Если Объем <> ЕдиницаХраненияОстатков.Объем Тогда
		Об = ЕдиницаХраненияОстатков.ПолучитьОбъект();
		об.Объем = Объем;
		об.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ШиповкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Шипы"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();

КонецПроцедуры

Процедура КамераНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Камера"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Код
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	СписокН = Новый СписокЗначений;
	СписокН.ЗагрузитьЗначения(Массив);
	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
    нФормаВыбора.Отбор.Код.Значение = СписокН;
    нФормаВыбора.Отбор.Код.Использование = Истина;

	нФормаВыбора.Открыть();
КонецПроцедуры

Процедура ОсьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Ось"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Код
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	СписокН = Новый СписокЗначений;
	СписокН.ЗагрузитьЗначения(Массив);
	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
    нФормаВыбора.Отбор.Код.Значение = СписокН;
    нФормаВыбора.Отбор.Код.Использование = Истина;

	нФормаВыбора.Открыть();
КонецПроцедуры

Процедура РисунокПротектораНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Рисунок протектора"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();
КонецПроцедуры

Процедура ЦветНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет букв на боковине"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Код
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	СписокН = Новый СписокЗначений;
	СписокН.ЗагрузитьЗначения(Массив);
	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
    нФормаВыбора.Отбор.Код.Значение = СписокН;
    нФормаВыбора.Отбор.Код.Использование = Истина;

	нФормаВыбора.Открыть();
КонецПроцедуры

Процедура КонструкцияНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Конструкция"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();
КонецПроцедуры

Процедура СезонностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Сезонность"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ЭтоНовый() Тогда
	  //Если ЗначениеЗаполнено(Модель) и ЗначениеЗаполнено(Типоразмер) и 
	  //  	ЗначениеЗаполнено(Вес) и ЗначениеЗаполнено(Объем) и
	  //  	ЗначениеЗаполнено(СтранаПроисхождения) и ЗначениеЗаполнено(РисунокПротектора) и
	  //  	ЗначениеЗаполнено(цвет) и ЗначениеЗаполнено(Скорость) и
	  //  	ЗначениеЗаполнено(Конструкция) и ЗначениеЗаполнено(Нагрузка) и
	  //  	ЗначениеЗаполнено(ТипПротектора) и 
	  //  	ЗначениеЗаполнено(Сезонность) и ЗначениеЗаполнено(Шиповка) Тогда
		Если ЗначениеНеЗаполнено(ЕдиницаХраненияОстатков) Тогда
			ВидТовара = НовыйВидТовара;
			БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
			ЭтотОбъект.Записать();
			Ед = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			Ед.Вес = Вес;
			ед.Владелец = ЭтотОбъект.Ссылка;
			ед.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
			ед.Наименование = "шт";
			ед.Записать();
			ЕдиницаХраненияОстатков = ед.Ссылка;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС               = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ТипШтрихкода) Тогда
			ТипШтрихкода            = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
		Проверка = Истина;
	  //Иначе
	  //   Отказ = Истина;
	  //   Сообщить("Не все обязательные поля заполнены!!!");
	  //КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИндексыСкоростиНагрузки(RegExp,Наименование)
	Рез=Новый Структура("ИндексНагрузки,ИндексСкорости");
	ИндексНагрузки="";
	ИндексСкорости="";
	Если RegExp=неопределено тогда
		Индексы="";
		НомНаим=СокрЛП(Наименование);
		НомНаим=СтрЗаменить(НомНаим,"шип.","");
		НомНаим=СтрЗаменить(НомНаим,"шип","");
		НомНаим=СокрЛП(НомНаим);
		Если Прав(НомНаим, 1) = "N" 
			ИЛИ Прав(НомНаим, 1) = "P"
			ИЛИ Прав(НомНаим, 1) = "Q"
			ИЛИ Прав(НомНаим, 1) = "R"
			ИЛИ Прав(НомНаим, 1) = "S"
			ИЛИ Прав(НомНаим, 1) = "T"
			ИЛИ Прав(НомНаим, 1) = "U"
			ИЛИ Прав(НомНаим, 1) = "H"
			ИЛИ Прав(НомНаим, 1) = "V"
			ИЛИ Прав(НомНаим, 1) = "W"
			ИЛИ Прав(НомНаим, 1) = "Y"
			ИЛИ Прав(НомНаим, 1) = "Z" Тогда
			i = 1;
			Пока i <= СтрДлина(НомНаим) Цикл
				Если Лев(Прав(НомНаим, i) ,1) = " " Тогда
					Индексы = Прав(НомНаим, i-1);
					Прервать;
				КонецЕсли;
				i= i + 1;
			КонецЦикла;
		КонецЕсли;
		ИндексСкорости=Прав(Индексы, 1);
		ИндексНагрузки=Лев(Индексы, СтрДлина(Индексы)-1);
	Иначе
		RegExp.Pattern = "\s[0-9]{2,3}(J|K|L|M|N|P|Q|R|S|T|U|H|V|VR|W|Y|ZR)(\s|$)"; //пробел,2 или 3 цифры,варианты индексов скорости, пробел или конец строки
		RegExp.Global = истина; //поиск по всей строке
		ИсходнаяСтрока = СокрЛП(Наименование);
		Matches = RegExp.Execute(ИсходнаяСтрока);
		Если Matches.Count>0 тогда
			Для Счетчик = 0 По Matches.Count - 1 Цикл 
				Match = Matches.Item(Счетчик);
				Индексы = Match.Value;
			КонецЦикла;
			RegExp.Pattern = "\s[0-9]{2,3}"; //пробел,2 или 3 цифры
			ИсходнаяСтрока = Индексы;
			Matches = RegExp.Execute(ИсходнаяСтрока);
			Для Счетчик = 0 По Matches.Count - 1 Цикл 
				Match = Matches.Item(Счетчик);
				ИндексНагрузки = Match.Value;
			КонецЦикла;
			RegExp.Pattern = "[A-Za-z]{1,2}"; //1 или 2 буквы
			ИсходнаяСтрока = Индексы;
			Matches = RegExp.Execute(ИсходнаяСтрока);
			Для Счетчик = 0 По Matches.Count - 1 Цикл 
				Match = Matches.Item(Счетчик);
				ИндексСкорости = Match.Value;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Рез.ИндексСкорости=ИндексСкорости;
	Рез.ИндексНагрузки=ИндексНагрузки;
	Возврат Рез;
КонецФункции

Процедура МодельНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.МоделиТоваров.ПолучитьФормуВыбора(, Элемент);
	//Если Сезонность <> "" Тогда
	//	нФормаВыбора.Отбор.Сезон.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Сезон.Значение = Сезонность;
	//	нФормаВыбора.Отбор.Сезон.Использование = Истина;
	//КонецЕсли;
	//Если Шиповка <> "" Тогда
	//	нФормаВыбора.Отбор.Шиповка.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Шиповка.Значение = Шиповка;
	//	нФормаВыбора.Отбор.Шиповка.Использование = Истина;
	//КонецЕсли;
	////Если Камерная  Тогда
	//	нФормаВыбора.Отбор.Камерная.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Камерная.Значение = Камерная;
	//	нФормаВыбора.Отбор.Камерная.Использование = Истина;
	////КонецЕсли;
	////Если Экологичность  Тогда
	//	нФормаВыбора.Отбор.Экологичность.ВидСравнения = ВидСравнения.Равно;
	//	нФормаВыбора.Отбор.Экологичность.Значение = Экологичность;
	//	нФормаВыбора.Отбор.Экологичность.Использование = Истина;
	////КонецЕсли;
	//нФормаВыбора.Открыть();

КонецПроцедуры

Процедура МодельПриИзменении(Элемент)
	Сезонность = Модель.Сезон;
	Шиповка = Модель.Шиповка;
	Экологичность = Модель.Экологичность;
	Камерная = Модель.Камерная;
	Конструкция = Модель.Конструкция;
	РисунокПротектора = Модель.РисунокПротектора;
	ТипПротектора = Модель.ТипПротектора;
КонецПроцедуры

Процедура МодельОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ф = Модель.ПолучитьФорму("ФормаЭлемента");
	ф.ОткрытьМодально();
	Сезонность = Модель.Сезон;
	Шиповка = Модель.Шиповка;
	Экологичность = Модель.Экологичность;
	Камерная = Модель.Камерная;
	Конструкция = Модель.Конструкция;
	РисунокПротектора = Модель.РисунокПротектора;
	ТипПротектора = Модель.ТипПротектора;

	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТипоразмерОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ф = Типоразмер.ПолучитьФорму("ФормаЭлемента");
	ф.ОткрытьМодально();
	ШиринаП = Элемент.Значение.Ширина;
	//Вылет = Элемент.Значение.Вылет;
	//Нагрузка = Элемент.Значение.Нагрузка;
    ВысотаП = Элемент.Значение.Высота;
	Диаметр = Элемент.Значение.Диаметр;
КонецПроцедуры

Процедура СезонностьПриИзменении(Элемент)
	Модель = Справочники.МоделиТоваров.ПустаяСсылка();
КонецПроцедуры

Процедура ШиповкаПриИзменении(Элемент)
	Модель = Справочники.МоделиТоваров.ПустаяСсылка();
КонецПроцедуры

Процедура КамернаяПриИзменении(Элемент)
	Модель = Справочники.МоделиТоваров.ПустаяСсылка();
КонецПроцедуры

Процедура ЭкологичностьПриИзменении(Элемент)
	Модель = Справочники.МоделиТоваров.ПустаяСсылка();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭтаФорма.Закрыть(Проверка);
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТипПротектораНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип протектора"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();

КонецПроцедуры











