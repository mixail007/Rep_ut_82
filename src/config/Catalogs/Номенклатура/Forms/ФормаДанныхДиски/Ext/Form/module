Перем НовыйВидТовара Экспорт;
Перем проверка; 
Перем мОбъектКопирования;

Процедура ПриОткрытии()
	
	проверка = Ложь;
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСвойства(ОбъектКопирования) Экспорт
	
	мОбъектКопирования = ОбъектКопирования;
	
	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
	НаборЗаписей.Прочитать();
	Для Каждого стр из НаборЗаписей Цикл
		Цвет = стр.Значение;
	КонецЦикла;
	
    НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Нагрузка = стр.Значение;
	КонецЦикла;
	
    НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка (данные производителя)"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		НагрузкаПроизводителя = стр.Значение;
	КонецЦикла;
	
    НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Минимально допустимая нагрузка"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		НагрузкаМинимальная = стр.Значение;
	КонецЦикла;
	
    НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		Завод = стр.Значение;
	КонецЦикла;
	
    НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод для Терминала"));
	НаборЗаписей.Прочитать();
	для Каждого стр из НаборЗаписей Цикл
		ЗаводДляТерминала = стр.Значение;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(мОбъектКопирования) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", мОбъектКопирования);
		Запрос.Текст = "ВЫБРАТЬ
		               |	КомплектующиеНоменклатуры.Комплектующая,
		               |	КомплектующиеНоменклатуры.Количество,
		               |	КомплектующиеНоменклатуры.ЕдиницаИзмерения,
		               |	КомплектующиеНоменклатуры.ДоляСтоимости
		               |ИЗ
		               |	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		               |ГДЕ
		               |	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрТЗ = КомплектующиеПолеНовыйЭлемент.Добавить();
			СтрТЗ.Комплектующая		 = Выборка.Комплектующая;
			СтрТЗ.Количество		 = Выборка.Количество;
			СтрТЗ.ЕдиницаИзмерения	 = Выборка.ЕдиницаИзмерения;
			СтрТЗ.ДоляСтоимости		 = Выборка.ДоляСтоимости;
		КонецЦикла;
	Иначе
		ОтборПоКомплектующим = КомплектующиеПоле.Отбор.Номенклатура;
		ОтборПоКомплектующим.Значение      = ?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка);
		ОтборПоКомплектующим.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мОбъектКопирования) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", мОбъектКопирования);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦеныНоменклатурыСрезПоследних.ТипЦен,
		               |	ЦеныНоменклатурыСрезПоследних.Цена,
		               |	ЦеныНоменклатурыСрезПоследних.Валюта
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		               |ГДЕ
		               |	ЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = ЦеныНоменклатуры.Добавить();
			Стр.ТипЦен	 = Выборка.ТипЦен;
			Стр.Цена	 = Выборка.Цена;
			Стр.Валюта	 = Выборка.Валюта;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", мОбъектКопирования);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЦенообразованиеФОБ.БазоваяЦена,
		               |	ЦенообразованиеФОБ.ЦенаСоСкидкой,
		               |	ЦенообразованиеФОБ.Lug,
		               |	ЦенообразованиеФОБ.Undercut,
		               |	ЦенообразованиеФОБ.Polish,
		               |	ЦенообразованиеФОБ.DoudleColor,
		               |	ЦенообразованиеФОБ.Stripe,
		               |	ЦенообразованиеФОБ.Rivets,
		               |	ЦенообразованиеФОБ.Milling,
		               |	ЦенообразованиеФОБ.PlastiicInserts,
		               |	ЦенообразованиеФОБ.SSLip,
		               |	ЦенообразованиеФОБ.MaxLoadPrice,
		               |	ЦенообразованиеФОБ.Width,
		               |	ЦенообразованиеФОБ.ECounting,
		               |	ЦенообразованиеФОБ.BigCap,
		               |	ЦенообразованиеФОБ.Cup,
		               |	ЦенообразованиеФОБ.РасчетнаяЦенаФОБ,
		               |	ЦенообразованиеФОБ.Factory,
		               |	ЦенообразованиеФОБ.LugName,
		               |	ЦенообразованиеФОБ.Вес,
		               |	ЦенообразованиеФОБ.LugCount,
		               |	ЦенообразованиеФОБ.КрепежКоличество
		               |ИЗ
		               |	РегистрСведений.ЦенообразованиеФОБ КАК ЦенообразованиеФОБ
		               |ГДЕ
		               |	ЦенообразованиеФОБ.Номенклатура = &Номенклатура";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = ЦеныНоменклатурыФОБ.Добавить();
			Стр.БазоваяЦена		 = Выборка.БазоваяЦена;
			Стр.ЦенаСоСкидкой	 = Выборка.ЦенаСоСкидкой;
			Стр.Lug				 = Выборка.Lug;
			Стр.Undercut		 = Выборка.Undercut;
			Стр.Polish			 = Выборка.Polish;
			Стр.DoudleColor		 = Выборка.DoudleColor;
			Стр.Stripe			 = Выборка.Stripe;
			Стр.Rivets			 = Выборка.Rivets;
			Стр.Milling			 = Выборка.Milling;
			Стр.PlastiicInserts	 = Выборка.PlastiicInserts;
			Стр.SSLip			 = Выборка.SSLip;
			Стр.MaxLoadPrice	 = Выборка.MaxLoadPrice;
			Стр.Width			 = Выборка.Width;
			Стр.ECounting		 = Выборка.ECounting;
			Стр.BigCap			 = Выборка.BigCap;
			Стр.Cup				 = Выборка.Cup;
			Стр.РасчетнаяЦенаФОБ = Выборка.РасчетнаяЦенаФОБ;
			Стр.Factory			 = Выборка.Factory;
			Стр.LugName			 = Выборка.LugName;
			Стр.Вес				 = Выборка.Вес;
			Стр.LugCount		 = Выборка.LugCount;
			Стр.КрепежКоличество = Выборка.КрепежКоличество;
		КонецЦикла;
	КонецЕсли;
	
	Вес = ЕдиницаХраненияОстатков.Вес;
	Если ЭтоНовый() Тогда
		АртикулРавенКоду = Истина;
		Артикул = "";
		ЗаполнитьВес();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	//Если ЗначениеЗаполнено(Типоразмер) Тогда
	//	ШиринаП	 = Типоразмер.Ширина;
	//	Вылет	 = Типоразмер.Вылет;
	//	Нагрузка = Типоразмер.Нагрузка;
	//	КолКр	 = Типоразмер.КоличествоОтверстий;
	//	Диаметр	 = Типоразмер.Диаметр;
	//	ПЦД		 = Типоразмер.PCD;
	//	Ступица	 = Типоразмер.ДиаметрСтупицы;
	//КонецЕсли;

	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип диска"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Тип = стр.Значение;
	//КонецЦикла;	
	
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Крепеж в комплекте"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Крепеж = стр.Значение;
	//КонецЦикла;
	
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Форма диска"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Форма = стр.Значение;
	//КонецЦикла;
	//
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Вид диска"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Вид = стр.Значение;
	//КонецЦикла;
	//
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Диаметр резьбы"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	ДиаметрРезьбы = стр.Значение;
	//КонецЦикла;
	//
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Шаг резьбы"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	ШагРезьбы = стр.Значение;
	//КонецЦикла;
	
	//НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Объект.Установить(?(ЗначениеЗаполнено(мОбъектКопирования), ОбъектКопирования, ЭтотОбъект.Ссылка));
	//НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Количество лучей"));
	//НаборЗаписей.Прочитать();
	//для Каждого стр из НаборЗаписей Цикл
	//	Лучи = стр.Значение;
	//КонецЦикла;

	//Для каждого стр из Результат Цикл
	//	Тип = стр.Тип;
	//	Вид = стр.Вид;
	//	Форма = стр.Форма;
	//	Крепеж = стр.Крепеж;
	//	Лучи = стр.Лучи;
	//	ДиаметрРезьбы = стр.ДиаметрРезьбы;
	//	ШагРезьбы = стр.ШагРезьбы;
	//	Цвет = стр.Цвет;
	//КонецЦикла;
		
КонецПроцедуры

Процедура ТипоразмерПриИзменении(Элемент)
	
	ШиринаП	 = Элемент.Значение.Ширина;
	Вылет	 = Элемент.Значение.Вылет;
	Нагрузка = Элемент.Значение.Нагрузка;
	КолКр	 = Элемент.Значение.КоличествоОтверстий;
	Диаметр	 = Элемент.Значение.Диаметр;
	ПЦД		 = Элемент.Значение.PCD;
	Ступица	 = Элемент.Значение.ДиаметрСтупицы;
	
	ЗаполнитьНаименование();
	ЗаполнитьВес();
		
КонецПроцедуры

Процедура ЦветНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ЗначенияСвойствОбъектов.Код
	//			   |ИЗ
	//			   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//			   |ГДЕ
	//			   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	//СписокН = Новый СписокЗначений;
	//СписокН.ЗагрузитьЗначения(Массив);
	//нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
	//нФормаВыбора.Отбор.Код.Значение = СписокН;
	//нФормаВыбора.Отбор.Код.Использование = Истина;

	//нФормаВыбора.Открыть();
КонецПроцедуры

Процедура ФормаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Форма диска"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Код
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	СписокН = Новый СписокЗначений;
	СписокН.ЗагрузитьЗначения(Массив);
	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
    нФормаВыбора.Отбор.Код.Значение = СписокН;
    нФормаВыбора.Отбор.Код.Использование = Истина;

	нФормаВыбора.Открыть();
КонецПроцедуры

Процедура ВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Вид диска"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Код
	               |ИЗ
	               |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Владелец = &Тип";
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	СписокН = Новый СписокЗначений;
	СписокН.ЗагрузитьЗначения(Массив);
	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
    нФормаВыбора.Отбор.Код.Значение = СписокН;
    нФормаВыбора.Отбор.Код.Использование = Истина;

	нФормаВыбора.Открыть();
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Вес <> ЕдиницаХраненияОстатков.Вес Тогда
		Об = ЕдиницаХраненияОстатков.ПолучитьОбъект();
		Об.Вес = Вес;
		Об.Записать();
	КонецЕсли;
	
	Если АртикулРавенКоду Тогда
		Артикул = Код;
	КонецЕсли;	
	
	Если Цвет <> "" Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет");
		Нов.Значение = Цвет;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если Нагрузка <> 0 Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка");
		Нов.Значение = Нагрузка;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если НагрузкаПроизводителя <> 0 Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка (данные производителя)"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Максимальная нагрузка (данные производителя)");
		Нов.Значение = НагрузкаПроизводителя;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если НагрузкаМинимальная <> 0 Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Минимально допустимая нагрузка"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Минимально допустимая нагрузка");
		Нов.Значение = НагрузкаМинимальная;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если Завод <> "" Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод");
		Нов.Значение = Завод;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ЗаводДляТерминала <> "" Тогда
		НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод для Терминала"));
		Нов = НаборЗаписей.Добавить();
		Нов.Объект = ЭтотОбъект.Ссылка;
		Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Завод для Терминала");
		Нов.Значение = ЗаводДляТерминала;
		НаборЗаписей.Записать();
	КонецЕсли;
			
	ШтрихКод = "05000"+ ЭтотОбъект.Код;
	ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
	МенеджерШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	
	МенеджерШтрихкод.Владелец         = ЭтотОбъект.Ссылка;
	МенеджерШтрихкод.Штрихкод         = ШтрихКод;
	МенеджерШтрихкод.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("00001");
	МенеджерШтрихкод.ЕдиницаИзмерения = ЕдиницаХраненияОстатков; 
	МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
	МенеджерШтрихкод.Прочитать();	
	
	Если НЕ МенеджерШтрихкод.Выбран() Тогда
		МенеджерШтрихкод.Владелец         = ЭтотОбъект.Ссылка;
		МенеджерШтрихкод.Код              = Число(ЭтотОбъект.Код);
		МенеджерШтрихкод.Штрихкод         = ШтрихКод;
		МенеджерШтрихкод.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоКоду("00001");
		МенеджерШтрихкод.ЕдиницаИзмерения = ЕдиницаХраненияОстатков; 
		МенеджерШтрихкод.Качество         = Справочники.Качество.Новый;
		МенеджерШтрихкод.Записать();
	КонецЕсли;
	
	Если КомплектующиеПолеНовыйЭлемент.Количество() > 0 Тогда
		Для каждого СтрТЗ ИЗ КомплектующиеПолеНовыйЭлемент Цикл
			Запись = РегистрыСведений.КомплектующиеНоменклатуры.СоздатьМенеджерЗаписи();
			Запись.Номенклатура		 = ЭтотОбъект.Ссылка;
			Запись.Комплектующая	 = СтрТЗ.Комплектующая;
			Запись.Количество		 = СтрТЗ.Количество;
			Запись.ЕдиницаИзмерения	 = СтрТЗ.ЕдиницаИзмерения;
			Запись.ДоляСтоимости	 = СтрТЗ.ДоляСтоимости;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если УстанавливатьЦеныНоменклатуры Тогда
		Если ЦеныНоменклатуры.Количество() > 0 Тогда
			Док = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			Док.Дата = ТекущаяДата();
			Док.Ответственный = глТекущийПользователь;
			Для каждого СтрТЗ ИЗ ЦеныНоменклатуры Цикл
				СтрЦен = Док.ТипыЦен.Добавить();
				СтрЦен.ТипЦен = СтрТЗ.ТипЦен;
				СтрНом = Док.Товары.Добавить();
				СтрНом.Валюта			 = СтрТЗ.Валюта;
				СтрНом.Номенклатура		 = ЭтотОбъект.Ссылка;
				СтрНом.ТипЦен			 = СтрТЗ.ТипЦен;
				СтрНом.ЕдиницаИзмерения	 = ЭтотОбъект.Ссылка.ЕдиницаХраненияОстатков;
				СтрНом.Цена				 = СтрТЗ.Цена;
			КонецЦикла;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;
	
	Если УстанавливатьЦеныФОБ Тогда
		Для каждого СтрТЗ ИЗ ЦеныНоменклатурыФОБ Цикл
			Запись = РегистрыСведений.ЦенообразованиеФОБ.СоздатьМенеджерЗаписи();
			Запись.Номенклатура		 = ЭтотОбъект.Ссылка;
			Запись.БазоваяЦена		 = СтрТЗ.БазоваяЦена;
			Запись.ЦенаСоСкидкой	 = СтрТЗ.ЦенаСоСкидкой;
			Запись.Lug				 = СтрТЗ.Lug;
			Запись.Undercut			 = СтрТЗ.Undercut;
			Запись.Polish			 = СтрТЗ.Polish;
			Запись.DoudleColor		 = СтрТЗ.DoudleColor;
			Запись.Stripe			 = СтрТЗ.Stripe;
			Запись.Rivets			 = СтрТЗ.Rivets;
			Запись.Milling			 = СтрТЗ.Milling;
			Запись.PlastiicInserts	 = СтрТЗ.PlastiicInserts;
			Запись.SSLip			 = СтрТЗ.SSLip;
			Запись.MaxLoadPrice		 = СтрТЗ.MaxLoadPrice;
			Запись.Width			 = СтрТЗ.Width;
			Запись.ECounting		 = СтрТЗ.ECounting;
			Запись.BigCap			 = СтрТЗ.BigCap;
			Запись.Cup				 = СтрТЗ.Cup;
			Запись.РасчетнаяЦенаФОБ	 = СтрТЗ.РасчетнаяЦенаФОБ;
			Запись.Factory			 = СтрТЗ.Factory;
			Запись.LugName			 = СтрТЗ.LugName;
			Запись.Вес				 = СтрТЗ.Вес;
			Запись.LugCount			 = СтрТЗ.LugCount;
			Запись.КрепежКоличество	 = СтрТЗ.КрепежКоличество;
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Тип) Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип диска"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип диска");
	//	Нов.Значение = Тип;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
		
	//Если ЗначениеЗаполнено(Крепеж) Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Крепеж в комплекте"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Крепеж в комплекте");
	//	Нов.Значение = Крепеж;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Форма) Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Форма диска"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Форма диска");
	//	Нов.Значение = Форма;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Вид) Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Вид диска"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Вид диска");
	//	Нов.Значение = Вид;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	//
	//Если ДиаметрРезьбы <> 0 Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Диаметр резьбы"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Диаметр резьбы");
	//	Нов.Значение = ДиаметрРезьбы;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
	//Если ШагРезьбы <> 0 Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Шаг резьбы"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Шаг резьбы");
	//	Нов.Значение = ШагРезьбы;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	//
	//Если Лучи <> 0 Тогда
	//	НаборЗаписей  = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Количество лучей"));
	//	Нов = НаборЗаписей.Добавить();
	//	Нов.Объект = ЭтотОбъект.Ссылка;
	//	Нов.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Количество лучей");
	//	Нов.Значение = Лучи;
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЭтоНовый() Тогда
		Если ЗначениеНеЗаполнено(ЕдиницаХраненияОстатков) Тогда
			ВидТовара = НовыйВидТовара;
			БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
			ЭтотОбъект.Записать();
			Ед = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			Ед.Вес = Вес;
			ед.Владелец = ЭтотОбъект.Ссылка;
			ед.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
			ед.Наименование = "шт";
			ед.Записать();
			ЕдиницаХраненияОстатков = ед.Ссылка;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС               = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ТипШтрихкода) Тогда
			ТипШтрихкода            = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
		проверка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭтаФорма.Закрыть(проверка);
	
КонецПроцедуры

Процедура АртикулРавенКодуПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступность()
	
	Если АртикулРавенКоду Тогда
		ЭлементыФормы.Артикул.Доступность = Ложь;
	Иначе
		ЭлементыФормы.Артикул.Доступность = Истина;
	КонецЕсли;
	
	Если мОбъектКопирования = Неопределено Тогда
		ЭлементыФормы.Панель1.Страницы.Цены.Видимость = Ложь;
	Иначе
		ЭлементыФормы.Панель1.Страницы.Цены.Видимость = Истина;
		Если УстанавливатьЦеныНоменклатуры Тогда
			ЭлементыФормы.ЦеныНоменклатуры.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельЦеныНоменклатуры.Доступность = Истина;
		Иначе
			ЭлементыФормы.ЦеныНоменклатуры.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельЦеныНоменклатуры.Доступность = Ложь;
		КонецЕсли;
		Если УстанавливатьЦеныФОБ Тогда
			ЭлементыФормы.ЦеныНоменклатурыФОБ.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельЦеныНоменклатурыФОБ.Доступность = Истина;
		Иначе
			ЭлементыФормы.ЦеныНоменклатурыФОБ.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельЦеныНоменклатурыФОБ.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мОбъектКопирования) Тогда
		ЭлементыФормы.КомплектующиеПоле.Видимость = Ложь;
		ЭлементыФормы.КомплектующиеПолеНовыйЭлемент.Видимость = Истина;
	Иначе
		ЭлементыФормы.КомплектующиеПоле.Видимость = Истина;
		ЭлементыФормы.КомплектующиеПолеНовыйЭлемент.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроизводительПриИзменении(Элемент)
	
	ЗаполнитьНаименование();
	
КонецПроцедуры

Процедура МодельПриИзменении(Элемент)

	ЗаполнитьНаименование();
	
КонецПроцедуры

Процедура ЦветПриИзменении(Элемент)

	ЗаполнитьНаименование();
	
КонецПроцедуры

Процедура ЗаполнитьНаименование()
	
	Если Производитель = Справочники.Производители.НайтиПоКоду("65") Тогда
		НаименованиеПроизводителя = "LegeArtis Replica";
	Иначе
		НаименованиеПроизводителя = Производитель.Наименование; 
	КонецЕсли;
	
	Если Найти(Модель.Наименование, "_")>0 Тогда
		НаименованиеМодели = СтрЗаменить(Модель.Наименование, "_", "");
	Иначе
		НаименованиеМодели = Модель.Наименование; 
	КонецЕсли;
	
	Наименование		 = НаименованиеПроизводителя + " " + НаименованиеМодели + " " + Типоразмер.Наименование + " " + СокрЛП(Цвет);
	НаименованиеПолное	 = "Диск " + НаименованиеПроизводителя + " " + НаименованиеМодели + " " + Типоразмер.Наименование + " " + СокрЛП(Цвет);
	
КонецПроцедуры

Процедура ЗаполнитьВес()
	
	Вес = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Типоразмер", Типоразмер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НормыЗагрузки.Вес
	               |ИЗ
	               |	Справочник.НормыЗагрузки КАК НормыЗагрузки
	               |ГДЕ
	               |	НормыЗагрузки.Типоразмер = &Типоразмер";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Вес = Результат.Вес;
	Иначе
		Сообщить("Для типоразмера не заполнен вес");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстанавливатьЦеныНоменклатурыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура УстанавливатьЦеныФОБПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры


//Процедура КрепежНачалоВыбора(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Крепеж в комплекте"));
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ЗначенияСвойствОбъектов.Код
//				   |ИЗ
//				   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
//				   |ГДЕ
//				   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
//	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
//	СписокН = Новый СписокЗначений;
//	СписокН.ЗагрузитьЗначения(Массив);
//	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
//	нФормаВыбора.Отбор.Код.Значение = СписокН;
//	нФормаВыбора.Отбор.Код.Использование = Истина;

//	нФормаВыбора.Открыть();
//КонецПроцедуры


//Процедура ТипоразмерНачалоВыбора(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	нФормаВыбора = Справочники.Типоразмеры.ПолучитьФормуВыбора(, Элемент);
//	Если ШиринаП <> "" Тогда
//		нФормаВыбора.Отбор.Ширина.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.Ширина.Значение = ШиринаП;
//		нФормаВыбора.Отбор.Ширина.Использование = Истина;
//	КонецЕсли;
//	Если Вылет <> "" Тогда
//		нФормаВыбора.Отбор.Вылет.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.Вылет.Значение = Вылет;
//		нФормаВыбора.Отбор.Вылет.Использование = Истина;
//	КонецЕсли;
//	Если Нагрузка > 0 Тогда
//		нФормаВыбора.Отбор.Нагрузка.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.Нагрузка.Значение = Нагрузка;
//		нФормаВыбора.Отбор.Нагрузка.Использование = Истина;
//	КонецЕсли;
//	Если КолКр <> "" Тогда
//		нФормаВыбора.Отбор.КоличествоОтверстий.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.КоличествоОтверстий.Значение = КолКр;
//		нФормаВыбора.Отбор.КоличествоОтверстий.Использование = Истина;
//	КонецЕсли;
//	Если Диаметр <> "" Тогда
//		нФормаВыбора.Отбор.Диаметр.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.Диаметр.Значение = Диаметр;
//		нФормаВыбора.Отбор.Диаметр.Использование = Истина;
//	КонецЕсли;
//	Если ПЦД <> "" Тогда
//		нФормаВыбора.Отбор.PCD.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.PCD.Значение = ПЦД;
//		нФормаВыбора.Отбор.PCD.Использование = Истина;
//	КонецЕсли;
//	Если Ступица <> "" Тогда
//		нФормаВыбора.Отбор.ДиаметрСтупицы.ВидСравнения = ВидСравнения.Равно;
//		нФормаВыбора.Отбор.ДиаметрСтупицы.Значение = Ступица;
//		нФормаВыбора.Отбор.ДиаметрСтупицы.Использование = Истина;
//	КонецЕсли;
//	//Если ссылкаНаТовар.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
//	//	нФормаВыбора.Отбор.Родитель.ВидСравнения = ВидСравнения.Равно;
//	//	нФормаВыбора.Отбор.Родитель.Значение = Справочники.Типоразмеры.НайтиПоКоду("232");
//	//	нФормаВыбора.Отбор.Родитель.Использование = Истина;
//	//иначеЕсли ссылкаНаТовар.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
//	//	нФормаВыбора.Отбор.Родитель.ВидСравнения = ВидСравнения.Равно;
//	//	нФормаВыбора.Отбор.Родитель.Значение = Справочники.Типоразмеры.НайтиПоКоду("11");
//	//	нФормаВыбора.Отбор.Родитель.Использование = Истина;
//	//КонецЕсли;
//	нФормаВыбора.Открыть();
//КонецПроцедуры


//Процедура Кнопка1Нажатие(Элемент)
//	
//	Ответ = Вопрос("Вы уверены что хотите создать новый элемент
//	| справочника ТИПОРАЗМЕРЫ?", РежимДиалогаВопрос.ДаНет);
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		
//		НовЭлемент = Справочники.Типоразмеры.СоздатьЭлемент();
//		Если ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
//			НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски");
//		ИначеЕсли ЭтотОбъект.Ссылка.ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
//			НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Шины");
//		КонецЕсли;
//		//НовЭлемент = Справочники.Типоразмеры.СоздатьЭлемент();
//		НовЭлемент.Ширина = ШиринаП;
//		НовЭлемент.Нагрузка = Нагрузка;
//		НовЭлемент.Диаметр = Диаметр;
//		НовЭлемент.КоличествоОтверстий = КолКр;
//		НовЭлемент.PCD = ПЦД;
//		НовЭлемент.Вылет = Вылет;
//		НовЭлемент.ДиаметрСтупицы = Ступица;
//		
//		
//		Если НовЭлемент.Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски") Тогда
//			
//			НовЭлемент.Наименование = ШиринаП+"x"+Диаметр+"/"+КолКр+"x"+ПЦД+" ET"+Вылет+" D"+Ступица;
//			
//			//ИначеЕсли Родитель = Справочники.Типоразмеры.НайтиПоНаименованию("Диски") Тогда
//			//	
//			//	Наименование = 		
//		КонецЕсли;
//		НовЭлемент.Записать();
//		Типоразмер = НовЭлемент.Ссылка;
//		ФормаР = Типоразмер.ПолучитьФорму("ФормаЭлемента",);
//		ФормаР.Открыть();
//	КонецЕсли;
//	
//КонецПроцедуры


//Процедура ТипНачалоВыбора(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	нФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Тип",ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Тип диска"));
//	Запрос.Текст = "ВЫБРАТЬ
//				   |	ЗначенияСвойствОбъектов.Код
//				   |ИЗ
//				   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
//				   |ГДЕ
//				   |	ЗначенияСвойствОбъектов.Владелец = &Тип";
//	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
//	СписокН = Новый СписокЗначений;
//	СписокН.ЗагрузитьЗначения(Массив);
//	нФормаВыбора.Отбор.Код.ВидСравнения = ВидСравнения.ВСписке;
//	нФормаВыбора.Отбор.Код.Значение = СписокН;
//	нФормаВыбора.Отбор.Код.Использование = Истина;

//	нФормаВыбора.Открыть();
//КонецПроцедуры





