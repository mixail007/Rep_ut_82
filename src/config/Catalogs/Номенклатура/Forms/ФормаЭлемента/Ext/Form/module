Перем мТекущееРасширениеФайла;
Перем мТекущееОсновноеИзображение;
Перем мПустаяКартинка;
Перем тТипЦенДляПечати;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет
Перем мЖирныйШрифт;
Перем мЕдиницаИзмеренияОбъема, мЕдиницаИзмеренияВеса;
Перем мИспользоватьХарактеристики, мИспользоватьСерии;
Перем ТекущийШтрихкод;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает в поле картинки основное изображение номенклатуры
//
Процедура ПоказатьОсновноеИзображение() Экспорт
	
	//Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = Истина Тогда
	//	Если мТекущееОсновноеИзображение = Неопределено Тогда
	//		ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
	//	Иначе
	//		ЭлементыФормы.ОсновноеИзображение.Картинка = мТекущееОсновноеИзображение;
	//	КонецЕсли;
	//КонецЕсли;
	
//ПутьКФотоНаСайте = "http://nn.kolesatyt.ru/upload/photos/";
 // ПутьКФотоНаСайте = "http://yarshintorg.ru/upload/photos/"; 
 ПутьКФотоНаСайте = "http://photo.yst.ru/";
     имяФайлаПусто = ПутьКФотоНаСайте+"nopic_tyre_s.jpg"; //Фото отсутствует
	типФайла = ".png";
	естьФайлМод = ЗначениеЗаполнено(ЭтотОбъект.Модель);
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = Истина Тогда
		путьККартинкамДисков      = ПутьКФотоНаСайте+"allwheels/";
		путьККартинкамШин	      = ПутьКФотоНаСайте+"tires/";
		путьККартинкамАксессуаров = ПутьКФотоНаСайте+"accessories/";
		путьККартинкамРеклама     = ПутьКФотоНаСайте+"reklamnaya_produkciya/";
		путьККартинкамАКБ         = ПутьКФотоНаСайте+"batteries/";    //yst.ru/photos/akb/
		
	
		Если ЭтотОбъект.ВидТовара=Перечисления.ВидыТоваров.Диски тогда
			естьФайлМод = ИСТИНА; // только по моделям!
			путьККартинкамТов         = путьККартинкамДисков; // ДИСКИ
			
			//папкаПроизводителя = нрег(ЭтотОбъект.Производитель);
			//если найти(папкаПроизводителя, "replica")>0 тогда
			//	если найти(папкаПроизводителя, "replica td")>0 тогда
			//	папкаПроизводителя = "top driver";
			//	иначе
			//	папкаПроизводителя = "legeartis";
			//	КонецЕсли;
			//КонецЕсли;
			//путьККартинкамМоделей     = путьККартинкамДисков+папкаПроизводителя+"/";
			
			путьККартинкамМоделей     = путьККартинкамДисков;
			
			//24.03.14 Смирнов для картинки - ТОЛЬКО ДЛЯ ДИСКОВ нужен цвет
			РегСвва=РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
			РегСвва.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
			РегСвва.Отбор.Свойство.Установить(ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Цвет"));
			РегСвва.Прочитать();
			Если РегСвва.Количество()>0 Тогда
				Цвет = СокрЛП(РегСвва.Получить(0).Значение);
			Иначе
				Цвет="";
			КонецЕсли;
			
			ИмяФайлаМод = путьККартинкамМоделей+СокрЛП(нРЕГ(ЭтотОбъект.Модель.Наименование+"_"+Цвет))+типФайла;
		
		иначеЕсли ЭтотОбъект.ВидТовара=Перечисления.ВидыТоваров.Шины тогда
			путьККартинкамТов           = путьККартинкамШин; // ШИНЫ
			путьККартинкамМоделей 		= путьККартинкамШин;
			
			Если естьФайлМод тогда //и так и сяк
				ИмяФайлаМод = путьККартинкамМоделей+сокрЛП(ЭтотОбъект.Модель.Код)+типФайла;
			Иначе	
				ИмяФайлаТов = путьККартинкамТов+сокрЛП(ЭтотОбъект.Код)+типФайла;
			КонецЕсли;
		
		иначеЕсли ЭтотОбъект.ВидТовара=Перечисления.ВидыТоваров.Аксессуары тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамАксессуаров;
			путьККартинкамМоделей 		= путьККартинкамАксессуаров;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов = путьККартинкамТов+СокрЛП(нРЕГ(ЭтотОбъект.Код))+типФайла;
		иначеЕсли ЭтотОбъект.ВидТовара=Перечисления.ВидыТоваров.АКБ тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамАКБ;
			путьККартинкамМоделей 		= путьККартинкамАКБ;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов =путьККартинкамТов + строка(ЭтотОбъект.Код) +типФайла;
		иначеЕсли ЭтотОбъект.ВидТовара=Перечисления.ВидыТоваров.РекламнаяПродукция тогда
			естьФайлМод = ЛОЖЬ; // только по товарам!
			путьККартинкамТов			= путьККартинкамРеклама;
			путьККартинкамМоделей 		= путьККартинкамРеклама;
			//ИмяФайлаМод =путьККартинкамМоделей + строка(ЭтотОбъект.Модель.Код)+типФайла;
			ИмяФайлаТов = путьККартинкамТов+СокрЛП(нРЕГ(ЭтотОбъект.Код))+типФайла;
 		КонецЕсли;
		
				

		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("<HTML><HEAD>
		|<SCRIPT TYPE=""text/javascript"">
		|
		|function LoadPusto()
		|{
		//|alert('Нет Фото модели');
		|document.write('<IMG SRC="""+имяФайлаПусто+""" ALT=""НЕТ Фото!"" Width=""100%"">');
		|}   
		|</SCRIPT>
		|</HEAD>
		|<BODY>
		//+++ 12.08.2016 - добавлено дата-время!
		|    <IMG SRC="""+?(естьФайлМод,ИмяФайлаМод,ИмяФайлаТов)+"?t="+Формат(ТекущаяДата(),"ДЛФ=DT")+ """ ALT=""Фото "+?(естьФайлМод,"модели", "товара")+": "+?(естьФайлМод,ИмяФайлаМод,ИмяФайлаТов)+""" onError=""LoadPusto()"" Width=""100%"">
		|</BODY>
		|</HTML>");

		
	Иначе
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст("");
	КонецЕсли;
	
КонецПроцедуры // ПоказатьОсновноеИзображение()

// Показывает или прячет панель основного изображения в зависимости от пометки кнопки изображения
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка Тогда

		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;

	Иначе

		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Лево;

	КонецЕсли;

	ПоказатьОсновноеИзображение();

КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Процедура устанавливает видимость для элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.Панель.Страницы.ПоУмолчанию.Видимость    = Не Набор;
	ЭлементыФормы.Панель.Страницы.Дополнительные.Видимость = Не Набор;

	ОтборПоКомплектующим = Комплектующие.Отбор.Номенклатура;
	ОтборПоКомплектующим.Значение      = Ссылка;
	ОтборПоКомплектующим.Использование = Истина;
	
	
	ОтборПоЦенеФоб = ЦенообразованиеФОБ.Отбор.Номенклатура;
	ОтборПоЦенеФоб.Значение      = Ссылка;
	ОтборПоЦенеФоб.Использование = Истина;

	ОтборПоНагрузке = ПровереннаяНагрузкаДисков.Отбор.Номенклатура;
	ОтборПоНагрузке.Значение      = Ссылка;
	ОтборПоНагрузке.Использование = Истина;
	
	Если глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор") 
		или РольДоступна("ПравоЗавершенияРаботыПользователей") 
		или РольДоступна("ТолькоПросмотрНоменклатура") тогда
	иначе	
		ОтборТестПройден = ПровереннаяНагрузкаДисков.Отбор.ТестПройден;
		ОтборТестПройден.Значение      = Истина;
		ОтборТестПройден.Использование = Истина;
	КонецЕсли;
	
	ОтборПоАналогам = Аналоги.Отбор.Заменяемое;
	ОтборПоАналогам.Значение      = Ссылка;
	ОтборПоАналогам.Использование = Истина;
	
	//+++ 20.10.2015
	Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
		отборПрименяемость = Применяемость.Отбор.Номенклатура;
		отборПрименяемость.Значение      = Ссылка;
		отборПрименяемость.Использование = Истина;
	Иначе
		отборПрименяемость = Применяемость.Отбор.Типоразмер;
		отборПрименяемость.Значение      = Типоразмер;
		отборПрименяемость.Использование = Истина;
	КонецЕсли;
	
	
	Если ВидНоменклатуры = "Товар" Тогда
	
		ЭлементыФормы.ВидТовара.Видимость = Истина;
		ЭлементыФормы.НадписьВидТовара.Видимость = Истина;
		
	Иначе
		
		ЭлементыФормы.ВидТовара.Видимость = Ложь;
		ЭлементыФормы.НадписьВидТовара.Видимость = Ложь;
		
	КонецЕсли; 

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Если Не Услуга Тогда

		ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = Истина;
		ЭлементыФормы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = Истина;

	Иначе

		ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.БазоваяЕдиницаИзмерения.ОтметкаНезаполненного     = Ложь;
		ЭлементыФормы.ЕдиницаХраненияОстатков.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ЕдиницаХраненияОстатков.ОтметкаНезаполненного     = Ложь;

	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()

	Если ВидНоменклатуры = "Товар" Тогда
		ЭлементыФормы.ВестиУчетПоХарактеристикам.Доступность = Истина;
		ЭлементыФормы.ВестиУчетПоСериям.Доступность          = Истина;
		ЭлементыФормы.Весовой.Доступность                    = Истина;

		ДоступностьСерия = ?(мИспользоватьСерии, ВестиУчетПоСериям, Ложь);
	Иначе
		ЭлементыФормы.ВестиУчетПоХарактеристикам.Доступность = Ложь;
		ЭлементыФормы.ВестиУчетПоСериям.Доступность          = Ложь;
		ЭлементыФормы.Весовой.Доступность                    = Ложь;

		ДоступностьСерия = Ложь;
	КонецЕсли;

	ЭлементыФормы.НомерГТД.Доступность            = ДоступностьСерия;
	ЭлементыФормы.НадписьНомерГТД.Доступность     = ДоступностьСерия;
	ЭлементыФормы.СтранаПроисхождения.Доступность = ДоступностьСерия;
	ЭлементыФормы.НадписьСтрана.Доступность       = ДоступностьСерия;

КонецПроцедуры // УстановитьДоступность()

// Процедура заполняет на форме реквизит ВидНоменrлатуры по признакам Услуги и Набора
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьВидНоменклатурыПоПризнакам()

	Если Услуга Тогда
		ВидНоменклатуры = "Услуга";
	ИначеЕсли Набор Тогда
		ВидНоменклатуры = "Набор";
	Иначе
		ВидНоменклатуры = "Товар";
		Если ЗначениеНеЗаполнено(ЭлементыФормы.ВидТовара.Значение) Тогда
		
			ВидТовара = Перечисления.ВидыТоваров.Прочее;
		
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ЗаполнитьВидНоменклатурыПоПризнакам()

// Процедура заполняет по реквизиту формы ВидНоменлатуры признаки Услуга и Набор
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьПризнакиПоВидуНоменклатуры()

	Услуга   = Ложь;
	Набор    = Ложь;
	Если ВидНоменклатуры = "Услуга" Тогда
		Услуга = Истина;
		// снимем флаг ведения учета по характеристикам, ели он установлен
		Если ВестиУчетПоХарактеристикам Тогда
			ВестиУчетПоХарактеристикам = Не ВестиУчетПоХарактеристикам;
		КонецЕсли;
		Если ВестиУчетПоСериям Тогда
			ВестиУчетПоСериям = Не ВестиУчетПоСериям;
		КонецЕсли;
		Если Весовой Тогда
			Весовой = Не Весовой;
		КонецЕсли;
	ИначеЕсли ВидНоменклатуры = "Набор" Тогда
		Набор = Истина;
		// снимем флаг ведения учета по характеристикам, ели он установлен
		Если ВестиУчетПоХарактеристикам Тогда
			ВестиУчетПоХарактеристикам = Не ВестиУчетПоХарактеристикам;
		КонецЕсли;
		Если ВестиУчетПоСериям Тогда
			ВестиУчетПоСериям = Не ВестиУчетПоСериям;
		КонецЕсли;
		Если Весовой Тогда
			Весовой = Не Весовой;
		КонецЕсли;
	КонецЕсли;

	Если Услуга Или Набор Тогда
		НомерГТД = Неопределено;
		СтранаПроисхождения = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПризнакиПоВидуНоменклатуры()

// Процедура управляет видимостью колонок табличного поля "Штрихкоды".
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьКолонокШтрихкоды()

	Если Услуга Или Набор Тогда
		ВидимостьХарактеристики = Ложь;
		ВидимостьСерии          = Ложь;
		ВидимостьКачество       = Ложь;
	Иначе
		ВидимостьХарактеристики = ?(мИспользоватьХарактеристики, ВестиУчетПоХарактеристикам, Ложь);
		ВидимостьСерии          = ?(мИспользоватьСерии         , ВестиУчетПоСериям,          Ложь);
		ВидимостьКачество       = Истина;
	КонецЕсли;

	КолонкиШтрихКоды                                              = ЭлементыФормы.Штрихкоды.Колонки;
	КолонкиШтрихКоды.ХарактеристикаНоменклатуры.ИзменятьВидимость = ВидимостьХарактеристики;
	КолонкиШтрихКоды.ХарактеристикаНоменклатуры.Видимость         = ВидимостьХарактеристики;
	КолонкиШтрихКоды.СерияНоменклатуры.ИзменятьВидимость          = ВидимостьСерии;
	КолонкиШтрихКоды.СерияНоменклатуры.Видимость                  = ВидимостьСерии;
	КолонкиШтрихКоды.Качество.ИзменятьВидимость                   = ВидимостьКачество;
	КолонкиШтрихКоды.Качество.Видимость                           = ВидимостьКачество;

КонецПроцедуры // УстановитьВидимостьКолонокШтрихкоды()

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура записывает единицу хранения остатков номенклатуры.
//
Процедура ПроверитьЕдиницуХраненияОстатков(Отказ)

	Если НЕ ЗначениеНеЗаполнено(ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли; 

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.УстановитьНовыйКод(?(Константы.ПрефиксКодаЕдиниц.Получить()<>"",Константы.ПрефиксКодаЕдиниц.Получить(),""));

		НайденнаяЕдиницаОбъект.Наименование            = БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = Ссылка;
		Если ВидТовара <> Перечисления.ВидыТоваров.Аксессуары Тогда
			НайденнаяЕдиницаОбъект.Вес   = ПолучитьВесНеттоИзТипоразмера(Ссылка, Ссылка.Типоразмер);//по НормеЗагрузки
			НайденнаяЕдиницаОбъект.Объем = ВычислитьОбъемНоменклатуры(Ссылка, 3);  //+++ 27.05.2015 - яштПрочее
		КонецЕсли;
		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать единицу хранения остатков: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
	КонецЕсли;
	
	ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	ЗаписатьВФорме();

КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Функция РазрешеноРедактирование()
    
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ГруппаНоменклатуры
	|ИЗ
	|	РегистрСведений.ГруппыРедактированияНоменклатуры
	|ГДЕ
	|	Пользователь = &Пользователь
	|";
	
	Результат = Запрос.Выполнить().Выгрузить();
	СписокГрупп = Новый СписокЗначений;
	СписокГрупп = Результат.ВыгрузитьКолонку("ГруппаНоменклатуры");
	
	Для каждого СтрокаСписка Из СписокГрупп Цикл
	
		Если СтрокаСписка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		
			Возврат Истина;	
		
		КонецЕсли; 	
	
	КонецЦикла; 
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Родитель", Родитель);
	//Запрос.УстановитьПараметр("СписокГрупп", СписокГрупп);
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	*
	//|ИЗ 
	//|   Справочник.Номенклатура
	//|ГДЕ 
	////|	Ссылка = &Родитель
	//|	(&Родитель В ИЕРАРХИИ (&СписокГрупп) ИЛИ &Родитель В (&СписокГрупп))
	//|";
	//
	//
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого Группа Из СписокГрупп Цикл
	
		Если ЭтотОбъект.ПринадлежитЭлементу(Группа)
			 ИЛИ ЭтотОбъект.Родитель = Группа Тогда
		
				Возврат Истина;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	//Если Выборка.Количество() > 0 Тогда
	//
	//	Возврат Истина;
	//	
	//Иначе
	//	
	//	Возврат Ложь;
	//
	//КонецЕсли; 
	//
	
	Возврат Ложь;
	
КонецФункции

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	мЭтоНовый = Ложь;
	
	Если ЭтоНовый() Тогда
		мЭтоНовый = Истина;
		Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьДобавлятьЭлементыНоменклатуры") Тогда
			
			Предупреждение("Вам не разрешено добавлять новые элементы!", 10);
			Отказ = Истина;
			Возврат;
			
		Иначе
			
			Если НЕ РазрешеноРедактирование() Тогда
				
				Предупреждение("Вам не разрешено добавлять новые элементы" + Символы.ПС +
							   "в группу: " + Родитель + "!", 10);
				Отказ = Истина;          
				Возврат;			
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	ПрочитатьЗаполнитьКатегории();

	//+++ 11.01.2013
//Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава"))  или
	Если  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"УчетТолькоПоПодразделениюПользователя") тогда
		ЭлементыФормы.ДействияФормы.Видимость = ложь;
        ЭлементыФормы.ДействияФормы.Доступность = ложь;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда  //Плотников
		//Вид = Перечисления.ВидыТоваров.Шины;
		Отбор = Ложь;
		Если ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("9199751")) Тогда                                     
			ЗначОтбор = Перечисления.ВидыТоваров.РекламнаяПродукция;
			отбор = Истина;
		ИначеЕсли ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0080004")) Тогда	
			ЗначОтбор = Перечисления.ВидыТоваров.КрышкиНаклейки;
			отбор = Истина;
		ИначеЕсли ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("0080021")) Тогда	
			ЗначОтбор = Перечисления.ВидыТоваров.АКБ;
			отбор = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидТовара) Тогда 
			
			Вид = ВидТовара;
			
		иначе
			
			Форма= Перечисления.ВидыТоваров.ПолучитьФормуВыбора();
			если отбор Тогда
				Форма.Отбор.Ссылка.ВидСравнения = ВидСравнения.Равно;
				Форма.Отбор.Ссылка.Значение = ЗначОтбор;
				Форма.Отбор.Ссылка.Использование = Истина;
			КонецЕсли;
			Вид = Форма.ОткрытьМодально();
			
		КонецЕсли;
		
		Если вид <> неопределено Тогда
			Если Вид = Перечисления.ВидыТоваров.Шины Тогда
				ФормаП = ПолучитьФорму("ФормаДанныхШины");
				ФормаП.НовыйВидТовара =Перечисления.ВидыТоваров.Шины;
				Проверка = ФормаП.ОткрытьМодально();
				Если Проверка = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
				ПрочитатьЗаполнитьСвойстваИЗначения();
			ИначеЕсли Вид = Перечисления.ВидыТоваров.Диски Тогда
				ФормаП = ПолучитьФорму("ФормаДанныхДиски");
				ФормаП.НовыйВидТовара =Перечисления.ВидыТоваров.Диски;
				Проверка = ФормаП.ОткрытьМодально();
				Если Проверка = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
				ПрочитатьЗаполнитьСвойстваИЗначения();
			ИначеЕсли Вид = Перечисления.ВидыТоваров.АКБ Тогда
				ФормаП = ПолучитьФорму("ФормаДанныхАКБ");
				ФормаП.НовыйВидТовара =Перечисления.ВидыТоваров.АКБ;
				Проверка = ФормаП.ОткрытьМодально();
				Если Проверка = Ложь Тогда
					Отказ = Истина;
				КонецЕсли;
				ПрочитатьЗаполнитьСвойстваИЗначения();
			Иначе
				ВидТовара = Вид;
			КонецЕсли;
		Иначе
			отказ = истина;
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

// Обработчик события ПриОткрытии для Формы.
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		Если ЗначениеНеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			БазоваяЕдиницаИзмерения = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяЕдиницаПоКлассификатору");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС               = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ТипШтрихкода) Тогда
			ТипШтрихкода            = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
	ЭлементыФормы.Код.Доступность = ЛОЖЬ; //+++ 27.09.2016 - НЕЛЬЗЯ трогать код! 
	
	Иначе 
		
		//+++ 09.06.2018 по задаче № 48920
		Если ВидТовара = перечисления.ВидыТоваров.Диски 
		и Производитель.Код=3657 
		и (    НоменклатурнаяГруппа.Код="00022" 
		   или НоменклатурнаяГруппа.Код="00078" ) тогда//VISSOL Кованные или Производство кованных дисков...
		ЭлементыФормы.ПутьКфайламСПрограммой.Доступность = Истина;
		    Если ПутьКфайламСПрограммой="" тогда //проверяем наличие файлов
		 	ПутьКфайламСПрограммой0 = "\\terminal\Vissol\"+Код;
				спис=найтиФайлы(ПутьКфайламСПрограммой0,"*.*",Истина);
				Если спис.Количество() > 0 тогда //сама папка тоже файл ?!
				Предупреждение("Есть файлы с программой для этого диска!
			      |Заполните Вес и Путь к файлам с программой 
			      |на закладке ""Единицы измерения"".",60);
			   КонецЕсли;
		    Иначе
				спис=найтиФайлы(ПутьКфайламСПрограммой,"*.*",Истина);
				Если спис.Количество() = 0 тогда //сама папка тоже файл ?!
				Предупреждение("НЕТ файлов с программой для этого диска!
			      				|в папке: "+ПутьКфайламСПрограммой,60);
				ПутьКфайламСПрограммой = "";				
				ИначеЕсли ЕдиницаХраненияОстатков.Вес=0 тогда
				Предупреждение(" Выберите Вес этого диска!
								|Уже есть файлы с программой 
								|в папке: "+ПутьКфайламСПрограммой,60);
				ПутьКфайламСПрограммой = "";				
				иначе //все ок, есть папка, есть файлы менять путь не надо!
				ЭлементыФормы.ПутьКфайламСПрограммой.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
	     КонецЕсли;
					   
	КонецЕсли;
	
	

	// Заполнить список выбора номенклатуры
	ЭлементыФормы.ВидНоменклатуры.СписокВыбора.Добавить("Товар");
	ЭлементыФормы.ВидНоменклатуры.СписокВыбора.Добавить("Услуга");
	ЭлементыФормы.ВидНоменклатуры.СписокВыбора.Добавить("Набор");

	мЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	Если ЗначениеНеЗаполнено(мЕдиницаИзмеренияВеса) Тогда
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (не назначена единица измерения)";
	Иначе
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Вес.ТекстШапки = "Вес (" + мЕдиницаИзмеренияВеса.Наименование +")";
	КонецЕсли;

	мЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();

	Если ЗначениеНеЗаполнено(мЕдиницаИзмеренияОбъема) Тогда
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Объем.ТекстШапки = "Объем (не назначена единица измерения)";
	Иначе
		ЭлементыФормы.ЕдиницыИзмерения.Колонки.Объем.ТекстШапки = "Объем (" + мЕдиницаИзмеренияОбъема.Наименование +")";
	КонецЕсли;

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	//мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();

	ПоказыватьКартинку = ВосстановитьЗначение("Справочники.Номенклатура.ФормаЭлемента.Изображение");

	Если ПоказыватьКартинку = Неопределено Тогда
		ПоказыватьКартинку = Истина;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = ПоказыватьКартинку;

	ПоказатьСпрятатьПанельОсновногоИзображения();

	ЗаполнитьВидНоменклатурыПоПризнакам();

	// Установить видимость "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	Если НЕ мИспользоватьХарактеристики Тогда
		ЭлементыФормы.ВестиУчетПоХарактеристикам.Видимость                 = мИспользоватьХарактеристики;
		КолонкиКомплектующие                                               = ЭлементыФормы.Комплектующие.Колонки;
		КолонкиКомплектующие.ХарактеристикаКомплектующей.ИзменятьВидимость = мИспользоватьХарактеристики;
		КолонкиКомплектующие.ХарактеристикаКомплектующей.Видимость         = мИспользоватьХарактеристики;
	КонецЕсли;

	Если НЕ мИспользоватьСерии Тогда
		ЭлементыФормы.ВестиУчетПоСериям.Видимость = мИспользоватьСерии;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьДоступность();
	УстановитьВидимостьКолонокШтрихкоды();
	УстановитьАвтоотметку();

	Штрихкоды.Отбор.Владелец.Значение      = ЭтотОбъект.Ссылка;
	Штрихкоды.Отбор.Владелец.Использование = Истина;
	ЭлементыФормы.Штрихкоды.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактироватьЭлементыНоменклатуры") Тогда
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельКомплектующие.Доступность = Ложь;
		ЭлементыФормы.Комплектующие.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельШтрихкоды.Доступность = Ложь;
		ЭлементыФормы.Штрихкоды.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКомплектующие1.Доступность = Ложь;
		ЭлементыФормы.Аналоги.Доступность = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьФормуРедактирования.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельНагрузка.Доступность = Ложь;
		ЭлементыФормы.ПровереннаяНагрузкаДисков.Доступность = Ложь;
		ЭлементыФормы.ОстатокПроверен.Доступность = Ложь;

	Иначе
		
		Если НЕ РазрешеноРедактирование() Тогда
		
			ЭтаФорма.ТолькоПросмотр = Истина;
			ЭлементыФормы.КоманднаяПанельЕдиницыИзмерения.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельКомплектующие.Доступность = Ложь;
		    ЭлементыФормы.Комплектующие.Доступность = Ложь;
			элементыФормы.ЦеноОбразованиеФОБ.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельШтрихкоды.Доступность = Ложь;
		    ЭлементыФормы.Штрихкоды.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельКомплектующие1.Доступность = Ложь;
		    ЭлементыФормы.Аналоги.Доступность = Ложь;
		    ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьФормуРедактирования.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельНагрузка.Доступность = Ложь;
		    ЭлементыФормы.ПровереннаяНагрузкаДисков.Доступность = Ложь;
            ЭлементыФормы.ОстатокПроверен.Доступность = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", планыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00194"));
	Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Результат = Результат.Выгрузить();
		Если Результат[0].Значение = Истина Тогда
			ЭлементыФормы.КоманднаяПанельНагрузка.Доступность = Истина;
			ЭлементыФормы.ПровереннаяНагрузкаДисков.Доступность = Истина;
		конецЕсли;
	конецЕсли;
	
	//	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УстанавливатьМаркировку") Тогда
	//		ЭлементыФормы.ОстатокПроверен.Доступность = Истина;
	//конецЕсли;
    	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", планыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00195"));
	Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Результат = Результат.Выгрузить();
		Если Результат[0].Значение = Истина Тогда
         ЭлементыФормы.ОстатокПроверен.Доступность = Истина;
        конецЕсли;
	конецЕсли;

	
	ОбновитьДатуСозданияЭлемента();
	
	Если ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.ВнеоборотныеАктивы)
		 ИЛИ ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.Материалы) 
	     ИЛИ ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.ЛокальнаяНоменклатура)
		 ИЛИ ЭтотОбъект.ПринадлежитЭлементу(Справочники.Номенклатура.Автозапчасти) Тогда
		 
		 ЭлементыФормы.Родитель.ТолькоПросмотр = Истина;
	
	КонецЕсли; 

	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("Справочники.Номенклатура.ФормаЭлемента.Изображение", ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка);
	ТекущийВидПродукции = Неопределено;

КонецПроцедуры // ПриЗакрытии()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если Услуга Тогда
		Если НЕ ЗначениеНеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			ПроверитьЕдиницуХраненияОстатков(Отказ);
		КонецЕсли;
	Иначе
		Если ЗначениеНеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			Предупреждение("Перед записью необходимо определить базовую единицу измерения!");
			Отказ = Истина;
		Иначе
			ПроверитьЕдиницуХраненияОстатков(Отказ);
		КонецЕсли;

		Если ПустаяСтрока(ЕдиницаХраненияОстатков) Тогда
			Предупреждение("Перед записью необходимо определить единицу хранения остатков!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не СтатьяЗатрат.Пустая() Тогда
		ВидЗатрат = СтатьяЗатрат.ВидЗатрат;
		Если ВидЗатрат = Перечисления.ВидыЗатрат.Материальные И Услуга Тогда
			Сообщить("Укажите нематериальную статью затрат!", СтатусСообщения.Внимание);
			Отказ = Истина;
		ИначеЕсли Не ВидЗатрат = Перечисления.ВидыЗатрат.Материальные И Не Услуга Тогда
			Сообщить("Укажите материальную статью затрат!", СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

	
КонецПроцедуры // ПриЗаписи()

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()

	// Оповестим форму списка о тома, что возможно надо обновить изображение.
	Оповестить("ЗаписанЭлементНоменклатуры", Ссылка, ЭтаФорма);

	УстановитьВидимость();
	Штрихкоды.Отбор.Владелец.Значение      = ЭтотОбъект.Ссылка;
	Штрихкоды.Отбор.Владелец.Использование = Истина;
	ЭлементыФормы.Штрихкоды.НастройкаОтбора.Владелец.Доступность = Ложь;

	ОбновитьДатуСозданияЭлемента();
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	ПрочитатьЗаполнитьСвойстваИЗначения();
	ПрочитатьЗаполнитьКатегории();
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		
		тТипЦенДляПечати = ЗначениеВыбора;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		
		//Если НЕ ОсновноеИзображение = ЗначениеВыбора Тогда
		//	ОсновноеИзображение = ЗначениеВыбора;
		//КонецЕсли;
		//
		//мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
		//ПоказатьОсновноеИзображение();
		//
		//СписокКнопокФайлов = Новый СписокЗначений;
		//СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		//СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		//ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") и Источник.Пустая())) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		
		Если ИмяОбновляемогоЭлемента = "ОсновноеИзображение" Тогда
			// обновляем картинку на первой странице
			Если мТекущееОсновноеИзображение <> ОсновноеИзображение.Хранилище.Получить() Тогда
				мТекущееОсновноеИзображение = ОсновноеИзображение.Хранилище.Получить();
				ПоказатьОсновноеИзображение();
			КонецЕсли;
					
		ИначеЕсли ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)

	Если ЭтоНовый() Тогда
		Предупреждение("Необходимо записать элемент номенклатуры!");
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку Изображения
//
Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;

	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры // ДействияФормыИзображение()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ С ЕДИНИЦАМИ ИЗМЕРЕНИЯ

// Обработчик события ПриИзменении для базовой единицы измерения.
//
Процедура БазоваяЕдиницаИзмеренияПриИзменении(Элемент)

КонецПроцедуры

// Обработчик события ПриИзменении для наименования.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" для "ПолеИзображение"
//
Процедура ПолеИзображениеНажатие(Элемент)

	Если ЭлементыФормы.ТабличноеПолеФотоГалереи.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 

//	ОткрытьФормуИзмененияТекущегоИзображения();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" для "ЕдиницаХраненияОстатков"
//
Процедура ЕдиницаХраненияОстатковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницаХраненияОстатковНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" для "ЕдиницаДляОтчетов"
//
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницаДляОтчетовНачалоВыбора()

// Обработчик события нажатия на кнопку Этикетка.
//
Процедура ДействияФормыЭтикетка(Кнопка)

	ПечатьЭтикеток(Ссылка);

КонецПроцедуры

// Обработчик события нажатия на кнопку Ценник.
//
Процедура ДействияФормыЦенник(Кнопка)

	Данные = Новый Структура("Организация, ТаблицаДанных, ДатаПечати");

	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаДанных.Колонки.Добавить("ХарактеристикаНаименование");
	ТаблицаДанных.Колонки.Добавить("Цена");
	ТаблицаДанных.Колонки.Добавить("Единица");
	ТаблицаДанных.Колонки.Добавить("ЕдиницаНаименование");
	ТаблицаДанных.Колонки.Добавить("Валюта");

	ТипыЦен = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма);
	ТипыЦен.ОткрытьМодально();
	
	Если тТипЦенДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВалютаЦены = Неопределено;
	ЕдиницаЦены = Неопределено;
	ЦенаПечати = ПолучитьЦенуНоменклатуры(Ссылка,, тТипЦенДляПечати,, ЕдиницаЦены, ВалютаЦены);
	Если ЦенаПечати = 0 Тогда
		Если  НЕ ВестиУчетПоХарактеристикам Тогда
			Сообщить("Для товара " + НаименованиеПолное + " не установлена цена выбранного типа. Эта позиция не печается. ", СтатусСообщения.Внимание);
			Возврат;
		Иначе
			Сообщить("Для товара " + НаименованиеПолное + " без характеристик не установлена цена выбранного типа.", СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Номенклатура             = Ссылка;
		СтрокаДанных.НоменклатураНаименование = НаименованиеПолное;
		СтрокаДанных.Единица                  = ЕдиницаЦены;
		СтрокаДанных.ЕдиницаНаименование      = ЕдиницаЦены.Наименование;
		СтрокаДанных.Цена                     = ЦенаПечати;
		СтрокаДанных.Валюта                   = ВалютаЦены;
	КонецЕсли;
	
	Если ВестиУчетПоХарактеристикам Тогда
		Ответ = Вопрос("Печатать ценники по характеристикам?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Ссылка);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				Характеристика = ВыборкаХарактеристик.Ссылка;
				ВалютаЦены = Неопределено;
				ЕдиницаЦены = Неопределено;
				ЦенаПечати = ПолучитьЦенуНоменклатуры(Ссылка, Характеристика, тТипЦенДляПечати,, ЕдиницаЦены, ВалютаЦены);
				Если ЦенаПечати = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтрокаДанных = ТаблицаДанных.Добавить();
				СтрокаДанных.Номенклатура               = Ссылка;
				СтрокаДанных.НоменклатураНаименование   = НаименованиеПолное;
				СтрокаДанных.ХарактеристикаНаименование = Характеристика.Наименование;
				СтрокаДанных.Единица                    = ЕдиницаЦены;
				СтрокаДанных.ЕдиницаНаименование        = ЕдиницаЦены.Наименование;
				СтрокаДанных.Цена                       = ЦенаПечати;
				СтрокаДанных.Валюта                     = ВалютаЦены;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ТаблицаДанных.Количество() = 0 Тогда
		Сообщить("Для товара " + НаименованиеПолное + " не установлено цен выбранного типа.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Данные.Организация   = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация");
	Данные.ТаблицаДанных = ТаблицаДанных;
	Данные.ДатаПечати    = ТекущаяДата();

	Ценники = НапечататьЦенники(Данные);
	НапечататьДокумент(Ценники, , , "Ценник на " + Наименование);

	тТипЦенДляПечати = Неопределено;

КонецПроцедуры

// Обработчик события нажатия на кнопку Комплектующие.
//
Процедура ДействияФормыКомплектующие(Кнопка)

	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(Ссылка);
	ТабДокумент = НапечататьКомплектующие(МассивНоменклатуры);

	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		НапечататьДокумент(ТабДокумент, , , "Комплектующие");
	Иначе
		Предупреждение("Для "+СокрЛП(Ссылка)+" список комплектующих не задан!");
	КонецЕсли;

КонецПроцедуры // ДействияФормыКомплектующие()

// Обработчик события элемента КоманднаяПанельФормы.ДействиеОткрытьПрайсЛист.
//
Процедура ДействияФормыОткрытьПрайсЛист(Кнопка)

	Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения",,).Открыть();

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ЕдиницаХраненияОстатков = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.Коэффициент.ТолькоПросмотр = (ДанныеСтроки.Ссылка = ЕдиницаХраненияОстатков);

КонецПроцедуры // ЕдиницыИзмеренияПриВыводеСтроки()

// Обработчик события ПередНачаломДобавления элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры // ЕдиницыИзмеренияПередНачаломДобавления()

// Обработчик события ПриАктивизацииСтроки элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры // ЕдиницыИзмеренияПриАктивизацииСтроки()

// Обработчик события ПриНачалеРедактирования элемента формы ЕдиницыИзмерения.
//
Процедура ЕдиницыИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда

		Если Элемент.ТекущиеДанные.Коэффициент = 0 Тогда
			Элемент.ТекущиеДанные.Коэффициент = 1;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ЕдиницаПоКлассификатору) Тогда
			Элемент.ТекущиеДанные.ЕдиницаПоКлассификатору = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяЕдиницаПоКлассификатору");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЕдиницыИзмеренияПриНачалеРедактирования()

// Обработчик события ПриИзменении реквизита формы "ВидНоменклатуры"
//
Процедура ВидНоменклатурыПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = "Товар";
		ВидТовара = Перечисления.ВидыТоваров.Прочее;
	КонецЕсли;

	ЗаполнитьПризнакиПоВидуНоменклатуры();

	УстановитьВидимость();
	УстановитьДоступность();
	УстановитьВидимостьКолонокШтрихкоды();
	УстановитьАвтоотметку();

КонецПроцедуры

// Обработчик события ПриИзменении флажка "ФлажокВестиУчетПоХарактеристикам"
//
Процедура ВестиУчетПоХарактеристикамПриИзменении(Элемент)

	УстановитьВидимость();
	УстановитьВидимостьКолонокШтрихкоды();
	УстановитьДоступность();

КонецПроцедуры // ФлажокВестиУчетПоХарактеристикамПриИзменении()

// Обработчик события ПриИзменении флажка "ФлажокВестиУчетПоСериям"
//
Процедура ВестиУчетПоСериямПриИзменении(Элемент)

	УстановитьВидимость();
	УстановитьВидимостьКолонокШтрихкоды();
	УстановитьДоступность();

КонецПроцедуры // ФлажокВестиУчетПоСериямПриИзменении()

// Процедура - обработчик события "Нажатие" картинки "ОсновноеИзображение"
//
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Необходимо записать элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуИзображения(ЭтаФорма, ОсновноеИзображение, Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП ЕДИНИЦЫ ИЗМЕРЕНИЯ

// Процедура - обработчик события "ПриИзменении" табличного поля "ЕдиницыИзмерения".
//
Процедура ЕдиницыИзмеренияЕдиницаПоКлассификаторуПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.ЕдиницыИзмерения.ТекущиеДанные;

	Если ПустаяСтрока(ТекущиеДанные.Наименование) Тогда
		ТекущиеДанные.Наименование = ТекущиеДанные.ЕдиницаПоКлассификатору.Наименование;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП КОМПЛЕКТУЮЩИЕ

// Обработчик события ПередНачаломДобавления элемента Комплектующие
//
Процедура КомплектующиеПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Элемент еще не записан. Записать?", РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				ЗаписатьВФорме();
			Исключение
				Отказ = Истина;
			КонецПопытки;
				
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Комплектующие
//
Процедура КомплектующиеПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Количество    = 1;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента Комплектующие.Комплектующая
//
Процедура КомплектующиеКомплектующаяПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Комплектующая.ЕдиницаХраненияОстатков;
	Если Не ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаКомплектующей)
	   И СтрокаТабличнойЧасти.ХарактеристикаКомплектующей.Владелец <> СтрокаТабличнойЧасти.Комплектующая Тогда
		СтрокаТабличнойЧасти.ХарактеристикаКомплектующей = Неопределено;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТП ШТРИХКОДЫ

// Обработчик события ПередНачаломДобавления элемента Штрихкоды
//
Процедура ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если (ЭтоНовый()) Тогда
		Если Не ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Штрихкоды
//
Процедура ШтрихкодыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ТипШтрихкода     = ТипШтрихкода;
		Элемент.ТекущиеДанные.Код              = ПолучитьНовыйКодДляШтрихКода();
		Элемент.ТекущиеДанные.Владелец         = ЭтотОбъект.Ссылка;
		Элемент.ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаХраненияОстатков;
		Элемент.ТекущиеДанные.Качество         = Справочники.Качество.Новый;
		ТекущийШтрихкод = Неопределено;
	Иначе
		ТекущийШтрихкод                        = Элемент.ТекущиеДанные.Штрихкод;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента Штрихкоды
//
Процедура ШтрихкодыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если Не ОтменаРедактирования Тогда
		ТекЗапись = Элемент.ТекущиеДанные;
		Если ЗначениеНеЗаполнено(ТекЗапись.Штрихкод)
		   И (ЗначениеНеЗаполнено(ТекЗапись.ТипШтрихкода)
		 Или ТекЗапись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13) Тогда
			Ответ = Вопрос("Штрихкод не заполнен! Сформировать значение штрихкода автоматически?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТекЗапись.Штрихкод = СформироватьШтрихкод(ЭлементыФормы.Штрихкоды.ТекущиеДанные.Код, Весовой);
				ТекЗапись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			КонецЕсли;
		КонецЕсли;

		Если Не ЗначениеНеЗаполнено(ТекЗапись.ТипШтрихкода)
		   И Не ЗначениеНеЗаполнено(ТекЗапись.Штрихкод)
		   И (Не ПроверитьШтрихКод(ТекЗапись.Штрихкод, ТекЗапись.ТипШтрихкода)) Тогда
			Сообщить("Не верный штрихкод!", СтатусСообщения.Важное);
			ТекЗапись.ТипШтрихкода = Неопределено;
		КонецЕсли;

		НайденныеЗаписи = ПроверитьУникальностьШтрихКода(ТекЗапись.ШтрихКод, ТекЗапись.Код);
		Если НайденныеЗаписи <> Неопределено И НайденныеЗаписи.Количество()<>0 Тогда //Найдены неуникальные записи.
			Ответ = Вопрос(""+ТекЗапись.ШтрихКод+". Такой штрихкод уже установлен для других значений!"+Символы.ПС+
			"Показать записи с таким штрихкодом?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать();
				ФормаНаборЗаписей = НаборЗаписей.ПолучитьФорму("ФормаНабораЗаписей");
				ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Значение = ТекЗапись.ШтрихКод;
				ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Использование = Истина;
				ФормаНаборЗаписей.ОткрытьМодально();
			КонецЕсли;
			Если Константы.РазрешитьНеуникальныеШтрихкоды.Получить() = Ложь Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры



//+++ 16.03.2012 наш штрихКод
функция ПолучитьНовыйКодДляШтрихКодаЯШТ()

Если стрДлина(Код)<7 тогда
	код1 = Формат(число(Код), "ЧЦ=7; ЧВН=");
иначе 
	код1 = код;
КонецЕсли;	
	
ШтрихКод = "05000"+ Код;
ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);

возврат ШтрихКод;

КонецФункции


// Обработчик события нажатия на кнопку Новый штрих-код
//
Процедура НовыйШтрихкод(Кнопка = Неопределено) Экспорт

	ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	Если (ЭтоНовый())
	 ИЛИ (ЭлементыФормы.Штрихкоды.ТекущиеДанные = Неопределено) Тогда
		Если (ЭтоНовый()) Тогда
			Если Не ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
				Возврат
			КонецЕсли;
		КонецЕсли;

		ТекЗапись.Код = Ссылка.Код; //+++ 16.03.2012 ПолучитьНовыйКодДляШтрихКода();
		Штрихкод = ПолучитьНовыйКодДляШтрихКодаЯШТ(); 
		
		ТекЗапись.ШтрихКод = Штрихкод ;
		ТекЗапись.Владелец              = ЭтотОбъект.Ссылка;
		ТекЗапись.ЕдиницаИзмерения      = ЕдиницаХраненияОстатков;
		ТекЗапись.ТипШтрихкода          = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		ТекЗапись.Качество              = Справочники.Качество.Новый;
		попытка
			ТекЗапись.Записать();
			Ключ = Новый Структура("Код",ТекЗапись.Код);
		исключение
			Ключ = Новый Структура("Код", ссылка.Код);
		КонецПопытки;	
			
		ЭлементыФормы.Штрихкоды.ТекущаяСтрока = РегистрыСведений.Штрихкоды.СоздатьКлючЗаписи(Ключ);
	КонецЕсли;

	Если ЭлементыФормы.Штрихкоды.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбрана строка из таблицы штрихкодов, для которой регистрируется штрих-код.");
	Иначе //Получаем штрихкод и заносим его в выбранную строку
		//+++ 16.03.2012
		//было ШтрихКод   = СформироватьШтрихкод(ЭлементыФормы.Штрихкоды.ТекущиеДанные.Код, Весовой);
		Штрихкод = ПолучитьНовыйКодДляШтрихКодаЯШТ(); 
		//+++) 
		
		Если НЕ ТекЗапись.Выбран() Тогда
			ТекЗапись.Код          = ЭлементыФормы.Штрихкоды.ТекущиеДанные.Код;
			ТекЗапись.Прочитать();
			 //все данные еще раз!
			ТекЗапись.Код          = ЭлементыФормы.Штрихкоды.ТекущиеДанные.Код;
			ТекЗапись.Владелец              = ЭтотОбъект.Ссылка;
			ТекЗапись.ТипШтрихкода 			= ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			ТекЗапись.ЕдиницаИзмерения      = ЕдиницаХраненияОстатков;
			ТекЗапись.Качество              = Справочники.Качество.Новый;
		КОнецЕсли;
		
		ТекЗапись.Штрихкод     = ШтрихКод;
		попытка
			ТекЗапись.Записать();
		исключение
		КонецПопытки;	
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не(ВводДоступен()) Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый() И ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Штрихкоды.Добавить();
	КонецЕсли;

	Если Событие = "BarCodeValue"
	   И глТорговоеОборудование <> Неопределено Тогда
		Если ЭлементыФормы.Штрихкоды.ТекущиеДанные = Неопределено Тогда
			Сообщить("Не выбрана строка из таблицы штрихкодов, для которой регистрируется штрих-код.");
		Иначе //Получаем штрихкод и заносим его в выбранную строку

			ШтрихКод         = глТорговоеОборудование.УдалитьПрефиксИзШтрихКода(Данные);
			ТекущиеДанные = ЭлементыФормы.Штрихкоды.ТекущиеДанные;
			Если ТипЗнч(ТекущиеДанные) = Тип ("ТекущиеДанныеСписка") Тогда //Строка закрыта для редактирования.
				ТекЗапись     = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				ТекЗапись.Код = ТекущиеДанные.Код;
				ТекЗапись.Прочитать();
			Иначе //Строка открыта для редактирования.
				ТекЗапись = ТекущиеДанные;
			КонецЕсли;

			ТекущийШтрихКод    = ТекЗапись.Штрихкод;
			ТекЗапись.Владелец = Ссылка;
			НайденныеЗаписи    = ПроверитьУникальностьШтрихКода( ШтрихКод, ЭлементыФормы.Штрихкоды.ТекущиеДанные.Код);

			НеУникален = Ложь;
			Если НайденныеЗаписи <> Неопределено И НайденныеЗаписи.Количество()<>0 Тогда //Найдены неуникальные записи.

				Ответ = Вопрос(""+ШтрихКод+". Такой штрихкод уже установлен для других значений!"+Символы.ПС+
				"Показать записи с таким штрихкодом?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					НаборЗаписей.Прочитать();
					ФормаНаборЗаписей = НаборЗаписей.ПолучитьФорму("ФормаНабораЗаписей");
					ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Значение = ШтрихКод;
					ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Использование = Истина;
					ФормаНаборЗаписей.ОткрытьМодально();
				КонецЕсли;
				НеУникален = Истина;

			КонецЕсли;

			Если Не ЗначениеНеЗаполнено(ТекЗапись.ТипШтрихкода) Тогда

				Если НЕ ПроверитьШтрихКод(ШтрихКод, ТекЗапись.ТипШтрихкода) Тогда
					Сообщить("Штрихкод не соответствует выбранному типу!", СтатусСообщения.Важное);
					ТекЗапись.ТипШтрихкода = Неопределено;
					Если ТипЗнч(ТекущиеДанные) = Тип ("ТекущиеДанныеСписка") Тогда //Строка закрыта для редактирования.
						ТекЗапись.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если Константы.РазрешитьНеуникальныеШтрихкоды.Получить()
			 Или (Не Константы.РазрешитьНеуникальныеШтрихкоды.Получить()) И (Не НеУникален) Тогда
				Если (Не ЗначениеНеЗаполнено(ТекущийШтрихКод)) И (ТекущийШтрихКод <> Штрихкод) Тогда
					Ответ = Вопрос("Задать новый штрих-код для выбранной строки?", РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Да ИЛИ Ответ = Неопределено Тогда
					
					ТекЗапись.Штрихкод = ШтрихКод;
					Если ТипЗнч(ТекущиеДанные) = Тип ("ТекущиеДанныеСписка") Тогда //Строка закрыта для редактирования.
						ТекЗапись.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		глТорговоеОборудование.СканерПосылкаДанных(1);
	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры


Процедура ДействияФормыОстаткиНаСкладах(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед построением отчетов по элементу необходимо записать элемент!");
		Возврат;
	КонецЕсли;

	яштОткрытьОтчетПоНоменклатуреОстаткиНаСкладах(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыВедомостьНаСкладах(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед построением отчетов по элементу необходимо записать элемент!");
		Возврат;
	КонецЕсли;

	яштОткрытьОтчетПоНоменклатуреВедомостьНаСкладах(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыВедомостьНаСкладахПоДокументам(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед построением отчетов по элементу необходимо записать элемент!");
		Возврат;
	КонецЕсли;

	яштОткрытьОтчетПоНоменклатуреВедомостьНаСкладахПоДокументам(Ссылка);
	
КонецПроцедуры

////
Функция ByteToDec(знч16) Экспорт
	Если знч16 = "0" Тогда
		Возврат 0;
	ИначеЕсли знч16 = "1" Тогда
		Возврат 1;
	ИначеЕсли знч16 = "2" Тогда
		Возврат 2;
	ИначеЕсли знч16 = "3" Тогда
		Возврат 3;
	ИначеЕсли знч16 = "4" Тогда
		Возврат 4;
	ИначеЕсли знч16 = "5" Тогда
		Возврат 5;
	ИначеЕсли знч16 = "6" Тогда
		Возврат 6;
	ИначеЕсли знч16 = "7" Тогда
		Возврат 7;
	ИначеЕсли знч16 = "8" Тогда
		Возврат 8;
	ИначеЕсли знч16 = "9" Тогда
		Возврат 9;
	ИначеЕсли знч16 = "A" Тогда
		Возврат 10;
	ИначеЕсли знч16 = "B" Тогда
		Возврат 11;
	ИначеЕсли знч16 = "C" Тогда
		Возврат 12;
	ИначеЕсли знч16 = "D" Тогда
		Возврат 13;
	ИначеЕсли знч16 = "E" Тогда
		Возврат 14;
	ИначеЕсли знч16 = "F" Тогда
		Возврат 15;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция HexToDec(знч16) Экспорт
	знч10 = 0;
	длн = СтрДлина(знч16);
	Для й = 1 По СтрДлина(знч16) Цикл
		знч10 = знч10 + Pow(16, длн - й) * ByteToDec(Сред(знч16, й, 1));
	КонецЦикла;
	Возврат знч10;
КонецФункции

Функция ПолучитьУникальныйИдентификатор1СИзSQLСтроки(Строка) Экспорт
	
	Результат = СтрЗаменить(СтрЗаменить(Строка, "0X", ""), "0x", "");
	Результат = Сред(Результат, 25, 8) + "-" + Сред(Результат, 21, 4) + "-" + Сред(Результат, 17, 4) + "-" + Сред(Результат, 7, 2) + Сред(Результат, 5, 2) + "-" + Сред(Результат, 3, 2) + Сред(Результат, 1, 2) + Сред(Результат, 11, 2) + Сред(Результат, 9, 2) + Сред(Результат, 15, 2) + Сред(Результат, 13, 2);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМоментСозданияУникальногоИдентификатора(УИ) Экспорт
	
	УИ = СокрЛП(ВРег(СтрЗаменить("" + УИ, "-", "")));
	Если Не Сред(УИ, 13, 1) = "1" Тогда
		Возврат '00010101';
	КонецЕсли;
	интервал16 = ВРег(Сред(УИ, 14, 3) + Сред(УИ, 9, 4) + Сред(УИ, 1, 8));
	интервал10 = HexToDec(интервал16);
	интервал10сек = интервал10 / 10000000;
	
	Результат = Дата(1582, 10, 15) + интервал10сек;
	
	Возврат Результат + 3 * 3600;   //часовой пояс Москвы!
	
КонецФункции

Функция ПолучитьМоментСозданияСсылки(Ссылка) Экспорт
	
	УИ = "" + Ссылка.УникальныйИдентификатор();
	
	Результат = ПолучитьМоментСозданияУникальногоИдентификатора(УИ);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДатуСозданияЭлемента()

	Если Не ЭтоНовый() Тогда
		вр = ПолучитьМоментСозданияСсылки(Ссылка);
		Если вр <> '00010101' Тогда
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Заголовок = "Дата создания: " + ПолучитьМоментСозданияСсылки(Ссылка);
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Истина;
		Иначе	
			ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Ложь;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.НадписьДатаСозданияЭлемента.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

Процедура ТипоразмерПриИзменении(Элемент)
	Если НЕ ЗначениеНеЗаполнено(ЕдиницаХраненияОстатков) И Не ЭтоНовый() Тогда
		пВес=ПолучитьВесНеттоИзТипоразмера(Ссылка,Типоразмер);
		Если пВес>0 И пВес<>ЕдиницаХраненияОстатков.Вес Тогда
			СправочникЕдиницаОбъект=ЕдиницаХраненияОстатков.ПолучитьОбъект();
			СправочникЕдиницаОбъект.Вес=пВес;
			СправочникЕдиницаОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

Процедура ТипоразмерОчистка(Элемент, СтандартнаяОбработка)
	
	Размер = "";
	
КонецПроцедуры

Процедура ДействияФормыНормыЗагрузки(Кнопка)

	Если (ТипоРазмер = Справочники.Типоразмеры.ПустаяСсылка()) Тогда
		Возврат;
	КонецЕсли;
	Норма					= НайтиСсылкуНаНормуЗагрузки(Типоразмер);
	Если (Норма = Справочники.НормыЗагрузки.ПустаяСсылка() или Норма = Неопределено) Тогда 
		Норма						= Справочники.НормыЗагрузки.СоздатьЭлемент();
		Норма.Типоразмер			= Типоразмер;
		Норма.КоэффициентИмпорта 	= 1;
		Норма.КоэффициентКоличества = 1;
		Норма.ВидПродукции			= ВидТовара;
		Норма.Записать();
		Норма = Норма.Ссылка;
	КонецЕсли;
	Форма				= Справочники.НормыЗагрузки.ПолучитьФормуСписка();
	Форма.ЭлементТек 	= Норма;
	Форма.РедактированиеИзФорм = Истина;
	Форма.Открыть();
	
КонецПроцедуры 

Процедура ТипоразмерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеНеЗаполнено(ЕдиницаХраненияОстатков) И Не ЭтоНовый() Тогда
		пВес=ПолучитьВесНеттоИзТипоразмера(Ссылка,ВыбранноеЗначение);
		Если пВес>0 И пВес<>ЕдиницаХраненияОстатков.Вес Тогда
			СправочникЕдиницаОбъект=ЕдиницаХраненияОстатков.ПолучитьОбъект();
			СправочникЕдиницаОбъект.Вес=пВес;
			СправочникЕдиницаОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

//Функция НайтиНормуЗагрузки(ТРазмер) 
//	
//	Запрос = новый Запрос;
//	Запрос.Текст = "
//	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
//	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
//	
//	Запрос.УстановитьПараметр("ВидПродукции",ВидТовара);
//	Запрос.УстановитьПараметр("Типоразмер",ТРазмер);
//	Выб = Запрос.Выполнить().Выбрать();
//	
//	Если (Выб.Следующий()) Тогда 
//		Возврат Выб.Ссылка.Вес;
//	КонецЕсли;
//	
//	Возврат Неопределено; 
//	
//КонецФункции

Функция НайтиСсылкуНаНормуЗагрузки(ТРазмер) 
	
	Запрос = новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ Ссылка из Справочник.НормыЗагрузки
	|Где ВидПродукции = &ВидПродукции И Типоразмер = &Типоразмер";
	
	Запрос.УстановитьПараметр("ВидПродукции",ВидТовара);
	Запрос.УстановитьПараметр("Типоразмер",ТРазмер);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если (Выб.Следующий()) Тогда 
		Возврат Выб.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.НормыЗагрузки.ПустаяСсылка(); 
	
КонецФункции

Процедура ДействияФормыЗаказыПокупателей(Кнопка)
	
	Если ЭтоНовый() Тогда	// ничего нет
		Предупреждение("Перед построением отчетов по элементу необходимо записать элемент!");
		Возврат;
	КонецЕсли;

	яштОткрытьОтчетПоЗаказамПокупателей(Ссылка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Проверка для новых элементов номенклатуры на обязательное указание полей
	
	Если  ЭтоНовый() И Не ЭтоГруппа И (ВидТовара = Перечисления.ВидыТоваров.Шины ИЛИ
		ВидТовара = Перечисления.ВидыТоваров.Диски ) Тогда
		Если ЗначениеНеЗаполнено(НоменклатурнаяГруппа) Тогда
			Сообщить("Для шин и дисков обязательно должно быть указание номенклатурной группы на закладке 'Дополнительные'", СтатусСообщения.Важное);
			Отказ=Истина;
		КонецЕсли;		 
		Если ЗначениеНеЗаполнено(Модель) Тогда
			Сообщить("Для шин и дисков обязательно должно быть указание модели'", СтатусСообщения.Важное);
			Отказ=Истина;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(Производитель) Тогда
			Сообщить("Для шин и дисков обязательно должно быть указание производителя'", СтатусСообщения.Важное);
			Отказ=Истина;
		КонецЕсли;	
		
		Если ЗначениеНеЗаполнено(Артикул) Тогда
			Сообщить("Для шин и дисков обязательно должно быть указание артикула'", СтатусСообщения.Важное);
			Отказ=Истина;
		КонецЕсли;
		
		//Плотников, исключить русские буквы для моделей дисков
		Если НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026") или НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00049") Тогда  
			Если ПроверитьНаличиеРусскихБукв(Модель.Наименование) Тогда
				 Отказ = Истина;
				 Сообщить("Не допустимо наличие русских символов в название модели", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;	
		
		// Для шин и дисков проверяем уникальность  Артикула по производителю
		Запрос = Новый Запрос;
		
		Запрос.Текст= "ВЫБРАТЬ
		              |	Номенклатура.Код
		              |ИЗ
		              |	Справочник.Номенклатура КАК Номенклатура
		              |ГДЕ
		              |	Номенклатура.Код <> &Код
		              |	И Номенклатура.Наименование = &Наименование
		        //    |	И Номенклатура.Артикул = &Артикул                                                
				//***2016.01.29 заремлено, т.к. стали вводить дублирущиеся карточки для ввода шин с указанием года выпуска
		              |	И (Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Шины)
		              |			ИЛИ Номенклатура.ВидТовара = ЗНАЧЕНИЕ(Перечисление.ВидыТоваров.Диски))" ;
		Запрос.УстановитьПараметр("Код",Код);
		//Запрос.УстановитьПараметр("Артикул",Артикул);
		Запрос.УстановитьПараметр("Наименование", этотОбъект.Наименование);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий()>0 тогда
			//Сообщить("Уже имеется номенклатура с артикулом: "+СокрЛП(Выборка.Ссылка.Артикул)+"  - "+СокрЛП(Выборка.Ссылка.Код)+"  "+СокрЛП(Выборка.Ссылка.Наименование) );
			Сообщить("Уже имеется номенклатура с наименованием: " + СокрЛП(этотОбъект.Наименование) + " код: "+СокрЛП(Выборка.Код) , СтатусСообщения.Внимание);
			Если НЕ (РольДоступна("яштФинДиректор") или РольДоступна("ПолныеПрава")) тогда
				Отказ=Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;		 
	
КонецПроцедуры

Процедура МодельНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если не Производитель.Пустая() тогда
		СтандартнаяОбработка = ложь;
		формаМоделей = справочники.МоделиТоваров.ПолучитьФормуВыбора();
		формаМоделей.СправочникСписок.Отбор.Производитель.ВидСравнения = ВидСравнения.Равно;
		формаМоделей.СправочникСписок.Отбор.Производитель.Значение = Производитель;
		формаМоделей.СправочникСписок.Отбор.Производитель.использование = истина;
//		формаМоделей.СправочникСписок.ИерархическийПросмотр = ложь;
		Модель = формаМоделей.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

Процедура ПолеHTMLДокументаondblclick(Элемент, pEvtObj)
	
	ФормаНарисоватьМодель=Обработки.НарисоватьМодель.ПолучитьФорму();	
	ФормаНарисоватьМодель.Номенклатура = Ссылка;
	ФормаНарисоватьМодель.Открыть();
	
	
КонецПроцедуры

//+++ 22.04.2015
Процедура КомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	если не ДанныеСтроки.Комплектующая.пустая() тогда
	//ОформлениеСтроки.Ячейки.КодСБИС.Значение = ДанныеСтроки.Комплектующая.Артикул;
	ОформлениеСтроки.Ячейки.КодСБИС.Значение = ДанныеСтроки.Комплектующая.КодСБИС;
	КонецЕсли;
КонецПроцедуры

Процедура АналогиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	если не ДанныеСтроки.Заменитель.пустая() тогда
	ОформлениеСтроки.Ячейки.КодСБИС.Значение = ДанныеСтроки.Заменитель.Артикул;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыОткрытьФормуРедактирования(Кнопка)
	Если ВидТовара = Перечисления.ВидыТоваров.Диски Тогда
	    Форма = ПолучитьФорму("ФормаДанныхДиски");
	    Форма.НовыйВидТовара =Перечисления.ВидыТоваров.Диски;
	    Рез = Форма.ОткрытьМодально();
		ПрочитатьЗаполнитьСвойстваИЗначения();
		//ЭтаФорма.Обновить();
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.Шины Тогда
		Форма = ПолучитьФорму("ФормаДанныхШины");
	    Форма.НовыйВидТовара =Перечисления.ВидыТоваров.Шины;
	    Рез = Форма.ОткрытьМодально();
		ПрочитатьЗаполнитьСвойстваИЗначения();
		//ЭтаФорма.Обновить();
	ИначеЕсли ВидТовара = Перечисления.ВидыТоваров.АКБ Тогда
		Форма = ПолучитьФорму("ФормаДанныхАКБ");
	    Форма.НовыйВидТовара =Перечисления.ВидыТоваров.АКБ;
	    Рез = Форма.ОткрытьМодально();
		ПрочитатьЗаполнитьСвойстваИЗначения();
		//ЭтаФорма.Обновить();
	КонецЕсли;
КонецПроцедуры

Процедура КодПриИзменении(Элемент)  //27.09.2016
	Предупреждение("Изменять КОД товара - Запрещено!",10);
	Код = ссылка.Код; //всегда уже есть
КонецПроцедуры

Процедура ЦеноОбразованиеФОБПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ЦенаФоб = РегистрыСведений.ЦеныФОП.СрезПоследних(ТекущаяДата(),Новый структура("номенклатура",ссылка));
	СезонАсс = РегистрыСведений.СезонныйАссортимент.СрезПоследних(ТекущаяДата(),Новый структура("номенклатура",ссылка));
	
	Если ЦенаФоб <> Неопределено И ЦенаФоб.Количество() > 0 Тогда
		Для каждого строка из Оформлениястрок Цикл
			строка.Ячейки.ЦенаФОБ.ОтображатьТекст = Истина;
			строка.Ячейки.ЦенаФОБ.Текст = ЦенаФОБ[0].Цена;
		конецЦикла;
	КонецЕсли;	
	Если СезонАсс <> Неопределено И СезонАсс.Количество() > 0 Тогда
		Для каждого строка из Оформлениястрок Цикл
			строка.Ячейки.Завод.ОтображатьТекст = Истина;
			строка.Ячейки.Завод.Текст = СезонАсс[0].Цена;
		конецЦикла;
	конецЕсли;	
	
КонецПроцедуры

Процедура ПровереннаяНагрузкаДисковПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого строка из Оформлениястрок Цикл
		строка.Ячейки.Дата.ОтображатьТекст = Истина;
		строка.Ячейки.Дата.Текст = строка.ДанныеСтроки.Дата;
	КонецЦикла;	
	
	УстановитьЗаголовокКнопкиЗапрещенныйСписок();
	УстановитьЗаголовокКнопкиЧерныйСписок();
	
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ПровереннаяНагрузка" Тогда
		
		УстановитьЗаголовокКнопкиЗапрещенныйСписок();
		УстановитьЗаголовокКнопкиЧерныйСписок();
		//покажем нужные свойства	
		СписокСвойств = Новый СписокЗначений;
		СписокСвойств.Добавить(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205"));
		СписокСвойств.Добавить(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90250"));
		СписокСвойств.Добавить(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90255"));
		СписокСвойств.Добавить(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90335"));//заниженная нагрузка 1
		СписокСвойств.Добавить(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90336"));//заниженная нагрузка 2

		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Объект
		|	И ЗначенияСвойствОбъектов.Свойство В(&СписокСвойств)";
		
		Запрос.УстановитьПараметр("Объект", ссылка);
		Запрос.УстановитьПараметр("СписокСвойств", СписокСвойств);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90205") тогда //макс нагрузка
				ЭлементыФормы.МаксНагрузка.Заголовок = "Максимальная нагрузка "+Выборка.Значение;	
			ИначеЕсли Выборка.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90250") тогда //мин нагрузка
				ЭлементыФормы.МинНагрузка.Заголовок = "Минимальная нагрузка "+Выборка.Значение;	
			ИначеЕсли Выборка.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90335") тогда //заниженная нагрузка 1
				ЭлементыФормы.Заниженнаянагрузка1.Заголовок = "Заниженная нагрузка 1 "+Выборка.Значение;	
			ИначеЕсли Выборка.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90336") тогда //заниженная нагрузка 2
				ЭлементыФормы.Заниженнаянагрузка2.Заголовок = "Заниженная нагрузка 2 "+Выборка.Значение;	
			ИначеЕсли Выборка.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90255") тогда //остаток
				ОстатокПроверен = Выборка.значение;	
			конецесли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если Элемент.ТекущаяСтраница.Имя = "Применяемость" Тогда
		
		ПолучитьПрименяемостьДискаПоAPITerminal(Ссылка);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстатокПроверенПриИзменении(Элемент)
	Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	Запись.Объект = Ссылка;
	Запись.Свойство = планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90255"); 
	Запись.Значение = ОстатокПроверен;
	Запись.Записать(Истина);
	
	стр = ЭлементыФормы.СвойстваИЗначения.Значение.Найти(планыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90255"),"Свойство");
    стр.Значение = ОстатокПроверен;	
КонецПроцедуры

Процедура ПровереннаяНагрузкаДисковПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	к=1; //***зачем?
	
	Если Элемент.СпособРедактирования = СпособРедактированияСписка.ВДиалоге Тогда
		ФормаЗаписи = РегистрыСведений.ПровереннаяНагрузкаДисков.ПолучитьФормуРедактированияЗаписи();
		ФормаЗаписи.НоменклатураВладелец = ЭтотОбъект.Ссылка;
		ФормаЗаписи.Открыть();
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

//***20170904 (задача №32053)
Процедура ОткрытьВидеоФайлНажатие(Элемент)
	
	ТекДанные = ЭлементыФормы.ПровереннаяНагрузкаДисков.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Сообщить("Необходимо выбрать строку с записью о проверке нагрузки, для которой нужно открыть видео");
	ИначеЕсли (ТекДанные.ТестПройден или 
		(не ТекДанные.ТестПройден и (глТекущийПользователь = Справочники.Пользователи.НайтиПоКоду("Малышев Егор") или РольДоступна("ПравоЗавершенияРаботыПользователей") или РольДоступна("ТолькоПросмотрНоменклатура")))) тогда
		
		ГодТеста = Строка(Формат(Год(ТекДанные.Дата), "ЧГ=0"));
		МесяцТеста = Строка(Месяц(ТекДанные.Дата));
		Если СтрДлина(МесяцТеста) = 1 Тогда
			МесяцТеста = "0" + МесяцТеста;
		КонецЕсли;
		ДеньТеста = Строка(День(ТекДанные.Дата));
		Если СтрДлина(ДеньТеста) = 1 Тогда
			ДеньТеста = "0" + ДеньТеста;
		КонецЕсли;
		
		Если ТекДанные.ТестПройден Тогда
			НайденныеФайлы = НайтиФайлы("\\Videolab\videolab\Тест пройден\"+ГодТеста+"\"+МесяцТеста+"\"+ДеньТеста, Код+"*");
		Иначе
			НайденныеФайлы = НайтиФайлы("\\Videolab\videolab\Тест не пройден\"+ГодТеста+"\"+МесяцТеста+"\"+ДеньТеста, Код+"*");
		КонецЕсли;
		
		Если НайденныеФайлы.Количество() > 0 Тогда
			ФормаВидео = ПолучитьОбщуюФорму("ФормаВоспроизведенияВидео");
			СписокВоспроизведения = Новый СписокЗначений;
			Для каждого ФайлВидео ИЗ НайденныеФайлы Цикл
				СписокВоспроизведения.Добавить(ФайлВидео.ПолноеИмя);
			КонецЦикла;
			ФормаВидео.СписокВоспроизведения = СписокВоспроизведения;
			ФормаВидео.ОткрытьМодально();
		Иначе
			Сообщить("Для выбранной проверки нарузки файлы не найдены");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокКнопкиЗапрещенныйСписок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураИмпорт.Номенклатура
	               |ИЗ
	               |	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	               |ГДЕ
	               |	НоменклатураИмпорт.Номенклатура = &Номенклатура";
	Записи = Запрос.Выполнить().Выгрузить();
	Если Записи.Количество() = 0 Тогда
		ЭлементыФормы.ЗапрещенныйСписок.Заголовок = "Внести в запрещенный список";
	Иначе
		ЭлементыФормы.ЗапрещенныйСписок.Заголовок = "Убрать из запрещенного списка";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокКнопкиЧерныйСписок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураИмпорт.Номенклатура
	               |ИЗ
	               |	РегистрСведений.НоменклатураИмпорт КАК НоменклатураИмпорт
	               |ГДЕ
	               |	НоменклатураИмпорт.Номенклатура = &Номенклатура
	               |	И НоменклатураИмпорт.ЧерныйЛист";
	Записи = Запрос.Выполнить().Выгрузить();
	Если Записи.Количество() = 0 Тогда
		ЭлементыФормы.ЧерныйСписок.Заголовок = "Внести в черный список";
	Иначе
		ЭлементыФормы.ЧерныйСписок.Заголовок = "Убрать из черного списка";
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗапрещенныйСписокНажатие(Элемент)
	
	Если глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор") Тогда
		Сообщить("Нет доступа");
	Иначе
		Если Элемент.Заголовок = "Внести в запрещенный список" Тогда
			МенеджерЗаписи = РегистрыСведений.НоменклатураИмпорт.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.Записать();
		Иначе  //убрать из запрещенного списка
			НаборЗаписей = РегистрыСведений.НоменклатураИмпорт.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(ЭтотОбъект.Ссылка);
			НаборЗаписей.Записать();
		КонецЕсли;
		УстановитьЗаголовокКнопкиЗапрещенныйСписок();
		УстановитьЗаголовокКнопкиЧерныйСписок();
	КонецЕсли;

КонецПроцедуры

Процедура ЧерныйСписокНажатие(Элемент)
	Если глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Малышев Егор") Тогда
		Сообщить("Нет доступа");
	Иначе
		Если Элемент.Заголовок = "Внести в черный список" Тогда
			МенеджерЗаписи = РегистрыСведений.НоменклатураИмпорт.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.ЧерныйЛист = истина;
			МенеджерЗаписи.Записать();
		Иначе  
			МенеджерЗаписи = РегистрыСведений.НоменклатураИмпорт.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Номенклатура = ЭтотОбъект.Ссылка;
			МенеджерЗаписи.ЧерныйЛист = ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		УстановитьЗаголовокКнопкиЗапрещенныйСписок();
		УстановитьЗаголовокКнопкиЧерныйСписок();
	КонецЕсли;

КонецПроцедуры

//+++ 09.06.2018 - по задаче № 48920
Процедура ПутьКфайламСПрограммойНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если ЕдиницаХраненияОстатков.Вес=0 тогда
		Предупреждение("Введите ВЕС диска!", 10);
		возврат;
	КонецЕсли;
	
	диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если ПутьКфайламСПрограммой="" тогда
		ПутьКфайламСПрограммой = "\\terminal\Vissol\";  //+ Код
	КонецЕсли;		
	диалог.Каталог = ПутьКфайламСПрограммой;
	Если диалог.Выбрать() тогда
		ПутьКфайламСПрограммой = диалог.Каталог;
	иначе
		ПутьКфайламСПрограммой = "";
	КонецЕсли;
	
	ПутьКфайламСПрограммойПриИзменении(неопределено);
КонецПроцедуры

//+++ 09.06.2018 - по задаче № 48920
Процедура ПутьКфайламСПрограммойПриИзменении(Элемент)
	
	Если ЕдиницаХраненияОстатков.Вес=0 тогда
		Предупреждение("Введите сначала ВЕС диска! Только после ввода Веса - можно выбирать Путь к файлам с программой.", 30);
		ПутьКфайламСПрограммой = "";
		возврат;
	КонецЕсли;
	
	Если ПутьКфайламСПрограммой<>"" тогда
		спис=найтиФайлы(ПутьКфайламСПрограммой,"*.*",Истина);
		Если спис.Количество()=0
			или (спис.Количество()=1 и спис[0].полноеИмя=ПутьКфайламСПрограммой) тогда //сама папка тоже файл ?!
			Предупреждение("Нет файлов в выбранной папке!
			|Папку: "+ПутьКфайламСПрограммой+"
			|      НЕЛЬЗЯ выбирать !", 30);
			ПутьКфайламСПрограммой = "";
		иначе //вроде всё хорошо... 
			Если прав(ПутьКфайламСПрограммой,7)<>Код тогда 
				Предупреждение("Имя папки должно совпадать с Кодом товара!
							   |Переименуйте папку и выберите её заново...", 30);
				ПутьКфайламСПрограммой = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//+++ 09.06.2018 - по задаче № 48920
Процедура ПутьКфайламСПрограммойОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	Если ПутьКфайламСПрограммой="" тогда
		Предупреждение("Не выбран путь к файлам с программой!", 10);
		возврат;
	иначе
		диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		диалог.Каталог =ПутьКфайламСПрограммой;
		диалог.Выбрать();
	КонецЕсли;
	
КонецПроцедуры





мПустаяКартинка             = Новый Картинка;
мЖирныйШрифт                = Новый Шрифт(,, Истина);
мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
мИспользоватьСерии          = Константы.ИспользоватьСерииНоменклатуры.Получить();
