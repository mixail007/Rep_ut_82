
Перем мПраваДоступаПользователей Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ)

	Если НЕ ОбменДанными.Загрузка
	   И НЕ ЭтоГруппа 
	   И НЕ ЭтоНовый() 
	   И ВидСклада <> Ссылка.ВидСклада
	   И ЭтотОбъект.СуществуютСсылки() Тогда

		СообщитьОбОшибке("Существуют документы, в которых выбран склад """ + Наименование + """.
		                |Реквизит ""Вид склада"" не может быть изменен, элемент не записан.");

		Отказ = Истина;
	КонецЕсли;

	// не дадим записать розничный склад или НТТ без указания типа цен
	Если НЕ ОбменДанными.Загрузка
	   И Не ЭтоГруппа
	   И (ВидСклада = Перечисления.ВидыСкладов.Розничный Или ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка)
	   И ЗначениеНеЗаполнено(ТипЦенРозничнойТорговли) Тогда
		СообщитьОбОшибке("Для склада вида """+ВидСклада+""" необходимо указать тип цен розничной торговли,
		                 |элемент не записан.");

		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка Тогда
	Если НЕ ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "СкладыРазрешитьИзменять") Тогда
		Сообщить("Вам не разрешено добавлять и изменять склады!", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

// Обработчик события ПриКопировании
//
Процедура ПриКопировании(ОбъектКопирования)

	Если НЕ ЭтотОбъект.ЭтоГруппа
	   И НЕ ОбменДанными.Загрузка
	   И НЕ ЗначениеНеЗаполнено(ОбъектКопирования) Тогда
		ПрочитатьПраваДоступаКОбъекту(мПраваДоступаПользователей, ОбъектКопирования.Ссылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриЗаписи
//
Процедура ПриЗаписи(Отказ)
	
	Если НЕ ОбменДанными.Загрузка Тогда
	
		ЗаполнитьНаборПравамиДоступаУнаследованымиОтРодителя(мПраваДоступаПользователей, Родитель, Ссылка);
		
		НеобходимоПереписыватьПодчиненных = ПроверитьНеобходимостьПереписыватьПраваДоступаДляПодчиненныхЭлементов(Ссылка, мПраваДоступаПользователей);
		
		ЗаписатьПраваДоступаКОбъекту(мПраваДоступаПользователей, Ссылка, Отказ);
		
		Если НеобходимоПереписыватьПодчиненных И НЕ Отказ Тогда
			УстановитьПраваДоступаДляПодчиненныхЭлементов(Ссылка, ЭтотОбъект.Метаданные().Имя, Отказ);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет, существуют ли движения по складу.
// Если есть - менять реквизит "Вид склада" нельзя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылки() Экспорт

	Запрос = Новый Запрос();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РегистрНакопления.ТоварыНаСкладах.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах
	|ГДЕ
	|	РегистрНакопления.ТоварыНаСкладах.Склад = &Склад
	|";

	Запрос.УстановитьПараметр("Склад", Ссылка);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

мПраваДоступаПользователей = РегистрыСведений.ПраваДоступаПользователей.СоздатьНаборЗаписей();
Если НЕ Ссылка.Пустая() Тогда
	ПрочитатьПраваДоступаКОбъекту(мПраваДоступаПользователей, Ссылка);
КонецЕсли;
