////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ТЗОписания;
Перем мЧас;
Перем мМинута;
Перем сДок;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура сохраняет значения переменных мЧас и мМинута
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры

// Процедура управляет доступностью кнопок формы
//
Процедура УстановитьДоступностьЭлементов()
	
	ЭлементыФормы.Наименование.ТолькоПросмотр = Выполнена ИЛИ ((НЕ Выполнена) И (Инициатор <> ПараметрыСеанса.ТекущийПользователь));
	ЭлементыФормы.Оповещение.Доступность      =// НЕ Выполнена или
	(Инициатор = ПараметрыСеанса.ТекущийПользователь); // инициатор может выключить "обратное оповещение"
	ЭлементыФормы.СрокОповещения.Доступность  = Оповещение;
	
	ЭлементыФормы.СрокИсполнения.Доступность  = ?(РольДоступна("ПолныеПрава"), Истина, (Инициатор = ПараметрыСеанса.ТекущийПользователь));//если задача поставлена не этим пользователем, то дата выполнения - недоступна!   2014.08.14 ***кроме полных прав
	
	толькоДляПолныхПрав = РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоЗакупкамСОграничениемПравДоступа");
	
	ЭлементыФормы.Объект.ТолькоПросмотр = НЕ ( толькоДляПолныхПрав );//+++
	
	//----------------------------------------------------------------------	
	ЭлементыФормы.ДатаИсполнения.Видимость 			= Выполнена;
	//менять дату выполнения может только пользователь с полными правами!
	ЭлементыФормы.ДатаИсполнения.Доступность        = толькоДляПолныхПрав;
	
	
	//===========Согалсование==============
	Если НаСогласование тогда
		
		// только пока не выполнена, однако флаг выполнена можно снять!
		Если не Выполнена тогда
			можноМенять =  Исполнитель=ПараметрыСеанса.ТекущийПользователь 
			или РольДоступна("ПолныеПрава")
			или РольДоступна("ПравоЗавершенияРаботыПользователей");
		Иначе // после выполнения - менять может что-то только IT-отдел
			можноМенять =  РольДоступна("ПравоЗавершенияРаботыПользователей");
		КонецЕсли;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеУтвердить.Доступность = можноМенять;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеОтменить.Доступность  = можноМенять;
		ЭлементыФормы.Товары.Доступность = можноМенять;
		ЭлементыФормы.КоманднаяПанель1.Доступность = можноМенять;
		//нельзя менять исполнителя при согласовании!
		ЭлементыФормы.Исполнитель.Доступность = можноМенять;
		
	КонецЕсли;
	//Если Исполнитель = Справочники.Пользователи.НайтиПоКоду("Смирнов А") и ТипЗнч(Объект) = Тип("СправочникСсылка.Подразделения") Тогда
	//	ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.СоздатьЗаказ.Доступность = Истина;
	//Иначе
	//	ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.СоздатьЗаказ.Доступность = Ложь;
	//КонецЕсли;
	
	
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура управляет надписью заголовка формы
//
Процедура УстановитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = "Задача от " + Формат(Дата, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""");
	
	//20.08.2015 - согласование по Клиенту - это Правила! 
	Если ТипЗнч(Объект)=Тип("СправочникСсылка.Контрагенты")	и НаСогласование и  не ЗначениеЗаполнено(РеквизитДляСогласования) тогда
		ЭлементыФормы.Панель1.Страницы.Страница2.Заголовок = "Правила";
		ЭлементыФормы.Товары.Колонки.Количество.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.ЦенаМин.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Цена.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Код.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Номенклатура.ТекстШапки = "Правило клиента";
		ЭлементыФормы.Товары.Колонки.Количество.ТекстШапки = "Процент ОТК";
		ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.ТекстШапки = "Коэф.";
		//+++ 15.07.2016 - относительная скидка от Цены Клиента	- только для Дисков!	
	ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") и НаСогласование и не ЗначениеЗаполнено(РеквизитДляСогласования) тогда
		Если ТипЗнч(Товары[0].Номенклатура)=Тип("СправочникСсылка.Номенклатура") тогда //27.04.2018
			Если Товары[0].Номенклатура.ВидТовара = перечисления.ВидыТоваров.Диски 
				и Найти( строка( Исполнитель ), "Малышев")>0 //22.08.2016 только для Егора цена от правил клиента!
				Тогда
				ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.ТекстШапки = "Цена Клиента, р.";
			КонецЕсли;	
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") и НаСогласование и не ЗначениеЗаполнено(РеквизитДляСогласования) тогда
		ЭлементыФормы.Панель1.Страницы.Страница2.Заголовок = "Точки";
		ЭлементыФормы.Товары.Колонки.Количество.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.ЦенаМин.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Цена.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Код.Видимость = ложь;
		
		ЭлементыФормы.Товары.Колонки.СкидкаМин.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.Скидка.Видимость = ложь;
		
		ЭлементыФормы.Товары.Колонки.Номенклатура.ТекстШапки = "Адрес точки";
		ЭлементыФормы.Товары.Колонки.Номенклатура.Доступность = истина;      // адрес  можно исправлять!
		ЭлементыФормы.Товары.Колонки.НомерСтрокиОснования.ТолькоПросмотр = истина;      // номер точки - НЕЛЬЗЯ исправлять!
		
	иначеЕсли  ТипЗнч(Объект)=Тип("СправочникСсылка.Контрагенты") и НаСогласование и ЗначениеЗаполнено(РеквизитДляСогласования) тогда
		ЭлементыФормы.Панель1.Страницы.Страница2.Видимость = Ложь;
		///////Плотников		
	иначеЕсли  ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") и НаСогласование тогда
		ЭлементыФормы.Товары.Колонки.Код.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Количество.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Номенклатура.ТекстШапки = "Ставки по месяцам";
		ЭлементыФормы.Товары.Колонки.Цена.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.ЦенаМин.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Скидка.Видимость = ложь;
		ЭлементыФормы.Товары.Колонки.СкидкаМин.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Склад.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.АдресХранения.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.Сумма.Видимость = Ложь;
	КонецЕсли;	                     
	
КонецПроцедуры // УстановитьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

// Обработчик начала выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокИсполненияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокИсполненияНачалоВыбораИзСписка()

Процедура ДатаИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // ДатаИсполненияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СрокИсполненияОбработкаВыбора()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СрокОповещенияОбработкаВыбора()

// Обработчик установки-снятия флага оповещения
//
Процедура ОповещениеПриИзменении(Элемент)
	
	ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	Если ИнтервалПроверкиНапоминанийВСекундах=0 тогда
		Предупреждение("  Система напоминаний - выключена!
		//|Для её включения (для всех пользователей)
		//|необходимо заполнить:
		//|константу - ""Интервал Проверки Напоминаний"".
		|Однако, просроченные задачи 
		|будут видны в списке задач исполнителя.", 60);
	КонецЕсли;	
	
	d = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ИнтервалНапоминанияДоНачалаСобытия");
	СрокОповещения = СрокИсполнения - d*60;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры // ОповещениеПриИзменении()

// Обработчик нажатия кнопки выбора в поле "Объект"
//
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокТипов = Новый СписокЗначений;
	МассивТипов = Элемент.ТипЗначения.Типы();
	
	Для Каждого ТипДокумента Из МассивТипов Цикл
		
		ОбъектСсылка = Новый(ТипДокумента);
		СписокТипов.Добавить(ОбъектСсылка.Метаданные().Синоним);
		
	КонецЦикла;
	
	ЗначениеЭлемента = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
	
	Если ЗначениеЭлемента = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокТипов.Индекс(ЗначениеЭлемента) < 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = Новый (МассивТипов[СписокТипов.Индекс(ЗначениеЭлемента)]);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Обработка события формы ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Отказ тогда //И ЗначениеЗаполнено(БизнесПроцесс) Тогда
		//РаботаСБизнесПроцессами.ОткрытьФормуВыполненияЗадачи(Ссылка,Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Обработка события формы ПриОткрытии
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		Инициатор   = ПараметрыСеанса.ТекущийПользователь;
		Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		
		ЭлементыФормы.СрокОповещения.Доступность = Оповещение;
		
	Иначе
		
		УстановитьДоступностьЭлементов();
		УстановитьЗаголовокФормы();
		ЭлементыФормы.Товары.Колонки.Количество.видимость = Истина;
		//+++ 28.12.2015 - блокировка закрытия задачи, пока не согласовано ничего...
		флМожно = РольДоступна("ПравоЗавершенияРаботыПользователей"); // ТОЛЬКО для IT-отдела = можно всё!
		
		Если НаСогласование и ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") тогда
			
			//+++( 06.08.2018 - можно!
			//ЭтаФорма.РазрешитьЗакрытие = ложь; 				// [x] кнопка ЗАКРЫТЬ!
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность 		 = Истина;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность= Истина;
			ЭлементыФормы.Оповещение.Доступность 	  = Истина;	// выключить оповещение - МОЖНО!
			ЭлементыФормы.Выполнена.Доступность  	  = Истина; // просто выполнить  - МОЖНО!
			//+++)
			
			ЭлементыФормы.НаСогласование.Доступность = ложь; 	// нельзя выключить согласование
			ЭлементыФормы.Объект.ТолькоПросмотр   = Истина;    // нельзя менять объект!
			ЭлементыФормы.СрокОповещения.Доступность = ложь;	// нельзя изменить дату и время оповещения
			
		ИначеЕсли НаСогласование тогда //нельзя просто закрыть/выполнить/записать пока не согласовано!
			ЭлементыФормы.НаСогласование.Доступность = флМожно; // нельзя выключить согласование
			ЭлементыФормы.Объект.ТолькоПросмотр  = не флМожно;  // нельзя менять объект!
			ЭлементыФормы.Оповещение.Доступность 	  = Истина;	// выключить оповещение - МОЖНО!
			ЭлементыФормы.СрокОповещения.Доступность = флМожно;     // нельзя изменить дату и время оповещения
			
			////------- МОЖНО просто закрыть или выполнить ничего не делая... через 5 мин еще раз вылезет------------------
			//	ЭтаФорма.РазрешитьЗакрытие = ложь; 		
			//	ЭлементыФормы.Выполнена.Доступность  = флМожно;
			//  ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность 		 = флМожно;
			//  ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность= флМожно;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.Сумма.Видимость = (ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров"));
	
	Если Наименование = "ПДЗ по контрагентам" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Событие.Дата) КАК Дата,
		|	Событие.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ДатыПоследних
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Проведен = ИСТИНА
		|	И Событие.ВидСобытия = &ВидСобытия
		|	И РАЗНОСТЬДАТ(Событие.Дата, &ТекДата, ДЕНЬ) <= 30
		|
		|СГРУППИРОВАТЬ ПО
		|	Событие.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Событие.Дата) КАК Дата,
		|	Событие.Контрагент
		|ПОМЕСТИТЬ ДатыПредпоследних
		|ИЗ
		|	Документ.Событие КАК Событие
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследних КАК ДатыПоследних
		|		ПО (ДатыПоследних.Контрагент = Событие.Контрагент)
		|			И (ДатыПоследних.Дата = Событие.Дата)
		|ГДЕ
		|	Событие.Проведен = ИСТИНА
		|	И Событие.ВидСобытия = &ВидСобытия
		|	И ДатыПоследних.Дата ЕСТЬ NULL 
		|	И РАЗНОСТЬДАТ(Событие.Дата, &ТекДата, ДЕНЬ) <= 30
		|
		|СГРУППИРОВАТЬ ПО
		|	Событие.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Событие.ОписаниеСобытия КАК ПоследнееСобытие,
		|	Событие.Контрагент,
		|	NULL КАК ПредпоследнееСобыте
		|ПОМЕСТИТЬ ДваСобытия
		|ИЗ
		|	ДатыПоследних КАК ДатыПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие КАК Событие
		|		ПО ДатыПоследних.Дата = Событие.Дата
		|			И ДатыПоследних.Контрагент = Событие.Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	Событие.Контрагент,
		|	Событие.ОписаниеСобытия
		|ИЗ
		|	ДатыПредпоследних КАК ДатыПредпоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие КАК Событие
		|		ПО ДатыПредпоследних.Контрагент = Событие.Контрагент
		|			И ДатыПредпоследних.Дата = Событие.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Событие.Дата) КАК Дата,
		|	Событие.Контрагент
		|ПОМЕСТИТЬ ДатаПисьма
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Завершено)
		|	И Событие.Проведен = ИСТИНА
		|	И (Событие.ОписаниеСобытия ПОДОБНО &ОписаниеСобытия
		|			ИЛИ Событие.ОписаниеСобытия ПОДОБНО &ОписаниеСобытия1)
		|
		|СГРУППИРОВАТЬ ПО
		|	Событие.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДваСобытия.ПоследнееСобытие) КАК ПоследнееСобытие,
		|	ДваСобытия.Контрагент,
		|	МАКСИМУМ(ДваСобытия.ПредпоследнееСобыте) КАК ПредпоследнееСобыте
		|ПОМЕСТИТЬ Выборка
		|ИЗ
		|	ДваСобытия КАК ДваСобытия
		|
		|СГРУППИРОВАТЬ ПО
		|	ДваСобытия.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Выборка.ПоследнееСобытие) КАК ПоследнееСобытие,
		|	Выборка.Контрагент,
		|	МАКСИМУМ(Выборка.ПредпоследнееСобыте) КАК ПредпоследнееСобыте,
		|	NULL КАК Дата
		|ПОМЕСТИТЬ Общая
		|ИЗ
		|	ДваСобытия КАК Выборка
		|
		|СГРУППИРОВАТЬ ПО
		|	Выборка.Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ДатаПисьма.Контрагент,
		|	NULL,
		|	ДатаПисьма.Дата
		|ИЗ
		|	ДатаПисьма КАК ДатаПисьма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Общая.ПоследнееСобытие) КАК ПоследнееСобытие,
		|	Общая.Контрагент,
		|	МАКСИМУМ(Общая.Дата) КАК ДатаПисьма
		|ИЗ
		|	Общая КАК Общая
		|
		|СГРУППИРОВАТЬ ПО
		|	Общая.Контрагент";
		Запрос.УстановитьПараметр("ОписаниеСобытия","%Письмо о возникновении ПДЗ%");
		Запрос.УстановитьПараметр("ОписаниеСобытия1", "");
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("ВидСобытия", Перечисления.ВидыСобытий.КомментарийПДЗ);
		
		ТЗОписания = Запрос.Выполнить().выгрузить();
		
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Истина;
		ЭлементыФормы.ТабличноеПоле1.ОбновлятьПриИзмененииОтбора = Истина;
		попытка
			Отбор = ТабличноеПоле1.Отбор;
			Отбор["Событие"].Использование = Истина;
			Отбор["Событие"].Значение      = Документы.Событие.ПустаяСсылка();
			Отбор["Событие"].ВидСравнения  = ВидСравнения.Равно;

			Отбор["Менеджер"].Использование = Истина;
			Отбор["Менеджер"].Значение      = Исполнитель;
			Отбор["Менеджер"].ВидСравнения  = ВидСравнения.Равно;
			
		Исключение
		КонецПопытки; 
		ЭлементыФормы.ТабличноеПоле1.ОбновитьСтроки();
	Иначе
		ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = Ложь;
	КонецЕсли;
	
	Если  Найти(Наименование, "Нескорректированные планы")>0  или  Найти(Наименование, "Скорректируйте планы по продажам")>0 тогда
		ЭлементыФормы.ТабличнаяЧасть1.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Истина;		
	Иначе
		ЭлементыФормы.ТабличнаяЧасть1.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанель2.Видимость = Ложь;
	КонецЕсли;	
	
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") Тогда
		ЭлементыФормы.Товары.Колонки.Статус.Доступность = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") Тогда
		
		ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.Видимость   = Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаПоТипуЦен.ТекстШапки = "Сумма продаж "+?(Объект.Бонус=0,"(Без НДС)","")+",р.";
		
		ЭлементыФормы.Товары.Колонки.ЦенаМин.Видимость   = Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаМин.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.ЦенаМин.ТекстШапки = "Сумма обр.продаж"+?(Объект.Бонус=0,"(Без НДС)","")+",р.";
		
		ЭлементыФормы.Товары.Колонки.Цена.Видимость   = Истина;
		ЭлементыФормы.Товары.Колонки.Цена.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.Цена.ТекстШапки = "Сумма"+?(Объект.Бонус=0,"(Без НДС)","")+",р.";
		
		ЭлементыФормы.Товары.Колонки.Сумма.Видимость   = Истина;
		ЭлементыФормы.Товары.Колонки.Сумма.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.Сумма.ТекстШапки  = "Бонус,р.";
		
		ЭлементыФормы.Товары.Колонки.СкидкаМин.Видимость = Истина;
		ЭлементыФормы.Товары.Колонки.СкидкаМин.Доступность = ЛОЖЬ; 	 //только чтение!
		ЭлементыФормы.Товары.Колонки.СкидкаМин.ТекстШапки = "Бонус,р.(начальный)";
		
		ЭлементыФормы.Товары.Колонки.Скидка.Видимость = Истина;
		ЭлементыФормы.Товары.Колонки.Скидка.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.Скидка.ТекстШапки = "Процент Бонуса";
		
		
		ЭлементыФормы.Товары.Колонки.ID.Видимость = Истина;
		ЭлементыФормы.Товары.Колонки.ID.Доступность = Истина;
		ЭлементыФормы.Товары.Колонки.ID.ТекстШапки = "Комментарий";
		
		Если РольДоступна("ПравоЗавершенияРаботыПользователей") тогда
			//последовательность согласования
			ЭлементыФормы.Панель1.Страницы.Страница4.Видимость   = Истина; 
			ЭлементыФормы.Панель1.Страницы.Страница4.Доступность = Истина; 
		КонецЕсли;
	
		Если Исполнитель = Инициатор тогда //31.01.2018 - ОБРАТНО на Инициатора !
			ЭлементыФормы.Товары.ТолькоПросмотр = Истина;
			ЭлементыФормы.КоманднаяПанель1.Доступность = ложь;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеОтменить.Доступность  = ЛОЖЬ;
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеУтвердить.Доступность = ЛОЖЬ;
		КонецЕсли;	
	КонецЕсли;

	
КонецПроцедуры // ПриОткрытии()

// Обработка события формы ПередЗаписью
//
Процедура ПередЗаписью(Отказ)
	ПроверкаНедогрузов_Пересортов(Отказ);
	ПроверкаБрак(Отказ);
	
	ЕстьОшибки = Отказ;
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		СообщитьОбОшибке("Необходимо определить исполнителя задачи в поле ""Исполнитель""!", ЕстьОшибки);
	Иначе
		
		ИнтервалПроверкиНапоминанийВСекундах = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
		Если ИнтервалПроверкиНапоминанийВСекундах=0 тогда
			Предупреждение("  Система напоминаний - выключена!
			//|Для её включения (для всех пользователей)
			//|необходимо заполнить:
			//|константу - ""Интервал Проверки Напоминаний"".
			|Однако, просроченные задачи 
			|будут видны в списке задач исполнителя.", 60);
		КонецЕсли;				   
		
		естьНапоминания = ПолучитьЗначениеПоУмолчанию(Исполнитель,"ИспользоватьНапоминания");
		Если естьНапоминания=null или естьНапоминания=неопределено или (НЕ естьНапоминания) Тогда
			Предупреждение("Для исполнителя: "+строка(Исполнитель)+"
			|  недоступна система напоминаний!
			|Для её включения необходимо включить в настройках пользователя:
			|флажок - ""Использовать напоминания"".", 60);
		КонецЕсли;				   
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		СообщитьОбОшибке("Необходимо сформулировать условие задачи!", ЕстьОшибки);
	КонецЕсли;
	
	Отказ = ЕстьОшибки;
	
	//{ 12.08.2015 --------- изменение ТЧТовары в Заказе покупателя -------------
	Если Товары.Количество()>0 
		и ЗначениеЗаполнено(Объект) тогда
		
		Если ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") тогда
			//03.04.2017
			Отбор = Новый Структура;
			Отбор.Вставить("Бонус",Ложь);
			
			Строки = Объект.Бонусы.НайтиСтроки(Отбор);
			
			Если Строки.Количество()>0 Тогда
				ЕстьПодарки = Истина;
			Иначе
				ЕстьПодарки = Ложь;
			КонецЕсли;  //03.04.2017
			
			Если Объект.ТипЗаказа = 12 Тогда
				СогласоватьРекламнуюПродукцию();
			ИначеЕсли  Объект.ТипЗаказа = 13 Тогда
				СогласоватьТипоразмер();
			ИначеЕсли  ЕстьПодарки Тогда   //03.04.2017
				СогласоватьПодарки();
			иначе
				ИзменитьЦеныВЗаказеПокупателяПриСогласовании();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект)=Тип("СправочникСсылка.Контрагенты") тогда
			
			//12.12.2016 --- согласование Правил или Категорий ---
			флПравила = истина;
			Если Товары.Количество()>0 тогда
				флПравила = НЕ ( (Товары[0].НомерСтрокиОснования=0)
				и ( лев(Товары[0].Номенклатура,12)="Вид товара: ") ); 
			КонецЕсли;
			
			Если флПравила тогда
				ИзменитьПравилаПокупателяПриСогласовании();
			иначе //------------- согласование категорий -----------------------
				клиент1 = Объект.ПолучитьОбъект();
				товКлиента = клиент1.КатегорияСкидок;
				Для каждого стр1 из Товары Цикл
					
					ВидТовара1  = прав(стр1.Номенклатура, стрДлина(стр1.Номенклатура) - стрДлина("Вид товара: ") );
					Если стр1.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден тогда
						стр1Скидка=стр1.Скидка;
					Иначе
						стр1Скидка=стр1.СкидкаМин;
					КонецЕсли;
					
					Если стр1Скидка=0 тогда
						Категория1  =  перечисления.КатегорииСкидок.VIP;
					Иначеесли стр1Скидка=1 тогда
						Категория1  =  перечисления.КатегорииСкидок.к1;
					Иначеесли стр1Скидка=2 тогда
						Категория1  =  перечисления.КатегорииСкидок.к2;
					Иначеесли стр1Скидка=3 тогда
						Категория1  =  перечисления.КатегорииСкидок.к3;
					КонецЕсли;	
					
					для каждого стр2 из товКлиента цикл
						Если строка(стр2.ВидТовара) = ВидТовара1 тогда
							стр2.Категория = Категория1;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;	
				попытка
					клиент1.Записать();
					сообщить("Изменены категории клиента: "+строка(клиент1));
				исключение	
					сообщить("Ошибка записи клиента: "+строка(клиент1)+" Ошибка: "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;	
			КонецЕсли;	
			//+++)
			
		ИначеЕсли ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") тогда //14.12.2015
			ИзменитьТочкиПокупателя();
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") и НаСогласование тогда //25,0216
			ИзменитьСтатусыВЗаявке();
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") тогда //16.03.16
			
			Если Товары[0].Статус = Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка() Тогда
				
			ИначеЕсли Товары[0].Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
				
				Если ПоследовательностьСогласования.Количество() = 0 тогда
					ИзменитьСтатусыВУстановкеБонусов();
				ИначеЕсли ПоследовательностьСогласования.Количество() > 0 Тогда
					ПеренаправитьНачальника();
				КонецЕсли;
				
			ИначеЕсли Товары[0].Статус = Перечисления.СтатусыСтрокЗаказа.Отменен Тогда
				
				ИзменитьСтатусыВУстановкеБонусов();
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда //16.03.16
			
			//01.02.2018 - анализ статусов строк
			колОтклонено = 0; колУтверждено = 0; колСогласовано = 0;   N = Товары.Количество();
			для каждого стр1 из Товары цикл
				Если стр1.Статус = Перечисления.СтатусыСтрокЗаказа.Отменен	тогда
				колОтклонено = колОтклонено + 1;
				ИначеЕсли стр1.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден	тогда
				колУтверждено = колУтверждено + 1;	
				ИначеЕсли стр1.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован	тогда
				колСогласовано = колСогласовано + 1;	
				КонецЕсли;
			КонецЦикла;
			  
			Если колОтклонено = N Тогда //все отклонено
				ИзменитьСтатусыВВыплатеБонусов();
			ИначеЕсли (колУтверждено + колСогласовано + колОтклонено = N) или Выполнена Тогда //задача выполнена
				Выполнена = Истина; // Задача выполнена
				Если ПоследовательностьСогласования.Количество() = 0 тогда
					ИзменитьНазваниеЗадачиИОписаниеПриСогласовании();
					ИзменитьСтатусыВВыплатеБонусов();
				ИначеЕсли ПоследовательностьСогласования.Количество() > 0 Тогда
					ПеренаправитьНачальника();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//}
	
	Если Выполнена и не ссылка.Выполнена тогда //при установке кнопки выполнено
		ДатаИсполнения = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()


// Обработка события формы ПослеЗаписи
//
Процедура ПослеЗаписи()
	
	УстановитьДоступностьЭлементов();
	УстановитьЗаголовокФормы();
	ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.КорректировкаЗаказаПокупателяР") тогда //23.10.2017
		ИзменитьСтатусыВКорректировкаЗаказа();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

Процедура ВыполненаПриИзменении(Элемент)
	Если Наименование = "ПДЗ по контрагентам" тогда
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ИнформацияПоПДЗОтМенеджера.Комментарий
		//|ИЗ
		//|	РегистрСведений.ИнформацияПоПДЗОтМенеджера КАК ИнформацияПоПДЗОтМенеджера
		//|ГДЕ
		//|	ИнформацияПоПДЗОтМенеджера.Менеджер = &Менеджер
		//|	И ИнформацияПоПДЗОтМенеджера.Комментарий ПОДОБНО """"";
		//
		//Запрос.УстановитьПараметр("Менеджер", Исполнитель);
		//			
		//Результат = Запрос.Выполнить().Выгрузить();
		ЕстьПустойКоммент = ложь;
		для каждого стр из ТабличноеПоле1 цикл
			Если ПустаяСтрока(стр.Комментарий) тогда
				ЕстьПустойКоммент = Истина;
				Прервать;
			КонецЕсли; 			
		КонецЦикла;
		
		//Если Результат.Количество()>0 Тогда
		Если ЕстьПустойКоммент Тогда
			Выполнена = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	//+++ 17.01.2014 "обратное оповещение" - Инициатору
	Если Выполнена и (Инициатор<>Исполнитель) тогда
		Оповещение = истина;  
		СрокОповещения = ТекущаяДата(); //  дата выполнения - сразу инициатору ( в течение 5 мин)
		
		УстановитьДоступностьЭлементов(); //01.02.2018 - только если Инициатор<>Исполнитель
	КонецЕсли;	
	//УстановитьДоступностьЭлементов();

КонецПроцедуры

Процедура СрокОповещенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	d = Константы.ИнтервалПроверкиНапоминанийВСекундах.Получить();
	если d=0 тогда
		Предупреждение("Константа: Интервал Проверки Напоминаний В Секундах - не задан!
		|Автоматические напоминания работать не будут!",60);
		Возврат;					   
	КонецЕсли;	
	
	СтандартнаяОбработка = ложь;
	Элемент.Значение = Элемент.Значение + Направление * d;
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ИсполнительПриИзменении(Элемент)
	
	Если НЕ (РольДоступна("ПолныеПрава") или РольДоступна("МенеджерПоЗакупкам") или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьНазначатьЗадачиДругимПользователям")) тогда
		Если не Исполнитель.Пустая() и Исполнитель<>ПараметрыСеанса.ТекущийПользователь тогда
			Предупреждение("Вы не можете назначать задачи другим пользователям!", 30);
			Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//+++( 25.02.2014

Процедура ДействияФормыПослатьСчет(Кнопка)
	
	//========================Проверим уч.запись======================
	УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяУчетнаяЗапись");
	Если НЕ ЗначениеЗаполнено(УЗ) тогда
		//Если РольДоступна("ПолныеПрава") тогда
		УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
		Если ЗначениеЗаполнено(УЗ) тогда
		иначе // в базе нет уч.записи: no-reply@yst76.ru
			сигнал();
			Предупреждение("У Вас Не установлена - Основная учетная запись эл.почты!
			|Для отправки - обязательно требуется обратный эл.адрес!",30);
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) тогда
		сигнал();
		Предупреждение("Перед отправкой письма - выберите Исполнителя!",30);
		возврат;
	КонецЕсли;
	
	//======================Получим адрес эл.почты=================
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Объект", Исполнитель);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	АдресЭлПочтыКонтрагента = "";
	Если Выборка.Следующий() тогда
		АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
	иначе
		сигнал();
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = "У исполнителя: "+строка(Исполнитель)+" - нет эл.адреса!
		|Ввести эл.адрес вручную?";
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			АдресЭлПочтыКонтрагента="";
			ВвестиСтроку(АдресЭлПочтыКонтрагента,"Введите эл.адрес для "+строка(Исполнитель));	
		иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//============================================================		
	Ответ = КодВозвратаДиалога.Нет;
	Если Вопрос("Вы действительно хотите отправить ""Задачу""
		|для "+строка(Исполнитель)+"
		|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет тогда
		Возврат;
	КонецЕсли;
	
	
	Состояние("Идет отправка письма...");  i=0;
	
	СписокФайловВложений=новый СписокЗначений;
	//ДокументОбъект=ЭтотОбъект;
	// ВременнаяПапка = "\\alpha\Userdir\ALL\_Оперативный День\Отправленные документы [@]\"; //КаталогВременныхФайлов();   //"C:\"; // "D:\Рассылка\";
	ВременнаяПапка = КаталогВременныхФайлов(); //+++ 07.08.2013   "\\terminal\RESTORE Userdir\Отправленные документы\"; 
	//Печатается 1-я форма
	//ИмяФайлаСообщения="Счет_Заказ_№"+ДокументОбъект.Номер+".xls";
	//ТабличныйДокументОбъект=ДокументОбъект.ПечатьСчетаЗаказа("Счет"); //Счет на оплату
	//
	//ТабличныйДокументОбъект.Записать(временнаяПапка+ИмяФайлаСообщения,ТипФайлаТабличногоДокумента.XLS);
	//СписокФайловВложений.Добавить(ВременнаяПапка+ИмяФайлаСообщения);
	
	Послать(АдресЭлПочтыКонтрагента,СписокФайловВложений, УЗ);	  
	
	Состояние(" ");
	сигнал();
	Предупреждение("Отправка задачи на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена!");
	
КонецПроцедуры

Процедура Послать(АдресПолучателя,СписокФайловВложений, УЗ)
	ТекстСообщения0 ="   Добрый день, 
	|Вам поставлена Задача:
	|Инициатор: "+строка(Инициатор)+"
	|Срок исполненения до: "+строка(СрокИсполнения)+"
	| 
	|"+Описание;
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
	ИПП.ПортSMTP=УЗ.ПортSMTP;
	Если УЗ.ТребуетсяSMTPАутентификация Тогда
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
		ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
	Иначе
		ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		ИПП.ПарольSMTP         = "";
		ИПП.ПользовательSMTP   = "";
	КонецЕсли;
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
	
	//+++( 19.12.2011 - разбор адреса на несколько адресов
	//Письмо.Получатели.Добавить(АдресПолучателя);
	i = Найти(АдресПолучателя,";"); j=Найти(АдресПолучателя, ",");
	k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
	
	Если i=0 и j=0 тогда
		Письмо.Получатели.Добавить(АдресПолучателя);
	иначе
		АдрОстаток = СокрЛП(АдресПолучателя);
		пока (k>0) цикл
			Адр1 = Лев(АдрОстаток, k-1);
			Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
				Письмо.Получатели.Добавить(Адр1);
			иначе
				Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
			КонецЕсли;
			АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
			i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
			k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
		КонецЦикла;
		Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
			Письмо.Получатели.Добавить(АдрОстаток);
		КонецЕсли;
		
	КонецЕсли; //+++ )
	
	Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
		Для Каждого ТекАдр Из СписокФайловВложений Цикл
			Письмо.Вложения.Добавить(ТекАдр.Значение);
		КонецЦикла;
	КонецЕсли;
	Письмо.Тема="Задача: "+Наименование;
	
	
	Письмо.ИмяОтправителя = "Яршинторг";
	Письмо.Организация ="ЗАО ТК ""Яршинторг"", г.Ярославль";
	Письмо.Тексты.Добавить(ТекстСообщения0, ТипТекстаПочтовогоСообщения.простойТекст);
	
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
	
	попытка
		Почта.Послать(Письмо);
		Почта.Отключиться();
	исключение
		сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

Процедура НаСогласованиеПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеУтвердить.Доступность = НаСогласование;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВсеОтменить.Доступность = НаСогласование;
	ЭлементыФормы.Панель1.Страницы.Страница2.Доступность = НаСогласование;
КонецПроцедуры

Процедура КоманднаяПанель1ВсеОтменить(Кнопка)
	Если не ЗначениеЗаполнено(РеквизитДляСогласования) Тогда
		Если ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") и ПоследовательностьСогласования.Количество() = 0 тогда 
			УстановитьСтатусы(0);
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") Тогда
			Для каждого стр из Товары Цикл	
				стр.Статус = Перечисления.СтатусыСтрокЗаказа.Отменен;
			КонецЦикла;
			Выполнена  = Истина;
		Иначе
		    УстановитьСтатусы(0);
		КонецЕсли;
	ИначеЕсли Найти(РеквизитДляСогласования, "ПланВидовХарактеристик") Тогда
		СогласоватьСвойство(Ложь);
	иначе
		СогласоватьРеквизит(Ложь);	
	конецЕсли;
КонецПроцедуры

Процедура КоманднаяПанель1ВсеУтвердить(Кнопка)
	Если не ЗначениеЗаполнено(РеквизитДляСогласования) Тогда	
		Если ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") и ПоследовательностьСогласования.Количество() = 0 тогда 
			УстановитьСтатусы(1);
		ИначеЕсли ТипЗнч(Объект)=Тип("ДокументСсылка.УстановкаБонусов") Тогда
			Для каждого стр из Товары Цикл	
				стр.Статус = Перечисления.СтатусыСтрокЗаказа.Подтвержден;
			КонецЦикла;
		Иначе
		    УстановитьСтатусы(1);
		КонецЕсли;
	ИначеЕсли Найти(РеквизитДляСогласования, "ПланВидовХарактеристик") Тогда
		СогласоватьСвойство(Истина);
	иначе
		СогласоватьРеквизит(Истина);	
	конецЕсли;	
КонецПроцедуры


Процедура КоманднаяПанель1ВсеПодумать(Кнопка)
	УстановитьСтатусы();
КонецПроцедуры

процедура УстановитьСтатусы(тип=-1)
	ст1 = ?(тип=0, перечисления.СтатусыСтрокЗаказа.Отменен,
	?(тип=1, перечисления.СтатусыСтрокЗаказа.Подтвержден, 
	перечисления.СтатусыСтрокЗаказа.НаСогласовании));
	
	N = Товары.Количество();  
	КолДа=0; КолНет=0;
	
	Для каждого стр1 из Товары цикл
		
		Если ( ЗначениеЗаполнено(стр1.Статус) и НЕ стр1.статус = Перечисления.СтатусыСтрокЗаказа.НаСогласовании) тогда
			сообщить("Статус строки № "+строка(стр1.НомерСтроки)+" - изменился: "+строка(стр1.Статус)+" >> "+ строка(ст1), СтатусСообщения.Информация);
		КонецЕсли;
		
		стр1.Статус = ст1; //+++ 26.10.2017 - меняем ПОЛНОСТЬЮ все строки!
		
		//28.12.2015 - автоматический отказ в утверждении пустых адресов!
		Если НаСогласование и ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") тогда
			i=найти(стр1.Номенклатура, "Адрес:");
			если i>0 тогда
				адр = прав(стр1.Номенклатура, стрДлина(стр1.Номенклатура)-i-5);
				если сокрЛП(адр)="" тогда //автоматически отменен всегда!
					стр1.Статус = перечисления.СтатусыСтрокЗаказа.Отменен;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		КолДа  = КолДа  + ?(стр1.Статус =перечисления.СтатусыСтрокЗаказа.Подтвержден,1,0);
		КолНет = КолНет + ?(стр1.Статус =перечисления.СтатусыСтрокЗаказа.Отменен,1,0);
	КонецЦикла;	
	
	//+++ 24.10.2017 все строки обработаны, значит задача выполнена для любого типа документа-основания
	Если N>0 И (КолДа+КолНет)=N  Тогда
	
		Выполнена = Истина;  
		Если  КолДа>0 и КолНет>0 тогда
			сообщить(строка(КолНет)+" строк Отменено и "+строка(КолДа)+" строк Подтвержено.");
		КонецЕсли;	
	Иначе  
		Выполнена = Ложь;
	КонецЕсли;	
	
	ИзменитьНазваниеЗадачиИОписаниеПриСогласовании(тип);
	
	// Сакулина 24.11.2016
	//Проверим если все согласовано тогда убираем ти заказ 13
	//Если по всем отказ тогда закрываем заказ
	//Если ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказПокупателя") и Объект.ТипЗаказа = 13 Тогда
	//	ПроверкаСтатусаДляСогласованияТипоразмера();
	//КонецЕсли;
	
	//+++ 28.12.2015 - блокировка закрытия задачи, пока не согласовано ничего...
	Если НаСогласование и ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Выполнена;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность = Выполнена;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ТипЗнч(ДанныеСтроки.Номенклатура)=Тип("СправочникСсылка.Номенклатура") тогда
		ОформлениеСтроки.Ячейки.Код.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Код.Текст = ДанныеСтроки.Номенклатура.Код;
	КонецЕсли;
	
	//цвета
	Если ДанныеСтроки.Статус = перечисления.СтатусыСтрокЗаказа.Отменен тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоРозовый;
	ИначеЕсли ДанныеСтроки.Статус = перечисления.СтатусыСтрокЗаказа.Подтвержден тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Роса; //бледно-зеленый
	ИначеЕсли ДанныеСтроки.Статус = перечисления.СтатусыСтрокЗаказа.Согласован тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Бежевый; //бледно-желтый
	КонецЕсли;
	
КонецПроцедуры

//-------------------------------изменение % при изменении цены и наоборот------------------------------
Процедура ТоварыЦенаМинПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
		//	НовСтр.ЦенаПоТипуЦен  = стр1.Сумма;
		//	НовСтр.ЦенаМин		  = стр1.СуммаОбрПродаж;
		//	НовСтр.Цена			  = стр1.Сумма - стр1.СуммаОбрПродаж;
		//	НовСтр.Сумма		  = стр1.СуммаБонуса;  // = Цена * Скидка /100
		//	НовСтр.Скидка    = стр1.ПроцентБонуса;
			текСтр.Цена			  = текСтр.ЦенаПоТипуЦен - текСтр.ЦенаМин; //Изменяется обр.продажа!
			текСтр.Сумма		  = ОКР(текСтр.Цена * текСтр.Скидка/100);  // = Цена * Скидка /100
		текСтр.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован;
	Иначе				
		текСтр.СкидкаМин = ?(текСтр.ЦенаПоТипуЦен=0, 0, 100*(ТекСтр.ЦенаМин / текСтр.ЦенаПоТипуЦен - 1));
	КонецЕсли;	
КонецПроцедуры

Процедура ТоварыЦенаПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
		//	НовСтр.ЦенаПоТипуЦен  = стр1.Сумма;
		//	НовСтр.ЦенаМин		  = стр1.СуммаОбрПродаж;
		//	НовСтр.Цена			  = стр1.Сумма - стр1.СуммаОбрПродаж;
		//	НовСтр.Сумма		  = стр1.СуммаБонуса;  // = Цена * Скидка /100
		//	НовСтр.Скидка    = стр1.ПроцентБонуса;
		//	текСтр.Цена			  = текСтр.ЦенаПоТипуЦен - текСтр.ЦенаМин;
			текСтр.Сумма		  = ОКР(текСтр.Цена * текСтр.Скидка/100);  // = Цена * Скидка /100
		текСтр.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован;
	Иначе
		текСтр.Скидка = ?(текСтр.ЦенаПоТипуЦен=0, 0, 100*(ТекСтр.Цена / текСтр.ЦенаПоТипуЦен - 1));
	КонецЕсли;
КонецПроцедуры


Процедура ТоварыСкидкаМинПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	текСтр.ЦенаМин = ?(текСтр.ЦенаПоТипуЦен=0, 0, текСтр.ЦенаПоТипуЦен * (1 + текСтр.СкидкаМин/100) );
КонецПроцедуры

Процедура ТоварыСкидкаПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
		//	НовСтр.ЦенаПоТипуЦен  = стр1.Сумма;
		//	НовСтр.ЦенаМин		  = стр1.СуммаОбрПродаж;
		//	НовСтр.Цена			  = стр1.Сумма - стр1.СуммаОбрПродаж;
		//	НовСтр.Сумма		  = стр1.СуммаБонуса;  // = Цена * Скидка /100
		//	НовСтр.Скидка    = стр1.ПроцентБонуса;
		//	текСтр.Цена			  = текСтр.ЦенаПоТипуЦен - текСтр.ЦенаМин;
			текСтр.Сумма		  = ОКР(текСтр.Цена * текСтр.Скидка/100);  // = Цена * Скидка /100
		текСтр.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован;
	Иначе
	текСтр.Цена = ?(текСтр.ЦенаПоТипуЦен=0, 0, текСтр.ЦенаПоТипуЦен * (1 + текСтр.Скидка/100) );
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыСуммаПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
		//	НовСтр.ЦенаПоТипуЦен  = стр1.Сумма;
		//	НовСтр.ЦенаМин		  = стр1.СуммаОбрПродаж;
		//	НовСтр.Цена			  = стр1.Сумма - стр1.СуммаОбрПродаж;
		//	НовСтр.Сумма		  = стр1.СуммаБонуса;  // = Цена * Скидка /100
		//	НовСтр.Скидка    = стр1.ПроцентБонуса;
		текСтр.Скидка = ОКР(текСтр.Сумма /текСтр.Цена*100,2);   //пересчет % бонуса
		текСтр.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован;
	КонецЕсли;
КонецПроцедуры

 Процедура ТоварыЦенаПоТипуЦенПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТипЗнч(Объект)=Тип("ДокументСсылка.ВыплатаБонусовКонтрагентам") тогда
		//	НовСтр.ЦенаПоТипуЦен  = стр1.Сумма;
		//	НовСтр.ЦенаМин		  = стр1.СуммаОбрПродаж;
		//	НовСтр.Цена			  = стр1.Сумма - стр1.СуммаОбрПродаж;
		//	НовСтр.Сумма		  = стр1.СуммаБонуса;  // = Цена * Скидка /100
		//	НовСтр.Скидка    = стр1.ПроцентБонуса;
		текСтр.Цена	  = текСтр.ЦенаПоТипуЦен - текСтр.ЦенаМин; // Изменяется сумма!
		текСтр.Сумма  = Окр(текСтр.Цена * текСтр.Скидка/100 , 2 );   //пересчет суммы бонуса
		текСтр.Статус = Перечисления.СтатусыСтрокЗаказа.Согласован;
	КонецЕсли;
КонецПроцедуры



Процедура  СогласоватьРеквизит(Согласовали)
	Если РеквизитДляСогласования = "Ссылка"  Тогда    //весь документ
		ОбъектОбъект = Объект.ПолучитьОбъект();
		Если  ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаУдалениеВыставленныхПени") Тогда
			Если  ОбъектОбъект.согласованно = Истина и Согласовали = Истина Тогда
				ОбъектОбъект.Состояние = Перечисления.СостоянияОбъектов.Утвержден;
			ИначеЕсли  ОбъектОбъект.согласованно = Ложь и Согласовали = Истина Тогда
				ОбъектОбъект.Состояние = Перечисления.СостоянияОбъектов.Согласован;
			ИначеЕсли Согласовали = Ложь Тогда
				ОбъектОбъект.Состояние = Перечисления.СостоянияОбъектов.Отклонен;
			КонецЕсли;
			ОбъектОбъект.согласованно = Согласовали;
			ОбъектОбъект.согласовал = глТекущийПользователь;
			ОбъектОбъект.Записать();
			//23.08.17 Смирнов
			ВыполнитьЗадачиПоЗаявке(Объект,Дата,Ссылка); //выполняем дубли задач, что бы не висели у других   (задача №31317)
		иначеесли ТипЗнч(Объект) = Тип("ДокументСсылка.ОтказПоставщикаПоСезонномуЗаказу") Тогда	
			если  Согласовали = Истина Тогда
				ОбъектОбъект.Записать(РежимЗаписиДокумента.Проведение);
			конецЕсли;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда	
			если  Согласовали = Истина Тогда
				ОбъектОбъект.Состояние = Перечисления.СостоянияОбъектов.Согласован;
				ОбъектОбъект.Согласовал = глТекущийПользователь; 
				ОбъектОбъект.Записать();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаданиеНаПроизводствоДисков") Тогда	
			ОбъектОбъект.согласованно = Согласовали;
			Для Каждого стр из Объект.СогласованиеПроизводства цикл
				если стр.ВидыРабот = перечисления.ВидыРаботПоПроизводству.ПередачаЗаявкиВРаботу и стр.ДатаСдал = Дата(1,1,1) тогда
					стр.ДатаСдал = ТекущаяДата();
				конецЕсли;	
			конеццикла;
			ОбъектОбъект.Записать(РежимЗаписиДокумента.Проведение);
		иначе
			ОбъектОбъект.согласованно = Согласовали;
			ОбъектОбъект.согласовал = глТекущийПользователь;
			ОбъектОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Выполнена = Истина;
		Наименование = "";
		Если не согласовали тогда
			Наименование = "НЕ ";
		КонецЕсли; 
		Наименование=Наименование + "СОГЛАСОВАННО:  " +Строка(ОбъектОбъект);
	иначе   //реквизит
		Если Согласовали Тогда	
			
			//+++ 17.08.2018 сначала задачу надо записать! а остальные, невыполненные - будут удалены при записи Объекта...
			Если НаСогласование и ТипЗнч(Объект) = тип("ДокументСсылка.ЗаявкаНаБрак") тогда 
				Выполнена = Истина;
				ДатаИсполнения = ?(ДатаИсполнения='00010101', ТекущаяДата(), ДатаИсполнения);
				Записать(); 
			КонецЕсли;
			
        	//поменяем в объекте значение выбранного реквизита
			ОбъектОбъект = Объект.ПолучитьОбъект();
			Если  РеквизитДляСогласования <> "ссылка"  тогда
			ОбъектОбъект[РеквизитДляСогласования] = ЗначениеРеквизитаДляСогласования;
			конецесли;
		
			//02.12.2016 - Подтверждаем/отменяем Заказ покупателя
			Если ТипЗнч(ОбъектОбъект) = тип("ДокументОбъект.ЗаказПоставщику") и РеквизитДляСогласования = "Проведен" Тогда 
				//найдём заказ покупателя по которому создан заказ поставщику!
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗаказПокупателяТовары.Ссылка
				|ИЗ
				|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
				|ГДЕ
				|	ЗаказПокупателяТовары.Размещение = &ЗаказПоставщику
				|	И ЗаказПокупателяТовары.Ссылка.Дата >= &Дата";
				Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата)-14*86400 );  //заказ покупателяы  не более, чем за неделю до утверждения ?!
				Запрос.УстановитьПараметр("ЗаказПоставщику", Объект);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() тогда
					закПок = выборка.Ссылка.ПолучитьОбъект();
					если закПок.пометкаУдаления тогда // уже отменили заказ!
						сообщить(строка(закПок)+" - уже отменен и Заказ поставщику - уже не нужен!");
						ОбъектОбъект[РеквизитДляСогласования] = ЛОЖЬ;
					Иначе
						закПок.статус = перечисления.СтатусыЗаказов.Подтвержден;//в обработке или сразу Подтвержден
						закПок.Записать(); // без перепроведения!
						сообщить(строка(закПок)+" - "+строка(закПок.Статус), СтатусСообщения.Информация);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;	 //---------------------------------
			
			Если ТипЗнч(ОбъектОбъект) = тип("ДокументОбъект.ЗаказПокупателя") и РеквизитДляСогласования = "ДатаОплаты" Тогда 
				ОбъектОбъект.ЧислоДнейСМоментаОтгрузки = Окр((ОбъектОбъект.ДатаОплаты - ОбъектОбъект.ДатаОтгрузки)/86400,0);				
			КонецЕсли;	
			
			//+++ 18.07.2016 согласование резерваИМ!
			Если ТипЗнч(ОбъектОбъект) = тип("ДокументОбъект.ЗаказПокупателя") и РеквизитДляСогласования = "Проверен" Тогда 
				Если ЗначениеРеквизитаДляСогласования и не Объектобъект.ПометкаУдаления тогда //вкл.
					Объектобъект.Записать(РежимЗаписиДокумента.Проведение);
				иначеЕсли не ЗначениеРеквизитаДляСогласования и Объектобъект.Проведен тогда  //выкл.
					Объектобъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				иначе //без перепроводения!
					Объектобъект.записать();
				КонецЕсли;
			Иначе //просто запишем любой объект
				Объектобъект.записать();
			КонецЕсли;
			
			//запишем в историю изменений
			обЗаписатьПротоколИзменений(Объект,ЛОЖЬ);
		конецЕсли;
		Выполнена = Истина;
		Наименование = "";
		
		Если не согласовали тогда
			Наименование = "НЕ ";
			
			//02.12.2016 - Подтверждаем/отменяем Заказ покупателя
			Если ТипЗнч(Объект) = тип("ДокументСсылка.ЗаказПоставщику") и РеквизитДляСогласования = "Проведен" Тогда 
				//найдём заказ покупателя по которому создан заказ поставщику!
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЗаказПокупателяТовары.Ссылка
				|ИЗ
				|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
				|ГДЕ
				|	ЗаказПокупателяТовары.Размещение = &ЗаказПоставщику
				|	И ЗаказПокупателяТовары.Ссылка.Дата >= &Дата";
				Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата)-14*86400 );  //заказ покупателяы  не более, чем за неделю до утверждения ?!
				Запрос.УстановитьПараметр("ЗаказПоставщику", Объект);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() тогда
					закПок = выборка.Ссылка.ПолучитьОбъект();
					
					закПок.статус = перечисления.СтатусыЗаказов.Отменен;
					закПок.Проверен = ложь;
					
					если закПок.пометкаУдаления тогда // уже отменили заказ!
						сообщить(строка(закПок)+" - уже отменен!");
						закПок.Записать();
					Иначе
						попытка
							закПок.ПометкаУдаления = Истина;
							закПок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							сообщить(строка(закПок)+" - "+строка(закПок.Статус), СтатусСообщения.Информация);
						исключение
							сообщить(строка(закПок)+" - Ошибика записи: "+ ОписаниеОшибки(), СтатусСообщения.Внимание);
						КонецПопытки;	
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;	 //---------------------------------
			
		КонецЕсли;  
		
		Наименование=Наименование + "УТВЕРЖДЕНО: " +РеквизитДляСогласования+" для " + Строка(Объект);		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = тип("ДокументСсылка.ЗаказПокупателя") и РеквизитДляСогласования = "ДатаОплаты" Тогда 
		Оповещение = истина;
		СрокОповещения = ТекущаяДата()					
	конецЕсли;	
	
	Записать();
	Закрыть();	
конецПроцедуры	

Процедура СогласоватьСвойство(Согласовали)
	Если Согласовали Тогда
		МассивДанныхОбъекта = Новый Массив;
		
		РеквизитДляСогласования_в = СтрЗаменить(РеквизитДляСогласования,".",Символы.ПС);
		
		Для i1 = 1 по 3 Цикл
			МассивДанныхОбъекта.Добавить(СтрПолучитьСтроку(РеквизитДляСогласования_в, i1));		
		КонецЦикла;
		//МассивДанныхОбъекта содержит 
		//[0] - Наименование класса метаданных <ПланВидовХарактеристик>
		//[1] - Наименование типа объекта метаданных <СвойствоОбъектов>
		//[2] - Код объекта <90256>
		
		Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект;
		Запись.Свойство = ПланыВидовХарактеристик[МассивДанныхОбъекта[1]].НайтиПоКоду(МассивДанныхОбъекта[2]); 
		Запись.Значение = Истина;
		Запись.Записать(Истина);
		
		Наименование=Наименование + " - ПОДТВЕРЖДЕН!";
		Выполнена = Истина;
		Записать();
		Закрыть();
	Иначе
		Наименование=Наименование + " - НЕ ПОДТВЕРЖДЕН!";
		Выполнена = Истина;
		Записать();
		Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьЗадачиПоЗаявке(Док,ДатаЗадачи,ТекЗадача)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиПользователя.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.Объект = &Объект
	|	И ЗадачиПользователя.Выполнена = ЛОЖЬ
	|	И ЗадачиПользователя.Ссылка <> &Ссылка
	|	И ЗадачиПользователя.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И ЗадачиПользователя.НаСогласование";
	Запрос.УстановитьПараметр("Объект",Док);
	Запрос.УстановитьПараметр("Ссылка",ТекЗадача);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(ТекЗадача.Дата));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ТекЗадача.Дата));
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		ЗадачаОб = Рез.Задача.ПолучитьОбъект();
		ЗадачаОб.Выполнена = истина;
		ЗадачаОб.НаСогласование=ложь;
		ЗадачаОб.Наименование = ТекЗадача.Наименование+" ("+ТекЗадача.Исполнитель+")";
		ЗадачаОб.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ТоварыНоменклатураОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Панель1.Страницы.Страница2.Заголовок = "Точки" тогда
		СтандартнаяОбработка = ложь;
		эл1=ЭлементыФормы.Товары.ТекущиеДанные;
		точка = справочники.Точки.НайтиПоРеквизиту("Номер", эл1.НомерСтрокиОснования);
		если точка = неопределено тогда 
			Предупреждение("Не найдена точка № "+строка(эл1.НомерСтрокиОснования), 30);
		иначе
			точка.ПолучитьФорму("ФормаЭлемента").Открыть();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	текСтр = ЭлементыФормы.Товары.ТекущиеДанные;
	//28.12.2015 - обязательно нужен Адрес!	
	Если НаСогласование и ТипЗнч(Объект)=Тип("СправочникСсылка.Точки") и Найти(текСтр.Номенклатура,"Адрес:")=0 тогда
		текСтр.Номенклатура = "Адрес:"+текСтр.Номенклатура;	
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыСтатусПриИзменении(Элемент)
	
	//если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда
	//	Если Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза Тогда
	//		Если ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущаяСтрока.Склад) или ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущаяСтрока.АдресХранения) тогда
	//			ИзменитьНазваниеЗадачиИОписаниеПриСогласовании();
	//		иначе 
	//			Сообщить("Заполните склад и адреса хранения данного товара");
	//			Возврат ;
	//		КонецЕсли;
	//	Иначе
	//		ИзменитьНазваниеЗадачиИОписаниеПриСогласовании();
	//	КонецЕсли;
	//Иначе
	ИзменитьНазваниеЗадачиИОписаниеПриСогласовании();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСоздатьЗаказ(Кнопка)
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Сообщить("Заказ по этой задаче уже создан!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Заказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	Заказ.Дата = ТекущаяДата();
	Заказ.ДатаОтгрузки = ТекущаяДата();
	Заказ.Организация = Справочники.Организации.НайтиПоКоду("00001");
	Заказ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("00367");
	Заказ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ОтветственноеЛицо",Исполнитель,,Заказ.Контрагент);
	Заказ.ТипЦен = Заказ.ДоговорКонтрагента.ТипЦен;
	
	Заказ.ОтгрузкаСПодразделенияСклада = Истина;
	
	Заказ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
	Заказ.КурсВзаиморасчетов = 1;
	Заказ.КратностьВзаиморасчетов = 1;
	// Поставим соответствме Складов
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Подразделения") и ЗначениеЗаполнено(Объект) Тогда
		Склад = Объект.Склад;
		Если Не ЗначениеЗаполнено(Склад) или Склад.ЗапретитьИспользование Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Подразделение = &Подразделение
			|	И НЕ Склады.ПометкаУдаления
			|	И НЕ Склады.ЗапретитьИспользование";
			Запрос.УстановитьПараметр("Подразделение", Объект);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Склад = Выборка.Склад;
			КонецЕсли;
		КонецЕсли;
		Заказ.Склад = Склад;
	Иначе
		Сообщить("Необходимо заполнить склад!", СтатусСообщения.Важное);
	КонецЕсли;
	Заказ.Подразделение = Исполнитель.ОсновноеПодразделение;
	ТаблицаЦен = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Заказ.Контрагент, Товары.ВыгрузитьКолонку("Номенклатура"));
	Для Каждого СтрТовары из Товары Цикл
		НовСтрокаТовары = Заказ.Товары.Добавить();
		НовСтрокаТовары.Номенклатура = СтрТовары.Номенклатура;
		ПриИзмененииНоменклатурыТабЧасти(НовСтрокаТовары, Заказ);
		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НовСтрокаТовары, Заказ, Константы.ВалютаРегламентированногоУчета.Получить());
		НовСтрокаТовары.Количество = СтрТовары.Количество;
		СтрокаЦен = ТаблицаЦен.найти(НовСтрокаТовары.Номенклатура, "Номенклатура");
		ЗаполнитьСтавкуНДСТабЧасти(НовСтрокаТовары, Заказ);
		РассчитатьСуммуТабЧасти(НовСтрокаТовары, Заказ);
		РассчитатьСуммуНДСТабЧасти(НовСтрокаТовары, Заказ);
		НовСтрокаТовары.Коэффициент = 1;
		
		Если СтрокаЦен = Неопределено Тогда
			Сообщить(строка(НовСтрокаТовары.НомерСтроки)+"строка: Цены на товар "+НовСтрокаТовары.Номенклатура.Код+" - нет.");
		Иначе	
			НовСтрокаТовары.Цена = СтрокаЦен.МинимальнаяЦена;  // по политике или правилам ценообразования
		КонецЕсли;	
	КонецЦикла;
	Удалось = Ложь;
	Попытка
		Заказ.Записать(РежимЗаписиДокумента.Запись);
		Удалось = Истина;
		Объект = Заказ.Ссылка;
		Записать();
	Исключение
		Сообщить("Не удалось записать заказ"+ ОписаниеОшибки());
	КонецПопытки;
	
	Если Удалось Тогда
		Заказ.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСтатусаДляСогласованияТипоразмера()
	ТЗ = Товары.Выгрузить();
	ТЗ.Свернуть("Статус");
	Если ТЗ.Количество() = 1 Тогда
		Если ТЗ[0].Статус =  Перечисления.СтатусыСтрокЗаказа.Согласован или 
			ТЗ[0].Статус =  Перечисления.СтатусыСтрокЗаказа.Подтвержден Тогда
			ЗаказОбъект = Объект.ПолучитьОбъект();
			ЗаказОбъект.ТипЗаказа = 0;
			ЗаказОбъект.Согласован = истина;
			Попытка
				ЗаказОбъект.Записать();
			Исключение
				# Если Клиент Тогда
					Сообщить("Не удалось записать заказ",СтатусСообщения.Внимание);
				# КонецЕсли
			КонецПопытки;
			
		ИначеЕсли ТЗ[0].Статус =  Перечисления.СтатусыСтрокЗаказа.Отменен Тогда
			// Закрываем заказ
			ДокументКорректировка=Документы.ЗакрытиеОдногоЗаказаПокупателя.СоздатьДокумент();
			ДокументКорректировка.ЗаказПокупателя = Объект;
			ДокументКорректировка.Дата = ТекущаяДата();
			Попытка
				ДокументКорректировка.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				# Если Клиент Тогда
					Сообщить("Не удалось провести закрытие заказа",СтатусСообщения.Внимание);
				# КонецЕсли
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеДействияФормыСлужебнаяЗаписка(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	печать();
	
	
КонецПроцедуры

Процедура Печать()   Экспорт
	// Если  причинаВозврата <> перечисления.ПричиныВозвратаТовара.Брак и Согласованно Тогда	
	
	ТабДок=Новый ТабличныйДокумент;
	Макет=ПолучитьМакет("МакетСлужебнаяЗаписка2");
	Док = Объект.Товары[0].Реализация;
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ЭтоПересортВЗавкеНаВозврат = ложь;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") и Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт тогда
		ЭтоПересортВЗавкеНаВозврат = истина;	
	КонецЕсли; 	
	
	ОбластьШапка.Параметры.Контрагент= Объект.Контрагент;
	ОбластьШапка.Параметры.АдресКонтрагента=ПолучитьАдресИзКонтактнойИнформации(Объект.Контрагент);
	ОбластьШапка.Параметры.Менеджер=Объект.Ответственный.Наименование;
	ОбластьШапка.Параметры.ЗаявкаНаВозврат=Объект.Ссылка;
	ОбластьШапка.Параметры.Номер=Док.Номер;
	ОбластьШапка.Параметры.Номер=Док.Дата;	
	
	ТабДок.Вывести(ОбластьШапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	|	ЗаявкаНаВозвратТоваровТовары.Количество,
	|	ЗаявкаНаВозвратТоваровТовары.НомерСтроки,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация,
	|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Количество),0) КАК План," 
	//+?( ЭтоПересортВЗавкеНаВозврат," ВЫБОР КОГДА СУММА(ЗаявкаНаВозвратТоваровТовары.Количество)>0 ТОГДА СУММА(ЗаявкаНаВозвратТоваровТовары.Количество) ИНАЧЕ 0 КОНЕЦ КАК Факт"," СУММА(РеализацияТоваровУслугТовары.Количество) - ЗаявкаНаВозвратТоваровТовары.Количество КАК Факт")+
	//07.08.18 Смирнов
	+?( ЭтоПересортВЗавкеНаВозврат," ВЫБОР КОГДА СУММА(ЗаявкаНаВозвратТоваровТовары.Количество)>0 ТОГДА СУММА(ЗаявкаНаВозвратТоваровТовары.Количество) ИНАЧЕ ЗаявкаНаВозвратТоваровТовары.Количество + ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Количество), 0) КОНЕЦ КАК Факт"," СУММА(РеализацияТоваровУслугТовары.Количество) - ЗаявкаНаВозвратТоваровТовары.Количество КАК Факт")+
	"
	|ПОМЕСТИТЬ Основная
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+?(ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров" ,"РеализацияТоваровУслуг")+".Товары КАК РеализацияТоваровУслугТовары
	|		ПО ЗаявкаНаВозвратТоваровТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|			И ЗаявкаНаВозвратТоваровТовары.Реализация = РеализацияТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаВозвратТоваровТовары.Номенклатура,
	|	ЗаявкаНаВозвратТоваровТовары.НомерСтроки,
	|	ЗаявкаНаВозвратТоваровТовары.Количество,
	|	ЗаявкаНаВозвратТоваровТовары.Реализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТоварыАдресноеХранение.АдресХранения,
	|	РеализацияТоваровУслугТовары.Склад,
	|	Основная.Номенклатура

	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	Основная КАК Основная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+?(ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров" ,"РеализацияТоваровУслуг")+".Товары КАК РеализацияТоваровУслугТовары
	|		ПО Основная.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
	|			И Основная.Реализация.Ссылка = РеализацияТоваровУслугТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+?(ТипЗнч(Док) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров" ,"РеализацияТоваровУслуг")+".ТоварыАдресноеХранение КАК РеализацияТоваровУслугТоварыАдресноеХранение
	|		ПО Основная.Номенклатура = РеализацияТоваровУслугТоварыАдресноеХранение.Номенклатура
	|			И Основная.Реализация.Ссылка = РеализацияТоваровУслугТоварыАдресноеХранение.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Основная.Номенклатура,
	|	Основная.Количество,
	|	Основная.Реализация,
	|	Основная.План,
	|	Основная.Факт,
	|	Основная.НомерСтроки,
	|	Склады.АдресХранения,
	|	Склады.Склад
	|ИЗ
	|	Основная КАК Основная,
	|	ЛЕВОЕ СОЕДИНЕНИЕ Склады КАК Склады
	|	ПО Основная.Номенклатура = Склады.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);                
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("НН");
	Данные.Колонки.Добавить("СтрокаНоменклатуры");
	Данные.Колонки.Добавить("Код");
	Данные.Колонки.Добавить("СтрокаРеализация");
	Данные.Колонки.Добавить("Количество");
	Данные.Колонки.Добавить("СтрокаСклад");
	Данные.Колонки.Добавить("АдресХранения");
    Данные.Колонки.Добавить("План");
	Данные.Колонки.Добавить("Факт");
	Ст=Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Ст = неопределено тогда
			СТ = Данные.Добавить();
			Первый = Истина;
		КонецЕсли;
		Если СТ.СтрокаНоменклатуры = ВыборкаДетальныеЗаписи.Номенклатура и СТ.НН = ВыборкаДетальныеЗаписи.НомерСтроки тогда
			СТ.СтрокаСклад= "" + СТ.СтрокаСклад + "; " + ВыборкаДетальныеЗаписи.Склад;	
		    СТ.АдресХранения= "" + СТ.АдресХранения + "; " + ВыборкаДетальныеЗаписи.АдресХранения;
			номерстр = ВыборкаДетальныеЗаписи.НомерСтроки;
		Иначе
			Если не Первый тогда
			СТ = Данные.Добавить();
			КонецЕсли;
			СТ.НН=ВыборкаДетальныеЗаписи.НомерСтроки;
			СТ.СтрокаНоменклатуры=ВыборкаДетальныеЗаписи.Номенклатура;
			СТ.Код=ВыборкаДетальныеЗаписи.Номенклатура.Код;
			Если не ВыборкаДетальныеЗаписи.Реализация = Неопределено Тогда 
				СТ.СтрокаРеализация=ВыборкаДетальныеЗаписи.Реализация.Номер;
			КонецЕсли;
			СТ.Количество= ВыборкаДетальныеЗаписи.Количество;
			СТ.СтрокаСклад=ВыборкаДетальныеЗаписи.Склад;
			СТ.АдресХранения= ВыборкаДетальныеЗаписи.АдресХранения;
			СТ.План=Формат(ВыборкаДетальныеЗаписи.План,"ЧН=0");
			СТ.Факт=Формат(ВыборкаДетальныеЗаписи.Факт,"ЧН=0");
            первый  = Ложь;
           

		КонецЕсли;			
		
	КонецЦикла;
	
	Для каждого стр из Данные цикл 
		ОбластьСтрока.Параметры.нн=стр.НН;
		ОбластьСтрока.Параметры.СтрокаНоменклатуры=стр.СтрокаНоменклатуры;
		ОбластьСтрока.Параметры.Код=стр.Код;
		ОбластьСтрока.Параметры.СтрокаРеализация=стр.СтрокаРеализация;
		ОбластьСтрока.Параметры.Количество= стр.Количество;
		ОбластьСтрока.Параметры.СтрокаСклад=стр.СтрокаСклад;
		ОбластьСтрока.Параметры.АдресХранения= стр.АдресХранения;
		ОбластьСтрока.Параметры.План=стр.План;
		ОбластьСтрока.Параметры.Факт=стр.Факт;
					
		табДок.Вывести(ОбластьСтрока);
    КонецЦикла;
	
	ОбластьПодвал.Параметры.Водитель    = СокрЛП(док.Водитель);
	ОбластьПодвал.Параметры.Автомобиль  = СокрЛП(док.МаркаАвтомобиля) + " " + СокрЛП(док.ГосНомерАвтомобиля);
	СтрМ=РазложитьСтрокуВМассивПодстрок(СокрЛП(док.Комментарий),"#");
	Попытка
		ОбластьПодвал.Параметры.ДокОтгрузки = СокрЛП(СтрМ[2]); 
	Исключение
		ОбластьПодвал.Параметры.ДокОтгрузки = док;
	КонецПопытки;
	
	ОбластьПодвал.Параметры.Основание="Основание: "+Объект.ПричинаВозврата;
	ОбластьПодвал.Параметры.Комментарий=Объект.Комментарий;
	ОбластьПодвал.Параметры.КомментарийСклада=Объект.КомментарийСклада;
	ОбластьПодвал.Параметры.Дата=Формат(Дата,"ДФ=dd.MM.yyyy");
	ОбластьПодвал.Параметры.Менеджер=Объект.Ответственный.Наименование;
	
	табДок.Вывести(ОбластьПодвал);
	табдок.ОтображатьСетку = Ложь;
	табДок.Показать();
	//конецЕсли;
конецпроцедуры	

Процедура ОсновныеДействияФормыПритензия(Кнопка)
	Если ЭтаФорма.Модифицированность тогда
		Предупреждение("Перед печатью документ будет перезаписан!", 5);
		ЭтаФорма.ЗаписатьВФорме();
	КонецЕсли;	
	
	ТабДок = Новый ТабличныйДокумент; 
	// получаем макет
	Макет = ПолучитьМакет(?(ТипЗНЧ(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаБрак"), "МакетВозмещения","Макет"));
	Запрос = Новый Запрос;
	
	
	ЕСли ТипЗНЧ(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаБрак") тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПользователяТовары.Цена,
		|	ЗадачиПользователяТовары.Количество,
		|	ЗадачиПользователяТовары.Сумма,
		|	ЗаявкаНаБракРасшифровка.Реализация,
		|	ЗадачиПользователяТовары.Номенклатура как Наименование,
		|	ЗадачиПользователяТовары.Номенклатура.Код как Код
		|ИЗ
		|	Задача.ЗадачиПользователя.Товары КАК ЗадачиПользователяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаБрак.Расшифровка КАК ЗаявкаНаБракРасшифровка
		|		ПО ЗадачиПользователяТовары.Номенклатура = ЗаявкаНаБракРасшифровка.Номенклатура
		|ГДЕ
		|	ЗадачиПользователяТовары.Статус = &Статус
		|	И ЗадачиПользователяТовары.Ссылка = &Ссылка
		|	И ЗаявкаНаБракРасшифровка.Ссылка = &Ссылка2";
		
		Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыСтрокЗаказа.Подтвержден);
		
	иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПользователяТовары.Цена,
		|	ЗадачиПользователяТовары.Количество,
		|	ЗадачиПользователяТовары.Сумма,
		|	ЗаявкаНаВозвратТоваровТовары.Реализация,
		|	ЗадачиПользователяТовары.Номенклатура как Наименование,
		|	ЗадачиПользователяТовары.Номенклатура.Код как Код
		|ИЗ
		|	Задача.ЗадачиПользователя.Товары КАК ЗадачиПользователяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваров.Товары КАК ЗаявкаНаВозвратТоваровТовары
		|		ПО ЗадачиПользователяТовары.Номенклатура = ЗаявкаНаВозвратТоваровТовары.Номенклатура
		|ГДЕ
		|	ЗадачиПользователяТовары.Статус = &Статус
		|	И ЗадачиПользователяТовары.Ссылка = &Ссылка
		|	И ЗаявкаНаВозвратТоваровТовары.Ссылка = &Ссылка2";
		
		Запрос.УстановитьПараметр("Статус",  Перечисления.СтатусыСтрокЗаказа.Отменен);
	КонецЕсли;  	
	
	Запрос.УстановитьПараметр("ссылка",  Ссылка);       							//ссылка на задачу
	Запрос.УстановитьПараметр("ссылка2", Объект.Ссылка);                            //ссылка на связанный документ
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("Итог");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Строка");
	
	ТабДок.Очистить();
	СуммаИтог = 0;
	Попытка	
		док = ВыборкаДетальныеЗаписи[0].Реализация; 
		ОбластьЗаголовок.Параметры.ДатаСоздания = Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
		// выводим данные 
		ОбластьЗаголовок.Параметры.ДатаРеализации	= Формат(док.Дата, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры.НомерНакладной 	= док.Номер;
		ОбластьЗаголовок.Параметры.Контрагент 		= док.контрагент.НаименованиеПолное;
		ОбластьЗаголовок.Параметры.Перевозчик 		= СокрЛП(док.Перевозчик);
		ОбластьЗаголовок.Параметры.договор 		= СокрЛП(док.ОрганизацияВыдавшаяДоверенность.ОсновнойДоговорКонтрагента.Номер);
		ОбластьЗаголовок.Параметры.ДатаДоговора 	= Формат(док.ОрганизацияВыдавшаяДоверенность.ОсновнойДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy");
		ОбластьЗаголовок.Параметры.ФИОВодителя 	= СокрЛП(док.Водитель);
		ОбластьЗаголовок.Параметры.автомобиль 		= СокрЛП(док.МаркаАвтомобиля) + " " + СокрЛП(док.ГосНомерАвтомобиля);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		
		сч=1;
		Для каждого стр из ВыборкаДетальныеЗаписи Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(Стр);			
			ОбластьДетальныхЗаписей.Параметры.Ном = сч;
			ОбластьДетальныхЗаписей.Параметры.Цена = Формат(стр.Цена,"ЧДЦ=2");
			ТабДок.Вывести(ОбластьДетальныхЗаписей);
						
			СуммаИтог = Стр.Сумма + СуммаИтог;
			сч = сч+1;
		КонецЦикла;
		ОбластьПодвалТаблицы.Параметры.СуммаИтог = Формат(СуммаИтог, "ЧДЦ=2");								
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		
		ОбластьПодвал.Параметры.Организация = док.Организация.Наименование;
		ОбластьПодвал.Параметры.ДатаСрока 		=  Формат(Дата + 30*24*60*60, "ДФ=dd.MM.yyyy");	
		ОбластьПодвал.Параметры.СуммаИтог 		=  Формат(СуммаИтог, "ЧДЦ=2");
		
		Если ТипЗНЧ(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаявкаНаБрак") тогда
			ОбластьПодвал.Параметры.СуммаПрописью 	=  СформироватьСуммуПрописью(СуммаИтог, Справочники.Валюты.НайтиПоКоду("643"));
		КонецЕсли;
		
		СведенияОПоставщике       = СведенияОЮрФизЛице(док.Организация, Формат(Дата, "ДФ=dd.MM.yyyy"),, док.Организация.ОсновнойБанковскийСчет);
		СведенияОПоставщике.ПолноеНаименование = "";
		ОбластьПодвал.Параметры.Реквизиты 		=  ОписаниеОрганизации(СведенияОПоставщике);
		
		
		ТабДок.Вывести(ОбластьПодвал);
		
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.АвтоМасштаб = Истина;
		//ТабДок.Вывести(Макет);
		ТабДок.Показать();
	Исключение
		Сообщить("Нет товаров для выставления претензии!" + Символы.ПС + "Статус для претензии ""Отменен""!");
	КонецПопытки;
	
	
КонецПроцедуры
 
Процедура ДействияФормыОтправитьНаКорректировку(Кнопка)
	НаКорректировку = Истина	 
КонецПроцедуры

Процедура ПроверкаНедогрузов_Пересортов(Отказ) Экспорт
	Т = Неопределено;
	Грузчик = "";
	Если не Отказ тогда
		если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда
			Если Не Ссылка.Выполнена ТОГДА
				Если Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза или Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт Тогда
					Если Исполнитель <> Справочники.Пользователи.НайтиПоКоду("Миронова В.С.") и Исполнитель <> Справочники.Пользователи.НайтиПоКоду("Клейменова О.Г.") и Исполнитель <>  Справочники.Пользователи.НайтиПоКоду("Парыгина С.В.") тогда
						Т = Товары.Найти(Перечисления.СтатусыСтрокЗаказа.Получен, "Статус");
						Если т <> Неопределено тогда
							Возврат;
						Иначе
							Если Исполнитель = Справочники.Пользователи.НайтиПоКоду("Фролов") тогда
								Для Каждого Стр из Товары цикл
									Если ЗначениеНеЗаполнено(Стр.Склад) тогда
										Отказ = Истина;
										Предупреждение("Заполните склад");
										Возврат;
										
									ИначеЕсли Стр.Склад.АдресноеХранение и ЗначениеНеЗаполнено(Стр.АдресХранения) тогда
									    Отказ = Истина;
										Предупреждение("Заполните Адрес хранения");
										Возврат;
									ИначеЕсли Стр.Склад.АдресноеХранение и (Стр.Склад <> Стр.АдресХранения.Владелец) тогда
									    Отказ = Истина;
										Предупреждение("Заполните Адрес хранения в соответствии с выбранным складом");
										Возврат;

									КонецЕсли;
                                КонецЦикла;
								Текст = "";
								Подсказка = "Введите ответственного грузчика";
								Если ВвестиСтроку(Текст, Подсказка, 0, Истина) Тогда
		  		 					Грузчик = Текст;
								КонецЕсли; 
								Если Грузчик = "" тогда
									Отказ = Истина;
									Возврат;
								КонецЕсли;
							КонецЕсли;
							
							Если не Отказ тогда
								Т = Товары.Найти(Перечисления.СтатусыСтрокЗаказа.Отменен, "Статус");
								
								Если т <> Неопределено и не накорректировку тогда
									Если Исполнитель = Справочники.Пользователи.НайтиПоКоду("Фролов") тогда
										СоздатьЗадачу();
										Док = Объект.ПолучитьОбъект();
										Док.ДатаСогласованияСклада = ТекущаяДата();
										Док.ВиновникНедогруза = Перечисления.ВиновникНедогруза.ВинаПеревозчика;
										Док.КомментарийСклада = ?(Найти(Док.КомментарийСклада, "Ответственный грузчик:") > 0 , Док.КомментарийСклада, "Ответственный грузчик: " +Грузчик + Док.КомментарийСклада);
										Док.Записать();
										Выполнена = Истина;
									иначе  // Исполнитель не Фролов,  то есть этапы после него...
										
										СоздатьЗадачу();
										Выполнена = Истина;
									КонецЕсли;
								ИначеЕсли НаКорректировку тогда
									СоздатьЗадачу(НаКорректировку);
									Док = Объект.ПолучитьОбъект();
									Док.ДатаСогласованияЛогистов = ТекущаяДата();
									Док.ВиновникНедогруза = Перечисления.ВиновникНедогруза.ВинаПеревозчика;
									Док.КомментарийСклада = ?(Найти(Док.КомментарийСклада, "Ответственный грузчик:") > 0 , Док.КомментарийСклада, "Ответственный грузчик: " +Грузчик + Док.КомментарийСклада);
									Док.Записать();
									Выполнена = Истина;
								Иначе
									Т = Товары.Найти(Перечисления.СтатусыСтрокЗаказа.Подтвержден, "Статус");
									Если т <> Неопределено тогда
										Док = Объект.ПолучитьОбъект();
										Док.ДатаСогласованияСклада = ТекущаяДата();
										Док.ВиновникНедогруза = Перечисления.ВиновникНедогруза.ВинаСклада;
										Док.КомментарийСклада = ?(Найти(Док.КомментарийСклада, "Ответственный грузчик:") > 0 , Док.КомментарийСклада, "Ответственный грузчик: " +Грузчик + Док.КомментарийСклада);
										Док.Записать();
									    СоздатьЗадачу(Истина);
										Выполнена = Истина;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если не Отказ Тогда
							Док = Объект.ПолучитьОбъект();
							Док.ДатаСогласованияБухгалтерии = ТекущаяДата();
							Док.Записать();	
							Выполнена = Истина;
                        КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//+++Шарафутдинов 06.02.2018
Процедура ПроверкаБрак(Отказ) Экспорт
	Т = Неопределено;
	Грузчик = "";
	Если не Отказ и не НаКорректировку и наБрак тогда
		если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
			Если Не Ссылка.Выполнена ТОГДА
				//Если Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза или Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт Тогда 		//ВидБрака ?
					Если Исполнитель = Справочники.Пользователи.НайтиПоКоду("Захарова Светлана") тогда  
						Т = Товары.Найти(Перечисления.СтатусыСтрокЗаказа.Получен, "Статус");
						Если т <> Неопределено тогда
							Возврат;
						Иначе							
							
							Если не Отказ тогда
								Т = Товары.Найти(Перечисления.СтатусыСтрокЗаказа.Подтвержден, "Статус");
									Если т <> Неопределено тогда
										//Док = Объект.ПолучитьОбъект();
										//Док.ВиновникВозникновенияДефекта = Перечисления.ВиновникиВозникновенияДефекта.Логистика;
										//Док.СостояниеЗаявки = Перечисления.СостоянияЗаявкиНаБрак.ПризнатьБрак;
										//Док.КомментарийСклада = "";
										//Док.Записать();
										 //со статусом ПризнатьБрак автоматически при перезаписи создается задача ответственому менеджеру
									    СоздатьЗадачу();      
										ЭтотОбъект.Выполнена = Истина;
									КонецЕсли;							
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
//---Шарафутдинов 06.02.2018
	
Процедура ПриЗаписи(Отказ)
	Если Отказ тогда
		Возврат
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда
		Если Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза Тогда
			Если ВыбранноеЗначение = Перечисления.СтатусыСтрокЗаказа.Подтвержден тогда
				Если не ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущаяСтрока.Склад) тогда
					Сообщить("Заполните склад данного товара");
					Возврат ;
				ИначеЕсли  ЭлементыФормы.Товары.ТекущаяСтрока.Склад.АдресноеХранение и не ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущаяСтрока.АдресХранения) тогда
					Сообщить("Заполните адреса хранения данного товара");
					Возврат ;
				Иначе
					Элемент.Значение = ВыбранноеЗначение;
				КонецЕсли;
			Иначе
				Элемент.Значение = ВыбранноеЗначение;	
			КонецЕсли;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;		
		КонецЕсли;
	Иначе
		Элемент.Значение = ВыбранноеЗначение;			
	КонецЕсли;	
	
	ИзменитьНазваниеЗадачиИОписаниеПриСогласовании();
	
КонецПроцедуры

Процедура ДействияФормыЗаполнитьПДЗ(Кнопка)
	
	Парам = Новый Структура; 
	Отбор = Новый Структура; 
	Отбор.Вставить("Менеджер", Исполнитель); 
	Парам.Вставить("Отбор", Отбор); 
	
	ОткрытьФорму("РегистрСведений.ИнформацияПоПДЗОтМенеджера.ФормаСписка", Парам);	
	
КонецПроцедуры

Процедура ТабличноеПоле1КомментарийОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СоздатьДокументСобытиеПоПДЗ(Текст, 1);	
	ЗаписатьРегистрИнформацииПоПДЗ(Текст, 1);
	
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Строка = ТЗОписания.Найти(ДанныеСтроки.Контрагент, "Контрагент");
	Попытка
		ОформлениеСтроки.Ячейки.ПредыдущийКомментарий.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ПредыдущийКомментарий.Текст = Строка.ПоследнееСобытие;
	Исключение
	Конецпопытки;
	
КонецПроцедуры

Процедура ЗаписатьРегистрИнформацииПоПДЗ(Текст, Запись)
	
	Рег = РегистрыСведений.ИнформацияПоПДЗОтМенеджера.СоздатьНаборЗаписей();
	Рег.Записывать = Истина;
	Рег.Отбор.Менеджер.Установить(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Менеджер);
	Рег.Отбор.Контрагент.Установить(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Контрагент);
	Рег.Отбор.СуммаДолга.Установить(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.СуммаДолга);
	Рег.Отбор.ДнейПросрочки.Установить(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.ДнейПросрочки);
	
	Попытка
		Рег.Прочитать();
		Если Рег.Количество() > 0 Тогда
			
			Рег[0].Менеджер 	 = ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Менеджер;
			Рег[0].Контрагент 	 = ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Контрагент;
			Рег[0].СуммаДолга 	 = ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.СуммаДолга;
			Рег[0].ДнейПросрочки = ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.ДнейПросрочки;
			Рег[0].Оплата 	 	 = ?(Запись = 2 , Текст, ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Оплата);
			Рег[0].Комментарий 	 = ?(Запись = 1 , Текст, ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Комментарий);
			Рег[0].Событие	 	 = сДок.Ссылка;

			Рег.Записать(Истина);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьДокументСобытиеПоПДЗ(Текст, Запись)
	
		Док = Документы.Событие.СоздатьДокумент();
		Док.Ответственный = глТекущийПользователь;
		Док.ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Док.ВидСобытия = Перечисления.ВидыСобытий.КомментарийПДЗ;
		Док.ОписаниеСобытия =?(Запись = 1 ,"" + Текст + ?(ЗначениеЗаполнено(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Оплата), "   Оплата: " + Формат(ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Оплата, "ДФ=""дд ММММ гггг"), ""), "" + ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Комментарий +  "   Оплата: " + текст);
		Док.Контрагент = ЭлементыФормы.ТабличноеПоле1.ТекущиеДанные.Контрагент;
		Док.Дата = ТекущаяДата();
		Док.Записать(РежимЗаписиДокумента.Проведение);
	сДок = Док;	
КонецПроцедуры

Процедура ТабличнаяЧасть1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Попытка
		ОформлениеСтроки.Ячейки.Отклонение.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Отклонение.Текст =  ДанныеСтроки.ПланОборот -ДанныеСтроки.План;
	Исключение
	Конецпопытки;
	
КонецПроцедуры

Процедура КоманднаяПанель2ОтправитьРуководителям(Кнопка)
	
	ПланыНаКорректировку = Планы.Выгрузить();
	ПланыНаКорректировку.Свернуть("НаправлениеПродаж");
	ТЗ = Планы.Выгрузить();
	Для Каждого Стр из ПланыНаКорректировку ЦИКЛ
		Задача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Задача.Исполнитель = Стр.НаправлениеПродаж.ОтветственныйЗаПланирование;
		задача.Наименование = "Скорректируйте планы по продажам"; 
		задача.Дата 		    = ТекущаяДата();
		задача.СрокИсполнения = КонецДня( ТекущаяДата() ); 	
		задача.Оповещение     = истина;
		задача.СрокОповещения = ТекущаяДата();
		Отбор = Новый Структура();
		Отбор.Вставить("НаправлениеПродаж", Стр.НаправлениеПродаж);
		список = ТЗ.НайтиСтроки(Отбор);
		для Каждого Ст из Список цикл
			Строка = Задача.Планы.Добавить();
			Строка.НаправлениеПродаж = Ст.НаправлениеПродаж;
			Строка.параметрПоказателя = Ст.параметрПоказателя;
			Строка.План = Ст.План;
			строка.ПланОборот = Ст.ПланОборот;
			Строка.ПоказательЭффективности = Ст.ПоказательЭффективности;
		Конеццикла;
		
		попытка
			задача.Записать();	
		исключение		
		КонецПопытки;
		
		
	КонецЦикла;
	Выполнена = Истина;
	ЭтотОбъект.Записать();
КонецПроцедуры

Процедура ТабличноеПоле1ОплатаПриИзменении(Элемент)
	ЗаписатьРегистрИнформацииПоПДЗ(Формат(Элемент.Значение, "ДЛФ=Д"), 2);
КонецПроцедуры

Процедура ПеренаправитьНачальника()
		
	Если ПоследовательностьСогласования.Количество()>0 Тогда
		ИсполнительНачальникТГ = ПоследовательностьСогласования[0].Сотрудник;
	КонецЕсли;
	
    ПоследовательностьСогласования.Удалить(0);	
		
	Исполнитель = ИсполнительНачальникТГ;
	
	Выполнена = Ложь;
	
	Для каждого стр из Товары Цикл
		Если стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Отменен
			и стр.Статус <> Перечисления.СтатусыСтрокЗаказа.Согласован тогда //Оставляем состояние от предыдущего "согласователя"!
			
		стр.Статус = Перечисления.СтатусыСтрокЗаказа.ПустаяСсылка();
		
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ТоварыАдресХраненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.АдресаХранения.ПолучитьФормуВыбора(,ЭтаФорма);
    ФормаВыбора.Отбор.Владелец.Значение    = ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока.Склад;
    ФормаВыбора.Отбор.Владелец.Использование = Истина;
	Элемент.Значение = ФормаВыбора.ОткрытьМодально();
КонецПроцедуры

Процедура ДействияФормыОтправитьНаБрак(Кнопка)
		наБрак = Истина ;
КонецПроцедуры

Если ЗадачаПоПоискуДокументов Тогда
	  ЭлементыФормы.Исполнитель.Доступность = РольДоступна("ПолныеПрава");
  КонецЕсли;
  
   ПелевинаИрина = Справочники.Пользователи.НайтиПоКоду("Захарова Светлана");
  
Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваров") Тогда
	Если Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.ПоискНедогруза или Объект.ПричинаВозврата = Перечисления.ПричиныВозвратаТовара.Пересорт Тогда
		//ЭтаФорма.ТолькоПросмотр	 = Ссылка.Выполнена;
		Если глТекущийПользователь = ПелевинаИрина Тогда
			//ЭлементыФормы.ДействияФормы.Кнопки.ОтправитьНаКорректировку.Доступность = Истина;
			ЭлементыФормы.ДействияФормы.Кнопки.Отправить.Кнопки.ОтправитьНаКорректировку.Доступность = Истина;			
		КонецЕсли;
		Если глТекущийПользователь <> Справочники.Пользователи.НайтиПоКоду("Фролов") Тогда
			//ЭлементыФормы.Товары.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
	Если глТекущийПользователь = ПелевинаИрина Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Отправить.Кнопки.ОтправитьНаБрак.Доступность = Истина;		
	КонецЕсли;
КонецЕсли;

