////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мСписокОтложенногоВремени;
Перем мСписокЗадачДляСверки;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Функция представляет разницу между параметром и текущей датой, в виде строки
//
// Параметры
//	ДатаСрока - Дата формата ДатаВремя
//
Функция СрокСтрокой(ДатаСрока)
	
	РазностьДат = КонецМинуты(ТекущаяДата()) - КонецМинуты(ДатаСрока);
	Если РазностьДат > 0 Тогда
		
		Предлог     = "на";
		Определение = "просрочен";
		Секунды     = РазностьДат;
		
	Иначе
		
		Предлог     = "через";
		Определение = "истекает";
		Секунды     = - РазностьДат;
		
	КонецЕсли;
	
	ЧислоМинут = 1;
	ЧислоЧасов = 0;
	ЧислоДней  = 0;
	
	Если (Секунды >= 60) И (Секунды < 3600) Тогда // в 1 часе 3600 секунд
		ЧислоМинут = Цел(Секунды/60);
	ИначеЕсли (Секунды >= 3600) И (Секунды < 86400) Тогда // в 1 дне 86400 секунд
		
		ЧислоЧасов = Цел(Секунды/(60*60));
		ЧислоМинут = Цел((Секунды - ЧислоЧасов*60*60)/60);
		
	ИначеЕсли Секунды >= 86400 Тогда
		
		ЧислоДней  = Цел(Секунды/(60*60*24));
		ЧислоЧасов = Цел((Секунды - ЧислоДней*60*60*24)/(60*60));
		ЧислоМинут = Цел((Секунды - (ЧислоДней*60*60*24 + ЧислоЧасов*60*60))/60);
		
	КонецЕсли;
	
	Возврат Предлог + " " + ?(ЧислоДней > 0, Строка(ЧислоДней) + " дн. ", "") + ?(ЧислоЧасов > 0, Строка(ЧислоЧасов) + " час. ", "") + Строка(ЧислоМинут) + " мин. " + Определение;
	
КонецФункции // СрокСтрокой()

//Процедура активизирует форму и нужную строку табличного поля
//
Процедура АктивизироватьФорму(ВыгрузкаЗадачДляСверки) Экспорт
	
	ЗадачаСписок.Обновить();
	
	Если НЕ СравнитьТаблицыНаборовЗаписей(мСписокЗадачДляСверки, ВыгрузкаЗадачДляСверки) Тогда //НастройкаПравДоступа
		
		мСписокЗадачДляСверки = ВыгрузкаЗадачДляСверки;
		
		ЭтаФорма.Отбор.СрокОповещения.ВидСравнения  = ВидСравнения.Меньше;
		ЭтаФорма.Отбор.СрокОповещения.Использование = Истина;
		ЭтаФорма.Отбор.СрокОповещения.Значение      = ТекущаяДата();
		ЭтаФорма.Обновить();
		
		Если (НЕ ЭтаФорма.ВводДоступен()) Тогда
			ЭтаФорма.Активизировать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму Задачи, выбранную в строке табличного поля
//
Процедура ОткрытьФормуЗадачи(ТекущаяЗадача)
	
	ФормаЗадачи = ТекущаяЗадача.ПолучитьФорму();
	если (ТекущаяЗадача.НаСогласование 
			 и ТипЗнч(ТекущаяЗадача.Объект)=Тип("СправочникСсылка.Точки") ) тогда													
		ФормаЗадачи.ОткрытьМодально(); //28.12.2015
	Иначе
		ФормаЗадачи.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуЗадачи()

// Процедура отмечает выделенную задачу как выполненную и записывает
//
Процедура ВыполнитьЗадачу(ТекущаяЗадача, ВыключитьНапоминание=ЛОЖЬ)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	//Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда //+++

	//	Попытка

	//		Задача.ВыполнитьЗадачуИнтерактивно();
	//	Исключение
	//	КонецПопытки;
	//Иначе
 		Задача.Выполнена = ИСТИНА;
		Если ВыключитьНапоминание тогда //+++ 20.01.2014
			Задача.Оповещение = ложь;
		КонецЕсли;
		Задача.Записать();
	//КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗадачу()

// Процедура переносит срок исполнения выделенной Задачи на поздний срок
//
Процедура ОтложитьЗадачу(ТекущаяЗадача)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	Задача.СрокОповещения = НачалоМинуты(ТекущаяДата() + ЗначениеОтложенногоВремени);
	Задача.Записать();
	
КонецПроцедуры // ОтложитьЗадачу()

// Процедура изменяет содержимое элементов Надпись формы
//
// Параметры
//	Тема - содержимое надписи НадписьТема
//
Процедура ЗаполнитьПоля(Тема, Напомнить)
	
	ЭлементыФормы.НадписьТема.Заголовок  = Тема;
	
КонецПроцедуры // ЗаполнитьПоля()

// Процедура обновляет содержимое заданных объектов формы
//
Процедура ОбновитьПоляФормы(Элемент)
	
	Если Элемент.ТекущиеДанные = неопределено тогда
		возврат;
	КонецЕсли;	
	
	Если ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		ЗаполнитьПоля("", "Выбрано задач - " + Строка(ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество()));	
	ИначеЕсли ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() = 1 Тогда
		ЗаполнитьПоля(Элемент.ТекущиеДанные.Наименование, "Исполнить: " + Формат(Элемент.ТекущиеДанные.СрокИсполнения, "ДФ=""дддд', 'дд ММММ гггг 'г. в' ЧЧ:мм"""));
		
		//+++ 14.08.2015 - нельзя просто выполнить задачу на согласование руковолителю!
		ЭлементыФормы.КнопкаПрекратить.Доступность = (Элемент.ТекущиеДанные.Ссылка.НаСогласование 
													  и Элемент.ТекущиеДанные.Ссылка.Исполнитель <> ПараметрыСеанса.ТекущийПользователь)
													  или (НЕ Элемент.ТекущиеДанные.Ссылка.НаСогласование);  
													  
		//28.12.2015 --- блокировка откладывания задач на согласование Точек!											  
		ЭлементыФормы.КнопкаОтложить.Доступность = НЕ (Элемент.ТекущиеДанные.Ссылка.НаСогласование 
													  и ТипЗнч(Элемент.ТекущиеДанные.Ссылка.Объект)=Тип("СправочникСсылка.Точки") );
		//28.12.2015 - СРАЗУ ОТКРЫВАЕМ!
		если НЕ ЭлементыФормы.КнопкаОтложить.Доступность тогда
			ОткрытьФормуЗадачи(Элемент.ТекущиеДанные.Ссылка);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПоляФормы()

// Процедура выполняет операции с выделенными Задачами согласно выбранному режиму
//
// Параметры
//	Режим - опция нажатия определенной кнопки на форме
//
Процедура ОбработатьВыделенныеСтроки(Режим = "Открыть")
	
	ШагПрохода = 0;
	
	Пока ШагПрохода <= ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() - 1 Цикл
		
		ВыделеннаяСтрока = ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Получить(ШагПрохода);
		
		Если Режим = "Открыть" Тогда
			ОткрытьФормуЗадачи(ВыделеннаяСтрока.Ссылка);
		ИначеЕсли Режим = "Прекратить" Тогда
			Если Флажок1 тогда //+++ 20.01.2014 - чужие задачи - надо выключить оповещение
				ВыполнитьЗадачу(ВыделеннаяСтрока.Ссылка, Истина);
			иначе	
				ВыполнитьЗадачу(ВыделеннаяСтрока.Ссылка);
			КонецЕсли;
		ИначеЕсли (Режим = "Отложить") Тогда
			ОтложитьЗадачу(ВыделеннаяСтрока.Ссылка);
		КонецЕсли;
		
		ШагПрохода = ШагПрохода + 1;
				
	КонецЦикла;
	
	ЗадачаСписок.Обновить();
	
	ПроверитьНапоминанияПользователя(ПараметрыСеанса.ТекущийПользователь);//УправлениеКонтактами
	
КонецПроцедуры // ОбработатьВыделенныеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ
//

// Обработчик события табличного поля ПриВыводеСтроки
//
Процедура ЗадачаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка <> Неопределено Тогда
		
		ОформлениеСтроки.Ячейки.СрокСтрокой.УстановитьТекст(СрокСтрокой(ДанныеСтроки.Ссылка.СрокОповещения));
		
		СтрокаПоздравления = "Поздравить с Днём рождения!";
		
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		
		Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события табличного поля ПриВыбореСтроки
//
Процедура ЗадачаСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьФормуЗадачи(ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока);
	
КонецПроцедуры

// Обработка события табличного поля ПриАктивизацииСтроки
//
// Параметр - стандартный
//
Процедура ЗадачаСписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПоляФормы(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ПозицияЗначенияСпискаОтложенногоВремени = ВосстановитьЗначение("ПозицияЗначенияСпискаОтложенногоВремени");
	
	ЭтаФорма.Отбор.Оповещение.ВидСравнения   = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Оповещение.Использование  = Истина;
	ЭтаФорма.Отбор.Оповещение.Значение       = Истина;

    //30.01.2014 - обратные уведомления нужны всем!
	Флажок1 = Истина;
	ЭлементыФормы.Флажок1.Видимость = истина;

~111:  Если Флажок1 тогда // выполненная другими пользователями!
	ЭтаФорма.Отбор.Выполнена.ВидСравнения    = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Выполнена.Использование   = Истина;
	ЭтаФорма.Отбор.Выполнена.Значение        = Истина; // да!
	
	ЭтаФорма.Отбор.Инициатор.ВидСравнения  = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Инициатор.Использование = Истина;
	ЭтаФорма.Отбор.Инициатор.Значение      = ПараметрыСеанса.ТекущийПользователь;
	
	ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.НеРавно;
	ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
	ЭтаФорма.Отбор.Исполнитель.Значение		 = ПараметрыСеанса.ТекущийПользователь;
	
  Иначе // не выполненные, но с напоминанием
	ЭтаФорма.Отбор.Выполнена.ВидСравнения    = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Выполнена.Использование   = Истина;
	ЭтаФорма.Отбор.Выполнена.Значение        = Ложь;  // нет!
	
	ЭтаФорма.Отбор.Инициатор.ВидСравнения  = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Инициатор.Использование = ложь;

	ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
	ЭтаФорма.Отбор.Исполнитель.Значение      = ПараметрыСеанса.ТекущийПользователь;
  КонецЕсли;
  
 //+++( 05.10.2018 - только "НОВЫЕ" не более 1 месяца!
  	НачДата = ДобавитьМесяц(НачалоДня( ТекущаяДата() ), -1);
	
  	ЭтаФорма.Отбор.СрокОповещения.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ЭтаФорма.Отбор.СрокОповещения.Значение = НачДата;
	ЭтаФорма.Отбор.СрокОповещения.Использование = Истина;
 //+++)	
 
	ЭлементыФормы.ЗначениеОтложенногоВремени.СписокВыбора = мСписокОтложенногоВремени;
	
	Если ПозицияЗначенияСпискаОтложенногоВремени = Неопределено Тогда
		ЭлементыФормы.ЗначениеОтложенногоВремени.Значение = мСписокОтложенногоВремени[0].Значение;
	Иначе
		ЭлементыФормы.ЗначениеОтложенногоВремени.Значение = ПозицияЗначенияСпискаОтложенногоВремени;
	КонецЕсли;
	
	
//-------открываем свои задачи если нет обратных задач (уведомлений о выполнении исполнителем)-------------------
Если Флажок1 тогда
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ первые 1
|	ЗадачиПользователя.Ссылка
|ИЗ
|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
|ГДЕ
|	ЗадачиПользователя.Выполнена
|	И ЗадачиПользователя.Инициатор = &Инициатор
|	И ЗадачиПользователя.Исполнитель <> &Инициатор
|	И НЕ ЗадачиПользователя.ПометкаУдаления
|	И ЗадачиПользователя.Оповещение
|	И ЗадачиПользователя.СрокОповещения>=&НачДата
|";
Запрос.УстановитьПараметр("НачДата", НачДата); //+++ 05.10.2018 - только "НОВЫЕ" не старее N дней!
Запрос.УстановитьПараметр("Инициатор", ПараметрыСеанса.ТекущийПользователь);
Результат = Запрос.Выполнить();
	
  Если Результат.Пустой() тогда
	  Флажок1 = ЛОЖЬ; // только свои задачи
	  перейти ~111;
  КонецЕсли;  
  
Иначе // только свои задачи
	
	Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
               |	ЗадачиПользователя.Ссылка
               |ИЗ
               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
               |ГДЕ
               |	НЕ ЗадачиПользователя.Выполнена
               |	И ЗадачиПользователя.Исполнитель = &Инициатор
               |	И НЕ ЗадачиПользователя.ПометкаУдаления
               |	И ЗадачиПользователя.Оповещение
			   |	И ЗадачиПользователя.СрокОповещения>=&НачДата
              |
               |УПОРЯДОЧИТЬ ПО
               |	ЗадачиПользователя.Дата
               |АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("НачДата", НачДата); //+++ 05.10.2018 - только "НОВЫЕ" не старее N дней!
Запрос.УстановитьПараметр("Инициатор", ПараметрыСеанса.ТекущийПользователь);
Результат = Запрос.Выполнить();
  
КонецЕсли;	  
	
	ЗадачаСписок.Колонки.Добавить("СрокИсполнения");
	
	//выборка = Результат.Выбрать(); //+++ 28.12.2015
	//Если выборка.Следующий() тогда
	//	если выборка.Ссылка.НаСогласование и ТипЗнч(выборка.Ссылка.Объект)=Тип("СправочникСсылка.Точки") тогда
	//		ЭлементыФормы.КнопкаОтложить.Доступность = ЛОЖЬ;
	//		ОткрытьФормуЗадачи(выборка.Ссылка);//сразу открываем МОДАЛЬНО!
	//	КонецЕсли;	
	//КонецЕсли;
	
КонецПроцедуры

// Обработка нажатия кнопки КнопкаОткрыть
//
Процедура КнопкаОткрытьНажатие(Элемент)
	
	ОбработатьВыделенныеСтроки();
	
КонецПроцедуры // КнопкаОткрытьНажатие()

// Обработка нажатия кнопки КнопкаПрекратить
//
Процедура КнопкаПрекратитьНажатие(Элемент)
	
	Если ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Ответ = Вопрос("Вы уверены, что следует прекратить выделенные напоминания?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ОбработатьВыделенныеСтроки("Прекратить");
	
КонецПроцедуры // КнопкаПрекратитьНажатие()

// Обработка нажатия кнопки КнопкаОтложить
//
Процедура КнопкаОтложитьНажатие(Элемент)
	
	ОбработатьВыделенныеСтроки("Отложить");
		
КонецПроцедуры // КнопкаОтложитьНажатие()

// Процедура-обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	СохранитьЗначение("ПозицияЗначенияСпискаОтложенногоВремени", ЭлементыФормы.ЗначениеОтложенногоВремени.Значение);
	
КонецПроцедуры

Процедура Флажок1ПриИзменении(Элемент)
ЭлементыФормы.НадписьТема.Заголовок = " ";	
	Если Флажок1 тогда // выполненная другими пользователями!
		ЭтаФорма.Отбор.Инициатор.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Инициатор.Использование = Истина;
		ЭтаФорма.Отбор.Инициатор.Значение      = ПараметрыСеанса.ТекущийПользователь;
		
		ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Исполнитель.Использование = ложь;
		
		ЭтаФорма.Отбор.Выполнена.ВидСравнения    = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Выполнена.Использование   = Истина;
		ЭтаФорма.Отбор.Выполнена.Значение        = Истина;
	Иначе
		ЭтаФорма.Отбор.Выполнена.ВидСравнения    = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Выполнена.Использование   = Истина;
		ЭтаФорма.Отбор.Выполнена.Значение        = Ложь;
		
		ЭтаФорма.Отбор.Инициатор.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Инициатор.Использование = ложь;

		ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
		ЭтаФорма.Отбор.Исполнитель.Значение      = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли;

	//+++( 05.10.2018 ------------------------------------------------ 
	начДата = ДобавитьМесяц( НачалоДня(ТекущаяДата()), -1);
	ЭтаФорма.Отбор.СрокОповещения.ВидСравнения  = ВидСравнения.БольшеИлиРавно;
	ЭтаФорма.Отбор.СрокОповещения.Значение = начДата;
	ЭтаФорма.Отбор.СрокОповещения.Использование = Истина;
	//+++)
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
//28.12.2015 - если больше нет задач - Закрываем окно списка задач!	
Флажок11  = Флажок1;
Если Флажок1 тогда   
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ первые 1
|	ЗадачиПользователя.Ссылка
|ИЗ
|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
|ГДЕ
|	ЗадачиПользователя.Выполнена
|	И ЗадачиПользователя.Инициатор = &Инициатор
|	И ЗадачиПользователя.Исполнитель <> &Инициатор
|	И НЕ ЗадачиПользователя.ПометкаУдаления
|	И ЗадачиПользователя.Оповещение";

Запрос.УстановитьПараметр("Инициатор", ПараметрыСеанса.ТекущийПользователь);
Результат = Запрос.Выполнить();

Иначе // только свои задачи - не закрываются....
	
	Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
               |	ЗадачиПользователя.Ссылка
               |ИЗ
               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
               |ГДЕ
               |	НЕ ЗадачиПользователя.Выполнена
               |	И ЗадачиПользователя.Исполнитель = &Инициатор
               |	И НЕ ЗадачиПользователя.ПометкаУдаления
               |	И ЗадачиПользователя.Оповещение
               |    и  ЗадачиПользователя.СрокОповещения < &ТекДата
               |УПОРЯДОЧИТЬ ПО
               |	ЗадачиПользователя.Дата
               |АВТОУПОРЯДОЧИВАНИЕ";

Запрос.УстановитьПараметр("Инициатор", ПараметрыСеанса.ТекущийПользователь);
Запрос.УстановитьПараметр("ТекДата", ТекущаяДата() );

Результат = Запрос.Выполнить();

	Если Результат.Пустой() тогда  //после утверждения задач - список будет пустым
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецЕсли;	  


КонецПроцедуры




мСписокОтложенногоВремени = ПолучитьСписокИнтерваловНапоминания();  //УправлениеКонтактами.
