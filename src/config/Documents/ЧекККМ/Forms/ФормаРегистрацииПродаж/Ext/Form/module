Перем мЦветКасса1;
Перем мЦветКасса2;
Перем мЦветКасса3;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;

Перем мСтрокаФР Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;

Перем СуммаРучныхСкидок Экспорт;
Перем СуммаАвтоматическихСкидок Экспорт;
Перем ИтогоСуммаСкидок Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;
Перем ПерезаполнятьДисплейПокупателя Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура осуществляет пробитие строки чека на фискальном регистраторе.
//
// Параметры:
//  Отказ    - булево, признак успешного пробития строки чека на фискальном регистраторе;
//
Процедура ПробитьПредыдущуюСтроку(Отказ)
	Перем Ответ;

	Отказ = Ложь;

	мСтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");

	Если мСтрокаФР <> Неопределено Тогда
		Если мАннулировать Тогда
			глТорговоеОборудование.АннулироватьЧек(мСтрокаФР, Ответ);
			мАннулировать = Ложь;

			КоличествоСтрок = Товары.Количество();
			Если КоличествоСтрок > 0 Тогда
				Для каждого СтрокаТовара Из Товары Цикл

					// параметры фискального регистратора
					Параметры = Новый Структура();
					Параметры.Вставить("СтрокаТовара" , СтрокаТовара            );
					Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
					Параметры.Вставить("КассаККМ"     , КассаККМ                             );

					глТорговоеОборудование.ПечататьСтрокуЧека(мСтрокаФР, Параметры, Ответ);

					Если ПустаяСтрока(Ответ) Тогда
						Параметры.Свойство("НомерЧека", НомерЧекаККМ);
						Параметры.Свойство("НомерСмены", НомерСменыККМ);
						Товары[КоличествоСтрок-1].РегистрацияПродажи = Истина;

					Иначе
						Сообщить(Ответ);
						мАннулировать = Истина;
						Отказ = Истина;
						Прервать;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;
		Иначе

			КоличествоСтрок = Товары.Количество();

			Если КоличествоСтрок > 0 Тогда
				Если НЕ Товары[КоличествоСтрок-1].РегистрацияПродажи Тогда

					Если ЗначениеНеЗаполнено(Товары[КоличествоСтрок-1].Номенклатура) Тогда
						Товары.Удалить(Товары[КоличествоСтрок-1]);
						Возврат;
					КонецЕсли;
					// параметры фискального регистратора
					Параметры = Новый Структура();
					Параметры.Вставить("СтрокаТовара" , Товары[КоличествоСтрок-1]            );
					Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
					Параметры.Вставить("КассаККМ"     , КассаККМ                             );

					глТорговоеОборудование.ПечататьСтрокуЧека(мСтрокаФР, Параметры, Ответ);

					Если ПустаяСтрока(Ответ) Тогда
						Параметры.Свойство("НомерЧека", НомерЧекаККМ);
						Параметры.Свойство("НомерСмены", НомерСменыККМ);
						Товары[КоличествоСтрок-1].РегистрацияПродажи = Истина;

					Иначе

						Сообщить(Ответ);
						мАннулировать = Истина;
						Отказ = Истина;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ПробитьПредыдущуюСтроку()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ИзТерминала;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);
	ЗначениеВыбора.Свойство("ИзТерминала",         ИзТерминала);

	Если ИзТерминала <> Неопределено
	   И ИзТерминала Тогда
		Цена = ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика,
			                            ТипЦен, Дата, ЕдиницаИзмерения,
			                            мВалютаРегламентированногоУчета, 1, 1, ,
			                            Неопределено);
		ВалютаЦены = мВалютаРегламентированногоУчета;
	КонецЕсли;

	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;

	СуммаСтроки = 0;
	ПоследняяСтрока = Товары.Количество()-1;
	Если Товары.Количество() > 0
	   И НЕ Товары[ПоследняяСтрока].РегистрацияПродажи
	   И Товары[ПоследняяСтрока].Номенклатура = Номенклатура
	   И Товары[ПоследняяСтрока].ЕдиницаИзмерения = ЕдиницаИзмерения
	   И Товары[ПоследняяСтрока].ХарактеристикаНоменклатуры = Характеристика
	   И Товары[ПоследняяСтрока].СерияНоменклатуры = Серия
	   Тогда
		СтрокаТабличнойЧасти = Товары[ПоследняяСтрока];
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);

			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

			СуммаРучныхСкидок = 0;
			СуммаАвтоматическихСкидок = 0;
			Для каждого СтрокаТовара ИЗ Товары Цикл

				СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
				СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

				Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

				Если Разница <> 0 Тогда
					Если СуммаРучныхСкидокСтроки <> 0 Тогда
						СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
					Иначе
						СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
					КонецЕсли;
				КонецЕсли;

				СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
				СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

			КонецЦикла;
			ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

		Иначе // Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	Иначе

		// Не нашли или нашли в уже пробитой строке - добавляем новую строку.

		Отказ = Ложь;
		ПробитьПредыдущуюСтроку(Отказ);
		Если НЕ Отказ Тогда

			Если Номенклатура = Неопределено Тогда
				Возврат;
			КонецЕсли;

			Если Цена = 0 Тогда
				Сообщить("На товар: " + Номенклатура + " не назначена цена!", СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли;

			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
			СтрокаТабличнойЧасти.Цена                       = Цена;
			СтрокаТабличнойЧасти.Количество                 = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			ШтрихКод = "";
			Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				СтрокаШтрихкода = ПолучитьШтрихКод(СтрокаТабличнойЧасти.Номенклатура,
				                                                 СтрокаТабличнойЧасти.ЕдиницаИзмерения,
				                                                 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
				                                                 СтрокаТабличнойЧасти.СерияНоменклатуры,
				                                                 Справочники.Качество.Новый);

				Если СтрокаШтрихкода <> Неопределено Тогда
					ШтрихКод = СтрокаШтрихкода.Штрихкод;
				КонецЕсли;
			КонецЕсли;

			СтрокаТабличнойЧасти.ШтрихКод = ШтрихКод;

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
				СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

				СуммаРучныхСкидок = 0;
				СуммаАвтоматическихСкидок = 0;
				Для каждого СтрокаТовара ИЗ Товары Цикл

					СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
					СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

					Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

					Если Разница <> 0 Тогда
						Если СуммаРучныхСкидокСтроки <> 0 Тогда
							СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
						Иначе
							СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
						КонецЕсли;
					КонецЕсли;

					СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
					СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

				КонецЦикла;
				ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена номенклатура;
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура <> Неопределено
	   И Не мМожноМенятьЦенуВДокументе Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

	// Установим способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	//Если Константы.РаботаСООО.Получить() Тогда 
	//	УстановитьСкладИзНастроекПользователя(СтрокаТабличнойЧасти);
	//КонецЕсли;
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена характеристика номенклатуры;
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура = Неопределено Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Выводит информацию о чеке на дисплей покупателя
//
// Параметры:
//  Режим        - режим, в который должен перейти дисплей покупателя
//
Процедура ВывестиИнформациюНаДисплейПокупателя(Режим, СуммаСдача = 0) Экспорт

	Если глТорговоеОборудование <> Неопределено Тогда

		ИскомаяСтрока = глТорговоеОборудование.млДП.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда

			Если Режим = "ВключитьРежимВыводаСтрок" Тогда

				Ответ = глТорговоеОборудование.ВключитьРежимВыводаСтрок(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима вывода строк", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьСтроки" Тогда
				Если Не ПерезаполнятьДисплейПокупателя Тогда
					Возврат;
				КонецЕсли;

				Если ЭлементыФормы.Товары.ТекущаяСтрока <> Неопределено Тогда

					Строка1 = ЭлементыФормы.Товары.ТекущаяСтрока.Номенклатура.Наименование;
					СуммаВсего = Формат(ЭлементыФормы.СуммаДокумента.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0");
					Строка2 = "Итого:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаВсего, " ", 14);

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				ИначеЕсли НЕ ЗначениеНеЗаполнено(ИскомаяСтрока.БегущаяСтрока) Тогда

					Ответ = глТорговоеОборудование.ВключитьРежимВыводаБегущейСтроки(ИскомаяСтрока);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима бегущих строк", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				Иначе

					Строка1 = "";
					Строка2 = "";

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				КонецЕсли;
			ИначеЕсли Режим = "ОтобразитьИтог" Тогда

				Если Товары.Итог("Сумма") > 0 Тогда

					СуммаВсего = Формат(ЭлементыФормы.СуммаДокумента.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
					СуммаСдача = Формат(СуммаСдача                           , "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
					Строка1 = "Итого:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаВсего, " ", 14);
					Строка2 = "Сдача:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаСдача, " ", 14);;

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				ИначеЕсли НЕ ЗначениеНеЗаполнено(ИскомаяСтрока.БегущаяСтрока) Тогда

					Ответ = глТорговоеОборудование.ВключитьРежимВыводаБегущейСтроки(ИскомаяСтрока);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима бегущих строк", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				Иначе

					Строка1 = "Итого:";
					Строка2 = "Сдача:";

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьПустыеСтроки" Тогда

				Ответ = глТорговоеОборудование.ОчиститьДисплейПокупателя(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при очистке дисплея", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет права пользователя на работу с интерфейсом кассира
//
// Параметры:
//  глТекущийПользователь - Пользователь, для которого проверяются права.
//
Процедура ПроверитьДоступностьСервисныхФункций(глТекущийПользователь)
    
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.МенюZотчет.Кнопки.ZОтчет.Доступность = РазрешитьЗакрытиеСмены(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.МенюZотчет.Кнопки.ZОтчет2.Доступность = РазрешитьЗакрытиеСмены(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.АннулированиеЧека.Доступность = РазрешитьАннулированиеЧека(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ЧекВозврата.Доступность = РазрешитьЧекВозврата(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ОтчетОСменеБезГашения.Доступность = РазрешитьОтчетОСменеБезГашения(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность = РазрешитьНазначениеРучныхСкидок(глТекущийПользователь);
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ТолькоПросмотр = Не ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность;

КонецПРоцедуры

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или (ЧекККМ <> Неопределено
	    И ЧекККМ <> Документы.ЧекККМ.ПустаяСсылка())
	 ИЛИ КассаККМ.НеИспользоватьАвтоматическиеСкидкиВЧекеККМ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

//Производит закрытие чека на фискальном регистраторе и печать товарного чека.
//
// Параметры:
//  Печать - булево, признак необходимости печати товарного чека.
//
Процедура ЗакрытьЧек(Печать = Ложь)

	Если ТолькоПросмотр Тогда
		Закрыть();
	Иначе
		
		Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
			И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
			
			Предупреждение("Дисконтная карта, указанная в документе, не является активной!");
			Возврат;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Если НЕ ЧекПробитНаККМ И Товары.Итог("Сумма") > 0 Тогда
				ФормаОплат = ПолучитьФорму("ФормаОплатЧека", ЭтаФорма);
				Результат  = ФормаОплат.ОткрытьМодально();
			КонецЕсли;
		Иначе
			Результат = "Закрыть чек";
		КонецЕсли;

		Если Результат <> "Закрыть чек" Тогда

			Возврат;

		Иначе

			СоздатьНовыйЧек = Истина;
			
			// если чек проводится текущим днем и время ноль, то установить текущее время
			врТекущаяДата = ТекущаяДата();
			Если НачалоДня(Дата) = НачалоДня(врТекущаяДата)
				И Минута(Дата) = 0
				И Час(Дата) = 0
				И Секунда(Дата) = 0 Тогда
			
				Дата = врТекущаяДата;
			
			КонецЕсли; 
			
			ЕстьРеализованныеОстатки = Ложь;
			Если ((НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка")) и (Константы.КонтрольОстатковВЧеке.Получить()) и (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа)) Тогда 
			// Контроль Остатков
				Для Каждого СтрокаТабличнойЧасти из Товары Цикл
					Остатки = ПолучитьОстаткиТоваров(СтрокаТабличнойЧасти.Номенклатура,ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад"));
					Если Остатки.Количество() > 0 Тогда
						Если СтрокаТабличнойЧасти.Количество > Остатки[0].КоличествоСвободныйОстаток Тогда
							Предупреждение("Остаток товара " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Наименование) + " на складе " + Строка(Остатки[0].КоличествоСвободныйОстаток) + "
							|Значение количества будет изменено на реальное!", 3);
							СтрокаТабличнойЧасти.Количество = Остатки[0].КоличествоСвободныйОстаток;
							ЕстьРеализованныеОстатки = Истина;
						КонецЕсли;
					Иначе 
							Предупреждение("Остаток товара " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Наименование) + " на складе = 0" + "
							|Значение количества будет изменено на реальное!", 3);
							Товары.Удалить(СтрокаТабличнойЧасти);
							ЕстьРеализованныеОстатки = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
						
			Если (ЕстьРеализованныеОстатки) Тогда 
				Возврат;
			КонецЕсли;
			
			//Если (Константы.РаботаСООО.Получить()) Тогда 
			//	ВставитьСкладыИП(Товары);
			//КонецЕсли;
			
			Попытка
				Если (Константы.ПроводитьЧекОперативно.Получить()<>Ложь) Тогда
					Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);
				Иначе
					Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Исключение // Информация об ошибке должна была показаться раньше.
				СоздатьНовыйЧек = Ложь;
			КонецПопытки;

			Если ЧекПробитНаККМ Тогда
				Если Печать Тогда
					НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, "Товарный чек");
				КонецЕсли;
				
				// проверим, не нужно ли выдать VIP-карту
				врПорогВыдачиVIPКарты = Константы.ПорогВыдачиVIPКарты.Получить();
				Если врПорогВыдачиVIPКарты <> 0 
					И ДисконтнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная
					И ДисконтнаяКарта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная
					И ДисконтнаяКарта.СтатусДисконтнойКарты = Перечисления.СтатусыДисконтнойКарты.Активна Тогда
				
				    Запрос = Новый Запрос;
					Запрос.Текст = "
					|ВЫБРАТЬ СтоимостьОборот КАК ВыбраннаяСумма
					|ИЗ РегистрНакопления.Продажи.Обороты(,,, ДисконтнаяКарта = &парамДисконтнаяКарта)
					|ГДЕ СтоимостьОборот >= &парамСтоимостьОборот
					|";
					
					Запрос.УстановитьПараметр("парамДисконтнаяКарта", ДисконтнаяКарта);
					Запрос.УстановитьПараметр("парамСтоимостьОборот", врПорогВыдачиVIPКарты);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						врФорма = ПолучитьФорму("ФормаВыдачиVIPКарты");
						врФорма.ИнформационнаяНадпись = "Накопленная сумма " + Выборка.ВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить() + " по накопительной дисконтной карте """ + ДисконтнаяКарта + """ (" + ДисконтнаяКарта.Код + ") равна или превысила порог выдачи дисконтной карты VIP. Нужно выдать VIP-карту.";
						врФорма.ДисконтнаяКартаОснование = ДисконтнаяКарта;
						врФорма.ОткрытьМодально();
						//Предупреждение("Сумма " + Выборка.ВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить() + " по накопительной дисконтной карте " + ДисконтнаяКарта + " (" + ДисконтнаяКарта.Код + ") равна или превысила порог выдачи дисконтной карты VIP. Нужно выдать VIP-карту.");
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
				//ДокументОбъект.Дата = РабочаяДата;
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить() <> Ложь) Тогда
					ДокументОбъект.КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ);
				КонецЕсли;
				ДокументОбъект.Дата = ТекущаяДата();
				ПриОткрытии();
				Обновить();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура выбора чека ККМ для возврата.
//
Процедура ЧекККМНачалоВыбора()

	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Значение = КассаККМ;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.КассаККМ.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.Проведен.Значение = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Проведен.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

	ЧекККМ = ФормаВыбора.ОткрытьМодально();
	Если НЕ ЗначениеНеЗаполнено(ЧекККМ) Тогда
		Товары.Загрузить(ЧекККМ.Товары.Выгрузить());
		Для каждого СтрокаТовара Из Товары Цикл
			СтрокаТовара.РегистрацияПродажи = Ложь;
		КонецЦикла;
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
		ДисконтнаяКарта = ЧекККМ.ДисконтнаяКарта;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//Если Не МодальныйРежим Тогда
	//	Отказ = Истина;
	//	ОткрытьМодально();
	//КонецЕсли;

	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Администратор: " + глТекущийПользователь;
	ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Кассир: " + глТекущийПользователь;
	КонецЕсли;

	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		Если (Константы.КассаККМИзСправочникаСопоставлений.Получить() <> Ложь) Тогда
			ДокументОбъект.КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ);
		КонецЕсли;
		
		УстановитьНомерДокумента(ЭтотОбъект);

		// Тип цен по умолчанию - из типа цен розничной торговли на данном складе
		РозничныйТипЦен = Склад.ТипЦенРозничнойТорговли;
		Если Не ЗначениеНеЗаполнено(РозничныйТипЦен) Тогда
			ТипЦен = РозничныйТипЦен;
		КонецЕсли;

		ЧекПробитНаККМ = Ложь;
		Параметры = Новый Структура;
		Ответ = "";

		мСтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");

		глТорговоеОборудование.ПолучитьНомерЧекаСмены(мСтрокаФР, Параметры, Ответ);
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// включим режим вывода строк
	ВывестиИнформациюНаДисплейПокупателя("ВключитьРежимВыводаСтрок");

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах()
		ИЛИ КассаККМ.РазрешитьМенятьЦеныВЧекеККМВЛюбомСлучае;

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	//ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;
	Для каждого СтрокаТовара ИЗ Товары Цикл

		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	ПроверитьДоступностьСервисныхФункций(глТекущийПользователь);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Не яштАдминистративныеФункцииДоступны();
	
	//
	ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.ДокументОбъект = ЭтотОбъект;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();

	Если ВидПользователя <> Неопределено Тогда

		Ответственный = глТекущийПользователь;
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
		ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда

		СтруктураПараметров = Новый Структура();

		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьТовары";
			Валюта          = мВалютаРегламентированногоУчета;
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);
			СтруктураПараметров.Вставить("Пользователь"         , Неопределено);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда

			СтруктураПараметров.Вставить("Команда"              , "");
			СтруктураПараметров.Вставить("Пользователь"         , Неопределено);
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;

		Пользователь = Неопределено;
		Команда = "";
		СтруктураПараметров.Свойство("Пользователь", Пользователь);
		СтруктураПараметров.Свойство("Команда", Команда);
		
		Если Пользователь <> Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПустойПароль", "");

			Запрос.Текст ="
			|ВЫБРАТЬ
			|	НастройкиПользователей.Пользователь,
			|	НастройкиПользователей.Настройка,
			|	НастройкиПользователей.Значение
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
			|
			|ГДЕ
			|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
			|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Пользователь
			|АВТОУПОРЯДОЧИВАНИЕ
			|";

			ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

			ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
			ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
			ФормаАвторизации.Пользователь = Пользователь;
			ВидПользователя = ФормаАвторизации.ВыполнитьАвторизацию( Истина);

			Если ВидПользователя <> Неопределено Тогда

				ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
				ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

			КонецЕсли;

		//Расчет скидок
		ИначеЕсли Команда = "РассчитатьДисконтныеСкидки" Тогда
			
			ПриИзмененииДисконтнойКарты();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.СуммаДокумента.Заголовок = "" +ФорматСумм(Товары.Итог("Сумма"), ,"0,00");
	СуммаОплачено = СуммаБезналичнойОплаты + СуммаНаличнойОплаты;

	Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда
	   
		Если ДисконтнаяКарта.СтатусДисконтнойКарты = Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		   Если ДисконтнаяКарта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная Тогда
			
			    Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ СтоимостьОборот КАК ВыбраннаяСумма
				|ИЗ РегистрНакопления.Продажи.Обороты(,,, ДисконтнаяКарта = &парамДисконтнаяКарта)
				|";
				
				Запрос.УстановитьПараметр("парамДисконтнаяКарта", ДисконтнаяКарта);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий()
					И Выборка.ВыбраннаяСумма <> NULL Тогда
					врВыбраннаяСумма = Выборка.ВыбраннаяСумма;
				Иначе
					врВыбраннаяСумма = 0;
				КонецЕсли; 
				
				врСтрВыбраннаяСумма = ". Накоп. сумма: " + врВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить();
			
			Иначе
				
				врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.ПроцентСкидки + "%";
				
			КонецЕсли; 
			
		Иначе
			
			врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.СтатусДисконтнойКарты;
			
		КонецЕсли; 
	   
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Дисконтная карта: " + ДисконтнаяКарта + врСтрВыбраннаяСумма;
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Черный;
		
		ЭлементыФормы.КнопкаУбратьДисконтнуюКарту.Видимость = Истина;
		ЭлементыФормы.КнопкаПросмотрДисконтнойКарты.Видимость = Истина;
		
	Иначе
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Спросить дисконтную карту!";
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Красный;
		
		ЭлементыФормы.КнопкаУбратьДисконтнуюКарту.Видимость = Ложь;
		ЭлементыФормы.КнопкаПросмотрДисконтнойКарты.Видимость = Ложь;
		
	КонецЕсли;

	ЭлементыФормы.СкидкиИтогоСумма.Заголовок = "" + ФорматСумм(ИтогоСуммаСкидок, ,"0,00");
	ЭлементыФормы.НадписьСменаЧекККМ.Заголовок = "Смена №: " + НомерСменыККМ + "; Чек ККМ №: " + НомерЧекаККМ;

	ЭлементыФормы.НадписьКассаККМ.Заголовок = "Касса: " + КассаККМ;
	
	СтрокаТовара = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТовара <> Неопределено Тогда
		СуммаТовара = СтрокаТовара.Цена * СтрокаТовара.Количество;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = "" + СтрокаТовара.Номенклатура;
	Иначе
		СуммаТовара = 0;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = "";
	КонецЕсли;
	
	
	Если СуммаТовара <> 0 Тогда
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = "" + СтрокаТовара.Цена + "руб. Х " + СтрокаТовара.Количество
		                                               + " " + СтрокаТовара.ЕдиницаИзмерения
		                                               + " = " + СтрокаТовара.Цена * СтрокаТовара.Количество + "руб.";
	Иначе
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = "";
	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя("ОтобразитьСтроки");

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	//Отказ = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	//ВывестиИнформациюНаДисплейПокупателя("ОтобразитьПустыеСтроки");
	//Если ЭлементыФормы.ТекущиеВесы.Значение <> Неопределено Тогда
	//	СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);
	//КонецЕсли;

	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ВыходИзПрограммы" командной панели
// формы.
//
Процедура ДействияФормыВыходИзПрограммы(Кнопка)

	КоличествоСтрок = Товары.Количество();
	Если (КоличествоСтрок > 1 И Товары[0].РегистрацияПродажи) Тогда
		Предупреждение("Необходимо закрыть или аннулировать чек!");
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,
	                                                          "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		//ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "НазначитьСкидку" командной панели
// формы. Процедура назначает ручную скидку на позиции товара.
//
Процедура ДействияФормыНазначитьСкидку(Кнопка)

	ПроцентСкидки = 0;
	ВвестиЧисло(ПроцентСкидки, "Введите процент скидки.", 5, 2);

	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;

	Для Каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.ПроцентСкидкиНаценки = ПроцентСкидки;
		РассчитатьСуммуТабЧасти(СтрокаТовара, ЭтотОбъект);
		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Аннулирование чека" командной панели
// формы.
//
Процедура ДействияФормыАннулированиеЧека(Кнопка)

	Если НЕ Проведен Тогда
		ИскомаяСтрока = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда
			Ответ = "";
			глТорговоеОборудование.АннулироватьЧек(ИскомаяСтрока, Ответ);
			Если ПустаяСтрока(Ответ)
			   И Товары.Количество() > 0
			   И Товары[0].РегистрацияПродажи Тогда
				Ответ = Вопрос("Вывести позиции чека на ФР? Иначе строки чека удалятся", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					Для Каждого СтрокаТовара Из Товары Цикл
						СтрокаТовара.РегистрацияПродажи = Ложь;
					КонецЦикла;

					Для каждого СтрокаТовара Из Товары Цикл

						// параметры фискального регистратора
						Параметры = Новый Структура();
						Параметры.Вставить("СтрокаТовара" , СтрокаТовара            );
						Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
						Параметры.Вставить("КассаККМ"     , КассаККМ                             );

						глТорговоеОборудование.ПечататьСтрокуЧека(мСтрокаФР, Параметры, Ответ);

						Если ПустаяСтрока(Ответ) Тогда
							Параметры.Свойство("НомерЧека", НомерЧекаККМ);
							Параметры.Свойство("НомерСмены", НомерСменыККМ);
							СтрокаТовара.РегистрацияПродажи = Истина;
							Записать();

						Иначе
							Сообщить(Ответ);

							мАннулировать = Истина;
							Отказ = Истина;

						КонецЕсли;

					КонецЦикла;
				Иначе
					Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Внесение в денежный ящик" командной панели
// формы. 
//
Процедура ДействияФормыВнесениеВДенежныйЯщик(Кнопка)
//Временно не используется
	ИскомаяСтрока = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
	Ответ = "";
	Параметры = Новый Структура;
	Если ИскомаяСтрока <> Неопределено Тогда
		
		глТорговоеОборудование.ОткрытьЯщик(ИскомаяСтрока, Параметры, Ответ);
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		Сумма = 0;
		ВвестиЧисло(Сумма, "Сумма внесения", 15, 2);
		Если Сумма > 0 Тогда
			Параметры.Вставить("Сумма", Сумма);
			глТорговоеОборудование.ВнестиСумму(ИскомаяСтрока, Параметры, Ответ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Изъятие денег" командной панели
// формы.
//
Процедура ДействияФормыИзъятиеДенег(Кнопка)
//Временно не используется
	ИскомаяСтрока = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
	Ответ = "";
	Параметры = Новый Структура;
	Если ИскомаяСтрока <> Неопределено Тогда
		
		глТорговоеОборудование.ОткрытьЯщик(ИскомаяСтрока, Параметры, Ответ);
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		Сумма = 0;
		ВвестиЧисло(Сумма, "Сумма изъятия", 15, 2);
		Если Сумма > 0 Тогда
			Параметры.Вставить("Сумма", Сумма);
			глТорговоеОборудование.ИзъятьСумму(ИскомаяСтрока, Параметры, Ответ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Отчет о смене без гашения" командной панели
// формы.
//
Процедура ДействияФормыОтчетОСменеБезГашения(Кнопка)
	ИскомаяСтрока = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
	Ответ = "";

	глТорговоеОборудование.ХОтчет(ИскомаяСтрока, Ответ);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Z-отчет" командной панели
// формы.
//
Процедура ДействияФормыZОтчет(Кнопка)

	Если ЗначениеНеЗаполнено(КассаККМ) Тогда
		Предупреждение("Не выбрана касса ККМ!");
	Иначе
		
		Если Кнопка.Имя <> "ZОтчет1" Тогда
			СтараяКасса = КассаККМ;
			
			Если Кнопка.Имя = "ZОтчет2" Тогда  	
				
				Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
				Иначе 
					КассаККМ = Константы.КассаККМДляНаличныхРасчетов.Получить();
				КонецЕсли;	
				
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала);
				КонецЕсли;
			
			ИначеЕсли Кнопка.Имя = "ZОтчет3" Тогда 
				
				Если Константы.КассаККМДляКредитныхОпераций.Получить() <> Справочники.КассыККМ.ПустаяСсылка() Тогда 
				    КассаККМ = Константы.КассаККМДляКредитныхОпераций.Получить();
				ИначеЕсли Справочники.КассыККМ.НайтиПоНаименованию("3") <> Справочники.КассыККМ.ПустаяСсылка() Тогда 
					КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("3");
				Иначе 
					Предупреждение("Данной кассы ККМ не существует!");
				КонецЕсли;
					
				Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
				КонецЕсли;
				
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли; 
		
		ФормаЗакрытияСмены = Обработки.ЗакрытиеКассовойСмены.ПолучитьФорму();
		ФормаЗакрытияСмены.мПоказыватьФорму = Ложь;
		ФормаЗакрытияСмены.мКассаККМ = КассаККМ;
		ФормаЗакрытияСмены.ОткрытьМодально();
		Ответ = "";

		мСтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");

		Параметры = Новый Структура;
		глТорговоеОборудование.ПолучитьНомерЧекаСмены(мСтрокаФР, Параметры, Ответ);
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		
		
		Если Кнопка.Имя <> "ZОтчет1" Тогда
			
				КассаККМ = СтараяКасса;
			
		КонецЕсли; 

		
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Авторизация" командной панели
// формы.
//
Процедура ДействияФормыАвторизация(Кнопка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПустойПароль", 0);

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь,
	|	НастройкиПользователей.Настройка,
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
	|
	|ГДЕ
	|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
	|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

	ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
	ФормаАвторизации.ДокументОбъект = ЭтотОбъект;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();

	Если ВидПользователя <> Неопределено Тогда

		Ответственный = глТекущийПользователь;
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
		ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Из терминала сбора данных" командной панели
// формы.
//
Процедура ДействияФормыТоварыИзТерминалаСбораДанных(Кнопка)
	// Временно не используется	
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
		Иначе
			Для Каждого СтрокаДанных Из Данные Цикл
				Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда

					Если ВремТовар = Неопределено
					 Или ВремТовар.Количество() = 0 Тогда
						Продолжить;
					Иначе
						ВремТовар = ВремТовар[0];
					КонецЕсли;
					ЗначениеВыбора= Новый Структура();
					ЗначениеВыбора.Вставить("Номенклатура",        ВремТовар.Номенклатура);
					ЗначениеВыбора.Вставить("ЕдиницаИзмерения",    ВремТовар.ЕдиницаИзмерения);
					ЗначениеВыбора.Вставить("Количество",          СтрокаДанных.Количество);
					ЗначениеВыбора.Вставить("Цена",                0);
					ЗначениеВыбора.Вставить("Характеристика",      ВремТовар.ХарактеристикаНоменклатуры);
					ЗначениеВыбора.Вставить("Серия",               ВремТовар.СерияНоменклатуры);
					ЗначениеВыбора.Вставить("ИзТерминала",         Истина);
					ОбработкаПодбора(Товары, ЗначениеВыбора);

				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДействияФормыТоварыИзТерминалаСбораДанных()

// Процедура вызывается при нажатии кнопки "Товарный чек" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если Товары.Итог("Сумма") = 0 тогда
		Предупреждение("Чек не заполнен.");
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Печать товарного чека возможна только после закрытия чека. Закрыть чек?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьЧек(Истина);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Закрытие чека" командной панели
// формы.
//
Процедура ДействияФормыДействиеЗакрытиеЧека(Кнопка)

	ЗакрытьЧек();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Чек возврата" командной панели
// формы.
//
Процедура ДействияФормыЧекВозврата(Кнопка)

	Если Товары.Количество()>0
	   И Товары[0].РегистрацияПродажи Тогда
		Предупреждение("Необходимо закончить работу с текущим чеком (аннулировать или закрыть чек).");
		Возврат;
	Иначе
		Товары.Очистить();
		ЧекККМНачалоВыбора();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.РегистрацияПродажи = Ложь;
	КонецЕсли;

	Если НоваяСтрока И СуммаСтроки > 0 Тогда
		Если РассчитыватьАвтоматическиеСкидки() Тогда

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

			СуммаРучныхСкидок = 0;
			СуммаАвтоматическихСкидок = 0;
			Для каждого СтрокаТовара ИЗ Товары Цикл

				СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
				СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

				Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

				Если Разница <> 0 Тогда
					Если СуммаРучныхСкидокСтроки <> 0 Тогда
						СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
					Иначе
						СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
					КонецЕсли;
				КонецЕсли;

				СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
				СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

			КонецЦикла;
			ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

		КонецЕсли;
	КонецЕсли;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	ШтрихКод = "";
	Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаШтрихкода = ПолучитьШтрихКод(СтрокаТабличнойЧасти.Номенклатура,
		                                                 СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                                 СтрокаТабличнойЧасти.СерияНоменклатуры,
		                                                 Справочники.Качество.Новый);

		Если СтрокаШтрихкода <> Неопределено Тогда
			ШтрихКод = СтрокаШтрихкода.Штрихкод;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.ШтрихКод = ШтрихКод;
	СтрокаТабличнойЧасти.Количество = Макс(1, СтрокаТабличнойЧасти.Количество);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка") Тогда 
		
		Остатки = ПолучитьОстаткиТоваров(СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Склад);
		Если Остатки.Количество() > 0 Тогда
			Если СтрокаТабличнойЧасти.Количество > Остатки[0].КоличествоСвободныйОстаток Тогда
				Предупреждение("Остаток товара на складе " + Строка(Остатки[0].КоличествоСвободныйОстаток) + "
				|Значение количества будет изменено на реальное!", 3);
				СтрокаТабличнойЧасти.Количество = Остатки[0].КоличествоСвободныйОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;
	Для каждого СтрокаТовара ИЗ Товары Цикл

		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

КонецПроцедуры // ТоварыПроцентРучнойСкидкиПриИзменении()

// Процедура - обработчик события "ПередУдалением" табличной части
// "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные.РегистрацияПродажи = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти     = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки              = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	КонецЕсли;

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Артикул" табличной части
// "Товары".
//
Процедура ТоварыАртикулОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "
	|ВЫБРАТЬ
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Артикул");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаАртикулов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаАртикул = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаАртикулов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаАртикула = ТаблицаАртикулов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаАртикула.Артикул, СтрДлинаАртикул)) <> Текст Тогда
				ТаблицаАртикулов.Удалить(СтрокаАртикула);
			КонецЕсли;
		КонецЦикла;

		ТаблицаАртикулов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаАртикулов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыАртикулОкончаниеВводаТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Штрихкод" табличной части
// "Товары".
//
Процедура ТоварыШтрихКодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "ВЫБРАТЬ
	                           |	Штрихкоды.Владелец КАК Номенклатура,
	                           |	ВЫБОР КОГДА ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ТОГДА
	                           |	NULL ИНАЧЕ
	                           |	Штрихкоды.Владелец.Артикул КОНЕЦ КАК Артикул,
	                           |	Штрихкоды.Штрихкод,
	                           |	Штрихкоды.ЕдиницаИзмерения,
	                           |	Штрихкоды.ХарактеристикаНоменклатуры,
	                           |	Штрихкоды.СерияНоменклатуры,
	                           |	Штрихкоды.Качество
	                           |ИЗ
	                           |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                           |
	                           |ГДЕ
	                           |	(НЕ(ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ))";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Штрихкод");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаШтрихкодов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаШтрихкод = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаШтрихкодов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаШтрихкода = ТаблицаШтрихкодов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаШтрихкода.Штрихкод, СтрДлинаШтрихкод)) <> Текст Тогда
				ТаблицаШтрихкодов.Удалить(СтрокаШтрихкода);
			КонецЕсли;
		КонецЦикла;

		ТаблицаШтрихкодов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаШтрихкодов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда

			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ЭлементыФормы.Товары.ТекущиеДанные.Количество = 1;
			ЭлементыФормы.Товары.ТекущиеДанные.ХарактеристикаНоменклатуры = СтрокаВыбора.ХарактеристикаНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = СтрокаВыбора.СерияНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.Артикул = СтрокаВыбора.Артикул;
			ЭлементыФормы.Товары.ТекущиеДанные.ШтрихКод = СтрокаВыбора.Штрихкод;

			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);

		КонецЕсли;
	Иначе
		Предупреждение("Не найдено товаров указанным началом штрихкода.");
		Элемент.Значение = "";
	КонецЕсли;

КонецПроцедуры // ТоварыШтрихКодОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;;

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПередНачаломДобавления" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	//ПробитьПредыдущуюСтроку( Отказ);

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПередНачаломИзменения" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Отказ = Элемент.ТекущиеДанные.РегистрацияПродажи;
	КонецЕсли;

КонецПроцедуры // ТоварыПередНачаломИзменения()

Процедура ДействияФормыВыдачаНакопительнойКарты(Кнопка)
	
	врФорма = ПолучитьФорму("ФормаВыдачиНакопительнойКарты");
	врРезультат = врФорма.ОткрытьМодально();
	
	Если врРезультат <> Неопределено Тогда
		ДисконтнаяКарта = врРезультат;
		ПриИзмененииДисконтнойКарты();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыСчетНаОплату(Кнопка)
	// Вставить содержимое обработчика.
	
	ФормаСчета = Документы.СчетНаОплатуПокупателю.ПолучитьФормуНовогоДокумента(, ЭтотОбъект);
	
	ФормаСчета.Организация = Константы.ОрганизацияДляСчетов.Получить();
	
	//Орг = ФормаСчета.Организация;
	
	//СпрДоговоров = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Основной договор продажи",,,Орг.Ссылка);
	//
	//ФормаСчета.ДоговорКонтрагент = СпрДоговоров.Ссылка;
	
	СпрКассы = Константы.КассаДляБезналичныхСредств.Получить();
	
	ФормаСчета.СтруктурнаяЕдиница = СпрКассы.Ссылка;
	
	ФормаСчета.ОткрытьМодально();
	
КонецПроцедуры

Процедура ДействияФормыВозвратОтПокупателя(Кнопка)
	// Вставить содержимое обработчика.
	ФормаВозврата = Документы.ВозвратТоваровОтПокупателя.ПолучитьФормуНовогоДокумента(, ЭтотОбъект);
	//ДоговорКТ = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Основной",,,Справочники.Контрагенты.НайтиПоНаименованию("Покупатель"));
	//ФормаВозврата.ДоговорКонтрагента = ДоговорКТ.Ссылка;
	ФормаВозврата.ОткрытьМодально();
КонецПроцедуры

Процедура ДействияФормыПередачаДенежныхСредствВКассу(Кнопка)
//Временно не используется
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДействияФормыУстановитьКассу2(Кнопка)
	// Вставить содержимое обработчика.

	Если Константы.КассаККМДляБезналичногоРасчета.Получить() <> Справочники.Кассы.ПустаяСсылка() Тогда
		
		КассаККМ = Константы.КассаККМДляБезналичногоРасчета.Получить();
		ЭлементыФормы.НадписьКассаККМ.ЦветТекста = мЦветКасса2;

		
	ИначеЕсли Справочники.КассыККМ.НайтиПоНаименованию("2") <> Справочники.КассыККМ.ПустаяСсылка() Тогда
		
		КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("2");
		ЭлементыФормы.НадписьКассаККМ.ЦветТекста = мЦветКасса2;
		
	КонецЕсли;
	
	Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
		КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыУстановитьКассуХ(Кнопка)
	// Вставить содержимое обработчика.
	
	Если Кнопка.Имя = "УстановитьККМ1" Тогда
		Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
			КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
		Иначе 
			КассаККМ = Константы.КассаККМДляНаличныхРасчетов.Получить();
		КонецЕсли;	
		
		Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
			КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ);
		КонецЕсли;
		
		ЭлементыФормы.НадписьКассаККМ.ЦветТекста = мЦветКасса1;
	КонецЕсли;
	
	Если Кнопка.Имя = "ДействияФормыУстановитьКассу3" Тогда
		Если Константы.КассаККМДляКредитныхОпераций.Получить() <> Справочники.Кассы.ПустаяСсылка() Тогда
			Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
				КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов");
			Иначе 
				КассаККМ = Константы.КассаККМДляКредитныхОпераций.Получить();
			КонецЕсли;
			
			Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
				КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);
			КонецЕсли;
			
			ЭлементыФормы.НадписьКассаККМ.ЦветТекста = мЦветКасса3;
		ИначеЕсли Справочники.КассыККМ.НайтиПоНаименованию("3") <> Справочники.КассыККМ.ПустаяСсылка() Тогда
			КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("3");
			ЭлементыФормы.НадписьКассаККМ.ЦветТекста = мЦветКасса3;
		КонецЕсли;
		Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
			КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);
		КонецЕсли;		
	КонецЕсли;
	
		
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСумму(КассаВход, Безнал = Ложь, Детально = Ложь)

	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("парамПериодКон", КонецДня(ТекущаяДата()));
	
	Запрос.УстановитьПараметр("КассаККМ", КассаВход);
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РозничнаяВыручка.СуммаОборот, 0) КАК Выручка,
	|	ЕСТЬNULL(РозничнаяВыручка.СуммаБезналОборот, 0) КАК ВыручкаБезнал
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Обороты(&парамПериодНач, &парамПериодКон,, РозничнаяТочка = &КассаККМ) КАК РозничнаяВыручка
	|";
	 
    СуммаВозврат = Запрос.Выполнить().Выбрать();
	СуммаВозврат.Следующий();
	Если НЕ Безнал Тогда
		Возврат СуммаВозврат.Выручка;
	Иначе
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СуммаВозврат.Выручка);
		МассивДанных.Добавить(СуммаВозврат.Выручка - СуммаВозврат.ВыручкаБезнал);
		МассивДанных.Добавить(СуммаВозврат.ВыручкаБезнал);
		Возврат МассивДанных;
	КонецЕсли;
	
КонецФункции // ПолучитьСумму()

Процедура ДействияФормыОприходованиеДСИзККМ1(Кнопка)
	
	// Вставить содержимое обработчика.
	  	
		
		//Если Документы.ОтчетОРозничныхПродажах.НайтиПоРеквизиту("Дата", ТекущаяДата()) <> Документы.ОтчетОРозничныхПродажах.ПустаяСсылка() Тогда
		//
		//	ДокОРПСумма = Документы.ОтчетОРозничныхПродажах.НайтиПоРеквизиту("Дата", ТекущаяДата()).СуммаДокумента;
		//
		//КонецЕсли;
				
		Если Кнопка.Имя = "ОприходованиеДСИзККМ1" Тогда
			
			ДокПКООбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокПКО = ДокПКООбъект.ПолучитьФорму("ФормаДокумента");
			ЗаполнитьШапкуДокумента(ДокПКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
			ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
			ДокПКО.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
			
			Если (Константы.БратьКассуИзНастроекПользователя.Получить() <> Ложь) Тогда
				ДокПКО.Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКасса");	
				ДокПКО.Контрагент = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
				СуммаПКО = ПолучитьСумму(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ"));
			Иначе
				ДокПКО.Касса = Константы.КассаДлаНаличныхСредств.Получить();	
				ДокПКО.Контрагент = Константы.КассаККМДляНаличныхРасчетов.Получить();
				СуммаПКО = ПолучитьСумму(Константы.КассаККМДляНаличныхРасчетов.Получить());
			КонецЕсли;
			
			Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
				
				ДокПКО.Касса = ПолучитьКассуДляДенежныхСредствИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ);	
				ДокПКО.Контрагент = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ);
				СуммаПКО = ПолучитьСумму(ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.ОсновнаяКассаККМ));
				
			КонецЕсли;

			
			ДокПКО.СуммаДокумента = СуммаПКО;
			ДокПКО.Открыть();
			
		ИначеЕсли Кнопка.Имя = "ОприходованиеДСИзККМ2" Тогда 
			
			ДокПКООбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокПКО = ДокПКООбъект.ПолучитьФорму("ФормаДокумента");
			ЗаполнитьШапкуДокумента(ДокПКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
			ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
			ДокПКО.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;

			ДокПКО.Касса = Константы.КассаДляБезналичныхСредств.Получить();	
			ДокПКО.Контрагент = Константы.КассаККМДляБезналичногоРасчета.Получить();			
			СуммаПКО = ПолучитьСумму(Константы.КассаККМДляБезналичногоРасчета.Получить());
			ДокПКО.СуммаДокумента = СуммаПКО;
			ДокПКО.Открыть();
			
			Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
				
				ДокПКО.Касса = ПолучитьКассуДляДенежныхСредствИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала);	
				ДокПКО.Контрагент = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала);
				СуммаПКО = ПолучитьСумму(ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала));
				
			КонецЕсли;

		ИначеЕсли Кнопка.Имя = "ОприходованиеДСИзККМ3" Тогда
			
			Если ?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить()) <> Справочники.КассыККМ.ПустаяСсылка() Тогда 
				
				Выручка = 0;
				Нал = 1;
				Безнал = 2;
				
				Если (Константы.БратьКассуИзНастроекПользователя.Получить() <> Ложь) Тогда
					СуммаПКО = ПолучитьСумму(?(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов") = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов")), ИСТИНА);
				Иначе 
					СуммаПКО = ПолучитьСумму(?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить()), ИСТИНА);
				КонецЕсли;
				
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 				
					СуммаПКО = ПолучитьСумму(?(ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов) = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов)), ИСТИНА);
				КонецЕсли;	
					
				Если СуммаПКО[Нал] > 0 Тогда 
					
					ДокПКООбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
					ДокПКО = ДокПКООбъект.ПолучитьФорму("ФормаДокумента");
					ЗаполнитьШапкуДокумента(ДокПКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
					ДокПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
					ДокПКО.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
					
					Если (Константы.БратьКассуИзНастроекПользователя.Получить() <> Ложь) Тогда
						ДокПКО.Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");	
						ДокПКО.Контрагент = ?(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов") = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов"));
					Иначе 
						ДокПКО.Касса = Константы.КассаДлаНаличныхСредств.Получить();	
						ДокПКО.Контрагент = ?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить());
					КонецЕсли;
									
					Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 				
						ДокПКО.Касса = ПолучитьКассуДляДенежныхСредствИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);	
						ДокПКО.Контрагент = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);				
					КонецЕсли;
					
					ДокПКО.СуммаДокумента = СуммаПКО[Нал];
					ДокПКО.Комментарий = "Получение наличных денег по сделке кредита";
					ДокПКО.ОткрытьМодально();
					
				КонецЕсли;
				
				Если (СуммаПКО[Безнал] > 0) И (СуммаПКО[Выручка] > 0) Тогда
					
					ДокПКООбъектБН = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
					ЗаполнитьШапкуДокумента(ДокПКООбъектБН, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
					ДокПКООбъектБН.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
					ДокПКООбъектБН.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
					
					Если (Константы.БратьКассуИзНастроекПользователя.Получить() <> Ложь) Тогда
						ДокПКООбъектБН.Касса = ?(Константы.КассаТерминала.Получить() = Справочники.Кассы.ПустаяСсылка(), Константы.КассаДлаНаличныхСредств.Получить(), Константы.КассаТерминала.Получить());	
						ДокПКООбъектБН.Контрагент = ?(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов") = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМДляКредитов"));						
					Иначе 
						ДокПКООбъектБН.Касса = ?(Константы.КассаТерминала.Получить() = Справочники.Кассы.ПустаяСсылка(), Константы.КассаДлаНаличныхСредств.Получить(), Константы.КассаТерминала.Получить());	
						ДокПКООбъектБН.Контрагент = ?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить());
					КонецЕсли;
					
					Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
						ДокПКООбъектБН.Касса = ?(Константы.КассаТерминала.Получить() = Справочники.Кассы.ПустаяСсылка(), Константы.КассаДлаНаличныхСредств.Получить(), Константы.КассаТерминала.Получить());	
						ДокПКООбъектБН.Контрагент = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);					
					КонецЕсли;

					ДокПКООбъектБН.СуммаДокумента = СуммаПКО[Безнал];
					ДокПКООбъектБН.Комментарий = "Передача безналичных денежных средств в кассу терминала";
					ДокПКОФ = ДокПКООбъектБН.ПолучитьФорму();
					ДокПКОФ.ОткрытьМодально();
					
					СуммаПКО = ПолучитьСумму(?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить()), ИСТИНА, Истина);
					
					Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
						СуммаПКО = ПолучитьСумму(ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов), ИСТИНА, Истина);					
					КонецЕсли;
					
					ДокРКООбъектБН = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
					ЗаполнитьШапкуДокумента(ДокРКООбъектБН, глТекущийПользователь, мВалютаРегламентированногоУчета);
					ДокРКООбъектБН.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
					ДокРКООбъектБН.Касса = ?(Константы.КассаТерминала.Получить() = Справочники.Кассы.ПустаяСсылка(), Константы.КассаДлаНаличныхСредств.Получить(), Константы.КассаТерминала.Получить());
					ДокРКООбъектБН.СуммаДокумента = СуммаПКО[Безнал];
					ДокРКООбъектБН.Дата = ТекущаяДата();
					ДокРКООбъектБН.УстановитьНовыйНомер();
					ДокРКООбъектБН.мЗадаватьВопросы = Ложь;
					//ДокРКООбъектБН.Контрагент = ?(Константы.КассаККМДляКредитныхОпераций.Получить() = Справочники.КассыККМ.ПустаяСсылка(), Справочники.КассыККМ.НайтиПоНаименованию("3"), Константы.КассаККМДляКредитныхОпераций.Получить());

					ДокРКООбъектБН.Комментарий = "Передача безналичных денежных средств в банк";
					ДокРКООбъектБН.ДокументОснование = ДокПКООбъектБН.Ссылка;
					//ДокРКООбъектБН.ПолучитьФорму().ОткрытьМодально
					ДокРКООбъектБН.АвтоСоздание = Истина;
					ДокРКООбъектБН.Записать();

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//ДокПКО.СуммаДокумента = СуммаПКО;
		//ДокПКО.РасшифровкаПлатежа.Добавить();
		//ДокПКО.РасшифровкаПлатежа.СуммаПлатежа = СуммаПКО;		
		//ДокПКО.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыИнкассация(Кнопка)
	// Вставить содержимое обработчика.
	
	ДокРКООбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	ДокРКО = ДокРКООбъект.ПолучитьФорму("ФормаДокумента");
	
	ЗаполнитьШапкуДокумента(ДокРКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета);
	ДокРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
	
	Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
		ДокРКО.Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКасса");	
	Иначе 
		ДокРКО.Касса = Константы.КассаДлаНаличныхСредств.Получить();
	КонецЕсли;
	ДокРКО.Открыть();
	
	
КонецПроцедуры

Процедура ПолеВвода1ПриИзменении(Элемент)
	
    ПриИзмененииДисконтнойКарты();
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	врФорма = ПолучитьФорму("ФормаВыдачиVIPКарты");
	врФорма.ИнформационнаяНадпись = "Сумма 100р по накопительной дисконтной карте """ + ДисконтнаяКарта + """ (" + ДисконтнаяКарта.Код + ") равна или превысила порог выдачи дисконтной карты VIP. Нужно выдать VIP-карту.";
	врФорма.ДисконтнаяКартаОснование = ДисконтнаяКарта;
	врРезультат = врФорма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПриИзмененииДисконтнойКарты()
	
	Если Товары.Количество() > 0 Тогда
		Если ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда 
			Предупреждение("    В документе существуют продажи!
					       |     Невозможно установить скидки!
						   | Чтобы произвести продажу по данной карте
						   |необходимо стелать возврат на текущий документ
						   |и начать продажу с регистрации дисконтной карты", 3);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;	

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	КонецЕсли;

КонецПроцедуры

Процедура КнопкаУбратьДисконтнуюКартуНажатие(Элемент)
	
	Если ДисконтнаяКарта <> Справочники.ИнформационныеКарты.ПустаяСсылка() Тогда
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		ПриИзмененииДисконтнойКарты();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаУбратьДисконтнуюКарту1Нажатие(Элемент)
	
	Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда
		ОткрытьЗначение(ДисконтнаяКарта);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыОтчетПоККМ(Кнопка)
	
	врОтчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	
	врОтчет.ИмяРегистра = "РозничнаяВыручка";
	
	врОтчет.ЗаполнитьНачальныеНастройки();
	РаскрашиватьИзмерения = Истина;
	ВыводитьИтогиПоВсемУровням = Истина;
	ВыводитьПоказателиВСтроку = Истина;
	
	врСЗ = Новый СписокЗначений();
	врСЗ.Добавить(Константы.КассаККМДляНаличныхРасчетов.Получить());
	врСЗ.Добавить(Константы.КассаККМДляБезналичногоРасчета.Получить());
	
	Если Справочники.КассыККМ.НайтиПоНаименованию("3") <> Справочники.КассыККМ.ПустаяСсылка() Тогда
		врСЗ.Добавить(Справочники.КассыККМ.НайтиПоНаименованию("3"));
	КонецЕсли;
	
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.ВидСравнения = ВидСравнения.ВСписке;
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.Значение = врСЗ;
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.Использование = Истина;
	
	врФормаОтчета = врОтчет.ПолучитьОсновнуюФорму();
	
	врФормаОтчета.ТолькоПросмотр = Истина;
	врФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Доступность = Ложь;
	
	врФормаОтчета.Открыть();

	врФормаОтчета.ЭлементыФормы.ДатаНач.Значение = ТекущаяДата();
	врФормаОтчета.ЭлементыФормы.ДатаКон.Значение = ТекущаяДата();
	
	//врФормаОтчета.ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение   = Истина;
	//врФормаОтчета.ЭлементыФормы.ПолеВидаСравненияНоменклатура.Значение = ?(ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	//врФормаОтчета.ЭлементыФормы.ПолеНастройкиНоменклатура.Значение     = ТекущиеДанные;

	врФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Функция ПолучитьКассуИзСправочникаСопоставлений(ВидКассы)
	
	Имя = СокрЛП(ИмяКомпьютера());
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВидКассы",ВидКассы);
	Запрос.УстановитьПараметр("ИмяКомпьютера",Имя);
	Запрос.Текст = "Выбрать КассаККМ из 
					|Справочник.СоответствиеКассККМИменамМашин Как СПР
					|Где СПР.ТипКассы = &ВидКассы и Наименование = &ИмяКомпьютера";
					
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.КассаККМ;
	КонецЕсли; 
	
	Возврат Справочники.КассыККМ.ПустаяСсылка();
	
КонецФункции 

Функция ПолучитьКассуДляДенежныхСредствИзСправочникаСопоставлений(ВидКассы)
	
	Имя = СокрЛП(ИмяКомпьютера());
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВидКассы",ВидКассы);
	Запрос.УстановитьПараметр("ИмяКомпьютера",Имя);
	Запрос.Текст = "Выбрать Касса из 
					|Справочник.СоответствиеКассККМИменамМашин Как СПР
					|Где СПР.ТипКассы = &ВидКассы и Наименование = &ИмяКомпьютера";
					
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Касса;
	КонецЕсли; 
	
	Возврат Справочники.Кассы.ПустаяСсылка();
	
КонецФункции 

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	//Если (Константы.РаботаСООО.Получить()) Тогда		
	//	СтандартнаяОбработка=ложь;
	//	Элемент.Значение=Обработки.ОстаткиНоменклатурыТСЦ.ПолучитьФорму("Форма").ОткрытьМодально();
	//	ТоварыНоменклатураПриИзменении(Элемент);
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСкладИзНастроекПользователя(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Склад=Справочники.Склады.ПустаяСсылка();
	Если не СтрокаТабличнойЧасти.Номенклатура.Пустая() Тогда
		Запрос = Новый Запрос();
		//Если (Константы.РаботаСООО.Получить()) Тогда 
		//	Запрос.Текст="Выбрать 
		//	|Склад,
		//	|Сумма(Остаток) как Остаток
		//	|Из
		//	|(
		//	|ВЫБРАТЬ 
		//	|Выбор 
		//	|	Когда 
		//	|	(СкладИП <> ""@"") И (СкладООО <> ""@"")
		//	|Тогда
		//	|	СкладИП
		//	|Иначе 
		//	|	Склад
		//	|Конец  Как Склад,
		//	|Остаток как Остаток
		//	|Из
		//	|(
		//	|	Выбрать
		//	|		Склад как Склад,
		//	|		ЕстьNULL(СкладИП,""@"") как СкладИП, ЕстьNULL(СКЛАДООО,""@"") как СКЛАДООО,
		//	|		Остатки.КоличествоОстаток Как Остаток
		//	|	ИЗ
		//	|		РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура	И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа Объединить Выбрать Различные СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП Где СкладИП в (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа))) как остатки
		//	|	Левое соединение 
		//	|		РегистрСведений.СоответствиеСкладовОООскладамИП как Соотв
		//	|	По 
		//	|		Остатки.Склад = Соотв.СкладООО
		//	|	Или 	
		//	|Остатки.Склад = Соотв.СкладИП
		//	|) как ПЗП
		//	|) как ПЗП1
		//	|Сгруппировать по Склад
		//	|УПОРЯДОЧИТЬ ПО Остаток ВОЗР";			
		//Иначе 
			Запрос.Текст="ВЫБРАТЬ Склад, КоличествоОстаток Остаток ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура	И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов	ГДЕ ГруппаДоступности=&Группа))
			|УПОРЯДОЧИТЬ ПО КоличествоОстаток ВОЗР";
		//КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		ВыбГруппа=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
		Если ВыбГруппа<>Неопределено Тогда
			Запрос.УстановитьПараметр("Группа",ВыбГруппа);
			СписСклады=Запрос.Выполнить().Выгрузить();
			Если СписСклады<>Неопределено Тогда
				Если СписСклады.Количество()>1 Тогда
					ФормаВыбораСклада = ПолучитьФорму("ФормаВыбораСклада", ЭтаФорма);
					сч=0;
					Для каждого стрСклады из СписСклады Цикл
						сч=сч+1;
						стрСтрока=ФормаВыбораСклада.ТаблицаСклады.Добавить();
						стрСтрока.Номер=сч;
						стрСтрока.Склад=стрСклады.Склад;
						стрСтрока.Остаток=стрСклады.Остаток;
					КонецЦикла;
					СтрокаТабличнойЧасти.Склад = ФормаВыбораСклада.ОткрытьМодально();
				ИначеЕсли	СписСклады.Количество()>0 Тогда
					СтрокаТабличнойЧасти.Склад=СписСклады[0].Склад;
				Иначе
					Предупреждение("Данный товар на складах отсутствует");
					СтрокаТабличнойЧасти.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();	
				КонецЕсли;		
				//Если (Константы.РаботаСООО.Получить()) Тогда 
				//// Установим склад ООО
				//	СтрокаТабличнойЧасти.СкладООО = ЯштПолучитьСкладОООИзСоответствия(Константы.ОООДляРозницы.Получить(),СтрокаТабличнойЧасти.Склад);
				//КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
			
КонецПроцедуры	

Процедура ДействияФормыВыбратьЗаказ(Кнопка)
	// Вставить содержимое обработчика.
	ЗаказПокупателя = Документы.ЗаказПокупателя.ПолучитьФормуСписка().ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда 
		ЗаполнитьЧЕкИзЗаказа(ЗаказПокупателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЧЕкИзЗаказа(ЗаказПокупателя)
	
	Товары.Очистить();
	
	Для каждого СтрХ из ЗаказПокупателя Цикл
		СтрУ = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
		
		СуммаСтроки = СтрУ.Цена * СтрУ.Количество;
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		ПриИзмененииНоменклатурыТабЧасти(СтрУ, ЭтотОбъект);

		ПриИзмененииНоменклатурыТоваров(СтрУ);
		ШтрихКод = "";
		Если НЕ ЗначениеНеЗаполнено(СтрУ.Номенклатура) Тогда
			СтрокаШтрихкода = ПолучитьШтрихКод(СтрУ.Номенклатура,
		                                                 СтрУ.ЕдиницаИзмерения,
		                                                 СтрУ.ХарактеристикаНоменклатуры,
		                                                 СтрУ.СерияНоменклатуры,
		                                                 Справочники.Качество.Новый);

			Если СтрокаШтрихкода <> Неопределено Тогда
				ШтрихКод = СтрокаШтрихкода.Штрихкод;
			КонецЕсли;
		КонецЕсли;

		СтрУ.ШтрихКод = ШтрихКод;
		СтрУ.Количество = Макс(1, СтрУ.Количество);

	//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СуммаСтрокиПослеИзменения = СтрУ.Цена * СтрУ.Количество;

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

			СуммаРучныхСкидок = 0;
			СуммаАвтоматическихСкидок = 0;
			Для каждого СтрокаТовара ИЗ Товары Цикл

				СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
				СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

				Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

				Если Разница <> 0 Тогда
					Если СуммаРучныхСкидокСтроки <> 0 Тогда
						СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
					Иначе
						СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
					КонецЕсли;
				КонецЕсли;

				СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
				СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

			КонецЦикла;
			ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

		Иначе // Рассчитать реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрУ, ЭтотОбъект);
		КонецЕсли;
		
		
		
	КонеЦЦИкла;
	
	
КонецПроцедуры

//Процедура ВставитьСкладыИП(ТЗСклады)
//	
//	// Вставляем склады ИП вместо складов ООО в форму б/н оплаты
//	Запрос = Новый ЗАпрос;
//	ВыбГруппа=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
//	Запрос.УстановитьПараметр("Группа",ВыбГруппа);
//	Запрос.Текст = "
//	|Выбрать СкладООО, СкладИП из РегистрСведений.СоответствиеСкладовОООСкладамИП
//	|Где СкладИП в (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа)";
//	ТаблицаДляПоиска = Запрос.Выполнить().Выгрузить();
//	Если (ТЗСклады.Количество()>0) Тогда
//		
//		Для Каждого Стр из ТЗСклады Цикл
//			Стр.СкладРеальный = Стр.Склад;
//			СтрНайденная = 	ТаблицаДляПоиска.Найти(Стр.Склад,"СкладООО");
//			Если (СтрНайденная<>Неопределено) Тогда
//				Стр.Склад = СтрНайденная.СкладИП;	
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//КонецПроцедуры	

//Функция ПроверитьОстатки()
//	
//	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка") Тогда 
//		
//		Остатки = ПолучитьОстаткиТоваров(СтрокаТабличнойЧасти.Номенклатура);
//		Если Остатки.Количество() > 0 Тогда
//			Если СтрокаТабличнойЧасти.Количество > Остатки[0].КоличествоСвободныйОстаток Тогда
//				Предупреждение("Остаток товара на складе " + Строка(Остатки[0].КоличествоСвободныйОстаток) + "
//				|Значение количества будет изменено на реальное!", 3);
//				СтрокаТабличнойЧасти.Количество = Остатки[0].КоличествоСвободныйОстаток;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
ПерезаполнятьДисплейПокупателя = Истина;
мЦветКасса1 = WebЦвета.Черный;
мЦветКасса2 = WebЦвета.Красный;
мЦветКасса3	= WebЦвета.Зеленый;
//РежимРабочегоСтола = Истина;
