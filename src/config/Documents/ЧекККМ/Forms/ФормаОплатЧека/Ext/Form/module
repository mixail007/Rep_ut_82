
// Процедура управляет доступностью элементов формы.
//
Процедура УправлениеДоступностью()

	Если СуммаБезналичнойОплаты = 0 Тогда
		ЭлементыФормы.БезналичнаяОплата.Доступность = Ложь;
	Иначе
		ЭлементыФормы.БезналичнаяОплата.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ВладелецФормы.ПерезаполнятьДисплейПокупателя = Ложь;
	Заголовок = "Оплата чека";
	ЭлементыФормы.НадписьСуммаДокумента.Заголовок = "" + ФорматСумм(Товары.Итог("Сумма"), мВалютаРегламентированногоУчета, "0.00");
	СуммаНаличнойОплаты = Товары.Итог("Сумма") - СуммаБезналичнойОплаты;
	УправлениеДоступностью();

КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	Сдача = (СуммаБезналичнойОплаты + СуммаНаличнойОплаты) - Товары.Итог("Сумма");
	ЭлементыФормы.НадписьСдача.Заголовок = "" + ФорматСумм(Сдача, мВалютаРегламентированногоУчета, "0.00");

	ВладелецФормы.ВывестиИнформациюНаДисплейПокупателя("ОтобразитьИтог", Сдача);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка                         = Ложь;
	ВладелецФормы.ПерезаполнятьДисплейПокупателя = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта "ДействиеОк" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//

Процедура НапечататьТоварныйЧек()

	КоличествоСтрокТоварногоЧека = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("ТоварныйЧек");
	
	// Выводим шапку чека

	ОбластьШапки 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала		= Макет.ПолучитьОбласть("Подвал");
	ОбластьПустойСтроки	= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьШапки.Параметры.ДатаДокумента	= Формат(Дата, "ДЛФ=DD");
	ОбластьПодвала.Параметры.СуммаПрописью	= СформироватьСуммуПрописью(Товары.Итог("Сумма"), ТипЦен.ВалютаЦены.Ссылка);
	ТабДокумент.Вывести(ОбластьШапки);

	СчСтрок = 0;
	
	Для каждого Сч Из Товары Цикл
	
		ОбластьСтроки.Параметры.Ном				= Сч.НомерСтроки;
		ОбластьСтроки.Параметры.Наименование	= Сч.Номенклатура;
		ОбластьСтроки.Параметры.Количество		= Формат(Сч.Количество, "ЧДЦ=3");
		ОбластьСтроки.Параметры.Цена			= Формат(Сч.Цена, "ЧДЦ=2");
		ОбластьСтроки.Параметры.Сумма			= Формат(Сч.Сумма, "ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьСтроки);
		СчСтрок = СчСтрок + 1;
		
	КонецЦикла;
	
	Если КоличествоСтрокТоварногоЧека - СчСтрок > 0 Тогда
		
		Для СчСтр = 1 По КоличествоСтрокТоварногоЧека - СчСтрок Цикл
		
			ТабДокумент.Вывести(ОбластьПустойСтроки);
		
		КонецЦикла; 
		
	
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьПодвала);
	
	ТабДокумент.Напечатать();

КонецПроцедуры
 

Процедура ДействияФормыДействиеОк(Кнопка)

	Сдача = (СуммаБезналичнойОплаты + СуммаНаличнойОплаты) - Товары.Итог("Сумма");

	Если Сдача < 0 Тогда
		Предупреждение("Суммы недостаточно для оплаты чека!");
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"РаботникТСЦ") Тогда
		
	Иначе	
		Если ЭлементыФормы.ПечатьТоварногоЧека.Значение Тогда
	
		НапечататьТоварныйЧек();
	
	КонецЕсли; 
    КонецЕсли;

	Закрыть("Закрыть чек");

КонецПроцедуры

// Процедура вызывается при выборе пункта "ДействиеОтмена" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеОтмена(Кнопка)
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаБезналичнойОплаты".
//
Процедура СуммаБезналичнойОплатыПриИзменении(Элемент)

	УправлениеДоступностью();

КонецПроцедуры

Процедура БезналичнаяОплатаПриИзменении(Элемент)

	Если ВладелецФормы.РассчитыватьАвтоматическиеСкидки() Тогда
		//Расчет скидок

		ВладелецФормы.мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации" ,                       Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       ВладелецФормы.мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("ВидОплаты"     ,                       БезналичнаяОплата);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);

		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, ВладелецФормы.мМинимальныеЦены, ВладелецФормы.мСписокФильтров);

		ВладелецФормы.СуммаРучныхСкидок = 0;
		ВладелецФормы.СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			ВладелецФормы.СуммаРучныхСкидок = ВладелецФормы.СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			ВладелецФормы.СуммаАвтоматическихСкидок = ВладелецФормы.СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ВладелецФормы.ИтогоСуммаСкидок = ВладелецФормы.СуммаРучныхСкидок + ВладелецФормы.СуммаАвтоматическихСкидок;

	КонецЕсли;

КонецПроцедуры

Процедура БезналичнаяОплатаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВидыОплатЧекаККМ.ПолучитьФормуВыбора();
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.Значение = Перечисления.ВидыДенежныхСредств.Наличные;
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидДенежныхСредств.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДенежныхСредств.Доступность = Ложь;
	Элемент.Значение = ФормаВыбора.ОткрытьМодально();

КонецПроцедуры



