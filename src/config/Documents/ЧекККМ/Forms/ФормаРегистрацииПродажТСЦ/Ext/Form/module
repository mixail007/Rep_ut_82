Перем мЦветКасса1;
Перем мЦветКасса2;               
Перем мЦветКасса3;

Перем спВыборКассыККМ;
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем РассчитыватьСкидку;

Перем мСтрокаФР Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;

Перем СуммаРучныхСкидок Экспорт;
Перем СуммаАвтоматическихСкидок Экспорт;
Перем ИтогоСуммаСкидок Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;
Перем ПерезаполнятьДисплейПокупателя Экспорт;

Перем мВидДокументаПоАвансу Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена номенклатура;
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура <> Неопределено
	   И Не мМожноМенятьЦенуВДокументе Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

	// Установим способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
   //УстановитьСкладИзНастроекПользователя(СтрокаТабличнойЧасти);
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена характеристика номенклатуры;
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура = Неопределено Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Выводит информацию о чеке на дисплей покупателя
//
// Параметры:
//  Режим        - режим, в который должен перейти дисплей покупателя
//
Процедура ВывестиИнформациюНаДисплейПокупателя(Режим, СуммаСдача = 0) Экспорт

	Если глТорговоеОборудование <> Неопределено Тогда

		ИскомаяСтрока = глТорговоеОборудование.млДП.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда

			Если Режим = "ВключитьРежимВыводаСтрок" Тогда

				Ответ = глТорговоеОборудование.ВключитьРежимВыводаСтрок(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима вывода строк", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьСтроки" Тогда
				Если Не ПерезаполнятьДисплейПокупателя Тогда
					Возврат;
				КонецЕсли;

				Если ЭлементыФормы.Товары.ТекущаяСтрока <> Неопределено Тогда

					Строка1 = ЭлементыФормы.Товары.ТекущаяСтрока.Номенклатура.Наименование;
					СуммаВсего = Формат(ЭлементыФормы.СуммаДокумента.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0");
					Строка2 = "Итого:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаВсего, " ", 14);

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				ИначеЕсли НЕ ЗначениеНеЗаполнено(ИскомаяСтрока.БегущаяСтрока) Тогда

					Ответ = глТорговоеОборудование.ВключитьРежимВыводаБегущейСтроки(ИскомаяСтрока);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима бегущих строк", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				Иначе

					Строка1 = "";
					Строка2 = "";

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				КонецЕсли;
			ИначеЕсли Режим = "ОтобразитьИтог" Тогда

				Если Товары.Итог("Сумма") > 0 Тогда

					СуммаВсего = Формат(ЭлементыФормы.СуммаДокумента.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
					СуммаСдача = Формат(СуммаСдача                           , "ЧДЦ=2; ЧРГ=' '; ЧН=0,00");
					Строка1 = "Итого:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаВсего, " ", 14);
					Строка2 = "Сдача:" + глТорговоеОборудование.ДополнитьСтрокуЛ(СуммаСдача, " ", 14);;

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				ИначеЕсли НЕ ЗначениеНеЗаполнено(ИскомаяСтрока.БегущаяСтрока) Тогда

					Ответ = глТорговоеОборудование.ВключитьРежимВыводаБегущейСтроки(ИскомаяСтрока);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при включении режима бегущих строк", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				Иначе

					Строка1 = "Итого:";
					Строка2 = "Сдача:";

					Ответ = глТорговоеОборудование.ВывестиСтрокиНаДисплей(ИскомаяСтрока, Строка1, Строка2);
					Если Не ПустаяСтрока(Ответ) Тогда
						Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: невозможно отобразить строки", СтатусСообщения.Внимание);
						Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли Режим = "ОтобразитьПустыеСтроки" Тогда

				Ответ = глТорговоеОборудование.ОчиститьДисплейПокупателя(ИскомаяСтрока);
				Если Не ПустаяСтрока(Ответ) Тогда
					Сообщить("Дисплей покупателя """ + ИскомаяСтрока.Модель + """: ошибка при очистке дисплея", СтатусСообщения.Внимание);
					Сообщить("    " + Ответ, СтатусСообщения.БезСтатуса);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет права пользователя на работу с интерфейсом кассира
//
// Параметры:
//  глТекущийПользователь - Пользователь, для которого проверяются права.
//
Процедура ПроверитьДоступностьСервисныхФункций(глТекущийПользователь)
    
//	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.АннулированиеЧека.Доступность = РазрешитьАннулированиеЧека(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ЧекВозврата.Доступность = РазрешитьЧекВозврата(глТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ОтчетОСменеБезГашения.Доступность = РазрешитьОтчетОСменеБезГашения(глТекущийПользователь);
//	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность = РазрешитьНазначениеРучныхСкидок(глТекущийПользователь);
//	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ТолькоПросмотр = Не ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность;

КонецПРоцедуры

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или (ЧекККМ <> Неопределено
	    И ЧекККМ <> Документы.ЧекККМ.ПустаяСсылка())
	 ИЛИ КассаККМ.НеИспользоватьАвтоматическиеСкидкиВЧекеККМ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

//Производит закрытие чека на фискальном регистраторе и печать товарного чека.
//
// Параметры:
//  Печать - булево, признак необходимости печати товарного чека.
//
Процедура ЗакрытьЧек(Печать = Ложь)

	Если ТолькоПросмотр Тогда
		Закрыть();
	Иначе
		
		ЗаписатьСтрокуЛогаКассы("Закрытие чека. (ФормаРегистрациипродажТСЦ:закрытьчек)");
		Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
			И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
			
			Предупреждение("Дисконтная карта, указанная в документе, не является активной!");
			Возврат;
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Если НЕ ЧекПробитНаККМ И Товары.Итог("Сумма") > 0 Тогда
				ЗаписатьСтрокуЛогаКассы("Открываем форму оплат.(ФормаРегистрациипродажТСЦ:закрытьчек)");
				ФормаОплат = ПолучитьФорму("ФормаОплатЧекаТСЦ", ЭтаФорма);
				//	ФормаОплат.ДисконтнаяКарта=ДисконтнаяКарта ;
				//Если (Константы.РаботаСООО.Получить()) Тогда
					//мТаблицаТоваровРеальная = Товары.Выгрузить();
					//ВставитьСкладыИП(Товары);
				//КонецЕсли;					
				ТЗСклады=Товары.Выгрузить();
				ТЗСклады.Свернуть("Склад","Сумма");
				ФормаОплат.ТаблицаОплатКредит.Очистить();
				Для каждого стрСклады из ТЗСклады Цикл
					стрСтрока=ФормаОплат.ТаблицаОплатКредит.Добавить();
					стрСтрока.Склад=стрСклады.Склад;
					стрСтрока.Организация=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура( "Склад,Компьютер", стрСклады.Склад,ИмяКомпьютера())).Организация;
					стрСтрока.СуммаПоДокументу=стрСклады.Сумма;
					стрСтрока.СуммаНаличнойОплаты=стрСклады.Сумма;
					стрСтрока.СуммаБезналичнойОплаты=0;
					стрСтрока.ПроцентКомиссии=0;
				КонецЦикла;
				Результат  = ФормаОплат.ОткрытьМодально();
				ЗаписатьСтрокуЛогаКассы("Результат формы оплат.(ФормаРегистрациипродажТСЦ:закрытьчек) " + Строка(Результат));
				ТаблицаОплат=ФормаОплат.ТаблицаОплатКредит.Скопировать();
				Печать=ФормаОплат.ПечатьТоварногоЧека;
				
				Если ТаблицаОплат.Количество()>0 Тогда
					Для каждого стрОплата	из  ТаблицаОплат Цикл
						Если стрОплата.ПроцентКомиссии>0 Тогда
							найдСтроки=Товары.НайтиСтроки(Новый Структура("Склад",стрОплата.Склад));
							Для каждого стр из найдстроки Цикл
								стр.ПроцентСкидкиНаценки=стрОплата.ПроцентКомиссии;	
								РассчитатьСуммуТабЧасти(стр, ДокументОбъект);
							КонецЦикла;		
						КонецЕсли	
					КонецЦикла;		
				КонецЕсли;	
				
				Ответ = Вопрос("Отправить чек покупателю?",РежимДиалогаВопрос.ДаНет);
			
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ФормаКИ = ПолучитьФорму("ФормаВводаКонтактнойИнформации", ЭтаФорма);
					ФормаКИ.ДокументОбъект = ЭтотОбъект;
					ФормаКИ.ОткрытьМодально();
					//Контакты = "";
					//Если ВвестиСтроку(Контакты,"Введите телефон (999 999-99-99) или e-mail") тогда
					//	Если Найти(Контакты,"@") > 0 тогда
					//		ЭтотОбъект.АдресЭлектроннойПочтыПокупателя = СокрЛП(Контакты);
					//	Иначе
					//		ЭтотОбъект.ТелефонПокупателя = СокрЛП(Контакты);
					//	КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
			
		КонецЕсли;
		Иначе
			Результат = "Закрыть чек";
		КонецЕсли;
		
		Если Результат <> "Закрыть чек" Тогда
			
			//ВосстановитьРеальныеСклады(Товары);
			ЗаписатьСтрокуЛогаКассы("Возврат в основную форму регистрации. (ФормаРегистрациипродажТСЦ:закрытьчек)");
			Возврат;
			
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
				СтрокаСтатуса="";
				СоздатьНовыйЧек = Истина;
				
				// если чек проводится текущим днем и время ноль, то установить текущее время
				врТекущаяДата = ТекущаяДата();
				Если НачалоДня(Дата) = НачалоДня(врТекущаяДата)
					И Минута(Дата) = 0
					И Час(Дата) = 0
					И Секунда(Дата) = 0 Тогда
					
					Дата = врТекущаяДата;
					
				КонецЕсли; 
				
				ЗаписатьСтрокуЛогаКассы("Контроль остатков. (ФормаРегистрациипродажТСЦ:закрытьчек)");
				ЕстьРеализованныеОстатки = Ложь;
				Если ((НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка")) и (Константы.КонтрольОстатковВЧеке.Получить()) и (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа)) Тогда 
					// Контроль Остатков
					Для Каждого СтрокаТабличнойЧасти из Товары Цикл
						Остатки = ПолучитьОстаткиТоваровТСЦ(СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Склад);
						Если Остатки.Количество() > 0 Тогда
							Если СтрокаТабличнойЧасти.Количество > Остатки[0].КоличествоСвободныйОстаток Тогда
								Предупреждение("Остаток товара " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Наименование) + " на складе " + Строка(Остатки[0].КоличествоСвободныйОстаток) + "
								|Значение количества будет изменено на реальное!", 3);
								СтрокаТабличнойЧасти.Количество = Остатки[0].КоличествоСвободныйОстаток;
								ЕстьРеализованныеОстатки = Истина;
							КонецЕсли;
						Иначе 
							Предупреждение("Остаток товара " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Наименование) + " на складе = 0" + "
							|Значение количества будет изменено на реальное!", 3);
							Товары.Удалить(СтрокаТабличнойЧасти);
							ЕстьРеализованныеОстатки = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
						
				
				Если (ЕстьРеализованныеОстатки) Тогда 
					Возврат;
				КонецЕсли;
				
				флБылиПродажи=Ложь;
						
				//ЭтотОбъект.Склад=ДополнитьИзРегистраСоответствия(ТЗСклады);
				//ЭтотОбъект.Склад=ДополнитьИзРегистраСоответствия(ТЗСклады);
				
				Если Товары.Количество()>0 Тогда 	// товар по данному складу остался	
					найдОплата=ТаблицаОплат.НайтиСтроки(Новый Структура("Склад",ЭтотОбъект.Склад));
					СуммаНаличнойОплаты=найдОплата[0].СуммаНаличнойОплаты ;
					СуммаБезналичнойОплаты=Товары.Итог("Сумма")-СуммаНаличнойОплаты ;
					Если СуммаБезналичнойОплаты>0 Тогда
						КассаККМ=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура("Склад,Компьютер",ЭтотОбъект.Склад,ИмяКомпьютера())).КассаККМКредит;
					КонецЕсли;	
					
					//Попытка
						Если (Константы.ПроводитьЧекОперативно.Получить()<>Ложь)  Тогда
						Иначе
							ЗаписатьСтрокуЛогаКассы("Попытки записи чека по складу. (ФормаРегистрациипродажТСЦ:закрытьчек) " + Строка(Склад));
							КоличествоПопыток = 1;					
							Пока (Проведен<>Истина) и (КоличествоПопыток<5) Цикл
								СоздатьНовыйЧек = Истина;
								попытка 
									Если Константы.ПроводитьЧекОперативно.Получить() Тогда 
										Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Оперативный);	
									Иначе 
										Записать(РежимЗаписиДокумента.Проведение);
									КонецЕсли;
									///Пробитие чека
									Отк = ложь;
									ПровестиИРаспечататьЧек(Отк, ЭтотОбъект.ПолучитьФорму("ФормаДокумента"));
								Исключение
									СоздатьНовыйЧек = Ложь;
								КонецПопытки;
								КоличествоПопыток = КоличествоПопыток + 1;
							КонецЦикла;						
						ЗаписатьСтрокуЛогаКассы("(ФормаРегистрациипродажТСЦ:закрытьчек). С попытки " + Строка(КоличествоПопыток) + " записали чек по складу " + Склад);							
						КонецЕсли;
					СтрокаСтатуса=СтрокаСтатуса+ВернутьСтатусЧекаККМ(ЭтотОбъект);
					//Исключение // Информация об ошибке должна была показаться раньше.
					//КонецПопытки;
					флБылиПродажи=Истина;
				КонецЕсли;
				
				Если флБылиПродажи Тогда
					
					Если Константы.ПечататьФормуЧекаККМ.Получить() Тогда 
						//Форма = ПолучитьФорму("Форма");
						//Структура = Форма.открытьмодально();
						Попытка 
							//ТабДокумент = ПечатьЧека(Структура);
							ТабДокумент = ПечатьЧека();
							НапечататьДокумент(ТабДокумент,1,Истина);
						Исключение 
							Предупреждение("Не удалось напечатать чекККМ");
							Возврат;
						КонецПопытки;
					КонецЕсли;
	
					
					
					Если Печать Тогда
						
						ЭтотОбъект.ПечатьТоварногоЧека();
					КонецЕсли;
					
					// проверим, не нужно ли выдать VIP-карту
					врПорогВыдачиVIPКарты = Константы.ПорогВыдачиVIPКарты.Получить();
					Если врПорогВыдачиVIPКарты <> 0 
						И ДисконтнаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная
						И ДисконтнаяКарта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная
						И ДисконтнаяКарта.СтатусДисконтнойКарты = Перечисления.СтатусыДисконтнойКарты.Активна Тогда
						
						Запрос = Новый Запрос;
						Запрос.Текст = "
						|ВЫБРАТЬ СтоимостьОборот КАК ВыбраннаяСумма
						|ИЗ РегистрНакопления.Продажи.Обороты(,,, ДисконтнаяКарта = &парамДисконтнаяКарта)
						|ГДЕ СтоимостьОборот >= &парамСтоимостьОборот
						|";
						
						Запрос.УстановитьПараметр("парамДисконтнаяКарта", ДисконтнаяКарта);
						Запрос.УстановитьПараметр("парамСтоимостьОборот", врПорогВыдачиVIPКарты);
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Если Выборка.Следующий() Тогда
							
							врФорма = ПолучитьФорму("ФормаВыдачиVIPКарты");
							врФорма.ИнформационнаяНадпись = "Накопленная сумма " + Выборка.ВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить() + " по накопительной дисконтной карте """ + ДисконтнаяКарта + """ (" + ДисконтнаяКарта.Код + ") равна или превысила порог выдачи дисконтной карты VIP. Нужно выдать VIP-карту.";
							врФорма.ДисконтнаяКартаОснование = ДисконтнаяКарта;
							врФорма.ОткрытьМодально();
							//Предупреждение("Сумма " + Выборка.ВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить() + " по накопительной дисконтной карте " + ДисконтнаяКарта + " (" + ДисконтнаяКарта.Код + ") равна или превысила порог выдачи дисконтной карты VIP. Нужно выдать VIP-карту.");
							
						КонецЕсли; 
					КонецЕсли; 
					
					ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
					ДокументОбъект.Дата = ТекущаяДата();
					ДокументОбъект.мСтатусПробития=СтрокаСтатуса;
					ПриОткрытии();
					Обновить();
				КонецЕсли;
			Иначе   // для чека возврата
				    //Записать(РежимЗаписиДокумента.Проведение);
					///Пробитие чека
					Отк = ложь;
					
					ПровестиИРаспечататьЧек(Отк, ЭтотОбъект.ПолучитьФорму("ФормаДокумента"));
					
   					ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
					ДокументОбъект.Дата = ТекущаяДата();
					ПриОткрытии();
					Обновить();

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


// Процедура выбора чека ККМ для возврата.
//
Процедура ЧекККМНачалоВыбора()

	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Значение = КассаККМ;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.КассаККМ.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.Проведен.Значение = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.Проведен.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Проведен.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

	ЧекККМ = ФормаВыбора.ОткрытьМодально();
	Если НЕ ЗначениеНеЗаполнено(ЧекККМ) Тогда
		Если не ПроверитьСуществованиеЧекаВозврата(ЧекККМ) Тогда 
			Если ЗначениеЗаполнено(ЧЕкККМ.заказпокупателя) Тогда 
				ЗаказПокупателя = ЧЕкККМ.заказпокупателя;
			КонецЕсли;
			ДокументОснование = ЧЕкККМ;
			Товары.Загрузить(ЧекККМ.Товары.Выгрузить());
			Для каждого СтрокаТовара Из Товары Цикл
				СтрокаТовара.РегистрацияПродажи = Ложь;
			КонецЦикла;
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
			//Запрос=Новый Запрос("ВЫБРАТЬ	Склад,  КассаККМ, КассаККМКредит  ИЗ РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ 	ГДЕ КассаККМ=&КассаККМ и Компьютер=&ИмяКомпьютера");
			//Запрос.УстановитьПараметр("КассаККМ",КассаККМ);
			//Запрос.УстановитьПараметр("ИмяКомпьютера",ИмяКомпьютера());
			//Выборка=Запрос.Выполнить().Выгрузить();
					
			//Если Выборка.Количество()>0 Тогда
				Склад=ЧекККМ.Склад ;
			//КонецЕсли;	
	  		СуммаНаличнойОплаты = ЧекККМ.СуммаНаличнойОплаты;
			СуммаБезналичнойОплаты = ЧекККМ.СуммаБезналичнойОплаты;
			УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
			ДисконтнаяКарта = ЧекККМ.ДисконтнаяКарта;
		Иначе 
			Предупреждение("По данному чеку ККМ уже введен возврат");		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////Филиалы то наоборот////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//Если Не МодальныйРежим Тогда
	//	Отказ = Истина;
	//	ОткрытьМодально();
	//КонецЕсли;

	
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольАдминистратораФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Администратор: " + глТекущийПользователь;
	ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ПарольКассираФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Кассир: " + глТекущийПользователь;
	КонецЕсли;

	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	Если (Константы.ИспользоватьЗагрузкуСекций.Получить()) Тогда 
	// Инициализация таблицы отделов в ККМ 
		ВыборкаТо = РегистрыСведений.ТорговоеОборудование.Выбрать();
		
		Пока ВыборкаТО.Следующий() Цикл
			Если ((СокрП(ВыборкаТО.Компьютер) = СокрП(ИмяКомпьютера())) И (ВыборкаТО.МодельТорговогоОборудования.ВидТорговогоОборудования = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор)) Тогда 
				// Загружаем таблицы отделов
				// Нашли ФР
				СтрокаФР   	= глТорговоеОборудование.млККТ.Найти(ВыборкаТО.КассаККМ, "КассаККМ");
				Объект 		= СтрокаФР.Объект;
				Объект.Пароль = 30;
				Объект.НомерТаблицы=7;
				Объект.НомерЛУ = ВыборкаТО.НомерЛогическогоУстройства;
				Объект.УстановитьАктивноеЛУ();			
				// Устанавливаем пароль и номер таблицы (№7 - наименования отделов)
				Запрос = новый Запрос;
				Запрос.УстановитьПараметр("КассаККМ",ВыборкаТО.КассаККМ);
				Запрос.Текст = "
				|Выбрать Склад.НомерСекции Как НомерСекции, Склад.Наименование как Наименование Из РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ Где КассаККМ = &КассаККМ";
				ВыбСекции = Запрос.Выполнить().Выбрать();
				Пока ВыбСекции.Следующий() Цикл
					Объект.НомерПоля=1;
					//Объект.НомерРяда=ВыбСекции.НомерСекции;
					Объект.НомерРяда=1;
					Объект.GetFieldStruct();
					Объект.ReadTable();     
					Объект.ValueofFieldString=СокрЛП(Лев(ВыбСекции.Наименование,40));
					Объект.WriteTable();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
				
		УстановитьНомерДокумента(ЭтотОбъект);

		ТипЦен=Константы.ТипЦенРозница.Получить();
    
		ЧекПробитНаККМ = Ложь;
		Параметры = Новый Структура;
		Ответ = "";

		мСтрокаФР = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");

		//глТорговоеОборудование.ПолучитьНомерЧекаСмены(мСтрокаФР, Параметры, Ответ);
		//Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		//Параметры.Свойство("НомерСмены", НомерСменыККМ);
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// { Лапенков
	спВыборКассыККМ.Очистить();
	
	ЗапросСпКасса=Новый Запрос("ВЫБРАТЬ КассаККМ  ИЗ РегистрСведений.ТорговоеОборудование
    |ГДЕ МодельТорговогоОборудования.ВидТорговогоОборудования = &ВидТорговогоОборудования и Компьютер = &Компьютер
	//Смирнов, кассиры в регионах работают через терминал
	| и КассаККМ = &КассаККМ
	//
	|");
	ЗапросСпКасса.УстановитьПараметр("КассаККМ",ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяКассаККМ"));
	ЗапросСпКасса.УстановитьПараметр("ВидТорговогоОборудования",Перечисления.ВидыТорговогоОборудования.ККТсПередачейДанных);			
	ЗапросСпКасса.УстановитьПараметр("Компьютер",ИмяКомпьютера());
	
	спВыборКассыККМ.ЗагрузитьЗначения(ЗапросСпКасса.Выполнить().Выгрузить().ВыгрузитьКолонку("КассаККМ"));
	
	Если спВыборКассыККМ.Количество()>0 Тогда 
		Для каждого сп из спВыборКассыККМ Цикл
			сп.Представление=Строка(сп.Значение);
		КонецЦикла;	
		
		УстановитьПодменюВыбораКассККМ(ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ВыборКассыККМ,
		спВыборКассыККМ,
		Новый Действие("ДействияФормыДействиеВыбратьКассуККМ"));
		
		УстановитьПодменюВыбораКассККМ(ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ZОтчетТСЦ,
		спВыборКассыККМ,
		Новый Действие("ДействияФормыДействиеВыполнитьZОтчет"));
		
		УстановитьПодменюВыбораКассККМ(ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ОтчетОСменеБезГашения,
		спВыборКассыККМ,
		Новый Действие("ДействияФормыОтчетОСменеБезГашения"));	
		
		спВыборПередача=спВыборКассыККМ.Скопировать();
		Для каждого сп из спВыборПередача Цикл
			сп.Представление="Передача в кассу из " +сп.Представление;
		КонецЦикла;	
		
		УстановитьПодменюВыбораКассККМ(ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.РаботаСДенежнымиСредствами,
		спВыборПередача,
		Новый Действие("ДействияФормыОприходованиеДСИзККМ"));
		
		УстановитьПодменюВыбораКассККМ(ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.КассоваяСмена,
		спВыборКассыККМ,
		Новый Действие("ДействияФормыДействиеКассоваяСмена"))
	Иначе
	Предупреждение("В торговом оборудовании для данного компьютера "+ИмяКомпьютера()+" нет ни одного фискального регистратора");	
	КонецЕсли;																																						
																																						
	// } Лапенков
	
	
	// включим режим вывода строк
	ВывестиИнформациюНаДисплейПокупателя("ВключитьРежимВыводаСтрок");

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах()
		ИЛИ КассаККМ.РазрешитьМенятьЦеныВЧекеККМВЛюбомСлучае;

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	//ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = Истина;
	ЭлементыФормы.Товары.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;
	Для каждого СтрокаТовара ИЗ Товары Цикл

		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	ПроверитьДоступностьСервисныхФункций(глТекущийПользователь);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.Товары.Колонки.ЕдиницаИзмерения.ТолькоПросмотр = Не яштАдминистративныеФункцииДоступны();
	

	ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.ДокументОбъект = ЭтотОбъект;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();
    
	Если ВидПользователя <> Неопределено Тогда

		Ответственный = глТекущийПользователь;
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
		ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если не ЗначениеНеЗаполнено(мВидДокументаПоАвансу) Тогда
			Если	мВидДокументаПоАвансу="ПриходныйКассовыйОрдер" Тогда
				ДокПКО=Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				ДокПКО.Заполнить(ЗначениеВыбора);
				ДокПКО.Касса=Константы.КассаДляАвансов.Получить();
				ФормаПКО=ДокПКО.ПолучитьФорму();
				ФормаПКО.Открыть();
			Иначе //РКО
				ДокРКО=Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				ДокРКО.Заполнить(ЗначениеВыбора);
				ДокРКО.Касса=Константы.КассаДляАвансов.Получить();
				ФормаРКО=ДокРКО.ПолучитьФорму();
				ФормаРКО.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда

		СтруктураПараметров = Новый Структура();

		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьТовары";
			Валюта          = мВалютаРегламентированногоУчета;
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);
			СтруктураПараметров.Вставить("Пользователь"         , Неопределено);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
          // если дисконт
			Если Товары.Количество()>0 Тогда							
				Предупреждение("    В документе существуют продажи!
					       |     Невозможно установить скидки!
						   | Чтобы произвести продажу по данной карте
						   |необходимо сделать возврат на текущий документ
						   |и начать продажу с регистрации дисконтной карты", 3);
				Возврат;					
			КонецЕсли;	
			СтруктураПараметров.Вставить("Команда"              , "");
			СтруктураПараметров.Вставить("Пользователь"         , Неопределено);
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;

		Пользователь = Неопределено;
		Команда = "";
		СтруктураПараметров.Свойство("Пользователь", Пользователь);
		СтруктураПараметров.Свойство("Команда", Команда);
		
		Если Пользователь <> Неопределено Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
			Запрос.УстановитьПараметр("ПустойПароль", "");

			Запрос.Текст ="
			|ВЫБРАТЬ
			|	НастройкиПользователей.Пользователь,
			|	НастройкиПользователей.Настройка,
			|	НастройкиПользователей.Значение
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
			|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
			|
			|ГДЕ
			|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
			|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Пользователь
			|АВТОУПОРЯДОЧИВАНИЕ
			|";

			ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

			ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
			ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
			ФормаАвторизации.Пользователь = Пользователь;
			ВидПользователя = ФормаАвторизации.ВыполнитьАвторизацию( Истина);

			Если ВидПользователя <> Неопределено Тогда

				ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
				ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

			КонецЕсли;

		//Расчет скидок
		ИначеЕсли Команда = "РассчитатьДисконтныеСкидки" Тогда
			
			ПриИзмененииДисконтнойКарты();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ВнешнееСобытие()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.СуммаДокумента.Заголовок = "" +ФорматСумм(Товары.Итог("Сумма"), ,"0,00");
	СуммаОплачено = СуммаБезналичнойОплаты + СуммаНаличнойОплаты;

	Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда
	   
		Если ДисконтнаяКарта.СтатусДисконтнойКарты = Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		   Если ДисконтнаяКарта.ВидСкидки = Перечисления.ВидыСкидокИнформационныхКарт.Накопительная Тогда
			
			    Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ СтоимостьОборот КАК ВыбраннаяСумма
				|ИЗ РегистрНакопления.Продажи.Обороты(,,, ДисконтнаяКарта = &парамДисконтнаяКарта)
				|";
				
				Запрос.УстановитьПараметр("парамДисконтнаяКарта", ДисконтнаяКарта);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий()
					И Выборка.ВыбраннаяСумма <> NULL Тогда
					врВыбраннаяСумма = Выборка.ВыбраннаяСумма;
				Иначе
					врВыбраннаяСумма = 0;
				КонецЕсли; 
				
				врСтрВыбраннаяСумма = ". Накоп. сумма: " + врВыбраннаяСумма + Константы.ВалютаУправленческогоУчета.Получить();
			
			Иначе
				
				врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.ПроцентСкидки + "%";
				
			КонецЕсли; 
			
		Иначе
			
			врСтрВыбраннаяСумма = ". " + ДисконтнаяКарта.СтатусДисконтнойКарты;
			
		КонецЕсли; 
	   
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Дисконтная карта: " + ДисконтнаяКарта + врСтрВыбраннаяСумма;
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Черный;
		
		ЭлементыФормы.КнопкаУбратьДисконтнуюКарту.Видимость = Истина;
		ЭлементыФормы.КнопкаПросмотрДисконтнойКарты.Видимость = Истина;
		
	ИначеЕсли Товары.Количество()=0 Тогда
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Спросить дисконтную карту!";
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Красный;
		
		ЭлементыФормы.КнопкаУбратьДисконтнуюКарту.Видимость = Ложь;
		ЭлементыФормы.КнопкаПросмотрДисконтнойКарты.Видимость = Ложь;
	Иначе 	
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Ввод дисконта невозможен!";
		ЭлементыФормы.ДисконтнаяКарта.ЦветТекста = WebЦвета.Красный;
		
		ЭлементыФормы.КнопкаУбратьДисконтнуюКарту.Видимость = Ложь;
		ЭлементыФормы.КнопкаПросмотрДисконтнойКарты.Видимость = Ложь;

	КонецЕсли;

	ЭлементыФормы.СкидкиИтогоСумма.Заголовок = "" + ФорматСумм(ИтогоСуммаСкидок, ,"0,00");
	//ЭлементыФормы.НадписьСменаЧекККМ.Заголовок = "Смена №: " + НомерСменыККМ + "; Чек ККМ №: " + НомерЧекаККМ;

	ЭлементыФормы.НадписьКассаККМ.Заголовок = "Касса: " + КассаККМ;
	
	СтрокаТовара = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТовара <> Неопределено Тогда
		СуммаТовара = СтрокаТовара.Цена * СтрокаТовара.Количество;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = "" + СтрокаТовара.Номенклатура;
	Иначе
		СуммаТовара = 0;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = "";
	КонецЕсли;
	
	
	Если СуммаТовара <> 0 Тогда
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = "" + СтрокаТовара.Цена + "руб. Х " + СтрокаТовара.Количество
		                                               + " " + СтрокаТовара.ЕдиницаИзмерения
		                                               + " = " + СтрокаТовара.Цена * СтрокаТовара.Количество + "руб.";
	Иначе
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = "";
	КонецЕсли;

	Если не ЗначениеНеЗаполнено(мСтатусПробития) Тогда
		ЭлементыФормы.ИнфНадписьСтатусПробития.Заголовок=Строка(мСтатусПробития);
	Иначе
        ЭлементыФормы.ИнфНадписьСтатусПробития.Заголовок="";
	КонецЕсли;
	ВывестиИнформациюНаДисплейПокупателя("ОтобразитьСтроки");

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	//Отказ = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	//ВывестиИнформациюНаДисплейПокупателя("ОтобразитьПустыеСтроки");
	//Если ЭлементыФормы.ТекущиеВесы.Значение <> Неопределено Тогда
	//	СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);
	//КонецЕсли;

	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ВыходИзПрограммы" командной панели
// формы.
//
Процедура ДействияФормыВыходИзПрограммы(Кнопка)

	КоличествоСтрок = Товары.Количество();
	Если (КоличествоСтрок > 1 И Товары[0].РегистрацияПродажи) Тогда
		Предупреждение("Необходимо закрыть или аннулировать чек!");
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,
	                                                          "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		//ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "НазначитьСкидку" командной панели
// формы. Процедура назначает ручную скидку на позиции товара.
//
Процедура ДействияФормыНазначитьСкидку(Кнопка)

	ПроцентСкидки = 0;
	ВвестиЧисло(ПроцентСкидки, "Введите процент скидки.", 5, 2);

	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;

	Для Каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.ПроцентСкидкиНаценки = ПроцентСкидки;
		РассчитатьСуммуТабЧасти(СтрокаТовара, ЭтотОбъект);
		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Аннулирование чека" командной панели
// формы.
//
Процедура ДействияФормыАннулированиеЧека(Кнопка)

	Если НЕ Проведен Тогда
		ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
		Если ИскомаяСтрока <> Неопределено Тогда
			Ответ = "";
			глТорговоеОборудование.АннулироватьЧек(ИскомаяСтрока, Ответ);
			Если ПустаяСтрока(Ответ)
			   И Товары.Количество() > 0
			   И Товары[0].РегистрацияПродажи Тогда
				Ответ = Вопрос("Вывести позиции чека на ФР? Иначе строки чека удалятся", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					Для Каждого СтрокаТовара Из Товары Цикл
						СтрокаТовара.РегистрацияПродажи = Ложь;
					КонецЦикла;

					Для каждого СтрокаТовара Из Товары Цикл

						// параметры фискального регистратора
						Параметры = Новый Структура();
						Параметры.Вставить("СтрокаТовара" , СтрокаТовара            );
						Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
						Параметры.Вставить("КассаККМ"     , КассаККМ                             );

						глТорговоеОборудование.ПечататьСтрокуЧека(мСтрокаФР, Параметры, Ответ);

						Если ПустаяСтрока(Ответ) Тогда
							Параметры.Свойство("НомерЧека", НомерЧекаККМ);
							Параметры.Свойство("НомерСмены", НомерСменыККМ);
							СтрокаТовара.РегистрацияПродажи = Истина;
							Записать();

						Иначе
							Сообщить(Ответ);

							мАннулировать = Истина;
							Отказ = Истина;

						КонецЕсли;

					КонецЦикла;
				Иначе
					Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Внесение в денежный ящик" командной панели
// формы. 
//
Процедура ДействияФормыВнесениеВДенежныйЯщик(Кнопка)
//Временно не используется
	ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
	Ответ = "";
	Параметры = Новый Структура;
	Если ИскомаяСтрока <> Неопределено Тогда
		
		глТорговоеОборудование.ОткрытьЯщик(ИскомаяСтрока, Параметры, Ответ);
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		Сумма = 0;
		ВвестиЧисло(Сумма, "Сумма внесения", 15, 2);
		Если Сумма > 0 Тогда
			Параметры.Вставить("Сумма", Сумма);
			глТорговоеОборудование.ВнестиСумму(ИскомаяСтрока, Параметры, Ответ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Изъятие денег" командной панели
// формы.
//
Процедура ДействияФормыИзъятиеДенег(Кнопка)
//Временно не используется
	ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
	Ответ = "";
	Параметры = Новый Структура;
	Если ИскомаяСтрока <> Неопределено Тогда
		
		глТорговоеОборудование.ОткрытьЯщик(ИскомаяСтрока, Параметры, Ответ);
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
		Сумма = 0;
		ВвестиЧисло(Сумма, "Сумма изъятия", 15, 2);
		Если Сумма > 0 Тогда
			Параметры.Вставить("Сумма", Сумма);
			глТорговоеОборудование.ИзъятьСумму(ИскомаяСтрока, Параметры, Ответ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Отчет о смене без гашения" командной панели
// формы.
//
Процедура ДействияФормыОтчетОСменеБезГашения(Кнопка)
	ВыбКассаККМ=Справочники.КассыККМ.НайтиПоНаименованию(Кнопка.Имя);
	Если ВыбКассаККМ<> Неопределено Тогда
	ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(ВыбКассаККМ, "КассаККМ");
	Ответ = "";
	глТорговоеОборудование.ХОтчет(ИскомаяСтрока, Ответ);
    КонецЕсли;
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Кассовая смена" командной панели
// формы.
//
Процедура ДействияФормыДействиеКассоваяСмена(Кнопка)
	ВыбКассаККМ=Справочники.КассыККМ.НайтиПоНаименованию(Кнопка.Имя);
	Если ВыбКассаККМ<> Неопределено Тогда
		ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(ВыбКассаККМ, "КассаККМ");
		//Ответ = "";
		//глТорговоеОборудование.ХОтчет(ИскомаяСтрока, Ответ);
		ФормаКассоваяСменаСписок = Документы.КассоваяСмена.ПолучитьФорму("ФормаСписка");
		ФормаКассоваяСменаСписок.КассаККМШапка = ВыбКассаККМ;
		ФормаКассоваяСменаСписок.Открыть();
	КонецЕсли;
КонецПроцедуры


// Процедура вызывается при выборе пункта подменю "Z-отчет" командной панели
// формы.
//
Процедура ДействияФормыZОтчет(Кнопка)

	Если ЗначениеНеЗаполнено(КассаККМ) Тогда
		Предупреждение("Не выбрана касса ККМ!");
	Иначе
		
		Если Кнопка.Имя <> "ZОтчет1" Тогда
			СтараяКасса = КассаККМ;
			
			Если Кнопка.Имя = "ZОтчет2" Тогда  	
				
				Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
				Иначе 
					КассаККМ = Константы.КассаККМДляНаличныхРасчетов.Получить();
				КонецЕсли;	
				
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляБезнала);
				КонецЕсли;
			
			ИначеЕсли Кнопка.Имя = "ZОтчет3" Тогда 
				
				Если Константы.КассаККМДляКредитныхОпераций.Получить() <> Справочники.КассыККМ.ПустаяСсылка() Тогда 
				    КассаККМ = Константы.КассаККМДляКредитныхОпераций.Получить();
				ИначеЕсли Справочники.КассыККМ.НайтиПоНаименованию("3") <> Справочники.КассыККМ.ПустаяСсылка() Тогда 
					КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("3");
				Иначе 
					Предупреждение("Данной кассы ККМ не существует!");
				КонецЕсли;
					
				Если (Константы.БратьКассуИзНастроекПользователя.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКассаККМ");
				КонецЕсли;
				
				Если (Константы.КассаККМИзСправочникаСопоставлений.Получить()<>Ложь) Тогда 
					КассаККМ = ПолучитьКассуИзСправочникаСопоставлений(Перечисления.ТипыКассККМ.КассаККМДляКредитов);					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли; 
		
		ФормаЗакрытияСмены = Обработки.ЗакрытиеКассовойСмены.ПолучитьФорму();
		ФормаЗакрытияСмены.мПоказыватьФорму = Ложь;
		ФормаЗакрытияСмены.мКассаККМ = КассаККМ;
		ФормаЗакрытияСмены.ОткрытьМодально();
		Ответ = "";

		мСтрокаФР = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");

		Параметры = Новый Структура;
		глТорговоеОборудование.ПолучитьНомерЧекаСмены(мСтрокаФР, Параметры, Ответ);
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		
		
		Если Кнопка.Имя <> "ZОтчет1" Тогда
			
				КассаККМ = СтараяКасса;
			
		КонецЕсли; 

		
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Авторизация" командной панели
// формы.
//
Процедура ДействияФормыАвторизация(Кнопка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПустойПароль", 0);

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь,
	|	НастройкиПользователей.Настройка,
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
	|
	|ГДЕ
	|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
	|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

	ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
	ФормаАвторизации.ДокументОбъект = ЭтотОбъект;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();

	Если ВидПользователя <> Неопределено Тогда

		Ответственный = глТекущийПользователь;
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глТекущийПользователь;
		ПроверитьДоступностьсервисныхФункций(глТекущийПользователь);

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Из терминала сбора данных" командной панели
// формы.
//
Процедура ДействияФормыТоварыИзТерминалаСбораДанных(Кнопка)
	// Временно не используется	
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
		Иначе
			Для Каждого СтрокаДанных Из Данные Цикл
				Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда

					Если ВремТовар = Неопределено
					 Или ВремТовар.Количество() = 0 Тогда
						Продолжить;
					Иначе
						ВремТовар = ВремТовар[0];
					КонецЕсли;
					ЗначениеВыбора= Новый Структура();
					ЗначениеВыбора.Вставить("Номенклатура",        ВремТовар.Номенклатура);
					ЗначениеВыбора.Вставить("ЕдиницаИзмерения",    ВремТовар.ЕдиницаИзмерения);
					ЗначениеВыбора.Вставить("Количество",          СтрокаДанных.Количество);
					ЗначениеВыбора.Вставить("Цена",                0);
					ЗначениеВыбора.Вставить("Характеристика",      ВремТовар.ХарактеристикаНоменклатуры);
					ЗначениеВыбора.Вставить("Серия",               ВремТовар.СерияНоменклатуры);
					ЗначениеВыбора.Вставить("ИзТерминала",         Истина);
					//ОбработкаПодбора(Товары, ЗначениеВыбора);

				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДействияФормыТоварыИзТерминалаСбораДанных()


// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Закрытие чека" командной панели
// формы.
//
Процедура ДействияФормыДействиеЗакрытиеЧека(Кнопка)

	ЗакрытьЧек();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Чек возврата" командной панели
// формы.
//
Процедура ДействияФормыЧекВозврата(Кнопка)

	Если Товары.Количество()>0
	   И Товары[0].РегистрацияПродажи Тогда
		Предупреждение("Необходимо закончить работу с текущим чеком (аннулировать или закрыть чек).");
		Возврат;
	Иначе
		Товары.Очистить();
		ЧекККМНачалоВыбора();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.РегистрацияПродажи = Ложь;
	КонецЕсли;
	
	Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	Если НоваяСтрока И СуммаСтроки > 0 Тогда
		Если РассчитыватьАвтоматическиеСкидки() Тогда

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
			СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			
			//РассчитатьСкидки(Товары, ЭлементыФормы.Товары.ТекущиеДанные, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			
			СуммаРучныхСкидок = 0;
			СуммаАвтоматическихСкидок = 0;
			Для каждого СтрокаТовара ИЗ Товары Цикл

				СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
				СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
				СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

				Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

				Если Разница <> 0 Тогда
					Если СуммаРучныхСкидокСтроки <> 0 Тогда
						СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
					Иначе
						СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
					КонецЕсли;
				КонецЕсли;

				СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
				СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

			КонецЦикла;
			ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

		КонецЕсли;
	КонецЕсли;

	 //Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	мРассчитыватьАвтоматическиеСкидки = Истина;

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Если СтрокаТабличнойЧасти.Номенклатура.Пустая() Тогда
	//	Товары.Удалить(СтрокаТабличнойЧасти);	
	//	Возврат;
	//КонецЕсли;	
	
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	ШтрихКод = "";
	Если НЕ ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаШтрихкода = ПолучитьШтрихКод(СтрокаТабличнойЧасти.Номенклатура,
		                                                 СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                                 СтрокаТабличнойЧасти.СерияНоменклатуры,
		                                                 Справочники.Качество.Новый);

		Если СтрокаШтрихкода <> Неопределено Тогда
			ШтрихКод = СтрокаШтрихкода.Штрихкод;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.ШтрихКод = ШтрихКод;
	СтрокаТабличнойЧасти.Количество = Макс(1, СтрокаТабличнойЧасти.Количество);
			
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		
		Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
		Цена = Структура.Цена;
		РассчитыватьСкидку = Структура.РассчитыватьСкидку;
		Если Цена <> 0 Тогда
			СтрокаТабличнойЧасти.Цена = Цена;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = 0;
		КонецЕсли;
		
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//Если РассчитыватьСкидку = Истина Тогда
		//	РассчитатьСкидки(Товары, СтрокаТабличнойЧасти, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		//КонецЕсли;
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		
		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл
			
			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//РассчитатьСкидки(Товары, СтрокаТабличнойЧасти, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьПродажиККМБольшеОстатка")) и (ВидОперации<>Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда 
		
		Остатки = ПолучитьОстаткиТоваровТСЦ(СтрокаТабличнойЧасти.Номенклатура,СтрокаТабличнойЧасти.Склад);
		Если Остатки.Количество() > 0 Тогда
			Если СтрокаТабличнойЧасти.Количество > Остатки[0].КоличествоСвободныйОстаток Тогда
				Предупреждение("Остаток товара на складе " + Строка(Остатки[0].КоличествоСвободныйОстаток) + "
				|Значение количества будет изменено на реальное!", 3);
				СтрокаТабличнойЧасти.Количество = Остатки[0].КоличествоСвободныйОстаток;
			КонецЕсли;
		Иначе
			Предупреждение("Остаток товара на складе отсутствует", 3);
		КонецЕсли;
		
	КонецЕсли;
	
	Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//РассчитатьСкидки(Товары, СтрокаТабличнойЧасти, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//РассчитатьСкидки(Товары, СтрокаТабличнойЧасти, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СуммаРучныхСкидок = 0;
	СуммаАвтоматическихСкидок = 0;
	Для каждого СтрокаТовара ИЗ Товары Цикл

		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		Если Разница <> 0 Тогда
			Если СуммаРучныхСкидокСтроки <> 0 Тогда
				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
			Иначе
				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
			КонецЕсли;
		КонецЕсли;

		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

	КонецЦикла;
	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

КонецПроцедуры // ТоварыПроцентРучнойСкидкиПриИзменении()

// Процедура - обработчик события "ПередУдалением" табличной части
// "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные.РегистрацияПродажи = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти     = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки              = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	Структура = РаботаБезДисконта(ЭлементыФормы.Товары.ТекущиеДанные, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	//Если РассчитыватьСкидку = Ложь Тогда
	//	мРассчитыватьАвтоматическиеСкидки = Ложь;
	//Иначе
	//	мРассчитыватьАвтоматическиеСкидки = Истина;
	//КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//Если РассчитыватьСкидку = Истина Тогда
		//	РассчитатьСкидки(Товары, ЭлементыФормы.Товары.ТекущиеДанные, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		//КонецЕсли;
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	КонецЕсли;

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Артикул" табличной части
// "Товары".
//
Процедура ТоварыАртикулОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "
	|ВЫБРАТЬ
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Артикул");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаАртикулов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаАртикул = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаАртикулов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаАртикула = ТаблицаАртикулов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаАртикула.Артикул, СтрДлинаАртикул)) <> Текст Тогда
				ТаблицаАртикулов.Удалить(СтрокаАртикула);
			КонецЕсли;
		КонецЦикла;

		ТаблицаАртикулов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаАртикулов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыАртикулОкончаниеВводаТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Штрихкод" табличной части
// "Товары".
//
Процедура ТоварыШтрихКодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "ВЫБРАТЬ
	                           |	Штрихкоды.Владелец КАК Номенклатура,
	                           |	ВЫБОР КОГДА ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ТОГДА
	                           |	NULL ИНАЧЕ
	                           |	Штрихкоды.Владелец.Артикул КОНЕЦ КАК Артикул,
	                           |	Штрихкоды.Штрихкод,
	                           |	Штрихкоды.ЕдиницаИзмерения,
	                           |	Штрихкоды.ХарактеристикаНоменклатуры,
	                           |	Штрихкоды.СерияНоменклатуры,
	                           |	Штрихкоды.Качество
	                           |ИЗ
	                           |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                           |
	                           |ГДЕ
	                           |	(НЕ(ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ))";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Штрихкод");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаШтрихкодов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаШтрихкод = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаШтрихкодов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаШтрихкода = ТаблицаШтрихкодов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаШтрихкода.Штрихкод, СтрДлинаШтрихкод)) <> Текст Тогда
				ТаблицаШтрихкодов.Удалить(СтрокаШтрихкода);
			КонецЕсли;
		КонецЦикла;

		ТаблицаШтрихкодов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаШтрихкодов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда

			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ЭлементыФормы.Товары.ТекущиеДанные.Количество = 1;
			ЭлементыФормы.Товары.ТекущиеДанные.ХарактеристикаНоменклатуры = СтрокаВыбора.ХарактеристикаНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = СтрокаВыбора.СерияНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.Артикул = СтрокаВыбора.Артикул;
			ЭлементыФормы.Товары.ТекущиеДанные.ШтрихКод = СтрокаВыбора.Штрихкод;

			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);

		КонецЕсли;
	Иначе
		Предупреждение("Не найдено товаров указанным началом штрихкода.");
		Элемент.Значение = "";
	КонецЕсли;

КонецПроцедуры // ТоварыШтрихКодОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Структура = РаботаБезДисконта(СтрокаТабличнойЧасти, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("Номенклатура",                         СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//РассчитатьСкидки(Товары, СтрокаТабличнойЧасти, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;
	Иначе// Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;;

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПередНачаломИзменения" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Отказ = Элемент.ТекущиеДанные.РегистрацияПродажи;
	КонецЕсли;

КонецПроцедуры // ТоварыПередНачаломИзменения()

Процедура ДействияФормыВыдачаНакопительнойКарты(Кнопка)
	
	врФорма = ПолучитьФорму("ФормаВыдачиНакопительнойКарты");
	врРезультат = врФорма.ОткрытьМодально();
	
	Если врРезультат <> Неопределено Тогда
		ДисконтнаяКарта = врРезультат;
		ПриИзмененииДисконтнойКарты();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыЗаменаДисконтнойКарты(Кнопка)
	
	Элемент = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Замена дисконтной карты",Истина);
	Попытка
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ДвоичныеДанные = Элемент.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
		Если Не Форма = Неопределено Тогда
			Форма.Открыть();
			Иначе
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			КонецЕсли; 
	Исключение
			Предупреждение("Выбранный файл не является внешней обработкой.
						   |Либо, данная обработка не предназначена для
						   |запуска в этой конфигурации.");
	КонецПопытки; 
	
КонецПроцедуры


Процедура ДействияФормыСчетНаОплату(Кнопка)
	// Вставить содержимое обработчика.
	
	ФормаСчета = Документы.СчетНаОплатуПокупателю.ПолучитьФормуНовогоДокумента(, ЭтотОбъект);
	
	ФормаСчета.Организация = Константы.ОрганизацияДляСчетов.Получить();
	
	СпрКассы = Константы.КассаДляБезналичныхСредств.Получить();
	
	ФормаСчета.СтруктурнаяЕдиница = СпрКассы.Ссылка;
	
	ФормаСчета.ОткрытьМодально();
	
КонецПроцедуры

Процедура ДействияФормыВозвратОтПокупателя(Кнопка)
	// Вставить содержимое обработчика.
	ФормаВозврата = Документы.ВозвратТоваровОтПокупателя.ПолучитьФормуНовогоДокумента(, ЭтотОбъект);
	ФормаВозврата.ОткрытьМодально();
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСумму(КассаВход, Безнал = Ложь, Детально = Ложь)

	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("парамПериодКон", КонецДня(ТекущаяДата()));
	
	Запрос.УстановитьПараметр("КассаККМ", КассаВход);
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РозничнаяВыручка.СуммаОборот, 0) КАК Выручка,
	|	ЕСТЬNULL(РозничнаяВыручка.СуммаБезналОборот, 0) КАК ВыручкаБезнал
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Обороты(&парамПериодНач, &парамПериодКон,, РозничнаяТочка = &КассаККМ) КАК РозничнаяВыручка
	|";
	 
    СуммаВозврат = Запрос.Выполнить().Выбрать();
	СуммаВозврат.Следующий();
	Если НЕ Безнал Тогда
		Возврат СуммаВозврат.Выручка;
	Иначе
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СуммаВозврат.Выручка);
		МассивДанных.Добавить(СуммаВозврат.Выручка - СуммаВозврат.ВыручкаБезнал);
		МассивДанных.Добавить(СуммаВозврат.ВыручкаБезнал);
		Возврат МассивДанных;
	КонецЕсли;
	
КонецФункции // ПолучитьСумму()

Процедура ДействияФормыОприходованиеДСИзККМ(Кнопка)
	
	// Вставить содержимое обработчика.
	ВыбКассаККМ=Справочники.КассыККМ.НайтиПоНаименованию(Кнопка.Имя);	
	Если ВыбКассаККМ<> Неопределено Тогда
		Если (Не(Константы.ИспользоватьЗагрузкуСекций.Получить()) или КредитнаяКасса(ВыбКассаККМ)) Тогда 
			// Старый текст
				ПКООбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
				ЗаполнитьШапкуДокумента(ПКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
				ПКООбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
				ПКООбъект.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
				ПКООбъект.Касса = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяКасса");				
				ПКООбъект.Контрагент = ВыбКассаККМ;
				СуммаПКО = ПолучитьСумму(ВыбКассаККМ);
				ПКООбъект.СуммаДокумента = СуммаПКО;
				ПКООбъект.ПолучитьФорму("ФормаДокумента").Открыть();
			// КонецСтарого текста
		Иначе 
			// Чарчан - делаем в цикле, по подразделениям. 
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Компьютер",ИмяКомпьютера());
			Запрос.УстановитьПараметр("КассаККМ",ВыбКассаККМ);
			Запрос.Текст = "
			|Выбрать Различные Касса, Склад, Организация из РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ
			|Где КассаККМ = &КассаККМ и Компьютер=&Компьютер";
			ТаблицаКассСОСкладами = Запрос.Выполнить().Выгрузить();
			ТаблицаКассПКО = ТаблицаКассСОСкладами.Скопировать();
			ТаблицаКассПКО.Свернуть("Касса,Организация");
			// Делаем в цикле 
			ОтборПКО = новый Структура;
			СписокСкладовПКО = новый СписокЗначений;
			Для каждого КассаПКО из ТаблицаКассПКО Цикл 
				ОтборПКО.Вставить("Касса",КассаПКО.Касса);
				МассивСтрок = ТаблицаКассСОСкладами.НайтиСтроки(ОтборПКО);
				Для каждого Эл из МассивСтрок Цикл
					СписокСкладовПКО.Добавить(Эл.Склад);
				КонецЦикла;
				СуммаПКО = ПолучитьСуммуТСЦ(СписокСкладовПКО, КассаПКО.Касса);
				Если (СуммаПКО<>0 и СуммаПКО<>Неопределено) Тогда			
					ПКООбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
					ЗаполнитьШапкуДокумента(ПКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "ПриемРозничнойВыручки");
					ПКООбъект.Организация = КассаПКО.Организация;
					ПКООбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
					ПКООбъект.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
					ПКООбъект.Касса = КассаПКО.Касса;				
					ПКООбъект.Контрагент = ВыбКассаККМ;
					ПКООбъект.СуммаДокумента = СуммаПКО;
					ПКООбъект.Подразделение = ?(СписокСкладовПКО.Количество()>0,СписокСкладовПКО[0].Значение.Подразделение,Справочники.Подразделения.ПустаяСсылка());
					ПКООбъект.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();
				КонецЕсли;
				ОтборПКО.Очистить();
				СписокСкладовПКО.Очистить();
			КонецЦикла;	
		КонецЕсли;
    КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыИнкассация(Кнопка)
	// Вставить содержимое обработчика.
	
	ДокРКООбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	ДокРКО = ДокРКООбъект.ПолучитьФорму("ФормаДокумента");
	
	ЗаполнитьШапкуДокумента(ДокРКООбъект, глТекущийПользователь, мВалютаРегламентированногоУчета);
	ДокРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
	ДокРКО.Касса = Константы.КассаТерминала.Получить();
	ДокРКО.Открыть();
	
	
КонецПроцедуры

Процедура ПриИзмененииДисконтнойКарты()
	
	Если Товары.Количество() > 0 Тогда
		Если ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда 
			Предупреждение("    В документе существуют продажи!
					       |     Невозможно установить скидки!
						   | Чтобы произвести продажу по данной карте
						   |необходимо сделать возврат на текущий документ
						   |и начать продажу с регистрации дисконтной карты", 3);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;	
	
	Структура = РаботаБезДисконта(ЭлементыФормы.Товары.ТекущиеДанные, Товары);
	РассчитыватьСкидку = Структура.РассчитыватьСкидку;			
	Если РассчитыватьСкидку = Ложь Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Истина;
	КонецЕсли;

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		
		//РассчитатьСкидки(Товары, ЭлементыФормы.Товары.ТекущиеДанные, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		СуммаРучныхСкидок = 0;
		СуммаАвтоматическихСкидок = 0;
		Для каждого СтрокаТовара ИЗ Товары Цикл

			СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
			СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
			СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

			Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

			Если Разница <> 0 Тогда
				Если СуммаРучныхСкидокСтроки <> 0 Тогда
					СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
				Иначе
					СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
				КонецЕсли;
			КонецЕсли;

			СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
			СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		КонецЦикла;
		ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

	КонецЕсли;

КонецПроцедуры

Процедура КнопкаУбратьДисконтнуюКартуНажатие(Элемент)
	
	Если ДисконтнаяКарта <> Справочники.ИнформационныеКарты.ПустаяСсылка() Тогда
		Если  Товары.Количество()=0 Тогда
		ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
		ПриИзмененииДисконтнойКарты();
	     Иначе
		Предупреждение("    В документе существуют продажи!
					       |     Невозможно установить скидки!
						   | Чтобы произвести продажу по данной карте
						   |необходимо сделать возврат на текущий документ
						   |и начать продажу с регистрации дисконтной карты", 3);

		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаУбратьДисконтнуюКарту1Нажатие(Элемент)
	
	Если Не ЗначениеНеЗаполнено(ДисконтнаяКарта) Тогда
		ОткрытьЗначение(ДисконтнаяКарта);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыОтчетПоККМ(Кнопка)
	
	врОтчет = Отчеты.ОтчетОстаткиИОбороты.Создать();
	
	врОтчет.ИмяРегистра = "РозничнаяВыручка";
	
	врОтчет.ЗаполнитьНачальныеНастройки();
	РаскрашиватьИзмерения = Истина;
	ВыводитьИтогиПоВсемУровням = Истина;
	ВыводитьПоказателиВСтроку = Истина;
	врСЗ = Новый СписокЗначений();
	
	ЗапросТО= Новый Запрос;
    ЗапросТО.Текст="ВЫБРАТЬ
|	Компьютер,
|	МодельТорговогоОборудования.ВидТорговогоОборудования,
|	КассаККМ
|ИЗ
|	РегистрСведений.ТорговоеОборудование
|ГДЕ МодельТорговогоОборудования.ВидТорговогоОборудования=&ФискальныйРегистратор";
    ЗапросТО.УстановитьПараметр("ФискальныйРегистратор",Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);
	врСЗ.ЗагрузитьЗначения( ЗапросТО.Выполнить().Выгрузить().ВыгрузитьКолонку("КассаККМ"));			
	
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.ВидСравнения = ВидСравнения.ВСписке;
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.Значение = врСЗ;
	врОтчет.ПостроительОтчета.Отбор.РозничнаяТочка.Использование = Истина;
	
	врФормаОтчета = врОтчет.ПолучитьОсновнуюФорму();
	
	//врФормаОтчета.ТолькоПросмотр = Истина;
	//врФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Доступность = Ложь;
	
	врФормаОтчета.Открыть();

	врФормаОтчета.ЭлементыФормы.ДатаНач.Значение = ТекущаяДата();
	врФормаОтчета.ЭлементыФормы.ДатаКон.Значение = ТекущаяДата();
	
	врФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Функция ПолучитьКассуИзСправочникаСопоставлений(ВидКассы)
	
	Имя = СокрЛП(ИмяКомпьютера());
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВидКассы",ВидКассы);
	Запрос.УстановитьПараметр("ИмяКомпьютера",Имя);
	Запрос.Текст = "Выбрать КассаККМ из 
					|Справочник.СоответствиеКассККМИменамМашин Как СПР
					|Где СПР.ТипКассы = &ВидКассы и Наименование = &ИмяКомпьютера";
					
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.КассаККМ;
	КонецЕсли; 
	
	Возврат Справочники.КассыККМ.ПустаяСсылка();
	
КонецФункции 

Функция ПолучитьКассуДляДенежныхСредствИзСправочникаСопоставлений(ВидКассы)
	
	Имя = СокрЛП(ИмяКомпьютера());
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВидКассы",ВидКассы);
	Запрос.УстановитьПараметр("ИмяКомпьютера",Имя);
	Запрос.Текст = "Выбрать Касса из 
					|Справочник.СоответствиеКассККМИменамМашин Как СПР
					|Где СПР.ТипКассы = &ВидКассы и Наименование = &ИмяКомпьютера";
					
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		Возврат Выб.Касса;
	КонецЕсли; 
	
	Возврат Справочники.Кассы.ПустаяСсылка();
	
КонецФункции 

Процедура УстановитьСкладИзНастроекПользователя(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Склад=Справочники.Склады.ПустаяСсылка();
	Если не СтрокаТабличнойЧасти.Номенклатура.Пустая() Тогда
		Запрос = Новый Запрос();
		//Если (Константы.РаботаСООО.Получить()) Тогда 
		//	Запрос.Текст="Выбрать 
		//	|Склад,
		//	|Сумма(Остаток) как Остаток
		//	|Из
		//	|(
		//	|ВЫБРАТЬ 
		//	|Выбор 
		//	|	Когда 
		//	|	(СкладИП <> ""@"") И (СкладООО <> ""@"")
		//	|Тогда
		//	|	СкладИП
		//	|Иначе 
		//	|	Склад
		//	|Конец  Как Склад,
		//	|Остаток как Остаток
		//	|Из
		//	|(
		//	|	Выбрать
		//	|		Склад как Склад,
		//	|		ЕстьNULL(СкладИП,""@"") как СкладИП, ЕстьNULL(СКЛАДООО,""@"") как СКЛАДООО,
		//	|		Остатки.КоличествоОстаток Как Остаток
		//	|	ИЗ
		//	|		РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура	И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа Объединить Выбрать Различные СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП Где СкладИП в (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов ГДЕ ГруппаДоступности=&Группа))) как остатки
		//	|	Левое соединение 
		//	|		РегистрСведений.СоответствиеСкладовОООскладамИП как Соотв
		//	|	По 
		//	|		Остатки.Склад = Соотв.СкладООО
		//	|	Или 	
		//	|Остатки.Склад = Соотв.СкладИП
		//	|) как ПЗП
		//	|) как ПЗП1
		//	|Сгруппировать по Склад
		//	|УПОРЯДОЧИТЬ ПО Остаток ВОЗР";						
		//Иначе 
			Запрос.Текст="ВЫБРАТЬ Склад, КоличествоОстаток Остаток ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура = &Номенклатура	И Склад В (ВЫБРАТЬ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов	ГДЕ ГруппаДоступности=&Группа))
			|УПОРЯДОЧИТЬ ПО КоличествоОстаток ВОЗР";
		//КонецЕсли;
		Запрос.УстановитьПараметр("Номенклатура",СтрокаТабличнойЧасти.Номенклатура);
		ВыбГруппа=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
		Если ВыбГруппа<>Неопределено Тогда
			Запрос.УстановитьПараметр("Группа",ВыбГруппа);
			СписСклады=Запрос.Выполнить().Выгрузить();
			Если СписСклады<>Неопределено Тогда
				Если 	СписСклады.Количество()>1 Тогда
					ФормаВыбораСклада = ПолучитьФорму("ФормаВыбораСклада", ЭтаФорма);
					сч=0;
					Для каждого стрСклады из СписСклады Цикл
						сч=сч+1;
						стрСтрока=ФормаВыбораСклада.ТаблицаСклады.Добавить();
						стрСтрока.Номер=сч;
						стрСтрока.Склад=стрСклады.Склад;
						стрСтрока.Остаток=стрСклады.Остаток;
					КонецЦикла;
					СтрокаТабличнойЧасти.Склад = ФормаВыбораСклада.ОткрытьМодально();
				ИначеЕсли	СписСклады.Количество()>0 Тогда
					СтрокаТабличнойЧасти.Склад=СписСклады[0].Склад;
				Иначе
					Предупреждение("Данный товар на складах отсутствует");
					СтрокаТабличнойЧасти.Номенклатура=Справочники.Номенклатура.ПустаяСсылка();
					
				КонецЕсли;		
				//Если (Константы.РаботаСООО.Получить()) Тогда 
				//// Установим склад ООО
				//	СтрокаТабличнойЧасти.СкладООО = ЯштПолучитьСкладОООИзСоответствия(Константы.ОООДляРозницы.Получить(),СтрокаТабличнойЧасти.Склад);
				//КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;		
	
		
КонецПроцедуры	

Процедура ДействияФормыПечатьЧекаНаФР(Кнопка)
	// Вставить содержимое обработчика.
	СтрокаФР = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
    ЭтотОбъект.ПечатьЧекаНаФискальномРегистраторе(СтрокаФР.Модель, СтрокаФР.НомерЛУ, КассаККМ);
КонецПроцедуры

Процедура УстановитьПодменюВыбораКассККМ(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора)
	
	Для каждого СтрокаМакетаВСписке Из СписокМакетов Цикл			
		Если  ЭлементМеню.Кнопки.Найти(СтрокаМакетаВСписке.Значение) = Неопределено Тогда
			Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("СправочникСсылка.КассыККМ") Тогда
				ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
				СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
			Иначе
				ЭлементМеню.Кнопки.Добавить(СтрЗаменить(СтрокаМакетаВСписке.Значение.УникальныйИдентификатор(), "-", "_"), ТипКнопкиКоманднойПанели.Действие, 
				СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	КонецПроцедуры
		
Процедура ДействияФормыДействиеВыбратьКассуККМ(Кнопка)
    ВыбКассаККМ=Справочники.КассыККМ.НайтиПоНаименованию(Кнопка.Имя);
	Если ВыбКассаККМ<> Неопределено Тогда
	КассаККМ=ВыбКассаККМ;
	ЭлементыФормы.НадписьКассаККМ.Заголовок = "Касса: " + КассаККМ;
	КонецЕсли;	
КонецПроцедуры 

Процедура ДействияФормыДействиеВыполнитьZОтчет(Кнопка)
	ВыбКассаККМ=Справочники.КассыККМ.НайтиПоНаименованию(Кнопка.Имя);
	Если ВыбКассаККМ<> Неопределено Тогда
    ФормаЗакрытияСмены = Обработки.ЗакрытиеКассовойСмены.ПолучитьФорму();
 	ФормаЗакрытияСмены.мПоказыватьФорму = Ложь;
	ФормаЗакрытияСмены.мКассаККМ = ВыбКассаККМ;
	ФормаЗакрытияСмены.ОткрытьМодально();

	КонецЕсли;	

КонецПроцедуры 	

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка=ложь;
	Элемент.Значение=Обработки.ОстаткиНоменклатурыТСЦ.ПолучитьФорму("Форма").ОткрытьМодально();
	ТоварыНоменклатураПриИзменении(Элемент);

КонецПроцедуры

Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Если не ОтменаРедактирования Тогда
		Если ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура.Пустая() Тогда
			Предупреждение("Товар не введен. Строка будет записана только после ввода товара");
			Отказ=Истина;
		КонецЕсли;	
		
		Если ЭлементыФормы.Товары.ТекущиеДанные.Цена=0 Тогда
			Предупреждение("Цена не введена. Строка будет записана только после ввода цены");
			Отказ=Истина;
		КонецЕсли;	
		
		Если ЭлементыФормы.Товары.ТекущиеДанные.Склад.Пустая()   и не ВидОперации=Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			Предупреждение("Склад не выбран. Строка будет записана только после ввода склада");
			Отказ=Истина;
		КонецЕсли;	
	КонецЕсли;	
	КонецПроцедуры

Функция ДополнитьИзРегистраСоответствия(ТЗСклады)
	Перем ВыбСклад;	
	
	Если ЗначениеНеЗаполнено(ТЗСклады.Колонки.Найти("КассаККМ")) Тогда
		ТЗСклады.Колонки.Добавить("КассаККМ");
	КонецЕсли;	
	Если ЗначениеНеЗаполнено(ТЗСклады.Колонки.Найти("КассаККМКредит")) Тогда
		ТЗСклады.Колонки.Добавить("КассаККМКредит");
	КонецЕсли;	
	Если ЗначениеНеЗаполнено(ТЗСклады.Колонки.Найти("Организация")) Тогда
		ТЗСклады.Колонки.Добавить("Организация");
	КонецЕсли;	

		
	Для каждого строкаСклад из ТЗСклады Цикл
		структураСоответствия=РегистрыСведений.СоответствиеСкладуОрганизацииИКассыККМ.Получить(Новый Структура( "Склад,Компьютер", строкаСклад.Склад,ИмяКомпьютера()));	
		Если структураСоответствия<>Неопределено Тогда
			строкаСклад.КассаККМ=структураСоответствия.КассаККМ;
			Если строкаСклад.КассаККМ=КассаККМ Тогда
				ВыбСклад=строкаСклад.Склад;
			КонецЕсли;	
			строкаСклад.КассаККМКредит=структураСоответствия.КассаККМКредит;
		    строкаСклад.Организация=структураСоответствия.Организация;
		КонецЕсли;	
	КонецЦикла;	
	Возврат ВыбСклад;
	КонецФункции	

Процедура ДействияФормыПредоплатаПоЗаказу(Кнопка)
	мВидДокументаПоАвансу="ПриходныйКассовыйОрдер";
    ФормаСпискаЗаказов=Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,ЭтаФорма);
    ФормаСпискаЗаказов.Открыть();
 	КонецПроцедуры

Процедура ДействияФормыЧекПродажиПоЗаказу(Кнопка)
		Документы.ЧекККМАвтозапчасти.ПолучитьФормуНовогоДокумента().Открыть();
	КонецПроцедуры

Процедура ДействияФормыВозвратАвансаПоЗаказу(Кнопка)
	мВидДокументаПоАвансу="РасходныйКассовыйОрдер";
	ФормаСпискаЗаказов=Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,ЭтаФорма);
    ФормаСпискаЗаказов.Открыть();

	КонецПроцедуры

Функция КредитнаяКасса(ВыбКассаККМ)
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КассаККМ",ВыбКассаККМ);
	Запрос.Текст = "ВЫБРАТЬ
	|КассаККМКредит Из РегистрСведений.СоответствиеСкладуОрганизацииИКассыККМ
	|Где КассаККМКредит = &КассаККМ";
	
	Выб = Запрос.Выполнить().Выбрать();
	Если (Выб.Следующий()) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
Конецфункции

Функция ПолучитьСуммуТСЦ(СкладКасса, Касса, Безнал = Ложь, Детально = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамПериодНач", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("парамПериодКон", КонецДня(ТекущаяДата()));
	
	Запрос.УстановитьПараметр("Касса", Касса);
 	Запрос.УстановитьПараметр("Склад", СкладКасса);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	Запрос.Текст = " 
	|Выбрать 
	|ЕстьNULL(Сумма(Выручка),0) как Выручка,
	|ЕстьNULL(Сумма(ВыручкаБезнал),0) как ВыручкаБезнал
	|Из
	|(
	|	ВЫБРАТЬ
	|		Регистратор,
	|		Выбор Когда ВидДвижения = &Приход 	
	|		Тогда 
	|				ЕСТЬNULL(Сумма, 0) 
	|		Иначе 
	|				-ЕСТЬNULL(Сумма, 0)
	|		Конец КАК Выручка,	
	|		Выбор Когда ВидДвижения = &Приход 	
	|		Тогда
	|				ЕСТЬNULL(СуммаБезнал, 0) 
	|		Иначе 				
	|				-ЕСТЬNULL(СуммаБезнал, 0)
	|		Конец КАК ВыручкаБезнал 				
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка 
	|	Где Период Между &парамПериодНач и &парамПериодКон
	|	И (
	|	( 
	|		ВЫБОР 
	|			КОГДА 
	|				(Регистратор ССЫЛКА Документ.ЧекККМ) ИЛИ (Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах) ИЛИ (Регистратор ССЫЛКА Документ.ЧекККМАвтозапчасти)
	|			ТОГДА
	|				Регистратор.Склад в (&Склад)
	|		КОНЕЦ
	|	)
	|		ИЛИ
	|	( 
	|		ВЫБОР 
	|			КОГДА (Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер) ИЛИ (Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
	|				
	|			ТОГДА
	|				Регистратор.Касса = &Касса
	|		КОНЕЦ
	|	))
	|) как Выручка";
	 
    СуммаВозврат = Запрос.Выполнить().Выбрать();
	СуммаВозврат.Следующий();
	Если НЕ Безнал Тогда
		Возврат СуммаВозврат.Выручка;
	Иначе
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СуммаВозврат.Выручка);
		МассивДанных.Добавить(СуммаВозврат.Выручка - СуммаВозврат.ВыручкаБезнал);
		МассивДанных.Добавить(СуммаВозврат.ВыручкаБезнал);
		Возврат МассивДанных;
	КонецЕсли;
	
КонецФункции

// Процедура рассчитывает скидки в документе.
//
// Параметры:
//  ДокументОбъект             - документ, для которого рассчитываем скидки,
//  ТабличнаяЧастьНоменклатуры - табличная часть номенклатуры документа,
//  ТабличнаяЧастьСкидок       - табличная часть автоматических скидок документа.
//  СтруктураПараметров        - структура, содержащая дополнительные параметря, необходимые для расчета скидок.
//
Процедура РассчитатьСкидки(Товары, СтрокаТЧ, СтруктураПараметров, МинимальныеЦены, СписокФильтров)

	Перем ВидРеализации, СуммаДокументаСтарая, СуммаДокумента, Карта, Номенклатура, ВидОплаты;
	Перем УчитыватьНДС, СуммаВключаетНДС, ДатаСкидок, ВалютаРегламентированногоУчета;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиНаценки");
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическихСкидок");
	ТаблицаТоваров.Колонки.Добавить("УсловиеАвтоматическойСкидки");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");
	
	СтрокТЧ = Товары.Количество();
	Если СтрокТЧ > 0 Тогда
		Стр = ТаблицаТоваров.Добавить();
		Стр.Номенклатура = СтрокаТЧ.Номенклатура;
		Стр.Количество = СтрокаТЧ.Количество;
		Стр.Цена = СтрокаТЧ.Цена;
		Стр.Сумма = СтрокаТЧ.Цена * СтрокаТЧ.Количество;
		Стр.ПроцентСкидкиНаценки = СтрокаТЧ.ПроцентСкидкиНаценки;
		Стр.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		Стр.ПроцентАвтоматическихСкидок = 0;
		Стр.УсловиеАвтоматическойСкидки = Неопределено;
		Стр.ЗначениеУсловияАвтоматическойСкидки = Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезСкидки");
	
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Сч = 1 ПО КоличествоСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Сч];
		СтрокаТаблицы.СуммаБезСкидки = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоКоличеству");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоКоличеству");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоСумме");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоСумме");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоВидуОплаты");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоВидуОплаты");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоДисконтнойКарте");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоДисконтнойКарте");
	ТаблицаТоваров.Колонки.Добавить("ПроцентПоВыбраннойДисконтнойКартойСумме");
	ТаблицаТоваров.Колонки.Добавить("ЗначениеПоВыбраннойДисконтнойКартойСумме");
	ТаблицаТоваров.ЗаполнитьЗначения(0, "ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
	
	ИмяТабличнойЧасти = "Товары";
	СтруктураПараметров.Свойство("ВидРеализации",                        ВидРеализации);
	СтруктураПараметров.Свойство("ДатаСкидок",                           ДатаСкидок);
	СтруктураПараметров.Свойство("ВалютаРегламентированногоУчета",       ВалютаРегламентированногоУчета);
	СтруктураПараметров.Свойство("ВидОплаты"    ,                        ВидОплаты);
	СтруктураПараметров.Свойство("Номенклатура",                         Номенклатура);
	СтруктураПараметров.Свойство("СуммаДокумента",                       СуммаДокумента);
	СтруктураПараметров.Свойство("Карта",                                Карта);
	СтруктураПараметров.Свойство("УчитыватьНДС",                         УчитыватьНДС);
	СтруктураПараметров.Свойство("СуммаВключаетНДС",                     СуммаВключаетНДС);
	
	ДатаСкидок = ?(ЗначениеНеЗаполнено(ДатаСкидок), ДокументОбъект.Дата, ДатаСкидок);
	ИспользованиеСкидок                  = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДатаСкидок);
	ИспользоватьСкидкиПоКоличествуТовара = ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара;
	ИспользоватьСкидкиПоСуммеДокумента   = ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента;
	ИспользоватьСкидкиПоВидуОплаты       = ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты;
	ИспользоватьСкидкиПоДисконтнойКарте  = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;
	ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме = ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме;
	
	Если СуммаДокумента <> 0 Тогда
		
		СуммаСкидокПоКоличеству     = 0;
		СуммаСкидокПоСуммеДокумента = 0;
		СуммаСкидокПоВидуОплаты     = 0;
		СуммаСкидокПоДисконтнойКарте= 0;
		СуммаСкидокПоВыбраннойДисконтнойКартойСумме = 0;
		СкидкиРасчитывались         = Ложь;
		Если ИспользоватьСкидкиПоКоличествуТовара Тогда
			РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара,
			ТаблицаТоваров, СуммаСкидокПоКоличеству, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ИспользоватьСкидкиПоСуммеДокумента Тогда
			РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента,
			ТаблицаТоваров, СуммаСкидокПоСуммеДокумента, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
			Если ИспользоватьСкидкиПоВидуОплаты Тогда
				РасчетСкидокПриПродаже(ДокументОбъект, ВидРеализации, Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты,
				ТаблицаТоваров, СуммаСкидокПоВидуОплаты, СуммаДокумента,ДатаСкидок,ВалютаРегламентированногоУчета, ВидОплаты);
				СкидкиРасчитывались = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ИспользоватьСкидкиПоДисконтнойКарте Тогда
			РасчетСкидокПоДисконтнойКарте(ДокументОбъект, Карта, ТаблицаТоваров,
			СуммаСкидокПоДисконтнойКарте, СуммаДокумента);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		Если ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
			РасчетСкидокПоВыбраннойДисконтнойКартойСумме(ДокументОбъект, Карта, ТаблицаТоваров,
			СуммаСкидокПоВыбраннойДисконтнойКартойСумме, СуммаДокумента);
			СкидкиРасчитывались = Истина;
		КонецЕсли;
		
		//Там же расчет итоговых сумм со скидками.
		Если СкидкиРасчитывались Тогда
			
			Если Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПустаяСсылка()
				ИЛИ Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоМаксимальнойСуммеСкидки Тогда 
				
				ВидМаксимальнойСкидки = Неопределено;
				СуммыСкидок = Новый ТаблицаЗначений;
				СуммыСкидок.Колонки.Добавить("Сумма");
				СуммыСкидок.Колонки.Добавить("Вид");
				
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоКоличеству;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоСуммеДокумента;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоВидуОплаты;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоДисконтнойКарте;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
				СтрокаСуммСкидок       = СуммыСкидок.Добавить();
				СтрокаСуммСкидок.Сумма = СуммаСкидокПоВыбраннойДисконтнойКартойСумме;
				СтрокаСуммСкидок.Вид   = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
				СуммыСкидок.Сортировать("Сумма Убыв");
				
				ВидМаксимальнойСкидки = СуммыСкидок[0].Вид;
				
				Если СуммыСкидок[0].Сумма <> 0 Тогда
					ТаблицаТоваров.Колонки.Удалить("ПроцентАвтоматическихСкидок");
					ТаблицаТоваров.Колонки.Удалить("ЗначениеУсловияАвтоматическойСкидки");
					ТаблицаТоваров.ЗаполнитьЗначения(ВидМаксимальнойСкидки, "УсловиеАвтоматическойСкидки");
					Если ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоКоличеству.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоКоличеству.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоСумме.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоСумме.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоВидуОплаты.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоВидуОплаты.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоВыбраннойДисконтнойКартойСумме");
						ТаблицаТоваров.Колонки.ПроцентПоДисконтнойКарте.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоДисконтнойКарте.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					ИначеЕсли ВидМаксимальнойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
						ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте");
						ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте");
						ТаблицаТоваров.Колонки.ПроцентПоВыбраннойДисконтнойКартойСумме.Имя  = "ПроцентАвтоматическихСкидок";
						ТаблицаТоваров.Колонки.ЗначениеПоВыбраннойДисконтнойКартойСумме.Имя = "ЗначениеУсловияАвтоматическойСкидки";
					КонецЕсли;
					
					Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
						ВалютаТовара = ВалютаРегламентированногоУчета;
					Иначе
						ВалютаТовара = ДокументОбъект.ВалютаДокумента;
					КонецЕсли;
					ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
					МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
					
				Иначе
					
					Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
						Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
						СуммаСкидки = 0;
						
						СуммаСкидки = Сумма * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;
						СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТовара.ПроцентСкидкиНаценки / 100);
						
						СтрокаТовара.Сумма = Сумма - СуммаСкидки;
						Если УчитыватьНДС <> Неопределено
							И УчитыватьНДС Тогда
							//Рассчитаем сумму НДС строки таблицы значений.
							СтрокаТовара.СуммаНДС = РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
							ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоСкидкеТовара Тогда
				
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = 0;
					СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = Неопределено;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПустаяСсылка();
					
					
					Если (СтрокаТоваров.ПроцентПоКоличеству > 0) ИЛИ (СтрокаТоваров.ПроцентПоСумме > 0)
						ИЛИ (СтрокаТоваров.ПроцентПоВидуОплаты > 0) Тогда
						
						Если СтрокаТоваров.ПроцентПоКоличеству > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоКоличеству;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоКоличеству;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
							
							
						ИначеЕсли СтрокаТоваров.ПроцентПоВидуОплаты > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоВидуОплаты;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоВидуОплаты;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
							
						ИначеЕсли СтрокаТоваров.ПроцентПоСумме > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоСумме;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоСумме;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
							
							
						КонецЕсли;
						
						
					ИначеЕсли (СтрокаТоваров.ПроцентПоДисконтнойКарте > 0) ИЛИ (СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме > 0) Тогда
						
						Если СтрокаТоваров.ПроцентПоДисконтнойКарте > 0 Тогда
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоДисконтнойКарте;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоДисконтнойКарте;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
							
						ИначеЕсли СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме > 0 Тогда              
							
							СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоВыбраннойДисконтнойКартойСумме;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
							                          
						КонецЕсли;	                  
						                              
					КонецЕсли;                        
					                                  
					СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
					
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
					
					
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
				МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
				
				
			ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоСуммеСкидокКартыИТовара Тогда
				
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = 0;
					СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = Неопределено;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПустаяСсылка();
					
					
					
					СтрокаТоваров.ПроцентАвтоматическихСкидок = СтрокаТоваров.ПроцентПоКоличеству + СтрокаТоваров.ПроцентПоВидуОплаты + СтрокаТоваров.ПроцентПоСумме
					+ СтрокаТоваров.ПроцентПоДисконтнойКарте + СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
					//СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = СтрокаТоваров.ЗначениеПоКоличеству;
					СтрокаТоваров.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.БезУсловий;
					
					СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
					
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
						
					
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
				МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
					
					
				ИначеЕсли Константы.ИспользованиеСкидок.Получить() = Перечисления.ВидыРасчетаСкидок.ПоМаксимальномуПроцентуСкидки Тогда
					
				Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
						
						
						ТЗ = Новый ТаблицаЗначений;
						ТЗ.Очистить();
						ТЗ.Колонки.Добавить("Вид");
						ТЗ.Колонки.Добавить("Процент");
						ТЗ.Колонки.Добавить("Значение");
						
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоКоличеству;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоКоличеству;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоСумме;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоСумме;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоВидуОплаты;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоВидуОплаты;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоДисконтнойКарте;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоДисконтнойКарте;
						СтрокаТЗ = ТЗ.Добавить();
						СтрокаТЗ.Вид = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме;
						СтрокаТЗ.Процент = СтрокаТоваров.ПроцентПоВыбраннойДисконтнойКартойСумме;
						СтрокаТЗ.Значение = СтрокаТоваров.ЗначениеПоВыбраннойДисконтнойКартойСумме;
						
						ТЗ.Сортировать("Процент УБЫВ");
						
						Если ТЗ.Количество() > 0 Тогда
							СтрокаТоваров.ПроцентАвтоматическихСкидок = ТЗ[0].Процент;
							СтрокаТоваров.ЗначениеУсловияАвтоматическойСкидки = ТЗ[0].Значение;
							СтрокаТоваров.УсловиеАвтоматическойСкидки = ТЗ[0].Вид;
						
							СтрокаТоваров.Сумма = (СтрокаТоваров.Цена * СтрокаТоваров.Количество) - (СтрокаТоваров.Цена * СтрокаТоваров.Количество * СтрокаТоваров.ПроцентАвтоматическихСкидок / 100);
						КонецЕсли;
						
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТоваров.СуммаНДС = РассчитатьСуммуНДС(СтрокаТоваров.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТоваров.СтавкаНДС));
					КонецЕсли;
									
				КонецЦикла;
				
				ТаблицаТоваров.ЗаполнитьЗначения(0,"ПроцентПоКоличеству, ПроцентПоСумме, ПроцентПоВидуОплаты, ПроцентПоДисконтнойКарте, ПроцентПоВыбраннойДисконтнойКартойСумме");
				ТаблицаТоваров.ЗаполнитьЗначения(Неопределено,"ЗначениеПоКоличеству, ЗначениеПоСумме, ЗначениеПоВидуОплаты, ЗначениеПоДисконтнойКарте, ЗначениеПоВыбраннойДисконтнойКартойСумме");
				
				Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
					ВалютаТовара = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаТовара = ДокументОбъект.ВалютаДокумента;
				КонецЕсли;
				ПроверкаМинимальнойЦены(ДокументОбъект, ДатаСкидок, Номенклатура, ТаблицаТоваров,
						МинимальныеЦены, СписокФильтров, УчитыватьНДС, СуммаВключаетНДС, ВалютаТовара);
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл
					Сумма = СтрокаТовара.Цена * СтрокаТовара.Количество;
					СуммаСкидки = 0;
					
					СуммаСкидки = Сумма * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;
					СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТовара.ПроцентСкидкиНаценки / 100);
					
					СтрокаТовара.Сумма = Сумма - СуммаСкидки;
					Если УчитыватьНДС <> Неопределено
						И УчитыватьНДС Тогда
						//Рассчитаем сумму НДС строки таблицы значений.
						СтрокаТовара.СуммаНДС = РассчитатьСуммуНДС(СтрокаТовара.Сумма, УчитыватьНДС, СуммаВключаетНДС,
						ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Для каждого СтрокаТЗ ИЗ ТаблицаТоваров Цикл 
				СтрокаТЧ.ПроцентАвтоматическихСкидок = СтрокаТЗ.ПроцентАвтоматическихСкидок;
				СтрокаТЧ.Сумма = СтрокаТЗ.Сумма;
				СтрокаТЧ.УсловиеАвтоматическойСкидки = СтрокаТЗ.УсловиеАвтоматическойСкидки;
				СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЗ.ЗначениеУсловияАвтоматическойСкидки;
			КонецЦикла;

			//Если УчитыватьНДС <> Неопределено
			//	И УчитыватьНДС Тогда
			//	ТабличнаяЧастьНоменклатуры.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("СуммаНДС"), "СуммаНДС");
			//КонецЕсли;
		КонецЕсли;

КонецПроцедуры // РассчитатьСкидки()

//Получает цену номенклатуры, на которую не распространяется скидка по дисконтной карте.
Функция РаботаБезДисконта(СтрокаТабличнойЧасти, Товары)
	
	Структура = Новый Структура;
	Цена = 0;
	РассчитыватьСкидку = Истина;
	
	ТекТипЦен = Константы.ТипЦенНаПериодАкции.Получить();
	ВалютаДокумента    = мВалютаРегламентированногоУчета;
	Строк = Товары.Количество();
	Если Строк > 0 Тогда
		Цена = ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, Неопределено,
		ТекТипЦен, ДокументОбъект.Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
		ВалютаДокумента, 1, 1, ,Неопределено);
	КонецЕсли;
	Если Цена <> 0 Тогда
		РассчитыватьСкидку = Ложь;
	Иначе
		РассчитыватьСкидку = Истина;
	КонецЕсли;
	
	Структура.Вставить("Цена", Цена);
	Структура.Вставить("РассчитыватьСкидку", РассчитыватьСкидку);
	
	Возврат Структура;
	
КонецФункции

Процедура ДействияФормыВыбратьЗаказ(Кнопка)
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
	ФормаВыбораЗаказа = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	ФормаВыбораЗаказа.Отбор.Контрагент.Установить(Справочники.Контрагенты.НайтиПоКоду("94143"));
	ЗаказПокупателя = ФормаВыбораЗаказа.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда 
		ЗаполнитьЧЕкИзЗаказа(ЗаказПокупателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЧЕкИзЗаказа(ЗаказПокупателя)
	
	Товары.Очистить();
	
	Запрос = Новый Запрос("Выбрать Ссылка из Документ.ЧекККМ Где Проведен и ЗаказПокупателя=&ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если выб.Количество()>0 Тогда 
		Выб.Следующий();
		Предупреждение("По данному заказу уже существует чек " + Выб.Ссылка);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("Выбрать Ссылка из Документ.ОтчетОРозничныхПродажах.Товары Где Ссылка.Проведен и ДокументОснование=&ЗаказПокупателя");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если выб.Количество()>0 Тогда 
		Выб.Следующий();
		Предупреждение("По данному заказу уже была продажа " + Выб.Ссылка);
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ЗаказПокупателя = ЗаказПокупателя;
	Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойСклад");
	Для каждого СтрХ из ЗаказПокупателя.товары Цикл
		СтрУ = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрУ,СтрХ);
		СуммаСтроки = СтрУ.Цена * СтрУ.Количество;
		СтрУ.Склад = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойСклад");
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		//ПриИзмененииНоменклатурыТабЧасти(СтрУ, ЭтотОбъект);
		//ПриИзмененииНоменклатурыТоваров(СтрУ);
		ШтрихКод = "";
		Если НЕ ЗначениеНеЗаполнено(СтрУ.Номенклатура) Тогда
			СтрокаШтрихкода = ПолучитьШтрихКод(СтрУ.Номенклатура,
		                                                 СтрУ.ЕдиницаИзмерения,
		                                                 СтрУ.ХарактеристикаНоменклатуры,
		                                                 СтрУ.СерияНоменклатуры,
		                                                 Справочники.Качество.Новый);

			Если СтрокаШтрихкода <> Неопределено Тогда
				ШтрихКод = СтрокаШтрихкода.Штрихкод;
			КонецЕсли;
		КонецЕсли;

		СтрУ.ШтрихКод = ШтрихКод;
		СтрУ.Количество = Макс(1, СтрУ.Количество);

	//Расчет скидок
		//Если РассчитыватьАвтоматическиеСкидки() Тогда
		//	СуммаСтрокиПослеИзменения = СтрУ.Цена * СтрУ.Количество;

		//	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		//	СтруктураПараметров = Новый Структура;
		//	СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Розничная);
		//	СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		//	СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		//	РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		//	СуммаРучныхСкидок = 0;
		//	СуммаАвтоматическихСкидок = 0;
		//	Для каждого СтрокаТовара ИЗ Товары Цикл

		//		СуммаСтроки = СтрокаТовара.Цена * СтрокаТовара.Количество;
		//		СуммаРучныхСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентСкидкиНаценки / 100;
		//		СуммаАвтоматическихСкидокСтроки = СуммаСтроки * СтрокаТовара.ПроцентАвтоматическихСкидок / 100;

		//		Разница = СуммаСтроки - СуммаРучныхСкидокСтроки - СуммаАвтоматическихСкидокСтроки - СтрокаТовара.Сумма;

		//		Если Разница <> 0 Тогда
		//			Если СуммаРучныхСкидокСтроки <> 0 Тогда
		//				СуммаРучныхСкидокСтроки = СуммаРучныхСкидокСтроки + Разница;
		//			Иначе
		//				СуммаАвтоматическихСкидокСтроки = СуммаАвтоматическихСкидокСтроки + Разница;
		//			КонецЕсли;
		//		КонецЕсли;

		//		СуммаРучныхСкидок = СуммаРучныхСкидок + СуммаРучныхСкидокСтроки;
		//		СуммаАвтоматическихСкидок = СуммаАвтоматическихСкидок + СуммаАвтоматическихСкидокСтроки;

		//	КонецЦикла;
		//	ИтогоСуммаСкидок = СуммаРучныхСкидок + СуммаАвтоматическихСкидок;

		//Иначе // Рассчитать реквизиты табличной части.
		//	РассчитатьСуммуТабЧасти(СтрУ, ЭтотОбъект);
		//КонецЕсли;
		
	КонеЦЦИкла;
	
	
КонецПроцедуры

Процедура ДействияФормыПечать(Кнопка)
	// Вставить содержимое обработчика.
	Документы.ЧекККМ.ПолучитьФормуСписка().ОткрытьМодально();
	
КонецПроцедуры

Функция ПроверитьСуществованиеЧекаВозврата(ЧекККМ)
	Запрос = Новый Запрос("Выбрать Ссылка из Документ.ЧекККМ Где ДокументОснование=&ДО и Проведен");
	ЗАпрос.УстановитьПараметр("ДО",ЧекККМ);
	Выб = Запрос.Выполнить().Выбрать();
	Возврат Выб.Следующий();
КонецФункции

Процедура НомерДляПоискаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = ложь;
	Запрос = Новый Запрос("Выбрать Ссылка из Документ.ЗаказПокупателя Где Контрагент=&Покупатель и номервходящегодокумента подобно ""%""+&номер упорядочить по Ссылка.Дата Убыв");
	Запрос.УстановитьПараметр("Покупатель",Справочники.Контрагенты.НайтиПоКоду("94143  "));
	Запрос.УстановитьПараметр("номер",СокрЛП(НомерДляПоиска));
	Выб = Запрос.Выполнить().Выбрать();
	
	МассивЗАказов = Новый Массив;
	
	Пока ВЫб.Следующий() Цикл
		Если ЗначениеЗаполнено(Выб.Ссылка) Тогда 
			МассивЗаказов.Добавить(Выб.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	ПодразделениеПользователя =  ?(КассаККМ = Справочники.КассыККМ.НайтиПоКоду("00001"),Справочники.Подразделения.НайтиПоКоду("00005"),
		    ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновноеПодразделение"));

	Если МассивЗАказов.Количество()=1 Тогда 
		ЗаполнитьЧЕкИзЗаказа(МассивЗАказов[0]);
		//Сакулина
		Если   МассивЗАказов[0].Подразделение <> ПодразделениеПользователя и ПодразделениеПользователя <> Справочники.Подразделения.ПустаяСсылка() Тогда
			Сообщить("Выбран заказ не по Вашему подразделению. Рекомендуется поправить Подразделение в заказе");
		КонецЕсли;
		//Сакулина

	ИначеЕсли МассивЗАказов.Количество()>1 Тогда
		ФормаВыб = ПолучитьФорму("ФормаВыбораЗаказа");
		ФормаВыб.МАссив = МАссивЗаказов;
		СсылкаВыб = Формавыб.ОткрытьМодально();
		Если ЗначениеЗаполнено(СсылкаВыб) Тогда 
			ЗаполнитьЧЕкИзЗаказа(СсылкаВыб);
			//Сакулина
			Если   СсылкаВыб.Подразделение <> ПодразделениеПользователя и ПодразделениеПользователя <> Справочники.Подразделения.ПустаяСсылка() Тогда
				Сообщить("Выбран заказ не по Вашему подразделению. Рекомендуется поправить Подразделение в заказе");
			КонецЕсли;
			//Сакулина

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Вставить содержимое обработчика.
	Отказ = истина;
КонецПроцедуры

Процедура ДействияФормыСписокОРП(Кнопка)
	// Вставить содержимое обработчика.
	Документы.ОтчетОРозничныхПродажах.ПолучитьФормуСписка().ОткрытьМодально();
КонецПроцедуры

Процедура ДействияФормыВыбратьЗаказЯШТ(Кнопка)
	ФормаВыбораЗаказа = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	ФормаВыбораЗаказа.Отбор.Контрагент.Установить(Справочники.Контрагенты.НайтиПоКоду("94393"));
	Если КассаККМ = Справочники.КассыККМ.НайтиПоКоду("00001") Тогда  // Для Ярославля ищем по всегу Головному подразделению
		ФормаВыбораЗаказа.Отбор.Подразделение.Установить(Справочники.Подразделения.НайтиПоКоду("00005"));
	Иначе
		ФормаВыбораЗаказа.Отбор.Подразделение.Установить(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновноеПодразделение"));
	КонецЕсли;
	ЗаказПокупателя = ФормаВыбораЗаказа.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда 
		ЗаполнитьЧЕкИзЗаказа(ЗаказПокупателя);
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыкнРКО(Кнопка)
	ФормаРКО = Документы.РасходныйКассовыйОрдер.ПолучитьФорму("ФормаСписка");
	ФормаРКО.ОткрытьМодально();
КонецПроцедуры

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
ПерезаполнятьДисплейПокупателя = Истина;
мЦветКасса1 = WebЦвета.Черный;
мЦветКасса2 = WebЦвета.Красный;
мЦветКасса3	= WebЦвета.Зеленый;
//РежимРабочегоСтола = Истина;
спВыборКассыККМ= Новый СписокЗначений;
