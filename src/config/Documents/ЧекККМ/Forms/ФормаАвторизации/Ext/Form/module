Перем мТаблицаПользователей Экспорт;
Перем мПользователь Экспорт;
Перем ДокументОбъект Экспорт;
Перем АвторизацияЗавершенаУспешно;
Перем Пароль;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если мТаблицаПользователей = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
		Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
		Запрос.УстановитьПараметр("ПустойПароль", 0);
        Запрос.УстановитьПараметр("Пользователь", глТекущийПользователь);
		
		Запрос.Текст ="ВЫБРАТЬ
		              |	НастройкиПользователей.Пользователь,
		              |	НастройкиПользователей.Настройка,
		              |	НастройкиПользователей.Значение
		              |ИЗ
		              |	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		              |		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
		              |ГДЕ
		              |	(НастройкиПользователей.Настройка = &ПарольКассираФР
		              |				И НастройкиПользователей.Значение <> &ПустойПароль
		              |			ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР
		              |				И НастройкиПользователей.Значение <> &ПустойПароль)
					  //Смирнов чтоб не вылезало несколько пользователей
		              |	И НастройкиПользователей.Пользователь = &Пользователь
					  //
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	НастройкиПользователей.Пользователь
		              |АВТОУПОРЯДОЧИВАНИЕ";

		мТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	ТаблицаДляСвертки = мТаблицаПользователей.Скопировать();
	ТаблицаДляСвертки.Свернуть("Пользователь");
	Если ТаблицаДляСвертки.Количество() = 0 Тогда
		Предупреждение("Не обнаружено пользователей с установленными паролями кассира или администратора ККМ!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЭлементыФормы.Пользователь.СписокВыбора.ЗагрузитьЗначения(ТаблицаДляСвертки.ВыгрузитьКолонку("Пользователь"));
	Пользователь = ТаблицаДляСвертки[0].Пользователь;

КонецПроцедуры

Функция ВыполнитьАвторизацию(ПолучатьПароли = Ложь)Экспорт

	ПаролиПользователя = мТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Пользователь));

	ВидПользователя = Неопределено;
	АвторизацияЗавершенаУспешно = Ложь;

	Если ЗначениеНеЗаполнено(Пользователь) Тогда
		Предупреждение("Не выбран пользователь!");
		Возврат Неопределено;
	КонецЕсли;

	Если ПолучатьПароли Тогда

		Для каждого СтрокаПароля Из ПаролиПользователя Цикл
			Если НЕ ЗначениеНеЗаполнено(СтрокаПароля.Значение) Тогда
				АвторизацияЗавершенаУспешно = Истина;
				Если СтрокаПароля.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора Тогда
					ВидПользователя = "Администратор: ";
					Прервать;
				Иначе
					ВидПользователя = "Кассир: ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ АвторизацияЗавершенаУспешно Тогда
			Предупреждение("Пользователю: """+ Пользователь + """ не указаны пароли кассира/администратора ККМ");
		КонецЕсли;

	Иначе
		
		Если Пароль = 0 Тогда
			Предупреждение("Введите пароль!");
			Возврат Неопределено;
		КонецЕсли;

		Для каждого СтрокаПароля Из ПаролиПользователя Цикл
			Если СтрокаПароля.Значение = Пароль Тогда
				АвторизацияЗавершенаУспешно = Истина;
				Если СтрокаПароля.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора Тогда
					ВидПользователя = "Администратор: ";
				Иначе
					ВидПользователя = "Кассир: ";
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ АвторизацияЗавершенаУспешно Тогда
			Предупреждение("Пароль неверный!");
		КонецЕсли;

	КонецЕсли;
	Если ВидПользователя <> Неопределено Тогда
		глТекущийПользователь = Пользователь;
		ПараметрыСеанса.ТекущийПользователь = Пользователь;
	КонецЕсли;

	Возврат ВидПользователя;

КонецФункции

Процедура ОсновныеДействияФормыВыполнитьАвторизацию(Кнопка)
	
	Пароль = 0;
	
	Попытка
		Пароль = Число(СтрокаПароль);
	Исключение
		Пароль = 0;
		СтрокаПароль = "";
	КонецПопытки;
	
	
	ВидПользователя = ВыполнитьАвторизацию();
	Если ВидПользователя <> Неопределено Тогда

		Закрыть(ВидПользователя);

	КонецЕсли;

КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "Регистрация";

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("Пользователь", Неопределено);
			
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ДокументОбъект, СтруктураПараметров, Данные);
			СтруктураПараметров.Свойство("Пользователь", Пользователь);
			ВидПользователя = ВыполнитьАвторизацию( Истина);
			Если ВидПользователя <> Неопределено Тогда

				глТекущийПользователь = Пользователь;
				Закрыть(ВидПользователя);

			КонецЕсли;

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Пользователь", Неопределено);
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ДокументОбъект, СтруктураПараметров, Данные);

			СтруктураПараметров.Свойство("Пользователь", Пользователь);
			ВидПользователя = ВыполнитьАвторизацию( Истина);
			Если ВидПользователя <> Неопределено Тогда

				глТекущийПользователь = Пользователь;
				Закрыть(ВидПользователя);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если НЕ АвторизацияЗавершенаУспешно Тогда 
		
		Предупреждение("Необходимо выполнить авторизацию!", 5);
		Отказ = Истина;
		
		
	КонецЕсли;
КонецПроцедуры

АвторизацияЗавершенаУспешно = Ложь;
