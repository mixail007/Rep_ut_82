Перем мВалютаРегламентированногоУчета Экспорт;
Перем мАннулировать Экспорт;
Перем мСтатусПробития Экспорт;
//Перем мТаблицаТоваровРеальная Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Функция ЗапросОстатков(Дата, Склад, ТипЦен, Номенклатура = Неопределено) 
	
	Запрос = Новый Запрос;
	
	//Если (Константы.РаботаСООО.Получить()) Тогда
	//	
	//	ЗапросПоСкладам = новый Запрос;
	//	ЗапросПоСкладам.УстановитьПараметр("Склад",Склад);
	//	ЗапросПоСкладам.Текст = "Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИП=&Склад Объединить Выбрать СкладИП как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИП=&Склад объединить Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладООО=&Склад";
	//	ВыбСкл = ЗапросПоСкладам.Выполнить().Выгрузить();
	//	Если (ВыбСкл.Количество()>0) Тогда
	//		СкладСпис = ВыбСкл.ВыгрузитьКолонку("Склад");	
	//	Иначе 
	//		СкладСпис = Склад;
	//	КонецЕсли;
	//	
	//	Запрос.УстановитьПараметр("Дата", Дата);
	//	Запрос.УстановитьПараметр("СписокСкладов", СкладСпис);
	//	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	//	ТекстЗапроса = "
	//	|ВЫБРАТЬ
	//	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	//	|	СУММА(ТоварыНаСкладах.КоличествоОстаток) КАК КоличествоСвободныйОстаток
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура=&Номенклатура и Склад в (&СписокСкладов)) КАК ТоварыНаСкладах
	//	|	СГРУППИРОВАТЬ ПО
	//	|		ТоварыНаСкладах.Номенклатура";			
	//Иначе 
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		Запрос.УстановитьПараметр("ВыбНоменклатура", Номенклатура);
	
		ТекстЗапроса = " 
		|ВЫБРАТЬ
		|	Подбор.Код                                      КАК Код,
		|	Подбор.ЭтоГруппа                                КАК ЭтоГруппа,
		|	Подбор.ПометкаУдаления                          КАК ПометкаУдаления,
		|	Подбор.Услуга                                   КАК Услуга,
		|	Подбор.Номенклатура                             КАК Номенклатура,
		|	Подбор.Номенклатура.Ссылка						КАК Ссылка,
		|	Подбор.Родитель                                 КАК Родитель,
		|	ВЫБОР
		|		КОГДА Подбор.Цена ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Подбор.Цена											
		|	КОНЕЦ              								КАК Цена,
		|	ВЫБОР
		|		КОГДА Подбор.КоличествоСвободныйОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Подбор.КоличествоСвободныйОстаток
		|	КОНЕЦ              								КАК КоличествоСвободныйОстаток,
		|	Подбор.ЕдиницаИзмерения                         КАК ЕдиницаИзмерения,
		|	Подбор.Номенклатура.Представление               КАК ПредставлениеНоменклатура,
		|	Подбор.ЕдиницаИзмерения.Представление           КАК ПредставлениеЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА Подбор.ЭтоГруппа ТОГДА ""Группа""
		|	КОНЕЦ                                           КАК ПредставлениеНоменклатурнаяГруппа
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	СправочникНоменклатура.Код                               КАК Код,
		|	СправочникНоменклатура.ЭтоГруппа                         КАК ЭтоГруппа,
		|	СправочникНоменклатура.ПометкаУдаления                   КАК ПометкаУдаления,
		|	СправочникНоменклатура.Набор                             КАК Набор,
		|	СправочникНоменклатура.Услуга                            КАК Услуга,
		|	СправочникНоменклатура.Ссылка                            КАК Номенклатура,
		|	СправочникНоменклатура.Родитель                          КАК Родитель,
		|	СУММА(Остатки.КоличествоСвободныйОстаток)                КАК КоличествоСвободныйОстаток,
		|	МАКСИМУМ(СправочникНоменклатура.ЕдиницаХраненияОстатков) КАК ЕдиницаИзмерения,
		|	МАКСИМУМ(ЦеныСрезПоследних.Цена)						 КАК Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ	
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен = &ТипЦен) КАК ЦеныСрезПоследних
		|	ПО
		|		ЦеныСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	(
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ                  КАК Номенклатура,
		|		СУММА(ВЫБОР КОГДА ТоварыНаСкладах.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.КоличествоОстаток КОНЕЦ) КАК КоличествоСвободныйОстаток
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад)  КАК ТоварыНаСкладах
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР КОГДА ТоварыНаСкладах.Номенклатура ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.Номенклатура КОНЕЦ
		|	) КАК Остатки
		|
		|ПО
		|	Остатки.Номенклатура = СправочникНоменклатура.Ссылка
		|
		|ГДЕ
		|	((СправочникНоменклатура.Ссылка.ЭтоГруппа ИЛИ СправочникНоменклатура.Набор)
		|	ИЛИ
		|	(НЕ СправочникНоменклатура.Ссылка.ЭтоГруппа И СправочникНоменклатура.Ссылка.Услуга = Истина)
		|	ИЛИ
		|	(Остатки.КоличествоСвободныйОстаток > 0))
		|	" + ?(Номенклатура <> Неопределено, "И СправочникНоменклатура.Ссылка = &ВыбНоменклатура", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	СправочникНоменклатура.Ссылка
		|
		|) КАК Подбор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подбор.ЭтоГруппа УБЫВ,
		|	Подбор.Номенклатура.Наименование
		|";	
	//КонецЕсли;	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // ЗапросОстатков()

Функция ПолучитьОстаткиТоваров(Номенклатура, Склад=Неопределено) Экспорт 
	
	Дата = ТекущаяДата();
		
	ТипЦен = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойТипЦенПродажи");
	
	Запрос = ЗапросОстатков(Дата, Склад, ТипЦен, Номенклатура);
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

#Если Клиент Тогда

// Функция - Печать чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель торгового оборудования,
//  НомерЛУ                     - номер логического устройства торгового оборудования,
//  КассаККМ                    - элемент справочника "КассыККМ".
//
// Возвращаемое значение:
//  Истина если чек напечатан, в противном случае Ложь.
//
Функция ПечатьЧекаНаФискальномРегистраторе(МодельТорговогоОборудования, НомерЛУ, КассаККМ)
	Перем Ответ;

	СписокТоваров = Новый ТаблицаЗначений;
	СписокТоваров.Колонки.Добавить("Товар");
	СписокТоваров.Колонки.Добавить("Цена");
	СписокТоваров.Колонки.Добавить("Колво");
	СписокТоваров.Колонки.Добавить("Скидка");

	Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
		Стр = СписокТоваров.Добавить();
		Стр.Товар  = СокрЛП(СтрокаТабличнойЧасти.Номенклатура);
		Стр.Цена   = СтрокаТабличнойЧасти.Цена;
		Стр.Колво  = СтрокаТабличнойЧасти.Количество;
		Стр.Скидка = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки + СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок;
	КонецЦикла;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ПризнВозврата = Истина;
	Иначе
		ПризнВозврата = Ложь;
	КонецЕсли;

	СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	СуммаДокументаСоСкидками = Товары.Итог("Сумма");

	// параметры фискального регистратора
	Параметры = Новый Структура();
	Параметры.Вставить("СписокТоваров", СписокТоваров                        );
	Параметры.Вставить("Получено"     , СуммаДокументаСоСкидками);
	Параметры.Вставить("Скидка"       , СуммаДокументаБезСкидок - СуммаДокументаСоСкидками);
	Параметры.Вставить("ЧекНаВозврат" , ПризнВозврата                        );
	Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
	Параметры.Вставить("КассаККМ"     , КассаККМ                             );
	Параметры.Вставить("НомерЛУ"      , НомерЛУ                              );

	глТорговоеОборудование.ПечататьЧек(МодельТорговогоОборудования, Параметры, Ответ);

	Если ПустаяСтрока(Ответ) Тогда
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		Записать();

		// Откроем денежный ящик, если он подключен
		глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);

		Возврат Истина;
	Иначе
//		Сообщить(Ответ);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция - Закрытие чека на фискальном регистраторе
//
// Параметры:
//  МодельТорговогоОборудования - модель торгового оборудования,
//  НомерЛУ                     - номер логического устройства торгового оборудования,
//  КассаККМ                    - элемент справочника "КассыККМ".
//
// Возвращаемое значение:
//  Истина если чек напечатан, в противном случае Ложь.
//
Функция ЗакрытиеЧекаНаФискальномРегистраторе(СтрокаФР, Параметры, Ответ)

	СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	СуммаДокументаСоСкидками = Товары.Итог("Сумма");
	// параметры фискального регистратора
	Параметры.Вставить("Получено"     , СуммаДокументаСоСкидками);
	Параметры.Вставить("Скидка"       , СуммаДокументаБезСкидок - СуммаДокументаСоСкидками);
	Параметры.Вставить("ЧекНаВозврат" , Ложь);
	Параметры.Вставить("НомерСекции"  , Склад.НомерСекции            );
	Параметры.Вставить("КассаККМ"     , КассаККМ                             );


	глТорговоеОборудование.ЗакрытьЧек(СтрокаФР, Параметры, Ответ);

	Если ПустаяСтрока(Ответ) Тогда
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		Записать();

		// Откроем денежный ящик, если он подключен
		глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);

		Возврат Истина;
	Иначе
		Сообщить(Ответ);
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЧека(СтруктураДляПропуска = неопределено) Экспорт

	Если Константы.ПечататьФормуЧекаККМ.Получить() Тогда 
		Форма = ПолучитьФорму("Форма");
		СтруктураДляПропуска = Форма.открытьмодально();
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ОсновнаяОрганизация", ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокЧек.Номер,
	|	ДокЧек.Дата,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.КассаККМ.Представление       КАК Покупатель,
	|	Организация.Ссылка                  КАК Организация,
	|	Организация.Представление           КАК Поставщик,
	|	ДокЧек.СуммаДокумента,
	|	ДокЧек.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Представление      КАК Товар,
	|		Номенклатура.НаименованиеПолное КАК ТоварПолноеНаименование,
	|		Номенклатура.Код                КАК Код,
	|		Номенклатура.Артикул            Как Артикул,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		ПроцентСкидкиНаценки            КАК Скидка,
	|		ПроцентАвтоматическихСкидок     КАК СкидкаАвтоматическая,
	|		Сумма,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ЧекККМ           КАК ДокЧек,
	|	Справочник.Организации КАК Организация
	|
	|ГДЕ
	|	ДокЧек.Ссылка        = &ТекущийДокумент
	|	И Организация.Ссылка = &ОсновнаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказПокупателя) Тогда 
		ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек №"+ЭтотОбъект.Номер+"/"+ЭтотОбъект.ЗаказПокупателя.Номер + " от " + Формат(ЭтотОбъект.дата,"ДЛФ=DD");
	Иначе 
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Чек");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП") + "150044, Ярославская обл., Ярославль г, Базовая ул, дом №3, стр.2";
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказПокупателя) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЗаказПокупателя.Контрагент,ЗаказПокупателя.Дата),"ПолноеНаименование,ЮридическийАдрес") + ПолучитьАдресИзКонтактнойИнформации(ЗаказПокупателя.Контрагент,"Юридический");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                     ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)+
		                                     ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ОбластьСуммы.Параметры.НДС = ПолучитьНДС();
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОтветственныйПредставление = глТекущийПользователь;
	ТабДокумент.Вывести(ОбластьМакета);

	//////////////////////////////
	///// второй экзепляр 
	///////////////////////////
	ПропускОбласти = макет.ПолучитьОбласть("Пропускобласти");
	ТабДокумент.Вывести(ПропускОбласти);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказПокупателя) Тогда 
		ОбластьМакета.Параметры.ТекстЗаголовка = "Товарный чек №"+ЭтотОбъект.Номер+"/"+ЭтотОбъект.ЗаказПокупателя.Номер + " от " + Формат(ЭтотОбъект.дата,"ДЛФ=DD");
	Иначе 
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Чек");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП") + "150044, Ярославская обл., Ярославль г, Базовая ул, дом №3, стр.2";
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказПокупателя) Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЗаказПокупателя.Контрагент,ЗаказПокупателя.Дата),"ПолноеНаименование,ЮридическийАдрес") + ПолучитьАдресИзКонтактнойИнформации(ЗаказПокупателя.Контрагент,"Юридический");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ЕстьСкидки = Ложь;
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ВыборкаСтрокТовары.Скидка + ВыборкаСтрокТовары.СкидкаАвтоматическая <> 0 Тогда
			ЕстьСкидки = Истина;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма          = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.ТоварПолноеНаименование),
		                                     ВыборкаСтрокТовары.Товар, ВыборкаСтрокТовары.ТоварПолноеНаименование)+
		                                     ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество - ВыборкаСтрокТовары.Сумма;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = Сумма;
	ОбластьСуммы.Параметры.НДС = ПолучитьНДС();
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Шапка.СуммаДокумента, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОтветственныйПредставление = глТекущийПользователь;
	ТабДокумент.Вывести(ОбластьМакета);
	
	//Табдокумент.ВывестиГоризонтальныйРазделительСтраниц();    ///Плотников 08.04.2016 не надо печатать пропуск
	////Если СтруктураДляПропуска<>Неопределено Тогда 
	//ОбластьПропуска = Макет.ПолучитьОбласть("Пропуск");
	//ОбластьПропуска.Параметры.Номер = ЭтотОбъект.Номер;
	//ОбластьПропуска.Параметры.Дата = Формат(ЭтотОбъект.Дата,"ДЛФ=DDT");
	//ОбластьПропуска.Параметры.АвтомобильГосНомерАвтомобиля = ?(ЗначениеЗаполнено(СтруктураДляПропуска),СтруктураДляПропуска.Автомобиль,"");
	//ОбластьПропуска.Параметры.Водитель = ?(ЗначениеЗаполнено(СтруктураДляПропуска),СтруктураДляПропуска.Водитель,"");
	//ТабДокумент.Вывести(ОбластьПропуска);
	////КонецЕсли;
	//
	//// Схема
	//СхемаОбласть = Макет.ПолучитьОбласть("Схема");
	//
	//ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
	//ТабДокумент.Вывести(СхемаОбласть);
	
	ТабДокумент.АвтоМасштаб = истина;
	Возврат ТабДокумент;

КонецФункции // ПечатьЧека()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Чек" Тогда
		// Для печати чека нужна настройка организации по умолчанию у пользователя.
		// Без нее печать невозможна.
		Если ЗначениеНеЗаполнено(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяОрганизация")) Тогда
			Предупреждение("Для текущего пользователя """ + СокрЛП(глТекущийПользователь) 
			               + """ не задана основная организация."
			               + Символы.ПС + "Печать чека невозможна."); 
			Возврат;
		КонецЕсли; 

		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьЧека();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Чек","Чек");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

Процедура  ПечатьТоварногоЧека() Экспорт
	КоличествоСтрокТоварногоЧека = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";

	Макет = ПолучитьОбщийМакет("ТоварныйЧек");
	
	// Выводим шапку чека

	ОбластьШапки 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки		= Макет.ПолучитьОбласть("Строка");
	ОбластьПодвала		= Макет.ПолучитьОбласть("Подвал");
	ОбластьПустойСтроки	= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьШапки.Параметры.ДатаДокумента	= Формат(ЭтотОбъект.Дата, "ДЛФ=DD");
	ОбластьПодвала.Параметры.СуммаПрописью	= СформироватьСуммуПрописью(ЭтотОбъект.Товары.Итог("Сумма"), ЭтотОбъект.ТипЦен.ВалютаЦены.Ссылка);
	ТабДокумент.Вывести(ОбластьШапки);

	СчСтрок = 0;
	
	Для каждого Сч Из ЭтотОбъект.Товары Цикл
	
		ОбластьСтроки.Параметры.Ном				= Сч.НомерСтроки;
		ОбластьСтроки.Параметры.Наименование	= Сч.Номенклатура;
		ОбластьСтроки.Параметры.Количество		= Формат(Сч.Количество, "ЧДЦ=3");
		ОбластьСтроки.Параметры.Цена			= Формат(Сч.Цена, "ЧДЦ=2");
		ОбластьСтроки.Параметры.Сумма			= Формат(Сч.Сумма, "ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьСтроки);
		СчСтрок = СчСтрок + 1;
		
	КонецЦикла;
	
	Если КоличествоСтрокТоварногоЧека - СчСтрок > 0 Тогда
		
		Для СчСтр = 1 По КоличествоСтрокТоварногоЧека - СчСтрок Цикл
		
			ТабДокумент.Вывести(ОбластьПустойСтроки);
		
		КонецЦикла; 
		
	
	КонецЕсли; 
	
	ТабДокумент.Вывести(ОбластьПодвала);
	
	ТабДокумент.Напечатать();

	
КонецПроцедуры	

#КонецЕсли

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		ТаблицаТоваров.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла(15,2));
		ТаблицаТоваров.Колонки.Добавить("Количество", ПолучитьОписаниеТиповЧисла(15,3));
		
		Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
			СтрокаТаблицы.Количество = - СтрокаТаблицы.КоличествоДок;
			СтрокаТаблицы.Сумма      = - СтрокаТаблицы.СуммаДок;
		КонецЦикла;
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("Стоимость", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок", ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Сумма;
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
	КонецЦикла;
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			Если СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
			 ИЛИ СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
				СтрокаДвижений.ЗначениеУсловияСкидки = ДисконтнаяКарта;
			Иначе
				СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			КонецЕсли;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Разница = СтрокаТаблицы.Сумма - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Склад, КассаККМ");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		И Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
		И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		ОшибкаПриПроведении("Дисконтная карта, указанная в документе, не является активной!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = ЗначениеНеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = ЗначениеНеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = ЗначениеНеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		//Если СтрокаТаблицы.Номенклатура.Услуга
		//   И (НЕ ПроцентНеЗаполнен
		//	 Или НЕ УсловиеНеЗаполнено
		//	 Или Не ЗначениеНеЗаполнено) Тогда
		//	ОшибкаПриПроведении("На услугу не может быть назначена автоматическая скидка (строка " + СтрокаТаблицы.НомерСтроки + ").", Отказ, Заголовок);
		//	Продолжить;
		//КонецЕсли;


	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	// Движения по документу.

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ЗаписатьСтрокуЛогаКассы("Начало проведения по регистрам. (МодульЧека:ДвижениеПоРегистрам)");
	ТаблицаПоТоварамБезУслуг = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамБезУслуг.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамБезУслуг.Получить(Сч);
		Если СтрокаТаблицы.Услуга Тогда
			 ТаблицаПоТоварамБезУслуг.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// По регистру РозничнаяВыручка.
	НаборДвижений = Движения.РозничнаяВыручка;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.РозничнаяТочка = КассаККМ;
	СтрокаДвижений.Сумма          = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * СуммаДокумента;
	СтрокаДвижений.СуммаБезнал	  = ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * СуммаБезналичнойОплаты;	
	СтрокаДвижений.Подразделение  = Неопределено;

	НаборДвижений.мПериод            = Дата;                              
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РозничнаяВыручка.ВыполнитьПриход();
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.
	
	НаборДвижений = Движения.ТоварыНаСкладах;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
		
	Если Не Отказ Тогда
		Движения.ТоварыНаСкладах.ВыполнитьРасход();
	КонецЕсли;

	ЗаписатьСтрокуЛогаКассы("Движения по продажам.(МодульЧека:ДвижениеПоРегистрам)");
	// ТОВАРЫ ПО РЕГИСТРУ Продажи.

	НаборДвижений   = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,       "ДокументПродажи");
	ТаблицаДвижений.ЗаполнитьЗначения(ДисконтнаяКарта, "ДисконтнаяКарта");
	
	//+++ 25.07.2016 - привязка к Заказу покупателя
	Если не ЗаказПокупателя.Пустая() тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя, "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(ЗаказПокупателя.ДоговорКонтрагента, "ДоговорКонтрагента");
	КонецЕсли;
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
    
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;

	ЗаписатьСтрокуЛогаКассы("Движения по скидкам.(МодульЧека:ДвижениеПоРегистрам)");
	// ТОВАРЫ ПО РЕГИСТРУ СкидкиСПродаж.

	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"ПолучательСкидки");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

	ЗаписатьСтрокуЛогаКассы("Движения по статистике.(МодульЧека:ДвижениеПоРегистрам)");
	// Движения по статистике и персонификации
	
	Если (Услуги и Константы.РаботаСУслугамиПоРегистрам.Получить()) Тогда 
		ДвиженияСтат = Движения.СтатистикаПоУслугамН;
		ДвиженияПерс = Движения.ВыработкаСотрудников;
		Для Каждого Тов Из Товары Цикл
		Если (тов.Номенклатура = Справочники.Номенклатура.ПустаяСсылка()) или (тов.Количество=0) 
		Тогда 
			Продолжить; 
		КонецЕсли;
		Если (((Автомобиль<>Справочники.МаркиИНомераАвтомобилей.ПустаяСсылка()) или (Автомобиль<>Справочники.Автомобили.ПустаяСсылка())) и (Автомобиль<>неопределено)) Тогда
			Движение = ДвиженияСтат.Добавить();
			Движение.МаркаИНомерАвтомобиля		= Автомобиль;
			Движение.Номенклатура				= Тов.Номенклатура;
			Движение.Подразделение				= Подразделение;
			Движение.Активность					= Истина;				
			Движение.Сумма						= ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * Тов.Сумма;
			Движение.Количество					= Тов.Количество;
			Движение.АвтоСкидка					= Тов.ПроцентАвтоматическихСкидок;
			Движение.РучнаяСкидка				= Тов.ПроцентСкидкиНаценки;
			Движение.Цена						= Тов.Цена;
			Движение.Период						= Дата; 					
		КонецЕсли;
		КонецЦикла;
		ДвиженияСтат.Записать();
		
		// Запись по персонификации.
		Если (Константы.ИспользоватьПерсонификацию.Получить() и (((Автомобиль<>Справочники.МаркиИНомераАвтомобилей.ПустаяСсылка()) или (Автомобиль<>Справочники.Автомобили.ПустаяСсылка())) и (Автомобиль<>неопределено))) и (ЗаказНаряд=Документы.ЗаказНаряд.ПустаяСсылка()) Тогда 
		
			СуммаКоэффициентов = 0;
			КоличествоРаботников = 0;
			Для Каждого СтрокаТабл из ТаблицаБригады Цикл
				СуммаКоэффициентов = СуммаКоэффициентов + СтрокаТабл.Коэффициент;	
				КоличествоРаботников = КоличествоРаботников + 1;
			КонецЦикла;
			СуммаКоэффициентов = СуммаКоэффициентов+КоличествоРаботников;
			СуммаКоэффициентов = ?(СуммаКоэффициентов=0,1,СуммаКоэффициентов);
			
			Для Каждого СтрокаТабл из ТаблицаБригады Цикл		
				// Разбиваем работы
				Для Каждого СтрокаТов Из Товары Цикл
							
					Движение 						= ДвиженияПерс.Добавить();
					Движение.Активность	 			= Истина;
					Движение.Работа 				= СтрокаТов.Номенклатура;
					Движение.Период 				= Дата;
					Движение.Автомобиль 			= Автомобиль;
					Движение.Количество 			= СтрокаТов.Количество;
					Движение.СуммаУпр 				= ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) * (СтрокаТов.Цена * СтрокаТов.Количество)/СуммаКоэффициентов*?(СтрокаТабл.Коэффициент=0,1,СтрокаТабл.Коэффициент);
					Движение.СуммаУпрСоСкидкой 		= ?(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1) *(СтрокаТов.Сумма)/СуммаКоэффициентов*?(СтрокаТабл.Коэффициент=0,1,СтрокаТабл.Коэффициент);						
					Движение.Исполнитель 			= СтрокаТабл.Пользователь;
					Движение.Цех  					= Подразделение;
							
				КонецЦикла;
						
			КонецЦикла;
					
			ДвиженияПерс.Записать();	
			
	     КонецЕсли;
	 КонецЕсли;
	 
	 // АЧ. 25.09.2015 - движения по заказам - закрытие
	 
	 Если (не (отказ)) и ЗначениеЗаполнено(ЗаказПокупателя) тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТабПоТоварам.Номенклатура,
		               |	ТабПоТоварам.Количество КАК Количество
		               |ПОМЕСТИТЬ втТаблицаПоТоварам
		               |ИЗ
		               |	&ТабПоТоварам КАК ТабПоТоварам
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втТаблицаПоТоварам.Номенклатура,
		               |	СУММА(втТаблицаПоТоварам.Количество) КАК Количество
		               |ПОМЕСТИТЬ втТаблицаПоТоварам2
		               |ИЗ
		               |	втТаблицаПоТоварам КАК втТаблицаПоТоварам
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втТаблицаПоТоварам.Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказыПокупателейОстатки.ДоговорКонтрагента,
		               |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
		               |	ЗаказыПокупателейОстатки.СтатусПартии,
		               |	ЗаказыПокупателейОстатки.Номенклатура,
		               |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
		               |	ЗаказыПокупателейОстатки.Цена,
		               |	ЗаказыПокупателейОстатки.ЕдиницаИзмерения,
		               |	ЗаказыПокупателейОстатки.ПроцентСкидкиНаценки,
		               |	ЗаказыПокупателейОстатки.ПроцентАвтоматическихСкидок,
		               |	ЗаказыПокупателейОстатки.УсловиеАвтоматическойСкидки,
		               |	ЗаказыПокупателейОстатки.ЗначениеУсловияАвтоматическойСкидки,
		               |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК Количество,
		               |	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
		               |	ЗаказыПокупателейОстатки.СуммаУпрОстаток КАК СуммаУпр,
		               |	ЕСТЬNULL(втТаблицаПоТоварам2.Количество, 0) КАК КоличествоВЧеке,
		               |	ВЫБОР
		               |		КОГДА ЗаказыПокупателейОстатки.КоличествоОстаток > 0
		               |			ТОГДА ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток / ЗаказыПокупателейОстатки.КоличествоОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ЦенаВзаиморасчетов,
		               |	ВЫБОР
		               |		КОГДА ЗаказыПокупателейОстатки.КоличествоОстаток > 0
		               |			ТОГДА ЗаказыПокупателейОстатки.СуммаУпрОстаток / ЗаказыПокупателейОстатки.КоличествоОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ЦенаУпр
		               |ИЗ
		               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
		               |			,
		               |			ЗаказПокупателя = &ЗаказПокупателя
		               |				И Номенклатура В (&СписокНоменклатуры)) КАК ЗаказыПокупателейОстатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоТоварам2 КАК втТаблицаПоТоварам2
		               |		ПО ЗаказыПокупателейОстатки.Номенклатура = втТаблицаПоТоварам2.Номенклатура";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
		Запрос.УстановитьПараметр("ТабПоТоварам", ТаблицаПоТоварам);
		Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаПоТоварам.выгрузитьКолонку("Номенклатура"));


	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
	
   		СуммаДокумента = 0;
		Пока Выборка.Следующий() Цикл
			Движение = Движения.ЗаказыПокупателей.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			ЗаполнитьЗначенияСвойств(Движение, Выборка);
			Движение.Количество = ?(Выборка.Количество<Выборка.КоличествоВЧеке,Выборка.Количество,Выборка.КоличествоВЧеке);
			Движение.СуммаВзаиморасчетов = Выборка.ЦенаВзаиморасчетов*?(Выборка.Количество<Выборка.КоличествоВЧеке,Выборка.Количество,Выборка.КоличествоВЧеке);
			Движение.СуммаУпр = Выборка.ЦенаУпр*?(Выборка.Количество<Выборка.КоличествоВЧеке,Выборка.Количество,Выборка.КоличествоВЧеке);
			//СуммаДокумента = СуммаДокумента + Выборка.СуммаВзаиморасчетов; //для Структуры подчиненности
		КонецЦикла;
	
		//+++( 06.11.2014 закрытие резервов по Размещению заказов покупателей
		ТаблицаПоРазмещению = ПодготовитьТаблицуПоРазмещениюУпр(ТаблицаПоТоварам);
		для i=0 по ТаблицаПоРазмещению.Количество()-1 цикл
			Движение = Движения.РазмещениеЗаказовПокупателей.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход; // закрывает в 0 именно этот заказ по всем товарам, которые еще числятся в 
			Движение.Период = Дата;
			ЗаполнитьЗначенияСвойств(Движение, ТаблицаПоРазмещению[i]);
		КонецЦикла;
	КонецЕсли;
	//+++)
	
КонецПроцедуры	// ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда

		// Заполним вид операции.
		ВидыОперацийЧек = Перечисления.ВидыОперацийЧекККМ;
		Если Основание.ВидОперации = ВидыОперацийЧек.Продажа Тогда
			ВидОперации = ВидыОперацийЧек.Возврат;
			ЧекККМ = Основание;
		Иначе
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		СуммаБезналичнойОплаты = Основание.СуммаБезналичнойОплаты;
		БезналичнаяОплата = Основание.БезналичнаяОплата;
		СуммаНаличнойОплаты = Основание.СуммаДокумента - Основание.СуммаБезналичнойОплаты;

		КассаККМ = Основание.КассаККМ;
		

		// Скопируем состав.
		Товары.Загрузить(Основание.Товары.Выгрузить());

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Товары.Итог("Сумма");
    ЗаписатьСтрокуЛогаКассы("Перед записью чека (установка нового номера).(МодульЧека:ПередЗаписью)");
	Если (Константы.РозничнаяБаза.Получить() = Истина) и (ЭтоНовый()) Тогда 
		ТекущееПодразделение = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновноеПодразделение");
		Если (ТекущееПодразделение<>Справочники.Подразделения.ПустаяСсылка()) Тогда 
			УстановитьНовыйНомер(СокрЛП(ТекущееПодразделение.ПрефиксИБ));
		Иначе 
			УстановитьНовыйНомер(СокрЛП(ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация").Префикс));
		КонецЕсли;
	КонецЕсли;
	ЗаписатьСтрокуЛогаКассы("Номер установлен.(МодульЧека:ПередЗаписью)");
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры // ПередЗаписью

Функция ПечатьЧекаНаФР(Модель, НомерЛУ, КассаККМ)

	Перем ЭтоВозврат;
	Перем Параметры;
	Перем Получено;
	Перем Скидка;
	Перем ОписаниеТипаСтрока;
	Перем ОписаниеТипаЧисло;
	Перем СписокТоваров;
	Перем ЭлементСписка;
	Перем КоличествоСтрокМ1;
	Перем СтрокаФР;
	Перем Товар;
	Перем Ответ;

	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло  = Новый ОписаниеТипов("Число",
	                                         Новый КвалификаторыЧисла(
	                                             10,
	                                             3,
	                                             ДопустимыйЗнак.Неотрицательный));
	СписокТоваров      = Новый ТаблицаЗначений();
	Ответ              = "";

	Если мАннулировать Тогда
		глТорговоеОборудование.АннулироватьЧек(Модель, Ответ);
		Если ПустаяСтрока(Ответ) Тогда
			мАннулировать = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(Ответ) Тогда
	
			// Формирование списка товаров для чека
			СписокТоваров.Колонки.Добавить("Товар");
			СписокТоваров.Колонки.Добавить("Цена");
			СписокТоваров.Колонки.Добавить("Колво");
			СписокТоваров.Колонки.Добавить("Скидка");
			Для Каждого Товар Из Товары Цикл
				ЭлементСписка            = СписокТоваров.Добавить();
				ЭлементСписка.Товар      = СокрЛП(Товар.Номенклатура.Код)+" "+СокрЛП(Товар.Номенклатура)+?(ЗначениеНеЗаполнено(Товар.Номенклатура.Артикул),""," ("+СокрЛП(Товар.Номенклатура.Артикул)+")");
				ЭлементСписка.Цена       = Товар.Цена;
				ЭлементСписка.Колво      = Товар.Количество;
				ЭлементСписка.Скидка     = Товар.ПроцентАвтоматическихСкидок 
				                               + Товар.ПроцентСкидкиНаценки;
			КонецЦикла;

			СтрокаФР   = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
			Получено   = Товары.Итог("Сумма");
			Скидка     = ПолучитьСуммуДокументаБезСкидки(Товары) - Получено;
			ЭтоВозврат = (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
			Параметры  = Новый Структура();
			Параметры.Вставить("СписокТоваров",  СписокТоваров);
			Параметры.Вставить("ПолученоНал",    СуммаНаличнойОплаты);
			Параметры.Вставить("ПолученоБезНал", СуммаБезналичнойОплаты);
			Параметры.Вставить("ЧекНаВозврат",   ЭтоВозврат);
			Параметры.Вставить("НомерСекции",    Склад.НомерСекции);
			Параметры.Вставить("СкладНаименование",  Склад.Наименование);
			Параметры.Вставить("НДС",    		 18);
			глТорговоеОборудование.ПечататьЧек(СтрокаФР, Параметры, Ответ);
           
	КонецЕсли; // мАннулировать

	Если ПустаяСтрока(Ответ) Тогда
		// Чек напечатан, устанавливаем значения реквизитов
		Параметры.Свойство("НомерЧека",  НомерЧекаККМ);
		Параметры.Свойство("НомерСмены", НомерСменыККМ);
		ЧекПробитНаККМ = Истина;
		// И открываем, в случае необходимости, денежный ящик
	//	глТорговоеОборудование.ОткрытьДенежныйЯщик(КассаККМ);
	КонецЕсли;

	Возврат Ответ;

КонецФункции // ПечатьЧекаНаФР()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
    ЗаписатьСтрокуЛогаКассы("Перед проведением чека.(МодульЧека:ОбработкаПроведения)");

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
 	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"                 , "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	// Проверим допустимость для пользователя цен документа
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	
	Если ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	Иначе
		СтруктураПолей.Вставить("КоличествоДок"             , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	КонецЕсли;
	
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки", "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда

		РезультатЗапросаПоТоварамОснования = СформироватьЗапросПоТабличнойЧасти(ЧекККМ, "Товары", СтруктураПолей);
		ТаблицаТоваровДокумента = РезультатЗапросаПоТоварам.Выгрузить();
		ТаблицаТоваровДокумента.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		ТаблицаТоваровДокументаОснования = РезультатЗапросаПоТоварамОснования.Выгрузить();
		ТаблицаТоваровДокументаОснования.Свернуть("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры", "КоличествоДок");
		Для Каждого СтрокаТаблицыТоваровДокумента Из ТаблицаТоваровДокумента Цикл
			СтрокиОснования = ТаблицаТоваровДокументаОснования.НайтиСтроки(
			                 Новый Структура ("Номенклатура, Цена, ХарактеристикаНоменклатуры, СерияНоменклатуры",
			                                   СтрокаТаблицыТоваровДокумента.Номенклатура,
			                                   СтрокаТаблицыТоваровДокумента.Цена,
			                                   СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры,
			                                   СтрокаТаблицыТоваровДокумента.СерияНоменклатуры));

			Продано = 0;
			Если СтрокиОснования.Количество() > 0 Тогда
				Если СтрокиОснования[0].КоличествоДок >= СтрокаТаблицыТоваровДокумента.КоличествоДок Тогда
					Продолжить;
				Иначе
					Продано = СтрокиОснования[0].КоличествоДок;
				КонецЕсли;
			КонецЕсли;

			ОшибкаПриПроведении("По документу основанию товара """ + СтрокаТаблицыТоваровДокумента.Номенклатура
			                    + """ по цене """ + ФорматСумм(СтрокаТаблицыТоваровДокумента.Цена, мВалютаРегламентированногоУчета)+ """ "
			                    + Символы.ПС + ? (НЕ ЗначениеНеЗаполнено(СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры),
			                         "с характеристикой """ + СтрокаТаблицыТоваровДокумента.ХарактеристикаНоменклатуры + """", "" )
			                    + ? (НЕ ЗначениеНеЗаполнено(СтрокаТаблицыТоваровДокумента.СерияНоменклатуры),
			                         "с серией """ + СтрокаТаблицыТоваровДокумента.СерияНоменклатуры + """", "" )
			                    + "продано """ + Продано +""", возвращается от покупателя """ 
			                    + СтрокаТаблицыТоваровДокумента.КоличествоДок + """.", Отказ, Заголовок);

		КонецЦикла;

	КонецЕсли;
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                        Отказ, Заголовок);

	// Подготовим таблицу скидок для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок( ТаблицаПоТоварам, СтруктураШапкиДокумента);

	// Создание документов перемещения.
	//Если (Константы.РаботаСООО.Получить() и ВидОперации<>Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда
	//	// Создадим таблицу товаров из склада
	//	ТаблицаТоваров = СоздатьТаблицуТоваровДляСписанияССкладовООО();
	//	Если (ТаблицаТоваров.Количество()>0) Тогда
	//		ЯштСоздатьДокументыВнутреннегоПеремещения(ТаблицаТоваров,глТекущийПользователь, Отказ, Номер, КассаККМ);
	//	КонецЕсли;
	//КонецЕсли;
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, Отказ, Заголовок);

	КонецЕсли; 

	#Если Клиент Тогда
	Если Не(Отказ) И Не ЧекПробитНаККМ Тогда

		ЗаписатьСтрокуЛогаКассы("*******Начало вывода чека на ФР*******.(МодульЧека:ОбработкаПроведения)");
		ЗаписатьСтрокуЛогаКассы("Найти ФР.(МодульЧека:ОбработкаПроведения)");
		СтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");

		Если СтрокаФР <> Неопределено Тогда
			ЗаписатьСтрокуЛогаКассы("Нашли ФР.(МодульЧека:ОбработкаПроведения)");
			Параметры = Новый Структура;
			Параметры.Вставить("НомерСекции", Склад.НомерСекции);
			Параметры.Вставить("КассаККМ"   , КассаККМ);
			Ответ = "";

			Если глТорговоеОборудование = Неопределено Тогда

				ОшибкаПриПроведении("Торговое оборудование не подключено!" , Отказ, Заголовок);
				Возврат;

			//ИначеЕсли Склад.НомерСекции = 0 Тогда

			//	ОшибкаПриПроведении("У склада не указан номер секции!" , Отказ, Заголовок);
			//	Возврат;

			КонецЕсли;

			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();

			ЗаписатьСтрокуЛогаКассы("Печать ЧЕКА на ФР.(МодульЧека:ОбработкаПроведения)");
			Ответ     = ПечатьЧекаНаФР(СтрокаФР.Модель,
				                           СтрокаФР.НомерЛУ,
				                           КассаККМ);
										   
            ЗаписатьСтрокуЛогаКассы("(МодульЧека:ОбработкаПроведения). Ответ после печати " + Строка(Ответ));
			
			    Ошибки = "";

				Если   не ПустаяСтрока(Ответ) Тогда

								// Чек напечатать не удалось
					Если Не ПустаяСтрока(Ошибки) Тогда
							Ошибки = Ошибки + "
							                  |";
					КонецЕсли;
					Ошибки = Ошибки + " - Не удалось напечатать чек: " + Ответ;
					// Попытка распровести документ
					Попытка
						Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						Ошибки = Ошибки + "
						                  | - Не удалось отменить проведение документа.";
						Отказ = Истина;
					КонецПопытки;
                Иначе

					// Чек напечатан, пытаемся записать документ с обновлёнными
					// значениями реквизитов
					Попытка
						ЗаписатьСтрокуЛогаКассы("Записать чек после ошибки. (МодульЧека:ОбработкаПроведения)");
						Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ЗаписатьСтрокуЛогаКассы("Не удалось записать чек после ошибки. (МодульЧека:ОбработкаПроведения)");
						Если Не ПустаяСтрока(Ошибки) Тогда
							Ошибки = Ошибки + "
							                  |";
						КонецЕсли;
						Ошибки = Ошибки + " - Не удалось записать чек с признаком ""ЧекПробитНаККМ"" = Истина.";
						Отказ  = Истина;
					КонецПопытки;

				КонецЕсли; // ПустаяСтрока(Ответ)

		КонецЕсли;

	КонецЕсли;
	#КонецЕсли

КонецПроцедуры	// ОбработкаПроведения()

Функция ПровестиИРаспечататьЧек(Отказ, ФормаДокумента) Экспорт
	
	Результат = Истина;
	Заголовок = "Проведение и пробитие документа """ + СокрЛП(Ссылка) + """: ";

    Попытка
		ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	Исключение
		ОшибкаПриПроведении = "Ошибка при попытке проведения документа!";
		Отказ     = Истина;
		Результат = Ложь;
		Возврат Результат;
	КонецПопытки;
	
	Если ЧекПробитНаККМ Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Если Не ЧекПробитНаККМ И ЭтотОбъект.Проведен Тогда
		
		Отказ = Ложь;
		
		ВидКассы = ПодключаемоеОборудованиеУниверсальныйДрайверКлиент.ПолучитьВидКассы(КассаККМ, ИмяКомпьютера());			
		Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
			СтрокаФР = глТорговоеОборудование.млФР.Найти(КассаККМ, "КассаККМ");
		иначе
			СтрокаФР = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
		КонецЕсли;
		
		Если СтрокаФР <> Неопределено Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("НомерСекции", Склад.НомерСекции);
			Параметры.Вставить("КассаККМ"   , КассаККМ);
			Ответ = "";
			
			Если глТорговоеОборудование = Неопределено Тогда
				
				ОшибкаПриПроведении("Торговое оборудование не подключено!" , Отказ, Заголовок);
				Результат = Ложь;
				Возврат Результат;
				
			ИначеЕсли Склад.НомерСекции = 0 Тогда
				
				ОшибкаПриПроведении("У склада не указан номер секции!" , Отказ, Заголовок);
				Результат = Ложь;
				Возврат Результат;
				
			КонецЕсли;
			
			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
			
			Если ВидКассы = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор тогда
				Ответ     = ПечатьЧекаНаФР(СтрокаФР.Модель,
				СтрокаФР.НомерЛУ,
				КассаККМ);
			Иначе
				ДопДанные = Новый Структура;
				
				ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(КассаККМ);
				Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
					Ответ = "Кассовая смена не открыта";
					Отказ = Истина;
					Результат = Ложь;
				КонецЕсли;
				
				//ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(РезультатВыбора.Значение.КассаККМ);
						
				ПорядокНалогообложения = Неопределено;
				ИспользуемыеСН = ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения);
				
				ДопДанные.Вставить("ПорядокНалогообложения", ПорядокНалогообложения);
				Если не отказ тогда
					Результат = ФискализироватьЧек(КассаККМ, ДопДанные, Ответ, Отказ);
				КонецЕсли;
				Если Результат тогда
					Ответ = "";
				КонецЕсли;
			КонецЕсли;
			
			Ошибки = "";
			
			Если НЕ ПустаяСтрока(Ответ) Тогда
				
				Результат = Ложь;
				// Чек напечатать не удалось
				Если Не ПустаяСтрока(Ошибки) Тогда
					Ошибки = Ошибки + "
					|";
				КонецЕсли;
				Ошибки = Ошибки + " - Не удалось напечатать чек: " + Ответ;
				// Попытка распровести документ
				Попытка
					Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					Ошибки = Ошибки + "
					| - Не удалось отменить проведение документа.";
					Отказ = Истина;
				КонецПопытки;
			Иначе
								
				// Чек напечатан, пытаемся записать документ с обновлёнными
				// значениями реквизитов
				Попытка
					Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Если Не ПустаяСтрока(Ошибки) Тогда
						Ошибки = Ошибки + "
						|";
					КонецЕсли;
					Ошибки = Ошибки + " - Не удалось записать чек с признаком ""ЧекПробитНаККМ"" = Истина.";
					Отказ  = Истина;
					Результат = Ложь;
				КонецПопытки;
			КонецЕсли; // ПустаяСтрока(Ответ)
			
		Иначе
			Если РольДоступна("ПолныеПрава") Тогда
				Результат = Ложь;
				Сообщить("Не удалось найти подключенный фискальный регистратор для выбранной кассы ккм. См. регистр сведений Торговое оборудование.");
			КонецЕсли;
		КонецЕсли;
		
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьДанныеДляФискализацииЧека(ЧекККМ, ОбщиеПараметры, ДопДанные)
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();

	ОрганизацияЧека = ЧекККМ.КассаККМ.Владелец;

	// Шапка
	ОбщиеПараметры.ДокументОснование = ЧекККМ;
	ОбщиеПараметры.ТипРасчета = ?(ЧекККМ.ВидОперации=Перечисления.ВидыОперацийЧекККМ.Продажа,
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"),
		ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
//	ОбщиеПараметры.Кассир = ЧекККМ.Ответственный.Наименование;
	ОбщиеПараметры.Кассир = глТекущийПользователь.Наименование;
	
	
	ОбщиеПараметры.Электронно = Ложь; // Чек будет напечатан
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Ложь;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	
	ОбщиеПараметры.ОтправительEmail = ?(СокрЛП(АдресЭлектроннойПочтыПокупателя)<>"","info@yst.ru", Неопределено);
	ОбщиеПараметры.ПокупательEmail  = ?(СокрЛП(АдресЭлектроннойПочтыПокупателя)<>"",СокрЛП(АдресЭлектроннойПочтыПокупателя), Неопределено);
	тел=СтрЗаменить(ТелефонПокупателя," ","");
	тел=СтрЗаменить(ТелефонПокупателя,"+","");
	тел=СтрЗаменить(ТелефонПокупателя,"(","");
	тел=СтрЗаменить(ТелефонПокупателя,")","");
	тел=СтрЗаменить(ТелефонПокупателя,"-","");
	
	ОбщиеПараметры.ПокупательНомер  = ?(СокрЛП(тел)<>"",СокрЛП(тел), Неопределено);

	
	ПорядокНалогообложения = Неопределено;
	ДопДанные.Свойство("ПорядокНалогообложения", ПорядокНалогообложения);
//	ОбщиеПараметры.КодСистемыНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложения(ОрганизацияЧека, ЧекККМ.Дата, ПорядокНалогообложения);  
	// Оплаты	
	//ОплатыЧека = ЧекККМ.ПолучитьОбъект().ИтогиОплатПоТипам();
	//СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.Наличные);
	СуммаТипаОплаты = СуммаНаличнойОплаты;
	Если СуммаТипаОплаты <> 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 0);
		СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	//СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	СуммаТипаОплаты = СуммаБезналичнойОплаты;
	Если СуммаТипаОплаты <> 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", 1);
		СтрокаОплаты.Вставить("Наименование", "Платежная карта");
		СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	//СуммаТипаОплаты = ОплатыЧека.Получить(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	//Если СуммаТипаОплаты <> 0 И СуммаТипаОплаты <> Неопределено Тогда
	//	СтрокаОплаты = Новый Структура();
	//	СтрокаОплаты.Вставить("ТипОплаты", 2);
	//	СтрокаОплаты.Вставить("Наименование", "Банковский кредит");
	//	СтрокаОплаты.Вставить("Сумма", СуммаТипаОплаты);
	//	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	//КонецЕсли;
	// Товарные позиции
	ЕстьУслуги=Ложь;
	Для Каждого СтрокаТовара Из ЧекККМ.Товары Цикл
		СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		Если СтрокаТовара.Номенклатура.Услуга Тогда
			ЕстьУслуги=Истина;
		КонецЕсли;
		// Обязательные поля
		СтрокаЧека.Наименование = СокрЛП(СтрокаТовара.Номенклатура.Наименование) + 
			//ФормированиеПечатныхФорм.ПредставлениеСерий(СтрокаТовара, "ХарактеристикаНоменклатуры", "СерияНоменклатуры") +
			" " + Строка(СтрокаТовара.ЕдиницаИзмерения); // Наименование предмета расчета
		СтрокаЧека.Количество = СтрокаТовара.Количество; // Количество предмета расчета 
		СтрокаЧека.Цена = СтрокаТовара.Цена; // Цена без учета скидок и наценок
		СтрокаЧека.Сумма = СтрокаТовара.Сумма; // Cтоимость предмета расчета с учетом скидок и наценок
		СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаТовара.Номенклатура.СтавкаНДС,ОрганизацияЧека); // Cтавка НДС в %
		СтрокаЧека.Штрихкод = СокрЛП(СтрокаТовара.ШтрихКод); // Штрихкод
		СтрокаЧека.НомерСекции = Склад.НомерСекции; // НомерСекции
		// Дополнительные реквизиты начиная с ФФД 1.1
		СтрокаЧека.КодПризнакаСпособаРасчета = 4;  // Код признака способа расчета (Таблица 25 документа ФФД)
		СтрокаЧека.КодПризнакаПредметаРасчета = ?(СтрокаТовара.Номенклатура.Услуга,4,1); // Код признака предмета расчета   (Таблица 25 документа ФФД)

		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
 		СтрокаЧека.ПризнакПредметаРасчета = МенеджерОборудованияВызовСервера.ОпределитьПризнакПредметаРасчета(СтрокаТовара.Номенклатура);
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	КонецЦикла;
   	ОбщиеПараметры.КодСистемыНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложения(ОрганизацияЧека, ЧекККМ.Дата, ЕстьУслуги,ПорядокНалогообложения);  

КонецПроцедуры

Функция ФискализироватьЧек(ФУ, ДопДанные, Ответ, Отказ)
	
	Ответ = "";
	Отказ = Ложь;
	Результат = Истина;
	
	ПараметрыЧека = Неопределено;
	ПодготовитьДанныеДляФискализацииЧека(Ссылка, ПараметрыЧека, ДопДанные);
	
	ОбъектДрайвера = Неопределено;
	ОбработкаОбслуживания = Неопределено;
	
	//ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
	//
	//ОшибкаТО = ОбработкаОбслуживания.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
	ИскомаяСтрока = глТорговоеОборудование.млККТ.Найти(КассаККМ, "КассаККМ");
	ОбъектДрайвера = ИскомаяСтрока.Объект;
	ФормаОбработки = глТорговоеОборудование.ПолучитьФормуОбработки(ИскомаяСтрока.Модель.ОбработкаОбслуживания);
	РезультатВыполнения = ФормаОбработки.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);

	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		Ответ = ОбъектДрайвера.ОписаниеОшибки;
		Отказ = Истина;
		Результат = Ложь;
	Иначе
		НомерСменыККМ = ОбъектДрайвера.ВыходныеПараметры[0];
		НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		
		ЧекПробитНаККМ = Истина;
		Если ЗначениеЗаполнено(ЗаказНаряд) Тогда
			ЗНОбъект = ЗаказНаряд.ПолучитьОбъект();
			ЗНОбъект.ПробитНаККМ = Истина;
			ЗНОбъект.Записать();
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьОстаткиТоваровТСЦ (Номенклатура,Склад=Неопределено) Экспорт 
	
	ЗапросПоСкладам = новый Запрос;
	Запрос = новый Запрос;
	//Если Константы.РаботаСООО.Получить() Тогда 
	//	ЗапросПоСкладам.УстановитьПараметр("Склад",Склад);
	//	ЗапросПоСкладам.Текст = "Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИП=&Склад Объединить Выбрать СкладИП как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладИП=&Склад объединить Выбрать СкладООО как Склад из РегистрСведений.СоответствиеСкладовОООСкладамИП где СкладООО=&Склад";
	//	ВыбСкл = ЗапросПоСкладам.Выполнить().Выгрузить();
	//	Если (ВыбСкл.Количество()>0) Тогда
	//		СкладСпис = ВыбСкл.ВыгрузитьКолонку("Склад");	
	//	Иначе 
	//		СкладСпис = Склад;
	//	КонецЕсли;
	//	
	//	Запрос = новый Запрос("
	//	|ВЫБРАТЬ
	//	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	//	|	СУММА(ТоварыНаСкладах.КоличествоОстаток) КАК КоличествоСвободныйОстаток
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура=&Номенклатура и Склад в (&СписокСкладов)) КАК ТоварыНаСкладах
	//	|	СГРУППИРОВАТЬ ПО
	//	|		ТоварыНаСкладах.Номенклатура");
	//	Запрос.УстановитьПараметр("Дата", Дата);
	//	Запрос.УстановитьПараметр("СписокСкладов", СкладСпис);
	//	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	//	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	//Иначе 	
		Запрос= Новый Запрос("ВЫБРАТЬ Номенклатура,КоличествоОстаток КоличествоСвободныйОстаток ИЗ РегистрНакопления.ТоварыНаСкладах.Остатки(,Склад = &Склад И Номенклатура = &Номенклатура)");
		Запрос.УстановитьПараметр("Склад",Склад);															
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	//КонецЕсли;
	
	Возврат (Запрос.Выполнить().Выгрузить());
	
КонецФункции

//+++ 06.11.2014 функция как в документе "Закрытии заказов покупателей"
Функция ПодготовитьТаблицуПоРазмещениюУпр(ТаблицаПоТоварам)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",    МоментВремени());
	Запрос.УстановитьПараметр("ЗаказПокупателя",    ЭтотОбъект.ЗаказПокупателя);
	Запрос.УстановитьПараметр("СписокНоменклатурв",    ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТабПоТоварам",    ТаблицаПоТоварам);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабПоТоварам.Номенклатура,
	               |	ТабПоТоварам.Количество КАК Количество
	               |ПОМЕСТИТЬ втТаблицаПоТоварам
	               |ИЗ
	               |	&ТабПоТоварам КАК ТабПоТоварам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТаблицаПоТоварам.Номенклатура,
	               |	СУММА(втТаблицаПоТоварам.Количество) КАК Количество
	               |ПОМЕСТИТЬ втТаблицаПоТоварам2
	               |ИЗ
	               |	втТаблицаПоТоварам КАК втТаблицаПоТоварам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТаблицаПоТоварам.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику,
	               |	РазмещениеЗаказовПокупателейОстатки.Номенклатура,
	               |	РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры,
	               |	РазмещениеЗаказовПокупателейОстатки.ТоварТара,
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КАК Количество,
	               |	ЕСТЬNULL(втТаблицаПоТоварам2.Количество, 0) КАК КоличествоВЧеке
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(
	               |			&МоментДокумента,
	               |			ЗаказПокупателя = &ЗаказПокупателя
	               |				И Номенклатура В (&СписокНоменклатурв)) КАК РазмещениеЗаказовПокупателейОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПоТоварам2 КАК втТаблицаПоТоварам2
	               |		ПО РазмещениеЗаказовПокупателейОстатки.Номенклатура = втТаблицаПоТоварам2.Номенклатура
	               |ГДЕ
	               |	РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток <> 0";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРазмещениюУпр()


Функция ИспользуемыеСистемыНалогообложения(ПорядокНалогообложения) Экспорт
	
	СистемыНалогообложения = Новый Соответствие;
	
	Отказ = Ложь;
	Организация = КассаККМ.Владелец;
	УП = ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(Дата, Отказ, Организация);
	Если Отказ Тогда
		ПорядокНалогообложения = "ЕНВД";
		СтруктураСН = Новый Структура("Количество, НомераСтрокДокумента", 1, "");
		СистемыНалогообложения.Вставить("ЕНВД", СтруктураСН);
		Возврат СистемыНалогообложения;
      КонецЕсли;
	Если УП.РозничнаяТорговляОблагаетсяЕНВД Тогда
		ПорядокНалогообложения = "ЕНВД";
		СтруктураСН = Новый Структура("Количество, НомераСтрокДокумента", 1, "");
		СистемыНалогообложения.Вставить("ЕНВД", СтруктураСН);
		Возврат СистемыНалогообложения;
	КонецЕсли;
	
	Если УП = Неопределено Тогда
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Общая") Тогда
		ЗначениеПоУмолчанию = "ОБЩАЯ";
	ИначеЕсли УП.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		ЗначениеПоУмолчанию = "УПРОЩЕННАЯ";
	Иначе
		ЗначениеПоУмолчанию = "НЕ ОПРЕДЕЛЕНО";
	КонецЕсли;
	ПорядокНалогообложения = ЗначениеПоУмолчанию;
	
	//НоменклатураЕНВД = ПолучитьСписокУслугОблагаемыхЕНВД(Дата, Организация);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		//Если НоменклатураЕНВД.НайтиПоЗначению(СтрокаТЧ.Номенклатура) <> Неопределено Тогда
		//	Значение = "ЕНВД";
		//Иначе
			Значение = ЗначениеПоУмолчанию;
		//КонецЕсли;
			
		Если СистемыНалогообложения.Получить(Значение) <> Неопределено Тогда
			СистемыНалогообложения[Значение].Количество = СистемыНалогообложения[Значение].Количество + 1;
			СистемыНалогообложения[Значение].НомераСтрокДокумента = СистемыНалогообложения[Значение].НомераСтрокДокумента
				+ ", " + Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0")
		Иначе
			СтруктураСН = Новый Структура("Количество, НомераСтрокДокумента", 1, Формат(СтрокаТЧ.НомерСтроки,"ЧГ=0"));
			СистемыНалогообложения.Вставить(Значение, СтруктураСН);
		КонецЕсли;
		
		ПорядокНалогообложения = Значение;
		
	КонецЦикла;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

//Функция СоздатьТаблицуТоваровДляСписанияССкладовООО()
//		
//	// Выведем остатки
//	СписокНоменклатуры 	= Товары.ВыгрузитьКолонку("Номенклатура");
//	СписокСкладов       = Товары.ВыгрузитьКолонку("Склад");	
//	ВыбГруппа=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ГруппаДоступностиСкладов");
//	Запрос = новый Запрос;
//	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
//	Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);
//	Запрос.Текст="ВЫБРАТЬ Склад, Номенклатура, Сумма(Выбор Когда КоличествоОстаток>0 Тогда КоличествоОстаток Иначе 0 Конец) Остаток ИЗ
//	|РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура в(&Номенклатура)	И Склад В (&СписокСкладов))
//	|Сгруппировать ПО Склад,Номенклатура";			
//	ТаблицаОстатковИП = Запрос.Выполнить().Выгрузить();
//	Запрос.УстановитьПараметр("Номенклатура",СписокНоменклатуры);
//	Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);
//	Запрос.Текст="ВЫБРАТЬ СкладООО,  Склад, Номенклатура, Сумма(Выбор Когда КоличествоОстаток>0 Тогда КоличествоОстаток Иначе 0 Конец) Остаток ИЗ
//	|РегистрНакопления.ТоварыНаСкладах.Остатки(,Номенклатура в (&Номенклатура)	И Склад В 
//	|(
//	|Выбрать СкладООО из РегистрСведений.СоответствиеСкладовОООСкладамИП
//	|Где СкладИП В (&СписокСкладов))) как ОСтатки 
//	|Левое соединение РегистрСведений.СоответствиеСкладовОООСкладамИП как Соотв По ОСтатки.Склад = Соотв.СкладИП
//	|Сгруппировать ПО СкладООО,Склад,Номенклатура";			
//	ТаблицаОстатковООО = Запрос.Выполнить().Выгрузить();
//		
//	ТаблицаТоваровИП = Товары.Выгрузить();
//	ТаблицаТоваровИП.Свернуть("Склад,СкладООО,Номенклатура","Количество");    
//	
//	ТаблицаСписанияСоСкладов = Новый ТаблицаЗначений;
//	ТаблицаСписанияСоСкладов.Колонки.Добавить("Номенклатура");
//	ТаблицаСписанияСоСкладов.Колонки.Добавить("Количество");
//	ТаблицаСписанияСоСкладов.Колонки.Добавить("СкладООО");

//	// Контроль остатков и создание таблицы списания.
//	СтруктураДляПоиска = Новый Структура;
//	Для Каждого Стр из ТаблицаТоваровИП Цикл
//		Если (Стр.Номенклатура.Услуга) Тогда 
//			Продолжить;
//		КонецЕсли;	
//		СтруктураДляПоиска.Вставить("Номенклатура",Стр.Номенклатура);
//		ОстатокСтрока = ТаблицаОстатковИП.НайтиСтроки(СтруктураДляПоиска);
//		// Теперь найдем реальный остаток и заменим склад, если надо. 
//		ФлСкладООО = Ложь;
//		Если не(ОстатокСтрока.Количество()>0) Тогда
//			// Остатка по товару нет ни на одном складе ИП
//			ФлСкладООО 				= Истина;
//			КоличествоДляСписания 	= Стр.Количество;
//		Иначе 
//			// Есть остаток.
//			Для Каждого СтрокаМ Из ОстатокСтрока Цикл
//				Если (СтрокаМ.Склад = Стр.Склад) Тогда 
//					// Строка остатков по соотв. складу ИП нашлась
//					// Делаем контроль
//					Если (СтрокаМ.Остаток<Стр.Количество) Тогда 
//						ФлСкладООО 				= Истина;
//						КоличествоДляСписания 	= Стр.Количество - СтрокаМ.Остаток; 
//					КонецЕсли;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЕсли;
//		Если (ФлСкладООО) Тогда
//			СтрокаДляСписанияООО = ТаблицаСписанияСоСкладов.Добавить();
//			СтрокаДляСписанияООО.Номенклатура = Стр.Номенклатура;
//			СтрокаДляСписанияООО.СкладООО = Стр.СкладООО;
//			СтрокаДляСписанияООО.Количество = КоличествоДляСписания;		
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат ТаблицаСписанияСоСкладов;
//	
//КонецФункции

Функция ПолучитьНДС()
	
	НДС = 0;
	Для каждого Стр из ЭтотОбъект.Товары Цикл
		НДС	= НДС + Окр(Стр.Сумма * 0.18,2);
	КонецЦИкла;
	
	Возврат НДС;
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мАннулировать = Ложь;