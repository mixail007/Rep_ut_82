
Перем мСписокСтарыхПользователей;

Перем мСтараяДатаНачалаСобытия;

Перем мСтараяДатаОкончанияСобытия;

Перем мСписокПользователей;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьСписокПользователейДляКалендаря() Экспорт

	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	
	НоваяСтрокаТаблицыПользователей = ТаблицаПользователей.Добавить();
	НоваяСтрокаТаблицыПользователей.Пользователь = Ответственный;

	ТаблицаПользователей.Свернуть("Пользователь");

	СписокПользователей = Новый СписокЗначений;

	СписокПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));

	Возврат СписокПользователей;

КонецФункции // ПолучитьСписокПользователейДляКалендаря()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция возвращает номер строки в поле табличного документа
//  для вывода События по его дате (начала или конца)
//
// Параметры
//  Часы - Строка, часы даты
//  Минуты - Строка, минуты даты
//  Дата - Дата, текущее значение даты для определения
//  Начало - Булево, признак начала или окончания периода
//  ДатаСравнения - Дата, дата с которой сравнивается значение исходной даты
//
// Возвращаемое значение:
//   Число - номер строки в поле табличного документа
//
Функция ВозвратитьНомерСтроки(Часы, Минуты, Дата, Начало, ДатаСравнения)

	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
	Иначе
		Часы = Число(Часы);
	КонецЕсли; 

	Если ПустаяСтрока(Минуты) Тогда
		Минуты = 0;
	Иначе
		Минуты = Число(Минуты);
	КонецЕсли; 
	
	Если Начало Тогда
		Если Дата < НачалоДня(ДатаСравнения) Тогда
			Возврат 1;
		Иначе
			Если Минуты < 30 Тогда
				Если Минуты = 0 Тогда
					Если Часы = 0 Тогда
						Возврат 1;
					Иначе
						Возврат (Часы * 2 + 1);
					КонецЕсли; 
				Иначе
					Возврат (Часы * 2 + 1);
				КонецЕсли; 
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если Дата > КонецДня(ДатаСравнения) Тогда
			Возврат 48;
		Иначе
			Если Минуты = 0 Тогда
				Если Часы = 0 Тогда
					Возврат 1;
				Иначе
					Возврат (Часы * 2);
				КонецЕсли; 
			ИначеЕсли Минуты <= 30 Тогда
				Возврат (Часы * 2 + 1);
			Иначе
				Если Часы = 23 Тогда
					Возврат 48;
				Иначе
					Возврат (Часы * 2 + 2);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;

КонецФункции

Процедура ВвестиЗаписьВРегистр(Дата, НомерНачальнойСтроки, НомерКонечнойСтроки, НаборЗаписейРегистра)

	Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
	
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		
		НоваяЗапись.Событие              = Ссылка;
		НоваяЗапись.Дата                 = Дата;
		НоваяЗапись.НомерНачальнойСтроки = НомерНачальнойСтроки;
		НоваяЗапись.НомерКонечнойСтроки  = НомерКонечнойСтроки;
		НоваяЗапись.Пользователь         = ЭлементСпискаПользователей.Значение;

		НоваяЗапись.ДатаНачалаСобытия    = НачалоСобытия;
		НоваяЗапись.ДатаКонцаСобытия     = ОкончаниеСобытия;
		НоваяЗапись.Контрагент           = Контрагент;
		НоваяЗапись.КонтактноеЛицо       = КонтактноеЛицо;
		НоваяЗапись.ОписаниеСобытия      = ОписаниеСобытия;
		НоваяЗапись.Важность             = Важность;
		НоваяЗапись.СостояниеСобытия     = СостояниеСобытия;
		НоваяЗапись.ТипСобытия           = ТипСобытия;
		НоваяЗапись.ВидСобытия           = ВидСобытия;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗапомнитьСтарыеЗначения()

	мСписокСтарыхПользователей = Новый СписокЗначений;
	мСтараяДатаНачалаСобытия = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущееСобытие", Ссылка);
	
	Запрос.Текст = "
	|
	|ВЫБРАТЬ
	|	СобытияКалендаряПользователяОбобщенные.Пользователь КАК Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.СобытияКалендаряПользователяОбобщенные КАК СобытияКалендаряПользователяОбобщенные
	|
	|ГДЕ
	|	СобытияКалендаряПользователяОбобщенные.Событие = &ТекущееСобытие
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	СобытияКалендаряПользователяОбобщенные.Пользователь,
	|	СобытияКалендаряПользователяОбобщенные.Дата
	|";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
	
		ТаблицаПользователей = ТаблицаЗапроса.Скопировать();
		ТаблицаПользователей.Свернуть("Пользователь");
		мСписокСтарыхПользователей.ЗагрузитьЗначения(ТаблицаПользователей.ВыгрузитьКолонку("Пользователь"));
		
		ТаблицаЗапроса.Свернуть("ДатаСобытия");
		ТаблицаЗапроса.Сортировать("ДатаСобытия ВОЗР");
		
		мСтараяДатаНачалаСобытия = ТаблицаЗапроса[0].ДатаСобытия;
		мСтараяДатаОкончанияСобытия = ТаблицаЗапроса[ТаблицаЗапроса.Количество() - 1].ДатаСобытия;
	
	КонецЕсли; 

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ)

	
	// Помещение
	Если Не ЗначениеНеЗаполнено(ВыборкаПоШапкеДокумента.Помещение) и ВыборкаПоШапкеДокумента.ПроверяемоеЗначение <> "Можно" Тогда
		ОшибкаПриПроведении("Помещение на указанный период времени ранее уже зарезервировано!", Отказ);
	КонецЕсли;

	// ПродолжительностьЧасов
	Если ВыборкаПоШапкеДокумента.НачалоСобытия = ВыборкаПоШапкеДокумента.ОкончаниеСобытия или ЗначениеНеЗаполнено(ВыборкаПоШапкеДокумента.НачалоСобытия) Тогда
		ОшибкаПриПроведении("Не задана продолжительность встречи!", Отказ);
	ИначеЕсли ВыборкаПоШапкеДокумента.НачалоСобытия > ВыборкаПоШапкеДокумента.ОкончаниеСобытия Тогда
		ОшибкаПриПроведении("Начало встречи не может быть позже её окончания!", Отказ);
	КонецЕсли;


КонецПроцедуры // ПроверитьЗаполнениеШапки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДокОснование)

	ТипСобытия       = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ВидСобытия       = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
	Основание        = ДокОснование;
	Важность         = Перечисления.Важность.Средняя;
	СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
	#Если клиент тогда
		Ответственный    = глТекущийПользователь;
	#КонецЕсли
	Если ЕстьРеквизитДокумента("Проект", ДокОснование.Метаданные()) Тогда
		Проект = ДокОснование.Проект;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	 ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		
	Если ЕстьРеквизитДокумента("ДатаОтгрузки", ДокОснование.Метаданные()) 
		И Не ЗначениеНеЗаполнено(ДокОснование.ДатаОтгрузки)	Тогда
		  НапомнитьОСобытии = Истина;   
		  ВремяНапоминания  = ДобавитьМесяц(ДокОснование.ДатаОтгрузки,1); // через месяц
		  НачалоСобытия  = ВремяНапоминания ;
		  ОкончаниеСобытия = ВремяНапоминания;
		  ОписаниеСобытия="Инспектирование шин";
	КонецЕсли;

		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровОтданныхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПереоценкаТоваровПринятыхНаКомиссию")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
	      ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		
		ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		Контрагент = ДокОснование.Контрагент;

	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РезервированиеТоваров") Тогда
		
		Если ДокОснование.ЗаказПокупателя <> Неопределено И НЕ ДокОснование.ЗаказПокупателя.Пустая() И ТипЗнч(ДокОснование.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент     = ДокОснование.ЗаказПокупателя.Контрагент;
			КонтактноеЛицо = ДокОснование.ЗаказПокупателя.КонтактноеЛицо;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		Если ДокОснование.Контрагент <> Неопределено И ТипЗнч(ДокОснование.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ДокОснование.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.Событие") Тогда
		
		Контрагент     = ДокОснование.Контрагент;
		КонтактноеЛицо = ДокОснование.КонтактноеЛицо;
		ВидСобытия     = ДокОснование.ВидСобытия;
		ТипСобытия     = ДокОснование.ТипСобытия;
		Важность       = ДокОснование.Важность;
		Основание      = ДокОснование;
		ВидОбъекта     = ДокОснование.ВидОбъекта;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
		
		Запрос = Новый Запрос;
		
		Если ДокОснование.СтатусПисьма <> Перечисления.СтатусыПисем.Полученное Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|	ПРАВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты
			|		ИЗ
			|			Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|		ГДЕ
			|			ЭлектронноеПисьмоКомуТЧ.Ссылка = &ТекДокумент
			|		) КАК Адреса
			|	ПО
			|		ВЫРАЗИТЬ(Адреса.АдресЭлектроннойПочты КАК СТРОКА(200)) = ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(200))
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица
			|	И
			|	КонтактнаяИнформация.Объект.ВидКонтактногоЛица <> &Личное)
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|";
			
			Запрос.УстановитьПараметр("ТекДокумент", ДокОснование);
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Объект
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.Контрагенты
			|	ИЛИ
			|	(КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица
			|	И
			|	КонтактнаяИнформация.Объект.ВидКонтактногоЛица <> &Личное)
			|	ИЛИ
			|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.ФизическиеЛица)
			|	И
			|	КонтактнаяИнформация.Тип = &Тип
			|	И
			|	КонтактнаяИнформация.Представление ПОДОБНО &Представление
			|";
			
			Запрос.УстановитьПараметр("Представление", ДокОснование.ОтправительАдресЭлектроннойПочты);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Личное", Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВыбОбъект = Выборка.Объект;
			Иначе
				СписокВыбора = Новый СписокЗначений;
				Пока Выборка.Следующий() Цикл
					СписокВыбора.Добавить(Выборка.Объект);
				КонецЦикла;
				
				ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Выберите объект события");
				
				Если ВыбранныйЭлемент = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ВыбОбъект = ВыбранныйЭлемент.Значение;
				
			КонецЕсли; 
		
		КонецЕсли; 

		Если ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Если ВыбОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
				Контрагент     = ВыбОбъект.ОбъектВладелец;
				КонтактноеЛицо = ВыбОбъект;
			Иначе
				ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
				КонтактноеЛицо = ВыбОбъект;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ВыбОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
			Контрагент = ВыбОбъект;
		КонецЕсли; 

		Основание       = ДокОснование;
		ОписаниеСобытия = ДокОснование.Тема;
		Если ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ ДокОснование.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
			НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
			НовыйHTMLДокумент.open("text/html");
			НовыйHTMLДокумент.write(ДокОснование.ТекстПисьма);
			НовыйHTMLДокумент.close();
			СодержаниеСобытия = СтрЗаменить(НовыйHTMLДокумент.all.item(0).innerText, Символ(13), "");
		Иначе
			СодержаниеСобытия = ДокОснование.ТекстПисьма;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события объекта "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)

	ИсточникИнформацииПриОбращении = Справочники.ИсточникиИнформацииПриОбращенииПокупателей.ПустаяСсылка();
	
КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)

	//структура, содержащая имена регистров сведений по которым надо проводить документ для управления персоналом
	Перем СтруктураПроведенияПоРегистрамСведений;

	// Формируем движения для нужд календаря пользователя
	
	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НачальнаяСтрока = ВозвратитьНомерСтроки(Формат(НачалоСобытия,"ДФ=Ч"), Формат(НачалоСобытия,"ДФ=м"), НачалоСобытия, Истина, НачалоСобытия);
	Если Формат(НачалоСобытия,"ДФ=Ч") = Формат(ОкончаниеСобытия,"ДФ=Ч") И Формат(НачалоСобытия,"ДФ=м") = Формат(ОкончаниеСобытия,"ДФ=м") Тогда
		КонечнаяСтрока  = НачальнаяСтрока;
	Иначе
		КонечнаяСтрока  = ВозвратитьНомерСтроки(Формат(ОкончаниеСобытия,"ДФ=Ч"), Формат(ОкончаниеСобытия,"ДФ=м"), ОкончаниеСобытия, Ложь, ОкончаниеСобытия);
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
	
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));

		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл

			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
		
			ВвестиЗаписьВРегистр(ДатаИнтервала, 1, 48, НаборЗаписей);
		
		КонецЦикла;

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, 48, НаборЗаписей);
		ВвестиЗаписьВРегистр(НачалоДня(ОкончаниеСобытия), 1, КонечнаяСтрока, НаборЗаписей);

	Иначе

		ВвестиЗаписьВРегистр(НачалоДня(НачалоСобытия), НачальнаяСтрока, КонечнаяСтрока, НаборЗаписей);
		
	КонецЕсли;

	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

	СписокПерераспределенныхДат = Новый СписокЗначений;

	Если НачалоДня(мСтараяДатаНачалаСобытия) <> НачалоДня(НачалоСобытия) ИЛИ НачалоДня(мСтараяДатаОкончанияСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		КоличествоИнтерваловМеждуДнями = Цел((КонецДня(мСтараяДатаОкончанияСобытия) + 1 - НачалоДня(мСтараяДатаНачалаСобытия))/(60*60*24));
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоДня(мСтараяДатаНачалаСобытия) + (60*60*24)*а - 1);
			СписокПерераспределенныхДат.Добавить(ДатаИнтервала);
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла; 
	КонецЕсли; 

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			Если СписокПерераспределенныхДат.НайтиПоЗначению(ДатаИнтервала) = Неопределено Тогда
			
				Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
					СтарыйПользователь = ЭлементСпискаПользователей.Значение;
					Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
						РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
					КонецЕсли; 
				КонецЦикла; 
			
				Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
					РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
				КонецЦикла; 
			
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(ОкончаниеСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЕсли; 
		
	Иначе
		
		Если СписокПерераспределенныхДат.НайтиПоЗначению(НачалоДня(НачалоСобытия)) = Неопределено Тогда
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			КонецЦикла; 

		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события объекта "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения()

	ЗапомнитьСтарыеЗначения();
	
	мСписокПользователей = ПолучитьСписокПользователейДляКалендаря();
	
	НаборЗаписей = РегистрыСведений.СобытияКалендаряПользователяОбобщенные.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Событие.Значение = Ссылка;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();

	Если НачалоДня(НачалоСобытия) <> НачалоДня(ОкончаниеСобытия) Тогда
		
		КоличествоИнтерваловМеждуДнями = Цел((НачалоДня(ОкончаниеСобытия) - КонецДня(НачалоСобытия) + 1)/(60*60*24));
		
		Для а = 1 По КоличествоИнтерваловМеждуДнями Цикл
			ДатаИнтервала = НачалоДня(НачалоСобытия) + (60*60*24)*а;
			
			Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
				СтарыйПользователь = ЭлементСпискаПользователей.Значение;
				Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
					РаспределитьСобытияДня(ДатаИнтервала, СтарыйПользователь);
				КонецЕсли; 
			КонецЦикла; 
		
			Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
				РаспределитьСобытияДня(ДатаИнтервала, ЭлементСпискаПользователей.Значение);
			КонецЦикла; 
			
		КонецЦикла;
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
				РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
			РаспределитьСобытияДня(НачалоДня(ОкончаниеСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	Иначе
			
		Для каждого ЭлементСпискаПользователей Из мСписокСтарыхПользователей Цикл
			СтарыйПользователь = ЭлементСпискаПользователей.Значение;
			Если мСписокПользователей.НайтиПоЗначению(СтарыйПользователь) = Неопределено Тогда
				РаспределитьСобытияДня(НачалоДня(НачалоСобытия), СтарыйПользователь);
			КонецЕсли; 
		КонецЦикла; 
	
		Для каждого ЭлементСпискаПользователей Из мСписокПользователей Цикл
			РаспределитьСобытияДня(НачалоДня(НачалоСобытия), ЭлементСпискаПользователей.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		УдалитьДанныеНезарегистрированногоКонтрагента(Ссылка, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

