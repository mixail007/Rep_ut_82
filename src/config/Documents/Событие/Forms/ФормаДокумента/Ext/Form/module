
Перем мТайпингКонтрагента;
Перем мТекстТайпингаКонтрагента;
Перем мПоследнееЗначениеЭлементаТайпингаКонтрагент;

Перем мТайпингКонтактногоЛица;
Перем мТекстТайпингаКонтактногоЛица;
Перем мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо;

Перем мТайпингКонтактногоЛицаТЧ;
Перем мТекстТайпингаКонтактногоЛицаТЧ;
Перем мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицоТЧ;

Перем мНачалоСобытия;
Перем мОбновлятьВладельца;
Перем мЧас;
Перем мМинута;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура изменяет окончание контакта при изменении начала
//
// Параметры
//  Элемент - Элемент управления, начало контакта
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ИзменениеНачалаСобытия(Элемент)

	ОкончаниеСобытия = Элемент.Значение + (ОкончаниеСобытия - мНачалоСобытия);
	мНачалоСобытия = Элемент.Значение;

КонецПроцедуры

// Функция определяет получателей электронного письма, при использовании встроенного почтового клиента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ТаблицаЗначений, получатели электронного письма
//
Функция ОпределитьПолучателейВстроенногоКлиента()

	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Объект");
	ТаблицаПолучателей.Колонки.Добавить("Адрес");
	
	// Контактное лицо
	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтактногоЛица) Тогда
		
			ЗаписиКонтактногоЛица = Новый ТаблицаЗначений;
			ЗаписиКонтактногоЛица.Колонки.Добавить("Объект");
			ЗаписиКонтактногоЛица.Колонки.Добавить("Представление");
			ЗаписиКонтактногоЛица.Колонки.Добавить("ЗначениеПоУмолчанию");
			
			НоваяСтрока = ЗаписиКонтактногоЛица.Добавить();
			НоваяСтрока.Объект              = КонтактноеЛицо;
			НоваяСтрока.Представление       = ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтактногоЛица;
			НоваяСтрока.ЗначениеПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект", КонтактноеЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|";
		
		ЗаписиКонтактногоЛица = Запрос.Выполнить().Выгрузить();
		Если ЗаписиКонтактногоЛица.Количество() = 0 Тогда
			ЗаписиКонтактногоЛица = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Контрагент
	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтрагента) Тогда
		
			ЗаписиКонтрагента = Новый ТаблицаЗначений;
			ЗаписиКонтрагента.Колонки.Добавить("Объект");
			ЗаписиКонтрагента.Колонки.Добавить("Представление");
			ЗаписиКонтрагента.Колонки.Добавить("ЗначениеПоУмолчанию");
			
			НоваяСтрока = ЗаписиКонтрагента.Добавить();
			НоваяСтрока.Объект              = Контрагент;
			НоваяСтрока.Представление       = ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтрагента;
			НоваяСтрока.ЗначениеПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеНеЗаполнено(Контрагент) И ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект", Контрагент);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|";
		
		ЗаписиКонтрагента = Запрос.Выполнить().Выгрузить();
		Если ЗаписиКонтрагента.Количество() = 0 Тогда
			ЗаписиКонтрагента = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;

	Если ЗаписиКонтактногоЛица <> Неопределено Тогда
		СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
		СтрокаПоУмолчанию = ЗаписиКонтактногоЛица.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
			СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
		Иначе
			СтрокаТаблицыПолучателей.Объект = ЗаписиКонтактногоЛица[0].Объект;
			СтрокаТаблицыПолучателей.Адрес  = ЗаписиКонтактногоЛица[0].Представление;
		КонецЕсли; 
	ИначеЕсли ЗаписиКонтрагента <> Неопределено Тогда
		СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
		СтрокаПоУмолчанию = ЗаписиКонтрагента.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
			СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
		Иначе
			СтрокаТаблицыПолучателей.Объект = ЗаписиКонтрагента[0].Объект;
			СтрокаТаблицыПолучателей.Адрес  = ЗаписиКонтрагента[0].Представление;
		КонецЕсли; 
	КонецЕсли; 

	Возврат ТаблицаПолучателей;

КонецФункции // ОпределитьПолучателейВстроенногоКлиента()

// Функция возвращает имя типа контактной информации по его значению
//
// Параметры
//  Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеТипа(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат "Адрес";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат "E-mail";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат "Телефон";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции // ПолучитьПредставлениеТипа()

// Функция в зависимости от вида и типа контакта, определяет типы контаткной информации
//  которые необходимо отображать
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура
//
Функция ОпределитьТипКонтактнойИнформации()

	СписокТиповКонтрагента = Новый СписокЗначений;
	СписокТиповКонтактногоЛица = Новый СписокЗначений;
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок
		  ИЛИ ВидСобытия = Перечисления.ВидыСобытий.Прочее Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.КомментарийПДЗ Тогда
		    СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		    СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	КонецЕсли;
	
	Возврат Новый Структура("Контрагент, КонтактноеЛицо", СписокТиповКонтрагента, СписокТиповКонтактногоЛица);
	
КонецФункции

// Процедура отображает контактную информацию объектов на форме
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьКонтактнуюИнформацию()

	Если ТипЗнч(Контрагент) = Тип("Строка") И ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента) Тогда
			ТелефонКонтрагента = ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтрагента), ("(" + ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтрагента + ") "), "") + СокрЛП(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента) + ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента), (", доб. " + СокрЛП(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента)), "");
		Иначе
			ТелефонКонтрагента = "";
		КонецЕсли; 
		ЭлементыФормы.КонтактнаяИнформацияКонтрагента.Значение = "Телефон: " + ?(ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента), "нет информации", ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента);
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица) Тогда
			ТелефонКонтактногоЛица = ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтактногоЛица), ("(" + ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтактногоЛица + ") "), "") + СокрЛП(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица) + ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента), (", доб. " + СокрЛП(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтактногоЛица)), "");
		Иначе
			ТелефонКонтактногоЛица = "";
		КонецЕсли;
		ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = "Телефон: " + ?(ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица), "нет информации", ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица);
		
	Иначе
		
		ТипыКонтактнойИнформации = ОпределитьТипКонтактнойИнформации();
		
		СписокТиповКонтрагента = ТипыКонтактнойИнформации.Контрагент;
		СписокТиповКонтактногоЛица = ТипыКонтактнойИнформации.КонтактноеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект        КАК Объект,
		|	КонтактнаяИнформация.Тип           КАК Тип,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &КонтактноеЛицо
		|	И
		|	КонтактнаяИнформация.Тип В(&СписокТиповКонтактногоЛица)
		|";
		
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Объект        КАК Объект,
			|	КонтактнаяИнформация.Тип           КАК Тип,
			|	КонтактнаяИнформация.Представление КАК Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Контрагент
			|	И
			|	КонтактнаяИнформация.Тип В(&СписокТиповКонтрагента)
			|
			|";
			
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
		Запрос.УстановитьПараметр("Контрагент"                , Контрагент);
		Запрос.УстановитьПараметр("КонтактноеЛицо"            , КонтактноеЛицо);
		Запрос.УстановитьПараметр("СписокТиповКонтрагента"    , СписокТиповКонтрагента);
		Запрос.УстановитьПараметр("СписокТиповКонтактногоЛица", СписокТиповКонтактногоЛица);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		СтрокаДанныхКонтрагента = "";
		СтрокаДанныхКонтактногоЛица = "";
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
			ИзмененноеПредставление = СтрЗаменить(СтрокаТаблицы.Представление, Символы.ВК, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.ПС, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.НПП, " ");
			
			Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если НЕ ПустаяСтрока(СтрокаДанныхКонтрагента) Тогда
					СтрокаДанныхКонтрагента = СтрокаДанныхКонтрагента + "; ";
				КонецЕсли; 
				СтрокаДанныхКонтрагента = СтрокаДанныхКонтрагента + ИзмененноеПредставление;
			Иначе
				Если НЕ ПустаяСтрока(СтрокаДанныхКонтактногоЛица) Тогда
					СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + "; ";
				КонецЕсли; 
				СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + ИзмененноеПредставление;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементыФормы.КонтактнаяИнформацияКонтрагента.Значение = ПолучитьПредставлениеТипа(СписокТиповКонтрагента[0].Значение) + ": " + ?(ПустаяСтрока(СтрокаДанныхКонтрагента), "нет информации", СтрокаДанныхКонтрагента);
		ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = ПолучитьПредставлениеТипа(СписокТиповКонтактногоЛица[0].Значение) + ": " + ?(ПустаяСтрока(СтрокаДанныхКонтактногоЛица), "нет информации", СтрокаДанныхКонтактногоЛица);
		
	КонецЕсли; 

КонецПроцедуры

// Процедура формирует представление комбинации реквиитов ТипСобытия и ВидСобытия.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СформироватьСтрокуТипаВида()

	Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		СтрокаТипа = " (входящ";
	Иначе
		СтрокаТипа = " (исходящ";
	КонецЕсли;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		СтрокаТипа = СтрокаТипа + "ая)";

	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
		СтрокаТипа = СтрокаТипа + "ий)";

	Иначе
		СтрокаТипа = СтрокаТипа + "ее)";

	КонецЕсли;

	// Отобразить в заголовке формы тип и вид конаткта.
	УстановитьЗаголовокФормыДокумента(Строка(ВидСобытия) + СтрокаТипа, ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Текст = Строка(ВидСобытия);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия.Текст = СтрокаТипа;

КонецПроцедуры

// Функция возвращает адрес эл.почты выбранного контрагента или контактного лица.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка – электронный адрес
//
Функция ОпределитьПолучателей()

	Адрес = Новый Массив;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
	
		Если ЗначениеНеЗаполнено(Контрагент) И ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
			Предупреждение("Выберите контрагента или контактное лицо");
			Возврат Неопределено;
		КонецЕсли; 

		СписокОбъектов= Новый СписокЗначений;
		Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
			СписокОбъектов.Добавить(Контрагент);
		КонецЕсли; 
		Если НЕ ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
			СписокОбъектов.Добавить(КонтактноеЛицо);
		КонецЕсли; 

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("ТипМейл"       , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		Запрос.УстановитьПараметр("ТекущаяДата"   , Дата);
		Запрос.УстановитьПараметр("ПустаяСтрока"  , "");
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Получатель,
		|	КонтактнаяИнформация.Вид                 КАК Вид,
		|	КонтактнаяИнформация.Представление       КАК Адрес,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	КонтактнаяИнформация.Объект.Наименование КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &ТипМейл
		|	И
		|	КонтактнаяИнформация.Объект В (&СписокОбъектов)
		|";

		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Колонки.Получатель.Ширина = 25;
		ТаблицаЗапроса.Колонки.Вид.Ширина = 25;
		ТаблицаЗапроса.Колонки.Адрес.Ширина = 25;

		Если ТаблицаЗапроса.Количество() = 0 Тогда
			Адрес.Добавить("");
			Адрес.Добавить("");
			Возврат Адрес;
		ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
			СтрокаТаблицыЗапроса = ТаблицаЗапроса[0];
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Представление));
			Возврат Адрес;
		Иначе
			
			СтрокиПоУмолчанию = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию", Истина));
			Если СтрокиПоУмолчанию.Количество() = 1 Тогда
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Адрес));
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Представление));
				Возврат Адрес;
			ИначеЕсли НЕ КонтактноеЛицо.Пустая() Тогда
				СтрокиПоУмолчаниюКонтактногоЛица = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию, Получатель", Истина, КонтактноеЛицо));
				Если СтрокиПоУмолчаниюКонтактногоЛица.Количество() = 1 Тогда
					Адрес.Добавить(СокрЛП(СтрокиПоУмолчаниюКонтактногоЛица[0].Адрес));
					Адрес.Добавить(СокрЛП(СтрокиПоУмолчаниюКонтактногоЛица[0].Представление));
					Возврат Адрес;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НЕ Контрагент.Пустая() И НЕ КонтактноеЛицо.Пустая() Тогда
			
				РезультатПоискаКонтактногоЛица = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Получатель", КонтактноеЛицо));

				Если РезультатПоискаКонтактногоЛица.Количество() > 0 Тогда

					Если РезультатПоискаКонтактногоЛица.Количество() = 1 Тогда
						
						Адрес.Добавить(СокрЛП(РезультатПоискаКонтактногоЛица[0].Адрес));
						Адрес.Добавить(СокрЛП(РезультатПоискаКонтактногоЛица[0].Представление));
						Возврат Адрес;
						
					Иначе

						ТаблицаВыбораАдресаКонтактногоЛица = ТаблицаЗапроса.Скопировать();

						Индекс = 0;
						Пока 1 = 1 Цикл
						
							Если Индекс > ТаблицаВыбораАдресаКонтактногоЛица.Количество() - 1 Тогда
								Прервать;
							КонецЕсли; 

							Если ТипЗнч(ТаблицаВыбораАдресаКонтактногоЛица[Индекс].Получатель) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
								ТаблицаВыбораАдресаКонтактногоЛица.Удалить(Индекс);
								Продолжить;
							КонецЕсли; 

							Индекс = Индекс + 1;

						КонецЦикла; 
						
						ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Удалить(ТаблицаВыбораАдресаКонтактногоЛица.Колонки.ЗначениеПоУмолчанию);
						ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Удалить(ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Представление);
						СтрокаТаблицыАдресовКонтактногоЛица = ТаблицаВыбораАдресаКонтактногоЛица.ВыбратьСтроку("Выберите получателя");
						Если СтрокаТаблицыАдресовКонтактногоЛица <> Неопределено Тогда
							Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресовКонтактногоЛица.Адрес));
							Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресовКонтактногоЛица.Получатель));
							Возврат Адрес;
						Иначе
							Возврат Неопределено;
						КонецЕсли;
					
					КонецЕсли; 

				Иначе

					ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
					ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
					СтрокаТаблицыЗапроса = ТаблицаЗапроса.ВыбратьСтроку("Выберите получателя");
					Если СтрокаТаблицыЗапроса <> Неопределено Тогда
						Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
						Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Получатель));
						Возврат Адрес;
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли; 
				
			Иначе
				
				ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
				ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
				СтрокаТаблицыЗапроса = ТаблицаЗапроса.ВыбратьСтроку("Выберите получателя");
				Если СтрокаТаблицыЗапроса <> Неопределено Тогда
					Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
					Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Получатель));
					Возврат Адрес;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе // прочее контактное лицо
	
		Если ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
			Предупреждение("Выберите контактное лицо!");
			Возврат Неопределено;
		КонецЕсли; 

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("ТипМейл"     , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект"      , КонтактноеЛицо);
		Запрос.УстановитьПараметр("ТекущаяДата" , Дата);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Получатель,
		|	КонтактнаяИнформация.Вид                 КАК Вид,
		|	КонтактнаяИнформация.Представление       КАК Адрес,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	КонтактнаяИнформация.Объект.Наименование КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &ТипМейл
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|";

		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Колонки.Получатель.Ширина = 25;
		ТаблицаЗапроса.Колонки.Вид.Ширина = 25;
		ТаблицаЗапроса.Колонки.Адрес.Ширина = 25;

		Если ТаблицаЗапроса.Количество() = 0 Тогда
			Адрес.Добавить("");
			Адрес.Добавить("");
			Возврат Адрес;
		ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
			СтрокаТаблицыЗапроса = ТаблицаЗапроса[0];
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Представление));
			Возврат Адрес;
		Иначе
			СтрокиПоУмолчанию = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию", Истина));
			Если СтрокиПоУмолчанию.Количество() = 1 Тогда
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Адрес));
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Представление));
				Возврат Адрес;
			КонецЕсли;
			ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
			ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
			СтрокаТаблицыАдресов = ТаблицаЗапроса.ВыбратьСтроку("Выберите адрес получателя");
			Если СтрокаТаблицыАдресов <> Неопределено Тогда
				Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Адрес));
				Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Получатель));
				Возврат Адрес;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции // ОпределитьПолучателей()

// Процедура устанавливает доступность элемента формы ВремяНапоминания.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год 4-мя цифрами или 2-мя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Истина)

	СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
	
	НачалоРабочегоДняКонстанта    = СтруктураРабочегоВремени.ДатаНачала;
	ОкончаниеРабочегоДняКонстанта = СтруктураРабочегоВремени.ДатаОкончания;
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ДатаВремен)+Час(НачалоРабочегоДняКонстанта)*60*60+Минута(НачалоРабочегоДняКонстанта)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ДатаВремен)+Час(ОкончаниеРабочегоДняКонстанта)*60*60+Минута(ОкончаниеРабочегоДняКонстанта)*60) - 60*60;

	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДня + а*30*60;
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура устанавливает доступность элемента верхней командной панели
// формы НаписатьПисьмо.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьКнопокПочты() Экспорт

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Истина;
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Истина;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы НадписьИсточникИнформации
// и ИсточникИнформацииПриОбращении
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьИсточникаИнформации()

	ФлагДоступности = Истина;

	Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
		ФлагДоступности = Ложь;
	Иначе
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			ФлагДоступности = Ложь;
		Иначе
			Попытка
				Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И (НЕ Контрагент.ИсточникИнформацииПриОбращении.Пустая() ИЛИ НЕ Контрагент.Покупатель) Тогда
					ФлагДоступности = Ложь;
				КонецЕсли; 
			Исключение
				ФлагДоступности = Ложь;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементыФормы.НадписьИсточникИнформации.Доступность = ФлагДоступности;
	ЭлементыФормы.ИсточникИнформацииПриОбращении.Доступность = ФлагДоступности;

КонецПроцедуры

// Процедура управляет видимостью элементов управления формы в зависимости от
// вида объекта события
//
Процедура ВидимостьЭлементовФормы()

	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		
		ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты.Видимость = Истина;
		ЭлементыФормы.ПанельИсточника.Доступность = Истина;
		ЭлементыФормы.ПанельКонтрагента.ТекущаяСтраница = ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты;
		ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие.Видимость = Ложь;
		
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
		ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок         = "Контрагенты, контактные лица";
		ЭлементыФормы.СторонниеЛица.Колонки.Лицо.ТекстШапки      = "Контактное лицо контрагента";
		ЭлементыФормы.СторонниеЛица.Колонки.Контрагент.Видимость = Истина;
		ЭлементыФормы.НадписьКонтактноеЛицо.Заголовок            = "Контакт. лицо:";
		
	Иначе
		
		ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие.Видимость = Истина;
		ЭлементыФормы.ПанельИсточника.Доступность = Ложь;
		ЭлементыФормы.ПанельКонтрагента.ТекущаяСтраница = ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие;
		ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты.Видимость = Ложь;
		
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
		ЭлементыФормы.НадписьКонтактноеЛицо.Заголовок       = "Контакт. лицо:";
		ЭлементыФормы.СторонниеЛица.Колонки.Лицо.ТекстШапки = "Контактное лицо";
		ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок    = "Прочие контактные лица";
		
		ЭлементыФормы.СторонниеЛица.Колонки.Контрагент.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет составом закладок панели ПанельФормы.
// 
Процедура СоставЗакладокГлавнойПанелиФормы()
	
	ЭлементыФормы.ПанельФормы.Страницы.Участники.Видимость = (ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча);
	ЭлементыФормы.ПанельФормы.Страницы.Заказы.Видимость = (Заказыпокупателей.Количество()>0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭтоНовый() Тогда
		ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	мСписокСтарыхПользователей  = ПолучитьСписокПользователейДляКалендаря();
	мСтараяДатаНачалаСобытия    = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;
	
	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеНеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДанныеКонтрагента = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
			ПрочитатьДанныеНезарегистрированногоКонтрагента(ПараметрОбъектКопирования, ДанныеКонтрагента);
			Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
				ДанныеНезарегистрированногоКонтрагента[Реквизит.Имя] = ДанныеКонтрагента[Реквизит.Имя];
			КонецЦикла; 
		КонецЕсли; 
		
		Если ЗначениеНеЗаполнено(ВидОбъекта) Тогда
			ВидОбъекта = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнойВидОбъектаСобытия");
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(ВидОбъекта) Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеНеЗаполнено(КонтактноеЛицо) Тогда
			Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент ИЛИ ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
		
		Если ВидСобытия.Пустая() Тогда
			ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
		КонецЕсли; 
		
		Если ЗначениеНеЗаполнено(ТипСобытия) Тогда
			ТипСобытия = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ТипСобытияПоУмолчанию");
			Если ЗначениеНеЗаполнено(ТипСобытия) Тогда
				ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
			КонецЕсли; 
		КонецЕсли;
		
		Если Ответственный.Пустая() Тогда
			Ответственный = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
		КонецЕсли; 
		
		СтруктураРабочегоВремени = ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		НачалоРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
	
		Если НачалоСобытия = Дата("00010101000000") Тогда
			НачалоСобытия       = НачалоДня(Дата) + Час(НачалоРабочегоДня)*60*60 + Минута(НачалоРабочегоДня)*60;
		КонецЕсли; 
		Если ОкончаниеСобытия = Дата("00010101000000") Тогда
			ОкончаниеСобытия     = НачалоДня(Дата) + Час(ОкончаниеРабочегоДня)*60*60 + Минута(ОкончаниеРабочегоДня)*60;
		КонецЕсли; 
		
		Если ЗначениеНеЗаполнено(СостояниеСобытия) Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				СостояниеСобытия = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СостояниеНовогоВходящегоСобытия");
			ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				СостояниеСобытия = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "СостояниеНовогоИсходящегоСобытия");
			КонецЕсли;
			Если ЗначениеНеЗаполнено(СостояниеСобытия) Тогда
				СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
			КонецЕсли; 
		КонецЕсли;
		
		Важность = Перечисления.Важность.Средняя;
		
	КонецЕсли; 

	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия,
	                                      ВидСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьВидСобытия"));

	Для каждого Пункт Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Кнопки Цикл
		Пункт.Картинка = ПолучитьКартинкуНапоминания(Перечисления.ВидыСобытий[Пункт.Имя]);
	КонецЦикла;

	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = ПолучитьКартинкуНапоминания(ВидСобытия);

	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия,
	                                      ТипСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьТипСобытия"));

	ДоступностьНапоминаний();
	ДоступностьКнопокПочты();
	ДоступностьИсточникаИнформации();
	СформироватьСтрокуТипаВида();

	// Установка видимости реквизита "Проект".
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ОбновитьКонтактнуюИнформацию();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВидимостьЭлементовФормы();

	мНачалоСобытия = НачалоСобытия;
	
	СоставЗакладокГлавнойПанелиФормы();
	
	мПоследнееЗначениеЭлементаТайпингаКонтрагент     = Контрагент;
	мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо = КонтактноеЛицо;
	
КонецПроцедуры

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НачалоСобытия > ОкончаниеСобытия Тогда
	
		Предупреждение("Дата начала события должна быть меньше окончания.");
		Отказ = Истина;
		Возврат;
	
	КонецЕсли; 
	
	Если НапомнитьОСобытии Тогда
	
		Если Ответственный.Пустая() Тогда

			Предупреждение("Выберите ответственное лицо, для напоминания.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;

		Если НЕ ПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда

			Предупреждение("Для ответственного лица, которое вы выбрали, недоступна система напоминаний.
			               |Для пользователя " + СокрЛП(Ответственный) + " необходимо установить флажок использования напоминаний.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено И НЕ ЭтоНовый() Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если НЕ ЗначениеНеЗаполнено(Контрагент)
	   И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
	   И НЕ ЗначениеНеЗаполнено(ИсточникИнформацииПриОбращении)
	   И ЗначениеНеЗаполнено(Контрагент.ИсточникИнформацииПриОбращении) Тогда
		
		Если ТипЗнч(СтруктураОбъектКонтрагент) = Тип("Структура")
		   И СтруктураОбъектКонтрагент.Свойство("Объект")
		   И ТипЗнч(СтруктураОбъектКонтрагент.Объект) = Тип("СправочникОбъект.Контрагенты") Тогда
			
			СтруктураОбъектКонтрагент.Объект.ИсточникИнформацииПриОбращении = ИсточникИнформацииПриОбращении;
			
			Если СтруктураОбъектКонтрагент.ЗаписыватьОбъект Тогда
				Попытка
					СтруктураОбъектКонтрагент.Объект.Записать();
				Исключение
					Сообщить("Заблокирована запись контрагента " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли; 
			
		Иначе
		
			ОбъектКонтрагента = Контрагент.ПолучитьОбъект();

			ОбъектКонтрагента.ИсточникИнформацииПриОбращении = ИсточникИнформацииПриОбращении;

			Попытка
				ОбъектКонтрагента.Записать();
			Исключение
				Сообщить("Заблокирована запись контрагента " + ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		
		КонецЕсли; 
	
	КонецЕсли;

	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		ЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ);
	КонецЕсли; 
	
	ДоступностьИсточникаИнформации();

КонецПроцедуры

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()

	СформироватьСтрокуТипаВида();

КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	КонецЕсли; 

КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭлементыФормы.Контрагент, мТайпингКонтрагента, мТекстТайпингаКонтрагента);
	ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭлементыФормы.КонтактноеЛицо, мТайпингКонтактногоЛица, мТекстТайпингаКонтактногоЛица);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьВидСобытия(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидСобытия = Перечисления.ВидыСобытий[Кнопка.Имя];
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = ПолучитьКартинкуНапоминания(ВидСобытия);
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	СоставЗакладокГлавнойПанелиФормы();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "ПодменюТипаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ТипСобытия.
//
Процедура ДействияФормыДействиеУстановитьТипСобытия(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ТипСобытия = Перечисления.ВходящееИсходящееСобытие[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	ДоступностьИсточникаИнформации();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события элемента 
// ДействияФормы.Файлы.
Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;
	
	ОбязательныеОтборы = Новый Структура;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
	
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Файлы;
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Изображения.Видимость = Ложь;
		ОбязательныеОтборы.Вставить("ВидДанных",Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл);
	
	Иначе

		ФормаФайлов.Изображения.Отбор.Объект.Использование                       = Истина;
		ФормаФайлов.Изображения.Отбор.Объект.Значение                            = Ссылка;
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = Ложь;
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость           = Ложь;
				
	КонецЕсли; 

	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

// Обработчик события элемента 
// ДействияФормы.НаписатьПисьмо.
Процедура ДействияФормыНаписатьПисьмо(Кнопка) Экспорт

	Перем ЗаписиКонтрагента;
	Перем ЗаписиКонтактногоЛица;
	Перем ЗаписиПрочихУчастников;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		Адрес = ОпределитьПолучателей();

		Если Адрес = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Адрес", Адрес[0]);
		СтруктураПараметров.Вставить("Представление", Адрес[1]);
		СтруктураПараметров.Вставить("Тема", ОписаниеСобытия);
		СтруктураПараметров.Вставить("Текст", СодержаниеСобытия);
		
		ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);

	Иначе
		
		Если ОписаниеСобытия = "Предупредительное письмо должнику" или 
			 ОписаниеСобытия = "Письмо о приближении срока оплаты" или
			 ОписаниеСобытия = "Письмо о возникновении ПДЗ" 
			Тогда   //***20150427
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ХранилищеДополнительнойИнформации.Наименование,
			               |	ХранилищеДополнительнойИнформации.ВидДанных,
			               |	ХранилищеДополнительнойИнформации.ИмяФайла,
			               |	ХранилищеДополнительнойИнформации.Хранилище
			               |ИЗ
			               |	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
			               |ГДЕ
			               |	ХранилищеДополнительнойИнформации.Объект = &Объект";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ИмяФайла = ПолучитьИмяФайла(КаталогВременныхФайлов(), Результат.ИмяФайла);
				СохранитьФайлНаДиске(Результат.Хранилище, ИмяФайла, Ложь, "дадлявсех", ложь);
				
				
				УЗ =  ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяУчетнаяЗапись");
				Если НЕ ЗначениеЗаполнено(УЗ) тогда
					УЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("no-reply@yst76.ru");
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Объект = &Объект
				|	И КонтактнаяИнформация.Тип = &Тип
				|	И КонтактнаяИнформация.Вид = &Вид";
				
				Запрос.УстановитьПараметр("Объект", Контрагент);
				Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыДляОбменаДокументами);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				АдресЭлПочтыКонтрагента = "";
				Если Выборка.Следующий() тогда
					АдресЭлПочтыКонтрагента = СокрЛП(выборка.Представление);
				Иначе
					Предупреждение("У контрагента "+строка(Контрагент)+" не задан эл.адрес.
					|Отправка письма невозможна.",30);
					Возврат;
				КонецЕсли;
				
				Ответ = КодВозвратаДиалога.Нет;
	//			Если Вопрос("Вы действительно хотите отправить ""Предупредительное письмо""
				Если Вопрос("Вы действительно хотите отправить Письмо контрагенту

					|для "+строка(Контрагент)+"
					|на адрес эл.почты: "+АдресЭлПочтыКонтрагента+"?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Нет тогда
					Возврат;
				КонецЕсли;
				
				
				Состояние("Идет отправка письма...");  i=0;
				
				СписокФайловВложений = Новый СписокЗначений;			
				СписокФайловВложений.Добавить(ИмяФайла);
				
				
				Если   ОписаниеСобытия = "Письмо о приближении срока оплаты" Тогда  
				ТекстСообщения0 ="   Добрый день,
				|
				|Высылаем Вам письмо о приближении срока оплаты.
				|
				|
				|С уважением,
				|менеджер "+ Ответственный.Наименование+",
				|
				|ЗАО Торговая Компания ""Яршинторг"", 
				|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
				|тел./факс: (4852) 200-200, 67-11-67
				|Web-сайт : http://www.yst.ru
				|";
				
				иначе
				ТекстСообщения0 ="   Добрый день,
				|
				|Высылаем Вам письмо о наличии просроченной дебиторской задолженности.
				|
				|
				|С уважением,
				|менеджер "+ Ответственный.Наименование+",
				|
				|ЗАО Торговая Компания ""Яршинторг"", 
				|юр./факт.адрес: 150044, Ярославская обл, Ярославль г, Базовая ул, дом № 3, стр.2
				|тел./факс: (4852) 200-200, 67-11-67
				|Web-сайт : http://www.yst.ru
				|";
				конецЕсли;
				
				ИПП=Новый ИнтернетПочтовыйПрофиль;
				ИПП.АдресСервераSMTP=УЗ.SMTPСервер;
				ИПП.ПортSMTP=УЗ.ПортSMTP;
				Если УЗ.ТребуетсяSMTPАутентификация Тогда
					ИПП.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
					ИПП.ПарольSMTP         = УЗ.ПарольSMTP;
					ИПП.ПользовательSMTP   = УЗ.ЛогинSMTP;
				Иначе
					ИПП.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
					ИПП.ПарольSMTP         = "";
					ИПП.ПользовательSMTP   = "";
				КонецЕсли;
				Письмо=Новый ИнтернетПочтовоеСообщение;
				Письмо.Отправитель=УЗ.АдресЭлектроннойПочты;
				
				i = Найти(АдресЭлПочтыКонтрагента,";"); j=Найти(АдресЭлПочтыКонтрагента, ",");
				k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
				
				Если i=0 и j=0 тогда
					Письмо.Получатели.Добавить(АдресЭлПочтыКонтрагента);
				иначе
					АдрОстаток = СокрЛП(АдресЭлПочтыКонтрагента);
					пока (k>0) цикл
						Адр1 = Лев(АдрОстаток, k-1);
						Если СокрЛП(Адр1)<>"" и Найти(Адр1,"@")>0 и Найти(Адр1,".")>0 тогда
							Письмо.Получатели.Добавить(Адр1);
						иначе
							Сообщить("Адрес '"+Адр1+"' не содержит @ или .");
						КонецЕсли;
						АдрОстаток = Прав(АдрОстаток, стрДлина(АдрОстаток)-k);
						i = Найти(АдрОстаток,";"); j=Найти(АдрОстаток, ",");
						k=?(i>0 и i>j,  i, ?(j>0 и j>i, j, 0) );
					КонецЦикла;
					Если СокрЛП(АдрОстаток)<>"" и Найти(АдрОстаток,"@")>0 и Найти(АдрОстаток,".")>0 тогда
						Письмо.Получатели.Добавить(АдрОстаток);
					КонецЕсли;
					
				КонецЕсли; //+++ )
				
				Если ЗначениеЗаполнено(СписокФайловВложений) И СписокФайловВложений.Количество()>0 Тогда
					Для Каждого ТекАдр Из СписокФайловВложений Цикл
						Письмо.Вложения.Добавить(ТекАдр.Значение);
					КонецЦикла;
				КонецЕсли;
				Если   ОписаниеСобытия = "Письмо о приближении срока оплаты" Тогда  
                Письмо.Тема = "Письмо о приближении срока оплаты";
				иначе	
				Письмо.Тема = "Письмо должнику";
				конецЕсли;
				
				Письмо.ИмяОтправителя ="ЗАО ТК ""Яршинторг"", г.Ярославль";
				Письмо.Организация ="ЗАО ТК ""Яршинторг"", г.Ярославль";
				Письмо.Тексты.Добавить(ТекстСообщения0,ТипТекстаПочтовогоСообщения.простойТекст);
				
				Почта=Новый ИнтернетПочта;
				Почта.Подключиться(ИПП);
				
				Попытка
					Почта.Послать(Письмо);
					Почта.Отключиться();
					Предупреждение("Отправка файла "+ИмяФайла+" 
					|на эл.адрес: "+АдресЭлПочтыКонтрагента+" завершена");
					СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено;
					ЭтотОбъект.Записать();
				Исключение
					Сообщить("Не удалось отправить письмо! "+ОписаниеОшибки(), СтатусСообщения.Внимание);
				КонецПопытки;
				Состояние(" ");
			Иначе
				Сообщить("Не обнаружено файлов, связанным с данным документом.");
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
				Возврат;
			КонецЕсли; 
			
			ТаблицаПолучателей = ОпределитьПолучателейВстроенногоКлиента();
			
			СтруктураНовогоПисьма = Новый Структура("Основание", Ссылка);
			Если НЕ ПустаяСтрока(ОписаниеСобытия) Тогда
				СтруктураНовогоПисьма.Вставить("Тема", ОписаниеСобытия);
			КонецЕсли;
			
			Если ТаблицаПолучателей.Количество() = 1 Тогда
				СписокКому = Новый СписокЗначений;
				СписокКому.Добавить(ТаблицаПолучателей[0].Адрес, ?(ТипЗнч(ТаблицаПолучателей[0].Объект) = Тип("Строка"), ТаблицаПолучателей[0].Объект, ТаблицаПолучателей[0].Объект.Наименование));
				СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
				АдрКнига = Неопределено;
			ИначеЕсли ТаблицаПолучателей.Количество() > 1 Тогда
				АдрКнига = Обработки.АдреснаяКнига.Создать();
				Для каждого СтрокаТаблицы Из ТаблицаПолучателей Цикл
					НоваяСтрока = АдрКнига.Кому.Добавить();
					НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.Адрес;
					НоваяСтрока.Объект = СтрокаТаблицы.Объект;
					НоваяСтрока.ПредставлениеОбъекта = СтрокаТаблицы.Объект.Наименование;
				КонецЦикла; 
			КонецЕсли; 
			
			СтруктураПисьма = НаписатьПисьмо(глТекущийПользователь,СтруктураНовогоПисьма,,, (ТаблицаПолучателей.Количество() > 0),,, Истина);
			Если ТипЗнч(СтруктураПисьма) = Тип("Структура") Тогда
				ФормаПисьма = СтруктураПисьма.Форма;
				Если АдрКнига <> Неопределено Тогда
					ФормаПисьма.ОткрытьАдреснуюКнигу("Кому", АдрКнига);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента ДействияФормы.СписокСобытийКонтрагента.
//
Процедура ДействияФормыСписокСобытийКонтрагента(Кнопка)
	
	ФормаСобытий = Документы.Событие.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		ФормаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
		
		ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
		
		ФормаСобытий.Открыть();
	
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Строка") Тогда
		
		ФормаСобытий.Отбор.Контрагент.Использование = Истина;
		ФормаСобытий.Отбор.Контрагент.Значение      = Контрагент;
		
		ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		
		ФормаСобытий.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события элемента ДействияФормы.ДокументыКонтрагента.
//
Процедура ДействияФормыДокументыКонтрагента(Кнопка)
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
		
		ФормаЖурнала.ЭлементыФормы.ЖурналДокументовСписок.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
		
		ФормаЖурнала.Открыть();
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Строка") Тогда
		
		ФормаЖурнала.Отбор.Контрагент.Использование = Истина;
		ФормаЖурнала.Отбор.Контрагент.Значение      = Контрагент;
		
		ФормаЖурнала.ЭлементыФормы.ЖурналДокументовСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		
		ФормаЖурнала.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ВидОбъекта.
//
Процедура ВидОбъектаПриИзменении(Элемент)
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча И СторонниеЛица.Количество() <> 0 Тогда
		
		НадоСпрашивать = Ложь;
		
		Если (ТипЗнч(СторонниеЛица[0].Лицо) = Тип("СправочникСсылка.КонтактныеЛица") И ВидОбъекта <> Перечисления.ВидыОбъектовСобытия.Контрагент) Тогда
			НадоСпрашивать = Истина;
		КонецЕсли;
		
		Если НадоСпрашивать Тогда
			
			ТекстВопроса = "При изменении вида объекта будет очищена таблица " + """" + ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок + """" + ". Продолжить?";
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			
				Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
					Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
						ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
					Иначе
						ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
					КонецЕсли; 
				КонецЕсли;
				
				Возврат;
			
			КонецЕсли; 
		
		КонецЕсли; 
		
		СторонниеЛица.Очистить();
		
	КонецЕсли;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") И ТипЗнч(Контрагент) <> Тип("Строка") Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
			Если ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
				КонтактноеЛицо = "";
			КонецЕсли; 
		Иначе
			Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			ИначеЕсли КонтактноеЛицо.ОбъектВладелец <> Контрагент Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		ИначеЕсли КонтактноеЛицо.ВидКонтактногоЛица <> Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ВидимостьЭлементовФормы();
	ОбновитьКонтактнуюИнформацию();

	мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо = КонтактноеЛицо;
	мПоследнееЗначениеЭлементаТайпингаКонтрагент     = Контрагент;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ВидОбъекта.
//
Процедура ВидОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидСобытия.
//
Процедура ВидСобытияПриИзменении(Элемент)
	
	ДоступностьКнопокПочты();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ТипСобытия.
//
Процедура ТипСобытияПриИзменении(Элемент)
	
	ДоступностьКнопокПочты();
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Основание.
//
Процедура ОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Элемент.Значение = Неопределено Тогда
		
		СписокТиповДокументов = Новый СписокЗначений;

		Для каждого ТипДокумента Из Элемент.ТипЗначения.Типы() Цикл
			ДокументСсылка = Новый(ТипДокумента);
			СписокТиповДокументов.Добавить(ДокументСсылка.Метаданные().Имя, ДокументСсылка.Метаданные().Синоним);
		КонецЦикла;

		Если Элемент.Значение <> Неопределено Тогда
			НачальноеЗначениеСписка = СписокТиповДокументов.НайтиПоЗначению(Элемент.Значение.Метаданные().Имя);
		КонецЕсли; 

		СписокТиповДокументов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ВыбранноеЗначение = ЭтаФорма.ВыбратьИзСписка(СписокТиповДокументов, Элемент, НачальноеЗначениеСписка);
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ФормаВыбора = Документы[ВыбранноеЗначение.Значение].ПолучитьФормуВыбора(, Элемент);

	Иначе

		ФормаВыбора = Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(, Элемент);
		
	КонецЕсли; 
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ ВРЕМЁН СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы НачалоСобытия.
//
Процедура НачалоСобытияПриИзменении(Элемент)
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВремяНапоминания.
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора элемента формы ВремяНапоминания.
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НапомнитьОСобытии.
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = Дата(НачалоСобытия - ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ИнтервалНапоминанияДоНачалаСобытия")*60);
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ВремяНапоминания.
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ КОНТРАГЕНТА СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы Контрагент.
//
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ЗначениеНеЗаполнено(Контрагент) Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		Иначе
			Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") ИЛИ (ТипЗнч(КонтактноеЛицо) <> Тип("Строка") И (ЗначениеНеЗаполнено(КонтактноеЛицо) ИЛИ КонтактноеЛицо.ОбъектВладелец <> Контрагент)) Тогда
				Попытка
					КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
				Исключение
					// Из-за ограничения прав на уровне записей прочитать не смогли
				КонецПопытки;
			КонецЕсли; 
		КонецЕсли;
		Попытка
			Если НЕ ЗначениеНеЗаполнено(ИсточникИнформацииПриОбращении) И НЕ ЗначениеНеЗаполнено(Контрагент.ИсточникИнформацииПриОбращении) Тогда
				ИсточникИнформацииПриОбращении = Справочники.ИсточникиИнформацииПриОбращенииПокупателей.ПустаяСсылка();
			КонецЕсли; 
		Исключение
			// Из-за ограничения прав на уровне записей прочитать не смогли
		КонецПопытки;
	Иначе
		Если ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
			КонтактноеЛицо = "";
		КонецЕсли;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента = Контрагент;
	КонецЕсли; 
	
	ДоступностьИсточникаИнформации();
	
	ОбновитьКонтактнуюИнформацию();
	
	мПоследнееЗначениеЭлементаТайпингаКонтрагент = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы Контрагент.
//
Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Открытие элемента формы Контрагент.
//
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		ОбновлятьДанные = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально();
		Если ОбновлятьДанные = Истина Тогда
			Модифицированность = Истина;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		КонецЕсли; 
		ОбновитьКонтактнуюИнформацию();
		
	Иначе
		
		Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		
			СтандартнаяОбработка = Ложь;
			
			Попытка
				ФормаКонтрагента = Элемент.Значение.ПолучитьФорму();
				ФормаКонтрагента.ЭлементыФормы.Панель.ТекущаяСтраница = ФормаКонтрагента.ЭлементыФормы.Панель.Страницы.Контакты;
				ФормаКонтрагента.Открыть();
			Исключение
				СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы Контрагент.
//
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, Новый Структура, Тип("СправочникСсылка.Контрагенты"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.Контрагенты"), мТайпингКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагент, Ложь);
		Возврат;
	КонецЕсли; 
	
	РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мТайпингКонтрагента, мТекстТайпингаКонтрагента, мПоследнееЗначениеЭлементаТайпингаКонтрагент, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента);
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.Контрагент.
//
Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура, Тип("СправочникСсылка.Контрагенты"));
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ КОНТАКТНОЕ ЛИЦО СОБЫТИЯ

// Обработчик события НачалоВыбора элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		НачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			Если Элемент.Значение.ВидКонтактногоЛица <> Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
					Элемент.Значение = "";
				Иначе
					Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
				КонецЕсли;
				Возврат;
			КонецЕсли; 
		ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
			Если Элемент.Значение.ВидКонтактногоЛица <> Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо Тогда
				Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
				Возврат;
			КонецЕсли; 
		Иначе
			Элемент.Значение = Справочники.ФизическиеЛица.ПустаяСсылка();
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
				Элемент.Значение = "";
			Иначе
				Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли;
			Возврат;
		ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
			Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = КонтактноеЛицо;
	КонецЕсли; 
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) И Элемент.Значение.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
				Контрагент = Элемент.Значение.ОбъектВладелец;
			КонецЕсли;
		Иначе
			Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
				Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
					Элемент.Значение = "";
					ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = "";
				Иначе
					ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = Элемент.Значение;
				КонецЕсли; 
			Иначе
				Элемент.Значение = Контрагент.ОсновноеКонтактноеЛицо;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	ОбновитьКонтактнуюИнформацию();
	
	мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
		Иначе
			Элемент.Значение = "";
			ФИОКонтактногоЛица = "";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Открытие элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтандартнаяОбработка = Ложь;
			ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
			ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
			ОбновлятьДанные = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально();
			Если ОбновлятьДанные = Истина Тогда
				Модифицированность = Истина;
				Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
				КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
			КонецЕсли; 
			ОбновитьКонтактнуюИнформацию();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактноеЛицо.
//
Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо), ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мТайпингКонтактногоЛица, мТекстТайпингаКонтактногоЛица, мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо, Ложь);
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") ИЛИ ТипЗнч(Контрагент) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
	КонецЕсли; 
	РезультатЗапроса = ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛица"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мТайпингКонтактногоЛица, мТекстТайпингаКонтактногоЛица, мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо, Ложь);
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
	
		ТекстВопроса = "Контактное лицо не найдено." + Символы.ПС + "Зарегистрировать новое контактное лицо?";
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				мТайпингКонтактногоЛица = Истина;
				мТекстТайпингаКонтактногоЛица = Текст;
			Иначе
				Значение = мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо;
			КонецЕсли; 
			Возврат;
		КонецЕсли;
		
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
		НовоеКонтактноеЛицо.ОбъектВладелец     = Контрагент;
		НовоеКонтактноеЛицо.Наименование       = Текст;
		НовоеКонтактноеЛицо.Фамилия            = Текст;
		ФормаКонтактногоЛица = НовоеКонтактноеЛицо.ПолучитьФорму(, ЭтаФорма);
		ФормаКонтактногоЛица.ТекущийЭлемент = ФормаКонтактногоЛица.ЭлементыФормы.Фамилия;
		ФормаКонтактногоЛица.ОткрытьМодально();
		
		Если НовоеКонтактноеЛицо.ЭтоНовый() Тогда
			мТайпингКонтактногоЛица = Истина;
			мТекстТайпингаКонтактногоЛица = Текст;
			Возврат;
		КонецЕсли;
		
		Значение = НовоеКонтактноеЛицо.Ссылка;
		
	Иначе
		
		Значение = Текст;
		
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.КонтактноеЛицо.
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураПараметров = Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
			Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
				СтруктураПараметров.Вставить("ОбъектВладелец", Контрагент);
			КонецЕсли; 
			АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛица"));
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо), Тип("СправочникСсылка.КонтактныеЛица"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ СТОРОННИХ ЛИЦ СОБЫТИЯ

// Обработчик события НачалоВыбора элемента формы СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		НачалоВыбораПрочегоКонтактногоЛица(Элемент, СтандартнаяОбработка);
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент)
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы СторонниеЛица.Контрагент.
//
Процедура СторонниеЛицаКонтрагентПриИзменении(Элемент)

	Если НЕ Элемент.Значение.Пустая() И ЭлементыФормы.СторонниеЛица.ТекущиеДанные <> Неопределено И НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо) И ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо.ОбъектВладелец <> Элемент.Значение Тогда
		ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Очистка элемента формы СторонниеЛица.Контрагент.
//
Процедура СторонниеЛицаКонтрагентОчистка(Элемент, СтандартнаяОбработка)

	Если ЭлементыФормы.СторонниеЛица.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы СторонниеЛица.
//
Процедура СторонниеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.Лицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент
		   И ТипЗнч(Контрагент) = ТипЗнч("СправочникСсылка.Контрагенты")
		   И НЕ ЗначениеНеЗаполнено(Контрагент)
		   И Элемент.ТекущиеДанные.Контрагент.Пустая() Тогда
			Элемент.ТекущиеДанные.Контрагент = Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) И Элемент.Значение.ОбъектВладелец <> ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент Тогда
			ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент = Элемент.Значение.ОбъектВладелец;
		КонецЕсли;
	КонецЕсли;
	
	мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицоТЧ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент) Тогда
			СтруктураПараметров.Вставить("ОбъектВладелец", ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент);
		КонецЕсли; 
	Иначе
		СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
	КонецЕсли; 
	
	АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы СторонниеЛица.СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента);
		Если НЕ ЗначениеНеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент) Тогда
			СтруктураПараметров.Вставить("ОбъектВладелец", ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент);
		КонецЕсли; 
	Иначе
		СтруктураПараметров.Вставить("ВидКонтактногоЛица", Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо);
	КонецЕсли; 
	
	ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мТайпингКонтактногоЛицаТЧ, мТекстТайпингаКонтактногоЛицаТЧ, мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицоТЧ, Ложь)
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы СторонниеЛица.СторонниеЛица.
//
Процедура СторонниеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицоТЧ = Элемент.ТекущиеДанные.Лицо;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ЗаказыПокупателейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	 	ОформлениеСтроки.Ячейки.Контрагент.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Контрагент.Текст = ДанныеСтроки.Документ.Контрагент;
	 	ОформлениеСтроки.Ячейки.Договор.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Договор.Текст = ДанныеСтроки.Документ.договорКонтрагента;
	 	ОформлениеСтроки.Ячейки.Сумма.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Сумма.Текст = ДанныеСтроки.Документ.СуммаДокумента;
КонецПроцедуры


Процедура ЗаказыПокупателейДокументОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ЗаказыПокупателейДокументОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ЗаказыПокупателейДокументПриИзменении(Элемент)
	отказ = истина;
КонецПроцедуры

Процедура СодержаниеСобытияОткрытие(Элемент, СтандартнаяОбработка)
	
	текстПоиска = "Файл(в папке): ";  
	i=найти(СодержаниеСобытия,текстПоиска);
	Если i>0 тогда //16.08.2017
		СтандартнаяОбработка = ЛОЖЬ;
		текст1 = Прав(СодержаниеСобытия, стрДлина(СодержаниеСобытия)+1 - i  - стрДлина(текстПоиска) );
		ЗапуститьПриложение(текст1);
	КонецЕсли;	
	
КонецПроцедуры

мЧас = 0;
мМинута = 0;

мОбновлятьВладельца = Ложь;

мНачалоСобытия = Неопределено;

мТайпингКонтрагента = Ложь;
мТекстТайпингаКонтрагента = "";
мПоследнееЗначениеЭлементаТайпингаКонтрагент = Неопределено;

мТайпингКонтактногоЛица = Ложь;
мТекстТайпингаКонтактногоЛица = "";
мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицо = Неопределено;

мТайпингКонтактногоЛицаТЧ = Ложь;
мТекстТайпингаКонтактногоЛицаТЧ = "";
мПоследнееЗначениеЭлементаТайпингаКонтактноеЛицоТЧ = Неопределено;
