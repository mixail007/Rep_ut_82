Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТабЗатрат;
Перем УчетнаяПолитикаБух;
Перем мКурсДокумента;
Перем мКратностьДокумента;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
Функция СрокЭксплуатацииСтрокой(ДатаПередачи,ДатаВвода)

	ВремяРаботы = Год(ДатаПередачи)*12+Месяц(ДатаПередачи) - Год(ДатаВвода)*12- Месяц(ДатаВвода);
	ЛетРаботы	= Цел(ВремяРаботы/12);
	Месяцев		= ВремяРаботы - ЛетРаботы*12;
	Возврат "" + ЛетРаботы + " лет " + Месяцев + " мес.";
	
КонецФункции


// Функция формирует табличный документ с печатной формой ОС-1,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма ОС-1
//
Функция ПечатьОС1(ПечатьПоДаннымУпрУчета = Истина)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПередачаОС.Дата          КАК ДатаДок,
	|	ПередачаОС.Номер         КАК НомерАкта,
	|	ПередачаОС.Ответственный КАК Ответственный,
	|	ПередачаОС.Организация   КАК Организация,
	|	ПередачаОС.Организация.КодПоОКПО		  КАК СдатчикКодПоОКПО,
	|	ПередачаОС.Организация.НаименованиеПолное КАК НаимСдатчика,
	|	ПередачаОС.Подразделение 				  КАК ПодрСдатчика,
	|	ПередачаОС.Контрагент.НаименованиеПолное  КАК ОрганизацияПолучатель,
	|	ПередачаОС.Контрагент 					  КАК Контрагент,
	|	ПередачаОС.Контрагент.КодПоОКПО			  КАК ПолучательКодПоОКПО,
	|	ПередачаОС.Дата          				  КАК ДатаПередачи
	|ИЗ
	|	Документ.ПередачаОС КАК ПередачаОС
	|ГДЕ
	|	Ссылка = &Ссылка";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	ВыборкаОС.Следующий();
	
	СведенияОПоставщикеПолучателе = ПолучитьСведенияОПоставщикеПолучателе(ВыборкаОС.Организация,ВыборкаОС.Контрагент,ВыборкаОС.ДатаДок);

	Запрос = Новый Запрос();
	
	Если ПечатьПоДаннымУпрУчета тогда
//		
		кВидуУчета			= "управленческому";
		cВидаУчета			= "управленческого";
		кВидуУчетаПеренос	= "управ- ленческому";
		ВалютаПечати = Константы.ВалютаУправленческогоУчета.Получить();
//		
		НазваниеРегистраМестонахождение		 = "МестонахождениеОС";
		НазваниеРегистраПараметрыАмортизации = "ПараметрыАмортизацииОС";
		НазваниеАмортизации 				 = "Амортизация";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяц";
		НазваниеСтоимости		   = "Стоимость";	
		УсловиеОрганизацияОС	   = "";
		СоединениеПоСчетам = "";
		СтрокиСчетов	   = "";
	Иначе
//		
		кВидуУчета			= "бухгалтерскому";
		cВидаУчета			= "бухгалтерского";
		кВидуУчетаПеренос	= "бухгал- терскому";
		ВалютаПечати		= Константы.ВалютаРегламентированногоУчета.Получить();
//		
		НазваниеРегистраПараметрыАмортизации = "ПараметрыАмортизацииОСБухгалтерскийУчет";
		НазваниеРегистраМестонахождение		 = "МестонахождениеОСБухгалтерскийУчет";
		НазваниеАмортизации = "АмортизацияБУ";
		НазваниеАмортизацииЗаМесяц = "АмортизацияЗаМесяцБУ";
		НазваниеСтоимости		   = "СтоимостьБУ";	
		УсловиеОрганизацияОС	   = " И ПараметрыАмортизацииОСБухгалтерскийУчет.Организация = &Организация ";
		СтрокиСчетов	   = "	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СубСчет,
							  |	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,";
		СоединениеПоСчетам = "		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Дата,
							 |Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОС
							 |		ПО ПередачаОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство";
		Запрос.УстановитьПараметр("Организация",ВыборкаОС.Организация);
		Запрос.УстановитьПараметр("Дата",ВыборкаОС.ДатаДок);
	КонецЕсли;
	
	СтруктураВалютыПечати = ПолучитьКурсВалюты(ВалютаПечати, Дата);
	КурсВалютыПечати	  = СтруктураВалютыПечати.Курс;
	КратностьВалютыПечати = СтруктураВалютыПечати.Кратность;
	
	СтруктураВалютыДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВалютыДокумента		 = СтруктураВалютыДокумента.Курс;
	КратностьВалютыДокумента = СтруктураВалютыДокумента.Кратность;
	
	Коэф1 = КурсВалютыПечати * КратностьВалютыДокумента;
	
	Если Коэф1<>0 тогда
		КоэффициентПересчетаВалюты = (КурсВалютыДокумента * КратностьВалютыПечати) / (Коэф1);
	Иначе
		КоэффициентПересчетаВалюты = 0;
	КонецЕсли;

	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("КонДата",   Дата);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты", КоэффициентПересчетаВалюты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаОСОС.НомерСтроки КАК Нс,
	|	ПередачаОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	(ПередачаОСОС."+НазваниеСтоимости+" - ПередачаОСОС."+НазваниеАмортизации+" - ПередачаОСОС."+НазваниеАмортизацииЗаМесяц+") КАК ОстСтоимость,
	|	ПередачаОСОС."+НазваниеАмортизации+" КАК НачАмортизация,
	|	ПередачаОСОС."+НазваниеАмортизации+" КАК Амортизация,
	|	ПередачаОСОС."+НазваниеАмортизацииЗаМесяц+" КАК АмортизацияЗаМесяц,
	|	ПередачаОСОС.Сумма * &КоэффициентПересчетаВалюты  КАК ЦенаПродажи,
	|	ПередачаОСОС.СтавкаНДС,
	|	ПередачаОСОС.СуммаНДС,
	|	ПередачаОСОС.ОсновноеСредство.Код				 КАК ИнвНомерУпр,
	|	ПередачаОСОС.ОсновноеСредство.ГруппаОС			 КАК ГруппаОС,
	|	ПередачаОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
	|	ПередачаОСОС.ОсновноеСредство.АмортизационнаяГруппа.Порядок + 1 КАК НомерГруппы,
	|	ПередачаОСОС.ОсновноеСредство.ЗаводскойНомер	 КАК ЗаводскойНомер,
	|	ПередачаОСОС.ОсновноеСредство.ДатаВыпуска		 КАК ГодВыпуска,
	|	ПередачаОСОС.ОсновноеСредство.Изготовитель		 КАК Изготовитель,
	|	ПередачаОСОС.ОсновноеСредство.КодПоОКОФ.Код		 КАК КодОКОФ,
	|	"+СтрокиСчетов+"
	|	МестонахождениеОС.Местонахождение,
	|	"+НазваниеРегистраПараметрыАмортизации+".СрокПолезногоИспользования  КАК СрокПолезнИспПриПеред
	|ИЗ
	|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраМестонахождение+".СрезПоследних(&КонДата, ) КАК МестонахождениеОС
	|		ПО ПередачаОСОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+НазваниеРегистраПараметрыАмортизации+".СрезПоследних(&КонДата, ) КАК "+НазваниеРегистраПараметрыАмортизации+"
	|		ПО ПередачаОСОС.ОсновноеСредство = "+НазваниеРегистраПараметрыАмортизации+".ОсновноеСредство "+УсловиеОрганизацияОС+"
	|		"+СоединениеПоСчетам+"
	|ГДЕ
	|	ПередачаОСОС.Ссылка = &Ссылка";
	
	
	РезультатЗапросаПоОС = Запрос.Выполнить();
	
	Если РезультатЗапросаПоОС.Пустой() тогда
		// скорее всего в табличной части документа нет ни строчки
		// или нет записей в регистре
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПоОС = РезультатЗапросаПоОС.Выбрать();

	ДокВвода  = Неопределено;
	ДатаВвода = Дата('00000000');
	
	Если ВыборкаПоОС.Количество() = 1 Тогда

		ВыборкаПоОС.Следующий();
		
		ТабДокумент   = Новый ТабличныйДокумент();
		
		Если НЕ(ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			    ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1";
			Макет         = ПолучитьОбщийМакет("ОС1");

		Иначе // Здание (сооружение)
			
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятиеКУчетуОС_ОС1а";
			Макет      = ПолучитьОбщийМакет("ОС1а");

		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ВыборкаОС);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоОС);
		ОбластьМакета.Параметры.Валюта = ВалютаПечати;
		ОбластьМакета.Параметры.кВидуУчета	 = кВидуУчета;
		ОбластьМакета.Параметры.cВидаУчета	 = cВидаУчета;
		ОбластьМакета.Параметры.НачАмортизация = ВыборкаПоОС.АмортизацияЗаМесяц + ВыборкаПоОС.НачАмортизация;
		
		Если (ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ
			 ВыборкаПоОС.ГруппаОС = Перечисления.ГруппыОС.Сооружения) Тогда

			ОбластьМакета.Параметры.кВидуУчетаПеренос = кВидуУчетаПеренос;

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		
		Если ПечатьПоДаннымУпрУчета тогда
			ОбластьМакета.Параметры.ИнвНомер = ВыборкаПООС.ИнвНомерУпр;
		Иначе
			ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаОС.ДатаДок,Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
			ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
			ОбластьМакета.Параметры.ИнвНомер = ИнвНомерБух;
		КонецЕсли;
		
		СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
		ДокументВвода    = СтруктПараметров["ИмяДок"];
		ДатаВвода        = СтруктПараметров["Дата"];
		
		СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ПринятоКУчету,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
		ОбластьМакета.Параметры.ДатаПринятия = СтруктПараметров["Дата"];
		ОбластьМакета.Параметры.ДатаВвода	 = ДатаВвода;
		
		Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
			ОбластьМакета.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.СрокЭкспл = СрокЭксплуатацииСтрокой(Дата,ДатаВвода);
		
		ТабДокумент.Вывести(ОбластьМакета);

		Возврат ТабДокумент;

	Иначе // Объектов много - групповая печать.

		ОС1б_Страница1 = Новый ТабличныйДокумент();
		ОС1б_Страница2 = Новый ТабличныйДокумент();
		ОС1б_Страница3 = Новый ТабличныйДокумент();
		ОС1б_Страница4 = Новый ТабличныйДокумент();

		МакетОС1б      = ПолучитьОбщийМакет("ОС1б");
		
		Шапка1ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка1");
		Шапка2ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка2");
		Строка2ОС1б    = МакетОС1б.ПолучитьОбласть("Строка2");
		Строка2ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка2П");
		Подвал2        = МакетОС1б.ПолучитьОбласть("Подвал2");
		Шапка3ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка3");
		Строка3ОС1б    = МакетОС1б.ПолучитьОбласть("Строка3");
		Строка3ПОС1б   = МакетОС1б.ПолучитьОбласть("Строка3П");
		Подвал3        = МакетОС1б.ПолучитьОбласть("Подвал3");
		Шапка4ОС1б     = МакетОС1б.ПолучитьОбласть("Шапка4");

		Шапка1ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка1ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка1ОС1б.Параметры.кВидуУчета = кВидуУчета;
		Шапка1ОС1б.Параметры.cВидаУчета = cВидаУчета;
		
		Шапка1ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		
		ОС1б_Страница1.Вывести(Шапка1ОС1б);

		Шапка2ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Шапка2ОС1б);

		Шапка3ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка3ОС1б.Параметры.Валюта = ВалютаПечати;
		Шапка3ОС1б.Параметры.кВидуУчета = кВидуУчетаПеренос;
		ОС1б_Страница3.Вывести(Шапка3ОС1б);

		Шапка4ОС1б.Параметры.Заполнить(ВыборкаОС);
		Шапка4ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		Шапка4ОС1б.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		ОС1б_Страница4.Вывести(Шапка4ОС1б);

		ИтогЦенаПродажи = 0;
		Пока ВыборкаПоОС.Следующий() Цикл

			Строка2ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка2ОС1б.Параметры.Заполнить(ВыборкаПоОС);
		
			Если ПечатьПоДаннымУпрУчета тогда
				Строка2ОС1б.Параметры.ИнвНомер = ВыборкаПоОС.ИнвНомерУпр;
			Иначе
				ВыборкаЗаписей = РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.ПолучитьПоследнее(ВыборкаОС.ДатаДок,Новый Структура("ОсновноеСредство",ВыборкаПоОС.ОсновноеСредство));
				ИнвНомерБух    = ?(ВыборкаЗаписей.Количество() > 0,ВыборкаЗаписей.ИнвентарныйНомер,0);
				Строка2ОС1б.Параметры.ИнвНомер = ИнвНомерБух;
			КонецЕсли;
			ИтогЦенаПродажи = ИтогЦенаПродажи + ВыборкаПоОС.ЦенаПродажи;
			
			Если ПустаяСтрока(ВыборкаПоОС.НаименованиеОС) Тогда
				Строка2ОС1б.Параметры.НаименованиеОС = СокрЛП(ВыборкаПоОС.ОсновноеСредство);
			КонецЕсли;

			ОС1б_Страница2.Вывести(Строка2ОС1б);

			Строка3ОС1б.Параметры.Заполнить(ВыборкаОС);
			Строка3ОС1б.Параметры.Заполнить(ВыборкаПоОС);
			
			СтруктПараметров = ПолучитьАтрибутыСостоянияОС(ВыборкаПоОС.ОсновноеСредство, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,ПечатьПоДаннымУпрУчета,ВыборкаОС.Организация);
			ДатаВвода        = СтруктПараметров["Дата"];
			Строка3ОС1б.Параметры.СрокЭкспл = СрокЭксплуатацииСтрокой(Дата,ДатаВвода);
			Строка3ОС1б.Параметры.НачАмортизация = ВыборкаПоОС.АмортизацияЗаМесяц + ВыборкаПоОС.НачАмортизация;
			ОС1б_Страница3.Вывести(Строка3ОС1б);

		КонецЦикла;

		Строка2ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка2ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Строка2ПОС1б);

		Подвал2.Параметры.Заполнить(ВыборкаОС);
		Подвал2.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница2.Вывести(Подвал2);

		Строка3ПОС1б.Параметры.Заполнить(ВыборкаОС);
		Строка3ПОС1б.Параметры.Заполнить(ВыборкаПоОС);
		ОС1б_Страница3.Вывести(Строка3ПОС1б);

		Подвал3.Параметры.Заполнить(ВыборкаОС);
		Подвал3.Параметры.Заполнить(ВыборкаПоОС);
		Подвал3.Параметры.Заполнить(СведенияОПоставщикеПолучателе);
		Подвал3.Параметры.ИтогЦенаПродажи = ИтогЦенаПродажи;
		
		ОС1б_Страница3.Вывести(Подвал3);

		//НапечататьДокумент(ОС1б_Страница4, , , "Форма ОС-1б. Страница 4", Ссылка);
		//НапечататьДокумент(ОС1б_Страница3, , , "Форма ОС-1б. Страница 3", Ссылка);
		//НапечататьДокумент(ОС1б_Страница2, , , "Форма ОС-1б. Страница 2", Ссылка);
		//НапечататьДокумент(ОС1б_Страница1, , , "Форма ОС-1б. Страница 1", Ссылка);

		Возврат Неопределено;

	КонецЕсли;

КонецФункции // ПечатьОС1()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли; 

	//Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//// Получить экземпляр документа на печать
	//Если ИмяМакета = "ОС1упр" тогда
	//	ТабДокумент = ПечатьОС1();
	//ИначеЕсли ИмяМакета = "ОС1бух" тогда
	//	ТабДокумент = ПечатьОС1(Ложь);
	//ИначеЕсли ИмяМакета = "РасчетУЕ" тогда
	//	
	//	// Расчет справка при расчетах по договору в условных единицах
	//	ПечатьСправкаРасчетУЕРегл(Ссылка);
	//	Возврат;
	//	
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли; 
	//
	//КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//СтруктураМакетов = Новый Структура;

	//Если  ОтражатьВУправленческомУчете тогда 
	//	СтруктураМакетов.Вставить("ОС1упр","Форма ОС-1(упр. учет)");
	//КонецЕсли;
	//Если  ОтражатьВБухгалтерскомУчете тогда 
	//	СтруктураМакетов.Вставить("ОС1бух","Форма ОС-1(бух. учет)");
	//	СтруктураМакетов.Вставить("РасчетУЕ","Расчет-справка при расчетах в условных единицах");
	//КонецЕсли;
	//
	//Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" и "КоличествоДопРасходы".
	ТаблицаТоваров.Колонки.Добавить("КоличествоДопРасходы", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											мКурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
											мКратностьДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов);
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											мКурсДокумента, КурсВзаиморасчетов,
											мКратностьДокумента, КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 мКурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 мКратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов);

		НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 мКурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
		                                 мКратностьДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СуммаБезНДС + НДС;

		СтрокаТаблицы.КоличествоДопРасходы = 0;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	//ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    ПолучитьОписаниеТиповЧисла(15,2));
	//ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", ПолучитьОписаниеТиповЧисла(15,2));

	//ВалютаРег = мВалютаРегламентированногоУчета;
	//Данные    = ПолучитьКурсВалюты(ВалютаРег, Дата);

	//// Надо заполнить новые колонки.
	//Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

	//	НДС   = СтрокаТаблицы.НДС;
	//	Сумма = СтрокаТаблицы.СуммаБезНДС;

	//	// Суммы пересчитаем в валюту упр. учета
	//	Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
	//		СтрокаТаблицы.ПроводкаСумма    = Сумма;
	//		СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
	//	Иначе
	//		СтрокаТаблицы.ПроводкаСумма    = ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,ВалютаРег,
	//										 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
	//										 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
	//		СтрокаТаблицы.ПроводкаСуммаНДС = ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
	//										 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
	//										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
	//	КонецЕсли;

	//КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	//Перем Счет91, Счет90_03;
	//
	//Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	//Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	//
	//ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	//ТаблицаДвижений = новый ТаблицаЗначений();
	//
	//ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	//
	//ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	//
	//ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	//ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	//
	//ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	//ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//
	//ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	//ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//
	//ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	//
	//ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, ПолучитьОписаниеТиповЧисла(15,2));
	//ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, ПолучитьОписаниеТиповЧисла(15,2));
	//
	//ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, ПолучитьОписаниеТиповЧисла(15,2));
	//
	//ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//
	//ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
	//	
	//	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
	//	
	//КонецЕсли;
	//
	//ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	//ПереименованиеКолонокРезультирующейТаблицы.Вставить("Номенклатура", "ОсновноеСредство");
	//ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	//ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	//ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	//
	//ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	//
	//ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	//
	//НаборТаблиц = Новый Массив;
	//НаборТаблиц.Добавить(ТаблицаПоТоварам);
	//
	//Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
	//	
	//	Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
	//		СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
	//		
	//		СтрокаНовойТаблицы.СчетНДС = ?(ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
	//		
	//		СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
	//		СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
	//		
	//		КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
	//		
	//		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
	//			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
	//			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
	//				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
	//			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
	//				СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
	//			Конецесли;
	//		КонецЦикла; 
	//		
	//		КоррСчет = СтрокаНовойТаблицы.СчетНДС;
	//		
	//		Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
	//			ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
	//			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
	//				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
	//			ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
	//				СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
	//			Конецесли;
	//		КонецЦикла; 
	//		
	//		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
	//			КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
	//			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
	//				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
	//				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
	//					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
	//				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.ОсновноеСредство)) Тогда
	//					СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.ОсновноеСредство;
	//				Конецесли;
	//			КонецЦикла; 
	//		КонецЕсли;
	//	КонецЦикла; 
	//КонецЦикла; 
	//
	//ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	//
	//ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	//ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	//НеЧисловыеКолонкиСтрокой = "";
	//Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
	//	Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
	//		НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
	//	КонецЕсли;  
	//КонецЦикла;
	//
	//Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
	//	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	//Иначе //.ПоСчетам или .ПоЗаказам Тогда
	//	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	//КонецЕсли;
	//
	//НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	//ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	//
	//Возврат ТаблицаДвижений;
	
КонецФункции

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, СтруктураШапкиДокумента.КурсВзаиморасчетов, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПоТекущемуДокументу, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Сделка, "Сделка");
	КонецЕсли;
	
	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
		
		СтруктураОбязательныхПолей.Вставить("Событие");
		
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

	//	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
	//
	//		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");

	//	КонецЕсли;
	//	СтруктураОбязательныхПолей.Вставить("СобытиеРегл");
	//	СтруктураОбязательныхПолей.Вставить("Организация");

	//КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		|Заполните поле ""Заказ покупателя""!");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.Событие.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.Событие.ВидСобытияОС,
							  Перечисления.ВидыСобытийОС.Передача,
							  ПредставлениеРеквизита,Отказ);

	//Если СтруктураШапкиДокумента.Событие.УдалитьВидСостоянияОС <> Перечисления.УдалитьВидыСостоянийОС.СнятоСУчета Тогда
	//	ОшибкаПриПроведении("Вид состояния, в которое переводится ОС должен быть <Снято с учета>!", Отказ, Заголовок);
	//КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	ПредставлениеРеквизита = ЭтотОбъект.Метаданные().Реквизиты.СобытиеРегл.Представление();
	ПроверкаЗаполненияСобытий(СтруктураШапкиДокумента.СобытиеРегл.ВидСобытияОС,
								  Перечисления.ВидыСобытийОС.Передача,
								  ПредставлениеРеквизита,Отказ);

	//Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
	//	ОшибкаПриПроведении("Не заполнено поле Организация", Отказ,Заголовок);
	//КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

	//	СтруктураОбязательныхПолей.Вставить("СчетДоходовБУ");
	//	СтруктураОбязательныхПолей.Вставить("СчетРасходовБУ");

	//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//		СтруктураОбязательныхПолей.Вставить("СчетДоходовНУ");
	//		СтруктураОбязательныхПолей.Вставить("СчетРасходовНУ");
	//	КонецЕсли;

	//КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "ОС";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОсновноеСредство, Сумма");

	Если СтруктураШапкиДокумента.УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	//Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете  Тогда
	//	Возврат;
	//КонецЕсли;

	//Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

	//	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""ОС"": ";

	//	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
	//		Если ЗначениеНеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
	//			СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (БУ)""!";
	//			ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
	//		КонецЕсли;

	//		Если ЗначениеНеЗаполнено(СтрокаТЧ.СчетРасходовБУ) Тогда
	//			СтрокаСообщения = "Не заполнено значение реквизита ""Счет Расходов (БУ)""!";
	//			ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
	//		КонецЕсли;
	//	КонецЕсли;

	//	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

	//		Если ЗначениеНеЗаполнено(СтрокаТЧ.СчетДоходовНУ) Тогда
	//			СтрокаСообщения = "Не заполнено значение реквизита ""Счет доходов (НУ)""!";
	//			ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
	//		КонецЕсли;

	//		Если ЗначениеНеЗаполнено(СтрокаТЧ.СчетРасходовНУ) Тогда
	//			СтрокаСообщения = "Не заполнено значение реквизита ""Счет расходов (НУ)""!";
	//			ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
	//		КонецЕсли;

	//	КонецЕсли;

	//КонецЦикла;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если СуммаВзаиморасчетов < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОшибкаПриПроведении("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							  Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                       ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
						   Отказ, Заголовок);
						   
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);

	// Движения во регистрам подсистемы учета НДС.
	ТаблицаАвансов = Новый ТаблицаЗначений;
	ТаблицаАвансов.Колонки.Добавить("ДокументОплаты");
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаАвансов, Отказ);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	                        ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							Отказ, Заголовок);

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	//ВидДвижения = ВидДвиженияНакопления.Приход;
	//ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	//СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	//
	//ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							  Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	// записи по системе взаиморасчетов

	Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСКонтрагентами.
	НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.

	//Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

	//	ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

	//	// Недостающие поля.
	//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
	//	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	//	ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

	//Иначе
		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
		//СтрокаДвижений.Контрагент  		  = Контрагент;
		//СтрокаДвижений.Организация  	  = Организация;

		СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													мКурсДокумента, КурсВзаиморасчетов,
													мКратностьДокумента, КратностьВзаиморасчетов);
		СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													мКурсДокумента, 
													КурсВзаиморасчетов,
													мКратностьДокумента, 
													КратностьВзаиморасчетов);

	//КонецЕсли;

	НаборДвижений.мПериод              = Дата;
	НаборДвижений.мТаблицаДвижений     = ТаблицаДвижений;
	
	// Проверка осатков при оперативном проведении.
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок)
	КонецЕсли;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

//	Если ЗначениеНеЗаполнено(Сделка) 

//		Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда

//		НаборДвижений = Движения.РасчетыСКонтрагентами;

//		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
//		ТаблицаДвижений = НаборДвижений.Выгрузить();

//		// Заполним таблицу движений.
//		СтрокаДвижений = ТаблицаДвижений.Добавить();

//		СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
//		СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
////		СтрокаДвижений.Контрагент  		   = Контрагент;
////		СтрокаДвижений.Организация  	   = Организация;

//		СтрокаДвижений.Сделка              = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
//		СтрокаДвижений.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
//											 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
//											 мКурсДокумента, КурсВзаиморасчетов,
//											 мКратностьДокумента, КратностьВзаиморасчетов);
//		СтрокаДвижений.СуммаУпр            = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
//											 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
//											 мКурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
//											 мКратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

//		НаборДвижений.мПериод            = Дата;
//		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

//		Если Не Отказ Тогда
//			Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
//		КонецЕсли;

//	КонецЕсли;

	// если ранее подготовка к передачи не была проведена
	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

		// начисленную амортизацию за месяц спишем на затраты
		АмортизацияОС         = Движения.СтоимостьОС;
		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
		ТаблицаДвиженийАмортизация .Очистить();

		// подготовим таблицу с данными по амортизации для списания амортизации по
		// направлениям затрат
		ТабАмортизации = Новый ТаблицаЗначений;
		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТабАмортизации.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла( 15, 2));

		Для каждого СтрокаОС из ТаблицаПоТоварам Цикл

			Если СтрокаОС.АмортизацияЗаМесяцУУ > 0 Тогда

				НоваяСтрока                        = ТабАмортизации.Добавить();
				НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцУУ;
				НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
				ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_УУ");
				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_УУ);
				
				Движение = ТаблицаДвиженийАмортизация.Добавить();
				Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
				Движение.Амортизация               = СтрокаОС.АмортизацияЗаМесяцУУ;
				Движение.Стоимость                 = 0;
			КонецЕсли;

		КонецЦикла;

		// вызов процедуры списания амортизации по направлениям
		СтруктураШапкиДокументаБезВалютыДокумента = Новый Структура;
		Для каждого ТекКлюч Из СтруктураШапкиДокумента Цикл

			Если ТекКлюч.Ключ <> "ВалютаДокумента" Тогда
				СтруктураШапкиДокументаБезВалютыДокумента.Вставить(ТекКлюч.Ключ,ТекКлюч.Значение);
			КонецЕсли;

		КонецЦикла;

		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокументаБезВалютыДокумента);
		
		АмортизацияОС.мПериод          = Дата;
		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
		Движения.СтоимостьОС.ВыполнитьПриход();

	КонецЕсли;

	// даижения регистров по системе ОС
	СобытиеОС               = Движения.СобытияОС;
	СостояниеОС             = Движения.СостоянияОС;
	АмортизацияОС           = Движения.СтоимостьОС;
	НачислениеАмортизацииОС = Движения.НачислениеАмортизацииОС;

	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	ТаблицаДвиженийАмортизация .Очистить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

		ТекОС = СтрокаТЧ.ОсновноеСредство;
		// Движения по регистру НачислениеАмортизацииОС
		Движение = НачислениеАмортизацииОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.НачислятьАмортизацию    = Ложь;
		Движение.НачислятьАмортизациюВТекущемМесяце = Ложь;

		// Движения по регистру CобытияОС
		Движение = СобытиеОС.Добавить();
		Движение.Период            = Дата;
		Движение.ОсновноеСредство  = ТекОС;
		Движение.Событие           = СтруктураШапкиДокумента.Событие;
		Движение.НазваниеДокумента = Метаданные().Представление();
		Движение.НомерДокумента    = Номер;
		
		// Движения по регистру СостоянияОС
		Движение = СостояниеОС.Добавить();
		Движение.Период                  = Дата;
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Состояние               = Перечисления.СостоянияОС.СнятоСУчета;
		Движение.ДатаСостояния			 = Дата;

		// Движения по регистру СтоимостьОС
		Движение = ТаблицаДвиженийАмортизация.Добавить();
		Движение.ОсновноеСредство        = ТекОС;
		Движение.Амортизация             = СтрокаТЧ.АмортизацияУУ+СтрокаТЧ.АмортизацияЗаМесяцУУ;
		Движение.Стоимость               = СтрокаТЧ.СтоимостьУУ;

	КонецЦикла;

	АмортизацияОС.мПериод          = Дата;
	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	Движения.СтоимостьОС.ВыполнитьРасход();

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом,
							  Отказ, Заголовок)

	//Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	Возврат;
	//КонецЕсли;

	//// Проводки по системе взаиморасчетов
	//ПроводкиБУ = Движения.Хозрасчетный;
	//ПроводкиНУ = Движения.Налоговый;

	//ДатаДока   = Дата;

	//ОшибкаПолученияУчетнойПолитики = Ложь;
	//УчетнаяПолитика = ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, ОшибкаПолученияУчетнойПолитики, СтруктураШапкиДокумента.Организация, "Нал");
	//Если ОшибкаПолученияУчетнойПолитики тогда
	//	УчетнаяПолитика = Неопределено;
	//Иначе
	//	УчетнаяПолитика = УчетнаяПолитика.МоментОпределенияНалоговойБазыНДС;
	//КонецЕсли;

	//Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("Ссылка"   , ЭтотОбъект.Ссылка);
	//Запрос.УстановитьПараметр("Кратность", СтруктураШапкиДокумента.КратностьДокумента);
	//Запрос.УстановитьПараметр("Курс"     , СтруктураШапкиДокумента.КурсДокумента);
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	ОсновноеСредство,
	//|	СчетДоходовБУ,
	//|	СубконтоБУ,
	//|	СчетДоходовНУ,
	//|	СубконтоНУ,
	//|	ОсновноеСредство КАК ОсновноеСредство,
	//|	СтавкаНДС КАК СтавкаНДС,
	//|	СУММА(Сумма * &Курс / &Кратность) КАК Сумма,
	//|	СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС
	//|ИЗ
	//|	Документ.ПередачаОС.ОС КАК ПередачаОС
	//|
	//|ГДЕ
	//|	Ссылка = &Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ОсновноеСредство,
	//|	СтавкаНДС,
	//|	ОсновноеСредство,
	//|	СчетДоходовБУ,
	//|	СубконтоБУ,
	//|	СчетДоходовНУ,
	//|	СубконтоНУ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СтавкаНДС";
	//ВыборкаПоГруппам = Запрос.Выполнить().Выгрузить();
	//ВыборкаПоТоварамБУ = ВыборкаПоГруппам.Скопировать();
	//ВыборкаПоТоварамНУ = ВыборкаПоГруппам.Скопировать();
	//ВыборкаПоГруппам.Свернуть("СчетДоходовБУ, СубконтоБУ, СтавкаНДС", "Сумма,СуммаНДС");
	//ВыборкаПоТоварамБУ.Свернуть("СчетДоходовБУ,СубконтоБУ, СтавкаНДС", "Сумма,СуммаНДС");
	//ВыборкаПоТоварамНУ.Свернуть("СчетДоходовНУ,СубконтоНУ,ОсновноеСредство", "Сумма,СуммаНДС");

	//ТекОрганизация = СтруктураШапкиДокумента.Организация;
	//Для каждого СтрокаТЧ Из ВыборкаПоТоварамБУ Цикл

	//	// Выручка
	//	Проводка = ПроводкиБУ.Добавить();
	//	Проводка.Период      = ДатаДока;
	//	Проводка.Активность  = Истина;
	//	Проводка.Организация = ТекОрганизация;
	//	Проводка.Сумма       = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 
	//							 СтрокаТЧ.Сумма, СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС);

	//	Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	//	УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
	//	УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
	//	//Проводка.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
	//	//Проводка.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;

	//	Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
	//		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
	//		Проводка.ВалютнаяСуммаДт = Проводка.Сумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;

	//	КонецЕсли;

	//	Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
	//	УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);

	//	// НДС
	//	Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.СуммаНДС > 0 Тогда

	//		Проводка = ПроводкиБУ.Добавить();

	//		Проводка.Период      = ДатаДока;
	//		Проводка.Активность  = Истина;
	//		Проводка.Организация = СтруктураШапкиДокумента.Организация;

	//		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
	//		Если ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоБУ) Тогда
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
	//		КонецЕсли;

	//		Если УчетнаяПолитика = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
	//			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
	//			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

	//		Иначе
	//			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	//			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
	//			УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);

	//		КонецЕсли;

	//		Проводка.Сумма = СтрокаТЧ.СуммаНДС;

	//	КонецЕсли;

	//КонецЦикла;
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

	//	Для каждого СтрокаТЧ из ВыборкаПоТоварамНУ Цикл

	//		// Налоговый учет
	//		Проводка = ПроводкиНУ.Добавить();

	//		Проводка.Период      = ДатаДока;
	//		Проводка.Организация = СтруктураШапкиДокумента.Организация;

	//		Проводка.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	//		Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
	//		Проводка.СубконтоДт.Контрагенты                = СтруктураШапкиДокумента.Контрагент;
	//		Проводка.СубконтоДт.Договоры                   = СтруктураШапкиДокумента.ДоговорКонтрагента;

	//		Проводка.СчетКт      = СтрокаТЧ.СчетДоходовНУ;
	//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
	//		УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТЧ.ОсновноеСредство);

	//		Проводка.Сумма      = ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 
	//								СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС, СтрокаТЧ.Сумма);
	//	КонецЦикла;

	//КонецЕсли;

	//// Проводки по взаиморасчетам
	//СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,, ТаблицаПоДокументамРасчетовСКонтрагентом);
	//Если СтруктураПараметровЗачетАванса = ложь тогда
	//	Отказ = Истина;
	//	СуммаАванса = 0;
	//Иначе
	//	ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//	СуммаАванса = ЗачетАванса(СтруктураПараметровЗачетАванса,ПроводкиБУ, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект,ДвиженияДляРегистраРасчетовПоРеализации);
	//КонецЕсли;// Проводки по взаиморасчетам
	//
	//Если СуммаАванса > 0 тогда
	//	// При реализации со ставкой 0% необходимо отметить соотв. запись 
	//	// в НДСПокупки событием "Предполагается НДС 0%"

	//КонецЕслИ;

	////Учет суммовых разниц (после формирования всех движений по БУ и НУ (в т.ч. НДС)
	//Если не ((СтруктураПараметровЗачетАванса = Ложь) или значениеНеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
	//	Если СтруктураПараметровЗачетАванса.РасчетыВУсловныхЕдиницах
	//	 ИЛИ УчетнаяПолитикаБух.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияВзаиморасчетовВБухгалтерскомУчете.НаРегистрахНакопления Тогда
	//		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
	//			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ",Движения.Налоговый);
	//		Конецесли;
	//		РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
	//	Конецесли;
	//Конецесли;//Учет суммовых разниц

	////Учет курсовых разниц
	//Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
	//	СтруктураПараметровКР = ПодготовкаСтуктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок,?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Движения.Налоговый,Неопределено));
	//	ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета);
	//КонецЕсли; // Учет курсовых разниц

	//// Движения по регистрам учета ОС и формирование проводок по начислению амортизации и списанию стоимости
	//
	//// получим данные о счетах учета и начисления амортизации по ОС
	//СписокОС = ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство");
	//Запрос   = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	//Запрос.УстановитьПараметр("ТекДата",        Дата);
	//Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство      КАК ОС_БУ,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета             КАК СчетУчетаБУ,
	//|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчетаНУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНУ,
	//|	СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОС_НУ
	//|ИЗ
	//|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	//|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(&ТекДата, (Организация = &ТекОрганизация) И (ОсновноеСредство В (&СписокОС))) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
	//|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство";
	//ТаблицаСчетов  = Запрос.Выполнить().Выгрузить();

	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
	//	
	//	// если ранее подготовка к передачи не была проведена
	//	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
	//		// начисленную амортизацию за месяц спишем на затраты
	//		// подготовим таблицу с данными по амортизации для списания амортизации по 
	//		// направлениям затрат
	//		АмортизацияОС = Движения.СтоимостьОСБухгалтерскийУчет;
	//		ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	//		ТаблицаДвиженийАмортизация.Очистить();
	//		
	//		ТабАмортизации = Новый ТаблицаЗначений;
	//		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	//		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//		ТабАмортизации.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла( 15, 2));
	//		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//		ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	//		
	//		Для Каждого СтрокаОС из ТаблицаПоТоварам Цикл
	//			
	//			Если НЕ (СтрокаОС.АмортизацияЗаМесяцБУ = 0) Тогда
	//				
	//				НоваяСтрока = ТабАмортизации.Добавить();
	//				НоваяСтрока.Сумма       = СтрокаОС.АмортизацияЗаМесяцБУ;
	//				НоваяСтрока.ОбъектУчета = СтрокаОС.ОсновноеСредство;
	//				НоваяСтрока.ИмяСубконто = "ОсновныеСредства";
	//				
	//				ТекНаправление = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
	//				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление = Неопределено,Неопределено,ТекНаправление.Направление_БУ);
	//				
	//				СчетАмортизации = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство,"ОС_БУ");
	//				НоваяСтрока.СчетАмортизации = ?(СчетАмортизации = Неопределено, Неопределено,СчетАмортизации.СчетНачисленияАмортизацииБУ);
	//				
	//				Движение = ТаблицаДвиженийАмортизация.Добавить();
	//				Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
	//				Движение.Организация      = ТекОрганизация;
	//				Движение.Амортизация      = СтрокаОС.АмортизацияЗаМесяцБУ;
	//				Движение.Стоимость        = 0;
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		// вызов процедуры списания амортизации по направлениям
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента,"Бух","ОС");
	//		
	//		АмортизацияОС.мПериод          = Дата;
	//		АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//		
	//		Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьПриход();
	//		
	//	КонецЕсли;
	//	
	//	СобытиеОС             = Движения.СобытияОСОрганизаций;
	//	СостояниеОС           = Движения.СостоянияОСОрганизаций;
	//	АмортизацияОС         = Движения.СтоимостьОСБухгалтерскийУчет;
	//	НачислениеАмортизации = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	//	
	//	ТаблицаДвиженийАмортизация = АмортизацияОС.Выгрузить();
	//	ТаблицаДвиженийАмортизация.Очистить();
	//	
	//	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
	//		
	//		ТекОС = СтрокаТЧ.ОсновноеСредство;
	//		
	//		Если НЕ (СтрокаТЧ.СтоимостьБУ = 0) Тогда
	//			
	//			// Движения по регистру НачислениеАмортизации
	//			Движение = НачислениеАмортизации.Добавить();
	//			Движение.Период               = Дата;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.НачислятьАмортизацию = Ложь;
	//			
	//			// Движения по регистру СобытияОСОрганизаций
	//			Движение = СобытиеОС.Добавить();
	//			Движение.Период               = Дата;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Событие              = СтруктураШапкиДокумента.СобытиеРегл;
	//			Движение.НазваниеДокумента 	  = Метаданные().Представление();
	//			Движение.НомерДокумента		  = Номер;
	//			
	//			// Движения по регистру СостоянияОСОрганизаций
	//			Движение = СостояниеОС.Добавить();
	//			Движение.Период               = Дата;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Состояние            = Перечисления.СостоянияОС.СнятоСУчета;
	//			Движение.ДатаСостояния		  = Дата;
	//			
	//			// Движения по регистру СтоимостьОС
	//			Движение = ТаблицаДвиженийАмортизация.Добавить();
	//			Движение.ОсновноеСредство      = ТекОС;
	//			Движение.Организация           = ТекОрганизация;
	//			Движение.Амортизация           = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
	//			Движение.Стоимость             = СтрокаТЧ.СтоимостьБУ;
	//			Движение.ВидОперации           = Перечисления.ВидыСобытийОС.Передача;
	//			
	//			СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС, "ОС_БУ");
	//			Если СтрокаТЗ <> Неопределено Тогда
	//				СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаБУ;
	//				СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииБУ;
	//			Иначе
	//				ОшибкаПриПроведении("Основное средство " + ТекОс.Наименование +
	//				" не отражалось в бух. учете в организации " + ТекОрганизация, Отказ); 	
	//				Возврат;
	//			КонецЕсли;
	//			
	//			// если ранее подготовка к передачи не была проведена
	//			Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
	//				
	//				// списание амортизации Д 02.01 К 01.09
	//				СуммаПроводки = СтрокаТЧ.АмортизацияБУ + СтрокаТЧ.АмортизацияЗаМесяцБУ;
	//				Если НЕ (СуммаПроводки = 0) Тогда
	//					
	//					Проводка = ПроводкиБУ.Добавить();
	//					
	//					Проводка.Период      = Дата;
	//					Проводка.Активность  = Истина;
	//					Проводка.Организация = ТекОрганизация;
	//					Проводка.Содержание  = "Списана амортизация";
	//					Проводка.СчетДт      = СчетУчетаАмортизации;
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//					Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
	//					Проводка.Сумма       = СуммаПроводки;
	//					
	//				КонецЕсли;
	//				
	//				// списание балансовой стоимости Д 01.09 К 01.01
	//				СуммаПроводки = СтрокаТЧ.СтоимостьБУ;
	//				Если НЕ (СуммаПроводки = 0) Тогда
	//					
	//					Проводка = ПроводкиБУ.Добавить();
	//					
	//					Проводка.Период      = Дата;
	//					Проводка.Организация = ТекОрганизация;
	//					Проводка.Содержание  = "Списана балансовая ст-ть";
	//					Проводка.Сумма       = СтрокаТЧ.СтоимостьБУ;
	//					
	//					Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
	//					
	//					Проводка.СчетКт      = СчетУчетаСтоимости;
	//					УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//			// списание остаточной стоимости Д 91.02 К 09.01
	//			СуммаПроводки = СтрокаТЧ.СтоимостьБУ - СтрокаТЧ.АмортизацияБУ - СтрокаТЧ.АмортизацияЗаМесяцБУ;
	//			
	//			Если НЕ (СуммаПроводки = 0) Тогда
	//				
	//				Проводка = ПроводкиБУ.Добавить();
	//				
	//				Проводка.Период      = Дата;
	//				Проводка.Организация = ТекОрганизация;
	//				Проводка.Содержание  = "Списана ост. стоимость";
	//				Проводка.Сумма       = СуммаПроводки;
	//				
	//				Проводка.СчетДт      = СтрокаТЧ.СчетРасходовБУ;
	//				Если Проводка.СчетДт.ВидыСубконто.Количество() > 0
	//					И Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоБУ) Тогда
	//					УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.СубконтоБУ);
	//				КонецЕсли;
	//				
	//				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	АмортизацияОС.мПериод          = Дата;
	//	АмортизацияОС.мТаблицаДвижений = ТаблицаДвиженийАмортизация;
	//	Движения.СтоимостьОСБухгалтерскийУчет.ВыполнитьРасход();
	//	
	//	Если Не Отказ Тогда
	//		ПРоводкиБУ.Записать(Ложь);
	//	КонецЕсли; 
	//	
	//КонецЕсли;

	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 

	//	// если ранее подготовка к передачи не была проведена
	//	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

	//		АмортизацияОСНУ = Движения.СтоимостьОСНалоговыйУчет;
	//		ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
	//		ТаблицаДвиженийАмортизацияНУ .Очистить();
	//		
	//		ТаблицаДвиженийСтоимостьНУ = ТаблицаДвиженийАмортизацияНУ.Скопировать();

	//		// подготовим таблицу с данными по амортизации для списания амортизации по 
	//		// направлениям затрат
	//		ТабАмортизации = Новый ТаблицаЗначений;
	//		ТабАмортизации.Колонки.Добавить("НаправлениеАмортизации",Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	//		ТабАмортизации.Колонки.Добавить("ОбъектУчета",Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	//		ТабАмортизации.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла( 15, 2));
	//		ТабАмортизации.Колонки.Добавить("СчетУчетаНУ");
	//		ТабАмортизации.Колонки.Добавить("СчетАмортизации");
	//		ТабАмортизации.Колонки.Добавить("СчетАмортизацииНУ");
	//		ТабАмортизации.Колонки.Добавить("ИмяСубконто", ПолучитьОписаниеТиповСтроки(16));
	//		ТабАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ПолучитьОписаниеТиповЧисла(15,2));

	//		Для Каждого СтрокаОС Из ТаблицаПоТоварам Цикл

	//			Если НЕ (СтрокаОС.АмортизацияЗаМесяцНУ = 0) Тогда

	//				НоваяСтрока = ТабАмортизации.Добавить();

	//				ТекНаправление                     = ТаблицаНаправлений.Найти(СтрокаОС.ОсновноеСредство, "ОС_НУ");
	//				СчетАмортизации                    = ТаблицаСчетов.Найти(СтрокаОС.ОсновноеСредство, "ОС_НУ");

	//				НоваяСтрока.Сумма                  = СтрокаОС.АмортизацияЗаМесяцНУ;
	//				НоваяСтрока.ОбъектУчета            = СтрокаОС.ОсновноеСредство;
	//				НоваяСтрока.НаправлениеАмортизации = ?(ТекНаправление  = Неопределено, Неопределено, ТекНаправление.Направление_НУ);
	//				НоваяСтрока.СчетАмортизацииНУ      = ?(СчетАмортизации = Неопределено, Неопределено, СчетАмортизации.СчетНачисленияАмортизацииНУ);
	//				НоваяСтрока.СчетУчетаНУ            = ?(СчетАмортизации = Неопределено, Неопределено, СчетАмортизации.СчетУчетаНУ);
	//				НоваяСтрока.ИмяСубконто            = "ОсновныеСредства";
	//			
	//				Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();

	//				Движение.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
	//				Движение.Организация               = ТекОрганизация;
	//				Движение.Амортизация               = СтрокаОС.АмортизацияЗаМесяцНУ;
	//				Движение.Стоимость                 = 0;
	//				//Движение.ВидОперации               = Перечисления.ВидыСобытийОС.НачислениеАмортизации;
	//				
	//				Если СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ > 0 Тогда
	//					
	//					НоваяСтрока.СуммаКапитальныхВложенийВключаемыхВРасходы = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//					
	//					// Движения по регистру СтоимостьОС
	//					Движение = ТаблицаДвиженийСтоимостьНУ.Добавить();
	//					Движение.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
	//					Движение.Организация      = ТекОрганизация;
	//					Движение.Амортизация      = 0;
	//					Движение.Стоимость        = СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//					
	//				КонецЕсли;

	//			КонецЕсли;

	//		КонецЦикла;
	//		
	//		// Включение капитальных вложений в состав расходов.
	//		ТабКапитальныхВложений = ТабАмортизации.Скопировать();
	//		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.Сумма);
	//		ТабКапитальныхВложений.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходы.Имя = "Сумма";
	//		ТабКапитальныхВложений.Колонки.Удалить(ТабКапитальныхВложений.Колонки.СчетАмортизацииНУ);
	//		ТабКапитальныхВложений.Колонки.СчетУчетаНУ.Имя = "СчетАмортизацииНУ";
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабКапитальныхВложений, СтруктураШапкиДокумента, "Нал", "ОС", "Включение капитальных вложений в состав расходов");
	//			
	//		АмортизацияОСНУ.мПериод          = ДатаДока;
	//		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийСтоимостьНУ;
	//		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();
	//			
	//		// Формирование проводок по возникающим временным разницам.
	//		ТабВременныхРазницПоКапитальнымВложениям = ТабКапитальныхВложений.Скопировать();
	//		Для Каждого СтрокаВременныхРазниц Из ТабВременныхРазницПоКапитальнымВложениям Цикл
	//			СтрокаВременныхРазниц.Сумма = -СтрокаВременныхРазниц.Сумма;
	//		КонецЦикла;
	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабВременныхРазницПоКапитальнымВложениям, СтруктураШапкиДокумента, "ВР", "ОС", "Включение капитальных вложений в состав расходов");
	//		
	//		//вызов процедуры списания амортизации по направлениям
	//		СтруктураШапкиДокументаБезВалютыДокумента = Новый Структура;
	//		Для Каждого ТекКлюч Из СтруктураШапкиДокумента Цикл
	//			Если ТекКлюч.Ключ <> "ВалютаДокумента" Тогда
	//				СтруктураШапкиДокументаБезВалютыДокумента.Вставить(ТекКлюч.Ключ, ТекКлюч.Значение);
	//			КонецЕсли;
	//		КонецЦикла;

	//		ТабЗатрат = ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокументаБезВалютыДокумента,"Нал","ОС");

	//		АмортизацияОСНУ.мПериод          = Дата;
	//		АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
	//		Движения.СтоимостьОСНалоговыйУчет.ВыполнитьПриход();

	//		// Списание сумм капитальных вложений, включенных в состав расходов.
	//		Для Каждого СтрокаТабКапитальныхВложений Из ТабКапитальныхВложений Цикл
	//			
	//			Если НЕ ЗначениеНеЗаполнено(СтрокаТабКапитальныхВложений.Сумма) Тогда
	//		
	//				Проводка = ПроводкиНУ.Добавить();
	//				
	//				Проводка.Период       = СтруктураШапкиДокумента.Дата;
	//				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
	//				Проводка.НомерЖурнала = "ОС";
	//				Проводка.Содержание   = "Капитальные вложения, включаемые в состав расходов";
	//				Проводка.Сумма        = СтрокаТабКапитальныхВложений.Сумма;
	//				
	//				Проводка.СчетКт       = ПланыСчетов.Налоговый.РасходыНаКапитальныеВложения;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТабКапитальныхВложений.ОбъектУчета);
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;

	//	АмортизацияОСНУ         = Движения.СтоимостьОСНалоговыйУчет;
	//	НачислениеАмортизацииНУ = Движения.НачислениеАмортизацииОСНалоговыйУчет;

	//	ТаблицаДвиженийАмортизацияНУ = АмортизацияОСНУ.Выгрузить();
	//	ТаблицаДвиженийАмортизацияНУ.Очистить();

	//	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

	//		ТекОС = СтрокаТЧ.ОсновноеСредство;

	//		СтрокаТЗ = ТаблицаСчетов.Найти(ТекОС, "ОС_НУ");
	//		Если СтрокаТЗ <> Неопределено Тогда
	//			СчетУчетаСтоимости   = СтрокаТЗ.СчетУчетаНУ;
	//			СчетУчетаАмортизации = СтрокаТЗ.СчетНачисленияАмортизацииНУ;
	//		КонецЕсли;
	//		
	//		Если НЕ (СтрокаТЧ.СтоимостьНУ = 0) Тогда
	//		
	//			// Движения по регистру НачислениеАмортизацииОС
	//			Движение = НачислениеАмортизацииНУ.Добавить();
	//			Движение.Период               = Дата;
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.НачислятьАмортизацию = Ложь;

	//			// Движения по регистру СтоимостьОС
	//			Движение = ТаблицаДвиженийАмортизацияНУ.Добавить();
	//			Движение.ОсновноеСредство     = ТекОС;
	//			Движение.Организация          = ТекОрганизация;
	//			Движение.Амортизация          = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
	//			Движение.Стоимость            = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;
	//			Движение.ВидОперации          = Перечисления.ВидыСобытийОС.Передача;
	//			
	//		КонецЕсли;

	//		// если ранее подготовка к передачи не была проведена
	//		Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда

	//			// списание амортизации Д 02.01 К 01.09
	//			СуммаПроводки = СтрокаТЧ.АмортизацияНУ + СтрокаТЧ.АмортизацияЗаМесяцНУ;
	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиНУ.Добавить();

	//				Проводка.Период      = Дата;
	//				Проводка.Организация = ТекОрганизация;
	//				Проводка.Содержание  = "Списана амортизация";
	//				Проводка.Сумма       = СуммаПроводки;

	//				Проводка.СчетДт      = СчетУчетаАмортизации;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//			// списание балансовой стоимости Д 01.09 К 01.01
	//			СуммаПроводки = СтрокаТЧ.СтоимостьНУ;
	//			Если НЕ (СуммаПроводки = 0) Тогда

	//				Проводка = ПроводкиНУ.Добавить();

	//				Проводка.Период      = Дата;
	//				Проводка.Организация = ТекОрганизация;
	//				Проводка.Содержание  = "Списана балансовая ст-ть";
	//				Проводка.Сумма       = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

	//				Проводка.СчетДт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//				Проводка.СчетКт      = СчетУчетаСтоимости;
	//				УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//			КонецЕсли;

	//		КонецЕсли;

	//		// списание остаточной стоимости Д 91.01 К 09.01
	//		СуммаПроводки = СтрокаТЧ.СтоимостьНУ - СтрокаТЧ.АмортизацияНУ - СтрокаТЧ.АмортизацияЗаМесяцНУ - СтрокаТЧ.СуммаКапитальныхВложенийВключаемыхВРасходыНУ;

	//		Если НЕ (СуммаПроводки = 0) Тогда

	//			Проводка = ПроводкиНУ.Добавить();

	//			Проводка.Период      = Дата;
	//			Проводка.Организация = ТекОрганизация;
	//			Проводка.Содержание  = "Списана ост. стоимость";
	//			Проводка.Сумма       = СуммаПроводки;

	//			Проводка.СчетДт = СтрокаТЧ.СчетРасходовНУ;
	//			Если Проводка.СчетДт.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = ТипЗнч(СтрокаТЧ.СубконтоНУ) Тогда
	//				УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоНУ);
	//			КонецЕсли;
	//			УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);

	//			Проводка.СчетКт      = ПланыСчетов.Налоговый.ВыбытиеОС;
	//			УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);

	//		КонецЕсли;

	//	КонецЦикла;

	//	АмортизацияОСНУ.мПериод          = Дата;
	//	АмортизацияОСНУ.мТаблицаДвижений = ТаблицаДвиженийАмортизацияНУ;
	//	Движения.СтоимостьОСНалоговыйУчет.ВыполнитьРасход();

	//КонецЕсли;
	//
	//ПоддержкаПБУ18 = ПрименениеПБУ18(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
	//
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ Отказ тогда	
	//	
	//	Если ЗначениеНеЗаполнено(СтруктураШапкиДокумента.ДокПодготовкаКПередачеОС) Тогда
	//		
	//		Если  ПоддержкаПБУ18 Тогда
	//			
	//			// Подготовим структуру таблицы для отражения затрат.
	//			ТаблицаОтраженияЗатрат = СформироватьТаблицуЗатрат();
	//			
	//			// Рассчитаем разницы в амортизации на месяц списания
	//			РасчетРазницПоАмортизации(СтруктураШапкиДокумента, ТабЗатрат, "ОС", ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство"), ПроводкиНУ, ТаблицаОтраженияЗатрат);
	//			
	//			Если ТаблицаОтраженияЗатрат.Количество() > 0 Тогда
	//	
	//				ДопПараметры = Новый Структура;
	//				ДопПараметры.Вставить("КодОперацииНЗП",  Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство);
	//				ДопПараметры.Вставить("КодОперацииЗатр", Перечисления.КодыОперацийЗатраты.ПрочиеПостоянныеЗатраты);
	//				
	//				ВремСтруктураШапкиДокумента = Новый Структура;
	//				ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	//				ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
	//				
	//				ДвиженияПоПрочимЗатратамРегл(ЭтотОбъект, ТаблицаОтраженияЗатрат, ВремСтруктураШапкиДокумента, Неопределено, ДопПараметры);
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		Движения.БракВПроизводствеНалоговыйУчет.Записать(Ложь);
	//		Движения.ЗатратыНалоговыйУчет.Записать(Ложь);
	//		Движения.НезавершенноеПроизводствоНалоговыйУчет.Записать(Ложь);
	//		
	//	КонецЕсли; 
	//	
	//	Если  ПоддержкаПБУ18 Тогда
	//		
	//		ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов);
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Не Отказ Тогда
	//	ПРоводкиБУ.Записать(Ложь);
	//КонецЕсли; 
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не Отказ тогда
	//	ПроводкиНУ.Записать(Ложь);
	//КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	//Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

Процедура ДвиженияПоРазницам(СтруктураШапкиДокумента, СписокОС, ТаблицаСчетов)

	//Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда 
	//	Возврат;
	//КонецЕсли;	
	//
	//Если ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда

	//Запрос = Новый Запрос;
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1 Как Субконто1,
	//|	НалоговыйОстатки.СуммаОстатокКт КАК Сумма02ПР,
	//|	0 КАК Сумма02ВР,
	//|	0 КАК Сумма01ПР,
	//|	0 КАК Сумма01ВР,
	//|	0 КАК Сумма01
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокКт,
	//|	0,
	//|	0,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйАмортизацияОС_01), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт,
	//|	0,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаПР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт,
	//|	0
	//|ИЗ
	//|	РегистрБухгалтерии.Налоговый.Остатки(&КонДата, Счет В ИЕРАРХИИ (&НалоговыйОСвОрганизации), , ВидУчета = &ВидУчетаВР И Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	НалоговыйОстатки.Субконто1,
	//|	0,
	//|	0,
	//|	0,
	//|	0,
	//|	НалоговыйОстатки.СуммаОстатокДт
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет В ИЕРАРХИИ (&ХозрасчетныйОСвОрганизации), ,Организация = &Организация И Субконто1 в (&СписокОС)) КАК НалоговыйОстатки
	//|
	//|ИТОГИ СУММА(Сумма02ПР), СУММА(Сумма02ВР), СУММА(Сумма01ПР), СУММА(Сумма01ВР), СУММА(Сумма01) ПО
	//|Субконто1 ";
	//
	//Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	//Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	//Запрос.УстановитьПараметр("Организация",Организация);
	//Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	//Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	//Запрос.УстановитьПараметр("ХозрасчетныйОСвОрганизации", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	//Запрос.УстановитьПараметр("НалоговыйАмортизацияОС_01", ПланыСчетов.Налоговый.АмортизацияОсновныхСредств);
	//Запрос.УстановитьПараметр("НалоговыйОСвОрганизации", ПланыСчетов.Налоговый.ОсновныеСредства);
	//Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//Список = ОС.Выгрузить();

	//ПроводкиНУ              = Движения.Налоговый;
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	//Пока Выборка.Следующий() Цикл
	//	СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
	//	Если СтрокаТаблицы = NULL Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_НУ");
	//	Если ПараметрыОС = Неопределено Тогда
	//		ПараметрыОС = ТаблицаСчетов.Найти(Выборка.Субконто1,"ОС_БУ");
	//		Если ПараметрыОС = Неопределено Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		СчетУчетаНУ                 = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетУчетаБУ), Ложь, СтруктураШапкиДокумента.Дата);
	//		СчетНачисленияАмортизацииНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",ПараметрыОС.СчетНачисленияАмортизацииБУ), Ложь, СтруктураШапкиДокумента.Дата);
	//	Иначе
	//		СчетУчетаНУ                 = ПараметрыОС.СчетУчетаНУ;
	//		СчетНачисленияАмортизацииНУ = ПараметрыОС.СчетНачисленияАмортизацииНУ;
	//	КонецЕсли;
	//	Если Выборка.Сумма01Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//	КонецЕсли;
	//	Если Выборка.Сумма01Вр - Выборка.Сумма02Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
	//		УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
	//		УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Вр - Выборка.Сумма02Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//	КонецЕсли;
	//	Если Выборка.Сумма02Вр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма02Вр;
	//		ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//		ПроводкаНУ.НомерЖурнала = "ВР";
	//		
	//	КонецЕсли;
	//	
	//	Если Выборка.Сумма01Пр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетКт       = СчетУчетаНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
	//		ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетДт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//		
	//	КонецЕсли;
	//	Если Выборка.Сумма01Пр - Выборка.Сумма02Пр <> 0 Тогда
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
	//		УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
	//		УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма01Пр - Выборка.Сумма02Пр;
	//		ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//	КонецЕсли;
	//	Если Выборка.Сумма02Пр <> 0 Тогда		
	//		ПроводкаНУ              = ПроводкиНУ.Добавить();
	//		ПроводкаНУ.Период       = Дата;
	//		ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//		
	//		ПроводкаНУ.СчетДт       = СчетНачисленияАмортизацииНУ; 
	//		УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт, 1, Выборка.Субконто1);  
	//		ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//		ПроводкаНУ.Сумма        = Выборка.Сумма02Пр;
	//		ПроводкаНУ.Содержание   = "Постоянныые разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//		ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//		УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//		ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//		ПроводкаНУ.НомерЖурнала = "ПР";
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Иначе   // была подготовка к передаче
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//				   |	НалоговыйОстатки.Субконто1 КАК Субконто1,
	//				   |	ВЫБОР
	//				   |		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаПР
	//				   |			ТОГДА НалоговыйОстатки.СуммаОстатокДт
	//				   |		ИНАЧЕ 0
	//				   |	КОНЕЦ КАК Сумма01ПР,
	//				   |	ВЫБОР
	//				   |		КОГДА НалоговыйОстатки.ВидУчета = &ВидУчетаВР
	//				   |			ТОГДА НалоговыйОстатки.СуммаОстатокДт
	//				   |		ИНАЧЕ 0
	//				   |	КОНЕЦ КАК Сумма01ВР
	//				   |ИЗ
	//				   |	РегистрБухгалтерии.Налоговый.Остатки(
	//				   |		&КонДата,
	//				   |		Счет В ИЕРАРХИИ (&НалоговыйВыбытиеОС),
	//				   |		,
	//				   |		Организация = &Организация
	//				   |		    И Субконто1 В (&СписокОС)) КАК НалоговыйОстатки
	//				   |ИТОГИ
	//				   |	СУММА(Сумма01ПР),
	//				   |	СУММА(Сумма01ВР)
	//				   |ПО
	//				   |	Субконто1";
	//	
	//	Запрос.УстановитьПараметр("НачДата",  началоМесяца(Дата));
	//	Запрос.УстановитьПараметр("КонДата",  КонецМесяца(Дата));
	//	Запрос.УстановитьПараметр("Организация",Организация);
	//	Запрос.УстановитьПараметр("ВидУчетаВР",Перечисления.ВидыУчетаПоПБУ18.ВР);
	//	Запрос.УстановитьПараметр("ВидУчетаПР",Перечисления.ВидыУчетаПоПБУ18.ПР);
	//	Запрос.УстановитьПараметр("НалоговыйВыбытиеОС", ПланыСчетов.Налоговый.ВыбытиеОС);
	//	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	//	Список = ОС.Выгрузить();
	//	
	//	ПроводкиНУ              = Движения.Налоговый;
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Субконто1");
	//	Пока Выборка.Следующий() Цикл
	//		СтрокаТаблицы = Список.Найти(Выборка.Субконто1, "ОсновноеСредство");
	//		Если СтрокаТаблицы = NULL Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если Выборка.Сумма01Вр <> 0 Тогда
	//			ПроводкаНУ              = ПроводкиНУ.Добавить();
	//			ПроводкаНУ.Период       = Дата;
	//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//			
	//			ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
	//			УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
	//			УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;  
	//			ПроводкаНУ.Сумма        = Выборка.Сумма01Вр;
	//			ПроводкаНУ.Содержание   = "Временные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//			УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР; 
	//			ПроводкаНУ.НомерЖурнала = "ВР";
	//		КонецЕсли;
	//		
	//		Если Выборка.Сумма01Пр <> 0 Тогда
	//			ПроводкаНУ              = ПроводкиНУ.Добавить();
	//			ПроводкаНУ.Период       = Дата;
	//			ПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
	//			ПроводкаНУ.СчетДт      = СтрокаТаблицы.СчетРасходовНУ;
	//			УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СтрокаТаблицы.СубконтоНУ);
	//			УстановитьСубконто(ПроводкаНУ.Счетдт, ПроводкаНУ.СубконтоДт,"ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
	//			ПроводкаНУ.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;  
	//			ПроводкаНУ.Сумма        = Выборка.Сумма01Пр;
	//			ПроводкаНУ.Содержание   = "Постоянные разницы за " + ПредставлениеПериода(НачалоМесяца(Дата), КонецМесяца(Дата));
	//			ПроводкаНУ.СчетКт       = ПланыСчетов.Налоговый.ВыбытиеОС; 
	//			УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт, 1, Выборка.Субконто1);   			
	//			ПроводкаНУ.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР; 
	//			ПроводкаНУ.НомерЖурнала = "ПР";
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	
	//КонецЕсли;
	//
	//ПроводкиНУ.Записать(Ложь);	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки,ТаблицаАвансов, Отказ) Экспорт

	//Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
	//	// Движения по этому документу делать не нужно
	//	Возврат;
	//КонецЕсли;
	//
	//Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если СтруктураШапкиДокумента.УчитыватьНДС Тогда

	//	УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	//	
	//	Если Отказ Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	СчетОтнесенияНДС = ?(УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате,
	//		ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет,
	//		ПланыСчетов.Хозрасчетный.НДС);
	//		
	//	СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ,СчетОтнесенияНДС);
	//КонецЕсли;
	//
	//Если Не СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах
	//   И (УчетнаяПолитикаБух.СпособВеденияВзаиморасчетов = Перечисления.СпособыВеденияВзаиморасчетовВБухгалтерскомУчете.НаСчетахБухгалтерскогоУчета
	//	  ИЛИ ЗначениеНеЗаполнено(УчетнаяПолитикаБух.СпособВеденияВзаиморасчетов)) Тогда
	//	СформироватьДвиженияПоРегиструНДСРасчетыСПокупателями_Задолженность(СтруктураШапкиДокумента, ТаблицаВыручки, Движения, Отказ, ТаблицаАвансов, , ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));
	//КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// *Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	//// Для контроля остатков по взаиморасчетам
	//ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// *Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)


КонецПроцедуры

// *Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("СтоимостьУУ",          "Стоимость");
	СтруктураПолей.Вставить("АмортизацияУУ",        "Амортизация");
	СтруктураПолей.Вставить("АмортизацияЗаМесяцУУ", "АмортизацияЗаМесяц");

КонецПроцедуры

// *Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	//СтруктураПолей.Вставить("СтоимостьБУ"         , "СтоимостьБУ");
	//СтруктураПолей.Вставить("АмортизацияБУ"       , "АмортизацияБУ");
	//СтруктураПолей.Вставить("АмортизацияЗаМесяцБУ", "АмортизацияЗаМесяцБУ");
	//СтруктураПолей.Вставить("СтоимостьНУ"         , "СтоимостьНУ");
	//СтруктураПолей.Вставить("АмортизацияНУ"       , "АмортизацияНУ");
	//СтруктураПолей.Вставить("АмортизацияЗаМесяцНУ", "АмортизацияЗаМесяцНУ");

	//СтруктураПолей.Вставить("СчетДоходовБУ" , "СчетДоходовБУ");
	//СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	//СтруктураПолей.Вставить("СубконтоБУ"    , "СубконтоБУ");
	//СтруктураПолей.Вставить("СчетДоходовНУ" , "СчетДоходовНУ");
	//СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");
	//СтруктураПолей.Вставить("СубконтоНУ"    , "СубконтоНУ");

	//СтруктураПолей.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");

	//СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	//ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 


КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ) Экспорт

//	УчетнаяПолитикаБух = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ, Организация, "Бух");
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
    мКурсДокумента = КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	мКратностьДокумента = КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"          , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"          , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	//ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"          , "СделкаВидОперации");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "ОС".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ОсновноеСредство", "ОсновноеСредство");
	СтруктураПолей.Вставить("Сумма"           , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"       , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"             , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"     , "НомерСтроки");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	//ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитики(Отказ);
	КонецЕсли;
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
	//	СтруктураПолей = Новый Структура;
	//	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
	//	СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
	//	СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
	//	СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
	//
	//	РезультатЗапросаПоДокументамРасчетовСКонтрагентами = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
	//	ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
	//	ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	//Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	//КонецЕсли;
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Для каждого СтрокаОС из ТаблицаПоТоварам Цикл
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ,Организация);
			КонецЕсли;
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете тогда
				ПроверитьВозможностьСнятияСУчета(СтрокаОС.ОсновноеСредство,Дата,Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// подготовка таблицы для списания
	СписокОС = ТаблицаПоТоварам.ВыгрузитьКолонку("ОсновноеСредство");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ТекПериод",      Дата);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.ОсновноеСредство                  КАК ОС_УУ,
	|	СпособыОтраженияРасходовПоАмортизацииСрезПоследних.СпособыОтраженияРасходовПоАмортизации                  КАК Направление_УУ
	|ИЗ
	| РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ТекПериод, ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииСрезПоследних";
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();

	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаНаправлений, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	//УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект);
	//
	//РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Грузополучатель,
	//														|Контрагент,
	//														|Организация,
	//														|Грузоотправитель",
	//														Грузополучатель,
	//														Контрагент,
	//														Организация,
	//														Грузоотправитель));
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("ОС"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");
