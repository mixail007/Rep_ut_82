////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 


Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;
Перем мКолонкиДокументы;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// *Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	//ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = ПолучитьТекстСчетаФактуры(
	//												 НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// *Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура добавляет к надписям в шапке табличного поля табличной части документа
// названия валют, т.к. они могут оличаться от валюты документа.
Процедура ИзменитьНазванияПолейТЧ()

	ВалютаУпрУчета  = Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеНеЗаполнено(ВалютаУпрУчета) Тогда
		ВалютаУпрУчета  = "";
	Иначе
		ВалютаУпрУчета  = ", " + Строка(ВалютаУпрУчета);
	КонецЕсли; 
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ЗначениеНеЗаполнено(ВалютаРеглУчета) Тогда
		ВалютаРеглУчета = "";
	Иначе
		ВалютаРеглУчета = ", " + Строка(ВалютаРеглУчета);
	КонецЕсли; 
	
	ЭлементыФормы.ОС.Колонки.Стоимость.ТекстШапки            = ЭлементыФормы.ОС.Колонки.Стоимость.ТекстШапки + ВалютаУпрУчета;
	ЭлементыФормы.ОС.Колонки.ОстСтоимость.ТекстШапки         = ЭлементыФормы.ОС.Колонки.ОстСтоимость.ТекстШапки + ВалютаУпрУчета;
	ЭлементыФормы.ОС.Колонки.Амортизация.ТекстШапки          = ЭлементыФормы.ОС.Колонки.Амортизация.ТекстШапки + ВалютаУпрУчета;
	ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяц.ТекстШапки   = ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяц.ТекстШапки + ВалютаУпрУчета;

	ЭлементыФормы.ОС.Колонки.СтоимостьБУ.ТекстШапки          = ЭлементыФормы.ОС.Колонки.СтоимостьБУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьБУ.ТекстШапки       = ЭлементыФормы.ОС.Колонки.ОстСтоимостьБУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.АмортизацияБУ.ТекстШапки        = ЭлементыФормы.ОС.Колонки.АмортизацияБУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяцБУ.ТекстШапки = ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяцБУ.ТекстШапки + ВалютаРеглУчета;
	
	ЭлементыФормы.ОС.Колонки.СтоимостьНУ.ТекстШапки          = ЭлементыФормы.ОС.Колонки.СтоимостьНУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьНУ.ТекстШапки       = ЭлементыФормы.ОС.Колонки.ОстСтоимостьНУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.АмортизацияНУ.ТекстШапки        = ЭлементыФормы.ОС.Колонки.АмортизацияНУ.ТекстШапки + ВалютаРеглУчета;
	ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяцНУ.ТекстШапки = ЭлементыФормы.ОС.Колонки.АмортизацияЗаМесяцНУ.ТекстШапки + ВалютаРеглУчета;
	
КонецПроцедуры

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()
	
	СуммаВзаиморасчетов = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС");
	СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	//ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// *Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// *Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// *Процедура устанавливает видимость для тех колонок в табличной части 
// "ОС", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = ЛОЖЬ;
	
	//ЭлементыФормы.Организация.Видимость        = (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете);
	//ЭлементыФормы.НадписьОрганизация.Видимость = ЭлементыФормы.Организация.Видимость;
	
	ЭлементыФормы.СобытиеРегл.Видимость        = ЭлементыФормы.Организация.Видимость;
	ЭлементыФормы.НадписьСобытиеРегл.Видимость = ЭлементыФормы.Организация.Видимость;
	
	ЭлементыФормы.Событие.Видимость            = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьСобытие.Видимость     = ОтражатьВУправленческомУчете;

	Колонки = ЭлементыФормы.ОС.Колонки;

	//ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ ПрименениеУСН(Организация, Дата)));
	  ОтражатьВНалоговомУчетеНП =ЛОЖЬ;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ПодготовкаКПередаче=ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС);
	// Установка видимости колонок если отражаем в рег. учете.
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетДоходовБУ,       ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетРасходовБУ,       ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СубконтоБУ,          ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетДоходовНУ,       ОтражатьВНалоговомУчетеНП);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетРасходовНУ,       ОтражатьВНалоговомУчетеНП);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СубконтоНУ,          ОтражатьВНалоговомУчетеНП);

	УстановитьВидимостьКолонкиТабЧасти(Колонки.Стоимость,           ОтражатьВУправленческомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.ОстСтоимость,        ОтражатьВУправленческомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.Амортизация,         ОтражатьВУправленческомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.АмортизацияЗаМесяц,  (ОтражатьВУправленческомУчете И ПодготовкаКПередаче));

	УстановитьВидимостьКолонкиТабЧасти(Колонки.СтоимостьБУ,         ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.ОстСтоимостьБУ,      ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.АмортизацияБУ,       ОтражатьВБухгалтерскомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.АмортизацияЗаМесяцБУ,(ОтражатьВБухгалтерскомУчете И ПодготовкаКПередаче));

	УстановитьВидимостьКолонкиТабЧасти(Колонки.СтоимостьНУ,         ОтражатьВНалоговомУчетеНП);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.ОстСтоимостьНУ,      ОтражатьВНалоговомУчетеНП);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.АмортизацияНУ,       ОтражатьВНалоговомУчетеНП);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.АмортизацияЗаМесяцНУ,(ОтражатьВНалоговомУчетеНП И ПодготовкаКПередаче));

	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ, ОтражатьВНалоговомУчетеНП);
	
	ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.Сделка.Доступность = Ложь;
	
	// Видимость колонок таблицы документов расчетов
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);

КонецПроцедуры // УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	//Если ЗначениеНеЗаполнено(ДокументОбъект.Событие) Тогда
		//ДокументОбъект.Событие = ПолучитьСостояниеОСИзСправочника(Перечисления.ВидыСостоянийОС.СнятоСУчета);
	//КонецЕсли;

	//СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	//КонецЕсли;

	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетУчетаРасчетовПоАвансам) Тогда
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	//КонецЕсли;

КонецПроцедуры

// *Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
// Вызывается в процедурах:
// ПриОткрытии()
//
Процедура УстановитьЗаголовкиПоДоговору()

	//УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// *Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС"));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(ОС.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;


КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		Сообщить("У вас недостаточно прав для просмотра документа!");
		отказ = Истина;
		возврат;
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// *Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);

		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		КонецЕсли;
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
    мОтражатьВРегламентированномУчете=Ложь;
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОС.Колонки, СтруктураКолонок);
	//****
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
//	мПоДокументамРасчетов             = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мПоДокументамРасчетов             = ЛОЖЬ;
//	мРасчетыВУЕ                       = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	мРасчетыВУЕ                       = ЛОЖЬ;
	//// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ЗаполнитьТекстПроСчетФактуру();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	//****

	ИзменитьНазванияПолейТЧ();

	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// *Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	
КонецПроцедуры // ПослеЗаписи()

// *Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОС"),
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
													КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ОС.Заголовок = "Основные средства (" + ДокументОбъект.ОС.Количество() + " поз.)";
	
	ПересчетСуммВзаиморасчетов();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// *Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// *Процедура заполняет в табличной части колонки Стоимость, Амортизация, Амортизация за месяц 
// для всех видов учета на дату документа
//
Процедура КоманднаяПанельОСЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе.");
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос.УстановитьПараметр("СписокОС",СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
//	|	АмортизацияБухгалтерскийУчетОстатки.Организация,
	|	АмортизацияОстатки.ОсновноеСредство КАК ОС_УУ,
//	|	АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство КАК ОС_БУ,
//	|	АмортизацияНалоговыйУчетОстатки.ОсновноеСредство КАК ОС_НУ,
	|	АмортизацияОстатки.СтоимостьОстаток КАК Стоимость,
//	|	АмортизацияБухгалтерскийУчетОстатки.СтоимостьОстаток КАК СтоимостьБУ,
//	|	АмортизацияНалоговыйУчетОстатки.СтоимостьОстаток КАК СтоимостьНУ,
	|	АмортизацияОстатки.АмортизацияОстаток КАК Амортизация
//	|	АмортизацияБухгалтерскийУчетОстатки.АмортизацияОстаток КАК АмортизацияБУ,
//	|	АмортизацияНалоговыйУчетОстатки.АмортизацияОстаток КАК АмортизацияНУ
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.Остатки(, ОсновноеСредство В (&СписокОС)) КАК АмортизацияОстатки";
	ТЗ = Запрос.Выполнить().Выгрузить();

	ТаблицаАмортизацииУпр = Новый ТаблицаЗначений();
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();

	Если ТЗ.Количество()>0 Тогда

		Если ОтражатьВУправленческомУчете Тогда
			ТаблицаАмортизацииУпр = РасчетАмортизацииУпр(Дата, СписокОС, Ложь);
		КонецЕсли;

		//Если ОтражатьВБухгалтерскомУчете Тогда
		//	ТаблицаАмортизацииБух = РасчетАмортизацииБухРегл(Дата, Организация, СписокОС, Ложь);
		//КонецЕсли;

		//Если ОтражатьВНалоговомУчете Тогда
		//	ТаблицаАмортизацииНал = РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, Организация, СписокОС, Ложь);
		//КонецЕсли;

		Для каждого Строка Из ОС Цикл

			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство,"ОС_УУ");

			Если СтрокаТЗ = Неопределено Тогда

				Если ОтражатьВУправленческомУчете Тогда

					Строка.Стоимость          = 0;
					Строка.Амортизация        = 0;
					Строка.АмортизацияЗаМесяц = 0;

				КонецЕсли;

				//Если ОтражатьВБухгалтерскомУчете Тогда

				//	Строка.СтоимостьБУ          = 0;
				//	Строка.АмортизацияБУ        = 0;
				//	Строка.АмортизацияЗаМесяцБУ = 0;

				//КонецЕсли;

				//Если ОтражатьВНалоговомУчете Тогда

				//	Строка.СтоимостьНУ                                  = 0;
				//	Строка.АмортизацияНУ                                = 0;
				//	Строка.АмортизацияЗаМесяцНУ                         = 0;
				//	Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;

				//КонецЕсли;

			Иначе

				// В соответствующие поля строки запишем данные из запроса
				Если ОтражатьВУправленческомУчете Тогда
					Строка.Стоимость            = СтрокаТЗ.Стоимость;
					Строка.Амортизация          = СтрокаТЗ.Амортизация;
					СтрокаТаблицаАмортизацииУпр = ТаблицаАмортизацииУпр.Найти(Строка.ОсновноеСредство,"ОС");
					Строка.АмортизацияЗаМесяц   = ?(СтрокаТаблицаАмортизацииУпр = Неопределено,0,СтрокаТаблицаАмортизацииУпр.Упр);
				КонецЕсли;

				//Если ОтражатьВБухгалтерскомУчете Тогда
				//	Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				//	Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				//	СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство,"ОС");
				//	Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБух = Неопределено,0,СтрокаТаблицаАмортизацииБух.Бух);
				//КонецЕсли;

				//Если ОтражатьВНалоговомУчете Тогда
				//	Строка.СтоимостьНУ                                  = СтрокаТЗ.СтоимостьНУ;
				//	Строка.АмортизацияНУ                                = СтрокаТЗ.АмортизацияНУ;
				//	СтрокаТаблицаАмортизацииНал                         = ТаблицаАмортизацииНал.Найти(Строка.ОсновноеСредство,"ОС");
				//	Строка.АмортизацияЗаМесяцНУ                         = ?(СтрокаТаблицаАмортизацииНал = Неопределено,0,СтрокаТаблицаАмортизацииНал.Налог);
				//	Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = ?(СтрокаТаблицаАмортизацииНал = Неопределено,0,СтрокаТаблицаАмортизацииНал.СуммаКапитальныхВложенийВключаемыхВРасходы);
				//КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Сообщить("Исходные данные для заполнения отсутствуют.");

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

// *Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "ОС", вызывает сервисный механизм для изменения
// общих для всей табличной части "ОС" реквизитов - таких, например,
// как тип цен, валюта и т. д.
// Должен выполнять пересчет в новую валюту документа!!!
//
Процедура ДействияФормыДействиеЦеныВалюта(Кнопка)

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, Неопределено, СтруктураРеквизитовДокумента, , "ОС", мВалютаРегламентированногоУчета, Неопределено, СтруктураЗначений);

		Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);
		КОнецЦикла;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры


// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	//ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	//УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	УстановитьВидимость();
	
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(ЭлементыФормы.ОтражатьВБухгалтерскомУчете);
	КонецЕсли;

	УстановитьВидимость();
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// *Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
	   
		ОтражатьВУправленческомУчете = Истина;
		
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И ПолучитьЗначениеПоУмолчанию( глТекущийПользователь, "ОтражатьДокументыВНалоговомУчете");

	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		//Организация = Справочники.Организации.ПустаяСсылка();
		УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;

	Если Элемент.Значение Тогда
		//СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		//СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		//СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	Иначе
		//СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		//СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

	УстановитьВидимость();
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// *Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВУправленческомУчетеПриИзменении(Элемент);
	КонецЕсли;
	Если Не ОтражатьВБухгалтерскомУчете И Не ОтражатьВНалоговомУчете Тогда
		//Организация = Справочники.Организации.ПустаяСсылка();
		УстановитьНомерДокумента(ЭтотОбъект);
		
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

// *Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Неопределено;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "ОС", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	//СчетаУчета = ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	//СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	//СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	//СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;

	мПоДокументамРасчетов = ЛОЖЬ;//ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ЛОЖЬ;//ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// *Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// *Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	// В этом случае еще не должно быть договоров "по заказам"
	СтруктураДополнительныхПараметров = Новый Структура();
	
	СписокПарам = Новый СписокЗначений;
	СписокПарам.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СписокПарам.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	//СписокПарам.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить( "ВидСравненияОтбора", ВидСравнения.НеВСписке);
	СтруктураОтбора.Вставить( "ЗначениеОтбора",     СписокПарам);
	
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, СтандартнаяОбработка, СтруктураДополнительныхПараметров)
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// *Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

	Для Каждого СтрокаТабличнойЧасти Из ОС Цикл
		// Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);
	КОнецЦикла;

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// *Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
						 "Приход", "ЗаказПокупателя");

КонецПроцедуры // СделкаНачалоВыбора()

// *Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// *Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// *Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Контрагент.Пустая() Тогда
		ВвестиЗначение(Контрагент, "Выберите контрагента");
	КонецЕсли;

	Если НЕ Контрагент.Пустая() Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = Контрагент;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// *При изменении документа Подготовка к передаче
//
Процедура ДокПодготовкаКПередачеОСПриИзменении(Элемент)
	УстановитьВидимость();
	Если ЗначениеНеЗаполнено(ДокПодготовкаКПередачеОС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОС.Количество()>0 Тогда
		Если Вопрос("При заполнении существующие данные в табличной части будут удалены! Продолжить?", 
			        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ОС.Очистить();
	ТЧПодготовкаКПердачи = ДокПодготовкаКПередачеОС.ОС.Выгрузить();
	Если ТЧПодготовкаКПердачи.Количество()>0 Тогда
		ОС.Загрузить(ТЧПодготовкаКПердачи);
	КонецЕсли;
	Для каждого Строка из ОС Цикл
		Строка.Амортизация   = Строка.Амортизация   + Строка.АмортизацияЗаМесяц;
		Строка.АмортизацияБУ = Строка.АмортизацияБУ + Строка.АмортизацияЗаМесяцБУ;
		Строка.АмортизацияНУ = Строка.АмортизацияНУ + Строка.АмортизацияЗаМесяцНУ;
		Строка.АмортизацияЗаМесяц= 0;
		Строка.АмортизацияЗаМесяцБУ = 0;
		Строка.АмортизацияЗаМесяцНУ = 0;
	КонецЦикла;
КонецПроцедуры

// *Процедура - обработчик события "НачалоВыбора" элемента формы Событие
//
Процедура СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Передача);
    НачалоВыбораЗначенияСобытияОС(Элемент, ВидыСобытий, СтандартнаяОбработка);

КонецПроцедуры

// *Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеРегл
//
Процедура СобытиеРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// *Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
										+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	Если ОтражатьВУправленческомУчете Тогда
		ОформлениеСтроки.Ячейки.ОстСтоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимость.Текст = 
			ФорматСумм(ДанныеСтроки.Стоимость - ДанныеСтроки.Амортизация - ДанныеСтроки.АмортизацияЗаМесяц);
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьБУ - ДанныеСтроки.АмортизацияБУ - ДанныеСтроки.АмортизацияЗаМесяцБУ);
	КонецЕсли;

	Если ОтражатьВНалоговомУчете Тогда
		ОформлениеСтроки.Ячейки.ОстСтоимостьНУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьНУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьНУ - ДанныеСтроки.АмортизацияНУ - ДанныеСтроки.АмортизацияЗаМесяцНУ);
	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// *Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличной части "Товары".
//
Процедура ОСПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.ОС.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СчетБУ  = ЭлементыФормы.ОС.ТекущиеДанные.СчетДоходовБУ;
	СчетНУ  = ЭлементыФормы.ОС.ТекущиеДанные.СчетДоходовНУ;

	ЭлементыФормы.ОС.Колонки.СубконтоБУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.ОС.Колонки.СубконтоНУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

// *Процедура при изменении ОС в табличной части
//
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ОС.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СчетБУ  = ЭлементыФормы.ОС.ТекущиеДанные.СчетДоходовБУ;
	СчетНУ  = ЭлементыФормы.ОС.ТекущиеДанные.СчетДоходовНУ;

	ЭлементыФормы.ОС.Колонки.СубконтоБУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.ОС.Колонки.СубконтоНУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));
	// Вставить содержимое обработчика.
КонецПроцедуры

// *При изменении ставки НДС табличной части ОС
//
Процедура ОССтавкаНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);
КонецПроцедуры

// *При изменении суммы в табличной части ОС
//
Процедура ОССуммаПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОС.ТекущиеДанные, ЭтотОбъект);
КонецПроцедуры

// *Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовБУПриИзменении(Элемент)

	//СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	//СчетБУ   = СтрокаТЧ.СчетДоходовБУ;

	//Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
	//	СтрокаТЧ.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	//Иначе
	//	СтрокаТЧ.СубконтоБУ = Неопределено;
	//КонецЕсли;

	//СтрокаТЧ.СчетДоходовНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	//СчетНУ   = СтрокаТЧ.СчетДоходовНУ;
	//Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
	//	СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	//Иначе
	//	СтрокаТЧ.СубконтоНУ = Неопределено;
	//КонецЕсли;

	//ЭлементыФормы.ОС.Колонки.СубконтоБУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	//ЭлементыФормы.ОС.Колонки.СубконтоНУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетБУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// *Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// *Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовНУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.ОС.Колонки.СубконтоНУ.Доступность = НЕ (ЗначениеНеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// *Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// *Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "ОС".
//
Процедура ОССубконтоБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;

	//ЗаменитьСубконтоНУ(СтрокаТЧ.СчетДоходовБУ, СтрокаТЧ.СчетДоходовНУ, 1, СтрокаТЧ.СубконтоБУ, СтрокаТЧ.СубконтоНУ);

КонецПроцедуры

// *Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетРасходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// *Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "ОС".
//
Процедура ОССчетРасходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" в строке табличной части "ОС".
//
Процедура ОССчетРасходовБУПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ОС.ТекущиеДанные;
//	СтрокаТЧ.СчетРасходовНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТЧ.СчетРасходовБУ));
	
КонецПроцедуры // ОССчетРасходовБУПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровДляДокументовРасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	//ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	//РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровДляДокументовРасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	//НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
	//													Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	//ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	//+++Шарафутдинов 01.03.2018
	Если не ВозможностьВыбораПодразделения2018(Дата,Подразделение) тогда
		Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
		Возврат;		
	КонецЕсли;    	
	//---Шарафутдинов 01.03.2018

КонецПроцедуры

мКолонкиДокументы      = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;