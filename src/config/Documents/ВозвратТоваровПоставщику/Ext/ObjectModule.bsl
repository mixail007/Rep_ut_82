Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьВозвратаПоставщику()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	),
	|	ВозвратнаяТара.(
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ВозвратнаяТара.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ВыборкаСтрокТара   = Шапка.ВозвратнаяТара.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Возврат поставщику");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Сумма    = 0;
	СуммаНДС = 0;
	Ном      = 0;

	// Товары
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
	КонецЦикла;

	// Тара
	Пока ВыборкаСтрокТара.Следующий() Цикл
		Если ЗначениеНеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.Товар       = ВыборкаСтрокТара.Товар + " (возвратная тара)";
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма = Сумма    + ВыборкаСтрокТара.Сумма;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьВозвратаПоставщику()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН(Выбор = 0, Форма = Неопределено)
    Если Выбор = 0 Тогда
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

		ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
		ОбработкаПечати.ПунктРазгрузки = АдресДоставки;

		ОбработкаПечати.Открыть();

		Возврат Неопределено;
	Иначе
		
		ОбработкаПечати = Обработки.ПечатьТТН_ЯШТ.ПолучитьФорму("Форма");

		ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
		ОбработкаПечати.ПунктРазгрузки = АдресДоставки;
		ОбработкаПечати.СрокДоставки   		= СрокДоставки;
		ОбработкаПечати.МаркаАвтомобиля 	= МаркаАвтомобиля;
		ОбработкаПечати.МаркаПрицепа		= МаркаПрицепа;
		ОбработкаПечати.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
		ОбработкаПечати.ГосНомерПрицепа     = ГосНомерПрицепа;
		ОбработкаПечати.ПунктПогрузки		= ПунктПогрузки;
		ОбработкаПечати.ПунктРазгрузки      = ПунктРазгрузки;
		ОбработкаПечати.Водитель            = Водитель;
		ОбработкаПечати.Перевозчик          = Перевозчик;
		ОбработкаПечати.Заказчик            = Заказчик;
		ОбработкаПечати.ВидПеревозки        = ВидПеревозки;
		ОбработкаПечати.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
		
		ОбработкаПечати.Форма 			= Форма;
		
		

		ОбработкаПечати.Открыть();

		ЭтотОбъект.Прочитать();
		
		
		
		Возврат Неопределено;

		
	КонецЕсли;

КонецФункции // ПечатьТТН()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12()

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Дата КАК ДатаДокумента,
	|	Номер КАК НомерДокумента,
	|	Организация КАК Руководители,
	|	Организация КАК Организация,
	|	Контрагент КАК Контрагент,
	|	Организация КАК Поставщик,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент КАК Плательщик,
	|	ДоговорКонтрагента.Представление КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	Подразделение,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику,
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ВозвратТоваровПоставщику.Склад
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);

	Иначе

		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);

	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ВозвратТоваровПоставщику.СерияНоменклатуры          КАК Серия,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ВозвратТоваровПоставщику.Количество)                    КАК Количество,
	|		СУММА(ВозвратТоваровПоставщику.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(ВозвратТоваровПоставщику.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(ВозвратТоваровПоставщику.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(ВозвратТоваровПоставщику.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                             КАК Метка
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|	ГДЕ
	|		ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ВозвратТоваровПоставщику.Номенклатура,
	|		ВозвратТоваровПоставщику.Коэффициент,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмерения,
	|		ВозвратТоваровПоставщику.ЕдиницаИзмеренияМест,
	|		ВозвратТоваровПоставщику.ХарактеристикаНоменклатуры,
	|		ВозвратТоваровПоставщику.СерияНоменклатуры,
	|		ВозвратТоваровПоставщику.СтавкаНДС,
	|		ВозвратТоваровПоставщику.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Номенклатура                    КАК Номенклатура,
	|	ВозвратТоваровПоставщику.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	ВозвратТоваровПоставщику.Количество * ВозвратТоваровПоставщику.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	ВозвратТоваровПоставщику.Цена * &Курс / &Кратность    КАК Цена,
	|	ВозвратТоваровПоставщику.Количество                   КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	ВозвратТоваровПоставщику.Сумма * &Курс / &Кратность   КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	ВозвратТоваровПоставщику.НомерСтроки                  КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК ВозвратТоваровПоставщику
	|
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровПоставщику_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
	Иначе
		ЗапросЗаказ = Новый Запрос;
		ЗапросЗаказ.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросЗаказ.Текст =
		"ВЫБРАТЬ
		|	Сделка.Номер       КАК Номер,
		|	Сделка.Дата        КАК Дата,
		|	Сделка.ВидОперации КАК ВидОперации,
		|	Сделка.Организация КАК Организация
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &ТекущийДокумент";
		ШапкаЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
		ШапкаЗаказ.Следующий();

		ОбластьМакета.Параметры.Основание = СформироватьЗаголовокДокумента(ШапкаЗаказ);
	КонецЕсли;

	ОбластьМакета.Параметры.НомерДокумента = ПолучитьНомерНаПечать(ЭтотОбъект);
	ОбластьМакета.Параметры.ДатаДокумента  = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг""");

	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.Подразделение                = Шапка.Подразделение;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПредставлениеПоставщика      = ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика     = ОписаниеОрганизации(СведенияОПокупателе);

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер   = "";
	ОбластьМакета.Параметры.ОснованиеДата    = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			ИтогоНДСНаСтранице         = 0;
			ИтогоСуммаСНДСНаСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование
		                                          + ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		СуммаСНДС = (ВыборкаСтрок.Сумма 
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));

		Если ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;
		СуммаНДС    = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС = СуммаСНДС    - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакета.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавБухгалтера     = Бухгалтер;
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
	ФамилияИмяОтчествоФизЛица                     = ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоКладовщика                  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьМакета.Параметры.ФИОКладовщика         = ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);

	Если НЕ ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

		// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная"  Тогда
		ТабДокумент = ПечатьВозвратаПоставщику();
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();	
	ИначеЕсли ИмяМакета = "1Т" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "1Т - ЯШТ" Тогда
		ТабДокумент = ПечатьТТН(1, Форма);			
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
		
	КонецЕсли; 

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Накладная", "Возврат поставщику");
 	СписокМакетов.Добавить("ТОРГ12", "ТОРГ-12 (Товарная накладная)");
	СписокМакетов.Добавить("1Т", "1-Т (Товарно-транспортная накладная)");
	СписокМакетов.Добавить("1Т - ЯШТ", "1-Т (Товарно-транспортная накладная) - Яршинторг");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;


КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Возвращает текстовые участки запроса, выполняемого
// при заполнении на основании ТЧ Товары
Процедура ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры)
	
	ПолеОстаткиОрганизации = "
	|	ОстаткиОрганизации.КоличествоОстаток                 КАК КоличествоОстатокОрганизации,";
	
	СоединениеТоваровОрганизаций = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Организация = &Организация) КАК ОстаткиОрганизации
	|ПО
	|	Док.Номенклатура               = ОстаткиОрганизации.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры";
	
КонецПроцедуры

Процедура УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка)
	
	КоличествоПоДокументу = Мин(Выборка.КоличествоПоДокументу, 
						   ?(Выборка.КоличествоОстатокОрганизации=NULL, 0, Выборка.КоличествоОстатокОрганизации));
						   
КонецПроцедуры

// Процедура выполняет заполнение табличной части по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОснование.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказ",        Неопределено);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

	ОснованиеПоступление = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ОснованиеЗаказ       = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"));
	ТоварКомитента       = (ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	Если ОснованиеПоступление Тогда
		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Если ЗначениеНеЗаполнено(ДокументОснование.Сделка) Тогда
				Запрос.УстановитьПараметр("Сделка", ДокументОснование);
			Иначе
				Запрос.УстановитьПараметр("Сделка", ДокументОснование.Сделка);
			КонецЕсли;
		ИначеЕсли ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			Запрос.УстановитьПараметр("Сделка", ДокументОснование);
		Иначе
			Запрос.УстановитьПараметр("Сделка",  Неопределено);
		КонецЕсли;

		Запрос.УстановитьПараметр("ДокументРезерва", ДокументОснование.Сделка);
	Иначе
		Запрос.УстановитьПараметр("ДокументРезерва", ДокументОснование);

		Если ДокументОснование.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			Запрос.УстановитьПараметр("Сделка",      ДокументОснование);
		Иначе
			Запрос.УстановитьПараметр("Сделка",      Неопределено);
		КонецЕсли;
	КонецЕсли;

	Если СкладИзШапки
	 ИЛИ ОснованиеЗаказ Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = ДокументОснование.Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		МассивСклады = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
	КонецЕсли;

	Запрос.УстановитьПараметр("МассивСклады", МассивСклады);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".Товары 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл              = "";
	ПоляПоступленияРегл          = "";
	ПолеОстаткиОрганизации       = "";
	СоединениеТоваровОрганизаций = "";
	ПолучитьУчасткиЗапросаПоТоварамОрганизацийДляЗаполненияТЧТовары(ПолеОстаткиОрганизации, СоединениеТоваровОрганизаций, ТекстЗапросаСписокНоменклатуры);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                                КАК КратностьДокумента,
	|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов   КАК ВалютаВзаиморасчетов,
	|	Док.Ссылка.КурсВзаиморасчетов                        КАК КурсВзаиморасчетов,
	|	Док.Ссылка.КратностьВзаиморасчетов                   КАК КратностьВзаиморасчетов,
	|	Док.Ссылка.УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Коэффициент,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	Док.СтавкаНДС,
	|	Док.Количество                                       КАК КоличествоПоДокументу,"
	+	?(ОснованиеЗаказ, "", ПоляЗапросаРегл) + "
	|	Остатки.КоличествоОстаток                            КАК КоличествоОстаток,
	|	Резервы.КоличествоОстаток                            КАК КоличествоРезервОстаток,
	|	РезервыПоДокументу.КоличествоОстаток                 КАК КоличествоРезервПоДокументуОстаток,"
	+	ПолеОстаткиОрганизации + "
	|	Док.Цена,";

	Если ОснованиеПоступление Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.СерияНоменклатуры,
		|	Док.Склад,
		|	Док.Проект,"
		+	ПоляПоступленияРегл;
	КонецЕсли;

	Если ТоварКомитента Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ОстаткиПолученных.КоличествоОстаток            КАК КоличествоОстатокПолученных,
		|	ОстаткиПолученных.СуммаВзаиморасчетовОстаток   КАК СуммаПолученныхПолученных,";
	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|	Док.ХарактеристикаНоменклатуры,";

	Запрос.Текст = Запрос.Текст + "
	|	Док.ЗаказПокупателя КАК ЗаказПокупателя";

	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".Товары   КАК Док";

	Если ТоварКомитента Тогда

		Запрос.Текст = Запрос.Текст + "
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПолученные.Остатки(,
		|	                                             ДоговорКонтрагента   = &ДоговорКонтрагента
		|											   И СтатусПолучения = &СтатусПолучения
		|											   И Сделка = &Сделка
		|	                                                     ) КАК ОстаткиПолученных
		|ПО
		|	Док.Номенклатура = ОстаткиПолученных.Номенклатура 
		|   И Док.ХарактеристикаНоменклатуры = ОстаткиПолученных.ХарактеристикаНоменклатуры
		|";

	КонецЕсли;

	Запрос.Текст = Запрос.Текст + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Остатки
	|ПО
	|	Док.Номенклатура               = Остатки.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)) КАК Резервы
	|ПО
	|	Док.Номенклатура               = Резервы.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = Резервы.ХарактеристикаНоменклатуры
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                               И Склад В (&МассивСклады)
	|	                                               И ДокументРезерва = &ДокументРезерва) КАК РезервыПоДокументу
	|ПО
	|	Док.Номенклатура               = РезервыПоДокументу.Номенклатура
	| И Док.ХарактеристикаНоменклатуры = РезервыПоДокументу.ХарактеристикаНоменклатуры
	|"
	+ СоединениеТоваровОрганизаций + "
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование 
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ЗначениеНеЗаполнено(Выборка.КоличествоОстаток) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;

		КоличествоПоДокументу = Выборка.КоличествоПоДокументу;
		УчестьОстаткиТоваровОрганизацийПриЗаполненииТЧТовары(КоличествоПоДокументу, Выборка);

		Если ТоварКомитента Тогда
			КоличествоПолученных          = ?(Выборка.КоличествоОстатокПолученных = NULL, 0, Выборка.КоличествоОстатокПолученных);
			СуммаВзаиморасчетовПолученных = ?(Выборка.СуммаПолученныхПолученных   = NULL, 0, Выборка.СуммаПолученныхПолученных);
		КонецЕсли;

		КоличествоРезервПоДокументуОстаток = ?(Выборка.КоличествоРезервПоДокументуОстаток = NULL, 0, Выборка.КоличествоРезервПоДокументуОстаток);
		КоличествоРезервОстаток            = ?(Выборка.КоличествоРезервОстаток            = NULL, 0, Выборка.КоличествоРезервОстаток);

		// Сначала (Сч = 1) спишем резервы по заказам, а затем если количество еще
		// не израсходовано, возмем его из свободного остатка (Сч = 2)
		Для Сч = 1 По 2 Цикл

			Если Сч = 1 Тогда
				Если ЗначениеНеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ ЗначениеНеЗаполнено(Выборка.ЗаказПокупателя) Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Мин(Выборка.КоличествоОстаток, КоличествоРезервПоДокументуОстаток));
				КонецЕсли;
			Иначе
				Если ЗначениеНеЗаполнено(Выборка.КоличествоОстаток) 
				 ИЛИ (Выборка.КоличествоОстаток - КоличествоРезервОстаток) = 0 Тогда
					Продолжить;
				Иначе
					СписКоличество = Мин(КоличествоПоДокументу, Выборка.КоличествоОстаток - КоличествоРезервОстаток);
				КонецЕсли;
			КонецЕсли;

			Если ТоварКомитента Тогда
				СписКоличество = Мин(СписКоличество, КоличествоПолученных);
			КонецЕсли;

			Если СписКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТабличнойЧасти = Товары.Добавить();

			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;

			// Дубли строк (например, совпадающая номенклатура и характиеристика, разные серии) 
			// в документе-основании не отслеживаем, считаем, что при необходимости пользователь 
			// сам должен выбрать нужную строку, а не нужную удалить.
			СтрокаТабличнойЧасти.Количество       = СписКоличество;
			КоличествоПоДокументу                 = КоличествоПоДокументу - СписКоличество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = Выборка.Коэффициент;
			СтрокаТабличнойЧасти.СтавкаНДС        = Выборка.СтавкаНДС;

			Если ТоварКомитента Тогда

				СтрокаТабличнойЧасти.Цена = СуммаВзаиморасчетовПолученных / КоличествоПолученных;

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаВзаиморасчетов, ВалютаДокумента, 
				       Выборка.КурсВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				       Выборка.КратностьВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Истина,
				                            Выборка.УчитыватьНДС,
				                            Выборка.СуммаВключаетНДС,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе

				СтрокаТабличнойЧасти.Цена = Выборка.Цена;

				// Пересчитаем цену в валюту документа (может отличаться от валюты основания).
				Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, 
				       Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				       Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                            Выборка.УчитыватьНДС И Выборка.СуммаВключаетНДС,
				                            УчитыватьНДС,
				                            СуммаВключаетНДС,
				                            ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			КонецЕсли;

			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ОснованиеПоступление Тогда
				СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.Проект            = Выборка.Проект;
				СтрокаТабличнойЧасти.Склад             = Выборка.Склад;
			КонецЕсли;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

			Если Сч = 1 Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ЗаказПокупателя;
			Иначе
				СтрокаТабличнойЧасти.ЗаказПокупателя = Неопределено;
			КонецЕсли;

			СтрокаТабличнойЧасти.ДокументПоступления = ДокументОснование;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоОснованию()

// Процедура выполняет заполнение возвратной тары по документу основанию.
// При заполнении копируется состав документа, количество заполняется минимальным из того,
//  что осталось на складе и того, что есть в строке документа-основания.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ЗаполнитьВозвратнуюТаруПоОснованиюУпр(ДокументОснование, СкладИзШапки = Истина) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("СтатусПолучения",    Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);

	ДокументОснованиеИмя = ДокументОснование.Метаданные().Имя;

	// Вложенный запрос, ограничивающий список номенклатуры
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументОснование";

	// Сформируем участки запроса
	ПоляЗапросаРегл = "";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|	КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|		1
	|   КОНЕЦ                         КАК КратностьДокумента,
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент  КАК КоэффициентХраненияОстатков,"
	+ ?(СкладИзШапки, "", "Док.Склад                          КАК Склад,") + "
	|	Остатки.КоличествоОстаток                             КАК КоличествоОстатокКомпании,
	|	Док.Количество                                        КАК КоличествоПоДокументу,
	|	Док.Цена,"
	+ ПоляЗапросаРегл + "
	|	Док.ЗаказПокупателя
	|ИЗ
	|	Документ." + ДокументОснованиеИмя + ".ВозвратнаяТара КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПолученные.Остатки(,  Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") 
	|	                                                         И ДоговорКонтрагента = &ДоговорКонтрагента
	|                                                            И СтатусПолучения = &СтатусПолучения) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование И
	|	Остатки.КоличествоОстаток > 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ЗначениеНеЗаполнено(Выборка.КоличествоОстатокКомпании) Тогда
			Продолжить; // товары, отстутствующие на складе, в документ не добавляем
		КонецЕсли;  

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Мин(Выборка.КоличествоПоДокументу, Выборка.КоличествоОстатокКомпании);
		СтрокаВозвратнойТары.Цена         = Выборка.Цена;

		// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
		СтрокаВозвратнойТары.Цена = ПересчитатьИзВалютыВВалюту(СтрокаВозвратнойТары.Цена, 
						  Выборка.ВалютаДокумента, ВалютаДокумента,
						  Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						  Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);

		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;

		Если СкладИзШапки Тогда
			СтрокаВозвратнойТары.Склад = Склад;
		Иначе
			СтрокаВозвратнойТары.Склад = ?(ЗначениеНеЗаполнено(Выборка.Склад), Склад, Выборка.Склад);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоОснованию()

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Сделка = Основание; // заполняем сделку заказом поставщику

			Если Сделка.Проведен Тогда
				// Заполним табличные части по заказу поставщику.
				ЗаполнитьТоварыПоОснованиюУпр(Сделка);
				ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Сделка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполненияУпр()

// Заолняет табличную часть по сериям номенклатуры при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 
	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий = ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры);
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	ТаблицаСерий.Сортировать("Номенклатура, СрокГодности");
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Строка.СерияНоменклатуры;
			НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
			НоваяСтрока.ЗаказПокупателя            = ИсходнаяСтрока.ЗаказПокупателя;
			НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
			НоваяСтрока.Количество                 = СписанноеКоличество; 
			
			РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения           = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                       = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры          = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.СтавкаНДС                  = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.ДокументПоступления        = ИсходнаяСтрока.ДокументПоступления;
				НоваяСтрока.ЗаказПокупателя            = ИсходнаяСтрока.ЗаказПокупателя;
				НоваяСтрока.Качество                   = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                 = КоличествоОсталосьПогасить;
				РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента)

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;
	Иначе
		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	КонецЕсли;
		
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПриходаУпр()

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//  СтатусПартии    - значение перечисления статусов партий. 
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладахУпр(ТаблицаТЧ, ТаблицаДвижений, СтатусПартии)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Склад                 = Склад;
		СтрокаДвижений.ДокументОприходования = Ссылка;
		СтрокаДвижений.СтатусПартии          = СтатусПартии;

		// Заказ заполняем если его указали в документе и по договору ведется обособленный учет товаров по заказам.
		СтрокаТЧ = ТаблицаТЧ.Найти(СтрокаДвижений.НомерСтроки, "НомерСтроки");
		ОбособленныйУчет = СтрокаТЧ .ОбособленныйУчетТоваровПоЗаказамПокупателей;
		СтрокаДвижений.Заказ = ?(ОбособленныйУчет <> NULL И ОбособленныйУчет 
		        И Не (ЗначениеНеЗаполнено(СтрокаТЧ.ЗаказПокупателя)), СтрокаТЧ.ЗаказПокупателя, Неопределено);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладахУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Стоимость");

	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
								  
		СтрокаТаблицы.Сумма     = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;
	
	// важен порядок: сначала Регл, потом Упр
	// (использование колонки Стоимость как врем. переменной)
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов");
	
	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КратностьВзаиморасчетов);
										 
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// При выгрузке таблицы из документа количество имеет неотрицательный тип значения,
	// нам необходимы отрицательные числа
	ТаблицаТары.Колонки.Добавить("Количество");
	ТаблицаТары.Колонки.Добавить("Стоимость");

	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.Количество  = - СтрокаТаблицы.КоличествоДок;

	КонецЦикла;

	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов");
	ДанныеДоговора = ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, Дата);

	// Надо расчитать сумму без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаВзаиморасчетов = - ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов, 
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета. По таре считаем, что СуммаБезНДС = Сумма
		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения упр. реквизитов шапки
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		        "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		        |Заполните поле ""Заказ поставщику""!");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТовары();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("Качество");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = СформироватьСтруктуруОбязательныхПолейТара();

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки заполнения.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара",СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проводит табличные части "Товары" и "Возвратная тара" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
		НаборДвижений = Движения.ТоварыНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыНаСкладах.ВыполнитьПриход();
		КонецЕсли;

	Иначе

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
		
		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПлюс, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                       "ДокументПередачи");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
		НаборДвижений = Движения.ТоварыКПередачеСоСкладов;

		ТаблицаПоТареПлюс = ТаблицаПоТаре.Скопировать();
		ТаблицаПоТареПлюс.Колонки.Удалить(ТаблицаПоТареПлюс.Колонки.Количество);
		ТаблицаПоТареПлюс.Колонки.КоличествоДок.Имя = "Количество";

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТареПлюс, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,  "Качество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                      "ДокументПередачи");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Закупки.
	
	НаборДвижений = Движения.Закупки;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
	ТаблицаДвиженийЗакупки.Очистить();
	ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();
	
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), "СтатусПартии");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.Закупки.ВыполнитьДвижения();
	КонецЕсли;
			
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);

	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоРегистрамПодсистемыНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
	
	// Проводить по партиям сразу если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

	Если ПроводитьПоПартиям Тогда

		ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период = Дата;
			ЗаписьРегистрации.Регистратор = Ссылка;
		КонецЕсли;

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

// По результатам запросов формирует движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		ТаблицаПоТоварамПлюс = ТаблицаПоТоварам.Скопировать();
		ТаблицаПоТоварамПлюс.Колонки.Удалить(ТаблицаПоТоварамПлюс.Колонки.Количество);
		ТаблицаПоТоварамПлюс.Колонки.КоличествоДок.Имя = "Количество";
		
		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПлюс, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,      "ДокументПередачи");

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыКПередачеОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// Формирует движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		   И СуммаДокумента <> 0 Тогда

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.

			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр              = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод               = Дата;
			НаборДвижений.мТаблицаДвижений      = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

//+++( 01.04.2019 ВЫКЛЮЧЕНО движение ПО РЕГИСТРУ "РасчетыСКонтрагентами"

			//Проводим, только если не заполнен Заказ поставщику
			//Если ЗначениеНеЗаполнено(Сделка) 
			//   Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда

				//	НаборДвижений = Движения.РасчетыСКонтрагентами;
 				//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
				//ТаблицаДвижений = НаборДвижений.Выгрузить();
				//ТаблицаДвижений.Очистить();

				// Заполним таблицу движений.
				//СтрокаДвижений = ТаблицаДвижений.Добавить();
				//СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Возврат;
				//СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
				//СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
				//СтрокаДвижений.СуммаВзаиморасчетов   = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				//				СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				//				СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
				//				СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
				//СтрокаДвижений.СуммаУпр              = - ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
				//				СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				//				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				//				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

				//НаборДвижений.мПериод            = Дата;
				//НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

				//Если Не Отказ Тогда
				//	Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
				//КонецЕсли;
			//КонецЕсли;
//+++)
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ Закупки.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТАРА ПО РЕГИСТРУ ТоварыПолученные.

			НаборДвижений = Движения.ТоварыПолученные;

			
		//ТОВАРЫ ПО РЕГИСТРУ ТоварыАдресноеХранение.
		Если ТоварыАдресноеХранение.Количество() > 0 и Не Отказ Тогда
			
			//+++ 27.08.2014 проверяем и выдаём сообщение для клиентов - ВСЕГДА
			//	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			яштАдресноеХранение.КонтрольОстатковАдресноеХранение(ЭтотОбъект.Ссылка, Отказ );
			
			// можно проводить в минус...
			Если Отказ И РежимПроведения=РежимПроведенияДокумента.Неоперативный 
				//всем?! можно неоперативно проводить... в минус?
				И рольДоступна("ПолныеПрава") Тогда // пользователям с полными правами(всем бухгалтерам и кладовщикам?!
				Отказ = Ложь;
			КонецЕсли;
			
			Если Не Отказ Тогда
				яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина),"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ТоварыПолученные.ВыполнитьПриход();
			КонецЕсли;

		ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
			// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
			ТоварыИТараПоРегистрамОстатковУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
			
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыПолученные.

			НаборДвижений = Движения.ТоварыПолученные;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПолучения");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;      
			
			Если Не Отказ Тогда
				Движения.ТоварыПолученные.ВыполнитьПриход();
			КонецЕсли;
			
			// ТАРА ПО РЕГИСТРУ ТоварыПолученные.

			НаборДвижений = Движения.ТоварыПолученные;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина),"Сделка");
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПолучения");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка осатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если Не Отказ Тогда
				Движения.ТоварыПолученные.ВыполнитьПриход();
			КонецЕсли;

		КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы, у которых
	// установлен флаг БУ и которые оформлены по договору с поставщиком.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = (-1) * ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Вызывается из тела процедуры "ДвиженияПоРегистрам".
// На основе анализа данных табличной части, операция возврата товаров отражается в регистрах подсистемы
// учета НДС.
// 
Процедура ДвиженияПоРегистрамПодсистемыНДС(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		// Если не нужно отражать в бухгалтерском учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Это не наши ценности (договор комиссии), следовательно НДС по ним отражать не нужно
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));

	Если НЕ ПараметрыУчетнойПолитики.СложныйУчетНДС Тогда
		// В модуле документа движеня по возврату формируются только когда нет сложного учета НДС
		// При сложном учете НДС движения возврата формируются вместе со списанием по регистру НДСПартии
		ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
		ТаблицаДвиженийПокупки.Очистить();
		
		СформироватьДвиженияВозвратаПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаДвиженийПокупки);
		
		Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
			Движения.НДСПокупки.мПериод            = Дата;
			Движения.НДСПокупки.мТаблицаДвижений   = ТаблицаДвиженийПокупки;
			Движения.НДСПокупки.ДобавитьДвижение();
			Движения.НДСПокупки.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТоварам.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";

	// Количество из колонки КоличествоДок
	ТаблицаПоТоварам.Колонки.Удалить("Количество");
	ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла;

	//***20150528
	//не делались движения по партиям, если склады в ТЧ.Товары отличаются от склада в шапке.
	//таблица движений в регистр Партии копируется из регистра Списанные товары
	//сделала, как в Реализации товаров и услуг
	
	//// Если ПУ по складам
	//Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
	//	ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	//КонецЕсли;
	
	// Если ПУ по складам не ведется, очищаем склад
	Если Не СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;
	//***


	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Ресурс в регистре называется ЗаказПартии
	ТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "ЗаказПартии";
	ТаблицаПоТаре.Колонки.Удалить("Количество");
	ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла;

	// Если ПУ по складам
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику,"КодОперацииПартииТоваров");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты из стандартного набора.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = Основание.СкладОрдер.Склад;
		Иначе
			Склад = Основание.СкладОрдер;
		КонецЕсли;

		// Тип выбираемого значения зависит от договора.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 или ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			Сделка = Основание.Сделка; // заполняем сделку заказом поставщику
		Иначе
			Сделка = Основание; // взаиморасчеты по расчетным документам
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Заполним табличные части по поступлению Товаров.
			ЗаполнитьТоварыПоОснованиюУпр(Основание, Ложь);
			ЗаполнитьВозвратнуюТаруПоОснованиюУпр(Основание, Ложь);

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		// Заполнение шапки
		ОтражатьВУправленческомУчете = Истина;
		ВалютаДокумента              = Основание.ВалютаДокумента;
		ДоговорКонтрагента           = Основание.ДоговорКонтрагента;
		Комментарий                  = Основание.Комментарий;
		Контрагент                   = Основание.Контрагент;
		КратностьВзаиморасчетов      = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов           = Основание.КурсВзаиморасчетов;
		Организация                  = Основание.Организация;
		Ответственный                = Основание.Ответственный;
		Подразделение                = Основание.Подразделение;
		Склад                        = Основание.Склад;
		СуммаВключаетНДС             = Основание.СуммаВключаетНДС;
		СуммаДокумента               = Основание.СуммаДокумента;
		ТипЦен                       = Основание.ТипЦен;
		УчитыватьНДС                 = Основание.УчитыватьНДС;

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
		КонецЦикла;

	КонецЕсли;

	ЗаполнитьДокументПоОснованиюУпр(Основание);

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		             И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;

	
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
	
	// проверка соответствия веса	
	ВесИтого=ПолучитьОбщийВесНетто(Товары);
	Если ВесИтого<>ОбщийВес Тогда
		ЗаполнитьВесНетто(Товары);
	ОбщийВес=ВесИтого;
	КонецЕсли;

	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью()

// Заполняет по шапке документа дерево параметров, нужных при проведении
// (упр. учет)
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");

	// Для контроля остатков по взаиморасчетам
	ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента   = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"        , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                 , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                 , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"       , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"    , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                 , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                   , "ВидСклада");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("Услуга"             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Качество"           , "Качество");
	СтруктураПолей.Вставить("Проект"             , "Проект");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("ДокументЗакупки"    , "ДокументПоступления");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = СформироватьСтруктуруПолейТара();
	СтруктураПолей.Удалить ("Количество");
	СтруктураПолей.Вставить("КоличествоДок"      , "Количество"); // Количество нужно выгружать с другим псевдонимом, иначе нельзя будет использовать отрицательные значения
	СтруктураПолей.Вставить("ЗаказПокупателя"    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Склад"              , "Склад");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
						  "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу товаров и тары для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоТаре    = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость, мВалютаРегламентированногоУчета);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;


	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, Отказ, Заголовок);
//----------" - " сумма бонуса по документу поступления / Сделка  -----------------
   //таблБонусы = яштПоставщики.ПолучитьБонусыПоставщиков( Ссылка ); //06.12.2018
	   // для каждого стр1 из таблБонусы цикл
	   // 	Движение1 = Движения.БонусыПоставщиков.Добавить();
	   // 	ЗаполнитьЗначенияСвойств(Движение1, стр1);
	   // 	Движение1.Период = Дата;
	   // 	Движение1.Регистратор = Ссылка; //Регистратор = Документ
	   // КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
