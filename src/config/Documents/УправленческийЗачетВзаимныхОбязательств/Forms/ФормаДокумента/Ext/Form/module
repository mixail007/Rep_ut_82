////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтражатьВРегламентированномУчете;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ






//Очищает табличную часть документа при смене контрагента, организации
Процедура ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, ОбъектСравнения, ТекстВопроса, СтандартнаяОбработка)
	Если СуммыДолга.Количество() > 0
	   И СуммыДолга[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммыДолга.Очистить();
		Иначе  
			//Отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()

	Колонки                = ЭлементыФормы.СуммыДолга.Колонки;
	КолонкиУменьшениеДолга = ЭлементыФормы.СуммыДолгаУменьшение.Колонки;
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Истина;
			ЭлементыФормы.ДоговорКонтрагентаКредитора.Видимость            = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагент.Заголовок                      = "Дебитор:";
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Долг клиенту";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Заголовок    =  "Долг фирме";
		
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;

		УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Ложь);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.ВидЗадолженности,  Ложь);

	ВывестиНадписи();
	КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	//// Установка кнопок заполнение ТЧ
	//УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь,,,ПараметрОбъектКопирования,ПараметрОснование);
        ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Взаимозачет");
        
		УстановитьНомерДокумента(ЭтотОбъект);
       
	КонецЕсли;
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);


	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;

	// Установить видимость элементов
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВывестиНадписи();
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()


	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)

	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	//Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЗначениеНеЗаполнено(КонтрагентКредитор) Тогда
			Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		// Заполняется и дебиторская, и кредиторская задолженность
		
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
		
	//Иначе
	//
	//
	//	Если СуммыДолга.Количество() > 0 Тогда
	//		
	//		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
	//		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	//		Если Ответ <> КодВозвратаДиалога.Да Тогда
	//			Возврат;
	//		КонецЕсли; 
	//		
	//		СуммыДолга.Очистить();
	//		
	//	КонецЕсли;
	//	
	//	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
	//	ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();

	//КонецЕсли; 

КонецПроцедуры // КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам()

Процедура КоманднаяПанельСуммыДолгаУменьшениеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)
	
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	// Заполняется только дебиторская задолженность
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
	Если СтрокиДебиторскойЗадолженности.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением строки дебиторской задолженности будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого СтрокаТабличнойЧасти Из СтрокиДебиторскойЗадолженности Цикл
			СуммыДолга.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
	
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	//Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
	//	ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга[Кнопка.Имя];
	//КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Организация", 
						   "При смене организации табличная часть будет очищена. Продолжить?", СтандартнаяОбработка); 
						   
КонецПроцедуры // ОрганизацияОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента.
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Владелец", 
						   "При смене контрагента табличная часть будет очищена. Продолжить?", СтандартнаяОбработка);
	
КонецПроцедуры // КонтрагентОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

//+++( 30.06.2015	
	Если Элемент.Имя = "КонтрагентКредитор" тогда
		Если НЕ ( РольДоступна("яштФинДиректор")
		 или  РольДоступна("ПравоЗавершенияРаботыПользователей") ) тогда
		Предупреждение("У Вас недостаточно прав 
		|для проведения упр.взаимозачета по разным Контрагентам!
		|     При необходимости обратитесь в фин.отдел ЯШТ!",30);
		
		КонтрагентКредитор = КонтрагентДебитор;
		ДоговорКонтрагентаКредитора = ДоговорКонтрагентаДебитора;
		Возврат;
		КонецЕсли;	
	Иначе
		КонтрагентКредитор = КонтрагентДебитор;
		ДоговорКонтрагентаКредитора = ДоговорКонтрагентаДебитора;
		
		Если ЗначениеЗаполнено(КонтрагентДебитор) 
			и НЕ ( РольДоступна("яштФинДиректор")
				  или  РольДоступна("ПравоЗавершенияРаботыПользователей") ) тогда
			Если КонтрагентДебитор.ОсновнойМенеджерКонтрагента <> ПараметрыСеанса.ТекущийПользователь тогда
				Предупреждение("Создавать упр.взаимозачет для клиента: "+строка(КонтрагентДебитор)+"
							   |Должен создавать ТОЛЬКО основной менеджер контрагента: "+строка(КонтрагентДебитор.ОсновнойМенеджерКонтрагента), 30);
			КонецЕсли;				   
		КонецЕсли;				   

	КонецЕсли;
//+++)


	// Перезаполним Юр./Физ. лицо.
	Если ЕстьРеквизитДокумента("ЮрФизЛицоКонтрагента", МетаданныеДокумента)Тогда
		ЮрФизЛицоКонтрагента = КонтрагентДебитор.ОсновноеЮрФизЛицо;
	КонецЕсли; 

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ДоговорКонтрагента=ПолучитьОсновнойДоговорКонтрагента(ДокументОбъект.КонтрагентДебитор);
	Если ЗначениеНеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.ДоговорКонтрагентаДебитора = ДоговорКонтрагента;
		ДокументОбъект.Организация           = ДоговорКонтрагента.Организация;
	ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
		ДокументОбъект.ДоговорКонтрагентаДебитора = ДоговорКонтрагента;
	Иначе
		ДокументОбъект.ДоговорКонтрагентаДебитора = Неопределено; // Очистить старый договор
	КонецЕсли;


	// Могли поменять договор.
	//ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)

	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
	ЭлементыФормы.СуммыДолга.ТекущиеДанные.Сделка = Неопределено;

		Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении(Элемент)

	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
	ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные.Сделка = Неопределено;

	// Курс надо тоже заполнить
	
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолга.ТекущаяКолонка = ЭлементыФормы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе  
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());

			
			// } Лапенков 20080806 
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());

			
			// } Лапенков 20080806 

		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаУменьшениеСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолгаУменьшение.ТекущаяКолонка = ЭлементыФормы.СуммыДолгаУменьшение.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());

			
			// } Лапенков 20080806 

		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());

			
			// } Лапенков 20080806 

		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаУменьшениеСделкаНачалоВыбора()


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаАвансов.
//
Процедура СуммыДолгаСчетУчетаАвансовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	//Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	//	Контрагент = КонтрагентДебитор;
	//Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор;
		Иначе
			Контрагент = КонтрагентДебитор;
		КонецЕсли;
	//КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;

	//Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	//	Контрагент = КонтрагентДебитор
	//Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор
		Иначе
			Контрагент = КонтрагентДебитор
		КонецЕсли;
	//КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ВывестиНадписи() 
	
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТабДебиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабДебиторская.Количество() Цикл
		СтрокаТаблицы = ТабДебиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТабДебиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	СуммаКред = ТабКредиторская.Итог("Сумма");
	СуммаДеб  = ТабДебиторская.Итог("Сумма");
	Разница = СуммаДеб - СуммаКред;
	
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15;ЧДЦ=2") +" " + Строка(ВалютаДокумента);
							
	Если Разница = 0 Тогда//И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = "ЗАЧЕТ";
	Иначе
		ЭлементыФормы.НадписьВзаимозачет.Заголовок
							= "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2") +" " + Строка(ВалютаДокумента);
	КонецЕсли;

КонецПроцедуры



// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолга"
//
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолгаУменьшение"
//
Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
	КонецЕсли;
КонецПроцедуры




 
Процедура ОбновлениеОтображения()
	ВывестиНадписи();
КонецПроцедуры


Процедура ОсновныеДействияФормыДействиеУравнятьСуммы(Кнопка)
	УравнятьСуммыДебиторскойИКредиторскойЗадолженности();	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчистить(Кнопка)
	  СуммыДолга.Очистить();
КонецПроцедуры


