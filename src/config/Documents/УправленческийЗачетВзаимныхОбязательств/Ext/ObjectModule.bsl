Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда



#КонецЕсли


// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаДебитора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
	 " ВЫБРАТЬ
		|	ДоговорКонтрагента, Сделка,	СуммаВзаиморасчетовОстаток
		|		ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(	,ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентами
		|		ГДЕ СуммаВзаиморасчетовОстаток > 0
		| УПОРЯДОЧИТЬ ПО ВЫБОР КОГДА Сделка ССЫЛКА Документ.ЗаказПокупателя ИЛИ Сделка ССЫЛКА Документ.ЗаказПоставщику ТОГДА Сделка.ДатаОплаты ИНАЧЕ Сделка.Дата КОНЕЦ";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	//Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаКредитора);
	//Иначе
	//	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаДебитора);
	//КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
		" ВЫБРАТЬ
		|	ДоговорКонтрагента,	Сделка,	СуммаВзаиморасчетовОстаток
		|		ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(	,ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентами
		|	ГДЕ СуммаВзаиморасчетовОстаток < 0
		| УПОРЯДОЧИТЬ ПО ВЫБОР КОГДА Сделка ССЫЛКА Документ.ЗаказПокупателя ИЛИ Сделка ССЫЛКА Документ.ЗаказПоставщику ТОГДА Сделка.ДатаОплаты ИНАЧЕ Сделка.Дата КОНЕЦ";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента);
	
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаКонтрагента", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаКонтрагента", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаУпр", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаУпр", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Если документ расчетов не указан, то при ведении по документам расчетов необходимо
		// указать ссылку на текущий документ
		//Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
		//		И ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
		//	СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;
		//КонецЕсли;

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);

		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,
		                                 СтрокаТаблицы.Сумма);

		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 
		                                 СтрокаТаблицы.Сумма);

	КонецЦикла;

КонецПроцедуры


// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,КонтрагентДебитор,КонтрагентКредитор,ДоговорКонтрагентаКредитора,ДоговорКонтрагентаДебитора");
	
        
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента");

	//ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
    Если не Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                                 """ табличной части ""Суммы долга"": ";

			Если ЗначениеНеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся по заказам.
				                    |Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
    КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()



// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "СуммыДолга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
//	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("Организация"                      , "ДоговорКонтрагента.Организация");

//	СтруктураПолей.Вставить("КонтролироватьДенежныеСредстваКомитента" , "ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");
	//СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");
//	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");
	//СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	//СтруктураПолей.Вставить("КурсВзаиморасчетов"                      , "КурсВзаиморасчетов");
	//СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");
	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");
	//СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");
	//СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");
	
	РезультатЗапросаПоСуммамДолга = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);
		Если  не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
		

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);

		Если  не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе 
			Счетчик= Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Учетная политика 
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	мУчетнаяПолитикаБух   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата),ОшибкаПолученияУчетнойПолитики );
	
//	СтруктураШапкиДокумента.Вставить("СпособВеденияВзаиморасчетов", ?(ОшибкаПолученияУчетнойПолитики,Перечисления.СпособыВеденияВзаиморасчетовВБухгалтерскомУчете.НаСчетахБухгалтерскогоУчета,мУчетнаяПолитикаБух.СпособВеденияВзаиморасчетов));
//	СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", ?(ОшибкаПолученияУчетнойПолитики,Ложь,мУчетнаяПолитикаБух.ОпределятьАвансыПриПроведенииДокумента));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	
	
	// Эта проверка только для менеджеров
	// взаимозачеты между различными договорами доступны только пользователю с ролью 'МенеджерПоВзаимозачетам'
	
	Если НЕ ОбменДанными.Загрузка  
		// +++ 30.06.2015 - всегда!    
		//И Константы.ОплатыРаспределяютМенеджеры.Получить()
		  Тогда	
		
		Для каждого строкаДоговоры Из СуммыДолга Цикл
			Если ЗначениеНеЗаполнено(строкаДоговоры.ДоговорКонтрагента) Тогда
				Сообщить("В строке №"+Строка(строкаДоговоры.НомерСтроки) +" должен быть указан договор.",СтатусСообщения.Важное);
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			Если строкаДоговоры.ДоговорКонтрагента.ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом 
				 И ЗначениеНеЗаполнено(строкаДоговоры.Сделка) Тогда
				Сообщить("В строке №"+Строка(строкаДоговоры.НомерСтроки) +" должна быть выбрана сделка (заказ).",СтатусСообщения.Важное);
				Отказ=Истина;
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
		
//+++( 30.06.2015 - отменять может менеджер контрагента!
		//Если РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения И НЕ РольДоступна("МенеджерПоВзаимозачетам") Тогда 
		//Сообщить ("Вы не имеете прав для отмены проведения данного документа.",СтатусСообщения.Важное);
		//Отказ=Истина;
		//КонецЕсли;
		
	Если  НЕ ( РольДоступна("яштФинДиректор")
		 или  РольДоступна("ПравоЗавершенияРаботыПользователей") ) тогда
		Если КонтрагентДебитор.ОсновнойМенеджерКонтрагента <> ПараметрыСеанса.ТекущийПользователь тогда
		сообщить("У Вас недостаточно прав для записи документа упр.взаимозачет по клиенту: "+строка(КонтрагентДебитор)+"!", СтатусСообщения.Внимание);
		Отказ=Истина;
		КонецЕсли;
	КонецЕсли;	
//+++)

		Для каждого строкаДолга Из СуммыДолга Цикл
			Если ЗначениеНеЗаполнено(строкаДолга.ДоговорКонтрагента) Тогда
				Сообщить("Необходимо указание договора в строке №"+Строка(строкаДолга.НомерСтроки));
				Отказ=Истина;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;// не обмен	
	
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
    СуммаДокумента= ТабКредиторская.Итог("Сумма");
		
	мУдалятьДвижения = НЕ ЭтоНовый();
	
		
	Если НЕ Отказ Тогда
		
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Запрос=Новый Запрос;
	
	Запрос.Текст=" ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА ВидЗадолженности = &Дебиторская ТОГДА 
	|	Сумма
	|	ИНАЧЕ
	|	0
	|	КОНЕЦ) Дебиторка,
	|	СУММА(ВЫБОР КОГДА ВидЗадолженности = &Кредиторская ТОГДА 
	|	Сумма
	|	ИНАЧЕ
	|	0
	|	КОНЕЦ) Кредиторка
	|ИЗ  Документ.УправленческийЗачетВзаимныхОбязательств.СуммыДолга 
	|ГДЕ   Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Дебиторская",Перечисления.ВидыЗадолженности.Дебиторская);
	Запрос.УстановитьПараметр("Кредиторская",Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Дебиторка<>Выборка.Кредиторка Тогда
			 Сообщить("Не возможно провести документ. Зачитываемые суммы должны быть равны",СтатусСообщения.Важное);
			 Отказ=Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	//Если Константы.ОплатыРаспределяютМенеджеры.Получить() 
	//	И НЕ РольДоступна("МенеджерПоВзаимозачетам") Тогда 
	//	Сообщить ("Вы не имеете прав для проводения данного документа.",СтатусСообщения.Важное);
	//	Отказ=Истина;
	//КонецЕсли;	
	
КонецПроцедуры	// ОбработкаПроведения()



Процедура УравнятьСуммыДебиторскойИКредиторскойЗадолженности()  Экспорт
СтрокиДебиторки = СуммыДолга.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
СтрокиКредиторки = СуммыДолга.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
СуммаДебиторки=0;
СуммаКредиторки=0;

Для каждого СтрокаДебиторки из СтрокиДебиторки Цикл
	СуммаДебиторки=СуммаДебиторки+СтрокаДебиторки.Сумма ;
КонецЦикла;	

Для каждого СтрокаКредиторки из СтрокиКредиторки Цикл
	СуммаКредиторки=СуммаКредиторки+СтрокаКредиторки.Сумма ; ;
КонецЦикла;	

СуммаКорректировкиДолга=Макс(Мин(СуммаДебиторки,СуммаКредиторки),0);
СуммаДебиторки=0;
СуммаКредиторки=0;

 Если СуммаКорректировкиДолга=0 Тогда
	 СтрокиДебиторки.Очистить();
	 СтрокиКредиторки.Очистить();
 Иначе
	 
	
	сч= 0;
	Пока сч < СуммыДолга.Количество() Цикл
		СтрокаТаблицы = СуммыДолга.Получить(сч);
		Если СтрокаТаблицы.ВидЗадолженности<> Перечисления.ВидыЗадолженности.Дебиторская Тогда
		сч=сч+1; Продолжить;
		КонецЕсли;
		Если СуммаДебиторки>=СуммаКорректировкиДолга Тогда 
			СуммыДолга.Удалить(сч);
		Иначе
			Если СуммаДебиторки+СтрокаТаблицы.Сумма>СуммаКорректировкиДолга Тогда
				СтрокаТаблицы.Сумма=СуммаКорректировкиДолга-СуммаДебиторки;
			КонецЕсли;		
			СуммаДебиторки=СуммаДебиторки+СтрокаТаблицы.Сумма;
			сч=сч+1;
		КонецЕсли;	
	КонецЦикла;	
	
	сч= 0;
	Пока сч < СуммыДолга.Количество() Цикл
		СтрокаТаблицы = СуммыДолга.Получить(сч);
		Если СтрокаТаблицы.ВидЗадолженности<> Перечисления.ВидыЗадолженности.Кредиторская Тогда
		сч=сч+1; Продолжить;
		КонецЕсли;
     	Если СуммаКредиторки>=СуммаКорректировкиДолга Тогда 
			СуммыДолга.Удалить(сч);
		Иначе
			Если СуммаКредиторки+СтрокаТаблицы.Сумма>СуммаКорректировкиДолга Тогда
				СтрокаТаблицы.Сумма=СуммаКорректировкиДолга-СуммаКредиторки;
			КонецЕсли;		
			СуммаКредиторки=СуммаКредиторки+СтрокаТаблицы.Сумма;
			сч=сч+1;
		КонецЕсли;	
    КонецЦикла;	

	 
 КонецЕсли;	 
 
КонецПроцедуры	


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь;