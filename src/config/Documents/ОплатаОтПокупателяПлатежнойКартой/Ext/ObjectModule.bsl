Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходмое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	//Если ЭтоНовый() Тогда
	//	Предупреждение("Документ можно распечатать только после его записи");
	//	Возврат;
	//ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
	//	Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
	//	Возврат;
	//КонецЕсли;

	//Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
	//	Возврат;
	//КонецЕсли;

	//Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли;

	//КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

//01.04.2019 РасчетыСКонтрагентами>>ВзаимоРасчетыСКонтрагентами
// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаимоРасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма > 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма;
			СуммаДокумента = ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

Процедура ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж)
	
	СтруктураКурсаОснования = ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
	КурсОснования=СтруктураКурсаОснования.Курс;
	КратностьОснования=СтруктураКурсаОснования.Кратность;

	ОснованиеСуммаДокумента  = ДокументОснование.СуммаДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - ДокументОснование.СуммаВознаграждения;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, ДокументОснование.ВалютаДокумента, ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									 КурсОснования, ДокументОснование.КурсВзаиморасчетов, КратностьОснования, ДокументОснование.КратностьВзаиморасчетов);
	СуммаДокумента      = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("Контрагент");
	СтруктураПолей.Вставить("ДоговорЭквайринга");
	СтруктураПолей.Вставить("Эквайрер");
	СтруктураПолей.Вставить("ДоговорВзаиморасчетовЭквайрера");
	СтруктураПолей.Вставить("ВидОплаты");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок)
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		РасчетыВозврат    = НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
		КоэффициентСторно = ?(РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат, -1, 1);
	
		ДвиженияПоКонтрагентам = ЭтотОбъект.РасшифровкаПлатежа.Выгрузить();
		ДвиженияПоКонтрагентам.Свернуть("ДоговорКонтрагента,Сделка,ДокументРасчетовСКонтрагентом","СуммаПлатежа,СуммаВзаиморасчетов");
	
		// По регистру "ВзаиморасчетыСКонтрагентами"
		
		НаборДвиженийВзаиморасчеты   = Движения.ВзаиморасчетыСКонтрагентами;
		
		// По контрагенту - по строкам табличной части
		
		ТаблицаДвиженийВзаиморасчеты = НаборДвиженийВзаиморасчеты.ВыгрузитьКолонки();
		
		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
			
			ТекущаяСделка = ОпределитьСделкуСтрокиТЧ (ЭтотОбъект,СтрокаПлатеж);
			
			СтрокаДвижений = ТаблицаДвиженийВзаиморасчеты.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
			//СтрокаДвижений.Контрагент  		   = Контрагент;
			//СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = ТекущаяСделка;
			
			СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаПлатежа;
			
		КонецЦикла;
		
		НаборДвиженийВзаиморасчеты.мПериод            = Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений   = ТаблицаДвиженийВзаиморасчеты;
		
		Если КоэффициентСторно = 1 Тогда
			НаборДвиженийВзаиморасчеты.ВыполнитьРасход();
		Иначе
			НаборДвиженийВзаиморасчеты.ВыполнитьПриход();
		КонецЕсли;
		
		// По эквайреру
		
		ВалютаРасчетовЭквайрера = ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов;
		КурсРасчетовЭквайрера   = ПолучитьКурсВалюты(ВалютаРасчетовЭквайрера, Дата);
		
		ТаблицаДвиженийВзаиморасчеты = НаборДвиженийВзаиморасчеты.ВыгрузитьКолонки();
		
		СтрокаДвижений = ТаблицаДвиженийВзаиморасчеты.Добавить();
		СтрокаДвижений.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
		//СтрокаДвижений.Контрагент  		   = Эквайрер;
		//СтрокаДвижений.Организация  	   = Организация;
		СтрокаДвижений.Сделка              = Неопределено;
		
		СуммаВзаиморасчетовЭквайрера       = ПересчитатьИзВалютыВВалюту(
			ДвиженияПоКонтрагентам.Итог("СуммаПлатежа"), 
			ВалютаДокумента, ВалютаРасчетовЭквайрера, 
			КурсДокумента, КурсРасчетовЭквайрера.Курс, 
			КратностьДокумента, КурсРасчетовЭквайрера.Кратность);
		СуммаУпрЭквайрера = ДвиженияПоКонтрагентам.Итог("СуммаПлатежа");
			
		СтрокаДвижений.СуммаВзаиморасчетов = СуммаВзаиморасчетовЭквайрера;
		СтрокаДвижений.СуммаУпр            = СуммаУпрЭквайрера;
		
		НаборДвиженийВзаиморасчеты.мПериод            = Дата;
		НаборДвиженийВзаиморасчеты.мТаблицаДвижений   = ТаблицаДвиженийВзаиморасчеты;
		
		Если КоэффициентСторно = 1 Тогда
			НаборДвиженийВзаиморасчеты.ВыполнитьПриход();
		Иначе
			НаборДвиженийВзаиморасчеты.ВыполнитьРасход();
		КонецЕсли;
		
//+++( 01.04.2019 ВЫКЛЮЧЕНО движение по регистру "РасчетыСКонтрагентами"

		//НаборДвиженийРасчеты   = Движения.РасчетыСКонтрагентами;
		//// По контрагенту - по строкам табличной части
		//ТаблицаДвиженийРасчеты = НаборДвиженийРасчеты.ВыгрузитьКолонки();
		
//		Для Каждого СтрокаПлатеж ИЗ ДвиженияПоКонтрагентам Цикл
//			СтрокаДвижений = ТаблицаДвиженийРасчеты.Добавить();
//			СтрокаДвижений.ДоговорКонтрагента  = СтрокаПлатеж.ДоговорКонтрагента;
////			СтрокаДвижений.Контрагент  		   = Контрагент;
////			СтрокаДвижений.Организация  	   = Организация;
//			СтрокаДвижений.Сделка              = СтрокаПлатеж.Сделка;
//			СтрокаДвижений.РасчетыВозврат      = РасчетыВозврат;
//			
//			СтрокаДвижений.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
//			СтрокаДвижений.СуммаУпр            = СтрокаПлатеж.СуммаПлатежа;
//		КонецЦикла;
		//НаборДвиженийРасчеты.мПериод            = Дата;
		//НаборДвиженийРасчеты.мТаблицаДвижений   = ТаблицаДвиженийРасчеты;
		//Если КоэффициентСторно = 1 Тогда
		//	НаборДвиженийРасчеты.ВыполнитьРасход();
		//Иначе
		//	НаборДвиженийРасчеты.ВыполнитьПриход();
		//КонецЕсли;


		//// По эквайреру ----------------------------------------------------
		//ТаблицаДвиженийРасчеты = НаборДвиженийРасчеты.ВыгрузитьКолонки();
		//СтрокаДвижений = ТаблицаДвиженийРасчеты.Добавить();
		//СтрокаДвижений.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
		////СтрокаДвижений.Контрагент  		   = Эквайрер;
		////СтрокаДвижений.Организация  	   = Организация;
		//СтрокаДвижений.Сделка              = Неопределено;
		//СтрокаДвижений.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
		//
		//СтрокаДвижений.СуммаВзаиморасчетов = СуммаВзаиморасчетовЭквайрера;
		//СтрокаДвижений.СуммаУпр            = СуммаУпрЭквайрера;
		//	
		//НаборДвиженийРасчеты.мПериод            = Дата;
		//НаборДвиженийРасчеты.мТаблицаДвижений   = ТаблицаДвиженийРасчеты;
		//
		//Если КоэффициентСторно = 1 Тогда
		//	НаборДвиженийРасчеты.ВыполнитьПриход();
		//Иначе
		//	НаборДвиженийРасчеты.ВыполнитьРасход();
		//КонецЕсли;
 //+++)
		
	КонецЕсли;

//27.09.16 Смирнов убрал движения
	////РОЗНИЧНАЯ ВЫРУЧКА
	//НаборДвижений = Движения.РозничнаяВыручка;
	//
	//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	//ТаблицаДвижений = НаборДвижений.Выгрузить();
	//
	//// Заполним таблицу движений.
	//СтрокаДвижений = ТаблицаДвижений.Добавить();
	//СтрокаДвижений.РозничнаяТочка 		= КассаККМ;
	//СтрокаДвижений.СуммаБезнал		  	= СуммаДокумента;
	//СтрокаДвижений.Подразделение      	= Подразделение;
	//
	//НаборДвижений.мПериод             = Дата;
	//НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;
	//
	//Если Не Отказ Тогда
	//	Если КоэффициентСторно = 1 Тогда
	//		Движения.РозничнаяВыручка.ВыполнитьПриход();
	//	Иначе
	//		Движения.РозничнаяВыручка.ВыполнитьРасход();
	//	КонецЕсли;
	//КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);

	Если ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
		СообщитьОбОшибке("В документе выбран вид оплаты неверного типа!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда

		Сообщить(Заголовок+"
			|не совпадают сумма документа и ее расшифровка.");
		Отказ = Истина;

	КонецЕсли;
	
	ПроверитьЗаполнениеТЧ(Отказ, Заголовок);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	Если Не Основание = Неопределено Тогда
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;

	ВалютаДокумента         = мВалютаРегламентированногоУчета;

	СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	стрСпособЗаполнения  = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") 
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
			    И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
			    И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СтрокаПлатеж.Сделка=Основание.ЗаказПокупателя;

			Если Не ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда

				//заполняем заказ покупателя из табличной части
				СтруктураКурсаОснования = ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
				КурсОснования=СтруктураКурсаОснования.Курс;
				КратностьОснования=СтруктураКурсаОснования.Кратность;

				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя,
				|	СУММА(ВЫБОР
				|			КОГДА СчетНаОплатуПокупателюТовары.Ссылка.УчитыватьНДС
				|					И (НЕ СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС)
				|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
				|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
				|		КОНЕЦ) КАК Сумма
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя";
				
				Запрос.УстановитьПараметр("СчетНаОплату",Основание);
				
				Выборка = Запрос.Выполнить().Выбрать();
				ПервыйПроход = Истина;
				Пока Выборка.Следующий() Цикл
					Если ПервыйПроход Тогда
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
						КопияСтрокаПлатеж = СтрокаПлатеж;
						ПервыйПроход = Ложь;
					Иначе
						СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПлатеж, КопияСтрокаПлатеж);
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
					КонецЕсли;
					
					СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
					СуммаДокумента = ПересчитатьИзВалютыВВалюту(Выборка.Сумма, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
					                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
					СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
					ПересчитатьСуммуНДС(СтрокаПлатеж);
				КонецЦикла;
				стрСпособЗаполнения = "";
			КонецЕсли;

		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен  Тогда
			стрСпособЗаполнения = "По заказу";
		Иначе
			стрСпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если Основание.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ОсновнаяСтавкаНДС");

		стрСпособЗаполнения = "По взаиморасчетам";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
	    СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Если Основание.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		СтрокаПлатеж.СтавкаНДС = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнаяСтавкаНДС");

		стрСпособЗаполнения = "По взаиморасчетам";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,,"Номер, Дата");
		Дата = ТекущаяДата();
		ЭтотОбъект.УстановитьНовыйНомер(); 
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание, 
		//	"ВидОплаты, ВалютаДокумента, ДоговорВзаиморасчетовЭквайрера, ДоговорЭквайринга, Контрагент, Подразделение, 
		//	|ПроцентТорговойУступки, СуммаДокумента, СуммаТорговойУступки, Эквайрер");			
		ВидОперации  = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
		
		СтруктураКурсаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		
		РасшифровкаПлатежа.Загрузить(Основание.РасшифровкаПлатежа.Выгрузить());
		
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			
			ТекВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ТекВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				ТекВалютаВзаиморасчетов, ТекВалютаВзаиморасчетов,
				СтрокаПлатеж.КурсВзаиморасчетов, СтруктураКурсаВзаиморасчетов.Курс,
				СтрокаПлатеж.КратностьВзаиморасчетов, СтруктураКурсаВзаиморасчетов.Кратность);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			//Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
			//	И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументРасчетовСКонтрагентом) 
			//	Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			//КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПлатеж = Неопределено;
		
	//ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
	//	
	//	Дата = ТекущаяДата();
	//	ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
	//	Контрагент = Справочники.Контрагенты.НайтиПоКоду("00027");
	//	Организация = Основание.Организация;
	//	Подразделение = Основание.Подразделение;
	//	ДокументОснование = Основание;
	//	Комментарий = "Реализация подарочного сертификата";    
	//	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	//	СтрокаПлатеж.СуммаВзаиморасчетов = Основание.ПодарочныйСертификат.Номинал;
	//	СтрокаПлатеж.СуммаПлатежа = Основание.ПодарочныйСертификат.Номинал;
	//	СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	СтрокаПлатеж.КурсВзаиморасчетов      = 1;
	//	СтрокаПлатеж.КратностьВзаиморасчетов = 1;
	//	СтрокаПлатеж.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("71111",,,Справочники.Контрагенты.НайтиПоКоду("00027"));
	//	СуммаДокумента = Основание.ПодарочныйСертификат.Номинал;
	//	
	//	стрСпособЗаполнения = "По взаиморасчетам";
		
	КонецЕсли;

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если стрСпособЗаполнения = "По заказу" Тогда
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По сумме документа" Тогда
		ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж);
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = Истина;
	ЕстьРасчетыПоКредитам     = Ложь;
	ОтраженоВОперУчете        = Истина;
	Оплачено                  = Истина;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;

	Если мУдалятьДвижения Тогда
		УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента   = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВРегламентированномУчете", ОтражатьВБухгалтерскомУчете);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураКурсаДокумента   = ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента             = СтруктураКурсаДокумента.Курс;
	КратностьДокумента        = СтруктураКурсаДокумента.Кратность;

	ЕстьРасчетыСКонтрагентами = Истина;
	ЕстьРасчетыПоКредитам     = Ложь;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	Отказ = НЕ (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВУправленческомУчете);
	Если Отказ Тогда
		Сообщить("Документ должен принадлежать хоть к одному виду учета");
		Возврат;
	КонецЕсли;
	
	// Проводиться может только документ со статусом Подтвержен
	
	//25.11.16 Смирнов, для отладки пока убираем
	//Если Не Статус = Перечисления.СтатусыОплатПлатежнойКартой.Подтвержден Тогда
	//	Сообщить("Можно проводить документ только со статусом ""Подтвержден""");
	//	Отказ = Истина;
	//КонецЕсли;

	//ТаблицаПлатежейУпр = ПолучитьТаблицуПлатежейУпрПоКартам(Дата,ВалютаДокумента,Ссылка, "ОплатаОтПокупателяПлатежнойКартой");

	//ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);

	////Проверим на возможность проведения в БУ и НУ
	//Если ОтражатьВБухгалтерскомУчете тогда
	//	Для каждого СтрокаОплаты из ТаблицаПлатежейУпр Цикл

	//		ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, ВалютаДокумента,
	//											ОтражатьВБухгалтерскомУчете,
	//											ОтражатьВНалоговомУчете,
	//											мВалютаРегламентированногоУчета, Истина, Отказ, 
	//											Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ",
	//											СтрокаОплаты.ВалютаВзаиморасчетов, СтрокаОплаты.РасчетыВУсловныхЕдиницах);
	//											
	//	КонецЦикла;
	//КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	мУдалятьДвижения = НЕ ЭтоНовый();

	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,истина);
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)

	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,истина);
КонецПроцедуры



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

