////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем ИнвертироватьСуммы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

// Хранит валюту по договору
Перем мВалютаВзаиморасчетовПоДоговору;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьДоступностьДокументаРасчетов()

	РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам;
	ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
	ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если Список Тогда
		УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	Иначе
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
	КонецЕсли;

	УстановитьДоступностьДокументаРасчетов();
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьВалютаТорговойУступки.Заголовок = СокрЛП(ВалютаДокумента);
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		ПриИзмененииОрганизации();
	КонецЕсли;

	СтрокаПлатеж.Сделка                        = Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено;

	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	мВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьВидимость();
	УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли (ТипЗнч(Контрагент)=Тип("СправочникСсылка.Контрагенты")) И (НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено) Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);	
		
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

КонецПроцедуры // ПриИзмененииКонтрагента



Процедура ПриИзмененииОрганизации()

КонецПроцедуры // ПриИзмененииОрганизации()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если ЗначениеЗаполнено(ВалютаДокумента) И ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		
		Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
			
			СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа, 
				ВалютаДокумента, ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) 
		И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) 
		И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) 
		И (НЕ (НЕ ЗначениеЗаполнено(ВалютаДокумента) или НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов))) 
		Тогда
		СтрокаПлатеж.СуммаПлатежа = ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетов, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	УстановитьКурсДокумента();

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		Иначе
			УстановитьКурсДокумента();
		КонецЕсли;

		НомерЧекаККМ = 0;
		Статус = Перечисления.СтатусыОплатПлатежнойКартой.НеПодтвержден;
	Иначе
		УстановитьКурсДокумента();		
	КонецЕсли;
	//***20150702
	//УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	//***

	ЕстьРасчетыСКонтрагентами = Истина;
	ЕстьРасчетыПоКредитам     = Ложь;

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	//УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										
	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список=Истина;
	Иначе
		Список=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();

	мВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мВалютаВзаиморасчетовПоДоговору, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);

	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(мВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(мВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "
									+ Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")
									+ " " + СокрЛП(ВалютаДокумента);

	НадписьНомерЧека = ?(НомерЧекаККМ = 0,"",
	                   ?(НомерЧекаККМ > 0,"Номер чека на ККМ: " + СокрЛП(НомерЧекаККМ),
	                                      "Чек на ККМ пробит"));

	Если ЭлементыФормы.НадписьСделка.Заголовок="Сделка:" Тогда
		
		ЭлементыФормы.НадписьСделка.Высота=19;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=19;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=24;
		
	Иначе
		
		ЭлементыФормы.НадписьСделка.Высота=27;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=15;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=29;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном регистраторе.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)

	Перем Ответ;
	
	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе!");
		Возврат;
	КонецЕсли;

	Если Не Проведен Тогда
		Предупреждение("Перед пробитием чека на фискальном регистраторе документ необходимо провести!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированностьВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	//Если Не ПолучитьПроверитьПараметрыДляПробитияЧека(ФР) Тогда
	//	Возврат;
	//КонецЕсли;

	Позиция         = Неопределено;
	НомерСмены      = Неопределено;
	ТаблицаПлатежей = Новый ТаблицаЗначений();
	ТаблицаПлатежей.Колонки.Добавить("Заголовок");
	ТаблицаПлатежей.Колонки.Добавить("Сумма");
	ТаблицаПлатежей.Колонки.Добавить("НДС");
	ТаблицаПлатежей.Колонки.Добавить("Цена");
	ТаблицаПлатежей.Колонки.Добавить("Колво");
	ТаблицаПлатежей.Колонки.Добавить("Товар");

	Для Каждого Позиция Из РасшифровкаПлатежа Цикл
		СтрокаТаблицы           = ТаблицаПлатежей.Добавить();
		СтрокаТаблицы.Товар     = "Принято от " + СокрЛП(Контрагент)
		                          + "
		                            |Основание: " + СокрЛП(ЭтотОбъект);
		Если ТипЗНЧ(ДокументОснование) = Тип("ДокументСсылка.РеализацияПодарочныхСертификатов") Тогда
		СтрокаТаблицы.Товар     = "Принято от " + СокрЛП(Контрагент)
		                          + " Реализация подарочного сертификата";
		КонецЕсли;
		СтрокаТаблицы.Сумма     = Позиция.СуммаПлатежа;
		СтрокаТаблицы.НДС       = ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
		СтрокаТаблицы.Цена      = Позиция.СуммаПлатежа;
		СтрокаТаблицы.Колво     = 1;
	КонецЦикла; 
	
	НомерСекции = 1;
	Если НЕ РасшифровкаПлатежа[0].Сделка = Неопределено Тогда
		Если Не РасшифровкаПлатежа[0].Сделка.Склад = Неопределено Тогда
			НомерСекции = РасшифровкаПлатежа[0].Сделка.Склад.НомерСекции;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("СписокТоваров", ТаблицаПлатежей              );
	Параметры.Вставить("Получено"     , СуммаДокумента               );
	Параметры.Вставить("Скидка"       , 0                            );
	Параметры.Вставить("ЧекНаВозврат" , ЛОЖЬ                         );
	Параметры.Вставить("НомерСекции"  , НомерСекции		             );
	Параметры.Вставить("Авансом" 	  , ЛОЖЬ			             );
	Параметры.Вставить("СуммаНал" 	  , 0				             );
	Параметры.Вставить("СуммаБезнал"  , СуммаДокумента	             );
	Параметры.Вставить("ДопСтрока"	  , ""		                     );
	
	СписокФР = Новый СписокЗначений;
	Для Каждого ФР из глТорговоеОборудование.млФР Цикл
		СписокФР.Добавить(ФР, ФР.Модель);
	КонецЦикла;
	Если СписокФР.Количество() = 1 Тогда
		РезультатВыбора = СписокФР[0];
	Иначе
		РезультатВыбора = СписокФР.ВыбратьЭлемент("Выберите фискальный регистратор");
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
		глТорговоеОборудование.ПечататьЧекДляПКО(РезультатВыбора, Параметры, Ответ);
	Иначе
		//глТорговоеОборудование.ПечататьЧекДляРКО(РезультатВыбора, Параметры, Ответ);
	КонецЕсли;
	
	Если ПустаяСтрока(Ответ) Тогда
		Параметры.Свойство("НомерЧека", НомерЧекаККМ);
		НомерЧекаККМ = ?(НомерЧекаККМ = 0, -1, НомерЧекаККМ);
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Список = Ложь;
	
	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	УстановитьФокус();

	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации();
	//УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	УстановитьФокус();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора = ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	//НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
	
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении суммы взаиморасчетов с контрагентом.
//
Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры // СуммаВзаиморасчетовПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	СтараяСуммаДокумента = СуммаДокумента;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете=Ложь;
		Оплачено=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()

	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока				= РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока				= РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
	
		// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		
		_Валюта = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = _Валюта;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	//НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж = Элемент.ТекущиеДанные;
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
			мВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			УстановитьФокус();
			
			УстановитьВидимость();
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
				
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		мВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФокус();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Неопределено);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"    ,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПоЗадолженностям(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Неопределено);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"    ,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	ПодборЗадолженностей(СтруктураПараметров);

	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Неопределено);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	//НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 
 
// Обработчик события "НачалоВыбора" реквизита "ВидОплаты".
//
Процедура ВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)

	//НачалоВыбораВидаОплатыЧекаККМ(Элемент, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, СтандартнаяОбработка);

КонецПроцедуры // ВидОплатыНачалоВыбора()

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
		СтрокаВидаДвижения = "Расход";
	Иначе
		СтрокаВидаДвижения = "Приход";
	КонецЕсли;
	НачалоВыбораЗначенияСделки(ДокументОбъект, ЭтаФорма, Элемент, 
		СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, СтрокаВидаДвижения,);
	КонецПроцедуры
	
Процедура ДоговорЭквайрингаПриИзменении(Элемент)

	ПриИзмененииДоговораЭквайринга();

	Если НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать значение торговой уступки?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроцентТорговойУступки = ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты);
		ПересчитатьТорговуюУступку();
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ДоговорЭквайрингаПриИзменении()

Процедура ПриИзмененииДоговораЭквайринга()

	Эквайрер = ДоговорЭквайринга.Эквайрер;
	ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;
	ВалютаДокумента = ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов;
	УстановитьКурсДокумента();
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
	
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			РассчитатьСуммуПлатежа();
		КонецЦикла;
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	
	КонецЕсли;

КонецПроцедуры // ПриИзмененииДоговораЭквайринга()

Функция ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Тарифы.ПроцентТорговойУступки КАК ПроцентТорговойУступки
	|ИЗ
	|	Справочник.ДоговорыЭквайринга.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ДоговорЭквайринга
	|	И Тарифы.ВидОплаты = &ВидОплаты
	|");
		
	Запрос.УстановитьПараметр("ДоговорЭквайринга", ДоговорЭквайринга);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентТорговойУступки = Выборка.ПроцентТорговойУступки;
	Иначе
		ПроцентТорговойУступки = 0;
	КонецЕсли;

	Возврат ПроцентТорговойУступки;

КонецФункции // ПолучитьПроцентТорговойУступки()

Процедура ЭквайрерНажатие(Элемент)

	Если ЗначениеЗаполнено(Эквайрер) Тогда
		Эквайрер.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ЭквайрерНажатие()

Процедура ВидОплатыПриИзменении(Элемент)

	ПроцентТорговойУступки = ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты);
	ПересчитатьТорговуюУступку();

КонецПроцедуры // ВидОплатыПриИзменении()

Процедура ПересчитатьТорговуюУступку()

	СуммаТорговойУступки = СуммаДокумента * ПроцентТорговойУступки / 100;

КонецПроцедуры // ПересчитатьТорговуюУступку()

Процедура ПроцентТорговойУступкиПриИзменении(Элемент)

	ПересчитатьТорговуюУступку();

КонецПроцедуры // ПроцентТорговойУступкиПриИзменении()


///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

