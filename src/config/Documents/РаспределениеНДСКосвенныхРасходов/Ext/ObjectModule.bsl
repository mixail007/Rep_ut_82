////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет нет ли пересекающихся интервалами документов с текущим.
//
Процедура ПроверитьПересекающиесяПериоды(Отказ, Заголовок)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаспределениеНДСКосвенныхРасходов.Ссылка        КАК Регистратор,
	|	РаспределениеНДСКосвенныхРасходов.НачалоПериода,
	|	РаспределениеНДСКосвенныхРасходов.КонецПериода,
	|	РаспределениеНДСКосвенныхРасходов.Представление КАК РегистраторПредставление
	|ИЗ
	|	Документ.РаспределениеНДСКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходов
	|ГДЕ
	|	РаспределениеНДСКосвенныхРасходов.Ссылка <> &ТекДокумент
	|	И
	|	РаспределениеНДСКосвенныхРасходов.Проведен
	|	И
	|	РаспределениеНДСКосвенныхРасходов.Организация = &Организация
	|	И
	|	НЕ ((РаспределениеНДСКосвенныхРасходов.НачалоПериода < &ДатаНач И РаспределениеНДСКосвенныхРасходов.КонецПериода < &ДатаНач)
	|		ИЛИ (РаспределениеНДСКосвенныхРасходов.НачалоПериода > &ДатаКон И РаспределениеНДСКосвенныхРасходов.КонецПериода > &ДатаКон))
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач"    , НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон"    , КонецПериода);
	Запрос.УстановитьПараметр("ТекДокумент", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаДокументовПересечений = "";
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
			СтрокаДокументовПересечений = СтрокаДокументовПересечений + Символы.ПС;
		КонецЕсли; 
		СтрокаДокументовПересечений = СтрокаДокументовПересечений + Строка(Выборка.РегистраторПредставление) + " с " + Формат(Выборка.НачалоПериода, "ДФ=dd.MM.yyyy") + " по " + Формат(Выборка.КонецПериода, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(СтрокаДокументовПересечений) Тогда
		ОшибкаПриПроведении(("Найдены распределения косвенных расходов, которые уже действуют в выбранном периоде:" + Символы.ПС + СтрокаДокументовПересечений), Отказ, Заголовок);
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ТаблицаПоКосвеннымРасходам.Итог("БезНДС") = 0 Тогда
		СтруктураОбязательныхПолей = Новый Структура("Организация");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("Организация, СтатьяЗатратНДС");
	КонецЕсли;
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
//
Функция ПодготовитьТаблицуПоКосвеннымРасходам(РезультатЗапросаПоКосвеннымРасходам)

	Таблица = РезультатЗапросаПоКосвеннымРасходам.Выгрузить();
	
	Возврат Таблица;

КонецФункции // ПодготовитьТаблицуПоОплатам()

// Проверяет правильность заполнения строк табличной части.
//
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаКосвенныхРасходов, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидЦенности, Поставщик, СчетФактура, СтавкаНДС");
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставКосвенныхРасходов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Дополнительно нужно проверить арифметику распределения.
	Для Каждого Строка Из ТаблицаКосвенныхРасходов Цикл
		Если Строка.СуммаВсего <> (Строка.БезНДССумма + Строка.НДС0Сумма + Строка.ЕНВДСумма + Строка.НДССумма) Тогда
			СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""Сумма по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
		Если Строка.НДСВсего <> (Строка.БезНДС + Строка.НДС0 + Строка.ЕНВДНДС + Строка.НДС) Тогда
			СообщитьОбОшибке("Для строки """ + Строка.НомерСтроки + """ общая сумма в колонке ""НДС по счету"" не совпадает с итогом распределения этой суммы в других колонках!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формирование таблицы поступлений в разрезе различных счетов учета НДС
//
Функция СформироватьСписокПоступленийПоВидуЦенности(СчетФактура, ВидЦенности);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	НДСПокупки.Поставщик,
					|	НДСПокупки.СчетФактура,
					|	СУММА(НДСПокупки.СуммаБезНДС) КАК СуммаБезНДС,
					|	СУММА(НДСПокупки.НДС) КАК НДС
					|ИЗ
					|	РегистрНакопления.НДСПокупки КАК НДСПокупки
                    |
					|ГДЕ
					|	НДСПокупки.Организация = &Организация И
					|	НДСПокупки.ВидЦенности = &ВидЦенности И
					|	НДСПокупки.СчетФактура = &СчетФактура И
					|	НДСПокупки.Событие = &Событие
                    |
					|СГРУППИРОВАТЬ ПО
					|	НДСПокупки.Поставщик,
					|	НДСПокупки.СчетФактура";	
			
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидЦенности", ВидЦенности);
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.УстановитьПараметр("Событие", 	 Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции // СформироватьСписокПоступленийПоВидуЦенности()

// Формирование движений по регистрам подсистемы НДС.
//
//
Процедура ДвиженияПоРегистрамПодсистемыНДС(РаспределениеКосвенныхРасходов, Отказ, Заголовок);
	
	ТаблицаДвиженийПокупок = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупок.Очистить();
	
	ТаблицаДвиженийКосвенных = Движения.НДСКосвенныеРасходы.Выгрузить();
	ТаблицаДвиженийКосвенных.Очистить();
	
	Для Каждого ТекСтрока Из РаспределениеКосвенныхРасходов Цикл

		Если (ТекСтрока.НДССумма + ТекСтрока.НДС) <> 0 Тогда
			// Эта часть косвенных расходов принадлежит деятельности, облагаемой по обычным ставкам НДС
			// Распределение, в этом случае, отражается только в регистре НДСКосвенныеРасходы
			СтрокаДвиженийКосв = ТаблицаДвиженийКосвенных.Добавить();
			СтрокаДвиженийКосв.Организация = 	Организация;
			
			СтрокаДвиженийКосв.НалоговыйПериод = 	 КонецПериода;
			СтрокаДвиженийКосв.СтавкаНДСРеализации = Перечисления.ВариантыРаспределенияНДСКосвенныхРасходов.РеализацияСНДС;

			СтрокаДвиженийКосв.ВидЦенности = ТекСтрока.ВидЦенности;
			СтрокаДвиженийКосв.Поставщик = 	 ТекСтрока.Поставщик;
			СтрокаДвиженийКосв.СчетФактура = ТекСтрока.СчетФактура;
			СтрокаДвиженийКосв.СтавкаНДС = 	 ТекСтрока.СтавкаНДС;
			СтрокаДвиженийКосв.СуммаБезНДС = ТекСтрока.НДССумма;
			СтрокаДвиженийКосв.НДС = 		 ТекСтрока.НДС;
			
		КонецЕсли;
		
		Если (ТекСтрока.БезНДССумма + ТекСтрока.БезНДС + ТекСтрока.ЕНВДСумма + ТекСтрока.ЕНВДНДС) <> 0 Тогда
			// Эта часть косвенных расходов принадлежит деятельности, не облагаемой НДС.
			// Распределение, в этом случае, отражается в регистре НДСКосвенныеРасходы
			// и в регистре НДСПокупки с событием "НДСВключенВСтоимость"
			
			// НДСПокупки
			СтрокаДвиженийПокуп = ТаблицаДвиженийПокупок.Добавить();
			СтрокаДвиженийПокуп.Организация = 	Организация;
			
			СтрокаДвиженийПокуп.ВидЦенности = ТекСтрока.ВидЦенности;
			СтрокаДвиженийПокуп.Поставщик =   ТекСтрока.Поставщик;
			СтрокаДвиженийПокуп.СчетФактура = ТекСтрока.СчетФактура;
			СтрокаДвиженийПокуп.Событие = 	  Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость;
			СтрокаДвиженийПокуп.СтавкаНДС =   ТекСтрока.СтавкаНДС;
			СтрокаДвиженийПокуп.СуммаБезНДС = ТекСтрока.БезНДССумма + ТекСтрока.ЕНВДСумма;
			СтрокаДвиженийПокуп.НДС = 		  ТекСтрока.БезНДС + ТекСтрока.ЕНВДНДС;
			
			// НДСПоКосвеннымРасходам
			СтрокаДвиженийКосв = ТаблицаДвиженийКосвенных.Добавить();
			СтрокаДвиженийКосв.Организация = 	Организация;
			
			СтрокаДвиженийКосв.НалоговыйПериод = 	 КонецПериода;
			СтрокаДвиженийКосв.СтавкаНДСРеализации = Перечисления.ВариантыРаспределенияНДСКосвенныхРасходов.РеализацияБезНДС;

			СтрокаДвиженийКосв.ВидЦенности = ТекСтрока.ВидЦенности;
			СтрокаДвиженийКосв.Поставщик = 	 ТекСтрока.Поставщик;
			СтрокаДвиженийКосв.СчетФактура = ТекСтрока.СчетФактура;
			СтрокаДвиженийКосв.СтавкаНДС = 	 ТекСтрока.СтавкаНДС;
			СтрокаДвиженийКосв.СуммаБезНДС = ТекСтрока.БезНДССумма + ТекСтрока.ЕНВДСумма;
			СтрокаДвиженийКосв.НДС = 		 ТекСтрока.БезНДС + ТекСтрока.ЕНВДНДС;
			
		КонецЕсли;
		
		Если (ТекСтрока.НДС0Сумма + ТекСтрока.НДС0) <> 0 Тогда
			// Эта часть косвенных расходов отнесена на деятельность, облагаемую НДС по ставке 0%.
			// Распределение, в этом случае, отражается в регистре НДСКосвенныеРасходы
			// и в регистре НДСПокупки с событием "Предполагается НДС 0%"
			
			// НДСПокупки
			СтрокаДвиженийПокуп = ТаблицаДвиженийПокупок.Добавить();
			СтрокаДвиженийПокуп.Организация = 	Организация;

			СтрокаДвиженийПокуп.ВидЦенности = ТекСтрока.ВидЦенности;
			СтрокаДвиженийПокуп.Поставщик =   ТекСтрока.Поставщик;
			СтрокаДвиженийПокуп.СчетФактура = ТекСтрока.СчетФактура;
			СтрокаДвиженийПокуп.Событие = 	  Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0;
			СтрокаДвиженийПокуп.СтавкаНДС =   ТекСтрока.СтавкаНДС;
			СтрокаДвиженийПокуп.СуммаБезНДС = ТекСтрока.НДС0Сумма;
			СтрокаДвиженийПокуп.НДС = 		  ТекСтрока.НДС0;
			
			// НДСПоКосвеннымРасходам
			СтрокаДвиженийКосв = ТаблицаДвиженийКосвенных.Добавить();

			СтрокаДвиженийКосв.Организация = 	Организация;
			
			СтрокаДвиженийКосв.НалоговыйПериод = 	 КонецПериода;
			СтрокаДвиженийКосв.СтавкаНДСРеализации = Перечисления.ВариантыРаспределенияНДСКосвенныхРасходов.РеализацияНДС0;

			СтрокаДвиженийКосв.ВидЦенности = ТекСтрока.ВидЦенности;
			СтрокаДвиженийКосв.Поставщик = 	 ТекСтрока.Поставщик;
			СтрокаДвиженийКосв.СчетФактура = ТекСтрока.СчетФактура;
			СтрокаДвиженийКосв.СтавкаНДС = 	 ТекСтрока.СтавкаНДС;
			СтрокаДвиженийКосв.СуммаБезНДС = ТекСтрока.НДС0Сумма;
			СтрокаДвиженийКосв.НДС = 		 ТекСтрока.НДС0;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ТаблицаДвиженийПокупок.Количество() <> 0 Тогда
		Движения.НДСПокупки.мПериод            = Дата;
		Движения.НДСПокупки.мТаблицаДвижений   = ТаблицаДвиженийПокупок;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	Если ТаблицаДвиженийКосвенных.Количество() <> 0 Тогда
		Движения.НДСКосвенныеРасходы.мПериод            = Дата;
		Движения.НДСКосвенныеРасходы.мТаблицаДвижений   = ТаблицаДвиженийКосвенных;
		Движения.НДСКосвенныеРасходы.ДобавитьДвижение();
		Движения.НДСКосвенныеРасходы.Записать();
	КонецЕсли;
								  
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	Если ЗначениеНеЗаполнено(НачалоПериода) ИЛИ ЗначениеНеЗаполнено(КонецПериода) Тогда
		ОшибкаПриПроведении("Не установлен период документа!", Отказ, Заголовок);
	КонецЕсли; 
	
	// Подготовим данные необходимые для проведения и проверки заполенения табличной части.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЦенности",		"ВидЦенности");
	СтруктураПолей.Вставить("Поставщик",		"Поставщик");
	СтруктураПолей.Вставить("СчетФактура",		"СчетФактура");
	СтруктураПолей.Вставить("СтавкаНДС",		"СтавкаНДС");
	СтруктураПолей.Вставить("СуммаВсего",		"СуммаВсего");
	СтруктураПолей.Вставить("НДСВсего",			"НДСВсего");
	СтруктураПолей.Вставить("БезНДССумма",		"БезНДССумма");
	СтруктураПолей.Вставить("БезНДС",			"БезНДС");
	СтруктураПолей.Вставить("НДС0Сумма",		"НДС0Сумма");
	СтруктураПолей.Вставить("НДС0",				"НДС0");
	СтруктураПолей.Вставить("ЕНВДСумма",		"ЕНВДСумма");
	СтруктураПолей.Вставить("ЕНВДНДС",			"ЕНВДНДС");
	СтруктураПолей.Вставить("НДССумма",			"НДССумма");
	СтруктураПолей.Вставить("НДС",				"НДС");

	РезультатЗапросаПоКосвеннымРасходам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СоставКосвенныхРасходов", СтруктураПолей);
	ТаблицаПоКосвеннымРасходам = ПодготовитьТаблицуПоКосвеннымРасходам(РезультатЗапросаПоКосвеннымРасходам);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиСоставКосвенныхРасходов(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	
	ПроверитьПересекающиесяПериоды(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрамПодсистемыНДС(ТаблицаПоКосвеннымРасходам, Отказ, Заголовок);
	КонецЕсли;
 
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры
