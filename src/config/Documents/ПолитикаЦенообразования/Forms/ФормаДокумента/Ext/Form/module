
 Перем мПолныйТекстЗапроса, мЗапросДляУсловия;

Процедура ПравилаПравилоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	текСтр1 = ЭлементыФормы.Правила.ТекущиеДанные;
 	
	ПостроительОтчета = новый ПостроительОтчета;
	ПостроительОтчета.Текст = мЗапросДляУсловия;
	
	//--------- Запихиваем обратно условие и параметры ------------
	Если текСтр1.Правило<>"" тогда
		//ПостроительОтчета.Выполнить();
		//Разбор 1 условия на разные строки Отбора по Параметрам!
		РазбитьУсловиеНаСтрокиПоляОтбора(текСтр1, ПостроительОтчета);
	Иначе
		стрОтбор = ПостроительОтчета.Отбор.Добавить("Номенклатура.Производитель");	
		стрОтбор.ВидСравнения = ВидСравнения.Равно;
		стрОтбор.Значение = Справочники.Производители.ПустаяСсылка();
		
		стрОтбор = ПостроительОтчета.Отбор.Добавить("ТипЦен");	
		стрОтбор.ВидСравнения = ВидСравнения.Равно;
		стрОтбор.Значение = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();

	КонецЕсли;
	
	
	//--------------------Открываем форму отбора-----------------
	Форма1 = ЭтотОбъект.ПолучитьФорму("НастройкаПравила", ЭтаФорма);
	Форма1.ПостроительОтчета = ПостроительОтчета;
	
	рез = Форма1.ОткрытьМодально();
	 
	 Если рез = истина тогда // если изменили условия - меняем и Правило
		
	ПостроительОтчета = Форма1.ПостроительОтчета;
	
	//-------------Формируем ТестУсловияПоОтбору-------------------------------------------------------
	текСтр1Правило ="";   j=0;  i = текСтр1.НомерСтроки;
	
	Для каждого стр1  Из ПостроительОтчета.Отбор Цикл
		j=j+1;
		
		Если НЕ ТипЗнч(стр1.Значение)=Тип("СписокЗначений") тогда
			
			Если ТипЗнч(стр1.Значение)=Тип("Число") 
				или ТипЗнч(стр1.Значение)=Тип("Строка") тогда
				ИмяПараметра = "Параметр";
			иначе
				ИмяПараметра = "";
			КонецЕсли;	
			
			// все параметры "именные", а не формальные
		     ИмяПараметра = ИмяПараметра+строка(стр1.Значение);
			 ИмяПараметра = стрЗаменить(ИмяПараметра," ","");
	         ИмяПараметра = стрЗаменить(ИмяПараметра,"""",""); // если значение ООО "пример"
			 ИмяПараметра = стрЗаменить(ИмяПараметра,"'","");
			 
			 ИмяПараметра = стрЗаменить(ИмяПараметра,".","");
			 ИмяПараметра = стрЗаменить(ИмяПараметра,",","");
			 
			 ИмяПараметра = стрЗаменить(ИмяПараметра,"-","_"); //"Петров-Водкин"
			 ИмяПараметра = стрЗаменить(ИмяПараметра,"*","_");
			 ИмяПараметра = стрЗаменить(ИмяПараметра,"/","_");
			 ИмяПараметра = стрЗаменить(ИмяПараметра,":","_");
			 
		//ИмяПараметра = "Параметр"+Формат(i,"ЧЦ=2; ЧВН=")+формат(j,"ЧЦ=2; ЧВН=");
			 
		иначе //Если ТипЗнч(стр1.Значение)=Тип("СписокЗначений") тогда
		     ИмяПараметра = строка(стр1.Значение[0].Значение);
			 ИмяПараметра = стрЗаменить(ИмяПараметра," ","");
	         ИмяПараметра = стрЗаменить(ИмяПараметра,".","");
			 ИмяПараметра = стрЗаменить(ИмяПараметра,",","");
			
			 ИмяПараметра = "Список_"+ИмяПараметра;
		КонецЕсли;  
		
		симвУсл = ВидСравненияВУсловие(стр1.ВидСравнения);
	    Если Лев(симвУсл,4)=" НЕ " тогда
		 симвНЕ = "НЕ "; // "НЕ " перед именем поля
	    симвУсл = Прав(симвУсл, стрДлина(симвУсл)-3); //" В "; " В ИЕРАРХИИ ";  " ПОДОБНО "; 
	    КонецЕсли;
	   
		текСтр1Правило = текСтр1Правило + ?(j>1," И ","")+ симвНЕ + стр1.ПутьКДанным 
										+ ?(Лев(симвУсл,2)=" В",симвУсл+"(", симвУсл)  
										+ "&"+ИмяПараметра
										+ ?(Лев(симвУсл,2)=" В",")","");
			стр2 = параметры.Найти(ИмяПараметра, "ИмяПараметра");
			Если стр2 = Неопределено тогда
				стр2 = Параметры.Добавить();
				стр2.ИмяПараметра 	= ИмяПараметра;
			КонецЕсли;
			
		//-------------спецобрабока Списка полей------------------
		Если (Найти(ИмяПараметра,"Список")>0) и ТипЗнч(стр1.Значение)=тип("СписокЗначений") тогда // в списке
			
			Если стр1.Значение.Количество()=0 тогда
				стр2.ЗначениеПараметра = неопределено;
			иначе
				
			стр2.ЗначениеПараметра = стр1.Значение[0].Значение;  //первый элемент...
			
            ЭтоСправочник = истина;
				Если ТипЗнч(стр1.Значение[0].значение)=Тип("Строка") 
		  		или ТипЗнч(стр1.Значение[0].значение)=Тип("Число") тогда
              		ЭтоСправочник= ложь;
			 	КонецЕсли; 
				
				стр2.СписокЗначенийПараметра = ?(ЭтоСправочник, СокрЛП(стр1.Значение[0].Значение.Код), строка(стр1.Значение[0].значение)  );

			// сюда пишем Коды справочника  или Значения полей через  ";"
				Для iii=1 по стр1.Значение.Количество()-1 цикл
					стр2.СписокЗначенийПараметра = стр2.СписокЗначенийПараметра + ";"  
					+  ?(ЭтоСправочник, СокрЛП(стр1.Значение[iii].Значение.Код), строка(стр1.Значение[iii].Значение)  );
				КонецЦикла;
			КонецЕсли;
		иначе // обычное значение: строка, число или Справочник
			стр2.ЗначениеПараметра = стр1.Значение;
		КонецЕсли;
		
	КонецЦикла;
		
	текСтр1.Правило = текСтр1Правило;
	
	Если текСтр1.ОтпускнаяЦена="" Тогда
		текСтр1.ОтпускнаяЦена = "ЦенаПоТипуЦен";
	КонецЕсли;
	
КонецЕсли;

КонецПроцедуры

Процедура РазбитьУсловиеНаСтрокиПоляОтбора(текСтр1, Построитель1);
	
	// i - строка, j-ый параметр
		Nj = СтрЧислоВхождений(текСтр1.Правило, "&");
		Nусл = СтрЧислоВхождений(текСтр1.Правило," И ")+1;
		i  =  текСтр1.номерСтроки;
		текстУсловия = текСтр1.Правило;
		
для j=1 по Nусл цикл // отделение и обработка 1 условия
			   номДел = Найти(текстУсловия, " И "); // Всегда только И !!!
			 длинаУсл = стрДлина(текстУсловия);
			 Если номДел=0 тогда // последнее или 1 условие без " И "
				текСтр1поле  = СокрЛП(текстУсловия);
				текстУсловия ="";
			 иначе
				текСтр1поле  = СокрЛП(Лев(текстУсловия, номДел) );
				текстУсловия = СокрЛП(Прав(текстУсловия, длинаУсл - номДел - 2)); // "И "
			 КонецЕсли;	 
			 
			 
	//------------проверим и уберем скобки для всего условия вцелом-------------
		Если Лев(текСтр1поле,1)="(" тогда
			текСтр1поле = СокрЛП( прав(текСтр1поле,  стрДлина(текСтр1поле) - 1) );
		КонецЕсли;
		Если Прав(текСтр1поле,1)=")" тогда
			текСтр1поле = СокрЛП( Лев(текСтр1поле,  стрДлина(текСтр1поле) - 1) );
		КонецЕсли;
					 
			 
			 
		//перед условием обязательно пробел!!!
		стрОтборПутьКДанным  = СокрЛП( Лев(текСтр1поле, найти(текСтр1поле," ")-1 ) ); // "Номенклатура.ВидТовара"
		текСтр1поле = СокрЛП( Прав(текСтр1поле, стрДлина(текСтр1поле) - найти(текСтр1поле," ")) );
		
		Если стрОтборПутьКДанным = "НЕ" тогда
		стрОтборПутьКДанным  = СокрЛП( Лев(текСтр1поле, найти(текСтр1поле," ")-1 ) ); // "Номенклатура.ВидТовара"
		текСтр1поле = "НЕ "+СокрЛП( Прав(текСтр1поле, стрДлина(текСтр1поле) - найти(текСтр1поле," ")) );
		КонецЕсли;	
		
	//=====================================================================
		//стрОтборПутьКДанным = "ЦеныПоставщиков."+стрОтборПутьКДанным;
		стрОтборПутьКДанным1 = СтрЗаменить(стрОтборПутьКДанным1,".","");
		
		стрОтбор = Построитель1.Отбор.Найти(стрОтборПутьКДанным);
		Если стрОтбор = неопределено тогда
			стрОтбор = Построитель1.Отбор.Добавить(стрОтборПутьКДанным); //,стрОтборПутьКДанным2,стрОтборПутьКДанным);
		КонецЕсли;
		
		//после условия обязательно пробел!!!
		УсловиеОтбора = СокрЛП( Лев(текСтр1поле, найти(текСтр1поле," ") ) );
		текСтр1поле = СокрЛП( Прав(текСтр1поле, стрДлина(текСтр1поле) - найти(текСтр1поле," ")) );
		
		//---------------НЕ прибавляем следующее слово к Условию и обработаем позже...-----------------------
		Если УсловиеОтбора = "НЕ" тогда
			УсловиеОтбора = УсловиеОтбора + " "+СокрЛП( Лев(текСтр1поле, найти(текСтр1поле," ") ) );
			текСтр1поле = СокрЛП( Прав(текСтр1поле, стрДлина(текСтр1поле) - найти(текСтр1поле," ")) );
		КонецЕсли;
		
		
		// бывает "В" а также "В ИЕРАРХИИ"
		Если УсловиеОтбора ="В" или УсловиеОтбора ="НЕ В" тогда
			Если вРег(Лев(текСтр1поле,8)) = "ИЕРАРХИИ" тогда
				УсловиеОтбора = УсловиеОтбора+" ИЕРАРХИИ";
				текСтр1поле = СокрЛП( прав(текСтр1поле,  стрДлина(текСтр1поле) - 8) );
			КонецЕсли;
		КонецЕсли;
		
		//------------уберем скобки перед значением
		Если Лев(текСтр1поле,1)="(" тогда
			текСтр1поле = СокрЛП( прав(текСтр1поле,  стрДлина(текСтр1поле) - 1) );
		КонецЕсли;
		Если Прав(текСтр1поле,1)=")" тогда
			текСтр1поле = СокрЛП( Лев(текСтр1поле,  стрДлина(текСтр1поле) - 1) );
		КонецЕсли;
		
		стрОтбор.ВидСравнения = УсловиеВВидСравнения(УсловиеОтбора);
		
		   //------------- Значение ---------------------
		   // параметр, Число или Строка
		   //--------------------------------------------
		   ЭтоПараметр = ложь;
		    Если Лев(текСтр1поле,1)="&" тогда
			   ЭтоПараметр = Истина;
			   текСтр1поле = прав(текСтр1поле, стрДлина(текСтр1поле)-1);
			иначеЕсли Лев(текСтр1поле,1)="""" тогда
			     стрОтбор.Значение = Сред(текСтр1поле, 2, стрДлина(текСтр1поле)-2); // обрезаем 1 и последний "
			иначе // число?
				Попытка
					Если Тип(стрОтбор.ТипЗначения) = Тип("Строка") тогда
					стрОтбор.Значение = текСтр1поле;
					иначеЕсли Тип(стрОтбор.ТипЗначения) = Тип("Число") тогда
					стрОтбор.Значение = Число(текСтр1поле);
					КонецЕсли;
				Исключение
				КонецПопытки;	
			КонецЕсли; //Лев(текСтр1поле,1)="&"
			
			   
		   //Параметров может быть меньше чем условий, например (Номенклатура.ПометкаУдаления = Истина)
	   Если ЭтоПараметр тогда  //j<=Nj
			ИмяПараметра = "Параметр"+Формат(i,"ЧЦ=2; ЧВН=")+формат(j,"ЧЦ=2; ЧВН=");
			
			Если текСтр1поле<>ИмяПараметра тогда
				стрЗначения = параметры.Найти(текСтр1поле,"ИмяПараметра");
			иначе	
				стрЗначения = параметры.Найти(ИмяПараметра,"ИмяПараметра");
			КонецЕсли;
				
			Если стрЗначения<>неопределено тогда
				
				
		//-------------спецобрабока Списка полей------------------
				Если стрЗначения.СписокЗначенийПараметра="" и ЗначениеЗаполнено(стрЗначения.ЗначениеПараметра) тогда 
					стрОтбор.Значение  = стрЗначения.ЗначениеПараметра;
				иначеЕсли стрЗначения.СписокЗначенийПараметра<>"" тогда// в списке
					списЗнач = новый СписокЗначений;
					списЗнач0 = СтрокаВСписок(стрЗначения.СписокЗначенийПараметра);
						 
					ЭтоСправочник = ложь;  ЭтоЧисло=ложь; ЭтоСтрока=ложь;
				    Если ТипЗнч(стрЗначения.ЗначениеПараметра)=Тип("Строка") тогда
					    ЭтоСтрока = истина;
			  		иначеЕсли ТипЗнч(стрЗначения.ЗначениеПараметра)=Тип("Число") тогда
	              		ЭтоЧисло = истина;
					иначе
						ЭтоСправочник = истина;
						ИмяСправочника = Строка( ТипЗнч(стрЗначения.ЗначениеПараметра) );	
					КонецЕсли; 
						
					Для iii=0 по списЗнач0.Количество()-1 цикл
	          			списЗнач.Добавить(  ?(ЭтоСправочник, Справочники[ИмяСправочника].найтиПоКоду(СокрЛП(списЗнач0[iii].значение)), 
													?(ЭтоЧисло, число(списЗнач0[iii].значение), списЗнач0[iii].значение) 
									     )   );
					КонецЦикла;
					// список групп	
					Если стрОтбор.ВидСравнения = видСравнения.ВИерархии тогда
						стрОтбор.ВидСравнения = видСравнения.ВСпискеПоИерархии;
					иначеЕсли стрОтбор.ВидСравнения = видСравнения.НЕВИерархии тогда
						стрОтбор.ВидСравнения = видСравнения.НЕВСпискеПоИерархии;
					КонецЕсли;
					стрОтбор.Значение  = списЗнач;
				КонецЕсли;
		
			КонецЕсли; //стрЗначения<>неопределено

					
		КонецЕсли; //ЭтоПараметр
			
		стрОтбор.Использование  = Истина;
		
КонецЦикла; // цикл по условиям И
	
КонецПроцедуры

Функция ВидСравненияВУсловие(текВидСравнения)
	рез = " = ";
Если текВидСравнения = ВидСравнения.Равно тогда
	рез = " = ";
иначеЕсли текВидСравнения = ВидСравнения.НеРавно тогда
	рез = " <> ";
иначеЕсли текВидСравнения = ВидСравнения.Больше тогда
	рез = " > ";
иначеЕсли текВидСравнения = ВидСравнения.БольшеИлиРавно тогда
	рез = " >= ";
иначеЕсли текВидСравнения = ВидСравнения.Меньше тогда
	рез = " < ";
иначеЕсли текВидСравнения = ВидСравнения.МеньшеИлиРавно тогда
	рез = " <= ";
иначеЕсли текВидСравнения = ВидСравнения.ВИерархии 
	или текВидСравнения = ВидСравнения.ВСпискеПоИерархии тогда  // в иерархии и значение = список
	рез = " В ИЕРАРХИИ ";
	
//-------% надо добавлять в значении поля самостоятельно!!!------------------
иначеЕсли текВидСравнения = ВидСравнения.Содержит тогда
	рез = " ПОДОБНО ";
	
	
//-----------------требуется спецобработка значений!!!------------------------------
иначеЕсли текВидСравнения = ВидСравнения.ВСписке тогда
//	  или текВидСравнения = ВидСравнения.ВСпискеПоИерархии тогда // обратно никак!
	рез = " В ";


//----------спецобрабока имени поля---------------
иначеЕсли текВидСравнения = ВидСравнения.НеВИерархии 
		или текВидСравнения = ВидСравнения.НеВСпискеПоИерархии тогда
	рез = " НЕ В ИЕРАРХИИ ";
	
иначеЕсли текВидСравнения = ВидСравнения.НЕСодержит тогда
	рез = " НЕ ПОДОБНО ";
	
	
//------------обработка имени значения и значения	
иначеЕсли текВидСравнения = ВидСравнения.НеВСписке тогда
//	  или текВидСравнения = ВидСравнения.НеВСпискеПоИерархии тогда
	рез = " НЕ В ";
	
	
иначе
	сообщить("Недопустимый вид сравнения '"+строка(текВидСравнения)+"'! Вид сравнения заменен на 'Равно'.", СтатусСообщения.Информация);
	рез = " = ";	
КонецЕсли;

возврат рез;

КонецФункции

функция УсловиеВВидСравнения(рез)
	
	текВидСравнения = ВидСравнения.Равно;
	рез = сокрЛП(рез);
	
	Если рез="="тогда
		текВидСравнения = ВидСравнения.Равно;
	иначеЕсли рез = "<>"  тогда
		текВидСравнения = ВидСравнения.НеРавно;
	иначеЕсли рез = ">" тогда
		текВидСравнения = ВидСравнения.Больше ;
	иначеЕсли рез = ">=" тогда
		текВидСравнения = ВидСравнения.БольшеИлиРавно;
	иначеЕсли рез = "<" тогда
		текВидСравнения = ВидСравнения.Меньше;
	иначеЕсли рез = "<=" тогда
		текВидСравнения = ВидСравнения.МеньшеИлиРавно;
	иначеЕсли рез = "В ИЕРАРХИИ" тогда
		текВидСравнения = ВидСравнения.ВИерархии;
	иначеЕсли рез = "ПОДОБНО" тогда
		текВидСравнения = ВидСравнения.Содержит;
		
	иначеЕсли рез = "В" тогда
		текВидСравнения = ВидСравнения.ВСписке;
		
	//		симвНЕ = ?(Лев(симвУсл,4)=" НЕ ","НЕ ",""); // "НЕ " перед именем поля
	
	иначеЕсли рез = "НЕ В ИЕРАРХИИ" тогда
		текВидСравнения = ВидСравнения.НеВИерархии;
	иначеЕсли рез = "НЕ ПОДОБНО" тогда
		текВидСравнения = ВидСравнения.НеСодержит;
	иначеЕсли рез = "НЕ В" тогда
		текВидСравнения = ВидСравнения.НеВСписке;
	
	КонецЕсли;

возврат текВидСравнения;
	
КонецФункции

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ВидОперации=Перечисления.ВидыОперацийПолитикаЦенообразования.АвтоматическийРасчетЦен;
	КонецЕсли;	
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);	
КонецПроцедуры
									
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПолитикаЦенообразования[Кнопка.Имя];
	КонецЕсли;


	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);


КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура ДействияФормыВыгрузить(Кнопка)
	//Предупреждение("Прямая выгрузка временно не работает...
	//				|автоматически документ выгрузится 
	//				|по расписанию обмена (OIM)", 30);
	Если ЭтоНовый() или этотОбъект.Модифицированность() Тогда
		СообщитьОбОшибке("Перед выгрузкой данный документ необходимо записать");
	КонецЕсли;	
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
    Обработка = Обработки[НаименованиеОбработки].Создать();


//Обработка = Обработки.УниверсальныйОбменДаннымиXMLv2.Создать();
	Обработка.РежимОбмена = "Выгрузка";
	ФайлПравилОбмена="c:\ПравилаОбменаПолитикиЦенообразования_ЯШТ_УТ_ОИМ.xml"; //должен там быть!
		
	ф = новый Файл(ФайлПравилОбмена);
	Если не ф.Существует() тогда
		ФайлПравилОбмена="\\sigma\c$\ПравилаОбменаПолитикиЦенообразования_ЯШТ_УТ_ОИМ.xml"; //должен там быть!
	КонецЕсли;
	
	Обработка.ИмяФайлаПравилОбмена = ФайлПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	//
	// только за 1 секунду !
	Обработка.ДатаНачала    = ЭтотОбъект.Дата;
	Обработка.ДатаОкончания = ЭтотОбъект.Дата+1;
	
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = "sigma:2041";
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = "v82ib_test";
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Админ2";
	Обработка.ПарольИнформационнойБазыДляПодключения = "cegthvfhbj";
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,
	//Обработка.ИмяФайлаОбмена= ИмяФайлаОбмена;
	// 1 - снимать регистрацию
	
	Обработка.ЗагрузитьПравилаОбмена();
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки", ЭтотОбъект.Ссылка);
	Обработка.ВыполнитьВыгрузку();
				
КонецПроцедуры

Процедура ПолныйТекстЗапросаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
			
	Попытка
		Если Не ПустаяСтрока(ПолныйТекстЗапроса) Тогда
			ПолныйТекстЗапроса2 = "ВЫБРАТЬ
			|"+ПолныйТекстЗапроса+"
			|ИЗ
			|РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры";
			ПолныйТекстЗапроса2 = СтрЗаменить(ПолныйТекстЗапроса2, "ЦенаПоТипуЦен", "ЦеныНоменклатуры.Цена ");
			КонструкторЗапроса.Текст = ПолныйТекстЗапроса2;
		КонецЕсли;
	
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ПолныйТекстЗапроса2=КонструкторЗапроса.Текст;
			//обратная очистка
			ПолныйТекстЗапроса2 = СтрЗаменить(ПолныйТекстЗапроса2, "ЦеныНоменклатуры.Цена ", "ЦенаПоТипуЦен");
			ПолныйТекстЗапроса2 = СтрЗаменить(ПолныйТекстЗапроса2, "ВЫБРАТЬ", "");
			ПолныйТекстЗапроса2 = СтрЗаменить(ПолныйТекстЗапроса2, "ИЗ", "");
			ПолныйТекстЗапроса2 = СтрЗаменить(ПолныйТекстЗапроса2, "РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры", "");
			ПолныйТекстЗапроса2 = сокрЛП(ПолныйТекстЗапроса2);
			
			Если ПолныйТекстЗапроса2<>ПолныйТекстЗапроса тогда
				Если РольДоступна("ПолныеПрава") тогда
					
					ПолныйТекстЗапроса = ПолныйТекстЗапроса2;
					Предупреждение("Текст запроса изменен!");
				иначе
					Предупреждение("У Вас недостаточно прав для прямого изменения запроса!
								   |Текст запроса формируется автоматически по условиям!");
				КонецЕсли;	
			КонецЕсли;	
			Модифицированность = Истина;
		КонецЕсли;
	Исключение
		Предупреждение("Запрос содержит ошибку: 
		|" + ИнформацияОбОшибке().Причина.Описание);
	КонецПопытки;


КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	Если Контрагент.Пустая() тогда
		Предупреждение("Выберите контрагента!");
		Возврат;
	КонецЕсли;	
	
	рез = ОбменСУТИнтернетМагазин.ПолучитьЦеныДляКонтрагента_РегСв(Контрагент,неопределено, Истина, неопределено);
	Правила.Очистить();
	Правила.Загрузить( рез.Правила );
	Параметры.Очистить();
	Параметры.Загрузить( рез.Параметры );
	
КонецПроцедуры
									
									
мЗапросДляУсловия=
"ВЫБРАТЬ  Номенклатура, ТипЦен 
|{ВЫБРАТЬ
|Номенклатура.*,
|ТипЦен}
|ИЗ
|РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, {Номенклатура.*, ТипЦен.*}) КАК ЦеныНоменклатуры";

