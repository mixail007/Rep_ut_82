
// Таблица значений, используется для определения ИндексаСортировки строк табличной части
Перем мТЗСтадий;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет дату начала периода анализа
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Дата начала периода анализа
//
Функция ОпределитьДатуНачала()

	Если Периодичность = Перечисления.Периодичность.День ИЛИ Периодичность = Перечисления.Периодичность.Неделя Тогда
		ДатаНачала = НачалоДня(ДатаОкончания- КоличествоСекундПериода(Периодичность)*КоличествоПериодовАнализа) + 60*60*24;
	Иначе
		Если Периодичность = Перечисления.Периодичность.Месяц Тогда
			КолМесяцев = КоличествоПериодовАнализа;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			КолМесяцев = КоличествоПериодовАнализа*3;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
			КолМесяцев = КоличествоПериодовАнализа*12;
		КонецЕсли;
		ДатаНачала = НайтиНачальнуюДатуПериодаМесяцев(ДатаОкончания, КолМесяцев);
	КонецЕсли;
	
	Возврат НачалоДня(ДатаНачала);

КонецФункции // ОпределитьДатуНачала()

// Функция определяет изменение стадии взаимоотношений
// с клиентом за промежуток времени и возвращает соответствующюю картинку
//
// Параметры
//  ВыбКонтрагент - СправочникСсылка.Контрагенты
//  ТекущееСостояние - ПеречислениеСсылка - состояние на конец периода
//
// Возвращаемое значение:
//   Картинка
//
Функция ПолучитьИндексКартинкиИзмененияСостояний(ВыбКонтрагент, ТекущееСостояние, НачальноеСостояние)


	Если ВыбКонтрагент.Пустая() Тогда

		Возврат Неопределено;
	
	КонецЕсли;

	Если НачальноеСостояние = ТекущееСостояние Тогда
	
		Возврат 0;

	Иначе

		Если ТекущееСостояние = Перечисления.XYZКлассификация.XКласс Тогда
		
			Возврат 2;
		
		ИначеЕсли ТекущееСостояние = Перечисления.XYZКлассификация.YКласс Тогда

			Если НачальноеСостояние = Перечисления.XYZКлассификация.XКласс Тогда
			
				Возврат 1;

			Иначе

				Возврат 2;
			
			КонецЕсли; 
			
		ИначеЕсли ТекущееСостояние = Перечисления.XYZКлассификация.ZКласс Тогда

			Если НачальноеСостояние = Перечисления.XYZКлассификация.XКласс
			 ИЛИ НачальноеСостояние = Перечисления.XYZКлассификация.YКласс Тогда
			
				Возврат 1;

			Иначе

				Возврат 2;
			
			КонецЕсли; 
			
		ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда

			Возврат 2;
			
		ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда

			Возврат 0;
			
		ИначеЕсли ТекущееСостояние = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель Тогда

			Возврат 1;
			
		КонецЕсли; 
	
	КонецЕсли;

	Возврат Неопределено;

КонецФункции // ПолучитьКартинкуИзмененияСостояний(Выборка[НаименованиеГруппировки])()

// Процедура конторолирует видимость колонок табличной части ЗначениеПараметра и ПроцентПараметра
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ВидимостьКолонокТабличнойЧасти()

	ПоказыватьКолонки = Истина;
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());

	ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений", ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений);

	Если ТипЗнч(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений) = Тип("ПеречислениеСсылка.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений") И ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		ПоказыватьКолонки = Ложь;
	КонецЕсли; 

	ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.Колонки.ЗначениеПараметра.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.Колонки.ПроцентПараметра.Видимость  = ПоказыватьКолонки;
	
КонецПроцедуры

// Функция определяет окончание периода по дате и типу периода
//
// Параметры
//  ДатаНачалаПериода - Дата
//  ПериодСсылка - ПеречислениеСсылка - тип периода
//
// Возвращаемое значение:
//   Дата
//
Функция ОпределитьКонецПериода(ДатаКонцаПериода, ПериодСсылка) Экспорт

	Если ПериодСсылка = Перечисления.Периодичность.День Тогда
	
		Возврат КонецДня(ДатаКонцаПериода);

	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Неделя Тогда
	
		Возврат КонецНедели(ДатаКонцаПериода);
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Месяц Тогда
	
		Возврат КонецМесяца(ДатаКонцаПериода);
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Квартал Тогда
	
		Возврат КонецКвартала(ДатаКонцаПериода);
	
	ИначеЕсли ПериодСсылка = Перечисления.Периодичность.Год Тогда
	
		Возврат КонецГода(ДатаКонцаПериода);

	Иначе

		Возврат ДатаКонцаПериода;
		
	КонецЕсли; 

КонецФункции // ОпределитьКонецПериода()

// Функция определяет критерии для распределения.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ТаблицаЗначений, Поля:
//              Стадия, ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями или ПеречислениеСсылка.XYZКлассификация
//              ПараметртОт, Число - начальное значение параметра для данного значения стадия/класс
//              ПараметртДо, Число - конечное значение параметра для данного значения стадия/класс
//
Функция ОпределитьНастройкиРаспределенияСтадийПокупателей()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Стадия");
	ТЗ.Колонки.Добавить("ПараметрОт");
	ТЗ.Колонки.Добавить("ПараметрДо");

	СтрокаРазовыйПокупатель = ТЗ.Добавить();
	СтрокаРазовыйПокупатель.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;
	СтрокаРазовыйПокупатель.ПараметрОт = РазовыйПокупательНач;
	СтрокаРазовыйПокупатель.ПараметрДо = РазовыйПокупательКон;
	
	СтрокаКласса = ТЗ.Добавить();
	СтрокаКласса.Стадия = Перечисления.XYZКлассификация.XКласс;
	СтрокаКласса.ПараметрОт = XКлассНач;
	СтрокаКласса.ПараметрДо = XКлассКон;
	
	СтрокаКласса = ТЗ.Добавить();
	СтрокаКласса.Стадия = Перечисления.XYZКлассификация.YКласс;
	СтрокаКласса.ПараметрОт = YКлассНач;
	СтрокаКласса.ПараметрДо = YКлассКон;
	
	СтрокаКласса = ТЗ.Добавить();
	СтрокаКласса.Стадия = Перечисления.XYZКлассификация.ZКласс;
	СтрокаКласса.ПараметрОт = ZКлассНач;
	СтрокаКласса.ПараметрДо = ZКлассКон;
	
	Возврат ТЗ;

КонецФункции // ОпределитьНастройкиРаспределенияСтадийПокупателей()

// Функция определяет индекс стадии/класса, по которому будут сортироваться строки табличной части
//
// Параметры
//  Стадия - ПеречислениеСслка.СтадииВзаимоотношенийСПокупателями.XYZКлассификация
//
// Возвращаемое значение:
//   Число
//
Функция ОпределитьИндексСтадии(Стадия)

	СтрокаСтадий = мТЗСтадий.Найти(Стадия, "Стадия");
	Если СтрокаСтадий <> Неопределено Тогда
		Возврат СтрокаСтадий.Индекс;
	Иначе
		Возврат 0;
	КонецЕсли; 

КонецФункции

// Функция определяет текущую стадию контрагента
//
// Параметры
//  ПроцентКоэффициента - яисло, относительный коэффициет вариации
//  ТекущаяСтадия - ПеречислениСсылка, текущая стадия контрагента
//  ТЗНастроек - ТаблицаЗначений, настройки распределения по стадиям взаимоотношений покупателей
//  КоличествоДокументов - Число, количество расходных документов
//
// Возвращаемое значение:
//  НоваяСтадия - ПеречислениеСсылка, определенная стадия
//
Функция ОпределитьСтадиюКонтрагента(ПроцентКоэффициента, ТекущаяСтадия, ТЗНастроек, КоличествоДокументов)

	НоваяСтадия = ТекущаяСтадия;

	СтрокаРазовогоПокупателя = ТЗНастроек.Найти(Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель, "Стадия");

	Если СтрокаРазовогоПокупателя <> Неопределено Тогда
		РазовыйПокупательОт = СтрокаРазовогоПокупателя.ПараметрОт;
		РазовыйПокупательДо = СтрокаРазовогоПокупателя.ПараметрДо;
	Иначе
		РазовыйПокупательОт = 0;
		РазовыйПокупательДо = 0;
	КонецЕсли; 

	Если ТекущаяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель
		 ИЛИ ТекущаяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка() Тогда

		Если КоличествоДокументов >= РазовыйПокупательОт И КоличествоДокументов <= РазовыйПокупательДо Тогда
			НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;
		ИначеЕсли КоличествоДокументов > РазовыйПокупательДо И РазовыйПокупательДо > 0 Тогда
			НоваяСтадия   = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;
			ТекущаяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;
			НоваяСтадия   = ОпределитьКлассПостоянногоПокупателя(ПроцентКоэффициента, ТекущаяСтадия, ТЗНастроек);
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда
	
		Если КоличествоДокументов > РазовыйПокупательДо Тогда
			НоваяСтадия = ОпределитьКлассПостоянногоПокупателя(ПроцентКоэффициента, ТекущаяСтадия, ТЗНастроек);
		КонецЕсли; 
		
	Иначе

		НоваяСтадия = ОпределитьКлассПостоянногоПокупателя(ПроцентКоэффициента, ТекущаяСтадия, ТЗНастроек);
		
	КонецЕсли; 

	Возврат НоваяСтадия;

КонецФункции // ОпределитьСтадиюКонтрагента()

// Функция определяет стадию контрагента, по заданным параметрам
//
// Параметры
//  ПроцентКоэффициента - яисло, относительный коэффициет вариации
//  ТекущаяСтадия - ПеречислениСсылка, текущая стадия контрагента
//  ТЗНастроек - ТаблицаЗначений, настройки распределения по стадиям взаимоотношений
//
// Возвращаемое значение:
//  НоваяСтадия - ПеречислениеСсылка, определенная стадия
//
Функция ОпределитьКлассПостоянногоПокупателя(ПроцентКоэффициента, ТекущаяСтадия, ТЗНастроек)

	НоваяСтадия = ТекущаяСтадия;
	
	Если ПроцентКоэффициента = 0 Тогда
		
		НоваяСтадия = Перечисления.XYZКлассификация.XКласс;
		
	Иначе
		
		Для каждого Строки Из ТЗНастроек Цикл

			Если ТипЗнч(Строки.Стадия) <> Тип("ПеречислениеСсылка.XYZКлассификация") Тогда
			
				Продолжить;
			
			КонецЕсли; 

			Если ПроцентКоэффициента <= Строки.ПараметрДо И ПроцентКоэффициента >= Строки.ПараметрОт Тогда
				
				НоваяСтадия = Строки.Стадия;
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла;

	КонецЕсли; 
	
	Возврат НоваяСтадия;

КонецФункции // ОпределитьXYZСтадию()

// Процедура производит сотрировку строк табличной части
// 
Процедура СортироватьТЧ()

	ВидимостьКолонокТабличнойЧасти();
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.Колонки.ЗначениеПараметра.Видимость Тогда
		ТаблицаРаспределенияКонтрагентов.Сортировать("ИндексСортировки ВОЗР, ЗначениеПараметра УБЫВ");
	Иначе
		ТаблицаРаспределенияКонтрагентов.Сортировать("ИндексСортировки ВОЗР, КоэффициентВариации ВОЗР");
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		КоличествоПериодовАнализа = 1;
		ВыборкаДокументов = Документы.КлассификацияПокупателейПоСтадиямВзаимоотношений.Выбрать(, Дата, , "Дата УБЫВ");
		Если ВыборкаДокументов.Следующий() Тогда
			РазовыйПокупательНач      = ВыборкаДокументов.Ссылка.РазовыйПокупательНач;
			РазовыйПокупательКон      = ВыборкаДокументов.Ссылка.РазовыйПокупательКон;
			XКлассНач                 = ВыборкаДокументов.Ссылка.XКлассНач;
			XКлассКон                 = ВыборкаДокументов.Ссылка.XКлассКон;
			YКлассНач                 = ВыборкаДокументов.Ссылка.YКлассНач;
			YКлассКон                 = ВыборкаДокументов.Ссылка.YКлассКон;
			ZКлассНач                 = ВыборкаДокументов.Ссылка.ZКлассНач;
			ZКлассКон                 = ВыборкаДокументов.Ссылка.ZКлассКон;
			Периодичность             = ВыборкаДокументов.Ссылка.Периодичность;
			КоличествоПериодовАнализа = ВыборкаДокументов.Ссылка.КоличествоПериодовАнализа;
		КонецЕсли; 
		
		Если Периодичность.Пустая() Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		КонецЕсли; 
		Если ДатаОкончания = '00010101000000' Тогда
			ДатаОкончания = ОпределитьКонецПериода(ТекущаяДата(), Периодичность);
		КонецЕсли; 
		
	КонецЕсли;
	
	ВидимостьКолонокТабличнойЧасти();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Заполнить.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовЗаполнить(Кнопка)

	Если ТаблицаРаспределенияКонтрагентов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ТаблицаРаспределенияКонтрагентов.Очистить();
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
	
	ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений", ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений);
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено ИЛИ (ТипЗнч(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений) = Тип("ПеречислениеСсылка.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений") И ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений.Пустая()) Тогда
		Предупреждение("В учетной политике предприятия не указан параметр для распределения покупателей по стадиям взаимоотношений. Заполнение невозможно.");
		Возврат;
	КонецЕсли; 
	
	Если Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		Предупреждение("Укажите периодичность");
		Возврат;
	КонецЕсли; 
	
	Если КоличествоПериодовАнализа <= 0 Тогда
		Предупреждение("Количество периодов анализа должно быть больше нуля.");
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	ДатаОкончания = КонецДня(ДатаОкончания);
	ДатаНачала = ОпределитьДатуНачала();
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВыручки Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.СтоимостьОборот
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.СтоимостьОборот - (ПродажиКомпанииОбороты.КоличествоОборот * ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПроданныхТоваров Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.КоличествоОборот
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПродаж Тогда
		
		ПолеЗапроса = "
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ(ПродажиКомпанииОбороты.ДокументПродажи))";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		
		ПолеЗапроса = "
		|
		|		ПродажиКомпанииОбороты.ДокументПродажи КАК ДокументПродажиИтоги,
		|		ПродажиКомпанииОбороты.ДокументПродажи КАК ДокументПродажи,
		|
		|";
		
	Иначе
		
		ПолеЗапроса = "";
		Предупреждение("В учетной политике предприятия не указан параметр для распределения покупателей по стадиям взаимоотношений. Заполнение невозможно.");
		Возврат;
		
	КонецЕсли; 

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	
	|	ПродажиКонтрагентам.Контрагент                  КАК Контрагент,
	|	ПродажиКонтрагентам.Период                      КАК Период,
	|	ПродажиКонтрагентам.Менеджер                    КАК Менеджер,
	|	ВЫБОР КОГДА
	|		Стадии.Стадия ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Стадии.Стадия
	|	ИНАЧЕ
	|		&ПустаяСтадия
	|	КОНЕЦ                  КАК Стадия,
	|
	|	ВЫБОР КОГДА
	|		Стадии.Класс ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Стадии.Класс
	|	ИНАЧЕ
	|		&ПустойКласс
	|	КОНЕЦ                                           КАК Класс,
	|	ПродажиКонтрагентам.КоличествоДокументовПродажи КАК КоличествоДокументовПродажи,
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПродажиКонтрагентам.ДокументПродажи             КАК ДокументПродажи,
		|	ПродажиКонтрагентам.ДокументПродажиИтоги        КАК ДокументПродажиИтоги
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ПродажиКонтрагентам.ПараметрРаспределения       КАК ПараметрРаспределения
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ " + ?(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами, ПолеЗапроса, (ПолеЗапроса + " КАК ПараметрРаспределения,")) + "
	|
	|		ПродажиКомпанииОбороты.Период                                 КАК Период,
	|
	|		ВЫБОР КОГДА
	|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
	|		ТОГДА
	|			Контрагенты.Контрагент
	|		ИНАЧЕ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
	|		КОНЕЦ                                                         КАК Контрагент,
	|
	|		ВЫБОР КОГДА
	|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
	|		ТОГДА
	|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
	|		ИНАЧЕ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
	|		КОНЕЦ                                                         КАК Менеджер,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ(ПродажиКомпанииОбороты.ДокументПродажи)) КАК КоличествоДокументовПродажи
	|
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, " + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", ДоговорКонтрагента <> &ПустойДоговор)
	|										 КАК ПродажиКомпанииОбороты
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			СебестоимостьНоменклатуры.Номенклатура КАК Номенклатура,
		|			СебестоимостьНоменклатуры.Период       КАК Период,
		|			ВЫБОР КОГДА СебестоимостьНоменклатуры.Количество ЕСТЬ NULL ИЛИ СебестоимостьНоменклатуры.Количество = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				СебестоимостьНоменклатуры.СуммаСебестоимости/СебестоимостьНоменклатуры.Количество
		|			КОНЕЦ КАК ЦенаСебестоимости
		|		ИЗ
		|		
		|			(
		|			ВЫБРАТЬ
		|				ПродажиСебестоимость.Номенклатура            КАК Номенклатура,
		|				ПродажиСебестоимость.Период                  КАК Период,
		|				СУММА(ПродажиСебестоимость.СтоимостьОборот)  КАК СуммаСебестоимости,
		|				СУММА(ПродажиСебестоимость.КоличествоОборот) КАК Количество
		|			ИЗ
		|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаКонца,  " + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ") КАК ПродажиСебестоимость
		|				
		|			СГРУППИРОВАТЬ ПО
		|				ПродажиСебестоимость.Номенклатура,
		|				ПродажиСебестоимость.Период
		|				
		|			) КАК СебестоимостьНоменклатуры
		|			
		|		) КАК ЦенаСебестоимостиНоменклатуры
		|		
		|	ПО 
		|		ЦенаСебестоимостиНоменклатуры.Номенклатура = ПродажиКомпанииОбороты.Номенклатура
		|		И
		|		ЦенаСебестоимостиНоменклатуры.Период = ПродажиКомпанииОбороты.Период
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПОЛНОЕ СОЕДИНЕНИЕ
	|		(
	|		ВЫБРАТЬ
	|			КонтрагентыСпр.Ссылка КАК Контрагент
	|		ИЗ
	|			Справочник.Контрагенты КАК КонтрагентыСпр
	|
	|		ГДЕ
	|			КонтрагентыСпр.Покупатель = Истина
	|
	|		) КАК Контрагенты
	|	
	|	ПО
	|	
	|		Контрагенты.Контрагент = ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
	|
	|		
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений <> Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиКомпанииОбороты.Период,
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
		|		КОНЕЦ,
		|
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
		|		КОНЕЦ
		|
		|";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиКомпанииОбороты.Период,
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
		|		КОНЕЦ,
		|
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
		|		КОНЕЦ,
		|		ПродажиКомпанииОбороты.ДокументПродажи,
		|		ПродажиКомпанииОбороты.ДокументПродажи
		|
		|";
		
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|	) КАК ПродажиКонтрагентам
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Контрагент                 КАК Контрагент,
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Стадия                     КАК Стадия,
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.КлассПостоянногоПокупателя КАК Класс
	|	ИЗ
	|		РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаКонца) КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних
	|	) КАК Стадии
	|	
	|ПО
	|	
	|	Стадии.Контрагент = ПродажиКонтрагентам.Контрагент
	|
	|ИТОГИ СУММА(КоличествоДокументовПродажи) ПО
	|
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений <> Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Контрагент,
		|	Период Периодами(" + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", &ДатаНачала, &ДатаКонца)
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Контрагент,
		|	ДокументПродажиИтоги
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтадия", Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКласс", Перечисления.XYZКлассификация.ПустаяСсылка());

	РезультатЗапроса = Запрос.Выполнить();

	КолПериодов = КоличествоПериодовАнализа;
	
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Контрагенты.Колонки.Добавить("Стадия", Новый ОписаниеТипов("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями"));
	Контрагенты.Колонки.Добавить("Класс", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация"));
	Контрагенты.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Контрагенты.Колонки.Добавить("КоэффПараметра", ПолучитьОписаниеТиповЧисла(15,3));
	Контрагенты.Колонки.Добавить("Параметр", ПолучитьОписаниеТиповЧисла(15,3));
	Контрагенты.Колонки.Добавить("КоличествоДокументов", ПолучитьОписаниеТиповЧисла(10,0));

	ВыборкаКонтрагентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент", "Все");
	Пока ВыборкаКонтрагентов.Следующий() Цикл

		// Не будем обрабатывать тех контрагентов, которые уже потреянные и у них не было продаж
		Если ВыборкаКонтрагентов.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель И ВыборкаКонтрагентов.КоличествоДокументовПродажи = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		СуммаПараметровЗаВсеПериоды = 0;
		СтадияКонтрагента = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
		КлассКонтрагента = Перечисления.XYZКлассификация.ПустаяСсылка();
		МенеджерКонтрагента = Справочники.Пользователи.ПустаяСсылка();

		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			СуммаПараметровЗаВсеПериоды = КонецДня(ДатаОкончания) - НачалоДня(ДатаНачала);

			ВыборкаКонЗаписей = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКонЗаписей.Следующий() Цикл

				Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

					МенеджерКонтрагента = ВыборкаКонЗаписей.Менеджер;
					СтадияКонтрагента   = ВыборкаКонЗаписей.Стадия;
					КлассКонтрагента    = ВыборкаКонЗаписей.Класс;
					
				КонецЕсли; 
			
			КонецЦикла; 
		
		Иначе
		
			ВыборкаКонЗаписей = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКонЗаписей.Следующий() Цикл

				Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

					СуммаПараметровЗаВсеПериоды = СуммаПараметровЗаВсеПериоды + ?(ВыборкаКонЗаписей.ПараметрРаспределения = NULL, 0, ВыборкаКонЗаписей.ПараметрРаспределения);
					МенеджерКонтрагента = ВыборкаКонЗаписей.Менеджер;
					СтадияКонтрагента   = ВыборкаКонЗаписей.Стадия;
					КлассКонтрагента    = ВыборкаКонЗаписей.Класс;
				
				КонецЕсли; 
			
			КонецЦикла; 

		КонецЕсли; 
		
		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
			КолПериодовДок = ?(ВыборкаКонтрагентов.ДокументПродажи <> NULL, ВыборкаКонтрагентов.ДокументПродажи, 0) + 1;
			СреднееЗначениеПараметра = СуммаПараметровЗаВсеПериоды/КолПериодовДок;
		Иначе
			СреднееЗначениеПараметра = ?(КолПериодов = 0, 0, (СуммаПараметровЗаВсеПериоды/КолПериодов));
		КонецЕсли; 

		СуммаПодкоренногоВыражения = 0;

		НомерПериода = 0;

		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			ВыборкаДокументов = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументПродажиИтоги");

			ДатаПрошлогоДокумента = НачалоДня(ДатаНачала);
			
			Пока ВыборкаДокументов.Следующий() Цикл

				Если ВыборкаДокументов.ДокументПродажиИтоги = NULL Тогда
				
					Продолжить;
				
				КонецЕсли; 

				Если ВыборкаДокументов.ДокументПродажиИтоги <> Неопределено Тогда
				
					СуммаЗаПериод = ВыборкаДокументов.ДокументПродажиИтоги.Дата - ДатаПрошлогоДокумента;
					ДатаПрошлогоДокумента = ВыборкаДокументов.ДокументПродажиИтоги.Дата;

				Иначе

					СуммаЗаПериод = 0;
					
				КонецЕсли; 

				СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);

			КонецЦикла;

			СуммаЗаПериод = КонецДня(ДатаОкончания) - ДатаПрошлогоДокумента;
			СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);
	
		Иначе

			ВыборкаПериодов = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл

				Если ВыборкаПериодов.Период = NULL Тогда
				
					Продолжить;
				
				КонецЕсли; 
				
				СуммаЗаПериод = 0;
				
				ВыборкаКонЗаписей = ВыборкаПериодов.Выбрать();
				Пока ВыборкаКонЗаписей.Следующий() Цикл

					Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

						СуммаЗаПериод = СуммаЗаПериод + ?(ВыборкаКонЗаписей.ПараметрРаспределения = NULL, 0, ВыборкаКонЗаписей.ПараметрРаспределения);
							
					КонецЕсли; 
				
				КонецЦикла;

				СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			ЗначениеКорня = SQRT(?(КолПериодовДок = 0, 0, (СуммаПодкоренногоВыражения/КолПериодовДок)));
			
		Иначе

			ЗначениеКорня = SQRT(?(КолПериодов = 0, 0, (СуммаПодкоренногоВыражения/КолПериодов)));
		
		КонецЕсли; 

		КоэфОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));

		НоваяСтрока = Контрагенты.Добавить();
		НоваяСтрока.Контрагент           = ВыборкаКонтрагентов.Контрагент;
		НоваяСтрока.Стадия               = СтадияКонтрагента;
		НоваяСтрока.Класс                = КлассКонтрагента;
		НоваяСтрока.КоэффПараметра       = КоэфОтносительнойВариации;
		НоваяСтрока.Параметр             = СуммаПараметровЗаВсеПериоды;
		НоваяСтрока.Менеджер             = МенеджерКонтрагента;
		НоваяСтрока.КоличествоДокументов = ВыборкаКонтрагентов.КоличествоДокументовПродажи;
		
	КонецЦикла;
	
	// Теперь вычислим стадии и заполним непосредственно табличную часть
	
	ТЗНастроек = ОпределитьНастройкиРаспределенияСтадийПокупателей();
	
	Для каждого Строки Из Контрагенты Цикл
	
		Если Строки.КоэффПараметра <= 0 Тогда
		
			Если Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка()
				 ИЛИ Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель Тогда
			
				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель;
				
			ИначеЕсли Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;

			Иначе

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель;
				
			КонецЕсли; 

		Иначе

			НоваяСтадия = ОпределитьСтадиюКонтрагента(Строки.КоэффПараметра, Строки.Стадия, ТЗНастроек, Строки.КоличествоДокументов);
			
			Если ЗначениеНеЗаполнено(НоваяСтадия) И ЗначениеНеЗаполнено(Строки.Стадия) Тогда
				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель;
			КонецЕсли; 
			
		КонецЕсли;
		
		НоваяСтрокаТЧ = ТаблицаРаспределенияКонтрагентов.Добавить();
		Если ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.XYZКлассификация") Тогда
			НоваяСтрокаТЧ.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель;
			НоваяСтрокаТЧ.XYZКлассификация     = НоваяСтадия;
		ИначеЕсли ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями") Тогда
			НоваяСтрокаТЧ.СтадияВзаимоотношений = НоваяСтадия;
			НоваяСтрокаТЧ.XYZКлассификация     = Перечисления.XYZКлассификация.ПустаяСсылка();
		Иначе
			НоваяСтрокаТЧ.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			НоваяСтрокаТЧ.XYZКлассификация     = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецЕсли;
		НоваяСтрокаТЧ.СтадияВзаимоотношенийСтарая = Строки.Стадия;
		НоваяСтрокаТЧ.XYZКлассификацияСтарая      = Строки.Класс;
		НоваяСтрокаТЧ.ЗначениеПараметра           = Строки.Параметр;
		НоваяСтрокаТЧ.КоэффициентВариации         = Строки.КоэффПараметра;
		НоваяСтрокаТЧ.ИндексСортировки            = ОпределитьИндексСтадии(НоваяСтадия);
		НоваяСтрокаТЧ.Контрагент                  = Строки.Контрагент;
		НоваяСтрокаТЧ.МенеджерКонтрагента         = Строки.Менеджер;
		НоваяСтрокаТЧ.КоличествоДокументов        = Строки.КоличествоДокументов;

	КонецЦикла;

	СортироватьТЧ();

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Перераспределить.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовПерераспределить(Кнопка)
	
	ТаблицаКонтрагентов = ТаблицаРаспределенияКонтрагентов.Выгрузить();
	ТаблицаКонтрагентов.Колонки.Добавить("ИндексКоличества");
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СтрокаТаблицы.ИндексКоличества = 1;
	КонецЦикла; 
	
	ТекстСообщения = "";
	ТаблицаКонтрагентов.Свернуть("Контрагент", "ИндексКоличества");
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Если СтрокаТаблицы.ИндексКоличества > 1 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаТаблицы.Контрагент;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Сообщить("Найдены строки с повторяющимися контрагентами, корректное перераспределение невозможно." + ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос("Будут перераспределены стадии и классы покупателей в зависимости от коэффициентов вариации. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТЗНастроек = ОпределитьНастройкиРаспределенияСтадийПокупателей();
	
	Для каждого Строки Из ТаблицаРаспределенияКонтрагентов Цикл
		
		Если Строки.СтадияВзаимоотношений.Пустая() И Строки.XYZКлассификация.Пустая() Тогда
			Строки.ЗначениеПараметра = 0;
			Строки.КоэффициентВариации = 0;
			Продолжить;
		КонецЕсли; 
	
		Если Строки.КоэффициентВариации <= 0 Тогда
		
			Если Строки.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка()
				 ИЛИ Строки.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель Тогда
			
				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель;
				
			ИначеЕсли Строки.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;

			Иначе

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель;
				
			КонецЕсли; 

		Иначе

			НоваяСтадия = ОпределитьСтадиюКонтрагента(Строки.КоэффициентВариации, Строки.СтадияВзаимоотношенийСтарая, ТЗНастроек, Строки.КоличествоДокументов);
			
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.XYZКлассификация") Тогда
			Строки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель;
			Строки.XYZКлассификация      = НоваяСтадия;
		ИначеЕсли ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями") Тогда
			Строки.СтадияВзаимоотношений = НоваяСтадия;
			Строки.XYZКлассификация      = Перечисления.XYZКлассификация.ПустаяСсылка();
		Иначе
			Строки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			Строки.XYZКлассификация      = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецЕсли;
		Строки.ИндексСортировки          = ОпределитьИндексСтадии(НоваяСтадия);

	КонецЦикла;

	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.История.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовИстория(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные <> Неопределено Тогда
	
		ФормаРегистра = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьФормуСписка(, ЭтаФорма);
		ФормаРегистра.Отбор.Контрагент.Значение      = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент;
		ФормаРегистра.Отбор.Контрагент.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		ФормаРегистра.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриСменеСтраницы элемента формы ПанельДокумента.
//
Процедура ПанельДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ПараметрыРаспределения" Тогда
	
		СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
		
		ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено;
		СтруктураЗначенийРегистра.Свойство("ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений", ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений);
		
		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено ИЛИ (ТипЗнч(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений) = Тип("ПеречислениеСсылка.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений") И ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений.Пустая()) Тогда
			ЭлементыФормы.НадписьПараметраРаспределения.Заголовок = "Параметр в учетной политике не указан."
		Иначе
			ЭлементыФормы.НадписьПараметраРаспределения.Заголовок = "" + ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений + ", в валюте упр.учета (" + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование) + ")";
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ТаблицаРаспределенияКонтрагентов.
//
Процедура ТаблицаРаспределенияКонтрагентовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Раскрасим строки
	Если ДанныеСтроки.СтадияВзаимоотношений.Пустая() И ДанныеСтроки.XYZКлассификация.Пустая() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	ИначеЕсли ДанныеСтроки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
		Если ДанныеСтроки.XYZКлассификация.Пустая() Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ДанныеСтроки.XYZКлассификация = Перечисления.XYZКлассификация.XКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ИначеЕсли ДанныеСтроки.XYZКлассификация = Перечисления.XYZКлассификация.YКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.НейтральноСиний;
		ИначеЕсли ДанныеСтроки.XYZКлассификация = Перечисления.XYZКлассификация.ZКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Индиго;
		КонецЕсли;
	ИначеЕсли ДанныеСтроки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноЗеленый;
	ИначеЕсли ДанныеСтроки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Кирпичный;
	ИначеЕсли ДанныеСтроки.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноГрифельноСерый;
	КонецЕсли;
	
	// Выведем картинки изменения стадии взаимоотношений
	Если ДанныеСтроки.СтадияВзаимоотношений.Пустая() ИЛИ (ДанныеСтроки.XYZКлассификация.Пустая() И ДанныеСтроки.СтадияВзаимоотношений <> Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель) Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Ложь;
	Иначе
		Если НЕ ДанныеСтроки.XYZКлассификация.Пустая() Тогда
			ТекущееСостояние = ДанныеСтроки.XYZКлассификация;
		Иначе
			ТекущееСостояние = ДанныеСтроки.СтадияВзаимоотношений;
		КонецЕсли; 
		Если НЕ ДанныеСтроки.XYZКлассификацияСтарая.Пустая() Тогда
			НачальноеСостояние = ДанныеСтроки.XYZКлассификацияСтарая;
		Иначе
			НачальноеСостояние = ДанныеСтроки.СтадияВзаимоотношенийСтарая;
		КонецЕсли; 
		ИндексКартинки = ПолучитьИндексКартинкиИзмененияСостояний(ДанныеСтроки.Контрагент, ТекущееСостояние, НачальноеСостояние);
		Если ТипЗнч(ИндексКартинки) = Тип("Число") Тогда
			ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = ИндексКартинки;
		Иначе
			ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	// Отобразим данные колонки ПроцентПараметра
	Если Элемент.Колонки.ПроцентПараметра.Видимость Тогда
		СуммаВсего = ТаблицаРаспределенияКонтрагентов.Итог("ЗначениеПараметра");
		ОформлениеСтроки.Ячейки.ПроцентПараметра.ОтображатьТекст = Истина;
		Если СуммаВсего = 0 Тогда
			ОформлениеСтроки.Ячейки.ПроцентПараметра.Текст = "";
		Иначе
			ОформлениеСтроки.Ячейки.ПроцентПараметра.Текст = Формат((ДанныеСтроки.ЗначениеПараметра*100/СуммаВсего), "ЧЦ=4; ЧДЦ=2");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ТаблицаРаспределенияКонтрагентов.XYZКлассификация.
//
Процедура ТаблицаРаспределенияКонтрагентовXYZКлассификацияПриИзменении(Элемент)
	
	Если Элемент.Значение.Пустая() Тогда
		Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;
		КонецЕсли; 
	Иначе
		Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношений <> Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ТаблицаРаспределенияКонтрагентов.СтадияВзаимоотношений.
//
Процедура ТаблицаРаспределенияКонтрагентовСтадияВзаимоотношенийОчистка(Элемент, СтандартнаяОбработка)
	
	Предупреждение("Значение этого параметра очищать нельзя.");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ТаблицаРаспределенияКонтрагентов.СтадияВзаимоотношений.
//
Процедура ТаблицаРаспределенияКонтрагентовСтадияВзаимоотношенийПриИзменении(Элемент)
	
	Если Элемент.Значение <> Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификация = Перечисления.XYZКлассификация.ПустаяСсылка();
	Иначе
		Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификация.Пустая() Тогда
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификация = Перечисления.XYZКлассификация.ZКласс;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы ТаблицаРаспределенияКонтрагентов.
//
Процедура ТаблицаРаспределенияКонтрагентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные.XYZКлассификация.Пустая() Тогда
		Элемент.ТекущиеДанные.ИндексСортировки = ОпределитьИндексСтадии(Элемент.ТекущиеДанные.СтадияВзаимоотношений);
	Иначе
		Элемент.ТекущиеДанные.ИндексСортировки = ОпределитьИндексСтадии(Элемент.ТекущиеДанные.XYZКлассификация);
	КонецЕсли;
	
	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ТаблицаРаспределенияКонтрагентов.Контрагент.
//
Процедура ТаблицаРаспределенияКонтрагентовКонтрагентПриИзменении(Элемент)

	Если Элемент.Значение.Пустая() ИЛИ Периодичность = Перечисления.Периодичность.ПустаяСсылка() Тогда
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношений       = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификация            = Перечисления.XYZКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра           = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента         = Справочники.Пользователи.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = Перечисления.XYZКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ИндексСортировки            = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоэффициентВариации         = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоличествоДокументов        = 0;
	КонецЕсли; 
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
	
	ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений", ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений);
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Неопределено ИЛИ (ТипЗнч(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений) = Тип("ПеречислениеСсылка.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений") И ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений.Пустая()) Тогда
		СтруктураЗначенийРегистраКлассов = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Контрагент", Элемент.Значение));
		Попытка
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = СтруктураЗначенийРегистраКлассов.Стадия;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = СтруктураЗначенийРегистраКлассов.КлассПостоянногоПокупателя;
		Исключение
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецПопытки;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра           = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента         = Элемент.Значение.ОсновнойМенеджерПокупателя;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ИндексСортировки            = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоэффициентВариации         = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоличествоДокументов        = 0;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;

	ДатаОкончания = КонецДня(ДатаОкончания);
	Если Периодичность = Перечисления.Периодичность.День ИЛИ Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		ДатаНачала = НачалоДня(ДатаОкончания- КоличествоСекундПериода(Периодичность)*КоличествоПериодовАнализа) + 60*60*24;

	Иначе

		Если Периодичность = Перечисления.Периодичность.Месяц Тогда

			КолМесяцев = КоличествоПериодовАнализа;
		
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
			КолМесяцев = КоличествоПериодовАнализа*3;
		
		ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		
			КолМесяцев = КоличествоПериодовАнализа*12;

		КонецЕсли;

		ДатаНачала = НайтиНачальнуюДатуПериодаМесяцев(ДатаОкончания, КолМесяцев);
		
	КонецЕсли;
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВыручки Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.СтоимостьОборот
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.СтоимостьОборот - (ПродажиКомпанииОбороты.КоличествоОборот * ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости)
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПроданныхТоваров Тогда
		
		ПолеЗапроса = "
		|
		|		СУММА(ВЫБОР КОГДА
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ПродажиКомпанииОбороты.КоличествоОборот
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПродаж Тогда
		
		ПолеЗапроса = "
		|
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ(ПродажиКомпанииОбороты.ДокументПродажи))";
		
	ИначеЕсли ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		
		ПолеЗапроса = "
		|
		|		ПродажиКомпанииОбороты.ДокументПродажи КАК ДокументПродажиИтоги,
		|		ПродажиКомпанииОбороты.ДокументПродажи КАК ДокументПродажи,
		|
		|";
		
	Иначе
		
		ПолеЗапроса = "";
		Предупреждение("В учетной политике предприятия не указан параметр для классификации покупателей по стадиям взаимоотношений. Заполнение невозможно.");
		Возврат;
		
	КонецЕсли; 

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	
	|	ПродажиКонтрагентам.Контрагент                  КАК Контрагент,
	|	ПродажиКонтрагентам.Период                      КАК Период,
	|	ПродажиКонтрагентам.Менеджер                    КАК Менеджер,
	|	ВЫБОР КОГДА
	|		Стадии.Стадия ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Стадии.Стадия
	|	ИНАЧЕ
	|		&ПустаяСтадия
	|	КОНЕЦ                  КАК Стадия,
	|
	|	ВЫБОР КОГДА
	|		Стадии.Класс ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Стадии.Класс
	|	ИНАЧЕ
	|		&ПустойКласс
	|	КОНЕЦ                                           КАК Класс,
	|	ПродажиКонтрагентам.КоличествоДокументовПродажи КАК КоличествоДокументовПродажи,
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПродажиКонтрагентам.ДокументПродажи             КАК ДокументПродажи,
		|	ПродажиКонтрагентам.ДокументПродажиИтоги        КАК ДокументПродажиИтоги
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ПродажиКонтрагентам.ПараметрРаспределения       КАК ПараметрРаспределения
		|";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ " + ?(ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами, ПолеЗапроса, (ПолеЗапроса + " КАК ПараметрРаспределения,")) + "
	|
	|		ПродажиКомпанииОбороты.Период                                 КАК Период,
	|
	|		ВЫБОР КОГДА
	|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
	|		ТОГДА
	|			Контрагенты.Контрагент
	|		ИНАЧЕ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
	|		КОНЕЦ                                                         КАК Контрагент,
	|
	|		ВЫБОР КОГДА
	|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
	|		ТОГДА
	|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
	|		ИНАЧЕ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
	|		КОНЕЦ                                                         КАК Менеджер,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ(ПродажиКомпанииОбороты.ДокументПродажи)) КАК КоличествоДокументовПродажи
	|
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, " + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", ДоговорКонтрагента <> &ПустойДоговор)
	|										 КАК ПродажиКомпанииОбороты
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			СебестоимостьНоменклатуры.Номенклатура КАК Номенклатура,
		|			СебестоимостьНоменклатуры.Период       КАК Период,
		|			ВЫБОР КОГДА СебестоимостьНоменклатуры.Количество ЕСТЬ NULL ИЛИ СебестоимостьНоменклатуры.Количество = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				СебестоимостьНоменклатуры.СуммаСебестоимости/СебестоимостьНоменклатуры.Количество
		|			КОНЕЦ КАК ЦенаСебестоимости
		|		ИЗ
		|		
		|			(
		|			ВЫБРАТЬ
		|				ПродажиСебестоимость.Номенклатура            КАК Номенклатура,
		|				ПродажиСебестоимость.Период                  КАК Период,
		|				СУММА(ПродажиСебестоимость.СтоимостьОборот)  КАК СуммаСебестоимости,
		|				СУММА(ПродажиСебестоимость.КоличествоОборот) КАК Количество
		|			ИЗ
		|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаКонца,  " + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ") КАК ПродажиСебестоимость
		|				
		|			СГРУППИРОВАТЬ ПО
		|				ПродажиСебестоимость.Номенклатура,
		|				ПродажиСебестоимость.Период
		|				
		|			) КАК СебестоимостьНоменклатуры
		|			
		|		) КАК ЦенаСебестоимостиНоменклатуры
		|		
		|	ПО 
		|		ЦенаСебестоимостиНоменклатуры.Номенклатура = ПродажиКомпанииОбороты.Номенклатура
		|		И
		|		ЦенаСебестоимостиНоменклатуры.Период = ПродажиКомпанииОбороты.Период
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПРАВОЕ СОЕДИНЕНИЕ
	|		(
	|		ВЫБРАТЬ
	|			КонтрагентыСпр.Ссылка КАК Контрагент
	|		ИЗ
	|			Справочник.Контрагенты КАК КонтрагентыСпр
	|
	|		ГДЕ
	|			КонтрагентыСпр.Ссылка = &ВыбКонтрагент
	|
	|		) КАК Контрагенты
	|	
	|	ПО
	|	
	|		Контрагенты.Контрагент = ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
	|
	|		
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений <> Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиКомпанииОбороты.Период,
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
		|		КОНЕЦ,
		|
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
		|		КОНЕЦ
		|
		|";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПродажиКомпанииОбороты.Период,
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
		|		КОНЕЦ,
		|
		|		ВЫБОР КОГДА
		|			Контрагенты.Контрагент ЕСТЬ НЕ NULL
		|		ТОГДА
		|			Контрагенты.Контрагент.ОсновнойМенеджерПокупателя
		|		ИНАЧЕ
		|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя
		|		КОНЕЦ,
		|		ПродажиКомпанииОбороты.ДокументПродажи,
		|		ПродажиКомпанииОбороты.ДокументПродажи
		|
		|";
		
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|
	|	) КАК ПродажиКонтрагентам
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(
	|	ВЫБРАТЬ
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Контрагент                 КАК Контрагент,
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.Стадия                     КАК Стадия,
	|		СтадииВзаимоотношенийСПокупателямиСрезПоследних.КлассПостоянногоПокупателя КАК Класс
	|	ИЗ
	|		РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаКонца) КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних
	|	) КАК Стадии
	|	
	|ПО
	|	
	|	Стадии.Контрагент = ПродажиКонтрагентам.Контрагент
	|
	|ИТОГИ СУММА(КоличествоДокументовПродажи) ПО
	|
	|";
	
	Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений <> Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Контрагент,
		|	Период Периодами(" + ПолучитьИмяЭлементаПеречисленияПоЗначению(Периодичность) + ", &ДатаНачала, &ДатаКонца)
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Контрагент,
		|	ДокументПродажиИтоги
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтадия", Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКласс", Перечисления.XYZКлассификация.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыбКонтрагент", Элемент.Значение);

	РезультатЗапроса = Запрос.Выполнить();

	КолПериодов = КоличествоПериодовАнализа;
	
	Контрагенты = Новый ТаблицаЗначений;
	Контрагенты.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Контрагенты.Колонки.Добавить("Стадия", Новый ОписаниеТипов("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями"));
	Контрагенты.Колонки.Добавить("Класс", Новый ОписаниеТипов("ПеречислениеСсылка.XYZКлассификация"));
	Контрагенты.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Контрагенты.Колонки.Добавить("КоэффПараметра", ПолучитьОписаниеТиповЧисла(15,3));
	Контрагенты.Колонки.Добавить("Параметр", ПолучитьОписаниеТиповЧисла(15,3));
	Контрагенты.Колонки.Добавить("КоличествоДокументов", ПолучитьОписаниеТиповЧисла(10,0));

	ВыборкаКонтрагентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент", "Все");
	Если ВыборкаКонтрагентов.Следующий() Тогда

		// Не будем обрабатывать тех контрагентов, которые уже потреянные и у них не было продаж
		Если ВыборкаКонтрагентов.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель И ВыборкаКонтрагентов.КоличествоДокументовПродажи = 0 Тогда
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = Перечисления.XYZКлассификация.ПустаяСсылка();
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра           = 0;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента         = Элемент.Значение.ОсновнойМенеджерПокупателя;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ИндексСортировки            = 0;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоэффициентВариации         = 0;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоличествоДокументов        = 0;
			Возврат;
		КонецЕсли; 
		
		СуммаПараметровЗаВсеПериоды = 0;
		СтадияКонтрагента = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
		КлассКонтрагента = Перечисления.XYZКлассификация.ПустаяСсылка();
		МенеджерКонтрагента = Справочники.Пользователи.ПустаяСсылка();

		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			СуммаПараметровЗаВсеПериоды = КонецДня(ДатаОкончания) - НачалоДня(ДатаНачала);

			ВыборкаКонЗаписей = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКонЗаписей.Следующий() Цикл

				Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

					МенеджерКонтрагента = ВыборкаКонЗаписей.Менеджер;
					СтадияКонтрагента   = ВыборкаКонЗаписей.Стадия;
					КлассКонтрагента    = ВыборкаКонЗаписей.Класс;
					
				КонецЕсли; 
			
			КонецЦикла; 
		
		Иначе
		
			ВыборкаКонЗаписей = ВыборкаКонтрагентов.Выбрать();
			Пока ВыборкаКонЗаписей.Следующий() Цикл

				Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

					СуммаПараметровЗаВсеПериоды = СуммаПараметровЗаВсеПериоды + ?(ВыборкаКонЗаписей.ПараметрРаспределения = NULL, 0, ВыборкаКонЗаписей.ПараметрРаспределения);
					МенеджерКонтрагента = ВыборкаКонЗаписей.Менеджер;
					СтадияКонтрагента   = ВыборкаКонЗаписей.Стадия;
					КлассКонтрагента    = ВыборкаКонЗаписей.Класс;
				
				КонецЕсли; 
			
			КонецЦикла; 

		КонецЕсли; 
		
		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда
			КолПериодовДок = ?(ВыборкаКонтрагентов.ДокументПродажи <> NULL, ВыборкаКонтрагентов.ДокументПродажи, 0) + 1;
			СреднееЗначениеПараметра = СуммаПараметровЗаВсеПериоды/КолПериодовДок;
		Иначе
			СреднееЗначениеПараметра = ?(КолПериодов = 0, 0, (СуммаПараметровЗаВсеПериоды/КолПериодов));
		КонецЕсли; 

		СуммаПодкоренногоВыражения = 0;

		НомерПериода = 0;

		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			ВыборкаДокументов = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДокументПродажиИтоги");

			ДатаПрошлогоДокумента = НачалоДня(ДатаНачала);
			
			Пока ВыборкаДокументов.Следующий() Цикл

				Если ВыборкаДокументов.ДокументПродажиИтоги = NULL Тогда
				
					Продолжить;
				
				КонецЕсли; 

				Если ВыборкаДокументов.ДокументПродажиИтоги <> Неопределено Тогда
				
					СуммаЗаПериод = ВыборкаДокументов.ДокументПродажиИтоги.Дата - ДатаПрошлогоДокумента;
					ДатаПрошлогоДокумента = ВыборкаДокументов.ДокументПродажиИтоги.Дата;

				Иначе

					СуммаЗаПериод = 0;
					
				КонецЕсли; 

				СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);

			КонецЦикла;

			СуммаЗаПериод = КонецДня(ДатаОкончания) - ДатаПрошлогоДокумента;
			СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);
	
		Иначе

			ВыборкаПериодов = ВыборкаКонтрагентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериодов.Следующий() Цикл

				Если ВыборкаПериодов.Период = NULL Тогда
				
					Продолжить;
				
				КонецЕсли; 
				
				СуммаЗаПериод = 0;
				
				ВыборкаКонЗаписей = ВыборкаПериодов.Выбрать();
				Пока ВыборкаКонЗаписей.Следующий() Цикл

					Если ВыборкаКонЗаписей.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда

						СуммаЗаПериод = СуммаЗаПериод + ?(ВыборкаКонЗаписей.ПараметрРаспределения = NULL, 0, ВыборкаКонЗаписей.ПараметрРаспределения);
							
					КонецЕсли; 
				
				КонецЦикла;

				СуммаПодкоренногоВыражения = СуммаПодкоренногоВыражения + Pow((СуммаЗаПериод - СреднееЗначениеПараметра), 2);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений = Перечисления.ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами Тогда

			ЗначениеКорня = SQRT(?(КолПериодовДок = 0, 0, (СуммаПодкоренногоВыражения/КолПериодовДок)));
			
		Иначе

			ЗначениеКорня = SQRT(?(КолПериодов = 0, 0, (СуммаПодкоренногоВыражения/КолПериодов)));
		
		КонецЕсли; 

		КоэфОтносительнойВариации = ?(СреднееЗначениеПараметра = 0, 0, (ЗначениеКорня*100/СреднееЗначениеПараметра));

		НоваяСтрока = Контрагенты.Добавить();
		НоваяСтрока.Контрагент           = ВыборкаКонтрагентов.Контрагент;
		НоваяСтрока.Стадия               = КлассКонтрагента;
		НоваяСтрока.Класс                = СтадияКонтрагента;
		НоваяСтрока.КоэффПараметра       = КоэфОтносительнойВариации;
		НоваяСтрока.Параметр             = СуммаПараметровЗаВсеПериоды;
		НоваяСтрока.Менеджер             = МенеджерКонтрагента;
		НоваяСтрока.КоличествоДокументов = ВыборкаКонтрагентов.КоличествоДокументовПродажи;
		
	Иначе
		
		СтруктураЗначенийРегистраКлассов = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Контрагент", Элемент.Значение));
		Попытка
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = СтруктураЗначенийРегистраКлассов.Стадия;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = СтруктураЗначенийРегистраКлассов.КлассПостоянногоПокупателя;
		Исключение
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецПопытки;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра           = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента         = Элемент.Значение.ОсновнойМенеджерПокупателя;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ИндексСортировки            = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоэффициентВариации         = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоличествоДокументов        = 0;
		Возврат;
		
	КонецЕсли;
	
	// Теперь вычислим стадии и заполним непосредственно табличную часть
	
	ТЗНастроек = ОпределитьНастройкиРаспределенияСтадийПокупателей();
	
	Если Контрагенты.Количество() > 0 Тогда
	
		Строки = Контрагенты[0];
		Если Строки.КоэффПараметра <= 0 Тогда
		
			Если Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка()
				 ИЛИ Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель Тогда
			
				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотенциальныйПокупатель;
				
			ИначеЕсли Строки.Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель Тогда

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.РазовыйПокупатель;

			Иначе

				НоваяСтадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель;
				
			КонецЕсли; 

		Иначе

			НоваяСтадия = ОпределитьСтадиюКонтрагента(Строки.КоэффПараметра, Строки.Стадия, ТЗНастроек, Строки.КоличествоДокументов);
			
		КонецЕсли;
		
		НоваяСтрокаТЧ = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные;
		Если ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.XYZКлассификация") Тогда
			НоваяСтрокаТЧ.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель;
			НоваяСтрокаТЧ.XYZКлассификация      = НоваяСтадия;
		ИначеЕсли ТипЗнч(НоваяСтадия) = Тип("ПеречислениеСсылка.СтадииВзаимоотношенийСПокупателями") Тогда
			НоваяСтрокаТЧ.СтадияВзаимоотношений = НоваяСтадия;
			НоваяСтрокаТЧ.XYZКлассификация      = Перечисления.XYZКлассификация.ПустаяСсылка();
		Иначе
			НоваяСтрокаТЧ.СтадияВзаимоотношений = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			НоваяСтрокаТЧ.XYZКлассификация      = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецЕсли;
		НоваяСтрокаТЧ.СтадияВзаимоотношенийСтарая = Строки.Стадия;
		НоваяСтрокаТЧ.XYZКлассификацияСтарая      = Строки.Класс;
		НоваяСтрокаТЧ.ЗначениеПараметра           = Строки.Параметр;
		НоваяСтрокаТЧ.КоэффициентВариации         = Строки.КоэффПараметра;
		НоваяСтрокаТЧ.ИндексСортировки            = ОпределитьИндексСтадии(НоваяСтадия);
		НоваяСтрокаТЧ.Контрагент                  = Строки.Контрагент;
		НоваяСтрокаТЧ.МенеджерКонтрагента         = Строки.Менеджер;
		НоваяСтрокаТЧ.КоличествоДокументов        = Строки.КоличествоДокументов;
	
	Иначе
		
		СтруктураЗначенийРегистраКлассов = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Контрагент", Элемент.Значение));
		Попытка
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = СтруктураЗначенийРегистраКлассов.Стадия;
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = СтруктураЗначенийРегистраКлассов.КлассПостоянногоПокупателя;
		Исключение
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.СтадияВзаимоотношенийСтарая = Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка();
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.XYZКлассификацияСтарая      = Перечисления.XYZКлассификация.ПустаяСсылка();
		КонецПопытки;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра           = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента         = Элемент.Значение.ОсновнойМенеджерПокупателя;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ИндексСортировки            = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоэффициентВариации         = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.КоличествоДокументов        = 0;
		Возврат;
		
	КонецЕсли; 

	СортироватьТЧ();

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Периодичность.
//
Процедура ПериодичностьПриИзменении(Элемент)
	
	ДатаОкончания = ОпределитьКонецПериода(ДатаОкончания, Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ДатаОкончания.
//
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Элемент.Значение = ОпределитьКонецПериода(Элемент.Значение, Периодичность);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Взаиморасчеты.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовВзаиморасчеты(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ДатаНач", ОпределитьДатуНачала());
	ПараметрыНастройки.Вставить("ДатаКон", КонецДня(ДатаОкончания));
	ПараметрыНастройки.Вставить("РаскрашиватьИзмерения", Истина);
	ПараметрыНастройки.Вставить("ВыводитьИтогиПоВсемУровням", Истина);
	ПараметрыНастройки.Вставить("ВыбранныеПоля", Новый Структура("Регистратор"));
	ПараметрыНастройки.Вставить("Отбор", Новый Структура("Контрагент", ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент));
	ПараметрыНастройки.Вставить("ГруппировкиСтрок", Новый Структура("Контрагент, ДоговорКонтрагента, Сделка"));
	
	ОтчетКонтрагента.Настроить(ПараметрыНастройки);
	ФормаОтчета = ОтчетКонтрагента.ПолучитьОсновнуюФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.ДокументыПоКонтрагенту.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовДокументыПоКонтрагенту(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму();
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение      = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент;
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	
	ФормаЖурнала.Отбор.Дата.Использование = Истина;
	ФормаЖурнала.Отбор.Дата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	ФормаЖурнала.Отбор.Дата.ЗначениеС  = ОпределитьДатуНачала();
	ФормаЖурнала.Отбор.Дата.ЗначениеПо = КонецДня(ДатаОкончания);
	
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

мТЗСтадий = Новый ТаблицаЗначений;
мТЗСтадий.Колонки.Добавить("Стадия");
мТЗСтадий.Колонки.Добавить("Индекс");

Индекс = 1;
Для каждого Стадия Из Перечисления.СтадииВзаимоотношенийСПокупателями Цикл
	Если Стадия = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
		Для каждого Класс Из Перечисления.XYZКлассификация Цикл
			НоваяСтадия = мТЗСтадий.Добавить();
			НоваяСтадия.Стадия = Класс;
			НоваяСтадия.Индекс = Индекс;
			Индекс = Индекс + 1;
		КонецЦикла; 
	Иначе
		НоваяСтадия = мТЗСтадий.Добавить();
		НоваяСтадия.Стадия = Стадия;
		НоваяСтадия.Индекс = Индекс;
		Индекс = Индекс + 1;
	КонецЕсли; 
КонецЦикла;

