////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета;
Перем мКурсУпрУчета;
Перем мКратностьУпрУчета;

Перем мКолонкиТовары;

Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СписокЗапросов.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе // Склад - простая розничная торговая точка
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходЦеныПлановойСебестоимостиНоменклатуры", "По ценам плановой себестоимости компании");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = Истина;
	ЕстьСерия = Истина;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"          , Неопределено);
	
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена" , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия", ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента", мВалютаУпрУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Если ЗначениеНеЗаполнено(Качество) Тогда
		Качество = Справочники.Качество.Новый;
	КонецЕсли;
	СтруктураОтбора.Вставить("Качество"         , Качество);
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаРегл = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.Качество                   = Качество;

		// Пересчитаем цену в валюту документа.
		Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаУпрУчета, мКурсУпрУчета, мКратностьУпрУчета, Дата);

		// В документе цена со всеми налогами
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		// Получим ставки из справочника.
		СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);

		СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		                                                 СпособЗаполненияЦен,
		                                                 ТипЦен.ЦенаВключаетНДС,
		                                                 УчитыватьНДС,
		                                                 СуммаВключаетНДС,
		                                                 СтавкаНДС);

		// Рассчитываем реквизиты табличной части.
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СтрокаТабличнойЧасти.СуммаРегл = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
		                                 мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

		Если ЗначениеНеЗаполнено(Качество) Тогда
			ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем по типу цен
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.Товары.Колонки;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ПроцентРозничнойНаценки, Истина);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ЦенаВРознице, Истина);
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена (" + мВалютаРегламентированногоУчета + ")";
	Иначе
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ПроцентРозничнойНаценки, Ложь);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ЦенаВРознице,Ложь);
	КонецЕсли;

	УстановитьВидимостьКолонкиТабЧасти(Колонки.Цена,        ОтражатьВУправленческомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.Сумма,       ОтражатьВУправленческомУчете);
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаРегл,   ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ЭтотОбъект.Товары.Итог("Сумма"));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(мВалютаУпрУчета))
	   И (мВалютаУпрУчета <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + мКратностьУпрУчета
		                + " " + мВалютаУпрУчета
		                + " = " + мКурсУпрУчета
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(мВалютаУпрУчета) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаУпрУчета) +"):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьДобавлятьДокументыПрихода")
			или ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьДобавлятьПриходСписаниеРекламнойПродукции") ) Тогда //+++ 10.12.2014
			Предупреждение("У вас недостаточно прав для создания документов прихода!", 30);	
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;


	Если ПроверитьМодифицированностьДокументаОснования(ПараметрОснование) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада( , ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьИзменятьДокументыПрихода")
		      или Ответственный = глТекущийПользователь) Тогда // только свои документы можно повторно менять!
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	//+++ 10.12.2014 - только рекламную продукцию!
	Если Найти(глТекущийПользователь.наименование,"Лаврова")>0 Тогда
	
	ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьДобавлятьПриходСписаниеРекламнойПродукции") Тогда
	//выкл.	
	ОтражатьВБухгалтерскомУчете = ЛОЖЬ;
	ОтражатьВНалоговомУчете 	= ЛОЖЬ;
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = ЛОЖЬ;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность 	  = ЛОЖЬ;
	
	ЭлементыФормы.Контрагент.Доступность            = ЛОЖЬ;
	ЭлементыФормы.ПодразделениеКомпании.Доступность = ЛОЖЬ;
	ЭлементыФормы.Панель1.Страницы[0].Доступность   = ЛОЖЬ; 		//Адреса
	ЭлементыФормы.ИнвентаризацияТоваровНаСкладе.Доступность = ЛОЖЬ; //Инвентаризация
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеЗаполнить.Кнопки.ЗаполнитьПоИнвентаризации.доступность = ЛОЖЬ;
	КонецЕсли;	
	
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада( , ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьТовары";
			Валюта          = мВалютаУпрУчета;
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ПредставлениеИнвентаризацияТоваровНаСкладе = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда

		ТекстПредупреждения = "Документ """ + ПредставлениеИнвентаризацияТоваровНаСкладе + """ не выбран.
		                      |Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ИнвентаризацияТоваровНаСкладе);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НЕ ЗначениеНеЗаполнено(Склад) Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьФормуВыбора(,Элемент,);

		
		ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = Склад;
		ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеПриИзменении(Элемент)

	Если НЕ ЗначениеНеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		Если ЗначениеНеЗаполнено(Организация) Тогда
			Организация = ИнвентаризацияТоваровНаСкладе.Организация;
		КонецЕсли;

		Если ЗначениеНеЗаполнено(Склад) Тогда
			Склад = ИнвентаризацияТоваровНаСкладе.Склад;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	// Установим доступность
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	//+++( 11.01.2012
	Если ЭлементыФормы.Товары.Колонки.КодСБИС.Видимость Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) тогда
				ОформлениеСтроки.ячейки.КодСБИС.УстановитьТекст(СокрЛП(ДанныеСтроки.Номенклатура.КодСБИС));
			Иначе
				ОформлениеСтроки.ячейки.КодСБИС.УстановитьТекст("");
			КонецЕсли;
	КонецЕсли;
	//+++)
	
	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// розничной наценки в строке табличной части "Товары".
//
Процедура ТоварыПроцентРозничнойНаценкиПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьРозничнуюЦенуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьПроцентРозничнойНаценкиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глТекущийПользователь);
	РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаУпрУчета);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                        Склад, мВалютаРегламентированногоУчета, , Дата);

КонецПроцедуры // ТоварыЦенаВРозницеНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//+++ 10.12.2014 - только рекламную продукцию!
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьДобавлятьПриходСписаниеРекламнойПродукции") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Номенклатура.Наименование КАК Наименование,
		               |	Номенклатура.Код КАК Код
		               |ИЗ
		               |	Справочник.Номенклатура КАК Номенклатура
		               |ГДЕ
		               |	Номенклатура.Ссылка В(&СписокТов)
					   //|	И (Номенклатура.Родитель.Наименование <> &РеклПрод
					   |	И Номенклатура.ВидТовара <> &ВидТовара";
		СписокТов = Товары.ВыгрузитьКолонку("Номенклатура");
		Запрос.УстановитьПараметр("СписокТов", СписокТов);
		Запрос.УстановитьПараметр("РеклПрод", "Рекламная продукция"); // несколько папок с одинаковым наименованием!
		Запрос.УстановитьПараметр("ВидТовара",Перечисления.ВидыТоваров.РекламнаяПродукция);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			сообщить("Товар "+ выборка.Код+" "+выборка.Наименование+" - не является рекламной продукцией!", СтатусСообщения.Внимание);
			Отказ = Истина;	
  		КонецЦикла;
		
  	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыВвестиЦены(Кнопка)
	// Вставить содержимое обработчика.
	ДокЦены = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	стр = ДокЦены.ТипыЦен.Добавить();
	сообщить(стр.ТипЦен);
	//стр.ТипЦен = ТипЦен;
	//сообщить(стр.ТипЦен);
	//стр.ТипЦен = ТипЦен;
	Валюта = Справочники.Валюты.НайтиПоКоду("810");
	ДокЦены.Дата = Дата;
	Для каждого ном из товары цикл
		стр = ДокЦены.Товары.Добавить();
		стр.Валюта = Валюта;
		стр.ЕдиницаИзмерения = ном.ЕдиницаИзмерения;
		стр.Номенклатура = ном.Номенклатура;
		//стр.ТипЦен = ТипЦен;
		стр.Цена = ном.Цена
	конеццикла;
	ДокЦены.Записать();	
	Форма = ДокЦены.ПолучитьФорму("ФормаДокумента");
	Форма.ОткрытьМодально();
КонецПроцедуры

Процедура ПодразделениеКомпанииПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры



Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
 КонецФункции

 Процедура ТоварыАдресноеХранениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	 ПоказатьКодАртикул(ЭлементыФормы.ТоварыАдресноеХранение.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);	 
	 
 КонецПроцедуры

 Процедура КоманднаяПанельАдресноеХранениеПоИнвентаризации(Кнопка)
	  Если ИнвентаризацияТоваровНаСкладе.Пустая() тогда
		Предупреждение("Не выбран документ Инвентаризации!");
	    возврат;
	 КонецЕсли;	
	 
	 Если ИнвентаризацияТоваровНаСкладе.ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("В документе инвентаризации нет строк Адресного хранения!");
		   возврат;
	 КонецЕсли;	
	 
	 Если ТоварыАдресноеХранение.Количество()>0 тогда
		Ответ = Вопрос("Перед заполнением табличная часть ""Адреса"" будет очищена. Выполнить?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
   		 Возврат;
		КонецЕсли;
		ТоварыАдресноеХранение.Очистить();
	 КонецЕсли;	
	 
	 для каждого стр1 из ИнвентаризацияТоваровНаСкладе.ТоварыАдресноеХранение цикл
		     Если стр1.Количество>стр1.КоличествоУчет тогда
		 	 стр2 = ТоварыАдресноеХранение.Добавить();
			 ЗаполнитьЗначенияСвойств(стр2, стр1);
			 стр2.Количество =стр1.Количество-стр1.КоличествоУчет;
			 КонецЕсли;	
	 КонецЦикла;
 КонецПроцедуры

 //+++ 28.12.2015 - по служебке от 25.12.2015 - Клейменова Оксана
 //   заполнение себестоимости по данным на конец пред.квартала 
 //
 //- сначала на складе, потом на филиале, потом на головном подразделении
 //(без учета запрещенных складов брака и ошиповки),
 //
 //если остатков нет - берем обороты за 2 года и находим последний документ прихода
 //- так же сначала по складу, потом по филиалу, потом на головном подразделении
 //
 Процедура КоманднаяПанельТоварыЗаполнитьУчетнуюСумму(Кнопка)
	 
 	Если Склад.Пустая() тогда
		Предупреждение("   Выберите сначала Склад оприходования! 
						|Расчет себестоимости невозможно выполнить!", 10);
		возврат;
	КонецЕсли;

	 //на начало текущего квартала документа
	 ДатаСреза = НачалоКвартала( Дата );
	 
	 Если не ВвестиДату(ДатаСреза,"Введите дату с/стоимости") тогда
		 ДатаСреза = ?(началоДня(Дата)=НачалоДня(ТекущаяДата()), ТекущаяДата(), Дата-1);
	 КонецЕсли;	 
	 ДатаСреза = ?(ДатаСреза='00010101', ТекущаяДата(), ДатаСреза);
	
	 табл = найтиЦенуСебестоимости(Товары, ДатаСреза);
	 
Сообщить("-------------Расчет себестоимости на дату: "+формат(ДатаСреза,"ДЛФ=DT")+"--------------");	 
	 для каждого СтрокаТабличнойЧасти из Товары цикл
		стр = табл.найти(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура");
	    если стр = неопределено тогда
			 сообщить(строка(СтрокаТабличнойЧасти.НомерСтроки)+") Не найдена себестоимость по товару: "
			   +строка(СтрокаТабличнойЧасти.Номенклатура.Код)+" - "+строка(СтрокаТабличнойЧасти.Номенклатура) 
			    +" на дату: "+формат(ДатаСреза,"ДЛФ=D"), СтатусСообщения.Внимание);
			   
			стр = найтиЦенуЗакупки( СтрокаТабличнойЧасти.Номенклатура,  ДатаСреза );
			Если стр.ЦенаСебестоимость=0 Тогда
			сообщить(" Не найдено ни одного документа за период с "
			+формат(ДобавитьМесяц(ДатаСреза,-24),"ДЛФ=D")+" по "+формат(ДатаСреза,"ДЛФ=D"), СтатусСообщения.ОченьВажное);
			Иначе	
			сообщить("   Себестоимость товара = "+строка(стр.ЦенаСебестоимость)+"р. по документу: "
			+строка(стр.Регистратор)+" ("
			 +?(стр.ТипСС="яСклад", "по складу: "+строка(Склад),
			 		?(стр.ТипСС="Филиал", ?(Склад.Подразделение.Пустая(),"по Головному подразделению","на Филиале: "+строка(Склад.Подразделение)) 
					   , стр.ТипСС) ) +")", СтатусСообщения.Информация);
			КонецЕсли;
		иначе	
			 сообщить(строка(СтрокаТабличнойЧасти.НомерСтроки)+") себестоимость ("
			 			 +?(стр.ТипСС="яСклад", "по складу: "+строка(Склад),
			 		?(стр.ТипСС="Филиал", ?(Склад.Подразделение.Пустая(),"по Головному подразделению","на Филиале: "+строка(Склад.Подразделение)) 
					   , стр.ТипСС) )+") по товару: "
			   +строка(СтрокаТабличнойЧасти.Номенклатура.Код)+" - "+строка(СтрокаТабличнойЧасти.Номенклатура) 
			   +" = "+строка(стр.ЦенаСебестоимость)+"р.");
		конецЕсли;
		флРавно = ( СтрокаТабличнойЧасти.Цена=Окр(стр.ЦенаСебестоимость,2) );
		сообщить( ?(флРавно,"=",">>")+" строка № "+строка(СтрокаТабличнойЧасти.НомерСтроки)+", Цена: "
		+строка(СтрокаТабличнойЧасти.Цена)+?(флРавно," = "," >> ")+строка(Окр(стр.ЦенаСебестоимость,2))+" р.");
		
		СтрокаТабличнойЧасти.Цена  = Окр(стр.ЦенаСебестоимость,2);
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	 	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
	КонецЦикла;
							
 КонецПроцедуры

 
 
//28.12.2015 по остаткам партий на складах
функция найтиЦенуСебестоимости(ТЧтовары, ДатаСреза)
	
	табл = новый ТаблицаЗначений;
	табл.Колонки.Добавить("Номенклатура");
	табл.Колонки.Добавить("ЦенаСебестоимость");
		
	таб = товары.Выгрузить(,"Номенклатура");
	таб.Свернуть("Номенклатура"); // исключение дублей
	СписНом = Новый СписокЗначений;
	СписНом.ЗагрузитьЗначения( таб.ВыгрузитьКолонку("Номенклатура") );
	
 //+++ 28.12.2015 - по служебке от 25.12.2015 - Клейменова Оксана
 // себестоимость:  по средней на начало квартала по складам филиалов
 //					если количество = 0, то по последнемму приходу
 // 				если и его нет у филиала -> то аналогично на Головном!
 //
 Запрос = Новый Запрос;
 Запрос.Текст = "ВЫБРАТЬ
                |	""яСклад"" КАК ТипСС,
		         |	ПартииТоваровНаСкладахОстатки.Номенклатура,
                 |	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.СтоимостьОстаток, 0) / ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.КоличествоОстаток, 1) КАК ЦенаСебестоимость
                |ИЗ
                |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&НачКвартала,
                |			Номенклатура В (&СписНом) И Склад = &Склад ) КАК ПартииТоваровНаСкладахОстатки
                |ГДЕ
                |	ПартииТоваровНаСкладахОстатки.КоличествоОстаток > 0
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
                |	""Филиал"" КАК ТипСС,
			        |	ПартииТоваровНаСкладахОстаткиФ.Номенклатура,
                 |	ЕСТЬNULL(ПартииТоваровНаСкладахОстаткиФ.СтоимостьОстаток, 0) / ЕСТЬNULL(ПартииТоваровНаСкладахОстаткиФ.КоличествоОстаток, 1) КАК ЦенаСебестоимость
                |ИЗ
                |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&НачКвартала,
                |			Номенклатура В (&СписНом) И Склад.Подразделение = &Подразделение
				|				и не Склад.ЗапретитьИспользование ) КАК ПартииТоваровНаСкладахОстаткиФ
                |ГДЕ
                |	ПартииТоваровНаСкладахОстаткиФ.КоличествоОстаток > 0
                |
                |//Головное
				|
				|УПОРЯДОЧИТЬ ПО
                |	типСС УБЫВ
                |АВТОУПОРЯДОЧИВАНИЕ";
 Запрос.УстановитьПараметр("НачКвартала", ДатаСреза );
 Запрос.УстановитьПараметр("СписНом", СписНом);
 Запрос.УстановитьПараметр("Склад",   Склад);
 Запрос.УстановитьПараметр("Подразделение", Склад.Подразделение);
 
 Если НЕ Склад.Подразделение.Пустая() тогда
	Запрос.Текст = стрЗаменить(Запрос.Текст , "//Головное", "ОБЪЕДИНИТЬ ВСЕ
                |
               |ВЫБРАТЬ
                |	""Головной склад"" КАК ТипСС,
		         |	ПартииТоваровНаСкладахОстаткиГ.Номенклатура,
                 |	ЕСТЬNULL(ПартииТоваровНаСкладахОстаткиГ.СтоимостьОстаток, 0) / ЕСТЬNULL(ПартииТоваровНаСкладахОстаткиГ.КоличествоОстаток, 1) КАК ЦенаСебестоимость
                |ИЗ
                |	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&НачКвартала,
                |			Номенклатура В (&СписНом) И Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
				|				и не Склад.ЗапретитьИспользование				) КАК ПартииТоваровНаСкладахОстаткиГ
                |ГДЕ
                |	ПартииТоваровНаСкладахОстаткиГ.КоличествоОстаток > 0");
 КонецЕсли;
 Результат = Запрос.Выполнить();
 табл = Результат.выгрузить();

 возврат табл;
КонецФункции

//28.12.2015 - по остаткам партий на складах оборотам за год до начала тек.квартала
// возвращает 1-ю строку
функция найтиЦенуЗакупки(тов, ДатаСреза)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	""яСклад"" КАК ТипСС,
	 |	ПартииТоваровНаСкладахОбороты.Регистратор,
	  |	ПартииТоваровНаСкладахОбороты.Регистратор.Дата как РегистраторДата,
	 |	ПартииТоваровНаСкладахОбороты.Номенклатура,
	 |	ПартииТоваровНаСкладахОбороты.СтоимостьПриход / ПартииТоваровНаСкладахОбороты.КоличествоПриход как ЦенаСебестоимость
	 |ИЗ
	 |	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&НачПериода,&КонПериода,Регистратор,
	 |			Номенклатура = &Номенклатура
	 |				И Склад = &Склад) КАК ПартииТоваровНаСкладахОбороты
	 |ГДЕ
	 |	ПартииТоваровНаСкладахОбороты.КоличествоПриход > 0
	 
	 |ОБЪЕДИНИТЬ ВСЕ
	 |	ВЫБРАТЬ
	 |	""Филиал"" КАК ТипСС,
	 |	ПартииТоваровНаСкладахОборотыФ.Регистратор,
	 |	ПартииТоваровНаСкладахОборотыФ.Регистратор.Дата как РегистраторДата,
	 |	ПартииТоваровНаСкладахОборотыФ.Номенклатура,
	 |	ПартииТоваровНаСкладахОборотыФ.СтоимостьПриход / ПартииТоваровНаСкладахОборотыФ.КоличествоПриход как ЦенаСебестоимость
	 |ИЗ
	 |	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&НачПериода,&КонПериода,Регистратор,
	 |			Номенклатура = &Номенклатура  И Склад.Подразделение = &Подразделение
	 |				и не Склад.ЗапретитьИспользование) КАК ПартииТоваровНаСкладахОборотыФ
	 |ГДЕ
	 |	ПартииТоваровНаСкладахОборотыФ.КоличествоПриход > 0
	 |
	 |//Головное
	|
	|УПОРЯДОЧИТЬ ПО
    |	типСС Убыв, РегистраторДата УБЫВ
    |АВТОУПОРЯДОЧИВАНИЕ
	|";
	 
	 Запрос.УстановитьПараметр("НачПериода", ДобавитьМесяц(ДатаСреза, -24) ); // за год до нач.текущего квартала
	 Запрос.УстановитьПараметр("КонПериода", ДатаСреза );
	 Запрос.УстановитьПараметр("Номенклатура", тов );
	 Запрос.УстановитьПараметр("Склад", Склад );
	 Запрос.УстановитьПараметр("Подразделение", Склад.Подразделение );
 
	 
	 Если НЕ Склад.Подразделение.Пустая() тогда
		  Запрос.Текст =  стрЗаменить(Запрос.Текст, "//Головное", "
		 	 |ОБЪЕДИНИТЬ ВСЕ
	 |	ВЫБРАТЬ
	 |	""Головной склад"" КАК ТипСС,
	 |	ПартииТоваровНаСкладахОборотыГ.Регистратор,
	 |	ПартииТоваровНаСкладахОборотыГ.Регистратор.Дата как РегистраторДата,
	 |	ПартииТоваровНаСкладахОборотыГ.Номенклатура,
	 |	ПартииТоваровНаСкладахОборотыГ.СтоимостьПриход / ПартииТоваровНаСкладахОборотыГ.КоличествоПриход как ЦенаСебестоимость
	 |ИЗ
	 |	РегистрНакопления.ПартииТоваровНаСкладах.Обороты(&НачПериода,&КонПериода,Регистратор,
	 |			Номенклатура = &Номенклатура
	 |				И Склад.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	 |				и не Склад.ЗапретитьИспользование ) КАК ПартииТоваровНаСкладахОборотыГ
	 |ГДЕ
	 |	ПартииТоваровНаСкладахОборотыГ.КоличествоПриход > 0
     |"); КонецЕсли;
	 	
	 Результат = Запрос.Выполнить();
	 табл = Результат.Выгрузить();
	 
	 если табл.Количество()>0 тогда
	 	стр1 = табл[0];
	 Иначе
		стр1 = новый Структура("ТипСС, Номенклатура, Регистратор, ЦенаСебестоимость",
		"нет", тов, Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), 0);
	 КонецЕсли;

     возврат стр1;
	 
КонецФункции	

Процедура КоманднаяПанельТоварыПоПоследнейЦене(Кнопка)
	 
Сообщить("-------------Расчет себестоимости на дату: "+формат(ТекущаяДата(),"ДЛФ=DT")+"--------------");	 
	 для каждого СтрокаТабличнойЧасти из Товары цикл
					   
			стр = найтиЦенуЗакупки( СтрокаТабличнойЧасти.Номенклатура,  ТекущаяДата() );
			Если стр.ЦенаСебестоимость=0 Тогда
			сообщить(" Не найдено ни одного документа за период с "
			+формат(ДобавитьМесяц(ТекущаяДата(),-24),"ДЛФ=D")+" по "+формат(ТекущаяДата(),"ДЛФ=D"), СтатусСообщения.ОченьВажное);
			Иначе	
			сообщить("   Себестоимость товара = "+строка(стр.ЦенаСебестоимость)+"р. по документу: "
			+строка(стр.Регистратор)+" ("
			 +?(стр.ТипСС="яСклад", "по складу: "+строка(Склад),
			 		?(стр.ТипСС="Филиал", ?(Склад.Подразделение.Пустая(),"по Головному подразделению","на Филиале: "+строка(Склад.Подразделение)) 
					   , стр.ТипСС) ) +")", СтатусСообщения.Информация);
			КонецЕсли;
		флРавно = ( СтрокаТабличнойЧасти.Цена=Окр(стр.ЦенаСебестоимость,2) );
		сообщить( ?(флРавно,"=",">>")+" строка № "+строка(СтрокаТабличнойЧасти.НомерСтроки)+", Цена: "
		+строка(СтрокаТабличнойЧасти.Цена)+?(флРавно," = "," >> ")+строка(Окр(стр.ЦенаСебестоимость,2))+" р.");
		
		СтрокаТабличнойЧасти.Цена  = Окр(стр.ЦенаСебестоимость,2);
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	 	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
	КонецЦикла;

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
СтруктураКурса     = ПолучитьКурсВалюты(мВалютаУпрУчета, Дата);
мКурсУпрУчета      = СтруктураКурса.Курс;
мКратностьУпрУчета = СтруктураКурса.Кратность;

мКолонкиТовары     = ЭлементыФормы.Товары.Колонки;
