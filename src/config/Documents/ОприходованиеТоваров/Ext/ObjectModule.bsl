Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПорядокСписанияПартий;           // (Общ)

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияТоваров()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|	Основание,
	|	СуммаДокумента,
	|	Константы.ВалютаУправленческогоУчета КАК ВалютаДокумента,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное  КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмерения.Представление     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|		Цена,
	|		Сумма,
	|		ХарактеристикаНоменклатуры       КАК Характеристика,
	|		СерияНоменклатуры                КАК Серия
	|	)
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Оприходование товаров");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель              = Шапка.Организация;
	ОбластьМакета.Параметры.ПредставлениеСклада     = Шапка.Склад;
	ОбластьМакета.Параметры.ПредставлениеОснования  = Шапка.Основание;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Сумму прописью
	ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + ФорматСумм(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(Шапка.СуммаДокумента, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОприходованияТоваров()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Ведомость" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОприходованияТоваров();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();

	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Ведомость", "Накладная на оприходование товаров");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование) Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	ВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурса    = ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",                     Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка",            ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Качество,
	|	Док.Коэффициент                                   КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет)     КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                            КАК КоличествоОприходованное,
	|	Док.Цена,
	|	ВЫБОР
	|		КОГДА &НеавтоматизированнаяТорговаяТочка ТОГДА
	|			Док.ЦенаВРознице
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                             КАК ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры                        = ДокОприходование.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры                                 = ДокОприходование.СерияНоменклатуры
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|	И ДокОприходование.ЦенаВРознице                         = Док.ЦенаВРознице
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.Качество,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Цена,
	|	Док.ЦенаВРознице
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ЦенаВРознице               = Выборка.ЦенаВРознице;
		СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

		// Рассчитаем и заполним процент розничной наценки.
		ЦенаРегл = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаУпрУчета,
		           мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Цена), 0,
		                                               100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаРегл) / ЦенаРегл);

		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
процедура  ЗаполнитьТоварыАХПоИнвентаризацииТоваровУпр(ДокументОснование)
	
	Если НЕ ДокументОснование.Склад.АдресноеХранение тогда
	КонецЕсли;
	
	#Если ВнешнееСоединение Тогда
	Если ТоварыАдресноеХранение.Количество() > 0 Тогда
		ТоварыАдресноеХранение.Очистить();
	КонецЕсли;
	#КонецЕсли

	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.АдресХранения,
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.АдресХранения.Владелец КАК Склад,
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Номенклатура,
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Количество - ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.КоличествоУчет КАК Количество
	                |ИЗ
	                |	Документ.ИнвентаризацияТоваровНаСкладе.ТоварыАдресноеХранение КАК ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение
	                |ГДЕ
	                |	ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Ссылка = &Ссылка
	                |	И ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.Количество - ИнвентаризацияТоваровНаСкладеТоварыАдресноеХранение.КоличествоУчет > 0";
	 
	 Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
		стр1 = ТоварыАдресноеХранение.Добавить();
 	    ЗаполнитьЗначенияСвойств(стр1, Выборка);
	 
	 КонецЦикла;
	 
	
#Если Клиент Тогда

	Если ТоварыАдресноеХранение.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары по Адресам у которых фактическое количество превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры //ЗаполнитьТоварыАХПоИнвентаризацииТоваров()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ

// Процедура заполняет начальными значениями документ
Процедура ЗаполнитьНачальнымиЗначениями() Экспорт

	// Вызвать общую процедуру для заполнения основных реквизитов
	//ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета);

	// Дозаполнить особенные для формы реквизиты

КонецПроцедуры // ЗаполнитьНачальнымиЗначениями()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет в таблице движений по регитстру ПартииТоваровНаСкладах нестандартные поля.
//
// Параметры:
//  ТаблицаТЧ       - таблица значений, соответствующая табличной части документа
//  ТаблицаДвижений - таблица значений, соответствующая набору записей регистра,
//
Процедура ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаТЧ, ТаблицаДвижений)

	Для каждого СтрокаДвижений Из ТаблицаДвижений Цикл

		СтрокаДвижений.Склад        = Склад;
		СтрокаДвижений.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		Если Не мПорядокСписанияПартий.Упр = Перечисления.СпособыОценки.ПоСредней Тогда
			СтрокаДвижений.ДокументОприходования = Ссылка;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоляПартииТоваровНаСкладах()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Сумма.Имя = "Стоимость";

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл


		СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость;
		Сумма                   = СтрокаТаблицы.Стоимость;

	КонецЦикла;

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Склад");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, Качество");

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	Если НЕ ОтражатьВУправленческомУчете Тогда
		СтруктураОбязательныхПолей.Удалить("Сумма");
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СуммаРегл");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНеавтоматизированныхТорговыхТочках.
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			НаборДвижений = Движения.ТоварыВНеавтоматизированныхТорговыхТочках;
		Иначе
			НаборДвижений = Движения.ТоварыНаСкладах;
		КонецЕсли;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийТоварыНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийТоварыНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийТоварыНаСкладах.Скопировать();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Склад,"Склад");
		Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Движения.ТоварыВНеавтоматизированныхТорговыхТочках.ВыполнитьПриход();
			Иначе
				Движения.ТоварыНаСкладах.ВыполнитьПриход();
			КонецЕсли;
		КонецЕсли;
        Если ТоварыАдресноеХранение.Количество() > 0 Тогда
		яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
		КонецЕсли;
		// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.

		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвиженийПартииТоваровНаСкладах = НаборДвижений.Выгрузить();
		ТаблицаДвиженийПартииТоваровНаСкладах.Очистить();
		ТаблицаДвижений = ТаблицаДвиженийПартииТоваровНаСкладах.Скопировать();

		// Заполним таблицу движений без наклеек по партиям.
		ТаблицаБезНаклеек = ТаблицаПоТоварам.скопировать();
		сч = ТаблицаБезНаклеек.Количество()-1;
		Пока сч>=0 Цикл
			Если ТаблицаБезНаклеек[сч].Номенклатура.видТовара = Перечисления.ВидыТоваров.КрышкиНаклейки Тогда
				ТаблицаБезНаклеек.Удалить(сч);
			конецЕсли;	
			сч=сч-1;
		конецЦикла;

		
		
		
		
		ЗагрузитьВТаблицуЗначений(ТаблицаБезНаклеек, ТаблицаДвижений);

		// Недостающие поля.
		ЗаполнитьПоляПартииТоваровНаСкладах(ТаблицаБезНаклеек, ТаблицаДвижений);

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли; // Если ОтражатьВУправленческомУчете ...
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("ЦенаВРознице"              , "ЦенаВРознице");

КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок)

	мУчетнаяПолитика   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	ТабУчетнаяПолитика = ПолучитьУчетнуюПолитику(Дата);

	мПорядокСписанияПартий = Новый Структура("Упр,Бух,Нал");

	Если ОтражатьВУправленческомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(ТабУчетнаяПолитика, Отказ, Заголовок)

	// Получим метод списания партий FIFO / LIFO / По средней
	СтрокаУчетнойПолитики = ТабУчетнаяПолитика[0];
	мПорядокСписанияПартий.Вставить("Упр", СтрокаУчетнойПолитики.СпособОценкиМПЗУпр);

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Склад.ВидСклада <> Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			
			СтруктураКурсаДокумента = ПолучитьКурсВалюты(Константы.ВалютаУправленческогоУчета.Получить(), Дата);
			КурсДокумента      = СтруктураКурсаДокумента.Курс;
			КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			
		Иначе

			КурсДокумента      = 1;
			КратностьДокумента = 1;
			
		КонецЕсли;

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(Основание);
		
		ЗаполнитьТоварыАХПоИнвентаризацииТоваровУпр(Основание); //+++ заполнение Товары Адр.Хранение по Отклонению > 0
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаполнитьТоварыПоЗаказуПоставщикаУпр(Основание);
		Для каждого СтрТов из Товары Цикл
			СтрТов.СуммаРегл = СтрТов.Сумма;
		КонецЦикла;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РаспределениеЗатратНаВыпускГотовойПродукции") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;

		ЗаполнитьТоварыПоЗаказуПоставщикаУпрРаспределение(Основание);
		Для каждого СтрТов из Товары Цикл
			СтрТов.СуммаРегл = СтрТов.Сумма;
			СтрТов.Качество  = справочники.Качество.Новый; //+++ ?! может быть и не новый ?!
		КонецЦикла;
		
		Комментарий = "- остатки из производства >> поступают обратно на Склад";
		
	КонецЕсли;	
		
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента     = Товары.Итог("Сумма");
	СуммаДокументаРегл = Товары.Итог("СуммаРегл");

	ЗаполнитьКачествоПоУмолчанию(Товары);

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы" , "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы" , "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"     , "ВидСклада",                      "ВидСклада");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Качество"                  , "Качество");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
    яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка,Отказ);
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок);
	
	// Движения по документу
	// Если ответхранение, то не проводить, чтобы не попортить партии
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ЗаполнитьТоварыПоЗаказуПоставщикаУпр(ДокументОснование) Экспорт

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	ВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурса    = ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",                     Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка",            ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент                                   КАК КоэффициентЕдиницыИнвентаризации,
	|	МАКСИМУМ(Док.Количество)     КАК КоличествоОтклонениеИнвентаризации, // в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                            КАК КоличествоОприходованное,
	|	Док.Цена,
	|	Док.ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры                        = ДокОприходование.ХарактеристикаНоменклатуры
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЕдиницаИзмеренияМест,
	|	Док.Коэффициент,
	|	Док.Цена
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;

		// Рассчитаем и заполним процент розничной наценки.
		ЦенаРегл = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаУпрУчета,
		           мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Цена), 0,
		                                               100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаРегл) / ЦенаРегл);

		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары фактическое количество которых превышает учетное.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()


Процедура ЗаполнитьТоварыПоЗаказуПоставщикаУпрРаспределение(ДокументОснование) 

#Если ВнешнееСоединение Тогда
	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;
#КонецЕсли

	ВалютаУпрУчета    = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурса    = ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка",                     Ссылка);
	Запрос.УстановитьПараметр("НеавтоматизированнаяТорговаяТочка", (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка));
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка",            ДокументОснование);

	// Заполняем выявленными излишками по инвентраизации, с учетом уже выполненного оприходования 
	// по данной инвентаризации. Цены берем из документа инвентраизации. 
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков как ЕдиницаИзмерения,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков как ЕдиницаИзмеренияМест,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыИнвентаризации,
	// "-" списывает с производства >> надо приходывать
	|	МАКСИМУМ(-Док.Количество)     КАК КоличествоОтклонениеИнвентаризации, 
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                            КАК КоличествоОприходованное,
	|	Док.Сумма/Док.Количество как Цена,
	|	Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) как ХарактеристикаНоменклатуры
	
	|ИЗ
	|	Документ.РаспределениеЗатратНаВыпускГотовойПродукции.Материалы КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	//|	И Док.ХарактеристикаНоменклатуры                        = ДокОприходование.ХарактеристикаНоменклатуры
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	// "-" списывает с производства >> надо приходывать
	|	И Док.Количество < 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	//|	Док.ХарактеристикаНоменклатуры,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	|	Док.Сумма/Док.Количество
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;

	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.КоэффициентЕдиницыИнвентаризации;
		СтрокаТабличнойЧасти.Количество                 = КоличествоОприходовать;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;

		// Рассчитаем и заполним процент розничной наценки.
		ЦенаРегл = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ВалютаУпрУчета,
		           мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Цена), 0,
		                                               100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаРегл) / ЦенаРегл);

		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары для Оприходования.");
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()



мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 