////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит список числовых колонок документа (Структура)
Перем ВестиСкладскойУчетБУ;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ОтобразитьСчетаФактуры();
	
КонецПроцедуры //УстановитьВидимость()

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьСчетаФактуры(ТекСтрокаПартий = Неопределено)

	Если ТекСтрокаПартий = Неопределено и не ЭлементыФормы.ДанныеПоПартиям.ТекущаяСтрока = Неопределено Тогда
		ТекСтрокаПартий = ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные;
	КонецЕсли; 
	
	
	// Включаем отбор тех дополнительных сведений, которые относятся к текущей строке,
	// выбранной в табличной части "ДанныеПоПартиям"
	Если ТекСтрокаПартий <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "ДополнительныеСведения"
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаПартий.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Истина;
		Если ДанныеПоПартиям.Количество() = 0 Тогда
			ДанныеПоСФ.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьСчетаФактуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Предполагается использовать отбор по таблице "ДанныеПоСФ"
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение = 0;
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ


// Процедура - обработчик события "ПриАктивизацииСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриАктивизацииСтроки(Элемент)
	
	ОтобразитьСчетаФактуры();
		
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "ДанныеПоПартиям".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		НеУстановлено = Истина;
		Кандидат = ДанныеПоПартиям.Количество();

		Пока НеУстановлено Цикл
			Если ДанныеПоПартиям.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		Если не Элемент.Колонки.Найти("Номенклатура")=Неопределено Тогда
			ТекущаяСтрока.Номенклатура = Неопределено;
		КонецЕсли; 

		ОтобразитьСчетаФактуры();

	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоПартиямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтобразитьСчетаФактуры(Элемент.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// строки табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПослеУдаления(Элемент)
	
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении"
// колонки "СтавкаНДС" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Если ТекущиеДанные.Стоимость <> 0 Тогда
		ТекущиеДанные.НДС = РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
												ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка"
// колонки "ВидЦенности" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФВидЦенностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ДанныеПоПартиям.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ДанныеПоСФ.Очистить();
	ДанныеПоПартиям.Очистить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегПартии.Номенклатура КАК Номенклатура,
	|	РегПартии.Склад КАК Склад,
	|	РегПартии.ДокументОприходования КАК Партия,
	|	РегПартии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	РегПартии.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СУММА(РегПартии.КоличествоОстаток) КАК КолОст,
	|	СУММА(РегПартии.СтоимостьОстаток) КАК СуммаБезНДС,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.ВидЦенности КАК ВидЦенности,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.НДСВключенВСтоимость, ЛОЖЬ) КАК НДСВключенВСтоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&КонДата,
	|		ДокументОприходования.Организация = &Орг
	|		    И СтатусПартии = &СтатусПартии_Купленный) КАК РегПартии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Обороты КАК НДСПредъявленныйОбороты
	|		ПО РегПартии.ДокументОприходования = НДСПредъявленныйОбороты.СчетФактура
	|			И (НДСПредъявленныйОбороты.ВидЦенности = &ВЦ_Товары)
	|
	|СГРУППИРОВАТЬ ПО
	|	РегПартии.Номенклатура,
	|	РегПартии.Склад,
	|	РегПартии.ДокументОприходования,
	|	РегПартии.ХарактеристикаНоменклатуры,
	|	РегПартии.СерияНоменклатуры,
	|	НДСПредъявленныйОбороты.СтавкаНДС,
	|	НДСПредъявленныйОбороты.ВидЦенности,
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.НДСВключенВСтоимость, ЛОЖЬ)
	|
	|ИМЕЮЩИЕ
	|	СУММА(РегПартии.КоличествоОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партия,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры
	|ИТОГИ
	|	СУММА(КолОст),
	|	СУММА(СуммаБезНДС)
	|ПО
	|	Партия,
	|	Склад,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",  ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр( "СтатусПартии_Купленный", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр( "Орг",      Организация);
	Запрос.УстановитьПараметр( "ВЦ_Товары",               Перечисления.ВидыЦенностей.Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МетаТип = Метаданные.Документы[Метаданные().Имя].ТабличныеЧасти["ДанныеПоПартиям"].Реквизиты["Партия"].Тип;
	
	Ключ = 0;
	
	ОбходПоПартиям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоПартиям.Следующий() Цикл
		Если НЕ МетаТип.СодержитТип(ТипЗнч(ОбходПоПартиям.Партия)) ИЛИ ЗначениеНеЗаполнено(ОбходПоПартиям.Партия) Тогда
			Продолжить;
		КонецЕсли;
		ОбходПоСкладам = ОбходПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСкладам.Следующий() Цикл
			ОбходПоНоменклатуре = ОбходПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНоменклатуре.Следующий() Цикл
				ОбходПоХаракт = ОбходПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоХаракт.Следующий() Цикл
					ОбходПоСериям = ОбходПоХаракт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоСериям.Следующий() Цикл
						Ключ = Ключ + 1;
							
						// Добавим строку в таб.часть Партии
						СтрокаПартий              = ДанныеПоПартиям.Добавить();
						СтрокаПартий.КлючСтроки   = Ключ;
						СтрокаПартий.Номенклатура = ОбходПоСериям.Номенклатура;
						СтрокаПартий.Партия       = ОбходПоСериям.Партия;
						СтрокаПартий.Склад        = ОбходПоСериям.Склад;
						СтрокаПартий.Количество   = ОбходПоСериям.КолОст;
									
						СтрокаПартий.ХарактеристикаНоменклатуры = ОбходПоСериям.ХарактеристикаНоменклатуры;
						СтрокаПартий.СерияНоменклатуры          = ОбходПоСериям.СерияНоменклатуры;
									
						Обход = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока Обход.Следующий() Цикл
								
							СтрокаСФ = ДанныеПоСФ.Добавить();
							СтрокаСФ.КлючСтроки   = Ключ;
							СтрокаСФ.СчетФактура  = Обход.Партия;
							СтрокаСФ.ВидЦенности  = Обход.ВидЦенности;
							
							СтрокаСФ.СтавкаНДС    = Обход.СтавкаНДС;
								
							СтрокаСФ.Количество = Обход.КолОст;
							СтрокаСФ.НДСВключенВСтоимость = Обход.НДСВключенВСтоимость;
							СтрокаСФ.НДС = РассчитатьСуммуНДС( Обход.СуммаБезНДС, Истина, Обход.НДСВключенВСтоимость, ПолучитьСтавкуНДС(Обход.СтавкаНДС));
									
							СтрокаСФ.Стоимость  = ?( Обход.НДСВключенВСтоимость, Обход.СуммаБезНДС, Обход.СуммаБезНДС + СтрокаСФ.НДС);
								
						КонецЦикла; // По детальным записям
								
					КонецЦикла; // По сериям
				КонецЦикла; // По хар-кам
			КонецЦикла; // По Номенклатуре
		КонецЦикла; // По складам
	КонецЦикла; // По партиям
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетФактура
//
Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктОтбора = Новый Структура();

	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить("Организация", Организация);
	КонецЕсли;

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "ДанныеПоСФ");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Партия
//
Процедура ДанныеПоПартиямПартияНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктОтбора = Новый Структура();

	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить("Организация", Организация);
	КонецЕсли;

	НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "ДанныеПоПартиям");

КонецПроцедуры

