// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Затраты.Сумма";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура проверяет правильность заполнения реквизитов документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок) Экспорт

	Если ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыШапки = "Организация";
	Иначе
		РеквизитыШапки = "";
	КонецЕсли;

	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);

	//Адиянов<<< Начало СтатьяЗатратУпр
	//{{РеквизитыТЧ = "СтатьяЗатрат";
	РеквизитыТЧ = "СтатьяЗатрат, СтатьяЗатратУпр";
	//Адиянов>>> Конец СтатьяЗатратУпр
	ДополнитьРеквизитыТабличнойЧастиУпр(РеквизитыТЧ);

	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Затраты", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);

	// Проверим наличие вида расходов в статье затрат
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
	//Адиянов<<< Начало СтатьяЗатратУпр
	СтруктураПолей.Вставить("СтатьяЗатратУпр", "СтатьяЗатратУпр");	
	//Адиянов>>> Конец СтатьяЗатратУпр
	ТаблицаМатериалов = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей).Выгрузить();

КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	
	Если ОтражатьВУправленческомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "Подразделение";
	КонецЕсли;
			  
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов табл. части упр. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиУпр(Реквизиты)
	
	Если ОтражатьВУправленческомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "Сумма";
	КонецЕсли;
			  
КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента)

	ФормированиеДвиженийУпр(СтруктураШапкиДокумента);

КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений упр. регистров
//
Процедура ФормированиеДвиженийУпр(СтруктураШапкиДокумента)

	Если НЕ ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	СтруктДопПараметры = Новый Структура;
	СтруктДопПараметры.Вставить("Заказ",           СтруктураШапкиДокумента.Заказ);
	СтруктДопПараметры.Вставить("Подразделение",   СтруктураШапкиДокумента.Подразделение);
	СтруктДопПараметры.Вставить("ЕстьНДС",         Ложь);

	ДвиженияПоПрочимЗатратамУпр( ЭтотОбъект, Затраты, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, СтруктДопПараметры);

КонецПроцедуры // ФормированиеДвиженийУпр()

// Дополняет полями, нужными для упр. учета.
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Дополним полями, нужными для регл. и упр. учета
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений регистров, бухгалтерских и налоговых проводок.
	ФормированиеДвижений(СтруктураШапкиДокумента);
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Адиянов<<<
	Если НЕ Отказ Тогда
		ПроверкаЗаполненияСтатьиЗатратУпр(ЭтотОбъект,Отказ);
	КонецЕсли; 		
	//Адиянов>>>
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
