Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мКолонкиТовары; // Хранит колонки табличноно поля "Товары"


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
	СписокЗапросов.Добавить("ОстаткиВсейНоменклатуры", "По остаткам номенклатуры (вся номенклатура)");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
	СтруктураПараметровПодбора.Вставить("Склад", Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация", Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия", Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора номенклатуры данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем Номенклатура, Характеристика, Количество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если Номенклатура.Услуга Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СпособОпределенияЗначенияТочкиЗаказа", Номенклатура, Характеристика, Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная;
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = Количество;


	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа + Количество;

	КонецЕсли;

КонецПроцедуры // ОбработкаПодбораНоменклатура()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВозможностьИзмененияВидимости()
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Номенклатура, СпособОпределенияЗначенияТочкиЗаказа");

	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда

		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда

			ОбработкаПодбораНоменклатура(Товары, ЗначениеВыбора);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	Если ЭтоНовый() Тогда
		
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеСвойств      = Новый СписокЗначений;
	Форма.ОбъектОтбораЗначений   = Ссылка;
	Форма.ОбъектОтбораНазначений = Ссылка;

	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеСвойств.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	Если ЭтоНовый() Тогда
		
		Вопрос = "Перед началом работы с категориями необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, Ссылка);

	Форма.НазначениеКатегорий   = Новый СписокЗначений;
	Форма.ОбъектОтбораКатегорий = Ссылка;

	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Форма.НазначениеКатегорий.Добавить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы);

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Товары);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.СпособОпределенияЗначенияТочкиЗаказа) Тогда
		
		Элемент.ТекущиеДанные.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

Процедура ТоварыСпособОпределенияЗначенияТочкиЗаказаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная Тогда
		
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		СтрокаТабличнойЧасти.ДатаНач = Дата('00010101');
		СтрокаТабличнойЧасти.ДатаКон = Дата('00010101');
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.СреднийРазмерПартии Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.ОптимальныйРазмерЗаказа Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.НеКонтролировать Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		СтрокаТабличнойЧасти.ДатаНач = Дата('00010101');
		СтрокаТабличнойЧасти.ДатаКон = Дата('00010101');
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСпособОпределенияЗначенияТочкиЗаказаПриИзменении()

Процедура ТоварыСпособОпределенияЗначенияТочкиЗаказаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТоварыСпособОпределенияЗначенияТочкиЗаказаОчистка()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;