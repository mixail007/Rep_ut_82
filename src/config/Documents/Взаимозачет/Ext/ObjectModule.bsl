Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мУчетнаяПолитикаБух;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("УвеличениеДолга", Перечисления.ВидыЗадолженности.Кредиторская);
	Запрос.УстановитьПараметр("УменьшениеДолга", Перечисления.ВидыЗадолженности.Дебиторская);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка.Номер                               КАК Номер,
	|	Ссылка.Дата                                КАК Дата,
	|	Ссылка.КонтрагентДебитор                   КАК Получатель,
	|	Ссылка.Организация                         КАК Поставщик,
	|	Ссылка.Организация                         КАК Организация,
	|	НомерСтроки,
	|	ДоговорКонтрагента                         КАК ДоговорВзаиморасчетов,
	|	ДоговорКонтрагента.Представление           КАК ПредставлениеДоговора,
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов    КАК Валюта,
	|	Сделка                                     КАК Сделка,
	|	Сделка.Представление                       КАК ПредставлениеСделки,
	|	ВЫБОР КОГДА ВидЗадолженности = &УвеличениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УвеличениеДолгаКонтрагента,
	|	ВЫБОР КОГДА ВидЗадолженности = &УменьшениеДолга ТОГДА Сумма ИНАЧЕ 0 КОНЕЦ КАК УменьшениеДолгаКонтрагента
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолга
	|
	|ГДЕ
	|	КорректировкаДолга.Ссылка = &ТекущийДокумент
	|
	|ИТОГИ ПО
	|	ДоговорКонтрагента.ВалютаВзаиморасчетов";


	Шапка = Запрос.Выполнить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаДолга_КорректировкаДолга";

	Макет = ПолучитьМакет("КорректировкаДолга");

	// Выводим шапку накладной
	ЗаголовокВыведен = Ложь;
	НомерПП = 0;
	
	ВыборкаВалют       = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалют.Следующий() Цикл
		
		ИтогоВПлюс  = 0;
		ИтогоВМинус = 0;
		ВыборкаСтрокТовары = ВыборкаВалют.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если НЕ ЗаголовокВыведен Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(ВыборкаСтрокТовары, "Корректировка долга");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ВыборкаСтрокТовары.Организация, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ВыборкаСтрокТовары.Получатель, ВыборкаСтрокТовары.Дата), "ПолноеНаименование,");
				ТабДокумент.Вывести(ОбластьМакета);

				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ЗаголовокВыведен = Истина;
				ТабДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			НомерПП = НомерПП + 1;
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Вывести(ОбластьМакета);

			ИтогоВПлюс  = ИтогоВПлюс  + ВыборкаСтрокТовары.УвеличениеДолгаКонтрагента;
			ИтогоВМИнус = ИтогоВМИнус + ВыборкаСтрокТовары.УменьшениеДолгаКонтрагента;

		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ИтогоВПлюс  = ИтогоВПлюс;
		ОбластьМакета.Параметры.ИтогоВМИнус = ИтогоВМИнус;
		ОбластьМакета.Параметры.Валюта      = ВыборкаВалют.Валюта;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "КорректировкаДолга" Тогда		
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьДокумента();
		
	//ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

	//	ТабДокумент = НапечататьВнешнююФорму(Ссылка, ИмяМакета);
	//	
	//	Если ТабДокумент = Неопределено Тогда
	//		Возврат
	//	КонецЕсли; 
		
	КонецЕсли;

	//НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КорректировкаДолга","Корректировка долга");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет документ остатками дебиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаДебитора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", ЭтотОбъект.МоментВремени() ); //+++ Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	ВзаиморасчетыСКонтрагентами.Сделка,
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток,
	 |	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток
	 |ИЗ
	 |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	 |			&ДатаДокумента,
	 |			ДоговорКонтрагента = &ДоговорКонтрагента
	 |				И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
	 |ГДЕ
	 |	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток > 0
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ВЫБОР
	 |		КОГДА ВзаиморасчетыСКонтрагентами.Сделка ССЫЛКА Документ.ЗаказПокупателя
	 |				ИЛИ ВзаиморасчетыСКонтрагентами.Сделка ССЫЛКА Документ.ЗаказПоставщику
	 |			ТОГДА ВзаиморасчетыСКонтрагентами.Сделка.ДатаОплаты
	 |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Сделка.Дата
	 |	КОНЕЦ";
    РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.Сумма                         = Выборка.СуммаВзаиморасчетовОстаток;
		//+++  не у всех документов Сделка есть КурсВзаиморасчетов
		попытка
			НоваяСтрока.Валюта                  	  = Выборка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			НоваяСтрока.КурсВзаиморасчетов            = Выборка.СуммаУпрОстаток/Выборка.СуммаВзаиморасчетовОстаток;//Выборка.Сделка.КурсВзаиморасчетов;
			НоваяСтрока.СуммаУпр                      = Выборка.СуммаУпрОстаток; //Выборка.Сделка.КурсВзаиморасчетов * НоваяСтрока.Сумма;
		исключение
			НоваяСтрока.Валюта                  	  = мВалютаРегламентированногоУчета;
			НоваяСтрока.КурсВзаиморасчетов            = 1.0000;
			НоваяСтрока.СуммаУпр                      = НоваяСтрока.Сумма;
		конецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ остатками кредиторской задолженности контрагента по данным упр.учета
//
Процедура ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр() Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентКредитор);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаКредитора);
	Иначе
		Запрос.УстановитьПараметр("Контрагент",  КонтрагентДебитор);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",  ДоговорКонтрагентаДебитора);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Сделка,
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаДокумента,
		|			ДоговорКонтрагента = &ДоговорКонтрагента
		|				И ДоговорКонтрагента.Организация = &Организация) КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовОстаток < 0
		//|	И ВзаиморасчетыСКонтрагентами.СуммаУпрОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.Сделка ССЫЛКА Документ.ЗаказПокупателя
		|				ИЛИ ВзаиморасчетыСКонтрагентами.Сделка ССЫЛКА Документ.ЗаказПоставщику
		|			ТОГДА ВзаиморасчетыСКонтрагентами.Сделка.ДатаОплаты
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Сделка.Дата
		|	КОНЕЦ";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока                               = СуммыДолга.Добавить();
		НоваяСтрока.ДоговорКонтрагента            = Выборка.ДоговорКонтрагента;
		НоваяСтрока.Сделка                        = Выборка.Сделка;
		НоваяСтрока.ВидЗадолженности              = Перечисления.ВидыЗадолженности.Кредиторская;
		НоваяСтрока.Сумма                         = - Выборка.СуммаВзаиморасчетовОстаток;
		//+++
		попытка
		НоваяСтрока.Валюта                  	  = Выборка.Сделка.ВалютаДокумента;
		НоваяСтрока.КурсВзаиморасчетов            = Выборка.СуммаУпрОстаток /Выборка.СуммаВзаиморасчетовОстаток; //Выборка.Сделка.КурсВзаиморасчетов;
		НоваяСтрока.СуммаУпр                   = -Выборка.СуммаУпрОстаток;// Выборка.Сделка.КурсВзаиморасчетов*НоваяСтрока.Сумма;
		исключение
		НоваяСтрока.Валюта                  	  =  мВалютаРегламентированногоУчета;
		НоваяСтрока.КурсВзаиморасчетов            = 1.0000;
		НоваяСтрока.СуммаУпр                   = НоваяСтрока.Сумма;
		конецПопытки;

	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента)

	ТаблицаРасчетов = РезультатЗапросаПоСуммамДолга.Выгрузить();

	ПодготовитьТаблицуСуммДолгаУпр(ТаблицаРасчетов, СтруктураШапкиДокумента);
	ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента);
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуСуммДолгаУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаКонтрагента", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаКонтрагента", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УвеличениеДолгаУпр", ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("УменьшениеДолгаУпр", ПолучитьОписаниеТиповЧисла(15,2));

	// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Если документ расчетов не указан, то при ведении по документам расчетов необходимо
		// указать ссылку на текущий документ
		//Если СтрокаТаблицы.ВестиПоДокументамРасчетовСКонтрагентом
		//		И ЗначениеНеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
		//	СтрокаТаблицы.ДокументРасчетовСКонтрагентом = Ссылка;
		//КонецЕсли;

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			СтрокаТаблицы.СделкаВзаиморасчеты = Неопределено;
		КонецЕсли;

		//+++ Сумма заменена на СуммаУпр, но только для новых документов!
		СтрокаТаблицы.УвеличениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,  0, СтрокаТаблицы.Сумма);
		СтрокаТаблицы.УменьшениеДолгаКонтрагента = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, СтрокаТаблицы.Сумма);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.УвеличениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, 0,
		                                 ?(СтрокаТаблицы.СуммаУпр=0, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаУпр) );

		СтрокаТаблицы.УменьшениеДолгаУпр = ?(СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, 0, 
		                                 ?(СтрокаТаблицы.СуммаУпр=0, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаУпр) );
										 
										 
		СтрокаТаблицы.СуммаУпр = ?(СтрокаТаблицы.СуммаУпр=0, СтрокаТаблицы.Сумма, СтрокаТаблицы.СуммаУпр);//+++  для старых
		
	КонецЦикла;

КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуСуммДолгаРегл(ТаблицаРасчетов, СтруктураШапкиДокумента)

	// Добполнение таблицы расчетов полями.
	
	ТаблицаРасчетов.Колонки.Вставить(1,"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("ЭтоВозврат", Новый ОписаниеТипов("Булево"));
	//ТаблицаРасчетов.Колонки.Добавить("ВидРасчетовСКонтрагентом", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасчетовСКонтрагентами"));
	//ТаблицаРасчетов.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентами.Прочее,"ВидРасчетовСКонтрагентом");
	
	// Заполняем контрагента по значению поля КонтрагентДебитор
	ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентДебитор,"Контрагент");
	СтрокиКредиторки = ТаблицаРасчетов.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		// Контрагент для кредиторской задолженности устанавливается из другого поля
		Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
			СтрокаКредиторки.Контрагент = СтруктураШапкиДокумента.КонтрагентКредитор;
		КонецЦикла; 
		
		// Если не используется вспомогательный счет, в качестве субсчета устанавливаем счет 000 для последующей корректировки (объединения)
		// движений по кредиторской и дебиторской задолженностям.
		//Если не СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
		//	ТаблицаРасчетов.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.Вспомогательный,"КоррСчет");
		//	ТаблицаРасчетов.ЗаполнитьЗначения(Неопределено, "КоррСубконто1, КоррСубконто2, КоррСубконто3");
		//КонецЕсли; 
		//
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
		//ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.КонтрагентКредитор,"КоррСубконто1");
		//ТаблицаРасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"КоррСубконто2");
		//
		//// Счет переноса для кредиторской задолженности устанавливается из другого поля
		//Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
		//	СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
		//КонецЦикла; 
			
	ИначеЕсли  СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
		// Счет и аналитику списания для кредиторской задолженности устанавливается из другого поля
		//Для каждого СтрокаКредиторки Из СтрокиКредиторки Цикл
		//	СтрокаКредиторки.КоррСчет = СтруктураШапкиДокумента.СчетКт;
		//	СтрокаКредиторки.КоррСубконто1 = СтруктураШапкиДокумента.СубконтоКт1;
		//	СтрокаКредиторки.КоррСубконто2 = СтруктураШапкиДокумента.СубконтоКт2;
		//	СтрокаКредиторки.КоррСубконто3 = СтруктураШапкиДокумента.СубконтоКт3;
		//	Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		//		СтрокаКредиторки.КоррСчетНУ = СтруктураШапкиДокумента.СчетКтНУ;
		//		СтрокаКредиторки.КоррСубконтоНУ1 = СтруктураШапкиДокумента.СубконтоКтНУ1;
		//		СтрокаКредиторки.КоррСубконтоНУ2 = СтруктураШапкиДокумента.СубконтоКтНУ2;
		//		СтрокаКредиторки.КоррСубконтоНУ3 = СтруктураШапкиДокумента.СубконтоКтНУ3;
		//	КонецЕсли; 
		//КонецЦикла; 
		
	КонецЕсли;
	
	// Определим вид погашения задолженности - возврат оплаты или непосредственно погашение.
	Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			Тогда
			
		//	СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская тогда
				//Это возврат от поставщика
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			или СтрокаРасчетов.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			Тогда
			
		//	СтрокаРасчетов.ВидРасчетовСКонтрагентом =  Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
			
			Если СтрокаРасчетов.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская тогда
				//Это возврат покупателю
				СтрокаРасчетов.ЭтоВозврат = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаРасчетов;

КонецФункции // ПодготовитьТаблицуСуммДолгаРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	
	//	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	//		Если СтруктураШапкиДокумента.ИспользоватьВспомогательныйСчет Тогда
	//			СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Вспомогательный счет""!");
	//		КонецЕсли;
	//		
	//	Иначе
	//		ЕстьДебиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;
	//		ЕстьКредиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;
	//		
	//		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
	//			
	//			Если ЕстьДебиторскаяЗадолженность Тогда
	//				СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет переноса дебиторской задолженности""!");
	//			КонецЕсли;
	//			
	//			Если ЕстьКредиторскаяЗадолженность Тогда
	//				СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет переноса кредиторской задолженности""!");
	//			КонецЕсли;
	//			
	//		Иначе //.СписаниеЗадолженности 
	//			
	//			Если ЕстьДебиторскаяЗадолженность Тогда
	//				СтруктураОбязательныхПолей.Вставить("СчетДт", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности""!");
	//				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//					СтруктураОбязательныхПолей.Вставить("СчетДтНУ", "Не заполнено значение реквизита ""Счет списания дебиторской задолженности в НУ""!");
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//			Если ЕстьКредиторскаяЗадолженность Тогда
	//				СтруктураОбязательныхПолей.Вставить("СчетКт", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности""!");
	//				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//					СтруктураОбязательныхПолей.Вставить("СчетКтНУ", "Не заполнено значение реквизита ""Счет списания кредиторской задолженности в НУ""!");
	//				КонецЕсли;
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СуммыДолга".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСуммамДолга    - таблица значений, содержащая данные для проведения и проверки ТЧ СуммыДолга
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "СуммыДолга";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДоговорКонтрагента");

	//ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договорах взаиморасчетов.
	ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, ТаблицаПоСуммамДолга, Отказ, Заголовок);
    Если не Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
	Для каждого СтрокаТаблицы Из ТаблицаПоСуммамДолга Цикл

		Если СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ СтрокаТаблицы.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			                                 """ табличной части ""Суммы долга"": ";

			Если ЗначениеНеЗаполнено(СтрокаТаблицы.СделкаВзаиморасчеты) Тогда
				ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + " выбран договор, взаиморасчеты по которому ведутся по заказам.
				                    |Необходимо заполнить сделку!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
    КонецЕсли;
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСуммыДолга()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиСуммаДолгаРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу значений, не содержащую строк источника со значением Ложь в колонке "ВестиПоДокументамРасчетовСКонтрагентом"
//
// Параметры:
// ТаблицаИсточник		- <ТаблицаЗначений> исходная таблица. 
//							Обязательно должна содержать колонку "ВестиПоДокументамРасчетовСКонтрагентом"
//

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоСуммамДолга          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения,  СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок);
	
	КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ТаблицаУвеличениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		ТаблицаУменьшениеДолга = ТаблицаПоСуммамДолга.Скопировать();
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУвеличениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУвеличениеДолга.Получить(Счетчик);
	//		Если СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 Тогда  //была обязательная только 1 сумма 
			Если СтрокаТаблицы.УвеличениеДолгаКонтрагента = 0 и СтрокаТаблицы.УвеличениеДолгаУпр =0 Тогда //+++ 23.01.2012 Упр
				ТаблицаУвеличениеДолга.Удалить(СтрокаТаблицы);
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Счетчик = 0;
		Пока Счетчик < ТаблицаУменьшениеДолга.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаУменьшениеДолга.Получить(Счетчик);
			
	//		Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 Тогда
			Если СтрокаТаблицы.УменьшениеДолгаКонтрагента = 0 и  СтрокаТаблицы.УменьшениеДолгаУпр = 0 Тогда //+++ 23.01.2012 Упр
				ТаблицаУменьшениеДолга.Удалить(СтрокаТаблицы);
			Иначе 
				Счетчик= Счетчик + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		//+++
		//{ Лапенков 2007-05-03 по приказу Малышева (СУММА увеличение долга=СУММА уменьшение долга)
		//Если  ТаблицаУвеличениеДолга.Итог("Сумма")<>ТаблицаУменьшениеДолга.Итог("Сумма") Тогда
		//	 Сообщить("Не возможно провести документ. Суммы взаимозачета списания и оприходования должны быть равны!", СтатусСообщения.Важное);
		//	 Отказ=Истина;
		//КонецЕсли;
		//  }    
		//+++( изменено 26.07.2011
	  //Если  ТаблицаУвеличениеДолга.Итог("СуммаУпр")<>ТаблицаУменьшениеДолга.Итог("СуммаУпр") Тогда
	  //  	 Сообщить("Не возможно провести документ. Суммы взаимозачета списания и оприходования должны быть равны!", СтатусСообщения.Важное);
	  //  	 Отказ=Истина;
	  //  КонецЕсли;
		 //+++)
		
		Если ТаблицаУвеличениеДолга.Количество() > 0 Тогда
			
			ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
		//	ТаблицаУвеличениеДолга.Колонки.УвеличениеДолгаУпр.Имя         = "СуммаУпр";//+++ "СуммаУпр"; 
			ТаблицаУвеличениеДолга.Колонки.СделкаВзаиморасчеты.Имя        = "Сделка";
			
			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

				ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаКредитора,"ДоговорКонтрагента");
			//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента.Владелец,"Контрагент");
            //	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
				КонецЕсли;
				
			КонецЕсли;	
			
			Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Табл.Сделка КАК Сделка,
				|	Табл.Сумма,
				|	Табл.СуммаУпр,
				|	Табл.ДоговорКонтрагента
				|ПОМЕСТИТЬ ВТ_сделки
				|ИЗ
				|	&Табл КАК Табл
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_сделки.Сделка,
				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток + ВТ_сделки.СуммаУпр КАК СуммаУпр,
				|	ВТ_сделки.ДоговорКонтрагента,
				|	0 КАК СуммаВзаиморасчетов
				|ИЗ
				|	ВТ_сделки КАК ВТ_сделки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
				|				&МоментВремени,
				|				Сделка В
				|					(ВЫБРАТЬ
				|						ВТ_сделки.Сделка
				|					ИЗ
				|						ВТ_сделки КАК ВТ_сделки)) КАК ВзаиморасчетыСКонтрагентамиОстатки
				|		ПО ВТ_сделки.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
				|			И ВТ_сделки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
				|ГДЕ
				|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток = ВТ_сделки.Сумма
				|	И -ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток <> ВТ_сделки.СуммаУпр";
				
				ТаблицаУвеличениеДолга.Свернуть("Сделка,ДоговорКонтрагента","Сумма,СуммаУпр");
				Запрос.УстановитьПараметр("Табл", ТаблицаУвеличениеДолга);
				Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
				
				ТаблицаКурсовыхРазниц = Запрос.Выполнить().Выгрузить();
				
				Если ТаблицаКурсовыхРазниц.Количество()>0 Тогда
					НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
					
					// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();
					
					// Заполним таблицу движений.
					ЗагрузитьВТаблицуЗначений(ТаблицаКурсовыхРазниц, ТаблицаДвижений);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
					КонецЕсли;
				конецесли;			
			конецЕсли;	  //)
			
			
			//// ПО РЕГИСТРУ РасчетыСКонтрагентами.
			//НаборДвижений = Движения.РасчетыСКонтрагентами;
			//ТаблицаУвеличениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			//ТаблицаУвеличениеДолгаРасчеты = ТаблицаУвеличениеДолга.Скопировать();
			//ТаблицаУвеличениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			//ТаблицаДвижений = НаборДвижений.Выгрузить();
			//ТаблицаДвижений.Очистить();

			//// Заполним таблицу движений.
			//ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);
			//
			//// Недостающие поля.
			//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");

			//НаборДвижений.мПериод          = Дата;
			//НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			//Если Не Отказ Тогда
			//	Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			//КонецЕсли;

			//Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			//  //  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента.Владелец,"Контрагент");
			//// ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаКредитора,"ДоговорКонтрагента");
			//	
			//	НаборДвижений.мПериод          = Дата;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			//	
			//	Если Не Отказ Тогда
			//		Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			//	КонецЕсли;
			//	
			//КонецЕсли;	
			//
			//ТаблицаКомитентов = ТаблицаУвеличениеДолга.Скопировать();
			//Счетчик = 0;
			//Пока Счетчик < ТаблицаКомитентов.Количество() Цикл

			//	СтрокаТаблицы = ТаблицаКомитентов.Получить(Счетчик);

			//	Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			//	 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
			//		ТаблицаКомитентов.Удалить(СтрокаТаблицы);
			//	Иначе 
			//		Счетчик= Счетчик + 1;
			//	КонецЕсли;

			//КонецЦикла;

			//Если ТаблицаКомитентов.Количество() > 0 Тогда

			//	НаборДвижений = Движения.ДенежныеСредстваКомитента;
			//	ТаблицаДвижений = НаборДвижений.Выгрузить();

			//	// Заполним таблицу движений.
			//	ЗагрузитьВТаблицуЗначений(ТаблицаУвеличениеДолгаРасчеты, ТаблицаДвижений);

			//	НаборДвижений.мПериод          = Дата;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			//	Движения.ДенежныеСредстваКомитента.ВыполнитьРасход();

			//КонецЕсли;

		КонецЕсли;

		Если ТаблицаУменьшениеДолга.Количество() > 0 Тогда

			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаКонтрагента.Имя = "СуммаВзаиморасчетов";
//			ТаблицаУменьшениеДолга.Колонки.УменьшениеДолгаУпр.Имя = "СуммаУпр";
			ТаблицаУменьшениеДолга.Колонки.СделкаВзаиморасчеты.Имя = "Сделка";

			// ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

				ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаКредитора,"ДоговорКонтрагента");
			//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента.Владелец,"Контрагент");
			//	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

				НаборДвижений.мПериод          = Дата;
				НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
				
				Если Не Отказ Тогда
					Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
				КонецЕсли;
				
			КонецЕсли;	
			Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Табл.Сделка КАК Сделка,
				|	Табл.Сумма,
				|	Табл.СуммаУпр,
				|	Табл.ДоговорКонтрагента
				|ПОМЕСТИТЬ ВТ_сделки
				|ИЗ
				|	&Табл КАК Табл
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_сделки.Сделка,
				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток - ВТ_сделки.СуммаУпр КАК СуммаУпр,
				|	ВТ_сделки.ДоговорКонтрагента,
				|	0 КАК СуммаВзаиморасчетов
				|ИЗ
				|	ВТ_сделки КАК ВТ_сделки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
				|				&МоментВремени,
				|				Сделка В
				|					(ВЫБРАТЬ
				|						ВТ_сделки.Сделка
				|					ИЗ
				|						ВТ_сделки КАК ВТ_сделки)) КАК ВзаиморасчетыСКонтрагентамиОстатки
				|		ПО ВТ_сделки.Сделка = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
				|			И ВТ_сделки.ДоговорКонтрагента = ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
				|ГДЕ
				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток = ВТ_сделки.Сумма
				|	И ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток <> ВТ_сделки.СуммаУпр";
				
				ТаблицаУменьшениеДолга.Свернуть("Сделка,ДоговорКонтрагента","Сумма,СуммаУпр");
				Запрос.УстановитьПараметр("Табл", ТаблицаУменьшениеДолга);
				Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
				
				ТаблицаКурсовыхРазниц = Запрос.Выполнить().Выгрузить();
				
				Если ТаблицаКурсовыхРазниц.Количество()>0 Тогда
					НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
					
					// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();
					
					// Заполним таблицу движений.
					ЗагрузитьВТаблицуЗначений(ТаблицаКурсовыхРазниц, ТаблицаДвижений);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
					КонецЕсли;
				конецесли;			
			конецЕсли;	  //)
			

			
			//НаборДвижений = Движения.РасчетыСКонтрагентами;
			//ТаблицаУменьшениеДолга.Колонки.Сделка.Имя = "СделкаВзаиморасчеты";
			//ТаблицаУменьшениеДолгаРасчеты = ТаблицаУменьшениеДолга.Скопировать();
			//ТаблицаУменьшениеДолгаРасчеты.Колонки.СделкаРасчеты.Имя = "Сделка";

			//// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			//ТаблицаДвижений = НаборДвижений.Выгрузить();
			//ТаблицаДвижений.Очистить();

			//// Заполним таблицу движений.
			//ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолгаРасчеты, ТаблицаДвижений);

			//// Недостающие поля.
			//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.РасчетыВозврат.Расчеты,"РасчетыВозврат");
			//
			//НаборДвижений.мПериод            = Дата;
			//НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			//Если Не Отказ Тогда
			//	Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			//КонецЕсли;

			//
			//Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда

			//	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагентаКредитора,"ДоговорКонтрагента");
			////	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента.Владелец,"Контрагент");
			////	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");

			//	НаборДвижений.мПериод          = Дата;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			//	
			//	Если Не Отказ Тогда
			//		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			//	КонецЕсли;
			//	
			//КонецЕсли;	
			//
			//ТаблицаКомиссионеров = ТаблицаУменьшениеДолга.Скопировать();
			//Счетчик = 0;
			//Пока Счетчик < ТаблицаКомиссионеров.Количество() Цикл

			//	СтрокаТаблицы = ТаблицаКомиссионеров.Получить(Счетчик);

			//	Если НЕ СтрокаТаблицы.ДоговорВид = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			//	 ИЛИ НЕ СтрокаТаблицы.КонтролироватьДенежныеСредстваКомитента Тогда
			//		ТаблицаКомиссионеров.Удалить(СтрокаТаблицы);
			//	Иначе 
			//		Счетчик= Счетчик + 1;
			//	КонецЕсли;

			//КонецЦикла;

			//Если ТаблицаКомиссионеров.Количество() > 0 Тогда

			//	НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
			//	ТаблицаДвижений = НаборДвижений.Выгрузить();

			//	// Заполним таблицу движений.
			//	ЗагрузитьВТаблицуЗначений(ТаблицаУменьшениеДолга, ТаблицаДвижений);

			//	
			//	НаборДвижений.мПериод          = Дата;
			//	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

			//	Движения.ДенежныеСредстваКомиссионера.ВыполнитьРасход();

			//КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры





// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       , "СписыватьПартииПриПроведенииДокументов" , "СписыватьПартииПриПроведенииДокументов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "СуммыДолга".
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ДоговорКонтрагента"                      , "ДоговорКонтрагента");
//	СтруктураПолей.Вставить("ВестиПоДокументамРасчетовСКонтрагентом"  , "ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("ВалютаВзаиморасчетов"                    , "ДоговорКонтрагента.ВалютаВзаиморасчетов");
	СтруктураПолей.Вставить("ВедениеВзаиморасчетов"                   , "ДоговорКонтрагента.ВедениеВзаиморасчетов");
	СтруктураПолей.Вставить("ДоговорОрганизация"                      , "ДоговорКонтрагента.Организация");
	СтруктураПолей.Вставить("ДоговорВид"                              , "ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("РасчетыВУсловныхЕдиницах"                , "ДоговорКонтрагента.РасчетыВУсловныхЕдиницах");
	СтруктураПолей.Вставить("КонтрагентДоговора"                      , "ДоговорКонтрагента.Владелец");
	СтруктураПолей.Вставить("Организация"                      , "ДоговорКонтрагента.Организация");

//	СтруктураПолей.Вставить("КонтролироватьДенежныеСредстваКомитента" , "ДоговорКонтрагента.КонтролироватьДенежныеСредстваКомитента");
	СтруктураПолей.Вставить("СделкаВзаиморасчеты"                     , "Сделка");
	//СтруктураПолей.Вставить("СделкаРасчеты"                           , "Сделка");
//	СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом"           , "ДокументРасчетовСКонтрагентом");
	СтруктураПолей.Вставить("Сумма"                                   , "Сумма");
	//СтруктураПолей.Вставить("СуммаРегл"                               , "СуммаРегл");
	СтруктураПолей.Вставить("ВидЗадолженности"                        , "ВидЗадолженности");
	
	//+++(
	СтруктураПолей.Вставить("КурсВзаиморасчетов"                        , "КурсВзаиморасчетов");
	СтруктураПолей.Вставить("СуммаУпр"                                 , "СуммаУпр");
	//+++)
	//СтруктураПолей.Вставить("КратностьВзаиморасчетов"                 , "КратностьВзаиморасчетов");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ДоговорКонтрагентаПредставление"            , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента)");
	СтруктураСложныхПолей.Вставить("СделкаПредставление"                        , "ПРЕДСТАВЛЕНИЕ(Док.Сделка)");
	//СтруктураСложныхПолей.Вставить("ДокументРасчетовСКонтрагентомПредставление" , "ПРЕДСТАВЛЕНИЕ(Док.ДокументРасчетовСКонтрагентом)");
	//СтруктураСложныхПолей.Вставить("ВалютаВзаиморасчетовПредставление"          , "ПРЕДСТАВЛЕНИЕ(Док.ДоговорКонтрагента.ВалютаВзаиморасчетов)");
	
	РезультатЗапросаПоСуммамДолга = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СуммыДолга", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоСуммамДолга = ПодготовитьТаблицуСуммДолга(РезультатЗапросаПоСуммамДолга, СтруктураШапкиДокумента);

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность = ТаблицаПоСуммамДолга.Скопировать();
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность  = ТаблицаПоСуммамДолга.Скопировать();

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Получить(Счетчик);
		Если  не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
		

	КонецЦикла;

	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Получить(Счетчик);

		Если не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации
			ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Получить(Счетчик);

		Если  не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе 
			Счетчик= Счетчик + 1;
		КонецЕсли;

	КонецЦикла;
	
	Счетчик = 0;
	Пока Счетчик < ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Количество() Цикл

		СтрокаТаблицы = ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Получить(Счетчик);
		Если не СтрокаТаблицы.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда //не СтрокаТаблицы.ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению 
			ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Удалить(СтрокаТаблицы);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;

	КонецЦикла;

	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя= "Сделка";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.СделкаВзаиморасчеты.Имя	= "Сделка";
	
	ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
	ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Колонки.Сумма.Имя	= "СуммаВзаиморасчетов";
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Учетная политика 
	ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	мУчетнаяПолитикаБух   = ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата),ОшибкаПолученияУчетнойПолитики );
	
//	СтруктураШапкиДокумента.Вставить("СпособВеденияВзаиморасчетов", ?(ОшибкаПолученияУчетнойПолитики,Перечисления.СпособыВеденияВзаиморасчетовВБухгалтерскомУчете.НаСчетахБухгалтерскогоУчета,мУчетнаяПолитикаБух.СпособВеденияВзаиморасчетов));
//	СтруктураШапкиДокумента.Вставить("ОпределятьАвансыПриПроведенииДокумента", ?(ОшибкаПолученияУчетнойПолитики,Ложь,мУчетнаяПолитикаБух.ОпределятьАвансыПриПроведенииДокумента));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ОрганизацияДебитор = ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентДебитор);
		Если ЗначениеНеЗаполнено(ОрганизацияДебитор) Тогда
			ОрганизацияКредитор = ПолучитьОрганизациюПоКонтрагенту(Основание.КонтрагентКредитор);
			Если Не ЗначениеНеЗаполнено(ОрганизацияКредитор) Тогда
				Организация        = ОрганизацияКредитор;
				КонтрагентДебитор  = ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
				КонтрагентКредитор = Основание.КонтрагентДебитор;  
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Организация = ОрганизацияДебитор;
			КонтрагентКредитор = ПолучитьКонтрагентаПоОрганизации(Основание.Организация);
			КонтрагентДебитор  = Основание.КонтрагентКредитор;  
		КонецЕсли;
		
		Для каждого СтрокаОснования Из Основание.СуммыДолга Цикл
			НоваяСтрока = СуммыДолга.Добавить();
			НоваяСтрока.ВидЗадолженности        = ?(СтрокаОснования.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, Перечисления.ВидыЗадолженности.Кредиторская, Перечисления.ВидыЗадолженности.Дебиторская);			
			
			ТекКонтрагент =  ?(НоваяСтрока.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, КонтрагентДебитор, КонтрагентКредитор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Контрагент",   ТекКонтрагент);
			Запрос.УстановитьПараметр("Организация", Организация);
				
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка 
			|ИЗ Справочник.ДоговорыКонтрагентов
			|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Контрагент
			|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация";
				
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяСтрока.ДоговорКонтрагента = Выборка.Ссылка;
			Иначе 
				СообщитьОбОшибке("У контрагента " + ТекКонтрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = СтрокаОснования.КурсВзаиморасчетов;
			НоваяСтрока.КратностьВзаиморасчетов = СтрокаОснования.КратностьВзаиморасчетов;
			НоваяСтрока.Сумма                   = СтрокаОснования.Сумма;
			
		КонецЦикла;
			
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи  <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Для каждого стр из СуммыДолга Цикл
		//если не ЗначениеЗаполнено(стр.Сделка) и стр.ДоговорКонтрагента.ВалютаВзаиморасчетов <> константы.ВалютаРегламентированногоУчета.Получить() и стр.ВидЗадолженности = перечисления.ВидыЗадолженности.Кредиторская  
		//	//21.06.2016 - добавлено условие если расчеты ведутся по договору в целом тогда можно не указывать сделку
		//	и не стр.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом тогда
		//	//21.06.2016 - добавлено условие если расчеты ведутся по договору в целом тогда можно не указывать сделку
		//	 сообщить("Нельзя увеличивать кредиторскую задолженность без указания сделки!");
		//	отказ = истина;
		//конецЕсли;	
			Если ЗначениеЗаполнено(стр.Сделка) и ТипЗнч(стр.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") и стр.ВидЗадолженности = перечисления.ВидыЗадолженности.Кредиторская и стр.ДоговорКонтрагента.ВалютаВзаиморасчетов <> константы.ВалютаРегламентированногоУчета.Получить() Тогда
				МаксПредоплата = яштПоставщики.РассчитатьСуммуМаксимальнойОплаты(Стр.Сделка,МоментВремени());
				Если стр.Сумма > МаксПредоплата Тогда
					#Если Клиент тогда
						Ответ=вопрос("По сделке "+стр.Сделка+" максимально допустимая сумма платежа "+МаксПредоплата+". Изменить на максимальную сумму?",РежимДиалогаВопрос.ДаНет,0);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							стр.Сумма =МаксПредоплата;
							стр.СуммаУпр = стр.Сумма*стр.КурсВзаиморасчетов; 
						иначе
							стр.Сумма =0;
							стр.СуммаУпр =0; 
						конецЕсли;
					#Иначе
						стр.Сумма =МаксПредоплата;
						стр.СуммаУпр = стр.Сумма*стр.КурсВзаиморасчетов; 
					#КонецЕсли
				конецЕсли;	
			конецЕсли;	
	    конецЦикла;
    конецЕсли;
	
	СписокДоговоровВДокументе = Новый СписокЗначений;
	// Эта проверка только для менеджеров
	// взаимозачеты между различными договорами доступны только пользователю с ролью 'МенеджерПоВзаимозачетам'
	#Если клиент тогда
		ЕстьФакторинг = ложь;
		ЕстьПоставка = ложь;
		ЕстьНал = ложь;
		ЕстьБезнал = ложь;
		ТолькоСПокупателем = истина;
		
		ПользователиГруппы = ПолучитьПользователейНаправленияПродаж(глТекущийПользователь);
		
		Если НЕ РольДоступна("МенеджерПоВзаимозачетам") И Константы.ОплатыРаспределяютМенеджеры.Получить() 
		И  НЕ ОбменДанными.Загрузка  Тогда	
		Для каждого строкаДолга Из СуммыДолга Цикл
			Если ЗначениеНеЗаполнено(строкаДолга.ДоговорКонтрагента) Тогда
				Сообщить("Необходимо указание договора в строке №"+Строка(строкаДолга.НомерСтроки));
				Отказ=Истина;
			ИначеЕсли не (ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьВзаимозачетПоРазнымДоговорамПродажи") и ПользователиГруппы.Найти(глТекущийПользователь)<> неопределено ) 
				    и строкаДолга.ДоговорКонтрагента.ОтветственноеЛицо<>глТекущийПользователь тогда
				Сообщить("В строке №"+Строка(строкаДолга.НомерСтроки)+" указан договор, по которому вы НЕ являетесь лицом ответственным за договор.");
				Отказ=Истина;
			Иначе
				НайдДоговор=СписокДоговоровВДокументе.НайтиПоЗначению(строкаДолга.ДоговорКонтрагента);
				Если НайдДоговор=Неопределено Тогда
					СписокДоговоровВДокументе.Добавить(строкаДолга.ДоговорКонтрагента);
				КонецЕсли;	
			КонецЕсли;	
			
			Если строкаДолга.ДоговорКонтрагента.ВидДоговора =  Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком тогда
				ЕстьПоставка = истина;
			КонецЕсли;
			
			Если строкаДолга.ДоговорКонтрагента.ВидДоговора <>  Перечисления.ВидыДоговоровКонтрагентов.СПокупателем тогда
				ТолькоСПокупателем = ложь;
			КонецЕсли;
			
			Если строкаДолга.ДоговорКонтрагента.ТипДоговора =  Справочники.ТипыДоговоров.Факторинг или  строкаДолга.ДоговорКонтрагента.ТипДоговора =  Справочники.ТипыДоговоров.ФакторингПредоплата тогда
				ЕстьФакторинг = истина;
			КонецЕсли;
			
			Если Найти(строкаДолга.ДоговорКонтрагента.Наименование,"*")>0 тогда
				ЕстьНал = истина;
			иначе
				ЕстьБезнал = истина;
			КонецЕсли;
		КонецЦикла;	
		Если СписокДоговоровВДокументе.Количество()>1 Тогда // зачеты между несколькими договорами не допускаются
			
			//+++( 04.02.2014 только для Ани Серебренниковой - можно вести зачет по разным договорам 1 контрагента
			Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьВзаимозачетПоРазнымДоговорам") 
				и ( ( ЗначениеЗаполнено(КонтрагентКредитор) и КонтрагентКредитор = КонтрагентДебитор
				    ) или не ЗначениеЗаполнено(КонтрагентКредитор) 
				  ) тогда     // тогда по разным договорам 1 контрагента...
            	//Сообщить("Вы можете провести взаимозачет между договорами.", СтатусСообщения.Информация);
			ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьВзаимозачетПоРазнымДоговорамПродажи") 
				и ЗначениеЗаполнено(КонтрагентКредитор) и КонтрагентКредитор = КонтрагентДебитор
				и ЕстьНал<>ЕстьБезнал и ЕстьФакторинг=ложь и ЕстьПоставка = ложь
				и ТолькоСПокупателем
				тогда
			иначе	
				Сообщить("Вы не имеете права производить зачеты между несколькими договорами. Обратитесь за разъяснениями в финансовую службу.",СтатусСообщения.Важное);
				Отказ=Истина;
			КонецЕсли;	
			//+++)
			
		КонецЕсли;	
		
		//+++( 14.04.2017 - проверка и запрет взаимозачёта, если есть хоть один действующий договор факторинга (задача №25624)
		догФакторинг = ложь;
		ДатаСреза = ?(Дата='00010101', ТекущаяДата(),Дата);
		Если ЗначениеЗаполнено(КонтрагентКредитор) тогда
			Рез = НайтиДоговорФакторинга( КонтрагентКредитор, ДатаСреза  ); //29.03.2017
			Если Рез.ЕстьДоговорФакторинга Тогда
	        	догФакторинг = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтрагентДебитор) тогда
			Рез = НайтиДоговорФакторинга( КонтрагентДебитор, ДатаСреза  ); //29.03.2017
			Если Рез.ЕстьДоговорФакторинга Тогда
	        	догФакторинг = Истина;
			КонецЕсли;
		КонецЕсли;
		Если догФакторинг тогда 
			Сообщить("Вы не имеете права производить взаимозачеты по клиенту, у которого есть договор Факторинга на '"+формат(ДатаСреза,"ДФ=dd.MM.yyyy")+"'! Обратитесь за разъяснениями в финансовую службу.",СтатусСообщения.Важное);
			Отказ=Истина;
		КонецЕсли;	
		//+++)
		
	КонецЕсли;	
	#конецЕсли
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
    СуммаДокумента= ТабКредиторская.Итог("Сумма");

	СуммаДокумента= ТабКредиторская.Итог("Сумма");
	
	мУдалятьДвижения = НЕ ЭтоНовый();
		
	Если НЕ Отказ Тогда
		
		//БАЛАНС (04.12.2007)                       
		ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	      ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	      ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность;
	
	//Если мУдалятьДвижения Тогда
	//	УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	//КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСуммамДолга,
	                            ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                            ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность);
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиСуммыДолга(ТаблицаПоСуммамДолга, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим совпадение сумм при взаимозачете
	//+++ ВСЕГДА! Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
	
	// в 
	//Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
	Если ВидОперации= перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
		Разница = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Итог("СуммаУпр") 
				- ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Итог("СуммаУпр")
				+ ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Итог("СуммаУпр")
				- ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Итог("СуммаУпр");
	 Иначе
		Разница = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов") 
				- ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов")
				+ ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов")
				- ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	конецЕсли;			
		Если Разница <> 0 Тогда
			ТекстОшибки = "Взаимозачет возможен только при совпадении сумм дебиторской и кредиторской задолженности в валюте!";
			ОшибкаПриПроведении(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
	//Иначе	
	//	Разница = ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность.Итог("СуммаУпр") 
	//			- ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность.Итог("СуммаУпр")
	//			+ ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность.Итог("СуммаУпр")
	//			- ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность.Итог("СуммаУпр");
	//	Если Разница <> 0 Тогда
	//		ТекстОшибки = "Взаимозачет возможен только при совпадении сумм дебиторской и кредиторской задолженности в Рублях!";
	//		ОшибкаПриПроведении(ТекстОшибки, Отказ, Заголовок);
	//	КонецЕсли;
	//КонецЕсли;
	
	//КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоСуммамДолга, 
	                        ТаблицаРасчетыСПокупателямиКредиторскаяЗадолженность, ТаблицаРасчетыСПокупателямиДебиторскаяЗадолженность,
	                        ТаблицаРасчетыСПоставщикамиКредиторскаяЗадолженность, ТаблицаРасчетыСПоставщикамиДебиторскаяЗадолженность,
							Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)

	
	//УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, ложь);

КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	//ДобавитьПрефиксУзла(Префикс);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	//РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Организация,
	//														|КонтрагентДебитор,
	//														|КонтрагентКредитор",
	//														Организация,
	//														КонтрагентДебитор,
	//														КонтрагентКредитор));
КонецПроцедуры

Процедура УравнятьСуммыДебиторскойИКредиторскойЗадолженности()  Экспорт
	
	СтрокиДебиторки = СуммыДолга.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	СтрокиКредиторки = СуммыДолга.найтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
	СуммаДебиторки=0;
	СуммаКредиторки=0;
	
	Для каждого СтрокаДебиторки из СтрокиДебиторки Цикл
		СуммаДебиторки=СуммаДебиторки +  СтрокаДебиторки.Сумма; 
	КонецЦикла;	
	
	Для каждого СтрокаКредиторки из СтрокиКредиторки Цикл
		СуммаКредиторки=СуммаКредиторки+СтрокаКредиторки.Сумма; 
	КонецЦикла;	
	
	СуммаКорректировкиДолга = Макс ( Мин(СуммаДебиторки,СуммаКредиторки), 0);
	
	
	Если СуммаКорректировкиДолга=0 Тогда
		СтрокиДебиторки.Очистить();
		СтрокиКредиторки.Очистить();
		#Если Клиент тогда
			Если СуммаДебиторки>0 тогда
				сигнал();Ответ  = КодВозвратаДиалога.Нет;
				Если Вопрос("Уравнять Дебет.сумму "+Формат(СуммаДебиторки,"ЧДЦ=2")+" с нулевой суммой Кредита?
					|Это приведет к Очистке всей таблицы?",РежимДиалогаВопрос.ДаНет,30,Ответ,"Очистка таблицы")=КодВозвратаДиалога.Да тогда
					СуммыДолга.Очистить();
				КонецЕсли;	 
				
			иначеЕсли СуммаКредиторки>0 тогда
				сигнал(); Ответ = КодВозвратаДиалога.Нет;
				Если Вопрос("Уравнять Кредит.сумму "+Формат(СуммаКредиторки,"ЧДЦ=2")+" с нулевой суммой Дебета?
					|Это приведет к Очистке всей таблицы?",РежимДиалогаВопрос.ДаНет,30,Ответ,"Очистка таблицы")=КодВозвратаДиалога.Да тогда
					СуммыДолга.Очистить();
				КонецЕсли;	 
			КонецЕсли;	 
		#КонецЕсли
	Иначе
		Если СуммаКорректировкиДолга<СуммаДебиторки Тогда /// уменьшаем дебиторскую задолженность
			пока СуммаДебиторки > СуммаКорректировкиДолга Цикл
				ТекСтрока = СтрокиДебиторки[СтрокиДебиторки.Количество()-1];
				Если СуммаКорректировкиДолга<СуммаДебиторки-ТекСтрока.Сумма Тогда
					СуммаДебиторки = СуммаДебиторки-ТекСтрока.Сумма;
					СтрокиДебиторки.Удалить(СтрокиДебиторки.Количество()-1);
					СуммыДолга.Удалить(ТекСтрока);
				иначе
					ТекСтрока.Сумма = ТекСтрока.Сумма- (СуммаДебиторки-СуммаКорректировкиДолга);
					ТекСтрока.СуммаУпр = ТекСтрока.Сумма*ТекСтрока.КурсВзаиморасчетов;
					СуммаДебиторки = СуммаДебиторки-(СуммаДебиторки-СуммаКорректировкиДолга);
				конецЕсли;	
			конецЦикла;
		иначе //уменьшаем кредиторскую задолженость
			пока СуммаКредиторки > СуммаКорректировкиДолга Цикл
				ТекСтрока = СтрокиКредиторки[СтрокиКредиторки.Количество()-1];
				Если СуммаКорректировкиДолга<СуммаКредиторки-ТекСтрока.Сумма Тогда
					СуммаКредиторки = СуммаКредиторки-ТекСтрока.Сумма;
					СтрокиКредиторки.Удалить(СтрокиКредиторки.Количество()-1);
					СуммыДолга.Удалить(ТекСтрока);
				иначе
					ТекСтрока.Сумма = ТекСтрока.Сумма- (СуммаКредиторки-СуммаКорректировкиДолга);
					ТекСтрока.СуммаУпр = ТекСтрока.Сумма*ТекСтрока.КурсВзаиморасчетов;
					СуммаКредиторки = СуммаКредиторки-(СуммаКредиторки-СуммаКорректировкиДолга);
				конецЕсли;	
			конецЦикла;
		конецЕсли;	
		//// а теперь Дебиторку распределим по курсам Кредиторки (только для валютных)
		//Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		//	Если СтрокиДебиторки.Количество() = 1 И НЕ ЗначениеЗаполнено(СтрокиДебиторки[0].Сделка) Тогда
		//		Для каждого строка из СтрокиКредиторки Цикл
		//		   Строка.КурсВзаиморасчетов= СтрокиДебиторки[0].КурсВзаиморасчетов;
		//		   Строка.СуммаУпр = Строка.Сумма*Строка.КурсВзаиморасчетов;
		//		конецЦикла;
		//	Иначе
		//		сч=0;
		//		Пока сч < СтрокиКредиторки.Количество() Цикл
		//			СуммаРаспределяемая = СтрокиКредиторки[сч].Сумма;
		//			Пока СуммаРаспределяемая <> 0 Цикл
		//				Если СуммаРаспределяемая >=  СтрокиДебиторки[0].сумма  Тогда
		//					СтрокиДебиторки[0].КурсВзаиморасчетов= СтрокиКредиторки[сч].КурсВзаиморасчетов;
		//					СтрокиДебиторки[0].СуммаУпр = СтрокиКредиторки[0].Сумма*СтрокиКредиторки[0].КурсВзаиморасчетов;
		//					СуммаРаспределяемая = суммаРаспределяемая-СтрокиКредиторки[0].Сумма;
		//					СтрокиКредиторки.Удалить(0);
		//				иначе
		//					НоваяСтрока= СуммыДолга.Добавить();
		//					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокиКредиторки[0]);
		//					СтрокиКредиторки[0].Сумма =СуммаРаспределяемая; 
		//					СтрокиКредиторки[0].КурсВзаиморасчетов= СтрокиДебиторки[сч].КурсВзаиморасчетов;
		//					СтрокиКредиторки[0].СуммаУпр = СтрокиКредиторки[0].Сумма*СтрокиКредиторки[0].КурсВзаиморасчетов;
		//					НоваяСтрока.Сумма = НоваяСтрока.Сумма-СуммаРаспределяемая;
		//					НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма*НоваяСтрока.КурсВзаиморасчетов;
		//					СтрокиКредиторки[0] = НоваяСтрока;
		//					СуммаРаспределяемая=0;
		//				КонецЕсли;
		//			конецЦикла;
		//			сч=сч+1;	   
		//		конецЦикла;
		//	КонецЕсли;
		//КонецЕсли;
		// а теперь Кредиторку распределим по курсам Дебиторки (только для валютных)  (решили для всех случаев)
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			сч=0;
			Пока сч < СтрокиДебиторки.Количество() Цикл
				СуммаРаспределяемая = СтрокиДебиторки[сч].Сумма;
				Пока СуммаРаспределяемая <> 0 Цикл
					Если СуммаРаспределяемая >=  СтрокиКредиторки[0].сумма  Тогда
						СтрокиКредиторки[0].КурсВзаиморасчетов= СтрокиДебиторки[сч].КурсВзаиморасчетов;
						СтрокиКредиторки[0].СуммаУпр = СтрокиКредиторки[0].Сумма*СтрокиКредиторки[0].КурсВзаиморасчетов;
						СуммаРаспределяемая = суммаРаспределяемая-СтрокиКредиторки[0].Сумма;
						СтрокиКредиторки.Удалить(0);
					иначе
						НоваяСтрока= СуммыДолга.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокиКредиторки[0]);
						СтрокиКредиторки[0].Сумма =СуммаРаспределяемая; 
						СтрокиКредиторки[0].КурсВзаиморасчетов= СтрокиДебиторки[сч].КурсВзаиморасчетов;
						СтрокиКредиторки[0].СуммаУпр = СтрокиКредиторки[0].Сумма*СтрокиКредиторки[0].КурсВзаиморасчетов;
						НоваяСтрока.Сумма = НоваяСтрока.Сумма-СуммаРаспределяемая;
						НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма*НоваяСтрока.КурсВзаиморасчетов;
						СтрокиКредиторки[0] = НоваяСтрока;
						СуммаРаспределяемая=0;
					КонецЕсли;
				конецЦикла;
				сч=сч+1;	   
			конецЦикла;
		КонецЕсли;
	
	КонецЕсли;	 
	
КонецПроцедуры	

Функция ПолучитьПользователейНаправленияПродаж(Пользователь)
	Запрос = новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Пользователи.Ссылка
	             |ИЗ
	             |	Справочник.Пользователи КАК Пользователи
	             |ГДЕ
	             |	Пользователи.НаправлениеПродаж = &НаправлениеПродаж";
				 Запрос.УстановитьПараметр("НаправлениеПродаж",Пользователь.НаправлениеПродаж);
				 Рез = Запрос.Выполнить().Выгрузить();
				 Возврат Рез;
КонецФункции


мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь;