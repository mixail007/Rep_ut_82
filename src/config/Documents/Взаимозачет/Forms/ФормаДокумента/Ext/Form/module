////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтражатьВРегламентированномУчете;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга,ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолгаУменьшение,ЭлементыФормы.КоманднаяПанельСуммыДолгаУменьшение.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры



//Очищает табличную часть документа при смене контрагента, организации
Процедура ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, ОбъектСравнения, ТекстВопроса, СтандартнаяОбработка)
	Если СуммыДолга.Количество() > 0
	   И СуммыДолга[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммыДолга.Очистить();
		Иначе  
			//Отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()

	Колонки                = ЭлементыФормы.СуммыДолга.Колонки;
	КолонкиУменьшениеДолга = ЭлементыФормы.СуммыДолгаУменьшение.Колонки;
	
	//Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

	//	ЭлементыФормы.КонтрагентКредитор.Видимость                         = Истина;
	//	ЭлементыФормы.НадписьКонтрагентКредитор.Видимость                  = Истина;
	//	ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Дебитор";
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
	//	ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Взаиморасчеты";
	//	ЭлементыФормы.ДоговорКонтрагента.Видимость                         = Истина;
	//	ЭлементыФормы.НадписьДоговорКонтрагента.Видимость                  = Истина;
	//	ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
	//			
	//	УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Истина);
	//	
	//Иначе

		
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности или 
		ВидОперации =Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета  Тогда
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Истина;
			ЭлементыФормы.ДоговорКонтрагентаКредитора.Видимость            = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагент.Заголовок                      = "Дебитор:";
			ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьОстаткамиПоВзаиморасчетам.Доступность = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал  Тогда
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Ложь;
			ЭлементыФормы.ДоговорКонтрагентаКредитора.Видимость            = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагентаКредитора.Видимость     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагентаКредитора.Заголовок     = "ДоговорКт";
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Заголовок              = "ДоговорДт";
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Ложь;
			ЭлементыФормы.НадписьКонтрагент.Заголовок                      = "Контрагент:";
			ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьОстаткамиПоВзаиморасчетам.Доступность = Ложь;
		Иначе
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Ложь;
			ЭлементыФормы.ДоговорКонтрагентаКредитора.Видимость            = Ложь;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость           = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость             		= Истина;
			ЭлементыФормы.НадписьДоговорКонтрагентаКредитора.Видимость    = Ложь;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Ложь;
			ЭлементыФормы.НадписьКонтрагент.Заголовок                      = "Контрагент:";
			ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьОстаткамиПоВзаиморасчетам.Доступность = Истина;

		КонецЕсли;

		
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Долг клиенту";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Заголовок    =  "Долг фирме";
		
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;

		УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Ложь);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.ВидЗадолженности,  Ложь);

		//+++(
		Если ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) тогда
			ВидимостьСтУпрВал = (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета);
		иначе
			ВидимостьСтУпрВал = Ложь; // и так в рублях
		КонецЕсли;	
		УстановитьВидимостьКолонкиТабЧасти(Колонки.КурсВзаиморасчетов,  ВидимостьСтУпрВал);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.КурсВзаиморасчетов,  ВидимостьСтУпрВал);

        УстановитьВидимостьКолонкиТабЧасти(Колонки.Валюта,  ВидимостьСтУпрВал);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.Валюта,  ВидимостьСтУпрВал);

		УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаУпр,  ВидимостьСтУпрВал);
		УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СуммаУпр,  ВидимостьСтУпрВал);
        //+++)
		


		
	//КонецЕсли;
	ВывестиНадписи();
	//УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаРасчетов, ОтражатьВБухгалтерскомУчете);
	//УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаАвансов,  ОтражатьВБухгалтерскомУчете);
	//
	//УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СчетУчетаРасчетов, ОтражатьВБухгалтерскомУчете);
	//УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СчетУчетаАвансов,  ОтражатьВБухгалтерскомУчете);
	//
	//УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНУ, ОтражатьВНалоговомУчете и ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	//УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СуммаНУ, ОтражатьВНалоговомУчете и ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь,,,ПараметрОбъектКопирования,ПараметрОснование);
        ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Взаимозачет");
        ВидОперации=Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
		УстановитьНомерДокумента(ЭтотОбъект);
		
		//+++ 22.10.2015 - принудительное выключение ТОЛЬКО ДЛЯ НОВЫХ ДОКУМЕНТОВ ДЛЯ ВСЕХ 
		ОтражатьВБухгалтерскомУчете = ЛОЖЬ;
		ОтражатьВНалоговомУчете = ЛОЖЬ;
	КонецЕсли;
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	//СтруктураКолонок.Вставить("Валюта"); //+++ не может?
	// СтруктураКолонок.Вставить("КурсВзаиморасчетов"); //+++ не может?

	УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;

	// Установить видимость элементов
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВывестиНадписи();
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	ЭлементыФормы.УчитыватьДляРасчетаПремии.Доступность=РольДоступна("МенеджерПоВзаимозачетам");
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)

	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если ЗначениеНеЗаполнено(КонтрагентКредитор) Тогда
			Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		// Заполняется и дебиторская, и кредиторская задолженность
		
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		
	//	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
		
	Иначе
	
		// Заполняется только кредиторская задолженность
		//СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		//
		//Если СтрокиКредиторскойЗадолженности.Количество() > 0 Тогда
		//	
		//	ТекстВопроса = "Перед заполнением - строки кредиторской задолженности будут очищены. Заполнить?";
		//	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		//	Если Ответ <> КодВозвратаДиалога.Да Тогда
		//		Возврат;
		//	КонецЕсли; 
		//	
		//	Для каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
		//		СуммыДолга.Удалить(СтрокаТабличнойЧасти);
		//	КонецЦикла;
		//	
		//КонецЕсли;
		//
		//ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		//
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		//
		//ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();

	КонецЕсли; 

	ВывестиНадписи();//!!!!
	
КонецПроцедуры // КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам()

Процедура КоманднаяПанельСуммыДолгаУменьшениеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)
	
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	// Заполняется только дебиторская задолженность
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
	Если СтрокиДебиторскойЗадолженности.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением строки дебиторской задолженности будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого СтрокаТабличнойЧасти Из СтрокиДебиторскойЗадолженности Цикл
			СуммыДолга.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
	
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	ВывестиНадписи();//!!!!
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
		ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию("USD");
	КонецЕсли;	
	
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
    //УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Организация", 
						   "При смене организации табличная часть будет очищена. Продолжить?", СтандартнаяОбработка); 
						   
КонецПроцедуры // ОрганизацияОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента.
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Владелец", 
						   "При смене контрагента табличная часть будет очищена. Продолжить?", СтандартнаяОбработка);
	
КонецПроцедуры // КонтрагентОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	// Перезаполним Юр./Физ. лицо.
	Если ЕстьРеквизитДокумента("ЮрФизЛицоКонтрагента", МетаданныеДокумента)Тогда
		ЮрФизЛицоКонтрагента = Элемент.Значение.ОсновноеЮрФизЛицо;
	КонецЕсли; 

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ДоговорКонтрагента=ПолучитьОсновнойДоговорКонтрагента(Элемент.Значение);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Если Элемент.Имя = "КонтрагентКредитор" тогда
		ДокументОбъект.ДоговорКонтрагентаКредитора = ДоговорКонтрагента;
		иначе	
		ДокументОбъект.ДоговорКонтрагентаДебитора = ДоговорКонтрагента;
		КонецЕсли;
		ДокументОбъект.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ДокументОбъект.Организация     = ДоговорКонтрагента.Организация;
		
	ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагента.Организация Тогда
		
		Если Элемент.Имя = "КонтрагентКредитор" тогда
			ДокументОбъект.ДоговорКонтрагентаКредитора = ДоговорКонтрагента;
		иначе	
			ДокументОбъект.ДоговорКонтрагентаДебитора = ДоговорКонтрагента;
		КонецЕсли;
		ДокументОбъект.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	    ДокументОбъект.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	Иначе
		Если Элемент.Имя = "КонтрагентКредитор" тогда
			ДокументОбъект.ДоговорКонтрагентаКредитора = Неопределено;
		иначе	
			ДокументОбъект.ДоговорКонтрагентаДебитора = Неопределено; // Очистить старый договор
		КонецЕсли;
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
		КонтрагентКредитор= КонтрагентДебитор;
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию("USD");
	конецЕсли;	
	
	УстановитьВидимостьВалют(ДокументОбъект.ВалютаДокумента); //+++ 27.07.2011
	
	// Могли поменять договор.
	//ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода корр счета.
//

// Процедура - обработчик события "ПриИзменении" поля Отражать в НУ.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Субконто1
//

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)

	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
		НоваяСтрока = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
		НоваяСтрока.Сделка = Неопределено;
   //+++  "обнуляем" курс и валюту
		НоваяСтрока.Валюта                  	  =  мВалютаРегламентированногоУчета;
		НоваяСтрока.КурсВзаиморасчетов            = 1.0000;
		НоваяСтрока.СуммаУпр                   = НоваяСтрока.Сумма;
		
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении(Элемент)

	//  Для сделки нет значения по умолчанию в договоре, поэтому заполняем ее пустым значением.
	ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные.Сделка = Неопределено;

	//+++ Курс надо тоже заполнить
	стр1 = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	стр1.Валюта = Элемент.Значение.ВалютаВзаиморасчетов;
	стр1.КурсВзаиморасчетов = 1;
	стр1.СуммаУпр = стр1.Сумма;
	
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Контрагент = Элемент.Значение.Владелец;
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолга.ТекущаяКолонка = ЭлементыФормы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателяСезонный"].Имя, Метаданные.Документы["ЗаказПокупателяСезонный"].Представление());
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе  
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["НачислениеПени"].Имя,        Метаданные.Документы["НачислениеПени"].Представление());

			
			// } Лапенков 20080806 
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя,        Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			
			// } Лапенков 20080806 

		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	Если ТипДокументаСделки <> "ЗаказПокупателяСезонный" Тогда 
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаУменьшениеСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолгаУменьшение.ТекущаяКолонка = ЭлементыФормы.СуммыДолгаУменьшение.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателяСезонный"].Имя, Метаданные.Документы["ЗаказПокупателяСезонный"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя,        Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
            СписокТипов.Добавить( Метаданные.Документы["НачислениеПени"].Имя,        Метаданные.Документы["НачислениеПени"].Представление());
			// } Лапенков 20080806 

		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоПрессФормам"].Имя,        Метаданные.Документы["ЗаказПоПрессФормам"].Представление());
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
		//	СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
		//	СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
			// { Лапенков 20080806 -- добавлено, чтобы можно было делать взаимозачеты по расчетным документам
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровОтПокупателя"].Имя,        Метаданные.Документы["ВозвратТоваровОтПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ВозвратТоваровПоставщику"].Имя,        Метаданные.Документы["ВозвратТоваровПоставщику"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеДопРасходов"].Имя,        Метаданные.Документы["ПоступлениеДопРасходов"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПоступлениеТоваровУслуг"].Имя,        Метаданные.Документы["ПоступлениеТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РеализацияТоваровУслуг"].Имя,        Метаданные.Документы["РеализацияТоваровУслуг"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["КорректировкаДолга"].Имя,        Метаданные.Документы["КорректировкаДолга"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,        Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,        Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,        Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
			
			// } Лапенков 20080806 

		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	Если ТипДокументаСделки <> "ЗаказПокупателяСезонный" Тогда
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	    ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
    КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаУменьшениеСделкаНачалоВыбора()


// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаАвансов.
//
Процедура СуммыДолгаСчетУчетаАвансовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = КонтрагентДебитор;
	Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор;
		Иначе
			Контрагент = КонтрагентДебитор;
		КонецЕсли;
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;

	Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = КонтрагентДебитор
	Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор
		Иначе
			Контрагент = КонтрагентДебитор
		КонецЕсли;
	КонецЕсли;

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ВывестиНадписи() 
	
	//ТабСумм         = СуммыДолга.Выгрузить();
	//ТабКредиторская = ТабСумм.Скопировать();
	//Сч = 0;
	//Пока Сч < ТабКредиторская.Количество() Цикл
	//	СтрокаТаблицы = ТабКредиторская.Получить(Сч);
	//	Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
	//		ТабКредиторская.Удалить(СтрокаТаблицы);
	//	Иначе 
	//		Сч = Сч + 1;
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//ТабДебиторская = ТабСумм.Скопировать();
	//Сч = 0;
	//Пока Сч < ТабДебиторская.Количество() Цикл
	//	СтрокаТаблицы = ТабДебиторская.Получить(Сч);
	//	Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
	//		ТабДебиторская.Удалить(СтрокаТаблицы);
	//	Иначе 
	//		Сч = Сч + 1;
	//	КонецЕсли; 
	//КонецЦикла;
	//
	////+++(
	//СуммаКред = ТабКредиторская.Итог("СуммаУпр");   //Сумма заменена на СуммаУпр в мВалютаРегламентированногоУчета!!!
	//СуммаКред = ?(СуммаКред=0, ТабКредиторская.Итог("Сумма"), СуммаКред);   //для старых документов

	//СуммаДеб  = ТабДебиторская.Итог("СуммаУпр");
	//СуммаДеб  = ?(СуммаДеб=0, ТабДебиторская.Итог("Сумма"), СуммаДеб);   //для старых документов
   СуммаКред=0;
   СуммаДеб=0;
   СуммаКредУпр =0;
   СуммаДебУпр = 0;
	Для каждого стр из суммыДолга Цикл
		Если стр.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			СуммаКред = СуммаКред+стр.Сумма;
			СуммаКредУпр = СуммаКредУпр + стр.СуммаУпр;
		иначе
			СуммаДеб = СуммаДеб+стр.Сумма;
			СуммаДебупр = СуммаДебУпр + стр.СуммаУпр;
		конецЕсли;
	конецЦикла;	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
	Разница = СуммаДебУпр - СуммаКредУпр;
	иначе	   
	Разница = СуммаДеб - СуммаКред;
	конецЕсли;
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента)+?(ВалютаДокумента<> мВалютаРегламентированногоУчета," ("+Формат(СуммаДебУпр, "ЧЦ=15;ЧДЦ=2")+" руб)","");
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15;ЧДЦ=2") +" " + Строка(ВалютаДокумента)+?(ВалютаДокумента<> мВалютаРегламентированногоУчета," ("+Формат(СуммаКредУпр, "ЧЦ=15;ЧДЦ=2")+" руб)","");;
							
	Если Разница = 0 Тогда//И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = "ВЗАИМОЗАЧЕТ";
		ЭлементыФормы.НадписьВзаимозачет.ЦветТекста = WebЦвета.Черный;  
		Если СуммаДеб<>0 тогда
		ЭлементыФормы.НадписьВзаимозачет.ЦветТекста = WebЦвета.Зеленый;
		КонецЕсли;	
	Иначе
		Если Разница>0 тогда
			//	"Дебит. "
		ЭлементыФормы.НадписьВзаимозачет.ЦветТекста = WebЦвета.Синий; стр1="Дт.";
		иначе
			//"Кредит. "
		ЭлементыФормы.НадписьВзаимозачет.ЦветТекста = WebЦвета.Красный; стр1="Кт.";
	    КонецЕсли;	
	
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = стр1+"Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2") +" " 
														 + Строка(ВалютаДокумента);
	КонецЕсли;
    //+++)
	
КонецПроцедуры



// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолга"
//
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности   = Перечисления.ВидыЗадолженности.Кредиторская; //наша перед Дебитором
		Если не Копирование и ЗначениеЗаполнено(ЭлементыФормы.ДоговорКонтрагента.Значение) тогда
		Элемент.ТекущиеДанные.ДоговорКонтрагента = ЭлементыФормы.ДоговорКонтрагента.Значение;//+++
		Элемент.ТекущиеДанные.Валюта = ЭлементыФормы.ДоговорКонтрагента.Значение.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолгаУменьшение"
//
Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;//наша
		Если не Копирование  и ЗначениеЗаполнено(ЭлементыФормы.ДоговорКонтрагентаКредитора.Значение) тогда
		Элемент.ТекущиеДанные.ДоговорКонтрагента = ЭлементыФормы.ДоговорКонтрагентаКредитора.Значение;//+++
		Элемент.ТекущиеДанные.Валюта = ЭлементыФормы.ДоговорКонтрагентаКредитора.Значение.ВалютаВзаиморасчетов;
		КонецЕсли;
 	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры


 
Процедура ОбновлениеОтображения()
	ВывестиНадписи();
КонецПроцедуры


Процедура ОсновныеДействияФормыДействиеУравнятьСуммы(Кнопка)
	
	УравнятьСуммыДебиторскойИКредиторскойЗадолженности();
	ВывестиНадписи();//!!!!
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОчистить(Кнопка)
	  СуммыДолга.Очистить();
КонецПроцедуры

//+++ процедуры пересчета валюты
Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	НоваяСтрока = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	НоваяСтрока.Валюта  = НоваяСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ВидОперации= Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал и НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда	
	НоваяСтрока.курсВзаиморасчетов = 1;
    иначеЕсли ВидОперации= Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
	 НоваяСтрока.Сумма =?(НоваяСтрока.КурсВзаиморасчетов<>0,НоваяСтрока.СуммаУпр/ НоваяСтрока.КурсВзаиморасчетов,0);
	конецЕсли;
	//+++ 27.07.2011 - возможность 0 курса или 0 суммы в USD при ненулевой сумме в Руб. !!!
	//НоваяСтрока.КурсВзаиморасчетов    = ?(НоваяСтрока.КурсВзаиморасчетов=0,НоваяСтрока.Сделка.КурсВзаиморасчетов, НоваяСтрока.КурсВзаиморасчетов);
	Если НоваяСтрока.Сумма<>0 и НоваяСтрока.КурсВзаиморасчетов<>0 тогда
		НоваяСтрока.СуммаУпр = НоваяСтрока.Сумма * НоваяСтрока.КурсВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммыДолгаСделкаПриИзменении(Элемент)
		НоваяСтрока = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
//+++  не у всех документов Сделка есть КурсВзаиморасчетов
		Если ЗначениеЗаполнено( НоваяСтрока.Сделка ) тогда
		НоваяСтрока.Валюта             	  = НоваяСтрока.Сделка.ВалютаДокумента;
		НоваяСтрока.Сумма                 = ?(НоваяСтрока.Сумма=0, НоваяСтрока.Сделка.СуммаДокумента, НоваяСтрока.Сумма);
		НоваяСтрока.КурсВзаиморасчетов    = НоваяСтрока.Сделка.КурсВзаиморасчетов;//по курсу документа!
		НоваяСтрока.СуммаУпр              = НоваяСтрока.Сделка.КурсВзаиморасчетов * НоваяСтрока.Сумма;
		
		НоваяСтрока.ДоговорКонтрагента	  = НоваяСтрока.Сделка.ДоговорКонтрагента; //+++ 02.04.2014
		 	Если ДоговорКонтрагентаДебитора <> НоваяСтрока.ДоговорКонтрагента тогда
				Предупреждение("     ВНИМАНИЕ!
				               |В выбранном документе указан договор,
							   |который НЕ СОВПАДАЕТ с договором Контрагента!", 60);
			КонецЕсли;	
		Иначе
			НоваяСтрока.Валюта             	  = справочники.Валюты.НайтиПоКоду(643);
			НоваяСтрока.Сумма                 = 0;
			НоваяСтрока.КурсВзаиморасчетов    = 1;
			НоваяСтрока.СуммаУпр              = 0;
		КонецЕсли;
КонецПроцедуры

Процедура СуммыДолгаСуммаВВалютеПриИзменении(Элемент)
	//обратное значение суммы из валюты по курсу
		НоваяСтрока = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
		//есть возможность 0р. и не ноль долларов!
		НоваяСтрока.Сумма = ?(НоваяСтрока.СуммаУпр=0, НоваяСтрока.Сумма, ?(НоваяСтрока.КурсВзаиморасчетов=0, НоваяСтрока.Сумма, НоваяСтрока.СуммаУпр/НоваяСтрока.КурсВзаиморасчетов) );
		Если ВидОперации= Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал и НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда	
		НоваяСтрока.курс = 1;
		НоваяСтрока.Сумма = НоваяСтрока.СуммаУпр;
		конецЕсли;
	КонецПроцедуры

//-------------------------
Процедура СуммыДолгаУменьшениеСуммаПриИзменении(Элемент)
	НоваяСтрока = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	
	//04.02.2014
	Если ЗначениеЗаполнено(НоваяСтрока.Сделка) тогда
		НоваяСтрока.Валюта   = НоваяСтрока.Сделка.ВалютаДокумента;
		//+++ 27.07.2011 - возможность 0 курса работает в обратнуб сторону... 
		//если  суммы в USD при ненулевой сумме в Руб. !!!
		НоваяСтрока.КурсВзаиморасчетов  = ?(НоваяСтрока.КурсВзаиморасчетов=0, НоваяСтрока.Сделка.КурсВзаиморасчетов, НоваяСтрока.КурсВзаиморасчетов);
	Иначе
		НоваяСтрока.Валюта   = справочники.Валюты.НайтиПоКоду(643); //руб.
		НоваяСтрока.КурсВзаиморасчетов  = 1;
	КонецЕсли;
	
	Если НоваяСтрока.Сумма<>0 и НоваяСтрока.КурсВзаиморасчетов<>0 тогда
		НоваяСтрока.СуммаУпр = НоваяСтрока.КурсВзаиморасчетов * НоваяСтрока.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммыДолгаУменьшениеСделкаПриИзменении(Элемент)
		НоваяСтрока = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
//+++  не у всех документов Сделка есть КурсВзаиморасчетов
		Если ЗначениеЗаполнено(НоваяСтрока.Сделка) тогда
			НоваяСтрока.Валюта             	  = НоваяСтрока.Сделка.ВалютаДокумента;
			НоваяСтрока.Сумма                 = ?(НоваяСтрока.Сумма=0, НоваяСтрока.Сделка.СуммаДокумента, НоваяСтрока.Сумма);
			НоваяСтрока.КурсВзаиморасчетов    = НоваяСтрока.Сделка.КурсВзаиморасчетов;//по курсу документа!
			НоваяСтрока.СуммаУпр              = НоваяСтрока.Сделка.КурсВзаиморасчетов * НоваяСтрока.Сумма;
			НоваяСтрока.ДоговорКонтрагента	  = НоваяСтрока.Сделка.ДоговорКонтрагента; //04.02.2014
			Если не (ДоговорКонтрагентаДебитора = НоваяСтрока.ДоговорКонтрагента 
				    или ДоговорКонтрагентаКредитора = НоваяСтрока.ДоговорКонтрагента )тогда
				Предупреждение("     ВНИМАНИЕ!
				               |В выбранном документе указан договор,
							   |который НЕ СОВПАДАЕТ с договором Контрагента или Кредитора!", 60);
			КонецЕсли;				   
		Иначе   
			НоваяСтрока.Валюта	  = справочники.Валюты.НайтиПоКоду(643);
			НоваяСтрока.Сумма	  = 0;
			НоваяСтрока.КурсВзаиморасчетов    = 1;
			НоваяСтрока.СуммаУпр  = 0;
		КонецЕсли;	
КонецПроцедуры

Процедура СуммыДолгаУменьшениеСуммаУпрПриИзменении(Элемент)
	//обратное значение суммы из валюты по курсу
		НоваяСтрока = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
		//есть возможность 0р. и не ноль долларов!
		НоваяСтрока.Сумма = ?(НоваяСтрока.СуммаУпр=0, НоваяСтрока.Сумма, ?(НоваяСтрока.КурсВзаиморасчетов=0, НоваяСтрока.Сумма, НоваяСтрока.СуммаУпр/НоваяСтрока.КурсВзаиморасчетов) );
	Если ВидОперации= Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал и НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда	
	НоваяСтрока.курсВзаиморасчетов = 1;
	НоваяСтрока.Сумма = НоваяСтрока.СуммаУпр;
    иначеЕсли ВидОперации= Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
	  НоваяСтрока.Сумма =?(НоваяСтрока.КурсВзаиморасчетов<>0,НоваяСтрока.СуммаУпр/ НоваяСтрока.КурсВзаиморасчетов,0);
	конецЕсли;

КонецПроцедуры

Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Валюта<>мВалютаРегламентированногоУчета тогда
	//пересчет, однако влияет на уже проведенные документы!	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорКонтрагентаКредитораПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.ВалютаДокумента = ДоговорКонтрагентаКредитора.ВалютаВзаиморасчетов;
		ДокументОбъект.Организация     = ДоговорКонтрагентаКредитора.Организация;
		
	ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагентаКредитора.Организация Тогда
		
		ДокументОбъект.ВалютаДокумента   = ДоговорКонтрагентаКредитора.ВалютаВзаиморасчетов;
	
	Иначе
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженностиВал Тогда
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.НайтиПоНаименованию("USD");
	конецЕсли;	
	
	ВидимостьСтолбцов = (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета);
	
	ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
	ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
	
	ЭлементыФормы.СуммыДолга.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
	ЭлементыФормы.СуммыДолга.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
	
	ЭлементыФормы.СуммыДолга.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
	ЭлементыФормы.СуммыДолга.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
	

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.ВалютаДокумента = ДоговорКонтрагентаДебитора.ВалютаВзаиморасчетов;
		ДокументОбъект.Организация     = ДоговорКонтрагентаДебитора.Организация;
		
	ИначеЕсли ДокументОбъект.Организация = ДоговорКонтрагентаДебитора.Организация Тогда
		
		ДокументОбъект.ВалютаДокумента   = ДоговорКонтрагентаДебитора.ВалютаВзаиморасчетов;
	
	Иначе
		ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
		ВидимостьСтолбцов = (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета);
		
		ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
        ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
		
		ЭлементыФормы.СуммыДолга.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
        ЭлементыФормы.СуммыДолга.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
		
		ЭлементыФормы.СуммыДолга.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
        ЭлементыФормы.СуммыДолга.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
		

КонецПроцедуры
 
Процедура ОсновныеДействияФормыЗаполнитьОстатками(Кнопка)
	
	Если ЗначениеНеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	// Заполняется и дебиторская, и кредиторская задолженность
		Если (СуммыДолга.Количество() > 0) Тогда
			ТекстВопроса = "Перед заполнением - все табличные части будут очищены. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			СуммыДолга.Очистить();
		КонецЕсли;
 		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		
//-----------------------------------------------------------------------------------------		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
		или ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
			Если ЗначениеНеЗаполнено(КонтрагентКредитор) Тогда
				Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
			
ВывестиНадписи();//!!!!

КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	УстановитьВидимостьВалют(ЭлементыФормы.ВалютаДокумента.Значение);
КонецПроцедуры

//----------------------------------
Процедура УстановитьВидимостьВалют(ВалютаДокумента1=неопределено)
		Если ЗначениеЗаполнено(ВалютаДокумента1) тогда
			ВидимостьСтолбцов = (ВалютаДокумента1 <> мВалютаРегламентированногоУчета);
		иначе
			ВидимостьСтолбцов = ЛОЖЬ;
		КонецЕсли;
		ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
    	ЭлементыФормы.СуммыДолга.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
    	ЭлементыФормы.СуммыДолга.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
		
	ЭлементыФормы.СуммыДолгаУменьшение.Колонки.Валюта.Видимость = ВидимостьСтолбцов;
	ЭлементыФормы.СуммыДолгаУменьшение.Колонки.КурсВзаиморасчетов.Видимость = ВидимостьСтолбцов;
	ЭлементыФормы.СуммыДолгаУменьшение.Колонки.СуммаУпр.Видимость = ВидимостьСтолбцов;
КонецПроцедуры

//+++ 10.02.2014 - отдельная Функция для пересчета
Процедура СуммыДолгаУменьшениеКурсВзаиморасчетовПриИзменении(Элемент)
	
	НоваяСтрока = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	НоваяСтрока.СуммаУпр = ?(НоваяСтрока.КурсВзаиморасчетов=0,НоваяСтрока.СуммаУпр, НоваяСтрока.Сумма * НоваяСтрока.КурсВзаиморасчетов); // прямой пересчет
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)


КонецПроцедуры



