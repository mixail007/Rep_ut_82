Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Добавляет в табличную часть Заказы строки с заказами покупателей, по которым существуют
// остатки в регистре ЗаказыПокупателей.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьЗаказыПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки КАК ЗаказыПокупателейОстатки
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки КАК ВнутренниеЗаказыОстатки
	|ГДЕ
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ ССЫЛКА Документ.ВнутреннийЗаказ";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗаказыПоОстаткам()

Процедура ЗаполнитьЗаказыПоОстаткамНаДатуУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата) КАК ЗаказыПокупателейОстатки
	|
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя";

	Запрос.УстановитьПараметр("Дата",Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗаказыПоОстаткам()

// Добавляет в табличную часть Заказы строки с заказами покупателей, по которым существуют
// остатки в регистре ОстаткиТоваровКомпании, просрочен резерв и не внесена предоплата.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьЗаказыПоПросроченнымРезервамУпр() Экспорт
	// выполняется только для шин 
	
    Выборка=Справочники.ПричиныЗакрытияЗаказов.Выбрать();
	СсылкаПричинаЗакрытия=Выборка.Следующий();
	
	Если ЗначениеНеЗаполнено(СсылкаПричинаЗакрытия) Тогда
		СсылкаПричинаЗакрытия=Справочники.ПричиныЗакрытияЗаказов.ПустаяСсылка();
	КонецЕсли;	
	
	СписокЗаказов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());  // оперативно текущей датой
	Запрос.УстановитьПараметр("Год", ДобавитьМесяц( НачалоДня(ТекущаяДата()), -12) ); //ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
	Запрос.УстановитьПараметр("Д14", НачалоДня(ТекущаяДата()) - 14 *86400);           //ДОБАВИТЬКДАТЕ(&ТекущаяДата,ДЕНЬ,-14)
	
	Запрос.УстановитьПараметр("ФормулаАвто", Справочники.Контрагенты.НайтиПоКоду("92797"));  // оперативно текущей датой
	
	// зависшие заказы по всем товарам более 30 дней без предоплаты
	Запрос.Текст = 
	"	ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток,
	|	ЕстьNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход,0) СуммаОплаченоПоЗаказу // в данном случае равна 0
	//08.06.2017
	|	,ЕстьNULL(ВложенныйЗапрос.КоличествоОстаток,0) КАК КоличествоВРезерве
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки( //&ТекущаяДата
	|	,	
	|	ДоговорКонтрагента.ВидДоговора=Значение(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) И
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов= Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) 
	|   И ЗаказПокупателя.Дата < &Д14
	|	И ЗаказПокупателя.Проверен
	|	И ДоговорКонтрагента.Владелец <>&ФормулаАвто
	|) КАК ЗаказыПокупателейОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|  (ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Сделка,
	|	ВзаиморасчетыСКонтрагентами.СуммаУпрРасход
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты (&Год, ,,
	|	ДоговорКонтрагента.ВидДоговора=Значение(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем) И
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов= Значение(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)) как ВзаиморасчетыСКонтрагентами
	|	ГДЕ ВзаиморасчетыСКонтрагентами.СуммаУпрРасход>0 ) КАК ВзаиморасчетыСКонтрагентамиОбороты
	|	ПО ЗаказыПокупателейОстатки.ЗаказПокупателя=ВзаиморасчетыСКонтрагентамиОбороты.Сделка
	
	  //+++ 08.06.2017  --------- то, что в резерве -------------------------
				  	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			РезервНаСкладахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
					|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
					|		ИЗ
					|			РегистрНакопления.РезервНаСкладах.Остатки(//&ТекущаяДата
					|			, 
				  //=======================Такие же отборы=============================================================	
				  |			ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |		  И ЗаказПокупателя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
				    |   И ЗаказПокупателя.Дата < &Д14
					|	И ЗаказПокупателя.Проверен
					|	И ЗаказПокупателя.Контрагент <> &ФормулаАвто
					|			) КАК РезервНаСкладахОстатки
					|		
					|		СГРУППИРОВАТЬ ПО
					|			РезервНаСкладахОстатки.ЗаказПокупателя
					|		
					|		ИМЕЮЩИЕ
					|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) <> 0) КАК ВложенныйЗапрос
					|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя

	|	ГДЕ ЕстьNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход,0)=0
	
	 // 08.06.2017 - только если нет резерва!
	 |	И ЕстьNULL(ВложенныйЗапрос.КоличествоОстаток,0)=0
	//|	УПОРЯДОЧИТЬ ПО ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата 
	|";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
			НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
			НоваяСтрока.ПричинаЗакрытияЗаказа = СсылкаПричинаЗакрытия;
	КонецЦикла; 


КонецПроцедуры // ЗаполнитьЗаказыПоПросроченнымРезервам()


Процедура ЗаполнитьЗаказыПоПросроченнымРезервамУпрТолькоДиски() Экспорт
	// на диски 14 дней с момента заказа , если заказ неоплачен
//+++ 02.06.2015 - заказы, созданные автокомплектацией (типЗаказа = 1) - держать 1 мес!	
	Выборка=Справочники.ПричиныЗакрытияЗаказов.Выбрать();
	СсылкаПричинаЗакрытия=Выборка.Следующий();
	
	Если ЗначениеНеЗаполнено(СсылкаПричинаЗакрытия) Тогда
		СсылкаПричинаЗакрытия=Справочники.ПричиныЗакрытияЗаказов.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	СписокКонтрагентовБезЗакрытия = Новый СписокЗначений;
	
//+++ 07.08.2017 - по задаче 30313 от Филатовой - отдельный признак у клиента - через сколько закрывать заказы
//                  для некоторых клментов - надо держать резерв больше 7 дней (но максимум до 14!)		
//----------------своё закрытие от 1 до 99 дней и для этих клиентов >> СписокКонтрагентовБезЗакрытия ---------------------
	Запрос7 = Новый Запрос;
	Запрос7.Текст = "ВЫБРАТЬ
	               |	ЗначенияСвойствОбъектов.Объект как Контрагент,
	               |	ЗначенияСвойствОбъектов.Значение как ЧислоДней
				   |ПОМЕСТИТЬ ВТ_Контр
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |ГДЕ
	               |	ЗначенияСвойствОбъектов.Свойство = &Свво
	               |	И ЗначенияСвойствОбъектов.Значение >= 0
	              // |	И ЗначенияСвойствОбъектов.Значение <= 14
				   |;
   	   |////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	вт.Контрагент,
	   |	РазностьДат(ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата, &ТекДата, День) как ЧислоДней,
	   
	   |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	   |	ЗаказыПокупателейОстатки.КоличествоОстаток
	   
	   |ИЗ  ВТ_Контр как ВТ
	   |	ЛЕВОЕ СОЕДИНЕНИЕ
	   |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента.Владелец В (выбрать вт.Контрагент из ВТ_Контр как ВТ) ) КАК ЗаказыПокупателейОстатки
	   |	ПО ВТ.Контрагент = ДоговорКонтрагента.Владелец 
	   |ГДЕ
	   |	ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	   |	И РазностьДат(ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата, &ТекДата, День) > вт.ЧислоДней";
 	  	Запрос7.УстановитьПараметр( "ТекДата", ТекущаяДата() );
 		Свво = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("90252");
		Запрос7.УстановитьПараметр( "Свво", Свво );
		табл7 = Запрос7.Выполнить().Выгрузить();
		для каждого стр7 из табл7 Цикл
			НоваяСтрока = Заказы.Добавить();
			НоваяСтрока.ЗаказПокупателя = стр7.ЗаказПокупателя;
			НоваяСтрока.ПричинаЗакрытияЗаказа = СсылкаПричинаЗакрытия;
		КонецЦикла; 	

	
	//клиенты по которым уже сделали своё закрытие
	табл7.Свернуть("Контрагент");
	СписокКонтрагентовБезЗакрытия = табл7.ВыгрузитьКолонку("Контрагент");
	
//+++)	
	
   	//-----------свои VIP-клиенты--------------------	
	СписокКонтрагентовБезЗакрытия.Добавить(Справочники.Контрагенты.НайтиПоКоду("92705")); //Формула Авто 
	СписокКонтрагентовБезЗакрытия.Добавить(Справочники.Контрагенты.НайтиПоКоду("92797")); //Формула Авто Плюс
	СписокКонтрагентовБезЗакрытия.Добавить(Справочники.Контрагенты.НайтиПоКоду("П004703"));//Резерв для ИМ

	Запрос.УстановитьПараметр("СписокКонтрагентовБезЗакрытия", СписокКонтрагентовБезЗакрытия);  // оперативно текущей датой
	
//---------------------------------------------------------------------------------------------	
//+++ 11.11.2015 - закрываем ВСЕ заказы с неполной предоплатой!
//    через 7 дней !!!   по согласованию с Гороховым, Малышевым 

//16.11.2015, Экспортные, Филиальные заказы 
// 15.03.2016 и по клиентам из спискаКодов14  - закрываются через 2 недели!
   
	
//16.11.2016 --- для сторонних поставщиков определяем по статусу самого заказа------------
	СписокСтатусов = новый СписокЗначений;
	СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.ВОбработке); // есть заказ поставщику
	СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.Подтвержден); // заказ поставщику - отправлен поставщику
	СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.ЧастичноПодтвержен); // заказ поставщику - отправлен, но не всем поставщикам
	СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.ПолученЧастично); // еще не всё приехало от поставщика
	СписокСтатусов.Добавить(перечисления.СтатусыЗаказов.Получен); // всё приехало от поставщика, но еще не отгрузилось 
	запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	//+++ передача дат сразу в запрос, а не расчет внутри запроса понесколько раз
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());  // оперативно текущей датой
	
	месяц3 = ДобавитьМесяц( НачалоДня(ТекущаяДата()), -3);
	запрос.УстановитьПараметр("месяц3",  месяц3);
	
	запрос.УстановитьПараметр("Д7", НачалоДня(ТекущаяДата())  -7  * 86400 );
	запрос.УстановитьПараметр("Д14", НачалоДня(ТекущаяДата()) -14 * 86400 );
	запрос.УстановитьПараметр("Д30", НачалоДня(ТекущаяДата()) -30 * 86400 );
	
   СписокКлиентов14 = новый СписокЗначений();  //по кодам >> на список клиентов
   СписокКлиентов14.Добавить( справочники.Контрагенты.НайтиПоКоду("93980")  );      //Формула ООО 2015
   СписокКлиентов14.Добавить( справочники.Контрагенты.НайтиПоКоду("93187")  );      // Филиал ЗАО ТК "Яршинторг" г. Ростов-на-Дону 
   СписокКлиентов14.Добавить( справочники.Контрагенты.НайтиПоКоду("П000835"));      // Филиал ЗАО ТК "Яршинторг" г.Санкт-Петербург
   СписокКлиентов14.Добавить( справочники.Контрагенты.НайтиПоКоду("94036")  );	   // Обособленное подразд. ЗАО ТК "ЯШТ" г. Екатеринбург
   Запрос.УстановитьПараметр("СписокКлиентов14", СписокКлиентов14);
   Запрос.УстановитьПараметр("КолесаТУТ", Справочники.НаправленияПродаж.НайтиПоКоду("16")); //Колесатут
	
	запрос.текст = "
	|ВЫБРАТЬ
	|	выразить(КатегорииОбъектов.Объект как Документ.ЗаказПокупателя) как Заказ,
	|	КатегорииОбъектов.Категория КАК Категория
	
	|ПОМЕСТИТЬ Категории
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	
	//+++ 17.05.2017 - ТОЛЬКО Категории Заказов и только за 30 дней  (и только проведенные)
	|ГДЕ
	|  КатегорииОбъектов.Объект ССЫЛКА Документ.ЗаказПокупателя
    |и выразить(КатегорииОбъектов.Объект как Документ.ЗаказПокупателя).Дата >= &Месяц3
    |И выразить(КатегорииОбъектов.Объект как Документ.ЗаказПокупателя).Проведен = Истина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ спрПользователи.ссылка 
	
	|ПОМЕСТИТЬ МенеджерыФилиалов
	
	|из справочник.Пользователи как спрПользователи
	|ГДЕ спрПользователи.ОсновноеПодразделение.ОбособленноеПодразделение 
	|	И спрПользователи.ПометкаУдаления = ЛОЖЬ
    //после блокировки - договоры должны переносить на другого!
	|   И спрПользователи.Заблокирован = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	//+++ 08.06.2017 --- за 4-6 сек.  сразу найдём только нужные заказы (а не все!), которые возможно надо закрывать==========
	|ВЫБРАТЬ 
	|ВсеЗаказы.ЗаказПокупателя,
	|ВсеЗаказы.ЗаказПокупателя.Дата как Дата,
	|ВсеЗаказы.ЗаказПокупателя.ДатаОтгрузки как ДатаОтгрузки,
	|ВсеЗаказы.ЗаказПокупателя.Статус как Статус,
	|ВсеЗаказы.ЗаказПокупателя.Резерв3 как Резерв3,
	|ВсеЗаказы.ЗаказПокупателя.Транзит как Транзит,
	|ВсеЗаказы.ЗаказПокупателя.Ошиповка как Ошиповка,
	
	|ВсеЗаказы.ДоговорКонтрагента.Владелец как ДоговорКонтрагентаВладелец,
	|ВсеЗаказы.ДоговорКонтрагента.Владелец.Экспорт как ДоговорКонтрагентаВладелецЭкспорт,
	|ВсеЗаказы.ДоговорКонтрагента.ОтветственноеЛицо как ДоговорКонтрагентаОтветственноеЛицо,
	|ВсеЗаказы.ДоговорКонтрагента.ОтветственноеЛицо.НаправлениеПродаж как ОтветственноеЛицоНаправлениеПродаж,
	|ВсеЗаказы.ДоговорКонтрагента.ТипДоговора как ДоговорКонтрагентаТипДоговора,
	|ВсеЗаказы.ДоговорКонтрагента
	
	//|	, ВсеЗаказы.КоличествоОстаток КАК КоличествоОстаток,
	//|	ВсеЗаказы.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
	
	|ПОМЕСТИТЬ ВТ_Заказы
	|
	|ИЗ РегистрНакопления.ЗаказыПокупателей.Остатки( ,
	|		ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|		И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	|		И НЕ ДоговорКонтрагента.Владелец В (&СписокКонтрагентовБезЗакрытия)
	
	//ВСЕ Закрываемые заказы - "старше" 7 дней		
	|		И ЗаказПокупателя.Дата < &Д7
	
	|     )   как ВсеЗаказы
	
	//БЕРЕМ ТОЛЬКО  заказы, по которым ещё есть Заказанное количество
	
	| ГДЕ  ВсеЗаказы.КоличествоОстаток > 0 или ВсеЗаказы.СуммаВзаиморасчетовОстаток > 0

    |;
	|
	|////////////////////////////////////////////////////////////////////////////////
	| ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	//|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
	
	|	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	
	|	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаОстатокПоЗаказу
	|	, ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) КАК КоличествоВРезерве
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(//&ТекущаяДата
	|		,
// 08.06.2017 - условия на Договоры и ВСЕ заказы - уже есть в ВТ_Заказы!

//============== 08.06.2017 - выборка из ВТ_Заказы общее время 6-7 сек ===========
	| ЗаказПокупателя В
	|( выбрать вт.ЗаказПокупателя из ВТ_Заказы как ВТ
	|				  ГДЕ 
	
//усл I (заказы ФА+) ИЛИ  усл II (заказы не ФА+)
		
	//---- ФА+  30 дней ---------------------------------------------
// усл I = ФА+  и ( ДатаОтгрузки<30 дней или Дата < 30 дней )
	|     ( ВТ.ДоговорКонтрагентаТипДоговора = Значение(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)
	//+++ Королев 31.03.17 Серков: Прошу настроить закрытие заказов покупателей по договорам продажи ФА+ сроком в 30 кал. дней
	|		 И	( ( ВТ.Статус В (&СписокСтатусов) И ВТ.ДатаОтгрузки < &Д30 )
	|			   или (не ВТ.Статус В (&СписокСтатусов)  и ВТ.Дата < &Д30 )
	|			)
	|     )
	
   | ИЛИ
   
	//-----не ФА+ --по разному 7, 14 или 30 дней  -------------------------------------------------------------------
//усл II = усл0 и усл.1 и (усл 2 (не в категориях) или  3(по категориям) )
	
	| (     ВТ.ДоговорКонтрагентаТипДоговора <> Значение(Справочник.ТипыДоговоров.ФормулаАвтоПлюс)

	//усл 1. -------------------- по статусам - 14 дней, иначе 7 дней -------------------
	|  И	(	  (ВТ.Статус В (&СписокСтатусов) И ВТ.ДатаОтгрузки < &Д14)
	|   		  ИЛИ  НЕ ВТ.Статус В (&СписокСтатусов)  
	|		)
	
// и (2 или 3) =========================================
	
	|  И  ( 
//усл 2. --------------НЕ в категориях И (усл 2.1 или усл 2.2)---------------------------------------------------------------
	|     	    (НЕ ВТ.ЗаказПокупателя В (ВЫБРАТЬ Кат.Заказ ИЗ Категории КАК Кат)
	
	//усл 2.1 //Сакулина. Добавила условие на отсутствие галки Ошиповка - 7 дней или со статусом - 14 дней
	|					  И (	(ВТ.Ошиповка = ЛОЖЬ
	|						   И НЕ (ВТ.ДоговорКонтрагентаВладелецЭкспорт
	|								ИЛИ ВТ.ДоговорКонтрагентаВладелец в (&СписокКлиентов14)
	|						        ИЛИ ВТ.ДоговорКонтрагентаОтветственноеЛицо в (выбрать спрФ.ссылка из МенеджерыФилиалов как спрФ)
	//11.07.17 заказы колеса тут через 14 дней
	|						        ИЛИ ВТ.ОтветственноеЛицоНаправлениеПродаж =&КолесаТУТ
	//Смирнов
	|								ИЛИ ВТ.Транзит
	|								ИЛИ ВТ.Резерв3
	|				 	            )
	|				             ) 
	|	                    ИЛИ 
	//усл 2.2  //----------------------------14 дней ------------------------------------------------------
	|			                ( ВТ.Резерв3 = ЛОЖЬ
	
	|						   И ВТ.Дата < &Д14	
	
	|						     И (ВТ.ДоговорКонтрагентаВладелецЭкспорт
	// Сакулина. Добавила условие на отсутствие галки Ошиповка
	|					 	  ИЛИ ВТ.ДоговорКонтрагентаВладелец в (&СписокКлиентов14)
	|						  ИЛИ ВТ.ДоговорКонтрагентаОтветственноеЛицо в (выбрать спрФ.ссылка из МенеджерыФилиалов как спрФ)
	//11.07.17 заказы колеса тут через 14 дней
	|		    		      ИЛИ ВТ.ОтветственноеЛицоНаправлениеПродаж =&КолесаТУТ
	//Смирнов
	|                         ИЛИ ВТ.Ошиповка
	|						  ИЛИ ВТ.Транзит
	|					        )  )
	|             )          ) 
	
//усл 3. ====================В Категориях без Резерв3 - 30 дней! по резерв3 - 3 мес.====================================
	|	 ИЛИ ( 
	//усл 3.1 ---  Плотников 10.05.2017 Заказы у которых установлена категория через 30 дней
	|		   (ВТ.ЗаказПокупателя В (ВЫБРАТЬ Кат.Заказ ИЗ Категории КАК Кат)
	|			И ВТ.Резерв3 = ЛОЖЬ
	|			И ВТ.Дата < &Д30
	|			)
	//усл 3.2 ---  Плотников 24.02.16 Если в заказе отмечено, что резерв 3 месяца, тогда через 90 дней
	|			ИЛИ ( ВТ.Резерв3
	|				 И ВТ.Дата < &Месяц3
	|			  	 )
	|		  ) 
//конец  2 или 3 =========================================
	|	)
	
//конец усл II =========================================
    |  )	
	
//конец ЗаказПокупателя В ()
    | )	
	|) КАК ЗаказыПокупателейОстатки
//====================================================================================================================================	
	
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|			СУММА(-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(//&ТекущаяДата
	|					,
	|					ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|				  И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВзаиморасчетыСКонтрагентамиОстатки.Сделка
	
//==================================================================================================================
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РезервНаСкладахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.РезервНаСкладах.Остатки(//&ТекущаяДата
	|			, 
	//------------сложные отборы тут делать не обязательно... всё равно это Левое соединение ----------------------------		   
	|				ЗаказПокупателя в (выбрать ВТ.ЗаказПокупателя из ВТ_Заказы как ВТ)
	
	|			) КАК РезервНаСкладахОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РезервНаСкладахОстатки.ЗаказПокупателя
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) <> 0) КАК ВложенныйЗапрос
	|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя
	
	|ГДЕ
//+++ 11.11.2015 - закрываем ВСЕ заказы с неполной предоплатой!  по согласованию с Гороховым, Малышевым 
	|	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток > ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0)
	|	И (ЗаказыПокупателейОстатки.КоличествоОстаток > 0 или ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток > 0)
	|
	//08.05.2017 - без резервов и без упорядочивания!
	|	И ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток, 0) = 0
	//|УПОРЯДОЧИТЬ ПО
	//|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата
	|";
  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Заказы.Добавить();
		НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		НоваяСтрока.ПричинаЗакрытияЗаказа = СсылкаПричинаЗакрытия;
	КонецЦикла; 	
	
	//***По интернет-магазинам держим не более 3 рабочих дней
	Запрос = Новый Запрос;
	
	//держим заказы 3 рабочих дня
	НомерДня = ДеньНедели(ТекущаяДата());
	Если НомерДня >=1 И НомерДня <= 3 Тогда
		ЧислоДней = -5;
	ИначеЕсли НомерДня >=4 И НомерДня <= 6 Тогда
		ЧислоДней = -3;
	ИначеЕсли НомерДня = 7 Тогда
		ЧислоДней = -4;
	Иначе
		ЧислоДней = -9;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());  // оперативно текущей датой
	Запрос.УстановитьПараметр("ДнейЗакрытия", НачалоДня(ТекущаяДата()) + ЧислоДней*86400);
	Запрос.УстановитьПараметр("Год",          ДобавитьМесяц( НачалоДня(ТекущаяДата()), -12) ); //ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
	
	//+++ 24.02.16 Плотников (Закрываем Ярославские заказы из Инернета, ТипЗаказа = 4, FTP)
	Запрос.Текст ="ВЫБРАТЬ
	              |	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	              |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Контрагент,
	              |	ЗаказыПокупателейОстатки.КоличествоОстаток,
	              |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход, 0) КАК СуммаОплаченоПоЗаказу,
				  |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток,0) как  КоличествоВРезерве
	              |ИЗ
	              |	РегистрНакопления.ЗаказыПокупателей.Остатки( //&ТекущаяДата
				  |		,
	              |			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
	              |				И ЗаказПокупателя.Проверен
				  |             И ЗаказПокупателя.Дата < &ДнейЗакрытия
				  
				  |				И ЗаказПокупателя.ТипЗаказа = 4
				  
				 	//+++ 07.08.17 - исключаем заказы для менеджеров Филиалов  
				  |				И ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение=ЛОЖЬ
				  
				  |				И ЗаказПокупателя.Транзит = Ложь) КАК ЗаказыПокупателейОстатки
	              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              |			ВзаиморасчетыСКонтрагентамиОбороты.Сделка КАК Сделка,
	              |			ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход КАК СуммаУпрРасход
	              |		ИЗ
	              |			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты( &Год, , 	,
	              |					ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |						И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)) КАК ВзаиморасчетыСКонтрагентамиОбороты
	              |		ГДЕ
	              |			ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход > 0) КАК ВзаиморасчетыСКонтрагентамиОбороты
	              |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВзаиморасчетыСКонтрагентамиОбороты.Сделка
				  
				  //+++ 08.06.2017  --------- то, что в резерве -------------------------
				  	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			РезервНаСкладахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
					|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
					|		ИЗ
					|			РегистрНакопления.РезервНаСкладах.Остатки(//&ТекущаяДата
					|			, 
				  //=======================Такие же отборы=============================================================	
				  |			ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	              |				И ЗаказПокупателя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
				  |				И ЗаказПокупателя.Проверен
				  |             И ЗаказПокупателя.Дата < &ДнейЗакрытия
				  |				И ЗаказПокупателя.ТипЗаказа = 4
				  
				  //+++ 07.08.17 - исключаем заказы для менеджеров Филиалов  
				  |				И ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение.ОбособленноеПодразделение=ЛОЖЬ
				  
				  |				И ЗаказПокупателя.Транзит = Ложь
					
					|			) КАК РезервНаСкладахОстатки
					|		
					|		СГРУППИРОВАТЬ ПО
					|			РезервНаСкладахОстатки.ЗаказПокупателя
					|		
					|		ИМЕЮЩИЕ
					|			СУММА(РезервНаСкладахОстатки.КоличествоОстаток) <> 0) КАК ВложенныйЗапрос
					|		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ВложенныйЗапрос.ЗаказПокупателя

	              |ГДЕ
	              |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрРасход, 0) = 0
				   |
				  //08.06.2017 - только если нет резервов и БЕЗ сортировки!
				  |	И  	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОстаток,0)=0
	             //|УПОРЯДОЧИТЬ ПО
				  //|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Дата
				  |";
				  			  
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Заказы.Найти(Выборка.ЗаказПокупателя, "ЗаказПокупателя") = Неопределено Тогда
			НоваяСтрока = Заказы.Добавить();
			НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
			НоваяСтрока.ПричинаЗакрытияЗаказа = СсылкаПричинаЗакрытия;
		КонецЕсли;
	КонецЦикла; 
	
	//***
	
КонецПроцедуры 	


Процедура ЗаполнитьЗаказыПоОтрицательнымОстаткам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"   ВЫБРАТЬ РАЗЛИЧНЫЕ ЗаказПокупателя ИЗ
   |(ВЫБРАТЬ
   | 	ЗаказПокупателя.Контрагент КАК Контрагент,
   | 	ЗаказПокупателя.ДоговорКонтрагента.ОтветственноеЛицо КАК ОтветственноеЛицо,
   | 	ЗаказПокупателя,
   | 	Номенклатура.Код Код,
   | 	Номенклатура,
   | 	КоличествоОстаток
   | ИЗ
   | 	РегистрНакопления.ЗаказыПокупателей.Остатки(, НЕ ЗаказПокупателя.Транзит И ЗаказПокупателя.Проверен) 
   | ГДЕ
   | 	КоличествоОстаток < 0 )  ЗаказыПокупателейОстатки
 //--- 08.06.2017 --- не нужно
 //| 	УПОРЯДОЧИТЬ ПО ЗаказПокупателя.Дата
   |";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
			НоваяСтрока = Заказы.Добавить();
			НоваяСтрока.ЗаказПокупателя = Выборка.ЗаказПокупателя;
			//НоваяСтрока.ПричинаЗакрытияЗаказа = СсылкаПричинаЗакрытия;
	КонецЦикла; 	


КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по регистру 
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоЗаказамПокупателейУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + ?(ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов, "ТаблицаЗаказов.ПричинаЗакрытияЗаказа КАК ПричинаЗакрытияЗаказа,", "") + "
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента,
	|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыПокупателейОстатки.СтатусПартии, 
	|	ЗаказыПокупателейОстатки.Цена,
	|	ЗаказыПокупателейОстатки.ЕдиницаИзмерения,
	|	ЗаказыПокупателейОстатки.ПроцентСкидкиНаценки,
	|	ЗаказыПокупателейОстатки.ПроцентАвтоматическихСкидок,
	|	ЗаказыПокупателейОстатки.КоличествоОстаток          КАК Количество,
	|	ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаказыПокупателейОстатки.СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментДокумента,  ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейОстатки
	|";
	
	Если ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ТаблицаЗаказов
		|ПО
		|	ТаблицаЗаказов.Ссылка = &ДокументСсылка
		|	И
		|	ТаблицаЗаказов.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|";
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ?(ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов, "ТаблицаЗаказов.ПричинаЗакрытияЗаказа КАК ПричинаЗакрытияЗаказа,", "") + "
	|	ВнутренниеЗаказыОстатки.Заказчик,
	|	Ложь КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ,
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.Организация КАК Организация,
	|	ВнутренниеЗаказыОстатки.Номенклатура,
	|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ВнутренниеЗаказыОстатки.СтатусПартии, 
	|	0,
	|	NULL,
	|	0,
	|	0,
	|	ВнутренниеЗаказыОстатки.КоличествоОстаток КАК Количество,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаУпр
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&МоментДокумента, ВнутреннийЗаказ В (&СписокЗаказов)) КАК ВнутренниеЗаказыОстатки
	|";
	
	Если ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов Тогда
	
		Запрос.Текст = Запрос.Текст + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ЗакрытиеЗаказовПокупателей.Заказы КАК ТаблицаЗаказов
		|ПО
		|	ТаблицаЗаказов.Ссылка = &ДокументСсылка
		|	И
		|	ТаблицаЗаказов.ЗаказПокупателя = ВнутренниеЗаказыОстатки.ВнутреннийЗаказ
		|";
	
	КонецЕсли; 
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоЗаказамПокупателейУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоЗаказамПоставщиковУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ДоговорКонтрагента,
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    СтатусПартии,
	|    Цена,
	|    ЕдиницаИзмерения,
	|    КоличествоОстаток          КАК Количество,
	|    СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|    СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|    РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментДокумента, ДоговорКонтрагента В (ВЫБРАТЬ РАЗЛИЧНЫЕ Заказ.ДоговорКонтрагента
	|                                                                  ИЗ Документ.ЗаказПокупателя КАК Заказ
	|                                                                  ГДЕ Заказ.Ссылка В (&СписокЗаказов))
	|                                                                И ЗаказПоставщику В (&СписокЗаказов) И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ)";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоЗаказамПоставщиковУпр()


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуПоРазмещениюУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ЗаказПоставщику,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    ТоварТара,
	|    ЗаказПокупателя,
	|    КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&МоментДокумента, ЗаказПокупателя В (&СписокЗаказов))";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРазмещениюУпр()

Функция ПодготовитьТаблицуПоРезервамУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка",            Ссылка);
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    Склад,
	|    ДокументРезерва,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|    КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&МоментДокумента, ДокументРезерва В (&СписокЗаказов))";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРезервамУпр()

// По итогам региситра "Расчеты с контрагентами" подготавливает таблицу для формирования движений по этому регистру
Функция ПодготовитьТаблицуПоРасчетамУпр()

	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента",           МоментВремени());
	Запрос.УстановитьПараметр("СписокЗаказов",             СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|    ДоговорКонтрагента,
	|    Сделка,
	|    РасчетыВозврат,
	|    СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|    СуммаУпрОстаток            КАК СуммаУпр
	|ИЗ
	|    РегистрНакопления.РасчетыСКонтрагентами.Остатки(&МоментДокумента, Сделка В (&СписокЗаказов))";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;

КонецФункции // ПодготовитьТаблицуПоРасчетамУпр()

//13.01.2016
функция ПодготовитьТаблицуПоРезервамИМ()
 	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.Текст = 
				   "ВЫБРАТЬ
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение КАК Подразделение,
				   //|	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ, //123Заменить
				   |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ,
				   |	ЗаказыПокупателейОстатки.Номенклатура,
				   |	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество,
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя
				   |ПОМЕСТИТЬ ВТ_ОстаткиТоваровПоЗаказам
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПокупателей.Остатки(
				   |			&МоментДокумента,
				   |			ЗаказПокупателя В (&СписокЗаказов)
				  // |				И ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ЗаказыПокупателейОстатки //123Заменить
				   |				И ДоговорКонтрагента.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ЗаказыПокупателейОстатки

				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя.Подразделение,
				 //  |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ,//123Заменить
				   |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.КонтрагентДляРезерваИМ,
				   |	ЗаказыПокупателейОстатки.Номенклатура,
				   |	ЗаказыПокупателейОстатки.ЗаказПокупателя
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	&МоментДокумента КАК Период,
				   |	&ДокЗакрытия КАК Регистратор,
				   |	ВЫБОР
				   |		КОГДА РезервДляИМ.ВидДвижения = &Приход
				   |			ТОГДА &Расход
				   |		ИНАЧЕ &Приход
				   |	КОНЕЦ КАК ВидДвижения,
				   |	РезервДляИМ.Подразделение,
				   |	РезервДляИМ.КонтрагентДляРезерваИМ,
				   |	РезервДляИМ.Номенклатура,
				   |	ВЫБОР
				   |		КОГДА РезервДляИМ.Количество > ОстаткиТоваровПоЗаказам.Количество
				   |			ТОГДА ОстаткиТоваровПоЗаказам.Количество
				   |		ИНАЧЕ РезервДляИМ.Количество
				   |	КОНЕЦ КАК Количество,
				   |	РезервДляИМ.Активность
				   |ИЗ
				   |	РегистрНакопления.РезервДляИМ КАК РезервДляИМ
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			ВТ_ОстаткиТоваровПоЗаказам.Подразделение КАК Подразделение,
				   |			ВТ_ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ КАК КонтрагентДляРезерваИМ,
				   |			ВТ_ОстаткиТоваровПоЗаказам.Номенклатура КАК Номенклатура,
				   |			ВТ_ОстаткиТоваровПоЗаказам.Количество КАК Количество,
				   |			ВТ_ОстаткиТоваровПоЗаказам.ЗаказПокупателя КАК ЗаказПокупателя
				   |		ИЗ
				   |			ВТ_ОстаткиТоваровПоЗаказам КАК ВТ_ОстаткиТоваровПоЗаказам) КАК ОстаткиТоваровПоЗаказам
				   |		ПО РезервДляИМ.Номенклатура = ОстаткиТоваровПоЗаказам.Номенклатура
				   |			И РезервДляИМ.Подразделение = ОстаткиТоваровПоЗаказам.Подразделение
				   |			И РезервДляИМ.КонтрагентДляРезерваИМ = ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ
				   |			И РезервДляИМ.Регистратор = ОстаткиТоваровПоЗаказам.ЗаказПокупателя
				   |ГДЕ
				   |	РезервДляИМ.Регистратор В(&СписокЗаказов)
				   |	И РезервДляИМ.Номенклатура В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.Номенклатура
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)
				   |	И РезервДляИМ.КонтрагентДляРезерваИМ В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.КонтрагентДляРезерваИМ
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)
				   |	И РезервДляИМ.Подразделение В
				   |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |				ВТ_ОстаткиТоваровПоЗаказам.Подразделение
				   |			ИЗ
				   |				ВТ_ОстаткиТоваровПоЗаказам)";
				   
				
	Запрос.УстановитьПараметр("МоментДокумента", ссылка.Дата);
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	// вид движения - наоборот!
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

   
функция  ПодготовитьТаблицуПоЗаказамСезоннымУпр()

 	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.Текст = 
				   "ВЫБРАТЬ
				   |	ЗаказыПокупателейСезонныеОстатки.Контрагент,
				   |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
				   |	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
				   |	ЗаказыПокупателейСезонныеОстатки.Аналог,
				   |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
				   |	ЗаказыПокупателейСезонныеОстатки.ВРезерве,
				   |	ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК Количество,
				   |	ЗаказыПокупателейСезонныеОстатки.Подразделение,
				   |	&ВидДвижения
				   |ИЗ
				   |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(&МоментДокумента, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателейСезонныеОстатки";
				   
				
	Запрос.УстановитьПараметр("МоментДокумента", ссылка.МоментВремени());
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	
	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗаказов;
	
КонецФункции


//------------14.01.2016----------------------
функция получитьТаблСторно()
	
 	СписокЗаказов = Заказы.ВыгрузитьКолонку("ЗаказПокупателя");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателейОбороты.Регистратор КАК Регистратор,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя,
	               |	ЗаказыПокупателейОбороты.Номенклатура КАК Номенклатура,
	               |	ИСТИНА КАК Активность,
	               |	ЗНАЧЕНИЕ(Справочник.ПричиныЗакрытияЗаказов.ПустаяСсылка) КАК ПричинаЗакрытияЗаказа,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказыПокупателейОбороты.ХарактеристикаНоменклатуры,
	               |	ЗаказыПокупателейОбороты.СтатусПартии,
	               |	ЗаказыПокупателейОбороты.Цена,
	               |	ЗаказыПокупателейОбороты.ЕдиницаИзмерения,
	               |	ЗаказыПокупателейОбороты.ПроцентСкидкиНаценки,
	               |	ЗаказыПокупателейОбороты.ПроцентАвтоматическихСкидок,
	               |	ЗаказыПокупателейОбороты.КоличествоРасход КАК Количество,
	               |	ЗаказыПокупателейОбороты.СуммаВзаиморасчетовРасход КАК СуммаВзаиморасчетов,
	               |	ЗаказыПокупателейОбороты.СуммаУпрРасход КАК СуммаУпр,
	               |	ЗаказыПокупателейОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ВЫБОР
	               |		КОГДА ЗаказыПокупателейОбороты.ЗаказПокупателя.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	               |			ТОГДА &ГоловноеПодразделение
	               |		ИНАЧЕ ЗаказыПокупателейОбороты.ЗаказПокупателя.Подразделение
	               |	КОНЕЦ КАК Подразделение,
				   |	ЗаказыПокупателейОбороты.ДоговорКонтрагента.Владелец КАК КонтрагентДляРезерваИМ, 
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.Проверен КАК Проверен
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			&КонДата,
	               |			ЗаказПокупателя В (&СписокЗаказов)
	            //   |				И ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ //123заменить
				   |				И ДоговорКонтрагента.Владелец <> ДоговорКонтрагента.КонтрагентДляРезерваИМ
	             //  |				И ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ЗаказыПокупателейОстатки //123Заменить
				   |				И ДоговорКонтрагента.КонтрагентДляРезерваИМ <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ЗаказыПокупателейОстатки
	               //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата, &КонДата, Регистратор, ДоговорКонтрагента.Владелец = ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ) КАК ЗаказыПокупателейОбороты //123заменить
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Обороты(&НачДата, &КонДата, Регистратор, ДоговорКонтрагента.Владелец = ДоговорКонтрагента.КонтрагентДляРезерваИМ) КАК ЗаказыПокупателейОбороты
	               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = ЗаказыПокупателейОбороты.Регистратор
	               |			И ЗаказыПокупателейОстатки.Номенклатура = ЗаказыПокупателейОбороты.Номенклатура
	               |ГДЕ
	               |	ЗаказыПокупателейОбороты.КоличествоРасход > 0
	               |	И ЗаказыПокупателейОбороты.Регистратор <> ЗаказыПокупателейОбороты.ЗаказПокупателя
	               |	И ЗаказыПокупателейОбороты.Регистратор В(&СписокЗаказов)
	               |	И ЗаказыПокупателейОстатки.КоличествоОстаток > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ЗаказыПокупателейОбороты.ЗаказПокупателя.Дата УБЫВ
	               |ИТОГИ
	               |	СУММА(Количество),
	               |	СУММА(СуммаВзаиморасчетов),
	               |	СУММА(СуммаУпр),
	               |	МАКСИМУМ(КоличествоОстаток)
	               |ПО
	               |	Регистратор,
	               |	Номенклатура
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	НачДата = ссылка.Дата; 
	// находим нач.дату как дату самого раннего заказа -1 сек.
	для i=0 по СписокЗаказов.Количество()-1 цикл
		если начДата>СписокЗаказов[i].Дата тогда
			начДата=СписокЗаказов[i].Дата-1;
		КонецЕсли;
	КонецЦикла;	
				
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", ссылка.Дата);
	Запрос.УстановитьПараметр("ДокЗакрытия", ссылка);
	Запрос.УстановитьПараметр("ГоловноеПодразделение", Справочники.Подразделения.НайтиПоКоду("00005"));
	// вид движения - наоборот!
	//Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	//Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
	выборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаЗаказов = новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаЗаказов.Колонки.Добавить("Номенклатура");
	
	ТаблицаЗаказов.Колонки.Добавить("Активность");
	ТаблицаЗаказов.Колонки.Добавить("ПричинаЗакрытияЗаказа");
	ТаблицаЗаказов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаЗаказов.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	ТаблицаЗаказов.Колонки.Добавить("Организация");
	ТаблицаЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаЗаказов.Колонки.Добавить("СтатусПартии");
	ТаблицаЗаказов.Колонки.Добавить("Цена");
	ТаблицаЗаказов.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗаказов.Колонки.Добавить("ПроцентСкидкиНаценки");
	
	ТаблицаЗаказов.Колонки.Добавить("Количество");
	ТаблицаЗаказов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаЗаказов.Колонки.Добавить("СуммаУпр");
	
	ТаблицаЗаказов.Колонки.Добавить("КонтрагентДляРезерваИМ"); // Сакулина
	ТаблицаЗаказов.Колонки.Добавить("Подразделение");      // Сакулина
    ТаблицаЗаказов.Колонки.Добавить("Проверен");      // Сакулина


	
	//===================LIFO========================================
	Пока выборкаРегистратор.Следующий() цикл
		выборкаТов = выборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока выборкаТов.Следующий() цикл
			КолОстаток = выборкаТов.КоличествоОстаток; // остаток списания по заказу
			выборкаЗак = выборкаТов.Выбрать();
			Пока выборкаЗак.Следующий() цикл
				Если выборкаЗак.Количество<=КолОстаток тогда // по 2м заказам
					
					стр1 = ТаблицаЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, выборкаЗак); 
					
					стр1.Цена =?(стр1.Цена>0, стр1.Цена, Окр(стр1.СуммаВзаиморасчетов * КолОстаток / выборкаЗак.Количество, 2));
					КолОстаток = КолОстаток - выборкаЗак.Количество;
					
				ИначеЕсли выборкаЗак.Количество>КолОстаток тогда
					
					стр1 = ТаблицаЗаказов.Добавить();
					ЗаполнитьЗначенияСвойств(стр1, выборкаЗак); 
					
					стр1.Количество = КолОстаток;  //пересчет сумм
					стр1.СуммаВзаиморасчетов = Окр(стр1.СуммаВзаиморасчетов * КолОстаток / выборкаЗак.Количество,2);
					стр1.СуммаУпр = Окр(стр1.СуммаУпр * КолОстаток / выборкаЗак.Количество,2);
					стр1.Цена = Окр(стр1.СуммаВзаиморасчетов /стр1.Количество, 2);
					КолОстаток = 0;
					
				КонецЕсли;
				
				если КолОстаток = 0 тогда
					прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
		
	
	Возврат ТаблицаЗаказов;
КонецФункции	


// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  ВыборкаПоШапкеДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоТоварам, ВыборкаПоШапкеДокумента, 
	                                              Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ЗаказПокупателя");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заказы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ВыборкаПоШапкеДокумента,	ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам,ТаблицаПоРезервамИМ,//13.01.2016
								ТаблицаПоЗаказамСезонным, //07.10.2016
								Отказ, Заголовок)
								
	ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента,	ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, ТаблицаПоРезервамИМ,//13.01.2016
								ТаблицаПоЗаказамСезонным, //07.10.2016
								Отказ, Заголовок);
								
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаПоЗаказамПокупателей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, ТаблицаЗакрываемыеЗаказы, Отказ, Заголовок)
	
	НаборДвижений = Движения.СписанныеТовары;
	
	Сч=0;
	Для каждого ВыборкаЗакрываемыеЗаказы Из ТаблицаЗакрываемыеЗаказы Цикл
		НоваяСтрока = НаборДвижений.Добавить();
		НоваяСтрока.НомерСтрокиДокумента=Сч;
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Номенклатура = ВыборкаЗакрываемыеЗаказы.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаЗакрываемыеЗаказы.ХарактеристикаНоменклатуры;
		НоваяСтрока.ОтражатьВУправленческомУчете = Истина;
		НоваяСтрока.Организация             = ВыборкаЗакрываемыеЗаказы.Организация;
		НоваяСтрока.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ;

		НоваяСтрока.ЗаказПартии = ВыборкаЗакрываемыеЗаказы.ЗаказПокупателя;
		Сч=Сч+1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, ВыборкаПоШапкеДокумента,	ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, ТаблицаПоРезервамИМ,//13.01.20167
								ТаблицаПоЗаказамСезонным, //07.10.2016
								Отказ, Заголовок)
								
	Если ВидОперации = Перечисления.ВидыОперацийЗакрытиеЗаказовПокупателей.ЗакрытиеЗаказов Тогда
	
		Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ЗаказыПокупателей;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ТабКопия = ТаблицаПоЗаказамПокупателей.Скопировать();
			К = 0;
			Пока К <= ТабКопия.Количество() - 1 Цикл
				Если ТипЗнч(ТабКопия[К].ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
					ТабКопия.Удалить(К);
				Иначе
					К = К + 1;
				КонецЕсли;
			КонецЦикла;
			
			ЗагрузитьВТаблицуЗначений(ТабКопия, ТаблицаДвижений);
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ЗаказыПокупателей.ВыполнитьРасход();
			
			//Движения по внутренним заказам
			НаборДвижений   = Движения.ВнутренниеЗаказы;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ТабКопия = ТаблицаПоЗаказамПокупателей.Скопировать();
			К = 0;
			Пока К <= ТабКопия.Количество() - 1 Цикл
				Если Не ТипЗнч(ТабКопия[К].ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
					ТабКопия.Удалить(К);
				Иначе
					К = К + 1;
				КонецЕсли;
			КонецЦикла;
			
			ТабКопия.Колонки.ДоговорКонтрагента.Имя = "Заказчик";
			ТабКопия.Колонки.ЗаказПокупателя   .Имя = "ВнутреннийЗаказ";
			
			ЗагрузитьВТаблицуЗначений(ТабКопия, ТаблицаДвижений);
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.ВнутренниеЗаказы.ВыполнитьРасход();
			
			//Движения по причинам закрытия заказов
			ТаблицаДляПроведенияПричин = ТаблицаПоЗаказамПокупателей.Скопировать();
			ТаблицаДляПроведенияПричин.Свернуть("ЗаказПокупателя, ПричинаЗакрытияЗаказа", "СуммаВзаиморасчетов, СуммаУпр");
			НаборДвижений = Движения.ПричиныЗакрытияЗаказов;
			Для каждого СтрокаТаблицы Из ТаблицаДляПроведенияПричин Цикл
				
				Если НЕ ЗначениеНеЗаполнено(СтрокаТаблицы.ПричинаЗакрытияЗаказа) Тогда
				
					НоваяЗапись = НаборДвижений.Добавить();
					НоваяЗапись.Заказ                 = СтрокаТаблицы.ЗаказПокупателя;
					НоваяЗапись.ПричинаЗакрытияЗаказа = СтрокаТаблицы.ПричинаЗакрытияЗаказа;
					НоваяЗапись.СуммаВзаиморасчетов   = СтрокаТаблицы.СуммаВзаиморасчетов;
					НоваяЗапись.СуммаУпрУчета         = СтрокаТаблицы.СуммаУпр;
				
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;

		Если ТаблицаПоРасчетам.Количество() > 0 Тогда
			
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);
			
			НаборДвижений.мПериод = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
			
		ЗагрузитьВТаблицуЗначений(ТаблицаПоРазмещению, ТаблицаДвижений);
			
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.РазмещениеЗаказовПокупателей.ВыполнитьРасход();
			
	КонецЕсли;
	
	Если ТаблицаПоЗаказамПоставщикам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
			
		ЗагрузитьВТаблицуЗначений(ТаблицаПоЗаказамПоставщикам, ТаблицаДвижений);
			
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
		Движения.ЗаказыПоставщикам.ВыполнитьРасход();
			
	КонецЕсли;
								
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоРезервам, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
		
	КонецЕсли;
	
	//14.01.2016 --сторнирование по "-" движениям обычных заказов где Заказ<>Регистратор
	//             по остаткам Заказов по LIFO!
	ТаблицаПоСторно = получитьТаблСторно();
		
	НаборДвижений = Движения.ЗаказыПокупателей;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ТаблицаДвижений.Очистить();
	ЗагрузитьВТаблицуЗначений(ТаблицаПоСторно, ТаблицаДвижений);
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ЗаказыПокупателей.ВыполнитьПриход();
	
	// Сакулина. добавляем точно такие же движения по Резерву ИМ ( для контрагента Резерв ИМ)  26.09.2016
	Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
		ТаблицаПоРезервамИМ = Новый ТаблицаЗначений;
		ТаблицаПоРезервамИМ.Колонки.Добавить("Подразделение");
		ТаблицаПоРезервамИМ.Колонки.Добавить("КонтрагентДляРезерваИМ");
		ТаблицаПоРезервамИМ.Колонки.Добавить("Номенклатура");
        ТаблицаПоРезервамИМ.Колонки.Добавить("Количество");
		Для Каждого СтрЗП из ТаблицаПоЗаказамПокупателей Цикл
			//Если СтрЗП.ДоговорКонтрагента.Владелец  =  СтрЗП.ДоговорКонтрагента.Владелец.КонтрагентДляРезерваИМ и СтрЗП.ЗаказПокупателя.Проверен Тогда //123заменить
			Если СтрЗП.ДоговорКонтрагента.Владелец  =  СтрЗП.ДоговорКонтрагента.КонтрагентДляРезерваИМ и СтрЗП.ЗаказПокупателя.Проверен Тогда
				НовСтр = ТаблицаПоРезервамИМ.Добавить();
				НовСтр.Подразделение =  ?(ЗначениеЗаполнено(СтрЗП.ЗаказПокупателя.Подразделение),СтрЗП.ЗаказПокупателя.Подразделение,Справочники.Подразделения.НайтиПоКоду("00005"));
				//НовСтр.КонтрагентДляРезерваИМ = СтрЗП.ДоговорКонтрагента.Владелец; //123заменить
				НовСтр.КонтрагентДляРезерваИМ = СтрЗП.ДоговорКонтрагента.КонтрагентДляРезерваИМ;
				НовСтр.Номенклатура = СтрЗП.Номенклатура;
				НовСтр.Количество = СтрЗП.Количество;
			КонецЕсли;
		КонецЦикла;
		НаборДвижений = Движения.РезервДляИМ;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ЗагрузитьВТаблицуЗначений(ТаблицаПоРезервамИМ, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.РезервДляИМ.ВыполнитьРасход(); 
	КонецЕсли;
	// Сделаем таблицу сторно только на те Заказы, где Проверен = Истина
	ТаблицаСтроноИМ = ТаблицаПоСторно.Скопировать(Новый Структура("Проверен",Истина));
	Если ТаблицаСтроноИМ.Количество()>0 Тогда
		НаборДвижений = Движения.РезервДляИМ;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаСтроноИМ, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.РезервДляИМ.ВыполнитьПриход();

	КонецЕсли;
	// Сакулина. добавляем точно такие же движения по Резерву ИМ ( для контрагента Резерв ИМ)

		
			
    // Сакулина. Закоментарила. внеслав вместо этого код выше
	//+++ 13.01.2016 - сразу в регистр //и в + или в -
//	Если ТаблицаПоРезервамИМ.Количество() > 0 Тогда
		//
		//НаборДвижений = Движения.РезервДляИМ;
		//
		//ТаблицаДвижений = НаборДвижений.Выгрузить();
		//
		//ЗагрузитьВТаблицуЗначений(ТаблицаПоРезервамИМ, ТаблицаДвижений);
		//
		//НаборДвижений.мПериод = Дата;
		//НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		//
		//Движения.РезервДляИМ.ВыполнитьДвижения(); //в обе стороны! "обратное" движение по резерву
		
	//14.01.2016 --сторнирование по "-" движениям обычных заказов где Заказ<>Регистратор
	//             по остаткам Заказов по LIFO!
	
		//ТаблицаПоСторно = получитьТаблСторно();
		//
		//НаборДвижений = Движения.ЗаказыПокупателей;
		//ТаблицаДвижений = НаборДвижений.Выгрузить();
		//
		//ТаблицаДвижений.Очистить();
		//ЗагрузитьВТаблицуЗначений(ТаблицаПоСторно, ТаблицаДвижений);
		//
		//НаборДвижений.мПериод = Дата;
		//НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		//
		//Движения.ЗаказыПокупателей.ВыполнитьПриход();
	
//	КонецЕсли;

// Сторнируем по сезонным заказам покупателей
   	Если ТаблицаПоЗаказамСезонным.Количество()>0 Тогда
		НаборДвижений = Движения.ЗаказыПокупателейСезонные;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ЗагрузитьВТаблицуЗначений(ТаблицаПоЗаказамСезонным, ТаблицаДвижений);
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Движения.ЗаказыПокупателейСезонные.ВыполнитьРасход();

	КонецЕсли;

	
 //+++ 23.11.2016 закрытие  ТоварыВОжиданииОтПоставщика
Если Константы.ИспользоватьДележкуЗаказовВМинус.Получить() и НЕ Отказ тогда
	
	СписокЗаказов = новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения( Ссылка.Заказы.ВыгрузитьКолонку("ЗаказПокупателя") );

	Запрос = Новый Запрос; // заказано ещё есть... 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	               |	0 КАК Количество,
	               |	ЗаказыПокупателей.ЗаказПокупателя.Подразделение КАК Подразделение,
	               |	ЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателей
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	СУММА(Количество),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
	               |ПО
	               |	Подразделение";
 	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
выборкаПодразделений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

пока выборкаПодразделений.Следующий() цикл
	выборкаЗакТов = выборкаПодразделений.Выбрать();
	
	// Создание описателя типов для таблицы значений
Массив = Новый Массив;
Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
ОписаниеТиповНом = Новый ОписаниеТипов(Массив);

Массив = Новый Массив;
Массив.Добавить(Тип("Число"));
КЧ = новый КвалификаторыЧисла(3,0);
ОписаниеТиповЧ = Новый ОписаниеТипов(Массив,,КЧ);

	ТаблТов = новый ТаблицаЗначений;
	ТаблТов.Колонки.Добавить("Номенклатура", ОписаниеТиповНом );
	ТаблТов.Колонки.Добавить("Количество", ОписаниеТиповЧ);
	
	ТаблЗаказов = новый ТаблицаЗначений;
	ТаблЗаказов.Колонки.Добавить("ЗаказПокупателя");
	
	пока выборкаЗакТов.Следующий() цикл
		стр1 = ТаблТов.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, выборкаЗакТов);
		стр2 = ТаблЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(стр2, выборкаЗакТов);
	КонецЦикла;	
ТаблТов.Свернуть("Номенклатура","Количество");	
ТаблЗаказов.Свернуть("ЗаказПокупателя");

// УДАЛЯЕМ ДВИЖЕНИЕ по ТоварыВОжиданииОтПоставщика по ВСЕМ Заказам!	
для каждого стр1 из ТаблЗаказов цикл
	набор = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
	набор.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	набор.Отбор.Регистратор.Значение 	 = стр1.ЗаказПокупателя;
	набор.Отбор.Регистратор.Использование= Истина;
	набор.Записать(); 
КонецЦикла;	
//---------исключаем заказанный товар по этому заказу-------------		

масЗаказов = ТаблЗаказов.ВыгрузитьКолонку("ЗаказПокупателя");

//--- обратное распределение "Св.остатка" по этим товарам - на другие заказы (без учета этих заказов в Списке заказов)-----
ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов, выборкаПодразделений.Подразделение, масЗаказов );
КонецЦикла;//по подразделениям


КонецЕсли;


КонецПроцедуры // ДвиженияПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
		//+++ 20.05.2013 - регистрация изменений для заказов в плане обмена ОИМ!
		Для каждого стр1 из Заказы цикл
			// 01.11.2016
			ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(стр1.ЗаказПокупателя, стр1.ЗаказПокупателя.Контрагент.ПриниматьЗаказыЧерезСайт); 
	    КонецЦикла;
	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",        "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоЗаказамПокупателей = ПодготовитьТаблицуПоЗаказамПокупателейУпр();
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоЗаказамПоставщикам = ПодготовитьТаблицуПоЗаказамПоставщиковУпр();
	
	ТаблицаПоРазмещению = ПодготовитьТаблицуПоРазмещениюУпр();
	
	ТаблицаПоРезервам = ПодготовитьТаблицуПоРезервамУпр();
	
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетамУпр();
	
	ТаблицаПоЗаказамСезонным = ПодготовитьТаблицуПоЗаказамСезоннымУпр();
	
	//ТаблицаПоРезервамИМ = ПодготовитьТаблицуПоРезервамИМ(); //+++ 13.01.2016
    ТаблицаПоРезервамИМ =  Новый ТаблицаЗначений;
	
	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиЗаказы(ТаблицаПоЗаказамПокупателей, СтруктураШапкиДокумента, 
											Отказ, Заголовок);
											
											
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, ТаблицаПоЗаказамПоставщикам,
							ТаблицаПоРезервам, ТаблицаПоРасчетам, ТаблицаПоРезервамИМ, //+++ 13.01.2016
							ТаблицаПоЗаказамСезонным,//++07.10.2016
										Отказ,
										Заголовок); 
										
	//+++( 26.01.2017 - Установка Статус=Отменен 
	// у Заказов покупателей для сторонних поставщиков 
	//        когда заказ - "резервный"  (без даты отгрузки) - у поставщика нельзя делать резерв!
	// или не подтвержден/отменен поставщиком, а уже прошло 7 дней + [число дней доставки]
	для каждого стр1 из Заказы цикл
		статус1 = стр1.ЗаказПокупателя.Статус;
		Если статус1 = перечисления.СтатусыЗаказов.ВОбработке
			//ИЛИ статус1 = перечисления.СтатусыЗаказов.Новый
			//ИЛИ статус1 = перечисления.СтатусыЗаказов.ПодтвержденПокупателем
		Тогда
			ЗакОб = стр1.ЗаказПокупателя.ПолучитьОбъект();
			ЗакОб.Статус = перечисления.СтатусыЗаказов.Отменен; // как будто бы поставщик отменил... 
			попытка 
			ЗакОб.ОбменДанными.Загрузка = истина;
				ЗакОб.Записать();         // без перепроведения и без проверок!
			ЗакОб.ОбменДанными.Загрузка = ложь;
			исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
    //+++)
	
	КонецЕсли; //Не Отказ

КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если не отказ тогда
		
	//+++ 23.11.2016 ОТКРЫТИЕ (по ЛИФО)  ТоварыВОжиданииОтПоставщика
Если Константы.ИспользоватьДележкуЗаказовВМинус.Получить() и НЕ Отказ тогда
	
	СписокЗаказов = новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения( Ссылка.Заказы.ВыгрузитьКолонку("ЗаказПокупателя") );

	Запрос = Новый Запрос; // заказано ещё есть... 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыПокупателей.Номенклатура КАК Номенклатура,
	               |	0 КАК Количество,
	               |	ЗаказыПокупателей.ЗаказПокупателя.Подразделение КАК Подразделение,
	               |	ЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя В (&СписокЗаказов)) КАК ЗаказыПокупателей
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура),
	               |	СУММА(Количество),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателя)
	               |ПО
	               |	Подразделение";
 	Запрос.УстановитьПараметр("СписокЗаказов",  СписокЗаказов);
	
выборкаПодразделений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

пока выборкаПодразделений.Следующий() цикл
	выборкаЗакТов = выборкаПодразделений.Выбрать();
	
// Создание описателя типов для таблицы значений
Массив = Новый Массив;
Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
ОписаниеТиповНом = Новый ОписаниеТипов(Массив);

Массив = Новый Массив;
Массив.Добавить(Тип("Число"));
КЧ = новый КвалификаторыЧисла(3,0);
ОписаниеТиповЧ = Новый ОписаниеТипов(Массив,,КЧ);

	ТаблТов = новый ТаблицаЗначений;
	ТаблТов.Колонки.Добавить("Номенклатура", ОписаниеТиповНом );
	ТаблТов.Колонки.Добавить("Количество", ОписаниеТиповЧ);
	
	ТаблЗаказов = новый ТаблицаЗначений;
	ТаблЗаказов.Колонки.Добавить("ЗаказПокупателя");
	
	пока выборкаЗакТов.Следующий() цикл
		стр1 = ТаблТов.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, выборкаЗакТов);
		стр2 = ТаблЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(стр2, выборкаЗакТов);
	КонецЦикла;	
ТаблТов.Свернуть("Номенклатура","Количество");	
ТаблЗаказов.Свернуть("ЗаказПокупателя");

// УДАЛЯЕМ ДВИЖЕНИЕ по ТоварыВОжиданииОтПоставщика по ВСЕМ Заказам!	
для каждого стр1 из ТаблЗаказов цикл
	набор = РегистрыНакопления.ТоварыВОжиданииОтПоставщика.СоздатьНаборЗаписей();
	набор.Отбор.Регистратор.ВидСравнения = ВидСравнения.Равно;
	набор.Отбор.Регистратор.Значение 	 = стр1.ЗаказПокупателя;
	набор.Отбор.Регистратор.Использование= Истина;
	набор.Записать(); 
КонецЦикла;	
//---------исключаем заказанный товар по этому заказу-------------		

масЗаказов = ТаблЗаказов.ВыгрузитьКолонку("ЗаказПокупателя");
//24.11.2016 именно эти заказы надо "перепровести"... и товары в ожидании - будут максимальные...
для каждого стр1 из масЗаказов цикл
	ЗакОб = стр1.получитьОбъект();
	попытка
		закОб.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Перепроведен "+строка(стр1), СтатусСообщения.Информация);
	исключение
		Сообщить("Ошибка перепроведения: "+строка(стр1)+" : "+ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
КонецЦикла;	

//--- обратное распределение "Св.остатка" по этим товарам - на другие заказы (без учета этих заказов в Списке заказов)-----
//ОбменСУТИнтернетМагазин.ДвижениеТоваровВОжидании( таблТов, выборкаПодразделений.Подразделение, масЗаказов );
КонецЦикла;//по подразделениям


КонецЕсли;

КонецЕсли;//не отказ

КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
