Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИзКомплектации Экспорт;
Перем мИзПеремещения Экспорт;
Перем мСкладИзПеремещения Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция ПечатьПоступлениеДопРасходов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",            ЭтотОбъект.КурсВзаиморасчетов);
	Запрос.УстановитьПараметр("Кратность",       ЭтотОбъект.КратностьВзаиморасчетов);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	Содержание ,
	|	СуммаДокумента КАК СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	СтавкаНДС,
	|	ВложенныйЗапрос.СуммаНДСТовары + СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаДенег                КАК СуммаДенег,
	|	ВложенныйЗапрос.Количество                КАК Количество
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов,
	|	(ВЫБРАТЬ
	|		СУММА(ПоступлениеДопРасходовТовары.Сумма)             КАК СуммаДенег,
	|		СУММА(ПоступлениеДопРасходовТовары.СуммаНДС)          КАК СуммаНДСТовары,
	|		КОЛИЧЕСТВО(ПоступлениеДопРасходовТовары.Номенклатура) КАК Количество
	|
	|	ИЗ
	|		Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|
	|	ГДЕ
	|		Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|
	|ГДЕ
	|	ПоступлениеДопРасходов.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеДопРасходов_Накладная";
	Макет       = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Доп. расходы");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Получатель = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	СуммаВсего = Шапка.СуммаДокумента - ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	СуммаИтого = СуммаВсего;

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	ОбластьМакета.Параметры.НомерСтроки = 1;
	ОбластьМакета.Параметры.Товар       = Шапка.Содержание;
	ОбластьМакета.Параметры.Цена        = СуммаВсего;
	ОбластьМакета.Параметры.Количество  = 1;
	ОбластьМакета.Параметры.Сумма       = СуммаВсего;
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(СуммаИтого);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(Шапка.СуммаНДС);
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = СуммаВсего + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + 1
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПоступлениеДопРасходов()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПоступлениеДопРасходов();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		ТабДокумент = Обработка.Печать();
	
	КонецЕсли;

	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Накладная", "Доп. расходы");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваров(ДокументОснование, ТабЧасть) Экспорт

	Запрос = Новый Запрос;
	
	ИмяДокумента = ДокументОснование.Метаданные().Имя;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	ДополнительныеПоляРегл = "";

	ИмяТабЧасти = "Товары";

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.Ссылка,
	|	Док.Ссылка.ВалютаДокумента,
	|	Док.Сумма,
	|	Док.СуммаНДС,
	|	Док.Ссылка.УчитыватьНДС УчитыватьНДС,
	|	Док.Ссылка.СуммаВключаетНДС СуммаВключаетНДС,
	|	Док.Количество,
	|	Док.ЕдиницаИзмерения,
	|	" + ?(ИмяДокумента = "ПоступлениеТоваровУслуг" И ТабЧасть = Товары, "Док.ЗаказПокупателя,",      "") + "
	|	" + ?(ТабЧасть     = Товары,                                        "Док.Проект,"         ,      "") + "
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры"+
		ДополнительныеПоляРегл+"
	|ИЗ
	|	Документ." + ИмяДокумента + "." + ИмяТабЧасти  + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Табчасть.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ДокументПартии             = ДокументОснование;

		Если ИмяДокумента = "ПоступлениеТоваровУслуг"
		   И ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		КонецЕсли;

		Если ТабЧасть = Товары Тогда
			СтрокаТабличнойЧасти.Проект = Выборка.Проект;
		КонецЕсли;

		СтрокаТабличнойЧасти.СуммаТовара = ПересчитатьИзВалютыВВалюту(Выборка.Сумма + 
		                                   ?(Выборка.УчитыватьНДС И НЕ Выборка.СуммаВключаетНДС, Выборка.СуммаНДС, 0), Выборка.ВалютаДокумента,
		                                   ВалютаДокумента, КурсДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                   КратностьДокумента(Выборка.Ссылка, мВалютаРегламентированногоУчета),
		                                   КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("Качество");
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	Если (ТаблицаТоваров.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено) тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,3));
	КонецЕсли;

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("СтатусПартии");
	ТаблицаТоваров.Колонки.Добавить("Заказ");
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", ПолучитьОписаниеТиповЧисла(15,2));

		// Надо расчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.Вес = СтрокаТаблицы.Вес * СтрокаТаблицы.Количество;

		// Склад указан либо в документе поступления, либо в приходном ордере
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;


		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
			СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, 
			                                       КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                       КурсВзаиморасчетов,
			                                       КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                                       КратностьВзаиморасчетов);
		КонецЕсли;


		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.Стоимость = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, СтруктураШапкиДокумента.ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей=Истина Тогда
			СтрокаТаблицы.Заказ = СтрокаТаблицы.ЗаказПокупателя;
		КонецЕсли;

		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
		Иначе
			СтрокаТаблицы.СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный; 
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Процедура добавляет в таблицы данные о суммах распределения.
//
Процедура ДобавитьРаспределение( ТаблицаПоТоварам, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Сумма к распределению
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий Тогда
			СуммаВсего = Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СуммаНДС, 0);
		Иначе
			СуммаВсего = Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СуммаНДС, 0);
		КонецЕсли;
		СуммаВсегоСНДС = Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СуммаНДС, 0);
		
		СуммаВсегоУпр = ПересчитатьИзВалютыВВалюту(СуммаВсего, ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			КурсДокумента     ( ЭтотОбъект, мВалютаРегламентированногоУчета),
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета),
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
		СуммаВсегоСНДСУпр = ПересчитатьИзВалютыВВалюту(СуммаВсегоСНДС, ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			КурсДокумента     ( ЭтотОбъект, мВалютаРегламентированногоУчета),
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			КратностьДокумента( ЭтотОбъект,	мВалютаРегламентированногоУчета),
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		КолКоэф = ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу,       "Вес",
				  ?( СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству, "Количество", "СуммаТовара"));
		МассивКоэф = ТаблицаПоТоварам.ВыгрузитьКолонку(КолКоэф);

		МассивСумм = РаспределитьПропорционально( СуммаВсегоУпр, МассивКоэф, 2);
		МассивСуммСНДС = РаспределитьПропорционально( СуммаВсегоСНДСУпр, МассивКоэф, 2);

		Если МассивСумм = Неопределено Тогда
			Возврат;
		КонецЕсли;

		СтрокТоваров = ТаблицаПоТоварам.Количество() - 1;
		Для К = 0 По СтрокТоваров Цикл
			ТаблицаПоТоварам[К].Стоимость = ТаблицаПоТоварам[К].Стоимость + МассивСумм[К];
			ТаблицаПоТоварам[К].СуммаУпр = ТаблицаПоТоварам[К].СуммаУпр + МассивСуммСНДС[К];
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ДобавитьРаспределение()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация, СпособРаспределения, 
	                                 |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
	                                 |КурсВзаиморасчетов, КратностьВзаиморасчетов");
	КонецЕсли;

	Если Сумма = 0 Тогда
		СтруктураОбязательныхПолей.Удалить("СпособРаспределения");
	КонецЕсли;

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		                      "По выбранному договору установлен способ ведения взаиморасчетов ""по заказам (счетам)""! 
		                       |Заполните поле ""Заказ поставщику""!");
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Если способ распределения установлен по весу, то проверяется сумма весов по всем строкам
//
Процедура ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок)
	
	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		Если ТаблицаПоТоварам.Итог("Вес") = 0 Тогда
			ТекстСообщения = "Суммарный вес всех позиций номенклатуры равен нулю!";
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет нет ли среди документов партии поступлений товаров на комиссию
//
Процедура ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок)
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
		Если СтрокаТаблицы.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части ""Товары"" в качестве документа партии выбрано поступление на комиссию.",
							   Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок, ИмяТабЧасти)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьВес(ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьЧтоНетКомиссии(ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, ИмяТабЧасти, ТаблицаПоТоварам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок,РежимПроведения)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, РежимПроведения);
	ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);

КонецПроцедуры

// Формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок, РежимПроведения)
	
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах

	Если ОтражатьВУправленческомУчете Тогда

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда

			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
													
						
			//Курсовые разницы
			

			Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаУпрОстаток,
				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&МоментВремени, ДоговорКонтрагента = &Договор) КАК ВзаиморасчетыСКонтрагентамиОстатки";
				
				Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
				Запрос.УстановитьПараметр("Договор", ЭтотОбъект.ДоговорКонтрагента);
				ТаблицаОстатка = Запрос.Выполнить().Выгрузить();
				Если ТаблицаОстатка.Количество()>0 тогда
				среднийкурс = ?(ТаблицаОстатка[0].СуммаВзаиморасчетовОстаток = 0,0,ТаблицаОстатка[0].СуммаУпрОстаток/ТаблицаОстатка[0].СуммаВзаиморасчетовОстаток);
				иначе
				среднийкурс =0;	
			    конецесли;
			
			
			    Если среднийкурс<>0  и (СреднийКурс-КурсВзаиморасчетов)<>0 тогда
			
			    СтрокаДвижений = ТаблицаДвижений.Добавить();
			    СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			    СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			    СтрокаДвижений.СуммаВзаиморасчетов   = 0;
			    СтрокаДвижений.СуммаУпр   = (СреднийКурс-КурсВзаиморасчетов)*СуммаДокумента;

			     конецесли;
			
			конецЕсли;	  //)


			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок)
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;
			
			
			

			// ПО РЕГИСТРУ РасчетыСКонтрагентами
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации Тогда
				
				Если ЗначениеНеЗаполнено(Сделка) ИЛИ
					 ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда

					 НаборДвижений = Движения.РасчетыСКонтрагентами;

					// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					ТаблицаДвижений.Очистить();

					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
					СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
					СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
					СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

					СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
																СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
																СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					НаборДвижений.мПериод            = Дата;
					НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

					Если Не Отказ Тогда
						Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		НаборДвижений = Движения.ПартииТоваровНаСкладах;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабПартий = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабПартий.Количество() Цикл
			
			Если ЗначениеНеЗаполнено(ТабПартий[Инд].ДокументОприходования) Тогда
				ТабПартий.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТабПартий, ТаблицаДвижений);

		ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");

		// Если нет парт. учета по складам, склад не заполняется
		Если НЕ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
			
			
		Иначе
			
			// Добавочные строки
			ДопСтроки = НаборДвижений.Выгрузить();
			ДопСтроки.Очистить();
			
			Для Каждого Строка Из ТаблицаДвижений Цикл
				
				ЗапросСкладыВТЧ = Новый Запрос(
				"ВЫБРАТЬ
				|	ПоступлениеТовары.Количество,
				|	ПоступлениеТовары.Склад
				|ИЗ
				|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПоступлениеТовары
				|
				|ГДЕ
				|	ПоступлениеТовары.Регистратор = &Ссылка И
				|	ПоступлениеТовары.Номенклатура = &Номенклатура И
				|	ПоступлениеТовары.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры И
				|	ПоступлениеТовары.СерияНоменклатуры = &СерияНоменклатуры");
				
				ЗапросСкладыВТЧ.УстановитьПараметр("Ссылка", Строка.ДокументОприходования);
				ЗапросСкладыВТЧ.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
				ЗапросСкладыВТЧ.УстановитьПараметр("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
				ЗапросСкладыВТЧ.УстановитьПараметр("СерияНоменклатуры", Строка.СерияНоменклатуры);
				
				ТабВыборка = ЗапросСкладыВТЧ.Выполнить().Выгрузить();
				
				ИтогоКоличество = ТабВыборка.Итог("Количество");
				
				РаспределяемаяСумма = Строка.Стоимость;
				
				Для Каждого Выборка Из ТабВыборка Цикл
					
					Если ИтогоКоличество<=0 Тогда
						Прервать;
					КонецЕсли;
					
					Если Выборка.Количество=0 Тогда
						Продолжить;
					КонецЕсли;
					
					ДопСтрока = ДопСтроки.Добавить();
					Для Каждого Кол Из ТаблицаДвижений.Колонки Цикл
						ИндКол = ТаблицаДвижений.Колонки.Индекс(Кол);
						ДопСтрока[ИндКол] = Строка[ИндКол];
					КонецЦикла;
					
					Если ((мИзПеремещения<>Неопределено) И (мИзПеремещения = Истина)) Тогда 
						ДопСтрока.Склад = мСкладИзПеремещения;
					Иначе 
						ДопСтрока.Склад = Выборка.Склад;
					Конецесли;
					
					Если Выборка.Количество<ИтогоКоличество Тогда
						КоэффРаспред = Выборка.Количество/ИтогоКоличество;
					Иначе
						КоэффРаспред = 1;
					КонецЕсли;
					
					ДопСтрока.Стоимость = РаспределяемаяСумма * КоэффРаспред;
					
					РаспределяемаяСумма = РаспределяемаяСумма - ДопСтрока.Стоимость;
					ИтогоКоличество = ИтогоКоличество - Выборка.Количество;
					
					// Исходная строка будет с 0 суммой
					Строка.Стоимость = 0;
					
				КонецЦикла;
				
				
			КонецЦикла;
			
			// Теперь доп строки добавим в таблицу движений
			Для Каждого ДопСтрока Из ДопСтроки Цикл
				НоваяСтрока = ТаблицаДвижений.Добавить();
				Для Каждого Кол Из ТаблицаДвижений.Колонки Цикл
					ИндКол = ТаблицаДвижений.Колонки.Индекс(Кол);
					НоваяСтрока[ИндКол] = ДопСтрока[ИндКол];
				КонецЦикла;
			КонецЦикла;
			
			// После обработки удалим строки с нулевыми суммами
			Инд=0;
			Пока Инд<ТаблицаДвижений.Количество() Цикл
				Если ТаблицаДвижений[Инд].Стоимость=0 Тогда
					ТаблицаДвижений.Удалить(Инд);
				Иначе
					Инд = Инд+1;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
		// При учете по-среднейжокумент оприходования не пишется
		Если СтруктураШапкиДокумента.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "ДокументОприходования");
		КонецЕсли;

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ПартииТоваровНаСкладах.ВыполнитьПриход();
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ доп.расходов для последующего распределения
		
		НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабЗатрат = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабЗатрат.Количество() Цикл
			
			Если НЕ ЗначениеНеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
				ТабЗатрат.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
			ТабЗатрат.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
		
		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			
			// ТОВАРЫ ПО РЕГИСТРУ Закупки.
		
			НаборДвижений = Движения.Закупки;
			
			// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
			ТаблицаДвиженийЗакупки = НаборДвижений.Выгрузить();
			ТаблицаДвиженийЗакупки.Очистить();
			ТаблицаПоЗакупкам = ТаблицаПоТоварам.Скопировать();
			ТаблицаПоЗакупкам.Колонки.ДокументОприходования.Имя = "ДокументЗакупки";

			// Стоимость в регистре Закупки должна быть с НДС при любых настройках НеВключатьНДСВСтоимостьПартий.
			ТаблицаПоЗакупкам.ЗагрузитьКолонку(ТаблицаПоЗакупкам.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");

			ТаблицаДвижений = ТаблицаДвиженийЗакупки.Скопировать();

			// Заполним таблицу движений.
			ЗагрузитьВТаблицуЗначений(ТаблицаПоЗакупкам, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ДвиженияПоРегистрамУпр()	

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы услуг сторонних организаций, у которых
	// установлен флаг БУ и которые оформлены по договору с поставщиком.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или ВидОперации <> Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПоставщикамиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПоставщикамиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

// Вызывается из тела процедуры "ДвиженияПоРегистрам" в процедуре формируются движения, отражающие
// поступление доп. расходов в подсистеме учета НДС
Процедура ДвиженияПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПокупки.
	ТаблицаДвиженийПокупки = Движения.НДСПокупки.Выгрузить();
	ТаблицаДвиженийПокупки.Очистить();
	
	СформироватьДвиженияПоРегиструНДСПокупки(СтруктураШапкиДокумента, ТаблицаПоТоварам, "ТаблицаПоТоварам", ТаблицаДвиженийПокупки);
	
	Если ТаблицаДвиженийПокупки.Количество() > 0 Тогда
		Движения.НДСПокупки.мПериод            = Дата;
		Движения.НДСПокупки.мТаблицаДвижений   = ТаблицаДвиженийПокупки;
		Движения.НДСПокупки.ДобавитьДвижение();
		Движения.НДСПокупки.Записать();
	КонецЕсли;
	
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра НДСПартииТоваров.
	ТаблицаДвиженийПартии = Движения.НДСПартииТоваров.Выгрузить();
	ТаблицаДвиженийПартии.Очистить();
	
	// Фиксируем поступление допрасходов и "увязываем" их с поступившими партиями товаров
	// при помощи регистра "НДСПартииТоваров"
	СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам, "ТаблицаПоТоварам", ТаблицаДвиженийПартии);
	
	Если ТаблицаДвиженийПартии.Количество() > 0 Тогда
		Движения.НДСПартииТоваров.мПериод            = Дата;
		Движения.НДСПартииТоваров.мТаблицаДвижений   = ТаблицаДвиженийПартии;
		Движения.НДСПартииТоваров.ВыполнитьПриход();
		Движения.НДСПартииТоваров.Записать();
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.УчетАгентскогоНДС = Истина Тогда
		
		// Дополнительно реализуем механизм учета НДС в качестве налогового агента
		ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
		ТаблицаДвиженийПродажи.Очистить();
		
		СформироватьДвиженияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ТаблицаПоТоварам, "ТаблицаПоТоварам", ТаблицаДвиженийПродажи);
		
		Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
			Движения.НДСПродажи.мПериод            = Дата;
			Движения.НДСПродажи.мТаблицаДвижений   = ТаблицаДвиженийПродажи;
			Движения.НДСПродажи.ДобавитьДвижение();
			Движения.НДСПродажи.Записать();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)
	
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	


// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ЗначениеЗаполнено(Основание) Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	
	мИзПеремещения = Ложь;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		//СпособРаспределения=Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
		мИзКомплектации = Истина;
		СпособРаспределения=Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству;
		ВидОперации=Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
		Содержание="Оказание услуг по ошиповке комплекта";
		
		Стр= Товары.Добавить();
	    Стр.Номенклатура =Основание.Номенклатура;
		Стр.Количество   =Основание.Количество; 
		Стр.ЕдиницаИзмерения =Основание.ЕдиницаИзмерения ;
		Стр.Коэффициент  =Основание.Коэффициент;      
		Стр.Количество=Основание.Количество;
		Стр.ДокументПартии=Основание;
		Стр.СуммаТовара=Основание.СуммаДокумента;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		мИзПеремещения = Истина;
		мСкладИзПеремещения = Основание.СкладПолучатель;
		Если (Основание.Проведен = Истина) Тогда 
			СпособРаспределения=Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
			ВидОперации=Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПеремещениеСсылка",Основание);
			Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
			Запрос.Текст = "
			|Выбрать Номенклатура,Стоимость,ДокументОприходования Из РегистрНакопления.ПартииТоваровНаСкладах
			|Где (Регистратор = &ПеремещениеСсылка) и (ВидДвижения=&Приход)";
			ТаблицаПартийДляЗаполнения = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Стр из Основание.Товары Цикл
				
				СтрНов					= 	Товары.Добавить();
			    СтрНов.Номенклатура 	=	Стр.Номенклатура;
				СтрНайденная			=   ТаблицаПартийДляЗаполнения.Найти(Стр.Номенклатура,"Номенклатура");
				СтрНов.СуммаТовара		= 	?(СтрНайденная<>Неопределено,СтрНайденная.Стоимость,0);
				СтрНов.Количество   	=	Стр.Количество; 
				СтрНов.ЕдиницаИзмерения =	Стр.ЕдиницаИзмерения ;
				СтрНов.Коэффициент  	=	Стр.Коэффициент;      
				СтрНов.Количество		=	Стр.Количество;
				СтрНов.ДокументПартии	=	?(СтрНайденная<>Неопределено,СтрНайденная.ДокументОприходования,Основание);
				Если (СтрНайденная=Неопределено) Тогда 
					Сообщить("Товар " + Стр.Номенклатура + " не проведен по партиям в документе - основании.",СтатусСообщения.Важное); 
					Сообщить("Доп.затраты не проведутся.",СтатусСообщения.Важное);
				КонецЕсли;
			КонецЦикла;
		Иначе 
			Сообщить("Документ перемещения не проведен. Создание документа невозможно",СтатусСообщения.Важное);
		КонецЕсли;		
	Иначе
	// Заполним реквизиты из стандартного набора по документу основанию.

	ЗаполнитьТоварыПоПоступлениюТоваров(Основание, Товары);
	//Орлов ++
	ЭтотОбъект.Дата = Основание.Дата + 1;
	ЭтотОбъект.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	//Орлов --
    КонецЕсли;	


КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"        , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"     , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"         , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                  , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                  , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "УчетАгентскогоНДС"            , "УчетАгентскогоНДС");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидАгентскогоДоговора"        , "ВидАгентскогоДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам" , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "СпособОценкиМПЗ"              , "СпособОценкиМПЗ");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "НеВключатьНДСВСтоимостьПартий", "НеВключатьНДСВСтоимостьПартий");

	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Если шапка не заполнена корректна то дальше лучше не идти, поскольку возможны ошибки
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = СформироватьСтруктуруПолейТовары();

	СтруктураПолей.Вставить("Услуга"                                     , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                      , "Номенклатура.Набор");
	СтруктураПолей.Вставить("ЗаказПокупателя"                            , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Вес"                                        , "ЕдиницаИзмерения.Вес");
	СтруктураПолей.Вставить("СуммаТовара"                                , "СуммаТовара");
	СтруктураПолей.Вставить("ДокументОприходования"                      , "ДокументПартии");
	СтруктураПолей.Вставить("Склад"                                      , "ДокументПартии.СкладОрдер"); // склад в документе поступления
	СтруктураПолей.Вставить("СкладОрдера"                                , "ДокументПартии.СкладОрдер.Склад"); // склад в ордере
	СтруктураПолей.Вставить("ВидДоговораПартии"                          , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"                  , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления"               , "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                      , "ЗаказПокупателя.Склад");
	СтруктураПолей.Вставить("Проект"                                     , "Проект");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", "ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");

	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	ТаблицаПоТоварам          = ПодготовитьТаблицуТоваров     (РезультатЗапросаПоТоварам,      СтруктураШапкиДокумента);

	СтруктураПолей.Удалить("Проект");
	СтруктураПолей.Удалить("ЗаказПокупателя");
	СтруктураПолей.Удалить("СкладЗаказаПокупателя");
	СтруктураПолей.Удалить("ОбособленныйУчетТоваровПоЗаказамПокупателей");

	ДобавитьРаспределение(ТаблицаПоТоварам, СтруктураШапкиДокумента);

	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок, "Товары");

	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);

	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок,РежимПроведения);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;
	
	СуммаДокумента = Сумма + Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, (Товары      .Итог("СуммаНДС") + СуммаНДС));
	ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);

	//БАЛАНС (04.12.2007)                       
	//
	ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
	
	КонецЕсли; 

	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь; 