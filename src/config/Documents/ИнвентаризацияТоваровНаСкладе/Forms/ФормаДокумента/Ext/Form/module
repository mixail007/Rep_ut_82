// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

// Флаг обновления расчета суммы регламентированного учета для НТТ
Перем мОбновитьРасчетСуммыРеглУчетаДляНТТ;

Перем мКолонкиТовары;

Перем СтруктураСвязиЭлементовСДанными;

Перем мТекущийВидСклада;
Перем мПечатнаяФормаПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.Цена             = 0;

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Если НЕ (глТорговоеОборудование = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал.Количество() = 0) Тогда
		УдалитьПунктМеню = Ложь;
	Иначе
		УдалитьПунктМеню = Истина;
	КонецЕсли;

	Если УдалитьПунктМеню Тогда
		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиТовары.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			ИндексКнопкиИзТерминалаСбораДанных = КнопкиПанелиТовары.Индекс(КнопкаИзТерминалаСбораДанных);
			КнопкиПанелиТовары.Удалить(ИндексКнопкиИзТерминалаСбораДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.Товары.Колонки;

	Если мТекущийВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ЦенаВРознице, Истина);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Качество, Ложь);
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена ("
		                                + мВалютаРегламентированногоУчета
		                                + ")";

		ЭлементыФормы.НадписьВсегоРегл.Заголовок = "Сумма регл.(" + мВалютаРегламентированногоУчета + ") по факту:";
		ЭлементыФормы.НадписьВсегоРегл.Видимость        = Истина;
		ЭлементыФормы.НадписьВсегоПоУчетуРегл.Видимость = Истина;
		ЭлементыФормы.СуммаПоФактуРегл.Видимость        = Истина;
		ЭлементыФормы.СуммаПоУчетуРегл.Видимость        = Истина;
	Иначе
		УстановитьВидимостьКолонкиТабЧасти(Колонки.ЦенаВРознице, Ложь);
		УстановитьВидимостьКолонкиТабЧасти(Колонки.Качество, Истина);

		ЭлементыФормы.НадписьВсегоРегл.Видимость        = Ложь;
		ЭлементыФормы.НадписьВсегоПоУчетуРегл.Видимость = Ложь;
		ЭлементыФормы.СуммаПоФактуРегл.Видимость        = Ложь;
		ЭлементыФормы.СуммаПоУчетуРегл.Видимость        = Ложь;
	КонецЕсли;

	//+++ если это склад адресного хранения - то отбор - по этажу по всем товарам!
	флАХ = Склад.АдресноеХранение; //BugFix
	ЭлементыФормы.ФлажокНастройкиАдреса.Значение = флАХ;
	ЭлементыФормы.ПанельОтбор.Доступность 		 = НЕ флАХ;
	//ЭлементыФормы.ФлажокНастройкиНоменклатура.Значение = НЕ флАХ;
	//ЭлементыФормы.ФлажокНастройкиНоменклатурнаяГруппа.Значение = НЕ флАХ;
	
	УстановитьВидимостьКолонкиТабЧасти(Колонки.СерияНоменклатуры, УчитыватьСерии);

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.СуммаПоУчету.Значение = Товары.Итог("СуммаУчет");
	ЭлементыФормы.СуммаПоФакту.Значение = Товары.Итог("Сумма");

	// Расчет суммы регламентированного учета для НТТ
	Если мТекущийВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка
	   И мОбновитьРасчетСуммыРеглУчетаДляНТТ Тогда

		мОбновитьРасчетСуммыРеглУчетаДляНТТ = Ложь;
		ВсегоРеглПоФакту                    = 0;
		ВсегоРеглПоУчету                    = 0;

		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл
			СуммаРеглПоФакту = СтрокаТабличнойЧасти.Количество     * СтрокаТабличнойЧасти.ЦенаВРознице;
			СуммаРеглПоУчету = СтрокаТабличнойЧасти.КоличествоУчет * СтрокаТабличнойЧасти.ЦенаВРознице;
			ВсегоРеглПоФакту = ВсегоРеглПоФакту + СуммаРеглПоФакту;
			ВсегоРеглПоУчету = ВсегоРеглПоУчету + СуммаРеглПоУчету;
		КонецЦикла;

		ЭлементыФормы.СуммаПоФактуРегл.Значение = ВсегоРеглПоФакту;
		ЭлементыФормы.СуммаПоУчетуРегл.Значение = ВсегоРеглПоУчету;
	КонецЕсли;

	ЭлементыФормы.НадписьВсего.Заголовок        = "Сумма, "          + мВалютаУпрУчета + " :";
	ЭлементыФормы.НадписьВсегоПоУчету.Заголовок = "Сумма по учету, " + мВалютаУпрУчета + " :";

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем СпособЗаполненияЦен;
	
	ЕстьЦена  = Ложь;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	
	Если мТекущийВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СписокВидовПодбора.Добавить("ОстаткиНеавтоматизированнаяТорговаяТочка", "По остаткам и ценам номенклатуры в торговой точке");
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ЕстьЦена = Истина;
	Иначе
		СписокВидовПодбора.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Команда"              , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	ВалютаДокумента = мВалютаУпрУчета;

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , ВалютаДокумента);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

Процедура ВосстановитьПорядокПроведенияИнвентаризацииИзТаблицы()
	
	СтрукураПолейНастройки = Новый Структура("Номенклатура, НоменклатурнаяГруппа");
	Для каждого КлючЗначение Из СтрукураПолейНастройки Цикл

		ИмяПоля = КлючЗначение.Ключ;
		СтруктураПоиска = Новый Структура("ИмяПоля", ИмяПоля);
		
		СтрокиОтбора = УсловияПроведенияИнвентаризации.НайтиСтроки(СтруктураПоиска);
		Если СтрокиОтбора.Количество() > 0 Тогда
			ЭлементыФормы["ФлажокНастройки"+ИмяПоля].Значение = Истина;
			ЭлементыФормы["ПолеВидаСравнения"+ИмяПоля].Значение = ВидСравнения[СтрЗаменить(СтрокиОтбора[0].ВидСравнения, " ", "")];
			Если СтрокиОтбора.Количество() > 1 Тогда
				СписокЗначенийОтбора = Новый СписокЗначений;
				Для каждого СтрокаОтбора ИЗ СтрокиОтбора Цикл
					СписокЗначенийОтбора.Добавить(СтрокаОтбора.Значение);
				КонецЦикла;
				ЭлементыФормы["ПолеНастройки"+ИмяПоля].Значение = СписокЗначенийОтбора;
			Иначе
				ЭлементыФормы["ПолеНастройки"+ИмяПоля].Значение = СтрокиОтбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьПорядокПроведенияИнвентаризацииВТаблицу()

	УсловияПроведенияИнвентаризации.Очистить();
	СтрукураПолейНастройки = Новый Структура("Номенклатура, НоменклатурнаяГруппа");
	
	Для каждого КлючЗначение Из СтрукураПолейНастройки Цикл

		ИмяПоля = КлючЗначение.Ключ;
		Если ЭлементыФормы["ФлажокНастройки"+ИмяПоля].Значение Тогда
			Если ТипЗнч(ЭлементыФормы["ПолеНастройки" + ИмяПоля].Значение) = Тип("СписокЗначений") Тогда
				Для каждого ЭлементСписка ИЗ ЭлементыФормы["ПолеНастройки"+ИмяПоля].Значение Цикл
					СтрокаТабличнойЧасти = УсловияПроведенияИнвентаризации.Добавить();
					СтрокаТабличнойЧасти.ИмяПоля      = ИмяПоля;
					СтрокаТабличнойЧасти.ВидСравнения = ЭлементыФормы["ПолеВидаСравнения"+ИмяПоля].Значение;
					СтрокаТабличнойЧасти.Значение     = ЭлементСписка.Значение;
				КонецЦикла;
			Иначе
				СтрокаТабличнойЧасти = УсловияПроведенияИнвентаризации.Добавить();
				СтрокаТабличнойЧасти.ИмяПоля      = ИмяПоля;
				СтрокаТабличнойЧасти.ВидСравнения = ЭлементыФормы["ПолеВидаСравнения"+ИмяПоля].Значение;
				СтрокаТабличнойЧасти.Значение     = ЭлементыФормы["ПолеНастройки" + ИмяПоля].Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Качество"        , Качество);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);

	Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
			СтруктураОтбора.Вставить("Качество"         , Качество);
	КонецЕсли;

	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;

	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
			СтрокаТабличнойЧасти.Качество          = Качество;
		КонецЕсли;

		Если мТекущийВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда

			// Подбирали уже в нужной валюте.
			СтрокаТабличнойЧасти.Цена = Цена;
		КонецЕсли;

		// Рассчитываем реквизиты табличной части.
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если ЗначениеНеЗаполнено(Качество) Тогда
			ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ЗаполнитьНачальныеНастройки(ПостроительОтчета);
	УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ПостроительОтчета.Отбор, СтруктураСвязиЭлементовСДанными,"ПостроительОтчета.Отбор");
	//ВосстановитьПорядокПроведенияИнвентаризацииИзТаблицы();
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
        НулевойФакт=истина;
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);
		УстановитьНомерДокумента(ЭтотОбъект);
 	КонецЕсли;

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийВидСклада     = Склад.ВидСклада;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	Если НЕ мКолонкиТовары.СерияНоменклатуры.ИзменятьВидимость Тогда
		ЭлементыФормы.УчитыватьСерии.Видимость = Ложь;
	КонецЕсли;

	УстановитьВидимость();

	ОбновитьМенюКнопкиЗаполнить();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.ЦенаВРознице.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	СохранитьПорядокПроведенияИнвентаризацииВТаблицу();
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда
		Если Событие = "BarCodeValue" Тогда

			Команда         = "ПодборВТабличнуюЧастьТовары";
			ИмяТабличнойЧасти = "Товары";

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткамНаСкладе(Кнопка)
	
	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть ""Товары"" будет очищена. Выполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Товары.Очистить();
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество() = 0 и Этаж>0 тогда  //по складу вцелом!
		Этаж = 99;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСкладе(ПостроительОтчета);

	Запрос = Новый Запрос;

	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения 
// учетных количеств и сумм товаров в табличной части
//
Процедура КоманднаяПанельТоварыПерезаполнитьУчетныеКоличестваИСуммы(Кнопка)

	ПерезаполнитьУчетныеКоличества(ПостроительОтчета);
	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры // КоманднаяПанельТоварыПерезаполнитьУчетныеКоличестваИСуммы()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);
	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	мТекущийВидСклада = Склад.ВидСклада;

	УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();
	ПерезаполнитьУчетныеКоличества(ПостроительОтчета);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "Учитывать серии"
//
Процедура УчитыватьСерииПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля "ПолеВидаСравненияНоменклатура".
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ПолеНастройкиТипЦен".
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	ПолеНастройкиПриИзменении(Элемент, ПостроительОтчета.Отбор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Отклонение.Видимость Тогда
		ОформлениеСтроки.Ячейки.Отклонение.ОтображатьТекст = Истина;
		
		отклонение = ДанныеСтроки.Количество - ДанныеСтроки.КоличествоУчет;
		ОформлениеСтроки.Ячейки.Отклонение.Текст = Формат(отклонение,"ЧЦ=15; ЧДЦ=3");
		Если отклонение<0 тогда
			ОформлениеСтроки.Ячейки.Отклонение.цветТекста = WebЦвета.Красный;
		КонецЕсли;	
		
		ЭлементыФормы.Товары.Колонки.Отклонение.ТекстПодвала = Товары.Итог("Количество") - Товары.Итог("КоличествоУчет");
	КонецЕсли;

	ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);
	
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.КоличествоУчет = СтрокаТабличнойЧасти.КоличествоУчет * СтароеЗначениеКоэффициента 
											 / СтрокаТабличнойЧасти.Коэффициент;

	СтрокаТабличнойЧасти.Количество     = СтрокаТабличнойЧасти.Количество * СтароеЗначениеКоэффициента 
											 / СтрокаТабличнойЧасти.Коэффициент;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать новое количество
	РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества учета
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоУчетПриИзменении(Элемент)

	ЭлементыФормы.Товары.ТекущиеДанные.СуммаУчет = ЭлементыФормы.Товары.ТекущиеДанные.Цена * ЭлементыФормы.Товары.ТекущиеДанные.КоличествоУчет;
	мОбновитьРасчетСуммыРеглУчетаДляНТТ          = Истина;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	СтрокаТабличнойЧасти.СуммаРегл        = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, мВалютаУпрУчета, 
								мВалютаРегламентированногоУчета, мКурсУпрУчета, 1, мКратностьУпрУчета, 1);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                        Склад, мВалютаРегламентированногоУчета, , Дата);

	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		НетАдреса = Истина; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, НетАдреса);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара.");
		Иначе
			пустойТовар = справочники.Номенклатура.ПустаяСсылка();
			Для Каждого СтрокаДанных Из Данные Цикл
				
				//+++ поиск по Коду товара напрямую...
				Товар = справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);   
				Если Товар=неопределено или Товар=пустойТовар тогда
					//поиск по ШтрихКоду (стандартно)
					Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
	 					Если Товар = Неопределено
						 Или Товар.Количество() = 0 Тогда
							Продолжить;
						Иначе
							Товар = ВремТовар[0];
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
							
				Если Товар=неопределено или Товар=пустойТовар тогда
					// Ищем выбранную позицию в таблице подобранной номенклатуры.
					//  Если найдем - увеличим количество; не найдем - добавим новую строку.
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", Товар); //+++
					//СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.Номенклатура);
					//СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаИзмерения);
					//СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ВремТовар.ХарактеристикаНоменклатуры);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
					Если СтрокаТабличнойЧасти <> Неопределено Тогда

						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;

					Иначе

						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = Товары.Добавить();
						//СтрокаТабличнойЧасти.Номенклатура               = ВремТовар.Номенклатура;
						//СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ВремТовар.ЕдиницаИзмерения;
						//СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.Номенклатура 	  = Товар; //наш товар
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = Товар.ЕдиницаХраненияОстатков;
						СтрокаТабличнойЧасти.Качество		  = Справочники.Качество.Новый;
						СтрокаТабличнойЧасти.Количество       = СтрокаДанных.Количество;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
					ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки["Количество"];
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеОчистка(Элемент, СтандартнаяОбработка)

	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

Процедура КоманднаяПанельТоварыПерезаполнитьУчетныеКоличестваИСуммыНаДату(Кнопка)
	// Вставить содержимое обработчика.
	
	ПерезаполнитьУчетныеКоличестваНаДату(ПостроительОтчета);
	мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;

КонецПроцедуры

// процедура из Реализации
Процедура КоманднаяПанельАдресаИзТерминалаСбораДанных(Кнопка)

Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();

	
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен!", 30);
		
		//22.12.2017
		Если Вопрос("Установить Факт.количество = План?",РежимДиалогаВопрос.ДаНет,0)=КодВозвратаДиалога.Да тогда 
		КоманднаяПанельАдресаФактРавноУчет(неопределено); 
		КонецЕсли;

	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
			///Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
					
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
				    иначе	
				        Код = "9999999"; // не существующий код!
				    КонецЕсли; 
			    иначе
				    Код = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;
				
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
				
				//09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
	
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+АдресХ, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			//Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			//Если Ответ = КодВозвратаДиалога.Да Тогда
			//	СтрокаТаблицыТерминала = неопределено;
			//	Если глТорговоеОборудование = Неопределено 
			//		или глТорговоеОборудование.млТерминал.Количество()>0 Тогда
			//		СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
			//		СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
			//		СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
			//		СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
			//	//иначе // ТСД не подключен.	
			//	КонецЕсли;
			//	Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
			//	Если Не ПустаяСтрока(Ответ) Тогда
			//		Предупреждение(Ответ);
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
			
		Иначе  ///Продолжение  Огородников

		
		нетАдреса = ЛОЖЬ; АдресПервый = Истина; //+++ это ОЧЕНЬ ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса, АдресПервый);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				кодТовара = СокрЛП(СтрокаДанных.Код);
				кодАдреса = СокрЛП(СтрокаДанных.Адрес); // "переворот" наоборот сделан в "ТороговомОборудовании"
				
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(кодТовара);  //+++
				 //09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	

				Адрес 	  = справочники.АдресаХранения.НайтиПоКоду(кодАдреса);
					 									
				//+++ 07.03.2013
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
						сообщить(строка(i)+" строка - Не найден товар с кодом: '"+кодТовара+"'", СтатусСообщения.Внимание);
				иначе//Если ЗначениеЗаполнено(ВремТовар) тогда
					
					//+++ 24.12.2012
					Если НЕ ЗначениеЗаполнено(Адрес) тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад);
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					//РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					//РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		КонецЕсли; //Плотников АТОЛ
	КонецЕсли;

КонецПроцедуры


Процедура ФлажокНастройкиАдресаПриИзменении(Элемент)
	Предупреждение("Данный флаг устанавливается автоматически
	|в соответствие с типом Склад Адресного хранения!",30);
	//ЭлементыФормы.ФлажокНастройкиАдреса.Значение = Склад.АдресноеХранение;
КонецПроцедуры

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Заполнение таблицы и расчет
//
Процедура ЗаполнитьНажатие(Элемент)
	
	Если Склад.Пустая() тогда
		Предупреждение("Заполните склад!");
		возврат;
	КонецЕсли;
	
	Если НЕ Склад.АдресноеХранение тогда
		Предупреждение("Склад: "+строка(Склад)+" - не использует адресного хранения!");
		возврат;
	КонецЕсли;
	
	// заполняем таблицу и перезаполняем Товары...
	Если ТоварыАдресноеХранение.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением очистить табличную часть ""Адреса""?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТоварыАдресноеХранение.Очистить();
		КонецЕсли; 
		
	КонецЕсли;

	//перезаполяем ТоварыАдресноеХранение
	ЕстьСтрокиАХ = (ТоварыАдресноеХранение.Количество()>0);
	ЗаполнитьПоОстаткамНаСкладеАдресноеХранение(ПостроительОтчета, ЕстьСтрокиАХ);

	Запрос = Новый Запрос;

	
	//перезаполять Товары - не надо здесь... делаем по отдельности
	// сначала только Адреса, затем только Товары на складах
	//КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткамНаСкладе(Неопределено);
	
КонецПроцедуры

//+++ по существующим товарам и Этажу - заполняет учетное.количество по Адресам и ячейкам
Процедура КоманднаяПанельАдресаПерезаполнитьУчетныеКоличества(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура ТоварыАдресноеХранениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ТоварыАдресноеХранение.Колонки.Отклонение.Видимость Тогда
		
		ОформлениеСтроки.Ячейки.Отклонение.ОтображатьТекст = Истина;
		
		отклонение = ДанныеСтроки.Количество - ДанныеСтроки.КоличествоУчет;
		ОформлениеСтроки.Ячейки.Отклонение.Текст = Формат(отклонение,"ЧЦ=15; ЧДЦ=3");
		Если отклонение<0 тогда
			ОформлениеСтроки.Ячейки.Отклонение.цветТекста = WebЦвета.Красный;
		КонецЕсли;	
		ЭлементыФормы.ТоварыАдресноеХранение.Колонки.Отклонение.ТекстПодвала = ТоварыАдресноеХранение.Итог("Количество") - ТоварыАдресноеХранение.Итог("КоличествоУчет");
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры


Процедура КоманднаяПанельТоварыПерезаполнитьФактическиеКоличестваПоАдресам(Кнопка)
	
	Если Товары.Количество()=0 тогда	
		Предупреждение("Заполните таблицу Товары по остаткам и ценам!");
		возврат;
	КонецЕсли;	
		
	Если ТоварыАдресноеХранение.Количество()=0 тогда	
		Предупреждение("Заполните таблицу Адреса по фактическим остаткам!");
		возврат;
	КонецЕсли;	
		
	ТЧ = ТоварыАдресноеХранение.Выгрузить();
	ТЧ.Свернуть("Номенклатура", "Количество");
	
	//	Товары.Очистить();
	//	Товары.Загрузить(ТЧ);
	
	для каждого стр из Товары цикл
		стр.Количество = 0;
	КонецЦикла;	
		
	для i=0 по ТЧ.Количество()-1 цикл
	стр1 = ТЧ[i];
	стр2 = товары.Найти(стр1.Номенклатура, "Номенклатура");
	качНовый = справочники.Качество.Новый;
	
		Если стр2=неопределено тогда
			сообщить("Добавлен товар: "+строка(стр1.номенклатура)+" - учетное количество и цена  - отсутствуют!");
			стр2 = Товары.Добавить();
			стр2.Номенклатура = стр1.Номенклатура;
			стр2.Количество	  = стр1.Количество;
			стр2.ЕдиницаИзмерения = стр2.Номенклатура.ЕдиницаХраненияОстатков;
			
			стр2.Коэффициент = 1;
			стр2.КоличествоМест   = стр1.Количество;
			стр2.ЕдиницаИзмеренияМест = стр2.Номенклатура.ЕдиницаХраненияОстатков;
			стр2.Качество    = качНовый;
		иначе
			Стр2.Количество = стр1.Количество;
		КонецЕсли;
	
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ЭтажПриИзменении(Элемент)
	Если Этаж = 99 и НулевойФакт тогда
		НулевойФакт = ложь;
		Предупреждение("Доступна полная инвентаризация по складу");
	иначеЕсли не НулевойФакт тогда
		НулевойФакт = истина;
	КонецЕсли;	
КонецПроцедуры

Процедура ДействияФормыСтруктураПодчиненности(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура КоманднаяПанельАдресаФактРавноУчет(Кнопка)
	для каждого стр1 из ТоварыАдресноеХранение цикл
		Если стр1.Количество = 0 тогда
			стр1.Количество = стр1.КоличествоУчет;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары                      = ЭлементыФормы.Товары.Колонки;
мОбновитьРасчетСуммыРеглУчетаДляНТТ = Истина;