////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем мТаблицаПлатежейПоДоговорам;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ЕстьРасчетыСКонтрагентами Тогда
	 
	 	Если Список Тогда
		 	УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	 	Иначе
		 	УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность=Истина;
	 
		ЭлементыФормы.НадписьРедактировать.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список1.Видимость = НЕ ЧастичнаяОплата;
		
		//Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		//	ЭлементыФормы.Сделка.Доступность=Ложь;
		//Иначе
		//	ЭлементыФормы.Сделка.Доступность=Истина;
		//КонецЕсли;

	//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
	//	
	//	УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
	//		
	//	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	//	ЭлементыФормы.Список.Видимость = Ложь;
	//	ЭлементыФормы.Список1.Видимость = Ложь;
	//	
	//ИначеЕсли ЕстьРасчетыПоКредитам Тогда
	//	
	//	УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
	//		
	//	ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
	//	
	//	ЭлементыФормы.Сделка.Доступность=Ложь;
	//	
	//	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	//	ЭлементыФормы.Список.Видимость = Ложь;
	//	ЭлементыФормы.Список1.Видимость = Ложь;

	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Ложь;
		
	//Если ОтражатьВБухгалтерскомУчете Тогда
	//	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Истина;
	//Иначе
	//	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
	//КонецЕсли;
	
	//Если Не Список И ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
	//	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
	//	ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
	//	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
	//	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
	//	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
	//	
	//Иначе
	//	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
	//	ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
	//	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
	//	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
	//	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
	//			
	//КонецЕсли;
	
	//ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");
    
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	// { Лапенков (договор документа каждый раз должен устанавливаться при выборе договора)
	Если РасшифровкаПлатежа.Количество()>0 Тогда
		Если не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		
		КонецЕсли;
	КонецЕсли;
    //  }
	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()


// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
		
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()
								
// Процедура рассчитывает сумму платежа по заявке.
//

//Процедура рассчитывает курс взаиморасчетов по заявке
//
															
// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	//Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
	//	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	//КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()								 

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если Организация.Пустая() Тогда

		СчетОрганизации = "";
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	
	ТаблицаПлатежей=ЗаполнитьТаблицуПлатежейПоДоговорамОтветственногоЛица();
	// заполняем таблицу в форме документа только по договорам в котором Пользователь=ЛицоОтветственноеПоДоговору
	ТаблицаПлатежейПоДоговорамОтветственногоЛица=ТаблицаПлатежей.Скопировать();
	
	ТаблицаПлатежей.Свернуть("ДоговорКонтрагента","СуммаПлатежа");
	// мТаблицаПлатежейПоДоговорам - таблица разноски платежей по договорам, держим ее в памяти до момента записи.
	мТаблицаПлатежейПоДоговорам=ТаблицаПлатежей.Скопировать();
	
	
	
	//Если РасшифровкаПлатежа.Количество() = 0 Тогда
	//	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	//КонецЕсли;

	//ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	//СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	//Если ЭтоНовый() Тогда
	//	
	//	ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
	//	УстановитьНомерДокумента(ЭтотОбъект);
	//	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	//	
	//Иначе
		
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
		
		УстановитьКурсДокумента();
		//ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
		//																			 СтрокаПлатеж.КурсВзаиморасчетов,
		//																			 СтрокаПлатеж.КратностьВзаиморасчетов,
		//																			 мВалютаРегламентированногоУчета,
		//																			 Истина);
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = СчетОрганизации.ВалютаДенежныхСредств.Наименование;

	//КонецЕсли;
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
		
	
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВернутьТаблицуДоступныхОперацийДляМенеджера(Ссылка), //ВидОперации.Метаданные().ЗначенияПеречисления.,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
//	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	//Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	//Иначе
	//	Список = Ложь;
	//КонецЕсли;

	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок=СформироватьТекстЧастичнаяОплата(Ссылка,"ДенежныеСредстваКПолучению","ДокументПолучения");
	КонецЕсли;

	//Установка меню Клиент-Банк
//	УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;

	УстановитьВидимость();
	
	
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
     // пока ничего не будет
	//Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

	//	Если Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя] = ВидОперации Тогда
	//		Возврат;
	//	КонецЕсли; 
	//	
	//	ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя];
	//	
	//	РасшифровкаПлатежа.Очистить();
	//	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	//	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	//	
	//	УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	//	
	//	УстановитьФокус();
	//	
	//	ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
	//	ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
	//			
	//	УстановитьВидимость();
	//	
	//КонецЕсли;

	//// Отобразить в заголовке формы вид операции.
	//УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()



// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);


КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()





Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	
КонецПроцедуры


Процедура ОбновлениеОтображения()
		
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
	// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = Константы.ВалютаУправленческогоУчета.Получить();
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
		
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(ТаблицаПлатежейПоДоговорамОтветственногоЛица.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
									
	//Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
	//			
	//			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
	//				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	//			КонецЕсли;

	//		
	//		ТекстКурсаЗаявки= ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
	//						 СтрокаПлатеж.КурсВзаиморасчетовПлан,
	//						 СтрокаПлатеж.КратностьВзаиморасчетов,
	//						 мВалютаРегламентированногоУчета,
	//						 Истина);
	//						 
	//	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
	//																					 
	//КонецЕсли;
	
	
	
КонецПроцедуры



Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//0. Проверка, что договора указаны и лицо ответственное по договору - это текущий пользователь
	ТаблицаДляПроверки=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Скопировать();
	СЗКонтрагенты = ПолучитьСписокКонтрагентовМенеджераПоРегиону(глТекущийПользователь);
	
	Для каждого строкаТаблицы Из ТаблицаДляПроверки Цикл
		Если ЗначениеНеЗаполнено(строкаТаблицы.ДоговорКонтрагента) Тогда
			Сообщить("В строке №" +Строка(строкаТаблицы.НомерСтроки)+" не указан договор контрагента. Запись не может быть выполнена.",СтатусСообщения.Важное);
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		
		Если не (строкаТаблицы.ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь
			или строкаТаблицы.ДоговорКонтрагента.Владелец.ОсновнойМенеджерКонтрагента=глТекущийПользователь) Тогда //02.11.2015 
			///+++ Шарафутдинов по задаче 48957 
			Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда  				
				
				ЕСли СЗКонтрагенты.НайтиПоЗначению(строкаТаблицы.ДоговорКонтрагента.Владелец) = Неопределено тогда
					Сообщить("Контрагент " +строкаТаблицы.ДоговорКонтрагента.Владелец +" не является разрешенным для Вас и Вы не можете разносить платежи по этому договору.",СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;			
				
			иначе
				
				///--- Шарафутдинов по задаче 48957 
				Сообщить("Вы не можете выбирать договор, в котором ответственным является "+
				Строка(строкаТаблицы.ДоговорКонтрагента.ОтветственноеЛицо)+". Запись не может быть выполнена.",СтатусСообщения.Важное);
				Отказ=Истина;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	// 1. Проверка, что  договоры и суммы оплат по этим договорам совпадают с суммами,
	// которые были указаны основным менеджером контрагента
	
	
	ТаблицаДляПроверки.Свернуть("ДоговорКонтрагента","СуммаПлатежа");
	
//+++ 02.10.2015 - отключаем контроль! разрешаем любые изменения по РАЗНЫМ договорам!
//	Отказ= не ТаблицыЗначенийИдентичны(ТаблицаДляПроверки,мТаблицаПлатежейПоДоговорам);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	// заполняем РасшифровкаПлатежа данными из ТаблицаПлатежейПоДоговорамОтветственногоЛица, предварительно удаляем оттуда данные по
	// договорам, где Пользователь=Лицо ответственное по договору
		сч=0;
	Пока сч < РасшифровкаПлатежа.Количество() Цикл
		Если РасшифровкаПлатежа[сч].ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь Тогда
			РасшифровкаПлатежа.Удалить(сч);
		ИначеЕсли ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда  				
			
			ЕСли СЗКонтрагенты.НайтиПоЗначению(РасшифровкаПлатежа[сч].ДоговорКонтрагента.Владелец) <> Неопределено тогда
				РасшифровкаПлатежа.Удалить(сч);	
				сч=сч+1;	
			КонецЕсли;			
			
		иначе 			
			сч=сч+1;	
		КонецЕсли;	
	КонецЦикла;
					
	Для каждого строкаТЗ Из ТаблицаПлатежейПоДоговорамОтветственногоЛица Цикл
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СуммаПлатежа=строкаТЗ.СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=СуммаПлатежа;
    СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;					
	СтрокаРасшифровкаПлатежа.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	ПересчитатьСуммуНДС(СтрокаРасшифровкаПлатежа);
	КонецЦикла;					
	
	
	Если  РасшифровкаПлатежа.Итог("СуммаПлатежа")<> СуммаДокумента Тогда
		СообщитьОбОшибке("Не совпадают сумма документа и расшифровка." );
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Для каждого строкаРасшифровки из РасшифровкаПлатежа Цикл
	//	НайденныеСтроки=РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ДоговорКонтрагента,Сделка",строкаРасшифровки.ДоговорКонтрагента,строкаРасшифровки.Сделка)) ;
	//	Если НайденныеСтроки<>Неопределено Тогда
	//		Если НайденныеСтроки.Количество()>1 Тогда
	//			Сообщить("Обнаружено более одной повторяющейся строки."+Строка(строкаРасшифровки.ДоговорКонтрагента)+" | "+Строка(строкаРасшифровки.Сделка)+" Документ не будет проведен!");
	//			Отказ = Истина;
	//			Возврат;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЦикла;
	
	
	//Если Константы.ОплатыРаспределяетОператорЗатемМенеджеры.Получить() Тогда
	//СравнитьТаблицыОплатПоДоговорам(ТаблицаПлатежейПоДоговорам,РасшифровкаПлатежа.Выгрузить(),Отказ);
	//КонецЕсли;
	
	Ответственный     = глТекущийПользователь;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//ЭтотОбъект.ПроверенМенеджером=Истина; 
	
КонецПроцедуры


Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	//	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры


Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
		
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
					
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
		
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры



Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
		
	//ЗаполнитьРасшифровкуПлатежейДляМенеджеров();
	ЗаполнитьРасшифровкуПоДоговору();	
//	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
//	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПоДоговору()
	
	СуммаОплатыПоДоговору=0;
	
	Если ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента) Тогда
	Возврат;
	КонецЕсли;

    мДоговорКонтрагента=ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента;
	
	НайдСтрока=мТаблицаПлатежейПоДоговорам.Найти(мДоговорКонтрагента,"ДоговорКонтрагента");
	Если НайдСтрока=Неопределено Тогда
		    Сообщить("Основной менеджер контрагента не указал договор "+Строка(мДоговорКонтрагента), СтатусСообщения.Важное);
			Возврат;
		Иначе
		СуммаОплатыПоДоговору=НайдСтрока.СуммаПлатежа;	
	КонецЕсли;	
	
	Если (мДоговорКонтрагента.ОтветственноеЛицо<> глТекущийПользователь) Тогда
		///+++ Шарафутдинов по задаче 48957 
		Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
			СЗКонтрагенты = ПолучитьСписокКонтрагентовМенеджераПоРегиону(глТекущийПользователь);
			ЕСли СЗКонтрагенты.НайтиПоЗначению(мДоговорКонтрагента.Владелец) = Неопределено тогда
				Сообщить("Контрагент " +мДоговорКонтрагента.Владелец +" не является разрешенным для Вас и Вы не можете разносить платежи по этому договору.",СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;			
			
		иначе
			
			///--- Шарафутдинов по задаче 48957 
			Сообщить("Вы не являетесь лицом ответственным по договору "+СокрЛП(мДоговорКонтрагента.Наименование)+" и не можете разносить платежи по этому договору.",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// позволим разносить платежи только по договору по заказам или р/д
	Если мДоговорКонтрагента.ВедениеВзаиморасчетов<>Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
	Сообщить("Автоматическое заполнение работает только ПО ЗАКАЗАМ. Договор '"+ мДоговорКонтрагента+"' " +Строка(мДоговорКонтрагента.ВедениеВзаиморасчетов));	
	Возврат;	
	КонецЕсли;	
	
   ТаблицаДолговПоСделкам=ПолучитьТаблицуДолговПоДоговору(ЭтотОбъект,мДоговорКонтрагента);
  
 
  Если ТаблицаДолговПоСделкам.Количество()=0 Тогда
  Сообщить("Долгов ПО ЗАКАЗАМ по договору "+СокрЛП(мДоговорКонтрагента.Наименование) +" не обнаружено. Заполнение не произведено.");	  
  Возврат;
  КонецЕсли;  
  
    // Заполняем таблицу
   //1. удаляем все старые строки по нашему договору
   сч=0;
   Пока сч < ТаблицаПлатежейПоДоговорамОтветственногоЛица.Количество() Цикл
	   Если ТаблицаПлатежейПоДоговорамОтветственногоЛица[сч].ДоговорКонтрагента=мДоговорКонтрагента Тогда
		   ТаблицаПлатежейПоДоговорамОтветственногоЛица.Удалить(сч);
	   Иначе 
		   сч=сч+1;	
	   КонецЕсли;	
   КонецЦикла;

   //2.копируем таблицу долгов по сделкам в Расшифровку платежа, чтобы не было превышения СуммыОплатыПоДоговору. 
   // СуммаОплатыПоДоговору - это сумма оплаты по договору, введенная основным менеджером контрагента
   
   ФлагНомерСтроки=0;
   номСтр=0;
   Для каждого строкаТЗ из ТаблицаДолговПоСделкам Цикл
	   номСтр=номСтр+1;
	Если СуммаОплатыПоДоговору<=0 Тогда
		Прервать;
	КонецЕсли;	
	СтрокаТаблицыПлатежей=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Добавить();	
	СтрокаТаблицыПлатежей.ДоговорКонтрагента=мДоговорКонтрагента;
	СтрокаТаблицыПлатежей.Сделка=строкаТЗ.Сделка;
	Если ЗначениеНеЗаполнено(строкаТЗ.Сделка) Тогда
		ФлагНомерСтроки=номСтр;
	КонецЕсли;	
	СуммаПлатежа=Макс(Мин (СуммаОплатыПоДоговору,строкаТЗ.СуммаДолга),0);
	СуммаОплатыПоДоговору=СуммаОплатыПоДоговору-СуммаПлатежа;
	СтрокаТаблицыПлатежей.СуммаПлатежа=СуммаПлатежа;
	
КонецЦикла;	
// 3. остаток суммы оплаты по договору отнесем на  этот же договор, но по пустой аналитике
Если СуммаОплатыПоДоговору>0 Тогда
	Если ФлагНомерСтроки>0 Тогда // были долги отнесенные на пустую сделку, и чтобы не повторять платеж по пустой сделке
		ТаблицаПлатежейПоДоговорамОтветственногоЛица[ФлагНомерСтроки-1].СуммаПлатежа=ТаблицаПлатежейПоДоговорамОтветственногоЛица[ФлагНомерСтроки-1].СуммаПлатежа+СуммаОплатыПоДоговору;
	Иначе	
    СтрокаПлатеж=ТаблицаПлатежейПоДоговорамОтветственногоЛица.Добавить();
	СтрокаПлатеж.ДоговорКонтрагента=мДоговорКонтрагента;
	СтрокаПлатеж.СуммаПлатежа=СуммаОплатыПоДоговору;
	КонецЕсли;
КонецЕсли;  



КонецПроцедуры	

Процедура ЗаполнитьРасшифровкуПлатежейДляМенеджеров() 
	
	Если Организация.Пустая() Тогда
		СообщитьОбОшибке("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		СообщитьОбОшибке("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
	КонецЕсли;

	
	ЗапросПоДоговорам=Новый Запрос;
	ЗапросПоДоговорам.Текст="ВЫБРАТЬ Ссылка ДоговорКонтрагента ИЗ   Справочник.ДоговорыКонтрагентов 
	|ГДЕ Владелец = &Владелец И
	|(ВедениеВзаиморасчетов = &ПоЗаказам 
    |ИЛИ ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
    |ИЛИ ВедениеВзаиморасчетов = &ПоСчетам)
	|И ВидДоговора = &ВидДоговора";
	ЗапросПоДоговорам.УстановитьПараметр("Владелец",Контрагент);
	ЗапросПоДоговорам.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
    ЗапросПоДоговорам.УстановитьПараметр("ПоРасчетнымДокументам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
    ЗапросПоДоговорам.УстановитьПараметр("ПоСчетам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	ЗапросПоДоговорам.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ФормаВыбораДоговора=Обработки.ПодборРасшифровкаПлатежаДляМенеджеров.ПолучитьФорму("ФормаВыбораДоговоров");
	ФормаВыбораДоговора.ОбработкаОбъект.ДоговорыКонтрагентов.Загрузить(ЗапросПоДоговорам.Выполнить().Выгрузить());
	ФормаВыбораДоговора.ОбработкаОбъект.Контрагент=Контрагент;
	//ФормаВыбораДоговора.СписокДоговоры.ЗагрузитьЗначения(ЗапросПоДоговорам.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента"));
	СписокВыбранныхДоговоров=ФормаВыбораДоговора.ОткрытьМодально();
	Если  ЗначениеНеЗаполнено(СписокВыбранныхДоговоров) Тогда 
		Сообщить("Ни выбран ни один из договоров контрагента.",СтатусСообщения.Важное);	
		Возврат;
	КонецЕсли;
	
	Если СписокВыбранныхДоговоров.Количество()=0 Тогда
		Сообщить("Ни выбран ни один из договоров контрагента.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;	
	
	 Запрос=Новый Запрос;
	 Запрос.Текст="ВЫБРАТЬ
 |  ДоговорКонтрагента КАК ДоговорКонтрагента,
 |  Сделка КАК Сделка,
 |  Сделка.Дата КАК ДатаВозникновения,
 |  ЕстьNULL(Сделка.ДатаОплаты,Сделка.Дата) КАК ДатаОплаты,
 |  СуммаВзаиморасчетовОстаток КАК СуммаПлатежа,
 |  1 КАК КурсВзаиморасчетов,
 |  СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов
 |   ИЗ
 |   РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ДоговорКонтрагента.Владелец=&Контрагент
 |И ДоговорКонтрагента.Организация=&Организация И ДоговорКонтрагента.ВидДоговора = &ВидДоговора
 |   		И (ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоЗаказам 
 |   			ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
 |   			ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоСчетам)) 
 |     ГДЕ
 |   (СуммаВзаиморасчетовОстаток >0)  и ДоговорКонтрагента в (&ДоговорыКонтрагентов)
 | УПОРЯДОЧИТЬ ПО ЕстьNULL(Сделка.ДатаОплаты,Сделка.Дата)";
 
 Запрос.УстановитьПараметр("Организация",Организация);
 Запрос.УстановитьПараметр("Контрагент",Контрагент);
 
 Запрос.УстановитьПараметр("ПоЗаказам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
 Запрос.УстановитьПараметр("ПоРасчетнымДокументам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
 Запрос.УстановитьПараметр("ПоСчетам",Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
 
 Запрос.УстановитьПараметр("ДоговорыКонтрагентов",СписокВыбранныхДоговоров);
 Запрос.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);

 
 ТЗРасшифровкаПлатежа=Запрос.Выполнить().Выгрузить();
 
 // Пени
 
 ТЗРасшифровкаПлатежа.Колонки.Добавить("ПризнакСортировки");
 
 Для каждого СтрТЗРасшифровки Из ТЗРасшифровкаПлатежа Цикл
	 
	 Если СтрТЗРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		 
		 Если СтрТЗРасшифровки.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.Пени Тогда
			 
			 СтрТЗРасшифровки.ПризнакСортировки = 1;
			 
		 Иначе
			 
			 СтрТЗРасшифровки.ПризнакСортировки = 3;
			 
		 КонецЕсли;
		 
	 ИначеЕсли СтрТЗРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		 
		 Если СтрТЗРасшифровки.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.Пени Тогда
			 
			 СтрТЗРасшифровки.ПризнакСортировки = 2;
			 
		 Иначе
			 
			 СтрТЗРасшифровки.ПризнакСортировки = 4;
			 
		 КонецЕсли;
		 
	 Иначе
		 
		 СтрТЗРасшифровки.ПризнакСортировки = 5;
		 
	 КонецЕсли; 	
	 
 КонецЦикла;
 
 ТЗРасшифровкаПлатежа.Сортировать("ПризнакСортировки, ДатаОплаты");
 
 // Пени
 
 ВсегоПлатежей=0;
 Если ТЗРасшифровкаПлатежа.Количество()>0 Тогда
	 РасшифровкаПлатежа.Очистить(); 
	 Для каждого СтрокаДолг из ТЗРасшифровкаПлатежа Цикл
		 
		 Если ВсегоПлатежей+СтрокаДолг.СуммаПлатежа <= СуммаДокумента Тогда
			 СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			 СтрокаПлатеж.ДоговорКонтрагента=СтрокаДолг.ДоговорКонтрагента;
			 СтрокаПлатеж.Сделка=СтрокаДолг.Сделка;
			 СтрокаПлатеж.СуммаПлатежа=СтрокаДолг.СуммаПлатежа;
			 СтрокаПлатеж.КурсВзаиморасчетов=1;
			 СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаДолг.СуммаПлатежа;
			 ВсегоПлатежей=ВсегоПлатежей+СтрокаДолг.СуммаПлатежа;
			 
		 ИначеЕсли ВсегоПлатежей<СуммаДокумента Тогда
			 СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			 СтрокаПлатеж.ДоговорКонтрагента=СтрокаДолг.ДоговорКонтрагента;
			 СтрокаПлатеж.Сделка=СтрокаДолг.Сделка;
			 СтрокаПлатеж.СуммаПлатежа=СуммаДокумента-ВсегоПлатежей;
			 СтрокаПлатеж.КурсВзаиморасчетов=1;
			 СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;				
			 ВсегоПлатежей=СуммаДокумента;
			 
		 Иначе
			 
			 Прервать;
			 
		 КонецЕсли;
		 
	 КонецЦикла;	
	 Если  ВсегоПлатежей< СуммаДокумента Тогда
		 ФормаВыбораДоговораДляАванса=Обработки.ПодборРасшифровкаПлатежаДляМенеджеров.ПолучитьФорму("ФормаВыбораДоговораДляАванса");
		 ФормаВыбораДоговораДляАванса.ОбработкаОбъект.Контрагент=Контрагент;
		 ФормаВыбораДоговораДляАванса.Уведомление="Сумма документа:"+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+Символы.ПС+" больше долга на выбранных договорах "+Формат(ВсегоПлатежей,"ЧЦ=15; ЧДЦ=2")+".";
		 ФормаВыбораДоговораДляАванса.Уведомление=ФормаВыбораДоговораДляАванса.Уведомление+Символы.ПС+"Выберите договор для отнесения суммы аванса:"+Формат(СуммаДокумента-ВсегоПлатежей,"ЧЦ=15; ЧДЦ=2");
		 ДоговорДляАванса=ФормаВыбораДоговораДляАванса.ОткрытьМодально();
		 Если не ЗначениеНеЗаполнено(ДоговорДляАванса) Тогда
			 СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			 СтрокаПлатеж.ДоговорКонтрагента=ДоговорДляАванса;
			 СтрокаПлатеж.СуммаПлатежа=СуммаДокумента-ВсегоПлатежей;
			 СтрокаПлатеж.КурсВзаиморасчетов=1;
			 СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента-ВсегоПлатежей;
		 КонецЕсли;
		 
	 КонецЕсли;	
 Иначе
	 Сообщить("По выбранным договорам долга нет.");	
  КонецЕсли;
КонецПроцедуры

//***2018.02.18 задача №39893
Процедура КоманднаяПанельПлатежиЗаполнитьРасшифровкуПоНомерамСчетовИзНазначенияПлатежа(Кнопка)
	
	СтрокаНазначениеПлатежа = НРег(НазначениеПлатежа);
	
	//если найдем слова сумма и/или ндс, сокращаем строку поиска до них, т.к. обычно сумма и ндс пишутся в конце назначения платежа
	ПозицияСловаСумма = Найти(СтрокаНазначениеПлатежа, "сумма");
	ПозицияСловаНДС = Найти(СтрокаНазначениеПлатежа, "ндс");
	Если ПозицияСловаСумма > 0 И ПозицияСловаНДС > 0 Тогда
		ДлинаОбрабатываемойСтроки = ?(ПозицияСловаСумма < ПозицияСловаНДС, ПозицияСловаСумма, ПозицияСловаНДС);
	Иначе
		Если ПозицияСловаСумма > 0 Тогда
			ДлинаОбрабатываемойСтроки = ПозицияСловаСумма;
		ИначеЕсли ПозицияСловаНДС > 0 Тогда
			ДлинаОбрабатываемойСтроки = ПозицияСловаНДС;
		Иначе
			ДлинаОбрабатываемойСтроки = СтрДлина(СтрокаНазначениеПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНомеров = Новый ТаблицаЗначений;
	ТаблицаНомеров.Колонки.Добавить("НомерДокумента");
	ТаблицаНомеров.Колонки.Добавить("ЗаказПокупателя");
	ТаблицаНомеров.Колонки.Добавить("Реализация");
	
	НаборЦифр = "";
	Для i=1 По ДлинаОбрабатываемойСтроки Цикл
		Символ = Сред(НазначениеПлатежа, i, 1);		
		Если Найти("0123456789", Символ) = 0 Тогда
			Если НЕ НаборЦифр = "" Тогда
				Если СтрДлина(НаборЦифр) > 4 Тогда
					СтрТЗ = ТаблицаНомеров.Добавить();
					СтрТЗ.НомерДокумента = НаборЦифр;
				КонецЕсли;
				НаборЦифр = "";
			КонецЕсли;
		Иначе
			НаборЦифр = НаборЦифр + Символ;
		КонецЕсли;
	КонецЦикла;
			
	Если ТаблицаНомеров.Количество() > 0 Тогда
		Для каждого СтрТЗ Из ТаблицаНомеров Цикл
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата", ДобавитьМесяц(Дата, -12));
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("Номер", "%"+СтрТЗ.НомерДокумента+"%");
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеализацияТоваровУслуг.Ссылка
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			               |ГДЕ
			               |	РеализацияТоваровУслуг.Дата > &Дата
			               |	И РеализацияТоваровУслуг.Контрагент = &Контрагент
			               |	И РеализацияТоваровУслуг.Номер ПОДОБНО &Номер";
			Результат = Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				СтрТЗ.ЗаказПокупателя = Результат.Ссылка.Сделка;
				СтрТЗ.Реализация = Результат.Ссылка;
			Иначе
				Запрос.Текст = "ВЫБРАТЬ
				               |	ЗаказПокупателя.Ссылка
				               |ИЗ
				               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				               |ГДЕ
				               |	ЗаказПокупателя.Контрагент = &Контрагент
				               |	И ЗаказПокупателя.Номер ПОДОБНО &Номер
				               |	И ЗаказПокупателя.Дата > &Дата";
				Результат = Запрос.Выполнить().Выбрать();
				Если Результат.Следующий() Тогда
					СтрТЗ.ЗаказПокупателя = Результат.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПлатежейПоДоговорамОтветственногоЛица.Очистить();
		Для каждого СтрТЗ Из ТаблицаНомеров Цикл
			Если ТипЗНЧ(СтрТЗ.ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				Если ТаблицаНомеров.Количество() > 1 Тогда
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Сделка", СтрТЗ.ЗаказПокупателя);
					Запрос.Текст = "ВЫБРАТЬ
					               |	ЕСТЬNULL(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток, 0) КАК СуммаДолга
					               |ИЗ
					               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, Сделка = &Сделка) КАК ВзаиморасчетыСКонтрагентамиОстатки";
					Результат = Запрос.Выполнить().Выбрать();
					Если Результат.Следующий() Тогда
						СуммаПлатежа = Результат.СуммаДолга;
					КонецЕсли;
				Иначе
					СуммаПлатежа = СуммаДокумента;
				КонецЕсли;
				СтрТЧ = ТаблицаПлатежейПоДоговорамОтветственногоЛица.Добавить();
				СтрТЧ.ДоговорКонтрагента = СтрТЗ.ЗаказПокупателя.ДоговорКонтрагента;
				СтрТЧ.Сделка = СтрТЗ.ЗаказПокупателя;
				СтрТЧ.СуммаПлатежа = СуммаПлатежа;
				СтрТЧ.ДокументРеализации = ?(ТипЗНЧ(СтрТЗ.Реализация)=Тип("ДокументСсылка.РеализацияТоваровУслуг"), СтрТЗ.Реализация, Документы.РеализацияТоваровУслуг.ПустаяСсылка());
			Иначе
				Сообщить("По номеру " + СтрТЗ.НомерДокумента + " документы для заполнения расшифровки платежа не найдены.");
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщить("В назначении платежа не найдены номера счетов на оплату длиной более 4 символов, поиск документов для заполнения расшифровки платежа не выполнен.");
	КонецЕсли;
	
КонецПроцедуры
//***

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            	=НовыйКонтрагент;
		СчетКонтрагента			=НовыйКонтрагент.ОсновнойБанковскийСчет;
		
		СтрокаПлатеж.ДоговорКонтрагента             =?(НовыйДоговор.Пустая(),НовыйКонтрагент.ОсновнойДоговорКонтрагента,НовыйДоговор);
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
		
		ОтражатьВБухгалтерскомУчете =Истина;
		ОтраженоВОперУчете          =Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()


//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=РеквизитыКонтрагента[0].ТипКонтрагента;
	
	Если Кнопка.Имя = "ПросмотрКонтрагента" Тогда
		
		СтрокаИНН=РеквизитыКонтрагента.Найти(РеквизитыКонтрагента[0].ТипКонтрагента+"ИНН","Реквизит");
		
		Если НЕ СтрокаИНН=Неопределено Тогда
			
			ИННКраткий=СтрокаИНН.Значение;
			НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
			
			Если НЕ НовыйКонтрагент.Пустая() Тогда
				
				НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
				ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
				ОткрытьЗначение(НовыйКонтрагент);
				
			Иначе
				
				Обработка.СписокНеНайденных(РеквизитыКонтрагента,,Истина);
				
				Если РеквизитыКонтрагента.Количество()>0 Тогда
					
					ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
					ФормаКонтрагентов.ОткрытьМодально();
					
					// Проверяем, не был ли создан контрагент в сеансе работы с обработкой
					НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
					
					Если НЕ НовыйКонтрагент.Пустая() Тогда
						
						НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
						ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	Иначе
		
		НовыйКонтрагент       =Обработка.СоздатьКонтрагента(,РеквизитыКонтрагента, Организация);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры


Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры


Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Строка = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	Строка.статьяДвиженияДенежныхСредств = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
КонецПроцедуры


Процедура ПодразделениеПриИзменении(Элемент)
	
	//+++Шарафутдинов 01.03.2018
	//Если не ВозможностьВыбораПодразделения2018(Дата,Подразделение) тогда
	//	Сообщить("Подразделение должно участвовать в бюджетном планировании. Выберите другое подразделение!");
	//	Подразделение = Справочники.Подразделения.ПустаяСсылка();
	//	Возврат;		
	//КонецЕсли;
	
	//---Шарафутдинов 01.03.2018

	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры


	Процедура КонтрагентПриИзменении(Элемент)
	
	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаКонтрагента();
	
	ПриИзмененииДоговора();
	УстановитьФокус();
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетОрганизации="";
		Возврат;
	Иначе
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;

		ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
	                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);
	КонецЕсли;	
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

Процедура РасшифровкаПлатежаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЗначениеНеЗаполнено(ДанныеСтроки.Сделка) Тогда
	ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст =ЛОЖЬ;	
	ИначеЕсли 	ТипЗнч(ДанныеСтроки.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст =Истина;	
	ОформлениеСтроки.Ячейки.ДатаОплаты.Текст=Формат(ДанныеСтроки.Сделка.ДатаОплаты,"ДФ=dd.MM.yy");	
КонецЕсли;	

Если ОформлениеСтроки.ДанныеСтроки.ДоговорКонтрагента.ОтветственноеЛицо=глТекущийПользователь Тогда
	ОформлениеСтроки.ЦветФона=WebЦвета.БледноЛиловый;
КонецЕсли;	

ОформлениеСтроки.Ячейки.Пользователь.ОтображатьТекст=Истина;
ОформлениеСтроки.Ячейки.Пользователь.Текст=глТекущийПользователь;


КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура РасшифровкаПлатежаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.ДоговорКонтрагента) Тогда
		Сообщить("Договор не выбран!",СтатусСообщения.Важное);
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеНеЗаполнено(Элемент.ТекущиеДанные.Сделка) Тогда
		ОстатокПоСделке=0;
		Запрос=Новый Запрос;	
		Запрос.Текст="ВЫБРАТЬ
		|	ЕстьNULL(Сумма(СуммаВзаиморасчетовОстаток),0) Сумма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(,
		|		ДоговорКонтрагента = &ДоговорКонтрагента
		|			И Сделка = &Сделка) ";
	Запрос.УстановитьПараметр("ДоговорКонтрагента",Элемент.ТекущиеДанные.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",Элемент.ТекущиеДанные.Сделка);
	ТаблицаОстатокПоСделке=Запрос.Выполнить().Выгрузить();
	Если ТаблицаОстатокПоСделке.Количество()>0 Тогда
	ОстатокПоСделке=ТаблицаОстатокПоСделке[0].Сумма;
	КонецЕсли;
	Если не ЭтоНовый() Тогда	
		Запрос.Текст="ВЫБРАТЬ 
		| ЕстьNULL(Сумма(СуммаВзаиморасчетов),0) Сумма ИЗ
		| РегистрНакопления.ВзаиморасчетыСКонтрагентами 
		|		ГДЕ ДоговорКонтрагента= &ДоговорКонтрагента  И Сделка=&Сделка
		|И	Регистратор = &Регистратор И ВидДвижения=&Расход ";
		Запрос.УстановитьПараметр("Регистратор",Ссылка);		
		Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Элемент.ТекущиеДанные.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Сделка",Элемент.ТекущиеДанные.Сделка);
		ДвиженияДокПоСделке=Запрос.Выполнить().Выгрузить();
		Если ДвиженияДокПоСделке.Количество()>0 Тогда
			ОстатокПоСделке=ОстатокПоСделке+ДвиженияДокПоСделке[0].Сумма;	
		КонецЕсли;	
	КонецЕсли;	
		
       	Если ОстатокПоСделке<Элемент.ТекущиеДанные.СуммаВзаиморасчетов Тогда
			Отказ=Истина;
			Сообщить("Долг по сделке "+Строка(Элемент.ТекущиеДанные.Сделка)+ " составляет "+Формат(ОстатокПоСделке,"ЧЦ=15; ЧДЦ=2")+ВалютаДокумента.Наименование+"."+Символы.ПС+"Введенная вами сумма "+Формат(Элемент.ТекущиеДанные.СуммаВзаиморасчетов,"ЧЦ=15; ЧДЦ=2")+"больше долга по этой сделке",СтатусСообщения.Важное);
		КонецЕсли;	
	//Иначе
	//	Сообщить("По данной сделке нет долга!",СтатусСообщения.Важное);
	//	Отказ=Истина;
	КонецЕсли;	
    
КонецПроцедуры

Процедура КоманднаяПанельПлатежиРассчитатьАванс(Кнопка)
	ФормаДоговоровПоКонтрагенту=Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(  ,Контрагент,) ;
	ФормаДоговоровПоКонтрагенту.Открыть();
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанельПлатежиИнфКнопка(Кнопка)
	// производим анализ данного ППВх
	ПлатежейПоСделкам=0;
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		Предупреждение("Не выбрано ни одного платежа в расшифровке");
	Иначе
		Для каждого строкаРасшифровки ИЗ РасшифровкаПлатежа Цикл
			Если не ЗначениеНеЗаполнено(строкаРасшифровки.ДоговорКонтрагента) Тогда
				Если  (строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам или
					строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам или
					строкаРасшифровки.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
					И не ЗначениеНеЗаполнено(строкаРасшифровки.Сделка) Тогда
					ПлатежейПоСделкам=ПлатежейПоСделкам+строкаРасшифровки.СуммаПлатежа;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Предупреждение("По данному документу сумма платежей по отгрузкам: "+Формат(ПлатежейПоСделкам,"ЧЦ=15; ЧДЦ=2; ЧН=0")+Строка(ВалютаДокумента)+"."+Символы.ПС+"отнесено на  аванс:"+Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа")-ПлатежейПоСделкам,"ЧЦ=15; ЧДЦ=2; ЧН=0")+Строка(ВалютаДокумента)+".");	
		
	КонецЕсли;	
	 
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПоказатьДолгиПоДоговору(Кнопка)
	Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	Отчет.ЗаполнитьНачальныеНастройки();
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	ФормаОбработки.Открыть();
	
	//Отчет.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		СтрОтб.Использование = Ложь;	
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Ссылка.Контрагент;
	СтрОтб.Использование = Истина;

	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("ДоговорКонтрагента");
	КонецЕсли;
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента;
	СтрОтб.Использование = Истина;	
	
	Если ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Найти("Сделка") = Неопределено Тогда
		СтрОтб = ФормаОбработки.ПостроительОтчета.ИзмеренияСтроки.Добавить("Сделка");
	Иначе
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Сделка");
	КонецЕсли;
	
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ДоговорКонтрагента.Поля.ОтветственноеЛицо.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.ДоговорКонтрагента.Поля.ОтветственноеЛицо.Имя);
	
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;

КонецПроцедуры

Функция ЗаполнитьТаблицуПлатежейПоДоговорамОтветственногоЛица()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента,
	             |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка,
	             |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа,
	             |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДокументРеализации
	             |ИЗ
	             |	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	             |ГДЕ
	             |	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	             |	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	
	//+++Шарафутдинов выскакивала пустая Тч при отборе по региону
	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЖурналыОтборПоРегиону")  Тогда
		СЗКонтрагенты = ПолучитьСписокКонтрагентовМенеджераПоРегиону(ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Контрагент", СЗКонтрагенты);		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДоговорКонтрагента.ОтветственноеЛицо = &ОтветственноеЛицо","ДоговорКонтрагента.Владелец В (&Контрагент)");
	иначе
		Запрос.УстановитьПараметр("ОтветственноеЛицо",ПараметрыСеанса.ТекущийПользователь);
		
	КонецЕсли; 	
	//---Шарафутдинов выскакивала пустая Тч при отборе по региону
	
	ТЗПлатежей= Запрос.Выполнить().Выгрузить();
	
	Возврат	ТЗПлатежей;
	
КонецФункции

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если  не ЗначениеНеЗаполнено(ДанныеСтроки.Сделка)
		И ТипЗнч(ДанныеСтроки.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") 
		И не ЗначениеНеЗаполнено(ДанныеСтроки.Сделка.ДатаОплаты) Тогда
		ОформлениеСтроки.Ячейки.ДатаОплаты.ОтображатьТекст=Истина;
	ОформлениеСтроки.Ячейки.ДатаОплаты.Текст=Формат(ДанныеСтроки.Сделка.ДатаОплаты,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;	
КонецПроцедуры

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаДоговорКОнтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
ВыбранныйДоговор=?(ЗначениеНеЗаполнено(ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента),
	Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент,ВыбранныйДоговор ,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	//Плотников
	Если ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателя" 
		и Организация <> Справочники.Организации.НайтиПоКоду("00001") Тогда
		ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателяСезонный";
	КонецЕсли;

	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные.ДоговорКонтрагента, 
	Документы.ЗаказПокупателя.ПустаяСсылка(), СтандартнаяОбработка,  ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);


КонецПроцедуры




Функция ТаблицыЗначенийИдентичны(Таб1,Таб2) //2 столбца 'ДоговорКонтрагента' и 'СуммаПлатежа'
	
	    // проверяем для каждой строки из Таб1 на соответствие строке из Таб2
		Для каждого строкаТаб1 Из Таб1 Цикл
			НайдСтрока=Таб2.Найти(строкаТаб1.ДоговорКонтрагента,"ДоговорКонтрагента");
			Если НайдСтрока=Неопределено Тогда
				Сообщить("Договор '"+Строка(строкаТаб1.ДоговорКонтрагента)+"' не был указан основным менеджером контрагента.");
				Возврат Ложь;
			Иначе
				Если НайдСтрока.СуммаПлатежа<>строкаТаб1.СуммаПлатежа Тогда
							Сообщить("Сумма платежа по договору '"+Строка(строкаТаб1.ДоговорКонтрагента)+"'" +Строка(строкаТаб1.СуммаПлатежа)+
							" отличается от той, которая указана основным менеджером контрагента:"+Строка(НайдСтрока.СуммаПлатежа));
							Возврат Ложь;
				КонецЕсли;	
    		КонецЕсли;	
		КонецЦикла;	
	    //теперь в обратную сторону
		 Для каждого строкаТаб2 Из Таб2 Цикл
			НайдСтрока=Таб1.Найти(строкаТаб2.ДоговорКонтрагента,"ДоговорКонтрагента");
			Если НайдСтрока=Неопределено Тогда
				Сообщить("Договор '"+Строка(строкаТаб2.ДоговорКонтрагента)+"' был указан основным менеджером контрагента.");
				Возврат Ложь;
			Иначе
				Если НайдСтрока.СуммаПлатежа<>строкаТаб2.СуммаПлатежа Тогда
							Сообщить("Сумма платежа по договору '"+Строка(НайдСтрока.ДоговорКонтрагента)+"'" +Строка(НайдСтрока.СуммаПлатежа)+
							" отличается от той, которая указана основным менеджером контрагента:"+Строка(строкаТаб2.СуммаПлатежа));
							Возврат Ложь;
				КонецЕсли;	
    		КонецЕсли;	
		КонецЦикла;	
Возврат Истина;
	
КонецФункции	

Процедура ТаблицаПлатежейПоДоговорамОтветственногоЛицаДоговорКОнтрагентаПриИзменении(Элемент)
	
	стр1 = ЭлементыФормы.ТаблицаПлатежейПоДоговорамОтветственногоЛица.ТекущиеДанные;
	Если найти(стр1.ДоговорКонтрагента.Наименование,"*")>0 тогда
		Предупреждение("НЕЛЬЗЯ использовать договор * ",10);
		стр1.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента; // основной из документа!
	КонецЕсли;	

КонецПроцедуры


































