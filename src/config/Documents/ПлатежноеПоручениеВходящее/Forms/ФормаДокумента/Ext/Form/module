////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОтражатьВЗатратах.Заголовок="Сторнировать затр.";
	ЭлементыФормы.КурсВзаиморасчетовПрочееПоступление.Видимость = Ложь;	
	
	Если ЕстьРасчетыСКонтрагентами Тогда
	 
	 	Если Список Тогда
		 	УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	 	Иначе
		 	УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность=Истина;
	 
		ЭлементыФормы.НадписьРедактировать.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список.Видимость = НЕ ЧастичнаяОплата;
		ЭлементыФормы.Список1.Видимость = НЕ ЧастичнаяОплата;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора=Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
		
		Если Константы.ОплатыРаспределяютМенеджеры.Получить() 
			и ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
			и не ЗначениеНеЗаполнено(Контрагент) и не ЗначениеНеЗаполнено(Контрагент.ОсновнойМенеджерКонтрагента)  Тогда
            ЭлементыФормы.Сделка.Доступность=Ложь;
			ЭлементыФормы.НадписьОсновнойМенеджер.Заголовок="Основной менеджер контрагента:"+Строка(Контрагент.ОсновнойМенеджерКонтрагента);
		Иначе	
			ЭлементыФормы.НадписьОсновнойМенеджер.Заголовок="Менеджер не указан";
     	КонецЕсли;	
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.ОтражатьВЗатратах.Заголовок="отразить доход";
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		ЭлементыФормы.КурсВзаиморасчетовПрочееПоступление.Видимость = Истина;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
			
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		
		ЭлементыФормы.Сделка.Доступность=Ложь;
		
        ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;

	КонецЕсли;
	
	Если ЧастичнаяОплата Тогда
		ЭтаФорма.ТолькоПросмотр=Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Ложь;
		УстановитьТекущуюСтраницу("СтраницаЧастичнаяОплата", ЭлементыФормы.ПанельОплата);
		ЭлементыФормы.КнопкаПодбор.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Заполнить.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность=Ложь;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Истина;
		УстановитьТекущуюСтраницу("СтраницаОплата", ЭлементыФормы.ПанельОплата);
		ЭлементыФормы.КнопкаПодбор.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Заполнить.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность=Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Истина;
	Иначе
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
	КонецЕсли;
	
	Если Не Список И ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
	    ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
		
	Иначе
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
	    ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
				
	КонецЕсли;
	
	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");
    
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	// { Лапенков (договор документа каждый раз должен устанавливаться при выборе договора)
	Если РасшифровкаПлатежа.Количество()>0 Тогда
		Если не ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		
		КонецЕсли;
	КонецЕсли;
    //  }
	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если ЗначениеНеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
КонецПроцедуры // ПриИзмененииКонтрагента

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаПлатеж.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,      
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
	//*** 20150112
	//Если ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("840") Тогда 
	//типовой пересчет из валюты в валюту нам не подходит. считаем просто (для всех валют):
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * СтрокаПлатеж.КурсВзаиморасчетов;
	//КонецЕсли;
	//
									
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()
								
// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов
															
// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()								 

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)), СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			мТекущаяВалютаВзаиморасчетов = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если мТекущаяВалютаВзаиморасчетов=ВалютаДокумента Тогда
				 Строка.СуммаВзаиморасчетов=Строка.СуммаПлатежа;
			ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			
				Строка.СуммаВзаиморасчетов=ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
					мТекущаяВалютаВзаиморасчетов,
					КурсДокумента, Строка.КурсВзаиморасчетов,
					КратностьДокумента, Строка.КратностьВзаиморасчетов);
				
			КонецЕсли;
				
			ПересчитатьСуммуНДС(Строка);
			
			Если Не ЗначениеНеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					Строка.ДокументПланированияПлатежа="";
					Строка.КурсВзаиморасчетовПлан=0;
					Строка.СуммаПлатежаПлан=0;
				ИначеЕсли Строка.КурсВзаиморасчетовПлан>0 Тогда
					
					Если мТекущаяВалютаВзаиморасчетов=ВалютаДокумента Тогда
						Строка.СуммаПлатежаПлан=Строка.СуммаВзаиморасчетов;
						
					ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетовПлан <> 0) Тогда
						Строка.СуммаПлатежаПлан=ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, мТекущаяВалютаВзаиморасчетов,
						ВалютаДокумента,
						Строка.КурсВзаиморасчетовПлан,КурсДокумента,
						Строка.КратностьВзаиморасчетов,КратностьДокумента);	
					Иначе
						Строка.СуммаПлатежаПлан = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
			
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли
				
		КонецЕсли;	
				
		СуммаДокументаПриИзменении();
		
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
	                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);					
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетОрганизации="";
		Возврат;
	Иначе
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;

		ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
	                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);
	КонецЕсли;	
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если Организация.Пустая() Тогда

		СчетОрганизации = "";
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		
		ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		УстановитьНомерДокумента(ЭтотОбъект);
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

		
	Иначе
		
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
		
		УстановитьКурсДокумента();
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
	                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = СчетОрганизации.ВалютаДенежныхСредств.Наименование;

	КонецЕсли;
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВидОперации.Метаданные().ЗначенияПеречисления,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;

	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок=СформироватьТекстЧастичнаяОплата(Ссылка,"ДенежныеСредстваКПолучению","ДокументПолучения");
	КонецЕсли;

	//Установка меню Клиент-Банк
	УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;

	УстановитьВидимость();
	
	//Если ПроверенМенеджером и не яштАдминистративныеФункцииДоступны() и Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
	//	ЭлементыФормы.Список.Доступность=ЛОЖЬ;
	//	ЭлементыФормы.КоманднаяПанельПлатежи.Доступность=ЛОЖЬ;
	//  	ЭтаФорма.ТолькоПросмотр = Истина;
	//КонецЕсли;	
    
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)
	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя] = ВидОперации Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя];
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		
		ЕстьРасчетыСКонтрагентами=ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=ЕстьРасчетыПоКредитам(ВидОперации);
				
		УстановитьВидимость();
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если НЕ ЗначениеНеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаОрганизации();
	УстановитьНомерДокумента(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);


КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ Организация.Пустая() Тогда
		Элемент.ВыборПоВладельцу = Организация;	
	КонецЕсли;	

КонецПроцедуры // СчетОрганизацииНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НЕ Контрагент.Пустая() Тогда
		Элемент.ВыборПоВладельцу = Контрагент;	
	КонецЕсли;

КонецПроцедуры // СчетКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	ПересчитатьСуммуНДС(СтрокаПлатеж);
		
КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		//СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		//					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
		  СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов / СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

Процедура ОбновлениеОтображения()
		
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
	                                                                                 СтрокаПлатеж.КурсВзаиморасчетов,
	                                                                                 СтрокаПлатеж.КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
	// Надпись НадписьСуммаВзаиморасчетов
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Если ЗначениеНеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
		
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента.Наименование);
	//+++ 01.10.2015
	Если РасшифровкаПлатежа.Итог("СуммаПлатежа")>СуммаДокумента тогда
		ЭлементыФормы.НадписьИтогоСписок.ЦветТекста = webцвета.ТемноКрасный;
	ИначеЕсли РасшифровкаПлатежа.Итог("СуммаПлатежа")<СуммаДокумента тогда
		ЭлементыФормы.НадписьИтогоСписок.ЦветТекста = webцвета.ТемноСиний;
	ИначеЕсли РасшифровкаПлатежа.Итог("СуммаПлатежа")=СуммаДокумента тогда
		ЭлементыФормы.НадписьИтогоСписок.ЦветТекста = webцвета.Черный;
	КонецЕсли;
	
	Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
					ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				КонецЕсли;

			
			ТекстКурсаЗаявки= ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
							 СтрокаПлатеж.КурсВзаиморасчетовПлан,
							 СтрокаПлатеж.КратностьВзаиморасчетов,
							 мВалютаРегламентированногоУчета,
							 Истина);
							 
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
																						 
	КонецЕсли;
	
ЭлементыФормы.ИтогоЗатрат.Заголовок= Затраты.Итог("Сумма");																																						
ЭлементыФормы.ПанельПлатежи.Страницы["Затраты"].Видимость=ЭлементыФормы.ОтражатьВЗатратах.Значение;	
ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок=?(ЭлементыФормы.ОтражатьВЗатратах.Значение,ОтображениеЗакладок.Сверху,ОтображениеЗакладок.НеИспользовать);
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//Если Константы.ОплатыРаспределяютМенеджеры.Получить() и не яштАдминистративныеФункцииДоступны() 
	//	и ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
	//	и не ЗначениеНеЗаполнено(Контрагент) и не ЗначениеНеЗаполнено(Контрагент.ОсновнойМенеджерПокупателя)
	//	и Контрагент.ОсновнойМенеджерПокупателя<>глТекущийПользователь Тогда
	//	Если РасшифровкаПлатежа.Количество()>1 Тогда
	//		Сообщить("Только менеджер "+Строка(Контрагент.ОсновнойМенеджерПокупателя)+" имеет право разбивать оплату по суммам");
	//		Отказ=Истина;
	//		Возврат;
	//	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда
	//		Если не ЗначениеНеЗаполнено(РасшифровкаПлатежа[0].Сделка) Тогда
	//		Сообщить("Только менеджер "+Строка(Контрагент.ОсновнойМенеджерПокупателя)+" имеет право связывать оплаты с заказами или документами отгрузки");
	//		Отказ=Истина;
	//		Возврат;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЕсли;	
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() и ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя
		и не ЗначениеНеЗаполнено(Контрагент) и  РежимЗаписи=РежимЗаписиДокумента.Проведение  Тогда // и РежимЗаписи
		
		Отказ = не ПроверитьЗакрытиеДоговоровПенейИУслуг();
		
	КонецЕсли;

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ответственный.Пустая() Тогда
		Ответственный     = глТекущийПользователь;
	КонецЕсли;
	 // Лапенков (договор документа должен устанавливаться при выборе договора)
	 Если ЗначениеНеЗаполнено(ДоговорКонтрагента) и РасшифровкаПлатежа.Количество()>0 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		 
	 КонецЕсли;	 
	//Если РасшифровкаПлатежа.Количество()=1 Тогда
	//	ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;		
	//Иначе
	//	ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	//КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	ИтогоЗатрат=Затраты.Итог("Сумма");
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	
	Если НЕ ЗначениеНеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаКонтрагента();
	
	ПриИзмененииДоговора();
	УстановитьФокус();
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	//Плотников
	Если ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателя" 
		и Организация <> Справочники.Организации.НайтиПоКоду("00001") Тогда
		ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателяСезонный";
	КонецЕсли;
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
			
		Иначе
			
			Если Не ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
	//+++ 01.10.2015
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	//Плотников
	Если ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателя" 
		и Организация <> Справочники.Организации.НайтиПоКоду("00001") Тогда
		ПараметрыВыбора.ТипЗаказа = "ЗаказПокупателяСезонный";
	КонецЕсли;
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если ЗначениеНеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
										
			ЗаполнитьРеквизитыРеглУчета(СтрокаПлатеж,Организация, Контрагент, НДСПоУмолчанию);
		
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(ЗначениеНеЗаполнено(СтрокаПлатеж.СтавкаНДС),ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента,
		Организация, Контрагент, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
		
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	ПодборЗадолженностей(СтруктураПараметров);

	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() И 
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		// в соответствии с установленными константами
		ЗаполнитьРасшифровкуПлатежаВСоответствииСДолгами();
		Возврат;
	КонецЕсли;	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,ДоговорКонтрагента);
	
	ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежаВСоответствииСДолгами()
  	Если СуммаДокумента=0 Тогда
		Возврат;
	КонецЕсли;	
	
ТЗДолги=ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(ЭтотОбъект);

РасшифровкаПлатежа.Очистить();


ОстатокСуммыДолга=СуммаДокумента;

Для каждого строкаТЗ из ТЗДолги Цикл
	Если ОстатокСуммыДолга<=0 Тогда
		Прервать;
	КонецЕсли;	
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СуммаПлатежа=Макс(Мин (ОстатокСуммыДолга,строкаТЗ.СуммаДолга),0);
	ОстатокСуммыДолга=ОстатокСуммыДолга-СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=СуммаПлатежа;
    СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
	СтрокаРасшифровкаПлатежа.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	ПересчитатьСуммуНДС(СтрокаРасшифровкаПлатежа);
КонецЦикла;	

Если ОстатокСуммыДолга>0 Тогда // остаток суммы долга относим на договор НД
ТаблицаДоговоровНД=ВернутьТаблицуДоговоровКонтрагента(Организация,Контрагент,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,Справочники.ТипыДоговоров.НД);

Если ТаблицаДоговоровНД.Количество()>0 Тогда
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=ТаблицаДоговоровНД[0].ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;	
	СтрокаРасшифровкаПлатежа.СтавкаНДС=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяСтавкаНДС");
	ПересчитатьСуммуНДС(СтрокаРасшифровкаПлатежа);
Иначе
	Сообщить("У контрагента "+СокрЛП(Контрагент.Наименование) + " нет договора типа 'НД'. Требуется добавить в базу такой договор.");
	Возврат;
КонецЕсли;	
КонецЕсли;
ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	
КонецПроцедуры	
// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            	=НовыйКонтрагент;
		СчетКонтрагента			=НовыйКонтрагент.ОсновнойБанковскийСчет;
		
		СтрокаПлатеж.ДоговорКонтрагента             =?(НовыйДоговор.Пустая(),НовыйКонтрагент.ОсновнойДоговорКонтрагента,НовыйДоговор);
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.КлиентБанк.Кнопки, ЭтотОбъект);
		
		ОтражатьВБухгалтерскомУчете =Истина;
		ОтраженоВОперУчете          =Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()


//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=РеквизитыКонтрагента[0].ТипКонтрагента;
	
	Если Кнопка.Имя = "ПросмотрКонтрагента" Тогда
		
		СтрокаИНН=РеквизитыКонтрагента.Найти(РеквизитыКонтрагента[0].ТипКонтрагента+"ИНН","Реквизит");
		
		Если НЕ СтрокаИНН=Неопределено Тогда
			
			ИННКраткий=СтрокаИНН.Значение;
			НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
			
			Если НЕ НовыйКонтрагент.Пустая() Тогда
				
				НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
				ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
				ОткрытьЗначение(НовыйКонтрагент);
				
			Иначе
				
				Обработка.СписокНеНайденных(РеквизитыКонтрагента,,Истина);
				
				Если РеквизитыКонтрагента.Количество()>0 Тогда
					
					ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
					ФормаКонтрагентов.ОткрытьМодально();
					
					// Проверяем, не был ли создан контрагент в сеансе работы с обработкой
					НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
					
					Если НЕ НовыйКонтрагент.Пустая() Тогда
						
						НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
						ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	Иначе
		
		НовыйКонтрагент       =Обработка.СоздатьКонтрагента(,РеквизитыКонтрагента, Организация);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			НовыйДоговор =Обработка.СоздатьНужныйДоговор(НовыйКонтрагент, Организация, ТипКонтрагента="ПЛАТЕЛЬЩИК");
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент,НовыйДоговор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если ЗначениеНеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
	СтруктураПараметров.Вставить("Сделка"						,);
	
	ПодборДокументовПланирования(СтруктураПараметров);
									
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если ЗначениеНеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Строка = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	Строка.статьяДвиженияДенежныхСредств = ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя,Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
КонецПроцедуры

Процедура КоманднаяПанель1Перенести(Кнопка)
	// Вставить содержимое обработчика.
	Если (Затраты.Итог("Сумма")<>0) Тогда
		СуммаДокумента=Затраты.Итог("Сумма");
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
			ПересчитатьСуммуНДС(СтрокаПлатеж);
		Иначе
			Сообщить("В табличной части ""Расшифровка платежа"" несколько строк, необходимо вручную поправить суммы расшифровки.", СтатусСообщения.Важное);
        КонецЕсли ;
	КонецЕсли;
	

КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьНомерДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	Если не ЭтоНовый() И ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		// проверяем на ответственного за договор
		
		ФлагОткрыватьПоДругойФорме=ПроверитьВДокументеПлатежаЕстьДоговорыПользователя(Ссылка);
		Если ФлагОткрыватьПоДругойФорме Тогда
			Отказ=Истина;
			СтандартнаяОбработка=Ложь;
			Форма=ДокументОбъект.ПолучитьФорму("ФормаДокументаДляОтветственногоЗаДоговор");
			Форма.Открыть();
			Возврат;
		ИначеЕсли  НЕ (РольДоступна("Кассир") ИЛИ РольДоступна("яштФинДиректор") ИЛИ РольДоступна("ПолныеПрава")) Тогда
			СообщитьОбОшибке("Вы не имеете права открывать документ.");
			Отказ=Истина;
		КонецЕсли;
	ИначеЕсли РольДоступна("Кассир") ИЛИ РольДоступна("яштФинДиректор") ИЛИ РольДоступна("ПолныеПрава") 
		//02.06.15 Смирнов
		или (РольДоступна("TireTechnology") и Организация.Код="00004")
		Тогда
		// можно открывать но по другой форме
	
	Иначе
		СообщитьОбОшибке("Вы не имеете права открывать документ.");
		Отказ=Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура НазначениеПлатежаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНазначениеПлатежа = ПолучитьФорму("ФормаНазначенияПлатежа");
	ФормаНазначениеПлатежа.ДокументОбъект = ДокументОбъект;
	ФормаНазначениеПлатежа.ОткрытьМодально();

КонецПроцедуры

Процедура СчетПлательщикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент2, ДоговорКонтрагента2,
	//			ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры


Процедура КоманднаяПанельПлатежиЗаполнитьПоДолгамДоговоры(Кнопка)
	
	Если СуммаДокумента=0 Тогда
		Возврат;
	КонецЕсли;	
	
ТЗДолги=ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(ЭтотОбъект);

РасшифровкаПлатежа.Очистить();


ОстатокСуммыДолга=СуммаДокумента;

Для каждого строкаТЗ из ТЗДолги Цикл
	Если ОстатокСуммыДолга<=0 Тогда
		Прервать;
	КонецЕсли;	
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.Сделка=строкаТЗ.Сделка;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СуммаПлатежа=Макс(Мин (ОстатокСуммыДолга,строкаТЗ.СуммаДолга),0);
	ОстатокСуммыДолга=ОстатокСуммыДолга-СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=СуммаПлатежа;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=СуммаПлатежа;
    СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;
КонецЦикла;	

Если ОстатокСуммыДолга>0 Тогда // остаток суммы долга относим на договор НД
	
	Запрос= Новый Запрос;
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|Ссылка ДоговорКонтрагента
	|ИЗ Справочник.ДоговорыКонтрагентов 
	|ГДЕ Владелец = &Контрагент И ТипДоговора = &НД";

Запрос.УстановитьПараметр("Контрагент",Контрагент);
Запрос.УстановитьПараметр("НД",Справочники.ТипыДоговоров.НД);

ВыборкаНД=Запрос.Выполнить().Выбрать();

Если ВыборкаНД.Следующий() Тогда
	СтрокаРасшифровкаПлатежа=РасшифровкаПлатежа.Добавить();	
	СтрокаРасшифровкаПлатежа.ДоговорКонтрагента=ВыборкаНД.ДоговорКонтрагента;
	СтрокаРасшифровкаПлатежа.КурсВзаиморасчетов=1;
	СтрокаРасшифровкаПлатежа.СуммаПлатежа=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов=ОстатокСуммыДолга;
	СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств=Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПокупателя;	
Иначе
	Сообщить("У контрагента "+СокрЛП(Контрагент.Наименование) + " нет договора типа НД. Требуется добавить такой договор для отнесения суммы аванса");
КонецЕсли;	
КонецЕсли;
ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;


КонецПроцедуры


Функция ПроверитьЗакрытиеДоговоровПенейИУслуг()

	   // Если есть суммы платежей отнесенные на договоры факторинга, то проверка не выполняется
	Для каждого строкаРП Из РасшифровкаПлатежа Цикл
		Если не ЗначениеНеЗаполнено(строкаРП.ДоговорКонтрагента) Тогда
			Если строкаРП.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Факторинг Тогда
				    Возврат Истина;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	// Если НЕТ сумм платежей отнесенные на договоры факторинга
	
	СуммаОтнесенияНаДоговорыПеней=0;
	СуммаОтнесенияНаДоговорыПУ=0;
	СуммаОтнесенияНаДругиеДоговоры=0;
	
	Для каждого строкаРП из РасшифровкаПлатежа Цикл
		//Если ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Пени Тогда
		//	СуммаОтнесенияНаДоговорыПеней=СуммаОтнесенияНаДоговорыПеней+строкаРП.СуммаПлатежа;
		//ИначеЕсли ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.ВозмещаемыеУслуги Тогда 
		//	СуммаОтнесенияНаДоговорыПУ=СуммаОтнесенияНаДоговорыПУ+строкаРП.СуммаПлатежа;
		//Иначе
			СуммаОтнесенияНаДругиеДоговоры=СуммаОтнесенияНаДругиеДоговоры+строкаРП.СуммаПлатежа;
		//КонецЕсли;	
	КонецЦикла;	
	
	
ТЗДолги=ПолучитьТаблицуДолговКонтрагентаПоПенямИПУ(ЭтотОбъект);

Если ТЗДолги.Количество()>0 Тогда
	
	ТЗДолги.Колонки.Добавить("СуммаОплаты");
	СуммаВзаиморасчетов = РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов");
	
	Для каждого строкаТЗ из ТЗДолги Цикл
		строкаТЗ.СуммаОплаты=0;
		
		Отбор= Новый Структура("ДоговорКонтрагента,Сделка");
		Отбор.ДоговорКонтрагента=строкаТЗ.ДоговорКонтрагента;
		Отбор.Сделка=строкаТЗ.Сделка;
		
		НайдСтроки=РасшифровкаПлатежа.НайтиСтроки(Отбор);
		
		
		Если НайдСтроки.Количество()=0 Тогда // не нашел
			
		Иначе
			строкаТЗ.СуммаОплаты=НайдСтроки[0].СуммаВзаиморасчетов;
		КонецЕсли;	 
		
	КонецЦикла;	
	
		
	ИтогоОплатыПоДоговорамУслугПеней=0;
	ФлагБылиДоговорыУслуг=Ложь;
	СписокДоговоровУслуг= Новый СписокЗначений;
	
	//Для каждого строкаТЗ из ТЗДолги Цикл   // проверяем есть ли платежи , отнесенные не в полной мере сначала на пени, а потом на услуги
	//	ИтогоОплатыПоДоговорамУслугПеней=ИтогоОплатыПоДоговорамУслугПеней+строкаТЗ.СуммаОплаты;
	//	Если ИтогоОплатыПоДоговорамУслугПеней=СуммаВзаиморасчетов Тогда
	//		Прервать;
	//	КонецЕсли;	
	//	Если строкаТЗ.СуммаОплаты<строкаТЗ.СуммаДолга Тогда
	//		Если строкаТЗ.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Пени Тогда
	//			Если //СуммаОтнесенияНаДоговорыПУ+
	//				СуммаОтнесенияНаДругиеДоговоры>0 Тогда
	//				Сообщить("Сумма оплаты по договору "+ СокрЛП(строкаТЗ.ДоговорКонтрагента.Наименование)+ 
	//				" меньше долга по этому договору"+ ?(ЗначениеНеЗаполнено(строкаТЗ.Сделка),"",",сделке "+СокрЛП(Строка((строкаТЗ.Сделка)))),СтатусСообщения.Важное);
	//				Возврат Ложь;
	//			КонецЕсли;
			//ИначеЕсли строкаТЗ.ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.ВозмещаемыеУслуги Тогда
			//		Если СуммаОтнесенияНаДругиеДоговоры>0 Тогда
			//			Сообщить("Сумма оплаты по договору "+ СокрЛП(строкаТЗ.ДоговорКонтрагента.Наименование)+ 
			//			" меньше долга по этому договору"+ ?(ЗначениеНеЗаполнено(строкаТЗ.Сделка),"",",сделке "+СокрЛП(Строка((строкаТЗ.Сделка)))),СтатусСообщения.Важное);
			//			Возврат Ложь;
			//		КонецЕсли;	
	//			КонецЕсли;
	//		КОнецЕсли;		
	//		
	//КонецЦикла; 
	
		
Иначе
	Возврат Истина; // Долга по договорам перевыст. услуг и пеням нет
КонецЕсли;
Возврат Истина;
КонецФункции	

Процедура КоманднаяПанельПлатежиВыестиИнформациюПоДолгам(Кнопка)
	Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	Отчет.ЗаполнитьНачальныеНастройки();
	
	ФормаОбработки = Отчет.ПолучитьОсновнуюФорму();
	
	ФормаОбработки.Открыть();
	
	//Отчет.ОбщийОтчет.ДатаКон = КонецДня(ДатаКон);
	
	Для Каждого СтрОтб из ФормаОбработки.ПостроительОтчета.Отбор Цикл
		
		СтрОтб.Использование = Ложь;	
		
	КонецЦикла;
	
	///
	Если ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент") = Неопределено Тогда
	
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Добавить("Контрагент");
		
	Иначе
		
		СтрОтб = ФормаОбработки.ПостроительОтчета.Отбор.Найти("Контрагент");
	
	КонецЕсли; 
	
	СтрОтб.ВидСравнения = ВидСравнения.Равно;
	СтрОтб.Значение = Контрагент;
	СтрОтб.Использование = Истина;
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Очистить();
	ФормаОбработки.ПостроительОтчета.ВыбранныеПоля.Добавить(ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.ПутьКДанным, ФормаОбработки.ПостроительОтчета.ДоступныеПоля.Период.Имя);
	ФормаОбработки.ОбновитьОтчет();
	
	Возврат;

КонецПроцедуры





































