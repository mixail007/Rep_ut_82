Перем мВалютаРегламентированногоУчета Экспорт;      

Перем мОткрыватьФормаЗаполненияПоЗаказу Экспорт;

Перем ЭтоНовый Экспорт;

//БАЛАНС (04.12.2007)                       
//
Перем мПроведениеИзФормы Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()   Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СтранаПроисхождения КАК СтранаПроисхождения,
	|	НомерГТД КАК НомерГТД,
	|	СерияНоменклатуры КАК Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура                          КАК Номенклатура,
	|		ЕдиницаИзмерения                      КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест                  КАК ЕдиницаИзмеренияМест,
	|		Цена                                  КАК Цена,
	|		СтавкаНДС                             КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки                  КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры.НомерГТД            КАК НомерГТД,
	|		СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ХарактеристикаНоменклатуры            КАК ХарактеристикаНоменклатуры,
	|		СерияНоменклатуры                     КАК СерияНоменклатуры,
	|		СУММА(Количество)                     КАК Количество,
	|		СУММА(КоличествоМест)                 КАК КоличествоМест,
	|		СУММА(Сумма)                          КАК Сумма,
	|		СУММА(СуммаНДС)                       КАК СуммаНДС,
	|		МИНИМУМ(НомерСтроки)                  КАК НомерСтроки,
	|		0                                     КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Содержание,
	|	РеализацияТоваровУслуг.Содержание,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	0,
	|	0,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	2 КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Расходная накладная");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ФлагПечатиМест = (ЗапросТовары.Итог("КоличествоМест") > 0);
	ОбластьНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьМест    = Макет.ПолучитьОбласть("ШапкаТаблицы|Мест");
	ОбластьДанных  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок  = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы   = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если Не ФлагПечатиМест Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("КоличествоМест").ШиринаКолонки
		                                    + Макет.Область("ЕдиницаМест").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                    + Макет.Область("СуммаБезСкидки").ШиринаКолонки
		                                    + Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Строка|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьТовар.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Товар)
		                             + ПредставлениеСерий(ВыборкаСтрокТовары)
		                             + ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
		ТабДокумент.Присоединить(ОбластьТовар);

		Если ФлагПечатиМест Тогда
			ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		// Скидка может быть NULL
		ПроцентСкидки = ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(ЗначениеНеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ПроцентСкидки)* ПроцентСкидки;

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.ЦенаСоСкидкой  = ВыборкаСтрокТовары.Сумма/ВыборкаСтрокТовары.Количество;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьМест   = Макет.ПолучитьОбласть("Итого|Мест");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	Если ФлагПечатиМест Тогда
		ТабДокумент.Присоединить(ОбластьМест);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("ИтогоНДС|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТовар);
		Если ФлагПечатиМест Тогда
			ТабДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТОРГ12() Экспорт

	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент",    Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата КАК ДатаДокумента,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация КАК Контрагент,
	|	Организация КАК Руководители,
	// адрес доставки - отражается в Бух, пункт разгрузки - нет
	|	АдресДоставки КАК АдресДоставки,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА ВЫБОР КОГДА КонтрагентДляПечати = &ПустойКонтрагент
	|               	  ТОГДА Контрагент
	|					  ИНАЧЕ КонтрагентДляПечати КОНЕЦ
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ВЫБОР КОГДА КонтрагентДляПечати = &ПустойКонтрагент
	|		  ТОГДА Контрагент
	|		  ИНАЧЕ КонтрагентДляПечати КОНЕЦ КАК Покупатель,
	|	ВЫБОР КОГДА КонтрагентДляПечати = &ПустойКонтрагент
	|		  ТОГДА Контрагент
	|		  ИНАЧЕ КонтрагентДляПечати КОНЕЦ КАК Плательщик,
	|	ДоговорКонтрагента.Представление  КАК Основание,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	Подразделение,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов      КАК Курс,
	|	КратностьВзаиморасчетов КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС 
	//|	ЧерезТК,
	//|	ОтгрузкаЧерезЧП
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Если ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", ЭтотОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", ЭтотОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                 КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код  КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление            КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент КАК КоличествоВОдномМесте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоМест > 0 ТОГДА ВложенныйЗапрос.КоличествоМест * ВложенныйЗапрос.ЕдиницаИзмеренияМест.Вес
	|		ИНАЧЕ ВложенныйЗапрос.Количество * ВложенныйЗапрос.ЕдиницаИзмерения.Вес
	|	КОНЕЦ КАК МассаБрутто,
	|	ВложенныйЗапрос.Характеристика       КАК Характеристика,
	|	ВложенныйЗапрос.Серия                КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС            КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                 КАК Цена,
	|	ВложенныйЗапрос.Количество           КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест       КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС             КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки          КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Коэффициент     КАК КоэффициентМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                    КАК Серия,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(РеализацияТоваровУслуг.Количество)                    КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность) КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                 КАК НомерСтроки,
	|		0                                                           КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                  КАК Номенклатура,
	|	РеализацияТоваровУслуг.Содержание                    КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + " КАК ТоварКод,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	NULL                                                 КАК ВидУпаковки,
	|	NULL                                                 КАК КоличествоВОдномМесте,
	|	0                                                    КАК МассаБрутто,
	|	NULL                                                 КАК Характеристика,
	|	NULL                                                 КАК Серия,
	|	РеализацияТоваровУслуг.СтавкаНДС                     КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность     КАК Цена,
	|	РеализацияТоваровУслуг.Количество                    КАК Количество,
	|	NULL                                                 КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность КАК Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                   КАК НомерСтроки,
	|	1                                                    КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК ТоварКод,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК КоличествоВОдномМесте,
	|	РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес КАК МассаБрутто,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	NULL                                                  КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТОРГ12";

	Макет = ПолучитьОбщийМакет("ТОРГ12");

	// Выводим общие реквизиты шапки
	

	
	СведенияОПоставщике       = СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);	
		
	

	СведенияОПокупателе       	  = СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	
	СведенияОГрузополучателе  = СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	СведенияОГрузоотправитель = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);	

	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НомерДокумента = ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;

	Если Шапка.ЮрФизЛицо = Шапка.Грузоотправитель Тогда
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОПоставщике);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.Подразделение;

	Если СокрЛП(Шапка.АдресДоставки) <> "" Тогда
		ПредставлениеГрузополучателяДоАдреса    = ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,");
		ПредставлениеГрузополучателяПослеАдреса = ОписаниеОрганизации(СведенияОГрузополучателе, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "", "", ПредставлениеГрузополучателяДоАдреса+", ") + Шапка.АдресДоставки+?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;

	ОбластьМакета.Параметры.ПредставлениеПоставщика  = ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакета.Параметры.ПредставлениеПлательщика = ОписаниеОрганизации(СведенияОПокупателе);
	
	Если Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	   И Шапка.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбластьМакета.Параметры.Основание = Шапка.Основание;
	Иначе
		ЗапросЗаказ = Новый Запрос;
		ЗапросЗаказ.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		ЗапросЗаказ.Текст =
		"ВЫБРАТЬ
		|	Сделка.Номер       КАК Номер,
		|	Сделка.Дата        КАК Дата,
		|	Сделка.ВидОперации КАК ВидОперации,
		|	Сделка.Организация КАК Организация
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		ШапкаЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
		ШапкаЗаказ.Следующий();

		ОбластьМакета.Параметры.Основание = СформироватьЗаголовокДокумента(ШапкаЗаказ, Строка(ШапкаЗаказ.ВидОперации));
	КонецЕсли;

	// Выводим всевозможные коды
	ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
	ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПоставщикПоОКПО       = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО      = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОснованиеНомер        = "";
	ОбластьМакета.Параметры.ОснованиеДата         = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакета.Параметры.ТранспортнаяНакладнаяДата  = "";

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 20;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок <= 2 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоМассаБруттоНаСтранице = 0;
	ИтогоМестНаСтранице        = 0;
	ИтогоКоличествоНаСтранице  = 0;
	ИтогоСуммаНаСтранице       = 0;
	ИтогоНДСНаСтранице         = 0;
	ИтогоСуммаСНДСНаСтранице   = 0;

	// инициализация итогов по документу
	ИтогоМассаБрутто = 0;
	ИтогоМест        = 0;
	ИтогоКоличество  = 0;
	ИтогоСуммаСНДС   = 0;
	ИтогоСумма       = 0;
	ИтогоНДС         = 0;
	Ном              = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если ЗначениеНеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоМассаБруттоНаСтранице = 0;
			ИтогоМестНаСтранице        = 0;
			ИтогоКоличествоНаСтранице  = 0;
			ИтогоСуммаНаСтранице       = 0;
			ИтогоНДСНаСтранице         = 0;
			ИтогоСуммаСНДСНаСтранице   = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.Номер             = ЗапросТовары.Индекс(ВыборкаСтрок) + 1;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		                                          + ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		Если ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			МассаБрутто = 0;
		Иначе
			МассаБрутто = ВыборкаСтрок.МассаБрутто;
			МассаБрутто = ?(МассаБрутто <> Неопределено И МассаБрутто <> NULL, МассаБрутто, 0);
		КонецЕсли;

		Мест        = ВыборкаСтрок.КоличествоМест;
		Мест        = ?(Мест <> Неопределено И Мест <> NULL, Мест, 0);

		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = (ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС));
		СуммаНДС    = ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС = СуммаСНДС  - СуммаНДС;

		ОбластьМакета.Параметры.МассаБрутто = МассаБрутто;
		ОбластьМакета.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакета.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакета.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакета.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакета.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоМассаБруттоНаСтранице = ИтогоМассаБруттоНаСтранице + МассаБрутто;
		ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + Мест;
		ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + Количество;
		ИтогоСуммаНаСтранице       = ИтогоСуммаНаСтранице       + СуммаБезНДС;
		ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМассаБрутто = ИтогоМассаБрутто + МассаБрутто;
		ИтогоМест        = ИтогоМест        + Мест;
		ИтогоКоличество  = ИтогоКоличество  + Количество;
		ИтогоСумма       = ИтогоСумма       + СуммаБезНДС;
		ИтогоНДС         = ИтогоНДС         + СуммаНДС;
		ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице = ИтогоМассаБруттоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогМестПоСтранице        = ИтогоМестНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоПоСтранице  = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице       = ИтогоСуммаНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогНДСПоСтранице         = ИтогоНДСНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице   = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогМассаБрутто = ИтогоМассаБрутто;
	ОбластьМакета.Параметры.ИтогМест        = ИтогоМест;
	ОбластьМакета.Параметры.ИтогКоличество  = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогСуммы       = ИтогоСумма;
	ОбластьМакета.Параметры.ИтогНДС         = ИтогоНДС;
	ОбластьМакета.Параметры.ИтогСуммыСНДС   = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	
	
	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ФИОГлавБухгалтера     = Бухгалтер;
	
	ОбластьМакета.Параметры.ДатаДокумента=Формат(Шапка.ДатаДокумента,"ДЛФ=DD");
	
	ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;	
	
	
	ФамилияИмяОтчествоФизЛица                     = ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ФамилияИмяОтчествоКладовщика                  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ОбластьМакета.Параметры.ФИОКладовщика         = ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);

	Если НЕ ЗначениеНеЗаполнено(ЕдиницаИзмеренияВеса) И ИтогоМассаБрутто > 0 Тогда
		ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтогоМассаБрутто, ,",,,,,,,,0")+ " " +ЕдиницаИзмеренияВеса.Наименование + ".";
	КонецЕсли;

	Если ИтогоМест > 0 Тогда
		ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	КонецЕсли;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(ИтогоСуммаСНДС, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 0;
	ТабДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьТОРГ12()

// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг()

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Содержание КАК Номенклатура,
	|	Содержание КАК Товар,
	|	Количество,
	|	NULL КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Акт");
	ОбШтрихКод=ОбластьМакета.Рисунки.Штрихкод.Объект;
	ОбШтрихКод.ТипКода = 4; 
	ОбШтрихКод.Сообщение = СформироватьШКРеализации(Ссылка,"4");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
	ОбШтрихКод.ОтображатьТекст = Ложь;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0;

	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;

		Если ЕстьСкидки Тогда

			Скидка = СтрокаТабличнойЧасти.Сумма / (100 - СтрокаТабличнойЧасти.Скидка) * СтрокаТабличнойЧасти.Скидка;
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);

		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);

	КонецЦикла;

	Если ТаблицаУслуги <> Неопределено Тогда

		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью  = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

// Функция осуществляет запуск обработки формирующей печатную форму 1-Т - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН(Выбор = 0, Форма = Неопределено)
    Если Выбор = 0 Тогда
		ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

		ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
		ОбработкаПечати.ПунктРазгрузки = АдресДоставки; //ПунктРазгрузки;

		ОбработкаПечати.Открыть();

		Возврат Неопределено;
	Иначе
		
		ОбработкаПечати = Обработки.ПечатьТТН_ЯШТ.ПолучитьФорму("Форма");

		ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
		ОбработкаПечати.СрокДоставки   		= СрокДоставки;
		ОбработкаПечати.МаркаАвтомобиля 	= МаркаАвтомобиля;
		ОбработкаПечати.МаркаПрицепа		= МаркаПрицепа;
		ОбработкаПечати.ГосНомерАвтомобиля  = ГосНомерАвтомобиля;
		ОбработкаПечати.ГосНомерПрицепа     = ГосНомерПрицепа;
		ОбработкаПечати.ПунктПогрузки		= ПунктПогрузки;
		ОбработкаПечати.ПунктРазгрузки      = ПунктРазгрузки; // АдресДоставки;
		ОбработкаПечати.Водитель            = Водитель;
		ОбработкаПечати.Перевозчик          = Перевозчик;
		ОбработкаПечати.Заказчик            = Заказчик;
		ОбработкаПечати.ВидПеревозки        = ВидПеревозки;
		ОбработкаПечати.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
		
		ОбработкаПечати.Форма 			= Форма;
		
		ОбработкаПечати.Открыть();

		ЭтотОбъект.Прочитать();
		
		
		
		Возврат Неопределено;

		
	КонецЕсли;

КонецФункции // ПечатьТТН()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//Аналог счета из Заказа покупателя, но номер документа = торг12 и ТТН
//отличие только в формировании банк.счета...  //!!!
Функция ПечатьСчетаЗаказа(Тип) Экспорт
    КонтрагентАвтоэксперт=Справочники.Контрагенты.НайтиПоКоду("90151");
	КонтрагентОлта=Справочники.Контрагенты.НайтиПоКоду("00061");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="ВЫБРАТЬ
	              |	реализацияТоваровУслуг.Номер,
	              |	реализацияТоваровУслуг.Дата,
	              |	реализацияТоваровУслуг.ДоговорКонтрагента,
	              |	реализацияТоваровУслуг.Организация КАК Организация,
	              |	реализацияТоваровУслуг.Контрагент КАК Получатель,
	              |	реализацияТоваровУслуг.Организация КАК Руководители,
	              |	реализацияТоваровУслуг.Организация КАК Поставщик,
	              |	реализацияТоваровУслуг.СуммаДокумента,
	              |	реализацияТоваровУслуг.ВалютаДокумента,
	              |	реализацияТоваровУслуг.УчитыватьНДС,
	              |	реализацияТоваровУслуг.СуммаВключаетНДС,
				  //+++ 27.11.2012
	              |	реализацияТоваровУслуг.Грузоотправитель,
	              |	реализацияТоваровУслуг.Подразделение
	              |ИЗ
	              |	Документ.РеализацияТоваровУслуг КАК реализацияТоваровУслуг
	              |ГДЕ
	              |	реализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	Если  не ЗначениеНеЗаполнено(ОрганизацияДляПечати) Тогда // меняем все кроме реквизита Организация
		 Запрос.Текст=СтрЗаменить(Запрос.Текст,"Организация КАК","ОрганизацияДляПечати КАК");
	КонецЕсли;	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Реализация_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.реализацияТоваровУслуг.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Содержание,
	|	ВЫБОР КОГДА ЗаказПокупателя.Содержание IS NULL ИЛИ ЗаказПокупателя.Содержание = """" ТОГДА
	|		ВЫРАЗИТЬ(ЗаказПокупателя.Номенклатура.НаименованиеПолное КАК Строка(1000))
	|	ИНАЧЕ
	|		ЗаказПокупателя.Содержание
	|	КОНЕЦ КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.реализацияТоваровУслуг.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
			Если ЗначениеЗаполнено(БанковскийСчетОрганизации) тогда
				БанковскийСчетОрганизации1 = БанковскийСчетОрганизации;
			иначе
				БанковскийСчетОрганизации1 = Организация.ОсновнойБанковскийСчет;
			КонецЕсли;	
			
			
		//+++( 27.11.2012
		Если Шапка.Подразделение = справочники.Подразделения.НайтиПоКоду("00106") 
			и Шапка.Дата >= '20121001' тогда
			Если НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель) тогда
				Сообщить("Не заполнен грузоотправитель!");
				возврат неопределено;
			КонецЕсли;	
			СведенияОГрузоотправителе = СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата);  
			ОбластьМакета.Параметры.ИНН = СведенияОГрузоотправителе.ИНН;
			ОбластьМакета.Параметры.КПП = СведенияОГрузоотправителе.КПП;
			//!!! БанковскийСчетОрганизации1 вместо СтруктурнаяЕдиница
			БанковскийСчетОрганизации1  = Шапка.Грузоотправитель.ОсновнойБанковскийСчет;
		КонецЕсли;	//+++)

		
		Если ЗначениеЗаполнено(БанковскийСчетОрганизации1) Тогда  //+++ БанковскийСчетОрганизации вместо Структурной единицы
			Банк       = БанковскийСчетОрганизации1.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = БанковскийСчетОрганизации1.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = БанковскийСчетОрганизации1.ТекстКорреспондента;
		КонецЕсли;
		Если ЗначениеНеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщика) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		
		//ОЛ 12.02.2015 - для экспорта
		ОрганизацияОтгрузки = Справочники.Контрагенты.ПустаяСсылка();
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("П001125");
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда 
			//для формула авто тоже нужны свои реквизиты
			ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("92705");
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
			ОрганизацияОтгрузки = Справочники.Контрагенты.НайтиПоКоду("92797");
		КонецЕсли;
		Если Не ОрганизацияОтгрузки.Пустая() Тогда
			СведенияОПоставщике = СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата);
			ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
			ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
			СтруктурнаяЕдиницаОтгрузки = ОрганизацияОтгрузки.ОсновнойБанковскийСчет;
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = СтруктурнаяЕдиницаОтгрузки.Банк.Код;
			ОбластьМакета.Параметры.БанкПолучателя                   = СтруктурнаяЕдиницаОтгрузки.Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(СтруктурнаяЕдиницаОтгрузки.Банк) +" "+СтруктурнаяЕдиницаОтгрузки.Банк.Город;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СтруктурнаяЕдиницаОтгрузки.Банк.КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = СтруктурнаяЕдиницаОтгрузки.НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщика          = СведенияОПоставщике.ПолноеНаименование;
		КонецЕсли;	
		//конец ОЛ
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если НЕ Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КонецЕсли;
	
	//ОЛ 12.02.2015
	Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //для экспорта
		Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		КонецЕсли;
	ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //для Формула авто
		Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияОтгрузки, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		КонецЕсли;
    КонецЕсли;
	//конец ОЛ
	
	ТабДокумент.Вывести(ОбластьМакета);

//+++ 03.10.2012 - Грузоотправитель, если он есть...
Если Тип = "Счет" и ЗначениеЗаполнено(ЭтотОбъект.Грузоотправитель) тогда 
	ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЭтотОбъект.Грузоотправитель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
КонецЕсли;
	
	СведенияОПолучателе = СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если ЗначениеЗаполнено(ОрганизацияДляПечати) И ОрганизацияДляПечати<>Организация Тогда
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ОрганизацияДляПечати, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");//Строка(КонтактноеЛицо);
	Иначе                                                 
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	КОнецЕсли;
	
	//ОЛ 12.02.2015 - для экспорта
	Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //для экспорта
		Если СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)<>"" Тогда
			ОбластьМакета.Параметры.ПредставлениеПолучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеПолучателя,"ИНН ",СокрЛП(Шапка.Получатель.НаименованиеИННэкспорт)+" ");
		КонецЕсли	
	КонецЕсли;
	//конец ОЛ
	
	ТабДокумент.Вывести(ОбластьМакета);

//+++ 03.10.2012 - Грузополучатель, если он есть...
Если Тип = "Счет" и ЗначениеЗаполнено(ЭтотОбъект.Грузополучатель) тогда 
	ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ОписаниеОрганизации(СведенияОЮрФизЛице(ЭтотОбъект.Грузополучатель, Шапка.Дата), "ИНН,КПП,ПолноеНаименование,ФактическийАдрес,Телефоны,");
	//ОЛ 12.02.2015 - для экспорта
	Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда //для экспорта
		Если СокрЛП(ЭтотОбъект.Грузополучатель.НаименованиеИННэкспорт)<>"" Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = СтрЗаменить(ОбластьМакета.Параметры.ПредставлениеГрузополучателя,"ИНН ",СокрЛП(ЭтотОбъект.Грузополучатель.НаименованиеИННэкспорт)+" ");
		КонецЕсли	
	КонецЕсли;
	//конец ОЛ
	ТабДокумент.Вывести(ОбластьМакета);
КонецЕсли;
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	ОбластьМакета = Макет.ПолучитьОбласть("СрокОплаты");
	ОбластьМакета.Параметры.СрокОплаты = Формат(Сделка.ДатаОплаты,"ДЛФ=DD");
	ТабДокумент.Вывести(ОбластьМакета);
    конецЕсли;

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если Не ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	//+++ 16.07.2014
	Если Шапка.Получатель=КонтрагентАвтоэксперт или  Шапка.Получатель=КонтрагентОлта тогда 
		ОбластьШК  = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьШК");
		ТабДокумент.Присоединить(ОбластьШК);
	КонецЕсли;
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	ОбластьШК  = Макет.ПолучитьОбласть("Строка|ОбластьШК"); //16.07.2014
	Попытка
		ШК=ОбластьШК.Рисунки.ШК.Объект;
		ШК.ТипКода = 1; 
		ШК.ОтображатьТекст = Истина;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			//+++ 28.11.2016 для услуг не работает! //	ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Номенклатура.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрП(ВыборкаСтрокТовары.Товар) + ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ЗначениеНеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
		КонецЕсли;
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
		Если Шапка.Получатель=КонтрагентАвтоэксперт или  Шапка.Получатель=КонтрагентОлта тогда //16.07.2014
			ШтрихКод=ПолучитьНовыйКодДляШтрихКодаЯШТ(ВыборкаСтрокТовары.Номенклатура.Код);
			Попытка
				ШК.Сообщение = ШтрихКод;
				ШК.ТекстКода = ШтрихКод;
				ТабДокумент.Присоединить(ОбластьШК);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		//ОЛ 12.02.2015 - для экспорта 0% всегда
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			Если ЗапросТовары.Итог("СуммаНДС")=0 Тогда 
				ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС 0%:", "Сумма НДС 0%:");
			КонецЕсли;
		КонецЕсли;	
		//конец ОЛ
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		Если НЕ Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПдпсФАП");
		КонецЕсли;

		РуководителиП = ОтветственныеЛицаПодразделения(ЭтотОбъект.Подразделение, Шапка.Дата);//+++ 03.10.2012
		
		Руководители = ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.Дата,);
		Руководитель = ?(РуководителиП.Руководитель=неопределено, Руководители.Руководитель,РуководителиП.Руководитель);
		Бухгалтер    = ?(РуководителиП.ГлавныйБухгалтер=неопределено, Руководители.ГлавныйБухгалтер, РуководителиП.ГлавныйБухгалтер);

		ОбластьМакета.Параметры.ФИОРуководителя  = "/" + Руководитель  + "/";
		ОбластьМакета.Параметры.ФИОБухгалтера    = "/" + Бухгалтер     + "/";
		ОбластьМакета.Параметры.ФИООтветственный = "/" + Ответственный + "/";
		
		//ОЛ 12.02.2015 - для экспорта
		Если Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ФИОРуководителя  = "/Захаров В.В./";
				ОбластьМакета.Параметры.ФИОБухгалтера    = "/Захаров В.В./";
				ОбластьМакета.Параметры.ФИООтветственный = "";
			КонецЕсли;
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда //для формула авто
			Если НЕ ОрганизацияОтгрузки.Пустая() Тогда
				ОбластьМакета.Параметры.ФИОРуководителя  = "/Зайцева Н.С./";
				ОбластьМакета.Параметры.ФИОБухгалтера    = "/Зайцева Н.С./";
				ОбластьМакета.Параметры.ФИООтветственный = "";
			КонецЕсли;
		ИначеЕсли Шапка.ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
			ОбластьМакета.Параметры.ФИОРуководителя  = Ответственный;
			ОбластьМакета.Параметры.ФИОБухгалтера    = Ответственный;
			ОбластьМакета.Параметры.ФИООтветственный = "";
		КонецЕсли;
		//конец ОЛ

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()



// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Форма = Неопределено, НомерДокФАП = Неопределено) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	//+++( 11.04.2014 -> от Н.Яковлевой 
	//запрет печати для менеджеров - отгружочных документов Торг-12, ТТН, !
	//могут только бухгалтерия, Гаричев и нач.отделов...
	//1) фикс.макеты:
	Если  (ИмяМакета = "ТОРГ12" или ИмяМакета = "1Т - ЯШТ" или ИмяМакета = "Акт")  //+++ 17.04.2014 только 3 формы!
		И НЕ (РольДоступна("ПолныеПрава")или РольДоступна("яштФинДиректор") или РольДоступна("Кассир")  ) 
		и Дата<Дата('20140701') тогда   //14.08.2014 Смирнов документы с 01.07.14 печатать можно
		Предупреждение("Вы не можете печать документы ТОРГ-12 или ТТН! 
		|Печать разрешена только для бухгалтерии!",30);
		возврат;
	КонецЕсли;	
	//+++)
	
	
	// Получить экземпляр документа на печать
	Если      ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента();
		ТабДокумент.АвтоМасштаб = Истина;
	ИначеЕсли ИмяМакета = "ТОРГ12" тогда
		ТабДокумент = ПечатьТОРГ12();
	ИначеЕсли ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг();
		//ИначеЕсли ИмяМакета = "1Т" Тогда
		//		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "1Т - ЯШТ" Тогда
		ТабДокумент = ПечатьТТН(1, Форма);
		
	ИначеЕсли ИмяМакета = "Счет" тогда //+++ 08.12.2011
		ТабДокумент = ПечатьСчетаЗаказа("Счет");
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ДополнительныеПечатныеФормы") Тогда
		
		//+++( 11.04.2014 -> от Н.Яковлевой 
		//запрет печати для менеджеров - отгружочных документов Торг-12 и  ТТН !
		//могут только бухгалтерия, Гаричев и нач.отделов...
		//2) доп.печ.формы:
		Если ( НАЙТИ( врег(ИмяМакета.Наименование), "ТОРГ-12")>0 или НАЙТИ(ИмяМакета.Наименование, "ТТН")>0 )
			И НЕ (РольДоступна("ПолныеПрава")или РольДоступна("яштФинДиректор") или РольДоступна("Кассир") ) 
			и Дата<Дата('20140701') тогда   //14.08.2014 Смирнов документы с 01.07.14 печатать можно
			Предупреждение("Вы не можете печать документы отгрузки ТОРГ-12 или ТТН! 
			|Печать разрешена только для бухгалтерии!",30);
			возврат;
		КонецЕсли;	
		//+++)
		//Смирнов 14.08.2014 -> от Н.Яковлевой 
		//Если договор факторинг, то печатаем торг-12 фактроинг
		//Если ДоговорКонтрагента.ТипДоговора=Справочники.ТипыДоговоров.Факторинг и  НАЙТИ(врег(ИмяМакета.Наименование), "ТОРГ-12")>0 и НАЙТИ(врег(ИмяМакета.Наименование), "ФАКТОРИНГ")=0 тогда
		//	Предупреждение("Для документов с договором факторинга
		//	|необходимо печатать ТОРГ-12 факторинг !",30);
		//	возврат;
		//КонецЕсли;
		
		
		//+++ 13.01.2015 - вместе с ТОРГ-12 печатаем и счет (# Короткова Е.)
		Если  ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПокупателя")
			и (сделка.ПечататьСчетИзРеализации или Контрагент.ПечатьСчетаИзРеализации)
			и НАЙТИ( врег(ИмяМакета.Наименование), "ТОРГ-12")>0	 тогда
			
			ТабДокумент1 = ПечатьСчетаЗаказа("Счет");
			НапечататьДокумент(ТабДокумент1, 1, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));
			
		КонецЕсли;
		
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = ИмяМакета.ПолучитьОбъект();
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней формы документа. Возможно форма была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс И НомерФормулаАвто = 0 Тогда
			Если ИмяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("ТОРГ-12 (Яршинторг).") 
					ИЛИ ИмяМакета = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию("Акт приема-передачи ФА+") Тогда
				ТабДокумент = Обработка.Печать(НомерДокФАП);
			КонецЕсли;
		Иначе
			ТабДокумент = Обработка.Печать();
		КонецЕсли;
		
	КонецЕсли;
	
	НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, СформироватьЗаголовокДокумента(ЭтотОбъект));
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСписокПечатныхФорм() Экспорт

	СписокМакетов = Новый СписокЗначений;

	СписокМакетов.Добавить("Накладная", "Расходная накладная");
	СписокМакетов.Добавить("Акт", "Акт об оказании услуг");
	
	//+++ 04.09.2014 - убрана из списка по просьбе Н.Яковлевой
	//СписокМакетов.Добавить("ТОРГ12", "ТОРГ-12 (Товарная накладная)");
	
	//СписокМакетов.Добавить("1Т", "1-Т (Товарно-транспортная накладная)");
	СписокМакетов.Добавить("1Т - ЯШТ", "1-Т (Товарно-транспортная накладная) - Яршинторг");
    СписокМакетов.Добавить("Счет", "Счет на оплату");

	ДобавитьВСписокДополнительныеФормы(СписокМакетов, Метаданные());
	Возврат СписокМакетов;

КонецФункции // ПолучитьСписокПечатныхФорм()

#КонецЕсли

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);

	СкладыВТЧ = (Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить() = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

	ИмяТЧ = "Товары";

	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|	                                           Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|	                                           И Склад    = &Склад") + "
	|	                                           И Качество = &Качество
	|	                                           ) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры "
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;

		Если ЗначениеНезаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = СписКоличество;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		
		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад                  = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад                  = Склад;
		КонецЕсли;

		ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь); //19.09.2014  глТекущийПользователь >> ПараметрыСеанса.ТекущийПользователь
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("Цена");

		мСписокФильтров = ПолучитьЗначениеПраваПользователя(
		                  ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
		                  Неопределено);

		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);

	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|	                                              Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	                                            И Склад = &Склад
	|	                                            ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура = Выборка.Номенклатура;
		СтрокаВозвратнойТары.Количество   = Количество;

		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если ЗначениеНеЗаполнено(ТипЦен)
			или (ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			       СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			       КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если ЗначениеНеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, Истина,
				                            ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    =  (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
		             И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки ИЛИ ЗначениеНеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет добавление строки в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть в которую добавляется строка;
//  Выборка - запрос, спозиционированный на строке;
//  Количество - количество в добавляемой строке;
//  СпособСписанияОстаткаТоваров - ПеречислениеСсылка.СпособыСписанияОстаткаТоваров.
//
Процедура ДобавитьСтрокуТабличнойЧасти(ТабличнаяЧасть, Выборка, Количество, СпособСписанияОстаткаТоваров)

	Если Количество <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

	Если ТабличнаяЧасть = Товары Тогда

		СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество           = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = Выборка.Единица;
		СтрокаТабличнойЧасти.Коэффициент          = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.КоличествоМест   = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0, СтрокаТабличнойЧасти.Количество / СтрокаТабличнойЧасти.Коэффициент);
		СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Цена =  ПересчитатьЦенуПриИзмененииФлаговНалогов(
										ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
										Сделка.ВалютаДокумента, ВалютаДокумента,
										КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
										КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
										Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
										Сделка.СуммаВключаетНДС,
										УчитыватьНДС,
										СуммаВключаетНДС,
										ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
 		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров      = СпособСписанияОстаткаТоваров;

		
	Иначе // ТабличнаяЧасть = ВозвратнаяТара

		СтрокаТабличнойЧасти.Номенклатура= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.Количество  = Количество;

		СуммаПоЗаказу = ПересчитатьИзВалютыВВалюту(Выборка.СуммаПоЗаказу,
		                Сделка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                Сделка.КурсВзаиморасчетов, КурсВзаиморасчетов,
						Сделка.КратностьВзаиморасчетов, КратностьВзаиморасчетов);
		СтрокаТабличнойЧасти.Сумма = СуммаПоЗаказу * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоПоЗаказу;
		ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуТабличнойЧасти()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()

	ЗаполнитьСкладыВТЧ();
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	ТаблицаСерий         = ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);

		НайденныеСтроки            = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();

			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Строка.СерияНоменклатуры;
			НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
			НоваяСтрока.СпособСписанияОстаткаТоваров        = ИсходнаяСтрока.СпособСписанияОстаткаТоваров;
			НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                          = СписанноеКоличество;

			РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если ЗначениеНеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.ЕдиницаИзмеренияМест                = ИсходнаяСтрока.ЕдиницаИзмеренияМест;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры                   = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
				НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
				НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.СпособСписанияОстаткаТоваров        = ИсходнаяСтрока.СпособСписанияОстаткаТоваров;
				НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
				НоваяСтрока.Качество                            = ИсходнаяСтрока.Качество;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;

				РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

				РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);

				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;

			ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
			РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//  ВариантВыводаФормыЗаполнения - значения настройки пользователя о выводе формы заполнения по заказу покупателя
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование, ВариантВыводаФормыЗаполнения = Неопределено) Экспорт

	Запрос = Новый Запрос;

	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	ГруппаДоступностиСкладов = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ГруппаДоступностиСкладов");

	Запрос.УстановитьПараметр("Договор",                  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",                   Сделка);
	Запрос.УстановитьПараметр("Склад",                    Склад);
	Запрос.УстановитьПараметр("СтатусТары",               Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	Запрос.УстановитьПараметр("ДокументОснование",		  ДокументОснование);
	//+++ 29.08.2012
	Если ЕстьРеквизитДокумента("Транзит", ДокументОснование.Метаданные()) тогда
		ДокументОснованиеТранзит = ДокументОснование.Транзит;
	иначе	
		ДокументОснованиеТранзит = ЛОЖЬ;
	КонецЕсли;	
	Если ЕстьРеквизитДокумента("Подразделение", ДокументОснование.Метаданные()) тогда
		Запрос.УстановитьПараметр("ПодразделениеЗаказа", ДокументОснование.Подразделение);
	иначе // пустое... ЯШТ склады 
		Запрос.УстановитьПараметр("ПодразделениеЗаказа", справочники.Подразделения.ПустаяСсылка() );
	КонецЕсли;
	//+++)
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	МногоСкладов    = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	ПревышатьОстаткиОрганизации = РазрешеноПревышениеОстаткаТоваровОрганизации();

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ЕстьNULL(ЗаказПокупателяТовары.НомерСтроки,1)    КАК НомерСтроки,
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.Номенклатура.СтавкаНДС       КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток КОНЕЦ КАК КоличествоОстатокОрганизации", "") + "
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|
	|" + ?(ТабличнаяЧасть = Товары, "ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(, 
	|										 Организация = &Организация
	| 
	|	                                            ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|    (ВЫБРАТЬ
	|	Номенклатура Номенклатура,
	|	МИНИМУМ(НомерСтроки) НомерСтроки
	|	ИЗ  Документ.ЗаказПокупателя.Товары 
	|	ГДЕ Ссылка = &ДокументОснование 
	|	СГРУППИРОВАТЬ ПО Номенклатура) ЗаказПокупателяТовары
	| ПО 
	|	Остатки.Номенклатура = ЗаказПокупателяТовары.Номенклатура 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ЕстьNULL(ЗаказПокупателяТовары.НомерСтроки,1)					 КАК НомерСтроки,
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	0                                           КАК КоличествоОстатокОрганизации", "") + "
	|		
	|   ИЗ
	|   // остатки на складе
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В ( 
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|                   РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(МногоСкладов, ?(ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам), " 
	|	                                     И Склад = &Склад") + "
	//+++ 29.08.2012
	|И Склад.Транзитный = "+ ?(ДокументОснованиеТранзит, "Истина И Склад.Подразделение = &ПодразделениеЗаказа","ЛОЖЬ")+"
    //+++)
	|	                                            ) КАК ОстаткиНаСкладе
	| 	ЛЕВОЕ СОЕДИНЕНИЕ
	|    (ВЫБРАТЬ
	|	Номенклатура Номенклатура,
	|	МИНИМУМ(НомерСтроки) НомерСтроки
	|	ИЗ  Документ.ЗаказПокупателя.Товары 
	|	ГДЕ Ссылка = &ДокументОснование 
	|	СГРУППИРОВАТЬ ПО Номенклатура) ЗаказПокупателяТовары
	| ПО 
	|	ОстаткиНаСкладе.Номенклатура = ЗаказПокупателяТовары.Номенклатура 
  	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,"
	+ ?(МногоСкладов, ?(ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "", "Склад В " + ТекстФильтраПоСкладам + " И "), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва = &Сделка
	|	                                            ) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры", "")
	+ ?(МногоСкладов, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстаткиПоСделке.Склад", "") + " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,"
	+ ?(МногоСкладов, ?(ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "",  "Склад В " + ТекстФильтраПоСкладам + " И "), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва <> &Сделка
	|	                                            ) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
	+ ?(МногоСкладов, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстатки.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры", "") + "
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(,"
	+ ?(МногоСкладов, ?(ЗначениеНеЗаполнено(ГруппаДоступностиСкладов), "", "Склад В " + ТекстФильтраПоСкладам), " 
	|	                                     Склад = &Склад") + "
	|	                                            ) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
	+ ?(МногоСкладов, "
	|	И ОстаткиНаСкладе.Склад      = КПередаче.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры", "") + "
	|";

	РезультатЗапроса = Запрос.Выполнить();

	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			 ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоЗаказу.Сортировать("НомерСтроки"); 
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			 ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");

	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;

	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл

		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл

			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;

			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл

					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;

					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче;

					КоличествоКСписанию   = ?(Сч = 1, Мин(СвободныйОстатокНаСкладе, РезервПоСделке), СвободныйОстатокНаСкладе);
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));

					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;

					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();

					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;

					Если ТабличнаяЧасть = Товары Тогда

						СтрокаТабличнойЧасти.Количество       = ?(ЗначениеНеЗаполнено(СтрокаЗаказа.Коэффициент), 0,
						                                        КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;

						РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
						                                ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						                                Сделка.ВалютаДокумента, ВалютаДокумента,
						                                КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						                                КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						                                Сделка.СуммаВключаетНДС,
						                                УчитыватьНДС,
						                                СуммаВключаетНДС,
						                                ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
					Иначе

						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;

					Если СтрокаТабличнойЧасти.Количество = СтрокаЗаказа.КоличествоОстатокПоЗаказу Тогда
						СтрокаТабличнойЧасти.Сумма = СтрокаЗаказа.СуммаОстатокПоЗаказу;
					Иначе
						РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;

					Если ТабличнаяЧасть = Товары Тогда
						РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;

					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;

					СтрокаТабличнойЧасти.Склад = СтрокаОстатков.Склад;

				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание                          КАК Содержание,
	|	ВложенныйЗапрос.Цена                                КАК Цена,
	|	ВложенныйЗапрос.СтавкаНДС                           КАК СтавкаНДС,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки                КАК ПроцентСкидкиНаценки,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоОстатокПоЗаказу) КАК КоличествоОстатокПоЗаказу,
	|	СУММА(ВложенныйЗапрос.КоличествоПоЗаказу)           КАК КоличествоПоЗаказу
	|
	|ИЗ
	|(
	|ВЫБРАТЬ
	|	Док.Номенклатура         КАК Номенклатура,
	|	Док.Содержание           КАК Содержание,
	|	Док.Цена                 КАК Цена,
	|	Док.СтавкаНДС            КАК СтавкаНДС,
	|	Док.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	0                        КАК КоличествоОстатокПоЗаказу,
	|	Док.Количество           КАК КоличествоПоЗаказу
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &Сделка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Номенклатура           КАК Номенклатура,
	|	ВЫРАЗИТЬ(Остатки.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК Содержание,
	|	Остатки.Цена                   КАК Цена,
	|	Остатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Остатки.ПроцентСкидкиНаценки   КАК ПроцентСкидкиНаценки,
	|	Остатки.КоличествоОстаток      КАК КоличествоОстатокПоЗаказу,
	|	0                              КАК КоличествоПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &Договор
	|                                               И ЗаказПокупателя    = &Сделка
	|                                               И СтатусПартии       = &СтатусПартии) КАК Остатки
	|ГДЕ
	|	Остатки.Номенклатура.Услуга
	|	И Остатки.КоличествоОстаток > 0
	|
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Содержание,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
	|	ВложенныйЗапрос.СтавкаНДС
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);

	Пока Выборка.Следующий() Цикл

		КолвоОстПоЗаказу = ?(ЗначениеНеЗаполнено(Выборка.КоличествоОстатокПоЗаказу), 0, Выборка.КоличествоОстатокПоЗаказу);

		Если КолвоОстПоЗаказу <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура         = Выборка.Номенклатура;
		СтрокаУслуг.Количество           = КолвоОстПоЗаказу;
		СтрокаУслуг.Содержание           = Выборка.Содержание;
		СтрокаУслуг.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаУслуг.Цена                 = ПересчитатьИзВалютыВВалюту(Выборка.Цена,
		                                   Сделка.ВалютаДокумента, ВалютаДокумента,
		                                   КурсДокумента(Сделка,     мВалютаРегламентированногоУчета),
		                                   КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                   КратностьДокумента(Сделка,     мВалютаРегламентированногоУчета),
		                                   КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		Если ПроверитьУслугаОблагаетсяЕНВД(Выборка.Номенклатура, Организация, Дата, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
			СтрокаУслуг.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаУслуг.СтавкаНДС = Выборка.СтавкаНДС;
		КонецЕсли;

		РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ) Экспорт

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);

	МассивНоменклатуры     = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла;

	// Сформируем массив складов для фильтров запросов.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладИзШапки    = (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	                И (УказаниеСкладов <> Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		КопияТараСклад = ВозвратнаяТара.Выгрузить();
		КопияТараСклад.Свернуть("Склад",);

		МассивСклады     = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
		МассивТараСклады = КопияТараСклад.ВыгрузитьКолонку("Склад");
		Для Каждого ЭлементТара Из МассивТараСклады Цикл
			МассивСклады.Добавить(ЭлементТара);
		КонецЦикла;

		МассивСклады.Вставить(1, Склад);

		КолвоЭлементов = МассивСклады.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекИндекс  = КолвоЭлементов - ОбратныйИндекс;
			ТекЭлемент = МассивСклады[ТекИндекс];

			Если ЗначениеНеЗаполнено(ТекЭлемент)
			 ИЛИ (ТекЭлемент = Склад И ТекИндекс > 0)Тогда
				МассивСклады.Удалить(ТекИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Ссылка",             Ссылка);
	Запрос.УстановитьПараметр("ЗаказПокупателя",    Сделка);
	Запрос.УстановитьПараметр("МассивСклады",       МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток           КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,ДокументРезерва = &ЗаказПокупателя
	|			 И Склад В (&МассивСклады)
	|			 И Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиТоваровВРезерве";

	Таблица = Запрос.Выполнить().Выгрузить();

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если ЗначениеНеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
			 ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(ЗначениеНеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;

			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(ЗначениеНеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
				НоваяСтрока.Количество           = СписанноеКоличество;

				Если ЭтоТовары Тогда
					НоваяСтрока.ХарактеристикаНоменклатуры          = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                           = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ПроцентСкидкиНаценки                = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
					НоваяСтрока.Качество                            = СтрокаТЧ.Качество;
					НоваяСтрока.ЕдиницаИзмерения                    = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                         = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ЕдиницаИзмеренияМест                = СтрокаТЧ.ЕдиницаИзмеренияМест;
				КонецЕсли;

				НоваяСтрока.Цена                         = СтрокаТЧ.Цена;
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				НоваяСтрока.Склад                        = СтрокаТЧ.Склад;
				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;

				Если ЭтоТовары Тогда
					НоваяСтрока.ЕдиницаИзмерения                    = СтрокаТЧ.ЕдиницаИзмерения;
					НоваяСтрока.Коэффициент                         = СтрокаТЧ.Коэффициент;
					НоваяСтрока.ЕдиницаИзмеренияМест                = СтрокаТЧ.ЕдиницаИзмеренияМест;
					НоваяСтрока.ХарактеристикаНоменклатуры          = СтрокаТЧ.ХарактеристикаНоменклатуры;
					НоваяСтрока.СтавкаНДС                           = СтрокаТЧ.СтавкаНДС;
					НоваяСтрока.ПроцентСкидкиНаценки                = СтрокаТЧ.ПроцентСкидкиНаценки;
					НоваяСтрока.ПроцентАвтоматическихСкидок         = СтрокаТЧ.ПроцентАвтоматическихСкидок;
					НоваяСтрока.УсловиеАвтоматическойСкидки         = СтрокаТЧ.УсловиеАвтоматическойСкидки;
					НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = СтрокаТЧ.ЗначениеУсловияАвтоматическойСкидки;
					НоваяСтрока.Качество                            = СтрокаТЧ.Качество;
				КонецЕсли;

				НоваяСтрока.Цена                         = СтрокаТЧ.Цена;
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить, 2, 1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				НоваяСтрока.Склад                        = СтрокаТЧ.Склад;

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда

				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;

				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры          = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                           = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки                = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок         = Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;

			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			РедактируемаяСтрока.Количество = Строка.Количество;

			Если ЭтоТовары Тогда
				РедактируемаяСтрока.ЕдиницаИзмерения                    = Строка.ЕдиницаИзмерения;
				РедактируемаяСтрока.Коэффициент                         = Строка.Коэффициент;
				РедактируемаяСтрока.ЕдиницаИзмеренияМест                = Строка.ЕдиницаИзмеренияМест;
				РедактируемаяСтрока.СтавкаНДС                           = Строка.СтавкаНДС;
				РедактируемаяСтрока.ПроцентСкидкиНаценки                = Строка.ПроцентСкидкиНаценки;
				РедактируемаяСтрока.ПроцентАвтоматическихСкидок         = Строка.ПроцентАвтоматическихСкидок;
				РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
				РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				РедактируемаяСтрока.Качество                            = Строка.Качество;
			КонецЕсли;

			Если ЭтоТовары Тогда
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена  = Строка.Цена;

				РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Сумма = Строка.Сумма;
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла;
	КонецЦикла;

	ЗаполнитьПоСериям();

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Сделка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка.Ссылка = &Счет";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                = Выборка.Коэффициент;
		
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.КоличествоМест             = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки             = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок             = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки             = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки             = Выборка.ЗначениеУсловияАвтоматическойСкидки;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;

	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Сделка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка.Ссылка = &Счет";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						    Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Сделка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";

	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";

	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка.Ссылка = &Счет";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;

		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;

		НоваяСтрока.Сумма = ПересчитатьЦенуПриИзмененииФлаговНалогов(
		ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
				Выборка.КурсДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				Выборка.КратностьДокумента, КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				Выборка.СуммаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ПараметрыСеанса.ТекущийПользователь);
		РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	// Подготовка данных для регл учета (НДС)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  ТаблицаУслуг              - таблица значений по скидкам,
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		СуммаБезСкидки = ПересчитатьИзВалютыВВалюту(СуммаБезСкидки, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			Если СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
				ИЛИ СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.ПоВыбраннойДисконтнойКартойСумме Тогда
				СтрокаДвижений.ЗначениеУсловияСкидки = ДисконтнаяКарта;
			Иначе
				СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			КонецЕсли;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентАвтоматическихСкидок,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		СуммаСоСкидкамиРеально = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		СуммаБезСкидки = ПересчитатьИзВалютыВВалюту(СуммаБезСкидки, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр((СуммаБезСкидки/100) * СтрокаТаблицы.ПроцентСкидкиНаценки,2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		СуммаСоСкидкамиРеально = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;

		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДвижений;
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество + 
		                          ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    ПолучитьОписаниеТиповЧисла(15,2));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаБезНДС;

		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 ВалютаРег,
			                                 СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",          ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",  ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("НДС",                  ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",             ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
		                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                    КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	СтруктураОбязательныхПолей.Вставить("ВидПередачи");
	//  { Лапенков 20120830 обязательно поле подразделение
	СтруктураОбязательныхПолей.Вставить("Подразделение");
	//  } Лапенков 20120830
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
	    И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	   И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОшибкаПриПроведении("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения)

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ОшибкаПриПроведении("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;

	Если РежимПроведения = РежимПроведенияДокумента.Оперативный
		И Не ЗначениеНеЗаполнено(ДисконтнаяКарта)
		И ДисконтнаяКарта.СтатусДисконтнойКарты <> Перечисления.СтатусыДисконтнойКарты.Активна Тогда
		
		ОшибкаПриПроведении("Дисконтная карта, указанная в документе, не является активной!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если Не ЗначениеНеЗаполнено(Сделка) Тогда
			СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ЕдиницаИзмерения");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);


КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
		Если Не ЗначениеНеЗаполнено(Сделка) Тогда
			СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
                                                          Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей,  СтруктураШапкиДокумента);

	// Теперь позовем общую процедуру проверки.
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);

	//ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если не ДоговорКонтрагента.ВнутренниеВзаиморасчеты тогда
		
		ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
		ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
		
		ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		ТаблицаПоТаре, Отказ, Заголовок);
		
		//ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
		
		ДвиженияРегистровГрузчикиИКладовщики(ЭтотОбъект);
		
		Если ВыставлениеПени Тогда
			Если Сделка.РасчетСуммыПениВФайле И Сделка.Пени.Итог("Пени") = 0 Тогда
			Иначе
				ДвижениеРегистровПени(Отказ);	
			КонецЕсли;
		КонецЕсли; 
		
		
		// Проводить по партиям нужно при передаче со склада
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			
			// Проводить по партиям сразу нужно если установлен параметр
			// учетной политики СписыватьПартииПриПроведенииДокументов
			ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
			
			Если ПроводитьПоПартиям Тогда
				
				//+++Баланс, Селин, 17.11.2014
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииТоваровНаСкладах");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
				Блокировка.Заблокировать();
				//--Баланс
				
				//ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				
				//Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
				// провести по другому подразделению 25.03.2016
				Если ЭтотОбъект.Дата >= '20180101' Тогда
					ТаблицаСЗамененнымПодразделением = Движения.СписанныеТовары.Выгрузить();
					ТаблицаСЗамененнымПодразделением.ЗаполнитьЗначения(ЭтотОбъект.ПодразделениеДохода, "Подразделение");
					ДвижениеПартийТоваров(Ссылка, ТаблицаСЗамененнымПодразделением);
				Иначе
				ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
				КонецЕсли; 
				
				//Плотников, добавим проводки по межфирменному учету, если это ВЭД =================
				// если это реализация на турцию,состорнируем сразу продажи и продажисебестоимость по служебному подразделению
				Если Подразделение.ВЭД и Контрагент = Справочники.Контрагенты.НайтиПоКоду("94655") Тогда //Только для турции
					наборДвижений = Движения.Продажи;
					
					ТаблицаДляПоискаЦены = наборДвижений.Выгрузить();
					//ТаблицаДляПоискаЦены.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00162"),"Подразделение");
					наборДвижений.Загрузить(ТаблицаДляПоискаЦены);
					
					для каждого стр1 из ТаблицаДляПоискаЦены Цикл																
						нов = наборДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(нов,Стр1);
						нов.Количество =-нов.Количество;
						нов.Стоимость = -нов.Стоимость;
						нов.СтоимостьБезСкидок = нов.Стоимость;
						нов.Подразделение = Справочники.Подразделения.НайтиПоКоду("00167"); //Доп
					КонецЦикла;
					
					наборДвижений.Записать();
					
					
					наборДвижений = РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей();
					наборДвижений.отбор.регистратор.Установить(Ссылка);
					наборДвижений.Прочитать();
					
					табобход = наборДвижений.Выгрузить();
					наборДвижений.Загрузить(табобход);
					
					для каждого стр1 из ТабОбход Цикл	
						нов = наборДвижений.Добавить();
						ЗаполнитьЗначенияСвойств(нов,Стр1);
						СтрЦена = ТаблицаДляПоискаЦены.Найти(стр1.Номенклатура,"Номенклатура");
						нов.количество = - СтрЦена.Количество;
						нов.Стоимость = -СтрЦена.стоимость;
						нов.СписаниеПартий = Ложь;
						нов.ДокументДвиженияПериод = ТекущаяДата();
						нов.Подразделение = Справочники.Подразделения.НайтиПоКоду("00167"); //Доп
						нов.ДокументОприходования = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
					КонецЦикла;
					
					наборДвижений.Записать();
					
				конецЕсли;	
				//	
				//Если Подразделение.ВЭД и Организация = Справочники.Организации.НайтиПоКоду("00006") Тогда //Только для турции
				//	
				//	наборДвижений = Движения.Продажи;
				//	
				//	ТаблицаДляПоискаЦены = наборДвижений.Выгрузить();
				//	//ТаблицаДляПоискаЦены.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00162"),"Подразделение");
				//	наборДвижений.Загрузить(ТаблицаДляПоискаЦены);
				//	
				//	для каждого стр1 из ТаблицаДляПоискаЦены Цикл																
				//		нов = наборДвижений.Добавить();
				//		ЗаполнитьЗначенияСвойств(нов,Стр1);
				//		нов.Количество = 0;
				//		нов.Стоимость = 0;
				//		нов.СтоимостьБезСкидок = 0;
				//		нов.Подразделение = Справочники.Подразделения.НайтиПоКоду("00167"); //Доп
				//	КонецЦикла;
				//	
				//	наборДвижений.Записать();				
				//	
				//	
				//	//найдем разницу, которую надо состорнировать
				//	
				//	Запрос = Новый Запрос;
				//	Запрос.Текст = 
				//	"ВЫБРАТЬ
				//	|	ПродажиОбороты.Номенклатура,
				//	|	ЕСТЬNULL(ПродажиОбороты.СтоимостьОборот, 0) - ЕСТЬNULL(ПродажиСебестоимостьОбороты.СтоимостьОборот, 0) КАК ДляСторно
				//	|ИЗ
				//	|	РегистрНакопления.Продажи.Обороты(
				//	|			,
				//	|			,
				//	|			Регистратор,
				//	|			ЗаказПокупателя = &Сделка
				//	|				И ДокументПродажи <> &Ссылка
				//	|				И Подразделение = &ВЭД) КАК ПродажиОбороты
				//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость.Обороты(
				//	|				,
				//	|				,
				//	|				Регистратор,
				//	|				ЗаказПокупателя = &Сделка
				//	|					И Подразделение = &ВЭД) КАК ПродажиСебестоимостьОбороты
				//	|		ПО ПродажиОбороты.Номенклатура = ПродажиСебестоимостьОбороты.Номенклатура
				//	|			И ПродажиОбороты.Регистратор = ПродажиСебестоимостьОбороты.Регистратор
				//	|			И ПродажиОбороты.Подразделение = ПродажиСебестоимостьОбороты.Подразделение
				//	|			И ПродажиОбороты.ЗаказПокупателя = ПродажиСебестоимостьОбороты.ЗаказПокупателя
				//	|ГДЕ
				//	|	ВЫРАЗИТЬ(ПродажиОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).Основание = &Основание";
				//	
				//	Запрос.УстановитьПараметр("ВЭД", Справочники.Подразделения.НайтиПоКоду("00167"));
				//	Запрос.УстановитьПараметр("Сделка", Сделка);
				//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
				//	Запрос.УстановитьПараметр("Основание", Основание);
				//	ТабСторно = Запрос.Выполнить().Выгрузить();
				//	
				//	
				//	
				//	
				//	
				//	
				//	
				//	
				//	
				//	наборДвижений = РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей();
				//	наборДвижений.отбор.регистратор.Установить(Ссылка);
				//	наборДвижений.Прочитать();
				//	
				//	табобход = наборДвижений.Выгрузить();
				//	//табобход.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00166"),"Подразделение");
				//	//табобход.ЗаполнитьЗначения(Ложь,"СписаниеПартий");
				//	//табобход.ЗаполнитьЗначения(ТекущаяДата(),"ДокументДвиженияПериод");
				//	
				//	ТабОбходКопия= табобход.Скопировать();
				//	
				//	
				//	для каждого стр1 из ТабОбходКопия Цикл	
				//		//Найдем стоимость ----					
				//		СтрСтоимость = ТабСторно.Найти(стр1.Номенклатура,"Номенклатура");
				//		если СтрСтоимость = неопределено тогда
				//			стоимость = 0;
				//		иначе
				//			Стоимость = СтрСтоимость.ДляСторно;
				//		КонецЕсли;
				//		//----------------					
				//		нов = табобход.Добавить();
				//		ЗаполнитьЗначенияСвойств(нов,Стр1);
				//		нов.количество = 0;
				//		нов.Стоимость = Стоимость;
				//		нов.СписаниеПартий = Ложь;
				//		нов.ДокументДвиженияПериод = ТекущаяДата();
				//		нов.Подразделение = Справочники.Подразделения.НайтиПоКоду("00167"); //Доп
				//	КонецЦикла;
				//	
				//	наборДвижений.Загрузить(табобход);
				//	наборДвижений.Записать();
				//КонецЕсли;
				//===================================================================================
				
				
				// Зарегистрируем в пследовательности
				ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
				ЗаписьРегистрации.Период      = Дата;
				ЗаписьРегистрации.Регистратор = Ссылка;
				
			Иначе
				
				// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
				Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
					СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		//+++(рег.сведений - ДанныеДляУчетаОтгрузок  - только для НЕналички
		Если Найти(ссылка.ДоговорКонтрагента.наименование,"*")=0 тогда  //+++ 17.04.2012 
			док = Ссылка;
			строка1 = РегистрыСведений.ДанныеДляУчетаОтгрузок.СоздатьМенеджерЗаписи();
			строка1.Период = док.Дата;
			строка1.Контрагент = док.Контрагент;
			строка1.НомерРеализации = док.Номер;
			строка1.Прочитать();
			
			//измерения
			строка1.Период = док.Дата;
			строка1.НомерРеализации = док.Номер;
			строка1.Контрагент = док.Контрагент;
			//ресурсы		
			строка1.ВремяОтгрузки = док.Дата;
			строка1.ОтветственноеЛицо = док.ДоговорКонтрагента.ОтветственноеЛицо; //Менеджер по договору контрагента!
			строка1.СуммаОтгрузки = док.СуммаДокумента;
			Если СокрЛП(док.Перевозчик)="" тогда //+++ 23.01.2012   только отгрузки, а не перевозки
				строка1.Доверенность   = док.НомерДоверенности+?(док.ДатаДоверенности=Дата(1,1,1),""," от "+Формат(док.ДатаДоверенности,"ДЛФ=D"))+?(ЗначениеЗаполнено(док.Водитель)," Водитель: "+док.Водитель, "");
				
				Если строка1.Статус <> Перечисления.СтатусыДокументовОтгрузки.Изменен и СокрЛП(строка1.Доверенность)<>"" тогда
					строка1.Статус = Перечисления.СтатусыДокументовОтгрузки.Закрыт; // доверенность на получение...
				КонецЕсли;
				строка1.ДатаВозвратаТоварнойНакладной =  док.Дата;
				строка1.ДатаВозвратаТТН  = док.Дата;
				
			иначе
				строка1.Доверенность    = "";
				Если строка1.Статус <> Перечисления.СтатусыДокументовОтгрузки.Изменен тогда
					строка1.Статус = Перечисления.СтатусыДокументовОтгрузки.Получение; // сразу ждем получение документов
				КонецЕсли;
				// торг-12 и ТТН - отправляется сразу с машиной
				строка1.ОтправкаТоварнаяНакладная = перечисления.ВидОтправкиДокументов.машина;
				строка1.ОтправкаТТН = перечисления.ВидОтправкиДокументов.машина;
			КонецЕсли;
			//строка1.НомерАвтомобиля = док.МаркаАвтомобиля;
			строка1.НомерАвтомобиля   = док.ГосНомерАвтомобиля;
			строка1.КоличествоПозиций = док.Товары.Итог("Количество");
			строка1.НомерЗаявки = ?(ЗначениеЗаполнено(док.Сделка) и ТипЗнч(док.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя"),док.Сделка.Номер, строка1.НомерЗаявки);
			
			строка1.Город = ПолучитьАдресИзКонтактнойИнформации(док.Контрагент, "Фактический");//КонтактнаяИнформация
			
			//сразу не заполняем
			//строка1.ОтправкаТоварнаяНакладная = перечисления.ВидОтправкиДокументов.машина;
			//строка1.ОтправкаТТН = перечисления.ВидОтправкиДокументов.машина;
			
			//Попытаемся найти спецификацию
			Спецификация = документы.Спецификация.ПустаяСсылка();
			Спецификация = НайтиПодчиненныйДокумент(док, "Спецификация");
			Если ЗначениеЗаполнено(Спецификация) тогда
				Если НачалоДня(Спецификация.Дата)=НачалоДня(док.Дата) тогда
					строка1.ОтправкаСпецификация = перечисления.ВидОтправкиДокументов.машина;
				иначе 
					строка1.ОтправкаСпецификация = перечисления.ВидОтправкиДокументов.иное;
				КонецЕсли;
				
				Если СокрЛП(док.Перевозчик)="" и СокрЛП(строка1.Доверенность)<>"" тогда //+++ 17.04.2012   СРАЗУ ПОЛУЧЕНИЕ
					строка1.ДатаВозвратаСпецификации = НачалоДня(Спецификация.Дата);
				КонецЕсли;
			КонецЕсли;
			//НЕ Попытаемся найти счетФактуру в тот же день - они оформляются в 1С Бухгалтерии
			//СчФакт = документы.СчетФактураВыданный.ПустаяСсылка();
			//СчФакт = НайтиПодчиненныйДокумент(док, "СчетФактураВыданный");
			//Если ЗначениеЗаполнено(СчФакт) тогда
			//	Если НачалоДня(СчФакт.Дата)=НачалоДня(док.Дата) тогда
			//		строка1.ОтправкаСчетФактура = перечисления.ВидОтправкиДокументов.машина;
			//	иначе 
			//		строка1.ОтправкаСчетФактура = перечисления.ВидОтправкиДокументов.иное;
			//	КонецЕсли;
			//КонецЕсли;
			попытка
				строка1.Записать(Истина); // с замещением!
			исключение
				сообщить("Не удалось записать рег.сведений ""Данные по учету отгрузок"": "+ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
		//+++)
	конецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// При передаче на комиссию, движений в подсистеме НДС делать не нужно
		Возврат;
	КонецЕсли;
	
	ТаблицаДвиженийПродажи = Движения.НДСПродажи.Выгрузить();
	ТаблицаДвиженийПродажи.Очистить();

	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата, Новый Структура("Организация", СтруктураШапкиДокумента.Организация));

	// По УСЛУГАМ всегда формируем движения отражающие реализацию
	СформироватьДвиженияВыбытияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоУслугам, ТаблицаДвиженийПродажи);
	
	Если НЕ ПараметрыУчетнойПолитики.СложныйУчетНДС Тогда
		// По ТОВАРАМ движения формируются только когда нет сложного учета НДС
		СформироватьДвиженияВыбытияПоРегиструНДСПродажи(СтруктураШапкиДокумента, ПараметрыУчетнойПолитики, ТаблицаПоТоварам, ТаблицаДвиженийПродажи);
	КонецЕсли;
	
	Если ТаблицаДвиженийПродажи.Количество() > 0 Тогда
		Движения.НДСПродажи.мПериод          = Дата;
		Движения.НДСПродажи.мТаблицаДвижений = ТаблицаДвиженийПродажи;
		Движения.НДСПродажи.ДобавитьДвижение();
		Движения.НДСПродажи.Записать();
	КонецЕсли;

КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
							  
							  Если ОтражатьВУправленческомУчете Тогда
								  Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
									  И СуммаДокумента <> 0 Тогда
									  
									  // По регистру ВзаиморасчетыСКонтрагентами.
									  НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;
									  
									  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
									  ТаблицаДвижений = НаборДвижений.Выгрузить();
									  
									  // Заполним таблицу движений.
									  СтрокаДвижений = ТаблицаДвижений.Добавить();
									  СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
									  СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
									  
									  СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
									  СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
									  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
									  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
									  СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
									  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
									  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
									  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
									  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
									  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
									  
									  
									  // для экспорта пересчитаем продажную стоимость на НДС минус транспортные. А.А. 01.09.15 											
									  Если ДоговорКонтрагента.типДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль и Дата > '20150831235959' и Дата <= '20150930235959'Тогда  
										  //сумма транспортных
										  Запрос = Новый Запрос("ВЫБРАТЬ
										  |	ПЗ1.Реализация,
										  |	СУММА(ПЗ2.ДоставкаНал) КАК ДоставкаНал,
										  |	СУММА(ПЗ2.ДоставкаВЦене) КАК ДоставкаВЦене
										  |ИЗ
										  |	(ВЫБРАТЬ
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка КАК Ссылка,
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация КАК Реализация,
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.Сделка КАК ЗАказ
										  |	ИЗ
										  |		Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
										  |	ГДЕ
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = &Реализация) КАК ПЗ1
										  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
										  |			ИнформацияПоПроезду.Задание КАК Задание,
										  |			ИнформацияПоПроезду.Заказ КАК Заказ,
										  |			ИнформацияПоПроезду.ДоставкаНал КАК ДоставкаНал,
										  |			ИнформацияПоПроезду.ДоставкаВЦене КАК ДоставкаВЦене
										  |		ИЗ
										  |			РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду) КАК ПЗ2
										  |		ПО ПЗ1.Ссылка = ПЗ2.Задание
										  |			И ПЗ1.ЗАказ = ПЗ2.Заказ
										  |
										  |СГРУППИРОВАТЬ ПО
										  |	ПЗ1.Реализация");
										  Запрос.УстановитьПараметр("Реализация",Ссылка);
										  Выб = Запрос.Выполнить().Выбрать();
										  
										  Если (Выб.Следующий()) Тогда 
											  ЗначениеГрязное = ?(ЗначениеЗаполнено(Выб.ДоставкаНал),Выб.ДоставкаНал,0) + ?(ЗначениеЗаполнено(Выб.ДоставкаВЦене),Выб.ДоставкаВЦене,0);
											  Если (ЗначениеГрязное<0) Тогда 
												  ТР = 0;
											  Иначе 
												  ТР = ЗначениеГрязное;
											  КонецЕсли;
										  Иначе 
											  ТР = 0;
										  КонецЕсли;
										  
										  ТаблицаПоТоварамШ = таблицаПоТоварам.Скопировать(ТаблицаПоТоварамШ);
										  N = 0.5;	
										  К1 = 1-N/100;
										  Для каждого стр из ТаблицаПоТоварамШ Цикл
											  //таблицаПоТоварам уже пересчитана в рубли по курсу, если отгрузка валютная
											  стр.Цена =  Окр(Стр.Сумма/стр.Количество*К1*1.18,0);
											  //считаем, что скидок нет, все через ценообразование
											  //меняем только регистр Продажи, из всей таблицы нужны только 2 показателя, их и пересчитываем
											  стр.Стоимость = Стр.Цена*Стр.Количество;	
											  стр.СтоимостьБезСкидок = Стр.Цена*Стр.Количество;	
										  конецЦикла;
										  К2 = 1-ТР/ТаблицаПоТоварамШ.Итог("Стоимость");
										  Для каждого стр из ТаблицаПоТоварамШ Цикл
											  стр.Цена = Окр( Стр.Цена*К2,0);
											  //считаем, что скидок нет, все через ценообразование
											  //меняем только регистр Продажи, из всей таблицы нужны только 2 показателя, их и пересчитываем
											  стр.Стоимость = Стр.Цена*Стр.Количество;	
											  стр.СтоимостьБезСкидок = Стр.Цена*Стр.Количество;	
										  конецЦикла;
										  
										  
										  
										  
										  //добавим разницу по регистру взаиморасчеты по договору НДС
										  договорНДС = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Договор НДС",Истина,,Контрагент);
										  
										  // Заполним таблицу движений.
										  СтрокаДвижений = ТаблицаДвижений.Добавить();
										  СтрокаДвижений.ДоговорКонтрагента = ДоговорНДС;
										  СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
										  
										  СтрокаДвижений.СуммаВзаиморасчетов   = ТаблицаПоТоварамШ.Итог("Стоимость")-ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  
										  СтрокаДвижений.СуммаУпр   = ТаблицаПоТоварамШ.Итог("Стоимость")-ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  //с 1 октября другой расчет.	
									  иначеЕсли ДоговорКонтрагента.типДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль и Дата >  '20150930235959'Тогда
										  
										  //сумма транспортных
										  Запрос = Новый Запрос("ВЫБРАТЬ
										  |	ПЗ1.Реализация,
										  |	СУММА(ПЗ2.ДоставкаНал) КАК ДоставкаНал,
										  |	СУММА(ПЗ2.ДоставкаВЦене) КАК ДоставкаВЦене
										  |ИЗ
										  |	(ВЫБРАТЬ
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка КАК Ссылка,
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация КАК Реализация,
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.Сделка КАК ЗАказ
										  |	ИЗ
										  |		Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
										  |	ГДЕ
										  |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = &Реализация) КАК ПЗ1
										  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
										  |			ИнформацияПоПроезду.Задание КАК Задание,
										  |			ИнформацияПоПроезду.Заказ КАК Заказ,
										  |			ИнформацияПоПроезду.ДоставкаНал КАК ДоставкаНал,
										  |			ИнформацияПоПроезду.ДоставкаВЦене КАК ДоставкаВЦене
										  |		ИЗ
										  |			РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду) КАК ПЗ2
										  |		ПО ПЗ1.Ссылка = ПЗ2.Задание
										  |			И ПЗ1.ЗАказ = ПЗ2.Заказ
										  |
										  |СГРУППИРОВАТЬ ПО
										  |	ПЗ1.Реализация");
										  Запрос.УстановитьПараметр("Реализация",Ссылка);
										  Выб = Запрос.Выполнить().Выбрать();
										  
										  Если (Выб.Следующий()) Тогда 
											  ЗначениеГрязное = ?(ЗначениеЗаполнено(Выб.ДоставкаНал),Выб.ДоставкаНал,0) + ?(ЗначениеЗаполнено(Выб.ДоставкаВЦене),Выб.ДоставкаВЦене,0);
											  Если (ЗначениеГрязное<0) Тогда 
												  ТР = 0;
											  Иначе 
												  ТР = ЗначениеГрязное;
											  КонецЕсли;
										  Иначе 
											  ТР = 0;
										  КонецЕсли;
										  Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
											  ТР = ТР+Сделка.СуммаДопРасходовЭкспорт;
										  конецЕсли;
										  
										  ТаблицаПоТоварамШ = таблицаПоТоварам.Скопировать();
										  N = 0.5;	
										  К1 = 1-N/100;
										  К2 = 1-ТР/ТаблицаПоТоварамШ.Итог("Стоимость");
										  Для каждого стр из ТаблицаПоТоварамШ Цикл
											  //таблицаПоТоварам уже пересчитана в рубли по курсу, если отгрузка валютная
											  стр.Цена =  Окр(Стр.Сумма/стр.Количество*К1*К2*1.18,0);
											  //считаем, что скидок нет, все через ценообразование
											  //меняем только регистр Продажи, из всей таблицы нужны только 2 показателя, их и пересчитываем
											  стр.Стоимость = Стр.Цена*Стр.Количество;	
											  стр.СтоимостьБезСкидок = Стр.Цена*Стр.Количество;	
										  конецЦикла;
										  //   К2 = 1-ТР/ТаблицаПоТоварамШ.Итог("Стоимость");
										  //Для каждого стр из ТаблицаПоТоварамШ Цикл
										  //	стр.Цена = Окр( Стр.Цена*К2,0);
										  //	//считаем, что скидок нет, все через ценообразование
										  //	//меняем только регистр Продажи, из всей таблицы нужны только 2 показателя, их и пересчитываем
										  //	стр.Стоимость = Стр.Цена*Стр.Количество;	
										  //	стр.СтоимостьБезСкидок = Стр.Цена*Стр.Количество;	
										  //конецЦикла;
										  
										  
										  
										  
										  //добавим разницу по регистру взаиморасчеты по договору НДС
										  договорНДС = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию("Договор НДС",Истина,,Контрагент);
										  
										  // Заполним таблицу движений.
										  СтрокаДвижений = ТаблицаДвижений.Добавить();
										  СтрокаДвижений.ДоговорКонтрагента = ДоговорНДС;
										  СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
										  
										  СуммаДокументаП = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  
										  
										  СтрокаДвижений.СуммаВзаиморасчетов   = ТаблицаПоТоварамШ.Итог("Стоимость")/118*18;
										  //ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  //СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  //КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  //СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  //КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  //СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  
										  СтрокаДвижений.СуммаУпр   = ТаблицаПоТоварамШ.Итог("Стоимость")/118*18;
										  //ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  //СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  //КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  //СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  //КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  //СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  
										  НДС = ТаблицаПоТоварамШ.Итог("Стоимость")/118*18;
										  КНДС = 1+(НДС)/таблицаПоТоварам.Итог("стоимость"); 
										  ТаблицаПоТоварамШ = таблицаПоТоварам.Скопировать();
										  Для каждого стр из ТаблицаПоТоварамШ Цикл 
											  стр.Стоимость = Стр.Стоимость*КНДС;
											  стр.СтоимостьБезСкидок = Стр.Стоимость*КНДС;
										  КонецЦикла;
										  
										  // убираем ошибки округления
										  Если ТаблицаПоТоварамШ.Итог("Стоимость") <> СуммаДокументаП+ НДС Тогда
											  Разница = ТаблицаПоТоварамШ.Итог("Стоимость") -( СуммаДокументаП+ НДС);
											  ТаблицаПоТоварамШ[ТаблицаПоТоварамШ.Количество()-1].стоимость = ТаблицаПоТоварамШ[ТаблицаПоТоварамШ.Количество()-1].стоимость-Разница;
											  ТаблицаПоТоварамШ[ТаблицаПоТоварамШ.Количество()-1].стоимостьБезСкидок = ТаблицаПоТоварамШ[ТаблицаПоТоварамШ.Количество()-1].стоимость-Разница;
										  КонецЕсли;	 
										  
									  КонецЕсли;	
									  //конец А.А.								
									  
									  
									  //***2016.01.18
									  Если ВыставлениеПени Тогда //Взаиморасчеты по договорам пени из ТЧ.Услуги
										  Запрос = Новый Запрос;
										  Запрос.УстановитьПараметр("Ссылка", Ссылка);
										  Запрос.Текст = "ВЫБРАТЬ
										  |	РеализацияТоваровУслугУслуги.ДоговорПени КАК ДоговорПени,
										  |	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма
										  |ИЗ
										  |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
										  |ГДЕ
										  |	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
										  |
										  |СГРУППИРОВАТЬ ПО
										  |	РеализацияТоваровУслугУслуги.ДоговорПени
										  |
										  |УПОРЯДОЧИТЬ ПО
										  |	ДоговорПени
										  |АВТОУПОРЯДОЧИВАНИЕ";
										  Результат = Запрос.Выполнить().Выбрать();
										  Если Результат.Количество() = 0 Тогда
										  ИначеЕсли Результат.Количество() = 1 Тогда
											  Если Результат.Следующий() Тогда
												  Если НЕ Результат.ДоговорПени = ДоговорКонтрагента Тогда
													  СтрокаДвижений.ДоговорКонтрагента = Результат.ДоговорПени;
												  КонецЕсли;
											  Конецесли;
										  Иначе
											  ЭтоПервый = Истина;
											  Пока Результат.Следующий() Цикл
												  Если ЭтоПервый Тогда
													  СтрокаДвижений.ДоговорКонтрагента = Результат.ДоговорПени;
													  СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(Результат.Сумма, ВалютаДокумента,
													  СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
													  СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(Результат.Сумма, ВалютаДокумента,
													  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													  ЭтоПервый = Ложь;																		
												  Иначе
													  СтрокаДвижений = ТаблицаДвижений.Добавить();
													  СтрокаДвижений.Сделка        	     = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
													  СтрокаДвижений.ДоговорКонтрагента	 = Результат.ДоговорПени;
													  СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(Результат.Сумма, ВалютаДокумента,
													  СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
													  СтрокаДвижений.СуммаУпр   = ПересчитатьИзВалютыВВалюту(Результат.Сумма, ВалютаДокумента,
													  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
													  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
												  КонецЕсли;
											  КонецЦикла;
										  КонецЕсли;
									  КонецЕсли;
									  //*** Выставление пени
									  
									  НаборДвижений.мПериод            = Дата;
									  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
									  
									  // Проверка остатков при оперативном проведении.
									  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
										  НаборДвижений.КонтрольОстатков(ЭтотОбъект, "", СтруктураШапкиДокумента, Отказ, Заголовок);
									  КонецЕсли;
									  
									  Если Не Отказ Тогда
										  Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
									  КонецЕсли;
									  
									  
									  Если ЗначениеНеЗаполнено(Сделка) 
										  Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
										  
										  НаборДвижений = Движения.РасчетыСКонтрагентами;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  
										  // Заполним таблицу движений.
										  СтрокаДвижений = ТаблицаДвижений.Добавить();
										  СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
										  СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
										  СтрокаДвижений.Сделка                = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
										  СтрокаДвижений.СуммаВзаиморасчетов   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
										  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
										  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
										  СтрокаДвижений.СуммаУпр              = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
										  СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										  КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										  КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
										  СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  Если Не Отказ Тогда
											  Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
										  КонецЕсли;
										  
									  КонецЕсли;
									  
									  
									  Если не ДоговорКонтрагента.ВнутренниеВзаиморасчеты тогда
										  
										  // ТОВАРЫ ПО РЕГИСТРУ Продажи.
										  
										  НаборДвижений = Движения.Продажи;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  
										  // Заполним таблицу движений.
										  //если экспорт подсунем пересчитанную таблицу А.А.
										  Если ДоговорКонтрагента.типДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда  
											  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамШ, ТаблицаДвижений);
										  иначе	
											  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
										  конецЕсли;   // Конец А.А.
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
										  ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПокупателя");
										  ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
										  
										  //--------------------Плотников, для онлайн магазинов движения по рег. ПродажиСебестоимость нужно
										  // провести по другому подразделению 25.03.2016
										  Если  Дата>'20180101' Тогда //28.04.2016
										  	ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.ПодразделениеДохода,"Подразделение");
										  Иначе
										  ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
										  КонецЕсли;
										  //------------------Плотников----------------
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Проект,       "Проект");
										  ТаблицаДвижений.ЗаполнитьЗначения(ДисконтнаяКарта,       "ДисконтнаяКарта");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  Если Не Отказ Тогда
											  Движения.Продажи.ВыполнитьДвижения();
										  КонецЕсли;
										  
										  // УСЛУГИ ПО РЕГИСТРУ Продажи.
										  
										  НаборДвижений = Движения.Продажи;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  // Заполним таблицу движений.
										  если договорконтрагента.типдоговора = справочники.ТипыДоговоров.Бонусы и дата>=дата('20180101')тогда
											таблицаБонусов = Бонусы.Выгрузить(); 
											таблицаБонусов.Колонки.Добавить("стоимость");  
											таблицаБонусов.Колонки.Добавить("стоимостьбезскидок"); 
											для каждого тр из таблицаБонусов цикл
											тр.стоимость= тр.сумма;  
											тр.стоимостьбезскидок= тр.сумма; 
											конеццикла;
										  ЗагрузитьВТаблицуЗначений(таблицаБонусов, ТаблицаДвижений);
									      Иначе  
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
										   КонецЕсли;
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
										  ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ЗаказПокупателя");
										  ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
										  Если  Дата>'20180101'и договорконтрагента.типдоговора <> справочники.ТипыДоговоров.Бонусы Тогда //28.04.2016
										  ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.ПодразделениеДохода,"Подразделение");
										  Иначе
										  ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
										  КонецЕсли;
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Проект,       "Проект");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  Если Не Отказ Тогда
											  Движения.Продажи.ВыполнитьДвижения();
										  КонецЕсли;
										  
										  // ПО РЕГИСТРУ ПредоставленныеСкидки.
										  НаборДвижений = Движения.ПредоставленныеСкидки;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  Если Не Отказ Тогда
											  Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
										  КонецЕсли;
										  
									  КонецЕсли;
									  
									  Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
										  
										  // ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
										  НаборДвижений = Движения.ТоварыНаСкладах;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  //+++Баланс, Селин, 17.11.2014
										  Блокировка = Новый БлокировкаДанных;
										  ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
										  ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
										  ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
										  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
										  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
										  Блокировка.Заблокировать();
										  //--Баланс
										  
										  //+++( 23.03.2017 - ВСЕГДА!
										  //// Проверка остатков при оперативном проведении.
										  //			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
										  Если Отказ тогда 
											  Возврат;
										  Иначе
											  НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
											  
											  Если ОТКАЗ тогда
												  Если РежимПроведения = РежимПроведенияДокумента.Оперативный тогда
													  #Если Клиент тогда
														  Сообщить("ЗАПРЕЩЕНО ПРОВОДИТЬ ОТГРУЗКУ В МИНУС! НЕТ ТОВАРА на одном из складов!", СтатусСообщения.ОченьВажное);
													  #КонецЕсли
													  Возврат; // Запрет для ВСЕХ!
													  
												  Иначе //неоперативно - может только фин.отдел делать!
													  
													  #Если Клиент тогда
														  Сообщить("НЕТ ТОВАРА на одном из складов в документе: "+строка(ЭтотОбъект), СтатусСообщения.ОченьВажное);
													  #КонецЕсли
													  
													  //неоперативно - только ФИНОТДЕЛ!
													  Если РольДоступна("яштФинДиректор") тогда // финОтдел + IT + ЕгорМалышев, Бондаренко, Марешева
														  Отказ = ложь;
													  КонецЕсли;
													  
												  КонецЕсли;	
											  КонецЕсли;	
										  КонецЕсли;
										  //+++)
										  
										  Если Не Отказ Тогда
											  
											  ////+++Плотников, 19.06.2017
											  //Блокировка = Новый БлокировкаДанных;
											  //ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыНаКомиссии");
											  //ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
											  //ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
											  //ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
											  //ЭлементБлокировки.УстановитьЗначение("Подразделение", Подразделение);
											  //Блокировка.Заблокировать();
											  ////---Плотников
											  //
											  //ТаблицаПоКомиссии = ПроверитьОстаткиНаКомиссии(ТаблицаДвижений);
											  //
											  //НаборДвижений = Движения.ТоварыНаКомиссии;
											  //
											  //// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
											  //ТаблицаДвиженийТоварыНаКомиссии = НаборДвижений.Выгрузить();
											  //ТаблицаДвиженийТоварыНаКомиссии.Очистить();
											  //ТаблицаДвижений = ТаблицаДвиженийТоварыНаКомиссии.Скопировать();
											  //
											  //// Заполним таблицу движений.
											  //ЗагрузитьВТаблицуЗначений(ТаблицаПоКомиссии, ТаблицаДвижений);
											  ////ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
											  //ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
											  //
											  //НаборДвижений.мПериод            = Дата;
											  //НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
											  //
											  //Движения.ТоварыНаКомиссии.ВыполнитьРасход();
											  Движения.ТоварыНаСкладах.ВыполнитьРасход();
										  КонецЕсли;
										  
										  
										  //ТОВАРЫ ПО РЕГИСТРУ ТоварыАдресноеХранение.
										  Если Не Отказ и ТоварыАдресноеХранение.Количество() > 0 Тогда
											  //+++Баланс, Селин, 17.11.2014
											  Блокировка = Новый БлокировкаДанных;
											  ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыАдресноеХранение");
											  ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
											  ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.ТоварыАдресноеХранение;
											  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
											  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
											  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АдресХранения", "АдресХранения");
											  Блокировка.Заблокировать();
											  //--Баланс
											  //+++ 27.08.2014 - предупрежедение ВСЕГДА!
											  //Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  яштАдресноеХранение.КонтрольОстатковАдресноеХранение(ЭтотОбъект.Ссылка,Отказ );
											  
											  //+++ 27.08.2014 - неоперативно можно проводить в минус ТОЛЬКО для Полных прав!
											  Если Отказ и РольДоступна("ПолныеПрава") и РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
												  Отказ = ЛОЖЬ;	
											  КонецЕсли;
											  
											  Если Не Отказ Тогда
												  яштАдресноеХранение.ДвиженияПоРегиструТоварыАдресноеХранение(Движения.ТоварыАдресноеХранение, ЭтотОбъект);
											  КонецЕсли;
										  КонецЕсли;
										  
										  
										  // ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
										  НаборДвижений = Движения.ТоварыНаСкладах;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
										  
										  // Недостающие поля.
										  ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ТоварыНаСкладах.ВыполнитьРасход();
										  КонецЕсли;
										  
									  Иначе // отпуск по ордеру
										  
										  // ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
										  НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
										  
										  // Недостающие поля.
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
										  ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                       "ДокументПередачи");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
										  КонецЕсли;
										  
										  // ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
										  НаборДвижений = Движения.ТоварыКПередачеСоСкладов;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
										  
										  // Недостающие поля.
										  ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый,                       "Качество");
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
										  ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                      "ДокументПередачи");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ТоварыКПередачеСоСкладов.ВыполнитьПриход();
										  КонецЕсли;
									  КонецЕсли;
									  
									  // ТАРА ПО РЕГИСТРУ ТоварыПереданные
									  
									  НаборДвижений = Движения.ТоварыПереданные;
									  
									  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
									  ТаблицаДвижений = НаборДвижений.Выгрузить();
									  
									  // Заполним таблицу движений.
									  ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
									  
									  // Недостающие поля.
									  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
									  ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,,, Истина),"Сделка");
									  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара,"СтатусПередачи");
									  
									  НаборДвижений.мПериод            = Дата;
									  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
									  
									  // Проверка осатков при оперативном проведении.
									  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
										  НаборДвижений.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
									  КонецЕсли;
									  
									  Если Не Отказ Тогда
										  Движения.ТоварыПереданные.ВыполнитьПриход();
									  КонецЕсли;
									  
									  
									  Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
										  
										  // ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
										  НаборДвижений = Движения.ТоварыПереданные;
										  
										  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  // Заполним таблицу движений.
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
										  
										  // Недостающие поля.
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
										  ТаблицаДвижений.ЗаполнитьЗначения(ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,"СтатусПередачи");
										  
										  НаборДвижений.мПериод            = Дата;
										  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
										  
										  Если Не Отказ Тогда
											  Движения.ТоварыПереданные.ВыполнитьПриход();
										  КонецЕсли;
										  
									  КонецЕсли;
									  
									  // Если в реквизите Сделка указан внешний заказ покупателя, то проводится 
									  // по регистру ЗаказыПокупателей
									  Если Не ЗначениеНеЗаполнено(Сделка) 
										  И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
										  И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
										  И ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателяСезонный") Тогда
										  
										  НаборДвижений = Движения.ЗаказыПокупателей;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
										  
										  // Недостающие поля
										  ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
										  
										  НаборДвижений.мПериод          = Дата;
										  НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  // Контроль объема отгрузки по заказу
											  //+++Баланс, Селин, 17.11.2014
											  Блокировка = Новый БлокировкаДанных;
											  ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателей");
											  ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
											  ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
											  ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
											  ЭлементБлокировки.УстановитьЗначение("ЗаказПокупателя",Сделка);
											  Блокировка.Заблокировать();
											  //--Баланс
											  Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары", Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ЗаказыПокупателей.ВыполнитьРасход();
										  КонецЕсли;
										  
										  НаборДвижений = Движения.ЗаказыПокупателей;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
										  
										  // Недостающие поля
										  ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "СтатусПартии");
										  
										  НаборДвижений.мПериод          = Дата;
										  НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  НаборДвижений.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ЗаказыПокупателей.ВыполнитьРасход();
										  КонецЕсли;
										  
										  НаборДвижений = Движения.ЗаказыПокупателей;
										  
										  ТаблицаДвижений = НаборДвижений.Выгрузить();
										  ТаблицаДвижений.Очистить();
										  
										  ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
										  
										  // Недостающие поля
										  ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
										  ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
										  
										  ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "СтатусПартии");
										  
										  НаборДвижений.мПериод          = Дата;
										  НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
										  
										  // Проверка осатков при оперативном проведении.
										  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
											  НаборДвижений.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги", Отказ, Заголовок);
										  КонецЕсли;
										  
										  Если Не Отказ Тогда
											  Движения.ЗаказыПокупателей.ВыполнитьРасход();
										  КонецЕсли;
										  
										  // = 19.10.2016
										  // ДатаОтсчета  = Константы.ДатаУчетаСЗППоРегистру.Получить();  //
										  
										  Если Не Отказ и ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") 
											  //и (ДатаОтсчета <> Дата(1,1,1) и ДатаОтсчета <=Дата) //09.08.2018 - дата = 19.10.2016  такие "древние" реалиции НЕ проводятся уже никогда
											  Тогда
											  
											  
											  //+++ 16.02.2018 - по сезонному клиента надо всегда
											  ДвиженияПоЗаказыПокупателейСезонные(); 
											  
											  //+++( 09.02.2018 --- списание сезонника по резервному клиенту ---
											  клиентРезерв = ДоговорКонтрагента.КонтрагентДляРезерваИМ;
											  Если НЕ клиентРезерв.Пустая() тогда 
												  ДвиженияПоЗаказыПокупателейСезонныеРезерв(клиентРезерв); // обычный и "нескончаемый" резерв
											  КонецЕсли;
											  //+++)
											  
										  КонецЕсли;
										  
										  
										  
										  // Если есть списание из резерва, то надо списать резерв
										  ТаблицаПоТоварамИзРезерва = ТаблицаПоТоварам.Скопировать();
										  Сч = 0;
										  Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
											  СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
											  Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
												  ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
											  Иначе 
												  Сч = Сч + 1;
											  КонецЕсли; 
										  КонецЦикла;
										  
										  Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
											  НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
											  
											  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
											  ТаблицаДвижений = НаборДвижений.Выгрузить();
											  
											  // Заполним таблицу движений.
											  ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);
											  
											  // Недостающие поля.
											  ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ДокументРезерва");
											  
											  НаборДвижений.мПериод            = Дата;
											  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
											  
											  // Проверка осатков при оперативном проведении.
											  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
												  НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
											  КонецЕсли;
											  
											  Если Не Отказ Тогда
												  Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
											  КонецЕсли;
											  
										  КонецЕсли;
										  
										  ТаблицаПоТареИзРезерва = ТаблицаПоТаре.Скопировать();
										  Сч = 0;
										  Пока Сч < ТаблицаПоТареИзРезерва.Количество() Цикл
											  СтрокаТаблицы = ТаблицаПоТареИзРезерва.Получить(Сч);
											  Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
												  ТаблицаПоТареИзРезерва.Удалить(СтрокаТаблицы);
											  Иначе 
												  Сч = Сч + 1;
											  КонецЕсли; 
										  КонецЦикла;
										  
										  Если ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
											  
											  НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
											  
											  // Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
											  ТаблицаДвижений = НаборДвижений.Выгрузить();
											  ТаблицаДвижений.Очистить();
											  
											  // Заполним таблицу движений.
											  ЗагрузитьВТаблицуЗначений(ТаблицаПоТареИзРезерва, ТаблицаДвижений);
											  
											  // Недостающие поля.
											  ТаблицаДвижений.ЗаполнитьЗначения(Сделка,"ДокументРезерва");
											  
											  НаборДвижений.мПериод            = Дата;
											  НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
											  
											  // Проверка осатков при оперативном проведении.
											  Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
												  НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
											  КонецЕсли;
											  
											  Если Не Отказ Тогда
												  Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
											  КонецЕсли;
											  
										  КонецЕсли;
										  
									  ИначеЕсли ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателяСезонный") и Найти(Контрагент.Наименование,"YST") = 0 Тогда	
										  
										  ДвиженияПоЗаказыПокупателейСезонныеВЭД();
										  
									  КонецЕсли; 
									  
									  //Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателяСезонный") и РольДоступна("ДополнительныеПраваВЭД") тогда
									  //	
									  //	ДвиженияМеждуСобственнымиЮРЛицамиИЗакупкиВЭД();
									  //	
									  //КонецЕсли;
								  КонецЕсли; // Если ОтражатьВУправленческомУчете
							  конецЕсли;
						  КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру взаиморасчетов для НДС
//
// Параметры:
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегиструВзаиморасчетыДляНДС(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)

	// По регистрам взаиморасчетов для НДС проводятся документы, у которых
	// установлен флаг БУ и которые оформлены по договору с покупателем.
	Если НЕ ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Возврат;
	КонецЕсли;

	// По регистру ВзаиморасчетыСПокупателямиДляНДС.
	НаборДвижений = Движения.ВзаиморасчетыСПокупателямиДляНДС;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();

	СтрокаДвижений.Организация        = СтруктураШапкиДокумента.Организация;
	СтрокаДвижений.ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.Сделка             = ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);;

	СтрокаДвижений.Сумма   = ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
	                                                    мВалютаРегламентированногоУчета,
	                                                    КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1,
	                                                    КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
	                                                    1);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПокупателямиДляНДС.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструВзаиморасчетыДляНДС()

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
								  
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			//+++Баланс, Селин, 17.11.2014
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыОрганизаций");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.УстановитьЗначение("Организация",Организация);
			Блокировка.Заблокировать();
            //--Баланс
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка     , "ДокументПередачи");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыКПередачеОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;		

	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");
			
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
	КонецЦикла;

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,   "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.ПроводкаСумма+СтрокаТЧ.ПроводкаСуммаНДС;
		
		Строка.СуммаНДС = СтрокаТЧ.ПроводкаСуммаНДС;
		
		// Если склад указан только в шапке
		Если ЗначениеНеЗаполнено(Строка.ВидСклада) Тогда
			Строка.ВидСклада = Склад.ВидСклада;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете,"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете,    "ОтражатьВНалоговомУчете");
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");

КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок);

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.

	ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;

	// Если ПУ по складам не ведется, очищаем склад
	Если Не СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;

	// Если резервирование под заказ - заказ партии
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ЗначениеНеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказПартии");
	КонецЕсли;

	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(?(НЕ ЗначениеНеЗаполнено(Сделка), Сделка, Неопределено),"ЗаказСписания");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");

	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;

	КонецЦикла;

	// Если ПУ по складам
	Если Не СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Склад");
	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПартии");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("ВидСклада", "Склад.ВидСклада");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", Основание.Метаданные()) Тогда
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
	КонецЕсли;
	
	Если ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", Основание.Метаданные()) Тогда
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете     = Основание.ОтражатьВНалоговомУчете;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		//+++( 20.11.2014 - СРАЗУ ЗАПРЕЩАЕМ при вводе на основании (для филиалов!), а не при проведении!
		Если Основание.Контрагент.ЗапретОтгрузки тогда
			#Если Клиент тогда
				Предупреждение("         НЕЛЬЗЯ ОТГРУЖАТЬ ТОВАР!
				|Клиенту "+строка(Основание.Контрагент)+" - Запрещены любые отгрузки!", 30);
			#КонецЕсли		   
			возврат;
		КонецЕсли;
		Отказ = ложь;
		ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(Основание, Отказ); // ДЗ + сумма этой реализации
		Если Отказ тогда
			#Если Клиент тогда
				Предупреждение("	   Отгрузка невозможна!
				|Причина указана ниже, в служебном окне.",60);
			#КонецЕсли		   
			Возврат;
		КонецЕсли;	
		//+++)	
		
		//+++ с 16.04.2013 - но для старых документов - по старому
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") и (не Основание.Транзит)
			и Константы.ИспользованиеРезерваНаСкладах.Получить() тогда  
			#Если Клиент тогда
				Предупреждение("Ввод реализаций осуществляется только из документа ""Задание на отгрузку""!",30);
			#КонецЕсли  
			Если не РольДоступна("ПолныеПрава") тогда 
				возврат;
			КонецЕсли;
		КонецЕсли;	
		
		// Заполним реквизиты шапки по документу основанию.
		ПунктРазгрузки = Основание.АдресдляТТН;//Основание.АдресДоставки; //+++ 24.04.2012 - только для ТТН и не переносится в Бухгалтерию
		
		Подразделение = Основание.Подразделение;
		Ответственный = Основание.Ответственный;
		Комментарий  = Основание.Комментарий;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОрганизацияДляПечати   =  Основание.ОрганизацияДляПечати;
			ГрузоПолучатель = Основание.ГрузоПолучатель;
			
			//+++( 20.04.2012
			ГрузоОтправитель = Основание.ГрузоОтправитель; 
			
			Водитель = СокрЛП(Основание.КонтактноеЛицо.Наименование);
			МаркаАвтомобиля  = Основание.МаркаАвтомобиля;
			ГосНомерАвтомобиля  = Основание.ГосНомерАвтомобиля;
			Если ЗначениеЗаполнено(Основание.АвтомобильКонтрагента) тогда
				Автомобиль = Основание.АвтомобильКонтрагента;
			КонецЕсли;
			//+++)
			
		КонецЕсли;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда 
			Автомобиль		= Основание.Автомобиль;
			ИзОбработки   	= Основание.ИзОбработки; 
			ЗаказНаряд 		= Основание.ЗаказНаряд; 
			//	РаботаСООО		= Основание.РаботаСООО;
		Иначе 
			ИзОбработки = Ложь;
		КонецЕсли;
		
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ЭтотОбъект.Дата = ТекущаяДата();//+++ 17.11.2015 - установка текущей даты и времени!
		
		Если НЕ ЗначениеЗаполнено(ПунктРазгрузки) тогда //+++ 24.04.2012 - адрес доставки - куда!
			Если ЗначениеЗаполнено(ГрузоПолучатель) Тогда //+++ 27.11.2012 ГрузоПолучатель а не Грузоотправитель!
				ФактАдрес = ПолучитьДанныеКонтактнойИнформации(ГрузоПолучатель, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
			ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
				ФактАдрес = ПолучитьДанныеКонтактнойИнформации(Контрагент, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				ПунктРазгрузки = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
			КонецЕсли;	
		КонецЕсли;	
		
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		// Сделку и табличные части заполняем только если взаиморасчеты ведутся не по расчетным документам.
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов <>
			Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
			
			Сделка = Основание;
			Если Основание.Проведен Тогда
				
				ВариантВыводаФормыЗаполнения = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"ВариантВыводаФормыЗаполнения");
				Если ВариантВыводаФормыЗаполнения = Перечисления.ВариантыВыводаФормыЗаполнения.ВызыватьВсегда Тогда
					
					// тут заполнять не надо - откроется форма выбора
					мОткрыватьФормаЗаполненияПоЗаказу = Истина;
				Иначе
					// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
					ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание, ВариантВыводаФормыЗаполнения);
					Если Не мОткрыватьФормаЗаполненияПоЗаказу Тогда
						ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание, ВариантВыводаФормыЗаполнения);
						Если Не мОткрыватьФормаЗаполненияПоЗаказу Тогда
							ЗаполнитьУслугиПоОстаткамУпр();
						КонецЕсли;
					КонецЕсли;
					
					// Может, в процессе заполнения обнаружены нехватки и надо вызвать форму заполнения
					// Тогда почистим табличные части
					Если мОткрыватьФормаЗаполненияПоЗаказу = Истина Тогда
						Товары.Очистить();
						ВозвратнаяТара.Очистить();
						Услуги.Очистить();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				
				СкопироватьТовары();
				СкопироватьВозвратнуюТару();
				СкопироватьУслуги();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если Основание.Подразделение.ВЭД Тогда //если это ВЭД, тогда заполняем по Сезонному заказу покупателю
			Попытка 
			    СЗЗаказ = Основание.Сделка.Основание.ДокументОснование;
			Исключение
				СЗЗаказ = Документы.ЗаказПокупателяСезонный.ПустаяСсылка();
			КонецПопытки;
			
			Если ЗначениеНеЗаполнено(СЗЗаказ) Тогда
				Сообщить("Не найден Сезонный заказ покупателя, заполнение не может быть проведено корректно,
				         |убедитесь, то все документы введены последовательно!!!");
				Возврат;
			КонецЕсли;
			
			ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,СЗЗаказ);
			Сделка = СЗЗаказ;
			
			// Заполним реквизиты шапки по документу основанию.
			Организация   = Основание.Организация;
			Подразделение = Основание.Подразделение;
			ВидОперации   = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
			
			Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				Склад = Основание.СкладОрдер;
			Иначе
				Склад = Основание.СкладОрдер.Склад;
			КонецЕсли;
						
			Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			
			Если Найти(Основание.Организация.Наименование,"Wheels Group") > 0 Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("YST Турция");
				ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Коэф = 1;
			ИначеЕсли Найти(Основание.Организация.Наименование,"YST") > 0 Тогда
				Подразделение = Справочники.Подразделения.НайтиПоНаименованию("Подразделение YST-Турция");
				ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Организация = Справочники.Организации.НайтиПоКоду("00006");
				Коэф = 1;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаДокумента, ПолучитьРабочуюДату());
			КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
						
			Если Основание.Проведен Тогда
				
				// Заполним табличные части по документу основанию (Поступление товаров);
				// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
				ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание);
				
			КонецЕсли;
			
			для каждого стр из Основание.товары Цикл
				
				Нов = Товары.Добавить();				
				ЗаполнитьЗначенияСвойств(Нов,Стр);
				
				СтрЦена = СЗЗаказ.Товары.Найти(стр.Номенклатура);
				Если СтрЦена<> Неопределено Тогда
					Цена = СтрЦена.Цена;
				Иначе
					Цена = 0;
				КонецЕсли;
				
				нов.Цена = Цена*Коэф;
				Нов.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Нов.Склад = Склад;
				РассчитатьСуммуТабЧасти(Нов, ЭтотОбъект);
			    РассчитатьСуммуНДСТабЧасти(Нов, ЭтотОбъект);
			КонецЦикла;
			
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете = Ложь;
			
		Иначе //если не ВЭД, то по старому
			// Заполним реквизиты шапки по документу основанию.
			Организация   = Основание.Организация;
			Подразделение = Основание.Подразделение;
			ВидОперации   = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
			
			Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				Склад = Основание.СкладОрдер;
			Иначе
				Склад = Основание.СкладОрдер.Склад;
			КонецЕсли;
			
			Контрагент         = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойПокупатель");
			ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			
			Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
				ВалютаДокумента = мВалютаРегламентированногоУчета;
			Иначе
				ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;
			
			СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаДокумента, ПолучитьРабочуюДату());
			КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			
			// ТипЦен.
			ТипЦен = ДоговорКонтрагента.ТипЦен;
			
			Если ЗначениеНеЗаполнено(ТипЦен) Тогда
				ТипЦен = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновнойТипЦенПродажи");
			КонецЕсли;
			
			// Флаги включения налогов.
			УчитыватьНДС = Истина;
			Если Не ЗначениеНеЗаполнено(ТипЦен) Тогда
				
				// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
				ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
				СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;
				
			Иначе
				// Заполним значениями по умолчанию (не заполнен ТипЦен).
				СуммаВключаетНДС= Истина;
			КонецЕсли;
			
			Если Основание.Проведен Тогда
				
				// Заполним табличные части по документу основанию (Поступление товаров);
				// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание);
				ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Пени
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НачислениеПени") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Сделка = Основание;
		
		ВидОперации   = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		СуммаВключаетНДС = Истина;
		УчитыватьНДС = Истина;
		
		//+++ 30.09.2014 при внешнем соединении или с сервера - не работает...	
		#Если Клиент тогда
			яштПени.ВысталениеПени(ЭтотОбъект, Основание);
		#КонецЕсли
		
		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = ПолучитьКурсВалюты(ВалютаДокумента, ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		Подразделение =  ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеПодразделение");
		
		//31.05.2016 если договор или подразделение не заполнились, заполним принудительно
		Если ЗначениеНеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) или ЗначениеНеЗаполнено(ЭтотОбъект.Подразделение) Тогда 
			ДобавитьДоговорКонтрагентаПодразделение(ЭтотОбъект, Основание);
		КонецЕсли;	
		//
		
		
		//*** добавлено 2013.12.02 для начисления пени из отчета код 265
		Если Основание.РасчетСуммыПениВФайле И Основание.Пени.Итог("Пени")=0 Тогда
			
			ОтражатьВУправленческомУчете = Истина;
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете = Ложь;
			
			УслугаПени = Услуги.Добавить();
			УслугаПени.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("9091939");
			УслугаПени.Содержание = "Пени";
			УслугаПени.Количество = 1;
			УслугаПени.Цена = Основание.СуммаДокумента;
			УслугаПени.Сумма = Основание.СуммаДокумента;
			УслугаПени.СтавкаНДС = УслугаПени.Номенклатура.СтавкаНДС;
			УслугаПени.ДоговорПени = Основание.ДоговорКонтрагента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Пени
	
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ЭтоНовый() тогда
		Если Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
			подразделениеДохода =  справочники.Подразделения.НайтиПоКоду("00171");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00170");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.TyreTechnology Тогда //гонконг
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00166");
		ИначеЕсли Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.WheelsGroupLimited Тогда  //турция
			подразделениеДохода =   справочники.Подразделения.НайтиПоКоду("00162");
		иначе
			подразделениеДохода = ?(ЗначениеЗаполнено(ДоговорКонтрагента.ОтветственноеЛицо.ПодразделениеБюджет),ДоговорКонтрагента.ОтветственноеЛицо.ПодразделениеБюджет,ДоговорКонтрагента.ОтветственноеЛицо.ОсновноеПодразделение);	
		конецЕсли;
	конецЕсли;	
	
   Если ЭтоНовый() и ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
	конецЕсли;
	
	яштДокументОбъектПередЗаписью(ЭтотОбъект, Отказ);
	
	//Если ЭтоНовый()и ВалютаДокумента<>Константы.ВалютаРегламентированногоУчета.Получить() Тогда                    
	//КурсВзаиморасчетов = константы.КурсUSD.Получить();
	//конецЕсли;
	
	//+++ 27.08.2012
	Если Контрагент.Родитель = справочники.Контрагенты.ПотенциальныеПокупатели 
		и режимЗаписи = РежимЗаписиДокумента.Проведение тогда
		сообщить("Нельзя проводить документ с контрагентом из группы """+строка(справочники.Контрагенты.ПотенциальныеПокупатели)+"""", СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;	
	
	Если Отказ тогда //+++ 10.09.2012
		Возврат;
	КонецЕсли;	
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	
	
	
	//+++( 06.02.2015 - ставка 0% для Экспортных клиентов c договором "ШинтрейдЯрославль"
	//- всегда в модуле - потому что реализации создаются автоматически
	Если НЕ Отказ Тогда
		Если Контрагент.Экспорт        // обязательное и главное условие
			И ЭтотОбъект.УчитыватьНДС 
			и ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль 
			тогда
	
			НадоСообщить = ложь;
			
			//установка ставки 0%
			Для каждого стр1 из Товары цикл
				Если стр1.СтавкаНДС <> перечисления.СтавкиНДС.НДС0 тогда //только если ставка уже не была равна 0%
					НадоСообщить = истина;
	 				стр1.СтавкаНДС = перечисления.СтавкиНДС.НДС0;
					стр1.СуммаНДС  = 0;
				КонецЕсли;	
			КонецЦикла;
			
			#Если Клиент тогда
				Если НадоСообщить тогда
					Сообщить("Ставка НДС = 0% установлена автоматически для всех строк товаров!", СтатусСообщения.Внимание);
				КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;	
	КонецЕсли;	
	//+++)
	
	
	
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда 

		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла

	КонецЕсли;

	СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	ЗаполнитьСкладыВТЧ();
	
		//Если Не ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда 
		//	
		//// проверка соответствия веса	- отключил, уже есть в форме документа
		//	//ВесИтого=ПолучитьОбщийВесНетто(Товары);
		//	//Если ВесИтого<>ОбщийВес Тогда
		//	//	ЗаполнитьВесНетто(Товары);
		//	//ОбщийВес=ВесИтого;
		//	//КонецЕсли;
		//
		//	ЭтоНовый = ЭтоНовый();
		//	//ПроверкаВозможностиИзмененияДокумента(ЭтотОбъект, Отказ);
		//	
		//	
		//	ПроверитьНачисленияПени(ЭтотОбъект.Ссылка, Отказ);
		//КонецЕсли;

	//БАЛАНС (04.12.2007)                       
	//
	
	//ОЛ 24.04.2015  назначение следующего номера для Формула Авто
	Если НЕ Отказ Тогда
		Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") 
			или ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль
			или ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс
			Тогда
			Если ЭтоНовый() И НомерФормулаАвто=0 
				и ЭтотОбъект.Товары.Количество()>0 Тогда //+++ 28.05.2015 - только для товаров, а не для услуг!
				НомерФормулаАвто = ПолучитьНомерДокументаФормулаАвто(ДоговорКонтрагента.ТипДоговора); 
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	//конец ОЛ
	
	Если мПроведениеИзФормы тогда
		ЗарегистрироватьОбъект(ЭтотОбъект,Отказ,мПроведениеИзФормы);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		обЗаписатьПротоколИзменений(ЭтотОбъект);
		
	КонецЕсли; 
	
	//Плотников, временный запрет на диски
	
	//если ЭтотОбъект.Дата > Дата("20170522000000") тогда
	//	
	//	СписокЗапрет  = Новый СписокЗначений;
	//	СписокЗапрет.Добавить(Справочники.Номенклатура.НайтиПоКоду("9124599"));  //Плотников 26.05.17 запрет на отгрузку моделей временный
	//	СписокЗапрет.Добавить(Справочники.Номенклатура.НайтиПоКоду("9129592"));
	//	СписокЗапрет.Добавить(Справочники.Номенклатура.НайтиПоКоду("9124746"));
	//	СписокЗапрет.Добавить(Справочники.Номенклатура.НайтиПоКоду("9161922"));
	//	СписокЗапрет.Добавить(Справочники.Номенклатура.НайтиПоКоду("9166471"));
	//	
	//	списокМоделей  = Новый СписокЗначений;
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04911"));   //Плотников 26.05.17 запрет на отгрузку моделей временный
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04913"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04914"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("04915"));
	//	
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05667"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05668"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05669"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05670"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("05671"));
	//	
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("20987"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("20965"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31134"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31135"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31136"));
	//	списокМоделей.Добавить(Справочники.МоделиТоваров.НайтиПоКоду("31137"));
	//	
	//	Для каждого стр из Товары Цикл
	//		Если стр.Номенклатура.Производитель  = Справочники.Производители.НайтиПоКоду("3291") 
	//			или стр.Номенклатура.Производитель  = Справочники.Производители.НайтиПоКоду("3485")
	//			или стр.Номенклатура.Производитель  = Справочники.Производители.НайтиПоКоду("3657")
	//			или стр.Номенклатура.Производитель  = Справочники.Производители.НайтиПоКоду("3658")
	//			или (стр.Номенклатура.Производитель  = Справочники.Производители.НайтиПоКоду("100") и списокМоделей.НайтиПоЗначению(стр.Номенклатура.Модель) = Неопределено) 
	//			или СписокЗапрет.НайтиПоЗначению(стр.Номенклатура) <> Неопределено Тогда
	//			Отказ = Истина;
	//			Сообщить("Нельзя отгружать эти диски!!!", СтатусСообщения.Внимание);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	Если РольДоступна("ДополнительныеПраваВЭД") Тогда
		
		Если не Подразделение.ВЭД Тогда
			
			отказ = истина;
			Сообщить("Вам нельзя создавать документы!!!", СтатусСообщения.Внимание);
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
	СкладВТабличнойЧасти =    (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
	Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", СкладВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = СформироватьДеревоПолейЗапросаПоШапке();
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "РасчетыВУсловныхЕдиницах"                   , "РасчетыВУсловныхЕдиницах");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                                , "ДоговорОрганизация");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                                , "ВидДоговора");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если Не ЗначениеНеЗаполнено(Сделка) 
		И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	// Проверим допустимость для пользователя цен документа
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                 , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                             , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                            , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                       , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Качество"                         , "Качество");
	СтруктураПолей.Вставить("Склад"                            , "Склад");
	СтруктураПолей.Вставить("Сумма"                            , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                            , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                        , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                      , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"        , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	
	// Дополним полями, нужными для регл.учета НДС
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	РезультатЗапросаПоТоварам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	
	РезультатЗапросаПоТаре = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"    , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"      , "Содержание");
	СтруктураПолей.Вставить("Услуга"          , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"           , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"      , "Количество");
	СтруктураПолей.Вставить("Цена"            , "Цена");
	СтруктураПолей.Вставить("Сумма"           , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"        , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"       , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"             , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"     , "НомерСтроки");
	
	РезультатЗапросаПоУслугам = СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	яштАдресноеХранение.ПроверитьЗаполнениеТабЧастиТоварыАдресноеХранение(ЭтотОбъект.Ссылка,Отказ);
	
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
		Или ОтражатьВНалоговомУчете Тогда
		ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;
	
	#Если Клиент тогда

	Если Не ПараметрыСеанса.ИдетОбменРаспределеннойБазы Тогда 
		
		// Запрет неоперативного проведения
		
		Если Константы.ИспользоватьОграниченияНаНеоперативноеПроведение.Получить() Тогда
			Если не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"РазрешитьНеоперативноеПроведениеДокументов") И 
				РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
				Отказ=Истина;
				СообщитьОбОшибке("Вам не разрешено неоперативное проведение документов");
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		// Проверка соответствия цен с заказом
		Если  мПроведениеИзФормы И НЕ ЗначениеНеЗаполнено(Сделка) Тогда 
			СравнитьЦеныСЗаказомПокупателя(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// +++( 24.07.2013
	// Проверка превышения лимита дебиторской задолженности - в реализации, а не в заказе!
	Если Не Отказ 
		и не ЭтотОбъект.ОбменДанными.Загрузка 	// для обычного проведения (не загрузка), 
		и ЭтотОбъект.Проведен  					// только при проведении, а не для отмены
		и ЭтотОбъект.Товары.Количество()>0 тогда// только для отгрузки!
		
		//+++Баланс, Селин, 17.11.2014     //++А.А. блокируем и по договору НДС, если такой есть (создается для контрагентов Шинтрейда)
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВзаиморасчетыСКонтрагентами");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|	Или ДоговорыКонтрагентов.Наименование = ""Договор НДС"")";
		
		ЭлементБлокировки.ИсточникДанных = Запрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорКонтрагента");
		Блокировка.Заблокировать();
		//--Баланс
		
		Если не Подразделение.ВЭД Тогда
			
//			ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект.Ссылка, Отказ); // ДЗ + сумма этой реализации
			
			Если ТипЗнч(Сделка) = тип("ДокументСсылка.ЗаказПокупателя") тогда // только если реализация сделана на основании Заказа!
				
				флагЗапрета = НЕ (РольДоступна("яштФинДиректор")  // Для Фин.Отдела  и для Робота (проведения партий)
							  ИЛИ РольДоступна("ПравоЗавершенияРаботыПользователей")
							      ); 				
								  
				//+++ 07.11.2017 по заказу уже сделаны все проверки!  по задаче № 4835 от Серкова!
				//	поэтому только если дата отгрузки заказа <> дате реализации!
				Если НачалоДня(Сделка.ДатаОтгрузки)<>НачалоДня(ЭтотОбъект.Дата) тогда 
					  
					ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект.Ссылка, Отказ); // ДЗ + сумма этой реализации
					
					//Миронычев
					Если ЭтотОбъект.ДоговорКонтрагента.ТипДоговора <> Справочники.ТипыДоговоров.ПредоплатаПоСчетам тогда
				        ПроверитьДоговорВЗаказеПокупателя(ЭтотОбъект, Отказ, флагЗапрета); //+++   12.09.2016 ЗАПРЕТ ОТГРУЗКИ на дату реализации!
					КонецЕсли;
					//КонецМиронычев
				
				КонецЕсли;
			
			Иначе //сделка не заказ!
				ПроверитьПревышениеОбщегоЛимитаДЗСУчетомЗаказа(ЭтотОбъект.Ссылка, Отказ); // ДЗ + сумма этой реализации
			КонецЕсли;
			
		КонецЕсли;//ВЭД
		
	КонецЕсли;
	//+++)
	
	#КонецЕсли
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		ТаблицаПоУслугам, Отказ, Заголовок);
	КонецЕсли;
	
	#Если Клиент тогда
   	
	//+++( 18.08.2014 - перенесено из формыДокумента и дополнено изменение ДатыОплаты	
	Если Не Отказ 
		И ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И Не ЗначениеНеЗаполнено(Сделка) И ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") тогда //+++ 29.07.2014 устранена ошибка при других сделках
		
		ДатаОтгрузки0 = НачалоДня(Сделка.ДатаОтгрузки); 	
		ДатаОтгрузки1 = НачалоДня(Дата); 
		услОтгрузки = ДатаОтгрузки0<>ДатаОтгрузки1;
		
		//+++( 18.08.2014 - пересчет даты оплаты в заказе покупателя по дате реальной отгрузки, если ЧислоДнейСМоментаОтгрузки>0
		датаОплаты0 = НачалоДня(Сделка.ДатаОплаты);
		датаОплаты1 = НачалоДня(ЭтотОбъект.Дата) + Сделка.ЧислоДнейСМоментаОтгрузки*86400;
		
		услОплаты = ( Сделка.ЧислоДнейСМоментаОтгрузки>0 и датаОплаты1<>датаОплаты0 )
		или ( датаОплаты1 > датаОплаты0 );
		
		Если услОтгрузки или услОплаты Тогда  //только  по условию!
			
			ЗаказПокупателяОбъект = Сделка.ПолучитьОбъект();	
			
			Если ДатаОтгрузки0<>ДатаОтгрузки1 тогда
				ЗаказПокупателяОбъект.ДатаОтгрузки=ДатаОтгрузки1;
			КонецЕсли;
			
			Если услОплаты тогда  //только в сторону увеличений, а не в обе стороны <>
				ЗаказПокупателяОбъект.ДатаОплаты = датаОплаты1;    // от 1 до 999
			КонецЕсли;
			
			попытка
				//+++ 20.08.2014 - В РЕЖИМЕ ОБМЕНА!
				ЗаказПокупателяОбъект.ОбменДанными.Загрузка = Истина;
				ЗаказПокупателяОбъект.Записать();
				ЗаказПокупателяОбъект.ОбменДанными.Загрузка = ЛОЖЬ;
				
				#Если Клиент тогда
					Если ДатаОтгрузки1 <> ДатаОтгрузки0 Тогда
						сообщить("Дата отгрузки "+?(ДатаОтгрузки1>ДатаОтгрузки0,"увеличена","уменьшена")+" c "+формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" на "+формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" в "+строка(Сделка), СтатусСообщения.Информация);
					КонецЕсли;  
					Если услОплаты тогда
						сообщить("Дата оплаты "+?(датаОплаты1>датаОплаты0,"увеличена","уменьшена")+" c "+формат(датаОплаты0,"ДФ=dd.MM.yyyy")+" на "+формат(датаОплаты1,"ДФ=dd.MM.yyyy")+" в "+строка(Сделка), СтатусСообщения.Информация);
					КонецЕсли;  
				#КонецЕсли
				
			Исключение // если перепроводится или делается на сервере - ничего не выводится!
				ЗаказПокупателяОбъект.ОбменДанными.Загрузка = ЛОЖЬ;
				#Если Клиент тогда
					Если ДатаОтгрузки1 <> ДатаОтгрузки0 Тогда
						Сообщить("Не удалось изменить дату отгрузки с "+формат(ДатаОтгрузки0,"ДФ=dd.MM.yyyy")+" на "+формат(ДатаОтгрузки1,"ДФ=dd.MM.yyyy")+" в документе: "+строка(Сделка), СтатусСообщения.Внимание);
					КонецЕсли;
					Если услОплаты тогда
						Сообщить("Не удалось изменить дату Оплаты с "+формат(ДатаОплаты0,"ДФ=dd.MM.yyyy")+" на "+формат(ДатаОплаты1,"ДФ=dd.MM.yyyy")+" в документе: "+строка(Сделка), СтатусСообщения.Внимание);
					КонецЕсли;
				#КонецЕсли
			КонецПопытки;
			
		КонецЕсли; //условия
	КонецЕсли;	
	//+++)
	#КонецЕсли
	
//миронычев
Если  Не  Отказ Тогда
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостояниеЗаказовИМ.Номенклатура,
			|	СостояниеЗаказовИМ.ЗаказОбщий,
			|	СостояниеЗаказовИМ.ЗаказПервичный,
			|	СостояниеЗаказовИМ.Состояние
			|ИЗ
			|	РегистрСведений.СостояниеЗаказовИМ КАК СостояниеЗаказовИМ
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СостояниеЗаказовИМ.ЗаказПервичный.TerminalОтгрузкаТранспортнойКомпанией = &Terminal
			|				ТОГДА СостояниеЗаказовИМ.ЗаказПервичный = &ЗаказПервичный
			|			КОГДА &ЗаказПервичныйТип = 10
			|				ТОГДА СостояниеЗаказовИМ.ЗаказПервичный = &ЗаказПервичный
			|			ИНАЧЕ СостояниеЗаказовИМ.ЗаказОбщий = &ЗаказПервичный
			|		КОНЕЦ
			|	И СостояниеЗаказовИМ.Номенклатура В(&Номенклатура)
			|	И СостояниеЗаказовИМ.Состояние = &Состояние";
			
			Запрос.УстановитьПараметр("Terminal", ЭтотОбъект.Сделка.TerminalОтгрузкаТранспортнойКомпанией);


	    	Запрос.УстановитьПараметр("ЗаказПервичныйТип", ЭтотОбъект.Сделка.ТипЗаказа);
			Запрос.УстановитьПараметр("ЗаказПервичный", ЭтотОбъект.Сделка);
			Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеЗаказовИМ.Перемещен);

			Результат = Запрос.Выполнить();

			ВыборкаДетальныеЗаписи = Результат.Выбрать();

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЗаписатьРегистрСтатусов(ВыборкаДетальныеЗаписи.ЗаказПервичный, ВыборкаДетальныеЗаписи.ЗаказОбщий, Перечисления.СостояниеЗаказовИМ.Отгружен, , ВыборкаДетальныеЗаписи.Номенклатура);	
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	Если не Отказ Тогда
		Спецификация = НайтиПодчиненныйДокумент(ЭтотОбъект.Ссылка, "Спецификация");
		Если ЗначениеЗаполнено(Спецификация) тогда
			Если Спецификация.Контрагент <> Контрагент тогда
				Спец = Спецификация.ПолучитьОбъект();
				Спец.Контрагент = Контрагент;
				Спец.Записать();
			КонецЕсли;
		КонецЕсли;
    КонецЕсли;

//КонецМиронвчев	

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)

	ОсновноеПодразделение = ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОсновноеПодразделение");

	Если НЕ ЗначениеНеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	// Удаление записей регистрации из всех последовательностей
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из ПринадлежностьПоследовательностям Цикл
		НаборЗаписейРегистрацииВПоследовательности.Очистить();
	КонецЦикла;
	
		//+++ 29.10.2015  перенесено из ПередЗаписью
		//было: Если Контрагент.ПриниматьЗаказыЧерезСайт и мПроведениеИзФормы тогда 		//+++ 20.05.2013

		//НАДО:  ДЛЯ ВСЕХ КЛИЕНТОВ STORE и TERMINAL при записи нового/проведении/удалении
		// ТОЛЬКО на Клиенте и не при обмене!
		//--------------------------------------------------------------------------
		Если не Отказ и не ЭтотОбъект.ОбменДанными.Загрузка тогда
		Запрос1 = Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ 
			|	Авторизация.Наименование КАК База,
			|	Авторизация.Логин,
			|	Авторизация.Пароль
			|ИЗ
			|	Справочник.Авторизация КАК Авторизация
			|ГДЕ
			|	Авторизация.Владелец = &Владелец";

			Запрос1.УстановитьПараметр("Владелец", ЭтотОбъект.Контрагент);
			Результат = Запрос1.Выполнить();
			
		
			Если не Результат.Пустой() тогда //ДЛЯ ВСЕХ КЛИЕНТОВ STORE и TERMINAL
				
				//ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЭтотОбъект);
				ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ПланОбмена_ОИМ.НайтиПоКоду("sim"),ЭтотОбъект.Ссылка); //01.11.2016
				
				// ЗаказПокупателяОбъект из сделки ТОЖЕ НАДО!!!
				Если НЕ ЗначениеНеЗаполнено(ЭтотОбъект.Сделка) тогда
					Если ТипЗнч(ЭтотОбъект.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
					//01.11.2016
					//ЗаказПокупателяОбъект = ЭтотОбъект.Сделка.ПолучитьОбъект(); 
					закСсылка = ЭтотОбъект.Сделка;
					ОбменСУТИнтернетМагазин.ВключитьРегистрациюОбъектаОИМ(ЗакСсылка,Истина);
				    КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
	    КонецЕсли;
		//-------------------------------------------------------------------
		

КонецПроцедуры


Функция ПодготовитьТаблицуПениПоОснованию()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сделка", Сделка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеПени.Ссылка.Контрагент,
	|	НачислениеПени.Ссылка.ДатаНачисления,
	|	НачислениеПени.Ссылка.Организация,
	|	НачислениеПени.Ссылка.СуммаДокумента,
	|	НачислениеПени.Сделка,
	|	НачислениеПени.ДоговорЗадолженности,
	|	НачислениеПени.ДолгНаДатуНачисления,
	|	НачислениеПени.Пени,
	|	НачислениеПени.Ссылка.ДоговорКонтрагента КАК ДоговорНачисления
	|ИЗ
	|	Документ.НачислениеПени.Пени КАК НачислениеПени
	|ГДЕ
	|	НачислениеПени.Ссылка = &Сделка
	|	И НачислениеПени.Ссылка.Проведен = ИСТИНА";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
 
// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция РассчитатьСуммуДляПени(СуммаПросроченная, ТекущиеПени, НачисленныеПени);
	
	Если ТекущиеПени = НачисленныеПени Тогда
	
		Возврат СуммаПросроченная;
		
	Иначе
		
		Возврат ?((ТекущиеПени = 0) ИЛИ (НачисленныеПени = 0), 0, ТекущиеПени/НачисленныеПени*СуммаПросроченная);
	
	КонецЕсли; 	

КонецФункции // ()
 

Процедура ДвижениеРегистровПени(Отказ)
	
	Если НЕ ЗначениеНеЗаполнено(Сделка)
		И ТипЗнч(Сделка) = Тип("ДокументСсылка.НачислениеПени") Тогда
		
		ТаблицаПени = ПодготовитьТаблицуПениПоОснованию();
		//ТаблицаПени = Новый ТаблицаЗначений;
		Сч = 0;
		
		Для Каждого ТекСтрока Из Услуги Цикл
			// регистр НачисленныеПени Приход
			
			ИскомаяСтрока = ТаблицаПени.Найти(ТекСтрока.Сделка, "Сделка");
			
			Если ИскомаяСтрока <> Неопределено Тогда
				
				Движение = Движения.НачисленныеПени.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Дата;
				Движение.ДатаНачисления = ИскомаяСтрока.ДатаНачисления;
				Движение.Контрагент = Контрагент;
				Движение.ДоговорЗадолженности = ИскомаяСтрока.ДоговорЗадолженности;
				Движение.ДоговорНачисления = ?(ЗначениеЗаполнено(ТекСтрока.ДоговорПени), ТекСтрока.ДоговорПени, ДоговорКонтрагента);
				Движение.Сделка = ТекСтрока.Сделка;
				Движение.Сумма = ИскомаяСтрока.ДолгНаДатуНачисления;//РассчитатьСуммуДляПени(ИскомаяСтрока.ПросроченнаяСумма, ТекСтрока.Сумма, ИскомаяСтрока.Пени);
				Движение.Пени = ТекСтрока.Сумма;
				Движение.ДокументНачисления = Сделка;
				
				Сч = Сч + 1;
			КонецЕсли; 
			
		КонецЦикла;
		
		// записываем движения регистров
		Если Сч > 0 Тогда
			
			Движения.НачисленныеПени.Записать();
			
		Иначе
			
			СообщитьОбОшибке("Необходимо указать документ начисления пени, который проведен!", Отказ);
			
		КонецЕсли; 
		
	Иначе 
		
		СообщитьОбОшибке("Необходимо указать документ начисления пени!", Отказ);
		
	КонецЕсли; 
	
	
КонецПроцедуры

//17.10.2016
процедура  ДвиженияПоЗаказыПокупателейСезонные()
	
	//Если ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя") тогда  //14.11.2017
	//	возврат;
	//КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Аналог", "Номенклатура");
	ЭлементБлокировки.УстановитьЗначение("Контрагент",Контрагент);
	Блокировка.Заблокировать();
	
	наборДвижений = Движения.ЗаказыПокупателейСезонные;
	наборДвижений.Записывать = Истина;	
	НаборДвижений.Очистить();
	
	Запрос = Новый Запрос;
	//+++ 14.11.2017 избавляемся от мегавыборки по ТЧ Товары всех реализаций!...
	табл = ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, Количество");
	табл.Свернуть("Номенклатура", "Количество");
	Запрос.УстановитьПараметр("табл", табл);
	
	Запрос.УстановитьПараметр("Заказ", ЭтотОбъект.Сделка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Табл КАК РеализацияТоваровУслугТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейСезонныеОстатки.Контрагент,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
		|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
		
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
		|	-ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.МоментВремени КАК ЗаказПокупателяСезонныйМоментВремени,
		
		|	ТоварыРеализации.Номенклатура КАК НоменклатураЗаказа,
		|	ЕстьNull(ТоварыРеализации.Количество,0) КАК Количество
		
		|ИЗ
		|РегистрНакопления.ЗаказыПокупателейСезонные.Остатки( , ЗаказПокупателя = &Заказ ) КАК ЗаказыПокупателейСезонныеОстатки
		// ВНУТРЕННЕЕ ??? зачем ???
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	ВТ_Товары КАК ТоварыРеализации
		|	ПО  ЗаказыПокупателейСезонныеОстатки.Аналог = ТоварыРеализации.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателяСезонныйМоментВремени
		|ИТОГИ
		|	СУММА(КоличествоОстаток),
		|	СРЕДНЕЕ(Количество)
		|ПО
		|	НоменклатураЗаказа
		|/////////////////////////////////////////////
		|;Уничтожить ВТ_Товары";

		Результат = Запрос.Выполнить();

	ВыборкаНоменклатураЗаказа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатураЗаказа.Следующий() Цикл
		НужноСписать = ВыборкаНоменклатураЗаказа.Количество;
		Выборка = ВыборкаНоменклатураЗаказа.Выбрать();
		Пока Выборка.Следующий() и НужноСписать>0 Цикл
					Списываем = Мин(Выборка.КоличествоОстаток, НужноСписать);
					//спишем с резерва
					Движение = НаборДвижений.Добавить();
					Движение.Период = Дата;
					Движение.Контрагент = Контрагент;
					Движение.ЗаказПокупателяСезонный = Выборка.заказпокупателяСезонный;
					Движение.Номенклатура = Выборка.Номенклатура;
					Движение.Аналог = Выборка.НоменклатураЗаказа;
					Движение.ЗаказПокупателя = Ссылка.Сделка;
					Движение.ВРезерве = Истина;
					Движение.Количество  = Списываем;
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Подразделение = Подразделение;
					//спишем с заказа
					
					Движение = НаборДвижений.Добавить();
					Движение.Период = Дата;
					Движение.Контрагент = Контрагент;
					Движение.ЗаказПокупателяСезонный = Выборка.заказпокупателяСезонный;
					Движение.Номенклатура = Выборка.Номенклатура;
					//Движение.Аналог = Выборка.НоменклатураЗаказа;
					//Движение.ЗаказПокупателя = Ссылка.Сделка;
					Движение.ВРезерве = ложь;
					Движение.Количество = Списываем;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Подразделение = Подразделение;
					НужноСписать = НужноСписать - Списываем;
					
		КонецЦикла;
	КонецЦикла;

	
конецПроцедуры

//09.02.2018 - "наследуется" из ДвиженияПоЗаказыПокупателейСезонные()
//Сезонник на РезервЧелышева (+)  -> Заказ на РезервЧелышева (+) на заказРезерв -> Заказ на клиента с договором РезервЧелышева - > Эта реализация!
процедура  ДвиженияПоЗаказыПокупателейСезонныеРезерв(КлиентРезерв)
	
	СезонныйЗаказКлиентаРезерв = ПолучитьСезонныйЗаказНаКлиентРезерв(КлиентРезерв);
	Если СезонныйЗаказКлиентаРезерв = неопределено тогда
		возврат; // нет сезонника - ничего дальше не надо!
	КонецЕсли;	
	
	табл = ПолучитьТоварыРезерва(КлиентРезерв, СезонныйЗаказКлиентаРезерв.Дата, ЭтотОбъект.Сделка);
	Если табл.Количество()=0 тогда
		возврат; // нет товаров, списываемых по резерву... значит не нужно ничего закрывать по сезоннику
	КонецЕсли;	
	табл.Колонки.Добавить("НужноСписать");
	для каждого стр1 из табл цикл
		стр1.НужноСписать = стр1.Количество;
	КонецЦикла;
	
	масРезервныхЗаказов = ПолучитьЗаказРезерв(КлиентРезерв, табл, СезонныйЗаказКлиентаРезерв); // должен быть 1... или список
	Если масРезервныхЗаказов.Количество()>0 тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
		//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Аналог", "Номенклатура");
		ЭлементБлокировки.УстановитьЗначение("Контрагент", КлиентРезерв); //+++ закрывает заказы по КлиентРезерв!!!
		Блокировка.Заблокировать();
    КонецЕсли;
	
	для i=0 по масРезервныхЗаказов.Количество()-1 цикл
	резервныйЗаказ = масРезервныхЗаказов[i];
	
	наборДвижений = Движения.ЗаказыПокупателейСезонные;
	наборДвижений.Записывать = Истина;	
	НаборДвижений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("табл", табл);
	Запрос.УстановитьПараметр("ЗаказРезерв", резервныйЗаказ );
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&Табл КАК РеализацияТоваровУслугТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейСезонныеОстатки.Контрагент,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
		|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
		
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
		|	- ЕстьNull(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток,0) КАК КоличествоОстаток,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.МоментВремени КАК ЗаказПокупателяСезонныйМоментВремени,
		
		|	ТоварыРеализации.Номенклатура КАК НоменклатураЗаказа,
		|	ЕстьNull(ТоварыРеализации.Количество,0) КАК Количество
		
		|ИЗ
		|РегистрНакопления.ЗаказыПокупателейСезонные.Остатки( , ЗаказПокупателя = &ЗаказРезерв 
		|		и Номенклатура в (выбрать Номенклатура из ВТ_Товары)
		|) КАК ЗаказыПокупателейСезонныеОстатки
		// ВНУТРЕННЕЕ ??? зачем ???
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|	ВТ_Товары КАК ТоварыРеализации
		|	ПО  ЗаказыПокупателейСезонныеОстатки.Аналог = ТоварыРеализации.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателяСезонныйМоментВремени
		|ИТОГИ
		|	СУММА(КоличествоОстаток),
		|	СРЕДНЕЕ(Количество)
		|ПО
		|	НоменклатураЗаказа
		|/////////////////////////////////////////////
		|;Уничтожить ВТ_Товары";

		Результат = Запрос.Выполнить();

	ВыборкаНоменклатураЗаказа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатураЗаказа.Следующий() Цикл
		стр1 = табл.найти(ВыборкаНоменклатураЗаказа.НоменклатураЗаказа, "Номенклатура"); //11.02.2018 - из ТЧ табл
		//НужноСписать = ВыборкаНоменклатураЗаказа.Количество;
		НужноСписать = стр1.НужноСписать;
		
		Выборка = ВыборкаНоменклатураЗаказа.Выбрать();
		Пока Выборка.Следующий() и НужноСписать>0 Цикл
					Списываем = Мин(Выборка.КоличествоОстаток, НужноСписать);
					Если Списываем = 0 тогда //не надо делать 0 проводок
						продолжить;
					КонецЕсли;	
					
				//спишем по регистру сез.зак.пок. по резервному заказу
					Движение = НаборДвижений.Добавить();
					Движение.Период = Дата;
					Движение.Контрагент = КлиентРезерв; //19.02.2018 !!!
					Движение.ЗаказПокупателяСезонный = СезонныйЗаказКлиентаРезерв;
					Движение.Номенклатура = Выборка.Номенклатура;
					Движение.Аналог       = Выборка.НоменклатураЗаказа;
					Движение.ЗаказПокупателя = резервныйЗаказ;      //-------------Закрываем ЗаказРезерв ------------
					Движение.ВРезерве = Истина;
					Движение.Количество  = Списываем;
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Подразделение = Подразделение;
					
				//спишем с сезонного заказа - если нет "Нескончаемого Резерва"
				Если СезонныйЗаказКлиентаРезерв.НескончаемыйРезерв = ЛОЖЬ тогда
					Движение = НаборДвижений.Добавить();
					Движение.Период = Дата;
					Движение.Контрагент = КлиентРезерв; //19.02.2018 !!!
					Движение.ЗаказПокупателяСезонный = СезонныйЗаказКлиентаРезерв;
					Движение.Номенклатура = Выборка.Номенклатура;
					//Движение.Аналог = Выборка.НоменклатураЗаказа;
					//Движение.ЗаказПокупателя = Ссылка.Сделка;
					Движение.ВРезерве = ложь;
					Движение.Количество = Списываем;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Подразделение = Подразделение;
				//Иначе  - НескончаемыйРезерв по сезоннику - НЕ закрывается никогда!?
				КонецЕсли;
				НужноСписать = НужноСписать - Списываем;
				
		КонецЦикла;
		стр1.НужноСписать = НужноСписать;
	КонецЦикла;
    КонецЦикла;
	
конецПроцедуры

//09.02.2018 --- Сезонник - ТОЛЬКО 1 на 1 резервного клиента!
функция ПолучитьСезонныйЗаказНаКлиентРезерв(КлиентРезерв)
	рез = неопределено;
	Запрос1= Новый Запрос;
	Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный
	                |ИЗ
	                |	РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
	                |			,
	                |			Контрагент = &КлиентРезерв
	                |				И ЕСТЬNULL(Подразделение.ВЭД, ЛОЖЬ) = ЛОЖЬ) КАК ЗаказыПокупателейСезонныеОстатки
	                |ГДЕ
	                |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя =Значение(Документ.ЗаказПокупателя.ПустаяСсылка)
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.Дата УБЫВ
	                |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос1.УстановитьПараметр("КлиентРезерв",    КлиентРезерв );
	Результат1 = Запрос1.Выполнить();
	выборка1   = Результат1.Выбрать();
	если выборка1.Следующий() тогда
			рез = выборка1.ЗаказПокупателяСезонный;  //последний! 
	КонецЕсли;
		
	возврат рез;
КонецФункции	

//09.02.2018 - то, что списывает закПок по резерву
функция ПолучитьТоварыРезерва(КлиентРезерв, Дата0, ЗакПок ) 
	запрос = новый запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	РезервДляИМОбороты.Номенклатура,
	               |	СУММА(РезервДляИМОбороты.КоличествоРасход) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.РезервДляИМ.Обороты(&НачДата, &КонДата, Регистратор, КонтрагентДляРезерваИМ = &КлиентРезерв) КАК РезервДляИМОбороты
	               |ГДЕ
	               |	РезервДляИМОбороты.Регистратор = &ЗакПок
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РезервДляИМОбороты.Номенклатура";
	запрос.УстановитьПараметр("НачДата", Дата0);//дата сезонного заказа на клиента резерв
	запрос.УстановитьПараметр("КонДата", ЗакПок.Дата+1 ); //дата заказа
	запрос.УстановитьПараметр("КлиентРезерв", КлиентРезерв);
	запрос.УстановитьПараметр("ЗакПок", ЗакПок ); //дата заказа
	табл = запрос.Выполнить().Выгрузить();
	возврат табл;
КонецФункции	
	

//09.02.2018 - смотрим что списал закПок по резерву... 
			//по РезервуИМ и находим Резервные заказы
			// по которым еще не закрыт регистр сезонника...
функция ПолучитьЗаказРезерв(КонтрРезерв, табл, ЗакСезон)
	Рез = неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РезервДляИМОбороты.Номенклатура,
	               |	РезервДляИМОбороты.Количество
	               |ПОМЕСТИТЬ ВТ_Тов
	               |ИЗ
	               |	&табл КАК РезервДляИМОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РезервДляИМОбороты.Регистратор КАК Регистратор,
	               |	РезервДляИМОбороты.Период КАК Период
	               |ИЗ
	               |	РегистрНакопления.РезервДляИМ.Обороты(
	               |			&НачДата,
	               |			&КонДата,
	               |			Регистратор,
	               |			КонтрагентДляРезерваИМ = &КонтрРезерв
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						ВТ_тов.Номенклатура
	               |					ИЗ
	               |						ВТ_тов)) КАК РезервДляИМОбороты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(
				   |				,
				   |				Контрагент = &КонтрРезерв
				   |					И ЗаказПокупателяСезонный = &ЗакСезон
				   |					И Номенклатура В
				   |						(ВЫБРАТЬ
				   |							ВТ_тов.Номенклатура
				   |						ИЗ
				   |							ВТ_тов)) КАК ЗаказыПокупателейСезонныеОстатки
				   |		ПО РезервДляИМОбороты.Регистратор = ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя
				   |			И РезервДляИМОбороты.Номенклатура = ЗаказыПокупателейСезонныеОстатки.Номенклатура
	               |ГДЕ
	               |	РезервДляИМОбороты.КоличествоПриход > 0
	             //  |	И ЕСТЬNULL(ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток, 0) < 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период,
	               |	Регистратор
	               |АВТОУПОРЯДОЧИВАНИЕ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Тов";
	Запрос.УстановитьПараметр("табл", табл);
	Запрос.УстановитьПараметр("НачДата", Началодня(ЗакСезон.Дата) ); //раньше нет смысла смотреть!
	Запрос.УстановитьПараметр("КонДата", КонецДня(сделка.Дата)   ); //зак.пок. - резервный заказ ОБЯЗАТЕЛЬНО раньше заказа конечного покупателя
	Запрос.УстановитьПараметр("КонтрРезерв", КонтрРезерв);
	Запрос.УстановитьПараметр("ЗакСезон",ЗакСезон); //единый для всех!
	Результат = Запрос.Выполнить();
	табл1 = результат.Выгрузить();
	рез = табл1.ВыгрузитьКолонку("Регистратор");
	
	Если рез.Количество()>1 тогда //есть несколько заказов на резерв!
		#Если Клиент тогда
			Сообщить("Найдено "+строка(рез.Количество())+" резервных заказов покупателей на клиента: "+строка(КонтрРезерв), СтатусСообщения.Информация);
		#КонецЕсли 	
	КонецЕсли;
	
	возврат Рез;
	
КонецФункции

процедура  ДвиженияПоЗаказыПокупателейСезонныеВЭД()
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателейСезонные");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//ЭлементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
	//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Аналог", "Номенклатура");
	ЭлементБлокировки.УстановитьЗначение("Контрагент",Контрагент);
	Блокировка.Заблокировать();
	
	наборДвижений = Движения.ЗаказыПокупателейСезонные;
	наборДвижений.Записывать = Истина;	
	НаборДвижений.Очистить();
	
	Запрос = Новый Запрос;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыРеализации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейСезонныеОстатки.Контрагент,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный,
		|	ЗаказыПокупателейСезонныеОстатки.Номенклатура,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателя,
		|	-ЗаказыПокупателейСезонныеОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ЗаказыПокупателейСезонныеОстатки.ЗаказПокупателяСезонный.МоментВремени КАК ЗаказПокупателяСезонныйМоментВремени,
		|	ТоварыРеализации.Количество КАК Количество,
		|	ТоварыРеализации.Номенклатура КАК НоменклатураЗаказа,
		|	ЗаказыПокупателейСезонныеОстатки.Подразделение
		|ИЗ
		|	ТоварыРеализации КАК ТоварыРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателейСезонные.Остатки(, ЗаказПокупателяСезонный = &Заказ) КАК ЗаказыПокупателейСезонныеОстатки
		|		ПО (ЗаказыПокупателейСезонныеОстатки.Номенклатура = ТоварыРеализации.Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателяСезонныйМоментВремени
		|ИТОГИ
		|	СУММА(КоличествоОстаток),
		|	СРЕДНЕЕ(Количество)
		|ПО
		|	НоменклатураЗаказа";

	Запрос.УстановитьПараметр("Заказ", Ссылка.Сделка);
	Запрос.УстановитьПараметр("ссылка", Ссылка);
	Результат = Запрос.Выполнить();

	ВыборкаНоменклатураЗаказа = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаНоменклатураЗаказа.Следующий() Цикл
		НужноСписать = ВыборкаНоменклатураЗаказа.Количество;
		Выборка = ВыборкаНоменклатураЗаказа.Выбрать();
		Пока Выборка.Следующий() и НужноСписать>0 Цикл
										
					Движение = НаборДвижений.Добавить();
					Движение.Период = Дата;
					Движение.Контрагент = Контрагент;
					Движение.ЗаказПокупателяСезонный = Выборка.заказпокупателяСезонный;
					Движение.Номенклатура = Выборка.Номенклатура;
					//Движение.Аналог = Выборка.НоменклатураЗаказа;
					Движение.Подразделение = Выборка.Подразделение;
					Движение.ВРезерве = ложь;
					Движение.Количество = Выборка.Количество;
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;					
		КонецЦикла;
	КонецЦикла;

	
конецПроцедуры

Функция ПроверитьОстаткиНаКомиссии(ТаблицаДвижений)
	
	ТаблицаДвижений.Свернуть("Номенклатура","Количество");
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("ТЗ",ТаблицаДвижений);
	запрос.УстановитьПараметр("транзит",?(Подразделение = Справочники.Подразделения.НайтиПоКоду("00005"),Ложь,Истина));
	запрос.УстановитьПараметр("Подразделение",Подразделение);
	запрос.УстановитьПараметр("дата",Дата);
	запрос.Текст = "ВЫБРАТЬ
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Количество
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	СУММА(Товары.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаКомиссииОстатки.КоличествоОстаток, 0)) КАК Количество
	               |ПОМЕСТИТЬ СколькоНужноСписать
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |				&Дата,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Тов.Номенклатура
	               |						ИЗ
	               |							Товары КАК Тов)
	               |					И Склад.Транзитный = &транзит
	               |					И НЕ Склад.ЗапретитьИспользование) КАК ТоварыНаСкладахОстатки
	               |		ПО Товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаКомиссии.Остатки(
	               |				&Дата,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Тов.Номенклатура
	               |						ИЗ
	               |							Товары КАК Тов)
	               |					И Подразделение = &Подразделение) КАК ТоварыНаКомиссииОстатки
	               |		ПО Товары.Номенклатура = ТоварыНаКомиссииОстатки.Номенклатура
				   |ГДЕ
				   |	Товары.Количество > ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаКомиссииОстатки.КоличествоОстаток, 0)
				   |	И Товары.Количество - ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) + ЕСТЬNULL(ТоварыНаКомиссииОстатки.КоличествоОстаток, 0) > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СколькоНужноСписать.Номенклатура КАК Номенклатура,
	               |	СколькоНужноСписать.Количество,
	               |	ТоварыНаКомиссииОстатки.Контрагент,
	               |	ТоварыНаКомиссииОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ИЗ
	               |	СколькоНужноСписать КАК СколькоНужноСписать
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаКомиссии.Остатки(
	               |				&Дата,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							Тов.Номенклатура
	               |						ИЗ
	               |							Товары КАК Тов)
	               |					И Подразделение = &Подразделение) КАК ТоварыНаКомиссииОстатки
	               |		ПО СколькоНужноСписать.Номенклатура = ТоварыНаКомиссииОстатки.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	КоличествоОстаток";
				   
	Рез = Запрос.Выполнить().Выгрузить();
	
	ПоНом = рез.Скопировать();
	ПоНом.Свернуть("Номенклатура,Количество");
	
	для каждого стр из ПоНом Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",стр.номенклатура);
		
		строки = Рез.НайтиСтроки(отбор);
		
		ОсталосьРаспределить = стр.Количество; 
		
		для каждого стр11 из строки Цикл
			Если ОсталосьРаспределить = 0 Тогда
				стр11.Количество = 0;
			ИначеЕсли ОсталосьРаспределить >= стр11.КоличествоОстаток Тогда
				ОсталосьРаспределить = ОсталосьРаспределить - стр11.КоличествоОстаток;
				стр11.Количество = стр11.КоличествоОстаток;
			иначеЕсли ОсталосьРаспределить < стр11.КоличествоОстаток Тогда
				стр11.Количество = ОсталосьРаспределить;
				ОсталосьРаспределить = 0;
			КонецЕсли;
		КонецЦикла;
		
		Для Индекс = -Рез.Количество() По -1 Цикл
			уд = Рез.Получить(-Индекс-1);
			Если уд.Количество = 0 Тогда
				Рез.Удалить(-Индекс-1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Рез;	
		
КонецФункции

Процедура  ДвиженияМеждуСобственнымиЮРЛицамиИЗакупкиВЭД()
	СуммаДок = ЭтотОбъект.СуммаДокумента*0.8;
	
	//взаиморасчеты
	НаборДвижений = Движения.ВзаиморасчетыМеждуСобственнымиЮРЛицами;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НоваяЗапись = ТаблицаДвижений.Добавить();
	НоваяЗапись.Сумма = СуммаДок;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00166"), "ОбъектРасчетов");  //Гонконг
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00162"), "СубъектРасчетов"); //Турция
		
	НаборДвижений.мПериод          = ЭтотОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ВзаиморасчетыМеждуСобственнымиЮРЛицами.ВыполнитьПриход();
	
	//Закупки
	
    НаборДвижений = Движения.ЗакупкиВЭД;
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НоваяЗапись = ТаблицаДвижений.Добавить();
	НоваяЗапись.Сумма = СуммаДок;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "Сделка");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Подразделения.НайтиПоКоду("00162"), "Подразделение"); //Турция
		
	НаборДвижений.мПериод          = ЭтотОбъект.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Движения.ЗакупкиВЭД.ВыполнитьДвижения();	
	
конецПроцедуры


Процедура СравнитьЦеныСЗаказомПокупателя(Отказ)
	Если не РольДоступна("ДополнительныеПраваВЭД") Тогда
		Запрос = Новый Запрос;
		//Запрос.Текст = " ВЫБРАТЬ РеализацияТоваровУслугТовары.Номенклатура Номенклатура,
		//| РеализацияТоваровУслугТовары.Цена Цена ,
		//| РеализацияТоваровУслугТовары.Количество КоличествоТребуется,
		//| ЕстьNULL(ЗаказПокупателяОстатки.КоличествоОстаток,0) КоличествоЗаказано,
		//| РеализацияТоваровУслугТовары.Количество-ЕстьNULL(ЗаказПокупателяОстатки.КоличествоОстаток,0)  Разница
		//| ИЗ                                               
		//| (ВЫБРАТЬ Номенклатура,
		//|	Цена,
		//|	СУММА(Количество) Количество
		//|ИЗ  Документ.РеализацияТоваровУслуг.Товары 
		//|ГДЕ Ссылка = &Реализация 
		//|СГРУППИРОВАТЬ ПО Номенклатура, Цена
		//|) КАК РеализацияТоваровУслугТовары
		//|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&КонДата, ЗаказПокупателя = &ЗаказПокупателя) ЗаказПокупателяОстатки
		//|ПО РеализацияТоваровУслугТовары.Номенклатура= ЗаказПокупателяОстатки.Номенклатура
		//|И РеализацияТоваровУслугТовары.Цена=ЗаказПокупателяОстатки.Цена
		//|ГДЕ РеализацияТоваровУслугТовары.Количество-ЕстьNULL(ЗаказПокупателяОстатки.КоличествоОстаток,0) >0 ";
		
		//14.11.2017 - вместо мега-выборки по товарам - сразу Табл
		//Запрос.УстановитьПараметр("Реализация",Ссылка);
		Табл = ЭтотОбъект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, Цена");
		Запрос.УстановитьПараметр("Табл", Табл);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	РТиУ_Товары.НомерСтроки,
		               |	РТиУ_Товары.Номенклатура,
				       |	РТиУ_Товары.Цена КАК Цена
		               |ПОМЕСТИТЬ ВТ_Товары
		               |ИЗ
		               |	&Табл КАК РТиУ_Товары
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
		               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		                |	РеализацияТоваровУслугТовары.Цена КАК Цена,
		               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.Цена, 0) КАК ЦенаВЗаказе
		               |ИЗ
		               |	ВТ_Товары КАК РеализацияТоваровУслугТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		               |			ЗаказыПокупателейОстатки.Цена КАК Цена
		               |		ИЗ
		               |			РегистрНакопления.ЗаказыПокупателей.Остатки( &ГраницаДата,
		               |					ЗаказПокупателя = &ЗаказПокупателя
		              // |						И Номенклатура В (ВЫБРАТЬ вт.Номенклатура
		              // |											ИЗ	ВТ_Товары КАК вт)  
					  | 			) КАК ЗаказыПокупателейОстатки) КАК ЗаказыПокупателейОстатки
		               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		               |ГДЕ
		               |	РеализацияТоваровУслугТовары.Цена <> ЕСТЬNULL(ЗаказыПокупателейОстатки.Цена, 0)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Товары";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя",Сделка);
		//Запрос.УстановитьПараметр("КонДата", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ГраницаДата", Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Исключая));
		
		Выборка=Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить("В строке "+ Строка(Выборка.НомерСтроки)+  " товар " + СокрЛП(Выборка.Номенклатура) + " с ценой " +Строка(Выборка.Цена) +"р. не соответствует цене в заказе: "+Строка(Выборка.ЦенаВЗаказе)+"р.", СтатусСообщения.Важное);
			//Отказ = Истина;
		КонецЦикла;	
		
	КонецЕсли;	
КонецПроцедуры


Процедура ПроверитьСклады(Отказ)
	
	Для Каждого Стр из Товары Цикл
		
		Если ((Стр.Склад.ЗапретитьИспользование) и (Не ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"РазрешитьОтгрузкиСоВсехСкладов"))) Тогда 
			Сообщить("Вам нельзя работать со складом " + СокрЛП(Стр.Склад.Наименование), СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьРеализации(Отказ)
	Если Константы.ОплатыРаспределяютМенеджеры.Получить() Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
			И не ЗначениеНеЗаполнено(Сделка) Тогда
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	Количество (Ссылка) Количество
			|ИЗ
			|	Документ.РеализацияТоваровУслуг
			|ГДЕ Проведен И Сделка = &Сделка И Ссылка<>&Ссылка";
			Запрос.УстановитьПараметр("Сделка",Сделка);
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Выборка=Запрос.Выполнить().Выбрать(); 
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество>0 Тогда
					Сообщить("Не допускается ввод более одной реализации по заказу. По данному заказу уже есть проведенные реализации. ",СтатусСообщения.Важное);
					Отказ=Истина;
				КонецЕсли;	
			КонецЕсли;	
		КОнецЕсли;	
	КОнецЕсли;
КОнецПроцедуры	

Процедура ЗаполнитьДанныеПоДоверенности() Экспорт  //А.А. для заполнения доверенностей при формировании реализаций из задания на отгрузку
	Если СокрЛП(Водитель) <>"" Тогда	
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		             |	РеализацияТоваровУслуг.МаркаАвтомобиля,
		             |	РеализацияТоваровУслуг.ГосНомерАвтомобиля,
		             |	РеализацияТоваровУслуг.Водитель,
		             |	РеализацияТоваровУслуг.Перевозчик,
		             |	РеализацияТоваровУслуг.ОрганизацияВыдавшаяДоверенность,
		             |	РеализацияТоваровУслуг.ФизЛицоДоверенности,
		             |	РеализацияТоваровУслуг.НомерДоверенности,
		             |	РеализацияТоваровУслуг.ВидПеревозки,
		             |	РеализацияТоваровУслуг.ДатаДоверенности
		             |ИЗ
		             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		             |ГДЕ
		             |	РеализацияТоваровУслуг.Дата > &НачДата
		             |	И РеализацияТоваровУслуг.Водитель ПОДОБНО ""ВОДИТЕЛЬ%""
		             |	И 99 = 99
		             |	И РеализацияТоваровУслуг.Ссылка <> &Ссылка
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	РеализацияТоваровУслуг.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("НачДата",ДобавитьМесяц(ТекущаяДата(),-6));  // поиск по фамилии водителя за 6 месяцев
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ВОДИТЕЛЬ",Водитель);
		ТипДоговораФормулаАвто = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004");
		Запрос.УстановитьПараметр("ФормулаАвто", ТипДоговораФормулаАвто);
		Если ДоговорКонтрагента.ТипДоговора = ТипДоговораФормулаАвто Тогда
			 Запрос.Текст=СтрЗаменить(Запрос.Текст,"99=99","ДоговорКонтрагента.ТипДоговора = &ТипДоговора");
		     Запрос.УстановитьПараметр("ТипДоговора", ТипДоговораФормулаАвто);
		ИначеЕсли ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
			 Запрос.Текст=СтрЗаменить(Запрос.Текст,"99=99","ДоговорКонтрагента.ТипДоговора = &ТипДоговора");
		     Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.ШинтрейдЯрославль );
		ИначеЕсли ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
		 Запрос.Текст=СтрЗаменить(Запрос.Текст,"99=99","ДоговорКонтрагента.ТипДоговора = &ТипДоговора");
	     Запрос.УстановитьПараметр("ТипДоговора", Справочники.ТипыДоговоров.ФормулаАвтоПлюс );
		 Иначе
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"99=99","НЕ ДоговорКонтрагента.ТипДоговора В (&ТипДоговора) ");
			СписокТипов = Новый Массив;
			СписокТипов.Добавить(ТипДоговораФормулаАвто);
			СписокТипов.Добавить(Справочники.ТипыДоговоров.ШинтрейдЯрославль);
			СписокТипов.Добавить(Справочники.ТипыДоговоров.ФормулаАвтоПлюс);
			Запрос.УстановитьПараметр("ТипДоговора", СписокТипов );
		КонецЕсли;
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Выборка);	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//+++ 30.09.2014 при внешнем соединении или с сервера - не работает...	
	#Если Клиент тогда
		Если ВыставлениеПени Тогда
			яштПени.ПроверитьОплатыПоДокументу(ЭтотОбъект.Ссылка, Отказ);
		Иначе
			яштПени.ПроверитьНачисленияПени(ЭтотОбъект.Ссылка, Отказ);
		КонецЕсли; 
	#КонецЕсли
	
	Если НачалоДня(ЭтотОбъект.Дата)<> НачалоДня(ТекущаяДата()) Тогда
	МенеджерЗаписиЖурналаИзменений = РегистрыСведений.ЖурналИзменений.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЖурналаИзменений.Событие = "Отменено проведение реализации";
	МенеджерЗаписиЖурналаИзменений.ОбъектМетаданных = "Документ.РеализацияТоваровУслуг";
	МенеджерЗаписиЖурналаИзменений.Комментарий = "Отменено проведение реализации";
	МенеджерЗаписиЖурналаИзменений.Объект = ЭтотОбъект.Ссылка;
	МенеджерЗаписиЖурналаИзменений.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписиЖурналаИзменений.Период = ТекущаяДата();
	МенеджерЗаписиЖурналаИзменений.НомерЗаписи = 1;
	МенеджерЗаписиЖурналаИзменений.Компьютер = ИмяКомпьютера();
	МенеджерЗаписиЖурналаИзменений.Записать(Истина);	//+++ 12.11.2014
  конецЕсли;
		
		
	
КонецПроцедуры

функция ПолучитьНовыйКодДляШтрихКодаЯШТ(Код)
	
	Если стрДлина(Код)<7 тогда
		код1 = Формат(число(Код), "ЧЦ=7; ЧВН=");
	иначе 
		код1 = код;
	КонецЕсли;	
	
	ШтрихКод = "05000"+ Код1;
	ШтрихКод = ШтрихКод + КонтрольныйСимволEAN(ШтрихКод, 13);
	
	возврат ШтрихКод;
	
КонецФункции

//ОЛ 23.04.2015
Функция ПолучитьНомерДокументаФормулаАвто(ТекТипДоговора)
	
	НомерФА = 0;
	ЗапросФА=Новый Запрос;
	ЗапросФА.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.НомерФормулаАвто КАК НомерФормулаАвто
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ТипДоговора = &ТекТипДоговора
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачГода И &ДатаКонГода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерФормулаАвто УБЫВ";
	
	ЗапросФА.УстановитьПараметр("ДатаНачГода",НачалоГода(Дата));
	ЗапросФА.УстановитьПараметр("ДатаКонГода",КонецГода(Дата));
	ЗапросФА.УстановитьПараметр("ТекТипДоговора", ТекТипДоговора);
	Выборка=ЗапросФА.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НомерФА = Выборка.НомерФормулаАвто;	
	КонецЕсли;
	
	возврат НомерФА+1;
	
КонецФункции


Процедура ПеренестиДокиВБухгалтерию() Экспорт
	
	//	Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");

	Если ЭтоНовый() и этотОбъект.Модифицированность() Тогда
		СообщитьОбОшибке("Перед выгрузкой данный документ необходимо записать");
	КонецЕсли;	
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	
	удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

	Обработка.РежимОбмена = "Выгрузка";
	
	//ФайлПравилОбмена="c:\ПравилаОбменаРеализациями_ЯШТ_УТ_БП_реализация_.xml"; // см.    \\terminal\c$\	
	//Обработка.ИмяФайлаПравилОбмена = ФайлПравилОбмена;
	//04.09.14 Смирнов, правила берем из файла
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьОбщийМакет("ОбменУТБП");//ПланыОбмена.ОбменУТ_БП.ПолучитьМакет("ПравилаОбменаСБухгалтерией");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	//
	//
	//Обработка.ДатаНачала = НачалоДня(ЭтотОбъект.Дата);
	//Обработка.ДатаОкончания = КонецДня(ЭтотОбъект.Дата);
	
	РежимОтладки = Ложь;
	
	Если НЕ РежимОтладки Тогда
		Обработка.ИмяСервераИнформационнойБазыДляПодключения      = "server:3041"; //01.07.2013
		Обработка.ИмяИнформационнойБазыНаСервереДляПодключения    = "v83ib_yst_bp";
		Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";
	Иначе
		Обработка.ИмяСервераИнформационнойБазыДляПодключения      = "server";
		Обработка.ИмяИнформационнойБазыНаСервереДляПодключения    = "v82ib_yst_bp_copy";
		Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
	КонецЕсли;
	
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Робот (центр - номенклатура)";
	Обработка.ПарольИнформационнойБазыДляПодключения = "09876";
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,
	//Обработка.ИмяФайлаОбмена= ИмяФайлаОбмена;
	// 1 - снимать регистрацию
	//Обработка.ИмяФайлаОбмена ="C:\Базы 1С\Обмен.xml"; 

	Обработка.ЗагрузитьПравилаОбмена();
	Список = Новый СписокЗначений();
	Список.Добавить(ЭтотОбъект.Ссылка);
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки",Список);
	Обработка.ВыполнитьВыгрузку();
	
	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
	Попытка
		УПД = Новый ХранилищеЗначения(Новый ДвоичныеДанные(КаталогВременныхфайлов()+Ссылка.Номер+".mxl"));
		КонтрольСумма = СуммаДокумента;
		КонтрольКоличество = Товары.Итог("Количество");
		Записать(РежимЗаписиДокумента.Запись);
	Исключение
	КонецПопытки;
	
	//ТабДок = Новый ТабличныйДокумент();     //Плотников - не показывать
	//попытка
	//	Если  (Ссылка.Дата<Дата('20160501000000')или Найти(Ссылка.ДоговорКонтрагента.Наименование,"*")<>0)  тогда
	//		ТабДокСФ = Новый ТабличныйДокумент();
	//		ТабДокСФ.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
	//		табДокСФ.АвтоМасштаб = Истина;
	//		ТабдокСФ.ОтображатьСетку = Ложь;
	//		ТабДокСФ.ТолькоПросмотр = Истина;
	//		ТабДокСФ.Показать();
	//	иначе
	//		ТабДок.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
	//		табДок.АвтоМасштаб = Истина;
	//		Табдок.ОтображатьСетку = Ложь;
	//		ТабДок.ТолькоПросмотр = Истина;
	//		Макет = ПолучитьОбщийМакет("ШтрихКодДляУПД");
	//		ОбластьШтриха = Макет.ПолучитьОбласть("Штрих");
	//		Рисунок = ОбластьШтриха.Рисунки.Штрихкод;
	//		Тд = Новый ТабличныйДокумент;
	//		ОбШтрихКод=ОбластьШтриха.Рисунки.Штрихкод.Объект ;
	//		ОбШтрихКод.ТипКода = 4; 
	//		ОбШтрихКод.Сообщение = СформироватьШКРеализации(Ссылка,"8");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
	//		ОбШтрихКод.ОтображатьТекст = Ложь;
	//		
	//		Тд.Вывести(ОбластьШтриха);
	//		ТД.Вывести(ТабДок);
	//		ТД.Рисунки.D1.Верх = ТД.Рисунки.ШтрихКод.Верх;   
	//		ТД.Рисунки.D1.Лево = ТД.Рисунки.ШтрихКод.Лево;   
	//		тд.УдалитьОбласть(ТД.Область("Штрих"),ТипСмещенияТабличногоДокумента.ПоВертикали);   
	//		тд.АвтоМасштаб = Истина;
	//		Тд.ОтображатьСетку = Ложь;
	//		Тд.ТолькоПросмотр = Истина;
	//		тд.ОтображатьЗаголовки = ложь;   
			//#Если Клиент тогда           
			//Если глТекущийПользователь <> справочники.Пользователи.НайтиПоКоду("Робот (центр - номенклатура)") Тогда	
			//	ТД.Показать();
			//КонецЕсли;
			//#КонецЕсли

	//	КонецЕсли;
	//исключение
	//конецпопытки;
	
	
//ДокССылка= Ссылка;
//Строка_UID   = строка(Докссылка.УникальныйИдентификатор() );
//Новый_UID    = Соединение.NewObject("УникальныйИдентификатор", Строка_UID);
//РеализацияССылка  = Соединение.Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый_UID);
//Реализация =  РеализацияССылка.GetObject();
//Если Реализация = неопределено Тогда
//	//создадим реализацию	
//	Реализация = Соединение.Документы.РеализацияТоваровУслуг.CreateDocument();
//	Реализация.УстановитьСсылкуНового(РеализацияССылка);
//КонецЕсли;	
//Если  не Реализация.Закрыт Тогда
//	УсловиеРнД = Ложь;
//	УсловиеМс = Ложь;
//	УсловиеФА = Ложь;
//	УсловиеФАП = Ложь;
//	УсловиеШТЯ = Ложь;
//	
//	Реализация.Дата = Дата;
//	Реализация.номер = номер;
//	Реализация.АдресДоставки = АдресДоставки;
//	Реализация.ВидОперации = Соединение.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
//	Реализация.Комментарий = Комментарий;
//	Реализация.Кратностьвзаиморасчетов = кратностьвзаиморасчетов;
//	Реализация.КурсВзаиморасчетов = КурсВзаиморасчетов;
//	Реализация.СуммаВключаетНДС = СуммаВключаетНДС;
//	Реализация.СуммаДокумента = СуммаДокумента;
//	Реализация.УчитыватьНДС = УчитыватьНДС;
//	Реализация.СпособЗачетаАвансов = Соединение.Перечисления.СпособыЗачетаАвансов.Автоматически;
//	//Организация
//	Реализация.Организация = соединение.Справочники.Организации.НайтиПоКоду("00015");
//	Реализация.БанковскийСчетОрганизации = Реализация.Организация.ОсновнойБанковскийСчет;
//	Реализация.ВалютаДокумента = Соединение.Справочники.Валюты.НайтиПоНаименованию(ВалютаДокумента.Наименование);
//	Если Грузоотправитель <> Справочники.Контрагенты.ПустаяСсылка() Тогда
//	Реализация.Грузоотправитель = Соединение.Справочники.Контрагенты.НайтиПоКоду(Грузоотправитель.Код);	
//	конецЕсли;	
//	КонтрагентССылка = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код);
//	//контрагент
//	Если (Найти(ДоговорКонтрагента.Наименование,"*")> 0 и Подразделение = Справочники.Подразделения.НайтиПоКоду("00106")) или Контрагент =Справочники.Контрагенты.НайтиПоКоду("94138") Тогда  //Ростов
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("94138"); 
//		Реализация.Контрагент = КонтрагентССылка;
//		Реализация.Грузополучатель = КонтрагентССылка;
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.НайтиПокоду("Б00004734",,,Реализация.Контрагент); 
//		УсловиеРнД = Истина;
//		N=8; //уменьшить на N% не более 100%
//		ND=25; //уменьшить диски на ND% не более 100%
//		Сообщить("Для реализации № "+Номер+" - цены на диски уменьшены на "+строка(ND)+"%, на все остальное на "+строка(N)+"% и округлены до рублей по правилам от 21.09.2012", СтатусСообщения.Информация);
//		Коэфф = 1-N/100;
//		КоэффДиски = 1-ND/100;
//	ИначеЕсли Найти(ДоговорКонтрагента.Наименование,"*")> 0 и Подразделение = Справочники.Подразделения.НайтиПоКоду("00133") Тогда  //Москва
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("92923"); 	
//		Реализация.Контрагент = КонтрагентССылка;
//		Реализация.Грузополучатель = КонтрагентССылка;
//		Реализация.ДоговорКонтрагента = Реализация.Контрагент.ОсновнойДоговор; 
//		УсловиеМс = Истина;
//		N=8; //уменьшить на N% не более 100% // пока совпадает
//		Сообщить("Для реализации № "+Номер+" - цены уменьшены на "+строка(N)+"% и округлены до рублей по правилам от 07.11.2012", СтатусСообщения.Информация);
//		Коэфф = 1-N/100;
//	ИначеЕсли Договорконтрагента.ТипДоговора = справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда  //ФормулаАвто
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("92705"); 	
//		Реализация.Контрагент = КонтрагентССылка;
//		//Реализация.Грузополучатель = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код);
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.НайтиПокоду("Б00004691",,,Реализация.Контрагент); 
//		УсловиеФА = Истина;
//		N=0.5; //уменьшить на N% не более 100% 
//		Сообщить("Для реализации № "+Номер+" - цены уменьшены на "+строка(N)+"% и округлены до рублей по правилам от 07.11.2012", СтатусСообщения.Информация);
//		Коэфф = 1-N/100;
//		СуммаТр = ПолучитьСуммуТр();
//		КоэфТр =1-СуммаТр/СуммаДокумента;
//	ИначеЕсли Договорконтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда  //ФормулаАвтоПлюс
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("92797"); 	
//		Реализация.Контрагент = КонтрагентССылка;
//		//Реализация.Грузополучатель = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код);
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.НайтиПокоду("Б00004878",,,Реализация.Контрагент);//??
//		УсловиеФАП = Истина;
//		N=0.5; //уменьшить на N% не более 100% 
//		Сообщить("Для реализации № "+Номер+" - цены уменьшены на "+строка(N)+"% и округлены до рублей по правилам от 07.11.2012", СтатусСообщения.Информация);
//		Коэфф = 1-N/100;
//		СуммаТр = ПолучитьСуммуТр();
//		КоэфТр =1-СуммаТр/СуммаДокумента;
//	ИначеЕсли Договорконтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда  //Шинтрейд	
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("П001125"); 
//		Реализация.Контрагент = КонтрагентССылка;
//		Реализация.Грузополучатель = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код);
//		Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
//		Реализация.ВалютаДокумента = Соединение.Справочники.Валюты.НайтиПоНаименованию(Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
//		иначе	
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.НайтиПокоду("Б00004710",,,Реализация.Контрагент); 
//		конецЕсли;
//		УсловиеШТЯ = Истина;
//		N=0.5; //уменьшить на N% не более 100% 
//		Сообщить("Для реализации № "+Номер+" - цены уменьшены на "+строка(N)+"% и округлены до рублей по правилам от 07.11.2012", СтатусСообщения.Информация);
//		Коэфф = 1-N/100;
//		СуммаТр = ПолучитьСуммуТр();
//			Если КурсВзаиморасчетов <> 0 Тогда
//				Курс = КурсВзаиморасчетов;
//			иначе
//				курс = 1;
//			конецЕсли;	
//		КоэфТр =1-СуммаТр/(СуммаДокумента*Курс);
//	ИначеЕсли Найти(ДоговорКонтрагента.Наименование, "Инфинити")>0  Тогда
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду("91815"); 
//		Реализация.Контрагент = КонтрагентССылка;
//		Реализация.Грузополучатель = КонтрагентССылка;
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.НайтиПокоду("Б3332",,,Реализация.Контрагент); 
//	иначе
//		КонтрагентСсылка = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код); 
//		Реализация.Контрагент = КонтрагентССылка;
//		ГрузополучательССылка = Соединение.Справочники.Контрагенты.НайтиПоКоду(Контрагент.Код);
//		Реализация.Грузополучатель = ГрузополучательССылка;
//		// договор контрагента
//		Если Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.Факторинг Тогда
//			ЗначениеДоговора = "Договор факторинга (" + ДоговорКонтрагента.ВидДоговора + ")";
//		Иначе
//			ЗначениеДоговора = "Основной договор (" + ДоговорКонтрагента.ВидДоговора + ")";
//		КонецЕсли;
//		Реализация.ДоговорКонтрагента = Соединение.Справочники.ДоговорыКонтрагентов.Найтипонаименованию(ЗначениеДоговора,,,Реализация.Контрагент); 
//	конецЕсли;
//	//склад
//	Если Склад = Справочники.Склады.ПустаяСсылка() Тогда
//		Реализация.Склад = Соединение.Справочники.Склады.НайтипоКоду("00278");
//	иначе
//		Реализация.Склад = Соединение.Справочники.Склады.НайтипоКоду(Склад.код);
//	конецЕсли;
//	//подразделение
//	КодПодразделения = подразделение.Код;
//	Если КодПодразделения = "00005"  Тогда
//		Кодподразделения = "00128";
//	конецЕсли;	
//	Реализация.ПодразделениеОрганизации = Соединение.Справочники.подразделенияОрганизаций.Найтипокоду(Кодподразделения,,,Реализация.Организация);
//	Реализация.Товары.Очистить();
//	Для каждого стр из товары Цикл
//		НовСтр = Реализация.Товары.Добавить();	
//		НоменклатураССылка  = Соединение.Справочники.Номенклатура.НайтиПокоду(стр.Номенклатура.Код);
//		Если НоменклатураССылка = Неопределено Тогда
//			Сообщить("Не найдена номенклатура в бух. базе!"+ Стр.Номенклатура);
//			возврат;
//		иначе
//			НовСтр.Номенклатура = номенклатураСсылка;
//		конецесли;	
//		//склад
//		СкладССылка  =  Соединение.Справочники.Склады.НайтиПокоду(стр.Склад.Код);
//		
//		Если СкладССылка = Неопределено Тогда
//			Сообщить("Не найден склад в бух. базе!"+ стр.Склад );
//			возврат;
//		иначе
//			НовСтр.Склад = СкладСсылка;
//		конецесли;	
//		НовСтр.ЕдиницаИзмерения = стр.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
//		НовСтр.Количество = стр.Количество;
//		НовСтр.КоличествоМест = Стр.КоличествоМест;
//		НовСтр.Коэффициент = Стр.Коэффициент;
//		Если стр.СтавкаНДС = перечисления.СтавкиНДС.НДС18 Тогда
//			НовСтр.СтавкаНдс =  Соединение.перечисления.СтавкиНДС.НДС18;
//		иначеЕсли стр.СтавкаНДС = перечисления.СтавкиНДС.НДС0 Тогда
//			НовСтр.СтавкаНдс =  Соединение.перечисления.СтавкиНДС.ндс0;
//		иначеЕсли стр.СтавкаНДС = перечисления.СтавкиНДС.БезНДС Тогда
//			НовСтр.СтавкаНдс =  Соединение.перечисления.СтавкиНДС.безНДС;
//		конецесли;
//		Если  УсловиеРнД Тогда
//			Если Стр.Номенклатура.Родитель.Код="9004163    " или
//				Стр.Номенклатура.Родитель.Код="0080062    " или
//				Стр.Номенклатура.Родитель.Код="0001753    " или
//				Стр.Номенклатура.Родитель.Код="0001755    " тогда
//				НовСтр.Цена  = Окр(Стр.Цена * КоэффДиски,0); // до рублей
//			Иначе
//				НовСтр.Цена  = Окр(Стр.Цена * Коэфф,0); // до рублей
//			КонецЕсли;
//			НовСтр.Сумма = НовСтр.Цена * Стр.Количество;
//			Новстр.СуммаНДС = Окр(Стр.СуммаНДС*НовСтр.Сумма/Стр.Сумма,2);
//		ИначеЕсли УсловиеМс Тогда
//			НовСтр.Цена = Окр(Стр.Цена * Коэфф,0); // до рублей
//			НовСтр.Сумма = НовСтр.Цена * Стр.Количество;
//			Новстр.СуммаНДС = Окр(Стр.СуммаНДС*НовСтр.Сумма/Стр.Сумма,2);
//		ИначеЕсли УсловиеФА или УсловиеФАП Тогда
//			НовСтр.Цена = Окр(Стр.Цена * Коэфф*КоэфТр,0); // до рублей
//			НовСтр.Сумма = НовСтр.Цена * Стр.Количество;
//			Новстр.СуммаНДС = Окр(Стр.СуммаНДС*НовСтр.Сумма/Стр.Сумма,2);
//		ИначеЕсли УсловиеШТЯ Тогда
//			Если КурсВзаиморасчетов <> 0 Тогда
//				Курс = КурсВзаиморасчетов;
//			иначе
//				курс = 1;
//			конецЕсли;	
//			НовСтр.Цена = Окр(Стр.Цена * Коэфф*КоэфТр*Курс*1.18,0); // до рублей
//			НовСтр.Сумма = НовСтр.Цена * Стр.Количество;
//			Новстр.СуммаНДС = Окр(Стр.СуммаНДС*НовСтр.Сумма/Стр.Сумма,2);
//		Иначе
//			НовСтр.Цена = Стр.Цена;
//			НовСтр.Сумма = Стр.Сумма;
//			Новстр.СуммаНДС = Стр.СуммаНДС;
//		конецЕсли;
//		Реализация.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НовСтр, "Товары", Истина);
//	конецЦикла;
//	Реализация.Суммадокумента = Реализация.Товары.итог("Сумма");
//	Сообщить(строка(ТекущаяДата())+"Заполнили реализацию. ");
//	СчетаУчета = Соединение.БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Реализация.Организация, Реализация.Контрагент, Реализация.ДоговорКонтрагента);
//	
//	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
//		Реализация.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
//		Реализация.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
//		Реализация.СчетУчетаРасчетовПоТаре        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
//	Иначе
//		Реализация.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
//		Реализация.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
//		Реализация.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
//	КонецЕсли;
//	
//	Реализация.Записать(Соединение.РежимЗаписиДокумента.Запись);
//	Сообщить(строка(ТекущаяДата())+"Записали реализацию. ");
//	
//иначе 
//	Сообщить("Документ в бухгалтерии закрыт.Изменять нельзя!");	
//Конецесли;


////проверим закрыт ли документ и создана ли с/ф
//если не Реализация.Закрыт Тогда
//	//значит не было разбора на ГТД
//	ТекСсылка=Соединение.Справочники.ВнешниеОбработки.НайтиПоКоду("000000074");   //74
//	ИмяФайла = Соединение.ПолучитьИмяВременногоФайла(); 
//	ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
//	ДвоичныеДанные.Записать(ИмяФайла); 
//	РазборГТД = Соединение.ВнешниеОбработки.Создать(ИмяФайла,Ложь); 
//	Сообщить(строка(ТекущаяДата())+"Разберем ГТД. ");
//	РазборГТД.Инициализировать(Реализация, "Товары","");
//	Сообщить(строка(ТекущаяДата())+"Разобрали ГТД. ");

//	Реализация.Записать(Соединение.РежимЗаписиДокумента.Проведение);
//	Реализация.Закрыт = Истина;
//	Реализация.Записать(Соединение.РежимЗаписиДокумента.Запись);
//   Сообщить(строка(ТекущаяДата())+"Провели реализацию. ");
//конецЕсли;	

//СчетФактура = Соединение.УчетНДС.НайтиПодчиненныйСчетФактуру(РеализацияССылка,"СчетФактураВыданный",неопределено);
//Если СчетФактура = Неопределено Тогда
//	СчетФактура = Соединение.Документы.СчетФактураВыданный.CreateDocument();
//Иначе
//	СчетФактура = СчетФактура.GetObject();
//КонецЕсли;
//СчетФактура.дата = Дата;
//СчетФактура.номер = номер;
//СчетФактура.ДатаВыставления =  Дата;
//СчетФактура.Выставлен = Истина;
//СчетФактура.Контрагент = Реализация.контрагент;
//СчетФактура.ДоговорКонтрагента = Реализация.ДоговорКонтрагента;
//СчетФактура.Организация = Реализация.Организация;
//СчетФактура.ВидСчетаФактуры =  Соединение.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
//СчетФактура.СуммаДокумента = СуммаДокумента;
//СчетФактура.ВалютаДокумента = Реализация.ВалютаДокумента;
//СчетФактура.КодВидаОперации = "01";
//СчетФактура.КодСпособаВыставления = 1;
////
//СчетФактура.ДокументыОснования.Очистить();
//Стр = СчетФактура.ДокументыОснования.Добавить();
//Стр.ДокументОснование = РеализацияССылка.Ссылка;
//СчетФактура.ЗаполнитьДатуИНомерВходящегоДокумента();
//СчетФактура.Записать(); 
//Соединение.УчетНДС.УстановкаПроведенияУСчетаФактуры(РеализацияСсылка, "СчетФактураВыданный", Истина);

//Если Договорконтрагента.ТипДоговора = Справочники.ТипыДоговоров.Факторинг Тогда
////сф факторинг	
//ТекСсылка=Соединение.Справочники.ВнешниеОбработки.НайтиПоКоду("000000076");//76 
//ИмяФайла = Соединение.ПолучитьИмяВременногоФайла(); 
//ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
//ДвоичныеДанные.Записать(ИмяФайла); 
//ОбрПечать = Соединение.ВнешниеОбработки.Создать(ИмяФайла,Ложь);
//ОбрПечать.СсылкаНаОбъект = Счетфактура.ссылка;
//ТабДок = ОбрПечать.Сформировать();
//ТабДок.Записать(КаталогВременныхФайлов()+Ссылка.Номер+".mxl");	
//	
//иначе	
//сф ЯШТ
//ТекСсылка=Соединение.Справочники.ВнешниеОбработки.НайтиПоКоду("000000075");//75 
//ИмяФайла = Соединение.ПолучитьИмяВременногоФайла(); 
//ДвоичныеДанные = ТекСсылка.ХранилищеВнешнейОбработки.Получить(); 
//ДвоичныеДанные.Записать(ИмяФайла); 
//ОбрПечать = Соединение.ВнешниеОбработки.Создать(ИмяФайла,Ложь);
//ОбрПечать.СсылкаНаОбъект = Счетфактура.ссылка;
//ТабДок = ОбрПечать.Сформировать();
//ТабДок.Записать(КаталогВременныхФайлов()+Ссылка.Номер+".mxl");
//конецЕсли;

//ТабДок = Новый ТабличныйДокумент();
//попытка
//	ТабДок.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
//	табДок.АвтоМасштаб = Истина;
//	Табдок.ОтображатьСетку = Ложь;
//	ТабДок.ТолькоПросмотр = Истина;
//	ТабДок.Показать();
//исключение
//конецпопытки;
//	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");

конецПроцедуры	
Функция ПолучитьСуммуТр()

// Попробуем найти сумму транспортных расходов
Запрос = Новый Запрос("ВЫБРАТЬ
                      |	ПЗ1.Реализация,
                      |	СУММА(ПЗ2.ДоставкаНал) КАК ДоставкаНал,
                      |	СУММА(ПЗ2.ДоставкаВЦене) КАК ДоставкаВЦене
                      |ИЗ
                      |	(ВЫБРАТЬ
                      |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Ссылка КАК Ссылка,
                      |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация КАК Реализация,
                      |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация.Сделка КАК ЗАказ
                      |	ИЗ
                      |		Документ.ЗаданиеНаОтгрузку.ЗаказыПокупателей КАК ЗаданиеНаОтгрузкуЗаказыПокупателей
                      |	ГДЕ
                      |		ЗаданиеНаОтгрузкуЗаказыПокупателей.Реализация = &Реализация) КАК ПЗ1
                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
                      |			ИнформацияПоПроезду.Задание КАК Задание,
                      |			ИнформацияПоПроезду.Заказ КАК Заказ,
                      |			ИнформацияПоПроезду.ДоставкаНал КАК ДоставкаНал,
                      |			ИнформацияПоПроезду.ДоставкаВЦене КАК ДоставкаВЦене
                      |		ИЗ
                      |			РегистрСведений.ИнформацияПоПроезду КАК ИнформацияПоПроезду) КАК ПЗ2
                      |		ПО ПЗ1.Ссылка = ПЗ2.Задание
                      |			И ПЗ1.ЗАказ = ПЗ2.Заказ
                      |
                      |СГРУППИРОВАТЬ ПО
                      |	ПЗ1.Реализация");
Запрос.УстановитьПараметр("Реализация",Ссылка);
Выб = Запрос.Выполнить().Выбрать();

Если (Выб.Следующий()) Тогда 
	ЗначениеГрязное = ?(ЗначениеЗаполнено(Выб.ДоставкаНал),Выб.ДоставкаНал,0) + ?(ЗначениеЗаполнено(Выб.ДоставкаВЦене),Выб.ДоставкаВЦене,0);
	Если (ЗначениеГрязное<0) Тогда 
		Значение = 0;
	Иначе 
		Значение = ЗначениеГрязное;
	КонецЕсли;
Иначе 
	Значение = 0;
КонецЕсли;
возврат Значение;	
конецФункции

//31.05.2016 ввод на основании НачислениеПени документа Реализация
Процедура ДобавитьДоговорКонтрагентаПодразделение(ЭтотОбъект, Основание)                 	
	Если ЗначениеНеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда  
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачислениеПениПени.ДоговорКонтрагента
		|ИЗ
		|	Документ.НачислениеПени.Пени КАК НачислениеПениПени
		|ГДЕ
		|	НачислениеПениПени.Ссылка = &Основание";
		
		Запрос.УстановитьПараметр("Основание", Основание);
		РезультатЗапроса = Запрос.Выполнить();    		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ЭтотОбъект.ДоговорКонтрагента = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеНеЗаполнено(ЭтотОбъект.Подразделение) Тогда  
		ЭтотОбъект.Подразделение = Справочники.Подразделения.НайтиПоКоду("00005");		
	КонецЕсли;
	Если ЭтотОбъект.Услуги.Количество() = 0 Тогда 
		Сообщить("По данному документу нет остатков начисленных пени.");
	КонецЕсли;
КонецПроцедуры	      





мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
мОткрыватьФормаЗаполненияПоЗаказу = Ложь;

//БАЛАНС (04.12.2007)                       
//
мПроведениеИзФормы = Ложь;