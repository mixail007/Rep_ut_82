////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги;

Перем мПечатнаяФормаПоУмолчанию;
                                      
// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСклада;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = ПолучитьТекстСчетаФактуры(
													 НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()


Процедура ЗаполнитьТекстПроСпецификацию() Экспорт
	// вместо ссылки на счет-фактуру используем ссылку на спецификацию
	Если НЕ ЗначениеНеЗаполнено(Сделка) И ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЭлементыФормы.НадписьСтраховоеЗаявление.Заголовок=?(Сделка.ПечататьСтраховоеЗаявление,"ТРЕБУЕТСЯ СТРАХОВОЕ ЗАЯВЛЕНИЕ","");
		
		СсылкаСпецификация=НайтиПодчиненныйДокумент(Ссылка, "Спецификация");
		
		Если не ЗначениеНеЗаполнено(СсылкаСпецификация) Тогда
			ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = ПолучитьТекстСпецификации(СсылкаСпецификация);
		ИначеЕсли   Сделка.ВыписатьСпецификацию Тогда
			ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок ="требуется ввести";											 
		Иначе
			ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не  требуется"; 											 
		КонецЕсли; 												 
	КонецЕсли; 												 
КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает качество
//
Процедура УстановитьКачество(Продукция, Качество)
	
	Если ЗначениеНеЗаполнено(Продукция) ИЛИ Продукция.Услуга Тогда
		Качество = Неопределено;
	Иначе
		Качество = Справочники.Качество.Новый;
	КонецЕсли;
	
КонецПроцедуры // 	УстановитьКачество()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	//ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");
	ВвестиСпецификацию(ЭтотОбъект, ЭтаФорма, "Спецификация");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров      = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	//поменяем курс
	Если ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() тогда
				ТекущийКурс = РегистрыСведений.КурсыВалютДляПоступления.СрезПоследних(Дата,Новый структура("Валюта",ВалютаДокумента));
		Если  ТекущийКурс.Количество()>0 Тогда
			КурсВзаиморасчетов  = ТекущийКурс[0].Курс-3;
			кратностьВзаиморасчетов = ТекущийКурс[0].Кратность;	
		конецЕсли;
    конецЕсли;
	
	
	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ЗначениеНеЗаполнено(Сделка)
		  или (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		          И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя (счет на оплату).
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Имя);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Имя);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		// вызовем форму заполнения:
		ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоЗаказу", ЭтаФорма);
		Если ТабличнаяЧасть = Товары Тогда

			ФормаЗаполнения.ПоказыватьТовары = Истина;
			ФормаЗаполнения.ПоказыватьТару   = Ложь;
			ФормаЗаполнения.ПоказыватьУслуги = Ложь;
			ФормаЗаполнения.Реализация       = ЭтотОбъект;
			ФормаЗаполнения.ОткрытьМодально();

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			ФормаЗаполнения.ПоказыватьТовары = Ложь;
			ФормаЗаполнения.ПоказыватьТару   = Истина;
			ФормаЗаполнения.ПоказыватьУслуги = Ложь;
			ФормаЗаполнения.Реализация       = ЭтотОбъект;
			ФормаЗаполнения.ОткрытьМодально();

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			ФормаЗаполнения.ПоказыватьТовары = Ложь;
			ФормаЗаполнения.ПоказыватьТару   = Ложь;
			ФормаЗаполнения.ПоказыватьУслуги = Истина;
			ФормаЗаполнения.Реализация       = ЭтотОбъект;
			ФормаЗаполнения.ОткрытьМодально();

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
			СписокЗапросов.Добавить("ОстаткиИКачествоНоменклатуры",           "По остаткам и качеству номенклатуры ");
			СписокЗапросов.Добавить("РасходОстаткиКачествоИЦеныНоменклатуры", "По остаткам, качеству и ценам номенклатуры");
		Иначе
			СписокЗапросов.Добавить("ОстаткиНоменклатуры",            "По остаткам номенклатуры");
			СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги",    "По услугам предприятия");
		СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если ТабличнаяЧасть = Товары Тогда

		Команда         = "ПодборВТабличнуюЧастьТовары";
		Валюта          = ВалютаДокумента;
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
			Предупреждение("Не выбран договор контрагента!");
			Возврат;
		ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
			Возврат;
		КонецЕсли; 

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		Валюта            = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		Валюта            = ВалютаДокумента;
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Услуги";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           ,Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора);

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
			СтруктураОтбора.Вставить("Качество"         , Качество);
		КонецЕсли;
		Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			СтруктураОтбора.Вставить("Цена", Цена);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если НЕ ЗначениеНеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если ЗначениеНеЗаполнено(Качество) Тогда
				ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
 
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                    //+++ 25.01.2019 - возвратная тара - по своим НДС ?!
												// ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)
												 ПолучитьСтавкуНДС(СтавкаНДСнаДату(ЭтотОбъект.Дата) )
												);

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;


		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
				                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки
		|";

		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	Пока НомерСтроки < ТаблицаИсточник.Количество() Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл

			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда

				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда

					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;

						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(ЗначениеНеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;
						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];

				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Вставить(НомерСтроки + 1);

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из ТаблицаИсточник.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(ЗначениеНеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обаботанную таблицу
	ОрганизацияЗаказа                   = Сделка.Организация;
	ДатаЗаказа                          = Сделка.Дата;
	ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ОрганизацияЗаказа, ДатаЗаказа);

	ТабличнаяЧасть.Загрузить(ТаблицаИсточник);
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ТабличнаяЧасть = Товары Тогда

			Если ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;

			РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполнение цены зависит от розничности операции.
			СтрокаТабличнойЧасти.Цена = ПересчитатьЦенуПриИзмененииФлаговНалогов(
											ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
											Сделка.ВалютаДокумента, ВалютаДокумента,
											КурсДокумента(Сделка, мВалютаРегламентированногоУчета), КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Сделка.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Заполняем реквизиты табличной части.
			Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, ОрганизацияЗаказа, ДатаЗаказа, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
			ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем реквизиты табличной части.
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработкаЗаполнения()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если ЗначениеНеЗаполнено(РежимВызова) Тогда
		мОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);
		мТекущаяОрганизация                  = Организация;
	Иначе
		ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Если НЕ (глТорговоеОборудование = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал = Неопределено)
	   И НЕ (глТорговоеОборудование.млТерминал.Количество() = 0) Тогда
		УдалитьПунктМеню = Ложь;
	Иначе
		УдалитьПунктМеню = Истина;
	КонецЕсли;

	Если УдалитьПунктМеню Тогда
		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиТовары.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			ИндексКнопкиИзТерминалаСбораДанных = КнопкиПанелиТовары.Индекс(КнопкаИзТерминалаСбораДанных);
			КнопкиПанелиТовары.Удалить(ИндексКнопкиИзТерминалаСбораДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если НЕ мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или (Сделка <> Неопределено
	    И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
	       И Сделка <> Документы.ЗаказПокупателя.ПустаяСсылка())
	  Или (ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	       И Сделка <> Документы.СчетНаОплатуПокупателю.ПустаяСсылка())) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если ЗначениеНеЗаполнено(Сделка) Тогда
		ВидимостьСпособаСписания = Ложь;
	Иначе
		ВидимостьСпособаСписания = (Сделка.Метаданные().Имя = "ЗаказПокупателя");
	КонецЕсли;

	Если ВидимостьСпособаСписания <> мКолонкиТовары.СпособСписанияОстаткаТоваров.Видимость Тогда
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
		УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	КонецЕсли;

	// Видимость страници "Услуги"
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ ЭтоКомиссия;

	//УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;

	// Качество указывается только для брака
	ВидимостьКолонкиКачества = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак);
	УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Качество, ВидимостьКолонкиКачества);

	ВидимостьРеквизитаПроект(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	Если ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.НайтиПоКоду("Я0004") Тогда
		ЭлементыФормы.НадписьНомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НадписьНомерФормулаАвто.Заголовок = "№ документа Формула Авто:";
	ИначеЕсли ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
		ЭлементыФормы.НадписьНомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НадписьНомерФормулаАвто.Заголовок = "№ документа Шинтрейд Яр.:";
	ИначеЕсли ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
		ЭлементыФормы.НадписьНомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НомерФормулаАвто.Видимость = Истина;
		ЭлементыФормы.НадписьНомерФормулаАвто.Заголовок = "№ док. Формула Авто Плюс:";
	Иначе
		ЭлементыФормы.НадписьНомерФормулаАвто.Видимость = Ложь;
		ЭлементыФормы.НомерФормулаАвто.Видимость = Ложь;
	КонецЕсли;

	ЭлементыФормы.ОсновнаяПанель.Страницы.Бонусы.Видимость = ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.Бонусы;	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
//Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

//	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
//	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

//КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = Ложь;
	
	Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	Автоотметка = мАвтоОтметкаСклада 
	              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

	ЭлементыФормы.Склад.АвтоотметкаНезаполненного = Автоотметка;
	
	Если ЭлементыФормы.Склад.ОтметкаНезаполненного <> Автоотметка И ЗначениеНеЗаполнено(Склад) Тогда
		ЭлементыФормы.Склад.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ФорматСумм(ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (НЕ ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если НЕ ЗначениеНеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеНеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;


КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если Не ЗначениеНеЗаполнено(ПараметрОснование)
		И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

	Если ПараметрОснование.ВводитьТолькоПеремещение Тогда
			Отказ=Истина;
		 СообщитьОбОшибке("На основании заказа покупателя может быть введен ТОЛЬКО документ Внутренний заказ, затем Перемещение");
		 Возврат;
	 КонецЕсли;	
		
		Если мОткрыватьФормаЗаполненияПоЗаказу Тогда
			// вызовем форму заполнения:
			ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоЗаказу", ЭтаФорма);
			ФормаЗаполнения.ПоказыватьТовары = Истина;
			ФормаЗаполнения.ПоказыватьТару   = Истина;
			ФормаЗаполнения.ПоказыватьУслуги = Истина;
			ФормаЗаполнения.Реализация       = ЭтотОбъект;
			ЗначениеВыбора = ФормаЗаполнения.ОткрытьМодально();
			Если ЗначениеВыбора = Неопределено Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВыбраннойДисконтнойКартойСумме Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = мРассчитыватьАвтоматическиеСкидки;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	яштФормаДокументаПриОткрытии(ЭтотОбъект, ЭтаФорма);
	
	Если ЭтоНовый() Тогда
		
		Если ЗначениеНеЗаполнено(ПараметрОснование) Тогда
			ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
		КонецЕсли;
		Ответственный = глТекущийПользователь;
		ОсновнойСкладПользователя=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		Если ЗначениеЗаполнено(ОсновнойСкладПользователя) Тогда
			Склад =	ОсновнойСкладПользователя;
		КонецЕсли;	
		
		УстановитьНомерДокумента(ЭтотОбъект);
		
		Если НЕ ЗначениеНеЗаполнено(ДоговорКонтрагента)
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
		//+++ 29.07.2011 для Бухгалтерии - сразу определяем тип
		ЭлементыФормы.Заказчик.Значение = Справочники.Организации.ПустаяСсылка();
		
		НомерФормулаАвто = 0;  //чтобы не копировался
		
	КонецЕсли;

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("Качество");
	
	УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);


	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Заполнить подменю выбора печатных форм.
	СписокМакетов = ЭтотОбъект.ПолучитьСписокПечатныхФорм();
	УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
	                                       СписокМакетов,
	                                       Новый Действие("КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы"));

	// Установить печатную форму по умолчанию.
	УстановитьКнопкуПечати(ЭтотОбъект.Метаданные().Имя, ЭтаФорма, СписокМакетов, мПечатнаяФормаПоУмолчанию);

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.Склад, "Склад", "Реализация");

	//Запомним автоотметку поля шапки Склад
	мАвтоОтметкаСклада = ЭлементыФормы.Склад.АвтоОтметкаНезаполненного;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ЗаполнитьТекстПроСпецификацию();
	УстановитьАвтоотметку();
	УстановитьАвтоотметкуСклада();

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость     = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ОбновитьМенюКнопкиЗаполнить();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = РазрешитьРедактированиеЦенВДокументах() И НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ЗапретитьРедактироватьЦеныВДокументахПродажи");

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиУслуги.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	мСклад = Склад;

	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	Если мРассчитыватьАвтоматическиеСкидки Тогда
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Значение = 0;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.ВидСравнения = ВидСравнения.НеРавно;
		ЭлементыФормы.АвтоматическиеСкидки.ОтборСтрок.ПроцентАвтоматическихСкидок.Использование = Истина;
		ЭлементыФормы.АвтоматическиеСкидки.НастройкаОтбораСтрок.ПроцентАвтоматическихСкидок.Доступность = Ложь;
	КонецЕсли;

	// { Лапенков 20120810 : Кнопка доступна только пользователям с полными правами
 //   ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьТребованиеНакладную.Доступность = РольДоступна("ПолныеПрава");
	 // }
	 
	Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УправлениеСостояниемДокументов") Тогда
	
		ЭлементыФормы.Состояние.Доступность = Ложь;	
	
	КонецЕсли; 
	
	//БАЛАНС (04.12.2007)                       
	//
	мПроведениеИзФормы = Истина;
	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 
	
	//Если используется ограничение на редактирвоание документа по ответственному,
	// и пользователю запрещено редактировать чужие документы, тогда открываем только для просмотра
	Если Константы.ИспользоватьОграничениеПоОтветственномуНаПроведение.Получить() Тогда
		Если НЕ ЭтоНовый() И ЭтотОбъект.Ответственный <> глТекущийПользователь Тогда
			Если НЕ ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") Тогда
				ЭтаФорма.ТолькоПросмотр = Истина;
				Предупреждение("Вы не можете вносить никаких изменений в Реализацию, 
				|созданную пользователем: "+строка(ЭтотОбъект.Ответственный)+"!",30);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	//+++( 31.07.2014 - для полных прав, кассиров филиалов и тем, у кого РазрешитьРедактированиеЧужихДокументов
	Если ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") тогда
		Если НЕ ( ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "РазрешитьРедактированиеЧужихДокументов") 
			     или РольДоступна("ПолныеПрава") 
				 или РольДоступна("Кассир") 
				 ) Тогда
    		ЭтаФорма.ТолькоПросмотр = Истина;
			Предупреждение("Вы не можете вносить никаких изменений в Реализацию!",30);
		КонецЕсли;
	КонецЕсли;
    //+++)
	
	//+++ 23.06.2015 - 	запрет редактирования номера для менеджеров!
	Если РольДоступна("ПолныеПрава") 
	 или ( РольДоступна("Кассир")  //+++ 30.06.2015 - разрешение для бух. филиала
	       и ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") 
		  ) 
	 или РольДоступна("ПравоЗавершенияРаботыПользователей") тогда 
		ЭлементыФормы.Номер.Доступность = истина;
	КонецЕсли;

	если ДоговорКонтрагента.ТипДоговора<>справочники.ТипыДоговоров.ПеремещениеОТХ Тогда
	иначе	
		//Элементыформы.ДействияФормы.Кнопки.ВыгрузкаСФ.доступность = Ложь;
		Элементыформы.ДействияФормы.Кнопки.ДействиеВыгрузитьВБП.Доступность = Ложь;
	конецЕсли;

	УстановитьДоступностьКнопокПечати();

КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

Процедура ОбработкаАктивизацииОбъекта(АктивныйОбъект, Источник)
	// Вставить содержимое обработчика.
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ФорматСумм(ПересчитатьИзВалютыВВалюту(ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.АдресаХранения.Заголовок = "Адреса ("  + ДокументОбъект.ТоварыАдресноеХранение.Количество() + " поз.)";
	СтраницаПанели.ДанныеПоПогрузке.Заголовок = "Данные по погрузке ("  + ДокументОбъект.ДанныеПоПогрузке.Количество() + " поз.)";
		
	// Пени 
	
	Если ВыставлениеПени Тогда
	
		ЭлементыФормы.Товары.ТолькоПросмотр = Истина;
		ЭлементыФормы.ДанныеПоПогрузке.ТолькоПросмотр = Истина;
	//	ЭлементыФормы.Кладовщики.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВозвратнаяТара.ТолькоПросмотр = Истина;
		
	КонецЕсли; 
	
	// Пени
	
	// Работа с ЧП
	
	//Если ОтгрузкаЧерезЧП Тогда
	//
	//	ЭлементыФормы.Сделка.Доступность = Ложь;
	//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выгрузить.Доступность = НЕ Выгружен;
	//	
	//	ЭлементыФормы.Дата.Доступность = НЕ Выгружен;
	//	ЭлементыФормы.Номер.Доступность = НЕ Выгружен;
	//	
	//Иначе
	//	
	//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выгрузить.Доступность = Ложь;
	//	ЭлементыФормы.ОтгрузкаЧерезЧП.Видимость = Ложь;
	//
	//КонецЕсли; 
	
	// Работа с ЧП
	
	//+++ 03.03.2015
	колМест = 0;
	для каждого стр1 из Товары цикл
		 колМест = колМест + ?(стр1.КоличествоМест>0,стр1.КоличествоМест, стр1.Количество);
	КонецЦикла;	
	ЭлементыФормы.Товары.Колонки.КоличествоМест.ТекстПодвала = колМест;
	
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;
	если Источник.Заголовок = "Заполнение реализации по заказу покупателя"  тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			ЗначениеВыбора.Свойство("Команда", Команда);
			
			Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
				ОбработкаПодбора(Товары, ЗначениеВыбора);
				
			ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
				ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
				
			ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
				ОбработкаПодбора(Услуги, ЗначениеВыбора);
				
			ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда
				
				Если ЗначениеВыбора.ЗаполнятьТовары Тогда
					ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
				КонецЕсли;
				Если ЗначениеВыбора.ЗаполнятьТару Тогда
					ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
				КонецЕсли;
				Если ЗначениеВыбора.ЗаполнятьУслуги Тогда
					ОбработкаЗаполнения(Услуги, ЗначениеВыбора.Услуги);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	иначе
	бонусы.Загрузить(значениевыбора);	
		
		
		
		
	конецесли;
	
	
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик внешнего события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	Если глТорговоеОборудование <> Неопределено Тогда

		СтруктураПараметров = Новый Структура();

		Если Событие = "BarCodeValue" Тогда

			ИмяТекущейСтраницы = ЭтаФорма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
			Если ИмяТекущейСтраницы = "Товары" Тогда

				Команда         = "ПодборВТабличнуюЧастьТовары";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Товары";

			ИначеЕсли ИмяТекущейСтраницы = "Услуги" Тогда

				Команда         = "ПодборВТабличнуюЧастьУслуги";
				Валюта          = ВалютаДокумента;
				ИмяТабличнойЧасти = "Услуги";

			ИначеЕсли ИмяТекущейСтраницы = "Тара" Тогда

				Если ЗначениеНеЗаполнено(ДоговорКонтрагента) Тогда
					Предупреждение("Не выбран договор контрагента!");
					Возврат;
				ИначеЕсли ЗначениеНеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
					Возврат;
				КонецЕсли;

				Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
				Валюта = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ИмяТабличнойЧасти = "ВозвратнаяТара";


			Иначе

				// Ничего не надо делать
				Возврат;

			КонецЕсли;

			ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Команда"              , Команда);
			СтруктураПараметров.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
			СтруктураПараметров.Вставить("ТипЦен"               , ТипЦен);
			СтруктураПараметров.Вставить("СпособЗаполненияЦен"  , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
			СтруктураПараметров.Вставить("ВалютаЦены"           , Валюта);
			СтруктураПараметров.Вставить("ИмяТабличнойЧасти"    , ИмяТабличнойЧасти);

			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтСканераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);

		ИначеЕсли Событие = "MagneticStripeCardValue" Тогда
			СтруктураПараметров.Вставить("Команда"              , "");
			глТорговоеОборудование.ОбработатьВнешнееСобытиеОтРидераДляФормы(ЭтаФорма, ЭтотОбъект, СтруктураПараметров, Данные);
		КонецЕсли;

		Команда = "";
		СтруктураПараметров.Свойство("Команда", Команда);
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки()
			И Команда = "РассчитатьДисконтныеСкидки"Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);
	мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнить(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
		
		Если СтруктураЗначений.ТекущийТипЦен <> СтруктураЗначений.НовыйТипЦен Тогда
			ОбновитьФормуПодбора("ТипЦен");
		КонецЕсли;
	КонецЕсли;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки   = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если ЗначениеНеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Поступление);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	НапечататьДокументПоУмолчанию(ЭтотОбъект, глТекущийПользователь, мПечатнаяФормаПоУмолчанию, ЭтаФорма);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Текст = Кнопка.Текст;
		СтруктураМакета = Новый Структура("Макет, ПредставлениеМакета");
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);
			СтруктураМакета.Макет = СтрокаМакетаВСписке.Значение;
			СтруктураМакета.ПредставлениеМакета = СтрокаМакетаВСписке.Представление;			
			
		Иначе
			СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(Кнопка.Имя, "_", "-")));
			Печать(СсылкаВнешнейФормы,,,ЭтаФорма);
			СтруктураМакета.Макет = СсылкаВнешнейФормы;
			СтруктураМакета.ПредставлениеМакета = Кнопка.Текст;
		КонецЕсли;		
		
		мПечатнаяФормаПоУмолчанию = СтруктураМакета.Макет;
		СохранитьТекущуюКнопкуПечати(ЭтотОбъект.Метаданные().Имя, СтруктураМакета);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельФормыДействиеВыбратьПечатнуюФормы()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Прочитать();
		НаборТоварыНаСкладах.Очистить();
		НаборТоварыНаСкладах.Записать();
		НаборТоварыВРезервеНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыВРезервеНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыВРезервеНаСкладах.Прочитать();
		НаборТоварыВРезервеНаСкладах.Очистить();
		НаборТоварыВРезервеНаСкладах.Записать();
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Прочитать();
		НаборТоварыОрганизаций.Очистить();
		НаборТоварыОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением(Отказ);

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");
	//УстановитьДоступностьКнопкиЗаполнитьИПровести();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВНалоговомУчете = Элемент.Значение;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);

	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	ПриИзмененииОблагаетсяЕНВД("Организация");

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		СтрокаТипа = "СчетНаОплатуПокупателю";
	Иначе
		СтрокаТипа = "ЗаказПокупателя";
	КонецЕсли;
	
	Если Подразделение.ВЭД Тогда
		СтрокаТипа = "ЗаказПокупателяСезонный";
	КонецЕсли;
	
	НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
						 "Приход", СтрокаТипа);

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Выберать дату курса и заполнить курс взаиморасчетов.
	ВыбратьКурсВзаиморасчетов(ЭтотОбъект);

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)

	Если ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Если РассчитыватьАвтоматическиеСкидки() Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерасчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерасчитатьДолгНажатие(Элемент)

	СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерасчитатьАвансДоговораНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтрагентАдресаДоставки = ?(Грузополучатель.Пустая(), Контрагент, Грузополучатель);
	
	Если ЗначениеНеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ВвестиЗначение(КонтрагентАдресаДоставки, "Выберите контрагента");
	КонецЕсли;

	Если Не ЗначениеНеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентАдресаДоставки;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если Не ЗначениеНеЗаполнено(ВыбАдресДоставки) Тогда
			Если найти(ВыбАдресДоставки,",КРД:") > 0 Тогда
				
				Позиция = найти(ВыбАдресДоставки,",КРД:") + 4;
				
				Дл = СтрДлина(ВыбАдресДоставки);
				
				Коорд  = Прав(ВыбАдресДоставки,Дл-Позиция);
				
				ВыбАдресДоставки = Лев(ВыбАдресДоставки,Позиция-5);
				
			КонецЕсли;
			
			КоординатыДоставки = Коорд;
			
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка    = Ложь;
	ФормаВыбора             = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение      = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения          = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Открытие" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеНеЗаполнено(Элемент.Значение) Тогда
		Процент = Элемент.Значение.ПроцентСкидки;
		Элемент.Значение.ПолучитьФорму(, ЭтаФорма, ЭтаФорма).ОткрытьМодально();
		Если Элемент.Значение.ПроцентСкидки <> Процент Тогда
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)
	Перем Ответ, Данные, ВремТовар, ВремЕдиница;
	
	Если глТорговоеОборудование = Неопределено Тогда
		Предупреждение("Торговое оборудование не подключено");
	ИначеЕсли глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;

		///Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
		Иначе  ///Продолжение
		
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные);
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара");
		Иначе
			Для Каждого СтрокаДанных Из Данные Цикл
				//+++Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
              	ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				Если ЗначениеЗаполнено(ВремТовар) тогда
				//Если ВремТовар = Неопределено
				//	 Или ВремТовар.Количество() = 0 Тогда
				//		Продолжить;
				//	Иначе
				//		ВремТовар = ВремТовар[0];
				//	КонецЕсли;

					// Ищем выбранную позицию в таблице подобранной номенклатуры.
					//  Если найдем - увеличим количество; не найдем - добавим новую строку.
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					//СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаИзмерения);
					//СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ВремТовар.ХарактеристикаНоменклатуры);
					//СтруктураОтбора.Вставить("СерияНоменклатуры", ВремТовар.СерияНоменклатуры);
					
					СтруктураОтбора.Вставить("ЕдиницаИзмерения", ВремТовар.ЕдиницаХраненияОстатков);
					СтруктураОтбора.Вставить("Качество", справочники.Качество.Новый);
					
					//+++ 28.01.2013 - всего 1 адресный склад пока что...
					// в СтрокаДанных.Адрес  - первая цифра = "номер" склада:   1 = "5000"
					СтруктураОтбора.Вставить("Склад", справочники.Склады.НайтиПоНаименованию("5000") );
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
					Если СтрокаТабличнойЧасти <> Неопределено Тогда

						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;

					Иначе

						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = Товары.Добавить();
						СтрокаТабличнойЧасти.Номенклатура               = ВремТовар;   //.Номенклтура
						СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ВремТовар.ЕдиницаХраненияОстатков;//.ЕдиницаИзмерения;
						//СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ВремТовар.ХарактеристикаНоменклатуры;
						//СтрокаТабличнойЧасти.СерияНоменклатуры          = ВремТовар.СерияНоменклатуры;
						//СтрокаТабличнойЧасти.Качество                   = ВремТовар.Качество;
						СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
						СтрокаТабличнойЧасти.Количество                 = СтрокаДанных.Количество;
                     //+++ 28.01.2013 - всего 1 адресный склад пока что...
					// в СтрокаДанных.Адрес  - первая цифра = "номер" склада:   1 = "5000"
					   СтрокаТабличнойЧасти.Склад						= справочники.Склады.НайтиПоНаименованию("5000");
					
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

						ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

					КонецЕсли;

					// Рассчитать реквизиты табличной части.
					РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					ЭлементыФормы.Товары.ТекущаяСтрока  = СтрокаТабличнойЧасти;
					ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
				КонецЕсли;
			КонецЦикла;

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
				РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			КонецЕсли;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(РезультатВыбора);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КонецЕсли;///Плотников
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НоваяСтрока 
	   И ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
		СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.Склад    = Склад;
	КонецЕсли;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	Если (НоваяСтрока) И СуммаСтроки > 0 Тогда
		//Расчет скидок
		Если РассчитыватьАвтоматическиеСкидки() Тогда

			мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтроки;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
			СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
			СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
			СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
			СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
			РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		КонецЕсли;
	КонецЕсли;
	//ЗаполнитьВесВТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьАвтоотметкуСклада();
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок - СуммаСтроки;
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	УстановитьАвтоотметкуСклада();

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	//+++( 03.03.2015 
	//ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	если ДанныеСтроки.КоличествоМест>0 тогда
		КоэффМест = ДанныеСтроки.Количество / ДанныеСтроки.КоличествоМест;
		ОформлениеСтроки.Ячейки.КоэффициентМест.УстановитьТекст(Формат(КоэффМест, "ЧЦ=10; ЧДЦ=3"));
	Иначе
		ОформлениеСтроки.Ячейки.КоличествоМест.УстановитьТекст("<авто>");
		ОформлениеСтроки.Ячейки.КоэффициентМест.УстановитьТекст("1.000");
		
		ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);//14.08.2017  - для Акс-ов !
	КонецЕсли;
	//+++)
	
	ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

	Если НЕ ЗначениеНеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

	ПоказатьКодТНВЭД(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;	
	
		
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	//+++ 03.03.2015 
	РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
    
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество -  НЕ НАДО! расчет идет в обратную сторону!
	//+++ 03.03.2015 РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Если СтрокаТабличнойЧасти.КоличествоМест>0 тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;	
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);

	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода качества номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыКачествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		СтрокаТабличнойЧасти.Склад = Склад;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект); 
	ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
		                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Заполнение цены зависит от розничности операции.
	ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глТекущийПользователь);
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаНДСПриИзменении(Элемент)

КонецПроцедуры // УслугиСуммаНДСПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()

Процедура ПриЗаписи(Отказ)
	// Вставить содержимое обработчика.
	//яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	//Отказ = проверкаЦенРеализацииИЗаказа(); //+++  12.03.2013

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда   //***2018.02.08 
		Если ДанныеПоПогрузке.Количество() = 0 Тогда
			ДанныеПоПогрузкеПанельЗаполнить(ЭлементыФормы.ДанныеПоПогрузкеПанель.Кнопки.Заполнить);
		КонецЕсли;
	КонецЕсли;

	//+++29.03.2017
	Рез=НайтиДоговорФакторинга(Контрагент, Дата);
	Если Рез.ЕстьДоговорФакторинга Тогда
	спис = ПолучитьСписокРазрешенныхДоговоров(Контрагент, Дата ); 
		Если спис.найтиПоЗначению(ДоговорКонтрагента.Код) = неопределено тогда
			Если не (ЭтотОбъект.ПометкаУдаления или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) тогда 
			Отказ = истина;
		   	Сообщить("У клиента есть действующий договор Факторинга! Нельзя использовать договор '"+строка(ДоговорКонтрагента)+"'!", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УчетТолькоПоПодразделениюПользователя") Тогда
		
		Если ЗначениеЗаполнено(Склад) И (Не Склад.Подразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение) Тогда
			Сообщить("Вы не можете делать отгрузки со склада " + Склад + ". Выберите склад, соответствующий вашему подразделению.");
			Отказ = Истина;
		КонецЕсли;
		
		Для каждого СтрокаТовар Из Товары Цикл
			Если СтрокаТовар.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Если ЗначениеЗаполнено(СтрокаТовар.Склад) И (Не СтрокаТовар.Склад.Подразделение = ПараметрыСеанса.ТекущийПользователь.ОсновноеПодразделение) Тогда
					Сообщить("Вы не можете делать отгрузки со склада " + СтрокаТовар.Склад + ". Выберите склад, соответствующий вашему подразделению.");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//+++( 29.07.2014 - ТОЛЬКО для филиалов - доп.проверка на наличие Спецификации (задание от Яковлевой Н.)
		
		Если НЕ ЗначениеНеЗаполнено(Сделка) И ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			//ЭлементыФормы.НадписьСтраховоеЗаявление.Заголовок=?(Сделка.ПечататьСтраховоеЗаявление,"ТРЕБУЕТСЯ СТРАХОВОЕ ЗАЯВЛЕНИЕ","");
			
			СсылкаСпецификация=НайтиПодчиненныйДокумент(Ссылка, "Спецификация");
			
			Если ЗначениеНеЗаполнено(СсылкаСпецификация) 
				и Сделка.ВыписатьСпецификацию Тогда
			//	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок ="требуется ввести";
			Предупреждение("Требуется ввести Спецификацию по данному документу!", 60);	
			
				Если РежимЗаписи = РежимЗаписиДокумента.Проведение и НЕ РольДоступна("ПолныеПрава") тогда
				Сообщить("Проведение БЕЗ Спецификации недоступно для документа: " + строка(Ссылка), СтатусСообщения.Внимание);	
				Отказ = истина;
				КонецЕсли;
			
			//Иначе
			//	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не  требуется"; 											 
			КонецЕсли; 												 
		КонецЕсли; 
		
        //+++)
		
	КонецЕсли;
	
	яштСменаПользователя(ЭтотОбъект, ЭтаФорма, глТекущийПользователь);
	
	ЗаполнитьВесНетто(Товары);
	ОбщийВес=Товары.Итог("Вес");
	
	ПроверитьКомментарийДляОбменаПоРознице(ЭтотОбъект,Отказ);
		
	//Если РежимЗаписи = РежимЗаписиДокумента.Проведение тогда	
	//	Отказ = проверкаЦенРеализацииИЗаказа(); //+++  12.03.2013
	//КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение тогда	
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ПроведениеРеализацииТоваров);
	КонецЕсли;
	
	//+++ 16.06.2015 по служебке от Бакута С.Е. - 00:00 часов "сдвигает" на текущее время (той же даты!) (для Москвы и др.филиалов)
	Если Подразделение.ОбособленноеПодразделение и Дата = началоДня(Дата) тогда
		время = число( ТекущаяДата() - НачалоДня(ТекущаяДата()) );
		Дата  = Дата  + время;
	КонецЕсли;
	
	//***2015.01.25
	Если ЭтоНовый() И ДоговорКонтрагента.ТипДоговора = Справочники.ТипыДоговоров.Пени Тогда
		УстановитьНовыйНомер("ПЕ");
	КонецЕсли;
	//***

КонецПроцедуры //передЗаписью()

//+++  12.03.2013 - проверка соответствия цен!
функция проверкаЦенРеализацииИЗаказа()
	
	рез = ложь;
	
	#Если Клиент  тогда	
	Если ЗначениеНеЗаполнено(ЭтотОбъект.Сделка) тогда
		сообщить("Не указан заказ покупателя (сделка)!");
		возврат ложь;
	КонецЕсли;
	Если ТипЗнч(ЭтотОбъект.Сделка)<>Тип("ДокументСсылка.ЗаказПокупателя") тогда
		сообщить("Тип сделки <> Заказ покупателя!");
		возврат ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	РеализацияТоваровУслугТовары.Номенклатура,
	                |	РеализацияТоваровУслугТовары.Цена,
	                |	ВЫРАЗИТЬ(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0) / ВЫБОР
	                |			КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) = 0
	                |				ТОГДА 0.001
	                |			ИНАЧЕ ЗаказыПокупателейОстатки.КоличествоОстаток
	                |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаРегистра,
	                |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментВремени, ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	                |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	                |ГДЕ
	                |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	                |	И РеализацияТоваровУслугТовары.Цена <> (ВЫРАЗИТЬ(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0) / ВЫБОР
	                |				КОГДА ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) = 0
	                |					ТОГДА 0.001
	                |				ИНАЧЕ ЗаказыПокупателейОстатки.КоличествоОстаток
	                |			КОНЕЦ КАК ЧИСЛО(15, 2)))
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	НомерСтроки
	                |АВТОУПОРЯДОЧИВАНИЕ";
	 
	 Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	 
	 ГраницаДок = новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Исключая);// для перепроведения!
	 Запрос.УстановитьПараметр("МоментВремени",ГраницаДок );
	 
	 Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	 
	 Запрос.УстановитьПараметр("ЗаказПокупателя", ЭтотОбъект.Сделка);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Если Выборка.Количество()>0 тогда
		 рез = истина;
		 Сообщить("-> Есть несоответствие цен в реализации и в заказе:", СтатусСообщения.Внимание);
		 пока выборка.Следующий() цикл
			 Сообщить(строка(выборка.НомерСтроки)+" строка.  Цена в документе: "+формат(выборка.цена,"ЧДЦ=2")+", а по заказу: "+формат(выборка.ЦенаРегистра, "ЧДЦ=2"), СтатусСообщения.Внимание);
		 КонецЦикла;	 
	 КонецЕсли;
 #КонецЕсли
 
 возврат рез;
	 
КонецФункции	


Процедура ДанныеПоПогрузкеПанельЗаполнить(Кнопка) ЭКСПОРТ
	//ЗаполнитьВесНетто(Товары);
	//ОбщийВес=Товары.Итог("Вес");
	ДанныеПоПогрузке.Очистить();
	//+++ перераспределение КТУ по грузчикам по группам складов
	Если Константы.КТУгрузчиковПоСкладам.Получить() тогда 
		яштРезервыПоТоварам.ЗаполнениеКТУГрузчиков(ЭтотОбъект);
		возврат;
	КонецЕсли;
	
//+++ 26.07.2012 - для 2х складов 
// Грузчики как в последней Реализации за тот же день:
// для скорости обработки - из Продаж за день - сразу ДокументПродажи = РеализацияТоваровУслуг(по типу )
//находим последний ДокументПродажи <> &Ссылка на текущий Документ
//с таким же складом 
//
//и берем оттуда грузчиков
//
Если Склад.Код = "00001" или Склад.Код = "00002" или Склад.Код = "00540" или Склад.Код = "00642" тогда    //Металлобаза 2/1, Металлобаза 2/2, Криал, 5000
	Запрос=Новый Запрос;
	попытка
	Запрос.Текст="ВЫБРАТЬ
	             |	РеализацияТоваровУслугДанныеПоПогрузке.Грузчик
	             |ИЗ
	             |	(ВЫБРАТЬ ПЕРВЫЕ 1
	             |		РеализацияТоваровУслуг.ДокументПродажи КАК Ссылка
	             |	ИЗ
	             |		РегистрНакопления.Продажи.Обороты(НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ), КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), , ВЫРАЗИТЬ(ДокументПродажи КАК Документ.РеализацияТоваровУслуг) ССЫЛКА Документ.РеализацияТоваровУслуг) КАК РеализацияТоваровУслуг
	             |	ГДЕ
	             |		РеализацияТоваровУслуг.ДокументПродажи.Проведен
	             |		И РеализацияТоваровУслуг.ДокументПродажи <> &Ссылка
	             |		И РеализацияТоваровУслуг.ДокументПродажи.Дата < &Дата
	             |		И РеализацияТоваровУслуг.ДокументПродажи.Склад = &Склад
	             |	
	             |	УПОРЯДОЧИТЬ ПО
	             |		РеализацияТоваровУслуг.ДокументПродажи.Дата УБЫВ) КАК ВложенныйЗапрос
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ДанныеПоПогрузке КАК РеализацияТоваровУслугДанныеПоПогрузке
	             |		ПО ВложенныйЗапрос.Ссылка = РеализацияТоваровУслугДанныеПоПогрузке.Ссылка
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	РеализацияТоваровУслугДанныеПоПогрузке.НомерСтроки
	             |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Параметры.Вставить("Ссылка", Ссылка); 	// ссылка на текущий документ
	Запрос.Параметры.Вставить("Дата", ?(Дата='00010101',ТекущаяДата(), Дата) ); 		// дата тек.документа
	Запрос.Параметры.Вставить("Склад", Склад); 		// ссылка на склад тек.документ
	Выборка=Запрос.Выполнить().Выбрать();
	исключение  
	// пустой результат запроса из самого маленького справочники с нереальным условием
	 Запрос.Текст="ВЫБРАТЬ
	              |	Грузчики.Ссылка
	              |ИЗ
	              |	Справочник.ФизическиеЛица КАК Грузчики
	              |ГДЕ
	              |	Грузчики.Код = ""00000""";
	Выборка=Запрос.Выполнить().Выбрать();
    КонецПопытки;
		
иначе // как было
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|Ссылка Грузчик
	|ИЗ
	|	Справочник.ФизическиеЛица
	|ГДЕ Официальный";
	Выборка=Запрос.Выполнить().Выбрать();
КонецЕсли;
//+++)

	КоличествоСтрок=Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		Строка=ДанныеПоПогрузке.Добавить();
		Строка.Грузчик=Выборка.Грузчик;
		Строка.Вес=1;
	КонецЦикла;	

КонецПроцедуры        


Функция ЧасМин(Сек)
	Возврат ?(СтрДлина(Строка(Цел(Сек/3600))) < 2, "0" + Строка(Цел(Сек/3600)), Строка(Цел(Сек/3600))) + 
			 ":" + ?(СтрДлина(Строка(Цел((Сек/3600 - Цел(Сек/3600))*60))) < 2, "0" + Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)),
			 Строка(Цел((Сек/3600 - Цел(Сек/3600))*60)));
		 КонецФункции


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТТН" Тогда
		
		ЭтотОбъект.Прочитать();
		ЭтаФорма.Обновить();
		
	
	КонецЕсли; 
	
КонецПроцедуры


Процедура КоманднаяПанельУслугиПерезаполнитьПени(Кнопка)
	
	Если ВыставлениеПени Тогда
		
		Если Вопрос("Перед заполнением табличная часть 
			|будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет, 0) = КодВозвратаДиалога.Да Тогда
			
			Услуги.Очистить();
			яштПени.ЗаполнитьТЧУслуги(ЭтотОбъект, Сделка);
			
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПеревозчикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик=?(ЗначениеЗаполнено(ВыбКонтрагент),СокрЛП(ВыбКонтрагент.НаименованиеПолное),"");
КонецПроцедуры

Процедура ДействияФормыДействиеЗаполнитьТТН(Кнопка)
ЗаполнитьДанныеПоДоверенности();	
КонецПроцедуры

Процедура ДействияФормыДействиеЗаполнитьТребованиеНакладную(Кнопка)
	Если Не ЭтоНовый() Тогда
		СкладПоУмолчаниюКрышки=Справочники.Склады.НайтиПоКоду("00393");
		СтатьяЗатратПоУмолчанию=Справочники.СтатьиЗатрат.НайтиПоКоду("А0039");
		НоменклатурнаяГруппаПоУмолчанию=Справочники.НоменклатурныеГруппы.НайтиПоКоду("00026");

		ДокументТН=Документы.ТребованиеНакладная.СоздатьДокумент();
		ДокументТН.ОтражатьВУправленческомУчете=Истина;
		ДокументТН.Подразделение = Справочники.Подразделения.НайтиПоКоду("00008"); // Бухгалтерия
		ДокументТН.Организация=ПолучитьЗначениеПоУмолчанию(глТекущийПользователь,"ОсновнаяОрганизация");
		ДокументТН.Контрагент= Контрагент;
		ДокументТН.ДоговорКонтрагента=ДоговорКонтрагента;
		ДокументТН.Склад=СкладПоУмолчаниюКрышки;
		ДокументТН.ДокументОснование = ЭтотОбъект.Ссылка;
		ДокументТН.Комментарий="списание крышек";
		//Для строкаДокументТН.Материалы
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ Комплектующая Номенклатура,
		|Комплектующая.ЕдиницаХраненияОстатков  ЕдиницаИзмерения,
		| СУММА(КоличествоОтгружено) КОличество
		| ИЗ
		|(ВЫБРАТЬ 
		|РеализацияТоваровУслугТовары.Номенклатура,
		|РеализацияТоваровУслугТовары.КоличествоОтгружено,
		|КомплектующиеНоменклатуры.Комплектующая
		|ИЗ
		|(ВЫБРАТЬ 
		|Номенклатура,
		|СУММА(Количество) КоличествоОтгружено
		|ИЗ  Документ.РеализацияТоваровУслуг.Товары 
		|ГДЕ Ссылка = &СсылкаРеализация 
		|СГРУППИРОВАТЬ ПО Номенклатура ) РеализацияТоваровУслугТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|(ВЫБРАТЬ	Номенклатура,	Комплектующая
		|ИЗ	РегистрСведений.КомплектующиеНоменклатуры 
		|	ГДЕ Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ 
		|	Документ.РеализацияТоваровУслуг.Товары ГДЕ Ссылка=&СсылкаРеализация )
		|И Комплектующая В Иерархии(&Крышки)) КАК КомплектующиеНоменклатуры
		|ПО РеализацияТоваровУслугТовары.Номенклатура=КомплектующиеНоменклатуры.Номенклатура
		|ГДЕ НЕ КомплектующиеНоменклатуры.Комплектующая  ЕСТЬ NULL ) А
		|СГРУППИРОВАТЬ ПО КОмплектующая
		|Упорядочить ПО КОмплектующая.КодСБИС";
		
		Запрос.УстановитьПараметр("СсылкаРеализация", Ссылка);
		Запрос.УстановитьПараметр("Крышки", Справочники.Номенклатура.НайтиПоКоду("0080004"));
		
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			строкаДокументТН=ДокументТН.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(строкаДокументТН,Выборка);
			строкаДокументТН.Коэффициент=1;
			строкаДокументТН.Качество=Справочники.Качество.Новый;
			строкаДокументТН.СтатьяЗатрат=СтатьяЗатратПоУмолчанию;
			строкаДокументТН.НоменклатурнаяГруппа=НоменклатурнаяГруппаПоУмолчанию;
			строкаДокументТН.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЦикла;	
		
		ДокументТН.ПолучитьФорму("ФормаДокумента").Открыть();
	Иначе
		СообщитьОбОшибке("Требование-накладная может быть введена только после записи реализации"); 
	Конецесли;
	
КонецПроцедуры

Процедура ДействияФормыДействиеВыгрузитьВБП(Кнопка)
//	Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");

	Если ЭтоНовый() и этотОбъект.Модифицированность() Тогда
		СообщитьОбОшибке("Перед выгрузкой данный документ необходимо записать");
	КонецЕсли;	
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	
	удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

//Обработка = Обработки.УниверсальныйОбменДаннымиXMLv2.Создать();
	Обработка.РежимОбмена = "Выгрузка";
	ФайлПравилОбмена="c:\ПравилаОбменаРеализациями_ЯШТ_УТ_БП_реализация_.xml"; // см.    \\terminal\c$\	
	Обработка.ИмяФайлаПравилОбмена = ФайлПравилОбмена;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	
	Обработка.ВыгружатьТолькоРазрешенные = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = "server"; //01.07.2013
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = "v82ib_yst_bp";
	Обработка.ПользовательИнформационнойБазыДляПодключения = "Робот (центр - номенклатура)";
	Обработка.ПарольИнформационнойБазыДляПодключения = "09876";
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию, 1 - снимать регистрацию

	Обработка.ЗагрузитьПравилаОбмена();
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки",ЭтотОбъект.Ссылка);
	Обработка.ВыполнитьВыгрузку();
	Сообщить(строка(ТекущаяДата())+"Подключаемся...");

	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
КонецПроцедуры


Процедура ТоварыПоМестамХраненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ПоказатьКодАртикул(ЭлементыФормы.ТоварыАдресноеХранение.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры

Процедура ТоварыПоМестамХраненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	
	Если НоваяСтрока И ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
		СкладДляПодстановки = Склад; //+++ 17.01.2014 ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		Если ЗначениеЗаполнено(СкладДляПодстановки) и СкладДляПодстановки.АдресноеХранение 
			и ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    =  СкладДляПодстановки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//// +++ 27.12.2012 
// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "ТоварыАдресноеХранение"
//
Процедура КоманднаяПанельАдресноеХранениеИзТерминалаСбораДанных(Кнопка)
Перем Ответ, Данные, ВремТовар, ВремЕдиница;

	//+++ переподключение принудительное - всегда!
			глТорговоеОборудование.ОтключитьОборудование();
		    глТорговоеОборудование.ПодключитьОборудование();

	
	Если глТорговоеОборудование = Неопределено или глТорговоеОборудование.млТерминал.Количество() = 0 Тогда
		Предупреждение("Терминал сбора данных не подключен!");
	Иначе
		Если глТорговоеОборудование.млТерминал.Количество() = 1 Тогда

			РезультатВыбора = глТорговоеОборудование.млТерминал[0];

		Иначе

			СписокТерминаловСбораДанных = Новый СписокЗначений;
			Для Каждого ТерминалСбораДанных из глТорговоеОборудование.млТерминал Цикл
				СписокТерминаловСбораДанных.Добавить(ТерминалСбораДанных, ТерминалСбораДанных.Модель);
			КонецЦикла;
			РезультатВыбора = СписокТерминаловСбораДанных.ВыбратьЭлемент("Выберите терминал сбора данных");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			РезультатВыбора = РезультатВыбора.Значение;

		КонецЕсли;
		
			///Плотников Терминалы Моторолла
		
		Если РезультатВыбора.Модель = Справочники.ТорговоеОборудование.НайтиПоНаименованию("КПК под управлением «АТОЛ: Mobile Logistics»") Тогда
			
			Ответ = глТорговоеОборудование.ТСДЗагрузитьДанные(Данные);
			
					
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				
				Если стрДлина(СтрокаДанных.штриХкод)=13 тогда //16.11.2015  - поиск по штрихКоду
				    если лев(СтрокаДанных.штриХкод,5) = "05000" тогда // "наш" код = префикс + код товара + КС
				        Код = сред(СтрокаДанных.штриХкод, 6,7);
				    иначе	
				        Код = "9999999"; // не существующий код!
				    КонецЕсли; 
			    иначе
				    Код = ЛЕВ(СтрокаДанных.штриХкод,7);
				КонецЕсли;
				
				Если стрДлина(СтрокаДанных.Ячейка)>6 и лев(СтрокаДанных.Ячейка,1) = "1" тогда // "обрезаем" префикс для 5000
				    АдресХ = сред(СтрокаДанных.Ячейка,2,6);  
			    Иначе //как есть но в поле Адреса
				    АдресХ = лев(СтрокаДанных.Ячейка,7);
			    КонецЕсли;
				
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(Код);  //+++
				
				//09.11.2015 - Аксессуары
				Если НЕ ЗначениеЗаполнено(ВремТовар) тогда
					ВремТоварТабл = новый ТаблицаЗначений;
					глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТоварТабл);
					Если ВремТоварТабл.Количество()>0 тогда
						ВремТовар = ВремТоварТабл[0].Номенклатура;
					КонецЕсли;	

					#Если Клиент тогда 
					Если ЗначениеЗаполнено(ВремТовар) тогда 
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" Найден товар: "+строка(ВремТовар.Код)+" "+строка(ВремТовар), СтатусСообщения.Информация);
					иначе	
						Сообщить("По ШК: "+СокрЛП(СтрокаДанных.Штрихкод)+" НЕ Найден товар!", СтатусСообщения.Внимание);
					КонецЕсли;	
					#КонецЕсли	
				КонецЕсли;	
	
				Если ЗначениеЗаполнено(ВремТовар) Тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(АдресХ);
					Если НЕ ЗначениеЗаполнено(Адрес) Тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+АдресХ, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
			
		Иначе  ///Продолжение  Огородников

		
		нетАдреса = ЛОЖЬ; //+++ это ВАЖНО !!!
		Ответ = глТорговоеОборудование.ЗагрузитьДанныеИзТерминалаСбораДанных(РезультатВыбора, Данные, нетАдреса);
		
		Если Не ПустаяСтрока(Ответ) Тогда
			Предупреждение(Ответ);
		ИначеЕсли Данные.Количество() = 0 Тогда
			Предупреждение("Из терминала сбора данных не загружено ни одного товара...");
		Иначе
			
			i=0;    
			пустойСклад = справочники.Склады.ПустаяСсылка();
	//--------------------------------------------------------------------------------------------------------------------------		
			Для Каждого СтрокаДанных Из Данные Цикл
				i=i+1;
				//+++ Если глТорговоеОборудование.ПолучитьТоварПоШтрихкоду(СтрокаДанных.Штрихкод, ВремТовар) Тогда
				ВремТовар = Справочники.Номенклатура.НайтиПоКоду(СтрокаДанных.Код);  //+++
				
				Если ЗначениеЗаполнено(ВремТовар) тогда
					
					//+++ 24.12.2012
					Адрес = справочники.АдресаХранения.НайтиПоКоду(СтрокаДанных.Адрес);
					Если НЕ ЗначениеЗаполнено(Адрес) тогда
						сообщить(строка(i)+" строка - Нет Адреса Хранения: "+СтрокаДанных.Адрес, СтатусСообщения.Внимание);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура();
					СтруктураОтбора.Вставить("Номенклатура", ВремТовар);
					СтруктураОтбора.Вставить("АдресХранения",Адрес);
					
					СтрокаТабличнойЧасти = НайтиСтрокуТабЧасти(ТоварыАдресноеХранение, СтруктураОтбора);  //+++
					
					Если СтрокаТабличнойЧасти <> Неопределено Тогда
 						// Нашли, увеличиваем количество в первой найденной строке.
						СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаДанных.Количество;
 					Иначе
 						// Не нашли - добавляем новую строку.
						СтрокаТабличнойЧасти = ТоварыАдресноеХранение.Добавить();
						СтрокаТабличнойЧасти.Номенклатура           = ВремТовар;  //+++
						
						СтрокаТабличнойЧасти.Количество             = СтрокаДанных.Количество;
						
						СтрокаТабличнойЧасти.АдресХранения			= Адрес;
						СтрокаТабличнойЧасти.Склад					= ?(ЗначениеЗаполнено(Адрес), Адрес.Владелец, пустойСклад );
						
						// Выполнить общие действия для всех документов при изменении номенклатуры.
						ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

					КонецЕсли;

					ЭлементыФормы.ТоварыАдресноеХранение.ТекущаяСтрока  = СтрокаТабличнойЧасти;
				КонецЕсли;
			КонецЦикла;

			Ответ = Вопрос("Очистить память терминала сбора данных?", РежимДиалогаВопрос.ДаНет,60,КодВозвратаДиалога.Да,"Очистка ТСД");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицыТерминала = неопределено;
				Если глТорговоеОборудование = Неопределено 
					или глТорговоеОборудование.млТерминал.Количество()>0 тогда
					СтрокаТаблицыТерминала = новый Структура; //+++ 09.01.2012
					СтрокаТаблицыТерминала.Вставить("Объект" , глТорговоеОборудование.млТерминал[0].Объект );
					СтрокаТаблицыТерминала.Вставить("НомерЛУ", глТорговоеОборудование.млТерминал[0].НомерЛУ);
					СтрокаТаблицыТерминала.Вставить("Модель",  глТорговоеОборудование.млТерминал[0].Модель);
				//иначе // ТСД не подключен.	
				КонецЕсли;
				Ответ = глТорговоеОборудование.ОчиститьПамятьТерминалаСбораДанных(СтрокаТаблицыТерминала);
				Если Не ПустаяСтрока(Ответ) Тогда
					Предупреждение(Ответ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		КонецЕсли; //Плотников АТОЛ
	КонецЕсли;

КонецПроцедуры

Процедура Перевозчик2НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка= ЛОЖЬ;
	ФормаВыбораКонтрагента=Справочники.Контрагенты.ПолучитьФормуВыбора();
	ВыбКонтрагент=ФормаВыбораКонтрагента.ОткрытьМодально();
	Перевозчик2=?(ЗначениеЗаполнено(ВыбКонтрагент),СокрЛП(ВыбКонтрагент.НаименованиеПолное),"");
КонецПроцедуры

//+++( 13.02.13 SAO
// процедура исправляет ТЧТовары по заполненной части Адр.Хранения
// 1. находит в Адресах: Номенклатура - Количество
// 2. сравнивает их с Номенклатура - Количество в ТЧТовары
// и делает следуещее:
//    2-0) СкладT=СкладА  - ничего не исправляем... ошибка количества - обнаружится при проверка после полного цикла...
//    2а) КолА>=КолТ и СкладT<>СкладА  -> СкладТ = 5000 
//    2б) КолА<КолТ  и СкладT<>СкладА  -> меняем количество в строке КолТ=КолТ-КолА на складе СкладT
//					   и добавляем такую же строку, с параметрами Склад = 5000, Количество=КолА 
//
Процедура КоманднаяПанельТоварыВыполнитьСоответствиеТоварыАдреса(Кнопка)
	Если ТоварыАдресноеХранение.Количество()=0 тогда
		Предупреждение("Не заполнена таблица ""Адресное хранение"".");
		возврат;
	КонецЕсли;
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

Запрос = Новый Запрос;

//+++ 10.04.2013 - берем сразу из ТабЧастей! - быстрее и рабтоает даже если документ не записан!
  Запрос.Текст = "ВЫБРАТЬ
                 |	ВТ_А.Номенклатура КАК Номенклатура,
                 |	ВТ_А.Количество КАК Количество
                 |ПОМЕСТИТЬ ВТ_А
                 |ИЗ
                 |	&ВТ_А КАК ВТ_А
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ
                 |	ВТ_Т.Количество КАК Количество,
                 |	ВТ_Т.Номенклатура КАК Номенклатура,
                 |	ВТ_Т.Склад КАК Склад,
                 |	ВТ_Т.НомерСтроки КАК НомерСтроки
                 |ПОМЕСТИТЬ ВТ_Т
                 |ИЗ
                 |	&ВТ_Т КАК ВТ_Т
                 |;
                 |
                 |////////////////////////////////////////////////////////////////////////////////
                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
                 |	ЕСТЬNULL(ВТ_Т.Номенклатура, ВТ_А.Номенклатура) КАК Номенклатура,
                 |	ЕСТЬNULL(ВТ_Т.НомерСтроки, 0) КАК НомерСтрокиТ,
                 |	ВТ_Т.Склад КАК СкладТ,
                 |	ЕСТЬNULL(ВТ_Т.Количество, 0) КАК КоличествоТ,
                 |	ЕСТЬNULL(ВТ_А.Количество, 0) КАК КоличествоА
                 |ИЗ
                 |	ВТ_А КАК ВТ_А
                 |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                 |			ВТ_Т1.Количество КАК Количество,
                 |			ВТ_Т1.Номенклатура КАК Номенклатура,
                 |			ВТ_Т1.Склад КАК Склад,
                 |			ВТ_Т1.НомерСтроки КАК НомерСтроки
                 |		ИЗ
                 |			ВТ_Т КАК ВТ_Т1) КАК ВТ_Т
                 |		ПО ВТ_А.Номенклатура = ВТ_Т.Номенклатура
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	НомерСтрокиТ
                 |ИТОГИ
                 |	МИНИМУМ(НомерСтрокиТ),
                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СкладТ),
                 |	СУММА(КоличествоТ),
                 |	МАКСИМУМ(КоличествоА)
                 |ПО
                 |	Номенклатура
                 |АВТОУПОРЯДОЧИВАНИЕ";
 табЗначА = ТоварыАдресноеХранение.Выгрузить();
 табЗначА.Свернуть("Номенклатура", "Количество");
Запрос.УстановитьПараметр("ВТ_А", табЗначА);

табЗначТ = Товары.Выгрузить();
Запрос.УстановитьПараметр("ВТ_Т", табЗначТ );

Результат = Запрос.Выполнить();
ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

складА = ТоварыАдресноеХранение[0].Склад; // хотя бы 1 строка обязательно есть...

//----------------------осн.цикл----------------------------
Пока ВыборкаНоменклатура.Следующий() Цикл

	ВсегоТовараТ = ВыборкаНоменклатура.КоличествоТ; // всего со всех складов!
	ВсегоТовараA = ВыборкаНоменклатура.КоличествоА; // всего по адресам 5000
	КолТА=0;
	ВыборкаСклады = ВыборкаНоменклатура.Выбрать();
	// -------------внутренний цикл по строкам Складов-----------
	Пока ВыборкаСклады.Следующий() Цикл
		КолТ = ВыборкаСклады.КоличествоТ; // Количество товара, отгружаемого со СкладаТ
		
	//    2-0) СкладT=СкладА  - ничего не исправляем... ошибка количества - обнаружится при проверка после полного цикла...
		Если ВыборкаСклады.СкладТ = складА тогда 
			    ВсегоТовараТ = ВсегоТовараТ - КолТ;
				ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
				продолжить; // склад уже 5000...
			КонецЕсли;
			Если ВсегоТовараA <=0 тогда // все кол-во по адресам пере-проверено
				Прервать;
			КонецЕсли;	
			Если ВыборкаСклады.НомерСтрокиТ=0 тогда
				Сообщить("В Таб.части ""Адресное хранение"" есть номенклатура: "+строка(ВыборкаСклады.Номенклатура.Код)+" - "+строка(ВыборкаСклады.Номенклатура)+"- которой нет в Таб.Части ""Товары""!",СтатусСообщения.Внимание );
				Продолжить;
			КонецЕсли;
			
	стрТов = Товары[ВыборкаСклады.НомерСтрокиТ-1];
		//-----------проверка условий изменения склада и количества--------------------
//    2а) КолА>КолТ и СкладT<>СкладА  -> СкладТ = 5000 
	Если ВсегоТовараA>=КолТ тогда  
	
	сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменен склад "+строка(стрТов.Склад)+" на "+строка(СкладА), СтатусСообщения.Информация);
	стрТов.Склад = СкладА;
	
//    2б) КолА<КолТ  и СкладT<>СкладА  -> меняем количество в строке КолТ=КолТ-КолА на складе СкладT
//					   и добавляем такую же строку, с параметрами Склад = 5000, Количество=КолА 
	ИначеЕсли ВсегоТовараA<КолТ тогда
		
		КолТА=КолТА + (КолТ-ВсегоТовараA); // сумма расхождений
		
		  сообщить("В строке № "+строка(ВыборкаСклады.НомерСтрокиТ)+" - изменено количество: "+строка(КолТ)+" на "+строка(КолТ-ВсегоТовараA)+" и пересчитаны сумма и сумма НДС.", СтатусСообщения.Информация);
	      стрТов.Количество = (КолТ-ВсегоТовараA); // разность на том же складе!
		  
		  РассчитатьСуммуТабЧасти(стрТов, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов, ЭтотОбъект);

		  КолТ = ВсегоТовараA;
		  
		  стрТов2 =Товары.Добавить();
		  ЗаполнитьЗначенияСвойств(стрТов2, стрТов); // все как в строке тов
		  стрТов2.Склад = складА;//на 5000 будет количество: ВсегоТовараA 
		  стрТов2.Количество = ВсегоТовараA;
		  РассчитатьСуммуТабЧасти(стрТов2, ЭтотОбъект); //+++ 10.04.2013  - пересчет сумм обязателен!
		  РассчитатьСуммуНДСТабЧасти(стрТов2, ЭтотОбъект);
		  сообщить("Добавлена новая строка № "+строка(стрТов2.НомерСтроки)+" количество ="+строка(ВсегоТовараA)+", склад = "+строка(складА), СтатусСообщения.Информация);
	  КонецЕсли;
	  
	    ВсегоТовараТ = ВсегоТовараТ - КолТ;
		ВсегоТовараA = ВсегоТовараA - КолТ; // остаток "нераспределенного" количества адр.хранения также уменьшается!
	КонецЦикла;
	
	Если КолТА<>0 или ВсегоТовараA<>0 тогда
		Сообщить("Расхождение количества товаров в Таб.части ""Товары"" и ""Адресное хранение"" по складу: "+строка(СкладА)+" составляет: "+Строка(КолТА-ВсегоТовараA)+" шт.", СтатусСообщения.Внимание);
	КонецЕсли;

КонецЦикла;

Предупреждение("Обработка выполнена", 30);
	
КонецПроцедуры

Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)
		ОбработкаВыгрузки = Обработки.ВыгрузкаДанныхCommerceML.Создать();
		ОбработкаВыгрузки.ВыгрузитьИзДокумента(Ссылка);
КонецПроцедуры

Процедура ТоварыАдресноеХранениеАдресХраненияПриИзменении(Элемент)
	
	текСтр = ЭлементыФормы.ТоварыАдресноеХранение.ТекущиеДанные;
	текСтр.Склад = текСтр.АдресХранения.Владелец; // Склад и АдресХранения.Склад всегда должны быть одинаковые!

КонецПроцедуры

Процедура Надпись2Нажатие(Элемент)
	форма = РегистрыСведений.ДанныеДляУчетаОтгрузок.ПолучитьФормуСписка();
	форма.РегистрСведенийСписок.отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	форма.РегистрСведенийСписок.отбор.Контрагент.Значение = Контрагент;
	форма.РегистрСведенийСписок.отбор.Контрагент.Использование = Истина;
	
	форма.РегистрСведенийСписок.отбор.НомерРеализации.ВидСравнения = ВидСравнения.Равно;
	форма.РегистрСведенийСписок.отбор.НомерРеализации.Значение = Номер;
	форма.РегистрСведенийСписок.отбор.НомерРеализации.Использование = Истина;
	
	форма.РегистрСведенийСписок.отбор.Период.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	форма.РегистрСведенийСписок.отбор.Период.Значение = Дата;
	форма.РегистрСведенийСписок.отбор.Период.Использование = Истина;

	форма.ОткрытьМодально();
	
	//если статус изменился... еще раз смотрим	
	ПоказатьСтатусПечДокументов();
КонецПроцедуры

//+++ 16.03.2015 - должна быть 1 запись на 1 реализацию на дату самой реализации
Процедура ПоказатьСтатусПечДокументов()
Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	ДанныеДляУчетаОтгрузокСрезПоследних.Статус
	               |ИЗ
	               |	РегистрСведений.ДанныеДляУчетаОтгрузок КАК ДанныеДляУчетаОтгрузокСрезПоследних
	               |ГДЕ
	               |	ДанныеДляУчетаОтгрузокСрезПоследних.Контрагент = &Контрагент
	               |	И ДанныеДляУчетаОтгрузокСрезПоследних.НомерРеализации = &НомерРеализации
	               |	И ДанныеДляУчетаОтгрузокСрезПоследних.Период = &Период
	               |";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерРеализации", Номер);
	Запрос.УстановитьПараметр("Период", НачалоДня(Дата));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		ЭлементыФормы.Надпись2.Заголовок = "Статус печ. документов: "+?(Строка(Выборка.Статус)="","Не определен",Строка(Выборка.Статус));
		ЭлементыФормы.Надпись2.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		
		если Выборка.Статус=перечисления.СтатусыДокументовОтгрузки.Закрыт тогда
			ЭлементыФормы.Надпись2.ЦветТекста = webЦвета.ТемноСерый;
		ИначеЕсли Выборка.Статус=перечисления.СтатусыДокументовОтгрузки.Отправка тогда
			ЭлементыФормы.Надпись2.ЦветТекста = webЦвета.Синий;
		ИначеЕсли Выборка.Статус=перечисления.СтатусыДокументовОтгрузки.Получение тогда
			ЭлементыФормы.Надпись2.ЦветТекста = webЦвета.ТемноСиний;
		ИначеЕсли Выборка.Статус=перечисления.СтатусыДокументовОтгрузки.Изменен тогда
			ЭлементыФормы.Надпись2.ЦветТекста   = ЦветаСтиля.ЦветТекстаФормы;
			ЭлементыФормы.Надпись2.ЦветФона     = webЦвета.Золотой;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Надпись2.Заголовок = "Данные по печатным документам - отсутствуют.";
		ЭлементыФормы.Надпись2.ЦветТекста   = ЦветаСтиля.ЦветТекстаФормы;
		ЭлементыФормы.Надпись2.ЦветФона     = ЦветаСтиля.ЦветФонаФормы;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница = элементыФормы.ОсновнаяПанель.Страницы.ДанныеТТН тогда
		ПоказатьСтатусПечДокументов();//+++ 16.03.2015
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыВыгрузкаСФ(Кнопка)
	////	Сообщить(строка(ТекущаяДата())+"Загрузка началась. ");

	//Если ЭтоНовый() и этотОбъект.Модифицированность() Тогда
	//	СообщитьОбОшибке("Перед выгрузкой данный документ необходимо записать");
	//КонецЕсли;	
	//НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	//Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
	//	НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	//КонецЕсли;	
	//Обработка = Обработки[НаименованиеОбработки].Создать();
	//
	//удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");

	//Обработка.РежимОбмена = "Выгрузка";
	//
	////ФайлПравилОбмена="c:\ПравилаОбменаРеализациями_ЯШТ_УТ_БП_реализация_.xml"; // см.    \\terminal\c$\	
	////Обработка.ИмяФайлаПравилОбмена = ФайлПравилОбмена;
	////04.09.14 Смирнов, правила берем из файла
	//УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	//ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	//МакетПравилОбмена = ПолучитьОбщийМакет("ОбменУТБП");//ПланыОбмена.ОбменУТ_БП.ПолучитьМакет("ПравилаОбменаСБухгалтерией");
	//МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	//
	//Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	//
	//Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	//Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	//Обработка.ЗапоминатьЗагруженныеОбъекты = Истина;
	//Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Истина;
	////
	////
	////Обработка.ДатаНачала = НачалоДня(ЭтотОбъект.Дата);
	////Обработка.ДатаОкончания = КонецДня(ЭтотОбъект.Дата);
	//
	//Обработка.ВыгружатьТолькоРазрешенные = Истина;
	//Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";
	//Обработка.ИмяСервераИнформационнойБазыДляПодключения = "server"; //01.07.2013
	//Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = "v82ib_yst_bp";
	//Обработка.ПользовательИнформационнойБазыДляПодключения = "Робот (центр - номенклатура)";
	//Обработка.ПарольИнформационнойБазыДляПодключения = "09876";
	//Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	//Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	//Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	//Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,
	////Обработка.ИмяФайлаОбмена= ИмяФайлаОбмена;
	//// 1 - снимать регистрацию
	////Обработка.ИмяФайлаОбмена ="C:\Базы 1С\Обмен.xml"; 

	//Обработка.ЗагрузитьПравилаОбмена();
	//Список = Новый СписокЗначений();
	//Список.Добавить(ЭтотОбъект.Ссылка);
	//Обработка.Параметры.Вставить("ОбъектДляВыгрузки",Список);
	//Обработка.ВыполнитьВыгрузку();
	//
	//Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
	//Попытка
	//	УПД = Новый ХранилищеЗначения(Новый ДвоичныеДанные(КаталогВременныхфайлов()+Ссылка.Номер+".mxl"));
	//	КонтрольСумма = СуммаДокумента;
	//	КонтрольКоличество = Товары.Итог("Количество");
	//	Записать(РежимЗаписиДокумента.Запись);
	//Исключение
	//КонецПопытки;
	//
	//ТабДок = Новый ТабличныйДокумент();
	//попытка
	//	ТабДок.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
	//	табДок.АвтоМасштаб = Истина;
	//	Табдок.ОтображатьСетку = Ложь;
	//	ТабДок.ТолькоПросмотр = Истина;
	//	Макет = ПолучитьОбщийМакет("ШтрихКодДляУПД");
	//	ОбластьШтриха = Макет.ПолучитьОбласть("Штрих");
	//	Рисунок = ОбластьШтриха.Рисунки.Штрихкод;
	//	Тд = Новый ТабличныйДокумент;
	//	ОбШтрихКод=ОбластьШтриха.Рисунки.Штрихкод.Объект ;
	//	ОбШтрихКод.ТипКода = 4; 
	//	ОбШтрихКод.Сообщение = СформироватьШКРеализации(Ссылка,"8");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
	//	ОбШтрихКод.ОтображатьТекст = Ложь;
	//	
	//	Тд.Вывести(ОбластьШтриха);
	//	ТД.Вывести(ТабДок);
	//	ТД.Рисунки.D1.Верх = ТД.Рисунки.ШтрихКод.Верх;   
	//	ТД.Рисунки.D1.Лево = ТД.Рисунки.ШтрихКод.Лево;   
	//	тд.УдалитьОбласть(ТД.Область("Штрих"),ТипСмещенияТабличногоДокумента.ПоВертикали);   
	//	тд.АвтоМасштаб = Истина;
	//	Тд.ОтображатьСетку = Ложь;
	//	Тд.ТолькоПросмотр = Истина;
	//	тд.ОтображатьЗаголовки = ложь;   
	//	ТД.Показать();
	//исключение
	//конецпопытки;
ПеренестиДокиВБухгалтерию();
ТабДок = Новый ТабличныйДокумент();     //Плотников - не показывать
	попытка
		Если  (Ссылка.Дата<Дата('20160501000000')или Найти(Ссылка.ДоговорКонтрагента.Наименование,"*")<>0)  тогда
			ТабДокСФ = Новый ТабличныйДокумент();
			ТабДокСФ.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
			табДокСФ.АвтоМасштаб = Истина;
			ТабдокСФ.ОтображатьСетку = Ложь;
			ТабДокСФ.ТолькоПросмотр = Истина;
			ТабДокСФ.Показать();
		иначе
			ТабДок.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
			табДок.АвтоМасштаб = Истина;
			Табдок.ОтображатьСетку = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			Макет = ПолучитьОбщийМакет("ШтрихКодДляУПД");
			ОбластьШтриха = Макет.ПолучитьОбласть("Штрих");
			Рисунок = ОбластьШтриха.Рисунки.Штрихкод;
			Тд = Новый ТабличныйДокумент;
			ОбШтрихКод=ОбластьШтриха.Рисунки.Штрихкод.Объект ;
			ОбШтрихКод.ТипКода = 4; 
			ОбШтрихКод.Сообщение = СформироватьШКРеализации(Ссылка,"8");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
			ОбШтрихКод.ОтображатьТекст = Ложь;
			
			Тд.Вывести(ОбластьШтриха);
			ТД.Вывести(ТабДок);
			ТД.Рисунки.D1.Верх = ТД.Рисунки.ШтрихКод.Верх;   
			ТД.Рисунки.D1.Лево = ТД.Рисунки.ШтрихКод.Лево;   
			тд.УдалитьОбласть(ТД.Область("Штрих"),ТипСмещенияТабличногоДокумента.ПоВертикали);   
			тд.АвтоМасштаб = Истина;
			Тд.ОтображатьСетку = Ложь;
			Тд.ТолькоПросмотр = Истина;
			тд.ОтображатьЗаголовки = ложь;   
			ТД.Показать();
			
		КонецЕсли;
	исключение
	конецпопытки;

КонецПроцедуры

Процедура ДействияФормыДопБух(Кнопка)
	
	Если ЭтоНовый() и этотОбъект.Модифицированность() Тогда
		СообщитьОбОшибке("Перед выгрузкой данный документ необходимо записать");
	КонецЕсли;	
	
	Если ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ФормулаАвтоПлюс Тогда
		
		ЗаменитьФорму = ложь;
		ЛокПолноеИмяФайла = КаталогВременныхФайлов()+Номер+".mxl";
		пф = УПД.Получить();
		Если типЗнч(пф) = тип("ДвоичныеДанные") тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, "Открыть существующую");
			Кнопки.Добавить(КодВозвратаДиалога.Нет, "Заменить на новую");
			Ответ = Вопрос("В базе уже есть печатная форма документа. Показать её или заменить на новую?", Кнопки, 0);
			Если ответ = КодВозвратаДиалога.Да тогда 
				пф.Записать(ЛокПолноеИмяФайла);
				ТабДок = Новый ТабличныйДокумент();
				ТабДок.Прочитать(КаталогВременныхфайлов()+Номер+".mxl");
				табДок.АвтоМасштаб = Истина;
				Табдок.ОтображатьСетку = истина;
				ТабДок.ТолькоПросмотр = Истина;
				ТабДок.Показать();
			иначе
				ЗаменитьФорму = истина;
			КонецЕсли;
		иначе
			ЗаменитьФорму = истина;
		КонецЕсли;
		
		Если ЗаменитьФорму тогда
			удалитьфайлы(КаталогВременныхФайлов(),"*.mxl");
			ВыборкаУзлов = ПланыОбмена.ПланОбменаУТ_БП_ФАП.Выбрать();
			Пока ВыборкаУзлов.Следующий() Цикл
				Если ВыборкаУзлов.Ссылка = ПланыОбмена.ПланОбменаУТ_БП_ФАП.ЭтотУзел() Тогда
					Продолжить;
				Иначе
					УзелОбъект = ВыборкаУзлов.Ссылка.ПолучитьОбъект();
					УзелОбъект.ВыполнитьОбменУТФАП(ВыборкаУзлов.Ссылка, ЭтотОбъект.Ссылка);
				КонецЕсли;
			КонецЦикла;
			Сообщить(строка(ТекущаяДата())+" Загрузка окончена.");
			ТабДок = Новый ТабличныйДокумент();
			попытка
				НомерФормулы ="00000"+ Формат(Ссылка.НомерФормулаАвто, "ЧЦ=6; ЧВН=; ЧГ=0");
				имяФ = КаталогВременныхфайлов()+НомерФормулы+".mxl";
				
				УПД = Новый ХранилищеЗначения(Новый ДвоичныеДанные(имяФ));
				КонтрольСумма = СуммаДокумента;
				КонтрольКоличество = Товары.Итог("Количество");
				Записать(РежимЗаписиДокумента.Запись);
				
				ТабДок.Прочитать(имяФ);
				табДок.АвтоМасштаб = Истина;
				Табдок.ОтображатьСетку = Ложь;
				ТабДок.ТолькоПросмотр = Истина;
				ТабДок.Показать();
			исключение
			конецпопытки;
		КонецЕсли;
		
	ИначеЕсли ДоговорКонтрагента.ТипДоговора = справочники.ТипыДоговоров.ШинтрейдЯрославль Тогда
		ВыгрузитьДанныеВБухПолучитьПечФормуСчФактурыШТЯ();
	конецЕсли;	

КонецПроцедуры

Процедура КоманднаяПанельАдресноеХранениеИзТоваров(Кнопка)
	
	Если ЭтоНовый() или ЭтотОбъект.Модифицированность() тогда
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Перед выполнением обработки требуется записать документ. Выполнить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Предупреждение("Обработка отменена!", 10);
		    Возврат;
		иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТоварыАдресноеХранение.Количество()>0 тогда
		Если Вопрос("Таблица ""Адреса хранения"" не пустая!
			|Очистить таблицу перед заполненением?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да тогда
		ТоварыАдресноеХранение.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	                |	ПеремещениеТоваровТовары.Склад
	                |ИЗ
	                |	Документ.РеализацияТоваровУслуг.Товары КАК ПеремещениеТоваровТовары
	                |ГДЕ
	                |	ПеремещениеТоваровТовары.Склад.АдресноеХранение
	                |	И ПеремещениеТоваровТовары.Ссылка = &Ссылка
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПеремещениеТоваровТовары.Номенклатура,
	                |	ПеремещениеТоваровТовары.Склад";
	 
	 Запрос.УстановитьПараметр("Ссылка", Ссылка);
	 
	 Результат = Запрос.Выполнить();
	 ТоварыАдресноеХранение.Загрузить(  Результат.Выгрузить() );
	 Если ТоварыАдресноеХранение.Количество()=0 тогда
		 Предупреждение("Нет складов адресного хранения в таблице ""Товары"".",30);
	 КонецЕсли;
	 

КонецПроцедуры

//Адиянов  20162112
//Процедура заполняет колонку Код ТН ВЭД
Процедура ПоказатьКодТНВЭД(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) 

	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ЯчейкиСтрокиТабПоля.КодТНВЭД.УстановитьТекст(Номенклатура.КодТНВЭД);
	Иначе
		ЯчейкиСтрокиТабПоля.КодТНВЭД.УстановитьТекст("");
	КонецЕсли;
	
КонецПроцедуры // ПоказатьКодТНВЭД()

Процедура ИнициироватьПравилаОбмена(Обработка, ИмяПравилОбмена, КаталогВремФайл)
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВремФайл + УникальныйИдентификатор + ".xml";
	
	МакетПравилОбмена = ПолучитьОбщийМакет(ИмяПравилОбмена);
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
КонецПроцедуры // ИнициироватьПравилаОбмена()

Функция ПолучитьОбработкуОбмена(ИмяСервераИнформационнойБазыДляПодключения, ИмяИнформационнойБазыНаСервереДляПодключения, КаталогИнформационнойБазыДляПодключения, ТипИнформационнойБазыДляПодключения, КаталогВремФайл)
	
	НаименованиеОбработки="УниверсальныйОбменДаннымиXMLv2";
	Если Метаданные.Обработки.Найти("УниверсальныйОбменДаннымиXMLv2") = Неопределено Тогда
		НаименованиеОбработки="УниверсальныйОбменДаннымиXML";
	КонецЕсли;	
	Обработка = Обработки[НаименованиеОбработки].Создать();
	Обработка.РежимОбмена = "Выгрузка";
	
	удалитьфайлы(КаталогВремФайл,"*.mxl");
	
	ИнициироватьПравилаОбмена(Обработка, "ОбменУТШТЯ", КаталогВремФайл);
	
	Обработка.ЗагружатьДанныеВРежимеОбмена                               = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей                          = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты                               = Истина;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов                     = Истина;
	Обработка.ВыгружатьТолькоРазрешенные                                 = Истина;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения            = "V83";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения                 = ИмяСервераИнформационнойБазыДляПодключения;
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения               = ИмяИнформационнойБазыНаСервереДляПодключения;
	Обработка.КаталогИнформационнойБазыДляПодключения                    = КаталогИнформационнойБазыДляПодключения;
	Обработка.ПользовательИнформационнойБазыДляПодключения               = "Робот (центр - номенклатура)";
	Обработка.ПарольИнформационнойБазыДляПодключения                     = "09876";
	Обработка.ТипИнформационнойБазыДляПодключения                        = ТипИнформационнойБазыДляПодключения;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения      = Ложь;
	Обработка.НепосредственноеЧтениеВИБПриемнике                         = Истина;
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; // 0 - не снимать регистрацию,
	
	Обработка.ЗагрузитьПравилаОбмена();
	
	Возврат Обработка;
	
КонецФункции // ПолучитьОбработкуОбмена()

Процедура ВыгрузитьДанныеВБухПолучитьПечФормуСчФактурыШТЯ()
	
	КаталогВремФайл = КаталогВременныхфайлов();
	
	РежимОтладки = Ложь;
	Если НЕ РежимОтладки Тогда
		ИмяСервераИнформационнойБазыДляПодключения   = "delta:3041"; //"iisserver"; //"server:3541"; 
		ИмяИнформационнойБазыНаСервереДляПодключения = "v83ib_shintradeyar_bp";
		КаталогИнформационнойБазыДляПодключения      = "";
		ТипИнформационнойБазыДляПодключения          = Ложь;
	Иначе
		ИмяСервераИнформационнойБазыДляПодключения   = "";
		ИмяИнформационнойБазыНаСервереДляПодключения = "";
		КаталогИнформационнойБазыДляПодключения      = "C:\РАБОТА\ШинТрейдЯрославльБух\БазаШТЯ_Бух4";
		ТипИнформационнойБазыДляПодключения          = Истина;
	КонецЕсли;
	
	Обработка = ПолучитьОбработкуОбмена(ИмяСервераИнформационнойБазыДляПодключения, ИмяИнформационнойБазыНаСервереДляПодключения, КаталогИнформационнойБазыДляПодключения, ТипИнформационнойБазыДляПодключения, КаталогВремФайл);
	
	Список = Новый СписокЗначений();
	Список.Добавить(ЭтотОбъект.Ссылка);
	Обработка.Параметры.Вставить("ОбъектДляВыгрузки",Список);
	
	Обработка.ВыполнитьВыгрузку();
	
	Сообщить(строка(ТекущаяДата())+"Загрузка окончена. ");
	ТабДок = Новый ТабличныйДокумент();
	попытка
		НомерФормулы ="0000-"+ Формат(Ссылка.НомерФормулаАвто, "ЧЦ=6; ЧВН=; ЧГ=0");
		ТабДок.Прочитать(КаталогВремФайл+НомерФормулы+".mxl");
		табДок.АвтоМасштаб = Истина;
		Табдок.ОтображатьСетку = Ложь;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.Показать();
	исключение
	конецпопытки;
	
КонецПроцедуры // ВыгрузитьДанныеВБухПолучитьПечФормуСчФактурыШТЯ()

Процедура УстановитьДоступностьКнопокПечати()
	
	ЭлементыФормы.ДействияФормы.Кнопки.ВыгрузкаСФ.Доступность             = НЕ НеОтправлятьВБухгалтерию;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеПечать.Доступность = НЕ НеОтправлятьВБухгалтерию;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати.Доступность  = НЕ НеОтправлятьВБухгалтерию;
	Для Каждого ТекКнопка Из ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати.Кнопки Цикл
		ТекКнопка.Доступность = НЕ НеОтправлятьВБухгалтерию;
	КонецЦикла;
	Если не НеОтправлятьВБухгалтерию и ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаявкаНаБрак") тогда
	    ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПечатьУПДиЗаключений.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры // УстановитьДоступностьКнопокПечати()

Процедура НеОтправлятьВБухгалтериюПриИзменении(Элемент)
	
	УстановитьДоступностьКнопокПечати();
	
КонецПроцедуры

Процедура РаспределитьНажатие(Элемент)

форма = получитьФорму("ФормаРаспределенияБонуса",этаформа);
форма.суммаБонуса= Услуги.Итог("Сумма");
значениевыбора = Форма.открытьмодально();

КонецПроцедуры

Процедура КоманднаяПанельУслугиПечатьУПДиЗаключений(Кнопка)
	ПеренестиДокиВБухгалтерию();
	ТабДок = Новый ТабличныйДокумент();    
	попытка
		Если  (Ссылка.Дата<Дата('20160501000000')или Найти(Ссылка.ДоговорКонтрагента.Наименование,"*")<>0)  тогда
			ТабДокСФ = Новый ТабличныйДокумент();
			ТабДокСФ.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
			табДокСФ.АвтоМасштаб = Истина;
			ТабдокСФ.ОтображатьСетку = Ложь;
			ТабДокСФ.ТолькоПросмотр = Истина;
			ТабДокСФ.Показать();
		иначе
			ТабДок.Прочитать(КаталогВременныхфайлов()+Ссылка.Номер+".mxl");
			табДок.АвтоМасштаб = Истина;
			Табдок.ОтображатьСетку = Ложь;
			ТабДок.ТолькоПросмотр = Истина;
			Макет = ПолучитьОбщийМакет("ШтрихКодДляУПД");
			ОбластьШтриха = Макет.ПолучитьОбласть("Штрих");
			Рисунок = ОбластьШтриха.Рисунки.Штрихкод;
			Тд = Новый ТабличныйДокумент;
			ОбШтрихКод=ОбластьШтриха.Рисунки.Штрихкод.Объект ;
			ОбШтрихКод.ТипКода = 4; 
			ОбШтрихКод.Сообщение = СформироватьШКРеализации(Ссылка,"8");//XMLСтрока(ЭтотОбъект.Ссылка.УникальныйИдентификатор()); 
			ОбШтрихКод.ОтображатьТекст = Ложь;
			
			Тд.Вывести(ОбластьШтриха);
			ТД.Вывести(ТабДок);
			ТД.Рисунки.D1.Верх = ТД.Рисунки.ШтрихКод.Верх;   
			ТД.Рисунки.D1.Лево = ТД.Рисунки.ШтрихКод.Лево;   
			тд.УдалитьОбласть(ТД.Область("Штрих"),ТипСмещенияТабличногоДокумента.ПоВертикали);   
			тд.АвтоМасштаб = Истина;
			Тд.ОтображатьСетку = Ложь;
			Тд.ТолькоПросмотр = Истина;
			тд.ОтображатьЗаголовки = ложь;   
			ТД.Показать();
			
		КонецЕсли;
	исключение
	конецпопытки;
	// Печать заключения
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаявкаНаБрак") Тогда
		ЗаякаОб = Сделка.ПолучитьОбъект();
		имя = "Заключение краткое с суммой";
		Заключение = Справочники.ДополнительныеПечатныеФормы.НайтиПоНаименованию(имя);
		СсылкаВнешнейФормы = Справочники.ДополнительныеПечатныеФормы.ПолучитьСсылку(Заключение.УникальныйИдентификатор());		 
		ЗаякаОб.ПолучитьФорму("ФормаДокумента").Печать(СсылкаВнешнейФормы,,,);				
	КонецЕсли;  	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары             = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги             = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара     = ЭлементыФормы.ВозвратнаяТара.Колонки;