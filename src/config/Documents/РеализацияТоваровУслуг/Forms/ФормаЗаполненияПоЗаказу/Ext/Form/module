////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мКрасныйЦвет, мЦветФона, мЦветТекста, мЖирныйШрифт;

Перем мМногоСкладов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает/снимает флажки в заданном табличном поле.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура УстановитьСнятьФлажки(Пометка, ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		СтрокаТабличнойЧасти.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажки()

// Процедура устанавливает/снимает флажки для подчинения.
//
Процедура УстановитьСнятьФлажкиПодчинения(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		СтрокаПоСкладу.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажкиПодчинения()

// Процедура устанавливает/снимает флажки для группы.
//
Процедура УстановитьСнятьФлажкиГруппы(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ПометкаГруппы  = Пометка;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		Если СтрокаПоСкладу.Пометка И НЕ Пометка Тогда
			ПометкаГруппы = СтрокаПоСкладу.Пометка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу            = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	СтрокиПоСкладу[0].Пометка = ПометкаГруппы;

КонецПроцедуры // УстановитьСнятьФлажкиГруппы()

// Процедура обнуляет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле - обрабатываемое табличное поле.
//
Процедура ОбнулитьСтолбецДобавитьВДокумент(ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.ДобавитьВДокумент = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбнулитьСтолбецДобавитьВДокумент()

// Процедура заполняет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле       - обрабатываемое табличное поле.
//  ИмяСколбцаИсточника - столбец, данными которого будет заполняться столбец "Добавить в документ".
//
Процедура ЗаполнитьСтолбецДобавитьВДокумент(ТабличноеПоле, ИмяСколбцаИсточника)

	Если ТабличноеПоле = Услуги Тогда
		Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
			Если СтрокаТабличнойЧасти.Пометка Тогда
				СтрокаТабличнойЧасти.ДобавитьВДокумент = СтрокаТабличнойЧасти[ИмяСколбцаИсточника];
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
			Если СтрокаТабличнойЧасти.Пометка Тогда
				Если мМногоСкладов Тогда
					Если НЕ СтрокаТабличнойЧасти.МеткаОстаткиПоСкладу Тогда
						МожноОтгрузить                         = СтрокаТабличнойЧасти[ИмяСколбцаИсточника];
						СтрокаТабличнойЧасти.ДобавитьВДокумент = МожноОтгрузить;

						Если МожноОтгрузить <= 0 Тогда
							Продолжить;
						КонецЕсли;

						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
						СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
						СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",       Истина);

						СтрокиПоСкладу = ТабличноеПоле.НайтиСтроки(СтруктураПоиска);

						Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
							Если СтрокаПоСкладу.Пометка Тогда
								СвободныйОстаток = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.СвободныйОстаток), 0, СтрокаПоСкладу.СвободныйОстаток);
								РезервПоЗаказу   = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.РезервПоЗаказу),   0, СтрокаПоСкладу.РезервПоЗаказу);
								КолвоОстаток     = СвободныйОстаток + РезервПоЗаказу;
								КолвоДобавить    = Мин(МожноОтгрузить, КолвоОстаток);
								МожноОтгрузить   = МожноОтгрузить - КолвоДобавить;

								Если КолвоДобавить > 0 Тогда
									СтрокаПоСкладу.ДобавитьВДокумент = КолвоДобавить;
								КонецЕсли;

								Если МожноОтгрузить <= 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					СтрокаТабличнойЧасти.ДобавитьВДокумент = СтрокаТабличнойЧасти[ИмяСколбцаИсточника];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтолбецДобавитьВДокумент()

// Процедура обновляет реквизит "ДобавитьВДокумент" в табличной части
//
Процедура ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ВсегоДобавить  = 0;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		ВсегоДобавить  = ВсегоДобавить + СтрокаПоСкладу.ДобавитьВДокумент;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу                      = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	СтрокиПоСкладу[0].ДобавитьВДокумент = ВсегоДобавить;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЗначениеНеЗаполнено(Реализация) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		СообщитьОбОшибке("Формирование реализаций по заказу покупателя невозможно!", Отказ);
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	// Заполнить табличные части:

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реализация.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Товар",              Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Тара",               Перечисления.ТоварТара.Тара);
	Запрос.УстановитьПараметр("ЗаказПокупателя",    Реализация.Сделка);
	Запрос.УстановитьПараметр("Склад",              Реализация.Склад);
	Запрос.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",        Реализация.Организация);

	ЗапросПоСкладам = Новый Запрос;

	ЗапросПоСкладам.УстановитьПараметр("ДоговорКонтрагента", Реализация.ДоговорКонтрагента);
	ЗапросПоСкладам.УстановитьПараметр("ЗаказПокупателя",    Реализация.Сделка);
	ЗапросПоСкладам.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Если ПоказыватьТовары Тогда

		// Товары:
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	Ложь                                                  КАК МеткаОстаткиПоСкладу,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|	Неопределено                                          КАК Склад,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,
		|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,
		|	СУММА(ОстаткиРезерв.КоличествоОстаток)                КАК РезервПоЗаказу,
		|	СУММА(ОстаткиОрганизаций.КоличествоОстаток)           КАК ОстатокПоОрганизации,
		|	СУММА(ОстаткиНаСкладе.КоличествоОстаток)              КАК СвободныйОстаток,
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)>(СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ТОГДА (СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ИНАЧЕ СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить) КОНЕЦ КАК МожноОтгрузить,
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)>(СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ТОГДА (СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ИНАЧЕ СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить) КОНЕЦ КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
		|		ОстаткиЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьОтгрузить,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПокупателя = &ЗаказПокупателя
		|		                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.Номенклатура,
		|		ОстаткиЗаказ.ХарактеристикаНоменклатуры
		|
		|	) КАК ВнутреннийЗапрос
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // резервы
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(," + ?(мМногоСкладов, "", "Склад = &Склад И ") + "
		|	                                                  ДокументРезерва = &ЗаказПокупателя) КАК ОстаткиРезерв
		|ПО
		|	ВнутреннийЗапрос.Номенклатура                 = ОстаткиРезерв.Номенклатура
		|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиРезерв.ХарактеристикаНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // остатки орагнизаций
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Организация = &Организация) КАК ОстаткиОрганизаций
		|ПО
		|	ВнутреннийЗапрос.Номенклатура                 = ОстаткиОрганизаций.Номенклатура
		|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиОрганизаций.ХарактеристикаНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // реальные товары на складе за вычетом резервов и товаров к передаче
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиНаСкладе.Номенклатура,
		|		ОстаткиНаСкладе.ХарактеристикаНоменклатуры,
		|		ОстаткиНаСкладе.КоличествоОстаток
		|		- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
		|		- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК КоличествоОстаток
		|
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиНаСкладе
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиВРезерве
		|	ПО
		|		ОстаткиНаСкладе.Номенклатура                 = ОстаткиВРезерве.Номенклатура
		|		И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиВРезерве.ХарактеристикаНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиКПередаче
		|	ПО
		|		ОстаткиНаСкладе.Номенклатура                 = ОстаткиКПередаче.Номенклатура
		|		И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиКПередаче.ХарактеристикаНоменклатуры
		|
		|	) КАК ОстаткиНаСкладе
		|ПО
		|	ВнутреннийЗапрос.Номенклатура                 = ОстаткиНаСкладе.Номенклатура
		|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиНаСкладе.ХарактеристикаНоменклатуры
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.Номенклатура,
		|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры
		|";

		Товары = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл

			СтрокаТабличнойЧасти.МожноОтгрузить       = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.МожноОтгрузить),       0, СтрокаТабличнойЧасти.МожноОтгрузить);
			СтрокаТабличнойЧасти.ОстатокПоОрганизации = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ОстатокПоОрганизации), 0, СтрокаТабличнойЧасти.ОстатокПоОрганизации);
			СтрокаТабличнойЧасти.ДобавитьВДокумент    = ?(ЗначениеНеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент),    0, СтрокаТабличнойЧасти.ДобавитьВДокумент);

			СтрокаТабличнойЧасти.МожноОтгрузить       = ?(СтрокаТабличнойЧасти.МожноОтгрузить    > СтрокаТабличнойЧасти.ОстатокПоОрганизации, СтрокаТабличнойЧасти.ОстатокПоОрганизации, СтрокаТабличнойЧасти.МожноОтгрузить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент    = ?(СтрокаТабличнойЧасти.ДобавитьВДокумент > СтрокаТабличнойЧасти.ОстатокПоОрганизации, СтрокаТабличнойЧасти.ОстатокПоОрганизации, СтрокаТабличнойЧасти.ДобавитьВДокумент);

		КонецЦикла;

		Если мМногоСкладов Тогда

			ЗапросПоСкладам.Текст = "
			|ВЫБРАТЬ
			|	Истина                                               КАК Пометка,
			|	Истина                                               КАК МеткаОстаткиПоСкладу,
			|	ОстаткиНаСкладе.Номенклатура.Код                     КАК Код,
			|	ОстаткиНаСкладе.Номенклатура.Артикул                 КАК Артикул,
			|	ОстаткиНаСкладе.Номенклатура                         КАК Номенклатура,
			|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
			|	ОстаткиНаСкладе.Склад                                КАК Склад,
			|	0                                                    КАК Запланировано,
			|	0                                                    КАК ОсталосьОтгрузить,
			|	ОстаткиВРезерве.КоличествоОстаток                    КАК РезервПоЗаказу,
			|	0                                                    КАК ОстатокПоОрганизации,
			|	ОстаткиНаСкладе.КоличествоОстаток
			|	- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
			|	- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК СвободныйОстаток,
			|	0 КАК МожноОтгрузить,
			|	0 КАК ДобавитьВДокумент
			|
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ОстаткиНаСкладе
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ОстаткиВРезерве
			|ПО
			|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиВРезерве.Номенклатура
			|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиВРезерве.ХарактеристикаНоменклатуры
			|	И ОстаткиНаСкладе.Склад                      = ОстаткиВРезерве.Склад
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки КАК ОстаткиКПередаче
			|ПО
			|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиКПередаче.Номенклатура
			|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиКПередаче.ХарактеристикаНоменклатуры
			|	И ОстаткиНаСкладе.Склад                      = ОстаткиКПередаче.Склад
			|
			|ПРАВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
			|	                                              И ЗаказПокупателя = &ЗаказПокупателя
			|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
			|ПО
			|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиЗаказ.Номенклатура
			|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиЗаказ.ХарактеристикаНоменклатуры
			|
			|ГДЕ
			|	НЕ ОстаткиНаСкладе.Номенклатура ЕСТЬ NULL
			|";

			ТоварыНаСкладе = ЗапросПоСкладам.Выполнить().Выгрузить();
			ТоварыПоЗаказу = Товары.Скопировать();

			ТоварыНаСкладе.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Склад");

			Для Каждого СтрокаПоЗаказу ИЗ ТоварыПоЗаказу Цикл
				МожноОтгрузить = СтрокаПоЗаказу.МожноОтгрузить;

				Если МожноОтгрузить <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура",               СтрокаПоЗаказу.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);

				СтрокиПоСкладу = ТоварыНаСкладе.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
					СвободныйОстаток = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.СвободныйОстаток), 0, СтрокаПоСкладу.СвободныйОстаток);
					РезервПоЗаказу   = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.РезервПоЗаказу),   0, СтрокаПоСкладу.РезервПоЗаказу);
					КолвоОстаток     = СвободныйОстаток + РезервПоЗаказу;
					КолвоДобавить    = Мин(МожноОтгрузить, КолвоОстаток);
					МожноОтгрузить   = МожноОтгрузить - КолвоДобавить;

					Если КолвоДобавить > 0 Тогда
						СтрокаПоСкладу.ДобавитьВДокумент = КолвоДобавить;
					КонецЕсли;

					Если МожноОтгрузить <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			ЗагрузитьВТаблицуЗначений(ТоварыНаСкладе, Товары);
			Товары.Сортировать("Номенклатура, ХарактеристикаНоменклатуры, Склад");

		КонецЕсли;

	Иначе

		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Ложь;

	КонецЕсли;

	Если ПоказыватьТару Тогда

		// Возвратная тара:
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	Ложь                                                  КАК МеткаОстаткиПоСкладу,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	Неопределено                                          КАК Склад,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,
		|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,
		|	СУММА(ОстаткиОрганизаций.КоличествоОстаток)           КАК ОстатокПоОрганизации,
		|	СУММА(ОстаткиРезерв.КоличествоОстаток)                КАК РезервПоЗаказу,
		|	СУММА(ОстаткиНаСкладе.КоличествоОстаток)              КАК СвободныйОстаток,
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)>(СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ТОГДА (СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ИНАЧЕ СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить) КОНЕЦ КАК МожноОтгрузить,
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)>(СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ТОГДА (СУММА(ВЫБОР КОГДА ОстаткиРезерв.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиРезерв.КоличествоОстаток КОНЕЦ) + СУММА(ВЫБОР КОГДА ОстаткиНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиНаСкладе.КоличествоОстаток КОНЕЦ))
		|	      ИНАЧЕ СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить) КОНЕЦ КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьОтгрузить,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПокупателя = &ЗаказПокупателя
		|		                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.Номенклатура
		|
		|	) КАК ВнутреннийЗапрос
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // резервы
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(," + ?(мМногоСкладов, "", "Склад = &Склад И ") + "
		|	                                                  ДокументРезерва = &ЗаказПокупателя) КАК ОстаткиРезерв
		|ПО
		|	ВнутреннийЗапрос.Номенклатура = ОстаткиРезерв.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // остатки орагнизаций
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(, Организация = &Организация) КАК ОстаткиОрганизаций
		|ПО
		|	ВнутреннийЗапрос.Номенклатура = ОстаткиОрганизаций.Номенклатура
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ // реальные товары на складе за вычетом резервов и товаров к передаче
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиНаСкладе.Номенклатура,
		|		ОстаткиНаСкладе.КоличествоОстаток
		|		- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
		|		- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК КоличествоОстаток
		|
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиНаСкладе
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиВРезерве
		|	ПО
		|		ОстаткиНаСкладе.Номенклатура = ОстаткиВРезерве.Номенклатура
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки" + ?(мМногоСкладов, "", "(, Склад = &Склад)") + " КАК ОстаткиКПередаче
		|	ПО
		|		ОстаткиНаСкладе.Номенклатура = ОстаткиКПередаче.Номенклатура
		|
		|	) КАК ОстаткиНаСкладе
		|ПО
		|	ВнутреннийЗапрос.Номенклатура    = ОстаткиНаСкладе.Номенклатура
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.Номенклатура
		|";

		ВозвратнаяТара = Запрос.Выполнить().Выгрузить();

		Если мМногоСкладов Тогда

			ЗапросПоСкладам.Текст = "
			|ВЫБРАТЬ
			|	Истина                                               КАК Пометка,
			|	Истина                                               КАК МеткаОстаткиПоСкладу,
			|	ОстаткиНаСкладе.Номенклатура.Код                     КАК Код,
			|	ОстаткиНаСкладе.Номенклатура.Артикул                 КАК Артикул,
			|	ОстаткиНаСкладе.Номенклатура                         КАК Номенклатура,
			|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|	ОстаткиНаСкладе.Склад                                КАК Склад,
			|	0                                                    КАК Запланировано,
			|	0                                                    КАК ОсталосьОтгрузить,
			|	ОстаткиВРезерве.КоличествоОстаток                    КАК РезервПоЗаказу,
			|	0                                                    КАК ОстатокПоОрганизации,
			|	ОстаткиНаСкладе.КоличествоОстаток
			|	- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
			|	- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК СвободныйОстаток,
			|	0 КАК МожноОтгрузить,
			|	0 КАК ДобавитьВДокумент
			|
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ОстаткиНаСкладе
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ОстаткиВРезерве
			|ПО
			|	ОстаткиНаСкладе.Номенклатура = ОстаткиВРезерве.Номенклатура
			|	И ОстаткиНаСкладе.Склад      = ОстаткиВРезерве.Склад
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки КАК ОстаткиКПередаче
			|ПО
			|	ОстаткиНаСкладе.Номенклатура = ОстаткиКПередаче.Номенклатура
			|	И ОстаткиНаСкладе.Склад      = ОстаткиКПередаче.Склад
			|
			|ПРАВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
			|	                                              И ЗаказПокупателя = &ЗаказПокупателя
			|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
			|ПО
			|	ОстаткиНаСкладе.Номенклатура = ОстаткиЗаказ.Номенклатура
			|
			|ГДЕ
			|	НЕ ОстаткиНаСкладе.Номенклатура ЕСТЬ NULL
			|";

			ТоварыНаСкладе = ЗапросПоСкладам.Выполнить().Выгрузить();
			ТоварыПоЗаказу = ВозвратнаяТара.Скопировать();

			ТоварыНаСкладе.Сортировать("Номенклатура, Склад");

			Для Каждого СтрокаПоЗаказу ИЗ ТоварыПоЗаказу Цикл
				МожноОтгрузить = СтрокаПоЗаказу.МожноОтгрузить;

				Если МожноОтгрузить <= 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);

				СтрокиПоСкладу = ТоварыНаСкладе.НайтиСтроки(СтруктураПоиска);

				Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
					СвободныйОстаток = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.СвободныйОстаток), 0, СтрокаПоСкладу.СвободныйОстаток);
					РезервПоЗаказу   = ?(ЗначениеНеЗаполнено(СтрокаПоСкладу.РезервПоЗаказу),   0, СтрокаПоСкладу.РезервПоЗаказу);
					КолвоОстаток     = СвободныйОстаток + РезервПоЗаказу;
					КолвоДобавить    = Мин(МожноОтгрузить, КолвоОстаток);
					МожноОтгрузить   = МожноОтгрузить - КолвоДобавить;

					Если КолвоДобавить > 0 Тогда
						СтрокаПоСкладу.ДобавитьВДокумент = КолвоДобавить;
					КонецЕсли;

					Если МожноОтгрузить <= 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			ЗагрузитьВТаблицуЗначений(ТоварыНаСкладе, ВозвратнаяТара);
			ВозвратнаяТара.Сортировать("Номенклатура, Склад");

		КонецЕсли;

	Иначе

		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Ложь;

	КонецЕсли;

	Если ПоказыватьУслуги Тогда

		// Услуги:
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,
		|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,
		|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ВЫБОР КОГДА ОстаткиЗаказ.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ДокументЗаказ.Номенклатура
		|		      ИНАЧЕ ОстаткиЗаказ.Номенклатура КОНЕЦ       КАК Номенклатура,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоОстаток)          КАК ОсталосьОтгрузить,
		|		СУММА(ДокументЗаказ.Количество)                   КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПокупателя = &ЗаказПокупателя
		|		                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	ПОЛНОЕ СОЕДИНЕНИЕ // документ заказа
		|		Документ.ЗаказПокупателя.Услуги КАК ДокументЗаказ
		|	ПО
		|		ДокументЗаказ.Номенклатура                 = ОстаткиЗаказ.Номенклатура
		|
		|	ГДЕ
		|		ДокументЗаказ.Ссылка = &ЗаказПокупателя
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВЫБОР КОГДА ОстаткиЗаказ.Номенклатура ЕСТЬ NULL
		|		      ТОГДА ДокументЗаказ.Номенклатура
		|		      ИНАЧЕ ОстаткиЗаказ.Номенклатура КОНЕЦ
		|
		|	) КАК ВнутреннийЗапрос
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.Номенклатура
		|";

		Услуги = Запрос.Выполнить().Выгрузить();

	Иначе

		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Ложь;

	КонецЕсли;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);

	// Установить видимость колонок "Склад"
	СтруктураКолонок = Новый Структура("Склад");
	УстновитьВидимостьКолонок(ЭлементыФормы.Товары.Колонки,         СтруктураКолонок, мМногоСкладов);
	УстновитьВидимостьКолонок(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок, мМногоСкладов);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Товары (" + Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + Услуги.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик нажатия кнопки "Заполнить"
//
Процедура ОсновныеДействияФормыДействиеЗаполнить(Кнопка)

	СтруктураВозвращаемыхЗначений = Новый Структура();

	СтруктураВозвращаемыхЗначений.Вставить("Команда",            "ЗаполнениеТабличныхЧастей");

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТовары",    ПоказыватьТовары);
	Если ПоказыватьТовары Тогда
		КопияТовары = Товары.Скопировать();
		КопияТовары.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияТовары.Колонки.Добавить("СпособСписанияОстаткаТоваров");
		КопияТовары.ЗаполнитьЗначения(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада, "СпособСписанияОстаткаТоваров");

		Если мМногоСкладов Тогда
			НомерСтрокиТаблицы = 0;
			Пока НомерСтрокиТаблицы < КопияТовары.Количество() Цикл
				СтрокаТаблицы = КопияТовары.Получить(НомерСтрокиТаблицы);
				
				Если НЕ СтрокаТаблицы.МеткаОстаткиПоСкладу Тогда
					КопияТовары.Удалить(СтрокаТаблицы);
				Иначе
					НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияТовары.Количество() Цикл

			СтрокаТаблицы = КопияТовары.Получить(НомерСтрокиТаблицы);

			Если Не СтрокаТаблицы.Пометка
			 Или СтрокаТаблицы.Количество <= 0 Тогда
				КопияТовары.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;

			Если СтрокаТаблицы.РезервПоЗаказу <> NULL
			   И СтрокаТаблицы.РезервПоЗаказу > 0 Тогда

				Если СтрокаТаблицы.Количество <= СтрокаТаблицы.РезервПоЗаказу Тогда

					// Поменяем способ списания
					СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

				Иначе

					// Разобьем на две строки
					КопияСтроки = КопияТовары.Вставить(КопияТовары.Индекс(СтрокаТаблицы));

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из КопияТовары.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					КопияСтроки.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

					КопияСтроки.Количество       = КопияСтроки.РезервПоЗаказу;
					СтрокаТаблицы.Количество     = СтрокаТаблицы.Количество - КопияСтроки.РезервПоЗаказу;
					СтрокаТаблицы.РезервПоЗаказу = 0;

				КонецЕсли;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("Товары",         КопияТовары);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТару",      ПоказыватьТару);
	Если ПоказыватьТару Тогда
		КопияВозвратнаяТара = ВозвратнаяТара.Скопировать();
		КопияВозвратнаяТара.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияВозвратнаяТара.Колонки.Добавить("СпособСписанияОстаткаТоваров");
		КопияВозвратнаяТара.ЗаполнитьЗначения(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада, "СпособСписанияОстаткаТоваров");

		Если мМногоСкладов Тогда
			НомерСтрокиТаблицы = 0;
			Пока НомерСтрокиТаблицы < КопияВозвратнаяТара.Количество() Цикл
				СтрокаТаблицы = КопияВозвратнаяТара.Получить(НомерСтрокиТаблицы);
				
				Если НЕ СтрокаТаблицы.МеткаОстаткиПоСкладу Тогда
					КопияВозвратнаяТара.Удалить(СтрокаТаблицы);
				Иначе
					НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияВозвратнаяТара.Количество() Цикл

			СтрокаТаблицы = КопияВозвратнаяТара.Получить(НомерСтрокиТаблицы);

			Если Не СтрокаТаблицы.Пометка
			 Или СтрокаТаблицы.Количество <= 0 Тогда
				КопияВозвратнаяТара.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;

			Если СтрокаТаблицы.РезервПоЗаказу <> NULL
			   И СтрокаТаблицы.РезервПоЗаказу > 0 Тогда

				Если СтрокаТаблицы.Количество <= СтрокаТаблицы.РезервПоЗаказу Тогда

					// Поменяем способ списания
					СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

				Иначе

					// Разобьем на две строки
					КопияСтроки = КопияВозвратнаяТара.Вставить(КопияВозвратнаяТара.Индекс(СтрокаТаблицы));

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из КопияВозвратнаяТара.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					КопияСтроки.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

					КопияСтроки.Количество = КопияСтроки.РезервПоЗаказу;
					СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - КопияСтроки.РезервПоЗаказу;
					СтрокаТаблицы.РезервПоЗаказу = 0;

				КонецЕсли;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("ВозвратнаяТара", КопияВозвратнаяТара);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьУслуги",    ПоказыватьУслуги);
	Если ПоказыватьУслуги Тогда
		КопияУслуги = Услуги.Скопировать();
		КопияУслуги.Колонки.ДобавитьВДокумент.Имя = "Количество";

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияУслуги.Количество() Цикл
			
 			СтрокаТаблицы = КопияУслуги.Получить(НомерСтрокиТаблицы);
			попытка //BugFix: иногда поля неопределены!?
				Если СтрокаТаблицы.Пометка=ЛОЖЬ
				 Или СтрокаТаблицы.Количество <= 0 Тогда
					КопияУслуги.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
			исключение
			КонецПопытки;	
			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;

		СтруктураВозвращаемыхЗначений.Вставить("Услуги",         КопияУслуги);
	КонецЕсли;

	ОповеститьОВыборе(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // ОсновныеДействияФормыДействиеЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Установить все флажки" 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеУстановитьФлажки()

// Процедура вызывается при нажатии кнопки "Снять все флажки" 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСнятьФлажки()

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Товары);

КонецПроцедуры // КоманднаяПанельТоварыОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Товары, "МожноОтгрузить");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

// Процедура вызывается при нажатии кнопки "Установить все флажки" 
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки()

// Процедура вызывается при нажатии кнопки "Снять все флажки" 
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки()

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(ВозвратнаяТара, "МожноОтгрузить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнить()

// Процедура вызывается при нажатии кнопки "Установить все флажки" 
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеУстановитьФлажки()

// Процедура вызывается при нажатии кнопки "Снять все флажки" 
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеСнятьФлажки()

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Услуги, "ОсталосьОтгрузить");

КонецПроцедуры // КоманднаяПанельУслугиЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.ДобавитьВДокумент > ДанныеСтроки.МожноОтгрузить Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = ?(ДанныеСтроки.МеткаОстаткиПоСкладу, мЦветТекста, мКрасныйЦвет);
	КонецЕсли;

	Если ДанныеСтроки.ОсталосьОтгрузить > ДанныеСтроки.МожноОтгрузить Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если мМногоСкладов И НЕ ДанныеСтроки.МеткаОстаткиПоСкладу Тогда
		ОформлениеСтроки.ЦветФона = мЦветФона;
	КонецЕсли;

	Если мМногоСкладов Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = НЕ ДанныеСтроки.МеткаОстаткиПоСкладу;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части "Товары".
//
Процедура ТоварыДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;

	Если мМногоСкладов
	   И ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, Товары);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличной части "Товары".
//
Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если мМногоСкладов Тогда
		Если ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
			УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары)
		Иначе
			УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.ДобавитьВДокумент > ДанныеСтроки.МожноОтгрузить Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = ?(ДанныеСтроки.МеткаОстаткиПоСкладу, мЦветТекста, мКрасныйЦвет);
	КонецЕсли;

	Если ДанныеСтроки.ОсталосьОтгрузить > ДанныеСтроки.МожноОтгрузить Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если мМногоСкладов И НЕ ДанныеСтроки.МеткаОстаткиПоСкладу Тогда
		ОформлениеСтроки.ЦветФона = мЦветФона;
	КонецЕсли;

	Если мМногоСкладов Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = НЕ ДанныеСтроки.МеткаОстаткиПоСкладу;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока;

	Если мМногоСкладов
	   И ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ВозвратнаяТара);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если мМногоСкладов Тогда
		Если ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
			УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара)
		Иначе
			УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Услуги".
//
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // УслугиПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Услуги".
//
Процедура УслугиПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // УслугиПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	Попытка //BugFix - неопределенные значения
		Если ДанныеСтроки.ДобавитьВДокумент > ДанныеСтроки.ОсталосьОтгрузить Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
		КонецЕсли;
	Исключение
	КонецПопытки;	
	
КонецПроцедуры // УслугиПриВыводеСтроки()


мКрасныйЦвет = Новый Цвет(255, 0, 0);
мЦветФона    = ЦветаСтиля.ЦветФонаФормы;
мЦветТекста  = ЦветаСтиля.ЦветТекстаПоля;
мЖирныйШрифт = Новый Шрифт(,, Истина);

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мМногоСкладов   = (УказаниеСкладов      = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                   Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
