////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	//мДеревоМакетов = ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	//УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	//УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	//Если Не мПодменюПечати = Неопределено Тогда
	//	СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//мКнопкиЗаполненияТЧ = ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	//
	//СоответствиеТЧ = Новый Соответствие;
	//СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	//
	//СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете    .Доступность = мОтражатьВРегламентированномУчете;
	
	//ЭлементыФормы.СубконтоБУ.Доступность          = НЕ (ЗначениеНеЗаполнено(СчетСписанияБУ) ИЛИ (СчетСписанияБУ.ВидыСубконто.Количество() = 0));
	//ЭлементыФормы.СубконтоНУ.Доступность          = НЕ (ЗначениеНеЗаполнено(СчетСписанияНУ) ИЛИ (СчетСписанияНУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.НадписьСчетСписанияБУ.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетСписанияНУ.Видимость = ОтражатьВНалоговомУчете;
	ЭлементыФормы.НадписьСубконтоБУ.Видимость     = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСубконтоНУ.Видимость     = ОтражатьВНалоговомУчете;
	ЭлементыФормы.НадписьСобытие.Видимость 		  = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьСписаниеРегл.Видимость   = ОтражатьВБухгалтерскомУчете;
	
	//УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
КонецПроцедуры //УстановитьВидимость()

// Процедура установки аналитики в зависимости от выбранного счета
//
Процедура УстановитьАналитику(СчетСписания,Субконто)

	Если СчетСписания.ВидыСубконто.Количество() > 0 Тогда
		Субконто = Новый(СчетСписания.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		Субконто = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	//Если ЗначениеНеЗаполнено(ДокументОбъект.Событие) Тогда
	//	ДокументОбъект.Событие      = ПолучитьСостояниеОСИзСправочника(Перечисления.ВидыСостоянийОС.СнятоСУчета);
	//КонецЕсли;

	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетСписанияБУ) Тогда
	//	ДокументОбъект.СчетСписанияБУ = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
	//	УстановитьАналитику(ДокументОбъект.СчетСписанияБУ,ДокументОбъект.СубконтоБУ);
	//КонецЕсли;

	//Если ЗначениеНеЗаполнено(ДокументОбъект.СчетСписанияНУ) Тогда
	//	ДокументОбъект.СчетСписанияНУ = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
	//	УстановитьАналитику(ДокументОбъект.СчетСписанияНУ,ДокументОбъект.СубконтоНУ);
	//КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию если документ не скопирован
		ЗаполнитьШапкуДокумента(ЭтотОбъект, глТекущийПользователь);

		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		КонецЕсли;
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете);
	УстановитьВидимость();
	
	УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установим видимость и доступность реквизитов
	УстановитьВидимость();

	// Установить активный реквизит.
	АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;

	
	Если НЕ ЭтоНовый() Тогда
		
		УстановитьЭлементыИсторииКнопка(Ссылка, ЭтаФорма);
		
	КонецЕсли; 

	
КонецПроцедуры

Процедура ВыводИстории(Элемент)
	
	ВывестиИсторию(Ссылка, ЭтаФорма);
	
КонецПроцедуры
	
	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ЗначениеНеЗаполнено(ВладелецФормы) Тогда

		// Надо поменять текст про документ в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда
			ВладелецФормы.ЗаполнитьТекстПроДокументы();
		КонецЕсли;

	КонецЕсли;

	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если НЕ ЗначениеНеЗаполнено(ЗначениеВыбора) Тогда

		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");

			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);

			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажании кнопки Заполнить командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе.");
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		        РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос.УстановитьПараметр("СписокОС",СписокОС);
	Запрос.Текст = "ВЫБРАТЬ
	|	АмортизацияОстатки.ОсновноеСредство                                   КАК ОС_УУ,
	|	АмортизацияОстатки.СтоимостьОстаток                                   КАК Стоимость,
	|	АмортизацияОстатки.АмортизацияОстаток                                 КАК Амортизация,
	|	ОсновныеСредстваСписанныеНаЗатратыОстатки.ОсновноеСредство            КАК ОС_НаЗатратыУУ,
	|	ОсновныеСредстваСписанныеНаЗатратыОстатки.СтоимостьОстаток            КАК СтоимостьНаЗатраты
	|ИЗ
	|		 РегистрНакопления.СтоимостьОС.Остатки(, ОсновноеСредство В (&СписокОС)) КАК АмортизацияОстатки
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ОССписанныеНаЗатраты.Остатки(, ОсновноеСредство В (&СписокОС)) КАК ОсновныеСредстваСписанныеНаЗатратыОстатки
	|			ПО АмортизацияОстатки.ОсновноеСредство = ОсновныеСредстваСписанныеНаЗатратыОстатки.ОсновноеСредство";
	ТЗ = Запрос.Выполнить().Выгрузить();

	ТаблицаАмортизацииУпр = Новый ТаблицаЗначений();
	

	Если ТЗ.Количество()>0 Тогда

		Если ОтражатьВУправленческомУчете Тогда
			ТаблицаАмортизацииУпр = РасчетАмортизацииУпр(Дата, СписокОС);
		КонецЕсли;

		//Если ОтражатьВБухгалтерскомУчете Тогда
		//	ТаблицаАмортизацииБух = РасчетАмортизацииБухРегл(Дата, Организация, СписокОС);
		//КонецЕсли;

		//Если ОтражатьВНалоговомУчете Тогда
		//	ТаблицаАмортизацииНал = РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, Организация, СписокОС);
		//КонецЕсли;

		Для каждого Строка Из ОС Цикл

			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство,"ОС_УУ, ОС_НаЗатратыУУ");

			Если СтрокаТЗ = Неопределено Тогда

				Если ОтражатьВУправленческомУчете Тогда

					Строка.Стоимость          = 0;
					Строка.Амортизация        = 0;
					Строка.АмортизацияЗаМесяц = 0;
					Строка.СписаноНаЗатраты   = Ложь;

				КонецЕсли;

				//Если ОтражатьВБухгалтерскомУчете Тогда

				//	Строка.СтоимостьБУ          = 0;
				//	Строка.АмортизацияБУ        = 0;
				//	Строка.АмортизацияЗаМесяцБУ = 0;
				//	Строка.СписаноНаЗатратыБУ   = Ложь;

				//КонецЕсли;

				//Если ОтражатьВНалоговомУчете Тогда

				//	Строка.СтоимостьНУ                                  = 0;
				//	Строка.АмортизацияНУ                                = 0;
				//	Строка.АмортизацияЗаМесяцНУ                         = 0;
				//	Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;

				//КонецЕсли;

			Иначе

				// В соответствующие поля строки запишем данные из запроса
				Если ОтражатьВУправленческомУчете Тогда

					Если СтрокаТЗ.СтоимостьНаЗатраты = NULL Тогда

						Строка.Стоимость            = СтрокаТЗ.Стоимость;
						Строка.Амортизация          = СтрокаТЗ.Амортизация;
						СтрокаТаблицаАмортизацииУпр = ТаблицаАмортизацииУпр.Найти(Строка.ОсновноеСредство,"ОС");
						Строка.АмортизацияЗаМесяц   = ?(СтрокаТаблицаАмортизацииУпр = Неопределено,0,СтрокаТаблицаАмортизацииУпр.Упр);
						Строка.СписаноНаЗатраты     = Ложь;

					Иначе

						Строка.Стоимость          = СтрокаТЗ.СтоимостьНаЗатраты;
						Строка.Амортизация        = 0;
						Строка.АмортизацияЗаМесяц = 0;
						Строка.СписаноНаЗатраты   = Истина;

					КонецЕсли;

				КонецЕсли;

				//Если ОтражатьВБухгалтерскомУчете Тогда

				//	Если СтрокаТЗ.СтоимостьНаЗатратыБУ = NULL Тогда

				//		Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				//		Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				//		СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство,"ОС");
				//		Строка.АмортизацияЗаМесяцБУ = ?(СтрокаТаблицаАмортизацииБух = Неопределено,0,СтрокаТаблицаАмортизацииБух.Бух);
				//		Строка.СписаноНаЗатратыБУ   = Ложь;

				//	Иначе

				//		Строка.СтоимостьБУ = СтрокаТЗ.СтоимостьНаЗатратыБУ;
				//		Строка.АмортизацияБУ        = 0;
				//		Строка.АмортизацияЗаМесяцБУ = 0;
				//		Строка.СписаноНаЗатратыБУ   = Истина;

				//	КонецЕсли;

				//КонецЕсли;

				//Если ОтражатьВНалоговомУчете Тогда

				//	Строка.СтоимостьНУ                                  = СтрокаТЗ.СтоимостьНУ;
				//	Строка.АмортизацияНУ                                = СтрокаТЗ.АмортизацияНУ;
				//	СтрокаТаблицаАмортизацииНал                         = ТаблицаАмортизацииНал.Найти(Строка.ОсновноеСредство,"ОС");
				//	Строка.АмортизацияЗаМесяцНУ                         = ?(СтрокаТаблицаАмортизацииНал = Неопределено,0,СтрокаТаблицаАмортизацииНал.Налог);
				//	Строка.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = ?(СтрокаТаблицаАмортизацииНал = Неопределено,0,СтрокаТаблицаАмортизацииНал.СуммаКапитальныхВложенийВключаемыхВРасходы);

				//КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Сообщить("Данные для заполнения отсутствуют.");

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)

	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	

КонецПроцедуры

 // Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	//ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьНомерДокумента(ЭтотОбъект);
	ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	//УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	
	УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьКнопкиПечати();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
		УстановитьНомерДокумента(ЭтотОбъект);
	КонецЕсли;

	УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	УстановитьВидимость();
	ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияБУ.
//
Процедура СчетСписанияБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНУ.
//
Процедура СчетСписанияНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияБУ.
//
Процедура СчетСписанияБУПриИзменении(Элемент)

	//УстановитьАналитику(СчетСписанияБУ,СубконтоБУ);

	//СчетСписанияНУ = ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетСписанияБУ));

	//УстановитьАналитику(СчетСписанияНУ,СубконтоНУ);
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНУ.
//
Процедура СчетСписанияНУПриИзменении(Элемент)

	Если СчетСписанияНУ.ВидыСубконто.Количество() > 0 Тогда
		СубконтоНУ = Новый(СчетСписанияНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СубконтоНУ = Неопределено;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

//Процедура - обработчик события "Очистка" элемента формы СубконтоБУ
//
Процедура СубконтоБУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	УстановитьАналитику(СчетСписанияБУ,СубконтоБУ);

	
КонецПроцедуры

//Процедура - обработчик события "Очистка" элемента формы СубконтоНУ
//
Процедура СубконтоНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	УстановитьАналитику(ДокументОбъект.СчетСписанияНУ,ДокументОбъект.СубконтоНУ);

КонецПроцедуры


Процедура СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = Новый СписокЗначений;
	ВидыСобытий.Добавить(Перечисления.ВидыСобытийОС.Списание);
    НачалоВыбораЗначенияСобытияОС(Элемент, ВидыСобытий, СтандартнаяОбработка);

КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеРегл
//
Процедура СобытиеРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимость.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимость.Текст = 
			ФорматСумм(ДанныеСтроки.Стоимость - ДанныеСтроки.Амортизация - ДанныеСтроки.АмортизацияЗаМесяц);

	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьБУ - ДанныеСтроки.АмортизацияБУ - ДанныеСтроки.АмортизацияЗаМесяцБУ);

	КонецЕсли;

	Если ОтражатьВНалоговомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьНУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьНУ.Текст = 
			ФорматСумм(ДанныеСтроки.СтоимостьНУ - ДанныеСтроки.АмортизацияНУ - ДанныеСтроки.АмортизацияЗаМесяцНУ);

	КонецЕсли;
	

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	//ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	//ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	//Если НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
	//	
	//	УстановитьКнопкиПечати();
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры





